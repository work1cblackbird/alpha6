// Модуль менеджера документа "Заказ-наряд"

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	ПредставлениеДаты = ?(Данные.Состояние <> Справочники.ВидыСостоянийЗаказНарядов.Закрыт, 
							Данные.Дата, Данные.ДатаЗакрытия);
	Представление = СтрШаблон(
	НСтр("ru = 'Заказ-наряд №%1 от %2 / %3'"),
	Данные.Номер,
	Формат(ПредставлениеДаты, ?(Год(ПредставлениеДаты) = Год(ТекущаяДатаСеанса()), "ДФ=dd.MM", "ДЛФ=D")),
	Строка(Данные.Состояние));
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	Поля.Добавить("ДатаЗакрытия");
	Поля.Добавить("Состояние");
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ОбработчикиОбновления

// Выполняет перенос свойств в реквизиты объекта
// Руководитель, ГлавныйБухгалтер,Отустил, ОтпустилКонтрагент, Получил, ПолучилКонтрагент
//
Процедура ВыполнитьПереносПодписантовИзСвойств() Экспорт 
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();
	ПеренесеныВсеСвойства = Истина;
	МассивПереносимыхСвойств = УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНарядДополнительныеРеквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказНаряд.ДополнительныеРеквизиты КАК ЗаказНарядДополнительныеРеквизиты
	|ГДЕ
	|	ЗаказНарядДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", МассивПереносимыхСвойств);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();  
	
	Пока Выборка.Следующий() Цикл  
		
		СвойстваКУдалению = Новый Массив();
		
		НачатьТранзакцию(); 
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаказНаряд");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();  
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗначенияСвойств = ДокументОбъект.ДополнительныеРеквизиты.Выгрузить();

			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда 
				
				СвойствоРуководитель = ЗначенияСвойств.Найти(ПереносимыеСвойства.Руководитель,"Свойство");
				
				Если СвойствоРуководитель <> Неопределено Тогда
					
					ДокументОбъект.Руководитель = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоРуководитель.Значение,
						Выборка.Ссылка
					);
					
					Если ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоРуководитель.Свойство);
						
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтОрганизации) Тогда 
					
					ДокументОбъект.Руководитель = ДокументОбъект.ПодписантОтОрганизации
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда	
				
				СвойствоГлавныйБухгалтер = ЗначенияСвойств.Найти(ПереносимыеСвойства.ГлавныйБухгалтер,"Свойство");
				
				Если СвойствоГлавныйБухгалтер <> Неопределено Тогда
					
					ДокументОбъект.ГлавныйБухгалтер = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоГлавныйБухгалтер.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоГлавныйБухгалтер.Свойство); 
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда	
				
				СвойствоОтпустил = ЗначенияСвойств.Найти(ПереносимыеСвойства.Отпустил,"Свойство");
				
				Если СвойствоОтпустил <> Неопределено Тогда
					
					ДокументОбъект.Отпустил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоОтпустил.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоОтпустил.Свойство);
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда	
				
				СвойствоПолучилКонтрагент = ЗначенияСвойств.Найти(ПереносимыеСвойства.ПолучилКонтрагент,"Свойство");
				
				Если СвойствоПолучилКонтрагент <> Неопределено Тогда
					
					ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоПолучилКонтрагент.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоПолучилКонтрагент.Свойство);
						
					КонецЕсли; 
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтКонтрагента) Тогда 
					
					ДокументОбъект.Получил = ДокументОбъект.ПодписантОтКонтрагента
					
				КонецЕсли;
				
			КонецЕсли; 

			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
				
				СвойствоДоверенность = ЗначенияСвойств.Найти(ПереносимыеСвойства.Доверенность,"Свойство");
				
				Если СвойствоДоверенность <> Неопределено Тогда

					Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
							СвойствоДоверенность.Значение.Владелец,
							Выборка.Ссылка,
							СвойствоДоверенность.Значение
						);
						
						Если ЗначениеЗаполнено(ДокументОбъект.Получил)  И значениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство);
							
						КонецЕсли; 
						
					ИначеЕсли ДокументОбъект.Получил.Подписант = СвойствоДоверенность.Значение.Владелец
						И  НЕ ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
						
						ПолучилОбъект = ДокументОбъект.Получил.ПолучитьОбъект();
						ПолучилОбъект.Основание = СвойствоДоверенность.Значение;  
						
						Попытка	
							ПолучилОбъект.Записать(); 
						Исключение	
						КонецПопытки;
						
						Если ЗначениеЗаполнено(ПолучилОбъект.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство); 
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;  
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Принял) Тогда
				СвойствоДоверенность = ЗначенияСвойств.Найти(ПереносимыеСвойства.Доверенность,"Свойство");
				
				Если СвойствоДоверенность <> Неопределено Тогда

										
					ДокументОбъект.Принял = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоДоверенность.Значение.Владелец,
						Выборка.Ссылка,
						СвойствоДоверенность.Значение
					);
						
					Если ЗначениеЗаполнено(ДокументОбъект.Принял)  И значениеЗаполнено(ДокументОбъект.Принял.Основание) Тогда
							
						СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство);
							
					КонецЕсли; 
					
				КонецЕсли;
					
			КонецЕсли;
			
			Если СвойстваКУдалению.Количество()>0 Тогда  
				
				Для Каждого Элемент Из СвойстваКУдалению Цикл 
					
					Строка = ДокументОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
					Если Строка <> Неопределено Тогда 
						
						ДокументОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение 
			
			ОтменитьТранзакцию(); 
			ПеренесеныВсеСвойства = Ложь;
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления списка подписантов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ПеренесеныВсеСвойства  Тогда
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Набор
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка.ИмяПредопределенныхДанных = ""Документ_ЗаказНаряд""";
		
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();	
			
			Пока Выборка.Следующий() Цикл
				

				Попытка	
					НаборОбъект = Выборка.Набор.ПолучитьОбъект();
					
					Для Каждого Элемент Из МассивПереносимыхСвойств Цикл 
					
						Строка = НаборОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
						Если Строка <> Неопределено Тогда 
						
							НаборОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
						КонецЕсли;
					
					КонецЦикла;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборОбъект);
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось обработать справочник: ""НаборыДополнительныхРеквизитовИСведений"" по причине:
							|%1'"), 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений, "НаборыДополнительныхРеквизитовИСведений", ТекстСообщения);
				КонецПопытки;	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры	

// Выполяет проверку выполнения отложенного обработчика обновления ВыполнитьПереносПодписантовИзСвойств
//
// Параметры:
//  Параметры - Структура - параметры выполнения операции
//
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ПроверитьПереносПодписантовИзСвойств(Параметры) Экспорт
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНарядДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ЗаказНарядДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Документ.ЗаказНаряд.ДополнительныеРеквизиты КАК ЗаказНарядДополнительныеРеквизиты
	|ГДЕ
	|	ЗаказНарядДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)
	|	И ЗаказНарядДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства));
	Запрос.УстановитьПараметр("Ссылка",				 Параметры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Выполняет перезаполнение измерения "Автомобиль" в движениях по регистру "Продажи".
Процедура ВыполнитьЗаполнениеАвтомобиляПоРегиструПродажи(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Продажи.Регистратор КАК Ссылка,
	|	ЕСТЬNULL(ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль, ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)) КАК Автомобиль
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд КАК ЗаказНаряд
	|		ПО Продажи.Регистратор = ЗаказНаряд.Ссылка
	|ГДЕ
	|	Продажи.Регистратор ССЫЛКА Документ.ЗаказНаряд
	|	И Продажи.Автомобиль = ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Автомобиль) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыНакопления.Продажи.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Ссылка;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Продажи.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Выбран() Тогда
				Для Каждого Запись Из НаборЗаписей Цикл
					Запись.Автомобиль = Выборка.Автомобиль;
				КонецЦикла;
			КонецЕсли;
			
			НаборЗаписей.Записать();
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось записать набор записей регистра накопления ""Продажи"" по причине:
						|%1'"), 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				);
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыНакопления.Продажи,
				"Продажи",
				ТекстСообщения
			);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьЗаполнениеАвтомобиляПоРегиструПродажи(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Продажи.Регистратор КАК Ссылка,
	|	ЕСТЬNULL(ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль, ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)) КАК Автомобиль
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд КАК ЗаказНаряд
	|		ПО Продажи.Регистратор = ЗаказНаряд.Ссылка
	|ГДЕ
	|	Продажи.Регистратор ССЫЛКА Документ.ЗаказНаряд
	|	И Продажи.Автомобиль = ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти 
 
#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. 
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ЭДО

// Данные для УДПЭД 
// Параметры:
//  ЗаказНаряд - ДокументСсылка.ЗаказНаряд - документ, данные которого получаем
//
// Возвращаемое значение:
// 	Структура - для заполнения УДПЭД
//
Функция ДанныеДляУДПЭД(ЗаказНаряд) Экспорт 
	
	Если ЗаказНаряд.Пустая() Тогда
		
		ВызватьИсключение НСтр("ru = 'Не указан документ для выгрузки в ЭДО'");
		
	КонецЕсли;
	
	Если ТипЗнч(ЗаказНаряд) <> Тип("ДокументСсылка.ЗаказНаряд") Тогда
		
		ВызватьИсключение НСтр("ru = 'Неверный тип первого параметра. Ожидается ДокументСсылка.ЗаказНаряд'");
		
	КонецЕсли;
	
	Шапка = ДанныеДляУДПЭДШапка(ЗаказНаряд);
	Возврат Новый Структура(
		"Шапка,Товары,КодыУпаковокМаркируемойПродукции,ПрослеживаемыеТовары",
		Шапка,
		ДанныеДляУДПЭДТовары(Шапка),
		ПолучитьКодыУпаковокМаркируемойПродукции(ЗаказНаряд),
		УправлениеДиалогомДокументаСервер.РНПТПрослеживаемыхТоваров(ЗаказНаряд)
	);
	
КонецФункции

#КонецОбласти

// Формирует коллекцию с описанием кодов маркировок проданых товаров
//
// Параметры:
//  Сам - ДокументСсылка.РеализацияТоваров - Документ, для которого выполняется операция.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками:
//    * ИдентификаторТовара - Строка - идентификатор строки товаров к которой относятся коды;
//    * КодМаркировки - Строка - код маркировки товара
//
Функция ПолучитьКодыУпаковокМаркируемойПродукции(Сам) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказНарядТовары.Номенклатура КАК Номенклатура,
		|	ЗаказНарядТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|ПОМЕСТИТЬ ТоварыВДокументе
		|ИЗ
		|	Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
		|ГДЕ
		|	ЗаказНарядТовары.Ссылка = &ЗаказНаряд
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаркировкаТоваровВПроизводстве.Номенклатура КАК Номенклатура,
		|	МаркировкаТоваровВПроизводстве.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	МаркировкаТоваровВПроизводстве.КодМаркировки КАК КодМаркировки
		|ПОМЕСТИТЬ ДанныеВРегистре
		|ИЗ
		|	РегистрНакопления.МаркировкаТоваровВПроизводстве КАК МаркировкаТоваровВПроизводстве
		|ГДЕ
		|	МаркировкаТоваровВПроизводстве.Регистратор = &ЗаказНаряд
		|	И МаркировкаТоваровВПроизводстве.ЗаказНаряд = &ЗаказНаряд
		|	И МаркировкаТоваровВПроизводстве.Количество <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыВДокументе.Номенклатура КАК Номенклатура,
		|	ТоварыВДокументе.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ДанныеВРегистре.КодМаркировки КАК КодМаркировки
		|ИЗ
		|	ТоварыВДокументе КАК ТоварыВДокументе
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеВРегистре КАК ДанныеВРегистре
		|		ПО ТоварыВДокументе.Номенклатура = ДанныеВРегистре.Номенклатура
		|			И ТоварыВДокументе.ХарактеристикаНоменклатуры = ДанныеВРегистре.ХарактеристикаНоменклатуры"
	);
	Запрос.УстановитьПараметр("ЗаказНаряд", Сам);
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует коллекцию с описанием кодов маркировок проданых товаров в разрезе номенклатуры и характеристики
//
// Параметры:
//  Сам - ДокументСсылка.РеализацияТоваров - Документ, для которого выполняется операция.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками:
//    * Номенклатура - СправочникСсылка.Номенклатура - номенклатура, по которой ведется учет по кодам маркировки;
//    * ХарактеристикаНоменклатуры - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика номенклатуры с кодом;
//    * КодМаркировки - Строка - код маркировки товара
//
Функция ПолучитьКодыУпаковокМаркируемойПродукцииСНоменклатурой(Сам) Экспорт
	
	Возврат ПолучитьКодыУпаковокМаркируемойПродукции(Сам);
	
КонецФункции

// Движения документа выполненные по регистру ГТД
//
// Параметры:
// 	Сам - Документ.Ссылка - документ по которому выбираются движения регистра ГТД
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит результат запроса к регистру ГТД.
//
Функция ДвиженияПоГТД(Сам) Экспорт 
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТоварыВПроизводстве.Номенклатура КАК Номенклатура,
		|	ТоварыВПроизводстве.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТоварыВПроизводстве.ГТД КАК ГТД,
		|	ТоварыВПроизводстве.Партия КАК Партия,
		|	СУММА(ТоварыВПроизводстве.Количество) КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
		|ГДЕ
		|	ТоварыВПроизводстве.Регистратор = &Сам
		|	И ТоварыВПроизводстве.ГТД <> ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыВПроизводстве.ХарактеристикаНоменклатуры,
		|	ТоварыВПроизводстве.Номенклатура,
		|	ТоварыВПроизводстве.ГТД,
		|	ТоварыВПроизводстве.Партия"
	);
	Запрос.УстановитьПараметр("Сам", Сам);	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область ИнтервьюКонтрагента

// Полдучение респондента для проведения интервью.
//
// Параметры:
//  Объект  - ДокументСсылка.ЗаказНаряд - Документ, на основании которого проводится интервью.
//
// Возвращаемое значение:
//   СправочникСсылка.Контрагенты   - Респондент для интервью.
//
Функция РеспондентДляИнтервью(Объект) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "СводныйРемонтныйЗаказ.Заказчик");
	
КонецФункции // РесподентДляИнтервью()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВозвратОтПокупателя);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.АктРазногласий);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказВнутренний);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВводОстатковТоваровВПроизводстве);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаРасходДС);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВыводИзОборотаКодовМаркировки);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказПоставщику);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ДефектовочнаяВедомость);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЖалобаКлиента);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказНаАвтомобиль);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказПокупателя);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаХранениеШин);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ИзвлечениеТоваровИзПроизводства);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Комплектация);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЧекНаОплату);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаРеализации);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПеремещениеНезавершенногоПроизводства);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПеремещениеТоваровВПроизводство);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПеремещениеТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПереразмещениеАвтомобилей);
	
	Если ЗащищенныеФункцииАльфаАвтоСервер.ПодсистемаДоступна("ЗащитаАвтосалон") Тогда
		
		ОбъектыВводимыеНаОсновании.Добавить(Документы.ПоступлениеДопРасходов);
		
	КонецЕсли;
	
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйСкладскойОрдерНаАвтомобили);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РазукомплектацияАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйСкладскойОрдерНаАвтомобили);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СнятиеРезервовЗаказовПокупателя);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СписаниеТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетНаОплату);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетФактураВыданный);

	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ЗаказНаряд);

КонецФункции

#КонецОбласти

// Проверяет возможность ввода счет-фактуры выданной на основании документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ЗаказНаряд - документ, для которого выполняется действие.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина, если ввод возможен, Ложь - в противном случае.
//
Функция ВозможенВводСчетФактурыВыданной(ДокументОбъект, ДополнительныеПарметры = Неопределено) Экспорт
	
	СистемаНО = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.СистемаНалогообложения,
		ДокументОбъект.Организация,
	); 
	
	НалогообложениеУСН = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.НалогообложениеНДСПриУСН,
		ДокументОбъект.Организация,
	);
	
	Если СистемаНО = Перечисления.СистемыНалогообложения.Упрощенная И НЕ РаботаСоСтавкамиНДССервер.УСНПлательщикНДС(НалогообложениеУСН) Тогда
        Возврат Ложь;
	КонецЕсли;
	
	Если ДокументОбъект.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбработкаСобытийДокументаСервер.ДокументСодержитСтрокиСНДС(ДокументОбъект, "Товары, Автоработы");
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЭДО

Функция ДанныеДляУДПЭДШапка(ЗаказНаряд) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказНаряд.Номер КАК Номер,
		|	ЗаказНаряд.Номер КАК НомерПоДаннымКлиента,
		|	ЗаказНаряд.Дата КАК ДатаДокумента,
		|	ЗаказНаряд.Дата КАК ДатаПоДаннымКлиента,
		|	ЗаказНаряд.Организация КАК Организация,
		|	ЗаказНаряд.Организация КАК ЮрФизЛицо,
		|	ЗаказНаряд.Организация КАК Поставщик,
		|	ЗаказНаряд.Контрагент КАК Покупатель,
		|	ЗаказНаряд.Контрагент КАК Плательщик,
		|	NULL КАК Сделка,
		|	ЗаказНаряд.Менеджер КАК Менеджер,
		|	ЗаказНаряд.ДоговорВзаиморасчетов.Наименование КАК ДокументОснованиеНаименование,
		|	ЗаказНаряд.ДокументОснование КАК ДокументОснование,
		|	ЗаказНаряд.ДокументОснование.Номер КАК ДокументОснованиеНомер,
		|	ЗаказНаряд.ДокументОснование.Дата КАК ДокументОснованиеДата,
		|	ЗаказНаряд.ПодразделениеКомпании КАК Подразделение,
		|	ЗаказНаряд.ВалютаДокумента КАК ВалютаДокумента,
		|	ЗаказНаряд.КурсДокумента КАК Курс,
		|	ЗаказНаряд.ТипЦен.ЦенаВключаетНДС КАК СуммаВключаетНДС,
		|	ЗаказНаряд.Менеджер КАК ОтпускПроизвел,
		|	ЗаказНаряд.Организация.ИНН КАК ИННпоставщика,
		|	ЗаказНаряд.Организация.КПП КАК КППпоставщика,
		|	ЗаказНаряд.Контрагент.ИНН КАК ИННпокупателя,
		|	ЗаказНаряд.Контрагент.КПП КАК КППпокупателя,
		|	ЗаказНаряд.ХозОперация КАК ХозОперация,
		|	ЗаказНаряд.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.РеализацияТоваровКомиссия) КАК ЭтоКомиссия,
		|	ЛОЖЬ КАК Исправление,
		|	ЗаказНаряд.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ЗаказНаряд.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЗаказНаряд.Дата
		|		ИНАЧЕ ЗаказНаряд.ДатаЗакрытия
		|	КОНЕЦ КАК Дата,
		|	ЗаказНаряд.ВалютаДокумента.Код КАК КодВалюты,
		|	ЗаказНаряд.ВалютаДокумента.Наименование КАК НаименованиеВалюты,
		|	ЗаказНаряд.ВалютаДокумента.НаименованиеПолное КАК НаименованиеПолноеВалюты,
		|	ЗаказНаряд.ДоговорВзаиморасчетов КАК ДоговорКонтрагента,
		|	ЗаказНаряд.ДоговорВзаиморасчетов.ДатаНачала КАК ДатаДоговора,
		|	ЗаказНаряд.ДоговорВзаиморасчетов.НомерДоговора КАК НомерДоговора,
		|	ЗаказНаряд.ДоговорВзаиморасчетов.Наименование КАК НаименованиеДоговора,
		|	ЗаказНаряд.ИдентификаторГосударственногоКонтракта КАК ИдентификаторГосударственногоКонтракта,
		|	ЗаказНаряд.ОтправлятьКакАктОбОказанииУслуг КАК ОтправлятьКакАктОбОказанииУслуг,
		|	ЗаказНаряд.ВариантРаспределенияСуммыТоваровПриОтправкеПоЭДО КАК ВариантРаспределенияСуммыТоваровПриОтправкеПоЭДО,
		|	ЗаказНаряд.ИдентификаторРаботыДляРаспределенияСуммыТоваров КАК ИдентификаторРаботыДляРаспределенияСуммыТоваров,
		|	ЗаказНаряд.ПричинаВыводаИзОборота КАК ПричинаВыводаИзОборота,
		|	ЗаказНаряд.Грузоотправитель КАК Грузоотправитель,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ЗаказНаряд.Грузополучатель КАК Справочник.Контрагенты)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ЗаказНаряд.СводныйРемонтныйЗаказ.Заказчик
		|		ИНАЧЕ ЗаказНаряд.Грузополучатель
		|	КОНЕЦ КАК Грузополучатель
		|ИЗ
		|	Документ.ЗаказНаряд КАК ЗаказНаряд
		|ГДЕ
		|	ЗаказНаряд.Ссылка = &ТекущийДокумент"
	);
	Запрос.УстановитьПараметр("ТекущийДокумент", ЗаказНаряд);
	ШапкаДокумента = ДополнитьДанныеДокументаОтгрузки(
		ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Запрос.Выполнить().Выгрузить()[0]),
		ЗаказНаряд
	);
	Возврат ДополнитьДанныеДляУДПЭДДополнительнымиРеквизитамиИСведениями(
		ШапкаДокумента,
		ЗаказНаряд
	);
	
КонецФункции

Функция ДополнитьДанныеДокументаОтгрузки(Шапка, СсылкаНаОбъект)
	
	НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Шапка.Ссылка);
	ДатаДокумента = Шапка.Дата;
	
	Товары = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Товары"); 
	Автоработы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Автоработы");
	
	КоличествоТоваров = Товары.Выгрузить().Количество() + Автоработы.Выгрузить().Количество();
	
	КоличествоТовара = "";
	Если КоличествоТоваров = 1 Тогда
		
		КоличествоТовара = "1";
		
	ИначеЕсли КоличествоТоваров > 1 Тогда
		
		КоличествоТовара = СтрШаблон("1-%1", Строка(КоличествоТоваров));
		
	КонецЕсли;
	
	ДокументОбОтгрузке = Новый ТаблицаЗначений;
	ДокументОбОтгрузке.Колонки.Добавить("НомераСтрок");
	ДокументОбОтгрузке.Колонки.Добавить("Наименование");
	ДокументОбОтгрузке.Колонки.Добавить("Номер");
	ДокументОбОтгрузке.Колонки.Добавить("Дата");
	
	СтрокаОтгрузки = ДокументОбОтгрузке.Добавить();
	СтрокаОтгрузки.Наименование 	= Строка(Шапка.ХозОперация);
	СтрокаОтгрузки.Номер 			= НомерДокумента; 
	СтрокаОтгрузки.Дата 			= ДатаДокумента; 
	СтрокаОтгрузки.НомераСтрок 		= КоличествоТовара;  

	Шапка.Вставить("ДокументОбОтгрузке", ДокументОбОтгрузке);
	
	Возврат Шапка;
	
КонецФункции

Функция ДополнитьДанныеДляУДПЭДДополнительнымиРеквизитамиИСведениями(Шапка, СсылкаНаОбъект)
	
	СвойстваНеобходимыеПриВыгрузке = Новый Массив(2);
	СвойстваНеобходимыеПриВыгрузке[0] = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Доверенность;
	СвойстваНеобходимыеПриВыгрузке[1] = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки;
	ЗначенияСвойств = УправлениеСвойствами.ПолучитьЗначенияСвойств(
		СсылкаНаОбъект,
		Истина,
		Истина,
		СвойстваНеобходимыеПриВыгрузке
	);
	
	ДатаОтгрузки = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", ЗначенияСвойств);
	Шапка.Вставить("ДатаОтгрузки", ДатаОтгрузки);
	
	Доверенность = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Доверенность", ЗначенияСвойств);
	
	Если ЗначениеЗаполнено(Доверенность) Тогда
		
		Шапка.Вставить("Доверенность", Доверенность);
		
	КонецЕсли;
	
	Шапка.Вставить(
		"ГлавныйБухгалтер",
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(СсылкаНаОбъект, "ГлавныйБухгалтер")
	);
	Шапка.Вставить("Руководитель", УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(СсылкаНаОбъект, "Руководитель"));
	Шапка.Вставить("Отпустил", УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(СсылкаНаОбъект, "Отпустил"));
	Шапка.Вставить(
		"Получил",
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(СсылкаНаОбъект, "ПолучилКонтрагент", "Получил")
	);
	Возврат Шапка;
	
КонецФункции

Функция ДанныеДляУДПЭДТовары(ШапкаЗаказНаряда, ТоварыВТаблицу = Ложь, ПересчитатьСуммы = Истина) Экспорт
	
	// Получим данные документа с учетом ГТД
	ТаблицаТоваровСчетФактуры = ТоварыИзСчетаФактуры(ШапкаЗаказНаряда.Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваров.Количество КАК Количество,
		|	ТаблицаТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаТоваров.Коэффициент КАК Коэффициент,
		|	ТаблицаТоваров.Цена КАК Цена,
		|	ТаблицаТоваров.Сумма КАК Сумма,
		|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТоваров.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТоваров.СуммаВсего КАК СуммаВсего,
		|	ТаблицаТоваров.ГТД КАК ГТД,
		|	ТаблицаТоваров.Партия КАК Партия,
		|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТаблицаТоваров.НомерСтроки КАК Порядок,
		|	0 КАК НомерСтроки
		|ПОМЕСТИТЬ ДанныеОТоварах
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказНарядТовары.НомерСтроки КАК НомерСтроки,
		|	ЗаказНарядТовары.НомерСтроки КАК НомерСтрокиИсходногоДокумента,
		|	ЗаказНарядТовары.Номенклатура.Код КАК КодТовара,
		|	ЗаказНарядТовары.Номенклатура.Артикул КАК Артикул,
		|	ЗаказНарядТовары.Номенклатура.НаименованиеПолное КАК НаименованиеНоменклатуры,
		|	ЗаказНарядТовары.Номенклатура КАК Номенклатура,
		|	ЗаказНарядТовары.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ЗаказНарядТовары.Номенклатура.Код КАК КодНоменклатуры,
		|	ЗаказНарядТовары.Количество КАК Количество,
		|	ЗаказНарядТовары.Цена * &Курс / &Кратность КАК Цена,
		|	ЗаказНарядТовары.Сумма * &Курс / &Кратность КАК Сумма,
		|	ЗаказНарядТовары.СуммаВсего * &Курс / &Кратность - ЗаказНарядТовары.СуммаНДС * &Курс / &Кратность КАК СуммаБезНДС,
		|	ЗаказНарядТовары.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
		|	ЗаказНарядТовары.СуммаВсего * &Курс / &Кратность КАК СуммаСНДС,
		|	ЗаказНарядТовары.СтавкаНДС КАК СтавкаНДС,
		|	ПРЕДСТАВЛЕНИЕ(ЗаказНарядТовары.ХарактеристикаНоменклатуры) КАК НаименованиеХарактеристики,
		|	ЗаказНарядТовары.ХарактеристикаНоменклатуры КАК Характеристика,
		|	ЗаказНарядТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиница,
		|	ЗаказНарядТовары.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
		|	ЗаказНарядТовары.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
		|	ЗаказНарядТовары.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
		|	ЗаказНарядТовары.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
		|	ЗаказНарядТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЗаказНарядТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
		|	ЗаказНарядТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование КАК ЕдиницаИзмеренияНаименование,
		|	ЗаказНарядТовары.ЕдиницаИзмерения КАК Упаковка,
		|	ЗаказНарядТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК УпаковкаКод,
		|	ЗаказНарядТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование КАК УпаковкаНаименование,
		|	&ТекущийДокумент КАК Ссылка,
		|	"""" КАК ВидУпаковки,
		|	0 КАК СуммаСкидки,
		|	1 КАК Коэффициент,
		|	0 КАК КоличествоМест,
		|	0 КАК КоличествоВОдномМесте,
		|	ЗаказНарядТовары.ГТД КАК ГТД,
		|	ЗаказНарядТовары.Партия КАК Партия,
		|	ВЫБОР
		|		КОГДА ЗаказНарядТовары.ГТД = ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)
		|			ТОГДА ""643""
		|		ИНАЧЕ ЗаказНарядТовары.ГТД.Страна.Код
		|	КОНЕЦ КАК КодСтраныПроисхождения,
		|	ЗаказНарядТовары.ГТД.Страна.Наименование КАК НаименованиеСтраныПроисхождения,
		|	ЗаказНарядТовары.ГТД.Наименование КАК НомерТаможеннойДекларации
		|ИЗ
		|	ДанныеОТоварах КАК ЗаказНарядТовары
		|ГДЕ
		|	ЗаказНарядТовары.Номенклатура Ссылка Справочник.Номенклатура
		|УПОРЯДОЧИТЬ ПО
		|	Порядок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|ЗаказНарядАвтоработы.НомерСтроки КАК НомерСтроки,
		|ЗаказНарядАвтоработы.НомерСтроки КАК НомерСтрокиИсходногоДокумента,
		|ЗаказНарядАвтоработы.ИдентификаторРаботы КАК ИдентификаторРаботы,
		|ЗаказНарядАвтоработы.Авторабота.Код КАК КодТовара,
		|ЗаказНарядАвтоработы.Авторабота.Артикул КАК Артикул,
		|ЗаказНарядАвтоработы.Авторабота.НаименованиеПолное КАК НаименованиеНоменклатуры,
		|ЗаказНарядАвтоработы.Авторабота КАК Номенклатура,
		|ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга) КАК ВидНоменклатуры,
		|ЗаказНарядАвтоработы.Авторабота.Код КАК КодНоменклатуры,
		|ЗаказНарядАвтоработы.Количество * ЗаказНарядАвтоработы.Коэффициент КАК Количество,
		|ЗаказНарядАвтоработы.Цена * &Курс / &Кратность КАК Цена,
		|ЗаказНарядАвтоработы.Сумма * &Курс / &Кратность КАК Сумма,
		|ЗаказНарядАвтоработы.СуммаВсего * &Курс / &Кратность - ЗаказНарядАвтоработы.СуммаНДС * &Курс / &Кратность КАК СуммаБезНДС,
		|ЗаказНарядАвтоработы.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
		|ЗаказНарядАвтоработы.СуммаВсего * &Курс / &Кратность КАК СуммаСНДС,
		|ЗаказНарядАвтоработы.СтавкаНДС КАК СтавкаНДС,
		|"""" КАК НаименованиеХарактеристики,
		|ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
		|ЗаказНарядАвтоработы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиница,
		|ЗаказНарядАвтоработы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
		|ЗаказНарядАвтоработы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
		|ЗаказНарядАвтоработы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
		|ЗаказНарядАвтоработы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
		|ЗаказНаряд.ДоговорВзаиморасчетов.ЕдиницаИзмеренияАвтоработВПечатныхФормах КАК ЕдиницаИзмерения,
		|ЗаказНаряд.ДоговорВзаиморасчетов.ЕдиницаИзмеренияАвтоработВПечатныхФормах.Код КАК ЕдиницаИзмеренияКод,
		|ЗаказНаряд.ДоговорВзаиморасчетов.ЕдиницаИзмеренияАвтоработВПечатныхФормах.Наименование КАК ЕдиницаИзмеренияНаименование,
		|"""" КАК Упаковка,
		|"""" КАК УпаковкаКод,
		|"""" КАК УпаковкаНаименование,
		|ЗаказНарядАвтоработы.Ссылка КАК Ссылка,
		|"""" КАК ВидУпаковки,
		|0 КАК СуммаСкидки,
		|1 КАК Коэффициент,
		|0 КАК КоличествоМест,
		|0 КАК КоличествоВОдномМесте,
		|""643"" КАК КодСтраныПроисхождения,
		|"""" КАК НаименованиеСтраныПроисхождения,
		|"""" КАК НомерТаможеннойДекларации
		|ИЗ
		|	Документ.ЗаказНаряд.Автоработы КАК ЗаказНарядАвтоработы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд КАК ЗаказНаряд
		|		ПО ЗаказНарядАвтоработы.Ссылка = ЗаказНаряд.Ссылка
		|ГДЕ
		|	ЗаказНарядАвтоработы.Ссылка = &ТекущийДокумент
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	Если ПересчитатьСуммы Тогда
		КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, ШапкаЗаказНаряда.Дата);
		Запрос.УстановитьПараметр("Курс", КурсВалюты.Курс);
		Запрос.УстановитьПараметр("Кратность", КурсВалюты.Кратность);
	Иначе
		Запрос.УстановитьПараметр("Курс", 1);
		Запрос.УстановитьПараметр("Кратность", 1);
	КонецЕсли;
	Запрос.УстановитьПараметр("ТекущийДокумент", ШапкаЗаказНаряда.Ссылка);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваровСчетФактуры);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	ТоварыЗаказНаряда = РезультатыЗапросов[1].Выгрузить();
	РаботыЗаказНаряда = РезультатыЗапросов[2].Выгрузить();
	
	Если Не ШапкаЗаказНаряда.ОтправлятьКакАктОбОказанииУслуг Тогда
		
		Если ТоварыВТаблицу Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТоварыЗаказНаряда, РаботыЗаказНаряда);
			Возврат ТоварыЗаказНаряда;
			
		Иначе
			
			Результат = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТоварыЗаказНаряда);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				Результат,
				ОбщегоНазначения.ТаблицаЗначенийВМассив(РаботыЗаказНаряда)
			);
			Возврат Результат;
			
		КонецЕсли;
		
	ИначеЕсли РаботыЗаказНаряда.Количество() = 0 Тогда
		
		ВызватьИсключение НСтр("ru = 'Нет работ для отправки. Отправить акт об оказании услуг невозможно.'");
		
	КонецЕсли;
	
	НеРаспределять = Перечисления.ВариантыРаспределенияСуммыТоваровПриОтправкеПоЭДО.НеРаспределять;
	РаспределятьНаРаботу = Перечисления.ВариантыРаспределенияСуммыТоваровПриОтправкеПоЭДО.РаспределятьНаРаботу;
	
	Если
		ШапкаЗаказНаряда.ВариантРаспределенияСуммыТоваровПриОтправкеПоЭДО = НеРаспределять
		Или ТоварыЗаказНаряда.Количество() = 0
	Тогда
	
		Возврат ?(ТоварыВТаблицу, РаботыЗаказНаряда, ОбщегоНазначения.ТаблицаЗначенийВМассив(РаботыЗаказНаряда));
		
	ИначеЕсли ШапкаЗаказНаряда.ВариантРаспределенияСуммыТоваровПриОтправкеПоЭДО = РаспределятьНаРаботу Тогда
		
		НайденныеСтроки = РаботыЗаказНаряда.НайтиСтроки(
			Новый Структура("ИдентификаторРаботы", ШапкаЗаказНаряда.ИдентификаторРаботыДляРаспределенияСуммыТоваров)
		);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			ВызватьИсключение НСтр("ru = 'Выбранная для распределения суммы товаров строка работ не найдена в документе.'");
			
		КонецЕсли;
		
		ДобавитьСуммуВСтроку(НайденныеСтроки[0], ТоварыЗаказНаряда.Итог("СуммаСНДС"));
		Возврат ?(ТоварыВТаблицу, РаботыЗаказНаряда, ОбщегоНазначения.ТаблицаЗначенийВМассив(РаботыЗаказНаряда));
		
	КонецЕсли;
	
	СуммаТоваров = ТоварыЗаказНаряда.Итог("СуммаСНДС");
	СуммаРабот = РаботыЗаказНаряда.Итог("СуммаСНДС");
	СуммаДокумента = СуммаТоваров + СуммаРабот;
	
	Если СуммаРабот = 0 Тогда
		
		ЦенаЗаЕдиницу = Окр(СуммаТоваров / РаботыЗаказНаряда.Количество(), 2, РежимОкругления.Окр15как20);
		
		Для Каждого СтрокаРаботы Из РаботыЗаказНаряда Цикл
			
			ДобавитьСуммуВСтроку(СтрокаРаботы, ЦенаЗаЕдиницу);
			
		КонецЦикла;
		
	Иначе
		
		ЦенаЗаЕдиницу = Окр(СуммаТоваров / СуммаРабот, 2, РежимОкругления.Окр15как20);
		
		Для Каждого СтрокаРаботы Из РаботыЗаказНаряда Цикл
			
			ДобавитьСуммуВСтроку(СтрокаРаботы, ЦенаЗаЕдиницу * СтрокаРаботы.СуммаСНДС);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Разница = СуммаДокумента - РаботыЗаказНаряда.Итог("СуммаСНДС");
	
	Если Разница <> 0 Тогда
		
		ДобавитьСуммуВСтроку(СтрокаРаботы, Разница);
		
	КонецЕсли;
	
	Возврат ?(ТоварыВТаблицу, РаботыЗаказНаряда, ОбщегоНазначения.ТаблицаЗначенийВМассив(РаботыЗаказНаряда));
	
КонецФункции

Процедура ДобавитьСуммуВСтроку(Строка, Сумма)

	СтоПроцентов = 100;
	Строка.СуммаСНДС = Строка.СуммаСНДС + Сумма;
	Строка.СуммаНДС  = Окр((Строка.СуммаСНДС * Строка.СтавкаНДС.Ставка) / (СтоПроцентов + Строка.СтавкаНДС.Ставка), 2);
	Строка.СуммаБезНДС = Строка.СуммаСНДС - Строка.СуммаНДС;
	Строка.Сумма = Строка.СуммаБезНДС;
	Строка.Цена = ?(
		Строка.Количество * Строка.Коэффициент = 0,
		0,
		Строка.СуммаБезНДС / (Строка.Количество * Строка.Коэффициент)
	);
	
КонецПроцедуры

Функция ТоварыИзСчетаФактуры(Объект)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СчетФактураВыданный.Ссылка КАК СчетФактура
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.ДокументОснование = &Документ"
	);	 
	Запрос.УстановитьПараметр("Документ", Объект);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		СчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
		СчетФактура.ДополнительныеСвойства.Вставить("ПропуститьПроверкуОснованияСчетаФактуры", Истина);
		СчетФактура.Заполнить(Объект);
		
	Иначе
		
		СчетФактура = РезультатЗапроса.Выгрузить()[0].СчетФактура;
		СчетФактура.ПолучитьОбъект();
		
	КонецЕсли;
	
	ТаблицаТоваров = СчетФактура.Товары.Выгрузить();
	
	Возврат ТаблицаТоваров;
	
КонецФункции

#КонецОбласти

Процедура ЗаблокироватьПриНаличииПодчиненных(Объект, Отказ) Экспорт
	
	Если Объект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
		
		ОбработкаСобытийДокументаСервер.ПроверитьРедактированиеДокументаПриНаличииПодчиненных(Объект, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПоказателиЗапасов(ТекущийЗаказНаряд, ТаблицаТоваров, ДопПараметры=Неопределено) Экспорт
	
	ПоСкладу = ПолучитьЗначениеПараметраСтруктуры(ДопПараметры, "ПоСкладу");
	РезервыПоЗаказНаряду = ПолучитьЗначениеПараметраСтруктуры(ДопПараметры, "РезервыПоЗаказНаряду");
	ЗаказПокупателя = ПолучитьЗначениеПараметраСтруктуры(ДопПараметры, "Заказ");
	Основание = ПолучитьЗначениеПараметраСтруктуры(ДопПараметры, "Основание");
	
	Если ЗначениеЗаполнено(ПолучитьЗначениеПараметраСтруктуры(ДопПараметры, "Организация")) Тогда
		Организация = ДопПараметры.Организация;
	Иначе
		Организация = ТекущийЗаказНаряд.Организация;
	КонецЕсли;
	
	ТипКоличества = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
	
	ПоказателиЗапасов = Новый ТаблицаЗначений;
	ПоказателиЗапасов.Колонки.Добавить("Номенклатура",               Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ПоказателиЗапасов.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ПоказателиЗапасов.Колонки.Добавить("СкладКомпании",              Новый ОписаниеТипов("СправочникСсылка.СкладыКомпании"));
	ПоказателиЗапасов.Колонки.Добавить("ЕдиницаИзмерения",           Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ПоказателиЗапасов.Колонки.Добавить("ИдентификаторСтроки",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	ПоказателиЗапасов.Колонки.Добавить("Заказано",                   ТипКоличества);
	ПоказателиЗапасов.Колонки.Добавить("ЗаказаноПодЗН",              ТипКоличества);
	ПоказателиЗапасов.Колонки.Добавить("ЗарезервированоПодЗН",       ТипКоличества);
	ПоказателиЗапасов.Колонки.Добавить("Зарезервировано",            ТипКоличества);
	ПоказателиЗапасов.Колонки.Добавить("Коэффициент",                ТипКоличества);
	ПоказателиЗапасов.Колонки.Добавить("ВПроизводстве",              ТипКоличества);
	ПоказателиЗапасов.Колонки.Добавить("ОсталосьПереместить",        ТипКоличества);
	ПоказателиЗапасов.Колонки.Добавить("ВозможноПереместить",        ТипКоличества);
	ПоказателиЗапасов.Колонки.Добавить("ОстатокНаСкладе",            ТипКоличества);
	ПоказателиЗапасов.Колонки.Добавить("НомерСтроки",            	 ТипКоличества);
	ПоказателиЗапасов.Колонки.Добавить("ОстатокНаОрганизации",		 ТипКоличества);
	
	ЕстьНомерСтроки = ТипЗнч(ТаблицаТоваров) = Тип("ДанныеФормыКоллекция") Или  ЕстьРеквизит(ТаблицаТоваров, "НомерСтроки");
	
	ПоказателиЗапасов.Индексы.Добавить("Номенклатура");
	ПоказателиЗапасов.Индексы.Добавить("ХарактеристикаНоменклатуры");
	
	Если ТекущийЗаказНаряд.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
		
		Возврат ПоказателиЗапасов;
		
	КонецЕсли;
	
	Если РезервыПоЗаказНаряду = Неопределено Тогда
		РезервыПоЗаказНаряду = ТекущийЗаказНаряд.ЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду;
	КонецЕсли;
	
	// Проверим наличие ЗнР у данного СРЗ.
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Основание = ТекущийЗаказНаряд.СводныйРемонтныйЗаказ.ДокументОснование;
	КонецЕсли;
	
	ТаблицаФормы = (ТипЗнч(ТаблицаТоваров) = Тип("ДанныеФормыКоллекция"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ТекстОтбораЗаказПокупателя = "";
	Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		ТекстОтбораЗаказПокупателя = " (Заказ=&ВыбЗаказПокупателя) ИЛИ ";
		Запрос.УстановитьПараметр("ВыбЗаказПокупателя", ЗаказПокупателя);
	КонецЕсли;
	
	ЗаказыПоЗаявкеНаРемонт = "";
	Если ЗначениеЗаполнено(Основание) И ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаРемонт") Тогда
		
		ЗаказыПоЗаявкеНаРемонт = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.ДокументОснование = &ЗаявкаНаРемонт";
		Запрос.УстановитьПараметр("ЗаявкаНаРемонт", Основание);
		
	КонецЕсли;
	
	ЗаказыПоЗаказНаряду = "";
	Если ЗначениеЗаполнено(ТекущийЗаказНаряд.ДокументОснование) И ТипЗнч(ТекущийЗаказНаряд.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		ЗаказыПоЗаказНаряду = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказНаряд.ДокументОснование
		|ИЗ
		|	Документ.ЗаказНаряд КАК ЗаказНаряд
		|ГДЕ
		|	ЗаказНаряд.Ссылка = &ЗаказНаряд";
		Запрос.УстановитьПараметр("ЗаказНаряд", ТекущийЗаказНаряд);
		
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗаказНарядТовары.Номенклатура,
	|	ЗаказНарядТовары.ХарактеристикаНоменклатуры,
	|	ЗаказНарядТовары.СкладКомпании КАК СкладКомпании
	|ПОМЕСТИТЬ ЗаказНарядТовары
	|ИЗ
	|	&Товары КАК ЗаказНарядТовары
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказНарядТовары.Номенклатура КАК Номенклатура,
	|	ЗаказНарядТовары.СкладКомпании КАК СкладКомпании,
	|	ЗаказНарядТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ
	|	ТаблицаТоваров
	|ИЗ
	|	ЗаказНарядТовары КАК ЗаказНарядТовары
	|;
	|
	|ВЫБРАТЬ
	|	ПеремещениеТоваровВПроизводство.Ссылка КАК Регистратор
	|ПОМЕСТИТЬ
	|	ПеремещенияТоваровВПроизводство
	|ИЗ
	|	Документ.ПеремещениеТоваровВПроизводство КАК ПеремещениеТоваровВПроизводство
	|ГДЕ
	|	ПеремещениеТоваровВПроизводство.ДокументОснование = &ЗаказНаряд
	|;
	|
	|ВЫБРАТЬ
	|	ЗаказВнутренний.Ссылка КАК Регистратор
	|ПОМЕСТИТЬ
	|	ТаблицаЗаказов
	|ИЗ
	|	Документ.ЗаказВнутренний КАК ЗаказВнутренний
	|ГДЕ
	|	ЗаказВнутренний.ДокументОснование = &ЗаказНаряд
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.ДокументОснование = &ЗаказНаряд
	|" + ЗаказыПоЗаявкеНаРемонт + "
	|"+ЗаказыПоЗаказНаряду+"
	|;
	|
	|ВЫБРАТЬ
	|	ОбъединеннаяТаблица.Номенклатура КАК Номенклатура,
	|	ОбъединеннаяТаблица.СкладКомпании КАК СкладКомпании,
	|	ОбъединеннаяТаблица.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ОбъединеннаяТаблица.ПеремещеноСоСклада) КАК ПеремещеноСоСклада,
	|	СУММА(ОбъединеннаяТаблица.Зарезервировано) КАК Зарезервировано,
	|	СУММА(ОбъединеннаяТаблица.ОстатокНаСкладе)+СУММА(ОбъединеннаяТаблица.Зарезервировано) КАК КоличествоОстаток,
	|	СУММА(ОбъединеннаяТаблица.ОстатокНаОрганизации) КАК ОстатокНаОрганизации,
	|	СУММА(ОбъединеннаяТаблица.ОстатокНаСкладе) КАК ОстатокНаСкладе
	|ИЗ(
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Номенклатура,
	|		ТаблицаТоваров.СкладКомпании,
	|		ТаблицаТоваров.ХарактеристикаНоменклатуры,
	|		0 КАК ПеремещеноСоСклада,
	|		0 КАК Зарезервировано,
	|		0 КАК ОстатокНаОрганизации,
	|		0 КАК ОстатокНаСкладе
	|	ИЗ
	|		ТаблицаТоваров КАК ТаблицаТоваров
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОстаткиТоваровКомпании.Номенклатура,
	|		ОстаткиТоваровКомпании.СкладКомпании,
	|		ОстаткиТоваровКомпании.ХарактеристикаНоменклатуры,
	|		ОстаткиТоваровКомпании.Количество КАК ПеремещеноСоСклада,
	|		0 КАК Зарезервировано,
	|		0 КАК ОстатокНаОрганизации,
	|		0 КАК ОстатокНаСкладе
	|	ИЗ
	|		РегистрНакопления.ОстаткиТоваровКомпании КАК ОстаткиТоваровКомпании
	|	ГДЕ
	|		ОстаткиТоваровКомпании.Регистратор ССЫЛКА Документ.ПеремещениеТоваровВПроизводство И 
	|		ОстаткиТоваровКомпании.Регистратор В (ВЫБРАТЬ Регистратор ИЗ ПеремещенияТоваровВПроизводство)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗаказыПокупателейОстатки.Номенклатура,
	|		ЗаказыПокупателейОстатки.СкладКомпании,
	|		ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	|		0,
	|		ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0),
	|		0,
	|		0
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(,
	|		" + ?(РезервыПоЗаказНаряду, ТекстОтбораЗаказПокупателя + "Заказ В (ВЫБРАТЬ ТаблицаЗаказов.Регистратор ИЗ ТаблицаЗаказов КАК ТаблицаЗаказов)", "
	|		(" + ТекстОтбораЗаказПокупателя + "(Заказ В (ВЫБРАТЬ ТаблицаЗаказов.Регистратор ИЗ ТаблицаЗаказов КАК ТаблицаЗаказов)) ИЛИ (Контрагент=&Контрагент И (СкладКомпании, Номенклатура, ХарактеристикаНоменклатуры) В 
	|			(ВЫБРАТЬ СкладКомпании, Номенклатура, ХарактеристикаНоменклатуры ИЗ ТаблицаТоваров КАК ТаблицаТоваров)))") + "
	|		" + ?(ПоСкладу=Неопределено, "", "И (СкладКомпании=&ПоСкладу)") + ") КАК ЗаказыПокупателейОстатки
	|	
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОстаткиТоваровКомпанииОстатки.Номенклатура,
	|		ОстаткиТоваровКомпанииОстатки.СкладКомпании,
	|		ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры,
	|		0,
	|		0,
	|		0,
	|		ОстаткиТоваровКомпанииОстатки.КоличествоОстаток-ОстаткиТоваровКомпанииОстатки.РезервОстаток
	|	ИЗ
	|		РегистрНакопления.ОстаткиТоваровКомпании.Остатки(, (СкладКомпании, Номенклатура, ХарактеристикаНоменклатуры) В 
	|			(ВЫБРАТЬ СкладКомпании, Номенклатура, ХарактеристикаНоменклатуры ИЗ ТаблицаТоваров КАК ТаблицаТоваров)) КАК ОстаткиТоваровКомпанииОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПартииТоваровКомпанииОстатки.Номенклатура,
	|		ПартииТоваровКомпанииОстатки.СкладКомпании,
	|		ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры,
	|		0,
	|		0,
	|		ПартииТоваровКомпанииОстатки.КоличествоОстаток,
	|		0
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровКомпании.Остатки(
	|			,
	|			(&БезФильтраПоОрганизации 
	|				ИЛИ Организация = &Организация)
	|			И (СкладКомпании, Номенклатура, ХарактеристикаНоменклатуры) В 
	|			(ВЫБРАТЬ СкладКомпании, Номенклатура, ХарактеристикаНоменклатуры ИЗ ТаблицаТоваров КАК ТаблицаТоваров)) КАК ПартииТоваровКомпанииОстатки
	|) КАК ОбъединеннаяТаблица
	|СГРУППИРОВАТЬ ПО
	|	ОбъединеннаяТаблица.Номенклатура,
	|	ОбъединеннаяТаблица.СкладКомпании,
	|	ОбъединеннаяТаблица.ХарактеристикаНоменклатуры
	|";
		
	Запрос.Текст = ТекстЗапроса;
	Если ТаблицаФормы Тогда
		Запрос.УстановитьПараметр("Товары", ТаблицаТоваров.Выгрузить(, "Номенклатура, ХарактеристикаНоменклатуры, СкладКомпании"));
	Иначе
		Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	КонецЕсли;
	Запрос.УстановитьПараметр("ЗаказНаряд",  ТекущийЗаказНаряд.Ссылка);
	Запрос.УстановитьПараметр("БезФильтраПоОрганизации", ЗапасыТоваров.ФильтрЗапросаПоОрганизации());
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент",  ТекущийЗаказНаряд.Контрагент);
	Запрос.УстановитьПараметр("ПоСкладу",    ПоСкладу);
	
	УстановитьПривилегированныйРежим(Истина);
	ПоказателиПоСкладам = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ТаблицаТоваровБезСкладов
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|ВЫБРАТЬ
	|	ОбъединенныйЗапрос.Номенклатура,
	|	ОбъединенныйЗапрос.ХарактеристикаНоменклатуры,
	|	СУММА(ОбъединенныйЗапрос.ВПроизводстве) КАК ВПроизводстве,
	|	СУММА(ОбъединенныйЗапрос.Заказано) КАК Заказано,
	|	СУММА(ОбъединенныйЗапрос.ЗаказаноПодЗН) КАК ЗаказаноПодЗН,
	|	СУММА(ОбъединенныйЗапрос.ЗарезервированоПодЗН) КАК ЗарезервированоПодЗН
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ТоварыВПроизводствеОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыВПроизводствеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ТоварыВПроизводствеОстатки.КоличествоОстаток КАК ВПроизводстве,
	|		0 КАК Заказано,
	|		0 КАК ЗаказаноПодЗН,
	|		0 КАК ЗарезервированоПодЗН
	|	ИЗ
	|		РегистрНакопления.ТоварыВПроизводстве.Остатки(, ЗаказНаряд = &ЗаказНаряд) КАК ТоварыВПроизводствеОстатки
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		0,
	|		ЗаказыПокупателейОстатки.ЗаказаноОстаток-ЗаказыПокупателейОстатки.РезервОстаток,
	|		0,
	|		0
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(,
	|		" + ?(РезервыПоЗаказНаряду, ТекстОтбораЗаказПокупателя + "Заказ В (ВЫБРАТЬ ТаблицаЗаказов.Регистратор ИЗ ТаблицаЗаказов КАК ТаблицаЗаказов)", "
	|		(" + ТекстОтбораЗаказПокупателя + "(Заказ В (ВЫБРАТЬ ТаблицаЗаказов.Регистратор ИЗ ТаблицаЗаказов КАК ТаблицаЗаказов)) ИЛИ (Контрагент=&Контрагент И (Номенклатура, ХарактеристикаНоменклатуры) В 
	|			(ВЫБРАТЬ Номенклатура, ХарактеристикаНоменклатуры ИЗ ТаблицаТоваровБезСкладов КАК ТаблицаТоваров)))") + ") КАК ЗаказыПокупателейОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыПокупателейОстатки.Номенклатура,
	|		ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	|		0,
	|		0,
	|		ЗаказыПокупателейОстатки.ЗаказаноОстаток-ЗаказыПокупателейОстатки.РезервОстаток,
	|		ЗаказыПокупателейОстатки.РезервОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(,
	|		" + ТекстОтбораЗаказПокупателя + "Заказ В (ВЫБРАТЬ ТаблицаЗаказов.Регистратор ИЗ ТаблицаЗаказов КАК ТаблицаЗаказов)) КАК ЗаказыПокупателейОстатки) КАК ОбъединенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ОбъединенныйЗапрос.Номенклатура,
	|	ОбъединенныйЗапрос.ХарактеристикаНоменклатуры
	|	";
	
	ОбщиеПоказатели = Запрос.Выполнить().Выгрузить();
	
	ПоказателиПоПроизводству = ОбщиеПоказатели.Скопировать();
	
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		
		СтруктураПоиска = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаТоваров.Номенклатура, СтрокаТоваров.ХарактеристикаНоменклатуры);
		
		СтрокиПроизводства = ПоказателиПоПроизводству.НайтиСтроки(СтруктураПоиска);
		
		ВПроизводстве        = 0;
		Заказано             = 0;
		ЗаказаноПодЗН        = 0;
		ЗарезервированоПодЗН = 0;
		
		Если НЕ СтрокиПроизводства.Количество() = 0 Тогда
			ВПроизводстве = СтрокиПроизводства[0].ВПроизводстве;
		КонецЕсли;
		
		СтрокиЗаказов = ОбщиеПоказатели.НайтиСтроки(СтруктураПоиска);
		Если НЕ СтрокиЗаказов.Количество() = 0 Тогда
			ПерваяСтрока = СтрокиЗаказов[0];
			Заказано             = ПерваяСтрока.Заказано;
			ЗаказаноПодЗН        = ПерваяСтрока.ЗаказаноПодЗН;
			ЗарезервированоПодЗН = ПерваяСтрока.ЗарезервированоПодЗН;
		КонецЕсли;
		
		Если ПоСкладу = Неопределено Тогда
			СтруктураПоиска.Вставить("СкладКомпании", СтрокаТоваров.СкладКомпании);
		Иначе
			СтруктураПоиска.Вставить("СкладКомпании", ПоСкладу);
		КонецЕсли;
		
		РесурсыСтроки  = ПоказателиПоСкладам.НайтиСтроки(СтруктураПоиска);
		Если РесурсыСтроки.Количество() = 0 Тогда
			
			Если ПоСкладу = Неопределено ИЛИ СтрокаТоваров.СкладКомпании = ПоСкладу Тогда
				НоваяСтрока = ПоказателиЗапасов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
				НоваяСтрока.ОсталосьПереместить  = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
				НоваяСтрока.Заказано             = Заказано;
				НоваяСтрока.ЗаказаноПодЗН        = ЗаказаноПодЗН;
				НоваяСтрока.ЗарезервированоПодЗН = ЗарезервированоПодЗН;
				НоваяСтрока.ИдентификаторСтроки  = СтрокаТоваров.ПолучитьИдентификатор();
			КонецЕсли;
			
		Иначе
			
			СтрокаРесурсов = РесурсыСтроки[0];
			Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
			
			ВозможноПереместить      = СтрокаРесурсов.КоличествоОстаток;
			ВПроизводствеПоИсточнику = СтрокаРесурсов.ПеремещеноСоСклада;
			ВПроизводствеПоИсточнику = Мин(ВПроизводстве, ВПроизводствеПоИсточнику, Количество);
			ОсталосьПереместить      = Количество - ВПроизводствеПоИсточнику;
			ВозможноПереместить      = Мин(ОсталосьПереместить, ВозможноПереместить);
			
			СтрокаРесурсов.ПеремещеноСоСклада = СтрокаРесурсов.ПеремещеноСоСклада - ВПроизводствеПоИсточнику;
			СтрокаРесурсов.КоличествоОстаток  = СтрокаРесурсов.КоличествоОстаток - ВозможноПереместить;
			
			Если СтрокиПроизводства.Количество() > 0 Тогда
				Если ВПроизводстве = ВПроизводствеПоИсточнику Тогда
					ПоказателиПоПроизводству.Удалить(СтрокиПроизводства[0]);
				Иначе
					СтрокиПроизводства[0].ВПроизводстве = ВПроизводстве - ВПроизводствеПоИсточнику;
				КонецЕсли;
			КонецЕсли;
			
			Если ПоСкладу = Неопределено ИЛИ СтрокаТоваров.СкладКомпании = ПоСкладу Тогда
				НоваяСтрока = ПоказателиЗапасов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРесурсов);
				НоваяСтрока.ЕдиницаИзмерения     = СтрокаТоваров.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент          = СтрокаТоваров.Коэффициент;
				НоваяСтрока.Заказано             = Заказано;
				НоваяСтрока.ЗаказаноПодЗН        = ЗаказаноПодЗН;
				НоваяСтрока.ЗарезервированоПодЗН = ЗарезервированоПодЗН;
				НоваяСтрока.ВПроизводстве        = ВПроизводствеПоИсточнику;
				НоваяСтрока.ОсталосьПереместить  = ОсталосьПереместить;
				НоваяСтрока.ВозможноПереместить  = ВозможноПереместить; 
				Если ЕстьНомерСтроки Тогда
				 	НоваяСТрока.НомерСтроки 		 = СтрокаТоваров.НомерСтроки;
    			КонецЕсли;				
				Если ТаблицаФормы Тогда
					НоваяСтрока.ИдентификаторСтроки = СтрокаТоваров.ПолучитьИдентификатор();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ПоказателиПоПроизводству Цикл
		СтрокиКеша = ПоказателиЗапасов.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаТЧ.Номенклатура, СтрокаТЧ.ХарактеристикаНоменклатуры));
		Если СтрокиКеша.Количество() > 0 Тогда
			ПерваяСтрокаКеша = СтрокиКеша[0];
			ВПроизводстве = СтрокаТЧ.ВПроизводстве;
			Для Каждого СтрокаКеша Из СтрокиКеша Цикл
				Если ВПроизводстве = 0 Тогда
					Прервать;
				КонецЕсли;
				Если СтрокаКеша.ОсталосьПереместить = 0 Тогда
					Продолжить;
				КонецЕсли;
				ОсталосьПереместить            = СтрокаКеша.ОсталосьПереместить;
				ДополнительноеПеремещение      = Мин(ОсталосьПереместить, ВПроизводстве);
				ОсталосьПереместить            = ОсталосьПереместить - ДополнительноеПеремещение;
				СтрокаКеша.ОсталосьПереместить = ОсталосьПереместить;
				СтрокаКеша.ВозможноПереместить = Мин(ОсталосьПереместить, СтрокаКеша.ВозможноПереместить);
				СтрокаКеша.ВПроизводстве       = СтрокаКеша.ВПроизводстве + ДополнительноеПеремещение;
				ВПроизводстве = ВПроизводстве  - ДополнительноеПеремещение;
			КонецЦикла;
			ПерваяСтрокаКеша.ВПроизводстве = ПерваяСтрокаКеша.ВПроизводстве + ВПроизводстве;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоказателиЗапасов;
	
КонецФункции // ПолучитьПоказателиЗапасов()

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	ВремСуммаНоменклатурыДокумента = Объект.Товары.Итог("СуммаВсего");
	ВремСуммаРаботДокумента        = Объект.Автоработы.Итог("СуммаВсего");
	
	СуммаДокумента = ВремСуммаРаботДокумента + ВремСуммаНоменклатурыДокумента;
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", СуммаДокумента);
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	ВремСуммаНоменклатурыДокумента = Объект.Товары.Итог("СуммаНДС");
	ВремСуммаРаботДокумента        = Объект.Автоработы.Итог("СуммаНДС");
	СуммаДокумента = ВремСуммаРаботДокумента + ВремСуммаНоменклатурыДокумента;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС",    СуммаДокумента);
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента - ИтогиОперации.СуммаНДС);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Производит расчет суммы скидки/наценки по документу в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция РассчитатьСуммуСкидкиНаценки(Объект) Экспорт
	
	Объект.СуммаСкидкиНаценки = Объект.Товары.Итог("СуммаСкидки")
		+ Объект.Товары.Итог("СуммаСкидкиСтроки")
		+ Объект.Товары.Итог("СуммаСкидкиБонусами");
	Объект.СуммаСкидкиНаценкиРабот = Объект.Автоработы.Итог("СуммаСкидки")
		+ Объект.Автоработы.Итог("СуммаСкидкиСтроки")
		+ Объект.Автоработы.Итог("СуммаСкидкиБонусами");
	
КонецФункции // РассчитатьСуммуСкидкиНаценки()

// Функция получения возможных состояний заказ-нарядов
//
// Возвращаемое значение:
//   <ТаблицаЗначений>   - таблица значений состояний заказ-нарядов.
//
Функция ПолучитьТаблицуВидовРемонтовЗаказНарядов() Экспорт
	Если ЗащищенныеФункцииАльфаАвтоСервер.ПодсистемаДоступна("ЗащитаАвтосалон") Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ВидыРемонта.Ссылка КАК ВидРемонта,
		               |	ВидыРемонта.Представление КАК ВидРемонтаПредставление
		               |ИЗ
		               |	Справочник.ВидыРемонта КАК ВидыРемонта
		               |ГДЕ
		               |	ВидыРемонта.ПометкаУдаления = ЛОЖЬ
		               |АВТОУПОРЯДОЧИВАНИЕ";
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ВидыРемонта.Ссылка КАК ВидРемонта,
		               |	ВидыРемонта.Представление КАК ВидРемонтаПредставление
		               |ИЗ
		               |	Справочник.ВидыРемонта КАК ВидыРемонта
		               |ГДЕ
		               |	ВидыРемонта.ПометкаУдаления = ЛОЖЬ
		               |	И НЕ ВидыРемонта.ТипРемонта В (ЗНАЧЕНИЕ(Перечисление.ТипыРемонта.КомплектацияАвтомобиля), ЗНАЧЕНИЕ(Перечисление.ТипыРемонта.СборкаАвтомобиля))
		               |АВТОУПОРЯДОЧИВАНИЕ";
	КонецЕсли;
	Запрос = Новый Запрос(ТекстЗапроса);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции // ПолучитьТаблицуВидовСостоянийЗаказНарядов()

// Функция получения возможных состояний заказ-нарядов
//
// Возвращаемое значение:
//   <ТаблицаЗначений>   - таблица значений состояний заказ-нарядов.
//
Функция ПолучитьТаблицуВидовСостоянийЗаказНарядов() Экспорт
	Запрос=Новый Запрос("ВЫБРАТЬ
	|	ВидыСостоянийЗаказНарядов.Ссылка КАК ВидыСостоянийЗаказНарядов,
	|	ВидыСостоянийЗаказНарядов.Представление КАК ВидыСостоянийЗаказНарядовПредставление
	|ИЗ
	|	Справочник.ВидыСостоянийЗаказНарядов КАК ВидыСостоянийЗаказНарядов
	|ГДЕ
	|	ВидыСостоянийЗаказНарядов.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыСостоянийЗаказНарядов.Порядок");
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции // ПолучитьТаблицуВидовСостоянийЗаказНарядов()

// Заполнение ТЧ товаров по себестоимости
Процедура ЗаполнитьТоварыПоСебестоимости(Объект, СуммаВключаетНДС) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("НеРассчитыватьБонусы", Истина);
	
	ПересчитыватьСкидки = Ложь;
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеРассчитыватьСкидки", Ложь) Тогда
		ПересчитыватьСкидки = Истина;
		ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	КонецЕсли;
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр  = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ТоварыВПроизводствеОстатки.Номенклатура КАК Номенклатура,
	             |	СУММА(ТоварыВПроизводствеОстатки.КоличествоОстаток) КАК Количество,
	             |	СУММА(ТоварыВПроизводствеОстатки.СуммаОстаток) КАК Сумма,
				 |	СУММА(ТоварыВПроизводствеОстатки.СуммаБезНДСОстаток) КАК СуммаБезНДС,
	             |	СУММА(ТоварыВПроизводствеОстатки.СуммаУпрОстаток) КАК СуммаУпр,
				 |	СУММА(ТоварыВПроизводствеОстатки.СуммаБезНДСУпрОстаток) КАК СуммаУпрБезНДС
	             |ИЗ
	             |	РегистрНакопления.ТоварыВПроизводстве.Остатки(, ЗаказНаряд = &ЗаказНаряд) КАК ТоварыВПроизводствеОстатки
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ТоварыВПроизводствеОстатки.Номенклатура";
	Запрос.УстановитьПараметр("ЗаказНаряд", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	ЕстьТоварыССебестоимостью = Не РезультатЗапроса.Пустой();
	Выборка = РезультатЗапроса.Выбрать();
	
	// сбросим значения скидок, так как они не должны применять при расчете
	Объект.СкидкаНаценка = Неопределено;
	Объект.ЗначениеСкидкиНаценки = 0;
	Объект.СуммаСкидкиНаценки = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Номенклатура = Выборка.Номенклатура;
		Количество = Выборка.Количество;
		
		Если Объект.ВалютаДокумента = ВалютаРегл Тогда
			
			Если СуммаВключаетНДС Тогда
				Сумма = Выборка.Сумма;
			Иначе
				Сумма = Выборка.СуммаБезНДС;
			КонецЕсли;
			
		ИначеЕсли Объект.ВалютаДокумента = ВалютаУпр Тогда
			
			Если СуммаВключаетНДС Тогда
				Сумма = Выборка.СуммаУпр;
			Иначе
				Сумма = Выборка.СуммаУпрБезНДС;
			КонецЕсли;
			
		Иначе
			
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, Объект.Ссылка.МоментВремени());
			КурсУпр        = СтруктураКурса.Курс/?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
			СуммаУпр 	   = Выборка.СуммаУпрБезНДС;
			
			Если СуммаВключаетНДС Тогда
				СуммаУпр = Выборка.СуммаУпр;	
			КонецЕсли;
			
			Сумма = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаУпр, ВалютаУпр, КурсУпр, Объект.ВалютаДокумента, Объект.КурсДокумента), 2);
			
		КонецЕсли;
		
		СуммаОстаток  = Сумма;
		СтрокаТЧ      = Неопределено;
		СтрокиТоваров = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
		
		Для Каждого СтрокаТЧ Из СтрокиТоваров Цикл
			
			СтрокаТЧ.СуммаВсего = (Сумма * СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент) / Количество;
			СуммаОстаток = СуммаОстаток - СтрокаТЧ.СуммаВсего;
			
			// сбросим значения скидок, так как они не должны применять при расчете
			СтрокаТЧ.ПроцентСкидки = 0;
			СтрокаТЧ.СуммаСкидки = 0;
			СтрокаТЧ.СкидкаНаТовар = Неопределено;
			СтрокаТЧ.ПроцентСкидкиСтроки = 0;
			СтрокаТЧ.СуммаСкидкиСтроки = 0;
			
		КонецЦикла;
		
		Если СтрокаТЧ<>Неопределено Тогда
			
			СтрокаТЧ.СуммаВсего = СтрокаТЧ.СуммаВсего + СуммаОстаток;
			
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из СтрокиТоваров Цикл
			
			ТоварыСуммаВсегоПриИзменении(Объект, СтрокаТЧ, ПараметрыДействия);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЕстьТоварыССебестоимостью Тогда
		
		// Пересчет скидок
		Если ПересчитыватьСкидки Тогда
			ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
			СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия);
		КонецЕсли;
		
		// Пересчет скидок по бонусам
		ПараметрыДействия.Удалить("НеРассчитыватьБонусы");
		ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
		РассчитатьСуммуСкидкиНаценки(Объект);
		
	КонецЕсли;
	
КонецПроцедуры

// расчет скидок по строке
Процедура РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти = "Товары", СкидкаШапкиАбсолютная = Ложь) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект);
	ПараметрыДействия.Вставить("НеРассчитыватьБонусы", Истина);
	ПараметрыДействия.Вставить("НеИзменятьАвторИзмененияСтроки", Истина);
	
	СкидкиНаценкиСервер.РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти, СкидкаШапкиАбсолютная, ПараметрыДействия);
	
КонецПроцедуры

// Заполнение пакетов работ в табличной части "Автоработы" пустым пакетом
//
// Параметры:
//	Автоработы - ТабличнаяЧасть - Табличная часть авторабот документа "Заказ-наряд".
//
Процедура ПоместитьВсеРаботыВнеПакетов(Автоработы) Экспорт
	
	ИнформацияОПустомПакете = РаботаСПакетамиРаботПовтИсп.ИнформацияПоПустомуПакету();
	
	Для Каждого Авторабота Из Автоработы Цикл
		
		Если (НЕ Авторабота.СтатусПакета = Справочники.ВидыСостоянийПакетовРабот.ВРаботе
			И НЕ Авторабота.СтатусПакета = Справочники.ВидыСостоянийПакетовРабот.Закрыт) Тогда
				ЗаполнитьЗначенияСвойств(Авторабота, ИнформацияОПустомПакете);
			КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

// Устанавливет для автоработы пустой пакет
Процедура ПоместитьАвтоработуВнеПакетов(Авторабота) Экспорт
	
	ИнформацияОПустомПакете = РаботаСПакетамиРаботПовтИсп.ИнформацияПоПустомуПакету();
	ЗаполнитьЗначенияСвойств(Авторабота, ИнформацияОПустомПакете);
	
КонецПроцедуры

// Заполнение пакетов работ в табличной части "Автоработы" на основании режима разделения работ
//
// Параметры:
//	Автоработы - ТабличнаяЧасть - Табличная часть "Автоработы" документа "Заказ-наряд".
//	ПричиныОбращения - ТабличнаяЧасть - Табличная часть "ПричиныОбращения" документа "Заказ-наряд".
//	РежимРазделенияРаботПоПакетам - Перечисление - Ссылка на перечисление "Режимы разделения работ по пакетам".
//
Процедура ПоместитьРаботыВПакеты(Автоработы, ПричиныОбращения, РежимРазделенияРаботПоПакетам) Экспорт
	
	Сч = 1;
	ОдинПакетНаДокумент = Ложь;
	
	Если РежимРазделенияРаботПоПакетам = Перечисления.УРВ_РежимыРазделенияРаботПоПакетам.ОдинПакетНаРаботу Тогда
		
		Для Каждого Авторабота Из Автоработы Цикл
			
			Если (НЕ Авторабота.СтатусПакета = Справочники.ВидыСостоянийПакетовРабот.ВРаботе
				И НЕ Авторабота.СтатусПакета = Справочники.ВидыСостоянийПакетовРабот.Закрыт) Тогда
					НовыйПакетРабот = РаботаСПакетамиРаботКлиентСервер.СоздатьНовыйПакетРабот(Сч, Авторабота.Авторабота.Наименование);
					ЗаполнитьЗначенияСвойств(Авторабота, НовыйПакетРабот);
			КонецЕсли;
			
			Сч = Сч + 1;
			
		КонецЦикла;
		
	ИначеЕсли РежимРазделенияРаботПоПакетам = Перечисления.УРВ_РежимыРазделенияРаботПоПакетам.ОдинПакетНаПричинуОбращения Тогда
		
		Если ПричиныОбращения.Количество() > 0 Тогда
			
			Для Каждого ПричинаОбращения Из ПричиныОбращения Цикл
				
				ПодчиненныеСтроки = Автоработы.НайтиСтроки(Новый Структура("ИдентификаторПричиныОбращения", ПричинаОбращения.ИдентификаторПричиныОбращения));
				НовыйПакетРабот = РаботаСПакетамиРаботКлиентСервер.СоздатьНовыйПакетРабот(Сч, ПричинаОбращения.ПричинаОбращенияСодержание);
				
				Для Каждого Авторабота Из ПодчиненныеСтроки Цикл
					Если (НЕ Авторабота.СтатусПакета = Справочники.ВидыСостоянийПакетовРабот.ВРаботе
						И НЕ Авторабота.СтатусПакета = Справочники.ВидыСостоянийПакетовРабот.Закрыт) Тогда
							ЗаполнитьЗначенияСвойств(Авторабота, НовыйПакетРабот);
					КонецЕсли;
				КонецЦикла;
				
				Сч = Сч + 1;
				
			КонецЦикла;
			
		Иначе
			ОдинПакетНаДокумент = Истина;
		КонецЕсли;
		
	Иначе
		ОдинПакетНаДокумент = Истина;
	КонецЕсли;
	
	Если ОдинПакетНаДокумент Тогда
		
		НовыйПакетРабот = РаботаСПакетамиРаботКлиентСервер.СоздатьНовыйПакетРабот(1);
		
		Для Каждого Авторабота Из Автоработы Цикл
			Если (НЕ Авторабота.СтатусПакета = Справочники.ВидыСостоянийПакетовРабот.ВРаботе
				И НЕ Авторабота.СтатусПакета = Справочники.ВидыСостоянийПакетовРабот.Закрыт) Тогда
					ЗаполнитьЗначенияСвойств(Авторабота, НовыйПакетРабот);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает для автоработы пакет по режиму разделения работ
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Объект для которого авторабата помещается в пакет.
//	Автоработы - ТабличнаяЧасть - Табличная часть "Автоработы" документа "Заказ-наряд".
//	РежимРазделенияРаботПоПакетам - Перечисление - Ссылка на перечисление "Режимы разделения работ по пакетам".
//
Процедура ПоместитьАвтоработуВПакет(Объект, Авторабота, РежимРазделенияРаботПоПакетам) Экспорт
	
	ОдинПакетНаДокументИлиНаПричинуОбращения = Ложь;
	
	Если РежимРазделенияРаботПоПакетам = Перечисления.УРВ_РежимыРазделенияРаботПоПакетам.ОдинПакетНаРаботу Тогда
		
		НовыйПакетРабот = РаботаСПакетамиРаботКлиентСервер.СоздатьНовыйПакетРабот(
			РаботаСПакетамиРаботКлиентСервер.МаксимальноеЗначениеЧисловойКолонки(Объект.Автоработы) + 1, Авторабота.Авторабота.Наименование);
		ЗаполнитьЗначенияСвойств(Авторабота, НовыйПакетРабот);
		
	ИначеЕсли РежимРазделенияРаботПоПакетам = Перечисления.УРВ_РежимыРазделенияРаботПоПакетам.ОдинПакетНаПричинуОбращения Тогда
		
		Если Объект.ПричиныОбращения.Количество() > 0 И ЗначениеЗаполнено(СокрЛП(Авторабота.ИдентификаторПричиныОбращения)) Тогда
			СтрокиВПакете = Объект.Автоработы.НайтиСтроки(Новый Структура("ИдентификаторПричиныОбращения", Авторабота.ИдентификаторПричиныОбращения));
		Иначе
			СтрокиВПакете = Объект.Автоработы;
		КонецЕсли;
		
		ВладелецыАвтоработы = Объект.ПричиныОбращения.НайтиСтроки(Новый Структура("ИдентификаторПричиныОбращения", Авторабота.ИдентификаторПричиныОбращения));
		ПредставлениеПричиныОбращения = ?(ВладелецыАвтоработы.Количество() > 0, ВладелецыАвтоработы[0].ПричинаОбращенияСодержание, "");
		ОдинПакетНаДокументИлиНаПричинуОбращения = Истина;
		
	Иначе
		
		СтрокиВПакете = Объект.Автоработы;
		ПредставлениеПричиныОбращения = "";
		ОдинПакетНаДокументИлиНаПричинуОбращения = Истина;
		
	КонецЕсли;
	
	Если ОдинПакетНаДокументИлиНаПричинуОбращения Тогда
		
		Если СтрокиВПакете.Количество() < 2 Тогда
			
			ЗаполнитьЗначенияСвойств(Авторабота,
				РаботаСПакетамиРаботКлиентСервер.СоздатьНовыйПакетРабот(РаботаСПакетамиРаботКлиентСервер.МаксимальноеЗначениеЧисловойКолонки(Объект.Автоработы) + 1,
				ПредставлениеПричиныОбращения
			));
			
		ИначеЕсли ПустаяСтрока(СтрокиВПакете[0].ПакетРабот) Тогда
			
			НовыйПакетРабот = РаботаСПакетамиРаботКлиентСервер.СоздатьНовыйПакетРабот(
				РаботаСПакетамиРаботКлиентСервер.МаксимальноеЗначениеЧисловойКолонки(Объект.Автоработы) + 1,
				ПредставлениеПричиныОбращения
			);
			
			ЗаполнитьЗначенияСвойств(Авторабота, НовыйПакетРабот);
			ЗаполнитьЗначенияСвойств(СтрокиВПакете[0], НовыйПакетРабот);
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(
			Авторабота, СтрокиВПакете[0], "ПакетРабот,Представление,НомерПакета,НомерКартинкиСостоянияПакетаРабот,СтатусПакета");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает строку содержащую текущих исполнителей по пакету
Функция ИсполнителиПоПакету(Пакет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пакет", Строка(Пакет));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ФактическоеВремяСрезПоследних.Исполнитель
	|ИЗ
	|	РегистрСведений.ФактическоеВремя.СрезПоследних(, ПакетРабот = &Пакет) КАК ФактическоеВремяСрезПоследних
	|ГДЕ
	|	ФактическоеВремяСрезПоследних.Продолжительность = 0
	|	И ФактическоеВремяСрезПоследних.Состояние = ЗНАЧЕНИЕ(Справочник.ВидыОтметокВремени.Работа)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТекущиеИсполнители = "";
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ТекущиеИсполнители = ТекущиеИсполнители + ?(ПустаяСтрока(ТекущиеИсполнители), "", "; ") + Строка(Выборка.Исполнитель);
		КонецЦикла;
		
		Возврат ТекущиеИсполнители;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ИсполнителиПоПакету()

// Записывает или обновляет данные о пакетах
//
Функция ИзменитьИнформациюОПакетах(Ссылка, ТаблицаАвторабот) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущиеДанныеПакетов = РегистрыСведений.СоставПакетовРабот.ПолучитьДанныеПакетовДокумента(Ссылка);
	
	// проверим какие изменения были внесены
	Если ТекущиеДанныеПакетов.Количество() > 0 Тогда
		ПакетыБылиВДокументе = ТекущиеДанныеПакетов.ВыгрузитьКолонку("ПакетРабот"); УдаляемыеПакеты = Новый Массив;
		Для Каждого Пакет Из ПакетыБылиВДокументе Цикл
			Если ТаблицаАвторабот.НайтиСтроки(Новый Структура("ПакетРабот", Пакет)).Количество() = 0
				И УдаляемыеПакеты.Найти(Пакет) = Неопределено Тогда
				
				УдаляемыеПакеты.Добавить(Пакет);
				
			КонецЕсли;
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Истина);
		
		Для Каждого УдаляемыйПакет Из УдаляемыеПакеты Цикл
			Если ТекущиеДанныеПакетов.НайтиСтроки(Новый Структура("ПакетРабот", УдаляемыйПакет))[0].СтатусПакета =
				Справочники.ВидыСостоянийПакетовРабот.НеСтартовал Тогда
				
				ИнформацияОПакетеАвторабот = РегистрыСведений.ИнформацияОПакетахАвторабот.СоздатьМенеджерЗаписи();
				ИнформацияОПакетеАвторабот.ПакетРабот = УдаляемыйПакет;
				ИнформацияОПакетеАвторабот.Удалить();
				
				СостоянияПакетаРабот = РегистрыСведений.СостоянияПакетовРабот.СоздатьНаборЗаписей();
				СостоянияПакетаРабот.Отбор.ПакетРабот.Установить(УдаляемыйПакет);
				СостоянияПакетаРабот.Записать(Истина);
			Иначе
				ОтметкиВремени = РегистрыСведений.ФактическоеВремя.СоздатьНаборЗаписей();
				ОтметкиВремени.Отбор.ЗаказНаряд.Установить(Ссылка);
				ОтметкиВремени.Отбор.ПакетРабот.Установить(УдаляемыйПакет);
				ОтметкиВремени.Прочитать();
				Для каждого Запись Из ОтметкиВремени Цикл
					Если Запись.Состояние = Справочники.ВидыОтметокВремени.Работа Тогда
						Запись.Состояние = Справочники.ВидыОтметокВремени.РаботаПоУдаленномуПакету;
					КонецЕсли;
				КонецЦикла;
				ОтметкиВремени.Записать(Истина);
				
				СостоянияПакетаРабот = РегистрыСведений.СостоянияПакетовРабот.СоздатьМенеджерЗаписи();
				СостоянияПакетаРабот.Период     = ТекущаяДатаСеанса();
				СостоянияПакетаРабот.ПакетРабот = УдаляемыйПакет;
				СостоянияПакетаРабот.Состояние  = Справочники.ВидыСостоянийПакетовРабот.Закрыт;
				СостоянияПакетаРабот.Записать(Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// состав пакетов
	НаборЗаписейСоставПакетовРабот = РегистрыСведений.СоставПакетовРабот.СоздатьНаборЗаписей();
	НаборЗаписейСоставПакетовРабот.Отбор.ЗаказНаряд.Установить(Ссылка);
	НаборЗаписейСоставПакетовРабот.Прочитать();
	НаборЗаписейСоставПакетовРабот.Очистить();
	
	Для Каждого Авторабота Из ТаблицаАвторабот Цикл
		Запись = НаборЗаписейСоставПакетовРабот.Добавить();
		Запись.ЗаказНаряд = Ссылка;
		Запись.ПакетРабот = Авторабота.ПакетРабот;
		Запись.Авторабота = Авторабота.ИдентификаторРаботы;
	КонецЦикла;
	
	НаборЗаписейСоставПакетовРабот.Записать(Истина);
	
	ТаблицаАвторабот.Свернуть("ПакетРабот,Представление,НомерПакета,СтатусПакета");
	Для Каждого Авторабота Из ТаблицаАвторабот Цикл
		ИнформацияОПакетеАвторабот = РегистрыСведений.ИнформацияОПакетахАвторабот.СоздатьМенеджерЗаписи();
		Если РаботаСПакетамиРаботКлиентСервер.ЭтоПустойПакетРабот(Авторабота.ПакетРабот) Тогда
			Продолжить;
		КонецЕсли;
		
		ИнформацияОПакетеАвторабот.ПакетРабот         = Авторабота.ПакетРабот;
		ИнформацияОПакетеАвторабот.Представление      = Авторабота.Представление;
		ИнформацияОПакетеАвторабот.НомерПакета        = Авторабота.НомерПакета;
		ИнформацияОПакетеАвторабот.ТекущиеИсполнители = ИсполнителиПоПакету(Авторабота.ПакетРабот);
		
		ИнформацияОПакетеАвторабот.Записать(Истина);
	КонецЦикла;
	
	// Установми статус для новых пакетов
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Автоработы.ПакетРабот КАК ПакетРабот
	|ПОМЕСТИТЬ ПакетыАвторабот
	|ИЗ
	|	&Автоработы КАК Автоработы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияПакетовРаботСрезПоследних.ПакетРабот
	|ПОМЕСТИТЬ СтарыеПакеты
	|ИЗ
	|	РегистрСведений.СостоянияПакетовРабот.СрезПоследних(
	|			,
	|			ПакетРабот В
	|				(ВЫБРАТЬ
	|					ПакетыАвторабот.ПакетРабот
	|				ИЗ
	|					ПакетыАвторабот КАК ПакетыАвторабот)) КАК СостоянияПакетовРаботСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПакетыАвторабот.ПакетРабот
	|ИЗ
	|	ПакетыАвторабот КАК ПакетыАвторабот
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтарыеПакеты КАК СтарыеПакеты
	|		ПО ПакетыАвторабот.ПакетРабот = СтарыеПакеты.ПакетРабот
	|ГДЕ
	|	СтарыеПакеты.ПакетРабот ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Автоработы", ТаблицаАвторабот);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		НовыеПакеты = Результат.Выбрать();
		
		Пока НовыеПакеты.Следующий() Цикл
			СостоянияПакетаРабот = РегистрыСведений.СостоянияПакетовРабот.СоздатьМенеджерЗаписи();
			
			СостоянияПакетаРабот.ПакетРабот = НовыеПакеты.ПакетРабот;
			СостоянияПакетаРабот.Период     = ТекущаяДатаСеанса();
			СостоянияПакетаРабот.Состояние  = ПредопределенноеЗначение("Справочник.ВидыСостоянийПакетовРабот.НеСтартовал");
			
			СостоянияПакетаРабот.Записать();
		КонецЦикла;
	КонецЕсли;
КонецФункции

// процедура формирование таблицы для расчета суммы скидки по бонусам
//
Функция СформироватьСводнуюТаблицу(Объект)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Строка");
	Таблица.Колонки.Добавить("Таблица");
	Таблица.Колонки.Добавить("Сумма");
	Таблица.Колонки.Добавить("РаспределенноеЗначение");
	
	Для Каждого Строка Из Объект.Товары Цикл
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Строка                 = Строка;
		НоваяСтрока.Таблица                = "Товары";
		НоваяСтрока.Сумма                  = Строка.СуммаВсего + Строка.СуммаСкидкиБонусами;
		НоваяСтрока.РаспределенноеЗначение = 0;
	КонецЦикла;
	
	Для Каждого Строка Из Объект.Автоработы Цикл
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Строка                 = Строка;
		НоваяСтрока.Таблица                = "Автоработы";
		НоваяСтрока.Сумма                  = Строка.СуммаВсего + Строка.СуммаСкидкиБонусами;
		НоваяСтрока.РаспределенноеЗначение = 0;
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции // СформироватьСводнуюТаблицу()

// Процедура для очистки табличной части документа от расчитанной суммы скидки номенклатуры по бонусной программе.
//
Процедура ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеРассчитыватьБонусы", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		ТекущаяСтрока.СуммаВсего = ТекущаяСтрока.СуммаВсего + ТекущаяСтрока.СуммаСкидкиБонусами;
		ТекущаяСтрока.СуммаСкидкиБонусами = 0;
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из Объект.Автоработы Цикл
		ТекущаяСтрока.СуммаВсего = ТекущаяСтрока.СуммаВсего + ТекущаяСтрока.СуммаСкидкиБонусами;
		ТекущаяСтрока.СуммаСкидкиБонусами = 0;
	КонецЦикла;
	
КонецПроцедуры // ОчиститьСуммыСкидкиБонусами()

// Процедура расчета суммы скидки номенклатуры по бонусной программе
//
Процедура ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеРассчитыватьБонусы", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	// Сравним бонусные баллы с суммой всего.
	Если НЕ БонусныеПрограммыСервер.БонуснаяПрограммаАктивна(Объект.Карточка.БонуснаяПрограмма, Объект.Дата)
		ИЛИ БонусныеПрограммыСервер.ДисконтнаяКартаЗаблокирована(Объект.Карточка) Тогда
		
		Объект.КоличествоКСписанию = 0;
		Объект.КоличествоКНачислению = 0;
		ОчиститьСуммыСкидкиБонусами(Объект);
		Возврат;
		
	КонецЕсли;
	
	Объект.КоличествоКСписанию = Мин(Объект.КоличествоКСписанию,
	БонусныеПрограммыСервер.КоличествоБалловВСуммеДокумента(Объект, Объект.Карточка.БонуснаяПрограмма),
	БонусныеПрограммыСервер.МаксимальноеКоличествоБаллов(Объект, Объект.Карточка.БонуснаяПрограмма));
	
	// Расписываем сумму по строкам документа документам.
	СводнаяТаблица = СформироватьСводнуюТаблицу(Объект);

	Если Объект <> Неопределено Тогда
		ТаблицаПроцентов = БонусныеПрограммыСервер.ИнициализироватьТаблицуНоменклатур(Объект);
		Для Каждого СтрокаТоваров Из ТаблицаПроцентов Цикл
			БонусныеПрограммыСервер.ПолучитьПроцентНачисленияДляСтроки(СтрокаТоваров, Объект.Карточка.БонуснаяПрограмма, Ложь);
			СтрокаТоваров.Процент = ?(СтрокаТоваров.Сумма = 0, 0, СтрокаТоваров.Процент);
		КонецЦикла;
	КонецЕсли;
	
	СводнаяТаблица.Колонки.Добавить("ИмяКолонки");
	Для Каждого Строка Из СводнаяТаблица Цикл
		Строка.ИмяКолонки = ?(Строка.Таблица = "Товары", "Номенклатура", "Авторабота");		
	КонецЦикла;
	
	СтруктураПараметров 						= БонусныеПрограммыСервер.СоздатьПараметрыРаспределитьСуммуПоТаблице();
	СтруктураПараметров.Таблица 				= СводнаяТаблица;
	СтруктураПараметров.СуммаРаспределения 		= БонусныеПрограммыСервер.БаллыВВалюту(Объект.КоличествоКСписанию, Объект.Карточка.БонуснаяПрограмма, Объект.ВалютаДокумента, Объект.Дата);
	СтруктураПараметров.КолонкаРаспределения 	= "Сумма";
	СтруктураПараметров.ТаблицаПроцентов 		= ТаблицаПроцентов;
	СтруктураПараметров.Объект 					= Объект;
	
	БонусныеПрограммыСервер.РаспределитьСуммуПоТаблице(СтруктураПараметров);
	
	Для Каждого Строка Из СводнаяТаблица Цикл
		Строка.Строка.СуммаВсего          = Строка.Сумма;
		Строка.Строка.СуммаНДС            = Строка.Строка.СуммаВсего*Строка.Строка.СтавкаНДС.Ставка/(100+Строка.Строка.СтавкаНДС.Ставка);
		Строка.Строка.СуммаСкидкиБонусами = Строка.РаспределенноеЗначение;
	КонецЦикла;
	
	БонусныеПрограммыСервер.РассчитатьБонусныеБаллыКНачислению(Объект, Объект.Карточка.БонуснаяПрограмма);
	
КонецПроцедуры // ПерерасчетСуммыСкидкиБонусами()

Процедура ПерерасчетСуммыНачисленийИсполнителям(Объект, СпособРасчета = Неопределено) Экспорт
	
	Для Каждого СтрокаАвторабот Из Объект.Автоработы Цикл
		
		ДанныеРасчетаАвтоработы = Автосервис.ПараметрыРасчетаНачисленийАвтоработы(Объект, СтрокаАвторабот);
		АвтосервисКлиентСервер.ПересчитатьСуммуНачисленийСУчетомСпособа(
			Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", СтрокаАвторабот.ИдентификаторРаботы)),
			ДанныеРасчетаАвтоработы,
			СпособРасчета);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет ставку НДС в табличных частях
//
Процедура ЗаполнитьСтавкуНДСТабличныхЧастей(Объект, ПараметрыДействия = Неопределено)
	
	Если Объект.Товары.Количество() > 0 ИЛИ Объект.Автоработы.Количество() > 0 Тогда
		
		ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		ПараметрыДействия.Вставить("НеРассчитыватьБонусы", Истина);
		
		НуженПерерасчетСкидок = Ложь;
		Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеРассчитыватьСкидки", Ложь) Тогда
			НуженПерерасчетСкидок = Истина;
			ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
		КонецЕсли;
		
		ПараметрыДействияТовары = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыДействия);
		ПараметрыДействия       = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
		
		// Очистим значения реквизита "Сумма скидки бонусами"
		ОчиститьСуммыСкидкиБонусами(Объект);
		
		ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата);

		ОсвобожденОтНДС = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОсвобожденОтНДС", Ложь)
						  ИЛИ ПараметрыНДС.ОсвобожденОтНДС;
		
		СтавкаБезНДС = Справочники.СтавкиНДС.БезНДС;
		
		Если ЗначениеЗаполнено(Объект.ВидРемонта) Тогда
			ВидРемонтаОсвобожденОтНДС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидРемонта, "ОсвобожденОтНДС,ОсвобожденОтНДСРаботы");
		Иначе
			ВидРемонтаОсвобожденОтНДС = Новый Структура("ОсвобожденОтНДС,ОсвобожденОтНДСРаботы", Ложь, Ложь);
		КонецЕсли;
		
		Для Каждого Строка Из Объект.Товары Цикл
			Строка.СтавкаНДС = ?(ОсвобожденОтНДС ИЛИ ВидРемонтаОсвобожденОтНДС.ОсвобожденОтНДС,
				СтавкаБезНДС,
				РаботаСоСтавкамиНДССервер.СтавкаНДСНоменклатуры(ПараметрыНДС, Строка.Номенклатура)
			);
			ТоварыСтавкаНДСПриИзменении(Объект, Строка,ПараметрыДействияТовары);
		КонецЦикла;
		
		Для Каждого Строка Из Объект.Автоработы Цикл
			Строка.СтавкаНДС = ?(ОсвобожденОтНДС ИЛИ ВидРемонтаОсвобожденОтНДС.ОсвобожденОтНДСРаботы, 
				СтавкаБезНДС,
				РаботаСоСтавкамиНДССервер.СтавкаНДСНоменклатуры(ПараметрыНДС, Строка.Авторабота)
			);
			АвтоработыСтавкаНДСПриИзменении(Объект, Строка,ПараметрыДействия);
		КонецЦикла;
		
		// Пересчет скидок
		Если НуженПерерасчетСкидок Тогда
			ПараметрыДействияТовары.Удалить("НеРассчитыватьСкидки");
			СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействияТовары);
			ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
			СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "Автоработы");
		КонецЕсли;
		
		// Пересчет скидок по бонусам
		ПараметрыДействия.Удалить("НеРассчитыватьБонусы");
		ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
		РассчитатьСуммуСкидкиНаценки(Объект);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает автомобиль из СРЗ
//
// Параметры:
//  Документ - ДокументСсылка.ЗаказНаряд - Документ из которого необходимо получить автомобиль.
//
// Возвращаемое значение:
//  СправочникСсылка.Автомобили.
//
Функция АвтомобильДокумента(Документ) Экспорт
	
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "СводныйРемонтныйЗаказ.Автомобиль");
	Возврат ДанныеДокумента.СводныйРемонтныйЗаказАвтомобиль;
	
КонецФункции // АвтомобильДокумента()

Процедура СформироватьСтруктуруЗначений(Параметр, Данные)
	
	СписокРеквизитов = Новый Массив;
	
	Для Каждого ТекущийПараметр Из Параметр Цикл
		СписокРеквизитов.Добавить(ТекущийПараметр.Ключ);
	КонецЦикла;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Данные, 
		СтрСоединить(СписокРеквизитов, ","));
	Для Каждого Реквизит Из ЗначенияРеквизитов Цикл
		Параметр[Реквизит.Ключ] = Реквизит.Значение;
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьМаркировку(Ссылка)  
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	МаркировкаТоваровВПроизводстве.GTIN КАК GTIN,
		|	МаркировкаТоваровВПроизводстве.СерийныйНомер КАК СерийныйНомер
		|ИЗ
		|	РегистрНакопления.МаркировкаТоваровВПроизводстве КАК МаркировкаТоваровВПроизводстве
		|ГДЕ
		|	МаркировкаТоваровВПроизводстве.ЗаказНаряд = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверка на наличие ограничения на формирование расчетов с контрагентом.
//
// Параметры:
//  Обеъект	 - ДокуменОбъект, ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
// 
// Возвращаемое значение:
//  Булево - Расчеты с контрагентом формируются или нет.
//
Функция ДоступноФормированиеРасчетовСКонтрагентами(Объект) Экспорт
	
	Возврат ЕстьРеквизит(Объект, "ВидРемонта")
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидРемонта, "ТипРемонта") = Перечисления.ТипыРемонта.Платный;
	
КонецФункции

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
	НовыйРеквизит = Реквизиты.Добавить();
	НовыйРеквизит.Имя = "ГосНомер";
	НовыйРеквизит.Представление = НСтр("ru = 'Гос. номер'");
	НовыйРеквизит.Тип = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20));
	
	НовыйРеквизит = Реквизиты.Добавить();
	НовыйРеквизит.Имя = "Заказчик";
	НовыйРеквизит.Представление = НСтр("ru = 'Заказчик'");
	НовыйРеквизит.Тип = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	
	НовыйРеквизит = Реквизиты.Добавить();
	НовыйРеквизит.Имя = "Автомобиль";
	НовыйРеквизит.Представление = НСтр("ru = 'Автомобиль'");
	НовыйРеквизит.Тип = Новый ОписаниеТипов("СправочникСсылка.Автомобили");
	
	//ДопустимыеТипы = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20));
	//Описание = Новый Структура("ОписаниеТипа, Представление", ДопустимыеТипы, НСтр("ru = 'Гос. номер'"));
	//ДополнительныеПараметры.Параметры.Вставить("ГосНомер", Описание);
	
	//ДопустимыеТипы = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	//Описание = Новый Структура("ОписаниеТипа, Представление", ДопустимыеТипы, НСтр("ru = 'Заказчик'"));
	//ДополнительныеПараметры.Параметры.Вставить("Заказчик", Описание);
	
	//ДопустимыеТипы = Новый ОписаниеТипов("СправочникСсылка.Автомобили");
	//Описание = Новый Структура("ОписаниеТипа, Представление", ДопустимыеТипы, НСтр("ru = 'Автомобиль'"));
	//ДополнительныеПараметры.Параметры.Вставить("Автомобиль", Описание);
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(ПредметСообщения) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСРЗ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПредметСообщения, "СводныйРемонтныйЗаказ.Автомобиль, СводныйРемонтныйЗаказ.Заказчик");
	
	ГосНомер = Сообщение.ЗначенияРеквизитов.Получить("ГосНомер");
	Если ГосНомер <> Неопределено Тогда
		Сообщение.ЗначенияРеквизитов.Вставить("ГосНомер",
			Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
			ДанныеСРЗ.СводныйРемонтныйЗаказАвтомобиль,
			Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер,
			ПредметСообщения.ДатаСоздания));
	КонецЕсли;
	
	Автомобиль = Сообщение.ЗначенияРеквизитов.Получить("Автомобиль");
	Если Автомобиль <> Неопределено Тогда
		Если ТипЗнч(Автомобиль) = Тип("Соответствие") Тогда 
			СформироватьСтруктуруЗначений(Автомобиль, ДанныеСРЗ.СводныйРемонтныйЗаказАвтомобиль);
		ИначеЕсли ТипЗнч(Автомобиль) = Тип("Строка") Тогда 
			Сообщение.ЗначенияРеквизитов.Вставить("Автомобиль", ДанныеСРЗ.СводныйРемонтныйЗаказАвтомобиль);
		КонецЕсли;
	КонецЕсли;
	
	Заказчик = Сообщение.ЗначенияРеквизитов.Получить("Заказчик");
	Если Заказчик <> Неопределено Тогда
		Если ТипЗнч(Заказчик) = Тип("Соответствие") Тогда 
			СформироватьСтруктуруЗначений(Заказчик, ДанныеСРЗ.СводныйРемонтныйЗаказЗаказчик);
		ИначеЕсли ТипЗнч(Заказчик) = Тип("Строка") Тогда 
			Сообщение.ЗначенияРеквизитов.Вставить("Заказчик", ДанныеСРЗ.СводныйРемонтныйЗаказЗаказчик);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
	ПолучателиSMS.Очистить();
	
	ПредметПисьма = ПредметСообщения.Предмет;
	
	Если ТипЗнч(ПредметПисьма) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		
		ДанныеПредмета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ПредметПисьма,
				"СводныйРемонтныйЗаказ.ПредставлениеТелефона, СводныйРемонтныйЗаказ.Заказчик");
		
		Если ЗначениеЗаполнено(ДанныеПредмета.СводныйРемонтныйЗаказПредставлениеТелефона) Тогда
			НомерТелефона = ДанныеПредмета.СводныйРемонтныйЗаказПредставлениеТелефона;
		Иначе
			НомерТелефона = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				ДанныеПредмета.СводныйРемонтныйЗаказЗаказчик,
				Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(НомерТелефона) Тогда
			НоваяСтрока = ПолучателиSMS.Добавить();
			НоваяСтрока.НомерТелефона = НомерТелефона;
			НоваяСтрока.Контакт = ДанныеПредмета.СводныйРемонтныйЗаказЗаказчик;
			НоваяСтрока.Представление = СокрЛП(ДанныеПредмета.СводныйРемонтныйЗаказЗаказчик);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

// Получение данных о прослеживаемых товаров
//
// Параметры:
//  Объект	 - ДокументОбъект.ЗаказНаряд - Документ, на основании которого произошла операция с товаром
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Список прослеживаемых товаров
//
Функция ОперацииСПрослеживаемымиТоварами(Объект) Экспорт
	
	// TODO: На данный момент сделано только для формирования отчета об операциях
	
	// Получим таблицу для формирования данных по операции
	ТаблицаОперацииПрослеживаемости = УчетПрослеживаемыхТоваровСервер.ИнициализацияТаблицыОпераций();
	
	ОсвобождентОтНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Неопределено, Объект.Дата).ОсвобожденОтНДС;
		
	// Проверим есть ли ставка НДС в документе
	ТаблицаНДС = Объект.Товары.Выгрузить();
	ТаблицаНДС.Свернуть("СтавкаНДС");
	ЕстьНДС = НЕ (ТаблицаНДС.Количество() = 1 И ТаблицаНДС[0].СтавкаНДС = Справочники.СтавкиНДС.БезНДС);
	ЕстьАвтомобили = (Объект.Автомобили.Количество() > 0);
	
	// Операцию об отчете не выводим если есть ставка НДС в документе и организация плательщик НДС
	НеДляОтчетаОбОперациях = (ЕстьНДС ИЛИ ЕстьАвтомобили) И НЕ ОсвобождентОтНДС;
	
	// Сформируем запрос из документа
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.ПередачаТовараВПроизводство) КАК КодОперации,
	|	ТоварыВПроизводстве.Номенклатура КАК Номенклатура,
	|	ТоварыВПроизводстве.ГТД КАК РНПТ,
	|	СУММА(ТоварыВПроизводстве.Количество) КАК КоличествоПрослеживаемости,
	|	СУММА(ТоварыВПроизводстве.СуммаБезНДС) КАК СуммаБезНДС
	|ИЗ
	|	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
	|ГДЕ
	|	ТоварыВПроизводстве.Регистратор = &Ссылка
	|	И ТоварыВПроизводстве.ГТД.РНПТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыВПроизводстве.Номенклатура,
	|	ТоварыВПроизводстве.ГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.РеализацияТоваров) КАК КодОперации,
	|	Продажи.Номенклатура КАК Номенклатура,
	|	Продажи.ГТД КАК РНПТ,
	|	СУММА(Продажи.Количество) КАК КоличествоПрослеживаемости,
	|	СУММА(Продажи.ВыручкаБезНДС) КАК СуммаБезНДС
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Регистратор = &Ссылка
	|	И Продажи.ГТД.РНПТ
	|
	|СГРУППИРОВАТЬ ПО
	|	Продажи.Номенклатура,
	|	Продажи.ГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.ПередачаТовараВПроизводство) КАК КодОперации,
	|	ОстаткиАвтомобилей.Автомобиль КАК Номенклатура,
	|	ОстаткиАвтомобилей.Автомобиль.ГТД КАК РНПТ,
	|	1 КАК КоличествоПрослеживаемости,
	|	СУММА(ОстаткиАвтомобилей.СуммаБезНДС) КАК СуммаБезНДС
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	|ГДЕ
	|	ОстаткиАвтомобилей.Регистратор = &Ссылка
	|	И ОстаткиАвтомобилей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ОстаткиАвтомобилей.Автомобиль.ГТД.РНПТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиАвтомобилей.Автомобиль,
	|	ОстаткиАвтомобилей.Автомобиль.ГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаряд.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ЗаказНаряд.ДатаЗакрытия, КВАРТАЛ) КАК ПериодОтчета,
	|	ЗНАЧЕНИЕ(Перечисление.ДокументыОтображенияОпераций.ОтчетОбОперациях) КАК ОтчетностьОперации,
	|	ЗаказНаряд.Ссылка КАК Документ,
	|	ЗаказНаряд.ДатаЗакрытия КАК ДатаДокумента,
	|	ЗаказНаряд.Номер КАК НомерДокумента,
	|	ЗаказНаряд.Контрагент КАК Контрагент,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументов.Другое) КАК ВидДокумента,
	|	ЗаказНаряд.ВидРемонта.ТипРемонта КАК ТипРемонта
	|ИЗ
	|	Документ.ЗаказНаряд КАК ЗаказНаряд
	|ГДЕ
	|	ЗаказНаряд.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	ЕстьТоварыВПроизводстве = ПакетЗапросов[0].Пустой();
	
	// Проверим есть РНПТ у документа
	Если Не ЕстьТоварыВПроизводстве
		И Не ЕстьАвтомобили Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	ШапкаДокумента = ПакетЗапросов[3].Выбрать();
	ШапкаДокумента.Следующий();
	НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ШапкаДокумента.Документ);
	
	Если ЕстьАвтомобили Тогда
		
		РНПТАвтомобилейДокумента = ПакетЗапросов[2].Выгрузить();
		
		Для Каждого СтрокаАвтомобиля  Из РНПТАвтомобилейДокумента Цикл
			НоваяСтрока = ТаблицаОперацииПрослеживаемости.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ШапкаДокумента);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАвтомобиля);
			НоваяСтрока.НомерДокумента = НомерДокумента;
			НоваяСтрока.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЦикла;
		
		Если Не ЕстьТоварыВПроизводстве Тогда
			Возврат ТаблицаОперацииПрослеживаемости;
		КонецЕсли;
		
	КонецЕсли;
	
	РНПТДокумента = ПакетЗапросов[0].Выгрузить();
	ПродажиРНПТ = ПакетЗапросов[1].Выгрузить();
	ДляОтчетаОбОперациях = НЕ (НеДляОтчетаОбОперациях И ШапкаДокумента.ТипРемонта = Перечисления.ТипыРемонта.Платный);
	СтруктураПоиска = Новый Структура("Номенклатура,РНПТ");
	
	Для Каждого ТекущаяСтрока Из РНПТДокумента Цикл
		
		КоличествоТовара = ТекущаяСтрока.КоличествоПрослеживаемости;
		
		// Найдем товар в продажах для фиксации суммы продажи
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущаяСтрока);
		СтрокиПродаж = ПродажиРНПТ.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиПродаж.Количество() > 0 Тогда
			// Уменьшим количество по производству
			КоличествоТовара = КоличествоТовара - СтрокиПродаж[0].КоличествоПрослеживаемости;
			Если ДляОтчетаОбОперациях Тогда
				НоваяСтрока = ТаблицаОперацииПрослеживаемости.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ШапкаДокумента);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиПродаж[0]);
				НоваяСтрока.НомерДокумента = НомерДокумента;
			КонецЕсли;
		КонецЕсли;
		
		// Остались материалы или не проданные товары клиенту
		Если КоличествоТовара > 0 Тогда
			НоваяСтрока = ТаблицаОперацииПрослеживаемости.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ШапкаДокумента);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			НоваяСтрока.НомерДокумента = НомерДокумента;
			НоваяСтрока.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			Если КоличествоТовара <> ТекущаяСтрока.КоличествоПрослеживаемости Тогда
				НоваяСтрока.КоличествоПрослеживаемости = КоличествоТовара;
				НоваяСтрока.СуммаБезНДС = 
					Окр(НоваяСтрока.СуммаБезНДС / ТекущаяСтрока.КоличествоПрослеживаемости * КоличествоТовара, 2);
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТаблицаОперацииПрослеживаемости;
	
КонецФункции

Процедура ПересчетПоказателейНачисленийСотрудникам(Объект, ПараметрыДействия)
	
	Если НЕ Автосервис.ДоступноНачислениеСотрудникам() Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяУстановкаЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяУстановкаЦенРабот", Ложь);
	ТребуетсяПересчетЦен  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен", Ложь);
	
	Если ТребуетсяУстановкаЦен Тогда
		// Пересчитаем суммы начислений исполнителям
		Для Каждого СтрокаАвтоработы Из Объект.Автоработы Цикл
			ДанныеДляРасчета = Автосервис.ПараметрыРасчетаНачисленийАвтоработы(Объект, СтрокаАвтоработы);
			ИсполнителиАвтоработы = Объект.Исполнители.НайтиСтроки(
			Новый Структура("ИдентификаторРаботы", СтрокаАвтоработы.ИдентификаторРаботы));
			АвтосервисКлиентСервер.ПересчитатьСуммуНачисленийСУчетомСпособа(
			ИсполнителиАвтоработы,
			ДанныеДляРасчета,
			Перечисления.СпособыРасчета.Суммой);
		КонецЦикла;
	ИначеЕсли ТребуетсяПересчетЦен Тогда
		СтарыйКурс = ПараметрыДействия.СтарыйКурс;
		НовыйКурс  = Объект.КурсДокумента;
		Если СтарыйКурс = НовыйКурс ИЛИ СтарыйКурс * НовыйКурс = 0 Тогда
			Возврат;
		КонецЕсли;
		КоэффициентСоотношенияКурсов = СтарыйКурс / НовыйКурс;
		// Пересчитаем сумму начислений по новому курсу
		Для Каждого СтрокаИсполнителя Из Объект.Исполнители Цикл
			Если СтрокаИсполнителя.СпособРасчета = Перечисления.СпособыРасчета.Суммой
				ИЛИ СтрокаИсполнителя.СпособРасчета = Перечисления.СпособыРасчета.ПоНормочасам Тогда
				СтрокаИсполнителя.ПараметрРасчетаНачисления = Окр(
					СтрокаИсполнителя.ПараметрРасчетаНачисления * КоэффициентСоотношенияКурсов, 2);
				СтрокаИсполнителя.Начислено = Окр(СтрокаИсполнителя.Начислено * КоэффициентСоотношенияКурсов, 2);
			Иначе
				СтрокаИсполнителя.Начислено = Окр(СтрокаИсполнителя.Начислено * КоэффициентСоотношенияКурсов, 2);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ТипЦенРабот");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ВидРемонта");
	ОбязательныеРеквизиты.Добавить("Состояние");
	ОбязательныеРеквизиты.Добавить("Цех");
	
	Если НЕ ПолучитьФункциональнуюОпцию("АвтоматическиСоздаватьСводныйРемонтныйЗаказ") Тогда
		ОбязательныеРеквизиты.Добавить("СводныйРемонтныйЗаказ");
	КонецЕсли;
	
	Если НЕ Автосервис.ЭтоБесплатный(Объект.ВидРемонта) Тогда
		ОбязательныеРеквизиты.Добавить("Контрагент");
		ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	ИначеЕсли Объект.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.СборкаАвтомобиля
		И (Объект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт
			ИЛИ Объект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен) Тогда
		ОбязательныеРеквизиты.Добавить("СкладКомпании");
	КонецЕсли;

	// Зачет авансов
	Если ДоступноФормированиеРасчетовСКонтрагентами(Объект) Тогда 
		ОбязательныеРеквизиты.Добавить("СпособЗачетаАвансов");
	КонецЕсли;
	Если ДоступноФормированиеРасчетовСКонтрагентами(Объект) Тогда 
		Если Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу
			И (Объект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт
				ИЛИ Объект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен) Тогда
			ОбязательныеРеквизиты.Добавить("ЗачетАвансов");
		КонецЕсли;
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("ЗачетАвансов.ДокументАванса");
	ОбязательныеРеквизиты.Добавить("ЗачетАвансов.Сумма");
	
	Если Объект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
		ОбязательныеРеквизиты.Добавить("ДатаНачала");
	КонецЕсли;
	
	ОтправкаЭД = ИнтеграцияЭДОВызовСервера.ДанныеСостоянияЭДОДляФормыОбъектаУчета(Объект.Ссылка);
	
	Если Объект.ОтправлятьКакАктОбОказанииУслуг И 
		ОтправкаЭД.ИспользуетсяОбменЭлектроннымиДокументами И НЕ ОтправкаЭД.НеобходимаНастройка Тогда
		
		ОбязательныеРеквизиты.Добавить("ВариантРаспределенияСуммыТоваровПриОтправкеПоЭДО");
		ЭтоРаспределениеНаРаботу = (Объект.ВариантРаспределенияСуммыТоваровПриОтправкеПоЭДО 
										= Перечисления.ВариантыРаспределенияСуммыТоваровПриОтправкеПоЭДО.РаспределятьНаРаботу);
		
		Если ЭтоРаспределениеНаРаботу Тогда
			ОбязательныеРеквизиты.Добавить("ИдентификаторРаботыДляРаспределенияСуммыТоваров");
		КонецЕсли;
		
	КонецЕсли;
	
	НеЗарегистрированГИСМТ = Объект.Контрагент.СтатусУчастникаГИСМТ = Перечисления.СтатусыУчастникаОборотаТоваровГИСМТ.НеЗарегистрирован;
	Если НеЗарегистрированГИСМТ Тогда 
		ТоварыСМаркировкой = ПроверитьМаркировку(Объект.Ссылка);
		Если ТоварыСМаркировкой И ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
			ОбязательныеРеквизиты.Добавить("ПричинаВыводаИзОборота");
		КонецЕсли;
	КонецЕсли;

	// Товары
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	// Автоработы
	ОбязательныеРеквизиты.Добавить("Автоработы.Авторабота");
	ОбязательныеРеквизиты.Добавить("Автоработы.Количество");
	
	// Исполнители
	ОбязательныеРеквизиты.Добавить("Исполнители.ИдентификаторРаботы");
	ОбязательныеРеквизиты.Добавить("Исполнители.Исполнитель");
	ОбязательныеРеквизиты.Добавить("Исполнители.Цех");
	ОбязательныеРеквизиты.Добавить("Исполнители.Процент");
	
	// Материалы заказчика
	ОбязательныеРеквизиты.Добавить("МатериалыЗаказчика.Номенклатура");
	ОбязательныеРеквизиты.Добавить("МатериалыЗаказчика.Количество");
	
	// Причины обращения
	ОбязательныеРеквизиты.Добавить("ПричиныОбращения.ПричинаОбращенияСодержание");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы Товары
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	УникальныеТовары.Добавить("ИдентификаторПричиныОбращения");
	
	// Уникальные поля таблицы Исполнители
	УникальныеИсполнители = Новый Массив();
	УникальныеИсполнители.Добавить("ИдентификаторРаботы");
	УникальныеИсполнители.Добавить("Исполнитель");
	УникальныеИсполнители.Добавить("Цех");
	
	// Уникальные поля таблицы Материалы заказчика
	УникальныеМатериалыЗаказчика = Новый Массив();
	УникальныеМатериалыЗаказчика.Добавить("Номенклатура");
	УникальныеМатериалыЗаказчика.Добавить("ЕдиницаИзмерения");
	УникальныеМатериалыЗаказчика.Добавить("ХарактеристикаНоменклатуры");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Товары",             УникальныеТовары);
	УникальныеРеквизиты.Вставить("Исполнители",        УникальныеИсполнители);
	УникальныеРеквизиты.Вставить("МатериалыЗаказчика", УникальныеМатериалыЗаказчика);
	
	УникальныеЗачетАвансов = Новый Массив();
	УникальныеЗачетАвансов.Добавить("ДокументАванса");
	УникальныеРеквизиты.Вставить("ЗачетАвансов", УникальныеЗачетАвансов);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("Цех",                   Ложь);
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	КонтролируемыеРеквизиты.Вставить("Товары",                Новый Структура("СкладКомпании", Ложь));
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Заполняет на основании заказа
//
// Параметры:
//  Объект          - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  ЗаказПокупателя - ДокументСсылка.
//
Процедура ЗаполнитьРезервамиКонтрагента(Объект, ЗаказПокупателя) Экспорт
	
	//Если НЕ ЗначениеЗаполнено(ЗаказПокупателя) Тогда
	//	Запрос = Новый Запрос("ВЫБРАТЬ
	//	|	ЗаказыПокупателейОстатки.Номенклатура,
	//	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	//	|	СУММА(ВЫБОР
	//	|		КОГДА ЗаказыПокупателейОстатки.СкладКомпании = &СкладКомпании ТОГДА
	//	|			ЗаказыПокупателейОстатки.РезервОстаток
	//	|		ИНАЧЕ
	//	|			0
	//	|	КОНЕЦ) КАК Количество,
	//	|	СУММА(ЗаказыПокупателейОстатки.СуммаУпрОстаток) КАК Сумма,
	//	|	СУММА(ЗаказыПокупателейОстатки.ЗаказаноОстаток) КАК Заказано
	//	|ИЗ
	//	|	РегистрНакопления.ЗаказыПокупателей.Остатки("+?(Ссылка.Пустая(),"","&НаМомент")+",Контрагент = &Контрагент И (СкладКомпании = &СкладКомпании ИЛИ СкладКомпании = Заказ.СкладКомпании)) КАК ЗаказыПокупателейОстатки
	//	|СГРУППИРОВАТЬ ПО
	//	|	ЗаказыПокупателейОстатки.Номенклатура,
	//	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры
	//	|ИМЕЮЩИЕ
	//	|	СУММА(ВЫБОР
	//	|		КОГДА ЗаказыПокупателейОстатки.СкладКомпании = &СкладКомпании ТОГДА
	//	|			ЗаказыПокупателейОстатки.РезервОстаток
	//	|		ИНАЧЕ
	//	|			0
	//	|	КОНЕЦ) > 0 ");
	//	Запрос.УстановитьПараметр("НаМомент",МоментВремени());
	//	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	//	Запрос.УстановитьПараметр("СкладКомпании",?(НЕ ЗначениеЗаполнено(СкладКомпании), ПраваИНастройкиПользователя.Значение("ОсновнойСкладКомпании",ЭтотОбъект), СкладКомпании));
	//	
	//	Объект.Товары.Очистить();
	//	
	//	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Пока Выборка.Следующий() Цикл
	//		НоваяСтрока=Объект.Товары.Добавить();
	//		НоваяСтрока.Номенклатура				= Выборка.Номенклатура;
	//		НоваяСтрока.ХарактеристикаНоменклатуры	= Выборка.ХарактеристикаНоменклатуры;
	//		ОбработкаРеквизита("Товары.Номенклатура", НоваяСтрока);
	//		НоваяСтрока.Количество					= Выборка.Количество/?(НЕ ЗначениеЗаполнено(НоваяСтрока.Коэффициент),1,НоваяСтрока.Коэффициент);
	//		ОбработкаРеквизита("Товары.Количество", НоваяСтрока);
	//		Если Выборка.Количество = Выборка.Заказано Тогда
	//			НоваяСтрока.СуммаВсего = Выборка.Сумма;
	//		Иначе
	//			НоваяСтрока.СуммаВсего = (Выборка.Сумма/Выборка.Заказано)*Выборка.Количество;
	//		КонецЕсли;
	//		НоваяСтрока.СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(НоваяСтрока.СуммаВсего, ВалютаУпр, КурсВалютыУпр, ВалютаДокумента, КурсДокумента);
	//		ОбработкаРеквизита("Товары.СуммаВсего", НоваяСтрока);
	//	КонецЦикла;
	//Иначе
	//	Запрос = Новый Запрос("ВЫБРАТЬ
	//	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	//	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	//	|	СУММА(ВЫБОР
	//	|		КОГДА ЗаказыПокупателейОстатки.СкладКомпании = &СкладКомпании ТОГДА
	//	|			ЗаказыПокупателейОстатки.РезервОстаток
	//	|		ИНАЧЕ
	//	|			0
	//	|	КОНЕЦ) КАК Количество,
	//	|	СУММА(ЗаказыПокупателейОстатки.ЗаказаноОстаток) КАК Заказано,
	//	|	СУММА(ЗаказыПокупателейОстатки.СуммаОстаток) КАК СуммаЗаказа,
	//	|	МАКСИМУМ(ЕСТЬNULL(ЗаказПокупателяТовары.Количество * ЗаказПокупателяТовары.Коэффициент,1)) КАК КоличествоБазовое,
	//	|	МАКСИМУМ(ЕСТЬNULL(ЗаказПокупателяТовары.ЕдиницаИзмерения,Значение(Справочник.ЕдиницыИзмерения.ПустаяСсылка))) КАК ЕдиницаИзмерения,
	//	|	МАКСИМУМ(ЕСТЬNULL(ЗаказПокупателяТовары.Коэффициент,1)) КАК Коэффициент,
	//	|	МАКСИМУМ(ЕСТЬNULL(ЗаказПокупателяТовары.СтавкаНДС, ЗаказыПокупателейОстатки.Номенклатура.СтавкаНДС)) КАК СтавкаНДС,
	//	|	ЕСТЬNULL(ЗаказПокупателяТовары.НомерСтроки, 1000000) КАК НомерСтроки,
	//	|	МАКСИМУМ(ЕСТЬNULL(ЗаказПокупателяТовары.СкидкаНаТовар, ЗНАЧЕНИЕ(Справочник.ТипыСкидок.ПустаяСсылка))) КАК СкидкаНаТовар,
	//	|	МАКСИМУМ(ЕСТЬNULL(ЗаказПокупателяТовары.ПроцентСкидкиСтроки,0)) КАК ПроцентСкидкиСтроки,
	//	|	МАКСИМУМ(ЕСТЬNULL(ЗаказПокупателяТовары.ПроцентСкидки,0)) КАК ПроцентСкидки
	//	|ИЗ
	//	|	РегистрНакопления.ЗаказыПокупателей.Остатки("+?(Ссылка.Пустая(),"","&НаМомент")+",
	//	|	Контрагент = &Контрагент И 
	//	|	(СкладКомпании = &СкладКомпании ИЛИ СкладКомпании = &СкладЗаказа) И Заказ = &Заказ) КАК ЗаказыПокупателейОстатки
	//	|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	//	|ПО 
	//	|	ЗаказыПокупателейОстатки.Заказ = ЗаказПокупателяТовары.Ссылка И 
	//	|	ЗаказыПокупателейОстатки.Номенклатура = ЗаказПокупателяТовары.Номенклатура И 
	//	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказПокупателяТовары.ХарактеристикаНоменклатуры
	//	|СГРУППИРОВАТЬ ПО
	//	|	ЗаказыПокупателейОстатки.Номенклатура,
	//	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	//	|	ЕСТЬNULL(ЗаказПокупателяТовары.НомерСтроки, 1000000)
	//	|ИМЕЮЩИЕ
	//	|	СУММА(ВЫБОР
	//	|		КОГДА ЗаказыПокупателейОстатки.СкладКомпании = &СкладКомпании ТОГДА
	//	|			ЗаказыПокупателейОстатки.РезервОстаток
	//	|		ИНАЧЕ
	//	|			0
	//	|	КОНЕЦ) > 0 
	//	|УПОРЯДОЧИТЬ ПО
	//	|	НомерСтроки
	//	|ИТОГИ
	//	|	СУММА(КоличествоБазовое),
	//	|	МАКСИМУМ(Количество),
	//	|	МАКСИМУМ(СуммаЗаказа),
	//	|	МАКСИМУМ(Заказано)
	//	|ПО
	//	|	Номенклатура,
	//	|	ХарактеристикаНоменклатуры");
	//	
	//	ВалютаЗаказа   = ЗаказПокупателя.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов;
	//	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаЗаказа,Дата);
	//	КурсЗаказа     = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	//	
	//	Запрос.УстановитьПараметр("НаМомент",МоментВремени());
	//	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	//	Запрос.УстановитьПараметр("Заказ",ЗаказПокупателя);
	//	Запрос.УстановитьПараметр("СкладКомпании",?(НЕ ЗначениеЗаполнено(СкладКомпании), ПраваИНастройкиПользователя.Значение("ОсновнойСкладКомпании",ЭтотОбъект), СкладКомпании));
	//	Запрос.УстановитьПараметр("СкладЗаказа", ЗаказПокупателя.СкладКомпании);
	//	
	//	СкидкаНаценка = ЗаказПокупателя.СкидкаНаценка;
	//	ОбработкаРеквизита("СкидкаНаценка");
	//	Товары.Очистить(); // нужные только скорректированные позиции
	//	ВыборкаНоменклатуры = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//	Пока ВыборкаНоменклатуры.Следующий() Цикл
	//		ВыборкаХарактеристик = ВыборкаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//		Пока ВыборкаХарактеристик.Следующий() Цикл
	//			ВсегоОсталось = ВыборкаХарактеристик.Количество;
	//			КоличествоБазовоеПоЗаказу = ВыборкаХарактеристик.КоличествоБазовое;
	//			СуммаОсталось = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(?(ВыборкаХарактеристик.Заказано <= ВыборкаХарактеристик.Количество,ВыборкаХарактеристик.СуммаЗаказа, ВыборкаХарактеристик.СуммаЗаказа/ВыборкаХарактеристик.Заказано*ВыборкаХарактеристик.Количество), ВалютаЗаказа, КурсЗаказа,ВалютаДокумента,КурсДокумента);
	//			ВыборкаДетали = ВыборкаХарактеристик.Выбрать(ОбходРезультатаЗапроса.Прямой);
	//			НоваяСтрока   = Неопределено;
	//			Пока ВыборкаДетали.Следующий() Цикл
	//				Если ВсегоОсталось=0 Тогда
	//					Прервать;
	//				КонецЕсли;
	//				Если ВыборкаДетали.Количество = 0 Тогда
	//					Продолжить;
	//				КонецЕсли;
	//				Если КоличествоБазовоеПоЗаказу = 1 Тогда
	//					КоличествоСтроки = ВыборкаДетали.Количество;
	//				Иначе
	//					КоличествоСтроки = ВыборкаДетали.Количество*(ВыборкаДетали.КоличествоБазовое/КоличествоБазовоеПоЗаказу);
	//				КонецЕсли;
	//				ТекущееКоличество = Мин(ВсегоОсталось, КоличествоСтроки);
	//				НоваяСтрока=Товары.Добавить();
	//				НоваяСтрока.Номенклатура				= ВыборкаДетали.Номенклатура;
	//				НоваяСтрока.ХарактеристикаНоменклатуры	= ВыборкаДетали.ХарактеристикаНоменклатуры;
	//				НоваяСтрока.ЕдиницаИзмерения			= ВыборкаДетали.ЕдиницаИзмерения;
	//				НоваяСтрока.Коэффициент					= ВыборкаДетали.Коэффициент;
	//				ОбработкаРеквизита("Товары.Номенклатура", НоваяСтрока);
	//				НоваяСтрока.Количество					= ТекущееКоличество/?(НЕ ЗначениеЗаполнено(НоваяСтрока.Коэффициент),1,НоваяСтрока.Коэффициент);;
	//				НоваяСтрока.КоличествоБазовое			= ТекущееКоличество;
	//				НоваяСтрока.СтавкаНДС					= ВыборкаДетали.СтавкаНДС;
	//				ТекСумма = (СуммаОсталось/ВсегоОсталось)*ТекущееКоличество;
	//				СуммаОсталось = СуммаОсталось - ТекСумма;
	//				
	//				НоваяСтрока.СкидкаНаТовар = ВыборкаДетали.СкидкаНаТовар;
	//				НоваяСтрока.ПроцентСкидки = ВыборкаДетали.ПроцентСкидки;
	//				НоваяСтрока.ПроцентСкидкиСтроки = ВыборкаДетали.ПроцентСкидкиСтроки;
	//				
	//				НоваяСтрока.СуммаВсего = ТекСумма;
	//				ОбработкаРеквизита("Товары.СуммаВсего", НоваяСтрока);
	//				
	//				ВсегоОсталось = ВсегоОсталось-ТекущееКоличество;
	//			КонецЦикла;
	//				
	//			Если ВсегоОсталось>0 ИЛИ СуммаОсталось>0 Тогда
	//				Если НЕ НоваяСтрока = Неопределено Тогда
	//					НоваяСтрока.Количество = НоваяСтрока.Количество + (ВсегоОсталось/НоваяСтрока.Коэффициент);
	//					НоваяСтрока.КоличествоБазовое = НоваяСтрока.КоличествоБазовое + ВсегоОсталось;
	//					ОбработкаРеквизита("Товары.Количество", НоваяСтрока);
	//					НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего + СуммаОсталось;
	//				ИначеЕсли ВсегоОсталось>0 Тогда
	//					НоваяСтрока=Товары.Добавить();
	//					НоваяСтрока.Номенклатура=ВыборкаХарактеристик.Номенклатура;
	//					НоваяСтрока.ХарактеристикаНоменклатуры = ВыборкаХарактеристик.ХарактеристикаНоменклатуры;
	//					ОбработкаРеквизита("Товары.Номенклатура", НоваяСтрока);
	//					НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.ОсновнаяСтавкаНДС;
	//					НоваяСтрока.Количество = ВсегоОсталось/?(НЕ ЗначениеЗаполнено(НоваяСтрока.Коэффициент),1,НоваяСтрока.Коэффициент);
	//					НоваяСтрока.КоличествоБазовое = НоваяСтрока.КоличествоБазовое + ВсегоОсталось;
	//					ОбработкаРеквизита("Товары.Количество", НоваяСтрока);
	//					НоваяСтрока.СуммаВсего = СуммаОсталось;
	//				КонецЕсли;
	//				ОбработкаРеквизита("Товары.СуммаВсего", НоваяСтрока);
	//				
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРезервамиКонтрагента()

// Возвращает ведущего контрагента для контрагента в параметре
// Параметры:
//  Заказчик    - Ссылка на контрагента, для которого происходит поиск ведущего.
Функция ПолучитьВедущегоКонтрагента(Заказчик)
	// !!! переделать
	ПустойКонтрагент = Заказчик;
	// ПустойКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	// Если ТипЗнч(Заказчик) = ТипЗнч(ПустойКонтрагент) Тогда
	//	Если Заказчик.ВидКонтрагента = Перечисления.ВидыКонтрагентов.КонтактноеЛицо Тогда
	//		Если Заказчик.ВедушийКонтрагент <> Неопределено И Заказчик.ВедушийКонтрагент <> ПустойКонтрагент Тогда
	//			Возврат ПолучитьВедущегоКонтрагента(Заказчик.ВедушийКонтрагент);
	//		Иначе
	//			Возврат ПустойКонтрагент;
	//		КонецЕсли;
	//	Иначе
	//		Возврат Заказчик;
	//	КонецЕсли;
	// Иначе
	Возврат ПустойКонтрагент;
	// КонецЕсли;
КонецФункции

Функция ПолучитьГарантийногоПлательщика(Объект, ПараметрыДействия)
	
	НовыйКонтрагент            = Неопределено;
	НовыйДоговорВзаиморасчетов = Неопределено;
	
	Заказчик = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Заказчик", Объект.СводныйРемонтныйЗаказ.Заказчик);
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидРемонта)
		ИЛИ Объект.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Платный Тогда
		
		Модель = Объект.СводныйРемонтныйЗаказ.Автомобиль.Модель;
		Если Не ЗначениеЗаполнено(Объект.СводныйРемонтныйЗаказ) И ПараметрыДействия.Свойство("Автомобиль") И 
			ЗначениеЗаполнено(ПараметрыДействия.Автомобиль) Тогда
			Модель = ПараметрыДействия.Автомобиль.Модель; 	
		КонецЕсли;
		ВидРемонтаГарантия = Объект.ВидРемонта.Гарантия.Найти(Модель, "Модель");
		Если ВидРемонтаГарантия = Неопределено Тогда
			
			// Проверим наличие плательщика вида ремонта для любой модели
			ВидРемонтаГарантияПоВсемМоделям = Объект.ВидРемонта.Гарантия.Найти(Справочники.Модели.ПустаяСсылка(), "Модель");
			Если ВидРемонтаГарантияПоВсемМоделям = Неопределено Тогда
				ПодставлятьКонтрагентаИзЗаказчика =
					ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ПодставлятьКонтрагентаИзЗаказчика", Истина);
				Если ПодставлятьКонтрагентаИзЗаказчика Тогда
					НовыйКонтрагент = ПолучитьВедущегоКонтрагента(Заказчик);
				КонецЕсли;
			Иначе
				НовыйКонтрагент            = ВидРемонтаГарантияПоВсемМоделям.Контрагент;
				НовыйДоговорВзаиморасчетов = ВидРемонтаГарантияПоВсемМоделям.ДоговорВзаиморасчетов;
			КонецЕсли;
			
		Иначе
			НовыйКонтрагент            = ВидРемонтаГарантия.Контрагент;
			НовыйДоговорВзаиморасчетов = ВидРемонтаГарантия.ДоговорВзаиморасчетов;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Контрагент",            НовыйКонтрагент);
	Результат.Вставить("ДоговорВзаиморасчетов", НовыйДоговорВзаиморасчетов);
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьГарантийногоПлательщика(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ДанныеПлательщика = ПолучитьГарантийногоПлательщика(Объект, ПараметрыДействия);
	
	ИзменилсяКонтрагент = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеПлательщика.Контрагент) Тогда
		
		Если НЕ Объект.Контрагент = ДанныеПлательщика.Контрагент Тогда
			ПредКонтрагент = Объект.Контрагент;
			Объект.Контрагент = ДанныеПлательщика.Контрагент;
			КонтрагентПриИзменении(Объект, ПараметрыДействия);
			ИзменилсяКонтрагент = ?(Объект.Контрагент = ПредКонтрагент, Ложь, Истина);
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(ДанныеПлательщика.ДоговорВзаиморасчетов))
			И (НЕ Объект.ДоговорВзаиморасчетов = ДанныеПлательщика.ДоговорВзаиморасчетов) Тогда
			
			Объект.ДоговорВзаиморасчетов = ДанныеПлательщика.ДоговорВзаиморасчетов;
			ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
			
		КонецЕсли;
		
	ИначеЕсли Объект.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Платный Тогда
		// а был ли гарантийный плательщик?
		ДанныеОбъекта = Новый Структура;
		ВремПараметрыДействия = Новый Структура;
		ДанныеОбъекта.Вставить("СводныйРемонтныйЗаказ", Объект.СводныйРемонтныйЗаказ);
		
		// Получим значения данных до изменения. Если их нет в параметрах - возьмем из ссылки.
		КэшВидРемонта = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "КэшВидРемонта", Объект.Ссылка.ВидРемонта);
		КэшПлательщик = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "КэшПлательщик", Объект.Ссылка.Контрагент);
		ДанныеОбъекта.Вставить("ВидРемонта", КэшВидРемонта);
		ВремПараметрыДействия.Вставить("Автомобиль", ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Автомобиль"));
		ДанныеСтарого = ПолучитьГарантийногоПлательщика(ДанныеОбъекта, ВремПараметрыДействия);
		
		Если ЗначениеЗаполнено(ДанныеСтарого.Контрагент) И ДанныеСтарого.Контрагент = КэшПлательщик Тогда
			
			// Новый вид ремонта не гарантийный, старый - гарантийный, 
			// старый вид ремонта имеет гарантийного плательщика,
			// старый плательщик из старого гарантийного ремонта.
			// Исходя из этого меняем плательщика на заказчика.
			ПредКонтрагент = Объект.Контрагент;
			Заказчик = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Заказчик", Объект.СводныйРемонтныйЗаказ.Заказчик);
			Объект.Контрагент = ПолучитьВедущегоКонтрагента(Заказчик);
			КонтрагентПриИзменении(Объект, ПараметрыДействия);
			ИзменилсяКонтрагент = ?(Объект.Контрагент = ПредКонтрагент, Ложь, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИзменилсяКонтрагент Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru='Установлен новый плательщик <""%1""> по договору <""%2"">'"),
				Строка(Объект.Контрагент),
				СокрЛП(Объект.ДоговорВзаиморасчетов)
			)
		);
	КонецЕсли;
	
КонецПроцедуры // УстановитьГарантийногоПлательщика()

// Заполнение Вида ремонта и Авторабот из Сервисной компании
//
Процедура ЗаполнениеПоСервиснойКомпании(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	РедактированиеРаботЗаказНаряда   = ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.РедактированиеРаботЗаказНаряда, Объект);
	РедактированиеДеталейЗаказНаряда = ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.РедактированиеДеталейЗаказНаряда, Объект);
	
	// Если передана причина обращения, то сделаем заполнение авторабот и деталей для нее.
	ИдентификаторПричиныОбращения = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ПричинаОбращения", Неопределено);
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОчиститьТаблицы", Ложь) Тогда
		Если РедактированиеРаботЗаказНаряда Тогда
			Если ИдентификаторПричиныОбращения = Неопределено Тогда
				Объект.Автоработы.Очистить();
			Иначе
				СтрокиАвторабот = Объект.Автоработы.НайтиСтроки(Новый Структура("ИдентификаторПричиныОбращения", ИдентификаторПричиныОбращения));
				Для Каждого ТекущаяСтрока Из СтрокиАвторабот Цикл
					Объект.Автоработы.Удалить(ТекущаяСтрока);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если РедактированиеДеталейЗаказНаряда Тогда
			Если ИдентификаторПричиныОбращения = Неопределено Тогда
				Объект.Товары.Очистить();
			Иначе
				СтрокиДеталей = Объект.Товары.НайтиСтроки(Новый Структура("ИдентификаторПричиныОбращения", ИдентификаторПричиныОбращения));
				Для Каждого ТекущаяСтрока Из СтрокиДеталей Цикл
					Объект.Товары.Удалить(ТекущаяСтрока);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТребуетсяУстановкаВидаРемонта                     = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяУстановкаВидаРемонта", Ложь);
	ТребуетсяЗаполнениеАвтоработамиПоСервиснойКомпании = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяЗаполнениеАвтоработамиПоСервиснойКомпании", Ложь);
	
	Если ТребуетсяУстановкаВидаРемонта Тогда
		Объект.ВидРемонта = Объект.СервиснаяКампания.ВидРемонта;
		ВидРемонтаПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Если ТребуетсяЗаполнениеАвтоработамиПоСервиснойКомпании Тогда
		
		МассивДобавленныхРабот = Новый СписокЗначений;
		ОсновнойСкладКомпании  = ПраваИНастройкиПользователя.Значение("ОсновнойСкладКомпании", Объект);
		
		Для Каждого АвтоработаСервиснойКампании Из Объект.СервиснаяКампания.Автоработы Цикл
			Если ТипЗнч(АвтоработаСервиснойКампании.Авторабота) = Тип("СправочникСсылка.Автоработы") И РедактированиеРаботЗаказНаряда Тогда
				
				// попробуем найти строку в ТЧ
				Отбор = Новый Структура("Авторабота", АвтоработаСервиснойКампании.Авторабота);
				
				Если АвтоработаСервиснойКампании.ВспомогательнаяАвторабота Тогда
					
					НайденныеСтроки = Объект.ВспомогательныеАвтоработы.НайтиСтроки(Отбор);
					
					Если НайденныеСтроки.Количество() = 0 Тогда
						НоваяСтрокаАвторабот = Объект.ВспомогательныеАвтоработы.Добавить();
						НоваяСтрокаАвторабот.Авторабота = АвтоработаСервиснойКампании.Авторабота;
						ВспомогательныеАвтоработыАвтоработаПриИзменении(Объект, НоваяСтрокаАвторабот);
					КонецЕсли;
					
				Иначе
					
					Если НЕ ИдентификаторПричиныОбращения = Неопределено Тогда
						Отбор.Вставить("ИдентификаторПричиныОбращения", ИдентификаторПричиныОбращения);
					КонецЕсли;
					
					НайденныеСтроки = Объект.Автоработы.НайтиСтроки(Отбор);
					
					Если НайденныеСтроки.Количество() = 0 Тогда
						НоваяСтрокаАвторабот = Объект.Автоработы.Добавить();
						НоваяСтрокаАвторабот.Авторабота = АвтоработаСервиснойКампании.Авторабота;
						НоваяСтрокаАвторабот.Количество = АвтоработаСервиснойКампании.Количество;
						АвтоработыАвтоработаПриИзменении(Объект, НоваяСтрокаАвторабот);
						
						НоваяСтрокаАвторабот.ИдентификаторРаботы = Новый УникальныйИдентификатор;
						МассивДобавленныхРабот.Добавить(НоваяСтрокаАвторабот);
						
						Если НЕ ИдентификаторПричиныОбращения = Неопределено Тогда
							НоваяСтрокаАвторабот.ИдентификаторПричиныОбращения = ИдентификаторПричиныОбращения;
						КонецЕсли;
						
					Иначе
						СтрокаАвторабот = НайденныеСтроки[0];
						СтрокаАвторабот.Количество = СтрокаАвторабот.Количество + АвтоработаСервиснойКампании.Количество;
						АвтоработыКоличествоПриИзменении(Объект, СтрокаАвторабот);
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(АвтоработаСервиснойКампании.Авторабота) = Тип("СправочникСсылка.Номенклатура") И РедактированиеДеталейЗаказНаряда Тогда
				
				// попробуем найти строку в ТЧ
				Отбор = Новый Структура("Номенклатура", АвтоработаСервиснойКампании.Авторабота);
				
				Если НЕ ИдентификаторПричиныОбращения = Неопределено Тогда
					Отбор.Вставить("ИдентификаторПричиныОбращения", ИдентификаторПричиныОбращения);
				КонецЕсли;
				
				НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					НоваяСтрокаТоваров = Объект.Товары.Добавить();
					НоваяСтрокаТоваров.Номенклатура  = АвтоработаСервиснойКампании.Авторабота;
					НоваяСтрокаТоваров.Количество    = АвтоработаСервиснойКампании.Количество;
					НоваяСтрокаТоваров.СкладКомпании = ОсновнойСкладКомпании;
					ТоварыНоменклатураПриИзменении(Объект, НоваяСтрокаТоваров);
					
					Если НЕ ИдентификаторПричиныОбращения = Неопределено Тогда
						НоваяСтрокаТоваров.ИдентификаторПричиныОбращения = ИдентификаторПричиныОбращения;
					КонецЕсли;
					
				Иначе
					СтрокаТоваров = НайденныеСтроки[0];
					СтрокаТоваров.Количество = СтрокаТоваров.Количество + АвтоработаСервиснойКампании.Количество;
					ТоварыКоличествоПриИзменении(Объект, СтрокаТоваров);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		//Если МассивДобавленныхРабот.Количество() > 0 Тогда
		//	ЗаполнениеИсполнителей(Объект, МассивДобавленныхРабот);
		//КонецЕсли;
		
	КонецЕсли;
	
	// Сбросим признаки расчета
	ПараметрыДействия.Вставить("ТребуетсяУстановкаВидаРемонта"                     , Ложь);
	ПараметрыДействия.Вставить("ОчиститьТаблицы"                                   , Ложь);
	ПараметрыДействия.Вставить("ТребуетсяЗаполнениеАвтоработамиПоСервиснойКомпании" , Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	СписокЗаказов = Новый Массив;
	СписокЗаказов.Добавить(Объект.Ссылка);
	ДополнительныеПараметры.ДляПроведения.Вставить("Заказы", СписокЗаказов);
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговора",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов"));
	Если Объект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда 
		МоментВремени = Новый МоментВремени(Объект.ДатаЗакрытия, Объект.Ссылка);
	ИначеЕсли Объект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен Тогда
		МоментВремени = Новый МоментВремени(Объект.ДатаОкончания, Объект.Ссылка);
	Иначе
		МоментВремени = Объект.МоментВремени();
	КонецЕсли;
	ДополнительныеПараметры.ДляПроведения.Вставить("МоментВремени", МоментВремени);
	ДополнительныеПараметры.ДляПроведения.Вставить("ВидРемонта", Объект.ВидРемонта);
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаДоговора", ДополнительныеПараметры.ДляПроведения.ВалютаДоговора);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		ДополнительныеПараметры.ДляПроведения.МоментВремени);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказНаряд.Организация КАК Организация,
	|	ЗаказНаряд.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЗаказНаряд.Состояние = ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.Закрыт)
	|		ТОГДА ЗаказНаряд.ДатаЗакрытия
	|		ИНАЧЕ ЗаказНаряд.ДатаОкончания
	|	КОНЕЦ КАК Дата,
	|	ЗаказНаряд.ХозОперация КАК ХозОперация,
	|	ЗаказНаряд.ДокументОснование КАК ДокументОснование,
	|	ЗаказНаряд.Контрагент КАК Контрагент,
	|	ЗаказНаряд.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ЗаказНаряд.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	ЗаказНаряд.Ссылка КАК Сделка,
	|	ЗаказНаряд.СуммаДокумента КАК Сумма,
	|	ЗаказНаряд.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	ЗаказНаряд.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗаказНаряд.КурсДокумента КАК КурсДокумента,
	|	ЗаказНаряд.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ЗаказНаряд.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.ЗаказНаряд КАК ЗаказНаряд
	|ГДЕ
	|	ЗаказНаряд.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНарядЗачетАвансов.Ссылка КАК Ссылка,
	|	ЗаказНарядЗачетАвансов.ДокументАванса КАК ДокументАванса,
	|	ЗаказНарядЗачетАвансов.Сумма КАК Сумма
	|ПОМЕСТИТЬ РаспределениеАванса
	|ИЗ
	|	Документ.ЗаказНаряд.ЗачетАвансов КАК ЗаказНарядЗачетАвансов
	|ГДЕ
	|	ЗаказНарядЗачетАвансов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр, &ВалютаДоговора)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ХозОперация КАК ХозОперация,
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДоговора КАК ВалютаДоговора,
	|	ДанныеДокумента.Сделка КАК Сделка,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыВзаиморасчетов = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютВзаиморасчетов.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетов.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыВзаиморасчетов
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютВзаиморасчетов
	|		ПО ДанныеДокумента.ВалютаДоговора = КурсыВалютВзаиморасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	
	Если Не ДоступноФормированиеРасчетовСКонтрагентами(ДвиженияДокумента.ДляПроведения) Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.ДокументОснование КАК ДокументОснование,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Задолженность.ВалютаДоговора КАК ВалютаДоговора,
	|	Задолженность.Сделка КАК Сделка,
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр
	|ИЗ
	|	Задолженность КАК Задолженность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеАванса.ДокументАванса КАК ДокументАванса,
	|	СУММА(РаспределениеАванса.Сумма) КАК Сумма
	|ИЗ
	|	РаспределениеАванса КАК РаспределениеАванса
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеАванса.ДокументАванса";
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеОбОплате = ПакетЗапроса[0].Выбрать();
	ЗачетАванса = ПакетЗапроса[1].Выгрузить();
	
	Если Не ДанныеОбОплате.Следующий() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СписокЗаказов = ДвиженияДокумента.ДляПроведения.Заказы;
	
	РасчетыСКонтрагентамиСервер.ДополнитьРасчетыСКонтрагентом(
		РасчетыСКонтрагентами,
		ДанныеОбОплате,
		ЗачетАванса,
		Отказ,,
		СписокЗаказов);
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру параметров обработки событий изменения реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Инициализируем параметры обработки действия с объектом
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	Если ЕстьРеквизит(Объект, , "Товары") Тогда
		ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ПараметрыДействия.Вставить("РезервыДляКонтрагента", Объект.Контрагент);
		КонецЕсли;
		
		ПараметрыДействия.Вставить("ИмяСкладаВСтроке", "СкладКомпании");
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, , "Автоработы") Тогда
		ПараметрыДействия.Вставить("ОбъектЗаполненАвтоработами", Объект.Автоработы.Количество() > 0);
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, "ВидРемонта") И НЕ ПараметрыДействия.Свойство("НеРассчитыватьСкидки") Тогда
		ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Объект.ВидРемонта.ТипРемонта <> Перечисления.ТипыРемонта.Платный);
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, "Состояние") Тогда 
		Если Объект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен ИЛИ 
			Объект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда 
			
			МоментЦены = Объект.ДатаОкончания;
		Иначе 	
			МоментЦены = ТекущаяДатаСеанса();	
		КонецЕсли;
		ПараметрыДействия.Вставить("МоментДействияЦены", МоментЦены);
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ИмяРеквизитаСкидкаНаценка"         , "СкидкаНаценка");
	ПараметрыДействия.Вставить("ИмяРеквизитаЗначениеСкидкиНаценки" , "ЗначениеСкидкиНаценки");
	ПараметрыДействия.Вставить("ИмяРеквизитаСуммаСкидкиНаценки"    , "СуммаСкидкиНаценки");
	ПараметрыДействия.Вставить("СкидкаНаРаботы"                    , Ложь);
	
	// Возвращаем сформированную структуру параметров
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ИмяРеквизитаСкидкаНаценка"         , "СкидкаНаценкаРаботы");
	ПараметрыДействия.Вставить("ИмяРеквизитаЗначениеСкидкиНаценки" , "ЗначениеСкидкиНаценкиРабот");
	ПараметрыДействия.Вставить("ИмяРеквизитаСуммаСкидкиНаценки"    , "СуммаСкидкиНаценкиРабот");
	ПараметрыДействия.Вставить("СкидкаНаРаботы"                    , Истина);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("НеСбрасыватьПризнакПересчетаЦен");
	
	// Вызываем общий обработчик действия
	ОбработкаТабличнойЧастиАвтоработы.ПерезаполнитьЦеныТабличнойЧасти(Объект, ПараметрыДействия);
	
	// Пересчитаем начисления сотрудникам
	ПересчетПоказателейНачисленийСотрудникам(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

// Процедура - Записывает в строку текущего пользователя
//
// Параметры:
//  Строка	 - Строка табличной части - строка в которой будет установлен автор
//
Процедура УстановитьАвтораСтроки(Строка, ПараметрыДействия)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	// Проверим наличие заполнения автора строки
	Если Строка.АвторСтроки.Пустая() Тогда
		Строка.АвторСтроки = ТекущийПользователь;
	КонецЕсли;
	
	Если Строка.АвторИзмененияСтроки.Пустая() Тогда
		Строка.АвторИзмененияСтроки = ТекущийПользователь;
	ИначеЕсли НЕ ПараметрыДействия.Свойство("НеИзменятьАвторИзмененияСтроки") Тогда 
		Строка.АвторИзмененияСтроки = ТекущийПользователь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьАвтораСтроки()

Процедура УстановитьПричинуОбращения(Строка, ПараметрыДействия)
	
	Если ЗначениеЗаполнено(Строка.ИдентификаторПричиныОбращения) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторПричиныОбращения = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыДействия,
		"ИдентификаторПричиныОбращения",
		Неопределено
	);
	
	Если Не ИдентификаторПричиныОбращения = Неопределено Тогда
		Строка.ИдентификаторПричиныОбращения = ИдентификаторПричиныОбращения;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
	Если Не Автосервис.ЭтоКомплектацияСборкаАвтомобиля(Объект.ВидРемонта) Тогда
		
		СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "Товары");
		
		ПараметрыДействияРаботы = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект);
		СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействияРаботы, "Автоработы");
		
		ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
		РассчитатьСуммуСкидкиНаценки(Объект);
		
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	// Перезаполним ячейки склада
	ОбработкаТабличнойЧастиТовары.ПерезаполнитьТаблицуРеквизитЯчейка(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаРеквизитаСкладКомпании()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
	// если табличные части не пусты, заполним ставку НДС в табличных частях
	ЗаполнитьСтавкуНДСТабличныхЧастей(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДокументОснованиеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Прописать проверку соответствия реквизитов объекта выбранной хоз.операции
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	Если  ТипЗнч(Объект)=Тип("ДокументОбъект.ЗаказНаряд") Тогда 
		
 		ЗаполнениеИзКомандыСозданияЗаявкиНаРемонт = ПолучитьЗначениеПараметраСтруктуры(Объект.ДополнительныеСвойства, 
			"ЗаполнениеИзКомандыСозданияЗаявкиНаРемонт",
			Ложь
		);  
		Если ЗаполнениеИзКомандыСозданияЗаявкиНаРемонт Тогда 
 
			ПараметрыДействия.Удалить("ТребуетсяУстановкаЦен"); 
		
			Если ПараметрыДействия.Свойство("ТребуетсяУстановкаЦенРабот") Тогда
				ПараметрыДействия.Удалить("ТребуетсяУстановкаЦенРабот");
			КонецЕсли;
		
		КонецЕсли;

	КонецЕсли;
	
	Если Объект.Контрагент.СтатусУчастникаГИСМТ = Перечисления.СтатусыУчастникаОборотаТоваровГИСМТ.НеЗарегистрирован Тогда 
		Объект.ПричинаВыводаИзОборота = Перечисления.ПричиныВыбытияМаркируемойПродукции.ИспользованиеДляСобственныхНужд;
	Иначе 
		Объект.ПричинаВыводаИзОборота = Перечисления.ПричиныВыбытияМаркируемойПродукции.ПустаяСсылка();
	КонецЕсли; 
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ПараметрыДействия.Вставить(
		"ТребуетсяУстановкаЦенРабот",
		ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбъектЗаполненАвтоработами", ИСТИНА));
	
	ПараметрыДействия.Вставить("НеЗаменятьПустуюСкидку", Ложь);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
	Автосервис.УстановитьНормочас(Объект, ПараметрыДействия);
	
	Если  ТипЗнч(Объект)=Тип("ДокументОбъект.ЗаказНаряд") Тогда 
		
 		ЗаполнениеИзКомандыСозданияЗаявкиНаРемонт = ПолучитьЗначениеПараметраСтруктуры(Объект.ДополнительныеСвойства, 
			"ЗаполнениеИзКомандыСозданияЗаявкиНаРемонт",
			Ложь
		); 
		
		Если ЗаполнениеИзКомандыСозданияЗаявкиНаРемонт Тогда		
			ПараметрыДействия.Удалить("ТребуетсяУстановкаЦен");
			ПараметрыДействия.Удалить("ТребуетсяУстановкаЦенРабот")
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыДействия.Удалить("НеЗаменятьПустуюСкидку");

КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Комитент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КомитентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Объект.ДоговорКомитента = ОбработкаРеквизитовДокументаСервер.ПолучитьДоговорВзаиморасчетов(Объект.Комитент, Перечисления.ВидыДоговоров.СКомитентом, Объект, ПараметрыДействия, Истина);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	ЗаполнитьСтавкуНДСТабличныхЧастей(Объект, ПараметрыДействия);
	
	ПараметрыДействия.Вставить(
		"НовыеНастройкиОтправкиЗаказНарядаПоЭДО",
		Справочники.ПодразделенияКомпании.НастройкиОтправкиЗаказНарядаПоЭДО(Объект.ПодразделениеКомпании)
	);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
	//Рез=ЭтотОбъект.ОбработкаРеквизита("РассчитатьСкидкиРабот",ТекСтрока,ЭтаФорма,ДопПараметры) И Рез;
	
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Вид ремонта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВидРемонтаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	БесплатныйВидРемонта = Автосервис.ЭтоБесплатный(Объект.ВидРемонта);
	
	Объект.ВыработкаСотрудниковПоВыполнениюЗаказНаряда = Объект.ВидРемонта.ВыработкаСотрудниковПоВыполнениюЗаказНаряда;
	Объект.СписаниеТоваровПоСебестоимости = Объект.ВидРемонта.СписаниеТоваровПоСебестоимости;
	Объект.СписаниеТоваровПоСебестоимостиВключатьНДС = Объект.ВидРемонта.СписаниеТоваровПоСебестоимостиВключатьНДС;
	
	Если БесплатныйВидРемонта Тогда
		
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			КонтрагентПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
			Объект.ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
			ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
		
		//Если Объект.АвтоЗакрытиеСделок Тогда
		//	Объект.АвтоЗакрытиеСделок = Ложь;
		//КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидРемонта) Тогда
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ПараметрыДействия.Вставить("ПодставлятьКонтрагентаИзЗаказчика", Ложь);
		КонецЕсли;
		
		УстановитьГарантийногоПлательщика(Объект, ПараметрыДействия);
		ПараметрыДействия.Вставить("ВидРемонтаЕстьРаботыПоУмолчанию", Объект.ВидРемонта.Автоработы.Количество() > 0);
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦенРабот",
			ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбъектЗаполненАвтоработами", Истина)
		);
	
	Если БесплатныйВидРемонта Тогда
		
		// !!! RADV Доработать
		//ОбработкаРасчетСкидок.НеРассчитыватьАвтоматическиеСкидки          = Истина;
		//ОбработкаРасчетСкидокАвторабот.НеРассчитыватьАвтоматическиеСкидки = Истина;
		
		//Если Объект.АвтоЗакрытиеСделок Тогда
		//	Объект.АвтоЗакрытиеСделок = Ложь;
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Карточка) Тогда
			Объект.Карточка = Справочники.Карточки.ПустаяСсылка();
			ПараметрыДействия.Вставить("НеЗаменятьПустуюСкидку", Истина);
			КарточкаПриИзменении(Объект, ПараметрыДействия);
			ПараметрыДействия.Удалить("НеЗаменятьПустуюСкидку");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.МаркетинговаяПрограмма) Тогда
			Объект.МаркетинговаяПрограмма = Справочники.МаркетинговыеПрограммы.ПустаяСсылка();
			ПараметрыДействия.Вставить("НеЗаменятьПустуюСкидку",Истина);
			МаркетинговаяПрограммаПриИзменении(Объект, ПараметрыДействия);
			ПараметрыДействия.Удалить("НеЗаменятьПустуюСкидку");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.СкидкаНаценка) Тогда
			Объект.СкидкаНаценка = Справочники.ТипыСкидок.ПустаяСсылка();
			ПараметрыДействия.Вставить("НеЗаменятьПустуюСкидку", Истина);
			СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия);
			ПараметрыДействия.Удалить("НеЗаменятьПустуюСкидку");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.СкидкаНаценкаРаботы) Тогда
			Объект.СкидкаНаценкаРаботы = Справочники.ТипыСкидок.ПустаяСсылка();
			ПараметрыДействия.Вставить("НеЗаменятьПустуюСкидку", Истина);
			СкидкаНаценкаРаботыПриИзменении(Объект, ПараметрыДействия);
			ПараметрыДействия.Удалить("НеЗаменятьПустуюСкидку");
		КонецЕсли;
		
		ПараметрыДействия.Вставить("НеЗаменятьПустуюСкидку",Истина);
		
		Для Каждого Строка Из Объект.Товары Цикл
			
			Строка.СкидкаНаТовар = Справочники.ТипыСкидок.ПустаяСсылка();
			Строка.ПроцентСкидки = 0; Строка.СуммаСкидки = 0;
			Строка.ПроцентСкидкиСтроки = 0; Строка.СуммаСкидкиСтроки = 0;
			
			ТоварыСуммаПриИзменении(Объект, Строка);
			
		КонецЦикла;
		
		Для Каждого Строка Из Объект.Автоработы Цикл
			
			Строка.СкидкаНаТовар = Справочники.ТипыСкидок.ПустаяСсылка();
			Строка.ПроцентСкидки = 0; Строка.СуммаСкидки = 0;
			Строка.ПроцентСкидкиСтроки = 0; Строка.СуммаСкидкиСтроки = 0;
			
			АвтоработыСуммаПриИзменении(Объект, Строка);
			
		КонецЦикла;
		
		ПараметрыДействия.Удалить("НеЗаменятьПустуюСкидку");
		
	Иначе
		
		// !!! RADV Доработать
		//ОбработкаРасчетСкидок.НеРассчитыватьАвтоматическиеСкидки          = Ложь;
		//ОбработкаРасчетСкидокАвторабот.НеРассчитыватьАвтоматическиеСкидки = Ложь;
		
		Если ПараметрыДействия.Свойство("НеЗаменятьПустуюСкидку") Тогда
			ПараметрыДействия.Удалить("НеЗаменятьПустуюСкидку");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидРемонта) Тогда
		Если Объект.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный Тогда
			Объект.НаСебестоимость = Объект.ВидРемонта.НаСебестоимость;
		Иначе
			Объект.НаСебестоимость = Ложь;
		КонецЕсли;
	Иначе
		Объект.НаСебестоимость = Ложь;
	КонецЕсли;
	
	Автосервис.УстановитьНормочас(Объект, ПараметрыДействия); 
	
	// если табличные части не пусты, заполним ставку НДС в табличных частях
	ЗаполнитьСтавкуНДСТабличныхЧастей(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВидРемонтаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цех".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЦехПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если (ЗначениеЗаполнено(Объект.Цех)) И (НЕ ЗначениеЗаполнено(Объект.Мастер)) Тогда
		Объект.Мастер = Объект.Цех.Мастер;
	КонецЕсли;
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦенРабот", ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбъектЗаполнен", ИСТИНА));
	
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "Автоработы");
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Тип цен работ".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенРаботПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ИзменятьВалюту = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИзменятьВалютуИзТипаЦен", Истина);
	
	Если ИзменятьВалюту
		И ЗначениеЗаполнено(Объект.ТипЦенРабот.ВалютаЦены)
		И (Объект.ТипЦенРабот.ВалютаЦены <> Объект.ВалютаДокумента)
		И ПраваИНастройкиПользователя.Значение("ИзменятьВалютуПоКатегорииЦен", Объект) Тогда
		
		Объект.ВалютаДокумента = Объект.ТипЦенРабот.ВалютаЦены;
		ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦенРабот",
		ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбъектЗаполнен", Истина));
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Карточка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КарточкаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КарточкаПриИзменении(Объект, ПараметрыДействия);
	
	Карточка = Объект.Карточка;
	
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "Автоработы");
	
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	ПерерасчетСуммыНачисленийИсполнителям(Объект, Перечисления.СпособыРасчета.Процентом);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Маркетинговая программа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура МаркетинговаяПрограммаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Объект.МаркетинговаяПрограмма.СкидкаНаценка) Тогда
		Объект.СкидкаНаценка = Объект.МаркетинговаяПрограмма.СкидкаНаценка;
		СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.МаркетинговаяПрограмма.СкидкаНаценкаРаботы) Тогда
		Объект.СкидкаНаценкаРаботы = Объект.МаркетинговаяПрограмма.СкидкаНаценкаРаботы;
		СкидкаНаценкаРаботыПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // МаркетинговаяПрограммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Скидка наценка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	Для Каждого Строка Из Объект.Товары Цикл
		Строка.ЗначениеСкидкиШапкиИзменено = Ложь;
	КонецЦикла;
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия);
	
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // СкидкаНаценкаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Мастер".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкаНаценкаРаботыПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	Для Каждого Строка Из Объект.Автоработы Цикл
		Строка.ЗначениеСкидкиШапкиИзменено = Ложь;
	КонецЦикла;
	
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "Автоработы");
	
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	ПерерасчетСуммыНачисленийИсполнителям(Объект, Перечисления.СпособыРасчета.Процентом);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество к списанию".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КоличествоКСписаниюПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	ПерерасчетСуммыНачисленийИсполнителям(Объект, Перечисления.СпособыРасчета.Процентом);
	
КонецПроцедуры // КоличествоКСписаниюПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Нормочас".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура НормочасПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.Нормочас) Тогда
		Возврат;
	КонецЕсли;
	
	// Получим цену нормочаса
	ЦенаНормочаса = ЦенообразованиеСервер.ПолучитьЦенуНормочаса(Объект.Нормочас, Объект.Дата, Объект.ТипЦенРабот);
	Если ЦенаНормочаса.ЦенаБезСкидкиНаценки = 1 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выбран нормочас с ценой 1. Пересчет цен не будет выполнен.'"), Объект.Ссылка, "Нормочас");
		Возврат;
	КонецЕсли;

	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦенРабот", Истина);
		
КонецПроцедуры // ВидРемонтаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Строка.СкладКомпании) Тогда
		
		СкладКомпанииПраво = ПраваИНастройкиПользователя.Значение("ОсновнойСкладКомпании");
		
		// Проверим соответствие организации и склада
		Если Объект.Автор.Организация = СкладКомпанииПраво.Организация Тогда
			Строка.СкладКомпании = СкладКомпанииПраво;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Строка.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Набор Тогда
		ПараметрыДействия.Вставить("ОбновитьИдентификаторыТаблиц" , Истина);
		ПараметрыДействия.Вставить("ИдентификаторПричиныОбращения", Строка.ИдентификаторПричиныОбращения);
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
	// Запишем автора строки
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
	УстановитьПричинуОбращения(Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
	// Запишем автора строки
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
	// Запишем автора строки
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
	// Запишем автора строки
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество базовое" в таблице "Товары".
//
// Параметры:
//  Объект 
//  Строка - строка табличной части
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Запишем автора строки
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
	// Запишем автора строки
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
	// Запишем автора строки
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
	// Запишем автора строки
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Запишем автора строки
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "ГТД" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыГТДПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ГТДПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Запишем автора строки
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Партия" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПартияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПартияПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Запишем автора строки
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
	// Запишем автора строки
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
	// Запишем автора строки
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Скидка на товар" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	Если Объект.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный Тогда
		Строка.СкидкаНаТовар = Справочники.ТипыСкидок.ПустаяСсылка();
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
	// Запишем автора строки
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	Если Строка.ПроцентСкидки > 0 И Объект.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный Тогда
		Строка.ПроцентСкидки = 0;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
	// Запишем автора строки
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	Если Строка.ПроцентСкидкиСтроки > 0 И Объект.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный Тогда
		Строка.ПроцентСкидкиСтроки = 0;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
	// Запишем автора строки
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		Если НЕ ТекущаяСтрока = Строка Тогда
			ТекущаяСтрока.СуммаВсего = ТекущаяСтрока.СуммаВсего + ТекущаяСтрока.СуммаСкидкиБонусами;
		КонецЕсли;
		ТекущаяСтрока.СуммаСкидкиБонусами = 0;
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из Объект.Автоработы Цикл
		ТекущаяСтрока.СуммаВсего          = ТекущаяСтрока.СуммаВсего + ТекущаяСтрока.СуммаСкидкиБонусами;
		ТекущаяСтрока.СуммаСкидкиБонусами = 0;
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтоработы

// Обработчик события возникающего при изменении данных реквизита "Авторабота" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыАвтоработаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиАвтоработы.АвтоработаПриИзменении(Объект, Строка, ПараметрыДействия);
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
	ДанныеРасчетаАвтоработы = Автосервис.ПараметрыРасчетаНачисленийАвтоработы(Объект, Строка);
	АвтосервисКлиентСервер.ПересчитатьСуммуНачисленийСУчетомСпособа(
		Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", Строка.ИдентификаторРаботы)),
		ДанныеРасчетаАвтоработы
	);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Нормочас" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыНормочасПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиАвтоработы.НормочасПриИзменении(Объект, Строка, ПараметрыДействия);
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
	// Пересчитаем данные о начислениях сотрудникам
	ДанныеРасчетаАвтоработы = Автосервис.ПараметрыРасчетаНачисленийАвтоработы(Объект, Строка);
	АвтосервисКлиентСервер.ПересчитатьСуммуНачисленийСУчетомСпособа(
		Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", Строка.ИдентификаторРаботы)),
		ДанныеРасчетаАвтоработы,
		Перечисления.СпособыРасчета.ПоНормочасам
	);
	АвтосервисКлиентСервер.ПересчитатьСуммуНачисленийСУчетомСпособа(
		Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", Строка.ИдентификаторРаботы)),
		ДанныеРасчетаАвтоработы,
		Перечисления.СпособыРасчета.Процентом
	);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Коэффициент" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыКоэффициентПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиАвтоработы.КоэффициентПриИзменении(Объект, Строка, ПараметрыДействия);
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);

	ДанныеРасчетаАвтоработы = Автосервис.ПараметрыРасчетаНачисленийАвтоработы(Объект, Строка);
	АвтосервисКлиентСервер.ПересчитатьСуммуНачисленийСУчетомСпособа(
		Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", Строка.ИдентификаторРаботы)),
		ДанныеРасчетаАвтоработы,
		Перечисления.СпособыРасчета.ПоНормочасам
	);
	АвтосервисКлиентСервер.ПересчитатьСуммуНачисленийСУчетомСпособа(
		Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", Строка.ИдентификаторРаботы)),
		ДанныеРасчетаАвтоработы,
		Перечисления.СпособыРасчета.Процентом
	);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиАвтоработы.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
	ДанныеРасчетаАвтоработы = Автосервис.ПараметрыРасчетаНачисленийАвтоработы(Объект, Строка);
	АвтосервисКлиентСервер.ПересчитатьСуммуНачисленийСУчетомСпособа(
		Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", Строка.ИдентификаторРаботы)),
		ДанныеРасчетаАвтоработы,
		Перечисления.СпособыРасчета.ПоНормочасам
	);
	АвтосервисКлиентСервер.ПересчитатьСуммуНачисленийСУчетомСпособа(
		Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", Строка.ИдентификаторРаботы)),
		ДанныеРасчетаАвтоработы,
		Перечисления.СпособыРасчета.Процентом
	);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиАвтоработы.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
	ДанныеРасчетаАвтоработы = Автосервис.ПараметрыРасчетаНачисленийАвтоработы(Объект, Строка);
	АвтосервисКлиентСервер.ПересчитатьСуммуНачисленийСУчетомСпособа(
		Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", Строка.ИдентификаторРаботы)),
		ДанныеРасчетаАвтоработы,
		Перечисления.СпособыРасчета.Процентом
	);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиАвтоработы.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
	ДанныеРасчетаАвтоработы = Автосервис.ПараметрыРасчетаНачисленийАвтоработы(Объект, Строка);
	АвтосервисКлиентСервер.ПересчитатьСуммуНачисленийСУчетомСпособа(
		Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", Строка.ИдентификаторРаботы)),
		ДанныеРасчетаАвтоработы,
		Перечисления.СпособыРасчета.Процентом
	);
	
КонецПроцедуры

Процедура АвтоработыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиАвтоработы.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	ДанныеРасчетаАвтоработы = Автосервис.ПараметрыРасчетаНачисленийАвтоработы(Объект, Строка);
	АвтосервисКлиентСервер.ПересчитатьСуммуНачисленийСУчетомСпособа(
		Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", Строка.ИдентификаторРаботы)),
		ДанныеРасчетаАвтоработы,
		Перечисления.СпособыРасчета.Процентом
	);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиАвтоработы.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Запишем автора строки
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки строки" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыСуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);

	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиАвтоработы.СуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
	ДанныеРасчетаАвтоработы = Автосервис.ПараметрыРасчетаНачисленийАвтоработы(Объект, Строка);
	АвтосервисКлиентСервер.ПересчитатьСуммуНачисленийСУчетомСпособа(
		Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", Строка.ИдентификаторРаботы)),
		ДанныеРасчетаАвтоработы,
		Перечисления.СпособыРасчета.Процентом
	);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиАвтоработы.СуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
	ДанныеРасчетаАвтоработы = Автосервис.ПараметрыРасчетаНачисленийАвтоработы(Объект, Строка);
	АвтосервисКлиентСервер.ПересчитатьСуммуНачисленийСУчетомСпособа(
		Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", Строка.ИдентификаторРаботы)),
		ДанныеРасчетаАвтоработы,
		Перечисления.СпособыРасчета.Процентом
	);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Скидка на товар" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыСкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиАвтоработы.СкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия);
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
	ДанныеРасчетаАвтоработы = Автосервис.ПараметрыРасчетаНачисленийАвтоработы(Объект, Строка);
	АвтосервисКлиентСервер.ПересчитатьСуммуНачисленийСУчетомСпособа(
		Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", Строка.ИдентификаторРаботы)),
		ДанныеРасчетаАвтоработы,
		Перечисления.СпособыРасчета.Процентом
	);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиАвтоработы.ПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
	ДанныеРасчетаАвтоработы = Автосервис.ПараметрыРасчетаНачисленийАвтоработы(Объект, Строка);
	АвтосервисКлиентСервер.ПересчитатьСуммуНачисленийСУчетомСпособа(
		Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", Строка.ИдентификаторРаботы)),
		ДанныеРасчетаАвтоработы,
		Перечисления.СпособыРасчета.Процентом
	);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки строки" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиАвтоработы.ПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
	ДанныеРасчетаАвтоработы = Автосервис.ПараметрыРасчетаНачисленийАвтоработы(Объект, Строка);
	АвтосервисКлиентСервер.ПересчитатьСуммуНачисленийСУчетомСпособа(
		Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", Строка.ИдентификаторРаботы)),
		ДанныеРасчетаАвтоработы,
		Перечисления.СпособыРасчета.Процентом
	);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	Для Каждого ТекущаяСтрока Из Объект.Автоработы Цикл
		
		Если ТекущаяСтрока <> Строка Тогда
			
			ТекущаяСтрока.СуммаВсего = ТекущаяСтрока.СуммаВсего + ТекущаяСтрока.СуммаСкидкиБонусами;
			
		КонецЕсли;
		
		ТекущаяСтрока.СуммаСкидкиБонусами = 0;
		
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		
		ТекущаяСтрока.СуммаВсего 			= ТекущаяСтрока.СуммаВсего + ТекущаяСтрока.СуммаСкидкиБонусами;
		ТекущаяСтрока.СуммаСкидкиБонусами 	= 0;
		
	КонецЦикла;
	
	ОбработкаТабличнойЧастиАвтоработы.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	ДанныеРасчетаАвтоработы = Автосервис.ПараметрыРасчетаНачисленийАвтоработы(Объект, Строка);
	АвтосервисКлиентСервер.ПересчитатьСуммуНачисленийСУчетомСпособа(
		Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", Строка.ИдентификаторРаботы)),
		ДанныеРасчетаАвтоработы,
		Перечисления.СпособыРасчета.Процентом
	);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Способ расчета стоимости работы" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыСпособРасчетаСтоимостиРаботыПриИзменени(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиАвтоработы.РасчетСтоимостиРаботыПриИзменении(Объект, Строка, ПараметрыДействия);
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
	ДанныеРасчетаАвтоработы = Автосервис.ПараметрыРасчетаНачисленийАвтоработы(Объект, Строка);
	АвтосервисКлиентСервер.ПересчитатьСуммуНачисленийСУчетомСпособа(
		Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", Строка.ИдентификаторРаботы)),
		ДанныеРасчетаАвтоработы,
		Перечисления.СпособыРасчета.Процентом
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалыЗаказчика

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Материалы заказчика".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура МатериалыЗаказчикаНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Если Номенклатура не "строка"
	Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		// проверим а не набор ли у нас...
		Если Строка.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Набор Тогда
			ОбработкаТабличнойЧастиТовары.РазложитьНаборНаСтроки(Объект, Строка, ПараметрыДействия,"МатериалыЗаказчика");
			Возврат;
		КонецЕсли;
		
		// Вызываем общий обработчик события
		ОбработкаТабличнойЧастиТовары.ОбработатьИзменениеНоменклатура(Объект, Строка, ПараметрыДействия, "МатериалыЗаказчика");

	Иначе 
		
		Строка.ВладелецХарактеристики = Неопределено;
		Строка.ВладелецЕдиницыИзмерения = Неопределено;
		
	КонецЕсли;
	
	// Запишем автора строки
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дельнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Материалы заказчика".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура МатериалыЗаказчикаХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ОбработатьИзменениеХарактеристикаНоменклатуры(Объект, Строка, ПараметрыДействия, "МатериалыЗаказчика");
	
	// Запишем автора строки
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Материалы заказчика".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура МатериалыЗаказчикаЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ОбработатьИзменениеЕдиницаИзмерения(Объект, Строка, ПараметрыДействия, "МатериалыЗаказчика");
	
	// Запишем автора строки
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Материалы заказчика".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура МатериалыЗаказчикаКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Запишем автора строки
	УстановитьАвтораСтроки(Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВспомогательныеАвтоработы

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ВспомогательныеАвтоработыАвтоработаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПустаяСтрока(Строка.ИдентификаторРаботы) Тогда
		Строка.ИдентификаторРаботы = Новый УникальныйИдентификатор();
	КонецЕсли;
	
	ДанныеАвтомобиляСводногоРемонтногоЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.СводныйРемонтныйЗаказ.Автомобиль, "Модель,ВариантКомплектации");
	
	Если НЕ ЗначениеЗаполнено(ДанныеАвтомобиляСводногоРемонтногоЗаказа.ВариантКомплектации) Тогда
		ФильтрНормыВремени = ДанныеАвтомобиляСводногоРемонтногоЗаказа.Модель;
	Иначе
		ФильтрНормыВремени = ДанныеАвтомобиляСводногоРемонтногоЗаказа.ВариантКомплектации;
	КонецЕсли;
	
	Строка.НормаВремени = ЦенообразованиеСервер.НормаВремениАвтоработы(Строка.Авторабота, ФильтрНормыВремени);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнители

// Обработчик события возникающего при изменении данных реквизита "Исполнитель" в таблице "Исполнители".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ИсполнителиИсполнительПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Строка.Цех) Тогда
		Если ЗначениеЗаполнено(Строка.Исполнитель.Цех) Тогда
			Строка.Цех = Строка.Исполнитель.Цех;
		Иначе
			Строка.Цех = Объект.Цех;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПричиныОбращения

// Обработчик события возникающего при изменении данных реквизита в таблице "Причины обращения".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ПричиныОбращенияПричинаОбращенияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.ВидРемонта) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВидРемонта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ПричинаОбращения, "ВидРемонта");
	
	Если ЗначениеЗаполнено(ВидРемонта) Тогда
		
		Объект.ВидРемонта = ВидРемонта;
		ВидРемонтаПриИзменении(Объект, ПараметрыДействия);
		ПараметрыДействия.Вставить("ИзменилсяВидРемонта", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗачетАвансов

// Обработчик события возникающего при изменении данных реквизита "Документ аванса" в таблице "ЗачетАвансов".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЗачетАвансовДокументАвансаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	РасчетыСКонтрагентамиСервер.ДокументАвансаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаказНаряд",
		"Приложение1",
		НСтр("ru = 'Заявка предварительная'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаказНаряд",
		"АктОсмотра",
		НСтр("ru = 'Акт осмотра'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаказНаряд",
		"ЗаказНарядДоговор",
		НСтр("ru = 'Заказ-наряд договор'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаказНаряд",
		"ЗаказНаряд",
		НСтр("ru = 'Заказ-наряд'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаказНаряд",
		"АктПриема",
		НСтр("ru = 'Акт приема'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаказНаряд",
		"СопроводительныйЛист",
		НСтр("ru = 'Сопроводительный лист'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаказНаряд",
		"ЗаявкаНаДетали",
		НСтр("ru = 'Заявка на детали'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаказНаряд",
		"Квитанция",
		НСтр("ru = 'Квитанция к заказ-наряду'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаказНаряд",
		"БланкЗаявки",
		НСтр("ru = 'Бланк заявки'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаказНаряд",
		"РабочаяЗаявка",
		НСтр("ru = 'Рабочая заявка'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаказНаряд",
		"ПриемныйАкт",
		НСтр("ru = 'Приемный акт'"),
		СсылкаНаДокумент);
			
	Обработчик = ?(
		ПраваИНастройкиПользователя.Значение("ЗапросВалютыПечатногоДокумента"),
		"УправлениеПечатьюАвтосалонКлиент.НачатьВыборВалютыДляПечати",
		"");
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаказНаряд",
		"АктСдачи",
		НСтр("ru = 'Акт сдачи'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ12",
		НСтр("ru = 'ТОРГ-12 (Товарная накладная)'"),
		СсылкаНаДокумент);
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаказНаряд",
		"АктОбОказанииУслуг",
		НСтр("ru = 'Акт об оказании услуг'"),
		СсылкаНаДокумент,
		Обработчик);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаказНаряд",
		"АктОбОказанииУслугУслугиИМатериалы",
		НСтр("ru = 'Акт об оказании услуг (услуги + материалы)'"),
		СсылкаНаДокумент,
		Обработчик);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаказНаряд",
		"АктОбОказанииУслугУслугиТоварыРазвернуто",
		НСтр("ru = 'Акт об оказании услуг (с товарами развернуто)'"),
		СсылкаНаДокумент,
		Обработчик);
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьУПД",
		"ПФ_MXL_УПД",
		НСтр("ru = 'Универсальный передаточный документ'"),
		СсылкаНаДокумент);
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"ШаблонаЗаказНарядДоговор",
		НСтр("ru = 'Заказ-наряд (шаблон)'"),
		СсылкаНаДокумент,
		"АвтомобилиКлиент.ПечатьШаблонаЗаказНаряда");
		
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик события формирования печатной формы.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - информация для заполнения письма при отправке печатной формы электронной почтой.
//                                     Содержит следующие поля:
//    ** Получатель - Строка, СписокЗначений, Массив - список получателей письма;
//    ** Тема - Строка - Тема письма,
//    ** Текст - Строка - Текст письма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Приложение1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"Приложение1",
			НСтр("ru = 'Заявка предварительная'"),
			ПечатьПриложение1(МассивОбъектов, ОбъектыПечати)
		);
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктОсмотра") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"АктОсмотра",
			НСтр("ru = 'Акт осмотра'"),
			ПечатьАктОсмотра(МассивОбъектов, ОбъектыПечати)
		);
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказНарядДоговор") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ЗаказНарядДоговор",
			НСтр("ru = 'Заказ-наряд договор'"),
			ПечатьЗаказНарядДоговор(МассивОбъектов, ОбъектыПечати)
		);
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктПриема") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"АктПриема",
		НСтр("ru = 'Акт приема'"),
		ПечатьАктПриема(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СопроводительныйЛист") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"СопроводительныйЛист",
		НСтр("ru = 'Сопроводительный лист'"),
		ПечатьСопроводительныйЛист(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявкаНаДетали") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"ЗаявкаНаДетали",
		НСтр("ru = 'Заявка на детали'"),
		ПечатьЗаявкаНаДетали(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Квитанция") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"Квитанция",
		НСтр("ru = 'Квитанция к заказ-наряду'"),
		ПечатьКвитанция(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "БланкЗаявки") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"БланкЗаявки",
		НСтр("ru = 'Бланк заявки'"),
		ПечатьБланкЗаявки(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РабочаяЗаявка") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"РабочаяЗаявка",
		НСтр("ru = 'Рабочая заявка'"),
		ПечатьРабочаяЗаявка(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказНаряд") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"ЗаказНаряд",
		"Заказ-наряд",
		ПечатьЗаказНаряд(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПриемныйАкт") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"ПриемныйАкт",
		НСтр("ru = 'Приемный акт'"),
		ПечатьПриемныйАкт(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСдачи") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"АктСдачи",
		НСтр("ru = 'Акт сдачи'"),
		ПечатьАктСдачи(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктОбОказанииУслуг") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"АктОбОказанииУслуг",
		НСтр("ru = 'Акт об оказании услуг'"),
		ПечатьАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктОбОказанииУслугУслугиИМатериалы") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"АктОбОказанииУслугУслугиИМатериалы",
			НСтр("ru = 'Акт об оказании услуг(услуги + материалы)'"),
			ПечатьАктОбОказанииУслугУслугиИМатериалы(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктОбОказанииУслугУслугиТоварыРазвернуто") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"АктОбОказанииУслугУслугиТоварыРазвернуто",
			НСтр("ru = 'Акт об оказании услуг(с товарами развернуто)'"),
			ПечатьАктОбОказанииУслугУслугиТоварыРазвернуто(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

Функция ПолучитьДанныеДляПечатиТОРГ12(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	// данные документа
	Дата              = ?(ЗначениеЗаполнено(Объект.ДатаЗакрытия), Объект.ДатаЗакрытия, Объект.Дата);
	Если  ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда 
		ДокументОснование = Объект.ДоговорВзаиморасчетов; 
		ОснованиеДата = Формат(Объект.ДоговорВзаиморасчетов.ДатаНачала, "ЧЦ=; ДФ=dd.MM.yyyy");
		ОснованиеНомер = Объект.ДоговорВзаиморасчетов.НомерДоговора;
	Иначе
		ДокументОснование = Объект;
		ОснованиеДата = Дата;
		ОснованиеНомер = Объект.Номер;
	КонецЕсли;
		
	ДанныеОбъекта.Вставить("Организация",            Объект.Организация);
	ДанныеОбъекта.Вставить("ВалютаДокумента",        Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента",          Объект.КурсДокумента);
	ДанныеОбъекта.Вставить("Дата",                   Дата);
	ДанныеОбъекта.Вставить("ДокументОснование",      ДокументОснование);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании",  Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("ОснованиеДата",          ОснованиеДата);
	ДанныеОбъекта.Вставить("ОснованиеНомер",         ОснованиеНомер);
	ДанныеОбъекта.Вставить("КодПоОКПО",              Объект.Организация.КодПоОКПО);
	ДанныеОбъекта.Вставить("РасчетныйСчетДокумента", "");

	// Выборка товаров
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказНарядТовары.НомерСтроки КАК НомерСтроки,
	               |	ЗаказНарядТовары.Номенклатура КАК Номенклатура,
	               |	ЗаказНарядТовары.Количество КАК Количество,
	               |	ЗаказНарядТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ЗаказНарядТовары.Коэффициент КАК Коэффициент,
	               |	ЗаказНарядТовары.Цена КАК Цена,
	               |	ЗаказНарядТовары.Сумма КАК Сумма,
	               |	ЗаказНарядТовары.СтавкаНДС КАК СтавкаНДС,
	               |	ЗаказНарядТовары.СуммаНДС КАК СуммаНДС,
	               |	ЗаказНарядТовары.ПроцентСкидки КАК ПроцентСкидки,
	               |	ЗаказНарядТовары.СуммаСкидки КАК СуммаСкидки,
	               |	ЗаказНарядТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ЗаказНарядТовары.СуммаВсего КАК СуммаВсего,
	               |	ЗаказНарядТовары.СкладКомпании КАК СкладКомпании,
	               |	ЗаказНарядТовары.СкидкаНаТовар КАК СкидкаНаТовар,
	               |	ЗаказНарядТовары.ПроцентСкидкиСтроки КАК ПроцентСкидкиСтроки,
	               |	ЗаказНарядТовары.СуммаСкидкиСтроки КАК СуммаСкидкиСтроки,
	               |	ЗаказНарядТовары.ПримечаниеНоменклатураПечать КАК ПримечаниеНоменклатураПечать,
	               |	ЗаказНарядТовары.ПримечаниеНоменклатура КАК ПримечаниеНоменклатура,
	               |	ЗаказНарядТовары.ИдентификаторПричиныОбращения КАК ИдентификаторПричиныОбращения,
	               |	ЗаказНарядТовары.СуммаСкидкиБонусами КАК СуммаСкидкиБонусами,
	               |	ЗаказНарядТовары.УправляющийКод КАК УправляющийКод,
	               |	ЗаказНарядТовары.АвторСтроки КАК АвторСтроки,
	               |	ЗаказНарядТовары.АвторИзмененияСтроки КАК АвторИзмененияСтроки,
	               |	ЗаказНарядТовары.ИсточникПродажи КАК ИсточникПродажи,
	               |	ЗаказНарядТовары.ЗначениеСкидкиШапкиИзменено КАК ЗначениеСкидкиШапкиИзменено,
	               |	ЗаказНарядТовары.ЗначениеСкидкиСтрокиИзменено КАК ЗначениеСкидкиСтрокиИзменено,
	               |	ЗаказНарядТовары.Номенклатура.Артикул КАК Код,
	               |	ЗаказНарядТовары.СуммаВсего - ЗаказНарядТовары.СуммаНДС КАК СуммаБезНДС
	               |ИЗ
	               |	Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
	               |ГДЕ
	               |	ЗаказНарядТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Товары = Запрос.Выполнить().Выгрузить(); 
	
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти",  Товары);
		
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПоставщикКонтрагент);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Плательщик);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства);

	ДатаОтгрузки = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", ЗначенияСвойствОбъекта);
	ДанныеОбъекта.Вставить("ДатаОтгрузки",
		?(НЕ ЗначениеЗаполнено(ДатаОтгрузки), """___""____________ 20___", Формат(ДатаОтгрузки, "ДЛФ=DD"))
	);
	ДанныеОбъекта.Вставить("Поставщик"             , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ПоставщикКонтрагент", ЗначенияСвойствОбъекта,Объект.Организация));
	ДанныеОбъекта.Вставить("Плательщик"            , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Плательщик", ЗначенияСвойствОбъекта,Объект.Контрагент));
		
	ДанныеОбъекта.Вставить("Грузоотправитель"      , ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, Объект.Организация));
	ДанныеОбъекта.Вставить("Грузополучатель"       , ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, Объект.Контрагент));
	
	ДанныеОбъекта.Вставить("ГрузополучательПоОКПО" , ДанныеОбъекта.Грузополучатель.КодПоОКПО);
	ДанныеОбъекта.Вставить("ПоставщикПоОКПО"       , ДанныеОбъекта.Поставщик.КодПоОКПО);
	ДанныеОбъекта.Вставить("ПлательщикПоОКПО"      , ?(ТипЗнч(ДанныеОбъекта.Плательщик) = Тип("СправочникСсылка.ПодразделенияКомпании"), ДанныеОбъекта.Плательщик.Организация.КодПоОКПО, ДанныеОбъекта.Плательщик.КодПоОКПО));
	
	ДанныеОбъекта.Вставить("Руководитель"     	   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Руководитель"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 	   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Отпустил"         	   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Отпустил"));
	ДанныеОбъекта.Вставить("Принял"         	   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Принял"));
	ДанныеОбъекта.Вставить("Получил"          	   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Получил"));

	Возврат ДанныеОбъекта;
	
КонецФункции

// функция получения данных для УПД
Функция ПолучитьДанныеДляПечатиУПД(Объект) Экспорт
	
	ДокументФактура = ЗащищенныеФункцииСервер.ПодчиненныйСчетФактураВыданный(Объект.Ссылка).СчетФактура;
	ДанныеОбъекта = Новый Структура();
	
	// Сформируем статус документа
	Если ЗначениеЗаполнено(ДокументФактура) Тогда
		Статус = 1;
		ДокументОбъект = ДокументФактура;
	Иначе
		Статус = 2;
		ДокументОбъект = Объект;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если Объект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен
		ИЛИ Объект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
		
		Если ДокументФактура <> Документы.СчетФактураВыданный.ПустаяСсылка() И НЕ ДокументФактура.ПометкаУдаления Тогда
			СчетФактураТовары = ДокументФактура.Товары;
		Иначе
			УстановитьПривилегированныйРежим(Истина);
			ВремСчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
			ВремСчетФактура.Заполнить(Объект.Ссылка);
			СчетФактураТовары = ВремСчетФактура.Товары;
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		ТаблицаТоваров = СчетФактураТовары.Выгрузить();
		ТаблицаТоваров.Колонки.Добавить("ТоварКод", Новый ОписаниеТипов("Строка"));
		Для Каждого СтрокаТЧ Из ТаблицаТоваров Цикл
			СтрокаТЧ.ТоварКод = СтрокаТЧ.Номенклатура.Артикул;
		КонецЦикла;
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
			|	ЗаказНарядТовары.Номенклатура,
			|	ЗаказНарядТовары.Количество,
			|	ЗаказНарядТовары.ЕдиницаИзмерения,
			|	ЗаказНарядТовары.Коэффициент,
			|	ЗаказНарядТовары.Цена,
			|	ЗаказНарядТовары.Сумма,
			|	ЗаказНарядТовары.СтавкаНДС,
			|	ЗаказНарядТовары.СуммаНДС,
			|	ЗаказНарядТовары.СуммаВсего,
			|	ЗаказНарядТовары.Номенклатура.Артикул КАК ТоварКод,
			|	0 КАК Порядок,
			|	ЗаказНарядТовары.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
			|ГДЕ
			|	ЗаказНарядТовары.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗаказНарядАвтоработы.Авторабота,
			|	ЗаказНарядАвтоработы.Количество,
			|	ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка),
			|	ЗаказНарядАвтоработы.Коэффициент,
			|	ЗаказНарядАвтоработы.Цена,
			|	ЗаказНарядАвтоработы.Сумма,
			|	ЗаказНарядАвтоработы.СтавкаНДС,
			|	ЗаказНарядАвтоработы.СуммаНДС,
			|	ЗаказНарядАвтоработы.СуммаВсего,
			|	ЗаказНарядАвтоработы.Авторабота.Артикул,
			|	1,
			|	ЗаказНарядАвтоработы.НомерСтроки
			|ИЗ
			|	Документ.ЗаказНаряд.Автоработы КАК ЗаказНарядАвтоработы
			|ГДЕ
			|	ЗаказНарядАвтоработы.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок,
			|	НомерСтроки";
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	МассивНомеровСтрок = Новый Массив;
	НомерСтроки = 1;
	
	Пока НомерСтроки <= ТаблицаТоваров.Количество() Цикл
		
		МассивНомеровСтрок.Добавить(НомерСтроки);
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ТаблицаТоваров.ЗагрузитьКолонку(МассивНомеровСтрок, "НомерСтроки");
	
	// данные документа
	Если Статус = 1 Тогда
		ДатаЗакрытияИтог = ДокументОбъект.Дата;
	Иначе
		ДатаЗакрытияИтог  = ?(ЗначениеЗаполнено(ДокументОбъект.ДатаЗакрытия), ДокументОбъект.ДатаЗакрытия, ДокументОбъект.Дата);
	КонецЕсли;

	ДанныеОбъекта.Вставить("Дата"                   	, ?(Статус = 2, ДатаЗакрытияИтог, ДокументОбъект.Дата));
	ДанныеОбъекта.Вставить("Номер"                  	, УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ДокументОбъект));
	ДанныеОбъекта.Вставить("ХозОперация"            	, ДокументОбъект.ХозОперация);
	ДанныеОбъекта.Вставить("ДокументОснование"      	, ДокументОбъект.ДокументОснование);
	ДанныеОбъекта.Вставить("ВалютаДокумента"      		, ДокументОбъект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"      		, ДокументОбъект.КурсДокумента);
	ДанныеОбъекта.Вставить("ТипЦен"      				, ДокументОбъект.ТипЦен);
	ДанныеОбъекта.Вставить("Поставщик"              	, ДокументОбъект.Организация);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  	, ДокументОбъект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("Покупатель"              	, ДокументОбъект.Контрагент);
	ДанныеОбъекта.Вставить("Организация"              	, Объект.Организация);
	ДанныеОбъекта.Вставить("ДоговорВзаиморасчетов"     	, ?(ЗначениеЗаполнено(ДокументОбъект.ДоговорВзаиморасчетов), Объект.ДоговорВзаиморасчетов, "--"));
	ДанныеОбъекта.Вставить("Товары"              		, ТаблицаТоваров);
	ДанныеОбъекта.Вставить("СуммаДокумента"             , ДокументОбъект.СуммаДокумента);
	ДанныеОбъекта.Вставить("Статус"              		, Статус);
	ДанныеОбъекта.Вставить("ИдентификаторГосударственногоКонтракта", Объект.ИдентификаторГосударственногоКонтракта);
	ДанныеОбъекта.Вставить("ДокументОтгрузки", ?(Статус = 1, ДокументОбъект.ДокументОснование, Объект.Ссылка));
	ДанныеОбъекта.Вставить("ТаблицаРНПТ", УправлениеДиалогомДокументаСервер.РНПТПрослеживаемыхТоваров(Объект.Ссылка));
	
	Если Статус = 1 Тогда
		ДанныеОбъекта.Вставить("НомерИсправления"       	, ?(ЗначениеЗаполнено(ДокументОбъект.НомерИсправления), ДокументОбъект.НомерИсправления, "--"));
		ДанныеОбъекта.Вставить("ДатаИсправления"        	, ?(ЗначениеЗаполнено(ДокументОбъект.Дата), ДокументОбъект.Дата, "--"));
		ДанныеОбъекта.Вставить("ПлатежноРасчетныеДокументы" , ДокументОбъект.ПлатежноРасчетныеДокументы);
	КонецЕсли;
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки);
		
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства);
	
	ДанныеОбъекта.Вставить("ДатаОтгрузки", УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", 
		ЗначенияСвойствОбъекта, Объект.ДатаЗакрытия));

	ДанныеОбъекта.Вставить("Грузоотправитель", ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, ДокументОбъект.Организация));
	Если Статус = 1 Тогда    
		ДанныеОбъекта.Вставить("Грузополучатель", 
			?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, ДокументОбъект.Контрагент)); 
	Иначе
		ДанныеОбъекта.Вставить("Грузополучатель", 
			?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, ДокументОбъект.СводныйРемонтныйЗаказ.Заказчик)); 
	КонецЕсли;
		
		
	ДанныеОбъекта.Вставить("Руководитель"     	     , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Руководитель"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Отпустил"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Отпустил"));
	ДанныеОбъекта.Вставить("Получил"          		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Получил"));
	ДанныеОбъекта.Вставить("Менеджер"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Менеджер"));
	
	Возврат ДанныеОбъекта;
	
КонецФункции


////РАСШИРЕНЫЙ ПЕРЕЧЕНЬ ПЕЧАТНЫХ ФОРМ

// Формирует печатную форму "Приложение1"
// Возвращает сформированный табличный документ:
Функция ПечатьПриложение1(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		ФорматПредставленияГодаВыпускаАвтомобиля = АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Документ);
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаряд.ПФ_MXL_Приложение1");
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
					
		НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		
		// Вывод шапки документа
		ОбластьШапка.Параметры.Организация = Документ.Организация;
		ОбластьШапка.Параметры.ФирмаПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация, Документ.Дата);
		ОбластьШапка.Параметры.ФирмаАдресЮридический   = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.ПодразделениеКомпании, Справочники.ВидыКонтактнойИнформации.ЮрАдресПодразделенияКомпании, ТекущаяДатаСеанса());
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ДляПечати = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьШапка.Параметры.ФирмаАдресЮридический = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Организация, Новый Структура("АдресЮридический", " "), ДополнительныеПараметры);
		
		ОбластьШапка.Параметры.ФирмаТелефоны = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Организация, Новый Структура("ТелефонРабочий", " "), ДополнительныеПараметры);

		
		ОбластьШапка.Параметры.НомерДок = НомерДляПечати;
		ОбластьШапка.Параметры.ДатаДок  = Формат(Документ.ДатаСоздания, "ДФ = дд.ММ.гггг");
		
		ОбластьШапка.Параметры.Заказчик = Документ.СводныйРемонтныйЗаказ.Заказчик;
		ОбластьШапка.Параметры.ЗаказчикПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СводныйРемонтныйЗаказ.Заказчик, Документ.Дата);
		ОбластьШапка.Параметры.ЗаказчикАдресПочтовый      = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.СводныйРемонтныйЗаказ.Заказчик, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.ЗаказчикТелефоны           = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.СводныйРемонтныйЗаказ.Заказчик, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		
		ОбластьШапка.Параметры.Контрагент = Документ.Контрагент;
		ОбластьШапка.Параметры.КонтрагентПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент, Документ.Дата);
		ОбластьШапка.Параметры.КонтрагентИНН = Документ.Контрагент.ИНН;
		ОбластьШапка.Параметры.КонтрагентАдресЮридический = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.КонтрагентТелефоны         = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		
		Автомобиль = Документ.СводныйРемонтныйЗаказ.Автомобиль;
		
		Если ЗначениеЗаполнено(Автомобиль) Тогда
			ОбластьШапка.Параметры.Автомобиль = Автомобиль;
			ОбластьШапка.Параметры.АвтомобильКод = Автомобиль.VIN;
			ОбластьШапка.Параметры.АвтомобильМодель = Автосервис.МаркаМодельАвтомобиля(Автомобиль);
			ОбластьШапка.Параметры.АвтомобильГодВыпуска = Формат(Автомобиль.ГодВыпуска, АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Документ));
			ОбластьШапка.Параметры.АвтомобильНомерДвигателя = Автомобиль.НомерДвигателя;
			ОбластьШапка.Параметры.АвтомобильНомерШасси = Автомобиль.НомерШасси;
			ОбластьШапка.Параметры.АвтомобильНомерКузова = Автомобиль.НомерКузова;
			ОбластьШапка.Параметры.АвтомобильЦвет = Автомобиль.Цвет;
			
			ОбластьШапка.Параметры.АвтомобильГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер, Документ.ДатаСоздания);
			ОбластьШапка.Параметры.АвтомобильТехПаспорт = СокрЛП(Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ТехПаспорт,Документ.ДатаСоздания));
			
			Пробег = ?(Документ.Пробег > Документ.СводныйРемонтныйЗаказ.Пробег, 
						Документ.Пробег, 
						Документ.СводныйРемонтныйЗаказ.Пробег);
			ОбластьШапка.Параметры.АвтомобильПробег = Формат(Пробег, "ЧЦ=10");
		КонецЕсли;
		
	   	ОбластьШапка.Параметры.ПричинаОбращения = СтрСоединить(


			Документ.ПричиныОбращения.Выгрузить().ВыгрузитьКолонку("ПричинаОбращенияСодержание"),
			", "
		);
		ОбластьШапка.Параметры.Мастер = Документ.Мастер;
		ОбластьШапка.Параметры.МастерПолноеНаименование = Документ.Мастер.Наименование;
		ОбластьШапка.Параметры.ДатаДок = Формат(Документ.ДатаСоздания, "ДЛФ=DD");
		ОбластьШапка.Параметры.ТекВремя = Формат(ТекущаяДатаСеанса(), "ДФ = ЧЧ.мм.сс");
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Документ);
		
		
	КонецЦикла;
	
	ТабличныйДокумент.Автомасштаб = Истина;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаряд_Приложение1";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "АктОсмотра"
// Возвращает сформированный табличный документ:
Функция ПечатьАктОсмотра(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		ФорматПредставленияГодаВыпускаАвтомобиля = АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Документ);
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаряд.ПФ_MXL_АктОсмотра");
		
		ОбластьШапка  = Макет.ПолучитьОбласть("Шапка");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		
		НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		
		// Вывод шапки документа
		ОбластьШапка.Параметры.Организация = Документ.Организация;
		ОбластьШапка.Параметры.ФирмаПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация, Документ.Дата);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ДляПечати = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьШапка.Параметры.ФирмаАдресЮридический = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Организация, Новый Структура("АдресЮридический", " "), ДополнительныеПараметры);
		
		ОбластьШапка.Параметры.ФирмаТелефоны = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Организация, Новый Структура("ТелефонРабочий", " "), ДополнительныеПараметры);
		
		ОбластьШапка.Параметры.НомерДок = НомерДляПечати;
		ОбластьШапка.Параметры.ДатаДок = Формат(Документ.ДатаСоздания, "ДФ = дд.ММ.гггг");
		ОбластьШапка.Параметры.Заказчик = Документ.СводныйРемонтныйЗаказ.Заказчик;
		ОбластьШапка.Параметры.ЗаказчикПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СводныйРемонтныйЗаказ.Заказчик, Документ.Дата);
		ОбластьШапка.Параметры.ЗаказчикАдресПочтовый = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.СводныйРемонтныйЗаказ.Заказчик, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.ЗаказчикТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.СводныйРемонтныйЗаказ.Заказчик, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.Контрагент = Документ.Контрагент;
		ОбластьШапка.Параметры.КонтрагентПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент, Документ.Дата);
		ОбластьШапка.Параметры.КонтрагентИНН = Документ.Контрагент.ИНН;
		ОбластьШапка.Параметры.КонтрагентАдресЮридический = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.КонтрагентТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		
		Автомобиль = Документ.СводныйРемонтныйЗаказ.Автомобиль;
		
		Если ЗначениеЗаполнено(Автомобиль) Тогда
			ОбластьШапка.Параметры.Автомобиль = Автомобиль;
			ОбластьШапка.Параметры.АвтомобильКод = Автомобиль.VIN;
			ОбластьШапка.Параметры.АвтомобильМодель = Автосервис.МаркаМодельАвтомобиля(Автомобиль);
			ОбластьШапка.Параметры.АвтомобильГодВыпуска = Формат(Автомобиль.ГодВыпуска, АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Документ));
			ОбластьШапка.Параметры.АвтомобильНомерДвигателя = Автомобиль.НомерДвигателя;
			ОбластьШапка.Параметры.АвтомобильНомерШасси = Автомобиль.НомерШасси;
			ОбластьШапка.Параметры.АвтомобильНомерКузова = Автомобиль.НомерКузова;
			ОбластьШапка.Параметры.АвтомобильЦвет = Автомобиль.Цвет;
			
			ОбластьШапка.Параметры.АвтомобильГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер, Документ.ДатаСоздания);
			ОбластьШапка.Параметры.АвтомобильТехПаспорт = СокрЛП(Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ТехПаспорт, Документ.ДатаСоздания));
			
			Пробег = ?(Документ.Пробег > Документ.СводныйРемонтныйЗаказ.Пробег, 
						Документ.Пробег, 
						Документ.СводныйРемонтныйЗаказ.Пробег);
			ОбластьШапка.Параметры.АвтомобильПробег = Формат(Пробег, "ЧЦ=10");
			
			Если ЗначениеЗаполнено(Автомобиль.Модель) И ЗначениеЗаполнено(Автомобиль.Модель.ФайлКартинки) Тогда
				
				Попытка
					АдресКартинки = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(Автомобиль.Модель.ФайлКартинки).СсылкаНаДвоичныеДанныеФайла;
					СхемаТС = Новый Картинка(ПолучитьИзВременногоХранилища(АдресКартинки), Ложь);
					ОбластьШапка.Рисунки.СхемаТС.Картинка = СхемаТС;
					ОбластьШапка.Рисунки.СхемаТС.РазмерКартинки = РазмерКартинки.Пропорционально;
				Исключение
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка заполнения картинки'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
			КонецЕсли;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		// Вывод подвала документа
		ОбластьПодвал.Параметры.Заказчик = Документ.СводныйРемонтныйЗаказ.Заказчик;
		ОбластьПодвал.Параметры.ЗаказчикПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СводныйРемонтныйЗаказ.Заказчик, Документ.Дата);
		ОбластьПодвал.Параметры.Контрагент = Документ.Контрагент;
		ОбластьПодвал.Параметры.КонтрагентПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент, Документ.Дата);
		ОбластьПодвал.Параметры.Мастер = Документ.Мастер;
		ОбластьПодвал.Параметры.МастерПолноеНаименование = Документ.Мастер.Наименование;
		ОбластьПодвал.Параметры.ДатаДок = Формат(Документ.ДатаСоздания, "ДЛФ=DD");
		ТабличныйДокумент.Вывести(ОбластьПодвал);  
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	ТабличныйДокумент.Автомасштаб = Истина;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаряд_АктОсмотра";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "ЗаказНарядДоговор"
// Возвращает сформированный табличный документ:
Функция ПечатьЗаказНарядДоговор(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		ФорматПредставленияГодаВыпускаАвтомобиля = АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Документ);
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаряд.ПФ_MXL_ЗаказНарядДоговор");
		
		ОбластьШапка  = Макет.ПолучитьОбласть("Шапка");
		ОбластьУслуги = Макет.ПолучитьОбласть("Услуги");
		
		НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		
		// Вывод шапки документа
		ОбластьШапка.Параметры.Организация = Документ.Организация;
		ОбластьШапка.Параметры.ФирмаПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация, Документ.Дата);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ДляПечати = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьШапка.Параметры.ФирмаАдресЮридический = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Организация, Новый Структура("АдресЮридический", " "), ДополнительныеПараметры);
		ОбластьШапка.Параметры.ФирмаАдресПочтовый = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Организация, Новый Структура("АдресФактический", " "), ДополнительныеПараметры);
		
		ОбластьШапка.Параметры.ФирмаТелефоны = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Организация, Новый Структура("ТелефонРабочий", " "), ДополнительныеПараметры);

		
		Заказчик = Документ.СводныйРемонтныйЗаказ.Заказчик;
		
		ОбластьШапка.Параметры.НомерДок = НомерДляПечати;
		ОбластьШапка.Параметры.ДатаДок = Формат(Документ.ДатаСоздания, "ДФ = дд.ММ.гггг");
		ОбластьШапка.Параметры.Заказчик = Заказчик;
		ОбластьШапка.Параметры.ЗаказчикПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Заказчик, Документ.Дата);
		ОбластьШапка.Параметры.ЗаказчикАдресПочтовый = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказчик, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.ЗаказчикТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказчик, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.Контрагент = Документ.Контрагент;
		ОбластьШапка.Параметры.КонтрагентПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент, Документ.Дата);
		ОбластьШапка.Параметры.КонтрагентИНН = Документ.Контрагент.ИНН;
		ОбластьШапка.Параметры.КонтрагентАдресЮридический = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.КонтрагентТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		
		Автомобиль = Документ.СводныйРемонтныйЗаказ.Автомобиль;
		
		Если ЗначениеЗаполнено(Автомобиль) Тогда
			ОбластьШапка.Параметры.Автомобиль = Автомобиль;
			ОбластьШапка.Параметры.АвтомобильКод = Автомобиль.VIN;
			ОбластьШапка.Параметры.АвтомобильМодель = Автосервис.МаркаМодельАвтомобиля(Автомобиль);
			ОбластьШапка.Параметры.АвтомобильГодВыпуска = Формат(Автомобиль.ГодВыпуска,ФорматПредставленияГодаВыпускаАвтомобиля);
			ОбластьШапка.Параметры.АвтомобильНомерДвигателя = Автомобиль.НомерДвигателя;
			ОбластьШапка.Параметры.АвтомобильНомерШасси = Автомобиль.НомерШасси;
			ОбластьШапка.Параметры.АвтомобильНомерКузова = Автомобиль.НомерКузова;
			ОбластьШапка.Параметры.АвтомобильЦвет = Автомобиль.Цвет;
			
			ОбластьШапка.Параметры.АвтомобильГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер, Документ.ДатаСоздания);
			ОбластьШапка.Параметры.АвтомобильТехПаспорт = СокрЛП(Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ТехПаспорт, Документ.ДатаСоздания));
			
			Пробег = ?(Документ.Пробег > Документ.СводныйРемонтныйЗаказ.Пробег, 
						Документ.Пробег, 
						Документ.СводныйРемонтныйЗаказ.Пробег);
			ОбластьШапка.Параметры.АвтомобильПробег = Формат(Пробег, "ЧЦ=10");
		КонецЕсли;
		
		ОбластьШапка.Параметры.Мастер = Документ.Мастер;
		ОбластьШапка.Параметры.МастерПолноеНаименование = Документ.Мастер.Наименование;
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		// Вывод секции "Услуги" (общие условия договора)
		ОбластьУслуги.Параметры.Заказчик = Заказчик;
		ОбластьУслуги.Параметры.ЗаказчикПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Заказчик, Документ.Дата);
		ОбластьУслуги.Параметры.Контрагент = Документ.Контрагент;
		ОбластьУслуги.Параметры.КонтрагентПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент, Документ.Дата);
		ОбластьУслуги.Параметры.Мастер = Документ.Мастер;
		ОбластьУслуги.Параметры.МастерПолноеНаименование = Документ.Мастер.Наименование;
		ОбластьУслуги.Параметры.ДатаДок = Формат(Документ.ДатаСоздания, "ДЛФ=DD");
		ТабличныйДокумент.Вывести(ОбластьУслуги);     
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	ТабличныйДокумент.Автомасштаб = Истина;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаряд_ЗаказНарядДоговор";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "АктПриема"
// Возвращает сформированный табличный документ:
Функция ПечатьАктПриема(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		ФорматПредставленияГодаВыпускаАвтомобиля = АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Документ);
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаряд.ПФ_MXL_АктПриема");
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		
		НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		
		// Вывод шапки документа
		ОбластьШапка.Параметры.ФирмаНаименование = Документ.Организация.Наименование;
		ОбластьШапка.Параметры.ФирмаПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация, Документ.Дата);
		
		Заказчик = Документ.СводныйРемонтныйЗаказ.Заказчик;
		
		ОбластьШапка.Параметры.НомерДок = НомерДляПечати;
		ОбластьШапка.Параметры.ДатаДок = Формат(Документ.ДатаСоздания,"ДФ = дд.ММ.гггг");
		ОбластьШапка.Параметры.Заказчик = Заказчик;
		ОбластьШапка.Параметры.ЗаказчикПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Заказчик, Документ.Дата);
		ОбластьШапка.Параметры.ЗаказчикАдресПочтовый = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказчик, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.ЗаказчикТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказчик, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.Контрагент = Документ.Контрагент;
		ОбластьШапка.Параметры.КонтрагентПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент, Документ.Дата);
		ОбластьШапка.Параметры.КонтрагентИНН = Документ.Контрагент.ИНН;
		ОбластьШапка.Параметры.КонтрагентАдресЮридический = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.КонтрагентТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.Мастер = Документ.Мастер;
		ОбластьШапка.Параметры.МастерПолноеНаименование = Документ.Мастер.Наименование;
		
		Автомобиль = Документ.СводныйРемонтныйЗаказ.Автомобиль;
		
		Если ЗначениеЗаполнено(Автомобиль) Тогда
			ОбластьШапка.Параметры.Автомобиль = Автомобиль;
			ОбластьШапка.Параметры.АвтомобильКод = Автомобиль.VIN;
			ОбластьШапка.Параметры.АвтомобильМодель = Автосервис.МаркаМодельАвтомобиля(Автомобиль);
			ОбластьШапка.Параметры.АвтомобильГодВыпуска = 
					Формат(Автомобиль.ГодВыпуска, ФорматПредставленияГодаВыпускаАвтомобиля);
			ОбластьШапка.Параметры.АвтомобильНомерДвигателя = Автомобиль.НомерДвигателя;
			ОбластьШапка.Параметры.АвтомобильНомерШасси = Автомобиль.НомерШасси;
			ОбластьШапка.Параметры.АвтомобильНомерКузова = Автомобиль.НомерКузова;
			ОбластьШапка.Параметры.АвтомобильЦвет = Автомобиль.Цвет;
			
			ОбластьШапка.Параметры.АвтомобильГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер, Документ.ДатаСоздания);
			ОбластьШапка.Параметры.АвтомобильТехПаспорт = СокрЛП(Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ТехПаспорт, Документ.ДатаСоздания));
			
			Пробег = ?(Документ.Пробег > Документ.СводныйРемонтныйЗаказ.Пробег, 
						Документ.Пробег, 
						Документ.СводныйРемонтныйЗаказ.Пробег);
			ОбластьШапка.Параметры.АвтомобильПробег = Формат(Пробег, "ЧЦ=10");
		КонецЕсли; 
		ТабличныйДокумент.Вывести(ОбластьШапка);  
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	ТабличныйДокумент.Автомасштаб = Истина;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаряд_АктПриема";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "СопроводительныйЛист"
// Возвращает сформированный табличный документ:
Функция ПечатьСопроводительныйЛист(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// зададим параметры макета
	ТабличныйДокумент.ПолеСверху = 10; //поле равно высоте колонтитулов
	ТабличныйДокумент.ПолеСлева  = 0;
	ТабличныйДокумент.ПолеСнизу  = 0;
	ТабличныйДокумент.ПолеСправа = 0;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		ФорматПредставленияГодаВыпускаАвтомобиля = АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Документ);
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТаблицаТоваров         = Документ.Товары.Выгрузить();
		ТаблицаРабот           = Документ.Автоработы.Выгрузить();
		ТаблицаПричинОбращений = Документ.ПричиныОбращения.Выгрузить();
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаряд.ПФ_MXL_СопроводительныйЛист");
		
		ЕстьСкидкаПоДеталям = Ложь;
		Если Документ.Товары.Итог("СуммаСкидки") <> 0 ИЛИ Документ.Товары.Итог("СуммаСкидкиСтроки") <> 0 
													ИЛИ Документ.Товары.Итог("СуммаСкидкиБонусами") <> 0 Тогда
			ЕстьСкидкаПоДеталям = Истина;
		КонецЕсли;
		
		ЕстьСкидкаПоРаботам = Ложь;
		Если Документ.Автоработы.Итог("СуммаСкидки") <> 0 ИЛИ Документ.Автоработы.Итог("СуммаСкидкиСтроки") <> 0 
													ИЛИ Документ.Автоработы.Итог("СуммаСкидкиБонусами") <> 0 Тогда
			ЕстьСкидкаПоРаботам = Истина;
		КонецЕсли;
		
		ЕстьПричиныОбращений = (ТаблицаПричинОбращений.Количество() > 0);
		
		Если НЕ ЕстьПричиныОбращений Тогда
			ТаблицаПричинОбращений.Добавить();
		Иначе
			ПричиныИАвтоработы = ПричиныОбращенийСлужебный.СоставПричинОбращенийПоЗаказНаряду(Документ);
			ТаблицаРабот.Колонки.Добавить("ИдентификаторПричиныОбращения");
			Для Каждого Авторабота Из ТаблицаРабот Цикл
				НайденныеСтроки = ПричиныИАвтоработы.НайтиСтроки(Новый Структура("Авторабота", Авторабота.ИдентификаторРаботы));
				Если НайденныеСтроки.Количество() > 0 Тогда
					Авторабота.ИдентификаторПричиныОбращения = НайденныеСтроки[0].ПричинаОбращения;
				Иначе
					Авторабота.ИдентификаторПричиныОбращения = ТаблицаПричинОбращений[0].ИдентификаторПричиныОбращения;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОбластьСкидка      = Макет.Область("Скидка");
		ОбластьСкидкаРабот = Макет.Область("СкидкаРабот");
		
		ОбластьУслуги = Макет.ПолучитьОбласть("Услуги");
		ОбластьДетали = Макет.ПолучитьОбласть("Детали");
		
		ОбластьСтрокаДеталей	            = Макет.ПолучитьОбласть("СтрокаДеталей");
		ОбластьСтрокаПримечаниеНоменклатура = Макет.ПолучитьОбласть("СтрокаПримечаниеНоменклатура");
		ОбластьИтоговПоСтраницеДетали	    = Макет.ПолучитьОбласть("ИтогиПоСтраницеДеталей");
		ОбластьПодвалДеталей	            = Макет.ПолучитьОбласть("ПодвалДетали");
		
		ОбластьСтрокаУслуг		        = Макет.ПолучитьОбласть("СтрокаРабот");
		ОбластьСтрокаПримечаниеРаботы   = Макет.ПолучитьОбласть("СтрокаПримечаниеРаботы");
		ОбластьИтоговПоСтраницеУслуги	= Макет.ПолучитьОбласть("ИтогиПоСтраницеРабот");
		ОбластьПодвалУслуг		        = Макет.ПолучитьОбласть("ПодвалУслуги");
		
		ОбластьСписокОткрытыхЗН         = Макет.ПолучитьОбласть("СписокОткрытыхЗН");
		ОбластьСтрокаСписокОткрытыхЗН   = Макет.ПолучитьОбласть("СтрокаСписокОткрытыхЗН");
		ОбластьИтоговПоСтраницеСписокЗН = Макет.ПолучитьОбласть("ИтогиПоСтраницеСписокОткрытыхЗН");
		ОбластьПодвалСписокОткрытыхЗН   = Макет.ПолучитьОбласть("ПодвалСписокОткрытыхЗН");
		
		ОбластьШапкаМатериалов  = Макет.ПолучитьОбласть("ШапкаМатериалов");
		ОбластьСтрокаМатериалов = Макет.ПолучитьОбласть("СтрокаМатериалов");
		
		ОбластьШапкаИсполнителей  = Макет.ПолучитьОбласть("ШапкаИсполнителей");
		ОбластьСтрокаИсполнителей = Макет.ПолучитьОбласть("СтрокаИсполнителей");
		
		ОбластьШапкаПричиныОбращения  = Макет.ПолучитьОбласть("ШапкаПричиныОбращения");
		ОбластьПодвалПричиныОбращения = Макет.ПолучитьОбласть("ПодвалПричиныОбращения");
		
		БезЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		ОбычнаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		// Настроем колонки вывода деталей если не было скидок
		Если Не ЕстьСкидкаПоДеталям Тогда
			ПоложениеШапкиДеталей = ОбластьДетали.Область("ШапкаДеталей").Низ;
			ПозицияКолонки = ОбластьСкидка.Лево;
			Пока ПозицияКолонки > 11 Цикл
				ОбластьДетали.Область(ПоложениеШапкиДеталей-1,ПозицияКолонки,ПоложениеШапкиДеталей-1,ПозицияКолонки).Текст = ОбластьДетали.Область(ПоложениеШапкиДеталей-1,ПозицияКолонки-2,ПоложениеШапкиДеталей-1,ПозицияКолонки-2).Текст;
				ОбластьДетали.Область(ПоложениеШапкиДеталей,ПозицияКолонки,ПоложениеШапкиДеталей,ПозицияКолонки).Текст = ОбластьДетали.Область(ПоложениеШапкиДеталей,ПозицияКолонки-2,ПоложениеШапкиДеталей,ПозицияКолонки-2).Текст;
				
				ОбластьИсточник = ОбластьСтрокаДеталей.Область(1,ПозицияКолонки-2,1,ПозицияКолонки-2);
				ОбластьПриемник = ОбластьСтрокаДеталей.Область(1,ПозицияКолонки,1,ПозицияКолонки);
				ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
				
				ОбластьИсточник = ОбластьИтоговПоСтраницеДетали.Область(1,ПозицияКолонки-2,1,ПозицияКолонки-2);
				ОбластьПриемник = ОбластьИтоговПоСтраницеДетали.Область(1,ПозицияКолонки,1,ПозицияКолонки);
				ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
				
				ОбластьИсточник = ОбластьПодвалДеталей.Область(1,ПозицияКолонки-2,1,ПозицияКолонки-2);
				ОбластьПриемник = ОбластьПодвалДеталей.Область(1,ПозицияКолонки,1,ПозицияКолонки);
				ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
				
				ПозицияКолонки = ПозицияКолонки-2;
			КонецЦикла;
			
			ОбластьДетали.Область(ПоложениеШапкиДеталей - 1, 4, ПоложениеШапкиДеталей-1, 11).Объединить();
			ОбластьДетали.Область(ПоложениеШапкиДеталей, 4, ПоложениеШапкиДеталей, 11).Объединить();
			ОбластьСтрокаДеталей.Область(1, 4, 1, 11).Объединить();
			ТекОбласть = ОбластьИтоговПоСтраницеДетали.Область(1, 2, 1, 11);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСнизу = БезЛинии;
			ТекОбласть.ГраницаСверху = ОбычнаяЛиния;
			
			ТекОбласть = ОбластьПодвалДеталей.Область(1, 2, 1, 11);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСнизу = БезЛинии;
			
			ТекОбласть = ОбластьИтоговПоСтраницеДетали.Область(1, 14, 1, 17);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСлева = ОбычнаяЛиния;
			ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ТекОбласть.Текст = НСтр("ru = 'на сумму:'");
			
			ТекОбласть = ОбластьПодвалДеталей.Область(1, 14, 1, 17);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСлева = ОбычнаяЛиния;
			ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ТекОбласть.Текст = НСтр("ru = 'на сумму:'");
			
			ТекОбласть = ОбластьИтоговПоСтраницеДетали.Область(1, 12, 1, 13);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСлева = ОбычнаяЛиния;
			
			ТекОбласть = ОбластьПодвалДеталей.Область(1, 12, 1, 13);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСлева = ОбычнаяЛиния;
			
			ПозицияКолонки = ОбластьСкидка.Лево - 1;
			СчетчикКолонок = 6;
			Пока ПозицияКолонки <= ОбластьДетали.ШиринаТаблицы Цикл
				ОбластьДетали.Область(ПоложениеШапкиДеталей,ПозицияКолонки,ПоложениеШапкиДеталей,ПозицияКолонки).Текст = СчетчикКолонок;
				ПозицияКолонки = ПозицияКолонки + 2;
				СчетчикКолонок = СчетчикКолонок + 1;
			КонецЦикла;
			
		КонецЕсли;
		
		ОбластьШапкаДеталей = ОбластьДетали.ПолучитьОбласть("ШапкаДеталей");
		
		// Настроем колонки вывода услуг если не было скидок
		Если Не ЕстьСкидкаПоРаботам Тогда
			ПоложениеШапкиУслуг = ОбластьУслуги.Область("ШапкаУслуг").Низ;
			ПозицияКолонки = ОбластьСкидкаРабот.Лево;
			Пока ПозицияКолонки > 11 Цикл
				ОбластьУслуги.Область(ПоложениеШапкиУслуг-1,ПозицияКолонки,ПоложениеШапкиУслуг-1,ПозицияКолонки).Текст = ОбластьУслуги.Область(ПоложениеШапкиУслуг-1,ПозицияКолонки-2,ПоложениеШапкиУслуг-1,ПозицияКолонки-2).Текст;
				ОбластьУслуги.Область(ПоложениеШапкиУслуг,ПозицияКолонки,ПоложениеШапкиУслуг,ПозицияКолонки).Текст = ОбластьУслуги.Область(ПоложениеШапкиУслуг,ПозицияКолонки-2,ПоложениеШапкиУслуг,ПозицияКолонки-2).Текст;
				
				ОбластьИсточник = ОбластьСтрокаУслуг.Область(1, ПозицияКолонки - 2, 1, ПозицияКолонки - 2);
				ОбластьПриемник = ОбластьСтрокаУслуг.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
				
				//ОбластьИсточник = ОбластьШапкаМатериалов.Область(1,ПозицияКолонки-2,1,ПозицияКолонки-2);
				//ОбластьПриемник = ОбластьШапкаМатериалов.Область(1,ПозицияКолонки,1,ПозицияКолонки);
				//ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
				
				ОбластьИсточник = ОбластьСтрокаМатериалов.Область(1, ПозицияКолонки - 2, 1, ПозицияКолонки - 2);
				ОбластьПриемник = ОбластьСтрокаМатериалов.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
				
				//ОбластьИсточник = ОбластьШапкаИсполнителей.Область(1,ПозицияКолонки-2,1,ПозицияКолонки-2);
				//ОбластьПриемник = ОбластьШапкаИсполнителей.Область(1,ПозицияКолонки,1,ПозицияКолонки);
				//ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
				
				ОбластьИсточник = ОбластьСтрокаИсполнителей.Область(1, ПозицияКолонки - 2, 1, ПозицияКолонки - 2);
				ОбластьПриемник = ОбластьСтрокаИсполнителей.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				Если ОбластьИсточник.ПараметрРасшифровки = "Цех" Тогда
					ОбластьСтрокаИсполнителей.Область(1, ПозицияКолонки - 2, 1, ПозицияКолонки + 1).Разъединить();
					ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
					ОбластьСтрокаИсполнителей.Область(1, ПозицияКолонки, 1, ПозицияКолонки + 4).Объединить();
					ОбластьСтрокаИсполнителей.Область(1, ПозицияКолонки - 2, 1, ПозицияКолонки - 1).Объединить();
				Иначе
					ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
				КонецЕсли;
				
				ОбластьИсточник = ОбластьИтоговПоСтраницеУслуги.Область(1, ПозицияКолонки - 2, 1, ПозицияКолонки - 2);
				ОбластьПриемник = ОбластьИтоговПоСтраницеУслуги.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
				
				ОбластьИсточник = ОбластьПодвалУслуг.Область(1, ПозицияКолонки - 2, 1, ПозицияКолонки - 2);
				ОбластьПриемник = ОбластьПодвалУслуг.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
				
				ПозицияКолонки = ПозицияКолонки - 2;
			КонецЦикла;
			
			//ОбластьУслуги.Область(ПоложениеШапкиУслуг-1, 6, ПоложениеШапкиУслуг-1, 9).Объединить();
			ОбластьУслуги.Область(ПоложениеШапкиУслуг - 1, 4, ПоложениеШапкиУслуг - 1, 12).Объединить();
			//ОбластьУслуги.Область(ПоложениеШапкиУслуг, 6, ПоложениеШапкиУслуг, 9).Объединить();
			ОбластьУслуги.Область(ПоложениеШапкиУслуг, 4, ПоложениеШапкиУслуг, 12).Объединить();
			//ОбластьСтрокаУслуг.Область(1, 6, 1, 9).Объединить();
			ОбластьСтрокаУслуг.Область(1, 4, 1, 12).Объединить();
			ОбластьСтрокаМатериалов.Область(1, 6, 1, 12).Объединить();
			ОбластьСтрокаИсполнителей.Область(1, 6, 1, 14).Объединить();
			
			//ТекОбласть = ОбластьИтоговПоСтраницеУслуги.Область(1, 2, 1, 9);
			ТекОбласть = ОбластьИтоговПоСтраницеУслуги.Область(1, 2, 1, 12);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСнизу = БезЛинии;
			ТекОбласть.ГраницаСверху = ОбычнаяЛиния;
			
			//ТекОбласть = ОбластьПодвалУслуг.Область(1, 2, 1, 9);
			ТекОбласть = ОбластьПодвалУслуг.Область(1, 2, 1, 12);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСнизу = БезЛинии;
			
			//ТекОбласть = ОбластьИтоговПоСтраницеУслуги.Область(1, 11, 1, 13);
			ТекОбласть = ОбластьИтоговПоСтраницеУслуги.Область(1, 15, 1, 20);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСлева = ОбычнаяЛиния;
			ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ТекОбласть.Текст = НСТр("ru = 'на сумму:'");
			
			//ТекОбласть = ОбластьПодвалУслуг.Область(1, 11, 1, 13);
			ТекОбласть = ОбластьПодвалУслуг.Область(1, 15, 1, 20);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСлева = ОбычнаяЛиния;
			ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ТекОбласть.Текст = НСтр("ru = 'на сумму:'");
			
			ТекОбласть = ОбластьИтоговПоСтраницеУслуги.Область(1, 13, 1, 14);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСлева = ОбычнаяЛиния;
			
			ТекОбласть = ОбластьПодвалУслуг.Область(1, 13, 1, 14);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСлева = ОбычнаяЛиния;
			
			ПозицияКолонки = ОбластьСкидкаРабот.Лево;
			СчетчикКолонок = 7;
			Пока ПозицияКолонки <= ОбластьУслуги.ШиринаТаблицы Цикл
				ОбластьУслуги.Область(ПоложениеШапкиУслуг, ПозицияКолонки, ПоложениеШапкиУслуг, ПозицияКолонки).Текст 
																										= СчетчикКолонок;
				ПозицияКолонки = ПозицияКолонки + 2;
				СчетчикКолонок = СчетчикКолонок + 1;
			КонецЦикла;
		КонецЕсли;
		
		ОбластьШапкаУслуг = ОбластьУслуги.ПолучитьОбласть("ШапкаУслуг");
		
		НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		
		// Проверим наличие причин обращений
		Если НЕ ЕстьПричиныОбращений Тогда
			
			ТекОбласть = ОбластьШапкаПричиныОбращения.Область(1,, 1);
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			ОбластьШапкаПричиныОбращения.Область(1, 2, 1, 2).Текст = "";
			
			ТекОбласть = ОбластьШапкаПричиныОбращения.Область(2,, 2);
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			ОбластьШапкаПричиныОбращения.Область(2, 2, 2, 2).Текст = "";
			
			ТекОбласть = ОбластьПодвалПричиныОбращения.Область(1,, 1);
			ТекОбласть.Очистить(Истина, Истина, Истина);
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			
			ТекОбласть = ОбластьПодвалПричиныОбращения.Область(2,, 2);
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			
		Иначе
			
			ТекОбласть = ОбластьДетали.Область(2,, 2);
			ОбластьДетали.Область(2, 3, 2, 3).Текст = СтрШаблон(
				НСтр("ru = 'Расходная накладная к заказ-наряду № %1 от %2 к причине обращения'"),
				НомерДляПечати,
				Формат(Документ.ДатаСоздания, "ДЛФ=D")
			);
			
			ТекОбласть = ОбластьУслуги.Область(1,, 1);
			ОбластьУслуги.Область(1, 3, 1, 3).Текст = СтрШаблон(
				НСтр("ru = 'Заявка на работы к заказ-наряду № %1 от %2  к причине обращения'"),
				НомерДляПечати,
				Формат(Документ.ДатаСоздания, "ДЛФ=D")
			);
			
		КонецЕсли;
		
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		
		// Выводим шапку документа
		ОбластьШапка.Параметры.Организация = Документ.Организация;
		ОбластьШапка.Параметры.ФирмаПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация, Документ.Дата);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ДляПечати = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьШапка.Параметры.ФирмаАдресЮридический = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Организация, Новый Структура("АдресЮридический", " "), ДополнительныеПараметры);
		
		ОбластьШапка.Параметры.ФирмаТелефоны = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Организация, Новый Структура("ТелефонРабочий", " "), ДополнительныеПараметры);

		ОбластьШапка.Параметры.НомерДок = НомерДляПечати;
		ОбластьШапка.Параметры.ДатаДок = Формат(Документ.ДатаСоздания, "ДФ = дд.ММ.гггг");
		
		Заказчик = Документ.СводныйРемонтныйЗаказ.Заказчик;
		
		ОбластьШапка.Параметры.Заказчик = Заказчик;
		ОбластьШапка.Параметры.ЗаказчикПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Заказчик, Документ.Дата);
		ОбластьШапка.Параметры.ЗаказчикАдресПочтовый = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказчик, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.ЗаказчикТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказчик, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.Контрагент = Документ.Контрагент;
		ОбластьШапка.Параметры.КонтрагентПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент, Документ.Дата);
		ОбластьШапка.Параметры.КонтрагентИНН = Документ.Контрагент.ИНН;
		ОбластьШапка.Параметры.КонтрагентАдресЮридический = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.КонтрагентТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		
		//Автомобиль
		Автомобиль = Документ.СводныйРемонтныйЗаказ.Автомобиль;
		
		ОбластьШапка.Параметры.Автомобиль = Автомобиль;
		Если ЗначениеЗаполнено(Автомобиль) Тогда
			ОбластьШапка.Параметры.АвтомобильКод = Автомобиль.VIN;
			ОбластьШапка.Параметры.АвтомобильМодель = Автосервис.МаркаМодельАвтомобиля(Автомобиль);
			ОбластьШапка.Параметры.АвтомобильГодВыпуска = Формат(Автомобиль.ГодВыпуска,ФорматПредставленияГодаВыпускаАвтомобиля);
			ОбластьШапка.Параметры.АвтомобильНомерДвигателя = Автомобиль.НомерДвигателя;
			ОбластьШапка.Параметры.АвтомобильНомерШасси = Автомобиль.НомерШасси;
			ОбластьШапка.Параметры.АвтомобильНомерКузова = Автомобиль.НомерКузова;
			ОбластьШапка.Параметры.АвтомобильЦвет = Автомобиль.Цвет;
			
			ОбластьШапка.Параметры.АвтомобильГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер, Документ.ДатаСоздания);
			ОбластьШапка.Параметры.АвтомобильТехПаспорт = СокрЛП(Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ТехПаспорт, Документ.ДатаСоздания));
			
			Пробег = ?(Документ.Пробег > Документ.СводныйРемонтныйЗаказ.Пробег, 
						Документ.Пробег, 
						Документ.СводныйРемонтныйЗаказ.Пробег);
			ОбластьШапка.Параметры.АвтомобильПробег = Формат(Пробег, "ЧЦ=10");
		КонецЕсли;
		
		ОбластьШапка.Параметры.ДатаСоздания = Формат(Документ.ДатаСоздания, "ДФ = дд.ММ.гггг");
		ОбластьШапка.Параметры.ВремяСоздания = Формат(Документ.ДатаСоздания, "ДФ = ЧЧ.мм.сс");
		ОбластьШапка.Параметры.ВидРемонта = Документ.ВидРемонта;
		ОбластьШапка.Параметры.ДиспетчерПолноеНаименование = Документ.Диспетчер;
		ОбластьШапка.Параметры.Валюта = Документ.ВалютаДокумента;
		
		// Рисунки
		
		// выведем или удалим ШК
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьШапка, Документ);
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		КолонкаКода = УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах();
		КолонкаКода = СтрЗаменить(КолонкаКода, "/", Символы.ПС);
		
		ИтогоОбщийПоСумме = 0;
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		
		
		Для Каждого ПричинаОбращения Из ТаблицаПричинОбращений Цикл
			
			Если ЕстьПричиныОбращений Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ИдентификаторПричиныОбращения", ПричинаОбращения.ИдентификаторПричиныОбращения);
				Табл       = ТаблицаРабот.НайтиСтроки(ПараметрыОтбора);
				ТаблТовары = ТаблицаТоваров.НайтиСтроки(ПараметрыОтбора);
				
				ОбластьШапкаПричиныОбращения.Параметры.ПричинаОбращения           = ПричинаОбращения.ПричинаОбращения;
				ОбластьШапкаПричиныОбращения.Параметры.СодержаниеПричиныОбращения = ПричинаОбращения.ПричинаОбращенияСодержание;
				ТабличныйДокумент.Вывести(ОбластьШапкаПричиныОбращения);
				
			Иначе
				// Временная таблица
				Табл = ТаблицаРабот.Скопировать();
				ТаблТовары = ТаблицаТоваров.Скопировать();
			КонецЕсли;
			
			// Инициализация итогов по документу
			ИтогоСуммаРабот			= 0;
			ИтогоСуммаСкидкиРабот	= 0;
			ИтогоКоличествоРабот	= 0;
			ИтогоСуммаДеталей		= 0;
			ИтогоСуммаСкидкиДеталей	= 0;
			ИтогоКоличествоДеталей	= 0;
			
			Для ДопСтр = 1 По 5 Цикл
				Табл.Добавить();
			КонецЦикла;
			КоличествоРабот = Табл.Количество();
			
			// Вывод шапки табличной части работ(услуг)
			Если ЕстьПричиныОбращений Тогда
				ОбластьУслуги.Область(1, 3, 1, 3).Текст = СтрШаблон(
					НСтр("ru = 'Заявка на работы к заказ-наряду № %1 от %2 к причине обращения ""%3""'"),
					НомерДляПечати,
					Формат(Документ.ДатаСоздания, "ДЛФ=D"),
					ПричинаОбращения.ПричинаОбращения
				);
			Иначе
				ОбластьУслуги.Параметры.НомерДок = НомерДляПечати;
				ОбластьУслуги.Параметры.ДатаДок = Формат(Документ.ДатаСоздания, "ДЛФ=D");
			КонецЕсли;
			ОбластьУслуги.Параметры.ИмяКолонкиКодов = КолонкаКода;
			ТабличныйДокумент.Вывести(ОбластьУслуги);
			
			Если ЕстьПричиныОбращений Тогда
				ТекстЗаголовка = СтрШаблон(
					НСтр("ru = 'Заявка на работы к заказ-наряду № %1 от %2  к причине обращения: %3'"),
					НомерДляПечати,
					Формат(Документ.ДатаСоздания, "ДЛФ=D"),
					ПричинаОбращения.ПричинаОбращения
				);
			Иначе
				ТекстЗаголовка = СтрШаблон(
					НСтр("ru = 'Заявка на работы к заказ-наряду № %1 от %2'"),
					НомерДляПечати,
					Формат(Документ.ДатаСоздания, "ДЛФ=D")
				);
			КонецЕсли;
			
			// заполним параметры шапки таблицы для следующего листа
			ОбластьШапкаУслуг.Параметры.ТекстЗаголовка = ТекстЗаголовка;
			ОбластьШапкаУслуг.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			ОбластьШапкаУслуг.Параметры.ИмяКолонкиКодов = КолонкаКода;
			
			// Вывод табличной части работ
			Ном = 0;
			СтруктураИтоговПоСтранице = Новый Структура("СуммаВсего, СуммаСкидки, Количество", 0, 0, 0);
			МассивОбластиПодвала = Новый Массив;
			МассивИсполнителей = Новый Массив;
			МассивМатериалов   = Новый Массив;
			Для каждого СтрокаРабот Из Табл Цикл
				Ном = Ном + 1;
				
				МассивИсполнителей.Очистить();
				МассивМатериалов.Очистить();
				
				ОбластьСтрокаУслуг.Параметры.НомСтр = Ном;
				Если Ном > (КоличествоРабот - 5) Тогда
					// выводим пустые строки
					ТекОбласть = ОбластьСтрокаУслуг.Область(1,, 1);
					ТекОбласть.АвтовысотаСтроки = Ложь;
					ТекОбласть.ВысотаСтроки = 22;
					ОбластьСтрокаУслуг.Параметры.Код = "";
					ОбластьСтрокаУслуг.Параметры.Номенклатура = "";
					ОбластьСтрокаУслуг.Параметры.Наименование = "";
					ОбластьСтрокаУслуг.Параметры.Цена = "";
					ОбластьСтрокаУслуг.Параметры.Коэффициент = "";
					ОбластьСтрокаУслуг.Параметры.Количество = "";
					ОбластьСтрокаУслуг.Параметры.Единица = "";
					ОбластьСтрокаУслуг.Параметры.Сумма = "";
					// ОбластьСтрокаУслуг.Параметры.ДопИнформация = "";
					Если ЕстьСкидкаПоРаботам Тогда
						ОбластьСтрокаУслуг.Параметры.Скидка = "";
					КонецЕсли;
					Если НЕ СтрокаРабот = Неопределено И СтрокаРабот.ПримечаниеРаботыПечать <> "" Тогда
						ОбластьСтрокаПримечаниеРаботы.Параметры.ПримечаниеРаботы = СтрокаРабот.ПримечаниеРаботыПечать;
					КонецЕсли;
				Иначе
					// заполняем параметры
					ОбластьСтрокаУслуг.Параметры.Код = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаРабот.Авторабота);
					ОбластьСтрокаУслуг.Параметры.Номенклатура = СтрокаРабот.Авторабота;
					ОбластьСтрокаУслуг.Параметры.Наименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаРабот.Авторабота);
					ОбластьСтрокаУслуг.Параметры.Цена = Формат(СтрокаРабот.Цена, "ЧЦ=15; ЧДЦ=2");
					ОбластьСтрокаУслуг.Параметры.Коэффициент = Формат(СтрокаРабот.Коэффициент, "ЧЦ=10; ЧДЦ=3");
					ОбластьСтрокаУслуг.Параметры.Количество = Формат(СтрокаРабот.Количество, ФорматВыводаКоличества);
					ОбластьСтрокаУслуг.Параметры.Единица = СтрокаРабот.Нормочас;
					ОбластьСтрокаУслуг.Параметры.Сумма = Формат(СтрокаРабот.СуммаВсего, ФорматВыводаСуммы);
					
					МассивМатериалов   = Документ.Материалы.НайтиСтроки(Новый Структура("ИдентификаторРаботы", СтрокаРабот.ИдентификаторРаботы));
					МассивИсполнителей = Документ.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", СтрокаРабот.ИдентификаторРаботы));
					
					Если ЕстьСкидкаПоРаботам Тогда
						ОбластьСтрокаУслуг.Параметры.Скидка = Формат(СтрокаРабот.СуммаСкидки + СтрокаРабот.СуммаСкидкиСтроки 
																	+ СтрокаРабот.СуммаСкидкиБонусами, ФорматВыводаСуммы);
					КонецЕсли;
					Если СтрокаРабот.ПримечаниеРаботыПечать <> "" Тогда
						ОбластьСтрокаПримечаниеРаботы.Параметры.ПримечаниеРаботы = СтрокаРабот.ПримечаниеРаботыПечать;
					КонецЕсли;
					// обновим итоги по документу
					ИтогоСуммаРабот = ИтогоСуммаРабот + СтрокаРабот.СуммаВсего;
					ИтогоСуммаСкидкиРабот = ИтогоСуммаСкидкиРабот + СтрокаРабот.СуммаСкидки + СтрокаРабот.СуммаСкидкиСтроки 
																	+ СтрокаРабот.СуммаСкидкиБонусами;
					ИтогоКоличествоРабот = ИтогоКоличествоРабот + СтрокаРабот.Количество;
				КонецЕсли;
				
				МассивОбластиПодвала.Очистить();
				Если МассивМатериалов.Количество() > 0 Тогда
					ТабДокВрем = Новый ТабличныйДокумент;
					ТабДокВрем.ПолеСверху = 10;
					ТабДокВрем.ПолеСнизу  = 0;
					ТабДокВрем.ПолеСлева  = 0;
					ТабДокВрем.ПолеСправа = 0;
					ТабДокВрем.Вывести(ОбластьШапкаМатериалов);
					Для Каждого СтрокаМатериалов Из МассивМатериалов Цикл
						ОбластьСтрокаМатериалов.Параметры.Заполнить(СтрокаМатериалов);
						ОбластьСтрокаМатериалов.Параметры.Наименование =  ?(ТипЗнч(СтрокаМатериалов.Номенклатура) = Тип("СправочникСсылка.Номенклатура"), УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаМатериалов.Номенклатура), СтрокаМатериалов.Номенклатура);
						ТабДокВрем.Вывести(ОбластьСтрокаМатериалов);
						Если СтрокаМатериалов.ПримечаниеНоменклатураПечать <> "" Тогда
							ОбластьСтрокаПримечаниеНоменклатура.Параметры.ПримечаниеНоменклатура = СтрокаМатериалов.ПримечаниеНоменклатураПечать;
							ТабДокВрем.Вывести(ОбластьСтрокаПримечаниеНоменклатура);
						КонецЕсли;
					КонецЦикла;
					МассивОбластиПодвала.Добавить(ТабДокВрем);
				КонецЕсли;
				
				Если МассивИсполнителей.Количество() > 0 Тогда
					ТабДокВрем = Новый ТабличныйДокумент;
					ТабДокВрем.ПолеСверху = 10;
					ТабДокВрем.ПолеСнизу  = 0;
					ТабДокВрем.ПолеСлева  = 0;
					ТабДокВрем.ПолеСправа = 0;
					ТабДокВрем.Вывести(ОбластьШапкаИсполнителей);
					Для Каждого СтрокаИсполнителей Из МассивИсполнителей Цикл
						ОбластьСтрокаИсполнителей.Параметры.Заполнить(СтрокаИсполнителей);
						ОбластьСтрокаИсполнителей.Параметры.ИсполнительНаименование = Строка(СтрокаИсполнителей.Исполнитель);
						ОбластьСтрокаИсполнителей.Параметры.ЦехПредставление        = Строка(СтрокаИсполнителей.Цех);
						ОбластьСтрокаИсполнителей.Параметры.ПроцентУчастия          = Строка(СтрокаИсполнителей.Процент) + " %";
						ТабДокВрем.Вывести(ОбластьСтрокаИсполнителей);
					КонецЦикла;
					МассивОбластиПодвала.Добавить(ТабДокВрем);
				КонецЕсли;
				
				Если Ном = КоличествоРабот Тогда
					МассивОбластиПодвала.Добавить(ОбластьПодвалУслуг);
				КонецЕсли;
				
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаУслуг, ОбластьШапкаУслуг, ОбластьИтоговПоСтраницеУслуги, НомерСтраницы, СтруктураИтоговПоСтранице, Документ, МассивОбластиПодвала);
				
				Если МассивМатериалов.Количество() > 0 Тогда
					
					ТабличныйДокумент.Вывести(ОбластьШапкаМатериалов);
					Для Каждого СтрокаМатериалов Из МассивМатериалов Цикл
						ОбластьСтрокаМатериалов.Параметры.Заполнить(СтрокаМатериалов);
						ОбластьСтрокаМатериалов.Параметры.Наименование =  ?(ТипЗнч(СтрокаМатериалов.Номенклатура) = Тип("СправочникСсылка.Номенклатура"), УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаМатериалов.Номенклатура), СтрокаМатериалов.Номенклатура);
						ТабличныйДокумент.Вывести(ОбластьСтрокаМатериалов);
						Если СтрокаМатериалов.ПримечаниеНоменклатураПечать <> "" Тогда
							ОбластьСтрокаПримечаниеНоменклатура.Параметры.ПримечаниеНоменклатура = СтрокаМатериалов.ПримечаниеНоменклатураПечать;
							ТабличныйДокумент.Вывести(ОбластьСтрокаПримечаниеНоменклатура);
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				Если МассивИсполнителей.Количество() > 0 Тогда
					
					ТабличныйДокумент.Вывести(ОбластьШапкаИсполнителей);
					Для Каждого СтрокаИсполнителей Из МассивИсполнителей Цикл
						ОбластьСтрокаИсполнителей.Параметры.Заполнить(СтрокаИсполнителей);
						ОбластьСтрокаИсполнителей.Параметры.ИсполнительНаименование = Строка(СтрокаИсполнителей.Исполнитель);
						ОбластьСтрокаИсполнителей.Параметры.ЦехПредставление        = Строка(СтрокаИсполнителей.Цех);
						ОбластьСтрокаИсполнителей.Параметры.ПроцентУчастия          = Строка(СтрокаИсполнителей.Процент) + " %";
						ТабличныйДокумент.Вывести(ОбластьСтрокаИсполнителей);
					КонецЦикла;
					
				КонецЕсли;
				
				Если НЕ СтрокаРабот = Неопределено И СтрокаРабот.ПримечаниеРаботыПечать <> "" Тогда
					УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаПримечаниеРаботы,,,,, Документ);
				КонецЕсли;
				// инициализация итогов по странице
				Если НомерСтраницы <> НомерСтраницыПред Тогда
					СтруктураИтоговПоСтранице = Новый Структура("СуммаВсего, СуммаСкидки, Количество", 0, 0, 0);
					НомерСтраницыПред = НомерСтраницы;
					ОбластьШапкаУслуг.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
				КонецЕсли;
				
				Если СтрокаРабот = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				// добавляем итоги
				УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаРабот,СтруктураИтоговПоСтранице);
			КонецЦикла;
			
			// довыводим последний итог по странице, если страниц больше единицы
			Если НомерСтраницы > 2 Тогда
				УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтоговПоСтраницеУслуги, СтруктураИтоговПоСтранице, Документ);
			КонецЕсли;
			
			// Вывод подвала табличной части услуг
			ОбластьПодвалУслуг.Параметры.Сумма = Формат(ИтогоСуммаРабот, ФорматВыводаСуммы);
			Если ЕстьСкидкаПоРаботам Тогда
				ОбластьПодвалУслуг.Параметры.Скидка = Формат(ИтогоСуммаСкидкиРабот, ФорматВыводаСуммы);
			КонецЕсли;
			ОбластьПодвалУслуг.Параметры.Количество = Формат(ИтогоКоличествоРабот, ФорматВыводаКоличества);
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвалУслуг, , , НомерСтраницы, , Документ);
			
			Для ТекСтр = 1 По 5 Цикл
				ТаблТовары.Добавить();
			КонецЦикла;
			КоличествоДеталей = ТаблТовары.Количество();
			
			// Вывод шапки табличной части деталей
			Если ЕстьПричиныОбращений Тогда
				ОбластьДетали.Область(2, 3, 2, 3).Текст = СтрШаблон(
					НСтр("ru = 'Расходная накладная к заказ-наряду № %1 от %2 к причине обращения ""%3""'"),
					НомерДляПечати,
					Формат(Документ.ДатаСоздания, "ДЛФ=D"),
					ПричинаОбращения.ПричинаОбращения
				);
			Иначе
				ОбластьДетали.Параметры.НомерДок = НомерДляПечати;
				ОбластьДетали.Параметры.ДатаДок  = Формат(Документ.ДатаСоздания, "ДЛФ=D");
			КонецЕсли;
			ОбластьДетали.Параметры.ИмяКолонкиКодов = КолонкаКода;
			
			// Если помещается только шапка, но ни одной строчки, то шапку переносим на след. страницу.
			ТабДокВрем = Новый ТабличныйДокумент;
			ТабДокВрем.ПолеСверху = 10; ТабДокВрем.ПолеСнизу  = 0;
			ТабДокВрем.ПолеСлева  = 0; ТабДокВрем.ПолеСправа = 0;
			ТабДокВрем.Вывести(ОбластьДетали);
			ОбластьМакетаСтрокаВрем = Макет.ПолучитьОбласть("СтрокаДеталей");
			СтрокаДеталей = ТаблТовары[0];
			ТекОбласть = ОбластьМакетаСтрокаВрем.Область(1,, 1);
			Если КоличествоДеталей = 5 Тогда
				// Присутствуют только пустые строки
				ТекОбласть.АвтовысотаСтроки = Ложь;
				ТекОбласть.ВысотаСтроки = 22;
			Иначе
				// Присутствуют заполненные строки (заполняем не все параметры - только наиболее вероятно длинные).
				ТекТовар = СтрокаДеталей.Номенклатура;
				ОбластьМакетаСтрокаВрем.Параметры.Код = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(ТекТовар);
				ОбластьМакетаСтрокаВрем.Параметры.Наименование = ?(ТипЗнч(ТекТовар) = Тип("СправочникСсылка.Номенклатура"), 
						УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ТекТовар), ТекТовар);
			КонецЕсли;
			ТабДокВрем.Вывести(ОбластьМакетаСтрокаВрем);
			ТабДокВрем.Вывести(ОбластьИтоговПоСтраницеДетали);
			Если НЕ ТабличныйДокумент.ПроверитьВывод(ТабДокВрем) Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьДетали);
			
			Если ЕстьПричиныОбращений Тогда
				ТекстЗаголовка = СтрШаблон(
					НСтр("ru = 'Расходная накладная к заказ-наряду № %1 от %2 к причине обращения: %3'"),
					НомерДляПечати,
					Формат(Документ.ДатаСоздания, "ДЛФ=D"),
					ПричинаОбращения.ПричинаОбращения
				);
			Иначе
				ТекстЗаголовка = СтрШаблон(
					НСтр("ru = 'Расходная накладная к заказ-наряду № %1 от %2'"),
					НомерДляПечати,
					Формат(Документ.ДатаСоздания, "ДЛФ=D")
				);
			КонецЕсли;
			
			// заполним параметры шапки таблицы для следующего листа
			ОбластьШапкаДеталей.Параметры.ТекстЗаголовка = ТекстЗаголовка;
			ОбластьШапкаДеталей.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			ОбластьШапкаДеталей.Параметры.ИмяКолонкиКодов = КолонкаКода;
			
			// Вывод табличной части деталей
			Ном = 0;
			СтруктураИтоговПоСтранице = Новый Структура("СуммаВсего, СуммаСкидки, Количество", 0, 0, 0);
			
			МассивОбластиПодвала = Новый Массив;
			МассивОбластиПодвала.Добавить(ОбластьПодвалДеталей);
			
			Для Каждого СтрокаДеталей Из ТаблТовары Цикл
				Ном = Ном + 1;
				
				ОбластьСтрокаДеталей.Параметры.НомСтр = Ном;
				Если Ном > (КоличествоДеталей-5) Тогда
					// установим для пустой строки высоту, равную двум строкам. Параметры не заполняем
					ТекОбласть = ОбластьСтрокаДеталей.Область(1,, 1);
					ТекОбласть.АвтовысотаСтроки = Ложь;
					ТекОбласть.ВысотаСтроки = 22;
					ОбластьСтрокаДеталей.Параметры.Код = "";
					ОбластьСтрокаДеталей.Параметры.Номенклатура = "";
					ОбластьСтрокаДеталей.Параметры.Наименование = "";
					ОбластьСтрокаДеталей.Параметры.Цена = "";
					ОбластьСтрокаДеталей.Параметры.Количество = "";
					ОбластьСтрокаДеталей.Параметры.Единица = "";
					ОбластьСтрокаДеталей.Параметры.Сумма = "";
					Если ЕстьСкидкаПоДеталям Тогда
						ОбластьСтрокаДеталей.Параметры.Скидка = "";
					КонецЕсли;
					ОбластьСтрокаДеталей.Параметры.ДопИнформация = "";
					Если НЕ СтрокаДеталей = Неопределено И СтрокаДеталей.ПримечаниеНоменклатураПечать <> "" Тогда
						ОбластьСтрокаПримечаниеНоменклатура.Параметры.ПримечаниеНоменклатура = СтрокаДеталей.ПримечаниеНоменклатураПечать;
					КонецЕсли;
				Иначе
					// заполняем параметры
					ТекНоменклатура = СтрокаДеталей.Номенклатура;
					ОбластьСтрокаДеталей.Параметры.Код = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаДеталей.Номенклатура);
					ОбластьСтрокаДеталей.Параметры.Номенклатура = СтрокаДеталей.Номенклатура;
					ОбластьСтрокаДеталей.Параметры.Наименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаДеталей.Номенклатура);
					ОбластьСтрокаДеталей.Параметры.Цена = Формат(СтрокаДеталей.Цена,"ЧЦ=15; ЧДЦ=2");
					ОбластьСтрокаДеталей.Параметры.Количество = Формат(СтрокаДеталей.Количество*СтрокаДеталей.Коэффициент, ФорматВыводаКоличества);
					ОбластьСтрокаДеталей.Параметры.Единица = СтрокаДеталей.ЕдиницаИзмерения;
					ОбластьСтрокаДеталей.Параметры.Сумма = Формат(СтрокаДеталей.СуммаВсего, ФорматВыводаСуммы);
					Если ЕстьСкидкаПоДеталям Тогда
						ОбластьСтрокаДеталей.Параметры.Скидка = Формат(СтрокаДеталей.СуммаСкидки  +СтрокаДеталей.СуммаСкидкиСтроки 
																				+ СтрокаДеталей.СуммаСкидкиБонусами, ФорматВыводаСуммы);
					КонецЕсли;
					ОбластьСтрокаДеталей.Параметры.ДопИнформация = СокрП(СтрокаДеталей.СкладКомпании.Наименование);
					Если СтрокаДеталей.ПримечаниеНоменклатураПечать <> "" Тогда
						ОбластьСтрокаПримечаниеНоменклатура.Параметры.ПримечаниеНоменклатура = СтрокаДеталей.ПримечаниеНоменклатураПечать;
					КонецЕсли;
					// Обновим итоги по документу
					ИтогоСуммаДеталей = ИтогоСуммаДеталей + СтрокаДеталей.СуммаВсего;
					ИтогоСуммаСкидкиДеталей	= ИтогоСуммаСкидкиДеталей + СтрокаДеталей.СуммаСкидки + СтрокаДеталей.СуммаСкидкиСтроки+СтрокаДеталей.СуммаСкидкиБонусами;
					ИтогоКоличествоДеталей = ИтогоКоличествоДеталей + СтрокаДеталей.Количество * СтрокаДеталей.Коэффициент;
				КонецЕсли;
				
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаДеталей, ОбластьШапкаДеталей, ОбластьИтоговПоСтраницеДетали, НомерСтраницы, СтруктураИтоговПоСтранице,Документ, ?(Ном=КоличествоДеталей, МассивОбластиПодвала, Неопределено));
				Если НЕ СтрокаДеталей = Неопределено И СтрокаДеталей.ПримечаниеНоменклатураПечать <> "" Тогда
					УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаПримечаниеНоменклатура,,,,, Документ);
				КонецЕсли;	
				// инициализация итогов по странице
				Если НомерСтраницы <> НомерСтраницыПред Тогда
					СтруктураИтоговПоСтранице = Новый Структура("СуммаВсего, СуммаСкидки, Количество", 0, 0, 0);
					НомерСтраницыПред = НомерСтраницы;
					ОбластьШапкаДеталей.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
				КонецЕсли;
				
				Если СтрокаДеталей = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаДеталей, СтруктураИтоговПоСтранице);
			КонецЦикла;
			// довыводим последний итог по странице, если страниц больше единицы
			Если НомерСтраницы > 2 Тогда
				УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтоговПоСтраницеДетали, СтруктураИтоговПоСтранице, Документ);
			КонецЕсли;
			
			// Вывод подвала табличной части деталей
			ОбластьПодвалДеталей.Параметры.Сумма = Формат(ИтогоСуммаДеталей, ФорматВыводаСуммы);
			ОбластьПодвалДеталей.Параметры.Количество = Формат(ИтогоКоличествоДеталей, ФорматВыводаКоличества);
			Если ЕстьСкидкаПоДеталям Тогда
				ОбластьПодвалДеталей.Параметры.Скидка = Формат(ИтогоСуммаСкидкиДеталей, ФорматВыводаСуммы);
			КонецЕсли;
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвалДеталей, , , НомерСтраницы, , Документ);
			
			Если ЕстьПричиныОбращений Тогда
				ОбластьПодвалПричиныОбращения.Параметры.Сумма = Формат(ИтогоСуммаРабот + ИтогоСуммаДеталей, ФорматВыводаСуммы);
				ТабличныйДокумент.Вывести(ОбластьПодвалПричиныОбращения);
			КонецЕсли;
			
			ИтогоОбщийПоСумме = ИтогоОбщийПоСумме + ИтогоСуммаРабот + ИтогоСуммаДеталей;
			
		КонецЦикла;
		
		// Вывод подвала документа
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьПодвал.Параметры.Сумма = Формат(ИтогоОбщийПоСумме, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.ДатаДок = Формат(Документ.ДатаСоздания, "ДЛФ=DD");
		ОбластьПодвал.Параметры.Мастер = Документ.Мастер;
		ОбластьПодвал.Параметры.МастерПолноеНаименование = Документ.Мастер.Наименование;
		НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// Верхние колонтитулы
		ТабличныйДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
		ТабличныйДокумент.ВерхнийКолонтитул.Выводить = Истина;
		ТабличныйДокумент.ВерхнийКолонтитул.НачальнаяСтраница = 2;
		ТабличныйДокумент.ВерхнийКолонтитул.ТекстСправа = "Заказ-наряд № " + Документ.Номер + " от " 
			+ Формат(Документ.ДатаСоздания, "ДФ = дд.ММ.гггг");
		ТабличныйДокумент.ВерхнийКолонтитул.Шрифт = Новый Шрифт(ТабличныйДокумент.ВерхнийКолонтитул.Шрифт,,,, 
			Истина, Истина);
		
		Автомобиль = Документ.СводныйРемонтныйЗаказ.Автомобиль;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ТабицаЗаказНаряд.Номер,
		|	ТабицаЗаказНаряд.ВидРемонта,
		|	ТабицаЗаказНаряд.Состояние,
		|	ТабицаЗаказНаряд.ДатаСоздания,
		|	ТабицаЗаказНаряд.Ссылка КАК ЗаказНаряд
		|ИЗ
		|	Документ.ЗаказНаряд КАК ТабицаЗаказНаряд
		|ГДЕ
		|	ТабицаЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль = &Автомобиль И 
		|	((НЕ ТабицаЗаказНаряд.Состояние = ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.Выполнен)) И 
		|	(НЕ ТабицаЗаказНаряд.Состояние = ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.Закрыт))) И 
		|	ТабицаЗаказНаряд.ПометкаУдаления = ЛОЖЬ И 
		|	(НЕ ТабицаЗаказНаряд.Ссылка = &Ссылка)");
		Запрос.УстановитьПараметр("Автомобиль", Автомобиль);
		Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
		
		ТаблицаЗН = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаЗН.Количество() > 0 Тогда
			
			// Вывод шапки табличной части деталей
			ОбластьСписокОткрытыхЗН.Параметры.Автомобиль             = Автомобиль;
			ОбластьСписокОткрытыхЗН.Параметры.АвтомобильПредставление = СокрЛП(Автомобиль);
			
			// Если помещается только шапка, но ни одной строчки, то шапку переносим на след. страницу.
			ТабДокВрем = Новый ТабличныйДокумент;
			ТабДокВрем.ПолеСверху = 10; ТабДокВрем.ПолеСнизу  = 0;
			ТабДокВрем.ПолеСлева  = 0; ТабДокВрем.ПолеСправа = 0;
			ТабДокВрем.Вывести(ОбластьСписокОткрытыхЗН);
			ОбластьМакетаСтрокаВрем = Макет.ПолучитьОбласть("СтрокаСписокОткрытыхЗН");
			
			ТекОбласть = ОбластьМакетаСтрокаВрем.Область(1,, 1);
			ОбластьМакетаСтрокаВрем.Параметры.Заполнить(ТаблицаЗН[0]);
			
			ТабДокВрем.Вывести(ОбластьМакетаСтрокаВрем);
			ТабДокВрем.Вывести(ОбластьИтоговПоСтраницеСписокЗН);
			Если НЕ ТабличныйДокумент.ПроверитьВывод(ТабДокВрем) Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьСписокОткрытыхЗН);
			
			НомерСтраницы = 2;
			НомерСтраницыПред = 2;
			ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Список заказ-нарядов по %1'"), СокрЛП(Автомобиль));
			
			ОбластьШапкаСписокОткрытыхЗН = ОбластьСписокОткрытыхЗН.ПолучитьОбласть("ШапкаСписокОткрытыхЗН");
			
			// заполним параметры шапки таблицы для следующего листа
			ОбластьШапкаСписокОткрытыхЗН.Параметры.ТекстЗаголовка = ТекстЗаголовка;
			ОбластьШапкаСписокОткрытыхЗН.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			
			СтруктураИтоговПоСтранице = Новый Структура;
			
			КоличествоЗН = ТаблицаЗН.Количество();
			
			// Вывод табличной части открытые заказ-наряды
			Ном = 0;
			МассивОбластиПодвала = Новый Массив;
			МассивОбластиПодвала.Добавить(ОбластьПодвалСписокОткрытыхЗН);
			Для Каждого СтрокаЗН Из ТаблицаЗН Цикл
				Ном = Ном + 1;
				
				ОбластьСтрокаСписокОткрытыхЗН.Параметры.Заполнить(СтрокаЗН);
				ОбластьСтрокаСписокОткрытыхЗН.Параметры.НомСтр = Ном;
				
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаСписокОткрытыхЗН, ОбластьШапкаСписокОткрытыхЗН, ОбластьИтоговПоСтраницеСписокЗН, НомерСтраницы, СтруктураИтоговПоСтранице, Документ, ?(Ном=КоличествоЗН, МассивОбластиПодвала, Неопределено));
				
				// инициализация итогов по странице
				Если НомерСтраницы <> НомерСтраницыПред Тогда
					НомерСтраницыПред = НомерСтраницы;
					ОбластьШапкаСписокОткрытыхЗН.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
				КонецЕсли;
				
			КонецЦикла;
			// довыводим последний итог по странице, если страниц больше единицы
			Если НомерСтраницы > 2 Тогда
				УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтоговПоСтраницеСписокЗН, СтруктураИтоговПоСтранице, Документ);
			КонецЕсли;
			
			// Вывод подвала табличной части деталей
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвалСписокОткрытыхЗН, , , НомерСтраницы, , Документ);
		КонецЕсли;
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаряд_СопроводительныйЛист";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "ЗаявкаНаДетали"
// Возвращает сформированный табличный документ:
Функция ПечатьЗаявкаНаДетали(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		ФорматПредставленияГодаВыпускаАвтомобиля = АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Документ);
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаряд.ПФ_MXL_ЗаявкаНаДетали");
		
		ОбластьШапка  = Макет.ПолучитьОбласть("Шапка");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		
		НомерДляПечати=УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		
		// Вывод шапки документа
		ОбластьШапка.Параметры.Организация = Документ.Организация;
		ОбластьШапка.Параметры.ФирмаПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация, Документ.Дата);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ДляПечати = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьШапка.Параметры.ФирмаАдресЮридический = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Организация, Новый Структура("АдресЮридический", " "), ДополнительныеПараметры);
		
		ОбластьШапка.Параметры.ФирмаТелефоны = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Организация, Новый Структура("ТелефонРабочий", " "), ДополнительныеПараметры);
		
		ОбластьШапка.Параметры.НомерДок = НомерДляПечати;
		ОбластьШапка.Параметры.ДатаДок = Формат(Документ.ДатаСоздания, "ДФ = дд.ММ.гггг");
		
		Заказчик = Документ.СводныйРемонтныйЗаказ.Заказчик;
		
		ОбластьШапка.Параметры.Заказчик = Заказчик;
		ОбластьШапка.Параметры.ЗаказчикПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Заказчик, Документ.Дата);
		ОбластьШапка.Параметры.ЗаказчикАдресПочтовый = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказчик, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.ЗаказчикТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказчик, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.Контрагент = Документ.Контрагент;
		ОбластьШапка.Параметры.КонтрагентПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент, Документ.Дата);
		ОбластьШапка.Параметры.КонтрагентИНН = Документ.Контрагент.ИНН;
		ОбластьШапка.Параметры.КонтрагентАдресЮридический = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.КонтрагентТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		
		Автомобиль = Документ.СводныйРемонтныйЗаказ.Автомобиль;
		
		Если ЗначениеЗаполнено(Автомобиль) Тогда
			ОбластьШапка.Параметры.Автомобиль = Автомобиль;
			ОбластьШапка.Параметры.АвтомобильКод = Автомобиль.VIN;
			ОбластьШапка.Параметры.АвтомобильМодель = Автосервис.МаркаМодельАвтомобиля(Автомобиль);
			ОбластьШапка.Параметры.АвтомобильГодВыпуска = Формат(Автомобиль.ГодВыпуска,ФорматПредставленияГодаВыпускаАвтомобиля);
			ОбластьШапка.Параметры.АвтомобильНомерДвигателя = Автомобиль.НомерДвигателя;
			ОбластьШапка.Параметры.АвтомобильНомерШасси = Автомобиль.НомерШасси;
			ОбластьШапка.Параметры.АвтомобильНомерКузова = Автомобиль.НомерКузова;
			ОбластьШапка.Параметры.АвтомобильЦвет = Автомобиль.Цвет;
			
			ОбластьШапка.Параметры.АвтомобильГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер, Документ.ДатаСоздания);
			ОбластьШапка.Параметры.АвтомобильТехПаспорт = СокрЛП(Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ТехПаспорт, Документ.ДатаСоздания));
			
			Пробег = ?(Документ.Пробег > Документ.СводныйРемонтныйЗаказ.Пробег, 
						Документ.Пробег, 
						Документ.СводныйРемонтныйЗаказ.Пробег);
			ОбластьШапка.Параметры.АвтомобильПробег = Формат(Пробег, "ЧЦ=10");
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		// Вывод подвала документа
		ОбластьПодвал.Параметры.Заказчик = Заказчик;
		ОбластьПодвал.Параметры.ЗаказчикПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Заказчик, Документ.Дата);
		ОбластьПодвал.Параметры.Контрагент = Документ.Контрагент;
		ОбластьПодвал.Параметры.КонтрагентПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент, Документ.Дата);
		ОбластьПодвал.Параметры.Мастер = Документ.Мастер;
		ОбластьПодвал.Параметры.МастерПолноеНаименование = Документ.Мастер.Наименование;
		ОбластьПодвал.Параметры.ДатаДок = Формат(Документ.ДатаСоздания, "ДЛФ=DD");
		ОбластьПодвал.Параметры.ТекВремя = Формат(ТекущаяДатаСеанса(), "ДФ = ЧЧ.мм.сс");
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	ТабличныйДокумент.Автомасштаб = Истина;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаряд_ЗаявкаНаДетали";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "Квитанция"
// Возвращает сформированный табличный документ:
Функция ПечатьКвитанция(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// зададим параметры макета
	ТабличныйДокумент.ПолеСверху = 10; // поле равно высоте колонтитулов
	ТабличныйДокумент.ПолеСлева  = 0;
	ТабличныйДокумент.ПолеСнизу  = 0;
	ТабличныйДокумент.ПолеСправа = 0;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		ФорматПредставленияГодаВыпускаАвтомобиля = АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Документ);
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ДатаНаПечать = ?(НЕ ЗначениеЗаполнено(Документ.ДатаЗакрытия), Документ.ДатаСоздания, Документ.ДатаЗакрытия);
		
		Если Документ.Ссылка.Состояние<>Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
			// Контроль запрета печати без закрытия
			Если НЕ ПраваИНастройкиПользователя.Значение("ПечатьЗаказНарядаБезЗакрытия", Документ) Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Печать квитанции заказ-наряда без его закрытия запрещена.'"));
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		// Контроль запрета печати при наличии открытых заказ-нарядов
		Если НЕ ПраваИНастройкиПользователя.Значение("ПечатьЗаказНарядаПриНаличииОткрытых", Документ) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказНаряд.Ссылка) КАК Количество
			|ИЗ
			|	Документ.ЗаказНаряд КАК ЗаказНаряд
			|ГДЕ
			|	ЗаказНаряд.Состояние <> ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.Закрыт) И
			|	ЗаказНаряд.ПометкаУдаления = ЛОЖЬ И
			|	ЗаказНаряд.СводныйРемонтныйЗаказ.Заказчик = &Заказчик И
			|	ЗаказНаряд.Ссылка <> &ЭтотДокумент";
			Запрос.УстановитьПараметр("Заказчик", Документ.СводныйРемонтныйЗаказ.Заказчик);
			Запрос.УстановитьПараметр("ЭтотДокумент", Документ.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Если Выборка.Количество>0 Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'Печать квитанции заказ-наряда заказчика %1 запрещено, так как у него имеются другие открытые заказ-наряды.'"),
							Документ.СводныйРемонтныйЗаказ.Заказчик.НаименованиеПолное
						)
					);
					Продолжить;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
		
		ТаблицаТоваров         = Документ.Товары.Выгрузить();
		ТаблицаРабот           = Документ.Автоработы.Выгрузить();
		ТаблицаПричинОбращений = Документ.ПричиныОбращения.Выгрузить();
		
		ВыводитьКод = ПраваИНастройкиПользователя.Значение("ВыводитьКодВПечатныхФормах", Документ);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаряд.ПФ_MXL_Квитанция");
		
		ЕстьСкидкаПоДеталям = Ложь;
		Если Документ.Товары.Итог("СуммаСкидки") <> 0 ИЛИ Документ.Товары.Итог("СуммаСкидкиСтроки") <> 0 
													ИЛИ Документ.Товары.Итог("СуммаСкидкиБонусами") <> 0 Тогда
			ЕстьСкидкаПоДеталям = Истина;
		КонецЕсли;
		
		ЕстьСкидкаПоРаботам = Ложь;
		Если Документ.Автоработы.Итог("СуммаСкидки") <> 0 ИЛИ Документ.Автоработы.Итог("СуммаСкидкиСтроки") <> 0 
													ИЛИ Документ.Автоработы.Итог("СуммаСкидкиБонусами") <> 0 Тогда
			ЕстьСкидкаПоРаботам = Истина;
		КонецЕсли;
		
		ЕстьПричиныОбращений = (ТаблицаПричинОбращений.Количество() > 0);
		
		Если НЕ ЕстьПричиныОбращений Тогда
			ТаблицаПричинОбращений.Добавить();
		Иначе
			ПричиныИАвтоработы = ПричиныОбращенийСлужебный.СоставПричинОбращенийПоЗаказНаряду(Документ);
			ТаблицаРабот.Колонки.Добавить("ИдентификаторПричиныОбращения");
			Для Каждого Авторабота Из ТаблицаРабот Цикл
				НайденныеСтроки = ПричиныИАвтоработы.НайтиСтроки(Новый Структура("Авторабота", Авторабота.ИдентификаторРаботы));
				Если НайденныеСтроки.Количество() > 0 Тогда
					Авторабота.ИдентификаторПричиныОбращения = НайденныеСтроки[0].ПричинаОбращения;
				Иначе
					Авторабота.ИдентификаторПричиныОбращения = ТаблицаПричинОбращений[0].ИдентификаторПричиныОбращения;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОбластьСкидка = Макет.Область("Скидка");
		
		ОбластьУслуги = Макет.ПолучитьОбласть("Услуги");
		ОбластьДетали = Макет.ПолучитьОбласть("Детали");
		
		ОбластьСтрокаДеталей	            = Макет.ПолучитьОбласть("СтрокаДеталей");
		ОбластьСтрокаПримечаниеНоменклатура = Макет.ПолучитьОбласть("СтрокаПримечаниеНоменклатура");
		ОбластьИтоговПоСтраницеДетали	    = Макет.ПолучитьОбласть("ИтогиПоСтраницеДеталей");
		ОбластьПодвалДеталей	            = Макет.ПолучитьОбласть("ПодвалДетали");
		
		ОбластьШапкаДеталейКлиента				    = Макет.ПолучитьОбласть("ШапкаДеталейКлиента");
		ОбластьСтрокаПримечаниеНоменклатураКлиента  = Макет.ПолучитьОбласть("СтрокаПримечаниеНоменклатураКлиента");
		ОбластьСтрокаДеталейКлиента				    = Макет.ПолучитьОбласть("СтрокаДеталейКлиента");
		ОбластьИтоговПоСтраницеДеталиКлиента	    = Макет.ПолучитьОбласть("ИтогиПоСтраницеДеталейКлиента");
		ОбластьПодвалДеталейКлиента 			    = Макет.ПолучитьОбласть("ПодвалКлиента");
		
		ОбластьСтрокаУслуг		        = Макет.ПолучитьОбласть("СтрокаРабот");
		ОбластьСтрокаПримечаниеРаботы   = Макет.ПолучитьОбласть("СтрокаПримечаниеРаботы");
		ОбластьИтоговПоСтраницеУслуги	= Макет.ПолучитьОбласть("ИтогиПоСтраницеРабот");
		ОбластьПодвалУслуг		        = Макет.ПолучитьОбласть("ПодвалУслуги");
		
		ОбластьШапкаПричиныОбращения  = Макет.ПолучитьОбласть("ШапкаПричиныОбращения");
		ОбластьПодвалПричиныОбращения = Макет.ПолучитьОбласть("ПодвалПричиныОбращения");
		
		БезЛинии 		= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		ОбычнаяЛиния	= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		// Настроем колонки вывода деталей если не было скидок
		Если Не ЕстьСкидкаПоДеталям Тогда
			ПоложениеШапкиДеталей = ОбластьДетали.Область("ШапкаДеталей").Низ;
			ПозицияКолонки = ОбластьСкидка.Лево;
			Пока ПозицияКолонки > 6 Цикл
				ОбластьДетали.Область(ПоложениеШапкиДеталей-1,ПозицияКолонки,ПоложениеШапкиДеталей-1,ПозицияКолонки).Текст = ОбластьДетали.Область(ПоложениеШапкиДеталей-1,ПозицияКолонки-1,ПоложениеШапкиДеталей-1,ПозицияКолонки-1).Текст;
				ОбластьДетали.Область(ПоложениеШапкиДеталей,ПозицияКолонки,ПоложениеШапкиДеталей,ПозицияКолонки).Текст = ОбластьДетали.Область(ПоложениеШапкиДеталей,ПозицияКолонки-1,ПоложениеШапкиДеталей,ПозицияКолонки-1).Текст;
				
				ОбластьИсточник = ОбластьСтрокаДеталей.Область(1,ПозицияКолонки-1,1,ПозицияКолонки-1);
				ОбластьПриемник = ОбластьСтрокаДеталей.Область(1,ПозицияКолонки,1,ПозицияКолонки);
				ОбластьПриемник.Текст 		= ОбластьИсточник.Текст;
				ОбластьПриемник.Заполнение	= ОбластьИсточник.Заполнение;
				ОбластьПриемник.Параметр	= ОбластьИсточник.Параметр;
				
				ОбластьИсточник = ОбластьИтоговПоСтраницеДетали.Область(1, ПозицияКолонки - 1, 1, ПозицияКолонки - 1);
				ОбластьПриемник = ОбластьИтоговПоСтраницеДетали.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				ОбластьПриемник.Текст 		= ОбластьИсточник.Текст;
				ОбластьПриемник.Заполнение	= ОбластьИсточник.Заполнение;
				ОбластьПриемник.Параметр	= ОбластьИсточник.Параметр;
				
				ОбластьИсточник = ОбластьПодвалДеталей.Область(1, ПозицияКолонки - 1, 1, ПозицияКолонки - 1);
				ОбластьПриемник = ОбластьПодвалДеталей.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				ОбластьПриемник.Текст 		= ОбластьИсточник.Текст;
				ОбластьПриемник.Заполнение	= ОбластьИсточник.Заполнение;
				ОбластьПриемник.Параметр	= ОбластьИсточник.Параметр;
				
				ПозицияКолонки = ПозицияКолонки - 1;
			КонецЦикла;
			
			ОбластьДетали.Область(ПоложениеШапкиДеталей - 1, 4, ПоложениеШапкиДеталей - 1, 6).Объединить();
			ОбластьДетали.Область(ПоложениеШапкиДеталей, 4, ПоложениеШапкиДеталей, 6).Объединить();
			ОбластьСтрокаДеталей.Область(1, 4, 1, 6).Объединить();
			
			ТекОбласть = ОбластьИтоговПоСтраницеДетали.Область(1, 2, 1, 6);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСнизу = БезЛинии;
			
			ТекОбласть = ОбластьПодвалДеталей.Область(1, 2, 1, 6);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСнизу = БезЛинии;
			
			ТекОбласть = ОбластьИтоговПоСтраницеДетали.Область(1, 8, 1, 9);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСлева = ОбычнаяЛиния;
			ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ТекОбласть.Текст = НСтр("ru = 'на сумму:'");
			
			ТекОбласть = ОбластьПодвалДеталей.Область(1, 8, 1, 9);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСлева = ОбычнаяЛиния;
			ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ТекОбласть.Текст = НСтр("ru = 'на сумму:'");
			
			ПозицияКолонки = ОбластьСкидка.Лево - 1;
			Пока ПозицияКолонки <= ОбластьДетали.ШиринаТаблицы Цикл
				ОбластьДетали.Область(ПоложениеШапкиДеталей, ПозицияКолонки, ПоложениеШапкиДеталей, ПозицияКолонки).Текст
																										= ПозицияКолонки - 3;
				ПозицияКолонки = ПозицияКолонки + 1;
			КонецЦикла;
		КонецЕсли;
		
		// Настроем колонки вывода услуг если не было скидок
		Если Не ЕстьСкидкаПоРаботам Тогда
			ПоложениеШапкиУслуг = ОбластьУслуги.Область("ШапкаУслуг").Низ;
			ПозицияКолонки = ОбластьСкидка.Лево;
			Пока ПозицияКолонки > 5 Цикл
				ОбластьУслуги.Область(ПоложениеШапкиУслуг-1,ПозицияКолонки,ПоложениеШапкиУслуг-1,ПозицияКолонки).Текст = ОбластьУслуги.Область(ПоложениеШапкиУслуг-1,ПозицияКолонки-1,ПоложениеШапкиУслуг-1,ПозицияКолонки-1).Текст;
				ОбластьУслуги.Область(ПоложениеШапкиУслуг,ПозицияКолонки,ПоложениеШапкиУслуг,ПозицияКолонки).Текст = ОбластьУслуги.Область(ПоложениеШапкиУслуг,ПозицияКолонки-1,ПоложениеШапкиУслуг,ПозицияКолонки-1).Текст;
				
				ОбластьИсточник = ОбластьСтрокаУслуг.Область(1, ПозицияКолонки - 1, 1, ПозицияКолонки - 1);
				ОбластьПриемник = ОбластьСтрокаУслуг.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				ОбластьПриемник.Текст 		= ОбластьИсточник.Текст;
				ОбластьПриемник.Заполнение	= ОбластьИсточник.Заполнение;
				ОбластьПриемник.Параметр	= ОбластьИсточник.Параметр;
				
				ОбластьИсточник = ОбластьИтоговПоСтраницеУслуги.Область(1, ПозицияКолонки - 1, 1, ПозицияКолонки - 1);
				ОбластьПриемник = ОбластьИтоговПоСтраницеУслуги.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				ОбластьПриемник.Текст 		= ОбластьИсточник.Текст;
				ОбластьПриемник.Заполнение	= ОбластьИсточник.Заполнение;
				ОбластьПриемник.Параметр	= ОбластьИсточник.Параметр;
				
				ОбластьИсточник = ОбластьПодвалУслуг.Область(1, ПозицияКолонки - 1, 1, ПозицияКолонки - 1);
				ОбластьПриемник = ОбластьПодвалУслуг.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				ОбластьПриемник.Текст 		= ОбластьИсточник.Текст;
				ОбластьПриемник.Заполнение	= ОбластьИсточник.Заполнение;
				ОбластьПриемник.Параметр	= ОбластьИсточник.Параметр;
				
				ПозицияКолонки = ПозицияКолонки-1;
			КонецЦикла;
			
			ОбластьУслуги.Область(ПоложениеШапкиУслуг - 1, 4, ПоложениеШапкиУслуг - 1, 5).Объединить();
			ОбластьУслуги.Область(ПоложениеШапкиУслуг, 4, ПоложениеШапкиУслуг, 5).Объединить();
			ОбластьСтрокаУслуг.Область(1, 4, 1, 5).Объединить();
			
			ТекОбласть = ОбластьИтоговПоСтраницеУслуги.Область(1, 2, 1, 5);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСнизу = БезЛинии;
			
			ТекОбласть = ОбластьПодвалУслуг.Область(1, 2, 1, 5);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСнизу = БезЛинии;
			
			ТекОбласть = ОбластьИтоговПоСтраницеУслуги.Область(1, 7, 1, 9);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСлева = ОбычнаяЛиния;
			ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ТекОбласть.Текст = НСтр("ru = 'на сумму:'");
			
			ТекОбласть = ОбластьПодвалУслуг.Область(1, 7, 1, 9);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСлева = ОбычнаяЛиния;
			ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ТекОбласть.Текст = НСтр("ru = 'на сумму:'");
			
			ПозицияКолонки = ОбластьСкидка.Лево - 1;
			Пока ПозицияКолонки <= ОбластьУслуги.ШиринаТаблицы Цикл
				ОбластьУслуги.Область(ПоложениеШапкиУслуг,ПозицияКолонки,ПоложениеШапкиУслуг,ПозицияКолонки).Текст = ПозицияКолонки-2;
				ПозицияКолонки = ПозицияКолонки + 1;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ВыводитьКод Тогда
			ВремОбластьДетали=ОбластьУслуги.Область(4, 4, 4, 4).Текст;
			ОбластьУслуги.Область(4, 3, 4, 4).Объединить();
			ОбластьУслуги.Область(5, 3, 5, 4).Объединить();
			ОбластьУслуги.Область(4, 3, 4, 4).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ОбластьУслуги.Область(4, 3, 4, 3).Текст = ВремОбластьДетали;
			
			ОбластьСтрокаУслуг.Область(1, 3, 1, 4).Объединить();
			ОбластьСтрокаУслуг.Область(1, 3, 1, 3).Параметр = ВремОбластьДетали;
			ОбластьСтрокаУслуг.Область(1, 3, 1, 3).ПараметрРасшифровки = "Номенклатура";
			
			ВремОбластьДетали = ОбластьДетали.Область(4,4,4,4).Текст;
			ОбластьДетали.Область(4, 3, 4, 5).Объединить();
			ОбластьДетали.Область(5, 3, 5, 5).Объединить();
			ОбластьДетали.Область(4, 3, 4, 5).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ОбластьДетали.Область(4, 3, 4, 3).Текст = ВремОбластьДетали;
			
			ОбластьСтрокаДеталей.Область(1, 3, 1, 5).Объединить();
			ОбластьСтрокаДеталей.Область(1, 3, 1, 3).Параметр = ВремОбластьДетали;
			ОбластьСтрокаДеталей.Область(1, 3, 1, 3).ПараметрРасшифровки = "Номенклатура";
			
			Ном = 3;
			Для Сч = 4 По 11 Цикл
				Если НЕ ЗначениеЗаполнено(ОбластьДетали.Область(5, Сч + 1, 5, Сч + 1).Текст) Тогда
					Продолжить;
				КонецЕсли;
				ОбластьДетали.Область(5, Сч + 1, 5, Сч + 1).Текст = Ном;
				Ном = Ном + 1;
			КонецЦикла;
			
			Ном = 3;
			Для Сч = 4 По 10 Цикл
				Если НЕ ЗначениеЗаполнено(ОбластьУслуги.Область(5, Сч + 1, 5, Сч + 1).Текст) Тогда
					Продолжить;
				КонецЕсли;
				ОбластьУслуги.Область(5, Сч + 1, 5, Сч + 1).Текст = Ном;
				Ном = Ном + 1;
			КонецЦикла;
		КонецЕсли;
		ОбластьШапкаДеталей = ОбластьДетали.ПолучитьОбласть("ШапкаДеталей");
		ОбластьШапкаУслуг = ОбластьУслуги.ПолучитьОбласть("ШапкаУслуг");
		
		НомерДляПечати=УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		
		// Проверим наличие причин обращений
		Если НЕ ЕстьПричиныОбращений Тогда
			
			ТекОбласть = ОбластьШапкаПричиныОбращения.Область(2,, 2);
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			ОбластьШапкаПричиныОбращения.Область(2, 2, 2, 2).Текст = "";
			
			ТекОбласть = ОбластьШапкаПричиныОбращения.Область(3,, 3);
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			ОбластьШапкаПричиныОбращения.Область(3, 2, 3, 2).Текст = "";
			
			ТекОбласть = ОбластьПодвалПричиныОбращения.Область(1,, 1);
			ТекОбласть.Очистить(Истина, Истина, Истина);
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			
			ТекОбласть = ОбластьПодвалПричиныОбращения.Область(2,, 2);
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			
		Иначе
			
			ТекОбласть = ОбластьДетали.Область(2,, 2);
			ОбластьДетали.Область(2, 2, 2, 2).Текст = СтрШаблон(
				НСтр("ru = 'Расходная накладная к заказ-наряду № %1 от %2 к причине обращения'"),
				НомерДляПечати,
				Формат(ДатаНаПечать, "ДЛФ=D")
			);
			
			ТекОбласть = ОбластьУслуги.Область(1,, 1);
			ОбластьУслуги.Область(2, 2, 2, 2).Текст = СтрШаблон(
				НСтр("ru = 'Выполненные работы по заказ-наряду № %1 от %2 к причине обращения'"),
				НомерДляПечати,
				Формат(ДатаНаПечать, "ДЛФ=D")
			);
			
		КонецЕсли;
		
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		Заказчик = Документ.СводныйРемонтныйЗаказ.Заказчик;
		
		// Вывод шапки документа
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.Организация = Документ.Организация;
		ОбластьШапка.Параметры.ФирмаПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация, Документ.Дата);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ДляПечати = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьШапка.Параметры.ФирмаАдресЮридический = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Организация, Новый Структура("АдресЮридический", " "), ДополнительныеПараметры);
		
		ОбластьШапка.Параметры.ФирмаТелефоны = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Организация, Новый Структура("ТелефонРабочий", " "), ДополнительныеПараметры);
		
		ОбластьШапка.Параметры.НомерДок = НомерДляПечати;
		ОбластьШапка.Параметры.ДатаДок = Формат(ДатаНаПечать, "ДФ = дд.ММ.гггг");
		ОбластьШапка.Параметры.Заказчик = Заказчик;
		ОбластьШапка.Параметры.ЗаказчикПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Заказчик, Документ.Дата);
		ОбластьШапка.Параметры.ЗаказчикАдресПочтовый = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказчик, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.ЗаказчикТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказчик, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.Контрагент = Документ.Контрагент;
		ОбластьШапка.Параметры.КонтрагентПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент, Документ.Дата);
		ОбластьШапка.Параметры.КонтрагентИНН = Документ.Контрагент.ИНН;
		ОбластьШапка.Параметры.КонтрагентАдресЮридический = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.КонтрагентТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		
		Автомобиль = Документ.СводныйРемонтныйЗаказ.Автомобиль;
		
		Если ЗначениеЗаполнено(Автомобиль) Тогда
			ОбластьШапка.Параметры.АвтомобильГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер, Документ.ДатаСоздания);
			
			Пробег = ?(Документ.Пробег > Документ.СводныйРемонтныйЗаказ.Пробег, 
						Документ.Пробег, 
						Документ.СводныйРемонтныйЗаказ.Пробег);
			ОбластьШапка.Параметры.АвтомобильПробег = Формат(Пробег, "ЧЦ=10");
		КонецЕсли;
		ОбластьШапка.Параметры.Автомобиль = Автомобиль;
		ОбластьШапка.Параметры.АвтомобильКод = Автомобиль.VIN;
		ОбластьШапка.Параметры.АвтомобильМодель = Автосервис.МаркаМодельАвтомобиля(Автомобиль);
		ОбластьШапка.Параметры.АвтомобильГодВыпуска = 
			Формат(Автомобиль.ГодВыпуска, ФорматПредставленияГодаВыпускаАвтомобиля);
		
		ОбластьШапка.Параметры.ДатаСоздания = Формат(Документ.ДатаСоздания, "ДЛФ=D");
		ОбластьШапка.Параметры.ВремяСоздания = Формат(Документ.ДатаСоздания, "ДЛФ=T");
		ОбластьШапка.Параметры.ВидРемонта = Документ.ВидРемонта;
		ОбластьШапка.Параметры.Диспетчер = Документ.Диспетчер;
		ОбластьШапка.Параметры.СрокИсполнения = Формат(Документ.ДатаОкончания, "ДЛФ=D");
		ОбластьШапка.Параметры.Состояние = Документ.Состояние;
		ОбластьШапка.Параметры.Валюта = Документ.ВалютаДокумента;
		
		// выведем или удалим ШК
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьШапка, Документ);
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		КолонкаКода=УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах();
		КолонкаКода = СтрЗаменить(КолонкаКода, "/", Символы.ПС);
		
		ИтогоОбщийПоСумме = 0;
		ИтогоОбщийПоСуммеНДС = 0;
		
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		
		
		Для Каждого ПричинаОбращения Из ТаблицаПричинОбращений Цикл
			
			Если ЕстьПричиныОбращений Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ИдентификаторПричиныОбращения", ПричинаОбращения.ИдентификаторПричиныОбращения);
				Табл       = ТаблицаРабот.НайтиСтроки(ПараметрыОтбора);
				ТаблТовары = ТаблицаТоваров.НайтиСтроки(ПараметрыОтбора);
				
				ОбластьШапкаПричиныОбращения.Параметры.ПричинаОбращения           = ПричинаОбращения.ПричинаОбращения;
				ОбластьШапкаПричиныОбращения.Параметры.СодержаниеПричиныОбращения = ПричинаОбращения.ПричинаОбращенияСодержание;
				ТабличныйДокумент.Вывести(ОбластьШапкаПричиныОбращения);
								
			Иначе
				// Временная таблица
				Табл = ТаблицаРабот.Скопировать();
				ТаблТовары = ТаблицаТоваров.Скопировать();
			КонецЕсли;
			
			// Временная таблица
			КоличествоРабот = Табл.Количество();
			
			// инициализация итогов по документу
			ИтогоСуммаРабот	       = 0;
			ИтогоКоличествоРабот   = 0;
			ИтогоСуммаНДСРабот     = 0;
			ИтогоСуммаСкидкиРабот  = 0;
			ИтогоСуммаДеталей	   = 0;
			ИтогоКоличествоДеталей = 0;
			ИтогоСуммаНДСДеталей   = 0;
			ИтогоСуммаСкидкиДеталей  = 0;
			ИтогоКоличествоДеталейКлиента = 0;
			
			НомерСтраницы = 2;
			НомерСтраницыПред = 2;
			
			Если НЕ КоличествоРабот = 0 Тогда
				
				// Вывод шапки табличной части работ(услуг)
				Если ВыводитьКод Тогда
					ОбластьУслуги.Параметры.ИмяКолонкиКодов = КолонкаКода;
				КонецЕсли;
				
				Если ЕстьПричиныОбращений Тогда
					ОбластьУслуги.Область(2, 2, 2, 2).Текст = СтрШаблон(
						НСтр("ru = 'Выполненные работы по заказ-наряду № %1 от %2 к причине обращения ""%3""'"),
						НомерДляПечати,
						Формат(ДатаНаПечать, "ДЛФ=D"),
						ПричинаОбращения.ПричинаОбращения
					);
				Иначе
					// Вывод шапки табличной части работ(услуг)
					ОбластьУслуги.Параметры.НомерДок = НомерДляПечати;
					ОбластьУслуги.Параметры.ДатаДок = Формат(ДатаНаПечать, "ДЛФ=D");
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьУслуги);
				
				// Вывод табличной части работ(услуг)
				Если ЕстьПричиныОбращений Тогда
					ТекстЗаголовка = СтрШаблон(
						НСтр("ru = 'Выполненные работы по заказ-наряду № %1 от %2 к причине обращения: %3'"),
						НомерДляПечати,
						Формат(ДатаНаПечать, "ДЛФ=D"),
						ПричинаОбращения.ПричинаОбращения
					);
				Иначе
					ТекстЗаголовка = СтрШаблон(
						НСтр("ru = 'Выполненные работы по заказ-наряду № %1 от %2'"),
						НомерДляПечати,
						Формат(ДатаНаПечать, "ДЛФ=D")
					);
				КонецЕсли;
				
				// заполним параметры шапки таблицы для следующего листа
				ОбластьШапкаУслуг.Параметры.ТекстЗаголовка = ТекстЗаголовка;
				ОбластьШапкаУслуг.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
				Если ВыводитьКод Тогда
					ОбластьШапкаУслуг.Параметры.ИмяКолонкиКодов = КолонкаКода;
				КонецЕсли;
				// Вывод табличной части работ
				Ном	= 0;
				СтруктураИтоговПоСтранице = Новый Структура;
				СтруктураИтоговПоСтранице.Вставить("СуммаВсего",  0);
				СтруктураИтоговПоСтранице.Вставить("СуммаНДС",    0);
				СтруктураИтоговПоСтранице.Вставить("СуммаСкидки", 0);
				СтруктураИтоговПоСтранице.Вставить("Количество",  0);
				
				МассивОбластиПодвала = Новый Массив;
				МассивОбластиПодвала.Добавить(ОбластьПодвалУслуг);
				
				Для каждого СтрокаРабот Из Табл Цикл
					Ном = Ном + 1;
					
					ОбластьСтрокаУслуг.Параметры.НомСтр = Ном;
					Если ВыводитьКод Тогда
						ОбластьСтрокаУслуг.Параметры.Код = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаРабот.Авторабота);
					КонецЕсли;
					ОбластьСтрокаУслуг.Параметры.Номенклатура = СтрокаРабот.Авторабота;
					ОбластьСтрокаУслуг.Параметры.Наименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаРабот.Авторабота);
					ОбластьСтрокаУслуг.Параметры.Цена = Формат(СтрокаРабот.Цена, "ЧЦ=15; ЧДЦ=2");
					ОбластьСтрокаУслуг.Параметры.Коэффициент = Формат(СтрокаРабот.Коэффициент, "ЧЦ=10; ЧДЦ=3");
					ОбластьСтрокаУслуг.Параметры.Количество = Формат(СтрокаРабот.Количество, ФорматВыводаКоличества);
					ОбластьСтрокаУслуг.Параметры.Единица = СтрокаРабот.Нормочас;
					ОбластьСтрокаУслуг.Параметры.Сумма = Формат(СтрокаРабот.СуммаВсего, ФорматВыводаСуммы);
					ОбластьСтрокаУслуг.Параметры.НДС = Формат(СтрокаРабот.СуммаНДС, ФорматВыводаСуммы);
					Если ЕстьСкидкаПоРаботам Тогда
						ОбластьСтрокаУслуг.Параметры.Скидка = Формат(СтрокаРабот.СуммаСкидки + СтрокаРабот.СуммаСкидкиСтроки 
																			+ СтрокаРабот.СуммаСкидкиБонусами, ФорматВыводаСуммы);
					КонецЕсли;
					Если СтрокаРабот.ПримечаниеРаботыПечать <> "" Тогда
						ОбластьСтрокаПримечаниеРаботы.Параметры.ПримечаниеРаботы = СтрокаРабот.ПримечаниеРаботыПечать;
					КонецЕсли;
					// обновим итоги по документу
					ИтогоСуммаРабот = ИтогоСуммаРабот + СтрокаРабот.СуммаВсего;
					ИтогоКоличествоРабот = ИтогоКоличествоРабот + СтрокаРабот.Количество;
					ИтогоСуммаНДСРабот = ИтогоСуммаНДСРабот + СтрокаРабот.СуммаНДС;
					ИтогоСуммаСкидкиРабот = ИтогоСуммаСкидкиРабот + СтрокаРабот.СуммаСкидки + СтрокаРабот.СуммаСкидкиСтроки+СтрокаРабот.СуммаСкидкиБонусами;
					
					НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаУслуг, ОбластьШапкаУслуг, ОбластьИтоговПоСтраницеУслуги, НомерСтраницы, СтруктураИтоговПоСтранице,Документ, ?(Ном=КоличествоРабот, МассивОбластиПодвала, Неопределено));
					Если СтрокаРабот.ПримечаниеРаботыПечать <> "" Тогда
						УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаПримечаниеРаботы,,,,, Документ);
					КонецЕсли;	
					// инициализация итогов по странице
					Если НомерСтраницы <> НомерСтраницыПред Тогда
						СтруктураИтоговПоСтранице = Новый Структура;
						СтруктураИтоговПоСтранице.Вставить("СуммаВсего",  0);
						СтруктураИтоговПоСтранице.Вставить("СуммаНДС",    0);
						СтруктураИтоговПоСтранице.Вставить("СуммаСкидки", 0);
						СтруктураИтоговПоСтранице.Вставить("Количество",  0);
						НомерСтраницыПред = НомерСтраницы;
						ОбластьШапкаУслуг.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
					КонецЕсли;
					
					// обновим итоги по странице
					УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаРабот, СтруктураИтоговПоСтранице);
				КонецЦикла; 
				
				// довыводим последний итог по странице, если страниц больше единицы
				Если НомерСтраницы > 2 Тогда
					УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтоговПоСтраницеУслуги, СтруктураИтоговПоСтранице, Документ);
				КонецЕсли;
				
				// Вывод подвала табличной части работ(услуг)
				ОбластьПодвалУслуг.Параметры.Количество = Формат(ИтогоКоличествоРабот, ФорматВыводаКоличества);
				ОбластьПодвалУслуг.Параметры.Сумма = Формат(ИтогоСуммаРабот, ФорматВыводаСуммы);
				ОбластьПодвалУслуг.Параметры.СуммаНДС = Формат(ИтогоСуммаНДСРабот, ФорматВыводаСуммы);
				ОбластьПодвалУслуг.Параметры.ЧислоПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоСуммаРабот, Документ.ВалютаДокумента);
				Если ЕстьСкидкаПоРаботам Тогда
					ОбластьПодвалУслуг.Параметры.Скидка = Формат(ИтогоСуммаСкидкиРабот, ФорматВыводаСуммы);
				КонецЕсли;
				Если ИтогоСуммаНДСРабот <> 0 Тогда
					ОбластьПодвалУслуг.Параметры.ЧислоПрописью = ОбластьПодвалУслуг.Параметры.ЧислоПрописью 
						+ Символы.НПП
						+ НСтр("ru = 'в т.ч. НДС'")
						+ Символы.НПП
						+ Формат(ИтогоСуммаНДСРабот, ФорматВыводаСуммы)
						+ Символы.НПП
						+ Документ.ВалютаДокумента;
				КонецЕсли; 
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвалУслуг, , , НомерСтраницы, , Документ);
			КонецЕсли;
			
			// Формирование врем. таблицы товаров
			ТаблТовары = ТаблицаТоваров.Скопировать();
			КоличествоДеталей = ТаблТовары.Количество();
			
			Если НЕ КоличествоДеталей = 0 Тогда

				// Вывод шапки табличной части деталей
				Если ВыводитьКод Тогда 
					ОбластьДетали.Параметры.ИмяКолонкиКодов = КолонкаКода;
				КонецЕсли;
				
				Если ЕстьПричиныОбращений Тогда
					ОбластьДетали.Область(2, 2, 2, 2).Текст = СтрШаблон(
						НСтр("ru = 'Расходная накладная к заказ-наряду № %1 от %2 к причине обращения ""%3""'"),
						НомерДляПечати,
						Формат(ДатаНаПечать, "ДЛФ=D"),
						ПричинаОбращения.ПричинаОбращения
					);
				Иначе
					ОбластьДетали.Параметры.НомерДок = НомерДляПечати;
					ОбластьДетали.Параметры.ДатаДок = Формат(ДатаНаПечать, "ДЛФ=D");
				КонецЕсли;
				
				// Если помещается только шапка, но ни одной строчки, то шапку переносим на след. страницу.
				ТабДокВрем = Новый ТабличныйДокумент;
				ТабДокВрем.ПолеСверху = 10; ТабДокВрем.ПолеСнизу  = 0;
				ТабДокВрем.ПолеСлева  = 0; ТабДокВрем.ПолеСправа = 0;
				ТабДокВрем.Вывести(ОбластьДетали);
				ОбластьМакетаСтрокаВрем = Макет.ПолучитьОбласть("СтрокаДеталей");
				СтрокаДеталей = ТаблТовары[0];
				ТекОбласть = ОбластьМакетаСтрокаВрем.Область(1,, 1);
				// Присутствуют заполненные строки (заполняем не все параметры - только наиболее вероятно длинные).
				ТекТовар = СтрокаДеталей.Номенклатура;
				Если ВыводитьКод Тогда
					ОбластьМакетаСтрокаВрем.Параметры.Код = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(ТекТовар);
				КонецЕсли;
				ОбластьМакетаСтрокаВрем.Параметры.Наименование = ?(ТипЗнч(ТекТовар) = Тип("СправочникСсылка.Номенклатура"), УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ТекТовар),ТекТовар);
				ТабДокВрем.Вывести(ОбластьМакетаСтрокаВрем);
				ТабДокВрем.Вывести(ОбластьИтоговПоСтраницеДетали);
				Если НЕ ТабличныйДокумент.ПроверитьВывод(ТабДокВрем) Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					НомерСтраницы = НомерСтраницы + 1;
					НомерСтраницыПред = НомерСтраницы;
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьДетали);
				
				
				Если ЕстьПричиныОбращений Тогда
					ТекстЗаголовка = СтрШаблон(
						НСтр("ru = 'Расходная накладная к заказ-наряду № %1 от %2 к причине обращения: %3'"),
						НомерДляПечати,
						Формат(ДатаНаПечать, "ДЛФ=D"),
						ПричинаОбращения.ПричинаОбращения
					);
				Иначе
					ТекстЗаголовка = СтрШаблон(
						НСтр("ru = 'Расходная накладная к заказ-наряду № %1 от %2'"),
						НомерДляПечати,
						Формат(ДатаНаПечать, "ДЛФ=D")
					);
				КонецЕсли;
				
				// заполним параметры шапки таблицы для следующего листа
				ОбластьШапкаДеталей.Параметры.ТекстЗаголовка = ТекстЗаголовка;
				ОбластьШапкаДеталей.Параметры.НомерСтраницы = СтрШаблон(НСтр("ru = 'Страница: %1'"), НомерСтраницы);
				Если ВыводитьКод Тогда
					ОбластьШапкаДеталей.Параметры.ИмяКолонкиКодов = КолонкаКода;
				КонецЕсли;
				// Вывод табличной части деталей
				Ном = 0;
				СтруктураИтоговПоСтранице = Новый Структура;
				СтруктураИтоговПоСтранице.Вставить("СуммаВсего",  0);
				СтруктураИтоговПоСтранице.Вставить("СуммаНДС",    0);
				СтруктураИтоговПоСтранице.Вставить("СуммаСкидки", 0);
				СтруктураИтоговПоСтранице.Вставить("Количество",  0);
				
				МассивОбластиПодвала = Новый Массив;
				МассивОбластиПодвала.Добавить(ОбластьПодвалДеталей);
				
				Для каждого СтрокаДеталей из ТаблТовары Цикл
					Ном = Ном + 1;
					ОбластьСтрокаДеталей.Параметры.НомСтр = Ном;
					ТекНоменклатура = СтрокаДеталей.Номенклатура;
					Если ВыводитьКод Тогда
						ОбластьСтрокаДеталей.Параметры.Код = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(ТекНоменклатура);
					КонецЕсли;
					ОбластьСтрокаДеталей.Параметры.Номенклатура = ТекНоменклатура;
					ОбластьСтрокаДеталей.Параметры.Наименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ТекНоменклатура);
					ОбластьСтрокаДеталей.Параметры.Цена = Формат(СтрокаДеталей.Цена, "ЧЦ=15; ЧДЦ=2");
					ОбластьСтрокаДеталей.Параметры.Количество = Формат(СтрокаДеталей.Количество*СтрокаДеталей.Коэффициент, ФорматВыводаКоличества);
					ОбластьСтрокаДеталей.Параметры.Единица = СтрокаДеталей.ЕдиницаИзмерения;
					ОбластьСтрокаДеталей.Параметры.Сумма = Формат(СтрокаДеталей.СуммаВсего, ФорматВыводаСуммы);
					Если ЕстьСкидкаПоДеталям Тогда
						ОбластьСтрокаДеталей.Параметры.Скидка = Формат(СтрокаДеталей.СуммаСкидки+СтрокаДеталей.СуммаСкидкиСтроки+СтрокаДеталей.СуммаСкидкиБонусами, ФорматВыводаСуммы);
					КонецЕсли;
					ОбластьСтрокаДеталей.Параметры.НДС = Формат(СтрокаДеталей.СуммаНДС, ФорматВыводаСуммы);
					Если СтрокаДеталей.ПримечаниеНоменклатураПечать <> "" Тогда
						ОбластьСтрокаПримечаниеНоменклатура.Параметры.ПримечаниеНоменклатура = СтрокаДеталей.ПримечаниеНоменклатураПечать;
					КонецЕсли;
					// Обновим итоги по документу
					ИтогоСуммаДеталей      = ИтогоСуммаДеталей + СтрокаДеталей.СуммаВсего;
					ИтогоКоличествоДеталей = ИтогоКоличествоДеталей + СтрокаДеталей.Количество*СтрокаДеталей.Коэффициент;
					ИтогоСуммаСкидкиДеталей	= ИтогоСуммаСкидкиДеталей + СтрокаДеталей.СуммаСкидки + СтрокаДеталей.СуммаСкидкиСтроки+СтрокаДеталей.СуммаСкидкиБонусами;
					ИтогоСуммаНДСДеталей   = ИтогоСуммаНДСДеталей + СтрокаДеталей.СуммаНДС;
					
					НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаДеталей, ОбластьШапкаДеталей, ОбластьИтоговПоСтраницеДетали, НомерСтраницы, СтруктураИтоговПоСтранице,Документ, ?(Ном=КоличествоДеталей, МассивОбластиПодвала, Неопределено));
					Если СтрокаДеталей.ПримечаниеНоменклатураПечать <> "" Тогда
						УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаПримечаниеНоменклатура,,,,, Документ);
					КонецЕсли;	
					// инициализация итогов по странице
					Если НомерСтраницы <> НомерСтраницыПред Тогда
						СтруктураИтоговПоСтранице = Новый Структура;
						СтруктураИтоговПоСтранице.Вставить("СуммаВсего",  0);
						СтруктураИтоговПоСтранице.Вставить("СуммаНДС",    0);
						СтруктураИтоговПоСтранице.Вставить("СуммаСкидки", 0);
						СтруктураИтоговПоСтранице.Вставить("Количество",  0);
						НомерСтраницыПред = НомерСтраницы;
						ОбластьШапкаДеталей.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
					КонецЕсли;
					
					// обновим итоги по странице
					// СтруктураИтоговПоСтранице.СуммаВсего = СтруктураИтоговПоСтранице.СуммаВсего + СтрокаДеталей.СуммаВсего;
					// СтруктураИтоговПоСтранице.СуммаНДС   = СтруктураИтоговПоСтранице.СуммаНДС + СтрокаДеталей.СуммаНДС;
					// СтруктураИтоговПоСтранице.Количество = СтруктураИтоговПоСтранице.Количество
					// + СтрокаДеталей.Количество*СтрокаДеталей.Коэффициент;
					// СтруктураИтоговПоСтранице.СуммаСкидки = СтруктураИтоговПоСтранице.СуммаСкидки + СтрокаДеталей.СуммаСкидки;
					УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаДеталей, СтруктураИтоговПоСтранице);
				КонецЦикла;
				
				// довыводим последний итог по странице, если страниц больше единицы
				Если НомерСтраницы > 2 Тогда
					УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтоговПоСтраницеДетали, СтруктураИтоговПоСтранице, Документ);
				КонецЕсли;
				
				// Вывод подвала табличной части деталей
				ОбластьПодвалДеталей.Параметры.Количество = Формат(ИтогоКоличествоДеталей, ФорматВыводаКоличества);
				ОбластьПодвалДеталей.Параметры.Сумма      = Формат(ИтогоСуммаДеталей, ФорматВыводаСуммы);
				Если ЕстьСкидкаПоДеталям Тогда
					ОбластьПодвалДеталей.Параметры.Скидка = Формат(ИтогоСуммаСкидкиДеталей, ФорматВыводаСуммы);
				КонецЕсли;
				ОбластьПодвалДеталей.Параметры.СуммаНДС = Формат(ИтогоСуммаНДСДеталей, ФорматВыводаСуммы);
				ОбластьПодвалДеталей.Параметры.ЧислоПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоСуммаДеталей, Документ.ВалютаДокумента);
				Если ИтогоСуммаНДСДеталей <> 0 Тогда
					ОбластьПодвалДеталей.Параметры.ЧислоПрописью = СтрШаблон(
						НСтр(" ru = '%1 в т.ч. НДС %2 %3'"),
						ОбластьПодвалДеталей.Параметры.ЧислоПрописью,
						Формат(ИтогоСуммаНДСДеталей, ФорматВыводаСуммы),
						Документ.ВалютаДокумента
					);
				КонецЕсли; 
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(
					ТабличныйДокумент,
					ОбластьПодвалДеталей,
					, , 
					НомерСтраницы,
					,
					Документ
				);
			КонецЕсли;
			
			Если ЕстьПричиныОбращений Тогда
				ОбластьПодвалПричиныОбращения.Параметры.Сумма    = Формат(ИтогоСуммаРабот + ИтогоСуммаДеталей, ФорматВыводаСуммы);
				ОбластьПодвалПричиныОбращения.Параметры.СуммаНДС = Формат(ИтогоСуммаНДСРабот + ИтогоСуммаНДСДеталей, ФорматВыводаСуммы);
				ОбластьПодвалПричиныОбращения.Параметры.ЧислоПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоСуммаРабот + ИтогоСуммаДеталей, Документ.ВалютаДокумента);
				
				Если (ИтогоОбщийПоСуммеНДС) <> 0 Тогда
					ОбластьПодвалПричиныОбращения.Параметры.ЧислоПрописью = СтрШаблон(
						НСтр("ru = '%1 в т.ч. НДС %2 %3'"),
						ОбластьПодвалПричиныОбращения.Параметры.ЧислоПрописью,
						Формат(ИтогоСуммаНДСРабот + ИтогоСуммаНДСДеталей, ФорматВыводаСуммы),
						Документ.ВалютаДокумента
					);
				КонецЕсли; 
				ТабличныйДокумент.Вывести(ОбластьПодвалПричиныОбращения);
			КонецЕсли;
			
			ИтогоОбщийПоСумме = ИтогоОбщийПоСумме + ИтогоСуммаРабот + ИтогоСуммаДеталей;
			ИтогоОбщийПоСуммеНДС = ИтогоОбщийПоСуммеНДС + ИтогоСуммаНДСРабот + ИтогоСуммаНДСДеталей;
			
		КонецЦикла;
		
		// заполним параметры шапки таблицы для следующего листа
		ТекстЗаголовка = СтрШаблон(
			НСтр("ru = 'Расходная накладная к заказ-наряду № %1 от %2'"),
			НомерДляПечати,
			Формат(ДатаНаПечать, "ДЛФ=D")
		);
		ОбластьШапкаДеталейКлиента.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаДеталейКлиента.Параметры.НомерСтраницы = СтрШаблон(НСтр("ru = 'Страница: %1'"), НомерСтраницы);
		Если ВыводитьКод Тогда
			ОбластьШапкаДеталей.Параметры.ИмяКолонкиКодов = КолонкаКода;
		КонецЕсли;
		
		// Формирование врем. таблиц товаров клиента
		ТаблТоварыКлиента = Документ.МатериалыЗаказчика.Выгрузить();
		КоличествоДеталейКлиента = ТаблТоварыКлиента.Количество();
		
		ТабДокВрем = Новый ТабличныйДокумент;
		ТабДокВрем.ПолеСверху = 10; ТабДокВрем.ПолеСнизу  = 0;
		ТабДокВрем.ПолеСлева  = 0; ТабДокВрем.ПолеСправа = 0;
		
		Если НЕ КоличествоДеталейКлиента = 0 Тогда
		
			// Вывод шапки табличной части деталей клиента
			ОбластьМакета = Макет.ПолучитьОбласть("ДеталиКлиента");
			Если НЕ ВыводитьКод Тогда
				ВремТекст = ОбластьМакета.Область(5, 4, 5, 4).Текст;
				ОбластьМакета.Область(5, 3, 5, 7).Объединить();
				ОбластьМакета.Область(6, 3, 6, 7).Объединить();
				ОбластьМакета.Область(5, 3, 5, 7).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
				ОбластьМакета.Область(5, 3, 5, 3).Текст = ВремТекст;
				Ном = 3;
				Для Сч = 3 По 10 Цикл
					Если НЕ ЗначениеЗаполнено(ОбластьМакета.Область(6, Сч + 1, 6, Сч + 1).Текст) Тогда
						Продолжить;
					КонецЕсли;
					ОбластьМакета.Область(6, Сч + 1, 6, Сч + 1).Текст = Ном;
					Ном = Ном + 1;
				КонецЦикла;
				Ном = 3;
				Для Сч = 3 По 10 Цикл
					Если НЕ ЗначениеЗаполнено(ОбластьШапкаДеталейКлиента.Область(3, Сч + 1, 3, Сч + 1).Текст) Тогда
						Продолжить;
					КонецЕсли;
					ОбластьШапкаДеталейКлиента.Область(3, Сч + 1, 3, Сч + 1).Текст = Ном;
					Ном = Ном + 1;
				КонецЦикла;
			КонецЕсли;
			// Если помещается только шапка, но ни одной строчки, то шапку переносим на след. страницу.
			Если ВыводитьКод Тогда
				ОбластьМакета.Параметры.ИмяКолонкиКодов = КолонкаКода;
			КонецЕсли;
			ТабДокВрем.Очистить();
			ТабДокВрем.Вывести(ОбластьМакета);
			ОбластьМакетаСтрокаВрем = Макет.ПолучитьОбласть("СтрокаДеталей");
			СтрокаДеталей = ТаблТоварыКлиента[0];
			ТекОбласть = ОбластьМакетаСтрокаВрем.Область(1,, 1);
			ТекТовар = СтрокаДеталей.Номенклатура;
			ОбластьМакетаСтрокаВрем.Параметры.Наименование = ?(
				ТипЗнч(ТекТовар) = Тип("СправочникСсылка.Номенклатура"),
				УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ТекТовар),
				ТекТовар
			);
			ТабДокВрем.Вывести(ОбластьМакетаСтрокаВрем);
			ТабДокВрем.Вывести(ОбластьИтоговПоСтраницеДеталиКлиента);
			Если НЕ ТабличныйДокумент.ПроверитьВывод(ТабДокВрем) Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ОбластьМакета.Параметры.НомерДок = НомерДляПечати;
			ОбластьМакета.Параметры.ДатаДок  = Формат(ДатаНаПечать, "ДЛФ=D");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ТекстЗаголовка = СтрШаблон(
				НСтр("ru = 'Перечень деталей клиента к заказ-наряду № %1 от %2'"),
				НомерДляПечати,
				Формат(ДатаНаПечать, "ДЛФ=D")
			);
			
			// заполним параметры шапки таблицы для следующего листа
			ОбластьШапкаДеталейКлиента.Параметры.ТекстЗаголовка = ТекстЗаголовка;
			ОбластьШапкаДеталейКлиента.Параметры.НомерСтраницы = СтрШаблон(НСтр("ru = 'Страница: %1'"), НомерСтраницы);
			Если ВыводитьКод Тогда
				ОбластьШапкаДеталейКлиента.Параметры.ИмяКолонкиКодов = КолонкаКода;
			КонецЕсли;
			// Вывод табличной части деталей клиента
			Ном = 0;
			СтруктураИтоговПоСтранице = Новый Структура("Количество", 0);
			
			Для каждого СтрокаДеталей из ТаблТоварыКлиента Цикл
				Ном = Ном + 1;
				
				ОбластьСтрокаДеталейКлиента.Параметры.НомСтр = Ном;
				ТекТоварКлиента = СтрокаДеталей.Номенклатура;
				Если ВыводитьКод Тогда
					ОбластьСтрокаДеталейКлиента.Параметры.Код = ?(ТипЗнч(ТекТоварКлиента) = Тип("СправочникСсылка.Номенклатура"), УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(ТекТоварКлиента), "");
				КонецЕсли;
				ОбластьСтрокаДеталейКлиента.Параметры.Номенклатура = ТекТоварКлиента;
				ОбластьСтрокаДеталейКлиента.Параметры.Наименование = ?(ТипЗнч(ТекТоварКлиента) = Тип("СправочникСсылка.Номенклатура"), УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ТекТоварКлиента), ТекТоварКлиента);
				ОбластьСтрокаДеталейКлиента.Параметры.Количество = Формат(СтрокаДеталей.Количество*СтрокаДеталей.Коэффициент, ФорматВыводаКоличества);
				ОбластьСтрокаДеталейКлиента.Параметры.Единица = СтрокаДеталей.ЕдиницаИзмерения;
				Если СтрокаДеталей.ПримечаниеНоменклатураПечать <> "" Тогда
					ОбластьСтрокаПримечаниеНоменклатураКлиента.Параметры.ПримечаниеНоменклатура = СтрокаДеталей.ПримечаниеНоменклатураПечать;
				КонецЕсли;
				// Обновим итоги по документу
				ИтогоКоличествоДеталейКлиента = ИтогоКоличествоДеталейКлиента + СтрокаДеталей.Количество*СтрокаДеталей.Коэффициент;
				
				// доп. области
				мсвДопОбластиПодвала = Неопределено;
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьСтрокаПримечаниеНоменклатураКлиента);
				мсвДопОбластиПодвала.Добавить(ОбластьИтоговПоСтраницеДеталиКлиента);
				Если Ном=КоличествоДеталейКлиента Тогда
					мсвДопОбластиПодвала.Добавить(ОбластьПодвалДеталейКлиента);
				КонецЕсли;
				
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаДеталейКлиента, ОбластьШапкаДеталейКлиента, ОбластьИтоговПоСтраницеДеталиКлиента, НомерСтраницы, СтруктураИтоговПоСтранице,Документ, мсвДопОбластиПодвала);
				Если СтрокаДеталей.ПримечаниеНоменклатураПечать <> "" Тогда
					УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаПримечаниеНоменклатураКлиента,,,,, Документ);
				КонецЕсли;
				
				// инициализация итогов по странице
				Если НомерСтраницы <> НомерСтраницыПред Тогда
					СтруктураИтоговПоСтранице = Новый Структура("Количество", 0);
					НомерСтраницыПред = НомерСтраницы;
					ОбластьШапкаДеталейКлиента.Параметры.НомерСтраницы = СтрШаблон(НСтр("ru = 'Страница: %1'"), НомерСтраницы);
				КонецЕсли;
				
				// обновим итоги по странице
				СтруктураИтоговПоСтранице.Количество = СтруктураИтоговПоСтранице.Количество + СтрокаДеталей.Количество*СтрокаДеталей.Коэффициент;
			КонецЦикла;
			
			// довыводим последний итог по странице, если страниц больше единицы
			Если НомерСтраницы > 2 Тогда
				УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтоговПоСтраницеДеталиКлиента, СтруктураИтоговПоСтранице, Документ);
			КонецЕсли;
			
			// Вывод подвала табличной части деталей клиента
			ОбластьПодвалДеталейКлиента.Параметры.КоличествоДеталейЗаказчика = Формат(ИтогоКоличествоДеталейКлиента, ФорматВыводаКоличества);
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвалДеталейКлиента, , , НомерСтраницы, , Документ);
		КонецЕсли;
		
		// Вывод подвала документа
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьПодвал.Параметры.Сумма = Формат(ИтогоОбщийПоСумме, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаНДС = Формат(ИтогоОбщийПоСуммеНДС, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.ЧислоПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоОбщийПоСумме, Документ.ВалютаДокумента);
		Если (ИтогоОбщийПоСуммеНДС) <> 0 Тогда
			ОбластьПодвал.Параметры.ЧислоПрописью = СтрШаблон(
				НСтр("ru = '%1 в т.ч. НДС %2 %3'"),
				ОбластьПодвал.Параметры.ЧислоПрописью,
				Формат(ИтогоОбщийПоСуммеНДС, ФорматВыводаСуммы),
				Документ.ВалютаДокумента
			);
		КонецЕсли; 
		
		// сформируем информацию о бонусных баллах
		ТекстБаллы = "";
		Если Документ.КоличествоКСписанию > 0 Тогда
			ТекстБаллы = ТекстБаллы + "Для оплаты использованы бонусные баллы в количестве " + Документ.КоличествоКСписанию +
			" на сумму "+(Документ.Товары.Итог("СуммаСкидкиБонусами")+Документ.Автоработы.Итог("СуммаСкидкиБонусами")) + " " + Документ.ВалютаДокумента +".";
		КонецЕсли;
		
		Если Документ.КоличествоКНачислению > 0 Тогда
			ТекстБаллы = ТекстБаллы +?(ПустаяСтрока(ТекстБаллы), "", " ")+ "Было начислено "+ Документ.КоличествоКНачислению +" бонусных баллов на сумму в " +
			Документ.КоличествоКНачислению*Документ.Карточка.БонуснаяПрограмма.КратностьБонусов + " "+ Документ.Карточка.БонуснаяПрограмма.ВалютаБонуса+".";
		КонецЕсли;
		
		Если ПустаяСтрока(ТекстБаллы) Тогда
			ТекОбласть = ОбластьПодвал.Область(5,, 5);
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			ОбластьПодвал.Область(5, 2, 5, 2).Текст = "";
		Иначе
			ОбластьПодвал.Параметры.БонусныеБаллы = ТекстБаллы;
		КонецЕсли;
		Если ПустаяСтрока(Документ.Гарантии) Тогда
			ТекОбласть = ОбластьПодвал.Область(9,, 9);
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			ОбластьПодвал.Область(9, 3, 9, 3).Текст = "";
		Иначе
			ОбластьПодвал.Параметры.Гарантии = Документ.Гарантии;
		КонецЕсли;
		Если ПустаяСтрока(Документ.Рекомендации) Тогда
			ТекОбласть = ОбластьПодвал.Область(11,, 11);
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			ОбластьПодвал.Область(11, 3, 11, 3).Текст = "";
		Иначе
			ОбластьПодвал.Параметры.Рекомендации = Документ.Рекомендации;
		КонецЕсли;
		ОбластьПодвал.Параметры.Мастер = Документ.Мастер;
		ОбластьПодвал.Параметры.МастерПолноеНаименование = Документ.Мастер.Наименование;
		ОбластьПодвал.Параметры.Заказчик = Заказчик;
		ОбластьПодвал.Параметры.ЗаказчикПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Заказчик, Документ.Дата);
		ОбластьПодвал.Параметры.Контрагент = Документ.Контрагент;
		ОбластьПодвал.Параметры.КонтрагентПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент, Документ.Дата);
		ОбластьПодвал.Параметры.ДатаДок = Формат(ДатаНаПечать, "ДЛФ=DD");
		ОбластьПодвал = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, 
																			ОбластьПодвал,,, НомерСтраницы,, Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаряд_Квитанция";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

//СОКРАЩЕННЫЙ ПЕРЕЧЕНЬ ПЕЧАТНЫХ ФОРМ

// Формирует печатную форму "БланкЗаявки"
// Возвращает сформированный табличный документ:
Функция ПечатьБланкЗаявки(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		ФорматПредставленияГодаВыпускаАвтомобиля = АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Документ);
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаряд.ПФ_MXL_БланкЗаявки");
		
		ОбластьШапка               = Макет.ПолучитьОбласть("Шапка");
		ОбластьНаружныеПовреждения = Макет.ПолучитьОбласть("НаружныеПовреждения");
		ОбластьПодвал              = Макет.ПолучитьОбласть("Подвал");
		
		НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		
		Заказчик = Документ.СводныйРемонтныйЗаказ.Заказчик;
		
		// Вывод шапки документа
		ОбластьШапка.Параметры.НомерДок = НомерДляПечати;
		ОбластьШапка.Параметры.ДатаСоздания = Формат(Документ.ДатаСоздания, "ДФ = дд.ММ.гггг");
		ОбластьШапка.Параметры.Заказчик = Заказчик;
		ОбластьШапка.Параметры.ЗаказчикПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Заказчик, Документ.Дата);
		ОбластьШапка.Параметры.ЗаказчикАдресПочтовый = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказчик, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.ЗаказчикТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказчик, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		
		Автомобиль = Документ.СводныйРемонтныйЗаказ.Автомобиль;
		
		Если ЗначениеЗаполнено(Автомобиль) Тогда
			ОбластьШапка.Параметры.Автомобиль = Автомобиль.Модель;
			ОбластьШапка.Параметры.АвтомобильМодель = Автосервис.МаркаМодельАвтомобиля(Автомобиль);
			ОбластьШапка.Параметры.АвтомобильКод = Автомобиль.VIN;
			
			ОбластьШапка.Параметры.АвтомобильГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер,Документ.ДатаСоздания);
			ОбластьШапка.Параметры.АвтомобильГодВыпуска = Формат(Автомобиль.ГодВыпуска,ФорматПредставленияГодаВыпускаАвтомобиля);
			
			Пробег = ?(Документ.Пробег > Документ.СводныйРемонтныйЗаказ.Пробег, 
						Документ.Пробег, 
						Документ.СводныйРемонтныйЗаказ.Пробег);
			ОбластьШапка.Параметры.АвтомобильПробег = Формат(Пробег, "ЧЦ=10");
		КонецЕсли; 
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ПричинаОбращения = СтрСоединить(
			Документ.ПричиныОбращения.Выгрузить().ВыгрузитьКолонку("ПричинаОбращенияСодержание"),
			", "
		);
		
		Если ПустаяСтрока(ПричинаОбращения) Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ПричинаОбращенияПустая");
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ПричинаОбращения");
			ОбластьМакета.Параметры.ПричинаОбращения = ПричинаОбращения;
			
		КонецЕсли; 
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ЗначениеЗаполнено(Автомобиль) Тогда
			
			Если ЗначениеЗаполнено(Автомобиль.Модель) И ЗначениеЗаполнено(Автомобиль.Модель.ФайлКартинки) Тогда
				
				Попытка
					
					АдресКартинки = РаботаСФайлами
						.ДанныеФайла(Автомобиль.Модель.ФайлКартинки)
						.СсылкаНаДвоичныеДанныеФайла;
					СхемаТС = Новый Картинка(ПолучитьИзВременногоХранилища(АдресКартинки),Ложь);
					ОбластьНаружныеПовреждения.Рисунки.СхемаТС.Картинка = СхемаТС;
					ОбластьНаружныеПовреждения.Рисунки.СхемаТС.РазмерКартинки = РазмерКартинки.Пропорционально;
					
				Исключение
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка заполнения картинки'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли; 
		
		ТабличныйДокумент.Вывести(ОбластьНаружныеПовреждения);
		
		// Вывод подвала документа
		ОбластьПодвал.Параметры.Заказчик = Заказчик;
		ОбластьПодвал.Параметры.ЗаказчикПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Заказчик, Документ.Дата);
		ОбластьПодвал.Параметры.Мастер = Документ.Мастер;
		ОбластьПодвал.Параметры.МастерПолноеНаименование = Документ.Мастер.Наименование;
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	ТабличныйДокумент.Автомасштаб = Истина;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаряд_БланкЗаявки";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "РабочаяЗаявка"
// Возвращает сформированный табличный документ:
Функция ПечатьРабочаяЗаявка(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// зададим параметры макета
	ТабличныйДокумент.ПолеСверху = 10; // поле равно высоте колонтитулов
	ТабличныйДокумент.ПолеСлева  = 0;
	ТабличныйДокумент.ПолеСнизу  = 10;
	ТабличныйДокумент.ПолеСправа = 0;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		ФорматПредставленияГодаВыпускаАвтомобиля = АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Документ);
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТаблицаТоваров = Документ.Товары.Выгрузить();
		ТаблицаРабот   = Документ.Автоработы.Выгрузить();
		ТаблицаПричинОбращений = Документ.ПричиныОбращения.Выгрузить();
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаряд.ПФ_MXL_РабочаяЗаявка");
		
		ЕстьСкидкаПоДеталям = Ложь;
		Если Документ.Товары.Итог("СуммаСкидки")<>0 ИЛИ Документ.Товары.Итог("СуммаСкидкиСтроки")<>0 ИЛИ Документ.Товары.Итог("СуммаСкидкиБонусами")<>0 Тогда
			ЕстьСкидкаПоДеталям = Истина;
		КонецЕсли;
		
		ЕстьСкидкаПоРаботам = Ложь;
		Если Документ.Автоработы.Итог("СуммаСкидки")<>0 ИЛИ Документ.Автоработы.Итог("СуммаСкидкиСтроки")<>0  ИЛИ Документ.Автоработы.Итог("СуммаСкидкиБонусами")<>0 Тогда
			ЕстьСкидкаПоРаботам = Истина;
		КонецЕсли;
		
		ЕстьПричиныОбращений = (ТаблицаПричинОбращений.Количество() > 0);
		
		Если НЕ ЕстьПричиныОбращений Тогда
			ТаблицаПричинОбращений.Добавить();
		Иначе
			ПричиныИАвтоработы = ПричиныОбращенийСлужебный.СоставПричинОбращенийПоЗаказНаряду(Документ);
			ТаблицаРабот.Колонки.Добавить("ИдентификаторПричиныОбращения");
			Для Каждого Авторабота Из ТаблицаРабот Цикл
				НайденныеСтроки = ПричиныИАвтоработы.НайтиСтроки(Новый Структура("Авторабота", Авторабота.ИдентификаторРаботы));
				Если НайденныеСтроки.Количество() > 0 Тогда
					Авторабота.ИдентификаторПричиныОбращения = НайденныеСтроки[0].ПричинаОбращения;
				Иначе
					Авторабота.ИдентификаторПричиныОбращения = ТаблицаПричинОбращений[0].ИдентификаторПричиныОбращения;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОбластьСкидка      = Макет.Область("Скидка");
		ОбластьСкидкаРабот = Макет.Область("СкидкаРабот");
		
		ОбластьУслуги = Макет.ПолучитьОбласть("Услуги");
		ОбластьШапкаУслуг = Макет.ПолучитьОбласть("ШапкаУслуг");
		ОбластьДетали = Макет.ПолучитьОбласть("Детали");
		
		ОбластьСтрокаДеталей	            = Макет.ПолучитьОбласть("СтрокаДеталей");
		ОбластьСтрокаПримечаниеНоменклатура = Макет.ПолучитьОбласть("СтрокаПримечаниеНоменклатура");
		ОбластьИтоговПоСтраницеДетали	    = Макет.ПолучитьОбласть("ИтогиПоСтраницеДеталей");
		ОбластьПодвалДеталей	            = Макет.ПолучитьОбласть("ПодвалДетали");
		
		ОбластьСтрокаУслуг		        = Макет.ПолучитьОбласть("СтрокаРабот");
		ОбластьСтрокаПримечаниеРаботы   = Макет.ПолучитьОбласть("СтрокаПримечаниеРаботы");
		ОбластьИтоговПоСтраницеУслуги	= Макет.ПолучитьОбласть("ИтогиПоСтраницеРабот");
		ОбластьПодвалУслуг		        = Макет.ПолучитьОбласть("ПодвалУслуги");
		
		ОбластьШапкаДеталейКлиента				    = Макет.ПолучитьОбласть("ШапкаДеталейКлиента");
		ОбластьСтрокаПримечаниеНоменклатураКлиента  = Макет.ПолучитьОбласть("СтрокаПримечаниеНоменклатураКлиента");
		ОбластьСтрокаДеталейКлиента				    = Макет.ПолучитьОбласть("СтрокаДеталейКлиента");
		ОбластьИтоговПоСтраницеДеталиКлиента	    = Макет.ПолучитьОбласть("ИтогиПоСтраницеДеталейКлиента");
		ОбластьПодвалДеталейКлиента 			    = Макет.ПолучитьОбласть("ПодвалКлиента");
		
		ОбластьСписокОткрытыхЗН         = Макет.ПолучитьОбласть("СписокОткрытыхЗН");
		ОбластьСтрокаСписокОткрытыхЗН   = Макет.ПолучитьОбласть("СтрокаСписокОткрытыхЗН");
		ОбластьИтоговПоСтраницеСписокЗН = Макет.ПолучитьОбласть("ИтогиПоСтраницеСписокОткрытыхЗН");
		ОбластьПодвалСписокОткрытыхЗН   = Макет.ПолучитьОбласть("ПодвалСписокОткрытыхЗН");
		
		ОбластьШапкаПричиныОбращения  = Макет.ПолучитьОбласть("ШапкаПричиныОбращения");
		ОбластьПодвалПричиныОбращения = Макет.ПолучитьОбласть("ПодвалПричиныОбращения");
		
		ОбластьШапкаМатериалов  = Макет.ПолучитьОбласть("ШапкаМатериалов");
		ОбластьСтрокаМатериалов = Макет.ПолучитьОбласть("СтрокаМатериалов");
		
		ОбластьШапкаИсполнителей  = Макет.ПолучитьОбласть("ШапкаИсполнителей");
		ОбластьСтрокаИсполнителей = Макет.ПолучитьОбласть("СтрокаИсполнителей");
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		БезЛинии 	 = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		ОбычнаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		// Настроем колонки вывода деталей если не было скидок
		Если Не ЕстьСкидкаПоДеталям Тогда
			ПоложениеШапкиДеталей = ОбластьДетали.Область("ШапкаДеталей").Низ;
			ПозицияКолонки = ОбластьСкидка.Лево;
			Пока ПозицияКолонки > 6 Цикл
				ОбластьДетали.Область(ПоложениеШапкиДеталей-1,ПозицияКолонки,ПоложениеШапкиДеталей-1,ПозицияКолонки).Текст = ОбластьДетали.Область(ПоложениеШапкиДеталей-1,ПозицияКолонки-1,ПоложениеШапкиДеталей-1,ПозицияКолонки-1).Текст;
				ОбластьДетали.Область(ПоложениеШапкиДеталей,ПозицияКолонки,ПоложениеШапкиДеталей,ПозицияКолонки).Текст = ОбластьДетали.Область(ПоложениеШапкиДеталей,ПозицияКолонки-1,ПоложениеШапкиДеталей,ПозицияКолонки-1).Текст;
				
				ОбластьИсточник = ОбластьСтрокаДеталей.Область(1,ПозицияКолонки - 1, 1, ПозицияКолонки - 1);
				ОбластьПриемник = ОбластьСтрокаДеталей.Область(1,ПозицияКолонки,1,ПозицияКолонки);
				ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
				
				ОбластьИсточник = ОбластьИтоговПоСтраницеДетали.Область(1, ПозицияКолонки - 1, 1, ПозицияКолонки - 1);
				ОбластьПриемник = ОбластьИтоговПоСтраницеДетали.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
				
				ОбластьИсточник = ОбластьПодвалДеталей.Область(1, ПозицияКолонки - 1, 1, ПозицияКолонки - 1);
				ОбластьПриемник = ОбластьПодвалДеталей.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
				
				ПозицияКолонки = ПозицияКолонки - 1;
			КонецЦикла;
			
			ОбластьДетали.Область(ПоложениеШапкиДеталей - 1, 4, ПоложениеШапкиДеталей - 1, 8).Объединить();
			ОбластьДетали.Область(ПоложениеШапкиДеталей, 4, ПоложениеШапкиДеталей, 8).Объединить();
			ОбластьСтрокаДеталей.Область(1, 4, 1, 8).Объединить();
			
			ТекОбласть = ОбластьИтоговПоСтраницеДетали.Область(1, 2, 1, 8);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСнизу = БезЛинии;
			
			ТекОбласть = ОбластьПодвалДеталей.Область(1, 2, 1, 8);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСнизу = БезЛинии;
			
			ТекОбласть = ОбластьИтоговПоСтраницеДетали.Область(1, 10, 1, 11);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСлева = ОбычнаяЛиния;
			ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ТекОбласть.Текст = "на сумму:";
			
			ТекОбласть = ОбластьПодвалДеталей.Область(1, 10, 1, 11);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСлева = ОбычнаяЛиния;
			ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ТекОбласть.Текст = "на сумму:";
			
			ПозицияКолонки = ОбластьСкидка.Лево - 1;
			Пока ПозицияКолонки <= ОбластьДетали.ШиринаТаблицы Цикл
				ОбластьДетали.Область(ПоложениеШапкиДеталей,ПозицияКолонки,ПоложениеШапкиДеталей,ПозицияКолонки).Текст = ПозицияКолонки-5;
				ПозицияКолонки = ПозицияКолонки + 1;
			КонецЦикла;
		КонецЕсли;
		
		ОбластьШапкаДеталей = ОбластьДетали.ПолучитьОбласть("ШапкаДеталей");
		
		// Настроем колонки вывода услуг если не было скидок
		Если Не ЕстьСкидкаПоРаботам Тогда
			ПоложениеШапкиУслуг = ОбластьУслуги.Область("ШапкаУслуг").Низ;
			ПозицияКолонки = ОбластьСкидкаРабот.Лево;
			Пока ПозицияКолонки > 6 Цикл
				ОбластьУслуги.Область(ПоложениеШапкиУслуг - 1, ПозицияКолонки, ПоложениеШапкиУслуг - 1, ПозицияКолонки).Текст
					= ОбластьУслуги.Область(ПоложениеШапкиУслуг - 1,ПозицияКолонки - 1,ПоложениеШапкиУслуг - 1,ПозицияКолонки - 1).Текст;
				ОбластьУслуги.Область(ПоложениеШапкиУслуг, ПозицияКолонки, ПоложениеШапкиУслуг, ПозицияКолонки).Текст 
					= ОбластьУслуги.Область(ПоложениеШапкиУслуг, ПозицияКолонки - 1, ПоложениеШапкиУслуг, ПозицияКолонки - 1).Текст;
				
				ОбластьИсточник = ОбластьСтрокаУслуг.Область(1, ПозицияКолонки - 1, 1, ПозицияКолонки - 1);
				ОбластьПриемник = ОбластьСтрокаУслуг.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
				
				ОбластьИсточник = ОбластьИтоговПоСтраницеУслуги.Область(1, ПозицияКолонки - 1, 1, ПозицияКолонки - 1);
				ОбластьПриемник = ОбластьИтоговПоСтраницеУслуги.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
				
				ОбластьИсточник = ОбластьПодвалУслуг.Область(1, ПозицияКолонки - 1, 1, ПозицияКолонки - 1);
				ОбластьПриемник = ОбластьПодвалУслуг.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
				
				ОбластьИсточник = ОбластьСтрокаМатериалов.Область(1, ПозицияКолонки - 1, 1, ПозицияКолонки - 1);
				ОбластьПриемник = ОбластьСтрокаМатериалов.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
				
				ОбластьИсточник = ОбластьСтрокаИсполнителей.Область(1, ПозицияКолонки - 1, 1, ПозицияКолонки - 1);
				ОбластьПриемник = ОбластьСтрокаИсполнителей.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				
				Если ОбластьИсточник.ПараметрРасшифровки = "Цех" Тогда
					ОбластьСтрокаИсполнителей.Область(1, ПозицияКолонки - 1, 1, ПозицияКолонки).Разъединить();
					ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
					ОбластьСтрокаИсполнителей.Область(1, ПозицияКолонки, 1, ПозицияКолонки + 2).Объединить();
				Иначе
					ОбластьПриемник.Текст               = ОбластьИсточник.Текст;
					ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
					ОбластьПриемник.ГраницаСлева        = ОбычнаяЛиния;
				КонецЕсли;
				
				ПозицияКолонки = ПозицияКолонки - 1;
			КонецЦикла;
			
			ОбластьУслуги.Область(ПоложениеШапкиУслуг - 1, 4, ПоложениеШапкиУслуг - 1, 9).Объединить();
			ОбластьУслуги.Область(ПоложениеШапкиУслуг, 4, ПоложениеШапкиУслуг, 9).Объединить();
			ОбластьСтрокаУслуг.Область(1, 4, 1, 9).Объединить();
			ОбластьСтрокаУслуг.Область(1, 4, 1, 9).ГраницаСнизу = БезЛинии;
			ОбластьСтрокаМатериалов.Область(1, 6, 1, 9).Объединить();
			ОбластьСтрокаИсполнителей.Область(1, 6, 1, 9).Объединить();
			
			ТекОбласть = ОбластьИтоговПоСтраницеУслуги.Область(1, 2, 1, 9);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСнизу = БезЛинии;
			
			ТекОбласть = ОбластьПодвалУслуг.Область(1, 2, 1, 9);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСнизу = БезЛинии;
			
			ТекОбласть = ОбластьИтоговПоСтраницеУслуги.Область(1, 11, 1, 12);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСлева = ОбычнаяЛиния;
			ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ТекОбласть.Текст = "на сумму:";
			
			ТекОбласть = ОбластьПодвалУслуг.Область(1, 11, 1, 12);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСлева = ОбычнаяЛиния;
			ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ТекОбласть.Текст = "на сумму:";
			
			ПозицияКолонки = ОбластьСкидкаРабот.Лево - 1;
			Пока ПозицияКолонки <= ОбластьУслуги.ШиринаТаблицы Цикл
				ОбластьУслуги.Область(ПоложениеШапкиУслуг, ПозицияКолонки, ПоложениеШапкиУслуг, ПозицияКолонки).Текст 
																									= ПозицияКолонки - 6;
				ПозицияКолонки = ПозицияКолонки + 1;
			КонецЦикла;
		КонецЕсли;
		
		ОбластьШапкаУслуг = ОбластьУслуги.ПолучитьОбласть("ШапкаУслуг");
		
		НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		
		// Проверим наличие причин обращений
		Если НЕ ЕстьПричиныОбращений Тогда
			
			ТекОбласть = ОбластьШапкаПричиныОбращения.Область(2,, 2);
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			ОбластьШапкаПричиныОбращения.Область(2, 2, 2, 2).Текст = "";
			
			ТекОбласть = ОбластьШапкаПричиныОбращения.Область(3,, 3);
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			ОбластьШапкаПричиныОбращения.Область(3, 2, 3, 2).Текст = "";
			
			ТекОбласть = ОбластьПодвалПричиныОбращения.Область(1,, 1);
			ТекОбласть.Очистить(Истина, Истина, Истина);
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			
			ТекОбласть = ОбластьПодвалПричиныОбращения.Область(2,, 2);
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			
		Иначе
			
			ТекОбласть = ОбластьДетали.Область(2,, 2);
			ОбластьДетали.Область(2, 3, 2, 3).Текст = "Требование к заказ-наряду №  " + НомерДляПечати + " от " 
				+ Формат(Документ.ДатаСоздания, "ДФ = дд.ММ.гггг") + " к причине обращения";
			
			ТекОбласть = ОбластьУслуги.Область(2,, 2);
			ОбластьУслуги.Область(2, 3, 2, 3).Текст = "Заявка на работы по заказ-наряду №  " + НомерДляПечати + " от " 
				+ Формат(Документ.ДатаСоздания, "ДФ = дд.ММ.гггг") + " к причине обращения";
			
		КонецЕсли;
		
		
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		
		Заказчик = Документ.СводныйРемонтныйЗаказ.Заказчик;
		
		// Вывод шапки документа
		ОбластьШапка.Параметры.Организация = Документ.Организация;
		ОбластьШапка.Параметры.ФирмаПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация, Документ.Дата);	
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ДляПечати = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьШапка.Параметры.ФирмаАдресЮридический = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			ОбластьШапка.Параметры.Организация, Новый Структура("АдресЮридический", " "), ДополнительныеПараметры);
		ОбластьШапка.Параметры.НомерДок = НомерДляПечати;
		ОбластьШапка.Параметры.ДатаДок = Формат(Документ.ДатаСоздания, "ДФ = дд.ММ.гггг");
		ОбластьШапка.Параметры.Заказчик = Заказчик;
		ОбластьШапка.Параметры.ЗаказчикПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Заказчик, Документ.Дата);
		ОбластьШапка.Параметры.ЗаказчикАдресПочтовый = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказчик, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.ЗаказчикТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказчик, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		
		Автомобиль = Документ.СводныйРемонтныйЗаказ.Автомобиль;
		
		Если ЗначениеЗаполнено(Автомобиль) Тогда
			ОбластьШапка.Параметры.Автомобиль = Автомобиль;
			ОбластьШапка.Параметры.АвтомобильКод = Автомобиль.VIN;
			ОбластьШапка.Параметры.АвтомобильМодель = Автосервис.МаркаМодельАвтомобиля(Автомобиль);
			ОбластьШапка.Параметры.АвтомобильГодВыпуска = Формат(Автомобиль.ГодВыпуска,ФорматПредставленияГодаВыпускаАвтомобиля);
			
			ОбластьШапка.Параметры.АвтомобильГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер,Документ.ДатаСоздания);
			
			Пробег = ?(Документ.Пробег > Документ.СводныйРемонтныйЗаказ.Пробег, 
						Документ.Пробег, 
						Документ.СводныйРемонтныйЗаказ.Пробег);
			ОбластьШапка.Параметры.АвтомобильПробег = Формат(Пробег, "ЧЦ=10");
		КонецЕсли;
		
		ОбластьШапка.Параметры.ДатаСоздания = Формат(Документ.ДатаСоздания, "ДФ = дд.ММ.гггг");
		ОбластьШапка.Параметры.ВидРемонта = Документ.ВидРемонта;
		ОбластьШапка.Параметры.Диспетчер = Документ.Диспетчер;
		ОбластьШапка.Параметры.Мастер = Документ.Мастер;
		ОбластьШапка.Параметры.Валюта = Документ.ВалютаДокумента;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ИтогоОбщийПоСумме = 0;
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		
// Причины обращения		
		Для Каждого ПричинаОбращения Из ТаблицаПричинОбращений Цикл
			
			Если ЕстьПричиныОбращений Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ИдентификаторПричиныОбращения", ПричинаОбращения.ИдентификаторПричиныОбращения);
				Табл       = ТаблицаРабот.НайтиСтроки(ПараметрыОтбора);
				ТаблТовары = ТаблицаТоваров.НайтиСтроки(ПараметрыОтбора);
				
				ОбластьШапкаПричиныОбращения.Параметры.ПричинаОбращения           = ПричинаОбращения.ПричинаОбращения;
				ОбластьШапкаПричиныОбращения.Параметры.СодержаниеПричиныОбращения = ПричинаОбращения.ПричинаОбращенияСодержание;
				ТабличныйДокумент.Вывести(ОбластьШапкаПричиныОбращения);
							
			Иначе
				// Временная таблица
				Табл = ТаблицаРабот.Скопировать();
				ТаблТовары = ТаблицаТоваров.Скопировать();
			КонецЕсли;
		
			// Вывод шапки табличной части работ
			КолонкаКода = УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах();
			КолонкаКода = СтрЗаменить(КолонкаКода, "/", Символы.ПС);
			
			ОбластьУслуги.Параметры.ИмяКолонкиКодов = КолонкаКода;
			Если ЕстьПричиныОбращений Тогда
				ОбластьУслуги.Область(2, 3, 2, 3).Текст = "Заявка на работы по заказ-наряду №  " + НомерДляПечати + " от " 
					+ Формат(Документ.ДатаСоздания, "ДФ = дд.ММ.гггг") + " к причине обращения """ 
						+ ПричинаОбращения.ПричинаОбращения + """";
			Иначе
				ОбластьУслуги.Параметры.НомерДок = НомерДляПечати;
				ОбластьУслуги.Параметры.ДатаДок = Формат(Документ.ДатаСоздания, "ДФ=дд.ММ.гггг");
			КонецЕсли;
			
			
			// Временная таблица
			Для ДопСтр = 1 по 5 Цикл
				Табл.Добавить();
			КонецЦикла;
			КоличествоРабот = Табл.Количество();
			
			// инициализация итогов по документу
			ИтогоСуммаРабот	              = 0;
			ИтогоСуммаСкидкиРабот	      = 0;
			ИтогоКоличествоРабот          = 0;
			ИтогоСуммаДеталей	          = 0;
			ИтогоСуммаСкидкиДеталей	      = 0;
			ИтогоКоличествоДеталей        = 0;
			ИтогоКоличествоДеталейКлиента = 0;
			
			Если ЕстьПричиныОбращений Тогда
				ТекстЗаголовка = "Заявка на работы по заказ-наряду №  " + НомерДляПечати + " от " 
					+ Формат(Документ.ДатаСоздания, "ДФ = дд.ММ.гггг") + " к причине обращения: " + ПричинаОбращения.ПричинаОбращения;
			Иначе
				ТекстЗаголовка = "Заявка на работы по заказ-наряду № " + НомерДляПечати + " от " 
					+ Формат(Документ.ДатаСоздания, "ДФ=дд.ММ.гггг");
			КонецЕсли;
			
			ОбластьШапкаУслуг.Параметры.ИмяКолонкиКодов = КолонкаКода;
			ТабДокВрем = Новый ТабличныйДокумент;
			ТабДокВрем.ПолеСверху = 10; ТабДокВрем.ПолеСнизу  = 10;
			ТабДокВрем.ПолеСлева  = 0; ТабДокВрем.ПолеСправа = 0;
			ТабДокВрем.Вывести(ОбластьУслуги);
			ОбластьСтрокаУслугВрем = Макет.ПолучитьОбласть("СтрокаРабот");
			СтрокаРабот = Табл[0];
			ТекОбласть  = ОбластьСтрокаУслугВрем.Область(1, , 1, );
			Если КоличествоРабот  = 5 Тогда
				
				ТекОбласть.АвтовысотаСтроки = Ложь;
				ТекОбласть.ВысотаСтроки = 22;
			Иначе
			ОбластьСтрокаУслугВрем.Параметры.Наименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаРабот.Авторабота);
			ТабДокВрем.Вывести(ОбластьСтрокаУслугВрем);
			ТабДокВрем.Вывести(ОбластьШапкаМатериалов);
			МассивМатериалов = Новый Массив();
			МассивМатериалов   = Документ.Материалы.НайтиСтроки(Новый Структура("ИдентификаторРаботы", СтрокаРабот.ИдентификаторРаботы));
			Для Каждого СтрокаМатериалов Из МассивМатериалов Цикл
				ОбластьСтрокаМатериалов.Параметры.Наименование = ?(ТипЗнч(СтрокаМатериалов.Номенклатура) = Тип("СправочникСсылка.Номенклатура"), УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаМатериалов.Номенклатура), СтрокаМатериалов.Номенклатура);
				ТабДокВрем.Вывести(ОбластьСтрокаМатериалов);
				Если СтрокаМатериалов.ПримечаниеНоменклатураПечать <> "" Тогда
					ОбластьСтрокаПримечаниеНоменклатура.Параметры.ПримечаниеНоменклатура = СтрокаМатериалов.ПримечаниеНоменклатураПечать;
					ТабДокВрем.Вывести(ОбластьСтрокаПримечаниеНоменклатура);
				КонецЕсли;
			КонецЦикла;
			ТабДокВрем.Вывести(ОбластьШапкаИсполнителей);
		    МассивИсполнителей = Документ.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", СтрокаРабот.ИдентификаторРаботы));
			
			Для Каждого СтрокаИсполнителей Из МассивИсполнителей Цикл
				ОбластьСтрокаИсполнителей.Параметры.ИсполнительНаименование = Строка(СтрокаИсполнителей.Исполнитель);
				ТабДокВрем.Вывести(ОбластьСтрокаИсполнителей);		
			КонецЦикла;
			КонецЕсли;
			
			ТабДокВрем.Вывести(ОбластьИтоговПоСтраницеУслуги);
			
			Если НЕ ТабличныйДокумент.ПроверитьВывод(ТабДокВрем) Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				НомерСтраницы = НомерСтраницы +1;
			КонецЕсли;
			
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапкаУслуг.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
				ТабличныйДокумент.Вывести(ОбластьУслуги);
	
			Иначе
				
				ТабличныйДокумент.Вывести(ОбластьУслуги);
				ОбластьШапкаУслуг.Параметры.ТекстЗаголовка = ТекстЗаголовка;
				ОбластьШапкаУслуг.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
				
			КонецЕсли;
			
			// Вывод табличной части работ
			Ном = 0;
			СтруктураИтоговПоСтранице = Новый Структура("СуммаВсего, Количество, СуммаСкидки", 0, 0, 0);
			
			МассивОбластиПодвала = Новый Массив;
			МассивИсполнителей = Новый Массив;
			МассивМатериалов   = Новый Массив;
			ПерваяСтрокаРабот = Истина;
			Для каждого СтрокаРабот из Табл Цикл
				Ном = Ном + 1;
				
				МассивИсполнителей.Очистить();
				МассивМатериалов.Очистить();
				
				ТекОбласть = ОбластьСтрокаУслуг.Область(1,, 1);
				ОбластьСтрокаУслуг.Параметры.НомСтр = Ном;
				Если Ном > (КоличествоРабот - 5) Тогда
					// установим для пустой строки высоту, равную двум строкам. Параметры не заполняем
					ТекОбласть.АвтовысотаСтроки = Ложь;
					ТекОбласть.ВысотаСтроки = 22;
					ОбластьСтрокаУслуг.Параметры.Код= "";
					ОбластьСтрокаУслуг.Параметры.Номенклатура = "";
					ОбластьСтрокаУслуг.Параметры.Наименование = "";
					ОбластьСтрокаУслуг.Параметры.Цена = "";
					ОбластьСтрокаУслуг.Параметры.Количество = "";
					ОбластьСтрокаУслуг.Параметры.Единица = "";
					ОбластьСтрокаУслуг.Параметры.Сумма = "";
					Если ЕстьСкидкаПоРаботам Тогда
						ОбластьСтрокаУслуг.Параметры.Скидка = "";
					КонецЕсли;
					// ОбластьСтрокаУслуг.Параметры.ДопИнформация = "";
					Если НЕ СтрокаРабот = Неопределено И СтрокаРабот.ПримечаниеРаботыПечать <> "" Тогда
						ОбластьСтрокаПримечаниеРаботы.Параметры.ПримечаниеРаботы = СтрокаРабот.ПримечаниеРаботыПечать;
					КонецЕсли;
				Иначе
					// заполним параметры
					ОбластьСтрокаУслуг.Параметры.Код= УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаРабот.Авторабота);
					ОбластьСтрокаУслуг.Параметры.Номенклатура = СтрокаРабот.Авторабота;
					ОбластьСтрокаУслуг.Параметры.Наименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаРабот.Авторабота);
					ОбластьСтрокаУслуг.Параметры.Цена = Формат(СтрокаРабот.Цена, "ЧЦ=15; ЧДЦ=2");
					ОбластьСтрокаУслуг.Параметры.Количество = Формат(СтрокаРабот.Количество*СтрокаРабот.Коэффициент, "ЧЦ=15; ЧДЦ=3");
					ОбластьСтрокаУслуг.Параметры.Единица = СтрокаРабот.Нормочас;
					ОбластьСтрокаУслуг.Параметры.Сумма = Формат(СтрокаРабот.СуммаВсего, "ЧЦ=15; ЧДЦ=2");
					Если ЕстьСкидкаПоРаботам Тогда
						ОбластьСтрокаУслуг.Параметры.Скидка = Формат(СтрокаРабот.СуммаСкидки+СтрокаРабот.СуммаСкидкиСтроки+СтрокаРабот.СуммаСкидкиБонусами, ФорматВыводаСуммы);
					КонецЕсли;
					МассивМатериалов   = Документ.Материалы.НайтиСтроки(Новый Структура("ИдентификаторРаботы", СтрокаРабот.ИдентификаторРаботы));
					МассивИсполнителей = Документ.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", СтрокаРабот.ИдентификаторРаботы));
					
					Если СтрокаРабот.ПримечаниеРаботыПечать <> "" Тогда
						ОбластьСтрокаПримечаниеРаботы.Параметры.ПримечаниеРаботы = СтрокаРабот.ПримечаниеРаботыПечать;
					КонецЕсли;	
					// Обновим итоги по документу
					ИтогоСуммаРабот = ИтогоСуммаРабот + СтрокаРабот.СуммаВсего;
					ИтогоСуммаСкидкиРабот = ИтогоСуммаСкидкиРабот + СтрокаРабот.СуммаСкидки + СтрокаРабот.СуммаСкидкиСтроки + СтрокаРабот.СуммаСкидкиБонусами;
					ИтогоКоличествоРабот = ИтогоКоличествоРабот + СтрокаРабот.Количество*СтрокаРабот.Коэффициент;
				КонецЕсли;
				
				МассивОбластиПодвала.Очистить();
				Если МассивМатериалов.Количество() > 0 Тогда
					ТабДокВрем = Новый ТабличныйДокумент;
					ТабДокВрем.ПолеСверху = 10;
					ТабДокВрем.ПолеСнизу  = 10;
					ТабДокВрем.ПолеСлева  = 0;
					ТабДокВрем.ПолеСправа = 0;
					ТабДокВрем.Вывести(ОбластьШапкаМатериалов);
					Для Каждого СтрокаМатериалов Из МассивМатериалов Цикл
						ОбластьСтрокаМатериалов.Параметры.Заполнить(СтрокаМатериалов);
						ОбластьСтрокаМатериалов.Параметры.Наименование = ?(ТипЗнч(СтрокаМатериалов.Номенклатура) = Тип("СправочникСсылка.Номенклатура"), УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаМатериалов.Номенклатура), СтрокаМатериалов.Номенклатура);
						ТабДокВрем.Вывести(ОбластьСтрокаМатериалов);
						Если СтрокаМатериалов.ПримечаниеНоменклатураПечать <> "" Тогда
							ОбластьСтрокаПримечаниеНоменклатура.Параметры.ПримечаниеНоменклатура = СтрокаМатериалов.ПримечаниеНоменклатураПечать;
							ТабДокВрем.Вывести(ОбластьСтрокаПримечаниеНоменклатура);
						КонецЕсли;
					КонецЦикла;
					МассивОбластиПодвала.Добавить(ТабДокВрем);
				КонецЕсли;
				
				Если МассивИсполнителей.Количество() > 0 Тогда
					ТабДокВрем = Новый ТабличныйДокумент;
					ТабДокВрем.ПолеСверху = 10;
					ТабДокВрем.ПолеСнизу  = 10;
					ТабДокВрем.ПолеСлева  = 0;
					ТабДокВрем.ПолеСправа = 0;
					ТабДокВрем.Вывести(ОбластьШапкаИсполнителей);
					Для Каждого СтрокаИсполнителей Из МассивИсполнителей Цикл
						ОбластьСтрокаИсполнителей.Параметры.Заполнить(СтрокаИсполнителей);
						ОбластьСтрокаИсполнителей.Параметры.ПроцентУчастия          = Строка(СтрокаИсполнителей.Процент) + " %";
						ОбластьСтрокаИсполнителей.Параметры.ИсполнительНаименование = Строка(СтрокаИсполнителей.Исполнитель);
						ОбластьСтрокаИсполнителей.Параметры.ЦехПредставление        = Строка(СтрокаИсполнителей.Цех);
						ТабДокВрем.Вывести(ОбластьСтрокаИсполнителей);
					КонецЦикла;
					МассивОбластиПодвала.Добавить(ТабДокВрем);
				КонецЕсли;
				
				Если Ном = КоличествоРабот Тогда
					МассивОбластиПодвала.Добавить(ОбластьПодвалУслуг);
				КонецЕсли;
					
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаУслуг, ОбластьШапкаУслуг, ОбластьИтоговПоСтраницеУслуги, НомерСтраницы, СтруктураИтоговПоСтранице,Документ, МассивОбластиПодвала);
				
				Если МассивМатериалов.Количество() > 0 Тогда
					
					ТабличныйДокумент.Вывести(ОбластьШапкаМатериалов);
					Для Каждого СтрокаМатериалов Из МассивМатериалов Цикл
						ОбластьСтрокаМатериалов.Параметры.Заполнить(СтрокаМатериалов);
						ОбластьСтрокаМатериалов.Параметры.Наименование = ?(ТипЗнч(СтрокаМатериалов.Номенклатура) = Тип("СправочникСсылка.Номенклатура"), УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаМатериалов.Номенклатура), СтрокаМатериалов.Номенклатура);
						ТабличныйДокумент.Вывести(ОбластьСтрокаМатериалов);
						Если СтрокаМатериалов.ПримечаниеНоменклатураПечать <> "" Тогда
							ОбластьСтрокаПримечаниеНоменклатура.Параметры.ПримечаниеНоменклатура = СтрокаМатериалов.ПримечаниеНоменклатураПечать;
							ТабличныйДокумент.Вывести(ОбластьСтрокаПримечаниеНоменклатура);
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				Если МассивИсполнителей.Количество() > 0 Тогда
					
					ТабличныйДокумент.Вывести(ОбластьШапкаИсполнителей);
					Для Каждого СтрокаИсполнителей Из МассивИсполнителей Цикл
						ОбластьСтрокаИсполнителей.Параметры.Заполнить(СтрокаИсполнителей);
						ОбластьСтрокаИсполнителей.Параметры.ПроцентУчастия          = Строка(СтрокаИсполнителей.Процент) + " %";
						ОбластьСтрокаИсполнителей.Параметры.ИсполнительНаименование = Строка(СтрокаИсполнителей.Исполнитель);
						ОбластьСтрокаИсполнителей.Параметры.ЦехПредставление        = Строка(СтрокаИсполнителей.Цех);
						ТабличныйДокумент.Вывести(ОбластьСтрокаИсполнителей);
					КонецЦикла;
					
				КонецЕсли;
				
				Если НЕ СтрокаРабот = Неопределено И СтрокаРабот.ПримечаниеРаботыПечать <> "" Тогда
					УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаПримечаниеРаботы, , , , , Документ);
				КонецЕсли;
				// инициализация итогов по странице
				Если НомерСтраницы <> НомерСтраницыПред Тогда
					
					СтруктураИтоговПоСтранице = Новый Структура("СуммаВсего, Количество, СуммаСкидки", 0, 0, 0);
					НомерСтраницыПред = НомерСтраницы;
					ОбластьШапкаУслуг.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
				КонецЕсли;
				
				Если СтрокаРабот = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаРабот, СтруктураИтоговПоСтранице);
	
			КонецЦикла;
			
			// довыводим последний итог по странице, если страниц больше единицы
			Если НомерСтраницы > 2 Тогда
				УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтоговПоСтраницеУслуги, СтруктураИтоговПоСтранице, Документ);
			КонецЕсли;
			
			// Вывод подвала табличной части услуг
			ОбластьПодвалУслуг.Параметры.Количество = Формат(ИтогоКоличествоРабот, ФорматВыводаКоличества);
			ОбластьПодвалУслуг.Параметры.Сумма = Формат(ИтогоСуммаРабот, ФорматВыводаСуммы);
			Если ЕстьСкидкаПоРаботам Тогда
				ОбластьПодвалУслуг.Параметры.Скидка = Формат(ИтогоСуммаСкидкиРабот, ФорматВыводаСуммы);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвалУслуг, , , НомерСтраницы, , Документ);
			
			// Формирование врем. таблиц товаров
			Для ТекСтр = 1 по 5 Цикл
				ТаблТовары.Добавить();
			КонецЦикла;
			КоличествоДеталей = ТаблТовары.Количество();
			
			// Вывод шапки табличной части деталей
			Если ЕстьПричиныОбращений Тогда
				ОбластьДетали.Область(2, 3, 2, 3).Текст = СтрШаблон(
					НСтр("ru = 'Требование к заказ-наряду № %1 от %2 к причине обращения ""%3""'"),
					НомерДляПечати,
					Формат(Документ.ДатаСоздания, "ДЛФ=D"),
					ПричинаОбращения.ПричинаОбращения
				);
			Иначе
				ОбластьДетали.Параметры.НомерДок = НомерДляПечати;
				ОбластьДетали.Параметры.ДатаДок  = Формат(Документ.ДатаСоздания, "ДЛФ=D");
			КонецЕсли;
			ОбластьДетали.Параметры.ИмяКолонкиКодов = КолонкаКода;
			// Если помещается только шапка, но ни одной строчки, то шапку переносим на след. страницу.
			ТабДокВрем = Новый ТабличныйДокумент;
			ТабДокВрем.ПолеСверху = 10; ТабДокВрем.ПолеСнизу  = 10;
			ТабДокВрем.ПолеСлева  = 0; ТабДокВрем.ПолеСправа = 0;
			ТабДокВрем.Вывести(ОбластьДетали);
			ОбластьМакетаСтрокаВрем = Макет.ПолучитьОбласть("СтрокаДеталей");
			СтрокаДеталей = ТаблТовары[0];
			ТекОбласть = ОбластьМакетаСтрокаВрем.Область(1,, 1);
			Если КоличествоДеталей = 5 Тогда
				// Присутствуют только пустые строки
				ТекОбласть.АвтовысотаСтроки = Ложь;
				ТекОбласть.ВысотаСтроки = 22;
			Иначе
				// Присутствуют заполненные строки (заполняем не все параметры - только наиболее вероятно длинные).
				ТекТовар = СтрокаДеталей.Номенклатура;
				ОбластьМакетаСтрокаВрем.Параметры.Наименование = ?(ТипЗнч(ТекТовар) = Тип("СправочникСсылка.Номенклатура"),
					УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ТекТовар),
					ТекТовар
				);
			КонецЕсли;
			ТабДокВрем.Вывести(ОбластьМакетаСтрокаВрем);
			ТабДокВрем.Вывести(ОбластьИтоговПоСтраницеДетали);
			Если НЕ ТабличныйДокумент.ПроверитьВывод(ТабДокВрем) Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ОбластьШапкаДеталей.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
				НомерСтраницы = НомерСтраницы + 1;
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьДетали);
			
			Если ЕстьПричиныОбращений Тогда
				ТекстЗаголовка = СтрШаблон(
					НСтр("ru = 'Требование к заказ-наряду № %1 от %2 к причине обращения: %3'"),
					НомерДляПечати,
					Формат(Документ.ДатаСоздания, "ДЛФ=D"),
					ПричинаОбращения.ПричинаОбращения
				);
			Иначе
				ТекстЗаголовка = СтрШаблон(
					НСтр("ru = 'Требование к заказ-наряду № %1 от %2'"),
					НомерДляПечати,
					Формат(Документ.ДатаСоздания, "ДЛФ=D")
				);
			КонецЕсли;
			
			// заполним параметры шапки таблицы для следующего листа
			ОбластьШапкаДеталей.Параметры.ТекстЗаголовка = ТекстЗаголовка;
			ОбластьШапкаДеталей.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			ОбластьШапкаДеталей.Параметры.ИмяКолонкиКодов = КолонкаКода;
			
			// Вывод табличной части деталей
			Ном = 0;
			СтруктураИтоговПоСтранице = Новый Структура("СуммаВсего, Количество, СуммаСкидки", 0, 0, 0);
			
			МассивОбластиПодвала = Новый Массив;
			МассивОбластиПодвала.Добавить(ОбластьПодвалДеталей);
			Для каждого СтрокаДеталей Из ТаблТовары Цикл
				Ном = Ном + 1;
				ТекОбласть = ОбластьСтрокаДеталей.Область(1,, 1);
				ОбластьСтрокаДеталей.Параметры.НомСтр = Ном;
				Если Ном > (КоличествоДеталей-5) Тогда
					// установим для пустой строки высоту, равную двум строкам. Параметры не заполняем
					ТекОбласть.АвтовысотаСтроки = Ложь;
					ТекОбласть.ВысотаСтроки = 22;
					ОбластьСтрокаДеталей.Параметры.Код="";
					ОбластьСтрокаДеталей.Параметры.Номенклатура = "";
					ОбластьСтрокаДеталей.Параметры.Наименование = "";
					ОбластьСтрокаДеталей.Параметры.Цена = "";
					ОбластьСтрокаДеталей.Параметры.Количество = "";
					ОбластьСтрокаДеталей.Параметры.Единица = "";
					ОбластьСтрокаДеталей.Параметры.Сумма = "";
					Если ЕстьСкидкаПоДеталям Тогда
						ОбластьСтрокаДеталей.Параметры.Скидка = "";
					КонецЕсли;
					ОбластьСтрокаДеталей.Параметры.ДопИнформация = "";
					Если НЕ СтрокаДеталей = Неопределено И СтрокаДеталей.ПримечаниеНоменклатураПечать <> "" Тогда
						ОбластьСтрокаПримечаниеНоменклатура.Параметры.ПримечаниеНоменклатура = СтрокаДеталей.ПримечаниеНоменклатураПечать;
					КонецЕсли;
				Иначе
					// заполним параметры
					ОбластьСтрокаДеталей.Параметры.Код=УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаДеталей.Номенклатура);
					ОбластьСтрокаДеталей.Параметры.Номенклатура = СтрокаДеталей.Номенклатура;
					ОбластьСтрокаДеталей.Параметры.Наименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаДеталей.Номенклатура);
					ОбластьСтрокаДеталей.Параметры.Цена = Формат(СтрокаДеталей.Цена, "ЧЦ=15; ЧДЦ=2");
					ОбластьСтрокаДеталей.Параметры.Количество = Формат(СтрокаДеталей.Количество*СтрокаДеталей.Коэффициент, ФорматВыводаКоличества);
					ОбластьСтрокаДеталей.Параметры.Единица = СтрокаДеталей.ЕдиницаИзмерения;
					ОбластьСтрокаДеталей.Параметры.Сумма = Формат(СтрокаДеталей.СуммаВсего, ФорматВыводаСуммы);
					Если ЕстьСкидкаПоДеталям Тогда
						ОбластьСтрокаДеталей.Параметры.Скидка = Формат(СтрокаДеталей.СуммаСкидки + СтрокаДеталей.СуммаСкидкиСтроки 
							+ СтрокаДеталей.СуммаСкидкиБонусами, ФорматВыводаСуммы);
					КонецЕсли;
					ОбластьСтрокаДеталей.Параметры.ДопИнформация = "";
					Если СтрокаДеталей.ПримечаниеНоменклатураПечать <> "" Тогда
						ОбластьСтрокаПримечаниеНоменклатура.Параметры.ПримечаниеНоменклатура = СтрокаДеталей.ПримечаниеНоменклатураПечать;
					КонецЕсли;
					// Обновим итоги по документу
					ИтогоСуммаДеталей = ИтогоСуммаДеталей + СтрокаДеталей.СуммаВсего;
					ИтогоСуммаСкидкиДеталей = ИтогоСуммаСкидкиДеталей + СтрокаДеталей.СуммаСкидки 
									+ СтрокаДеталей.СуммаСкидкиСтроки + СтрокаДеталей.СуммаСкидкиБонусами;
					ИтогоКоличествоДеталей = ИтогоКоличествоДеталей + СтрокаДеталей.Количество * СтрокаДеталей.Коэффициент;
				КонецЕсли;
				
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаДеталей, ОбластьШапкаДеталей, ОбластьИтоговПоСтраницеДетали, НомерСтраницы, СтруктураИтоговПоСтранице,Документ, ?(Ном=КоличествоДеталей, МассивОбластиПодвала, Неопределено));
				Если НЕ СтрокаДеталей = Неопределено И СтрокаДеталей.ПримечаниеНоменклатураПечать <> "" Тогда
					УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаПримечаниеНоменклатура,,,,, Документ);
				КонецЕсли;
				
				// инициализация итогов по странице
				Если НомерСтраницы <> НомерСтраницыПред Тогда
					СтруктураИтоговПоСтранице = Новый Структура("СуммаВсего, Количество, СуммаСкидки", 0, 0, 0);
					НомерСтраницыПред = НомерСтраницы;
					ОбластьШапкаДеталей.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
				КонецЕсли;
				
				Если СтрокаДеталей = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаДеталей, СтруктураИтоговПоСтранице);
			КонецЦикла; 
			
			// довыводим последний итог по странице, если страниц больше единицы
			Если НомерСтраницы > 2 Тогда
				УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтоговПоСтраницеДетали, СтруктураИтоговПоСтранице, Документ);
			КонецЕсли;
			
			// Вывод подвала табличной части деталей
			ОбластьПодвалДеталей.Параметры.Количество = Формат(ИтогоКоличествоДеталей, ФорматВыводаКоличества);
			ОбластьПодвалДеталей.Параметры.Сумма = Формат(ИтогоСуммаДеталей, ФорматВыводаСуммы);
			Если ЕстьСкидкаПоДеталям Тогда
				ОбластьПодвалДеталей.Параметры.Скидка = Формат(ИтогоСуммаСкидкиДеталей, ФорматВыводаСуммы);
			КонецЕсли;
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвалДеталей, , , НомерСтраницы, , Документ);
			
			Если ЕстьПричиныОбращений Тогда
				ОбластьПодвалПричиныОбращения.Параметры.Сумма = Формат(ИтогоСуммаРабот + ИтогоСуммаДеталей, ФорматВыводаСуммы);
				ТабличныйДокумент.Вывести(ОбластьПодвалПричиныОбращения);
			КонецЕсли;
			
			ИтогоОбщийПоСумме = ИтогоОбщийПоСумме + ИтогоСуммаРабот + ИтогоСуммаДеталей;
			
		КонецЦикла;
		
		ТаблТоварыКлиента = Документ.МатериалыЗаказчика.Выгрузить();
		Для ТекСтр = 1 По 10 Цикл
			ТаблТоварыКлиента.Добавить();
		КонецЦикла;
		КоличествоДеталейКлиента = ТаблТоварыКлиента.Количество();
		
		// Вывод шапки табличной части деталей клиента
		ОбластьМакета = Макет.ПолучитьОбласть("ДеталиКлиента");
		ОбластьМакета.Параметры.НомерДок = НомерДляПечати;
		ОбластьМакета.Параметры.ДатаДок  = Формат(Документ.ДатаСоздания,"ДФ = дд.ММ.гггг");
		ОбластьМакета.Параметры.ИмяКолонкиКодов = КолонкаКода;
		// Если помещается только шапка, но ни одной строчки, то шапку переносим на след. страницу.
		ТабДокВрем.Очистить();
		ТабДокВрем.Вывести(ОбластьМакета);
		// ТабДокВрем.Вывести(ОбластьШапкаДеталей);
		ОбластьМакетаСтрокаВрем = Макет.ПолучитьОбласть("СтрокаДеталей");
		СтрокаДеталей = ТаблТоварыКлиента[0];
		ТекОбласть = ОбластьМакетаСтрокаВрем.Область(1,, 1);
		Если КоличествоДеталейКлиента = 10 Тогда
			// Присутствуют только пустые строки
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 22;
		Иначе
			// Присутствуют заполненные строки (заполняем не все параметры - только наиболее вероятно длинные).
			ТекТовар = СтрокаДеталей.Номенклатура;
			ОбластьМакетаСтрокаВрем.Параметры.Наименование = ?(ТипЗнч(ТекТовар) = Тип("СправочникСсылка.Номенклатура"),
				УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ТекТовар),
				ТекТовар
			);
		КонецЕсли;
		ТекОбласть.АвтовысотаСтроки = Истина;
		ТабДокВрем.Вывести(ОбластьМакетаСтрокаВрем);
		ТабДокВрем.Вывести(ОбластьИтоговПоСтраницеДеталиКлиента);

		Если НЕ ТабличныйДокумент.ПроверитьВывод(ТабДокВрем) Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ТекстЗаголовка = СтрШаблон(
			НСтр("ru = 'Перечень деталей клиента к заказ-наряду № %1 от %2'"),
			НомерДляПечати,
			Формат(Документ.ДатаСоздания, "ДЛФ=D")
		);
		
		// Заполним параметры шапки таблицы для следующего листа
		ОбластьШапкаДеталейКлиента.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаДеталейКлиента.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
		ОбластьШапкаДеталейКлиента.Параметры.ИмяКолонкиКодов = КолонкаКода;
		
		// Вывод табличной части деталей клиента
		Ном = 0;
		СтруктураИтоговПоСтранице = Новый Структура("Количество", 0);
		
		МассивОбластиПодвала = Новый Массив;
		МассивОбластиПодвала.Добавить(ОбластьПодвалДеталейКлиента);
		Для каждого СтрокаДеталей Из ТаблТоварыКлиента Цикл
			Ном = Ном + 1;
			ТекОбласть = ОбластьСтрокаДеталейКлиента.Область(1,, 1);
			ОбластьСтрокаДеталейКлиента.Параметры.НомСтр = Ном;
			Если Ном > (КоличествоДеталейКлиента - 10) Тогда
				// установим для пустой строки высоту, равную двум строкам. Параметры не заполняем
				ТекОбласть.АвтовысотаСтроки = Ложь;
				ТекОбласть.ВысотаСтроки = 22;
				ОбластьСтрокаДеталейКлиента.Параметры.Код= "";
				ОбластьСтрокаДеталейКлиента.Параметры.Номенклатура = "";
				ОбластьСтрокаДеталейКлиента.Параметры.Наименование = "";
				ОбластьСтрокаДеталейКлиента.Параметры.Количество = "";
				ОбластьСтрокаДеталейКлиента.Параметры.Единица = "";
				Если СтрокаДеталей.ПримечаниеНоменклатураПечать <> "" Тогда
					ОбластьСтрокаПримечаниеНоменклатураКлиента.Параметры.ПримечаниеНоменклатура = СтрокаДеталей.ПримечаниеНоменклатураПечать;
				КонецЕсли;
			Иначе
				// заполним параметры
				ТекТоварКлиента = СтрокаДеталей.Номенклатура;
				ОбластьСтрокаДеталейКлиента.Параметры.Код = ?(ТипЗнч(ТекТоварКлиента) = Тип("СправочникСсылка.Номенклатура"), УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(ТекТоварКлиента), "");
				ОбластьСтрокаДеталейКлиента.Параметры.Номенклатура = ТекТоварКлиента;
				ОбластьСтрокаДеталейКлиента.Параметры.Наименование = ?(ТипЗнч(ТекТоварКлиента) = Тип("СправочникСсылка.Номенклатура"), УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ТекТоварКлиента), ТекТоварКлиента);
				ОбластьСтрокаДеталейКлиента.Параметры.Количество = Формат(СтрокаДеталей.Количество*СтрокаДеталей.Коэффициент, ФорматВыводаКоличества);
				ОбластьСтрокаДеталейКлиента.Параметры.Единица = СтрокаДеталей.ЕдиницаИзмерения;
				Если СтрокаДеталей.ПримечаниеНоменклатураПечать <> "" Тогда
					ОбластьСтрокаПримечаниеНоменклатураКлиента.Параметры.ПримечаниеНоменклатура = СтрокаДеталей.ПримечаниеНоменклатураПечать;
				КонецЕсли;	
				// Обновим итоги по документу
				ИтогоКоличествоДеталейКлиента = ИтогоКоличествоДеталейКлиента + СтрокаДеталей.Количество*СтрокаДеталей.Коэффициент;
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаДеталейКлиента, ОбластьШапкаДеталейКлиента, ОбластьИтоговПоСтраницеДеталиКлиента, НомерСтраницы, СтруктураИтоговПоСтранице,Документ,МассивОбластиПодвала);
			Если СтрокаДеталей.ПримечаниеНоменклатураПечать <> "" Тогда
				УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаПримечаниеНоменклатураКлиента,,,,, Документ);
			КонецЕсли;	
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура("Количество", 0);
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапкаДеталейКлиента.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			КонецЕсли;
			
			// обновим итоги по странице
			СтруктураИтоговПоСтранице.Количество = СтруктураИтоговПоСтранице.Количество + СтрокаДеталей.Количество*СтрокаДеталей.Коэффициент;
		КонецЦикла;
		
		// довыводим последний итог по странице, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтоговПоСтраницеДеталиКлиента, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// Вывод подвала табличной части деталей клиента
		ОбластьПодвалДеталейКлиента.Параметры.КоличествоДеталейЗаказчика = Формат(ИтогоКоличествоДеталейКлиента, ФорматВыводаКоличества);
		
		НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвалДеталейКлиента, , , НомерСтраницы, , Документ);
		
		// Вывод подвала документа
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Сумма = Формат(ИтогоОбщийПоСумме, ФорматВыводаСуммы);
		ОбластьМакета.Параметры.УсловияПриема = ПраваИНастройкиПользователя.Значение("УсловияПриемаАвтомобиляВРемонт", Документ);
		ОбластьМакета.Параметры.Мастер = Документ.Мастер;
		ОбластьМакета.Параметры.МастерПолноеНаименование = Документ.Мастер.Наименование;
		ОбластьМакета.Параметры.Заказчик = Заказчик;
		ОбластьМакета.Параметры.ЗаказчикПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Заказчик, Документ.Дата);
		ОбластьМакета.Параметры.ДатаДок = Формат(Документ.ДатаСоздания, "ДФ = дд.ММ.гггг");
		НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьМакета, , , НомерСтраницы, , Документ);
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ТабицаЗаказНаряд.Номер,
		|	ТабицаЗаказНаряд.ВидРемонта,
		|	ТабицаЗаказНаряд.Состояние,
		|	ТабицаЗаказНаряд.ДатаСоздания,
		|	ТабицаЗаказНаряд.Ссылка КАК ЗаказНаряд
		|ИЗ
		|	Документ.ЗаказНаряд КАК ТабицаЗаказНаряд
		|ГДЕ
		|	ТабицаЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль = &Автомобиль И 
		|	((НЕ ТабицаЗаказНаряд.Состояние = ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.Выполнен)) И 
		|	(НЕ ТабицаЗаказНаряд.Состояние = ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.Закрыт))) И 
		|	ТабицаЗаказНаряд.ПометкаУдаления = ЛОЖЬ И 
		|	(НЕ ТабицаЗаказНаряд.Ссылка = &Ссылка)");
		Запрос.УстановитьПараметр("Автомобиль", Автомобиль);
		Запрос.УстановитьПараметр("Ссылка",     Документ.Ссылка);
		
		ТаблицаЗН = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаЗН.Количество() > 0 Тогда
			
			// Вывод шапки табличной части деталей
			ОбластьСписокОткрытыхЗН.Параметры.Автомобиль             = Автомобиль;
			ОбластьСписокОткрытыхЗН.Параметры.АвтомобильПредставление = СокрЛП(Автомобиль);
			
			// Если помещается только шапка, но ни одной строчки, то шапку переносим на след. страницу.
			ТабДокВрем = Новый ТабличныйДокумент;
			ТабДокВрем.ПолеСверху = 10; ТабДокВрем.ПолеСнизу  = 10;
			ТабДокВрем.ПолеСлева  = 0; ТабДокВрем.ПолеСправа = 0;
			ТабДокВрем.Вывести(ОбластьСписокОткрытыхЗН);
			ОбластьМакетаСтрокаВрем = Макет.ПолучитьОбласть("СтрокаСписокОткрытыхЗН");
			
			ТекОбласть = ОбластьМакетаСтрокаВрем.Область(1,, 1);
			ОбластьМакетаСтрокаВрем.Параметры.Заполнить(ТаблицаЗН[0]);
			
			ТабДокВрем.Вывести(ОбластьМакетаСтрокаВрем);
			ТабДокВрем.Вывести(ОбластьИтоговПоСтраницеСписокЗН);
			Если НЕ ТабличныйДокумент.ПроверитьВывод(ТабДокВрем) Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьСписокОткрытыхЗН);
			
			ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Список заказ-нарядов по %1'"), СокрЛП(Автомобиль));
			
			ОбластьШапкаСписокОткрытыхЗН = ОбластьСписокОткрытыхЗН.ПолучитьОбласть("ШапкаСписокОткрытыхЗН");
			
			// заполним параметры шапки таблицы для следующего листа
			ОбластьШапкаСписокОткрытыхЗН.Параметры.ТекстЗаголовка = ТекстЗаголовка;
			ОбластьШапкаСписокОткрытыхЗН.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			
			СтруктураИтоговПоСтранице = Новый Структура;
			
			КоличествоЗН = ТаблицаЗН.Количество();
			
			// Вывод табличной части открытые заказ-наряды
			Ном = 0;
			МассивОбластиПодвала = Новый Массив;
			МассивОбластиПодвала.Добавить(ОбластьПодвалСписокОткрытыхЗН);
			Для каждого СтрокаЗН Из ТаблицаЗН Цикл
				Ном = Ном + 1;
				
				ОбластьСтрокаСписокОткрытыхЗН.Параметры.Заполнить(СтрокаЗН);
				ОбластьСтрокаСписокОткрытыхЗН.Параметры.НомСтр = Ном;
				
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаСписокОткрытыхЗН, ОбластьШапкаСписокОткрытыхЗН, ОбластьИтоговПоСтраницеСписокЗН, НомерСтраницы, СтруктураИтоговПоСтранице, Документ, ?(Ном=КоличествоЗН, МассивОбластиПодвала, Неопределено));
				
				// инициализация итогов по странице
				Если НомерСтраницы <> НомерСтраницыПред Тогда
					НомерСтраницыПред = НомерСтраницы;
					ОбластьШапкаСписокОткрытыхЗН.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
				КонецЕсли;
				
			КонецЦикла;
			// довыводим последний итог по странице, если страниц больше единицы
			Если НомерСтраницы > 2 Тогда
				УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтоговПоСтраницеСписокЗН, СтруктураИтоговПоСтранице, Документ);
			КонецЕсли;
			
			// Вывод подвала табличной части деталей
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвалСписокОткрытыхЗН, , , НомерСтраницы, , Документ);
		КонецЕсли;
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаряд_РабочаяЗаявка";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "ПриемныйАкт"
// Возвращает сформированный табличный документ:
Функция ПечатьПриемныйАкт(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		ФорматПредставленияГодаВыпускаАвтомобиля = АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Документ);
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаряд.ПФ_MXL_ПриемныйАкт");
		
		ОбластьШапка  = Макет.ПолучитьОбласть("Шапка");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		
		НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		
		// Вывод шапки документа
		ОбластьШапка.Параметры.Организация = Документ.Организация;
		ОбластьШапка.Параметры.ФирмаПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация, Документ.Дата);
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ДляПечати = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьШапка.Параметры.ФирмаАдресЮридический = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			ОбластьШапка.Параметры.Организация, Новый Структура("АдресЮридический", " "), ДополнительныеПараметры);
		ОбластьШапка.Параметры.ФирмаТелефоны = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Организация, Новый Структура("ТелефонРабочий", " "), ДополнительныеПараметры);
		ОбластьШапка.Параметры.НомерДок = НомерДляПечати;
		ОбластьШапка.Параметры.ДатаСоздания = Формат(Документ.ДатаСоздания, "ДФ = дд.ММ.гггг");
		
		Заказчик = Документ.СводныйРемонтныйЗаказ.Заказчик;
		ОбластьШапка.Параметры.Заказчик = Заказчик;
		ОбластьШапка.Параметры.ЗаказчикПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Заказчик, Документ.Дата);
		ОбластьШапка.Параметры.ЗаказчикАдресПочтовый = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказчик, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.ЗаказчикТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказчик, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		
		Автомобиль = Документ.СводныйРемонтныйЗаказ.Автомобиль;
		ОбластьШапка.Параметры.Автомобиль = Автомобиль.Модель;
		Если ЗначениеЗаполнено(Автомобиль) Тогда
			ОбластьШапка.Параметры.АвтомобильКод = Автомобиль.VIN;
			ОбластьШапка.Параметры.АвтомобильМодель = Автосервис.МаркаМодельАвтомобиля(Автомобиль);
			ОбластьШапка.Параметры.АвтомобильГодВыпуска = Формат(Автомобиль.ГодВыпуска,ФорматПредставленияГодаВыпускаАвтомобиля);
			ОбластьШапка.Параметры.АвтомобильНомерДвигателя = Автомобиль.НомерДвигателя;
			ОбластьШапка.Параметры.АвтомобильНомерШасси = Автомобиль.НомерШасси;
			ОбластьШапка.Параметры.АвтомобильНомерКузова = Автомобиль.НомерКузова;
			ОбластьШапка.Параметры.АвтомобильЦвет = Автомобиль.Цвет;
			
			ОбластьШапка.Параметры.АвтомобильГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер,Документ.ДатаСоздания);
			ОбластьШапка.Параметры.АвтомобильТехПаспорт = СокрЛП(Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ТехПаспорт,Документ.ДатаСоздания));
			
			Пробег = ?(Документ.Пробег > Документ.СводныйРемонтныйЗаказ.Пробег, 
						Документ.Пробег, 
						Документ.СводныйРемонтныйЗаказ.Пробег);
			ОбластьШапка.Параметры.АвтомобильПробег = Формат(Пробег, "ЧЦ=10");
		КонецЕсли;
		ОбластьШапка.Параметры.Мастер = Документ.Мастер;
		ОбластьШапка.Параметры.МастерПолноеНаименование = Документ.Мастер.Наименование;
		ОбластьШапка.Параметры.Диспетчер = Документ.Диспетчер;
		ОбластьШапка.Параметры.ДиспетчерПолноеНаименование = Документ.Диспетчер.Наименование;
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		// Вывод подвала документа
		ОбластьПодвал.Параметры.УсловияПриема = ПраваИНастройкиПользователя.Значение("УсловияПриемаАвтомобиляВРемонт", Документ);
		ОбластьПодвал.Параметры.Организация = Документ.Организация;
		ОбластьПодвал.Параметры.Заказчик = Заказчик;
		ОбластьПодвал.Параметры.ЗаказчикПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Заказчик, Документ.Дата);
		ОбластьПодвал.Параметры.ФирмаАдресПочтовый = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Организация, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, ТекущаяДатаСеанса());
		ОбластьПодвал.Параметры.ФирмаТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, ТекущаяДатаСеанса());
		ОбластьПодвал.Параметры.Мастер = Документ.Мастер;
		ОбластьПодвал.Параметры.МастерПолноеНаименование = Документ.Мастер.Наименование;
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаряд_ПриемныйАкт";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "ЗаказНаряд"
// Возвращает сформированный табличный документ:
Функция ПечатьЗаказНаряд(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		
		ДатаПечатная = ?(НЕ ЗначениеЗаполнено(Документ.ДатаЗакрытия), Документ.ДатаСоздания, Документ.ДатаЗакрытия);
		
		Если Документ.Состояние <> Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
			// Контроль запрета печати без закрытия
			Если НЕ ПраваИНастройкиПользователя.Значение("ПечатьЗаказНарядаБезЗакрытия", Документ) Тогда
				ОбщегоНазначения.СообщитьПользователю(Нстр("ru = 'Печать заказ-наряда без его закрытия запрещена.'"));
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Контроль запрета печати при наличии открытых заказ-нарядов
		Если НЕ ПраваИНастройкиПользователя.Значение("ПечатьЗаказНарядаПриНаличииОткрытых", Документ) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказНаряд.Ссылка) КАК Количество
			|ИЗ
			|	Документ.ЗаказНаряд КАК ЗаказНаряд
			|ГДЕ
			|	ЗаказНаряд.Состояние <> ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.Закрыт) И
			|	ЗаказНаряд.ПометкаУдаления = ЛОЖЬ И
			|	ЗаказНаряд.СводныйРемонтныйЗаказ.Заказчик = &Заказчик И
			|	ЗаказНаряд.Ссылка <> &ЭтотДокумент";
			Запрос.УстановитьПараметр("Заказчик", Документ.СводныйРемонтныйЗаказ.Заказчик);
			Запрос.УстановитьПараметр("ЭтотДокумент", Документ);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Если Выборка.Количество > 0 Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							Нстр("ru = 'Печать заказ-наряда заказчика %1 запрещено, так как у него имеются другие открытые заказ-наряды.'"),
							Документ.СводныйРемонтныйЗаказ.Заказчик.НаименованиеПолное
						)
					);
					Продолжить;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		
		ТаблицаТоваров = Документ.Товары.Выгрузить();
		ТаблицаРабот = Документ.Автоработы.Выгрузить();
		ТаблицаМатериаловЗаказчика = Документ.МатериалыЗаказчика.Выгрузить();
		ТаблицаПричинОбращения = Документ.ПричиныОбращения.Выгрузить();
				
		// Проверка вывода подвала документа
		
		ЕстьТовары = ТаблицаТоваров.Количество() <> 0;
		ЕстьРаботы = ТаблицаРабот.Количество() <> 0;
		ЕстьМатериалыЗаказчика = ТаблицаМатериаловЗаказчика.Количество() <> 0;
		
		ПодвалПослеРабот = Ложь;
		ПодвалПослеТоваров = Ложь;
		ПодвалПослеМатериаловЗаказчика = Ложь;
		
		Если ЕстьМатериалыЗаказчика Тогда
			ПодвалПослеМатериаловЗаказчика = Истина;
		ИначеЕсли ЕстьТовары Тогда
			ПодвалПослеТоваров = Истина;
		ИначеЕсли ЕстьРаботы Тогда
			ПодвалПослеРабот = Истина;	
		КонецЕсли;			
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаряд.ПФ_MXL_ЗаказНаряд");
		
		ВыводитьКод = ПраваИНастройкиПользователя.Значение("ВыводитьКодВПечатныхФормах", Документ);
		ЕстьСкидкаПоДеталям = Ложь;
		Если Документ.Товары.Итог("СуммаСкидки") <> 0
			ИЛИ Документ.Товары.Итог("СуммаСкидкиСтроки") <> 0 
			ИЛИ Документ.Товары.Итог("СуммаСкидкиБонусами") <> 0 Тогда
			
			ЕстьСкидкаПоДеталям = Истина;
			
		КонецЕсли;
		
		ЕстьСкидкаПоРаботам = Ложь;
		Если Документ.Автоработы.Итог("СуммаСкидки") <> 0
			ИЛИ Документ.Автоработы.Итог("СуммаСкидкиСтроки") <> 0
			ИЛИ Документ.Автоработы.Итог("СуммаСкидкиБонусами") <> 0 Тогда
			
			ЕстьСкидкаПоРаботам = Истина;
			
		КонецЕсли;
		
		ЕстьПричиныОбращений = (ТаблицаПричинОбращения.Количество() > 0);
		
		Если НЕ ЕстьПричиныОбращений Тогда
			ТаблицаПричинОбращения.Добавить();
		Иначе
			ПричиныИАвтоработы = ПричиныОбращенийСлужебный.СоставПричинОбращенийПоЗаказНаряду(Документ);
			ТаблицаРабот.Колонки.Добавить("ИдентификаторПричиныОбращения");
			Для Каждого Авторабота Из ТаблицаРабот Цикл
				НайденныеСтроки = ПричиныИАвтоработы.НайтиСтроки(Новый Структура("Авторабота", Авторабота.ИдентификаторРаботы));
				Если НайденныеСтроки.Количество() > 0 Тогда
					Авторабота.ИдентификаторПричиныОбращения = НайденныеСтроки[0].ПричинаОбращения;
				Иначе
					Авторабота.ИдентификаторПричиныОбращения = ТаблицаПричинОбращения[0].ИдентификаторПричиныОбращения;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// зададим параметры макета
		ТабличныйДокумент.ПолеСверху = 10; // поле равно высоте колонтитулов
		ТабличныйДокумент.ПолеСлева  = 0;
		ТабличныйДокумент.ПолеСнизу  = 0;
		ТабличныйДокумент.ПолеСправа = 0;
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		ОбластьСкидка = Макет.Область("Скидка");
		
		ОбластьШапкаПричиныОбращения        = Макет.ПолучитьОбласть("ШапкаПричиныОбращения");
		ОбластьУслуги                       = Макет.ПолучитьОбласть("Услуги");
		ОбластьДетали                       = Макет.ПолучитьОбласть("Детали");
		ОбластьСтрокаДеталей	            = Макет.ПолучитьОбласть("СтрокаДеталей");
		ОбластьСтрокаПримечаниеНоменклатура = Макет.ПолучитьОбласть("СтрокаПримечаниеНоменклатура");
		ОбластьИтоговПоСтраницеДетали	    = Макет.ПолучитьОбласть("ИтогиПоСтраницеДеталей");
		ОбластьПодвалДеталей	            = Макет.ПолучитьОбласть("ПодвалДетали");
		ОбластьСтрокаУслуг		            = Макет.ПолучитьОбласть("СтрокаРабот");
		ОбластьСтрокаПримечаниеРаботы       = Макет.ПолучитьОбласть("СтрокаПримечаниеРаботы");
		ОбластьИтоговПоСтраницеУслуги	    = Макет.ПолучитьОбласть("ИтогиПоСтраницеРабот");
		ОбластьПодвалУслуг		            = Макет.ПолучитьОбласть("ПодвалУслуги");
		
		ОбластьПодвалПричиныОбращения       = Макет.ПолучитьОбласть("ПодвалПричиныОбращения");
		
		ОбластьШапкаДеталейКлиента                 = Макет.ПолучитьОбласть("ШапкаДеталейКлиента");
		ОбластьСтрокаПримечаниеНоменклатураКлиента = Макет.ПолучитьОбласть("СтрокаПримечаниеНоменклатураКлиента");
		ОбластьСтрокаДеталейКлиента                = Макет.ПолучитьОбласть("СтрокаДеталейКлиента");
		ОбластьИтоговПоСтраницеДеталиКлиента       = Макет.ПолучитьОбласть("ИтогиПоСтраницеДеталейКлиента");
		ОбластьПодвалДеталейКлиента                = Макет.ПолучитьОбласть("ПодвалКлиента");
		
		ОбластьШапкаМатериалов  = Макет.ПолучитьОбласть("ШапкаМатериалов");
		ОбластьСтрокаМатериалов = Макет.ПолучитьОбласть("СтрокаМатериалов");
		
		БезЛинии     = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		ОбычнаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		
		НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		
		// Проверим наличие причин обращений
		Если НЕ ЕстьПричиныОбращений Тогда
			
			ТекОбласть = ОбластьШапкаПричиныОбращения.Область(1,, 1);
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			ОбластьШапкаПричиныОбращения.Область(1, 2, 1, 2).Текст = "";
			
			ТекОбласть = ОбластьШапкаПричиныОбращения.Область(2,, 2);
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			ОбластьШапкаПричиныОбращения.Область(2, 2, 2, 2).Текст = "";
			
			ТекОбласть = ОбластьПодвалПричиныОбращения.Область(1,, 1);
			ТекОбласть.Очистить(Истина, Истина, Истина);
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			
			ТекОбласть = ОбластьПодвалПричиныОбращения.Область(2,, 2);
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			
		Иначе
			
			ТекОбласть = ОбластьДетали.Область(2,, 2);
			ОбластьДетали.Область(2, 3, 2, 3).Текст = СтрШаблон(
				НСтр("ru = 'Расходная накладная к заказ-наряду №  %1 от %2 к причине обращения'"),
				НомерДляПечати, Формат(ДатаПечатная, "ДЛФ = D"));
			
			ТекОбласть = ОбластьУслуги.Область(2,, 2);
			ОбластьУслуги.Область(2, 3, 2, 3).Текст = СтрШаблон(
				НСТр("ru = 'Выполненные работы по заказ-наряду №  %1 от %2 к причине обращения'"),
				НомерДляПечати, Формат(ДатаПечатная, "ДЛФ = D"));
			
		КонецЕсли;
		
		// Настроем колонки вывода деталей если не было скидок
		Если Не ЕстьСкидкаПоДеталям Тогда
			ПоложениеШапкиДеталей = ОбластьДетали.Область("ШапкаДеталей").Низ;
			ПозицияКолонки = ОбластьСкидка.Лево;
			Пока ПозицияКолонки > 8 Цикл
				ОбластьДетали.Область(ПоложениеШапкиДеталей - 1, ПозицияКолонки, ПоложениеШапкиДеталей - 1, ПозицияКолонки).Текст =
					ОбластьДетали.
					Область(ПоложениеШапкиДеталей - 1, ПозицияКолонки - 1, ПоложениеШапкиДеталей - 1, ПозицияКолонки - 1).Текст;
				ОбластьДетали.Область(ПоложениеШапкиДеталей, ПозицияКолонки, ПоложениеШапкиДеталей, ПозицияКолонки).Текст =
					ОбластьДетали.Область(ПоложениеШапкиДеталей, ПозицияКолонки - 1, ПоложениеШапкиДеталей, ПозицияКолонки - 1).Текст;
				
				ОбластьИсточник = ОбластьСтрокаДеталей.Область(1, ПозицияКолонки - 1, 1, ПозицияКолонки - 1);
				ОбластьПриемник = ОбластьСтрокаДеталей.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
				
				ОбластьИсточник = ОбластьИтоговПоСтраницеДетали.Область(1, ПозицияКолонки - 1, 1, ПозицияКолонки - 1);
				ОбластьПриемник = ОбластьИтоговПоСтраницеДетали.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
				
				ОбластьИсточник = ОбластьПодвалДеталей.Область(1, ПозицияКолонки - 1, 1, ПозицияКолонки - 1);
				ОбластьПриемник = ОбластьПодвалДеталей.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
				
				ПозицияКолонки = ПозицияКолонки-1;
			КонецЦикла;
			
			ОбластьДетали.Область(ПоложениеШапкиДеталей - 1, 4, ПоложениеШапкиДеталей - 1, 9).Объединить();
			ОбластьДетали.Область(ПоложениеШапкиДеталей, 4, ПоложениеШапкиДеталей, 9).Объединить();
			ОбластьСтрокаДеталей.Область(1, 4, 1, 9).Объединить();
			
			ТекОбласть = ОбластьИтоговПоСтраницеДетали.Область(1, 2, 1, 9);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСнизу = БезЛинии;
			
			ТекОбласть = ОбластьПодвалДеталей.Область(1, 2, 1, 9);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСнизу = БезЛинии;
			
			ТекОбласть = ОбластьИтоговПоСтраницеДетали.Область(1, 11, 1, 12);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСлева = ОбычнаяЛиния;
			ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ТекОбласть.Текст = НСтр("ru = 'на сумму:'");
			
			ТекОбласть = ОбластьПодвалДеталей.Область(1, 11, 1, 12);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСлева = ОбычнаяЛиния;
			ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ТекОбласть.Текст = НСтр("ru = 'на сумму:'");
			
			ПозицияКолонки = ОбластьСкидка.Лево-1;
			Пока ПозицияКолонки <= ОбластьДетали.ШиринаТаблицы Цикл
				Сдвиг = 6;
				ОбластьДетали.Область(ПоложениеШапкиДеталей, ПозицияКолонки, ПоложениеШапкиДеталей, ПозицияКолонки).Текст =
					ПозицияКолонки - Сдвиг;
				ПозицияКолонки = ПозицияКолонки + 1;
			КонецЦикла;
		КонецЕсли;
		
		// Настроем колонки вывода услуг если не было скидок
		Если Не ЕстьСкидкаПоРаботам Тогда
			ПоложениеШапкиУслуг = ОбластьУслуги.Область("ШапкаУслуг").Низ;
			ПозицияКолонки = ОбластьСкидка.Лево;
			Пока ПозицияКолонки > 7 Цикл
				ОбластьУслуги.Область(ПоложениеШапкиУслуг - 1, ПозицияКолонки, ПоложениеШапкиУслуг - 1, ПозицияКолонки).Текст =
					ОбластьУслуги.
					Область(ПоложениеШапкиУслуг - 1, ПозицияКолонки - 1, ПоложениеШапкиУслуг - 1, ПозицияКолонки - 1).Текст;
				ОбластьУслуги.Область(ПоложениеШапкиУслуг, ПозицияКолонки, ПоложениеШапкиУслуг, ПозицияКолонки).Текст =
					ОбластьУслуги.Область(ПоложениеШапкиУслуг, ПозицияКолонки - 1, ПоложениеШапкиУслуг, ПозицияКолонки - 1).Текст;
				
				ОбластьИсточник = ОбластьСтрокаУслуг.Область(1, ПозицияКолонки - 1, 1, ПозицияКолонки - 1);
				ОбластьПриемник = ОбластьСтрокаУслуг.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
				
				ОбластьИсточник = ОбластьИтоговПоСтраницеУслуги.Область(1, ПозицияКолонки - 1, 1,ПозицияКолонки - 1);
				ОбластьПриемник = ОбластьИтоговПоСтраницеУслуги.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
				
				ОбластьИсточник = ОбластьПодвалУслуг.Область(1, ПозицияКолонки - 1, 1, ПозицияКолонки - 1);
				ОбластьПриемник = ОбластьПодвалУслуг.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
				
				ОбластьИсточник = ОбластьШапкаМатериалов.Область(1, ПозицияКолонки - 1, 1, ПозицияКолонки - 1);
				ОбластьПриемник = ОбластьШапкаМатериалов.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
				
				ОбластьИсточник = ОбластьСтрокаМатериалов.Область(1, ПозицияКолонки - 1, 1, ПозицияКолонки - 1);
				ОбластьПриемник = ОбластьСтрокаМатериалов.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				ЗаполнитьЗначенияСвойств(ОбластьПриемник, ОбластьИсточник);
				
				ПозицияКолонки = ПозицияКолонки - 1;
			КонецЦикла;
			
			ОбластьУслуги.Область(ПоложениеШапкиУслуг - 1, 4, ПоложениеШапкиУслуг - 1, 8).Объединить();
			ОбластьУслуги.Область(ПоложениеШапкиУслуг, 4, ПоложениеШапкиУслуг, 8).Объединить();
			ОбластьСтрокаУслуг.Область(1, 4, 1, 8).Объединить();
			ОбластьСтрокаУслуг.Область(1, 4, 1, 8).ГраницаСнизу = БезЛинии;
			
			ОбластьСтрокаМатериалов.Область(1, 6, 1, 8).Объединить();
			
			ТекОбласть = ОбластьИтоговПоСтраницеУслуги.Область(1, 2, 1, 8);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСнизу = БезЛинии;
			
			ТекОбласть = ОбластьПодвалУслуг.Область(1, 2, 1, 8);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСнизу = БезЛинии;
			
			ТекОбласть = ОбластьИтоговПоСтраницеУслуги.Область(1, 10, 1, 12);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСлева = ОбычнаяЛиния;
			ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ТекОбласть.Текст = НСтр("ru = 'на сумму:'");
			
			ТекОбласть = ОбластьПодвалУслуг.Область(1, 10, 1, 12);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСлева = ОбычнаяЛиния;
			ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ТекОбласть.Текст = НСтр("ru = 'на сумму:'");
			
			ПозицияКолонки = ОбластьСкидка.Лево-1;
			Пока ПозицияКолонки <= ОбластьУслуги.ШиринаТаблицы Цикл
				Сдвиг = 5;
				ОбластьУслуги.Область(ПоложениеШапкиУслуг, ПозицияКолонки, ПоложениеШапкиУслуг, ПозицияКолонки).Текст =
					ПозицияКолонки - Сдвиг;
				ПозицияКолонки = ПозицияКолонки + 1;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ВыводитьКод Тогда
			ВремОбластьДетали = ОбластьУслуги.Область(4, 4, 4, 4).Текст;
			ОбластьУслуги.Область(4, 3, 4, 7).Объединить();
			ОбластьУслуги.Область(5, 3, 5, 7).Объединить();
			ОбластьУслуги.Область(4, 3, 4, 4).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ОбластьУслуги.Область(4, 3, 4, 3).Текст = ВремОбластьДетали;
			
			ОбластьСтрокаУслуг.Область(1, 3, 1, 7).Объединить();
			ОбластьСтрокаУслуг.Область(1, 3, 1, 3).Параметр = ВремОбластьДетали;
			ОбластьСтрокаУслуг.Область(1, 3, 1, 3).ПараметрРасшифровки = "Номенклатура";
			
			ОбластьСтрокаДеталей.Область(1, 3, 1, 8).Объединить();
			ОбластьСтрокаДеталей.Область(1, 3, 1, 3).Параметр = ВремОбластьДетали;
			ОбластьСтрокаДеталей.Область(1, 3, 1, 3).ПараметрРасшифровки = "Номенклатура";
			
			ВремОбластьДетали=ОбластьДетали.Область(4, 4, 4, 4).Текст;
			ОбластьДетали.Область(4, 3, 4, 8).Объединить();
			ОбластьДетали.Область(5, 3, 5, 8).Объединить();
			ОбластьДетали.Область(4, 3, 4, 8).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ОбластьДетали.Область(4, 3, 4, 3).Текст = ВремОбластьДетали;
			
			ВремТекст = ОбластьШапкаДеталейКлиента.Область(2, 4, 2, 4).Текст;
			ОбластьШапкаДеталейКлиента.Область(2, 3, 2, 10).Объединить();
			ОбластьШапкаДеталейКлиента.Область(3, 3, 3, 10).Объединить();
			ОбластьШапкаДеталейКлиента.Область(2, 3, 2, 10).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ОбластьШапкаДеталейКлиента.Область(2, 3, 2, 3).Текст = ВремТекст;
			
			ОбластьСтрокаДеталейКлиента.Область(1, 3, 1, 10).Объединить();
			ОбластьСтрокаДеталейКлиента.Область(1, 3, 1, 3).Параметр = ВремОбластьДетали;
			ОбластьСтрокаДеталейКлиента.Область(1, 3, 1, 3).ПараметрРасшифровки = "Номенклатура";
			
			Ном = 3;
			Для Сч = 4 По 14 Цикл
				Если НЕ ЗначениеЗаполнено(ОбластьДетали.Область(5, Сч + 1, 5, Сч + 1).Текст) Тогда
					Продолжить;
				КонецЕсли;
				ОбластьДетали.Область(5 ,Сч + 1, 5, Сч + 1).Текст = Ном;
				Ном = Ном + 1;
			КонецЦикла;
			
			Ном = 3;
			Для Сч =4 По 14 Цикл
				Если НЕ ЗначениеЗаполнено(ОбластьУслуги.Область(5, Сч + 1, 5, Сч + 1).Текст) Тогда
					Продолжить;
				КонецЕсли;
				ОбластьУслуги.Область(5, Сч + 1, 5, Сч + 1).Текст = Ном;
				Ном = Ном + 1;
			КонецЦикла;
		КонецЕсли;	
		
		ОбластьШапкаУслуг = ОбластьУслуги.ПолучитьОбласть("ШапкаУслуг");
		ОбластьШапкаДеталей = ОбластьДетали.ПолучитьОбласть("ШапкаДеталей");		
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ЕстьЛоготип = Ложь;
		Если УправлениеПечатьюПлатформа.ЕстьЛоготип(Документ.Организация, Документ.ПодразделениеКомпании) Тогда
			ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокСЛоготипом");
			УправлениеПечатьюПлатформа.ЗаполнитьЛоготип(ОбластьЗаголовок, Документ.Организация, Документ.ПодразделениеКомпании);
			ЕстьЛоготип = Истина;
		Иначе
			ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокБезЛоготипа");
		КонецЕсли;
		
		// Вывод шапки документа
		ОбластьЗаголовок.Параметры.Организация = Документ.Организация;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;

		ОбластьЗаголовок.Параметры.ФирмаПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ФирмаАдресЮридический = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Документ.ПодразделениеКомпании, Справочники.ВидыКонтактнойИнформации.ЮрАдресПодразделенияКомпании, ТекущаяДатаСеанса());
		
		Если ПустаяСтрока(СокрЛП(ОбластьЗаголовок.Параметры.ФирмаАдресЮридический)) Тогда
			ОбластьЗаголовок.Параметры.ФирмаАдресЮридический = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				Документ.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ТекущаяДатаСеанса());
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.НомерДок                     = НомерДляПечати;
		ОбластьЗаголовок.Параметры.ДатаДок                      = Формат(ДатаПечатная, "ДЛФ=D");				
		
		ОбластьШапка.Параметры.Заказчик                     = Документ.СводныйРемонтныйЗаказ.Заказчик;
		ОбластьШапка.Параметры.ЗаказчикПолноеНаименование   = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			Документ.СводныйРемонтныйЗаказ.Заказчик, Документ.Дата);
		ОбластьШапка.Параметры.ЗаказчикАдресПочтовый        = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Документ.СводныйРемонтныйЗаказ.Заказчик, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.ЗаказчикТелефоны             = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Документ.СводныйРемонтныйЗаказ.Заказчик, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		Если Документ.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный Тогда
			ОбластьШапка.Параметры.Контрагент 					= Документ.Организация;
			ОбластьШапка.Параметры.КонтрагентПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
				Документ.Организация, Документ.Дата);
			ОбластьШапка.Параметры.КонтрагентИНН				= Документ.Организация.ИНН;
			ОбластьШапка.Параметры.КонтрагентАдресЮридический 	= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				Документ.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ТекущаяДатаСеанса());
			ОбластьШапка.Параметры.КонтрагентТелефоны 			= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				Документ.Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, ТекущаяДатаСеанса());
		Иначе
			ОбластьШапка.Параметры.Контрагент                   = Документ.Контрагент;
			ОбластьШапка.Параметры.КонтрагентПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
				Документ.Контрагент, Документ.Дата);
			ОбластьШапка.Параметры.КонтрагентИНН                = Документ.Контрагент.ИНН;
			ОбластьШапка.Параметры.КонтрагентАдресЮридический   = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				Документ.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ТекущаяДатаСеанса());
			ОбластьШапка.Параметры.КонтрагентТелефоны           = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				Документ.Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		КонецЕсли;
		
		
		Автомобиль = Документ.СводныйРемонтныйЗаказ.Автомобиль;
		Если ЗначениеЗаполнено(Автомобиль) Тогда
			ОбластьШапка.Параметры.Автомобиль = Автомобиль;
			ОбластьШапка.Параметры.АвтомобильКод = Автомобиль.VIN;
			ОбластьШапка.Параметры.АвтомобильМодель = Автосервис.МаркаМодельАвтомобиля(Автомобиль);
			ОбластьШапка.Параметры.АвтомобильГодВыпуска = Формат(Автомобиль.ГодВыпуска,
				АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Документ));
			
			ОбластьШапка.Параметры.АвтомобильГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль,
				Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер, Документ.ДатаСоздания);

			Пробег = ?(Документ.Пробег > Документ.СводныйРемонтныйЗаказ.Пробег, 
						Документ.Пробег, 
						Документ.СводныйРемонтныйЗаказ.Пробег);
			ОбластьШапка.Параметры.АвтомобильПробег = Формат(Пробег, "ЧЦ=10");
		КонецЕсли;
		
		ОбластьШапка.Параметры.ДатаСоздания = Формат(Документ.ДатаСоздания, "ДФ = дд.ММ.гггг");
		ОбластьШапка.Параметры.ВидРемонта = Документ.ВидРемонта;
		ОбластьШапка.Параметры.Диспетчер = Документ.Диспетчер;
		ОбластьШапка.Параметры.Мастер = Документ.Мастер;
		ОбластьШапка.Параметры.СрокИсполнения = Формат(Документ.ДатаОкончания, "ДФ = дд.ММ.гггг");
		ОбластьШапка.Параметры.Состояние = Документ.Состояние;
		ОбластьШапка.Параметры.Валюта = Документ.ВалютаДокумента;
		
		// выведем или удалим ШК
		Если ЕстьЛоготип Тогда
			УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ, "ШК2"); 
		Иначе
			УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
		// сформируем информацию о бонусных баллах
		ТекстБаллы = "";
		Если Документ.КоличествоКСписанию > 0 Тогда
			Текст = СтрШаблон(НСтр("ru = 'Для оплаты использованы бонусные баллы в количестве %1 на сумму %2 %3.'"),
				Документ.КоличествоКСписанию,
				Документ.Товары.Итог("СуммаСкидкиБонусами") + Документ.Автоработы.Итог("СуммаСкидкиБонусами"),
				Документ.ВалютаДокумента);
			ТекстБаллы = ТекстБаллы + Текст;
		КонецЕсли;
		
		Если Документ.КоличествоКНачислению > 0 Тогда
			Текст = СтрШаблон(НСтр("ru = 'Было начислено %1 бонусных баллом на сумму в %2 %3.'"),
				Документ.КоличествоКНачислению,
				Документ.КоличествоКНачислению * Документ.Карточка.БонуснаяПрограмма.КратностьБонусов,
				Документ.Карточка.БонуснаяПрограмма.ВалютаБонуса);
			ТекстБаллы = ТекстБаллы + ?(ПустаяСтрока(ТекстБаллы), "", " ") + Текст;
		КонецЕсли;
		Если ПустаяСтрока(ТекстБаллы) Тогда
			ТекОбласть = ОбластьПодвала.Область(5, , 5, );
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			ОбластьПодвала.Область(5, 2, 5, 2).Текст = "";
		Иначе
			ОбластьПодвала.Параметры.БонусныеБаллы = ТекстБаллы;
		КонецЕсли;
		
		Если ПустаяСтрока(Документ.Гарантии) Тогда
			ТекОбласть = ОбластьПодвала.Область(9, , 9, );
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			ОбластьПодвала.Область(9, 3, 9, 3).Текст = "";
		Иначе
			ОбластьПодвала.Параметры.Гарантии = Документ.Гарантии;
		КонецЕсли;
		Если ПустаяСтрока(Документ.Рекомендации) Тогда
			ТекОбласть = ОбластьПодвала.Область(11, , 11, );
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			ОбластьПодвала.Область(11, 3, 11, 3).Текст = "";
		Иначе
			ОбластьПодвала.Параметры.Рекомендации = Документ.Рекомендации;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Документ.Мастер) Тогда 
			ОбластьПодвала.Параметры.МастерПолноеНаименование = "/" + Документ.Мастер.Наименование + "/";
		Иначе
			ОбластьПодвала.Параметры.МастерПолноеНаименование = "/________________________/";
		КонецЕсли;
		ОбластьПодвала.Параметры.ЗаказчикПолноеНаименование = "/" 
			+ УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СводныйРемонтныйЗаказ.Заказчик, Документ.Дата) + "/";
		ОбластьПодвала.Параметры.КонтрагентПолноеНаименование = "/"
			+ УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент, Документ.Дата) + "/";
		
		ОбластьПодвала.Параметры.ДатаДок = Формат(ДатаПечатная, "ДФ = дд.ММ.гггг");
		
		КолонкаКода = УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах();
		КолонкаКода = СтрЗаменить(КолонкаКода, "/", Символы.ПС);
		
		НомерПричиныОбращения = 0;
		
		ИтогоКоличествоДеталейКлиента = 0;
		
		ИтогоОбщийПоСумме = 0;
		ИтогоОбщийПоСуммеНДС = 0;
		
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		
		Для Каждого ПричинаОбращения Из ТаблицаПричинОбращения Цикл
			
			// инициализация итогов по документу
			ИтогоСуммаРабот	        = 0;
			ИтогоСуммаНДСРабот      = 0;
			ИтогоСуммаСкидкиРабот   = 0;
			ИтогоКоличествоРабот    = 0;
			ИтогоСуммаДеталей	    = 0;
			ИтогоСуммаНДСДеталей    = 0;
			ИтогоСуммаСкидкиДеталей = 0;
			ИтогоКоличествоДеталей  = 0;
			
			Если ЕстьПричиныОбращений Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ИдентификаторПричиныОбращения", ПричинаОбращения.ИдентификаторПричиныОбращения);
				Табл       = ТаблицаРабот.НайтиСтроки(ПараметрыОтбора);
				ТаблТовары = ТаблицаТоваров.НайтиСтроки(ПараметрыОтбора);
				
				ОбластьШапкаПричиныОбращения.Параметры.ПричинаОбращения           = ПричинаОбращения.ПричинаОбращения;
				ОбластьШапкаПричиныОбращения.Параметры.СодержаниеПричиныОбращения = ПричинаОбращения.ПричинаОбращенияСодержание;
				ТабличныйДокумент.Вывести(ОбластьШапкаПричиныОбращения);
				
			Иначе
				// Временная таблица
				Табл = ТаблицаРабот.Скопировать();
				ТаблТовары = ТаблицаТоваров.Скопировать();
			КонецЕсли;
			
			КоличествоРабот = Табл.Количество();
			
			// инициализация итогов по документу
			ИтогоСуммаРабот		= 0;
			ИтогоСуммаНДСРабот	= 0;
			
			Если НЕ КоличествоРабот = 0 Тогда
				
				Если ЕстьПричиныОбращений Тогда
					ОбластьУслуги.Область(2, 3, 2, 3).Текст = СтрШаблон(
						НСтр("ru = 'Выполненные работы по заказ-наряду №  %1 от %2 к причине обращения ""%3""'"),
						НомерДляПечати, Формат(ДатаПечатная, "ДЛФ = D"), ПричинаОбращения.ПричинаОбращения);
				Иначе
					// Вывод шапки табличной части работ(услуг)
					ОбластьУслуги.Параметры.НомерДок = НомерДляПечати;
					ОбластьУслуги.Параметры.ДатаДок = Формат(ДатаПечатная, "ДЛФ = D");
				КонецЕсли;
				Если ВыводитьКод Тогда
					ОбластьУслуги.Параметры.ИмяКолонкиКодов = КолонкаКода;
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьУслуги);
				
				Если ЕстьПричиныОбращений Тогда
					ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Выполненные работы по заказ-наряду №  %1 от %2 к причине обращения: %3'"),
						НомерДляПечати, Формат(ДатаПечатная, "ДЛФ = D"), ПричинаОбращения.ПричинаОбращения);
				Иначе
					ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Выполненные работы по заказ-наряду №  %1 от %2'"),
						НомерДляПечати, Формат(ДатаПечатная, "ДЛФ = D"));
				КонецЕсли;
				// заполним параметры шапки таблицы для следующего листа
				ОбластьШапкаУслуг.Параметры.ТекстЗаголовка = ТекстЗаголовка;
				ОбластьШапкаУслуг.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
				Если ВыводитьКод Тогда
					ОбластьШапкаУслуг.Параметры.ИмяКолонкиКодов = КолонкаКода;
				КонецЕсли;
				// Вывод табличной части работ
				Ном	= 0;
				СтруктураИтоговПоСтранице = Новый Структура;
				СтруктураИтоговПоСтранице.Вставить("СуммаВсего",  0);
				СтруктураИтоговПоСтранице.Вставить("СуммаНДС",    0);
				СтруктураИтоговПоСтранице.Вставить("СуммаСкидки", 0);
				СтруктураИтоговПоСтранице.Вставить("Количество",  0);
				
				МассивМатериалов = Новый Массив;
				Для Каждого СтрокаРабот Из Табл Цикл
					Ном = Ном + 1;
					ОбластьСтрокаУслуг.Параметры.НомСтр = Ном;
					Если ВыводитьКод Тогда
						ОбластьСтрокаУслуг.Параметры.Код = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(
							СтрокаРабот.Авторабота);
					КонецЕсли;
					ОбластьСтрокаУслуг.Параметры.Номенклатура = СтрокаРабот.Авторабота;
					ОбластьСтрокаУслуг.Параметры.Наименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
						СтрокаРабот.Авторабота);
					ОбластьСтрокаУслуг.Параметры.Цена = Формат(СтрокаРабот.Цена, "ЧЦ=15; ЧДЦ=2");
					Если ЕстьСкидкаПоРаботам Тогда
						Скидка = СтрокаРабот.СуммаСкидки + СтрокаРабот.СуммаСкидкиСтроки + СтрокаРабот.СуммаСкидкиБонусами;
						ОбластьСтрокаУслуг.Параметры.Скидка = Формат(Скидка, ФорматВыводаСуммы);
					КонецЕсли;
					ОбластьСтрокаУслуг.Параметры.Коэффициент = Формат(СтрокаРабот.Коэффициент, "ЧЦ=10; ЧДЦ=3");
					ОбластьСтрокаУслуг.Параметры.Количество = Формат(СтрокаРабот.Количество, ФорматВыводаКоличества);
					ОбластьСтрокаУслуг.Параметры.Единица = СтрокаРабот.Нормочас;
					ОбластьСтрокаУслуг.Параметры.Сумма = Формат(СтрокаРабот.СуммаВсего, ФорматВыводаСуммы); 
					ОбластьСтрокаУслуг.Параметры.НДС = Формат(СтрокаРабот.СуммаНДС, ФорматВыводаСуммы);
					Если СтрокаРабот.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
						ОбластьСтрокаУслуг.Параметры.НДС = "Без НДС";	
					КонецЕсли;
					
					Если СтрокаРабот.ПримечаниеРаботыПечать <> "" Тогда
						ОбластьСтрокаПримечаниеРаботы.Параметры.ПримечаниеРаботы = СтрокаРабот.ПримечаниеРаботыПечать;
					КонецЕсли;
					
					МассивОбластиПодвала = Новый Массив;
					МассивОбластиПодвала.Очистить();
					
					Отбор = Новый Структура("ИдентификаторРаботы", СтрокаРабот.ИдентификаторРаботы);
					МассивМатериалов = Документ.Материалы.НайтиСтроки(Отбор);
					
					Если МассивМатериалов.Количество() > 0 Тогда
						ТабДокВрем = Новый ТабличныйДокумент;
						ТабДокВрем.ПолеСверху = 10;
						ТабДокВрем.ПолеСнизу  = 0;
						ТабДокВрем.ПолеСлева  = 0;
						ТабДокВрем.ПолеСправа = 0;
						ТабДокВрем.Вывести(ОбластьШапкаМатериалов);
						Для Каждого СтрокаМатериалов Из МассивМатериалов Цикл
							ОбластьСтрокаМатериалов.Параметры.Заполнить(СтрокаМатериалов);
							ОбластьСтрокаМатериалов.Параметры.Наименование = 
								?(ТипЗнч(СтрокаМатериалов.Номенклатура) = Тип("СправочникСсылка.Номенклатура"),
									УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаМатериалов.Номенклатура),
									СтрокаМатериалов.Номенклатура);
							ТабДокВрем.Вывести(ОбластьСтрокаМатериалов);
							Если СтрокаМатериалов.ПримечаниеНоменклатураПечать <> "" Тогда
								ОбластьСтрокаПримечаниеНоменклатура.Параметры.ПримечаниеНоменклатура = СтрокаМатериалов.ПримечаниеНоменклатураПечать;
								ТабДокВрем.Вывести(ОбластьСтрокаПримечаниеНоменклатура);
							КонецЕсли;
						КонецЦикла;
						МассивОбластиПодвала.Добавить(ТабДокВрем);
					КонецЕсли;
					
					// доп. области
					МассивОбластиПодвала.Добавить(ОбластьСтрокаПримечаниеРаботы);
					МассивОбластиПодвала.Добавить(ОбластьИтоговПоСтраницеУслуги);
					Если Ном = КоличествоРабот Тогда
						МассивОбластиПодвала.Добавить(ОбластьПодвалУслуг);
					КонецЕсли;
					
					Если СтрокаРабот.НомерСтроки = КоличествоРабот И ПодвалПослеРабот Тогда		
						МассивОбластиПодвала.Добавить(ОбластьПодвала);
					КонецЕсли;	
					
					НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаУслуг,
						ОбластьШапкаУслуг, ОбластьИтоговПоСтраницеУслуги, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
						МассивОбластиПодвала);
					
					Если МассивМатериалов.Количество() > 0 Тогда
						
						ТабличныйДокумент.Вывести(ОбластьШапкаМатериалов);
						Для Каждого СтрокаМатериалов Из МассивМатериалов Цикл
							ОбластьСтрокаМатериалов.Параметры.Заполнить(СтрокаМатериалов);
							ОбластьСтрокаМатериалов.Параметры.Наименование = 
								?(ТипЗнч(СтрокаМатериалов.Номенклатура) = Тип("СправочникСсылка.Номенклатура"),
									УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаМатериалов.Номенклатура),
									СтрокаМатериалов.Номенклатура);
							ТабличныйДокумент.Вывести(ОбластьСтрокаМатериалов);
							Если СтрокаМатериалов.ПримечаниеНоменклатураПечать <> "" Тогда
								ОбластьСтрокаПримечаниеНоменклатура.Параметры.ПримечаниеНоменклатура = СтрокаМатериалов.ПримечаниеНоменклатураПечать;
								ТабличныйДокумент.Вывести(ОбластьСтрокаПримечаниеНоменклатура);
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					
					Если СтрокаРабот.ПримечаниеРаботыПечать <> "" Тогда
						УправлениеПечатьюПлатформа.
						ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаПримечаниеРаботы, , , , , Документ);
					КонецЕсли;
					
					// Обновим итоги по документу
					ИтогоКоличествоРабот  = ИтогоКоличествоРабот + СтрокаРабот.Количество;
					ИтогоСуммаРабот       = ИтогоСуммаРабот + СтрокаРабот.СуммаВсего;
					ИтогоСуммаНДСРабот    = ИтогоСуммаНДСРабот + СтрокаРабот.СуммаНДС;
					ИтогоСуммаСкидкиРабот = ИтогоСуммаСкидкиРабот + СтрокаРабот.СуммаСкидки + СтрокаРабот.СуммаСкидкиСтроки 
						+ СтрокаРабот.СуммаСкидкиБонусами;
					
					// инициализация итогов по странице
					Если НомерСтраницы <> НомерСтраницыПред Тогда
						СтруктураИтоговПоСтранице = Новый Структура;
						СтруктураИтоговПоСтранице.Вставить("СуммаВсего",  0);
						СтруктураИтоговПоСтранице.Вставить("СуммаНДС",    0);
						СтруктураИтоговПоСтранице.Вставить("СуммаСкидки", 0);
						СтруктураИтоговПоСтранице.Вставить("Количество",  0);
						НомерСтраницыПред = НомерСтраницы;
						ОбластьШапкаУслуг.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
					КонецЕсли;
					
					// добавляем итоги
					УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаРабот, СтруктураИтоговПоСтранице);
				КонецЦикла; 
				
				// выводим последний итог по странице, если страниц больше единицы
				Если НомерСтраницы > 2 Тогда
					УправлениеПечатьюПлатформа.
					ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтоговПоСтраницеУслуги, СтруктураИтоговПоСтранице, Документ);
				КонецЕсли;
				
				// Вывод подвала табличной части услуг
				ОбластьПодвалУслуг.Параметры.Количество = Формат(ИтогоКоличествоРабот, ФорматВыводаКоличества);
				ОбластьПодвалУслуг.Параметры.Сумма      = Формат(ИтогоСуммаРабот, ФорматВыводаСуммы);
				ОбластьПодвалУслуг.Параметры.НДС        = Формат(ИтогоСуммаНДСРабот, ФорматВыводаСуммы);
				Если ЕстьСкидкаПоРаботам Тогда
					ОбластьПодвалУслуг.Параметры.Скидка = Формат(ИтогоСуммаСкидкиРабот, ФорматВыводаСуммы);
				КонецЕсли;
				
				ОбластьПодвалУслуг.Параметры.ЧислоПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоСуммаРабот,
					Документ.ВалютаДокумента);
				Если ИтогоСуммаНДСРабот <> 0 Тогда
					ОбластьПодвалУслуг.Параметры.ЧислоПрописью = ОбластьПодвалУслуг.Параметры.ЧислоПрописью + Символы.НПП
						+ НСтр("ru = 'в т.ч. НДС'") + Символы.НПП
						+ Формат(ИтогоСуммаНДСРабот, "ЧЦ=15; ЧДЦ=2") + " " + Документ.ВалютаДокумента;
				КонецЕсли; 
				УправлениеПечатьюПлатформа.
				ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвалУслуг, , , НомерСтраницы, , Документ);
			КонецЕсли;
			
			// Формирование врем. таблиц товаров
			ТаблТоварыКлиента = Документ.МатериалыЗаказчика.Выгрузить();
			
			КоличествоДеталей = ТаблТовары.Количество();
			КоличествоДеталейКлиента = ТаблТоварыКлиента.Количество();
			
			ТабДокВрем = Новый ТабличныйДокумент;
			ТабДокВрем.ПолеСверху = 10;
			ТабДокВрем.ПолеСнизу  = 0;
			ТабДокВрем.ПолеСлева  = 0;
			ТабДокВрем.ПолеСправа = 0;
			
			Если НЕ КоличествоДеталей = 0 Тогда
			
				// Если помещается только шапка, но ни одной строчки, то шапку переносим на след. страницу.
				Если ВыводитьКод Тогда
					ОбластьДетали.Параметры.ИмяКолонкиКодов = КолонкаКода;
				КонецЕсли;
				ТабДокВрем.Вывести(ОбластьДетали);                                           
				ОбластьМакетаСтрокаВрем = Макет.ПолучитьОбласть("СтрокаДеталей");
				СтрокаДеталей = ТаблТовары[0];
				ТекОбласть = ОбластьМакетаСтрокаВрем.Область(1,, 1);
				// Присутствуют заполненные строки (заполняем не все параметры - только наиболее вероятно длинные).
				ТекТовар = СтрокаДеталей.Номенклатура;
				
				ОбластьМакетаСтрокаВрем.Параметры.Наименование = ?(ТипЗнч(ТекТовар) = Тип("СправочникСсылка.Номенклатура"),
					УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ТекТовар), ТекТовар);
				ТабДокВрем.Вывести(ОбластьШапкаДеталей); 
				ТабДокВрем.Вывести(ОбластьМакетаСтрокаВрем);
				ТабДокВрем.Вывести(ОбластьИтоговПоСтраницеДетали);
						
				Если НЕ ТабличныйДокумент.ПроверитьВывод(ТабДокВрем) Тогда		
					Если ПодвалПослеТоваров И КоличествоДеталей = 1 Тогда		
						ОбластьМакетаПодвалВрем = Макет.ПолучитьОбласть("Подвал");
						ТабДокВрем.Вывести(ОбластьМакетаПодвалВрем); 
						Если НЕ ТабличныйДокумент.ПроверитьВывод(ТабДокВрем) Тогда
							ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						КонецЕсли;
					Иначе		
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
				КонецЕсли;
				
				Если ЕстьПричиныОбращений Тогда
					ОбластьДетали.Область(2, 3, 2, 3).Текст = СтрШаблон(
						НСтр("ru = 'Расходная накладная к заказ-наряду №  %1 от %2 к причине обращения ""%3""'"),
						НомерДляПечати, Формат(ДатаПечатная, "ДЛФ = D"), ПричинаОбращения.ПричинаОбращения);
				Иначе
					ОбластьДетали.Параметры.НомерДок = НомерДляПечати;
					ОбластьДетали.Параметры.ДатаДок = Формат(ДатаПечатная, "ДФ = дд.ММ.гггг");
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьДетали);
							
				Если ЕстьПричиныОбращений Тогда
					ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Расходная накладная к заказ-наряду №  %1 от %2 к причине обращения: %3'"),
						НомерДляПечати, Формат(ДатаПечатная, "ДЛФ = D"), ПричинаОбращения.ПричинаОбращения);
				Иначе
					ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Расходная накладная к заказ-наряду №  %1 от %2'"),
						НомерДляПечати, Формат(ДатаПечатная, "ДЛФ = D"));
				КонецЕсли;
				// заполним параметры шапки таблицы для следующего листа
				ОбластьШапкаДеталей.Параметры.ТекстЗаголовка = ТекстЗаголовка;
				ОбластьШапкаДеталей.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
				Если ВыводитьКод Тогда
					ОбластьШапкаДеталей.Параметры.ИмяКолонкиКодов = КолонкаКода;
				КонецЕсли;
				// Вывод табличной части деталей
				Ном = 0;
				СтруктураИтоговПоСтранице = Новый Структура;
				СтруктураИтоговПоСтранице.Вставить("СуммаВсего",  0);
				СтруктураИтоговПоСтранице.Вставить("СуммаНДС",    0);
				СтруктураИтоговПоСтранице.Вставить("СуммаСкидки", 0);
				СтруктураИтоговПоСтранице.Вставить("Количество",  0);

				МассивОбластиПодвала = Новый Массив;
				МассивОбластиПодвала.Добавить(ОбластьПодвалДеталей);
				Для каждого СтрокаДеталей Из ТаблТовары Цикл
					Ном = Ном + 1;
					
					ОбластьСтрокаДеталей.Параметры.НомСтр = Ном;
					ТекТовар = СтрокаДеталей.Номенклатура;
					Если ВыводитьКод Тогда
						ОбластьСтрокаДеталей.Параметры.Код = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(ТекТовар);
					КонецЕсли;
					ОбластьСтрокаДеталей.Параметры.Номенклатура = ТекТовар;
					ОбластьСтрокаДеталей.Параметры.Наименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
						ТекТовар);
					ОбластьСтрокаДеталей.Параметры.Цена = Формат(СтрокаДеталей.Цена, "ЧЦ=15; ЧДЦ=2");
					Если ЕстьСкидкаПоДеталям Тогда
						Скидка = СтрокаДеталей.СуммаСкидки + СтрокаДеталей.СуммаСкидкиСтроки + СтрокаДеталей.СуммаСкидкиБонусами;
						ОбластьСтрокаДеталей.Параметры.Скидка = Формат(Скидка, ФорматВыводаСуммы);
					КонецЕсли;
					ОбластьСтрокаДеталей.Параметры.Количество = Формат(СтрокаДеталей.Количество * СтрокаДеталей.Коэффициент,
						ФорматВыводаКоличества);
					ОбластьСтрокаДеталей.Параметры.Единица = СтрокаДеталей.ЕдиницаИзмерения;
					ОбластьСтрокаДеталей.Параметры.Сумма = Формат(СтрокаДеталей.СуммаВсего, ФорматВыводаСуммы);
					ОбластьСтрокаДеталей.Параметры.НДС = Формат(СтрокаДеталей.СуммаНДС, ФорматВыводаСуммы);
					Если СтрокаДеталей.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
						ОбластьСтрокаДеталей.Параметры.НДС = "Без НДС";	
					КонецЕсли;
					Если СтрокаДеталей.ПримечаниеНоменклатураПечать <> "" Тогда
						ОбластьСтрокаПримечаниеНоменклатура.Параметры.ПримечаниеНоменклатура =
							СтрокаДеталей.ПримечаниеНоменклатураПечать;
					КонецЕсли;
					
					// доп. области
					мсвДопОбластиПодвала = Неопределено;
					мсвДопОбластиПодвала = Новый Массив;
					мсвДопОбластиПодвала.Добавить(ОбластьСтрокаПримечаниеНоменклатура);
					мсвДопОбластиПодвала.Добавить(ОбластьИтоговПоСтраницеДетали);
					Если Ном=КоличествоДеталей Тогда
						мсвДопОбластиПодвала.Добавить(ОбластьПодвалДеталей);
					КонецЕсли;
					
					Если СтрокаДеталей.НомерСтроки = КоличествоДеталей И ПодвалПослеТоваров Тогда		
						мсвДопОбластиПодвала.Добавить(ОбластьПодвала);
					КонецЕсли;	
					
					НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаДеталей,
						ОбластьШапкаДеталей, ОбластьИтоговПоСтраницеДетали, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
						мсвДопОбластиПодвала);
					
					Если СтрокаДеталей.ПримечаниеНоменклатураПечать <> "" Тогда
						УправлениеПечатьюПлатформа.
						ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаПримечаниеНоменклатура, , , , , Документ);
					КонецЕсли;
					
					// Обновим итоги по документу
					ИтогоКоличествоДеталей  = ИтогоКоличествоДеталей + СтрокаДеталей.Количество * СтрокаДеталей.Коэффициент;
					ИтогоСуммаДеталей		= ИтогоСуммаДеталей		+ СтрокаДеталей.СуммаВсего;
					ИтогоСуммаНДСДеталей	= ИтогоСуммаНДСДеталей	+ СтрокаДеталей.СуммаНДС;
					ИтогоСуммаСкидкиДеталей = ИтогоСуммаСкидкиДеталей + СтрокаДеталей.СуммаСкидки + СтрокаДеталей.СуммаСкидкиСтроки 
						+ СтрокаДеталей.СуммаСкидкиБонусами;
					
					// инициализация итогов по странице
					Если НомерСтраницы <> НомерСтраницыПред Тогда
						СтруктураИтоговПоСтранице = Новый Структура;
						СтруктураИтоговПоСтранице.Вставить("СуммаВсего",  0);
						СтруктураИтоговПоСтранице.Вставить("СуммаНДС",    0);
						СтруктураИтоговПоСтранице.Вставить("СуммаСкидки", 0);
						СтруктураИтоговПоСтранице.Вставить("Количество",  0);
						НомерСтраницыПред = НомерСтраницы;
						ОбластьШапкаДеталей.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
					КонецЕсли;
					
					// добавляем итоги
					УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаДеталей, СтруктураИтоговПоСтранице);
				КонецЦикла;
				
				// выводим последний итог по странице, если страниц больше единицы
				Если НомерСтраницы > 2 Тогда
					УправлениеПечатьюПлатформа.
					ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтоговПоСтраницеДетали, СтруктураИтоговПоСтранице, Документ);
				КонецЕсли;
				
				// Вывод подвала табличной части деталей
				ОбластьПодвалДеталей.Параметры.Количество = Формат(ИтогоКоличествоДеталей, ФорматВыводаКоличества);
				ОбластьПодвалДеталей.Параметры.Сумма = Формат(ИтогоСуммаДеталей, ФорматВыводаСуммы);
				ОбластьПодвалДеталей.Параметры.НДС = Формат(ИтогоСуммаНДСДеталей, ФорматВыводаСуммы);
				Если ЕстьСкидкаПоДеталям Тогда
					ОбластьПодвалДеталей.Параметры.Скидка = Формат(ИтогоСуммаСкидкиДеталей, ФорматВыводаСуммы);
				КонецЕсли;
				ОбластьПодвалДеталей.Параметры.ЧислоПрописью = РаботаСкурсамиВалют.СформироватьСуммуПрописью(ИтогоСуммаДеталей,
					Документ.ВалютаДокумента);
				Если ИтогоСуммаНДСДеталей <> 0 Тогда
					ОбластьПодвалДеталей.Параметры.ЧислоПрописью = ОбластьПодвалДеталей.Параметры.ЧислоПрописью + Символы.НПП
						+ НСтр("ru = 'в т.ч. НДС'") + Символы.НПП
						+ Формат(ИтогоСуммаНДСДеталей, ФорматВыводаСуммы) + " " + Документ.ВалютаДокумента;
				КонецЕсли; 
				УправлениеПечатьюПлатформа.
				ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвалДеталей, , , НомерСтраницы, , Документ);
			КонецЕсли;
			
			Если ЕстьПричиныОбращений Тогда
				ОбластьПодвалПричиныОбращения.Параметры.Сумма = Формат(ИтогоСуммаРабот + ИтогоСуммаДеталей, ФорматВыводаСуммы);
				ОбластьПодвалПричиныОбращения.Параметры.НДС = Формат(ИтогоСуммаНДСРабот + ИтогоСуммаНДСДеталей, ФорматВыводаСуммы);
				ОбластьПодвалПричиныОбращения.Параметры.ЧислоПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(
					ИтогоСуммаРабот + ИтогоСуммаДеталей, Документ.ВалютаДокумента);
				
				Если (ИтогоОбщийПоСуммеНДС) <> 0 Тогда
					ОбластьПодвалПричиныОбращения.Параметры.ЧислоПрописью = ОбластьПодвалПричиныОбращения.Параметры.ЧислоПрописью
						+ Символы.НПП + НСтр("ru = 'в т.ч. НДС'") + Символы.НПП
						+ Формат(ИтогоСуммаНДСРабот + ИтогоСуммаНДСДеталей, ФорматВыводаСуммы) + " " + Документ.ВалютаДокумента;
				КонецЕсли; 
				ТабличныйДокумент.Вывести(ОбластьПодвалПричиныОбращения);
			КонецЕсли;
			
			ИтогоОбщийПоСумме = ИтогоОбщийПоСумме + ИтогоСуммаРабот + ИтогоСуммаДеталей;
			ИтогоОбщийПоСуммеНДС = ИтогоОбщийПоСуммеНДС + ИтогоСуммаНДСРабот + ИтогоСуммаНДСДеталей;
			
		КонецЦикла;
		
		Если НЕ КоличествоДеталейКлиента = 0 Тогда
			
			// Вывод шапки табличной части деталей клиента
			ОбластьМакета = Макет.ПолучитьОбласть("ДеталиКлиента");
			Если НЕ ВыводитьКод Тогда
				ВремТекст = ОбластьМакета.Область(5, 4, 5, 4).Текст;
				ОбластьМакета.Область(5, 3, 5, 7).Объединить();
				ОбластьМакета.Область(6, 3, 6, 7).Объединить();
				ОбластьМакета.Область(5, 3, 5, 7).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
				ОбластьМакета.Область(5, 3, 5, 3).Текст = ВремТекст;
				Ном = 3;
				Для Сч = 3 По 10 Цикл
					Если НЕ ЗначениеЗаполнено(ОбластьМакета.Область(6, Сч + 1, 6, Сч + 1).Текст) Тогда
						Продолжить;
					КонецЕсли;
					ОбластьМакета.Область(6, Сч + 1, 6, Сч + 1).Текст = Ном;
					Ном = Ном + 1;
				КонецЦикла;
				Ном = 3;
				Для Сч = 3 По 10 Цикл
					Если НЕ ЗначениеЗаполнено(ОбластьШапкаДеталейКлиента.Область(3, Сч + 1, 3, Сч + 1).Текст) Тогда
						Продолжить;
					КонецЕсли;
					ОбластьШапкаДеталейКлиента.Область(3, Сч + 1, 3, Сч + 1).Текст = Ном;
					Ном = Ном + 1;
				КонецЦикла;
			КонецЕсли;
			// Если помещается только шапка, но ни одной строчки, то шапку переносим на след. страницу.
			Если ВыводитьКод Тогда
				ОбластьМакета.Параметры.ИмяКолонкиКодов = КолонкаКода;
			КонецЕсли;
			ТабДокВрем.Очистить();
			ТабДокВрем.Вывести(ОбластьМакета);
			ОбластьМакетаСтрокаВрем = Макет.ПолучитьОбласть("СтрокаДеталей");
			СтрокаДеталей = ТаблТоварыКлиента[0];
			ТекОбласть = ОбластьМакетаСтрокаВрем.Область(1,, 1);
			ТекТовар = СтрокаДеталей.Номенклатура;
			ОбластьМакетаСтрокаВрем.Параметры.Наименование = ?(ТипЗнч(ТекТовар) = Тип("СправочникСсылка.Номенклатура"),
				УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ТекТовар), ТекТовар);
			ТабДокВрем.Вывести(ОбластьМакетаСтрокаВрем);
			ТабДокВрем.Вывести(ОбластьИтоговПоСтраницеДеталиКлиента);
			
			Если НЕ ТабличныйДокумент.ПроверитьВывод(ТабДокВрем) Тогда		
				Если ПодвалПослеМатериаловЗаказчика И КоличествоДеталейКлиента = 1 Тогда		
					ОбластьМакетаПодвалВрем = Макет.ПолучитьОбласть("Подвал");
					ТабДокВрем.Вывести(ОбластьМакетаПодвалВрем); 
					Если НЕ ТабличныйДокумент.ПроверитьВывод(ТабДокВрем) Тогда
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
				Иначе		
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
			КонецЕсли;
				
			ОбластьМакета.Параметры.НомерДок = НомерДляПечати;
			ОбластьМакета.Параметры.ДатаДок  = Формат(ДатаПечатная, "ДЛФ = D");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			НомерСтраницы = 2;
			НомерСтраницыПред = 2;
			ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Перечень деталей клиента к заказ-наряду № %1 от %2'"),
				НомерДляПечати, Формат(ДатаПечатная, "ДЛФ = D"));
			
			// заполним параметры шапки таблицы для следующего листа
			ОбластьШапкаДеталейКлиента.Параметры.ТекстЗаголовка = ТекстЗаголовка;
			ОбластьШапкаДеталейКлиента.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			Если ВыводитьКод Тогда
				ОбластьШапкаДеталейКлиента.Параметры.ИмяКолонкиКодов = КолонкаКода;
			КонецЕсли;
			// Вывод табличной части деталей клиента
			Ном = 0;
			СтруктураИтоговПоСтранице = Новый Структура("Количество", 0);
			
			Для Каждого СтрокаДеталей Из ТаблТоварыКлиента Цикл
				Ном = Ном + 1;
				
				ОбластьСтрокаДеталейКлиента.Параметры.НомСтр = Ном;
				ТекТоварКлиента = СтрокаДеталей.Номенклатура;
				Если ВыводитьКод Тогда
					ОбластьСтрокаДеталейКлиента.Параметры.Код = ?(ТипЗнч(ТекТоварКлиента) = Тип("СправочникСсылка.Номенклатура"),
						УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(ТекТоварКлиента), "");
				КонецЕсли;
				ОбластьСтрокаДеталейКлиента.Параметры.Номенклатура = ТекТоварКлиента;
				ОбластьСтрокаДеталейКлиента.Параметры.Наименование = 
					?(ТипЗнч(ТекТоварКлиента) = Тип("СправочникСсылка.Номенклатура"),
						УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ТекТоварКлиента), ТекТоварКлиента);
				ОбластьСтрокаДеталейКлиента.Параметры.Количество = Формат(СтрокаДеталей.Количество * СтрокаДеталей.Коэффициент,
					ФорматВыводаКоличества);
				ОбластьСтрокаДеталейКлиента.Параметры.Единица = СтрокаДеталей.ЕдиницаИзмерения;
				Если СтрокаДеталей.ПримечаниеНоменклатураПечать <> "" Тогда
					ОбластьСтрокаПримечаниеНоменклатураКлиента.Параметры.ПримечаниеНоменклатура =
						СтрокаДеталей.ПримечаниеНоменклатураПечать;
				КонецЕсли;
				// Обновим итоги по документу
				ИтогоКоличествоДеталейКлиента = ИтогоКоличествоДеталейКлиента
					+ СтрокаДеталей.Количество * СтрокаДеталей.Коэффициент;
				
				// доп. области
				мсвДопОбластиПодвала = Неопределено;
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьСтрокаПримечаниеНоменклатураКлиента);
				мсвДопОбластиПодвала.Добавить(ОбластьИтоговПоСтраницеДеталиКлиента);
				Если Ном=КоличествоДеталейКлиента Тогда
					мсвДопОбластиПодвала.Добавить(ОбластьПодвалДеталейКлиента);
				КонецЕсли;
				
				Если СтрокаДеталей.НомерСтроки = КоличествоДеталейКлиента И ПодвалПослеМатериаловЗаказчика Тогда		
					мсвДопОбластиПодвала.Добавить(ОбластьПодвала);
				КонецЕсли;	
					
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент,
					ОбластьСтрокаДеталейКлиента, ОбластьШапкаДеталейКлиента, ОбластьИтоговПоСтраницеДеталиКлиента, НомерСтраницы,
					СтруктураИтоговПоСтранице, Документ, мсвДопОбластиПодвала);
				
				Если СтрокаДеталей.ПримечаниеНоменклатураПечать <> "" Тогда
					УправлениеПечатьюПлатформа.
					ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаПримечаниеНоменклатураКлиента, , , , , Документ);
				КонецЕсли;
				
				// инициализация итогов по странице
				Если НомерСтраницы <> НомерСтраницыПред Тогда
					СтруктураИтоговПоСтранице = Новый Структура("Количество", 0);
					НомерСтраницыПред = НомерСтраницы;
					ОбластьШапкаДеталейКлиента.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
				КонецЕсли;
				
				// обновим итоги по странице
				СтруктураИтоговПоСтранице.Количество = СтруктураИтоговПоСтранице.Количество 
					+ СтрокаДеталей.Количество * СтрокаДеталей.Коэффициент;
			КонецЦикла;
			
			// довыводим последний итог по странице, если страниц больше единицы
			Если НомерСтраницы > 2 Тогда
				УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтоговПоСтраницеДеталиКлиента,
					СтруктураИтоговПоСтранице, Документ);
			КонецЕсли;
			
			// Вывод подвала табличной части деталей клиента
			ОбластьПодвалДеталейКлиента.Параметры.КоличествоДеталейЗаказчика = Формат(ИтогоКоличествоДеталейКлиента,
				ФорматВыводаКоличества);
			
			УправлениеПечатьюПлатформа.
			ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвалДеталейКлиента, , , НомерСтраницы, , Документ);
		КонецЕсли;
				
		// Вывод подвала документа
		
		ОбластьПодвала.Параметры.Сумма = Формат(ИтогоОбщийПоСумме, ФорматВыводаСуммы);
		ОбластьПодвала.Параметры.НДС = Формат(ИтогоОбщийПоСуммеНДС, ФорматВыводаСуммы);
		ОбластьПодвала.Параметры.ЧислоПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоОбщийПоСумме,
			Документ.ВалютаДокумента);
		
		Если (ИтогоОбщийПоСуммеНДС) <> 0 Тогда
			ОбластьПодвала.Параметры.ЧислоПрописью = ОбластьПодвала.Параметры.ЧислоПрописью + Символы.НПП
				+ НСтр("ru = 'в т.ч. НДС'") + Символы.НПП + Формат(ИтогоОбщийПоСуммеНДС, ФорматВыводаСуммы)
				+ " " + Документ.ВалютаДокумента;
		КонецЕсли; 
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвала, , , НомерСтраницы, , Документ);
		
		// Верхние колонтитулы
		ТабличныйДокумент.ВерхнийКолонтитул.ВертикальноеПоложение=ВертикальноеПоложение.Низ;
		ТабличныйДокумент.ВерхнийКолонтитул.Выводить = Истина;
		ТабличныйДокумент.ВерхнийКолонтитул.НачальнаяСтраница = 2;
		ТабличныйДокумент.ВерхнийКолонтитул.ТекстСправа = "Заказ-наряд № " + НомерДляПечати + " от " 
			+ Формат(ДатаПечатная, "ДФ = дд.ММ.гггг");
		ТабличныйДокумент.ВерхнийКолонтитул.Шрифт =
			Новый Шрифт(ТабличныйДокумент.ВерхнийКолонтитул.Шрифт, , , , Истина, Истина);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаряд_ЗаказНаряд";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьЗаказНаряд()

//ШАБЛОНЫ ОФИСНЫХ ДОКУМЕНТОВ

// Формирует структуру с описанием областей шаблона
Функция ПолучитьОписаниеОбластейМакетаОфисногоДокумента() Экспорт
	
	ОписаниеОбластей = Новый Структура;
	
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ВерхнийКолонтитул",	"ВерхнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "НижнийКолонтитул",		"НижнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаДоговора",		"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ПриложенияУсловия",	"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ПодвалДоговора",		"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ОбщиеУсловия",			"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ОбщиеУсловияПодвал",	"Общая");
	
	Возврат ОписаниеОбластей;
	
КонецФункции

Функция ПолучитьДанныеПечати(Знач МассивДокументов, Знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	
	Для Каждого Документ Из МассивДокументов Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказНаряд.Дата КАК Дата
		|ИЗ
		|	Документ.ЗаказНаряд КАК ЗаказНаряд
		|ГДЕ
		|	ЗаказНаряд.Организация = &Организация
		|	И ЗаказНаряд.Контрагент = &Контрагент
		|	И ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль = &Автомобиль
		|	И ЗаказНаряд.Номер = &Номер";
		
		Запрос.УстановитьПараметр("Организация", Документ.Организация);
		Запрос.УстановитьПараметр("Контрагент", Документ.Контрагент);
		Запрос.УстановитьПараметр("Автомобиль", Документ.Автомобиль);
		Запрос.УстановитьПараметр("Номер", Документ.НомерДок);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			Документ.ЗаказчикПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Заказчик, ВыборкаДетальныеЗаписи.Дата);
			Документ.КонтрагентПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент, ВыборкаДетальныеЗаписи.Дата);
			Документ.ФирмаПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация, ВыборкаДетальныеЗаписи.Дата);
		КонецЕсли;
		
		ДанныеОбъектаПоМакетам = Новый Соответствие;
		Для Каждого ИмяМакета Из МассивИменМакетов Цикл
			ДанныеОбъектаПоМакетам.Вставить(ИмяМакета, Документ);
		КонецЦикла;
		
		ДанныеПоВсемОбъектам.Вставить(Строка(Документ.НомерДок)+Строка(Документ.ДатаДок), ДанныеОбъектаПоМакетам);
		
	КонецЦикла;
	
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов = Новый Соответствие;
	
	ДвоичныеДанныеМакетов.Вставить("ДоговорЗаказНарядШаблон", УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаряд.ДоговорЗаказНарядШаблон"));
	ОписаниеОбластей.Вставить(ИмяМакета, ПолучитьОписаниеОбластейМакетаОфисногоДокумента());
	
	Макеты = Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов",
		ОписаниеОбластей,
		ТипыМакетов,
		ДвоичныеДанныеМакетов
	);
	
	Возврат Новый Структура("Данные, Макеты", ДанныеПоВсемОбъектам, Макеты);
	
КонецФункции

//ОБЩИЕ ПЕЧАТНЫЕ ФОРМЫ

// Формирует печатную форму "АктСдачи"
// Возвращает сформированный табличный документ:
Функция ПечатьАктСдачи(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		ФорматПредставленияГодаВыпускаАвтомобиля = АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Документ);
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ДатаПечатная = ?(НЕ ЗначениеЗаполнено(Документ.ДатаЗакрытия), Документ.ДатаСоздания, Документ.ДатаЗакрытия);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаряд.ПФ_MXL_АктСдачи");
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		
		НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		
		// Вывод шапки документа
		ОбластьШапка.Параметры.НомерДок = НомерДляПечати;
		ОбластьШапка.Параметры.ДатаДок = Формат(ДатаПечатная,"ДФ = дд.ММ.гггг");
		
		Заказчик = Документ.СводныйРемонтныйЗаказ.Заказчик;
		ОбластьШапка.Параметры.Заказчик = Заказчик;
		ОбластьШапка.Параметры.ЗаказчикПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Заказчик, Документ.Дата);
		ОбластьШапка.Параметры.ЗаказчикАдресПочтовый = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказчик, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.ЗаказчикТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Заказчик, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.Контрагент = Документ.Контрагент;
		ОбластьШапка.Параметры.КонтрагентПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент, Документ.Дата);
		ОбластьШапка.Параметры.КонтрагентИНН = Документ.Контрагент.ИНН;
		ОбластьШапка.Параметры.КонтрагентАдресЮридический = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.КонтрагентТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.Мастер = Документ.Мастер;
		ОбластьШапка.Параметры.МастерПолноеНаименование = Документ.Мастер.Наименование;
		
		Автомобиль = Документ.СводныйРемонтныйЗаказ.Автомобиль;
		Если ЗначениеЗаполнено(Автомобиль) Тогда
			ОбластьШапка.Параметры.Автомобиль = Автомобиль;
			ОбластьШапка.Параметры.АвтомобильКод = Автомобиль.VIN;
			ОбластьШапка.Параметры.АвтомобильМодель = Автосервис.МаркаМодельАвтомобиля(Автомобиль);
			ОбластьШапка.Параметры.АвтомобильГодВыпуска = Формат(Автомобиль.ГодВыпуска,ФорматПредставленияГодаВыпускаАвтомобиля);
			ОбластьШапка.Параметры.АвтомобильНомерДвигателя = Автомобиль.НомерДвигателя;
			ОбластьШапка.Параметры.АвтомобильНомерШасси = Автомобиль.НомерШасси;
			ОбластьШапка.Параметры.АвтомобильНомерКузова = Автомобиль.НомерКузова;
			ОбластьШапка.Параметры.АвтомобильЦвет = Автомобиль.Цвет;
			
			ОбластьШапка.Параметры.АвтомобильГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер,Документ.ДатаСоздания);
			ОбластьШапка.Параметры.АвтомобильТехПаспорт = СокрЛП(Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ТехПаспорт,Документ.ДатаСоздания));
			
			Пробег = ?(Документ.Пробег > Документ.СводныйРемонтныйЗаказ.Пробег, 
						Документ.Пробег, 
						Документ.СводныйРемонтныйЗаказ.Пробег);
			ОбластьШапка.Параметры.АвтомобильПробег = Формат(Пробег, "ЧЦ=10");
		КонецЕсли; 
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	ТабличныйДокумент.Автомасштаб = Истина;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаряд_АктСдачи";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "Акт об оказании услуг"
// Возвращает сформированный табличный документ:
Функция ПечатьАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// зададим параметры макета
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		ФорматПредставленияГодаВыпускаАвтомобиля =
			АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Документ);
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		ДатаПечатная = ?(ЗначениеЗаполнено(Документ.ДатаЗакрытия), Документ.ДатаЗакрытия, Документ.Дата);
		
		// Валюта печати
		ВалютаПечатногоДокумента = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПечати,
			"ВалютаПечатногоДокумента", Документ.ВалютаДокумента);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаряд.ПФ_MXL_АктОбОказанииУслуг");
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		НомерДляПечати=УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		
		ТаблицаРабот = Документ.Автоработы.Выгрузить();
		
		// Пересчет сумм по выбранной валюте.
		Если ТаблицаРабот.Количество() > 0
			И ВалютаПечатногоДокумента <> Документ.ВалютаДокумента Тогда
			
			ТаблицаТоваров = Документ.Товары.Выгрузить();
			
			РаспределениеСумм = Неопределено;
			ПересчитатьПоРасчетамСКонтрагентами = ПересчитатьТаблицуНаОснованииВзаиморасчетов(
				Документ,
				ТаблицаРабот,
				ТаблицаТоваров,
				РаспределениеСумм,
				ВалютаПечатногоДокумента);
			
			ДокументОбъектСтруктура = УправлениеПечатьюПлатформа.ДанныеДокументаДляПерерасчетаТаблицы();
			ЗаполнитьЗначенияСвойств(ДокументОбъектСтруктура, Документ);
			ДокументОбъектСтруктура.Документ = Документ; 
			ДокументОбъектСтруктура.ПропуститьПересчетПоВзаиморасчетам = Истина;
			
			ДополнитьПараметрыПересчетаДанных(
				ДокументОбъектСтруктура,
				ПересчитатьПоРасчетамСКонтрагентами,
				РаспределениеСумм);
			
			ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ТаблицаРабот,
				ДокументОбъектСтруктура,
				ВалютаПечатногоДокумента);
		КонецЕсли;
		
		ТаблицаПричинОбращения = Документ.ПричиныОбращения.Выгрузить();
		
		ЕстьСкидка = Истина;
		Если ТаблицаРабот.Итог("СуммаСкидки") = 0 
			И ТаблицаРабот.Итог("СуммаСкидкиСтроки") = 0
			И ТаблицаРабот.Итог("СуммаСкидкиБонусами") = 0 Тогда
			
			ЕстьСкидка = Ложь;
			ОбластьСкидка = Макет.Область("Скидка");
			ОбластьУслуга = Макет.Область("Услуга");
			
			ОбластьУслуга.ШиринаКолонки = ОбластьУслуга.ШиринаКолонки + ОбластьСкидка.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьСкидка, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			
		КонецЕсли;
		
		Если УправлениеПечатьюПлатформа.ЕстьЛоготип(Документ.Организация, Документ.ПодразделениеКомпании) Тогда
			ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокСЛоготипом");
			УправлениеПечатьюПлатформа.ЗаполнитьЛоготип(ОбластьЗаголовок, Документ.Организация, Документ.ПодразделениеКомпании);
		Иначе
			ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		КонецЕсли;
		
		ОбластьДокументОснование = Макет.ПолучитьОбласть("ДокументОснование");
		ОбластьИтого             = Макет.ПолучитьОбласть("Итого");
		ОбластьСуммаПрописью     = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьПодписи           = Макет.ПолучитьОбласть("Подписи");
		
		
		ЕстьПричиныОбращений = (ТаблицаПричинОбращения.Количество() > 0);
		
		Если НЕ ЕстьПричиныОбращений Тогда
			ТаблицаПричинОбращения.Добавить();
		Иначе
			
			ОбластьШапкаПричиныОбращения  = Макет.ПолучитьОбласть("ШапкаПричиныОбращения");
			ОбластьПодвалПричиныОбращения = Макет.ПолучитьОбласть("ПодвалПричиныОбращения");
			
			ПричиныИАвтоработы = ПричиныОбращенийСлужебный.СоставПричинОбращенийПоЗаказНаряду(Документ);
			ТаблицаРабот.Колонки.Добавить("ИдентификаторПричиныОбращения");
			Для Каждого Авторабота Из ТаблицаРабот Цикл
				НайденныеСтроки = ПричиныИАвтоработы.НайтиСтроки(Новый Структура("Авторабота", Авторабота.ИдентификаторРаботы));
				Если НайденныеСтроки.Количество() > 0 Тогда
					Авторабота.ИдентификаторПричиныОбращения = НайденныеСтроки[0].ПричинаОбращения;
				Иначе
					Авторабота.ИдентификаторПричиныОбращения = ТаблицаПричинОбращения[0].ИдентификаторПричиныОбращения;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		ОбластьЗаголовок.Параметры.НомерДок = НомерДляПечати;
		ОбластьЗаголовок.Параметры.ДатаДок = Формат(ДатаПечатная, "ДФ = дд.ММ.гггг");
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ДляПечати = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ФирмаАдресЮридический = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Организация, Новый Структура("АдресЮридический", " "), ДополнительныеПараметры);
		
		ФирмаТелефоны = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Организация, Новый Структура("ТелефонРабочий", " "), ДополнительныеПараметры);
		
		ДополнительныеПараметры.ДляПечати = Ложь;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		ОбластьЗаголовок.Параметры.ПредставлениеПолучателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Контрагент, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		Автомобиль = Документ.СводныйРемонтныйЗаказ.Автомобиль;
		Если ЗначениеЗаполнено(Автомобиль) Тогда
			ОбластьАвтомобиль = Макет.ПолучитьОбласть("Автомобиль");
			ОбластьАвтомобиль.Параметры.ПредставлениеАвтомобиля = СокрЛП(Автомобиль.Наименование);
			ТабличныйДокумент.Вывести(ОбластьАвтомобиль);
		КонецЕсли;
		
		ОбластьДокументОснование.Параметры.ДокументОснование = Документ.Ссылка.Метаданные().Синоним + " № " + НомерДляПечати
			+ " от " + Формат(ДатаПечатная, "ДФ = dd.MM.yyyy");
		ТабличныйДокумент.Вывести(ОбластьДокументОснование);
		
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		
		ИтогоОбщаяСумма       = 0;
		ИтогоОбщаяСуммаНДС    = 0;
		ИтогоОбщаяСуммаСкидки = 0;
		
		РазрывПередИтогамипоПричинам = Ложь;
		НомерПричины = 1;
		
		Для Каждого ПричинаОбращения Из ТаблицаПричинОбращения Цикл
			
			ИтогРаботСумма       = 0;
			ИтогРаботСуммаНДС    = 0;
			ИтогРаботСуммаСкидки = 0;
			
			Если ЕстьПричиныОбращений Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ИдентификаторПричиныОбращения", ПричинаОбращения.ИдентификаторПричиныОбращения);
				ВыборкаТабличнойЧасти = ТаблицаРабот.НайтиСтроки(ПараметрыОтбора);
				
				ОбластьШапкаПричиныОбращения.Параметры.ПричинаОбращения           = ПричинаОбращения.ПричинаОбращения;
				ОбластьШапкаПричиныОбращения.Параметры.СодержаниеПричиныОбращения = ПричинаОбращения.ПричинаОбращенияСодержание;
				ТабличныйДокумент.Вывести(ОбластьШапкаПричиныОбращения);
			Иначе
				ВыборкаТабличнойЧасти = ТаблицаРабот;
			КонецЕсли;
			
			ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьШапка);
			
			ТекстЗаголовка = СтрШаблон(
				НСтр("ru = 'Акт об оказании услуг № %1 от %2'"),
				НомерДляПечати,
				Формат(ДатаПечатная, "ДЛФ=D")
			);
			
			// заполним параметры шапки таблицы для следующего листа
			ОбластьШапка.Параметры.ТекстЗаголовка = ТекстЗаголовка;
			ОбластьШапка.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			
			// Вывод табличной части работ
			Ном	= 0;
			СтруктураИтоговПоСтранице = Новый Структура;
			СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", ВалютаПечатногоДокумента);
			СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
			СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
			СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
			
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьИтогПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
			
			НомерСтроки = 1;
			Для Каждого СтрокаТабличнойЧасти Из ВыборкаТабличнойЧасти Цикл
				ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
				ОбластьСтрока.Параметры.Работа = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
					СтрокаТабличнойЧасти.Авторабота);
				ОбластьСтрока.Параметры.Количество = Формат(СтрокаТабличнойЧасти.Количество, ФорматВыводаКоличества);
				ОбластьСтрока.Параметры.Коэффициент = Формат(СтрокаТабличнойЧасти.Коэффициент, "ЧЦ=10; ЧДЦ=3");
				ОбластьСтрока.Параметры.Нормочас = СтрокаТабличнойЧасти.Нормочас;
				ОбластьСтрока.Параметры.Цена = Формат(СтрокаТабличнойЧасти.Цена, ФорматВыводаСуммы);
				Если ЕстьСкидка Тогда
					Скидка = СтрокаТабличнойЧасти.СуммаСкидки + СтрокаТабличнойЧасти.СуммаСкидкиСтроки
						+ СтрокаТабличнойЧасти.СуммаСкидкиБонусами;
					ОбластьСтрока.Параметры.СуммаСкидки = Формат(Скидка, ФорматВыводаСуммы);
				КонецЕсли;
				ОбластьСтрока.Параметры.СуммаВсего = Формат(СтрокаТабличнойЧасти.СуммаВсего, ФорматВыводаСуммы);
				ОбластьСтрока.Параметры.СуммаНДС = Формат(СтрокаТабличнойЧасти.СуммаНДС, ФорматВыводаСуммы); 
				Если СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
					ОбластьСтрока.Параметры.СуммаНДС = "Без НДС";	
				КонецЕсли;
				
				Если НомерСтроки = ВыборкаТабличнойЧасти.Количество() Тогда
					
					ТабДокВрем = Новый ТабличныйДокумент;
					ТабДокВрем.ПолеСверху = 10;
					ТабДокВрем.ПолеСнизу  = 0;
					ТабДокВрем.ПолеСлева  = 0;
					ТабДокВрем.ПолеСправа = 0;
					
					ТабДокВрем.Вывести(ОбластьСтрока);
					ТабДокВрем.Вывести(ОбластьИтогПоСтранице);
					
					Если ЕстьПричиныОбращений Тогда
						ТабДокВрем.Вывести(ОбластьПодвалПричиныОбращения);
					КонецЕсли;
					
					Если НЕ ТабличныйДокумент.ПроверитьВывод(ТабДокВрем) Тогда
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						ТабличныйДокумент.Вывести(ОбластьШапка);
					ИначеЕсли НомерПричины = ТаблицаПричинОбращения.Количество() Тогда
						ТабДокВрем.Вывести(ОбластьИтого);
						ТабДокВрем.Вывести(ОбластьСуммаПрописью);
						ТабДокВрем.Вывести(ОбластьПодписи);
						Если НЕ ТабличныйДокумент.ПроверитьВывод(ТабДокВрем) Тогда
							РазрывПередИтогамипоПричинам = Истина;
						КонецЕсли;							
					КонецЕсли;
											
				КонецЕсли;
				
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
					ОбластьШапка, ОбластьИтогПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ);
				
				// инициализация итогов по странице
				Если НомерСтраницы <> НомерСтраницыПред Тогда
					СтруктураИтоговПоСтранице = Новый Структура;
					СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", ВалютаПечатногоДокумента);
					СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
					СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
					СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);

					НомерСтраницыПред = НомерСтраницы;
					ОбластьШапка.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
				КонецЕсли;
				
				ИтогРаботСумма       = ИтогРаботСумма + СтрокаТабличнойЧасти.СуммаВсего;
				ИтогРаботСуммаНДС    = ИтогРаботСуммаНДС + СтрокаТабличнойЧасти.СуммаНДС;
				ИтогРаботСуммаСкидки = ИтогРаботСуммаСкидки + СтрокаТабличнойЧасти.СуммаСкидки 
					+ СтрокаТабличнойЧасти.СуммаСкидкиСтроки + СтрокаТабличнойЧасти.СуммаСкидкиБонусами;
				
				НомерСтроки = НомерСтроки + 1;
				
				// обновим итоги по странице
				УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТабличнойЧасти, СтруктураИтоговПоСтранице);
			КонецЦикла; 
			
			Если ЕстьПричиныОбращений Тогда		
				Если ЕстьСкидка Тогда
					ОбластьПодвалПричиныОбращения.Параметры.СуммаСкидки = Формат(ИтогРаботСуммаСкидки, ФорматВыводаСуммы);
				КонецЕсли;
				ОбластьПодвалПричиныОбращения.Параметры.СуммаВсего      = Формат(ИтогРаботСумма, ФорматВыводаСуммы);
				ОбластьПодвалПричиныОбращения.Параметры.СуммаНДС        = Формат(ИтогРаботСуммаНДС, ФорматВыводаСуммы);
				ОбластьПодвалПричиныОбращения.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
				ОбластьПодвалПричиныОбращения.Параметры.СуммаПрописью   = РаботаСКурсамиВалют.СформироватьСуммуПрописью(
					ИтогРаботСумма, ВалютаПечатногоДокумента);
				ТабличныйДокумент.Вывести(ОбластьПодвалПричиныОбращения);
			КонецЕсли;
			
			ИтогоОбщаяСумма       = ИтогоОбщаяСумма + ИтогРаботСумма;
			ИтогоОбщаяСуммаНДС    = ИтогоОбщаяСуммаНДС + ИтогРаботСуммаНДС;
			ИтогоОбщаяСуммаСкидки = ИтогоОбщаяСуммаСкидки + ИтогРаботСуммаСкидки;
			
			НомерПричины = НомерПричины + 1;
			
		КонецЦикла;
		
		Если РазрывПередИтогамипоПричинам Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// довыводим последний итог по странице, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		СуммаВсего = ИтогоОбщаяСумма;
		СуммаНДС = ИтогоОбщаяСуммаНДС;
		
		Если ЕстьСкидка Тогда
			ОбластьИтого.Параметры.СуммаСкидки = Формат(ИтогоОбщаяСуммаСкидки, ФорматВыводаСуммы);
		КонецЕсли;
		
		ОбластьИтого.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		ОбластьИтого.Параметры.СуммаНДС = Формат(СуммаНДС, ФорматВыводаСуммы);
		ОбластьИтого.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
		ТабличныйДокумент.Вывести(ОбластьИтого);
		
		ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = СтрШаблон(
			НСтр("ru = 'Всего услуг %1 на сумму %2 %3 (в т.ч. НДС %4 %5)'"),
			ТаблицаРабот.Количество(),
			Формат(СуммаВсего, ФорматВыводаСуммы),
			ВалютаПечатногоДокумента,
			Формат(СуммаНДС, ФорматВыводаСуммы),
			ВалютаПечатногоДокумента);
		ОбластьСуммаПрописью.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(
			СуммаВсего, ВалютаПечатногоДокумента);
		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		ОбластьПодписи.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил", "Отпустил"));
		ОбластьПодписи.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПолучилКонтрагент", "Получил"));
		
		Если НЕ ЗначениеЗаполнено(ОбластьПодписи.Параметры.ОтпустилПредставление) Тогда
			ОбластьПодписи.Параметры.ОтпустилПредставление = ?(ЗначениеЗаполнено(Документ.Мастер), "/ ", "")
				+ УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Мастер)
				+ ?(ЗначениеЗаполнено(Документ.Мастер), " /", "");
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьПодписи);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаряд_АктОбОказанииУслуг";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьАктОбОказанииУслуг()

// Формирует печатную форму "Акт об оказании услуг(услуги + материалы)"
// Возвращает сформированный табличный документ:
Функция ПечатьАктОбОказанииУслугУслугиИМатериалы(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// зададим параметры макета
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		ФорматПредставленияГодаВыпускаАвтомобиля =
			АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Документ);
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		ДатаПечатная = ?(ЗначениеЗаполнено(Документ.ДатаЗакрытия), Документ.ДатаЗакрытия, Документ.Дата);
		
		// Валюта печати
		ВалютаПечатногоДокумента = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПечати,
			"ВалютаПечатногоДокумента", Документ.ВалютаДокумента);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаряд.ПФ_MXL_АктОбОказанииУслугУслугиИМатериалы");
		
		ТаблицаРабот  =  Документ.Автоработы.Выгрузить();
		ТаблицаТоваров = Документ.Товары.Выгрузить();
		
		ЕстьСкидка = Истина;
		Если ТаблицаРабот.Итог("СуммаСкидки") = 0
			И ТаблицаРабот.Итог("СуммаСкидкиСтроки") = 0
			И ТаблицаРабот.Итог("СуммаСкидкиБонусами") = 0
			И ТаблицаТоваров.Итог("СуммаСкидки") = 0
			И ТаблицаТоваров.Итог("СуммаСкидкиБонусами") = 0
			И ТаблицаТоваров.Итог("СуммаСкидкиСтроки") = 0 Тогда
			
			ЕстьСкидка = Ложь;
			ОбластьСкидка = Макет.Область("Скидка");
			ОбластьУслуга = Макет.Область("Услуга");
			
			ОбластьУслуга.ШиринаКолонки = ОбластьУслуга.ШиринаКолонки + ОбластьСкидка.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьСкидка, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		КонецЕсли;
		
		ОбластьДокументОснование = Макет.ПолучитьОбласть("ДокументОснование");
		ОбластьИтого             = Макет.ПолучитьОбласть("Итого");
		ОбластьСуммаПрописью     = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьПодписи           = Макет.ПолучитьОбласть("Подписи");
		
		НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		
		Если УправлениеПечатьюПлатформа.ЕстьЛоготип(Документ.Организация, Документ.ПодразделениеКомпании) Тогда
			ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокСЛоготипом");
			УправлениеПечатьюПлатформа.ЗаполнитьЛоготип(ОбластьЗаголовок, Документ.Организация, Документ.ПодразделениеКомпании);
		Иначе
			ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		КонецЕсли;
		
		// Пересчет сумм по выбранной валюте.
		Если ВалютаПечатногоДокумента <> Документ.ВалютаДокумента Тогда
			
			РаспределениеСумм = Неопределено;
			ПересчитатьПоРасчетамСКонтрагентами = ПересчитатьТаблицуНаОснованииВзаиморасчетов(
				Документ,
				ТаблицаРабот,
				ТаблицаТоваров,
				РаспределениеСумм,
				ВалютаПечатногоДокумента);
			
			Если ТаблицаРабот.Количество() > 0 Тогда
				ДокументОбъектСтруктура = УправлениеПечатьюПлатформа.ДанныеДокументаДляПерерасчетаТаблицы();
				ЗаполнитьЗначенияСвойств(ДокументОбъектСтруктура, Документ);
				ДокументОбъектСтруктура.Документ = Документ;
				ДокументОбъектСтруктура.ТипЦен = Документ.ТипЦенРабот;
				ДокументОбъектСтруктура.ПропуститьПересчетПоВзаиморасчетам = Истина;
				
				ДополнитьПараметрыПересчетаДанных(
					ДокументОбъектСтруктура,
					ПересчитатьПоРасчетамСКонтрагентами,
					РаспределениеСумм);
				
				ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ТаблицаРабот,
					ДокументОбъектСтруктура,
					ВалютаПечатногоДокумента);
			КонецЕсли;
			
			Если ТаблицаТоваров.Количество() > 0 Тогда
				ДокументОбъектСтруктура = УправлениеПечатьюПлатформа.ДанныеДокументаДляПерерасчетаТаблицы();
				ЗаполнитьЗначенияСвойств(ДокументОбъектСтруктура, Документ);
				ДокументОбъектСтруктура.Документ = Документ;
				ДокументОбъектСтруктура.ПропуститьПересчетПоВзаиморасчетам = Истина;
				
				ДополнитьПараметрыПересчетаДанных(
					ДокументОбъектСтруктура,
					ПересчитатьПоРасчетамСКонтрагентами,
					РаспределениеСумм,
					Ложь);
				
				ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ТаблицаТоваров,
					ДокументОбъектСтруктура,
					ВалютаПечатногоДокумента);
			КонецЕсли;
			
		КонецЕсли;
		
		ТаблицаПричинОбращения = Документ.ПричиныОбращения.Выгрузить();
		
		ЕстьПричиныОбращений = (ТаблицаПричинОбращения.Количество() > 0);
		НомерПричины = 1;
		
		Если НЕ ЕстьПричиныОбращений Тогда
			ТаблицаПричинОбращения.Добавить();	
		Иначе
			
			ОбластьШапкаПричиныОбращения  = Макет.ПолучитьОбласть("ШапкаПричиныОбращения");
			ОбластьПодвалПричиныОбращения = Макет.ПолучитьОбласть("ПодвалПричиныОбращения");
			
			ПричиныИАвтоработы = ПричиныОбращенийСлужебный.СоставПричинОбращенийПоЗаказНаряду(Документ);
			ТаблицаРабот.Колонки.Добавить("ИдентификаторПричиныОбращения");
			Для Каждого Авторабота Из ТаблицаРабот Цикл
				НайденныеСтроки = ПричиныИАвтоработы.НайтиСтроки(Новый Структура("Авторабота", Авторабота.ИдентификаторРаботы));
				Если НайденныеСтроки.Количество() > 0 Тогда
					Авторабота.ИдентификаторПричиныОбращения = НайденныеСтроки[0].ПричинаОбращения;
				Иначе
					Авторабота.ИдентификаторПричиныОбращения = ТаблицаПричинОбращения[0].ИдентификаторПричиныОбращения;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Автомобиль = Документ.СводныйРемонтныйЗаказ.Автомобиль;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Автомобиль",  Автомобиль);
		СтруктураОтбора.Вставить("ВидЗначения", Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер);
		ДатаЗаписи = Неопределено;
		СтруктураСведений = РегистрыСведений.Автомобили.ПолучитьПоследнее(ДатаЗаписи, СтруктураОтбора);
		
		ОбластьЗаголовок.Параметры.НомерДок = НомерДляПечати;
		ОбластьЗаголовок.Параметры.ДатаДок = Формат(ДатаПечатная, "ДФ = дд.ММ.гггг");
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ДляПечати = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ФирмаАдресЮридический = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Организация, Новый Структура("АдресЮридический"," "), ДополнительныеПараметры);
		
		ФирмаТелефоны = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Организация, Новый Структура("ТелефонРабочий"," "), ДополнительныеПараметры);
		
		ДополнительныеПараметры.ДляПечати = Ложь;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		ОбластьЗаголовок.Параметры.ПредставлениеПолучателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Контрагент, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		Если ЗначениеЗаполнено(Автомобиль) Тогда
			ОбластьАвтомобиль = Макет.ПолучитьОбласть("Автомобиль");
			ОбластьАвтомобиль.Параметры.ПредставлениеАвтомобиля = СокрЛП(Автомобиль.Наименование);
			ТабличныйДокумент.Вывести(ОбластьАвтомобиль);
		КонецЕсли;
		
		ОбластьДокументОснование.Параметры.ДокументОснование = Документ.Метаданные().Синоним + " № " + НомерДляПечати
			+ " от " + Формат(ДатаПечатная, "ДФ = dd.MM.yyyy");
		ТабличныйДокумент.Вывести(ОбластьДокументОснование);
		
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		
		ИтогоОбщаяСумма       = 0;
		ИтогоОбщаяСуммаНДС    = 0;
		ИтогоОбщаяСуммаСкидки = 0;
		
		ТабДокВрем = Новый ТабличныйДокумент;
		ТабДокВрем.ПолеСверху = 10;
		ТабДокВрем.ПолеСнизу  = 0;
		ТабДокВрем.ПолеСлева  = 0;
		ТабДокВрем.ПолеСправа = 0;
		
		Для Каждого ПричинаОбращения Из ТаблицаПричинОбращения Цикл
			
			ИтогРаботСумма       = 0;
			ИтогРаботСуммаНДС    = 0;
			ИтогРаботСуммаСкидки = 0;
			
			Если ЕстьПричиныОбращений Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ИдентификаторПричиныОбращения", ПричинаОбращения.ИдентификаторПричиныОбращения);
				ВыборкаТабличнойЧасти = ТаблицаРабот.НайтиСтроки(ПараметрыОтбора);
				ВыборакаТабличнойЧастиТовары = ТаблицаТоваров.НайтиСтроки(ПараметрыОтбора);
				ОбластьШапкаПричиныОбращения.Параметры.ПричинаОбращения           = ПричинаОбращения.ПричинаОбращения;
				ОбластьШапкаПричиныОбращения.Параметры.СодержаниеПричиныОбращения = ПричинаОбращения.ПричинаОбращенияСодержание;
				ТабличныйДокумент.Вывести(ОбластьШапкаПричиныОбращения);
			Иначе
				ВыборкаТабличнойЧасти = ТаблицаРабот;
				ВыборакаТабличнойЧастиТовары = ТаблицаТоваров;
			КонецЕсли;
			
			ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицы");
			//ТабличныйДокумент.Вывести(ОбластьШапка); 
			НомерСтроки = 1;
			Если НомерСтроки = 1 Тогда
				ТабДокВрем.Очистить();
				ТабДокВрем.Вывести(ОбластьШапка);
				ТабДокВрем.Вывести(ОбластьШапка);
				//ТабДокВрем.Вывести(ОбластьШапка);
				Если ЕстьПричиныОбращений Тогда
					ТабДокВрем.Вывести(ОбластьПодвалПричиныОбращения);
				КонецЕсли;
				Если НЕ ТабличныйДокумент.ПроверитьВывод(ТабДокВрем) Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Ремонт\обслуживание автомобиля Марка, модель: %1, VIN: %2, Гос. № %3'"),
					Автосервис.МаркаМодельАвтомобиля(Автомобиль), Автомобиль.VIN, СтруктураСведений.Значение);
					ОбластьШапка.Параметры.ТекстЗаголовка = ТекстЗаголовка;
					ОбластьШапка.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
					ТабличныйДокумент.Вывести(ОбластьШапка);
				ИначеЕсли НомерПричины <> 1 Тогда
					ТабличныйДокумент.Вывести(ОбластьШапка);
				КонецЕсли;
				Если НомерПричины = 1 Тогда
					ТабличныйДокумент.Вывести(ОбластьШапка);
				КонецЕсли;
			КонецЕсли;

			ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Ремонт\обслуживание автомобиля Марка, модель: %1, VIN: %2, Гос. № %3'"),
				Автосервис.МаркаМодельАвтомобиля(Автомобиль), Автомобиль.VIN, СтруктураСведений.Значение);
			// заполним параметры шапки таблицы для следующего листа
			ОбластьШапка.Параметры.ТекстЗаголовка = ТекстЗаголовка;
			ОбластьШапка.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			
			// Вывод табличной части работ
			Ном = 0;
			СтруктураИтоговПоСтранице = Новый Структура;
			СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", ВалютаПечатногоДокумента);
			СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
			СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
			СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
			
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьИтогПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
			РазрывПослеАвторабот = Ложь;
			
			Для Каждого СтрокаТабличнойЧасти Из ВыборкаТабличнойЧасти Цикл
				ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
				ОбластьСтрока.Параметры.Работа = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
					СтрокаТабличнойЧасти.Авторабота);
				ОбластьСтрока.Параметры.Количество = Формат(СтрокаТабличнойЧасти.Количество, ФорматВыводаКоличества);
				ОбластьСтрока.Параметры.Коэффициент = Формат(СтрокаТабличнойЧасти.Коэффициент, "ЧЦ=10; ЧДЦ=3");
				ОбластьСтрока.Параметры.Нормочас = СтрокаТабличнойЧасти.Нормочас;
				ОбластьСтрока.Параметры.Цена = Формат(СтрокаТабличнойЧасти.Цена, ФорматВыводаСуммы);
				Если ЕстьСкидка Тогда
					Скидка = СтрокаТабличнойЧасти.СуммаСкидки + СтрокаТабличнойЧасти.СуммаСкидкиСтроки
						+ СтрокаТабличнойЧасти.СуммаСкидкиБонусами;
					ОбластьСтрока.Параметры.СуммаСкидки = Формат(Скидка, ФорматВыводаСуммы);
				КонецЕсли;
				ОбластьСтрока.Параметры.СуммаВсего = Формат(СтрокаТабличнойЧасти.СуммаВсего, ФорматВыводаСуммы);
				ОбластьСтрока.Параметры.СуммаНДС = Формат(СтрокаТабличнойЧасти.СуммаНДС, ФорматВыводаСуммы);
				Если СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
					ОбластьСтрока.Параметры.СуммаНДС = "Без НДС";	
				КонецЕсли;

				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
					ОбластьШапка, ОбластьИтогПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ);

				Если НомерСтроки = ВыборкаТабличнойЧасти.Количество() Тогда
					
					ТабДокВрем.Очистить();					
					ТабДокВрем.Вывести(ОбластьСтрока);
					ТабДокВрем.Вывести(ОбластьИтогПоСтранице); 
					ТабДокВрем.Вывести(ОбластьИтого);
					Если НомерПричины = ТаблицаПричинОбращения.Количество() Тогда
						ТабДокВрем.Вывести(ОбластьСуммаПрописью);
						ТабДокВрем.Вывести(ОбластьПодписи);
					КонецЕсли;
					// тут добавлена область шапка т.к как это одна строка высотой 1
					ТабДокВрем.Вывести(ОбластьШапка);
									
					Если НЕ ТабличныйДокумент.ПроверитьВывод(ТабДокВрем) Тогда
						РазрывПослеАвторабот = Истина;
					КонецЕсли;
				КонецЕсли;
				
				МассивОбластейДляПроверки = Новый Массив;
				МассивОбластейДляПроверки.Добавить(ОбластьИтогПоСтранице);
				РезультатПроверки = ТабличныйДокумент.ПроверитьВывод(МассивОбластейДляПроверки);
				
				Если Не РезультатПроверки Тогда
					ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Области.Строка, ТипСмещенияТабличногоДокумента.ПоВертикали);
					
					УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент,ОбластьИтогПоСтранице,СтруктураИтоговПоСтранице,Документ); //выводим итог по странице
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц(); //переходим на следующую страницу
					НомерСтраницы = НомерСтраницы + 1;
					Если ОбластьШапка <> Неопределено Тогда
						ТабличныйДокумент.Вывести(ОбластьШапка); //выводим шапку таблицы
					КонецЕсли;
				
					НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
						ОбластьШапка, ОбластьИтогПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ);
				КонецЕсли;
				
				// инициализация итогов по странице
				Если НомерСтраницы <> НомерСтраницыПред Тогда
					СтруктураИтоговПоСтранице = Новый Структура;
					СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", ВалютаПечатногоДокумента);
					СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
					СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
					СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);

					НомерСтраницыПред = НомерСтраницы;
					ОбластьШапка.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
				КонецЕсли;
				НомерСтроки = НомерСтроки + 1;
				
				ИтогРаботСумма       = ИтогРаботСумма + СтрокаТабличнойЧасти.СуммаВсего;
				ИтогРаботСуммаНДС    = ИтогРаботСуммаНДС + СтрокаТабличнойЧасти.СуммаНДС;
				ИтогРаботСуммаСкидки = ИтогРаботСуммаСкидки + СтрокаТабличнойЧасти.СуммаСкидки 
					+ СтрокаТабличнойЧасти.СуммаСкидкиСтроки + СтрокаТабличнойЧасти.СуммаСкидкиБонусами;
				
				// обновим итоги по странице
				УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТабличнойЧасти, СтруктураИтоговПоСтранице);
			КонецЦикла; 
			
			СуммаВсегоТовары = 0;
			СуммаНДСТовары = 0;
			СуммаВсего = 0;
			СуммаНДС = 0;
			СуммаСкидкиТовары = 0;
			КоличествоТовара = 0;
			
			Если РазрывПослеАвторабот = Истина И НомерПричины = ТаблицаПричинОбращения.Количество() Тогда
				УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент,ОбластьИтогПоСтранице,СтруктураИтоговПоСтранице,Документ); //выводим итог по странице		
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьШапка);
			КонецЕсли;
			
			// Соберём данные из ТЧ "Товары"
			Для Каждого ТекущаяСтрока Из ВыборакаТабличнойЧастиТовары Цикл
				СуммаВсегоТовары = СуммаВсегоТовары + ТекущаяСтрока.СуммаВсего;
				СуммаНДСТовары = СуммаНДСТовары + ТекущаяСтрока.СуммаНДС;
				СуммаВсего= СуммаВсего + ТекущаяСтрока.СуммаВсего;
				СуммаНДС= СуммаНДС + ТекущаяСтрока.СуммаНДС;
				СуммаСкидкиТовары = СуммаСкидкиТовары + ТекущаяСтрока.СуммаСкидки + ТекущаяСтрока.СуммаСкидкиСтроки
					+ ТекущаяСтрока.СуммаСкидкиБонусами;
				КоличествоТовара = КоличествоТовара + ТекущаяСтрока.Количество;
			КонецЦикла;
			ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
			ОбластьСтрока.Параметры.Работа = НСтр("ru = 'Запасные части'");
			ОбластьСтрока.Параметры.Количество = КоличествоТовара;
			ОбластьСтрока.Параметры.Цена = "-";  // ставим прочерки в полях
			ОбластьСтрока.Параметры.Коэффициент = "-"; // ставим прочерки в полях
			ОбластьСтрока.Параметры.Нормочас = "-"; // ставим прочерки в полях
			СуммыТовара = Новый Структура();
			СуммыТовара.Вставить("СуммаСкидки", СуммаСкидкиТовары);
			СуммыТовара.Вставить("СуммаВсего", СуммаВсегоТовары);
			СуммыТовара.Вставить("СуммаНДС", СуммаНДСТовары);
			Если ЕстьСкидка Тогда
				ОбластьСтрока.Параметры.СуммаСкидки = Формат(СуммаСкидкиТовары, ФорматВыводаСуммы);
			КонецЕсли;
			ОбластьСтрока.Параметры.СуммаВсего = Формат(СуммаВсегоТовары, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СуммаНДС = Формат(СуммаНДСТовары, ФорматВыводаСуммы);			
			Если СуммаНДС = 0 Тогда
				ОбластьСтрока.Параметры.СуммаНДС = "Без НДС";	
			КонецЕсли;
			
			// обновим итоги по странице
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СуммыТовара, СтруктураИтоговПоСтранице);
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапка, ОбластьИтогПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура;
				СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", ВалютаПечатногоДокумента);
				СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
				СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
				СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапка.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			Если ЕстьПричиныОбращений Тогда
				Если ЕстьСкидка Тогда
					ОбластьПодвалПричиныОбращения.Параметры.СуммаСкидки = Формат(ИтогРаботСуммаСкидки + СуммаСкидкиТовары,
						ФорматВыводаСуммы);
				КонецЕсли;
				ОбластьПодвалПричиныОбращения.Параметры.СуммаВсего = Формат(ИтогРаботСумма + СуммаВсегоТовары, ФорматВыводаСуммы);
				ОбластьПодвалПричиныОбращения.Параметры.СуммаНДС = Формат(ИтогРаботСуммаНДС + СуммаНДСТовары, ФорматВыводаСуммы);
				ОбластьПодвалПричиныОбращения.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
				ОбластьПодвалПричиныОбращения.Параметры.СуммаПрописью   = РаботаСКурсамиВалют.СформироватьСуммуПрописью(
					ИтогРаботСумма + СуммаВсегоТовары, ВалютаПечатногоДокумента);
				ТабличныйДокумент.Вывести(ОбластьПодвалПричиныОбращения);
			КонецЕсли;
			
			ИтогоОбщаяСумма       = ИтогоОбщаяСумма + ИтогРаботСумма + СуммаВсегоТовары;
			ИтогоОбщаяСуммаНДС    = ИтогоОбщаяСуммаНДС + ИтогРаботСуммаНДС + СуммаНДСТовары;
			ИтогоОбщаяСуммаСкидки = ИтогоОбщаяСуммаСкидки + ИтогРаботСуммаСкидки + СуммаСкидкиТовары;
			
			НомерПричины = НомерПричины + 1;
			
		КонецЦикла;
		
		// довыводим последний итог по странице, если страниц больше единицы
		Если НомерСтраницы > 2 И Не ЕстьПричиныОбращений Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		Если Не ЕстьПричиныОбращений Тогда
			ОбластьИтого = Макет.ПолучитьОбласть("Итого");
			Если ЕстьСкидка Тогда
				ОбластьИтого.Параметры.СуммаСкидки = Формат(ИтогоОбщаяСуммаСкидки, ФорматВыводаСуммы);
			КонецЕсли;
			
			ОбластьИтого.Параметры.СуммаВсего = Формат(ИтогоОбщаяСумма, ФорматВыводаСуммы);
			ОбластьИтого.Параметры.СуммаНДС = Формат(ИтогоОбщаяСуммаНДС, ФорматВыводаСуммы);
			ОбластьИтого.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
			ТабличныйДокумент.Вывести(ОбластьИтого);
		КонецЕсли;

		ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = СтрШаблон(
			НСтр("ru = 'Всего наименований %1 на сумму %2 %3 (в т.ч. НДС %4 %5)'"),
			ТаблицаРабот.Количество()+1,
			Формат(ИтогоОбщаяСумма, ФорматВыводаСуммы),
			ВалютаПечатногоДокумента,
			Формат(ИтогоОбщаяСуммаНДС, ФорматВыводаСуммы),
			ВалютаПечатногоДокумента);
		ОбластьСуммаПрописью.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоОбщаяСумма,
			ВалютаПечатногоДокумента);
		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
		ОбластьПодписи.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил", "Отпустил"));
		ОбластьПодписи.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПолучилКонтрагент", "Получил"));
		
		Если НЕ ЗначениеЗаполнено(ОбластьПодписи.Параметры.ОтпустилПредставление) Тогда
			ОбластьПодписи.Параметры.ОтпустилПредставление = ?(ЗначениеЗаполнено(Документ.Мастер), "/ ", "")
				+ УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Мастер)
				+ ?(ЗначениеЗаполнено(Документ.Мастер), " /", "");
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьПодписи);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаряд_АктОбОказанииУслугУслугиИМатериалы";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "Акт об оказании услуг(с товарами развернуто)"
 // Возвращает сформированный табличный документ:
Функция ПечатьАктОбОказанииУслугУслугиТоварыРазвернуто(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// зададим параметры макета
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		ФорматПредставленияГодаВыпускаАвтомобиля =
			АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Документ);
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		ДатаПечатная = ?(ЗначениеЗаполнено(Документ.ДатаЗакрытия), Документ.ДатаЗакрытия, Документ.Дата);
		
		// Валюта печати
		ВалютаПечатногоДокумента = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПечати,
			"ВалютаПечатногоДокумента", Документ.ВалютаДокумента);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаряд.ПФ_MXL_АктОбОказанииУслугУслугиИМатериалы");
		
		ТаблицаРабот  =  Документ.Автоработы.Выгрузить();
		ТаблицаТоваров = Документ.Товары.Выгрузить();
		
		ЕстьСкидка = Истина;
		Если ТаблицаРабот.Итог("СуммаСкидки") = 0
			И ТаблицаРабот.Итог("СуммаСкидкиСтроки") = 0
			И ТаблицаРабот.Итог("СуммаСкидкиБонусами") = 0
			И ТаблицаТоваров.Итог("СуммаСкидки") = 0
			И ТаблицаТоваров.Итог("СуммаСкидкиБонусами") = 0
			И ТаблицаТоваров.Итог("СуммаСкидкиСтроки") = 0 Тогда
			
			ЕстьСкидка = Ложь;
			ОбластьСкидка = Макет.Область("Скидка");
			ОбластьУслуга = Макет.Область("Услуга");
			
			ОбластьУслуга.ШиринаКолонки = ОбластьУслуга.ШиринаКолонки + ОбластьСкидка.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьСкидка, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		КонецЕсли;
		
		ОбластьДокументОснование = Макет.ПолучитьОбласть("ДокументОснование");
		ОбластьИтого             = Макет.ПолучитьОбласть("Итого");
		ОбластьСуммаПрописью     = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьПодписи           = Макет.ПолучитьОбласть("Подписи");
		
		НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		
		Если УправлениеПечатьюПлатформа.ЕстьЛоготип(Документ.Организация, Документ.ПодразделениеКомпании) Тогда
			ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокСЛоготипом");
			УправлениеПечатьюПлатформа.ЗаполнитьЛоготип(ОбластьЗаголовок, Документ.Организация, Документ.ПодразделениеКомпании);
		Иначе
			ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		КонецЕсли;
		
		// Пересчет сумм по выбранной валюте.
		Если ВалютаПечатногоДокумента <> Документ.ВалютаДокумента Тогда
			
			РаспределениеСумм = Неопределено;
			ПересчитатьПоРасчетамСКонтрагентами = ПересчитатьТаблицуНаОснованииВзаиморасчетов(
				Документ,
				ТаблицаРабот,
				ТаблицаТоваров,
				РаспределениеСумм,
				ВалютаПечатногоДокумента);
			
			Если ТаблицаРабот.Количество() > 0 Тогда
				ДокументОбъектСтруктура = УправлениеПечатьюПлатформа.ДанныеДокументаДляПерерасчетаТаблицы();
				ЗаполнитьЗначенияСвойств(ДокументОбъектСтруктура, Документ);
				ДокументОбъектСтруктура.Документ = Документ;
				ДокументОбъектСтруктура.ТипЦен = Документ.ТипЦенРабот;
				ДокументОбъектСтруктура.ПропуститьПересчетПоВзаиморасчетам = Истина;
				
				ДополнитьПараметрыПересчетаДанных(
					ДокументОбъектСтруктура,
					ПересчитатьПоРасчетамСКонтрагентами,
					РаспределениеСумм);
				
				ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ТаблицаРабот,
					ДокументОбъектСтруктура,
					ВалютаПечатногоДокумента);
			КонецЕсли;
			
			Если ТаблицаТоваров.Количество() > 0 Тогда
				ДокументОбъектСтруктура = УправлениеПечатьюПлатформа.ДанныеДокументаДляПерерасчетаТаблицы();
				ЗаполнитьЗначенияСвойств(ДокументОбъектСтруктура, Документ);
				ДокументОбъектСтруктура.Документ = Документ;
				ДокументОбъектСтруктура.ПропуститьПересчетПоВзаиморасчетам = Истина;
				
				ДополнитьПараметрыПересчетаДанных(
					ДокументОбъектСтруктура,
					ПересчитатьПоРасчетамСКонтрагентами,
					РаспределениеСумм,
					Ложь);
				
				ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ТаблицаТоваров,
					ДокументОбъектСтруктура,
					ВалютаПечатногоДокумента);
			КонецЕсли;
			
		КонецЕсли;
		
		ТаблицаПричинОбращения = Документ.ПричиныОбращения.Выгрузить();
		
		ЕстьПричиныОбращений = (ТаблицаПричинОбращения.Количество() > 0);
		НомерПричины = 1;
		
		Если НЕ ЕстьПричиныОбращений Тогда
			ТаблицаПричинОбращения.Добавить();	
		Иначе
			
			ОбластьШапкаПричиныОбращения  = Макет.ПолучитьОбласть("ШапкаПричиныОбращения");
			ОбластьПодвалПричиныОбращения = Макет.ПолучитьОбласть("ПодвалПричиныОбращения");
			
			ПричиныИАвтоработы = ПричиныОбращенийСлужебный.СоставПричинОбращенийПоЗаказНаряду(Документ);
			ТаблицаРабот.Колонки.Добавить("ИдентификаторПричиныОбращения");
			Для Каждого Авторабота Из ТаблицаРабот Цикл
				НайденныеСтроки = ПричиныИАвтоработы.НайтиСтроки(Новый Структура("Авторабота", Авторабота.ИдентификаторРаботы));
				Если НайденныеСтроки.Количество() > 0 Тогда
					Авторабота.ИдентификаторПричиныОбращения = НайденныеСтроки[0].ПричинаОбращения;
				Иначе
					Авторабота.ИдентификаторПричиныОбращения = ТаблицаПричинОбращения[0].ИдентификаторПричиныОбращения;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Автомобиль = Документ.СводныйРемонтныйЗаказ.Автомобиль;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Автомобиль",  Автомобиль);
		СтруктураОтбора.Вставить("ВидЗначения", Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер);
		ДатаЗаписи = Неопределено;
		СтруктураСведений = РегистрыСведений.Автомобили.ПолучитьПоследнее(ДатаЗаписи, СтруктураОтбора);
		
		ОбластьЗаголовок.Параметры.НомерДок = НомерДляПечати;
		ОбластьЗаголовок.Параметры.ДатаДок = Формат(ДатаПечатная, "ДФ = дд.ММ.гггг");
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ДляПечати = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ФирмаАдресЮридический = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Организация, Новый Структура("АдресЮридический"," "), ДополнительныеПараметры);
		
		ФирмаТелефоны = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Организация, Новый Структура("ТелефонРабочий"," "), ДополнительныеПараметры);
		
		ДополнительныеПараметры.ДляПечати = Ложь;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		ОбластьЗаголовок.Параметры.ПредставлениеПолучателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Контрагент, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		Если ЗначениеЗаполнено(Автомобиль) Тогда
			ОбластьАвтомобиль = Макет.ПолучитьОбласть("Автомобиль");
			ОбластьАвтомобиль.Параметры.ПредставлениеАвтомобиля = СокрЛП(Автомобиль.Наименование);
			ТабличныйДокумент.Вывести(ОбластьАвтомобиль);
		КонецЕсли;
		
		ОбластьДокументОснование.Параметры.ДокументОснование = Документ.Метаданные().Синоним + " № " + НомерДляПечати
			+ " от " + Формат(ДатаПечатная, "ДФ = dd.MM.yyyy");
		ТабличныйДокумент.Вывести(ОбластьДокументОснование);
		
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		
		ИтогоОбщаяСумма       = 0;
		ИтогоОбщаяСуммаНДС    = 0;
		ИтогоОбщаяСуммаСкидки = 0;
		
		ТабДокВрем = Новый ТабличныйДокумент;
		ТабДокВрем.ПолеСверху = 10;
		ТабДокВрем.ПолеСнизу  = 0;
		ТабДокВрем.ПолеСлева  = 0;
		ТабДокВрем.ПолеСправа = 0;
		
		Для Каждого ПричинаОбращения Из ТаблицаПричинОбращения Цикл
			
			ИтогРаботСумма       = 0;
			ИтогРаботСуммаНДС    = 0;
			ИтогРаботСуммаСкидки = 0;
			
			Если ЕстьПричиныОбращений Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ИдентификаторПричиныОбращения", ПричинаОбращения.ИдентификаторПричиныОбращения);
				ВыборкаТабличнойЧасти = ТаблицаРабот.НайтиСтроки(ПараметрыОтбора);
				ВыборакаТабличнойЧастиТовары = ТаблицаТоваров.НайтиСтроки(ПараметрыОтбора);
				ОбластьШапкаПричиныОбращения.Параметры.ПричинаОбращения           = ПричинаОбращения.ПричинаОбращения;
				ОбластьШапкаПричиныОбращения.Параметры.СодержаниеПричиныОбращения = ПричинаОбращения.ПричинаОбращенияСодержание;
				ТабличныйДокумент.Вывести(ОбластьШапкаПричиныОбращения);
			Иначе
				ВыборкаТабличнойЧасти = ТаблицаРабот;
				ВыборакаТабличнойЧастиТовары = ТаблицаТоваров;
			КонецЕсли;
			
			ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицы");
			//ТабличныйДокумент.Вывести(ОбластьШапка); 
			НомерСтроки = 1;
			Если НомерСтроки = 1 Тогда
				ТабДокВрем.Очистить();
				ТабДокВрем.Вывести(ОбластьШапка);
				ТабДокВрем.Вывести(ОбластьШапка);
				//ТабДокВрем.Вывести(ОбластьШапка);
				Если ЕстьПричиныОбращений Тогда
					ТабДокВрем.Вывести(ОбластьПодвалПричиныОбращения);
				КонецЕсли;
				Если НЕ ТабличныйДокумент.ПроверитьВывод(ТабДокВрем) Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Ремонт\обслуживание автомобиля Марка, модель: %1, VIN: %2, Гос. № %3'"),
					Автосервис.МаркаМодельАвтомобиля(Автомобиль), Автомобиль.VIN, СтруктураСведений.Значение);
					ОбластьШапка.Параметры.ТекстЗаголовка = ТекстЗаголовка;
					ОбластьШапка.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
					ТабличныйДокумент.Вывести(ОбластьШапка);
				ИначеЕсли НомерПричины <> 1 Тогда
					ТабличныйДокумент.Вывести(ОбластьШапка);
				КонецЕсли;
				Если НомерПричины = 1 Тогда
					ТабличныйДокумент.Вывести(ОбластьШапка);
				КонецЕсли;
			КонецЕсли;

			ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Ремонт\обслуживание автомобиля Марка, модель: %1, VIN: %2, Гос. № %3'"),
				Автосервис.МаркаМодельАвтомобиля(Автомобиль), Автомобиль.VIN, СтруктураСведений.Значение);
			// заполним параметры шапки таблицы для следующего листа
			ОбластьШапка.Параметры.ТекстЗаголовка = ТекстЗаголовка;
			ОбластьШапка.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			
			// Вывод табличной части работ
			Ном = 0;
			СтруктураИтоговПоСтранице = Новый Структура;
			СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", ВалютаПечатногоДокумента);
			СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
			СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
			СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
			
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьИтогПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
			РазрывПослеАвторабот = Ложь;
			
			Для Каждого СтрокаТабличнойЧасти Из ВыборкаТабличнойЧасти Цикл
				ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
				ОбластьСтрока.Параметры.Работа = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
					СтрокаТабличнойЧасти.Авторабота);
				ОбластьСтрока.Параметры.Количество = Формат(СтрокаТабличнойЧасти.Количество, ФорматВыводаКоличества);
				ОбластьСтрока.Параметры.Коэффициент = Формат(СтрокаТабличнойЧасти.Коэффициент, "ЧЦ=10; ЧДЦ=3");
				ОбластьСтрока.Параметры.Нормочас = СтрокаТабличнойЧасти.Нормочас;
				ОбластьСтрока.Параметры.Цена = Формат(СтрокаТабличнойЧасти.Цена, ФорматВыводаСуммы);
				
				Если ЕстьСкидка Тогда
					Скидка = СтрокаТабличнойЧасти.СуммаСкидки + СтрокаТабличнойЧасти.СуммаСкидкиСтроки
						+ СтрокаТабличнойЧасти.СуммаСкидкиБонусами;
					ОбластьСтрока.Параметры.СуммаСкидки = Формат(Скидка, ФорматВыводаСуммы);
				КонецЕсли;
				
				ОбластьСтрока.Параметры.СуммаВсего = Формат(СтрокаТабличнойЧасти.СуммаВсего, ФорматВыводаСуммы);
				ОбластьСтрока.Параметры.СуммаНДС = Формат(СтрокаТабличнойЧасти.СуммаНДС, ФорматВыводаСуммы);
				Если СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
					ОбластьСтрока.Параметры.СуммаНДС = "Без НДС";	
				КонецЕсли;

				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
					ОбластьШапка, ОбластьИтогПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ);
					
				// проверка на корректный вывод оставшейся части ПФ
				Если НомерСтроки = ВыборкаТабличнойЧасти.Количество() Тогда
					
					ТабДокВрем.Очистить();					
					ТабДокВрем.Вывести(ОбластьСтрока);
					ТабДокВрем.Вывести(ОбластьИтогПоСтранице); 
					ТабДокВрем.Вывести(ОбластьИтого);
					Если НомерПричины = ТаблицаПричинОбращения.Количество() Тогда
						ТабДокВрем.Вывести(ОбластьСуммаПрописью);
						ТабДокВрем.Вывести(ОбластьПодписи);
					КонецЕсли;
					// тут добавлена область шапка т.к как это одна строка высотой 1
					ТабДокВрем.Вывести(ОбластьШапка);
									
					Если НЕ ТабличныйДокумент.ПроверитьВывод(ТабДокВрем) Тогда
						РазрывПослеАвторабот = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
				МассивОбластейДляПроверки = Новый Массив;
				МассивОбластейДляПроверки.Добавить(ОбластьИтогПоСтранице);
				РезультатПроверки = ТабличныйДокумент.ПроверитьВывод(МассивОбластейДляПроверки);
				
				Если Не РезультатПроверки Тогда
					ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Области.Строка, ТипСмещенияТабличногоДокумента.ПоВертикали);
					
					УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент,ОбластьИтогПоСтранице,СтруктураИтоговПоСтранице,Документ); //выводим итог по странице
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц(); //переходим на следующую страницу
					НомерСтраницы = НомерСтраницы + 1;
					Если ОбластьШапка <> Неопределено Тогда
						ТабличныйДокумент.Вывести(ОбластьШапка); //выводим шапку таблицы
					КонецЕсли;
				
					НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
						ОбластьШапка, ОбластьИтогПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ);
				КонецЕсли;
				
				// инициализация итогов по странице
				Если НомерСтраницы <> НомерСтраницыПред Тогда
					СтруктураИтоговПоСтранице = Новый Структура;
					СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", ВалютаПечатногоДокумента);
					СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
					СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
					СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);

					НомерСтраницыПред = НомерСтраницы;
					ОбластьШапка.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
				КонецЕсли;
				НомерСтроки = НомерСтроки + 1;
				
				ИтогРаботСумма       = ИтогРаботСумма + СтрокаТабличнойЧасти.СуммаВсего;
				ИтогРаботСуммаНДС    = ИтогРаботСуммаНДС + СтрокаТабличнойЧасти.СуммаНДС;
				ИтогРаботСуммаСкидки = ИтогРаботСуммаСкидки + СтрокаТабличнойЧасти.СуммаСкидки 
					+ СтрокаТабличнойЧасти.СуммаСкидкиСтроки + СтрокаТабличнойЧасти.СуммаСкидкиБонусами;
				
				// обновим итоги по странице
				УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТабличнойЧасти, СтруктураИтоговПоСтранице);
			КонецЦикла; 
			
			СуммаВсегоТовары = 0;
			СуммаНДСТовары = 0;
			СуммаВсего = 0;
			СуммаНДС = 0;
			СуммаСкидкиТовары = 0;
			
			Если РазрывПослеАвторабот = Истина И НомерПричины = ТаблицаПричинОбращения.Количество() Тогда
				УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент,ОбластьИтогПоСтранице,СтруктураИтоговПоСтранице,Документ); //выводим итог по странице		
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьШапка);
			КонецЕсли;
			
			// Вывод данных из ТЧ "Товары"
			Для Каждого ТекущаяСтрока Из ВыборакаТабличнойЧастиТовары Цикл
				СуммаВсегоТовары = СуммаВсегоТовары + ТекущаяСтрока.СуммаВсего;
				СуммаНДСТовары = СуммаНДСТовары + ТекущаяСтрока.СуммаНДС;
				СуммаВсего= СуммаВсего + ТекущаяСтрока.СуммаВсего;
				СуммаНДС= СуммаНДС + ТекущаяСтрока.СуммаНДС;
				СуммаСкидкиТовары = СуммаСкидкиТовары + ТекущаяСтрока.СуммаСкидки + ТекущаяСтрока.СуммаСкидкиСтроки
					+ ТекущаяСтрока.СуммаСкидкиБонусами;
			
				ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
				ОбластьСтрока.Параметры.Работа = ТекущаяСтрока.Номенклатура.Наименование;
				ОбластьСтрока.Параметры.Количество = ТекущаяСтрока.Количество;
				ОбластьСтрока.Параметры.Цена = "-";  // ставим прочерки в полях
				ОбластьСтрока.Параметры.Коэффициент = "-"; // ставим прочерки в полях
				ОбластьСтрока.Параметры.Нормочас = "-"; // ставим прочерки в полях
				
				Если ЕстьСкидка Тогда
					ОбластьСтрока.Параметры.СуммаСкидки = Формат(ТекущаяСтрока.СуммаСкидки + ТекущаяСтрока.СуммаСкидкиСтроки
					+ ТекущаяСтрока.СуммаСкидкиБонусами, ФорматВыводаСуммы);
				КонецЕсли;
				ОбластьСтрока.Параметры.СуммаВсего = Формат( ТекущаяСтрока.СуммаВсего, ФорматВыводаСуммы);
				ОбластьСтрока.Параметры.СуммаНДС = Формат(ТекущаяСтрока.СуммаНДС, ФорматВыводаСуммы);			
				Если СуммаНДС = 0 Тогда
					ОбластьСтрока.Параметры.СуммаНДС = "Без НДС";	
				КонецЕсли;
				
				// обновим итоги по странице
				СуммыТовара = Новый Структура();
				СуммыТовара.Вставить("СуммаСкидки", ТекущаяСтрока.СуммаСкидки + ТекущаяСтрока.СуммаСкидкиСтроки
					+ ТекущаяСтрока.СуммаСкидкиБонусами);
				СуммыТовара.Вставить("СуммаВсего", ТекущаяСтрока.СуммаВсего);
				СуммыТовара.Вставить("СуммаНДС", ТекущаяСтрока.СуммаНДС);
				УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СуммыТовара, СтруктураИтоговПоСтранице);
				
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
					ОбластьШапка, ОбластьИтогПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ);
					
				МассивОбластейДляПроверки = Новый Массив;
				МассивОбластейДляПроверки.Добавить(ОбластьСтрока);
				МассивОбластейДляПроверки.Добавить(ОбластьИтогПоСтранице);
				РезультатПроверки = ТабличныйДокумент.ПроверитьВывод(МассивОбластейДляПроверки);
				
				Если Не РезультатПроверки Тогда
					ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Области.Строка, ТипСмещенияТабличногоДокумента.ПоВертикали);
					
					УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент,ОбластьИтогПоСтранице,СтруктураИтоговПоСтранице,Документ); //выводим итог по странице
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц(); //переходим на следующую страницу
					НомерСтраницы = НомерСтраницы + 1;
					Если ОбластьШапка <> Неопределено Тогда
						ТабличныйДокумент.Вывести(ОбластьШапка); //выводим шапку таблицы
					КонецЕсли;
				
					НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
						ОбластьШапка, ОбластьИтогПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ);
				КонецЕсли;
									
				// инициализация итогов по странице
				Если НомерСтраницы <> НомерСтраницыПред Тогда
					СтруктураИтоговПоСтранице = Новый Структура;
					СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", ВалютаПечатногоДокумента);
					СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
					СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
					СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
					НомерСтраницыПред = НомерСтраницы;
					ОбластьШапка.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
				КонецЕсли;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			
			Если ЕстьПричиныОбращений Тогда
				Если ЕстьСкидка Тогда
					ОбластьПодвалПричиныОбращения.Параметры.СуммаСкидки = Формат(ИтогРаботСуммаСкидки + СуммаСкидкиТовары,
						ФорматВыводаСуммы);
				КонецЕсли;
				ОбластьПодвалПричиныОбращения.Параметры.СуммаВсего = Формат(ИтогРаботСумма + СуммаВсегоТовары, ФорматВыводаСуммы);
				ОбластьПодвалПричиныОбращения.Параметры.СуммаНДС = Формат(ИтогРаботСуммаНДС + СуммаНДСТовары, ФорматВыводаСуммы);
				ОбластьПодвалПричиныОбращения.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
				ОбластьПодвалПричиныОбращения.Параметры.СуммаПрописью   = РаботаСКурсамиВалют.СформироватьСуммуПрописью(
					ИтогРаботСумма + СуммаВсегоТовары, ВалютаПечатногоДокумента);
				ТабличныйДокумент.Вывести(ОбластьПодвалПричиныОбращения);
			КонецЕсли;
			
			ИтогоОбщаяСумма       = ИтогоОбщаяСумма + ИтогРаботСумма + СуммаВсегоТовары;
			ИтогоОбщаяСуммаНДС    = ИтогоОбщаяСуммаНДС + ИтогРаботСуммаНДС + СуммаНДСТовары;
			ИтогоОбщаяСуммаСкидки = ИтогоОбщаяСуммаСкидки + ИтогРаботСуммаСкидки + СуммаСкидкиТовары;
			
			НомерПричины = НомерПричины + 1;
			
		КонецЦикла;
		
		// довыводим последний итог по странице, если страниц больше единицы
		Если НомерСтраницы > 2 И Не ЕстьПричиныОбращений Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		Если Не ЕстьПричиныОбращений Тогда
			ОбластьИтого = Макет.ПолучитьОбласть("Итого");
			Если ЕстьСкидка Тогда
				ОбластьИтого.Параметры.СуммаСкидки = Формат(ИтогоОбщаяСуммаСкидки, ФорматВыводаСуммы);
			КонецЕсли;
			
			ОбластьИтого.Параметры.СуммаВсего = Формат(ИтогоОбщаяСумма, ФорматВыводаСуммы);
			ОбластьИтого.Параметры.СуммаНДС = Формат(ИтогоОбщаяСуммаНДС, ФорматВыводаСуммы);
			ОбластьИтого.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
			ТабличныйДокумент.Вывести(ОбластьИтого);
		КонецЕсли;

		ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = СтрШаблон(
			НСтр("ru = 'Всего наименований %1 на сумму %2 %3 (в т.ч. НДС %4 %5)'"),
			ТаблицаРабот.Количество()+ ТаблицаТоваров.Количество(),
			Формат(ИтогоОбщаяСумма, ФорматВыводаСуммы),
			ВалютаПечатногоДокумента,
			Формат(ИтогоОбщаяСуммаНДС, ФорматВыводаСуммы),
			ВалютаПечатногоДокумента);
		ОбластьСуммаПрописью.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоОбщаяСумма,
			ВалютаПечатногоДокумента);
		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
		ОбластьПодписи.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил", "Отпустил"));
		ОбластьПодписи.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПолучилКонтрагент", "Получил"));
		
		Если НЕ ЗначениеЗаполнено(ОбластьПодписи.Параметры.ОтпустилПредставление) Тогда
			ОбластьПодписи.Параметры.ОтпустилПредставление = ?(ЗначениеЗаполнено(Документ.Мастер), "/ ", "")
				+ УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Мастер)
				+ ?(ЗначениеЗаполнено(Документ.Мастер), " /", "");
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьПодписи);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаряд_АктОбОказанииУслугУслугиТоварыРазвернуто";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПересчитатьТаблицуНаОснованииВзаиморасчетов(
		Документ,
		ТаблицаРабот,
		ТаблицаТоваров,
		РаспределениеСумм,
		ВалютаПечатногоДокумента)
	
	ПересчитаныСуммы = Ложь;
	
	ВалютаРегл = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаУпр = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	Если Не (ВалютаПечатногоДокумента = ВалютаРегл
			ИЛИ ВалютаПечатногоДокумента = ВалютаУпр) Тогда
		
		Возврат ПересчитаныСуммы;
		
	КонецЕсли;
	
	ТаблицаВзаиморасчетов =
		РасчетыСКонтрагентамиСервер.РасчетыСКонтрагентамиПоДокументу(Документ);
		
	ДатаДокумента = ?(ЗначениеЗаполнено(Документ.ДатаЗакрытия), Документ.ДатаЗакрытия, Документ.Дата);
	
	Если ТаблицаВзаиморасчетов.Количество() > 0 Тогда
		ТаблицаДляПересчета = ТаблицаРабот.Скопировать(, "НомерСтроки,СтавкаНДС,СуммаСкидки,Сумма,СуммаНДС,СуммаВсего");
		ТаблицаДляПересчета.Колонки.Добавить("ЭтоРабота", Новый ОписаниеТипов("Булево"));
		Для Каждого ТекущаяСтрока Из ТаблицаДляПересчета Цикл
			ТекущаяСтрока.ЭтоРабота = Истина;
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаТоваров, ТаблицаДляПересчета);
		
		РаспределениеСумм = ТаблицаДляПересчета.Скопировать();
		СуммыТоваров = РаспределениеСумм.ВыгрузитьКолонку("СуммаВсего");
		РаспределениеСумм.ЗагрузитьКолонку(СуммыТоваров, "Сумма");
		СведенияОВалюте = Новый Структура();
		СведенияОВалюте.Вставить("ВалютаДоговора", Неопределено);
		СведенияОВалюте.Вставить("ВалютаРегл", ВалютаРегл);
		СведенияОВалюте.Вставить("ВалютаУпр", ВалютаУпр);
		СведенияОВалюте.Вставить("КурсРегл", ДатаДокумента);
		СведенияОВалюте.Вставить("КурсУпр", ДатаДокумента);
		
		ПересчитаныСуммы = ОбработкаСобытийДокументаСервер.ПересчитанаВВалюту(
			Документ,
			РаспределениеСумм,
			ТаблицаВзаиморасчетов,
			СведенияОВалюте);
			
	КонецЕсли;
	
	Возврат ПересчитаныСуммы;
	
КонецФункции

Процедура ДополнитьПараметрыПересчетаДанных(ДокументОбъектСтруктура,
		ПересчитатьПоРасчетамСКонтрагентами,
		РаспределениеСумм,
		ДляАвторабот = Истина)
	
	Если Не ПересчитатьПоРасчетамСКонтрагентами Тогда
		Возврат;
	КонецЕсли;
	
	РаспределениеСуммАвторабот = РаспределениеСумм.Скопировать();
	УсловиеОтбора = Новый Структура("ЭтоРабота", Не ДляАвторабот);
	СтрокиРаспределения = РаспределениеСуммАвторабот.НайтиСтроки(УсловиеОтбора);
	Для Каждого ТекущаяСтрока Из СтрокиРаспределения Цикл
		РаспределениеСуммАвторабот.Удалить(ТекущаяСтрока);
	КонецЦикла;
	ДокументОбъектСтруктура.Вставить("РаспределениеСумм", РаспределениеСуммАвторабот);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения) Экспорт
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды печати могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по деталям производства
//
Функция ТоварыЗаполнитьДеталямиИзПроизводства(Объект, ПараметрыЗаполнения, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("НеРассчитыватьБонусы", Истина);
	
	ПересчитыватьСкидки = Ложь;
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеРассчитыватьСкидки", Ложь) Тогда
		ПересчитыватьСкидки = Истина;
		ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	КонецЕсли;
	
	// Получим причину обращения, для которой происходит заполнение ТЧ Товары
	ПричинаОбращения = ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗаполнения, "ИдентификаторПричиныОбращения");
	ЕстьПричинаОбращения = ?(ЗначениеЗаполнено(ПричинаОбращения), Истина, Ложь);
	
	ОчиститьСуммыСкидкиБонусами(Объект);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	             |	ТоварыВПроизводствеОстатки.Номенклатура КАК Номенклатура,
	             |	ТоварыВПроизводствеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |	СУММА(ТоварыВПроизводствеОстатки.КоличествоОстаток) КАК Количество,
	             |	МАКСИМУМ(ТоварыВПроизводствеОстатки.СкладИсточник) КАК СкладИсточник
	             |ИЗ
	             |	РегистрНакопления.ТоварыВПроизводстве.Остатки КАК ТоварыВПроизводствеОстатки
	             |ГДЕ
	             |	ТоварыВПроизводствеОстатки.ЗаказНаряд = &ЗаказНаряд
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ТоварыВПроизводствеОстатки.Номенклатура,
	             |	ТоварыВПроизводствеОстатки.ХарактеристикаНоменклатуры";
	
	Запрос.УстановитьПараметр("ЗаказНаряд", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Количество    = Выборка.Количество;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура",               Выборка.Номенклатура);
		ПараметрыОтбора.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);
		
		Если ЕстьПричинаОбращения Тогда
			ПараметрыОтбора.Вставить("ИдентификаторПричиныОбращения", ПричинаОбращения);
		КонецЕсли;
				
		СтрокиДеталей = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
		СтрокаДетали  = Неопределено;
		
		Для Каждого СтрокаДеталиТоваров Из СтрокиДеталей Цикл
			
			Если СтрокаДетали = Неопределено Тогда 
				СтрокаДетали  = СтрокаДеталиТоваров;
			КонецЕсли; 
			Количество = Количество - СтрокаДеталиТоваров.Количество;
		КонецЦикла; 
		
		Если СтрокаДетали = Неопределено Тогда
			СтрокаДетали                            = Объект.Товары.Добавить();
			СтрокаДетали.Номенклатура               = Выборка.Номенклатура;
			СтрокаДетали.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			
			Если ЕстьПричинаОбращения Тогда
				СтрокаДетали.ИдентификаторПричиныОбращения = ПричинаОбращения;
			КонецЕсли;
			
			СтрокаДетали.СкладКомпании = Выборка.СкладИсточник;
			ТоварыНоменклатураПриИзменении(Объект, СтрокаДетали, ПараметрыДействия);
			СтрокаДетали.Количество                 = 0;
			ТоварыКоличествоПриИзменении(Объект, СтрокаДетали, ПараметрыДействия);
		КонецЕсли;
		
		Если Количество>0 Тогда
			КоэфНоменклатуры        = СтрокаДетали.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент;
			СтрокаДетали.Количество = ?(КоэфНоменклатуры = 0,(СтрокаДетали.Количество+Количество),СтрокаДетали.Количество+(Количество/КоэфНоменклатуры));
			ТоварыКоличествоПриИзменении(Объект, СтрокаДетали, ПараметрыДействия);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПересчитыватьСкидки Тогда
		ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
		СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия);
	КонецЕсли;
	
	// Пересчет скидок по бонусам
	ПараметрыДействия.Удалить("НеРассчитыватьБонусы");
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецФункции // ТоварыЗаполнитьДеталямиИзПроизводства()

// Обработчик заполнения документа заказными деталями
//
Функция ТоварыЗаполнитьЗаказнымиДеталями(Объект, ПараметрыЗаполнения, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("НеРассчитыватьБонусы", Истина);
	
	ПересчитыватьСкидки = Ложь;
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеРассчитыватьСкидки", Ложь) Тогда
		ПересчитыватьСкидки = Истина;
		ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	КонецЕсли;
	
	// Получим причину обращения, для которой происходит заполнение ТЧ Товары
	ПричинаОбращения = ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗаполнения, "ИдентификаторПричиныОбращения");
	ЕстьПричинаОбращения = ?(ЗначениеЗаполнено(ПричинаОбращения), Истина, Ложь);
	
	ОчиститьСуммыСкидкиБонусами(Объект);
	
	Запрос = Новый Запрос;
	
	ДопОтбор = "";
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ДопОтбор = " Заказ.ДокументОснование = &ДокументОснование";
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
		И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ДопОтбор = ДопОтбор + ?(ДопОтбор = "", "", " ИЛИ ") + "Заказ = &ЗаказОснование";
	КонецЕсли;
	
	Если ДопОтбор = "" И Объект.ЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду Тогда
		Возврат Неопределено;
	ИначеЕсли ДопОтбор = "" Тогда
		ДопОтбор = "Контрагент = &Контрагент";
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.СкладКомпании КАК СкладКомпании,
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток КАК Количество,
	|	ЗаказыПокупателейОстатки.СуммаУпрОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(, " + ДопОтбор + ") КАК ЗаказыПокупателейОстатки
	|";
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("ЗаказОснование",    Объект.ДокументОснование);
	Запрос.УстановитьПараметр("Контрагент",        Объект.Контрагент);
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДетали                            = Объект.Товары.Добавить();
		СтрокаДетали.Номенклатура               = Выборка.Номенклатура;
		СтрокаДетали.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		
		Если ЕстьПричинаОбращения Тогда
			СтрокаДетали.ИдентификаторПричиныОбращения = ПричинаОбращения;
		КонецЕсли;
		
		СтрокаДетали.СкладКомпании = Выборка.СкладКомпании;
		ТоварыНоменклатураПриИзменении(Объект, СтрокаДетали, ПараметрыДействия);
		СтрокаДетали.Количество =
			Выборка.Количество / ?(НЕ ЗначениеЗаполнено(СтрокаДетали.Коэффициент), 1, СтрокаДетали.Коэффициент);
		СтрокаДетали.СуммаВсего =
			РаботаСКурсамиВалютПлатформа.
			ПересчетПоВалюте(Выборка.Сумма, ВалютаУпр, Объект.КурсВалютыУпр, Объект.ВалютаДокумента, Объект.КурсДокумента);
		
		ТоварыСуммаВсегоПриИзменении(Объект, СтрокаДетали, ПараметрыДействия);
	КонецЦикла;
	
	Если ПересчитыватьСкидки Тогда
		ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
		СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия);
	КонецЕсли;
	
	// Пересчет скидок по бонусам
	ПараметрыДействия.Удалить("НеРассчитыватьБонусы");
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецФункции // ТоварыЗаполнитьЗаказнымиДеталями()

// Обработчик заполнения документа красками из производства
//
Функция ТоварыЗаполнитьКраскамиИзПроизводства(Объект, ПараметрыЗаполнения, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("НеРассчитыватьБонусы", Истина);
	
	ПересчитыватьСкидки = Ложь;
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеРассчитыватьСкидки", Ложь) Тогда
		ПересчитыватьСкидки = Истина;
		ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	КонецЕсли;
	
	// Получим причину обращения, для которой происходит заполнение ТЧ Товары
	ПричинаОбращения = ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗаполнения, "ИдентификаторПричиныОбращения");
	ЕстьПричинаОбращения = ?(ЗначениеЗаполнено(ПричинаОбращения), Истина, Ложь);
	
	ОчиститьСуммыСкидкиБонусами(Объект);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыВПроизводствеОстатки.Номенклатура КАК Номенклатура,
	               |	ТоварыВПроизводствеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	СУММА(ТоварыВПроизводствеОстатки.КоличествоОстаток) КАК Количество
	               |ИЗ
	               |	РегистрНакопления.ТоварыВПроизводстве.Остатки(
	               |			,
	               |			ЗаказНаряд = &ЗаказНаряд
	               |				И Номенклатура.ВидНоменклатуры = &ЛКМ) КАК ТоварыВПроизводствеОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТоварыВПроизводствеОстатки.Номенклатура,
	               |	ТоварыВПроизводствеОстатки.ХарактеристикаНоменклатуры";
	
	Запрос.УстановитьПараметр("ЗаказНаряд", Объект.Ссылка);
	Запрос.УстановитьПараметр("ЛКМ",        Перечисления.ВидыНоменклатуры.ЛКМ);
	
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Количество    = Выборка.Количество;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура",               Выборка.Номенклатура);
		ПараметрыОтбора.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);
		
		Если ЕстьПричинаОбращения Тогда
			ПараметрыОтбора.Вставить("ИдентификаторПричиныОбращения", ПричинаОбращения);
		КонецЕсли;
		
		СтрокиДеталей = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
		СтрокаДетали  = Неопределено;
		
		Для Каждого СтрокаДеталиТоваров Из СтрокиДеталей Цикл
			Если СтрокаДетали = Неопределено Тогда
				СтрокаДетали = СтрокаДеталиТоваров;
			КонецЕсли; 
			Количество = Количество - СтрокаДеталиТоваров.Количество;
		КонецЦикла; 
		Если СтрокаДетали = Неопределено Тогда
			СтрокаДетали                            = Объект.Товары.Добавить();
			СтрокаДетали.Номенклатура               = Выборка.Номенклатура;
			СтрокаДетали.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			
			Если ЕстьПричинаОбращения Тогда
				СтрокаДетали.ИдентификаторПричиныОбращения = ПричинаОбращения;
			КонецЕсли;
			
			СтрокаДетали.СкладКомпании = ПраваИНастройкиПользователя.Значение("ОсновнойСкладКомпании", Объект);
			ТоварыНоменклатураПриИзменении(Объект, СтрокаДетали, ПараметрыДействия);
			СтрокаДетали.Количество                 = 0;
			ТоварыКоличествоПриИзменении(Объект, СтрокаДетали, ПараметрыДействия);
		КонецЕсли;
		
		Если Количество > 0 Тогда
			КоэфНоменклатуры        = СтрокаДетали.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент;
			СтрокаДетали.Количество = ?(КоэфНоменклатуры = 0,
					(СтрокаДетали.Количество + Количество), СтрокаДетали.Количество + (Количество / КоэфНоменклатуры));
			ТоварыКоличествоПриИзменении(Объект, СтрокаДетали, ПараметрыДействия);
		КонецЕсли;
	КонецЦикла;
	
	Если ПересчитыватьСкидки Тогда
		ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
		СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия);
	КонецЕсли;
	
	// Пересчет скидок по бонусам
	ПараметрыДействия.Удалить("НеРассчитыватьБонусы");
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецФункции // ТоварыЗаполнитьКраскамиИзПроизводства()

// Формирование перемещений в производство по заказ-наряду
// Параметры
//  ВопросОПеремещении  - Булево - Задание вопроса о необходимости формирования перемещения.
// Возвращаемое значение:
//  Булево   - Успешность формирования перемещений.
Функция СформироватьПеремещенияВПроизводство(Форма, ВопросОПеремещении = Истина) Экспорт
	
	Объект = Форма.Объект; 
	
	Если Объект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен
		ИЛИ Объект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Перемещение в производство по закрытому или выполненному заказ-наряду недопустимо.'"));
		Возврат Ложь;
	КонецЕсли;
	
	// Запретим создание перемещения, если заказ-наряд в состоянии "Заявка"
	Если Объект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Заявка Тогда
		Возврат Ложь;
	КонецЕсли;
	
		
	РезультатПеремещения = Истина;
	ТабСкладов = Объект.Товары.Выгрузить();
	ТабСкладов.Свернуть("СкладКомпании");
	ТаблицаМатериалов = Объект.Материалы.Выгрузить();
	ТаблицаМатериалов.Свернуть("СкладКомпании");
	Для Каждого ТекСтрока Из ТаблицаМатериалов Цикл
		Если ТабСкладов.Найти(ТекСтрока.СкладКомпании, "СкладКомпании") = Неопределено Тогда
			НоваяСтрока = ТабСкладов.Добавить();
			НоваяСтрока.СкладКомпании = ТекСтрока.СкладКомпании;
		КонецЕсли;
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Для каждого Склад Из ТабСкладов Цикл
		Если Склад.СкладКомпании = Неопределено ИЛИ Склад.СкладКомпании=Справочники.СкладыКомпании.ПустаяСсылка() Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'В некоторых строках табличной части Товары не заполнен склад, перемещение в производство данных позиций выполнить невозможно.'")
			);
			Продолжить;
		КонецЕсли;
		НовоеПеремещениеВПроизводство = Документы.ПеремещениеТоваровВПроизводство.СоздатьДокумент();
		НовоеПеремещениеВПроизводство.Дата = ТекущаяДатаСеанса();
		НовоеПеремещениеВПроизводство.СкладКомпании = Склад.СкладКомпании;
		НовоеПеремещениеВПроизводство.Заполнить(Объект.Ссылка);
		Если НовоеПеремещениеВПроизводство.Товары.Количество() > 0 Тогда
			Попытка
				Если ПраваИНастройкиПользователя.Значение("ПеремещениеДеталейВПроизводство", Объект) Тогда
					Если НЕ НовоеПеремещениеВПроизводство.ПроверитьЗаполнение() Тогда
						ВызватьИсключение "";
					КонецЕсли;
					НовоеПеремещениеВПроизводство.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'Сформирован и проведен документ перемещения в производство <%1>.'"),
							СокрЛП(НовоеПеремещениеВПроизводство)
						)
					);
				Иначе
					НовоеПеремещениеВПроизводство.Записать(РежимЗаписиДокумента.Запись);
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'Сформирован документ перемещения в производство <%1>. Провести его позднее может уполномоченное на это лицо.'"), // BSLLS:LineLength-off
							СокрЛП(НовоеПеремещениеВПроизводство)
						)
					);
				КонецЕсли;
				
				// Создадим новый штрихкод
				Если НЕ ЗначениеЗаполнено(Форма.Штрихкод) Тогда
					
					ШтрихКод = ШтрихкодированиеВызовСервера.СформироватьНовыйШтрихкод(Объект);
					
					// Запишем автоматически сформированный штрихкод
					СтруктураШтрихкод = Новый Структура("Штрихкод,Запрет", ШтрихКод, Ложь);
					ШтрихкодЗаписан = ШтрихкодированиеВызовСервера.ЗаписатьШтрихкоды(Объект.Ссылка, СтруктураШтрихкод);
					Если НЕ ШтрихкодЗаписан Тогда
						ТекстОшибки = НСтр("ru = 'Ошибка записи штрихкода документа.'");
						ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
						ВызватьИсключение ТекстОшибки;
					Иначе
						Форма.Штрихкод = Штрихкод;
						ОбщегоНазначения.СообщитьПользователю(
							СтрШаблон(НСтр("ru = 'Документу <%1> присвоен штрихкод <%2>.'"), Объект.Ссылка, ШтрихКод));
					КонецЕсли;
					
				КонецЕсли;
				
			Исключение
				ОтменитьТранзакцию();
				Если НЕ ЗначениеЗаполнено(НовоеПеремещениеВПроизводство.Ссылка) Тогда
					ОбщегоНазначения.СообщитьПользователю(
						НСтр("ru = 'Документ перемещение в производство не сформирован.'")
					);
				ИначеЕсли ПраваИНастройкиПользователя.Значение("ПеремещениеДеталейВПроизводство", Объект) Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'Ошибка проведения документа перемещения в производство <%1>.'"),
							СокрЛП(НовоеПеремещениеВПроизводство)
						)
					);
				Иначе
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'Ошибка записи документа перемещения в производство <%1>.'"),
							СокрЛП(НовоеПеремещениеВПроизводство)
						)
					);
				КонецЕсли;
				РезультатПеремещения = Ложь;
				Прервать;
			КонецПопытки; 
		КонецЕсли; 
	КонецЦикла;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Возврат РезультатПеремещения;
	
КонецФункции // СформироватьПеремещенияВПроизводство()

#КонецОбласти

#КонецОбласти
	
#КонецЕсли
