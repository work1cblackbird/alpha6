
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает дату документа по состоянию:
//  закрыт - дата закрытия;
//  выполнен - дата окончания;
//  прочее - дата документа.
//
// Параметры:
//  СостояниеНаряда - СправочникСсылка.ВидыСостоянийЗаказНарядов - Состояние документа.
// 
// Возвращаемое значение:
//  Дата
//
Функция ПолучитьДатуДокумента(СостояниеНаряда = Неопределено) Экспорт
	
	Если СостояниеНаряда = Неопределено Тогда
		СостояниеНаряда = Состояние;
	КонецЕсли;
	
	Результат = Дата;
	Если СостояниеНаряда = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда 
		Результат = ДатаЗакрытия;
	ИначеЕсли СостояниеНаряда = Справочники.ВидыСостоянийЗаказНарядов.Выполнен Тогда
		Результат = ДатаОкончания;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА) Экспорт
	
	ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ЭтотОбъект);
	
	ПрерватьЗаполнение = НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если ПрерватьЗаполнение Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка);
	КонецЕсли;

	Если ЭтоНовый() Тогда
		
		ДатаНачала         = Неопределено;
		ДатаОкончания      = Неопределено;
		ДатаЗакрытия       = Неопределено;
		ПлановаяДатаВыдачи = Неопределено;
		ДатаСледующегоТО   = Неопределено;
		Состояние          = Неопределено;
		
	КонецЕсли;

	Если ОбработкаСобытийДокументаСервер.ВводСПустымОснованием(ДанныеЗаполнения) И ЭтоНовый() Тогда
		
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Документы.ЗаказНаряд.КонтрагентПриИзменении(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
		СкидкаНаценка = Справочники.ТипыСкидок.ПустаяСсылка();
		Документы.ЗаказНаряд.СкидкаНаценкаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
		СкидкаНаценкаРаботы = Справочники.ТипыСкидок.ПустаяСсылка();
		Документы.ЗаказНаряд.СкидкаНаценкаРаботыПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
		
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ТипЦен) Тогда

		ТипЦен = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенПродажи", ЭтотОбъект);

	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТипЦенРабот) Тогда

		ТипЦенРабот = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенРабот", ЭтотОбъект);

	КонецЕсли;

	ОсновнойСкладКомпании = ПраваИНастройкиПользователя.Значение("ОсновнойСкладКомпании", ЭтотОбъект);
	ИсточникПродажиПоУмолчанию = ПраваИНастройкиПользователя.Значение("ИсточникПродажиПоУмолчанию", ЭтотОбъект);

	Для Каждого СтрокаТоваров Из Товары Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТоваров.СкладКомпании) Тогда

			СтрокаТоваров.СкладКомпании = ОсновнойСкладКомпании;

		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТоваров.ИсточникПродажи) Тогда

			СтрокаТоваров.ИсточникПродажи = ИсточникПродажиПоУмолчанию;

		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Авторабота Из Автоработы Цикл

		Если Не ЗначениеЗаполнено(Авторабота.ИсточникПродажи) Тогда

			Авторабота.ИсточникПродажи = ИсточникПродажиПоУмолчанию;

		КонецЕсли;

	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Состояние) Тогда

		Состояние = Справочники.ВидыСостоянийЗаказНарядов.Заявка;

	КонецЕсли;

	Если ЭтоНовый() Тогда

		Если Не ЗначениеЗаполнено(ВидРемонта) Тогда

			ВидРемонта = ПраваИНастройкиПользователя.Значение("ВидРемонтаПоУмолчанию", ЭтотОбъект);

			Если Не ЗначениеЗаполнено(ВидРемонта) Тогда

				ВидРемонта = Справочники.ВидыРемонта.ДополнительноеОборудование;

			КонецЕсли;

		КонецЕсли;

		Документы.ЗаказНаряд.ВидРемонтаПриИзменении(ЭтотОбъект);

		Если Не ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ПропуститьЗаполнениеСвязанныхРабот", Ложь) Тогда

			СвязанныеРаботы.ЗаполнитьАвтоработыПоВидуРемонтаПриСозданииНовогоДокумента(ЭтотОбъект);

		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Цех) Тогда

			Цех = ПраваИНастройкиПользователя.Значение("ОсновнойЦех", ЭтотОбъект);
			Документы.ЗаказНаряд.ЦехПриИзменении(ЭтотОбъект);

		КонецЕсли;

		Если Не ЗначениеЗаполнено(Гарантии) Тогда

			Гарантии = ПраваИНастройкиПользователя.Значение("ГарантииНаРемонт", ЭтотОбъект);

		КонецЕсли;

		// Пробег автомобиля берем на дату заказ-наряда
		// Если в регистре нет сведений о пробеге на эту дату, то остается как в основании
		ДатаПробега = ?(ЗначениеЗаполнено(ЭтотОбъект.ДатаНачала), ЭтотОбъект.ДатаНачала, ЭтотОбъект.Дата);
		АктуальныйПробег = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
			ЭтотОбъект.СводныйРемонтныйЗаказ.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег, ДатаПробега);
		Если АктуальныйПробег <> Неопределено И АктуальныйПробег <> 0 Тогда
			ЭтотОбъект.Пробег = АктуальныйПробег;
		КонецЕсли;
			
	КонецЕсли;
	
	ЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду = УчетныеПолитикиСервер.Значение("ЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду",
		ТекущаяДатаСеанса(),ПодразделениеКомпании);
	
	ИдентификаторГосударственногоКонтракта = ?(ЗначениеЗаполнено(ИдентификаторГосударственногоКонтракта),
		ИдентификаторГосударственногоКонтракта,
		ДоговорВзаиморасчетов.ИдентификаторГосударственногоКонтракта);
		
	ЗаполнитьНастройкиОтправкиЗаказНарядаПоЭДО();
	
	ЗачетАвансов.Очистить();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ЭтотОбъект, Истина);
	
	Если Не ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ПропуститьЗаполнениеСвязанныхРабот", Истина);
	Заполнить(ОбъектКопирования.Ссылка);
	ДополнительныеСвойства.Удалить("ПропуститьЗаполнениеСвязанныхРабот");
	
	Если НЕ ПолучитьФункциональнуюОпцию("АвтоматическиСоздаватьСводныйРемонтныйЗаказ") Тогда
		СводныйРемонтныйЗаказ =  Документы.СводныйРемонтныйЗаказ.ПустаяСсылка();
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл 
		СтрокаТЧ.АвторСтроки = Пользователи.ТекущийПользователь();
		СтрокаТЧ.АвторИзмененияСтроки = Пользователи.ТекущийПользователь();
	КонецЦикла;
	Для Каждого СтрокаТЧ Из ЭтотОбъект.Автоработы Цикл 
		СтрокаТЧ.АвторСтроки = Пользователи.ТекущийПользователь();
		СтрокаТЧ.АвторИзмененияСтроки = Пользователи.ТекущийПользователь();
	КонецЦикла;
	Для Каждого СтрокаТЧ Из ЭтотОбъект.МатериалыЗаказчика Цикл 
		СтрокаТЧ.АвторСтроки = Пользователи.ТекущийПользователь();
		СтрокаТЧ.АвторИзмененияСтроки = Пользователи.ТекущийПользователь();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		
		Возврат;
		
	КонецЕсли;

	Если ДополнительныеСвойства.Свойство("РежимЗаписиСводныйРемонтныйЗаказ") = Ложь Тогда
		Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", ЭтотОбъект) Тогда
			Если НЕ ЗначениеЗаполнено(Товары) И НЕ ЗначениеЗаполнено(Автоработы) Тогда
				ПроверяемыеРеквизиты.Добавить("Товары");
				ПроверяемыеРеквизиты.Добавить("Автоработы");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Отказ Или ПроверитьПараметрыЗапретаВыбораНоменклатуры();
	
	Отказ = Отказ ИЛИ ОбработкаСобытийДокументаСервер.ПроверитьКорректностьРеализацииПодакцизныхТоваров(ЭтотОбъект, "Товары"); 
	
	Отказ = Отказ ИЛИ ОбработкаСобытийДокументаСервер.ПроверитьКорректностьРеализацииПодакцизныхТоваров(ЭтотОбъект, "Материалы");

	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) И ДатаНачала > ДатаОкончания Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Дата начала заказ-наряда более даты его окончания.'"),
			ЭтотОбъект,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОкончания) И ЗначениеЗаполнено(ДатаЗакрытия) И ДатаОкончания > ДатаЗакрытия Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Дата окончания работ по заказ-наряду более даты его закрытия.'"),
			ЭтотОбъект,
			"ДатаОкончания",
			,
			Отказ
		);
		
	ИначеЕсли
		ЗначениеЗаполнено(ДатаОкончания)
		И Не ЗначениеЗаполнено(ДатаЗакрытия)
		И Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт
		И ДатаОкончания > ТекущаяДатаСеанса()
	Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Дата окончания работ по заказ-наряду более даты его закрытия.'"),
			ЭтотОбъект,
			"ДатаОкончания",
			,
			Отказ
		);
		
	КонецЕсли;
	
	// Проверяем только выполненные заказ-наряды
	Если Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен
		ИЛИ Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
		
		Для Каждого СтрокаРабот Из Автоработы Цикл
			
			Если ЗначениеЗаполнено(СтрокаРабот.Контрагент) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НомерИсполнителя   = 0;
			ПроцентУчастия     = 0;
			СтрокиИсполнителей = Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", СтрокаРабот.ИдентификаторРаботы));
			
			Для Каждого СтрокаИсполнителей Из СтрокиИсполнителей Цикл
				
				НомерИсполнителя = НомерИсполнителя + 1;
				ПроцентУчастия   = ПроцентУчастия + СтрокаИсполнителей.Процент;
				
				Если ЗначениеЗаполнено(СтрокаИсполнителей.Исполнитель) Тогда
					
					ТекущийИсполнитель = СокрЛП(СтрокаИсполнителей.Исполнитель);
					
				Иначе
					
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru='Для работы <%1> в строке <%2> не указан исполнитель.'"),
							СокрЛП(СтрокаРабот.Авторабота),
							Формат(НомерИсполнителя, "ЧДЦ=0")
						),
						ЭтотОбъект,
						,
						,
						Отказ
					);
						
					ТекущийИсполнитель = "Не задан";
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаИсполнителей.Цех) Тогда
					
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru='Для работы <%1> у исполнителя <%2> не задан цех выполнения работы.'"),
							СокрЛП(СтрокаРабот.Авторабота),
							ТекущийИсполнитель
						),
						ЭтотОбъект,
						,
						,
						Отказ
					);
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаИсполнителей.Процент) Тогда
					
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru='Для работы <%1> у исполнителя <%2> не задан процент участия.'"),
							СокрЛП(СтрокаРабот.Авторабота),
							ТекущийИсполнитель
						),
						ЭтотОбъект,
						,
						,
						Отказ
					);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НомерИсполнителя = 0 Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru='Для работы <%1> не задано ни одного исполнителя.'"),
						СокрЛП(СтрокаРабот.Авторабота)
					),
					ЭтотОбъект,
					,
					,
					Отказ
				);
				
			ИначеЕсли ПроцентУчастия<>100 Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru='% участия исполнителей для работы <%1> отличается от 100%. Необходимо проверить и устранить расхождения.'"),
						СокрЛП(СтрокаРабот.Авторабота)
					),
					ЭтотОбъект,
					,
					,
					Отказ
				);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Автосервис.ДоступноНачислениеСотрудникам() Тогда
			АвтосервисКлиентСервер.ПроверитьЗаполнениеПараметровРасчетаНачислений(
				Исполнители,
				Автоработы,
				Отказ);
		КонецЕсли;
		
		// Проверка заполнения тч "Материалы заказчика"
		Для Каждого СтрокаМатериаловЗаказчика Из МатериалыЗаказчика Цикл
			
			Если ТипЗнч(СтрокаМатериаловЗаказчика.Номенклатура) = Тип("СправочникСсылка.Номенклатура") 
				И НЕ ЗначениеЗаполнено(СтрокаМатериаловЗаказчика.ЕдиницаИзмерения)
				И НЕ ЗначениеЗаполнено(СтрокаМатериаловЗаказчика.Коэффициент) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru='Для материала заказчика <%1> не указана единица измерения или коэффициент.'"),
						СокрЛП(Строка(СтрокаМатериаловЗаказчика.Номенклатура))
					),
					ЭтотОбъект,
					,
					,
					Отказ
				);
				
			КонецЕсли;
			
		КонецЦикла;
		
		РасчетыСКонтрагентамиСервер.ПроверитьКорректностьЗачетаАвансов(ЭтотОбъект, Отказ);
		
	КонецЕсли;
	
	Автосервис.ПроверитьЗаполнениеНормачасаАвтоработы(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Если Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
		
		Если Не ЗначениеЗаполнено(ДатаЗакрытия) Тогда
			
			ДатаЗакрытия = ТекущаяДатаСеанса();
			
		КонецЕсли;
		
	Иначе
		
		ДополнительныеСвойства.Вставить("ДатаДокумента", ПолучитьДатуДокумента(Ссылка.Состояние));
		ДатаЗакрытия = Неопределено;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("СтароеЗначениеСервиснойКомпании", ДайСтароеЗначениеСервиснойКомпании());
	
	Если ПолучитьФункциональнуюОпцию("АвтоматическиСоздаватьСводныйРемонтныйЗаказ")
		И НЕ ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ПреверятьСводныйЗаказНаряд", Ложь)
		И НЕ ЗначениеЗаполнено(СводныйРемонтныйЗаказ) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Поле ""Сводный ремонтный заказ"" не заполнено'"),
			ЭтотОбъект,
			"СводныйРемонтныйЗаказ",, Отказ);
		
	КонецЕсли;
	
	ПустаяДатаОперации = Не ЗначениеЗаполнено(ДатаОперации);
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ПроверятьПоследовательность", Ложь);
	
	ТекСостояние=Неопределено;
	Если (НЕ Ссылка.Пустая()) И (Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт) Тогда
		
		Запрос=Новый Запрос;
		
		Запрос.Текст="ВЫБРАТЬ
		|	ЗаказНаряд.Состояние
		|ИЗ
		|	Документ.ЗаказНаряд КАК ЗаказНаряд
		|ГДЕ
		|	ЗаказНаряд.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ТекСостояние = Выборка.Состояние;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Состояние=Справочники.ВидыСостоянийЗаказНарядов.Закрыт
		И ТекСостояние<>Справочники.ВидыСостоянийЗаказНарядов.Закрыт
		И ТекСостояние<>Справочники.ВидыСостоянийЗаказНарядов.Выполнен Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Перевод заказ-наряда в состояние ""Закрыт"" возможен только из состояния ""Выполнен"".'"),
			ЭтотОбъект,
			,, 
			Отказ
		);
		Возврат;
	КонецЕсли;
	
	Если Ссылка.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт И 
		(НЕ РежимЗаписи = РежимЗаписиДокумента.Проведение) И 
		(НЕ ПраваИНастройкиПользователя.Значение("РедактированиеЗакрытыхЗаказНарядов", ЭтотОбъект)) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Нет права на редактирование закрытых заказ-нарядов.'"), ЭтотОбъект,,, Отказ
		);
		Возврат;
	КонецЕсли;
	
	// Если состояние заказ-наряда отлично от "заявки" и дата начала работ не заполнена - установим текущую дату.
	Если Состояние <> Справочники.ВидыСостоянийЗаказНарядов.Заявка И Не ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Запись И Состояние <> Справочники.ВидыСостоянийЗаказНарядов.Заявка Тогда
		
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Если Не ПроверитьЗаполнение() Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение
		И Состояние = Справочники.ВидыСостоянийЗаказНарядов.Заявка Тогда
		
		ОбработкаУдаленияПроведения(Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		РежимЗаписи     = РежимЗаписиДокумента.Запись;
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
		Проведен        = Ложь;
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
		И Состояние <> Справочники.ВидыСостоянийЗаказНарядов.Заявка Тогда
		
		Состояние = Справочники.ВидыСостоянийЗаказНарядов.Заявка;
		
	КонецЕсли;
	
	// Если состояние заказ-наряда "выполнен" или "закрыт" и дата окончания работ не заполнена - установим текущую дату.
	Если
		НЕ ЗначениеЗаполнено(ДатаОкончания)
		И (Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен
			ИЛИ Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт)
	Тогда
			
		ДатаОкончания = ТекущаяДатаСеанса();

	КонецЕсли;
	
	СуммаНоменклатурыДокумента = Товары.Итог("СуммаВсего");
	СуммаРаботДокумента        = Автоработы.Итог("СуммаВсего");
	СуммаДокумента             = СуммаНоменклатурыДокумента + СуммаРаботДокумента;
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Если Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
			Состояние = Справочники.ВидыСостоянийЗаказНарядов.ВРаботе;
			ДополнительныеСвойства.Вставить("ДатаДокумента", ПолучитьДатуДокумента(Ссылка.Состояние));
			ДатаОкончания = Неопределено;
			ДатаЗакрытия  = Неопределено;
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ ДатаПодчиненныхДокументовКорректна() Тогда
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	// Проверка блокировки от изменений заказ-наряда
	БлокировкаЗаказНаряда = РегистрыСведений.БлокировкаЗаказНарядов.ПроверкаБлокировкиИзменений(Ссылка);
	
	Если БлокировкаЗаказНаряда.Количество() > 0 И Модифицированность() Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Документ ""%1"" заблокирован от изменений пользователем ""%2"".'"),
				Ссылка, 
				БлокировкаЗаказНаряда[0].Пользователь
			),
			ЭтотОбъект,
			,, Отказ
		);
		Возврат;
	КонецЕсли;
	
	НормочасРубль = Справочники.Нормочасы.Рубль;
	
	НовоеВремяВыполненияРабот = 0;
	Для Каждого СтрокаРабот Из Автоработы Цикл
		Если СтрокаРабот.Нормочас <> НормочасРубль Тогда
			НовоеВремяВыполненияРабот = НовоеВремяВыполненияРабот+(СтрокаРабот.Коэффициент*СтрокаРабот.Количество);
		КонецЕсли;
	КонецЦикла;
	
	Если НовоеВремяВыполненияРабот <> ВремяВыполненияРабот Тогда
		ВремяВыполненияРабот = НовоеВремяВыполненияРабот;
	КонецЕсли;
	
	Если
		БонусныеПрограммыСервер.ДисконтнаяКартаЗаблокирована(Карточка)
		И (ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ПроверятьБлокировкуКарты", Ложь)
			ИЛИ КоличествоКНачислению = 0)
	Тогда
	
		КоличествоКНачислению = 0;
		
	Иначе
		
		БонусныеПрограммыСервер.РассчитатьБонусныеБаллыКНачислению(ЭтотОбъект, Карточка.БонуснаяПрограмма);
		
	КонецЕсли;
	
	// Получим старые значения, влияющие на границы последовательности
	Если НЕ Отказ И Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ МоментВремени, Состояние, ДатаОкончания, ДатаЗакрытия ИЗ Документ."+Метаданные().Имя+" ГДЕ Ссылка=&Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		СтрокаРезультата = Запрос.Выполнить().Выгрузить().Получить(0);
		
		Если СтрокаРезультата.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт ИЛИ 
			Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
			
			Если СтрокаРезультата.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда 
				ДополнительныеСвойства.Вставить("МоментВремениБыл", Новый МоментВремени(СтрокаРезультата.ДатаЗакрытия, Ссылка));
			Иначе
				ДополнительныеСвойства.Вставить("МоментВремениБыл", Новый МоментВремени(Дата("39991231"), Ссылка));
			КонецЕсли;
			
			ДополнительныеСвойства.Вставить("ПроверятьПоследовательность", Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоОстаткамАвтомобилейПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоКомплектацииПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПроизводствуПередПроведением(Ссылка, ДополнительныеСвойства);
	
	Если ВидРемонта.ТехОбслуживание И ЗначениеЗаполнено(СводныйРемонтныйЗаказ.Автомобиль) Тогда
		
		МежсервисныйТОАвтомобиля = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СводныйРемонтныйЗаказ.Автомобиль,
			"ВариантКомплектации.МежсервисныйПробегТО,ВариантКомплектации.МежсервисныйИнтервалТО,Модель.МежсервисныйПробегТО,Модель.МежсервисныйИнтервалТО"
		);
		
		МежсервисныйПробегТО = ?(ЗначениеЗаполнено(МежсервисныйТОАвтомобиля.ВариантКомплектацииМежсервисныйПробегТО),
			МежсервисныйТОАвтомобиля.ВариантКомплектацииМежсервисныйПробегТО,
			МежсервисныйТОАвтомобиля.МодельМежсервисныйПробегТО);
			
		ПробегСледующегоТО = ЭтотОбъект.Пробег + МежсервисныйПробегТО;
		
		ДатаОтсчета = ?(ЗначениеЗаполнено(ДатаОкончания), ДатаОкончания, Дата);
		МежсервисныйИнтервалТО = ?(ЗначениеЗаполнено(МежсервисныйТОАвтомобиля.ВариантКомплектацииМежсервисныйИнтервалТО),
			МежсервисныйТОАвтомобиля.ВариантКомплектацииМежсервисныйИнтервалТО,
			МежсервисныйТОАвтомобиля.МодельМежсервисныйИнтервалТО);
			
		ДатаСледующегоТО = ДобавитьМесяц(ДатаОтсчета, МежсервисныйИнтервалТО);
		
		РегистрыСведений.ЗапланированныеТО.ЗаписьЗначенияРегистраСведения(СводныйРемонтныйЗаказ.Автомобиль, ЭтотОбъект);
		
	ИначеЕсли ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный Тогда	 
		Контрагент 				= Справочники.Контрагенты.ПустаяСсылка();
		ДоговорВзаиморасчетов 	= Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	Иначе
		ПробегСледующегоТО = 0;
		ДатаСледующегоТО   = Дата(1, 1, 1);
	КонецЕсли;
	
	ЭтоУниверсальныйДокумент = ЭтоУниверсальныйДокумент
		И Документы.ЗаказНаряд.ВозможенВводСчетФактурыВыданной(ЭтотОбъект);
	
	Если Отказ Тогда
		ДополнительныеСвойства.Вставить("ДатаДокумента", ПолучитьДатуДокумента(Ссылка.Состояние));
		ДатаОкончания = Неопределено;
		ДатаЗакрытия  = Неопределено;
	ИначеЕсли ПустаяДатаОперации И ЗначениеЗаполнено(ДатаОперации) Тогда
		ТипРемонта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРемонта, "ТипРемонта");
		ЭтоКомплектацияАвтомобиля = ТипРемонта = Перечисления.ТипыРемонта.КомплектацияАвтомобиля;
		ЭтоСборкаАвтомобиля = ТипРемонта = Перечисления.ТипыРемонта.СборкаАвтомобиля;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЦентрМониторинга")
			И (ЭтоКомплектацияАвтомобиля
			ИЛИ ЭтоСборкаАвтомобиля) Тогда 
			
			ИмяОперации = СтрШаблон("АльфаАвтосервисАвтосалон6.ЗаказНаряд.%1",
				?(ЭтоСборкаАвтомобиля, "СборкаАвтомобиля", "КомплектацияАвтомобиля"));
			МодульЦентрМониторинга = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторинга");
			МодульЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(
				ИмяОперации,
				1);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Отказ = Отказ Или ОбновитьПланированиеДокумента() Или ОбновитьСоставПричинОбращения();
	ОбновитьСоставПакетовРабот();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПроверитьДоступностьВыполненияЗакакзНарядаПоУРВ(Отказ);
	
	Отказ = Отказ Или НовоеСостояние() Или ОбновитьСтатусВыполненияСервисныхКомпаний();
	
	Если Не ДополнительныеСвойства.Свойство("НеЗаписыватьПробег")
		 И ЭтотОбъект.ПометкаУдаления = Ложь Тогда
		
		Отказ = Отказ Или Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(
			СводныйРемонтныйЗаказ.Автомобиль,
			Пробег,
			Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег,
			?(ЗначениеЗаполнено(ДатаНачала), ДатаНачала, Дата),
			Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.ПриемкаАвтомобиляВРемонт,
			Ложь
		);
		
	КонецЕсли;
				
	Если Не ОтправлятьКакАктОбОказанииУслуг Тогда
		
		ВариантРаспределенияСуммыТоваровПриОтправкеПоЭДО = Неопределено;
		
	КонецЕсли;
	
	Если Не ВариантРаспределенияСуммыТоваровПриОтправкеПоЭДО = Перечисления.ВариантыРаспределенияСуммыТоваровПриОтправкеПоЭДО.РаспределятьНаРаботу Тогда
		
		ИдентификаторРаботыДляРаспределенияСуммыТоваров = "";
		
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		// Удалим введенные в оборот коды маркировки
		НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
		НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейСостоянияКодовМаркировки.ОтменаПроведения();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РаботаСГраницами.ПередУдалением(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если Не ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
	НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейСостоянияКодовМаркировки.ОтменаПроведения();
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ТипСчетФактуры", "СчетФактураВыданный");
	ОбработкаСобытийДокументаСервер.УдалитьПодчиненныеСФ(ЭтотОбъект, ПараметрыДействия, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если
		Не ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения)
		Или НеТребуетсяПроведение()
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МаркировкаТоваровСервер.ПроверитьКодыМаркировкиВПроизводстве(ЭтотОбъект, Отказ);
	
	ДопОтбор = "";
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") И ЗначениеЗаполнено(ДокументОснование) Тогда
		
		ДопОтбор = " ИЛИ Заказ = &ЗаказОснование";
		
	КонецЕсли;
	
	ОснованиеСводногоРемонтногоЗаказа = СводныйРемонтныйЗаказ.ДокументОснование;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) КАК Заказано,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) КАК Резерв
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(
	|			,
	|			Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И Заказ.ДокументОснование = &ДокументОснование" + ДопОтбор + ") КАК ЗаказыПокупателейОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0),
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0)
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(
	|			,
	|			Заказ ССЫЛКА Документ.ЗаказВнутренний
	|				И Заказ.ДокументОснование = &ДокументОснование" + ДопОтбор + ") КАК ЗаказыПокупателейОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры";
	
	Если ТипЗнч(ОснованиеСводногоРемонтногоЗаказа) = Тип("ДокументСсылка.ЗаявкаНаРемонт")
		И ЗначениеЗаполнено(ОснованиеСводногоРемонтногоЗаказа) Тогда
		Запрос.Текст = Запрос.Текст + "
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	               |	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) КАК Заказано,
	               |	ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) КАК Резерв
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Остатки(
	               |			,
	               |			Заказ ССЫЛКА Документ.ЗаказПокупателя
	               |				И Заказ.ДокументОснование = &ОснованиеСводногоРемонтногоЗаказа) КАК ЗаказыПокупателейОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	               |	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) КАК Заказано,
	               |	ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) КАК Резерв
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Остатки(
	               |			,
	               |			Заказ ССЫЛКА Документ.ЗаказВнутренний
	               |				И Заказ.ДокументОснование = &ОснованиеСводногоРемонтногоЗаказа) КАК ЗаказыПокупателейОстатки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номенклатура,
	               |	ХарактеристикаНоменклатуры";
		Запрос.УстановитьПараметр("ОснованиеСводногоРемонтногоЗаказа", ОснованиеСводногоРемонтногоЗаказа);
	КонецЕсли;
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("ЗаказОснование",    ДокументОснование);
	
	РезультатыЗапроса=Запрос.ВыполнитьПакет();
	
	Если НЕ РезультатыЗапроса[0].Пустой() Тогда
		Выборка = РезультатыЗапроса[0].Выбрать();
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'По заказ-наряду <'")
			+ СокрЛП(Ссылка)
			+ НСтр("ru = '> существуют заказанные/зарезервированные детали:'")
		);
		ИмяРеквизитаКода = УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах().Имя;
		Пока Выборка.Следующий() Цикл
			Код = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(Выборка.Номенклатура);
			ЕдИзм = СокрЛП(Выборка.Номенклатура.БазоваяЕдиницаИзмерения);
			ТекстСообщения = "Деталь [" + Код + "] """ + СокрЛП(Выборка.Номенклатура) + """";
			Если ЗначениеЗаполнено(Выборка.ХарактеристикаНоменклатуры) Тогда
				ТекстСообщения = ТекстСообщения
					+ Символы.НПП
					+ СтрШаблон(НСтр("ru = 'с характеристикой %1'"), СокрЛП(Выборка.ХарактеристикаНоменклатуры));
			КонецЕсли;
			ТекстСообщения = ТекстСообщения 
				+ Символы.НПП
				+ СтрШаблон(НСтр("ru = 'заказана под заказ-наряд в количестве %1 %2'"),
					Формат(Выборка.Заказано, "ЧДЦ=2; ЧН=0,00"), ЕдИзм);
			Если Выборка.Резерв <> 0 Тогда
				ТекстСообщения = ТекстСообщения
					+ Символы.НПП
					+ СтрШаблон(НСтр("ru = 'и зарезервирована в количестве %1 %2'"),
						Формат(Выборка.Резерв, "ЧДЦ=2; ЧН=0,00"), ЕдИзм);
			КонецЕсли;
			ТекстСообщения = ТекстСообщения + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЦикла;
		Отказ = Истина;
	КонецЕсли; 
	
	ВывестиСообщениеОКорректировкеЗаказов = Ложь;
	
	Если РезультатыЗапроса.Количество() > 1 И НЕ РезультатыЗапроса[1].Пустой() Тогда
		КонтрольОткрытыхЗаказовПокупателейПоЗаявкамНаРемонт = УчетныеПолитикиСервер.Значение(
			"КонтрольОткрытыхЗаказовПокупателейПоЗаявкамНаРемонт",,
			ПодразделениеКомпании
		);
		Выборка = РезультатыЗапроса[1].Выбрать();
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'По заявке на ремонт <%1> существуют заказанные/зарезервированные детали:'"),
				СокрЛП(ОснованиеСводногоРемонтногоЗаказа)
			)
		);
		ИмяРеквизитаКода = УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах().Имя;
		Пока Выборка.Следующий() Цикл
			Код = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(Выборка.Номенклатура);
			ЕдИзм = СокрЛП(Выборка.Номенклатура.БазоваяЕдиницаИзмерения);
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Деталь [%1] ""%2""'"), Код, СокрЛП(Выборка.Номенклатура));
			Если ЗначениеЗаполнено(Выборка.ХарактеристикаНоменклатуры) Тогда
				ТекстСообщения = ТекстСообщения
					+ Символы.НПП
					+ СтрШаблон(НСтр("ru = 'с характеристикой %1'"), СокрЛП(Выборка.ХарактеристикаНоменклатуры));
			КонецЕсли;
			ТекстСообщения = ТекстСообщения
				+ Символы.НПП
				+ СтрШаблон(НСтр("ru = 'заказана под заявку на ремонт в количестве %1 %2'"),
					Формат(Выборка.Заказано, "ЧДЦ=2; ЧН=0,00"), ЕдИзм);
			Если Выборка.Резерв <> 0 Тогда
				ТекстСообщения = ТекстСообщения
					+ Символы.НПП
					+ СтрШаблон(НСтр("ru = 'и зарезервирована в количестве %1 %2'"), Формат(Выборка.Резерв, "ЧДЦ=2; ЧН=0,00"), ЕдИзм);
			КонецЕсли;
			ТекстСообщения = ТекстСообщения + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЦикла;
		Если КонтрольОткрытыхЗаказовПокупателейПоЗаявкамНаРемонт Тогда
			Отказ = Истина;
		КонецЕсли;
		ВывестиСообщениеОКорректировкеЗаказов = Истина;
	КонецЕсли;
	
	Если Отказ ИЛИ ВывестиСообщениеОКорректировкеЗаказов Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Произведите корректировку/снятие резервов данных деталей.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьСкладскиеОрдера() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// получим шапку документа
	ШапкаДокумента = ПолучитьШапкуДокумента(Ссылка);
	
	// Вычислим сумму задолженности по заказ-наряду
	Если Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт
		И ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Платный Тогда
		
		Если НЕ ПраваИНастройкиПользователя.Значение("РазрешитьОтгрузкуВДолг", ЭтотОбъект) Тогда
			ЗапретитьПереплатуПоЗаказНарядам = ПланыВидовХарактеристик.ТипыСделок.ЗаказНаряд.ЗапретитьПереплатуПоСделкам;
			// Вычислим сумму задолженности по заказ-наряду
			Запрос = Новый Запрос;
			Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов) Тогда
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	РасчетыСКонтрагентамиОстаткиИОбороты.СуммаОборот КАК Сумма,
					|	РасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрОборот КАК СуммаУпр,
					|	РасчетыСКонтрагентамиОстаткиИОбороты.СуммаБазОборот КАК СуммаБаз
					|ИЗ
					|	РегистрНакопления.РасчетыСКонтрагентами.Обороты(
					|		,
					|		,
					|		Регистратор,
					|		ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
					|		И Контрагент = &Контрагент
					|		" + ?(ЗапретитьПереплатуПоЗаказНарядам, " И (ДокументРасчетов = &Сделка ИЛИ ДокументРасчетов.ДокументОснование = &Сделка)", "") + "
					|	) КАК РасчетыСКонтрагентамиОстаткиИОбороты
					|ГДЕ
					|	РасчетыСКонтрагентамиОстаткиИОбороты.Регистратор <> &ЗаказНаряд";
			Иначе
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаОборот КАК Сумма,
					|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрОборот КАК СуммаУпр,
					|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаБазОборот КАК СуммаБаз
					|ИЗ
					|	РегистрНакопления.ВзаиморасчетыКомпании.Обороты(
					|		,
					|		,
					|		Регистратор,
					|		ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
					|		И Контрагент = &Контрагент
					|		" + ?(ЗапретитьПереплатуПоЗаказНарядам, " И (Сделка = &Сделка ИЛИ Сделка.ДокументОснование = &Сделка)", "") + "
					|	) КАК ВзаиморасчетыКомпанииОстаткиИОбороты
					|ГДЕ
					|	ВзаиморасчетыКомпанииОстаткиИОбороты.Регистратор <> &ЗаказНаряд";
			КонецЕсли;
			Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов);
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Запрос.УстановитьПараметр("Сделка", Ссылка);
			Запрос.УстановитьПараметр("ЗаказНаряд", Ссылка);
			тзДолги = Запрос.Выполнить().Выгрузить();
			МаксимальныйКредит = 0;	
			Если ПраваИНастройкиПользователя.Значение("ПроверкаМаксимальногоПревышенияКредитаКонтрагента", ЭтотОбъект) Тогда
				МаксимальныйКредит = ДоговорВзаиморасчетов.МаксимальныйКредит;
			КонецЕсли;
			Если ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
				Долг = тзДолги.Итог("Сумма") - МаксимальныйКредит;
			ИначеЕсли ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
				Долг = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					МаксимальныйКредит,
					ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,
					ШапкаДокумента.МоментВремени,
					ВалютаДокумента,
					КурсДокумента
				);
				Долг = тзДолги.Итог("СуммаБаз") - Долг;
			Иначе
				Долг = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					тзДолги.Итог("Сумма") - МаксимальныйКредит,
					ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,
					ШапкаДокумента.МоментВремени,
					ВалютаДокумента,
					КурсДокумента
				);
			КонецЕсли;
			СуммаДолга = СуммаДокумента + Долг;
			Если СуммаДолга >= 0.01 И Не ДоговорВзаиморасчетов.ОтменаКонтроляСуммыКредита Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Сумма долга до заказ-наряду составляет %1 %2'"),
						Формат(СуммаДолга, "ЧЦ=15; ЧДЦ=2"),
						СокрЛП(ВалютаДокумента))
				);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УчетПоРасчетнымДокументам = РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	ДополнительныеСвойства.Вставить("УчетПоРасчетнымДокументам", УчетПоРасчетнымДокументам);
	Если ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Платный Тогда
		
		Документы.ЗаказНаряд.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
		
		Если УчетПоРасчетнымДокументам Тогда
			Документы.ЗаказНаряд.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
		КонецЕсли;
		
		Если Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
			
			// проводим взаиморасчеты
			Если Не УчетПоРасчетнымДокументам Тогда
				НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыКомпании;
				НаборЗаписейВзаиморасчеты.ШапкаДокумента = ШапкаДокумента;
				НаборЗаписейВзаиморасчеты.ДокументОбъект = ЭтотОбъект;
				НаборЗаписейВзаиморасчеты.РежимПроведения = РежимПроведения;
				НаборЗаписейВзаиморасчеты.Контрагент = Контрагент;
				НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
				Если ЗначениеЗаполнено(ДокументОснование)
					И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
					НаборЗаписейВзаиморасчеты.Сделка = ДокументОснование;
				Иначе
					НаборЗаписейВзаиморасчеты.Сделка = Ссылка;
				КонецЕсли;
				НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем = Истина;
				НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок = 
					(СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически);
				НаборЗаписейВзаиморасчеты.Сумма = СуммаДокумента;
				НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц = 0;
				Отказ = НЕ НаборЗаписейВзаиморасчеты.Приход() ИЛИ Отказ;
			КонецЕсли;
			
			ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
			
			// Движение по субподряду
			НаборЗаписейСубподряд = Движения.Субподряд;
			НаборЗаписейСубподряд.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейСубподряд.ДатаВыполнения = ШапкаДокумента.Дата;
			Запрос = Новый Запрос("ВЫБРАТЬ
			                    |	ЗаказНарядРаботы.Ссылка КАК ЗаказНаряд,
			                    |	ЗаказНарядРаботы.Авторабота КАК Работа,
			                    |	ЗаказНарядРаботы.Контрагент КАК Контрагент,
			                    |	ЗаказНарядРаботы.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
			                    |	СУММА(ЗаказНарядРаботы.СуммаВсего) КАК Сумма,
			                    |	СУММА(ЗаказНарядРаботы.СуммаВсего) КАК СуммаВсего,
			                    |	СУММА(ЗаказНарядРаботы.СуммаНДС) КАК СуммаНДС,
			                    |	ЗаказНарядРаботы.СтавкаНДС КАК СтавкаНДС
			                    |ИЗ
			                    |	Документ.ЗаказНаряд.Автоработы КАК ЗаказНарядРаботы
			                    |ГДЕ
			                    |	ЗаказНарядРаботы.Ссылка = &Ссылка
			                    |	И ЗаказНарядРаботы.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			                    |
			                    |СГРУППИРОВАТЬ ПО
			                    |	ЗаказНарядРаботы.Ссылка,
			                    |	ЗаказНарядРаботы.Авторабота,
			                    |	ЗаказНарядРаботы.Контрагент,
			                    |	ЗаказНарядРаботы.ДоговорВзаиморасчетов,
			                    |	ЗаказНарядРаботы.СтавкаНДС");
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			РезультатЗапросаПоРаботам = Запрос.Выполнить().Выгрузить();
			Если ДополнительныеСвойства.Свойство("ТаблицыДвиженийДокумента")
				И ДополнительныеСвойства.ТаблицыДвиженийДокумента.Свойство("РасчетыСКонтрагентами")
				И ДополнительныеСвойства.ТаблицыДвиженийДокумента.РасчетыСКонтрагентами.Количество() > 0 Тогда
				
				УсловиеОтбора = Новый Структура;
				УсловиеОтбора.Вставить("ТипРасчета", Перечисления.ТипыРасчетов.Оплата);
				УсловиеОтбора.Вставить("ВидДвижения", ВидДвиженияНакопления.Приход);
				СуммыПоРасчетамСКонтрагентом = РасчетыСКонтрагентамиСервер.СуммовыеПоказателиРасчетаСКонтрагентами(
					ДополнительныеСвойства.ТаблицыДвиженийДокумента.РасчетыСКонтрагентами,
					УсловиеОтбора);
				РезультатЗапросаПоРаботам.Колонки.Добавить("СуммаУпр");
				СуммыТоваров = РезультатЗапросаПоРаботам.ВыгрузитьКолонку("Сумма");
				РезультатЗапросаПоРаботам.ЗагрузитьКолонку(СуммыТоваров, "СуммаУпр");
				
				РасчетыСКонтрагентамиСервер.РаспределитьСуммыПоЧастиТабличнойЧастиДокумента(
					РезультатЗапросаПоРаботам,
					СуммыПоРасчетамСКонтрагентом.СуммаБаз,
					СуммаДокумента,
					"Сумма");
				РасчетыСКонтрагентамиСервер.РаспределитьСуммыПоЧастиТабличнойЧастиДокумента(
					РезультатЗапросаПоРаботам,
					СуммыПоРасчетамСКонтрагентом.СуммаУпр,
					СуммаДокумента,
					"СуммаУпр");
				
				НаборЗаписейСубподряд.ПересчитаныСуммы = Истина;
				НаборЗаписейСубподряд.ТребуетсяПересчетНДС =
					(ВалютаДокумента <> Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить());
				
			КонецЕсли;
			НаборЗаписейСубподряд.РезультатЗапросаПоРаботам = РезультатЗапросаПоРаботам;
			Отказ = НЕ НаборЗаписейСубподряд.Движение(Истина) ИЛИ Отказ;
			
		ИначеЕсли ДополнительныеСвойства.Свойство("ДляПроведения")
			И ДополнительныеСвойства.ДляПроведения.Свойство("ДанныеДокумента") Тогда
			
			ДополнительныеСвойства.ДляПроведения.ДанныеДокумента.Закрыть();
			
		КонецЕсли;
		
	КонецЕсли;
	
	СписатьМаркировкиТоваровВПроизводстве(ШапкаДокумента);
	
	ТоварыАвтоработы = Неопределено;
	// проведем партии товаров
	Отказ = НЕ ПровестиПоПартиям(РежимПроведения, Ссылка, ТоварыАвтоработы) ИЛИ Отказ; 
	
	НаборЗаписейВыработкаСотрудников = Движения.ВыработкаСотрудников;
	НаборЗаписейВыработкаСотрудников.РежимПроведения = РежимПроведения;
	НаборЗаписейВыработкаСотрудников.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейВыработкаСотрудников.РезультатЗапросаПоРаботам = Неопределено;
	НаборЗаписейВыработкаСотрудников.РезультатЗапросаПоИсполнителям = Неопределено;
	НаборЗаписейВыработкаСотрудников.ВидРемонта = Неопределено;
	НаборЗаписейВыработкаСотрудников.Автомобиль = СводныйРемонтныйЗаказ.Автомобиль;
	НаборЗаписейВыработкаСотрудников.РаспределениеСумм = ТоварыАвтоработы;
	
	Если ВыработкаСотрудниковПоВыполнениюЗаказНаряда И Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен Тогда
		ДатаВыработкиСотрудников = ДатаОкончания;
		ЕстьДвиженияПоВыработке = Истина;
	ИначеЕсли Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
		Если ВыработкаСотрудниковПоВыполнениюЗаказНаряда Тогда
			ДатаВыработкиСотрудников = ДатаОкончания;
		Иначе
			ДатаВыработкиСотрудников = ДатаЗакрытия;
		КонецЕсли; 
		ЕстьДвиженияПоВыработке = Истина;
	Иначе
		ЕстьДвиженияПоВыработке = Ложь;
	КонецЕсли;
	
	Если ЕстьДвиженияПоВыработке Тогда
		НаборЗаписейВыработкаСотрудников.ПериодДвижения = ДатаВыработкиСотрудников;
		Отказ = НЕ НаборЗаписейВыработкаСотрудников.Движение() ИЛИ Отказ;
	КонецЕсли;
	
	НаборЗаписейВыработкаСотрудников.РежимПроведения = Неопределено;
	НаборЗаписейВыработкаСотрудников.ДокументОбъект = Неопределено;
	НаборЗаписейВыработкаСотрудников.РезультатЗапросаПоРаботам = Неопределено;
	НаборЗаписейВыработкаСотрудников.РезультатЗапросаПоИсполнителям = Неопределено;
	НаборЗаписейВыработкаСотрудников.ВидРемонта = Неопределено;
	НаборЗаписейВыработкаСотрудников.Автомобиль = Неопределено;
	НаборЗаписейВыработкаСотрудников.ПериодДвижения = Неопределено;
	
	// Сформируем начисления
	Если Автосервис.ДоступноНачислениеСотрудникам()
		И ЕстьДвиженияПоВыработке Тогда
		НаборЗаписейНачисленияСотрудникамПоЗаказНарядам = Движения.НачисленияСотрудникамПоЗаказНарядам;
		НаборЗаписейНачисленияСотрудникамПоЗаказНарядам.РежимПроведения = РежимПроведения;
		НаборЗаписейНачисленияСотрудникамПоЗаказНарядам.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейНачисленияСотрудникамПоЗаказНарядам.РезультатЗапросаПоРаботам = Неопределено;
		НаборЗаписейНачисленияСотрудникамПоЗаказНарядам.РезультатЗапросаПоИсполнителям = Неопределено;
		НаборЗаписейНачисленияСотрудникамПоЗаказНарядам.ПериодДвижения = ДатаВыработкиСотрудников;
		НаборЗаписейНачисленияСотрудникамПоЗаказНарядам.РаспределениеСумм = ТоварыАвтоработы;
		Отказ = НЕ НаборЗаписейНачисленияСотрудникамПоЗаказНарядам.Движение() ИЛИ Отказ;
	КонецЕсли;   
	
	Если (НЕ Отказ) И (ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Платный)
		И (Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт) Тогда
		
		ОбработкаПроведенияНакопленияПоКарточкамКонтрагентов();
		
	КонецЕсли;
	
	// бонусные баллы
	НаборБонусныеПрограммы = Движения.БонусныеБаллы;
	Если КоличествоКНачислению > 0 Тогда
		НаборБонусныеПрограммы.Карта             = Карточка;
		НаборБонусныеПрограммы.БонуснаяПрограмма = Карточка.БонуснаяПрограмма;
		НаборБонусныеПрограммы.ХозОперация       = ХозОперация;
		НаборБонусныеПрограммы.КоличествоБаллов  = КоличествоКНачислению;
		НаборБонусныеПрограммы.Регистратор       = Ссылка;
		НаборБонусныеПрограммы.ДокДата           = Дата;
		
		Отказ = НЕ НаборБонусныеПрограммы.Приход() ИЛИ Отказ;
	КонецЕсли;
	
	Если КоличествоКСписанию > 0 Тогда
		МаксимальноеКоличествоБаллов = БонусныеПрограммыСервер.МаксимальноеКоличествоБаллов(
			ЭтотОбъект,
			Карточка.БонуснаяПрограмма
		);
		Если КоличествоКСписанию > МаксимальноеКоличествоБаллов Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Максимальное количество бонусных баллов доступных к оплате %1 меньше указанных %2.'"),
					МаксимальноеКоличествоБаллов,
					КоличествоКСписанию
				),
				ЭтотОбъект,
				,
				,
				Отказ
			);
		КонецЕсли;
		
		Если Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен Тогда
			НаборБонусныеПрограммы.ПериодДвижения = ДатаОкончания;
		ИначеЕсли Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
				НаборБонусныеПрограммы.ПериодДвижения = ДатаЗакрытия;
		КонецЕсли;
		
		НаборБонусныеПрограммы.Карта = Карточка;
		НаборБонусныеПрограммы.БонуснаяПрограмма = Карточка.БонуснаяПрограмма;
		НаборБонусныеПрограммы.ХозОперация       = ХозОперация;
		НаборБонусныеПрограммы.КоличествоБаллов  = КоличествоКСписанию;
		НаборБонусныеПрограммы.Регистратор       = Ссылка;
		НаборБонусныеПрограммы.ДокДата           = Дата;
		
		Отказ = НЕ НаборБонусныеПрограммы.Расход() ИЛИ Отказ;
	КонецЕсли;
	
	// двигаем границу последовательности взаиморасчетов
	Если ДополнительныеСвойства.ПроверятьПоследовательность Тогда
		ПолучитьНовыйМоментВремени();
		РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
		РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
		ДополнительныеСвойства.Удалить("НовыйМоментВремени");
	КонецЕсли;
	
	Если Отказ Тогда
		ДатаОкончания = Неопределено;
		ДатаЗакрытия = Неопределено;
	КонецЕсли;
		
	Если Состояние <> Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
		// Для состояния выполнен требуется очистка движений
		ОчиститьДвиженияДокумента();
		
		ПараметрыДействия = Новый Структура;
		ПараметрыДействия.Вставить("ТипСчетФактуры", "СчетФактураВыданный");
		ОбработкаСобытийДокументаСервер.УдалитьПодчиненныеСФ(ЭтотОбъект, ПараметрыДействия, Отказ);
		
	Иначе
		// Проверим налиие прослеживаемых товаров, которые были возвращены из розницы
		Если НЕ Отказ Тогда
			Движения.ТоварыВПроизводстве.Записать();
			Движения.Продажи.Записать();
		КонецЕсли;
		ТаблицаПрослеживаемыхТоваров = Документы.ЗаказНаряд.ОперацииСПрослеживаемымиТоварами(
			ЭтотОбъект);
		НаборЗаписейОперацииПрослеживаемости = Движения.ОперацииПрослеживаемыхТоваров;
		НаборЗаписейОперацииПрослеживаемости.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейОперацииПрослеживаемости.ТаблицаПрослеживаемыхТоваров = ТаблицаПрослеживаемыхТоваров;
		Если НЕ НаборЗаписейОперацииПрослеживаемости.ДобавитьОперациюПрослеживаемости() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Платный Тогда
			ПараметрыДействия = Новый Структура;
			ОбработкаСобытийДокументаСервер.СоздатьОбновитьСФВыданный(
				ЭтотОбъект,
				ДополнительныеСвойства,
				ПараметрыДействия,
				Отказ
			);
		КонецЕсли;

	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗаполнениеОбъекта

// Производит заполнение объекта на основании документа "Заявка на ремонт"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаРемонт(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИменаИсключаемыхРеквизитов = "";
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ЗаполнениеИзКомандыСозданияЗаявкиНаРемонт", Ложь) Тогда
		ИменаИсключаемыхРеквизитов = "Контрагент";
	КонецЕсли;

	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
			ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ИменаИсключаемыхРеквизитов) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПлановаяДатаВыдачи = ДанныеЗаполнения.ДатаОкончания;
	ДополнительныеСвойства.Вставить("ПропуститьЗаполнениеСвязанныхРабот", Истина);
	
	СозданиеИзСводногоРемонтогоЗаказа = ДополнительныеСвойства.Свойство("СРЗ");
	
	Если СозданиеИзСводногоРемонтогоЗаказа Тогда
		Автоработы.Очистить();
		Исполнители.Очистить();
		Товары.Очистить();
		ПричиныОбращения.Очистить();
	КонецЕсли;
	
	// Если бесплатный вид ремонта, очистим поля контрагент и договор, подставим из документа валюту.
	Если ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный Тогда
		
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
		ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
		
	Иначе
		
		Плательщик = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "Плательщик");
		
		Если НЕ ЗначениеЗаполнено(Плательщик) Тогда
			
			Если СозданиеИзСводногоРемонтогоЗаказа Тогда
				
				Плательщик = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "Заказчик");
				
			ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаРемонт") Тогда
				
				Плательщик = ДанныеЗаполнения.Контрагент;
				
			Иначе
				
				Плательщик = ДанныеЗаполнения.Заказчик;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Плательщик) И Контрагент <> Плательщик Тогда
			
			Контрагент = Плательщик;
			Документы.ЗаказНаряд.КонтрагентПриИзменении(ЭтотОбъект);
			
			Если Контрагент = ДанныеЗаполнения.Контрагент
				И ДоговорВзаиморасчетов <> ДанныеЗаполнения.ДоговорВзаиморасчетов Тогда
				
				ДоговорВзаиморасчетов = ДанныеЗаполнения.ДоговорВзаиморасчетов;
				Документы.ЗаказНаряд.ДоговорВзаиморасчетовПриИзменении(ЭтотОбъект);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Причины = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ПричиныОбращения");
	
	Если Причины <> Неопределено Тогда
		
		Описание = Новый Массив;
		
		Для Каждого Причина Из Причины Цикл
			
			Описание.Добавить(Причина.ПричинаОбращенияСодержание);
			ЗаполнитьЗначенияСвойств(ПричиныОбращения.Добавить(), Причина);
			
			ЗаполнитьТабличныеЧастиПриВводеНаОсновании(ДанныеЗаполнения, Причина);
			
		КонецЦикла;
		
		// Установим описание причин обращения, если длина строки больше 300 обрежем и укажем признак наличия продолжения.
		Описание = СтрСоединить(Описание, "; ");
		Если СтрДлина(Описание) > 300 Тогда
			
			Описание = Лев(Описание, 297) + "...";
			
		КонецЕсли;
		
		ОписаниеПричиныОбращения = Описание;
		
		ВидыРемонтовПричин = ПричиныОбращения.ВыгрузитьКолонку("ВидРемонтаПричиныОбращения");
		ВидыРемонтовПричин = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыРемонтовПричин);
		
		Если ВидыРемонтовПричин.Количество() = 1
			И ЗначениеЗаполнено(ВидыРемонтовПричин[0])
			И ВидыРемонтовПричин[0] <> ВидРемонта Тогда
			
			ВидРемонта = ВидыРемонтовПричин[0];
			Документы.ЗаказНаряд.ВидРемонтаПриИзменении(ЭтотОбъект);
			
		КонецЕсли;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ВводБезПричиныОбращения", Ложь) Тогда
		
		ЗаполнитьТабличныеЧастиПриВводеНаОсновании(ДанныеЗаполнения);
		
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ЭтоПервый", Истина) Тогда
		
		ВспомогательныеАвтоработы.Загрузить(ДанныеЗаполнения.ВспомогательныеАвтоработы.Выгрузить());
		
	КонецЕсли;
	
	// Расчистаем сумму начислений
	Автосервис.ЗаполнитьИсполнителямНачисления(
		ЭтотОбъект,
		Исполнители,
		Автоработы,
		Истина);
	
	СводныйРемонтныйЗаказ = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "СРЗ");
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаявкаНаРемонт()

// Производит заполнение объекта на основании документа "Заказ покупателя"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПокупателя(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Если бесплатный вид ремонта, очистим поля контрагент и договор, подставим из документа валюту.
	Если ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный Тогда
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
		ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	Иначе
		Документы.ЗаказНаряд.УстановитьГарантийногоПлательщика(ЭтотОбъект);
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.СкладКомпании,
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток КАК Количество,
	|	ЗаказыПокупателейОстатки.СуммаОстаток КАК СуммаЗаказа,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.Количество * ЗаказПокупателяТовары.Коэффициент,1) КАК КоличествоБазовое,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.ЕдиницаИзмерения, Значение(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.Коэффициент,1) КАК Коэффициент,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.СтавкаНДС, ЗаказыПокупателейОстатки.Номенклатура.СтавкаНДС) КАК СтавкаНДС,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.НомерСтроки, 1000000) КАК НомерСтроки,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.СкидкаНаТовар, ЗНАЧЕНИЕ(Справочник.ТипыСкидок.ПустаяСсылка)) КАК СкидкаНаТовар,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.ПроцентСкидкиСтроки, 0) КАК ПроцентСкидкиСтроки,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.ПроцентСкидки, 0) КАК ПроцентСкидки
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(" + ?(Ссылка.Пустая(), "", "&НаМомент") + ",
	|	Контрагент = &ВыбКонтрагент И Заказ = &ВыбЗаказ) КАК ЗаказыПокупателейОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ПО
	|	ЗаказыПокупателейОстатки.Заказ = ЗаказПокупателяТовары.Ссылка И 
	|	ЗаказыПокупателейОстатки.Номенклатура = ЗаказПокупателяТовары.Номенклатура И 
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказПокупателяТовары.ХарактеристикаНоменклатуры
	|ГДЕ
	|	ЗаказыПокупателейОстатки.Номенклатура.ВидНоменклатуры<>ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.ПрочиеАктивы)
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(КоличествоБазовое),
	|	МАКСИМУМ(Количество),
	|	МАКСИМУМ(СуммаЗаказа)
	|ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	СкладКомпании";
	
	Запрос=Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НаМомент",      МоментВремени());
	Запрос.УстановитьПараметр("ВыбКонтрагент", Контрагент);
	Запрос.УстановитьПараметр("ВыбЗаказ",      ДанныеЗаполнения);
	Товары.Очистить(); // нужные только скорректированные позиции
	ВыборкаНоменклатуры = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВалютаЗаказа   = ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов;
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаЗаказа,Дата);
	КурсЗаказа     = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	// перенос скидки
	СкидкаНаценка = ДанныеЗаполнения.СкидкаНаценка;
	Документы.ЗаказНаряд.СкидкаНаценкаПриИзменении(ЭтотОбъект);
	
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		ВыборкаХарактеристик = ВыборкаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХарактеристик.Следующий() Цикл
			
			ВсегоОсталось             = ВыборкаХарактеристик.Количество;
			КоличествоБазовоеПоЗаказу = ВыборкаХарактеристик.КоличествоБазовое;
			СуммаОсталось             = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаХарактеристик.СуммаЗаказа,
				ВалютаЗаказа, КурсЗаказа, ВалютаДокумента, КурсДокумента);
			
			ВыборкаСкладов = ВыборкаХарактеристик.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаСкладов.Следующий() Цикл
				ВыборкаДетали = ВыборкаСкладов.Выбрать(ОбходРезультатаЗапроса.Прямой);
				СтрокаДетали  = Неопределено;
				Пока ВыборкаДетали.Следующий() Цикл
					
					Если ВсегоОсталось = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если ВыборкаДетали.Количество = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если КоличествоБазовоеПоЗаказу = 1 Тогда
						КоличествоСтроки = ВыборкаДетали.Количество;
					Иначе
						КоличествоСтроки = ВыборкаДетали.Количество
							* (ВыборкаДетали.КоличествоБазовое / КоличествоБазовоеПоЗаказу);
					КонецЕсли;
					
					//НомерСтроки = ВыборкаДетали.НомерСтроки;
					ТекущееКоличество = Мин(ВсегоОсталось, КоличествоСтроки);
					СтрокаДетали = Товары.Добавить();
					СтрокаДетали.Номенклатура               = ВыборкаДетали.Номенклатура;
					СтрокаДетали.ХарактеристикаНоменклатуры = ВыборкаДетали.ХарактеристикаНоменклатуры;
					СтрокаДетали.СкладКомпании              = ВыборкаДетали.СкладКомпании;
					СтрокаДетали.ЕдиницаИзмерения           = ВыборкаДетали.ЕдиницаИзмерения;
					СтрокаДетали.Коэффициент                = ВыборкаДетали.Коэффициент;
					СтрокаДетали.Количество                 = ТекущееКоличество
						/ ?(НЕ ЗначениеЗаполнено(СтрокаДетали.Коэффициент), 1, СтрокаДетали.Коэффициент);
					
					Документы.ЗаказНаряд.ТоварыНоменклатураПриИзменении(ЭтотОбъект, СтрокаДетали);
					
					ТекСумма      = (СуммаОсталось / ВсегоОсталось) * ТекущееКоличество;
					СуммаОсталось = СуммаОсталось - ТекСумма;
					
					СтрокаДетали.СтавкаНДС                  = ВыборкаДетали.СтавкаНДС;
					// перенос скидок
					СтрокаДетали.СкидкаНаТовар              = ВыборкаДетали.СкидкаНаТовар;
					СтрокаДетали.ПроцентСкидки              = ВыборкаДетали.ПроцентСкидки;
					СтрокаДетали.ПроцентСкидкиСтроки        = ВыборкаДетали.ПроцентСкидкиСтроки;
					СтрокаДетали.СуммаВсего                 = ТекСумма;
					
					Документы.ЗаказНаряд.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект, СтрокаДетали);
					
					ВсегоОсталось = ВсегоОсталось - ТекущееКоличество;
					
				КонецЦикла;
				
				Если ВсегоОсталось>0 ИЛИ СуммаОсталось>0 Тогда
					Если НЕ СтрокаДетали = Неопределено Тогда
						СтрокаДетали.Количество = СтрокаДетали.Количество
							+ (ВсегоОсталось / ?(НЕ ЗначениеЗаполнено(СтрокаДетали.Коэффициент), 1, СтрокаДетали.Коэффициент));
						Документы.ЗаказНаряд.ТоварыКоличествоПриИзменении(ЭтотОбъект, СтрокаДетали);
						СтрокаДетали.СуммаВсего = СтрокаДетали.СуммаВсего + СуммаОсталось;
					Иначе
						
						СтрокаДетали = Товары.Добавить();
						СтрокаДетали.Номенклатура               = ВыборкаСкладов.Номенклатура;
						СтрокаДетали.ХарактеристикаНоменклатуры = ВыборкаСкладов.ХарактеристикаНоменклатуры;
						СтрокаДетали.СкладКомпании              = ВыборкаСкладов.СкладКомпании;
						Документы.ЗаказНаряд.ТоварыНоменклатураПриИзменении(ЭтотОбъект, СтрокаДетали);
						
						СтрокаДетали.СтавкаНДС                  = ПолучитьПараметрыПлательщикаНДС(
							ЭтотОбъект.Организация,
							ЭтотОбъект.ПодразделениеКомпании,
							ЭтотОбъект.Дата).ОсновнаяСтавка;
							
						СтрокаДетали.Количество                 = ВсегоОсталось
							/ ?(НЕ ЗначениеЗаполнено(СтрокаДетали.Коэффициент), 1, СтрокаДетали.Коэффициент);
						Документы.ЗаказНаряд.ТоварыКоличествоПриИзменении(ЭтотОбъект, СтрокаДетали);
						
						СтрокаДетали.СуммаВсего = СуммаОсталось;
						
					КонецЕсли;
					Документы.ЗаказНаряд.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект, СтрокаДетали);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаявкаНаРемонт()

// Производит заполнение объекта на основании документа "Контрагенты"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Контрагенты(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент            = ДанныеЗаполнения;
	ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	
	Документы.ЗаказНаряд.КонтрагентПриИзменении(ЭтотОбъект);
	
	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта по передаваемой структуре
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СводныйРемонтныйЗаказ(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СводныйРемонтныйЗаказ = ДанныеЗаполнения;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда 
		Контрагент = ДанныеЗаполнения.Заказчик;
		Документы.ЗаказНаряд.КонтрагентПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Структура()

// Производит заполнение объекта на основании документа "Заказ на автомобиль"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаАвтомобиль(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВидРемонта = Автосервис.ВидРемонтаТипаКомплектацияАвтомобиля();
	Документы.ЗаказНаряд.ВидРемонтаПриИзменении(ЭтотОбъект);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаряд()

// Производит заполнение объекта по передаваемой структуре
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Структура(ДанныеЗаполнения , СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
		
	Если ДанныеЗаполнения.Свойство("ЗаполнениеИзКорзины") Тогда
		ПараметрыДействия = Неопределено;
		Для Каждого Строка Из ДанныеЗаполнения.Товары Цикл
			
			НоваяСтрока 						   = Товары.Добавить();	
			НоваяСтрока.Номенклатура 			   = Строка.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
			НоваяСтрока.Количество 				   = Строка.Количество;
			НоваяСтрока.ЕдиницаИзмерения 		   = Строка.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент		 		   = Строка.Коэффициент;
			ОбработкаТабличнойЧастиТовары.УстановитьЦены(ЭтотОбъект, НоваяСтрока, ПараметрыДействия);
			Документы.ЗаказНаряд.ТоварыЦенаПриИзменении(ЭтотОбъект, НоваяСтрока, ПараметрыДействия);
			
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ДополнительныеСвойства.Свойство("ПараметрыДействия") Тогда 
		ПараметрыДействия = Новый Структура();
		ДополнительныеСвойства.Вставить("ПараметрыДействия", ПараметрыДействия); 
	КонецЕсли;  
	
	Если ДанныеЗаполнения.Свойство("ВидРемонта") Тогда
		
		ВидРемонта = ДанныеЗаполнения.ВидРемонта;
		Документы.ЗаказНаряд.ВидРемонтаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("СервиснаяКампания") Тогда
		
		СервиснаяКампания = ДанныеЗаполнения.СервиснаяКампания;
		ДополнительныеСвойства.ПараметрыДействия.Вставить("ОчиститьТаблицы", Истина);
		ДополнительныеСвойства.ПараметрыДействия.Вставить("ТребуетсяУстановкаВидаРемонта", НЕ ЗначениеЗаполнено(ВидРемонта));
		ДополнительныеСвойства.ПараметрыДействия.Вставить("ТребуетсяЗаполнениеАвтоработамиПоСервиснойКомпании", Истина);
		Документы.ЗаказНаряд.ЗаполнениеПоСервиснойКомпании(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("СводныйРемонтныйЗаказ") Тогда
		
		СводныйРемонтныйЗаказ = ДанныеЗаполнения.СводныйРемонтныйЗаказ;
		
	КонецЕсли; 
	
	Если ДанныеЗаполнения.Свойство("ЗаполнениеИзКомандыСозданияЗаявкиНаРемонт") Тогда
		
		Контрагент = ДанныеЗаполнения.Контрагент; 
		ДополнительныеСвойства.Вставить("ЗаполнениеИзКомандыСозданияЗаявкиНаРемонт", Истина);
		
	КонецЕсли; 
	
	Если ДанныеЗаполнения.Свойство("ДокументОснование") Тогда  
		
		Если ТипЗнч (ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРемонт") Тогда
			ДанныеЗаполнения = ДанныеЗаполнения.ДокументОснование;
			ОбработкаЗаполнения_ЗаявкаНаРемонт(ДанныеЗаполнения, , СтандартнаяОбработка);
		Иначе
			ДокументОснование = ДанныеЗаполнения.ДокументОснование;
			
			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				
				ОбработкаЗаполнения_ЗаказПокупателя(ДокументОснование, , СтандартнаяОбработка);
				
			КонецЕсли;  
				
			ДанныеЗаполнения = ДокументОснование;
		КонецЕсли;
		
	КонецЕсли; 
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Структура()

#КонецОбласти

// Добавляет новую запись в журнал состояний если состояние изменилось.
//
// Возвращаемое значение:
//  Булево. Признак отказа записи документа.
//
Функция НовоеСостояние() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отказ = Ложь;
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЖурналСостоянийСрезПоследних.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.ЖурналСостояний.СрезПоследних(&Момент, Объект = &Ссылка) КАК ЖурналСостоянийСрезПоследних
		|ГДЕ
		|	ЖурналСостоянийСрезПоследних.Состояние = &Состояние");
	Запрос.УстановитьПараметр("Момент", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Состояние", Состояние);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Запись = РегистрыСведений.ЖурналСостояний.СоздатьМенеджерЗаписи();
		Запись.Период = ТекущаяДатаСеанса();
		Запись.Объект = Ссылка;
		Запись.Состояние = Состояние;
		Запись.Автор = Пользователи.ТекущийПользователь();
		
		Попытка
			
			Запись.Записать(Истина);
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка записи в регистр ""ЖурналСостояний""'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
			ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), ЭтотОбъект,,, Отказ);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // НовоеСостояние()

// Возвращает выборку по шапке
// ДокументСсылка - Ссылка на документ для которого получаем шапку.
Функция ПолучитьШапкуДокумента(ДокументСсылка) Экспорт
	Запрос=Новый Запрос("
	|ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка,
	//|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ТипЦен КАК ТипЦен,
	|	Док.ТипЦенРабот КАК ТипЦенРабот,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Док.Организация КАК Организация,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Док.Проект КАК Проект,
	/////////// ПРИВАТ ////////////
	|	Док.Ссылка КАК ДокументПродажи,
	|	Док.ДатаНачала КАК ДатаНачала,
	|	Док.ДатаОкончания КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА Док.Состояние = ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.Закрыт)
	|		ТОГДА Док.ДатаЗакрытия
	|		ИНАЧЕ Док.ДатаОкончания
	|	КОНЕЦ КАК Дата,
	|	Док.ВидРемонта КАК ВидРемонта,
	|	Док.ВидРемонта.ТипРемонта КАК ТипРемонта,
	|	Док.Цех КАК Цех,
	|	Док.СводныйРемонтныйЗаказ.Автомобиль КАК Автомобиль,
	|	Док.Контрагент КАК Контрагент,
	|	Док.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Док.СуммаНоменклатурыДокумента КАК СуммаНоменклатурыДокумента,
	|	Док.СуммаРаботДокумента КАК СуммаРаботДокумента,
	|	Док.СуммаДокумента КАК СуммаДокумента,
	|	Док.ДокументОснование КАК ДокументОснование,
	|	Док.СкладКомпании КАК СкладКомпании,
	|	Док.ВерсияОбъекта КАК ВерсияОбъекта
	|
	|ИЗ
	|	Документ."+Метаданные().Имя+" КАК Док
	|ГДЕ
	|	Док.Ссылка=&Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого ТекКолонка Из РезультатЗапроса.Колонки Цикл
		Результат.Вставить(ТекКолонка.Имя, Выборка[ТекКолонка.Имя]);
	КонецЦикла;
	
	Если ДокументСсылка.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда 
		Результат.Вставить("МоментВремени", Новый МоментВремени(ДокументСсылка.ДатаЗакрытия, ДокументСсылка));
	ИначеЕсли ДокументСсылка.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен Тогда
		Результат.Вставить("МоментВремени", Новый МоментВремени(ДокументСсылка.ДатаОкончания, ДокументСсылка));
	Иначе
		Результат.Вставить("МоментВремени", ДокументСсылка.МоментВремени());
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Формирует движения документа по партионным регистрам
// Режим - режим проведения (оперативный/неоперативный)
// ДокументСсылка - ссылка на документ который надо допровести по партиям
// ТоварыАвтоработы - Таблица с данными о деталях и автоработах документа
// Возвращает Истина - все хорошо, ложь - чего-то не так.
Функция ПровестиПоПартиям(Режим,ДокументСсылка, ТоварыАвтоработы = Неопределено) Экспорт
	
	Отказ=Ложь;
	
	Если ДополнительныеСвойства.Свойство("УчетПоРасчетнымДокументам") Тогда
		УчетПоРасчетнымДокументам = ДополнительныеСвойства.УчетПоРасчетнымДокументам;
	Иначе
		УчетПоРасчетнымДокументам =
			РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	КонецЕсли;
	
	// получим шапку документа
	ШапкаДокумента=ПолучитьШапкуДокумента(ДокументСсылка);    
	
	// Определим необходимость формирования корректирующих проводок.
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
	
	// Очистим возможные движения по производственному регистру, 
	// если было отложенное проведение по партиям.
	НаборЗаписейПартионногоРегистра=РегистрыНакопления.ТоварыВПроизводстве.СоздатьНаборЗаписей();
	НаборЗаписейПартионногоРегистра.Отбор.Регистратор.Значение=ШапкаДокумента.Ссылка;
	НаборЗаписейПартионногоРегистра.Отбор.Регистратор.Использование=Истина;
	НаборЗаписейПартионногоРегистра.Записать();
	// Очистим комплектацию автомобилей
	НаборЗаписейКомплектацияАвтомобилей=Движения.Найти("КомплектацияАвтомобилей");
	Если НаборЗаписейКомплектацияАвтомобилей<>Неопределено Тогда
		НаборЗаписейПартионногоРегистра=РегистрыНакопления.КомплектацияАвтомобилей.СоздатьНаборЗаписей();
		НаборЗаписейПартионногоРегистра.Отбор.Регистратор.Значение=ШапкаДокумента.Ссылка;
		НаборЗаписейПартионногоРегистра.Отбор.Регистратор.Использование=Истина;
		НаборЗаписейПартионногоРегистра.Записать();
	КонецЕсли; 
	// Очистим остатки автомобилей 
	НаборЗаписейОстаткиАвтомобилей=Движения.Найти("ОстаткиАвтомобилей");
	Если НаборЗаписейОстаткиАвтомобилей<>Неопределено Тогда
		НаборЗаписейПартионногоРегистра=РегистрыНакопления.ОстаткиАвтомобилей.СоздатьНаборЗаписей();
		НаборЗаписейПартионногоРегистра.Отбор.Регистратор.Значение=ШапкаДокумента.Ссылка;
		НаборЗаписейПартионногоРегистра.Отбор.Регистратор.Использование=Истина;
		НаборЗаписейПартионногоРегистра.Записать();
	КонецЕсли; 
	
	// Проверим, если подразделение проводиться по партиям "отложенно", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям=Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	
	ВалютаРегл=Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	СтруктураКурса=РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл,ШапкаДокумента.Дата);
	КурсРегл=СтруктураКурса.Курс/?(СтруктураКурса.Кратность=0,1,СтруктураКурса.Кратность);
	ВалютаУпр=Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	Если ШапкаДокумента.КурсВалютыУпр=0 Тогда
		СтруктураКурса=РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр,ШапкаДокумента.Дата);
		КурсУпр=СтруктураКурса.Курс/?(СтруктураКурса.Кратность=0,1,СтруктураКурса.Кратность);
	Иначе
		КурсУпр=ШапкаДокумента.КурсВалютыУпр;
	КонецЕсли;
	
	КомплектацияАвтомобиля = Перечисления.ТипыРемонта.КомплектацияАвтомобиля;
	ЭтоКомплектацияСборкаАвтомобиля = Автосервис.ЭтоКомплектацияСборкаАвтомобиля(ВидРемонта);
	
	АвтомобильСкладКомпании=Неопределено;
	СуммаНДСАвторабот=ШапкаДокумента.Ссылка.Автоработы.Итог("СуммаНДС");
	Если ШапкаДокумента.ТипРемонта = КомплектацияАвтомобиля ИЛИ НаСебестоимость Тогда
		// Мы для себя делаем автомобиль, увеличим себестоимость на сумму работ.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
					   |	ОстаткиАвтомобилейОстатки.СкладКомпании КАК СкладКомпании,
					   |	ОстаткиАвтомобилейОстатки.Партия КАК Партия,
					   |	ОстаткиАвтомобилейОстатки.СтатусПартии КАК СтатусПартии
					   |ИЗ
					   |	РегистрНакопления.ОстаткиАвтомобилей.Остатки(&НаДату, Автомобиль = &Автомобиль) КАК ОстаткиАвтомобилейОстатки
					   |ГДЕ
					   |	ОстаткиАвтомобилейОстатки.КоличествоОстаток > 0";
		Запрос.УстановитьПараметр("НаДату",ШапкаДокумента.МоментВремени);
		Запрос.УстановитьПараметр("Автомобиль",ШапкаДокумента.Автомобиль);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПартияКомплектуемогоАвтомобиля=Выборка.Партия;
			СтатусПартииКомплектуемогоАвтомобиля=Выборка.СтатусПартии;
			АвтомобильСкладКомпании=Выборка.СкладКомпании;
			Если БалансВедетсяПоОрганизациям(ШапкаДокумента.Дата) Тогда
				Если АвтомобильСкладКомпании.Организация<>Организация Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'Организация склада хранения автомобиля <%1> не соответствует организации документа .'"), 
							СокрЛП(АвтомобильСкладКомпании.Организация)),
						ЭтотОбъект
					);
					Отказ=Истина;
				КонецЕсли; 
			КонецЕсли;
			Если (ШапкаДокумента.СуммаРаботДокумента <> 0
				ИЛИ СуммаНДСАвторабот <> 0)
				И (НЕ Отказ)
				И (СтатусПартииКомплектуемогоАвтомобиля=Перечисления.СтатусыПартий.ТоварКупленный)
				И НаСебестоимость Тогда
				НоваяЗапись = НаборЗаписейОстаткиАвтомобилей.Добавить();
				НоваяЗапись.ВидДвижения   = ВидДвиженияНакопления.Приход;
				НоваяЗапись.Период        = ШапкаДокумента.Дата;
				НоваяЗапись.Регистратор   = ШапкаДокумента.Ссылка;
				НоваяЗапись.Партия        = ПартияКомплектуемогоАвтомобиля;
				НоваяЗапись.СтатусПартии  = СтатусПартииКомплектуемогоАвтомобиля;
				НоваяЗапись.СкладКомпании = АвтомобильСкладКомпании;
				НоваяЗапись.Автомобиль    = ШапкаДокумента.Автомобиль;
				НоваяЗапись.ХозОперация   = ШапкаДокумента.ХозОперация;
				НоваяЗапись.Проект	      = Проект;
				НоваяЗапись.Количество    = 0;
				НоваяЗапись.Сумма         = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ШапкаДокумента.СуммаРаботДокумента,ВалютаДокумента,КурсДокумента,ВалютаРегл,КурсРегл),2);
				НоваяЗапись.СуммаУпр      = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ШапкаДокумента.СуммаРаботДокумента,ВалютаДокумента,КурсДокумента,ВалютаУпр,КурсУпр),2);
				НоваяЗапись.СуммаНДС      = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаНДСАвторабот,ВалютаДокумента,КурсДокумента,ВалютаРегл,КурсРегл),2);
				НоваяЗапись.СуммаНДСУпр   = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаНДСАвторабот,ВалютаДокумента,КурсДокумента,ВалютаУпр,КурсУпр),2);
				НоваяЗапись.СуммаБезНДС   = НоваяЗапись.Сумма-НоваяЗапись.СуммаНДС;
				НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр-НоваяЗапись.СуммаНДСУпр;
				
				НаборЗаписейОстаткиАвтомобилей.Записать();
				
				Если (НЕ НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии) Тогда
					// Доходы и расходы
					НаборЗаписейДоходыИРасходы							= Движения.ДоходыИРасходы;
					НаборЗаписейДоходыИРасходы.ДокументОбъект 			= ЭтотОбъект;
					Если ВедетсяБалансПоПодразделению Тогда
						НаборЗаписейДоходыИРасходы.Подразделение		= АвтомобильСкладКомпании.ПодразделениеКомпании;
					КонецЕсли; 
					НаборЗаписейДоходыИРасходы.ШапкаДокумента			= ШапкаДокумента;
					Если НЕ ЗначениеЗаполнено(ШапкаДокумента.ВидРемонта.СтатьяДоходаРаботы) Тогда
						Если ШапкаДокумента.ТипРемонта = КомплектацияАвтомобиля Тогда
							НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов	= Справочники.СтатьиДоходовИРасходов.КомплектацияАвтомобилей;
						Иначе
							НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов	= Справочники.СтатьиДоходовИРасходов.ОтклонениеСебестоимостиПриКомплектации;
						КонецЕсли; 
					Иначе
						НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов	= ШапкаДокумента.ВидРемонта.СтатьяДоходаРаботы;
					КонецЕсли; 
					НаборЗаписейДоходыИРасходы.ВУпрВалюте				= Ложь;
					НаборЗаписейДоходыИРасходы.Доход					= ШапкаДокумента.СуммаРаботДокумента;
					Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
				КонецЕсли; 
			КонецЕсли; 
		Иначе
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Автомобиль ""%1"" отсутствует.'"),
					СокрЛП(ШапкаДокумента.Автомобиль)
				),
				ЭтотОбъект
			);
			Отказ=Истина;
		КонецЕсли;
	Иначе
		АвтомобильСкладКомпании = ШапкаДокумента.СкладКомпании;
	КонецЕсли;
	
	ПараметрыПересчета = Новый Структура();
	ПараметрыПересчета.Вставить("ВалютаРегл", ВалютаРегл);
	ПараметрыПересчета.Вставить("КурсРегл", КурсРегл);
	ПараметрыПересчета.Вставить("ВалютаУпр", ВалютаУпр);
	ПараметрыПересчета.Вставить("КурсУпр", КурсУпр);
	ПараметрыПересчета.Вставить("СуммаНДСАвторабот", СуммаНДСАвторабот);
	ПараметрыПересчета.Вставить("ВедетсяБалансПоПодразделению", ВедетсяБалансПоПодразделению);
	ДополнитьДвиженияДляКомплектацииСборкиАвтомобиля(
		ШапкаДокумента,
		Режим,
		Отказ,
		НаборЗаписейОстаткиАвтомобилей,
		НаборЗаписейКомплектацияАвтомобилей,
		НаборЗаписейДопроведениеПоПартиям,
		ПараметрыПересчета);
	
	ДвигаемГраницу = (ЭтоКомплектацияСборкаАвтомобиля И НаборЗаписейОстаткиАвтомобилей.Количество() > 0);
						
	Если ДополнительныеСвойства.ПроверятьПоследовательность И ДвигаемГраницу Тогда
		
		Если Ссылка <> ДокументСсылка Тогда
			
			ДополнительныеСвойства.Вставить("МоментВремениБыл", ШапкаДокумента.МоментВремени);
			РаботаСГраницами.ДвиженияПоОстаткамАвтомобилейПередПроведением(ДокументСсылка, ДополнительныеСвойства);
			
		КонецЕсли;
		
		ПолучитьНовыйМоментВремени();
		РаботаСГраницами.СдвинутьГраницуОстатковАвтомобилей(ДокументСсылка, ДополнительныеСвойства, Движения);
		ДополнительныеСвойства.Удалить("НовыйМоментВремени");
	КонецЕсли;
	
	СуммаНаСебестоимость=0; СуммаУпрНаСебестоимость=0; СуммаНДСНаСебестоимость=0; СуммаНДСУпрНаСебестоимость=0;
	
	Если НЕ Отказ Тогда
		// Извлечение товаров из производства
		// и помещение их в реализованные или проданные товары.
		// Получим остатки деталей в производстве по данному заказ-наряду.    
		
		ИнтеркампаниРазрешено = ЗапасыТоваров.ИнтеркампаниРазрешено(ШапкаДокумента.ХозОперация);
		Если ИнтеркампаниРазрешено Тогда
			
			ОрганизацииДляИнтеркампани = ЗапасыТоваров.ОрганизацииДляИнтеркампани(ШапкаДокумента.Организация, ШапкаДокумента.Дата);
			Если ОрганизацииДляИнтеркампани.Количество() = 0 Тогда
				ИнтеркампаниРазрешено = Ложь;
			КонецЕсли;
			
		Иначе
			
			ОрганизацииДляИнтеркампани = Новый Массив;
			
		КонецЕсли;
			
		НаборЗаписейТоварыОрганизацийКПередаче = Движения.ТоварыОрганизацийКПередаче;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТоварыВПроизводствеОстатки.Организация КАК Организация,
		               |	ТоварыВПроизводствеОстатки.Цех КАК Цех,
		               |	ТоварыВПроизводствеОстатки.Номенклатура КАК Номенклатура,
		               |	ТоварыВПроизводствеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |	ТоварыВПроизводствеОстатки.СтатусПартии КАК СтатусПартии,
		               |	ТоварыВПроизводствеОстатки.Партия КАК Партия,
		               |	ТоварыВПроизводствеОстатки.Партия.Контрагент КАК Поставщик,
		               |	ТоварыВПроизводствеОстатки.Партия.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		               |	ТоварыВПроизводствеОстатки.ГТД КАК ГТД,
		               |	СУММА(ТоварыВПроизводствеОстатки.КоличествоОстаток) КАК Количество,
		               |	СУММА(ТоварыВПроизводствеОстатки.СуммаОстаток) КАК Сумма,
		               |	СУММА(ТоварыВПроизводствеОстатки.СуммаНДСОстаток) КАК СуммаНДС,
		               |	СУММА(ТоварыВПроизводствеОстатки.СуммаБезНДСОстаток) КАК СуммаБезНДС,
		               |	СУММА(ТоварыВПроизводствеОстатки.СуммаУпрОстаток) КАК СуммаУпр,
		               |	СУММА(ТоварыВПроизводствеОстатки.СуммаНДСУпрОстаток) КАК СуммаНДСУпр,
		               |	СУММА(ТоварыВПроизводствеОстатки.СуммаБезНДСУпрОстаток) КАК СуммаБезНДСУпр,
		               |	ТоварыВПроизводствеОстатки.СкладИсточник КАК СкладИсточник
		               |ИЗ
		               |	РегистрНакопления.ТоварыВПроизводстве.Остатки(, ЗаказНаряд = &ЗаказНаряд) КАК ТоварыВПроизводствеОстатки
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ТоварыВПроизводствеОстатки.Цех,
		               |	ТоварыВПроизводствеОстатки.Номенклатура,
		               |	ТоварыВПроизводствеОстатки.ХарактеристикаНоменклатуры,
		               |	ТоварыВПроизводствеОстатки.СтатусПартии,
		               |	ТоварыВПроизводствеОстатки.Партия,
		               |	ТоварыВПроизводствеОстатки.Партия.Контрагент,
		               |	ТоварыВПроизводствеОстатки.Партия.ДоговорВзаиморасчетов,
		               |	ТоварыВПроизводствеОстатки.ГТД,
		               |	ТоварыВПроизводствеОстатки.СкладИсточник,
		               |	ТоварыВПроизводствеОстатки.Организация";
		
		ОбособленныйУчетТоваровПоОрганизациям = ЗапасыТоваров.ОбособленныйУчетТоваровПоОрганизациям(ШапкаДокумента.Дата);
		РежимКонтроляОстатковНаСкладахПоКомпании = ЗапасыТоваров.РежимКонтроляОстатковНаСкладахПоКомпании();
		Если НЕ ОбособленныйУчетТоваровПоОрганизациям Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТоварыВПроизводствеОстатки.Организация", "ТоварыВПроизводствеОстатки.Цех.Организация");
		
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ЗаказНаряд",ШапкаДокумента.Ссылка);
		// Наложим блокировку на считываемые данные
		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ТоварыВПроизводстве");
		ЗначенияБлокировки = Новый Соответствие;
		//andrec??? В запросе получаются остатки без отбора по дате, значит и блокировка должна быть без учета даты
		//Остатки по идее должны получаться на дату закрытия иначе будет отрицательные остатки в БП
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ШапкаДокумента.Дата));
		ЗначенияБлокировки.Вставить("ЗаказНаряд", ШапкаДокумента.Ссылка); 
		ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки);
		тзДеталиВПроизводстве = Запрос.Выполнить().Выгрузить();
		ЕстьПересчетСумм = Ложь;
		Если УчетПоРасчетнымДокументам Тогда
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
				|	ЗаказНарядТовары.Номенклатура КАК Номенклатура,
				|	ЗаказНарядТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
				|	ЗаказНарядТовары.СтавкаНДС КАК СтавкаНДС,
				|	СУММА(ВЫРАЗИТЬ(ЗаказНарядТовары.Количество * ЗаказНарядТовары.Коэффициент КАК ЧИСЛО(15, 3))) КАК Количество,
				|	СУММА(ЗаказНарядТовары.СуммаНДС) КАК СуммаНДС,
				|	СУММА(ЗаказНарядТовары.СуммаСкидки + ЗаказНарядТовары.СуммаСкидкиСтроки + ЗаказНарядТовары.СуммаСкидкиБонусами) КАК СуммаСкидки,
				|	СУММА(ЗаказНарядТовары.СуммаВсего) КАК Сумма,
				|	"""" КАК ИдентификаторРаботы,
				|	ИСТИНА КАК ЭтоТовар
				|ИЗ
				|	Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
				|ГДЕ
				|	ЗаказНарядТовары.Ссылка = &ЗаказНаряд
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗаказНарядТовары.Номенклатура,
				|	ЗаказНарядТовары.ХарактеристикаНоменклатуры,
				|	ЗаказНарядТовары.СтавкаНДС
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ЗаказНарядАвтоработы.Авторабота,
				|	НЕОПРЕДЕЛЕНО,
				|	ЗаказНарядАвтоработы.СтавкаНДС,
				|	ЗаказНарядАвтоработы.Количество,
				|	ЗаказНарядАвтоработы.СуммаНДС,
				|	ЗаказНарядАвтоработы.СуммаСкидки + ЗаказНарядАвтоработы.СуммаСкидкиСтроки + ЗаказНарядАвтоработы.СуммаСкидкиБонусами,
				|	ЗаказНарядАвтоработы.СуммаВсего,
				|	ЗаказНарядАвтоработы.ИдентификаторРаботы,
				|	ЛОЖЬ
				|ИЗ
				|	Документ.ЗаказНаряд.Автоработы КАК ЗаказНарядАвтоработы
				|ГДЕ
				|	ЗаказНарядАвтоработы.Ссылка = &ЗаказНаряд";
			Запрос.УстановитьПараметр("ЗаказНаряд",ШапкаДокумента.Ссылка);
			ТоварыАвтоработы = Запрос.Выполнить().Выгрузить();
			
			СведенияОВалюте = Новый Структура();
			СведенияОВалюте.Вставить("ВалютаДоговора", ДоговорВзаиморасчетов.ВалютаВзаиморасчетов);
			СведенияОВалюте.Вставить("ВалютаРегл", ВалютаРегл);
			СведенияОВалюте.Вставить("ВалютаУпр", ВалютаУпр);
			СведенияОВалюте.Вставить("КурсРегл", КурсРегл);
			СведенияОВалюте.Вставить("КурсУпр", КурсУпр);
			
			Если ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Платный
				И УчетПоРасчетнымДокументам Тогда
				РасчетыСКонтрагентами = РасчетыСКонтрагентамиСервер.ДвиженияРасчетовСКонтрагентамиПоДокументу(
					ЭтотОбъект,
					ШапкаДокумента);
				ЕстьПересчетСумм = ОбработкаСобытийДокументаСервер.ПересчитанаВВалюту(
					ШапкаДокумента,
					ТоварыАвтоработы,
					РасчетыСКонтрагентами,
					СведенияОВалюте);
			КонецЕсли;
			
			// Получим таблицу без авторабот
			тзДеталиЗаказНаряда = ТоварыАвтоработы.Скопировать();
			СтрокиСАвтоработами = тзДеталиЗаказНаряда.НайтиСтроки(Новый Структура("ЭтоТовар", Ложь));
			Для Каждого СтрокаДокумента Из СтрокиСАвтоработами Цикл
				тзДеталиЗаказНаряда.Удалить(СтрокаДокумента);
			КонецЦикла;
		Иначе
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
						 |	ЗаказНарядТовары.Номенклатура,
						 |	ЗаказНарядТовары.ХарактеристикаНоменклатуры,
						 |	ЗаказНарядТовары.СтавкаНДС,
						 |	СУММА(ВЫРАЗИТЬ(ЗаказНарядТовары.Количество * ЗаказНарядТовары.Коэффициент КАК ЧИСЛО(15,3))) КАК Количество,
						 |	СУММА(ЗаказНарядТовары.СуммаНДС) КАК СуммаНДС,
						 |	СУММА(ЗаказНарядТовары.СуммаСкидки + ЗаказНарядТовары.СуммаСкидкиСтроки + ЗаказНарядТовары.СуммаСкидкиБонусами) КАК СуммаСкидки,
						 |	СУММА(ЗаказНарядТовары.СуммаВсего) КАК Сумма
						 |ИЗ
						 |	Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
						 |ГДЕ
						 |	ЗаказНарядТовары.Ссылка = &ЗаказНаряд
						 |СГРУППИРОВАТЬ ПО
						 |	ЗаказНарядТовары.Номенклатура,
						 |	ЗаказНарядТовары.ХарактеристикаНоменклатуры,
						 |	ЗаказНарядТовары.СтавкаНДС";
			Запрос.УстановитьПараметр("ЗаказНаряд", ШапкаДокумента.Ссылка);
			тзДеталиЗаказНаряда = Запрос.Выполнить().Выгрузить();
		КонецЕсли;
		НаборЗаписейТоварыВПроизводстве=Движения.ТоварыВПроизводстве;
		НаборЗаписейРеализованныеТовары=Движения.РеализованныеТовары;
		Сообщение="";
		ПроверятьОстаткиВПроизводстве = Истина;  
		
		Если ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный И Не СписаниеТоваровПоСебестоимости Тогда
		
			// Получим порядок проверки себестоимости для Организации проводимого документа
			ПорядокПроверкиСебестоимостиТовараПриПродаже = УчетныеПолитикиСервер.Значение(
				"ПорядокПроверкиСебестоимостиТовараПриПродаже",
				Дата,
				Организация
			);
		
			КонтролироватьСебестоимость = ПолучитьЗначениеПараметраСтруктуры(
				ЭтотОбъект.ДополнительныеСвойства,
				"ПроверкаПродажиНижеСебестоимости",
				ПорядокПроверкиСебестоимостиТовараПриПродаже <> Перечисления.ПорядокПроверкиСебестоимостиПриПродаже.НеКонтролировать
					И ПраваИНастройкиПользователя.Значение("ЗапретитьПродажуНижеСебестоимости", ЭтотОбъект)
			);
			
			Если КонтролироватьСебестоимость Тогда
				
				МинимальныеНаценки = Новый Соответствие;
				Пользователь = АвторизованныйПользователь();
				ТаблицаМинимальныхНаценок = ТаблицаМинимальныхНаценок(Режим, Пользователь, тзДеталиЗаказНаряда);

			КонецЕсли;

		КонецЕсли; 
		СистемаНалогообложения = УчетныеПолитикиСервер.Значение(
			ПланыВидовХарактеристик.УчетныеПолитики.СистемаНалогообложения,
			Дата,
			Организация
		);
		Для каждого СтрокаЗаказНаряда Из тзДеталиЗаказНаряда Цикл   
			
			Если ЕстьПересчетСумм Тогда
				СуммаПродажи = СтрокаЗаказНаряда.Сумма;
				СуммаПродажиУпр = СтрокаЗаказНаряда.СуммаУпр;
				СуммаНДСПродажи = СтрокаЗаказНаряда.СуммаНДС;
				СуммаНДСУпрПродажи = СтрокаЗаказНаряда.СуммаНДСУпр;
				СуммаСкидкиПродажи = СтрокаЗаказНаряда.СуммаСкидки;
				СуммаСкидкиУпрПродажи = СтрокаЗаказНаряда.СуммаСкидкиУпр;
			Иначе
				СуммаПродажи=Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаЗаказНаряда.Сумма,ШапкаДокумента.ВалютаДокумента,ШапкаДокумента.КурсДокумента,ВалютаРегл,КурсРегл),2);
				СуммаПродажиУпр=Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаЗаказНаряда.Сумма,ШапкаДокумента.ВалютаДокумента,ШапкаДокумента.КурсДокумента,ВалютаУпр,КурсУпр),2);
				СуммаНДСПродажи=Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаЗаказНаряда.СуммаНДС,ШапкаДокумента.ВалютаДокумента,ШапкаДокумента.КурсДокумента,ВалютаРегл,КурсРегл),2);
				СуммаНДСУпрПродажи=Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаЗаказНаряда.СуммаНДС,ШапкаДокумента.ВалютаДокумента,ШапкаДокумента.КурсДокумента,ВалютаУпр,КурсУпр),2);
				СуммаСкидкиПродажи=Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаЗаказНаряда.СуммаСкидки,ШапкаДокумента.ВалютаДокумента,ШапкаДокумента.КурсДокумента,ВалютаРегл,КурсРегл),2);
				СуммаСкидкиУпрПродажи=Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаЗаказНаряда.СуммаСкидки,ШапкаДокумента.ВалютаДокумента,ШапкаДокумента.КурсДокумента,ВалютаУпр,КурсУпр),2);
			КонецЕсли;
			
			СебестоимостьПартийБезНДСИтого = 0;
			СебестоимостьПартийБезНДСУпрИтого = 0;
			СебестоимостьПартийУпрИтого = 0;
			СебестоимостьПартийИтого = 0;
			СуммаПродажиДляСебестоимостиУпр = СуммаПродажиУпр;
			СуммаПродажиБезНДС 	= СуммаПродажи - СуммаНДСПродажи;
			СуммаПродажиБезНДСУпр = СуммаПродажиУпр - СуммаНДСУпрПродажи;
			СуммаПродажиИтогоБезНДС = СуммаПродажиБезНДС;
			СуммаПродажиИтогоУпрБезНДС = СуммаПродажиБезНДСУпр;
			СуммаПродажиСНДСИтого = СуммаПродажи;
			СуммаПродажиСНДСУпрИтого = СуммаПродажиУпр;
			НоваяЗаписьПродажи = Неопределено;
			СуммаПродажиОсталось=СуммаПродажи;
			СуммаПродажиУпрОсталось=СуммаПродажиУпр;
			СуммаНДСПродажиОсталось=СуммаНДСПродажи;
			СуммаНДСУпрПродажиОсталось=СуммаНДСУпрПродажи;
			СуммаСкидкиУпрПродажиОсталось=СуммаСкидкиУпрПродажи;
			СуммаСкидкиПродажиОсталось=СуммаСкидкиПродажи;
			СтрокиВПроизводстве=тзДеталиВПроизводстве.НайтиСтроки(Новый Структура("Номенклатура,ХарактеристикаНоменклатуры",СтрокаЗаказНаряда.Номенклатура,СтрокаЗаказНаряда.ХарактеристикаНоменклатуры));
			ОсталосьСписать=СтрокаЗаказНаряда.Количество; Списано=0;
			Если НаСебестоимость Тогда
				СуммаНаСебестоимость=СуммаНаСебестоимость+СуммаПродажи;
				СуммаУпрНаСебестоимость=СуммаУпрНаСебестоимость+СуммаПродажиУпр;
				СуммаНДСНаСебестоимость=СуммаНДСНаСебестоимость+СуммаНДСПродажи;
				СуммаНДСУпрНаСебестоимость=СуммаНДСУпрНаСебестоимость + СуммаНДСУпрПродажи;
			КонецЕсли;
			Для Каждого СтрокаВПроизводстве Из СтрокиВПроизводстве Цикл
				
				Если ОсталосьСписать=0 Тогда Прервать; КонецЕсли;
				
				ВыполнитьИнтеркампани = ИнтеркампаниРазрешено И (ОрганизацииДляИнтеркампани.Найти(СтрокаВПроизводстве.Организация) <> Неопределено);
				
				Если ОбособленныйУчетТоваровПоОрганизациям И Не РежимКонтроляОстатковНаСкладахПоКомпании Тогда
					
					Если СтрокаВПроизводстве.Организация <> ШапкаДокумента.Организация
						И НЕ ВыполнитьИнтеркампани Тогда
						
						Код = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаВПроизводстве.Номенклатура);
						Сообщение = ?(ПустаяСтрока(Сообщение),Сообщение, Сообщение + Символы.ПС);
						Сообщение = Сообщение + НСтр("ru = 'Номенклатура [%1] <%2> перемещена в цех <%3> по организации <%4>, которая не соответствует организации заказ-наряда <%5>,
							|а также организации разрешенной для межфирменной перепродажи'");
						Сообщение = СтрШаблон(Сообщение, Код, СтрокаВПроизводстве.Номенклатура, СтрокаВПроизводстве.Цех, СтрокаВПроизводстве.Организация, ШапкаДокумента.Организация);
						Отказ=Истина;
						ПроверятьОстаткиВПроизводстве = Ложь;
						Продолжить;
						
					КонецЕсли;
				
				Иначе
					
					Если БалансВедетсяПоОрганизациям(ШапкаДокумента.Дата)
						И СтрокаВПроизводстве.Организация<>Организация Тогда
						
						Код = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаВПроизводстве.Номенклатура);
						Сообщение = ?(ПустаяСтрока(Сообщение),Сообщение, Сообщение + Символы.ПС);
						Сообщение = Сообщение + НСтр("ru = 'Номенклатура [%1] <%2> принадлежит цеху <%3>, организация которого не соответствует организации документа'");
						Сообщение = СтрШаблон(Сообщение, Код, СокрЛП(СтрокаВПроизводстве.Номенклатура), СокрЛП(СтрокаВПроизводстве.Цех));
						Отказ=Истина;
						ПроверятьОстаткиВПроизводстве = Ложь;
						Продолжить;
						
					КонецЕсли;
					
				КонецЕсли;
				Списывается=Мин(ОсталосьСписать,СтрокаВПроизводстве.Количество);
				НоваяЗаписьТоварыВПроизводстве=НаборЗаписейТоварыВПроизводстве.Добавить();
				НоваяЗаписьТоварыВПроизводстве.ВидДвижения=ВидДвиженияНакопления.Расход;
				НоваяЗаписьТоварыВПроизводстве.Период=ШапкаДокумента.Дата;
				НоваяЗаписьТоварыВПроизводстве.Регистратор=ШапкаДокумента.Ссылка;
				НоваяЗаписьТоварыВПроизводстве.ЗаказНаряд=ШапкаДокумента.Ссылка;
				НоваяЗаписьТоварыВПроизводстве.Цех=СтрокаВПроизводстве.Цех;
				НоваяЗаписьТоварыВПроизводстве.Организация=СтрокаВПроизводстве.Организация; // это либо организация цеха, либо организация остатков, что определяется в запросе
				НоваяЗаписьТоварыВПроизводстве.ЗапасыДругойОрганизацииПоИнтеркампани=ЗапасыТоваров.ЭтоЗапасыДругойОрганизацииПоИнтеркампани(СтрокаВПроизводстве.Организация, ШапкаДокумента.Организация, ШапкаДокумента.Дата);
				НоваяЗаписьТоварыВПроизводстве.Номенклатура=СтрокаВПроизводстве.Номенклатура;
				НоваяЗаписьТоварыВПроизводстве.ХарактеристикаНоменклатуры=СтрокаВПроизводстве.ХарактеристикаНоменклатуры;
				НоваяЗаписьТоварыВПроизводстве.СтатусПартии=СтрокаВПроизводстве.СтатусПартии;
				НоваяЗаписьТоварыВПроизводстве.Партия=СтрокаВПроизводстве.Партия;
				НоваяЗаписьТоварыВПроизводстве.ГТД=СтрокаВПроизводстве.ГТД;
				НоваяЗаписьТоварыВПроизводстве.СкладИсточник=СтрокаВПроизводстве.СкладИсточник;
				НоваяЗаписьТоварыВПроизводстве.ХозОперация=ШапкаДокумента.ХозОперация;
				НоваяЗаписьТоварыВПроизводстве.Количество=Списывается;
				НоваяЗаписьТоварыВПроизводстве.Сумма=?(СтрокаВПроизводстве.Количество=0,0,Окр((СтрокаВПроизводстве.Сумма*Списывается)/СтрокаВПроизводстве.Количество,2));
				НоваяЗаписьТоварыВПроизводстве.СуммаНДС=?(СтрокаВПроизводстве.Количество=0,0,Окр((СтрокаВПроизводстве.СуммаНДС*Списывается)/СтрокаВПроизводстве.Количество,2));
				НоваяЗаписьТоварыВПроизводстве.СуммаБезНДС=НоваяЗаписьТоварыВПроизводстве.Сумма-НоваяЗаписьТоварыВПроизводстве.СуммаНДС;
				НоваяЗаписьТоварыВПроизводстве.СуммаУпр=?(СтрокаВПроизводстве.Количество=0,0,Окр((СтрокаВПроизводстве.СуммаУпр*Списывается)/СтрокаВПроизводстве.Количество,2));
				НоваяЗаписьТоварыВПроизводстве.СуммаНДСУПр=?(СтрокаВПроизводстве.Количество=0,0,Окр((СтрокаВПроизводстве.СуммаНДСУпр*Списывается)/СтрокаВПроизводстве.Количество,2));
				НоваяЗаписьТоварыВПроизводстве.СуммаБезНДСУпр=НоваяЗаписьТоварыВПроизводстве.СуммаУпр-НоваяЗаписьТоварыВПроизводстве.СуммаНДСУпр;
				ОсталосьСписать=ОсталосьСписать-НоваяЗаписьТоварыВПроизводстве.Количество;
				Списано=Списано+НоваяЗаписьТоварыВПроизводстве.Количество;
				СтрокаВПроизводстве.Количество=СтрокаВПроизводстве.Количество-НоваяЗаписьТоварыВПроизводстве.Количество;
				СтрокаВПроизводстве.Сумма=СтрокаВПроизводстве.Сумма-НоваяЗаписьТоварыВПроизводстве.Сумма;
				СтрокаВПроизводстве.СуммаНДС=СтрокаВПроизводстве.СуммаНДС-НоваяЗаписьТоварыВПроизводстве.СуммаНДС;
				СтрокаВПроизводстве.СуммаБезНДС=СтрокаВПроизводстве.СуммаБезНДС-НоваяЗаписьТоварыВПроизводстве.СуммаБезНДС;
				СтрокаВПроизводстве.СуммаУпр=СтрокаВПроизводстве.СуммаУпр-НоваяЗаписьТоварыВПроизводстве.СуммаУпр;
				СтрокаВПроизводстве.СуммаНДСУпр=СтрокаВПроизводстве.СуммаНДСУпр-НоваяЗаписьТоварыВПроизводстве.СуммаНДСУпр;
				СтрокаВПроизводстве.СуммаБезНДСУпр=СтрокаВПроизводстве.СуммаБезНДСУпр-НоваяЗаписьТоварыВПроизводстве.СуммаБезНДСУпр;
				Если СтрокаВПроизводстве.Количество=0 Тогда
					НоваяЗаписьТоварыВПроизводстве.Сумма=НоваяЗаписьТоварыВПроизводстве.Сумма+СтрокаВПроизводстве.Сумма;
					НоваяЗаписьТоварыВПроизводстве.СуммаНДС=НоваяЗаписьТоварыВПроизводстве.СуммаНДС+СтрокаВПроизводстве.СуммаНДС;
					НоваяЗаписьТоварыВПроизводстве.СуммаБезНДС=НоваяЗаписьТоварыВПроизводстве.СуммаБезНДС+СтрокаВПроизводстве.СуммаБезНДС;
					НоваяЗаписьТоварыВПроизводстве.СуммаУпр=НоваяЗаписьТоварыВПроизводстве.СуммаУпр+СтрокаВПроизводстве.СуммаУпр;
					НоваяЗаписьТоварыВПроизводстве.СуммаНДСУпр=НоваяЗаписьТоварыВПроизводстве.СуммаНДСУпр+СтрокаВПроизводстве.СуммаНДСУпр;
					НоваяЗаписьТоварыВПроизводстве.СуммаБезНДСУпр=НоваяЗаписьТоварыВПроизводстве.СуммаБезНДСУпр+СтрокаВПроизводстве.СуммаБезНДСУпр;
				КонецЕсли;
				НоваяЗаписьКомплектацияАвтомобилей=Неопределено;
				Если ЭтоКомплектацияСборкаАвтомобиля Тогда
					// Если мы комплектуем автомобиль
					// Переместим детали в партионный регистр комплектации автомобиля.
					Если БалансВедетсяПоОрганизациям(ШапкаДокумента.Дата) Тогда
						Если АвтомобильСкладКомпании.Организация<>НоваяЗаписьТоварыВПроизводстве.Цех.Организация Тогда
							ОбщегоНазначения.СообщитьПользователю(
								СтрШаблон(
									НСтр("ru = 'Организация склада хранения автомобиля <%1> не соответствует организации цеха <%2> .'"),
									СокрЛП(АвтомобильСкладКомпании.Организация),
									СокрЛП(НоваяЗаписьТоварыВПроизводстве.Цех)
								),
								ЭтотОбъект
							);
							Отказ=Истина;
						КонецЕсли;
					КонецЕсли;
					Если НЕ Отказ Тогда
						НоваяЗаписьКомплектацияАвтомобилей=НаборЗаписейКомплектацияАвтомобилей.Добавить();
						НоваяЗаписьКомплектацияАвтомобилей.ВидДвижения=ВидДвиженияНакопления.Приход;
						НоваяЗаписьКомплектацияАвтомобилей.Период=ШапкаДокумента.Дата;
						НоваяЗаписьКомплектацияАвтомобилей.Регистратор=ШапкаДокумента.Ссылка;
						НоваяЗаписьКомплектацияАвтомобилей.Автомобиль=ШапкаДокумента.Автомобиль;
						НоваяЗаписьКомплектацияАвтомобилей.СкладКомпании=АвтомобильСкладКомпании;
						НоваяЗаписьКомплектацияАвтомобилей.Номенклатура=СтрокаВПроизводстве.Номенклатура;
						НоваяЗаписьКомплектацияАвтомобилей.ХарактеристикаНоменклатуры=СтрокаВПроизводстве.ХарактеристикаНоменклатуры;
						НоваяЗаписьКомплектацияАвтомобилей.СтатусПартии=Перечисления.СтатусыПартий.ТоварКупленный;
						НоваяЗаписьКомплектацияАвтомобилей.Партия=СтрокаВПроизводстве.Партия;
						НоваяЗаписьКомплектацияАвтомобилей.ГТД=СтрокаВПроизводстве.ГТД;
						НоваяЗаписьКомплектацияАвтомобилей.ХозОперация=ШапкаДокумента.ХозОперация;
						НоваяЗаписьКомплектацияАвтомобилей.СтавкаНДС=СтрокаЗаказНаряда.СтавкаНДС;
						НоваяЗаписьКомплектацияАвтомобилей.Количество=НоваяЗаписьТоварыВПроизводстве.Количество;
						НоваяЗаписьКомплектацияАвтомобилей.Сумма=НоваяЗаписьТоварыВПроизводстве.Сумма;
						НоваяЗаписьКомплектацияАвтомобилей.СуммаНДС=НоваяЗаписьТоварыВПроизводстве.СуммаНДС;
						НоваяЗаписьКомплектацияАвтомобилей.СуммаБезНДС=НоваяЗаписьТоварыВПроизводстве.СуммаБезНДС;
						НоваяЗаписьКомплектацияАвтомобилей.СуммаУпр=НоваяЗаписьТоварыВПроизводстве.СуммаУпр;
						НоваяЗаписьКомплектацияАвтомобилей.СуммаНДСУпр=НоваяЗаписьТоварыВПроизводстве.СуммаНДСУпр;
						НоваяЗаписьКомплектацияАвтомобилей.СуммаБезНДСУпр=НоваяЗаписьТоварыВПроизводстве.СуммаБезНДСУпр;
						СуммаПродажи=(СтрокаЗаказНаряда.Сумма*НоваяЗаписьКомплектацияАвтомобилей.Количество)/СтрокаЗаказНаряда.Количество;
						НоваяЗаписьКомплектацияАвтомобилей.СуммаПродажи=Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаПродажи,ШапкаДокумента.ВалютаДокумента,ШапкаДокумента.КурсДокумента,ВалютаРегл,КурсРегл),2);
						НоваяЗаписьКомплектацияАвтомобилей.СуммаПродажиУпр=Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаПродажи,ШапкаДокумента.ВалютаДокумента,ШапкаДокумента.КурсДокумента,ВалютаУпр,КурсУпр),2);
					КонецЕсли;
				КонецЕсли;
				Если НЕ НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
					// Сформировать движения для товаров, взятых на комиссию по регистру РеализацияТоваров.
					Если СтрокаВПроизводстве.СтатусПартии=Перечисления.СтатусыПартий.ТоварПринятыйКомиссия Тогда
						// Комиссионные товары помещаем в реализованные
						НоваяЗаписьРеализованныеТовары=НаборЗаписейРеализованныеТовары.Добавить();
						НоваяЗаписьРеализованныеТовары.ВидДвижения=ВидДвиженияНакопления.Приход;
						НоваяЗаписьРеализованныеТовары.Период=ШапкаДокумента.Дата;
						НоваяЗаписьРеализованныеТовары.Регистратор=ШапкаДокумента.Ссылка;
						НоваяЗаписьРеализованныеТовары.Контрагент=СтрокаВПроизводстве.Поставщик;
						НоваяЗаписьРеализованныеТовары.ДоговорВзаиморасчетов=СтрокаВПроизводстве.ДоговорВзаиморасчетов;
						НоваяЗаписьРеализованныеТовары.Номенклатура=СтрокаВПроизводстве.Номенклатура;
						НоваяЗаписьРеализованныеТовары.ХарактеристикаНоменклатуры=СтрокаВПроизводстве.ХарактеристикаНоменклатуры;
						НоваяЗаписьРеализованныеТовары.ДокументПередачи=СтрокаВПроизводстве.Партия;
						НоваяЗаписьРеализованныеТовары.ГТД=СтрокаВПроизводстве.ГТД;
						НоваяЗаписьРеализованныеТовары.ХозОперация=ШапкаДокумента.ХозОперация;
						НоваяЗаписьРеализованныеТовары.Количество=НоваяЗаписьТоварыВПроизводстве.Количество;
						НоваяЗаписьРеализованныеТовары.СуммаРегл=НоваяЗаписьТоварыВПроизводстве.Сумма;
						НоваяЗаписьРеализованныеТовары.СуммаНДС=НоваяЗаписьТоварыВПроизводстве.СуммаНДС;
						НоваяЗаписьРеализованныеТовары.СуммаБезНДС=НоваяЗаписьТоварыВПроизводстве.СуммаБезНДС;
						НоваяЗаписьРеализованныеТовары.СуммаУпр=НоваяЗаписьТоварыВПроизводстве.СуммаУпр;
						НоваяЗаписьРеализованныеТовары.СуммаНДСУпр=НоваяЗаписьТоварыВПроизводстве.СуммаНДСУпр;
						НоваяЗаписьРеализованныеТовары.СуммаБезНДСУпр=НоваяЗаписьТоварыВПроизводстве.СуммаБезНДСУпр;
						НоваяЗаписьРеализованныеТовары.СуммаПродажи=Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте((СтрокаЗаказНаряда.Сумма*НоваяЗаписьТоварыВПроизводстве.Количество)/СтрокаЗаказНаряда.Количество,ШапкаДокумента.ВалютаДокумента,ШапкаДокумента.КурсДокумента,ВалютаУпр,КурсУпр),2);
						НоваяЗаписьРеализованныеТовары.СуммаПродажиРегл=Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте((СтрокаЗаказНаряда.Сумма*НоваяЗаписьТоварыВПроизводстве.Количество)/СтрокаЗаказНаряда.Количество,ШапкаДокумента.ВалютаДокумента,ШапкаДокумента.КурсДокумента,ВалютаРегл,КурсРегл),2);
						// СебестоимостьРавнаПродаже
						Если НЕ НоваяЗаписьРеализованныеТовары.ДоговорВзаиморасчетов.КомиссияОтчетНаОснованииПродаж Тогда
							НоваяЗаписьРеализованныеТовары.СуммаРегл      = НоваяЗаписьРеализованныеТовары.СуммаПродажиРегл;
							НоваяЗаписьРеализованныеТовары.СуммаНДС       = Окр((НоваяЗаписьРеализованныеТовары.СуммаРегл * СтрокаЗаказНаряда.СтавкаНДС.Ставка)/(100 + СтрокаЗаказНаряда.СтавкаНДС.Ставка),2);
							НоваяЗаписьРеализованныеТовары.СуммаБезНДС    = НоваяЗаписьРеализованныеТовары.СуммаРегл - НоваяЗаписьРеализованныеТовары.СуммаНДС;
							НоваяЗаписьРеализованныеТовары.СуммаУпр       = НоваяЗаписьРеализованныеТовары.СуммаПродажи;
							НоваяЗаписьРеализованныеТовары.СуммаНДСУпр    = Окр(НоваяЗаписьРеализованныеТовары.СуммаПродажи*СтрокаЗаказНаряда.СтавкаНДС.Ставка/(100 + СтрокаЗаказНаряда.СтавкаНДС.Ставка),2);
							НоваяЗаписьРеализованныеТовары.СуммаБезНДСУпр = НоваяЗаписьРеализованныеТовары.СуммаУпр - НоваяЗаписьРеализованныеТовары.СуммаНДСУпр;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;  
				
				Если ПорядокПроверкиСебестоимостиТовараПриПродаже = Перечисления.ПорядокПроверкиСебестоимостиПриПродаже.ПоКаждойПартииВОтдельности
					И КонтролироватьСебестоимость
					И НЕ СтрокаВПроизводстве.СтатусПартии = Перечисления.СтатусыПартий.ТоварПринятыйКомиссия
					И НоваяЗаписьТоварыВПроизводстве.Количество > 0 Тогда
						 
						Показатели = Новый Структура;
						Показатели.Вставить("СебестоимостьБезНДС",    НоваяЗаписьТоварыВПроизводстве.СуммаБезНДС);
						Показатели.Вставить("СебестоимостьБезНДСУпр", НоваяЗаписьТоварыВПроизводстве.СуммаБезНДСУпр);
						Показатели.Вставить("СуммаБезНДС",            СуммаПродажиБезНДС *НоваяЗаписьТоварыВПроизводстве.Количество/СтрокаЗаказНаряда.Количество);
						Показатели.Вставить("СуммаБезНДСУпр",         СуммаПродажиБезНДСУпр*НоваяЗаписьТоварыВПроизводстве.Количество/СтрокаЗаказНаряда.Количество);
						Показатели.Вставить("ВалютаРегл",             ВалютаРегл);
						Показатели.Вставить("КурсРегл",               КурсРегл);
						Показатели.Вставить("ВалютаУпр",              ВалютаУпр);
						Показатели.Вставить("СистемаНалогообложения", СистемаНалогообложения);
						Показатели.Вставить("Себестоимость", НоваяЗаписьТоварыВПроизводстве.Сумма);
						Показатели.Вставить("СебестоимостьУпр", НоваяЗаписьТоварыВПроизводстве.СуммаУпр);
						Показатели.Вставить("Сумма", СуммаПродажи * НоваяЗаписьТоварыВПроизводстве.Количество / СтрокаЗаказНаряда.Количество);
						Показатели.Вставить("СуммаУпр", СуммаПродажиУпр * НоваяЗаписьТоварыВПроизводстве.Количество / СтрокаЗаказНаряда.Количество);
						РезультатПроверки = ПроверитьПродажуНижеСебестоимости(
							тзДеталиЗаказНаряда,
							СтрокаЗаказНаряда,
							МинимальныеНаценки,
							Показатели,
							Пользователь,
							ТаблицаМинимальныхНаценок
						);
						Отказ = Отказ ИЛИ Не РезультатПроверки;
				КонецЕсли; 
					
				Если  СтрокаВПроизводстве.СтатусПартии = Перечисления.СтатусыПартий.ТоварПринятыйКомиссия Тогда 
					СуммаПродажиИтогоБезНДС	    = СуммаПродажиИтогоБезНДС - НоваяЗаписьТоварыВПроизводстве.СуммаБезНДС;
					СуммаПродажиИтогоУпрБезНДС	= СуммаПродажиИтогоУпрБезНДС - НоваяЗаписьТоварыВПроизводстве.СуммаБезНДСУпр;
					СуммаПродажиСНДСИтого		= СуммаПродажиСНДСИтого - НоваяЗаписьТоварыВПроизводстве.Сумма;
					СуммаПродажиСНДСУпрИтого	= СуммаПродажиСНДСУпрИтого - НоваяЗаписьТоварыВПроизводстве.СуммаУпр;
				Иначе 
					СебестоимостьПартийБезНДСИтого 		= СебестоимостьПартийБезНДСИтого + НоваяЗаписьТоварыВПроизводстве.СуммаБезНДС;
					СебестоимостьПартийБезНДСУпрИтого	= СебестоимостьПартийБезНДСУпрИтого + НоваяЗаписьТоварыВПроизводстве.СуммаБезНДСУпр;
					СебестоимостьПартийУпрИтого = СебестоимостьПартийУпрИтого + НоваяЗаписьТоварыВПроизводстве.СуммаУпр;
					СебестоимостьПартийИтого = СебестоимостьПартийИтого + НоваяЗаписьТоварыВПроизводстве.Сумма;
				КонецЕсли;	

				Если ВыполнитьИнтеркампани Тогда
					
					НоваяЗаписьТоварыОрганизацийКПередаче = НаборЗаписейТоварыОрганизацийКПередаче.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗаписьТоварыОрганизацийКПередаче, НоваяЗаписьТоварыВПроизводстве);
					НоваяЗаписьТоварыОрганизацийКПередаче.ВидДвижения 				= ВидДвиженияНакопления.Приход;
					НоваяЗаписьТоварыОрганизацийКПередаче.СкладКомпании 			= СтрокаВПроизводстве.Цех;
					НоваяЗаписьТоварыОрганизацийКПередаче.ОрганизацияОтправитель 	= СтрокаВПроизводстве.Организация;
					НоваяЗаписьТоварыОрганизацийКПередаче.ОрганизацияПолучатель 	= ШапкаДокумента.Организация;
					
				КонецЕсли;
				
				Если СтрокаВПроизводстве.Количество=0 Тогда
					тзДеталиВПроизводстве.Удалить(СтрокаВПроизводстве);
				КонецЕсли;
				
			КонецЦикла;   
			Если ПорядокПроверкиСебестоимостиТовараПриПродаже = Перечисления.ПорядокПроверкиСебестоимостиПриПродаже.ПоСреднейСтоимостиСписания
				И КонтролироватьСебестоимость Тогда  

					Показатели = Новый Структура;
					Показатели.Вставить("СебестоимостьБезНДС",    СебестоимостьПартийБезНДСИтого);
					Показатели.Вставить("СебестоимостьБезНДСУпр", СебестоимостьПартийБезНДСУпрИтого);
					Показатели.Вставить("СуммаБезНДС",            СуммаПродажиИтогоБезНДС);
					Показатели.Вставить("СуммаБезНДСУпр",         СуммаПродажиИтогоУпрБезНДС);
					Показатели.Вставить("ВалютаРегл",             ВалютаРегл);
					Показатели.Вставить("КурсРегл",               КурсРегл);
					Показатели.Вставить("ВалютаУпр",              ВалютаУпр);
					Показатели.Вставить("СистемаНалогообложения", СистемаНалогообложения);
					Показатели.Вставить("Себестоимость", СебестоимостьПартийИтого);
					Показатели.Вставить("СебестоимостьУпр", СебестоимостьПартийУпрИтого);
					Показатели.Вставить("Сумма", СуммаПродажиСНДСИтого);
					Показатели.Вставить("СуммаУпр", СуммаПродажиСНДСУпрИтого);
					РезультатПроверки = ПроверитьПродажуНижеСебестоимости(
						тзДеталиЗаказНаряда,
						СтрокаЗаказНаряда,
						МинимальныеНаценки,
						Показатели,
						Пользователь,
						ТаблицаМинимальныхНаценок
					);
					Отказ =  Отказ ИЛИ Не РезультатПроверки;

			КонецЕсли;

			Если (НЕ Отказ) И (ОсталосьСписать<>0) Тогда
				// Остаток в производстве менее чем в заказ-наряде.
				Если НЕ ПустаяСтрока(Сообщение) Тогда
					Сообщение = Сообщение + Символы.ПС;
				КонецЕсли;
				Код = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаЗаказНаряда.Номенклатура);
				Сообщение = Сообщение + СтрШаблон(НСтр("ru = 'Товар [%1] ""%2""'"), Код, СокрЛП(СтрокаЗаказНаряда.Номенклатура));
				Если ЗначениеЗаполнено(СтрокаЗаказНаряда.ХарактеристикаНоменклатуры) Тогда
					Сообщение = Сообщение
						+ Символы.НПП
						+ СТрШаблон(НСтр("ru = 'с характеристикой ""%1""'"), СокрЛП(СтрокаЗаказНаряда.ХарактеристикаНоменклатуры));
				КонецЕсли;
				Сообщение = Сообщение + ". ";
				Сообщение = Сообщение
					+ СтрШаблон(
						НСтр("ru = 'Требуется по заказ-наряду %1 %2. Помещено в производство %3 %4. Недостает для завершения %5 %6'"),
						СокрЛП(СтрокаЗаказНаряда.Количество),
						СокрЛП(СтрокаЗаказНаряда.Номенклатура.БазоваяЕдиницаИзмерения),
						СокрЛП(Списано),
						СокрЛП(СтрокаЗаказНаряда.Номенклатура.БазоваяЕдиницаИзмерения),
						СокрЛП(ОсталосьСписать),
						СокрЛП(СтрокаЗаказНаряда.Номенклатура.БазоваяЕдиницаИзмерения)
					);
				
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Проверим, не находятся ли товары в разных цехах
		ВременныйНаборЗаписейТоварыВПроизводстве = НаборЗаписейТоварыВПроизводстве.Выгрузить();
		КонтрольДеталейВПроизводствеПриЗакрытииЗаказНаряда = УчетныеПолитикиСервер.Значение(
			"КонтрольДеталейВПроизводствеПриЗакрытииЗаказНаряда", , Организация);
		ЗаказНарядВыполнен = ?(Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен, Истина, Ложь);
		Если КонтрольДеталейВПроизводствеПриЗакрытииЗаказНаряда И ЗаказНарядВыполнен Тогда
			Свертка = ВременныйНаборЗаписейТоварыВПроизводстве.Скопировать();
			Свертка.Свернуть("Цех");
			Если Свертка.Количество() > 1 Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выполнение заказ-наряда не возможно. Все товары должны находиться в одном цехе.'"));
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Платный Тогда
			ВременныйНаборЗаписейТоварыВПроизводстве.Колонки.Добавить("СкладКомпании");
			ВременныйНаборЗаписейТоварыВПроизводстве.ЗагрузитьКолонку(НаборЗаписейТоварыВПроизводстве.ВыгрузитьКолонку("Цех"),"СкладКомпании");
			ВременныйНаборЗаписейТоварыВПроизводстве.Сортировать("Сумма ВОЗР");
			НаборЗаписейПродажи = Движения.Продажи;
			НаборЗаписейПродажи.РежимПроведения = Режим;
			НаборЗаписейПродажи.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейПродажи.ДокументПродажи = ШапкаДокумента.ДокументПродажи;
			НаборЗаписейПродажи.Сторно = Ложь;
			НаборЗаписейПродажи.Покупатель = ШапкаДокумента.Контрагент;
			НаборЗаписейПродажи.СкладКомпании = ШапкаДокумента.Цех;
			тзДеталиЗаказНаряда.Колонки.Добавить("Автомобиль", Новый ОписаниеТипов("СправочникСсылка.Автомобили"));
			тзДеталиЗаказНаряда.ЗаполнитьЗначения(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СводныйРемонтныйЗаказ,"Автомобиль"),
				"Автомобиль"
			);
			НаборЗаписейПродажи.ЕстьАвтомобиль = Истина;
			НаборЗаписейПродажи.Автомобиль = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СводныйРемонтныйЗаказ,"Автомобиль");
			НаборЗаписейПродажи.РезультатЗапросаПоТоварам = тзДеталиЗаказНаряда;
			НаборЗаписейПродажи.РезультатЗапросаПоПартиям = ВременныйНаборЗаписейТоварыВПроизводстве;
			НаборЗаписейПродажи.ДоговорВзаиморасчетов = ШапкаДокумента.ДоговорВзаиморасчетов;
			НаборЗаписейПродажи.ПодразделениеКомпании = ШапкаДокумента.ПодразделениеКомпании;
			НаборЗаписейПродажи.ИмяРеквизитаДокумент = Неопределено;
			НаборЗаписейПродажи.Комиссия = Ложь;
			НаборЗаписейПродажи.ПоБазовомуКоличеству = Истина;
			НаборЗаписейПродажи.ШапкаДокумента = ШапкаДокумента;
			НаборЗаписейПродажи.ПересчитатьСуммыПоРасчетамСКонтрагентами = Не ЕстьПересчетСумм;
			Отказ = НЕ НаборЗаписейПродажи.Приход() ИЛИ Отказ;
		КонецЕсли; 
		
		ТаблицаСебестоимостиМатериалов = Новый ТаблицаЗначений;
		ТаблицаСебестоимостиМатериалов.Колонки.Добавить("ИдентификаторРаботы", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
		ТаблицаСебестоимостиМатериалов.Колонки.Добавить("Сумма",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаСебестоимостиМатериалов.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаСебестоимостиМатериалов.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаСебестоимостиМатериалов.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаСебестоимостиМатериалов.Колонки.Добавить("СуммаНДСУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаСебестоимостиМатериалов.Колонки.Добавить("СуммаБезНДСУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		Запрос.Текст="ВЫБРАТЬ
					 |	ЗаказНарядМатериалы.ИдентификаторРаботы,
					 |	ЗаказНарядМатериалы.Номенклатура,
					 |	ЗаказНарядМатериалы.ХарактеристикаНоменклатуры,
					 |	СУММА(ЗаказНарядМатериалы.Количество * ЗаказНарядМатериалы.Коэффициент) КАК Количество
					 |ИЗ
					 |	Документ.ЗаказНаряд.Материалы КАК ЗаказНарядМатериалы
					 |ГДЕ
					 |	ЗаказНарядМатериалы.Ссылка = &ЗаказНаряд
					 |СГРУППИРОВАТЬ ПО
					 |	ЗаказНарядМатериалы.ИдентификаторРаботы,
					 |	ЗаказНарядМатериалы.Номенклатура,
					 |	ЗаказНарядМатериалы.ХарактеристикаНоменклатуры";
		
		Выборка = Запрос.Выполнить().Выбрать();
		//Сообщение="";
		Пока Выборка.Следующий() Цикл
			СтрокиВПроизводстве = тзДеталиВПроизводстве.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", Выборка.Номенклатура, Выборка.ХарактеристикаНоменклатуры));
			ОсталосьСписать = Выборка.Количество;
			Списано         = 0;
			Для Каждого СтрокаВПроизводстве Из СтрокиВПроизводстве Цикл
				Если ОсталосьСписать=0 Тогда
					Прервать;
				КонецЕсли;
				
				ВыполнитьИнтеркампани = ИнтеркампаниРазрешено И (ОрганизацииДляИнтеркампани.Найти(СтрокаВПроизводстве.Организация) <> Неопределено);
				
				Если ОбособленныйУчетТоваровПоОрганизациям И Не РежимКонтроляОстатковНаСкладахПоКомпании Тогда
					
					Если СтрокаВПроизводстве.Организация <> ШапкаДокумента.Организация
						И НЕ ВыполнитьИнтеркампани Тогда
						
						Код = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаВПроизводстве.Номенклатура);
						Сообщение = ?(ПустаяСтрока(Сообщение),Сообщение, Сообщение + Символы.ПС);
						Сообщение = Сообщение + НСтр("ru = 'Номенклатура [%1] <%2> перемещена в цех <%3> по организации <%4>, которая не соответствует организации заказ-наряда <%5>,
							|а также организации разрешенной для межфирменной перепродажи'");
						Сообщение = СтрШаблон(Сообщение, Код, СтрокаВПроизводстве.Номенклатура, СтрокаВПроизводстве.Цех, СтрокаВПроизводстве.Организация, ШапкаДокумента.Организация);
						Отказ=Истина;
						ПроверятьОстаткиВПроизводстве = Ложь;
						Продолжить;
						
					КонецЕсли;
				
				Иначе
				
					Если БалансВедетсяПоОрганизациям(ШапкаДокумента.Дата)
						И СтрокаВПроизводстве.Организация<>Организация Тогда
					
						Код = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаВПроизводстве.Номенклатура);
						Сообщение = ?(ПустаяСтрока(Сообщение),Сообщение, Сообщение + Символы.ПС);
						Сообщение = Сообщение + НСтр("ru = 'Номенклатура [%1] <%2> принадлежит цеху <%3>, организация которого не соответствует организации документа'");
						Сообщение = СтрШаблон(Сообщение, Код, СокрЛП(СтрокаВПроизводстве.Номенклатура), СокрЛП(СтрокаВПроизводстве.Цех));
						Отказ=Истина;
						ПроверятьОстаткиВПроизводстве = Ложь;
						Продолжить;
						
					КонецЕсли;
				
				КонецЕсли;
			
				НоваяЗаписьТоварыВПроизводстве = НаборЗаписейТоварыВПроизводстве.Добавить();
				НоваяЗаписьТоварыВПроизводстве.ВидДвижения                = ВидДвиженияНакопления.Расход;
				НоваяЗаписьТоварыВПроизводстве.Период                     = ШапкаДокумента.Дата;
				НоваяЗаписьТоварыВПроизводстве.Регистратор                = ШапкаДокумента.Ссылка;
				НоваяЗаписьТоварыВПроизводстве.ЗаказНаряд                 = ШапкаДокумента.Ссылка;
				НоваяЗаписьТоварыВПроизводстве.Цех                        = СтрокаВПроизводстве.Цех;
				НоваяЗаписьТоварыВПроизводстве.Организация                = СтрокаВПроизводстве.Организация; //это либо организация цеха, либо организация остатков, что определяется в запросе
				НоваяЗаписьТоварыВПроизводстве.ЗапасыДругойОрганизацииПоИнтеркампани=ЗапасыТоваров.ЭтоЗапасыДругойОрганизацииПоИнтеркампани(СтрокаВПроизводстве.Организация, ШапкаДокумента.Организация, ШапкаДокумента.Дата);
				НоваяЗаписьТоварыВПроизводстве.Номенклатура               = СтрокаВПроизводстве.Номенклатура;
				НоваяЗаписьТоварыВПроизводстве.ХарактеристикаНоменклатуры = СтрокаВПроизводстве.ХарактеристикаНоменклатуры;
				НоваяЗаписьТоварыВПроизводстве.СтатусПартии               = СтрокаВПроизводстве.СтатусПартии;
				НоваяЗаписьТоварыВПроизводстве.Партия                     = СтрокаВПроизводстве.Партия;
				НоваяЗаписьТоварыВПроизводстве.ГТД                        = СтрокаВПроизводстве.ГТД; 
				НоваяЗаписьТоварыВПроизводстве.СкладИсточник			  = СтрокаВПроизводстве.СкладИсточник;
				НоваяЗаписьТоварыВПроизводстве.ХозОперация                = ШапкаДокумента.ХозОперация;
				
				УдалитьСтрокуВПроизводстве = Ложь;
				Если СтрокаВПроизводстве.Количество>ОсталосьСписать Тогда
					НоваяЗаписьТоварыВПроизводстве.Количество		= ОсталосьСписать;
					НоваяЗаписьТоварыВПроизводстве.Сумма			= Окр((СтрокаВПроизводстве.Сумма*ОсталосьСписать)/СтрокаВПроизводстве.Количество, 2);
					НоваяЗаписьТоварыВПроизводстве.СуммаНДС			= Окр((СтрокаВПроизводстве.СуммаНДС*ОсталосьСписать)/СтрокаВПроизводстве.Количество, 2);
					НоваяЗаписьТоварыВПроизводстве.СуммаБезНДС		= Окр((СтрокаВПроизводстве.СуммаБезНДС*ОсталосьСписать)/СтрокаВПроизводстве.Количество, 2);
					НоваяЗаписьТоварыВПроизводстве.СуммаУпр			= Окр((СтрокаВПроизводстве.СуммаУпр*ОсталосьСписать)/СтрокаВПроизводстве.Количество, 2);
					НоваяЗаписьТоварыВПроизводстве.СуммаНДСУпр		= Окр((СтрокаВПроизводстве.СуммаНДСУпр*ОсталосьСписать)/СтрокаВПроизводстве.Количество, 2);
					НоваяЗаписьТоварыВПроизводстве.СуммаБезНДСУпр	= Окр((СтрокаВПроизводстве.СуммаБезНДСУпр*ОсталосьСписать)/СтрокаВПроизводстве.Количество, 2);
					
					СтрокаВПроизводстве.Количество		= СтрокаВПроизводстве.Количество - ОсталосьСписать;
					СтрокаВПроизводстве.Сумма			= СтрокаВПроизводстве.Сумма - НоваяЗаписьТоварыВПроизводстве.Сумма;
					СтрокаВПроизводстве.СуммаНДС		= СтрокаВПроизводстве.СуммаНДС - НоваяЗаписьТоварыВПроизводстве.СуммаНДС;
					СтрокаВПроизводстве.СуммаБезНДС		= СтрокаВПроизводстве.СуммаБезНДС - НоваяЗаписьТоварыВПроизводстве.СуммаБезНДС;
					СтрокаВПроизводстве.СуммаУпр		= СтрокаВПроизводстве.СуммаУпр - НоваяЗаписьТоварыВПроизводстве.СуммаУпр;
					СтрокаВПроизводстве.СуммаНДСУпр		= СтрокаВПроизводстве.СуммаНДСУпр - НоваяЗаписьТоварыВПроизводстве.СуммаНДСУпр;
					СтрокаВПроизводстве.СуммаБезНДСУпр	= СтрокаВПроизводстве.СуммаБезНДСУпр - НоваяЗаписьТоварыВПроизводстве.СуммаБезНДСУпр;
					
					ОсталосьСписать = 0;
				Иначе
					НоваяЗаписьТоварыВПроизводстве.Количество		= СтрокаВПроизводстве.Количество;
					НоваяЗаписьТоварыВПроизводстве.Сумма			= СтрокаВПроизводстве.Сумма;
					НоваяЗаписьТоварыВПроизводстве.СуммаНДС			= СтрокаВПроизводстве.СуммаНДС;
					НоваяЗаписьТоварыВПроизводстве.СуммаБезНДС		= СтрокаВПроизводстве.СуммаБезНДС;
					НоваяЗаписьТоварыВПроизводстве.СуммаУпр			= СтрокаВПроизводстве.СуммаУпр;
					НоваяЗаписьТоварыВПроизводстве.СуммаНДСУпр		= СтрокаВПроизводстве.СуммаНДСУпр;
					НоваяЗаписьТоварыВПроизводстве.СуммаБезНДСУпр	= СтрокаВПроизводстве.СуммаБезНДСУпр;
					ОсталосьСписать = ОсталосьСписать - СтрокаВПроизводстве.Количество;
					
					УдалитьСтрокуВПроизводстве = Истина;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаСебестоимостиМатериалов.Добавить();
				НоваяСтрока.ИдентификаторРаботы = Выборка.ИдентификаторРаботы;
				НоваяСтрока.Сумма			= НоваяЗаписьТоварыВПроизводстве.Сумма;
				НоваяСтрока.СуммаНДС		= НоваяЗаписьТоварыВПроизводстве.СуммаНДС;
				НоваяСтрока.СуммаБезНДС		= НоваяЗаписьТоварыВПроизводстве.СуммаБезНДС;
				НоваяСтрока.СуммаУпр		= НоваяЗаписьТоварыВПроизводстве.СуммаУпр;
				НоваяСтрока.СуммаНДСУпр		= НоваяЗаписьТоварыВПроизводстве.СуммаНДСУпр;
				НоваяСтрока.СуммаБезНДСУпр	= НоваяЗаписьТоварыВПроизводстве.СуммаБезНДСУпр;
				
				Списано = Списано + НоваяЗаписьТоварыВПроизводстве.Количество;
				
				Если НЕ НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
					// Сформировать движения для товаров, взятых на комиссию по регистру РеализацияТоваров.
					Если СтрокаВПроизводстве.СтатусПартии=Перечисления.СтатусыПартий.ТоварПринятыйКомиссия Тогда
						// Комиссионные товары помещаем в реализованные
						НоваяЗаписьРеализованныеТовары = НаборЗаписейРеализованныеТовары.Добавить();
						НоваяЗаписьРеализованныеТовары.ВидДвижения                = ВидДвиженияНакопления.Приход;
						НоваяЗаписьРеализованныеТовары.Период                     = ШапкаДокумента.Дата;
						НоваяЗаписьРеализованныеТовары.Регистратор                = ШапкаДокумента.Ссылка;
						НоваяЗаписьРеализованныеТовары.Контрагент                 = СтрокаВПроизводстве.Поставщик;
						НоваяЗаписьРеализованныеТовары.ДоговорВзаиморасчетов      = СтрокаВПроизводстве.ДоговорВзаиморасчетов;
						НоваяЗаписьРеализованныеТовары.Номенклатура               = СтрокаВПроизводстве.Номенклатура;
						НоваяЗаписьРеализованныеТовары.ХарактеристикаНоменклатуры = СтрокаВПроизводстве.ХарактеристикаНоменклатуры;
						НоваяЗаписьРеализованныеТовары.ДокументПередачи           = СтрокаВПроизводстве.Партия;
						НоваяЗаписьРеализованныеТовары.ГТД                        = СтрокаВПроизводстве.ГТД;
						НоваяЗаписьРеализованныеТовары.ХозОперация                = ШапкаДокумента.ХозОперация;
						НоваяЗаписьРеализованныеТовары.Количество                 = НоваяЗаписьТоварыВПроизводстве.Количество;
						НоваяЗаписьРеализованныеТовары.СуммаРегл                  = НоваяЗаписьТоварыВПроизводстве.Сумма;
						НоваяЗаписьРеализованныеТовары.СуммаПродажиРегл           = НоваяЗаписьТоварыВПроизводстве.Сумма;
						НоваяЗаписьРеализованныеТовары.СуммаУпр                   = НоваяЗаписьТоварыВПроизводстве.СуммаУпр;
						НоваяЗаписьРеализованныеТовары.СуммаПродажи               = НоваяЗаписьТоварыВПроизводстве.СуммаУпр;
						НоваяЗаписьРеализованныеТовары.СуммаРегл                  = НоваяЗаписьТоварыВПроизводстве.Сумма;
						НоваяЗаписьРеализованныеТовары.СуммаНДС                   = НоваяЗаписьТоварыВПроизводстве.СуммаНДС;
						НоваяЗаписьРеализованныеТовары.СуммаБезНДС                = НоваяЗаписьТоварыВПроизводстве.СуммаБезНДС;
						НоваяЗаписьРеализованныеТовары.СуммаУпр                   = НоваяЗаписьТоварыВПроизводстве.СуммаУпр;
						НоваяЗаписьРеализованныеТовары.СуммаНДСУпр                = НоваяЗаписьТоварыВПроизводстве.СуммаНДСУпр;
						НоваяЗаписьРеализованныеТовары.СуммаБезНДСУпр             = НоваяЗаписьТоварыВПроизводстве.СуммаБезНДСУпр;
					КонецЕсли;
				КонецЕсли;
				
				Если ВыполнитьИнтеркампани Тогда
					
					НоваяЗаписьТоварыОрганизацийКПередаче = НаборЗаписейТоварыОрганизацийКПередаче.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗаписьТоварыОрганизацийКПередаче, НоваяЗаписьТоварыВПроизводстве);
					НоваяЗаписьТоварыОрганизацийКПередаче.ВидДвижения 				= ВидДвиженияНакопления.Приход;
					НоваяЗаписьТоварыОрганизацийКПередаче.СкладКомпании 			= СтрокаВПроизводстве.Цех;
					НоваяЗаписьТоварыОрганизацийКПередаче.ОрганизацияОтправитель 	= СтрокаВПроизводстве.Организация;
					НоваяЗаписьТоварыОрганизацийКПередаче.ОрганизацияПолучатель 	= ШапкаДокумента.Организация;
					
				КонецЕсли;	
				
				Если УдалитьСтрокуВПроизводстве Тогда
					тзДеталиВПроизводстве.Удалить(СтрокаВПроизводстве);
				КонецЕсли;				
				
			КонецЦикла;
			Если НоваяЗаписьПродажи<>Неопределено Тогда
				НоваяЗаписьПродажи.Сумма=НоваяЗаписьПродажи.Сумма+СуммаПродажиОсталось;
				НоваяЗаписьПродажи.СуммаУпр=НоваяЗаписьПродажи.СуммаУпр+СуммаПродажиУпрОсталось;
				НоваяЗаписьПродажи.СуммаНДС=НоваяЗаписьПродажи.СуммаНДС+СуммаНДСПродажиОсталось;
				НоваяЗаписьПродажи.СуммаСкидки=НоваяЗаписьПродажи.СуммаСкидки+СуммаСкидкиПродажиОсталось;
			КонецЕсли;
			Если (НЕ Отказ) И (ОсталосьСписать<>0) Тогда
				// Остаток в производстве менее чем в заказ-наряде
				Если НЕ ПустаяСтрока(Сообщение) Тогда
					Сообщение = Сообщение + Символы.ПС;
				КонецЕсли;
				Код = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(Выборка.Номенклатура);
				Сообщение = Сообщение + СтрШаблон(НСтр("ru = 'Товар [%1] ""%2""'"), Код, СокрЛП(Выборка.Номенклатура));
				Если ЗначениеЗаполнено(Выборка.ХарактеристикаНоменклатуры) Тогда
					Сообщение = Сообщение
						+ Символы.НПП
						+ СтрШаблон(НСтр("ru = 'с характеристикой ""%1""'"), СокрЛП(Выборка.ХарактеристикаНоменклатуры));
				КонецЕсли;
				Сообщение = Сообщение
					+ СтрШаблон(
						НСтр("ru = '. Требуется по заказ-наряду %1 %2. Помещено в производство %3 %4. Недостает для завершения %5 %6'"),
						СокрЛП(Выборка.Количество),
						СокрЛП(Выборка.Номенклатура.БазоваяЕдиницаИзмерения),
						СокрЛП(Списано),
						СокрЛП(Выборка.Номенклатура.БазоваяЕдиницаИзмерения),
						СокрЛП(ОсталосьСписать),
						СокрЛП(Выборка.Номенклатура.БазоваяЕдиницаИзмерения)
					);
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаСебестоимостиМатериалов.Свернуть("ИдентификаторРаботы", "Сумма, СуммаНДС, СуммаБезНДС, СуммаУпр, СуммаНДСУпр, СуммаБезНДСУпр");
		
		ДвигаемГраницу = (ЭтоКомплектацияСборкаАвтомобиля И НаборЗаписейКомплектацияАвтомобилей.Количество()>0);
		// двигаем границу последовательности комплектаций автомобилей
		Если ДополнительныеСвойства.ПроверятьПоследовательность И ДвигаемГраницу Тогда
			
			Если Ссылка <> ДокументСсылка Тогда
				ДополнительныеСвойства.Вставить("МоментВремениБыл", ШапкаДокумента.МоментВремени);
				РаботаСГраницами.ДвиженияПоКомплектацииПередПроведением(ДокументСсылка, ДополнительныеСвойства);
			КонецЕсли;
			
			ПолучитьНовыйМоментВремени();
			РаботаСГраницами.СдвинутьГраницуКомплектации(Ссылка, ДополнительныеСвойства, Движения);
			ДополнительныеСвойства.Удалить("НовыйМоментВремени");
			
		КонецЕсли;
		
		Если ПроверятьОстаткиВПроизводстве Тогда
			тзДеталиВПроизводстве.Свернуть("Номенклатура,ХарактеристикаНоменклатуры","Количество");
			Для каждого СтрокаВПроизводстве Из тзДеталиВПроизводстве Цикл
				Если СтрокаВПроизводстве.Количество <> 0 Тогда
					Если НЕ ПустаяСтрока(Сообщение) Тогда
						Сообщение = Сообщение + Символы.ПС;
					КонецЕсли;
					Код = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаВПроизводстве.Номенклатура);
					Сообщение = Сообщение + СтрШаблон(НСтр("ru = 'Товар [%1] ""%2""'"), Код, СокрЛП(СтрокаВПроизводстве.Номенклатура));
					Если ЗначениеЗаполнено(СтрокаВПроизводстве.ХарактеристикаНоменклатуры) Тогда
						Сообщение = Сообщение
							+ Символы.НПП
							+ СтрШаблон(НСтр("ru = 'с характеристикой ""%1""'"), СокрЛП(СтрокаВПроизводстве.ХарактеристикаНоменклатуры));
					КонецЕсли;
					Сообщение= Сообщение
						+ СтрШаблон(
							НСтр("ru = '. После закрытия заказ-наряда в производстве осталось %1 %2.'"),
							СокрЛП(СтрокаВПроизводстве.Количество),
							СокрЛП(СтрокаВПроизводстве.Номенклатура.БазоваяЕдиницаИзмерения)
						);
					Отказ=Истина;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
		Если (Отказ) И (НЕ ПустаяСтрока(Сообщение)) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = '%1'"), Сообщение),
				ЭтотОбъект
			);
		Иначе
			НаборЗаписейТоварыВПроизводстве.Записать();
			НаборЗаписейРеализованныеТовары.Записать();
			Если НоваяЗаписьКомплектацияАвтомобилей<>Неопределено Тогда
				НаборЗаписейКомплектацияАвтомобилей.Записать();
			КонецЕсли;
		КонецЕсли;
		
		// Маркировка товаров - спишем с заказ-наряда указанную маркировку товаров в производстве.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	МаркировкаТоваровВПроизводствеОстатки.Цех КАК Цех,
		|	МаркировкаТоваровВПроизводствеОстатки.Номенклатура КАК Номенклатура,
		|	МаркировкаТоваровВПроизводствеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	МаркировкаТоваровВПроизводствеОстатки.GTIN КАК GTIN,
		|	МаркировкаТоваровВПроизводствеОстатки.СерийныйНомер КАК СерийныйНомер,
		|	МаркировкаТоваровВПроизводствеОстатки.ГТД КАК ГТД,
		|	МаркировкаТоваровВПроизводствеОстатки.КоличествоОстаток КАК Количество,
		|	""(01)"" + МаркировкаТоваровВПроизводствеОстатки.GTIN + ""(21)"" + МаркировкаТоваровВПроизводствеОстатки.СерийныйНомер КАК КодМаркировки
		|ПОМЕСТИТЬ КодыМаркировкиПроизводства
		|ИЗ
		|	РегистрНакопления.МаркировкаТоваровВПроизводстве.Остатки(, ЗаказНаряд = &ЗаказНаряд) КАК МаркировкаТоваровВПроизводствеОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КодыМаркировкиПроизводства.Цех КАК Цех,
		|	КодыМаркировкиПроизводства.Номенклатура КАК Номенклатура,
		|	КодыМаркировкиПроизводства.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	КодыМаркировкиПроизводства.GTIN КАК GTIN,
		|	КодыМаркировкиПроизводства.СерийныйНомер КАК СерийныйНомер,
		|	КодыМаркировкиПроизводства.Количество КАК Количество,
		|	ЕСТЬNULL(СостоянияКодовМаркировкиСрезПоследних.КодМаркировки, КодыМаркировкиПроизводства.КодМаркировки) КАК КодМаркировки,
		|	КодыМаркировкиПроизводства.ГТД КАК ГТД
		|ИЗ
		|	КодыМаркировкиПроизводства КАК КодыМаркировкиПроизводства
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКодовМаркировки.СрезПоследних(
		|				,
		|				(Номенклатура, ХарактеристикаНоменклатуры, GTIN, СерийныйНомер) В
		|					(ВЫБРАТЬ
		|						КодыМаркировкиПроизводства.Номенклатура КАК Номенклатура,
		|						КодыМаркировкиПроизводства.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|						КодыМаркировкиПроизводства.GTIN КАК GTIN,
		|						КодыМаркировкиПроизводства.СерийныйНомер КАК СерийныйНомер
		|					ИЗ
		|						КодыМаркировкиПроизводства КАК КодыМаркировкиПроизводства)) КАК СостоянияКодовМаркировкиСрезПоследних
		|		ПО КодыМаркировкиПроизводства.Номенклатура = СостоянияКодовМаркировкиСрезПоследних.Номенклатура
		|			И КодыМаркировкиПроизводства.ХарактеристикаНоменклатуры = СостоянияКодовМаркировкиСрезПоследних.ХарактеристикаНоменклатуры
		|			И КодыМаркировкиПроизводства.GTIN = СостоянияКодовМаркировкиСрезПоследних.GTIN
		|			И КодыМаркировкиПроизводства.СерийныйНомер = СостоянияКодовМаркировкиСрезПоследних.СерийныйНомер";

		Запрос.УстановитьПараметр("ЗаказНаряд", ШапкаДокумента.Ссылка);
		
		ТаблицаКодовМаркировки = Запрос.Выполнить().Выгрузить();
		
		Если НЕ Отказ Тогда
			
			СостояниеКодаМаркировки = 
				?(ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Платный,
					Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаРозничнаяПродажа,
					Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаИспользованДляСобственныхНуждПредприятия);
			
			// Изменим состояние маркировки
			НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
			НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейСостоянияКодовМаркировки.Период = ШапкаДокумента.Дата;
			НаборЗаписейСостоянияКодовМаркировки.Организация = Организация;
			НаборЗаписейСостоянияКодовМаркировки.РезультатЗапросаПоКодамМаркировки = ТаблицаКодовМаркировки;
			НаборЗаписейСостоянияКодовМаркировки.ПроверятьВыводИзОборота = Истина;
			НаборЗаписейСостоянияКодовМаркировки.Состояние = СостояниеКодаМаркировки;
			НаборЗаписейСостоянияКодовМаркировки.РежимПроведения = Режим;
			Если НЕ НаборЗаписейСостоянияКодовМаркировки.СостояниеКодовМаркировки() Тогда
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НаСебестоимость Тогда
		Если СуммаНаСебестоимость<>0 ИЛИ СуммаУпрНаСебестоимость<>0 ИЛИ СуммаНДСНаСебестоимость<>0 Тогда
			НоваяЗапись                = НаборЗаписейОстаткиАвтомобилей.Добавить();
			НоваяЗапись.ВидДвижения    = ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период         = ШапкаДокумента.Дата;
			НоваяЗапись.Регистратор    = ШапкаДокумента.Ссылка;
			НоваяЗапись.Партия         = ПартияКомплектуемогоАвтомобиля;
			НоваяЗапись.СтатусПартии   = СтатусПартииКомплектуемогоАвтомобиля;
			НоваяЗапись.СкладКомпании  = АвтомобильСкладКомпании;
			НоваяЗапись.Автомобиль     = ШапкаДокумента.Автомобиль;
			НоваяЗапись.ХозОперация    = ШапкаДокумента.ХозОперация;
			НоваяЗапись.Проект         = Проект;
			НоваяЗапись.Количество     = 0;
			НоваяЗапись.Сумма          = СуммаНаСебестоимость;
			НоваяЗапись.СуммаУпр       = СуммаУпрНаСебестоимость;
			НоваяЗапись.СуммаНДС       = СуммаНДСНаСебестоимость;
			НоваяЗапись.СуммаНДСУпр    = СуммаНДСУпрНаСебестоимость;
			НоваяЗапись.СуммаБезНДС    = НоваяЗапись.Сумма-НоваяЗапись.СуммаНДС;
			НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр-НоваяЗапись.СуммаНДСУпр;
			
			
			Если (СуммаУпрНаСебестоимость <> 0)
				И (СтатусПартииКомплектуемогоАвтомобиля = Перечисления.СтатусыПартий.ТоварКупленный)
				И (НЕ НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии) Тогда
				// Доходы и расходы
				НаборЗаписейДоходыИРасходы							= Движения.ДоходыИРасходы;
				НаборЗаписейДоходыИРасходы.ДокументОбъект 			= ЭтотОбъект;
				Если ВедетсяБалансПоПодразделению Тогда
					НаборЗаписейДоходыИРасходы.Подразделение		= АвтомобильСкладКомпании.ПодразделениеКомпании;
				КонецЕсли; 
				НаборЗаписейДоходыИРасходы.ШапкаДокумента			= ШапкаДокумента;
				Если НЕ ЗначениеЗаполнено(ШапкаДокумента.ВидРемонта.СтатьяДоходаРаботы) Тогда
					НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов	= Справочники.СтатьиДоходовИРасходов.ОтклонениеСебестоимостиПриКомплектации;
				Иначе
					НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов	= ШапкаДокумента.ВидРемонта.СтатьяДоходаДетали;
				КонецЕсли; 
				НаборЗаписейДоходыИРасходы.ВУпрВалюте				= Истина;
				НаборЗаписейДоходыИРасходы.Доход					= СуммаУпрНаСебестоимость;
				Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если (НЕ НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии) И (Не ЭтоКомплектацияСборкаАвтомобиля) Тогда
		Если НЕ НаСебестоимость И ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Платный Тогда
			// Проведем работы по регистру продаж
			НаборЗаписейПродажи = Движения.Продажи;
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	ЗаказНарядРаботы.НомерСтроки КАК НомерСтроки,
			|	ЗаказНарядРаботы.Авторабота,
			|	ЗаказНарядРаботы.Контрагент,
			|	ЗаказНарядРаботы.ИдентификаторРаботы,
			|	ЗаказНарядРаботы.Количество,
			|	ВЫБОР
			|		КОГДА ЗаказНарядРаботы.Нормочас = ЗНАЧЕНИЕ(Справочник.Нормочасы.Рубль)
			|		ТОГДА ЗНАЧЕНИЕ(Справочник.Нормочасы.ПустаяСсылка)
			|		ИНАЧЕ ЗаказНарядРаботы.Нормочас
			|	КОНЕЦ КАК Нормочас,
			|	ВЫБОР
			|		КОГДА ЗаказНарядРаботы.Нормочас = ЗНАЧЕНИЕ(Справочник.Нормочасы.Рубль)
			|		ТОГДА 0
			|		ИНАЧЕ ЗаказНарядРаботы.Количество*ЗаказНарядРаботы.Коэффициент
			|	КОНЕЦ КАК КоличествоНормочасов,
			|	ЗаказНарядРаботы.СтавкаНДС,
			|	ЗаказНарядРаботы.СуммаНДС,
			|	ЗаказНарядРаботы.СуммаСкидки+ЗаказНарядРаботы.СуммаСкидкиСтроки+ЗаказНарядРаботы.СуммаСкидкиБонусами КАК СуммаСкидки,
			|	ЗаказНарядРаботы.СуммаВсего
			|ИЗ
			|	Документ.ЗаказНаряд.Автоработы КАК ЗаказНарядРаботы
			|ГДЕ
			|	ЗаказНарядРаботы.Ссылка = &Ссылка
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки
			|;
			|
			|ВЫБРАТЬ
			|	ЗаказНарядИсполнители.ИдентификаторРаботы,
			|	ЗаказНарядИсполнители.Цех,
			|	СУММА(ЗаказНарядИсполнители.Процент) КАК Процент
			|ИЗ
			|	Документ.ЗаказНаряд.Исполнители КАК ЗаказНарядИсполнители
			|ГДЕ
			|	ЗаказНарядИсполнители.Ссылка = &Ссылка
			|СГРУППИРОВАТЬ ПО
			|	ЗаказНарядИсполнители.ИдентификаторРаботы,
			|	ЗаказНарядИсполнители.Цех";
			Запрос.УстановитьПараметр("Ссылка", ШапкаДокумента.Ссылка);
			
			РезультатыЗапроса   = Запрос.ВыполнитьПакет();
			ТаблицаРабот        = РезультатыЗапроса[0].Выгрузить();
			ТаблицаИсполнителей = РезультатыЗапроса[1].Выгрузить();
			
			СписокСтавокНДС  = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаРабот.ВыгрузитьКолонку("СтавкаНДС"));
			СтавкиНДС        = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокСтавокНДС, "Ставка");
			
			Для каждого СтрокаРабот Из ТаблицаРабот Цикл
				
				#Область ПересчетСуммИзВалютыДокумента
				
				Если ТоварыАвтоработы <> Неопределено
					И УчетПоРасчетнымДокументам Тогда
					СтрокаАвтоработы = ТоварыАвтоработы.НайтиСтроки(
						Новый Структура("ИдентификаторРаботы,Номенклатура", СтрокаРабот.ИдентификаторРаботы, СтрокаРабот.Авторабота));
				КонецЕсли;
				
				Если Не ЕстьПересчетСумм ИЛИ СтрокаАвтоработы.Количество() = 0 Тогда
					СуммаУпр =
						Окр(
							РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
								СтрокаРабот.СуммаВсего,
								ШапкаДокумента.ВалютаДокумента,
								ШапкаДокумента.КурсДокумента,
								ВалютаУпр,
								КурсУпр),
							2);
					
					СуммаНДСУпр =
						Окр(
							РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
								СтрокаРабот.СуммаНДС,
								ШапкаДокумента.ВалютаДокумента,
								ШапкаДокумента.КурсДокумента,
								ВалютаУпр,
								КурсУпр),
							2);
					
					СуммаСкидкиУпр =
						Окр(
							РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
								СтрокаРабот.СуммаСкидки,
								ШапкаДокумента.ВалютаДокумента,
								ШапкаДокумента.КурсДокумента,
								ВалютаУпр,
								КурсУпр),
							2);
					
					СтрокаРабот.СуммаВсего =
						Окр(
							РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
								СтрокаРабот.СуммаВсего,
								ШапкаДокумента.ВалютаДокумента,
								ШапкаДокумента.КурсДокумента,
								ВалютаРегл,
								КурсРегл),
							2);
					
					СтрокаРабот.СуммаНДС =
						Окр(
							РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
								СтрокаРабот.СуммаНДС,
								ШапкаДокумента.ВалютаДокумента,
								ШапкаДокумента.КурсДокумента,
								ВалютаРегл,
								КурсРегл),
							2);
					
					СтрокаРабот.СуммаСкидки =
						Окр(
							РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
								СтрокаРабот.СуммаСкидки,
								ШапкаДокумента.ВалютаДокумента,
								ШапкаДокумента.КурсДокумента,
								ВалютаРегл,
								КурсРегл),
							2);
				Иначе
					СуммаУпр = СтрокаАвтоработы[0].СуммаУпр;
					СуммаНДСУпр = СтрокаАвтоработы[0].СуммаНДСУпр;
					СуммаСкидкиУпр = СтрокаАвтоработы[0].СуммаСкидкиУпр;
					СтрокаРабот.СуммаВсего = СтрокаАвтоработы[0].Сумма;
					СтрокаРабот.СуммаНДС = СтрокаАвтоработы[0].СуммаНДС;
					СтрокаРабот.СуммаСкидки = СтрокаАвтоработы[0].СуммаСкидки;
				КонецЕсли;
				
				#КонецОбласти
				
				ОстатокКоличество           = СтрокаРабот.Количество;
				ОстатокКоличествоНормочасов = СтрокаРабот.КоличествоНормочасов;
				ОстатокСумма                = СтрокаРабот.СуммаВсего;
				ОстатокСуммаНДС             = СтрокаРабот.СуммаНДС;
				ОстатокСуммаСкидки          = СтрокаРабот.СуммаСкидки;
				ОстатокСуммаСкидкиУпр       = СуммаСкидкиУпр;
				ОстатокСуммаУпр             = СуммаУпр;
				ОстатокСуммаНДСУпр          = СуммаНДСУпр;
				ОстатокСебестоимость        = 0;
				ОстатокСебестоимостьУпр     = 0;
				ОстатокСуммаНДСВходящий     = 0;
				ОстатокСуммаНДСВходящийУпр  = 0;
				
				СебестоимостьРаботы = ТаблицаСебестоимостиМатериалов.Найти(СтрокаРабот.ИдентификаторРаботы, "ИдентификаторРаботы");
				Если НЕ СебестоимостьРаботы = Неопределено Тогда
					ОстатокСебестоимость       = СебестоимостьРаботы.Сумма;
					ОстатокСебестоимостьУпр    = СебестоимостьРаботы.СуммаУпр;
					ОстатокСуммаНДСВходящий    = СебестоимостьРаботы.СуммаНДС;
					ОстатокСуммаНДСВходящийУпр = СебестоимостьРаботы.СуммаНДСУпр;
				КонецЕсли;
				
				СтавкаНДС = СтавкиНДС.Получить(СтрокаРабот.СтавкаНДС);
				
				Условие = Новый Структура("ИдентификаторРаботы", СтрокаРабот.ИдентификаторРаботы);
				ЦехаРаботы = ТаблицаИсполнителей.НайтиСтроки(Условие);
				Если ЦехаРаботы.Количество()>0 Тогда
					Для Каждого ЦехРаботы Из ЦехаРаботы Цикл
						ДоляУчастия = ЦехРаботы.Процент/100;
						
						НоваяЗапись = НаборЗаписейПродажи.Добавить();
						
						НоваяЗапись.Период                = ШапкаДокумента.Дата;
						НоваяЗапись.Регистратор           = ШапкаДокумента.Ссылка;
						НоваяЗапись.ПодразделениеКомпании = ШапкаДокумента.ПодразделениеКомпании;
						НоваяЗапись.Номенклатура          = СтрокаРабот.Авторабота.Номенклатура;
						НоваяЗапись.Автомобиль            = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СводныйРемонтныйЗаказ,"Автомобиль");
						НоваяЗапись.ДокументПродажи       = ШапкаДокумента.ДокументПродажи;
						НоваяЗапись.Покупатель            = ШапкаДокумента.Контрагент;
						НоваяЗапись.СтатусПартии          = Перечисления.СтатусыПартий.ТоварКупленный;
						НоваяЗапись.ХозОперация           = ШапкаДокумента.ХозОперация;
						НоваяЗапись.ДоговорВзаиморасчетов = ШапкаДокумента.ДоговорВзаиморасчетов;
						НоваяЗапись.СкладКомпании         = ЦехРаботы.Цех;
						НоваяЗапись.НормоЧас              = СтрокаРабот.НормоЧас;
						НоваяЗапись.Авторабота            = СтрокаРабот.Авторабота;
						НоваяЗапись.СтавкаНДС             = СтрокаРабот.СтавкаНДС;
						
						НоваяЗапись.Количество            = Окр(СтрокаРабот.Количество*ДоляУчастия, 3);
						НоваяЗапись.КоличествоНормочасов  = Окр(СтрокаРабот.КоличествоНормочасов*ДоляУчастия, 3);
						НоваяЗапись.Сумма                 = Окр(СтрокаРабот.СуммаВсего*ДоляУчастия, 2);
						НоваяЗапись.СуммаНДС              = Окр(СтрокаРабот.СуммаНДС*ДоляУчастия, 2);
						НоваяЗапись.СуммаСкидки           = Окр(СтрокаРабот.СуммаСкидки*ДоляУчастия, 2);
						НоваяЗапись.СуммаСкидкиУпр        = Окр(СуммаСкидкиУпр*ДоляУчастия, 2);
						НоваяЗапись.СуммаУпр              = Окр(СуммаУпр*ДоляУчастия, 2);
						НоваяЗапись.СуммаНДСУпр           = Окр(СуммаНДСУпр*ДоляУчастия, 2);
						
						НоваяЗапись.ВыручкаБезНДС                      = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
						НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДС    = НоваяЗапись.Сумма + НоваяЗапись.СуммаСкидки - НоваяЗапись.СуммаНДС - Окр(НоваяЗапись.СуммаСкидки * СтавкаНДС / (100 + СтавкаНДС), 2);
						НоваяЗапись.ВыручкаДоПримененияСкидки          = НоваяЗапись.Сумма + НоваяЗапись.СуммаСкидки;
						НоваяЗапись.ВыручкаБезНДСУпр                   = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
						НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДСУпр = НоваяЗапись.СуммаУпр + НоваяЗапись.СуммаСкидкиУпр - НоваяЗапись.СуммаНДСУпр - Окр(НоваяЗапись.СуммаСкидкиУпр * СтавкаНДС / (100 + СтавкаНДС), 2);
						НоваяЗапись.ВыручкаДоПримененияСкидкиУпр       = НоваяЗапись.СуммаУпр + НоваяЗапись.СуммаСкидкиУпр;
						
						Если НЕ СебестоимостьРаботы = Неопределено Тогда
							НоваяЗапись.Себестоимость    = Окр(СебестоимостьРаботы.Сумма    * ДоляУчастия, 2);
							НоваяЗапись.СебестоимостьУпр = Окр(СебестоимостьРаботы.СуммаУпр * ДоляУчастия, 2);
							НоваяЗапись.СуммаНДСВходящий = Окр(СебестоимостьРаботы.СуммаНДС * ДоляУчастия, 2);
							НоваяЗапись.СуммаНДСВходящийУпр = Окр(СебестоимостьРаботы.СуммаНДСУпр * ДоляУчастия, 2);
							НоваяЗапись.СебестоимостьБезНДС = НоваяЗапись.Себестоимость - НоваяЗапись.СуммаНДСВходящий;
							НоваяЗапись.СебестоимостьБезНДСУпр = НоваяЗапись.СебестоимостьУпр - НоваяЗапись.СуммаНДСВходящийУпр;
							
							ОстатокСебестоимость    = ОстатокСебестоимость    - СебестоимостьРаботы.Сумма;
							ОстатокСебестоимостьУпр = ОстатокСебестоимостьУпр - СебестоимостьРаботы.СуммаУпр;
							ОстатокСуммаНДСВходящий = ОстатокСуммаНДСВходящий - СебестоимостьРаботы.СуммаНДС;
							ОстатокСуммаНДСВходящийУпр = ОстатокСуммаНДСВходящийУпр - СебестоимостьРаботы.СуммаНДСУпр;
						КонецЕсли;
						
						ОстатокКоличество           = ОстатокКоличество           - НоваяЗапись.Количество;
						ОстатокКоличествоНормочасов = ОстатокКоличествоНормочасов - НоваяЗапись.КоличествоНормочасов;
						ОстатокСумма                = ОстатокСумма                - НоваяЗапись.Сумма;
						ОстатокСуммаНДС             = ОстатокСуммаНДС             - НоваяЗапись.СуммаНДС;
						ОстатокСуммаСкидки          = ОстатокСуммаСкидки          - НоваяЗапись.СуммаСкидки;
						ОстатокСуммаСкидкиУпр       = ОстатокСуммаСкидкиУпр       - НоваяЗапись.СуммаСкидкиУпр;
						ОстатокСуммаУпр             = ОстатокСуммаУпр             - НоваяЗапись.СуммаУпр;
						ОстатокСуммаНДСУпр          = ОстатокСуммаНДСУпр          - НоваяЗапись.СуммаНДСУпр;
					КонецЦикла;
					
					Если ОстатокКоличество<>0 Тогда
						НоваяЗапись.Количество=НоваяЗапись.Количество+ОстатокКоличество;
					КонецЕсли;
					
					Если ОстатокКоличествоНормочасов<>0 Тогда
						НоваяЗапись.КоличествоНормочасов = НоваяЗапись.КоличествоНормочасов+ОстатокКоличествоНормочасов;
					КонецЕсли;
					
					Если ОстатокСумма<>0 Тогда
						НоваяЗапись.Сумма=НоваяЗапись.Сумма+ОстатокСумма;
						НоваяЗапись.ВыручкаБезНДС                      = НоваяЗапись.ВыручкаБезНДС+ОстатокСумма;
						НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДС    = НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДС + ОстатокСумма;
						НоваяЗапись.ВыручкаДоПримененияСкидки          = НоваяЗапись.ВыручкаДоПримененияСкидки + ОстатокСумма;
					КонецЕсли;
					
					Если ОстатокСуммаНДС<>0 Тогда
						НоваяЗапись.СуммаНДС=НоваяЗапись.СуммаНДС+ОстатокСуммаНДС;
						НоваяЗапись.ВыручкаБезНДС                      = НоваяЗапись.ВыручкаБезНДС - ОстатокСуммаНДС;
						НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДС    = НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДС - ОстатокСуммаНДС;
					КонецЕсли; 
					Если ОстатокСуммаСкидки<>0 Тогда
						НоваяЗапись.СуммаСкидки=НоваяЗапись.СуммаСкидки+ОстатокСуммаСкидки;
						НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДС    = НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДС + ОстатокСуммаСкидки - Окр(ОстатокСуммаСкидки * СтавкаНДС / (100 + СтавкаНДС), 2);
						НоваяЗапись.ВыручкаДоПримененияСкидки          = НоваяЗапись.ВыручкаДоПримененияСкидки + ОстатокСуммаСкидки;
					КонецЕсли;
					
					Если ОстатокСуммаСкидкиУпр<>0 Тогда
						НоваяЗапись.СуммаСкидкиУпр=НоваяЗапись.СуммаСкидкиУпр+ОстатокСуммаСкидкиУпр;
						НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДСУпр = НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДСУпр + ОстатокСуммаСкидкиУпр - Окр(ОстатокСуммаСкидкиУпр * СтавкаНДС / (100 + СтавкаНДС), 2);
						НоваяЗапись.ВыручкаДоПримененияСкидкиУпр       = НоваяЗапись.ВыручкаДоПримененияСкидкиУпр + ОстатокСуммаСкидкиУпр;
					КонецЕсли;
					
					Если ОстатокСуммаУпр<>0 Тогда
						НоваяЗапись.СуммаУпр=НоваяЗапись.СуммаУпр+ОстатокСуммаУпр;
						НоваяЗапись.ВыручкаБезНДСУпр                   = НоваяЗапись.ВыручкаБезНДСУпр + ОстатокСуммаУпр;
						НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДСУпр = НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДСУпр + ОстатокСуммаУпр;
						НоваяЗапись.ВыручкаДоПримененияСкидкиУпр       = НоваяЗапись.ВыручкаДоПримененияСкидкиУпр + ОстатокСуммаУпр;
					КонецЕсли;
					
					Если ОстатокСуммаНДСУпр<>0 Тогда
						НоваяЗапись.СуммаНДСУпр=НоваяЗапись.СуммаНДСУпр+ОстатокСуммаНДСУпр;
						НоваяЗапись.ВыручкаБезНДСУпр                   = НоваяЗапись.ВыручкаБезНДСУпр - ОстатокСуммаНДСУпр;
						НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДСУпр = НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДСУпр - ОстатокСуммаНДСУпр;
					КонецЕсли;
					
					Если ОстатокСебестоимость<>0 Тогда
						НоваяЗапись.Себестоимость    = НоваяЗапись.Себестоимость    + ОстатокСебестоимость;
						НоваяЗапись.СебестоимостьБезНДС = НоваяЗапись.Себестоимость - НоваяЗапись.СуммаНДСВходящий;
					КонецЕсли;
					
					Если ОстатокСебестоимостьУпр<>0 Тогда
						НоваяЗапись.СебестоимостьУпр = НоваяЗапись.СебестоимостьУпр + ОстатокСебестоимостьУпр;
						НоваяЗапись.СебестоимостьБезНДСУпр = НоваяЗапись.СебестоимостьУпр - НоваяЗапись.СуммаНДСВходящийУпр;
					КонецЕсли;
					
					Если ОстатокСуммаНДСВходящий<>0 Тогда
						НоваяЗапись.СуммаНДСВходящий = НоваяЗапись.СуммаНДСВходящий + ОстатокСуммаНДСВходящий;
						НоваяЗапись.СебестоимостьБезНДС = НоваяЗапись.Себестоимость - НоваяЗапись.СуммаНДСВходящий;
					КонецЕсли;
					
					Если ОстатокСуммаНДСВходящийУпр<>0 Тогда
						НоваяЗапись.СуммаНДСВходящийУпр = НоваяЗапись.СуммаНДСВходящийУпр + ОстатокСуммаНДСВходящийУпр;
						НоваяЗапись.СебестоимостьБезНДСУпр = НоваяЗапись.СебестоимостьУпр - НоваяЗапись.СуммаНДСВходящийУпр;
					КонецЕсли;
				Иначе
					НоваяЗапись=НаборЗаписейПродажи.Добавить();
					
					НоваяЗапись.Период                = ШапкаДокумента.Дата;
					НоваяЗапись.Регистратор           = ШапкаДокумента.Ссылка;
					НоваяЗапись.ПодразделениеКомпании = ШапкаДокумента.ПодразделениеКомпании;
					НоваяЗапись.Номенклатура          = СтрокаРабот.Авторабота.Номенклатура;
					НоваяЗапись.Автомобиль            = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СводныйРемонтныйЗаказ,"Автомобиль");
					НоваяЗапись.ДокументПродажи       = ШапкаДокумента.ДокументПродажи;
					НоваяЗапись.Поставщик             = СтрокаРабот.Контрагент;
					НоваяЗапись.Покупатель            = ШапкаДокумента.Контрагент;
					НоваяЗапись.СтатусПартии          = Перечисления.СтатусыПартий.ТоварКупленный;
					НоваяЗапись.ХозОперация           = ШапкаДокумента.ХозОперация;
					НоваяЗапись.ДоговорВзаиморасчетов = ШапкаДокумента.ДоговорВзаиморасчетов;
					НоваяЗапись.СкладКомпании         = Цех;
					НоваяЗапись.Авторабота            = СтрокаРабот.Авторабота;
					НоваяЗапись.СтавкаНДС             = СтрокаРабот.СтавкаНДС;
					
					НоваяЗапись.Количество           = Окр(СтрокаРабот.Количество,3);
					НоваяЗапись.КоличествоНормочасов = Окр(СтрокаРабот.КоличествоНормочасов,3);
					НоваяЗапись.Сумма                = Окр(СтрокаРабот.СуммаВсего,2);
					НоваяЗапись.СуммаНДС             = Окр(СтрокаРабот.СуммаНДС,2);
					НоваяЗапись.СуммаСкидки          = Окр(СтрокаРабот.СуммаСкидки,2);
					НоваяЗапись.СуммаСкидкиУпр       = Окр(СуммаСкидкиУпр,2);
					НоваяЗапись.СуммаУпр             = Окр(СуммаУпр,2);
					НоваяЗапись.СуммаНДСУпр          = Окр(СуммаНДСУпр,2);
					
					НоваяЗапись.ВыручкаБезНДС                      = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
					НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДС    = НоваяЗапись.Сумма + НоваяЗапись.СуммаСкидки - НоваяЗапись.СуммаНДС - Окр(НоваяЗапись.СуммаСкидки * СтавкаНДС / (100 + СтавкаНДС), 2);
					НоваяЗапись.ВыручкаДоПримененияСкидки          = НоваяЗапись.Сумма + НоваяЗапись.СуммаСкидки;
					НоваяЗапись.ВыручкаБезНДСУпр                   = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
					НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДСУпр = НоваяЗапись.СуммаУпр + НоваяЗапись.СуммаСкидкиУпр - НоваяЗапись.СуммаНДСУпр - Окр(НоваяЗапись.СуммаСкидкиУпр * СтавкаНДС / (100 + СтавкаНДС), 2);
					НоваяЗапись.ВыручкаДоПримененияСкидкиУпр       = НоваяЗапись.СуммаУпр + НоваяЗапись.СуммаСкидкиУпр;
					
					Если НЕ СебестоимостьРаботы = Неопределено Тогда
						НоваяЗапись.Себестоимость          = Окр(СебестоимостьРаботы.Сумма,    2);
						НоваяЗапись.СебестоимостьУпр       = Окр(СебестоимостьРаботы.СуммаУпр, 2);
						НоваяЗапись.СуммаНДСВходящий       = Окр(СебестоимостьРаботы.СуммаНДС, 2);
						НоваяЗапись.СуммаНДСВходящийУпр    = Окр(СебестоимостьРаботы.СуммаНДСУпр, 2);
						НоваяЗапись.СебестоимостьБезНДС    = НоваяЗапись.Себестоимость - НоваяЗапись.СуммаНДСВходящий;
						НоваяЗапись.СебестоимостьБезНДСУпр = НоваяЗапись.СебестоимостьУпр - НоваяЗапись.СуммаНДСВходящийУпр;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// расход собственного товара на себестоимость
		Если НЕ ЗначениеЗаполнено(ШапкаДокумента.ВидРемонта.СтатьяРасходаДетали) Тогда
			Если ШапкаДокумента.ВидРемонта.ТипРемонта=Перечисления.ТипыРемонта.Бесплатный Тогда
				СтатьяДИР=Справочники.СтатьиДоходовИРасходов.БесплатныйРемонтПоЗаказНарядам;
			Иначе
				СтатьяДИР=Справочники.СтатьиДоходовИРасходов.Себестоимость;
			КонецЕсли; 
		Иначе
			СтатьяДИР=ШапкаДокумента.ВидРемонта.СтатьяРасходаДетали;
		КонецЕсли;
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	"+?(ВедетсяБалансПоПодразделению,"ТоварыВПроизводстве.Цех.ПодразделениеКомпании КАК Подразделение,","")+"
		             |	СУММА(ТоварыВПроизводстве.СуммаУпр) КАК СуммаУпр
		             |ИЗ
		             |	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
		             |ГДЕ
		             |	ТоварыВПроизводстве.Регистратор = &Регистратор
		             |	И ТоварыВПроизводстве.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварКупленный)
		             |"+?(ВедетсяБалансПоПодразделению,"СГРУППИРОВАТЬ ПО ТоварыВПроизводстве.Цех.ПодразделениеКомпании","")+"
					 |";
		Запрос.УстановитьПараметр("Регистратор",ШапкаДокумента.Ссылка);
		Выборка=Запрос.Выполнить().Выбрать();
		Если ВедетсяБалансПоПодразделению Тогда
			Пока Выборка.Следующий() Цикл
				Если Выборка.СуммаУпр<>0 Тогда
					НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
					НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
					НаборЗаписейДоходыИРасходы.Подразделение=Выборка.Подразделение;
					НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
					НаборЗаписейДоходыИРасходы.ВУпрВалюте=Истина;
					НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=СтатьяДИР;
					НаборЗаписейДоходыИРасходы.Расход=Выборка.СуммаУпр;
					Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
				КонецЕсли; 
			КонецЦикла; 
		Иначе
			Если Выборка.Следующий() Тогда
				Если Выборка.СуммаУпр<>0 Тогда
					НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
					НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
					НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
					НаборЗаписейДоходыИРасходы.ВУпрВалюте=Истина;
					НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=СтатьяДИР;
					НаборЗаписейДоходыИРасходы.Расход=Выборка.СуммаУпр;
					Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		// по ДИР комиссионный товар
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	"+?(ВедетсяБалансПоПодразделению,"РеализованныеТовары.ДоговорВзаиморасчетов.ПодразделениеКомпании КАК Подразделение,","")+"
		             |	СУММА(РеализованныеТовары.СуммаУпр) КАК СуммаУпр
		             |ИЗ
		             |	РегистрНакопления.РеализованныеТовары КАК РеализованныеТовары
		             |ГДЕ
		             |	РеализованныеТовары.Регистратор = &Регистратор
		             |"+?(ВедетсяБалансПоПодразделению,"СГРУППИРОВАТЬ ПО РеализованныеТовары.ДоговорВзаиморасчетов.ПодразделениеКомпании","")+"
					 |";
		Запрос.УстановитьПараметр("Регистратор",ШапкаДокумента.Ссылка);
		Выборка=Запрос.Выполнить().Выбрать();
		Если ВедетсяБалансПоПодразделению Тогда
			Пока Выборка.Следующий() Цикл
				Если Выборка.СуммаУпр<>0 Тогда
					НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
					НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
					НаборЗаписейДоходыИРасходы.Подразделение=Выборка.Подразделение;
					НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
					НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=СтатьяДИР;
					НаборЗаписейДоходыИРасходы.ВУпрВалюте=Истина;
					НаборЗаписейДоходыИРасходы.Доход=Выборка.СуммаУпр;
					Отказ=НЕ НаборЗаписейДоходыИРасходы.Расход() ИЛИ Отказ;
				КонецЕсли; 
			КонецЦикла; 
		Иначе
			Если Выборка.Следующий() Тогда
				Если Выборка.СуммаУпр<>0 Тогда
					НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
					НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
					НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
					НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=СтатьяДИР;
					НаборЗаписейДоходыИРасходы.ВУпрВалюте=Истина;
					НаборЗаписейДоходыИРасходы.Доход=Выборка.СуммаУпр;
					Отказ=НЕ НаборЗаписейДоходыИРасходы.Расход() ИЛИ Отказ;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если (НЕ НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии)
		И (ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Платный)
		И (Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт) Тогда
		// доход на сумму продажи
		НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
		Если ВедетсяБалансПоПодразделению Тогда
			НаборЗаписейДоходыИРасходы.Подразделение=ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
		КонецЕсли;
		НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте = УчетПоРасчетнымДокументам;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=?(НЕ ЗначениеЗаполнено(ШапкаДокумента.ВидРемонта.СтатьяДоходаДетали),Справочники.СтатьиДоходовИРасходов.ВыручкаПоЗаказНарядам,ШапкаДокумента.ВидРемонта.СтатьяДоходаДетали);
		НаборЗаписейДоходыИРасходы.Доход =
			?(УчетПоРасчетнымДокументам И ЕстьПересчетСумм,
				тзДеталиЗаказНаряда.Итог("СуммаУпр"),
				ШапкаДокумента.СуммаНоменклатурыДокумента);
		Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		// проведем услуги по доходам и расходам
		НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
		Если ВедетсяБалансПоПодразделению Тогда
			НаборЗаписейДоходыИРасходы.Подразделение=ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
		КонецЕсли;
		НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте = УчетПоРасчетнымДокументам;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=?(НЕ ЗначениеЗаполнено(ШапкаДокумента.ВидРемонта.СтатьяДоходаРаботы),Справочники.СтатьиДоходовИРасходов.РаботыПоЗаказНарядам,ШапкаДокумента.ВидРемонта.СтатьяДоходаРаботы);
		НаборЗаписейДоходыИРасходы.Доход = 
		?(УчетПоРасчетнымДокументам И ЕстьПересчетСумм,
			ТоварыАвтоработы.Итог("СуммаУпр") - тзДеталиЗаказНаряда.Итог("СуммаУпр"),
			ШапкаДокумента.СуммаРаботДокумента);
		Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
	КонецЕсли;
	
	Если (НЕ Отказ) И НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
		// Доходы и расходы на себестоимость не оприходованных партий
		// Товары в производстве.
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	СУММА(ТоварыВПроизводстве.СуммаУпр) КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
		|ГДЕ
		|	ТоварыВПроизводстве.Регистратор = &Регистратор
		|	И ТоварыВПроизводстве.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварКупленный)";
		Запрос.УстановитьПараметр("Регистратор",ШапкаДокумента.Ссылка);
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.СуммаУпр<>0 Тогда
				НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
				НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
				НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
				НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьНеоприходованныхПартий;
				НаборЗаписейДоходыИРасходы.ВУпрВалюте = Истина;
				НаборЗаписейДоходыИРасходы.Расход = Выборка.СуммаУпр;
				НаборЗаписейДоходыИРасходы.Приход();
			КонецЕсли; 
		КонецЕсли;
		Если ЭтоКомплектацияСборкаАвтомобиля Тогда
			// Остатки автомобилей
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	СУММА(ОстаткиАвтомобилей.СуммаУпр) КАК СуммаУпр
			|ИЗ
			|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
			|ГДЕ
			|	ОстаткиАвтомобилей.Регистратор = &Регистратор
			|	И ОстаткиАвтомобилей.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварКупленный)";
			Запрос.УстановитьПараметр("Регистратор",ШапкаДокумента.Ссылка);
			Выборка=Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Если Выборка.СуммаУпр<>0 Тогда
					НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
					НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
					Если ВедетсяБалансПоПодразделению Тогда
						НаборЗаписейДоходыИРасходы.Подразделение = АвтомобильСкладКомпании.ПодразделениеКомпании;
					КонецЕсли; 
					НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
					НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьНеоприходованныхПартий;
					НаборЗаписейДоходыИРасходы.ВУпрВалюте = Истина;
					НаборЗаписейДоходыИРасходы.Доход = Выборка.СуммаУпр;
					НаборЗаписейДоходыИРасходы.Приход();
				КонецЕсли; 
			КонецЕсли; 
			// Комплектация автомобилей
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	СУММА(КомплектацияАвтомобилей.СуммаУпр) КАК СуммаУпр
			|ИЗ
			|	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
			|ГДЕ
			|	КомплектацияАвтомобилей.Регистратор = &Регистратор";
			Запрос.УстановитьПараметр("Регистратор",ШапкаДокумента.Ссылка);
			Выборка=Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Если Выборка.СуммаУпр<>0 Тогда
					НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
					НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
					Если ВедетсяБалансПоПодразделению Тогда
						НаборЗаписейДоходыИРасходы.Подразделение = АвтомобильСкладКомпании.ПодразделениеКомпании;
					КонецЕсли; 
					НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
					НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьНеоприходованныхПартий;
					НаборЗаписейДоходыИРасходы.ВУпрВалюте = Истина;
					НаборЗаписейДоходыИРасходы.Доход = Выборка.СуммаУпр;
					НаборЗаписейДоходыИРасходы.Приход();
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	// двигаем границу последовательности производства
	ДвигаемГраницу = Движения.ТоварыВПроизводстве.Количество()>0;
	Если ДополнительныеСвойства.ПроверятьПоследовательность
		 И (ДвигаемГраницу ИЛИ ЗначениеЗаполнено(ДополнительныеСвойства.ДвиженияПроизводстваПередПроведением)) Тогда
		
		// если идет допроведение, то надо получить те значения которые были раньше.
		Если Ссылка<>ДокументСсылка Тогда
			ДополнительныеСвойства.Вставить("МоментВремениБыл", ШапкаДокумента.МоментВремени);
			РаботаСГраницами.ДвиженияПоПроизводствуПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		КонецЕсли;
		
		ПолучитьНовыйМоментВремени();
		РаботаСГраницами.СдвинутьГраницуПроизводства(ДокументСсылка, ДополнительныеСвойства, Движения);
		ДополнительныеСвойства.Удалить("НовыйМоментВремени");
		
	КонецЕсли;
	
	Возврат НЕ Отказ;
КонецФункции

Процедура ДополнитьДвиженияДляКомплектацииСборкиАвтомобиля(
		ШапкаДокумента,
		Режим,
		Отказ,
		НаборЗаписейОстаткиАвтомобилей,
		НаборЗаписейКомплектацияАвтомобилей,
		НаборЗаписейДопроведениеПоПартиям,
		ПараметрыПересчета)
	
	ЭтоКомплектацияАвтомобиля = ШапкаДокумента.ТипРемонта = Перечисления.ТипыРемонта.КомплектацияАвтомобиля;
	ЭтоСборкаАвтомобиля = ШапкаДокумента.ТипРемонта = Перечисления.ТипыРемонта.СборкаАвтомобиля;
	
	Если Не ЭтоКомплектацияАвтомобиля И Не ЭтоСборкаАвтомобиля Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказНарядАвтомобили.Автомобиль КАК Автомобиль
	|ПОМЕСТИТЬ КомплектующиеАвтомобили
	|ИЗ
	|	Документ.ЗаказНаряд.Автомобили КАК ЗаказНарядАвтомобили
	|ГДЕ
	|	ЗаказНарядАвтомобили.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиАвтомобилейОстатки.Автомобиль КАК Автомобиль,
	|	ОстаткиАвтомобилейОстатки.СкладКомпании КАК СкладКомпании,
	|	ОстаткиАвтомобилейОстатки.СтатусПартии КАК СтатусПартии,
	|	ОстаткиАвтомобилейОстатки.Партия КАК Партия
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей.Остатки(&НаДату, Автомобиль = &Автомобиль) КАК ОстаткиАвтомобилейОстатки
	|ГДЕ
	|	ОстаткиАвтомобилейОстатки.КоличествоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КомплектующиеАвтомобили.Автомобиль КАК Автомобиль,
	|	ОстаткиАвтомобилейОстатки.СкладКомпании КАК СкладКомпании,
	|	ОстаткиАвтомобилейОстатки.СтатусПартии КАК СтатусПартии,
	|	ОстаткиАвтомобилейОстатки.Партия КАК Партия,
	|	ЕСТЬNULL(ОстаткиАвтомобилейОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ЕСТЬNULL(ОстаткиАвтомобилейОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|	ЕСТЬNULL(ОстаткиАвтомобилейОстатки.СуммаНДСОстаток, 0) КАК СуммаНДСОстаток,
	|	ЕСТЬNULL(ОстаткиАвтомобилейОстатки.СуммаБезНДСОстаток, 0) КАК СуммаБезНДСОстаток,
	|	ЕСТЬNULL(ОстаткиАвтомобилейОстатки.СуммаУпрОстаток, 0) КАК СуммаУпрОстаток,
	|	ЕСТЬNULL(ОстаткиАвтомобилейОстатки.СуммаНДСУпрОстаток, 0) КАК СуммаНДСУпрОстаток,
	|	ЕСТЬNULL(ОстаткиАвтомобилейОстатки.СуммаБезНДСУпрОстаток, 0) КАК СуммаБезНДСУпрОстаток,
	|	КомплектующиеАвтомобили.Автомобиль.ГТД КАК ГТД,
	|	ОстаткиАвтомобилейОстатки.Партия.Контрагент КАК Поставщик,
	|	ОстаткиАвтомобилейОстатки.Партия.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов
	|ИЗ
	|	КомплектующиеАвтомобили КАК КомплектующиеАвтомобили
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиАвтомобилей.Остатки(
	|				&НаДату,
	|				Автомобиль В
	|					(ВЫБРАТЬ
	|						КомплектующиеАвтомобили.Автомобиль КАК Автомобиль
	|					ИЗ
	|						КомплектующиеАвтомобили КАК КомплектующиеАвтомобили)) КАК ОстаткиАвтомобилейОстатки
	|		ПО КомплектующиеАвтомобили.Автомобиль = ОстаткиАвтомобилейОстатки.Автомобиль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КомплектующиеАвтомобили.Автомобиль КАК Автомобиль
	|ИЗ
	|	КомплектующиеАвтомобили КАК КомплектующиеАвтомобили
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КомплектацияАвтомобилей.Остатки(
	|				&НаДату,
	|				Автомобиль В
	|					(ВЫБРАТЬ
	|						КомплектующиеАвтомобили.Автомобиль КАК Автомобиль
	|					ИЗ
	|						КомплектующиеАвтомобили КАК КомплектующиеАвтомобили)) КАК КомплектацияАвтомобилейОстатки
	|		ПО КомплектующиеАвтомобили.Автомобиль = КомплектацияАвтомобилейОстатки.Автомобиль
	|ГДЕ
	|	ЕСТЬNULL(КомплектацияАвтомобилейОстатки.КоличествоОстаток, 0) > 0";
	Запрос.УстановитьПараметр("НаДату", ШапкаДокумента.МоментВремени);
	Запрос.УстановитьПараметр("Автомобиль", ШапкаДокумента.Автомобиль);
	Запрос.УстановитьПараметр("Ссылка", ШапкаДокумента.Ссылка);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаАвтомобиляДляСборки = ПакетЗапроса[1].Выбрать();
	СтатусПартии = Неопределено;
	Партия = Неопределено;
	СкладКомпанииАвтомобиля = Неопределено;
	
	Если ВыборкаАвтомобиляДляСборки.Следующий() Тогда
		
		Если ЭтоСборкаАвтомобиля Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Автомобиль ""%1"" находится на складе компании ""%2"". Сборка автомобиля не может быть сделана.'"),
					СокрЛП(ШапкаДокумента.Автомобиль),
					СокрЛП(ШапкаДокумента.СкладКомпании)
				),
				ЭтотОбъект
			);
			Отказ = Истина;
		Иначе
			СтатусПартии = ВыборкаАвтомобиляДляСборки.СтатусПартии;
			Партия = ВыборкаАвтомобиляДляСборки.Партия;
			СкладКомпанииАвтомобиля = ВыборкаАвтомобиляДляСборки.СкладКомпании;
		КонецЕсли;
		
	КонецЕсли;
	
	СуммаАвтомобилей = 0;
	СуммаУпрАвтомобилей = 0;
	СуммаНДСАвтомобилей = 0;
	СуммаНДСУпрАвтомобилей = 0;
	Выборка = ПакетЗапроса[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.КоличествоОстаток = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Автомобиль ""%1"" отсутствует.'"),
					СокрЛП(Выборка.Автомобиль)
				),
				ЭтотОбъект
			);
			Отказ = Истина;
		КонецЕсли;
		
		ПартияКомплектуемогоАвтомобиля = Выборка.Партия;
		СтатусПартииКомплектуемогоАвтомобиля = Выборка.СтатусПартии;
		АвтомобильСкладКомпании = Выборка.СкладКомпании;
		Если БалансВедетсяПоОрганизациям(ШапкаДокумента.Дата)
			И АвтомобильСкладКомпании.Организация <> Организация Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Организация склада <%1> хранения автомобиля <%2> не соответствует организации документа .'"), 
					СокрЛП(АвтомобильСкладКомпании.Организация),
					СокрЛП(Выборка.Автомобиль)),
				ЭтотОбъект
			);
			Отказ = Истина;
		КонецЕсли;
		
		// Списываем автомобиль со склада
		НоваяЗапись = НаборЗаписейОстаткиАвтомобилей.Добавить();
		НоваяЗапись.ВидДвижения   = ВидДвиженияНакопления.Расход;
		НоваяЗапись.Период        = ШапкаДокумента.Дата;
		НоваяЗапись.Регистратор   = ШапкаДокумента.Ссылка;
		НоваяЗапись.Партия        = ПартияКомплектуемогоАвтомобиля;
		НоваяЗапись.СтатусПартии  = СтатусПартииКомплектуемогоАвтомобиля;
		НоваяЗапись.СкладКомпании = АвтомобильСкладКомпании;
		НоваяЗапись.Автомобиль    = Выборка.Автомобиль;
		НоваяЗапись.ХозОперация   = ШапкаДокумента.ХозОперация;
		НоваяЗапись.Проект	      = Проект;
		НоваяЗапись.Количество    = Выборка.КоличествоОстаток;
		НоваяЗапись.Сумма         = Выборка.СуммаОстаток;
		НоваяЗапись.СуммаУпр      = Выборка.СуммаУпрОстаток;
		НоваяЗапись.СуммаНДС      = Выборка.СуммаНДСОстаток;
		НоваяЗапись.СуммаНДСУпр   = Выборка.СуммаНДСУпрОстаток;
		НоваяЗапись.СуммаБезНДС   = Выборка.СуммаБезНДСОстаток;
		НоваяЗапись.СуммаБезНДСУпр = Выборка.СуммаБезНДСУпрОстаток;
		
		// Добавляем автомобиль в комплетацию автомобиля
		НоваяЗаписьКомплектацияАвтомобилей = НаборЗаписейКомплектацияАвтомобилей.Добавить();
		НоваяЗаписьКомплектацияАвтомобилей.ВидДвижения=  ВидДвиженияНакопления.Приход;
		НоваяЗаписьКомплектацияАвтомобилей.Период = ШапкаДокумента.Дата;
		НоваяЗаписьКомплектацияАвтомобилей.Регистратор = ШапкаДокумента.Ссылка;
		НоваяЗаписьКомплектацияАвтомобилей.Автомобиль = ШапкаДокумента.Автомобиль;
		Если ЭтоСборкаАвтомобиля Тогда
			НоваяЗаписьКомплектацияАвтомобилей.СкладКомпании = ШапкаДокумента.СкладКомпании;
		Иначе
			НоваяЗаписьКомплектацияАвтомобилей.СкладКомпании = СкладКомпанииАвтомобиля;
		КонецЕсли;
		НоваяЗаписьКомплектацияАвтомобилей.Номенклатура = Выборка.Автомобиль;
		НоваяЗаписьКомплектацияАвтомобилей.СтатусПартии = Перечисления.СтатусыПартий.ТоварКупленный;
		НоваяЗаписьКомплектацияАвтомобилей.Партия = ПартияКомплектуемогоАвтомобиля;
		НоваяЗаписьКомплектацияАвтомобилей.ГТД = Выборка.ГТД;
		НоваяЗаписьКомплектацияАвтомобилей.ХозОперация = ШапкаДокумента.ХозОперация;
		НоваяЗаписьКомплектацияАвтомобилей.Количество = Выборка.КоличествоОстаток;
		
		Если НЕ НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии
			И Выборка.СтатусПартии = Перечисления.СтатусыПартий.ТоварПринятыйКомиссия Тогда
			// Комиссионные товары помещаем в реализованные
			НоваяЗаписьРеализованныеАвтомобили = Движения.РеализованныеАвтомобили.Добавить();
			НоваяЗаписьРеализованныеАвтомобили.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяЗаписьРеализованныеАвтомобили.Период = ШапкаДокумента.Дата;
			НоваяЗаписьРеализованныеАвтомобили.Регистратор = ШапкаДокумента.Ссылка;
			НоваяЗаписьРеализованныеАвтомобили.Контрагент = Выборка.Поставщик;
			НоваяЗаписьРеализованныеАвтомобили.ДоговорВзаиморасчетов = Выборка.ДоговорВзаиморасчетов;
			НоваяЗаписьРеализованныеАвтомобили.Автомобиль = Выборка.Автомобиль;
			НоваяЗаписьРеализованныеАвтомобили.ДокументПередачи = Выборка.Партия;
			НоваяЗаписьРеализованныеАвтомобили.ГТД = Выборка.ГТД;
			НоваяЗаписьРеализованныеАвтомобили.ХозОперация = ШапкаДокумента.ХозОперация;
			НоваяЗаписьРеализованныеАвтомобили.Количество = 1;
			НоваяЗаписьРеализованныеАвтомобили.СуммаРегл = Выборка.СуммаОстаток;
			НоваяЗаписьРеализованныеАвтомобили.СуммаНДС = Выборка.СуммаНДСОстаток;
			НоваяЗаписьРеализованныеАвтомобили.СуммаБезНДС = Выборка.СуммаБезНДСОстаток;
			НоваяЗаписьРеализованныеАвтомобили.СуммаУпр = Выборка.СуммаУпрОстаток;
			НоваяЗаписьРеализованныеАвтомобили.СуммаНДСУпр = Выборка.СуммаНДСУпрОстаток;
			НоваяЗаписьРеализованныеАвтомобили.СуммаБезНДСУпр = Выборка.СуммаБезНДСУпрОстаток;
			НоваяЗаписьРеализованныеАвтомобили.СуммаПродажи = 0;
			НоваяЗаписьРеализованныеАвтомобили.СуммаПродажиРегл = 0;
		ИначеЕсли Выборка.СтатусПартии = Перечисления.СтатусыПартий.ТоварОтветственноеХранение Тогда
			ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Автомобиль <%1> находится на ответственном хранении. Его использование для сборки не возможно.'"),
					Выборка.Автомобиль
				);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Автомобиль,,, Отказ);
		КонецЕсли;
		
		СуммаАвтомобилей = СуммаАвтомобилей + Выборка.СуммаОстаток;
		СуммаУпрАвтомобилей = СуммаУпрАвтомобилей + Выборка.СуммаУпрОстаток;
		СуммаНДСАвтомобилей = СуммаНДСАвтомобилей + Выборка.СуммаНДСОстаток;
		СуммаНДСУпрАвтомобилей = СуммаНДСУпрАвтомобилей + Выборка.СуммаНДСУпрОстаток;
		
	КонецЦикла;
	
	// Проверим, что среди указанных комплектующих автомобилей нет собранного автомобиля ранее
	ВыборкаРанееСобранныхАвтомобилей = ПакетЗапроса[3].Выбрать();
	Пока ВыборкаРанееСобранныхАвтомобилей.Следующий() Цикл
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Автомобиль <%1> запрещено указывать в качестве комплектующего, так как ранее был комплектован.'"), 
				СокрЛП(ВыборкаРанееСобранныхАвтомобилей.Автомобиль)),
			ЭтотОбъект
		);
		Отказ = Истина;
	КонецЦикла;
	
	Если Не Отказ И (ЭтоСборкаАвтомобиля 
		ИЛИ (СтатусПартии = Перечисления.СтатусыПартий.ТоварКупленный
		И (СуммаАвтомобилей <> 0 ИЛИ ШапкаДокумента.СуммаРаботДокумента <> 0
		ИЛИ СуммаНДСАвтомобилей <> 0 ИЛИ ПараметрыПересчета.СуммаНДСАвторабот <> 0))) Тогда
		НоваяЗапись = НаборЗаписейОстаткиАвтомобилей.Добавить();
		НоваяЗапись.ВидДвижения   = ВидДвиженияНакопления.Приход;
		НоваяЗапись.Период        = ШапкаДокумента.Дата;
		НоваяЗапись.Регистратор   = ШапкаДокумента.Ссылка;
		НоваяЗапись.Автомобиль    = ШапкаДокумента.Автомобиль;
		НоваяЗапись.ХозОперация   = ШапкаДокумента.ХозОперация;
		НоваяЗапись.Проект	      = Проект;
		Если ЭтоСборкаАвтомобиля Тогда
			НоваяЗапись.Партия        = ШапкаДокумента.Ссылка;
			НоваяЗапись.СтатусПартии  = Перечисления.СтатусыПартий.ТоварКупленный;
			НоваяЗапись.СкладКомпании = ШапкаДокумента.СкладКомпании;
			НоваяЗапись.Количество = 1;
		Иначе
			НоваяЗапись.Партия        = Партия;
			НоваяЗапись.СтатусПартии  = СтатусПартии;
			НоваяЗапись.СкладКомпании = СкладКомпанииАвтомобиля;
			НоваяЗапись.Количество = 0;
		КонецЕсли;
		НоваяЗапись.Сумма = СуммаАвтомобилей
			+ Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					ШапкаДокумента.СуммаРаботДокумента,
					ВалютаДокумента,
					КурсДокумента,
					ПараметрыПересчета.ВалютаРегл,
					ПараметрыПересчета.КурсРегл),
				2);
		НоваяЗапись.СуммаУпр = СуммаУпрАвтомобилей
			+ Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					ШапкаДокумента.СуммаРаботДокумента,
					ВалютаДокумента,
					КурсДокумента,
					ПараметрыПересчета.ВалютаУпр,
					ПараметрыПересчета.КурсУпр),
				2);
		НоваяЗапись.СуммаНДС = СуммаНДСАвтомобилей
			+ Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					ПараметрыПересчета.СуммаНДСАвторабот,
					ВалютаДокумента,
					КурсДокумента,
					ПараметрыПересчета.ВалютаРегл,
					ПараметрыПересчета.КурсРегл),
				2);
		НоваяЗапись.СуммаНДСУпр = СуммаНДСУпрАвтомобилей
			+ Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					ПараметрыПересчета.СуммаНДСАвторабот,
					ВалютаДокумента,
					КурсДокумента,
					ПараметрыПересчета.ВалютаУпр,
					ПараметрыПересчета.КурсУпр),
				2);
		НоваяЗапись.СуммаБезНДС   = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
		НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
	КонецЕсли;
	
	Если Не Отказ Тогда
		НаборЗаписейОстаткиАвтомобилей.Записать();
		Движения.РеализованныеАвтомобили.Записать();
	КонецЕсли;
	
	Если (НЕ НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии) Тогда
		
		Если НЕ ЗначениеЗаполнено(ШапкаДокумента.ВидРемонта.СтатьяДоходаРаботы) Тогда
			СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьАвтомобилей;
		Иначе
			СтатьяДоходовИРасходов = ШапкаДокумента.ВидРемонта.СтатьяДоходаРаботы;
		КонецЕсли;
		
		// Доходы и расходы
		НаборЗаписейДоходыИРасходы							= Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект 			= ЭтотОбъект;
		Если ПараметрыПересчета.ВедетсяБалансПоПодразделению Тогда
			НаборЗаписейДоходыИРасходы.Подразделение		= ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
		КонецЕсли;
		НаборЗаписейДоходыИРасходы.ШапкаДокумента			= ШапкаДокумента;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов	= СтатьяДоходовИРасходов;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте				= Ложь;
		НаборЗаписейДоходыИРасходы.Доход					= ШапкаДокумента.СуммаРаботДокумента;
		Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НеТребуетсяПроведение()
	
	Возврат НЕ (Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен
		ИЛИ Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт);
	
КонецФункции

Процедура ОбработкаПроведенияНакопленияПоКарточкамКонтрагентов()
	
	Если НЕ ЗначениеЗаполнено(Карточка) ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказНарядТовары.Ссылка.Контрагент,
	|	ЗаказНарядТовары.Ссылка.Карточка,
	|	ЗаказНарядТовары.Ссылка.ДатаЗакрытия КАК ПериодНакопления,
	|	СУММА(ЗаказНарядТовары.СуммаВсего) КАК Сумма,
	|	СУММА(ЗаказНарядТовары.Количество * ЗаказНарядТовары.Коэффициент) КАК КоличествоНоменклатуры,
	|	СУММА(0) КАК КоличествоЧеков
	|ИЗ
	|	Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
	|ГДЕ
	|	ЗаказНарядТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНарядТовары.Ссылка.Контрагент,
	|	ЗаказНарядТовары.Ссылка.Карточка,
	|	ЗаказНарядТовары.Ссылка.ДатаЗакрытия";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	НаборНакоплениеСумм = Движения.НакопленияПоКарточкамКонтрагентов;
	НаборНакоплениеСумм.ДокументСсылка   = Ссылка;
	НаборНакоплениеСумм.РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	НаборНакоплениеСумм.ВыполнитьДвижения();
	
КонецПроцедуры // ОбработкаПроведенияНакопленияПоКарточкамКонтрагентов()

Функция ПроверитьСкладскиеОрдера()
	
	КонтрольСкладскихОрдеровПоЗаказНаряду = ПраваИНастройкиПользователя.Значение("КонтрольСкладскихОрдеровПоЗаказНаряду", ЭтотОбъект);
	
	Если КонтрольСкладскихОрдеровПоЗаказНаряду = Перечисления.ВидыКонтроля.НеКонтролировать Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ИзвлечениеТоваровИзПроизводства.Ссылка КАК ДокументИзвлечения
	|ПОМЕСТИТЬ
	|	ТаблицаИзвлечениеТоваровИзПроизводства
	|ИЗ
	|	Документ.ИзвлечениеТоваровИзПроизводства КАК ИзвлечениеТоваровИзПроизводства
	|ГДЕ
	|	ИзвлечениеТоваровИзПроизводства.ДокументОснование = &ЗаказНаряд
	|СГРУППИРОВАТЬ ПО
	|	ИзвлечениеТоваровИзПроизводства.Ссылка
	|;
	|
	|ВЫБРАТЬ
	|	ПеремещениеТоваровВПроизводство.Ссылка КАК ДокументПеремещения
	|ПОМЕСТИТЬ
	|	ТаблицаПеремещениеТоваровВПроизводство
	|ИЗ
	|	Документ.ПеремещениеТоваровВПроизводство КАК ПеремещениеТоваровВПроизводство
	|ГДЕ
	|	ПеремещениеТоваровВПроизводство.ДокументОснование = &ЗаказНаряд
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваровВПроизводство.Ссылка
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаРегистраторов.Регистратор КАК Регистратор,
	|	ТаблицаРегистраторов.СкладКомпании КАК СкладКомпании
	|ПОМЕСТИТЬ
	|	ТаблицаРегистраторов
	|ИЗ(
	|	ВЫБРАТЬ
	|		ПриходныйСкладскойОрдер.Ссылка КАК Регистратор,
	|		ПриходныйСкладскойОрдер.СкладКомпании КАК СкладКомпании
	|	ИЗ
	|		Документ.ПриходныйСкладскойОрдер КАК ПриходныйСкладскойОрдер
	|	ГДЕ
	|		ПриходныйСкладскойОрдер.ДокументОснование В (ВЫБРАТЬ ДокументИзвлечения ИЗ ТаблицаИзвлечениеТоваровИзПроизводства)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасходныйСкладскойОрдер.Ссылка,
	|		РасходныйСкладскойОрдер.СкладКомпании
	|	ИЗ
	|		Документ.РасходныйСкладскойОрдер КАК РасходныйСкладскойОрдер
	|	ГДЕ
	|		РасходныйСкладскойОрдер.ДокументОснование В (ВЫБРАТЬ ДокументПеремещения ИЗ ТаблицаПеремещениеТоваровВПроизводство)) КАК ТаблицаРегистраторов
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРегистраторов.Регистратор,
	|	ТаблицаРегистраторов.СкладКомпании
	|ИНДЕКСИРОВАТЬ ПО
	|	СкладКомпании
	|;
	|
	|ВЫБРАТЬ
	|	ОбъединенныйЗапрос.СкладКомпании КАК СкладКомпании,
	|	ОбъединенныйЗапрос.Номенклатура.Артикул КАК Артикул,
	|	ОбъединенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ОбъединенныйЗапрос.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЕСТЬNULL(СУММА(ОбъединенныйЗапрос.КоличествоПриход), 0) КАК КоличествоПриход,
	|	ЕСТЬNULL(СУММА(ОбъединенныйЗапрос.КоличествоПриходОрдер), 0) КАК КоличествоПриходОрдер,
	|	ЕСТЬNULL(СУММА(ОбъединенныйЗапрос.КоличествоРасход), 0) КАК КоличествоРасход,
	|	ЕСТЬNULL(СУММА(ОбъединенныйЗапрос.КоличествоРасходОрдер), 0) КАК КоличествоРасходОрдер
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыВПроизводствеОбороты.Регистратор.СкладКомпании КАК СкладКомпании,
	|		ТоварыВПроизводствеОбороты.Номенклатура КАК Номенклатура,
	|		ТоварыВПроизводствеОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ТоварыВПроизводствеОбороты.КоличествоПриход КАК КоличествоПриход,
	|		ТоварыВПроизводствеОбороты.КоличествоРасход КАК КоличествоРасход,
	|		0 КАК КоличествоПриходОрдер,
	|		0 КАК КоличествоРасходОрдер
	|	ИЗ
	|		РегистрНакопления.ТоварыВПроизводстве.Обороты(, , Регистратор, ЗаказНаряд = &ЗаказНаряд) КАК ТоварыВПроизводствеОбороты
	|	ГДЕ
	|		ТоварыВПроизводствеОбороты.Регистратор.СкладКомпании.ВидСклада <> ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.Обычный)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаРегистраторов.СкладКомпании,
	|		ОстаткиТоваровОрдерныйСклад.Номенклатура,
	|		ОстаткиТоваровОрдерныйСклад.ХарактеристикаНоменклатуры,
	|		0,
	|		0,
	|		ВЫБОР
	|			КОГДА ОстаткиТоваровОрдерныйСклад.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|				0
	|			ИНАЧЕ ОстаткиТоваровОрдерныйСклад.Количество
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ОстаткиТоваровОрдерныйСклад.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|				ОстаткиТоваровОрдерныйСклад.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		ТаблицаРегистраторов КАК ТаблицаРегистраторов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровОрдерныйСклад КАК ОстаткиТоваровОрдерныйСклад
	|	ПО
	|		ТаблицаРегистраторов.СкладКомпании = ОстаткиТоваровОрдерныйСклад.СкладКомпании И 
	|		ТаблицаРегистраторов.Регистратор = ОстаткиТоваровОрдерныйСклад.Регистратор) КАК ОбъединенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъединенныйЗапрос.СкладКомпании,
	|	ОбъединенныйЗапрос.Номенклатура,
	|	ОбъединенныйЗапрос.ХарактеристикаНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	СкладКомпании.Наименование,
	|	Номенклатура.Наименование,
	|	ХарактеристикаНоменклатуры.Наименование";
	Запрос.УстановитьПараметр("ЗаказНаряд", Ссылка);
	Выборка=Запрос.Выполнить().Выбрать();
	
	СообщениеОбОшибке = "";
	Пока Выборка.Следующий() Цикл
		Если Выборка.КоличествоПриход <> Выборка.КоличествоПриходОрдер
			ИЛИ Выборка.КоличествоРасход <> Выборка.КоличествоРасходОрдер Тогда
			СообщениеОбОшибке = СообщениеОбОшибке + ?(ПустаяСтрока(СообщениеОбОшибке), "", Символы.ПС);
			СообщениеОбОшибке = СообщениеОбОшибке + Выборка.СкладКомпании + ": ";
			СообщениеОбОшибке = СообщениеОбОшибке + ?(ПустаяСтрока(Выборка.Артикул), "", "[" + Выборка.Артикул + "]");
			СообщениеОбОшибке = СообщениеОбОшибке + Выборка.Номенклатура;
			СообщениеОбОшибке = СообщениеОбОшибке
				+ ?(НЕ ЗначениеЗаполнено(Выборка.ХарактеристикаНоменклатуры), "", " (" + Выборка.ХарактеристикаНоменклатуры + ")");
			Если Выборка.КоличествоПриход <> Выборка.КоличествоПриходОрдер Тогда
				СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + Символы.Таб;
				СообщениеОбОшибке = СообщениеОбОшибке
					+ СтрШаблон(
						НСтр("ru = 'Перемещено в производство %1; По ордерному учету %2'"),
						Формат(Выборка.КоличествоПриход, "ЧДЦ=3; ЧН=0,000"),
						Формат(Выборка.КоличествоПриходОрдер, "ЧДЦ=3; ЧН=0,000")
					);
			КонецЕсли;
			Если Выборка.КоличествоРасход <> Выборка.КоличествоРасходОрдер Тогда
				СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + Символы.Таб;
				СообщениеОбОшибке = СообщениеОбОшибке
					+ СтрШаблон(
						НСтр("ru = 'Извлечено из производства %1; По ордерному учету %2'"),
						Формат(Выборка.КоличествоРасход, "ЧДЦ=3; ЧН=0,000"),
						Формат(Выборка.КоличествоРасходОрдер, "ЧДЦ=3; ЧН=0,000")
					);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	Результат = Истина;
	Если НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда
		ЗаголовокОбОшибке = СтрШаблон(
			НСтр("ru = 'По заказ-наряду <%1> обнаружено расхождение документов оперативного и складского учета:'"),
			СокрЛП(Ссылка)
		);
		Если КонтрольСкладскихОрдеровПоЗаказНаряду = Перечисления.ВидыКонтроля.Запрещать Тогда
			Результат = Ложь;
			ОбщегоНазначения.СообщитьПользователю(ЗаголовокОбОшибке);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ЗаголовокОбОшибке);
		КонецЕсли; 
		ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
	КонецЕсли;
	Возврат Результат;
КонецФункции // ПроверитьСкладскиеОрдера()

Процедура ОчиститьДвиженияДокумента()
	
	// Удалим все сформированные движения
	Для Каждого РегистрДвижения Из Движения Цикл
		Если РегистрДвижения.Метаданные() = Метаданные.РегистрыНакопления.ВыработкаСотрудников
			ИЛИ РегистрДвижения.Метаданные() = Метаданные.РегистрыНакопления.НачисленияСотрудникамПоЗаказНарядам Тогда
			// Выработка формируется всегда при выполнении
			Продолжить;
		КонецЕсли;
		РегистрДвижения.Очистить();
		РегистрДвижения.Записать();
	КонецЦикла;
	
	// Удалим введенные в оборот коды маркировки
	НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
	НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейСостоянияКодовМаркировки.ОтменаПроведения();
	
КонецПроцедуры

// Формирует записи в регистре планирования
//
Функция ОбновитьПланированиеДокумента()
	
	Отказ = Ложь;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ЭтоНовый", Ложь) Тогда
		
		// попробуем выполнить перенос планирования с заявки на ремонт
		ДокументОснованиеСРЗ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СводныйРемонтныйЗаказ, "ДокументОснование");
		
		Если ТипЗнч(ДокументОснованиеСРЗ) = Тип("ДокументСсылка.ЗаявкаНаРемонт")
			И ПланированиеРесурсов.ДокументЗапланирован(ДокументОснованиеСРЗ) Тогда
			
			ИнтервалыПланирования = ПланированиеРесурсов.ИнтервалыПланированияДокумента(ДокументОснованиеСРЗ);
			Отказ = Отказ ИЛИ ПланированиеРесурсов.ЗаписатьПланирование(ИнтервалыПланирования, ЭтотОбъект, Ложь);
			
			// деактивируем записи для заявки на ремонт
			Если НЕ Отказ И ИнтервалыПланирования.Количество() > 0 Тогда
				
				Отказ = Отказ
					ИЛИ РегистрыСведений.ПланированиеРабот.ПроверитьАктуальностьРабот(
						ДокументОснованиеСРЗ,
						ИнтервалыПланирования,
						Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ИсточникЗаписи") <> "ЗаписьНаРемонт" Тогда
		
		Отказ = Отказ ИЛИ ПланированиеРесурсов.СкорректироватьПланированиеПоДокументу(Ссылка);
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

// Формирует записи в регистре состава причин обращения
//
Функция ОбновитьСоставПричинОбращения()
	
	Отказ = Ложь;
	СоставПричинОбращения = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "СоставПричинОбращения");
	
	Если СоставПричинОбращения <> Неопределено Тогда
		
		СтрокиДляУдаления = Новый Массив;
		
		Для Каждого Строка Из СоставПричинОбращения Цикл
			
			Если НЕ ЗначениеЗаполнено(Строка.ПричинаОбращения) Тогда
				
				СтрокиДляУдаления.Добавить(Строка);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Строка Из СтрокиДляУдаления Цикл
			
			СоставПричинОбращения.Удалить(Строка);
			
		КонецЦикла;
		
		ПричиныОбращенийСлужебный.ОбновитьСоставПричинОбращений(Ссылка, СоставПричинОбращения, Отказ);
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

// Формирует записи в регистре пакетов работ
//
Функция ОбновитьСоставПакетовРабот()
	
	ПакетыРабот = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ПакетыРабот");
	
	Если ПакетыРабот <> Неопределено Тогда
		
		Документы.ЗаказНаряд.ИзменитьИнформациюОПакетах(Ссылка, ПакетыРабот);
		
	КонецЕсли;
	
КонецФункции

Функция ДатаПодчиненныхДокументовКорректна()
	
	Если Состояние <> ПредопределенноеЗначение("Справочник.ВидыСостоянийЗаказНарядов.Закрыт")
		И Состояние <> ПредопределенноеЗначение("Справочник.ВидыСостоянийЗаказНарядов.Выполнен") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ТипыПодчиненныхДокументов = Новый Массив;
	ТипыПодчиненныхДокументов.Добавить("ВводОстатковТоваровВПроизводстве");
	ТипыПодчиненныхДокументов.Добавить("ЗаказВнутренний");
	ТипыПодчиненныхДокументов.Добавить("ЗаказПокупателя");
	ТипыПодчиненныхДокументов.Добавить("ЗаказПоставщику");
	ТипыПодчиненныхДокументов.Добавить("ИзвлечениеТоваровИзПроизводства");
	ТипыПодчиненныхДокументов.Добавить("ПеремещениеТоваровВПроизводство");
	ТипыПодчиненныхДокументов.Добавить("СнятиеРезервовЗаказовПокупателя");
	ТипыПодчиненныхДокументов.Добавить("СписаниеТоваров");
	
	ШаблонЗапроса = "ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.Дата КАК Дата
	|%1
	|ИЗ
	|	Документ.%2 КАК Таблица
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|	И Таблица.Проведен
	|	И НЕ Таблица.ПометкаУдаления";
	ВременнаяТаблица = "ПОМЕСТИТЬ ПодчиненныеДокументы";
	
	ЧастиЗапроса = Новый Массив;
	
	Для Каждого Документ Из ТипыПодчиненныхДокументов Цикл
		
		ЧастиЗапроса.Добавить(СтрШаблон(ШаблонЗапроса, ВременнаяТаблица, Документ));
		ВременнаяТаблица = "";
		
	КонецЦикла;
	
	Разделитель = "
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	ТекстЗапроса = СтрСоединить(ЧастиЗапроса, Разделитель)+ ";
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ПодчиненныеДокументы.Ссылка) КАК ПредставлениеДокумента
	|ИЗ
	|	ПодчиненныеДокументы КАК ПодчиненныеДокументы
	|ГДЕ
	|	ПодчиненныеДокументы.Дата > &ДатаЗаказНаряда";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		
		Запрос.УстановитьПараметр("ДатаЗаказНаряда", ДатаОкончания);
		
	Иначе
		
		Запрос.УстановитьПараметр("ДатаЗаказНаряда", ТекущаяДатаСеанса());
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	НачалоСообщения = НСтр("ru='У заказ-наряда есть подчиненные документы с более поздней датой: %1.'");
	
	Выборка = РезультатЗапроса.Выбрать();
	ОписаниеДокументов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		ОписаниеДокументов.Добавить(Выборка.ПредставлениеДокумента);
		
	КонецЦикла;
	
	Сообщение = СтрШаблон(НачалоСообщения, Символы.ПС + СтрСоединить(ОписаниеДокументов, ";" + Символы.ПС));
	ОбщегоНазначения.СообщитьПользователю(Сообщение, ЭтотОбъект, "ДатаОкончания");
	Возврат Ложь;
	
КонецФункции

Процедура ПолучитьНовыйМоментВремени()
	
	Если Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт И ЗначениеЗаполнено(ДатаЗакрытия) Тогда
		ДополнительныеСвойства.Вставить("НовыйМоментВремени", Новый МоментВремени(ДатаЗакрытия, Ссылка));
	Иначе
		ДополнительныеСвойства.Вставить("НовыйМоментВремени", Новый МоментВремени(Дата("39991231"),Ссылка));
	КонецЕсли;
	
КонецПроцедуры

// Выполняет заполнение табличных частей Автоработы и Товары при вводе на основании Заявки на ремонт.
//
Процедура ЗаполнитьТабличныеЧастиПриВводеНаОсновании(ДанныеЗаполнения, ПричинаОбращения = Неопределено)
	
	Если ПричинаОбращения <> Неопределено Тогда
		
		ОтборПоПричине = Новый Структура("ИдентификаторПричиныОбращения", ПричинаОбращения.ИдентификаторПричиныОбращения);
		
		АвтоработыОснования = ДанныеЗаполнения.Автоработы.НайтиСтроки(ОтборПоПричине);
		ТоварыОснования     = ДанныеЗаполнения.Товары.НайтиСтроки(ОтборПоПричине);
		
	Иначе
		
		АвтоработыОснования = ДанныеЗаполнения.Автоработы;
		ТоварыОснования     = ДанныеЗаполнения.Товары;
		
	КонецЕсли;
	
	Для Каждого Авторабота Из АвтоработыОснования Цикл
		
		НоваяАвторабота = Автоработы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяАвторабота, Авторабота);
		НоваяАвторабота.ИсточникПродажи = Перечисления.ИсточникиПродажАвтосервиса.Клиент;
		
		ОтборПоАвтоработе = Новый Структура("ИдентификаторРаботы", Авторабота.ИдентификаторРаботы);
		ИсполнителиОснования = ДанныеЗаполнения.Исполнители.НайтиСтроки(ОтборПоАвтоработе);
		
		Для Каждого Исполнитель Из ИсполнителиОснования Цикл
			
			ЗаполнитьЗначенияСвойств(Исполнители.Добавить(), Исполнитель);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Товар Из ТоварыОснования Цикл
		
		НовыйТовар = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйТовар, Товар);
		НовыйТовар.ИсточникПродажи = Перечисления.ИсточникиПродажАвтосервиса.Клиент;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДоступностьВыполненияЗакакзНарядаПоУРВ(Отказ)

	ЭтоВосстановлениеПоследовательностей = ПолучитьЗначениеПараметраСтруктуры(
		ЭтотОбъект.ДополнительныеСвойства,
		"ЭтоВосстановлениеПоследовательностей",
		Ложь
	);
	Если ЭтоВосстановлениеПоследовательностей Тогда
		Возврат;	
	КонецЕсли; 
	
	ПараметрОпции = Новый Структура("ДоступностьПодсистемПоКлючуМаскаКлюча", ПараметрыСеанса.МаскаЛицензирования);
	Если Не Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен
		ИЛИ Не ПолучитьФункциональнуюОпцию("ДоступенУчетРабочегоВремени", ПараметрОпции)
		ИЛИ Не ПраваИНастройкиПользователя.Значение("УРВ_ЗапретитьВыполнениеЗаказНарядаПриОткрытыхПакетовРабот", ЭтотОбъект)
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СостоянияПакетовРабот = РегистрыСведений.СостоянияПакетовРабот.ПолучитьДанныеПакетовДокумента(ЭтотОбъект.Ссылка);
	УсловиеПоиска = Новый Структура();
	УсловиеПоиска.Вставить("СтатусПакета", Справочники.ВидыСостоянийПакетовРабот.Закрыт);
	ЗавершенныеПакетыРабот = СостоянияПакетовРабот.НайтиСтроки(УсловиеПоиска);
	
	Если СостоянияПакетовРабот.Количество() <> ЗавершенныеПакетыРабот.Количество() Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'У документа ""%1"" имеются не закрытые пакеты работ. Выполнение заказ-наряда отменено.'"),
				Ссылка
			),
			ЭтотОбъект,
			,, Отказ
		);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДоступностьВыполненияЗакакзНарядаПоУРВ()

#Область СервисныеКомпании

Функция ОбновитьСтатусВыполненияСервисныхКомпаний()
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтароеЗначениеСервиснойКомпании = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеСвойства,
		"СтароеЗначениеСервиснойКомпании",
		Справочники.СервисныеКампании.ПустаяСсылка()
	);
	
	Если СтароеЗначениеСервиснойКомпании.Пустая() И СервиснаяКампания.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ СервиснаяКампания.Пустая() Тогда
		
		Если СервиснаяКомпанияНеАктуальна() Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОчиститьВыполнениеСервисныхКампаний();
	
	Если НЕ СервиснаяКампания.Пустая() И НЕ ПометкаУдаления Тогда
		
		ЗаписатьВыполнениеСервисныхКампаний();
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ДайСтароеЗначениеСервиснойКомпании()
	
	Если ЭтоНовый() Тогда
		Возврат Справочники.СервисныеКампании.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "СервиснаяКампания");
	
КонецФункции

Функция СервиснаяКомпанияНеАктуальна()
	
	ЗаполнитьКонтекстПроверкиСервиснойКомпании();
	СервисныеКампании = АвтомобилиСервер.ПроверитьСервиснуюКампанию(СводныйРемонтныйЗаказ.Автомобиль, Дата, Ложь, Ссылка);
	УсловиеПоиска = Новый Структура("СервиснаяКампания", СервиснаяКампания);
	СтрокиСервисныхКампаний = СервисныеКампании.НайтиСтроки(УсловиеПоиска);
	
	Для Каждого СтрокаСервисныхКампаний Из СтрокиСервисныхКампаний Цикл
		
		Если ЗаписьСервиснойКомпанииАктуальна(СтрокаСервисныхКампаний) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		// Сервисная кампания уже была выполнена, другим документом или в другом месте
		Если ЗначениеЗаполнено(СтрокаСервисныхКампаний.ДатаВыполнения) Тогда
			
			ТекстСообщения = ДайТекстСообщенияСервиснаяКомпанияУжеВыполнена(СтрокаСервисныхКампаний);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СервиснаяКампания");
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначения.СообщитьПользователю(
		ДайТекстСообщенияСервиснаяКомпанияНеАктуальна(),
		ЭтотОбъект,
		"СервиснаяКампания"
	);
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьКонтекстПроверкиСервиснойКомпании()
	
	РеквизитыСервиснойКампании = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СервиснаяКампания,
		"ДатаНачала,ДатаОкончания"
	);
	РеквизитыСервиснойКампании.Вставить(
		"НачалоИнтервалаПустое",
		НЕ ЗначениеЗаполнено(РеквизитыСервиснойКампании.ДатаНачала)
	);
	РеквизитыСервиснойКампании.Вставить(
		"НачалоИнтервалаСервиснойКомпании",
		НачалоДня(РеквизитыСервиснойКампании.ДатаНачала)
	);
	РеквизитыСервиснойКампании.Вставить(
		"КонецИнтервалаПустой",
		НЕ ЗначениеЗаполнено(РеквизитыСервиснойКампании.ДатаОкончания)
	);
	РеквизитыСервиснойКампании.Вставить(
		"КонецИнтервалаСервиснойКомпании",
		КонецДня(РеквизитыСервиснойКампании.ДатаОкончания)
	);
	ДополнительныеСвойства.Вставить("КонтекстПроверкиСервиснойКомпании", РеквизитыСервиснойКампании);
	
КонецПроцедуры

Функция ЗаписьСервиснойКомпанииАктуальна(ЗаписьСервиснойКомпании)
	
	Если ЗаписьСервиснойКомпании.ДокументВыполнения = Ссылка Тогда
		Возврат Истина;
	КонецЕсли;
	
	КонтекстПроверкиСервиснойКомпании = ДополнительныеСвойства.КонтекстПроверкиСервиснойКомпании;
	Возврат НЕ ЗначениеЗаполнено(ЗаписьСервиснойКомпании.ДатаВыполнения)
		И (КонтекстПроверкиСервиснойКомпании.НачалоИнтервалаПустое
			ИЛИ КонтекстПроверкиСервиснойКомпании.НачалоИнтервалаСервиснойКомпании < Дата)
		И (КонтекстПроверкиСервиснойКомпании.КонецИнтервалаПустой
			ИЛИ КонтекстПроверкиСервиснойКомпании.КонецИнтервалаСервиснойКомпании > Дата);
	
КонецФункции

Функция ДайТекстСообщенияСервиснаяКомпанияУжеВыполнена(ЗаписьСервиснойКомпании)

	Если ЗначениеЗаполнено(ЗаписьСервиснойКомпании.ДокументВыполнения) Тогда
		
		Возврат СтрШаблон(
			НСтр("ru = 'Сервисная кампания <%1> для автомобиля <%2> с VIN [%3] уже выполнена по заказ-наряду <%4>.'"),
			СервиснаяКампания,
			СводныйРемонтныйЗаказ.Автомобиль,
			СводныйРемонтныйЗаказ.Автомобиль.VIN,
			ЗаписьСервиснойКомпании.ДокументВыполнения
		);
		
	КонецЕсли;
		
	Возврат СтрШаблон(
		НСтр("ru = 'Сервисная кампания <%1> для автомобиля <%2> с VIN [%3] уже выполнена сторонней организацией.'"),
		СервиснаяКампания,
		СводныйРемонтныйЗаказ.Автомобиль,
		СводныйРемонтныйЗаказ.Автомобиль.VIN
	);
	
КонецФункции

Функция ДайТекстСообщенияСервиснаяКомпанияНеАктуальна()
	
	КонтекстПроверкиСервиснойКомпании = ДополнительныеСвойства.КонтекстПроверкиСервиснойКомпании;
	
	Если
		КонтекстПроверкиСервиснойКомпании.НачалоИнтервалаСервиснойКомпании > Дата
		ИЛИ (КонтекстПроверкиСервиснойКомпании.КонецИнтервалаСервиснойКомпании < Дата
			И НЕ КонтекстПроверкиСервиснойКомпании.КонецИнтервалаПустой)
	Тогда
	
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Период действия сервисной кампании <%1>'"), СервиснаяКампания);
		
		Если НЕ КонтекстПроверкиСервиснойКомпании.НачалоИнтервалаПустое Тогда
			
			ТекстСообщения = ТекстСообщения
				+ Символы.НПП
				+ "с"
				+ Символы.НПП
				+ Формат(КонтекстПроверкиСервиснойКомпании.ДатаНачала, "ДЛФ=D");
			
		КонецЕсли;
			
		Если НЕ КонтекстПроверкиСервиснойКомпании.КонецИнтервалаПустой Тогда
			
			ТекстСообщения = ТекстСообщения
				+ Символы.НПП
				+ "по"
				+ Символы.НПП
				+ Формат(КонтекстПроверкиСервиснойКомпании.ДатаОкончания, "ДЛФ=D");
			
		КонецЕсли;
		
		Возврат ТекстСообщения;
		
	КонецЕсли;
	
	Возврат СтрШаблон(
		НСтр("ru = 'VIN [%1] автомобиля <%2> не включен в сервисную кампанию <%3>.'"),
		СводныйРемонтныйЗаказ.Автомобиль.VIN,
		СводныйРемонтныйЗаказ.Автомобиль,
		СервиснаяКампания
	);
	
КонецФункции

Процедура ОчиститьВыполнениеСервисныхКампаний()
	
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ВыполнениеСервисныхКампаний.VIN,
	|	ВыполнениеСервисныхКампаний.СервиснаяКампания
	|ИЗ
	|	РегистрСведений.ВыполнениеСервисныхКампаний КАК ВыполнениеСервисныхКампаний
	|ГДЕ
	|	ВыполнениеСервисныхКампаний.ДокументВыполнения = &ДокументВыполнения";
	Запрос.УстановитьПараметр("ДокументВыполнения", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РегистрыСведений.ВыполнениеСервисныхКампаний.ЗаполнитьВыполненныеСервисныеКампании(
			Выборка.VIN,
			Выборка.СервиснаяКампания,
			,
			'00010101',
			Документы.ЗаказНаряд.ПустаяСсылка()
		);
			
	КонецЦикла;
				
КонецПроцедуры

Процедура ЗаписатьВыполнениеСервисныхКампаний()
	
	VINАвтомобиля  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СводныйРемонтныйЗаказ,
		"Автомобиль.VIN,Автомобиль.ОригинальныйVIN"
	);
	ДатаВыполнения = '00010101';
	
	Если
		Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен
		ИЛИ Состояние=Справочники.ВидыСостоянийЗаказНарядов.Закрыт
	Тогда
	
		ДатаВыполнения = Дата;
	
	КонецЕсли;
	
	РегистрыСведений.ВыполнениеСервисныхКампаний.ЗаполнитьВыполненныеСервисныеКампании(
		VINАвтомобиля.АвтомобильVIN,
		СервиснаяКампания,
		,
		ДатаВыполнения,
		Ссылка
	);
	
	Если ЗначениеЗаполнено(VINАвтомобиля.АвтомобильОригинальныйVIN) Тогда
		
		РегистрыСведений.ВыполнениеСервисныхКампаний.ЗаполнитьВыполненныеСервисныеКампании(
			VINАвтомобиля.АвтомобильОригинальныйVIN,
			СервиснаяКампания,
			,
			ДатаВыполнения,
			Ссылка
		);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ПараметрыПроверкиОперацийСНоменклатурой()
	
	Параметры = Новый Структура;
	
	// заполняем
	Параметры.Вставить("ЗапретПродажи", Истина);
	ТаблицыДляПроверки = Новый Массив;
	ТаблицыДляПроверки.Добавить("Товары");
	ТаблицыДляПроверки.Добавить("Материалы");
	Параметры.Вставить("ТаблицыДляПроверки", ТаблицыДляПроверки);
	
	Возврат Параметры;
	
КонецФункции

Функция ПроверитьПараметрыЗапретаВыбораНоменклатуры()
	
	ПараметрыПроверки = ПараметрыПроверкиОперацийСНоменклатурой();
	ДополнительныеСвойства.Вставить("ПараметрыПроверки", ПараметрыПроверки);
	
	Возврат ОбработкаСобытийДокументаСервер.ПроверитьПараметрыЗапретаВыбораНоменклатуры(ЭтотОбъект, ПараметрыПроверки);
	
КонецФункции

Функция СписатьМаркировкиТоваровВПроизводстве(ШапкаДокумента)
	
	Если Состояние <> Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.МаркировкаТоваровВПроизводстве");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ЗаказНаряд", ШапкаДокумента.Ссылка);
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	&ДатаЗаписи КАК Период,
		|	МаркировкаТоваровВПроизводствеОстатки.ЗаказНаряд КАК Регистратор,
		|	МаркировкаТоваровВПроизводствеОстатки.ЗаказНаряд КАК ЗаказНаряд,
		|	МаркировкаТоваровВПроизводствеОстатки.Цех КАК Цех,
		|	МаркировкаТоваровВПроизводствеОстатки.Номенклатура КАК Номенклатура,
		|	МаркировкаТоваровВПроизводствеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	МаркировкаТоваровВПроизводствеОстатки.GTIN КАК GTIN,
		|	МаркировкаТоваровВПроизводствеОстатки.СерийныйНомер КАК СерийныйНомер,
		|	""(01)"" + МаркировкаТоваровВПроизводствеОстатки.GTIN + ""(21)"" + МаркировкаТоваровВПроизводствеОстатки.СерийныйНомер КАК КодМаркировки,
		|	МаркировкаТоваровВПроизводствеОстатки.ГТД КАК ГТД,
		|	МаркировкаТоваровВПроизводствеОстатки.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.МаркировкаТоваровВПроизводстве.Остатки(
		|		,
		|		ЗаказНаряд = &ЗаказНаряд
		|	) КАК МаркировкаТоваровВПроизводствеОстатки"
	);
	Запрос.УстановитьПараметр("ДатаЗаписи", ШапкаДокумента.Дата);
	Запрос.УстановитьПараметр("ЗаказНаряд", ШапкаДокумента.Ссылка);
	
	Движения.МаркировкаТоваровВПроизводстве.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецФункции

Процедура ЗаполнитьНастройкиОтправкиЗаказНарядаПоЭДО()
	
	Если ЗначениеЗаполнено(ПодразделениеКомпании) Тогда
		
		ЗаполнитьЗначенияСвойств(
		    ЭтотОбъект,
			Справочники.ПодразделенияКомпании.НастройкиОтправкиЗаказНарядаПоЭДО(ПодразделениеКомпании)
		);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьПродажуНижеСебестоимости(ТаблицаТовары, СтрокаТовар, МинимальныеНаценки, Показатели, Пользователь, ТаблицаМинимальныхНаценок)
	
	Результат = Истина;
	
	// определим процент минимальной наценки для переданной номенклатуры
	ПроцентНаценки = МинимальныеНаценки.Получить(СтрокаТовар.Номенклатура);
	Если ПроцентНаценки = Неопределено Тогда
		ПроцентНаценки = ОпределитьПроцентНаценки(СтрокаТовар.Номенклатура, Пользователь.ТекущийПользователь, ТаблицаМинимальныхНаценок);
		Если ПроцентНаценки = Неопределено Тогда
			ПроцентНаценки = ОпределитьПроцентНаценки(СтрокаТовар.Номенклатура, Пользователь.ГруппаДоступа, ТаблицаМинимальныхНаценок);
			Если ПроцентНаценки = Неопределено Тогда
				ПроцентНаценки = ОпределитьПроцентНаценки(СтрокаТовар.Номенклатура, Неопределено, ТаблицаМинимальныхНаценок);
				Если ПроцентНаценки = Неопределено Тогда
					ПроцентНаценки = ОпределитьПроцентНаценки(Справочники.Номенклатура.ПустаяСсылка(), Пользователь.ТекущийПользователь, ТаблицаМинимальныхНаценок);
					Если ПроцентНаценки = Неопределено Тогда
						ПроцентНаценки = ОпределитьПроцентНаценки(Справочники.Номенклатура.ПустаяСсылка(), Пользователь.ГруппаДоступа, ТаблицаМинимальныхНаценок);
						Если ПроцентНаценки = Неопределено Тогда
							ПроцентНаценки = ОпределитьПроцентНаценки(Справочники.Номенклатура.ПустаяСсылка(), Неопределено, ТаблицаМинимальныхНаценок);
							Если ПроцентНаценки = Неопределено Тогда
								ПроцентНаценки = 0;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		МинимальныеНаценки.Вставить(СтрокаТовар.Номенклатура, ПроцентНаценки);
	КонецЕсли;
	
	НижеСебестоимости = Ложь;
	ОбщаяСистемаНалогообложения = Показатели.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая;
	РасчетРегл = (ВалютаДокумента = Показатели.ВалютаРегл) И (КурсДокумента = Показатели.КурсРегл);
	Если ОбщаяСистемаНалогообложения Тогда
		Себестоимость = Показатели.СебестоимостьБезНДС;
		СебестоимостьУпр = Показатели.СебестоимостьБезНДСУпр;
		Сумма = Показатели.СуммаБезНДС;
		СуммаУпр = Показатели.СуммаБезНДСУпр;
	Иначе
		Себестоимость = Показатели.Себестоимость;
		СебестоимостьУпр = Показатели.СебестоимостьУпр;
		Сумма = Показатели.Сумма;
		СуммаУпр = Показатели.СуммаУпр;
	КонецЕсли;
	
	Если РасчетРегл Тогда
		МинимальнаяСумма = Себестоимость * (1 + ПроцентНаценки/100);
		Если МинимальнаяСумма > Сумма Тогда 
			НижеСебестоимости = Истина; 
		КонецЕсли;
	Иначе
		МинимальнаяСуммаУпр = СебестоимостьУпр * (1 + ПроцентНаценки/100);
		Если МинимальнаяСуммаУпр > СуммаУпр Тогда 
			НижеСебестоимости = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НижеСебестоимости Тогда
		Если РасчетРегл Тогда
			РасчетВалюта = Показатели.ВалютаРегл;
		Иначе
			РасчетВалюта = Показатели.ВалютаУпр;
		КонецЕсли;
		Если ПроцентНаценки = 0 Тогда
			СтрокаИнформации = " " + НСтр("ru = 'Себестоимость товара %1 %2%4, сумма продажи %3 %2%4. Продажа ниже себестоимости запрещена.'");
			СтрокаИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				СтрокаИнформации,
				?(РасчетРегл, МинимальнаяСумма, МинимальнаяСуммаУпр),
				РасчетВалюта,
				?(РасчетРегл, Сумма, СуммаУпр),
				?(ОбщаяСистемаНалогообложения, " " + НСтр("ru = 'без НДС'"), "")
			);
			
			ТекстСообщения = НСтр("ru = '[%1] Товар %2%3'");
			ВывестиСообщение(
				ТекстСообщения + СтрокаИнформации,
				СтрокаТовар.Номенклатура,
				, , ,
				УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаТовар.Номенклатура),
				СтрокаТовар.Номенклатура,
				?(ЗначениеЗаполнено(СтрокаТовар.ХарактеристикаНоменклатуры)," " + НСтр("ru = 'с характеристикой'") +" " 
					+ СокрЛП(СтрокаТовар.ХарактеристикаНоменклатуры) + ".", ".")
			);
		Иначе
			СтрокаИнформации = " " + НСтр("ru = 'Себестоимость товара с установленной минимальной наценкой %1 %2%4, сумма продажи %3 %2%4. Продажа ниже себестоимости с минимальной наценкой запрещена.'");
			СтрокаИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				СтрокаИнформации,
				?(РасчетРегл, МинимальнаяСумма, МинимальнаяСуммаУпр),
				РасчетВалюта,
				?(РасчетРегл, Сумма, СуммаУпр),
				?(ОбщаяСистемаНалогообложения, " " + НСтр("ru = 'без НДС'"), "")
			);
			
			ТекстСообщения = НСтр("ru = '[%1] Товар %2%3 Минимальная наценка %4 %.'");
			ВывестиСообщение(
				ТекстСообщения + СтрокаИнформации,
				СтрокаТовар.Номенклатура,
				, , ,
				УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаТовар.Номенклатура),
				СтрокаТовар.Номенклатура,
				?(ЗначениеЗаполнено(СтрокаТовар.ХарактеристикаНоменклатуры)," " + НСтр("ru = 'с характеристикой'") +" " 
					+ СокрЛП(СтрокаТовар.ХарактеристикаНоменклатуры) + ".", "."),
				ПроцентНаценки
			);
		КонецЕсли;
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определить процент наценки
//
Функция ОпределитьПроцентНаценки(Номенклатура, Пользователь, ТаблицаМинимальныхНаценок);
	
	ОтборМинимальнойНаценки = Новый Структура("Номенклатура, Пользователь", Номенклатура, Пользователь);
	НайденныеСтроки = ТаблицаМинимальныхНаценок.НайтиСтроки(ОтборМинимальнойНаценки);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ПроцентНаценки = НайденныеСтроки[0].ПроцентНаценки;
		
	КонецЕсли;
	
	Возврат ПроцентНаценки;
	
КонецФункции

Функция АвторизованныйПользователь()
	
	Пользователь = Новый Структура;
	Пользователь.Вставить("ТекущийПользователь", ПользователиКлиентСервер.АвторизованныйПользователь());
	
	ЗапросГруппыДоступа = Новый Запрос;
	ЗапросГруппыДоступа.Текст = 
		"ВЫБРАТЬ
		|	ГруппыДоступаПользователи.Ссылка
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|ГДЕ
		|	ГруппыДоступаПользователи.Пользователь = &Пользователь
		|	И НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления";
	ЗапросГруппыДоступа.УстановитьПараметр("Пользователь", Пользователь.ТекущийПользователь);
	
	Выборка = ЗапросГруппыДоступа.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Пользователь.Вставить("ГруппаДоступа", Выборка.Ссылка);
	Иначе
		Пользователь.Вставить("ГруппаДоступа", Справочники.ГруппыДоступа.ПустаяСсылка());
	КонецЕсли;
	
	Возврат Пользователь;
	
КонецФункции 

Функция ТаблицаМинимальныхНаценок(РежимПроведения, Пользователь, ТаблицаТовары)
	
	ЗапросПолученияНаценок = Новый Запрос;
	ЗапросПолученияНаценок.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ТипНоменклатуры
	|ПОМЕСТИТЬ СписокНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Товары)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МинимальнаяНаценкаСрезПоследних.Пользователь,
	|	ЕСТЬNULL(СписокНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	МинимальнаяНаценкаСрезПоследних.ТипНоменклатуры,
	|	МинимальнаяНаценкаСрезПоследних.ПроцентНаценки
	|ИЗ
	|	РегистрСведений.МинимальнаяНаценка.СрезПоследних(
	|			&МоментВремени,
	|			(Пользователь = &Пользователь
	|				ИЛИ Пользователь = &ГруппаДоступа
	|				ИЛИ Пользователь = НЕОПРЕДЕЛЕНО)
	|				И (ТипНоменклатуры В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							ТТ.ТипНоменклатуры
	|						ИЗ
	|							СписокНоменклатуры КАК ТТ)
	|					ИЛИ ТипНоменклатуры = ЗНАЧЕНИЕ(Справочник.ТипыНоменклатуры.ПустаяСсылка))) КАК МинимальнаяНаценкаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокНоменклатуры КАК СписокНоменклатуры
	|		ПО МинимальнаяНаценкаСрезПоследних.ТипНоменклатуры = СписокНоменклатуры.ТипНоменклатуры
	|ГДЕ
	|	МинимальнаяНаценкаСрезПоследних.Активна";
	
	ЗапросПолученияНаценок.УстановитьПараметр("МоментВремени", ?(РежимПроведения = РежимПроведенияДокумента.Оперативный, Неопределено, Ссылка.МоментВремени()));
	ЗапросПолученияНаценок.УстановитьПараметр("Пользователь", Пользователь.ТекущийПользователь);
	ЗапросПолученияНаценок.УстановитьПараметр("ГруппаДоступа", Пользователь.ГруппаДоступа);
	ЗапросПолученияНаценок.УстановитьПараметр("Товары", ТаблицаТовары.ВыгрузитьКолонку("Номенклатура"));
	ТаблицаМинимальныхНаценок = ЗапросПолученияНаценок.Выполнить().Выгрузить();
	
	Возврат ТаблицаМинимальныхНаценок;
	
КонецФункции

#КонецОбласти

#КонецЕсли
