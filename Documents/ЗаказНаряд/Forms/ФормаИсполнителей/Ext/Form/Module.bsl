
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Параметры.Свойство("ИдентификаторВладельца") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если РаботаСФормой.МожноУстановитьОтборПоВладельцу(Параметры) Тогда
		
		РаботаСФормой.УстановитьОтборПоВладельцуНаДерево(Дерево, Параметры.Отбор);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	РаботаСФормой.СкрытьЭлементыНедоступныеПоКлючу(ЭтотОбъект);
	
	РаботаСФормой.УстановитьРежимВыбора(ЭтотОбъект, Элементы.Список, Параметры);
	
	РаботаСФормой.НастроитьОсновнойДинамическийСписокФормы(ЭтотОбъект);
	
	РаботаСФормойКлиентСервер.УстановитьВидимостьДереваИерархии(
		РаботаСФормойКлиентСервер.НовоеОписаниеДереваИерархии(Элементы),
		ВидимостьДерева
	);
	
	НастроитьКоманднуюПанельФормы();
	Заголовок = "Подбор исполнителей";
	
	ИдентификаторВладельца            = Параметры.ИдентификаторВладельца;
	Цех                               = Параметры.Цех;
	УстанавливатьОтборПоЦехуПриПодбореИсполнителей = ПравоПользователя("УстанавливатьОтборПоЦехуПриПодбореИсполнителей");
	
	ЗаказНарядОснование               = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ЗаказНаряд");
	ИдентификаторРаботы               = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ИдентификаторРаботы");
	
	АвтоматическийПроцентУчастия        = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(
		ЭтотОбъект.ИмяФормы, "АвтоматическийПроцентУчастия", Истина);
	ЗапрашиватьПроцентУчастия           = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(ЭтотОбъект.ИмяФормы, "ЗапрашиватьПроцентУчастия", Ложь);
	ИсполнителиОдинаковыеДляВсехРабот   = Параметры.ИсполнителиОдинаковыеДляВсехРабот;
	ИсполнителиОдинаковыеВРамкахПричины = Параметры.ИсполнителиОдинаковыеВРамкахПричины;
	
	Элементы.ИсполнителиАвтоматическоеРаспределениеПроцентовУчастия.Пометка = АвтоматическийПроцентУчастия;
	Элементы.ЗапрашиватьПроцентУчастия.Пометка                              = ЗапрашиватьПроцентУчастия;
	Элементы.ИсполнителиОдинаковыеДляВсехРабот.Пометка                      = ИсполнителиОдинаковыеДляВсехРабот;
	Элементы.ИсполнителиОдинаковыеИсполнителиВРамкахПричины.Пометка         = ИсполнителиОдинаковыеВРамкахПричины;
	Элементы.ИсполнителиОдинаковыеИсполнителиВРамкахПричины.Видимость =
		ПолучитьЗначениеПараметраСтруктуры(Параметры, "ИспользоватьПричиныОбращений", Ложь);
	
	Если ЗаказНарядОснование = Неопределено Тогда
		Если Элементы.Найти("ИсполнителиЗаполнитьПоУРВ") <> Неопределено Тогда
			Элементы.ИсполнителиЗаполнитьПоУРВ.Видимость = Ложь;
		КонецЕсли;
	Иначе
		ЗаказНаряд = ЗаказНарядОснование;
	КонецЕсли;
	
	// Установим параметры начисления сотрудников и вывод параметров пользователю
	УровеньДоступаКНачислениямСотрудникамВЗаказНарядах =
			ПравоПользователя("УровеньДоступаКНачислениямСотрудникамВЗаказНарядах");
	ОтображатьСотрудникамНачисления = ЗаказНарядОснование <> Неопределено
		И НЕ ТипЗнч(ЗаказНарядОснование) = Тип("ДокументСсылка.ЗаявкаНаРемонт")
		И Автосервис.ДоступноНачислениеСотрудникам();
		
	Если НЕ ОтображатьСотрудникамНачисления
		ИЛИ УровеньДоступаКНачислениямСотрудникамВЗаказНарядах =
				Перечисления.УровеньДоступаКНачислениямСотрудникамВЗаказНарядах.Запрещено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаНачислений",
			"Видимость",
			Ложь);
	Иначе
		// Установим доступность
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаНачислений",
			"Доступность",
			УровеньДоступаКНачислениямСотрудникамВЗаказНарядах =
				Перечисления.УровеньДоступаКНачислениямСотрудникамВЗаказНарядах.Редактирование);
		// Заполним данные для расчета начислений сотрудникам
		ДанныеОбАвтоработе = ПолучитьЗначениеПараметраСтруктуры(
			Параметры,
			"ПараметрыРасчетаНачислений",
			АвтосервисКлиентСервер.ДанныеАвтоработыДляРасчетаНачисления());
	КонецЕсли;
	
	ЗаполнитьИсполнителейИзХранилища(Параметры.АдресИсполнителей);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗащищенныеФункцииКлиент.РазрешитьСниматьОтборыУстановленныеИзСвязиПараметровВыбора(ЭтотОбъект);

	ИспользоватьОтборПоЦеху = Истина;
	Если НЕ УстанавливатьОтборПоЦехуПриПодбореИсполнителей Тогда
		ИспользоватьОтборПоЦеху = Ложь;
	ИначеЕсли НЕ ЗначениеЗаполнено(Цех) Тогда 
		ИспользоватьОтборПоЦеху = Ложь;
	КонецЕсли;
	УстановитьОтборПоЦеху(Цех, ИспользоватьОтборПоЦеху);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Штрихкодирование
	ШтрихкодированиеКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец Штрихкодирование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	РаботаСФормойКлиент.УстановитьТекущуюСтрокуНаНовыйОбъект(Элементы.Список, НовыйОбъект);
		
КонецПроцедуры 

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	РаботаСФормойКлиентСервер.УстановитьВидимостьДереваИерархии(
		РаботаСФормойКлиентСервер.НовоеОписаниеДереваИерархии(Элементы),
		ВидимостьДерева
	);
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ (ТипЗнч(Элементы.Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") ИЛИ Элементы.Список.ТекущиеДанные.ЭтоГруппа) Тогда
		ПодобратьИсполнителя(ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СписокВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуНачисления(СтрокаИсполнителя, РасчитатьСуммуНачисления = Ложь, ИзмененИсполнитель = Ложь)
	
	// Проверим необходимость выполнения расчетов
	Если НЕ ОтображатьСотрудникамНачисления
		ИЛИ УровеньДоступаКНачислениямСотрудникамВЗаказНарядах =
			ПредопределенноеЗначение("Перечисление.УровеньДоступаКНачислениямСотрудникамВЗаказНарядах.Запрещено") Тогда
		Возврат;
	КонецЕсли;
	
	// Получим настройку расчета суммы начисления для сотрудника
	Если ИзмененИсполнитель
		ИЛИ НЕ ЗначениеЗаполнено(СтрокаИсполнителя.ВидНачисления) Тогда
		НастройкаНачислений = НастройкаНачисленияСотруднику(СтрокаИсполнителя.Исполнитель, ДанныеОбАвтоработе);
		
		// Заполняем полученной настройкой
		Если НастройкаНачислений <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаИсполнителя, НастройкаНачислений);
		Иначе
			// Чистим от заполнения
			СтрокаИсполнителя.ВидНачисления = ПредопределенноеЗначение("ПланВидовРасчета.НачисленияИУдержания.ПустаяСсылка");
			СтрокаИсполнителя.ПараметрРасчетаНачисления = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ РасчитатьСуммуНачисления Тогда
		Возврат;
	КонецЕсли;
	
	// Расчитаем сумму начислено
	АвтосервисКлиентСервер.РассчитатьСуммуНачисленияСотрудника(СтрокаИсполнителя, ДанныеОбАвтоработе);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкаНачисленияСотруднику(Сотрудник, ДанныеАвтоработы)
	
	ПараметрыПоиска = Новый Структура();
	ПараметрыПоиска.Вставить("Сотрудники",  Сотрудник);
	ПараметрыПоиска.Вставить("Организация", ДанныеАвтоработы.Организация);
	
	НастройкиНачисления = Автосервис.ПолучитьПараметрыНачисленийСотрудников(ПараметрыПоиска, ДанныеАвтоработы);
	
	Возврат НастройкиНачисления.Получить(Сотрудник);
	
КонецФункции

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Группа Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// ОценкаПроизводительности
	Если Копирование Тогда
		
		ОценкаПроизводительностиКлиент.ЗамерВремени("КопированиеСправочникаСотрудники");
		
	Иначе
		
		ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормыСправочникаСотрудники");
		
	КонецЕсли;
	// Конец ОценкаПроизводительности 
	
КонецПроцедуры 

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Если
		ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элемент.ТекущиеДанные, "ЭтоГруппа")
		И Элемент.ТекущиеДанные.ЭтоГруппа
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормыСправочникаСотрудники");
	// Конец ОценкаПроизводительности 
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнители

// Обработчик события возникающего на клиенте после удаления строки в контексте сервера.
//
&НаКлиенте
Процедура ИсполнителиПослеУдаления(Элемент)
	
	УправлениеДиалогомАльфаАвтоКлиент.ПересчитатьПроцентУчастия(ЭтотОбъект, ЭтотОбъект,, Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ПодобратьИсполнителя(ПараметрыПеретаскивания.Значение);
	
КонецПроцедуры

#Область ОбработчикиСобытийПолейТаблицыФормыИсполнители

&НаСервере
Процедура ИсполнителиИсполнительПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ИдентификаторСтроки = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИдентификаторСтроки", Элементы.Исполнители.ТекущаяСтрока);
	
	ТекущиеДанные = Исполнители.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Документы.ЗаказНаряд.ИсполнителиИсполнительПриИзменении(ЭтотОбъект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ИсполнителиИсполнительПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ИсполнителиИсполнительПриИзмененииНаСервере(ПараметрыДействия);
	
	ТекущаяСтрока = Элементы.Исполнители.ТекущиеДанные;
	РассчитатьСуммуНачисления(ТекущаяСтрока, Истина, Истина);
	
	УправлениеДиалогомАльфаАвтоКлиент.УстановитьПроцентУчастияСтроки(ЭтотОбъект, ТекущаяСтрока, Исполнители);
	
КонецПроцедуры 

&НаКлиенте
Процедура ИсполнителиИсполнительНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ЦехСтроки = Элементы.Исполнители.ТекущиеДанные.Цех;
	Если ЗначениеЗаполнено(ЦехСтроки) Тогда
		УправлениеДиалогомВызовСервера.ОбновитьПараметрВыбора(Элементы.ИсполнителиИсполнитель.ПараметрыВыбора, "Отбор.Цех", ЦехСтроки);
	ИначеЕсли ЗначениеЗаполнено(Цех) Тогда
		УправлениеДиалогомВызовСервера.ОбновитьПараметрВыбора(Элементы.ИсполнителиИсполнитель.ПараметрыВыбора, "Отбор.Цех", Цех);
	Иначе
		УправлениеДиалогомВызовСервера.УдалитьПараметрВыбора(Элементы.ИсполнителиИсполнитель.ПараметрыВыбора, "Отбор.Цех");
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ИсполнителиПроцентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	
	УправлениеДиалогомАльфаАвтоКлиент.ПересчитатьПроцентУчастия(ЭтотОбъект, ЭтотОбъект, ТекущиеДанные, Исполнители);
	
	// Пересчитаем начисления сотрудникам.
	Для Каждого Исполнитель Из Исполнители Цикл
		
		РассчитатьСуммуНачисления(Исполнитель, Истина);
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ИсполнителиВидНачисленияПриИзмененииНаСервере()
	
	ТекущаяСтрока = Исполнители.НайтиПоИдентификатору(Элементы.Исполнители.ТекущаяСтрока);
	ТекущаяСтрока.СпособРасчета = ТекущаяСтрока.ВидНачисления.СпособРасчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиВидНачисленияПриИзменении(Элемент)
	
	ИсполнителиВидНачисленияПриИзмененииНаСервере();
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	АвтосервисКлиентСервер.РассчитатьСуммуНачисленияСотрудника(ТекущиеДанные, ДанныеОбАвтоработе);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПараметрРасчетаНачисленияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	АвтосервисКлиентСервер.РассчитатьСуммуНачисленияСотрудника(ТекущиеДанные, ДанныеОбАвтоработе);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьСкрытьДерево(Команда)

	ВидимостьДерева = Не ВидимостьДерева;	
	РаботаСФормойКлиентСервер.УстановитьВидимостьДереваИерархии(
		РаботаСФормойКлиентСервер.НовоеОписаниеДереваИерархии(Элементы),
		ВидимостьДерева
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (ТипЗнч(Элементы.Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") ИЛИ Элементы.Список.ТекущиеДанные.ЭтоГруппа) Тогда
		ПодобратьИсполнителя(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура Очистить(Команда)
	
	Если Исполнители.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработчикОчисткиПодобранныхИсполнителей", ЭтотОбъект);
	
	ПоказатьВопрос(ОбработчикОповещения, НСтр("ru = 'Очистить таблицу подобранных исполнителей?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьПоУРВ(Команда)
	
	Если НЕ ЗначениеЗаполнено(ЗаказНаряд) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Заказ-наряд не записан. Заполнение исполнителей отменено.'"));
		Возврат;
	КонецЕсли;
	
	Если ИсполнителиОдинаковыеДляВсехРабот Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ПроверкаОдинаковыхИсполнителейПередЗаполнением");
		ПоказатьВопрос(ОбработчикОповещения, НСтр("ru = 'Перед заполнением будет снят флаг ""Единые исполнители"". Продолжить?'"), РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Заполнение исполнителей'"));
		Возврат;
	КонецЕсли;
	
	ПроверкаПередЗаполнениемПоУРВ();
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗавершитьПодбор(Команда)
	
	// Проверим заполнение полей начислений
	Если ОтображатьСотрудникамНачисления Тогда
		Отказ = Ложь;
		АвтосервисКлиентСервер.ПроверитьЗаполнениеПараметровРасчетаНачислений(Исполнители,, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	АдресИсполнителейВХранилище = ЗаписатьПодборВХранилище();
	
	Результат = Новый Структура;
	Результат.Вставить("ИсполнителиОдинаковыеДляВсехРабот",   ИсполнителиОдинаковыеДляВсехРабот);
	Результат.Вставить("ИсполнителиОдинаковыеВРамкахПричины", ИсполнителиОдинаковыеВРамкахПричины);
	Результат.Вставить("АдресИсполнителейВХранилище",         АдресИсполнителейВХранилище);
	Результат.Вставить("ПакетРабот",                          ПакетРабот);
	
	// суммарный процент исполнителей должен быть 100%
	Если Исполнители.Количество() > 0 И Исполнители.Итог("Процент") <> 100 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Общий процент исполнителей для выбранной работы отличается от 100%.'"));
		Возврат;
	КонецЕсли;
	
	Закрыть(Результат);
	
КонецПроцедуры // ЗавершитьПодбор()

&НаКлиенте
Процедура АвтоматическоеРаспределениеПроцентовУчастия(Команда)
	
	АвтоматическийПроцентУчастия = НЕ АвтоматическийПроцентУчастия;
	Элементы.ИсполнителиАвтоматическоеРаспределениеПроцентовУчастия.Пометка = АвтоматическийПроцентУчастия;
	
КонецПроцедуры

&НаКлиенте
Процедура ОдинаковыеДляВсехРаботЗавершение()
	
	ИсполнителиОдинаковыеДляВсехРабот = НЕ ИсполнителиОдинаковыеДляВсехРабот;
	Элементы.ИсполнителиОдинаковыеДляВсехРабот.Пометка = ИсполнителиОдинаковыеДляВсехРабот;
	
	Если Элементы.ИсполнителиОдинаковыеДляВсехРабот.Пометка Тогда
		Элементы.ИсполнителиОдинаковыеИсполнителиВРамкахПричины.Пометка = Ложь;
		ИсполнителиОдинаковыеВРамкахПричины = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОдинаковыеДляВсехРабот(Команда)
	
	Если НЕ ИсполнителиОдинаковыеДляВсехРабот Тогда
		
		СтрокаИсполнителей = "";
		Для Каждого ИсполнительРаботы Из Исполнители Цикл
			
			Если НЕ ПустаяСтрока(СтрокаИсполнителей) Тогда
				СтрокаИсполнителей = СтрокаИсполнителей + "
					|";
			КонецЕсли;
				
			СтрокаИсполнителей = СтрокаИсполнителей + СокрЛП(ИсполнительРаботы.Исполнитель) + " - "+Формат(ИсполнительРаботы.Процент, "ЧЦ=5; ЧДЦ=2; ЧН=0,00") + "%";
			
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(СтрокаИсполнителей) Тогда
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Все работы должны выполняться одними исполнителями:
													| <""%1"">'"), СтрокаИсполнителей);
			
			Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ОдинаковыеДляВсехРабот");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет, НСтр("ru = 'Заполнение исполнителей'"));
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОдинаковыеДляВсехРаботЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОдинаковыеИсполнителиВРамкахПричиныЗавершение()
	
	ИсполнителиОдинаковыеВРамкахПричины = НЕ ИсполнителиОдинаковыеВРамкахПричины;
	Элементы.ИсполнителиОдинаковыеИсполнителиВРамкахПричины.Пометка = ИсполнителиОдинаковыеВРамкахПричины;
	
	Если Элементы.ИсполнителиОдинаковыеИсполнителиВРамкахПричины.Пометка Тогда
		Элементы.ИсполнителиОдинаковыеДляВсехРабот.Пометка = Ложь;
		ИсполнителиОдинаковыеДляВсехРабот = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОдинаковыеИсполнителиВРамкахПричины(Команда)
	
	Если НЕ ИсполнителиОдинаковыеВРамкахПричины Тогда
		
		СтрокаИсполнителей = "";
		Для Каждого ИсполнительРаботы Из Исполнители Цикл
			
			Если НЕ ПустаяСтрока(СтрокаИсполнителей) Тогда
				СтрокаИсполнителей = СтрокаИсполнителей + "
				|";
			КонецЕсли;
			
			СтрокаИсполнителей = СтрокаИсполнителей + СокрЛП(ИсполнительРаботы.Исполнитель) + " - "
								+ Формат(ИсполнительРаботы.Процент, "ЧЦ=5; ЧДЦ=2; ЧН=0,00") + "%";
			
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(СтрокаИсполнителей) Тогда
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Все работы должны выполняться
								|одними исполнителями в рамках причины обращения: <""%1"">'"), СтрокаИсполнителей);
			Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения",
													ЭтотОбъект, "ОдинаковыеИсполнителиВРамкахПричины");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет,
							НСтр("ru = 'Заполнение исполнителей'"));
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОдинаковыеИсполнителиВРамкахПричиныЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПроцентУчастия(Команда)
	
	КоличествоИсполнителей = Исполнители.Количество();
	
	Если КоличествоИсполнителей<=0 Тогда
		Возврат;
	КонецЕсли;
	
	ПроцентУчастия = 100/КоличествоИсполнителей;
	ПроцентУчастия = Окр(100/КоличествоИсполнителей, 2);
	
	СтрокаИсполнителей = "";
	Для Каждого ИсполнительРаботы Из Исполнители Цикл
		Если НЕ ПустаяСтрока(СтрокаИсполнителей) Тогда
			СтрокаИсполнителей=СтрокаИсполнителей+"
				|";
		КонецЕсли;
		СтрокаИсполнителей = СтрокаИсполнителей + СокрЛП(ИсполнительРаботы.Исполнитель) + " - "+Формат(ИсполнительРаботы.Процент,"ЧЦ=5; ЧДЦ=2; ЧН=0,00")+"%";
	КонецЦикла;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Всем исполнителям назначить процесс участия <""%1""> :
														| <""%2"">'"), Формат(ПроцентУчастия,"ЧЦ=5; ЧДЦ=2; ЧН=0,00"), СтрокаИсполнителей);
	
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "РаспределитьПроцентУчастия");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет, НСтр("ru = 'Заполнение исполнителей'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДляВсех(Команда)
	
	СтрокаИсполнителей = "";
	Для Каждого ИсполнительРаботы Из Исполнители Цикл
		Если НЕ ПустаяСтрока(СтрокаИсполнителей) Тогда
			СтрокаИсполнителей = СтрокаИсполнителей + "
			|";
		КонецЕсли;
		СтрокаИсполнителей = СтрокаИсполнителей + СокрЛП(ИсполнительРаботы.Исполнитель)+" - "+Формат(ИсполнительРаботы.Процент, "ЧЦ=5; ЧДЦ=2; ЧН=0,00") + "%";
	КонецЦикла;
	
	Если ПустаяСтрока(СтрокаИсполнителей) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Установить исполнителей для всех работ: %1'"), СтрокаИсполнителей);
	
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "УстановитьДляВсехПроцентНаценки");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет, НСтр("ru = 'Заполнение исполнителей'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапрашиватьПроцентУчастия(Команда)
	
	ЗапрашиватьПроцентУчастия = НЕ ЗапрашиватьПроцентУчастия;
	Элементы.ЗапрашиватьПроцентУчастия.Пометка = ЗапрашиватьПроцентУчастия;
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьКоманднуюПанельФормы()
	
	Для Каждого Элемент Из Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) <> Тип("ГруппаФормы") Или Элемент.Вид <> ВидГруппыФормы.ГруппаКнопок Тогда
			
			Элемент.Отображение = ОтображениеКнопки.Картинка;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Элементы.Список.РежимВыбора Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ФормаВыбрать", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ФормаВыбрать", "Отображение", ОтображениеКнопки.КартинкаИТекст);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ФормаСоздать", "Отображение", ОтображениеКнопки.КартинкаИТекст);
		
	КонецЕсли;
	
	Если Не(Элементы.Список.РежимВыбора Или Элементы.Найти("ФормаВыбрать") = Неопределено) Тогда
		
		Элементы["ФормаВыбрать"].Видимость = ЛОЖЬ;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаПеренестиЭлемент",
		"ТолькоВоВсехДействиях",
		Ложь
	);
	
	Если Элементы.Найти("ФормаРежимПросмотра") <> Неопределено Тогда
		
		Для каждого ЭлементФормы Из Элементы["ФормаРежимПросмотра"].ПодчиненныеЭлементы Цикл
			
			ЭлементФормы.ТолькоВоВсехДействиях = Ложь;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Произведем отключение видимости некоторых команд для формы открытой в режиме выбора.
	Если Элементы.Список.РежимВыбора Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "СписокКонтекстноеМенюВыбрать", "Видимость", Ложь);
		
	КонецЕсли;
	
	// Скроем команды отправки смс-сообщений и электронных писем из меню "Взаимодействия",
	// если они есть в меню "Органайзер".
	Если
		Элементы.Найти("ФормаОрганайзер") <> Неопределено
		И Элементы.Найти("ФормаВзаимодействия") <> Неопределено
	Тогда
		
		Если Элементы.Найти("ФормаОбщаяКомандаОтправитьSMS") <> Неопределено Тогда
			
			Если Элементы.Найти("ФормаЖурналДокументовВзаимодействияНаписатьSMS") <> Неопределено Тогда
				
				Элементы.ФормаЖурналДокументовВзаимодействияНаписатьSMS.Видимость = Ложь;
				
			КонецЕсли;
			
			Если Элементы.Найти("ФормаЖурналДокументовВзаимодействияНаписатьSMSПоПредмету") <> Неопределено Тогда
				
				Элементы.ФормаЖурналДокументовВзаимодействияНаписатьSMSПоПредмету.Видимость = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элементы.Найти("ФормаОбщаяКомандаОтправитьПисьмо") <> Неопределено Тогда
			
			Если Элементы.Найти("ФормаЖурналДокументовВзаимодействияНаписатьЭлектронноеПисьмо") <> Неопределено Тогда
				
				Элементы.ФормаЖурналДокументовВзаимодействияНаписатьЭлектронноеПисьмо.Видимость = Ложь;
				
			КонецЕсли;
			
			Если
				Элементы.Найти("ФормаЖурналДокументовВзаимодействияНаписатьЭлектронноеПисьмоПоПредмету") <> Неопределено
			Тогда
				
				Элементы.ФормаЖурналДокументовВзаимодействияНаписатьЭлектронноеПисьмоПоПредмету.Видимость = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Изменим режим отображения стандартных кнопок командной панели "Действия формы".
	Если Элементы.Найти("ФормаСоздатьНаОсновании") <> Неопределено Тогда
		
		Элементы["ФормаСоздатьНаОсновании"].Картинка = БиблиотекаКартинок.ВводНаОсновании;
		Элементы["ФормаСоздатьНаОсновании"].Отображение = ОтображениеКнопки.Картинка;
		
	КонецЕсли;
	
	Если Элементы.Найти("ФормаСкопировать") <> Неопределено Тогда
		Элементы["ФормаСкопировать"].ТолькоВоВсехДействиях = ЛОЖЬ;
	КонецЕсли;
	
	Если Элементы.Найти("ФормаУстановитьПометкуУдаления") <> Неопределено Тогда
		Элементы["ФормаУстановитьПометкуУдаления"].ТолькоВоВсехДействиях = Ложь;
	КонецЕсли;
	
	Если Элементы.Найти("ФормаНайти") <> Неопределено Тогда
		Элементы["ФормаНайти"].ТолькоВоВсехДействиях = Истина;
	КонецЕсли;
	
	Если Элементы.Найти("ФормаОтменитьПоиск") <> Неопределено Тогда
		Элементы["ФормаОтменитьПоиск"].ТолькоВоВсехДействиях = Истина;
	КонецЕсли;
	
	Если Элементы.Найти("ФормаУстановитьИнтервал") <> Неопределено Тогда
		Элементы["ФормаУстановитьИнтервал"].ТолькоВоВсехДействиях = Истина;
	КонецЕсли;
	
	Если Элементы.Найти("ФормаОбщаяКомандаДополнительныеОтчетыИОбработкиЗаполнениеОбъекта") <> Неопределено Тогда
		Элементы.ФормаОбщаяКомандаДополнительныеОтчетыИОбработкиЗаполнениеОбъекта.ТолькоВоВсехДействиях = Истина;
	КонецЕсли;
	
	Если Элементы.Найти("ФормаЗаписать")<> Неопределено Тогда
		Элементы["ФормаЗаписать"].Отображение = ОтображениеКнопки.Картинка;
	КонецЕсли;
	
	Если Элементы.Найти("ФормаПечать")<> Неопределено Тогда
		Элементы["ФормаПечать"].Отображение = ОтображениеКнопки.Картинка;
	КонецЕсли;
	
	// В режиме веб-клиента произведем показ кнопки изменения текущего объекта.
	Если Элементы.Найти("ФормаИзменить") <> Неопределено И ОбщегоНазначения.ЭтоВебКлиент() Тогда
		Элементы["ФормаИзменить"].ТолькоВоВсехДействиях = Ложь;
	КонецЕсли;
	
	Если Элементы.Найти("ФормаСоздатьГруппу") <> Неопределено Тогда
		
		Элементы["ФормаСоздатьГруппу"].ТолькоВоВсехДействиях = Ложь;
		
	КонецЕсли;
	
	Если Элементы.Найти("ГлобальныеКоманды") <> Неопределено Тогда
		
		Для Каждого Элемент Из Элементы.ГлобальныеКоманды.ПодчиненныеЭлементы Цикл
			
			Если Не(ТипЗнч(Элемент) = Тип("ГруппаФормы") И Элемент.Вид = ВидГруппыФормы.ГруппаКнопок) Тогда
				
				Элемент.Отображение = ОтображениеКнопки.Картинка;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Отключим видимость некоторых команды формы, функционал которых замещен.
	Если Элементы.Найти("СписокКонтекстноеМенюУстановитьПометкуУдаления") <> Неопределено Тогда
		
		Элементы.СписокКонтекстноеМенюУстановитьПометкуУдаления.Видимость = ЛОЖЬ;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюПеренестиЭлемент",
		"Видимость", Ложь);
		
	Если Элементы.Найти("СписокКонтекстноеМенюРежимПросмотра") <> Неопределено Тогда
		
		Для каждого ЭлементФормы Из Элементы.СписокКонтекстноеМенюРежимПросмотра.ПодчиненныеЭлементы Цикл
			
			ЭлементФормы.Видимость = ЛОЖЬ;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПередЗаполнениемПоУРВ()
	
	Если Исполнители.Количество() > 0 Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ОчисткаИсполнителейПередЗаполнением");
		ПоказатьВопрос(ОбработчикОповещения, НСтр("ru = 'Перед заполнением будет очищена таблица подобранных исполнителей. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьИсполнителейПоУРВ();
	
КонецПроцедуры // ПроверкаПередЗаполнениемПоУРВ()

&НаСервере
Процедура ЗаполнитьИсполнителейПоУРВ()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СоставПакетовРабот.ПакетРабот КАК ПакетРабот
	               |ПОМЕСТИТЬ ПакетАвтоработы
	               |ИЗ
	               |	РегистрСведений.СоставПакетовРабот КАК СоставПакетовРабот
	               |ГДЕ
	               |	СоставПакетовРабот.ЗаказНаряд = &ЗаказНаряд
	               |	И СоставПакетовРабот.Авторабота = &Авторабота
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ФактическоеВремя.Исполнитель КАК Исполнитель,
	               |	ФактическоеВремя.Цех КАК Цех,
	               |	СУММА(ВЫБОР
	               |			КОГДА ФактическоеВремя.Продолжительность = 0
	               |				ТОГДА РАЗНОСТЬДАТ(ФактическоеВремя.Период, &Период, СЕКУНДА)
	               |			ИНАЧЕ ФактическоеВремя.Продолжительность
	               |		КОНЕЦ) КАК Продолжительность,
	               |	ПакетАвтоработы.ПакетРабот КАК ПакетРабот
	               |ИЗ
	               |	ПакетАвтоработы КАК ПакетАвтоработы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФактическоеВремя КАК ФактическоеВремя
	               |		ПО ПакетАвтоработы.ПакетРабот = ФактическоеВремя.ПакетРабот
	               |ГДЕ
	               |	ФактическоеВремя.Состояние = ЗНАЧЕНИЕ(Справочник.ВидыОтметокВремени.Работа)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ФактическоеВремя.Исполнитель,
	               |	ФактическоеВремя.Цех,
	               |	ПакетАвтоработы.ПакетРабот
	               |ИТОГИ
	               |	СУММА(Продолжительность)
	               |ПО
	               |	ПакетРабот";
	Запрос.УстановитьПараметр("ЗаказНаряд",  ЗаказНаряд);
	Запрос.УстановитьПараметр("Авторабота",  ИдентификаторРаботы);
	Запрос.УстановитьПараметр("Период",      ТекущаяДатаСеанса());
	
	// получим список Исполнителей
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Выборка.Следующий() Тогда
		
		// Очистим предыдущий подбор исполнителей
		Исполнители.Очистить();
		
		ПакетРабот = Выборка.ПакетРабот;
		ОбщаяПродолжительностьРабот = Выборка.Продолжительность;
		ВсегоПроцентов = 0;
		ВыборкаИсполнителей = Выборка.Выбрать();
		Пока ВыборкаИсполнителей.Следующий() Цикл
			НоваяСтрока = Исполнители.Добавить();
			НоваяСтрока.Исполнитель = ВыборкаИсполнителей.Исполнитель;
			НоваяСтрока.Цех         = ВыборкаИсполнителей.Цех;
			НоваяСтрока.Процент     = ВыборкаИсполнителей.Продолжительность / ОбщаяПродолжительностьРабот * 100;
			ВсегоПроцентов = ВсегоПроцентов + НоваяСтрока.Процент;
		КонецЦикла;
		
		Если ВсегоПроцентов <> 100 Тогда
			НоваяСтрока.Процент = НоваяСтрока.Процент + (100 - ВсегоПроцентов);
		КонецЕсли;
		
		УровеньДоступаКНачислениямСотрудникамВЗаказНарядах =
			ПравоПользователя("УровеньДоступаКНачислениямСотрудникамВЗаказНарядах");
		
		Если ОтображатьСотрудникамНачисления 
			И УровеньДоступаКНачислениямСотрудникамВЗаказНарядах <> 
				Перечисления.УровеньДоступаКНачислениямСотрудникамВЗаказНарядах.Запрещено Тогда
			ДанныеДокумента = Новый Структура("Организация,Ссылка", ДанныеОбАвтоработе.Организация, ЗаказНаряд);
			МассивАвторабот = Новый Массив;
			МассивАвторабот.Добавить(ДанныеОбАвтоработе);
			Автосервис.ЗаполнитьИсполнителямНачисления(ДанныеДокумента, Исполнители, МассивАвторабот);
		КонецЕсли;
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Нет данных по исполнителям авторабот.'"));
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьИсполнителейПоУРВ()

&НаКлиенте
Процедура УстановитьОтборПоЦеху(Цех, Использование = Ложь)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Цех", Цех, ВидСравненияКомпоновкиДанных.ВИерархии,, Использование, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводПроцентаУчастияФрагмент(НоваяСтрока, Процент)
	
	НоваяСтрока.Процент = Процент;
	РассчитатьСуммуНачисления(НоваяСтрока, Истина);
	
	УправлениеДиалогомАльфаАвтоКлиент.ПересчитатьПроцентУчастия(ЭтотОбъект, ЭтотОбъект, НоваяСтрока, Исполнители);
	
	Элементы.Исполнители.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
    
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
    
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	Если НЕ УправлениеСпискомСправочникаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие", "") = "Процент" И РезультатОповещения <> Неопределено Тогда
		
		НоваяСтрока = Исполнители.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		Процент = ?(РезультатОповещения = Неопределено, ДополнительныеПараметры.Процент, РезультатОповещения);
		
		ВводПроцентаУчастияФрагмент(НоваяСтрока, Процент);
		
		Возврат;
		
	КонецЕсли;
	
	// Вызываем общий обработчик события в контексте клиента
	Если НЕ УправлениеСпискомСправочникаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "УстановитьДляВсехПроцентНаценки" Тогда
		
		// Запомним исполнителей текущей работы
		ОбщиеИсполнители.Загрузить(Исполнители.Выгрузить());
		
	ИначеЕсли ДополнительныеПараметры = "ОдинаковыеДляВсехРабот" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда 
			ОдинаковыеДляВсехРаботЗавершение();
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "ОдинаковыеИсполнителиВРамкахПричины" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			ОдинаковыеИсполнителиВРамкахПричиныЗавершение();
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "РаспределитьПроцентУчастия" Тогда
		
		КоличествоИсполнителей = Исполнители.Количество();
		
		Если КоличествоИсполнителей<=0 Тогда
			Возврат;
		КонецЕсли;
		
		ПроцентУчастия = 100/КоличествоИсполнителей;
		ПроцентУчастия = Окр(100/КоличествоИсполнителей, 2);
		
		ОбщийПроцентУчастия = 0;
		Для Каждого Исполнитель Из Исполнители Цикл
			Исполнитель.Процент = ПроцентУчастия;
			ОбщийПроцентУчастия = ОбщийПроцентУчастия + ПроцентУчастия;
		КонецЦикла;
		
		ПогрешностьОкругленияПроцентаУчастия = 100 - ОбщийПроцентУчастия;
		Если НЕ ПогрешностьОкругленияПроцентаУчастия = 0 Тогда
			Исполнитель.Процент = Исполнитель.Процент + ПогрешностьОкругленияПроцентаУчастия;
		КонецЕсли;
			
	ИначеЕсли ДополнительныеПараметры = "ПроверкаОдинаковыхИсполнителейПередЗаполнением" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			ОдинаковыеДляВсехРаботЗавершение();
			ПроверкаПередЗаполнениемПоУРВ();
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "ОчисткаИсполнителейПередЗаполнением" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			ЗаполнитьИсполнителейПоУРВ();
		КонецЕсли;
		
	Иначе
		
		// Обработаем событие в контексте сервера
		ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры 

// Добавляет исполнителя в подбор
//
&НаКлиенте
Процедура ПодобратьИсполнителя(Исполнитель)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Исполнитель", Исполнитель);
	
	НайденныеИсполнители = Исполнители.НайтиСтроки(СтруктураОтбора);
	
	Если НайденныеИсполнители.Количество() > 0 Тогда
		ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Исполнители",Исполнители.Индекс(НайденныеИсполнители[0]), "Исполнитель");
		ОбщегоНазначенияКлиент.СообщитьПользователю("Повторение исполнителей в таблице",, ПутьКТабличнойЧасти);
	Иначе
		
		НоваяСтрока = Исполнители.Добавить();
		НоваяСтрока.Исполнитель = Исполнитель;
		РассчитатьСуммуНачисления(НоваяСтрока,, Истина);
		
		ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
		
		ПараметрыДействия = Новый Структура;
		ПараметрыДействия.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
		
		ИсполнителиИсполнительПриИзмененииНаСервере(ПараметрыДействия);
		
		Процент = Цел(100/Исполнители.Количество());
		Если Исполнители.Количество() > 1 Тогда
			
			Если ЗапрашиватьПроцентУчастия Тогда
				
				ТекстПодсказки = НСтр("ru = 'Введите процент участия'");
				Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, Новый Структура("Событие, ИдентификаторСтроки", "Процент", ИдентификаторСтроки));
				
				ПоказатьВводЧисла(Оповещение, Процент, ТекстПодсказки, 4, 2);
				
				Возврат;
				
			ИначеЕсли АвтоматическийПроцентУчастия Тогда
				
				// Проверим, что одинаковый процент участия у всех исполнителей
				ОдинаковыйПроцентУчастия = Истина;
				ПроцентУчастия = Цел(100/(Исполнители.Количество()-1));
				
				Для Инд = 0 По Исполнители.Количество()-2 Цикл
					Если Цел(Исполнители[Инд].Процент) <> ПроцентУчастия Тогда
						ОдинаковыйПроцентУчастия = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ОдинаковыйПроцентУчастия Тогда
					ОсталосьРаспределить = 100;
					Для Каждого ТекущийИсполнитель Из Исполнители Цикл
						ТекущийИсполнитель.Процент = Окр(100/Исполнители.Количество(), 2);
						ОсталосьРаспределить = ОсталосьРаспределить - ТекущийИсполнитель.Процент;
						РассчитатьСуммуНачисления(ТекущийИсполнитель, Истина);
					КонецЦикла;
					ТекущийИсполнитель.Процент = ТекущийИсполнитель.Процент + ОсталосьРаспределить;
					РассчитатьСуммуНачисления(ТекущийИсполнитель, Истина);
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ВводПроцентаУчастияФрагмент(НоваяСтрока, Процент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция помещает результаты подбора в хранилище
//
Функция ЗаписатьПодборВХранилище()
	
	// Запищем настройки
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(ЭтотОбъект.ИмяФормы, "АвтоматическийПроцентУчастия", АвтоматическийПроцентУчастия);
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(ЭтотОбъект.ИмяФормы, "ЗапрашиватьПроцентУчастия",    ЗапрашиватьПроцентУчастия);
	
	Возврат ПоместитьВоВременноеХранилище(Исполнители.Выгрузить(), ИдентификаторВладельца);
	
КонецФункции // ЗаписатьПодборВХранилище()

// Процедура получает список исполнителей из временного хранилища
//
&НаСервере
Процедура ЗаполнитьИсполнителейИзХранилища(АдресВХранилище)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	Если НЕ ТипЗнч(ТаблицаДляЗагрузки) = Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Исполнители.Очистить();
	
	// Проверим наличие данных о начислениях
	ЕстьВидНачисления = ЕстьРеквизит(ТаблицаДляЗагрузки, "ВидНачисления");
	ЕстьСпособРасчета = ЕстьРеквизит(ТаблицаДляЗагрузки, "СпособРасчета");
	ЕстьПараметрРасчетаНачисления = ЕстьРеквизит(ТаблицаДляЗагрузки, "ПараметрРасчетаНачисления");
	ЕстьНачислено = ЕстьРеквизит(ТаблицаДляЗагрузки, "Начислено");
	
	Для Каждого ТекущаяСтрока Из ТаблицаДляЗагрузки Цикл
		НовыйИсполнитель = Исполнители.Добавить();
		НовыйИсполнитель.Исполнитель = ТекущаяСтрока.Исполнитель;
		НовыйИсполнитель.Процент     = ТекущаяСтрока.Процент;
		НовыйИсполнитель.Цех         = ТекущаяСтрока.Цех;
		Если ЕстьВидНачисления Тогда
			НовыйИсполнитель.ВидНачисления = ТекущаяСтрока.ВидНачисления;
		КонецЕсли;
		Если ЕстьСпособРасчета Тогда
			НовыйИсполнитель.СпособРасчета = ТекущаяСтрока.СпособРасчета;
		КонецЕсли;
		Если ЕстьПараметрРасчетаНачисления Тогда
			НовыйИсполнитель.ПараметрРасчетаНачисления = ТекущаяСтрока.ПараметрРасчетаНачисления;
		КонецЕсли;
		Если ЕстьНачислено Тогда
			НовыйИсполнитель.Начислено = ТекущаяСтрока.Начислено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьИсполнителейИзХранилища

// Процедура обработки результата очистки подобранных исполнителей
//
&НаКлиенте
Процедура ОбработчикОчисткиПодобранныхИсполнителей(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Исполнители.Очистить();
	
КонецПроцедуры // ОбработчикОчисткиПодобранныхИсполнителей()

#КонецОбласти

#КонецОбласти