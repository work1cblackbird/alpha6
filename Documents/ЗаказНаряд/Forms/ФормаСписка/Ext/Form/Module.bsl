///////////////////////////////////////////////////////////////////////////////
// Модуль формы списка документа "Заказ-наряд"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка();
	ПараметрыПриСозданииНаСервере.Форма = ЭтотОбъект;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ПараметрыПриСозданииНаСервере.КолонкаСостоянияЭДО = Элементы.ПредставлениеСостояния;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	РаботаСФормой.СкрытьЭлементыНедоступныеПоКлючу(ЭтотОбъект);
	РаботаСФормой.УстановитьРежимВыбора(ЭтотОбъект, Элементы.Список, Параметры);
	РаботаСФормой.НастроитьОсновнойДинамическийСписокФормы(ЭтотОбъект);
	РаботаСФормой.УстановитьФормаСуммыДокумента(Элементы.СуммаДокумента);
	
	// РасширеннаяИнформация
	ОписаниеЭлементов = Новый Структура(
		"Поле,КомандаПереключатель",
		Элементы.РасширеннаяИнформация,
		Элементы.ПоказатьРасширеннуюИнформацию
	);
	РасширеннаяИнформацияВызовСервера.ПриСозданииНаСервере(ОписаниеЭлементов);
	// Конец РасширеннаяИнформация
	
	// ПодключаемоеОборудование
	ТипыОборудования = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
	ТипыОборудования.СканерШтрихкода = Истина;
	ТипыОборудования.СчитывательМагнитныхКарт = Истина;
	МенеджерОборудования.ПриСозданииНаСервере(ЭтаФорма, ТипыОборудования);
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовАльфаАвто.ПриСозданииНаСервере_ФормаСписка(
		ЭтотОбъект,
		Элементы.Список,
		Элементы.ПредставлениеСостояния);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
	// Установим отбор по состояниям
	Если Параметры.Свойство("СкрытьВыполненные") И Параметры.СкрытьВыполненные Тогда
		
		СписокСостояний = Новый СписокЗначений;
		СписокСостояний.Добавить(Справочники.ВидыСостоянийЗаказНарядов.Выполнен);
		СписокСостояний.Добавить(Справочники.ВидыСостоянийЗаказНарядов.Закрыт);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"Состояние",
			СписокСостояний,
			ВидСравненияКомпоновкиДанных.НеВСписке,,
			Истина
		);
		
	КонецЕсли;

	СформироватьУсловноеОформление();
	УстановитьДоступностьЖалобы();
	
	// ПростаяЭлектроннаяПодпись
	ПараметрыНастройкиФормы = ДокументыУчетаПЭП.НовыеПараметрыПриСозданииНаСервере_ФормаСписка();
	ПараметрыНастройкиФормы.ПустаяСсылка = Документы.ЗаказНаряд.ПустаяСсылка();
	ДокументыУчетаПЭП.ПриСозданииНаСервере_ФормаСписка(ЭтотОбъект, ПараметрыНастройкиФормы);
	// Конец ПростаяЭлектроннаяПодпись
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриСозданииНаСервере_ФормаСписка(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ПриОткрытии_ФормаСписка(ЭтотОбъект, Отказ);
	// Конец АльфаАвто.СобытияОбъектов
	
	ОбновитьОтборыСписка();

КонецПроцедуры 

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование

КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ОбработкаОповещения_ФормаСписка(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.СобытияОбъектов 
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСписка();
	ПараметрыОповещенияЭДО.Форма = ЭтотОбъект;
	ПараметрыОповещенияЭДО.ИмяДинамическогоСписка = "Список";
	ПараметрыОповещенияЭДО.ЕстьОбработчикОбновленияВидимостиСостоянияЭДО = Истина;
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// Штрихкодирование
	ШтрихкодированиеКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец Штрихкодирование
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовКлиент.ОбработчикОповещенияФормаСписка(ИмяСобытия, ЭтотОбъект, Элементы.Список);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)

	РаботаСФормойКлиент.УстановитьТекущуюСтрокуНаНовыйОбъект(Элементы.Список, НовыйОбъект);

КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)

	РасширеннаяИнформацияВызовСервера.ПриСохраненииДанныхВНастройкахНаСервере(ЭтотОбъект, Настройки);
	
	Настройки.Вставить("ФильтрVIN", 		ФильтрVIN);
	Настройки.Вставить("ФильтрАвтомобиль",	ФильтрАвтомобиль);
	Настройки.Вставить("ФильтрВидРемонта",	ФильтрВидРемонта);
	Настройки.Вставить("ФильтрГосНомер",	ФильтрГосНомер);
	Настройки.Вставить("ФильтрКонтрагент",	ФильтрКонтрагент);
	Настройки.Вставить("ФильтрСостояние",	ФильтрСостояние);
	Настройки.Вставить("ФильтрЦех",			ФильтрЦех);
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	РасширеннаяИнформацияВызовСервера.ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтотОбъект, Настройки);
		
	Если Настройки.Получить("ФильтрVIN") <> Неопределено Тогда
		ФильтрVIN = Настройки.Получить("ФильтрVIN");  
	КонецЕсли; 
		
    Если Настройки.Получить("ФильтрАвтомобиль") <> Неопределено Тогда
		ФильтрАвтомобиль = Настройки.Получить("ФильтрАвтомобиль");  
	КонецЕсли;
	
	Если Настройки.Получить("ФильтрВидРемонта") <> Неопределено Тогда
		ФильтрВидРемонта = Настройки.Получить("ФильтрВидРемонта");  
	КонецЕсли;
	
	Если Настройки.Получить("ФильтрГосНомер") <> Неопределено Тогда
		ФильтрГосНомер = Настройки.Получить("ФильтрГосНомер");  
	КонецЕсли;

    Если Настройки.Получить("ФильтрКонтрагент") <> Неопределено Тогда
		ФильтрКонтрагент = Настройки.Получить("ФильтрКонтрагент");  
	КонецЕсли; 
	
	Если Настройки.Получить("ФильтрКонтрагент") <> Неопределено Тогда
		ФильтрКонтрагент = Настройки.Получить("ФильтрКонтрагент");  
	КонецЕсли;  
	
	Если Настройки.Получить("ФильтрСостояние") <> Неопределено Тогда
		ФильтрСостояние = Настройки.Получить("ФильтрСостояние");  
	КонецЕсли; 

    Если Настройки.Получить("ФильтрЦех") <> Неопределено Тогда
		ФильтрЦех = Настройки.Получить("ФильтрЦех");  
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФильтрАвтомобильПриИзменении(Элемент)
	
	УстановитьФильт("Автомобиль", ЗначениеЗаполнено(ФильтрАвтомобиль), ФильтрАвтомобиль);
	
КонецПроцедуры 

&НаКлиенте
Процедура ФильтрVINПриИзменении(Элемент)
	
	УстановитьФильт("Автомобиль.VIN", ЗначениеЗаполнено(ФильтрVIN), ФильтрVIN, ВидСравненияКомпоновкиДанных.Содержит);
	
КонецПроцедуры 

&НаКлиенте
Процедура ФильтрГосНомерПриИзменении(Элемент)
	
	УстановитьФильт("ГосНомер", ЗначениеЗаполнено(ФильтрГосНомер), ФильтрГосНомер, ВидСравненияКомпоновкиДанных.Содержит);
	
КонецПроцедуры 

&НаКлиенте
Процедура ФильтрКонтрагентПриИзменении(Элемент)
	
	ИспользованиеПростыхОтборов = НЕ ПустаяСтрока(ФильтрКонтрагент);
	
	// Создание группы отборов.
	ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор.Элементы,
		"ПоКонтрагенту",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	// Отбор по владельцу автомобиля.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаИЛИ,
		"Владелец",
		ФильтрКонтрагент,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ИспользованиеПростыхОтборов);
	
	// Отбор по плательщику ЗН.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаИЛИ,
		"Контрагент",
		ФильтрКонтрагент,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ИспользованиеПростыхОтборов);
	
	// Отбор по заказчику ремонтного заказа.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаИЛИ,
		"Заказчик",
		ФильтрКонтрагент,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ИспользованиеПростыхОтборов);
	
	СформироватьПредставлениеОтбора();
	
КонецПроцедуры 

&НаКлиенте
Процедура ФильтрЦехПриИзменении(Элемент)
	
	УстановитьФильт("Цех", ЗначениеЗаполнено(ФильтрЦех), ФильтрЦех, ВидСравненияКомпоновкиДанных.ВИерархии);
	
КонецПроцедуры 

&НаКлиенте
Процедура ФильтрВидРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокЗначенийОтбораНачалоВыбора(Элемент, Новый ОписаниеТипов("СправочникСсылка.ВидыРемонта"), ФильтрВидРемонта);
	
КонецПроцедуры 

&НаКлиенте
Процедура ФильтрВидРемонтаПриИзменении(Элемент)
	
	// Составим список для отбора.
	СписокОтбора = Новый СписокЗначений;
	Для Каждого ТекущееЗначение Из ФильтрВидРемонта Цикл
		Если ТекущееЗначение.Пометка Тогда
			СписокОтбора.Добавить(ТекущееЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьФильт("ВидРемонта", (СписокОтбора.Количество() > 0),СписокОтбора,ВидСравненияКомпоновкиДанных.ВСписке);

КонецПроцедуры 

&НаКлиенте
Процедура ФильтрСостояниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ИспользоватьВЗаказНаряде", Истина));
	
	СписокЗначенийОтбораНачалоВыбора(Элемент, Новый ОписаниеТипов("СправочникСсылка.ВидыСостоянийЗаказНарядов"), ФильтрСостояние, ПараметрыВыбора);
	
КонецПроцедуры 

&НаКлиенте
Процедура ФильтрСостояниеПриИзменении(Элемент)
	
	// Составим список для отбора.
	СписокОтбора = Новый СписокЗначений;
	Для Каждого ТекущееЗначение Из ФильтрСостояние Цикл
		Если ТекущееЗначение.Пометка Тогда
			СписокОтбора.Добавить(ТекущееЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьФильт("Состояние", (СписокОтбора.Количество() > 0),СписокОтбора,ВидСравненияКомпоновкиДанных.ВСписке);
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ПредставлениеСостояния Тогда
		// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаСписка(ВыбраннаяСтрока, СтандартнаяОбработка);
		// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	КонецЕсли;
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовКлиент.СписокВыбор(Поле.Имя, ЭтотОбъект, Элементы.Список, СтандартнаяОбработка);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
	// ПростаяЭлектроннаяПодпись
	ДокументыУчетаПЭПКлиент.СписокВыбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	// Конец ПростаяЭлектроннаяПодпись
	
	РаботаСФормойКлиент.СписокВыбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// РасширеннаяИнформация
	РасширеннаяИнформацияКлиент.НачатьОбновление(ЭтотОбъект);
	// Конец РасширеннаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// ОценкаПроизводительности
	Если Копирование Тогда
		
		ОценкаПроизводительностиКлиент.ЗамерВремени("КопированиеДокументаЗаказНаряд");
		
	Иначе
		
		ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормыДокументаЗаказНаряд");
		
	КонецЕсли;
	// Конец ОценкаПроизводительности

КонецПроцедуры 

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	// ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормыДокументаЗаказНаряд");
	// Конец ОценкаПроизводительности

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументов.ПриПолученииДанныхНаСервере(Строки);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
	// ПростаяЭлектроннаяПодпись
	ДокументыУчетаПЭП.СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки);
	// Конец ПростаяЭлектроннаяПодпись
	
	ЗащищенныеФункцииСервер.ЗаполнитьКолонкуСчетФактура(Строки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура БлокировкаИзменений(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗаказНаряд", ТекущиеДанные.Ссылка);
	ОткрытьФорму("РегистрСведений.БлокировкаЗаказНарядов.Форма.ФормаБлокировкиИзменений", ПараметрыФормы, ЭтотОбъект, ,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // БлокировкаИзменений()

// РасширеннаяИнформация
&НаКлиенте
Процедура ПоказатьРасширеннуюИнформацию(Команда)
	
	РасширеннаяИнформацияКлиент.ПоказатьРасширеннуюИнформацию(ЭтотОбъект);

КонецПроцедуры
// Конец РасширеннаяИнформация

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьОтборыСписка() 
				
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор,
		"Автомобиль.VIN",
		ФильтрVIN,
		ВидСравненияКомпоновкиДанных.Содержит,
		,
		ЗначениеЗаполнено(ФильтрVIN)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор,
		"Автомобиль",
		ФильтрАвтомобиль,
		,
		,
		ЗначениеЗаполнено(ФильтрАвтомобиль)
	);

	// фильтр вид ремонта 
	СписокВидРемонта = Новый СписокЗначений;	
	Для Каждого ТекущееЗначение Из ФильтрВидРемонта Цикл
		Если ТекущееЗначение.Пометка Тогда
			СписокВидРемонта.Добавить(ТекущееЗначение.Значение);
		КонецЕсли;
	КонецЦикла; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор,
		"ВидРемонта",
		СписокВидРемонта,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		(СписокВидРемонта.Количество() > 0)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор,
		"ГосНомер",
		ФильтрГосНомер,
		ВидСравненияКомпоновкиДанных.Содержит,
		,
		ЗначениеЗаполнено(ФильтрГосНомер)
	);

	// фильтр контрагент 
	// Создание группы отборов.
	ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор.Элементы,
		"ПоКонтрагенту",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	// Отбор по владельцу автомобиля.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаИЛИ,
		"Владелец",
		ФильтрКонтрагент,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ФильтрКонтрагент)
	);
	
	// Отбор по плательщику ЗН.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаИЛИ,
		"Контрагент",
		ФильтрКонтрагент,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ФильтрКонтрагент)
	);
	
	// Отбор по заказчику ремонтного заказа.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаИЛИ,
		"Заказчик",
		ФильтрКонтрагент,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ФильтрКонтрагент)
	);
	
	СписокСостояние = Новый СписокЗначений;
	Для Каждого ТекущееЗначение Из ФильтрСостояние Цикл
		Если ТекущееЗначение.Пометка Тогда
			СписокСостояние.Добавить(ТекущееЗначение.Значение);
		КонецЕсли;
	КонецЦикла;

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор,
		"Состояние",
		СписокСостояние,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		(СписокСостояние.Количество() > 0)
	);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор,
		"Цех",
		ФильтрЦех,
		ВидСравненияКомпоновкиДанных.ВИерархии,
		,
		ЗначениеЗаполнено(ФильтрЦех)
	);

	СформироватьПредставлениеОтбора();
	
КонецПроцедуры

&НаСервере
Процедура ОформитьПоляСписков()
		
	Для Каждого Элемент Из ФильтрСостояние Цикл
		
		Если НЕ Элемент.Пометка Тогда
			ПредставлениеФильтра = Новый ФорматированнаяСтрока(Строка(Элемент.Значение),,WebЦвета.СветлоСерый);
			Элемент.Представление = ПредставлениеФильтра;
		Иначе 
			ПредставлениеФильтра = Новый ФорматированнаяСтрока(Строка(Элемент.Значение),,WebЦвета.Черный);
			Элемент.Представление = ПредставлениеФильтра;

		КонецЕсли;
		
	КонецЦикла;

   	Для Каждого Элемент Из ФильтрВидРемонта Цикл
		Если НЕ Элемент.Пометка Тогда
			ПредставлениеФильтра = Новый ФорматированнаяСтрока(Строка(Элемент.Значение),,WebЦвета.СветлоСерый);
			Элемент.Представление = ПредставлениеФильтра;  
		Иначе 
			ПредставлениеФильтра = Новый ФорматированнаяСтрока(Строка(Элемент.Значение),,WebЦвета.Черный);
			Элемент.Представление = ПредставлениеФильтра;

		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СформироватьУсловноеОформление()
	
	// Обновление условного оформления строк в ТЧ
	СправочникМенеджер = Справочники.ВидыСостоянийЗаказНарядов;
	УправлениеДиалогомАльфаАвтоСервер.СформироватьУсловноеОформление(ЭтотОбъект, СправочникМенеджер,"Состояние");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФильт(Имя, Использование, Значение, ВидСравненияЗначения = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ВидСравненияЗначения) Тогда
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			ВидСравненияЗначения = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ВидСравненияЗначения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор,
		Имя,
		Значение,
		ВидСравненияЗначения,
		,
		Использование);
	
	СформироватьПредставлениеОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗначенийОтбораНачалоВыбора(Элемент, ОписаниеТипов, ЗначенияДляВыбора, ПараметрыВыбора = Неопределено)
	
	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",            Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов",          ГруппыИЭлементы.Элементы);
	ПараметрыФормы.Вставить("МножественныйВыбор",            Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",                   Истина);
	ПараметрыФормы.Вставить("ОписаниеТипов",                 ОписаниеТипов);
	ПараметрыФормы.Вставить("ЗначенияДляВыбора",             ЗначенияДляВыбора);
	
	СписокОтмеченных = Новый СписокЗначений;
	Для Каждого ТекущееЗначение Из ЗначенияДляВыбора Цикл
		Если ТекущееЗначение.Пометка Тогда
			СписокОтмеченных.Добавить(ТекущееЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы.Вставить("Отмеченные", СписокОтмеченных);
	
	Если НЕ ПараметрыВыбора = Неопределено Тогда
		ПараметрыФормы.Вставить("ПараметрыВыбора", ПараметрыВыбора);
	КонецЕсли;
	
	ОткрытьФорму(
		"ОбщаяФорма.ВводЗначенийСпискомСФлажками",
		ПараметрыФормы,
		Элемент,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеОтбора()
	
	ДанныеДляЗаголовка = Новый Массив;
	
	Если НЕ ФильтрАвтомобиль.Пустая() Тогда
		ДанныеДляЗаголовка.Добавить(СтрШаблон("Автомобиль: <%1>", ФильтрАвтомобиль));
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ФильтрVIN) Тогда
		ДанныеДляЗаголовка.Добавить(СтрШаблон("VIN автомобиля: <%1>", ФильтрVIN));
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ФильтрГосНомер) Тогда
		ДанныеДляЗаголовка.Добавить(СтрШаблон("Гос. номер автомобиля: <%1>", ФильтрГосНомер));
	КонецЕсли;
	
	Если НЕ ФильтрКонтрагент.Пустая() Тогда
		ДанныеДляЗаголовка.Добавить(СтрШаблон("Контрагент: <%1>", ФильтрКонтрагент));
	КонецЕсли;
	
	Если НЕ ФильтрЦех.Пустая() Тогда
		ДанныеДляЗаголовка.Добавить(СтрШаблон("Цех: <%1>", ФильтрЦех));
	КонецЕсли;
	
	Если НЕ ФильтрВидРемонта.Количество() = 0 Тогда 
		МассивВидРемонта = Новый Массив;
		Для Каждого ТекущееЗначение Из ФильтрВидРемонта Цикл
			Если  ТекущееЗначение.Пометка Тогда
				МассивВидРемонта.Добавить(ТекущееЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
		ДанныеДляЗаголовка.Добавить(СтрШаблон("Вид ремонта: <%1>", СтрСоединить(МассивВидРемонта, ";")));
	КонецЕсли;
	
	Если НЕ ФильтрСостояние.Количество() = 0 Тогда 
		МассивСостояние = Новый Массив;
		Для Каждого ТекущееЗначение Из ФильтрСостояние Цикл
			Если  ТекущееЗначение.Пометка Тогда
				МассивСостояние.Добавить(ТекущееЗначение.Значение);
			КонецЕсли;
		КонецЦикла;

		ДанныеДляЗаголовка.Добавить(СтрШаблон("Состояние: <%1>", СтрСоединить(МассивСостояние, ";")));
	КонецЕсли;
	
	Элементы.Фильтры.ЗаголовокСвернутогоОтображения = СтрШаблон(НСтр("ru = 'Отборы: %1'"), СтрСоединить(ДанныеДляЗаголовка, "; "));
	
	ОформитьПоляСписков();

КонецПроцедуры // СформироватьПредставление()

&НаСервере
Процедура УстановитьДоступностьЖалобы()
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЖалобаКлиента) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ФормаДокументЖалобаКлиентаСоздатьНаОсновании",
			"Видимость",
			Константы.ИспользоватьЖалобы.Получить()
		);
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
    
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
    
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыСостоянияОригинала()
	ОбновитьКомандыСостоянияОригинала();
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыСостоянияОригинала()
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
КонецПроцедуры
//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьВидимостьСостоянияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОбновленияВидимостьСостоянияЭДО(ЭтотОбъект, Элементы.ПредставлениеСостояния);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#КонецОбласти

#Область ОбработчикиАльфаАвто

// РасширеннаяИнформация
&НаКлиенте
Процедура РасширеннаяИнформацияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	КонтекстНажатия = РасширеннаяИнформацияКлиент.НовыйКонтекстНажатия(ЭтотОбъект, Элементы.Список);
	КонтекстНажатия.ПолноеИмяОбъекта = "Документ.ЗаказНаряд";	
	РасширеннаяИнформацияКлиент.Нажатие(КонтекстНажатия, ДанныеСобытия, СтандартнаяОбработка);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьРасширеннуюИнформацию()
	
	Контекст = РасширеннаяИнформацияКлиент.НовыйКонтекстОбновления();
	Контекст.ПолеОтображаетсяНаФорме = Элементы.РасширеннаяИнформация.Видимость;
	Контекст.ОбъектДляОбновления = Элементы.Список.ТекущаяСтрока;
    РасширеннаяИнформация = РасширеннаяИнформацияКлиент.СформироватьРасширеннуюИнформациюОбОбъекте(Контекст);
    
КонецПроцедуры
// Конец РасширеннаяИнформация

#Область ПечатьРеестра

&НаКлиенте
Процедура Подключаемый_ОбработкаКомандыПечатиРеестра(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ОбработкаКомандыПечатиРеестраНаСервере(ПараметрыВыполнения, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаКомандыПечатиРеестраНаСервере(ПараметрыВыполнения, ДополнительныеПараметры)
	
	ПечатьРеестраДокументов.ПолучитьНастройкиСКД(ЭтотОбъект.Элементы.Список, ПараметрыВыполнения);	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

