#Область ОписаниеПеременных

&НаКлиенте
Перем СтруктураДанныхТекущейСтроки;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаДокументСчетФактураВыданныйСоздатьНаОсновании",
		"Видимость",
		Ложь
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаДокументСчетФактураВыданныйСоздатьНаОсновании",
		"Доступность",
		Ложь
	);
	
	УстановитьУсловноеОформление();
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	НалоговыйДокумент = ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиНалоговыйДокумент(ЭтотОбъект, Объект);
	
	// ПодключаемоеОборудование
	ТипыОборудования = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
	ТипыОборудования.СканерШтрихкода = Истина;
	ТипыОборудования.СчитывательМагнитныхКарт = Истина;
	МенеджерОборудования.ПриСозданииНаСервере(ЭтаФорма, ТипыОборудования);
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ПараметрыОтображенияМеток = УправлениеСвойствами.ПараметрыОтображенияМеток();
	ПараметрыОтображенияМеток.МаксимумМетокНаФорме = 3;
	ПараметрыОтображенияМеток.ВариантОтображенияМеток = Перечисления.ВариантыОтображенияМеток.Надпись;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	ДополнительныеПараметры.Вставить("ПараметрыОтображенияМеток", ПараметрыОтображенияМеток);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	
	УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(
		ЭтотОбъект,
		Объект.СводныйРемонтныйЗаказ.Заказчик,
		"ГруппаМеткиЗаказчика");
	УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(ЭтотОбъект, Объект.Контрагент);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументССылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	ИспользоватьОбменЭД = ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД");
	НастроитьЭлементыСтраницыЭДО(ЭтотОбъект);
	ОбновитьСписокВыбораРаботыДляРаспределения(ЭтотОбъект);
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовАльфаАвто.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ОграничитьВыборКонтактныхЛиц(Элементы.Контрагент);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	
	РазрешитьРедактированиеЦенИСумм = ПраваИНастройкиПользователя.Значение("РедактированиеЦенИСуммВНоменклатурныхТаблицах", Объект);
	РаботаСФормой.РазрешитьРедактированиеЦенИСумм(
		РаботаСФормой.ТиповыеПоляСуммовыхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм
	);
	
	СпособВыбораСкидки = ПраваИНастройкиПользователя.Значение("СпособВыбораСкидки", Объект);
	РаботаСФормой.РазрешитьРедактированиеСкидок(
		РаботаСФормой.ТиповыеПоляСкидочныхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм,
		СпособВыбораСкидки
	);
	
	// Штрихкодирование
	ШтрихкодированиеВызовСервера.ПрочитатьШтрихкодДокумента(ЭтотОбъект, Объект);
	// Конец Штрихкодирование
	
	УстановитьВидимостьКолонокоКодАртикул();
	
	РедактированиеНоменклатуры = ПраваИНастройкиПользователя.Значение("РедактированиеДеталейЗаказНаряда", Объект);
	РедактированиеРабот = ПраваИНастройкиПользователя.Значение("РедактированиеРаботЗаказНаряда", Объект);
	ИсточникПродажиПоУмолчанию = ПраваИНастройкиПользователя.Значение("ИсточникПродажиПоУмолчанию", Объект);
	
	// Настроим блокировку элементов формы
	БлокироватьЭлементыФормы();
	
	Если Параметры.Свойство("ДанныеЗаполнения") И НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		КопироватьДанныеФормы(Параметры.ДанныеЗаполнения, Объект);
	КонецЕсли;
	
	// заполнение реквизитов формы
	РазрешитьУдалениеПакетовВРаботе = ПраваИНастройкиПользователя.Значение("УРВ_РазрешитьУдалениеПакетовВРаботе", Объект);
	Автомобиль                      = ПолучитьАвтомобильИзСводногоРемонтногоЗаказа();
	РежимРазделенияРаботПоПакетам   = ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.УРВ_РежимРазделенияРаботПоПакетам);
	ЗапретЗакрытияПакетов           = НЕ ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.УРВ_ЗапретЗакрытияПакетов);
	ПереносРаботДеталейВРекомендацииПриУдалении = ПраваИНастройкиПользователя.Значение("ПереносРаботДеталейВРекомендацииПриУдалении");
	УстановитьДоступностьРедактированияАвторов();
	
	УстановитьТолькоПросмотрПолямАвтомобильИЗаказчик();
	
	Элементы.НеОбновлятьКИ.Пометка = Истина;
	Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Заголовок = НСтр("ru = 'Не обновлять'");

	// Обновим представление расширенной подсказки реквизита "Автомобиль"
	Элементы.АвтомобильРасширеннаяПодсказка.Заголовок = Справочники.Автомобили.СформироватьИнформациюАвтомобиля(Объект, Автомобиль);
	
	// Если заказ-наряд открывается из СРЗ, запомним идентификатор для возврата в СРЗ в оповещении
	ИдентификаторЗаказНарядаИзСРЗ = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ИдентификаторЗН", "");
	
	// получим рекомендации автомобиля
	ПроверитьРекомендацииПоАвтомобилю(Истина, Истина);
	
	// Установим видимость колонок в ТЧ "Материалы заказчика"
	МатериалыЗаказчикаУстановитьВидимостьКолонок();
	
	// Установим доступность полей скидок в документе
	УстановитьДоступностьСкидок();
	
	Элементы.ПробегРасширеннаяПодсказка.Заголовок = АвтомобилиКлиентСервер.
		ПредставлениеПредыдущихПробегов(Автомобиль, СформироватьМассивДатПробега(Объект));
	
	// Обновляем заголовок надписи итоговой суммы по документу
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(ЭтотОбъект, Объект);
	
	// ПростаяЭлектроннаяПодпись
	ПараметрыПриСозданииНаСервере = ДокументыУчетаПЭП.НовыеПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыПриСозданииНаСервере.ПустаяСсылка = Документы.ЗаказНаряд.ПустаяСсылка();
	ПараметрыПриСозданииНаСервере.РазместитьПеред = Элементы.Подвал;
	ДокументыУчетаПЭП.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, ПараметрыПриСозданииНаСервере);
	// Конец ПростаяЭлектроннаяПодпись
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец АльфаАвто.СобытияОбъектов
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);
	
	// Установим доступность кнопок действий тч товары и автоработы в зависимости от прав доступа
	УстановитьСвойстваГруппДействия();
	
	//РаботаСФормой.УстановитьСвойствоЭлементовФормы(ЭтаФорма,
	//	"АвтоработыГруппаДействие, ТоварыГруппаДействия",
	//	"Доступность",
	//	ТолькоПросмотр);
	
	РаботаСФормой.УстановитьСвойствоЭлементовФормы(ЭтаФорма,
		"ТоварыИнформацияОбОстатках",
		"Доступность",
		"Просмотр",
		Метаданные.ОбщиеФормы.ФормаИнформацииОбОстаткахНоменклатурыВЗаказНаряде);
	
	УстановитьСвойстваПоляВводаТелефона();
	РаботаСФормой.ОткрытьФормуТолькоДляПросмотра(ЭтотОбъект, Объект);
	
	// Дальнейшие операции выпольняются только для новых документов
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		РегистрыСведений.ЗапланированныеТО.ЧтениеЗначенияРегистраСведения(Автомобиль, ЭтотОбъект);
		
		// ПрослеживаемыеТовары
		УчетПрослеживаемыхТоваровСервер.ЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара(Объект);
		// Конец ПрослеживаемыеТовары
		
		// Настроим парамтеры выбора сервисной кампании автомобиля
		НастройкаПараметровВыбораСервиснойКампании();  
		
		ПроверитьНеобходимостьОбновленияКИ();
		
		// ПрослеживаемыеТовары
		ЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара();
		// Конец ПрослеживаемыеТовары
		
		Возврат;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ИнициализироватьПоляКонтактнойИнформации();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	АвтоматическиСоздаватьСводныйРемонтныйЗаказ = ПолучитьФункциональнуюОпцию(
		"АвтоматическиСоздаватьСводныйРемонтныйЗаказ"
	);
	ЗаполнитьДаннымиСводногоРемонтногоЗаказа(Истина);
	
	ОснованиеДокумента = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Основание");
	
	// Если документ создается копированием существующего заказ-наряда
	Если НЕ Параметры.ЗначениеКопирования = Документы.ЗаказНаряд.ПустаяСсылка() Тогда
		
		ЗаполнитьИдентификаторыПричинОбращенийАвторабот(Параметры.ЗначениеКопирования);
		
		ПредставлениеПодчиненныхТаблицАвторабот();
		
		Объект.СводныйРемонтныйЗаказ = Документы.СводныйРемонтныйЗаказ.ПустаяСсылка();
		ЗаполнитьДаннымиСводногоРемонтногоЗаказа(, Ложь);
		
		УстановитьТолькоПросмотрПолямАвтомобильИЗаказчик();
		
	ИначеЕсли ЗначениеЗаполнено(ОснованиеДокумента) Тогда
		
		Если ТипЗнч(ОснованиеДокумента) = Тип("ДокументСсылка.ЗаявкаНаРемонт") Тогда
			
			// Заполним данными из документа основания
			ЗаполнитьДокументПоЗаявкеНаРемонт(ОснованиеДокумента);
		
		ИначеЕсли ТипЗнч(ОснованиеДокумента) = Тип("Структура")
			И ОснованиеДокумента.Свойство("ДокументОснование")
			И ТипЗнч(ОснованиеДокумента.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРемонт") Тогда
			
			// Заполним данными из документа основания
			ЗаполнитьДокументПоЗаявкеНаРемонт(ОснованиеДокумента.ДокументОснование);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрОпции = Новый Структура("ДоступностьПодсистемПоКлючуМаскаКлюча", ПараметрыСеанса.МаскаЛицензирования);
	ИспользоватьУчетРабочегоВремени = ПолучитьФункциональнуюОпцию("ДоступенУчетРабочегоВремени", ПараметрОпции)
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СоставПакетовРабот);
	
	Если ИспользоватьУчетРабочегоВремени Тогда
		СформироватьНовыеПакеты();
		ИзмененыПакетыРабот = Истина;
	КонецЕсли;
	
	НовыйСводныйЗаказ = АвтоматическиСоздаватьСводныйРемонтныйЗаказ
		И Не ЗначениеЗаполнено(Объект.СводныйРемонтныйЗаказ);
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	
	// Маркировка
	МаркировкаТоваровСервер.ПриСозданииЧтенииНаСервере(ЭтотОбъект, Объект);
	МаркировкаТоваровСервер.ИнициализироватьСлужебныеРеквизиты(ЭтотОбъект);
	// Конец Маркировка
	
	УправлениеДиалогомНаСервере();
	
	ОбновитьПоказателиТоваров(ЭтотОбъект);
	ПоказатьПоказатели(Истина);
	
	РасчетыСКонтрагентамиСервер.ЗаполнитьСлужебныйРеквизитОстатокПоДокументуОплаты(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// Активируем первую строку в причинах обращения
	Если Объект.ПричиныОбращения.Количество() > 0 И Элементы.ПричиныОбращенияТовары.ТекущаяСтрока = Неопределено Тогда
		Элементы.ПричиныОбращенияТовары.ТекущаяСтрока = Объект.ПричиныОбращения[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	ПричиныОбращенияТоварыПриАктивизацииСтроки(Элементы.ПричиныОбращенияТовары);
	ПричиныОбращенияАвтоработыПриАктивизацииСтроки(Элементы.ПричиныОбращенияАвтоработы);
	
	УстановитьДоступностьЖалобы();
	УстановитьДоступностьПереносаПозицийВРекомендации();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ПриОткрытии_ФормаДокумента(ЭтотОбъект, Отказ);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия=Неопределено)
	
	 Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ОбработкаОповещения_ФормаДокумента(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.СобытияОбъектов
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		Возврат;
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовКлиент.ОбработчикОповещенияФормаДокумента(ИмяСобытия,ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
	Если ИмяСобытия = "ВыборРекомендацииАвтомобиля" И Источник = Объект.Ссылка Тогда
		
		ДобавитьРекомендациюАвтомобиля(Параметр);
		Модифицированность = Истина;
		
	ИначеЕсли ИмяСобытия = "ОповеститьЗНоСозданииНовогоМЗ" Тогда
		
		Оповестить("ОповеститьМЗоСозданииНовогоЗН");
		
	ИначеЕсли ИмяСобытия = "ПереходВЗаписьНаРемонт" И Источник = ЭтотОбъект Тогда
		
		Закрыть();
		
	КонецЕсли;

	ПараметрыДействия = Новый Структура;
	
	Если Элементы.ПричиныОбращенияТовары.ТекущаяСтрока <> Неопределено Тогда
			
		ДанныеОбращения = Объект.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияТовары.ТекущаяСтрока);
		ПараметрыДействия.Вставить("ИдентификаторПричиныОбращения", ДанныеОбращения.ИдентификаторПричиныОбращения);
		
	КонецЕсли;
	
	// Штрихкодирование
	ШтрихкодированиеКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец Штрихкодирование
	
	РаботаСФормойКлиент.ТребуетсяОбновитьЗаголовокНадписиНалоговыйДокумент(ЭтотОбъект, ИмяСобытия);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ИнициализироватьПоляКонтактнойИнформации();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриЧтенииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПриЧтенииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ПрослеживаемыеТовары
	УчетПрослеживаемыхТоваровСервер.ЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара(Объект);
	// Конец ПрослеживаемыеТовары
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.МатериалыЗаказчика);
	ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(ЭтотОбъект, "МатериалыЗаказчика",, Объект);
	
	// Маркировка
	МаркировкаТоваровСервер.ПриСозданииЧтенииНаСервере(ЭтотОбъект, Объект);
	// Конец Маркировка
	
	Если Параметры.Свойство("ДанныеЗаполнения") Тогда
		КопироватьДанныеФормы(Параметры.ДанныеЗаполнения, Объект);
	КонецЕсли;
	
	// Обновим параметры выбора элементов формы
	НастроитьПараметрыВыбораЭлементовФормы();
	ПредставлениеПодчиненныхТаблицАвторабот();
	ЗаполнитьИдентификаторыПричинОбращенийАвторабот();
	
	УстановитьАктивнуюТабличнуюЧасть(Параметры);
	
	ПараметрОпции = Новый Структура("ДоступностьПодсистемПоКлючуМаскаКлюча", ПараметрыСеанса.МаскаЛицензирования);
	ИспользоватьУчетРабочегоВремени = ПолучитьФункциональнуюОпцию("ДоступенУчетРабочегоВремени", ПараметрОпции)
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СоставПакетовРабот);
	
	ПричиныОбращенийКлиентСервер
		.ОбновитьИндикаторыПричинОбращения(Объект.ПричиныОбращения, Объект.Автоработы, Объект.Товары);
	
	Если ИспользоватьУчетРабочегоВремени Тогда
		ЗаполнитьИнформациюОПакетахНаСервере();
	КонецЕсли;
	
	ОбновитьСписокВыбораРаботыДляРаспределения(ЭтотОбъект);
	УправлениеДиалогомНаСервере();
	
	МаркировкаТоваровСервер.ИнициализироватьСлужебныеРеквизиты(ЭтотОбъект);
	
	КэшПлательщик = Объект.Контрагент;
	КэшВидРемонта = Объект.ВидРемонта;
	
	АвтоматическиСоздаватьСводныйРемонтныйЗаказ = ПолучитьФункциональнуюОпцию(
		"АвтоматическиСоздаватьСводныйРемонтныйЗаказ"
	);
	ЗаполнитьДаннымиСводногоРемонтногоЗаказа(Истина);
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриЧтенииНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект);
	// Конец АльфаАвто.СобытияОбъектов
	
	// Проверим наличие блокировки изменения документа
	ПроверкаБлокировкиИзменений();
	
	РасчетыСКонтрагентамиСервер.ЗаполнитьСлужебныйРеквизитОстатокПоДокументуОплаты(Объект);
	Автосервис.ЗаполнитьСебестоимостьАвтомобилей(ЭтотОбъект, Объект);
	
	// ПрослеживаемыеТовары
	ЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара();
	// Конец ПрослеживаемыеТовары
	
	НалоговыйДокумент = ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиНалоговыйДокумент(ЭтотОбъект, Объект);
	
	ОбновитьПоказателиТоваров(ЭтотОбъект);
	ПоказатьПоказатели(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("ЗаказНаряд", ПараметрыЗаписи.РежимЗаписи,
		Объект.Товары.Количество() > 50);
		
	ПроверитьКорректностьВременныхРамок(Отказ);
		
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);
	
	Отказ = Отказ Или ПроверитьЗаполнениеАвторабот(Объект, ИспользоватьПричиныОбращений, Отказ, ПараметрыЗаписи);
	
	Отказ = Отказ
		Или ПроверитьЗаполнениеИдентификаторовПричинОбращения(Объект, ИспользоватьПричиныОбращений, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// Запишем сводный ремонтный заказ
	ЗаписатьОбновитьСводныйРемонтныйЗаказ(ТекущийОбъект, Отказ);
	
	// Проверим наличие блокировки изменения документа
	ПроверкаБлокировкиИзменений(Отказ);
	УстановитьДополнительныеПараметрыДокумента(ТекущийОбъект, ПараметрыЗаписи);
	
	Если (Объект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен ИЛИ
		Объект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт) И
		Объект.СписаниеТоваровПоСебестоимости Тогда
		
		Документы.ЗаказНаряд.ЗаполнитьТоварыПоСебестоимости(ТекущийОбъект, Объект.СписаниеТоваровПоСебестоимостиВключатьНДС);
		
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПроверятьБлокировкуКарты", Истина);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РегистрироватьИзмененияДокумента", Истина);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПреверятьСводныйЗаказНаряд", АвтоматическиСоздаватьСводныйРемонтныйЗаказ);
	
	УРВУдалитьЗаписиПоУдаленнымПакетам(ТекущийОбъект.Ссылка);
	
	ПолучитьШаблонСообщенияУведомления(ТекущийОбъект);
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПередЗаписьюНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	Если ТекущийОбъект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
		Если НЕ ЭтотОбъект.Элементы.Найти("НадписьНалоговыйДокумент") = Неопределено Тогда
			ЭтотОбъект.НалоговыйДокумент = ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиНалоговыйДокумент(ЭтотОбъект, ТекущийОбъект);
		КонецЕсли;	
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;

	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);

	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.МатериалыЗаказчика);
	ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(ЭтотОбъект, "МатериалыЗаказчика",, Объект);
	
	// Штрихкодирование
	ШтрихкодированиеВызовСервера.ЗаписатьШтрихкодДокумента(ЭтотОбъект, Объект);
	// Конец Штрихкодирование
	
	Если ТекущийОбъект.Состояние<>Справочники.ВидыСостоянийЗаказНарядов.Выполнен И ТекущийОбъект.Состояние<>Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда	
		Если ПраваИНастройкиПользователя.Значение("АвтоматическоеФормированиеПеремещенийВПроизводство", Объект) Тогда
			Документы.ЗаказНаряд.СформироватьПеремещенияВПроизводство(ЭтаФорма, Ложь);
		КонецЕсли; 
	КонецЕсли;
	
	// ПрослеживаемыеТовары
	УчетПрослеживаемыхТоваровСервер.ЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара(Объект);
	// Конец ПрослеживаемыеТовары
	
	БлокироватьЭлементыФормы();
	
	НастроитьПараметрыВыбораЭлементовФормы();
	НастроитьЭлементыСтраницыЭДО(ЭтотОбъект);
	УправлениеДиалогомНаСервере();
	
	ЗаполнитьИдентификаторыПричинОбращенийАвторабот();
	ПредставлениеПодчиненныхТаблицАвторабот();
	ЗаполнитьДаннымиСводногоРемонтногоЗаказа(Истина);
	НовыйСводныйЗаказ = Ложь;
	
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(Объект.ПричиныОбращения, Объект.Автоработы, Объект.Товары);
	
	Если ИспользоватьУчетРабочегоВремени Тогда
		ЗаполнитьИнформациюОПакетахНаСервере();
	КонецЕсли;
	
	ЗаписатьИнформациюОбЗагруженномДеле(ТекущийОбъект.Ссылка);
	
	Обработки.ПодборРекомендаций.ПроверитьВыполнениеРекомендаций(ОбработкаПодборРекомендаций, ТекущийОбъект.Ссылка);
	Автомобиль = ПолучитьАвтомобильИзСводногоРемонтногоЗаказа();
	ПроверитьРекомендацииПоАвтомобилю(Истина, Истина);
	МатериалыЗаказчикаУстановитьВидимостьКолонок();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПослеЗаписиНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
	РасчетыСКонтрагентамиСервер.ЗаполнитьСлужебныйРеквизитОстатокПоДокументуОплаты(Объект);
	Автосервис.ЗаполнитьСебестоимостьАвтомобилей(ЭтотОбъект, Объект);
	
	// ПрослеживаемыеТовары
	ЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара();
	// Конец ПрослеживаемыеТовары
	
	УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(
	ЭтотОбъект,
	Объект.СводныйРемонтныйЗаказ.Заказчик,
	"ГруппаМеткиЗаказчика");
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтаФорма, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);

	ВидыСчетов = Новый Массив;
	ВидыСчетов.Добавить("СчетФактураПолученный");
	ВидыСчетов.Добавить("СчетФактураВыданный");
	ВидыСчетов.Добавить("СчетОтПоставщика"); 
	ВидыСчетов.Добавить("СчетНаОплату");
	
	РаботаСФормойКлиент.ОбновитьПодчиненныеСчета(Объект.Ссылка, ВидыСчетов);

	Оповестить("ИзмененЗаказНаряд", Новый Структура
		("СРЗ,ИдентификаторЗН", Объект.СводныйРемонтныйЗаказ, Новый Структура("Ссылка,ИдентификаторЗН", Объект.Ссылка, ИдентификаторЗаказНарядаИзСРЗ)));
	Оповестить("ОбновитьПланирование", , Объект.СводныйРемонтныйЗаказ);
	
	Если Объект.Состояние = ПредопределенноеЗначение("Справочник.ВидыСостоянийЗаказНарядов.Закрыт") Тогда
		УдалитьЗаписиВФайлахОбменаСAxalta();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонСМС) Тогда
		АвтосервисКлиент.ОткрытьДокументСообщенияSMS(Объект.Ссылка, ШаблонСМС);
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗаписи, "ЗакрытьПослеЗаписи", Ложь) Тогда
		Закрыть();
	КонецЕсли;
	
	ОповеститьОбИзменении(Объект.СводныйРемонтныйЗаказ);
	
	ВременныеРамкиПриИзменении();

	ПодключитьОбработчикОжидания("ОтложенныйРасчетПоказателей", 1, Истина);
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
		// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Справочники.ДоговорыВзаиморасчетов
			.НеКорректноЗаполненИдентификаторГосКонтракта(Объект.Ссылка, Объект.ИдентификаторГосударственногоКонтракта) Тогда 
		
		 Отказ = Истина;
		 
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
		         
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	Настройки.Вставить("ПоказыватьПодсветку", Элементы.ТоварыПодсветка.Пометка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;

	Если Настройки.Получить("ПоказыватьПодсветку") = ИСТИНА Тогда
		Элементы.ТоварыПодсветка.Пометка = Истина;
		ОбновитьРаскраскуТоваровПоПоказателям(ЭтотОбъект);
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

//@skip-check module-unused-method
&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказНаряд.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаПриИзмененииНаСервере(ПараметрыДействия);
	ПересчитатьПлановыеПоказателиПоТО(ПараметрыДействия, НЕ ЗначениеЗаполнено(Объект.ДатаОкончания));
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказНаряд.ДатаПриИзменении(Объект, ПараметрыДействия);
	ПересчитатьПлановыеПоказателиПоТОНаСервере(НЕ ЗначениеЗаполнено(Объект.ДатаОкончания), ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	КонтрагентПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	КэшПлательщик = Объект.Контрагент;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказНаряд.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Объект.Контрагент, ПараметрыДействия);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	
	ПриИзмененииКлючевыхРеквизитовСостояниеЭДО();
	
	ИспользоватьОбменЭД = ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД");
	НастроитьЭлементыСтраницыЭДО(ЭтотОбъект);
	ОбновитьСписокВыбораРаботыДляРаспределения(ЭтотОбъект);
	
	УправлениеДиалогомНаСервере();
	
	УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(ЭтотОбъект, Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорВзаиморасчетовПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказНаряд.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Объект.ДоговорВзаиморасчетов, ПараметрыДействия);
	
	ПриИзмененииКлючевыхРеквизитовСостояниеЭДО();
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ЦехПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЦехПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЦехПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказНаряд.ЦехПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СводныйРемонтныйЗаказПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	
	СводныйРемонтныйЗаказПриИзмененииНаСервере(ПараметрыДействия);
	
	ПараметрыДействия.Вставить("Элемент", Элементы.Пробег.РасширеннаяПодсказка);
	
	Если ЗначениеЗаполнено(Объект.СводныйРемонтныйЗаказ)
		И АвтоматическиСоздаватьСводныйРемонтныйЗаказ Тогда
		
		ЗаполнитьДаннымиСводногоРемонтногоЗаказа(, Истина);
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.СводныйРемонтныйЗаказ)
		И АвтоматическиСоздаватьСводныйРемонтныйЗаказ Тогда
		
		ЗаполнитьДаннымиСводногоРемонтногоЗаказа(, Ложь);
	КонецЕсли;
	
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура СводныйРемонтныйЗаказПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Если Автомобиль.Модель <> Объект.СводныйРемонтныйЗаказ.Автомобиль Тогда
		ПараметрыДействия.Вставить("ТребуетсяУстановкаЦенРабот", Истина);
	КонецЕсли;
	
	Автомобиль = Объект.СводныйРемонтныйЗаказ.Автомобиль;
	
	// получим рекомендации автомобиля
	ПроверитьРекомендацииПоАвтомобилю();
	
	// Установим плательщика по виду ремонта
	Документы.ЗаказНаряд.УстановитьГарантийногоПлательщика(Объект, ПараметрыДействия);
	
	Элементы.ПробегРасширеннаяПодсказка.Заголовок = АвтомобилиКлиентСервер.
		ПредставлениеПредыдущихПробегов(Автомобиль, СформироватьМассивДатПробега(Объект));
	
	// Установим пробег автомобиля
	Если НЕ ЗначениеЗаполнено(Объект.Пробег) Тогда
		
		ДатаПробега = ?(ЗначениеЗаполнено(Объект.ДатаНачала), Объект.ДатаНачала, Объект.Дата);
		Объект.Пробег = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
			Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег, ДатаПробега);
		
	КонецЕсли;
		
	УстановитьТолькоПросмотрПолямАвтомобильИЗаказчик();
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(
		ЭтотОбъект,
		Объект.СводныйРемонтныйЗаказ.Заказчик,
		"ГруппаМеткиЗаказчика");
	УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(ЭтотОбъект, Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура СводныйРемонтныйЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("СоздаватьЗН", Ложь);
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", Объект.СводныйРемонтныйЗаказ);
	
	ОткрытьФорму("Документ.СводныйРемонтныйЗаказ.ФормаВыбора", ПараметрыОткрытия, Элемент, КлючУникальности,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВременныеРамкиПриИзменении(Элемент = Неопределено)
	
	Элементы.ПробегРасширеннаяПодсказка.Заголовок = АвтомобилиКлиентСервер.
		ПредставлениеПредыдущихПробегов(Автомобиль, СформироватьМассивДатПробега(Объект)); 
	
	Если Объект.Состояние <> ПредопределенноеЗначение("Справочник.ВидыСостоянийЗаказНарядов.Закрыт")
		И (Элемент <> Неопределено И (Элемент.Имя = "ДатаОкончания" ИЛИ Элемент.Имя = "ДатаОкончанияВремя")) Тогда
		ОбновитьОстаткиАвансов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СервиснаяКампанияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Если ЗначениеЗаполнено(Объект.СервиснаяКампания) И 
		ЗначениеЗаполнено(Объект.СервиснаяКампания.ВидРемонта) И 
		(НЕ Объект.СервиснаяКампания.ВидРемонта = Объект.ВидРемонта) Тогда
		
		ПараметрыДействия.Вставить("ТребуетсяУстановкаВидаРемонта", Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СервиснаяКампания) И Объект.СервиснаяКампания.Автоработы.Количество()>0 Тогда
		Если РедактированиеРабот ИЛИ РедактированиеНоменклатуры Тогда
			ПараметрыДействия.Вставить("ТребуетсяЗаполнениеАвтоработамиПоСервиснойКомпании", Истина);
		КонецЕсли;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СервиснаяКампанияПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	СервиснаяКампанияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура СервиснаяКампанияРасширеннаяПодсказкаНажатие(Элемент)
	
	Если ТипЗнч(Автомобиль) = Тип("СправочникСсылка.Автомобили") И ЗначениеЗаполнено(Автомобиль) Тогда
		ПараметрыОткрытия = Новый Структура("Автомобиль,ТолькоАктуальные,РежимПодбора", Автомобиль, Истина, Истина);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			ЭтотОбъект, 
			Новый Структура("Событие", "ВыборСервиснойКомпании")
		);
		
		ОткрытьФорму("РегистрСведений.ВыполнениеСервисныхКампаний.Форма.СервисныеКампанииАвтомобиля",
					 ПараметрыОткрытия,
					 ЭтотОбъект,
					 ЭтотОбъект,,,
					 ОписаниеОповещения,
					 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидРемонтаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказНаряд.ВидРемонтаПриИзменении(Объект, ПараметрыДействия);
	ПересчитатьПлановыеПоказателиПоТОНаСервере(НЕ ЗначениеЗаполнено(Объект.ДатаСледующегоТО), ПараметрыДействия);
	РегистрыСведений.ЗапланированныеТО.ЧтениеЗначенияРегистраСведения(Автомобиль, ЭтотОбъект);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРемонтаПриИзменении(Элемент)
	
	УстановитьДоступностьСкидок();
	
	ПараметрыДействия = Новый Структура;
	
	ПараметрыДействия.Вставить("КэшПлательщик", КэшПлательщик);
	ПараметрыДействия.Вставить("КэшВидРемонта", КэшВидРемонта);
	ПараметрыДействия.Вставить("Автомобиль", 	Автомобиль);
	
	ВидРемонтаПриИзмененииНаСервере(ПараметрыДействия);
	
	Если ЗначениеЗаполнено(ПараметрыДействия.ТекстПредупреждения) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ПараметрыДействия.ТекстПредупреждения);		
	КонецЕсли;
	
	ПересчитатьПлановыеПоказателиПоТО(ПараметрыДействия, НЕ ЗначениеЗаполнено(Объект.ДатаСледующегоТО));
	
	Результат = СвязанныеРаботыКлиент.НачатьЗаполнениеПоВидуРемонта(Объект, ЭтотОбъект, ПараметрыДействия);
	
	Если Не Результат Тогда
		ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	КонецЕсли;
	
	КэшВидРемонта = Объект.ВидРемонта;
	КэшПлательщик = Объект.Контрагент;
	
КонецПроцедуры

&НаСервере
Процедура ПробегПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПробегПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ПробегПриИзмененииНаСервере(ПараметрыДействия);  
	ТекстОповещенияОТО = ПроверитьНеобходимостьТО();
	Если ТекстОповещенияОТО <> "" Тогда
		ВывестиОповещениеОТО(ТекстОповещенияОТО);
	КонецЕсли;
		
КонецПроцедуры 

&НаСервере
Функция  ПроверитьНеобходимостьТО()
	
	Текст = "";
	Если Объект.Пробег > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаказНаряд.Ссылка КАК Ссылка,
		|	ЗаказНаряд.Дата КАК Дата,
		|	ВЫРАЗИТЬ(ЗаказНаряд.Пробег КАК ЧИСЛО) КАК Пробег,
		|	ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль.Модель.МежсервисныйПробегТО КАК МежсервисныйПробегТО
		|ИЗ
		|	Документ.ЗаказНаряд КАК ЗаказНаряд
		|ГДЕ
		|	ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль = &Автомобиль
		|	И ЗаказНаряд.ВидРемонта.ТехОбслуживание
		|	И ЗаказНаряд.Дата < &ДатаСреза
		|	И НЕ ЗаказНаряд.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
		
		Запрос.УстановитьПараметр("Автомобиль", Объект.СводныйРемонтныйЗаказ.Автомобиль); 
		Запрос.УстановитьПараметр("ДатаСреза", Объект.Дата);
       	
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий()
			И ВыборкаДетальныеЗаписи.МежсервисныйПробегТО > 0
			И ВыборкаДетальныеЗаписи.Пробег + ВыборкаДетальныеЗаписи.МежсервисныйПробегТО < Объект.Пробег Тогда
			Текст = СтрШаблон("У автомобиля %1 пробег %2 превысил заданный межсервисный интервал %3. Пора пройти ТО.", 
			Объект.СводныйРемонтныйЗаказ.Автомобиль , Объект.Пробег, ВыборкаДетальныеЗаписи.МежсервисныйПробегТО);			
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат(Текст);
		
КонецФункции

&НаКлиенте
Процедура ВывестиОповещениеОТО(Текст)
	
	ПоказатьОповещениеПользователя("Автомобилю пора пройти ТО", , Текст, БиблиотекаКартинок.АдминистрированиеСервиса, СтатусОповещенияПользователя.Важное);
		
КонецПроцедуры 

&НаСервере
Процедура СостояниеПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Если Объект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен
		И Объект.СписаниеТоваровПоСебестоимости
		И Объект.Товары.Количество() > 0 Тогда
		 
		Документы.ЗаказНаряд.ЗаполнитьТоварыПоСебестоимости(Объект, Объект.СписаниеТоваровПоСебестоимостиВключатьНДС);
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Стоимость деталей по заказ-наряду заполнена в соответствии с себестоимостью.'")
		);
		
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПриИзменении(Элемент)
	
	СостояниеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура МаркетинговаяПрограммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказНаряд.МаркетинговаяПрограммаПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МаркетинговаяПрограммаПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	МаркетинговаяПрограммаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НормочасПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	НормочасПриИзмененииНаСервере(ПараметрыДействия);
	
	// Вызываем общий обработчик проверки необходимости выполнения пересчета табличных частей объекта.
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура НормочасПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказНаряд.НормочасПриИзменении(Объект, ПараметрыДействия);
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоказателиТоваровВРучную(Команда)
	
	ОбновитьПоказателиТоваров(ЭтотОбъект);
	ПоказатьПоказатели(Истина);
	ОбновитьОтображениеДанных(Элементы.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПричиныОбращенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.ПричиныОбращений.ФормаВыбора", ПараметрыОткрытия, Элемент, Элемент,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПричиныОбращенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		ПричинаОбращенияИзменилась = Истина;
		
		ПричиныОбращенийКлиент.ДобавитьПричиныОбращенияВДокумент(ВыбранноеЗначение, Объект);
		ПричиныОбращенийКлиент.ОбновитьОписаниеПричиныОбращения(Объект, Элементы.ОписаниеПричиныОбращения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПричиныОбращенияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ПустаяСтрока(Текст) Тогда
		
		Возврат;
	
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПодбора = Новый Структура();
	ПараметрыПодбора.Вставить("Отбор", Новый Структура());
	ПараметрыПодбора.Вставить("СтрокаПоиска", Текст);
	ПараметрыПодбора.Вставить("ВыборГруппИЭлементов", ПредопределенноеЗначение("ИспользованиеГруппИЭлементов.Элементы"));
	ПараметрыПодбора.Вставить("Источник", "ЗаявкаНаРемонт_ПричинаОбращения");
	
	ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.ПричиныОбращений"), ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПричиныОбращенияПриИзменении(Элемент)
	
	ПерваяСтрокаПричиныОбращения = ПричиныОбращенийКлиент.ПерваяСтрокаПричиныОбращения(Объект); // ДанныеФормыЭлементКоллекции 
	
	Если НЕ ЗначениеЗаполнено(ПерваяСтрокаПричиныОбращения.ИдентификаторПричиныОбращения) Тогда
		ПерваяСтрокаПричиныОбращения.ИдентификаторПричиныОбращения = Новый УникальныйИдентификатор;
		ПричинаОбращенияИзменилась = Истина;
	КонецЕсли;
	
	ПерваяСтрокаПричиныОбращения.ПричинаОбращенияСодержание = Объект.ОписаниеПричиныОбращения;
	
	Если ПричинаОбращенияИзменилась Тогда
		
		ОбработатьИзменениеПричиныОбращения(ПерваяСтрокаПричиныОбращения);
		ПричиныОбращенийКлиент.ОбновитьИдентификаторыТаблиц(Объект);

		ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
			Объект.ПричиныОбращения,
			Объект.Автоработы,
			Объект.Товары
		);
			
		Элементы.ПричиныОбращенияТовары.ТекущаяСтрока = ПерваяСтрокаПричиныОбращения.ПолучитьИдентификатор();
		Элементы.ПричиныОбращенияАвтоработы.ТекущаяСтрока = ПерваяСтрокаПричиныОбращения.ПолучитьИдентификатор();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СогласованнаяСуммаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводСогласованнойСуммыЗавершение", ЭтотОбъект);
	ПоказатьВводЧисла(
		ОписаниеОповещения,
		Объект.СогласованнаяСумма,
		НСтр("ru = 'Сумма согласованная с клиентом'"),
		15,
		2
	);
	
КонецПроцедуры

&НаКлиенте
Процедура БонусныеБаллыПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Проверим блокировку дисконтной карты.
	Если ДисконтнаяКартаЗаблокирована() Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Дисконтная карта заблокирована.'"),, НСтр("ru = 'Дисконтная карта контрагента'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Объект",                Объект);
	ПараметрыФормы.Вставить("Карточка",              Объект.Карточка);
	ПараметрыФормы.Вставить("Дата",                  Объект.Дата);
	ПараметрыФормы.Вставить("КоличествоКНачислению", Объект.КоличествоКНачислению);
	ПараметрыФормы.Вставить("КоличествоКСписанию",   Объект.КоличествоКСписанию);
	
	ОбработкаОповещения = Новый ОписаниеОповещения(
		"Подключаемый_ОбработкаРезультатаИзмененияКоличестваКСписанию", ЭтотОбъект);
	
	ОткрытьФорму(
		"ОбщаяФорма.ФормаДанныхОБонуснойПрограмме",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОбработкаОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ВывестиКоличествоСтрок();
	
КонецПроцедуры // СтраницыПриСменеСтраницы()

&НаСервере
Процедура СводныйРемонтныйЗаказЗаказчикПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Вызываем обработчик изменения данных объекта
	Документы.СводныйРемонтныйЗаказ.ЗаказчикПриИзменении(СводныйРемонтныйЗаказ, ПараметрыДействия);
	
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		СводныйРемонтныйЗаказ.Заказчик,
		ЭтотОбъект,
		"Телефон,АдресЭлектроннойПочты",
		"ПредставлениеТелефона,АдресЭлектроннойПочты"
	);
	
	ПроверитьНеобходимостьОбновленияКИ();

	// Заполним список выбора автомобилями контрагента
	АвтомобилиКонтрагента = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "АвтомобилиКонтрагента", Новый Массив);
	Элементы.СводныйРемонтныйЗаказАвтомобиль.СписокВыбора.ЗагрузитьЗначения(АвтомобилиКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура СводныйРемонтныйЗаказЗаказчикПриИзменении(Элемент)
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("НеобходимоПерезаполнитьАвтомобиль", Ложь);
	
	СводныйРемонтныйЗаказЗаказчикПриИзмененииНаСервере(ПараметрыДействия);
	
	НеобходимоПерезаполнитьАвтомобиль =
		ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеобходимоПерезаполнитьАвтомобиль", Ложь);
	
	Если ЗначениеЗаполнено(СводныйРемонтныйЗаказ.Заказчик)
		И НЕ ЗначениеЗаполнено(Объект.Контрагент)
		И Элементы.Контрагент.Доступность Тогда
		
		Объект.Контрагент = СводныйРемонтныйЗаказ.Заказчик;
		КонтрагентПриИзменении(Элементы.Контрагент);
		
	КонецЕсли;
	
	Если НеобходимоПерезаполнитьАвтомобиль Тогда
		Обработчик = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаПерезаполненияАвтомобиля", ЭтотОбъект, ПараметрыДействия);
		
		Если ЗначениеЗаполнено(ПараметрыДействия.ВладелецАвтомобиля) Тогда
			ТекстВопроса = НСтр("ru = 'Владелец автомобиля <%1> = <%2>.
				|Выбран заказчиком <%3>. Очистить поле ""Автомобиль""?'");
			
			ТекстВопроса = СтрШаблон(ТекстВопроса,
				СводныйРемонтныйЗаказ.Автомобиль,
				ПараметрыДействия.ВладелецАвтомобиля,
				СводныйРемонтныйЗаказ.Заказчик);
		Иначе
			ТекстВопроса = НСтр("ru = 'Владелец автомобиля <%1> не указан.
				|Выбран заказчиком <%2>. Очистить поле ""Автомобиль""?'");
			
			ТекстВопроса = СтрШаблон(ТекстВопроса, СводныйРемонтныйЗаказ.Автомобиль, СводныйРемонтныйЗаказ.Заказчик);
		КонецЕсли;
		
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Изменение заказчика'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СводныйРемонтныйЗаказАвтомобильПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.СводныйРемонтныйЗаказ.АвтомобильПриИзменении(СводныйРемонтныйЗаказ, ПараметрыДействия);
	
	Автомобиль = СводныйРемонтныйЗаказ.Автомобиль;
	РегистрыСведений.ЗапланированныеТО.ЧтениеЗначенияРегистраСведения(Автомобиль, ЭтотОбъект);
	
	// получим рекомендации автомобиля
	ПроверитьРекомендацииПоАвтомобилю();
	
	Элементы.ПробегРасширеннаяПодсказка.Заголовок = АвтомобилиКлиентСервер.
		ПредставлениеПредыдущихПробегов(СводныйРемонтныйЗаказ.Автомобиль, СформироватьМассивДатПробега(Объект));
	
	// Установим пробег автомобиля
	Если НЕ ЗначениеЗаполнено(Объект.Пробег) Тогда
		
		ДатаПробега = ?(ЗначениеЗаполнено(Объект.ДатаНачала), Объект.ДатаНачала, Объект.Дата);
		Объект.Пробег = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
			Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег, ДатаПробега);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СводныйРемонтныйЗаказАвтомобильПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("НеобходимоПерезаполнитьЗаказчика", Ложь);
	СводныйРемонтныйЗаказАвтомобильПриИзмененииНаСервере(ПараметрыДействия);
	
	НеобходимоПерезаполнитьЗаказчика  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеобходимоПерезаполнитьЗаказчика",  Ложь);
	
	Если НеобходимоПерезаполнитьЗаказчика Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("Подключаемый_ОбработкаПерезаполненияЗаказчика", ЭтотОбъект, ПараметрыДействия),
			СтрШаблон("Владелец автомобиля <%1> = <%2>.
				|Выбран заказчиком <%3>. Установить заказчиком <%2>?",
				СводныйРемонтныйЗаказ.Автомобиль, ПараметрыДействия.ВладелецАвтомобиля, СводныйРемонтныйЗаказ.Заказчик),
			РежимДиалогаВопрос.ДаНет);
		
		Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Элемент") = Неопределено Тогда
			ПараметрыДействия.Удалить("Элемент");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СводныйРемонтныйЗаказ.Заказчик) И НЕ ЗначениеЗаполнено(Объект.Контрагент)
		И Элементы.Контрагент.Доступность Тогда
		Объект.Контрагент = СводныйРемонтныйЗаказ.Заказчик;
		КонтрагентПриИзменении(Элементы.Контрагент);
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	ПроверитьСервиснуюКампанию();
	ВидРемонтаПриИзменении(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТелефонаПриИзменении(Элемент)
		
	Текст = Элемент.ТекстРедактирования;
	
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		СводныйРемонтныйЗаказ.ПредставлениеТелефона        = "";
		СводныйРемонтныйЗаказ.ПредставлениеТелефонаСтрокой = "";
		УстановитьСвойстваПоляВводаТелефона();
		Возврат;
	КонецЕсли;
	
	// Формируем внутренние значения полей по тексту и параметрам формирования из
	// реквизита ВидКонтактнойИнформацииТелефона.     
	СводныйРемонтныйЗаказ.ПредставлениеТелефона = Текст;
	СводныйРемонтныйЗаказ.ПредставлениеТелефонаСтрокой = ЗначенияПолейКонтактнойИнформацииСервер(Текст, ВидКонтактнойИнформацииТелефона);
	
	ПроверитьНеобходимостьОбновленияКИ();
	УправлениеДиалогомНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТелефонаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТелефонИзменен = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СводныйРемонтныйЗаказ.ПредставлениеТелефона 		= ВыбранноеЗначение.Представление;
		КомментарийТелефона                 				= ВыбранноеЗначение.Комментарий;
		СводныйРемонтныйЗаказ.ПредставлениеТелефонаСтрокой	= ВыбранноеЗначение.Значение;
		ТелефонИзменен = Истина;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		СводныйРемонтныйЗаказ.ПредставлениеТелефона        = ВыбранноеЗначение;
		КомментарийТелефона                				   = "";
		СводныйРемонтныйЗаказ.ПредставлениеТелефонаСтрокой = ЗначенияПолейКонтактнойИнформацииСервер(ВыбранноеЗначение, ВидКонтактнойИнформацииТелефона);
		ТелефонИзменен = Истина;
		
	КонецЕсли;
	
	Если ТелефонИзменен Тогда
		ПроверитьНеобходимостьОбновленияКИ();
		УправлениеДиалогомНаСервере();
		Модифицированность = Истина;
	Иначе
		УстановитьСвойстваПоляВводаТелефона();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТелефонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыРедактирования = УправлениеКонтактнойИнформациейАльфаАвтоКлиент.НовыеПараметрыРедактирования();
	ПараметрыРедактирования.ПутьКДанным = "СводныйРемонтныйЗаказ.ПредставлениеТелефона";
	УправлениеКонтактнойИнформациейАльфаАвтоКлиент.НачатьРедактированиеКонтактнойИнформации(
		ЭтотОбъект,
		Элемент.ТекстРедактирования,
		ПараметрыРедактирования
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТелефонаОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьКИ();
	ПроверитьНеобходимостьОбновленияКИ();
	УстановитьСвойстваПоляВводаТелефона();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭлектроннойПочтыПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		СводныйРемонтныйЗаказ.АдресЭлектроннойПочты        = "";
		СводныйРемонтныйЗаказ.АдресЭлектроннойПочтыСтрокой = "";
		Возврат;
	КонецЕсли;
	
	// Формируем внутренние значения полей по тексту и параметрам формирования из
	// реквизита ВидКонтактнойИнформацииЭлектроннойПочты.
	СводныйРемонтныйЗаказ.АдресЭлектроннойПочты        = Текст;
	СводныйРемонтныйЗаказ.АдресЭлектроннойПочтыСтрокой = ЗначенияПолейКонтактнойИнформацииСервер(Текст, ВидКонтактнойИнформацииЭлектроннойПочты);
	
	ПроверитьНеобходимостьОбновленияКИ();

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПоляКонтактнойИнформации()
	
	ВидКонтактнойИнформацииТелефона = Новый Структура;
	ВидКонтактнойИнформацииТелефона.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	ВидКонтактнойИнформацииЭлектроннойПочты = Новый Структура;
	ВидКонтактнойИнформацииЭлектроннойПочты.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	РазрешитьВводНесколькихЗначенийТелефона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, "РазрешитьВводНесколькихЗначений");
	
	РазрешитьВводНесколькихЗначенийЭлектроннойПочты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, "РазрешитьВводНесколькихЗначений");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзМенюТелефон(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ПредставлениеТелефона = СводныйРемонтныйЗаказ.ПредставлениеТелефона;
		Если ВыбранныйЭлемент.Значение = "ОтправитьSMS" Тогда
			
			ВзаимодействияАльфаАвтоКлиент.СоздатьSMS(
				ПредставлениеТелефона,
				ПолучитьКонтакт(Объект.СводныйРемонтныйЗаказ),
				Объект.Ссылка
			);
		Иначе
			ВзаимодействияАльфаАвтоКлиент.ПозвонитьКонтакту(
				ПолучитьКонтакт(Объект.СводныйРемонтныйЗаказ),
				ПредставлениеТелефона,
				Объект.Ссылка,
				Истина
			);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НовыйСводныйЗаказПриИзмененииНаСервере()
	
	Если НовыйСводныйЗаказ Тогда
		Объект.СводныйРемонтныйЗаказ = Документы.СводныйРемонтныйЗаказ.ПустаяСсылка();
		ЗаполнитьДаннымиСводногоРемонтногоЗаказа(, Ложь);
	КонецЕсли;
	
	УстановитьТолькоПросмотрПолямАвтомобильиЗаказчик();
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйСводныйЗаказПриИзменении(Элемент)
	
	НовыйСводныйЗаказПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаСводногоРемонтногоЗаказаНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", Объект.СводныйРемонтныйЗаказ);
	
	ОткрытьФорму(
		"Документ.СводныйРемонтныйЗаказ.ФормаОбъекта",
		ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьКакАктОбОказанииУслугПриИзменении(Элемент)
	
	НастроитьЭлементыСтраницыЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРаспределенияСуммыТоваровПриОтправкеПоЭДОПриИзменении(Элемент)
	
	НастроитьЭлементыСтраницыЭДО(ЭтотОбъект);
	ОбновитьСписокВыбораРаботыДляРаспределения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеЭДОНажатие(Элемент)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяПСНПриИзменении(Элемент)
	ПараметрыДействия = Новый Структура;
	ИспользуетсяПСНПриИзмененииНаСервере(ПараметрыДействия);    
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
КонецПроцедуры

&НаСервере
Процедура ИспользуетсяПСНПриИзмененииНаСервере(ПараметрыДействия)
	Элементы.Патент.Доступность = ИспользуетсяПСН; 
	Если НЕ ИспользуетсяПСН Тогда
		Объект.Патент = Справочники.Патенты.ПустаяСсылка();
	Иначе
		ОбработкаРеквизитовДокументаСервер.УстановитьПатентПоОрганизации(Объект); 
	КонецЕсли; 
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

#Область ОбработчикиСобытийЭлементаПакетыРабот

&НаКлиенте
Процедура ПакетыРаботПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ПакетыРаботПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры // ПакетыРаботПриАктивизацииСтроки()

&НаКлиенте
Процедура Подключаемый_ПакетыРаботПриАктивизацииСтроки()
	
	ПоверитьСтатусТекущегоПакетаРабот();
	
КонецПроцедуры // Подключаемый_ПакетыРаботПриАктивизацииСтроки()

&НаКлиенте
Процедура ПакетыРаботПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	НоваяСтрока = ПакетыРабот.ПолучитьЭлементы().Добавить();
	НоваяСтрока.ЭтоГруппа = Истина;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока,
		РаботаСПакетамиРаботКлиентСервер.СоздатьНовыйПакетРабот(РаботаСПакетамиРаботКлиентСервер.МаксимальноеЗначениеЧисловойКолонки(ПакетыРабот.ПолучитьЭлементы())+1));
	
КонецПроцедуры

&НаКлиенте
Процедура ПакетыРаботПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = ПакетыРабот.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	
	Если НЕ УдалениеПакетаРаботВозможно(ТекущиеДанные) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		УдаляемыеСтроки = Новый Массив;
		Для Каждого Строка Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			УдаляемыеСтроки.Добавить(Строка);
		КонецЦикла;
		Для Каждого УдаляемаяАвторабота Из УдаляемыеСтроки Цикл
			УдалитьАвтоработуИзПакетаРабот(УдаляемаяАвторабота.ПолучитьИдентификатор());
		КонецЦикла;
		ПакетыРабот.ПолучитьЭлементы().Удалить(ТекущиеДанные);
	Иначе
		УдалитьАвтоработуИзПакетаРабот(Элемент.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПакетыРаботПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	// Получим пакет работ, в который перемещена авторабота
	ТекущаяСтрока = ПакетыРабот.НайтиПоИдентификатору(Строка);
	РодительТекущейСтроки = ТекущаяСтрока.ПолучитьРодителя();
	ПакетРабот = ?(РодительТекущейСтроки = Неопределено, ТекущаяСтрока, РодительТекущейСтроки);
	
	// Проверим наличия у работ из пакета из которого переносим
	Если РазрешитьУдалениеПакетовВРаботе И ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
		
		СтрокаПеретаскивания = ПакетыРабот.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]);
		
		Если СтрокаПеретаскивания.СтатусПакета<>ПредопределенноеЗначение("Справочник.ВидыСостоянийПакетовРабот.НеСтартовал")
			И СтрокаПеретаскивания.ПолучитьРодителя().ПолучитьЭлементы().Количество() = ПараметрыПеретаскивания.Значение.Количество() Тогда
			
			ПараметрыПеремещения = Новый Структура();
			ПараметрыПеремещения.Вставить("ПараметрыПеретаскивания", ПараметрыПеретаскивания);
			ПараметрыПеремещения.Вставить("НовыйРодитель",           ПакетРабот);
			
			ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаВопросаУдаленияПакета", ЭтотОбъект, ПараметрыПеремещения);
			
			ПоказатьВопрос(ОбработчикОповещения ,НСтр("ru = 'Все автоработы текущего пакета работ перенесены. Данный пакет будет помечен как удаленный. Продолжить?'"), РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Перенос работ'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаДерева Из ПараметрыПеретаскивания.Значение Цикл
		ПеренестиСтрокуВДеревеПакетовРабот(СтрокаДерева, ПакетРабот);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПакетыРаботНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	СтатусНеСтартовал = ПредопределенноеЗначение("Справочник.ВидыСостоянийПакетовРабот.НеСтартовал");
	
	Для Каждого ИдентификаторПеретаскиваемойСтроки Из ПараметрыПеретаскивания.Значение Цикл
		
		ПеретаскиваемаяСтрока = ПакетыРабот.НайтиПоИдентификатору(ИдентификаторПеретаскиваемойСтроки);
		
		Если ПеретаскиваемаяСтрока = Неопределено
			ИЛИ ПеретаскиваемаяСтрока.ЭтоГруппа
			ИЛИ (НЕ РазрешитьУдалениеПакетовВРаботе
				И (ПеретаскиваемаяСтрока.СтатусПакета <> СтатусНеСтартовал
				И ПеретаскиваемаяСтрока.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1)) Тогда
			
			Выполнение = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПакетыРаботПредставлениеПакетаРаботПриИзменении(Элемент)
	
	Пакет = ПакетыРабот.НайтиПоИдентификатору(Элементы.ПакетыРабот.ТекущаяСтрока);
	Для Каждого Авторабота Из Пакет.ПолучитьЭлементы() Цикл
		ЗаполнитьЗначенияСвойств(Авторабота, Пакет, "Представление");
		ОбновитьДанныеВТаблицеАвторабот(Авторабота);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СписаниеТоваровПоСебестоимостиПриИзменении(Элемент)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрыватьЗаказыТолькоПоДанномуЗаказНарядуПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ОтложенныйРасчетПоказателей", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗакрытияПриИзменении(Элемент)
	
	Если Объект.Состояние = ПредопределенноеЗначение("Справочник.ВидыСостоянийЗаказНарядов.Закрыт") Тогда
		ОбновитьОстаткиАвансов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособЗачетаАвансовПриИзменении(Элемент)
	
	СпособЗачетаАвансовПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СпособЗачетаАвансовПриИзмененииНаСервере()
	
	// Настроим блокировку элементов формы
	БлокироватьЭлементыФормы();
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПричиныОбращенияАвтоработы

&НаКлиенте
Процедура ПричиныОбращенияАвтоработыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если (НоваяСтрока И ПустаяСтрока(Элемент.ТекущиеДанные.ИдентификаторПричиныОбращения)) ИЛИ Копирование Тогда
		
		Элемент.ТекущиеДанные.ИдентификаторПричиныОбращения = Новый УникальныйИдентификатор;
		ПричиныОбращенийКлиент.ОбновитьИдентификаторыТаблиц(Объект);
		ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(Элемент.ТекущиеДанные, Элементы.Автоработы, ИспользоватьПричиныОбращений);
		УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.Автоработы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияАвтоработыПриАктивизацииСтроки(Элемент)
	
	Если НЕ Элемент = Неопределено Тогда
		ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(Элемент.ТекущиеДанные, Элементы.Автоработы, ИспользоватьПричиныОбращений);
		Элементы.ПричиныОбращенияТовары.ТекущаяСтрока = Элемент.ТекущаяСтрока;
	КонецЕсли;
	
	ВывестиКоличествоСтрок(Элементы.Автоработы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияАвтоработыПриИзменении(Элемент)
	
	ПричиныОбращенийКлиент.ОбновитьОписаниеПричиныОбращения(Объект, Элементы.ОписаниеПричиныОбращения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияАвтоработыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = Элементы.ПричиныОбращенияАвтоработыПричинаОбращенияСодержание.Имя
		И Элементы.ПричиныОбращенияАвтоработыПричинаОбращенияСодержание.ГиперссылкаЯчейки Тогда
		ПричиныОбращенийКлиент.НачатьРедактированиеПричины(Элемент.ТекущиеДанные, ЭтотОбъект, , Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияАвтоработыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		
		ПричиныОбращенийКлиент.ОбновитьИдентификаторыТаблиц(Объект);
		
	КонецЕсли;
	
	ПричиныОбращенийКлиентСервер
		.ОбновитьИндикаторыПричинОбращения(Объект.ПричиныОбращения, Объект.Автоработы, Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияАвтоработыПередУдалением(Элемент, Отказ)
	
	Если Объект.ПричиныОбращения.Количество() > 1 Тогда
		
		Отбор = Новый Структура("ИдентификаторПричиныОбращения", Элемент.ТекущиеДанные.ИдентификаторПричиныОбращения);
		СтрокиУдаляемогоЭлементаАвтоработы = Объект.Автоработы.НайтиСтроки(Отбор);
		СтрокиУдаляемогоЭлементаТовары = Объект.Товары.НайтиСтроки(Отбор);
		
		Если НЕ СтрокиУдаляемогоЭлементаАвтоработы.Количество() = 0 ИЛИ НЕ СтрокиУдаляемогоЭлементаТовары.Количество() = 0 Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Событие", "ВопросПеренесенияПозицийВДругуюПричинуОбращеий");
			ДополнительныеПараметры.Вставить("ИмяКоманды", "");
			ДополнительныеПараметры.Вставить("Элемент", Элемент);
			Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ДополнительныеПараметры);
			
			КнопкиВопроса = Новый СписокЗначений;
			КнопкиВопроса.Добавить("Перенести", "Перенести в другую причину обращения");
			КнопкиВопроса.Добавить("Удалить", "Удалить позиции");
			КнопкиВопроса.Добавить("Отмена", "Отменить удаление причины обращения");
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Выберите что необходимо сделать с Автоработами/Товарами удаляемой причины обращения?'"), КнопкиВопроса);
			
			Отказ = Истина;
			
		КонецЕсли;
		
	Иначе
		
		ПричиныОбращенийКлиент.СброситьИдентификаторПричиныОбращения(
			Объект, Элемент.ТекущиеДанные.ИдентификаторПричиныОбращения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияАвтоработыПослеУдаления(Элемент)
	
	ОбновитьДанныеПослеУдаленияПричиныОбращения(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияАвтоработыПричинаОбращенияСодержаниеПриИзменении(Элемент)
	
	ТекДанные = Элементы.ПричиныОбращенияАвтоработы.ТекущиеДанные;
	
	Если ПричинаОбращенияИзменилась ИЛИ НЕ ЗначениеЗаполнено(ТекДанные.ПричинаОбращения) Тогда
		
		ОбработатьИзменениеПричиныОбращения(ТекДанные);
		
	КонецЕсли;
	
КонецПроцедуры // ПричиныОбращенияАвтоработыПричинаОбращенияСодержаниеПриИзменении()

&НаКлиенте
Процедура ПричиныОбращенияАвтоработыПричинаОбращенияСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПричиныОбращенийКлиент
		.ОткрытьФормуВыбораПричиныОбращения(Элемент, Элементы.ПричиныОбращенияАвтоработы.ТекущиеДанные.ПричинаОбращения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияАвтоработыПричинаОбращенияСодержаниеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПричиныОбращенийКлиент
		.НачатьРедактированиеПричины(Элементы.ПричиныОбращенияАвтоработы.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияАвтоработыПричинаОбращенияСодержаниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПричинаОбращенияИзменилась = Истина;
		ДопПараметры = Новый Структура("Документ", Объект.СводныйРемонтныйЗаказ);
		ПричиныОбращенийКлиент.ЗаполнитьСтрокуПричиныПоВыбранномуЗначению(
			Элементы.ПричиныОбращенияАвтоработы.ТекущиеДанные, ВыбранноеЗначение, ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияАвтоработыПричинаОбращенияСодержаниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПричиныОбращенийКлиент.ОписаниеПричиныОбращенияАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		ПараметрыПолученияДанных,
		Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияАвтоработыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка <> Неопределено Тогда
		
		Причина = Объект.ПричиныОбращения.НайтиПоИдентификатору(Строка);
		
		Если Причина <> Неопределено
			И ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
			И ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
			
			Для Каждого ПеретаскиваемаяСтрока Из ПараметрыПеретаскивания.Значение Цикл
				
				Если ТипЗнч(ПеретаскиваемаяСтрока) = Тип("ДанныеФормыЭлементКоллекции")
					И ПеретаскиваемаяСтрока.Свойство("ИдентификаторПричиныОбращения") Тогда
					
					ПеретаскиваемаяСтрока.ИдентификаторПричиныОбращения = Причина.ИдентификаторПричиныОбращения;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.Автоработы);
	
	ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
		Элементы.ПричиныОбращенияАвтоработы.ТекущиеДанные,
		Элементы.Автоработы,
		ИспользоватьПричиныОбращений);
	
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
		Объект.ПричиныОбращения,
		Объект.Автоработы,
		Объект.Товары);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтоработы

&НаКлиенте
Процедура АвтоработыПриИзменении(Элемент)
	
	ПерерасчетСуммыСкидкиБонусами();
	ОбновитьСписокВыбораРаботыДляРаспределения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УправлениеДиалогомАльфаАвтоКлиент.АвтоработыПриНачалеРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, Копирование);
	
	ТекущиеДанные = Элементы.Автоработы.ТекущиеДанные;
	
	Если ПустаяСтрока(ТекущиеДанные.ИдентификаторРаботы) ИЛИ Копирование Тогда
		ТекущиеДанные.ИдентификаторРаботы = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущиеДанные.ИдентификаторПричиныОбращения) И Элементы.ПричиныОбращенияАвтоработы.ТекущаяСтрока <> Неопределено Тогда
		ДанныеОбращения = Объект.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияАвтоработы.ТекущаяСтрока);
		ТекущиеДанные.ИдентификаторПричиныОбращения = ДанныеОбращения.ИдентификаторПричиныОбращения;
		ПричиныОбращенияАвтоработыПриАктивизацииСтроки(Элементы.ПричиныОбращенияАвтоработы);
	КонецЕсли;
	
	Если НоваяСтрока ИЛИ Копирование Тогда
		ТекущиеДанные.АвторСтроки = ПользователиКлиент.ТекущийПользователь();
		ТекущиеДанные.АвторИзмененияСтроки = ТекущиеДанные.АвторСтроки;
	КонецЕсли;
	
	Если Копирование Тогда
		Элементы.Автоработы.ТекущиеДанные.СуммаСкидкиБонусами = 0;
		ТекущиеДанные.Исполнители = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыПриАктивизацииЯчейки(Элемент)
	
	Если  Элемент.ТекущиеДанные <> Неопределено Тогда 
		Элементы.АвтоработыУслугиПоСубподряду.Доступность = Элемент.ТекущийЭлемент.Имя = "АвтоработыСубподряд" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Субподряд);
	Иначе
		Элементы.АвтоработыУслугиПоСубподряду.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыПередУдалением(Элемент, Отказ, ПослеВопроса=Ложь)
	
	Если ПереносРаботДеталейВРекомендацииПриУдалении И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Авторабота) И НЕ ПослеВопроса Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Событие", "ВопросПеренесенияВРекомендацииУдаляемыхСтрок");
		ДополнительныеПараметры.Вставить("ИмяКоманды", "");
		ДополнительныеПараметры.Вставить("Элемент", Элементы.Автоработы);
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перенести удаляемую строку в рекомендации автомобиля?'"), РежимДиалогаВопрос.ДаНет);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УправлениеДиалогомАльфаАвтоКлиент.АвтоработыПередУдалением(ЭтотОбъект, Элемент, Отказ);
	
	ВыделенныеСтроки = ОбщегоНазначенияАвтосалонКлиент.ИдентификаторыТаблицыВСтроки(Элемент.ВыделенныеСтроки, Объект.Автоработы);
	ОбщегоНазначенияАвтосалонКлиент.УдалитьСопутствующиеСтроки(ВыделенныеСтроки, Объект.Исполнители, "ИдентификаторРаботы");
	ОбщегоНазначенияАвтосалонКлиент.УдалитьСопутствующиеСтроки(ВыделенныеСтроки, Объект.Материалы, "ИдентификаторРаботы");
	
	Если НЕ Отказ Тогда
		
		ВыделенныеСтрокиКоличество = Элементы.Автоработы.ВыделенныеСтроки.Количество();
		Пока ВыделенныеСтрокиКоличество - 1 >= 0 Цикл
			ВыделеннаяСтрока = Элементы.Автоработы.ВыделенныеСтроки[0];
			НайденнаяСтрока = Объект.Автоработы.НайтиПоИдентификатору(ВыделеннаяСтрока);
			Если ИспользоватьУчетРабочегоВремени Тогда
			
				Если Объект.Автоработы.НайтиСтроки(Новый Структура("ПакетРабот", НайденнаяСтрока.ПакетРабот)).Количество() = 1 Тогда
					
					Если НЕ НайденнаяСтрока.СтатусПакета = ПредопределенноеЗначение("Справочник.ВидыСостоянийПакетовРабот.ВРаботе")
						ИЛИ РазрешитьУдалениеПакетовВРаботе Тогда
						УдаляемыеПакеты.Добавить(НайденнаяСтрока.ПакетРабот);
					ИначеЕсли НайденнаяСтрока.СтатусПакета = ПредопределенноеЗначение("Справочник.ВидыСостоянийПакетовРабот.ВРаботе") Тогда
						ОбщегоНазначенияКлиент.СообщитьПользователю(
							СтрШаблон(
								НСтр("ru = 'Пакет работы %1 уже в работе. Ее нельзя удалить так как она одна на пакет.'"),
								НайденнаяСтрока.Авторабота
							),
							Объект.Ссылка,
							,,
							Отказ
						);
						Возврат;
					КонецЕсли;
					
				КонецЕсли;
				ИзмененыПакетыРабот = Истина;
			КонецЕсли;
			Объект.Автоработы.Удалить(НайденнаяСтрока);
			ВыделенныеСтрокиКоличество = ВыделенныеСтрокиКоличество - 1;
		КонецЦикла;
		
		АвтоработыПослеУдаления(Элемент);
		АвтоработыПриИзменении(Элемент);
		ВывестиКоличествоСтрок(Элементы.Автоработы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Автоработы.ТекущиеДанные;
	
	Если НоваяСтрока И НЕ ОтменаРедактирования И (НЕ ТекущиеДанные = Неопределено И НЕ ЗначениеЗаполнено(ТекущиеДанные.Исполнители)) Тогда
		ЗаполнениеИсполнителей(ЭтотОбъект, Объект);
	КонецЕсли;
	
	УправлениеДиалогомАльфаАвтоКлиент
		.АвтоработыПриОкончанииРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования);
	ПричиныОбращенийКлиентСервер
		.ОбновитьИндикаторыПричинОбращения(Объект.ПричиныОбращения, Объект.Автоработы, Объект.Товары);
	
	Если Элемент.ТекущиеДанные <> Неопределено И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ИсточникПродажи) Тогда
		
		Элемент.ТекущиеДанные.ИсточникПродажи = ИсточникПродажиПоУмолчанию;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказНаряд.ОчиститьСуммыСкидкиБонусами(Объект);
	
	УправлениеДиалогомАльфаАвтоСервер.АвтоработыПослеУдаления(ЭтотОбъект, Элементы.Автоработы);
	
	ПерерасчетСуммыСкидкиБонусами();
	
	УстановитьЗаголовокНадписиСуммаДокумента();
	
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(Объект.ПричиныОбращения, Объект.Автоработы, Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыПослеУдаления(Элемент)
	
	АвтоработыПослеУдаленияНаСервере();
	
	Если ИспользоватьУчетРабочегоВремени Тогда
		ИзмененыПакетыРабот = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Строка = Объект.Автоработы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле.Имя = Элементы.АвтоработыИсполнители.Имя Тогда
		
		Если ЗначениеЗаполнено(Строка.Контрагент) Тогда
			
			Возврат;
			
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		Если Элемент.ТолькоПросмотр Тогда
			
			ОбщегоНазначенияАвтосалонКлиент.ПоказатьТаблицуЗначений(
				ПоместитьТаблицуИсполнителиВХранилище(Объект, УникальныйИдентификатор, Строка.ИдентификаторРаботы, Истина),
				НСтр("ru = 'Исполнители'"),
				ЭтотОбъект);
			Возврат;
			
		КонецЕсли;
		
		АвтосервисКлиент.НачатьПодборИсполнителей(
			Объект,
			Строка.ИдентификаторРаботы,
			ПоместитьТаблицуИсполнителиВХранилище(Объект, УникальныйИдентификатор, Строка.ИдентификаторРаботы),
			ЭтотОбъект,
			Объект.Ссылка
		);
		
	ИначеЕсли Поле.Имя = Элементы.АвтоработыСубподряд.Имя Тогда
		
		Если НЕ РедактированиеРабот ИЛИ (Элемент.ТолькоПросмотр И НЕ ЗначениеЗаполнено(Строка.Контрагент)) Тогда
			
			Возврат;
			
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		Если ЗначениеЗаполнено(Строка.ПакетРабот)
			И Строка.СтатусПакета = ПредопределенноеЗначение("Справочник.ВидыСостоянийПакетовРабот.ВРаботе")
			И Объект.Автоработы.НайтиСтроки(Новый Структура("ПакетРабот", Строка.ПакетРабот)).Количество() <= 1 Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Пакет данной работы уже в работе.
			                                    |Ее нельзя перевести на субподряд так как она одна на пакет.'"));
			Возврат;
			
		КонецЕсли;
		
		// Создаем и заполняем структуру параметров открытия формы редактирования субподрядчика.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Контрагент", Строка.Контрагент);
		ПараметрыФормы.Вставить("ДоговорВзаиморасчетов", Строка.ДоговорВзаиморасчетов);
		ПараметрыФормы.Вставить("Авторабота", Строка.Авторабота);
		ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
		ПараметрыФормы.Вставить("ТолькоПросмотр", Элемент.ТолькоПросмотр);
		
		// Производим открытие формы подбора номенклатуры
		ОткрытьФорму(
			"Документ.ЗаказНаряд.Форма.ФормаСубподрядчик",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ПодборСубподрядчика"),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Поле.Имя = Элементы.АвтоработыМатериалы.Имя Тогда
		
		Если НЕ РедактированиеРабот ИЛИ (Элемент.ТолькоПросмотр И НЕ ЗначениеЗаполнено(Строка.Материалы)) Тогда
			
			Возврат;
			
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		Если Элемент.ТолькоПросмотр Тогда
			
			ОбщегоНазначенияАвтосалонКлиент.ПоказатьТаблицуЗначений(
				ПоместитьМатериалыВХранилище(Объект, УникальныйИдентификатор, Строка.ИдентификаторРаботы),
				НСтр("ru = 'Материалы'"),
				ЭтотОбъект);
			Возврат;
			
		КонецЕсли;
		
		МассивИмени 		= СтрРазделить(ЭтотОбъект.ИмяФормы, ".");
		ПолноеИмяОбъекта 	= МассивИмени[0] + "." + МассивИмени[1];  
		
		// Инициализируем структуру основных параметры подбора товаров в документ
		ПараметрыПодбора = Новый Структура();
		ПараметрыПодбора.Вставить("ПолноеИмяОбъекта",       ПолноеИмяОбъекта);
		ПараметрыПодбора.Вставить("ИмяТабличнойЧасти",      "Материалы");
		ПараметрыПодбора.Вставить("ИмяРеквизитаКоличество", "Количество");
		
		// Создаем и заполняем структуру параметров открытия формы номенклатуры
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("ПараметрыПодбора",      ПараметрыПодбора);
		ПараметрыОткрытия.Вставить("РежимВыбора",           ИСТИНА);
		ПараметрыОткрытия.Вставить("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
		ПараметрыОткрытия.Вставить("Контрагент",            Объект.Контрагент);
		ПараметрыОткрытия.Вставить("Валюта",                Объект.ВалютаДокумента);
		ПараметрыОткрытия.Вставить("КурсВалюты",            Объект.КурсДокумента);
		ПараметрыОткрытия.Вставить("ТипЦен",                Объект.ТипЦенРабот);
		ПараметрыОткрытия.Вставить("СкладКомпании",         СкладЦеха(Объект.Цех));
		ПараметрыОткрытия.Вставить("Контрагент",            Неопределено);
		ПараметрыОткрытия.Вставить("ЕстьСклад",             Истина);
		ПараметрыОткрытия.Вставить("ЕстьЦена",              Ложь);
		ПараметрыОткрытия.Вставить("ЕстьСумма",             Ложь);
		ПараметрыОткрытия.Вставить("ЕстьПримечание",        Истина);
		ПараметрыОткрытия.Вставить("ДатаЗапретаПодбораНоменклатурыСМаркировкой", ОбщегоНазначенияКлиент.ДатаСеанса());
		
		АдресНоменклатуры = ПоместитьМатериалыВХранилище(Объект, УникальныйИдентификатор, Строка.ИдентификаторРаботы);
		ПараметрыОткрытия.Вставить("АдресКорзины", АдресНоменклатуры);
		
		// Получим назначенные на поле ввода Номенклатуры параметры отбора
		ПараметрыОтбора = Новый Структура();
		
		Для каждого ПараметрВыбора Из Элементы.ТоварыНоменклатура.ПараметрыВыбора Цикл
			
			ПараметрыОтбора.Вставить(СтрЗаменить(ПараметрВыбора.Имя, "Отбор.", ""), ПараметрВыбора.Значение);
			
		КонецЦикла;
		
		Для каждого ПараметрВыбора Из Элементы.ТоварыНоменклатура.СвязиПараметровВыбора Цикл
			
			ПараметрыОтбора.Вставить(СтрЗаменить(ПараметрВыбора.Имя, "Отбор.", ""), Вычислить("Форма."+ПараметрВыбора.ПутьКДанным));
			
		КонецЦикла;
		
		//ПараметрыОтбора.Вставить("ПараметрыВыбора",       Элементы.ТоварыНоменклатура.ПараметрыВыбора);
		//ПараметрыОтбора.Вставить("СвязиПараметровВыбора", Элементы.ТоварыНоменклатура.СвязиПараметровВыбора);
		ПараметрыОткрытия.Вставить("Отбор", ПараметрыОтбора);
		
		// Производим открытие формы подбора номенклатуры
		ОткрытьФорму(
			"Справочник.Номенклатура.ФормаСписка",
			ПараметрыОткрытия,
			ЭтотОбъект,
			,
			,
			,
			Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ПодборМатериалов"),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
	СкидкиНаценкиКлиент.ОбработкаВыбора(
		ЭтотОбъект,
		Поле,
		ВыбраннаяСтрока,
		Объект.БлокироватьПерерасчетСкидок,
		"Автоработы",
		СтандартнаяОбработка
	);
	
КонецПроцедуры

#Область ОбработчикиСобытийПолейТаблицыФормыАвтоработы

&НаКлиенте
Процедура АвтоработыАвтоработаПриИзменении(Элемент)
	
	АвтоработыАвтоработаПриИзмененииНаСервере();
	
	// Заполним связанные работы
	ТекущиеДанные = Элементы.Автоработы.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ПараметрыОткрытия = Новый Структура("Автомобиль", Автомобиль);
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(Объект, ТекущиеДанные, ЭтотОбъект, ПараметрыОткрытия);
		// FIXME: Перенести на сервер
		// Заполним пакет для добавленной автоработы
		Если ИспользоватьУчетРабочегоВремени И ПустаяСтрока(Элементы.Автоработы.ТекущиеДанные.ПакетРабот) Тогда
			ДобавитьНовуюАвтоработуВПакет(Элементы.Автоработы.ТекущаяСтрока);
			ИзмененыПакетыРабот = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыАвтоработаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	
	Если  АвтоматическиСоздаватьСводныйРемонтныйЗаказ и ЗначениеЗаполнено(СводныйРемонтныйЗаказ.Автомобиль) Тогда
		
		ПараметрыДействия = Новый Структура;
		ПараметрыДействия.Вставить("Автомобиль", СводныйРемонтныйЗаказ.Автомобиль);	
		
	КонецЕсли;

	Документы.ЗаказНаряд.АвтоработыАвтоработаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыКоличествоПриИзменении(Элемент)
	
	АвтоработыКоличествоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаказНаряд.АвтоработыКоличествоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыНормочасПриИзменении(Элемент)
	
	АвтоработыНормочасПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыНормочасПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаказНаряд.АвтоработыНормочасПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыКоэффициентПриИзменении(Элемент)
	
	АвтоработыКоэффициентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыКоэффициентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаказНаряд.АвтоработыКоэффициентПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыЦенаПриИзменении(Элемент)
	
	АвтоработыЦенаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыЦенаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаказНаряд.АвтоработыЦенаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыСуммаПриИзменении(Элемент)
	
	АвтоработыСуммаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыСуммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаказНаряд.АвтоработыСуммаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыСуммаВсегоПриИзменении(Элемент)
	
	АвтоработыСуммаВсегоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаказНаряд.АвтоработыСуммаВсегоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыСтавкаНДСПриИзменении(Элемент)
	
	АвтоработыСтавкаНДСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаказНаряд.АвтоработыСтавкаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыСуммаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаказНаряд.АвтоработыСуммаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура АвтоработыСуммаНДСПриИзменении(Элемент)
	
	АвтоработыСуммаНДСПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура АвтоработыПроцентСкидкиПриИзменении(Элемент)
	
	АвтоработыПроцентСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыПроцентСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаказНаряд.АвтоработыПроцентСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыСуммаСкидкиПриИзменении(Элемент)
	
	АвтоработыСуммаСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыСуммаСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаказНаряд.АвтоработыСуммаСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыСкидкаНаТоварПриИзменении(Элемент)
	
	АвтоработыСкидкаНаТоварПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыСкидкаНаТоварПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Ложь;
	ТекущиеДанные.СкидкаСтрокиИзменена = Истина;
	Документы.ЗаказНаряд.АвтоработыСкидкаНаТоварПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыПроцентСкидкиСтрокиПриИзменении(Элемент)

	АвтоработыПроцентСкидкиСтрокиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыПроцентСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаказНаряд.АвтоработыПроцентСкидкиСтрокиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыСуммаСкидкиСтрокиПриИзменении(Элемент)
	
	АвтоработыСуммаСкидкиСтрокиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыСуммаСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаказНаряд.АвтоработыСуммаСкидкиСтрокиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыСпособРасчетаСтоимостиРаботыПриИзменении(Элемент)
	АвтоработыСпособРасчетаСтоимостиРаботыПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура АвтоработыСпособРасчетаСтоимостиРаботыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаказНаряд.АвтоработыСпособРасчетаСтоимостиРаботыПриИзменени(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПричиныОбращенияТовары

&НаКлиенте
Процедура ПричиныОбращенияТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если (НоваяСтрока И ПустаяСтрока(Элемент.ТекущиеДанные.ИдентификаторПричиныОбращения)) ИЛИ Копирование Тогда
		
		Элемент.ТекущиеДанные.ИдентификаторПричиныОбращения = Новый УникальныйИдентификатор;
		ПричиныОбращенийКлиент.ОбновитьИдентификаторыТаблиц(Объект);
		ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(Элемент.ТекущиеДанные, Элементы.Товары, ИспользоватьПричиныОбращений);
		УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.Товары);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПричиныОбращенияТоварыПриАктивизацииСтроки(Элемент)
	
	Если Элемент <> Неопределено Тогда
		
		ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(Элемент.ТекущиеДанные, Элементы.Товары, ИспользоватьПричиныОбращений);
		Элементы.ПричиныОбращенияАвтоработы.ТекущаяСтрока = Элемент.ТекущаяСтрока;
		
	КонецЕсли;

	ВывестиКоличествоСтрок(Элементы.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияТоварыПриИзменении(Элемент)
	
	ПричиныОбращенийКлиент.ОбновитьОписаниеПричиныОбращения(Объект, Элементы.ОписаниеПричиныОбращения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = Элементы.ПричиныОбращенияТоварыПричинаОбращенияСодержание.Имя
		И Элементы.ПричиныОбращенияТоварыПричинаОбращенияСодержание.ГиперссылкаЯчейки Тогда
		ПричиныОбращенийКлиент.НачатьРедактированиеПричины(Элемент.ТекущиеДанные, ЭтотОбъект, , Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		
		ПричиныОбращенийКлиент.ОбновитьИдентификаторыТаблиц(Объект);
		
	КонецЕсли;
	
	ПричиныОбращенийКлиентСервер
		.ОбновитьИндикаторыПричинОбращения(Объект.ПричиныОбращения, Объект.Автоработы, Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияТоварыПередУдалением(Элемент, Отказ)
	
	Если Объект.ПричиныОбращения.Количество() > 1 Тогда
		
		Отбор = Новый Структура("ИдентификаторПричиныОбращения", Элемент.ТекущиеДанные.ИдентификаторПричиныОбращения);
		СтрокиУдаляемогоЭлементаАвтоработы = Объект.Автоработы.НайтиСтроки(Отбор);
		СтрокиУдаляемогоЭлементаТовары = Объект.Товары.НайтиСтроки(Отбор);
		
		Если НЕ СтрокиУдаляемогоЭлементаАвтоработы.Количество() = 0 ИЛИ НЕ СтрокиУдаляемогоЭлементаТовары.Количество() = 0 Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Событие", "ВопросПеренесенияПозицийВДругуюПричинуОбращеий");
			ДополнительныеПараметры.Вставить("ИмяКоманды", "");
			ДополнительныеПараметры.Вставить("Элемент", Элемент);
			Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ДополнительныеПараметры);
			
			КнопкиВопроса = Новый СписокЗначений;
			КнопкиВопроса.Добавить("Перенести", "Перенести в другую причину обращения");
			КнопкиВопроса.Добавить("Удалить", "Удалить позиции");
			КнопкиВопроса.Добавить("Отмена", "Отменить удаление причины обращения");
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Выберите что необходимо сделать с Автоработами/Товарами удаляемой причины обращения?'"), КнопкиВопроса);
			
			Отказ = Истина;
			
		КонецЕсли;
		
	Иначе
		
		ПричиныОбращенийКлиент.СброситьИдентификаторПричиныОбращения(
			Объект, Элемент.ТекущиеДанные.ИдентификаторПричиныОбращения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияТоварыПослеУдаления(Элемент)
	
	ОбновитьДанныеПослеУдаленияПричиныОбращения(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияТоварыПричинаОбращенияСодержаниеПриИзменении(Элемент)
	
	ТекДанные = Элементы.ПричиныОбращенияТовары.ТекущиеДанные;
	
	Если ПричинаОбращенияИзменилась ИЛИ НЕ ЗначениеЗаполнено(ТекДанные.ПричинаОбращения) Тогда
		
		ОбработатьИзменениеПричиныОбращения(ТекДанные);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПричиныОбращенияТоварыПричинаОбращенияСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПричиныОбращенийКлиент
		.ОткрытьФормуВыбораПричиныОбращения(Элемент, Элементы.ПричиныОбращенияТовары.ТекущиеДанные.ПричинаОбращения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияТоварыПричинаОбращенияСодержаниеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПричиныОбращенийКлиент
		.НачатьРедактированиеПричины(Элементы.ПричиныОбращенияТовары.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияТоварыПричинаОбращенияСодержаниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		ПричинаОбращенияИзменилась = Истина;
		
		ДопПараметры = Новый Структура("Документ", Объект.СводныйРемонтныйЗаказ);
		ПричиныОбращенийКлиент.ЗаполнитьСтрокуПричиныПоВыбранномуЗначению(
			Элементы.ПричиныОбращенияТовары.ТекущиеДанные, ВыбранноеЗначение, ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияТоварыПричинаОбращенияСодержаниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПричиныОбращенийКлиент.ОписаниеПричиныОбращенияАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		ПараметрыПолученияДанных,
		Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка <> Неопределено Тогда
		
		Причина = Объект.ПричиныОбращения.НайтиПоИдентификатору(Строка);
		
		Если Причина <> Неопределено
			И ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
			И ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
			
			Для Каждого ПеретаскиваемаяСтрока Из ПараметрыПеретаскивания.Значение Цикл
				
				Если ТипЗнч(ПеретаскиваемаяСтрока) = Тип("ДанныеФормыЭлементКоллекции")
					И ПеретаскиваемаяСтрока.Свойство("ИдентификаторПричиныОбращения") Тогда
					
					ПеретаскиваемаяСтрока.ИдентификаторПричиныОбращения = Причина.ИдентификаторПричиныОбращения;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.Товары);
	ПричиныОбращенийКлиент
		.ОтобратьДанныеПоПричинеОбращения(Элементы.ПричиныОбращенияТовары.ТекущиеДанные, Элементы.Товары, ИспользоватьПричиныОбращений);
	ПричиныОбращенийКлиентСервер
		.ОбновитьИндикаторыПричинОбращения(Объект.ПричиныОбращения, Объект.Автоработы, Объект.Товары);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ПерерасчетСуммыСкидкиБонусами();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СкидкиНаценкиКлиент.ОбработкаВыбора(ЭтотОбъект, Поле, ВыбраннаяСтрока, Объект.БлокироватьПерерасчетСкидок, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПроверкаСоответствияКодовМаркировкиПроводилась = Ложь;
	
	СтруктураДанныхТекущейСтроки = Новый Структура;
	КэшТоварыВПроизводстве = ПолучитьСтрокуКешаПеремещенияДокументы(Элемент.ТекущаяСтрока);
	СтруктураДанныхТекущейСтроки.Вставить("Строка",                     Элемент.ТекущиеДанные);
	СтруктураДанныхТекущейСтроки.Вставить("СтрокаИсключение",           Неопределено);
	СтруктураДанныхТекущейСтроки.Вставить("СтрокаУдаление",             Неопределено);
	СтруктураДанныхТекущейСтроки.Вставить("Номенклатура",               Неопределено);
	СтруктураДанныхТекущейСтроки.Вставить("ХарактеристикаНоменклатуры", Неопределено);
	СтруктураДанныхТекущейСтроки.Вставить("ЕдиницаИзмерения",           Неопределено);
	СтруктураДанныхТекущейСтроки.Вставить("Количество",                 0);
	СтруктураДанныхТекущейСтроки.Вставить("Коэффициент",                1);
	СтруктураДанныхТекущейСтроки.Вставить("КэшТоварыВПроизводстве",     КэшТоварыВПроизводстве);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
		
	СтруктураДанныхТекущейСтроки = Новый Структура;
	КэшТоварыВПроизводстве = ПолучитьСтрокуКешаПеремещенияДокументы(Элемент.ТекущаяСтрока);
	СтруктураДанныхТекущейСтроки.Вставить("Строка",                     Элемент.ТекущиеДанные);
	СтруктураДанныхТекущейСтроки.Вставить("СтрокаИсключение",           Неопределено);
	СтруктураДанныхТекущейСтроки.Вставить("СтрокаУдаление",             Неопределено);
	СтруктураДанныхТекущейСтроки.Вставить("Номенклатура",               Элемент.ТекущиеДанные.Номенклатура);
	СтруктураДанныхТекущейСтроки.Вставить("ХарактеристикаНоменклатуры", Элемент.ТекущиеДанные.ХарактеристикаНоменклатуры);
	СтруктураДанныхТекущейСтроки.Вставить("ЕдиницаИзмерения",           Элемент.ТекущиеДанные.ЕдиницаИзмерения);
	СтруктураДанныхТекущейСтроки.Вставить("Количество",                 Элемент.ТекущиеДанные.Количество);
	СтруктураДанныхТекущейСтроки.Вставить("Коэффициент",                Элемент.ТекущиеДанные.Коэффициент);
	СтруктураДанныхТекущейСтроки.Вставить("КэшТоварыВПроизводстве",     КэшТоварыВПроизводстве);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ, ПослеВопроса = Ложь)
	
	Если ПроизводитсяРасчетПоказателей Тогда
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	Если ПереносРаботДеталейВРекомендацииПриУдалении И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Номенклатура) И Не ПослеВопроса Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Событие", "ВопросПеренесенияВРекомендацииУдаляемыхСтрокТоваров");
		ДополнительныеПараметры.Вставить("ИмяКоманды", "");
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перенести удаляемую строку в рекомендации автомобиля?'"), РежимДиалогаВопрос.ДаНет);
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	ПроверкаСоответствияКодовМаркировкиПроводилась = Ложь;

	Если Не Отказ Тогда
		
		Отказ = Отказ Или КонтрольКоличестваДеталейВПроизводствеПередУдалением(Элементы.Товары.ВыделенныеСтроки);
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		ВыделенныеСтрокиКоличество = Элементы.Товары.ВыделенныеСтроки.Количество();
		
		Пока ВыделенныеСтрокиКоличество - 1 >= 0 Цикл
			
			ВыделеннаяСтрока = Элементы.Товары.ВыделенныеСтроки[0];
			НайденнаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
			Объект.Товары.Удалить(НайденнаяСтрока);
			ВыделенныеСтрокиКоличество = ВыделенныеСтрокиКоличество - 1;
			
		КонецЦикла;
		
		ТоварыПослеУдаления(Элемент);
		ТоварыПриИзменении(Элемент);
		ВывестиКоличествоСтрок(Элементы.Товары);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	КонтрольКоличестваДеталейВПроизводстве(СтруктураДанныхТекущейСтроки);
	
	УправлениеДиалогомДокументаКлиент
		.ТоварыПриОкончанииРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования);
	ПричиныОбращенийКлиентСервер
		.ОбновитьИндикаторыПричинОбращения(Объект.ПричиныОбращения, Объект.Автоработы, Объект.Товары);
	
	Если Элемент.ТекущиеДанные <> Неопределено И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ИсточникПродажи) Тогда
		
		Элемент.ТекущиеДанные.ИсточникПродажи = ИсточникПродажиПоУмолчанию;
		
	КонецЕсли;
	УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.Товары);

	ПодключитьОбработчикОжидания("ОтложенныйРасчетПоказателей", 1, Истина);
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказНаряд.ОчиститьСуммыСкидкиБонусами(Объект);
	
	УправлениеДиалогомДокументаСервер.ТоварыПослеУдаления(ЭтотОбъект, Элементы.Товары, ПараметрыДействия);
	
	ПерерасчетСуммыСкидкиБонусами();
	
	УстановитьЗаголовокНадписиСуммаДокумента();
	
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(Объект.ПричиныОбращения, Объект.Автоработы, Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ТоварыПослеУдаленияНаСервере();
	УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.Товары);

	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ПустаяСтрока(ТекущиеДанные.ИдентификаторПричиныОбращения)
		И Элементы.ПричиныОбращенияТовары.ТекущаяСтрока <> Неопределено Тогда
		
		ДанныеОбращения = Объект.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияТовары.ТекущаяСтрока);
		ТекущиеДанные.ИдентификаторПричиныОбращения = ДанныеОбращения.ИдентификаторПричиныОбращения;
		ПричиныОбращенияТоварыПриАктивизацииСтроки(Элементы.ПричиныОбращенияТовары);
		
	КонецЕсли;
	
	Если НоваяСтрока ИЛИ Копирование Тогда
		
		ТекущиеДанные.АвторСтроки = ПользователиКлиент.ТекущийПользователь();
		ТекущиеДанные.АвторИзмененияСтроки = ТекущиеДанные.АвторСтроки;
		
	КонецЕсли;
	
	Если Копирование Тогда
		
		Элементы.Товары.ТекущиеДанные.СуммаСкидкиБонусами = 0;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийПолейТаблицыФормыТовары

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказНаряд.ТоварыНоменклатураПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	ТоварыНоменклатураПриИзмененииНаСервере();
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ПараметрыОткрытия = Новый Структура("Автомобиль", Автомобиль);
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(Объект, ТекущиеДанные, ЭтотОбъект, ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказНаряд.ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказНаряд.ТоварыЕдиницаИзмеренияПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТоварыЕдиницаИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказНаряд.ТоварыКоличествоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ПерерасчетСуммыСкидкиБонусами();
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	ТоварыКоличествоПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыЦенаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказНаряд.ТоварыЦенаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТоварыЦенаПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСуммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказНаряд.ТоварыСуммаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТоварыСуммаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказНаряд.ТоварыСуммаВсегоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСуммаВсегоПриИзменении(Элемент)
	
	ТоварыСуммаВсегоПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказНаряд.ТоварыСтавкаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТоварыСтавкаНДСПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСуммаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказНаряд.ТоварыСуммаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТоварыСуммаНДСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказНаряд.ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Элемент)

	ТоварыСуммаСкидкиСтрокиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказНаряд.ТоварыСуммаСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	
	ТоварыСуммаСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСкидкаНаТоварПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Ложь;
	ТекущиеДанные.СкидкаСтрокиИзменена = Истина;
	Документы.ЗаказНаряд.ТоварыСкидкаНаТоварПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкидкаНаТоварПриИзменении(Элемент)
	
	ТоварыСкидкаНаТоварПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПроцентСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказНаряд.ТоварыПроцентСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиПриИзменении(Элемент)

	ТоварыПроцентСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПроцентСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказНаряд.ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Элемент)
	
	ТоварыПроцентСкидкиСтрокиПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура();
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(Объект.СводныйРемонтныйЗаказ) Тогда
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Модель", Объект.СводныйРемонтныйЗаказ);
		ДополнительныеПараметры.Вставить("ОтборНоменклатурыПоПрименяемости");
		
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущиеДанные.Номенклатура);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.СкладКомпании) Тогда
		ДополнительныеПараметры.Вставить("СкладКомпании", ТекущиеДанные.СкладКомпании);
	КонецЕсли;
	
	УправлениеДиалогомДокументаКлиент.ТоварыНоменклатураНачалоВыбора(
		ЭтотОбъект,
		Элемент,
		ДанныеВыбора,
		ВыборДобавлением,
		СтандартнаяОбработка,
		ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВспомогательныеАвтоработы

&НаКлиенте
Процедура ВспомогательныеАвтоработыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если ПустаяСтрока(Элементы.ВспомогательныеАвтоработы.ТекущиеДанные.ИдентификаторРаботы) Тогда
		Элементы.ВспомогательныеАвтоработы.ТекущиеДанные.ИдентификаторРаботы = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВспомогательныеАвтоработыАвтоработаПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	ТекущиеДанные = Объект.ВспомогательныеАвтоработы.НайтиПоИдентификатору(
		Элементы.ВспомогательныеАвтоработы.ТекущаяСтрока);
	
	Документы.ЗаказНаряд.ВспомогательныеАвтоработыАвтоработаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ВспомогательныеАвтоработыАвтоработаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура();
	
	ВспомогательныеАвтоработыАвтоработаПриИзмененииНаСервере(ПараметрыДействия);
	
	// Заполним связанные работы
	ТекущиеДанные = Элементы.ВспомогательныеАвтоработы.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ПараметрыОткрытия = Новый Структура("Автомобиль", Автомобиль);
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(Объект, ТекущиеДанные, ЭтотОбъект, ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтомобили

&НаКлиенте
Процедура АвтомобилиАвтомобильПриИзменении(Элемент)
	
	АвтомобилиАвтомобильПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтомобилиАвтомобильПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
	ТекущиеДанные.ПрослеживаемыйТовар = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ТекущиеДанные.Автомобиль,
		"Прослеживаемый");
	ОбработкаТабличнойЧастиАвтомобили.ЗаполнитьДополнительныеРеквизиты(
		Объект,
		ТекущиеДанные,
		ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалыЗаказчика

&НаКлиенте
Процедура МатериалыЗаказчикаНоменклатураПриИзменении(Элемент)
	
	МатериалыЗаказчикаНоменклатураПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура МатериалыЗаказчикаНоменклатураПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.МатериалыЗаказчика.НайтиПоИдентификатору(Элементы.МатериалыЗаказчика.ТекущаяСтрока);
	Документы.ЗаказНаряд.МатериалыЗаказчикаНоменклатураПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
	УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(
		ЭтотОбъект,
		ТекущиеДанные,
		ПараметрыДействия,
		"МатериалыЗаказчика"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборТипаДанных = Новый СписокЗначений;
	ВыборТипаДанных.Добавить("Строка");
	ВыборТипаДанных.Добавить("Номенклатура");
	ВыборТипаДанных.ПоказатьВыборЭлемента(
		Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаВыбораТипаДанных", ЭтотОбъект),
		НСтр("ru = 'Выбор типа данных'"),
		ВыборТипаДанных.НайтиПоЗначению("Строка")
	);
	
КонецПроцедуры 

&НаКлиенте
Процедура МатериалыЗаказчикаЕдиницаИзмеренияПриИзменении(Элемент)
	
	МатериалыЗаказчикаЕдиницаИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура МатериалыЗаказчикаЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.МатериалыЗаказчика.НайтиПоИдентификатору(Элементы.МатериалыЗаказчика.ТекущаяСтрока);
	
	Документы.ЗаказНаряд.МатериалыЗаказчикаЕдиницаИзмеренияПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	МатериалыЗаказчикаХарактеристикаНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура МатериалыЗаказчикаХарактеристикаНоменклатурыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.МатериалыЗаказчика.НайтиПоИдентификатору(Элементы.МатериалыЗаказчика.ТекущаяСтрока);
	Документы.ЗаказНаряд.МатериалыЗаказчикаХарактеристикаНоменклатурыПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.МатериалыЗаказчика.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.АвторСтроки          = ПользователиКлиент.ТекущийПользователь();
		ТекущиеДанные.АвторИзмененияСтроки = ТекущиеДанные.АвторСтроки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеДиалогомДокументаКлиент
		.ТоварыПриОкончанииРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования);

	УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаПриИзменении(Элемент)

	МатериалыЗаказчикаУстановитьВидимостьКолонок();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаПослеУдаления(Элемент)
	
	МатериалыЗаказчикаУстановитьВидимостьКолонок();
	
КонецПроцедуры

&НаСервере
Процедура МатериалыЗаказчикаКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.МатериалыЗаказчика.НайтиПоИдентификатору(Элементы.МатериалыЗаказчика.ТекущаяСтрока);
	Документы.ЗаказНаряд.МатериалыЗаказчикаКоличествоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаКоличествоПриИзменении(Элемент)
	
	МатериалыЗаказчикаКоличествоПриИзмененииНаСервере();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПолейТаблицыФормыЗачетАвансов

&НаСервере
Процедура ЗачетАвансовДокументАвансаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ЗачетАвансов.НайтиПоИдентификатору(Элементы.ЗачетАвансов.ТекущаяСтрока);
	Документы.ЗаказНаряд.ЗачетАвансовДокументАвансаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачетАвансовДокументАвансаПриИзменении(Элемент)
	
	ЗачетАвансовДокументАвансаПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)
	
	ОписаниеОбъекта = Неопределено;
	РежимПросмотраМеток = Ложь;
	
	Если СтрНайти(ЭлементИлиКоманда.Имя, "ОстальныеМетки") = 1 Тогда
		
		Если ЭлементИлиКоманда.Родитель.Имя = "ГруппаМеткиКонтрагента" Тогда
			ОписаниеОбъекта = Объект.Контрагент;
			РежимПросмотраМеток = Истина;
		ИначеЕсли ЭлементИлиКоманда.Родитель.Имя = "ГруппаМеткиЗаказчика" Тогда
			ОписаниеОбъекта = СводныйРемонтныйЗаказ.Заказчик;
			РежимПросмотраМеток = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеСвойствамиАльфаАвтоКлиент.ВыполнитьКоманду(
		ЭтотОбъект,
		ЭлементИлиКоманда,
		СтандартнаяОбработка,
		ОписаниеОбъекта,
		РежимПросмотраМеток);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Заказать(Команда)
	
	Если Элементы.Товары.ВыделенныеСтроки.Количество() > 0 Тогда
		ТекущийЗаказНаряд = Объект.Ссылка;
		ДействиеДокумент = "Документ."+Команда.Имя+".ФормаОбъекта";
		ДействиеДокументИзПричинаОбращения = Ложь;
		Если Команда.Имя = "ЗаказПокупателя" Тогда
			ДействиеНаДокумент = Истина;
			ДействиеХозОперацияДокумента = ПредопределенноеЗначение("Справочник.ХозОперации.ЗаказПокупателя");
		КонецЕсли;
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Оформить заказ %1?'"), НРег(Сред(Команда.Имя , 6)));
		ПолучитьТоварыИМатериалыПоЗаказНаряду(ТекущийЗаказНаряд, Элементы.Товары.ВыделенныеСтроки, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Зарезервировать(Команда)
	
	Если Элементы.Товары.ВыделенныеСтроки.Количество() > 0 Тогда
		ТекущийЗаказНаряд = Объект.Ссылка;
		ДействиеДокумент = "Документ.ЗаказПокупателя.ФормаОбъекта";
		ДействиеДокументИзПричинаОбращения = Ложь;
		ДействиеНаДокумент = Истина;
		ДействиеХозОперацияДокумента = ПредопределенноеЗначение("Справочник.ХозОперации.РезервированиеПокупателя");
		ТекстСообщения = НСтр("ru = 'Зарезервировать выбранный товар из заказ-наряда?'");
		ПолучитьТоварыИМатериалыПоЗаказНаряду(ТекущийЗаказНаряд, Элементы.Товары.ВыделенныеСтроки, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьРезервы(Команда)
	
	Если Элементы.Товары.ВыделенныеСтроки.Количество() > 0 Тогда
		ТекущийЗаказНаряд = Объект.Ссылка;
		ДействиеДокумент = "Обработка.СнятиеЗапчастиСРезерва.Форма";
		ДействиеДокументИзПричинаОбращения = Ложь;
		
		Если Команда.Имя = "ОтменитьЗаказ" Тогда
			ТекстСообщения = НСтр("ru = 'Отменить заказ на выбранный товар из заказ-наряда?'");
			СнятиеРезерваСОтменой = Истина;
		Иначе
			ТекстСообщения = НСтр("ru = 'Снять с резерва выбранный товар из заказ-наряда?'");
			СнятиеРезерваСОтменой = Ложь;
		КонецЕсли;
		
		ПолучитьТоварыИМатериалыПоЗаказНаряду(ТекущийЗаказНаряд, Элементы.Товары.ВыделенныеСтроки, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИзПроизводства(Команда)
	
	Если
		Элементы.Товары.ВыделенныеСтроки.Количество() > 0
		Или Элементы.Автоработы.ВыделенныеСтроки.Количество() > 0
	Тогда
		
		ТекущийЗаказНаряд = Объект.Ссылка;
		ДействиеДокумент = "Документ.ИзвлечениеТоваровИзПроизводства.Форма.ФормаДокументаПодбора";
		ДействиеДокументИзПричинаОбращения = Ложь;
		ТекстСообщения = НСтр("ru = 'Сформировать перемещение из производства по заказ-наряду?'");
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОткрытьФормуИзвлеченияПроизводства", ЭтотОбъект);
		ПолучитьТоварыИМатериалыПоЗаказНаряду(
			ТекущийЗаказНаряд,
			Элементы.Товары.ВыделенныеСтроки,
			ТекстСообщения,
			Оповещение
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВПроизводство(Команда)
	
	Если
		Элементы.Товары.ВыделенныеСтроки.Количество() > 0
		Или Элементы.Автоработы.ВыделенныеСтроки.Количество() > 0
	Тогда
		
		ТекущийЗаказНаряд = Объект.Ссылка;
		ДействиеДокумент = "Документ.ПеремещениеТоваровВПроизводство.ФормаОбъекта";
		ДействиеДокументИзПричинаОбращения = Ложь;
		ДействиеНаДокумент = Истина;
		ТекстСообщения = НСтр("ru = 'Сформировать перемещение в производство по заказ-наряду?'");
		
		Если Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаТовары" Тогда
			
			РучноеПеремещениеТоваровВПроизводствоИзЗН = Истина;
			
		КонецЕсли;
		
		ПолучитьТоварыИМатериалыПоЗаказНаряду(ТекущийЗаказНаряд, Элементы.Товары.ВыделенныеСтроки, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказатьИзПричиныОбращения(Команда)
	
	Если Элементы.Товары.ВыделенныеСтроки.Количество() > 0 Тогда
		ТекущийЗаказНаряд = Объект.Ссылка;
		ДействиеДокумент = "Документ.ЗаказПоставщику.ФормаОбъекта";
		ДействиеДокументИзПричинаОбращения = Истина;
		ТекстСообщения = НСтр("ru = 'Заказать выбранный товар из заказ-наряда?'");
		ПолучитьТоварыИМатериалыПоЗаказНаряду(ТекущийЗаказНаряд, Элементы.Товары.ВыделенныеСтроки, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарезервироватьИзПричиныОбращения(Команда)
	
	Если Элементы.Товары.ВыделенныеСтроки.Количество() > 0 Тогда
		ТекущийЗаказНаряд = Объект.Ссылка;
		ДействиеДокумент = "Документ.ЗаказПокупателя.ФормаОбъекта";
		ДействиеДокументИзПричинаОбращения = Истина;
		ДействиеНаДокумент = Истина;
		ДействиеХозОперацияДокумента = ПредопределенноеЗначение("Справочник.ХозОперации.РезервированиеПокупателя");
		ТекстСообщения = НСтр("ru = 'Зарезервировать выбранный товар из заказ-наряда?'");
		ПолучитьТоварыИМатериалыПоЗаказНаряду(ТекущийЗаказНаряд, Элементы.Товары.ВыделенныеСтроки, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьРезервыИзПричиныОбращения(Команда)
	
	Если Элементы.Товары.ВыделенныеСтроки.Количество() > 0 Тогда
		ТекущийЗаказНаряд = Объект.Ссылка;
		ДействиеДокумент = "Обработка.СнятиеЗапчастиСРезерва.Форма";
		ДействиеДокументИзПричинаОбращения = Истина;
		
		Если Команда.Имя = "ОтменитьЗаказИзПричинОбращения" Тогда
			ТекстСообщения = НСтр("ru = 'Отменить заказ на выбранный товар из заказ-наряда?'");
			СнятиеРезерваСОтменой = Истина;
		Иначе
			ТекстСообщения = НСтр("ru = 'Снять с резерва выбранный товар из заказ-наряда?'");
			СнятиеРезерваСОтменой = Ложь;
		КонецЕсли;
		
		ПолучитьТоварыИМатериалыПоЗаказНаряду(ТекущийЗаказНаряд, Элементы.Товары.ВыделенныеСтроки, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИзПроизводстваИзПричиныОбращения(Команда)
	
	Если Элементы.Товары.ВыделенныеСтроки.Количество() > 0 Тогда
		ТекущийЗаказНаряд = Объект.Ссылка;
		ДействиеДокумент = "Документ.ИзвлечениеТоваровИзПроизводства.ФормаОбъекта";
		ДействиеДокументИзПричинаОбращения = Истина;
		ТекстСообщения = НСтр("ru = 'Сформировать перемещение из производства по заказ-наряду?'");
		ПолучитьТоварыИМатериалыПоЗаказНаряду(ТекущийЗаказНаряд, Элементы.Товары.ВыделенныеСтроки, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВПроизводствоИзПричиныОбращения(Команда)
	
	Если Элементы.Товары.ВыделенныеСтроки.Количество() > 0 Тогда
		
		ТекущийЗаказНаряд = Объект.Ссылка;
		ДействиеДокумент = "Документ.ПеремещениеТоваровВПроизводство.ФормаОбъекта";
		ДействиеДокументИзПричинаОбращения = Истина;
		ДействиеНаДокумент = Истина;
		ТекстСообщения = НСтр("ru = 'Сформировать перемещение в производство по заказ-наряду?'");
		РучноеПеремещениеТоваровВПроизводствоИзЗН = Истина;
		ПолучитьТоварыИМатериалыПоЗаказНаряду(ТекущийЗаказНаряд, Элементы.Товары.ВыделенныеСтроки, ТекстСообщения);
		Элементы.Товары.ВыделенныеСтроки.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиДеталей(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// фильтры
	ОтчетОтбор = Новый Структура;
	ОтчетОтбор.Вставить("НачалоПериода", Дата('00010101'));
	ОтчетОтбор.Вставить("КонецПериода",  ОбщегоНазначенияКлиент.ДатаСеанса());
	ОтчетОтбор.Вставить("ЗаказНаряд",    Объект.Ссылка);
	ОтчетОтбор.Вставить("Номенклатура",  Элементы.Товары.ТекущиеДанные.Номенклатура);
	
	ОткрытьФорму("Отчет.ОстаткиИОборотыТоваровВПроизводстве.Форма", Новый Структура("Отбор,КлючВарианта,СформироватьПриОткрытии", ОтчетОтбор, "ОстаткиИОбороты", Истина), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказРезервыДеталей(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// фильтры
	ОтчетОтбор = Новый Структура;
	ОтчетОтбор.Вставить("Заказ",        ЗаказыДляТовара());
	ОтчетОтбор.Вставить("Номенклатура", Элементы.Товары.ТекущиеДанные.Номенклатура);
	
	ОткрытьФорму("Отчет.ОстаткиИОборотыЗаказовПокупателей.Форма", Новый Структура("Отбор,КлючВарианта,СформироватьПриОткрытии", ОтчетОтбор, "ОстаткиИОбороты", Истина), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПричиныОбращений(Команда)
	
	ИспользоватьПричиныОбращений = НЕ ИспользоватьПричиныОбращений;
	
	ПричиныОбращенияАвтоработыПриАктивизацииСтроки(Элементы.ПричиныОбращенияАвтоработы);
	ПричиныОбращенияТоварыПриАктивизацииСтроки(Элементы.ПричиныОбращенияТовары);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура БлокировкаИзменений(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыЗаписиНового = ЗащищенныеФункцииКлиент.СоздатьПараметрыЗаписиНовогоОбъектаНаКлиенте();
		ПараметрыЗаписиНового.ПровестиДокумент  = Истина;
		ПараметрыЗаписиНового.ОбработчикСобытия = "СформироватьБлокировкуОтИзменений";
		ЗащищенныеФункцииКлиент.ЗаписатьНовыйОбъектНаКлиенте(ЭтотОбъект, ПараметрыЗаписиНового);
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.Модифицированность Тогда
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОбработкаРезультатаВопросаБлокировкиИзменений", ЭтотОбъект);
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Данные документа были изменены. Продолжить блокировку? %1	Да        - Сохранить изменения и продолжить; %2	Нет       - Не сохранять изменения и продолжить; %3	Отмена - Отменить блокировку.'"), Символы.ПС, Символы.ПС, Символы.ПС);
		
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе
		
		СформироватьБлокировкуОтИзменений();
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаИсторияАвтомобиляНажатие(Элемент)
	
	// Вызовем общий обработчик
	АвтомобилиКлиент.ОтчетИсторияАвтомобиля(ЭтотОбъект, Автомобиль);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОбОстатках(Команда)
	
	// подготовим параметры формы
	ОткрытьФорму(
		"ОбщаяФорма.ФормаИнформацииОбОстаткахНоменклатурыВЗаказНаряде",
		ПодготовитьПараметрыКОткрытиюФормы(),
		ЭтотОбъект,
		УникальныйИдентификатор,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыКОткрытиюФормы()
	
	ТаблицаДокумента = Новый ТаблицаЗначений;
	ТаблицаДокумента.Колонки.Добавить("ЗаказНаряд", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаряд"));
	ТаблицаДокумента.Колонки.Добавить("ЗаказНарядИдентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаДокумента.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДокумента.Колонки.Добавить("СкладКомпании", Новый ОписаниеТипов("СправочникСсылка.СкладыКомпании"));
	ТаблицаДокумента.Колонки.Добавить("Количество");
	ТаблицаДокумента.Колонки.Добавить("Коэффициент");
	ТаблицаДокумента.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаДокумента.Колонки.Добавить("ХарактеристикаНоменклатуры",
		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		
		НоваяСтрока = ТаблицаДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
		НоваяСтрока.ЗаказНарядИдентификатор = Новый УникальныйИдентификатор;
		НоваяСтрока.ЗаказНаряд              = Объект.Ссылка;
		
	КонецЦикла;
	
	Возврат Новый Структура(
		"АдресТаблицыВоВременномХранилище",
		ПоместитьВоВременноеХранилище(ТаблицаДокумента, Новый УникальныйИдентификатор)
	);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОбменСAutoPadWeb(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗаказНаряд"                       , Объект.Ссылка);
	ПараметрыОткрытия.Вставить("СводныйРемонтныйЗаказ"            , Объект.СводныйРемонтныйЗаказ);
	ПараметрыОткрытия.Вставить("ОткрытиеИзФормыДокумента"         , Истина);
	ПараметрыОткрытия.Вставить("ВладелецФормаДокументаЗаказНаряд" , Истина);
	ПараметрыОткрытия.Вставить("ЗаявкаНаРемонт", Неопределено);
	
	ОткрытьФорму("Обработка.ОбменСAudaPadWeb.Форма", ПараметрыОткрытия, ЭтотОбъект, КлючУникальности,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьУслугиПоСубподряду(Команда)
	
	ТекДоговор = Элементы.Автоработы.ТекущиеДанные.ДоговорВзаиморасчетов;
	ТекКонтрагент = Элементы.Автоработы.ТекущиеДанные.Контрагент;
	
	Результат = ПроверитьУслугиПоСубподряду(Объект.Ссылка, ТекКонтрагент, ТекДоговор);
	Если Результат <> Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьУслугиПоСубподрядуЗавершение", ЭтотОбъект, Результат);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(1, НСтр("ru = 'Создать'"));
		Кнопки.Добавить(2, НСтр("ru = 'Открыть'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ТекстВопроса = НСтр("ru = 'Обнаружены ""Услуги по субподряду"" на основании данного заказ-наряда.'");
		ТекстВопроса = ТекстВопроса + Символы.ПС 
			+ СтрШаблон(НСтр("ru = 'Документ № %1 от %2'"), Результат.Номер, Результат.Дата);
		ТекстВопроса = ТекстВопроса + Символы.ПС + НСтр("ru = 'Продолжить создание документа или открыть существующий?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
		
	Иначе
		
		ДополнительныеПараметры = Новый Структура;
		СоздатьУслугиПоСубподрядуЗавершение(1, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры // СоздатьУслугиПоСубподряду()

&НаКлиенте
Процедура Подключаемый_ПодборЗаменЗавершение(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаПодбораЗамен(РезультатОповещения, ДополнительныеПараметры);
	
	ПодключитьОбработчикОжидания("ОтложенныйРасчетПоказателей", 1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаПодбораЗамен(Результат, ДополнительныеПараметры=Неопределено)
	
	ЗаменыСервер.ВыполнитьЗаменуТоваровВДокументе(Объект, Результат, Истина, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗамен(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СвернутьПо", "ИдентификаторПричиныОбращения,Номенклатура,ХарактеристикаНоменклатуры");
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ПодборЗаменЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СкладКомпанииОстатки",  Неопределено);
	ПараметрыОткрытия.Вставить("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	ПараметрыОткрытия.Вставить("ТипЦен",                Объект.ТипЦен);
	ПараметрыОткрытия.Вставить("Валюта",                Объект.ВалютаДокумента);
	ПодборТоваровКлиент.ОткрытьПодборЗаменНоменклатуры(ЭтотОбъект, Объект, ПараметрыОткрытия, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	Попытка
		
		Записать(Новый Структура("ЗакрытьПослеЗаписи, РежимЗаписи", Истина, РежимЗаписиДокумента.Проведение));
		
	Исключение
		
		ОбщегоНазначенияАвтосалонВызовСервера.ОшибкаЖурналаРегистрации(
			СобытиеОшибкиДокумента(), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Объект.Ссылка);
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось провести: ""Заказ-наряд"".'"));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВРежимРедактированияПакетовРабот(Команда)
	
	Если Элементы.СтраницыАвтоработыПакетыРабот.ТекущаяСтраница = Элементы.СтраницаПакетыРабот Тогда
		
		Элементы.СтраницыАвтоработыПакетыРабот.ТекущаяСтраница = Элементы.СтраницаАвтоработы;
		Возврат;
		
	КонецЕсли;
	
	Если ОбновитьДеревоПакетов Тогда
		
		СформироватьДеревоПакетов();
		
	КонецЕсли;
	
	Элементы.СтраницыАвтоработыПакетыРабот.ТекущаяСтраница = Элементы.СтраницаПакетыРабот;
	ОбщегоНазначенияАвтосалонКлиент.РазвернутьДерево(ЭтотОбъект, "ПакетыРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьВРаботуПакетРабот(Команда)
	
	// Получим текущий пакет работ
	ТекущиеДанные = ПакетыРабот.НайтиПоИдентификатору(Элементы.ПакетыРабот.ТекущаяСтрока);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СтатусПакета = ПредопределенноеЗначение("Справочник.ВидыСостоянийПакетовРабот.Ожидает");
	ТекущиеДанные.НомерКартинкиСостоянияПакетаРабот = 1;
	
	ИзменитьСтатусПакетаРабот(ТекущиеДанные.ПакетРабот, ТекущиеДанные.СтатусПакета);
	
	ПоверитьСтатусТекущегоПакетаРабот();
	
	Для Каждого Авторабота Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		ЗаполнитьЗначенияСвойств(Авторабота, ТекущиеДанные, "СтатусПакета");
		ОбновитьДанныеВТаблицеАвторабот(Авторабота);
	КонецЦикла;
	
КонецПроцедуры // ВернутьВРаботуПакетРабот()

&НаКлиенте
Процедура ЗакрытьПакет(Команда)
	
	// Получим текущий пакет работ
	ТекущиеДанные = ПакетыРабот.НайтиПоИдентификатору(Элементы.ПакетыРабот.ТекущаяСтрока);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьТекущихИсполнителейПакета(ТекущиеДанные.ПакетРабот) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'По данному пакету ведутся работы сотрудниками. Закрытие не возможно.'"),, НСтр("ru = 'Закрытие пакета работ'"));
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СтатусПакета = ПредопределенноеЗначение("Справочник.ВидыСостоянийПакетовРабот.Закрыт");
	ТекущиеДанные.НомерКартинкиСостоянияПакетаРабот = 2;
	
	ИзменитьСтатусПакетаРабот(ТекущиеДанные.ПакетРабот, ТекущиеДанные.СтатусПакета);
	
	ПоверитьСтатусТекущегоПакетаРабот();
	
	Для Каждого Авторабота Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		ЗаполнитьЗначенияСвойств(Авторабота, ТекущиеДанные, "СтатусПакета");
		ОбновитьДанныеВТаблицеАвторабот(Авторабота);
	КонецЦикла;
	
КонецПроцедуры // ЗакрытьПакет()

&НаКлиенте
Процедура ПодборАвторабот(Команда)
	
	ПараметрыДействия = Новый Структура;
	
	Если Элементы.ПричиныОбращенияАвтоработы.ТекущаяСтрока <> Неопределено Тогда
		ДанныеОбращения = Объект.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияАвтоработы.ТекущаяСтрока);
		ПараметрыДействия.Вставить("ИдентификаторПричиныОбращения", ДанныеОбращения.ИдентификаторПричиныОбращения);
		ПричиныОбращенияАвтоработыПриАктивизацииСтроки(Элементы.ПричиныОбращенияАвтоработы);
	КонецЕсли;
	
	// Вызываем общий обработчик события
	УправлениеДиалогомАльфаАвтоКлиент.ОткрытьПодборАвторабот(ЭтотОбъект,, Автомобиль, ПараметрыДействия);
	
КонецПроцедуры // ПодборАвторабот()

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	ПараметрыДействия = Новый Структура();
	Если ЗначениеЗаполнено(Объект.СводныйРемонтныйЗаказ) Тогда
		ПараметрыДействия.Вставить("Модель", Объект.СводныйРемонтныйЗаказ);
		ПараметрыДействия.Вставить("ОтборНоменклатурыПоПрименяемости");
	КонецЕсли;
	
	Если Команда.Имя = "ПодборМатериалыЗаказчика" Тогда
		
		ПараметрыДействия.Вставить("НеУстанавливатьОтборНаОстаток", Истина);
		
		УправлениеДиалогомКлиент.ОткрытьПодборНоменклатуры(ЭтотОбъект,,"МатериалыЗаказчика",,, ПараметрыДействия);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОбратногоВызова = Новый Структура;
	
	Если Элементы.ПричиныОбращенияТовары.ТекущаяСтрока <> Неопределено Тогда
		
		ДанныеОбращения = Объект.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияТовары.ТекущаяСтрока);
		ПараметрыОбратногоВызова.Вставить("ИдентификаторПричиныОбращения", ДанныеОбращения.ИдентификаторПричиныОбращения);
		ПричиныОбращенияТоварыПриАктивизацииСтроки(Элементы.ПричиныОбращенияТовары);
		
	КонецЕсли;
	
	ПодборТоваровКлиент.ОткрытьПодборТоваровВДокументАвтосервиса(
		ЭтотОбъект,
		Объект,,
		ПараметрыОбратногоВызова,
		ПараметрыДействия);
	
КонецПроцедуры // ПодборНоменклатуры()

&НаКлиенте
Процедура ПодборПоЗаказам(Команда)
	
	Отборы = Новый Соответствие;
	Отборы.Вставить("Контрагент", Объект.Контрагент);
	Отборы.Вставить("Заказ.Организация", Объект.Организация);
	
	Если Объект.ЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду Тогда
		Отборы.Вставить("Заказ.ДокументОснование", Объект.Ссылка);
	КонецЕсли;
	
	ДопПараметры = Новый Структура();
	Если Элементы.ПричиныОбращенияТовары.ТекущиеДанные <> Неопределено Тогда
		
		ДопПараметры.Вставить(
			"ИдентификаторПричиныОбращения",
			Элементы.ПричиныОбращенияТовары.ТекущиеДанные.ИдентификаторПричиныОбращения);
			
	КонецЕсли;
	
	УправлениеДиалогомКлиент.ОткрытьПодборПоЗаказам(
		ЭтотОбъект,
		"ЗаказНаряд.СКД_ПодборПоЗаказам",
		Отборы,
		"Остаток",
		,
		,
		ДопПараметры);
	
КонецПроцедуры // ПодборПоЗаказам()

&НаКлиенте
Процедура ПодборПричинОбращения(Команда)
	
	ПараметрыОткрытия = Новый Структура("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Истина);
	ПараметрыОткрытия.Вставить("ПараметрВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ПодборПричинОбращения");
	
	ОткрытьФорму("Справочник.ПричиныОбращений.ФормаСписка", ПараметрыОткрытия, ЭтотОбъект, ЭтотОбъект,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРекомендацииНажатие(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Событие", "ВопросЗаписиДокументаДляПодбораРекомендации");
		ДополнительныеПараметры.Вставить("ИмяКоманды", Кнопка.Имя);
		
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Документ еще не записан, загрузка не возможна. Записать документ?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ОткрытьПодборРекомендаций(Кнопка.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеИсполнителейПоУРВ(Команда)
	
	// Найдем текущую автоработу
	Если НЕ (СтрНайти(Команда.Имя, "Все") > 0) Тогда
		ТекущиеДанные = Элементы.Автоработы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана авторабота для установки исполнителей из соответствующего пакета работ'"), Объект.Ссылка);
			Возврат;
		КонецЕсли;
		
		// проверим на субподряд
		Если ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Текущая авторабота по субподряду. Заполнение исполнителей отменено.'"), Объект.Ссылка);
			Возврат;
		КонецЕсли;
		
		// Найдем пакет работ
		ПакетРабот = ТекущиеДанные.ПакетРабот;
		
		Если НЕ ЗначениеЗаполнено(ПакетРабот) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для текущей автоработы не указан пакет работ.'"), Объект.Ссылка);
			Возврат;
		КонецЕсли;
		
	Иначе
		ПакетРабот = Неопределено;
	КонецЕсли;
	
	Если Объект.ИсполнителиОдинаковыеДляВсехРабот Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, Новый Структура("Событие,ПакетРабот", "ПроверкаОдинаковыхИсполнителейПередЗаполнениемПоУРВ", ПакетРабот));
		ПоказатьВопрос(ОбработчикОповещения, НСтр("ru = 'Перед заполнением исполнителей будет изменена настройка ""Единые исполнители"". Продолжить?'"), РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Заполнение исполнителей'"));
		Возврат;
	КонецЕсли;
	
	ПроверкаЗаполненияАвторабот(ПакетРабот);
	
КонецПроцедуры // ЗаполнениеИсполнителейПоУРВ()

&НаКлиенте
Процедура ЗагрузкаИзВнешнихКаталогов(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Автомобиль", Автомобиль);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	ПараметрыДействия = Новый Структура;
	
	Если Элементы.ПричиныОбращенияАвтоработы.ТекущаяСтрока <> Неопределено Тогда
		ДанныеОбращения = Объект.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияАвтоработы.ТекущаяСтрока);
		ПараметрыДействия.Вставить("ИдентификаторПричиныОбращения", ДанныеОбращения.ИдентификаторПричиныОбращения);
		ПричиныОбращенияАвтоработыПриАктивизацииСтроки(Элементы.ПричиныОбращенияАвтоработы);
	КонецЕсли;
	
	АвтосервисКлиент.ЗагрузкаИзВнешнихКаталогов(ЭтотОбъект, ПараметрыФормы, ПараметрыДействия);
	
КонецПроцедуры // ЗагрузкаИзВнешнихКаталогов()

// Обработчик события возникающего на клиенте при нажатии кнопки подменю "Связанные работы".
//
&НаКлиенте
Процедура ЗаполнитьСвязанныеРаботы(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаботы Тогда
		
		ТекущаяПричинаОбращения = Элементы.ПричиныОбращенияАвтоработы.ТекущиеДанные;
		
	Иначе
		
		ТекущаяПричинаОбращения = Элементы.ПричиныОбращенияТовары.ТекущиеДанные;
		
	КонецЕсли;
	
	Если ТекущаяПричинаОбращения <> Неопределено Тогда
		
		КлючСтроки = ТекущаяПричинаОбращения.ИдентификаторПричиныОбращения;
		
	КонецЕсли;
	
	СвязанныеРаботыКлиент.НачатьВыборКомплекснойРаботы(ЭтотОбъект, КлючСтроки, Объект);
	
КонецПроцедуры // ЗаполнитьСвязанныеРаботы()

// Обработчик события возникающего на клиенте при нажатии кнопки подменю "Связанные работы".
//
&НаКлиенте
Процедура ЗаполнитьПоВидуРемонта(Команда)
	
	СвязанныеРаботыКлиент.НачатьЗаполнениеПоВидуРемонта(Объект, ЭтотОбъект);
	
КонецПроцедуры // ЗаполнитьПоВидуРемонта()

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	Если НЕ СформироватьВопросОбОчисткеТабличнойЧасти(Команда.Имя) Тогда
		
		ИмяТабличнойЧасти = ?(НЕ СтрНайти(Команда.Имя, "Автоработы") = 0, "Автоработы", "Товары");
		ОткрытьФормуЗагрузкиИзФайла(ИмяТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при нажатии кнопки "Заполнить деталями из производства".
//
&НаКлиенте
Процедура ЗаполнитьДеталямиИзПроизводства(Команда)
	
	// Сначала зададим вопрос об очитке табличной части
	Если НЕ СформироватьВопросОбОчисткеТабличнойЧасти(Команда.Имя) Тогда
		ЗаполнитьДеталямиИзПроизводстваНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДеталямиИзПроизводства()

// Обработчик события возникающего на клиенте при нажатии кнопки "Заполнить заказными деталями".
//
&НаКлиенте
Процедура ЗаполнитьЗаказнымиДеталями(Команда)
	
	// Сначала зададим вопрос об очитке табличной части
	Если НЕ СформироватьВопросОбОчисткеТабличнойЧасти(Команда.Имя) Тогда
		ЗаполнитьЗаказнымиДеталямиНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЗаказнымиДеталями()

// Обработчик события возникающего на клиенте при нажатии кнопки "Заполнить красками из производства".
//
&НаКлиенте
Процедура ЗаполнитьКраскамиИзПроизводства(Команда)
	
	// Сначала зададим вопрос об очитке табличной части
	Если НЕ СформироватьВопросОбОчисткеТабличнойЧасти(Команда.Имя) Тогда
		ЗаполнитьКраскамиИзПроизводстваНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКраскамиИзПроизводства()

// Обработчик события нажатия кнопки подменю заполнения "Очистить табличную часть".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ОчиститьТабличнуюЧасть(Команда)
	
	СформироватьВопросОбОчисткеТабличнойЧасти(Команда.Имя);
	
КонецПроцедуры // ОчиститьТабличнуюЧасть()

&НаКлиенте
Процедура ПеренестиВРекомендации(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Событие", "ВопросЗаписиДокументаДляПодбораРекомендации");
		ДополнительныеПараметры.Вставить("ИмяКоманды", Команда.Имя);
		
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Документ еще не записан, загрузка не возможна. Записать документ?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Событие", "ВопросУдаленияСтрокПеренесенныхВРекомендации");
	ДополнительныеПараметры.Вставить("ИмяКоманды", Команда.Имя);
	
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Удалить из документа строки, перенесенные в рекомендации?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПодсветка(Команда)
	
	Элементы.ТоварыПодсветка.Пометка = НЕ Элементы.ТоварыПодсветка.Пометка;
	
	ОбновитьПоказателиТоваров(ЭтотОбъект);
	ПоказатьПоказатели(Истина);
	// Взведем признак необходимости выполнить сохранение настроек формы при закрытии
	СохраняемыеВНастройкахДанныеМодифицированы = ИСТИНА;

КонецПроцедуры

&НаКлиенте
Процедура ОтменаВсехЗаказовИРезервов(Команда)
	
	// Запретим выполнение команд, если заказ-наряд в состоянии "Заявка"
	Если Объект.Состояние = ПредопределенноеЗначение("Справочник.ВидыСостоянийЗаказНарядов.Заявка") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Заказ-наряд находится в состоянии ""Заявка"". Нельзя создать движение товаров.'"),
			Объект.Ссылка
		);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидРемонта) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Вид ремонта""'"), Объект.Ссылка, "ВидРемонта");
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОтменаВсехЗаказовИРезервовОповещение", ЭтаФорма);
			ПоказатьВопрос(
			Оповещение,
			НСтр("ru = 'Сохранить заказ-наряд и отменить все заказы и резервы?'"),
			РежимДиалогаВопрос.ДаНет
		);
		
	Иначе
		
		ОтменаВсехЗаказовИРезервовПродолжение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьСтатусыКодовМаркировки(Команда)
	
	ИмяДействия = "ОтправкаЗапросаНаПолучениеТекущихСтатусовМаркировки";
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Действие", ИмяДействия);
	ДополнительныеПараметры.Вставить("КодыМаркировки", ЗаполнитьКодыМаркировкиДляПроверки());
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	ДополнительныеПараметры.Вставить("НеТребуетсяКлючСессии", Ложь);
	ДополнительныеПараметры.Вставить("РазрешенныеСостояния", МаркировкаТоваровКлиент.РазрешенныеСостояния());
	ОбработчикОповещения = Новый ОписаниеОповещения("ПолучитьЗапросЗавершение", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ОбработкаРезультата", ОбработчикОповещения);
	
	МаркировкаТоваровКлиент.ОтправитьПолучитьЗапрос(ЭтотОбъект, Объект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокКодовМаркировки", Результат.Данные.КодыМаркировки);
	ПараметрыФормы.Вставить("ОтображатьСостояния"  , Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр"       , Истина);
	ПараметрыФормы.Вставить("Организация"          , Объект.Организация);
	ПараметрыФормы.Вставить("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	ПараметрыФормы.Вставить("ИдентификаторТовара", ИмяФормы);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	ОткрытьФорму(
		"ОбщаяФорма.ФормаСпискаМаркировок",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереразбитьРаботыПоПакетам(Команда)
	
	ИмяКоманды = Команда.Имя;
	ПереразбитьРаботыПоПакетамНаСервере(ИмяКоманды);
	
	Для Каждого Пакет Из ПакетыРабот.ПолучитьЭлементы() Цикл
		Для Каждого Авторабота Из Пакет.ПолучитьЭлементы() Цикл
			ЗаполнитьЗначенияСвойств(Авторабота, Пакет, "Представление");
			ОбновитьДанныеВТаблицеАвторабот(Авторабота);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПереразбитьРаботыПоПакетамНаСервере(ИмяКоманды)
	
	Если ИмяКоманды = "ПакетыРаботНеРазбивать" Тогда
		Документы.ЗаказНаряд.ПоместитьВсеРаботыВнеПакетов(Объект.Автоработы);
	Иначе
		
		ИмяЗначенияПеречисления = СтрЗаменить(ИмяКоманды, "ПакетыРабот", "");
		
		Документы.ЗаказНаряд.ПоместитьРаботыВПакеты(Объект.Автоработы,
			Объект.ПричиныОбращения,
			Перечисления.УРВ_РежимыРазделенияРаботПоПакетам[ИмяЗначенияПеречисления]
		);
		
	КонецЕсли;
	
	СформироватьДеревоПакетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПозвонитьИлиОтправитьSMS(Команда)
	
	Список = Новый СписокЗначений;
	Список.Добавить("Позвонить", НСтр("ru = 'Позвонить'"),, БиблиотекаКартинок.Позвонить);
	Список.Добавить("ОтправитьSMS", НСтр("ru = 'Отправить SMS...'"),, БиблиотекаКартинок.ОтправитьSMS);
	ОповещениеМеню = Новый ОписаниеОповещения("ПослеВыбораИзМенюТелефон", ЭтотОбъект, Параметры);
	ЭтотОбъект.ПоказатьВыборИзМеню(ОповещениеМеню, Список, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НаписатьПисьмо(Команда)
	
	Если ИспользоватьЭлектроннуюПочтуВШаблонахСообщений() Тогда
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ПоказатьПредупреждение(,
			Нстр("ru = 'Документ еще не записан. Запишите его перед формированием письма.'"));
			Возврат;
		КонецЕсли;
		ДополнительныеПараметры = Новый Структура("ИмяФормыИсточникаСообщения", "Документ.ЗаказНаряд.Форма.ФормаДокумента");
		ШаблоныСообщенийКлиент.СформироватьСообщение(Объект.Ссылка, "Письмо",,, ДополнительныеПараметры); 
	Иначе
	УправлениеКонтактнойИнформациейКлиент.СоздатьЭлектронноеПисьмо("",
		СводныйРемонтныйЗаказ.АдресЭлектроннойПочты,
		ВидКонтактнойИнформацииЭлектроннойПочты,
		ПолучитьКонтакт(Объект.СводныйРемонтныйЗаказ));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзДокументаТовары(Команда)
	
	ПараметрыЗаполнения = Новый Структура;
	ИдентификаторПричиныОбращения = "";
	Если Объект.ПричиныОбращения.Количество() > 0 И НЕ Элементы.ПричиныОбращенияТовары.ТекущаяСтрока = Неопределено Тогда
		ТекущиеДанные = Объект.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияТовары.ТекущаяСтрока);
		ИдентификаторПричиныОбращения = ТекущиеДанные.ИдентификаторПричиныОбращения;
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторПричиныОбращения", ИдентификаторПричиныОбращения);
	Обработчик = Новый ОписаниеОповещения(
		"Подключаемый_ЗагрузитьИзДокументаТовары",
		ЭтотОбъект,
		ДополнительныеПараметры
	);
	
	ДополнительныеПараметры = Новый Структура("ОбработчикОповещения", Обработчик);
	ОписаниеКоманды = Новый Структура("ДополнительныеПараметры", ДополнительныеПараметры);
	ПараметрыЗаполнения.Вставить("ОписаниеКоманды", ОписаниеКоманды);
	
	ЗаполнениеОбъектовАльфаАвтоКлиент.НачатьЗаполнениеИзДокумента(ЭтотОбъект, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзКорзины(Команда)
	
	ПараметрыЗаполнения = Новый Структура;
	ИдентификаторПричиныОбращения = "";
	Если Объект.ПричиныОбращения.Количество() > 0 И НЕ Элементы.ПричиныОбращенияТовары.ТекущаяСтрока = Неопределено Тогда
		ТекущиеДанные = Объект.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияТовары.ТекущаяСтрока);
		ИдентификаторПричиныОбращения = ТекущиеДанные.ИдентификаторПричиныОбращения;
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторПричиныОбращения", ИдентификаторПричиныОбращения);
	Обработчик = Новый ОписаниеОповещения(
		"Подключаемый_ЗагрузитьИзКорзины",
		ЭтотОбъект,
		ДополнительныеПараметры
	);
	
	ДополнительныеПараметры = Новый Структура("ОбработчикОповещения", Обработчик);
	ОписаниеКоманды = Новый Структура("ДополнительныеПараметры", ДополнительныеПараметры);
	ПараметрыЗаполнения.Вставить("ОписаниеКоманды", ОписаниеКоманды);
	
	ЗаполнениеОбъектовАльфаАвтоКлиент.НачатьЗаполнениеИзКорзины(ЭтотОбъект, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьКИ(Команда)
	
	ИмяКоманды = Команда.Имя;
	
	Если ИмяКоманды = "ОбновлятьКИ" И ПроверитьСогласиеНаОбработкуПерсональныхДанных(СводныйРемонтныйЗаказ.Заказчик) Тогда
		
		Если Не РазрешитьВводНесколькихЗначенийТелефона Или Не РазрешитьВводНесколькихЗначенийЭлектроннойПочты Тогда
			Обработчик = Новый ОписаниеОповещения("Подключаемый_ОбновлятьКИ", ЭтотОбъект);
			Если Не РазрешитьВводНесколькихЗначенийТелефона И Не РазрешитьВводНесколькихЗначенийЭлектроннойПочты Тогда
				ВидыКИ = НСтр("ru = 'телефона и адреса электронной почты'");
			ИначеЕсли Не РазрешитьВводНесколькихЗначенийТелефона Тогда
				ВидыКИ = НСтр("ru = 'телефона'");
			Иначе
				ВидыКИ = НСтр("ru = 'адреса электронной почты'");
			КонецЕсли;
			ТекстВопроса = СтрШаблон(
				НСтр("ru = 'Для %1 не настроено хранение нескольких значений.
				|При включении обновления текущие значения в карточке контрагента будут заменены данными из документа. Продолжить?'"),
				ВидыКИ
			);
			
			ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Возврат;
		КонецЕсли;
		
		Подключаемый_ОбновлятьКИ(КодВозвратаДиалога.Да);
		
	Иначе
		Подключаемый_ОбновлятьКИ(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборАвансов(Команда)
	
	УправлениеДиалогомКлиент.ОткрытьПодборАвансов(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ЗначенияПолейКонтактнойИнформацииСервер(Знач Представление, Знач ВидКонтактнойИнформации, Знач Комментарий = Неопределено)
	
	// Создаем новый экземпляр по представлению.
	Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, ВидКонтактнойИнформации);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПроверитьНеобходимостьОбновленияКИ()
	
	УстановитьСвойстваПоляВводаТелефона();
	
	Если ТипЗнч(СводныйРемонтныйЗаказ.Заказчик) = Тип("Строка")
		ИЛИ СводныйРемонтныйЗаказ.Заказчик = Справочники.Контрагенты.ПустаяСсылка() Тогда
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Элементы.АдресЭлектроннойПочты.СписокВыбора.Количество() > 0
		И СводныйРемонтныйЗаказ.АдресЭлектроннойПочты <> "" Тогда
		ЭлектроннаяПочта = Элементы.АдресЭлектроннойПочты.СписокВыбора.НайтиПоЗначению(СводныйРемонтныйЗаказ.АдресЭлектроннойПочты);
		ЭтоНовыйАдрес = (ЭлектроннаяПочта = Неопределено);
	Иначе
		ЭтоНовыйАдрес = (СводныйРемонтныйЗаказ.АдресЭлектроннойПочты <> "");
	КонецЕсли;
	
	Если Элементы.ПредставлениеТелефона.СписокВыбора.Количество() > 0
		И СводныйРемонтныйЗаказ.ПредставлениеТелефона <> "" Тогда
		Телефон = Элементы.ПредставлениеТелефона.СписокВыбора.НайтиПоЗначению(СводныйРемонтныйЗаказ.ПредставлениеТелефона);
		ЭтоНовыйТелефон = (Телефон = Неопределено);
	Иначе
		ЭтоНовыйТелефон = (СводныйРемонтныйЗаказ.ПредставлениеТелефона <> "");
	КонецЕсли;
	
	ЕстьНоваяКИ = ЭтоНовыйАдрес ИЛИ ЭтоНовыйТелефон;
	
	Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Доступность = ЕстьНоваяКИ;
	
	Если НЕ ЕстьНоваяКИ Тогда
		Элементы.ОбновлятьКИ.Пометка   = Ложь;
		Элементы.НеОбновлятьКИ.Пометка = Истина;
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Заголовок = НСтр("ru = 'Не обновлять'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьСогласиеНаОбработкуПерсональныхДанных(Контрагент)
	
	Если ТипЗнч(Контрагент) = Тип("Строка") ИЛИ Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указан контрагент.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ (Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо
		ИЛИ Контрагент.ФормаСобственности  = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Согласие = ЗащитаПерсональныхДанных.ДействующееСогласиеНаОбработкуПерсональныхДанных(
		Контрагент,
		Справочники.Организации.ОрганизацияПоУмолчанию(),
		КонецДня(ТекущаяДатаСеанса())
	);
	
	Если Согласие = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Отсутствует согласие на обработку персональных данных. Запись контактной информации невозможна.'")
		);
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьКолонокоКодАртикул()
	
	// Товары
	ОписаниеНовойКолонкиПроизводитель = РаботаСФормой.ОписаниеНовойКолонкиПроизводитель();
	ОписаниеНовойКолонкиПроизводитель.ТабличнаяЧасть = Элементы.Товары;
	ОписаниеНовойКолонкиПроизводитель.ПоставитьПеред = Элементы.ТоварыАртикул;
	НоваяКолонкаПроизводитель = РаботаСФормой.НоваяКолонкаПроизводитель(ЭтотОбъект, ОписаниеНовойКолонкиПроизводитель);
	
	КолонкиКодАртикулИПроизводитель = Новый Структура();
	КолонкиКодАртикулИПроизводитель.Вставить("Код", Элементы.ТоварыКод);
	КолонкиКодАртикулИПроизводитель.Вставить("Артикул", Элементы.ТоварыАртикул);
	КолонкиКодАртикулИПроизводитель.Вставить("Производитель", НоваяКолонкаПроизводитель);
	РаботаСФормой.НастроитьВидимостьКолонокКодАртикулИПроизводитель(КолонкиКодАртикулИПроизводитель);
	
	// Автоработы
	КолонкиКодАртикулИПроизводитель = Новый Структура();
	КолонкиКодАртикулИПроизводитель.Вставить("Код", Элементы.АвтоработыКод);
	КолонкиКодАртикулИПроизводитель.Вставить("Артикул", Элементы.АвтоработыАртикул);
	РаботаСФормой.НастроитьВидимостьКолонокКодАртикулИПроизводитель(КолонкиКодАртикулИПроизводитель);
	
	// ВспомогательныеАвтоработы
	КолонкиКодАртикулИПроизводитель = Новый Структура();
	КолонкиКодАртикулИПроизводитель.Вставить("Код", Элементы.ВспомогательныеАвтоработыКод);
	КолонкиКодАртикулИПроизводитель.Вставить("Артикул", Элементы.ВспомогательныеАвтоработыАртикул);
	РаботаСФормой.НастроитьВидимостьКолонокКодАртикулИПроизводитель(КолонкиКодАртикулИПроизводитель);
	
	// МатериалыЗаказчика	
	КолонкиКодАртикулИПроизводитель = Новый Структура();
	КолонкиКодАртикулИПроизводитель.Вставить("Код", Элементы.МатериалыЗаказчикаКод);
	КолонкиКодАртикулИПроизводитель.Вставить("Артикул", Элементы.МатериалыЗаказчикаАртикул);
	РаботаСФормой.НастроитьВидимостьКолонокКодАртикулИПроизводитель(КолонкиКодАртикулИПроизводитель);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЗаполнениеОбъектов
&НаКлиенте
Процедура ПослеОбработкиЗаполнения(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ПослеОбработкиЗаполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиЗаполненияНаСервере()
	
	ЗаполнениеОбъектовАльфаАвто.ПослеОбработкиЗаполнения(ЭтотОбъект, Объект);
	ЗаполнениеОбъектовАльфаАвто.УстановитьВидимостьКолонокТЧ(ЭтотОбъект, Объект, "МатериалыЗаказчика");
	
КонецПроцедуры
// Конец ЗаполнениеОбъектов

&НаКлиенте
Процедура Подключаемый_ДекорацияСостояниеОригиналаНажатие()
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовКлиент.ОткрытьМенюВыбораСостояния(ЭтотОбъект, Элементы.ДекорацияСостояниеОригинала);
	//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКлючевыхРеквизитовСостояниеЭДО()
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	ПараметрыПриИзменении = ОбменСКонтрагентами.ПараметрыПриИзмененииКлючевыхРеквизитовЭДО();
	
	ПараметрыПриИзменении.Форма                  = ЭтотОбъект;
	ПараметрыПриИзменении.ДокументСсылка         = Объект.Ссылка;
	ПараметрыПриИзменении.ДокументОбъект         = РеквизитФормыВЗначение("Объект");
	ПараметрыПриИзменении.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПриИзменении.ГруппаСостояниеЭДО     = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПриИзмененииКлючевыхРеквизитовЭДО(ПараметрыПриИзменении);
	
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

// ПростаяЭлектроннаяПодпись
&НаКлиенте
Процедура Подключаемый_ДекорацияЗаявкиНаПодписьПредставлениеНажатие(Элемент)
	
	ДокументыУчетаПЭПКлиент.ЗаявкиНаПодписьПредставлениеНажатие_ФормаДокумента(ЭтотОбъект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРеквизитыПечатиНажатие(Элемент)

	УправлениеПечатьюКлиентАльфаАвто.ОткрытьФормуРедактированияРеквизитовДоставки(ЭтотОбъект); 
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСуммаДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.ПоказатьРасширенныеИтогиОперации(ЭтотОбъект, Элемент);
	
КонецПроцедуры
// Конец Ядро

// СчетаФактуры
&НаКлиенте
Процедура НадписьНалоговыйДокументНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.НалоговыйДокумент)
		И НЕ Объект.Состояние = ПредопределенноеЗначение("Справочник.ВидыСостоянийЗаказНарядов.Закрыт") Тогда
		АвтосервисКлиент.ВопросСозданияСчетФактурыЗаказНаряда(ЭтотОбъект, Объект.Ссылка);
		Возврат;
	КонецЕсли;
	
	УправлениеДиалогомДокументаКлиент.НадписьНалоговыйДокументНажатие(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВзаиморасчетыНажатие(Элемент)
	
	УправлениеДиалогомДокументаКлиент.НадписьВзаиморасчетыНажатие(ЭтотОбъект);
	
КонецПроцедуры
// Конец Ядро

// ПрослеживаемыеТовары
&НаСервере
Процедура ЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара()
	
	УчетПрослеживаемыхТоваровСервер.ЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара(Объект);
	ИменаРеквизитов = УчетПрослеживаемыхТоваровСервер
		.ИменаРеквизитовДляЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара();
	ИменаРеквизитов.ИмяТаблицы = "Автомобили";
	ИменаРеквизитов.ИмяРеквизита = "Автомобиль";
	УчетПрослеживаемыхТоваровСервер.ЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара(Объект,, ИменаРеквизитов);
	
КонецПроцедуры
// Конец СчетаФактуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// Вызываем общий обработчик события настройки параметров выбора
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
	ВидыДоговоров = Справочники.ХозОперации.ПолучитьВидыДоговоров(Объект.ХозОперация);
	Если НЕ Элементы.Найти("ДоговорВзаиморасчетов") = Неопределено Тогда
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
			Элементы.ДоговорВзаиморасчетов.ПараметрыВыбора,
			"Отбор.ВидДоговора",
			ВидыДоговоров
		);
	КонецЕсли;
	
	ВидыНоменклатуры = Справочники.ХозОперации.ПолучитьВидыНоменклатуры(Объект.ХозОперация);
	Если НЕ Элементы.Найти("ТоварыНоменклатура") = Неопределено Тогда
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
			Элементы.ТоварыНоменклатура.ПараметрыВыбора,
			"Отбор.ВидНоменклатуры",
			ВидыНоменклатуры
		);
	КонецЕсли;
	
	Если Не Элементы.Найти("МатериалыЗаказчикаНоменклатура") = Неопределено Тогда
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
			Элементы.МатериалыЗаказчикаНоменклатура.ПараметрыВыбора,
			"Отбор.ВидНоменклатуры",
			ВидыНоменклатуры
		);
	КонецЕсли;
	
	НастройкаПараметровВыбораСервиснойКампании();
	УправлениеДиалогомДокументаСервер.РасставитьСвязиПараметровВыбораДокументовАванса(ЭтотОбъект);
	
КонецПроцедуры // НастроитьПараметрыВыбораЭлементовФормы()

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	УправлениеДиалогомАльфаАвтоСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	ЭтотОбъект.Элементы.МатериалыЗаказчикаХарактеристикаНоменклатуры.АвтоОтметкаНезаполненного = Истина;
	
	УстановитьЗаголовокНадписиСуммаДокумента();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДоговорВзаиморасчетов", Объект.ДоговорВзаиморасчетов);
	ДополнительныеПараметры.Вставить("Контрагент", Объект.Контрагент);
	
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиВзаиморасчеты(ЭтотОбъект, ДополнительныеПараметры);
	
	ЕстьВзаиморасчеты = Объект.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Платный;
		
	Элементы.СводныйРемонтныйЗаказ.Доступность = НЕ НовыйСводныйЗаказ;
	Элементы.ГруппаСводныйРемонтныйЗаказ.Видимость =
		НЕ ЗначениеЗаполнено(Объект.Ссылка) И АвтоматическиСоздаватьСводныйРемонтныйЗаказ
		И НЕ ЗначениеЗаполнено(Объект.СводныйРемонтныйЗаказ);   
	
	Элементы.ГруппаОбновлениеКИ.Видимость = АвтоматическиСоздаватьСводныйРемонтныйЗаказ;	
		
	Закрыт = Объект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт; 
	
	Элементы.Контрагент.Доступность = ЕстьВзаиморасчеты;
	Элементы.ДоговорВзаиморасчетов.Доступность = ЕстьВзаиморасчеты;
	Элементы.СтраницаЗачетАвансов.Видимость = ЕстьВзаиморасчеты;
	Элементы.НадписьНалоговыйДокумент.Доступность = ЕстьВзаиморасчеты;
	Элементы.ЭтоУниверсальныйДокумент.Доступность = ЕстьВзаиморасчеты;
	
	ЗапрашиватьИсполнителей = ПраваИНастройкиПользователя.Значение("ПодборИсполнителейПриДобавленииАвтоработыВЗаказНаряд", Объект);
	
	// удалим из подменю "Заполнение" "Заполнить из файла"
	КонтрольКоличестваДеталейВПроизводстве = ПраваИНастройкиПользователя.Значение("КонтрольКоличестваДеталейВПроизводстве", Объект);
	
	РедактированиеЦенИСуммВНоменклатурныхТаблицах = ПраваИНастройкиПользователя.Значение(
		"РедактированиеЦенИСуммВНоменклатурныхТаблицах", Объект
	);
	РедактированиеНормВремениИНормочасов = ПраваИНастройкиПользователя.Значение("РедактированиеНормВремениИНормоЧасов", Объект);
	
	Если НЕ РедактированиеЦенИСуммВНоменклатурныхТаблицах Тогда
		Элементы.АвтоработыЦена.Доступность       = Ложь;
		Элементы.АвтоработыСумма.Доступность      = Ложь;
		Элементы.АвтоработыСуммаВсего.Доступность = Ложь;
	КонецЕсли;
	
	Если НЕ РедактированиеНормВремениИНормочасов Тогда
		Элементы.АвтоработыНормочас.Доступность    = Ложь;
		Элементы.АвтоработыКоэффициент.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.НаСебестоимость.Доступность = Объект.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный;
	ДоступноСписаниеТоваровПоСебестоимости = ПраваИНастройкиПользователя.Значение("СписаниеТоваровПоСебестоимости", Объект);
	Элементы.СписаниеТоваровПоСебестоимости.Доступность = ДоступноСписаниеТоваровПоСебестоимости;
	Элементы.СписаниеТоваровПоСебестоимостиВключатьНДС.Доступность = ДоступноСписаниеТоваровПоСебестоимости И Объект.СписаниеТоваровПоСебестоимости;
	
	Элементы.ПричиныОбращенияАвтоработы.Видимость      = ИспользоватьПричиныОбращений;
	Элементы.ПричиныОбращенияТовары.Видимость          = ИспользоватьПричиныОбращений;
	Элементы.ФормаИспользоватьПричиныОбращений.Пометка = ИспользоватьПричиныОбращений;
	
	Элементы.ОписаниеПричиныОбращения.Доступность = (Объект.ПричиныОбращения.Количество() <= 1);
	
	// Установим доступность команды заполнения по виду ремонта
	Элементы.АвтоработыЗаполнитьПоВидуРемонта.Доступность = ПраваИНастройкиПользователя.Значение("РедактированиеРаботЗаказНаряда", Объект) И ЗначениеЗаполнено(Объект.ВидРемонта) И Объект.ВидРемонта.Автоработы.Количество() > 0;
	
	Элементы.АвтоработыЗагрузитьИзФайлаАвтоработы.Видимость = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", Объект);
	Элементы.ТоварыЗагрузитьИзФайлаТовары.Видимость         = Элементы.АвтоработыЗагрузитьИзФайлаАвтоработы.Видимость;
	
	// Обновим информацию об автомобиле
	Элементы.АвтомобильРасширеннаяПодсказка.Заголовок   = Справочники.Автомобили.СформироватьИнформациюАвтомобиля(Объект, Автомобиль);
	
	// Проверим вывод возможность вывода информации по бонусным баллам
	СформироватьПредставлениеБонусныхБаллах();
	Элементы.БонусныеБаллыПредставление.Видимость = ЗначениеЗаполнено(Объект.Карточка.БонуснаяПрограмма);
	
	// Проверим доступность команд заполнения исполнителей
	ЗаписанДокумент = НЕ Объект.Ссылка.Пустая();
	Элементы.АвтоработыЗаполнениеИсполнителейПоУРВВсе.Доступность         = ЗаписанДокумент;
	Элементы.АвтоработыЗаполнениеИсполнителейПоУРВПакетаРабот.Доступность = ЗаписанДокумент;
	
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(Объект.ПричиныОбращения, Объект.Автоработы, Объект.Товары);
	
	Элементы.АвтоработыЗагрузкаИзВнешнихКаталогов.Видимость =
		ПравоДоступа("Просмотр", Метаданные.Обработки.ЗагрузкаИзВнешнихКаталогов);
		
	
	Элементы.КартинкаСводногоРемонтногоЗаказа.Видимость = ПолучитьВидимостьКартинкиСводногоРемонтногоЗаказа();
	
	// Блокировка редактирования табличных частей: Номенклатура и Автоработы,
	// и соответствующие им меню Заполнения и Подбора
	РедактированиеНоменклатуры = ПраваИНастройкиПользователя.Значение("РедактированиеДеталейЗаказНаряда", Объект);
	РедактированиеРабот        = ПраваИНастройкиПользователя.Значение("РедактированиеРаботЗаказНаряда", Объект);
	
	Элементы.Товары.ТолькоПросмотр               = НЕ РедактированиеНоменклатуры;
	Элементы.ТоварыПодменюЗаполнение.Доступность = РедактированиеНоменклатуры;
	Элементы.ТоварыПодменюПодбора.Доступность    = РедактированиеНоменклатуры;
	
	Элементы.Автоработы.ТолькоПросмотр               = НЕ РедактированиеРабот;
	Элементы.АвтоработыПодменюЗаполнение.Доступность = РедактированиеРабот;
	Элементы.АвтоработыПодменюПодбора.Доступность    = РедактированиеРабот;
	
	ЭтоТехОбслуживание = Объект.ВидРемонта.ТехОбслуживание;
	Элементы.СледующееТехобслуживание.Видимость = ЭтоТехОбслуживание;
	Элементы.ГруппаЗапланированноеТО.Видимость = Не ЭтоТехОбслуживание;
	
	НастроитьДоступностьСкидок();
	
	Элементы.ПредставлениеТелефона.РедактированиеТекста = 
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента.ВидРедактирования <> "Диалог";
    Элементы.ПредставлениеТелефона.КнопкаВыбора = 
		НЕ Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента.ВидРедактирования = "ПолеВвода";
	Элементы.ПредставлениеТелефона.КнопкаВыпадающегоСписка = 
		НЕ Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента.ВидРедактирования = "ПолеВвода";
	
	// Настроим доступность кнопки проверки кодов маркировки
	Элементы.ТоварыЗапроситьСтатусыКодовМаркировки.Доступность =
		(НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Состояние")
			<> Справочники.ВидыСостоянийЗаказНарядов.Закрыт);
	
	ЭтоСборкаАвтомобиля = Объект.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.СборкаАвтомобиля;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СтраницаАвтомобили",
		"Видимость",
		ЭтоСборкаАвтомобиля
		ИЛИ Объект.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.КомплектацияАвтомобиля
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СкладКомпании",
		"Видимость",
		ЭтоСборкаАвтомобиля
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АвтомобилиСуммаСписания",
		"Видимость",
		Закрыт
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АвтомобилиСуммаСписанияБезНДС",
		"Видимость",
		Закрыт
	);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	// Вызываем общий обработчик события
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие", "") = "ЗагрузитьЗаказНаряд" Тогда
		Если НЕ ЭтоАдресВременногоХранилища(РезультатОповещения) Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеКЗаполнению = ПолучитьИзВременногоХранилища(РезультатОповещения);
		
		Если ДанныеКЗаполнению.Свойство("Объект") Тогда
			ИдентификаторДела    = ДанныеКЗаполнению.Объект.ИдентификаторДела;
			ИдентификаторЗадания = ДанныеКЗаполнению.Объект.ИдентификаторЗадания;
		КонецЕсли;
		
		// заполняем документ
		РеквизитыКЗаполнению = 
			"СводныйРемонтныйЗаказ,СогласованнаяСумма,БлокироватьПерерасчетСкидок,ВалютаДокумента,КурсДокумента";
		Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ОбновлятьШапкуДокумента", Ложь) Тогда
			РеквизитыКЗаполнению = РеквизитыКЗаполнению
				+ ",Дата,Состояние,ТипЦен,ТипЦенРабот,ВидРемонта,Цех,Контрагент,ДоговорВзаиморасчетов";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Объект, ДанныеКЗаполнению.ЗаказНарядОбъект, РеквизитыКЗаполнению);
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ДополнительныеПараметрыДокументов", ДанныеКЗаполнению.ДополнительныеПараметрыДокументов);
		ПараметрыЗаполнения.Вставить("Объект"                          , ДанныеКЗаполнению.Объект);
		ПараметрыЗаполнения.Вставить("ЗаказНарядОбъект"                , Объект);
		ПараметрыЗаполнения.Вставить("ТаблицаСоответствияАвторабот"    , ДанныеКЗаполнению.ТаблицаСоответствияАвторабот);
		ПараметрыЗаполнения.Вставить("ТаблицаСоответствияТоваров"      , ДанныеКЗаполнению.ТаблицаСоответствияТоваров);
		ПараметрыЗаполнения.Вставить("ДополнительныеКоды"              , ДанныеКЗаполнению.ДополнительныеКоды);
		
		ОбменСAudaPadWeb.ЗаполнитьТабличныеЧастиДокумента(ПараметрыЗаполнения, ЭтотОбъект);
		
		Для Каждого Авторабота Из Объект.Автоработы Цикл
			ДобавитьНовуюАвтоработуВПакет(Авторабота.ПолучитьИдентификатор());
		КонецЦикла;
		
		ОбновитьПоказателиТоваров(ЭтотОбъект);
		ПоказатьПоказатели(Истина);
		
		ИзмененыПакетыРабот = Истина;
		Модифицированность  = Истина;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие", "") = "ПодборПоСпискуЗаказанного"
		И ЭтоАдресВременногоХранилища(РезультатОповещения) Тогда
		
		ПодобранныеТовары = ПолучитьИзВременногоХранилища(РезультатОповещения);
		
		ИдентификаторПричиныОбращения = ПолучитьЗначениеПараметраСтруктуры(
			ДополнительныеПараметры, "ИдентификаторПричиныОбращения", ""
		);
		
		УсловиеПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения");
		Если НЕ ПустаяСтрока(СокрЛП(ИдентификаторПричиныОбращения)) Тогда
			УсловиеПоиска.Вставить("ИдентификаторПричиныОбращения");
		КонецЕсли;
		
		ПараметрыДействия = Неопределено;
		ПараметрыДействия = Документы.ЗаказНаряд.ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
		// Блокировка перерасчета скидок построчно
		ПересчитатьСкидки = Ложь;
		Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеРассчитыватьСкидки", Ложь) Тогда
			ПересчитатьСкидки = Истина;
			ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
		КонецЕсли;
		
		Для Каждого Строка Из ПодобранныеТовары Цикл
			ЗаполнитьЗначенияСвойств(УсловиеПоиска, Строка);
			Если УсловиеПоиска.Свойство("ИдентификаторПричиныОбращения") Тогда
				УсловиеПоиска.ИдентификаторПричиныОбращения = ИдентификаторПричиныОбращения;
			КонецЕсли;
			
			ПодходящиеСтроки = Объект.Товары.НайтиСтроки(УсловиеПоиска);
			Если ПодходящиеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Объект.Товары.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Количество,Коэффициент");
				НоваяСтрока.ИдентификаторПричиныОбращения = ИдентификаторПричиныОбращения;
				
				Документы.ЗаказНаряд.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
				
				// Вызываем общий обработчик изменения реквизитов формы
				УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока, ПараметрыДействия);
			Иначе
				НоваяСтрока = ПодходящиеСтроки[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + Строка.Количество;
				
				Документы.ЗаказНаряд.ТоварыКоличествоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
			КонецЕсли;
		КонецЦикла;
		
		// Пересчет скидок
		Если ПересчитатьСкидки Тогда
			ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
			СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия);
		КонецЕсли;
		
		ОбновитьПоказателиТоваров(ЭтотОбъект);
		ПоказатьПоказатели(Истина);
		
	ИначеЕсли ДополнительныеПараметры = "ПараметрыДокумента" И РезультатОповещения.ИзмененныеРеквизиты.Свойство("Дата") Тогда
		
		// Заполним скидками по бонусам
		ПерерасчетСуммыСкидкиБонусами();
		ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(ЭтотОбъект);   
	ИначеЕсли
		ДополнительныеПараметры = "ПараметрыДокумента"
		И (РезультатОповещения.ИзмененныеРеквизиты.Свойство("ТипЦен")
			Или РезультатОповещения.ИзмененныеРеквизиты.Свойство("ТипЦенРабот"))
	Тогда 
		
		ПроверитьРекомендацииПоАвтомобилю(Истина, Истина);
		
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	// Вызываем общий обработчик события в контексте клиента
	Продолжать = УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(
		ЭтотОбъект,
		РезультатОповещения,
		ДополнительныеПараметры
	);
	Если НЕ Продолжать Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСобытия = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие", "");
	
	Если ДополнительныеПараметры = "ЗаполнениеПоСервиснойКомпании" Тогда
		
		Вопросы = РезультатОповещения.КоллекцияОпераций;
		
		ПараметрыЗаполнения = Новый Структура();
		Для Каждого Вопрос Из Вопросы Цикл
			Если Вопрос.Ключ = "ТребуетсяУстановкаВидаРемонта" Тогда
					ПараметрыЗаполнения.Вставить("ТребуетсяУстановкаВидаРемонта", ВРег(Вопрос.Значение) = "ДА");
			КонецЕсли;
		КонецЦикла;
		
		ДругиеИсточники = Новый Массив;
		ДругиеИсточники.Добавить(Объект.СервиснаяКампания);
		Если ПараметрыЗаполнения.Свойство("ТребуетсяУстановкаВидаРемонта") Тогда
			ЗаполнитьПоСервиснойКомпании(ПараметрыЗаполнения);
			СвязанныеРаботыКлиент.НачатьЗаполнениеПоВидуРемонта(Объект, ЭтотОбъект, ДополнительныеПараметры, ДругиеИсточники);
		Иначе
			ПараметрыОткрытия = Новый Структура("Автомобиль", Автомобиль);
			СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(Объект, Объект.СервиснаяКампания, ЭтотОбъект, ПараметрыОткрытия);
		КонецЕсли;
		
		ОбработкаРезультатаВыполненияДействия(ПараметрыЗаполнения);
		УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.Автоработы);
		НастроитьПараметрыВыбораЭлементовФормы();
		
	ИначеЕсли ИмяСобытия = "ВыборСервиснойКомпании" Тогда
		
		Объект.СервиснаяКампания = РезультатОповещения;
		СервиснаяКампанияПриИзменении(Неопределено);
		
		Возврат;
		
	ИначеЕсли ДополнительныеПараметры = "ВопросЗаписиДокумента" Тогда
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			Попытка
				Записать();
			Исключение
				Возврат;
			КонецПопытки;
		Иначе
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ВопросУдаленияСтрокПеренесенныхВРекомендации" Тогда
		ПеренестиРекомендациюАвтомобиля(ДополнительныеПараметры.ИмяКоманды);
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			Если ДополнительныеПараметры.ИмяКоманды = Команды.Найти("ПеренестиАвтоработыВРекомендации").Имя Тогда
				Модифицированность = Истина;
				АвтоработыПередУдалением(Элементы.Автоработы, Ложь, Истина);
			ИначеЕсли ДополнительныеПараметры.ИмяКоманды = Команды.Найти("ПеренестиНоменклатуруВРекомендации").Имя Тогда
				Модифицированность = Истина;
				ТоварыПередУдалением(Элементы.Товары, Ложь, Истина);
			КонецЕсли;
			Возврат;
		Иначе
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ВопросПеренесенияВРекомендацииУдаляемыхСтрок" Тогда
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			ПеренестиРекомендациюАвтомобиля(Команды.Найти("ПеренестиАвтоработыВРекомендации").Имя);
		КонецЕсли;
		
		Модифицированность = Истина;
		АвтоработыПередУдалением(ДополнительныеПараметры.Элемент, Ложь, Истина);
		Возврат;
		
	ИначеЕсли ИмяСобытия = "ВопросПеренесенияВРекомендацииУдаляемыхСтрокТоваров" Тогда
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			ПеренестиРекомендациюАвтомобиля(Команды.Найти("ПеренестиНоменклатуруВРекомендации").Имя);
		КонецЕсли;
		Модифицированность = Истина;
		ТоварыПередУдалением(ДополнительныеПараметры.Элемент, Ложь, Истина);
		Возврат;
		
	ИначеЕсли ИмяСобытия = "ВопросЗаписиДокументаДляПодбораРекомендации" Тогда
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			Попытка
				Записать();
				Если СтрНайти(ДополнительныеПараметры.ИмяКоманды, "Перенести") > 0 Тогда
					ДополнительныеПараметрыПослеВопроса = Новый Структура;
					ДополнительныеПараметрыПослеВопроса.Вставить("Событие", "ВопросУдаленияСтрокПеренесенныхВРекомендации");
					ДополнительныеПараметрыПослеВопроса.Вставить("ИмяКоманды", ДополнительныеПараметры.ИмяКоманды);
					Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ДополнительныеПараметрыПослеВопроса);
					ПоказатьВопрос(Оповещение, НСтр("ru = 'Удалить из документа строки, перенесенные в рекомендации?'"), РежимДиалогаВопрос.ДаНет);
					Возврат;
				Иначе
					ОткрытьПодборРекомендаций(ДополнительныеПараметры.ИмяКоманды);
				КонецЕсли;
			Исключение
				Возврат;
			КонецПопытки;
		Иначе
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПодтверждениеУдаленияПакетаРабот" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да И ДополнительныеПараметры.Свойство("НомерУдаляемойСтроки") Тогда
			Если ДополнительныеПараметры.Свойство("ЭтоГруппа") И ДополнительныеПараметры.ЭтоГруппа Тогда
				СтрокаПакета = ПакетыРабот.НайтиПоИдентификатору(ДополнительныеПараметры.НомерУдаляемойСтроки);
				УдаляемыеСтроки = Новый Массив;
				Для Каждого Строка Из СтрокаПакета.ПолучитьЭлементы() Цикл
					УдаляемыеСтроки.Добавить(Строка);
				КонецЦикла;
				Для Каждого УдаляемаяАвторабота Из УдаляемыеСтроки Цикл
					УдалитьАвтоработуИзПакетаРабот(УдаляемаяАвторабота.ПолучитьИдентификатор());
				КонецЦикла;
				ПакетыРабот.ПолучитьЭлементы().Удалить(СтрокаПакета);
			Иначе
				УдаляемыйПакет = ПакетыРабот.НайтиПоИдентификатору(ДополнительныеПараметры.НомерУдаляемойСтроки).ПолучитьРодителя();
				УдалитьАвтоработуИзПакетаРабот(ДополнительныеПараметры.НомерУдаляемойСтроки);
				ПакетыРабот.ПолучитьЭлементы().Удалить(УдаляемыйПакет);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "ПодборАвторабот" Тогда
		
		МассивАвторабот.Очистить();
		
		ОбработкаРезультатаПодбораАвторабот(РезультатОповещения);
		
		// Связанные автоработы
		СоставОбъектовСвязанныхРабот = Новый Массив;
		Для Каждого Авторабота Из МассивАвторабот Цикл
			СтрокиАвторабот = Объект.Автоработы.НайтиСтроки(Новый Структура("ИдентификаторРаботы", Авторабота.Значение));
			Если СтрокиАвторабот.Количество() > 0 И СоставОбъектовСвязанныхРабот.Найти(СтрокиАвторабот[0]) = Неопределено Тогда
				СоставОбъектовСвязанныхРабот.Добавить(СтрокиАвторабот[0]);
			КонецЕсли;
		КонецЦикла;
		ПараметрыОткрытия = Новый Структура("Автомобиль", Автомобиль);
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(Объект, СоставОбъектовСвязанныхРабот, ЭтотОбъект, ПараметрыОткрытия);
		
		// Сформируем массив строк ТЧ Авторабот, для которых необходимо заполнить исполнителей по результату подбора.
		Если МассивАвторабот.Количество() > 0 Тогда
			СтрокиАвторабот = Объект.Автоработы.НайтиСтроки(Новый Структура("ИдентификаторРаботы", МассивАвторабот[0].Значение));
			Если СтрокиАвторабот.Количество() > 0 Тогда
				Элементы.Автоработы.ТекущаяСтрока = СтрокиАвторабот[0].ПолучитьИдентификатор();
				ЗаполнениеИсполнителей(ЭтотОбъект, Объект);
				МассивАвторабот.Удалить(МассивАвторабот.НайтиПоЗначению(МассивАвторабот[0].Значение));
			КонецЕсли;
		КонецЕсли;
		УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.Автоработы);

	ИначеЕсли ДополнительныеПараметры = "ПодборРекомендаций" Тогда
		
		ОбработкаПодборРекомендаций.Рекомендации.Очистить();
		ОбработкаПодборРекомендаций.Модифицированность = РезультатОповещения.Модифицированность;
		Для Каждого ТекСтрока Из РезультатОповещения.Рекомендации Цикл
			ЗаполнитьЗначенияСвойств(ОбработкаПодборРекомендаций.Рекомендации.Добавить(), ТекСтрока);
		КонецЦикла;
		
		УстановитьЗаголовокНадписиСуммаДокумента();
		
	ИначеЕсли ИмяСобытия = "УстановитьИсполнителейПоПредыдущейРаботе" Тогда
			
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			
			МассивРабот                 = ДополнительныеПараметры.МассивРабот;
			ИсполнителиПредыдущейРаботы = ДополнительныеПараметры.ИсполнителиПредыдущейРаботы;
			
			Для Каждого СтрокаТекущейРаботы Из МассивРабот Цикл
				
				СтрокаИсполнители = "";
				ДанныеРасчетаАвтоработы = АвтосервисКлиент.ПараметрыРасчетаНачисленийАвтоработы(
					Объект,
					СтрокаТекущейРаботы.Значение.ИдентификаторРаботы
				);
				
				Для Каждого ИсполнительПредыдущейРаботы Из ИсполнителиПредыдущейРаботы Цикл
					НовыйИсполнитель = Объект.Исполнители.Добавить();
					НовыйИсполнитель.ИдентификаторРаботы = СтрокаТекущейРаботы.Значение.ИдентификаторРаботы;
					НовыйИсполнитель.Исполнитель         = ИсполнительПредыдущейРаботы.Исполнитель;
					НовыйИсполнитель.Цех                 = ИсполнительПредыдущейРаботы.Цех;
					НовыйИсполнитель.Процент             = ИсполнительПредыдущейРаботы.Процент;
					НовыйИсполнитель.ВидНачисления       = ИсполнительПредыдущейРаботы.ВидНачисления;
					НовыйИсполнитель.СпособРасчета       = ИсполнительПредыдущейРаботы.СпособРасчета;
					НовыйИсполнитель.ПараметрРасчетаНачисления = ИсполнительПредыдущейРаботы.ПараметрРасчетаНачисления;
					
					// Перерасчет суммы начисления
					АвтосервисКлиентСервер.РассчитатьСуммуНачисленияСотрудника(НовыйИсполнитель, ДанныеРасчетаАвтоработы);
					СтрокаИсполнители = СтрокаИсполнители + ?(СтрокаИсполнители = "", "", ", ") + СокрЛП(ИсполнительПредыдущейРаботы.Исполнитель);
				КонецЦикла;
				
				СтрокаТекущейРаботы.Значение.Исполнители = СтрокаИсполнители;
				
			КонецЦикла;
			
		Иначе
			ПодборИсполнителей();
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "ПодборМатериалов" Тогда
		
		АдресВХранилище = РезультатОповещения.Корзина;
		
		СтрокаТабличнойЧасти = Элементы.Автоработы.ТекущиеДанные;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторРаботы) Тогда
			СтрокаТабличнойЧасти.ИдентификаторРаботы = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		Результат = ПолучитьМатериалыИзХранилища(АдресВХранилище, СтрокаТабличнойЧасти.ИдентификаторРаботы);
		
		СтрокаТабличнойЧасти.Материалы = Результат;
		Модифицированность = Истина;
		
	ИначеЕсли ДополнительныеПараметры = "ПодборСубподрядчика" Тогда
		
		Если НЕ РезультатОповещения = Неопределено Тогда
			СтрокаТабличнойЧасти = Элементы.Автоработы.ТекущиеДанные;
			СтрокаТабличнойЧасти.Контрагент = РезультатОповещения.Контрагент;
			СтрокаТабличнойЧасти.ДоговорВзаиморасчетов = РезультатОповещения.ДоговорВзаиморасчетов;
			
			// Сформируем представление
			СубподрядчикТекст = "";
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Контрагент) Тогда
				Если Объект.ИсполнителиОдинаковыеДляВсехРабот Тогда
					РаботаНеПоСубподряду = Неопределено;
					РаботыНеПоСубподряду = Объект.Автоработы.НайтиСтроки(Новый Структура("Контрагент",ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка")));
					Для Каждого СтрокаРабот Из РаботыНеПоСубподряду Цикл
						Если СтрокаРабот.ИдентификаторРаботы <> СтрокаТабличнойЧасти.ИдентификаторРаботы Тогда
							РаботаНеПоСубподряду=СтрокаРабот;
							Прервать;
						КонецЕсли; 
					КонецЦикла; 
					Если РаботаНеПоСубподряду<>Неопределено Тогда
						ИдентификаторТекущейРаботыСтарый=СтрокаТабличнойЧасти.ИдентификаторРаботы;
						ИдентификаторТекущейРаботы=РаботаНеПоСубподряду.ИдентификаторРаботы;
						УправлениеДиалогомАльфаАвтоКлиент.ИсполнителиУстановитьДляВсех(Объект,ИдентификаторТекущейРаботы);
						ИдентификаторТекущейРаботы=ИдентификаторТекущейРаботыСтарый;
					КонецЕсли;
					// Установим представление поля "Исполнители"
					СтрокаИсполнители = "";
					НайденныеСтроки = Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", СтрокаТабличнойЧасти.ИдентификаторРаботы));
					Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
						СтрокаИсполнители = СтрокаИсполнители + ?(СтрокаИсполнители = "", "", ", ") + СокрЛП(ТекущаяСтрока.Исполнитель);
					КонецЦикла;
					СтрокаТабличнойЧасти.Исполнители = СтрокаИсполнители;
				КонецЕсли;
				Если ПустаяСтрока(СтрокаТабличнойЧасти.ПакетРабот) Тогда
					СтрокаТабличнойЧасти.ПакетРабот="00000000-0000-0000-0000-000000000000";
				КонецЕсли;
			Иначе
				ИсполнителиРаботы = Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы",СтрокаТабличнойЧасти.ИдентификаторРаботы));
				Для каждого ИсполнительРаботы Из ИсполнителиРаботы Цикл
					Объект.Исполнители.Удалить(ИсполнительРаботы);
				КонецЦикла;
				СтрокаТабличнойЧасти.ПакетРабот="";
				СтрокаТабличнойЧасти.НомерПакета=0;
				СубподрядчикТекст = СокрЛП(СтрокаТабличнойЧасти.Контрагент);
				СтрокаТабличнойЧасти.Исполнители = "";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорВзаиморасчетов) Тогда
				СубподрядчикТекст=СубподрядчикТекст+" ["+СокрЛП(СтрокаТабличнойЧасти.ДоговорВзаиморасчетов)+"]";
			КонецЕсли;
			СтрокаТабличнойЧасти.Субподряд = СубподрядчикТекст;
			Элементы.АвтоработыУслугиПоСубподряду.Доступность = ЗначениеЗаполнено(СубподрядчикТекст);
			ОбновитьДеревоПакетов = Истина;
			Модифицированность = Истина;
			
			Если ИспользоватьУчетРабочегоВремени Тогда
				
				ИзмененыПакетыРабот = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "ПодборИсполнителей" Тогда
		
		СтрокаТабличнойЧасти = Элементы.Автоработы.ТекущиеДанные;
		СтрокаПричиныОбращения = Элементы.ПричиныОбращенияАвтоработы.ТекущиеДанные;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторРаботы) Тогда
			СтрокаТабличнойЧасти.ИдентификаторРаботы = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		Объект.ИсполнителиОдинаковыеДляВсехРабот = РезультатОповещения.ИсполнителиОдинаковыеДляВсехРабот;
		ИдентификаторПричиныОбращения = "";
		Если СтрокаПричиныОбращения <> Неопределено Тогда
			СтрокаПричиныОбращения.ИсполнителиОдинаковыеВРамкахПричины =
				РезультатОповещения.ИсполнителиОдинаковыеВРамкахПричины;
			Если СтрокаПричиныОбращения.ИсполнителиОдинаковыеВРамкахПричины Тогда
				ИдентификаторПричиныОбращения = СтрокаПричиныОбращения.ИдентификаторПричиныОбращения;
			КонецЕсли;
		КонецЕсли;
		
		АдресИсполнителейВХранилище = РезультатОповещения.АдресИсполнителейВХранилище;
		ПакетРаботАвтоработы = РезультатОповещения.ПакетРабот;
		
		ЗаполнитьТаблицуИсполнителейИзХранилища(
			АдресИсполнителейВХранилище,
			СтрокаТабличнойЧасти.ИдентификаторРаботы,
			ПакетРаботАвтоработы,
			ИдентификаторПричиныОбращения
		);
		
		// Сформируем массив строк ТЧ Авторабот, для которых необходимо заполнить исполнителей по результату подбора.
		Если МассивАвторабот.Количество() > 0 Тогда
			СтрокиАвторабот = Объект.Автоработы.НайтиСтроки(Новый Структура("ИдентификаторРаботы", МассивАвторабот[0].Значение));
			Если СтрокиАвторабот.Количество() > 0 Тогда
				Элементы.Автоработы.ТекущаяСтрока = СтрокиАвторабот[0].ПолучитьИдентификатор();
				ЗаполнениеИсполнителей(ЭтотОбъект, Объект);
				МассивАвторабот.Удалить(МассивАвторабот.НайтиПоЗначению(МассивАвторабот[0].Значение));
			КонецЕсли;
		КонецЕсли;
		
		Модифицированность = Истина;
		
	ИначеЕсли ИмяСобытия = "ПроверкаОдинаковыхИсполнителейПередЗаполнениемПоУРВ" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			Объект.ИсполнителиОдинаковыеДляВсехРабот = Ложь;
			ПроверкаЗаполненияАвторабот(ДополнительныеПараметры.ПакетРабот);
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ИмяСобытия = "ОчиститьИсполнителейПередЗаполнением" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			ПакетРабот = ДополнительныеПараметры.ПакетРабот;
			
			// Очистим исполнителей
			Если ПакетРабот = Неопределено Тогда
				Объект.Исполнители.Очистить();
			Иначе
				АвтоработыПакетаРабот = Объект.Автоработы.НайтиСтроки(Новый Структура("ПакетРабот", ПакетРабот));
				Для Каждого ТекущаяСтрока Из АвтоработыПакетаРабот Цикл
					НайденныеСтроки = Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", ТекущаяСтрока.ИдентификаторРаботы));
					Для Каждого НайденныйЭлемент Из НайденныеСтроки Цикл
						Объект.Исполнители.Удалить(НайденныйЭлемент);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			ЗаполнитьИсполнителейПоУРВ(ПакетРабот);
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ДополнительныеПараметры = "ПараметрыДокумента" И РезультатОповещения.ИзмененныеРеквизиты.Свойство("Дата") Тогда
		
		ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
		
		ДатаПриИзменении(Неопределено);
		
	ИначеЕсли
		ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие", "") = "ЗагрузкаИзВнешнихКаталогов" Тогда
		
		ОбработкаРезультатаЗагрузкиИзВнешнегоКаталога(РезультатОповещения, ДополнительныеПараметры);
		
		// Сформируем массив строк ТЧ Авторабот, для которых необходимо заполнить исполнителей по результату подбора.
		Если МассивАвторабот.Количество() > 0 Тогда
			СтрокиАвторабот = Объект.Автоработы.НайтиСтроки(Новый Структура("ИдентификаторРаботы", МассивАвторабот[0].Значение));
			Если СтрокиАвторабот.Количество() > 0 Тогда
				Элементы.Автоработы.ТекущаяСтрока = СтрокиАвторабот[0].ПолучитьИдентификатор();
				ЗаполнениеИсполнителей(ЭтотОбъект, Объект);
				МассивАвторабот.Удалить(МассивАвторабот.НайтиПоЗначению(МассивАвторабот[0].Значение));
			КонецЕсли;
		КонецЕсли;
		
		ВывестиКоличествоСтрок();
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие") = "ВопросПеренесенияПозицийВДругуюПричинуОбращеий" Тогда
		
		СтрокаПричиныОбращения = ДополнительныеПараметры.Элемент.ТекущиеДанные;
		ИдентификаторПричиныОбращения = СтрокаПричиныОбращения.ИдентификаторПричиныОбращения;
		
		Если РезультатОповещения = "Перенести" Тогда
			
			ДополнительныеПараметры.Вставить("Событие", "ВыборПричиныОбращенияДляПереносаПозиций");
			Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ДополнительныеПараметры);
			
			МассивСсылок = Новый Массив;
			
			Для Каждого ПричинаОбращения Из Объект.ПричиныОбращения Цикл
				Если ПричинаОбращения <> СтрокаПричиныОбращения Тогда
					МассивСсылок.Добавить(ПричинаОбращения.ПричинаОбращения);
				КонецЕсли;
			КонецЦикла;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Ссылка", МассивСсылок);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
			ПараметрыФормы.Вставить("РежимВыбора", Истина);
			
			ОткрытьФорму(
				"Справочник.ПричиныОбращений.ФормаВыбора",
				ПараметрыФормы,
				ЭтотОбъект,
				,
				,
				,
				Оповещение,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
			);
			
		ИначеЕсли РезультатОповещения = "Удалить" Тогда
			
			Объект.ПричиныОбращения.Удалить(СтрокаПричиныОбращения);
			
			Отбор = Новый Структура("ИдентификаторПричиныОбращения", ИдентификаторПричиныОбращения);
			СтрокиУдаляемогоЭлемента = Объект.Автоработы.НайтиСтроки(Отбор);
			
			Для Каждого Строка Из СтрокиУдаляемогоЭлемента Цикл
				Объект.Автоработы.Удалить(Строка);
			КонецЦикла;
			
			СтрокиУдаляемогоЭлемента = Объект.Товары.НайтиСтроки(Отбор);
			
			Для Каждого Строка Из СтрокиУдаляемогоЭлемента Цикл
				Объект.Товары.Удалить(Строка);
			КонецЦикла;
			
			ОбновитьДанныеПослеУдаленияПричиныОбращения(ДополнительныеПараметры.Элемент);
			Модифицированность = Истина;
			
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие") = "ВыборПричиныОбращенияДляПереносаПозиций" Тогда
		
		Если ЗначениеЗаполнено(РезультатОповещения) Тогда
			
			СтрокаПричиныОбращения = ДополнительныеПараметры.Элемент.ТекущиеДанные;
			ИдентификаторПричиныОбращения = СтрокаПричиныОбращения.ИдентификаторПричиныОбращения;
			Объект.ПричиныОбращения.Удалить(СтрокаПричиныОбращения);
			
			Отбор = Новый Структура("ПричинаОбращения", РезультатОповещения);
			НайденныеСтроки = Объект.ПричиныОбращения.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Отбор = Новый Структура("ИдентификаторПричиныОбращения", ИдентификаторПричиныОбращения);
				СтрокиЗаменяемогоЭлемента = Объект.Автоработы.НайтиСтроки(Отбор);
				
				Для Каждого Строка Из СтрокиЗаменяемогоЭлемента Цикл
					Строка.ИдентификаторПричиныОбращения = НайденныеСтроки[0].ИдентификаторПричиныОбращения;
				КонецЦикла;
				
				СтрокиЗаменяемогоЭлемента = Объект.Товары.НайтиСтроки(Отбор);
				
				Для Каждого Строка Из СтрокиЗаменяемогоЭлемента Цикл
					Строка.ИдентификаторПричиныОбращения = НайденныеСтроки[0].ИдентификаторПричиныОбращения;
				КонецЦикла;
				
			КонецЕсли;
			
			ОбновитьДанныеПослеУдаленияПричиныОбращения(ДополнительныеПараметры.Элемент);
			Модифицированность = Истина;
			
		КонецЕсли;
		
		Возврат;
		
	Иначе
		// siniko временно уберем ДекорацияФормы из структуры РезультатОповещения
		Элемент = ПолучитьЗначениеПараметраСтруктуры(РезультатОповещения, "Элемент");
		Если Элемент <> Неопределено Тогда
			РезультатОповещения.Удалить("Элемент");
		КонецЕсли;
		// Обработаем событие в контексте сервера
		ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
		Если Элемент <> Неопределено Тогда
			РезультатОповещения.Вставить("Элемент", Элемент);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолучитьЗначениеПараметраСтруктуры(ПолучитьЗначениеПараметраСтруктуры(РезультатОповещения, "ИзмененныеРеквизиты"), "Дата")) Тогда
		Элементы.ПробегРасширеннаяПодсказка.Заголовок = АвтомобилиКлиентСервер.
			ПредставлениеПредыдущихПробегов(Автомобиль, СформироватьМассивДатПробега(Объект));
	КонецЕсли;
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	// Вызываем общий обработчик проверки необходимости выполнения пересчета табличных частей объекта.
	Если НЕ ПараметрыДействия = Неопределено И ТипЗнч(ПараметрыДействия) = Тип("Структура") Тогда
		ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
		ПараметрыДействия.Вставить("ОбъектЗаполненАвтоработами", Объект.Автоработы.Количество() > 0);
	КонецЕсли;
	АвтосервисКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	
	// Вызов обработчика для определения необходимости заполнения документа по сервисной компании
	АвтосервисКлиент.ПолучитьРазрешенияДляЗаполненияПоСервиснойКомпании(ЭтотОбъект, ПараметрыДействия);
	
	// Заполним исполнителей для добавленных авторабот
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ЗаполнятьИсполнителейРабот", Ложь)
		И ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НовыеАвтоработы") <> Неопределено Тогда
		
		// TODO: Удалить после обновления механизма подбора исполнителей
		МассивАвторабот.ЗагрузитьЗначения(ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НовыеАвтоработы"));
		
		// Сформируем массив строк ТЧ Авторабот, для которых необходимо заполнить исполнителей по результату подбора.
		Если МассивАвторабот.Количество() > 0 Тогда
			ПараметрыОтбора = Новый Структура("ИдентификаторРаботы", МассивАвторабот[0].Значение);
			СтрокиАвторабот = Объект.Автоработы.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиАвторабот.Количество() > 0 Тогда
				Элементы.Автоработы.ТекущаяСтрока = СтрокиАвторабот[0].ПолучитьИдентификатор();
				ЗаполнениеИсполнителей(ЭтотОбъект, Объект);
				МассивАвторабот.Удалить(МассивАвторабот.НайтиПоЗначению(МассивАвторабот[0].Значение));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Активируем строки причин обращения для обновления отбора
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбновитьАктивныеПричиныОбращений", Ложь) Тогда
		
		ПричиныОбращенийКлиент.ОбновитьИдентификаторыТаблиц(Объект);
		ПричиныОбращенияАвтоработыПриАктивизацииСтроки(Элементы.ПричиныОбращенияАвтоработы);
		ПричиныОбращенияТоварыПриАктивизацииСтроки(Элементы.ПричиныОбращенияТовары);
		
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбновитьИдентификаторыТаблиц", Ложь) Тогда
		
		ПричиныОбращенийКлиент.ОбновитьИдентификаторыТаблиц(Объект);
		
	КонецЕсли;
	
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ОбработкаВопросаУдаленияПакета(РезультатОповещения, ДополнительныеПараметры) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		
		ПакетРабот = ДополнительныеПараметры.НовыйРодитель;
		
		Для каждого СтрокаДерева Из ДополнительныеПараметры.ПараметрыПеретаскивания.Значение Цикл
			ПеренестиСтрокуВДеревеПакетовРабот(СтрокаДерева, ПакетРабот);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ОбработкаВопросаУдаленияПакета()

&НаКлиенте
Процедура Подключаемый_ЗагрузкаИзФайлаЗавершение(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РезультатОповещения) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнениеТабличнойЧастиИзФайла(РезультатОповещения);
	
	Если РезультатОповещения.ИмяТабличнойЧасти = "Товары" Тогда
		ОбновитьПоказателиТоваров(ЭтотОбъект);
		УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.Товары);	
	ИначеЕсли РезультатОповещения.ИмяТабличнойЧасти = "Автоработы" Тогда 	
		УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.Автоработы);		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаЗагрузкиИзФайла()

&НаКлиенте
Процедура ОбработкаРезультатаОчисткиТабличнойЧасти(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКоманды        = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ИмяКоманды");
	ИмяТабличнойЧасти = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ИмяТабличнойЧасти");
	СтрокиДляУдаления = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "СтрокиТабличнойЧастиДляУдаления");
	
	Если НЕ ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		
		СтрокиДляУдаления = Новый Массив;
		
		Если НЕ ЗначениеЗаполнено(СтрокиДляУдаления) Тогда
			
			Для Каждого Строка Из Объект[ИмяТабличнойЧасти] Цикл
				
				СтрокиДляУдаления.Добавить(Строка);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// выполним действия необходимые перед удалением.
		Если ИмяТабличнойЧасти = "Автоработы" Тогда
			ОбщегоНазначенияАвтосалонКлиент.УдалитьСопутствующиеСтроки(СтрокиДляУдаления, Объект.Исполнители, "ИдентификаторРаботы");
			ОбщегоНазначенияАвтосалонКлиент.УдалитьСопутствующиеСтроки(СтрокиДляУдаления, Объект.Материалы, "ИдентификаторРаботы");
			
			Если ИспользоватьУчетРабочегоВремени Тогда
				ИзмененыПакетыРабот = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Удаляем строки
		Для Каждого Строка Из СтрокиДляУдаления Цикл
			
			Объект[ИмяТабличнойЧасти].Удалить(Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Продолжим заполнение табличной части
	Если СтрНайти(ИмяКоманды, "ЗагрузитьИзФайла") Тогда
		ОткрытьФормуЗагрузкиИзФайла(ИмяТабличнойЧасти);
	ИначеЕсли СтрНайти(ИмяКоманды, "ЗаполнитьДеталямиИзПроизводства") Тогда
		ЗаполнитьДеталямиИзПроизводстваНаСервере();
	ИначеЕсли СтрНайти(ИмяКоманды, "ЗаполнитьЗаказнымиДеталями") Тогда
		ЗаполнитьЗаказнымиДеталямиНаСервере();
	ИначеЕсли СтрНайти(ИмяКоманды, "ЗаполнитьКраскамиИзПроизводства") Тогда
		ЗаполнитьКраскамиИзПроизводстваНаСервере();
	КонецЕсли;
	
	УстановитьЗаголовокНадписиСуммаДокумента();
	
КонецПроцедуры // ОбработкаРезультатаОчисткиТабличнойЧасти()

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаВыбораТипаДанных(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда
		Элементы.МатериалыЗаказчика.ТекущиеДанные.Номенклатура = Результат;
		Элементы.МатериалыЗаказчика.ТекущиеДанные.Количество   = 1;
		МатериалыЗаказчикаУстановитьВидимостьКолонок();
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("СправочникСсылка.Номенклатура") Тогда
		Элементы.МатериалыЗаказчика.ТекущиеДанные.Номенклатура = Результат;
		Элементы.МатериалыЗаказчика.ТекущиеДанные.Количество   = 1;
		МатериалыЗаказчикаУстановитьВидимостьКолонок();
		МатериалыЗаказчикаНоменклатураПриИзмененииНаСервере();
		Возврат;
	ИначеЕсли Результат.Значение = "Строка" Тогда
		ПоказатьВводСтроки(Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаВыбораТипаДанных", ЭтотОбъект), Строка(Элементы.МатериалыЗаказчика.ТекущиеДанные.Номенклатура), "Номенклатура", 100, Ложь);
		Возврат;
	ИначеЕсли Результат.Значение = "Номенклатура" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		Если ЗначениеЗаполнено(Объект.СводныйРемонтныйЗаказ) Тогда
			ПараметрыФормы.Вставить("Модель", Объект.СводныйРемонтныйЗаказ);
			ПараметрыФормы.Вставить("ОтборНоменклатурыПоПрименяемости");
		КонецЕсли;
		ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора",
					ПараметрыФормы,
					ЭтаФорма,,,,
					Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаВыбораТипаДанных", ЭтотОбъект),
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаВыбораТипаДанных()

&НаКлиенте
Процедура ОбработкаРезультатаВопросаБлокировкиИзменений(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Попытка
			Записать();
		Исключение
			Возврат;
		КонецПопытки;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Прочитать();
	КонецЕсли;
	
	СформироватьБлокировкуОтИзменений();
	
КонецПроцедуры // ОбработкаРезультатаВопросаБлокировкиИзменений()

&НаКлиенте
Процедура СформироватьБлокировкуОтИзменений(РезультатОповещения = Неопределено,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработкаРезультатаБлокировкиИзменений", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаказНаряд", Объект.Ссылка);
	
	ОткрытьФорму(
		"РегистрСведений.БлокировкаЗаказНарядов.Форма.ФормаБлокировкиИзменений",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры // СформироватьБлокировкуОтИзменений()

&НаКлиенте
Процедура ОбработкаРезультатаБлокировкиИзменений(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаБлокировкиИзменений();
	
	Элементы.КартинкаРекомендации.Доступность = НЕ ЭтотОбъект.ТолькоПросмотр;
	
КонецПроцедуры // ОбработкаРезультатаБлокировкиИзменений()

&НаКлиенте
Процедура ВводСогласованнойСуммыЗавершение(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СогласованнаяСумма = РезультатОповещения;
	УстановитьЗаголовокНадписиСуммаДокумента();
	
КонецПроцедуры

// НачалоБлока: Обработка связанных работ.

&НаСервере
Функция ПодборСвязанныхРаботЗавершениеНаСервере(СвязанныеПозиции)
	
	ПараметрыДействия = СвязанныеРаботы.ЗаполнитьСвязаннымиРаботами(СвязанныеПозиции, Объект, ЭтотОбъект);
	
	Если ИспользоватьУчетРабочегоВремени Тогда
		
		Для Каждого Строка Из ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НовыеАвтоработы", Новый Массив) Цикл
			
			ДобавитьНовуюАвтоработуВПакет(Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьПоказателиТоваров(ЭтотОбъект); 
	ПоказатьПоказатели(Истина);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	Возврат ПараметрыДействия;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПодборСвязанныхРаботЗавершение(СвязанныеРаботы, Постобработка=Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СвязанныеРаботы) Тогда
		
		ПараметрыДействия = ПодборСвязанныхРаботЗавершениеНаСервере(СвязанныеРаботы);
		ПараметрыДействия.Вставить("ОбновитьАктивныеПричиныОбращений", Истина);
		
	КонецЕсли;
	
	СвязанныеРаботыКлиент.Постобработка(Постобработка);
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры // Подключаемый_ПодборСвязанныхРаботЗавершение()

&НаКлиенте
Процедура Подключаемый_ЗавершениеЗаполнениеПоВидуРемонта(Ответ, ДругиеИсточники) Экспорт
	
	ПараметрыВыполнения = ДругиеИсточники;
	Если ТипЗнч(ПараметрыВыполнения) = Тип("Структура") Тогда
		ОбработкаРезультатаВыполненияДействия(ПараметрыВыполнения);
	ИначеЕсли ТипЗнч(ПараметрыВыполнения) = Тип("Массив")
		И ТипЗнч(ПараметрыВыполнения[ПараметрыВыполнения.Количество() - 1]) = Тип("Структура") Тогда
		ОбработкаРезультатаВыполненияДействия(ПараметрыВыполнения[ПараметрыВыполнения.Количество() - 1]);
	КонецЕсли;
	
	СвязанныеРаботыКлиент.ЗавершениеЗаполнениеПоВидуРемонта(Объект, ЭтотОбъект, Ответ, ДругиеИсточники);
	
	Если НРег(Ответ) = "заполнить_с_очисткой" И ИспользоватьУчетРабочегоВремени Тогда
		ИзмененыПакетыРабот = Истина;
	КонецЕсли;
	
КонецПроцедуры

// КонецБлока: Обработка связанных работ.

// НачалоБлок: Причины обращения.

&НаКлиенте
Процедура Подключаемый_РедактированиеПричиныЗавершение(ДанныеСтроки, КлючСтроки) Экспорт
	
	ПричиныОбращенийКлиент.ЗаполнитьСтрокуПричины(ДанныеСтроки, КлючСтроки, ЭтотОбъект);
	
КонецПроцедуры

// КонецБлока: Причины обращения.

&НаКлиенте
Процедура Подключаемый_ПодборТоваровЗавершение(Корзина, Контекст) Экспорт
	
	Если Корзина = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаПодбораНоменклатуры(Корзина, Контекст);
	
	Если Корзина.Количество() > 0 Тогда
		ПараметрыОткрытия = Новый Структура("Автомобиль", Автомобиль);
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(Объект, Корзина, ЭтотОбъект, ПараметрыОткрытия);	
	КонецЕсли;

	ВывестиКоличествоСтрок(Элементы.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьУслугиПоСубподрядуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = 2 Тогда
		
		ПоказатьЗначение(, ДополнительныеПараметры.Ссылка);
		
	Иначе
		
		ПараметрыФормы = Новый Структура("Контрагент", Элементы.Автоработы.ТекущиеДанные.Контрагент);
		ПараметрыФормы.Вставить("ДоговорВзаиморасчетов", Элементы.Автоработы.ТекущиеДанные.ДоговорВзаиморасчетов);
		ПараметрыФормы.Вставить("ХозОперация", ПредопределенноеЗначение("Справочник.ХозОперации.УслугиПоСубподряду"));
		ПараметрыФормы.Вставить("ДокументОснование", Объект.Ссылка);
		
		ОткрытьФорму("Документ.ПоступлениеТоваров.ФормаОбъекта",
			Новый Структура("ЗначенияЗаполнения", ПараметрыФормы),
			, , , , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры // СоздатьУслугиПоСубподрядуЗавершение()

#КонецОбласти

&НаСервере
Процедура ПредставлениеПодчиненныхТаблицАвторабот()
	
	Для Каждого Строка Из ОБъект.Автоработы Цикл
		
		Отбор = Новый Структура("ИдентификаторРаботы", Строка.ИдентификаторРаботы);
		Материалы = Объект.Материалы.НайтиСтроки(Отбор);
		Исполнители = Объект.Исполнители.НайтиСтроки(Отбор);
		
		Если Материалы.Количество() > 0 Тогда
			
			Представление = Новый Массив;
			
			Для Каждого Материал Из Материалы Цикл
				
				Представление
					.Добавить(СтрШаблон("%1 - %2 (%3)", Материал.Номенклатура, Материал.Количество, Материал.ЕдиницаИзмерения));
				
			КонецЦикла;
			
			Строка.Материалы = СтрСоединить(Представление, "; ");
			
		КонецЕсли;
		
		Если Исполнители.Количество() > 0 Тогда
			
			Представление = Новый Массив;
			
			Для Каждого Исполнитель Из Исполнители Цикл
				
				Представление.Добавить(СтрШаблон("%1 - %2 (%3)", Исполнитель.Исполнитель, Исполнитель.Цех, Исполнитель.Процент));
				
			КонецЦикла;
			
			Строка.Исполнители = СтрСоединить(Представление, "; ");
			
		КонецЕсли;
		
		Представление = Новый Массив;
		
		Если ЗначениеЗаполнено(Строка.Контрагент) Тогда
			
			Представление.Добавить(Строка(Строка.Контрагент));
			
			Если ЗначениеЗаполнено(Строка.ДоговорВзаиморасчетов) Тогда
				
				Представление.Добавить(" [" + Строка(Строка.ДоговорВзаиморасчетов) + "]");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Строка.Субподряд = СтрСоединить(Представление, "; ");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СкладЦеха(Цех)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Цех, "СкладКомпании");
	
КонецФункции

// Заполняет дополнительные реквизиты в тч Автоработы, для работы с пакетами
//
// Параметры:
//	ОбновитьДерево - Булево - После заполнения обновить дерево пакетов автоматически.
//
&НаСервере
Процедура ЗаполнитьИнформациюОПакетахНаСервере()
	
	ИнформацияОПакетах = РегистрыСведений.СоставПакетовРабот.ПолучитьДанныеПакетовДокумента(Объект.Ссылка);
	
	Если ИнформацияОПакетах <> Неопределено И ЕстьРеквизит(ИнформацияОПакетах, "ИдентификаторРаботы") Тогда
		Отбор = Новый Структура("ИдентификаторРаботы");
		Для Каждого Авторабота Из Объект.Автоработы Цикл
			Отбор.ИдентификаторРаботы = Авторабота.ИдентификаторРаботы;
			НайденныеЗначения = ИнформацияОПакетах.НайтиСтроки(Отбор);
			Если НайденныеЗначения.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(Авторабота, НайденныеЗначения[0]);
			КонецЕсли;
		КонецЦикла;
		
		// Зафиксируем текущее состояние пакетов работ.
		ТекущаяИнформацияОПакетах.Очистить();
		Для Каждого ТекущаяСтрока Из ИнформацияОПакетах Цикл
			ЗаполнитьЗначенияСвойств(ТекущаяИнформацияОПакетах.Добавить(), ТекущаяСтрока);
		КонецЦикла;
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю("Неверный формат результат процедуры ""РегистрыСведений.СоставПакетовРабот.ПолучитьДанныеПакетовДокумента"".", Объект.Ссылка);
	КонецЕсли;
	
	СформироватьДеревоПакетов();
	
КонецПроцедуры

// Формирует пакеты для нового документа
//
&НаСервере
Процедура СформироватьНовыеПакеты()
	
	Если РежимРазделенияРаботПоПакетам = Перечисления.УРВ_РежимыРазделенияРаботПоПакетам.НеРазбивать Тогда
		Документы.ЗаказНаряд.ПоместитьВсеРаботыВнеПакетов(Объект.Автоработы);
	Иначе
		Документы.ЗаказНаряд.ПоместитьРаботыВПакеты(Объект.Автоработы, Объект.ПричиныОбращения, РежимРазделенияРаботПоПакетам);
	КонецЕсли;
	
	СформироватьДеревоПакетов();
	
КонецПроцедуры

// Строит дерево на основании данных о пакетах из табличной части "Автоработы"
//
&НаСервере
Процедура СформироватьДеревоПакетов()
	
	ЭлементыПакетовРабот = ПакетыРабот.ПолучитьЭлементы();
	ЭлементыПакетовРабот.Очистить();
	
	ПоляСвертки = Новый Массив();
	ПоляСвертки.Добавить("ПакетРабот");
	ПоляСвертки.Добавить("НомерКартинкиСостоянияПакетаРабот");
	ПоляСвертки.Добавить("Представление");
	ПоляСвертки.Добавить("НомерПакета");
	ПоляСвертки.Добавить("ТекущиеИсполнители");
	ПоляСвертки.Добавить("СтатусПакета");
	ПоляСвертки = СтрСоединить(ПоляСвертки, ",");
	
	// Удалим из рассмотрения автоработы по субподряду
	КопияАвтоработы = Объект.Автоработы.Выгрузить(, ПоляСвертки);
	КопияАвтоработы.Очистить();
	
	Для Каждого ТекущаяСтрока Из Объект.Автоработы Цикл
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Контрагент) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(КопияАвтоработы.Добавить(), ТекущаяСтрока);
		
	КонецЦикла;
	
	КопияАвтоработы.Свернуть(ПоляСвертки);
	
	ЕстьПустойПакет = Ложь;
	
	Для Каждого СтрокаПакета Из КопияАвтоработы Цикл
		
		СтрокаРодитель = ЭлементыПакетовРабот.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРодитель, СтрокаПакета);
		СтрокаРодитель.ЭтоГруппа = Истина;
		ЭлементыРодителя = СтрокаРодитель.ПолучитьЭлементы();
		СтрокиАвтоработПакета = Объект.Автоработы.НайтиСтроки(Новый Структура("ПакетРабот", СтрокаРодитель.ПакетРабот));
		
		Если Не ЕстьПустойПакет Тогда
			ЕстьПустойПакет = РаботаСПакетамиРаботКлиентСервер.ЭтоПустойПакетРабот(СтрокаРодитель.ПакетРабот);
		КонецЕсли;
		
		Для Каждого Авторабота Из СтрокиАвтоработПакета Цикл
			
			Если ЗначениеЗаполнено(Авторабота.Контрагент) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СтрокаДочерняя = ЭлементыРодителя.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДочерняя, Авторабота);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если НЕ ЕстьПустойПакет Тогда
		
		ИнформацияПоПустомуПакету = РаботаСПакетамиРаботПовтИсп.ИнформацияПоПустомуПакету();
		СтрокаРодитель = ЭлементыПакетовРабот.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРодитель, ИнформацияПоПустомуПакету);
		СтрокаРодитель.ЭтоГруппа = Истина;
		ЭлементыПакетовРабот.Сдвинуть(ЭлементыПакетовРабот.Количество()-1, -(ЭлементыПакетовРабот.Количество() - 1));
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает для новой автоработы подходящий пакет работ
//
// Параметры:
//	НомерСтроки - Число - Индекс строки в табличной части "Автоработы".
//
&НаСервере
Процедура ДобавитьНовуюАвтоработуВПакет(НомерСтроки)   
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(НомерСтроки);
	Если ТекущиеДанные = Неопределено ИЛИ НЕ ПустаяСтрока(ТекущиеДанные.ПакетРабот) Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимРазделенияРаботПоПакетам = Перечисления.УРВ_РежимыРазделенияРаботПоПакетам.НеРазбивать Тогда
		Документы.ЗаказНаряд.ПоместитьАвтоработуВнеПакетов(ТекущиеДанные);
	Иначе
		Документы.ЗаказНаряд.ПоместитьАвтоработуВПакет(Объект, ТекущиеДанные, РежимРазделенияРаботПоПакетам);
	КонецЕсли;
	
	ОбновитьДеревоПакетов = Истина;
	
КонецПроцедуры

// Проверка возможности удаления строки из дерева пакетов работ
//
&НаКлиенте
Функция УдалениеПакетаРаботВозможно(ТекущиеДанные)
	ВозможноУдалить = Истина;
	ЭтоГруппаКоличество = ?(ТекущиеДанные.ЭтоГруппа,
		ТекущиеДанные.ПолучитьЭлементы().Количество() > 0,
		ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() < 2) ;	
	Если НЕ ТекущиеДанные.ЭтоГруппа
		И РаботаСПакетамиРаботКлиентСервер.ЭтоПустойПакетРабот(ТекущиеДанные.ПолучитьРодителя().ПакетРабот) Тогда
		
		ВозможноУдалить = Ложь;
	ИначеЕсли ТекущиеДанные.ЭтоГруппа
		И РаботаСПакетамиРаботКлиентСервер.ЭтоПустойПакетРабот(ТекущиеДанные.ПакетРабот) Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru = '""Вне пакетов"" ветка группирующая автоработы для которых не указан пакет работ - ее удаление невозможно'")
			, , НСтр("ru = 'Отмена удаления строки.'"));
			
		ВозможноУдалить = Ложь;
	ИначеЕсли ТекущиеДанные.СтатусПакета = ПредопределенноеЗначение("Справочник.ВидыСостоянийПакетовРабот.Закрыт") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Невозможно удалить закрытый пакет работ.'"), ,
			НСтр("ru = 'Отмена удаления строки.'"));
			
		ВозможноУдалить = Ложь;
	ИначеЕсли ТекущиеДанные.СтатусПакета <> ПредопределенноеЗначение("Справочник.ВидыСостоянийПакетовРабот.НеСтартовал")
		И ЭтоГруппаКоличество Тогда
		
		Если РазрешитьУдалениеПакетовВРаботе Тогда
			ДопПараметры = Новый Структура(
				"Событие,НомерУдаляемойСтроки,ЭтоГруппа",
				"ПодтверждениеУдаленияПакетаРабот",
				ТекущиеДанные.ПолучитьИдентификатор(),
				ТекущиеДанные.ЭтоГруппа);
			
			Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения",
				ЭтотОбъект,
				ДопПараметры);
			
			Если ТекущиеДанные.ЭтоГруппа Тогда
				ТекстВопроса = НСтр("ru = 'По пакету есть отметки сотрудников.
				|Продолжить удаление пакета работ?'");
			Иначе
				ТекстВопроса =
					НСтр("ru = 'Удаляется последняя работа из пакета, по которому есть отметки сотрудников.
					|Продолжить удаление пакета работ?'");
			КонецЕсли;
			
			ПоказатьВопрос(
				Оповещение,
				ТекстВопроса,
				РежимДиалогаВопрос.ДаНет,,
				КодВозвратаДиалога.Нет,
				НСтр("ru = 'Удаление'"));
		Иначе
			Если ТекущиеДанные.ЭтоГруппа Тогда
				ТекстПредупреждения = НСтр("ru = 'Запрещено удалять пакет, по которому уже отмечались сотрудники.'");
			Иначе
				ТекстПредупреждения =
					НСтр("ru = 'Из пакета, по которому есть отметки сотрудников, нельзя удалять последнюю работу.'");
			КонецЕсли;
			
			ПоказатьПредупреждение(, ТекстПредупреждения,, НСтр("ru = 'Удаление'"));
		КонецЕсли;
		
		ВозможноУдалить = Ложь;
	КонецЕсли;
	
	Возврат ВозможноУдалить;
КонецФункции

// Выполняет удаление автоработы из пакета и помещает ее вне пакетов
//
// Параметры:
//	ИндексСтроки - Число - Индекс переносимой строки.
//
&НаКлиенте
Процедура УдалитьАвтоработуИзПакетаРабот(ИндексСтроки)
	// Найдем строку с пустым пакетом
	ПустойПакет = Неопределено;
	Для Каждого Пакет Из ПакетыРабот.ПолучитьЭлементы() Цикл
		Если РаботаСПакетамиРаботКлиентСервер.ЭтоПустойПакетРабот(Пакет.ПакетРабот) Тогда
			ПустойПакет = Пакет;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустойПакет <> Неопределено Тогда
		ПеренестиСтрокуВДеревеПакетовРабот(ИндексСтроки, ПустойПакет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСтрокуВДеревеПакетовРабот(ИндексСтроки, Пакет)
	УдаляемаяСтрока = ПакетыРабот.НайтиПоИдентификатору(ИндексСтроки);
	
	НоваяСтрока = Пакет.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, УдаляемаяСтрока, "Авторабота,ИдентификаторРаботы,ЭтоГруппа");
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Пакет,, "Авторабота,ИдентификаторРаботы,ЭтоГруппа");
	
	ОбновитьДанныеВТаблицеАвторабот(НоваяСтрока);
	
	УдаляемаяСтрока.ПолучитьРодителя().ПолучитьЭлементы().Удалить(УдаляемаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеВТаблицеАвторабот(НоваяСтрока)
	НайденныеСтроки = Объект.Автоработы.НайтиСтроки(Новый Структура("ИдентификаторРаботы", НоваяСтрока.ИдентификаторРаботы));
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], НоваяСтрока);
		ИзмененыПакетыРабот = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПоверитьСтатусТекущегоПакетаРабот()
	
	ТекущаяСтрока = Элементы.ПакетыРабот.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПакет = ПакетыРабот.НайтиПоИдентификатору(ТекущаяСтрока);
	РодительТекущегоПакета = ТекущийПакет.ПолучитьРодителя();
	
	ПроверкаПакета = (ЗапретЗакрытияПакетов И РодительТекущегоПакета = Неопределено И НЕ РаботаСПакетамиРаботКлиентСервер.ЭтоПустойПакетРабот(ТекущийПакет.ПакетРабот));
	
	Элементы.ПакетыРаботВернутьВРаботуПакетРабот.Доступность = (ПроверкаПакета И ТекущийПакет.СтатусПакета = Справочники.ВидыСостоянийПакетовРабот.Закрыт);
	Элементы.ПакетыРаботЗакрытьПакет.Доступность             = (ПроверкаПакета И НЕ ТекущийПакет.СтатусПакета = Справочники.ВидыСостоянийПакетовРабот.Закрыт);
	
КонецПроцедуры // ПоверитьСтатусТекущегоПакетаРабот()

&НаСервере
Функция ПроверитьТекущихИсполнителейПакета(Пакет)
	
	Возврат Документы.ЗаказНаряд.ИсполнителиПоПакету(Пакет) <> "";
	
КонецФункции // ПроверитьТекущихИсполнителейПакета()

&НаСервереБезКонтекста
Процедура ИзменитьСтатусПакетаРабот(ПакетРабот, Статус)
	
	ЗащищенныеФункцииАльфаАвтоУРВСервер.ИзменитьСтатусПакетаРабот(ПакетРабот, Статус);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборРекомендаций(ИмяКоманды)
	
	Если ТипЗнч(Автомобиль) <> Тип("СправочникСсылка.Автомобили") И (НЕ ЗначениеЗаполнено(Автомобиль)) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Автомобиль не выбран.'"), Объект.Ссылка);
		Возврат;
	КонецЕсли; 
	
	// передадим начальные параметры
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Автомобиль",            Автомобиль);
	СтруктураПараметров.Вставить("ТипЦен",                Объект.ТипЦен);
	СтруктураПараметров.Вставить("ТипЦенАвторабот",       Объект.ТипЦенРабот);
	СтруктураПараметров.Вставить("Дата",                  Объект.Дата);
	СтруктураПараметров.Вставить("Контрагент",            Объект.Контрагент);
	СтруктураПараметров.Вставить("ДоговорВзаиморасчетов", Объект.ДоговорВзаиморасчетов);
	СтруктураПараметров.Вставить("Цех",                   Объект.Цех);
	СтруктураПараметров.Вставить("ВидРемонта",            Объект.ВидРемонта);
	СтруктураПараметров.Вставить("Рекомендации",          ОбработкаПодборРекомендаций.Рекомендации); 
	СтруктураПараметров.Вставить("ИмяДокумента", 		  "Документ.ЗаказНаряд");
	
	// Добавим текущую причину обращения если они используются
	ДанныеОбращения = Неопределено;
	Если Элементы.ПричиныОбращенияТовары.ТекущаяСтрока <> Неопределено Тогда
		ДанныеОбращения = Объект.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияТовары.ТекущаяСтрока).ИдентификаторПричиныОбращения;
	КонецЕсли;
	СтруктураПараметров.Вставить("ИдентификаторПричиныОбращения", ДанныеОбращения);
	
	// установим начальный отбор
	СтруктураПараметров.Вставить("РежимВыбора",           Истина);
	СтруктураПараметров.Вставить("ОтборАктуальный",       Истина);
	Если ИмяКоманды="ПодборРекомендацийАвторабот" Тогда
		СтруктураПараметров.Вставить("ОтборРекомендацияАвтоработы",   Истина);
		СтруктураПараметров.Вставить("ОтборРекомендацияНоменклатура", Ложь);
	ИначеЕсли ИмяКоманды="ПодборРекомендацийТоваров" Тогда
		СтруктураПараметров.Вставить("ОтборРекомендацияАвтоработы",   Ложь);
		СтруктураПараметров.Вставить("ОтборРекомендацияНоменклатура", Истина);
	Иначе
		СтруктураПараметров.Вставить("ОтборРекомендацияАвтоработы",   Истина);
		СтруктураПараметров.Вставить("ОтборРекомендацияНоменклатура", Истина);
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ПодборРекомендаций");
	
	ОткрытьФорму("Обработка.ПодборРекомендаций.Форма", СтруктураПараметров, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборИсполнителей()
	
	СтрокаТабличнойЧасти = Элементы.Автоработы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элементы.Автоработы.ТекущиеДанные.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиАвтоработы = Объект.Автоработы.НайтиСтроки(
		Новый Структура("ИдентификаторРаботы", СтрокаТабличнойЧасти.ИдентификаторРаботы));
	ИдентификаторПричины = СтрокиАвтоработы[0].ИдентификаторПричиныОбращения;
	ПричинаОбращения = Объект.ПричиныОбращения.НайтиСтроки(Новый Структура(
											"ИдентификаторПричиныОбращения", 
											ИдентификаторПричины));
	ИспользоватьПричины = ИспользоватьПричиныОбращений И ПричинаОбращения.Количество() > 0;
	
	ИсполнителиОдинаковыеВРамкахПричины = ?(ИспользоватьПричины, 
		ПричинаОбращения[0].ИсполнителиОдинаковыеВРамкахПричины,
		Ложь);
	
	// Инициализируем структуру параметров действия
	ПараметрыДействия = Новый Структура();
	
	ПараметрыРасчетаНачислений = АвтосервисКлиент.ПараметрыРасчетаНачисленийАвтоработы(
		Объект,
		СтрокаТабличнойЧасти.ИдентификаторРаботы);
	
	// Создаем и заполняем структуру параметров открытия формы номенклатуры
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("РежимВыбора",                       ИСТИНА);
	ПараметрыОткрытия.Вставить("Цех",                               Объект.Цех);
	ПараметрыОткрытия.Вставить("ИдентификаторРаботы",               СтрокаТабличнойЧасти.ИдентификаторРаботы);
	ПараметрыОткрытия.Вставить("ЗапрашиватьПроцентУчастия",         Неопределено);
	ПараметрыОткрытия.Вставить("АвтоматическийПроцентУчастия",      Неопределено);
	ПараметрыОткрытия.Вставить("ИсполнителиОдинаковыеДляВсехРабот", Объект.ИсполнителиОдинаковыеДляВсехРабот);
	ПараметрыОткрытия.Вставить("ИдентификаторВладельца",            УникальныйИдентификатор);
	ПараметрыОткрытия.Вставить("ЗаказНаряд",                        Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ИспользоватьПричиныОбращений"       , ИспользоватьПричины);
	ПараметрыОткрытия.Вставить("ИсполнителиОдинаковыеВРамкахПричины", ИсполнителиОдинаковыеВРамкахПричины);
	ПараметрыОткрытия.Вставить("ПараметрыРасчетаНачислений"         , ПараметрыРасчетаНачислений);
	
	АдресИсполнителей = ПоместитьТаблицуИсполнителиВХранилище(Объект, УникальныйИдентификатор, СтрокаТабличнойЧасти.ИдентификаторРаботы);
	ПараметрыОткрытия.Вставить("АдресИсполнителей", АдресИсполнителей);
	
	// Производим открытие формы подбора исполнителей
	ОткрытьФорму("Документ.ЗаказНаряд.Форма.ФормаИсполнителей", ПараметрыОткрытия, ЭтотОбъект,,,, Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ПодборИсполнителей"), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЗаполненияАвторабот(ПакетРабот)
	
	// Проверим наличие подобранных исполнителей в работы
	Если ПакетРабот = Неопределено Тогда
		
		ЗаполненыИсполнители = (Объект.Исполнители.Количество() > 0);
		
	Иначе
		
		ЗаполненыИсполнители = Ложь;
		
		// Найдем автоработы пакета работ
		АвтоработыПакетаРабот = Объект.Автоработы.НайтиСтроки(Новый Структура("ПакетРабот", ПакетРабот));
		
		Для Каждого ТекущаяСтрока Из АвтоработыПакетаРабот Цикл
			ПараметрыОтбора = Новый Структура("ИдентификаторРаботы", ТекущаяСтрока.ИдентификаторРаботы);
			Если (Объект.Исполнители.НайтиСтроки(ПараметрыОтбора).Количество() > 0) Тогда
				ЗаполненыИсполнители = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗаполненыИсполнители Тогда
		
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			ЭтотОбъект,
			Новый Структура("Событие,ПакетРабот", "ОчиститьИсполнителейПередЗаполнением", ПакетРабот)
		);
		Если ПакетРабот = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Заполненные исполнители по автоработам будут очищены. Продолжить?'");
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Заполненные исполнители авторабот по пакету ""%1"" будут очищены. Продолжить?'"),
				Объект.Автоработы.НайтиСтроки(Новый Структура("ПакетРабот", ПакетРабот))[0].Представление
			);
		КонецЕсли;
		
		ПоказатьВопрос(ОбработчикОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет, , , НСтр("ru = 'Заполнение исполнителей'"));
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьИсполнителейПоУРВ(ПакетРабот);
	
КонецПроцедуры // ПроверкаЗаполненияАвторабот()

&НаСервере
Процедура ЗаполнитьИсполнителейПоУРВ(ПакетРабот = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ФактическоеВремя.Исполнитель КАК Исполнитель,
	               |	ФактическоеВремя.Цех КАК Цех,
	               |	СУММА(ВЫБОР
	               |			КОГДА ФактическоеВремя.Продолжительность = 0
	               |				ТОГДА РАЗНОСТЬДАТ(ФактическоеВремя.Период, &Период, СЕКУНДА)
	               |			ИНАЧЕ ФактическоеВремя.Продолжительность
	               |		КОНЕЦ) КАК Продолжительность,
	               |	ФактическоеВремя.ПакетРабот КАК ПакетРабот
	               |ИЗ
	               |	РегистрСведений.ФактическоеВремя КАК ФактическоеВремя
	               |ГДЕ
	               |	ФактическоеВремя.Состояние = ЗНАЧЕНИЕ(Справочник.ВидыОтметокВремени.Работа)
	               |	И ФактическоеВремя.ЗаказНаряд = &ЗаказНаряд
	               |	"+?(ПакетРабот = Неопределено, "", " И ФактическоеВремя.ПакетРабот = &ПакетРабот")+"
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ФактическоеВремя.Исполнитель,
	               |	ФактическоеВремя.Цех,
	               |	ФактическоеВремя.ПакетРабот
	               |ИТОГИ
	               |	СУММА(Продолжительность)
	               |ПО
	               |	ПакетРабот";
	Запрос.УстановитьПараметр("ЗаказНаряд",  Объект.Ссылка);
	Запрос.УстановитьПараметр("ПакетРабот",  ПакетРабот);
	Запрос.УстановитьПараметр("Период",      ТекущаяДатаСеанса());
	
	// получим список Исполнителей
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Выборка.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Нет данных по исполнителям авторабот.'"), Объект.Ссылка);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		ПакетРабот = Выборка.ПакетРабот;
		ОбщаяПродолжительностьРабот = Выборка.Продолжительность;
		НайденныеАвтоработы = Объект.Автоработы.НайтиСтроки(Новый Структура("ПакетРабот", Выборка.ПакетРабот));
		
		Для Каждого ТекущаяСтрока Из НайденныеАвтоработы Цикл
			ВыборкаИсполнителей = Выборка.Выбрать();
			ВсегоПроцентов = 0;
			Пока ВыборкаИсполнителей.Следующий() Цикл
				НоваяСтрока = Объект.Исполнители.Добавить();
				НоваяСтрока.Исполнитель = ВыборкаИсполнителей.Исполнитель;
				НоваяСтрока.Цех         = ВыборкаИсполнителей.Цех;
				НоваяСтрока.Процент     = ВыборкаИсполнителей.Продолжительность / ОбщаяПродолжительностьРабот * 100;
				НоваяСтрока.ИдентификаторРаботы = ТекущаяСтрока.ИдентификаторРаботы;
				ВсегоПроцентов = ВсегоПроцентов + НоваяСтрока.Процент;
			КонецЦикла;
			
			Если ВсегоПроцентов <> 100 Тогда
				НоваяСтрока.Процент = НоваяСтрока.Процент + (100 - ВсегоПроцентов);
			КонецЕсли;
		КонецЦикла;
		
		Автосервис.ЗаполнитьИсполнителямНачисления(
			Объект,
			Объект.Исполнители,
			НайденныеАвтоработы,
			Истина
		);
		
	КонецЦикла;
	
	ПредставлениеПодчиненныхТаблицАвторабот();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаказнымиДеталямиНаСервере()
	
	ПараметрыЗаполнения = Новый Структура;
	
	Если Объект.ПричиныОбращения.Количество() > 0 И НЕ Элементы.ПричиныОбращенияТовары.ТекущаяСтрока = Неопределено Тогда
		ТекущиеДанные = Объект.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияТовары.ТекущаяСтрока);
		ПараметрыЗаполнения.Вставить("ИдентификаторПричиныОбращения", ТекущиеДанные.ИдентификаторПричиныОбращения);
	КонецЕсли;
	
	// Выполним заполнение ТЧ
	Документы.ЗаказНаряд.ТоварыЗаполнитьЗаказнымиДеталями(Объект, ПараметрыЗаполнения);
	
	СформироватьПредставлениеБонусныхБаллах();
	
	ОбновитьПоказателиТоваров(ЭтотОбъект);
	ПоказатьПоказатели(Истина);
КонецПроцедуры // ЗаполнитьЗаказнымиДеталямиНаСервере()

&НаСервере
Процедура ЗаполнитьКраскамиИзПроизводстваНаСервере()
	
	ПараметрыЗаполнения = Новый Структура;
	
	Если Объект.ПричиныОбращения.Количество() > 0 И НЕ Элементы.ПричиныОбращенияТовары.ТекущаяСтрока = Неопределено Тогда
		ТекущиеДанные = Объект.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияТовары.ТекущаяСтрока);
		ПараметрыЗаполнения.Вставить("ИдентификаторПричиныОбращения", ТекущиеДанные.ИдентификаторПричиныОбращения);
	КонецЕсли;
	
	// Выполним заполнение ТЧ
	Документы.ЗаказНаряд.ТоварыЗаполнитьКраскамиИзПроизводства(Объект, ПараметрыЗаполнения);
	
	СформироватьПредставлениеБонусныхБаллах();
	
	ОбновитьПоказателиТоваров(ЭтотОбъект);
	ПоказатьПоказатели(Истина);
	
КонецПроцедуры // ЗаполнитьКраскамиИзПроизводстваНаСервере()

&НаСервере
Процедура ЗаполнениеТабличнойЧастиИзФайла(РезультатОповещения)
	
	// Получим параметры работы
	АдресТаблицаЗагрузкаИЗФайлаВХранилище = РезультатОповещения.АдресТаблицаЗагрузкаИЗФайлаВХранилище;
	ИмяТабличнойЧасти                     = РезультатОповещения.ИмяТабличнойЧасти;
	
	ИдентификаторПричиныОбращения = "";
	Если НЕ Элементы["ПричиныОбращения" + ИмяТабличнойЧасти].ТекущаяСтрока = Неопределено Тогда
		ТекущиеДанные = Объект.ПричиныОбращения.НайтиПоИдентификатору(Элементы["ПричиныОбращения"+ИмяТабличнойЧасти].ТекущаяСтрока);
		ИдентификаторПричиныОбращения = ТекущиеДанные.ИдентификаторПричиныОбращения;
	КонецЕсли;
	
	// Производим заполнение таблицы объекта
	Если ЗначениеЗаполнено(АдресТаблицаЗагрузкаИЗФайлаВХранилище) Тогда
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресТаблицаЗагрузкаИЗФайлаВХранилище);
		Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
			НовСтр = Объект[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаТоваров);
			НовСтр.ИдентификаторПричиныОбращения = ИдентификаторПричиныОбращения;
		КонецЦикла;
		
		// Выполнение необходимых рассчетов в табличных частях
		Если ИмяТабличнойЧасти = "Товары" Тогда 
			ТоварыПослеУдаленияНаСервере();
		ИначеЕсли ИмяТабличнойЧасти = "Автоработы" Тогда	
			АвтоработыПослеУдаленияНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнениеТабличнойЧастиИзФайла()

&НаСервере
Процедура ЗаполнитьДеталямиИзПроизводстваНаСервере()
	
	ПараметрыЗаполнения = Новый Структура;
	
	Если Объект.ПричиныОбращения.Количество() > 0 И НЕ Элементы.ПричиныОбращенияТовары.ТекущаяСтрока = Неопределено Тогда
		ТекущиеДанные = Объект.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияТовары.ТекущаяСтрока);
		ПараметрыЗаполнения.Вставить("ИдентификаторПричиныОбращения", ТекущиеДанные.ИдентификаторПричиныОбращения);
	КонецЕсли;
	
	// Выполним заполнение ТЧ
	Документы.ЗаказНаряд.ТоварыЗаполнитьДеталямиИзПроизводства(Объект, ПараметрыЗаполнения);
	
	ОбновитьПоказателиТоваров(ЭтотОбъект);
	ПоказатьПоказатели(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗагрузкиИзФайла(ИмяТабличнойЧасти)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РучнаяНумерацияКолонокТабличногоДокумента", Ложь);
	ПараметрыФормы.Вставить("РежимЗагрузки",                             3);
	ПараметрыФормы.Вставить("ТабличнаяЧастьИсточника",                   ИмяТабличнойЧасти);
	ПараметрыФормы.Вставить("СсылкаИсточника",                           Объект.Ссылка);
	ПараметрыФормы.Вставить("Контрагент",                                ?(Объект.Свойство("Контрагент"), Объект.Контрагент, Неопределено));
	
	ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_ЗагрузкаИзФайлаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ЗагрузкаДанныхИзТабличногоДокумента.Форма.ФормаПомощник", ПараметрыФормы, ЭтотОбъект,,,, ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОткрытьФормуЗагрузкиИзФайла()

&НаКлиенте
Функция СформироватьВопросОбОчисткеТабличнойЧасти(ИмяКоманды)
	
	// Определим табличную часть, для которой была вызвана данная команда
	ИмяТабличнойЧасти = ?(НЕ СтрНайти(ИмяКоманды, "Автоработы") = 0, "Автоработы", "Товары");
	
	СтрокиДляУдаленияИзТабличнойЧасти = Новый Массив;
	
	Если Объект.ПричиныОбращения.Количество() > 0 И НЕ Элементы["ПричиныОбращения"+ИмяТабличнойЧасти].ТекущиеДанные = Неопределено Тогда
		
		// Вычислим имеются ли строки для соответствующей причины обращения
		ТекущиеДанные = Элементы["ПричиныОбращения"+ИмяТабличнойЧасти].ТекущиеДанные;
		
		НайденныеСтроки = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("ИдентификаторПричиныОбращения", ТекущиеДанные.ИдентификаторПричиныОбращения));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Сформируем массив строк для удаления из табличной части документа
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			СтрокиДляУдаленияИзТабличнойЧасти.Добавить(ТекущаяСтрока);
		КонецЦикла;
		
	ИначеЕсли Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		// Табличная часть пустая и нечего очищать
		Возврат Ложь;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКоманды",        ИмяКоманды);
	ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	
	Если СтрокиДляУдаленияИзТабличнойЧасти.Количество() > 0 Тогда
		ДополнительныеПараметры.Вставить("СтрокиТабличнойЧастиДляУдаления", СтрокиДляУдаленияИзТабличнойЧасти);
	КонецЕсли;
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ОбработкаРезультатаОчисткиТабличнойЧасти", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОбработкаОповещения, НСтр("ru = 'Очистить табличную часть """+ИмяТабличнойЧасти+"""?'"), РежимДиалогаВопрос.ДаНет);
	
	Возврат Истина;
	
КонецФункции // СформироватьВопросОбОчисткеТабличнойЧасти()

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьМассивДатПробега(Объект)
	
	ДатыПробега = Новый Массив;
	ДатыПробега.Добавить(?(ЗначениеЗаполнено(Объект.ДатаНачала), Объект.ДатаНачала, Объект.Дата));
	Если ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		ДатыПробега.Добавить(Объект.ДатаОкончания);
	КонецЕсли;
	
	Возврат ДатыПробега;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьРедактированияАвторов()
	
	НеДоступноРедактированиеАвторов = НЕ ПравоДоступа("Изменение", Метаданные.Документы.ЗаказНаряд);
	ПоляАвторов = Новый Массив;
	ПоляАвторов.Добавить("АвтоработыАвторСтроки");
	ПоляАвторов.Добавить("АвтоработыАвторИзмененияСтроки");
	ПоляАвторов.Добавить("ТоварыАвторСтроки");
	ПоляАвторов.Добавить("ТоварыАвторИзмененияСтроки");
	ПоляАвторов.Добавить("МатериалыЗаказчикаАвторСтроки");
	ПоляАвторов.Добавить("МатериалыЗаказчикаАвторИзмененияСтроки");
	
	Для Каждого Поле Из ПоляАвторов Цикл
		
		ОбщегоНазначенияКлиентСервер
			.УстановитьСвойствоЭлементаФормы(Элементы, Поле, "ТолькоПросмотр", НеДоступноРедактированиеАвторов);
		
	КонецЦикла;
	
КонецПроцедуры

// Производит формирование и установку форматированной строки представления итоговой суммы по операции.
//
// Параметры
//  Форма - УправляемаяФорма - Форма, в которой возникло событие.
//
&НаСервере
Процедура УстановитьЗаголовокНадписиСуммаДокумента()
	
	Если Элементы.НадписьСуммаДокумента.Видимость Тогда
		
		ИтогиОперации = Документы.ЗаказНаряд.РассчитатьИтогиОперации(Объект);
		
		НадписьСуммаДокумента = Новый ФорматированнаяСтрока(
			стрШаблон(
				"Итого: %1 %2 (%3)",
				Формат(ИтогиОперации.СуммаДокумента, "ЧДЦ=2; ЧН=0,00"),
				Объект.ВалютаДокумента,
				Формат(Объект.КурсДокумента, "ЧДЦ=6; ЧН=0,000000")
			)
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСкидок()
	
	ДоступностьСкидок = НЕ (Объект.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный);
	
	// установить доступность колонок скидок в ТЧ Товары
	Элементы.ТоварыСкидкаНаТовар.Доступность       = ДоступностьСкидок;
	Элементы.ТоварыСуммаСкидки.Доступность         = ДоступностьСкидок;
	Элементы.ТоварыПроцентСкидкиСтроки.Доступность = ДоступностьСкидок;
	Элементы.ТоварыСуммаСкидкиСтроки.Доступность   = ДоступностьСкидок;
	Элементы.ТоварыПроцентСкидки.Доступность       = ДоступностьСкидок;
	
	// установить доступность колонок скидок в ТЧ Автоработы	
	Элементы.АвтоработыСкидкаНаТовар.Доступность       = ДоступностьСкидок;
	Элементы.АвтоработыСуммаСкидки.Доступность         = ДоступностьСкидок;
	Элементы.АвтоработыПроцентСкидкиСтроки.Доступность = ДоступностьСкидок;
	Элементы.АвтоработыСуммаСкидкиСтроки.Доступность   = ДоступностьСкидок;
	Элементы.АвтоработыПроцентСкидки.Доступность       = ДоступностьСкидок;
	
	Элементы.МаркетинговаяПрограмма.Доступность = ДоступностьСкидок;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаПодбораАвторабот(ПараметрыПодбора)
	
	// Получим параметры выполнения подбора
	ПодобраннаяАвторабота  = ПолучитьИзВременногоХранилища(ПараметрыПодбора.ПодобранныеАвтоработы);
	ТабличнаяЧастьОбъекта  = Объект.Автоработы;
	
	ИдентификаторПричиныОбращения = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПодбора.ПараметрыДействия, "ИдентификаторПричиныОбращения", Неопределено);
	ЕстьИдентификаторПричиныОбращения = (НЕ ИдентификаторПричиныОбращения = Неопределено);
	
	ПараметрыДействия = Документы.ЗаказНаряд.ПолучитьПараметрыДействия(Объект);
	ПараметрыДействия.Вставить("НеРассчитыватьБонусы", Истина);  
	ПараметрыДействия.Вставить("ПерерасчитыватьКоэффициентАвторабот", Ложь);  
	
	// Заблокируем пересчет скидок
	ПересчитатьСкидки = Ложь;
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеРассчитыватьСкидки", Ложь) Тогда
		ПересчитатьСкидки = Истина;
		ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура(?(ЕстьИдентификаторПричиныОбращения, "ИдентификаторПричиныОбращения,", "")+"Авторабота");
	Если ЕстьИдентификаторПричиныОбращения Тогда
		ПараметрыОтбора.ИдентификаторПричиныОбращения = ИдентификаторПричиныОбращения;
	КонецЕсли;
	
	// Производим перенос подобранной номенклатуры в табличную часть объекта
	Для Каждого СтрокаАвторабот Из ПодобраннаяАвторабота Цикл
			
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаАвторабот);
		НайденныеСтроки = ТабличнаяЧастьОбъекта.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество()=0 Тогда
			
			// Добавим новую строку и заполним ее
			СтрокаТабличнойЧасти = ТабличнаяЧастьОбъекта.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаАвторабот);
			СтрокаТабличнойЧасти.ИдентификаторРаботы = Новый УникальныйИдентификатор;
			
			Если ЕстьИдентификаторПричиныОбращения Тогда
				СтрокаТабличнойЧасти.ИдентификаторПричиныОбращения = ИдентификаторПричиныОбращения;
			КонецЕсли;
			
			// Вызываем обработчик изменения данных объекта
			Документы.ЗаказНаряд.АвтоработыАвтоработаПриИзменении(Объект, СтрокаТабличнойЧасти, ПараметрыДействия);
			
			Если ИспользоватьУчетРабочегоВремени Тогда
				ДобавитьНовуюАвтоработуВПакет(СтрокаТабличнойЧасти.ПолучитьИдентификатор());
				ИзмененыПакетыРабот = Истина;
			КонецЕсли;
			
			МассивАвторабот.Добавить(СтрокаТабличнойЧасти.ИдентификаторРаботы);
			
		Иначе
			
			// Получим строку и увеличим в ней количество
			СтрокаТабличнойЧасти = НайденныеСтроки[0];
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаАвторабот.Количество;
			
			// Вызываем обработчик изменения данных объекта
			Документы.ЗаказНаряд.АвтоработыКоличествоПриИзменении(Объект, СтрокаТабличнойЧасти, ПараметрыДействия);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПересчитатьСкидки Тогда
		ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
		СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "Автоработы");
	КонецЕсли;
	
	ПерерасчетСуммыСкидкиБонусами();
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаРезультатаПодбораАвторабот()

&НаСервере
Процедура ОбработкаРезультатаПодбораНоменклатуры(Корзина, Контекст)
	
	ПодборТоваровСервер.ЗаполнитьТоварыИзКорзиныВДокументахАвтосервиса(Объект, Объект.Товары, Корзина, Контекст);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	ПодборТоваровКлиентСервер.ОбновитьВидимостьХарактеристики(Элементы.ТоварыХарактеристикаНоменклатуры, Объект.Товары);
	УправлениеДиалогомНаСервере();
	ОбновитьПоказателиТоваров(ЭтотОбъект); 
	ПоказатьПоказатели(Истина);
	ПерерасчетСуммыСкидкиБонусами();
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаРезультатаПодбораНоменклатуры()

&НаКлиенте
Процедура ПеренестиРекомендациюАвтомобиля(ИмяКоманды)
	
	Если ТипЗнч(Автомобиль) <> Тип("СправочникСсылка.Автомобили") И (НЕ ЗначениеЗаполнено(Автомобиль)) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Автомобиль не выбран.'"), Объект.Ссылка);
		Возврат;
	КонецЕсли; 
	
	Если ИмяКоманды = "ПеренестиАвтоработыВРекомендации" И Объект.Автоработы.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Таблица ""Автоработы"" не заполнена.'"), Объект.Ссылка);
		Возврат;
	ИначеЕсли ИмяКоманды = "ПеренестиНоменклатуруВРекомендации" И Объект.Товары.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Таблица ""Товары"" не заполнена.'"), Объект.Ссылка);
		Возврат;
	КонецЕсли;
	
	ОтказПеремещения = Ложь;
	
	ЗаписатьНовуюРекомендациюАвтомобиля(ИмяКоманды, ОтказПеремещения);
	
	Если ОтказПеремещения Тогда
		Возврат;
	КонецЕсли;
	
	// передадим начальные параметры
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Автомобиль",            Автомобиль);
	СтруктураПараметров.Вставить("ТипЦен",                Объект.ТипЦен);
	СтруктураПараметров.Вставить("ТипЦенАвторабот",       Объект.ТипЦенРабот);
	СтруктураПараметров.Вставить("Дата",                  Объект.Дата);
	СтруктураПараметров.Вставить("Контрагент",            Объект.Контрагент);
	СтруктураПараметров.Вставить("ДоговорВзаиморасчетов", Объект.ДоговорВзаиморасчетов);
	СтруктураПараметров.Вставить("Цех",                   Объект.Цех);
	СтруктураПараметров.Вставить("ВидРемонта",            Объект.ВидРемонта);
	СтруктураПараметров.Вставить("Рекомендации",          ОбработкаПодборРекомендаций.Рекомендации);
	
	// Добавим текущую причину обращения если они используются
	ДанныеОбращения = Неопределено;
	Если Элементы.ПричиныОбращенияТовары.ТекущаяСтрока <> Неопределено Тогда
		ДанныеОбращения = Объект.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияТовары.ТекущаяСтрока).ИдентификаторПричиныОбращения;
	КонецЕсли;
	СтруктураПараметров.Вставить("ИдентификаторПричиныОбращения", ДанныеОбращения);
	
	// установим начальный отбор
	СтруктураПараметров.Вставить("РежимВыбора",           Истина);
	СтруктураПараметров.Вставить("ОтборАктуальный",       Истина);
	
	Если ИмяКоманды="ПеренестиАвтоработыВРекомендации" Тогда
		СтруктураПараметров.Вставить("ОтборРекомендацияАвтоработы",   Истина);
	ИначеЕсли ИмяКоманды="ПеренестиНоменклатуруВРекомендации" Тогда
		СтруктураПараметров.Вставить("ОтборРекомендацияНоменклатура", Истина);
	КонецЕсли; 
	
КонецПроцедуры // ПеренестиРекомендациюАвтомобиля()

// Функция помещает список материалов во временное хранилище и возвращает адрес 
//
&НаСервереБезКонтекста
Функция ПоместитьМатериалыВХранилище(Знач Объект, УникальныйИдентификатор, ИдентификаторРаботы)
	
	МатериалыРаботы = Объект.Материалы.НайтиСтроки(Новый Структура("ИдентификаторРаботы", ИдентификаторРаботы));
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Материалы.Выгрузить(
		МатериалыРаботы,
		"Номенклатура, Количество, ЕдиницаИзмерения, Коэффициент, ХарактеристикаНоменклатуры, СкладКомпании, ПримечаниеНоменклатураПечать, ПримечаниеНоменклатура"),
		УникальныйИдентификатор
		);
	
КонецФункции // ПоместитьМатериалыВХранилище()

// Функция получает список товаров из временного хранилища
//
&НаСервере
Функция ПолучитьМатериалыИзХранилища(АдресВХранилище, ИдентификаторРаботы)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	Если НЕ ТипЗнч(ТаблицаДляЗагрузки) = Тип("ТаблицаЗначений") Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	МатериалыРаботы = Объект.Материалы.НайтиСтроки(Новый Структура("ИдентификаторРаботы", ИдентификаторРаботы));
	Для Каждого ТекМатериал Из МатериалыРаботы Цикл
		Объект.Материалы.Удалить(ТекМатериал);
	КонецЦикла;
	
	СтрокаМатериалы = "";
	Для Каждого СтрокаТЧ Из ТаблицаДляЗагрузки Цикл
		НоваяСтрока = Объект.Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.ИдентификаторРаботы = ИдентификаторРаботы;
		
		СтрокаМатериалы = СтрокаМатериалы + ?(СтрокаМатериалы = "", "", ", ") + СокрЛП(СтрокаТЧ.Номенклатура) 
			+ " - " + СокрЛП(СтрокаТЧ.Количество) + " (" + СокрЛП(СтрокаТЧ.ЕдиницаИзмерения) + ")";
	КонецЦикла;
	
	Возврат СтрокаМатериалы;
	
КонецФункции // ПолучитьМатериалыИзХранилища()

&НаСервереБезКонтекста
Функция ПоместитьТаблицуИсполнителиВХранилище(Знач Объект, УникальныйИдентификатор, ИдентификаторРаботы, ТолькоДляПросмотра = Ложь)
	
	ИсполнителиРаботы = Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", ИдентификаторРаботы));
	
	КолонкиВывода = "Исполнитель, Цех, Процент";
	
	Если
		Автосервис.ДоступноНачислениеСотрудникам()
		И Не (ПраваИНастройкиПользователя.Значение("УровеньДоступаКНачислениямСотрудникамВЗаказНарядах") = 
			Перечисления.УровеньДоступаКНачислениямСотрудникамВЗаказНарядах.Запрещено
			И ТолькоДляПросмотра)
	Тогда
		
		КолонкиВывода = КолонкиВывода + ", ВидНачисления, СпособРасчета, ПараметрРасчетаНачисления, Начислено";
		
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Исполнители.Выгрузить(ИсполнителиРаботы, КолонкиВывода), УникальныйИдентификатор);
	
КонецФункции

// Функция получает список исполнителей из временного хранилища
//
&НаСервере
Процедура ЗаполнитьТаблицуИсполнителейИзХранилища(АдресВХранилище,
		ИдентификаторРаботы,
		ПакетРаботАвтоработы,
		ИдентификаторПричиныОбращения)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	Если НЕ ТипЗнч(ТаблицаДляЗагрузки) = Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ИсполнителиОдинаковыеДляВсехРабот Тогда
		
		Объект.Исполнители.Очистить();
		
		Для Каждого Авторабота Из Объект.Автоработы Цикл
			
			Если ЗначениеЗаполнено(Авторабота.Контрагент) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаИсполнители = "";
			ДанныеРасчетаАвтоработы = Автосервис.ПараметрыРасчетаНачисленийАвтоработы(Объект, Авторабота);
			Для Каждого ТекущаяСтрока Из ТаблицаДляЗагрузки Цикл
				
				НовыйИсполнитель = Объект.Исполнители.Добавить();
				НовыйИсполнитель.ИдентификаторРаботы = Авторабота.ИдентификаторРаботы;
				НовыйИсполнитель.Исполнитель         = ТекущаяСтрока.Исполнитель;
				НовыйИсполнитель.Процент             = ТекущаяСтрока.Процент;
				НовыйИсполнитель.Цех                 = ТекущаяСтрока.Цех;
				НовыйИсполнитель.ВидНачисления       = ТекущаяСтрока.ВидНачисления;
				НовыйИсполнитель.СпособРасчета       = ТекущаяСтрока.СпособРасчета;
				НовыйИсполнитель.ПараметрРасчетаНачисления = ТекущаяСтрока.ПараметрРасчетаНачисления;
				
				Если НовыйИсполнитель.ИдентификаторРаботы = ИдентификаторРаботы Тогда
					НовыйИсполнитель.Начислено = ТекущаяСтрока.Начислено;
				Иначе
					АвтосервисКлиентСервер.РассчитатьСуммуНачисленияСотрудника(
						НовыйИсполнитель,
						ДанныеРасчетаАвтоработы);
				КонецЕсли;
				
				СтрокаИсполнители = СтрокаИсполнители + ?(СтрокаИсполнители = "", "", ", ") + СокрЛП(ТекущаяСтрока.Исполнитель);
				
			КонецЦикла;
			
			Авторабота.Исполнители = СтрокаИсполнители;
			
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторПричиныОбращения) Тогда
		
		Если Элементы.Автоработы.ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("ИдентификаторПричиныОбращения", ИдентификаторПричиныОбращения);
		ДанныеАвторабот = Объект.Автоработы.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого ТекущаяСтрокаАвторабота Из ДанныеАвторабот Цикл
			
			ПараметрыОтбора = Новый Структура("ИдентификаторРаботы", ТекущаяСтрокаАвторабота.ИдентификаторРаботы);
			ИсполнителиРаботы = Объект.Исполнители.НайтиСтроки(ПараметрыОтбора);
			Для Каждого ТекИсполнитель Из ИсполнителиРаботы Цикл
				Объект.Исполнители.Удалить(ТекИсполнитель);
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ТекущаяСтрокаАвторабота.Контрагент) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаИсполнители = "";
			ДанныеРасчетаАвтоработы = Автосервис.ПараметрыРасчетаНачисленийАвтоработы(Объект, ТекущаяСтрокаАвторабота);
			Для Каждого ТекущаяСтрока Из ТаблицаДляЗагрузки Цикл
				
				НовыйИсполнитель = Объект.Исполнители.Добавить();
				НовыйИсполнитель.ИдентификаторРаботы = ТекущаяСтрокаАвторабота.ИдентификаторРаботы;
				НовыйИсполнитель.Исполнитель         = ТекущаяСтрока.Исполнитель;
				НовыйИсполнитель.Процент             = ТекущаяСтрока.Процент;
				НовыйИсполнитель.Цех                 = ТекущаяСтрока.Цех;
				НовыйИсполнитель.ВидНачисления       = ТекущаяСтрока.ВидНачисления;
				НовыйИсполнитель.СпособРасчета       = ТекущаяСтрока.СпособРасчета;
				НовыйИсполнитель.ПараметрРасчетаНачисления = ТекущаяСтрока.ПараметрРасчетаНачисления;
				
				Если НовыйИсполнитель.ИдентификаторРаботы = ИдентификаторРаботы Тогда
					НовыйИсполнитель.Начислено = ТекущаяСтрока.Начислено;
				Иначе
					АвтосервисКлиентСервер.РассчитатьСуммуНачисленияСотрудника(
						НовыйИсполнитель,
						ДанныеРасчетаАвтоработы);
				КонецЕсли;
				
				СтрокаИсполнители = СтрокаИсполнители + ?(СтрокаИсполнители = "", "", ", ") + СокрЛП(ТекущаяСтрока.Исполнитель);
				
			КонецЦикла;
			
			ТекущаяСтрокаАвторабота.Исполнители = СтрокаИсполнители;
			
		КонецЦикла;
		
	Иначе
		
		Если Элементы.Автоработы.ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПакетРаботАвтоработы) Тогда
			
			ДанныеАвторабот = Объект.Автоработы.НайтиСтроки(Новый Структура("ПакетРабот", ПакетРаботАвтоработы));
			
			Для Каждого ТекущаяСтрокаАвторабота Из ДанныеАвторабот Цикл
				ИсполнителиРаботы = Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", ТекущаяСтрокаАвторабота.ИдентификаторРаботы));
				Для Каждого ТекИсполнитель Из ИсполнителиРаботы Цикл
					Объект.Исполнители.Удалить(ТекИсполнитель);
				КонецЦикла;
			КонецЦикла;
			
		Иначе
			ДанныеАвтоработы = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
			
			ИсполнителиРаботы = Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", ИдентификаторРаботы));
			Для Каждого ТекИсполнитель Из ИсполнителиРаботы Цикл
				Объект.Исполнители.Удалить(ТекИсполнитель);
			КонецЦикла;
			
			ДанныеАвторабот = Новый Массив;
			ДанныеАвторабот.Добавить(ДанныеАвтоработы);
			
		КонецЕсли;
		
		Для Каждого ТекущаяСтрокаАвторабота Из ДанныеАвторабот Цикл
			
			СтрокаИсполнители      = "";
			
			Если ЗначениеЗаполнено(ТекущаяСтрокаАвторабота.Контрагент) Тогда
				Продолжить;
			КонецЕсли;
			ДанныеРасчетаАвтоработы = Автосервис.ПараметрыРасчетаНачисленийАвтоработы(Объект, ТекущаяСтрокаАвторабота);
			Для Каждого ТекущаяСтрока Из ТаблицаДляЗагрузки Цикл
				
				НовыйИсполнитель = Объект.Исполнители.Добавить();
				НовыйИсполнитель.ИдентификаторРаботы = ТекущаяСтрокаАвторабота.ИдентификаторРаботы;
				НовыйИсполнитель.Исполнитель         = ТекущаяСтрока.Исполнитель;
				НовыйИсполнитель.Процент             = ТекущаяСтрока.Процент;
				НовыйИсполнитель.Цех                 = ТекущаяСтрока.Цех;
				НовыйИсполнитель.ВидНачисления       = ТекущаяСтрока.ВидНачисления;
				НовыйИсполнитель.СпособРасчета       = ТекущаяСтрока.СпособРасчета;
				НовыйИсполнитель.ПараметрРасчетаНачисления = ТекущаяСтрока.ПараметрРасчетаНачисления;
				
				Если НовыйИсполнитель.ИдентификаторРаботы = ИдентификаторРаботы Тогда
					НовыйИсполнитель.Начислено = ТекущаяСтрока.Начислено;
				Иначе
					АвтосервисКлиентСервер.РассчитатьСуммуНачисленияСотрудника(
						НовыйИсполнитель,
						ДанныеРасчетаАвтоработы);
				КонецЕсли;
				
				СтрокаИсполнители = СтрокаИсполнители + ?(СтрокаИсполнители = "", "", ", ") + СокрЛП(ТекущаяСтрока.Исполнитель);
				
			КонецЦикла;
			
			ТекущаяСтрокаАвторабота.Исполнители = СтрокаИсполнители;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНовуюРекомендациюАвтомобиля(ИмяКоманды, ОтказПеремещения)
	
	// создадим структуру строки для записи рекомендации
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("Период", Объект.Дата);
	СтруктураСтроки.Вставить("Автомобиль", Автомобиль);
	
	СтруктураСтроки.Вставить("Исполнитель",  Справочники.Пользователи.ПустаяСсылка());
	СтруктураСтроки.Вставить("ЗаказНаряд", Документы.ЗаказНаряд.ПустаяСсылка());
	
	СтруктураСтроки.Вставить("ЗаявкаНаРемонт", Документы.ЗаявкаНаРемонт.ПустаяСсылка());
	
	СтруктураСтроки.Вставить("Автор", Объект.Автор);
	СтруктураСтроки.Вставить("ПричинаОтказа", Справочники.ПричиныОтказаОтОбслуживания.ПустаяСсылка());
	СтруктураСтроки.Вставить("ДатаВыполнения", '00010101');
	СтруктураСтроки.Вставить("Выполнена", Ложь);
	СтруктураСтроки.Вставить("Состояние", Перечисления.СостоянияСобытий.ПустаяСсылка());
	СтруктураСтроки.Вставить("ПериодЗаписи", СтруктураСтроки.Период);
	СтруктураСтроки.Вставить("ДатаАктуальности", '00010101');
	СтруктураСтроки.Вставить("ДатаЗаписи", '00010101');
	СтруктураСтроки.Вставить("Комментарий", "");
	
	Если ИмяКоманды = "ПеренестиАвтоработыВРекомендации" Тогда
		Для Каждого Строка Из Элементы.Автоработы.ВыделенныеСтроки Цикл
			ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Строка);
			СтруктураСтроки.Вставить("Рекомендация", ТекущиеДанные.Авторабота);
			СтруктураСтроки.Вставить("Количество", ТекущиеДанные.Количество);
			СтруктураСтроки.Вставить("Коэффициент", ТекущиеДанные.Коэффициент);

			Если НЕ ЗначениеЗаполнено(СтруктураСтроки.Рекомендация) Тогда
				ОтказПеремещения = Истина;
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнена рекомендация автомобиля. Перемещение рекомендации отменено.'"));
				Возврат;
			КонецЕсли;
			
			СтруктураСтроки.Вставить("РекомендацияЗаписи", СтруктураСтроки.Рекомендация);
			Обработки.ПодборРекомендаций.ЗаписатьСтрокуРекомендации(ОбработкаПодборРекомендаций, СтруктураСтроки);
			
			// выполним обновление объекта обработки подбора рекомендации
			ПроверитьРекомендацииПоАвтомобилю();
			
			СтруктураСтроки.Удалить("Рекомендация");
			СтруктураСтроки.Удалить("Количество");
			СтруктураСтроки.Удалить("РекомендацияЗаписи");
		КонецЦикла;
	ИначеЕсли ИмяКоманды = "ПеренестиНоменклатуруВРекомендации" Тогда
		Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
			ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Строка);
			СтруктураСтроки.Вставить("Рекомендация", 		ТекущиеДанные.Номенклатура);
			СтруктураСтроки.Вставить("Количество", 			ТекущиеДанные.Количество);
			СтруктураСтроки.Вставить("Коэффициент", 		ТекущиеДанные.Коэффициент);
			СтруктураСтроки.Вставить("ЕдиницаИзмерения", 	ТекущиеДанные.ЕдиницаИзмерения);
			
			Если НЕ ЗначениеЗаполнено(СтруктураСтроки.Рекомендация) Тогда
				ОтказПеремещения = Истина;
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнена рекомендация автомобиля. Перемещение рекомендации отменено.'"));
				Возврат;
			КонецЕсли;
			
			СтруктураСтроки.Вставить("РекомендацияЗаписи", СтруктураСтроки.Рекомендация);
			Обработки.ПодборРекомендаций.ЗаписатьСтрокуРекомендации(ОбработкаПодборРекомендаций, СтруктураСтроки);
			
			// выполним обновление объекта обработки подбора рекомендации
			ПроверитьРекомендацииПоАвтомобилю();
			
			СтруктураСтроки.Удалить("Рекомендация");
			СтруктураСтроки.Удалить("Количество");
			СтруктураСтроки.Удалить("РекомендацияЗаписи");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьНовуюРекомендациюАвтомобиля()

// Процедура предлагает заполнить исполнителя при добавлении строки работ
//
&НаКлиенте
Процедура ЗаполнениеИсполнителей(Форма, ЗаказНаряд, МассивРабот = Неопределено)
	
	// скорректируем тип значения массива работ
	Если МассивРабот = Неопределено Тогда
		МассивРабот = Новый СписокЗначений;
	КонецЕсли;
	
	ТекущиеДанные = Форма.Элементы.Автоработы.ТекущиеДанные;
	СтруктураПоиска = Новый Структура("ИдентификаторПричиныОбращения", ТекущиеДанные.ИдентификаторПричиныОбращения);
	
	Если ТекущиеДанные = Неопределено Тогда
		ИдентификаторТекущейРаботы = Неопределено;
		ПричинаОбращенияСтроки = Неопределено;
		КоличествоРаботВПричине = 0;
	Иначе
		ИдентификаторТекущейРаботы = Форма.Элементы.Автоработы.ТекущиеДанные.ИдентификаторРаботы;
		СтрокиПричин = ЗаказНаряд.ПричиныОбращения.НайтиСтроки(СтруктураПоиска);
		Если СтрокиПричин.Количество() = 0 ИЛИ НЕ Форма.ИспользоватьПричиныОбращений Тогда
			ПричинаОбращенияСтроки = Неопределено;
			КоличествоРаботВПричине = 0;
		Иначе
			ПричинаОбращенияСтроки = СтрокиПричин[0];
			КоличествоРаботВПричине = ЗаказНаряд.Автоработы.НайтиСтроки(СтруктураПоиска).Количество();
		КонецЕсли;
	КонецЕсли;
	
	// если массив не передан, значит устанавливаем исполнителя для текущей работы
	Если МассивРабот.Количество() = 0 И (НЕ ТекущиеДанные = Неопределено) Тогда
		МассивРабот.Добавить(ТекущиеДанные);
	КонецЕсли;
	
	// проверим, есть ли работы для заполнения исполнителей
	Если МассивРабот.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Если установлен флаг одинаковых исполнителей для всех работ
	// запрашивать исполнителей не надо, а возьмем их из другой работы.
	Если ЗаказНаряд.ИсполнителиОдинаковыеДляВсехРабот И ЗаказНаряд.Автоработы.Количество()>1 И ЗаказНаряд.Исполнители.Количество()>0 Тогда
		ВремИдентификаторТекущейРаботы = Форма.Элементы.Автоработы.ТекущаяСтрока;
		Для Каждого Работа Из ЗаказНаряд.Автоработы Цикл
			// Найдем работу отличную от текущей
			Если (НЕ ИдентификаторТекущейРаботы = Работа.ИдентификаторРаботы) Тогда
				ИдентификаторТекущейРаботы = Работа.ИдентификаторРаботы;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// И установим исполнителей из нее
		УправлениеДиалогомАльфаАвтоКлиент.ИсполнителиУстановитьДляВсех(ЗаказНаряд, ИдентификаторТекущейРаботы);
		Форма.Элементы.Автоработы.ТекущаяСтрока = ВремИдентификаторТекущейРаботы;
		
	ИначеЕсли ПричинаОбращенияСтроки <> Неопределено
		И КоличествоРаботВПричине > 1
		И ПричинаОбращенияСтроки.ИсполнителиОдинаковыеВРамкахПричины Тогда
		
		ВремИдентификаторТекущейРаботы = Форма.Элементы.Автоработы.ТекущаяСтрока;
		
		АвтоработыПричины = ЗаказНаряд.Автоработы.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого Работа Из АвтоработыПричины Цикл
			// Найдем работу отличную от текущей
			Если (НЕ ИдентификаторТекущейРаботы = Работа.ИдентификаторРаботы) Тогда
				ИдентификаторТекущейРаботы = Работа.ИдентификаторРаботы;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// И установим исполнителей из нее
		УправлениеДиалогомАльфаАвтоКлиент.ИсполнителиУстановитьДляПричиныОбращения(
			ЗаказНаряд, ПричинаОбращенияСтроки, ИдентификаторТекущейРаботы);
		Форма.Элементы.Автоработы.ТекущаяСтрока = ВремИдентификаторТекущейРаботы;
		
		
	Иначе
		
		ИсполнителиРаботы = ЗаказНаряд.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", ИдентификаторТекущейРаботы));
		Если ИсполнителиРаботы.Количество() = 0 И Форма.ЗапрашиватьИсполнителей Тогда
			
			ИндексПредыдущейСтроки = ЗаказНаряд.Автоработы.Индекс(МассивРабот[0]) - 1;
			Если ИндексПредыдущейСтроки < 0 Тогда
				СтрокаПредыдущейРаботы = Неопределено;
			Иначе
				СтрокаПредыдущейРаботы = ЗаказНаряд.Автоработы[ИндексПредыдущейСтроки];
			КонецЕсли;
			// КонецЕсли;
			
			Если НЕ СтрокаПредыдущейРаботы = Неопределено Тогда
				// Получим список исполнителей работы из предыдущей строки
				ИсполнителиПредыдущейРаботы = ЗаказНаряд.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", СтрокаПредыдущейРаботы.ИдентификаторРаботы));
				СтрокаИсполнителейПредыдущейРаботы = "";
				Для Каждого ИсполнительПредыдущейРаботы Из ИсполнителиПредыдущейРаботы Цикл
					Если НЕ ПустаяСтрока(СтрокаИсполнителейПредыдущейРаботы) Тогда
						СтрокаИсполнителейПредыдущейРаботы = СтрокаИсполнителейПредыдущейРаботы+"
							|";
					КонецЕсли; 
					СтрокаИсполнителейПредыдущейРаботы = СтрокаИсполнителейПредыдущейРаботы+СокрЛП(ИсполнительПредыдущейРаботы.Исполнитель)+" - "+Формат(ИсполнительПредыдущейРаботы.Процент,"ЧЦ=5; ЧДЦ=2; ЧН=0,00")+"%";
				КонецЦикла;
				
				Если ИсполнителиПредыдущейРаботы.Количество()>0 Тогда
					// Если у предыдущей работы есть исполнители
					// Зададим вопрос о копировании этих исполнителей.
					Если МассивРабот.Количество() = 1 Тогда
						ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Установить исполнителей для работы <""%1"">
													|как и у работы <""%2"">:
													|""%3""'"), СокрЛП(МассивРабот[0].Значение.Авторабота), СокрЛП(СтрокаПредыдущейРаботы.Авторабота), СтрокаИсполнителейПредыдущейРаботы);
					Иначе
						ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Установить исполнителей для добавленных работ
													|как и у работы <""%1"">:
													|""%2""'"), СокрЛП(СтрокаПредыдущейРаботы.Авторабота), СтрокаИсполнителейПредыдущейРаботы);
					КонецЕсли;
					
					ДополнительныеПараметры = Новый Структура;
					ДополнительныеПараметры.Вставить("МассивРабот",                 МассивРабот);
					ДополнительныеПараметры.Вставить("ИсполнителиПредыдущейРаботы", ИсполнителиПредыдущейРаботы);
					ДополнительныеПараметры.Вставить("Событие",                     "УстановитьИсполнителейПоПредыдущейРаботе");
					
					Оповещение = Новый ОписаниеОповещения(
						"Подключаемый_ОбработкаРезультатаОповещения",
						ЭтотОбъект,
						ДополнительныеПараметры
					);
					ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да, НСтр("ru = 'Заполнение исполнителей'"));
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ПодборИсполнителей();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// процедура передачи вызова в менеджер
//
&НаСервере
Процедура ЗаполнитьПоСервиснойКомпании(ПараметрыЗаполнения)
	
	Документы.ЗаказНаряд.ЗаполнениеПоСервиснойКомпании(Объект, ПараметрыЗаполнения);
	
	// Заполним пакет работ
	Если ИспользоватьУчетРабочегоВремени Тогда
		Для Каждого Авторабота Из Объект.Автоработы Цикл
			Если ПустаяСтрока(Авторабота.ПакетРабот) Тогда
				ДобавитьНовуюАвтоработуВПакет(Авторабота.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Проверка возможности подбора рекомендаций для выбранного автомобиля
//
// Параметры:
//  ПерезаполнениеСпискаРекомендаций - Булево	 - Признак перезаполнения списка рекомендации
//  УстанавливатьВидимостьДекорации	 - Булево	 - Признак установления видимости декорации.
//
&НаСервере
Процедура ПроверитьРекомендацииПоАвтомобилю(ПерезаполнениеСпискаРекомендаций = Истина,
		УстанавливатьВидимостьДекорации = Ложь)
	
	Если УстанавливатьВидимостьДекорации Тогда
		ОбработкаПодборРекомендаций.Автомобиль = Автомобиль;
		ОбъектПодборРекомендаций = РеквизитФормыВЗначение("ОбработкаПодборРекомендаций");
		Элементы.КартинкаРекомендации.Видимость =
			ОбъектПодборРекомендаций.ПроверитьНаличиеРекомендация(Перечисления.СостоянияСобытий.Запланировано);
	КонецЕсли;
	
	Если ПерезаполнениеСпискаРекомендаций Тогда
		ОбработкаПодборРекомендаций.Автомобиль            = Автомобиль;
		ОбработкаПодборРекомендаций.ТипЦен                = Объект.ТипЦен;
		ОбработкаПодборРекомендаций.ТипЦенАвторабот       = Объект.ТипЦенРабот;
		ОбработкаПодборРекомендаций.Дата                  = Объект.Дата;
		ОбработкаПодборРекомендаций.Контрагент            = Объект.Контрагент;
		ОбработкаПодборРекомендаций.ДоговорВзаиморасчетов = Объект.ДоговорВзаиморасчетов;
		ОбработкаПодборРекомендаций.Цех                   = Объект.Цех;
		ОбработкаПодборРекомендаций.ВидРемонта            = Объект.ВидРемонта;
		ОбъектПодборРекомендаций = РеквизитФормыВЗначение("ОбработкаПодборРекомендаций");
		ОбъектПодборРекомендаций.ЗаполнитьРекомендации();
		ОбработкаПодборРекомендаций.Рекомендации.Загрузить(ОбъектПодборРекомендаций.Рекомендации.Выгрузить());
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Состояние", Перечисления.СостоянияСобытий.Запланировано);
	Если ОбработкаПодборРекомендаций.Рекомендации.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
		Элементы.КартинкаРекомендации.Видимость = Ложь;
	Иначе
		Элементы.КартинкаРекомендации.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура делает пересчет планового интервала ТО автомобиля
//
//
&НаКлиенте
Процедура ПересчитатьПлановыеПоказателиПоТО(ПараметрыДействия, ИзменитьПлановуюДатуТО = Ложь)
	
	Если ПараметрыДействия.Свойство("МежсервисныйИнтервалТО") Тогда
		Объект.ДатаСледующегоТО = ДобавитьМесяц(ПараметрыДействия.ДатаОтсчета, ПараметрыДействия.МежсервисныйИнтервалТО);
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьПлановыеПоказателиПоТО()

// Процедура делает пересчет планового интервала ТО автомобиля
//
//
&НаСервере
Процедура ПересчитатьПлановыеПоказателиПоТОНаСервере(ИзменитьПлановуюДатуТО, ПараметрыДействия = Неопределено)
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ТекстПредупреждения", "");
	
	Если Объект.ВидРемонта.ТехОбслуживание И НЕ Автомобиль.Пустая() Тогда
		
		МежсервисныйИнтервалТО = ?(ЗначениеЗаполнено(Автомобиль.ВариантКомплектации.МежсервисныйИнтервалТО),
			Автомобиль.ВариантКомплектации.МежсервисныйИнтервалТО,
			Автомобиль.Модель.МежсервисныйИнтервалТО);
		
		Если МежсервисныйИнтервалТО = 0 Тогда
			ПараметрыДействия.ТекстПредупреждения = НСтр("ru = 'У модели автомобиля не заполнено значение межсервисного интервала'");
		КонецЕсли;
		
		Если ИзменитьПлановуюДатуТО Тогда
			ДатаОтсчета = ?(ЗначениеЗаполнено(Объект.ДатаОкончания), Объект.ДатаОкончания, Объект.Дата);
						
			ПараметрыДействия.Вставить("МежсервисныйИнтервалТО", МежсервисныйИнтервалТО);
			ПараметрыДействия.Вставить("ДатаОтсчета", ДатаОтсчета);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьПлановыеПоказателиПоТОНаСервере()

&НаСервере
Процедура ЗаполнитьИдентификаторыПричинОбращенийАвторабот(ОбъектПричинОбращения=Неопределено)
	
	Если Объект.ПричиныОбращения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПричиныИАвтоработы = ?(ОбъектПричинОбращения = Неопределено, ПричиныОбращенийСлужебный.СоставПричинОбращенийПоЗаказНаряду(Объект.Ссылка), ПричиныОбращенийСлужебный.СоставПричинОбращенийПоЗаказНаряду(ОбъектПричинОбращения));
	
	Для Каждого Авторабота Из Объект.Автоработы Цикл
		НайденныеСтроки = ПричиныИАвтоработы.НайтиСтроки(Новый Структура("Авторабота", Авторабота.ИдентификаторРаботы));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Авторабота.ИдентификаторПричиныОбращения = НайденныеСтроки[0].ПричинаОбращения;
		Иначе
			Авторабота.ИдентификаторПричиныОбращения = Объект.ПричиныОбращения[0].ИдентификаторПричиныОбращения;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаБлокировкиИзменений(Отказ = Ложь)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеБлокировкиИзменений = РегистрыСведений.БлокировкаЗаказНарядов.ПроверкаБлокировкиИзменений(Объект.Ссылка);
	
	Если ДанныеБлокировкиИзменений.Количество() > 0 Тогда
		
		ФормаБлокированаОтИзменений = ФормаБлокированаОтИзменений ИЛИ (Не ТолькоПросмотр);
		ЭтотОбъект.ТолькоПросмотр = Истина;
		Пользователь = ДанныеБлокировкиИзменений[0].Пользователь;
		ТекстовоеОписание = ДанныеБлокировкиИзменений[0].ТекстовоеОписание;
		ДатаСнятияБлокировки = ДанныеБлокировкиИзменений[0].ДатаСнятияБлокировки;
		
		Если ЗначениеЗаполнено(ТекстовоеОписание) И ЗначениеЗаполнено(ДатаСнятияБлокировки) Тогда
			ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Параметры блокировки: %1Пользователь - %2 %3Причина      - %4 %5Дата снятия  - %6'"),
				Символы.ПС,
				Пользователь,
				Символы.ПС,
				ТекстовоеОписание,
				Символы.ПС,
				ДатаСнятияБлокировки
			);
		ИначеЕсли ЗначениеЗаполнено(ТекстовоеОписание) Тогда
			ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Параметры блокировки: %1Пользователь - %2 %3Причина      - %4'"),
				Символы.ПС,
				Пользователь,
				Символы.ПС,
				ТекстовоеОписание
			);
		ИначеЕсли ЗначениеЗаполнено(ДатаСнятияБлокировки) Тогда
			ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Параметры блокировки: %1Пользователь - %2 %3Дата снятия  - %4'"),
				Символы.ПС,
				Пользователь,
				Символы.ПС,
				ДатаСнятияБлокировки);
		Иначе
			ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Параметры блокировки: %1Пользователь - %2'"),
				Символы.ПС,
				Пользователь
			);
		КонецЕсли;
		
		КартинкаКнопки = БиблиотекаКартинок.ВедущаяКонечнаяТочка;
		
		Если Модифицированность Тогда
			
			Если ЗначениеЗаполнено(ТекстовоеОписание) И ЗначениеЗаполнено(ДатаСнятияБлокировки) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Данный документ заблокирован от изменений пользователем %1 по причине: ""%2"". Плановая дата снятия блокировки %3.'"),
					Пользователь,
					ТекстовоеОписание,
					ДатаСнятияБлокировки
				);
			ИначеЕсли ЗначениеЗаполнено(ТекстовоеОписание) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Данный документ заблокирован от изменений пользователем %1'"),
					Пользователь,
					ТекстовоеОписание
				);
			ИначеЕсли ЗначениеЗаполнено(ДатаСнятияБлокировки) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Данный документ заблокирован от изменений пользователем %1. Плановая дата снятия блокировки %2.'"),
					Пользователь,
					ДатаСнятияБлокировки
				);
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Данный документ заблокирован от изменений пользователем %1'"),
					Пользователь
				);
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
			Отказ = Истина;
			Прочитать();
			
		КонецЕсли;
		
	Иначе
		
		Если ФормаБлокированаОтИзменений Тогда
			
			ТолькоПросмотр = Ложь;
			ФормаБлокированаОтИзменений = Ложь;
			
		КонецЕсли;
		
		ТекстПодсказки = НСтр("ru = 'Блокировка от изменений заказ-наряда'");
		КартинкаКнопки = БиблиотекаКартинок.ОсвободитьФайл;
		
	КонецЕсли;
	
	Команды.Найти("БлокировкаИзменений").Подсказка = ТекстПодсказки;
	Команды.Найти("БлокировкаИзменений").Картинка  = КартинкаКнопки;
	
	Элементы.ФормаБлокировкаИзменений.Пометка = ЭтотОбъект.ТолькоПросмотр;
	
КонецПроцедуры // ПроверкаБлокировкиИзменений()

// Удаление лишних файлов для обмена с программами колористики
&НаКлиенте
Процедура УдалитьЗаписиВФайлахОбменаСAxalta()
	
	#Если НЕ ВебКлиент Тогда
		Данные = ДанныеДляОбменаСAxalta();
		
		ФайлЗаданийGlasurit      = ПолучитьЗначениеПараметраСтруктуры(Данные, "ФайлЗаданийGlasurit", "");
		ФайлЗаданийColorNetPro   = ПолучитьЗначениеПараметраСтруктуры(Данные, "ФайлЗаданийColorNetPro", "");
		КаталогОбменаColorNetPro = ПолучитьЗначениеПараметраСтруктуры(Данные, "КаталогОбменаColorNetPro", "");
		
		Если ЗначениеЗаполнено(КаталогОбменаColorNetPro) Тогда
			УдалитьФайлы(КаталогОбменаColorNetPro, СтрШаблон("%1*", Объект.Ссылка.УникальныйИдентификатор()));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФайлЗаданийColorNetPro) Тогда
			Попытка
				СтрокаПоиска = СтроковыеФункцииКлиент.СтрокаЛатиницей(Объект.Номер);
				
				ТекстДок = Новый ТекстовыйДокумент;
				ТекстДок.Прочитать(ФайлЗаданийColorNetPro);
				
				МассивНаУдаление = Новый Массив;
				КолСтрок = ТекстДок.КоличествоСтрок();
				Для Сч = 1 По КолСтрок Цикл
					Стр = ТекстДок.ПолучитьСтроку(Сч);
					Если Найти(Стр,СокрЛП(СтрокаПоиска)) <> 0 Тогда
						МассивНаУдаление.Добавить(Сч-МассивНаУдаление.Количество());
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого СтрМасс Из МассивНаУдаление Цикл
					ТекстДок.УдалитьСтроку(СтрМасс);
				КонецЦикла;
				
				ТекстДок.Записать(ФайлЗаданийColorNetPro, КодировкаТекста.ANSI);
			Исключение 
					ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(НСтр("ru = 'Ошибка при записи документа'"),
       				"Ошибка",
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),, Истина);
			КонецПопытки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФайлЗаданийGlasurit) Тогда
			Попытка
				СтрокаЗН = СтроковыеФункцииКлиент.СтрокаЛатиницей(Объект.Номер);
				
				ЧтениеТекста = Новый ТекстовыйДокумент;
				ЧтениеТекста.Прочитать(ФайлЗаданийGlasurit);
				ТекстXML = ЧтениеТекста.ПолучитьТекст();
				
				ЧтениеФайла = Новый ЧтениеXML;
				ЧтениеФайла.УстановитьСтроку(ТекстXML);
				СписокЗаказов = Новый СписокЗначений;
				Пока ЧтениеФайла.Прочитать() Цикл
					Если ЧтениеФайла.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеФайла.Имя = "Job" Тогда
						стрЗаказа = Новый Структура;
						Пока ЧтениеФайла.Прочитать() Цикл
							Если ЧтениеФайла.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеФайла.Имя = "Job" Тогда
								СписокЗаказов.Добавить(стрЗаказа);
								Прервать;
							ИначеЕсли ЧтениеФайла.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
								ИмяРеквизита = ЧтениеФайла.Имя;
								ЧтениеФайла.Прочитать();
								ЗначениеРеквизита = ЧтениеФайла.Значение;
								стрЗаказа.Вставить(ИмяРеквизита,ЗначениеРеквизита);
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли ЧтениеФайла.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеФайла.Имя = "Jobs" Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				ЗаписьФайл = Новый ЗаписьXML;
				ЗаписьФайл.ОткрытьФайл(ФайлЗаданийGlasurit);
				ЗаписьФайл.ЗаписатьНачалоЭлемента("Jobs");
				Для Каждого Заказ Из СписокЗаказов Цикл
					ДанныеЗаказ = Заказ.Значение;
					Попытка
						Если ДанныеЗаказ.JobNumber = СтрокаЗН Тогда
							ЭтоНеПишем = Истина;
						Иначе
							ЭтоНеПишем = Ложь;
						КонецЕсли;
					Исключение
						ЭтоНеПишем = Ложь;
					КонецПопытки;
					
					Если ЭтоНеПишем Тогда
						Продолжить;
					КонецЕсли;
					
					ЗаписьФайл.ЗаписатьНачалоЭлемента("Job");
					Для Каждого Реквизит Из ДанныеЗаказ Цикл
						ЗаписьФайл.ЗаписатьНачалоЭлемента(Реквизит.Ключ);
						ЗаписьФайл.ЗаписатьТекст(Реквизит.Значение);
						ЗаписьФайл.ЗаписатьКонецЭлемента();
					КонецЦикла;
					ЗаписьФайл.ЗаписатьКонецЭлемента();
				КонецЦикла;
				ЗаписьФайл.ЗаписатьКонецЭлемента();
				ЗаписьФайл.Закрыть();
				ЧтениеТекста.Прочитать(ФайлЗаданийGlasurit);
				ЧтениеТекста.Записать(ФайлЗаданийGlasurit,КодировкаТекста.ANSI);
			Исключение  
					ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(НСтр("ru = 'Ошибка при записи файла'"),
       				"Ошибка",
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),, Истина);
			КонецПопытки;
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры  

&НаСервереБезКонтекста
Функция ДанныеДляОбменаСAxalta()
	Результат = Новый Структура();
	
	СохраненныеНастройки =
		ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("ОбменСAxalta","Режим"+Строка(Перечисления.ОбменСAxaltaРежимыЗагрузки.Glasurit), Новый Структура);
	
	Результат.Вставить("ФайлЗаданийGlasurit", ПолучитьЗначениеПараметраСтруктуры(СохраненныеНастройки, "ФайлЗаданий", ""));
	
	СохраненныеНастройки =
		ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("ОбменСAxalta","Режим"+Строка(Перечисления.ОбменСAxaltaРежимыЗагрузки.ColorNetPro), Новый Структура);
	
	Результат.Вставить("ФайлЗаданийColorNetPro"   , ПолучитьЗначениеПараметраСтруктуры(СохраненныеНастройки, "ФайлЗаданий"  , ""));
	Результат.Вставить("КаталогОбменаColorNetPro" , ПолучитьЗначениеПараметраСтруктуры(СохраненныеНастройки, "КаталогОбмена", ""));
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаИзмененияКоличестваКСписанию(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.КоличествоКСписанию <> Результат Тогда
		
		Объект.КоличествоКСписанию = Результат;
		Модифицированность = Истина;
		ПерерасчетСуммыСкидкиБонусами();
		
		Если ИспользоватьПричиныОбращений Тогда
			
			ПричиныОбращенияАвтоработыПриАктивизацииСтроки(Элементы.ПричиныОбращенияАвтоработы);
			ПричиныОбращенияТоварыПриАктивизацииСтроки(Элементы.ПричиныОбращенияТовары);	
			УправлениеДиалогомНаСервере();
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерерасчетСуммыСкидкиБонусами()
	
	Документы.ЗаказНаряд.ПерерасчетСуммыСкидкиБонусами(Объект);
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(ЭтотОбъект);
	СформироватьПредставлениеБонусныхБаллах();
	Документы.ЗаказНаряд.ПерерасчетСуммыНачисленийИсполнителям(Объект, Перечисления.СпособыРасчета.Процентом);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеБонусныхБаллах()
	
	БонусныеБаллыПредставление = "Бонусы: "+Строка(Объект.КоличествоКСписанию)+" / "+Строка(Объект.КоличествоКНачислению);
	
КонецПроцедуры // СформироватьПредставлениеБонусныхБаллах()

&НаСервере
Функция ДисконтнаяКартаЗаблокирована()
	
	Возврат БонусныеПрограммыСервер.ДисконтнаяКартаЗаблокирована(Объект.Карточка);
	
КонецФункции // ДисконтнаяКартаЗаблокирована()

&НаСервере
Процедура ДобавитьРекомендациюАвтомобиляНаСервере(РекомендацияАвтомобиля, НоваяСтрокаАвторабот)
	
	Обработки.ПодборРекомендаций.ДобавитьРекомендациюВДокумент(Объект, ЭтотОбъект, РекомендацияАвтомобиля, НоваяСтрокаАвторабот);
	
	НайденныеСтроки = Объект.Автоработы.НайтиСтроки(Новый Структура("Авторабота", РекомендацияАвтомобиля.Рекомендация));
	Если ИспользоватьУчетРабочегоВремени
		И НайденныеСтроки.Количество() > 0
		И ПустаяСтрока(НайденныеСтроки[0].ПакетРабот) Тогда
		
		ДобавитьНовуюАвтоработуВПакет(НайденныеСтроки[0].ПолучитьИдентификатор());
		ИзмененыПакетыРабот = Истина;
	КонецЕсли;
	
	ОбновитьПоказателиТоваров(ЭтотОбъект);
	ПоказатьПоказатели(Истина);
	
КонецПроцедуры // ДобавитьРекомендациюАвтомобиляНаСервере()

&НаКлиенте
Процедура ДобавитьРекомендациюАвтомобиля(РекомендацияАвтомобиля)
	
	// Если будет добавлена новая строка в ТЧ Автоработы, то выполним подбор исполнителей и связанный работ.
	НоваяСтрокаАвторабот = Ложь;
	
	ДобавитьРекомендациюАвтомобиляНаСервере(РекомендацияАвтомобиля, НоваяСтрокаАвторабот);
	
	ПричиныОбращенияАвтоработыПриАктивизацииСтроки(Неопределено);
	ПричиныОбращенияТоварыПриАктивизацииСтроки(Элементы.ПричиныОбращенияТовары);
	
	Если НоваяСтрокаАвторабот Тогда
		
		НайденнаяСтрока = Объект.Автоработы.НайтиСтроки(Новый Структура("Авторабота", РекомендацияАвтомобиля.Рекомендация));
		
		Элементы.Автоработы.ТекущаяСтрока = НайденнаяСтрока[0].ПолучитьИдентификатор();
		
		ПараметрыОткрытия = Новый Структура("Автомобиль", Автомобиль);
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(Объект, РекомендацияАвтомобиля, ЭтотОбъект, ПараметрыОткрытия);
		
		ЗаполнениеИсполнителей(ЭтотОбъект, Объект);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьРекомендациюАвтомобиля()

// Процедура установки параметров выбора сервисной кампании
//
&НаСервере
Процедура НастройкаПараметровВыбораСервиснойКампании()
	
	// Настроим отбор сервисных кампаний
	ТаблицаСервисныхКомпаний = АвтомобилиСервер.ПроверитьСервиснуюКампанию(
		Автомобиль,
		Объект.Дата,
		Истина,
		Объект.Ссылка
	);
	СервисныеКампании = ТаблицаСервисныхКомпаний.ВыгрузитьКолонку("СервиснаяКампания");
	
	Если Не Элементы.Найти("СервиснаяКампания") = Неопределено Тогда
		
		АвтомобилиСервер.ОбновитьСостояниеСервиснойКомпании(
			СервисныеКампании.Количество() > 0,
			Элементы.СервиснаяКампания,
			Элементы.СостояниеСервиснойКомпании
		);
		
		Если НЕ ЗначениеЗаполнено(СервисныеКампании) Тогда
			СервисныеКампании.Добавить(Справочники.СервисныеКампании.ПустаяСсылка());
		КонецЕсли;
		
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
			Элементы.СервиснаяКампания.ПараметрыВыбора,
			"Отбор.Ссылка",
			СервисныеКампании
		);
		
	КонецЕсли;
	
КонецПроцедуры // НастройкаПараметровВыбораСервиснойКампании()

&НаСервере
Процедура ПроверитьСервиснуюКампанию()
	
	Если Не ЗначениеЗаполнено(Объект.СервиснаяКампания) Тогда
		Возврат;
	КонецЕсли;
	
	// получим сервисные компании
	СервисныеКомпании = АвтомобилиСервер.ПроверитьСервиснуюКампанию(Объект.СводныйРемонтныйЗаказ.Автомобиль, Объект.Дата, Истина, Объект.Ссылка);
	
	Отбор = Новый Структура("СервиснаяКампания", Объект.СервиснаяКампания);
	НайденныеСтроки = СервисныеКомпании.НайтиСтроки(Отбор);
	
	Если СервисныеКомпании.Количество() = 0 ИЛИ НайденныеСтроки.Количество() = 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Сервисная кампания <%1> недоступна для автомобиля <%2>.'"),
			Объект.СервиснаяКампания,
			Объект.СводныйРемонтныйЗаказ.Автомобиль
		);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
		Объект.СервиснаяКампания = Справочники.СервисныеКампании.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИнформациюОбЗагруженномДеле(ДокументСсылка)
	
	Если ЗначениеЗаполнено(ИдентификаторДела) И ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Менеджер = РегистрыСведений.ОбменСAudaPadWeb.СоздатьМенеджерЗаписи();
		Менеджер.Период               = ТекущаяДатаСеанса();
		Менеджер.Автор                = Пользователи.ТекущийПользователь();
		Менеджер.ЗаказНаряд           = ДокументСсылка;
		Менеджер.ИдентификаторДела    = ИдентификаторДела;
		Менеджер.ИдентификаторЗадания = ИдентификаторЗадания;
		
		Менеджер.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТоварыИМатериалыПоЗаказНаряду(ЗаказНаряд, ВыделенныеСтроки, ТекстСообщения, Оповещение = Неопределено)
	
	// Запретим выполнение команд, если заказ-наряд в состоянии "Заявка"
	Если Объект.Состояние = ПредопределенноеЗначение("Справочник.ВидыСостоянийЗаказНарядов.Заявка") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Заказ-наряд находится в состоянии ""Заявка"". Нельзя создать движение товаров.'"),
			Объект.Ссылка
		);
		Возврат Ложь;
	КонецЕсли;
	
	Если Оповещение = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПолучитьТоварыИМатериалыПоЗаказНарядуПослеЗакрытияВопроса",
			ЭтотОбъект,
			Параметры
		);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидРемонта) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Вид ремонта""'"), Объект.Ссылка, "ВидРемонта");
		Возврат 0;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ПоказатьВопрос(
			Оповещение,
			НСтр("ru = 'Сохранить заказ-наряд и'") + Символы.НПП + НРег(Лев(ТекстСообщения, 1)) + Сред(ТекстСообщения, 2),
			РежимДиалогаВопрос.ДаНет);
	Иначе
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьТоварыИМатериалыПоЗаказНарядуПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Попытка
			
			Если НЕ Записать() Тогда
			
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Не удалось сохранить заказ-наряд. Операция отменена.'")
				);
				Возврат;
			
			КонецЕсли;
			
		Исключение
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не удалось сохранить заказ-наряд. Операция отменена.'")
			);
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если ДействиеДокументИзПричинаОбращения Тогда
		ВыделитьСтрокиТоваровПоПричинеОбращения();
	КонецЕсли;
	
	ТребуетсяВыборОрганизации = Ложь;
	
	ОрганизацияНовогоДокумента = Объект.Организация;
	
	Если ЗапасыТоваровВызовСервера.ОбособленныйУчетТоваровПоОрганизациям()
		И (Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаТовары"
				Или Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаРаботы")
		И ДействиеДокумент = "Документ.ПеремещениеТоваровВПроизводство.ФормаОбъекта" Тогда
		
		СписокОрганизацийДляНовогоДокумента = ПолучитьСписокОрганизацийДляПеремещенияВПроизводствоПоВыделеннымСтрокам(Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаРаботы");
				
		ТребуетсяВыборОрганизации = (СписокОрганизацийДляНовогоДокумента.Количество() > 1);
		
	КонецЕсли;
	
	Если НЕ ТребуетсяВыборОрганизации Тогда
		
		ПолучитьТоварыИМатериалыПоЗаказНарядуПослеДиалога(ОрганизацияНовогоДокумента);
		
	Иначе
		
		Оповещение = Новый ОписаниеОповещения(
			"ПолучитьТоварыИМатериалыПоЗаказНарядуПослеВыбораОрганизации",
			ЭтотОбъект,
			Параметры
		);
		
		СписокОрганизацийДляНовогоДокумента.ПоказатьВыборЭлемента(Оповещение, НСтр("ru = 'Передать из организации'"));
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТоварыИМатериалыПоЗаказНарядуПослеВыбораОрганизации(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	ВыбраннаяОрганизация = Результат.Значение;
	
	Если ЗапасыТоваровВызовСервера.ОбособленныйУчетТоваровПоОрганизациям()
		И Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаРаботы"
		И ВыбраннаяОрганизация <> Объект.Организация
		И НЕ ЕстьНастройкаПередачиМатериалов(ВыбраннаяОрганизация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'По выбранной организации отключена передача материалов продавцу.'")
				);
	Иначе
		ПолучитьТоварыИМатериалыПоЗаказНарядуПослеДиалога(ВыбраннаяОрганизация);
	КонецЕсли;
	
КонецПроцедуры	
	
&НаКлиенте
Процедура ПолучитьТоварыИМатериалыПоЗаказНарядуПослеДиалога(ОрганизацияНовогоДокумента)
	
	РезультатПолучения = Новый Структура; Товары = Новый Массив;
	
	Если Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаРаботы" Тогда
		
		// Материалы
		
		Если ДействиеНаДокумент Тогда
			
			// Для каждого склада установим новый заказ покупателя
			ТаблицаМатериаловПоСкладам = Новый Соответствие;
			
			Для Каждого ВыделеннаяСтрока Из Элементы.Автоработы.ВыделенныеСтроки Цикл
				
				Значение = Объект.Автоработы.НайтиПоИдентификатору(ВыделеннаяСтрока);
				
				ТаблицаМатериалов = Объект.Материалы.НайтиСтроки(Новый Структура("ИдентификаторРаботы", Значение.ИдентификаторРаботы));
				
				Для Каждого Строка Из ТаблицаМатериалов Цикл
					
					СкладНоменклатуры = ТаблицаМатериаловПоСкладам.Получить(Строка.СкладКомпании);
					
					Если СкладНоменклатуры = Неопределено Тогда
						ТаблицаМатериаловПоСкладам.Вставить(Строка.СкладКомпании, Новый Массив());
						СкладНоменклатуры = ТаблицаМатериаловПоСкладам.Получить(Строка.СкладКомпании);
					КонецЕсли;
					
					СкладНоменклатуры.Добавить(Строка.НомерСтроки);
					
				КонецЦикла;
				
			КонецЦикла;
			
			Для каждого ТекущийСклад Из ТаблицаМатериаловПоСкладам Цикл
				
				РезультатПолучения.Вставить("Материалы", ТекущийСклад.Значение);
				РезультатПолучения.Вставить("Товары",    Новый Массив);
				
				ПараметрыФормы      = Новый Структура;
				ПараметрыЗаполнения = Новый Структура;
				
				ПараметрыЗаполнения.Вставить("ТоварыИМатериалы", РезультатПолучения);
				ПараметрыЗаполнения.Вставить("ЗаказНаряд"      , Объект.Ссылка);
				ПараметрыЗаполнения.Вставить("СкладКомпании"   , ТекущийСклад.Ключ);
				ПараметрыЗаполнения.Вставить("Организация"     , ОрганизацияНовогоДокумента);
				
				Если ЗначениеЗаполнено(ДействиеХозОперацияДокумента) Тогда
					ПараметрыЗаполнения.Вставить("ХозОперация", ДействиеХозОперацияДокумента);
				КонецЕсли;
				
				ПараметрыФормы.Вставить("Основание", ПараметрыЗаполнения);
				
				ОткрытьФорму(ДействиеДокумент, ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
				
			КонецЦикла;
			
			ДействиеНаДокумент = Ложь;
			ДействиеХозОперацияДокумента = Неопределено;
			
		КонецЕсли;
		
	Иначе
		
		//Товары		
		
		Если ДействиеНаДокумент Тогда
			
			// Для каждого склада установим новый заказ покупателя
			ТаблицаТоваровПоСкладам = Новый Соответствие;
			
			Для Каждого ВыделеннаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
				
				Значение = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
				
				СкладНоменклатуры = ТаблицаТоваровПоСкладам.Получить(Значение.СкладКомпании);
				
				Если СкладНоменклатуры = Неопределено Тогда
					ТаблицаТоваровПоСкладам.Вставить(Значение.СкладКомпании, Новый Массив());
					СкладНоменклатуры = ТаблицаТоваровПоСкладам.Получить(Значение.СкладКомпании);
				КонецЕсли;
				
				СкладНоменклатуры.Добавить(Значение.НомерСтроки);
			КонецЦикла;
			
			Для каждого ТекущийСклад Из ТаблицаТоваровПоСкладам Цикл 
				РезультатПолучения.Вставить("Материалы", Новый Массив);
				РезультатПолучения.Вставить("Товары",    ТекущийСклад.Значение);
				
				ПараметрыФормы = Новый Структура; ПараметрыЗаполнения = Новый Структура;
				
				ПараметрыЗаполнения.Вставить("ТоварыИМатериалы"                         , РезультатПолучения);
				ПараметрыЗаполнения.Вставить("ЗаказНаряд"                               , Объект.Ссылка);
				ПараметрыЗаполнения.Вставить("СкладКомпании"                            , ТекущийСклад.Ключ);
				ПараметрыЗаполнения.Вставить("РучноеПеремещениеТоваровВПроизводствоИзЗН", РучноеПеремещениеТоваровВПроизводствоИзЗН);
				ПараметрыЗаполнения.Вставить("Организация"                              , ОрганизацияНовогоДокумента);

				
				Если ЗначениеЗаполнено(ДействиеХозОперацияДокумента) Тогда
					ПараметрыЗаполнения.Вставить("ХозОперация", ДействиеХозОперацияДокумента);
				КонецЕсли;
				
				ПараметрыФормы.Вставить("Основание", ПараметрыЗаполнения);
				
				ОткрытьФорму(ДействиеДокумент, ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
			КонецЦикла;
			
			ДействиеНаДокумент = Ложь;
			ДействиеХозОперацияДокумента = Неопределено;
			РучноеПеремещениеТоваровВПроизводствоИзЗН = Ложь;
			
		Иначе
			
			Для Каждого ВыделеннаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
				Значение = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока).НомерСтроки;
				Если Товары.Найти(Значение) = Неопределено Тогда
					Товары.Добавить(Значение);
				КонецЕсли;
			КонецЦикла;
			
			РезультатПолучения.Вставить("Материалы", Новый Массив);
			РезультатПолучения.Вставить("Товары",    Товары);
			
			ПараметрыФормы = Новый Структура; ПараметрыЗаполнения = Новый Структура;
			
			ПараметрыЗаполнения.Вставить("ТоварыИМатериалы", РезультатПолучения);
			ПараметрыЗаполнения.Вставить("ЗаказНаряд"      , Объект.Ссылка);
			ПараметрыЗаполнения.Вставить("КорректировкаЗаказа", СнятиеРезерваСОтменой);
			
			ПараметрыФормы.Вставить("Основание", ПараметрыЗаполнения);
			
			ОткрытьФорму(ДействиеДокумент, ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьНастройкаПередачиМатериалов(ОрганизацияНовогоДокумента)
	
	Отбор = Новый Структура("ОрганизацияОтправитель, ОрганизацияПолучатель",ОрганизацияНовогоДокумента, Объект.Организация);
	НастройкаПередачи = РегистрыСведений.НастройкиПередачиТоваровМеждуОрганизациями.СрезПоследних(ТекущаяДатаСеанса(), Отбор);
	
	Возврат НастройкаПередачи.Количество() > 0 И НастройкаПередачи[0].ПередаватьМатериалыАвторабот;
	
КонецФункции	

&НаКлиенте
Процедура ВыделитьСтрокиТоваровПоПричинеОбращения()

	Элементы.Товары.ВыделенныеСтроки.Очистить();
	Для Каждого Строка Из Объект.Товары Цикл
		Если Строка.ИдентификаторПричиныОбращения = Элементы.ПричиныОбращенияТовары.ТекущиеДанные.ИдентификаторПричиныОбращения Тогда
			Элементы.Товары.ВыделенныеСтроки.Добавить(Строка.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокОрганизацийДляПеремещенияВПроизводствоПоВыделеннымСтрокам(ТекущаяСтраницаАвтоработы = Ложь)
	
	ТаблВыделенныхСтрок = Новый ТаблицаЗначений;
	ТаблВыделенныхСтрок.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблВыделенныхСтрок.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблВыделенныхСтрок.Колонки.Добавить("СкладКомпании", Новый ОписаниеТипов("СправочникСсылка.СкладыКомпании"));
	ТаблВыделенныхСтрок.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	
	Если ТекущаяСтраницаАвтоработы Тогда
		
		Для Каждого ВыделеннаяСтрока Из Элементы.Автоработы.ВыделенныеСтроки Цикл
			
			ЗначениеСтроки = Объект.Автоработы.НайтиПоИдентификатору(ВыделеннаяСтрока);
			ПараметрыОтбора = Новый Структура("ИдентификаторРаботы", ЗначениеСтроки.ИдентификаторРаботы);
			МатериалыСтроки = Объект.Материалы.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого СтрокаМатериала Из МатериалыСтроки Цикл
				НоваяСтрока = ТаблВыделенныхСтрок.Добавить();
				НоваяСтрока.Номенклатура 				= СтрокаМатериала.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры 	= СтрокаМатериала.Номенклатура;
				НоваяСтрока.СкладКомпании 				= СтрокаМатериала.СкладКомпании;
				НоваяСтрока.Количество					= СтрокаМатериала.Количество;
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе	
		
		Для Каждого ВыделеннаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
			
			ЗначениеСтроки = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
			
			НоваяСтрока = ТаблВыделенныхСтрок.Добавить();
			НоваяСтрока.Номенклатура 				= ЗначениеСтроки.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры 	= ЗначениеСтроки.Номенклатура;
			НоваяСтрока.СкладКомпании 				= ЗначениеСтроки.СкладКомпании;
			НоваяСтрока.Количество					= ЗначениеСтроки.Количество;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ВыделенныеСтроки.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(ВыделенныеСтроки.ХарактеристикаНоменклатуры КАК Справочник.ХарактеристикиНоменклатуры) КАК ХарактеристикаНоменклатуры,
		|	ВЫРАЗИТЬ(ВыделенныеСтроки.СкладКомпании КАК Справочник.СкладыКомпании) КАК СкладКомпании,
		|	ВЫРАЗИТЬ(ВыделенныеСтроки.Количество КАК ЧИСЛО(15, 3)) КАК Требуется
		|ПОМЕСТИТЬ втВыделенныеСтроки
		|ИЗ
		|	&ТаблВыделенныхСтрок КАК ВыделенныеСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВыделенныеСтроки.Номенклатура КАК Номенклатура,
		|	втВыделенныеСтроки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	втВыделенныеСтроки.СкладКомпании КАК СкладКомпании
		|ПОМЕСТИТЬ втТоварыТребуются
		|ИЗ
		|	втВыделенныеСтроки КАК втВыделенныеСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВПроизводстве.Остатки(
		|				,
		|				ЗаказНаряд = &ЗаказНаряд
		|					И (Номенклатура, ХарактеристикаНоменклатуры) В
		|						(ВЫБРАТЬ
		|							втВыделенныеСтроки.Номенклатура КАК Номенклатура,
		|							втВыделенныеСтроки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|						ИЗ
		|							втВыделенныеСтроки КАК втВыделенныеСтроки)) КАК ТоварыВПроизводствеОстатки
		|		ПО втВыделенныеСтроки.Номенклатура = ТоварыВПроизводствеОстатки.Номенклатура
		|			И втВыделенныеСтроки.ХарактеристикаНоменклатуры = ТоварыВПроизводствеОстатки.ХарактеристикаНоменклатуры
		|ГДЕ
		|	втВыделенныеСтроки.Требуется > ЕСТЬNULL(ТоварыВПроизводствеОстатки.КоличествоОстаток, 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПартииТоваровКомпанииОстатки.Организация КАК Организация,
		|	ПартииТоваровКомпанииОстатки.Организация = &ОрганизацияДокумента КАК ЭтоОрганизацияДокумента,
		|	ПартииТоваровКомпанииОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ПартииТоваровКомпании.Остатки(
		|			,
		|			(Номенклатура, ХарактеристикаНоменклатуры, СкладКомпании) В
		|				(ВЫБРАТЬ
		|					втТоварыТребуются.Номенклатура КАК Номенклатура,
		|					втТоварыТребуются.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|					втТоварыТребуются.СкладКомпании КАК СкладКомпании
		|				ИЗ
		|					втТоварыТребуются КАК втТоварыТребуются)) КАК ПартииТоваровКомпанииОстатки
		|ГДЕ
		|	ПартииТоваровКомпанииОстатки.КоличествоОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоОрганизацияДокумента УБЫВ,
		|	Организация";
	
	Запрос.УстановитьПараметр("ЗаказНаряд", Объект.Ссылка);
	Запрос.УстановитьПараметр("ОрганизацияДокумента", Объект.Организация);
	Запрос.УстановитьПараметр("ТаблВыделенныхСтрок", ТаблВыделенныхСтрок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокОрганизаций = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.КоличествоОстаток > 0 Тогда
		
			СписокОрганизаций.Добавить(Выборка.Организация, , , БиблиотекаКартинок.ПроверкаСертификатаУспех);
			
		Иначе
			
			СписокОрганизаций.Добавить(Выборка.Организация, , , БиблиотекаКартинок.ПроверкаСертификатаНеВыполнялась);
			
		КонецЕсли;			
	
	КонецЦикла;
	
	Если СписокОрганизаций.НайтиПоЗначению(Объект.Организация) = Неопределено Тогда
	
		СписокОрганизаций.Вставить(0, Объект.Организация, , , БиблиотекаКартинок.ПроверкаСертификатаНеВыполнялась); 	
	
	КонецЕсли;
		
	Возврат СписокОрганизаций;	

КонецФункции

&НаКлиенте
Процедура Подключаемый_ОткрытьФормуИзвлеченияПроизводства(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Попытка
			
			Если НЕ Записать() Тогда
			
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Не удалось сохранить заказ-наряд. Операция отменена.'")
				);
				Возврат;
			
			КонецЕсли;
			
		Исключение
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не удалось сохранить заказ-наряд. Операция отменена.'")
			);
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	РезультатПолучения = Новый Структура;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ТоварыИМатериалы", Новый Структура);
	ПараметрыЗаполнения.Вставить("ЗаказНаряд"      , Объект.Ссылка);
	
	Если Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаРаботы" Тогда
		
		ИтоговаяТаблицаМатериалов = Новый Массив;
		
		Для Каждого ВыделеннаяСтрока Из Элементы.Автоработы.ВыделенныеСтроки Цикл
			
			Значение = Объект.Автоработы.НайтиПоИдентификатору(ВыделеннаяСтрока);
			ТаблицаМатериалов = Объект.Материалы.НайтиСтроки(Новый Структура("ИдентификаторРаботы", Значение.ИдентификаторРаботы));
			
			Для Каждого Строка Из ТаблицаМатериалов Цикл
				ИтоговаяТаблицаМатериалов.Добавить(Строка.НомерСтроки);
			КонецЦикла;
			
		КонецЦикла;
		
		РезультатПолучения.Вставить("Материалы", ИтоговаяТаблицаМатериалов);
		РезультатПолучения.Вставить("Товары",    Новый Массив);
		
		ПараметрыЗаполнения.ТоварыИМатериалы = РезультатПолучения;
		
		Если ЗначениеЗаполнено(ДействиеХозОперацияДокумента) Тогда
			ПараметрыЗаполнения.Вставить("ХозОперация", ДействиеХозОперацияДокумента);
		КонецЕсли;
		
	Иначе
		
		Товары = Новый Массив;
		
		Для Каждого ВыделеннаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
			Значение = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока).НомерСтроки;
			Если Товары.Найти(Значение) = Неопределено Тогда
				Товары.Добавить(Значение);
			КонецЕсли;
		КонецЦикла;
		
		РезультатПолучения.Вставить("Материалы", Новый Массив);
		РезультатПолучения.Вставить("Товары",    Товары);
		
		ПараметрыЗаполнения.ТоварыИМатериалы = РезультатПолучения;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИзФормыДокумента", Истина);
	ПараметрыФормы.Вставить("Основание", ПараметрыЗаполнения);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_РезультатИзвлеченияДеталей", ЭтотОбъект);
	
	ОткрытьФорму(
		ДействиеДокумент,
		ПараметрыФормы,
		ЭтотОбъект,
		Новый УникальныйИдентификатор,,,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатИзвлеченияДеталей(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		
		// Завершим работу с извлечением деталей
		Возврат;
		
	КонецЕсли;
	
	// Внесем изменения по количеству товаров в документ
	УбратьИзвлеченныеТоварыИзПроизводства(Результат);
	
	Модифицированность = Истина;
	
КонецПроцедуры // Подключаемый_РезультатИзвлеченияДеталей()

&НаСервере
Процедура УбратьИзвлеченныеТоварыИзПроизводства(АдресРезультата)
	
	ТаблицаИзвлеченныхДеталей = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	// Обрабатываем только в случае наличия таблицы
	Если ТаблицаИзвлеченныхДеталей = Неопределено
		ИЛИ НЕ ТипЗнч(ТаблицаИзвлеченныхДеталей) = Тип("ТаблицаЗначений") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
	
	Для Каждого ТекущаяСтрока Из ТаблицаИзвлеченныхДеталей Цикл
		
	    КоличествоИзвлечения = ТекущаяСтрока.Количество;
				
		Если КоличествоИзвлечения = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущаяСтрока);
		СтрокиТоваров = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		
		УдалитьСтроки = Новый Массив;
		
		Для Каждого СтрокаТоваров Из СтрокиТоваров Цикл
			
			КоличествоТовара = СтрокаТоваров.Количество;
		
			Если КоличествоИзвлечения >= КоличествоТовара Тогда
				
				СтрокаТоваров.Количество = 0;
				КоличествоИзвлечения = КоличествоИзвлечения - КоличествоТовара;
				УдалитьСтроки.Добавить(СтрокаТоваров);
				
			Иначе
				СтрокаТоваров.Количество = КоличествоТовара - КоличествоИзвлечения;
				Документы.ЗаказНаряд.ТоварыКоличествоПриИзменении(Объект, СтрокаТоваров);
				КоличествоИзвлечения = 0;
				
			КонецЕсли;
			
			Если КоличествоИзвлечения = 0 Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Удалим строки с нулевым количеством
		Для Каждого СтрокаУдаления Из УдалитьСтроки Цикл
			
			Объект.Товары.Удалить(СтрокаУдаления);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКонтакт(СводныйРемонтныйЗаказ)
	
	Возврат СводныйРемонтныйЗаказ.Заказчик;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИспользоватьЭлектроннуюПочтуВШаблонахСообщений()
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьЭлектроннуюПочтуВШаблонахСообщений");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеКолонкиКода(Номенклатура,
		Знач РежимыВыводаКодаВДокументах = Неопределено,
		ПраваПользователя = Неопределено,
		ВыводитьПроизводителя = Ложь)
	
	Возврат УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(Номенклатура);
	
КонецФункции // ПолучитьЗначениеКолонкиКода()

// возвращает строку кеша по параметрам
&НаКлиенте
Функция ПолучитьСтрокуКешаПеремещенияДокументы(ТекущаяСтрока)
	
	ТоварыВПроизводстве = АвтосервисВызовСервера.ПоказателиЗапасов(Объект.Ссылка, Объект.Товары);
	ВПроизводстве       = 0;
	Заказано            = 0;
	Зарезервировано     = 0;
	
	Для Каждого ТекСтрока Из ТоварыВПроизводстве Цикл
		
		Если ТекущаяСтрока = ТекСтрока.ИдентификаторСтроки Тогда
			
			ВПроизводстве = ВПроизводстве + ТекСтрока.ВПроизводстве;
			
			Если ТекСтрока.ЗаказаноПодЗН > 0 Тогда
				
				Заказано = ТекСтрока.ЗаказаноПодЗН;
				
			КонецЕсли;
			
			Если ТекСтрока.ЗарезервированоПодЗН>0 Тогда
				
				Зарезервировано = ТекСтрока.ЗарезервированоПодЗН;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоказателиЗапасов = Новый Массив;
	ПоказателиЗапасов.Добавить(ВПроизводстве);
	ПоказателиЗапасов.Добавить(Заказано);
	ПоказателиЗапасов.Добавить(Зарезервировано);
	
	Возврат ПоказателиЗапасов;
	
КонецФункции // ПолучитьСтрокуКешаПеремещенияПоЗаказам()

&НаКлиенте
// Функция проверяет корректность изменения количества номенклатуры в ЗН
//
// Возвращаемое значение:
//   Булево - Результат проверки корректности.
//
Функция КонтрольКоличестваДеталейВПроизводстве(СтруктураДанныхТекущейСтроки, ИмяТаблицы = Неопределено)
	
	РезультатПроверки = Истина;
	
	Если КонтрольКоличестваДеталейВПроизводстве = ПредопределенноеЗначение("Перечисление.ВидыКонтроля.НеКонтролировать") Тогда
		// Если не требуется контролировать, то всегда корректно
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Номенклатура = СтруктураДанныхТекущейСтроки.Номенклатура;
	
	// Проверим, что это не новая строка.
	Если Номенклатура = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	КэшТоварыВПроизводстве = СтруктураДанныхТекущейСтроки.КэшТоварыВПроизводстве;
	ТоварыВПроизводстве = ПолучитьСтрокуКешаПеремещенияДокументы(Элементы.Товары.ТекущаяСтрока);
	ВПроизводстве   = Макс(КэшТоварыВПроизводстве[0], ТоварыВПроизводстве[0]);
	Заказано        = Макс(КэшТоварыВПроизводстве[1], ТоварыВПроизводстве[1]);
	Зарезервировано = Макс(КэшТоварыВПроизводстве[2], ТоварыВПроизводстве[2]);
	
	Возврат ПроверкаКоличестваДеталейВПроизводстве(
		СтруктураДанныхТекущейСтроки,
		ВПроизводстве,
		Заказано,
		Зарезервировано);
	
КонецФункции // КонтрольКоличестваДеталейВПроизводстве()

&НаКлиенте
Процедура ПодключитьОбработчикКонтроляКоличестваДеталейВПроизводстве(СтрокаТЧ,
	Номенклатура,
	ХарактеристикаНоменклатуры,
	ЕдиницаИзмерения,
	Количество)
	
	Если СтрокаТЧ<>Неопределено Тогда
		ПараметрыОбработки = Новый Структура;
		Если СтрокаТЧ.Номенклатура <> Номенклатура Тогда
			СтрокаТЧ.Номенклатура = Номенклатура;
			ПараметрыОбработки.Вставить("Номенклатура");
		КонецЕсли;
		Если СтрокаТЧ.ХарактеристикаНоменклатуры <> ХарактеристикаНоменклатуры Тогда
			СтрокаТЧ.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
			ПараметрыОбработки.Вставить("ХарактеристикаНоменклатуры");
		КонецЕсли; 
		Если СтрокаТЧ.ЕдиницаИзмерения <> ЕдиницаИзмерения Тогда
			СтрокаТЧ.ЕдиницаИзмерения = ЕдиницаИзмерения;
			ПараметрыОбработки.Вставить("ЕдиницаИзмерения");
		КонецЕсли;
		Если СтрокаТЧ.Количество <> Количество Тогда
			СтрокаТЧ.Количество = Количество;
			ПараметрыОбработки.Вставить("Количество");
		КонецЕсли;
		ПодключитьОбработчикОжидания("ОбработкаКонтроляКоличестваДеталейВПроизводстве", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольКоличестваДеталейВПроизводствеПослеЗакрытияВопроса(Результат, ПараметрыВопроса) Экспорт
	
	Номенклатура               = ПараметрыВопроса.СтруктураДанныхТекущейСтроки.Номенклатура;
	ХарактеристикаНоменклатуры = ПараметрыВопроса.СтруктураДанныхТекущейСтроки.ХарактеристикаНоменклатуры;
	ЕдиницаИзмерения           = ПараметрыВопроса.СтруктураДанныхТекущейСтроки.ЕдиницаИзмерения;
	Количество                 = ПараметрыВопроса.СтруктураДанныхТекущейСтроки.Количество;
	СтрокаТЧ                   = ПараметрыВопроса.СтруктураДанныхТекущейСтроки.Строка;
	СтрокаИсключение           = ПараметрыВопроса.СтруктураДанныхТекущейСтроки.СтрокаИсключение;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если СтрокаИсключение <> Неопределено Тогда
			Объект.Товары.Удалить(СтрокаИсключение);
			ПерерасчетСуммыСкидкиБонусами();
			ЭтотОбъект.Модифицированность = Истина;
		КонецЕсли;
	Иначе
		Если СтрокаТЧ<>Неопределено Тогда
			ПараметрыОбработки = Новый Структура;
			Если СтрокаТЧ.Номенклатура <> Номенклатура Тогда
				СтрокаТЧ.Номенклатура = Номенклатура;
				ПараметрыОбработки.Вставить("Номенклатура");
			КонецЕсли; 
			Если СтрокаТЧ.ХарактеристикаНоменклатуры <> ХарактеристикаНоменклатуры Тогда
				СтрокаТЧ.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
				ПараметрыОбработки.Вставить("ХарактеристикаНоменклатуры");
			КонецЕсли; 
			Если СтрокаТЧ.ЕдиницаИзмерения <> ЕдиницаИзмерения Тогда
				СтрокаТЧ.ЕдиницаИзмерения = ЕдиницаИзмерения;
				ПараметрыОбработки.Вставить("ЕдиницаИзмерения");
			КонецЕсли; 
			Если СтрокаТЧ.Количество <> Количество Тогда
				СтрокаТЧ.Количество = Количество;
				ПараметрыОбработки.Вставить("Количество");
			КонецЕсли;
			ПодключитьОбработчикОжидания("ОбработкаКонтроляКоличестваДеталейВПроизводстве", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // КонтрольКоличестваДеталейВПроизводствеПослеЗакрытияВопроса()

&НаКлиенте
Процедура ОбработкаКонтроляКоличестваДеталейВПроизводстве() Экспорт
	
	Если ТипЗнч(ПараметрыОбработки) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаКонтроляКоличестваДеталейВПроизводствеНаСервере();
	
КонецПроцедуры // ОбработкаКонтроляКоличестваДеталейВПроизводстве()

&НаСервере
Процедура ОбработкаКонтроляКоличестваДеталейВПроизводствеНаСервере()
	
	Если ПараметрыОбработки.Свойство("Номенклатура") Тогда
		ТоварыНоменклатураПриИзмененииНаСервере();
	КонецЕсли;
	
	Если ПараметрыОбработки.Свойство("ХарактеристикаНоменклатуры") Тогда
		ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере();
	КонецЕсли;
	
	Если ПараметрыОбработки.Свойство("ЕдиницаИзмерения") Тогда
		ТоварыЕдиницаИзмеренияПриИзмененииНаСервере();
	КонецЕсли;
	
	Если ПараметрыОбработки.Свойство("Количество") Тогда
		ТоварыКоличествоПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция КонтрольКоличестваДеталейВПроизводствеПередУдалением(СтрокиТоваров)
	
	ЗапретитьУдаление = Ложь;
	
	// Получим актуальную информацию о деталях
	ТоварыВПроизводстве = АвтосервисВызовСервера.ПоказателиЗапасов(Объект.Ссылка, Объект.Товары);
	
	// Проверим каждую строку товара
	ВыделенныеСтрокиКоличество = Элементы.Товары.ВыделенныеСтроки.Количество();
	ЗадаватьВопрос = (ВыделенныеСтрокиКоличество = 1);
	Для НомерСтроки = 0 По ВыделенныеСтрокиКоличество - 1 Цикл
		
		ВыделеннаяСтрока = Элементы.Товары.ВыделенныеСтроки[НомерСтроки];
		НайденнаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		СтруктураДанныхТекущейСтроки = Новый Структура;
		СтруктураДанныхТекущейСтроки.Вставить("Строка", Неопределено);
		СтруктураДанныхТекущейСтроки.Вставить("СтрокаУдаление", НайденнаяСтрока.НомерСтроки);
		СтруктураДанныхТекущейСтроки.Вставить("Номенклатура", НайденнаяСтрока.Номенклатура);
		СтруктураДанныхТекущейСтроки.Вставить("ХарактеристикаНоменклатуры", НайденнаяСтрока.ХарактеристикаНоменклатуры);
		СтруктураДанныхТекущейСтроки.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ЕдиницаИзмерения);
		СтруктураДанныхТекущейСтроки.Вставить("Количество", НайденнаяСтрока.Количество);
		СтруктураДанныхТекущейСтроки.Вставить("Коэффициент", НайденнаяСтрока.Коэффициент);
		
		Если ЗадаватьВопрос Тогда
			СтруктураДанныхТекущейСтроки.Вставить("СтрокаИсключение", НайденнаяСтрока);
		КонецЕсли;
		
		ВПроизводстве = 0;
		Заказано = 0;
		Зарезервировано = 0;
		
		Для Каждого СтрокаПроизводства Из ТоварыВПроизводстве Цикл
			
			Если СтрокаПроизводства.ИдентификаторСтроки <> ВыделеннаяСтрока Тогда
				Продолжить;
			КонецЕсли;
			
			ВПроизводстве = ВПроизводстве + СтрокаПроизводства.ВПроизводстве;
			
			Если СтрокаПроизводства.ЗаказаноПодЗН > 0 Тогда
				Заказано = СтрокаПроизводства.ЗаказаноПодЗН;
			КонецЕсли;
			
			Если СтрокаПроизводства.ЗарезервированоПодЗН > 0 Тогда
				Зарезервировано = СтрокаПроизводства.ЗарезервированоПодЗН;
			КонецЕсли;
			
		КонецЦикла;
		
		ЗапретитьУдаление = ЗапретитьУдаление
			ИЛИ НЕ ПроверкаКоличестваДеталейВПроизводстве(
				СтруктураДанныхТекущейСтроки,
			ВПроизводстве,
			Заказано,
			Зарезервировано,
			ЗадаватьВопрос);
		
	КонецЦикла;
	
	Возврат ЗапретитьУдаление;
	
КонецФункции

&НаКлиенте
Функция ПроверкаКоличестваДеталейВПроизводстве(
		СтруктураДанныхТекущейСтроки,
		ВПроизводстве,
		Заказано,
		Зарезервировано,
		ВыводитьВопрос = Истина)
	
	ИсходнаяТаблица = Объект.Товары;
	
	Номенклатура               = СтруктураДанныхТекущейСтроки.Номенклатура;
	ХарактеристикаНоменклатуры = СтруктураДанныхТекущейСтроки.ХарактеристикаНоменклатуры;
	ЕдиницаИзмерения           = СтруктураДанныхТекущейСтроки.ЕдиницаИзмерения;
	Количество                 = СтруктураДанныхТекущейСтроки.Количество;
	Коэффициент                = СтруктураДанныхТекущейСтроки.Коэффициент;
	СтрокаТЧ                   = СтруктураДанныхТекущейСтроки.Строка;
	СтрокаУдаление             = СтруктураДанныхТекущейСтроки.СтрокаУдаление;
	
	// Если деталь уже перемещена в производство, или зарезервирована или заказана
	Если ВПроизводстве > 0 ИЛИ (Заказано + Зарезервировано) > 0 Тогда
		
		// подсчет нового итогового количества деталей в документе
		КоличествоНовое = 0;
		ПараметрыОтбора = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры",
			Номенклатура, ХарактеристикаНоменклатуры
		);
		СтрокиДетали = ИсходнаяТаблица.НайтиСтроки(ПараметрыОтбора);
		Для Каждого ТекСтрока Из СтрокиДетали Цикл
			
			Если ТекСтрока.НомерСтроки = СтрокаУдаление Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоПоСтроке = (ТекСтрока.Количество * ТекСтрока.Коэффициент);
			КоличествоНовое = КоличествоНовое + КоличествоПоСтроке;
			
		КонецЦикла;
		
		Если ВПроизводстве > 0 Тогда
			КоличествоИспользуемоеВЗН = ВПроизводстве + Заказано + Зарезервировано;
		Иначе
			КоличествоИспользуемоеВЗН = Заказано + Зарезервировано;
		КонецЕсли;
		
		КодНоменклатуры = СтрЗаменить(ПолучитьЗначениеКолонкиКода(Номенклатура), Символы.ПС, ", ");
		Смещение = 2;
		Если Прав(КодНоменклатуры, Смещение) = ", " Тогда
			КодНоменклатуры = Лев(КодНоменклатуры, СтрДлина(КодНоменклатуры) - Смещение);
		КонецЕсли;
		Недостача = КоличествоИспользуемоеВЗН - КоличествоНовое;
		Если Недостача > 0 Тогда
			МинимальноеКоличество = 0;
			Если СтрокаТЧ = Неопределено Тогда
				МинимальноеКоличество = (Недостача / Коэффициент);
			Иначе
				МинимальноеКоличество = СтрокаТЧ.Количество + (Недостача / Коэффициент);
			КонецЕсли;
			
			РазрешеноУбрать = Макс(Количество - МинимальноеКоличество, 0);
			
			ТекстСообщения = Новый Массив;
			ТекстСообщения.Добавить(СтрШаблон(НСтр("ru = 'Деталь <%1><%2>'"), КодНоменклатуры, СокрЛП(Номенклатура)));
			ТекстСообщения.Добавить(
				СтрШаблон(
					НСтр("ru = 'Допускается убрать %1 %2:'"),
					Формат(РазрешеноУбрать, "ЧДЦ=3; ЧН=0.00"),
					СокрЛП(ЕдиницаИзмерения)
					)
				);
			Если Заказано > 0 Тогда
				ТекстСообщения.Добавить(
					СтрШаблон(
						НСтр("ru = '%1Заказано %2 %3.'"),
						"	",
						Формат(Заказано /Коэффициент, "ЧДЦ=3; ЧН=0.00"),
						СокрЛП(ЕдиницаИзмерения)
					)
				);
			КонецЕсли;
			Если Зарезервировано > 0 Тогда
				ТекстСообщения.Добавить(
					СтрШаблон(
						НСтр("ru = '%1Зарезервировано %2 %3.'"),
						"	",
						Формат(Зарезервировано / Коэффициент, "ЧДЦ=3; ЧН=0.00"),
						СокрЛП(ЕдиницаИзмерения)
					)
				);
			КонецЕсли;
			Если ВПроизводстве > 0 Тогда
				ТекстСообщения.Добавить(
					СтрШаблон(
						НСтр("ru = '%1Перемещено в производство %2 %3.'"),
						"	",
						Формат(ВПроизводстве / Коэффициент, "ЧДЦ=3; ЧН=0.00"),
						СокрЛП(ЕдиницаИзмерения)
					)
				);
			КонецЕсли;
			
			Если (КонтрольКоличестваДеталейВПроизводстве = ПредопределенноеЗначение("Перечисление.ВидыКонтроля.Запрещать"))
				ИЛИ (НЕ ВыводитьВопрос
					И КонтрольКоличестваДеталейВПроизводстве =
						ПредопределенноеЗначение("Перечисление.ВидыКонтроля.Предупреждать")) Тогда
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтрСоединить(ТекстСообщения, Символы.ПС), Объект.Ссылка);
				ПодключитьОбработчикКонтроляКоличестваДеталейВПроизводстве(
					СтрокаТЧ,
					Номенклатура,
					ХарактеристикаНоменклатуры,
					ЕдиницаИзмерения,
					Количество
				);
				Возврат Ложь;
				
			ИначеЕсли КонтрольКоличестваДеталейВПроизводстве = ПредопределенноеЗначение("Перечисление.ВидыКонтроля.Предупреждать") Тогда
				ТекстСообщения.Добавить(НСтр("ru = 'Принять изменения?'"));
				
				Режим = РежимДиалогаВопрос.ДаНет;
				ПараметрыВопроса = Новый Структура;
				ПараметрыВопроса.Вставить("СтруктураДанныхТекущейСтроки", СтруктураДанныхТекущейСтроки);
				Оповещение = Новый ОписаниеОповещения(
					"КонтрольКоличестваДеталейВПроизводствеПослеЗакрытияВопроса",
					ЭтотОбъект,
					ПараметрыВопроса
				);
				ПоказатьВопрос(Оповещение, СтрСоединить(ТекстСообщения, Символы.ПС), Режим, 0);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПоказателиТоваров(Форма)
	
	ДопПараметры = Новый Структура();
	ДокументОснование = Форма.Объект.ДокументОснование;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
		И ЗначениеЗаполнено(ДокументОснование) Тогда
	
		ДопПараметры.Вставить("Заказ", ДокументОснование);
	
	КонецЕсли;
	
	ПоказателиЗапасов = АвтосервисВызовСервера.ПоказателиЗапасов(Форма.Объект.Ссылка, Форма.Объект.Товары, ДопПараметры);
	
	Для Каждого Показатель Из ПоказателиЗапасов Цикл
		
		Строка = Форма.Объект.Товары.НайтиПоИдентификатору(Показатель.ИдентификаторСтроки);
		
		Коэффициент         = ?(Строка.Коэффициент = 0, 1, Строка.Коэффициент);
		ОстатокНаСкладе     = Показатель.ОстатокНаСкладе;
		Заказано            = Показатель.Заказано;
		Зарезервировано     = Показатель.Зарезервировано;
		ВПроизводстве       = Показатель.ВПроизводстве;
		ОсталосьПереместить = Показатель.ОсталосьПереместить;
		ВозможноПереместить = Показатель.ВозможноПереместить;
		
		Строка.ОстатокНаСкладе     = ОстатокНаСкладе;
		Строка.ВПроизводстве       = ВПроизводстве/Коэффициент;
		Строка.Заказано            = Заказано/Коэффициент;
		Строка.ВРезерве            = Зарезервировано/Коэффициент;
		Строка.ОсталосьПереместить = ОсталосьПереместить/Коэффициент;
		Строка.ВозможноПереместить = ВозможноПереместить/Коэффициент;
		
	КонецЦикла;
	
	Если НЕ Форма.Элементы.ТоварыПодсветка.Пометка Тогда
		
		Для Каждого СтрокаТоваров Из Форма.Объект.Товары Цикл
			СтрокаТоваров.ЦветРаскраскиСтроки = "стандарт";
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	ОбновитьРаскраскуТоваровПоПоказателям(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьРаскраскуТоваровПоПоказателям(Форма)
	
	Для Каждого СтрокаТоваров Из Форма.Объект.Товары Цикл
		
		Если СтрокаТоваров.ОсталосьПереместить = 0 Тогда
			
			СтрокаТоваров.ЦветРаскраскиСтроки = "ПолностьюОтгружена";
			
		ИначеЕсли СтрокаТоваров.ОсталосьПереместить <= СтрокаТоваров.ВозможноПереместить И СтрокаТоваров.Заказано = 0 Тогда
			
			Если СтрокаТоваров.ВРезерве >= СтрокаТоваров.ОсталосьПереместить Тогда
				
				СтрокаТоваров.ЦветРаскраскиСтроки = "ПолученаПоЗаказуКлиента";
				
			Иначе
				
				СтрокаТоваров.ЦветРаскраскиСтроки = "ИмеетсяНаСкладе";
				
			КонецЕсли;
			
		ИначеЕсли СтрокаТоваров.ОсталосьПереместить <= (СтрокаТоваров.Заказано+СтрокаТоваров.ВозможноПереместить) Тогда
			
			СтрокаТоваров.ЦветРаскраскиСтроки = "РаспределенаУПоставщика";
			
		Иначе
			
			СтрокаТоваров.ЦветРаскраскиСтроки = "ТребуетсяЗаказать";
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура МатериалыЗаказчикаУстановитьВидимостьКолонок()
	
	УстановитьВидимость = Ложь;
	Для Каждого МатериалыЗаказчикаСтрока Из Объект.МатериалыЗаказчика Цикл
		
		Если ТипЗнч(МатериалыЗаказчикаСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			УстановитьВидимость = Истина;
			МатериалыЗаказчикаСтрока.Код              = МатериалыЗаказчикаСтрока.Номенклатура.Код;
			МатериалыЗаказчикаСтрока.Артикул          = МатериалыЗаказчикаСтрока.Номенклатура.Артикул;
			МатериалыЗаказчикаСтрока.ЕдиницаИзмерения = МатериалыЗаказчикаСтрока.Номенклатура.ОсновнаяЕдиницаИзмерения;
			МатериалыЗаказчикаСтрока.Коэффициент      = МатериалыЗаказчикаСтрока.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент;
			
		Иначе
			
			МатериалыЗаказчикаСтрока.Код     = "";
			МатериалыЗаказчикаСтрока.Артикул = "";
			МатериалыЗаказчикаСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
			МатериалыЗаказчикаСтрока.Коэффициент      = 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.МатериалыЗаказчикаКод.Видимость                        = УстановитьВидимость;
	Элементы.МатериалыЗаказчикаАртикул.Видимость                    = УстановитьВидимость;
	Элементы.МатериалыЗаказчикаЕдиницаКоэффициент.Видимость         = УстановитьВидимость;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеАвторабот(Знач Объект, ИспользоватьПричиныОбращений, Отказ, ПараметрыЗаписи)
	
	// Создадим структуру отбора для проверки уникальности реквизитов
	ПоляПоискаДублей = Новый Структура();
	ПоляПоискаДублей.Вставить("Авторабота");
	Если ИспользоватьПричиныОбращений Тогда
		ПоляПоискаДублей.Вставить("ИдентификаторПричиныОбращения");
	КонецЕсли;
	
	// Подготовим списки для накопления сведений о дублирующихся строках
	СписокНайденныхДублей = Новый Массив;
	ОбработанныеСтроки    = Новый Соответствие;
	
	// Идем по табличной части
	Для каждого СтрокаТабличнойЧасти Из Объект.Автоработы Цикл
		
		// Пропустим строки уже попавшие в черный список
		Если НЕ ОбработанныеСтроки.Получить(СтрокаТабличнойЧасти)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Производим поиск строк удовлетворяющих структуре отбора
		ЗаполнитьЗначенияСвойств(ПоляПоискаДублей, СтрокаТабличнойЧасти);
		НайденныеСтроки = Объект["Автоработы"].НайтиСтроки(ПоляПоискаДублей);
		
		// Если нашли и их больше 1, то строки не уникальные
		Если НайденныеСтроки.Количество() > 1 Тогда
			
			// Определим номера дублирующихся строк и занесем их в черный список
			НомераСтрокДублей = "";
			Для каждого НайденныйДубль Из НайденныеСтроки Цикл
				НомераСтрокДублей = НомераСтрокДублей + ", " + СокрЛП(НайденныйДубль.НомерСтроки);
				ОбработанныеСтроки.Вставить(НайденныйДубль, ИСТИНА);
			КонецЦикла;
			
			// Запоминаем номера найденных дублей
			СписокНайденныхДублей.Добавить(Сред(НомераСтрокДублей, 3));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокНайденныхДублей.Количество() > 0 Тогда
		
		ПредставленияПолей = Новый Массив();
		ПредставленияСтрок = Новый Массив();
		
		Для Каждого УникальныйРеквизитТаблицы Из ПоляПоискаДублей Цикл
			
			ПредставленияПолей.Добавить(УникальныйРеквизитТаблицы.Ключ);
			
		КонецЦикла;
		
		Для Каждого НайденныеДубли Из СписокНайденныхДублей Цикл
			
			ПредставленияСтрок.Добавить(СтрШаблон(НСтр("ru = 'Строки: %1'"), НайденныеДубли));
			
		КонецЦикла;
		
		ШаблонСообщения = СтрШаблон (
			НСтр("ru = 'Строки таблицы ""Автоработы"" не уникальны по значению полей (%1)
				|%2'"),
			СтрСоединить(ПредставленияПолей, ", "),
			СтрСоединить(ПредставленияСтрок, Символы.ПС)
		);

		ОбщегоНазначенияКлиент.СообщитьПользователю(ШаблонСообщения,Объект.Ссылка,"Автоработы",,Отказ);
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаСервере
Функция ЗаказыДляТовара()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателя.Ссылка КАК ЗаказПокупателя
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.ДокументОснование = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказНаряд.ДокументОснование
	               |ИЗ
	               |	Документ.ЗаказНаряд КАК ЗаказНаряд
	               |ГДЕ
	               |	ЗаказНаряд.Ссылка = &Ссылка
	               |	И НЕ (ВЫРАЗИТЬ(ЗаказНаряд.ДокументОснование КАК Документ.ЗаказПокупателя)) = NULL";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	ТЗЗаказПокупателя = Запрос.Выполнить().Выгрузить();
	СписокЗаказПокупателя = Новый СписокЗначений;
	СписокЗаказПокупателя.ЗагрузитьЗначения(ТЗЗаказПокупателя.ВыгрузитьКолонку("ЗаказПокупателя"));
	
	Возврат СписокЗаказПокупателя;
	
КонецФункции

&НаСервере
Процедура УстановитьДополнительныеПараметрыДокумента(ОбъектЗаказНаряд, ПараметрыЗаписи)
	
	// подготовим таблицу состава причин
	СоставПричинОбращения = Объект.Автоработы.Выгрузить(, "ИдентификаторРаботы,ИдентификаторПричиныОбращения");
	СоставПричинОбращения.Колонки.ИдентификаторРаботы.Имя = "Авторабота";
	СоставПричинОбращения.Колонки.ИдентификаторПричиныОбращения.Имя = "ПричинаОбращения";
	
	ОбъектЗаказНаряд.ДополнительныеСвойства.Вставить("СоставПричинОбращения", СоставПричинОбращения);
	
	// Подготовим таблицу пакетов работ
	Если ИзмененыПакетыРабот Тогда
		
		// Удалим из рассмотрения автоработы по субподряду
		КопияАвторабот = Объект.Автоработы.Выгрузить();
		КопияАвторабот.Очистить();
		
		Для Каждого Строка Из Объект.Автоработы Цикл
			
			Если ЗначениеЗаполнено(Строка.Контрагент) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(КопияАвторабот.Добавить(), Строка);
			
		КонецЦикла;
		
		// Проверим были ли изменения состава пакета работ.
		Если ТекущаяИнформацияОПакетах.Количество() = КопияАвторабот.Количество() Тогда
			ПакетыРаботИзменены = Ложь;
			Отбор = Новый Структура("ИдентификаторРаботы");
			Для Каждого Авторабота Из КопияАвторабот Цикл
				Отбор.ИдентификаторРаботы = Авторабота.ИдентификаторРаботы;
				НайденныеЗначения = ТекущаяИнформацияОПакетах.НайтиСтроки(Отбор);
				Если НайденныеЗначения.Количество() > 0 Тогда
					Для Каждого ТекущаяСтрока Из НайденныеЗначения Цикл
						Если ТекущаяСтрока.ПакетРабот <> Авторабота.ПакетРабот
							ИЛИ ТекущаяСтрока.Представление <> Авторабота.Представление
							ИЛИ ТекущаяСтрока.НомерПакета <> Авторабота.НомерПакета
							ИЛИ ТекущаяСтрока.ТекущиеИсполнители <> Авторабота.ТекущиеИсполнители Тогда
							ПакетыРаботИзменены = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					ПакетыРаботИзменены = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ПакетыРаботИзменены Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ОбъектЗаказНаряд.ДополнительныеСвойства.Вставить("ПакетыРабот", КопияАвторабот);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СобытиеОшибкиДокумента()
	
	#Если НЕ ТонкийКлиент И НЕ ВебКлиент И НЕ МобильныйКлиент И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
		МодульОбщегоНазначения = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначения");
	#Иначе
		МодульОбщегоНазначения = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбщегоНазначенияКлиент");
	#КонецЕсли
	
	Возврат НСтр("ru = 'Заказ-наряд.Ошибка записи документа'", МодульОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеПричиныОбращенияНаСервере(ТекущаяСтрока, ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ПричиныОбращения.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТекущиеДанные.ПричинаОбращения.Пустая() Тогда
		
		ТекущиеДанные.ПричинаОбращения = Справочники.ПричиныОбращений.Прочее;
		
		ДопПараметры = Новый Структура("Документ", Объект.СводныйРемонтныйЗаказ);
		
		ЗаполнитьЗначенияСвойств(
			ТекущиеДанные,
			ПричиныОбращенийСлужебныйВызовСервера.ДанныеСтрокиПричиныОбращения(ТекущиеДанные.ПричинаОбращения, ДопПараметры),
			,
			"ПричинаОбращенияСодержание");
		
	КонецЕсли;
	
	Документы.ЗаказНаряд.ПричиныОбращенияПричинаОбращенияПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПричиныОбращения(ТекущиеДанные)
	
	ПричинаОбращенияИзменилась = Ложь;
	
	ПараметрыДействия = Новый Структура;
	ОбработатьИзменениеПричиныОбращенияНаСервере(ТекущиеДанные.ПолучитьИдентификатор(), ПараметрыДействия);
	
	ДругиеИсточники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные);
	ПродолжитьЗаполнение = Истина;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИзменилсяВидРемонта", Ложь) Тогда
		
		ПродолжитьЗаполнение = НЕ СвязанныеРаботыКлиент
			.НачатьЗаполнениеПоВидуРемонта(Объект, ЭтотОбъект, ПараметрыДействия, ДругиеИсточники);
		
	КонецЕсли;
	
	Если ПродолжитьЗаполнение Тогда
		
		ПараметрыОткрытия = Новый Структура("Автомобиль", Автомобиль);
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(Объект, ДругиеИсточники, ЭтотОбъект, ПараметрыОткрытия);
		
	КонецЕсли;
	
КонецПроцедуры

// Производит настройку условного оформления формы.
//
&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформление(ЭтотОбъект);
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеСуммыВсего(ЭтотОбъект);

	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		"МатериалыЗаказчикаХарактеристикаНоменклатуры",
		"Объект.МатериалыЗаказчика.ВладелецХарактеристики"
	);
	
	СкидкиНаценкиСервер.УстановитьУсловноеОформление(
		ЭтотОбъект,
		СкидкиНаценкиСервер.ПараметрыУстановкиУсловногоОформления(ЭтотОбъект)
	);
	
	// Настройка шапки пакетов работ
	
	// ПакетыРаботНомерКартинкиСостоянияПакетаРабот - отображать
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПакетыРаботНомерКартинкиСостоянияПакетаРабот.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПакетыРабот.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Истина);
	
	// ПакетыРаботПредставлениеПакетаРабот - отображать
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПакетыРаботПредставлениеПакетаРабот.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПакетыРабот.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Истина);
	
	// ПакетыРаботНомерКартинкиСостоянияПакетаРабот - не отображать
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПакетыРаботНомерКартинкиСостоянияПакетаРабот.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПакетыРабот.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// ПакетыРаботПредставлениеПакетаРабот  - не отображать
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПакетыРаботПредставлениеПакетаРабот.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПакетыРабот.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// ПакетыРаботАвторабота - отображать
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПакетыРаботАвторабота.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПакетыРабот.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Истина);
	
	// ПакетыРаботАвторабота  - не отображать
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПакетыРаботАвторабота.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПакетыРабот.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Отображение автоработы с субподрядом
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Автоработы.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Автоработы.Контрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста",  WebЦвета.Серый);
	
	// Раскраска товаров
	Раскраска = Новый Соответствие;
	Раскраска.Вставить("ПолученаПоЗаказуКлиента", ЦветаСтиля.ЗаказНарядТоварыПолученаПоЗаказуКлиента);
	Раскраска.Вставить("ИмеетсяНаСкладе", ЦветаСтиля.ЗаказНарядТоварыИмеетсяНаСкладе);
	Раскраска.Вставить("РаспределенаУПоставщика", ЦветаСтиля.ЗаказНарядТоварыРаспределенаУПоставщика);
	Раскраска.Вставить("ПолностьюОтгружена", ЦветаСтиля.ЗаказНарядТоварыПолностьюОтгружена);
	Раскраска.Вставить("ТребуетсяЗаказать", ЦветаСтиля.ЗаказНарядТоварыТребуетсяЗаказать);

	Для Каждого Строка Из Раскраска Цикл
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЦветРаскраскиСтроки");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Строка.Ключ;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Строка.Значение);
	КонецЦикла;

	// Запрет редактирования - ТоварыСумма
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТоварыСуммаВсегоТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Запрет редактирования - АвтоработыСумма
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвтоработыСумма.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТоварыСуммаВсегоТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Запрет редактирования - АвтоработыСуммаВсего
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвтоработыСуммаВсего.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТоварыСуммаВсегоТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	

	// выделение незаполненных работ
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Автоработы.Контрагент");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Отбор.Использование = Истина;
	
	Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Автоработы.Исполнители");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Отбор.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("TextColor", ЦветаСтиля.ЦветГрадацияСПАРКВысокийРиск);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Text", НСтр("ru = '<необходимо указать исполнителей>'"));
	
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.АвтоработыИсполнители.Имя);
	
	// выделение работ по субподряду
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Автоработы.Контрагент");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Отбор.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("TextColor", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Text", НСтр("ru = '<работа выполняется по субподряду>'"));
	
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.АвтоработыИсполнители.Имя);
	
	// текст пустого субподряда
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Автоработы.Контрагент");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Отбор.Использование = Истина;
	
	Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Состояние");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	Отбор.ПравоеЗначение = Справочники.ВидыСостоянийЗаказНарядов.Закрыт;
	Отбор.Использование = Истина;
	
	Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Состояние");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	Отбор.ПравоеЗначение = Справочники.ВидыСостоянийЗаказНарядов.Выполнен;
	Отбор.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("TextColor", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Text", НСтр("ru = '<выбрать субподрядчика>'"));
	
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.АвтоработыСубподряд.Имя);
	
	// текст пустых материалов
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Автоработы.Материалы");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Отбор.Использование = Истина;
	
	Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Состояние");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	Отбор.ПравоеЗначение = Справочники.ВидыСостоянийЗаказНарядов.Закрыт;
	Отбор.Использование = Истина;
	
	Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Состояние");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	Отбор.ПравоеЗначение = Справочники.ВидыСостоянийЗаказНарядов.Выполнен;
	Отбор.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("TextColor", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Text", НСтр("ru = '<выбрать материалы>'"));
	
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.АвтоработыМатериалы.Имя);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАктивнуюТабличнуюЧасть(Назначение)
	
	ТаблицаНазначение = ПолучитьЗначениеПараметраСтруктуры(Назначение, "ИмяТаблицы");
	СтрокаНазначение = ПолучитьЗначениеПараметраСтруктуры(Назначение, "ИдентификаторСтроки", 0);
	
	Если НЕ ЗначениеЗаполнено(ТаблицаНазначение) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтраницаНазначение = Неопределено;
	ТаблицаФильтр = Неопределено;
	ТаблицаИсточник = Неопределено;
	ЭлементНазначение = Неопределено;
	
	Если ТаблицаНазначение = "Товары" Тогда
		
		СтраницаНазначение = Элементы.СтраницаТовары;
		ТаблицаФильтр = Элементы.ПричиныОбращенияТовары;
		ТаблицаИсточник = Объект.Товары;
		ЭлементНазначение = Элементы.Товары;
		
	ИначеЕсли ТаблицаНазначение = "Автоработы" Тогда
		
		СтраницаНазначение = Элементы.СтраницаРаботы;
		ТаблицаФильтр = Элементы.ПричиныОбращенияАвтоработы;
		ТаблицаИсточник = Объект.Автоработы;
		ЭлементНазначение = Элементы.Автоработы;
		
	ИначеЕсли ТаблицаНазначение = "Материалы" Тогда
		
		СтраницаНазначение = Элементы.СтраницаМатериалыЗаказчика;
		ТаблицаИсточник = Объект.МатериалыЗаказчика;
		ЭлементНазначение = Элементы.МатериалыЗаказчика;
		
	ИначеЕсли ТаблицаНазначение = "ВспомогательнаяАРЗН" Тогда
		
		СтраницаНазначение = Элементы.СтраницаВспомогательныеРаботы;
		ТаблицаИсточник = Объект.ВспомогательныеАвтоработы;
		ЭлементНазначение = Элементы.ВспомогательныеАвтоработы;
		
	КонецЕсли;
	
	Если ТаблицаИсточник = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеСтрокиНазначения = ТаблицаИсточник.НайтиПоИдентификатору(СтрокаНазначение);
	
	Если ДанныеСтрокиНазначения = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаФильтр = Неопределено;
	Если ТаблицаФильтр <> Неопределено Тогда
		
		Условие = Новый Структура("ИдентификаторПричиныОбращения", ДанныеСтрокиНазначения.ИдентификаторПричиныОбращения);
		ПоУсловию = Объект.ПричиныОбращения.НайтиСтроки(Условие);
		
		Если ПоУсловию.Количество() Тогда
			
			СтрокаФильтр = ПоУсловию[0].ПолучитьИдентификатор();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.Страницы.ТекущаяСтраница = СтраницаНазначение;
	
	Если СтрокаФильтр <> Неопределено Тогда
		
		ТаблицаФильтр.ТекущаяСтрока = СтрокаФильтр;
		
	КонецЕсли;
	
	ЭлементНазначение.ТекущаяСтрока = СтрокаНазначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиКоличествоСтрок(Таблица = Неопределено)
	
	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	ВыводитьОбщееКоличество = НЕ(ИмяТекущейСтраницы = "СтраницаРаботы" ИЛИ ИмяТекущейСтраницы = "СтраницаТовары");
	
	Если Таблица = Неопределено Тогда
		УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.Автоработы,, НЕ ВыводитьОбщееКоличество);
		УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.Товары,,     НЕ ВыводитьОбщееКоличество);
	Иначе
		УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Таблица,, НЕ ВыводитьОбщееКоличество);
	КонецЕсли;
	
КонецПроцедуры // ВывестиКоличествоСтрок()

&НаСервере
Процедура УРВУдалитьЗаписиПоУдаленнымПакетам(Документ)
	
	Если ЗначениеЗаполнено(Документ.Ссылка) И УдаляемыеПакеты.Количество() > 0 Тогда
		ПодтвержденоУдаление = Новый Массив;
		Для Каждого УдаляемыйПакет Из УдаляемыеПакеты Цикл
			Если Объект.Автоработы.НайтиСтроки(Новый Структура("ПакетРабот", УдаляемыйПакет.Значение)).Количество() = 0
				И ПодтвержденоУдаление.Найти(УдаляемыйПакет.Значение) = Неопределено Тогда
				
				ПодтвержденоУдаление.Добавить(УдаляемыйПакет.Значение);
				
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей = РегистрыСведений.ФактическоеВремя.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЗаказНаряд.Установить(Документ.Ссылка);
		НаборЗаписей.Прочитать();
		
		ПакетыРаботПоФакту = Новый Массив;
		Для Каждого Запись Из НаборЗаписей Цикл
			Если ПодтвержденоУдаление.Найти(Запись.ПакетРабот) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Запись.Состояние = Справочники.ВидыОтметокВремени.РаботаПоУдаленномуПакету;
			ПакетыРаботПоФакту.Добавить(Запись.ПакетРабот);
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
		
		// Закроем пакеты
		Для Каждого УдаляемыйПакет Из ПодтвержденоУдаление Цикл
			Если ПакетыРаботПоФакту.Найти(УдаляемыйПакет) = Неопределено
				И НЕ РаботаСПакетамиРаботКлиентСервер.ЭтоПустойПакетРабот(УдаляемыйПакет)
				И ТекущаяИнформацияОПакетах.НайтиСтроки(Новый Структура("ПакетРабот", УдаляемыйПакет)).Количество() > 0 Тогда
				ИзменитьСтатусПакетаРабот(УдаляемыйПакет, Справочники.ВидыСостоянийПакетовРабот.Закрыт);
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПакетыРабот" , ПодтвержденоУдаление);
		Запрос.УстановитьПараметр("Ссылка"      , Документ.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказНарядРаботы.ИдентификаторРаботы КАК ИдентификаторРаботы,
		|	ЗаказНарядРаботы.Авторабота КАК Авторабота,
		|	ЗаказНарядРаботы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ СписокАвторабот
		|ИЗ
		|	Документ.ЗаказНаряд.Автоработы КАК ЗаказНарядРаботы
		|ГДЕ
		|	ЗаказНарядРаботы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокАвторабот.Авторабота КАК Работа,
		|	СоставПакетовРабот.ПакетРабот КАК ПакетРабот
		|ИЗ
		|	СписокАвторабот КАК СписокАвторабот
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставПакетовРабот КАК СоставПакетовРабот
		|		ПО СписокАвторабот.ИдентификаторРаботы = СоставПакетовРабот.Авторабота
		|			И СписокАвторабот.Ссылка = СоставПакетовРабот.ЗаказНаряд
		|			И (СоставПакетовРабот.ПакетРабот В (&ПакетыРабот))
		|ИТОГИ ПО
		|	ПакетРабот";
		ВыборкаПакеты = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ТекстЗаписи = Новый Массив;
		Пока ВыборкаПакеты.Следующий() Цикл
			ВыборкаРабот = ВыборкаПакеты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			МассивСостава = Новый Массив;
			Пока ВыборкаРабот.Следующий() Цикл
				МассивСостава.Добавить(Строка(ВыборкаРабот.Работа));
			КонецЦикла;
			
			ТекстЗаписи.Добавить(
				СтрШаблон(НСтр("ru = 'Удален пакет %1 в составе: %2%3'"),
				Строка(ВыборкаПакеты.ПакетРабот),
				Символы.ПС,
				СтрСоединить(МассивСостава, ";")));
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(ТекстЗаписи) Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Удаление пакета работ'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Примечание,
				Метаданные.Документы.ЗаказНаряд,
				Документ.Ссылка,
				СтрСоединить(ТекстЗаписи, Символы.ПС));
		КонецЕсли;
	КонецЕсли;
	УдаляемыеПакеты.Очистить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьУслугиПоСубподряду(Документ, Контрагент, ДоговорВзаиморасчетов)
	
	Результат = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоступлениеТоваров.Ссылка КАК Ссылка,
	|	ПоступлениеТоваров.Номер КАК Номер,
	|	ПоступлениеТоваров.Дата КАК Дата
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|ГДЕ
	|	ПоступлениеТоваров.ДокументОснование = &ДокументОснование
	|	И ПоступлениеТоваров.ХозОперация = &ХозОперация
	|	И ПоступлениеТоваров.Контрагент = &Контрагент
	|	И ПоступлениеТоваров.ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
	|	И НЕ ПоступлениеТоваров.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеТоваров.ДатаСоздания УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументОснование", Документ);
	Запрос.УстановитьПараметр("ХозОперация", Справочники.ХозОперации.УслугиПоСубподряду);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов);
	
	ТаблицаПоступлений = Запрос.Выполнить().Выгрузить();
	Если ТаблицаПоступлений.Количество() Тогда
		Результат = Новый Структура("Ссылка,Номер,Дата");
		ЗаполнитьЗначенияСвойств(Результат, ТаблицаПоступлений[0]);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОтменаВсехЗаказовИРезервовПродолжение()
	
	Заказы = Новый Массив;
	ПолучитьЗаказыПокупателя(Заказы);
	
	Если НЕ Заказы.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	// Создаем Корректировку для каждого из заказов.
	Для Каждого Заказ Из Заказы Цикл
		
		ПараметрыФормы = Новый Структура("Основание, ОтменаЗаказовИРезервов", Заказ, Истина);
		
		Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказВнутренний") Тогда
			
			ПараметрыФормы.Вставить("ХозОперация",
				ПредопределенноеЗначение("Справочник.ХозОперации.КорректировкаЗаказаВнутреннее"));
			
		КонецЕсли;
		
		ОткрытьФорму(
			ПолучитьИмяОткрываемойФормы(Заказ, ПараметрыФормы),
			ПараметрыФормы,
			ЭтотОбъект,
			Новый УникальныйИдентификатор
		);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяОткрываемойФормы(Заказ, ПараметрыФормы)
	
	Если Заказ.ХозОперация = Справочники.ХозОперации.ЗаказРезервированиеПокупателя
		ИЛИ Заказ.ХозОперация = Справочники.ХозОперации.РезервированиеПокупателя
		ИЛИ Заказ.ХозОперация = Справочники.ХозОперации.РезервированиеВнутреннее
		ИЛИ Заказ.ХозОперация = Справочники.ХозОперации.ЗаказРезервированиеВнутренние Тогда
		
		ИмяФормы = "Документ.СнятиеРезервовЗаказовПокупателя.ФормаОбъекта";
		ПараметрыФормы.Вставить("КорректировкаЗаказа", Истина);
		
	Иначе
		
		ИмяФормы = "Документ.КорректировкаЗаказаПокупателя.ФормаОбъекта";
		
	КонецЕсли;
	
	Возврат ИмяФормы;
	
КонецФункции

&НаКлиенте
Процедура ОтменаВсехЗаказовИРезервовОповещение(Результат, ДопПараметры = Неопределено) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Записать();
	Исключение
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось сохранить документ. Операция отменена.'"));
		Возврат;
	КонецПопытки;
	
	ОтменаВсехЗаказовИРезервовПродолжение();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗаказыПокупателя(Заказы)
	
	ДопОтбор = "";
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ДопОтбор = " ИЛИ Заказ = &ЗаказОснование";
	КонецЕсли;
	
	ОснованиеСводногоРемонтногоЗаказа = Объект.СводныйРемонтныйЗаказ.ДокументОснование;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЗаказыПокупателейОстатки.Заказ КАК Документ.ЗаказПокупателя) КАК Заказ
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(
	|			,
	|			Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И Заказ.ДокументОснование = &ДокументОснование" + ДопОтбор + ") КАК ЗаказыПокупателейОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЗаказыПокупателейОстатки.Заказ КАК Документ.ЗаказВнутренний) КАК Заказ
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(
	|			,
	|			Заказ ССЫЛКА Документ.ЗаказВнутренний
	|				И Заказ.ДокументОснование = &ДокументОснование" + ДопОтбор + ") КАК ЗаказыПокупателейОстатки";
	
	Если ТипЗнч(ОснованиеСводногоРемонтногоЗаказа) = Тип("ДокументСсылка.ЗаявкаНаРемонт")
		И ЗначениеЗаполнено(ОснованиеСводногоРемонтногоЗаказа) Тогда
		
		Запрос.Текст = Запрос.Текст + "
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ЗаказыПокупателейОстатки.Заказ КАК Документ.ЗаказПокупателя) КАК Заказ
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Остатки(
	               |			,
	               |			Заказ ССЫЛКА Документ.ЗаказПокупателя
	               |				И Заказ.ДокументОснование = &ОснованиеСводногоРемонтногоЗаказа) КАК ЗаказыПокупателейОстатки";
		
		Запрос.УстановитьПараметр("ОснованиеСводногоРемонтногоЗаказа", ОснованиеСводногоРемонтногоЗаказа);
		
	КонецЕсли;
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("ЗаказОснование",    Объект.ДокументОснование);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если НЕ РезультатыЗапроса[0].Пустой() Тогда
		
		Выборка = РезультатыЗапроса[0].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Заказ = NULL Тогда
				Продолжить;
			КонецЕсли;
			
			Заказы.Добавить(Выборка.Заказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если РезультатыЗапроса.Количество() > 1 И НЕ РезультатыЗапроса[1].Пустой() Тогда
		
		Выборка = РезультатыЗапроса[1].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Заказ = NULL Тогда
				Продолжить;
			КонецЕсли;
			
			Заказы.Добавить(Выборка.Заказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ Заказы.Количество() Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'По заказ-наряду <%1> нет заказов/резервов.'"),
				Объект.Ссылка
			)
		);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьШаблонСообщенияУведомления(ТекущийОбъект)
	
	// Проверим состояние для отправки СМС
	ШаблонСМС = Неопределено;
	ТекущееСостояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.Ссылка, "Состояние");
	Если ТекущийОбъект.Состояние <> ТекущееСостояние Тогда
		
		СогласиеНаРассылкуСМС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ТекущийОбъект.СводныйРемонтныйЗаказ, "Заказчик.СогласиеНаПолучениеSMS");
		
		Если СогласиеНаРассылкуСМС <> Истина Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеВидаРемонта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ТекущийОбъект.ВидРемонта, "ОтправлятьУведомления,НастройкаУведомлений");
		
		Если НЕ ДанныеВидаРемонта.ОтправлятьУведомления Тогда
			Возврат;
		КонецЕсли;
		
		НастройкаУведомлений = ДанныеВидаРемонта.НастройкаУведомлений.Выгрузить();
		НайденнаяСтрока = НастройкаУведомлений.Найти(ТекущийОбъект.Состояние, "СостояниеЗаказНаряда");
		
		Если НайденнаяСтрока <> Неопределено Тогда
			ШаблонСМС = НайденнаяСтрока.ШаблонСообщения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьШаблонСообщенияУведомления()

&НаСервере
Процедура ОбработкаРезультатаЗагрузкиИзВнешнегоКаталога(АдресЗагрузки, ДополнительныеПараметры)
	
	МассивАвторабот.Очистить();
	ИдентификаторПричиныОбращения = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеПараметры, "ИдентификаторПричиныОбращения", Неопределено);
	ЕстьИдентификаторПричиныОбращения = (НЕ ИдентификаторПричиныОбращения = Неопределено);
	
	ПараметрыДействия = Документы.ЗаказНаряд.ПолучитьПараметрыДействия(Объект);
	ПараметрыДействия.Вставить("НеРассчитыватьБонусы", Истина);
	
	// Заблокируем пересчет скидок
	ПересчитатьСкидки = Ложь;
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеРассчитыватьСкидки", Ложь) Тогда
		ПересчитатьСкидки = Истина;
		ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	КонецЕсли;
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("ПараметрыДействия", ПараметрыДействия);
	
	Если ЕстьИдентификаторПричиныОбращения Тогда
		ПараметрыЗагрузки.Вставить("ИдентификаторПричиныОбращения", ИдентификаторПричиныОбращения);
	КонецЕсли;
	
	Автосервис.ЗагрузитьДанныеИзВнешнихКаталогов(ЭтотОбъект, Объект, АдресЗагрузки, ПараметрыЗагрузки);
	
	Если НЕ ПараметрыЗагрузки.Свойство("РезультатЗагрузки") Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗагрузки = ПараметрыЗагрузки.РезультатЗагрузки;
	
	Если ИспользоватьУчетРабочегоВремени И РезультатЗагрузки.СписокНовыхСтрокАвторабот.Количество() > 0 Тогда
		Для Каждого ТекущаяСтрока Из РезультатЗагрузки.СписокНовыхСтрокАвторабот Цикл
			ДобавитьНовуюАвтоработуВПакет(ТекущаяСтрока);
		КонецЦикла;
		ИзмененыПакетыРабот = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивАвторабот, РезультатЗагрузки.МассивАвторабот);
	
	Если ПересчитатьСкидки Тогда
		ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
		Если РезультатЗагрузки.ЗагруженыАвтоработы Тогда
			СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "Автоработы");
		КонецЕсли;
		Если РезультатЗагрузки.ЗагруженыТовары Тогда
			СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия);
		КонецЕсли;
	КонецЕсли;
	
	ПерерасчетСуммыСкидкиБонусами();
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаРезультатаЗагрузкиИзВнешнегоКаталога()

&НаКлиенте
Функция ЗаполнитьКодыМаркировкиДляПроверки()
	
	Возврат ЗаполнитьКодыМаркировкиДляПроверкиНаСервере(Объект.Ссылка);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьКодыМаркировкиДляПроверкиНаСервере(Ссылка)
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МаркировкаТоваровВПроизводствеОстатки.GTIN КАК GTIN,
	|	МаркировкаТоваровВПроизводствеОстатки.СерийныйНомер КАК СерийныйНомер
	|ИЗ
	|	РегистрНакопления.МаркировкаТоваровВПроизводстве.Остатки(, ЗаказНаряд = &ЗаказНаряд) КАК МаркировкаТоваровВПроизводствеОстатки";
	Запрос.УстановитьПараметр("ЗаказНаряд", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(СтрШаблон("(01)%1(21)%2", Выборка.GTIN, Выборка.СерийныйНомер));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДаннымиСводногоРемонтногоЗаказа(НачальноеЗаполнение = Ложь, ПерезаполнитьДаннымиДокумента = Истина)
	
	// Заполнение только по наличии настройки
	Если НЕ АвтоматическиСоздаватьСводныйРемонтныйЗаказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НачальноеЗаполнение Тогда
		
		Если ЗначениеЗаполнено(Объект.Ссылка)
			ИЛИ ЗначениеЗаполнено(Объект.СводныйРемонтныйЗаказ) Тогда
			
			// Берем данные из Сводного ремонтного заказа
			СводныйРемонтныйЗаказДокумент = Объект.СводныйРемонтныйЗаказ.ПолучитьОбъект();
			
		Иначе
			
			// Получаем из заявки на ремонт, если создается по команде
			ДокументЗаполнения = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Основание", Неопределено);
			
			СводныйРемонтныйЗаказДокумент = Документы.СводныйРемонтныйЗаказ.СоздатьДокумент();
			СводныйРемонтныйЗаказДокумент.Заполнить(ДокументЗаполнения);
			
		КонецЕсли;
		
	ИначеЕсли ПерезаполнитьДаннымиДокумента Тогда
		
		СводныйРемонтныйЗаказДокумент = Объект.СводныйРемонтныйЗаказ.ПолучитьОбъект();
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.СводныйРемонтныйЗаказ) Тогда
			СводныйРемонтныйЗаказДокумент = Объект.СводныйРемонтныйЗаказ.ПолучитьОбъект();
		Иначе
			// Создаем новый документ
			СводныйРемонтныйЗаказДокумент = Документы.СводныйРемонтныйЗаказ.СоздатьДокумент();
			СводныйРемонтныйЗаказДокумент.Заполнить(Неопределено);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(
			СводныйРемонтныйЗаказДокумент,
			СводныйРемонтныйЗаказ,
			"Заказчик,Автомобиль,ПредставлениеТелефона");
		
	КонецЕсли;
	
	ЗначениеВДанныеФормы(СводныйРемонтныйЗаказДокумент, СводныйРемонтныйЗаказ);
	
	// Обновим КИ
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		СводныйРемонтныйЗаказ.Заказчик,
		ЭтотОбъект,
		"Телефон,АдресЭлектроннойПочты",
		"ПредставлениеТелефона,АдресЭлектроннойПочты");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаПерезаполненияАвтомобиля(РезультатОповещения, ДополнительныеПараметры) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		СводныйРемонтныйЗаказ.Автомобиль = ПредопределенноеЗначение("Справочник.Автомобили.ПустаяСсылка");
		СводныйРемонтныйЗаказЗаказчикПриИзмененииНаСервере(ДополнительныеПараметры);
		СводныйРемонтныйЗаказАвтомобильПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаПерезаполненияЗаказчика(РезультатОповещения, ДополнительныеПараметры) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		СводныйРемонтныйЗаказАвтомобильПриИзмененииНаСервере(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Очистить КИ
//
&НаКлиенте
Процедура ОчиститьКИ()
	
	СводныйРемонтныйЗаказ.ПредставлениеТелефона = "";
	СводныйРемонтныйЗаказ.ПредставлениеТелефонаСтрокой = "";
	СводныйРемонтныйЗаказ.АдресЭлектроннойПочты = "";
	СводныйРемонтныйЗаказ.АдресЭлектроннойПочтыСтрокой = "";
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбораСводногоЗаказа(РезультатОповещения, ДополнительныеПараметры) Экспорт
	
	ПерезаполнитьДанные = (РезультатОповещения = КодВозвратаДиалога.Да);
	
	ЗаполнитьДаннымиСводногоРемонтногоЗаказа(, ПерезаполнитьДанные);
	
	// Обработаем изменения требующие ответа от пользователя
	ОбработкаРезультатаВыполненияДействия(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОбновитьСводныйРемонтныйЗаказ(ТекущийОбъект, Отказ)
	
	// Записываем сводный ремонтный заказ
	Если НЕ АвтоматическиСоздаватьСводныйРемонтныйЗаказ
		ИЛИ ТолькоПросмотр Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Проверим заполнение обязательных реквизитов
	Если НЕ ЗначениеЗаполнено(СводныйРемонтныйЗаказ.Заказчик) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не заполнен реквизит ""Заказчик""'"),
			Объект.Ссылка,
			"СводныйРемонтныйЗаказЗаказчик",,
			Отказ);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СводныйРемонтныйЗаказ.Автомобиль) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не заполнен реквизит ""Автомобиль""'"),
			Объект.Ссылка,
			"СводныйРемонтныйЗаказАвтомобиль",,
			Отказ);
		
	КонецЕсли;
	
	ЗаполненСводныйРемонтныйЗаказ = ЗначениеЗаполнено(ТекущийОбъект.СводныйРемонтныйЗаказ);
	
	// Запишем пробег
	Если ЗаполненСводныйРемонтныйЗаказ Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("НеЗаписыватьПробег", Истина);
		
		Отказ = Отказ
				ИЛИ Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(
					СводныйРемонтныйЗаказ.Автомобиль,
					ТекущийОбъект.Пробег,
					Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег,
					?(ЗначениеЗаполнено(ТекущийОбъект.ДатаНачала), ТекущийОбъект.ДатаНачала, ТекущийОбъект.Дата),
					Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.ПриемкаАвтомобиляВРемонт,
					Ложь);
	КонецЕсли;
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗаполненСводныйРемонтныйЗаказ Тогда
		
		ДокументОбъект = ТекущийОбъект.СводныйРемонтныйЗаказ.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(
			ДокументОбъект,
			СводныйРемонтныйЗаказ,
			"Заказчик,Автомобиль,ПредставлениеТелефона,ПредставлениеТелефонаСтрокой,АдресЭлектроннойПочты,АдресЭлектроннойПочтыСтрокой");
		ДокументОбъект.Заблокировать();
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(СводныйРемонтныйЗаказ, ТекущийОбъект, "Организация, ПодразделениеКомпании");
		
		ДокументОбъект = РеквизитФормыВЗначение("СводныйРемонтныйЗаказ", Тип("ДокументОбъект.СводныйРемонтныйЗаказ"));
		
		Если ЗначениеЗаполнено(ТекущийОбъект.Пробег) Тогда
			
			ДокументОбъект.Пробег = ТекущийОбъект.Пробег;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановленоПовторноеОбращениеВСервис = Автосервис.УстановленПризнакПовторногоОбращенияВСервис(ДокументОбъект);
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ОбновлятьКИ", Элементы.ОбновлятьКИ.Пометка);
	ДокументОбъект.Записать();
	
	Если НЕ ЗаполненСводныйРемонтныйЗаказ Тогда
		
		// Выполним автоматическое штрихкодирование документов
		СтруктураДокумента = Новый Структура("Ссылка,ПодразделениеКомпании");
		ЗаполнитьЗначенияСвойств(СтруктураДокумента, ДокументОбъект);
		ШтрихкодированиеВызовСервера.ЗаписатьШтрихкодДокумента(Неопределено, СтруктураДокумента);
		
	КонецЕсли;
	
	Если УстановленоПовторноеОбращениеВСервис Тогда
		
		Автосервис.ОтправитьУведомление(
			ДокументОбъект,
			Перечисления.ВидыУведомлений.ПовторноеОбращениеВСервис);
		
	КонецЕсли;
	
	Если НЕ ЗаполненСводныйРемонтныйЗаказ Тогда
		
		ТекущийОбъект.СводныйРемонтныйЗаказ = ДокументОбъект.Ссылка;
		Объект.СводныйРемонтныйЗаказ = ДокументОбъект.Ссылка;
		Элементы.СводныйРемонтныйЗаказ.Доступность = Истина;
		Элементы.ГруппаСводныйРемонтныйЗаказ.Видимость = Ложь;
		
	КонецЕсли;
	
	НовыйСводныйЗаказ = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументПоЗаявкеНаРемонт(ЗаявкаНаРемонт)
	
	// Заполним идентификатор причины обращения для авторабот
	Если Объект.ПричиныОбращения.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаявкаНаРемонтАвтоработы.ИдентификаторРаботы КАК ИдентификаторРаботы,
	|	ЗаявкаНаРемонтАвтоработы.ИдентификаторПричиныОбращения КАК ИдентификаторПричиныОбращения
	|ИЗ
	|	Документ.ЗаявкаНаРемонт.Автоработы КАК ЗаявкаНаРемонтАвтоработы
	|ГДЕ
	|	ЗаявкаНаРемонтАвтоработы.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ЗаявкаНаРемонт);
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаИдентификаторовПричин = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	СтруктураПоиска = Новый Структура("ИдентификаторРаботы");
	Для Каждого ТекущаяСтрока Из Объект.Автоработы Цикл
		
		СтруктураПоиска.ИдентификаторРаботы = ТекущаяСтрока.ИдентификаторРаботы;
		НайденныеСтроки = ТаблицаИдентификаторовПричин.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			ТекущаяСтрока.ИдентификаторПричиныОбращения = Объект.ПричиныОбращения[0].ИдентификаторПричиныОбращения;
			
		Иначе
			
			ТекущаяСтрока.ИдентификаторПричиныОбращения = НайденныеСтроки[0].ИдентификаторПричиныОбращения;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЖалобы()
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЖалобаКлиента) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ФормаДокументЖалобаКлиентаСоздатьНаОсновании",
			"Видимость",
			Константы.ИспользоватьЖалобы.Получить()
		);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПереносаПозицийВРекомендации()
	
	Если НЕ ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.РекомендацииПоАвтомобилю) Тогда
		Элементы.АвтоработыПеренестиАвтоработыВРекомендации.Видимость = Ложь;
		Элементы.ТоварыПеренестиНоменклатуруВРекомендации.Видимость   = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыСтраницыЭДО(Форма)
	
	ЕстьПравоЧтенияДокументов = ИнтерфейсДокументовЭДОВызовСервера.ЕстьПравоЧтенияДокументов();
	Если Не ЕстьПравоЧтенияДокументов Тогда
		Форма.Элементы.НастройкаОтправкиАкта.Видимость = Ложь;
		Форма.Элементы.ПричинаВыводаИзОборота.Видимость = Ложь;
		Форма.Элементы.СтраницаЭДО.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.НастройкаОтправкиАкта.Видимость = Форма.ИспользоватьОбменЭД
		И НЕ Форма.ПараметрыОбменаСКонтрагентами.ДанныеСостоянияЭДОТекущие.НеобходимаНастройка
		И НЕ Форма.Объект.Ссылка.Пустая();
	Форма.Элементы.ПричинаВыводаИзОборота.Видимость = Форма.ИспользоватьОбменЭД;
	
	Форма.Элементы
		.ВариантРаспределенияСуммыТоваровПриОтправкеПоЭДО
		.Доступность = Форма.Объект.ОтправлятьКакАктОбОказанииУслуг;
	Форма.Элементы
		.ИдентификаторРаботыДляРаспределенияСуммыТоваров
		.Видимость = (Форма.Объект.ВариантРаспределенияСуммыТоваровПриОтправкеПоЭДО
			= ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияСуммыТоваровПриОтправкеПоЭДО.РаспределятьНаРаботу"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСписокВыбораРаботыДляРаспределения(Форма)
	
	Форма
		.Элементы
		.ИдентификаторРаботыДляРаспределенияСуммыТоваров
		.СписокВыбора
		.Очистить();
		
	Для Каждого Элемент Из КлючиРаботСПредставлениями(Форма.Объект.Автоработы) Цикл
		
		Форма
			.Элементы
			.ИдентификаторРаботыДляРаспределенияСуммыТоваров
			.СписокВыбора
			.Добавить(Элемент.Значение, Элемент.Представление);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КлючиРаботСПредставлениями(Знач Работы)
	
	Результат = Новый СписокЗначений();
	
	Для Каждого Работа Из Работы Цикл
		
		Результат.Добавить(Работа.ИдентификаторРаботы, СтрШаблон("%1 %2", Работа.НомерСтроки, Работа.Авторабота));
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект, РезультатОповещения);
	
	Если ТипЗнч(РезультатОповещения) = Тип("Структура") И РезультатОповещения.Свойство("ИзмененныеРеквизиты") Тогда
		
		Если
			ТипЗнч(РезультатОповещения.ИзмененныеРеквизиты) = Тип("Структура")
			И РезультатОповещения.ИзмененныеРеквизиты.Свойство("Организация")
		Тогда
			
			ПриИзмененииКлючевыхРеквизитовСостояниеЭДО();
			
		КонецЕсли;
		
		Если РезультатОповещения.ИзмененныеРеквизиты.Свойство("ПодразделениеКомпании") Тогда
			
			ЗаполнитьЗначенияСвойств(
				Объект,
				Справочники.ПодразделенияКомпании.НастройкиОтправкиЗаказНарядаПоЭДО(Объект.ПодразделениеКомпании)
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура Подключаемый_ШтрихкодированиеОбработкаОповещения(РезультатОповещения,
	ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ПричиныОбращенияТовары.ТекущаяСтрока <> Неопределено Тогда
		
		ДанныеОбращения = Объект.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияТовары.ТекущаяСтрока);
		РезультатОповещения.Вставить("ИдентификаторПричиныОбращения", ДанныеОбращения.ИдентификаторПричиныОбращения);
		
	КонецЕсли;
	
	Если РезультатОповещения.Свойство("Действие") Тогда
		ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры)

	ШтрихкодированиеВызовСервера.ОбработкаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры, , Объект);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура НастроитьДоступностьСкидок()
	
	СпособВыбораСкидки = ПраваИНастройкиПользователя.Значение("СпособВыбораСкидки", Объект);
	ДоступныСкидки = СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидки
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.АвтоматическиеИРучныеСкидки
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов;
	ДоступноРедактированиеСкидок = СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыПроцентСкидки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСуммаСкидки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСкидкаНаТовар",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступныСкидки
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыПроцентСкидкиСтроки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСуммаСкидкиСтроки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	// Автоработы
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АвтоработыПроцентСкидки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АвтоработыСуммаСкидки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АвтоработыСкидкаНаТовар",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступныСкидки
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АвтоработыПроцентСкидкиСтроки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АвтоработыСуммаСкидкиСтроки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложенныйРасчетПоказателей()
	
	ДлительнаяОперацияРасчетЗапасов = ЗапуститьРасчетПоказателейЗапасов();
	
	Если ДлительнаяОперацияРасчетЗапасов.Статус = "Выполняется" Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
	ПроизводитсяРасчетПоказателей = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперацияРасчетЗапасов,
			Новый ОписаниеОповещения("ПриЗавершенииРасчетаПоказателейЗапасов", ЭтотОбъект),
			ПараметрыОжидания
		);
		
		ПоказатьПоказатели(Ложь);
		
	Иначе
		
		ПриЗавершенииРасчетаПоказателейЗапасов(ДлительнаяОперацияРасчетЗапасов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьРасчетПоказателейЗапасов()
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НСтр("ru = 'Расчет показателей запасов'");
	ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыМетода.Вставить("Товары", Объект.Товары.Выгрузить());
	
	ДокументОснование = Объект.ДокументОснование;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
		И ЗначениеЗаполнено(ДокументОснование) Тогда
		
		ДопПараметры = Новый Структура("Заказ", ДокументОснование);
		ПараметрыМетода.Вставить("ДополнительныеПараметры", ДопПараметры);
		
	КонецЕсли;
	
	ДлительнаяОперацияРасчетЗапасов = ДлительныеОперации.ВыполнитьВФоне(
		"Автосервис.ОбновитьПоказателиТоваровФЗ",
		ПараметрыМетода,
		ПараметрыВыполненияВФоне
	);
	
	Возврат ДлительнаяОперацияРасчетЗапасов;
	
КонецФункции

&НаКлиенте
Процедура ПриЗавершенииРасчетаПоказателейЗапасов(ДлительнаяОперацияРасчетЗапасов,
                                                 ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(ДлительнаяОперацияРасчетЗапасов) = Тип("Структура")
		И ДлительнаяОперацияРасчетЗапасов.Свойство("Статус") Тогда	
		Если ДлительнаяОперацияРасчетЗапасов.Статус = "Выполнено" Тогда
			
			ПоказателиЗапасов = ПолучитьИзВременногоХранилища(ДлительнаяОперацияРасчетЗапасов.АдресРезультата);
			АвтосервисКлиент.ОбновитьПоказателиНаФорме(ЭтотОбъект, ПоказателиЗапасов);
			ПоказатьПоказатели(Истина);
			
		ИначеЕсли ДлительнаяОперацияРасчетЗапасов.Статус = "Ошибка" Тогда
			
			ПоказатьПоказатели(Ложь, НСтр("ru = 'Ошибка при получении параметров запасов.'"));
			
		ИначеЕсли ДлительнаяОперацияРасчетЗапасов.Статус = "Отменено" Тогда
			
			ПоказатьПоказатели(Ложь, НСтр("ru = 'Задание отменено администратором.'"));
			
		КонецЕсли;	
	Иначе		
		ПоказатьПоказатели(Ложь);
	КонецЕсли;

	ПроизводитсяРасчетПоказателей = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПоказатели(ПоказыватьПоказатели, ТекстОшибки = Неопределено)
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		Элементы.СтраниыИнформацияОбОстатках.ТекущаяСтраница = Элементы.СтраницаОшибка;
		ОшибкаПолученияПоказателей = ТекстОшибки;
		
	ИначеЕсли ПоказыватьПоказатели Тогда
		
		Элементы.СтраниыИнформацияОбОстатках.ТекущаяСтраница = Элементы.СтраницаПоказатели;
		
	Иначе
		
		Элементы.СтраниыИнформацияОбОстатках.ТекущаяСтраница = Элементы.СтраницаОбновление;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьЗаголовокНадписиНалоговыйДокумент(РезультатОповещения, ДополнительныеПараметры) Экспорт
	
	ОбновитьЗаголовокНадписиНалоговыйДокументНаСервере();
	
КонецПроцедуры

Процедура ОбновитьЗаголовокНадписиНалоговыйДокументНаСервере()
	
	РаботаСФормойВызовСервера.ОбновитьЗаголовокНадписиНалоговыйДокумент(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПослеУдаленияПричиныОбращения(Элемент)
	
	ПричиныОбращенийКлиент.ОбновитьИдентификаторыТаблиц(Объект);
	
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
		Объект.ПричиныОбращения,
		Объект.Автоработы,
		Объект.Товары
	);
	
	ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
		Элемент.ТекущиеДанные,
		Элементы.Автоработы,
		ИспользоватьПричиныОбращений
	);
	
	ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
		Элемент.ТекущиеДанные,
		Элементы.Товары,
		ИспользоватьПричиныОбращений
	);
	
	УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.Автоработы);
	УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.Товары);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидимостьКартинкиСводногоРемонтногоЗаказа()

	Если Не ЗначениеЗаполнено(Объект.СводныйРемонтныйЗаказ) Тогда   
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СводныйРемонтныйЗаказ.ПовторноеОбращение КАК ПовторноеОбращение
		|ИЗ
		|	Документ.СводныйРемонтныйЗаказ КАК СводныйРемонтныйЗаказ
		|ГДЕ
		|	СводныйРемонтныйЗаказ.Ссылка = &Ссылка"; 
	Запрос.УстановитьПараметр("Ссылка", Объект.СводныйРемонтныйЗаказ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда	
			Возврат ВыборкаДетальныеЗаписи.ПовторноеОбращение;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции 

&НаСервере
Функция ПолучитьАвтомобильИзСводногоРемонтногоЗаказа()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Объект.СводныйРемонтныйЗаказ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Автомобиль = Неопределено;
	
    Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СводныйРемонтныйЗаказ.Автомобиль КАК Автомобиль
		|ИЗ
		|	Документ.СводныйРемонтныйЗаказ КАК СводныйРемонтныйЗаказ
		|ГДЕ
		|	СводныйРемонтныйЗаказ.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.СводныйРемонтныйЗаказ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	
	Если Не РезультатЗапроса.Пустой() Тогда     
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Автомобиль = ВыборкаДетальныеЗаписи.Автомобиль;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Автомобиль;
	
КонецФункции

&НаСервере
Процедура БлокироватьЭлементыФормы()
	
	РедактированиеЗакрытыхЗаказНарядов = ПравоПользователя("РедактированиеЗакрытыхЗаказНарядов");
	Закрыт = Объект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт;
	Выполнен = Объект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен;
	
	Если НЕ РедактированиеЗакрытыхЗаказНарядов
		И Закрыт Тогда
		ТолькоПросмотр = Истина;
		ФормаБлокированаОтИзменений = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.Шапка.ТолькоПросмотр = Выполнен ИЛИ Закрыт;
	Элементы.Подвал.ТолькоПросмотр = Выполнен ИЛИ Закрыт;
	Для Каждого Элемент Из Элементы.Страницы.ПодчиненныеЭлементы Цикл
		Если Элемент = Элементы.СтраницаЗачетАвансов Тогда
			Элемент.ТолькоПросмотр = Закрыт;
		ИначеЕсли НЕ Элемент = Элементы.СтраницаОсновныеРеквизиты Тогда
			Элемент.ТолькоПросмотр = Выполнен ИЛИ Закрыт;			
		КонецЕсли;	
	КонецЦикла;	
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"БлокПричиныОбращенияБыстрыйВвод", "ТолькоПросмотр", Выполнен ИЛИ Закрыт);	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БлокКлиентЗаказНаряра", "ТолькоПросмотр", Выполнен ИЛИ Закрыт);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ВидРемонта", "ТолькоПросмотр", Выполнен ИЛИ Закрыт);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаДокументаСводныйРемонтныйЗаказ", "ТолькоПросмотр", Выполнен ИЛИ Закрыт);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаСводныйРемонтныйЗаказ", "ТолькоПросмотр", Выполнен ИЛИ Закрыт);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ИнформацияОбОтветственных", "ТолькоПросмотр", Выполнен ИЛИ Закрыт);  
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"СервиснаяКомпанияГруппа", "ТолькоПросмотр", Выполнен ИЛИ Закрыт);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаМаркетинговаяПрограммаИОтступ", "ТолькоПросмотр", Выполнен ИЛИ Закрыт); 
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ЭтоУниверсальныйДокумент", "ТолькоПросмотр", Выполнен ИЛИ Закрыт); 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаПробег", "ТолькоПросмотр", Выполнен ИЛИ Закрыт);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"Начало", "ТолькоПросмотр", Выполнен ИЛИ Закрыт);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"Окончание", "ТолькоПросмотр", Выполнен ИЛИ Закрыт);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"Выдача", "ТолькоПросмотр", Закрыт);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"Закрытие", "ТолькоПросмотр", Закрыт); 
   	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"Плательщик", "ТолькоПросмотр", Выполнен ИЛИ Закрыт);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"Состояние", "ТолькоПросмотр", Закрыт И НЕ РедактированиеЗакрытыхЗаказНарядов);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ДополнительнаяАвтоработыКоманднаяПанель", "Доступность", НЕ (Выполнен ИЛИ  Закрыт));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"КоманднаяПанельТовары", "Доступность", НЕ (Выполнен ИЛИ Закрыт));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ВспомогательныеАвтоработыКоманднаяПанель", "ТолькоПросмотр", НЕ (Выполнен ИЛИ Закрыт));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"МатериалыЗаказчикаПодборМатериалыЗаказчика", "Доступность", НЕ (Выполнен ИЛИ  Закрыт));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ЗачетАвансовПодборАвансов", "Доступность", НЕ Закрыт
		И Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"Автомобили", "Доступность", НЕ (Выполнен ИЛИ Закрыт));
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьТолькоПросмотрПолямАвтомобильИЗаказчик()
	
	Если НЕ НовыйСводныйЗаказ 
		И ЗначениеЗаполнено(Объект.СводныйРемонтныйЗаказ) Тогда
	
		Элементы.СводныйРемонтныйЗаказАвтомобиль.ТолькоПросмотр = Истина;
		Элементы.СводныйРемонтныйЗаказЗаказчик.ТолькоПросмотр = Истина;
	Иначе	
		Элементы.СводныйРемонтныйЗаказАвтомобиль.ТолькоПросмотр = Ложь;
		Элементы.СводныйРемонтныйЗаказЗаказчик.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьИзДокументаТовары(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзДокументаТоварыНаСервере(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзДокументаТоварыНаСервере(Результат, ДополнительныеПараметры)
	
	Товары = ПолучитьИзВременногоХранилища(Результат.Корзина);
	ОбработкаРезультатаПодбораНоменклатуры(Товары, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьИзКорзины(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзКорзиныЗавершениеНаСервере(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзКорзиныЗавершениеНаСервере(Результат, ДополнительныеПараметры)
	
	Товары = РегистрыСведений.Корзина.ТоварыИзКорзины(Результат.Наименование, Результат.Дата);
	ОбработкаРезультатаПодбораНоменклатуры(Товары, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеИдентификаторовПричинОбращения(Объект, ИспользоватьПричиныОбращений, Отказ, ПараметрыЗаписи)
	
	Если Не ИспользоватьПричиныОбращений Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.ПричиныОбращения.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	ХранилищеПараметров = Новый УникальныйИдентификатор;
	Если ТребуетсяРучноеЗаполнениеИдентификаторовПричиныОбращения(ХранилищеПараметров) Тогда
		Обработчик = Новый ОписаниеОповещения(
			"Подключаемый_ЗаполнитьИдентификаторыПричиныОбращения",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		);
		ПараметрыФормы = Новый Структура("Хранилище", ХранилищеПараметров);
		ОткрытьФорму(
				"Документ.ЗаказНаряд.Форма.РаспределениеПоПричинамОбращений",
				ПараметрыФормы,
				ЭтотОбъект,
				, , , 
				Обработчик,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
			);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ТребуетсяРучноеЗаполнениеИдентификаторовПричиныОбращения(ХранилищеПараметров)
	
	ТоварыБезПричиныОбращения = Новый Массив;
	АвтоработыБезПричиныОбращения = Новый Массив;
	
	ТаблицаТоваров = Объект.Товары.Выгрузить();
	ТаблицаТоваров.Очистить();
	
	ТаблицаАвторабот = Объект.Автоработы.Выгрузить();
	ТаблицаАвторабот.Очистить();
	ОднаПричинаОбращения = Объект.ПричиныОбращения.Количество() = 1;
	Для Каждого СтрокаТоваров Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТоваров.ИдентификаторПричиныОбращения) Тогда
			ПараметрыОтбора = Новый Структура("ИдентификаторПричиныОбращения", СтрокаТоваров.ИдентификаторПричиныОбращения);
			Если Объект.ПричиныОбращения.НайтиСтроки(ПараметрыОтбора).Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ОднаПричинаОбращения Тогда
			СтрокаТоваров.ИдентификаторПричиныОбращения = Объект.ПричиныОбращения[0].ИдентификаторПричиныОбращения;
		Иначе
			ЗаполнитьЗначенияСвойств(ТаблицаТоваров.Добавить(), СтрокаТоваров);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаАвторабот Из Объект.Автоработы Цикл
		Если ЗначениеЗаполнено(СтрокаАвторабот.ИдентификаторПричиныОбращения) Тогда
			ПараметрыОтбора = Новый Структура("ИдентификаторПричиныОбращения", СтрокаАвторабот.ИдентификаторПричиныОбращения);
			Если Объект.ПричиныОбращения.НайтиСтроки(ПараметрыОтбора).Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ОднаПричинаОбращения Тогда
			СтрокаАвторабот.ИдентификаторПричиныОбращения = Объект.ПричиныОбращения[0].ИдентификаторПричиныОбращения;
		Иначе
			ЗаполнитьЗначенияСвойств(ТаблицаАвторабот.Добавить(), СтрокаАвторабот);
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаАвторабот.Количество() > 0 Или ТаблицаТоваров.Количество() > 0 Тогда
		ДанныеДокумента = Новый Структура;
		ДанныеДокумента.Вставить("ТаблицаТоваров", ТаблицаТоваров);
		ДанныеДокумента.Вставить("ТаблицаАвторабот", ТаблицаАвторабот);
		ДанныеДокумента.Вставить("ПричиныОбращения", Объект.ПричиныОбращения.Выгрузить());
		ХранилищеПараметров = ПоместитьВоВременноеХранилище(ДанныеДокумента);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ЗаполнитьИдентификаторыПричиныОбращения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПерезаполнитьИдентификаторыПричиныОбращения(Результат);
	Записать(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьИдентификаторыПричиныОбращения(Адрес)
	
	ТаблицаРезультат = ПолучитьИзВременногоХранилища(Адрес);
	
	Для Каждого Строка Из ТаблицаРезультат Цикл
		
		Если Строка.ЭтоАвторабота Тогда 
			ПараметрыОтбора = Новый Структура("НомерСтроки, Авторабота", Строка.НомерСтроки, Строка.Авторабота);
			НайденныеСтроки = Объект.Автоработы.НайтиСтроки(ПараметрыОтбора);
		Иначе
			ПараметрыОтбора = Новый Структура("НомерСтроки, Номенклатура", Строка.НомерСтроки, Строка.Номенклатура);
			НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
		КонецЕсли;
		
		Если НайденныеСтроки.Количество() = 1 Тогда
			НайденныеСтроки[0].ИдентификаторПричиныОбращения = Строка.ИдентификаторПричиныОбращения;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКорректностьВременныхРамок(Отказ)

	ТекстОшибки = "";
	
	Если Объект.ДатаНачала > Объект.ДатаОкончания И ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда	
		ТекстОшибки = НСтр("ru = ' Дата начала позже даты окончания.'");
	ИначеЕсли Объект.ДатаОкончания > Объект.ПлановаяДатаВыдачи И ЗначениеЗаполнено(Объект.ПлановаяДатаВыдачи) Тогда
		ТекстОшибки = НСтр("ru = ' Дата окончания позже даты выдачи.'");
	ИначеЕсли Объект.ПлановаяДатаВыдачи > Объект.ДатаЗакрытия И ЗначениеЗаполнено(Объект.ДатаЗакрытия) Тогда	
		ТекстОшибки = НСтр("ru = ' Дата выдачи позже даты закрытия.'");
	КонецЕсли;
	
	Если ТекстОшибки <> "" Тогда	
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Установлены некорректные временные рамки.'") + ТекстОшибки,,,,Отказ);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьОстаткиАвансов()
	
	Если Не Элементы.СтраницаЗачетАвансов.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	РасчетыСКонтрагентамиСервер.ЗаполнитьСлужебныйРеквизитОстатокПоДокументуОплаты(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваГруппДействия()
	
	Если Объект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт
		Или Объект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен Тогда
		
		Для Каждого ПодчиненныйЭлемент Из Элементы.ТоварыГруппаДействия.ПодчиненныеЭлементы Цикл
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				ПодчиненныйЭлемент.Имя,
				"Доступность",
				Ложь
			);
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ТоварыЗаказПокупателяПанельТЧ",
			"Доступность",
			Ложь
		);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ТоварыЗарезервироватьПанельТЧ",
			"Доступность",
			Ложь
		);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ТоварыЗаказатьПанельТЧ",
			"Доступность",
			Ложь
		);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ТоварыСнятьРезервыПанельТЧ",
			"Доступность",
			Ложь
		);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ТоварыПереместитьВПроизводствоПанельТЧ",
			"Доступность",
			Ложь
		);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ТоварыИзвлечьИзПроизводстваТЧ",
			"Доступность",
			Ложь
		);
		
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ТоварыЗаказатьПанельИзПричиныОбращения",
			"Доступность",
			Ложь
		);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ТоварыЗарезервироватьПанельИзПричиныОбращения",
			"Доступность",
			Ложь
		);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ТоварыОтменитьЗаказПанельИзПричинОбращения",
			"Доступность",
			Ложь
		);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ТоварыСнятьРезервыПанельИзПричиныОбращения",
			"Доступность",
			Ложь
		);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ТоварыПереместитьВПроизводствоПанельИзПричиныОбращения",
			"Доступность",
			Ложь
		);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ТоварыИзвлечьИзПроизводстваИзПричиныОбращения",
			"Доступность",
			Ложь
		);
		
		Для Каждого ПодчиненныйЭлемент Из Элементы.АвтоработыГруппаДействие.ПодчиненныеЭлементы Цикл
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				ПодчиненныйЭлемент.Имя,
				"Доступность",
				Ложь
			);
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	РаботаСФормой.УстановитьСвойствоЭлементовФормы(ЭтаФорма,
		"ТоварыЗаказПокупателяПанель, ТоварыЗаказПокупателяПанельТЧ,
		|ТоварыЗарезервироватьПанель, ТоварыЗарезервироватьПанельТЧ, ТоварыЗарезервироватьПанельИзПричиныОбращения",
		"Доступность",
		"Добавление",
		Метаданные.Документы.ЗаказПокупателя
	);
	
	РаботаСФормой.УстановитьСвойствоЭлементовФормы(ЭтаФорма,
		"ТоварыЗаказатьПанель, ТоварыЗаказатьПанельТЧ, ТоварыЗаказатьПанельИзПричиныОбращения",
		"Доступность",
		"Добавление",
		Метаданные.Документы.ЗаказПоставщику
	);
	
	РаботаСФормой.УстановитьСвойствоЭлементовФормы(ЭтаФорма,
		"ТоварыСнятьРезервыПанель, ТоварыСнятьРезервыПанельТЧ, ТоварыОтменитьЗаказ,
		|ТоварыОтменитьЗаказПанельИзПричинОбращения, ТоварыСнятьРезервыПанельИзПричиныОбращения",
		"Доступность",
		"Использование",
		Метаданные.Обработки.СнятиеЗапчастиСРезерва
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыОтменаВсехЗаказовИРезервов",
		"Доступность",
		ПравоДоступа("Добавление",Метаданные.Документы.КорректировкаЗаказаПокупателя)
			Или ПравоДоступа("Добавление",Метаданные.Документы.СнятиеРезервовЗаказовПокупателя)
	);
	
	РаботаСФормой.УстановитьСвойствоЭлементовФормы(ЭтаФорма,
		"ТоварыПереместитьВПроизводствоПанель, ТоварыПереместитьВПроизводствоПанельТЧ, АвтоработыПереместитьВПроизводство
		|ТоварыПереместитьВПроизводствоПанельИзПричиныОбращения",
		"Доступность",
		"Добавление",
		Метаданные.Документы.ПеремещениеТоваровВПроизводство
	);
	
	РаботаСФормой.УстановитьСвойствоЭлементовФормы(ЭтаФорма,
		"ТоварыИзвлечьИзПроизводства, ТоварыИзвлечьИзПроизводстваТЧ, АвтоработыИзвлечьИзПроизводства,
		|ТоварыИзвлечьИзПроизводстваИзПричиныОбращения",
		"Доступность",
		"Добавление",
		Метаданные.Документы.ИзвлечениеТоваровИзПроизводства
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваПоляВводаТелефона()
	
	УправлениеКонтактнойИнформациейАльфаАвто.УстановитьСвойстваПоляВводаТелефона(
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
		СводныйРемонтныйЗаказ.ПредставлениеТелефона,
		Элементы.ПредставлениеТелефона
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновлятьКИ(Результат, ДополнетельныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Элементы.ОбновлятьКИ.Пометка   = Истина;
		Элементы.НеОбновлятьКИ.Пометка = Ложь;
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Заголовок = НСтр("ru = 'Обновлять'");
	Иначе
		Элементы.ОбновлятьКИ.Пометка   = Ложь;
		Элементы.НеОбновлятьКИ.Пометка = Истина;
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Заголовок = НСтр("ru = 'Не обновлять'");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

