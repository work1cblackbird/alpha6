// Модуль документа "Инкассация"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Организация = КассаККМ.Организация;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПодразделениеКомпании) Тогда
			ПодразделениеКомпании = КассаККМ.ПодразделениеКомпании;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Инкассатор) Тогда
		Инкассатор = ПодразделениеКомпании.ОсновнойИнкассатор;
		Документы.Инкассация.ИнкассаторПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	КонецЕсли;
	
	Если ХозОперация = Справочники.ХозОперации.ИзъятиеИзКассыККМ И НЕ ЗначениеЗаполнено(ПлатежнаяСистема) Тогда
		ПлатежнаяСистема = ПодразделениеКомпании.ОсновнаяПлатежнаяСистема;
		Документы.Инкассация.ПлатежнаяСистемаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// необходимость формирования корректирующих проводок по подразделениям
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(Дата);
	
	СпособУчетаВзаиморасчетовПоРасчетнымДокументамИнкассатор =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетовИнкассатор);
	СпособУчетаВзаиморасчетовПоРасчетнымДокументамПлатежнаяСистема =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетовПлатежнаяСистема);
	
	Если ХозОперация=Справочники.ХозОперации.ВнесениеВКассуККМ Тогда
		Для Каждого СтрокаОплат Из Оплаты Цикл 
			Если СтрокаОплат.Сумма>0 И СтрокаОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
				// Проведем вносимую сумму по взаиморасчетам с инкассатором
				Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументамИнкассатор Тогда
					НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыКомпании;
					НаборЗаписейВзаиморасчеты.ДокументОбъект        = ЭтотОбъект;
					НаборЗаписейВзаиморасчеты.РежимПроведения       = РежимПроведения;
					НаборЗаписейВзаиморасчеты.Контрагент            = Инкассатор;
					НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов = ДоговорВзаиморасчетовИнкассатор;
					НаборЗаписейВзаиморасчеты.Сделка                = Неопределено;
					НаборЗаписейВзаиморасчеты.Сумма                 = СтрокаОплат.Сумма;
					Отказ = НЕ НаборЗаписейВзаиморасчеты.Расход() ИЛИ Отказ;
				КонецЕсли;
				
				// приходуем деньги в кассу ККМ по налу
				НаборЗаписейКассыККМ = Движения.КассыККМ;
				НаборЗаписейКассыККМ.ДокументОбъект  = ЭтотОбъект;
				НаборЗаписейКассыККМ.РежимПроведения = РежимПроведения;
				НаборЗаписейКассыККМ.КассаККМ        = КассаККМ;
				НаборЗаписейКассыККМ.ТипОплаты   	 = СтрокаОплат.ТипОплаты;
				НаборЗаписейКассыККМ.Сумма           = СтрокаОплат.Сумма;
				Отказ = НЕ НаборЗаписейКассыККМ.Приход() ИЛИ Отказ;
				
				ПодразделениеКассаККМ              = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(КассаККМ.ПодразделениеКомпании, Дата);
				ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ДоговорВзаиморасчетовИнкассатор.ПодразделениеКомпании, Дата);
				
				Если ВедетсяБалансПоПодразделению И (ПодразделениеДоговорВзаиморасчетов<>ПодразделениеКассаККМ) Тогда
					НаборЗаписейДиР = Движения.ДоходыИРасходы;
					НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
					НаборЗаписейДиР.Подразделение  = ДоговорВзаиморасчетовИнкассатор.ПодразделениеКомпании;
					НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
					НаборЗаписейДиР.ВУпрВалюте = Ложь;
					НаборЗаписейДиР.Расход     = СтрокаОплат.Сумма;
					Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
					
					НаборЗаписейДиР = Движения.ДоходыИРасходы;
					НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
					НаборЗаписейДиР.Подразделение  = КассаККМ.ПодразделениеКомпании;
					НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
					НаборЗаписейДиР.ВУпрВалюте = Ложь;
					НаборЗаписейДиР.Доход      = СтрокаОплат.Сумма;
					Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
				КонецЕсли;	
			КонецЕсли; 
		КонецЦикла;
		
	ИначеЕсли ХозОперация=Справочники.ХозОперации.ИзъятиеИзКассыККМ Тогда
		Для Каждого СтрокаОплат Из Оплаты Цикл 
			Если СтрокаОплат.Сумма>0 И СтрокаОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
				// извлечем деньги из кассы ККМ по налу
				НаборЗаписейКассыККМ = Движения.КассыККМ;
				НаборЗаписейКассыККМ.ДокументОбъект  = ЭтотОбъект;
				НаборЗаписейКассыККМ.РежимПроведения = РежимПроведения;
				НаборЗаписейКассыККМ.КассаККМ		 = КассаККМ;
				НаборЗаписейКассыККМ.ТипОплаты		 = СтрокаОплат.ТипОплаты;
				НаборЗаписейКассыККМ.Сумма			 = СтрокаОплат.Сумма;
				Отказ = НЕ НаборЗаписейКассыККМ.Расход() ИЛИ Отказ;
				
				// Проведем извлекаемую сумму по взаиморасчетам с инкассатором
				Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументамИнкассатор Тогда
					НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыКомпании;
					НаборЗаписейВзаиморасчеты.ДокументОбъект		= ЭтотОбъект;
					НаборЗаписейВзаиморасчеты.РежимПроведения		= РежимПроведения;
					НаборЗаписейВзаиморасчеты.Контрагент			= Инкассатор;
					НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов = ДоговорВзаиморасчетовИнкассатор;
					НаборЗаписейВзаиморасчеты.Сделка				= Неопределено;
					НаборЗаписейВзаиморасчеты.Сумма					= СтрокаОплат.Сумма;
					Отказ = НЕ НаборЗаписейВзаиморасчеты.Приход() ИЛИ Отказ;
				КонецЕсли;
				
				ПодразделениеКассаККМ              = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(КассаККМ.ПодразделениеКомпании, Дата);
				ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ДоговорВзаиморасчетовИнкассатор.ПодразделениеКомпании, Дата);
				
				Если ВедетсяБалансПоПодразделению И (ПодразделениеДоговорВзаиморасчетов<>ПодразделениеКассаККМ) Тогда
					НаборЗаписейДиР = Движения.ДоходыИРасходы;
					НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
					НаборЗаписейДиР.Подразделение  = ДоговорВзаиморасчетовИнкассатор.ПодразделениеКомпании;
					НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
					НаборЗаписейДиР.ВУпрВалюте = Ложь;
					НаборЗаписейДиР.Доход      = СтрокаОплат.Сумма;
					Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
					
					НаборЗаписейДиР = Движения.ДоходыИРасходы;
					НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
					НаборЗаписейДиР.Подразделение  = КассаККМ.ПодразделениеКомпании;
					НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
					НаборЗаписейДиР.ВУпрВалюте = Ложь;
					НаборЗаписейДиР.Доход      = СтрокаОплат.Сумма;
					Отказ = НЕ НаборЗаписейДиР.Расход() ИЛИ Отказ;
				КонецЕсли;	
			КонецЕсли;
				
			Если СтрокаОплат.Сумма>0 И СтрокаОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
				// извлечем деньги из кассы ККМ по безналу на приход
				НаборЗаписейКассыККМ=Движения.КассыККМ;
				НаборЗаписейКассыККМ.ДокументОбъект  = ЭтотОбъект;
				НаборЗаписейКассыККМ.РежимПроведения = РежимПроведения;
				НаборЗаписейКассыККМ.КассаККМ		 = КассаККМ;
				НаборЗаписейКассыККМ.ТипОплаты		 = СтрокаОплат.ТипОплаты;
				НаборЗаписейКассыККМ.Сумма			 = СтрокаОплат.Сумма;
				Отказ = НЕ НаборЗаписейКассыККМ.Расход() ИЛИ Отказ;
				
				// Проведем извлекаемую сумму по взаиморасчетам с платежной системой
				Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументамПлатежнаяСистема Тогда
					НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыКомпании;
					НаборЗаписейВзаиморасчеты.ДокументОбъект		= ЭтотОбъект;
					НаборЗаписейВзаиморасчеты.РежимПроведения		= РежимПроведения;
					НаборЗаписейВзаиморасчеты.Контрагент			= ПлатежнаяСистема;
					НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов = ДоговорВзаиморасчетовПлатежнаяСистема;
					НаборЗаписейВзаиморасчеты.Сделка				= Неопределено;
					НаборЗаписейВзаиморасчеты.Сумма					= СтрокаОплат.Сумма;
					Отказ = НЕ НаборЗаписейВзаиморасчеты.Приход() ИЛИ Отказ;
				КонецЕсли;
				
				ПодразделениеКассаККМ              = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(КассаККМ.ПодразделениеКомпании, Дата);
				ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ДоговорВзаиморасчетовПлатежнаяСистема.ПодразделениеКомпании, Дата);
				
				Если ВедетсяБалансПоПодразделению И (ПодразделениеДоговорВзаиморасчетов<>ПодразделениеКассаККМ) Тогда
					НаборЗаписейДиР = Движения.ДоходыИРасходы;
					НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
					НаборЗаписейДиР.Подразделение  = ДоговорВзаиморасчетовПлатежнаяСистема.ПодразделениеКомпании;
					НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
					НаборЗаписейДиР.ВУпрВалюте             = Ложь;
					НаборЗаписейДиР.Доход 				   = СтрокаОплат.Сумма;
					Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
					
					НаборЗаписейДиР = Движения.ДоходыИРасходы;
					НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
					НаборЗаписейДиР.Подразделение  = КассаККМ.ПодразделениеКомпании;
					НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
					НаборЗаписейДиР.ВУпрВалюте 			   = Ложь;
					НаборЗаписейДиР.Доход 				   = СтрокаОплат.Сумма;
					Отказ = НЕ НаборЗаписейДиР.Расход() ИЛИ Отказ;
				КонецЕсли;	
			КонецЕсли;
			
			Если СтрокаОплат.СуммаВозврат > 0 И СтрокаОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
				// извлечем деньги из кассы ККМ по безналу на расход
				НаборЗаписейКассыККМ = Движения.КассыККМ;
				НаборЗаписейКассыККМ.ДокументОбъект  = ЭтотОбъект;
				НаборЗаписейКассыККМ.РежимПроведения = РежимПроведения;
				НаборЗаписейКассыККМ.КассаККМ		 = КассаККМ;
				НаборЗаписейКассыККМ.ТипОплаты	 	 = СтрокаОплат.ТипОплаты;
				НаборЗаписейКассыККМ.Сумма           = -СтрокаОплат.СуммаВозврат;
				Отказ = НЕ НаборЗаписейКассыККМ.Расход() ИЛИ Отказ;
				
				// Проведем извлекаемую сумму по взаиморасчетам с платежной системой
				Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументамПлатежнаяСистема Тогда
					НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыКомпании;
					НаборЗаписейВзаиморасчеты.ДокументОбъект		= ЭтотОбъект;
					НаборЗаписейВзаиморасчеты.РежимПроведения		= РежимПроведения;
					НаборЗаписейВзаиморасчеты.Контрагент			= ПлатежнаяСистема;
					НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов = ДоговорВзаиморасчетовПлатежнаяСистема;
					НаборЗаписейВзаиморасчеты.Сделка				= Неопределено;
					НаборЗаписейВзаиморасчеты.Сумма					= СтрокаОплат.СуммаВозврат;
					Отказ = НЕ НаборЗаписейВзаиморасчеты.Расход() ИЛИ Отказ;
				КонецЕсли;
				
				ПодразделениеКассаККМ              = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(КассаККМ.ПодразделениеКомпании, Дата);
				ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ДоговорВзаиморасчетовПлатежнаяСистема.ПодразделениеКомпании, Дата);
				
				Если ВедетсяБалансПоПодразделению И (ПодразделениеДоговорВзаиморасчетов<>ПодразделениеКассаККМ) Тогда
					НаборЗаписейДиР = Движения.ДоходыИРасходы;
					НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
					НаборЗаписейДиР.Подразделение  = ДоговорВзаиморасчетовПлатежнаяСистема.ПодразделениеКомпании;
					НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
					НаборЗаписейДиР.ВУпрВалюте             = Ложь;
					НаборЗаписейДиР.Расход 				   = СтрокаОплат.СуммаВозврат;
					Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
					
					НаборЗаписейДиР = Движения.ДоходыИРасходы;
					НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
					НаборЗаписейДиР.Подразделение  = КассаККМ.ПодразделениеКомпании;
					НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
					НаборЗаписейДиР.ВУпрВалюте			   = Ложь;
					НаборЗаписейДиР.Доход 				   = СтрокаОплат.СуммаВозврат;
					Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
				КонецЕсли;	
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Документы.Инкассация.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	Документы.Инкассация.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	// двигаем границу последовательности взаиморасчетов
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
		
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Приходный складской ордер"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПриходныйСкладскойОрдер(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Инкассатор						= ДанныеЗаполнения.Контрагент;
	ДоговорВзаиморасчетовИнкассатор	= ДанныеЗаполнения.ДоговорВзаиморасчетов;
	Документы.Инкассация.ИнкассаторПриИзменении(ЭтотОбъект);
	
	ХозОперация 					= Справочники.ХозОперации.ИзъятиеИзКассыККМ;
	Документы.Инкассация.ХозОперацияПриИзменении(ЭтотОбъект);
	СуммаНал 						= РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ДанныеЗаполнения.СуммаДокумента,
		ДанныеЗаполнения.ВалютаДокумента, ДанныеЗаполнения.КурсДокумента, ВалютаДокумента, КурсДокумента);
	
	// Заполним оплаты
	НоваяСтрока 					= Оплаты.Добавить();
	НоваяСтрока.ТипОплаты			= Перечисления.ТипыОплатыККТ.Наличные;
	НоваяСтрока.Сумма				= СуммаНал;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПриходныйСкладскойОрдер()

// Производит заполнение объекта на основании документа "Расходный складской ордер"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РасходныйКассовыйОрдер(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,
		ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Инкассатор						= ДанныеЗаполнения.Контрагент;
	ДоговорВзаиморасчетовИнкассатор	= ДанныеЗаполнения.ДоговорВзаиморасчетов;
	Документы.Инкассация.ИнкассаторПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	ХозОперация 					= Справочники.ХозОперации.ВнесениеВКассуККМ;
	Документы.Инкассация.ХозОперацияПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	СуммаНал 						= РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ДанныеЗаполнения.СуммаДокумента,
		ДанныеЗаполнения.ВалютаДокумента, ДанныеЗаполнения.КурсДокумента, ВалютаДокумента, КурсДокумента);
	
	// Заполним оплаты
	НоваяСтрока 					= Оплаты.Добавить();
	НоваяСтрока.ТипОплаты			= Перечисления.ТипыОплатыККТ.Наличные;
	НоваяСтрока.Сумма				= СуммаНал;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РасходныйКассовыйОрдер()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
