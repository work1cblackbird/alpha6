// Модуль менеджера документа "Инкассация"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#Область ЗапретРедактированияРеквизитовОбъектов

// Определяет блокируемые реквизиты
//
// Возвращаемое значение:
//  Массив - Строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]. Например: "Объект.Автор", "ПолеАвтор".
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив();
	Результат.Добавить("КассаККМ");
	Результат.Добавить("ФР");
	Результат.Добавить("Инкассатор");
	Результат.Добавить("ДоговорВзаиморасчетовИнкассатор");
	Результат.Добавить("ПлатежнаяСистема");
	Результат.Добавить("ДоговорВзаиморасчетовПлатежнаяСистема");
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Оплаты.Итог("Сумма"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаВозврат",    Объект.Оплаты.Итог("СуммаВозврат"));
		
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Возвращает таблицу остатков по КассеККМ
// Параметры:
//	КассаККМ - СправочникСсылка.КассыККМ
//	НаМомент - Момент времени на который получаем остатки.
//
Функция ПолучитьОстатокПоКассеККМ(КассаККМ, НаМомент) Экспорт
	
	Документ = Неопределено;
	Если ТипЗнч(НаМомент) = Тип("Дата") Тогда
		ДатаРасчета = НаМомент;
	ИначеЕсли ТипЗнч(НаМомент) = Тип("МоментВремени") Тогда
		Документ    = НаМомент.Ссылка;
		ДатаРасчета = НаМомент.Дата;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|КассыККМ.ТипОплаты КАК ТипОплаты,
	|СУММА(ВЫБОР
	|	КОГДА КассыККМ.ВидДвижения = &ВидДвижения
	|			И КассыККМ.Сумма > 0
	|		ТОГДА ЕСТЬNULL(КассыККМ.Сумма, 0)
	|	ИНАЧЕ 0
	|КОНЕЦ)
	| - Сумма(ВЫБОР
	|	КОГДА КассыККМ.ВидДвижения = &ВидДвиженияВозврат
	|			И КассыККМ.Сумма > 0
	|		ТОГДА ЕСТЬNULL(КассыККМ.Сумма, 0)
	|	ИНАЧЕ 0
	|КОНЕЦ) КАК Сумма,
	|
	|-1* (СУММА(ВЫБОР
	|	КОГДА КассыККМ.ВидДвижения = &ВидДвижения
	|			И КассыККМ.Сумма < 0
	|		ТОГДА ЕСТЬNULL(КассыККМ.Сумма, 0)
	|	ИНАЧЕ 0
	|КОНЕЦ)
	| - Сумма(ВЫБОР
	|	КОГДА КассыККМ.ВидДвижения = &ВидДвиженияВозврат
	|			И КассыККМ.Сумма < 0
	|		ТОГДА ЕСТЬNULL(КассыККМ.Сумма, 0)
	|	ИНАЧЕ 0
	|КОНЕЦ)) КАК СуммаВозврат
	|
	|ИЗ
	|	РегистрНакопления.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.Период <= &НаМомент
	|	И КассыККМ.КассаККМ = &КассаККМ" + ?(Документ = Неопределено, "", "
	|	И (НЕ КассыККМ.Регистратор = &Ссылка)") + "
	|
	|СГРУППИРОВАТЬ ПО
	|	КассыККМ.ТипОплаты";
	Запрос.УстановитьПараметр("НаМомент",           ДатаРасчета);
	Запрос.УстановитьПараметр("КассаККМ",           КассаККМ);
	Запрос.УстановитьПараметр("Ссылка",             Документ);
	Запрос.УстановитьПараметр("ВидДвижения",        ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ВидДвиженияВозврат", ВидДвиженияНакопления.Расход);
	
	тзЗапрос = Новый ТаблицаЗначений;
	тзЗапрос.Колонки.Добавить("ТипОплаты");
	тзЗапрос.Колонки.Добавить("Сумма");
	тзЗапрос.Колонки.Добавить("СуммаВозврат");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Сумма = 0 И Выборка.СуммаВозврат = 0 Тогда 
			Продолжить; 
		ИначеЕсли Выборка.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные И Выборка.Сумма = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = тзЗапрос.Добавить();
		НоваяСтрока.ТипОплаты = Выборка.ТипОплаты; 
		НоваяСтрока.Сумма = Выборка.Сумма;
		НоваяСтрока.СуммаВозврат = 0;
		Если Выборка.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
			НоваяСтрока.Сумма = НоваяСтрока.Сумма-Выборка.СуммаВозврат;
		Иначе
			НоваяСтрока.СуммаВозврат = Выборка.СуммаВозврат;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат тзЗапрос;
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	Если Константы.ИспользоватьПодключаемоеОборудование.Получить() Тогда
		ОбязательныеРеквизиты.Добавить("КассаККМ");
	КонецЕсли;
	
	Если Объект.ХозОперация=Справочники.ХозОперации.ВнесениеВКассуККМ Тогда
		ОбязательныеРеквизиты.Добавить("Инкассатор");
		ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетовИнкассатор");
	КонецЕсли;
	
	Если Объект.ХозОперация=Справочники.ХозОперации.ИзъятиеИзКассыККМ Тогда
		ОбязательныеРеквизиты.Добавить("ПлатежнаяСистема");
		ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетовПлатежнаяСистема");
	КонецЕсли;
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Оплаты");
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Оплаты Цикл
		Если Строка.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные И Строка.Сумма > 0 Тогда
			ОбязательныеРеквизиты.Добавить("Оплаты.ПлатежнаяСистема");
			ОбязательныеРеквизиты.Добавить("Оплаты.ДоговорВзаиморасчетовПлатежнаяСистема");
		ИначеЕсли Строка.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно И Строка.Сумма > 0  ИЛИ Строка.СуммаВозврат > 0 Тогда
			ОбязательныеРеквизиты.Добавить("Оплаты.ПлатежнаяСистема");
			ОбязательныеРеквизиты.Добавить("Оплаты.ДоговорВзаиморасчетовПлатежнаяСистема");
		КонецЕсли;
	КонецЦикла;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТабличныеЧасти=Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("КассаККМ",                              ЛОЖЬ);
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетовИнкассатор",       КонтрольПоПодразделению);
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетовПлатежнаяСистема", КонтрольПоПодразделению);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

// Возвращает предопределенную структуру действий
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Оплаты.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия,"ТребуетсяПересчетЦен", Ложь) Тогда
		
		ПараметрыДействия.ТребуетсяПересчетЦен = Ложь;
		СтарыйКурс = ПараметрыДействия.СтарыйКурс;
		НовыйКурс  = Объект.КурсДокумента;
		
		Если (СтарыйКурс*НовыйКурс)=0 Тогда
			ТекстСообщения = НСтр("ru = 'При пересчете валюты обнаружен нулевой курс валюты.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,Объект.Ссылка,"КассаККМ");
			Возврат;
		КонецЕсли;
		
		Если СтарыйКурс=НовыйКурс Тогда
			Возврат;
		КонецЕсли;
		
		КоэффициентСоотношенияКурсов = СтарыйКурс/НовыйКурс;
		Для Каждого Строка Из Объект.Оплаты Цикл
			Строка.Сумма        = Окр(Строка.Сумма*КоэффициентСоотношенияКурсов, 2);
			Строка.СуммаВозврат = Окр(Строка.СуммаВозврат*КоэффициентСоотношенияКурсов, 2);
		КонецЦикла;
	КонецЕсли;
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	ТипЦен = Неопределено;
	ПараметрыДействия.Свойство("ТипЦен", ТипЦен);
	
	ХозОперация = Объект.ХозОперация;
	ВидДоговора = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ВидДоговора", Неопределено);
	Если ВидДоговора = Неопределено Тогда
		ВидДоговора = Справочники.ХозОперации.ПолучитьВидДоговора(ХозОперация);
	КонецЕсли;
	
	Если ТипЦен = Неопределено Тогда
		ПараметрыДействия.Вставить("ТипЦен", ?(ЕстьРеквизит(Объект, "ТипЦен"), Объект.ТипЦен, Справочники.ТипыЦен.ПустаяСсылка()));
	КонецЕсли;
	
	Если НЕ (ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетовИнкассатор) И Объект.ДоговорВзаиморасчетовИнкассатор.Владелец=Объект.Инкассатор И Справочники.ХозОперации.ДоговорСоответствуетХозОперации(Объект.ХозОперация,  Объект.ДоговорВзаиморасчетовИнкассатор) И Объект.ДоговорВзаиморасчетовИнкассатор.ПодразделениеКомпании = Объект.ПодразделениеКомпании) Тогда
		Если ЗначениеЗаполнено(Объект.Инкассатор) Тогда
			Объект.ДоговорВзаиморасчетовИнкассатор = ОбработкаРеквизитовДокументаСервер.ПолучитьДоговорВзаиморасчетов(Объект.Инкассатор, ВидДоговора, Объект, ПараметрыДействия);
			ДоговорВзаиморасчетовИнкассаторПриИзменении(Объект, ПараметрыДействия);
			ДоговорВзаиморасчетовПлатежнаяСистемаПриИзменении(Объект, ПараметрыДействия);
		Иначе
			// если контрагент не указан, то очистим договор
			Объект.ДоговорВзаиморасчетовИнкассатор = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
			ДоговорВзаиморасчетовИнкассаторПриИзменении(Объект, ПараметрыДействия);
			ДоговорВзаиморасчетовПлатежнаяСистемаПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ (ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетовПлатежнаяСистема) И Объект.ДоговорВзаиморасчетовПлатежнаяСистема.Владелец=Объект.ПлатежнаяСистема И Справочники.ХозОперации.ДоговорСоответствуетХозОперации(Объект.ХозОперация,  Объект.ДоговорВзаиморасчетовПлатежнаяСистема) И Объект.ДоговорВзаиморасчетовПлатежнаяСистема.ПодразделениеКомпании = Объект.ПодразделениеКомпании) Тогда
		Если ЗначениеЗаполнено(Объект.ПлатежнаяСистема) Тогда
			Объект.ДоговорВзаиморасчетовПлатежнаяСистема = ОбработкаРеквизитовДокументаСервер.ПолучитьДоговорВзаиморасчетов(Объект.ПлатежнаяСистема, ВидДоговора, Объект, ПараметрыДействия);
			ДоговорВзаиморасчетовИнкассаторПриИзменении(Объект, ПараметрыДействия);
			ДоговорВзаиморасчетовПлатежнаяСистемаПриИзменении(Объект, ПараметрыДействия);
		Иначе
			// если контрагент не указан, то очистим договор
			Объект.ДоговорВзаиморасчетовПлатежнаяСистема = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
			ДоговорВзаиморасчетовИнкассаторПриИзменении(Объект, ПараметрыДействия);
			ДоговорВзаиморасчетовПлатежнаяСистемаПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ВнесениеВКассуККМ Тогда
		Если ЗначениеЗаполнено(Объект.ПлатежнаяСистема) Тогда
			Объект.ПлатежнаяСистема = Справочники.Контрагенты.ПустаяСсылка();
			ПлатежнаяСистемаПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетовПлатежнаяСистема) Тогда
			Объект.ДоговорВзаиморасчетовПлатежнаяСистема = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
			ДоговорВзаиморасчетовПлатежнаяСистемаПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Инкассатор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ИнкассаторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Инкассатор) Тогда
		// Если договор уже выбран, тогда ничего не делаем
		Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетовИнкассатор)
			И Объект.ДоговорВзаиморасчетовИнкассатор.Владелец = Объект.Инкассатор
			И Справочники.ХозОперации.ДоговорСоответствуетХозОперации(Объект.ХозОперация, Объект.ДоговорВзаиморасчетовИнкассатор) Тогда
			Возврат;
		КонецЕсли;
		
		// получим договор
		Объект.ДоговорВзаиморасчетовИнкассатор = ОбработкаРеквизитовДокументаСервер.ПолучитьДоговорВзаиморасчетов(Объект.Инкассатор, Перечисления.ВидыДоговоров.Прочее, Объект, ПараметрыДействия);
	Иначе
		Объект.ДоговорВзаиморасчетовИнкассатор = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	КонецЕсли;
	
	ДоговорВзаиморасчетовИнкассаторПриИзменении(Объект, ПараметрыДействия);

КонецПроцедуры // ИнкассаторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов (инкассатор)".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовИнкассаторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетовИнкассатор) Тогда
		
		// Проверим договор на соответствие хоз. операции документа
		Если НЕ Справочники.ХозОперации.ДоговорСоответствуетХозОперации(Объект.ХозОперация, Объект.ДоговорВзаиморасчетовИнкассатор) Тогда
			Объект.ДоговорВзаиморасчетовИнкассатор = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
			Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОтображатьПредупреждение", Истина) Тогда
				ТекстСообщения = НСтр("ru = 'Вид договора инкассатора не соответствует Хоз.операции.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,Объект.Ссылка,"ДоговорВзаиморасчетовИнкассатор");
			КонецЕсли;
			ДоговорВзаиморасчетовИнкассаторПриИзменении(Объект, ПараметрыДействия);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДоговорВзаиморасчетовИнкассаторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Платежная система".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПлатежнаяСистемаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.ПлатежнаяСистема) Тогда
		Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетовПлатежнаяСистема)
			И Объект.ДоговорВзаиморасчетовПлатежнаяСистема.Владелец = Объект.ПлатежнаяСистема
			И Справочники.ХозОперации.ДоговорСоответствуетХозОперации(Объект.ХозОперация, Объект.ДоговорВзаиморасчетовПлатежнаяСистема) Тогда
			Возврат;
		КонецЕсли;
		
		// получим договор
		Объект.ДоговорВзаиморасчетовПлатежнаяСистема = ОбработкаРеквизитовДокументаСервер.ПолучитьДоговорВзаиморасчетов(Объект.ПлатежнаяСистема, Перечисления.ВидыДоговоров.Прочее, Объект, ПараметрыДействия);
	Иначе
		//	// если контрагент не указан то очистим договор
		Объект.ДоговорВзаиморасчетовПлатежнаяСистема=Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	КонецЕсли;
	
	ДоговорВзаиморасчетовПлатежнаяСистемаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПлатежнаяСистемаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов (Платежная система)".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПлатежнаяСистемаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетовПлатежнаяСистема) Тогда
		
		// Проверим договор на соответствие хоз. операции документа
		Если НЕ Справочники.ХозОперации.ДоговорСоответствуетХозОперации(Объект.ХозОперация, Объект.ДоговорВзаиморасчетовПлатежнаяСистема) Тогда
			Объект.ДоговорВзаиморасчетовПлатежнаяСистема = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
			ДоговорВзаиморасчетовПлатежнаяСистемаПриИзменении(Объект, ПараметрыДействия);
			Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОтображатьПредупреждение", Истина) Тогда
				ТекстСообщения = НСтр("ru = 'Вид договора платежной системы не соответствует Хоз.операции.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,Объект.Ссылка,"ДоговорВзаиморасчетовИнкассатор");
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДоговорВзаиморасчетовПлатежнаяСистемаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "КассаККМ".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КассаККМПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Объект.КассаККМ) Тогда
		Возврат;
	КонецЕсли;
	
	// Установим валюту документа
	Если НЕ Объект.КассаККМ.ВалютаДенежныхСредств = Объект.ВалютаДокумента Тогда
		
		// Определим курс валюты денежных средств
		ПараметрыДействия.Вставить("ТребуетсяПересчетЦен", ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбъектЗаполнен", ИСТИНА));
		ПараметрыДействия.Вставить("СтарыйКурс", Объект.КурсДокумента);
		
		Объект.ВалютаДокумента = Объект.КассаККМ.ВалютаДенежныхСредств;
		ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	// Проверим договоры на соответствие
	ПараметрыДействия.Вставить("ОтображатьПредупреждение", Ложь);
	ДоговорВзаиморасчетовИнкассаторПриИзменении(Объект, ПараметрыДействия);
	ДоговорВзаиморасчетовПлатежнаяСистемаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры //КассаККМПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОплаты

// Обработчик события возникающего при изменении данных реквизита "Тип оплаты" в таблице "Оплаты".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ОплатыТипОплатыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ВнесениеВКассуККМ И Строка.ТипОплаты <> Перечисления.ТипыОплатыККТ.Наличные Тогда
		ТекстСообщения = НСтр("ru = 'В кассу ККМ можно вносить только наличные средства.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,Объект.Ссылка);
		Строка.ТипОплаты = Перечисления.ТипыОплатыККТ.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // ОплатыТипОплатыПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Оплаты");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "Инкассация");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Оплаты");
	КонецЕсли;
	
	ВыборКассы 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборКассы.ВыборСсылки 		= "Справочник.КассыККМ.ФормаСписка";
	ВыборКассы.Обязательный 	= Истина;
	ВыборКассы.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать кассу ККМ.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "ОплатыПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить остатками по кассе ККМ'");
	Команда.Идентификатор	= "ОплатыЗаполнитьОстаткамиПоКассеККМ";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Оплаты";	
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("КассаККМ", ВыборКассы);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ОплатыЗаполнитьОстаткамиПоКассеККМ.Видимость", Истина);
	Если Объект.ХозОперация=Справочники.ХозОперации.ВнесениеВКассуККМ Тогда
		ПараметрыКоманд.Вставить("ОплатыЗаполнитьОстаткамиПоКассеККМ.Доступность", Ложь);
	ИначеЕсли Объект.ХозОперация=Справочники.ХозОперации.ИзъятиеИзКассыККМ Тогда
		ПараметрыКоманд.Вставить("ОплатыЗаполнитьОстаткамиПоКассеККМ.Доступность", Истина);
	КонецЕсли;
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа остатками по кассе ККМ
//
Функция ОплатыЗаполнитьОстаткамиПоКассеККМ(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.КассаККМ = ПараметрыЗаполнения.КассаККМ Тогда
		Объект.КассаККМ = ПараметрыЗаполнения.КассаККМ;
		КассаККМПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	ТаблицаОстатковКассы = ПолучитьОстатокПоКассеККМ(Объект.КассаККМ, ?(НЕ ЗначениеЗаполнено(Ссылка),Новый МоментВремени(ТекущаяДатаСеанса()),Новый МоментВремени(Объект.Дата)));
	Объект.Оплаты.Загрузить(ТаблицаОстатковКассы);
	
КонецФункции // ОплатыЗаполнитьОстаткамиПоКассеККМ()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.Инкассация",
		"ПФ_MXL_КМ6",
		НСтр("ru = 'КМ6'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик события формирования печатной формы.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - информация для заполнения письма при отправке печатной формы электронной почтой.
//                                     Содержит следующие поля:
//    ** Получатель - Строка, СписокЗначений, Массив - список получателей письма;
//    ** Тема - Строка - Тема письма,
//    ** Текст - Строка - Текст письма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_КМ6") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_КМ6",
															"КМ6",
															ПечатьКМ6(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;	
КонецПроцедуры // Печать()

// Формирует печатную форму "КМ6"
//
Функция ПечатьКМ6(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Инкассация_КМ6";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати,ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;

	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Инкассация.ПФ_MXL_КМ6");
		
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Шапка");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		ОбластьОборот          = Макет.ПолучитьОбласть("Оборот");

		// вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		
		ДатаДокумента = Документ.Дата;
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		
		ОбластьЗаголовок.Параметры.Организация = Документ.Организация;
		ОбластьЗаголовок.Параметры.ОрганизацияПредставление = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, Новый Структура("Наименование,АдресЮридический,ТелефонРабочий"), ДополнительныеПараметры);
		ОбластьЗаголовок.Параметры.ОКПО = Документ.Организация.КодПоОКПО;
		ОбластьЗаголовок.Параметры.ИНН = Документ.Организация.ИНН;
		ОбластьЗаголовок.Параметры.ОКДП = Документ.Организация.КодПоОКДП;
		ОбластьЗаголовок.Параметры.КассаККМ = Документ.КассаККМ.Наименование;
		ОбластьЗаголовок.Параметры.ИдентификаторПрограммы = Метаданные.Синоним;
		ОбластьЗаголовок.Параметры.ДокументНомер = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		ОбластьЗаголовок.Параметры.ДокументДата = Формат(Документ.Дата, "ДЛФ=D");
		ОбластьЗаголовок.Параметры.ВалютаНаименование = Документ.ВалютаДокумента.Наименование;
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// Выводим строку
		СуммаНаличных = 0;
		Для Каждого СтрокаОплат Из Документ.Оплаты Цикл
			Если СтрокаОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
				СуммаНаличных = СуммаНаличных + СтрокаОплат.Сумма;
			КонецЕсли;
		КонецЦикла;
		ОбластьСтрока.Параметры.Сумма = Формат(СуммаНаличных,ФорматВыводаСуммы);
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
		// Выводим подвал
		ОбластьПодвал.Параметры.Сумма = Формат(СуммаНаличных,ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаНаличных,Документ.ВалютаДокумента);
		
		УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент,ОбластьПодвал,,,,,Документ);
		
		ОбластьОборот.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"Руководитель","Руководитель"));
		ОбластьОборот.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"Кассир","Кассир"));
		ОбластьОборот.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"КассирОперационист","КассирОперационист"));
		
		ТабличныйДокумент.Вывести(ОбластьОборот);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатьКМ6()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Выписка);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.Инкассация);

КонецФункции

#КонецОбласти

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	
	ДоговораДокумента = Новый Массив;
	ДоговораДокумента.Добавить(Объект.ДоговорВзаиморасчетовИнкассатор);
	ДоговораДокумента.Добавить(Объект.ДоговорВзаиморасчетовПлатежнаяСистема);
	ВалютаДоговоров = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДоговораДокумента, "ВалютаВзаиморасчетов");
	
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговораИнкассатор",
		ВалютаДоговоров.Получить(Объект.ДоговорВзаиморасчетовИнкассатор));
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговораПлатежнаяСистема",
		ВалютаДоговоров.Получить(Объект.ДоговорВзаиморасчетовПлатежнаяСистема));
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаДоговораИнкассатор", ДополнительныеПараметры.ДляПроведения.ВалютаДоговораИнкассатор);
	Запрос.УстановитьПараметр(
		"ВалютаДоговораПлатежнаяСистема",
		ДополнительныеПараметры.ДляПроведения.ВалютаДоговораПлатежнаяСистема);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Инкассация.Организация КАК Организация,
	|	Инкассация.Ссылка КАК Ссылка,
	|	Инкассация.Дата КАК Дата,
	|	Инкассация.ХозОперация КАК ХозОперация,
	|	Инкассация.ДокументОснование КАК ДокументОснование,
	|	Инкассация.Инкассатор КАК Инкассатор,
	|	Инкассация.ДоговорВзаиморасчетовИнкассатор КАК ДоговорВзаиморасчетовИнкассатор,
	|	Инкассация.ДоговорВзаиморасчетовИнкассатор.ВалютаВзаиморасчетов КАК ВалютаДоговоравИнкассатор,
	|	Инкассация.ПлатежнаяСистема КАК ПлатежнаяСистема,
	|	Инкассация.ДоговорВзаиморасчетовПлатежнаяСистема КАК ДоговорВзаиморасчетовПлатежнаяСистема,
	|	Инкассация.ДоговорВзаиморасчетовПлатежнаяСистема.ВалютаВзаиморасчетов КАК ВалютаДоговоравПлатежнаяСистема,
	|	Инкассация.Ссылка КАК Сделка,
	|	Инкассация.СуммаДокумента КАК Сумма,
	|	Инкассация.ВалютаДокумента КАК ВалютаДокумента,
	|	Инкассация.КурсДокумента КАК КурсДокумента,
	|	Инкассация.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.НеЗачитывать) КАК СпособЗачетаАвансов,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.Инкассация КАК Инкассация
	|ГДЕ
	|	Инкассация.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр, &ВалютаДоговораИнкассатор, &ВалютаДоговораПлатежнаяСистема)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ХозОперация КАК ХозОперация,
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокумента.Инкассатор КАК Инкассатор,
	|	ДанныеДокумента.ДоговорВзаиморасчетовИнкассатор КАК ДоговорВзаиморасчетовИнкассатор,
	|	ДанныеДокумента.ДоговорВзаиморасчетовИнкассатор.ВалютаВзаиморасчетов КАК ВалютаДоговоравИнкассатор,
	|	ДанныеДокумента.ПлатежнаяСистема КАК ПлатежнаяСистема,
	|	ДанныеДокумента.ДоговорВзаиморасчетовПлатежнаяСистема КАК ДоговорВзаиморасчетовПлатежнаяСистема,
	|	ДанныеДокумента.ДоговорВзаиморасчетовПлатежнаяСистема.ВалютаВзаиморасчетов КАК ВалютаДоговоравПлатежнаяСистема,
	|	ДанныеДокумента.Сделка КАК Сделка,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА КурсыВалютВзаиморасчетовИнкассатор.Курс ЕСТЬ NULL
	|			ТОГДА ДанныеДокумента.Дата
	|		ИНАЧЕ ЕСТЬNULL(КурсыВалютВзаиморасчетовИнкассатор.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетовИнкассатор.Кратность, 1)
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетовИнкассатор,
	|	ВЫБОР
	|		КОГДА КурсыВалютВзаиморасчетовПлатежнаяСистема.Курс ЕСТЬ NULL
	|			ТОГДА ДанныеДокумента.Дата
	|		ИНАЧЕ ЕСТЬNULL(КурсыВалютВзаиморасчетовПлатежнаяСистема.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетовПлатежнаяСистема.Кратность, 1)
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетовПлатежнаяСистема,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютВзаиморасчетовИнкассатор
	|		ПО ДанныеДокумента.ВалютаДоговоравИнкассатор = КурсыВалютВзаиморасчетовИнкассатор.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютВзаиморасчетовПлатежнаяСистема
	|		ПО ДанныеДокумента.ВалютаДоговоравПлатежнаяСистема = КурсыВалютВзаиморасчетовПлатежнаяСистема.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнкассацияОплаты.Ссылка КАК Ссылка,
	|	ИнкассацияОплаты.НомерСтроки КАК НомерСтроки,
	|	ИнкассацияОплаты.УдалитьТипОплаты КАК УдалитьТипОплаты,
	|	ИнкассацияОплаты.Сумма КАК Сумма,
	|	ИнкассацияОплаты.СуммаВозврат КАК СуммаВозврат,
	|	ИнкассацияОплаты.ТипОплаты КАК ТипОплаты
	|ПОМЕСТИТЬ ОплатаПоИнкассации
	|ИЗ
	|	Документ.Инкассация.Оплаты КАК ИнкассацияОплаты
	|ГДЕ
	|	ИнкассацияОплаты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОплатаПоИнкассации.Ссылка КАК Ссылка,
	|	ОплатаПоИнкассации.Сумма КАК Сумма,
	|	Истина КАК ЭтоРасход,
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.ДокументОснование КАК ДокументОснование,
	|	Задолженность.Инкассатор КАК Контрагент,
	|	Задолженность.ДоговорВзаиморасчетовИнкассатор КАК ДоговорВзаиморасчетов,
	|	Задолженность.ВалютаДоговоравИнкассатор КАК ВалютаДоговора,
	|	Задолженность.Сделка КАК Сделка,
	|	Задолженность.КурсВалютыВзаиморасчетовИнкассатор КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр
	|ИЗ
	|	ОплатаПоИнкассации КАК ОплатаПоИнкассации
	|	ЛЕВОЕ СОЕДИНЕНИЕ Задолженность КАК Задолженность
	|		ПО ОплатаПоИнкассации.Ссылка = Задолженность.Ссылка
	|ГДЕ
	|	ОплатаПоИнкассации.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Наличные)
	|	И Задолженность.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ВнесениеВКассуККМ)
	|	И ОплатаПоИнкассации.Сумма > 0
	|	И Задолженность.ДоговорВзаиморасчетовИнкассатор.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОплатаПоИнкассации.Ссылка,
	|	ОплатаПоИнкассации.Сумма,
	|	Ложь,
	|	Задолженность.Организация,
	|	Задолженность.Дата,
	|	Задолженность.ХозОперация,
	|	Задолженность.ДокументОснование,
	|	Задолженность.Инкассатор,
	|	Задолженность.ДоговорВзаиморасчетовИнкассатор,
	|	Задолженность.ВалютаДоговоравИнкассатор,
	|	Задолженность.Сделка,
	|	Задолженность.КурсВалютыВзаиморасчетовИнкассатор,
	|	Задолженность.ВалютаДокумента,
	|	Задолженность.КурсДокумента,
	|	Задолженность.КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл,
	|	Задолженность.ВалютаУпр
	|ИЗ
	|	ОплатаПоИнкассации КАК ОплатаПоИнкассации
	|	ЛЕВОЕ СОЕДИНЕНИЕ Задолженность КАК Задолженность
	|		ПО ОплатаПоИнкассации.Ссылка = Задолженность.Ссылка
	|ГДЕ
	|	ОплатаПоИнкассации.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Наличные)
	|	И Задолженность.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ИзъятиеИзКассыККМ)
	|	И ОплатаПоИнкассации.Сумма > 0
	|	И Задолженность.ДоговорВзаиморасчетовИнкассатор.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОплатаПоИнкассации.Ссылка,
	|	ОплатаПоИнкассации.Сумма,
	|	Ложь,
	|	Задолженность.Организация,
	|	Задолженность.Дата,
	|	Задолженность.ХозОперация,
	|	Задолженность.ДокументОснование,
	|	Задолженность.ПлатежнаяСистема,
	|	Задолженность.ДоговорВзаиморасчетовПлатежнаяСистема,
	|	Задолженность.ВалютаДоговоравПлатежнаяСистема,
	|	Задолженность.Сделка,
	|	Задолженность.КурсВалютыВзаиморасчетовПлатежнаяСистема,
	|	Задолженность.ВалютаДокумента,
	|	Задолженность.КурсДокумента,
	|	Задолженность.КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл,
	|	Задолженность.ВалютаУпр
	|ИЗ
	|	ОплатаПоИнкассации КАК ОплатаПоИнкассации
	|	ЛЕВОЕ СОЕДИНЕНИЕ Задолженность КАК Задолженность
	|		ПО ОплатаПоИнкассации.Ссылка = Задолженность.Ссылка
	|ГДЕ
	|	ОплатаПоИнкассации.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Электронно)
	|	И Задолженность.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ИзъятиеИзКассыККМ)
	|	И ОплатаПоИнкассации.Сумма > 0
	|	И Задолженность.ДоговорВзаиморасчетовПлатежнаяСистема.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОплатаПоИнкассации.Ссылка,
	|	ОплатаПоИнкассации.СуммаВозврат,
	|	Истина,
	|	Задолженность.Организация,
	|	Задолженность.Дата,
	|	Задолженность.ХозОперация,
	|	Задолженность.ДокументОснование,
	|	Задолженность.ПлатежнаяСистема,
	|	Задолженность.ДоговорВзаиморасчетовПлатежнаяСистема,
	|	Задолженность.ВалютаДоговоравПлатежнаяСистема,
	|	Задолженность.Сделка,
	|	Задолженность.КурсВалютыВзаиморасчетовПлатежнаяСистема,
	|	Задолженность.ВалютаДокумента,
	|	Задолженность.КурсДокумента,
	|	Задолженность.КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл,
	|	Задолженность.ВалютаУпр
	|ИЗ
	|	ОплатаПоИнкассации КАК ОплатаПоИнкассации
	|	ЛЕВОЕ СОЕДИНЕНИЕ Задолженность КАК Задолженность
	|		ПО ОплатаПоИнкассации.Ссылка = Задолженность.Ссылка
	|ГДЕ
	|	ОплатаПоИнкассации.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Электронно)
	|	И Задолженность.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ИзъятиеИзКассыККМ)
	|	И ОплатаПоИнкассации.СуммаВозврат > 0
	|	И Задолженность.ДоговорВзаиморасчетовПлатежнаяСистема.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)";
	
	ДанныеОбОплате = Запрос.Выполнить().Выбрать();
	
	Пока ДанныеОбОплате.Следующий() Цикл
		
		Если ДанныеОбОплате.ВалютаДокумента = ДанныеОбОплате.ВалютаДоговора Тогда
			СуммаОплаты = ДанныеОбОплате.Сумма;
		Иначе
			СуммаОплаты = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					ДанныеОбОплате.Сумма,
					ДанныеОбОплате.ВалютаДокумента,
					ДанныеОбОплате.КурсДокумента,
					ДанныеОбОплате.ВалютаДоговора,
					ДанныеОбОплате.КурсВалютыВзаиморасчетов),
				2);
		КонецЕсли;
		
		РасчетыСКонтрагентамиСервер.ДобавитьЗаписьРасчетаКонтрагентов(
			ДанныеОбОплате,
			РасчетыСКонтрагентами,
			СуммаОплаты,
			?(ДанныеОбОплате.ЭтоРасход, ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход),
			?(ДанныеОбОплате.ЭтоРасход,
				Перечисления.ВидыОперацийВзаиморасчетов.НачислениеКредиторскойЗадолженности,
				Перечисления.ВидыОперацийВзаиморасчетов.НачислениеДебиторскойЗадолженности),
			ДанныеОбОплате.Сделка,
			Перечисления.ТипыРасчетов.Оплата);
		
	КонецЦикла;
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли