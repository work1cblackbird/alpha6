// Модуль объекта документа "Извлечение товаров из производства"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА) Экспорт
	
	// Если заполнение из сводного ремонтного заказа, настроим и перезапустим заполнение.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ЗаказНаряд") И ДанныеЗаполнения.Свойство("ТоварыИМатериалы") Тогда
		ДополнительныеСвойства.Вставить("ТоварыИМатериалы", ДанныеЗаполнения.ТоварыИМатериалы);
		Заполнить(ДанныеЗаполнения.ЗаказНаряд);
		Возврат;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Цех) Тогда
		Цех = ПраваИНастройкиПользователя.Значение("ОсновнойЦех", ЭтотОбъект);
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(СкладКомпании)) И (СкладКомпании.Розничный)  Тогда
		ТипЦен = СкладКомпании.ТипЦенРозничнойТорговли;
		ВалютаДокумента = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен,Неопределено,Ложь);
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		Для Каждого СтрТовар Из Товары Цикл
			СтрТовар.ЦенаРозничная = ЦенообразованиеСервер.ПолучитьЦену(ТипЦен,СтрТовар.Номенклатура,?(Ссылка.Пустая(),Дата,МоментВремени()),,,,СтрТовар.ХарактеристикаНоменклатуры,СтрТовар.ЕдиницаИзмерения,СкладКомпании.ПодразделениеКомпании);
			Документы.ИзвлечениеТоваровИзПроизводства.ТоварыЦенаРозничнаяПриИзменении(ЭтотОбъект, СтрТовар);
		КонецЦикла;
	КонецЕсли;
	
	// Заполним доп. поля для товарной строки
	Для Каждого СтрокаТовар Из Товары Цикл
		Если ПустаяСтрока(СтрокаТовар.ИдентификаторТовара) Тогда
			СтрокаТовар.ИдентификаторТовара = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	КодыМаркировки.Очистить();
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Предварительно проверим ТЧ Коды маркировки
	МаркировкаТоваровСервер.ПроверкаКодовМаркировкиПередЗаписью(ЭтотОбъект);
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим заполнение ТЧ Коды маркировки
	МаркировкаТоваровСервер.ПроверитьЗаполнениеКодовМаркировки(ЭтотОбъект, Отказ);
	
	// Проверим заполнение РНПТ у послеживаемого товара
	УчетПрослеживаемыхТоваровСервер.ПроверитьЗаполнениеРНПТПрослеживаемогоТовара(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ДополнительныеСвойства.Вставить("ЗаказНарядБыл");
	ДополнительныеСвойства.Вставить("СкладКомпанииБыл");
	ДополнительныеСвойства.Вставить("МоментВремениБыл");
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ДокументОснование.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен
			ИЛИ ДокументОснование.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
			Если НЕ ЭтотОбъект.Проведен Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru='Заказ-наряд выполнен или закрыт. Извлечение из производства запрещено.'"),
					, , ,
					Отказ
				);
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	// отработаем право "Запись раньше документа-основания"
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ЭтотОбъект.ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь) Тогда
		
		Если (Дата < ДокументОснование.Дата) Тогда
			
			ТекстЗаказНаряд = СтрШаблон(
				НСтр("ru = 'Заказ-наряд № %1 от %2'"),
				СокрЛП(ДокументОснование.Номер),
				Формат(ДокументОснование.Дата,"ДФ='dd.MM.yyyy ЧЧ:мм:сс'")
			);
			
			Если ПраваИНастройкиПользователя.Значение("ЗаписьРаньшеДокументаОснования", ЭтотОбъект) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Внимание! Документ <%1> записывается раньше создания своего документа-основания: <%2>'"),
						Строка(ЭтотОбъект),
						ТекстЗаказНаряд
					)
				);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru='Нет прав на запись раньше создания чем документ-основание: <%1>.'"),
						ТекстЗаказНаряд
					),
					,,,
					Отказ
				);
				Возврат;
			КонецЕсли;
			
		ИначеЕсли (ДокументОснование.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт)
			И (Дата > ДокументОснование.ДатаОкончания) Тогда
			
			ТекстЗаказНаряд = СтрШаблон(
				НСтр("ru = 'Заказ-наряд № %1 от %2'"),
				СокрЛП(ДокументОснование.Номер),
				Формат(ДокументОснование.ДатаОкончания,"ДФ='dd.MM.yyyy ЧЧ:мм:сс'")
			);
			
			Если ПраваИНастройкиПользователя.Значение("ЗаписьРаньшеДокументаОснования", ЭтотОбъект) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru='Внимание! Документ <%1> записывается позже окончания своего документа-основания: <%2>.'"),
						Строка(ЭтотОбъект),
						ТекстЗаказНаряд
					)
				);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru='Нет прав на запись позже окончания чем документ-основание: <%1>.'"),
						ТекстЗаказНаряд
					),
					,,,
					Отказ
				);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПеремещениеДеталейВПроизводство", ЭтотОбъект) Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Нет прав на извлечение деталей из производства!
			|Обратитесь к администратор системы.'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если (НЕ Отказ) И (РежимЗаписи<>РежимЗаписиДокумента.Проведение) Тогда
		//тКэшСуммСписания = Неопределено;
		СуммаДокумента = 0;
	КонецЕсли;	
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПартиямПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПроизводствуПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		СуммаДокумента = 0;
	КонецЕсли;

	
	Если ДокументОснование.Состояние=Справочники.ВидыСостоянийЗаказНарядов.Выполнен ИЛИ
		ДокументОснование.Состояние=Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Заказ-наряд выполнен или закрыт. Отмена извлечения из производства запрещена.'"));
		Отказ=Истина; 
		Возврат;
	КонецЕсли; 
	
	// Очистим реквизиты СуммаСписания и СуммаСписанияБезНДС.
	ОбработкаСобытийДокументаСервер.ЗаполнитьРеквизитыСуммСписанияВДокументе(ЭтотОбъект, Отказ, "ТоварыВПроизводстве", Истина);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Перемещение товаров на склад
	НаборЗаписейОстатки=Движения.ОстаткиТоваровКомпании;
	НаборЗаписейОстатки.РежимПроведения=РежимПроведения;
	НаборЗаписейОстатки.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейОстатки.РезультатЗапросаПоТоварам=Неопределено;
	НаборЗаписейОстатки.СкладКомпании=СкладКомпании;
	НаборЗаписейОстатки.Приходовать=Истина;
	НаборЗаписейОстатки.Резервировать=Ложь;
	НаборЗаписейОстатки.ДвиженияПоРознице=ПодразделениеКомпании.ПереоценкаРозницаПоПриходу И СкладКомпании.Розничный;
	Отказ=НЕ НаборЗаписейОстатки.Приход() ИЛИ Отказ;
	
	// проведем партии товаров
	Отказ = НЕ ПровестиПоПартиям(РежимПроведения,Ссылка) ИЛИ Отказ;
	
	// если перемещение товаров в розницу, то установим розничные цены
	Если (НЕ Отказ) И (СкладКомпании.Розничный) Тогда
		Если ПодразделениеКомпании.УстановкаЦенДокументамиПоступления И НЕ СкладКомпании.ТипЦенРозничнойТорговли.Рассчитывается Тогда
			НаборЗаписейЦены = Движения.Цены;
			НаборЗаписейЦены.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейЦены.Контрагент     = Неопределено;  			
			НаборЗаписейЦены.ТипЦен         = СкладКомпании.ТипЦенРозничнойТорговли;
			НаборЗаписейЦены.ПодразделениеКомпании     = СкладКомпании.ПодразделениеКомпании;			
			НаборЗаписейЦены.РезультатЗапросаПоТоварам = Неопределено;        			
			Отказ = НЕ НаборЗаписейЦены.УстановитьЦены() ИЛИ Отказ;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ЭтотОбъект.ОбменДанными.Загрузка=Истина;
		СуммаДокумента = Документы.ИзвлечениеТоваровИзПроизводства.РассчитатьИтогиОперации(ЭтотОбъект).СуммаДокумента;
		Записать(РежимЗаписиДокумента.Запись);
		ЭтотОбъект.ОбменДанными.Загрузка=Ложь;
	КонецЕсли;
	
	// Заполним реквизиты СуммаСписания и СуммаСписанияБезНДС.
	ОбработкаСобытийДокументаСервер.ЗаполнитьРеквизитыСуммСписанияВДокументе(ЭтотОбъект, Отказ, "ТоварыВПроизводстве");
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Заказ наряд"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаряд(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Заявка Тогда
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект,
			НСтр("ru = 'Заказ-наряд находится в состоянии ""Заявка"".
			|Вводить заказы на основании заказ-нарядов в состоянии ""Заявка"" запрещено.'"));
		Возврат Ложь;
	КонецЕсли;
	
	ТоварыИМатериалы = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ТоварыИМатериалы", Новый Структура);
	
	Товары.Очистить();
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТоварыВПроизводствеОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыВПроизводствеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТоварыВПроизводствеОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыВПроизводстве.Остатки(
	|			,
	|			ЗаказНаряд = &ЗаказНаряд
	|				И Цех = &Цех
	|				И (&БезФильтраПоОрганизации
	|					ИЛИ Организация = &Организация)
	|				" + ?(ТоварыИМатериалы.Свойство("Товары"), "И Номенклатура В
	|					(ВЫБРАТЬ
	|						ЗаказНарядТовары.Номенклатура
	|					ИЗ
	|						Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
	|					ГДЕ
	|						ЗаказНарядТовары.Ссылка = &ЗаказНаряд
	|						И ЗаказНарядТовары.НомерСтроки В (&НомераСтрокТоваров))", "")+") КАК ТоварыВПроизводствеОстатки");
		
	Запрос.УстановитьПараметр("ЗаказНаряд", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("Цех",        Цех);
	Запрос.УстановитьПараметр("БезФильтраПоОрганизации", ЗапасыТоваров.ФильтрЗапросаПоОрганизации(МоментВремени().Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НаМомент",   МоментВремени());
	Если ТоварыИМатериалы.Свойство("Товары") Тогда
		Запрос.УстановитьПараметр("НомераСтрокТоваров", ТоварыИМатериалы.Товары);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		Документы.ИзвлечениеТоваровИзПроизводства.ТоварыНоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока);
		НоваяСтрока.Количество                 = Выборка.Количество / НоваяСтрока.Коэффициент;
		
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаряд()

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// Формирует движения документа по партионным регистрам
// Режим - режим проведения (оперативный/неоперативный)
// ДокументСсылка - ссылка на документ который надо допровести по партиям
// Возвращает Истина - все хорошо, ложь - чего-то не так.
Функция ПровестиПоПартиям(Режим,ДокументСсылка) Экспорт
	Отказ=Ложь;
	
	// Получим шапку документа
	ШапкаДокумента=ПолучитьШапкуДокумента(ДокументСсылка);
	
	// Очистим возможные движения по производственному регистру, 
	// если было отложенное проведение по партиям.
	НаборЗаписейТоварыВПроизводстве=РегистрыНакопления.ТоварыВПроизводстве.СоздатьНаборЗаписей();
	НаборЗаписейТоварыВПроизводстве.Отбор.Регистратор.Значение=ШапкаДокумента.Ссылка;
	НаборЗаписейТоварыВПроизводстве.Отбор.Регистратор.Использование=Истина;
	НаборЗаписейТоварыВПроизводстве.Записать();
	
	// Проверим, если подразделение проводиться по партиям "отложенно", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям=Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	// Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
	//	Возврат НЕ Отказ;
	// КонецЕсли;
	
	// БАЛАНС: Если происходит перемещение товаров между складами подразделений, принадлежащих
	// различным балансовым "веткам", то возможен разрыв баланса. 
	ДобавлятьКорректирующиеЗаписи = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
	ПодразделениеОтправителя      = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ШапкаДокумента.ПодразделениеОтправителя, ШапкаДокумента.Дата);
	ПодразделениеПолучатель       = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ШапкаДокумента.ПодразделениеПолучателя, ШапкаДокумента.Дата);
	ДобавлятьКорректирующиеЗаписи = ДобавлятьКорректирующиеЗаписи И (ПодразделениеОтправителя<>ПодразделениеПолучатель);
	
	СтратегияСписанияПартийТоваровПоДатам = ПолучитьСтратегиюСписанияПоДатам(СкладКомпании, Организация, ?(Режим = РежимПроведенияДокумента.Оперативный, Неопределено, ШапкаДокумента.Дата));
	
	Если СтратегияСписанияПартийТоваровПоДатам = Перечисления.СтратегияСписанияПартийТоваровПоДатам.ЛИФО Тогда
		ПорядокСписанияПартий="Убыв"; 
	Иначе
		ПорядокСписанияПартий="Возр";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыВПроизводствеОстатки.Цех КАК Цех,
	               |	ТоварыВПроизводствеОстатки.Номенклатура КАК Номенклатура,
	               |	ТоварыВПроизводствеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ТоварыВПроизводствеОстатки.СтатусПартии КАК СтатусПартии,
	               |	ТоварыВПроизводствеОстатки.Партия КАК Партия,
				   |	ТоварыВПроизводствеОстатки.Партия.Дата КАК ПартияДата,
	               |	ТоварыВПроизводствеОстатки.ГТД КАК ГТД,
				   |	ТоварыВПроизводствеОстатки.Организация КАК Организация,
				   |	ТоварыВПроизводствеОстатки.СкладИсточник КАК СкладИсточник,
	               |	ЕСТЬNULL(ТоварыВПроизводствеОстатки.КоличествоОстаток,0) КАК Количество,
	               |	ЕСТЬNULL(ТоварыВПроизводствеОстатки.СуммаОстаток,0) КАК Сумма,
	               |	ЕСТЬNULL(ТоварыВПроизводствеОстатки.СуммаНДСОстаток,0) КАК СуммаНДС,
	               |	ЕСТЬNULL(ТоварыВПроизводствеОстатки.СуммаБезНДСОстаток,0) КАК СуммаБезНДС,
	               |	ЕСТЬNULL(ТоварыВПроизводствеОстатки.СуммаУпрОстаток,0) КАК СуммаУпр,
	               |	ЕСТЬNULL(ТоварыВПроизводствеОстатки.СуммаНДСУпрОстаток,0) КАК СуммаНДСУпр,
	               |	ЕСТЬNULL(ТоварыВПроизводствеОстатки.СуммаБезНДСУпрОстаток,0) КАК СуммаБезНДСУпр,
				   |	ВЫБОР
				   |		КОГДА ТоварыВПроизводствеОстатки.СкладИсточник = &Склад
				   |			ТОГДА 0
				   |		ИНАЧЕ 1
				   |	КОНЕЦ КАК Приоритет
	               |ИЗ
	               |	РегистрНакопления.ТоварыВПроизводстве.Остатки(
	               |			&НаМомент,
	               |			ЗаказНаряд = &ЗаказНаряд
	               |				И Цех = &Цех
	               |				И (&БезФильтраПоОрганизации
	               |					ИЛИ Организация = &Организация)) КАК ТоварыВПроизводствеОстатки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТоварыВПроизводствеОстатки.ХарактеристикаНоменклатуры Убыв,
				   |	ТоварыВПроизводствеОстатки.Партия.Дата "+ПорядокСписанияПартий+",
				   |	ТоварыВПроизводствеОстатки.ГТД УБЫВ,
				   |	Приоритет
				   |
				   |ИТОГИ
				   |	СУММА(Количество) КАК Количество,
				   |	СУММА(Сумма) КАК Сумма,
				   |	СУММА(СуммаНДС) КАК СуммаНДС,
				   |	СУММА(СуммаБезНДС) КАК СуммаБезНДС,
				   |	СУММА(СуммаУпр) КАК СуммаУпр,
				   |	СУММА(СуммаНДСУпр) КАК СуммаНДСУпр,
				   |	СУММА(СуммаБезНДСУпр) КАК СуммаБезНДСУпр
				   |ПО ТоварыВПроизводствеОстатки.Номенклатура
				   |
				   |";
	Запрос.УстановитьПараметр("НаМомент",ШапкаДокумента.МоментВремени);
	Запрос.УстановитьПараметр("ЗаказНаряд",ШапкаДокумента.ДокументОснование.Ссылка);
	Запрос.УстановитьПараметр("Цех",ШапкаДокумента.Цех);
	Запрос.УстановитьПараметр("БезФильтраПоОрганизации",
		ЗапасыТоваров.ФильтрЗапросаПоОрганизации(ШапкаДокумента.МоментВремени.Дата)
	);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад", ШапкаДокумента.СкладКомпании);
	ТабВПроизводстве = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	//andrec??? Нет блокировки на считываемые данные
	
	// Извлечение товаров из производства
	НаборЗаписейТоварыВПроизводстве=Движения.ТоварыВПроизводстве;
	ВремТовары=ШапкаДокумента.Ссылка.Товары.Выгрузить();
	ВремТовары.Сортировать("Партия Убыв, ГТД Убыв");
	
	// Получим таблицу номенклатуры с ручным списанием характеристик
	ТаблицаРучныхХарактеристик = ОбработкаТабличнойЧастиТовары.ПолучитьНоменклатуруСРучнымСписаниемХарактеристик(ШапкаДокумента.Ссылка);
	
	Для каждого СтрокаТоваров Из ВремТовары Цикл
		НадоСписать=Окр(СтрокаТоваров.Количество*СтрокаТоваров.Коэффициент,3);
		// Инициализируем переменные для расчета усредненной цены списанных партий
		ОбщееКоличество = 0;
		ОбщаяСумма = 0; ОбщаяСуммаНДС = 0; ОбщаяСуммаБезНДС = 0;
		ОбщаяСуммаУпр=0; ОбщаяСуммаНДСУпр = 0; ОбщаяСуммаБезНДСУпр = 0;
		// Получим строки таблицы партий с нашим товаром
		СтрокаПартийНоменклатуры=ТабВПроизводстве.Строки.Найти(СтрокаТоваров.Номенклатура,"Номенклатура");
		Если СтрокаПартийНоменклатуры<>Неопределено Тогда
			СтруктураОтбора=Новый Структура("Номенклатура",СтрокаТоваров.Номенклатура);
			Если ЗначениеЗаполнено(СтрокаТоваров.ХарактеристикаНоменклатуры) ИЛИ (ТаблицаРучныхХарактеристик<>Неопределено И ТаблицаРучныхХарактеристик.Найти(СтрокаТоваров.Номенклатура,"Номенклатура")<>Неопределено) Тогда 
				СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры",СтрокаТоваров.ХарактеристикаНоменклатуры);
			КонецЕсли;
			МассивНайденныхСтрок=СтрокаПартийНоменклатуры.Строки.НайтиСтроки(СтруктураОтбора);
			// Теперь идем по партиям товаров и списываем в соответствии с выбранной стратегией
			Для Сч=0 По МассивНайденныхСтрок.ВГраница() Цикл
				ТекСтрока=МассивНайденныхСтрок[Сч];
				// Проверки на нулевую партию или партию отрицательных остатков
				Если ТекСтрока.Количество=NULL ИЛИ ТекСтрока.Количество=0 Тогда Продолжить; КонецЕсли;
				
				// Если указаны партии, то пропустим все партии не наши
				Если ЗначениеЗаполнено(СтрокаТоваров.Партия) И ТекСтрока.Партия<>СтрокаТоваров.Партия Тогда
					Продолжить;
				КонецЕсли;
				// Если указаны ГТД, то пропустим все ГТД не наши
				Если ЗначениеЗаполнено(СтрокаТоваров.ГТД) И ТекСтрока.ГТД<>СтрокаТоваров.ГТД Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяЗапись=НаборЗаписейТоварыВПроизводстве.Добавить();
				НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Расход;
				НоваяЗапись.Период=ШапкаДокумента.Дата;
				НоваяЗапись.Регистратор=ШапкаДокумента.Ссылка;
				НоваяЗапись.ЗаказНаряд=ШапкаДокумента.ДокументОснование.Ссылка;
				НоваяЗапись.Цех=ШапкаДокумента.Цех;
				НоваяЗапись.Организация=ЗапасыТоваров.ОрганизацияДляДвиженийВПроизводстве(
					ШапкаДокумента.Организация,
					НоваяЗапись.Цех,
					НоваяЗапись.Период,
					ТекСтрока.Организация
				);
				НоваяЗапись.Номенклатура=ТекСтрока.Номенклатура;
				НоваяЗапись.ХарактеристикаНоменклатуры=ТекСтрока.ХарактеристикаНоменклатуры;
				НоваяЗапись.СкладИсточник=ТекСтрока.СкладИсточник;
				Партия=ТекСтрока.Партия;
				НоваяЗапись.Партия = Партия;
				НоваяЗапись.СтатусПартии=ТекСтрока.СтатусПартии;
				ГТД=ТекСтрока.ГТД;
				НоваяЗапись.ГТД = ГТД;
				// Определяемся с хоз. операцией
				НоваяЗапись.ХозОперация=ШапкаДокумента.ХозОперация;
		
				Если ТекСтрока.Количество > НадоСписать И ТекСтрока.Количество>0 Тогда
					КоличествоСписания		= НадоСписать;
					СуммаСписания			= Окр(ТекСтрока.Сумма/ТекСтрока.Количество*НадоСписать, 2);
					СуммаНДССписания		= Окр(ТекСтрока.СуммаНДС/ТекСтрока.Количество*НадоСписать, 2);
					СуммаБезНДССписания		= СуммаСписания - СуммаНДССписания;
					СуммаУпрСписания		= Окр(ТекСтрока.СуммаУпр/ТекСтрока.Количество*НадоСписать, 2);
					СуммаНДСУпрСписания		= Окр(ТекСтрока.СуммаНДСУпр/ТекСтрока.Количество*НадоСписать, 2);
					СуммаБезНДСУпрСписания	= СуммаУпрСписания - СуммаНДСУпрСписания;
				Иначе
					КоличествоСписания		= ТекСтрока.Количество;
					СуммаСписания			= Окр(ТекСтрока.Сумма, 2);
					СуммаНДССписания		= Окр(ТекСтрока.СуммаНДС, 2);
					СуммаБезНДССписания		= Окр(ТекСтрока.СуммаБезНДС, 2);
					СуммаУпрСписания		= Окр(ТекСтрока.СуммаУпр, 2);
					СуммаНДСУпрСписания		= Окр(ТекСтрока.СуммаНДСУпр, 2);
					СуммаБезНДСУпрСписания	= Окр(ТекСтрока.СуммаБезНДСУпр, 2);
				КонецЕсли;
				НоваяЗапись.Количество		= КоличествоСписания;
				НоваяЗапись.Сумма			= СуммаСписания;
				НоваяЗапись.СуммаНДС		= СуммаНДССписания;
				НоваяЗапись.СуммаБезНДС		= СуммаБезНДССписания;
				НоваяЗапись.СуммаУпр		= СуммаУпрСписания;
				НоваяЗапись.СуммаНДСУпр		= СуммаНДСУпрСписания;
				НоваяЗапись.СуммаБезНДСУпр	= СуммаБезНДСУпрСписания;
				
				// Запомним удельные значения списания для отрицательной партии товаров
				ОбщееКоличество = ОбщееКоличество + КоличествоСписания;
				ОбщаяСумма = ОбщаяСумма + СуммаСписания;
				ОбщаяСуммаНДС = ОбщаяСуммаНДС + СуммаНДССписания;
				ОбщаяСуммаБезНДС = ОбщаяСуммаБезНДС + СуммаБезНДССписания;
				ОбщаяСуммаУпр = ОбщаяСуммаУпр + СуммаУпрСписания;
				ОбщаяСуммаНДСУпр = ОбщаяСуммаНДСУпр + СуммаНДСУпрСписания;
				ОбщаяСуммаБезНДСУпр = ОбщаяСуммаБезНДСУпр + СуммаБезНДСУпрСписания;
							
				// Уменьшим ресурсы для остатка текущей партии
				Если КоличествоСписания >= ТекСтрока.Количество Тогда
					СтрокаПартийНоменклатуры.Строки.Удалить(ТекСтрока);
				Иначе
					ТекСтрока.Количество		= ТекСтрока.Количество - КоличествоСписания;
					ТекСтрока.Сумма				= ТекСтрока.Сумма - СуммаСписания;
					ТекСтрока.СуммаНДС			= ТекСтрока.СуммаНДС - СуммаНДССписания;
					ТекСтрока.СуммаБезНДС		= ТекСтрока.СуммаБезНДС - СуммаБезНДССписания;
					ТекСтрока.СуммаУпр			= ТекСтрока.СуммаУпр - СуммаУпрСписания;
					ТекСтрока.СуммаНДСУпр		= ТекСтрока.СуммаНДСУпр - СуммаНДСУпрСписания;
					ТекСтрока.СуммаБезНДСУпр	= ТекСтрока.СуммаБезНДСУпр - СуммаБезНДСУпрСписания;
				КонецЕсли;
				// Уменьшаем количество которое надо списать (или увеличиваем если это коррекция отрицательной партии).
				НадоСписать=НадоСписать - КоличествоСписания;
				Если НадоСписать<=0 Тогда Прервать; КонецЕсли;
			КонецЦикла;
			
			// Уменьшим ресурсы для остатка по номенклатуре
			Если ОбщееКоличество >= СтрокаПартийНоменклатуры.Количество Тогда
				ТабВПроизводстве.Строки.Удалить(СтрокаПартийНоменклатуры);
			Иначе
				СтрокаПартийНоменклатуры.Количество = СтрокаПартийНоменклатуры.Количество - ОбщееКоличество;
			КонецЕсли;
		КонецЕсли;
		Если НадоСписать>0 Тогда
			ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаТоваров.Номенклатура);
			Сообщение = СтрШаблон(НСтр("ru = '[%1] Товар ""%2""'"), ЗначениеКолонкиКода, СокрЛП(СтрокаТоваров.Номенклатура));
			Если ЗначениеЗаполнено(СтрокаТоваров.ХарактеристикаНоменклатуры) Тогда
				Сообщение = Сообщение
					+ Символы.НПП
					+ СтрШаблон(НСтр("ru = 'с характеристикой ""%1""'"), СокрЛП(СтрокаТоваров.ХарактеристикаНоменклатуры));
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТоваров.Партия) Тогда
				Сообщение = Сообщение + Символы.НПП + СтрШаблон(НСтр("ru = '(Партия <%1>)'"), СтрокаТоваров.Партия);
			КонецЕсли; 
			Если ЗначениеЗаполнено(СтрокаТоваров.ГТД) Тогда
				Сообщение = Сообщение + Символы.НПП + СтрШаблон(НСтр("ru = '(ГТД <%1>)'"), СокрЛП(СтрокаТоваров.ГТД));
			КонецЕсли; 
			Сообщение = Сообщение + СтрШаблон(
				НСтр("ru = '. Извлекается из производства %1 %2. Помещено в производство %3 %4. Превышение на %5 %6'"),
				СокрЛП(СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент),
				СокрЛП(СтрокаТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения),
				СокрЛП(ОбщееКоличество),
				СокрЛП(СтрокаТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения),
				СокрЛП(НадоСписать),
				СокрЛП(СтрокаТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения)
			);
			ОбщегоНазначения.СообщитьПользователю(Сообщение, ЭтотОбъект);
			Отказ = Истина;
		КонецЕсли; 
	КонецЦикла; 
	Если НЕ Отказ Тогда
		НаборЗаписейТоварыВПроизводстве.Записать();
	КонецЕсли; 
	
	Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
		// Доходы и расходы на себестоимость не оприходованных партий
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	СУММА(ТоварыВПроизводстве.СуммаУпр) КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
		|ГДЕ
		|	ТоварыВПроизводстве.Регистратор = &Регистратор
		|	И ТоварыВПроизводстве.ВидДвижения = &ВидДвижения
		|	И ТоварыВПроизводстве.СтатусПартии = &СтатусПартии";
		Запрос.УстановитьПараметр("Регистратор",ШапкаДокумента.Ссылка);
		Запрос.УстановитьПараметр("ВидДвижения",ВидДвиженияНакопления.Расход);
		Запрос.УстановитьПараметр("СтатусПартии",Перечисления.СтатусыПартий.ТоварКупленный);
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СуммаВсего=Выборка.СуммаУпр;
			Если СуммаВсего<>0 Тогда
				НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
				НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
				НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
				НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьНеоприходованныхПартий;
				НаборЗаписейДоходыИРасходы.ВУпрВалюте = Истина;
				НаборЗаписейДоходыИРасходы.Расход = СуммаВсего;
				НаборЗаписейДоходыИРасходы.Приход();
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		// Проведем партии товаров
		НаборЗаписейПартии=Движения.ПартииТоваровКомпании;
		НаборЗаписейГТД=Движения.ГТДПартийТоваровКомпании;
		Для каждого СтрокаИзПроизводства Из НаборЗаписейТоварыВПроизводстве Цикл
			НоваяЗапись=НаборЗаписейПартии.Добавить();
			НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период=ШапкаДокумента.Дата;
			НоваяЗапись.Регистратор=ШапкаДокумента.Ссылка;
			НоваяЗапись.СкладКомпании=ШапкаДокумента.СкладКомпании;
			НоваяЗапись.Организация=ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
				ШапкаДокумента.Организация,
				НоваяЗапись.СкладКомпании,
				НоваяЗапись.Период
			);
			НоваяЗапись.Номенклатура=СтрокаИзПроизводства.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры=СтрокаИзПроизводства.ХарактеристикаНоменклатуры;
			НоваяЗапись.СтатусПартии=СтрокаИзПроизводства.СтатусПартии;
			НоваяЗапись.Партия=СтрокаИзПроизводства.Партия;
			НоваяЗапись.Количество=СтрокаИзПроизводства.Количество;
			НоваяЗапись.Сумма=Окр(СтрокаИзПроизводства.Сумма,2);
			НоваяЗапись.СуммаНДС=Окр(СтрокаИзПроизводства.СуммаНДС,2);
			НоваяЗапись.СуммаБезНДС=Окр(СтрокаИзПроизводства.СуммаБезНДС,2);
			НоваяЗапись.СуммаУпр=Окр(СтрокаИзПроизводства.СуммаУпр,2);
			НоваяЗапись.СуммаНДСУпр=Окр(СтрокаИзПроизводства.СуммаНДСУпр,2);
			НоваяЗапись.СуммаБезНДСУпр=Окр(СтрокаИзПроизводства.СуммаБезНДСУпр,2);
			НоваяЗапись.ХозОперация=ШапкаДокумента.ХозОперация;
			НоваяЗапись.СтавкаНДС=СтрокаИзПроизводства.СтавкаНДС;
			Если ЗначениеЗаполнено(СтрокаИзПроизводства.ГТД) Тогда
				// Запишем ГТД перемещаемых партий
				НоваяЗапись=НаборЗаписейГТД.Добавить();
				НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Приход;
				НоваяЗапись.Период=ШапкаДокумента.Дата;
				НоваяЗапись.Регистратор=ШапкаДокумента.Ссылка;
				НоваяЗапись.СкладКомпании=ШапкаДокумента.СкладКомпании;
				НоваяЗапись.Организация=ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
					ШапкаДокумента.Организация,
					НоваяЗапись.СкладКомпании,
					НоваяЗапись.Период
				);
				НоваяЗапись.Номенклатура=СтрокаИзПроизводства.Номенклатура;
				НоваяЗапись.ХарактеристикаНоменклатуры=СтрокаИзПроизводства.ХарактеристикаНоменклатуры;
				НоваяЗапись.Партия=СтрокаИзПроизводства.Партия;
				НоваяЗапись.ГТД=СтрокаИзПроизводства.ГТД;
				НоваяЗапись.Количество=СтрокаИзПроизводства.Количество;
				НоваяЗапись.ХозОперация=ШапкаДокумента.ХозОперация;
			КонецЕсли; 
		КонецЦикла; 
		Если НЕ Отказ Тогда НаборЗаписейПартии.Записать(); КонецЕсли; 
	КонецЕсли;
	
	// Переместим из производства маркируемый товар
	НаборЗаписейМаркировкаТоваровВПроизводстве = Движения.МаркировкаТоваровВПроизводстве;
	НаборЗаписейМаркировкаТоваровВПроизводстве.РежимПроведения = Режим;
	НаборЗаписейМаркировкаТоваровВПроизводстве.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейМаркировкаТоваровВПроизводстве.РезультатЗапросаПоТоварам = Неопределено;
	НаборЗаписейМаркировкаТоваровВПроизводстве.ДокументЗаказНаряд = ШапкаДокумента.ДокументОснование.Ссылка;
	НаборЗаписейМаркировкаТоваровВПроизводстве.Цех = ШапкаДокумента.Цех;
	НаборЗаписейМаркировкаТоваровВПроизводстве.ШапкаДокумента = ШапкаДокумента;
	Отказ = НЕ НаборЗаписейМаркировкаТоваровВПроизводстве.Расход() ИЛИ Отказ;
	
	// Доходы и расходы
	Если ДобавлятьКорректирующиеЗаписи Тогда
		// У подразделения цеха-отправителя возникает расход.
		НаборЗаписейТоварыВПроизводстве=Движения.ТоварыВПроизводстве;
		ТаблицаПартий = НаборЗаписейТоварыВПроизводстве.Выгрузить();
		ТаблицаПартий.Свернуть("СтатусПартии","СуммаУпр");
		Для каждого ТекСтрокаДвижения Из ТаблицаПартий Цикл  	
			Если ТекСтрокаДвижения.СтатусПартии=Перечисления.СтатусыПартий.ТоварПринятыйКомиссия Тогда
				Продолжить;
			КонецЕсли;
			СуммаДиР = ТекСтрокаДвижения.СуммаУпр;
			Если СуммаДиР<>0 Тогда
				НаборЗаписейДоходыРасходы=Движения.ДоходыИРасходы;
				НаборЗаписейДоходыРасходы.ДокументОбъект = ЭтотОбъект;
				// Если способ ведения баланса не по подразделению то подразделение должно быть как у документа.
				Если БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата) Тогда
					НаборЗаписейДоходыРасходы.Подразделение = ШапкаДокумента.ПодразделениеОтправителя;
				Иначе
					НаборЗаписейДоходыРасходы.Подразделение = Неопределено;
				КонецЕсли;
				НаборЗаписейДоходыРасходы.ВУпрВалюте     = Истина;
				НаборЗаписейДоходыРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.Себестоимость;
				НаборЗаписейДоходыРасходы.ШапкаДокумента = ШапкаДокумента;
				НаборЗаписейДоходыРасходы.Расход         = СуммаДиР;
				Отказ = НЕ НаборЗаписейДоходыРасходы.Приход() ИЛИ Отказ;
			КонецЕсли;
		КонецЦикла;
		// У подразделения склада-получателя - доход.
		НаборЗаписейПартии=Движения.ПартииТоваровКомпании;
		ТаблицаПартий = НаборЗаписейПартии.Выгрузить();
		ТаблицаПартий.Свернуть("СтатусПартии","СуммаУпр");
		Для каждого ТекСтрокаДвижения Из ТаблицаПартий Цикл
			Если ТекСтрокаДвижения.СтатусПартии=Перечисления.СтатусыПартий.ТоварПринятыйКомиссия Тогда
				Продолжить;
			КонецЕсли;
			СуммаДиР = ТекСтрокаДвижения.СуммаУпр;
			Если СуммаДиР<>0 Тогда
				НаборЗаписейДоходыРасходы=Движения.ДоходыИРасходы;
				НаборЗаписейДоходыРасходы.ДокументОбъект = ЭтотОбъект;
				НаборЗаписейДоходыРасходы.Подразделение  = ШапкаДокумента.ПодразделениеПолучателя;
				НаборЗаписейДоходыРасходы.ВУпрВалюте     = Истина;
				НаборЗаписейДоходыРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
				НаборЗаписейДоходыРасходы.ШапкаДокумента = ШапкаДокумента;
				НаборЗаписейДоходыРасходы.Доход          = СуммаДиР;
				Отказ = НЕ НаборЗаписейДоходыРасходы.Приход() ИЛИ Отказ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Двигаем границу последовательности партий
	Если Ссылка <> ДокументСсылка Тогда
		
		РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоПартиямПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		
	КонецЕсли;
	
	РаботаСГраницами.СдвинутьГраницуПартий(ДокументСсылка, ДополнительныеСвойства, Движения);
	
	// Двигаем границу последовательности производства
	Если Ссылка <> ДокументСсылка Тогда
		
		РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоПроизводствуПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		
	КонецЕсли;
	
	РаботаСГраницами.СдвинутьГраницуПроизводства(ДокументСсылка, ДополнительныеСвойства, Движения);
	
	Возврат НЕ Отказ;
	
КонецФункции

// Возвращает выборку по шапке
// ДокументСсылка - Ссылка на документ для которого получаем шапку.
Функция ПолучитьШапкуДокумента(ДокументСсылка)
	Запрос=Новый Запрос("
	|ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ТипЦен КАК ТипЦен,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.Организация КАК Организация,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	/////////// ПРИВАТ ////////////
	|	Док.Цех КАК Цех,
	|	Док.СкладКомпании КАК СкладКомпании,
	|	Док.Цех.ПодразделениеКомпании КАК ПодразделениеОтправителя,
	|	Док.СкладКомпании.ПодразделениеКомпании КАК ПодразделениеПолучателя, 
	|	Док.ДокументОснование КАК ДокументОснование,
	|	Док.ДокументОснование КАК ДокументПродажи
	|
	|ИЗ
	|	Документ."+Метаданные().Имя+" КАК Док
	|ГДЕ
	|	Док.Ссылка=&Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

// Установим параметры проверки документа
ЭтотОбъект.ДополнительныеСвойства.Вставить("ТоварыЗапретАвтоСписанияХарактеристик", ИСТИНА);

#КонецОбласти

#КонецЕсли
