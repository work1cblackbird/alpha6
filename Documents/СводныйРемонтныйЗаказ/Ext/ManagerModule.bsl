// Модуль менеджера документа "Сводный ремонтный заказ"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Процедура ЗаблокироватьПриНаличииПодчиненных(Объект, Отказ) Экспорт
	
	Отказ = Ложь;	
	
КонецПроцедуры

// перезаполнение кеша
Процедура ПересчитатьКеш(Объект, ТаблицаТоваров, ПоСкладу=Неопределено, СтруктураОтбора = Неопределено, ТаблицаИндикации, СводнаяИндикация) Экспорт
	
	//Если НЕ ТипЗнч(КэшДанныхПоПеремещению) = Тип("ТаблицаЗначений") Тогда
		ТипКоличества = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 3));
		КэшДанныхПоПеремещению = Новый ТаблицаЗначений;
		КэшДанныхПоПеремещению.Колонки.Добавить("Номенклатура",               Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		КэшДанныхПоПеремещению.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		КэшДанныхПоПеремещению.Колонки.Добавить("СкладКомпании",              Новый ОписаниеТипов("СправочникСсылка.СкладыКомпании"));
		КэшДанныхПоПеремещению.Колонки.Добавить("ЕдиницаИзмерения",           Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	
		КэшДанныхПоПеремещению.Колонки.Добавить("Заказано",             ТипКоличества);
		КэшДанныхПоПеремещению.Колонки.Добавить("ЗаказаноПодЗН",        ТипКоличества);
		КэшДанныхПоПеремещению.Колонки.Добавить("ЗарезервированоПодЗН", ТипКоличества);
		КэшДанныхПоПеремещению.Колонки.Добавить("Зарезервировано",      ТипКоличества);
		КэшДанныхПоПеремещению.Колонки.Добавить("Коэффициент",          ТипКоличества);
		КэшДанныхПоПеремещению.Колонки.Добавить("ВПроизводстве",        ТипКоличества);
		КэшДанныхПоПеремещению.Колонки.Добавить("ОсталосьПереместить",  ТипКоличества);
		КэшДанныхПоПеремещению.Колонки.Добавить("ВозможноПереместить",  ТипКоличества);
		КэшДанныхПоПеремещению.Колонки.Добавить("ОстатокНаСкладе",      ТипКоличества);
		
		//Индексы
		КэшДанныхПоПеремещению.Индексы.Добавить("Номенклатура");
		КэшДанныхПоПеремещению.Индексы.Добавить("ХарактеристикаНоменклатуры");
	//КонецЕсли;
	
	Если ТипЗнч(СтруктураОтбора) = Тип("Структура") Тогда
		
		ТекОтбор = Новый Структура;
		Если СтруктураОтбора.Свойство("Номенклатура") Тогда
			ТекОтбор.Вставить("Номенклатура", СтруктураОтбора.Номенклатура);
		КонецЕсли;
		Если СтруктураОтбора.Свойство("ХарактеристикаНоменклатуры") Тогда
			ТекОтбор.Вставить("ХарактеристикаНоменклатуры", СтруктураОтбора.ХарактеристикаНоменклатуры);
		КонецЕсли;
		СтрокиДляУдаления = КэшДанныхПоПеремещению.НайтиСтроки(ТекОтбор);
		Для Каждого ТекСтрока Из СтрокиДляУдаления Цикл
			КэшДанныхПоПеремещению.Удалить(ТекСтрока);
		КонецЦикла;
		//Если ТаблицаТоваров = Неопределено Тогда
		//	ИсходнаяТаблица = ТаблицаТоваров.НайтиСтроки(ТекОтбор);
		//Иначе
			ИсходнаяТаблица = ТаблицаТоваров.НайтиСтроки(ТекОтбор);
		//КонецЕсли;
		ТаблицаПоЗН         = ТаблицаИндикации.Скопировать(ТаблицаИндикации.НайтиСтроки(ТекОтбор));
		ИтоговаяТаблицаПоЗН = СводнаяИндикация.Скопировать(СводнаяИндикация.НайтиСтроки(ТекОтбор));
		
		//Если ТаблицаПоЗН.Количество() = 0 И ИтоговаяТаблицаПоЗН.Количество() = 0 И ИсходнаяТаблица.Количество()>0 Тогда
		//	ПолучитьКэшДанныхПоПеремещению(, , ТекОтбор, ТаблицаТоваров);
		//	Возврат;
		//КонецЕсли;
		
	Иначе
		КэшДанныхПоПеремещению.Очистить();
		//Если ТаблицаТоваров = Неопределено Тогда
		//	ИсходнаяТаблица = Товары;
		//Иначе
			ИсходнаяТаблица = ТаблицаТоваров;
		//КонецЕсли;
		ТаблицаПоЗН         = ТаблицаИндикации.Скопировать();
		ИтоговаяТаблицаПоЗН = СводнаяИндикация.Скопировать();
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ИсходнаяТаблица Цикл
		
		СтруктураПоиска = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаТЧ.Номенклатура, СтрокаТЧ.ХарактеристикаНоменклатуры);
		СтрокиПроизводства = ИтоговаяТаблицаПоЗН.НайтиСтроки(СтруктураПоиска);
		Если СтрокиПроизводства.Количество() = 0 Тогда
			ВПроизводстве = 0;
		Иначе
			ВПроизводстве = СтрокиПроизводства[0].ВПроизводстве;
		КонецЕсли;
		
		Заказано             = 0;
		ЗаказаноПодЗН        = 0;
		ЗарезервированоПодЗН = 0;
		СтрокиЗаказов = СводнаяИндикация.НайтиСтроки(СтруктураПоиска);
		Если СтрокиЗаказов.Количество()>0 Тогда
			ПерваяСтрока = СтрокиЗаказов[0];
			Заказано             = ПерваяСтрока.Заказано;
			ЗаказаноПодЗН        = ПерваяСтрока.ЗаказаноПодЗН;
			ЗарезервированоПодЗН = ПерваяСтрока.ЗарезервированоПодЗН;
		КонецЕсли;
		
		Если ПоСкладу = Неопределено Тогда
			СтруктураПоиска.Вставить("СкладКомпании", СтрокаТЧ.СкладКомпании);
		Иначе
			СтруктураПоиска.Вставить("СкладКомпании", ПоСкладу);
		КонецЕсли;
		
		РесурсыСтроки  = ТаблицаПоЗН.НайтиСтроки(СтруктураПоиска);
		Если РесурсыСтроки.Количество()=0 Тогда
			
			//Если ПоСкладу = Неопределено ИЛИ СтрокаТЧ.СкладКомпании = ПоСкладу Тогда
				НоваяСтрока = КэшДанныхПоПеремещению.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				НоваяСтрока.ОсталосьПереместить  = СтрокаТЧ.Количество*СтрокаТЧ.Коэффициент;
				НоваяСтрока.Заказано             = Заказано;
				НоваяСтрока.ЗаказаноПодЗН        = ЗаказаноПодЗН;
				НоваяСтрока.ЗарезервированоПодЗН = ЗарезервированоПодЗН;
			//КонецЕсли;
			
		Иначе
			
			СтрокаРесурсов = РесурсыСтроки[0];
			Количество = СтрокаТЧ.Количество*СтрокаТЧ.Коэффициент;
			
			ВозможноПереместить      = СтрокаРесурсов.КоличествоОстаток;
			ВПроизводствеПоИсточнику = СтрокаРесурсов.ПеремещеноСоСклада;
			ВПроизводствеПоИсточнику = Мин(ВПроизводстве, ВПроизводствеПоИсточнику, Количество);
			ОсталосьПереместить      = Количество - ВПроизводствеПоИсточнику;
			ВозможноПереместить      = Мин(ОсталосьПереместить, ВозможноПереместить);
			
			СтрокаРесурсов.ПеремещеноСоСклада = СтрокаРесурсов.ПеремещеноСоСклада - ВПроизводствеПоИсточнику;
			СтрокаРесурсов.КоличествоОстаток  = СтрокаРесурсов.КоличествоОстаток - ВозможноПереместить;
			
			Если СтрокиПроизводства.Количество() > 0 Тогда
				Если ВПроизводстве = ВПроизводствеПоИсточнику Тогда
					ИтоговаяТаблицаПоЗН.Удалить(СтрокиПроизводства[0]);
				Иначе
					СтрокиПроизводства[0].ВПроизводстве = ВПроизводстве - ВПроизводствеПоИсточнику;
				КонецЕсли;
			КонецЕсли;
			
			//Если ПоСкладу = Неопределено ИЛИ СтрокаТЧ.СкладКомпании = ПоСкладу Тогда
				НоваяСтрока = КэшДанныхПоПеремещению.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРесурсов);
				НоваяСтрока.ЕдиницаИзмерения     = СтрокаТЧ.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент          = СтрокаТЧ.Коэффициент;
				НоваяСтрока.Заказано             = Заказано;
				НоваяСтрока.ЗаказаноПодЗН        = ЗаказаноПодЗН;
				НоваяСтрока.ЗарезервированоПодЗН = ЗарезервированоПодЗН;
				НоваяСтрока.ВПроизводстве        = ВПроизводствеПоИсточнику;
				НоваяСтрока.ОсталосьПереместить  = ОсталосьПереместить;
				НоваяСтрока.ВозможноПереместить  = ВозможноПереместить;
			//КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ИтоговаяТаблицаПоЗН Цикл
		СтрокиКеша = КэшДанныхПоПеремещению.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаТЧ.Номенклатура, СтрокаТЧ.ХарактеристикаНоменклатуры));
		Если СтрокиКеша.Количество()>0 Тогда
			ПерваяСтрокаКеша = СтрокиКеша[0];
			ВПроизводстве = СтрокаТЧ.ВПроизводстве;
			Для Каждого СтрокаКеша Из СтрокиКеша Цикл
				Если ВПроизводстве = 0 Тогда
					Прервать;
				КонецЕсли;
				Если СтрокаКеша.ОсталосьПереместить = 0 Тогда
					Продолжить;
				КонецЕсли;
				ОсталосьПереместить            = СтрокаКеша.ОсталосьПереместить;
				ДополнительноеПеремещение      = Мин(ОсталосьПереместить, ВПроизводстве);
				ОсталосьПереместить            = ОсталосьПереместить-ДополнительноеПеремещение;
				СтрокаКеша.ОсталосьПереместить = ОсталосьПереместить;
				СтрокаКеша.ВозможноПереместить = Мин(ОсталосьПереместить, СтрокаКеша.ВозможноПереместить);
				СтрокаКеша.ВПроизводстве       = СтрокаКеша.ВПроизводстве + ДополнительноеПеремещение;
				ВПроизводстве = ВПроизводстве  - ДополнительноеПеремещение;
			КонецЦикла;
			ПерваяСтрокаКеша.ВПроизводстве = ПерваяСтрокаКеша.ВПроизводстве + ВПроизводстве;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПересчитатьКеш()

// перезаполнение кеша по перемещению
Процедура ПолучитьКэшДанныхПоПеремещению(Объект, ТаблицаТоваров, ПараметрыДействия = Неопределено, ПоСкладу = Неопределено, Знач РезервыПоЗаказНаряду = Неопределено, ЗаказПокупателя, СтруктураОтбора = Неопределено) Экспорт
	
	Если РезервыПоЗаказНаряду = Неопределено Тогда
		РезервыПоЗаказНаряду = Объект.ЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ТекстОтбораЗаказПокупателя = "";
	Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		ТекстОтбораЗаказПокупателя = " (Заказ=&ВыбЗаказПокупателя) ИЛИ ";
		Запрос.УстановитьПараметр("ВыбЗаказПокупателя", ЗаказПокупателя);
	КонецЕсли;
	
	//ОтборПоСтроке = Ложь;
	ТекстОтбора = "";
	ВиртТекстОтбора = "";
	//СтруктураОтбораБезСклада = Новый Структура;
	//Если ТипЗнч(ТаблицаИндикации) = Тип("ТаблицаЗначений") И ТипЗнч(СтруктураОтбора) = Тип("Структура") Тогда
	//	
	//	Для Каждого ТекЭлемент Из СтруктураОтбора Цикл
	//		ИмяЭлемента = ТекЭлемент.Ключ;
	//		ТекстОтбора = ТекстОтбора + ?(ТекстОтбора = "", "ГДЕ ", " И ") + "
	//		|	ЗаказНарядТовары."+ИмяЭлемента+" = &"+ИмяЭлемента;
	//		Если НЕ ИмяЭлемента = "СкладКомпании" Тогда
	//			ВиртТекстОтбора = ВиртТекстОтбора + " И 
	//			|	"+ИмяЭлемента+" = &"+ИмяЭлемента;
	//			СтруктураОтбораБезСклада.Вставить(ИмяЭлемента, ТекЭлемент.Значение);
	//		КонецЕсли;
	//		Запрос.УстановитьПараметр(ИмяЭлемента, ТекЭлемент.Значение);
	//		ОтборПоСтроке = Истина;
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
	// Таблица строк
	ТекстЗапроса="
	|ВЫБРАТЬ
	|	ЗаказНарядТовары.Номенклатура,
	|	ЗаказНарядТовары.ХарактеристикаНоменклатуры,
	|	ЗаказНарядТовары.СкладКомпании КАК СкладКомпании
	|ПОМЕСТИТЬ ЗаказНарядТовары
	|ИЗ
	|	&Товары КАК ЗаказНарядТовары
	|" + ТекстОтбора +"
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказНарядТовары.Номенклатура КАК Номенклатура,
	|	ЗаказНарядТовары.СкладКомпании КАК СкладКомпании,
	|	ЗаказНарядТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ
	|	ТаблицаТоваров
	|ИЗ
	|	ЗаказНарядТовары КАК ЗаказНарядТовары
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СкладКомпании
	|;
	|
	|ВЫБРАТЬ
	|	ПеремещениеТоваровВПроизводство.Ссылка КАК Регистратор
	|ПОМЕСТИТЬ
	|	ПеремещенияТоваровВПроизводство
	|ИЗ
	|	Документ.ПеремещениеТоваровВПроизводство КАК ПеремещениеТоваровВПроизводство
	|ГДЕ
	|	ПеремещениеТоваровВПроизводство.ДокументОснование = &ЗаказНаряд
	|;
	|
	|ВЫБРАТЬ
	|	ЗаказВнутренний.Ссылка КАК Регистратор
	|ПОМЕСТИТЬ
	|	ТаблицаЗаказов
	|ИЗ
	|	Документ.ЗаказВнутренний КАК ЗаказВнутренний
	|ГДЕ
	|	ЗаказВнутренний.ДокументОснование = &ЗаказНаряд
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.ДокументОснование = &ЗаказНаряд
	|;
	|
	|ВЫБРАТЬ
	|	ОбъединеннаяТаблица.Номенклатура КАК Номенклатура,
	|	ОбъединеннаяТаблица.СкладКомпании КАК СкладКомпании,
	|	ОбъединеннаяТаблица.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ОбъединеннаяТаблица.ПеремещеноСоСклада) КАК ПеремещеноСоСклада,
	|	СУММА(ОбъединеннаяТаблица.Зарезервировано) КАК Зарезервировано,
	|	СУММА(ОбъединеннаяТаблица.ОстатокНаСкладе)+СУММА(ОбъединеннаяТаблица.Зарезервировано) КАК КоличествоОстаток,
	|	СУММА(ОбъединеннаяТаблица.ОстатокНаСкладе) КАК ОстатокНаСкладе
	|ИЗ(
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Номенклатура,
	|		ТаблицаТоваров.СкладКомпании,
	|		ТаблицаТоваров.ХарактеристикаНоменклатуры,
	|		0 КАК ПеремещеноСоСклада,
	|		0 КАК Зарезервировано,
	|		0 КАК ОстатокНаСкладе
	|	ИЗ
	|		ТаблицаТоваров КАК ТаблицаТоваров
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОстаткиТоваровКомпании.Номенклатура,
	|		ОстаткиТоваровКомпании.СкладКомпании,
	|		ОстаткиТоваровКомпании.ХарактеристикаНоменклатуры,
	|		ОстаткиТоваровКомпании.Количество КАК ПеремещеноСоСклада,
	|		0 КАК Зарезервировано,
	|		0 КАК ОстатокНаСкладе
	|	ИЗ
	|		РегистрНакопления.ОстаткиТоваровКомпании КАК ОстаткиТоваровКомпании
	|	ГДЕ
	|		ОстаткиТоваровКомпании.Регистратор ССЫЛКА Документ.ПеремещениеТоваровВПроизводство И 
	|		ОстаткиТоваровКомпании.Регистратор В (ВЫБРАТЬ Регистратор ИЗ ПеремещенияТоваровВПроизводство)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗаказыПокупателейОстатки.Номенклатура,
	|		ЗаказыПокупателейОстатки.СкладКомпании,
	|		ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	|		0,
	|		ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0),
	|		0
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(,
	|		"+?(РезервыПоЗаказНаряду, ТекстОтбораЗаказПокупателя+"Заказ В (ВЫБРАТЬ ТаблицаЗаказов.Регистратор ИЗ ТаблицаЗаказов КАК ТаблицаЗаказов)","
	|		("+ТекстОтбораЗаказПокупателя+"(Заказ В (ВЫБРАТЬ ТаблицаЗаказов.Регистратор ИЗ ТаблицаЗаказов КАК ТаблицаЗаказов)) ИЛИ (Контрагент=&Контрагент И (СкладКомпании, Номенклатура, ХарактеристикаНоменклатуры) В 
	|			(ВЫБРАТЬ СкладКомпании, Номенклатура, ХарактеристикаНоменклатуры ИЗ ТаблицаТоваров КАК ТаблицаТоваров)))")+"
	|		"+?(ПоСкладу=Неопределено,"","И (СкладКомпании=&ПоСкладу)")+") КАК ЗаказыПокупателейОстатки
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ОстаткиТоваровКомпанииОстатки.Номенклатура,
	|		ОстаткиТоваровКомпанииОстатки.СкладКомпании,
	|		ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры,
	|		0,
	|		0,
	|		ОстаткиТоваровКомпанииОстатки.КоличествоОстаток-ОстаткиТоваровКомпанииОстатки.РезервОстаток
	|	ИЗ
	|		РегистрНакопления.ОстаткиТоваровКомпании.Остатки(, (СкладКомпании, Номенклатура, ХарактеристикаНоменклатуры) В 
	|			(ВЫБРАТЬ СкладКомпании, Номенклатура, ХарактеристикаНоменклатуры ИЗ ТаблицаТоваров КАК ТаблицаТоваров)) КАК ОстаткиТоваровКомпанииОстатки) КАК ОбъединеннаяТаблица
	|СГРУППИРОВАТЬ ПО
	|	ОбъединеннаяТаблица.Номенклатура,
	|	ОбъединеннаяТаблица.СкладКомпании,
	|	ОбъединеннаяТаблица.ХарактеристикаНоменклатуры
	|";
	
	Запрос.Текст = ТекстЗапроса;
	//Если ИсходнаяТаблица = Неопределено Тогда
		Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	//Иначе
	//	Запрос.УстановитьПараметр("Товары", ИсходнаяТаблица);
	//КонецЕсли;
	Запрос.УстановитьПараметр("ЗаказНаряд", Объект.Ссылка);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("ПоСкладу",   ПоСкладу);
	
	//Если ОтборПоСтроке Тогда
		//Выборка = Запрос.Выполнить().Выбрать();
		//Пока Выборка.Следующий() Цикл
		//	СтруктураПоиска = Новый Структура;
		//	СтруктураПоиска.Вставить("Номенклатура",               Выборка.Номенклатура);
		//	СтруктураПоиска.Вставить("СкладКомпании",              Выборка.СкладКомпании);
		//	СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);
		//	НайденныеСтроки = ТаблицаТоваров.НайтиСтроки(СтруктураПоиска);
		//	Если НайденныеСтроки.Количество()>0 Тогда
		//		СтрокаИндикации = НайденныеСтроки[0];
		//	Иначе
		//		СтрокаИндикации = ТаблицаТоваров.Добавить();
		//	КонецЕсли;
		//	ЗаполнитьЗначенияСвойств(СтрокаИндикации, Выборка);
		//КонецЦикла;
	//Иначе
		ТаблицаИндикации = Запрос.Выполнить().Выгрузить();
	//КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ТаблицаТоваровБезСкладов
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|ВЫБРАТЬ
	|	ОбъединенныйЗапрос.Номенклатура,
	|	ОбъединенныйЗапрос.ХарактеристикаНоменклатуры,
	|	СУММА(ОбъединенныйЗапрос.ВПроизводстве) КАК ВПроизводстве,
	|	СУММА(ОбъединенныйЗапрос.Заказано) КАК Заказано,
	|	СУММА(ОбъединенныйЗапрос.ЗаказаноПодЗН) КАК ЗаказаноПодЗН,
	|	СУММА(ОбъединенныйЗапрос.ЗарезервированоПодЗН) КАК ЗарезервированоПодЗН
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ТоварыВПроизводствеОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыВПроизводствеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ТоварыВПроизводствеОстатки.КоличествоОстаток КАК ВПроизводстве,
	|		0 КАК Заказано,
	|		0 КАК ЗаказаноПодЗН,
	|		0 КАК ЗарезервированоПодЗН
	|	ИЗ
	|		РегистрНакопления.ТоварыВПроизводстве.Остатки(, ЗаказНаряд = &ЗаказНаряд"+ВиртТекстОтбора+") КАК ТоварыВПроизводствеОстатки
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		0,
	|		ЗаказыПокупателейОстатки.ЗаказаноОстаток-ЗаказыПокупателейОстатки.РезервОстаток,
	|		0,
	|		0
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(,
	|		"+?(РезервыПоЗаказНаряду, ТекстОтбораЗаказПокупателя+"Заказ В (ВЫБРАТЬ ТаблицаЗаказов.Регистратор ИЗ ТаблицаЗаказов КАК ТаблицаЗаказов)","
	|		("+ТекстОтбораЗаказПокупателя+"(Заказ В (ВЫБРАТЬ ТаблицаЗаказов.Регистратор ИЗ ТаблицаЗаказов КАК ТаблицаЗаказов)) ИЛИ (Контрагент=&Контрагент И (Номенклатура, ХарактеристикаНоменклатуры) В 
	|			(ВЫБРАТЬ Номенклатура, ХарактеристикаНоменклатуры ИЗ ТаблицаТоваровБезСкладов КАК ТаблицаТоваров)))")+") КАК ЗаказыПокупателейОстатки
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗаказыПокупателейОстатки.Номенклатура,
	|		ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	|		0,
	|		0,
	|		ЗаказыПокупателейОстатки.ЗаказаноОстаток-ЗаказыПокупателейОстатки.РезервОстаток,
	|		ЗаказыПокупателейОстатки.РезервОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(,
	|		"+ТекстОтбораЗаказПокупателя+"Заказ В (ВЫБРАТЬ ТаблицаЗаказов.Регистратор ИЗ ТаблицаЗаказов КАК ТаблицаЗаказов)) КАК ЗаказыПокупателейОстатки) КАК ОбъединенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ОбъединенныйЗапрос.Номенклатура,
	|	ОбъединенныйЗапрос.ХарактеристикаНоменклатуры
	|	";
	
	//Если ОтборПоСтроке Тогда
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Пока Выборка.Следующий() Цикл
	//		СтруктураПоиска = Новый Структура;
	//		СтруктураПоиска.Вставить("Номенклатура",               Выборка.Номенклатура);
	//		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);
	//		НайденныеСтроки = СводнаяИндикация.НайтиСтроки(СтруктураПоиска);
	//		Если НайденныеСтроки.Количество()>0 Тогда
	//			СтрокаКеша = НайденныеСтроки[0];
	//		Иначе
	//			СтрокаКеша = СводнаяИндикация.Добавить();
	//		КонецЕсли;
	//		ЗаполнитьЗначенияСвойств(СтрокаКеша, Выборка);
	//	КонецЦикла;
	//Иначе
		СводнаяИндикация = Запрос.Выполнить().Выгрузить();
	//КонецЕсли;
	
	//Если ОтборПоСтроке Тогда
	//	ПересчитатьКеш(ПоСкладу, СтруктураОтбора, ИсходнаяТаблица);
	//Иначе
		ПересчитатьКеш(Объект, ТаблицаТоваров, ПоСкладу, СтруктураОтбора, ТаблицаИндикации, СводнаяИндикация);
	//КонецЕсли;
	
КонецПроцедуры //ПолучитьКэшДанныхПоПеремещению()

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь, ТаблицаСводногоРемонтногоЗаказа = Неопределено) Экспорт
	
	СуммаДокумента = 0;
	
	Если Объект.КурсДокумента = 0 Тогда
		КурсДокумента = 1;
	Иначе
		КурсДокумента = Объект.КурсДокумента;
	КонецЕсли;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|		КОГДА ЗаказНаряд.КурсДокумента = &Курс ТОГДА
		|			ЗаказНаряд.СуммаДокумента
		|		ИНАЧЕ
		|			ЗаказНаряд.СуммаДокумента*(ЗаказНаряд.КурсДокумента/&Курс)
		|	КОНЕЦ), 0) КАК СуммаДокумента
		|ИЗ
		|	Документ.ЗаказНаряд КАК ЗаказНаряд
		|ГДЕ
		|	ЗаказНаряд.СводныйРемонтныйЗаказ = &ДокументОснование
		|	И ЗаказНаряд.ПометкаУдаления = ЛОЖЬ");
		
		Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
		Запрос.УстановитьПараметр("Курс",              КурсДокумента);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СуммаДокумента = Выборка.СуммаДокумента;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРемонт") Тогда
		СуммаДокумента = Объект.ДокументОснование.СуммаДокумента;
	КонецЕсли;
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", СуммаДокумента);
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	СуммаДокумента = 0;
	
	Если ТаблицаСводногоРемонтногоЗаказа = Неопределено Тогда
	
		Запрос.Текст = "ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|		КОГДА ТаблицаСумм.КурсДокумента = &Курс ТОГДА
		|			ТаблицаСумм.СуммаДокумента
		|		ИНАЧЕ
		|			ТаблицаСумм.СуммаДокумента*(ТаблицаСумм.КурсДокумента/&Курс)
		|	КОНЕЦ), 0) КАК СуммаДокумента
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаказНаряд.Ссылка.КурсДокумента КАК КурсДокумента,
		|		СУММА(ЗаказНаряд.СуммаНДС) КАК СуммаДокумента
		|	ИЗ
		|		Документ.ЗаказНаряд.Автоработы КАК ЗаказНаряд
		|	ГДЕ
		|		ЗаказНаряд.Ссылка.СводныйРемонтныйЗаказ = &ДокументОснование
		|		И ТипЗначения(ЗаказНаряд.Ссылка.СводныйРемонтныйЗаказ) = Тип(Документ.СводныйРемонтныйЗаказ)
		|		И (НЕ ЗаказНаряд.Ссылка.СводныйРемонтныйЗаказ = ЗНАЧЕНИЕ(Документ.СводныйРемонтныйЗаказ.ПустаяСсылка))
		|		И ЗаказНаряд.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	СГРУППИРОВАТЬ ПО
		|		ЗаказНаряд.Ссылка.КурсДокумента
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ЗаказНаряд.Ссылка.КурсДокумента КАК КурсДокумента,
		|		СУММА(ЗаказНаряд.СуммаНДС)
		|	ИЗ
		|		Документ.ЗаказНаряд.Товары КАК ЗаказНаряд
		|	ГДЕ
		|		ЗаказНаряд.Ссылка.СводныйРемонтныйЗаказ = &ДокументОснование
		|		И ТипЗначения(ЗаказНаряд.Ссылка.СводныйРемонтныйЗаказ) = Тип(Документ.СводныйРемонтныйЗаказ)
		|		И (НЕ ЗаказНаряд.Ссылка.СводныйРемонтныйЗаказ = ЗНАЧЕНИЕ(Документ.СводныйРемонтныйЗаказ.ПустаяСсылка))
		|		И ЗаказНаряд.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	СГРУППИРОВАТЬ ПО
		|		ЗаказНаряд.Ссылка.КурсДокумента) КАК ТаблицаСумм";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СуммаДокумента = Выборка.СуммаДокумента;
		КонецЕсли;
		
	Иначе
		
		Для Каждого ТекущийЗаказНаряд Из ТаблицаСводногоРемонтногоЗаказа.ПолучитьЭлементы() Цикл
			
			СуммаЗН = 0;
			Для Каждого ТекущаяСтрока Из ТекущийЗаказНаряд.ПолучитьЭлементы() Цикл
				СуммаЗН = СуммаЗН + ТекущаяСтрока.СуммаНДС;
			КонецЦикла;
			
			СуммаДокумента = СуммаДокумента + ?(ТекущийЗаказНаряд.КурсДокумента = КурсДокумента, СуммаЗН, СуммаЗН*(ТекущийЗаказНаряд.КурсДокумента/КурсДокумента));
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС",    СуммаДокумента);
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента-ИтогиОперации.СуммаНДС);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
	ПолучателиSMS.Очистить();
	
	Если ТипЗнч(ПредметСообщения) = Тип("ДокументСсылка.СводныйРемонтныйЗаказ") Тогда
		ПредметПисьма = ПредметСообщения;
	Иначе
		ПредметПисьма = ПредметСообщения.Предмет;
	КонецЕсли;
	
	Если ТипЗнч(ПредметПисьма) = Тип("ДокументСсылка.СводныйРемонтныйЗаказ") Тогда
		
		ДанныеПредмета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ПредметПисьма,
				"ПредставлениеТелефона, Заказчик");
		
		Если ЗначениеЗаполнено(ДанныеПредмета.ПредставлениеТелефона) Тогда
			НомерТелефона = ДанныеПредмета.ПредставлениеТелефона;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(НомерТелефона) Тогда
			НоваяСтрока = ПолучателиSMS.Добавить();
			НоваяСтрока.НомерТелефона = НомерТелефона;
			НоваяСтрока.Контакт = ДанныеПредмета.Заказчик;
			НоваяСтрока.Представление = СокрЛП(ДанныеПредмета.Заказчик);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("Заказчик");
	ОбязательныеРеквизиты.Добавить("Автомобиль");
	ОбязательныеРеквизиты.Добавить("ДатаСводногоРемонтногоЗаказа");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	//КонтролируемыеРеквизиты.Вставить("СкладКомпании",         КонтрольПоПодразделению);
	//КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Инициализируем параметры обработки действия с объектом
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", ИСТИНА);
	
	// Возвращаем сформированную структуру параметров
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Заказчик".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЗаказчикПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Заполняет системные поля телефона и электронной почты в документе
	УправлениеКонтактнойИнформациейАльфаАвто.ЗаполнитьКонтактнуюИнформациюВДокументе(
		Объект,
		Объект.Заказчик,
		ПараметрыДействия
	);
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ВладелецАвтомобиля = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
		Объект.Автомобиль,
		Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин,
		Объект.ДатаСводногоРемонтногоЗаказа
	);
	Если (ПараметрыДействия.Свойство("НеобходимоПерезаполнитьАвтомобиль")
			И ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеобходимоПерезаполнитьАвтомобиль", Ложь))
		ИЛИ НЕ (ПараметрыДействия.Свойство("НеобходимоПерезаполнитьАвтомобиль"))
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Автомобиль)
		ИЛИ Объект.Заказчик = ВладелецАвтомобиля Тогда
			АвтомобильПриИзменении(Объект, ПараметрыДействия);
	Иначе
		
		ПараметрыДействия.Вставить(
			"ВладелецАвтомобиля",
			?(ЗначениеЗаполнено(ВладелецАвтомобиля), ВладелецАвтомобиля, Справочники.Контрагенты.ПустаяСсылка())
		);
		ПараметрыДействия.НеобходимоПерезаполнитьАвтомобиль = Истина;
	КонецЕсли;
	
	АвтомобилиКонтрагента = Справочники.Контрагенты.АвтомобилиКонтрагента(Объект.Заказчик, Объект.Дата);
	ПараметрыДействия.Вставить("АвтомобилиКонтрагента", АвтомобилиКонтрагента);
	
КонецПроцедуры // ЗаказчикПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автомобиль".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобильПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Автомобиль = Объект.Автомобиль;
	
	Если ЗначениеЗаполнено(Автомобиль) Тогда
		Владелец = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин, Объект.ДатаСводногоРемонтногоЗаказа);
		
		Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
			Владелец = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;

		Если (ЗначениеЗаполнено(Владелец)) И (НЕ Объект.Заказчик = Владелец) Тогда
			Если (ПараметрыДействия.Свойство("НеобходимоПерезаполнитьЗаказчика") И ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеобходимоПерезаполнитьЗаказчика", Ложь))
				ИЛИ НЕ (ПараметрыДействия.Свойство("НеобходимоПерезаполнитьЗаказчика")) ИЛИ НЕ ЗначениеЗаполнено(Объект.Заказчик) Тогда
					Объект.Заказчик = Владелец;
					ЗаказчикПриИзменении(Объект, ПараметрыДействия);
			Иначе
				ПараметрыДействия.НеобходимоПерезаполнитьЗаказчика = Истина;
				ПараметрыДействия.Вставить("ВладелецАвтомобиля", Владелец);
			КонецЕсли;
		КонецЕсли;
		
		Объект.Пробег = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег, Объект.ДатаСводногоРемонтногоЗаказа);
		
	КонецЕсли;
	
КонецПроцедуры // АвтомобильПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения) Экспорт
	
	ПараметрыКоманды = Новый Структура();
	ПоследовательныеОперацииКлиентСервер.ДобавитьВыборСсылки(
		ПараметрыКоманды,
		"Контрагент",
		"Справочник.Контрагенты.ФормаСписка",
		,
		,
		ИСТИНА,
		НСтр("ru = 'Необходимо выбрать контрагента.'"));
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.СводныйРемонтныйЗаказ",
		"СписокЗаказНарядов",
		НСтр("ru = 'Список заказ-нарядов'"),
		СсылкаНаДокумент);
	КомандыПечатиКопия = КомандыПечати.Скопировать();
	КомандыПечатиКопия.Очистить();
	
	Документы.ЗаказНаряд.ДобавитьКомандыПечати(КомандыПечатиКопия);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		ДополнительныеОтчетыИОбработки.ПриПолученииКомандПечати(КомандыПечатиКопия, "Документ.ЗаказНаряд");
	КонецЕсли;
	
	Для Каждого Строка Из КомандыПечатиКопия Цикл
		Строка.МестоРазмещения = "ПодменюПечатиЗаказНарядов";
		Строка.СписокФорм = "ФормаДокумента";
		Строка.ДополнительныеПараметры.Вставить("ГруппаПечати", "ДляПечатиЗаказНаряда"); // Для формирования УИ командам печати

		Строка.ТипыОбъектовПечати.Добавить(Тип("ДокументСсылка.СводныйРемонтныйЗаказ"));
		Строка.ТипыОбъектовПечати.Добавить(Тип("ДокументСсылка.ЗаказНаряд"));
		
		ЗаполнитьЗначенияСвойств(КомандыПечати.Добавить(), Строка);
	КонецЦикла;
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СписокЗаказНарядов") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"СписокЗаказНарядов",
															"Список заказ-нарядов",
															ПечатьСписокЗаказНарядов(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

Функция ПечатьСписокЗаказНарядов(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СводныйРемонтныйЗаказ_СписокЗаказНарядов";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматПредставленияГодаВыпускаАвтомобиля = АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Документ);
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СводныйРемонтныйЗаказ.ПФ_MXL_СписокЗаказНарядов");
		
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаСписокЗН");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		
		// Вывод шапки документа
		ОбластьЗаголовок.Параметры.НомерДок = НомерДляПечати;
		ОбластьЗаголовок.Параметры.ДатаСоздания = Формат(Документ.ДатаСоздания, "ДФ = дд.ММ.гггг");
		ОбластьЗаголовок.Параметры.Заказчик = Документ.Заказчик;
		ОбластьЗаголовок.Параметры.ЗаказчикПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Заказчик);
		ОбластьЗаголовок.Параметры.ЗаказчикАдресПочтовый = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Заказчик, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, ТекущаяДатаСеанса());
		ОбластьЗаголовок.Параметры.ЗаказчикТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Заказчик, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		
		Автомобиль = Документ.Автомобиль;
		Если ЗначениеЗаполнено(Автомобиль) Тогда
			ОбластьЗаголовок.Параметры.Автомобиль = Автомобиль.Модель;
			ОбластьЗаголовок.Параметры.АвтомобильМодель = Автомобиль.Модель.Наименование;
			ОбластьЗаголовок.Параметры.АвтомобильКод = Автомобиль.VIN;
			
			ОбластьЗаголовок.Параметры.АвтомобильГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер,Документ.ДатаСоздания);
			ОбластьЗаголовок.Параметры.АвтомобильГодВыпуска = Формат(Автомобиль.ГодВыпуска,ФорматПредставленияГодаВыпускаАвтомобиля);
			ОбластьЗаголовок.Параметры.АвтомобильПробег = Формат(Документ.Пробег,"ЧЦ=10");
		КонецЕсли; 
		
		// выведем или удалим ШК
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// готовим шапку
		НомерСтраницы = 2; НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура();
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = "Список заказ-нарядов по сводному ремонтному заказу "+НомерДляПечати+" от "+Формат(Документ.ДатаСоздания, "ДФ = дд.ММ.гггг");
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказНаряд.Номер,
		               |	ЗаказНаряд.Контрагент,
		               |	ЗаказНаряд.ВидРемонта,
		               |	ЗаказНаряд.Состояние,
		               |	ЗаказНаряд.ДатаСоздания,
		               |	ЗаказНаряд.ДатаЗакрытия,
		               |	ЗаказНаряд.Ссылка КАК ЗаказНаряд,
		               |	ЗаказНаряд.СуммаДокумента,
		               |	ЗаказНаряд.ВалютаДокумента
		               |ИЗ
		               |	Документ.ЗаказНаряд КАК ЗаказНаряд
		               |ГДЕ
		               |	ЗаказНаряд.СводныйРемонтныйЗаказ = &Ссылка
		               |	И ЗаказНаряд.ПометкаУдаления = ЛОЖЬ";
		Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
		
		ВыборкаТабличнойЧасти = Запрос.Выполнить().Выгрузить();
		
		НомерСтроки = 1;		
		Для каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, СтрокаТЧ);
			
			ОбластьСтрока.Параметры.Сумма = Формат(СтрокаТЧ.СуммаДокумента, ФорматВыводаСуммы) + ", " + СтрокаТЧ.ВалютаДокумента;
			
			ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока, ОбластьШапкаТаблицы,, НомерСтраницы, СтруктураИтоговПоСтранице, Документ, мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
						
		КонецЦикла;
		
		// Вывод подвала
		ВыборкаТабличнойЧасти.Свернуть("ВалютаДокумента", "СуммаДокумента");
		Если ВыборкаТабличнойЧасти.Количество() > 0 Тогда
			ИтогоПоЗаказНарядам = "Всего по заказ-нарядам:";
			Для Каждого ТекущаяСтрока Из ВыборкаТабличнойЧасти Цикл
				ИтогоПоЗаказНарядам = ИтогоПоЗаказНарядам + Символы.ПС + РаботаСКурсамиВалют.СформироватьСуммуПрописью(ТекущаяСтрока.СуммаДокумента, ТекущаяСтрока.ВалютаДокумента);
			КонецЦикла;
			ОбластьПодвал.Параметры.СуммаВсего = ИтогоПоЗаказНарядам;
		КонецЕсли;
		
		УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент,ОбластьПодвал,,,НомерСтраницы,,Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
КонецФункции

// Процедура добавляет команду параметров печати.
// 
Процедура ДобавитьКомандыПечатиКомплектаЗаказНаряда(Форма, СписокЗначенийПечатьКомплектаЗН, МестоРазмещенияКоманд) Экспорт
	
	ИмяФормы = Форма.ИмяФормы;
	
	// Получим адрес хранения описания команд печати
	АдресКомандПечати = Форма.Команды.Найти("АдресКомандПечатиВоВременномХранилище");
	
	// Проверим использование печатных форм для данной формы
	Если АдресКомандПечати=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипыОбъектовПечати = Новый Массив;
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяФормы);
	Если ОбъектМетаданных <> Неопределено Тогда
		ОбъектМетаданных = ОбъектМетаданных.Родитель();
	КонецЕсли;
	
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат;
	Иначе
		Если ОбщегоНазначения.ЭтоЖурналДокументов(ОбъектМетаданных) Тогда
			Для каждого Документ Из ОбъектМетаданных.РегистрируемыеДокументы Цикл
				ТипыОбъектовПечати.Добавить("Документ." + Документ.Имя);
			КонецЦикла;
		Иначе
			ТипыОбъектовПечати.Добавить("Документ.ЗаказНаряд");
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкаПечатиКомплекта.Ссылка,
	|	НастройкаПечатиКомплекта.Код,
	|	НастройкаПечатиКомплекта.Наименование
	|ПОМЕСТИТЬ ВозможныеКомплекты
	|ИЗ
	|	Справочник.НастройкаПечатиКомплекта КАК НастройкаПечатиКомплекта
	|ГДЕ
	|	НастройкаПечатиКомплекта.СписокПечатныхФорм.ТипДокумента В(&ТипДокумента)
	|	И НастройкаПечатиКомплекта.ПометкаУдаления = ЛОЖЬ
	|	И (НастройкаПечатиКомплекта.ТипДоступа = ЗНАЧЕНИЕ(Перечисление.ТипыДоступаКВариантуОтчета.БезОграничения)
	|			ИЛИ НастройкаПечатиКомплекта.ТипДоступа = ЗНАЧЕНИЕ(Перечисление.ТипыДоступаКВариантуОтчета.ПоПользователю)
	|				И НастройкаПечатиКомплекта.ОбъектДоступа = &Администратор
	|			ИЛИ НастройкаПечатиКомплекта.ТипДоступа = ЗНАЧЕНИЕ(Перечисление.ТипыДоступаКВариантуОтчета.ПоПодразделениюКомпании)
	|				И НастройкаПечатиКомплекта.ОбъектДоступа = &ПодразделениеКомпании
	|			ИЛИ НастройкаПечатиКомплекта.ТипДоступа = ЗНАЧЕНИЕ(Перечисление.ТипыДоступаКВариантуОтчета.ПоГруппеПользователей)
	|				И НастройкаПечатиКомплекта.ОбъектДоступа В
	|					(ВЫБРАТЬ
	|						ГруппыПользователейСостав.Ссылка
	|					ИЗ
	|						Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|					ГДЕ
	|						ГруппыПользователейСостав.Пользователь = &Администратор))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкаПечатиКомплектаСписокПечатныхФорм.ТипДокумента,
	|	ВозможныеКомплекты.Код КАК Код,
	|	ВозможныеКомплекты.Наименование
	|ИЗ
	|	ВозможныеКомплекты КАК ВозможныеКомплекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкаПечатиКомплекта.СписокПечатныхФорм КАК НастройкаПечатиКомплектаСписокПечатныхФорм
	|		ПО ВозможныеКомплекты.Ссылка = НастройкаПечатиКомплектаСписокПечатныхФорм.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкаПечатиКомплектаСписокПечатныхФорм.ТипДокумента,
	|	ВозможныеКомплекты.Код,
	|	ВозможныеКомплекты.Наименование
	|ИТОГИ ПО
	|	Код";
	Запрос.УстановитьПараметр("ТипДокумента",ТипыОбъектовПечати);
	Запрос.УстановитьПараметр("ПодразделениеКомпании",ПараметрыСеанса.ПодразделениеКомпании);
	Запрос.УстановитьПараметр("Администратор",Пользователи.ТекущийПользователь());
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Получим список всех использующихся команд печати в форме
	КомандыПечати = ПолучитьИзВременногоХранилища(АдресКомандПечати.Действие);
	СписокЗначенийПечатьКомплектаЗН.Добавить(Выборка.Код);
	
	Пока Выборка.Следующий() Цикл
		ИмяКоманды = "ПечатьКомплекта" + Выборка.Код;
		НоваяКоманда = КомандыПечати.Добавить();
		ВыборкаТипов = Выборка.Выбрать();
		ПредставлениеКоманды = ИмяКоманды;
		Пока ВыборкаТипов.Следующий() Цикл
			НоваяКоманда.ТипыОбъектовПечати.Добавить(Тип(СтрЗаменить(ВыборкаТипов.ТипДокумента,"Документ", "ДокументСсылка")));
			ПредставлениеКоманды = ВыборкаТипов.Наименование;
		КонецЦикла;
		НоваяКоманда.Идентификатор = ИмяКоманды;
		НоваяКоманда.Представление = ПредставлениеКоманды;
		НоваяКоманда.ЭлементФормы = ИмяКоманды;
		
		ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
		ОписаниеКомандыФормы.ИмяКоманды            = ИмяКоманды;
		ОписаниеКомандыФормы.ИмяГруппы             = МестоРазмещенияКоманд.Имя;
		ОписаниеКомандыФормы.Заголовок             = ПредставлениеКоманды;
		ОписаниеКомандыФормы.Подсказка             = НСтр("ru='Печать комплекта'");
		ОписаниеКомандыФормы.ТолькоВоВсехДействиях = Ложь;
		ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(Форма, ОписаниеКомандыФормы);
		
		СписокЗначенийПечатьКомплектаЗН.Добавить(Выборка.Код);
	КонецЦикла;
	
	СписокЗначенийПечатьКомплектаЗН.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
КонецПроцедуры // ДобавитьКомандыПечатиКомплектаЗаказНаряда()

#КонецОбласти

#КонецОбласти
	
#Область ПрограммныйИнтерфейс

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказНаряд);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ДефектовочнаяВедомость);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаАренду);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.СводныйРемонтныйЗаказ);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли
