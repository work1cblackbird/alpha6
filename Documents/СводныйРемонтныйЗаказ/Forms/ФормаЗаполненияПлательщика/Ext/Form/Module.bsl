///////////////////////////////////////////////////////////////////////////////
// Модуль формы "Форма заполнения плательщиками"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СводныйРемонтныйЗаказ = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СводныйРемонтныйЗаказ", Неопределено);
	Заказчик = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Заказчик", Неопределено);
	ТекущиеПлательщикиЗН = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ТекущиеПлательщикиЗН", Новый Соответствие);
	Автомобиль = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ИзмененныйАвтомобиль", Неопределено);
	ЭтотОбъект.ЗакрыватьПриЗакрытииВладельца = Истина;
	
	СформироватьСписокЗаказНарядов(ТекущиеПлательщикиЗН);
	
	Если НЕ СписокЗаказНарядов.Количество() > 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// если форма вызвана при изменении реквизита автомобиля в СРЗ
	Если ЗначениеЗаполнено(Автомобиль) Тогда
		НастроитьФормуПриИзмененииАвтомобиля();
	Иначе
		Элементы.НадписьОбИзмененииПлательщика.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обнаружено изменение заказчика на ""%1"". Выполнить замену плательщика для следующих заказ-нарядов:'"), Заказчик);
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокЗаказНарядов

&НаКлиенте
Процедура СписокЗаказНарядовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаказНарядовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события нажатия кнопки "Применить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Применить(Команда)
	
	ВыбранныеЗаказНаряды = СписокЗаказНарядов.НайтиСтроки(Новый Структура("Использование", Истина));
	СписокВыбранныхЗаказНарядов = Новый СписокЗначений;
	Для Каждого ВыбранныйЗаказНаряд Из ВыбранныеЗаказНаряды Цикл
		СписокВыбранныхЗаказНарядов.Добавить(ВыбранныйЗаказНаряд.ЗаказНаряд);
	КонецЦикла;
	
	Результат = Новый Структура();
	Результат.Вставить("ПересчетСуммовыхПоказателей", ПересчетДокументов);
	Результат.Вставить("СписокЗаказНарядов", СписокВыбранныхЗаказНарядов);
	
	Закрыть(Результат);
	
КонецПроцедуры // Применить()

// Обработчик события нажатия кнопки "Применить" при изменении автомобиля.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПрименитьИзменениеАвтомобиля(Команда)
	
	Если СписокЗаказНарядов.НайтиСтроки(Новый Структура("Использование", Истина)).Количество() > 0 Тогда
		Если СписокЗаказНарядов.НайтиСтроки(Новый Структура("Использование,УчаствовалВПланировании", Истина, Истина)).Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ПересчетЗапланированных"),
				"Выбраны заказ-наряды, участвующие в планировании.
				|Уверены, что хотите выполнить пересчет?",
				РежимДиалогаВопрос.ДаНет,,
				КодВозвратаДиалога.Нет,
				"Выполнение пересчета");
		Иначе
			ВыполнитьОбработкуОповещения(Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ПересчетЗапланированных"), КодВозвратаДиалога.Да);
		КонецЕсли;
	Иначе
		ПоказатьВопрос(Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ВыходБезПересчета"),
			"Нет выбранных заказ-нарядов.
			|Уверены, что хотите отменить пересчет?",
			РежимДиалогаВопрос.ДаНет,,
			КодВозвратаДиалога.Нет,
			"Завершение пересчета");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Отменить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Отменить(Команда)
	
	Закрыть();
	
КонецПроцедуры // Отменить()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура формирования списка документов заказ-нарядов, которые подчинены сводному ремонтному заказу.
//
&НаСервере
Процедура СформироватьСписокЗаказНарядов(ТекущиеПлательщикиЗН)
	
	РедактированиеЗаказНарядов = ПраваИНастройкиПользователя.Значение("РедактированиеЗакрытыхЗаказНарядов");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ЗаказНаряд.Ссылка КАК ЗаказНаряд,
		|	ЗаказНаряд.Контрагент КАК Плательщик,
		|	ЗаказНаряд.Состояние
		|ИЗ
		|	Документ.ЗаказНаряд КАК ЗаказНаряд
		|ГДЕ
		|	ЗаказНаряд.СводныйРемонтныйЗаказ = &СводныйРемонтныйЗаказ
		|	И ЗаказНаряд.ПометкаУдаления = ЛОЖЬ
		|	И ЗаказНаряд.ВидРемонта.ТипРемонта = ЗНАЧЕНИЕ(Перечисление.ТипыРемонта.Платный)";
	Запрос.УстановитьПараметр("СводныйРемонтныйЗаказ", СводныйРемонтныйЗаказ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = СписокЗаказНарядов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если НЕ ТекущиеПлательщикиЗН.Получить(Выборка.ЗаказНаряд) = Неопределено Тогда
			НоваяСтрока.Плательщик = ТекущиеПлательщикиЗН.Получить(Выборка.ЗаказНаряд);
		КонецЕсли;
		
		НоваяСтрока.ДокументПредставление = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Выборка.ЗаказНаряд);
		НоваяСтрока.Использование         = НЕ (Выборка.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт ИЛИ НоваяСтрока.Плательщик = Заказчик);
		НоваяСтрока.ТолькоПросмотр        = (Выборка.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт И НЕ РедактированиеЗаказНарядов) ИЛИ НоваяСтрока.Плательщик = Заказчик;
		СписокЗначенийЗаказНарядов.Добавить(Выборка.ЗаказНаряд);
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьСписокЗаказНарядов()

// Процедура формирования формы, когда она вызвана при изменении автомобиля в сводном ремонтном заказе.
//
&НаСервере
Процедура НастроитьФормуПриИзмененииАвтомобиля()
	
	Элементы.ФормаПлательщик.Видимость = Ложь;
	Элементы.ФормаАвтомобиль.Видимость = Истина;
	Элементы.ФормаПрименитьИзменениеАвтомобиля.КнопкаПоУмолчанию = Истина;
	Элементы.НадписьОбИзмененииПлательщика.Заголовок = "Обнаружено изменение автомобиля сводного ремонтного заказа.
		|Выполнить пересчет цен/нормочасов для следующих заказ-нарядов:";
	ЭтотОбъект.Заголовок = "Пересчет цен в заказ-нарядах";
	Элементы.ПересчетДокументов.Видимость = Ложь;
	Элементы.СписокЗаказНарядовПлательщик.Видимость = Ложь;
	
	// если ЗН участвовал в планировании, перекрасим его в красный цвет
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланированиеРесурсов.Документ КАК ДокументСсылка
		|ИЗ
		|	РегистрСведений.ПланированиеРесурсов КАК ПланированиеРесурсов
		|ГДЕ
		|	ПланированиеРесурсов.Документ В(&СписокЗаказНарядов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПланированиеРесурсов.Документ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПланированиеРесурсов.Документ.Дата";
	Запрос.УстановитьПараметр("СписокЗаказНарядов", СписокЗначенийЗаказНарядов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Для Каждого Строка Из СписокЗаказНарядов Цикл
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(Новый Структура("ДокументСсылка", Строка.ЗаказНаряд)) Тогда
			Строка.УчаствовалВПланировании = Истина;
			Элементы.ГруппаПредупреждение.Видимость = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // НастроитьФормуПриИзмененииАвтомобиля()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да И ДополнительныеПараметры = "ВыходБезПересчета" Тогда
		Закрыть();
	ИначеЕсли РезультатОповещения = КодВозвратаДиалога.Да И ДополнительныеПараметры = "ПересчетЗапланированных" Тогда
		ВыбранныеЗаказНаряды = СписокЗаказНарядов.НайтиСтроки(Новый Структура("Использование", Истина));
		СписокВыбранныхЗаказНарядов = Новый СписокЗначений;
		Для Каждого ВыбранныйЗаказНаряд Из ВыбранныеЗаказНаряды Цикл
			СписокВыбранныхЗаказНарядов.Добавить(ВыбранныйЗаказНаряд.ЗаказНаряд);
		КонецЦикла;
		Закрыть(СписокВыбранныхЗаказНарядов);
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

#КонецОбласти

