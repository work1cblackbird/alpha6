#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ЗаявкаНаРемонт") Тогда
		
		Отказ = Истина;
		Возврат;
		
	ИначеЕсли ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.ВводНаОснованииПроведенныхДокументов) И
		НЕ Параметры.ЗаявкаНаРемонт.Проведен Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Ввод на основании непроведенного документа запрещен. Процедура заполнения прервана.'"),,,, Отказ);
		Возврат;
		
	КонецЕсли;
	
	ЗаявкаНаРемонт = Параметры.ЗаявкаНаРемонт;
	
	АдресЗначенияРеквизитовДокумента = ПолучитьЗначениеПараметраСтруктуры(Параметры, "АдресЗначенияРеквизитовДокумента", Неопределено);
	Если ЗначениеЗаполнено(АдресЗначенияРеквизитовДокумента) Тогда
		ЗначенияРеквизитовДокумента = ПолучитьИзВременногоХранилища(АдресЗначенияРеквизитовДокумента);
	КонецЕсли;
	
	Если НЕ ПересобратьДерево() Тогда
		СтандартныйВвод = Истина;
		Отказ = ЗапретитьВвод;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтандартныйВвод Тогда
		Отказ = Истина;
		Если ЗначениеЗаполнено(СводныйРемонтныйЗаказДляОткрытия) Тогда
			ОткрытьФорму("Документ.СводныйРемонтныйЗаказ.ФормаОбъекта", Новый Структура("Ключ", СводныйРемонтныйЗаказДляОткрытия));
			Возврат;
		Иначе
			ПараметрыФормы = Новый Структура("Основание", ЗаявкаНаРемонт);
			Если НЕ ЗначенияРеквизитовДокумента = Неопределено Тогда
				ПараметрыФормы.Вставить("Автомобиль", ЗначенияРеквизитовДокумента.Автомобиль);
				ПараметрыФормы.Вставить("Заказчик",   ЗначенияРеквизитовДокумента.Заказчик);
				ПараметрыФормы.Вставить("Контрагент", ЗначенияРеквизитовДокумента.Плательщик);
			КонецЕсли;
			ОткрытьФорму("Документ.СводныйРемонтныйЗаказ.ФормаОбъекта", ПараметрыФормы);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПричинОбращения

&НаКлиенте
Процедура ДеревоПричинОбращенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаИсточник = ДеревоПричинОбращения.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	Если СтрокаИсточник.ЭтоГруппа Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	Иначе
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Перемещение;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПричинОбращенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаИсточник = ДеревоПричинОбращения.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	СтрокаПриемник = ДеревоПричинОбращения.НайтиПоИдентификатору(Строка);
	
	Если СтрокаПриемник.ЭтоГруппа Тогда
		СтрокаЗаказНаряда = СтрокаПриемник;
	Иначе
		СтрокаЗаказНаряда = СтрокаПриемник.ПолучитьРодителя();
	КонецЕсли;
	
	ТаблицаПричинОбращения = СтрокаЗаказНаряда.ПолучитьЭлементы();
	НоваяСтрока = ТаблицаПричинОбращения.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
	
	// Удалим строку источник
	СтрокаЗаказНаряда = СтрокаИсточник.ПолучитьРодителя();
	
	ТаблицаПричинОбращения = СтрокаЗаказНаряда.ПолучитьЭлементы();
	ТаблицаПричинОбращения.Удалить(СтрокаИсточник);
	
КонецПроцедуры


&НаКлиенте
Процедура ДеревоПричинОбращенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Счетчик = ПолучитьНовыйНомерЗаказНаряда();
	
	ПричиныОбращенийЭлементы = ДеревоПричинОбращения.ПолучитьЭлементы();
	
	НовыйЗаказНаряд = ПричиныОбращенийЭлементы.Добавить();
	НовыйЗаказНаряд.Представление = "Заказ-наряд " + Строка(Счетчик);
	НовыйЗаказНаряд.ЭтоГруппа     = Истина;
	НовыйЗаказНаряд.Использование = 1;
	НовыйЗаказНаряд.Счетчик       = Счетчик;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПричинОбращенияИспользованиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПричинОбращения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Использование = ?(ТекущиеДанные.Использование = 2, 0, ТекущиеДанные.Использование);
	
	Если ТекущиеДанные.ЭтоГруппа И ТекущиеДанные.Использование Тогда
		
		ЗаполнитьВсе = Истина;
		Для Каждого ТекущаяСтрока Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			
			Если ТекущаяСтрока.Использование = 1 Тогда
				ЗаполнитьВсе = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗаполнитьВсе Тогда
			Для Каждого ТекущаяСтрока Из ТекущиеДанные.ПолучитьЭлементы() Цикл
				
				ТекущаяСтрока.Использование = 1;
				
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли НЕ ТекущиеДанные.ЭтоГруппа Тогда
		
		ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
		
		ВсеОтключены = Истина;
		ВсеВключены  = Истина;
		Для Каждого ТекущаяСтрока Из ТекущийРодитель.ПолучитьЭлементы() Цикл
			
			Если ТекущаяСтрока.Использование = 1 Тогда
				ВсеОтключены = Ложь;
			КонецЕсли;
			
			Если ТекущаяСтрока.Использование = 0 Тогда
				ВсеВключены = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВсеОтключены Тогда
			
			ТекущийРодитель.Использование = 0;
			
		ИначеЕсли ВсеВключены Тогда
			
			ТекущийРодитель.Использование = 1;
			
		Иначе
			
			ТекущийРодитель.Использование = 2;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	АдресХранилища = ПоместитьДеревоПричинОбращенияВХранилище(УникальныйИдентификатор);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Основание",                     ЗаявкаНаРемонт);
	ПараметрыФормы.Вставить("АдресХранилищаПричинОбращений", АдресХранилища);
	Если НЕ ЗначенияРеквизитовДокумента = Неопределено Тогда
		ПараметрыФормы.Вставить("Автомобиль", ЗначенияРеквизитовДокумента.Автомобиль);
		ПараметрыФормы.Вставить("Заказчик",   ЗначенияРеквизитовДокумента.Заказчик);
		ПараметрыФормы.Вставить("Контрагент", ЗначенияРеквизитовДокумента.Плательщик);
	КонецЕсли;
	ПараметрыФормы.Вставить("ПересчитатьЦены", ПересчитатьЦены);
	ОткрытьФорму("Документ.СводныйРемонтныйЗаказ.ФормаОбъекта", ПараметрыФормы,, УникальныйИдентификатор);
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоЗаявке(Команда)
	
	ПересобратьДерево();
	
	Для Каждого ТекущаяСтрока Из ДеревоПричинОбращения.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПричинОбращения.Развернуть(ТекущаяСтрока.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВОдинЗаказНаряд(Команда)
	
	ПересобратьДерево(1);
	
	Для Каждого ТекущаяСтрока Из ДеревоПричинОбращения.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПричинОбращения.Развернуть(ТекущаяСтрока.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВРазныеЗаказНаряды(Команда)
	
	ПересобратьДерево(2);
	
	Для Каждого ТекущаяСтрока Из ДеревоПричинОбращения.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПричинОбращения.Развернуть(ТекущаяСтрока.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоТипуПричины(Команда)
	
	ПересобратьДерево(3);
	
	Для Каждого ТекущаяСтрока Из ДеревоПричинОбращения.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПричинОбращения.Развернуть(ТекущаяСтрока.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоВидуРемонтаПричины(Команда)
	
	ПересобратьДерево(4);
	
	Для Каждого ТекущаяСтрока Из ДеревоПричинОбращения.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПричинОбращения.Развернуть(ТекущаяСтрока.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция помещает дерево причин обращений во временное хранилище и возвращает адрес.
//
&НаСервере
Функция ПоместитьДеревоПричинОбращенияВХранилище(ИдентификаторРаботы)
	
	ПричиныОбращенийЗначение = РеквизитФормыВЗначение("ДеревоПричинОбращения", Тип("ДеревоЗначений"));
	ПричиныОбращенийЗначение.Строки.Очистить();
	
	Для Каждого ТекущийЗаказНаряд Из ДеревоПричинОбращения.ПолучитьЭлементы() Цикл
		
		Если ТекущийЗаказНаряд.Использование = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЗаказНаряд = ПричиныОбращенийЗначение.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйЗаказНаряд, ТекущийЗаказНаряд);
		
		Для Каждого ТекущееОбращение Из ТекущийЗаказНаряд.ПолучитьЭлементы() Цикл
			
			Если ТекущееОбращение.Использование = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НовоеОбращение = НовыйЗаказНаряд.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеОбращение, ТекущееОбращение);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ПричиныОбращенийЗначение, ИдентификаторРаботы);
	
КонецФункции // ПоместитьДеревоПричинОбращенияВХранилище()

&НаСервере
Функция ПересобратьДерево(ВидДерева = 0)
	
	ЗапретитьВвод = Ложь;
	
	Результат = Истина;
	
	Если ВидДерева = 1 Тогда
		
		ПричиныОбращенийЗначение = РеквизитФормыВЗначение("ДеревоПричинОбращения", Тип("ДеревоЗначений"));
		ПричиныОбращенийЗначение.Строки.Очистить();
		
		НовыйЗаказНаряд = ПричиныОбращенийЗначение.Строки.Добавить();
		НовыйЗаказНаряд.Представление = "Заказ-наряд 1";
		НовыйЗаказНаряд.ЭтоГруппа     = Истина;
		НовыйЗаказНаряд.Использование = 1;
		НовыйЗаказНаряд.Счетчик       = 1;
		
		Для Каждого ТекущийЗаказНаряд Из ДеревоПричинОбращения.ПолучитьЭлементы() Цикл
			
			Для Каждого ТекущееОбращение Из ТекущийЗаказНаряд.ПолучитьЭлементы() Цикл
				
				НовоеОбращение = НовыйЗаказНаряд.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НовоеОбращение, ТекущееОбращение);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ПричиныОбращенийЗначение, "ДеревоПричинОбращения");
		
	ИначеЕсли ВидДерева = 2 Тогда
		
		ПричиныОбращенийЗначение = РеквизитФормыВЗначение("ДеревоПричинОбращения", Тип("ДеревоЗначений"));
		ПричиныОбращенийЗначение.Строки.Очистить();
		
		Счетчик = 1;
		Для Каждого ТекущийЗаказНаряд Из ДеревоПричинОбращения.ПолучитьЭлементы() Цикл
			
			Для Каждого ТекущееОбращение Из ТекущийЗаказНаряд.ПолучитьЭлементы() Цикл
				
				НовыйЗаказНаряд = ПричиныОбращенийЗначение.Строки.Добавить();
				НовыйЗаказНаряд.Представление = "Заказ-наряд " + Строка(Счетчик);
				НовыйЗаказНаряд.ЭтоГруппа     = Истина;
				НовыйЗаказНаряд.Использование = 1;
				НовыйЗаказНаряд.Счетчик       = Счетчик + 1;
				
				НовоеОбращение = НовыйЗаказНаряд.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НовоеОбращение, ТекущееОбращение);
				
				Счетчик = Счетчик + 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ПричиныОбращенийЗначение, "ДеревоПричинОбращения");
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказНарядПричиныОбращения.ИдентификаторПричиныОбращения
		|ПОМЕСТИТЬ ТаблицаСуществующихПричин
		|ИЗ
		|	Документ.ЗаказНаряд КАК ТаблицаЗаказНаряд
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СводныйРемонтныйЗаказ КАК ТаблицаСводныйРемонтныйЗаказ
		|		ПО (ТаблицаСводныйРемонтныйЗаказ.ДокументОснование = &ДокументЗаявкаНаРемонт)
		|			И ТаблицаЗаказНаряд.СводныйРемонтныйЗаказ = ТаблицаСводныйРемонтныйЗаказ.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд.ПричиныОбращения КАК ЗаказНарядПричиныОбращения
		|		ПО ТаблицаЗаказНаряд.Ссылка = ЗаказНарядПричиныОбращения.Ссылка
		|ГДЕ
		|	ТаблицаСводныйРемонтныйЗаказ.ДокументОснование = &ДокументЗаявкаНаРемонт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПричиныОбращения.ИдентификаторПричиныОбращения,
		|	ТаблицаПричиныОбращения.ПричинаОбращения,
		|	ТаблицаПричиныОбращения.ПричинаОбращенияСодержание,
		|	ТаблицаПричиныОбращения.ТипПричиныОбращения,
		|	ТаблицаПричиныОбращения.ВидРемонтаПричиныОбращения
		|ИЗ
		|	Документ.ЗаявкаНаРемонт.ПричиныОбращения КАК ТаблицаПричиныОбращения
		|ГДЕ
		|	ТаблицаПричиныОбращения.Ссылка = &ДокументЗаявкаНаРемонт
		|	И НЕ ТаблицаПричиныОбращения.ИдентификаторПричиныОбращения В
		|				(ВЫБРАТЬ
		|					ТаблицаСуществующихПричин.ИдентификаторПричиныОбращения
		|				ИЗ
		|					ТаблицаСуществующихПричин)";
		Запрос.УстановитьПараметр("ДокументЗаявкаНаРемонт", ЗаявкаНаРемонт);
		
		РезультатПакета = Запрос.ВыполнитьПакет();
		
		ТаблицаПричиныОбращения = РезультатПакета[1].Выгрузить();
		
		Если ТаблицаПричиныОбращения.Количество() = 0 Тогда
			ЗапретитьВвод = Ложь;
			НайтиСводныйРемонтныйЗаказДляОткрытия();
			Возврат Ложь;
		КонецЕсли;
		
		КолонкиГруппировки = "";
		
		Если ВидДерева = 3 Тогда
			КолонкиГруппировки = "ТипПричиныОбращения";
		ИначеЕсли ВидДерева = 4 Тогда
			КолонкиГруппировки = "ВидРемонтаПричиныОбращения";
		Иначе
			КолонкиГруппировки = "ТипПричиныОбращения,ВидРемонтаПричиныОбращения";
		КонецЕсли;
		
		ТаблицаЗаказНарядов = ТаблицаПричиныОбращения.Скопировать(, КолонкиГруппировки);
		ТаблицаЗаказНарядов.Свернуть(КолонкиГруппировки);
		
		// Если всего один заказ-наряд, то нет смысла перераспределять причины
		Если ТаблицаЗаказНарядов.Количество() < 2 И НЕ (ВидДерева = 3 ИЛИ ВидДерева = 4) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ТаблицаТипыПричин = ДеревоПричинОбращения.ПолучитьЭлементы();
		ТаблицаТипыПричин.Очистить();
		
		Счетчик = 1;
		Для Каждого СтрокаЗаказНаряда Из ТаблицаЗаказНарядов Цикл
			
			НовыйЗаказНаряд = ТаблицаТипыПричин.Добавить();
			НовыйЗаказНаряд.Представление = "Заказ-наряд " + Строка(Счетчик);
			НовыйЗаказНаряд.ЭтоГруппа     = Истина;
			НовыйЗаказНаряд.Использование = 1;
			НовыйЗаказНаряд.Счетчик       = Счетчик;
			
			ТаблицаПричинОбращения = НовыйЗаказНаряд.ПолучитьЭлементы();
			
			ОтборСтрок = Новый Структура(КолонкиГруппировки);
			
			Если ОтборСтрок.Свойство("ТипПричиныОбращения") Тогда
				ОтборСтрок.ТипПричиныОбращения = СтрокаЗаказНаряда.ТипПричиныОбращения;
			КонецЕсли;
			
			Если ОтборСтрок.Свойство("ВидРемонтаПричиныОбращения") Тогда
				ОтборСтрок.ВидРемонтаПричиныОбращения = СтрокаЗаказНаряда.ВидРемонтаПричиныОбращения;
			КонецЕсли;
			
			МассивПричинОбращения = ТаблицаПричиныОбращения.НайтиСтроки(ОтборСтрок);
			Для Каждого СтрокаПричиныОбращения Из МассивПричинОбращения Цикл
				
				НоваяПричинаОбращения = ТаблицаПричинОбращения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяПричинаОбращения, СтрокаПричиныОбращения);
				
				НоваяПричинаОбращения.Использование = 1;
				
				ПредставлениеОбращения = ?(Строка(СтрокаПричиныОбращения.ПричинаОбращенияСодержание) = "", Строка(СтрокаПричиныОбращения.ПричинаОбращения), Строка(СтрокаПричиныОбращения.ПричинаОбращенияСодержание));
				
				НоваяПричинаОбращения.Представление = ПредставлениеОбращения;
				
			КонецЦикла;
			
			Счетчик = Счетчик + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура НайтиСводныйРемонтныйЗаказДляОткрытия()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказНарядПричиныОбращения.ИдентификаторПричиныОбращения КАК ИдентификаторПричиныОбращения,
	|	ЗаказНарядПричиныОбращения.Ссылка.СводныйРемонтныйЗаказ КАК СводныйРемонтныйЗаказ
	|ПОМЕСТИТЬ ТаблицаСуществующихПричин
	|ИЗ
	|	Документ.ЗаказНаряд КАК ТаблицаЗаказНаряд
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СводныйРемонтныйЗаказ КАК ТаблицаСводныйРемонтныйЗаказ
	|		ПО (ТаблицаСводныйРемонтныйЗаказ.ДокументОснование = &ДокументЗаявкаНаРемонт)
	|			И ТаблицаЗаказНаряд.СводныйРемонтныйЗаказ = ТаблицаСводныйРемонтныйЗаказ.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд.ПричиныОбращения КАК ЗаказНарядПричиныОбращения
	|		ПО ТаблицаЗаказНаряд.Ссылка = ЗаказНарядПричиныОбращения.Ссылка
	|ГДЕ
	|	ТаблицаСводныйРемонтныйЗаказ.ДокументОснование = &ДокументЗаявкаНаРемонт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаСуществующихПричин.СводныйРемонтныйЗаказ КАК СводныйРемонтныйЗаказ
	|ИЗ
	|	Документ.ЗаявкаНаРемонт.ПричиныОбращения КАК ТаблицаПричиныОбращения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуществующихПричин КАК ТаблицаСуществующихПричин
	|		ПО ТаблицаПричиныОбращения.ИдентификаторПричиныОбращения = ТаблицаСуществующихПричин.ИдентификаторПричиныОбращения
	|ГДЕ
	|	ТаблицаПричиныОбращения.Ссылка = &ДокументЗаявкаНаРемонт
	|	И ТаблицаПричиныОбращения.ИдентификаторПричиныОбращения В
	|			(ВЫБРАТЬ
	|				ТаблицаСуществующихПричин.ИдентификаторПричиныОбращения
	|			ИЗ
	|				ТаблицаСуществующихПричин)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСуществующихПричин.СводныйРемонтныйЗаказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаСуществующихПричин.СводныйРемонтныйЗаказ.Дата УБЫВ";
	Запрос.УстановитьПараметр("ДокументЗаявкаНаРемонт", ЗаявкаНаРемонт);
	
	СводныйРемонтныйЗаказДляОткрытия = Запрос.Выполнить().Выгрузить()[0].СводныйРемонтныйЗаказ;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНовыйНомерЗаказНаряда()
	
	Счетчик = 0;
	Для Каждого ТекущийЗаказНаряд Из ДеревоПричинОбращения.ПолучитьЭлементы() Цикл
		
		Счетчик = Макс(ТекущийЗаказНаряд.Счетчик, Счетчик);
		
	КонецЦикла;
	
	Возврат Счетчик+1;
	
КонецФункции

#КонецОбласти

