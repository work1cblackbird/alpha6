#Область ОписаниеПеременных

&НаКлиенте
Перем АдресИзДанныхВыбора Экспорт;

&НаКлиенте
Перем ТелефонИзДанныхВыбора Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПодключаемоеОборудование
	ТипыОборудования = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
	ТипыОборудования.СканерШтрихкода = Истина;
	ТипыОборудования.СчитывательМагнитныхКарт = Истина;
	МенеджерОборудования.ПриСозданииНаСервере(ЭтаФорма, ТипыОборудования);
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ИнициализироватьПоляКонтактнойИнформации();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	РаботаСФормой.УстановитьСвойствоЭлементовФормы(
		ЭтаФорма,
		"ДеревоСводногоРемонтногоЗаказа",
		"РазрешитьПеретаскивание",
		"Редактирование",
		Метаданные.Документы.ЗаказНаряд);
	
	// Штрихкодирование
	ШтрихкодированиеВызовСервера.ПрочитатьШтрихкодДокумента(ЭтотОбъект, Объект);
	// Конец Штрихкодирование
	
	ДобавитьПодменюАнкетирования();
	ДобавитьКомандыПечатиЗаказНаряда();
	ЗаполнитьКоманднуюПанельАтрибутыСобытия();
	БлокироватьЭлементыФормы();	
	НастройкаПараметровВыбораСервиснойКампании();
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(ЭтотОбъект, Объект);   
	
	// Обновим КИ
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		Объект.Заказчик,
		ЭтотОбъект,
		"Телефон,АдресЭлектроннойПочты",
		"ПредставлениеТелефона,АдресЭлектроннойПочты"
	);
	
	Элементы.НеОбновлятьКИ.Пометка = Истина;
	Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Заголовок = НСтр("ru = 'Не обновлять'");
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец АльфаАвто.СобытияОбъектов
	
	УстановитьОтображениеЭлементовПоПравамДоступа();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПроверитьНеобходимостьОбновленияКИ();
		Возврат;
	КонецЕсли;
	
	УстановитьСвойстваПоляВводаТелефона();
	
	Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Доступность = Ложь;
	
	ЗаполнитьРеквизитыИзПараметров(Параметры);
	Элементы.СтраницыСводногоРемонтногоЗаказа.ТекущаяСтраница = Элементы.ОписаниеСводногоРемонтногоЗаказа;
	ОбновитьПодсказкуАвтомобиля(ЭтотОбъект);
	ЗаполнитьДокументыПоПараметрам(Параметры);
	ОбновитьИнформациюОбАвтомобиле();
	ОбновитьДанныеПодчиненныхТаблиц();
	ОбновитьТаблицуСводногоРемонтногоЗаказа();
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	Если НЕ Параметры.Свойство("Автомобиль") 
		ИЛИ НЕ ЗначениеЗаполнено(Параметры.Автомобиль) Тогда
		ЕстьНевыполненныеСервисныеКампании = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	ПодключитьОбработчикОжидания("ПоказатьПредупреждениеПоСервиснойКампании", 0.5, Истина);
	
	СформироватьИнформациюПоСнятиюПовторногоОбращения();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ПриОткрытии_ФормаДокумента(ЭтотОбъект, Отказ);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия = Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ОбработкаОповещения_ФормаДокумента(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.СобытияОбъектов
	
	// СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	ЗащитаПерсональныхДанныхКлиент.ОбработкаОповещенияФормы(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	
	ОписаниеСобытия = Новый Структура("ИмяСобытия,Параметр,Источник", ИмяСобытия, Параметр, Источник);
	ОбработатьСобытиеИзмененЗаказНаряд(ОписаниеСобытия);
	ОбработатьСобытиеИзмененСводныйРемонтныйЗаказ(ОписаниеСобытия);
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// Штрихкодирование
	ШтрихкодированиеКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец Штрихкодирование
	
КонецПроцедуры 

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Обновим КИ
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		Объект.Заказчик,
		ЭтотОбъект,
		"Телефон,АдресЭлектроннойПочты",
		"ПредставлениеТелефона,АдресЭлектроннойПочты"
	);
	
	ОбновитьПодсказкуАвтомобиля(ЭтотОбъект);
	ОбновитьТаблицуПодчиненныхЗаказНарядовНаСервере();
	ОбновитьДанныеПодчиненныхТаблиц();
	ОбновитьТаблицуСводногоРемонтногоЗаказа();
	ОбновитьИнформациюОбАвтомобиле();
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриЧтенииНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	Если НЕ ЗначениеЗаполнено(Объект.Автомобиль) ИЛИ НЕ ЗначениеЗаполнено(Объект.Заказчик) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Перед записью необходимо указать заказчика и автомобиль.' ");
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;	
	КонецЕсли;
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("СводныйРемонтныйЗаказ", ПараметрыЗаписи.РежимЗаписи, Ложь);
		
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Объект.Ссылка.Пустая());
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОбновлятьКИ", Элементы.ОбновлятьКИ.Пометка);
	УстановленоПовторноеОбращениеВСервис = Автосервис.УстановленПризнакПовторногоОбращенияВСервис(ТекущийОбъект);
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПередЗаписьюНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Отказ
		ИЛИ БылиМодифицированыЗаблокированныеЗаказНаряды()
		ИЛИ ОбновитьПробег(ТекущийОбъект.ДатаСводногоРемонтногоЗаказа)
		ИЛИ ЗаписатьПодчиненныеЗаказНаряды(ТекущийОбъект.Ссылка, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Штрихкодирование
	ШтрихкодированиеВызовСервера.ЗаписатьШтрихкодДокумента(ЭтотОбъект, Объект);
	// Конец Штрихкодирование
	
	// Обновим КИ
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		Объект.Заказчик,
		ЭтотОбъект,
		"Телефон,АдресЭлектроннойПочты",
		"ПредставлениеТелефона,АдресЭлектроннойПочты"
	);
	
	ОбновитьДанныеПодчиненныхТаблиц();
	ОбновитьТаблицуСводногоРемонтногоЗаказа();
	ЗаполнитьРекомендацииЗаказНарядов(ПараметрыЗаписи);
	
	Если УстановленоПовторноеОбращениеВСервис Тогда
		Автосервис.ОтправитьУведомление(
			ТекущийОбъект,
			Перечисления.ВидыУведомлений.ПовторноеОбращениеВСервис);
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПослеЗаписиНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);
	РаботаСФормойКлиент.ОбновитьПодчиненныеСчета(Объект.Ссылка, Неопределено);
	
	Для Каждого СтрокаЗН Из ДеревоСводногоРемонтногоЗаказа.ПолучитьЭлементы() Цикл
		Элементы.ДеревоСводногоРемонтногоЗаказа.Развернуть(СтрокаЗН.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	НетЗаказНарядов = НЕ Объект.Ссылка.Пустая()
		И ПодчиненныеЗаказНаряды.Количество() <> 0
		И НЕ ЕстьНовыеЗаказНаряды(ЭтотОбъект)
		И НЕ ЕстьОткрытыеЗаказНаряды(Объект.Ссылка);
	Если  НетЗаказНарядов Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Нет открытых заказ-нарядов.'"));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// АПК:567-выкл
&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.СводныйРемонтныйЗаказ.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 
// АПК:567-вкл

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.СводныйРемонтныйЗаказ.ДатаПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ЗаказчикПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.СводныйРемонтныйЗаказ.ЗаказчикПриИзменении(Объект, ПараметрыДействия);
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Объект.Заказчик, ПараметрыДействия);
	
	Если ЕстьРеквизит(ЭтотОбъект, "РеспондентОпроса") Тогда
		ЭтотОбъект.РеспондентОпроса = Объект.Заказчик;
	КонецЕсли;
	
	// Обновим КИ
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		Объект.Заказчик,
		ЭтотОбъект,
		"Телефон,АдресЭлектроннойПочты",
		"ПредставлениеТелефона,АдресЭлектроннойПочты"
	);

	ПроверитьНеобходимостьОбновленияКИ();
	КомментарийТелефона = ЗначениеКомментарияКонтактнойИнформацииСервер(Объект.ПредставлениеТелефонаСтрокой);
	
	АвтомобилиКонтрагента = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "АвтомобилиКонтрагента", Новый Массив);
	Элементы.Автомобиль.СписокВыбора.ЗагрузитьЗначения(АвтомобилиКонтрагента);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("НеобходимоПерезаполнитьАвтомобиль", Ложь);
	ЗаказчикПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
	ОбработатьИзменениеЗаказчика();
	ПерезаполнитьПлательщикаЗаказНарядов();
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаказчикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЕстьЗакрытыеЗаказНаряды(ЭтотОбъект) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество() Тогда
		СтандартнаяОбработка = Ложь;
		Объект.Заказчик = ВыбранноеЗначение[0].КонтактноеЛицо;
		АдресИзДанныхВыбора = "";
		ТелефонИзДанныхВыбора = "";
		Для Каждого Строка Из ВыбранноеЗначение Цикл
			Если Строка.ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") 
				И Не ЗначениеЗаполнено(АдресИзДанныхВыбора) Тогда
				АдресИзДанныхВыбора = Строка.ЗначениеКИ;
			ИначеЕсли Строка.ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") 
				И Не ЗначениеЗаполнено(ТелефонИзДанныхВыбора)Тогда
				ТелефонИзДанныхВыбора = Строка.ЗначениеКИ;
			КонецЕсли;
		КонецЦикла;
		ОбработатьИзменениеЗаказчика();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПолученияДанных.Вставить("ПоискКонтрагентовСКИ");
	
	ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.Контрагенты"), ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПолученияДанных.Вставить("ПоискКонтрагентовСКИ");
	
	ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.Контрагенты"), ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("НеобходимоПерезаполнитьЗаказчика", Ложь);
	АвтомобильПриИзмененииНаСервере(ПараметрыДействия);
	
	ПоказатьПредупреждениеПоСервиснойКампании();
	
	ПараметрыДействия.Вставить("Элемент", Элементы.Пробег.РасширеннаяПодсказка);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
	НачатьЗаполнениеПлательщикаВПодчиненныхЗаказНарядах();
	
КонецПроцедуры 

&НаКлиенте
Процедура АвтомобильОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЕстьЗакрытыеЗаказНаряды(ЭтотОбъект) Тогда
		СтандартнаяОбработка = Ложь;
    	Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АвтомобильПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.СводныйРемонтныйЗаказ.АвтомобильПриИзменении(Объект, ПараметрыДействия);
	
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Объект.Автомобиль, ПараметрыДействия);
	ОбновитьПодсказкуАвтомобиля(ЭтотОбъект);
	УправлениеДиалогомНаСервере();
	НастроитьПараметрыВыбораЭлементовФормы();
	ОбновитьИнформациюОбАвтомобиле();
	
КонецПроцедуры 

&НаКлиенте
Процедура АвтомобильРасширеннаяПодсказкаНажатие(Элемент)
	
	АвтомобилиКлиент.ОтчетИсторияАвтомобиля(ЭтотОбъект, Объект.Автомобиль);
	
КонецПроцедуры 

&НаКлиенте
Процедура СервиснаяКампанияРасширеннаяПодсказкаНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		ПараметрыОткрытия = Новый Структура("Автомобиль,ТолькоАктуальные", Объект.Автомобиль, Истина);
		
		ОткрытьФорму("РегистрСведений.ВыполнениеСервисныхКампаний.Форма.СервисныеКампанииАвтомобиля",
					 ПараметрыОткрытия,
					 ЭтотОбъект,,,,,
					 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВременныеРамкиПриИзменении(Элемент = Неопределено)
	
	ОбновитьПодсказкуАвтомобиля(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПовторноеОбращениеПриИзмененииНаСервере()
	
	Если НЕ Объект.ПовторноеОбращение Тогда
		Объект.АвторСнятияПовторногоОбращения = Пользователи.ТекущийПользователь();
		Объект.ДатаСнятияПовторногоОбращения = ТекущаяДатаСеанса();
	Иначе
		Объект.АвторСнятияПовторногоОбращения = Неопределено;
		Объект.ДатаСнятияПовторногоОбращения = Неопределено;
		Объект.ПричинаСнятияПовторногоОбращения = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторноеОбращениеПриИзменении(Элемент)
	
	ПовторноеОбращениеПриИзмененииНаСервере();
	
	Если НЕ Объект.ПовторноеОбращение Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"Подключаемый_ОкончаниеВводаТекстаСнятияПовторногоОбращения",
			ЭтотОбъект);
		
		ПоказатьВводСтроки(
			ОбработчикОповещения,
			Объект.ПричинаСнятияПовторногоОбращения,
			НСтр("ru = 'Комментарий к снятию признака повторного обращения'"),
			500,
			Истина);
		
		СнятоПовторноеОбращениеВСервис = Истина;
	Иначе
		СнятоПовторноеОбращениеВСервис = Ложь;
	КонецЕсли;
	
	СформироватьИнформациюПоСнятиюПовторногоОбращения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВДеревеСводногоРемонтногоЗаказаПоТипуСтрокПриИзменении(Элемент)
	
	ОтборВДеревеСводногоРемонтногоЗаказаПоТипуСтрокПриИзмененииНаСервере();
	
	Для Каждого ЭлементДерева Из ДеревоСводногоРемонтногоЗаказа.ПолучитьЭлементы() Цикл
		Элементы.ДеревоСводногоРемонтногоЗаказа.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтборВДеревеСводногоРемонтногоЗаказаПоТипуСтрокПриИзмененииНаСервере()
	
	ОбновитьТаблицуСводногоРемонтногоЗаказа();
	
КонецПроцедуры

#Область ПроцедурыИФункцииОбщегоНазначения

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоСводногоРемонтногоЗаказа

&НаКлиенте
Процедура ДеревоСводногоРемонтногоЗаказаПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоСводногоРемонтногоЗаказа.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяТаблица Из ДеревоСводногоРемонтногоЗаказа.ПолучитьЭлементы() Цикл
		Для Каждого ТекущаяСтрока Из ТекущаяТаблица.ПолучитьЭлементы() Цикл
			ТекущаяСтрока.Подсветка = (ТекущаяСтрока.Номенклатура = ТекущиеДанные.Номенклатура);
		КонецЦикла;
	КонецЦикла;
	
	Элементы.СтраницыДопИнформацияДеревоСводныйРемонтныйЗаказ.ТекущаяСтраница = ?(ТекущиеДанные.ИмяТаблицы = "Товары", Элементы.ДопИнформацияОстатки, Элементы.НетДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСводногоРемонтногоЗаказаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьЗаказНарядВопрос();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСводногоРемонтногоЗаказаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Строка = Неопределено Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	Приемник = ДеревоСводногоРемонтногоЗаказа.НайтиПоИдентификатору(Строка);
	
	Если НЕ Приемник.ЭтоГруппа Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	Для Каждого Значение Из ПараметрыПеретаскивания.Значение Цикл
		Источник = ДеревоСводногоРемонтногоЗаказа.НайтиПоИдентификатору(Значение);
		Если (Источник.ЭтоГруппа И Источник.ПолучитьРодителя() = Неопределено) ИЛИ Источник.ИдентификаторСтроки = -1 Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		ИначеЕсли Источник.ЭтоГруппа И Приемник.ПолучитьРодителя() <> Неопределено Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		ИначеЕсли НЕ Источник.ЭтоГруппа И Приемник.ПолучитьРодителя() = Неопределено
			И (Источник.ИмяТаблицы <> "ВспомогательнаяАРЗН" ИЛИ Источник.ИмяТаблицы <> "Материалы") Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		ИначеЕсли Источник.ПризнакБлокировки ИЛИ Приемник.ПризнакБлокировки Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		ИначеЕсли Источник.Представление = "Причина обращения не указана." И НЕ ЗначениеЗаполнено(Источник.ПричинаОбращения) Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		ИначеЕсли Источник.ИмяТаблицы = "ВспомогательныеАвтор" И Приемник.ПолучитьРодителя() <> Неопределено Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		ИначеЕсли Источник.ИмяТаблицы = "МатериалыЗаказчика" И Приемник.ПолучитьРодителя() <> Неопределено Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		ИначеЕсли Источник.ИмяТаблицы = "ВспомогательнаяАРЗН" И Приемник.ИмяТаблицы <> "ВспомогательныеАвтор" И Приемник.ПолучитьРодителя() <> Неопределено Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		ИначеЕсли Источник.ИмяТаблицы = "Материалы" И Приемник.ИмяТаблицы <> "МатериалыЗаказчика" И Приемник.ПолучитьРодителя() <> Неопределено Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
		
		Если Приемник.Идентификатор = Источник.Идентификатор
			И (Приемник.Представление = НСтр("ru = 'Вспомогательные автоработы'")
			ИЛИ Приемник.Представление = НСтр("ru = 'Материалы заказчика'")) Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		ИначеЕсли (Приемник.Представление = НСтр("ru = 'Вспомогательные автоработы'")
			И НЕ Источник.ИмяТаблицы = "ВспомогательнаяАРЗН")
			ИЛИ (Приемник.Представление = НСтр("ru = 'Материалы заказчика'") И НЕ Источник.ИмяТаблицы = "Материалы") Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИспользоватьУчетРабочегоВремени И НЕ РазрешитьУдалениеПакетовВРаботе
		 И НЕ ПроверитьПеретаскиваниеАвторабот(ПараметрыПеретаскивания.Значение) Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСводногоРемонтногоЗаказаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Приемник = ДеревоСводногоРемонтногоЗаказа.НайтиПоИдентификатору(Строка);
	
	Источники = Новый Массив;
	Для Каждого Источник Из ПараметрыПеретаскивания.Значение Цикл
		Источники.Добавить(ДеревоСводногоРемонтногоЗаказа.НайтиПоИдентификатору(Источник));
	КонецЦикла;
	
	// Проверим право редактирования закрытых ЗН
	Если Не ПраваИНастройкиПользователяКлиент.Значение("РедактированиеЗакрытыхЗаказНарядов") Тогда
		Приемники = Новый Массив;
		Приемники.Добавить(Приемник);  
		Результат = ПроверитьВозможностьПеретаскиванияЗакрытыхЗН(Приемники, Источники);
		Если Не ТипЗнч(Результат) = Тип("Булево") Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Заказ наряд закрыт для редактирования. Строка:'") + Символы.НПП + Результат);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	
	ПараметрыФормы = Новый Структура;
	ПолучитьДанныеПереносаСтрокЗН(Источники, Приемник, ПараметрыФормы);
	ПараметрыФормы.Вставить("ДобавлятьНовыйЗаказНаряд", Истина);
	
	ОткрытьФормуПереносаМеждуЗаказНарядами(ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Функция ПолучитьТоварыИМатериалыПоЗаказНаряду(ЗаказНаряд, ВыделенныеСтроки)
	
	Результат = Новый Структура;
	Товары = Новый Массив;
	Материалы = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ТекущиеДанные = ДеревоСводногоРемонтногоЗаказа.НайтиПоИдентификатору(ВыделеннаяСтрока);
		ТекущийЗаказНаряд = ЭтотОбъект[ТекущиеДанные.Идентификатор].Ссылка;
		
		Если ТекущийЗаказНаряд = ЗаказНаряд Тогда
			Если ТекущиеДанные.ИмяТаблицы = "Товары" Тогда
				Значение = ЭтотОбъект[ТекущиеДанные.Идентификатор].Товары.НайтиПоИдентификатору(ТекущиеДанные.ИдентификаторСтроки).НомерСтроки;
				Если Товары.Найти(Значение) = Неопределено Тогда
					Товары.Добавить(Значение);
				КонецЕсли;
			ИначеЕсли ТекущиеДанные.ИмяТаблицы = "Автоработы" Тогда
				
			ИначеЕсли ТекущиеДанные.ИмяТаблицы = "ПричиныОбращений" Тогда
				ЭлементыПричины = ТекущиеДанные.ПолучитьЭлементы();
				Для Каждого Элемент Из ЭлементыПричины Цикл
					Если Элемент.ИмяТаблицы = "Товары" Тогда
						
						Значение = ЭтотОбъект[Элемент.Идентификатор].Товары.НайтиПоИдентификатору(Элемент.ИдентификаторСтроки).НомерСтроки;
						Если Товары.Найти(Значение) = Неопределено Тогда
							Товары.Добавить(Значение);
						КонецЕсли;
						
					ИначеЕсли Элемент.ИмяТаблицы = "Автоработы" Тогда
						
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ПустаяСтрока(ТекущиеДанные.ИмяТаблицы) Тогда
				ЭлементыЗаказНаряда = ТекущиеДанные.ПолучитьЭлементы();
				Для Каждого ЭлементЗН Из ЭлементыЗаказНаряда Цикл
					ЭлементыПричины = ЭлементЗН.ПолучитьЭлементы();
					Для Каждого Элемент Из ЭлементыПричины Цикл
						Если Элемент.ИмяТаблицы = "Товары" Тогда
							Значение = ЭтотОбъект[Элемент.Идентификатор].Товары.НайтиПоИдентификатору(Элемент.ИдентификаторСтроки).НомерСтроки;
							Если Товары.Найти(Значение) = Неопределено Тогда
								Товары.Добавить(Значение);
							КонецЕсли;
						ИначеЕсли Элемент.ИмяТаблицы = "Автоработы" Тогда
							
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Вставить("Товары", Товары);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьТоварыПоЗаказНарядуДляЗаказа(ЗаказНаряд, ВыделенныеСтроки)
	
	Результат = Новый Соответствие;
	Товары = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ТекущиеДанные = ДеревоСводногоРемонтногоЗаказа.НайтиПоИдентификатору(ВыделеннаяСтрока);
		ТекущийЗаказНаряд = ЭтотОбъект[ТекущиеДанные.Идентификатор].Ссылка;
		
		Если ТекущийЗаказНаряд = ЗаказНаряд Тогда
			Если ТекущиеДанные.ИмяТаблицы = "Товары" Тогда
				
				Значение = ЭтотОбъект[ТекущиеДанные.Идентификатор].Товары.НайтиПоИдентификатору(ТекущиеДанные.ИдентификаторСтроки).НомерСтроки;
				Если Товары.Найти(Значение) = Неопределено Тогда
					Товары.Добавить(Значение);
					
					ТоварыСклада = Результат.Получить(ТекущиеДанные.СкладКомпании);
					Если ТоварыСклада = Неопределено Тогда
						Результат.Вставить(ТекущиеДанные.СкладКомпании, Новый Массив);
						ТоварыСклада = Результат.Получить(ТекущиеДанные.СкладКомпании);
					КонецЕсли;
					
					ТоварыСклада.Добавить(Значение);
				КонецЕсли;
				
			ИначеЕсли ТекущиеДанные.ИмяТаблицы = "Автоработы" Тогда
				
			ИначеЕсли ТекущиеДанные.ИмяТаблицы = "ПричиныОбращений" Тогда
				ЭлементыПричины = ТекущиеДанные.ПолучитьЭлементы();
				Для Каждого Элемент Из ЭлементыПричины Цикл
					Если Элемент.ИмяТаблицы = "Товары" Тогда
						
						Значение = ЭтотОбъект[Элемент.Идентификатор].Товары.НайтиПоИдентификатору(Элемент.ИдентификаторСтроки).НомерСтроки;
						Если Товары.Найти(Значение) = Неопределено Тогда
							Товары.Добавить(Значение);
							
							ТоварыСклада = Результат.Получить(Элемент.СкладКомпании);
							Если ТоварыСклада = Неопределено Тогда
								Результат.Вставить(Элемент.СкладКомпании, Новый Массив);
								ТоварыСклада = Результат.Получить(Элемент.СкладКомпании);
							КонецЕсли;
							
							ТоварыСклада.Добавить(Значение);
							
						КонецЕсли;
						
					ИначеЕсли Элемент.ИмяТаблицы = "Автоработы" Тогда
						
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ПустаяСтрока(ТекущиеДанные.ИмяТаблицы) Тогда
				ЭлементыЗаказНаряда = ТекущиеДанные.ПолучитьЭлементы();
				Для Каждого ЭлементЗН Из ЭлементыЗаказНаряда Цикл
					ЭлементыПричины = ЭлементЗН.ПолучитьЭлементы();
					Для Каждого Элемент Из ЭлементыПричины Цикл
						Если Элемент.ИмяТаблицы = "Товары" Тогда
							Значение = ЭтотОбъект[Элемент.Идентификатор].Товары.НайтиПоИдентификатору(Элемент.ИдентификаторСтроки).НомерСтроки;
							Если Товары.Найти(Значение) = Неопределено Тогда
								Товары.Добавить(Значение);
								
								ТоварыСклада = Результат.Получить(Элемент.СкладКомпании);
								Если ТоварыСклада = Неопределено Тогда
									Результат.Вставить(Элемент.СкладКомпании, Новый Массив);
									ТоварыСклада = Результат.Получить(Элемент.СкладКомпании);
								КонецЕсли;
								
								ТоварыСклада.Добавить(Значение);
								
							КонецЕсли;
						ИначеЕсли Элемент.ИмяТаблицы = "Автоработы" Тогда
							
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаказНарядПровестиНаСервере(ИдентификаторЗаказНаряда, ОбъектЗаписи, Знач СсылкаСРЗ = Неопределено)
	
	РезультатЗаписи  = Истина;
	ЗаказНаряд = ЭтотОбъект[ИдентификаторЗаказНаряда];
	
	Если СсылкаСРЗ = Неопределено Тогда
		СсылкаСРЗ = Объект.Ссылка;
	КонецЕсли;
	
	Если СсылкаСРЗ.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаказНарядОбъект = РеквизитФормыВЗначение(ИдентификаторЗаказНаряда, Тип("ДокументОбъект.ЗаказНаряд"));
	ЗаказНарядОбъект.СводныйРемонтныйЗаказ = СсылкаСРЗ;
	
	УстановитьДополнительныеПараметрыДокумента(ЗаказНарядОбъект, ИдентификаторЗаказНаряда);
	
	// Для нового установим подразделение и организацию из данного документа
	Если ЗаказНарядОбъект.Ссылка.Пустая() Тогда
		Если ЗаказНарядОбъект.ПодразделениеКомпании <> Объект.ПодразделениеКомпании Тогда
			ЗаказНарядОбъект.ПодразделениеКомпании = Объект.ПодразделениеКомпании;
			Документы.ЗаказНаряд.ПодразделениеКомпанииПриИзменении(ЗаказНарядОбъект);
		КонецЕсли;
		
		Если ЗаказНарядОбъект.Организация <> Объект.Организация Тогда
			ЗаказНарядОбъект.Организация = Объект.Организация;
			Документы.ЗаказНаряд.ОрганизацияПриИзменении(ЗаказНарядОбъект);
		КонецЕсли;

		Если ЗаказНарядОбъект.Пробег <> Объект.Пробег Тогда
			ЗаказНарядОбъект.Пробег = Объект.Пробег;
		КонецЕсли;
	КонецЕсли;
	
	// Для нового заказ-наряда установим плательщика
	Если ЗаказНарядОбъект.Ссылка.Пустая()
		И НЕ ЗначениеЗаполнено(ЗаказНарядОбъект.Контрагент)
		И НЕ ЗаказНарядОбъект.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный Тогда
		Документы.ЗаказНаряд.УстановитьГарантийногоПлательщика(ЗаказНарядОбъект);
		
		Если НЕ ЗначениеЗаполнено(ЗаказНарядОбъект.Контрагент) Тогда
			ЗаказНарядОбъект.Контрагент = Объект.Заказчик;
			Документы.ЗаказНаряд.КонтрагентПриИзменении(ЗаказНарядОбъект);
		КонецЕсли;
	КонецЕсли;
	
	// Проверим корректность заполнения авторабот
	Если ПроверитьЗаполнениеАвторабот(ПодчиненныеАвтоработы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗаказНарядОбъект.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Заявка Тогда
		Если ЗаказНарядОбъект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЗаказНарядОбъект.Ссылка) Тогда
		ЗаказНарядОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	ЗаказНарядОбъект.ДополнительныеСвойства.Вставить("НеЗаписыватьПробег");
	ЗаказНарядОбъект.ДополнительныеСвойства.Вставить("РежимЗаписиСводныйРемонтныйЗаказ");
	
	Попытка
		ЗаказНарядОбъект.Записать(РежимЗаписи);
		
		// Если вызов функции записи заказ-наряда был выполнен с клиента, возвращать ОбъектЗаписи нельзя
		ОбъектЗаписи = ?(ОбъектЗаписи = "", Неопределено, ЗаказНарядОбъект);
		
		ШтрихкодЗН = ШтрихкодированиеВызовСервера.ПолучитьШтрихКодОбъекта(ЗаказНарядОбъект.Ссылка,,, Ложь);
		Если НЕ ЗначениеЗаполнено(ШтрихкодЗН) Тогда
			ШтрихКодДокумента = Новый Структура("Штрихкод");
			ШтрихкодированиеВызовСервера.ЗаписатьШтрихкодДокумента(ШтрихКодДокумента, ЗаказНарядОбъект.Ссылка);
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка записи сводного ремонтного заказа'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			ЗаказНаряд,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
		);
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru='Ошибка записи заказ-наряда%1: %2'"),
				?(НЕ ПустаяСтрока(ЗаказНаряд.Номер), СтрШаблон(" <%1>", ЗаказНаряд.Номер), ""),
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			)
		);
		РезультатЗаписи = Ложь;
	КонецПопытки;
	
	Возврат РезультатЗаписи;
	
КонецФункции

&НаКлиенте
Процедура Оплатить(Команда)
	
	МассивЗаказНарядов = Новый Массив;
	Для Каждого ТекущаяСтрока Из Элементы.ДеревоСводногоРемонтногоЗаказа.ВыделенныеСтроки Цикл
		ТекущиеДанные = ДеревоСводногоРемонтногоЗаказа.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если ТекущиеДанные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ МассивЗаказНарядов.Найти(ТекущиеДанные.ЗаказНаряд) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивЗаказНарядов.Добавить(ТекущиеДанные.ЗаказНаряд);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", ТекущиеДанные.ЗаказНаряд);
		
		ОткрытьФорму("Документ.ПриходныйКассовыйОрдер.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказНаряд(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Перед добавлением необходимо указать автомобиль.' ");
		Сообщение.Поле = "Объект.Автомобиль";
		Сообщение.Сообщить();
		Возврат;	
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ СводныйРемонтныйЗаказЗаписатьНаСервере() Тогда
			// Если не удалось записать, то возвращаемся назад
			Элементы.СтраницыСводногоРемонтногоЗаказа.ТекущаяСтраница = Элементы.ОписаниеСводногоРемонтногоЗаказа;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СоздатьНовыйЗаказНаряд", Истина);
	
	ОткрытьФормуПереносаМеждуЗаказНарядами(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбменСAutoPadWeb(Команда)
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		Если НЕ СводныйРемонтныйЗаказЗаписатьНаСервере() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СводныйРемонтныйЗаказ"                      , Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ОткрытиеИзФормыДокумента"         , Истина);
	ПараметрыОткрытия.Вставить("КлючУникальностиФормыВладельца"   , КлючУникальности);
	ПараметрыОткрытия.Вставить("ВладелецФормаДокументаЗаказНаряд" , Ложь);
	ПараметрыОткрытия.Вставить("ЗаявкаНаРемонт", Неопределено);
	
	ОткрытьФорму("Обработка.ОбменСAudaPadWeb.Форма", ПараметрыОткрытия, ЭтотОбъект, КлючУникальности,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаказНаряд(Команда)
	
	ОткрытьЗаказНарядВопрос();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОбращенияНаСервере(Знач ОбновляемыйЗаказНаряд)
	
	ОбновляемыйЗаказНаряд = ОбновитьТаблицуПодчиненныхЗаказНарядовНаСервере(ОбновляемыйЗаказНаряд); // создадим объекты заказ-нарядов
	ОбновитьДанныеПодчиненныхТаблиц();
	ОбновитьТаблицуСводногоРемонтногоЗаказа(ОбновляемыйЗаказНаряд);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбращения(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим, были ли изменены данные дерева
	Если Команда = Команды.Найти("ОбновитьОбращения") Тогда
		Для Каждого ПодчиненныйЗаказНаряд Из ПодчиненныеЗаказНаряды Цикл
			Если ПодчиненныйЗаказНаряд.Модифицированность Тогда
				ПоказатьВопрос(
					Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ОбновитьВсеОбращения"),
					НСтр("ru = Данные работ и товаров были изменены. Продолжить?'"),
					РежимДиалогаВопрос.ДаНет,
					,
					КодВозвратаДиалога.Да
				);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Если вызов функции из обработки оповещения, то обновим только заказ-наряд по идентификатору
	ОбновляемыйЗаказНаряд = ?(ТипЗнч(Команда) = Тип("Структура"), Команда, Неопределено);
	ОбновитьОбращенияНаСервере(ОбновляемыйЗаказНаряд);
	
	ОбщегоНазначенияАвтосалонКлиент.РазвернутьДерево(ЭтотОбъект, "ДеревоСводногоРемонтногоЗаказа", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Зарезервировать(Команда)
	
	ЗаказНаряды = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоСводногоРемонтногоЗаказа.ВыделенныеСтроки Цикл
		ТекущиеДанные = ДеревоСводногоРемонтногоЗаказа.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ТекущиеДанные = Неопределено Тогда 
			Продолжить; 
		КонецЕсли;
		
		ТекущийЗаказНаряд = ЭтотОбъект[ТекущиеДанные.Идентификатор].Ссылка;
		
		Если НЕ ЗаказНаряды.Найти(ТекущийЗаказНаряд) = Неопределено Тогда 
			Продолжить; 
		КонецЕсли;
		
		ЗаказНаряды.Добавить(ТекущийЗаказНаряд);
		
		ТоварыСклада = ПолучитьТоварыПоЗаказНарядуДляЗаказа(ТекущийЗаказНаряд, Элементы.ДеревоСводногоРемонтногоЗаказа.ВыделенныеСтроки);
		
		// Запишем заказ-наряд, чтобы обновить информацию для совершения текущей операции
		Если ТоварыСклада.Количество() > 0 Тогда
			ИдентификаторОбъектаЗаказНаряд = ПодчиненныеЗаказНаряды.НайтиСтроки(Новый Структура("ЗаказНарядСсылка", ТекущийЗаказНаряд))[0].ИдентификаторОбъектаЗаказНаряд;
			Если ЗаказНарядПровестиНаСервере(ИдентификаторОбъектаЗаказНаряд, "") Тогда
				ОбновитьОбращения(ИдентификаторОбъектаЗаказНаряд);
			Иначе
				ПоказатьПредупреждение(, НСтр("ru='Не удалось сохранить заказ-наряд и зарезервировать'"));
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекущаяСтрока Из ТоварыСклада Цикл
			ПараметрыФормы = Новый Структура;
			ПараметрыЗаполнения = Новый Структура;
			
			ПараметрыЗаполнения.Вставить("ТоварыИМатериалы", Новый Структура("Товары", ТекущаяСтрока.Значение));
			ПараметрыЗаполнения.Вставить("ЗаказНаряд"      , ТекущийЗаказНаряд);
			ПараметрыЗаполнения.Вставить("ХозОперация"     , ПредопределенноеЗначение("Справочник.ХозОперации.РезервированиеПокупателя"));
			
			ПараметрыФормы.Вставить("Основание", ПараметрыЗаполнения);
			
			ОткрытьФорму("Документ.ЗаказПокупателя.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьРезервы(Команда)
	
	ЗаказНаряды = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоСводногоРемонтногоЗаказа.ВыделенныеСтроки Цикл
		ТекущиеДанные = ДеревоСводногоРемонтногоЗаказа.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ТекущиеДанные = Неопределено Тогда 
			Продолжить; 
		КонецЕсли;
		
		ТекущийЗаказНаряд = ЭтотОбъект[ТекущиеДанные.Идентификатор].Ссылка;
		
		Если НЕ ЗаказНаряды.Найти(ТекущийЗаказНаряд) = Неопределено Тогда 
			Продолжить; 
		КонецЕсли;
		
		ЗаказНаряды.Добавить(ТекущийЗаказНаряд);
		
		ТоварыИМатериалы = ПолучитьТоварыИМатериалыПоЗаказНаряду(ТекущийЗаказНаряд, Элементы.ДеревоСводногоРемонтногоЗаказа.ВыделенныеСтроки);
		
		// Запишем заказ-наряд, чтобы обновить информацию для совершения текущей операции
		Если ТоварыИМатериалы.Товары.Количество() > 0 Тогда
			ИдентификаторОбъектаЗаказНаряд = ПодчиненныеЗаказНаряды.НайтиСтроки(Новый Структура("ЗаказНарядСсылка", ТекущийЗаказНаряд))[0].ИдентификаторОбъектаЗаказНаряд;
			Если ЗаказНарядПровестиНаСервере(ИдентификаторОбъектаЗаказНаряд, "") Тогда
				ОбновитьОбращения(ИдентификаторОбъектаЗаказНаряд);
			Иначе
				ПоказатьПредупреждение(, НСтр("ru='Не удалось сохранить заказ-наряд и снять с резерва'"));
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура; 
		ПараметрыЗаполнения = Новый Структура;
		
		ПараметрыЗаполнения.Вставить("ТоварыИМатериалы", ТоварыИМатериалы);
		ПараметрыЗаполнения.Вставить("ЗаказНаряд"      , ТекущийЗаказНаряд);
		
		ПараметрыФормы.Вставить("Основание", ПараметрыЗаполнения);
		
		ОткрытьФорму("Обработка.СнятиеЗапчастиСРезерва.Форма", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Заказать(Команда)
	
	ЗаказНаряды = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоСводногоРемонтногоЗаказа.ВыделенныеСтроки Цикл
		ТекущиеДанные = ДеревоСводногоРемонтногоЗаказа.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ТекущиеДанные = Неопределено Тогда 
			Продолжить; 
		КонецЕсли;
		
		ТекущийЗаказНаряд = ЭтотОбъект[ТекущиеДанные.Идентификатор].Ссылка;
		
		Если НЕ ЗаказНаряды.Найти(ТекущийЗаказНаряд) = Неопределено Тогда 
			Продолжить; 
		КонецЕсли;
		
		ЗаказНаряды.Добавить(ТекущийЗаказНаряд);
		
		Если Команда.Имя = "ЗаказПокупателя" Тогда
			ТоварыСклада = ПолучитьТоварыПоЗаказНарядуДляЗаказа(ТекущийЗаказНаряд, Элементы.ДеревоСводногоРемонтногоЗаказа.ВыделенныеСтроки);
			
			// Запишем заказ-наряд, чтобы обновить информацию для совершения текущей операции
			Если ТоварыСклада.Количество() > 0 Тогда
				ИдентификаторОбъектаЗаказНаряд = ПодчиненныеЗаказНаряды.НайтиСтроки(Новый Структура("ЗаказНарядСсылка", ТекущийЗаказНаряд))[0].ИдентификаторОбъектаЗаказНаряд;
				Если ЗаказНарядПровестиНаСервере(ИдентификаторОбъектаЗаказНаряд, "") Тогда
					ОбновитьОбращения(ИдентификаторОбъектаЗаказНаряд);
				Иначе
					ПоказатьПредупреждение(, НСтр("ru='Не удалось сохранить заказ-наряд и заказать для клиента'"));
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Для Каждого ТекущаяСтрока Из ТоварыСклада Цикл
				
				ПараметрыФормы = Новый Структура;
				ПараметрыЗаполнения = Новый Структура;
				
				ПараметрыЗаполнения.Вставить("ТоварыИМатериалы", Новый Структура("Товары", ТекущаяСтрока.Значение));
				ПараметрыЗаполнения.Вставить("ЗаказНаряд"      , ТекущийЗаказНаряд);
				ПараметрыЗаполнения.Вставить("ХозОперация"     , ПредопределенноеЗначение("Справочник.ХозОперации.ЗаказПокупателя"));
				
				ПараметрыФормы.Вставить("Основание", ПараметрыЗаполнения);
				
				ОткрытьФорму("Документ.ЗаказПокупателя.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
				
			КонецЦикла;
		Иначе
			ТоварыИМатериалы = ПолучитьТоварыИМатериалыПоЗаказНаряду(ТекущийЗаказНаряд, Элементы.ДеревоСводногоРемонтногоЗаказа.ВыделенныеСтроки);
			
			// Запишем заказ-наряд, чтобы обновить информацию для совершения текущей операции
			Если ТоварыИМатериалы.Товары.Количество() > 0 Тогда
				ИдентификаторОбъектаЗаказНаряд = ПодчиненныеЗаказНаряды.НайтиСтроки(Новый Структура("ЗаказНарядСсылка", ТекущийЗаказНаряд))[0].ИдентификаторОбъектаЗаказНаряд;
				Если ЗаказНарядПровестиНаСервере(ИдентификаторОбъектаЗаказНаряд, "") Тогда
					ОбновитьОбращения(ИдентификаторОбъектаЗаказНаряд);
				Иначе
					ПоказатьПредупреждение(, НСтр("ru='Не удалось сохранить заказ-наряд и заказать на склад'"));
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура; 
			ПараметрыЗаполнения = Новый Структура;
			
			ПараметрыЗаполнения.Вставить("ТоварыИМатериалы", ТоварыИМатериалы);
			ПараметрыЗаполнения.Вставить("ЗаказНаряд"      , ТекущийЗаказНаряд);
			
			ПараметрыФормы.Вставить("Основание", ПараметрыЗаполнения);
			
			ОткрытьФорму("Документ." + Команда.Имя + ".ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВПроизводство(Команда)
	
	ЗаказНаряды = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоСводногоРемонтногоЗаказа.ВыделенныеСтроки Цикл
		ТекущиеДанные = ДеревоСводногоРемонтногоЗаказа.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ТекущиеДанные = Неопределено Тогда 
			Продолжить; 
		КонецЕсли;
		
		ТекущийЗаказНаряд = ЭтотОбъект[ТекущиеДанные.Идентификатор].Ссылка;
		
		Если НЕ ЗаказНаряды.Найти(ТекущийЗаказНаряд) = Неопределено Тогда 
			Продолжить; 
		КонецЕсли;
		
		ЗаказНаряды.Добавить(ТекущийЗаказНаряд);
		
		ТоварыСклада = ПолучитьТоварыПоЗаказНарядуДляЗаказа(ТекущийЗаказНаряд, Элементы.ДеревоСводногоРемонтногоЗаказа.ВыделенныеСтроки);
		
		// Запишем заказ-наряд, чтобы обновить информацию для совершения текущей операции
		Если ТоварыСклада.Количество() > 0 Тогда
			ИдентификаторОбъектаЗаказНаряд = ПодчиненныеЗаказНаряды.НайтиСтроки(Новый Структура("ЗаказНарядСсылка", ТекущийЗаказНаряд))[0].ИдентификаторОбъектаЗаказНаряд;
			Если ЗаказНарядПровестиНаСервере(ИдентификаторОбъектаЗаказНаряд, "") Тогда
				ОбновитьОбращения(ИдентификаторОбъектаЗаказНаряд);
			Иначе
				ПоказатьПредупреждение(, НСтр("ru='Не удалось сохранить заказ-наряд и переместить в производство'"));
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекущаяСтрока Из ТоварыСклада Цикл
			ПараметрыФормы = Новый Структура;
			ПараметрыЗаполнения = Новый Структура;
			
			ПараметрыЗаполнения.Вставить("ТоварыИМатериалы", Новый Структура("Товары", ТекущаяСтрока.Значение));
			ПараметрыЗаполнения.Вставить("ЗаказНаряд"      , ТекущийЗаказНаряд);
			ПараметрыЗаполнения.Вставить("СкладКомпании"   , ТекущаяСтрока.Ключ);
			
			ПараметрыФормы.Вставить("Основание", ПараметрыЗаполнения);
			
			ОткрытьФорму("Документ.ПеремещениеТоваровВПроизводство.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИзПроизводства(Команда)
	
	ЗаказНаряды = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоСводногоРемонтногоЗаказа.ВыделенныеСтроки Цикл
		ТекущиеДанные = ДеревоСводногоРемонтногоЗаказа.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ТекущиеДанные = Неопределено Тогда 
			Продолжить; 
		КонецЕсли;
		
		ТекущийЗаказНаряд = ЭтотОбъект[ТекущиеДанные.Идентификатор].Ссылка;
		
		Если НЕ ЗаказНаряды.Найти(ТекущийЗаказНаряд) = Неопределено Тогда 
			Продолжить; 
		КонецЕсли;
		
		ЗаказНаряды.Добавить(ТекущийЗаказНаряд);
		
		ТоварыИМатериалы = ПолучитьТоварыИМатериалыПоЗаказНаряду(ТекущийЗаказНаряд, Элементы.ДеревоСводногоРемонтногоЗаказа.ВыделенныеСтроки);
		
		// Запишем заказ-наряд, чтобы обновить информацию для совершения текущей операции
		Если ТоварыИМатериалы.Товары.Количество() > 0 Тогда
			ИдентификаторОбъектаЗаказНаряд = ПодчиненныеЗаказНаряды.НайтиСтроки(Новый Структура("ЗаказНарядСсылка", ТекущийЗаказНаряд))[0].ИдентификаторОбъектаЗаказНаряд;
			Если ЗаказНарядПровестиНаСервере(ИдентификаторОбъектаЗаказНаряд, "") Тогда
				ОбновитьОбращения(ИдентификаторОбъектаЗаказНаряд);
			Иначе
				ПоказатьПредупреждение(, НСтр("ru='Не удалось сохранить заказ-наряд и извлечь из производства'"));
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура; 
		ПараметрыЗаполнения = Новый Структура;
		
		ПараметрыЗаполнения.Вставить("ТоварыИМатериалы", ТоварыИМатериалы);
		ПараметрыЗаполнения.Вставить("ЗаказНаряд"      , ТекущийЗаказНаряд);
		
		ПараметрыФормы.Вставить("Основание", ПараметрыЗаполнения);
		
		ОткрытьФорму("Документ.ИзвлечениеТоваровИзПроизводства.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиДеталей(Команда)
	
	Если ДеревоСводногоРемонтногоЗаказа.ПолучитьЭлементы().Количество() = 0 ИЛИ Элементы.ДеревоСводногоРемонтногоЗаказа.ТекущиеДанные.Номенклатура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = Элементы.ДеревоСводногоРемонтногоЗаказа.ТекущиеДанные;
	Пока Родитель.ЗаказНаряд = ПредопределенноеЗначение("Документ.ЗаказНаряд.ПустаяСсылка") Цикл
		Родитель = Родитель.ПолучитьРодителя();
	КонецЦикла;
	
	// фильтры
	ОтчетОтбор = Новый Структура;
	ОтчетОтбор.Вставить("НачалоПериода", Дата('00010101'));
	ОтчетОтбор.Вставить("КонецПериода",  ОбщегоНазначенияКлиент.ДатаСеанса());
	ОтчетОтбор.Вставить("ЗаказНаряд",    Родитель.ЗаказНаряд);
	ОтчетОтбор.Вставить("Номенклатура",  Элементы.ДеревоСводногоРемонтногоЗаказа.ТекущиеДанные.Номенклатура);
	
	ОткрытьФорму("Отчет.ОстаткиИОборотыТоваровВПроизводстве.Форма", Новый Структура("Отбор,КлючВарианта,СформироватьПриОткрытии", ОтчетОтбор, "ОстаткиИОбороты", Истина), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказРезервыДеталей(Команда)
	
	Если ДеревоСводногоРемонтногоЗаказа.ПолучитьЭлементы().Количество() = 0
		ИЛИ Элементы.ДеревоСводногоРемонтногоЗаказа.ТекущиеДанные.Номенклатура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = Элементы.ДеревоСводногоРемонтногоЗаказа.ТекущиеДанные;
	Пока Родитель.ЗаказНаряд = ПредопределенноеЗначение("Документ.ЗаказНаряд.ПустаяСсылка") Цикл
		Родитель = Родитель.ПолучитьРодителя();
	КонецЦикла;
	
	// фильтры
	ОтчетОтбор = Новый Структура;
	ОтчетОтбор.Вставить("Заказ",        ПолучитьЗаказыДляТовара(Родитель.ЗаказНаряд));
	ОтчетОтбор.Вставить("Номенклатура", Элементы.ДеревоСводногоРемонтногоЗаказа.ТекущиеДанные.Номенклатура);
	
	ОткрытьФорму(
		"Отчет.ОстаткиИОборотыЗаказовПокупателей.Форма",
		Новый Структура("Отбор,КлючВарианта,СформироватьПриОткрытии", ОтчетОтбор, "ОстаткиИОбороты", Истина),
		ЭтотОбъект
	);
	
КонецПроцедуры

&НаКлиенте
Процедура БлокировкаИзменений(Команда)
	
	ТекущиеДанные = Элементы.ДеревоСводногоРемонтногоЗаказа.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЗН = Неопределено;
	СтрокиЗН = ПодчиненныеЗаказНаряды.НайтиСтроки(Новый Структура("ИдентификаторОбъектаЗаказНаряд", ТекущиеДанные.Идентификатор));
	Если СтрокиЗН.Количество() > 0 Тогда
		СтрокаЗН = СтрокиЗН[0];
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая()
		ИЛИ НЕ ЗначениеЗаполнено(ЭтотОбъект[ТекущиеДанные.Идентификатор].Ссылка)
		ИЛИ (НЕ СтрокаЗН = Неопределено И СтрокаЗН.Модифицированность) Тогда
		
		ТекстВопроса = НСтр("ru = 'Для продолжения операции сводный ремонтный заказ и заказ-наряды должны быть записаны.'");
		
		ОповещениеВопроса = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			ЭтотОбъект,
			Новый Структура("Событие,ИдентификаторЗаказНаряда", "БлокировкаИзмененийЗаказНаряда", ТекущиеДанные.Идентификатор)
		);
		ПоказатьВопрос(
			ОповещениеВопроса,
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Да,
			НСтр("ru = 'Запись сводного ремонтного заказа.'")
		);
		Возврат;
	КонецЕсли;
	
	Подключаемый_ОбработкаРезультатаОповещения(
		null,
		Новый Структура("Событие,ИдентификаторЗаказНаряда", "БлокировкаИзмененийЗаказНаряда", ТекущиеДанные.Идентификатор)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьИсполнителей(Команда)
	
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Модифицированность = Истина;
		ОписаниеОповещиеняОЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			ЭтотОбъект,
			"Вопрос_РедактироватьИсполнителей");
		ПоказатьВопрос(
			ОписаниеОповещиеняОЗавершении,
			НСтр("ru = 'Для продолжения объект должен быть записан! Записать?'"),
			РежимДиалогаВопрос.ДаНет
		);
		
	Иначе
		ОткрытьФормуРедактированияИсполнителей();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОбОстатках(Команда)
	
	// подготовим параметры формы
	ОткрытьФорму(
	"ОбщаяФорма.ФормаИнформацииОбОстаткахНоменклатурыВЗаказНаряде",
	ПодготовитьПараметрыКОткрытиюФормы(),
	ЭтотОбъект,
	УникальныйИдентификатор,,,,
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьМеждуЗаказНарядами(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДобавлятьНовыйЗаказНаряд", Истина);
	
	ОткрытьФормуПереносаМеждуЗаказНарядами(ПараметрыФормы);
	
КонецПроцедуры 

&НаСервере
Функция ПодготовитьПараметрыКОткрытиюФормы()
	
	// инициализируем таблицу
	ТаблицаДокумента = Новый ТаблицаЗначений;
	ТаблицаДокумента.Колонки.Добавить("ЗаказНаряд", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаряд"));
	ТаблицаДокумента.Колонки.Добавить("ЗаказНарядИдентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаДокумента.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДокумента.Колонки.Добавить("СкладКомпании", Новый ОписаниеТипов("СправочникСсылка.СкладыКомпании"));
	ТаблицаДокумента.Колонки.Добавить("Количество");
	ТаблицаДокумента.Колонки.Добавить("Коэффициент");
	ТаблицаДокумента.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаДокумента.Колонки.Добавить("ХарактеристикаНоменклатуры",
	Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	СозданныеУникальныеИдентификаторы = Новый Структура;
	
	// заполнение таблицы
	Для Каждого СтрокаТовара Из ПодчиненныеТовары Цикл
		НоваяСтрока = ТаблицаДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(
		НоваяСтрока, СтрокаТовара);
		
		Если СозданныеУникальныеИдентификаторы.Свойство(СтрокаТовара.ИдентификаторОбъектаЗаказНаряд) Тогда
			НоваяСтрока.ЗаказНарядИдентификатор = СозданныеУникальныеИдентификаторы[СтрокаТовара.ИдентификаторОбъектаЗаказНаряд];
			НоваяСтрока.ЗаказНаряд = ЭтотОбъект[СтрокаТовара.ИдентификаторОбъектаЗаказНаряд].Ссылка;
		Иначе
			СозданныеУникальныеИдентификаторы.Вставить(
			СтрокаТовара.ИдентификаторОбъектаЗаказНаряд, Новый УникальныйИдентификатор);
			
			НоваяСтрока.ЗаказНарядИдентификатор = СозданныеУникальныеИдентификаторы[СтрокаТовара.ИдентификаторОбъектаЗаказНаряд];
			НоваяСтрока.ЗаказНаряд = ЭтотОбъект[СтрокаТовара.ИдентификаторОбъектаЗаказНаряд].Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат
	Новый Структура("АдресТаблицыВоВременномХранилище", ПоместитьВоВременноеХранилище(ТаблицаДокумента, Новый УникальныйИдентификатор));
	
КонецФункции

&НаСервере
Функция СформироватьДанныеРекомендации()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Автомобиль",      Объект.Автомобиль);
	СтруктураПараметров.Вставить("ТипЦен",          ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенПродажи"));
	СтруктураПараметров.Вставить("ТипЦенАвторабот", ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенРабот"));
	
	// установим начальный отбор
	СтруктураПараметров.Вставить("РежимВыбора",                   Ложь);
	СтруктураПараметров.Вставить("ОтборАктуальный",               Истина);
	СтруктураПараметров.Вставить("ОтборВыполняется",              Истина);
	СтруктураПараметров.Вставить("ОтборРекомендацияАвтоработы",   Истина);
	СтруктураПараметров.Вставить("ОтборРекомендацияНоменклатура", Истина);
	СтруктураПараметров.Вставить("ОтборТекстовоеОписание",        Истина);
	
	Возврат СтруктураПараметров;
	
КонецФункции 

&НаКлиенте
Процедура РекомендацииАвтомобиляНажатие(Элемент)
	
	ДанныеПараметровОткрытия = СформироватьДанныеРекомендации();
	ОткрытьФорму("Обработка.ПодборРекомендаций.Форма", ДанныеПараметровОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаВсехЗаказовИРезервов(Команда)
	
	ЗаказНаряды = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоСводногоРемонтногоЗаказа.ВыделенныеСтроки Цикл
		ТекущиеДанные = ДеревоСводногоРемонтногоЗаказа.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ТекущиеДанные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийЗаказНаряд = ЭтотОбъект[ТекущиеДанные.Идентификатор].Ссылка;
		ЗаказНаряды.Добавить(ТекущийЗаказНаряд);
	КонецЦикла;
	
	Если Модифицированность Тогда
		ДополнительныеПараметры = Новый Структура("ЗаказНаряды", ЗаказНаряды);
		
		Оповещение = Новый ОписаниеОповещения(
			"ОтменаВсехЗаказовИРезервовОповещение",
			ЭтотОбъект,
			ДополнительныеПараметры
		);
		
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Сохранить документ и отменить все заказы и резервы?''"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ОтменаВсехЗаказовИРезервовПродолжение(ЗаказНаряды);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьКИ(Команда)
	
	ИмяКоманды = Команда.Имя;
	
	Если ИмяКоманды = "ОбновлятьКИ" И ПроверитьСогласиеНаОбработкуПерсональныхДанных(Объект.Заказчик) Тогда
		
		Если Не РазрешитьВводНесколькихЗначенийТелефона Или Не РазрешитьВводНесколькихЗначенийЭлектроннойПочты Тогда
			Обработчик = Новый ОписаниеОповещения("Подключаемый_ОбновлятьКИ", ЭтотОбъект);
			Если Не РазрешитьВводНесколькихЗначенийТелефона И Не РазрешитьВводНесколькихЗначенийЭлектроннойПочты Тогда
				ВидыКИ = НСтр("ru = 'телефона и адреса электронной почты'");
			ИначеЕсли Не РазрешитьВводНесколькихЗначенийТелефона Тогда
				ВидыКИ = НСтр("ru = 'телефона'");
			Иначе
				ВидыКИ = НСтр("ru = 'адреса электронной почты'");
			КонецЕсли;
			ТекстВопроса = СтрШаблон(
				НСтр("ru = 'Для %1 не настроено хранение нескольких значений.
				|При включении обновления текущие значения в карточке контрагента будут заменены данными из документа. Продолжить?'"),
				ВидыКИ
			);
			
			ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Возврат;
		КонецЕсли;
		
		Подключаемый_ОбновлятьКИ(КодВозвратаДиалога.Да);
		
	Иначе
		Подключаемый_ОбновлятьКИ(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)
	
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
    
КонецПроцедуры

&НаКлиенте
Процедура ПозвонитьИлиОтправитьSMS(Команда)
	
	Список = Новый СписокЗначений;
	Список.Добавить("Позвонить", НСтр("ru = 'Позвонить'"),, БиблиотекаКартинок.Позвонить);
	Список.Добавить("ОтправитьSMS", НСтр("ru = 'Отправить SMS...'"),, БиблиотекаКартинок.ОтправитьSMS);
	ОповещениеМеню = Новый ОписаниеОповещения("ПослеВыбораИзМенюТелефон", ЭтотОбъект, Параметры);
	ЭтотОбъект.ПоказатьВыборИзМеню(ОповещениеМеню, Список, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НаписатьПисьмо(Команда)
	
	УправлениеКонтактнойИнформациейКлиент.СоздатьЭлектронноеПисьмо(Объект.АдресЭлектроннойПочтыСтрокой,
	Объект.АдресЭлектроннойПочты, ВидКонтактнойИнформацииЭлектроннойПочты, Объект.Заказчик);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПроверитьСогласиеНаОбработкуПерсональныхДанных(Контрагент)
	
	Если ТипЗнч(Контрагент) = Тип("Строка") ИЛИ Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указан контрагент.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ (Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо
		ИЛИ Контрагент.ФормаСобственности  = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Согласие = ЗащитаПерсональныхДанных.ДействующееСогласиеНаОбработкуПерсональныхДанных(
		Контрагент,
		Справочники.Организации.ОрганизацияПоУмолчанию(),
		КонецДня(ТекущаяДатаСеанса())
	);
	
	Если Согласие = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Отсутствует согласие на обработку персональных данных. Запись контактной информации невозможна.'")
		);
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыИзПараметров(ПараметрыФормы)
	
	Плательщик        = ПолучитьЗначениеПараметраСтруктуры(ПараметрыФормы, "Контрагент");
	Объект.Заказчик   = ПолучитьЗначениеПараметраСтруктуры(ПараметрыФормы, "Заказчик", Объект.Заказчик);
	Объект.Автомобиль = ПолучитьЗначениеПараметраСтруктуры(ПараметрыФормы, "Автомобиль", Объект.Автомобиль);
	Объект.ПересчитатьЦены = ПолучитьЗначениеПараметраСтруктуры(
			ПараметрыФормы, "ПересчитатьЦены", Объект.ПересчитатьЦены);
	ПараметрыДействия = Новый Структура("НеобходимоПерезаполнитьЗаказчика", Ложь);
	АвтомобильПриИзмененииНаСервере(ПараметрыДействия);
	
	Если ТипЗнч(ПараметрыФормы.Основание) = Тип("ДокументСсылка.ЗаявкаНаРемонт")
		И ПараметрыФормы.Основание.ПричиныОбращения.Количество() = 0 Тогда
		ВводБезПричиныОбращения = Истина;
	Иначе
		ВводБезПричиныОбращения = ПолучитьЗначениеПараметраСтруктуры(ПараметрыФормы, "ВводБезПричиныОбращения", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументыПоПараметрам(ПараметрыФормы)
	
	Если НЕ НужноСоздатьЗаказНаряд(ПараметрыФормы) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВводБезПричиныОбращения Тогда
		СоставЗаказНарядов = Неопределено;
	Иначе
		СоставЗаказНарядов = ДайСоставЗаказНарядовИзПараметров(ПараметрыФормы);
	КонецЕсли;
	
	Если СоставЗаказНарядов = Неопределено Тогда
		ДобавитьЗаказНаряд(ПараметрыФормы.Основание);
		Возврат;
	КонецЕсли;
	
	ЭтоПервыйЗаказНаряд = Истина;
	Для Каждого ЗаказНаряд Из СоставЗаказНарядов.Строки Цикл
		ДобавитьЗаказНаряд(ПараметрыФормы.Основание, ЗаказНаряд.Строки, ЭтоПервыйЗаказНаряд);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НужноСоздатьЗаказНаряд(ПараметрыФормы)
	
	Возврат ПолучитьЗначениеПараметраСтруктуры(ПараметрыФормы, "СоздаватьЗН", Истина);
	
КонецФункции

&НаСервере
Функция ДайСоставЗаказНарядовИзПараметров(ПараметрыФормы)
	
	АдресХранилищаПричинОбращений = ПолучитьЗначениеПараметраСтруктуры(ПараметрыФормы, "АдресХранилищаПричинОбращений");
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаПричинОбращений) Тогда
		Возврат ПолучитьИзВременногоХранилища(АдресХранилищаПричинОбращений);
	КонецЕсли;
		
	Если ЕстьРеквизит(ПараметрыФормы.Основание,, "ПричиныОбращения") Тогда
		Возврат ПричиныОбращений.ПолучитьДеревоПричинОбращенийИзОснования(ПараметрыФормы.Основание.ПричиныОбращения);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьСобытиеИзмененЗаказНаряд(ОписаниеСобытия)
	
	Если
		ОписаниеСобытия.ИмяСобытия = "ИзмененЗаказНаряд"
		И НЕ Объект.Ссылка.Пустая()
		И Объект.Ссылка = ПолучитьЗначениеПараметраСтруктуры(ОписаниеСобытия.Параметр, "СРЗ")
	Тогда
		ОбновитьОбращения(ОписаниеСобытия.Параметр.ИдентификаторЗН);
		УстановитьЗаголовокНадписиСуммаДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСобытиеИзмененСводныйРемонтныйЗаказ(ОписаниеСобытия)
	
	Если
		ОписаниеСобытия.ИмяСобытия = "ИзмененСводныйРемонтныйЗаказ"
		И НЕ Объект.Ссылка.Пустая()
		И Объект.Ссылка = ОписаниеСобытия.Параметр
	Тогда
		Прочитать();
		ОбновитьОбращения(Неопределено);
		УстановитьЗаголовокНадписиСуммаДокумента();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеАвторабот(ТабличнаяЧасть)
	
	// Создадим структуру отбора для проверки уникальности реквизитов
	ПоляПоискаДублей = Новый Структура();
	ПоляПоискаДублей.Вставить("Авторабота");
	ПоляПоискаДублей.Вставить("ИдентификаторПричиныОбращения");
	ПоляПоискаДублей.Вставить("ИдентификаторОбъектаЗаказНаряд");
	
	// Подготовим списки для накопления сведений о дублирующихся строках
	СписокНайденныхДублей = Новый Массив;
	ОбработанныеСтроки    = Новый Соответствие;
	
	// Идем по табличной части
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		// Пропустим строки уже попавшие в черный список
		Если НЕ ОбработанныеСтроки.Получить(СтрокаТабличнойЧасти) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// Производим поиск строк удовлетворяющих структуре отбора
		ЗаполнитьЗначенияСвойств(ПоляПоискаДублей, СтрокаТабличнойЧасти);
		НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(ПоляПоискаДублей);
		// Если нашли и их больше 1, то строки не уникальные
		Если НайденныеСтроки.Количество() > 1 Тогда
			// Определим номера дублирующихся строк и занесем их в черный список
			НомераСтрокДублей = "";
			
			Для каждого НайденныйДубль Из НайденныеСтроки Цикл
				НомераСтрокДублей = НомераСтрокДублей + ", " + СокрЛП(НайденныйДубль.ИдентификаторСтрокиВЗаказНаряде);
				ОбработанныеСтроки.Вставить(НайденныйДубль, Истина);
			КонецЦикла;
			// Запоминаем номера найденных дублей
			СписокНайденныхДублей.Добавить(Сред(НомераСтрокДублей, 3));
		КонецЕсли;
	КонецЦикла;
	
	// Выводим сведения о найденных дублях по текущему ключу поиска
	Если СписокНайденныхДублей.Количество() > 0 Тогда
		// Произведем формирование заголовка сообщения об обнаруженных дублях
		ОбъектМетаданныхТаблицы = Метаданные.Документы.ЗаказНаряд.ТабличныеЧасти["Автоработы"];
		ПредставленияПолей      = "";
		ПредставленияСтрок      = "";
		// Получим представление дублирующихся полей
		Для Каждого УникальныйРеквизитТаблицы Из ПоляПоискаДублей Цикл
			ПредставленияПолей = ПредставленияПолей + ", " + УникальныйРеквизитТаблицы.Ключ;
		КонецЦикла;
		// Получим представление дублирующихся строк
		Для каждого НайденныеДубли Из СписокНайденныхДублей Цикл
			ПредставленияСтрок = ПредставленияСтрок
				+ Символы.ПС 
				+ СтрШаблон(НСтр("ru = 'Строки: %1'"), НайденныеДубли);
		КонецЦикла;
		// Информируем пользователя о найденной коллизии
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Строки не уникальны по значению полей (%1) %2'"),
				Сред(ПредставленияПолей, 3),
				ПредставленияСтрок
			),
			,
			"Автоработы"
		);
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ПроверитьВозможностьПеретаскиванияЗакрытыхЗН(Приемники, Источники)
	
	// Имеем идентификаторы всех ЗН, которые участвуют в перетаскивании
	// если хоть 1 закрыт, вернем его идентификатор, если все открыты то, истина.
	Для Каждого Приемник Из Приемники Цикл
		Если Не ПолучитьСтатусЗН(Приемник.Идентификатор) Тогда 
			Возврат Приемник.ИдентификаторСтроки;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Источник Из Источники Цикл
		Если Не ПолучитьСтатусЗН(Источник.Идентификатор) Тогда
			Возврат Источник.ИдентификаторСтроки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолучитьСтатусЗН(ИдентификаторовЗН)
	
	МассивЗН = ПодчиненныеЗаказНаряды.НайтиСтроки(Новый Структура("ИдентификаторОбъектаЗаказНаряд", ИдентификаторовЗН));
	
	Если МассивЗН.Количество() > 0
		И МассивЗН[0].СостояниеЗаказНаряда <> Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКоманднуюПанельАтрибутыСобытия()
	
	// Подменю отчетов заказ-нарядов
	СписокОтчетовЗаказНарядов = Новый СписокЗначений; 
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.АнализСостоянийЗаказНаряда) Тогда
		СписокОтчетовЗаказНарядов.Добавить("АнализСостоянийЗаказНаряда", НСтр("ru = 'Анализ состояний заказ-наряда'"));
	КонецЕсли;
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ИсторияПоЗаказНарядам) Тогда
		СписокОтчетовЗаказНарядов.Добавить("ИсторияПоЗаказНарядам", НСтр("ru = 'История по заказ-нарядам'"));
	КонецЕсли;
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ПрайсЛистыКонтрагентов) Тогда
		СписокОтчетовЗаказНарядов.Добавить("ПрайсЛистыКонтрагентов", НСтр("ru = 'Наличие в прайс-листах контрагентов'"));
	КонецЕсли;
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ОстаткиИОборотыТоваров) Тогда
		СписокОтчетовЗаказНарядов.Добавить("ОстаткиИОборотыТоваров", НСтр("ru = 'Наличие на складах'"));
	КонецЕсли;
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ОстаткиИОборотыТоваровВПроизводстве) Тогда
		СписокОтчетовЗаказНарядов.Добавить("ОстаткиИОборотыТоваровВПроизводстве", НСтр("ru = 'Незавершенное производство'"));
	КонецЕсли;
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеРабот) Тогда
		СписокОтчетовЗаказНарядов.Добавить("СостояниеРабот", НСтр("ru = 'Отчет по состоянию работ'"));
	КонецЕсли;
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РекомендацииПоАвтомобилям) Тогда
		СписокОтчетовЗаказНарядов.Добавить("РекомендацииПоАвтомобилям", НСтр("ru = 'Рекомендации по автомобилям'"));
	КонецЕсли;
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеЗаказовПокупателей) Тогда
		СписокОтчетовЗаказНарядов.Добавить("СостояниеЗаказовПокупателей", НСтр("ru = 'Состояние заказов покупателей'"));
	КонецЕсли;
	
	Для Каждого Отчет Из СписокОтчетовЗаказНарядов Цикл
		НоваяКомандаКнопка(
			"ОтчетЗаказНаряд" + Отчет.Значение,
			Отчет.Представление,
			Элементы.ПодменюОтчетовЗаказНарядов,
			БиблиотекаКартинок.Отчет);
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура НоваяКомандаКнопка(
	ИмяКоманды, ПредставлениеКоманды, Группа, Картинка, Действие = "ОтчетыЗаказНаряда")
	
	ТипКнопка = Тип("КнопкаФормы");
	
	Команда = Команды.Добавить(ИмяКоманды);
	Команда.Заголовок = ПредставлениеКоманды;
	Команда.Действие = Действие;
	Команда.ИзменяетСохраняемыеДанные = Ложь;
	
	Кнопка = Элементы.Добавить(ИмяКоманды, ТипКнопка, Группа);
	Кнопка.Картинка = Картинка;
	Кнопка.ИмяКоманды = ИмяКоманды;
	Кнопка.Пометка = Ложь;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОтчетыЗаказНаряда(Команда) 
			
	ТекущиеДанные = Элементы.ДеревоСводногоРемонтногоЗаказа.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЗаказНаряд = ЭтотОбъект[ТекущиеДанные.Идентификатор];
	
	Если НЕ ЗначениеЗаполнено(ТекущийЗаказНаряд.Ссылка) Тогда
		ВывестиСообщение(НСтр("ru = 'Данный заказ-наряд еще не записан'"), ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	СформироватьОтчетПоТекущемуЗаказНаряду(Сред(Команда.Имя, 16));		
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетПоТекущемуЗаказНаряду(ИмяКоманды)  

	Родитель = Элементы.ДеревоСводногоРемонтногоЗаказа.ТекущиеДанные;
	Пока Родитель.ЗаказНаряд = ПредопределенноеЗначение("Документ.ЗаказНаряд.ПустаяСсылка") Цикл
		Родитель = Родитель.ПолучитьРодителя();
	КонецЦикла;
	
	КлючВарианта = Неопределено;
	ОтчетОтбор = Неопределено;
	
	Если ИмяКоманды = "АнализСостоянийЗаказНаряда" ИЛИ ИмяКоманды = "СостояниеРабот" Тогда
		
		ОтчетОтбор = Новый Структура("ЗаказНаряд", Родитель.ЗаказНаряд);
		
	ИначеЕсли ИмяКоманды = "ИсторияПоЗаказНарядам" Тогда
		
		ОтчетОтбор = Новый Структура("Автомобиль", Объект.Автомобиль);
		КлючВарианта = "ДляЗаказНаряда";
		
	ИначеЕсли ИмяКоманды = "ПрайсЛистыКонтрагентов" Тогда
		
		ОтчетОтбор = Новый Структура("Артикул", ПолучитьТоварыЗаказНарядов(Родитель.ЗаказНаряд, "Артикул"));
		КлючВарианта = "НаличиеВПрайсЛистахКонтрагентов";
		
	ИначеЕсли ИмяКоманды = "ОстаткиИОборотыТоваров" Тогда
		
		ОтчетОтбор = Новый Структура("Номенклатура", ПолучитьТоварыЗаказНарядов(Родитель.ЗаказНаряд, "Номенклатура"));
		КлючВарианта = "Остатки";
		
	ИначеЕсли ИмяКоманды = "ОстаткиИОборотыТоваровВПроизводстве" Тогда
		
		ОтчетОтбор = Новый Структура("ЗаказНаряд,НачалоПериода,КонецПериода",
			Родитель.ЗаказНаряд,
			Дата('00010101'),
			ОбщегоНазначенияКлиент.ДатаСеанса());
		КлючВарианта = "Обороты";
		
	ИначеЕсли ИмяКоманды = "РекомендацииПоАвтомобилям" Тогда
		
		ОтчетОтбор = Новый Структура("Автомобиль", Объект.Автомобиль);
		КлючВарианта = "ДляЗаказа";
		
	ИначеЕсли ИмяКоманды = "СостояниеЗаказовПокупателей" Тогда
		
		ОтчетОтбор = Новый Структура("ДокументОснование", Родитель.ЗаказНаряд);
		
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
	
	Если ЗначениеЗаполнено(ОтчетОтбор) Тогда
		ПараметрыОтчета.Вставить("Отбор", ОтчетОтбор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлючВарианта) Тогда
		ПараметрыОтчета.Вставить("КлючВарианта", КлючВарианта);
	КонецЕсли;
	
	ОткрытьФорму(СтрШаблон("Отчет.%1.Форма", ИмяКоманды), ПараметрыОтчета, ЭтотОбъект); 
	
КонецПроцедуры 

&НаСервере
Функция ПолучитьТоварыЗаказНарядов(Документ, ПолеТовара)
	
	СписокТоваров = Новый СписокЗначений;
	
	Если Документ.Товары.Количество() <> 0 Тогда
		Если ПолеТовара = "Номенклатура" Тогда
			Для Каждого Товар Из Документ.Товары Цикл
				СписокТоваров.Добавить(Товар.Номенклатура);
			КонецЦикла;
		Иначе
			Для Каждого Товар Из Документ.Товары Цикл
				СписокТоваров.Добавить(Товар.Номенклатура.Артикул);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокТоваров;
	
КонецФункции

&НаСервере
Процедура ОбновитьТаблицуСводногоРемонтногоЗаказа(ОбновляемыйЗаказНарядИД = Неопределено)
	
	ЭлементыДерева = ДеревоСводногоРемонтногоЗаказа.ПолучитьЭлементы();
	// Если нужно обновить отображение только одного заказ-наряда
	Если ЗначениеЗаполнено(ОбновляемыйЗаказНарядИД) Тогда
		// Найдем ссылку на этот заказ-наряд
		ОбновляемыйЗаказНаряд = ПодчиненныеЗаказНаряды.НайтиСтроки(Новый Структура("ИдентификаторОбъектаЗаказНаряд", ОбновляемыйЗаказНарядИД));
		НомерСтрокиЗаказНаряд = 0;
		
		Если ОбновляемыйЗаказНаряд.Количество() > 0 Тогда
			ОбновляемыйЗаказНаряд = ОбновляемыйЗаказНаряд[0].ЗаказНарядСсылка;
		КонецЕсли;
		// Удалим строку дерева с этим заказ-нарядом
		Для Сч = 0 По ЭлементыДерева.Количество() - 1 Цикл
			Если ЭлементыДерева[Сч].ЗаказНаряд = ОбновляемыйЗаказНаряд Тогда
				ЭлементыДерева.Удалить(Сч);
				НомерСтрокиЗаказНаряд = Сч;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// Удалим пустые новые заказ-наряды из дерева
		Сч = ЭлементыДерева.Количество() - 1;
		
		Пока Сч >= 0 Цикл
			Если НЕ ЗначениеЗаполнено(ЭлементыДерева[Сч].ЗаказНаряд) Тогда
				ЭлементыДерева.Удалить(Сч);
			КонецЕсли;
			
			Сч = Сч - 1;
		КонецЦикла;
	Иначе
		ЭлементыДерева.Очистить();
	КонецЕсли;
	
	ОтображатьТовары     = (ОтборВДеревеСводногоРемонтногоЗаказаПоТипуСтрок = 0) ИЛИ (ОтборВДеревеСводногоРемонтногоЗаказаПоТипуСтрок = 1);
	ОтображатьАвтоработы = (ОтборВДеревеСводногоРемонтногоЗаказаПоТипуСтрок = 0) ИЛИ (ОтборВДеревеСводногоРемонтногоЗаказаПоТипуСтрок = 2);
	
	ПодчиненныеТаблицы = Новый Структура;
	ПодчиненныеТаблицы.Вставить("ПодчиненныеАвтоработы",                ПодчиненныеАвтоработы);
	ПодчиненныеТаблицы.Вставить("ПодчиненныеТовары",                    ПодчиненныеТовары);
	ПодчиненныеТаблицы.Вставить("ПодчиненныеПричиныОбращений",          ПодчиненныеПричиныОбращений);
	ПодчиненныеТаблицы.Вставить("ПодчиненныеВспомогательныеАвтоработы", ПодчиненныеВспомогательныеАвтоработы);
	ПодчиненныеТаблицы.Вставить("ПодчиненныеМатериалы",                 ПодчиненныеМатериалы);
	
	// Счетчик для обновления одного заказ-наряда
	НомерСтроки = 0;
	
	Для Каждого ЗаказНаряд Из ПодчиненныеЗаказНаряды Цикл
		// Если нужно обновить отображение только одного заказ-наряда
		Если ЗначениеЗаполнено(ОбновляемыйЗаказНаряд) Тогда
			Если ЗаказНаряд.ЗаказНарядСсылка <> ОбновляемыйЗаказНаряд Тогда
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			Иначе
				СтрокаЗН = ЭлементыДерева.Вставить(НомерСтроки);
			КонецЕсли;
		Иначе
			СтрокаЗН = ЭлементыДерева.Добавить();
		КонецЕсли;
		
		СтрокаЗН.Представление   = ЗаказНаряд.Представление;
		СтрокаЗН.ВалютаДокумента = ЗаказНаряд.ВалютаДокументаЗаказНаряд;
		СтрокаЗН.КурсДокумента   = ЗаказНаряд.КурсДокументаЗаказНаряд;
		СтрокаЗН.Состояние       = ЗаказНаряд.СостояниеЗаказНаряда;
		СтрокаЗН.ЗаказНаряд      = ЗаказНаряд.ЗаказНарядСсылка;
		СтрокаЗН.СуммаВсего      = ЗаказНаряд.СуммаДокументаЗаказНаряд;
		СтрокаЗН.Идентификатор   = ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд;
		
		СуммаПоТоварам = ПричиныОбращенийКлиентСервер.ПодсчитатьСуммуВТаблицеПоПричинеОбращения(
			СтрокаЗН.Идентификатор, ПодчиненныеТовары, "ИдентификаторОбъектаЗаказНаряд");
		
		СуммаПоРаботам = ПричиныОбращенийКлиентСервер.ПодсчитатьСуммуВТаблицеПоПричинеОбращения(
			СтрокаЗН.Идентификатор, ПодчиненныеАвтоработы, "ИдентификаторОбъектаЗаказНаряд");
		
		СтрокаЗН.СуммаПоАвтоработамИТоварам = СтрШаблон(
			НСтр("ru = 'По товарам: %1; по автоработам: %2; итого: %3'"),
			СуммаПоТоварам,
			СуммаПоРаботам,
			СуммаПоТоварам + СуммаПоРаботам);
		
		СтрокаЗН.ЭтоГруппа         = Истина;
		СтрокаЗН.ПризнакБлокировки = ЗаказНаряд.ПризнакБлокировки;
		СтрокаЗН.НомерРисунка      = 0;
		
		ЭлементыСтрокиЗН = СтрокаЗН.ПолучитьЭлементы();
		
		Автосервис.ЗаполнитьДеревоПоЗаказНаряду(
			ЭлементыСтрокиЗН,
			СтрокаЗН,
			ЗаказНаряд,
			ПодчиненныеТаблицы,
			ОтображатьТовары,
			ОтображатьАвтоработы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СводныйРемонтныйЗаказЗаписатьНаСервере()
	
	РезультатЗаписи  = Истина;
	
	Попытка
		
		РезультатЗаписи = Записать();
		
		Если Объект.Ссылка.Пустая() Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Ошибка записи машинозаезда <""%1"">'"),
					Строка("СводныйРемонтныйЗаказ № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата)
				)
			);
			
			РезультатЗаписи = Ложь;
		КонецЕсли;
		
	Исключение
		
		ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru='Ошибка записи машинозаезда <""%1"">: %2'"),
				Строка("СводныйРемонтныйЗаказ № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата),
				ПредставлениеОшибки
			)
		);
		
		РезультатЗаписи = Ложь;
		
	КонецПопытки;
	
	Возврат РезультатЗаписи;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьДанныеПереносаСтрокЗН(Источники, Приемник, ПараметрыСтрок)
	
	Если Источники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСтрок = Неопределено Тогда
		ПараметрыСтрока = Новый Структура;
	КонецЕсли;
	
	Условие = Новый Структура("ИдентификаторОбъектаЗаказНаряд", Приемник.Идентификатор);
	СтрокаЗН = ПодчиненныеЗаказНаряды.НайтиСтроки(Условие)[0];
	
	ПараметрыСтрок.Вставить("ЗНПриемник", СтрокаЗН.ЗаказНарядСсылка);
	
	Условие = Новый Структура("ИдентификаторОбъектаЗаказНаряд", Источники[0].Идентификатор);
	СтрокаЗН = ПодчиненныеЗаказНаряды.НайтиСтроки(Условие)[0];
	
	ПараметрыСтрок.Вставить("ЗНИсточник", СтрокаЗН.ЗаказНарядСсылка);
	
	ТаблицаПричиныОбращений       = Новый Соответствие;
	ВспомогательныеРаботы  = Новый Структура;
	МатериалыЗаказчика     = Новый Структура;
	
	Если Источники[0].ЭтоГруппа Тогда
		
		// выполняем перенос причин
		Для Каждого Источник Из Источники Цикл
			
			// если перетаскиваются причины обращения
			Если Источник.ИмяТаблицы = "ПричиныОбращений" Тогда
				ТаблицаПричиныОбращений.Вставить(Источник.ПричинаОбращения, Новый Массив);
				
			// если перетаскиваются все вспомогательные автоработы
			ИначеЕсли Источник.ИмяТаблицы = "ВспомогательныеАвтор" Тогда
				ВспомогательныеРаботы.Вставить("ВспомогательныеАвтор", Новый Массив);
				
			// если перетаскиваются все вспомогательные автоработы
			ИначеЕсли Источник.ИмяТаблицы = "МатериалыЗаказчика" Тогда
				МатериалыЗаказчика.Вставить("МатериалыЗаказчика", Новый Массив);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		// выполняем перенос строк
		Для Каждого Источник Из Источники Цикл
			
			Если Источник.ИмяТаблицы = "Товары" Тогда
				
				// получим строку в таблице товаров
				Отбор = Новый Структура;
				Отбор.Вставить("ИдентификаторОбъектаЗаказНаряд", Источник.Идентификатор);
				Отбор.Вставить("ИдентификаторСтрокиВЗаказНаряде", Источник.ИдентификаторСтроки);
				
				СтрокаВТаблица = ПодчиненныеТовары.НайтиСтроки(Отбор)[0];
				
				РодительИсточника = Источник.ПолучитьРодителя();
				
				Если ТаблицаПричиныОбращений.Получить(РодительИсточника.ПричинаОбращения) = Неопределено Тогда
					ТаблицаПричиныОбращений.Вставить(РодительИсточника.ПричинаОбращения, Новый Структура);
				КонецЕсли;
				
				Если НЕ ТаблицаПричиныОбращений[РодительИсточника.ПричинаОбращения].Свойство("Товары") Тогда
					ТаблицаПричиныОбращений[РодительИсточника.ПричинаОбращения].Вставить("Товары", Новый Массив);
				КонецЕсли;
				
				ДанныеСтрокиТовара = Новый Структура("Номенклатура,ЕдиницаИзмерения,ХарактеристикаНоменклатуры");
				ЗаполнитьЗначенияСвойств(ДанныеСтрокиТовара, СтрокаВТаблица);
				ТаблицаПричиныОбращений[РодительИсточника.ПричинаОбращения].Товары.Добавить(ДанныеСтрокиТовара);
				
			ИначеЕсли Источник.ИмяТаблицы = "Автоработы" Тогда
				
				ЗНИсточник = ЭтотОбъект[Источник.Идентификатор];
				
				// перенос самой автоработы
				Отбор = Новый Структура;
				Отбор.Вставить("ИдентификаторОбъектаЗаказНаряд", Источник.Идентификатор);
				Отбор.Вставить("ИдентификаторСтрокиВЗаказНаряде", Источник.ИдентификаторСтроки);
				
				СтрокаВТаблица = ПодчиненныеАвтоработы.НайтиСтроки(Отбор)[0];
				
				// найдем строку источник в ЗН
				СтрокаИсточникВЗН = ЗНИсточник.Автоработы.НайтиПоИдентификатору(Источник.ИдентификаторСтроки);
				
				РодительИсточника = Источник.ПолучитьРодителя();
				
				Если ТаблицаПричиныОбращений.Получить(РодительИсточника.ПричинаОбращения) = Неопределено Тогда
					ТаблицаПричиныОбращений.Вставить(РодительИсточника.ПричинаОбращения, Новый Структура);
				КонецЕсли;
				
				Если НЕ ТаблицаПричиныОбращений[РодительИсточника.ПричинаОбращения].Свойство("Автоработы") Тогда
					ТаблицаПричиныОбращений[РодительИсточника.ПричинаОбращения].Вставить("Автоработы", Новый Массив);
				КонецЕсли;
				
				ТаблицаПричиныОбращений[РодительИсточника.ПричинаОбращения].Автоработы.Добавить(СтрокаВТаблица.Авторабота);
				
			ИначеЕсли Источник.ИмяТаблицы = "ВспомогательнаяАРЗН" Тогда
				
				Если НЕ ВспомогательныеРаботы.Свойство("ВспомогательныеАвтор") Тогда
					ВспомогательныеРаботы.Вставить("ВспомогательныеАвтор", Новый Массив);
				КонецЕсли;
				
				ЗНИсточник = ЭтотОбъект[Источник.Идентификатор];
				
				// получим строку в таблице товаров
				Отбор = Новый Структура(
					"ИдентификаторОбъектаЗаказНаряд,ИдентификаторСтрокиВЗаказНаряде",
					Источник.Идентификатор,
					Источник.ИдентификаторСтроки);
				
				СтрокаВТаблица = ПодчиненныеВспомогательныеАвтоработы.НайтиСтроки(Отбор)[0];
				
				// найдем строку источник в ЗН
				СтрокаИсточникВЗН = ЗНИсточник.ВспомогательныеАвтоработы.НайтиПоИдентификатору(Источник.ИдентификаторСтроки);
				ВспомогательныеРаботы.ВспомогательныеАвтор.Добавить(СтрокаИсточникВЗН.ИдентификаторСтрокиВЗаказНаряде);
				
			ИначеЕсли Источник.ИмяТаблицы = "Материалы" Тогда
				
				Если НЕ МатериалыЗаказчика.Свойство("МатериалыЗаказчика") Тогда
					МатериалыЗаказчика.Вставить("МатериалыЗаказчика", Новый Массив);
				КонецЕсли;
				
				ЗНИсточник = ЭтотОбъект[Источник.Идентификатор];
				
				// получим строку в таблице товаров
				Отбор = Новый Структура(
					"ИдентификаторОбъектаЗаказНаряд,ИдентификаторСтрокиВЗаказНаряде",
					Источник.Идентификатор,
					Источник.ИдентификаторСтроки);
				
				СтрокаВТаблица = ПодчиненныеМатериалы.НайтиСтроки(Отбор)[0];
				
				// найдем строку источник в ЗН
				МатериалыЗаказчика.МатериалыЗаказчика.Добавить(Источник.ИдентификаторСтроки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеИсточникаЗН = Новый Структура;
	ДанныеИсточникаЗН.Вставить("ПричиныОбращения", ТаблицаПричиныОбращений);
	ДанныеИсточникаЗН.Вставить("ВспомогательныеАвтоработы", ВспомогательныеРаботы);
	ДанныеИсточникаЗН.Вставить("МатериалыЗаказчика", МатериалыЗаказчика);
	
	ПараметрыСтрок.Вставить("СтрокиПереноса", ДанныеИсточникаЗН);
	
КонецПроцедуры // ПолучитьДанныеПереносаСтрокЗН()

&НаСервере
Функция ПолучитьЗаказНарядыБлокированныеОтИзменений(СписокЗаказНарядов = Неопределено)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БлокировкаЗаказНарядов.ЗаказНаряд,
	|	БлокировкаЗаказНарядов.ДатаБлокировки,
	|	БлокировкаЗаказНарядов.ДатаСнятияБлокировки,
	|	БлокировкаЗаказНарядов.Пользователь,
	|	БлокировкаЗаказНарядов.ТекстовоеОписание
	|ИЗ
	|	РегистрСведений.БлокировкаЗаказНарядов КАК БлокировкаЗаказНарядов
	|ГДЕ
	|	БлокировкаЗаказНарядов.ЗаказНаряд.СводныйРемонтныйЗаказ = &СводныйРемонтныйЗаказ";
	
	Если НЕ СписокЗаказНарядов = Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И БлокировкаЗаказНарядов.ЗаказНаряд.Ссылка В (&СписокЗаказНарядов)";
		Запрос.УстановитьПараметр("СписокЗаказНарядов", СписокЗаказНарядов);
	КонецЕсли;
	Запрос.УстановитьПараметр("СводныйРемонтныйЗаказ", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьЗаказНарядыБлокированныеОтИзменений()

&НаКлиенте
Процедура ОткрытьФормуРедактированияИсполнителей()
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "РаспределениеИсполнителейПоСводномуРемонтномуЗаказу");
	ПараметрыОткрытия  = Новый Структура("ЗаблокироватьСводныйРемонтныйЗаказ,СводныйРемонтныйЗаказ", Истина, Объект.Ссылка);
	ОткрытьФорму("Обработка.РаспределениеИсполнителейПоСводномуРемонтномуЗаказу.Форма", ПараметрыОткрытия, ЭтотОбъект, ЭтотОбъект,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервере
Процедура ОбновлениеДанныхАвтомобиля()
	
	Элементы.АвтомобильРасширеннаяПодсказка.Заголовок = Справочники.Автомобили.СформироватьИнформациюАвтомобиля(Объект);
	Элементы.РекомендацииАвтомобиля.Видимость = ЗначениеЗаполнено(Объект.Автомобиль) И РегистрыСведений.РекомендацииПоАвтомобилю.ПроверкаЗапланированныхРекомендацийАвтомобиля(Объект.Автомобиль);
	
КонецПроцедуры // ОбновлениеДанныхАвтомобиля()

&НаСервере
Функция ПроверитьПеретаскиваниеАвторабот(ВыбранныеАвтоработы)
	
	Возврат Автосервис.ПроверитьПеретаскиваниеАвторабот(
		ВыбранныеАвтоработы,
		ДеревоСводногоРемонтногоЗаказа,
		ПодчиненныеАвтоработы,
		ПодчиненныеЗаказНаряды.Выгрузить());
	
КонецФункции // ПроверитьПеретаскиваниеАвторабот()

&НаСервере
Функция ПолучитьЗаказыДляТовара(ЗНСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателя.Ссылка КАК ЗаказПокупателя
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.ДокументОснование = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказНаряд.ДокументОснование
	               |ИЗ
	               |	Документ.ЗаказНаряд КАК ЗаказНаряд
	               |ГДЕ
	               |	ЗаказНаряд.Ссылка = &Ссылка
	               |	И НЕ (ВЫРАЗИТЬ(ЗаказНаряд.ДокументОснование КАК Документ.ЗаказПокупателя)) = NULL";
	Запрос.УстановитьПараметр("Ссылка", ЗНСсылка);
	ТЗЗаказПокупателя = Запрос.Выполнить().Выгрузить();
	СписокЗаказПокупателя = Новый СписокЗначений;
	СписокЗаказПокупателя.ЗагрузитьЗначения(ТЗЗаказПокупателя.ВыгрузитьКолонку("ЗаказПокупателя"));
	
	Возврат СписокЗаказПокупателя;
	
КонецФункции

&НаСервере
Процедура ИзменитьПлательщикаДляЗаказНарядов(СтруктураИзмененияЗН)
	
	ПерерасчетСуммовыхПоказателей = ПолучитьЗначениеПараметраСтруктуры(
		СтруктураИзмененияЗН, "ПересчетСуммовыхПоказателей", Ложь
	);
	
	Для Каждого ЗаказНарядИзСписка Из СтруктураИзмененияЗН.СписокЗаказНарядов Цикл
		ПараметрыОтбора = Новый Структура("ЗаказНарядСсылка", ЗаказНарядИзСписка.Значение);
		ЗаказНарядДляПересчета = ПодчиненныеЗаказНаряды.НайтиСтроки(ПараметрыОтбора);
		ЗаказНаряд = ЭтотОбъект[ЗаказНарядДляПересчета[0].ИдентификаторОбъектаЗаказНаряд];
		
		ПараметрыДействия = Новый Структура;
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ЗаказНаряд.Ссылка);
		МенеджерДокумента.ПолучитьПараметрыДействия(ЗаказНаряд, ПараметрыДействия);
		
		ЗаказНаряд.Контрагент = Объект.Заказчик;
		МенеджерДокумента.КонтрагентПриИзменении(ЗаказНаряд, ПараметрыДействия);
		
		Если ПерерасчетСуммовыхПоказателей Тогда
			МенеджерДокумента.ОбработкаПересчетаПоказателейОбъекта(ЗаказНаряд, ПараметрыДействия);
		КонецЕсли;
		
		ЗаказНарядДляПересчета[0].Модифицированность = Истина;
		
	КонецЦикла;
	
	ОбновитьДанныеПодчиненныхТаблиц();
	ОбновитьТаблицуСводногоРемонтногоЗаказа();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦеныДляЗаказНарядов(СписокЗаказНарядовДляПересчета)
	
	Для Каждого ЗаказНарядИзСписка Из СписокЗаказНарядовДляПересчета Цикл
		ПараметрыОтбора = Новый Структура("ЗаказНарядСсылка", ЗаказНарядИзСписка.Значение);
		ЗаказНарядДляПересчета = ПодчиненныеЗаказНаряды.НайтиСтроки(ПараметрыОтбора);
		ЗаказНаряд = ЭтотОбъект[ЗаказНарядДляПересчета[0].ИдентификаторОбъектаЗаказНаряд];
		
		ПараметрыДействия = Новый Структура;
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ЗаказНаряд.Ссылка);
		МенеджерДокумента.ПолучитьПараметрыДействия(ЗаказНаряд, ПараметрыДействия);
		ПараметрыДействия.Вставить("ТребуетсяУстановкаЦенРабот", Истина);
		ПараметрыДействия.Вставить("Автомобиль", Объект.Автомобиль);
		
		МенеджерДокумента.ОбработкаПересчетаПоказателейОбъекта(ЗаказНаряд, ПараметрыДействия);
		
		ЗаказНарядДляПересчета[0].Модифицированность = Истина;
		
	КонецЦикла;
	
	ОбновитьДанныеПодчиненныхТаблиц();
	ОбновитьТаблицуСводногоРемонтногоЗаказа();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодменюАнкетирования()
	
	Если ЕстьРеквизит(ЭтотОбъект,"РеспондентОпроса") Тогда
		ЭтотОбъект.РеспондентОпроса = Объект.Заказчик;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандыПечатиЗаказНаряда()
	
	// Добавим настройки печати комплекта
	ЗащищенныеФункцииСервер.ДобавитьГруппуКоманд(
		ЭтотОбъект,
		"ПодменюПараметрыПечатиЗаказНаряда",
		Элементы.ПодменюПечатиЗаказНарядов.Имя,
		Ложь,
		"НастройкиЗаказНаряда",
		Новый Картинка
	);
	
	ОписаниеКомандыФормы = ЗащищенныеФункцииСервер.СоздатьОписаниеКомандыФормы();
	ОписаниеКомандыФормы.ИмяКоманды            = "НастройкаКомплектаЗаказНаряда";
	ОписаниеКомандыФормы.ИмяГруппы             = "ПодменюПараметрыПечатиЗаказНаряда";
	ОписаниеКомандыФормы.Заголовок             = НСтр("ru='Настройка комплекта печати заказ-наряда'");
	ОписаниеКомандыФормы.Подсказка             = НСтр("ru='Настройка комплекта печати заказ-наряда'");
	ОписаниеКомандыФормы.ТолькоВоВсехДействиях = Ложь;
	ОписаниеКомандыФормы.Суффикс               = "ЗаказНаряда";
	ЗащищенныеФункцииСервер.ДобавитьКомандуФормы(ЭтотОбъект, ОписаниеКомандыФормы);
	
	Документы.СводныйРемонтныйЗаказ.ДобавитьКомандыПечатиКомплектаЗаказНаряда(
		ЭтотОбъект,
		СписокЗначенийПечатьКомплектаЗН,
		Элементы.ПодменюПечатиЗаказНарядов
	);
	
КонецПроцедуры

&НаСервере
Процедура НастройкаПараметровВыбораСервиснойКампании()
	
	ТаблицаСервисныхКампаний = АвтомобилиСервер.ПроверитьСервиснуюКампанию(
			Объект.Автомобиль,
			Объект.Дата,
			Истина,
			Объект.Ссылка);
	
	СервисныеКампании = ТаблицаСервисныхКампаний.ВыгрузитьКолонку("СервиснаяКампания");
	
	АвтомобилиСервер.ОбновитьСостояниеСервиснойКомпании(
		СервисныеКампании.Количество() > 0,
		Элементы.СервиснаяКампания,
		Элементы.СостояниеСервиснойКомпании
	);
	
	Элементы.Автомобиль.МаксимальнаяШирина = ?(Элементы.СостояниеСервиснойКомпании.Видимость, 33, 35);
	
	СтруктураПоиска = Новый Структура(
			"ДатаВыполнения, ДокументВыполнения",
			Дата(1, 1, 1), Документы.ЗаказНаряд.ПустаяСсылка());
	ЕстьНевыполненныеСервисныеКампании = (ТаблицаСервисныхКампаний.НайтиСтроки(СтруктураПоиска).Количество() > 0);
	
КонецПроцедуры

&НаКлиенте
Функция НеобходимоУказатьПлательщика()
	
	УсловиеПоиска = Новый Структура("ТипРемонта", ПредопределенноеЗначение("Перечисление.ТипыРемонта.Платный"));
	СтрокиСПлатнымиТипамиРемонта = ПодчиненныеЗаказНаряды.НайтиСтроки(УсловиеПоиска);
	
	Возврат (НЕ Объект.Ссылка.Пустая()
		И НЕ Объект.Заказчик.Пустая()
		И СтрокиСПлатнымиТипамиРемонта.Количество() <> 0);
	
КонецФункции

&НаСервере
Функция БылиМодифицированыЗаблокированныеЗаказНаряды()
	
	ЕстьЗаблокированные = Ложь;
	МодифицированныеЗаказНаряды = Новый Массив;
	
	Для Каждого ЗаказНаряд Из ПодчиненныеЗаказНаряды Цикл
		Если ЗаказНаряд.Модифицированность И НЕ ЗаказНаряд.ЗаказНарядСсылка.Пустая() Тогда
			МодифицированныеЗаказНаряды.Добавить(ЗаказНаряд.ЗаказНарядСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МодифицированныеЗаказНаряды.Количество() > 0 Тогда
		БлокированныеЗаказНаряды = ПолучитьЗаказНарядыБлокированныеОтИзменений(МодифицированныеЗаказНаряды);
		
		Если БлокированныеЗаказНаряды.Количество() > 0 Тогда
			ЕстьЗаблокированные = Истина;
			
			Для Каждого ТекущаяСтрока Из БлокированныеЗаказНаряды Цикл
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Документ ""%1"" блокирован от изменений пользователем ""%2"".'"),
						ТекущаяСтрока.ЗаказНаряд,
						ТекущаяСтрока.Пользователь
					),
					ТекущаяСтрока.ЗаказНаряд
				);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьЗаблокированные;
	
КонецФункции

&НаСервере
Функция ОбновитьПробег(ДатаСводногоРемонтногоЗаказа)
	
	Отказ = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Автомобиль) И НЕ Объект.Автомобиль.Пустая() И ЗначениеЗаполнено(Объект.Пробег) Тогда
		Отказ = Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(
			Объект.Автомобиль,
			Объект.Пробег,
			Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег,
			ДатаСводногоРемонтногоЗаказа,
			Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.ПриемкаАвтомобиляВРемонт);
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаСервере
Функция ЗаписатьПодчиненныеЗаказНаряды(СсылкаСРЗ, ПараметрыЗаписи)
	
	СозданныеЗаказНаряды  = Новый Структура;
	Отказ = Ложь;
	
	Для Каждого ЗаказНаряд Из ПодчиненныеЗаказНаряды Цикл
		Если ЗаказНаряд.ЗаказНарядСсылка.Пустая() ИЛИ ЗаказНаряд.Модифицированность Тогда
			СозданныеЗаказНаряды.Вставить(ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд, Неопределено);
			
			Отказ = Отказ
				ИЛИ НЕ ЗаказНарядПровестиНаСервере(
					ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд,
					СозданныеЗаказНаряды[ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд],
					СсылкаСРЗ);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		Для Каждого СозданныйЗН Из СозданныеЗаказНаряды Цикл
			СтрокаЗаказНаряда = ПолучитьСтрокуЗаказНаряда(СозданныйЗН.Ключ);
			
			Если НЕ СтрокаЗаказНаряда = Неопределено Тогда
				СтрокаЗаказНаряда.ЗаказНарядСсылка   = СозданныйЗН.Значение.Ссылка;
				СтрокаЗаказНаряда.Модифицированность = Ложь;
				СтрокаЗаказНаряда.Представление = СтрШаблон(
					НСтр("ru = 'Заказ-наряд №%1 от %2, [%3]'"),
					СозданныйЗН.Значение.Номер,
					СозданныйЗН.Значение.Дата,
					СозданныйЗН.Значение.Состояние);
			КонецЕсли;
			
			ЗначениеВДанныеФормы(СозданныйЗН.Значение, ЭтотОбъект[СозданныйЗН.Ключ]);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаСервере
Процедура УстановитьДополнительныеПараметрыДокумента(ОбъектЗаказНаряд, ИдентификаторЗаказНаряда)
	
	// Заполним таблицу состава причин обращения
	Условие = Новый Структура("ИдентификаторОбъектаЗаказНаряд", ИдентификаторЗаказНаряда);
	ВыгружаемыеСтроки = ПодчиненныеАвтоработы.НайтиСтроки(Условие);
	
	ВыгружаемыеКолонки = Новый Массив;
	ВыгружаемыеКолонки.Добавить("ИдентификаторПричиныОбращения");
	ВыгружаемыеКолонки.Добавить("ИдентификаторАвтоработы");
	
	СоставПричинОбращения = ПодчиненныеАвтоработы.Выгрузить(ВыгружаемыеСтроки, СтрСоединить(ВыгружаемыеКолонки, ","));
	СоставПричинОбращения.Колонки.ИдентификаторАвтоработы.Имя = "Авторабота";
	СоставПричинОбращения.Колонки.ИдентификаторПричиныОбращения.Имя = "ПричинаОбращения";
	
	ОбъектЗаказНаряд.ДополнительныеСвойства.Вставить("СоставПричинОбращения", СоставПричинОбращения);
	ПакетыРабот = ПакетРаботЗаказНаряда(ОбъектЗаказНаряд);
	ОбъектЗаказНаряд.ДополнительныеСвойства.Вставить("ПакетыРабот", ПакетыРабот);
	
	// признак нового документа
	ОбъектЗаказНаряд.ДополнительныеСвойства.Вставить("ЭтоНовый", ОбъектЗаказНаряд.Ссылка.Пустая());
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаказНарядВопрос()
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Для продолжения операции сводный ремонтный заказ и заказ-наряды должны быть записаны. Записать?'");
		Обработчик = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ОткрытьЗаказНаряд");
		
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		Подключаемый_ОбработкаРезультатаОповещения(null, "ОткрытьЗаказНаряд");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПлательщикаЗаказНарядов()
	
	// Выполним изменения плательщика в заказ-нарядах
	Если НеобходимоУказатьПлательщика() Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("СводныйРемонтныйЗаказ", Объект.Ссылка);
		ПараметрыФормы.Вставить("Заказчик",              Объект.Заказчик);
		ПараметрыФормы.Вставить("Событие",               "ИзменениеПлательщикаВЗаказНарядах");
		
		СписокЗН = Новый Соответствие;
		
		Для Каждого ТекущийЗаказНаряд Из ПодчиненныеЗаказНаряды Цикл
			
			ЗаказНаряд = ЭтотОбъект[ТекущийЗаказНаряд.ИдентификаторОбъектаЗаказНаряд];
			
			СписокЗН.Вставить(ЗаказНаряд.Ссылка, ЗаказНаряд.Контрагент);
			
		КонецЦикла;
		
		ПараметрыФормы.Вставить("ТекущиеПлательщикиЗН", СписокЗН);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			ЭтотОбъект,
			ПараметрыФормы);
		
		ОткрытьФорму(
			"Документ.СводныйРемонтныйЗаказ.Форма.ФормаЗаполненияПлательщика",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРекомендацииЗаказНарядов(ДополнительныеПараметры)
	
	// Заполним рекомендации для ЗН по документу основанию
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ЭтоНовыйОбъект", Ложь)
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРемонт")
		И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		Для Каждого ЗаказНаряд Из ПодчиненныеЗаказНаряды Цикл
			
			ЗаказНарядОбъект = ЗаказНаряд.ЗаказНарядСсылка.ПолучитьОбъект();
			
			ПодборРекомендаций = Обработки.ПодборРекомендаций.Создать();
			ПодборРекомендаций.Автомобиль            = Объект.Автомобиль;
			ПодборРекомендаций.ТипЦен                = ЗаказНарядОбъект.ТипЦен;
			ПодборРекомендаций.ТипЦенАвторабот       = ЗаказНарядОбъект.ТипЦенРабот;
			ПодборРекомендаций.Дата                  = ЗаказНарядОбъект.Дата;
			ПодборРекомендаций.Контрагент            = ЗаказНарядОбъект.Контрагент;
			ПодборРекомендаций.ДоговорВзаиморасчетов = ЗаказНарядОбъект.ДоговорВзаиморасчетов;
			ПодборРекомендаций.Цех                   = ЗаказНарядОбъект.Цех;
			ПодборРекомендаций.ВидРемонта            = ЗаказНарядОбъект.ВидРемонта;
			ПодборРекомендаций.ЗаполнитьРекомендации();
			
			Для Каждого Строка Из ПодборРекомендаций.Рекомендации Цикл
				Если Строка.ЗаявкаНаРемонт = Объект.ДокументОснование И НЕ ЗначениеЗаполнено(Строка.ЗаказНаряд) Тогда
					Строка.ЗаказНаряд = ЗаказНаряд.ЗаказНарядСсылка;
				КонецЕсли;
			КонецЦикла;
			
			Обработки.ПодборРекомендаций.ЗаписатьРекомендации(ПодборРекомендаций);
			Обработки.ПодборРекомендаций.ПроверитьВыполнениеРекомендаций(ПодборРекомендаций, ЗаказНаряд.ЗаказНарядСсылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьЗакрытыеЗаказНаряды(Форма)
	
	Отбор = Новый Структура(
		"СостояниеЗаказНаряда",
		ПредопределенноеЗначение("Справочник.ВидыСостоянийЗаказНарядов.Закрыт"));
	Возврат Форма.ПодчиненныеЗаказНаряды.НайтиСтроки(Отбор).Количество() > 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьНовыеЗаказНаряды(Форма)
	
	Отбор = Новый Структура(
		"ЗаказНарядСсылка",
		ПредопределенноеЗначение("Документ.ЗаказНаряд.ПустаяСсылка"));
	Возврат Форма.ПодчиненныеЗаказНаряды.НайтиСтроки(Отбор).Количество() > 0;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьОткрытыеЗаказНаряды(СРЗ)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЗаказНаряд.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказНаряд КАК ЗаказНаряд
	|ГДЕ
	|	ЗаказНаряд.Состояние <> ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.Закрыт)
	|	И ЗаказНаряд.СводныйРемонтныйЗаказ = &СводныйРемонтныйЗаказ");
	Запрос.УстановитьПараметр("СводныйРемонтныйЗаказ", СРЗ);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

#Область РаботаСДопТаблицами

&НаСервере
Функция ОбновитьТаблицуПодчиненныхЗаказНарядовНаСервере(ОбновляемыйЗаказНарядСтруктура = Неопределено)
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// заполним старыми реквизитам заказ-нарядов
	КопияПодчиненныеЗаказНаряды = ПодчиненныеЗаказНаряды.Выгрузить().Скопировать();
	
	// Запомним ссылку на Заказ-наряд, который нужно обновить
	Если ЗначениеЗаполнено(ОбновляемыйЗаказНарядСтруктура) Тогда
		ОбновляемыйЗаказНаряд = ОбновляемыйЗаказНарядСтруктура.ИдентификаторЗН;
		НайденныйЗаказНарядСсылка = КопияПодчиненныеЗаказНаряды.НайтиСтроки(Новый Структура("ИдентификаторОбъектаЗаказНаряд", ОбновляемыйЗаказНаряд));
		Если НайденныйЗаказНарядСсылка.Количество() > 0 Тогда
			НайденныйЗаказНарядСсылка = НайденныйЗаказНарядСсылка[0].ЗаказНарядСсылка;
		КонецЕсли;
		Если ТипЗнч(НайденныйЗаказНарядСсылка) <> Тип("ДокументСсылка.ЗаказНаряд") ИЛИ НЕ ЗначениеЗаполнено(НайденныйЗаказНарядСсылка) Тогда
			НайденныйЗаказНарядСсылка = ОбновляемыйЗаказНарядСтруктура.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	КопияПодчиненныеЗаказНаряды.Свернуть("ИдентификаторОбъектаЗаказНаряд");
	
	УдаляемыеРеквизитыФормы = КопияПодчиненныеЗаказНаряды.ВыгрузитьКолонку("ИдентификаторОбъектаЗаказНаряд");
	
	КопияПодчиненныеЗаказНаряды = ПодчиненныеЗаказНаряды.Выгрузить().Скопировать();
	
	ПодчиненныеЗаказНаряды.Очистить(); ДобавляемыеРеквизитыФормы = Новый Массив;
	
	// получим подчиненные заказ-наряды
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказНаряд.Ссылка                КАК ЗаказНарядСсылка,
		|	ЗаказНаряд.Номер                 КАК НомерДокумента,
		|	ЗаказНаряд.Дата                  КАК ДатаДокумента,
		|	ЗаказНаряд.Состояние             КАК СостояниеЗаказНаряда,
		|	ЗаказНаряд.КурсДокумента         КАК КурсДокументаЗаказНаряд,
		|	ЗаказНаряд.ВалютаДокумента       КАК ВалютаДокументаЗаказНаряд,
		|	ЗаказНаряд.ВидРемонта.ТипРемонта КАК ТипРемонта
		|ИЗ
		|	Документ.ЗаказНаряд КАК ЗаказНаряд
		|ГДЕ
		|	ЗаказНаряд.СводныйРемонтныйЗаказ = &СводныйРемонтныйЗаказ";
	
	Запрос.УстановитьПараметр("СводныйРемонтныйЗаказ", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	// заполним тч заказ-нарядов
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ТаблицаБлокированныхЗаказНарядов = ПолучитьЗаказНарядыБлокированныеОтИзменений();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ПодчиненныеЗаказНаряды.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			Если ТаблицаБлокированныхЗаказНарядов.НайтиСтроки(Новый Структура("ЗаказНаряд", Выборка.ЗаказНарядСсылка)).Количество() > 0 Тогда
				НоваяСтрока.ПризнакБлокировки = Истина;
			КонецЕсли;
			
			НоваяСтрока.СуммаДокументаЗаказНаряд = Документы.ЗаказНаряд.РассчитатьИтогиОперации(Выборка.ЗаказНарядСсылка).СуммаДокумента;
			
			НоваяСтрока.Представление = "Заказ-наряд №"+Выборка.НомерДокумента+" от "+Выборка.ДатаДокумента+", ["+Выборка.СостояниеЗаказНаряда+"]";
			
			// Запомним новый ИдентификаторОбъектаЗаказНаряда для обновляемого заказ-наряда.
			Если ЗначениеЗаполнено(ОбновляемыйЗаказНарядСтруктура) Тогда
				Если НоваяСтрока.ЗаказНарядСсылка = НайденныйЗаказНарядСсылка Тогда
					// Установим новый идентификатор для обновляемого заказ-наряда.
					НоваяСтрока.ИдентификаторОбъектаЗаказНаряд = "ZN" + СтрЗаменить(Новый УникальныйИдентификатор(), "-", "");
					ОбновляемыйЗаказНаряд = НоваяСтрока.ИдентификаторОбъектаЗаказНаряд;
				Иначе
					// Найдем старые идентификаторы для не обновляемых заказ-нарядов.
					НайденныйЗаказНаряд = КопияПодчиненныеЗаказНаряды.НайтиСтроки(Новый Структура("ЗаказНарядСсылка", НоваяСтрока.ЗаказНарядСсылка));
					Если НайденныйЗаказНаряд.Количество() > 0 Тогда
						НоваяСтрока.ИдентификаторОбъектаЗаказНаряд = НайденныйЗаказНаряд[0].ИдентификаторОбъектаЗаказНаряд;
						НоваяСтрока.Модифицированность = НайденныйЗаказНаряд[0].Модифицированность;
					Иначе
						НоваяСтрока.ИдентификаторОбъектаЗаказНаряд = "ZN" + СтрЗаменить(Новый УникальныйИдентификатор(), "-", "");
					КонецЕсли;
				КонецЕсли;
			Иначе
				НоваяСтрока.ИдентификаторОбъектаЗаказНаряд = "ZN" + СтрЗаменить(Новый УникальныйИдентификатор(), "-", "");
			КонецЕсли;
			
			ДобавляемыеРеквизитыФормы.Добавить(Новый РеквизитФормы(НоваяСтрока.ИдентификаторОбъектаЗаказНаряд, Новый ОписаниеТипов("ДокументОбъект.ЗаказНаряд")));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если (ДобавляемыеРеквизитыФормы.Количество() + УдаляемыеРеквизитыФормы.Количество()) > 0 Тогда
		// обновим реквизиты
		ИзменитьРеквизиты(ДобавляемыеРеквизитыФормы, УдаляемыеРеквизитыФормы);
		
		Если ДобавляемыеРеквизитыФормы.Количество() > 0 Тогда
			Для Каждого ЗаказНаряд Из ПодчиненныеЗаказНаряды Цикл
				ЗначениеВДанныеФормы(ЗаказНаряд.ЗаказНарядСсылка.ПолучитьОбъект(), ЭтотОбъект[ЗаказНаряд.ИдентификаторОбъектаЗаказНаряд]);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(ОбновляемыйЗаказНаряд), ОбновляемыйЗаказНаряд, Неопределено);
	
КонецФункции

&НаСервере
Функция ПолучитьСтрокуЗаказНаряда(ИдентификаторЗаказНаряда)
	
	СтрокаЗаказНаряда = Неопределено;
	
	НайденныеСтроки = ПодчиненныеЗаказНаряды.НайтиСтроки(
		Новый Структура("ИдентификаторОбъектаЗаказНаряд", ИдентификаторЗаказНаряда));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		СтрокаЗаказНаряда = НайденныеСтроки[0];
		
	КонецЕсли;
	
	Возврат СтрокаЗаказНаряда;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеПодчиненныхТаблиц()
	
	ПодчиненныеТаблицы = Новый Структура;
	ПодчиненныеТаблицы.Вставить("ПодчиненныеАвтоработы",                ПодчиненныеАвтоработы);
	ПодчиненныеТаблицы.Вставить("ПодчиненныеТовары",                    ПодчиненныеТовары);
	ПодчиненныеТаблицы.Вставить("ПодчиненныеМатериалы",                 ПодчиненныеМатериалы);
	ПодчиненныеТаблицы.Вставить("ПодчиненныеПричиныОбращений",          ПодчиненныеПричиныОбращений);
	ПодчиненныеТаблицы.Вставить("ПодчиненныеВспомогательныеАвтоработы", ПодчиненныеВспомогательныеАвтоработы);
	ПодчиненныеТаблицы.Вставить("ПодчиненныеЗаказНаряды",               ПодчиненныеЗаказНаряды);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Основание", ПолучитьЗначениеПараметраСтруктуры(Параметры, "Основание"));
	ДополнительныеПараметры.Вставить("ДокументОснование", Объект.ДокументОснование);
	
	Автосервис.ОбновитьДанныеПодчиненныхТаблиц(ЭтотОбъект, ПодчиненныеТаблицы, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСЗаказНарядами

&НаСервере
Процедура ДобавитьЗаказНаряд(ДанныеЗаполнения = Неопределено, ПричиныОбращения = Неопределено, ЭтоПервый = Истина)
	
	ИдентификаторОбъектаЗаказНаряд = "ZN" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	
	ДобавляемыеРеквизиты = Новый Массив();
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИдентификаторОбъектаЗаказНаряд, Новый ОписаниеТипов("ДокументОбъект.ЗаказНаряд")));
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	НовыйЗаказНаряд = Документы.ЗаказНаряд.СоздатьДокумент();
	НовыйЗаказНаряд.ДополнительныеСвойства.Вставить("Заказчик", Объект.Заказчик);
	НовыйЗаказНаряд.ДополнительныеСвойства.Вставить("Плательщик", Плательщик);
	НовыйЗаказНаряд.ДополнительныеСвойства.Вставить("Автомобиль", Объект.Автомобиль);
	НовыйЗаказНаряд.ДополнительныеСвойства.Вставить("ПричиныОбращения", ПричиныОбращения);
	НовыйЗаказНаряд.ДополнительныеСвойства.Вставить("ЭтоПервый", ЭтоПервый);
	НовыйЗаказНаряд.ДополнительныеСвойства.Вставить("СРЗ", Объект.Ссылка);
	НовыйЗаказНаряд.ДополнительныеСвойства.Вставить("ВводБезПричиныОбращения", ВводБезПричиныОбращения);
	НовыйЗаказНаряд.Заполнить(ДанныеЗаполнения);
	ПересчетЦенЗаказНаряда(НовыйЗаказНаряд);
	ЗначениеВДанныеФормы(НовыйЗаказНаряд, ЭтотОбъект[ИдентификаторОбъектаЗаказНаряд]);
	ТаблицаЗаказНарядов = ДеревоСводногоРемонтногоЗаказа.ПолучитьЭлементы();
	СтрокаЗаказНаряда = ПодчиненныеЗаказНаряды.Добавить();
	СтрокаЗаказНаряда.ИдентификаторОбъектаЗаказНаряд = ИдентификаторОбъектаЗаказНаряд;
	СтрокаЗаказНаряда.СостояниеЗаказНаряда = НовыйЗаказНаряд.Состояние;
	СтрокаЗаказНаряда.Представление = Строка("Заказ-наряд № " + СокрЛП(НовыйЗаказНаряд.Номер) + " от " + Формат(НовыйЗаказНаряд.Дата, "Л=ru; ДЛФ=D")) + ", [" + Строка(НовыйЗаказНаряд.Состояние) + "]";
	СтрокаЗаказНаряда.ВалютаДокументаЗаказНаряд = НовыйЗаказНаряд.ВалютаДокумента;
	СтрокаЗаказНаряда.КурсДокументаЗаказНаряд = НовыйЗаказНаряд.КурсДокумента;
	СтрокаЗаказНаряда.СуммаДокументаЗаказНаряд = Документы.ЗаказНаряд.РассчитатьИтогиОперации(НовыйЗаказНаряд).СуммаДокумента;
	
	ЭтоПервый = Ложь;
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	НеобходимоПерезаполнитьЗаказчика  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеобходимоПерезаполнитьЗаказчика",  Ложь);
	НеобходимоПерезаполнитьАвтомобиль = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеобходимоПерезаполнитьАвтомобиль", Ложь);
	
	Если НеобходимоПерезаполнитьЗаказчика Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ПараметрыДействия),
			СтрШаблон("Владелец автомобиля <%1> = <%2>.
			|Выбран заказчиком <%3>. Установить заказчиком <%2>?", Объект.Автомобиль, ПараметрыДействия.ВладелецАвтомобиля, Объект.Заказчик),
			РежимДиалогаВопрос.ДаНет);
		
		Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Элемент") = Неопределено Тогда
			ПараметрыДействия.Удалить("Элемент");
		КонецЕсли;
		
	КонецЕсли;
	
	Если НеобходимоПерезаполнитьАвтомобиль Тогда
		Обработчик = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ПараметрыДействия);
		
		Если ЗначениеЗаполнено(ПараметрыДействия.ВладелецАвтомобиля) Тогда
			ТекстВопроса = НСтр("ru = 'Владелец автомобиля <%1> = <%2>.
				|Выбран заказчиком <%3>. Очистить поле ""Автомобиль""?'");
			
			ТекстВопроса = СтрШаблон(ТекстВопроса, Объект.Автомобиль, ПараметрыДействия.ВладелецАвтомобиля, Объект.Заказчик);
		Иначе
			ТекстВопроса = НСтр("ru = 'Владелец автомобиля <%1> не указан.
				|Выбран заказчиком <%2>. Очистить поле ""Автомобиль""?'");
			
			ТекстВопроса = СтрШаблон(ТекстВопроса, Объект.Автомобиль, Объект.Заказчик);
		КонецЕсли;
		
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Изменение заказчика'"));
		
		Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Элемент") = Неопределено Тогда
			ПараметрыДействия.Удалить("Элемент");
		КонецЕсли;
		
	КонецЕсли;
	
	// Вызываем общий обработчик результата выполнения действия
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаРезультатаВыполненияДействия()

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие") = "ЗавершениеПеремещения" Тогда
		
		ОбновитьОбращенияНаСервере(Неопределено);
		ОбновитьТаблицуСводногоРемонтногоЗаказа();
		
		// разворачиваем дерево
		ОбщегоНазначенияАвтосалонКлиент.РазвернутьДерево(ЭтотОбъект, "ДеревоСводногоРемонтногоЗаказа", Истина);
		Возврат;
		
	КонецЕсли;
	
	// Вызываем общий обработчик события в контексте клиента
	Если НЕ УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОповещения = КодВозвратаДиалога.Отмена Тогда
		
		Возврат;
		
	ИначеЕсли ДополнительныеПараметры = "ВопросЗаписиДокумента" Тогда
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			Попытка
				Записать();
			Исключение
				Возврат;
			КонецПопытки;
		Иначе
			Возврат;
		КонецЕсли;
	ИначеЕсли ДополнительныеПараметры = "Вопрос_РедактироватьИсполнителей" Тогда
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			Попытка
				ЭтотОбъект.Записать();
				Если НЕ Модифицированность Тогда
					ОткрытьФормуРедактированияИсполнителей();
				КонецЕсли;
			Исключение КонецПопытки;
		КонецЕсли;
	ИначеЕсли ДополнительныеПараметры = "РаспределениеИсполнителейПоСводномуРемонтномуЗаказу" И РезультатОповещения <> Неопределено Тогда
		
		Модифицированность = РезультатОповещения;
		
		Если РезультатОповещения Тогда
			
			ОбновитьОбращения(Неопределено);
			
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "ДобавитьЗаказНаряд" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			
			Если НЕ СводныйРемонтныйЗаказЗаписатьНаСервере() Тогда
				
				// Если не удалось записать, то возвращаемся назад
				Элементы.СтраницыСводногоРемонтногоЗаказа.ТекущаяСтраница = Элементы.ОписаниеСводногоРемонтногоЗаказа;
				Возврат;
				
			КонецЕсли;
			
			ДобавитьЗаказНаряд();
			
		Иначе
			
			Элементы.СтраницыСводногоРемонтногоЗаказа.ТекущаяСтраница = Элементы.ОписаниеСводногоРемонтногоЗаказа;
			
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "ОткрытьЗаказНаряд" Тогда
		
		ТекущиеДанные = Элементы.ДеревоСводногоРемонтногоЗаказа.ТекущиеДанные;
		ДанныеВыбранногоЗН = Неопределено;
		
		Если ТекущиеДанные <> Неопределено Тогда
		
			ДанныеВыбранногоЗН = Новый Структура;
			ДанныеВыбранногоЗН.Вставить("ИдентификаторЗН", ТекущиеДанные.Идентификатор);
			ДанныеВыбранногоЗН.Вставить("ИмяТаблицы", ТекущиеДанные.ИмяТаблицы);
			ДанныеВыбранногоЗН.Вставить("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки);
			
		КонецЕсли;
		
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			
			Если НЕ СводныйРемонтныйЗаказЗаписатьНаСервере() Тогда
				
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли РезультатОповещения = КодВозвратаДиалога.Нет Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Если ДанныеВыбранногоЗН = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ДанныеВыбранногоЗН.Вставить("Ключ", ЭтотОбъект[ДанныеВыбранногоЗН.ИдентификаторЗН].Ссылка);
		ОткрытьФорму("Документ.ЗаказНаряд.ФормаОбъекта", ДанныеВыбранногоЗН, ЭтотОбъект);
		
	ИначеЕсли (ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие", "") = "БлокировкаИзмененийЗаказНаряда") Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			СводныйРемонтныйЗаказЗаписатьНаСервере();
			Для Каждого СтрокаЗН Из ДеревоСводногоРемонтногоЗаказа.ПолучитьЭлементы() Цикл
				Элементы.ДеревоСводногоРемонтногоЗаказа.Развернуть(СтрокаЗН.ПолучитьИдентификатор(), Истина);
			КонецЦикла;
		ИначеЕсли РезультатОповещения = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		ИдентификаторЗаказНаряда = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ИдентификаторЗаказНаряда", Элементы.ДеревоСводногоРемонтногоЗаказа.ТекущиеДанные);
		Если ИдентификаторЗаказНаряда = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущийЗаказНаряд = ЭтотОбъект[ИдентификаторЗаказНаряда];
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЗаказНаряд", ТекущийЗаказНаряд.Ссылка);
		
		ОбработкаОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ОбновитьОбращения");
		
		ОткрытьФорму("РегистрСведений.БлокировкаЗаказНарядов.Форма.ФормаБлокировкиИзменений", СтруктураПараметров, ЭтотОбъект,,,, ОбработкаОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ДополнительныеПараметры = "ОбновитьОбращения" Тогда
		
		ОбновитьОбращения(Неопределено);
		
	ИначеЕсли ДополнительныеПараметры = "ОбновитьВсеОбращения" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			ОбновитьОбращения(Неопределено);
		КонецЕсли;
		Возврат;
		
	ИначеЕсли (ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие", "") = "ИзменениеПлательщикаВЗаказНарядах") Тогда
		
		ИзменитьПлательщикаДляЗаказНарядов(РезультатОповещения);
		ОбщегоНазначенияАвтосалонКлиент.РазвернутьДерево(ЭтотОбъект, "ДеревоСводногоРемонтногоЗаказа", Истина);
		
	ИначеЕсли (ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие", "") = "ПересчетЦенПриИзмененииАвтомобиля") Тогда
		
		ПересчитатьЦеныДляЗаказНарядов(РезультатОповещения);
		ОбщегоНазначенияАвтосалонКлиент.РазвернутьДерево(ЭтотОбъект, "ДеревоСводногоРемонтногоЗаказа", Истина);
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "НеобходимоПерезаполнитьЗаказчика", Ложь) Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			АвтомобильПриИзмененииНаСервере(ДополнительныеПараметры);
			ПерезаполнитьПлательщикаЗаказНарядов();
		КонецЕсли;
		Возврат;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "НеобходимоПерезаполнитьАвтомобиль", Ложь) Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			Объект.Автомобиль = ПредопределенноеЗначение("Справочник.Автомобили.ПустаяСсылка");
			ЗаказчикПриИзмененииНаСервере(ДополнительныеПараметры);
			АвтомобильПриИзменении(Неопределено);
		КонецЕсли;
		Возврат;
		
	Иначе
		// Обработаем событие в контексте сервера
		ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолучитьЗначениеПараметраСтруктуры(ПолучитьЗначениеПараметраСтруктуры(РезультатОповещения, "ИзмененныеРеквизиты"), "Дата")) Тогда
		
		ОбновитьПодсказкуАвтомобиля(ЭтотОбъект);
		
	КонецЕсли;
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеВнешнимВидом

&НаСервере
Процедура УстановитьУсловноеОформление()
 
	УсловноеОформлениеПоРеквизитуЦветРаскраскиСтроки();
	УсловноеОформлениеОтборыСтрок();
	УсловноеОформлениеСкрытьСуммуПоСтроке();
	УсловноеОформлениеРасцветкаСостояний();
	
КонецПроцедуры 

&НаСервере
Процедура УсловноеОформлениеПоРеквизитуЦветРаскраскиСтроки()
	
	Раскраска = Новый Соответствие;
	Раскраска.Вставить(1, ЦветаСтиля.ЗаказНарядТоварыПолученаПоЗаказуКлиента);
	Раскраска.Вставить(2, ЦветаСтиля.ЗаказНарядТоварыИмеетсяНаСкладе);
	Раскраска.Вставить(3, ЦветаСтиля.ЗаказНарядТоварыРаспределенаУПоставщика);
	Раскраска.Вставить(4, ЦветаСтиля.ЗаказНарядТоварыТребуетсяЗаказать);

	Для Каждого Строка Из Раскраска Цикл
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСводногоРемонтногоЗаказа.Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСводногоРемонтногоЗаказа.ЦветРаскраскиСтроки");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Строка.Ключ;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Строка.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УсловноеОформлениеОтборыСтрок()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСводногоРемонтногоЗаказа.Имя);
		
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСводногоРемонтногоЗаказа.ИмяТаблицы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НачинаетсяС;
	ОтборЭлемента.ПравоеЗначение = "Автоработы";
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборВДеревеСводногоРемонтногоЗаказаПоТипуСтрок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
		
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УсловноеОформлениеСкрытьСуммуПоСтроке()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСводногоРемонтногоЗаказаСумма.Имя);
		
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСводногоРемонтногоЗаказа.СуммаПоАвтоработамИТоварам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = "";
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УсловноеОформлениеРасцветкаСостояний()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	Справочник.Ссылка,
	|	Справочник.Цвет КАК Цвет
	|ИЗ
	|	Справочник.ВидыСостоянийЗаказНарядов КАК Справочник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		
		// Создаем условие отбора
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСводногоРемонтногоЗаказа.Состояние");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
		
		// Значение для отбора
		ЭлементОтбора.ПравоеЗначение = Выборка.Ссылка;
		ЭлементОтбора.Использование = Истина;
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Выборка.Цвет.Получить());
		ЭлементОформления.Использование = Истина;
		
		ПолеДляОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеДляОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСводногоРемонтногоЗаказа");
		ПолеДляОформления.Использование = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// Вызываем общий обработчик события настройки параметров выбора
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
	НастройкаПараметровВыбораСервиснойКампании();
	
КонецПроцедуры // НастроитьПараметрыВыбораЭлементовФормы()

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	Элементы.Заказчик.ТолькоПросмотр = ЕстьЗакрытыеЗаказНаряды(ЭтотОбъект);
	Элементы.Автомобиль.ТолькоПросмотр = Элементы.Заказчик.ТолькоПросмотр;
	Элементы.ПредставлениеТелефона.ТолькоПросмотр = Элементы.Заказчик.ТолькоПросмотр;
	Элементы.АдресЭлектроннойПочты.ТолькоПросмотр = Элементы.Заказчик.ТолькоПросмотр;
	
	Элементы.Пробег.Доступность            = ЗначениеЗаполнено(Объект.Автомобиль);
	Объект.Пробег                          = ?(Элементы.Пробег.Доступность, Объект.Пробег, 0);
	РедактированиеНоменклатуры             = ПраваИНастройкиПользователя.Значение("РедактированиеДеталейЗаказНаряда", Объект);
	РедактированиеРабот                    = ПраваИНастройкиПользователя.Значение("РедактированиеРаботЗаказНаряда", Объект);
	КонтрольКоличестваДеталейВПроизводстве = ПраваИНастройкиПользователя.Значение("КонтрольКоличестваДеталейВПроизводстве", Объект);
	ИспользоватьИндикациюОстатковТовара    = ПолучитьФункциональнуюОпцию("ИспользоватьИндикациюОстатковТовара");
	
	УстановитьЗаголовокНадписиСуммаДокумента();
	Элементы.ПредставлениеТелефона.РедактированиеТекста = 
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента.ВидРедактирования<> "Диалог";
	Элементы.ПредставлениеТелефона.КнопкаВыбора = 
		НЕ Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента.ВидРедактирования = "ПолеВвода";
	Элементы.ПредставлениеТелефона.КнопкаВыпадающегоСписка = 
		НЕ Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента.ВидРедактирования = "ПолеВвода";
	
	Элементы.ГруппаПовторноеОбращение.ТолькоПросмотр =
		НЕ ПраваИНастройкиПользователя.Значение("ИзменениеПризнаковПовторногоОбращенияВСервис") ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка);
	
КонецПроцедуры // УправлениеДиалогомНаСервере()

&НаСервере
Процедура БлокироватьЭлементыФормы()
	
	// Составим список элементов для блокировки
	СписокРеквизитов = Новый СписокЗначений();
	
	// Заблокируем элементы формы
	УправлениеДиалогомСервер.БлокироватьЭлементыФормы(ЭтотОбъект,СписокРеквизитов);
	
	ОбщегоНазначенияКлиентСервер.
		УстановитьСвойствоЭлементаФормы(Элементы, "SMS", "Видимость",
										ПравоДоступа("Редактирование", Метаданные.Документы.СообщениеSMS));
	ОбщегоНазначенияКлиентСервер.
		УстановитьСвойствоЭлементаФормы(Элементы, "ЭлектронноеПисьмо", "Видимость",
										ПравоДоступа("Редактирование", Метаданные.Документы.ЭлектронноеПисьмоИсходящее));

КонецПроцедуры 

&НаСервере
Процедура ОбновитьИнформациюОбАвтомобиле()
	
	Макет = Документы.СводныйРемонтныйЗаказ.ПолучитьМакет("HTMLStyles");
	Текст = Макет.ПолучитьТекст();
	Текст = СтрЗаменить(Текст, "</body></html>", "");
	
	Автомобиль = Объект.Автомобиль;
	
	Если ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		
		Текст = Текст + "<BODY><TABLE class=""information_small"">";
		// Владелец
		// VIN
		// Шасси
		// Рег. номер
		// № двигателя
		// Соглашения о ТО
		// Гарантия Дата нач - дата кон
		
		ДанныеАвтомобиля = АвтомобилиСервер.ДанныеАвтомобиля(Объект.Автомобиль);
		
		Текст = Текст + ?
			(ЗначениеЗаполнено(ДанныеАвтомобиля.Модель),
			"<tr class=""blue-tr""><td>Модель: </td><td><b>" + ДанныеАвтомобиля.Модель  + "</b></td></tr>",
			"<tr class=""blue-tr""><td>Модель: </td><td></td></tr>");
		
		Текст = Текст + ?(
			ЗначениеЗаполнено(ДанныеАвтомобиля.ВариантКомплектации),
			"<tr><td>Комплектация: </td><td><b><A>" + ДанныеАвтомобиля.ВариантКомплектации  + "</A></b></td></tr>",
			"<tr><td>Комплектация: </td><td></td></tr>");
		
		Текст = Текст + ?(
			ЗначениеЗаполнено(ДанныеАвтомобиля.VIN),
			"<tr class=""blue-tr""><td>VIN: </td><td><b><A>" + ДанныеАвтомобиля.VIN + "</A></b></td></tr>",
			"<tr class=""blue-tr""><td>VIN: </td><td></td></tr>");
		
		Текст = Текст + ?(
			ЗначениеЗаполнено(ДанныеАвтомобиля.ГосНомер),
			"<tr><td>Гос. номер: </td><td><b><A>" + ДанныеАвтомобиля.ГосНомер  + "</A></b></td></tr>",
			"<tr><td>Гос. номер: </td><td></td></tr>");
		
		ФорматГодаВыпуска = АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Автомобиль);
		
		Текст = Текст + ?(
			ЗначениеЗаполнено(ДанныеАвтомобиля.ГодВыпуска),
			"<tr class=""blue-tr""><td>Год выпуска: </td><td><b><A>" + Формат(ДанныеАвтомобиля.ГодВыпуска, ФорматГодаВыпуска) + "</A></b></td></tr>",
			"<tr class=""blue-tr""><td>Год выпуска: </td><td></td></tr>");
		
		Текст = Текст + ?(
			ЗначениеЗаполнено(ДанныеАвтомобиля.Пробег),
			"<tr><td>Пробег: </td><td><b><A>" + ДанныеАвтомобиля.Пробег + "</A></b></td></tr>",
			"<tr><td>Пробег: </td><td></td></tr>");
		
		Текст = Текст + ?(
			ЗначениеЗаполнено(ДанныеАвтомобиля.Владелец),
			"<tr class=""blue-tr""><td>Владелец: </td><td><b><A>" + ДанныеАвтомобиля.Владелец + "</A></b></td></tr>" ,
			"<tr class=""blue-tr""><td>Владелец: </td><td></td></tr>");
		
		Текст = Текст + ?(
			ЗначениеЗаполнено(ДанныеАвтомобиля.Цвет),
			"<tr><td>Цвет: </td><td><b><A>" + ДанныеАвтомобиля.Цвет  + "</A></b></td></tr>",
			"<tr><td>Цвет: </td><td></td></tr>");
			
		Текст = Текст + ?(
			ЗначениеЗаполнено(ДанныеАвтомобиля.МодельДвигателя),
			"<tr class=""blue-tr""><td>Двигатель: </td><td><b><A>" + ДанныеАвтомобиля.МодельДвигателя  + "</A></b></td></tr>",
			"<tr class=""blue-tr""><td>Двигатель: </td><td></td></tr>");
			
		Текст = Текст + ?(
			ЗначениеЗаполнено(ДанныеАвтомобиля.ТипДвигателя),
			"<tr><td>Тип двигателя: </td><td><b><A>" + ДанныеАвтомобиля.ТипДвигателя  + "</A></b></td></tr>",
			"<tr><td>Тип двигателя: </td><td></td></tr>");
		
		Текст = Текст + ?(
			ЗначениеЗаполнено(ДанныеАвтомобиля.ТипКПП),
			"<tr class=""blue-tr""><td>КПП: </td><td><b><A>" + ДанныеАвтомобиля.ТипКПП  + "</A></b></td></tr>",
			"<tr class=""blue-tr""><td>КПП: </td><td></td></tr>");
		
		Текст = Текст + ?(
			ЗначениеЗаполнено(ДанныеАвтомобиля.ТипКузова),
			"<tr><td>Кузов: </td><td><b><A>" + ДанныеАвтомобиля.ТипКузова  + "</A></b></td></tr>",
			"<tr><td>Кузов: </td><td><b></td></tr>");
		
		Текст = Текст + ?(
			ЗначениеЗаполнено(ДанныеАвтомобиля.ТипСалона),
			"<tr class=""blue-tr""><td>Салон: </td><td><b><A>" + ДанныеАвтомобиля.ТипСалона  + "</A></b></td></tr>",
			"<tr class=""blue-tr""><td>Салон: </td><td></td></tr>");
		
		Текст =  Текст + "</TABLE>";
		
	Иначе
		
		Текст = Текст + "<BODY><TABLE class=""no_information""><tr><td>автомобиль не выбран</td></tr><TABLE>";
		
	КонецЕсли;
	
	Текст =  Текст + "</BODY></HTML>";
	
	HTMLАвтомобиль       = Текст;
	АвтомобильИнформация = HTMLАвтомобиль;
	
	ОбновлениеДанныхАвтомобиля();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокНадписиСуммаДокумента()
	
	// Проверим целесообразность дальнейших операций
	Если Элементы.НадписьСуммаДокумента.Видимость Тогда
		// Получим структуру итогов документа
		ИтогиОперации = Документы.СводныйРемонтныйЗаказ.РассчитатьИтогиОперации(Объект, Ложь, ДеревоСводногоРемонтногоЗаказа);
		
		// Формируем и устанавливаем заголовок поля итоговой суммы документа
		НадписьСуммаДокумента = Новый ФорматированнаяСтрока(" Итого: " + Формат(ИтогиОперации.СуммаДокумента, "ЧДЦ=2; ЧН=0,00") + " " + Объект.ВалютаДокумента + " (" + Формат(Объект.КурсДокумента, "ЧДЦ=4; ЧН=0,0000") + ")");
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗаголовокНадписиСуммаДокумента()

&НаСервере
Процедура УстановитьОтображениеЭлементовПоПравамДоступа()
	
	УстановитьОтображениеКоманд();
	УстановитьОтображениеОтчетов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеКоманд()
	
	// Изменение доступности команд по правам доступа
	ДобавлениеЗаказаПокупателя = ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПокупателя);
	ДобавлениеЗаказаПоставщику = ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПоставщику);
	ДобавлениеСнятиеРезервов   = ПравоДоступа("Добавление", Метаданные.Документы.СнятиеРезервовЗаказовПокупателя);
	ДобавлениеКорректировкаЗаказов = ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаЗаказаПокупателя);
	ДобавлениеТоваровВПроизводство = ПравоДоступа("Добавление", Метаданные.Документы.ПеремещениеТоваровВПроизводство);
	ДобавлениеТоваровИзПроизводства = ПравоДоступа("Добавление", Метаданные.Документы.ИзвлечениеТоваровИзПроизводства);
	ИзменениеЗаказНаряда = ПравоДоступа("Изменение", Метаданные.Документы.ЗаказНаряд);
	ПросмотрОбработкиИсполнителей =
		ПравоДоступа("Просмотр", Метаданные.Обработки.РаспределениеИсполнителейПоСводномуРемонтномуЗаказу);
	ДобавлениеПКО = ПравоДоступа("Добавление", Метаданные.Документы.ПриходныйКассовыйОрдер);
	
	Элементы.ДеревоСводногоРемонтногоЗаказаЗаказПокупателяПанель.Видимость = ДобавлениеЗаказаПокупателя;
	Элементы.ДеревоСводногоРемонтногоЗаказаЗаказПоставщикуПанель.Видимость = ДобавлениеЗаказаПоставщику;
	Элементы.ДеревоСводногоРемонтногоЗаказаЗарезервироватьПанель.Видимость = ДобавлениеЗаказаПокупателя;
	Элементы.ДеревоСводногоРемонтногоЗаказаСнятьРезервыПанель.Видимость = ДобавлениеСнятиеРезервов;
	Элементы.ДеревоСводногоРемонтногоЗаказаПереместитьВПроизводствоПанель.Видимость =
		ДобавлениеТоваровВПроизводство;
	Элементы.ДеревоСводногоРемонтногоЗаказаИзвлечьИзПроизводства.Видимость =
		ДобавлениеТоваровИзПроизводства;
	Элементы.ДеревоСводногоРемонтногоЗаказаОтменаВсехЗаказовИРезервов.Видимость = 
		ДобавлениеСнятиеРезервов И ДобавлениеКорректировкаЗаказов;
	Элементы.ДеревоСводногоРемонтногоЗаказаРедактироватьИсполнителей.Видимость =
		ИзменениеЗаказНаряда И ПросмотрОбработкиИсполнителей;
	Элементы.ДеревоСводногоРемонтногоЗаказаЗаказПокупателя.Видимость = ДобавлениеЗаказаПокупателя;
	Элементы.ДеревоСводногоРемонтногоЗаказаЗаказПоставщику.Видимость = ДобавлениеЗаказаПоставщику;
	Элементы.ДеревоСводногоРемонтногоЗаказаЗарезервировать.Видимость = ДобавлениеЗаказаПокупателя;
	Элементы.ДеревоСводногоРемонтногоЗаказаСнятьРезервы.Видимость = ДобавлениеСнятиеРезервов;
	Элементы.ДеревоСводногоРемонтногоЗаказаКонтекстноеМенюПереместитьВПроизводство.Видимость =
		ДобавлениеТоваровВПроизводство;
	Элементы.ДеревоСводногоРемонтногоЗаказаКонтекстноеМенюИзвлечьИзПроизводства.Видимость =
		ДобавлениеТоваровИзПроизводства;
	Элементы.ДеревоСводногоРемонтногоЗаказаОплатить.Видимость = ДобавлениеПКО;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеОтчетов()
	
	Элементы.ДеревоСводногоРемонтногоЗаказаПолучателиДеталейШапка.Видимость =
		ПравоДоступа("Просмотр", Метаданные.Отчеты.ОстаткиИОборотыТоваровВПроизводстве);
	Элементы.ДеревоСводногоРемонтногоЗаказаЗаказРезервыДеталейШапка.Видимость =
		ПравоДоступа("Просмотр", Метаданные.Отчеты.ОстаткиИОборотыЗаказовПокупателей);
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодсказкуАвтомобиля(Форма)
	
	Форма.Элементы.ПробегРасширеннаяПодсказка.Заголовок = АвтомобилиКлиентСервер.ПредставлениеПредыдущихПробегов(
		Форма.Объект.Автомобиль,
		СформироватьМассивДатПробега(Форма.Объект));
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьМассивДатПробега(Объект)
	
	ДатыПробега = Новый Массив;
	ДатыПробега.Добавить(?(ЗначениеЗаполнено(Объект.ДатаСводногоРемонтногоЗаказа), Объект.ДатаСводногоРемонтногоЗаказа, Объект.Дата));
	Если ЗначениеЗаполнено(Объект.ДатаЗакрытия) Тогда
		ДатыПробега.Добавить(Объект.ДатаЗакрытия);
	КонецЕсли;
	
	Возврат ДатыПробега;
	
КонецФункции

&НаКлиенте
Процедура НачатьЗаполнениеПлательщикаВПодчиненныхЗаказНарядах()
	
	Если Объект.Ссылка.Пустая() ИЛИ Объект.Автомобиль.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СводныйРемонтныйЗаказ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ИзмененныйАвтомобиль", Объект.Автомобиль);
	ПараметрыФормы.Вставить("Событие", "ПересчетЦенПриИзмененииАвтомобиля");
	
	ОбратныйВызов = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ПараметрыФормы);
	ОткрытьФорму(
		"Документ.СводныйРемонтныйЗаказ.Форма.ФормаЗаполненияПлательщика",
		ПараметрыФормы, ЭтотОбъект,
		,
		,
		,
		ОбратныйВызов,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПереносаМеждуЗаказНарядами(ДополнительныеПараметры)
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ СводныйРемонтныйЗаказЗаписатьНаСервере() Тогда
			// Если не удалось записать, то возвращаемся назад
			Элементы.СтраницыСводногоРемонтногоЗаказа.ТекущаяСтраница = Элементы.ОписаниеСводногоРемонтногоЗаказа;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СводныйРемонтныйЗаказ", Объект.Ссылка);
	ДополнительныеПараметры.Вставить("ПересчитатьЦены", Объект.ПересчитатьЦены);
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"Подключаемый_ОбработкаРезультатаОповещения",
		ЭтотОбъект,
		Новый Структура("Событие", "ЗавершениеПеремещения"));
	
	ОткрытьФорму(
		"Обработка.ПереносСтрокМеждуЗаказНарядами.Форма",
		ДополнительныеПараметры,
		ЭтотОбъект,,,,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПакетРаботЗаказНаряда(ОбъектЗаказНаряд)
	
	ПакетРабот = ОбъектЗаказНаряд.Автоработы.Выгрузить();
	ПакетРабот.Колонки.Добавить("ПакетРабот", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(36)));
	ПакетРабот.Колонки.Добавить("Представление");
	ПакетРабот.Колонки.Добавить("НомерПакета", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(2, 0)));
	ПакетРабот.Колонки.Добавить("СтатусПакета", Новый ОписаниеТипов("СправочникСсылка.ВидыСостоянийПакетовРабот"));
	
	ИнформацияПоПустомуПакету = РаботаСПакетамиРаботПовтИсп.ИнформацияПоПустомуПакету();
	
	Для Каждого Строка Из ПакетРабот Цикл
		
		Строка.ПакетРабот    = ИнформацияПоПустомуПакету.ПакетРабот;
		Строка.Представление = ИнформацияПоПустомуПакету.Представление;
		Строка.НомерПакета = 0;
		Строка.СтатусПакета = ПредопределенноеЗначение("Справочник.ВидыСостоянийПакетовРабот.ПустаяСсылка");
		
	КонецЦикла;
	
	Возврат ПакетРабот;
	
КонецФункции

&НаКлиенте
Процедура ОтменаВсехЗаказовИРезервовПродолжение(ЗаказНаряды)
	
	Заказы = Новый Массив;
	ПолучитьЗаказыПокупателя(Заказы, ЗаказНаряды);
	
	Если НЕ Заказы.Количество() Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для выбранных документов заказы/резервы отсутствуют.'"));
		Возврат;
		
	КонецЕсли;
	
	// Создаем Корректировку для каждого из заказов.
	Для Каждого Заказ Из Заказы Цикл
		
		ПараметрыФормы = Новый Структура("Основание, ОтменаЗаказовИРезервов", Заказ, Истина);
		
		Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказВнутренний") Тогда
			
			ПараметрыФормы.Вставить("ХозОперация",
				ПредопределенноеЗначение("Справочник.ХозОперации.КорректировкаЗаказаВнутреннее"));
			
		КонецЕсли;
			
		ОткрытьФорму(ПолучитьИмяОткрываемойФормы(Заказ, ПараметрыФормы),
			ПараметрыФормы,
			ЭтотОбъект,
			Новый УникальныйИдентификатор
		);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяОткрываемойФормы(Заказ, ПараметрыФормы)
	
	Если Заказ.ХозОперация = Справочники.ХозОперации.ЗаказРезервированиеПокупателя
		ИЛИ Заказ.ХозОперация = Справочники.ХозОперации.РезервированиеПокупателя
		ИЛИ Заказ.ХозОперация = Справочники.ХозОперации.РезервированиеВнутреннее
		ИЛИ Заказ.ХозОперация = Справочники.ХозОперации.ЗаказРезервированиеВнутренние Тогда
		
		ИмяФормы = "Документ.СнятиеРезервовЗаказовПокупателя.ФормаОбъекта";
		ПараметрыФормы.Вставить("КорректировкаЗаказа", Истина);
		
	Иначе
		
		ИмяФормы = "Документ.КорректировкаЗаказаПокупателя.ФормаОбъекта";
		
	КонецЕсли;
	
	Возврат ИмяФормы;
	
КонецФункции

&НаКлиенте
Процедура ОтменаВсехЗаказовИРезервовОповещение(Результат, ДопПараметры = Неопределено) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Записать();
	Исключение
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось сохранить документ. Операция отменена.'"));
		Возврат;
	КонецПопытки;
	
	ОтменаВсехЗаказовИРезервовПродолжение(ДопПараметры.ЗаказНаряды);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗаказыПокупателя(Заказы, ЗаказНаряды)
	
	Текст = "";
	ДокументыЗН = Новый Массив;
	Если ЗаказНаряды.Количество() Тогда
		
		Для Каждого ЗаказНаряд Из ЗаказНаряды Цикл
			
			Если НЕ ЗаказНаряд.Проведен Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументыЗН.Добавить(ЗаказНаряд);
			
		КонецЦикла;
		
		Если ДокументыЗН.Количество() Тогда
			
			Текст =
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(ЗаказыПокупателейОстатки.Заказ КАК Документ.ЗаказПокупателя) КАК Заказ
			|ИЗ
			|	РегистрНакопления.ЗаказыПокупателей.Остатки(
			|			,
			|			Заказ ССЫЛКА Документ.ЗаказПокупателя
			|				И Заказ.ДокументОснование В (&Документы)) КАК ЗаказыПокупателейОстатки
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВЫРАЗИТЬ(ЗаказыПокупателейОстатки.Заказ КАК Документ.ЗаказВнутренний) КАК Заказ
			|ИЗ
			|	РегистрНакопления.ЗаказыПокупателей.Остатки(
			|			,
			|			Заказ ССЫЛКА Документ.ЗаказВнутренний
			|				И Заказ.ДокументОснование В (&Документы)) КАК ЗаказыПокупателейОстатки";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Основание = Объект.ДокументОснование;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаРемонт")
		И ЗначениеЗаполнено(Основание) Тогда
		
		Если Текст <> "" Тогда
			Текст = Текст + "
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////";
		КонецЕсли;
		
		Текст = Текст + "
			|ВЫБРАТЬ
			|	ВЫРАЗИТЬ(ЗаказыПокупателейОстатки.Заказ КАК Документ.ЗаказПокупателя) КАК Заказ
			|ИЗ
			|	РегистрНакопления.ЗаказыПокупателей.Остатки(
			|			,
			|			Заказ ССЫЛКА Документ.ЗаказПокупателя
			|				И Заказ.ДокументОснование = &ОснованиеСводногоРемонтногоЗаказа) КАК ЗаказыПокупателейОстатки";
		
	КонецЕсли;
	
	Если Текст = "" Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(Текст);
	
	Запрос.УстановитьПараметр("Документы", ДокументыЗН);
	Запрос.УстановитьПараметр("ОснованиеСводногоРемонтногоЗаказа", Основание);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Если НЕ Результаты[0].Пустой() Тогда
		
		Выборка = Результаты[0].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Заказ = NULL Тогда
				Продолжить;
			КонецЕсли;
			
			Если Заказы.Найти(Выборка.Заказ) = Неопределено Тогда
				Заказы.Добавить(Выборка.Заказ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Результаты.Количество() > 1 И НЕ Результаты[1].Пустой() Тогда
		
		Выборка = Результаты[1].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Заказ = NULL Тогда
				Продолжить;
			КонецЕсли;
			
			Если Заказы.Найти(Выборка.Заказ) = Неопределено Тогда
				Заказы.Добавить(Выборка.Заказ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчетЦенЗаказНаряда(ДокументЗаказНаряд)
	
	Если НЕ Объект.ПересчитатьЦены Тогда
		Возврат;
	КонецЕсли;
	
	// Пересчитаем цены в ТЧ Товары и ТЧ Автоработы Заказ-наряда
	ПараметрыДействия = Новый Структура();
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦен", Истина);
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦенРабот", Истина);
	ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	Документы.ЗаказНаряд.ОбработкаПересчетаПоказателейОбъекта(ДокументЗаказНаряд, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеПоСервиснойКампании()
	
	Если НЕ Элементы.СостояниеСервиснойКомпании.Видимость
		ИЛИ НЕ ЕстьНевыполненныеСервисныеКампании Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьНевыполненныеСервисныеКампании = Ложь;
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(
		СтрШаблон(
			НСтр("ru = 'Для автомобиля <%1> имеются невыполненные сервисные кампании.'"),
			Объект.Автомобиль)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОкончаниеВводаТекстаСнятияПовторногоОбращения(
		Результат,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		Объект.ПричинаСнятияПовторногоОбращения = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИнформациюПоСнятиюПовторногоОбращения()
	
	СнятоПовторноеОбращение =
		(ЗначениеЗаполнено(Объект.Ссылка) ИЛИ СнятоПовторноеОбращениеВСервис)
		И НЕ Объект.ПовторноеОбращение И ЗначениеЗаполнено(Объект.АвторСнятияПовторногоОбращения);
	Элементы.ИнформацияСнятииПовторногоОбращения.Видимость = СнятоПовторноеОбращение;
	Элементы.ПричинаСнятияПовторногоОбращения.Видимость = СнятоПовторноеОбращение;
	Элементы.ИнформацияСнятииПовторногоОбращения.Заголовок =
		СтрШаблон(НСтр("ru = 'Снял %1 от %2'"),
		Строка(Объект.АвторСнятияПовторногоОбращения),
		Формат(Объект.ДатаСнятияПовторногоОбращения, ""));
	
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область СтандартныеПодсистемыКонтактнаяИнформация

&НаСервере
Процедура ИнициализироватьПоляКонтактнойИнформации()
	
	ВидКонтактнойИнформацииТелефона = Новый Структура;
	ВидКонтактнойИнформацииТелефона.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	ВидКонтактнойИнформацииЭлектроннойПочты = Новый Структура;
	ВидКонтактнойИнформацииЭлектроннойПочты.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	КомментарийТелефона = ЗначениеКомментарияКонтактнойИнформацииСервер(Объект.ПредставлениеТелефонаСтрокой);
	
	РазрешитьВводНесколькихЗначенийТелефона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, "РазрешитьВводНесколькихЗначений");
	
	РазрешитьВводНесколькихЗначенийЭлектроннойПочты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, "РазрешитьВводНесколькихЗначений");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеКомментарияКонтактнойИнформацииСервер(КонтактнаяИнформация)
	
	Результат = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(КонтактнаяИнформация);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначенияПолейКонтактнойИнформацииСервер(Знач Представление, Знач ВидКонтактнойИнформации, Знач Комментарий = Неопределено)
	
	// Создаем новый экземпляр по представлению.
	Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, ВидКонтактнойИнформации);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПредставлениеТелефонаПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		Объект.ПредставлениеТелефона        = "";
		Объект.ПредставлениеТелефонаСтрокой = "";
		УстановитьСвойстваПоляВводаТелефона();
		Возврат;
	КонецЕсли;
	
	// Формируем внутренние значения полей по тексту и параметрам формирования из
	// реквизита ВидКонтактнойИнформацииЭлектроннойПочты.     
	Объект.ПредставлениеТелефона = Текст;
	Объект.ПредставлениеТелефонаСтрокой = ЗначенияПолейКонтактнойИнформацииСервер(Текст, ВидКонтактнойИнформацииТелефона);
	
	ПроверитьНеобходимостьОбновленияКИ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТелефонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Если представление было изменено в поле и сразу нажата кнопка выбора, то необходимо 
	// привести данные в соответствие и сбросить внутренние поля для повторного разбора.
	Если Элемент.ТекстРедактирования <> Объект.ПредставлениеТелефона Тогда
		Объект.ПредставлениеТелефона = Элемент.ТекстРедактирования;
		Объект.ПредставлениеТелефонаСтрокой = "";
	КонецЕсли;
	
	// Данные для редактирования
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента"),
		Объект.ПредставлениеТелефонаСтрокой,
		Объект.ПредставлениеТелефона,
		КомментарийТелефона
	);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТелефонаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Объект.ПредставлениеТелефона        = ВыбранноеЗначение.Представление;
		КомментарийТелефона                 = ВыбранноеЗначение.Комментарий;
		Объект.ПредставлениеТелефонаСтрокой = ВыбранноеЗначение.Значение;
		
		ПроверитьНеобходимостьОбновленияКИ();
		Модифицированность = Истина;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		Объект.ПредставлениеТелефона        = ВыбранноеЗначение;
		КомментарийТелефона                 = "";
		Объект.ПредставлениеТелефонаСтрокой = ЗначенияПолейКонтактнойИнформацииСервер(ВыбранноеЗначение, ВидКонтактнойИнформацииТелефона);
		
		ПроверитьНеобходимостьОбновленияКИ();
		Модифицированность = Истина;
		
	Иначе
		
		УстановитьСвойстваПоляВводаТелефона();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТелефонаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.ПредставлениеТелефона        = "";
	КомментарийТелефона                 = "";
	Объект.ПредставлениеТелефонаСтрокой = ""; 
	ПроверитьНеобходимостьОбновленияКИ();
	УстановитьСвойстваПоляВводаТелефона();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭлектроннойПочтыПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		Объект.АдресЭлектроннойПочты        = "";
		Объект.АдресЭлектроннойПочтыСтрокой = "";
		Возврат;
	КонецЕсли;
	
	// Формируем внутренние значения полей по тексту и параметрам формирования из
	// реквизита ВидКонтактнойИнформацииЭлектроннойПочты.
	Объект.АдресЭлектроннойПочты        = Текст;
	Объект.АдресЭлектроннойПочтыСтрокой = ЗначенияПолейКонтактнойИнформацииСервер(Текст, ВидКонтактнойИнформацииЭлектроннойПочты);
	
	ПроверитьНеобходимостьОбновленияКИ();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭлектроннойПочтыОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.АдресЭлектроннойПочты        = "";
	Объект.АдресЭлектроннойПочтыСтрокой = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзМенюТелефон(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ПредставлениеТелефона = Объект.ПредставлениеТелефона;
		Если ВыбранныйЭлемент.Значение = "ОтправитьSMS" Тогда
			
			ВзаимодействияАльфаАвтоКлиент.СоздатьSMS(
				Объект.ПредставлениеТелефона,
				Объект.Заказчик,
				Объект.Ссылка
			);
		Иначе
			ВзаимодействияАльфаАвтоКлиент.ПозвонитьКонтакту(Объект.Заказчик, ПредставлениеТелефона, Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьОбновленияКИ()
	
	УстановитьСвойстваПоляВводаТелефона();
	
	Если ТипЗнч(Объект.Заказчик) = Тип("Строка") ИЛИ Объект.Заказчик = Справочники.Контрагенты.ПустаяСсылка() Тогда
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Элементы.АдресЭлектроннойПочты.СписокВыбора.Количество() > 0
		И Объект.АдресЭлектроннойПочты <> "" Тогда
		ЭлектроннаяПочта = Элементы.АдресЭлектроннойПочты.СписокВыбора.НайтиПоЗначению(Объект.АдресЭлектроннойПочты);
		ЭтоНовыйАдрес = (ЭлектроннаяПочта = Неопределено);
	Иначе
		ЭтоНовыйАдрес = (Объект.АдресЭлектроннойПочты <> "");
	КонецЕсли;
	
	Если Элементы.ПредставлениеТелефона.СписокВыбора.Количество() > 0
		И Объект.ПредставлениеТелефона <> "" Тогда
		Телефон = Элементы.ПредставлениеТелефона.СписокВыбора.НайтиПоЗначению(Объект.ПредставлениеТелефона);
		ЭтоНовыйТелефон = (Телефон = Неопределено);
	Иначе
		ЭтоНовыйТелефон = (Объект.ПредставлениеТелефона <> "");
	КонецЕсли;
	
	ЕстьНоваяКИ = ЭтоНовыйАдрес ИЛИ ЭтоНовыйТелефон;
	
	Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Доступность = ЕстьНоваяКИ;
	
	Если НЕ ЕстьНоваяКИ Тогда
		Элементы.ОбновлятьКИ.Пометка   = Ложь;
		Элементы.НеОбновлятьКИ.Пометка = Истина;
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Заголовок = НСтр("ru = 'Не обновлять'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ОбъектКоманды = Объект;
	
	Если Найти(Команда.Имя,"ПодменюПечатиЗаказНарядов") > 0 Тогда
		ТекущиеДанные = Элементы.ДеревоСводногоРемонтногоЗаказа.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущийЗаказНаряд = ЭтотОбъект[ТекущиеДанные.Идентификатор];
		
		Если НЕ ЗначениеЗаполнено(ТекущийЗаказНаряд.Ссылка) Тогда
			ВывестиСообщение(НСтр("ru = 'Данный заказ-наряд еще не записан'"), ЭтотОбъект);
			Возврат;
		КонецЕсли;
		
		ОбъектКоманды = ТекущийЗаказНаряд.Ссылка;   
	КонецЕсли;
	
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, ОбъектКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСуммаДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.ПоказатьРасширенныеИтогиОперации(ЭтотОбъект, Элемент);
	
КонецПроцедуры
// Конец Ядро

#КонецОбласти

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	                                                                                                                
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбработатьИзменениеЗаказчика()
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("НеобходимоПерезаполнитьАвтомобиль", Ложь);
	Если ЗначениеЗаполнено(ТелефонИзДанныхВыбора) Тогда
		ПараметрыДействия.Вставить("ТелефонИзДанныхВыбора", ТелефонИзДанныхВыбора);
	КонецЕсли;
	Если ЗначениеЗаполнено(АдресИзДанныхВыбора) Тогда
		ПараметрыДействия.Вставить("АдресИзДанныхВыбора", АдресИзДанныхВыбора);
	КонецЕсли;
	ЗаказчикПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
	ПерезаполнитьПлательщикаЗаказНарядов();
	ТелефонИзДанныхВыбора = "";
	АдресИзДанныхВыбора = "";
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваПоляВводаТелефона()
	
	УправлениеКонтактнойИнформациейАльфаАвто.УстановитьСвойстваПоляВводаТелефона(
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
		Объект.ПредставлениеТелефона,
		Элементы.ПредставлениеТелефона
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновлятьКИ(Результат, ДополнетельныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Элементы.ОбновлятьКИ.Пометка   = Истина;
		Элементы.НеОбновлятьКИ.Пометка = Ложь;
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Заголовок = НСтр("ru = 'Обновлять'");
	Иначе
		Элементы.ОбновлятьКИ.Пометка   = Ложь;
		Элементы.НеОбновлятьКИ.Пометка = Истина;
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Заголовок = НСтр("ru = 'Не обновлять'");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
