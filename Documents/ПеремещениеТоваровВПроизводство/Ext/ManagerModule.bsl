// Модуль менеджера документа "Перемещение товаров в производство"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ОбработчикиОбновления

// Возвращает все документы, в которых присутствуют коды маркировки.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка результата запроса, содержащая требуемые документы.
//
Функция ДокументыСКодамиМаркировки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПеремещениеТоваровВПроизводствоКодыМаркировки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваровВПроизводство.КодыМаркировки КАК ПеремещениеТоваровВПроизводствоКодыМаркировки
	|ГДЕ
	|	ПеремещениеТоваровВПроизводствоКодыМаркировки.КодМаркировки <> """"";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Процедура зачистки криптохвостов кодов маркировки.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ПеремещениеТоваровВПроизводство - документ, для которого выполняется действие.
//
Процедура ОтрезатьКриптохвосты(ДокументОбъект) Экспорт
	
	Для Каждого СтрокаТоваров Из ДокументОбъект.КодыМаркировки Цикл
		СтрокаТоваров.КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(СтрокаТоваров.КодМаркировки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
		
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)";

КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	
	Если НЕ Объект.Проведен Тогда
		ИтогиОперации.Вставить("СуммаДокумента", 0);
	Иначе
		ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		
		Если НЕ ЗначениеЗаполнено(Объект.КурсВалютыУпр) Тогда
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, Объект.Дата);
			КурсУпр        = СтруктураКурса.Курс/?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		Иначе
			КурсУпр = Объект.КурсВалютыУпр;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТоварыВПроизводстве.Номенклатура,
		               |	ТоварыВПроизводстве."+?(Объект.ВалютаДокумента = ВалютаРегл, "Сумма", "СуммаУпр")+" КАК Сумма
		               |ИЗ
		               |	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
		               |ГДЕ
		               |	ТоварыВПроизводстве.Регистратор = &Регистратор
		               |	И ТоварыВПроизводстве.ВидДвижения = &ВидДвижения";
		Запрос.УстановитьПараметр("Регистратор"       , Объект.Ссылка);
		Запрос.УстановитьПараметр("ВидДвижения" , ВидДвиженияНакопления.Приход);
		КэшСуммСписания=Запрос.Выполнить().Выгрузить();
		
		Если Объект.ВалютаДокумента <> ВалютаУпр И Объект.ВалютаДокумента <> ВалютаРегл Тогда
			Для каждого СтрокаСписания Из КэшСуммСписания Цикл
				СтрокаСписания.Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаСписания.Сумма, ВалютаУпр, КурсУпр, Объект.ВалютаДокумента, Объект.КурсДокумента);
			КонецЦикла;
		КонецЕсли;
		
		ИтогиОперации.Вставить("СуммаДокумента", КэшСуммСписания.Итог("Сумма"));
	КонецЕсли;
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Производим добавление сведений о рознечной сумме только в случае если выбран розничный склад.
	Если Объект.СкладКомпании.Розничный Тогда
		ИтогиОперации.Вставить("СуммаРозничная", Объект.Товары.Итог("СуммаРозничная"));
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используеся в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость выводв только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возращаемая сторка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить = ЛОЖЬ, ТолькоОсновныеКонтакты = ИСТИНА) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

// Получение строкового представления о ремонтируемом автомобиле
Функция ОтобразитьИнформациюОбАвтомобиле(ДокументОснование) Экспорт
	ИнформацияОбАвтомобиле="";
	Если ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.ЗаказНаряд") И (ЗначениеЗаполнено(ДокументОснование)) Тогда
		Попытка
			ГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(ДокументОснование.СводныйРемонтныйЗаказ.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер, ДокументОснование.Дата);
		Исключение
			ГосНомер = "";
		КонецПопытки;
		Если НЕ ЗначениеЗаполнено(ГосНомер) Тогда
			ГосНомер="";
		Иначе
			ГосНомер="; гос № "+ГосНомер;
		КонецЕсли; 
		Попытка
			ИнформацияОбАвтомобиле=СокрЛП(ДокументОснование.СводныйРемонтныйЗаказ.Автомобиль.Модель)+"; VIN "+ДокументОснование.СводныйРемонтныйЗаказ.Автомобиль.VIN+ГосНомер;
		Исключение
			ИнформацияОбАвтомобиле="";
		КонецПопытки;
	КонецЕсли;
	
	Возврат ИнформацияОбАвтомобиле;
	
КонецФункции

Процедура ЗаполнитьОстаткамиПоЗаказНаряду(Объект, ТаблицаТоваров, ПараметрыДействия = Неопределено) Экспорт
	
	Объект.Товары.Очистить();
	
	РучноеПеремещениеТоваровВПроизводствоИзЗН = 
		ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ДополнительныеСвойства")
		И ПолучитьЗначениеПараметраСтруктуры(Объект.ДополнительныеСвойства, "РучноеПеремещениеТоваровВПроизводствоИзЗН", Ложь);

	Если РучноеПеремещениеТоваровВПроизводствоИзЗН Тогда
	
		ТаблицаТоваров     = Неопределено;
		ДопПараметры       = Новый Структура();
		НомераСтрокТоваров = Объект.ДополнительныеСвойства.ТоварыИМатериалы.Товары;
		
	Иначе
		
		ДопПараметры = Новый Структура("ПоСкладу,РезервыПоЗаказНаряду",
			Объект.СкладКомпании, Объект.ЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду);
		
	КонецЕсли;
	
	ДопПараметры.Вставить("Организация", Объект.Организация);
	
	Если ТаблицаТоваров = Неопределено Тогда
		ТаблицаТоваров = Объект.ДокументОснование.Товары.Выгрузить();
		Для Каждого СтрокаМатериала Из Объект.ДокументОснование.Материалы Цикл
			НоваяСтрока = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМатериала);
		КонецЦикла;
	КонецЕсли;
	
	// Получим документ заказ-наряд
	Если НЕ ЗначениеЗаполнено(Объект.Цех) Тогда
		Цех = Объект.ДокументОснование.Цех;
	КонецЕсли;
	
	ПоказателиЗапасов = Документы.ЗаказНаряд.ПолучитьПоказателиЗапасов(
		Объект.ДокументОснование,
		ТаблицаТоваров,
		ДопПараметры);
	
	Если РучноеПеремещениеТоваровВПроизводствоИзЗН Тогда
	
		ПоказателиЗапасовКеш = ПоказателиЗапасов.Скопировать();
		ПоказателиЗапасовКеш.Очистить();
		
		Для Каждого НомерСтрокиТовара Из НомераСтрокТоваров Цикл
		
			СтрокаЗапасов = ПоказателиЗапасов.Найти(НомерСтрокиТовара, "НомерСтроки");
			
			Если СтрокаЗапасов <> Неопределено Тогда
			
				НоваяСтрокаКеша = ПоказателиЗапасовКеш.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаКеша, СтрокаЗапасов);
				
			КонецЕсли;
		
		КонецЦикла;
		
		ПоказателиЗапасов = ПоказателиЗапасовКеш;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.ДокументОснование,
			"ЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду");
	Иначе
		ЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду = Ложь;
	КонецЕсли;
	
	РежимПроведенияПоПартиям = ОбработкаСобытийДокументаСервер.ПолучитьРежимПроведенияПоПартиям();
	
	Для Каждого СтрокаТоваров Из ПоказателиЗапасов Цикл
		
		ОстатокНаСкладе = ?(РежимПроведенияПоПартиям <> Перечисления.РежимыПроведенияПартий.ПартииОтсутствуют,
				Мин(СтрокаТоваров.ОстатокНаСкладе, СтрокаТоваров.ОстатокНаОрганизации),
				СтрокаТоваров.ОстатокНаСкладе)
			+ ?(ЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду, СтрокаТоваров.ЗарезервированоПодЗН, СтрокаТоваров.Зарезервировано);
		КоличествоТовараВПроизводство = Мин(СтрокаТоваров.ОсталосьПереместить - СтрокаТоваров.ЗаказаноПодЗН,
			?(ОстатокНаСкладе < 0, 0, ОстатокНаСкладе));
			
		Если КоличествоТовараВПроизводство=0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура               = СтрокаТоваров.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТоваров.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения           = СтрокаТоваров.ЕдиницаИзмерения;
		НоваяСтрока.Количество                 = КоличествоТовараВПроизводство/СтрокаТоваров.Коэффициент;
		НоваяСтрока.Коэффициент                = СтрокаТоваров.Коэффициент;
		
	КонецЦикла;
	
	ТаблицаТоваров = Объект.Товары.Выгрузить();
	
	ТаблицаТоваров.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, Ячейка", "Количество");
	
	Объект.Товары.Загрузить(ТаблицаТоваров);
	
	// Произведем изменения номенклатуры
	Для Каждого СтрокаТоваров Из Объект.Товары Цикл
		ТоварыНоменклатураПриИзменении(Объект, СтрокаТоваров, ПараметрыДействия);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьОстаткамиПоЗаказНаряду()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ДокументОснование");
	ОбязательныеРеквизиты.Добавить("Цех");
	ОбязательныеРеквизиты.Добавить("СкладКомпании");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	Если ПраваИНастройкиПользователя.Значение("ПроверятьОтветственныхПриПеремещенииВПроизводство", Объект) 
		И НЕ ПраваИНастройкиПользователя.Значение("АвтоматическоеФормированиеПеремещенийВПроизводство", Объект) Тогда
		
		ОбязательныеРеквизиты.Добавить("Получил");
		ОбязательныеРеквизиты.Добавить("Отпустил");
	КонецЕсли;

	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	ОбязательныеРеквизиты.Добавить("КодыМаркировки.КодМаркировки");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	
	Если ПраваИНастройкиПользователя.Значение("ВыборочноеСписаниеПартий", Объект) Тогда
		УникальныеТовары.Добавить("Партия");
		УникальныеТовары.Добавить("ГТД");
	КонецЕсли;
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Товары", УникальныеТовары);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("СкладКомпании", Ложь);
	КонтролируемыеРеквизиты.Вставить("Цех"          , Ложь);
	
	Если ПраваИНастройкиПользователя.Значение("ВыборочноеСписаниеПартий", Объект) Тогда
		// Параметры проверки полей таблицы товаров
		КонтролируемыеРеквизитыТовары = Новый Структура();
		КонтролируемыеРеквизитыТовары.Вставить("Партия", Ложь);
		КонтролируемыеРеквизиты.Вставить("Товары"      , КонтролируемыеРеквизитыТовары);
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цех".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЦехПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	//орЗаполнитьОстаткиНоменклатурыВПроизводстве(Объект, Объект.Товары, Объект.ДокументОснование, Объект.Цех);
	
КонецПроцедуры // ЦехПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дельнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Строка.ИдентификаторТовара) Тогда
		Строка.ИдентификаторТовара = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	// Произведем получение и установку розничной цены
	ОбработкаТабличнойЧастиТовары.УстановитьРозничнуюЦену(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Заполним розничную сумму (для розничного склада)
	Строка.СуммаРозничная = Строка.ЦенаРозничная * Строка.Количество * Строка.Коэффициент;
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Заполним розничную сумму (для розничного склада)
	Строка.СуммаРозничная = Строка.ЦенаРозничная * Строка.Количество * Строка.Коэффициент;
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена розничная" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма розничная" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если (Строка.Количество*Строка.Коэффициент=0) Тогда
		Строка.ЦенаРозничная = 0;
	Иначе
		Строка.ЦенаРозничная = Строка.СуммаРозничная/(Строка.Количество*Строка.Коэффициент);
	КонецЕсли;

	// Вызываем общий обработчик события
	//ОбработкаТабличнойЧастиТовары.СуммаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Партия" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПартияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПартияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыПартияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Партия" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыГТДПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ГТДПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыГТДПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Товары");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ПеремещениеТоваровВПроизводство");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Товары");
	КонецЕсли;

	ВыборСклада 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборСклада.ВыборСсылки 		= "Справочник.СкладыКомпании.ФормаСписка";
	ВыборСклада.Обязательный 		= Истина;
	ВыборСклада.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать склад компании.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить розничные цены'");
	Команда.Идентификатор	= "ТоварыЗаполнитьРозничныеЦены";
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением = Ложь;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", ВыборСклада);
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзДокумента(
		КомандыЗаполнения,
		"Товары",
		Параметры
	);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьРозничныеЦены.Видимость",   Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьРозничныеЦены.Доступность", Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по заказам контрагенту
//
Функция ТоварыЗаполнитьРозничныеЦены(Ссылка, ПараметрыКоманды, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;           
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.СкладКомпании=ПараметрыЗаполнения.СкладКомпании Тогда
		Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании;
		СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Если Объект.СкладКомпании.Розничный Тогда
		ТипЦенРозничный = Объект.СкладКомпании.ТипЦенРозничнойТорговли;
		Для Каждого СтрокаТовар Из Объект.Товары Цикл
			СтрокаТовар.ЦенаРозничная=ЦенообразованиеСервер.ПолучитьЦену(ТипЦенРозничный,СтрокаТовар.Номенклатура,?(Ссылка.Пустая(), Объект.Дата, Новый МоментВремени(Объект.Дата)),Справочники.Контрагенты.ПустаяСсылка(), Объект.ВалютаДокумента, Объект.КурсДокумента,СтрокаТовар.ХарактеристикаНоменклатуры, СтрокаТовар.ЕдиницаИзмерения, Объект.СкладКомпании.ПодразделениеКомпании);
			ТоварыЦенаРозничнаяПриИзменении(Объект, СтрокаТовар, ПараметрыДействия);
		КонецЦикла;
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не указан розничный склад.'"),Ссылка);
	КонецЕсли;
	
КонецФункции // ТоварыЗаполнитьРозничныеЦены()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ПеремещениеТоваровВПроизводство",
		"ПеремещениеТоваровВПроизводство",
		НСтр("ru = 'Перемещение товаров в производство'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ПеремещениеТоваровВПроизводство",
		"ПФ_MXL_ПодборочныйЛист",
		НСтр("ru = 'Подборочный лист'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ13",
		НСтр("ru = 'ТОРГ-13 (Накладная на внутреннее перемещение)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТТН",
		НСтр("ru = '1-Т (Товарно-транспортная накладная)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТТН30122011_Приложение4",
		НСтр("ru = 'Приложение №4 (Транспортная накладная)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьМ11",
		"ПФ_MXL_М11",
		НСтр("ru = 'М-11 (Требование-накладная)'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПеремещениеТоваровВПроизводство") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПеремещениеТоваровВПроизводство",
															"Перемещение товаров в производство",
															ПечатьПеремещениеТоваровВПроизводство(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПодборочныйЛист") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ПодборочныйЛист",
															НСтр("ru = 'Подборочный лист'", "ru"),
															ПечатьПодборочныйЛист(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "ПеремещениеТоваровВПроизводство"
// Возвращает сформированный табличный документ:
Функция ПечатьПеремещениеТоваровВПроизводство(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваровВПроизводство_ПеремещениеТоваровВПроизводство";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПеремещениеТоваровВПроизводство.ПФ_MXL_ПеремещениеТоваровВПроизводство");
		
		ВыборкаТабличнойЧасти = Документ.Товары.Выгрузить();
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		
		// Настроим макет отчёта
		// Удаляем колонку "ЯчейкаХранения", если ни в одной из номенклатур этот реквизит не заполнен.
		// Увеличиваем за её счёт колонку "Товар".
		ЕстьЯчейкиХранения = Ложь;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.Ячейка) Тогда
				ЕстьЯчейкиХранения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьЯчейкиХранения Тогда
			ОбластьТовар = Макет.Область("Товар");
			ОбластьЯчейкаХранения = Макет.Область("ЯчейкаХранения");
			ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ОбластьЯчейкаХранения.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьЯчейкаХранения, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		ОбластьШапкаТаблицы    = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			Документ.СкладКомпании);
		ОбластьЗаголовок.Параметры.ЗаказНарядПредставление = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(
			Документ.ДокументОснование);
		ОбластьЗаголовок.Параметры.АвтомобильПредставление = ОтобразитьИнформациюОбАвтомобиле(Документ.ДокументОснование);
		
		ОбластьЗаголовок.Параметры.ПредставлениеПолучателя = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			Документ.Цех);
		
		// выведем или удалим ШК
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		НомерСтраницы = 2;
		НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура();
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// перебор строк
		Для Каждого СтрокаТабличнойЧасти Из ВыборкаТабличнойЧасти Цикл
			// заполняем данные строки
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТабличнойЧасти,
				Документ);
			// В возвращаемой структуре нет ключа "Ячейка", создадим его
			СтруктураСтроки.Вставить("Ячейка");
			// Если ЯчейкаХранения не определена для данной номенклатуры, то печатаем пробел
			ЯчейкаДляПечати = СокрЛП(СтрокаТабличнойЧасти.Ячейка.Код);
			СтруктураСтроки.Ячейка = ?(НЕ ЗначениеЗаполнено(ЯчейкаДляПечати), " ", ЯчейкаДляПечати);
			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
			ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
			мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
			
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// Выводим общее количество деталей
		ВсегоНаименований = Формат(ВыборкаТабличнойЧасти.Количество(),       ФорматВыводаКоличества);
		ОбщееКоличество   = Формат(ВыборкаТабличнойЧасти.Итог("Количество"), ФорматВыводаКоличества);
		ОбластьПодвал.Параметры.Итого = "Всего наименований " + ВсегоНаименований + " в количестве " + ОбщееКоличество;
		
		// Выводим представления и расшифровки подписей
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции //ПечатьПеремещениеТоваровВПроизводство()

// функция печати подборочного лист
//
Функция ПечатьПодборочныйЛист(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваровВПроизводство_ПодборочныйЛист";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// получим макет пеатной формы
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ПодборочныйЛист");
		ВыборкаТабличнойЧасти = Документ.Товары;
		
		// Настроим макет отчёта
		// Удаляем колонку "ЯчейкаХранения", если ни в одной из номенклатур этот реквизит не заполнен.
		// Увеличиваем за её счёт колонку "Товар".
		ЕстьЯчейкиХранения = Ложь;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.Ячейка) Тогда
				ЕстьЯчейкиХранения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьЯчейкиХранения Тогда
			ОбластьТовар = Макет.Область("Товар");
			ОбластьЯчейкаХранения = Макет.Область("ЯчейкаХранения");
			ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ОбластьЯчейкаХранения.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьЯчейкаХранения, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		// получение необходимых областей
		ОбластьШапкаТаблицы = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		ЗаполнитьЗначенияСвойств(ОбластьЗаголовок.Параметры,Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ,
			НСтр("ru = 'Подборочный лист'", "ru"));
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		///*///
		ОбластьЗаголовок.Параметры.Склад      = "Склад:";
		ОбластьЗаголовок.Параметры.Покупатель = "Плательщик:";
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПокупателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.ДокументОснование.Контрагент, , ДополнительныеПараметры);
		ОбластьЗаголовок.Параметры.ПредставлениеСклада =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СкладКомпании);
		///*///
		
		// выведем или удалим ШК
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// готовим шапку
		НомерСтраницы = 2;
		НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента", Документ.ВалютаДокумента);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы; 
		
		// заполняем ТЧ
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ);
			// В возвращаемой структуре нет ключа "Ячейка", создадим его
			СтруктураСтроки.Вставить("Ячейка");
			// Если ЯчейкаХранения не определена для данной номенклатуры, то печатаем пробел.
			ЯчейкаДляПечати = СокрЛП(СтрокаТЧ.Ячейка.Код);
			СтруктураСтроки.Ячейка = ?(НЕ ЗначениеЗаполнено(ЯчейкаДляПечати), " ", ЯчейкаДляПечати);
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, СтруктураСтроки);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента", Документ.ВалютаДокумента);
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПолучилКонтрагент", "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// блок области
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "ТОРГ13"
// Возвращает сформированный табличный документ:
Функция ПолучитьДанныеДляПечатиТОРГ13(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"        	, Объект.КурсДокумента); 
	ДанныеОбъекта.Вставить("КурсВалютыУпр"       	, Объект.КурсВалютыУпр); 
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("Розничный"       		, Ложь);
	ДанныеОбъекта.Вставить("ТребуетсяПересчет"      , Ложь);
	
	// Получим таблицу сумм списания
	ВалютаУпр   = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаДокумента = Объект.ВалютаДокумента;
	КурсДокумента   = Объект.КурсДокумента;
	ВалютаРегл      = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КурсРегл  = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(ВалютаРегл, Объект.Дата);
	Если НЕ ЗначениеЗаполнено(Объект.КурсВалютыУпр) Тогда
		КурсУпр = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(ВалютаУпр, Объект.Дата);
	Иначе
		КурсУпр = Объект.КурсВалютыУпр; 
	КонецЕсли; 
	
	СтрокаКолонокСвертки = "Количество, КоличествоБазовое, СуммаНДС, Сумма"+?(Объект.ВалютаДокумента=ВалютаУпр,"Упр","");
	ИспользуемыеРесурсы = Новый Структура("СуммаНДС, Сумма"+?(Объект.ВалютаДокумента=ВалютаУпр,"Упр",""));
	ИмяРегистра = "ТоварыВПроизводстве";
	// выборка запросом по движениям документа по регистру "ТоварыВПроизводстве"
	ПараметрыПолучения = ЗащищенныеФункцииСервер.СоздатьПараметрыПолученияТаблицыСписания();
	ПараметрыПолучения.ИмяРегистра         = ИмяРегистра;
	ПараметрыПолучения.ИспользуемыеРесурсы = ИспользуемыеРесурсы;
	ПараметрыПолучения.ВидДвиженияПриход   = ВидДвиженияНакопления.Приход;
	
	ТаблицаСуммСписания = ЗащищенныеФункцииСервер.ПолучитьТаблицуСуммСписания(Объект, ПараметрыПолучения);
	ТаблицаСуммСписания.Свернуть("Номенклатура,ЕдиницаИзмерения,ХарактеристикаНоменклатуры", СтрокаКолонокСвертки);
	
	Если ВалютаДокумента=ВалютаУпр Тогда
		ТаблицаСуммСписания.Колонки.Добавить("Сумма");
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из ТаблицаСуммСписания Цикл
		Если ВалютаДокумента=ВалютаУпр Тогда
			Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТекущаяСтрока.СуммаУпр, ВалютаУпр, КурсУпр, ВалютаДокумента, КурсДокумента) - РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТекущаяСтрока.СуммаНДС, ВалютаУпр, КурсУпр, ВалютаДокумента, КурсДокумента);
		Иначе
			Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаНДС, ВалютаРегл, КурсРегл, ВалютаДокумента, КурсДокумента);
		КонецЕсли;
		ТекущаяСтрока.Сумма = Сумма;
		ТекущаяСтрока.СуммаНДС = 0;
	КонецЦикла;
	
	ДанныеОбъекта.Вставить("ТаблицаСуммСписания"  	, ТаблицаСуммСписания);
	ДанныеОбъекта.Вставить("КоличествоСтрок"  		, ТаблицаСуммСписания.Количество());	
	ДанныеОбъекта.Вставить("Грузоотправитель"       , Неопределено);
	ДанныеОбъекта.Вставить("Грузополучатель"        , Неопределено);	
	ДанныеОбъекта.Вставить("Отпустил"				, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Отпустил","ОтпустилПредставление"));
	ДанныеОбъекта.Вставить("Получил"				, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Получил","ПолучилПредставление"));
	
	Возврат ДанныеОбъекта;
	
КонецФункции // ПолучитьДанныеДляПечатиТОРГ13()

// Формирует печатную форму Т-1 "Товарно-транспортная накладная"
// 
// Параметры:
//  ТабДокумент - табличный документ.
//
// Возвращаемое значение:
//  ТабДокумент - возвращает сформированный табличный документ.
//
Функция ПолучитьДанныеДляПечатиТ1(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	// данные документа
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , ВалютаРегл);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	
	// Получим таблицу сумм списания
	СтрокаКолонокСвертки = "Количество, КоличествоБазовое, СуммаНДС, Сумма";
	ИспользуемыеРесурсы = Новый Структура("СуммаНДС, Сумма");
	ИмяРегистра = "ТоварыВПроизводстве";
	// выборка запросом по движениям документа по регистру "ТоварыВПроизводстве"
	ПараметрыПолучения = ЗащищенныеФункцииСервер.СоздатьПараметрыПолученияТаблицыСписания();
	ПараметрыПолучения.ИмяРегистра         = ИмяРегистра;
	ПараметрыПолучения.ИспользуемыеРесурсы = ИспользуемыеРесурсы;
	ПараметрыПолучения.ВидДвиженияПриход   = ВидДвиженияНакопления.Приход;
	
	ТаблицаСуммСписания = ЗащищенныеФункцииСервер.ПолучитьТаблицуСуммСписания(Объект, ПараметрыПолучения);
	ТаблицаСуммСписания.Свернуть("Номенклатура,ЕдиницаИзмерения,ХарактеристикаНоменклатуры", СтрокаКолонокСвертки);
	
	// Добавим колонку "Сумма всего" для формирвания ПФ
	ТаблицаСуммСписания.Колонки.Добавить("СуммаВсего");
	
	Для Каждого ТекущаяСтрока Из ТаблицаСуммСписания Цикл
		ТекущаяСтрока.СуммаВсего = ТекущаяСтрока.Сумма;
	КонецЦикла;
	
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти"  , ТаблицаСуммСписания);
	
	ДанныеОбъекта.Вставить("Грузоотправитель", Объект.СкладКомпании.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("Грузополучатель", Объект.Цех.ПодразделениеКомпании);
	
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Плательщик);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Заказчик);
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Ложь, Истина, ИскомыеСвойства);
	
	ДанныеОбъекта.Вставить("Плательщик", УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Плательщик", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("Заказчик", УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Заказчик", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("ЛицензионнаяКарточка"  		, "");
	ДанныеОбъекта.Вставить("СрокДоставки"          		, "");
	ДанныеОбъекта.Вставить("Перевозчик"            		, Объект.Перевозчик);
	ДанныеОбъекта.Вставить("МаркаАвтомобиля"            , Объект.МодельАвтомобиля);
	ДанныеОбъекта.Вставить("ГосНомерАвтомобиля"         , Объект.ГосНомерАвтомобиля);
	ДанныеОбъекта.Вставить("Водитель"           		, Объект.Водитель);
	ДанныеОбъекта.Вставить("ВодительскоеУдостоверение"  , Объект.НомерВодительскогоУдостоверения);
	ДанныеОбъекта.Вставить("ВидПеревозки"           	, "");
	ДанныеОбъекта.Вставить("ПунктПогрузки"            	, "");
	ДанныеОбъекта.Вставить("ПунктРазгрузки"             , Объект.АдресДоставки);
	ДанныеОбъекта.Вставить("МаркаПрицепа"            	, Объект.МодельПрицепа);
	ДанныеОбъекта.Вставить("ГосНомерПрицепа"            , Объект.ГосНомерПрицепа);
	ДанныеОбъекта.Вставить("ОписаниеГруза"            	, Объект.ОписаниеГруза);	
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"      , Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("Отпустил"         			, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Отпустил", "Отпустил"));
	ДанныеОбъекта.Вставить("Получил"          			, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Получил", "Получил"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 			, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Руководитель"     			, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Руководитель"));
	
	Возврат ДанныеОбъекта;
	
КонецФункции // ПолучитьДанныеДляПечатиТ1()

// Формирует печатную форму "М-11"
// 
Функция ПолучитьДанныеДляПечатиМ11(Объект) Экспорт
	ДанныеОбъекта = Новый Структура();
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	
	Если Объект.Проведен Тогда
		// Получим таблицу сумм списания
		СтрокаКолонокСвертки = "Количество, КоличествоБазовое, СуммаНДС, Сумма";
		ИспользуемыеРесурсы = Новый Структура("СуммаНДС, Сумма");
		ИмяРегистра = "ТоварыВПроизводстве";
		// выборка запросом по движениям документа по регистру "ТоварыВПроизводстве"
		
		ПараметрыПолучения = ЗащищенныеФункцииСервер.СоздатьПараметрыПолученияТаблицыСписания();
		ПараметрыПолучения.ИмяРегистра         = ИмяРегистра;
		ПараметрыПолучения.ИспользуемыеРесурсы = ИспользуемыеРесурсы;
		ПараметрыПолучения.ВидДвиженияПриход   = ВидДвиженияНакопления.Приход;
		
		ВыборкаСтрок = ЗащищенныеФункцииСервер.ПолучитьТаблицуСуммСписания(Объект, ПараметрыПолучения);
		ВыборкаСтрок.Свернуть("Номенклатура,ЕдиницаИзмерения,ХарактеристикаНоменклатуры", СтрокаКолонокСвертки);
	Иначе
		ВыборкаСтрок = Объект.Товары.Выгрузить();
		
		// Добавим колонку "Сумма" для формирвания ПФ
		ВыборкаСтрок.Колонки.Добавить("Сумма");
	КонецЕсли;
	
	ЦенаВключаетНДС = Объект.ТипЦен.ЦенаВключаетНДС;
	
	// Добавим колонку "Цена" для формирвания ПФ
	ВыборкаСтрок.Колонки.Добавить("Цена");
	
	Для Каждого ТекущаяСтрока Из ВыборкаСтрок Цикл
		Если ЦенаВключаетНДС Тогда
			ТекущаяСтрока.Цена  = ?(Объект.Проведен,ТекущаяСтрока.Сумма/ТекущаяСтрока.Количество,ТекущаяСтрока.ЦенаРозничная);
			ТекущаяСтрока.Сумма = ?(Объект.Проведен,ТекущаяСтрока.Сумма,ТекущаяСтрока.СуммаРозничная);
		Иначе
			ТекущаяСтрока.Цена	= ?(Объект.Проведен,ТекущаяСтрока.Сумма/ТекущаяСтрока.Количество,ТекущаяСтрока.ЦенаРозничная);
			ТекущаяСтрока.Сумма = ?(Объект.Проведен,ТекущаяСтрока.Сумма,ТекущаяСтрока.СуммаРозничная);
		КонецЕсли;
	КонецЦикла;
		
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти"  , ВыборкаСтрок);
	ДанныеОбъекта.Вставить("ЦенаВключаетНДС"        , ЦенаВключаетНДС);
	ДанныеОбъекта.Вставить("Грузоотправитель"       , Неопределено);
	ДанныеОбъекта.Вставить("Грузополучатель"       	, Неопределено);
	ДанныеОбъекта.Вставить("Отпустил"				, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Отпустил","ОтпустилПредставление"));
	ДанныеОбъекта.Вставить("Получил"				, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Получил","ПолучилПредставление"));

	Возврат ДанныеОбъекта;
КонецФункции

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйСкладскойОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ПеремещениеТоваровВПроизводство);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли