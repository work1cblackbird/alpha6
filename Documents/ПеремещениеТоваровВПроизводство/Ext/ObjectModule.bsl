// Модуль объекта документа "Перемещение товаров в производство"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	// Вызываем общий обработчик события
	Результат = ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения,
		СтандартнаяОбработка);
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	// Если заполнение из сводного ремонтного заказа, настроим и перезапустим заполнение.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ЗаказНаряд")
		И ДанныеЗаполнения.Свойство("ТоварыИМатериалы") Тогда
		
		ДополнительныеСвойства.Вставить("ТоварыИМатериалы", ДанныеЗаполнения.ТоварыИМатериалы);
		Если ДанныеЗаполнения.Свойство("СкладКомпании") И ЗначениеЗаполнено(ДанныеЗаполнения.СкладКомпании) Тогда
			СкладКомпании = ДанныеЗаполнения.СкладКомпании;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Организация") И ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
			ДополнительныеСвойства.Вставить("Организация", ДанныеЗаполнения.Организация);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("РучноеПеремещениеТоваровВПроизводствоИзЗН") Тогда
			
			ДополнительныеСвойства.Вставить(
				"РучноеПеремещениеТоваровВПроизводствоИзЗН",
				ДанныеЗаполнения.РучноеПеремещениеТоваровВПроизводствоИзЗН);
			
		КонецЕсли;
		
		Заполнить(ДанныеЗаполнения.ЗаказНаряд);
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) И НЕ ЗначениеЗаполнено(Цех) Тогда
		Цех = ПраваИНастройкиПользователя.Значение("ОсновнойЦех", ЭтотОбъект);
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(СкладКомпании)) И (СкладКомпании.Розничный) Тогда
		ТипЦен = СкладКомпании.ТипЦенРозничнойТорговли;
		ВалютаДокумента = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен,Неопределено,Ложь);
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		Для Каждого СтрокаТоваров Из Товары Цикл
			СтрокаТоваров.ЦенаРозничная = ЦенообразованиеСервер.ПолучитьЦену(ТипЦен,
				СтрокаТоваров.Номенклатура,
				?(Ссылка.Пустая(), Дата, МоментВремени()),
				,
				ВалютаДокумента,
				КурсДокумента,
				СтрокаТоваров.ХарактеристикаНоменклатуры,
				СтрокаТоваров.ЕдиницаИзмерения,
				СкладКомпании.ПодразделениеКомпании);
			Документы.ПеремещениеТоваровВПроизводство.ТоварыЦенаРозничнаяПриИзменении(ЭтотОбъект, СтрокаТоваров);
		КонецЦикла;
	КонецЕсли;
	
	// Заполним доп. поля для товарной строки
	Для Каждого СтрокаТовар Из Товары Цикл
		Если ПустаяСтрока(СтрокаТовар.ИдентификаторТовара) Тогда
			СтрокаТовар.ИдентификаторТовара = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	КодыМаркировки.Очистить();
	
КонецПроцедуры

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Предварительно проверим ТЧ Коды маркировки
	МаркировкаТоваровСервер.ПроверкаКодовМаркировкиПередЗаписью(ЭтотОбъект);
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если БалансВедетсяПоОрганизациям(Дата) Тогда
		Если Цех.Организация <> ДокументОснование.Организация Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Организация цеха <%1> не соответствует организации заказ-наряда.'"),Цех)
			);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Проверим заполнение ТЧ Коды маркировки
	МаркировкаТоваровСервер.ПроверитьЗаполнениеКодовМаркировки(ЭтотОбъект, Отказ, , , Истина);
	
	// Проверим заполнение РНПТ у послеживаемого товара
	УчетПрослеживаемыхТоваровСервер.ПроверитьЗаполнениеРНПТПрослеживаемогоТовара(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ОчиститьПолеЦенаРозничнаяДляНеРозничныхСкладов(ЭтотОбъект, ЭтотОбъект.СкладКомпании);
	
	ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование,
		"Состояние,Дата,ДатаОкончания,Номер");
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ДанныеОснования.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен
			ИЛИ ДанныеОснования.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
			
			Если НЕ Проведен Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru='Заказ-наряд выполнен или закрыт. Перемещения в производство запрещено.'"),
					,
					,
					,
					Отказ
				);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ЭтотОбъект.ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь) Тогда
		
		Если Дата < ДанныеОснования.Дата Тогда
			
			ЗНПредставление = СтрШаблон(НСтр("ru = 'Заказ-наряд № %1 от %2'"),
				СокрЛП(ДанныеОснования.Номер), Формат(ДанныеОснования.Дата,"ДФ='dd.MM.yyyy ЧЧ:мм:сс'"));
			
				Если НЕ ПраваИНастройкиПользователя.Значение("ЗаписьРаньшеДокументаОснования", ЭтотОбъект) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru='Нет прав на запись раньше создания чем документ-основание: <%1>'"),ЗНПредставление),
						,,, Отказ
					);
				Возврат;
				
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Внимание! Документ <%1> записывается раньше создания своего документа-основания: <%2>'"),
					Строка(ЭтотОбъект), 
					ЗНПредставление
				)
			);
			
		ИначеЕсли ДанныеОснования.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт
			И Дата > ДанныеОснования.ДатаОкончания Тогда
			
			ЗНПредставление = СтрШаблон(НСтр("ru = 'Заказ-наряд № %1 от %2'"), СокрЛП(ДанныеОснования.Номер),
				Формат(ДанныеОснования.ДатаОкончания,"ДФ='dd.MM.yyyy ЧЧ:мм:сс'"));
			
			Если НЕ ПраваИНастройкиПользователя.Значение("ЗаписьРаньшеДокументаОснования", ЭтотОбъект) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru='Нет прав на запись позже окончания чем документ-основание: <%1>'"), ЗНПредставление),
					,
					,
					,
					Отказ
				);
				Возврат;
				
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Внимание! Документ <%1> записывается позже окончания своего документа-основания: <%2>'"),
					Строка(ЭтотОбъект),
					ЗНПредставление
				)
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПеремещениеДеталейВПроизводство", ЭтотОбъект) Тогда
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			
			ТекстСообщения = НСтр("ru='Нет прав на перемещение деталей в производство!
				|Обратитесь к администратору системы.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ И РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		
		СуммаДокумента = 0;
		
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоЗаказамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПартиямПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПроизводствуПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументОснование.Состояние=Справочники.ВидыСостоянийЗаказНарядов.Выполнен ИЛИ
		 ДокументОснование.Состояние=Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Заказ-наряд выполнен или закрыт. Отмена перемещения в производство запрещена.'"), ЭтотОбъект, ,, Отказ);
		Возврат;
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ЗаполнитьРеквизитыСуммСписанияВДокументе(ЭтотОбъект, Отказ, "", Истина);
	
КонецПроцедуры

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Закрытие заказов покупателя
	// Закрываем заказы покупателя по FIFO.
	ТекстЗапроса="ВЫБРАТЬ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	МАКСИМУМ(ДокументТовары.ЦенаРозничная) КАК ЦенаРозничная,
	|	СУММА(ДокументТовары.Количество * ДокументТовары.Коэффициент) КАК Количество,
	|	СУММА(0) КАК Резерв,
	|	СУММА(ДокументТовары.СуммаРозничная) КАК Сумма
	|ПОМЕСТИТЬ ТоварыПроизводства
	|ИЗ
	|	Документ.ПеремещениеТоваровВПроизводство.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументТовары.Номенклатура,
	|	ДокументТовары.ХарактеристикаНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыПокупателя.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втЗаказыПокупателей
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказыПокупателя
	|ГДЕ
	|	(ЗаказыПокупателя.Ссылка В (&Основания)
	|			ИЛИ ЗаказыПокупателя.ДокументОснование В (&Основания))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыПокупателя.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказыПокупателя
	|ГДЕ
	|	(ЗаказыПокупателя.Ссылка В (&Основания)
	|			ИЛИ ЗаказыПокупателя.ДокументОснование В (&Основания))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНарядТовары.Номенклатура КАК Номенклатура,
	|	ЗаказНарядТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ЗаказНарядТовары.Количество * ЗаказНарядТовары.Коэффициент) КАК Количество
	|ПОМЕСТИТЬ ТоварыЗаказНаряда
	|ИЗ
	|	Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
	|ГДЕ
	|	ЗаказНарядТовары.Ссылка = &ЗаказНаряд
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНарядТовары.Номенклатура,
	|	ЗаказНарядТовары.ХарактеристикаНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыПокупателей.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателей.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ЗаказыПокупателей.Заказано) КАК Заказано,
	|	СУММА(ЗаказыПокупателей.Резерв) КАК Резерв
	|ПОМЕСТИТЬ ЗаказаноПоЗаказНаряду
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
	|ГДЕ
	|	(ВЫРАЗИТЬ(ЗаказыПокупателей.Заказ КАК Документ.ЗаказПокупателя).ДокументОснование В (&Регистраторы)
	|			ИЛИ ЗаказыПокупателей.Заказ В
	|				(ВЫБРАТЬ
	|					втЗаказыПокупателей.Ссылка
	|				ИЗ
	|					втЗаказыПокупателей КАК втЗаказыПокупателей))
	|	И ЗаказыПокупателей.Период <= &ДатаДокумента
	|	И ЗаказыПокупателей.Регистратор <> &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПокупателей.Номенклатура,
	|	ЗаказыПокупателей.ХарактеристикаНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыВПроизводствеОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыВПроизводствеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ТоварыВПроизводствеОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ТоварыВПроизводстве
	|ИЗ
	|	РегистрНакопления.ТоварыВПроизводстве.Остатки(
	|			&МоментВремени,
	|			ЗаказНаряд = &ЗаказНаряд
	|				И (Номенклатура, ХарактеристикаНоменклатуры) В
	|					(ВЫБРАТЬ
	|						ТоварыПроизводства.Номенклатура КАК Номенклатура,
	|						ТоварыПроизводства.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|					ИЗ
	|						ТоварыПроизводства КАК ТоварыПроизводства)) КАК ТоварыВПроизводствеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыВПроизводствеОстатки.Номенклатура,
	|	ТоварыВПроизводствеОстатки.ХарактеристикаНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыПроизводства.Номенклатура КАК Номенклатура,
	|	ТоварыПроизводства.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТоварыПроизводства.ЦенаРозничная КАК ЦенаРозничная,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТоварыЗаказНаряда.Количество, 0) - ЕСТЬNULL(ТоварыВПроизводстве.КоличествоОстаток, 0) > ЕСТЬNULL(ЗаказаноПоЗаказНаряду.Заказано, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ЗаказаноПоЗаказНаряду.Резерв, 0) < ТоварыПроизводства.Количество
	|						ТОГДА ЕСТЬNULL(ЗаказаноПоЗаказНаряду.Резерв, 0)
	|					ИНАЧЕ ТоварыПроизводства.Количество
	|				КОНЕЦ
	|		ИНАЧЕ ТоварыПроизводства.Количество
	|	КОНЕЦ КАК Количество,
	|	ТоварыПроизводства.Сумма КАК Сумма,
	|	ТоварыПроизводства.Резерв КАК Резерв
	|ИЗ
	|	ТоварыПроизводства КАК ТоварыПроизводства
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыЗаказНаряда КАК ТоварыЗаказНаряда
	|		ПО ТоварыПроизводства.Номенклатура = ТоварыЗаказНаряда.Номенклатура
	|			И ТоварыПроизводства.ХарактеристикаНоменклатуры = ТоварыЗаказНаряда.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказаноПоЗаказНаряду КАК ЗаказаноПоЗаказНаряду
	|		ПО ТоварыПроизводства.Номенклатура = ЗаказаноПоЗаказНаряду.Номенклатура
	|			И ТоварыПроизводства.ХарактеристикаНоменклатуры = ЗаказаноПоЗаказНаряду.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыВПроизводстве КАК ТоварыВПроизводстве
	|		ПО ТоварыПроизводства.Номенклатура = ТоварыВПроизводстве.Номенклатура
	|			И ТоварыПроизводства.ХарактеристикаНоменклатуры = ТоварыВПроизводстве.ХарактеристикаНоменклатуры
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ЕСТЬNULL(ТоварыЗаказНаряда.Количество, 0) - ЕСТЬNULL(ТоварыВПроизводстве.КоличествоОстаток, 0) - ЕСТЬNULL(ЗаказаноПоЗаказНаряду.Резерв, 0) > ЕСТЬNULL(ЗаказаноПоЗаказНаряду.Заказано, 0)
	|				ТОГДА ЕСТЬNULL(ЗаказаноПоЗаказНаряду.Резерв, 0) > 0
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыПроизводства.Номенклатура КАК Номенклатура,
	|	ТоварыПроизводства.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТоварыПроизводства.ЦенаРозничная КАК ЦенаРозничная,
	|	ТоварыПроизводства.Количество КАК Количество,
	|	ТоварыПроизводства.Резерв КАК Резерв,
	|	ТоварыПроизводства.Сумма КАК Сумма
	|ИЗ
	|	ТоварыПроизводства КАК ТоварыПроизводства";
	Запрос=Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр(
		"ЗаказНаряд",
		?(ЗначениеЗаполнено(ДокументОснование), ДокументОснование, Документы.ЗаказНаряд.ПустаяСсылка()));
	Регистраторы = Новый Массив();
	Регистраторы.Добавить(?(ЗначениеЗаполнено(ДокументОснование), ДокументОснование, Документы.ЗаказНаряд.ПустаяСсылка()));
	Если ЗначениеЗаполнено(ДокументОснование)
		И ЗначениеЗаполнено(ДокументОснование.СводныйРемонтныйЗаказ.ДокументОснование)
		И ТипЗнч(ДокументОснование.СводныйРемонтныйЗаказ.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРемонт") Тогда
		Регистраторы.Добавить(ДокументОснование.СводныйРемонтныйЗаказ.ДокументОснование);
	КонецЕсли;
	Запрос.УстановитьПараметр("Регистраторы", Регистраторы);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		?(РежимПроведения = РежимПроведенияДокумента.Оперативный, Неопределено, МоментВремени()));
	ТекДокументОснование = ДокументОснование;
	Основания = Новый Массив;
	ОснованияПеремещения(ТекДокументОснование, Основания);
	Запрос.УстановитьПараметр("Основания", Основания);
	ПакетыЗапроса = Запрос.ВыполнитьПакет();
	// Закрываем заказы
	НаборЗаписейЗаказыПокупателей = Движения.ЗаказыПокупателей;
	НаборЗаписейЗаказыПокупателей.РежимПроведения = РежимПроведения;
	НаборЗаписейЗаказыПокупателей.ДокументОбъект = ЭтотОбъект;
	Если ЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду Тогда
		НаборЗаписейЗаказыПокупателей.РезультатЗапросаПоТоварам = ПакетыЗапроса[6];
		НаборЗаписейЗаказыПокупателей.ОснованиеЗаказовПокупателя = ПакетыЗапроса[2].Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		НаборЗаписейЗаказыПокупателей.РезультатЗапросаПоТоварам = ПакетыЗапроса[7];
		НаборЗаписейЗаказыПокупателей.ОснованиеЗаказовПокупателя = Неопределено;
	КонецЕсли;
	НаборЗаписейЗаказыПокупателей.Контрагент = ДокументОснование.Контрагент;
	Если
		(НЕ ДокументОснование = Неопределено)
		И ТипЗнч(ДокументОснование.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
		И ЗначениеЗаполнено(ДокументОснование.ДокументОснование)
	Тогда
		НаборЗаписейЗаказыПокупателей.Заказ = ДокументОснование.ДокументОснование;
	Иначе
		НаборЗаписейЗаказыПокупателей.Заказ = Неопределено;
	КонецЕсли;
	НаборЗаписейЗаказыПокупателей.СкладКомпании = СкладКомпании;
	НаборЗаписейЗаказыПокупателей.Заказывать    = Истина;
	НаборЗаписейЗаказыПокупателей.Резервировать = Истина;
	НаборЗаписейЗаказыПокупателей.ЗакрытиеЗаказаПоДокументуОснованию = ЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду;
	СводныйРемонтныйЗаказДокументОснование = ДокументОснование.СводныйРемонтныйЗаказ.ДокументОснование;
	Отказ=НЕ НаборЗаписейЗаказыПокупателей.ЗакрытиеЗаказовПокупателя() ИЛИ Отказ;
	// Если было списание резервов то таблица товаров содержит списанные резервы
	РезультатЗапросаПоТоварам=НаборЗаписейЗаказыПокупателей.РезультатЗапросаПоТоварам;
	
	// Снимаем распределение заказов покупателя
	НаборЗаписейРаспределениеЗаказов = Движения.ЗаказыРаспределение;
	НаборЗаписейРаспределениеЗаказов.РежимПроведения = РежимПроведения;
	НаборЗаписейРаспределениеЗаказов.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейРаспределениеЗаказов.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам;
	НаборЗаписейРаспределениеЗаказов.ЗаказПокупателя = Неопределено;
	НаборЗаписейРаспределениеЗаказов.ЗаказПоставщика = Неопределено;
	НаборЗаписейРаспределениеЗаказов.ПоБазовомуКоличеству=Ложь;
	НаборЗаписейРаспределениеЗаказов.Контрагент = ДокументОснование.Контрагент;
	Отказ=НЕ НаборЗаписейРаспределениеЗаказов.ЗакрытиеЗаказовПокупателя() ИЛИ Отказ;
	
	ТоварыДокумента = ПакетыЗапроса[7].Выгрузить();
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыДокумента.Номенклатура КАК Номенклатура,
	|	ТоварыДокумента.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТоварыДокумента.ЦенаРозничная КАК ЦенаРозничная,
	|	ТоварыДокумента.Количество КАК Количество,
	|	ТоварыДокумента.Сумма КАК Сумма,
	|	ТоварыДокумента.Резерв КАК Резерв
	|ПОМЕСТИТЬ втТоварыДокумента
	|ИЗ
	|	&ТоварыДокумента КАК ТоварыДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатЗапросаПоТоварам.Номенклатура КАК Номенклатура,
	|	РезультатЗапросаПоТоварам.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	РезультатЗапросаПоТоварам.ЦенаРозничная КАК ЦенаРозничная,
	|	РезультатЗапросаПоТоварам.Количество КАК Количество,
	|	РезультатЗапросаПоТоварам.Сумма КАК Сумма,
	|	РезультатЗапросаПоТоварам.Резерв КАК Резерв
	|ПОМЕСТИТЬ втРезультатЗапросаПоТоварам
	|ИЗ
	|	&РезультатЗапросаПоТоварам КАК РезультатЗапросаПоТоварам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыДокумента.Номенклатура КАК Номенклатура,
	|	втТоварыДокумента.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	втТоварыДокумента.ЦенаРозничная КАК ЦенаРозничная,
	|	втТоварыДокумента.Количество КАК Количество,
	|	втТоварыДокумента.Сумма КАК Сумма,
	|	ЕСТЬNULL(втРезультатЗапросаПоТоварам.Резерв, 0) КАК Резерв
	|ПОМЕСТИТЬ втИтог
	|ИЗ
	|	втТоварыДокумента КАК втТоварыДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРезультатЗапросаПоТоварам КАК втРезультатЗапросаПоТоварам
	|		ПО втТоварыДокумента.Номенклатура = втРезультатЗапросаПоТоварам.Номенклатура
	|			И втТоварыДокумента.ХарактеристикаНоменклатуры = втРезультатЗапросаПоТоварам.ХарактеристикаНоменклатуры
	|			И втТоварыДокумента.ЦенаРозничная = втРезультатЗапросаПоТоварам.ЦенаРозничная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтог.Номенклатура КАК Номенклатура,
	|	втИтог.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	втИтог.ЦенаРозничная КАК ЦенаРозничная,
	|	втИтог.Количество КАК Количество,
	|	втИтог.Сумма КАК Сумма,
	|	СУММА(втИтог.Резерв) КАК Резерв
	|ИЗ
	|	втИтог КАК втИтог
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтог.Номенклатура,
	|	втИтог.ХарактеристикаНоменклатуры,
	|	втИтог.ЦенаРозничная,
	|	втИтог.Количество,
	|	втИтог.Сумма";
	Запрос.УстановитьПараметр("ТоварыДокумента", ТоварыДокумента);
	Запрос.УстановитьПараметр("РезультатЗапросаПоТоварам", РезультатЗапросаПоТоварам);
	
	ТоварыДокумента = Запрос.Выполнить().Выгрузить();
	
	// Списание товаров со склада
	НаборЗаписейОстатки=Движения.ОстаткиТоваровКомпании;
	НаборЗаписейОстатки.РежимПроведения=РежимПроведения;
	НаборЗаписейОстатки.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейОстатки.РезультатЗапросаПоТоварам=ТоварыДокумента;
	НаборЗаписейОстатки.СкладКомпании=СкладКомпании;
	НаборЗаписейОстатки.Приходовать=Истина;
	НаборЗаписейОстатки.Резервировать=РезультатЗапросаПоТоварам<>Неопределено;
	НаборЗаписейОстатки.ПоБазовомуКоличеству=Ложь;
	// НаборЗаписейОстатки.ДвиженияПоРознице=ПодразделениеКомпании.ПереоценкаРозницаПоРасходу И СкладКомпании.Розничный;
	НаборЗаписейОстатки.ДвиженияПоРознице=СкладКомпании.Розничный;
	Отказ=НЕ НаборЗаписейОстатки.Расход() ИЛИ Отказ;
	Если Отказ Тогда
		Возврат; // дальше смысла не имеет
	КонецЕсли;
	
	// проведем партии товаров
	Отказ = НЕ ПровестиПоПартиям(РежимПроведения,Ссылка) ИЛИ Отказ;
	
	РаботаСГраницами.СдвинутьГраницуЗаказов(Ссылка, ДополнительныеСвойства, Движения);
	
	Если НЕ Отказ Тогда
		// движения появились после записи, нужно обновить сумму
		СуммаДокумента = Документы.ПеремещениеТоваровВПроизводство.РассчитатьИтогиОперации(ЭтотОбъект).СуммаДокумента;
		ОбменДанными.Загрузка = Истина;
		Записать(РежимЗаписиДокумента.Запись);
		ОбменДанными.Загрузка = Ложь;
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ЗаполнитьРеквизитыСуммСписанияВДокументе(ЭтотОбъект, Отказ, "");
	
КонецПроцедуры // ОбработкаПроведения

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Заказ наряд"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаряд(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИменаИсключаемыхРеквизитов = "";
	Если ЗначениеЗаполнено(ЭтотОбъект.СкладКомпании) Тогда
		ИменаИсключаемыхРеквизитов = "СкладКомпании";
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ИменаИсключаемыхРеквизитов) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "Организация"))
		И Организация <> ДополнительныеСвойства.Организация Тогда
	
		Организация = ДополнительныеСвойства.Организация;
		Документы.ПеремещениеТоваровВПроизводство.ОрганизацияПриИзменении(ЭтотОбъект);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Заявка Тогда
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект,
			НСтр("ru = 'Заказ-наряд находится в состоянии ""Заявка"".
			|Вводить заказы на основании заказ-нарядов в состоянии ""Заявка"" запрещено.'"));
		Возврат Ложь;
	КонецЕсли;
	
	ТоварыИМатериалы = ПолучитьЗначениеПараметраСтруктуры(ЭтотОбъект.ДополнительныеСвойства, "ТоварыИМатериалы", Новый Структура);
	
	ЗапросТекст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТоваров.Коэффициент КАК Коэффициент,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаТоваров.СкладКомпании КАК СкладКомпании,
	|	СУММА(ТаблицаТоваров.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказНарядТовары.Номенклатура КАК Номенклатура,
	|		ЗаказНарядТовары.Количество КАК Количество,
	|		ЗаказНарядТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЗаказНарядТовары.Коэффициент КАК Коэффициент,
	|		ЗаказНарядТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ЗаказНарядТовары.СкладКомпании КАК СкладКомпании
	|	ИЗ
	|		Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
	|	ГДЕ
	|		ЗаказНарядТовары.Ссылка = &ЗаказНаряд" + ?(ТоварыИМатериалы.Свойство("Товары"), " И 
	|		ЗаказНарядТовары.НомерСтроки В (&НомераТоваров)", "") + "
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗаказНарядМатериалы.Номенклатура КАК Номенклатура,
	|		ЗаказНарядМатериалы.Количество КАК Количество,
	|		ЗаказНарядМатериалы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЗаказНарядМатериалы.Коэффициент КАК Коэффициент,
	|		ЗаказНарядМатериалы.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ЗаказНарядМатериалы.СкладКомпании КАК СкладКомпании
	|	ИЗ
	|		Документ.ЗаказНаряд.Материалы КАК ЗаказНарядМатериалы
	|	ГДЕ
	|		ЗаказНарядМатериалы.Ссылка = &ЗаказНаряд" + ?(ТоварыИМатериалы.Свойство("Материалы"), " И 
	|		ЗаказНарядМатериалы.НомерСтроки В (&НомераМатериалов)", "") + ") КАК ТаблицаТоваров
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.ЕдиницаИзмерения,
	|	ТаблицаТоваров.Коэффициент,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры,
	|	ТаблицаТоваров.СкладКомпании";
	
	Запрос = Новый Запрос(ЗапросТекст);
	Запрос.УстановитьПараметр("ЗаказНаряд", ДанныеЗаполнения);
	Если ТоварыИМатериалы.Свойство("Товары") Тогда
		Запрос.УстановитьПараметр("НомераТоваров", ТоварыИМатериалы.Товары);
	КонецЕсли;
	
	Если ТоварыИМатериалы.Свойство("Материалы") Тогда
		Запрос.УстановитьПараметр("НомераМатериалов", ТоварыИМатериалы.Материалы);
	КонецЕсли;
	
	ТаблицаТоваровЗН = Запрос.Выполнить().Выгрузить();
	
	КопияТаблицаТоваров = ТаблицаТоваровЗН.Скопировать();
	КопияТаблицаТоваров.Свернуть("СкладКомпании");
	
	Если КопияТаблицаТоваров.Количество() = 1 Тогда
		ЭтотОбъект.СкладКомпании = КопияТаблицаТоваров[0].СкладКомпании;
	КонецЕсли;
	
	Документы.ПеремещениеТоваровВПроизводство.ЗаполнитьОстаткамиПоЗаказНаряду(ЭтотОбъект, ТаблицаТоваровЗН, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаряд()

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// Формирует движения документа по партионным регистрам
// Режим - режим проведения (оперативный/неоперативный)
// ДокументСсылка - ссылка на документ который надо допровести по партиям
// Возвращает Истина - все хорошо, ложь - чего-то не так.
Функция ПровестиПоПартиям(Режим,ДокументСсылка) Экспорт
	Отказ=Ложь;
	
	// получим шапку документа
	ШапкаДокумента=ПолучитьШапкуДокумента(ДокументСсылка);
	
	// Очистим возможные движения по производственному регистру, 
	// если было отложенное проведение по партиям.
	НаборЗаписейТоварыВПроизводстве=РегистрыНакопления.ТоварыВПроизводстве.СоздатьНаборЗаписей();
	НаборЗаписейТоварыВПроизводстве.Отбор.Регистратор.Значение=ШапкаДокумента.Ссылка;
	НаборЗаписейТоварыВПроизводстве.Отбор.Регистратор.Использование=Истина;
	НаборЗаписейТоварыВПроизводстве.Записать();
	
	// Проверим, если подразделение проводиться по партиям "отложенно", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям=Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	
	Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
		// Поступление товаров в производство - создадим фиктивное перемещение в производство.
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	ПеремещениеТоваровВПроизводствоТовары.Номенклатура КАК Номенклатура,
		             |	ПеремещениеТоваровВПроизводствоТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		             |	ПеремещениеТоваровВПроизводствоТовары.Количество * ПеремещениеТоваровВПроизводствоТовары.Коэффициент КАК Количество,
					 |	&Склад КАК СкладКомпании,
		             |	NULL КАК СтатусПартии,
		             |	NULL КАК Партия,
		             |	NULL КАК ГТД,
					 |	0 КАК Сумма,
					 |	0 КАК СуммаНДС
		             |ИЗ
		             |	Документ.ПеремещениеТоваровВПроизводство.Товары КАК ПеремещениеТоваровВПроизводствоТовары
		             |ГДЕ
		             |	ПеремещениеТоваровВПроизводствоТовары.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка",ШапкаДокумента.Ссылка);
		Запрос.УстановитьПараметр("Склад", ШапкаДокумента.СкладКомпании);
		НаборЗаписейТоварыВПроизводстве=Движения.ТоварыВПроизводстве;
		НаборЗаписейТоварыВПроизводстве.РежимПроведения=Режим;
		НаборЗаписейТоварыВПроизводстве.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейТоварыВПроизводстве.РезультатЗапросаПоТоварам=Запрос.Выполнить().Выгрузить();
		НаборЗаписейТоварыВПроизводстве.ДокументЗаказНаряд=ШапкаДокумента.ДокументОснование;
		НаборЗаписейТоварыВПроизводстве.Цех=ШапкаДокумента.Цех;
		НаборЗаписейТоварыВПроизводстве.Организация=ШапкаДокумента.Организация;
		НаборЗаписейТоварыВПроизводстве.ЕстьСтавкаНДС=Ложь;
		НаборЗаписейТоварыВПроизводстве.ШапкаДокумента=ШапкаДокумента;
		Отказ=НЕ НаборЗаписейТоварыВПроизводстве.Приход() ИЛИ Отказ;
		
		РаботаСГраницами.СдвинутьГраницуПроизводства(ДокументСсылка, ДополнительныеСвойства, Движения);
		
		Возврат НЕ Отказ;
	КонецЕсли;
	
	// БАЛАНС: Если происходит перемещение товаров между складами подразделений, принадлежащих
	// различным балансовым "веткам", то возможен разрыв баланса.
	ДобавлятьКорректирующиеЗаписи = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
	ПодразделениеОтправителя      = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ШапкаДокумента.ПодразделениеОтправителя, ШапкаДокумента.Дата);
	ПодразделениеПолучатель       = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ШапкаДокумента.ПодразделениеПолучателя, ШапкаДокумента.Дата);
    ДобавлятьКорректирующиеЗаписи = ДобавлятьКорректирующиеЗаписи И (ПодразделениеОтправителя<>ПодразделениеПолучатель);
	
	// проверяем, присутствуют ли партии в табличной части
	ЕстьПартии = Ложь;
	Для Каждого СтрокаТовар Из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовар.Партия) Тогда
			ЕстьПартии = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// проведем партии товаров
	НаборЗаписейПартии=Движения.ПартииТоваровКомпании;
	НаборЗаписейПартии.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейПартии.СкладКомпании=ШапкаДокумента.СкладКомпании;
	НаборЗаписейПартии.Организация=ШапкаДокумента.Организация;
	НаборЗаписейПартии.СкладКомпанииКуда=Неопределено; //Формируем только расход по регистру партий
	НаборЗаписейПартии.ШапкаДокумента=ШапкаДокумента;
	НаборЗаписейПартии.РезультатЗапросаПоТоварам=Неопределено;
	НаборЗаписейПартии.ИмяРеквизитаДокумент=?(ЕстьПартии,"Партия","");
	НаборЗаписейПартии.ПоБазовомуКоличеству=Ложь;
	Отказ=НЕ НаборЗаписейПартии.Расход() ИЛИ Отказ;
	Если НЕ Отказ Тогда НаборЗаписейПартии.Записать(); КонецЕсли; 	
	НаборЗаписейПартии.ГраницаРасчетаОстатков=Неопределено; // сбросим границу
	
	// Поступление товаров в производство
	НаборЗаписейТоварыВПроизводстве=Движения.ТоварыВПроизводстве;
	НаборЗаписейТоварыВПроизводстве.РежимПроведения=Режим;
	НаборЗаписейТоварыВПроизводстве.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейТоварыВПроизводстве.РезультатЗапросаПоТоварам=НаборЗаписейПартии.Выгрузить();
	НаборЗаписейТоварыВПроизводстве.ДокументЗаказНаряд=ШапкаДокумента.ДокументОснование;
	НаборЗаписейТоварыВПроизводстве.Цех=ШапкаДокумента.Цех;
	НаборЗаписейТоварыВПроизводстве.Организация=ШапкаДокумента.Организация;
	НаборЗаписейТоварыВПроизводстве.ЕстьСтавкаНДС=Ложь;
	НаборЗаписейТоварыВПроизводстве.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейТоварыВПроизводстве.Приход() ИЛИ Отказ;
	
	// Переместим в производство маркируемый товар
	НаборЗаписейМаркировкаТоваровВПроизводстве = Движения.МаркировкаТоваровВПроизводстве;
	НаборЗаписейМаркировкаТоваровВПроизводстве.РежимПроведения = Режим;
	НаборЗаписейМаркировкаТоваровВПроизводстве.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейМаркировкаТоваровВПроизводстве.РезультатЗапросаПоТоварам = Неопределено;
	НаборЗаписейМаркировкаТоваровВПроизводстве.ДокументЗаказНаряд = ШапкаДокумента.ДокументОснование;
	НаборЗаписейМаркировкаТоваровВПроизводстве.Цех = ШапкаДокумента.Цех;
	НаборЗаписейМаркировкаТоваровВПроизводстве.ШапкаДокумента = ШапкаДокумента;
	Отказ = НЕ НаборЗаписейМаркировкаТоваровВПроизводстве.Приход() ИЛИ Отказ;
	
	// Доходы и расходы
	Если ДобавлятьКорректирующиеЗаписи Тогда
		// У подразделения склада-отправителя возникает расход.
		НаборЗаписейПартии=Движения.ПартииТоваровКомпании;
		ТаблицаПартий = НаборЗаписейПартии.Выгрузить();
		ТаблицаПартий.Свернуть("СтатусПартии","СуммаУпр");
		Для каждого ТекСтрокаДвижения Из ТаблицаПартий Цикл  	
			Если ТекСтрокаДвижения.СтатусПартии=Перечисления.СтатусыПартий.ТоварПринятыйКомиссия Тогда
				Продолжить;
			КонецЕсли;
			СуммаДиР = ТекСтрокаДвижения.СуммаУпр;
			Если СуммаДиР<>0 Тогда
				НаборЗаписейДоходыРасходы=Движения.ДоходыИРасходы;
				НаборЗаписейДоходыРасходы.ДокументОбъект = ЭтотОбъект;
				// Если способ ведения баланса не по подразделению то подразделение должно быть как у документа.
				Если БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата) Тогда
					НаборЗаписейДоходыРасходы.Подразделение = ШапкаДокумента.ПодразделениеОтправителя;
				Иначе
					НаборЗаписейДоходыРасходы.Подразделение = Неопределено;
				КонецЕсли;
				НаборЗаписейДоходыРасходы.ВУпрВалюте     = Истина;
				НаборЗаписейДоходыРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.Себестоимость;
				НаборЗаписейДоходыРасходы.ШапкаДокумента = ШапкаДокумента;
				НаборЗаписейДоходыРасходы.Расход         = СуммаДиР;
				Отказ = НЕ НаборЗаписейДоходыРасходы.Приход() ИЛИ Отказ;
			КонецЕсли;			
		КонецЦикла;			
		// У подразделения цеха-получателя - доход.
		НаборЗаписейТоварыВПроизводстве=Движения.ТоварыВПроизводстве;
		ТаблицаПартий = НаборЗаписейТоварыВПроизводстве.Выгрузить();
		ТаблицаПартий.Свернуть("СтатусПартии","СуммаУпр");
		Для каждого ТекСтрокаДвижения Из ТаблицаПартий Цикл  	
			Если ТекСтрокаДвижения.СтатусПартии=Перечисления.СтатусыПартий.ТоварПринятыйКомиссия Тогда
				Продолжить;
			КонецЕсли;
			СуммаДиР = ТекСтрокаДвижения.СуммаУпр;
			Если СуммаДиР<>0 Тогда
				НаборЗаписейДоходыРасходы=Движения.ДоходыИРасходы;
				НаборЗаписейДоходыРасходы.ДокументОбъект = ЭтотОбъект;
				НаборЗаписейДоходыРасходы.Подразделение  = ШапкаДокумента.ПодразделениеПолучателя;
				НаборЗаписейДоходыРасходы.ВУпрВалюте     = Истина;
				НаборЗаписейДоходыРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
				НаборЗаписейДоходыРасходы.ШапкаДокумента = ШапкаДокумента;
				НаборЗаписейДоходыРасходы.Доход          = СуммаДиР;
				Отказ = НЕ НаборЗаписейДоходыРасходы.Приход() ИЛИ Отказ;
			КонецЕсли;			
		КонецЦикла;			
	КонецЕсли; 	
	
	Если Ссылка <> ДокументСсылка Тогда
		
		РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоПартиямПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоПроизводствуПередПроведением(Ссылка, ДополнительныеСвойства);
		
	КонецЕсли;
	
	РаботаСГраницами.СдвинутьГраницуПартий(ДокументСсылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуПроизводства(ДокументСсылка, ДополнительныеСвойства, Движения);
	
	Возврат НЕ Отказ;
КонецФункции

// Возвращает выборку по шапке
// ДокументСсылка - Ссылка на документ для которого получаем шапку.
Функция ПолучитьШапкуДокумента(ДокументСсылка)
	Запрос=Новый Запрос("
	|ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ТипЦен КАК ТипЦен,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.Организация КАК Организация,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	/////////// ПРИВАТ ////////////
	|	Док.СкладКомпании КАК СкладКомпании,
	|	Док.Цех КАК Цех,
	|	Док.СкладКомпании.ПодразделениеКомпании КАК ПодразделениеОтправителя,
	|	Док.Цех.ПодразделениеКомпании КАК ПодразделениеПолучателя,
	|	Док.ДокументОснование КАК ДокументОснование,
	|	Док.ДокументОснование КАК ДокументПродажи
	|
	|ИЗ
	|	Документ."+Метаданные().Имя+" КАК Док
	|ГДЕ
	|	Док.Ссылка=&Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции

#КонецОбласти

Процедура ОснованияПеремещения(Знач ТекДокументОснование, Основания)
	
	Если ЗначениеЗаполнено(ТекДокументОснование) Тогда
		Основания.Добавить(ТекДокументОснование);
		Если ТипЗнч(ТекДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
			ОснованиеДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ТекДокументОснование,
				"СводныйРемонтныйЗаказ"
			);
			ОснованияПеремещения(ОснованиеДокументОснование, Основания);
			ОснованиеДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекДокументОснование, "ДокументОснование");
			ОснованияПеремещения(ОснованиеДокументОснование, Основания);
		ИначеЕсли ЕстьРеквизит (ТекДокументОснование, "ДокументОснование") Тогда
			ОснованиеДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекДокументОснование, "ДокументОснование");
			ОснованияПеремещения(ОснованиеДокументОснование, Основания)
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
