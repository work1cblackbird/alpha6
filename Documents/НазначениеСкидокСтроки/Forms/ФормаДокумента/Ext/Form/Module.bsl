///////////////////////////////////////////////////////////////////////////////
// Модуль основной формы документа "Назначение скидок строки"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// УтверждениеДокументов
	УтверждениеДокументовСервер.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	// Конец УтверждениеДокументов
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	РаботаСФормой.ОткрытьФормуТолькоДляПросмотра(ЭтотОбъект, Объект);
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	Если ЕстьРеквизит(Объект, "СпособВычисления", "Скидки") Тогда
		Для Каждого Строка Из Объект.Скидки Цикл
			Строка.СпособВычисления = ?(Строка.Скидка.СпособВычисления = Перечисления.СкидкиСпособВычисления.Абсолютная, ВалютаРегл, "%");
		КонецЦикла;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НастроитьПараметрыВыбораЭлементовФормы();
		УправлениеДиалогомНаСервере();
	КонецЕсли;
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);

КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// УтверждениеДокументов
	УтверждениеДокументовКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец УтверждениеДокументов
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// УтверждениеДокументов
	УтверждениеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец УтверждениеДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("НазначениеСкидокСтроки", ПараметрыЗаписи.РежимЗаписи, Ложь);
		
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Если ЕстьРеквизит(Объект, "СпособВычисления", "Скидки") Тогда
		Для Каждого Строка Из Объект.Скидки Цикл
			Строка.СпособВычисления = ?(Строка.Скидка.СпособВычисления = Перечисления.СкидкиСпособВычисления.Абсолютная, ВалютаРегл, "%");
		КонецЦикла;
	КонецЕсли;

	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);
	РаботаСФормойКлиент.ОбновитьПодчиненныеСчета(Объект.Ссылка, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.НазначениеСкидокСтроки.ДатаПриИзменении(Объект, ПараметрыДействия);

	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	ПараметрыДействия = Новый Структура;
	ДатаПриИзмененииНаСервере();
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.НазначениеСкидокСтроки.ХозОперацияПриИзменении(Объект);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	
	ХозОперацияПриИзмененииНаСервере();
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСкидки

&НаКлиенте
Процедура СкидкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Элемент.ТекущиеДанные.ИдентификаторСкидки = 0;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СкидкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеДиалогомДокументаКлиент.ТоварыПриОкончанииРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования, "Скидки");
	
КонецПроцедуры 

&НаСервере
Процедура СкидкиПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомДокументаСервер.ТоварыПослеУдаления(ЭтотОбъект, Элементы.Скидки, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура СкидкиПослеУдаления(Элемент)
	
	СкидкиПослеУдаленияНаСервере();
	
КонецПроцедуры 

#Область ОбработчикиСобытийПолейТаблицыФормыСкидки

&НаСервере
Процедура СкидкиНоменклатураПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Скидки.НайтиПоИдентификатору(Элементы.Скидки.ТекущаяСтрока);
	Документы.НазначениеСкидокСтроки.СкидкиНоменклатураПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, ТекущиеДанные, ПараметрыДействия);

КонецПроцедуры 

&НаКлиенте
Процедура СкидкиНоменклатураПриИзменении(Элемент)
	
	СкидкиНоменклатураПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура СкидкиСкидкаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Скидки.НайтиПоИдентификатору(Элементы.Скидки.ТекущаяСтрока);
	Документы.НазначениеСкидокСтроки.СкидкиСкидкаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ОбновитьПараметрыСкидки(ТекущиеДанные);

КонецПроцедуры 

&НаКлиенте
Процедура СкидкиСкидкаПриИзменении(Элемент)
	
	СкидкиСкидкаПриИзмененииНаСервере();

КонецПроцедуры 

&НаСервере
Процедура СкидкиЗначениеСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Скидки.НайтиПоИдентификатору(Элементы.Скидки.ТекущаяСтрока);
	Документы.НазначениеСкидокСтроки.СкидкиЗначениеСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);

КонецПроцедуры

&НаКлиенте
Процедура СкидкиЗначениеСкидкиПриИзменении(Элемент)
	
	СкидкиЗначениеСкидкиПриИзмененииНаСервере();

КонецПроцедуры 

&НаСервере
Процедура СкидкиТипНоменклатурыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Скидки.НайтиПоИдентификатору(Элементы.Скидки.ТекущаяСтрока);
	Документы.НазначениеСкидокСтроки.СкидкиТипНоменклатурыПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура СкидкиТипНоменклатурыПриИзменении(Элемент)
	
	СкидкиТипНоменклатурыПриИзмененииНаСервере();

КонецПроцедуры 

&НаСервере
Процедура СкидкиЦеноваяГруппаПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	ТекущиеДанные = Объект.Скидки.НайтиПоИдентификатору(Элементы.Скидки.ТекущаяСтрока);
	Документы.НазначениеСкидокСтроки.СкидкиЦеноваяГруппаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкиЦеноваяГруппаПриИзменении(Элемент)
	
	СкидкиЦеноваяГруппаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СкидкиДисконтнаяКартаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Скидки.НайтиПоИдентификатору(Элементы.Скидки.ТекущаяСтрока);
	Документы.НазначениеСкидокСтроки.СкидкиДисконтнаяКартаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);

КонецПроцедуры 

&НаКлиенте
Процедура СкидкиДисконтнаяКартаПриИзменении(Элемент)
	
	СкидкиДисконтнаяКартаПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура СкидкиКонВремяПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Скидки.НайтиПоИдентификатору(Элементы.Скидки.ТекущаяСтрока);
	Документы.НазначениеСкидокСтроки.СкидкиКонВремяПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);

КонецПроцедуры

&НаКлиенте
Процедура СкидкиКонВремяПриИзменении(Элемент)
	
	СкидкиКонВремяПриИзмененииНаСервере();

КонецПроцедуры 

&НаКлиенте
Процедура СкидкиДниНеделиПнПриИзменении(Элемент)
	
	УстановитьДеньНедели();
	
КонецПроцедуры 

&НаКлиенте
Процедура СкидкиДниНеделиВтПриИзменении(Элемент)
	
	УстановитьДеньНедели();
	
КонецПроцедуры 

&НаКлиенте
Процедура СкидкиДниНеделиСрПриИзменении(Элемент)
	
	УстановитьДеньНедели();
	
КонецПроцедуры 

&НаКлиенте
Процедура СкидкиДниНеделиЧтПриИзменении(Элемент)
	
	УстановитьДеньНедели();
	
КонецПроцедуры 

&НаКлиенте
Процедура СкидкиДниНеделиПтПриИзменении(Элемент)
	
	УстановитьДеньНедели();
	
КонецПроцедуры 

&НаКлиенте
Процедура СкидкиДниНеделиСбПриИзменении(Элемент)
	
	УстановитьДеньНедели();
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкиДниНеделиВсПриИзменении(Элемент)
	
	УстановитьДеньНедели();
	
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ЗаполнитьДействующимиСкидкамиНаСервере()
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкидкиСтрокиСрезПоследних.Скидка,
	|	СкидкиСтрокиСрезПоследних.ФлагВытеснения,
	|	СкидкиСтрокиСрезПоследних.СкидкаНаТовары,
	|	СкидкиСтрокиСрезПоследних.СкидкаНаРаботы,
	|	СкидкиСтрокиСрезПоследних.ЗначениеСкидки,
	|	СкидкиСтрокиСрезПоследних.Объект КАК Номенклатура,
	|	СкидкиСтрокиСрезПоследних.Объект КАК ТипНоменклатуры,
	|	СкидкиСтрокиСрезПоследних.Свойство,
	|	СкидкиСтрокиСрезПоследних.ОтКоличества КАК Количество,
	|	СкидкиСтрокиСрезПоследних.Правило,
	|	СкидкиСтрокиСрезПоследних.ОтСуммыСтроки КАК СуммаСтроки,
	|	СкидкиСтрокиСрезПоследних.ДисконтнаяКарта,
	|	СкидкиСтрокиСрезПоследних.ОтСуммыНакопленияНаКарте КАК СуммаНакопления,
	|	СкидкиСтрокиСрезПоследних.НачВремя,
	|	СкидкиСтрокиСрезПоследних.КонВремя,
	|	СкидкиСтрокиСрезПоследних.ДниНедели,
	|	СкидкиСтрокиСрезПоследних.ЗалОбслуживания КАК СкладКомпании,
	|	СкидкиСтрокиСрезПоследних.ИдентификаторСкидки КАК ИдентификаторСкидки
	|ИЗ
	|	РегистрСведений.СкидкиСтроки.СрезПоследних(
	|		&Дата,
	|		Подразделение = &ПодразделениеКомпании
	|		    И Скидка.ВидСкидки = &ВидСкидкиНаСтроку) КАК СкидкиСтрокиСрезПоследних
	|ГДЕ
	|	СкидкиСтрокиСрезПоследних.Действует
	|
	|УПОРЯДОЧИТЬ ПО
	|	СкидкиСтрокиСрезПоследних.Период
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата",                  Новый Граница(Объект.ДатаНачалаДействия, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	Запрос.УстановитьПараметр("ВидСкидкиНаСтроку",     Перечисления.ВидыСкидок.НаСтрокуДокумента);
	
	Объект.Скидки.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ОбновитьПараметрыСкидок();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДействующимиСкидками(Команда)
	
	Если Объект.Скидки.Количество() = 0 Тогда
		ЗаполнитьДействующимиСкидкамиНаСервере();
	Иначе
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияЗаполнитьДействующимиСкидками", ЭтотОбъект);
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Все строки из таблицы будут удалены."+Символы.ПС+"Продолжить ?'");
		// Получаем подтверждение операции от пользователя
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьДеньНедели()
	
	ТекущиеДанные = Элементы.Скидки.ТекущиеДанные;
	ТекущиеДанные.ДниНедели = ?(ПустаяСтрока(ТекущиеДанные.ДниНедели), "0000000", ТекущиеДанные.ДниНедели);
	
	ИмяКолонки = СтрЗаменить(Элементы.Скидки.ТекущийЭлемент.Имя, "Скидки", "");
	
	Действует  = ТекущиеДанные[ИмяКолонки];
	Значение   = ?(Действует, "1", "0");
	
	НомерДня = 1;
	Для Каждого ЭлементСписка Из СписокДней Цикл
		Если ЭлементСписка.Представление = ИмяКолонки Тогда
			НомерДня = ЭлементСписка.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЛеваяЧасть  = Лев(ТекущиеДанные.ДниНедели, НомерДня-1);
	ПраваяЧасть = Сред(ТекущиеДанные.ДниНедели, НомерДня+1);
	
	ТекущиеДанные.ДниНедели = ЛеваяЧасть + Значение + ПраваяЧасть;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыСкидок()
	
	Для Каждого ТекущаяСтрока Из Объект.Скидки Цикл
		ОбновитьПараметрыСкидки(ТекущаяСтрока);
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьПараметрыСкидки(ТекущаяСтрока)
	
	Для Каждого ДеньНедели Из СписокДней Цикл
		ТекущаяСтрока[ДеньНедели.Представление] = (Сред(ТекущаяСтрока.ДниНедели, ДеньНедели.Значение, 1) = "1");
	КонецЦикла;
		
	Если ЗначениеЗаполнено(ТекущаяСтрока.Скидка.ВидСвойства) Тогда
		ТекущаяСтрока.Свойство = ТекущаяСтрока.Скидка.ВидСвойства.ТипЗначения.ПривестиЗначение(ТекущаяСтрока.Свойство);
		
		Если ЕстьРеквизит(Объект, "ВладелецСвойства", "Скидки") Тогда
			ТекущаяСтрока.ВладелецСвойства = ?(ТипЗнч(ТекущаяСтрока.Свойство)=Тип("СправочникСсылка.ЗначенияСвойствОбъектов"), ТекущаяСтрока.Скидка.ВидСвойства, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияЗаполнитьДействующимиСкидками(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДействующимиСкидкамиНаСервере();
	КонецЕсли;
	
КонецПроцедуры 

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЗаполнениеОбъектов
&НаКлиенте
Процедура ПослеОбработкиЗаполнения(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ПослеОбработкиЗаполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиЗаполненияНаСервере()
	
	ЗаполнениеОбъектовАльфаАвто.ПослеОбработкиЗаполнения(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ЗаполнениеОбъектов

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры
// Конец Ядро

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// Вызываем общий обработчик события настройки параметров выбора
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
	СписокДней.Добавить(1, "ДниНеделиПн");
	СписокДней.Добавить(2, "ДниНеделиВт");
	СписокДней.Добавить(3, "ДниНеделиСр");
	СписокДней.Добавить(4, "ДниНеделиЧт");
	СписокДней.Добавить(5, "ДниНеделиПт");
	СписокДней.Добавить(6, "ДниНеделиСб");
	СписокДней.Добавить(7, "ДниНеделиВс");
	
	ОбновитьПараметрыСкидок();
	
	ВидыНоменклатуры = Справочники.ХозОперации.ПолучитьВидыНоменклатуры(Объект.ХозОперация);
	Если Не Элементы.Найти("СкидкиНоменклатура")=Неопределено Тогда
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.СкидкиНоменклатура.ПараметрыВыбора, "Отбор.ВидНоменклатуры", ВидыНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	ОтменаСкидки = (Объект.ХозОперация = Справочники.ХозОперации.ОтменаСтрочныхСкидок);
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
		
КонецПроцедуры 

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если НЕ УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	                                                                                                                
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура Подключаемый_ШтрихкодированиеОбработкаОповещения(РезультатОповещения,
	ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если РезультатОповещения.Свойство("Действие") Тогда
		ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры)

	ШтрихкодированиеВызовСервера.ОбработкаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры, , Объект);

КонецПроцедуры

#КонецОбласти

#Область УтверждениеДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуУтверждения(Команда)
	
	УтверждениеДокументовКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект.Ссылка);
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбработкуКомандыУтвержденияНаСервере(ПараметрыОбработки,
		ДополнительныеПараметры) Экспорт
	
	ОбработкаКомандыУтвержденияНаСервере(ПараметрыОбработки, ДополнительныеПараметры);
	Оповестить("ПослеУтвержденияДокументов", Объект.Ссылка, ИмяФормы);
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаКомандыУтвержденияНаСервере(ПараметрыОбработки, ДополнительныеПараметры)
	
	УтверждениеДокументовВызовСервера.ОбработкаКомандыФормы(ЭтотОбъект, ПараметрыОбработки.ИмяКоманды, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыУтвержденияДокументов()
	
	ОбновитьКомандыУтвержденияДокументовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыУтвержденияДокументовНаСервере()
	
	УтверждениеДокументовКлиентСервер.УстановитьДоступностьКнопокУтверждения(ЭтотОбъект, Объект, ТолькоПросмотр);
	УтверждениеДокументовВызовСервера.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, Объект, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти