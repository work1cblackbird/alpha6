// Модуль документа "Назначение скидок строки"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	// Произведем заполнение реквизитов документа
	ДатаНачалаДействия = Дата;
	
КонецПроцедуры

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	// Произведем заполнение реквизитов документа
	ДатаНачалаДействия = ТекущаяДатаСеанса();
	
КонецПроцедуры

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Здесь могут быть определены дополнительные к стандартным обязательным реквизитам условия проверки.
	Для Каждого ТекСтрока Из Скидки Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Номенклатура)
			И НЕ ЗначениеЗаполнено(ТекСтрока.ТипНоменклатуры)
			И НЕ ЗначениеЗаполнено(ТекСтрока.ЦеноваяГруппа) Тогда
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Таблица <Скидки> значение одной из колонок <Номенклатура>, <Тип номенклатуры> или <Ценовая группа> не заполнено. Строка номер %1.'"),
				ТекСтрока.НомерСтроки
			);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ссылка,,,Отказ);
			
		ИначеЕсли ТекСтрока.ЗначениеСкидки = 0 Тогда
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Таблица <Скидки> значение колонки <Значение скидки> не заполнено. Строка номер %1'"),
				ТекСтрока.НомерСтроки
			);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Ссылка,,,Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(
		ЭтотОбъект,
		Отказ,
		РежимЗаписи,
		РежимПроведения
	);
	
	// установим идентификатор скидки для каждой строки
	Для Каждого Строка Из Скидки Цикл
		
		Параметры								= Новый Структура();
		Параметры.Вставить("ПодразделениеКомпании", ПодразделениеКомпании);
		Параметры.Вставить("РучнаяСкидка",		Строка.Скидка.РучнаяСкидка);
		Параметры.Вставить("Объект",			?(ЗначениеЗаполнено(Строка.Номенклатура), Строка.Номенклатура, Строка.ТипНоменклатуры));
		Параметры.Вставить("НачВремя",			Строка.НачВремя);
		Параметры.Вставить("КонВремя",			Строка.КонВремя);
		Параметры.Вставить("ДниНедели",			Строка.ДниНедели);
		Параметры.Вставить("ДисконтнаяКарта",	Строка.ДисконтнаяКарта);
		Параметры.Вставить("ОтСуммыНакопленияНаКарте",Строка.СуммаНакопления);
		Параметры.Вставить("ЗалОбслуживания",	Строка.СкладКомпании);
		Параметры.Вставить("Свойство",			Строка.Свойство);
		Параметры.Вставить("ОтСуммыСтроки",		Строка.СуммаСтроки);
		Параметры.Вставить("ОтКоличества",		Строка.Количество);
		Параметры.Вставить("Правило",			Строка.Правило);
		Параметры.Вставить("Скидка",			Строка.Скидка);
		
		Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			
			Параметры.Вставить("Объект", Строка.Номенклатура);
			
		ИначеЕсли ЗначениеЗаполнено(Строка.ТипНоменклатуры) Тогда
			
			Параметры.Вставить("Объект", Строка.ТипНоменклатуры);
			
		Иначе
			
			Параметры.Вставить("Объект", Строка.ЦеноваяГруппа);
			
		КонецЕсли;
		
		Строка.ИдентификаторСкидки = СкидкиНаценкиСервер.ПолучитьИдентификаторСкидкиШапки(Параметры, Строка.ИдентификаторСкидки)
			+ ?(ЗначениеЗаполнено(Строка.ИдентификаторСкидки), 0, Строка.НомерСтроки);
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ,Проведение=Ложь)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Делаем движения по регистру "СкидкиСтроки"
	НаборЗаписейСкидки = Движения.СкидкиСтроки;
	НаборЗаписейСкидки.ДокументСсылка            = Ссылка;
	НаборЗаписейСкидки.ПодразделениеКомпании     = ПодразделениеКомпании;
	НаборЗаписейСкидки.РезультатЗапросаПоСкидкам = Документы.НазначениеСкидокСтроки.ПолучитьТаблицуСкидок(ЭтотОбъект);
	
	Если ХозОперация = Справочники.ХозОперации.НазначениеСтрочныхСкидок Тогда
		// Установка скидки на строку документа
		Отказ = Отказ ИЛИ НаборЗаписейСкидки.УстановитьСкидки();
	Иначе
		// Отмена скидки на строку документа
		Отказ = Отказ ИЛИ НаборЗаписейСкидки.ОтменитьСкидки();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Назначение скидок строки"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_НазначениеСкидокСтроки(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.ОтменаСтрочныхСкидок;
	Скидки.Очистить();
	
	// Скидки доступные для закрытия
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СкидкиСтрокиСрезПоследних.Скидка,
	|	СкидкиСтрокиСрезПоследних.ФлагВытеснения,
	|	СкидкиСтрокиСрезПоследних.СкидкаНаТовары,
	|	СкидкиСтрокиСрезПоследних.СкидкаНаРаботы,
	|	СкидкиСтрокиСрезПоследних.ЗначениеСкидки,
	|	СкидкиСтрокиСрезПоследних.Объект КАК Номенклатура,
	|	СкидкиСтрокиСрезПоследних.Объект КАК ТипНоменклатуры,
	|	СкидкиСтрокиСрезПоследних.Свойство,
	|	СкидкиСтрокиСрезПоследних.ОтКоличества КАК Количество,
	|	СкидкиСтрокиСрезПоследних.Правило,
	|	СкидкиСтрокиСрезПоследних.ОтСуммыСтроки КАК СуммаСтроки,
	|	СкидкиСтрокиСрезПоследних.ДисконтнаяКарта,
	|	СкидкиСтрокиСрезПоследних.ОтСуммыНакопленияНаКарте КАК СуммаНакопления,
	|	СкидкиСтрокиСрезПоследних.НачВремя,
	|	СкидкиСтрокиСрезПоследних.КонВремя,
	|	СкидкиСтрокиСрезПоследних.ДниНедели,
	|	СкидкиСтрокиСрезПоследних.ЗалОбслуживания КАК СкладКомпании,
	|	СкидкиСтрокиСрезПоследних.ИдентификаторСкидки КАК ИдентификаторСкидки
	|ИЗ
	|	РегистрСведений.СкидкиСтроки.СрезПоследних(
	|			&Дата,
	|			ИдентификаторСкидки В
	|					(ВЫБРАТЬ
	|						НазначениеСкидокСтрокиСкидки.ИдентификаторСкидки
	|					ИЗ
	|						Документ.НазначениеСкидокСтроки.Скидки КАК НазначениеСкидокСтрокиСкидки
	|					ГДЕ
	|						НазначениеСкидокСтрокиСкидки.Ссылка = &Основание)
	|				И ПодразделениеКомпании = &ПодразделениеКомпании
	|				И Скидка.ВидСкидки = &ВидСкидкиНаСтроку) КАК СкидкиСтрокиСрезПоследних
	|ГДЕ
	|	СкидкиСтрокиСрезПоследних.Действует
	|
	|УПОРЯДОЧИТЬ ПО
	|	СкидкиСтрокиСрезПоследних.Период
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("Дата",                  Дата);
	Запрос.УстановитьПараметр("Основание",             ДанныеЗаполнения.Ссылка);
	Запрос.УстановитьПараметр("ПодразделениеКомпании", ПодразделениеКомпании);
	Запрос.УстановитьПараметр("ВидСкидкиНаСтроку",     Перечисления.ВидыСкидок.НаСтрокуДокумента);
	
	Скидки.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_НазначениеСкидокСтроки()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
