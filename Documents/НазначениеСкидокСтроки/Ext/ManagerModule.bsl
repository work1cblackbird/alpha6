// Модуль менеджера документа "Назначение скидки строки"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", 0);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Функция получает таблицу скидок и их параметров действия
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьТаблицуСкидок(Объект) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НазначениеСкидокСтрокиСкидки.Скидка.РучнаяСкидка КАК РучнаяСкидка,
	|	ВЫБОР
	|		КОГДА НазначениеСкидокСтрокиСкидки.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			И НазначениеСкидокСтрокиСкидки.Номенклатура <> &РаботаПустая
	|			И НазначениеСкидокСтрокиСкидки.Номенклатура <> Неопределено
	|			ТОГДА НазначениеСкидокСтрокиСкидки.Номенклатура
	|		КОГДА НазначениеСкидокСтрокиСкидки.ТипНоменклатуры <> ЗНАЧЕНИЕ(Справочник.ТипыНоменклатуры.ПустаяСсылка)
	|			И НазначениеСкидокСтрокиСкидки.ТипНоменклатуры <> Неопределено
	|			ТОГДА НазначениеСкидокСтрокиСкидки.ТипНоменклатуры
	|		ИНАЧЕ НазначениеСкидокСтрокиСкидки.ЦеноваяГруппа
	|	КОНЕЦ КАК Объект,
	|	НазначениеСкидокСтрокиСкидки.НачВремя,
	|	НазначениеСкидокСтрокиСкидки.КонВремя,
	|	НазначениеСкидокСтрокиСкидки.ДниНедели,
	|	НазначениеСкидокСтрокиСкидки.ДисконтнаяКарта,
	|	НазначениеСкидокСтрокиСкидки.СуммаНакопления КАК ОтСуммыНакопленияНаКарте,
	|	НазначениеСкидокСтрокиСкидки.СкладКомпании КАК ЗалОбслуживания,
	|	НазначениеСкидокСтрокиСкидки.Свойство,
	|	НазначениеСкидокСтрокиСкидки.СуммаСтроки КАК ОтСуммыСтроки,
	|	НазначениеСкидокСтрокиСкидки.Количество КАК ОтКоличества,
	|	НазначениеСкидокСтрокиСкидки.Правило,
	|	НазначениеСкидокСтрокиСкидки.Скидка,
	|	НазначениеСкидокСтрокиСкидки.Ссылка КАК РегистраторСкидки,
	|	НазначениеСкидокСтрокиСкидки.ЗначениеСкидки,
	|	НазначениеСкидокСтрокиСкидки.Скидка.СпособВычисления КАК СпособВычисления,
	|	НазначениеСкидокСтрокиСкидки.ФлагВытеснения,
	|	НазначениеСкидокСтрокиСкидки.ИдентификаторСкидки,
	|	НазначениеСкидокСтрокиСкидки.СкидкаНаТовары,
	|	НазначениеСкидокСтрокиСкидки.СкидкаНаРаботы,
	|	ЕСТЬNULL(СкидкиСтрокиСрезПоследних.Действует, ЛОЖЬ) КАК СкидкаУстановлена
	|ИЗ
	|	Документ.НазначениеСкидокСтроки.Скидки КАК НазначениеСкидокСтрокиСкидки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкидкиСтроки.СрезПоследних(
	|		&Дата,
	|		ПодразделениеКомпании = &ПодразделениеКомпании
	|		    И Скидка В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		            НазначениеСкидокСтрокиСкидки.Скидка
	|		        ИЗ
	|		            Документ.НазначениеСкидокСтроки.Скидки КАК НазначениеСкидокСтрокиСкидки
	|		        ГДЕ
	|		            НазначениеСкидокСтрокиСкидки.Ссылка = &Ссылка)) КАК СкидкиСтрокиСрезПоследних
	|		ПО НазначениеСкидокСтрокиСкидки.НачВремя = СкидкиСтрокиСрезПоследних.НачВремя
	|			И НазначениеСкидокСтрокиСкидки.КонВремя = СкидкиСтрокиСрезПоследних.КонВремя
	|			И НазначениеСкидокСтрокиСкидки.ДниНедели = СкидкиСтрокиСрезПоследних.ДниНедели
	|			И НазначениеСкидокСтрокиСкидки.ДисконтнаяКарта = СкидкиСтрокиСрезПоследних.ДисконтнаяКарта
	|			И НазначениеСкидокСтрокиСкидки.СуммаНакопления = СкидкиСтрокиСрезПоследних.ОтСуммыНакопленияНаКарте
	|			И НазначениеСкидокСтрокиСкидки.СкладКомпании = СкидкиСтрокиСрезПоследних.ЗалОбслуживания
	|			И НазначениеСкидокСтрокиСкидки.Свойство = СкидкиСтрокиСрезПоследних.Свойство
	|			И НазначениеСкидокСтрокиСкидки.Скидка = СкидкиСтрокиСрезПоследних.Скидка
	|			И (НазначениеСкидокСтрокиСкидки.Номенклатура = СкидкиСтрокиСрезПоследних.Объект
	|				ИЛИ НазначениеСкидокСтрокиСкидки.ТипНоменклатуры = СкидкиСтрокиСрезПоследних.Объект
	|				ИЛИ НазначениеСкидокСтрокиСкидки.ЦеноваяГруппа = СкидкиСтрокиСрезПоследних.Объект)
	|			И НазначениеСкидокСтрокиСкидки.Количество = СкидкиСтрокиСрезПоследних.ОтКоличества
	|			И НазначениеСкидокСтрокиСкидки.Правило = СкидкиСтрокиСрезПоследних.Правило
	|			И НазначениеСкидокСтрокиСкидки.ЗначениеСкидки = СкидкиСтрокиСрезПоследних.ЗначениеСкидки
	|			И НазначениеСкидокСтрокиСкидки.СкидкаНаТовары = СкидкиСтрокиСрезПоследних.СкидкаНаТовары
	|			И НазначениеСкидокСтрокиСкидки.СкидкаНаРаботы = СкидкиСтрокиСрезПоследних.СкидкаНаРаботы
	|			И (СкидкиСтрокиСрезПоследних.Действует)
	|ГДЕ
	|	НазначениеСкидокСтрокиСкидки.Ссылка = &Ссылка";
	
	Запрос 												= Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка",					Объект.Ссылка);
	Запрос.УстановитьПараметр("Дата",					Новый Граница(Объект.ДатаНачалаДействия, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ПодразделениеКомпании", 	Объект.ПодразделениеКомпании);
	Запрос.УстановитьПараметр("НоменклатураПустая",    	Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("РаботаПустая",          	Справочники.Автоработы.ПустаяСсылка());
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьТаблицуСкидок()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДатаНачалаДействия");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Скидки");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Скидки.Скидка");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы скидки
	УникальныеСкидки = Новый Массив();
	
	УникальныеСкидки.Добавить("Скидка");
	УникальныеСкидки.Добавить("СкидкаНаТовары");
	УникальныеСкидки.Добавить("СкидкаНаРаботы");
	УникальныеСкидки.Добавить("ЗначениеСкидки");
	УникальныеСкидки.Добавить("Номенклатура");
	УникальныеСкидки.Добавить("ТипНоменклатуры");
	УникальныеСкидки.Добавить("ЦеноваяГруппа");
	УникальныеСкидки.Добавить("Свойство");
	УникальныеСкидки.Добавить("Количество");
	УникальныеСкидки.Добавить("СуммаСтроки");
	УникальныеСкидки.Добавить("ДисконтнаяКарта");
	УникальныеСкидки.Добавить("СуммаНакопления");
	УникальныеСкидки.Добавить("НачВремя");
	УникальныеСкидки.Добавить("КонВремя");
	УникальныеСкидки.Добавить("ДниНедели");
	УникальныеСкидки.Добавить("СкладКомпании");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Скидки", УникальныеСкидки);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Истина);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДатаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	// Отключим установку цен, так как в данном документе она не нужна
	ПараметрыДействия.ТребуетсяУстановкаЦен = Ложь;
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Скидки".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкиНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
		
		Строка.ЦеноваяГруппа = Справочники.ЦеновыеГруппы.ПустаяСсылка();
		Строка.ТипНоменклатуры = Справочники.ТипыНоменклатуры.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры // СкидкиНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Скидка" в таблице "Скидки".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкиСкидкаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Строка.Скидка) Тогда
		Возврат;
	КонецЕсли;
			
		Если ЕстьРеквизит(Объект, "СпособВычисления", "Скидки") Тогда
			Строка.СпособВычисления = ?(Строка.Скидка.СпособВычисления = Перечисления.СкидкиСпособВычисления.Абсолютная, Строка(Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить()), "%");
		КонецЕсли;
		
	Если Объект.ХозОперация = Справочники.ХозОперации.НазначениеСтрочныхСкидок Тогда
		// Произведем первоначальное заполнение некоторых полей текущей строки
		Строка.ФлагВытеснения = Строка.Скидка.ФлагВытеснения;
		Строка.КонВремя  = ?(ЗначениеЗаполнено(Строка.КонВремя), Строка.КонВремя, '00010101235959');
		Строка.ДниНедели = ?(ПустаяСтрока(Строка.ДниНедели), "1111111", Строка.ДниНедели);
		Строка.Правило   = ?(ЗначениеЗаполнено(Строка.Правило), Строка.Правило, Перечисления.ПравилаРасчетаСкидкиПоКоличеству.НеИспользуется);
		
		// Проверим корректность заполнения реквизита "ЗначениеСкидки"
		СкидкиЗначениеСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
		
	Иначе
		// Отмена скидок. Скидка выбрана, найдем ее среди установленных
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СкидкиСтрокиСрезПоследних.ФлагВытеснения,
		|	СкидкиСтрокиСрезПоследних.ЗначениеСкидки,
		|	СкидкиСтрокиСрезПоследних.Объект КАК Номенклатура,
		|	СкидкиСтрокиСрезПоследних.Объект КАК ТипНоменклатуры,
		|	СкидкиСтрокиСрезПоследних.Объект КАК ЦеноваяГруппа,
		|	СкидкиСтрокиСрезПоследних.Свойство,
		|	СкидкиСтрокиСрезПоследних.ОтКоличества КАК Количество,
		|	СкидкиСтрокиСрезПоследних.Правило,
		|	СкидкиСтрокиСрезПоследних.ОтСуммыСтроки КАК СуммаСтроки,
		|	СкидкиСтрокиСрезПоследних.ДисконтнаяКарта,
		|	СкидкиСтрокиСрезПоследних.ОтСуммыНакопленияНаКарте КАК СуммаНакопления,
		|	СкидкиСтрокиСрезПоследних.НачВремя,
		|	СкидкиСтрокиСрезПоследних.КонВремя,
		|	СкидкиСтрокиСрезПоследних.ДниНедели,
		|	СкидкиСтрокиСрезПоследних.ЗалОбслуживания КАК СкладКомпании,
		|	СкидкиСтрокиСрезПоследних.СкидкаНаТовары,
		|	СкидкиСтрокиСрезПоследних.СкидкаНаРаботы
		|ИЗ
		|	РегистрСведений.СкидкиСтроки.СрезПоследних(
		|		&Дата,
		|		ПодразделениеКомпании = &ПодразделениеКомпании
		|//ФИЛЬТРЫ
		|			И Скидка = &Скидка) КАК СкидкиСтрокиСрезПоследних
		|ГДЕ
		|	СкидкиСтрокиСрезПоследних.Действует
		|
		|УПОРЯДОЧИТЬ ПО
		|	СкидкиСтрокиСрезПоследних.Период
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Дата",                  Новый Граница(Объект.ДатаНачалаДействия, ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
		Запрос.УстановитьПараметр("Скидка",                Строка.Скидка);
		
		// Построим дополнительный фильтр по всем заполненным полям текущей строки
		СписокПолей = Новый Структура();
		СписокПолей.Вставить("Объект",                   ?(ЗначениеЗаполнено(Строка.Номенклатура), Строка.Номенклатура, Строка.ТипНоменклатуры));
		СписокПолей.Вставить("ОтКоличества",             Строка.Количество);
		СписокПолей.Вставить("Правило",                  Строка.Правило);
		СписокПолей.Вставить("НачВремя",                 Строка.НачВремя);
		СписокПолей.Вставить("КонВремя",                 Строка.КонВремя);
		СписокПолей.Вставить("ДниНедели",                ?(Строка.ДниНедели = "0000000", "", Строка.ДниНедели));
		СписокПолей.Вставить("ДисконтнаяКарта",          Строка.ДисконтнаяКарта);
		СписокПолей.Вставить("ОтСуммыНакопленияНаКарте", Строка.СуммаНакопления);
		СписокПолей.Вставить("ЗалОбслуживания",          Строка.СкладКомпании);
		СписокПолей.Вставить("Свойство",                 Строка.Свойство);
		СписокПолей.Вставить("ОтСуммыСтроки",            Строка.СуммаСтроки);
		
		Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			
			СписокПолей.Вставить("Объект", Строка.Номенклатура);
			
		ИначеЕсли ЗначениеЗаполнено(Строка.ТипНоменклатуры) Тогда
			
			СписокПолей.Вставить("Объект", Строка.ТипНоменклатуры);
			
		Иначе
			
			СписокПолей.Вставить("Объект", Строка.ЦеноваяГруппа);
			
		КонецЕсли;
		
		ДопПоляОтбора = "";
		
		Для Каждого ТекПоле Из СписокПолей Цикл
			Если НЕ ЗначениеЗаполнено(ТекПоле.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			ДопПоляОтбора = ДопПоляОтбора + "			И "+ТекПоле.Ключ + " = &" + ТекПоле.Ключ + Символы.ПС;
			Запрос.УстановитьПараметр(ТекПоле.Ключ, ТекПоле.Значение);
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(ДопПоляОтбора) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ФИЛЬТРЫ", ДопПоляОтбора);
		КонецЕсли;
		
		// Установим текст запроса и произведем заполнение строки документа найденными данными.
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Строка, Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СкидкиСкидкаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Значение скидки" в таблице "Скидки".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкиЗначениеСкидкиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если (Строка.ЗначениеСкидки > 100) И (Строка.Скидка.СпособВычисления=Перечисления.СкидкиСпособВычисления.Относительная) И (ЗначениеЗаполнено(Строка.Скидка)) Тогда
		Строка.ЗначениеСкидки = 100;
	КонецЕсли;
	
КонецПроцедуры // СкидкиЗначениеСкидкиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип номенклатуры" в таблице "Скидки".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкиТипНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Строка.ТипНоменклатуры) Тогда
		Если Строка.СкидкаНаТовары И Строка.СкидкаНаРаботы Тогда
			Строка.Номенклатура = Неопределено;
		ИначеЕсли Строка.СкидкаНаТовары Тогда
			Строка.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		ИначеЕсли Строка.СкидкаНаРаботы Тогда
			Строка.Номенклатура = Справочники.Автоработы.ПустаяСсылка();
		Иначе
			Строка.Номенклатура = Неопределено;
		КонецЕсли;
		
		Строка.ЦеноваяГруппа = Справочники.ЦеновыеГруппы.ПустаяСсылка();
		Строка.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // СкидкиТипНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ценовая группа" в таблице "Скидки".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкиЦеноваяГруппаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Строка.ЦеноваяГруппа) Тогда
		
		Строка.ТипНоменклатуры = Справочники.ЦеновыеГруппы.ПустаяСсылка();
		Строка.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры // СкидкиТипНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Дисконтная карта" в таблице "Скидки".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкиДисконтнаяКартаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Строка.СуммаНакопления = ?(ЗначениеЗаполнено(Строка.ДисконтнаяКарта), Строка.СуммаНакопления, 0);
	
КонецПроцедуры // СкидкиДисконтнаяКартаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Конечное время" в таблице "Скидки".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкиКонВремяПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Строка.КонВремя = Дата("00010101000000") Тогда
		Строка.КонВремя  = Дата("00010101235959");
	КонецЕсли;
	
КонецПроцедуры // СкидкиКонВремяПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Скидки");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "НазначениеСкидокСтроки");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Скидки");
	КонецЕсли;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "СкидкиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить действующими скидками'");
	Команда.Идентификатор	= "СкидкиЗаполнитьДействующимиСкидками";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Скидки";	
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("СкидкиЗаполнитьДействующимиСкидками.Видимость",     НЕ Объект.ХозОперация = Справочники.ХозОперации.НазначениеСтрочныхСкидок);
	ПараметрыКоманд.Вставить("СкидкиЗаполнитьДействующимиСкидками.Доступность", Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по заказам контрагенту
//
Функция СкидкиЗаполнитьДействующимиСкидками(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкидкиСтрокиСрезПоследних.Скидка,
	|	СкидкиСтрокиСрезПоследних.ФлагВытеснения,
	|	СкидкиСтрокиСрезПоследних.СкидкаНаТовары,
	|	СкидкиСтрокиСрезПоследних.СкидкаНаРаботы,
	|	СкидкиСтрокиСрезПоследних.ЗначениеСкидки,
	|	СкидкиСтрокиСрезПоследних.Объект КАК Номенклатура,
	|	СкидкиСтрокиСрезПоследних.Объект КАК ТипНоменклатуры,
	|	СкидкиСтрокиСрезПоследних.Объект КАК ЦеноваяГруппа,
	|	СкидкиСтрокиСрезПоследних.Свойство,
	|	СкидкиСтрокиСрезПоследних.ОтКоличества КАК Количество,
	|	СкидкиСтрокиСрезПоследних.Правило,
	|	СкидкиСтрокиСрезПоследних.ОтСуммыСтроки КАК СуммаСтроки,
	|	СкидкиСтрокиСрезПоследних.ДисконтнаяКарта,
	|	СкидкиСтрокиСрезПоследних.ОтСуммыНакопленияНаКарте КАК СуммаНакопления,
	|	СкидкиСтрокиСрезПоследних.НачВремя,
	|	СкидкиСтрокиСрезПоследних.КонВремя,
	|	СкидкиСтрокиСрезПоследних.ДниНедели,
	|	СкидкиСтрокиСрезПоследних.ЗалОбслуживания КАК СкладКомпании,
	|	СкидкиСтрокиСрезПоследних.ИдентификаторСкидки КАК ИдентификаторСкидки
	|ИЗ
	|	РегистрСведений.СкидкиСтроки.СрезПоследних(
	|		&Дата,
	|		ПодразделениеКомпании = &ПодразделениеКомпании
	|		    И Скидка.ВидСкидки = &ВидСкидкиНаСтроку) КАК СкидкиСтрокиСрезПоследних
	|ГДЕ
	|	СкидкиСтрокиСрезПоследних.Действует
	|
	|УПОРЯДОЧИТЬ ПО
	|	СкидкиСтрокиСрезПоследних.Период
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", Новый Граница(Объект.ДатаНачалаДействия, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	Запрос.УстановитьПараметр("ВидСкидкиНаСтроку", Перечисления.ВидыСкидок.НаСтрокуДокумента);
	
	Объект.Скидки.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецФункции // СкидкиЗаполнитьДействующимиСкидками()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Правило" в таблице "Скидки".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкиПравилоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Строка.Правило) Тогда
		Строка.Правило = Перечисления.ПравилаРасчетаСкидкиПоКоличеству.НеИспользуется;
	КонецЕсли;
	
КонецПроцедуры // СкидкиПравилоПриИзменении()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.НазначениеСкидокСтроки",
		"НазначениеСкидокСтроки",
		НСтр("ru = 'Назначение скидок строки'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НазначениеСкидокСтроки") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"НазначениеСкидокСтроки",
															НСтр("ru = 'Назначение скидок строки'"),
															ПечатьНазначениеСкидокСтроки(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//	Адрес   - адрес структуры данных во временном хранилище.
//
Функция ПечатьНазначениеСкидокСтроки(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НазначениеСкидокСтроки_НазначениеСкидокСтроки";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;

	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

		// Получим макет печатной формы.
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.НазначениеСкидокСтроки.НазначениеСкидокСтроки");
		
		// Установим параметры печати
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабличныйДокумент.АвтоМасштаб        = Истина;
		
		// Получение необходимых областей.
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// Заголовок
		ЗаполнитьЗначенияСвойств(ОбластьЗаголовок.Параметры, Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(
			Документ, Документ.ХозОперация.Наименование);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ОрганизацияПредставление = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ПодразделениеКомпанииПредставление =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ПодразделениеКомпании, Документ.Дата);
		
		// Выводим свойства
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Готовим шапку
		НомерСтраницы = 2; 
		НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура();
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// Получим данные для печати.
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НазначениеСкидокСтрокиСкидки.НомерСтроки,
		|	НазначениеСкидокСтрокиСкидки.Скидка,
		|	НазначениеСкидокСтрокиСкидки.Скидка.РучнаяСкидка КАК РучнаяСкидка,
		|	НазначениеСкидокСтрокиСкидки.ФлагВытеснения,
		|	НазначениеСкидокСтрокиСкидки.ЗначениеСкидки,
		|	НазначениеСкидокСтрокиСкидки.Номенклатура,
		|	НазначениеСкидокСтрокиСкидки.ТипНоменклатуры,
		|	НазначениеСкидокСтрокиСкидки.ЦеноваяГруппа,
		|	НазначениеСкидокСтрокиСкидки.Свойство,
		|	НазначениеСкидокСтрокиСкидки.Количество,
		|	НазначениеСкидокСтрокиСкидки.Правило,
		|	НазначениеСкидокСтрокиСкидки.СуммаСтроки,
		|	НазначениеСкидокСтрокиСкидки.ДисконтнаяКарта,
		|	НазначениеСкидокСтрокиСкидки.СуммаНакопления,
		|	НазначениеСкидокСтрокиСкидки.НачВремя,
		|	НазначениеСкидокСтрокиСкидки.КонВремя,
		|	НазначениеСкидокСтрокиСкидки.ДниНедели,
		|	ИСТИНА КАК Пн,
		|	ИСТИНА КАК Вт,
		|	ИСТИНА КАК Ср,
		|	ИСТИНА КАК Чт,
		|	ИСТИНА КАК Пт,
		|	ИСТИНА КАК Сб,
		|	ИСТИНА КАК Вс,
		|	НазначениеСкидокСтрокиСкидки.СкладКомпании,
		|	НазначениеСкидокСтрокиСкидки.СкидкаНаТовары,
		|	НазначениеСкидокСтрокиСкидки.СкидкаНаРаботы
		|ИЗ
		|	Документ.НазначениеСкидокСтроки.Скидки КАК НазначениеСкидокСтрокиСкидки
		|ГДЕ
		|	НазначениеСкидокСтрокиСкидки.Ссылка = &Ссылка";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
		
		// Перебор строк
		ВыборкаТабличнойЧасти = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			// Заполняем данные строки
			ДниНедели = СтрокаТЧ.ДниНедели;
			СтрокаТЧ.Пн = (Сред(ДниНедели, 1, 1) = "1");
			СтрокаТЧ.Вт = (Сред(ДниНедели, 2, 1) = "1");
			СтрокаТЧ.Ср = (Сред(ДниНедели, 3, 1) = "1");
			СтрокаТЧ.Чт = (Сред(ДниНедели, 4, 1) = "1");
			СтрокаТЧ.Пт = (Сред(ДниНедели, 5, 1) = "1");
			СтрокаТЧ.Сб = (Сред(ДниНедели, 6, 1) = "1");
			СтрокаТЧ.Вс = (Сред(ДниНедели, 7, 1) = "1");
			
			ОбластьСтрока.Параметры.Заполнить(СтрокаТЧ);
			// Применим форматирование к полям строки.
			ОбластьСтрока.Параметры.ЗначениеСкидки           = Формат(СтрокаТЧ.ЗначениеСкидки, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СуммаСтроки              = Формат(СтрокаТЧ.СуммаСтроки, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.Количество               = Формат(СтрокаТЧ.Количество, ФорматВыводаКоличества);
			ОбластьСтрока.Параметры.СуммаНакопления          = Формат(СтрокаТЧ.СуммаНакопления, ФорматВыводаСуммы);
			
			// Выводим строку, делая проверку попадания на лист.
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;	
		КонецЦикла;
		
		// Заполнение подвала и итогов.
		ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'")
			+ Символы.НПП + ВыборкаТабличнойЧасти.Количество();
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// Блок области
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции  // ПечатьНазначениеСкидокСтроки()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.НазначениеСкидокСтроки);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.НазначениеСкидокСтроки);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли