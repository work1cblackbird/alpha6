// Модуль менеджера документа "Бюджет доходов и расходов"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.БюджетДоходовИРасходов);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.БюджетДоходовИРасходов);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.РасходыИДоходы.Итог("СуммаДоход")-Объект.РасходыИДоходы.Итог("СуммаРасход"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Заполняет статьями выручки Табличную часть "РасходыИДоходы"
//
Процедура ЗаполнитьСтатьямиВыручки(Объект, РезультатАвтозаполнения)
	
	Запрос = Новый Запрос;
	СуммаУпр = 0;
	
	Если РезультатАвтозаполнения.СпособРасчетаВыручки = 0 Тогда
		
		// Заполнение табличной части
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПродажиОбороты.СуммаУпрОборот * &Коэффициент КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаКонца, , ПодразделениеКомпании = &Подразделение) КАК ПродажиОбороты";
		
		Запрос.УстановитьПараметр("Подразделение", Объект.ПодразделениеКомпании);
		Запрос.УстановитьПараметр("Коэффициент", ?(РезультатАвтозаполнения.КоличествоПериодовВыручка <= 0, 0, РезультатАвтозаполнения.КоэффициентСезонностиВыручка * РезультатАвтозаполнения.КоэффициентРостаВыручка / РезультатАвтозаполнения.КоличествоПериодовВыручка));
		
		ПараметрыДляАнализаДат = Новый Структура;
		ПараметрыДляАнализаДат.Вставить("Периодичность"     , Объект.СценарийПланирования.Периодичность);
		ПараметрыДляАнализаДат.Вставить("ДатаИзПериода"     , Объект.ДатаПланирования);
		ПараметрыДляАнализаДат.Вставить("КоличествоПериодов", РезультатАвтозаполнения.КоличествоПериодовВыручка);
		ПланированиеСервер.ПолучитьДатыПланируемогоПериода(ПараметрыДляАнализаДат);
		Запрос.УстановитьПараметр("ДатаНачала", ПараметрыДляАнализаДат.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаКонца",  ПараметрыДляАнализаДат.ДатаКонца);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			СуммаУпр = ?(Выборка.СуммаУпр = NULL, 0, Выборка.СуммаУпр);
		КонецЕсли;
		
	Иначе
		
		// По документу основанию
		СуммаУпр = РезультатАвтозаполнения.ДокументОснованиеВыручка.Товары.Итог("СуммаВсегоУпр");
		
	КонецЕсли;
	
	Если СуммаУпр > 0 Тогда
		
		Строки = Новый Массив;
		
		// проверим, может статьи "Выручки" уже есть в табличной части
		Для Каждого ТекСтрока Из Объект.РасходыИДоходы Цикл
			Если ТекСтрока.СтатьяРасходовИДоходов.ВидСтатьи = Перечисления.ВидыСтатейДоходовИРасходов.ВыручкаОтОсновногоВидаДеятельности Тогда
				Строки.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Если Строки.Количество() > 0 Тогда
			
			// Удалим их
			Для Каждого ТекСтрока Из Строки Цикл
				Если ТекСтрока.СтатьяРасходовИДоходов.ВидСтатьи = Перечисления.ВидыСтатейДоходовИРасходов.ВыручкаОтОсновногоВидаДеятельности Тогда
					Объект.РасходыИДоходы.Удалить(ТекСтрока);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		// Ищем нужные статьи и находим весовые коэффициенты
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатьиДоходовИРасходов.Ссылка КАК Статья,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДоходыИРасходыОбороты.ДоходУпрПриход, 0) - ЕСТЬNULL(ДоходыИРасходыОбороты.РасходУпрПриход, 0) < 0
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(ДоходыИРасходыОбороты.ДоходУпрПриход, 0) - ЕСТЬNULL(ДоходыИРасходыОбороты.РасходУпрПриход, 0)
		|	КОНЕЦ КАК Выручка
		|ИЗ
		|	Справочник.СтатьиДоходовИРасходов КАК СтатьиДоходовИРасходов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДоходыИРасходы.Обороты(&ДатаНачала, &ДатаКонца, , ПодразделениеКомпании = &Подразделение) КАК ДоходыИРасходыОбороты
		|		ПО ДоходыИРасходыОбороты.СтатьяДоходовИРасходов = СтатьиДоходовИРасходов.Ссылка
		|ГДЕ
		|	СтатьиДоходовИРасходов.ПометкаУдаления = ЛОЖЬ
		|	И СтатьиДоходовИРасходов.ЭтоГруппа = ЛОЖЬ
		|	И СтатьиДоходовИРасходов.ВидСтатьи = &ВидСтатьи";
		
		Запрос.УстановитьПараметр("Подразделение", Объект.ПодразделениеКомпании);
		Запрос.УстановитьПараметр("ВидСтатьи",     Перечисления.ВидыСтатейДоходовИРасходов.ВыручкаОтОсновногоВидаДеятельности);
		
		Если РезультатАвтозаполнения.СпособРасчетаВыручки = 0 Тогда
			ПараметрыДляАнализаДат = Новый Структура;
			ПараметрыДляАнализаДат.Вставить("Периодичность"     , Объект.СценарийПланирования.Периодичность);
			ПараметрыДляАнализаДат.Вставить("ДатаИзПериода"     , Объект.ДатаПланирования);
			ПараметрыДляАнализаДат.Вставить("КоличествоПериодов", РезультатАвтозаполнения.КоличествоПериодовВыручка);
			ПланированиеСервер.ПолучитьДатыПланируемогоПериода(ПараметрыДляАнализаДат);
			Запрос.УстановитьПараметр("ДатаНачала", ПараметрыДляАнализаДат.ДатаНачала);
			Запрос.УстановитьПараметр("ДатаКонца",  ПараметрыДляАнализаДат.ДатаКонца);
		Иначе
			
			// По документу основанию, значит проанализируем оборот за предыдущий 
			// (от даты планирования документа основания) период.
			ПараметрыДляАнализаДат = Новый Структура;
			ПараметрыДляАнализаДат.Вставить("Периодичность", Объект.СценарийПланирования.Периодичность);
			ПараметрыДляАнализаДат.Вставить("ДатаИзПериода", РезультатАвтозаполнения.ДокументОснованиеВыручка.ДатаПланирования);
			ПараметрыДляАнализаДат.Вставить("Действие",-1);
			ПланированиеСервер.ПолучитьДатыПланируемогоПериода(ПараметрыДляАнализаДат);
			Запрос.УстановитьПараметр("ДатаНачала", ПараметрыДляАнализаДат.ДатаНачала);
			Запрос.УстановитьПараметр("ДатаКонца",  ПараметрыДляАнализаДат.ДатаКонца);
			
		КонецЕсли;
		
		Результат = Запрос.Выполнить().Выгрузить();
		Результат.Колонки.Добавить("СуммаПослеРаспределения", Новый ОписаниеТипов("Число",
		Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
		
		Если Результат.Количество() > 0 Тогда
			ВыручкаИтого = Результат.Итог("Выручка");
			Если ВыручкаИтого=0 Тогда
				КоличествоСтрок = Результат.Количество();
				Для Каждого ТекСтрока Из Результат Цикл
					
					ТекСтрока.СуммаПослеРаспределения = СуммаУпр / КоличествоСтрок;
					
					// Добавляем в табличную часть
					Если ТекСтрока.СуммаПослеРаспределения > 0 Тогда
						НоваяСтрока = Объект.РасходыИДоходы.Добавить();
						НоваяСтрока.СтатьяРасходовИДоходов = ТекСтрока.Статья;
						НоваяСтрока.СуммаДоход             = ТекСтрока.СуммаПослеРаспределения;
					КонецЕсли;
					
				КонецЦикла;
			Иначе
				Для Каждого ТекСтрока Из Результат Цикл
					
					ТекСтрока.СуммаПослеРаспределения = ТекСтрока.Выручка / ВыручкаИтого * СуммаУпр;
					
					// Добавляем в табличную часть
					Если ТекСтрока.СуммаПослеРаспределения > 0 Тогда
						НоваяСтрока = Объект.РасходыИДоходы.Добавить();
						НоваяСтрока.СтатьяРасходовИДоходов = ТекСтрока.Статья;
						НоваяСтрока.СуммаДоход             = ТекСтрока.СуммаПослеРаспределения;
						Если РезультатАвтозаполнения.СпособРасчетаВыручки = 0 Тогда
							НоваяСтрока.СпособЗаполнения = НСтр("ru = 'По фактическим данным продаж: Количество периодов'") + Символы.НПП 
										+ РезультатАвтозаполнения.КоличествоПериодовВыручка + ";" + Символы.НПП 
										+ НСтр("ru = 'Результирующий коэффициент'") + Символы.НПП 
										+ (РезультатАвтозаполнения.КоэффициентРостаВыручка * РезультатАвтозаполнения.КоэффициентСезонностиВыручка) + ";";
						Иначе	
							НоваяСтрока.СпособЗаполнения = "" + РезультатАвтозаполнения.ДокументОснованиеВыручка;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru ='Заполнение статьями доходов от основной деятельности не выполнено. Сумма выручки равна 0.'"));
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтатьямиВыручки()

// Заполняет статьями накладных доходов и расходов Табличную часть "РасходыИДоходы"
//
Процедура ЗаполнитьСтатьиНакладныхДоходовИРасходов(Объект, РезультатАвтозаполнения)
	
	// Сначала удалим существующие
	МассивДляУдаления = Новый Массив;
	
	Для Каждого ТекСтрока Из Объект.РасходыИДоходы Цикл
		Если ТекСтрока.СтатьяРасходовИДоходов.ВидСтатьи = Перечисления.ВидыСтатейДоходовИРасходов.НакладныеДоходы
			ИЛИ ТекСтрока.СтатьяРасходовИДоходов.ВидСтатьи = Перечисления.ВидыСтатейДоходовИРасходов.НакладныеРасходы Тогда
			МассивДляУдаления.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДляУдаления.Количество() <> 0 Тогда
		Для Каждого ТекСтрока Из МассивДляУдаления Цикл
			Объект.РасходыИДоходы.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
	// Теперь заполним
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатьиДоходовИРасходов.Ссылка
	|ИЗ
	|	Справочник.СтатьиДоходовИРасходов КАК СтатьиДоходовИРасходов
	|ГДЕ
	|	СтатьиДоходовИРасходов.ПометкаУдаления = ЛОЖЬ
	|	И СтатьиДоходовИРасходов.ЭтоГруппа = ЛОЖЬ
	|	И СтатьиДоходовИРасходов.ВидСтатьи В(&ВидСтатьи)";
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ВидыСтатейДоходовИРасходов.НакладныеДоходы);
	Массив.Добавить(Перечисления.ВидыСтатейДоходовИРасходов.НакладныеРасходы);
	Запрос.УстановитьПараметр("ВидСтатьи", Массив);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.РасходыИДоходы.Добавить();
		НоваяСтрока.СтатьяРасходовИДоходов = Выборка.Ссылка;
		НоваяСтрока.СуммаДоход  = 0;
		НоваяСтрока.СуммаРасход = 0;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСтатьиНакладныхДоходовИРасходов()

// Заполняет статьями себестоимости Табличную часть "РасходыИДоходы"
//
Процедура ЗаполнитьСтатьямиСебестоимости(Объект, РезультатАвтозаполнения)
	
	Запрос = Новый Запрос;
	СебестоимостьУпр = 0;
	
	Если РезультатАвтозаполнения.СпособРасчетаСебестоимости = 0 ИЛИ РезультатАвтозаполнения.СпособРасчетаСебестоимости = 1 Тогда
		
		// Заполнение табличной части
		Если РезультатАвтозаполнения.СпособРасчетаСебестоимости = 0 Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПродажиОбороты.СебестоимостьУпрОборот * &Коэффициент КАК СебестоимостьУпр
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаКонца, , ПодразделениеКомпании = &Подразделение) КАК ПродажиОбороты";
			
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПартииТоваровКомпанииОбороты.СуммаУпрПриход * &Коэффициент КАК СебестоимостьУпр
			|ИЗ
			|	РегистрНакопления.ПартииТоваровКомпании.Обороты(&ДатаНачала, &ДатаКонца, , СкладКомпании.ПодразделениеКомпании = &Подразделение) КАК ПартииТоваровКомпанииОбороты";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Подразделение", Объект.ПодразделениеКомпании);
		Запрос.УстановитьПараметр("Коэффициент",   ?(РезультатАвтозаполнения.КоличествоПериодовСебестоимость <= 0, 0, РезультатАвтозаполнения.КоэффициентСезонностиСебестоимость * РезультатАвтозаполнения.КоэффициентРостаСебестоимость / РезультатАвтозаполнения.КоличествоПериодовСебестоимость));
		
		ПараметрыДляАнализаДат = Новый Структура;
		ПараметрыДляАнализаДат.Вставить("Периодичность"     ,   Объект.СценарийПланирования.Периодичность);
		ПараметрыДляАнализаДат.Вставить("ДатаИзПериода"     ,   Объект.ДатаПланирования);
		ПараметрыДляАнализаДат.Вставить("КоличествоПериодов", РезультатАвтозаполнения.КоличествоПериодовСебестоимость);
		ПланированиеСервер.ПолучитьДатыПланируемогоПериода(ПараметрыДляАнализаДат);
		Запрос.УстановитьПараметр("ДатаНачала", ПараметрыДляАнализаДат.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаКонца",  ПараметрыДляАнализаДат.ДатаКонца);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			СебестоимостьУпр = ?(Выборка.СебестоимостьУпр = NULL, 0, Выборка.СебестоимостьУпр);
		КонецЕсли;
		
	Иначе
		
		// По документу основанию
		Если РезультатАвтозаполнения.СпособРасчетаСебестоимости=2 Тогда
			СебестоимостьУпр = РезультатАвтозаполнения.ДокументОснованиеСебестоимость.Товары.Итог("СебестоимостьУпр");
		Иначе
			СебестоимостьУпр = РезультатАвтозаполнения.ДокументОснованиеСебестоимость.Товары.Итог("СуммаВсегоУпр");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СебестоимостьУпр > 0 Тогда
		
		Строки = Новый Массив;
		
		// проверим, может статьи "Выручки" уже есть в табличной части
		Для Каждого ТекСтрока Из Объект.РасходыИДоходы Цикл
			Если ТекСтрока.СтатьяРасходовИДоходов.ВидСтатьи = Перечисления.ВидыСтатейДоходовИРасходов.Себестоимость Тогда
				Строки.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Если Строки.Количество() > 0 Тогда
			
			// Удалим их
			Для Каждого ТекСтрока Из Строки Цикл
				Объект.РасходыИДоходы.Удалить(ТекСтрока);
			КонецЦикла;
			
		КонецЕсли;
		
		// Ищем нужные статьи и находим весовые коэффициенты
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатьиДоходовИРасходов.Ссылка КАК Статья,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДоходыИРасходыОбороты.РасходУпрПриход, 0) - ЕСТЬNULL(ДоходыИРасходыОбороты.ДоходУпрПриход, 0) < 0
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(ДоходыИРасходыОбороты.РасходУпрПриход, 0) - ЕСТЬNULL(ДоходыИРасходыОбороты.ДоходУпрПриход, 0)
		|	КОНЕЦ КАК ОборотПоСтатье
		|ИЗ
		|	Справочник.СтатьиДоходовИРасходов КАК СтатьиДоходовИРасходов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДоходыИРасходы.Обороты(&ДатаНачала, &ДатаКонца, , ПодразделениеКомпании = &Подразделение) КАК ДоходыИРасходыОбороты
		|		ПО ДоходыИРасходыОбороты.СтатьяДоходовИРасходов = СтатьиДоходовИРасходов.Ссылка
		|ГДЕ
		|	СтатьиДоходовИРасходов.ПометкаУдаления = ЛОЖЬ
		|	И СтатьиДоходовИРасходов.ЭтоГруппа = ЛОЖЬ
		|	И СтатьиДоходовИРасходов.ВидСтатьи = &ВидСтатьи";
		
		Запрос.УстановитьПараметр("Подразделение", Объект.ПодразделениеКомпании);
		Запрос.УстановитьПараметр("ВидСтатьи",     Перечисления.ВидыСтатейДоходовИРасходов.Себестоимость);
		
		Если РезультатАвтозаполнения.СпособРасчетаСебестоимости = 0 ИЛИ РезультатАвтозаполнения.СпособРасчетаСебестоимости = 1 Тогда
			
			ПараметрыДляАнализаДат = Новый Структура;
			ПараметрыДляАнализаДат.Вставить("Периодичность"     , Объект.СценарийПланирования.Периодичность);
			ПараметрыДляАнализаДат.Вставить("ДатаИзПериода"     , Объект.ДатаПланирования);
			ПараметрыДляАнализаДат.Вставить("КоличествоПериодов", РезультатАвтозаполнения.КоличествоПериодовСебестоимость);
			ПланированиеСервер.ПолучитьДатыПланируемогоПериода(ПараметрыДляАнализаДат);
			Запрос.УстановитьПараметр("ДатаНачала", ПараметрыДляАнализаДат.ДатаНачала);
			Запрос.УстановитьПараметр("ДатаКонца",  ПараметрыДляАнализаДат.ДатаКонца);
			
		Иначе
			
			// По документу основанию, значит проанализируем оборот за предыдущий
			// (от даты планирования документа основания) период.
			ПараметрыДляАнализаДат = Новый Структура;
			ПараметрыДляАнализаДат.Вставить("Периодичность",     Объект.СценарийПланирования.Периодичность);
			ПараметрыДляАнализаДат.Вставить("ДатаИзПериода",     РезультатАвтозаполнения.ДокументОснованиеСебестоимость.ДатаПланирования);
			ПараметрыДляАнализаДат.Вставить("Действие"     ,     -1);
			ПланированиеСервер.ПолучитьДатыПланируемогоПериода(ПараметрыДляАнализаДат);
			Запрос.УстановитьПараметр("ДатаНачала", ПараметрыДляАнализаДат.ДатаНачала);
			Запрос.УстановитьПараметр("ДатаКонца", ПараметрыДляАнализаДат.ДатаКонца);
			
		КонецЕсли;
		
		ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
		ТаблицаРезультат.Колонки.Добавить("СуммаПослеРаспределения", Новый ОписаниеТипов("Число",
									Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
		
		Если ТаблицаРезультат.Количество()>0 Тогда
			
			СебестоимостьИтого = ТаблицаРезультат.Итог("ОборотПоСтатье");
			
			Если СебестоимостьИтого = 0 Тогда
				
				КоличествоСтрок = ТаблицаРезультат.Количество();
				
				Для Каждого ТекСтрока Из ТаблицаРезультат Цикл
					
					ТекСтрока.СуммаПослеРаспределения = СебестоимостьУпр / КоличествоСтрок;
					
					// Добавляем в табличную часть
					Если ТекСтрока.СуммаПослеРаспределения > 0 Тогда
						
						НоваяСтрока = Объект.РасходыИДоходы.Добавить();
						НоваяСтрока.СтатьяРасходовИДоходов = ТекСтрока.Статья;
						НоваяСтрока.СуммаРасход            = ТекСтрока.СуммаПослеРаспределения;
						
						Если РезультатАвтозаполнения.СпособРасчетаСебестоимости = 0 Тогда
							НоваяСтрока.СпособЗаполнения = НСтр("ru = 'По фактическим данным продаж: Количество периодов'") + Символы.НПП
															+ РезультатАвтозаполнения.КоличествоПериодовСебестоимость + ";" + Символы.НПП 
															+ НСтр("ru = 'Результирующий коэффициент'") + Символы.НПП 
															+ (РезультатАвтозаполнения.КоэффициентРостаСебестоимость*РезультатАвтозаполнения.КоэффициентСезонностиСебестоимость) + ";";
						ИначеЕсли РезультатАвтозаполнения.СпособРасчетаСебестоимости = 1 Тогда
							НоваяСтрока.СпособЗаполнения = НСтр("ru = 'По фактическим данным закупок: Количество периодов'") + Символы.НПП 
															+ РезультатАвтозаполнения.КоличествоПериодовСебестоимость + ";" + Символы.НПП 
															+ НСтр("ru = 'Результирующий коэффициент'") + Символы.НПП 
															+ (РезультатАвтозаполнения.КоэффициентРостаСебестоимость*РезультатАвтозаполнения.КоэффициентСезонностиСебестоимость) + ";";
						Иначе
							НоваяСтрока.СпособЗаполнения = "" + РезультатАвтозаполнения.ДокументОснованиеСебестоимость;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
			Иначе
				Для Каждого ТекСтрока Из ТаблицаРезультат Цикл
					
					ТекСтрока.СуммаПослеРаспределения = ТекСтрока.ОборотПоСтатье / СебестоимостьИтого * СебестоимостьУпр;
					
					// Добавляем в табличную часть
					Если ТекСтрока.СуммаПослеРаспределения > 0 Тогда
						НоваяСтрока = Объект.РасходыИДоходы.Добавить();
						НоваяСтрока.СтатьяРасходовИДоходов  = ТекСтрока.Статья;
						НоваяСтрока.СуммаРасход             = ТекСтрока.СуммаПослеРаспределения;
						Если РезультатАвтозаполнения.СпособРасчетаСебестоимости = 0 Тогда
							НоваяСтрока.СпособЗаполнения = НСтр("ru = 'По фактическим данным продаж: Количество периодов'") + Символы.НПП
															+ РезультатАвтозаполнения.КоличествоПериодовСебестоимость + ";" + Символы.НПП 
															+ НСтр("ru = 'Результирующий коэффициент'") + Символы.НПП 
															+ (РезультатАвтозаполнения.КоэффициентРостаСебестоимость * РезультатАвтозаполнения.КоэффициентСезонностиСебестоимость) + ";";
						ИначеЕсли РезультатАвтозаполнения.СпособРасчетаСебестоимости = 1 Тогда
							НоваяСтрока.СпособЗаполнения = НСтр("ru = 'По фактическим данным закупок: Количество периодов'") + Символы.НПП
															+ РезультатАвтозаполнения.КоличествоПериодовСебестоимость+ ";" + Символы.НПП 
															+ НСтр("ru = 'Результирующий коэффициент'") + Символы.НПП 
															+ (РезультатАвтозаполнения.КоэффициентРостаСебестоимость * РезультатАвтозаполнения.КоэффициентСезонностиСебестоимость) + ";";
						Иначе
							НоваяСтрока.СпособЗаполнения = "" + РезультатАвтозаполнения.ДокументОснованиеСебестоимость;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Заполнение статьями расходов от основной деятельности не выполнено. Сумма себестоимости равна 0.'"));
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтатьямиСебестоимости()

// Выполняет сортировку табличной части "РасходыИДоходы" 
//
Процедура ВыполнитьСтандартнуюСортировку(Объект, РезультатАвтозаполнения)
	
	ВременнаяТаблица = Объект.РасходыИДоходы.Выгрузить();
	ВременнаяТаблица.Колонки.Добавить("Доход", Новый ОписаниеТипов("Булево"));
	
	Для Каждого ТекСтрока Из ВременнаяТаблица Цикл
		
		Если ТекСтрока.СтатьяРасходовИДоходов.ВидСтатьи = Перечисления.ВидыСтатейДоходовИРасходов.ВыручкаОтОсновногоВидаДеятельности
		 ИЛИ ТекСтрока.СтатьяРасходовИДоходов.ВидСтатьи = Перечисления.ВидыСтатейДоходовИРасходов.НакладныеДоходы Тогда
			ТекСтрока.Доход = Истина;
		Иначе
			ТекСтрока.Доход = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ВременнаяТаблица.Сортировать("Доход Убыв, СтатьяРасходовИДоходов");
	Объект.РасходыИДоходы.Загрузить(ВременнаяТаблица);
	
КонецПроцедуры // ВыполнитьСтандартнуюСортировку()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("СценарийПланирования");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("РасходыИДоходы");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("РасходыИДоходы.СтатьяРасходовИДоходов");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	УникальныеРасходыИДоходы = Новый Массив;
	УникальныеРасходыИДоходы.Добавить("СтатьяРасходовИДоходов");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("РасходыИДоходы", УникальныеРасходыИДоходы);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.РасходыИДоходы.Количество() > 0);
	ПараметрыДействия.Вставить("ТребуетсяПересчетЦен", Ложь);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сценарий планирования".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СценарийПланированияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДатаИзПериода", Объект.ДатаПланирования);
	Параметры.Вставить("Периодичность", Объект.СценарийПланирования.Периодичность);
	Параметры.Вставить("Действие", 0);
	ПланированиеСервер.ПолучитьДатыПланируемогоПериода(Параметры);
	Объект.ДатаПланирования = Параметры.ДатаНачала;

КонецПроцедуры // СценарийПланированияПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасходыИДоходы

// Обработчик события возникающего при изменении данных реквизита "Статья ДДС" в таблице "Статьи ДДС".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура РасходыИДоходыСтатьяРасходовИДоходовПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Строка.СтатьяРасходовИДоходов.ВидСтатьи = Перечисления.ВидыСтатейДоходовИРасходов.ВыручкаОтОсновногоВидаДеятельности
		ИЛИ Строка.СтатьяРасходовИДоходов.ВидСтатьи = Перечисления.ВидыСтатейДоходовИРасходов.НакладныеДоходы Тогда
		Строка.СуммаРасход = 0;
	Иначе
		Строка.СуммаДоход = 0;
	КонецЕсли;
КонецПроцедуры // РасходыИДоходыСтатьяРасходовИДоходовПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "РасходыИДоходы");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "БюджетДоходовИРасходов");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "РасходыИДоходы");
	КонецЕсли;

	ФормаАвтозаполнения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ФормаАвтозаполнения.ВыборСсылки 		= "Документ.БюджетДоходовИРасходов.Форма.ФормаАвтозаполнения";
	ФормаАвтозаполнения.Обязательный 		= Истина;
	
	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("ДокументОснованиеВыручка"                , "ДокументОснованиеВыручка");
	ПараметрыФормы.Вставить("ДокументОснованиеСебестоимость"          , "ДокументОснованиеСебестоимость");
	
	ПараметрыФормы.Вставить("ЗаполнитьСтатьиНакладныхДоходовИРасходов", "ЗаполнитьСтатьиНакладныхДоходовИРасходов");
	ПараметрыФормы.Вставить("ЗаполнитьСтатьиСебестоимость"            , "ЗаполнитьСтатьиСебестоимость");
	ПараметрыФормы.Вставить("ЗаполнятьСтатьиВыручки"                  , "ЗаполнятьСтатьиВыручки");
	
	ПараметрыФормы.Вставить("КоличествоПериодовВыручка"               , "КоличествоПериодовВыручка");
	ПараметрыФормы.Вставить("КоличествоПериодовСебестоимость"         , "КоличествоПериодовСебестоимость");
	
	ПараметрыФормы.Вставить("КоэффициентРостаВыручка"                 , "КоэффициентРостаВыручка");
	ПараметрыФормы.Вставить("КоэффициентРостаСебестоимость"           , "КоэффициентРостаСебестоимость");
	ПараметрыФормы.Вставить("КоэффициентСезонностиВыручка"            , "КоэффициентСезонностиВыручка");
	ПараметрыФормы.Вставить("КоэффициентСезонностиСебестоимость"      , "КоэффициентСезонностиСебестоимость");
	
	ПараметрыФормы.Вставить("СпособРасчетаВыручки"                    , "СпособРасчетаВыручки");
	ПараметрыФормы.Вставить("СпособРасчетаСебестоимости"              , "СпособРасчетаСебестоимости");
	ПараметрыФормы.Вставить("СценарийПланирования"                    , "СценарийПланирования");
	ПараметрыФормы.Вставить("ДатаПланирования"                        , "ДатаПланирования");
	ПараметрыФормы.Вставить("ПодразделениеКомпании"                   , "ПодразделениеКомпании");
	ПараметрыФормы.Вставить("РасходыИДоходы"                          , "РасходыИДоходы");
	
	ФормаАвтозаполнения.Параметры = ПараметрыФормы;

	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "РасходыИДоходыПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Автозаполнение'");
	Команда.Идентификатор	= "РасходыИДоходыАвтозаполнение";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "РасходыИДоходы";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("Автозаполнение", ФормаАвтозаполнения);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик закрытия формы "Автозаполнение"
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция РасходыИДоходыАвтозаполнение(Ссылка, ПараметрыКоманды=Неопределено, ПараметрыДействия=Неопределено, РежимПолученияЦеныПоСебестоимости=ЛОЖЬ) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	РезультатАвтозаполнения = ПараметрыЗаполнения.Автозаполнение;
	
	// Заполним статьи доходов и расходов в зависимости от выбранных параметров
	Если РезультатАвтозаполнения.Свойство("ЗаполнитьСтатьямиВыручки") И РезультатАвтозаполнения.ЗаполнитьСтатьямиВыручки = Истина Тогда
		
		ЗаполнитьСтатьямиВыручки(Объект, РезультатАвтозаполнения);
		
	КонецЕсли;
	
	Если РезультатАвтозаполнения.Свойство("ЗаполнитьСтатьиНакладныхДоходовИРасходов") И РезультатАвтозаполнения.ЗаполнитьСтатьиНакладныхДоходовИРасходов = Истина Тогда
		
		ЗаполнитьСтатьиНакладныхДоходовИРасходов(Объект, РезультатАвтозаполнения);
		
	КонецЕсли;
	
	Если РезультатАвтозаполнения.Свойство("ЗаполнитьСтатьямиСебестоимости") И РезультатАвтозаполнения.ЗаполнитьСтатьямиСебестоимости = Истина Тогда
		
		ЗаполнитьСтатьямиСебестоимости(Объект, РезультатАвтозаполнения);
		
	КонецЕсли;
	
	ВыполнитьСтандартнуюСортировку(Объект, РезультатАвтозаполнения);
	
	// Заполним параметры
	Объект.ДокументОснованиеВыручка                 = РезультатАвтозаполнения.ДокументОснованиеВыручка;
	Объект.ДокументОснованиеСебестоимость           = РезультатАвтозаполнения.ДокументОснованиеСебестоимость;
	
	Объект.ЗаполнитьСтатьиНакладныхДоходовИРасходов = РезультатАвтозаполнения.ЗаполнитьСтатьиНакладныхДоходовИРасходов;
	Объект.ЗаполнитьСтатьиСебестоимость             = РезультатАвтозаполнения.ЗаполнитьСтатьиСебестоимость;
	Объект.ЗаполнятьСтатьиВыручки                   = РезультатАвтозаполнения.ЗаполнятьСтатьиВыручки;
	
	Объект.КоличествоПериодовВыручка                = РезультатАвтозаполнения.КоличествоПериодовВыручка;
	Объект.КоличествоПериодовСебестоимость          = РезультатАвтозаполнения.КоличествоПериодовСебестоимость;
	
	Объект.КоэффициентРостаВыручка                  = РезультатАвтозаполнения.КоэффициентРостаВыручка;
	Объект.КоэффициентРостаСебестоимость            = РезультатАвтозаполнения.КоэффициентРостаСебестоимость;
	
	Объект.КоэффициентСезонностиВыручка             = РезультатАвтозаполнения.КоэффициентСезонностиВыручка;
	Объект.КоэффициентСезонностиСебестоимость       = РезультатАвтозаполнения.КоэффициентСезонностиСебестоимость;
	
	Объект.СпособРасчетаВыручки                     = РезультатАвтозаполнения.СпособРасчетаВыручки;
	Объект.СпособРасчетаСебестоимости               = РезультатАвтозаполнения.СпособРасчетаСебестоимости;
	
	// Установим знак дохода или расхода для каждой статьи
	Для Каждого Статья Из Объект.РасходыИДоходы Цикл
		
		Если Статья.СтатьяРасходовИДоходов.ВидСтатьи = Перечисления.ВидыСтатейДоходовИРасходов.ВыручкаОтОсновногоВидаДеятельности ИЛИ Статья.СтатьяРасходовИДоходов.ВидСтатьи = Перечисления.ВидыСтатейДоходовИРасходов.НакладныеДоходы Тогда
			Статья.Картинка = 1;
		Иначе
			Статья.Картинка = 2;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции // РасходыИДоходыАвтозаполнение()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.БюджетДоходовИРасходов",
		"ПФ_MXL_БюджетДоходовИРасходов",
		НСтр("ru = 'Бюджет доходов и расходов'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_БюджетДоходовИРасходов") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_БюджетДоходовИРасходов",
															НСтр("ru = 'Бюджет доходов и расходов'"),
															ПечатьБюджетДоходовИРасходов(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;	
КонецПроцедуры // Печать()

// Формирует печатную форму "БюджетДоходовИРасходов"
//
Функция ПечатьБюджетДоходовИРасходов(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_БюджетДоходовИРасходов_БюджетДоходовИРасходов";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати,ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;

	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.БюджетДоходовИРасходов.ПФ_MXL_БюджетДоходовИРасходов");
				
		// Заголовок
		Параметры = Новый Структура;
		Параметры.Вставить("Периодичность", Документ.СценарийПланирования.Периодичность);
		Параметры.Вставить("ДатаИзПериода", Документ.ДатаПланирования);
		ПредставлениеПериода = ПланированиеСервер.ПолучитьДатыПланируемогоПериода(Параметры);
		
		Параметры.Очистить(); 
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		Параметры.Вставить("Область", "Заголовок");
		Параметры.Вставить("ПодразделениеКомпании", УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ПодразделениеКомпании, Документ.Дата));
		Параметры.Вставить("СценарийПланирования",  Документ.СценарийПланирования);
		Параметры.Вставить("ТекстЗаголовка",        ТекстЗаголовка);
		Параметры.Вставить("ПериодПланирования",    ПредставлениеПериода);
		Параметры.Вставить("Список",                Новый СписокЗначений);
		
		ОбластьЗаголовок = СформироватьОбластьТабличногоДокумента(Макет, Параметры);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		НомерСтраницы = 2;
		НомерСтраницыПред = НомерСтраницы;

		// Готовим и выводим шапку
		Параметры.Очистить();
		Параметры.Вставить("Область",   "ШапкаТаблицы");	
		Параметры.Вставить("ТипСтатей", НСтр("ru = 'Статьи доходов и расходов'"));
		Параметры.Вставить("Список",    Новый СписокЗначений);

		ОбластьШапкаТаблицы = СформироватьОбластьТабличногоДокумента(Макет, Параметры);	
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Подготовим шапку для дальнейшего использования, если строки не влезут на страницу.
		Параметры.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ОбластьШапкаТаблицы = СформироватьОбластьТабличногоДокумента(Макет, Параметры);	

		// Подготовим подвал
		Параметры.Вставить("Список",           Новый СписокЗначений);
		Параметры.Вставить("Область",          "Подвал");
		Параметры.Вставить("Автор",            Документ.Автор);
		Параметры.Вставить("ВалютаДокумента",  Константы.ВалютаУправленческогоУчетаКомпании.Получить());
		Параметры.Вставить("ИтогоСуммаДоход",  Формат(Документ.РасходыИДоходы.Итог("СуммаДоход"),  ФорматВыводаСуммы) );
		Параметры.Вставить("ИтогоСуммаРасход", Формат(Документ.РасходыИДоходы.Итог("СуммаРасход"), ФорматВыводаСуммы) );
		ОбластьПодвалаТаблицы = СформироватьОбластьТабличногоДокумента(Макет, Параметры);
		
		// Вывод строк
		Параметры.Очистить();
		
		ИтогиНаСтранице = Новый Структура;
		ИтогиНаСтранице.Вставить("СуммаДоход", 0);
		ИтогиНаСтранице.Вставить("СуммаРасход", 0);
		
		НомерСтроки = 1;	
		Для Каждого ТекСтрока Из Документ.РасходыИДоходы Цикл
			
			// Подготавливаем список
			Параметры.Вставить("Область", "Строка");
			Параметры.Вставить("Список",          Новый СписокЗначений); 
			Параметры.Вставить("СтатьяРасходов",  ТекСтрока.СтатьяРасходовИДоходов);
			Параметры.Вставить("СуммаДоход",      Формат(ТекСтрока.СуммаДоход, ФорматВыводаСуммы) );
			Параметры.Вставить("СуммаРасход",     Формат(ТекСтрока.СуммаРасход,ФорматВыводаСуммы) );
			Параметры.Вставить("НомерСтроки",     НомерСтроки);  		
			ОбластьСтрокиТаблицы = СформироватьОбластьТабличногоДокумента(Макет, Параметры);
			
			// Сформируем итоговую область (Подвал страницы)
			Параметры.Вставить("Область",  "ПодвалСтраницы");
			Параметры.Вставить("СуммаДоходИтогоНаСтранице",  Формат(ИтогиНаСтранице.СуммаДоход, ФорматВыводаСуммы) );
			Параметры.Вставить("СуммаРасходИтогоНаСтранице", Формат(ИтогиНаСтранице.СуммаРасход, ФорматВыводаСуммы) );  
			ОбластьПодвалаСтраницыТаблицы = СформироватьОбластьТабличногоДокумента(Макет, Параметры); 
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если НомерСтроки = Документ.РасходыИДоходы.Количество() Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвалаТаблицы);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокиТаблицы, ОбластьШапкаТаблицы, 
																					ОбластьПодвалаСтраницыТаблицы, НомерСтраницы, , Документ, мсвДопОбластиПодвала);
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				ИтогиНаСтранице = Новый Структура;
				ИтогиНаСтранице.Вставить("СуммаДоход", 0);
				ИтогиНаСтранице.Вставить("СуммаРасход", 0);
				
				НомерСтраницыПред = НомерСтраницы;
				
				Параметры.Вставить("ТекстЗаголовка", ТекстЗаголовка);
				ОбластьШапкаТаблицы = СформироватьОбластьТабличногоДокумента(Макет, Параметры);
				
			КонецЕсли;
			
			// добавляем итоги
			ИтогиНаСтранице.СуммаДоход = ИтогиНаСтранице.СуммаДоход + ТекСтрока.СуммаДоход;
			ИтогиНаСтранице.СуммаРасход = ИтогиНаСтранице.СуммаРасход + ТекСтрока.СуммаРасход;
											  		
			НомерСтроки = НомерСтроки + 1; 	
		КонецЦикла;
		
		Если НомерСтраницы > 2 Тогда
			ТабличныйДокумент.Вывести(ОбластьПодвалаСтраницыТаблицы);
		КонецЕсли;
		
		// Выводим подвал
		НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент,ОбластьПодвалаТаблицы, , ,НомерСтраницы, ,Документ);
						
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции //ПечатьБюджетДоходовИРасходов()

// СформироватьОбластьТабличногоДокумента - Формирует область табличного документа.
//
// Параметры:
//  Макет     - макет, переданный для формирования табличного документа.
//  Параметры - структура, передает параметры заполнения области табличного документа.
//
// Возвращаемое значение:
//  ТабДок - Возвращает табличный документ.
//
Функция СформироватьОбластьТабличногоДокумента(Знач Макет, Знач Параметры)
	ТабДок = Новый ТабличныйДокумент;
	ТекОблПериод = Макет.ПолучитьОбласть("" + Параметры.Область + "|СтатьяРасходов"); 	
	ЗаполнитьЗначенияСвойств(ТекОблПериод.Параметры, Параметры);		
	ТабДок.Вывести(ТекОблПериод);
	
	Для Каждого ТекПериод Из Параметры.Список Цикл
		ТекОблПериод = Макет.ПолучитьОбласть("" + Параметры.Область + "|Период");
		ЗаполнитьЗначенияСвойств(ТекОблПериод.Параметры, ТекПериод);
		ТабДок.Присоединить(ТекОблПериод);
	КонецЦикла;
	
	ТабДок.Присоединить(Макет.ПолучитьОбласть("" + Параметры.Область + "|Граница"));
	
	Возврат ТабДок;
КонецФункции // СформироватьОбластьТабличногоДокумента()

#КонецОбласти

#КонецОбласти

#КонецЕсли
