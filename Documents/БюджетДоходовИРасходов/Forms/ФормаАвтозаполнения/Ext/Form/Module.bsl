///////////////////////////////////////////////////////////////////////////////
// Модуль формы "Автозаполнение"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Выведем сообщение если пользователь не выбрал сценарий планирования или не заполнил периодичность.
	Если НЕ ЗначениеЗаполнено(Параметры.СценарийПланирования) ИЛИ НЕ ЗначениеЗаполнено(Параметры.СценарийПланирования.Периодичность) Тогда
		ОбщегоНазначения.СообщитьПользователю (НСтр("ru='Не выбран сценарий планирования, либо у выбранного сценария планирования не выбрана периодичность.'"));
		Отказ = Истина;
	КонецЕсли;
	
	// Заполним переданные параметры
	ДокументОснованиеВыручка                 = Параметры.ДокументОснованиеВыручка;
	ДокументОснованиеСебестоимость           = Параметры.ДокументОснованиеСебестоимость;
	
	ЗаполнитьСтатьиНакладныхДоходовИРасходов = Параметры.ЗаполнитьСтатьиНакладныхДоходовИРасходов;
	ЗаполнитьСтатьиСебестоимость             = Параметры.ЗаполнитьСтатьиСебестоимость;
	ЗаполнятьСтатьиВыручки                   = Параметры.ЗаполнятьСтатьиВыручки;
	
	КоличествоПериодовВыручка                = Параметры.КоличествоПериодовВыручка;
	КоличествоПериодовСебестоимость          = Параметры.КоличествоПериодовСебестоимость;
	
	КоэффициентРостаВыручка                  = Параметры.КоэффициентРостаВыручка;
	КоэффициентРостаСебестоимость            = Параметры.КоэффициентРостаСебестоимость;
	
	КоэффициентСезонностиВыручка             = Параметры.КоэффициентСезонностиВыручка;
	КоэффициентСезонностиСебестоимость       = Параметры.КоэффициентСезонностиСебестоимость;
	
	СпособРасчетаВыручки                     = Параметры.СпособРасчетаВыручки;
	СпособРасчетаСебестоимости               = Параметры.СпособРасчетаСебестоимости;
	
	ДатаПланирования                         = Параметры.ДатаПланирования;
	ПодразделениеКомпании                    = Параметры.ПодразделениеКомпании;
	СценарийПланирования                     = Параметры.СценарийПланирования;
	
	РасходыИДоходыТЗ.Загрузить(Параметры.РасходыИДоходы.Выгрузить());
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Отказ - Булево - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Настроим отображение элементов
	УправлениеОтображением("ФлажокЗаполнитьСтатьиВыручки");
	УправлениеОтображением("ФлажокЗаполнитьСтатьиСебестоимость");
	УправлениеОтображением("СпособРасчетаВыручки");
	УправлениеОтображением("СпособРасчетаСебестоимости");
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при изменении данных реквизита "Заполнить статьи выручки".
//
// Параметры:
//  Элемент - ЭлементФормы - Элемент, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаполнитьСтатьиВыручкиПриИзменении(Элемент)
	
	УправлениеОтображением("ФлажокЗаполнитьСтатьиВыручки");
	
КонецПроцедуры // ЗаполнитьСтатьиВыручкиПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Заполнить статьи себестоимость".
//
// Параметры:
//  Элемент - ЭлементФормы - Элемент, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаполнитьСтатьиСебестоимостьПриИзменении(Элемент)
	
	УправлениеОтображением("ФлажокЗаполнитьСтатьиСебестоимость");
	
КонецПроцедуры // ЗаполнитьСтатьиСебестоимостьПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Способ расчета выручки".
//
// Параметры:
//  Элемент - ЭлементФормы - Элемент, в котором возникло данное событие.
//
&НаКлиенте
Процедура СпособРасчетаВыручкиПриИзменении(Элемент)
	
	УправлениеОтображением("СпособРасчетаВыручки");
	
КонецПроцедуры // СпособРасчетаВыручкиПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Способ расчета себестоимости".
//
// Параметры:
//  Элемент - ЭлементФормы - Элемент, в котором возникло данное событие.
//
&НаКлиенте
Процедура СпособРасчетаСебестоимостиПриИзменении(Элемент)
	
	УправлениеОтображением("СпособРасчетаСебестоимости");
	
КонецПроцедуры // СпособРасчетаСебестоимостиПриИзменении()

// Обработчик события возникающего на клиенте в момент нажатия кнопки выбора или клавиши F4 при начале выбора реквизита
// "Документ основание выручка".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - В данный параметр передается признак выполнения стандартной (системной)
//                                          обработки события.
//
&НаКлиенте
Процедура ДокументОснованиеВыручкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Получим даты планируемого периода
	ПараметрыПланирования = ПолучитьДатыПланируемогоПериода(ДатаПланирования, СценарийПланирования);
	
	// Получим сценарии планирования
	Результат = ПолучитьСценарииПланирования(СценарийПланирования);
	
	// Установим параметры подбора формы
	ПараметрыПодбора = Новый Структура();
	
	ПараметрыПодбора.Вставить("РежимВыбора", Истина);
	ПараметрыПодбора.Вставить("ОтборПодразделениеКомпании", ПодразделениеКомпании);
	ПараметрыПодбора.Вставить("ОтборДатаКонца", ПараметрыПланирования.ДатаКонца);
	ПараметрыПодбора.Вставить("ОтборПоСценариюПланирования", Результат);
	
	// Обработчик результата оповещения
	ОбработчикЗакрытия = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещенияДокументОснование", ЭтотОбъект, "ДокументОснованиеВыручка");
	
	// Откроем форму
	ОткрытьФорму("Документ.БюджетПродаж.ФормаСписка", ПараметрыПодбора,ЭтотОбъект,,,,ОбработчикЗакрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ДокументОснованиеВыручкаНачалоВыбора()

// Обработчик события возникающего на клиенте  в момент нажатия кнопки выбора или клавиши F4 при начале выбора реквизита
// "Документ основание себестоимость".
//
// Параметры:
//  Элемент              - ПолеФормы      - Элемент управления, в котором возникло данное событие.
//  ДанныеВыбора         - СписокЗначений - В обработчике можно сформировать и передать в этом параметре данные для выбора.
//  СтандартнаяОбработка - Булево         - В данный параметр передается признак выполнения стандартной (системной)
//                                          обработки события.
//
&НаКлиенте
Процедура ДокументОснованиеСебестоимостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Получим даты планируемого периода
	ПараметрыПланирования = ПолучитьДатыПланируемогоПериода(ДатаПланирования, СценарийПланирования);
	
	// Получим сценарии планирования
	Результат = ПолучитьСценарииПланирования(СценарийПланирования);
	
	// Установим параметры подбора формы
	ПараметрыПодбора = Новый Структура();
	
	ПараметрыПодбора.Вставить("РежимВыбора", Истина);
	ПараметрыПодбора.Вставить("ОтборПодразделениеКомпании", ПодразделениеКомпании);
	ПараметрыПодбора.Вставить("ОтборДатаКонца", ПараметрыПланирования.ДатаКонца);
	ПараметрыПодбора.Вставить("ОтборПоСценариюПланирования", Результат);
	
	// Обработчик результата оповещения
	ОбработчикЗакрытия = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещенияДокументОснование", ЭтотОбъект, "ДокументОснованиеСебестоимость");
	
	Если СпособРасчетаСебестоимости = 2 Тогда
		ОткрытьФорму("Документ.БюджетПродаж.ФормаСписка", ПараметрыПодбора,ЭтотОбъект,,,, ОбработчикЗакрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли СпособРасчетаСебестоимости = 3 Тогда
		ОткрытьФорму("Документ.БюджетЗакупок.ФормаСписка", ПараметрыПодбора,ЭтотОбъект,,,, ОбработчикЗакрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ДокументОснованиеСебестоимостьНачалоВыбора()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчика нажатия кнопки Применить.
&НаКлиенте
Процедура Применить(Команда)
	
	// Заполним параметры
	ПараметрыЗакрытия = Новый Структура();
	
	ПараметрыЗакрытия.Вставить("ДокументОснованиеВыручка"                , ДокументОснованиеВыручка);
	ПараметрыЗакрытия.Вставить("ДокументОснованиеСебестоимость"          , ДокументОснованиеСебестоимость);
	ПараметрыЗакрытия.Вставить("ЗаполнитьСтатьиНакладныхДоходовИРасходов", ЗаполнитьСтатьиНакладныхДоходовИРасходов);
	ПараметрыЗакрытия.Вставить("ЗаполнитьСтатьиСебестоимость"            , ЗаполнитьСтатьиСебестоимость);
	ПараметрыЗакрытия.Вставить("ЗаполнятьСтатьиВыручки"                  , ЗаполнятьСтатьиВыручки);
	ПараметрыЗакрытия.Вставить("КоличествоПериодовВыручка"               , КоличествоПериодовВыручка);
	ПараметрыЗакрытия.Вставить("КоличествоПериодовСебестоимость"         , КоличествоПериодовСебестоимость);
	ПараметрыЗакрытия.Вставить("КоэффициентРостаВыручка"                 , КоэффициентРостаВыручка);
	ПараметрыЗакрытия.Вставить("КоэффициентРостаСебестоимость"           , КоэффициентРостаСебестоимость);
	ПараметрыЗакрытия.Вставить("КоэффициентСезонностиВыручка"            , КоэффициентСезонностиВыручка);
	ПараметрыЗакрытия.Вставить("КоэффициентСезонностиСебестоимость"      , КоэффициентСезонностиСебестоимость);
	ПараметрыЗакрытия.Вставить("СпособРасчетаВыручки"                    , СпособРасчетаВыручки);
	ПараметрыЗакрытия.Вставить("СпособРасчетаСебестоимости"              , СпособРасчетаСебестоимости);
	
	// Возможность заполнения всеми выбранными способами проверим в комплексе.
	Выручка       = Ложь;
	Себестоимость = Ложь;
	
	Если ЗаполнятьСтатьиВыручки Тогда
		
		Если СпособРасчетаВыручки = 0 Тогда
			Если КоличествоПериодовВыручка <= 0 Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Количество периодов для анализа должно быть больше нуля.'"));
				Возврат;
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(ДокументОснованиеВыручка) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Документ-основание для заполнения статьями доходов от основной деятельности не выбран.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Выручка = Истина;
		
	КонецЕсли;
	
	Если ЗаполнитьСтатьиСебестоимость Тогда
		Если СпособРасчетаСебестоимости = 0 ИЛИ СпособРасчетаСебестоимости = 1 Тогда
			Если КоличествоПериодовСебестоимость <= 0 Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Количество периодов для анализа должно быть больше нуля.'"));
				Возврат;
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(ДокументОснованиеСебестоимость) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Документ-основание для заполнения статьями расходов от основной деятельности не выбран.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли; 
		Себестоимость = Истина;
	КонецЕсли;
	
	Если ЗаполнитьСтатьиНакладныхДоходовИРасходов Тогда
		ПараметрыЗакрытия.Вставить("ЗаполнитьСтатьиНакладныхДоходовИРасходов", Истина);
	КонецЕсли;
	
	Если Выручка Тогда
		ПараметрыЗакрытия.Вставить("ЗаполнитьСтатьямиВыручки", Истина);
	КонецЕсли;
	
	Если Себестоимость Тогда
		ПараметрыЗакрытия.Вставить("ЗаполнитьСтатьямиСебестоимости", Истина);
	КонецЕсли;
	
	ПараметрыЗакрытия.Вставить("ВыполнитьСтандартнуюСортировку", Истина);
	
	// Предложим пользователю перезаполнить доходы и расходы
	Если (ЗаполнятьСтатьиВыручки ИЛИ ЗаполнитьСтатьиСебестоимость ИЛИ ЗаполнитьСтатьиНакладныхДоходовИРасходов) И РасходыИДоходыТЗ.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияПерезаполнитьДоходыИРасходы", ЭтотОбъект, ПараметрыЗакрытия);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Внимание. Табличная часть будет перезаполнена в соответствии с выбранными настройками. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	КонецЕсли;
	
	Закрыть(ПараметрыЗакрытия);
	
КонецПроцедуры // Применить()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Управляет отображением элементов формы.
//
// Параметры:
//  ТекЭлемент - строка, передает имя текущего элемента формы.
//
&НаКлиенте
Процедура УправлениеОтображением(ТекЭлемент = "")
	
	Если ТекЭлемент = "" Тогда
		ТекЭлемент = ТекущийЭлемент.Имя;
	КонецЕсли;
	
	Если ТекЭлемент = "ФлажокЗаполнитьСтатьиВыручки" Тогда
		Если ЗаполнятьСтатьиВыручки Тогда
			Элементы.СпособРасчетаВыручки.Доступность        = Истина;
			Элементы.ГруппаСтраницыСтатьиДоходов.Доступность = Истина;
		Иначе
			Элементы.СпособРасчетаВыручки.Доступность        = Ложь;
			Элементы.ГруппаСтраницыСтатьиДоходов.Доступность = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТекЭлемент = "ФлажокЗаполнитьСтатьиСебестоимость" Тогда
		Если ЗаполнитьСтатьиСебестоимость Тогда
			Элементы.СпособРасчетаСебестоимости.Доступность   = Истина;
			Элементы.ГруппаСтраницыСтатьиРасходов.Доступность = Истина;
		Иначе
			Элементы.СпособРасчетаСебестоимости.Доступность   = Ложь;
			Элементы.ГруппаСтраницыСтатьиРасходов.Доступность = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТекЭлемент = "СпособРасчетаВыручки" Тогда
		Если СпособРасчетаВыручки = 0 Тогда // По фактическим данным продаж
			Элементы.ГруппаСтраницыСтатьиДоходов.ПодчиненныеЭлементы[1].Доступность = Ложь;
			Элементы.ГруппаСтраницыСтатьиДоходов.ТекущаяСтраница = Элементы.ГруппаСтраницыСтатьиДоходов.ПодчиненныеЭлементы[0];
			Элементы.ГруппаСтраницыСтатьиДоходов.ПодчиненныеЭлементы[0].Доступность = Истина;
		Иначе
			Элементы.ГруппаСтраницыСтатьиДоходов.ПодчиненныеЭлементы[0].Доступность = Ложь;
			Элементы.ГруппаСтраницыСтатьиДоходов.ТекущаяСтраница = Элементы.ГруппаСтраницыСтатьиДоходов.ПодчиненныеЭлементы[1];
			Элементы.ГруппаСтраницыСтатьиДоходов.ПодчиненныеЭлементы[1].Доступность = Истина;
		КонецЕсли;
	
	ИначеЕсли ТекЭлемент = "СпособРасчетаСебестоимости" Тогда
		Если СпособРасчетаСебестоимости = 0 ИЛИ СпособРасчетаСебестоимости = 1 Тогда // По фактическим данным продаж
			Элементы.ГруппаСтраницыСтатьиРасходов.ПодчиненныеЭлементы[1].Доступность = Ложь;
			Элементы.ГруппаСтраницыСтатьиРасходов.ТекущаяСтраница = Элементы.ГруппаСтраницыСтатьиРасходов.ПодчиненныеЭлементы[0];
			Элементы.ГруппаСтраницыСтатьиРасходов.ПодчиненныеЭлементы[0].Доступность = Истина;
		Иначе
			Элементы.ГруппаСтраницыСтатьиРасходов.ПодчиненныеЭлементы[0].Доступность = Ложь;
			Элементы.ГруппаСтраницыСтатьиРасходов.ТекущаяСтраница = Элементы.ГруппаСтраницыСтатьиРасходов.ПодчиненныеЭлементы[1];
			Элементы.ГруппаСтраницыСтатьиРасходов.ПодчиненныеЭлементы[1].Доступность = Истина;
			
			Элементы.ДокументОснованиеСебестоимость.ОграничениеТипа = ?(СпособРасчетаСебестоимости=2, Новый ОписаниеТипов("ДокументСсылка.БюджетПродаж"), Новый ОписаниеТипов("ДокументСсылка.БюджетЗакупок"));
			ДокументОснованиеСебестоимость = Элементы.ДокументОснованиеСебестоимость.ОграничениеТипа.ПривестиЗначение(ДокументОснованиеСебестоимость);
		КонецЕсли;
	
	ИначеЕсли ТекЭлемент = "" Тогда
	КонецЕсли;
	
КонецПроцедуры // УправлениеОтображением()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещенияДокументОснование(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	// Проверяем статус закрытия окна
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Обработаем результат оповещения
	Если ЗначениеЗаполнено(РезультатОповещения) Тогда
		
		Если ДополнительныеПараметры = "ДокументОснованиеВыручка"Тогда
			ДокументОснованиеВыручка = РезультатОповещения;
		КонецЕсли;
		
		Если ДополнительныеПараметры = "ДокументОснованиеСебестоимость"Тогда
			ДокументОснованиеСебестоимость = РезультатОповещения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещенияДокументОснование()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияПерезаполнитьДоходыИРасходы(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	// Если пользователь хочет очистить график распределения денежных средств установим признак.
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		
		// Закроем форму с параметрами
		Закрыть(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияПерезаполнитьДоходыИРасходы()

// Предназначена для получения сценариев планирования.
//
&НаСервереБезКонтекста
Функция ПолучитьСценарииПланирования(СценарийПланирования)
	
	// Отберем все сценарии планировании с аналогичной периодичностью
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СценарииПланирования.Ссылка
		|ИЗ
		|	Справочник.СценарииПланирования КАК СценарииПланирования
		|ГДЕ
		|	СценарииПланирования.ЭтоГруппа = ЛОЖЬ
		|	И СценарииПланирования.Периодичность = &Периодичность";
	Запрос.УстановитьПараметр("Периодичность", СценарийПланирования.Периодичность);
	Результат = Новый СписокЗначений;
	Результат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат Результат;
	
КонецФункции  // ПолучитьСценарииПланирования()

// Предназначена для получения даты планируемого периода.
&НаСервереБезКонтекста
Функция ПолучитьДатыПланируемогоПериода(ДатаПланирования, СценарийПланирования)
	
	// Установим отбор по дате планирования
	ПараметрыПланирования = Новый Структура;
	ПараметрыПланирования.Вставить("ДатаИзПериода", ДатаПланирования);
	ПараметрыПланирования.Вставить("Периодичность", СценарийПланирования.Периодичность);
	ПараметрыПланирования.Вставить("Действие", 0);
	
	ПланированиеСервер.ПолучитьДатыПланируемогоПериода(ПараметрыПланирования);
	
	Возврат ПараметрыПланирования;
	
КонецФункции // ПолучитьДатыПланируемогоПериода()

#КонецОбласти

