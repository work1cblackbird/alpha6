// Модуль менеджера документа "Перемещение автомобилей"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	ВалютаТек = Объект.ВалютаДокумента;
	КурсТек   = Объект.КурсДокумента;
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	НуженПересчет = ВалютаТек <> ВалютаУпр И ВалютаТек <> ВалютаРегл;
	Если НЕ ЗначениеЗаполнено(Объект.КурсВалютыУпр) Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, Объект.Дата);
		КурсУпр = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	Иначе
		КурсУпр = Объект.КурсВалютыУпр;
	КонецЕсли;
	
	// Для перемещения из филиала, когда доступно редактирование сумм
	Если Объект.ХозОперация = Справочники.ХозОперации.ПеремещениеАвтомобилейИзФилиала Тогда
		
		Сумма = Объект.Автомобили.Итог("СуммаВсего");
		
		// Формируем перечень основной информации об итогах операции
		ИтогиОперации = Новый Структура();
		ИтогиОперации.Вставить("СуммаДокумента", Сумма);
		
		Возврат ИтогиОперации;
		
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПеремещениеАвтомобилейАвтомобили.Ссылка КАК Ссылка,
		|	СУММА(ЕСТЬNULL(ОстаткиАвтомобилей." + ?(ВалютаТек = ВалютаРегл, "Сумма", "СуммаУпр") + ", 0)) КАК Сумма,
		|	СУММА(ЕСТЬNULL(КомплектацияАвтомобилейОстатки." + ?(ВалютаТек = ВалютаРегл, "СуммаОстаток", "СуммаУпрОстаток") + ", 0)) КАК СуммаОпций
		|ИЗ
		|	Документ.ПеремещениеАвтомобилей.Автомобили КАК ПеремещениеАвтомобилейАвтомобили
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
		|		ПО ПеремещениеАвтомобилейАвтомобили.Ссылка = ОстаткиАвтомобилей.Регистратор
		|			И ОстаткиАвтомобилей.Автомобиль = ПеремещениеАвтомобилейАвтомобили.Автомобиль
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КомплектацияАвтомобилей.Остатки(&НаДату) КАК КомплектацияАвтомобилейОстатки
		|		ПО ОстаткиАвтомобилей.Автомобиль = КомплектацияАвтомобилейОстатки.Автомобиль
		|ГДЕ
		|	ОстаткиАвтомобилей.Регистратор = &ВыбРегистратор
		|	И ПеремещениеАвтомобилейАвтомобили.Ссылка = &ВыбРегистратор
		|	И ОстаткиАвтомобилей.ВидДвижения = &ВидДвиженияРегистра
		|
		|СГРУППИРОВАТЬ ПО
		|	ПеремещениеАвтомобилейАвтомобили.Ссылка";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НаДату", Объект.Дата);
	
	Запрос.УстановитьПараметр("ВидДвиженияРегистра", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ВыбРегистратор", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Сумма = Выборка.Сумма + Выборка.СуммаОпций;
		Если НуженПересчет Тогда
			Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Сумма, ВалютаУпр, КурсУпр, ВалютаТек, КурсТек, 2);
		КонецЕсли;
	Иначе
		Сумма = 0;
	КонецЕсли;
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Сумма);
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используеся в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость выводв только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возращаемая сторка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(ТекстВременнаяТаблица = "", Объединить = ЛОЖЬ, ТолькоОсновныеКонтакты = ИСТИНА) Экспорт
	
	// Получим полное имя объекта метаданных
	ИмяТаблицы = ПолучитьСсылку().Метаданные().ПолноеИмя();
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(ИмяТаблицы, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	//// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("СкладКомпании");
	ОбязательныеРеквизиты.Добавить("СкладКомпанииОтправитель");
	ОбязательныеРеквизиты.Добавить("СкладПолучатель");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Автомобили");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Автомобили.Автомобиль");
	ОбязательныеРеквизиты.Добавить("Автомобили.Количество");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы автомобили
	УникальныеАвтомобили = Новый Массив();
	УникальныеАвтомобили.Добавить("Автомобиль");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Автомобили" , УникальныеАвтомобили);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("СкладКомпании", Ложь);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Автомобили.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.ПерезаполнитьЦеныТабличныхЧастей(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ТипЗнч(Объект.СкладКомпании)=Тип("СправочникСсылка.СкладыКомпании") Тогда
		
		// Вызываем общий обработчик события
		ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
		
		ПроверитьСкладаКомпании(Объект);
		
	КонецЕсли;
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад получатель".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладПолучательПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ТипЗнч(Объект.СкладПолучатель) = Тип("СправочникСсылка.СкладыКомпании") Тогда
		
		// Устанавливаем параметры выполнения операции
		ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
		ПроверитьСкладаКомпании(Объект, "СкладПолучатель");
		
	КонецЕсли;
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Проверка корректности значения реквизита "СкладКомпании" И "СкладПолучатель"
//
Процедура ПроверитьСкладаКомпании(Объект, ИмяРеквизита = "СкладКомпании")
	
	Если ЗначениеЗаполнено(Объект.СкладКомпании) И ЗначениеЗаполнено(Объект.СкладПолучатель) Тогда
		Если Объект.СкладКомпании = Объект.СкладПолучатель Тогда
			// сообщим пользователю о проблеме
			ТекстСоощения = НСтр("ru = 'Склад получатель не может совпадать со складом отправителем.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСоощения, Объект[ИмяРеквизита]);
			
			Объект[ИмяРеквизита] = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтомобили

// Обработчик события возникающего при изменении данных реквизита "Автомобиль"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиАвтомобильПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.АвтомобильПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ПеремещениеАвтомобилейИзФилиала Тогда
		
		// Для перемещения из филиала попробуем плучить себестоимость авто до перемещения
		Если ТипЗнч(Объект.ДокументОснование)=Тип("ДокументСсылка.ПеремещениеАвтомобилей") И
			ЗначениеЗаполнено(Объект.ДокументОснование) И
			Объект.ДокументОснование.ХозОперация = Справочники.ХозОперации.ПеремещениеАвтомобилейВФилиал Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ОстаткиАвтомобилей.Автомобиль        КАК Автомобиль,
			|	ОстаткиАвтомобилей.СкладКомпании     КАК СкладКомпании,
			|	ОстаткиАвтомобилей.СтатусПартии      КАК СтатусПартии,
			|	ОстаткиАвтомобилей.Партия            КАК Партия,
			|	СУММА(ОстаткиАвтомобилей.Количество) КАК Количество,
			|	СУММА(ОстаткиАвтомобилей.Сумма)      КАК Сумма,
			|	СУММА(ОстаткиАвтомобилей.СуммаУпр)   КАК СуммаУпр,
			|	СУММА(ОстаткиАвтомобилей.СуммаНДС)   КАК СуммаНДС
			|ИЗ
			|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
			|ГДЕ
			|	ОстаткиАвтомобилей.Регистратор = &Регистратор
			|	И ОстаткиАвтомобилей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|	И ОстаткиАвтомобилей.Автомобиль = &Автомобиль
			|
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиАвтомобилей.Партия,
			|	ОстаткиАвтомобилей.СтатусПартии,
			|	ОстаткиАвтомобилей.Автомобиль,
			|	ОстаткиАвтомобилей.СкладКомпании";
			Запрос.УстановитьПараметр("Регистратор" , Объект.ДокументОснование);
			Запрос.УстановитьПараметр("Автомобиль"  , Строка.Автомобиль);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				ВалютаРегл     = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
				СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл, Объект.Дата);
				КурсРегл       = СтруктураКурса.Курс/?(СтруктураКурса.Кратность=0,1,СтруктураКурса.Кратность);
				
				Если Объект.ВалютаДокумента = ВалютаРегл Тогда
					Строка.СуммаВсего = Выборка.Сумма;
				Иначе
					ВалютаУпр            = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
					СтруктураКурса       = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, Объект.Дата);
					КурсУпр              = СтруктураКурса.Курс/?(СтруктураКурса.Кратность=0,1,СтруктураКурса.Кратность);
					Строка.СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Выборка.Сумма, Объект.ВалютаДокумента, Объект.КурсДокумента, ВалютаУпр, КурсУпр);
				КонецЕсли;
				АвтомобилиСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
				Строка.СуммаНДС = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Выборка.СуммаНДС, Объект.ВалютаДокумента, Объект.КурсДокумента, ВалютаРегл, КурсРегл);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.ЦенаПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.СуммаПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.СуммаВсегоПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.СтавкаНДСПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Автомобили");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ПеремещениеАвтомобилей");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Автомобили");
	КонецЕсли;

	ВыборСклада 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборСклада.ВыборСсылки 		= "Справочник.Склады.ФормаСписка";
	ВыборСклада.Обязательный 		= Истина;
	ВыборСклада.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать склад.'");
		
	Команда 						= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 				= "АвтомобилиПодменюЗаполнения";
	Команда.Представление			= НСтр("ru = 'Заполнить складскими остатками'");
	Команда.Идентификатор			= "АвтомобилиЗаполнитьСкладскимиОстатками";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автомобили";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", ВыборСклада);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьСкладскимиОстатками.Видимость",    Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьСкладскимиОстатками.Доступность",  Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по заказам контрагенту
//
Функция АвтомобилиЗаполнитьСкладскимиОстатками(Ссылка, ПараметрыКоманды, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании Тогда
		Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании;
		СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Запрос=Новый Запрос();
	Запрос.УстановитьПараметр("Момент",?(Не ЗначениеЗаполнено(Ссылка),Новый МоментВремени(КонецДня(Объект.Дата)), Новый МоментВремени(Объект.Дата)));
	Запрос.Текст = "ВЫБРАТЬ
	   |	ОстаткиАвтомобилейОстатки.Автомобиль КАК Автомобиль,
	   |	ОстаткиАвтомобилейОстатки.КоличествоОстаток КАК КоличествоОстаток
	   |ПОМЕСТИТЬ ВТ_Остатки
	   |ИЗ
	   |	РегистрНакопления.ОстаткиАвтомобилей.Остатки(&Момент,"+?(ТипЗнч(ПараметрыЗаполнения.СкладКомпании)=Тип("СправочникСсылка.СкладыКомпании"),"СкладКомпании", "СкладКомпании.ПодразделениеКомпании")+"=&СкладКомпании) КАК ОстаткиАвтомобилейОстатки
	   |;
	   |
	   |////////////////////////////////////////////////////////////////////////////////
	   |ВЫБРАТЬ
	   |	ВТ_Остатки.Автомобиль КАК Автомобиль,
	   |	ВТ_Остатки.КоличествоОстаток КАК Количество
	   |ИЗ
	   |	ВТ_Остатки КАК ВТ_Остатки
	   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыАвтомобилей.Остатки(
	   |				&Момент,
	   |				Автомобиль В
	   |					(ВЫБРАТЬ
	   |						ВТ_Остатки.Автомобиль КАК Автомобиль
	   |					ИЗ
	   |						ВТ_Остатки)) КАК ЗаказыАвтомобилейОстатки
	   |		ПО ВТ_Остатки.Автомобиль = ЗаказыАвтомобилейОстатки.Автомобиль
	   |ГДЕ
	   |	ЗаказыАвтомобилейОстатки.РезервОстаток ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("СкладКомпании", ПараметрыЗаполнения.СкладКомпании);
	
	ТаблицаАвтомобилей = Запрос.Выполнить().Выгрузить();
	Объект.Автомобили.Очистить();
	Для Каждого СтрокаТЧ Из ТаблицаАвтомобилей Цикл
		НоваяСтрока            = Объект.Автомобили.Добавить();
		НоваяСтрока.Автомобиль = СтрокаТЧ.Автомобиль;
		АвтомобилиАвтомобильПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		НоваяСтрока.Количество = СтрокаТЧ.Количество;
		//АвтомобилиКоличествоПриИзменении(Объект, СтрокаТЧ, ПараметрыДействия);
	КонецЦикла;
	
КонецФункции // АктивыЗаполнитьАктивамиПодразделения()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ПеремещениеАвтомобилей",
		"ПеремещениеАвтомобилей",
		НСтр("ru = 'Перемещение автомобилей'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ13",
		НСтр("ru = 'ТОРГ-13 (Накладная на внутреннее перемещение)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТТН",
		НСтр("ru = '1-Т (Товарно-транспортная накладная)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТТН30122011_Приложение4",
		НСтр("ru = 'Приложение №4 (Транспортная накладная)'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПеремещениеАвтомобилей") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПеремещениеАвтомобилей",
															"Перемещение автомобилей",
															ПечатьПеремещениеАвтомобилей(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "Накладная"
// Возвращает сформированный табличный документ:
Функция ПечатьПеремещениеАвтомобилей(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПеремещениеАвтомобилей.ПФ_MXL_ПеремещениеАвтомобилей");
		
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// форматы вывода
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		
		// заголовок
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка          = ТекстЗаголовка;
		ОбластьЗаголовок.Параметры.ПредставлениеСклада		= УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СкладКомпании);
		ОбластьЗаголовок.Параметры.ПредставлениеСкладаПолучателя = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СкладПолучатель);
		
		ОбластьЗаголовок.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// готовим области строки
		НомерСтраницы = 2; НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаУпр",Документ.ВалютаДокумента,0);
		
		// заполним параметры шапки таблицы для следующего листа
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// выборка запросом по движениям документа по регистру "ПартииТоваровКомпании"
		ТекстЗапроса = "ВЫБРАТЬ
		|	ОстаткиАвтомобилей.Автомобиль КАК Автомобиль,
		|	СУММА(ОстаткиАвтомобилей.СуммаУпр) КАК СуммаУпр,
		|	СУММА(КомплектацияАвтомобилейОстатки.СуммаУпрОстаток) КАК СуммаОпцийУпр
		|ИЗ
		|	Документ.ПеремещениеАвтомобилей.Автомобили КАК ПеремещениеАвтомобилейАвтомобили
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
		|		ПО ПеремещениеАвтомобилейАвтомобили.Ссылка = ОстаткиАвтомобилей.Регистратор
		|			И ОстаткиАвтомобилей.Автомобиль = ПеремещениеАвтомобилейАвтомобили.Автомобиль
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КомплектацияАвтомобилей.Остатки(&НаДату) КАК КомплектацияАвтомобилейОстатки
		|		ПО ОстаткиАвтомобилей.Автомобиль = КомплектацияАвтомобилейОстатки.Автомобиль
		|ГДЕ
		|	ОстаткиАвтомобилей.Регистратор = &ВыбРегистратор
		|	И ПеремещениеАвтомобилейАвтомобили.Ссылка = &ВыбРегистратор
		|	И ОстаткиАвтомобилей.ВидДвижения = &ВидДвиженияРегистра
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиАвтомобилей.Автомобиль";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("НаДату", Документ.Дата);
		Если Документ.ХозОперация=Справочники.ХозОперации.ПеремещениеАвтомобилейИзФилиала Тогда
			Запрос.УстановитьПараметр("ВидДвиженияРегистра",ВидДвиженияНакопления.Приход);	
		Иначе
			Запрос.УстановитьПараметр("ВидДвиженияРегистра",ВидДвиженияНакопления.Расход);	
		КонецЕсли;
		Запрос.УстановитьПараметр("ВыбРегистратор",Документ.Ссылка);
		ВыборкаТабличнойЧасти = Запрос.Выполнить().Выгрузить();
		
		ВалютаТек		= Документ.ВалютаДокумента;
		КурсТек			= Документ.КурсДокумента;
		ВалютаПересч	= Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		Если Не ЗначениеЗаполнено(Документ.КурсВалютыУпр) Тогда
			СтруктураКурса	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаПересч,Документ.Дата);
			КурсПересч		= СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		Иначе
			КурсПересч		= Документ.КурсВалютыУпр;
		КонецЕсли;	
		
		Ном = 0;
		ИтогоСуммаДокумента	= 0;
		СтрокаТЧДляИтогов = Новый Структура("Сумма");	
		Для каждого СтрокаТабличнойЧасти Из ВыборкаТабличнойЧасти Цикл
			// заполняем данные строки
			Ном = Ном + 1;
			ОбластьСтрока.Параметры.НомерСтроки = Ном;
			ОбластьСтрока.Параметры.Автомобиль=СтрокаТабличнойЧасти.Автомобиль;
			ОбластьСтрока.Параметры.АвтомобильНаименование=УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТабличнойЧасти.Автомобиль);
			ОбластьСтрока.Параметры.VIN=СтрокаТабличнойЧасти.Автомобиль.VIN;
			ОбластьСтрока.Параметры.НомерКузова=СтрокаТабличнойЧасти.Автомобиль.НомерКузова;
			ОбластьСтрока.Параметры.НомерДвигателя=СтрокаТабличнойЧасти.Автомобиль.НомерДвигателя;
			Сумма = ?(СтрокаТабличнойЧасти.СуммаУпр=NULL,0,СтрокаТабличнойЧасти.СуммаУпр)+?(СтрокаТабличнойЧасти.СуммаОпцийУпр=NULL,0,СтрокаТабличнойЧасти.СуммаОпцийУпр);
			Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Сумма, ВалютаПересч, КурсПересч, ВалютаТек, КурсТек);
			ОбластьСтрока.Параметры.Сумма = Формат(Сумма,ФорматВыводаСуммы);
			ИтогоСуммаДокумента=ИтогоСуммаДокумента+Сумма;
			СтрокаТЧДляИтогов.Сумма = Сумма;
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Автомобили.Индекс(СтрокаТабличнойЧасти) = Документ.Автомобили.Количество()-1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока, ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ, мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,Сумма",Документ.ВалютаДокумента,0);
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТабличнойЧасти,СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент,ОбластьИтогоПоСтранице,СтруктураИтоговПоСтранице,Документ);
		КонецЕсли;
	
		// итоги
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		ОбластьПодвал.Параметры.СуммаВсего = Формат(ИтогоСуммаДокумента,ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью = "Всего наименований "+ВыборкаТабличнойЧасти.Количество()+" на сумму " + РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоСуммаДокумента,Документ.ВалютаДокумента);
		
		// Выводим представления и расшифровки подписей
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"ОтпустилКонтрагент","Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"Получил"));
		
		УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент,ОбластьПодвал,,,НомерСтраницы,,Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеАвтомобилей_ПеремещениеАвтомобилей";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "ТОРГ13"
// Возвращает сформированный табличный документ:
Функция ПолучитьДанныеДляПечатиТОРГ13(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
		
	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"        	, Объект.КурсДокумента); 
	ДанныеОбъекта.Вставить("КурсВалютыУпр"       	, Объект.КурсВалютыУпр); 
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("Розничный"       		, Ложь);
	ДанныеОбъекта.Вставить("ТребуетсяПересчет"      , Ложь);
	ДанныеОбъекта.Вставить("Грузоотправитель"       , Объект.СкладКомпании);
	ДанныеОбъекта.Вставить("Грузополучатель"        , Объект.СкладПолучатель);	
	ДанныеОбъекта.Вставить("Отпустил"				, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Отпустил","ОтпустилПредставление"));
	ДанныеОбъекта.Вставить("Получил"				, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Получил","ПолучилПредставление"));
	
	// форматы вывода
	ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Объект);
	ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Объект);
	
	// выборка запросом по движениям документа по регистру "ПартииТоваровКомпании"
	ТекстЗапроса = "ВЫБРАТЬ
	|	ОстаткиАвтомобилей.Автомобиль КАК Автомобиль,
	|	СУММА(ОстаткиАвтомобилей.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ОстаткиАвтомобилей.СуммаНДС) КАК СуммаНДС,
	|	СУММА(КомплектацияАвтомобилейОстатки.СуммаУпрОстаток) КАК СуммаОпцийУпр,
	|	СУММА(КомплектацияАвтомобилейОстатки.СуммаНДСОстаток) КАК СуммаОпцийНДС
	|ИЗ
	|	Документ.ПеремещениеАвтомобилей.Автомобили КАК ПеремещениеАвтомобилейАвтомобили
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	|		ПО ПеремещениеАвтомобилейАвтомобили.Ссылка = ОстаткиАвтомобилей.Регистратор
	|			И ОстаткиАвтомобилей.Автомобиль = ПеремещениеАвтомобилейАвтомобили.Автомобиль
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КомплектацияАвтомобилей.Остатки(&НаДату) КАК КомплектацияАвтомобилейОстатки
	|		ПО ОстаткиАвтомобилей.Автомобиль = КомплектацияАвтомобилейОстатки.Автомобиль
	|ГДЕ
	|	ОстаткиАвтомобилей.Регистратор = &ВыбРегистратор
	|	И ПеремещениеАвтомобилейАвтомобили.Ссылка = &ВыбРегистратор
	|	И ОстаткиАвтомобилей.ВидДвижения = &ВидДвиженияРегистра
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиАвтомобилей.Автомобиль";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НаДату", Объект.Дата);
	Если Объект.ХозОперация=Справочники.ХозОперации.ПеремещениеАвтомобилейИзФилиала Тогда
		Запрос.УстановитьПараметр("ВидДвиженияРегистра",ВидДвиженияНакопления.Приход);	
	Иначе
		Запрос.УстановитьПараметр("ВидДвиженияРегистра",ВидДвиженияНакопления.Расход);	
	КонецЕсли;
	Запрос.УстановитьПараметр("ВыбРегистратор",Объект.Ссылка);
	ВыборкаТабличнойЧасти = Запрос.Выполнить().Выгрузить();
	
	ВалютаТек		= Объект.ВалютаДокумента;
	КурсТек			= Объект.КурсДокумента;
	ВалютаПересч	= Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	Если Не ЗначениеЗаполнено(Объект.КурсВалютыУпр) Тогда
		СтруктураКурса	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаПересч,Объект.Дата);
		КурсПересч		= СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	Иначе
		КурсПересч		= Объект.КурсВалютыУпр;
	КонецЕсли;
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл,Объект.Дата);
	КурсРегл = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	КЧ = Новый КвалификаторыЧисла(15,3);
	
	// формирование табличной чати 
	ТаблицаСуммСписания = Новый ТаблицаЗначений;
	ТаблицаСуммСписания.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Автомобили"));
	ТаблицаСуммСписания.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("Строка"));
	ТаблицаСуммСписания.Колонки.Добавить("ТоварКод", Новый ОписаниеТипов("Строка"));
	ТаблицаСуммСписания.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаСуммСписания.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", , ,КЧ));
	ТаблицаСуммСписания.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	ТаблицаСуммСписания.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ТаблицаСуммСписания.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число"));

	
	Для каждого СтрокаТабличнойЧасти Из ВыборкаТабличнойЧасти Цикл
		
		// заполняем данные строки
		НоваяСтрока = ТаблицаСуммСписания.Добавить();
		НоваяСтрока.Номенклатура = СтрокаТабличнойЧасти.Автомобиль;
		НоваяСтрока.ХарактеристикаНоменклатуры = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТабличнойЧасти.Автомобиль.Модель);
		НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию("шт");
		НоваяСтрока.ТОварКод = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Автомобиль.VIN), Строка(СтрокаТабличнойЧасти.Автомобиль.VIN), "");
		Сумма = ?(СтрокаТабличнойЧасти.СуммаУпр=NULL,0,СтрокаТабличнойЧасти.СуммаУпр)+?(СтрокаТабличнойЧасти.СуммаОпцийУпр=NULL,0,СтрокаТабличнойЧасти.СуммаОпцийУпр);
		Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Сумма, ВалютаПересч, КурсПересч, ВалютаТек, КурсТек);
		СуммаНДС = ?(СтрокаТабличнойЧасти.СуммаНДС=NULL,0,СтрокаТабличнойЧасти.СуммаНДС)+?(СтрокаТабличнойЧасти.СуммаОпцийНДС=NULL,0,СтрокаТабличнойЧасти.СуммаОпцийНДС);
		СуммаНДС = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаНДС, ВалютаРегл, КурсРегл, ВалютаТек, КурсТек);
		НоваяСтрока.Сумма = Формат(Сумма - СуммаНДС,ФорматВыводаСуммы);
		НоваяСтрока.Цена = Формат(Сумма,ФорматВыводаСуммы);
		НоваяСтрока.Количество = 1;
		НоваяСтрока.СуммаНДС = 0;
		
	КонецЦикла;
	
	ДанныеОбъекта.Вставить("КоличествоСтрок"  		, ТаблицаСуммСписания.Количество());
	ДанныеОбъекта.Вставить("ТаблицаСуммСписания"  	, ТаблицаСуммСписания);

	Возврат ДанныеОбъекта;
	
КонецФункции

// Формирует печатную форму Т-1 "Товарно-транспортная накладная"
// 
// Параметры:
//  ТабДокумент - табличный документ.
//
// Возвращаемое значение:
//  ТабДокумент - возвращает сформированный табличный документ.
//
Функция ПолучитьДанныеДляПечатиТ1(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , ВалютаРегл);
	ДанныеОбъекта.Вставить("КурсВалютыУпр"       	, Объект.КурсВалютыУпр); 
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("Розничный"       		, Ложь);
	ДанныеОбъекта.Вставить("ТребуетсяПересчет"      , Ложь);
	ДанныеОбъекта.Вставить("Плательщик"             , "");
	
	// форматы вывода
	ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Объект);
	ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Объект);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ПеремещениеАвтомобилейАвтомобили.Автомобиль КАК Автомобиль,
	|	СУММА(ПеремещениеАвтомобилейАвтомобили.Количество) КАК Количество,
	|	ЕСТЬNULL(СУММА(РегистрОстатковАвтомобилей.Сумма),0) КАК СуммаАвтомобиля,
	|	ЕСТЬNULL(СУММА(РегистрОстатковКомплектации.Сумма),0) КАК СуммаКомплектации
	|ИЗ
	|	Документ.ПеремещениеАвтомобилей.Автомобили КАК ПеремещениеАвтомобилейАвтомобили
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиАвтомобилей КАК РегистрОстатковАвтомобилей
	|		ПО ПеремещениеАвтомобилейАвтомобили.Ссылка = РегистрОстатковАвтомобилей.Регистратор
	|			И ПеремещениеАвтомобилейАвтомобили.Автомобиль = РегистрОстатковАвтомобилей.Автомобиль
	|			"+?(Объект.Проведен,"И РегистрОстатковАвтомобилей.ВидДвижения = &ВидДвиженияПриход","")+"
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КомплектацияАвтомобилей КАК РегистрОстатковКомплектации
	|		ПО ПеремещениеАвтомобилейАвтомобили.Ссылка = РегистрОстатковКомплектации.Регистратор
	|			И ПеремещениеАвтомобилейАвтомобили.Автомобиль = РегистрОстатковКомплектации.Автомобиль
	|			"+?(Объект.Проведен,"И РегистрОстатковКомплектации.ВидДвижения = &ВидДвиженияПриход","")+"
	|ГДЕ
	|	ПеремещениеАвтомобилейАвтомобили.Ссылка = &ВыбРегистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеАвтомобилейАвтомобили.Автомобиль
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НаДату", Объект.Дата);
	Если Объект.ХозОперация=Справочники.ХозОперации.ПеремещениеАвтомобилейВФилиал Тогда
		Запрос.УстановитьПараметр("ВидДвиженияПриход",ВидДвиженияНакопления.Расход);	
	Иначе
		Запрос.УстановитьПараметр("ВидДвиженияПриход",ВидДвиженияНакопления.Приход);	
	КонецЕсли;
	Запрос.УстановитьПараметр("ВыбРегистратор",Объект.Ссылка);
	ВыборкаТабличнойЧасти = Запрос.Выполнить().Выгрузить();
	
	ВалютаТек		= Объект.ВалютаДокумента;
	КурсТек			= Объект.КурсДокумента;
	ВалютаПересч	= Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	Если Не ЗначениеЗаполнено(Объект.КурсВалютыУпр) Тогда
		СтруктураКурса	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаПересч,Объект.Дата);
		КурсПересч		= СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	Иначе
		КурсПересч		= Объект.КурсВалютыУпр;
	КонецЕсли;
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл,Объект.Дата);
	КурсРегл = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	КЧ = Новый КвалификаторыЧисла(15,3);
	
	// формирование табличной чати 
	ТаблицаВыбора = Новый ТаблицаЗначений;
	ТаблицаВыбора.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Автомобили"));
	ТаблицаВыбора.Колонки.Добавить("КодПродукции", Новый ОписаниеТипов("Строка"));
	// ТаблицаВыбора.Колонки.Добавить("ТоварНаименование", Новый ОписаниеТипов("Строка"));
	ТаблицаВыбора.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("Строка"));
	ТаблицаВыбора.Колонки.Добавить("Артикул", Новый ОписаниеТипов("Строка"));
	// ТаблицаВыбора.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаВыбора.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", , ,КЧ));
	ТаблицаВыбора.Колонки.Добавить("КоличествоБазовое", Новый ОписаниеТипов("Число", , ,КЧ));
	ТаблицаВыбора.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	ТаблицаВыбора.Колонки.Добавить("СуммаВсего", Новый ОписаниеТипов("Число"));

	Для каждого СтрокаТабличнойЧасти Из ВыборкаТабличнойЧасти Цикл
		
		НоваяСтрока = ТаблицаВыбора.Добавить();
		
		Сумма = СтрокаТабличнойЧасти.СуммаАвтомобиля + СтрокаТабличнойЧасти.СуммаКомплектации;
		НоваяСтрока.КодПродукции				= СтрокаТабличнойЧасти.Автомобиль.VIN;
		НоваяСтрока.ХарактеристикаНоменклатуры	= "";
		НоваяСтрока.Артикул 					= "";
		НоваяСтрока.Количество					= Формат(СтрокаТабличнойЧасти.Количество, ФорматВыводаКоличества);
		НоваяСтрока.Цена						= Формат(Сумма, ФорматВыводаСуммы);
		НоваяСтрока.Номенклатура				= СтрокаТабличнойЧасти.Автомобиль;
		// НоваяСтрока.ЕдиницаИзмерения			= Справочники.ЕдиницыИзмерения.НайтиПоНаименованию("шт");
		НоваяСтрока.СуммаВсего					= Формат(Сумма, ФорматВыводаСуммы);
		НоваяСтрока.КоличествоБазовое			= 1;
	КонецЦикла;
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Ложь, Истина, ИскомыеСвойства);
	
	ДанныеОбъекта.Вставить("Грузоотправитель" , 		Объект.СкладКомпании);
	ДанныеОбъекта.Вставить("Грузополучатель"  , 		Объект.СкладПолучатель);		
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти", 	ТаблицаВыбора);
	ДанныеОбъекта.Вставить("ЛицензионнаяКарточка",  	УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ЛицензионнаяКарточка", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("СрокДоставки", 				УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("СрокДоставки", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("Перевозчик", 				Объект.Перевозчик);
	ДанныеОбъекта.Вставить("МаркаАвтомобиля", 			Объект.МодельАвтомобиля);
	ДанныеОбъекта.Вставить("ГосНомерАвтомобиля", 		Объект.ГосНомерАвтомобиля);
	ДанныеОбъекта.Вставить("Заказчик", 					УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ОрганизацияЗаказчик", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("Водитель",					Объект.Водитель);
	ДанныеОбъекта.Вставить("ВодительскоеУдостоверение", Объект.НомерВодительскогоУдостоверения);
	ДанныеОбъекта.Вставить("ВидПеревозки", 				УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ВидПеревозки", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("ПунктПогрузки",				УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ПунктПогрузки", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("ПунктРазгрузки",			Объект.АдресДоставки);
	ДанныеОбъекта.Вставить("МаркаПрицепа", 				Объект.МодельПрицепа);
	ДанныеОбъекта.Вставить("ГосНомерПрицепа", 			Объект.ГосНомерПрицепа);
	ДанныеОбъекта.Вставить("ОписаниеГруза", 			Объект.ОписаниеГруза);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании", 	Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("Отпустил", 					УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Отпустил",        "ОтпустилПредставление"));
	ДанныеОбъекта.Вставить("Получил", 					УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Получил",         "ПолучилПредставление"));
	ДанныеОбъекта.Вставить("Руководитель", 				УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Руководитель",    "РуководительПредставление"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер", 			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"ГлавныйБухгалтер","ГлавныйБухгалтерПредставление"));
	
	Возврат ДанныеОбъекта;
	
КонецФункции //ПечатьТ1()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВводВЭксплуатациюАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПеремещениеАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПоступлениеДопРасходов);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйСкладскойОрдерНаАвтомобили);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйСкладскойОрдерНаАвтомобили);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РеализацияАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ПеремещениеАвтомобилей);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли