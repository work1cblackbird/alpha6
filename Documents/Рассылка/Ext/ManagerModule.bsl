// Модуль менеджера документа "Рассылка"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура отправки электронной рассылки
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЭлектроннаяРассылкаОтправить(Объект,ПараметрыДействия = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не указана учетная запись отправителя'"));
		Возврат;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Объект.Тема) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не указана тема письма'"));
		Возврат;
	КонецЕсли;
	
	// Создадим документы Электронное письмо исходящее
	Для Каждого Адресат Из Объект.Получатели  Цикл
		Если (НЕ Адресат.Отказ)И (ЗначениеЗаполнено(Адресат.Получатель)) И (ЗначениеЗаполнено(Адресат.АдресЭлектроннойПочты)) Тогда
			
			Если НЕ ЗначениеЗаполнено(Адресат.ЭлектронноеПисьмо) Тогда
				ЭлектронноеПисьмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
				ЭлектронноеПисьмо.Дата                     = ТекущаяДатаСеанса();
				ЭлектронноеПисьмо.УчетнаяЗапись            = Объект.УчетнаяЗапись;
				ЭлектронноеПисьмо.ОтправительПредставление = СокрЛП(Объект.ОтправительПредставление);
				ПисьмоПолучатель                           = ЭлектронноеПисьмо.ПолучателиПисьма.Добавить();
				ПисьмоПолучатель.Адрес                     = Адресат.АдресЭлектроннойПочты;
				ПисьмоПолучатель.Контакт                   = Адресат.Получатель;
				ПисьмоПолучатель.Представление             = Адресат.Получатель.Наименование;
				ЭлектронноеПисьмо.Тема                     = СокрЛП(Объект.Тема);
				ЭлектронноеПисьмо.СтатусПисьма             = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;
				Если Объект.ФорматТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Тогда
					ЭлектронноеПисьмо.ТекстHTML            = Объект.ТекстПисьма;
				Иначе
					ЭлектронноеПисьмо.Текст                = Объект.ТекстПисьма;
				КонецЕсли;
				ЭлектронноеПисьмо.ТипТекста                = Объект.ФорматТекста;
				// Свойство устарело и более не поддерживается.
				//ЭлектронноеПисьмо.УведомитьОДоставке       = Объект.УведомитьОДоставке;
				ЭлектронноеПисьмо.УведомитьОДоставке       = Ложь;
				ЭлектронноеПисьмо.УведомитьОПрочтении      = Объект.УведомитьОПрочтении;
				Представление = ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(Строка(Адресат.Получатель), Адресат.АдресЭлектроннойПочты,"; ");
				ЭлектронноеПисьмо.СписокПолучателейПисьма  = Представление;
				ЭлектронноеПисьмо.ЕстьВложения             = РаботаСФайламиАльфаАвтоВызовСервера.ВсеПодчиненныеФайлы(Объект.Ссылка).Количество()>0;
				Попытка
					ЭлектронноеПисьмо.Записать();
				Исключение
					Возврат;
				КонецПопытки;
				
				Адресат.ЭлектронноеПисьмо = ЭлектронноеПисьмо.Ссылка;
				// Скопируем присоединенные файлы
				Получатель = Адресат.ЭлектронноеПисьмо.ПолучитьОбъект();
				КопируемыеФайлы = РаботаСФайламиАльфаАвтоВызовСервера.ВсеПодчиненныеФайлы(Объект.Ссылка);
				Для Каждого КопируемыйФайл Из КопируемыеФайлы Цикл
					Если КопируемыйФайл.ПометкаУдаления Тогда
						Продолжить;
					КонецЕсли;
					ПрисоединенныйФайл = Справочники.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы.СоздатьЭлемент();
					ЗаполнитьЗначенияСвойств(ПрисоединенныйФайл, КопируемыйФайл,,"Родитель,Владелец");
					КопияФайлаСсылка = Справочники.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы.ПолучитьСсылку();
					ПрисоединенныйФайл.УстановитьСсылкуНового(КопияФайлаСсылка);
					ПрисоединенныйФайл.ВладелецФайла = Получатель.Ссылка;
					ПрисоединенныйФайл.Редактирует = Справочники.Пользователи.ПустаяСсылка();
					
					ПрисоединенныйФайл.ТекстХранилище = Новый ХранилищеЗначения(КопируемыйФайл.ТекстХранилище.Получить());
					ПрисоединенныйФайл.ФайлХранилище = Новый ХранилищеЗначения(КопируемыйФайл.ФайлХранилище.Получить());
										
					ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(КопируемыйФайл);
					ПрисоединенныйФайл.ТипХраненияФайла = РаботаСФайламиСлужебный.ТипХраненияФайлов();
					Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
						РаботаСФайламиСлужебный.ЗаписатьФайлВИнформационнуюБазу(КопияФайлаСсылка, ДвоичныеДанные);
					КонецЕсли;
					ПрисоединенныйФайл.Записать()
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Отправим электронное письмом
		Если (НЕ Адресат.Отказ) И (ЗначениеЗаполнено(Адресат.Получатель)) И ЗначениеЗаполнено(Адресат.ЭлектронноеПисьмо) 
			И НЕ Адресат.ЭлектронноеПисьмо.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено Тогда
			Если ЭлектронноеПисьмо = Неопределено Тогда
				Письмо = Адресат.ЭлектронноеПисьмо.ПолучитьОбъект();
			Иначе
				Письмо = ЭлектронноеПисьмо;
			КонецЕсли;
			
			ИдентификаторПисьма = Взаимодействия.ВыполнитьОтправкуПисьма(Письмо).ИдентификаторПисьмаSMTP;
			
			// Установим предмет письма
			СтруктураДляЗаписи = ВзаимодействияАльфаАвто.СтруктураРеквизитовВзаимодействияДляЗаписи(, Объект.Ссылка, Истина);
			РегистрыСведений.ПредметыПапкиВзаимодействий.ЗаписатьПредметыПапкиВзаимодействий(
				Адресат.ЭлектронноеПисьмо,
				СтруктураДляЗаписи);
			
			Письмо.ИдентификаторСообщения = ИдентификаторПисьма;
			Письмо.СтатусПисьма    = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
			Письмо.ДатаОтправления = ТекущаяДатаСеанса();
			Письмо.Записать(РежимЗаписиДокумента.Запись);
			Взаимодействия.УстановитьПапкуЭлектронногоПисьма(Адресат.ЭлектронноеПисьмо, Взаимодействия.ОпределитьПапкуДляПисьма(Адресат.ЭлектронноеПисьмо));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЭлектроннаяРассылкаОтправить()

// Процедура для отправления СМС-сообщения
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура РассылкаSMSОтправить(Объект,ПараметрыДействия = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.ТекстПисьма) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не указан текст сообщения.'"));
		Возврат;
	КонецЕсли;
	
	Для Каждого Адресат Из Объект.Получатели  Цикл
		Если (НЕ Адресат.Отказ) И (ЗначениеЗаполнено(Адресат.Телефон)) И ЗначениеЗаполнено(Адресат.Получатель) 
			И (НЕ ЗначениеЗаполнено(Адресат.SMS)) Тогда
			СообщениеSMS = Документы.СообщениеSMS.СоздатьДокумент();
			СообщениеSMS.Организация             = Объект.Организация;
			СообщениеSMS.ПодразделениеКомпании   = Объект.ПодразделениеКомпании; 
			СообщениеSMS.ВзаимодействиеОснование = Объект.Ссылка;
			СообщениеSMS.Состояние               = ПредопределенноеЗначение("Перечисление.СостоянияСообщенияSMS.Исходящее");
			СообщениеSMS.Дата                    = ТекущаяДатаСеанса();
			SMSПолучатель                        = СообщениеSMS.Адресаты.Добавить();
			SMSПолучатель.Контакт                = Адресат.Получатель;
			SMSПолучатель.ПредставлениеКонтакта  = Строка(Адресат.Получатель);
			SMSПолучатель.КакСвязаться           = Адресат.Телефон;
			SMSПолучатель.СостояниеСообщения     = ПредопределенноеЗначение("Перечисление.СостоянияСообщенияSMS.Исходящее");
			СообщениеSMS.ТекстСообщения          = Объект.ТекстПисьма;
			Взаимодействия.ОтправкаSMSПоДокументу(СообщениеSMS);
			Попытка
				СообщениеSMS.Записать();
			Исключение
				Возврат;
			КонецПопытки;
			Адресат.SMS = СообщениеSMS.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РассылкаSMSОтправить()

// Получает КИ для массива контактов
//
//Параметры
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  ТипКИ   - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица содержащая контакты и адреса их электронной почты.
//
Процедура ОбновитьКИПользователя(Объект, ТипКИ) 
	
	Результат = 
		ВзаимодействияАльфаАвто.АдресаЭлектроннойПочтыКонтактов(
			Объект.Получатели.Выгрузить().ВыгрузитьКолонку("Получатель"),
			ТипКИ);
	Для Каждого Строка Из Объект.Получатели Цикл
		Контакт = Результат.Найти(Строка.Получатель);
		Если НЕ Контакт = Неопределено Тогда
			Строка.СписокАдресов = Контакт.СписокАдресов;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ОбновитьКИПользователя()

// Получает наименование и адреса контактной информации
//
// Параметры
//  Контакт - Ссылка - контакт, для которого получаются данные
//  ТипКИ   - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации.
//
// Возвращаемое значение:
//  Структура - содержит наименование контакта и список значений электронной почты контакта.
//
Функция ПолучитьНаименованиеИКИКонтакта(Контакт,ТипКИ)
	
	Если Не ЗначениеЗаполнено(Контакт) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Контакт.Метаданные().Иерархический Тогда
		Если Контакт.ЭтоГруппа Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИмяТаблицы = Контакт.Метаданные().ПолноеИмя();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕстьNULL(ТаблицаКонтактнаяИнформация.Представление,"""") КАК КИ,
	|	Таблица.Наименование КАК Наименование
	|ИЗ
	|	" + ИмяТаблицы + " КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + ".КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
	|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = Таблица.Ссылка)
	|			И (ТаблицаКонтактнаяИнформация.Тип = &ТипКИ)
	|ГДЕ
	|	Таблица.Ссылка = &Контакт
	|ИТОГИ ПО
	|	Наименование";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Контакт", Контакт);
	Запрос.УстановитьПараметр("ТипКИ", ТипКИ);
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокКИ = Новый Структура("Наименование,КИ", Выборка.Наименование, Новый СписокЗначений);
	ВыборкаКИ = Выборка.Выбрать();
	Пока ВыборкаКИ.Следующий() Цикл
		СписокКИ.КИ.Добавить(ВыборкаКИ.КИ);
	КонецЦикла;
	
	Возврат СписокКИ;
	
КонецФункции //ПолучитьНаименованиеИКИКонтакта()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Получатели.Получатель");
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Тема");
	ОбязательныеРеквизиты.Добавить("Реклама");
	Если Объект.ХозОперация = Справочники.ХозОперации.ЭлектроннаяРассылка Тогда
		ОбязательныеРеквизиты.Добавить("УчетнаяЗапись");
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	УникальныеПолучатели=Новый Массив();
	УникальныеПолучатели.Добавить("Получатель");
	
	Если Объект.ХозОперация = Справочники.ХозОперации.РассылкаSMS
		ИЛИ Объект.ХозОперация = Справочники.ХозОперации.Телемаркетинг Тогда
		УникальныеПолучатели.Добавить("Телефон");
	ИначеЕсли Объект.ХозОперация = Справочники.ХозОперации.ПочтоваяРассылка Тогда
		УникальныеПолучатели.Добавить("Адрес");
	Иначе
		УникальныеПолучатели.Добавить("АдресЭлектроннойПочты");
	КонецЕсли;
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Получатели",УникальныеПолучатели);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Инициализируем параметры обработки действия с объектом
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Возвращаем сформированную структуру параметров
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДокументОснованиеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДатаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
	Если ПараметрыДействия.Свойство("ТипКИ") Тогда
		ОбновитьКИПользователя(Объект,ПараметрыДействия.ТипКИ);
	КонецЕсли;
	
КонецПроцедуры // ХозОперацияПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолучатели

// Обработчик события возникающего при изменении данных реквизита "Получатель" в таблице "Получатели".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПолучателиПолучательПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ПараметрыДействия.Свойство("ТипКИ") Тогда
		КонтактИКИ = ПолучитьНаименованиеИКИКонтакта(Строка.Получатель,ПараметрыДействия.ТипКИ);
		Если КонтактИКИ = Неопределено Тогда
			Строка.СписокАдресов = "";
			Возврат;
		КонецЕсли;
		Если КонтактИКИ.КИ.Количество() = 0 Тогда
			Строка.СписокАдресов = "";
		Иначе
			Строка.СписокАдресов = СтрСоединить(КонтактИКИ.КИ.ВыгрузитьЗначения(), ";")
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПолучателиПолучательПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Получатели");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "Рассылка");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Получатели");
	КонецЕсли;
	
	ВыборКонтрагентов 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборКонтрагентов.ВыборСсылки 		= "Документ.Рассылка.Форма.ОтборКонтрагентов";
	ВыборКонтрагентов.Обязательный 		= Ложь;
	ВыборКонтрагентов.Параметры			= Новый Структура("ХозОперация", "ХозОперация");
		
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "ПолучателиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить с отбором по контрагентам'");
	Команда.Идентификатор	= "ЗаполнитьПоКонтрагентам";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Получатели";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ЗаполнитьПоКонтрагентам", ВыборКонтрагентов);
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "ПолучателиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Очистить строки с признаком ""Отказ от рассылки""'");
	Команда.Идентификатор	= "ПолучателиОчиститьСтрокиОтказ";
	Команда.Порядок			= 51;
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением = Ложь;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Получатели";
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "ПолучателиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Очистить строки без контактной информации'");
	Команда.Идентификатор	= "ОчиститьСтрокиБезКИ";
	Команда.Порядок			= 52;
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением = Ложь;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Получатели";
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ПолучателиОчиститьСтрокиОтказ.Видимость",   Истина);
	ПараметрыКоманд.Вставить("ПолучателиОчиститьСтрокиОтказ.Доступность", Истина);
	ПараметрыКоманд.Вставить("ОчиститьСтрокиБезКИ.Видимость",             Истина);
	ПараметрыКоманд.Вставить("ОчиститьСтрокиБезКИ.Доступность",           Истина);
	ПараметрыКоманд.Вставить("ЗаполнитьПоКонтрагентам.Видимость",         Истина);
	ПараметрыКоманд.Вставить("ЗаполнитьПоКонтрагентам.Доступность",       Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик очистки табличной части "Получатели" по отказу.
//
Функция ПолучателиОчиститьСтрокиОтказ(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
		Индекс = 0;
	Пока Индекс <= Объект.Получатели.Количество() - 1 Цикл
		Если Объект.Получатели[Индекс]["Отказ"] Тогда
			Объект.Получатели.Удалить(Индекс);
			Продолжить;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецФункции // ПолучателиОчиститьСтрокиОтказ()

// Обработчик очистки табличной части "Получатели" по пустым полям контактной информации.
//
Функция ОчиститьСтрокиБезКИ(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЭлектроннаяРассылка") Тогда
		ИмяКолонки = "АдресЭлектроннойПочты";
	ИначеЕсли Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.РассылкаSMS") 
		ИЛИ Объект.ХозОперация =  ПредопределенноеЗначение("Справочник.ХозОперации.Телемаркетинг") Тогда
		ИмяКолонки = "Телефон";
	Иначе
		ИмяКолонки = "Адрес";
	КонецЕсли;
	
	Индекс = 0;
	
	Пока Индекс <= Объект.Получатели.Количество()-1 Цикл
		Если НЕ ЗначениеЗаполнено(Объект.Получатели[Индекс][ИмяКолонки]) Тогда
			Объект.Получатели.Удалить(Индекс);
			Продолжить;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецФункции // ОчиститьСтрокиБезКИ()

// Обработчик заполнения табличной части "Получатели" по реквизитам контрагентов.
//
Функция ЗаполнитьПоКонтрагентам(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	Если ПараметрыЗаполнения.ЗаполнитьПоКонтрагентам = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	// Определим параметры
	КомпоновщикНастроек = ПараметрыЗаполнения.ЗаполнитьПоКонтрагентам.КомпоновщикНастроек;
	АдресСхемыКомпоновкиДанных = ПараметрыЗаполнения.ЗаполнитьПоКонтрагентам.АдресСхемыКомпоновкиДанных;
	ВидКонтактнойИнформации = ПараметрыЗаполнения.ЗаполнитьПоКонтрагентам.ВидКонтактнойИнформации;
	
	ПараметрыЗаполнения.ЗаполнитьПоКонтрагентам.Удалить("КомпоновщикНастроек");
	
	// Запрос к контрагентам и контактной информации
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КонтрагентыКонтактнаяИнформация.Ссылка,
	               |	КонтрагентыКонтактнаяИнформация.Представление
	               |ПОМЕСТИТЬ КИ
	               |ИЗ
	               |	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	               |ГДЕ
	               |	КонтрагентыКонтактнаяИнформация.Вид = &Вид
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Контрагенты.Ссылка КАК Получатель,
	               |	Контрагенты.ПометкаУдаления,
	               |	Контрагенты.ВидКонтрагента,
	               |	Контрагенты.ФормаСобственности,
	               |	Контрагенты.РекламныйИсточник,
	               |	Контрагенты.Пол,
	               |	Контрагенты.ДатаРождения,
	               |	КИ.Представление КАК ПредставлениеКонтактнойИнформации
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КИ КАК КИ
	               |		ПО Контрагенты.Ссылка = КИ.Ссылка
	               |ГДЕ
	               |	Контрагенты.ЭтоГруппа = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Вид", ВидКонтактнойИнформации);
	
	// Создадим макет компоновки
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакетаКомпоновкиДанных.Выполнить(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных), КомпоновщикНастроек.Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	НаборДанных = Новый Структура("ТЗ", Запрос.Выполнить().Выгрузить());
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, НаборДанных);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	// Установим результирующую таблицу
	ТаблицаРезультат = Новый ТаблицаЗначений();
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	
	ПроцессорВывода.НачатьВывод();
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
	ПроцессорВывода.ЗакончитьВывод();
	
	// В зависимости от вида контактной информации установим имя колонки
	Если ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента ИЛИ ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
		ТаблицаРезультат.Колонки.ПредставлениеКонтактнойИнформации.Имя = "Адрес";
	ИначеЕсли ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
		ТаблицаРезультат.Колонки.ПредставлениеКонтактнойИнформации.Имя = "АдресЭлектроннойПочты";
	ИначеЕсли ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
		ТаблицаРезультат.Колонки.ПредставлениеКонтактнойИнформации.Имя = "Телефон";
	КонецЕсли;
	
	// Загрузим результат в табличную часть
	Объект.Получатели.Загрузить(ТаблицаРезультат);
	
КонецФункции // ЗаполнитьПоКонтрагентам()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЖалобаКлиента);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Рассылка);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.Рассылка);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли