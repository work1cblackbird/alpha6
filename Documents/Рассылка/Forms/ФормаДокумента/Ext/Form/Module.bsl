///////////////////////////////////////////////////////////////////////////////
// Модуль основной формы документа "Рассылка"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	
	ЗаполнитьКоманднуюПанель();
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ЭлектроннаяРассылка Тогда
		ЗаполнитьВложения(Параметры);
		Если Объект.ФорматТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Тогда
			СтруктураВложений = Новый Структура;
			ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(Объект.Ссылка, Объект.ТекстПисьма,СтруктураВложений);
			ТекстПисьмаФорматированныйДокумент.УстановитьHTML(ТекстHTML, СтруктураВложений);
		Иначе
			ТекстПисьма = Объект.ТекстПисьма;
		КонецЕсли;
	ИначеЕсли Объект.ХозОперация = Справочники.ХозОперации.ПочтоваяРассылка Тогда
		ЗаполнитьВложения(Параметры);
		СтруктураВложений = Новый Структура;
		ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(Объект.Ссылка, Объект.ТекстПисьма,СтруктураВложений);
		ТекстПисьмаФорматированныйДокумент.УстановитьHTML(ТекстHTML, СтруктураВложений);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
		Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЭлектроннаяРассылка") Тогда
			ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты");
		ИначеЕсли Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ПочтоваяРассылка") Тогда
			ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес");
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.Телемаркетинг") Тогда
		Элементы.Переместить(Элементы.ПолучателиПодменюЗаполнения,Элементы.ПолучателиТелемаркетинг.КоманднаяПанель,Элементы.ПолучателиТелемаркетингПодбор);
		ВывестиСостояниеОбзвона();
		ЗаполнитьАнкетыУчастников();
	КонецЕсли;
	// Заполним табличную часть документа
	МассивСвойств = Новый Массив;
	МассивСвойств.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ОтказОтРассылки"));
	Для каждого Получатель Из Объект.Получатели Цикл
		Свойства = УправлениеСвойствами.ПолучитьЗначенияСвойств(Получатель.Получатель,Ложь,Истина,МассивСвойств);
		ОтказОтРассылки = Свойства.Найти(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ОтказОтРассылки);
		Если ОтказОтРассылки <> Неопределено Тогда
			Получатель.Отказ = ОтказОтРассылки.Значение;
		КонецЕсли;
		
		Если Получатель.РезультатОбработкиЗвонка = ПредопределенноеЗначение("Перечисление.РезультатыОбработкиЗвонка.Обработан") Тогда
			Получатель.Обработан = Истина;
		ИначеЕсли Получатель.РезультатОбработкиЗвонка = ПредопределенноеЗначение("Перечисление.РезультатыОбработкиЗвонка.НеДозвонились") Тогда
			Получатель.НеДозвонились = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "Получатели");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ПолучателиТелемаркетинг");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыДинамическогоСписка(ЭтотОбъект, "КонтактныеЛицаПользователя");
	
	УстановитьДоступностьЖалобы();
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.АдреснаяКнига") Тогда
		Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") И ТипЗнч(ВыбранноеЗначение) <> Тип("Соответствие") Тогда
			Возврат;
		КонецЕсли;
		// Получим список адресатов
		СоответствиеТабличныхЧастей = Новый Соответствие;
		СоответствиеТабличныхЧастей.Вставить("Получатель", Объект.Получатели);
		ЗаполнитьПодобранныхПолучателей(СоответствиеТабличныхЧастей, ВыбранноеЗначение);
		// Установим признак модифицированности
		Модифицированность = Истина;
	КонецЕсли;

	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// +СофтФон
	Если ИмяСобытия = "СофтФон_ЗаписьСобытия" Тогда
		Если Параметр.Свойство("Основание") И (Параметр.Основание = Объект.Ссылка) Тогда
			Если ЗначениеЗаполнено(Параметр.Партнер) Тогда
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Получатель", Параметр.Партнер);
				НайденныеСтроки = Объект.Получатели.НайтиСтроки(СтруктураПоиска);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если Параметр.Свойство("Звонок") Тогда
						НайденнаяСтрока.Звонок = Параметр.Звонок;
						НайденнаяСтрока.Телефон = Параметр.НомерТелефона;
					КонецЕсли;
					Прервать;
				КонецЦикла;	
			Иначе	
				СтрокаНайдена			= Ложь;
				сфпСофтФонПроКлиент.сфпЗаполнитьПрефиксыИНастройки();
				сфпПараметрыСервера		= сфпСофтФонПроСервер.сфпПараметрыСервера();
				КоличествоЦифрВНомере	= сфпПараметрыСервера.ПоследниеЦифрыТелефонногоНомера;
				НомерТелефона			= Прав(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(Параметр.НомерТелефона), КоличествоЦифрВНомере);
				Для Каждого СтрокаУчастника Из Объект.Получатели Цикл	
					МассивТелефонов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаУчастника.Телефон,	",");
					Для Каждого НомерТелефонаМассива Из МассивТелефонов Цикл
						ПроверяемыйНомерТелефона = Прав(сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефонаМассива), КоличествоЦифрВНомере);
						Если ПроверяемыйНомерТелефона = НомерТелефона Тогда
							Если Параметр.Свойство("Звонок") Тогда
								СтрокаУчастника.Звонок = Параметр.Звонок;
							КонецЕсли;
							СтрокаНайдена = Истина;
							Прервать;
						КонецЕсли;	
					КонецЦикла;
					Если СтрокаНайдена Тогда Прервать; КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// -СофтФон
	// Производим подготовку параметров события для обработки в контексте сервера
	Если ИмяСобытия = "Проведение_Анкета" Тогда 
		ТекущиеДанные = Элементы.ПолучателиТелемаркетинг.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда	
			ТекущиеДанные.Анкета = Источник;
			ТекущиеДанные.РезультатОбработкиЗвонка = ПредопределенноеЗначение("Перечисление.РезультатыОбработкиЗвонка.Обработан");
			ТекущиеДанные.Обработан = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Заполним табличную часть документа
	МассивСвойств = Новый Массив;
	МассивСвойств.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ОтказОтРассылки"));
	Для каждого Получатель Из Объект.Получатели Цикл
		Свойства = УправлениеСвойствами.ПолучитьЗначенияСвойств(Получатель.Получатель,Ложь,Истина,МассивСвойств);
		ОтказОтРассылки = Свойства.Найти(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ОтказОтРассылки);
		Если ОтказОтРассылки <> Неопределено Тогда
			Получатель.отказ = ОтказОтРассылки.Значение;
		КонецЕсли;
		
		Если Получатель.РезультатОбработкиЗвонка = ПредопределенноеЗначение("Перечисление.РезультатыОбработкиЗвонка.Обработан") Тогда
			Получатель.Обработан = Истина;
		ИначеЕсли Получатель.РезультатОбработкиЗвонка = ПредопределенноеЗначение("Перечисление.РезультатыОбработкиЗвонка.НеДозвонились") Тогда
			Получатель.НеДозвонились = Истина;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьАнкетыУчастников();
	
	ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЭлектроннаяРассылка") Тогда
		ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты");
	ИначеЕсли Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ПочтоваяРассылка") Тогда
		ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес");
	КонецЕсли;
	// Дальнейшие операции выполняются только для новых объектов
	Контакты =
		ВзаимодействияАльфаАвто.АдресаЭлектроннойПочтыКонтактов(
			Объект.Получатели.Выгрузить().ВыгрузитьКолонку("Получатель"),
			ТипКИ);
	Для Каждого Строка Из Объект.Получатели Цикл
		Контакт = Контакты.Найти(Строка.Получатель);
		Если НЕ Контакт = Неопределено Тогда
			Строка.СписокАдресов = Контакт.СписокАдресов;
		КонецЕсли;
	КонецЦикла;

	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("Рассылка", ПараметрыЗаписи.РежимЗаписи, Ложь);
		
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);
	
	#Если Не ВебКлиент Тогда
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЭлектроннаяРассылка") Тогда
		Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
			Если СтрокаТаблицыВложений.Расположение = 2 Тогда
				Данные = Новый ДвоичныеДанные(СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере);
				СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(Данные, "");
				СтрокаТаблицыВложений.Расположение = 4;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	#КонецЕсли

КонецПроцедуры 

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ХозОперация = Справочники.ХозОперации.ЭлектроннаяРассылка Тогда
		Письмо = ТекущийОбъект.Ссылка;
		// Добавим в список удаленных вложений ранее сохраненные картинки, отображаемые в теле форматированного документа.
		ТаблицаВложенийКартинокФорматированногоДокумента = Взаимодействия.ПолучитьВложенияПисьмаСНеПустымИД(Письмо);
		Для каждого Вложение Из ТаблицаВложенийКартинокФорматированногоДокумента Цикл
			УдаленныеВложения.Добавить(Вложение.Ссылка);
		КонецЦикла;
		// Удалим удаленные вложения
		Для Каждого УдаленноеВложение Из УдаленныеВложения Цикл
			ОбъектВложение = УдаленноеВложение.Значение.ПолучитьОбъект();
			ОбъектВложение.Удалить();
		КонецЦикла;
		
		УдаленныеВложения.Очистить();
		
		Для каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
			ДвоичныеДанныеКартинки = Вложение.Картинка.ПолучитьДвоичныеДанные();
			АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, УникальныйИдентификатор);
			
			ПараметрыВложения = Новый Структура;
			ПараметрыВложения.Вставить("ИмяФайла", "_" + СтрЗаменить(Вложение.ИдентификаторФайлаДляHTML, "-", "_"));
			ПараметрыВложения.Вставить("Размер", ДвоичныеДанныеКартинки.Размер());
			ПараметрыВложения.Вставить("ИДФайлаЭлектронногоПисьма", Вложение.ИдентификаторФайлаДляHTML);
			
			ПрисоединенныйФайл = УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
			Письмо,
			АдресКартинкиВоВременномХранилище,
			ПараметрыВложения);
			
			Если ПрисоединенныйФайл <> Неопределено Тогда
				ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
				ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.ИдентификаторФайлаДляHTML;
				ПрисоединенныйФайлОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыВложения 	= Новый Структура;
		ТаблицаВложения 	= Вложения.Выгрузить();
		ТаблицаВложения.Очистить();
		
		Для Каждого Колонка Из ТаблицаВложения.Колонки Цикл
			ПараметрыВложения.Вставить(Колонка.Имя);		
		КонецЦикла;
		
		Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
			Размер 				= 0;
			ЗаполнитьЗначенияСвойств(ПараметрыВложения, СтрокаТаблицыВложений);
			
			Если СтрокаТаблицыВложений.Расположение = 4 Тогда
				УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
				Письмо, СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере, ПараметрыВложения, Размер);
			ИначеЕсли СтрокаТаблицыВложений.Расположение = 3 Тогда
				
			ИначеЕсли СтрокаТаблицыВложений.Расположение = 1 Тогда
				УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаСкопировавВложениеДругогоПисьма(
				Письмо, СтрокаТаблицыВложений.Ссылка, УникальныйИдентификатор);
			ИначеЕсли СтрокаТаблицыВложений.Расположение = 0 Тогда
				// перезаписать вложение
			КонецЕсли;
			
			СтрокаТаблицыВложений.Расположение = 0;
		КонецЦикла;
		
		ЗаполнитьВложения();
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если ТекущийОбъект.ХозОперация = Справочники.ХозОперации.ЭлектроннаяРассылка Тогда
		Если Объект.ФорматТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Тогда
			СтруктураВложений = Новый Структура;
			ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ТекстПисьма, СтруктураВложений);
			Для каждого Вложение Из СтруктураВложений Цикл
				
				НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
				НоваяСтрока.ИмяФайла = Вложение.Ключ;
				НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
				НоваяСтрока.Картинка = Вложение.Значение;
				
			КонецЦикла;
			
			Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
				ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстПисьма);
				Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам.Выгрузить());
				ТекущийОбъект.ТекстПисьма = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			Иначе
				ТекущийОбъект.ТекстПисьма = ТекстПисьма; 
			КонецЕсли;
		Иначе
			ТекущийОбъект.ТекстПисьма = ТекстПисьма;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Если ТекущийОбъект.ХозОперация = Справочники.ХозОперации.ЭлектроннаяРассылка Тогда
		// Подготовим документ HTML из содержимого форматированного документа
		Если Объект.ФорматТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Тогда
			// Содержание
			СтруктураВложений = Новый Структура;
			ТекстHTML = "";
			ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ТекстHTML, СтруктураВложений);
			ТекущийОбъект.ТекстПисьма = ТекстHTML;
		Иначе
			ТекущийОбъект.ТекстПисьма = ТекстПисьма;
		КонецЕсли;
	КонецЕсли;
	// Заполним табличную часть документа
	МассивСвойств = Новый Массив;
	МассивСвойств.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ОтказОтРассылки"));
	Для каждого Получатель Из Объект.Получатели Цикл
		Свойства = УправлениеСвойствами.ПолучитьЗначенияСвойств(Получатель.Получатель,Ложь,Истина,МассивСвойств);
		ОтказОтРассылки = Свойства.Найти(ПредопределенноеЗначение("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ОтказОтРассылки"));
		Если ОтказОтРассылки <> Неопределено Тогда
			Получатель.отказ = ОтказОтРассылки.Значение;
		КонецЕсли;
		
		Если Получатель.РезультатОбработкиЗвонка = ПредопределенноеЗначение("Перечисление.РезультатыОбработкиЗвонка.Обработан") Тогда
			Получатель.Обработан = Истина;
		ИначеЕсли Получатель.РезультатОбработкиЗвонка = ПредопределенноеЗначение("Перечисление.РезультатыОбработкиЗвонка.НеДозвонились") Тогда
			Получатель.НеДозвонились = Истина;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьАнкетыУчастников();

	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);
	РаботаСФормойКлиент.ОбновитьПодчиненныеСчета(Объект.Ссылка, Неопределено);
	
КонецПроцедуры 

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	Настройки.Вставить("ГруппаРасширеннаяИнформация", Элементы.ГруппаРасширеннаяИнформация.Видимость);
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;	
	// Восстанавливаем параметры отображения страниц расширенной информации
	Если НЕ Настройки.Получить("ГруппаРасширеннаяИнформация")=Неопределено Тогда
		ПоказатьКорзину = (НЕ Настройки.Получить("ГруппаРасширеннаяИнформация")=ЛОЖЬ);
		// Произведем настройку параметров отображения полей расширенной информации
		Элементы.ГруппаРасширеннаяИнформация.Видимость   = ПоказатьКорзину;
		Элементы.ПолучателиТелемаркетингПоказатьРасширеннуюИнформацию.Пометка = ПоказатьКорзину;
	КонецЕсли;

	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЭлектроннаяРассылка") Тогда
		ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты");
	ИначеЕсли Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ПочтоваяРассылка") Тогда
		ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес");
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ТипКИ",ТипКИ);
	// Вызываем обработчик изменения данных объекта
	Документы.Рассылка.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ЭлектроннаяРассылка Тогда
		ЗаполнитьВложения(Параметры);
		Если Объект.ФорматТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Тогда
			СтруктураВложений = Новый Структура;
			ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(Объект.Ссылка, Объект.ТекстПисьма,СтруктураВложений);
			ТекстПисьмаФорматированныйДокумент.УстановитьHTML(ТекстHTML, СтруктураВложений);
		Иначе
			ТекстПисьма = Объект.ТекстПисьма;
		КонецЕсли;
	КонецЕсли;
	
	Объект.ТекстПисьма = "";
	ТекстПисьма = "";
	ТекстПисьмаФорматированныйДокумент.Удалить();
	ТаблицаСоответствийИменВложенийИдентификаторам.Очистить();
	Вложения.Очистить();
	
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.Телемаркетинг") Тогда
		Если Элементы.ПолучателиТелемаркетинг.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ПолучателиПодменюЗаполнения") = Неопределено Тогда
			Элементы.Переместить(
				Элементы.ПолучателиПодменюЗаполнения,
				Элементы.ПолучателиТелемаркетинг.КоманднаяПанель,
				Элементы.ПолучателиТелемаркетингПодбор
			);
		КонецЕсли;
	ИначеЕсли Элементы.Получатели.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ПолучателиПодменюЗаполнения") = Неопределено Тогда
		Элементы.Переместить(
			Элементы.ПолучателиПодменюЗаполнения,
			Элементы.Получатели.КоманднаяПанель,
			Элементы.ПолучателиПодбор
		);
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);

	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	Документы.Рассылка.ДатаПриИзменении(Объект, ПараметрыДействия);

	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТекстСообщенияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Элементы.ОсталосьСимволов.Заголовок = ВзаимодействияКлиентСервер.СформироватьИнформационнуюНадписьКоличествоСимволовСообщений(Элементы.Транслитерация.Пометка,Текст);
	Объект.ТекстПисьма = Текст;
	
КонецПроцедуры 

&НаСервере
Функция УчетнаяЗаписьПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	Возврат Объект.УчетнаяЗапись.ПометкаУдаления;
	
КонецФункции 

&НаКлиенте
Процедура УчетнаяЗаписьПриИзменении(Элемент)
	
	Если УчетнаяЗаписьПриИзмененииНаСервере() Тогда
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияУчетнаяЗапись", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещенияОЗакрытии,НСтр("ru = 'Выбранная учетная запись помечена на удаление. Продолжить?'"),РежимДиалогаВопрос.ДаНет);
	Иначе
		Объект.ОтправительПредставление = ?(СокрЛП(Объект.УчетнаяЗапись) = "", "<>"," <"+ Объект.УчетнаяЗапись + "> ");
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПутьКФайлуПисьмаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Каталог   = КаталогДокументов();;
	ДиалогВыбора.Заголовок = НСтр("ru = 'Выберите файл, содержащий шаблон письма'") + Символы.НПП + "...";
	ДиалогВыбора.Фильтр = "Документ Word; Шаблон Word(*.doc;*.docx;*.dot)|*.doc;*.docx;*.dot";
	// Вызов диалога выбора ...
	ДополнительныеПараметры = Новый Структура("ДиалогВыбора", ДиалогВыбора);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПутьКФайлуПисьмаНачалоВыбораЗавершение",
													ЭтотОбъект, ДополнительныеПараметры);
	ДиалогВыбора.Показать(ОписаниеОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПутьКФайлуПисьмаНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбора = ДополнительныеПараметры.ДиалогВыбора;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		// Запоминаем выбранный каталог.
		ПутьКФайлуПисьма = ДиалогВыбора.ПолноеИмяФайла;
		Элементы.ПутьКФайлуПисьма.КнопкаОткрытия = ЗначениеЗаполнено(ПутьКФайлуПисьма);
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ПутьКФайлуПисьмаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(ПутьКФайлуПисьма);
		
КонецПроцедуры 

&НаКлиенте
Процедура ПутьКФайлуПисьмаОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ПутьКФайлуПисьма.КнопкаОткрытия =  Ложь;
	
КонецПроцедуры 

&НаКлиенте
Процедура ШаблонАнкетыПриИзменении(Элемент)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПользователи

&НаКлиенте
Процедура ПолучателиТелемаркетингФлагПриИзменении(ТекущиеДанные)
	
	Если ТекущиеДанные.Обработан Тогда
		ТекущиеДанные.РезультатОбработкиЗвонка = ПредопределенноеЗначение("Перечисление.РезультатыОбработкиЗвонка.Обработан");
	ИначеЕсли ТекущиеДанные.НеДозвонились Тогда
		ТекущиеДанные.РезультатОбработкиЗвонка = ПредопределенноеЗначение("Перечисление.РезультатыОбработкиЗвонка.НеДозвонились");
	Иначе
		ТекущиеДанные.РезультатОбработкиЗвонка = ПредопределенноеЗначение("Перечисление.РезультатыОбработкиЗвонка.НеОбработан");
	КонецЕсли;
	ВывестиСостояниеОбзвона();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолучателиТелемаркетингОбработанПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПолучателиТелемаркетинг.ТекущиеДанные;
	Если ТекущиеДанные.Обработан Тогда
		ТекущиеДанные.НеДозвонились = Ложь;
	КонецЕсли;
	ПолучателиТелемаркетингФлагПриИзменении(ТекущиеДанные)
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолучателиТелемаркетингНеДозвонилисьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПолучателиТелемаркетинг.ТекущиеДанные;
	Если ТекущиеДанные.НеДозвонились Тогда
		ТекущиеДанные.Обработан = Ложь;
	КонецЕсли;
	
	ПолучателиТелемаркетингФлагПриИзменении(ТекущиеДанные)
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолучателиПриАктивизацииЯчейки(Элемент)
	
	Если НЕ Элемент.ТекущийЭлемент = Неопределено И (Элемент.ТекущийЭлемент.Имя = "ПолучателиАдресЭлектроннойПочты" ИЛИ  Элемент.ТекущийЭлемент.Имя = "ПолучателиАдрес" ИЛИ  Элемент.ТекущийЭлемент.Имя = "ПолучателиТелефон") Тогда
		Элемент.ТекущийЭлемент.СписокВыбора.Очистить();
		
		ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекущиеДанные.СписокАдресов) Тогда
			Элемент.ТекущийЭлемент.СписокВыбора.ЗагрузитьЗначения(
			СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущиеДанные.СписокАдресов,";"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолучателиТелемаркетингПриАктивизацииСтроки(Элемент)

	ПодключитьОбработчикОжидания("Подключаемый_СписокПриАктивизацииСтроки", 0.5, ИСТИНА);

КонецПроцедуры 

&НаКлиенте
Процедура ПолучателиТелемаркетингВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТД = Элементы.ПолучателиТелемаркетинг.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	Если Поле.Имя = "ПолучателиТелемаркетингЗвонок" Тогда
		Если ЗначениеЗаполнено(ТД.Звонок) Тогда
			ПараметрыФормы = Новый Структура("Ключ", ТД.Звонок);
			ОткрытьФорму("Документ.ТелефонныйЗвонок.ФормаОбъекта", ПараметрыФормы);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокПриАктивизацииСтроки()
	
	УправлениеСпискомСправочникаКлиент.СписокПриАктивизацииСтроки(ЭтотОбъект, Элементы.ПолучателиТелемаркетинг, ИСТИНА);
	
	Если Элементы.ПолучателиТелемаркетинг.ТекущаяСтрока = Неопределено ИЛИ Элементы.ГруппаРасширеннаяИнформация.Видимость = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПолучателиТелемаркетинг.ТекущиеДанные;
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.Телемаркетинг") Тогда
		КонтактныеЛицаПользователя.Отбор.Элементы.Очистить();
		ЭлементОтбора = КонтактныеЛицаПользователя.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Владелец");
		ЭлементОтбора.Использование  = ИСТИНА;
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ТекущиеДанные.Получатель;
		ЭлементОтбора = КонтактныеЛицаПользователя.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Взаимоотношение");
		ЭлементОтбора.Использование  = ИСТИНА;
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение("Справочник.ВидыВзаимоотношений.КонтактноеЛицо");
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолучателиТелемаркетингПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.ПолучателиТелемаркетинг.ТекущиеДанные;
	Если Элемент.ТекущийЭлемент.Имя = "ПолучателиТелемаркетингТелефон" Тогда
		Элемент.ТекущийЭлемент.СписокВыбора.Очистить();
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекущиеДанные.СписокАдресов) Тогда
			
		КонецЕсли;
		
		Элемент.ТекущийЭлемент.СписокВыбора.ЗагрузитьЗначения(
		СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущиеДанные.СписокАдресов,";"));
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПолучатель = ТекущиеДанные.Получатель;
	
КонецПроцедуры 

&НаСервере
Процедура ПолучателиПолучательПриИзмененииНаСервере(ПараметрыДействия=Неопределено)

	ТекущиеДанные = Объект.Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	Документы.Рассылка.ПолучателиПолучательПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	// Заполним табличную часть документа
	МассивСвойств = Новый Массив;
	МассивСвойств.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ОтказОтРассылки"));
	Свойства = УправлениеСвойствами.ПолучитьЗначенияСвойств(ТекущиеДанные.Получатель,Ложь,Истина,МассивСвойств);
	ОтказОтРассылки = Свойства.Найти(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ОтказОтРассылки);
	Если ОтказОтРассылки <> Неопределено Тогда
		ТекущиеДанные.Отказ = ОтказОтРассылки.Значение;
	КонецЕсли;
	
	Если ТекущиеДанные.РезультатОбработкиЗвонка = ПредопределенноеЗначение("Перечисление.РезультатыОбработкиЗвонка.Обработан") Тогда
		ТекущиеДанные.Обработан = Истина;
	ИначеЕсли ТекущиеДанные.РезультатОбработкиЗвонка = ПредопределенноеЗначение("Перечисление.РезультатыОбработкиЗвонка.НеДозвонились") Тогда
		ТекущиеДанные.НеДозвонились = Истина;
	КонецЕсли;

	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолучателиПолучательПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ТипКИ",ТипКИ);
	ПолучателиПолучательПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолучателиСобытиеСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Получатель) Тогда
		СтруктураПараметров = Новый Структура;
		ЗначенияЗаполнения  = Новый Структура;
		Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЭлектроннаяРассылка") Тогда
			ЗначенияЗаполнения.Вставить("ВидСобытия",ПредопределенноеЗначение("Справочник.ВидыСобытий.ЭлектронноеОбращение"));
		КонецЕсли;
		ЗначенияЗаполнения.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Завершено"));
		ЗначенияЗаполнения.Вставить("Контрагент", ТекущиеДанные.Получатель);
		СтруктураПараметров.Вставить("ЗначенияЗаполнения",ЗначенияЗаполнения);
		СтруктураПараметров.Вставить("РежимВыбора", Истина);
		ОткрытьФорму("Документ.Событие.ФормаОбъекта",СтруктураПараметров,Элемент);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не выбран получатель.'"));
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ПолучателиТелемаркетингПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Получатели.НайтиПоИдентификатору(Элементы.ПолучателиТелемаркетинг.ТекущаяСтрока);
	// Вызываем обработчик изменения данных объекта
	Документы.Рассылка.ПолучателиПолучательПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
	МассивСвойств = Новый Массив;
	МассивСвойств.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ОтказОтРассылки"));
	Свойства = УправлениеСвойствами.ПолучитьЗначенияСвойств(ТекущиеДанные.Получатель,Ложь,Истина,МассивСвойств);
	ОтказОтРассылки = Свойства.Найти(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ОтказОтРассылки);
	Если ОтказОтРассылки <> Неопределено Тогда
		ТекущиеДанные.Отказ = ОтказОтРассылки.Значение;
	КонецЕсли;

	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолучателиТелемаркетингПолучательПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ТипКИ",ТипКИ);
	ПолучателиТелемаркетингПриИзмененииНаСервере(ПараметрыДействия);
	Подключаемый_СписокПриАктивизацииСтроки()
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолучателиСобытиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияПолучателиСобытие", ЭтотОбъект);
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Выполнение действия возможно только после записи данных.
		|Данные будут записаны.'");
		// Получаем подтверждение операции от пользователя
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Контрагент", Элементы.Получатели.ТекущиеДанные.Получатель);
		Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЭлектроннаяРассылка") Тогда
			ПараметрыОтбора.Вставить("ВидСобытия",ПредопределенноеЗначение("Справочник.ВидыСобытий.ЭлектронноеОбращение"));
		КонецЕсли;
		ПараметрыОткрытия.Вставить("Отбор", ПараметрыОтбора);
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикЗакрытия = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияПолучателиСобытиеВыбор", ЭтотОбъект);
		ОткрытьФорму("Документ.Событие.ФормаВыбора", ПараметрыОткрытия,Элементы.ПолучателиСобытие,,,,ОбработчикЗакрытия);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолучателиТелемаркетингСобытиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияТелемаркетингСобытие", ЭтотОбъект);
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Выполнение действия возможно только после записи данных.
		|Данные будут записаны.'");
		// Получаем подтверждение операции от пользователя
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Контрагент", Элементы.ПолучателиТелемаркетинг.ТекущиеДанные.Получатель);
		ПараметрыОтбора.Вставить("ВидСобытия",ПредопределенноеЗначение("Справочник.ВидыСобытий.ИсходящийЗвонок"));
		ПараметрыОткрытия.Вставить("Отбор", ПараметрыОтбора);
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикЗакрытия = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияТелемаркетингСобытиеВыбор", ЭтотОбъект);
		ОткрытьФорму("Документ.Событие.ФормаВыбора", ПараметрыОткрытия,Элементы.ПолучателиТелемаркетингСобытие,,,,ОбработчикЗакрытия)
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолучателиТелемаркетингЖалобаКлиентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияТелемаркетингЖалобаКлиента", ЭтотОбъект);
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Выполнение действия возможно только после записи данных.
		|Данные будут записаны.'");
		// Получаем подтверждение операции от пользователя
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОтбора = Новый Структура("Контрагент", Элементы.ПолучателиТелемаркетинг.ТекущиеДанные.Получатель);
		ПараметрыОткрытия.Вставить("Отбор", ПараметрыОтбора);
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		// Формируем описание обработчика перехвата закрытия формы
		ОбработчикЗакрытия = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияТелемаркетингЖалобаКлиентаВыбор", ЭтотОбъект);
		ОткрытьФорму("Документ.ЖалобаКлиента.ФормаВыбора", ПараметрыОткрытия,Элементы.ПолучателиТелемаркетингЖалобаКлиента,,,,ОбработчикЗакрытия);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция ПолучателиТелемаркетингАнкетаПроведенаНаСервере()
	
	ТекущиеДанные = Объект.Получатели.Получить(Элементы.ПолучателиТелемаркетинг.ТекущаяСтрока);
	Возврат ТекущиеДанные.Анкета.Проведен;
	
КонецФункции 

&НаСервере
Функция ТипРеспондентовОпросаКонтрагент()
	
	Возврат Объект.Опрос.ТипРеспондентов = Справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции 

&НаСервере
Процедура ПолучателиТелемаркетингАнкетаОткрытиеНаСервере()
	
	НазначениеОпросаИзменено = Ложь;
	// Получим документ назначение опроса.
	Если ЗначениеЗаполнено(Объект.Опрос) Тогда
		НазначениеОпроса = Объект.Опрос.ПолучитьОбъект();
		Если НЕ Объект.Опрос.ШаблонАнкеты = Объект.ШаблонАнкеты Тогда
			НазначениеОпроса.ШаблонАнкеты = Объект.ШаблонАнкеты;
			НазначениеОпросаИзменено = Истина;
		КонецЕсли;
		// Добавим новых пользователей.
		Для каждого Респондент Из Объект.Получатели Цикл
			Если НазначениеОпроса.Респонденты.Найти(Респондент.Получатель)=Неопределено Тогда
				НовыйРеспондент = НазначениеОпроса.Респонденты.Добавить();
				НовыйРеспондент.Респондент = Респондент.Получатель;
				НазначениеОпросаИзменено = Истина;
			КонецЕсли;
		КонецЦикла;
		// Уберем удаленных пользователей.
		УдаляемыеРеспонденты = Новый Массив;
		Для каждого Респондент Из НазначениеОпроса.Респонденты Цикл
			Если Объект.Получатели.НайтиСтроки(Новый Структура("Получатель", Респондент.Респондент)).Количество()=0 Тогда
				УдаляемыеРеспонденты.Добавить(Респондент);
			КонецЕсли;
		КонецЦикла;
		Для каждого УдаляемыйРеспондент Из УдаляемыеРеспонденты Цикл
			НазначениеОпроса.Респонденты.Удалить(НазначениеОпроса.Респонденты.Индекс(УдаляемыйРеспондент));
			НазначениеОпросаИзменено = Истина;
		КонецЦикла;
	Иначе
		НазначениеОпроса = Документы.НазначениеОпросов.СоздатьДокумент();
		НазначениеОпроса.Наименование = ?(ЗначениеЗаполнено(Объект.Тема),Объект.Тема,НСтр("ru ='Опрос для телемаркетинга'"));
		НазначениеОпроса.ШаблонАнкеты = Объект.ШаблонАнкеты;
		НазначениеОпроса.Дата = ТекущаяДатаСеанса();
		НазначениеОпроса.ТипРеспондентов = Справочники.Контрагенты.ПустаяСсылка();
		НазначениеОпроса.ВозможностьПредварительногоСохранения = Истина;
		НазначениеОпросаИзменено = Истина;
		Для каждого Респондент Из Объект.Получатели Цикл
			НовыйРеспондент = НазначениеОпроса.Респонденты.Добавить();
			НовыйРеспондент.Респондент = Респондент.Получатель;
		КонецЦикла;
	КонецЕсли;
	// Сохраним назначение опроса если оно изменилось
	Если НазначениеОпросаИзменено Тогда
		НазначениеОпроса.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	Объект.Опрос = НазначениеОпроса.Ссылка;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолучателиТелемаркетингАнкетаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ПолучателиТелемаркетинг.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// открываем анкету
	Если ЗначениеЗаполнено(ТекущиеДанные.Анкета) Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Ключ",ТекущиеДанные.Анкета);
		СтруктураПараметров.Вставить("ТолькоФормаЗаполнения",Истина);
		АнкетаПроведена = ПолучателиТелемаркетингАнкетаПроведенаНаСервере();
		Если АнкетаПроведена Тогда
			СтруктураПараметров.Вставить("ТолькоПросмотр",Истина);
		КонецЕсли;
		ОткрытьФорму("Документ.Анкета.ФормаОбъекта",СтруктураПараметров,Элемент);
	Иначе
		Если Модифицированность Тогда
			// Формируем описание обработчика перехвата закрытия формы
			ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияТелемаркетингАнкетаОткрытие", ЭтотОбъект);
			// Формируем текст вопроса
			ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия возможно только после записи данных.
			|Данные будут записаны.'");
			// Получаем подтверждение операции от пользователя
			ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			Получатель = Элементы.ПолучателиТелемаркетинг.ТекущиеДанные.Получатель;
			Если ЗначениеЗаполнено(Получатель) Тогда
				Респондент = Получатель;
			Иначе
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не выбран получатель.'"));
				Возврат;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объект.ШаблонАнкеты) Тогда
				ПолучателиТелемаркетингАнкетаОткрытиеНаСервере();
			Иначе
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не выбран шаблон анкеты.'"));
				Возврат;
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура;
			ЗначенияЗаполнения  = Новый Структура;
			ЗначенияЗаполнения.Вставить("Опрос", Объект.Опрос);
			ЗначенияЗаполнения.Вставить("Респондент", Респондент);
			СтруктураПараметров.Вставить("ЗначенияЗаполнения",ЗначенияЗаполнения);
			СтруктураПараметров.Вставить("ТолькоФормаЗаполнения", Истина);
			// Формируем описание обработчика перехвата закрытия формы
			ОбработчикЗакрытия = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияТелемаркетингАнкетаСоздание", ЭтотОбъект);
			ОткрытьФорму("Документ.Анкета.ФормаОбъекта",СтруктураПараметров,Элементы.ПолучателиТелемаркетингАнкета,,,,ОбработчикЗакрытия);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолучателиТелемаркетингЖалобаКлиентаСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ПолучателиТелемаркетинг.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Получатель) Тогда
		СтруктураПараметров = Новый Структура;
		ЗначенияЗаполнения  = Новый Структура;
		ЗначенияЗаполнения.Вставить("ДокументОснование", Объект.Ссылка);
		ЗначенияЗаполнения.Вставить("Контрагент", ТекущиеДанные.Получатель);
		СтруктураПараметров.Вставить("ЗначенияЗаполнения",ЗначенияЗаполнения);
		СтруктураПараметров.Вставить("РежимВыбора", Истина);
		ОткрытьФорму("Документ.ЖалобаКлиента.ФормаОбъекта",СтруктураПараметров,Элемент);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не выбран получатель.'"));
	КонецЕсли;
		
КонецПроцедуры 

&НаКлиенте
Процедура ПолучателиТелемаркетингСобытиеСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ПолучателиТелемаркетинг.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Получатель) Тогда
		СтруктураПараметров = Новый Структура;
		ЗначенияЗаполнения  = Новый Структура;
		ЗначенияЗаполнения.Вставить("ВидСобытия", ПредопределенноеЗначение("Справочник.ВидыСобытий.ИсходящийЗвонок"));
		ЗначенияЗаполнения.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.СостоянияСобытий.Завершено"));
		ЗначенияЗаполнения.Вставить("Контрагент", ТекущиеДанные.Получатель);
		СтруктураПараметров.Вставить("ЗначенияЗаполнения",ЗначенияЗаполнения);
		СтруктураПараметров.Вставить("РежимВыбора", Истина);
		ОткрытьФорму("Документ.Событие.ФормаОбъекта",СтруктураПараметров,Элемент);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не выбран получатель.'"));
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подбор(Команда)
	// Получим список адресатов
	СоответствиеТабличныхЧастей = Новый Соответствие;
	СоответствиеТабличныхЧастей.Вставить("Получатель", Объект.Получатели);
	
	КИ = "АдресЭлектроннойПочты";
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.РассылкаSMS") Тогда
		КИ = "Телефон";
	ИначеЕсли Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ПочтоваяРассылка") Тогда
		КИ = "Адрес";
	КонецЕсли;
	
	СписокВыбранных = Новый СписокЗначений;
	Для Каждого ТабличнаяЧасть Из СоответствиеТабличныхЧастей Цикл
		
		Результат = Новый Массив;
		Для Каждого СтрокаТаблицы Из ТабличнаяЧасть.Значение Цикл
			Контакт = ?(ТипЗнч(СтрокаТаблицы.Получатель) = Тип("Строка"), Неопределено, СтрокаТаблицы.Получатель);
			Запись = Новый Структура(
			"Адрес, Представление, Контакт", СтрокаТаблицы[КИ],Строка(СтрокаТаблицы.Получатель), СтрокаТаблицы.Получатель);
			Если ЗначениеЗаполнено(Запись.Адрес) Тогда
				Результат.Добавить(Запись);
			КонецЕсли;
		КонецЦикла;
		СписокВыбранных.Добавить(Результат,ТабличнаяЧасть.Ключ);
	КонецЦикла;
	
	СписокТиповКонтактов = Новый Массив;
	СписокТиповКонтактов.Добавить("Страница_Контрагенты");
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
	ПараметрыОткрытия.Вставить("СписокВыбранных", СписокВыбранных);
	ПараметрыОткрытия.Вставить("Предмет", Неопределено);
	ПараметрыОткрытия.Вставить("Письмо", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ГруппаПоУмолчанию",НСтр("ru = 'Получатель'"));
	ПараметрыОткрытия.Вставить("СписокТиповКонтактов",СписокТиповКонтактов);
	ПараметрыОткрытия.Вставить("ТипКИ",ТипКИ);
	// Откроем форму для редактирования списка адресатов
	ОткрытьФорму("ОбщаяФорма.АдреснаяКнига", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиенте
Процедура Транслитерация(Команда)
	
	Элементы.Транслитерация.Пометка = НЕ Элементы.Транслитерация.Пометка;
	Если Элементы.Транслитерация.Пометка Тогда
		Объект.ТекстПисьма = СтрокаЛатиницей(Объект.ТекстПисьма);
	Иначе
		Объект.ТекстПисьма = ОбратнаяТранслитерация(Объект.ТекстПисьма);
	КонецЕсли;
	Элементы.ОсталосьСимволов.Заголовок = ВзаимодействияКлиентСервер.СформироватьИнформационнуюНадписьКоличествоСимволовСообщений(Элементы.Транслитерация.Пометка,объект.ТекстПисьма);
	
КонецПроцедуры 

&НаКлиенте
Процедура СостояниеОбзвона(Команда)
	
	ОтображатьСостояниеОбзвона = НЕ Элементы.ПолучателиТелемаркетингСостояниеОбзвона.Пометка;
	Элементы.ПолучателиТелемаркетингСостояниеОбзвона.Пометка = НЕ Элементы.ПолучателиТелемаркетингСостояниеОбзвона.Пометка;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПоказатьРасширеннуюИнформацию(Команда)
	// Определим новое значение статуса отображения расширенной информации
	ПоказатьРасширеннуюИнформацию = (НЕ Элементы.ГруппаРасширеннаяИнформация.Видимость);
	// Произведем настройку параметров отображения полей расширенной информации
	Элементы.ГруппаРасширеннаяИнформация.Видимость = ПоказатьРасширеннуюИнформацию;
	Элементы.ПолучателиТелемаркетингПоказатьРасширеннуюИнформацию.Пометка   = ПоказатьРасширеннуюИнформацию;
	// Взведем признак необходимости выполнить сохранение настроек формы при закрытии
	СохраняемыеВНастройкахДанныеМодифицированы = ИСТИНА;
	
КонецПроцедуры 

&НаСервере
Процедура ОтправитьНаСервере(ПараметрыДействия=Неопределено)
	
	Если Объект.ХозОперация = Справочники.ХозОперации.РассылкаSMS Тогда
		Документы.Рассылка.РассылкаSMSОтправить(Объект,ПараметрыДействия);
	Иначе
		Документы.Рассылка.ЭлектроннаяРассылкаОтправить(Объект,ПараметрыДействия);
	КонецЕсли;
	Записать();
	
КонецПроцедуры 

&НаКлиенте
Процедура Отправить(Команда)
	
	Если ЗначениеЗаполнено(Объект.ТекстПисьма) Тогда 
		ОчиститьСообщения();
		// Определим структуру параметров обработки текущего события
		ПараметрыДействия = Новый Структура;
		// Обработаем событие в контексте сервера
		ОтправитьНаСервере(ПараметрыДействия);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Текст сообщения не заполнен.'"));
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ПредпросмотрНаСервере()
		
	MSWord = Новый COMОбъект("Word.Application");
	MSWord.Visible = Ложь;
	MSWord.Documents.Open(ПутьКФайлуПисьма);
	ИмяВременногоHTMLДокумента = ПолучитьИмяВременногоФайла(".html");
	MSWord.ActiveDocument.SaveAs(ИмяВременногоHTMLДокумента, 8);
	MSWord.ActiveDocument.Close(-1);
	MSWord.Quit();
	ПочтовоеПисьмоПредпросмотр=ИмяВременногоHTMLДокумента;
	
КонецПроцедуры 

&НаКлиенте
Процедура Предпросмотр(Команда)
	
	Файл = Новый Файл(ПутьКФайлуПисьма);
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПредпросмотрЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПредпросмотрЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Выбранный файл не существует.'"));
		Возврат;
	КонецЕсли;
	
	ПредпросмотрНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ПечатьПисемНаСервере()
		
	ОбщийДокументMSWord = Новый COMОбъект("Word.Application");
	ОбщийДокументMSWord.Visible = Ложь;
	ОбщийДокументMSWord.Documents.Add(,,,Истина);
	docRange = ОбщийДокументMSWord.ActiveDocument.Range();
	
	ВременныйMSWord = Новый COMОбъект("Word.Application");
	ВременныйMSWord.Visible = Ложь;
	
	НомерСтроки=Объект.Получатели.Количество()-1;
	Пока НомерСтроки>=0 Цикл 
		СтрокаПолучателей=Объект.Получатели[НомерСтроки];
		Если НЕ СтрокаПолучателей.Отказ Тогда
			
			ВременныйMSWord.Documents.Open(ПутьКФайлуПисьма);
			ИмяВременногоДокумента = ПолучитьИмяВременногоФайла(".doc");
			ВременныйMSWord.ActiveDocument.SaveAs(ИмяВременногоДокумента);
			ВременныйMSWord.ActiveDocument.Close(-1);
			
			docRange.Collapse(0);
			docRange.InsertFile(ИмяВременногоДокумента);
			
		КонецЕсли;
		НомерСтроки = НомерСтроки - 1;
	КонецЦикла;
	
	ВременныйMSWord.Quit();
	ВременныйMSWord = Неопределено;
		
	ОбщийДокументMSWord.Visible = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПечатьПисем(Команда)
	
	Файл = Новый Файл(ПутьКФайлуПисьма);
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПечатьПисемЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПисемЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Выбранный файл не существует.'"));
		Возврат;
	КонецЕсли;
	
	ПечатьПисемНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьВложениеВыполнить(Команда)
	
	#Если Не ВебКлиент Тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.МножественныйВыбор = Истина;
		Если Не Диалог.Выбрать() Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого ВыбранныйФайл Из Диалог.ВыбранныеФайлы Цикл
			НоваяСтрока = Вложения.Добавить();
			НоваяСтрока.Расположение = 2;
			НоваяСтрока.ИмяФайлаНаКомпьютере = ВыбранныйФайл;
			
			Файл                            = Новый Файл(ВыбранныйФайл);

			НоваяСтрока.ИмяФайла = Файл.Имя;
			НоваяСтрока.ИндексКартинки      = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.Расширение);			
			НоваяСтрока.Размер              = Файл.Размер();
			НоваяСтрока.РазмерПредставление = ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(НоваяСтрока.Размер);
		КонецЦикла;
	#Иначе
		Адрес = "";
		ВыбранныйФайл = "";
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ПомещениеФайлаПриОкончании", ЭтотОбъект);
		НачатьПомещениеФайла(ОбработчикОповещенияОЗакрытии, Адрес, ВыбранныйФайл, Истина, УникальныйИдентификатор);
	#КонецЕсли
	
КонецПроцедуры 

&НаКлиенте
Процедура УдалитьВложениеВыполнить(Команда)
	
	текДанные = Элементы.Вложения.ТекущиеДанные;
	Если (текДанные <> Неопределено) И (текДанные.Расположение = 0) Тогда
		УдаленныеВложения.Добавить(текДанные.Ссылка);
	КонецЕсли;
	
	текДанные = Элементы.Вложения.ТекущиеДанные;
	Если текДанные <> Неопределено Тогда
		Индекс = Вложения.Индекс(текДанные);
		Вложения.Удалить(Индекс);
		ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьВложениеВыполнить(Команда)
	
	текДанные = Элементы.Вложения.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (текДанные.Расположение = 0) ИЛИ (текДанные.Расположение = 1) Тогда
		УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(текДанные.Ссылка, УникальныйИдентификатор);
	ИначеЕсли текДанные.Расположение = 2 Тогда
		ПутьКФайлу = текДанные.ИмяФайлаНаКомпьютере;
		#Если Не ВебКлиент Тогда
			ЗапуститьПриложение("""" + ПутьКФайлу + """");
		#Иначе
			ПолучитьФайл(ПутьКФайлу, текДанные.ИмяФайла, Истина);
		#КонецЕсли
	ИначеЕсли текДанные.Расположение = 4 Тогда
		ПутьКФайлу = текДанные.ИмяФайлаНаКомпьютере;
		#Если Не ВебКлиент Тогда
			Если ЭтоАдресВременногоХранилища(текДанные.ИмяФайлаНаКомпьютере) Тогда
				ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
				СоздатьКаталог(ИмяВременнойПапки);
				ПутьКФайлу = ИмяВременнойПапки + "\" + текДанные.ИмяФайла;
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(текДанные.ИмяФайлаНаКомпьютере);
				ДвоичныеДанные.Записать(ПутьКФайлу);
			КонецЕсли;
			ЗапуститьПриложение("""" + ПутьКФайлу + """");
		#Иначе
			ПолучитьФайл(ПутьКФайлу, текДанные.ИмяФайла, Истина);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СвойстваВложения(Команда)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийИндексВКоллекции = Вложения.Индекс(ТекущиеДанные);
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ДополнительныеПараметры = Новый Структура("ТекущийИндексВКоллекции", ТекущийИндексВКоллекции);
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ВопросОЗаписиФайлаПослеЗакрытия", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Свойства файла доступны только после его записи. Записать?'");
		ПоказатьВопрос(ОбработчикОповещенияОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытьСвойстваВложения(ТекущийИндексВКоллекции);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьФорматТекста(Команда)
	
	Если Объект.ФорматТекста <> ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.ПростойТекст") И Команда.Имя = "ПростойТекст" Тогда
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияИзменениеФорматаТекста", ЭтотОбъект);
		ТекстСообщения = НСтр("ru='При преобразовании этого сообщения в обычный текст будут утеряны все элементы оформления, картинки и прочие вставленные элементы. Продолжить?'");
		ПоказатьВопрос(ОбработчикОповещенияОЗакрытии, ТекстСообщения, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Изменение формата письма'"));
	ИначеЕсли Объект.ФорматТекста <> ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML") И Команда.Имя = "HTML" Тогда
		Объект.ФорматТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML");
		ТекстПисьмаФорматированныйДокумент.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(ТекстПисьма));
		ТекстПисьма = "";
		Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаHTML;
		
		Для Каждого КнопкаОперации Из Элементы.ПодменюФорматТекста.ПодчиненныеЭлементы Цикл
			КнопкаОперации.Пометка = (КнопкаОперации.ИмяКоманды = Команда.Имя);
		КонецЦикла;
		
		Элементы.ПодменюФорматТекста.Заголовок = Строка(Объект.ФорматТекста);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьКоманднуюПанель()
	
	Если ЗначениеЗаполнено(Объект.ФорматТекста) Тогда
		Если Объект.ФорматТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Тогда
			ИмяТекущейФормата = Метаданные.Перечисления.ТипыТекстовЭлектронныхПисем.ЗначенияПеречисления.HTML.Имя;
		Иначе
			ИмяТекущейФормата = Метаданные.Перечисления.ТипыТекстовЭлектронныхПисем.ЗначенияПеречисления.ПростойТекст.Имя;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ПодменюФорматТекста.Заголовок 			= Строка(Объект.ФорматТекста);
	Элементы.СтраницыТекстПисьма.ТекущаяСтраница 	= Элементы["Страница" + ИмяТекущейФормата];
		
	Для Каждого КнопкаОперации Из Элементы.ПодменюФорматТекста.ПодчиненныеЭлементы Цикл
		КнопкаОперации.Пометка = (КнопкаОперации.ИмяКоманды = ИмяТекущейФормата);
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьПодобранныхПолучателей(СоответствиеТабличныхЧастей, Результат)
	
	КИ = "Телефон";
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЭлектроннаяРассылка") Тогда
		КИ = "АдресЭлектроннойПочты";
	ИначеЕсли Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ПочтоваяРассылка") Тогда
		КИ = "Адрес";
	КонецЕсли;
	
	Для Каждого Элемент Из Результат Цикл
		ТабличнаяЧасть = СоответствиеТабличныхЧастей.Получить(Элемент.Группа);
		Если ТабличнаяЧасть = Неопределено Тогда
			ТабличнаяЧасть = Объект.Получатели;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("Получатель," + КИ, Элемент.Контакт, Элемент.Адрес);
		
		НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			НоваяСтрока[КИ]           = Элемент.Адрес;
			НоваяСтрока.Представление = Элемент.Представление;
			НоваяСтрока.Получатель    = Элемент.Контакт;
		Иначе
			НоваяСтрока = НайденныеСтроки[0];
		КонецЕсли;
		НоваяСтрока.СписокАдресов = Элемент.СписокАдресов;
		
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиенте
Функция СтрокаЛатиницей(Знач Строка)
	
	Результат = "";
	
	Соответствие = СоответствиеКириллицыИЛатиницы();
	
	ПредыдущийСимвол = "";
	Для Позиция = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Позиция, 1);
		СимволЛатиницей = Соответствие[НРег(Символ)]; // поиск соответствия без учета регистра
		Если СимволЛатиницей = Неопределено Тогда
			// другие символы остаются "как есть"
			СимволЛатиницей = Символ;
		Иначе
			Если Символ = ВРег(Символ) Тогда
				СимволЛатиницей = ТРег(СимволЛатиницей); // восстанавливаем регистр
			КонецЕсли;
		КонецЕсли;
		Результат = Результат + СимволЛатиницей;
		ПредыдущийСимвол = СимволЛатиницей;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СоответствиеКириллицыИЛатиницы()
	// транслитерация, используемая в загранпаспортах 1997-2010 годах.
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("а","a");
	Соответствие.Вставить("б","b");
	Соответствие.Вставить("в","v");
	Соответствие.Вставить("г","g");
	Соответствие.Вставить("д","d");
	Соответствие.Вставить("е","e");
	Соответствие.Вставить("ё","e");
	Соответствие.Вставить("ж","zh");
	Соответствие.Вставить("з","z");
	Соответствие.Вставить("и","i");
	Соответствие.Вставить("й","y");
	Соответствие.Вставить("к","k");
	Соответствие.Вставить("л","l");
	Соответствие.Вставить("м","m");
	Соответствие.Вставить("н","n");
	Соответствие.Вставить("о","o");
	Соответствие.Вставить("п","p");
	Соответствие.Вставить("р","r");
	Соответствие.Вставить("с","s");
	Соответствие.Вставить("т","t");
	Соответствие.Вставить("у","u");
	Соответствие.Вставить("ф","f");
	Соответствие.Вставить("х","kh");
	Соответствие.Вставить("ц","ts");
	Соответствие.Вставить("ч","ch");
	Соответствие.Вставить("ш","sh");
	Соответствие.Вставить("щ","shch");
	Соответствие.Вставить("ъ","""");
	Соответствие.Вставить("ы","yi");
	Соответствие.Вставить("ь",""); // пропускается
	Соответствие.Вставить("э","ye");
	Соответствие.Вставить("ю","yu");
	Соответствие.Вставить("я","ya");
	
	Возврат Соответствие;
	
КонецФункции 

&НаСервере
Функция ОбратнаяТранслитерация(Текст)
	// Заполняем список соответствий
	СписокСоответствийТранслитерации = Новый СписокЗначений;
	СписокСоответствийТранслитерации.Добавить("y","й");
	СписокСоответствийТранслитерации.Добавить("tz","ц");
	СписокСоответствийТранслитерации.Добавить("u","у");
	СписокСоответствийТранслитерации.Добавить("k","к");
	СписокСоответствийТранслитерации.Добавить("e","е");
	СписокСоответствийТранслитерации.Добавить("n","н");
	СписокСоответствийТранслитерации.Добавить("g","г");
	СписокСоответствийТранслитерации.Добавить("sh","ш");
	СписокСоответствийТранслитерации.Добавить("shch","щ");
	СписокСоответствийТранслитерации.Добавить("z","з");
	СписокСоответствийТранслитерации.Добавить("kh","х");
	СписокСоответствийТранслитерации.Добавить("f","ф");
	СписокСоответствийТранслитерации.Добавить("yi","ы");
	СписокСоответствийТранслитерации.Добавить("v","в");
	СписокСоответствийТранслитерации.Добавить("a","а");
	СписокСоответствийТранслитерации.Добавить("p","п");
	СписокСоответствийТранслитерации.Добавить("r","р");
	СписокСоответствийТранслитерации.Добавить("o","о");
	СписокСоответствийТранслитерации.Добавить("l","л");
	СписокСоответствийТранслитерации.Добавить("d","д");
	СписокСоответствийТранслитерации.Добавить("zh","ж");
	СписокСоответствийТранслитерации.Добавить("ye","э");
	СписокСоответствийТранслитерации.Добавить("ya","я");
	СписокСоответствийТранслитерации.Добавить("ch","ч");
	СписокСоответствийТранслитерации.Добавить("s","с");
	СписокСоответствийТранслитерации.Добавить("m","м");
	СписокСоответствийТранслитерации.Добавить("i","и");
	СписокСоответствийТранслитерации.Добавить("t","т");
	СписокСоответствийТранслитерации.Добавить("'","ь");
	СписокСоответствийТранслитерации.Добавить("b","б");
	СписокСоответствийТранслитерации.Добавить("yu","ю");
	
	ДлинаТекста = СтрДлина(Текст);
	РезультирующийТекст = "";
	
	Коэффициент=1;
	Пока Коэффициент<=ДлинаТекста Цикл
		// поищем сначала совпадения по 3-м символам
		Если НЕ Коэффициент+2>ДлинаТекста Тогда
			Символ = Сред(Текст,Коэффициент,3);
			ПервыйЗаглавный3 = КодСимвола(Лев(Символ,1))>=65 И КодСимвола(Лев(Символ,1))<=90;
			Перевод3 = СписокСоответствийТранслитерации.НайтиПоЗначению(НРег(Символ));
		Иначе
			 Перевод3=Неопределено
		КонецЕсли;
		Если Перевод3=Неопределено Тогда
			// смотрим на 2 символа :)
			Если НЕ Коэффициент+1>ДлинаТекста Тогда
				Символ = Сред(Текст,Коэффициент,2);
				ПервыйЗаглавный2 = КодСимвола(Лев(Символ,1))>=65 И КодСимвола(Лев(Символ,1))<=90;
				Перевод2 = СписокСоответствийТранслитерации.НайтиПоЗначению(НРег(Символ));
			Иначе
				Перевод2 = Неопределено
			КонецЕсли;
			Если Перевод2 = Неопределено Тогда
				// смотрим на один символ :))))
				Символ = Сред(Текст,Коэффициент,1);
				ПервыйЗаглавный1 = КодСимвола(Лев(Символ,1))>=65 И КодСимвола(Лев(Символ,1))<=90;
				Перевод1 = СписокСоответствийТранслитерации.НайтиПоЗначению(НРег(Символ));
				Если Перевод1 = Неопределено Тогда //ну тогда оставляем этот символ как есть
					РезультирующийТекст = РезультирующийТекст+Символ;
				Иначе
					Если ПервыйЗаглавный1 И Символ<>"'" Тогда
						РезПеревод = ВРег(Перевод1);
					Иначе
						РезПеревод = Перевод1
					КонецЕсли;
					РезультирующийТекст = РезультирующийТекст+РезПеревод;
				КонецЕсли;
				Коэффициент=Коэффициент+1
			Иначе
				Если ПервыйЗаглавный2 Тогда
					РезПеревод = ВРег(Лев(Перевод2,1))+Сред(Перевод2,2);
				Иначе
					РезПеревод = Перевод2
				КонецЕсли;
				РезультирующийТекст = РезультирующийТекст+РезПеревод;
				
				Коэффициент=Коэффициент+2
			КонецЕсли;
		Иначе
			Если ПервыйЗаглавный3 Тогда
				РезПеревод = ВРег(Лев(Перевод3,1))+Сред(Перевод3,2);
			Иначе
				РезПеревод = Перевод3
			КонецЕсли;
			РезультирующийТекст = РезультирующийТекст+РезПеревод;
			Коэффициент=Коэффициент+3
		КонецЕсли;
	КонецЦикла;
	Возврат РезультирующийТекст;
	
КонецФункции 

&НаСервере
Процедура ВывестиСостояниеОбзвона()
	
	ВсегоСтрок = Объект.Получатели.Количество();
	Если ВсегоСтрок = 0 Тогда
		Элементы.СостояниеОбзвона.Заголовок = "";
	Иначе
		МассивОбработанныхЗвонков = Объект.Получатели.НайтиСтроки(Новый Структура("РезультатОбработкиЗвонка", Перечисления.РезультатыОбработкиЗвонка.Обработан));
		ОбработаноЗвонков         = МассивОбработанныхЗвонков.Количество();
		
		МассивНедозвонов          = Объект.Получатели.НайтиСтроки(Новый Структура("РезультатОбработкиЗвонка", Перечисления.РезультатыОбработкиЗвонка.НеДозвонились));
		КоличествоНедозвонов      = МассивНедозвонов.Количество();
		
		Элементы.СостояниеОбзвона.Заголовок = "Обработано " + ОбработаноЗвонков + " (" 
												+ Окр(ОбработаноЗвонков/ВсегоСтрок*100,1) + "%), " + НСтр("ru = 'не дозвонились'") + Символы.НПП 
												+ КоличествоНедозвонов + " (" + Окр(КоличествоНедозвонов/ВсегоСтрок*100,1) + "%), " + "всего " +ВсегоСтрок; 
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьАнкетыУчастников()
	
	Если ЗначениеЗаполнено(Объект.Опрос) Тогда
		Если ТипРеспондентовОпросаКонтрагент() Тогда
			ТаблицаАнкет = ПолучитьПоследниеАнкетыРеспондентов(Объект.Опрос);
				
			Для каждого СтрокаУчастники Из Объект.Получатели Цикл
				СтрокаАнкетаРеспондента = ТаблицаАнкет.Найти(СтрокаУчастники.Получатель, "Респондент");
				
				Если СтрокаАнкетаРеспондента <> Неопределено Тогда
					СтрокаУчастники.Анкета = СтрокаАнкетаРеспондента.Анкета;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПоследниеАнкетыРеспондентов(Опрос, Респонденты = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	МАКСИМУМ(Анкета.Дата) КАК Дата,
	              |	Анкета.Респондент
	              |ПОМЕСТИТЬ ДатыПоследнихАнкет
	              |ИЗ
	              |	Документ.Анкета КАК Анкета
	              |ГДЕ
	              |	Анкета.Опрос = &Опрос
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	Анкета.Респондент
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	Анкета.Дата КАК Дата,
	              |	Анкета.Респондент,
	              |	Анкета.Ссылка КАК Анкета,
	              |	Анкета.Проведен КАК ОпросЗавершен
	              |ИЗ
	              |	Документ.Анкета КАК Анкета
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДатыПоследнихАнкет КАК ДатыПоследнихАнкет
	              |		ПО Анкета.Дата = ДатыПоследнихАнкет.Дата
	              |			И Анкета.Респондент = ДатыПоследнихАнкет.Респондент
	              |ГДЕ
	              |	Анкета.Опрос = &Опрос";
	Запрос.УстановитьПараметр("Опрос", Опрос);
	Если ЗначениеЗаполнено(Респонденты) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Анкета.Опрос = &Опрос", "Анкета.Опрос = &Опрос И Анкета.Респондент В(&Респонденты)");  
		Запрос.УстановитьПараметр("Респонденты", Респонденты);
	КонецЕсли;
	
	ТаблицаАнкет = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаАнкет;
	
КонецФункции 

// +СофтФон

&НаКлиенте
Процедура ПрослушатьЗаписьТелефонногоРазговора(Команда)
	
	#Если ВебКлиент Тогда
	Состояние(НСтр("ru = 'Работа СофтФона невозможна в web-клиенте.'"));
	#Иначе
	Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон() Тогда
		Возврат;
	ИначеЕсли НЕ сфпСофтФонПроСервер.сфпИспользоватьЗаписьПереговоров() Тогда
		Возврат;
	КонецЕсли;
	ТД = Элементы.ПолучателиТелемаркетинг.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	Если Не ЗначениеЗаполнено(ТД.Звонок) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Строка табличной части не содержит привязку к звонку, прослушивание записи невозможно.'"));
		Возврат;
	КонецЕсли;
	// Прежде чем искать запись, мы должны выяснить, есть ли права на прослушку у данного пользователя.
	ТекПользователь 					= сфпСофтФонПроСервер.сфпТекущийПользователь();
	МассивПрослушиваемыхПользователей 	= сфпСофтФонПроСервер.сфпПолучитьМассивПрослушиваемыхПользователей(ТекПользователь);
	ПроверяемыйПользователь 			= сфпСофтФонПроСервер.сфпПолучитьЗначениеРеквизита(ТД.Звонок, "Ответственный");
	Если МассивПрослушиваемыхПользователей.Количество() > 0 Тогда
		Если МассивПрослушиваемыхПользователей.Найти(ПроверяемыйПользователь) = Неопределено Тогда
			ТекстПредупреждения = НСтр("ru = 'У данного пользователя нет прав на прослушивание разговора пользователя'") + Символы.НПП + """" + Строка(ПроверяемыйПользователь) + """" + ".";
			ПоказатьПредупреждение(,ТекстПредупреждения);
			Возврат;
		КонецЕсли;					
	Иначе				
		ТекстПредупреждения = НСтр("ru = 'У данного пользователя нет прав на прослушивание разговора пользователя'") + Символы.НПП + """" + Строка(ПроверяемыйПользователь) + """" + ".";
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;	
	ИдентификаторЗаписиЗвонка = сфпСофтФонПроСервер.сфпПолучитьЗначениеРеквизита(ТД.Звонок, "сфпИдентификаторЗаписи");
	МассивЗаписей = сфпПолучитьМассивЗаписейЗвонка(ТД.Звонок);
	Если МассивЗаписей.Количество() = 1 Тогда
		сфпСофтФонПроКлиент.сфпПолучитьФайлРазговора(МассивЗаписей[0]);	
	ИначеЕсли  МассивЗаписей.Количество() > 1 Тогда
		сфпСофтФонПроКлиент.сфпОткрытьИсториюРазговора(ТД.Звонок);	
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'У данного звонка не было найдено ни одной записи телефонного разговора.'"));
		Возврат;
	КонецЕсли;
#КонецЕсли

КонецПроцедуры 

&НаСервере
Функция сфпПолучитьМассивЗаписейЗвонка(Звонок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Звонок", Звонок);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РегистрСведенийсфпИсторияЗвонков.ИдентификаторЗаписи
	               |ИЗ
	               |	РегистрСведений.сфпИсторияЗвонков КАК РегистрСведенийсфпИсторияЗвонков
	               |ГДЕ
	               |	РегистрСведенийсфпИсторияЗвонков.Звонок = &Звонок";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторЗаписи");
	
КонецФункции 

&НаКлиенте
Процедура Позвонить(Команда)
	
	ТД = Элементы.ПолучателиТелемаркетинг.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ДанныеЗаполнения 		= Новый Структура;
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Необходимо записать документ.'"));
		Возврат;
	КонецЕсли;
	Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда Возврат; КонецЕсли;
	ДанныеЗаполнения.Вставить("Основание",	Объект.Ссылка);
	НомерТелефона	= ТД.Телефон;
	Если ПустаяСтрока(НомерТелефона) Тогда
		СписокОбъектов = Новый СписокЗначений;
		Если ЗначениеЗаполнено(ТД.Получатель) Тогда
			СписокОбъектов.Добавить(ТД.Получатель);
		КонецЕсли;
		сфпСофтФонПроКлиент.сфпПозвонитьВыбравТелефон(СписокОбъектов, ДанныеЗаполнения);
	ИначеЕсли ЗначениеЗаполнено(ТД.Получатель) Тогда
		ДополнительныеПараметры = Новый Структура("ДанныеЗаполнения", ДанныеЗаполнения);
		сфпСофтФонПроКлиент.сфпПозвонить(НомерТелефона, ТД.Получатель, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры 

// -СофтФон

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияУчетнаяЗапись(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		Объект.ОтправительПредставление = ?(СокрЛП(Объект.УчетнаяЗапись) = "", "<>"," <"+ Объект.УчетнаяЗапись + "> ");
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияТелемаркетингАнкетаОткрытие(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		Записать();
		ПолучателиТелемаркетингАнкетаОткрытие(Элементы.ПолучателиТелемаркетингАнкета,Ложь);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияТелемаркетингЖалобаКлиента(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		Записать();
		ПолучателиТелемаркетингЖалобаКлиентаНачалоВыбора(Элементы.ПолучателиТелемаркетингЖалобаКлиента,Неопределено,Ложь);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияТелемаркетингСобытие(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		Записать();
		ПолучателиТелемаркетингСобытиеНачалоВыбора(Элементы.ПолучателиТелемаркетингСобытие,Неопределено,Ложь);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияПолучателиСобытие(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		Записать();
		ПолучателиСобытиеНачалоВыбора(Элементы.ПолучателиСобытие,Неопределено,Ложь);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияТелемаркетингАнкетаСоздание(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПолучателиТелемаркетинг.ТекущиеДанные;
	ТекущиеДанные.Анкеты = РезультатОповещения;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияТелемаркетингЖалобаКлиентаВыбор(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПолучателиТелемаркетинг.ТекущиеДанные;
	ТекущиеДанные.ЖалобаКлиента = РезультатОповещения;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияТелемаркетингСобытиеВыбор(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПолучателиТелемаркетинг.ТекущиеДанные;
	ТекущиеДанные.Событие = РезультатОповещения;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияПолучателиСобытиеВыбор(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	ТекущиеДанные.Событие = РезультатОповещения;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияИзменениеФорматаТекста(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения <> КодВозвратаДиалога.Да Тогда
		Объект.ФорматТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML");
	Иначе
		Объект.ФорматТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.ПростойТекст");
		// Содержание
		ТекстПисьма = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
		ТекстПисьмаФорматированныйДокумент.Удалить();
		Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаПростойТекст;
		
		Для Каждого КнопкаОперации Из Элементы.ПодменюФорматТекста.ПодчиненныеЭлементы Цикл
			КнопкаОперации.Пометка = (КнопкаОперации.Имя = "ФормаПростойТекст");
		КонецЦикла;
		
		Элементы.ПодменюФорматТекста.Заголовок = НСтр("ru = 'Простой текст'");
	КонецЕсли;
	
КонецПроцедуры 

#Область РаботаСВложениями

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ДобавитьВложениеВыполнить(Элемент);

КонецПроцедуры 

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	Если Объект.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияРассылок.Отправлено") Тогда
		УдалитьВложениеВыполнить(Элемент);
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьВложения(Параметры = Неопределено)
	
	Если Объект.Ссылка.Пустая() И Параметры <> Неопределено Тогда
		Если Параметры.Свойство("Основание")
			И ТипЗнч(Параметры.Основание) = Тип("Структура")
			И Параметры.Основание.Свойство("Команда")
			И Параметры.Основание.Команда = "Переслать" Тогда
			
			табВложения = УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Параметры.Основание.Основание, Истина);
			Для Каждого СтрокаТаблицыВложений Из табВложения Цикл
				Если ПустаяСтрока(СтрокаТаблицыВложений.ИДФайлаЭлектронногоПисьма) Тогда
					НоваяСтрока = Вложения.Добавить();
					НоваяСтрока.Ссылка              = СтрокаТаблицыВложений.Ссылка;
					НоваяСтрока.ИмяФайла            = СтрокаТаблицыВложений.ИмяФайла;
					НоваяСтрока.ИндексКартинки      = СтрокаТаблицыВложений.ИндексКартинки;
					НоваяСтрока.Размер              = СтрокаТаблицыВложений.Размер;
					НоваяСтрока.РазмерПредставление = СтрокаТаблицыВложений.РазмерПредставление;
					НоваяСтрока.Расположение        = 1;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	Иначе
		Вложения.Очистить();
		ТабВложения = УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Объект.Ссылка, Истина);
		Для Каждого СтрокаТаблицыВложений Из ТабВложения Цикл
			Если ПустаяСтрока(СтрокаТаблицыВложений.ИДФайлаЭлектронногоПисьма) Тогда
				НоваяСтрока = Вложения.Добавить();
				НоваяСтрока.Ссылка              = СтрокаТаблицыВложений.Ссылка;
				НоваяСтрока.ИмяФайла            = СтрокаТаблицыВложений.ИмяФайла;
				НоваяСтрока.ИндексКартинки      = СтрокаТаблицыВложений.ИндексКартинки;
				НоваяСтрока.Размер              = СтрокаТаблицыВложений.Размер;
				НоваяСтрока.РазмерПредставление = СтрокаТаблицыВложений.РазмерПредставление;
				НоваяСтрока.ПодписанЭП         = СтрокаТаблицыВложений.ПодписанЭП;
				НоваяСтрока.Расположение        = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьСвойстваВложения(ТекущийИндексВКоллекции)
	
	ТекущиеДанные = Вложения.Получить(ТекущийИндексВКоллекции);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.Вложения.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
		
	ФайлДоступенДляРедактирования = 
		(Объект.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияРассылок.Отправлено"));
	ПараметрыФормы = Новый Структура("ПрисоединенныйФайл, ТолькоПросмотр", 
		ТекущиеДанные.Ссылка,НЕ ФайлДоступенДляРедактирования);
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныйФайл", ПараметрыФормы,, ТекущиеДанные.Ссылка);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПомещениеФайлаПриОкончании(РезультатПомещения, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

	Если РезультатПомещения = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Вложения.Добавить();
	НоваяСтрока.Расположение = 4;
	НоваяСтрока.ИмяФайлаНаКомпьютере = Адрес;
	НоваяСтрока.ИмяФайла = ВыбранноеИмяФайла;
	
	Расширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ВыбранноеИмяФайла);
	НоваяСтрока.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры 

&НаКлиенте
Процедура ВопросОЗаписиФайлаПослеЗакрытия(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьСвойстваВложения(ДополнительныеПараметры.ТекущийИндексВКоллекции);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьВложениеВыполнить(Элемент);
	
КонецПроцедуры 

#КонецОбласти

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЗаполнениеОбъектов
&НаКлиенте
Процедура ПослеОбработкиЗаполнения(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ПослеОбработкиЗаполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиЗаполненияНаСервере()
	
	ЗаполнениеОбъектовАльфаАвто.ПослеОбработкиЗаполнения(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ЗаполнениеОбъектов

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры
// Конец Ядро

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()

	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Объект.Получатели.Количество()=0 Тогда
		КонтактныеЛицаПользователя.Отбор.Элементы.Очистить();
		ЭлементОтбора = КонтактныеЛицаПользователя.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Владелец");
		ЭлементОтбора.Использование  = ИСТИНА;
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = неопределено;
		ЭлементОтбора = КонтактныеЛицаПользователя.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Взаимоотношение");
		ЭлементОтбора.Использование  = ИСТИНА;
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение("Справочник.ВидыВзаимоотношений.КонтактноеЛицо");
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	// Вызываем общий обработчик действия
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	// настроим видимость страниц и кнопок
	Элементы.СтраницаЭлектронноеПисьмо.Видимость = (Объект.ХозОперация = Справочники.ХозОперации.ЭлектроннаяРассылка);
	Элементы.СтраницаТелемаркетинг.Видимость     = (Объект.ХозОперация = Справочники.ХозОперации.Телемаркетинг);
	Элементы.СтраницаSMS.Видимость               = (Объект.ХозОперация = Справочники.ХозОперации.РассылкаSMS);
	Элементы.СтраницаПочтовоеПисьмо.Видимость    = (Объект.ХозОперация = Справочники.ХозОперации.ПочтоваяРассылка);
	Элементы.СтраницаПолучатели.Видимость        = НЕ (Объект.ХозОперация = Справочники.ХозОперации.Телемаркетинг);
	Элементы.ПодменюФорматТекста.Видимость       = (Объект.ХозОперация = Справочники.ХозОперации.ЭлектроннаяРассылка);
	Элементы.ФормаОтправить.Видимость            = (Объект.ХозОперация = Справочники.ХозОперации.ЭлектроннаяРассылка И ПолучитьФункциональнуюОпцию("ИспользоватьПочтовыйКлиент")) ИЛИ (Объект.ХозОперация = Справочники.ХозОперации.РассылкаSMS И ПолучитьФункциональнуюОпцию("ИспользоватьПрочиеВзаимодействия"));
	Элементы.ФормаОтправить.Доступность          = ПравоДоступа("Редактирование", Объект.Ссылка.Метаданные()) И ЗначениеЗаполнено(Объект.Ссылка);
	// видимость колонок таблицы "Получатели"
	Элементы.ПолучателиАдресЭлектроннойПочты.Видимость   = (Объект.ХозОперация = Справочники.ХозОперации.ЭлектроннаяРассылка);
	Элементы.ПолучателиТелефон.Видимость                 = (Объект.ХозОперация = Справочники.ХозОперации.РассылкаSMS ИЛИ Объект.ХозОперация = Справочники.ХозОперации.Телемаркетинг);
	Элементы.ПолучателиАдрес.Видимость                   = (Объект.ХозОперация = Справочники.ХозОперации.ПочтоваяРассылка);
	Элементы.ПолучателиЭлектронноеПисьмо.Видимость       = (Объект.ХозОперация = Справочники.ХозОперации.ЭлектроннаяРассылка);
	Элементы.ПолучателиSMS.Видимость                     = (Объект.ХозОперация = Справочники.ХозОперации.РассылкаSMS);
	
	Если Объект.ХозОперация = Справочники.ХозОперации.РассылкаSMS Тогда
		Элементы.ОсталосьСимволов.Заголовок = ВзаимодействияКлиентСервер.СформироватьИнформационнуюНадписьКоличествоСимволовСообщений(Элементы.Транслитерация.Пометка,Объект.ТекстПисьма);
	КонецЕсли;
	
	Элементы.ПолучателиСобытие.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСобытия");
	Элементы.ПолучателиТелемаркетингСобытие.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСобытия");
	Элементы.ПолучателиЭлектронноеПисьмо.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьПочтовыйКлиент");
	Элементы.ПолучателиSMS.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьПрочиеВзаимодействия");
	
	Элементы.КонтактныеЛицаПользователя.Доступность  = Объект.Получатели.Количество()>0;
	Элементы.ПолучателиТелемаркетингАнкета.Видимость = ЗначениеЗаполнено(Объект.ШаблонАнкеты);
	
	// +СофтФон
	Элементы.ФормаПозвонить.Видимость = сфпСофтФонПроСервер.сфпИспользоватьСофтФон();
	Элементы.ФормаПрослушатьЗаписьТелефонногоРазговора.Видимость = сфпСофтФонПроСервер.сфпИспользоватьЗаписьПереговоров() И (Объект.ХозОперация= ПредопределенноеЗначение("Справочник.ХозОперации.Телемаркетинг"));
	// -СофтФон
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьУсловноеОформление()
	// Раскраска
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолучателиТелемаркетинг.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Получатели.РезультатОбработкиЗвонка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.РезультатыОбработкиЗвонка.НеДозвонились;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтображатьСостояниеОбзвона");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(238, 232, 170));
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолучателиТелемаркетинг.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Получатели.РезультатОбработкиЗвонка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.РезультатыОбработкиЗвонка.Обработан;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтображатьСостояниеОбзвона");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(220, 220, 220));
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолучателиТелемаркетинг.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Получатели.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Получатели.Отказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);

КонецПроцедуры 

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;

	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если НЕ УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;

	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры 

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	                                                                                                                
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура УстановитьДоступностьЖалобы()
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЖалобаКлиента) Тогда
		Элементы.ФормаДокументЖалобаКлиентаСоздатьНаОсновании.Видимость = Константы.ИспользоватьЖалобы.Получить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти