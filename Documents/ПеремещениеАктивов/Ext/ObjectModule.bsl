// Модуль документа ПеремещениеАктивов

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Процедура - обработчик ввода на основании
// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Активы Цикл
		Документы.ПеремещениеАктивов.АктивыПрочийАктивПриИзменении(ЭтотОбъект,
			ТекСтрока,
			ДополнительныеСвойства.ПараметрыДействия);
	КонецЦикла;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим корректность заполнения количества для активов c уникальными номерами
	ОбработкаТабличнойЧастиАктивы.ПроверитьКоличествоУникальныхНомеров(ЭтотОбъект, Отказ);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Произведем перерасчет итоговой суммы документа
	ОбработкаСобытийДокументаСервер.ПересчитатьСуммуДокументаПоСебестоимостиСписания(ЭтотОбъект, Отказ,,, ИСТИНА);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапросаПоАктивам = ПолучитьРезультатЗапросаПоАктивам();
	
	// переместим "Активы в эксплуатации"
	НаборЗаписейЭксплуатация = Движения.ПрочиеАктивыВЭксплуатации;
	НаборЗаписейЭксплуатация.ДокументОбъект            = ЭтотОбъект;
	НаборЗаписейЭксплуатация.ПодразделениеКомпании     = ПодразделениеКомпании;
	НаборЗаписейЭксплуатация.МОЛ                       = МОЛ;
	НаборЗаписейЭксплуатация.ПодразделениеКомпанииПолучатель = ПодразделениеПолучатель;
	НаборЗаписейЭксплуатация.МОЛПолучатель			   = МОЛПолучатель;
	НаборЗаписейЭксплуатация.РезультатЗапросаПоАктивам = РезультатЗапросаПоАктивам;
	Отказ = НЕ НаборЗаписейЭксплуатация.Перемещение() ИЛИ Отказ;
	
	// переместим авто на тест драйве если необходимо
	ТаблицаВрем = НаборЗаписейЭксплуатация.Выгрузить();
	ТаблицаКопия = ТаблицаВрем.Скопировать();
	ТаблицаКопия.Очистить();
	
	Для Каждого стрВрем Из ТаблицаВрем Цикл
		Если стрВрем.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
			НоваяСтрока = ТаблицаКопия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,стрВрем);
		КонецЕсли;
	КонецЦикла;
	
	// 2) Проведем по ТестДрайву
	НаборЗаписейТестДрайв = Движения.АвтомобилиДляТестДрайва;
	НаборЗаписейТестДрайв.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейТестДрайв.ПодразделениеКомпании = ПодразделениеПолучатель;
	НаборЗаписейТестДрайв.РезультатЗапросаПоАвтомобилям = РезультатЗапросаПоАктивам;
	Отказ = НЕ НаборЗаписейТестДрайв.Перемещение() ИЛИ Отказ;
	
	БалансВедетсяПоПодразделениям      = БалансВедетсяПоПодразделениям(Дата);
	ПодразделениеОтправительБалансовое = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ПодразделениеКомпании, Дата);
	ПодразделениеПолучательБалансовое  = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ПодразделениеПолучатель, Дата);
	БалансовыеПодразделенияНеРавны     = (ПодразделениеОтправительБалансовое<>ПодразделениеПолучательБалансовое);
	
	Если БалансВедетсяПоПодразделениям И БалансовыеПодразделенияНеРавны Тогда
		// БАЛАНС: Уменьшим доход по подразделению отправителя и увеличим по подразделению получателя.
		ТаблицаПрочихАктивов = Движения.ПрочиеАктивыВЭксплуатации.Выгрузить();
		ТаблицаПрочихАктивов.Свернуть("ВидДвижения","БалансоваяСтоимостьУпр,СуммаАмортизацииУпр");
		
		// Коррекция по себестоимости
		СтрокаСписания = ТаблицаПрочихАктивов.Найти(ВидДвиженияНакопления.Расход,"ВидДвижения");
		Если СтрокаСписания <> Неопределено И СтрокаСписания.БалансоваяСтоимостьУпр <> 0 Тогда
			// Уменьшение дохода
			НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.Подразделение=ПодразделениеОтправительБалансовое;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.Себестоимость;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте=Истина;
			НаборЗаписейДоходыИРасходы.Доход=СтрокаСписания.БалансоваяСтоимостьУпр;
			НаборЗаписейДоходыИРасходы.Расход=0;
			Отказ=НЕ НаборЗаписейДоходыИРасходы.Расход() ИЛИ Отказ;
			
			// Увеличение дохода
			СтрокаПрихода = ТаблицаПрочихАктивов.Найти(ВидДвиженияНакопления.Приход,"ВидДвижения");
			НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.Подразделение=ПодразделениеПолучательБалансовое;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.Себестоимость;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте=Истина;
			НаборЗаписейДоходыИРасходы.Доход=СтрокаСписания.БалансоваяСтоимостьУпр;
			НаборЗаписейДоходыИРасходы.Расход=0;
			Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		КонецЕсли;
		
		// Коррекция по амортизации
		Если СтрокаСписания <> Неопределено И СтрокаСписания.СуммаАмортизацииУпр <> 0 Тогда
			// Уменьшение дохода
			НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.Подразделение=ПодразделениеОтправительБалансовое;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте=Истина;
			НаборЗаписейДоходыИРасходы.Доход=0;
			НаборЗаписейДоходыИРасходы.Расход=СтрокаСписания.СуммаАмортизацииУпр;
			Отказ=НЕ НаборЗаписейДоходыИРасходы.Расход() ИЛИ Отказ;
			
			// Увеличение дохода
			СтрокаПрихода = ТаблицаПрочихАктивов.Найти(ВидДвиженияНакопления.Приход,"ВидДвижения");
			НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.Подразделение=ПодразделениеПолучательБалансовое;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте=Истина;
			НаборЗаписейДоходыИРасходы.Доход=0;
			НаборЗаписейДоходыИРасходы.Расход=СтрокаСписания.СуммаАмортизацииУпр;
			Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		КонецЕсли;
	КонецЕсли;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	// Произведем перерасчет итоговой суммы документа
	ОбработкаСобытийДокументаСервер.ПересчитатьСуммуДокументаПоСебестоимостиСписания(ЭтотОбъект, Отказ, "ПрочиеАктивыВЭксплуатации");
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Ввод в эксплуатацию"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВводВЭксплуатациюАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// идем по строкам и реквизитам табличной части и заполняем соответствующие
	Для Каждого СтрокаОснования Из ДанныеЗаполнения.Автомобили Цикл
		НоваяСтрока = Активы.Добавить();
		НоваяСтрока.ПрочийАктив = СтрокаОснования.Актив;
		Документы.ПеремещениеАктивов.АктивыПрочийАктивПриИзменении(ЭтотОбъект, НоваяСтрока, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
	КонецЦикла;
	
	ПодразделениеКомпании = ДанныеЗаполнения.ПодразделениеПолучатель;
	Организация           = ПодразделениеКомпании.Организация;
	ПодразделениеПолучатель = Справочники.ПодразделенияКомпании.ПустаяСсылка();
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ВводВЭксплуатациюАвтомобилей()

// Производит заполнение объекта на основании документа "Ввод в эксплуатацию"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВводВЭксплуатацию(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// идем по строкам и реквизитам табличной части и заполняем соответствующие
	Для Каждого СтрокаОснования Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрока = Активы.Добавить();
		НоваяСтрока.ПрочийАктив = СтрокаОснования.Актив;
		НоваяСтрока.Количество  = СтрокаОснования.Количество;
		Документы.ПеремещениеАктивов.АктивыПрочийАктивПриИзменении(ЭтотОбъект, НоваяСтрока, ДополнительныеСвойства.ПараметрыДействия);
	КонецЦикла;
	
	ПодразделениеКомпании = ДанныеЗаполнения.ПодразделениеПолучатель;
	Организация           = ПодразделениеКомпании.Организация;
	ПодразделениеПолучатель = Справочники.ПодразделенияКомпании.ПустаяСсылка();
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ВводВЭксплуатацию()

// Производит заполнение объекта по передаваемой структуре
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	МОЛ = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "МОЛ", МОЛ);
	Структура_Активы = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "КарточкаАктива", Новый Массив);
	Для Каждого Актив Из Структура_Активы Цикл
		НоваяСтрока = Активы.Добавить();
		НоваяСтрока.ПрочийАктив = Актив;
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Структура()

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// У нас не стандартная таблица, поэтому сформирует свой результат запроса по активам.
// 
Функция ПолучитьРезультатЗапросаПоАктивам()
	ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ПеремещениеАктивовАктивы.ПрочийАктив КАК Актив,
	             |	СУММА(ПеремещениеАктивовАктивы.Количество) КАК Количество,
	             |	ПеремещениеАктивовАктивы.ВидАренды КАК ВидАренды
	             |ИЗ
	             |	Документ.ПеремещениеАктивов.Активы КАК ПеремещениеАктивовАктивы
	             |ГДЕ
	             |	ПеремещениеАктивовАктивы.Ссылка = &Ссылка
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ПеремещениеАктивовАктивы.ПрочийАктив,
	             |	ПеремещениеАктивовАктивы.ВидАренды";

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();
КонецФункции // ПолучитьРезультатЗапросаПоАктивам()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
