// Модуль менеджера документа "Перемещение активов"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.  
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Вычислим сумму списания активов 
	СуммаДокументаИтог = ?(Объект.Проведен, Объект.СуммаДокумента, 0);
	СуммаДокумента = ?(ЕстьРеквизит(Объект, "СуммаСписания", "Активы"), 
					Объект.Активы.Итог("СуммаСписания"), СуммаДокументаИтог);
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", СуммаДокумента);
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("МОЛ");
	ОбязательныеРеквизиты.Добавить("МОЛПолучатель");
	ОбязательныеРеквизиты.Добавить("ПодразделениеПолучатель");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Активы");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Активы.ПрочийАктив");
	ОбязательныеРеквизиты.Добавить("Активы.Количество");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеАктивы = Новый Массив();
	УникальныеАктивы.Добавить("ПрочийАктив");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Активы", УникальныеАктивы);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Активы.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаТабличнойЧастиАктивы.ВыполнитьПересчетТабличнойЧасти(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	ПараметрыДействия.ТребуетсяУстановкаЦен = Ложь;
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАктивы

// Обработчик события возникающего при изменении данных реквизита "Прочий актив" в таблице "Активы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АктивыПрочийАктивПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиАктивы.АктивПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Обновим информацию по виду аренды
	РегистрыНакопления.АвтомобилиДляТестДрайва.ЗаполнитьВидАрендыАвтомобиля(Объект, Строка);
	
КонецПроцедуры // АктивыПрочийАктивПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Активы");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ПеремещениеАктивов");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Активы");
	КонецЕсли;

	ВыборПодразделения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборПодразделения.ВыборСсылки 		= "Справочник.ПодразделенияКомпании.ФормаСписка";
	ВыборПодразделения.Обязательный 	= Истина;
	ВыборПодразделения.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать подразделение компании.'");
		
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "АктивыПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить активами подразделения'");
	Команда.Идентификатор	= "АктивыЗаполнитьАктивамиПодразделения";
	Команда.ДополнительныеПараметры.ПараметрВыполнения = "АктивыЗаполнитьАктивамиПодразделения";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Активы";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ПодразделениеКомпании", ВыборПодразделения);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("АктивыЗаполнитьАктивамиПодразделения.Видимость",   Истина);
	ПараметрыКоманд.Вставить("АктивыЗаполнитьАктивамиПодразделения.Доступность", Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по заказам контрагенту
//
Функция АктивыЗаполнитьАктивамиПодразделения(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	Объект 				= Ссылка;
	ПараметрыЗаполнения = ПараметрыКоманды; 
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Ссылка) Тогда
		ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
		ПараметрыЗаполнения.Вставить("ИмяКоманды", ПараметрыЗаполнения.ПараметрКоманды);
		Объект				= ПараметрыКоманды.Источник;           
	КонецЕсли;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.ПодразделениеКомпании = ПараметрыЗаполнения.ПодразделениеКомпании Тогда
		Объект.ПодразделениеКомпании = ПараметрыЗаполнения.ПодразделениеКомпании;
		ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Результат = ЗаполнениеДокументовСервер.ЗаполнитьТабличнуюЧастьАктивами(Объект, ПараметрыЗаполнения);
	
	Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаАктив Из Результат Цикл
			НоваяСтрока = Объект.Активы.Добавить();
			НоваяСтрока.ПрочийАктив = СтрокаАктив.Актив;
			НоваяСтрока.Количество  = СтрокаАктив.Количество;
			АктивыПрочийАктивПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // АктивыЗаполнитьАктивамиПодразделения()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ПеремещениеАктивов",
		"ПФ_MXL_ПеремещениеАктивов",
		НСтр("ru = 'Перемещение активов'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ПеремещениеАктивов",
		"ПФ_MXL_ОС2",
		НСтр("ru = 'ОС2 (накладная на внут. перемещение ОС)'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПеремещениеАктивов") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПФ_MXL_ПеремещениеАктивов", НСтр("ru = 'Перемещение активов'"),                     ПечатьПеремещениеАктивов(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ОС2") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПФ_MXL_ОС2",                НСтр("ru = 'ОС2 (накладная на внут. перемещение ОС)'"), ПечатьОС2(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
КонецПроцедуры // Печать()

// Формирует печатную форму "ПеремещениеАктивов"
// 
Функция ПечатьПеремещениеАктивов(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеАктивов_ПеремещениеАктивов";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПеремещениеАктивов.ПФ_MXL_ПеремещениеАктивов");
		
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// Дата документа
		ДатаДокумента = Документ.Дата;
		
		// Вывод заголовка документа.
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ПредставлениеПодразделения =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ПодразделениеКомпании, ДатаДокумента);
		ОбластьЗаголовок.Параметры.ПредставлениеМОЛОтправитель = 
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.МОЛ);
		ОбластьЗаголовок.Параметры.ПредставлениеПодразделенияПолучателя =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ПодразделениеПолучатель, ДатаДокумента);
		ОбластьЗаголовок.Параметры.ПредставлениеМОЛПолучатель =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.МОЛПолучатель);
		
		ВалютаРегламентированногоУчетаОрганизаций = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		ВРегламентированнойВалюте = (Документ.ВалютаДокумента = ВалютаРегламентированногоУчетаОрганизаций);
		ВалютаУправленческогоУчетаКомпании = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		ВалютаПечатнойФормы = ?(ВРегламентированнойВалюте, Документ.ВалютаДокумента, ВалютаУправленческогоУчетаКомпании);
		ОбластьЗаголовок.Параметры.ВалютаДокумента = ВалютаПечатнойФормы;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);

		// Готовим шапку
		НомерСтраницы = 2; 
		НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,ОстаточнаяСтоимость", ВалютаПечатнойФормы, 0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		Запрос = Новый Запрос;
		Если Документ.Проведен Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПеремещениеАктивовАктивы.НомерСтроки,
			|	ПрочиеАктивыВЭксплуатации.ПрочийАктив КАК ПрочийАктив,
			|";
			Если ВРегламентированнойВалюте Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|	ЕСТЬNULL(ПрочиеАктивыВЭксплуатации.БалансоваяСтоимость,0) КАК БалансоваяСтоимость,
				|	ЕСТЬNULL(ПрочиеАктивыВЭксплуатации.БалансоваяСтоимость,0) - ЕСТЬNULL(ПрочиеАктивыВЭксплуатации.СуммаАмортизации,0) КАК ОстаточнаяСтоимость
				|";
			Иначе
				ТекстЗапроса = ТекстЗапроса + "
				|	ЕСТЬNULL(ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьУпр,0) КАК БалансоваяСтоимость,
				|	(ЕСТЬNULL(ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьУпр,0) - ЕСТЬNULL(ПрочиеАктивыВЭксплуатации.СуммаАмортизацииУпр,0)) КАК ОстаточнаяСтоимость
				|";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + "
			|ИЗ
			|	Документ.ПеремещениеАктивов.Активы КАК ПеремещениеАктивовАктивы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПрочиеАктивыВЭксплуатации КАК ПрочиеАктивыВЭксплуатации
			|		ПО ПеремещениеАктивовАктивы.ПрочийАктив = ПрочиеАктивыВЭксплуатации.ПрочийАктив
			|ГДЕ
			|	ПрочиеАктивыВЭксплуатации.ВидДвижения = &ВидДвиженияНакопленияРасход
			|	И ПрочиеАктивыВЭксплуатации.Регистратор = &Ссылка
			|	И ПеремещениеАктивовАктивы.Ссылка = &Ссылка";
		Иначе
			ТЧДокумента = Документ.Активы.Выгрузить();
			ТЧДокумента.Свернуть("ПрочийАктив","Количество");
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ПрочийАктив КАК ПрочийАктив,
			|	Количество  КАК Количество
			|ПОМЕСТИТЬ
			|	ТабДокумента
			|ИЗ
			|	&ТЧДокумента КАК ТЧДокумента
			|;
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТабДокумента.ПрочийАктив КАК ПрочийАктив,
			|	ТабДокумента.Количество  КАК Количество,
			|	0 КАК НомерСтроки,
			|	ВЫБОР
			|		КОГДА ПрочиеАктивыВЭксплуатации.КоличествоОстаток ЕСТЬ NULL ТОГДА
			|			0
			|		ИНАЧЕ
			|			(ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьУпрОстаток * &МножительКурса)/ПрочиеАктивыВЭксплуатации.КоличествоОстаток*ТабДокумента.Количество
			|	КОНЕЦ КАК БалансоваяСтоимость,
			|	ВЫБОР
			|		КОГДА ПрочиеАктивыВЭксплуатации.КоличествоОстаток ЕСТЬ NULL ТОГДА
			|			0
			|		ИНАЧЕ
			|			(ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьУпрОстаток * &МножительКурса)/ПрочиеАктивыВЭксплуатации.КоличествоОстаток*ТабДокумента.Количество
			|	КОНЕЦ - ВЫБОР
			|			КОГДА ПрочиеАктивыВЭксплуатации.СуммаАмортизацииУпрОстаток ЕСТЬ NULL 
			|				ТОГДА 0
			|			ИНАЧЕ ПрочиеАктивыВЭксплуатации.СуммаАмортизацииУпрОстаток * &МножительКурса
			|		КОНЕЦ КАК ОстаточнаяСтоимость
			|ИЗ
			|	ТабДокумента КАК ТабДокумента
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.ПрочиеАктивыВЭксплуатации.Остатки(
			|		&Момент,
			|		ПрочийАктив В (&СписокАктивов)
			|		И ПодразделениеКомпании = &ПодразделениеКомпании)КАК ПрочиеАктивыВЭксплуатации
			|ПО
			|	ТабДокумента.ПрочийАктив = ПрочиеАктивыВЭксплуатации.ПрочийАктив";
			МоментВремени = ?(Документ.Ссылка.Пустая(), Новый Граница(ТекущаяДатаСеанса(), ВидГраницы.Исключая),
				Документ.Ссылка.МоментВремени());
			Запрос.УстановитьПараметр("Момент"               , МоментВремени);
			Запрос.УстановитьПараметр("СписокАктивов"        , ТЧДокумента.ВыгрузитьКолонку("ПрочийАктив"));
			Запрос.УстановитьПараметр("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
			Запрос.УстановитьПараметр("ТЧДокумента"          , ТЧДокумента);
			ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
			МножительКурса = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(1, ВалютаУправленческогоУчета, МоментВремени,
				Документ.ВалютаДокумента, Документ.КурсДокумента);
			Запрос.УстановитьПараметр("МножительКурса", МножительКурса);
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
		Запрос.УстановитьПараметр("ВидДвиженияНакопленияРасход", ВидДвиженияНакопления.Расход);
		
		// Перебор строк
		ВыборкаТабличнойЧасти = Запрос.Выполнить().Выгрузить();
		Если Не Документ.Проведен Тогда
			Сч = 1;
			Для Каждого текСтрока Из ВыборкаТабличнойЧасти Цикл
				текСтрока.НомерСтроки = Сч;
				Сч = Сч + 1;
			КонецЦикла;
		КонецЕсли;

		// Готовим области строки.
		Для каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			// Заполняем данные строки
			ОбластьСтрока.Параметры.Заполнить(СтрокаТЧ);
			ОбластьСтрока.Параметры.ПрочийАктив			= СтрокаТЧ.ПрочийАктив;
			ОбластьСтрока.Параметры.АктивНаименование	= УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
				СтрокаТЧ.ПрочийАктив);
			ОбластьСтрока.Параметры.Код					= СтрокаТЧ.ПрочийАктив.ИнвентарныйНомер;
			ОбластьСтрока.Параметры.БалансоваяСтоимость	= Формат(СтрокаТЧ.БалансоваяСтоимость, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.ОстаточнаяСтоимость	= Формат(СтрокаТЧ.ОстаточнаяСтоимость, ФорматВыводаСуммы);
			
			// Доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если ВыборкаТабличнойЧасти.Индекс(СтрокаТЧ) = ВыборкаТабличнойЧасти.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,ОстаточнаяСтоимость", ВалютаПечатнойФормы, 0);
				НомерСтраницыПред		  = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// Итоги
		ОбластьПодвал.Параметры.ВалютаДокумента = ВалютаПечатнойФормы;
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("ОстаточнаяСтоимость");
		ОбластьПодвал.Параметры.СуммаВсего = Формат(ВыборкаТабличнойЧасти.Итог("ОстаточнаяСтоимость"), ФорматВыводаСуммы);
		СуммаПрописью = ВыборкаТабличнойЧасти.Итог("ОстаточнаяСтоимость");
		ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'") + Символы.НПП
			+ ВыборкаТабличнойЧасти.Количество() + Символы.НПП + НСтр("ru = 'на сумму'") + Символы.НПП
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаПрописью, ВалютаПечатнойФормы);
		
		// Выводим представления и расшифровки подписей.
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьПеремещениеАктивов()

// Формирует печатную форму "ОС2"
// 
Функция ПечатьОС2(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеАктивов_ОС2";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПеремещениеАктивов.ПФ_MXL_ОС2");
		
		ОбластьЗаголовок		= Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапка1			= Макет.ПолучитьОбласть("Шапка1");
		ОбластьШапка2			= Макет.ПолучитьОбласть("Шапка2");
		ОбластьСтрока 			= Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице	= Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПустаяСтрока 	= Макет.ПолучитьОбласть("ПустаяСтрока");
		ОбластьПодвал			= Макет.ПолучитьОбласть("Подвал");
		
		// дата документа
		ДатаДокумента = Документ.Дата;
		
		// вывод заголовка документа
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации	= УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.Организация = Документ.Организация;
		ОбластьЗаголовок.Параметры.ПредставлениеПодразделения =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ПодразделениеКомпании, ДатаДокумента);
		ОбластьЗаголовок.Параметры.ПодразделениеКомпании = Документ.ПодразделениеКомпании;
		ОбластьЗаголовок.Параметры.ПредставлениеПодразделенияПолучателя =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ПодразделениеПолучатель, ДатаДокумента);
		ОбластьЗаголовок.Параметры.ПодразделениеПолучатель = Документ.ПодразделениеПолучатель;
		ОбластьЗаголовок.Параметры.ДатаДок                 = Формат(Документ.Дата, "ДЛФ=D");
		ОбластьЗаголовок.Параметры.НомерДок                = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ВалютаПечатнойФормы = Документ.ВалютаДокумента;
		
		НомерСтраницы = 2;
		НомерСтраницыПред = НомерСтраницы;
		
		Если Документ.Проведен Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПеремещениеАктивовАктивы.НомерСтроки КАК НомерСтроки,
			|	ПеремещениеАктивовАктивы.ПрочийАктив КАК ПрочийАктив,
			|	ПеремещениеАктивовАктивы.ПрочийАктив.ДатаВводаВЭксплуатацию КАК ДатаВвода,
			|	ПеремещениеАктивовАктивы.ПрочийАктив.ИнвентарныйНомер КАК ИнвНомер,";
			Если Документ.ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|	ЕСТЬNULL(ПрочиеАктивыВЭксплуатации.БалансоваяСтоимость,0) - ЕСТЬNULL(ПрочиеАктивыВЭксплуатации.СуммаАмортизации,0) КАК СуммаПеремещения
				|";
			Иначе
				ТекстЗапроса = ТекстЗапроса + "
				|	(ЕСТЬNULL(ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьУпр,0) - ЕСТЬNULL(ПрочиеАктивыВЭксплуатации.СуммаАмортизацииУпр,0)) КАК СуммаПеремещения
				|";
				ВалютаПечатнойФормы = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
			КонецЕсли; 
			ТекстЗапроса = ТекстЗапроса + "ИЗ
			|	Документ.ПеремещениеАктивов.Активы КАК ПеремещениеАктивовАктивы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПрочиеАктивыВЭксплуатации КАК ПрочиеАктивыВЭксплуатации
			|		ПО ПеремещениеАктивовАктивы.ПрочийАктив = ПрочиеАктивыВЭксплуатации.ПрочийАктив
			|		И ПеремещениеАктивовАктивы.Ссылка = ПрочиеАктивыВЭксплуатации.Регистратор
			|ГДЕ
			|	ПрочиеАктивыВЭксплуатации.ВидДвижения = &ВидДвиженияНакопленияРасход
			|	И ПеремещениеАктивовАктивы.Ссылка = &Ссылка";
			
			ОбластьШапка1.Параметры.ВалютаДокумента = ВалютаПечатнойФормы;
			ТабличныйДокумент.Вывести(ОбластьШапка1);
			ОбластьШапка1.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
			Запрос.УстановитьПараметр("ВидДвиженияНакопленияРасход", ВидДвиженияНакопления.Расход);
		Иначе
			ТЧДокумента = Документ.Активы.Выгрузить();
			ТЧДокумента.Свернуть("ПрочийАктив","Количество");
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПрочийАктив КАК ПрочийАктив,
			|	Количество  КАК Количество
			|ПОМЕСТИТЬ
			|	ТабДокумента
			|ИЗ
			|	&ТЧДокумента КАК ТЧДокумента
			|;
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТабДокумента.ПрочийАктив КАК ПрочийАктив,
			|	ТабДокумента.Количество  КАК Количество,
			|	ТабДокумента.ПрочийАктив.ДатаВводаВЭксплуатацию КАК ДатаВвода,
			|	ТабДокумента.ПрочийАктив.ИнвентарныйНомер КАК ИнвНомер,
			|	ЕСТЬNULL(ПрочиеАктивыВЭксплуатации.ТипЭксплуатации, ЗНАЧЕНИЕ(Справочник.ТипыЭксплуатации.ПустаяСсылка)) КАК ТипЭксплуатации,
			|	ВЫБОР
			|		КОГДА ПрочиеАктивыВЭксплуатации.КоличествоОстаток ЕСТЬ NULL ТОГДА
			|			0
			|		ИНАЧЕ
			|			ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьУпрОстаток/ПрочиеАктивыВЭксплуатации.КоличествоОстаток*ТабДокумента.Количество
			|	КОНЕЦ - ВЫБОР
			|				КОГДА ПрочиеАктивыВЭксплуатации.СуммаАмортизацииУпрОстаток ЕСТЬ NULL 
			|					ТОГДА 0
			|				ИНАЧЕ ПрочиеАктивыВЭксплуатации.СуммаАмортизацииУпрОстаток
			|			КОНЕЦ КАК СуммаПеремещения
			|ИЗ
			|	ТабДокумента КАК ТабДокумента
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.ПрочиеАктивыВЭксплуатации.Остатки(
			|		&Момент,
			|		ПрочийАктив В (&СписокАктивов)
			|		И ПодразделениеКомпании = &ПодразделениеКомпании)КАК ПрочиеАктивыВЭксплуатации
			|ПО
			|	ТабДокумента.ПрочийАктив = ПрочиеАктивыВЭксплуатации.ПрочийАктив";
			МоментВремени = ?(Документ.Ссылка.Пустая(), Новый Граница(ТекущаяДатаСеанса(), ВидГраницы.Исключая),
				Документ.Ссылка.МоментВремени());
			Запрос.УстановитьПараметр("Момент"               , МоментВремени);
			Запрос.УстановитьПараметр("СписокАктивов"        , ТЧДокумента.ВыгрузитьКолонку("ПрочийАктив"));
			Запрос.УстановитьПараметр("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
			Запрос.УстановитьПараметр("ТЧДокумента"          , ТЧДокумента);
		КонецЕсли;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента, СуммаПеремещения", ВалютаПечатнойФормы, 0);
		
		СуммаВсего = 0;
		ВыборкаТабличнойЧасти = Запрос.Выполнить().Выгрузить();
		Если Не Документ.Проведен Тогда
			ВыборкаТабличнойЧасти.Колонки.Добавить("НомерСтроки",
				Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(5, 0)));
			Сч = 1;
			Для Каждого текСтрока Из ВыборкаТабличнойЧасти Цикл
				текСтрока.НомерСтроки = Сч;
				Сч = Сч + 1;
			КонецЦикла;
		КонецЕсли;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			// заполняем данные строки
			ОбластьСтрока.Параметры.Заполнить(СтрокаТЧ);
			ОбластьСтрока.Параметры.СуммаПеремещения = Формат(СтрокаТЧ.СуммаПеремещения, ФорматВыводаСуммы);
			СуммаВсего = СуммаВсего + СтрокаТЧ.СуммаПеремещения;
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапка1, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента, СуммаПеремещения", ВалютаПечатнойФормы, 0);
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапка1.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			СуммаПеремещения = СтруктураИтоговПоСтранице.СуммаПеремещения + СтрокаТЧ.СуммаПеремещения;
			СтруктураИтоговПоСтранице.Вставить("СуммаПеремещения", СуммаПеремещения);
		КонецЦикла;
		
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		Позиция = Документ.Активы.Количество() + 1;
		МаксимумСтрок = 17;
		Если Позиция < МаксимумСтрок Тогда
			МассивОбластейДляПроверки = Новый Массив;
			МассивОбластейДляПроверки.Добавить(ОбластьПодвал);
			Если (Позиция < МаксимумСтрок) ИЛИ (НЕ ТабличныйДокумент.ПроверитьВывод(МассивОбластейДляПроверки)) Тогда
				Пока Истина Цикл
					МассивОбластейДляПроверки = Новый Массив;
					МассивОбластейДляПроверки.Добавить(ОбластьПустаяСтрока);
					Если Не ТабличныйДокумент.ПроверитьВывод(МассивОбластейДляПроверки) Тогда 
						Прервать;
					КонецЕсли;
					ТабличныйДокумент.Вывести(ОбластьПустаяСтрока);
				КонецЦикла;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ОбластьШапка2.Параметры.ВалютаДокумента = ВалютаПечатнойФормы;
				ТабличныйДокумент.Вывести(ОбластьШапка2);
			КонецЕсли;
		КонецЕсли;
		
		ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.ПредставлениеМОЛОтправитель =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.МОЛ);
		ОбластьПодвал.Параметры.МОЛ = Документ.МОЛ;
		ОбластьПодвал.Параметры.ДолжностьМОЛОтправитель = Документ.МОЛ.Должность;
		ОбластьПодвал.Параметры.ТабНомерМОЛОтправитель = Документ.МОЛ.ТабельныйНомер;
		ОбластьПодвал.Параметры.ПредставлениеМОЛПолучатель =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.МОЛПолучатель);
		ОбластьПодвал.Параметры.МОЛПолучатель = Документ.МОЛПолучатель;
		ОбластьПодвал.Параметры.ДолжностьМОЛПолучатель = Документ.МОЛПолучатель.Должность;
		ОбластьПодвал.Параметры.ТабНомерМОЛПолучатель = Документ.МОЛПолучатель.ТабельныйНомер;
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ГлавныйБухгалтер"));
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		ДополнительноКПредставлению = ?(НЕ ЗначениеЗаполнено(ДополнительноКПредставлению), "", ДополнительноКПредставлению);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьОС2()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВыводИзЭксплуатацииАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ОбслуживаниеАктива);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РеализацияАктивов);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СписаниеАктивов);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ПеремещениеАктивов);

КонецФункции

#КонецОбласти

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
    
    Результат = Новый Массив();
    Результат.Добавить("Активы.ВидАренды; АктивыВидАренды");
    Возврат Результат;
    
КонецФункции

#КонецОбласти

#КонецЕсли