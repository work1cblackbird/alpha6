// Модуль документа "Жалоба клиента"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "Имя") = "Событие" Тогда
		ДанныеЗаполненияКопия = ДанныеЗаполнения;
		ДанныеЗаполнения = ДанныеЗаполнения.Событие;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполненияКонтрагент = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполненияКопия, "Контрагент");
	
	Если ДанныеЗаполненияКонтрагент = Неопределено 
		И ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполненияКопия, "Имя") = "Событие" Тогда
		
		ДанныеЗаполненияКонтрагент = ДанныеЗаполненияКопия.Событие.Контрагент;
		
	КонецЕсли;
	
	Если ДанныеЗаполненияКопия <> Неопределено Тогда
		Если ДанныеЗаполненияКопия.Событие <> Неопределено Тогда
			ФлагКоличестваСтороннихЛиц = ?(ДанныеЗаполненияКопия.Событие.СторонниеЛица.Количество() = 0, Истина, Ложь);
		Иначе
			ФлагКоличестваСтороннихЛиц = Истина;
		КонецЕсли;
	Конецесли;
	
	Если (ДанныеЗаполненияКонтрагент <> Неопределено) И (ТипЗнч(ДанныеЗаполненияКонтрагент) <> Тип("Строка")) И ФлагКоличестваСтороннихЛиц Тогда
		Контрагент = ДанныеЗаполненияКонтрагент;
		Если ДанныеЗаполненияКопия.Событие <> Неопределено Тогда
			КИКонтрагента = ДанныеЗаполненияКопия.Событие.ПредставлениеТелефона;
		КонецЕсли;
		Документы.ЖалобаКлиента.КонтрагентПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполненияКонтрагент)
			И ДанныеЗаполненияКонтрагент <> Справочники.Контрагенты.ПустаяСсылка() Тогда
		УстановитьКЛКонтрагента();
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
		// Проверка состояний 
	// Прочитаем набор записей журнала состояний документа.
	НаборЗаписейЖурналСостояний 							= РегистрыСведений.ЖурналСостояний.СоздатьНаборЗаписей();
	НаборЗаписейЖурналСостояний.Отбор.Объект.Значение      	= Ссылка;
	НаборЗаписейЖурналСостояний.Отбор.Объект.Использование 	= Истина;
	НаборЗаписейЖурналСостояний.Прочитать();	
	
	// Выгрузим в таблицу значений для использования индекса строки
	ТаблицаСостояний = НаборЗаписейЖурналСостояний.Выгрузить();

	// Поиск строки с текущим состоянием
	СтрокаТаблицыЗначений = ТаблицаСостояний.Найти(Состояние);	
	
	Если СтрокаТаблицыЗначений <> Неопределено Тогда // Строка найдена
		
		// Индекс строки с текущим состоянием
		ИндексСтрокиТаблицыЗначений = ТаблицаСостояний.Индекс(СтрокаТаблицыЗначений);
		
		// Если текущее состояние не последнее, т.е. было уже установлено ранее,
		// то надо запретить запись.
		Если (ИндексСтрокиТаблицыЗначений + 1) <> ТаблицаСостояний.Количество() Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Состояние ""%1"" уже было установлено %2 пользователем %3.'"),СокрЛП(Состояние),СтрокаТаблицыЗначений.Период,СтрокаТаблицыЗначений.Автор);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		КонецЕсли;
		
	ИначеЕсли Перечисления.СостояниеЖалобКлиентов.Индекс(Состояние) > 0 Тогда
		
		// Иначе надо проверить, не "перескочили" ли через какое-то состояние
		Для Индекс = 0 По Перечисления.СостояниеЖалобКлиентов.Индекс(Состояние)-1 Цикл  
			
			ЗначениеПеречисления = Перечисления.СостояниеЖалобКлиентов.Получить(Индекс);
			НайденнаяСтрокаТаблицыЗначений = ТаблицаСостояний.Найти(ЗначениеПеречисления);
			
			Если НайденнаяСтрокаТаблицыЗначений = Неопределено Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Состояние ""%1"" еще не было установлено.'"),СокрЛП(ЗначениеПеречисления));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;
	
	// Зафиксирована
	НайденнаяСтрокаСостояний = ТаблицаСостояний.Найти(Перечисления.СостояниеЖалобКлиентов.Зафиксирована);
	Если НайденнаяСтрокаСостояний = Неопределено И Состояние = Перечисления.СостояниеЖалобКлиентов.Зафиксирована Тогда
		УстановитьПривилегированныйРежим(Истина);
		Если ДатаИВремяРеакции = '00010101' Тогда
			ДатаИВремяРеакции = ТекущаяДатаСеанса() + 60 * 60 * Константы.ВремяРеакцииНаЖалобу.Получить();
		КонецЕсли;
		Если ДатаИВремяРазбора = '00010101' Тогда
			ДатаИВремяРазбора = ТекущаяДатаСеанса() + 60 * 60 * Константы.ВремяРазбораЖалобы.Получить();
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ ОбменДанными.Загрузка Тогда
		
		Документы.ЖалобаКлиента.ХозОперацияПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Надо обновить состояние документа
	Если НЕ Отказ Тогда
		Если НЕ РегистрыСведений.ЖурналСостояний.ЗаписьВЖурналСостояний(Ссылка) Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливет контактное лицо контрагента
Процедура УстановитьКЛКонтрагента()
	
	Если Контрагент <> Неопределено И Контрагент <> Справочники.Контрагенты.ПустаяСсылка() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактныеЛица.КонтактноеЛицо КАК КонтактноеЛицо,
		|	КонтактныеЛица.Основной КАК Основной
		|ИЗ
		|	РегистрСведений.КонтактныеЛица КАК КонтактныеЛица
		|ГДЕ
		|	КонтактныеЛица.Владелец = &Владелец";
		
		Запрос.УстановитьПараметр("Владелец", Контрагент);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Если РезультатЗапроса.Количество() > 0 Тогда
			Первый = РезультатЗапроса[0].КонтактноеЛицо;
			Для Каждого Строка Из РезультатЗапроса Цикл
				Если Строка.Основной Тогда	
					КЛКонтрагента = Строка.КонтактноеЛицо;
				КонецЕсли;
			КонецЦикла;
			Если Не ЗначениеЗаполнено(КЛКонтрагента) Тогда
				КЛКонтрагента = Первый;
			КонецЕсли;
			
			КИКЛКонтрагента = УправлениеКонтактнойИнформациейАльфаАвто.ТелефонДляМаски(КЛКонтрагента);

		КонецЕсли;
		
		КИКонтрагента = УправлениеКонтактнойИнформациейАльфаАвто.ТелефонДляМаски(КЛКонтрагента);
		Документы.ЖалобаКлиента.КонтрагентПриИзменении(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Событие"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Событие(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,
		 ТекстЗаполнения, СтандартнаяОбработка) Тогда
		 Возврат Истина;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ДанныеЗаполнения.СторонниеЛица Цикл
		Контрагент    = ТекСтрока.Контрагент;
		КЛКонтрагента = ТекСтрока.КонтактноеЛицо;
		КИКонтрагента = ТекСтрока.КонтактнаяИнформация;
		Документы.ЖалобаКлиента.КонтрагентПриИзменении(ЭтотОбъект);
		Прервать;
	КонецЦикла;
	Для Каждого ТекСтрока Из ДанныеЗаполнения.Пользователи Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Пользователь) Тогда
			Сотрудник     = ТекСтрока.Пользователь.Сотрудник;
			Ответственный = ТекСтрока.Пользователь.Сотрудник;
		КонецЕсли;
		Прервать;
	КонецЦикла;
		
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Событие()

// Производит заполнение объекта по передаваемой структуре
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ДокументОснование = ДанныеЗаполнения.ДокументОснование;
		Документы.ЖалобаКлиента.ДокументОснованиеПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		Контрагент = ДанныеЗаполнения.Контрагент;
		Документы.ЖалобаКлиента.КонтрагентПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Структура()

// Производит заполнение объекта на основании документа "Рабочий лист"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РабочийЛист(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "Контрагент");
	Документы.ЖалобаКлиента.КонтрагентПриИзменении(ЭтотОбъект);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РабочийЛист()

// Производит заполнение объекта на основании документа "Заявка на ремонт"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаРемонт(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер
			.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "Контрагент");
	Документы.ЖалобаКлиента.КонтрагентПриИзменении(ЭтотОбъект);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РабочийЛист()

// Производит заполнение объекта на основании документа "Заявка на аренду"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаАренду(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,
			ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент = ДанныеЗаполнения.Заказчик;
	Документы.ЖалобаКлиента.КонтрагентПриИзменении(ЭтотОбъект);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РабочийЛист()

// Производит заполнение объекта на основании документа "Договор аренды"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ДоговорАренды(ДанныеЗаполнения,
		ТекстЗаполнения = "",
		СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,
			ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения.Заказчик) Тогда
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект,
			НСтр("ru = 'Не заполнен контрагент в рабочем листе.'"));
		Возврат Истина;
	КонецЕсли;
	
	Контрагент = ДанныеЗаполнения.Заказчик;
	Документы.ЖалобаКлиента.КонтрагентПриИзменении(ЭтотОбъект);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РабочийЛист()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
