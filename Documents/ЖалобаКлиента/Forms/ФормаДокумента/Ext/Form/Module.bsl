///////////////////////////////////////////////////////////////////////////////
// Модуль основной формы документа "Жалоба клиента"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ОграничитьВыборКонтактныхЛиц(Элементы.Контрагент);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	
	РазрешитьРедактированиеЦенИСумм = ПраваИНастройкиПользователя.Значение("РедактированиеЦенИСуммВНоменклатурныхТаблицах", Объект);
	РаботаСФормой.РазрешитьРедактированиеЦенИСумм(
		РаботаСФормой.ТиповыеПоляСуммовыхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм
	);
	РаботаСФормой.ОткрытьФормуТолькоДляПросмотра(ЭтотОбъект, Объект);
	
	// Перед открытием надо заполнить списки выбора контактной информации
	// для контрагента и для его контактного лица.
	Если Не Объект.Контрагент.Пустая() Тогда
		
		УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
			Объект.Контрагент,
			ЭтотОбъект,
			"Телефон",
			"КИКонтрагента"
		);
		
	КонецЕсли;
	
	Если Не Объект.КЛКонтрагента.Пустая() Тогда
		
		УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
			Объект.КЛКонтрагента,
			ЭтотОбъект,
			"Телефон",
			"КИКЛКонтрагента"
		);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.Состояние = Перечисления.СостояниеЖалобКлиентов.Зафиксирована;
		НастроитьПараметрыВыбораЭлементовФормы();
		УправлениеДиалогомНаСервере();	
		
	КонецЕсли;
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);
	
КонецПроцедуры 

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Если ТипЗнч(ТекущийОбъект.ДокументОснование) = Тип("ДокументСсылка.Событие") Тогда
		ОбработкаСобытийДокументаСервер.ОбновитьДокументОснование_Событие(ТекущийОбъект);
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка); 
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.Событие") Тогда
		Оповестить("ОповещениеДляДокументаСобытие", Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();

КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	
	ПараметрыДействия = Новый Структура;
	ДатаПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЖалобаКлиента.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	Документы.ЖалобаКлиента.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура КЛКонтрагентаПриИзменении(Элемент)
		
	ПараметрыДействия = Новый Структура;
	КЛКонтрагентаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КЛКонтрагентаПриИзмененииНаСервере()
	
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		Объект.КЛКонтрагента,
		ЭтотОбъект,
		"Телефон",
		"КИКЛКонтрагента"
	);
	Объект.КИКЛКонтрагента = УправлениеКонтактнойИнформациейАльфаАвто.ТелефонДляМаски(Объект.КЛКонтрагента);

	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	КонтрагентПриИзмененииНаСервере(ПараметрыДействия);
	
	
КонецПроцедуры 

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЖалобаКлиента.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		Объект.Контрагент,
		ЭтотОбъект,
		"Телефон",
		"КИКонтрагента"
	);
	Объект.КИКонтрагента = УправлениеКонтактнойИнформациейАльфаАвто.ТелефонДляМаски(Объект.Контрагент);
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДоговорВзаиморасчетовПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЖалобаКлиента.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьЭлементыСостоянийЖалобы()
	
	ДатыСостоянийЖалобы = ДатыСостоянийЖалобы(Объект.Ссылка);
	ОбновитьЗначенияРеквизитовДатСостоянийЖалобы(ДатыСостоянийЖалобы);
	ОбновитьОформлениеДатСостоянийЖалобы();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДатыСостоянийЖалобы(Жалоба)
	
	ДатыСостоянийЖалобы = Новый Структура("Зафиксирована,ПервыйКонтакт,Разобрана,Проверена,Закрыта");
	
	Если НЕ ЗначениеЗаполнено(Жалоба) Тогда
		
		Возврат ДатыСостоянийЖалобы;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЖурналСостояний.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеЖалобКлиентов.Зафиксирована)
		|			ТОГДА ЖурналСостояний.Период
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК Зафиксирована,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПервыйКонтакт,
		|	ВЫБОР
		|		КОГДА ЖурналСостояний.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеЖалобКлиентов.Разобрана)
		|			ТОГДА ЖурналСостояний.Период
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК Разобрана,
		|	ВЫБОР
		|		КОГДА ЖурналСостояний.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеЖалобКлиентов.Проверена)
		|			ТОГДА ЖурналСостояний.Период
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК Проверена,
		|	ВЫБОР
		|		КОГДА ЖурналСостояний.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеЖалобКлиентов.Закрыта)
		|			ТОГДА ЖурналСостояний.Период
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК Закрыта
		|ПОМЕСТИТЬ СырыеДанные
		|ИЗ
		|	РегистрСведений.ЖурналСостояний КАК ЖурналСостояний
		|ГДЕ
		|	ЖурналСостояний.Объект = &Жалоба
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ВЫРАЗИТЬ(ПодчиненныеДокументы.Ссылка КАК Документ.Событие).Дата,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1)
		|ИЗ
		|	КритерийОтбора.ПодчиненныеДокументы(&Жалоба) КАК ПодчиненныеДокументы
		|ГДЕ
		|	ПодчиненныеДокументы.Ссылка ССЫЛКА Документ.Событие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(СырыеДанные.Зафиксирована) КАК Зафиксирована,
		|	МАКСИМУМ(СырыеДанные.ПервыйКонтакт) КАК ПервыйКонтакт,
		|	МАКСИМУМ(СырыеДанные.Разобрана) КАК Разобрана,
		|	МАКСИМУМ(СырыеДанные.Проверена) КАК Проверена,
		|	МАКСИМУМ(СырыеДанные.Закрыта) КАК Закрыта
		|ИЗ
		|	СырыеДанные КАК СырыеДанные"
	);
	Запрос.УстановитьПараметр("Жалоба", Жалоба);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат ДатыСостоянийЖалобы;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ДатыСостоянийЖалобы, Выборка);
	Возврат ДатыСостоянийЖалобы;
	
КонецФункции

&НаСервере
Процедура ОбновитьЗначенияРеквизитовДатСостоянийЖалобы(ДатыСостоянийЖалобы)
	
	Если ЗначениеЗаполнено(ДатыСостоянийЖалобы.Зафиксирована) Тогда
		
		Зафиксирована = ДатыСостоянийЖалобы.Зафиксирована;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатыСостоянийЖалобы.ПервыйКонтакт) Тогда
		
		ПервыйКонтакт = ДатыСостоянийЖалобы.ПервыйКонтакт;
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ДатыСостоянийЖалобы.Закрыта) Тогда
		
		Закрыта = ДатыСостоянийЖалобы.Закрыта;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатыСостоянийЖалобы.Проверена) Тогда
		
		Проверена = ДатыСостоянийЖалобы.Проверена;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатыСостоянийЖалобы.Разобрана) Тогда
		
		Разобрана = ДатыСостоянийЖалобы.Разобрана;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатыСостоянийЖалобы.ПервыйКонтакт) Тогда
 
		Элементы.ДекорацияСрокРеакции.Заголовок = Документы.ЖалобаКлиента.ПолучитьЧасыИМинутыТекстом(
			ДатыСостоянийЖалобы.ПервыйКонтакт,
			Объект.ДатаИВремяРеакции,
			Истина
		);
		ОтреагировалиВовремя = (Объект.ДатаИВремяРеакции > ДатыСостоянийЖалобы.ПервыйКонтакт);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ДатаИВремяРеакции) Тогда
		
		Элементы.ДекорацияСрокРеакции.Заголовок = Документы.ЖалобаКлиента.ПолучитьЧасыИМинутыТекстом(
			ТекущаяДатаСеанса(),
			Объект.ДатаИВремяРеакции
		);
		ОтреагировалиВовремя = (Объект.ДатаИВремяРеакции > ТекущаяДатаСеанса());
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатыСостоянийЖалобы.Разобрана) Тогда
		
		Элементы.ДекорацияСрокРазбора.Заголовок = Документы.ЖалобаКлиента.ПолучитьЧасыИМинутыТекстом(
			ДатыСостоянийЖалобы.Разобрана,
			Объект.ДатаИВремяРазбора,
			Истина
		);
		РазобралиВовремя = (Объект.ДатаИВремяРазбора > ДатыСостоянийЖалобы.Разобрана);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ДатаИВремяРазбора) Тогда
		
		Элементы.ДекорацияСрокРазбора.Заголовок = Документы.ЖалобаКлиента.ПолучитьЧасыИМинутыТекстом(
			ТекущаяДатаСеанса(),
			Объект.ДатаИВремяРазбора
		);
		РазобралиВовремя = (Объект.ДатаИВремяРазбора > ТекущаяДатаСеанса());
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОформлениеДатСостоянийЖалобы()
	
	Если ОтреагировалиВовремя Тогда
		
		Элементы.ДекорацияСрокРеакции.ЦветТекста = ЦветаСтиля.РезультатУспехЦвет;
		
	Иначе
		
		Элементы.ДекорацияСрокРеакции.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
		Элементы.ДекорацияСрокРеакции.Шрифт      = ШрифтыСтиля.НеПринятыеКИсполнениюЗадачи;
		
	КонецЕсли;
	
	Если РазобралиВовремя Тогда
		
		Элементы.ДекорацияСрокРазбора.ЦветТекста = ЦветаСтиля.РезультатУспехЦвет;
		
	Иначе
		
		Элементы.ДекорацияСрокРазбора.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
		Элементы.ДекорацияСрокРазбора.Шрифт      = ШрифтыСтиля.НеПринятыеКИсполнениюЗадачи;
		
	КонецЕсли;
	
КонецПроцедуры

// Производит настройку условного оформления формы.
//
&НаСервере
Процедура УстановитьУсловноеОформление()
 
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры 

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры

// Конец Ядро

// СчетаФактуры
&НаКлиенте
Процедура НадписьВзаиморасчетыНажатие(Элемент)
	
	УправлениеДиалогомДокументаКлиент.НадписьВзаиморасчетыНажатие(ЭтотОбъект);
	
КонецПроцедуры
// Конец СчетаФактуры

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	ОбновитьЭлементыСостоянийЖалобы();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если НЕ УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	
КонецПроцедуры 

#КонецОбласти

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	                                                                                                                
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти