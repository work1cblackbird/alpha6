// Модуль документа "Счет на оплату"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	// Если вводится на основании события
	Если ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "Имя") = "Событие" Тогда
		ДанныеЗаполненияКопия = ДанныеЗаполнения;
		ДанныеЗаполнения = ДанныеЗаполнения.Событие;
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "Основание_СчетНаОплату") <> Неопределено Тогда
		Если ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "ПерезаполнитьТоварыПоЗаказу", Ложь) Тогда
			ДополнительныеСвойства.Вставить("ПерезаполнитьТоварыПоЗаказу", Истина);
		КонецЕсли;
		ДанныеЗаполнения = ДанныеЗаполнения.Основание_СчетНаОплату;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"ВхДокНомер,ВхДокДатаВрем"
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
	// Заполним счет организации, которая указана в документе
	Результат = ОбработкаСобытийДокументаСервер.
		ПроверитьКорректностьБанковскогоСчета(РасчетныйСчетОрганизации, Организация, ПодразделениеКомпании);
	Если НЕ Организация.Пустая() И (РасчетныйСчетОрганизации.Пустая() ИЛИ НЕ Результат) Тогда
		РасчетныйСчетОрганизации = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Организация);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипЦенРабот) Тогда
		ТипЦенРабот = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенРабот", ЭтотОбъект);
	КонецЕсли;
	
	// если ввели на основании, но при этом не заполнили ставки НДС, то исправимся
	Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
			Документы.СчетНаОплату.ТоварыСтавкаНДСПриИзменении(ЭтотОбъект, СтрокаТабличнойЧасти, ДополнительныеСвойства.ПараметрыДействия);
		КонецЕсли;
		
	КонецЦикла;	
	// Заполнить контрагента из события
	ДанныеЗаполненияКонтрагент = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполненияКопия, "Контрагент");
	Если ДанныеЗаполненияКонтрагент <> Неопределено Тогда
		Контрагент = ДанныеЗаполненияКонтрагент;
		Документы.СчетНаОплату.КонтрагентПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ПравоПользователя("ПроведениеНезаполненныхДокументов", ЭтотОбъект) Тогда
		Если НЕ ЗначениеЗаполнено(Товары) И НЕ ЗначениеЗаполнено(Автоработы) Тогда
			ПроверяемыеРеквизиты.Добавить("Товары");
			ПроверяемыеРеквизиты.Добавить("Автоработы");
		КонецЕсли;
	КонецЕсли;
	
	УчетПрослеживаемыхТоваровСервер.ПроверитьЗаполнениеРНПТПрослеживаемогоТовара(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ФормированиеДвиженийДокумента

// Производит заполнение объекта на основании документа "Заказ покупателя"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПокупателя(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ПерезаполнитьТоварыПоЗаказу")
		ИЛИ ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "СкопироватьТабличнуюЧастьОснования", Ложь)
	Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток КАК Количество,
	|	ЗаказыПокупателейОстатки.СуммаОстаток КАК СуммаЗаказа,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.Количество * ЗаказПокупателяТовары.Коэффициент,1) КАК КоличествоБазовое,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.ЕдиницаИзмерения,Значение(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.Коэффициент,1) КАК Коэффициент,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.СтавкаНДС, ЗаказыПокупателейОстатки.Номенклатура.СтавкаНДС) КАК СтавкаНДС,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.НомерСтроки, 1000000) КАК НомерСтроки,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.СкидкаНаТовар, ЗНАЧЕНИЕ(Справочник.ТипыСкидок.ПустаяСсылка)) КАК СкидкаНаТовар,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.ПроцентСкидкиСтроки,0) КАК ПроцентСкидкиСтроки,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.ПроцентСкидки,0) КАК ПроцентСкидки,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.ЗначениеСкидкиШапкиИзменено,ЛОЖЬ) КАК ЗначениеСкидкиШапкиИзменено,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.ЗначениеСкидкиСтрокиИзменено,ЛОЖЬ) КАК ЗначениеСкидкиСтрокиИзменено
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(" + ?(Ссылка.Пустая(), "", "&НаМомент") + ",
	|	Контрагент = &Контрагент И Заказ = &Заказ) КАК ЗаказыПокупателейОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ПО 
	|	ЗаказыПокупателейОстатки.Заказ                      = ЗаказПокупателяТовары.Ссылка
	|	И ЗаказыПокупателейОстатки.Номенклатура               = ЗаказПокупателяТовары.Номенклатура
	|	И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказПокупателяТовары.ХарактеристикаНоменклатуры
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(КоличествоБазовое),
	|	МАКСИМУМ(Количество),
	|	МАКСИМУМ(СуммаЗаказа)
	|ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры");
	
	ВалютаЗаказа	= ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов;
	СтруктураКурса	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаЗаказа,Дата);
	КурсЗаказа		= СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ПолучитьДанныеНаДатуОснования", Ложь) Тогда
		Запрос.УстановитьПараметр("НаМомент", Новый Граница(ДанныеЗаполнения.МоментВремени(), ВидГраницы.Включая));
	Иначе
		Запрос.УстановитьПараметр("НаМомент", МоментВремени());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Заказ",      ДанныеЗаполнения);
	
	СкидкаНаценка = ДанныеЗаполнения.СкидкаНаценка;
	Документы.СчетНаОплату.СкидкаНаценкаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	Товары.Очистить(); // нужные только скорректированные позиции
	
	ВыборкаНоменклатуры = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия.Вставить("РассчитыватьСуммуОтСуммыВсего", Истина);
	
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		
		ВыборкаХарактеристик = ВыборкаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаХарактеристик.Следующий() Цикл
			
			ВсегоОсталось 				= ВыборкаХарактеристик.Количество;
			КоличествоБазовоеПоЗаказу 	= ВыборкаХарактеристик.КоличествоБазовое;
			СуммаОсталось 				= РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаХарактеристик.СуммаЗаказа,
											ВалютаЗаказа, КурсЗаказа, ВалютаДокумента, КурсДокумента);
			ВыборкаДетали 				= ВыборкаХарактеристик.Выбрать(ОбходРезультатаЗапроса.Прямой);
			НоваяСтрока   				= Неопределено;
			
			Пока ВыборкаДетали.Следующий() Цикл
				
				Если ВсегоОсталось = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если ВыборкаДетали.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если КоличествоБазовоеПоЗаказу = 1 Тогда
					КоличествоСтроки = ВыборкаДетали.Количество;
				Иначе
					КоличествоСтроки = ВыборкаДетали.Количество * (ВыборкаДетали.КоличествоБазовое / КоличествоБазовоеПоЗаказу);
				КонецЕсли;
				
				ТекущееКоличество 						= Мин(ВсегоОсталось, КоличествоСтроки);
				
				НоваяСтрока								= Товары.Добавить();
				НоваяСтрока.Номенклатура				= ВыборкаДетали.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры	= ВыборкаДетали.ХарактеристикаНоменклатуры;
				НоваяСтрока.ЕдиницаИзмерения			= ВыборкаДетали.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент					= ВыборкаДетали.Коэффициент;
				Документы.СчетНаОплату.ТоварыНоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока,
					ДополнительныеСвойства.ПараметрыДействия);
				НоваяСтрока.Количество					= ТекущееКоличество / ?(НЕ ЗначениеЗаполнено(НоваяСтрока.Коэффициент),
					1, НоваяСтрока.Коэффициент);
				НоваяСтрока.СтавкаНДС					= ВыборкаДетали.СтавкаНДС;
				
				Если ТекущееКоличество = ВсегоОсталось Тогда
					ТекСумма = СуммаОсталось;
				Иначе
					ТекСумма = Окр(СуммаОсталось * ТекущееКоличество / ВсегоОсталось, 2);
				КонецЕсли;
				
				СуммаОсталось 							= СуммаОсталось - ТекСумма;
				
				НоваяСтрока.СкидкаНаТовар 					= ВыборкаДетали.СкидкаНаТовар;
				НоваяСтрока.ПроцентСкидки 					= ВыборкаДетали.ПроцентСкидки;
				НоваяСтрока.ПроцентСкидкиСтроки 			= ВыборкаДетали.ПроцентСкидкиСтроки;
				НоваяСтрока.ЗначениеСкидкиСтрокиИзменено 	= ВыборкаДетали.ЗначениеСкидкиСтрокиИзменено;
				НоваяСтрока.ЗначениеСкидкиШапкиИзменено 	= ВыборкаДетали.ЗначениеСкидкиШапкиИзменено;
				
				НоваяСтрока.СуммаВсего 					= ТекСумма;
				Документы.СчетНаОплату.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект, НоваяСтрока, ДополнительныеСвойства.ПараметрыДействия);
				ВсегоОсталось 							= ВсегоОсталось - ТекущееКоличество;
				
			КонецЦикла;
			
			Если ВсегоОсталось > 0 ИЛИ СуммаОсталось > 0 Тогда
				
				Если НЕ НоваяСтрока = Неопределено Тогда
					
					НоваяСтрока.Количество = НоваяСтрока.Количество + (ВсегоОсталось / НоваяСтрока.Коэффициент);
					СуммаВсего = НоваяСтрока.СуммаВсего;
					Документы.СчетНаОплату.ТоварыКоличествоПриИзменении(ЭтотОбъект, НоваяСтрока);
					НоваяСтрока.СуммаВсего = СуммаВсего + СуммаОсталось;
					
				Иначе
					
					НоваяСтрока								= Товары.Добавить();
					НоваяСтрока.Номенклатура				= ВыборкаХарактеристик.Номенклатура;
					НоваяСтрока.ХарактеристикаНоменклатуры 	= ВыборкаХарактеристик.ХарактеристикаНоменклатуры;
					Документы.СчетНаОплату.ТоварыНоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока, ДополнительныеСвойства.ПараметрыДействия);
					НоваяСтрока.СтавкаНДС 					= Справочники.СтавкиНДС.ОсновнаяСтавкаНДС;
					НоваяСтрока.Количество 					= ВсегоОсталось
						/ ?(НЕ ЗначениеЗаполнено(НоваяСтрока.Коэффициент), 1, НоваяСтрока.Коэффициент);
					Документы.СчетНаОплату.ТоварыКоличествоПриИзменении(ЭтотОбъект, НоваяСтрока, ДополнительныеСвойства.ПараметрыДействия);
					НоваяСтрока.СуммаВсего 					= СуммаОсталось;
					
				КонецЕсли;
				
				Документы.СчетНаОплату.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект, НоваяСтрока, ДополнительныеСвойства.ПараметрыДействия);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Пересчитаем скидки.
	СуммыТоваров = Товары.Выгрузить(, "НомерСтроки,СуммаВсего");
	УсловиеПоиска = Новый Структура("НомерСтроки");
	
	ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
	ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	
	// Снова пересчитаем суммовые показатели после применения скидок
	Для Каждого СтрокаТоваров Из Товары Цикл
		
		УсловиеПоиска.НомерСтроки = СтрокаТоваров.НомерСтроки;
		СтрокаСуммы = СуммыТоваров.НайтиСтроки(УсловиеПоиска)[0];
		СтрокаТоваров.СуммаВсего = СтрокаСуммы.СуммаВсего;
		Документы.СчетНаОплату.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект, СтрокаТоваров, ДополнительныеСвойства.ПараметрыДействия);
		
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПокупателя()

// Производит заполнение объекта на основании документа "Поступление товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент 				= Неопределено;
	ДоговорВзаиморасчетов 	= Неопределено;
	ТипЦен      			= ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенПродажи", ЭтотОбъект);
	СтруктураКурса 			= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
	КурсДокумента 			= СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	
	Сч = 0;
	Пока Сч < Товары.Количество() Цикл
		ТекСтрока = Товары[Сч];
		
		Если ТекСтрока.Количество = 0 Тогда
			Товары.Удалить(Сч);
		Иначе
			ТекСтрока.Цена = ЦенообразованиеСервер.ПолучитьЦену(ТипЦен, ТекСтрока.Номенклатура,
				?(Ссылка.Пустая(), Дата, МоментВремени()), , ВалютаДокумента, КурсДокумента,
				ТекСтрока.ХарактеристикаНоменклатуры, ТекСтрока.ЕдиницаИзмерения, ПодразделениеКомпании);
			Документы.СчетНаОплату.ТоварыЦенаПриИзменении(ЭтотОбъект, ТекСтрока, ДополнительныеСвойства.ПараметрыДействия);
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	// Пересчитаем скидки.
	ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеТоваров()

// Производит заполнение объекта на основании документа "Авансовый отчет"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_АвансовыйОтчет(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Возвращаем заполнение по поступлению товаров
	Возврат ОбработкаЗаполнения_ПоступлениеТоваров(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_АвансовыйОтчет()

// Производит заполнение объекта на основании документа "Заказ поставщику"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПоставщику(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"Контрагент, ДоговорВзаиморасчетов"
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент = Справочники.Контрагенты.ОсновнойПокупатель;
	Документы.СчетНаОплату.КонтрагентПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	ТипЦен         = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенПродажи", ЭтотОбъект);
	Документы.СчетНаОплату.ТипЦенПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента  = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	ДополнительныеСвойства.ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	ДополнительныеСвойства.ПараметрыДействия.Вставить("ТипЦен", ТипЦен);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказыПоставщикам.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщикам.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ЗаказыПоставщикам.Заказано) КАК Заказано
	|ПОМЕСТИТЬ ЗаказыПоставщикамОстатки
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|ГДЕ
	|	ЗаказыПоставщикам.Период <= &Момент
	|	И НЕ ЗаказыПоставщикам.Регистратор ССЫЛКА Документ.ПоступлениеТоваров
	|	И ЗаказыПоставщикам.ЗаказПоставщику = &ВыбЗаказПоставщику
	|	И ЗаказыПоставщикам.Контрагент = &ВыбКонтрагент
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПоставщикам.Номенклатура,
	|	ЗаказыПоставщикам.ХарактеристикаНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	НЕ СУММА(ЗаказыПоставщикам.Заказано) = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПоставщикамОстатки.Заказано КАК ЗаказаноОстаток,
	|	ЕСТЬNULL(ЗаказПоставщикуТовары.Количество * ЗаказПоставщикуТовары.Коэффициент, 1) КАК КоличествоБазовое,
	|	ЕСТЬNULL(ЗаказПоставщикуТовары.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЗаказПоставщикуТовары.Коэффициент, 1) КАК Коэффициент
	|ИЗ
	|	ЗаказыПоставщикамОстатки КАК ЗаказыПоставщикамОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|		ПО (ЗаказПоставщикуТовары.Ссылка = &ВыбЗаказПоставщику)
	|			И ЗаказыПоставщикамОстатки.Номенклатура = ЗаказПоставщикуТовары.Номенклатура
	|			И ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры = ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(ЗаказаноОстаток),
	|	СУММА(КоличествоБазовое)
	|ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Момент", КонецДня(Дата));
	Запрос.УстановитьПараметр("ВыбКонтрагент", ДанныеЗаполнения.Контрагент);
	Запрос.УстановитьПараметр("ВыбЗаказПоставщику", ДанныеЗаполнения);
	
	Товары.Очистить();
	
	ВыборкаНоменклатуры = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		
		ВыборкаХарактеристик = ВыборкаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаХарактеристик.Следующий() Цикл
			
			ВсегоОсталось = ВыборкаХарактеристик.ЗаказаноОстаток;
			КоличествоБазовоеПоЗаказу = ВыборкаХарактеристик.КоличествоБазовое;
			ВыборкаДетали = ВыборкаХарактеристик.Выбрать(ОбходРезультатаЗапроса.Прямой);
			НоваяСтрока = Неопределено;
			
			Пока ВыборкаДетали.Следующий() Цикл
				
				Если ВсегоОсталось = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если ВыборкаДетали.ЗаказаноОстаток = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				КоличествоСтроки = ВыборкаДетали.ЗаказаноОстаток * (ВыборкаДетали.КоличествоБазовое / КоличествоБазовоеПоЗаказу);
				ТекущееКоличество = Мин(ВсегоОсталось, КоличествоСтроки);
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(
					НоваяСтрока,
					ВыборкаДетали,
					"Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Коэффициент"
				);
				Документы.СчетНаОплату.ТоварыНоменклатураПриИзменении(
					ЭтотОбъект,
					НоваяСтрока,
					ДополнительныеСвойства.ПараметрыДействия
				);
				Коэффициент = ?(ЗначениеЗаполнено(НоваяСтрока.Коэффициент), НоваяСтрока.Коэффициент, 1);
				НоваяСтрока.Количество = ТекущееКоличество / Коэффициент;
				Документы.СчетНаОплату.ТоварыКоличествоПриИзменении(
					ЭтотОбъект,
					НоваяСтрока,
					ДополнительныеСвойства.ПараметрыДействия
				);
				ВсегоОсталось = ВсегоОсталось - ТекущееКоличество;
				
			КонецЦикла;
			
			Если ВсегоОсталось = 0 Тогда
				Продолжить;
			КонецЕсли;
				
			Если НоваяСтрока <> Неопределено Тогда
				
				НоваяСтрока.Количество = НоваяСтрока.Количество + (ВсегоОсталось / НоваяСтрока.Коэффициент);
				Документы.СчетНаОплату.ТоварыКоличествоПриИзменении(
					ЭтотОбъект,
					НоваяСтрока,
					ДополнительныеСвойства.ПараметрыДействия
				);
				
			ИначеЕсли ВсегоОсталось > 0 Тогда
				
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура = ВыборкаХарактеристик.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры = ВыборкаХарактеристик.ХарактеристикаНоменклатуры;
				Документы.СчетНаОплату.ТоварыНоменклатураПриИзменении(
					ЭтотОбъект,
					НоваяСтрока,
					ДополнительныеСвойства.ПараметрыДействия
				);
				НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.ОсновнаяСтавкаНДС;
				Коэффициент = ?(ЗначениеЗаполнено(НоваяСтрока.Коэффициент), НоваяСтрока.Коэффициент, 1);
				НоваяСтрока.Количество = ВсегоОсталось / Коэффициент;
				Документы.СчетНаОплату.ТоварыКоличествоПриИзменении(
					ЭтотОбъект,
					НоваяСтрока,
					ДополнительныеСвойства.ПараметрыДействия
				);
				
			КонецЕсли;
			
			Документы.СчетНаОплату.ТоварыСуммаВсегоПриИзменении(
				ЭтотОбъект,
				НоваяСтрока,
				ДополнительныеСвойства.ПараметрыДействия
			);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Пересчитаем скидки.
	ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
	
	// Возвращаем заполнение по поступлению товаров
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПоставщику()

// Производит заполнение объекта на основании документа "Заказ поставщику"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаряд(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли; 
	
	// На бесплатных видах ремонта вызывается обработчик установки цен номенклатуры.
	// Для корректной установки цен из документа основания добавлено заполнение табличной части "Товары"
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ВидРемонта)
		И ДанныеЗаполнения.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный Тогда
		
		ТекстСообщения = НСтр("ru = 'На основании закз-наряда с бесплатным видом ремонта ввод счета на оплату невозможен.'");
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
		ВызватьИсключение(ТекстСообщения);
		Возврат Истина;
		
	КонецЕсли;
	
	Для Каждого Строка Из Товары Цикл
		Строка.КлючСтроки = Новый УникальныйИдентификатор;
	КонецЦикла;
	
	Для Каждого Строка Из Автоработы Цикл
		Строка.КлючСтроки = Новый УникальныйИдентификатор;
	КонецЦикла;
	
	// Возвращаем заполнение по поступлению товаров
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаряд()

// Производит заполнение объекта на основании документа "Договор аренды"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ДоговорАренды(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат АрендаАвтомобилей.ЗаполнитьСчетНаОплату(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_ДоговорАренды()

// Производит заполнение объекта по передаваемой структуре
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ЗаполнениеИзКорзины") Тогда
		ПараметрыДействия = Неопределено;
		Для Каждого Строка Из ДанныеЗаполнения.Товары Цикл
			
			НоваяСтрока 						   = Товары.Добавить();	
			НоваяСтрока.Номенклатура 			   = Строка.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
			НоваяСтрока.Количество 				   = Строка.Количество;
			НоваяСтрока.ЕдиницаИзмерения 		   = Строка.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент		 		   = Строка.Коэффициент;
			ОбработкаТабличнойЧастиТовары.УстановитьЦены(ЭтотОбъект, НоваяСтрока, ПараметрыДействия);
			Документы.СчетНаОплату.ТоварыЦенаПриИзменении(ЭтотОбъект, НоваяСтрока, ПараметрыДействия);
			
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("Основание")
		И ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.ДоговорАренды") Тогда
		
		// Вызываем общий обработчик заполнения
		Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект,
			ДанныеЗаполнения.Основание, , СтандартнаяОбработка) Тогда
			Возврат Истина;
		КонецЕсли;
		
		АрендаАвтомобилей.ЗаполнитьСчетНаОплату(ЭтотОбъект, ДанныеЗаполнения, , СтандартнаяОбработка);
		
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "СчетНаДепозит", Ложь) Тогда
		АрендаАвтомобилей.ЗаполнитьСчетНаОплатуДепозита(ЭтотОбъект, ДанныеЗаполнения.ДоговорАренды, , СтандартнаяОбработка);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Структура()

// Производит заполнение объекта на основании документа "Поступление автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Хозоперация <> Справочники.ХозОперации.ПоступлениеАвтомобилейКомиссия
		И ДанныеЗаполнения.Хозоперация <> Справочники.ХозОперации.ПоступлениеАвтомобилейОтветственноеХранение Тогда
		
		ТекстСообщения = НСтр(
			"ru = 'Счет на оплату доступен только при вводе на основании поступления автомобилей на комиссию.'"
		);
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ДанныеЗаполнения, ТекстСообщения);
		
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Автомобили = ДокументОснование.Автомобили.ВыгрузитьКолонку("Автомобиль");
	ДанныеАвтомобилей = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Автомобили, "Марка, Модель, VIN");
	ДанныеКомментария = Новый Массив;
	Для Каждого КлючЗначение Из ДанныеАвтомобилей Цикл
		ДанныеКомментария.Добавить(СтрШаблон(НСтр("ru = '%1, %2, VIN %3'"),
			КлючЗначение.Значение.Марка,
			КлючЗначение.Значение.Модель,
			КлючЗначение.Значение.VIN)
		);
	КонецЦикла;
	Если ДанныеКомментария.Количество() > 0 Тогда
		Комментарий = СтрШаблон(НСтр("ru = 'Оплата услуг по хранению автомобиля {%1}'"),
			СтрСоединить(ДанныеКомментария, ";")
		);
	КонецЕсли;
	КоличествоАвтомобилей = ДокументОснование.Автомобили.Количество();
	ДоговорВзаиморасчетов = Неопределено;
	УсловиеПоиска = Новый Структура(
		"Свойство",
		ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.УслугаПоХранениюАвтомобилей
	);
	НайденныеСтроки = ПодразделениеКомпании.ДополнительныеРеквизиты.НайтиСтроки(УсловиеПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДополнительныеСвойства.ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	
	Товары.Очистить();
	НоваяСтрока = Товары.Добавить();
	НоваяСтрока.Номенклатура = НайденныеСтроки[0].Значение;
	Документы
		.СчетНаОплату
		.ТоварыНоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока, ДополнительныеСвойства.ПараметрыДействия);
	НоваяСтрока.Количество = КоличествоАвтомобилей;
	
	ТипЦен      	= ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенПродажи", ЭтотОбъект);
	СтруктураКурса 	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента 	= СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	НоваяСтрока.Цена = ЦенообразованиеСервер.ПолучитьЦену(
		ТипЦен,
		НоваяСтрока.Номенклатура,
		?(Ссылка.Пустая(), Дата, МоментВремени()),
		,
		ВалютаДокумента,
		КурсДокумента,
		НоваяСтрока.ХарактеристикаНоменклатуры,
		НоваяСтрока.ЕдиницаИзмерения,
		ПодразделениеКомпании
	);
	Документы.СчетНаОплату.ТоварыЦенаПриИзменении(ЭтотОбъект, НоваяСтрока, ДополнительныеСвойства.ПараметрыДействия);
	
	// Пересчитаем скидки.
	ДополнительныеСвойства.ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта на основании документа "Заявка на хранение шин"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаХранениеШин(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
			ЭтотОбъект,
			ДанныеЗаполнения,
			ТекстЗаполнения,
			СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Проверим наличие услуги по умолчанию у подразделения
	УслугаПоУмолчанию = ?(
		ЗначениеЗаполнено(ПодразделениеКомпании),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодразделениеКомпании, "УслугаПоСезонномуХранениюШинПоУмолчанию"),
		Неопределено);
	
	// Заполним товары
	Если Товары.Количество() = 0 И ЗначениеЗаполнено(УслугаПоУмолчанию) Тогда
		
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура = УслугаПоУмолчанию;
		Документы.СчетНаОплату.ТоварыНоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока);
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаявкаНаХранениеШин()

// Производит заполнение объекта на основании документа "Заявка на ремонт"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаРемонт(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
			ЭтотОбъект,
			ДанныеЗаполнения,
			ТекстЗаполнения,
			СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Товары.Очистить();
	// Копируем содержимое табличной части "Товары"
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Товары Цикл
		
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти,, "НомерСтроки");
		
	КонецЦикла;
	
	Автоработы.Очистить();
	// Копируем содержимое табличной части "Автоработы"
	Для Каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Автоработы Цикл
		
		НоваяСтрока = Автоработы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти,, "НомерСтроки");
		
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаявкаНаХранениеШин()

#КонецОбласти

#КонецОбласти


#КонецЕсли 

