// Модуль менеджера документа "Счет на оплату"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Выписка);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказПокупателя);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказПоставщику);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаРасходДС);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПланПоступленияДС);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РеализацияТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЧекНаОплату);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		Команда  = ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
		Если Команда <> Неопределено Тогда
			Команда.РежимЗаписи = "Запись";	   
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.СчетНаОплату);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.ШаблоныСообщений
// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	// Онлайн-оплата
	ОнлайнОплата.ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры);
	// Конец Онлайн-оплата
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	// Онлайн-оплата
	ОнлайнОплата.ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры);
	// Конец Онлайн-оплата
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ШаблоныСообщений

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Формирует структуру с данными для выгрузки в ЭД формата CML 2
//
// Параметры:
//  Документ - ДокументСсылка.ЗаказПоставщику - документ заказа
// 
// Возвращаемое значение:
//  Структура - с полями:
//  * Шапка - Структура;
//  * Товары - ТаблицаЗначений;
//
Функция ВыгрузитьДанныеДляЭД(Документ) Экспорт

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СчетНаОплату.Номер КАК Номер,
		|	СчетНаОплату.ВалютаДокумента КАК Валюта,
		|	СчетНаОплату.ВалютаДокумента.Код КАК ВалютаКод,
		|	СчетНаОплату.Дата КАК Дата,
		|	СчетНаОплату.СуммаДокумента КАК СуммаДокумента,
		|	СчетНаОплату.РасчетныйСчетОрганизации КАК БанковскийСчет,
		|	СчетНаОплату.Организация КАК Организация,
		|	СчетНаОплату.ТипЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	СчетНаОплату.Контрагент КАК Контрагент,
		|	СчетНаОплату.ДокументОснование КАК ДокументОснование,
		|	СчетНаОплату.ДействителенДо КАК ДействителенДо,
		|	СчетНаОплату.Комментарий КАК Комментарий,
		|	СчетНаОплату.ДоговорВзаиморасчетов.ЕдиницаИзмеренияАвтоработВПечатныхФормах КАК ЕдиницаРабот
		|ИЗ
		|	Документ.СчетНаОплату КАК СчетНаОплату
		|ГДЕ
		|	СчетНаОплату.Ссылка = &Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура.Артикул КАК Артикул,
		|	ВЫРАЗИТЬ(Товары.Номенклатура.Наименование КАК СТРОКА(200))КАК Наименование,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Содержание КАК Содержание,
		|	Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	Товары.ХарактеристикаНоменклатуры.Наименование КАК НаименованиеХарактеристики,
		|	Товары.Количество КАК Количество,
		|	Товары.Сумма КАК Сумма,
		|	Товары.СтавкаНДС КАК СтавкаНДС,
		|	Товары.СуммаНДС КАК СуммаНДС,
		|	Товары.СуммаВсего КАК СуммаСНДС,
		|	Товары.Цена КАК Цена,
		|	Товары.Ссылка.ТипЦен.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
		|	Товары.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
		|	Товары.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
		|	Товары.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
		|	Товары.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
		|	Товары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
		|	Товары.Коэффициент КАК ЕдиницаИзмеренияКоэффициент,
		|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ИЗ
		|	Документ.СчетНаОплату.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Документ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Автоработы.Авторабота.Артикул КАК Артикул,
		|   Автоработы.Авторабота.Наименование КАК Наименование,
		|	Автоработы.Авторабота КАК Номенклатура,
		|	"""",
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры,
		|	"""" КАК НаименованиеХарактеристики,
		|	Автоработы.Количество * Автоработы.Коэффициент КАК Количество,
		|	Автоработы.Сумма КАК Сумма,
		|	Автоработы.СтавкаНДС КАК СтавкаНДС,
		|	Автоработы.СуммаНДС КАК СуммаНДС,
		|	Автоработы.СуммаВсего КАК СуммаСНДС,
		|	Автоработы.Цена КАК Цена,
		|	Автоработы.Ссылка.ТипЦен.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
		|	Автоработы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
		|	Автоработы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
		|	Автоработы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
		|	Автоработы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
		|	Автоработы.Авторабота.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
		|	1 КАК ЕдиницаИзмеренияКоэффициент,
		|	NULL
		|
		|ИЗ
		|	Документ.СчетНаОплату.Автоработы КАК Автоработы
		|ГДЕ
		|	Автоработы.Ссылка = &Документ"
	);
	Запрос.УстановитьПараметр("Документ", Документ);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Новый Структура(
		"Шапка,Товары",
		ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатыЗапроса[0].Выгрузить()[0]),
		РезультатыЗапроса[1].Выгрузить()
	);

КонецФункции

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Товары.Итог("СуммаВсего") + Объект.Автоработы.Итог("СуммаВсего"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС",    Объект.Товары.Итог("СуммаНДС") + Объект.Автоработы.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента-ИтогиОперации.СуммаНДС);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Производит расчет суммы скидки/наценки по документу в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция РассчитатьСуммуСкидкиНаценки(Объект) Экспорт
	
	Объект.СуммаСкидкиНаценки = Объект.Товары.Итог("СуммаСкидки")
		+ Объект.Товары.Итог("СуммаСкидкиСтроки")
		+ Объект.Товары.Итог("СуммаСкидкиБонусами");
	Объект.СуммаСкидкиНаценкиРабот = Объект.Автоработы.Итог("СуммаСкидки")
		+ Объект.Автоработы.Итог("СуммаСкидкиСтроки")
		+ Объект.Автоработы.Итог("СуммаСкидкиБонусами");
	
КонецФункции // РассчитатьСуммуСкидкиНаценки()

// Используется в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость вывода только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возвращаемая строка, содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить = ЛОЖЬ, ТолькоОсновныеКонтакты = ИСТИНА) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

// Установка банковского счета в соответствии с организацией
//
Процедура УстановитьБанковскийСчет(Объект, ПараметрыДействия)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Результат = ОбработкаСобытийДокументаСервер.ПроверитьКорректностьБанковскогоСчета(Объект.РасчетныйСчетОрганизации,
													Объект.Организация, Объект.ПодразделениеКомпании);
		Если НЕ ЗначениеЗаполнено(Объект.РасчетныйСчетОрганизации) ИЛИ НЕ Результат Тогда
			Объект.РасчетныйСчетОрганизации = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Объект.Организация);
		КонецЕсли;
	Иначе
		Объект.РасчетныйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // УстановитьБанковскийСчет()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("РасчетныйСчетОрганизации");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И 
			(НЕ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплату")) И 
			(НЕ Объект.ДокументОснование.Метаданные().Реквизиты.Найти("ТипЦенРабот") = Неопределено) Тогда
		ОбязательныеРеквизиты.Добавить("ТипЦенРабот");
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	ОбязательныеРеквизиты.Добавить("Автоработы.Авторабота");
	ОбязательныеРеквизиты.Добавить("Автоработы.Количество");
	ОбязательныеРеквизиты.Добавить("Автоработы.Нормочас");
	ОбязательныеРеквизиты.Добавить("Автоработы.Коэффициент");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти = Новый Структура();
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		
		УникальныеТовары = Новый Массив();
		УникальныеТовары.Добавить("КлючСтроки");
		
		УникальныеАвтоработы = Новый Массив();
		УникальныеАвтоработы.Добавить("КлючСтроки");
		
		УникальныеТабличныеЧасти.Вставить("Товары", УникальныеТовары);
		УникальныеТабличныеЧасти.Вставить("Автоработы", УникальныеАвтоработы);
		
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	КонтролируемыеРеквизиты.Вставить("РасчетныйСчетОрганизации");
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	Если ЕстьРеквизит(Объект, , "Автоработы") Тогда
		ПараметрыДействия.Вставить("ОбъектЗаполненАвтоработами", Объект.Автоработы.Количество() > 0);
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ИмяРеквизитаСкидкаНаценка"         , "СкидкаНаценка");
	ПараметрыДействия.Вставить("ИмяРеквизитаЗначениеСкидкиНаценки" , "ЗначениеСкидкиНаценки");
	ПараметрыДействия.Вставить("ИмяРеквизитаСуммаСкидкиНаценки"    , "СуммаСкидкиНаценки");
	ПараметрыДействия.Вставить("СкидкаНаРаботы"                    , Ложь);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("НеСбрасыватьПризнакПересчетаЦен");
	
	// Вызываем общий обработчик действия
	ОбработкаТабличнойЧастиАвтоработы.ПерезаполнитьЦеныТабличнойЧасти(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	// Установим банковский счет
	УстановитьБанковскийСчет(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
	// Установим банковский счет
	УстановитьБанковскийСчет(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Действителен до".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДействителенДоПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	
	
КонецПроцедуры // ДействителенДоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Общий обработчик события возникающего при изменении данных реквизита "Скидка наценка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Для Каждого Строка Из Объект.Товары Цикл
		Строка.ЗначениеСкидкиШапкиИзменено = Ложь;
	КонецЦикла;
	
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкидкаНаценкаПриИзменении()

// Общий обработчик события возникающего при изменении данных реквизита "Карточка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КарточкаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаРеквизитовДокументаСервер.КарточкаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкидкаНаценкаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Строка.Номенклатура = Неопределено Тогда
		Строка.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли; 
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Коэффициент" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоэффициентПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоэффициентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыПроцентСкидкиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыСуммаСкидкиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Скидка на товар" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСкидкаНаТоварПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыПроцентСкидкиСтрокиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыСуммаСкидкиСтрокиПриИзменении()

// расчет скидок по строке
Процедура РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти = "Товары", СкидкаШапкиАбсолютная = Ложь) Экспорт
	
	СкидкиНаценкиСервер.РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти, СкидкаШапкиАбсолютная);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтоработы

// Обработчик события возникающего при изменении данных реквизита "Авторабота" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыАвтоработаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.АвтоработаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыНормочасПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.НормочасПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыКоэффициентПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.КоэффициентПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	//// Вызываем общий обработчик события
	//ОбработкаТабличнойЧастиАвтоработы.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыПроцентСкидкиПриИзменении(Объект, Строка,ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.ПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.СуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыСкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.СкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.ПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыСуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.СуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыСпособРасчетаСтоимостиРаботыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.РасчетСтоимостиРаботыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Товары");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "СчетНаОплату");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить по документу-основанию'");
	Команда.Идентификатор	= "ТоварыЗаполнитьПоДокументуОснование";
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением = Ложь;
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзДокумента(
		КомандыЗаполнения,
		"Товары",
		Параметры
	);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьПоДокументуОснование.Видимость",   Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьПоДокументуОснование.Доступность", Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа на основании документа
//
Функция ТоварыЗаполнитьПоДокументуОснование(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не заполнен документ основание.'"), Ссылка);
	Иначе
		// перезаполняем
		ПараметрыДействия.Вставить("ТребуетсяЗаполнитьНаОсновании", Истина);
		ПараметрыДействия.Вставить("СкопироватьТабличнуюЧастьОснования", Истина);
		ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецФункции // ТоварыЗаполнитьПоДокументуОснование()

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ИмяРеквизитаСкидкаНаценка"         , "СкидкаНаценкаРаботы");
	ПараметрыДействия.Вставить("ИмяРеквизитаЗначениеСкидкиНаценки" , "ЗначениеСкидкиНаценкиРабот");
	ПараметрыДействия.Вставить("ИмяРеквизитаСуммаСкидкиНаценки"    , "СуммаСкидкиНаценкиРабот");
	ПараметрыДействия.Вставить("СкидкаНаРаботы"                    , Истина);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события возникающего при изменении данных реквизита "Тип цен работ".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенРаботПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенРаботПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Скидка наценка работ".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкаНаценкаРаботыПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	Для Каждого Строка Из Объект.Автоработы Цикл
		Строка.ЗначениеСкидкиШапкиИзменено = Ложь;
	КонецЦикла;
	
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "Автоработы");
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.СчетНаОплату",
		"ПФ_MXL_СчетНаОплату",
		НСтр("ru = 'Счет на оплату'"),
		СсылкаНаДокумент,,,,,,
		Ложь
	);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик события формирования печатной формы.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - информация для заполнения письма при отправке печатной формы электронной почтой.
//                                     Содержит следующие поля:
//    ** Получатель - Строка, СписокЗначений, Массив - список получателей письма;
//    ** Тема - Строка - Тема письма,
//    ** Текст - Строка - Текст письма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_СчетНаОплату") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_СчетНаОплату",
			НСтр("ru = 'Счет на оплату'"),
			ПечатьСчетНаОплату(МассивОбъектов, ОбъектыПечати)
		);
	КонецЕсли;
	
	// Онлайн-оплата
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_QR_КодОнлайнОплата") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПФ_MXL_QR_КодОнлайнОплата",
		НСтр("ru = 'QR-код для онлайн-оплаты'"),
		ПечатьQR_КодДляОнлайнОплаты(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
		);
	КонецЕсли;
	// Конец Онлайн-оплата
	
КонецПроцедуры // Печать()

Функция ПечатьСчетНаОплату(МассивОбъектов, ОбъектыПечати, ПараметрыПечати = Неопределено)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетНаОплату_СчетНаОплату";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	ТабличныйДокумент.АвтоМасштаб         = Истина;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетНаОплату.ПФ_MXL_СчетНаОплату");
		
		МассивТабличныеЧасти = Новый Массив;
		МассивТабличныеЧасти.Добавить("Товары");
		МассивТабличныеЧасти.Добавить("Автоработы");
		
		ОбластьШапкаТаблицы = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ, МассивТабличныеЧасти);
		
		ОбластьДокОснование    = Макет.ПолучитьОбласть("ДокументОснование");
		ОбластьАвтомобиль      = Макет.ПолучитьОбласть("Автомобиль");
		ОбластьДействителенДо  = Макет.ПолучитьОбласть("ДействителенДо");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		ОбластьПодвалПодписанты = Макет.ПолучитьОбласть("ПодвалПодписанты");

		// Дата документа
		ДатаДокумента = Документ.Дата;
		
		// Заголовок счета
		ЗаполнитьЗаголовокСчета(ТабличныйДокумент, Макет, Документ);
		
		// Вывод заголовка документа.
		ОбластьЗаголовок = ЗаполнитьЗаголовокДокумента(Макет, Документ);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// Вывод документа основания.
		Если ЗначениеЗаполнено(Документ.ДокументОснование) Тогда
			
			АвтомобильОснования = Неопределено;
			
			Если ТипЗнч(Документ.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
				РеквизитыЗаказНаряда = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.ДокументОснование, "Дата,ДатаЗакрытия,СводныйРемонтныйЗаказ");
				НомерДляПечатиЗаказНаряда = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ.ДокументОснование);
				ДатаПечатнаяЗаказНаряда = ?(ЗначениеЗаполнено(РеквизитыЗаказНаряда.ДатаЗакрытия), РеквизитыЗаказНаряда.ДатаЗакрытия, РеквизитыЗаказНаряда.Дата);
				
				АвтомобильОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЗаказНаряда.СводныйРемонтныйЗаказ, "Автомобиль");
				
				ДокументОснованиеПредставление = Документ.ДокументОснование.Ссылка.Метаданные().Синоним + " № " + НомерДляПечатиЗаказНаряда
					+ " от " + Формат(ДатаПечатнаяЗаказНаряда, "ДФ = dd.MM.yyyy");
			ИначеЕсли ТипЗнч(Документ.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
				АвтомобильОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.ДокументОснование, "Автомобиль");
				
				ДокументОснованиеПредставление = 
					УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ.ДокументОснование);
			Иначе
				ДокументОснованиеПредставление = 
					УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ.ДокументОснование);
			КонецЕсли;
			
			ОбластьДокОснование.Параметры.ДокументОснованиеПредставление = ДокументОснованиеПредставление;
			ОбластьДокОснование.Параметры.ДокументОснование = Документ.ДокументОснование;
			ТабличныйДокумент.Вывести(ОбластьДокОснование);
			
			Если ЗначениеЗаполнено(АвтомобильОснования) Тогда
				ОбластьАвтомобиль.Параметры.АвтомобильОснования = АвтомобильОснования;
				
				Пробег = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(АвтомобильОснования,
					Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег, Документ.Дата);
				
				ПредставлениеАвто = СтрШаблон("%1 %2", 
					АвтомобильОснования, 
					?(ЗначениеЗаполнено(Пробег), "; пробег: " + Пробег, ""));
			
				ОбластьАвтомобиль.Параметры.ПредставлениеАвтомобиля = СокрЛП(ПредставлениеАвто);
				ТабличныйДокумент.Вывести(ОбластьАвтомобиль);
			КонецЕсли;
			
		КонецЕсли;
		
		// Вывод срока действия счета.
		Если ЗначениеЗаполнено(Документ.ДействителенДо) Тогда
			ОбластьДействителенДо.Параметры.ДействителенДо = Формат(Документ.ДействителенДо, "ДФ = dd.MM.yyyy");
			ТабличныйДокумент.Вывести(ОбластьДействителенДо);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Готовим шапку
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура();
		СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
		СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
		СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
		СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
		
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ, НСтр("ru = 'Счет на оплату'"));
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		НомерСтроки = 1;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
		Запрос.Текст = ТекстЗапросаТабличнойЧастиДокумента(Документ.Ссылка);
		ВыборкаТабличнойЧасти = Запрос.Выполнить().Выгрузить();
		
		ЕдиницаИзмеренияАвтоработВПечатныхФормах = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.ДоговорВзаиморасчетов, "ЕдиницаИзмеренияАвтоработВПечатныхФормах");
		Для каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			// Заполняем данные строки
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ);
			СтрокаКомментарий = СокрЛП(СтрокаТЧ.Комментарий);
			Если НЕ ПустаяСтрока(СтрокаКомментарий) Тогда
				СтруктураСтроки.ТоварНаименование = СокрЛП(СтрокаКомментарий);
			КонецЕсли;
			СтруктураСтроки.НомерСтроки = НомерСтроки;
			Если ТипЗнч(СтрокаТЧ.Номенклатура) = Тип("СправочникСсылка.Автоработы") Тогда
				КоличествоТовара = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент;
				СтруктураСтроки.Количество = Формат(КоличествоТовара, ФорматВыводаКоличества);
				СтруктураСтроки.ЕдиницаИзмерения = ЕдиницаИзмеренияАвтоработВПечатныхФормах;
			Иначе
				Если НЕ СтруктураСтроки.Свойство("ЕдиницаИзмерения") Тогда
					СтруктураСтроки.Вставить("ЕдиницаИзмерения", "-");
				КонецЕсли; 
			КонецЕсли; 
			
			СистемаНалогообложения 	= ПолучитьЗначениеУчетнойПолитики("СистемаНалогообложения", Документ.Организация);
			УпрощеннаяСистема 		= СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная;
			Если УпрощеннаяСистема И СтрокаТЧ.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
				СтруктураСтроки.ВСтавить("СуммаНДС", "Без НДС");	
			КонецЕсли;

			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			
			НомерСтроки = НомерСтроки + 1;
			
			// Доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если ВыборкаТабличнойЧасти.Индекс(СтрокаТЧ) = ВыборкаТабличнойЧасти.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвалПодписанты);
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
				СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
				СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
				СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
				НомерСтраницыПред		  = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// Итоги
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		СуммаВсего = Документ.Товары.Итог("СуммаВсего") + Документ.Автоработы.Итог("СуммаВсего");
		ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		НДСВсего = Документ.Товары.Итог("СуммаНДС") + Документ.Автоработы.Итог("СуммаНДС");
		ОбластьПодвал.Параметры.НДСВсего = Формат(НДСВсего, ФорматВыводаСуммы);
		
		Если Документ.Товары.Итог("СуммаСкидки") > 0 ИЛИ Документ.Автоработы.Итог("СуммаСкидки") > 0
			ИЛИ Документ.Товары.Итог("СуммаСкидкиСтроки") > 0 ИЛИ Документ.Автоработы.Итог("СуммаСкидкиСтроки") > 0
			ИЛИ Документ.Товары.Итог("СуммаСкидкиБонусами") ИЛИ Документ.Автоработы.Итог("СуммаСкидкиБонусами") > 0 Тогда
			
			СуммаСкидки = Документ.Товары.Итог("СуммаСкидки") + Документ.Автоработы.Итог("СуммаСкидки");
			СуммаСкидкиСтроки = Документ.Товары.Итог("СуммаСкидкиСтроки") + Документ.Автоработы.Итог("СуммаСкидкиСтроки");
			СуммаСкидкиБонусами = Документ.Товары.Итог("СуммаСкидкиБонусами") + Документ.Автоработы.Итог("СуммаСкидкиБонусами");
			
			ОбластьПодвал.Параметры.СкидкаВсего = Формат(СуммаСкидки + СуммаСкидкиСтроки + СуммаСкидкиБонусами, ФорматВыводаСуммы);
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);

		ОбластьПодвалПодписанты.Параметры.СуммаПрописью = СтрШаблон(НСтр("ru = 'Всего наименований %1 на сумму %2'"),
			ВыборкаТабличнойЧасти.Количество(),
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, Документ.ВалютаДокумента));
		
		// Выводим представления и расшифровки подписей.
		ДанныеРуководителя = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Руководитель", "Руководитель");
		ОбластьПодвалПодписанты.Параметры.Заполнить(ДанныеРуководителя);
		
		ДанныеБухгалтера = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(
			Документ,
			"ГлавныйБухгалтер",
			"ГлавныйБухгалтер"
		);
		ОбластьПодвалПодписанты.Параметры.Заполнить(ДанныеБухгалтера);
		
		ТабличныйДокумент.Вывести(ОбластьПодвалПодписанты);

		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьСчетНаОплату()

// Онлайн-оплата
Функция ПечатьQR_КодДляОнлайнОплаты(МассивОбъектов, ОбъектыПечати, ПараметрыПечати = Неопределено)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетНаОплату_КодQR_ОнлайнОплата";
	ПервыйДокумент = Истина;
	Для каждого Документ Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		ОнлайнОплата.РаспечататьКодQR(Документ, ПараметрыПечати, ТабличныйДокумент);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьQR_КодДляОнлайнОплаты()
// Конец Онлайн-оплата

#КонецОбласти

Функция ТекстЗапросаТабличнойЧастиДокумента(Документ)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СчетНаОплатуТовары.НомерСтроки КАК НомерСтроки,
	|	СчетНаОплатуТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуТовары.Содержание КАК Содержание,
	|	""Товары"" КАК Вид,
	|	СчетНаОплатуТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СчетНаОплатуТовары.Количество КАК Количество,
	|	СчетНаОплатуТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СчетНаОплатуТовары.Коэффициент КАК Коэффициент,
	|	СчетНаОплатуТовары.Цена КАК Цена,
	|	СчетНаОплатуТовары.Сумма КАК Сумма,
	|	СчетНаОплатуТовары.СтавкаНДС КАК СтавкаНДС,
	|	СчетНаОплатуТовары.СуммаНДС КАК СуммаНДС,
	|	СчетНаОплатуТовары.СуммаВсего КАК СуммаВсего,
	|	СчетНаОплатуТовары.СуммаСкидки КАК СуммаСкидки,
	|	СчетНаОплатуТовары.СуммаСкидкиСтроки КАК СуммаСкидкиСтроки,
	|	СчетНаОплатуТовары.Комментарий КАК Комментарий,
	|	СчетНаОплатуТовары.СуммаСкидкиБонусами КАК СуммаСкидкиБонусами
	|ИЗ
	|	Документ.СчетНаОплату.Товары КАК СчетНаОплатуТовары
	|ГДЕ
	|	СчетНаОплатуТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетНаОплатуАвтоработы.НомерСтроки,
	|	СчетНаОплатуАвтоработы.Авторабота,
	|	"""",
	|	""Автоработы"",
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	СчетНаОплатуАвтоработы.Количество,
	|	ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка),
	|	СчетНаОплатуАвтоработы.Коэффициент,
	|	СчетНаОплатуАвтоработы.Цена,
	|	СчетНаОплатуАвтоработы.Сумма,
	|	СчетНаОплатуАвтоработы.СтавкаНДС,
	|	СчетНаОплатуАвтоработы.СуммаНДС,
	|	СчетНаОплатуАвтоработы.СуммаВсего,
	|	СчетНаОплатуАвтоработы.СуммаСкидки,
	|	СчетНаОплатуАвтоработы.СуммаСкидкиСтроки,
	|	СчетНаОплатуАвтоработы.Комментарий,
	|	СчетНаОплатуАвтоработы.СуммаСкидкиБонусами
	|ИЗ
	|	Документ.СчетНаОплату.Автоработы КАК СчетНаОплатуАвтоработы
	|ГДЕ
	|	СчетНаОплатуАвтоработы.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Вид УБЫВ,
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьЗаголовокСчета(ТабличныйДокумент, Макет, Документ)
	
	Если УправлениеПечатьюПлатформа.ЕстьЛоготип(Документ.Организация, Документ.ПодразделениеКомпании) Тогда
		ОбластьЗаголовокСчета = Макет.ПолучитьОбласть("ЗаголовокСчетаСЛоготипом");
		УправлениеПечатьюПлатформа.
			ЗаполнитьЛоготип(ОбластьЗаголовокСчета, Документ.Организация, Документ.ПодразделениеКомпании);
	Иначе
		ОбластьЗаголовокСчета = Макет.ПолучитьОбласть("ЗаголовокСчета");
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовокСчета);
	
	ВалютаРег = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	Если (Документ.Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо
		ИЛИ Документ.Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель)
		И Не Документ.РасчетныйСчетОрганизации.Пустая()
		И Документ.ВалютаДокумента = ВалютаРег Тогда
		ОбластьОбразецЗаполненияСчета = Макет.ПолучитьОбласть("ОбразецЗаполненияСчетаQR");
		
		// Заполним картинку QR-кода
		ЕстьСуммаНДС = (Документ.Товары.Итог("СуммаНДС") > 0);
		УправлениеПечатьюПлатформа.ОбработатьQRКодОплаты(
			ОбластьОбразецЗаполненияСчета,
			Документ,
			ЕстьСуммаНДС);
	Иначе
		ОбластьОбразецЗаполненияСчета = Макет.ПолучитьОбласть("ОбразецЗаполненияСчета");
	КонецЕсли;
	
	ОбластьОбразецЗаполненияСчета.Параметры.БанкПолучателя = Символы.НПП + Документ.РасчетныйСчетОрганизации.Банк;
	ОбластьОбразецЗаполненияСчета.Параметры.БанкПолучателяПредставление = Документ.РасчетныйСчетОрганизации.Банк;
	ОбластьОбразецЗаполненияСчета.Параметры.БИКБанкаПолучателя = Символы.НПП
		+ СокрЛП(Документ.РасчетныйСчетОрганизации.Банк.Код);
	ОбластьОбразецЗаполненияСчета.Параметры.СчетБанкаПолучателя = Символы.НПП
		+ СокрЛП(Документ.РасчетныйСчетОрганизации.Банк.КоррСчет);
	ОбластьОбразецЗаполненияСчета.Параметры.ИНН = Символы.НПП
		+ УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, Новый Структура("ИНН"));
	
	ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
	ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
	ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
	ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
	ДополнительныеПараметры.НаДату = Документ.Дата;
	ОбластьОбразецЗаполненияСчета.Параметры.КПП = Символы.НПП
		+ УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация,
			Новый Структура("КПП"), ДополнительныеПараметры);
	
	ОбластьОбразецЗаполненияСчета.Параметры.Получатель = Документ.Организация;
	
	ОбластьОбразецЗаполненияСчета.Параметры.ПолучательПредставление =
		УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация, Документ.Дата);
	ОбластьОбразецЗаполненияСчета.Параметры.СчетПолучателя = Символы.НПП + СокрЛП(Документ.РасчетныйСчетОрганизации.НомерСчета);
	
	ТабличныйДокумент.Вывести(ОбластьОбразецЗаполненияСчета);
	
КонецПроцедуры

Функция ЗаполнитьЗаголовокДокумента(Макет, Документ)
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	
	ОбластьЗаголовок.Параметры.Заполнить(Документ);
	ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ, НСтр("ru = 'Счет на оплату'"));
	ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	СтруктураПредставления = Новый Структура();
	СтруктураПредставления.Вставить("ИНН",              "ИНН ");
	СтруктураПредставления.Вставить("КПП",              "КПП ");
	СтруктураПредставления.Вставить("Наименование",     "");
	СтруктураПредставления.Вставить("АдресЮридический", "");
	СтруктураПредставления.Вставить("ТелефонРабочий",   "тел.: ");
	
	ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
	ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
	ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
	ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
	ДополнительныеПараметры.НаДату = Документ.Дата;
	ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Организация, СтруктураПредставления, ДополнительныеПараметры);
	
	ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
	ДополнительныеПараметры.НаДату = Документ.Дата;
	ОбластьЗаголовок.Параметры.ПредставлениеПокупателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Контрагент, СтруктураПредставления, ДополнительныеПараметры);
	
	ОбластьЗаголовок.Параметры.ПредставлениеДоговорВзаиморасчетов = Строка(Документ.ДоговорВзаиморасчетов);
	ОбластьЗаголовок.Параметры.ДоговорВзаиморасчетов = Документ.ДоговорВзаиморасчетов;
	
	// Выведем или удалим ШК.
	УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ);
	
	Возврат ОбластьЗаголовок;
	
КонецФункции

#КонецОбласти

#КонецЕсли