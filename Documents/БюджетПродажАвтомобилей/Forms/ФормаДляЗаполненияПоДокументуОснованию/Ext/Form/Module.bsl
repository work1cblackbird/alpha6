///////////////////////////////////////////////////////////////////////////////
// Модуль формы "Заполнение по документу основанию"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СценарийПланирования             = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СценарийПланирования",             Неопределено);
	ДокументОснование                = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ДокументОснование",                Неопределено);
	МетодыРаспределенияКатегорий     = ПолучитьЗначениеПараметраСтруктуры(Параметры, "МетодыРаспределенияКатегорий",     Неопределено);
	ПараметрУправленияРаспределением = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПараметрУправленияРаспределением", Неопределено);
	ХозОперация                      = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ХозОперация",                      Неопределено);
	КоличествоПериодов               = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КоличествоПериодов",               Неопределено);
	КоэффициентРоста                 = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КоэффициентРоста",                 0);
	КоэффициентСезонности            = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КоэффициентСезонности",            0);
	ТипАнализа                       = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ТипАнализа",                       Неопределено);
	ПоказательПланирования           = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПоказательПланирования",           Неопределено);
	СпособОкругления                 = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СпособОкругления",                 0);
	СмещениеПланирования             = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СмещениеПланирования",             Неопределено);
	КоличествоСезонов                = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КоличествоСезонов",                Неопределено);
	НеУчитыватьПериодыБезДанных      = ПолучитьЗначениеПараметраСтруктуры(Параметры, "НеУчитыватьПериодыБезДанных",      Ложь);
	ТипЦен                           = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ТипЦен",                           Неопределено);
	КурсДокумента                    = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КурсДокумента",                    0);
	Дата                             = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Дата",                             Неопределено);
	ПодразделениеКомпании            = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПодразделениеКомпании",            Неопределено);
	ДатаПланирования                 = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ДатаПланирования",                 Неопределено);
	Владелец                         = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Владелец",                         Неопределено);
	ПланированиеСебестоимости        = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПланированиеСебестоимости",        Ложь);
	
	Если НЕ ЗначениеЗаполнено(СценарийПланирования) ИЛИ НЕ ЗначениеЗаполнено(СценарийПланирования.Периодичность) Тогда
		ОбщегоНазначения.СообщитьПользователю(Нстр("ru = 'Не выбран сценарий планирования, либо у выбранного сценария не указана периодичность.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МетодыРаспределенияКатегорий) Тогда
		МетодыРаспределенияКатегорий = Перечисления.МетодыРаспределенияКатегорий.ПоСумме;
	КонецЕсли;
	
	Если ПланированиеСебестоимости Тогда
		Элементы.АвтомобилиСебестоимостьУпр.Видимость = Истина;
		Элементы.АвтомобилиНормативнаяЦена.Видимость  = Истина; 
	Иначе
		Элементы.АвтомобилиСебестоимостьУпр.Видимость = Ложь;
		Элементы.АвтомобилиНормативнаяЦена.Видимость  = Ложь; 
	КонецЕсли;	
	
	УправлениеОтображением("ДокументОснование");
	ОсновнаяСтавкаНДС = Справочники.СтавкиНДС.ОсновнаяСтавкаНДС.Ставка;
	
	// Заполним табличное поле
	ЗаполнитьТабличноеПоле();
	
	// Заполним надпись с типом цены
	ПараметрыНадписи = Новый Структура;
	ПараметрыНадписи.Вставить("ТипЦен",                    ТипЦен);
	ПараметрыНадписи.Вставить("КурсДокумента",             КурсДокумента);
	ПараметрыНадписи.Вставить("НадписьИнформацияОТипеЦен", Элементы.НадписьИнформацияОТипеЦен);
	ПланированиеСервер.СформироватьНадписьТипаЦены(ПараметрыНадписи);
	
	НастроитьПараметрыВыбораДокументаОснование();
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "ДокументОснование" в контексте сервера.
//
&НаСервере
Процедура ДокументОснованиеПриИзмененииНаСервере()
	
	КоличествоПериодов          = ДокументОснование.КоличествоПериодов;
	ПоказательПланирования      = ДокументОснование.ПоказательПланирования;
	СпособОкругления            = ДокументОснование.СпособОкругления;
	НеУчитыватьПериодыБезДанных = ДокументОснование.НеУчитыватьПериодыБезДанных;
	КоличествоСезонов           = ДокументОснование.КоличествоСезонов;
	СмещениеПланирования        = ДокументОснование.СмещениеПланирования;
	УправлениеОтображением("ДокументОснование");
	ЗаполнитьТабличноеПоле();
	ПодразделениеДокументаОснование = ДокументОснование.ПодразделениеКомпании;
	
КонецПроцедуры // ДокументОснованиеПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "ДокументОснование".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	ДокументОснованиеПриИзмененииНаСервере();
	
КонецПроцедуры // ДокументОснованиеПриИзменении()

// Обработчик события возникающего на клиенте перед началом выбора данных реквизита "ДокументОснование".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ОтборДатаКонца", ПараметрыПериода.ДатаКонца);
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		ПараметрыФормы.Вставить("ОтборДокументИсключение", Владелец);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ОтборПоСценариюПланирования", СписокСценарияПланирования);
	
	Если ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.БюджетПродажПоМоделям") Тогда
		ОтборПоХозОперации = Новый Массив;
		ОтборПоХозОперации.Добавить(ПредопределенноеЗначение("Справочник.ХозОперации.БюджетПродажПоМоделям"));
		ПараметрыФормы.Вставить("ОтборПоХозОперации", Новый ФиксированныйМассив(ОтборПоХозОперации));
	Иначе
		ОтборПоХозОперации = Новый Массив;
		ОтборПоХозОперации.Добавить(ПредопределенноеЗначение("Справочник.ХозОперации.БюджетПродажПоМоделям"));
		ОтборПоХозОперации.Добавить(ПредопределенноеЗначение("Справочник.ХозОперации.БюджетПродажПоВариантамКомплектации"));
		ПараметрыФормы.Вставить("ОтборПоХозОперации", Новый ФиксированныйМассив(ОтборПоХозОперации));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		ПараметрыФормы.Вставить("НачальноеЗначениеВыбора", ДокументОснование);
	КонецЕсли;
	
	ОткрытьФорму("ЖурналДокументов.Бюджетирование.ФормаСписка", ПараметрыФормы, Элемент);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте перед началом интерактивного добавления строки дерева "Автомобили".
//
// Параметры:
//  Элемент     - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура АвтомобилиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Добавлять будем независимо от текущей строки
	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	
	ТекущиеДанные = Элементы.Автомобили.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		Модель = ТекущиеДанные.Автомобиль;
		Для Каждого ТекСтрокаМоделей Из Автомобили.ПолучитьЭлементы() Цикл
			Для Каждого ТекСтрокаКомплектации Из ТекСтрокаМоделей.ПолучитьЭлементы() Цикл
				Если ТекСтрокаКомплектации.Автомобиль = Модель Тогда
					Модель = ТекСтрокаМоделей.Автомобиль;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", Модель));
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ВариантыКомплектации.ФормаСписка", ПараметрыФормы, Элементы.Автомобили,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик события возникающего на сервере после удаления строки дерева "Автомобили".
//
// Параметры:
//  Элемент     - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаСервере
Процедура АвтомобилиПослеУдаленияНаСервере()
	
	ПересчитатьНераспределеннуюСумму();
	
КонецПроцедуры

// Обработчик события возникающего на клиенте после удаления строки дерева "Автомобили".
//
// Параметры:
//  Элемент     - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура АвтомобилиПослеУдаления(Элемент)
	АвтомобилиПослеУдаленияНаСервере();
КонецПроцедуры

// Обработчик события возникающего на сервере обработка выбора дерева "Автомобили".
//
&НаСервере
Процедура АвтомобилиОбработкаВыбораНаСервере(ВыбранноеЗначение)
	
	// Поищем есть ли такой тип номенклатуры в списке
	ПоискМодели = ВыбранноеЗначение.Владелец;
	
	ДеревоАвтомобилей = РеквизитФормыВЗначение("Автомобили");
	
	НайденнаяСтрока = ДеревоАвтомобилей.Строки.Найти(ПоискМодели, "Автомобиль");
	Если НайденнаяСтрока = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(Нстр("ru = 'Модель выбранного варианта комплектации отсутствует в таблице.'"));
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрокаЗначения = НайденнаяСтрока.Строки.Найти(ВыбранноеЗначение, "Автомобиль");
	Если НайденнаяСтрокаЗначения = Неопределено Тогда
		
		НоваяСтрока                              = НайденнаяСтрока.Строки.Добавить();
		НоваяСтрока.Автомобиль                  = ВыбранноеЗначение;
		
		НайденнаяСтрокаЗначения                  = НоваяСтрока;
		ЗначениеВРеквизитФормы(ДеревоАвтомобилей, "Автомобили");
	КонецЕсли;
	
	ОбработкаРеквизита(НайденнаяСтрокаЗначения, "Автомобили.Автомобиль");
	ЗначениеВРеквизитФормы(ДеревоАвтомобилей, "Автомобили");
	
	Для Каждого ТекМодель Из Автомобили.ПолучитьЭлементы() Цикл
		
		Для Каждого ТекВариант Из ТекМодель.ПолучитьЭлементы() Цикл
			
			Если ТекВариант.Автомобиль = НайденнаяСтрокаЗначения.Автомобиль Тогда
				Элементы.Автомобили.ТекущаяСтрока = ТекВариант.ПолучитьИдентификатор();
				Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ВариантыКомплектации") Тогда
					ТекВариант.СтавкаНДС = Строка(ОсновнаяСтавкаНДС) + "%";
					ТекВариант.Ставка    = ОсновнаяСтавкаНДС;
				КонецЕсли;
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // АвтомобилиОбработкаВыбораНаСервере()

// Обработчик события возникающего на клиенте обработка выбора дерева " Автомобили".
//
// Параметры:
//  Элемент     - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура АвтомобилиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АвтомобилиОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры // АвтомобилиОбработкаВыбора()

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Автомобиль".
//
&НаКлиенте
Процедура АвтомобилиАвтомобильНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.Автомобили.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Установим отбор при изменении номенклатуры
	СтандартнаяОбработка = Ложь;
	
	ОтборМодель = ПолучитьМодель();
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", ОтборМодель));
	
	ОткрытьФорму("Справочник.ВариантыКомплектации.ФормаСписка", ПараметрыФормы, Элемент);
	
КонецПроцедуры // АвтомобилиАвтомобильНачалоВыбора()

// Обработчик события возникающегопри изменении данных реквизита "Автомобили" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура АвтомобилиАвтомобильПриИзмененииНаСервере()
	
	ТекСтрока = Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
	ОбработкаРеквизита(ТекСтрока, "Автомобили.Автомобиль");
	УстановитьУсловноеОформление();
	
КонецПроцедуры // АвтомобилиАвтомобильПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Автомобили".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура АвтомобилиАвтомобильПриИзменении(Элемент)
	
	АвтомобилиАвтомобильПриИзмененииНаСервере();
	
КонецПроцедуры // АвтомобилиАвтомобильПриИзменении()

// Обработчик события возникающегопри изменении данных реквизита "Количество" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура АвтомобилиКоличествоПриИзмененииНаСервере()
	
	ТекСтрока = Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
	ОбработкаРеквизита(ТекСтрока, "Автомобили.Количество");
	
КонецПроцедуры // АвтомобилиКоличествоПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Количество".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура АвтомобилиКоличествоПриИзменении(Элемент)
	
	АвтомобилиКоличествоПриИзмененииНаСервере();
	
КонецПроцедуры // АвтомобилиКоличествоПриИзменении()

// Обработчик события возникающегопри изменении данных реквизита "Цена" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура АвтомобилиЦенаПриИзмененииНаСервере()
	
	ТекСтрока = Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
	ОбработкаРеквизита(ТекСтрока, "Автомобили.Цена");
	
КонецПроцедуры // АвтомобилиЦенаПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Цена".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура АвтомобилиЦенаПриИзменении(Элемент)
	
	АвтомобилиЦенаПриИзмененииНаСервере();
	
КонецПроцедуры // АвтомобилиЦенаПриИзменении()

// Обработчик события возникающегопри изменении данных реквизита "СуммаВсегоУпрНеРаспред" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура АвтомобилиСуммаВсегоУпрНеРаспредПриИзмененииНаСервере()
	
	ТекСтрока = Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
	ОбработкаРеквизита(ТекСтрока, "Автомобили.СуммаВсегоУпрНеРаспред");
	
КонецПроцедуры // АвтомобилиСуммаВсегоУпрНеРаспредПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "СуммаВсегоУпрНеРаспред".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура АвтомобилиСуммаВсегоУпрНеРаспредПриИзменении(Элемент)
	
	АвтомобилиСуммаВсегоУпрНеРаспредПриИзмененииНаСервере();
	
КонецПроцедуры // АвтомобилиСуммаВсегоУпрНеРаспредПриИзменении()

// Обработчик события возникающегопри изменении данных реквизита "НормативнаяЦена" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура АвтомобилиНормативнаяЦенаПриИзмененииНаСервере()
	
	ТекСтрока = Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
	ОбработкаРеквизита(ТекСтрока, "Автомобили.НормативнаяЦена");
	
КонецПроцедуры // АвтомобилиНормативнаяЦенаПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "НормативнаяЦена".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура АвтомобилиНормативнаяЦенаПриИзменении(Элемент)
	
	АвтомобилиНормативнаяЦенаПриИзмененииНаСервере();
	
КонецПроцедуры // АвтомобилиНормативнаяЦенаПриИзменении()

// Обработчик события возникающегопри изменении данных реквизита "СебестоимостьУпр" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура АвтомобилиСебестоимостьУпрПриИзмененииНаСервере()
	
	ТекСтрока = Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
	ОбработкаРеквизита(ТекСтрока, "Автомобили.СебестоимостьУпр");
	
КонецПроцедуры // АвтомобилиСебестоимостьУпрПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "СебестоимостьУпр".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура АвтомобилиСебестоимостьУпрПриИзменении(Элемент)
	
	АвтомобилиСебестоимостьУпрПриИзмененииНаСервере();
	
КонецПроцедуры // АвтомобилиСебестоимостьУпрПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик команды "Перечитать"
//
&НаКлиенте
Процедура Перечитать(Команда)
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ПеречитатьВыполнение", ЭтотОбъект);
	
	ПоказатьВопрос(ОбработчикОповещения, Нстр("ru = 'Перезаполнение таблицы приведет к потере сделанных изменений.
	                                                |Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Обработчик команды "Заполнить"
//
&НаКлиенте
Процедура Заполнить(Команда)
	
	ЧтоТоЕсть = Ложь;
	Для Каждого ТекущаяСтрока Из Автомобили.ПолучитьЭлементы() Цикл
		Если ТекущаяСтрока.ПолучитьЭлементы().Количество() <> 0 Тогда
			ЧтоТоЕсть = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЧтоТоЕсть Тогда
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ЗаполнениеДереваНоменклатуры", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, Нстр("ru = 'Внимание! Табличная часть будет перезаполнена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ЗаполнениеПростымСпособом();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Распределить" на сервере
//
&НаСервере
Процедура РаспределитьНаСервере()
	
	ДеревоАвтомобилей = РеквизитФормыВЗначение("Автомобили");
	
	ПараметрыДанных = Новый Структура;
	ПараметрыДанных.Вставить("ДеревоЗначений",                   ДеревоАвтомобилей);
	ПараметрыДанных.Вставить("ДатаДокумента",                    Дата);
	ПараметрыДанных.Вставить("МетодыРаспределенияКатегорий",     МетодыРаспределенияКатегорий);
	ПараметрыДанных.Вставить("ПараметрУправленияРаспределением", ПараметрУправленияРаспределением);
	
	РаспределитьСуммыМоделейПоВариантамКомплектации(ПараметрыДанных);
	ПересчитатьНераспределеннуюСумму();
	
	ЗначениеВРеквизитФормы(ДеревоАвтомобилей, "Автомобили");
	
	ОбщегоНазначения.СообщитьПользователю(Нстр("ru = 'Распределение завершено.'"));
	
КонецПроцедуры // РаспределитьНаСервере()

// Обработчик события нажатия кнопки "Распределить" на клиенте
//
&НаКлиенте
Процедура Распределить(Команда)
	
	РаспределитьНаСервере();
	
КонецПроцедуры // Распределить()

// Обработчик события нажатия кнопки "ОК" на клиенте
//
&НаКлиенте
Процедура ОК(Команда)
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		
		ОбработкаОповещения = Новый ОписаниеОповещения("СформироватьИтогововуюТаблицу", ЭтотОбъект, "ЗакрытьОкно");
		ПоказатьВопрос(ОбработкаОповещения, Нстр("ru = 'Не выбран документ-основание! Закрыть форму без сохранения?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	СформироватьИтогововуюТаблицуАвтомобилей();
	
	РезультатВыбора = Новый Структура;
	РезультатВыбора.Вставить("ДокументОснование",                ДокументОснование);
	РезультатВыбора.Вставить("МетодыРаспределенияКатегорий",     МетодыРаспределенияКатегорий);
	РезультатВыбора.Вставить("ПараметрУправленияРаспределением", ПараметрУправленияРаспределением);
	
	// сохраним параметры простого заполнения
	РезультатВыбора.Вставить("КоличествоПериодов",          КоличествоПериодов);
	РезультатВыбора.Вставить("КоэффициентРостаПродаж",      КоэффициентРоста);
	РезультатВыбора.Вставить("ТипАнализа",                  ТипАнализа);
	РезультатВыбора.Вставить("КоэффициентСезонности",       КоэффициентСезонности);
	РезультатВыбора.Вставить("ПоказательПланирования",      ПоказательПланирования);
	РезультатВыбора.Вставить("СпособОкругления",            СпособОкругления);
	РезультатВыбора.Вставить("СмещениеПланирования",        СмещениеПланирования);
	РезультатВыбора.Вставить("КоличествоСезонов",           КоличествоСезонов);
	РезультатВыбора.Вставить("НеУчитыватьПериодыБезДанных", НеУчитыватьПериодыБезДанных);
	
	ТаблицаРезультата = Новый Массив;
	Для Каждого ТекСтрока Из Результат Цикл
		
		НоваяСтрока = Новый Структура("Модель, ВариантКомплектации, Количество, Цена, СуммаВсегоУпр, СуммаНДС, СтавкаНДС", 
		                              ТекСтрока.Модель, ТекСтрока.ВариантКомплектации, ТекСтрока.Количество, ТекСтрока.Цена, ТекСтрока.СуммаВсегоУпр, ТекСтрока.СуммаНДС, ТекСтрока.Ставка);
		ТаблицаРезультата.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	РезультатВыбора.Вставить("ТаблицаАвтомобилей", ТаблицаРезультата);
	РезультатВыбора.Вставить("СпособПоследнегоЗаполнения", 2);
	
	Закрыть(РезультатВыбора);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура для управления доступностью/видимостью элементов диалога.
//
// Параметры:
//  Элемент - строка - передает имя элемента формы.
//
&НаСервере
Процедура УправлениеОтображением(Элемент="")
	
	Если Элемент="ДокументОснование" Тогда
		ПризнакРаспределения = Ложь;
		Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
			// Свернем все
			УправлениеОтображением("СвернутьПанель");
			
			// Отобразим таблицу значений
			УправлениеОтображением("ОтобразитьТаблицу");
			
			// Доступность командной панели
			УправлениеОтображением("ПанельНеДоступна");
		ИначеЕсли ДокументОснование.ХозОперация = Справочники.ХозОперации.БюджетПродажПоМоделям
			       И ХозОперация = Справочники.ХозОперации.БюджетПродажПоВариантамКомплектации Тогда
			
			// Развернуть 
			УправлениеОтображением("РазвернутьПанель");
			
			// Таблицу сделать деревом значений
			УправлениеОтображением("ОтобразитьДерево");
			
			// Доступность командной панели
			УправлениеОтображением("ПанельДоступна");
			
			ПризнакРаспределения = Истина;
		Иначе
			// Свернуть
			УправлениеОтображением("СвернутьПанель");
			
			// Отобразим таблицу значений
			УправлениеОтображением("ОтобразитьТаблицу"); 
			
			// Доступность командной панели
			УправлениеОтображением("ПанельНеДоступна"); 
		КонецЕсли;
		
	ИначеЕсли Элемент="СвернутьПанель" Тогда
		Элементы.МетодРаспределенияИзмеряемыйПоказатель.Доступность = Ложь;
	ИначеЕсли Элемент="РазвернутьПанель" Тогда
		Элементы.МетодРаспределенияИзмеряемыйПоказатель.Доступность = Истина;
	ИначеЕсли Элемент="ОтобразитьДерево" Тогда
		Элементы.Автомобили.Отображение = ОтображениеТаблицы.Дерево;
	ИначеЕсли Элемент="ОтобразитьТаблицу" Тогда
		Элементы.Автомобили.Отображение = ОтображениеТаблицы.Список;
	ИначеЕсли Элемент="ПанельНеДоступна" Тогда
		Элементы.Автомобили.ИзменятьСоставСтрок = Ложь;
		Элементы.Автомобили.ТолькоПросмотр      = Истина;
		Элементы.АвтомобилиКоманднаяПанель.Доступность = Ложь;
		
		// Разберемся с колонками
		Элементы.АвтомобилиСуммаВсегоУпр.Видимость = Ложь;
		
	ИначеЕсли Элемент="ПанельДоступна" Тогда
		
		Элементы.Автомобили.ИзменятьСоставСтрок = Истина;
		Элементы.Автомобили.ТолькоПросмотр      = Ложь;
		Элементы.АвтомобилиКоманднаяПанель.Доступность = Истина;
		
		// Разберемся с колонками
		Элементы.АвтомобилиСуммаВсегоУпр.Видимость = Истина;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры // УправлениеОтображением()

// Заполняет таблицу по табличной части документа основания
//
&НаСервере
Процедура ЗаполнитьТабличноеПоле()
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	 ДокументПоВариантамКомплектации  = (ХозОперация = Справочники.ХозОперации.БюджетПродажПоВариантамКомплектации);
	 ОснованиеПоВариантамКомплектации = ДокументОснование.ХозОперация = Справочники.ХозОперации.БюджетПродажПоВариантамКомплектации;
	Если ДокументПоВариантамКомплектации И НЕ ОснованиеПоВариантамКомплектации Тогда
		ДеревоДвухуровневое = Истина;
	Иначе
		ДеревоДвухуровневое = Ложь;
	КонецЕсли;
	
	ДеревоАвтомобилей = РеквизитФормыВЗначение("Автомобили");
	
	Автомобили.ПолучитьЭлементы().Очистить();
	
	Если ОснованиеПоВариантамКомплектации Тогда
		ИмяИзмерения = "ВариантКомплектации";
		Представление = "ТаблицаДанных.ВариантКомплектации.Владелец.Наименование + "" ("" + ТаблицаДанных.ВариантКомплектации.Наименование+"")""";
	Иначе
		ИмяИзмерения = "Модель";
		Представление = "ТаблицаДанных.Модель.Наименование";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	"+Представление+" КАК Представление,
	|	ТаблицаДанных."+ИмяИзмерения+" КАК Автомобиль,
	|	ТаблицаДанных.Цена,
	|	ТаблицаДанных.Количество,"+?(ДеревоДвухуровневое, "
	|	ТаблицаДанных.СуммаВсегоУпр КАК СуммаВсегоУпр,
	|	0 КАК СуммаВсегоУпрНеРаспред,","
	|	0 КАК СуммаВсегоУпр,
	|	ТаблицаДанных.СуммаВсегоУпр КАК СуммаВсегоУпрНеРаспред,")+"
	|	ТаблицаДанных.СуммаНДС
	|ИЗ
	|	Документ."+ДокументОснование.Метаданные().Имя+".Автомобили КАК ТаблицаДанных
	|ГДЕ
	|	ТаблицаДанных.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	"+Представление;

	Запрос.УстановитьПараметр("Ссылка",        ДокументОснование);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("Подразделение", ПодразделениеКомпании);
	Выборка = Запрос.Выполнить().Выбрать();
	Сч = 1;
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Автомобили.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.СтавкаНДС = Строка(ОсновнаяСтавкаНДС) + "%";
		НоваяСтрока.Ставка = ОсновнаяСтавкаНДС;
		Сч = Сч + 1;
	КонецЦикла;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры // ЗаполнитьТабличноеПоле()

// Формирвание параметров выбора документа основания
//
&НаСервере
Процедура НастроитьПараметрыВыбораДокументаОснование()
	
	ПараметрыПериода = Новый Структура;
	ПараметрыПериода.Вставить("ДатаИзПериода", ДатаПланирования);
	ПараметрыПериода.Вставить("Периодичность", СценарийПланирования.Периодичность);
	ПараметрыПериода.Вставить("Действие", 0);
	ПланированиеСервер.ПолучитьДатыПланируемогоПериода(ПараметрыПериода);
	
	// Отбор по периодичности
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СценарииПланирования.Ссылка
	|ИЗ
	|	Справочник.СценарииПланирования КАК СценарииПланирования
	|ГДЕ
	|	СценарииПланирования.ЭтоГруппа = ЛОЖЬ
	|	И СценарииПланирования.Периодичность = &Периодичность";
	Запрос.УстановитьПараметр("Периодичность", СценарийПланирования.Периодичность);
	СписокСценарияПланирования.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Пересчитывает значение нераспределенной суммы
//
// Параметры
//  Строка  - строка дерева значений, которой принадлежит выбранная коллекция строк.
//
&НаСервере
Процедура ПересчитатьНераспределеннуюСумму(Строка = "")
	
	Если Строка = "" Тогда
		
		Для Каждого ТекСтрока Из Автомобили.ПолучитьЭлементы() Цикл
			
			СуммаВсегоУпрНеРаспред = 0;
			СебестоимостьУпр  = 0;
			
			Для Каждого ТекАвтомобиль Из ТекСтрока.ПолучитьЭлементы() Цикл
				
				СуммаВсегоУпрНеРаспред = СуммаВсегоУпрНеРаспред + ТекАвтомобиль.СуммаВсегоУпрНеРаспред;
				СебестоимостьУпр       = СебестоимостьУпр + ТекАвтомобиль.СебестоимостьУпр;
				
			КонецЦикла;
			
			ТекСтрока.СуммаВсегоУпрНеРаспред = СуммаВсегоУпрНеРаспред;
			ТекСтрока.СебестоимостьУпр       = СебестоимостьУпр;
			
		КонецЦикла;
		
	Иначе
		// Только по одному типу, для скорости
		Строка.СуммаВсегоУпрНеРаспред = Строка.Строки.Итог("СуммаВсегоУпрНеРаспред");
		Строка.СебестоимостьУпр       = Строка.Строки.Итог("СебестоимостьУпр");
		
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьНераспределеннуюСумму()

// Обработка выбранного реквизита, вызывается обработчиками события "ПриИзменении"
// реквизитов ДереваЗначений "Автомобили".
//
// Параметры:
//  Реквизит  - Строка - передает имя реквизита 
//  Данные    - Строка дерева значений.
//
&НаСервере
Процедура ОбработкаРеквизита(Данные, Реквизит = "")
	
	Если Реквизит = "Автомобили.Автомобиль" Тогда
		
		Данные.Цена = ЦенообразованиеСервер.ПолучитьЦенуАвтомобиля(
			ТипЦен,
			Данные.Автомобиль,
			,
			Дата,
			Константы.ВалютаУправленческогоУчетаКомпании.Получить());
		
		ОбработкаРеквизита(Данные, "Автомобили.Цена");
		
	ИначеЕсли Реквизит = "Автомобили.Цена" Тогда
		
		СтараяСуммаУпр = Данные.СуммаВсегоУпрНеРаспред;
		НоваяСуммаУпр  = Данные.Количество * Данные.Цена;
		
		Данные.СуммаВсегоУпрНеРаспред = НоваяСуммаУпр;
		
		// Получим курсы упр. и рег. валюты на дату документа
		КоэфПересчета   = ПланированиеСервер.ПолучитьКоэффициентПересчетаВалют(Дата);
		Данные.СуммаНДС = Данные.СуммаВсегоУпрНеРаспред * КоэфПересчета * ОсновнаяСтавкаНДС / 100;
		
	ИначеЕсли Реквизит = "Автомобили.Количество" Тогда
		ОбработкаРеквизита(Данные, "Автомобили.Цена");
		
	ИначеЕсли Реквизит = "Автомобили.СуммаВсегоУпрНеРаспред" Тогда
		ХОПоВариантамКомплектации = (ХозОперация = Справочники.ХозОперации.БюджетПродажПоВариантамКомплектации);
		
		КоэфПересчета    = ПланированиеСервер.ПолучитьКоэффициентПересчетаВалют(Дата);
		Данные.СуммаНДС  = Данные.СуммаВсегоУпр * КоэфПересчета * ОсновнаяСтавкаНДС / 100;
		
		Если ХОПоВариантамКомплектации Тогда
			Если Данные.Количество = 0 Тогда
				Данные.Количество = 1;
			КонецЕсли;
			Данные.Цена = Данные.СуммаВсегоУпрНеРаспред / Данные.Количество;
		КонецЕсли;
		
	ИначеЕсли Реквизит = "Автомобили.СебестоимостьУпр" Тогда
		Если Данные.Количество = 0 Тогда
			Данные.Количество = 1;
		КонецЕсли;
		Данные.НормативнаяЦена = Данные.СебестоимостьУпр / Данные.Количество;
	ИначеЕсли Реквизит = "Автомобили.НормативнаяЦена" Тогда
		Если Данные.Количество = 0 Тогда
			Данные.Количество = 1;
		КонецЕсли;
		Данные.СебестоимостьУпр = Данные.НормативнаяЦена * Данные.Количество;
	КонецЕсли;
	
	// Пересчет
	Если ТипЗнч(Данные) = Тип("ДанныеФормыЭлементДерева") Тогда
		Если ТипЗнч(Данные.Автомобиль) = Тип("СправочникСсылка.ВариантыКомплектации") Тогда
			ПересчитатьНераспределеннуюСумму();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРеквизита()

// Обработка результата вопроса команды "Перечитать"
//
&НаКлиенте
Процедура ПеречитатьВыполнение(Результат, ДополнителныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТабличноеПоле();
	КонецЕсли;
	
КонецПроцедуры // ПеречитатьВыполнение()

// Обработчик отчистки дерева значений "Автомобили"
//
&НаКлиенте
Процедура ЗаполнениеДереваНоменклатуры(Результат, ДополнительныеДействия) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнениеПростымСпособом();
	
Конецпроцедуры

// Обработчик заполнения дерева значений "Автомобили"
//
&НаКлиенте
Процедура ЗаполнениеПростымСпособом()
	
	// очистим номенклатурные позиции
	Для каждого ТекСтрока Из Автомобили.ПолучитьЭлементы() Цикл
		ТекСтрока.ПолучитьЭлементы().Очистить();
	КонецЦикла;
	
	Список = Новый СписокЗначений;
	Для Каждого ТекСтрока Из Автомобили.ПолучитьЭлементы() Цикл
		Список.Добавить(ТекСтрока.Автомобиль);
	КонецЦикла;
	
	// Параметры формы
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФормаМастера", Истина);
	ПараметрыФормы.Вставить("СценарийПланирования",        СценарийПланирования);
	ПараметрыФормы.Вставить("КоличествоПериодов",          КоличествоПериодов);
	ПараметрыФормы.Вставить("КоэффициентРоста",            КоэффициентРоста);
	ПараметрыФормы.Вставить("КоэффициентСезонности",       КоэффициентСезонности);
	ПараметрыФормы.Вставить("ТипАнализа",                  ТипАнализа);
	ПараметрыФормы.Вставить("ПоказательПланирования",      ПоказательПланирования);
	ПараметрыФормы.Вставить("СпособОкругления",            СпособОкругления);
	ПараметрыФормы.Вставить("НеУчитыватьПериодыБезДанных", НеУчитыватьПериодыБезДанных);
	ПараметрыФормы.Вставить("КоличествоСезонов",           КоличествоСезонов);
	ПараметрыФормы.Вставить("СмещениеПланирования",        СмещениеПланирования);
	ПараметрыФормы.Вставить("ТипНоменклатуры",             Список);
	ПараметрыФормы.Вставить("Дата",                        Дата);
	ПараметрыФормы.Вставить("ТипЦен",                      ТипЦен);
	ПараметрыФормы.Вставить("КурсДокумента",               КурсДокумента);
	ПараметрыФормы.Вставить("ДокументОснование",           ДокументОснование);
	ПараметрыФормы.Вставить("ДатаПланирования",            ДатаПланирования);
	ПараметрыФормы.Вставить("ПланированиеСебестоимости",   ПланированиеСебестоимости);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ВыводРезультатаЗаполненияАвтомобилями", ЭтотОбъект);
	
	ОткрытьФорму("Документ.БюджетПродажАвтомобилей.Форма.ФормаДляЗаполненияПростымСпособом", ПараметрыФормы, ЭтотОбъект, ,,, ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ЗаполнениеПростымСпособом()

// Обработчик загрузки сформированного набора данных по номенклатуре в контексте сервера.
//
&НаСервере
Процедура ВыводРезультатаЗаполненияАвтомобилямиНаСервере(ДанныеАвтомобилей)
	
	ДеревоАвтомобилей = РеквизитФормыВЗначение("Автомобили");
	
	Для Каждого ТекущаяСтрока Из ДанныеАвтомобилей Цикл
		
		НайденнаяСтрока = ДеревоАвтомобилей.Строки.Найти(ТекущаяСтрока.Модель, "Автомобиль");
		
		Если НайденнаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НайденнаяСтрока.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.СуммаВсегоУпрНеРаспред = ТекущаяСтрока.СуммаВсегоУпр;
		НоваяСтрока.Автомобиль = ТекущаяСтрока.ВариантКомплектации;
		
		НоваяСтрока.СтавкаНДС = Строка(ОсновнаяСтавкаНДС) + "%";
		НоваяСтрока.Ставка    = ОсновнаяСтавкаНДС;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоАвтомобилей, "Автомобили");
	
	// Пересчитаем итоговую нераспределенную сумму
	ПересчитатьНераспределеннуюСумму();
	
КонецПроцедуры

// Обработчик загрузки сформированного набора данных по номенклатуре
//
&НаКлиенте
Процедура ВыводРезультатаЗаполненияАвтомобилями(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбора)<>Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РезультатВыбора);
	
	ВыводРезультатаЗаполненияАвтомобилямиНаСервере(РезультатВыбора.ТаблицаАвтомобилей);
	
КонецПроцедуры // ВывдРезультатаЗаполненияНоменлатуры()

//  Обработчик формирования результирующей таблицы
//
&НаСервере
Процедура СформироватьИтогововуюТаблицуАвтомобилей()
	
	ДвухУровневоеДерево = ДокументОснование.ХозОперация = Справочники.ХозОперации.БюджетПродажПоМоделям И ХозОперация = Справочники.ХозОперации.БюджетПродажПоВариантамКомплектации;
	ДатаДокумента       = Дата;
	ДеревоЗначений      = РеквизитФормыВЗначение("Автомобили");
	
	Результат.Очистить();
	
	// Найдем коэффициент пересчета валют
	КоэффициентПересчета = РаботаСКурсамиВалютПлатформа.ПолучитьКоэффициентПересчетаВалют(ДатаДокумента);
	
	// Копируем все в табличную часть документа
	Если ДвухУровневоеДерево Тогда
		// Подменим имя колонки суммы
		ДеревоЗначений.Колонки.Удалить("СуммаВсегоУпр");
		ДеревоЗначений.Колонки.СуммаВсегоУпрНеРаспред.Имя = "СуммаВсегоУпр"; 
		Для Каждого стрМодель Из ДеревоЗначений.Строки Цикл
			Для Каждого стрВариантКомплектации Из стрМодель.Строки Цикл
				НовСтрока = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, стрВариантКомплектации);
				НовСтрока.Модель=стрМодель.Автомобиль;
				НовСтрока.ВариантКомплектации=стрВариантКомплектации.Автомобиль;
			КонецЦикла;
		КонецЦикла;
	Иначе
		// Подменим имя колонки суммы
		ДеревоЗначений.Колонки.Удалить("СуммаВсегоУпр");
		ДеревоЗначений.Колонки.СуммаВсегоУпрНеРаспред.Имя = "СуммаВсегоУпр";
		
		Если ХозОперация = Справочники.ХозОперации.БюджетПродажПоВариантамКомплектации Тогда
			Для каждого стрАвтомобиль Из ДеревоЗначений.Строки Цикл  
				НовСтрока = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, стрАвтомобиль);
				НовСтрока.Модель = стрАвтомобиль.Автомобиль.Владелец;
				НовСтрока.ВариантКомплектации = стрАвтомобиль.Автомобиль;
			КонецЦикла;
		Иначе
			Для каждого стрАвтомобиль Из ДеревоЗначений.Строки Цикл  
				НовСтрока = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, стрАвтомобиль);
				НовСтрока.Модель=стрАвтомобиль.Автомобиль;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СформироватьИтогововуюТаблицуАвтомобилей()

// Обработчик для формирования условного оформления для дерева значений "Автомобили".
//
&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭтотОбъект.УсловноеОформление.Элементы.Очистить();
	
	Если ПризнакРаспределения Тогда
		
		Для Каждого ТекЭлемент Из Автомобили.ПолучитьЭлементы() Цикл
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Автомобили");
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автомобили.Автомобиль");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = ТекЭлемент.Автомобиль;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.АкварельноСиний);
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвтомобилиАвтомобиль.Имя);
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвтомобилиКоличество.Имя);
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвтомобилиЦена.Имя);
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвтомобилиСуммаВсегоУпрНеРаспред.Имя);
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвтомобилиСуммаНДС.Имя);
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвтомобилиНормативнаяЦена.Имя);
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвтомобилиСебестоимостьУпр.Имя);
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автомобили.Автомобиль");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = ТекЭлемент.Автомобиль;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвтомобилиСуммаВсегоУпрНеРаспред.Имя);
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автомобили.Автомобиль");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = ТекЭлемент.Автомобиль;
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автомобили.СуммаВсегоУпр");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
			ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Автомобили.СуммаВсегоУпрНеРаспред");
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Синий);
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвтомобилиСуммаВсегоУпрНеРаспред.Имя);
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автомобили.Автомобиль");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = ТекЭлемент.Автомобиль;
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автомобили.СуммаВсегоУпр");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
			ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Автомобили.СуммаВсегоУпрНеРаспред");
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвтомобилиСуммаВсегоУпр.Имя);
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автомобили.Автомобиль");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = ТекЭлемент.Автомобиль;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для загрузки результата 
//
&НаКлиенте
Процедура СформироватьИтогововуюТаблицу(Результат, ДопонительныеПраметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры // СформироватьИтогововуюТаблицу()

&НаСервере
Процедура РаспределитьСуммыМоделейПоВариантамКомплектации(Параметры)
	
	ДеревоАвтомобилей = РеквизитФормыВЗначение("Автомобили");
	
	ПараметрыРаспределения = Новый Структура;	
	ПараметрыРаспределения.Вставить("МетодыРаспределенияКатегорий"    , МетодыРаспределенияКатегорий);
	ПараметрыРаспределения.Вставить("ПараметрУправленияРаспределением", ПараметрУправленияРаспределением);
	ПараметрыРаспределения.Вставить("КоэфПересчета",                    ПланированиеСервер.ПолучитьКоэффициентПересчетаВалют(Дата));
	ПараметрыРаспределения.Вставить("ИмяТабличнойЧасти",                "Автомобили");
	ПараметрыРаспределения.Вставить("ЕстьВесовой",                      Ложь);
	ПараметрыРаспределения.Вставить("ЕстьСебестоимостьУпр",             Истина);
	
	Для каждого ТекСтрока Из ДеревоАвтомобилей.Строки Цикл
		ПараметрыРаспределения.Вставить("СтрокаТипНоменклатуры", ТекСтрока);
		ПланированиеСервер.РаспределитьВПределахТипаНоменклатуры(ПараметрыРаспределения);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоАвтомобилей, "Автомобили");
	
КонецПроцедуры // РаспределитьСуммыМоделейПоВариантамКомплектации()

// Функция для вывода модели по текущей строке дерева "Автомобили"
//
&НаСервере
Функция ПолучитьМодель()
	
	СтрокаМодель = Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока).ПолучитьРодителя();
	
	Если СтрокаМодель = Неопределено Тогда
		Возврат Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока).Автомобиль;
	Иначе
		Возврат СтрокаМодель.Автомобиль;
	КонецЕсли;
	
КонецФункции // ПолучитьТипНоменклатуры()

#КонецОбласти

