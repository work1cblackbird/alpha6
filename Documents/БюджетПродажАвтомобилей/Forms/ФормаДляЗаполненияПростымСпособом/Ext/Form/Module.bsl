///////////////////////////////////////////////////////////////////////////////
// Модуль формы "Заполнение простым способом"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СценарийПланирования        = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СценарийПланирования",        Неопределено);
	ФормаМастера                = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ФормаМастера",                Ложь);
	КоличествоПериодов          = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КоличествоПериодов",          0);
	КоэффициентРоста            = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КоэффициентРоста",            0);
	КоэффициентСезонности       = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КоэффициентСезонности",       0);
	ТипАнализа                  = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ТипАнализа",                  Неопределено);
	ПоказательПланирования      = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПоказательПланирования",      Неопределено);
	СпособОкругления            = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СпособОкругления",            0);
	НеУчитыватьПериодыБезДанных = ПолучитьЗначениеПараметраСтруктуры(Параметры, "НеУчитыватьПериодыБезДанных", Ложь);
	КоличествоСезонов           = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КоличествоСезонов",           0);
	СмещениеПланирования        = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СмещениеПланирования",        0);
	ПланированиеСебестоимости   = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПланированиеСебестоимости",   Ложь);
	
	Если НЕ ФормаМастера Тогда
		ХозОперация    = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ХозОперация", Справочники.ХозОперации.ПустаяСсылка());
		ПоМоделям      = ХозОперация = Справочники.ХозОперации.БюджетПродажПоМоделям;
		ВалютаУпрУчета = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		Подразделение  = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПодразделениеКомпании", Справочники.ПодразделенияКомпании.ПустаяСсылка());
	Иначе
		ДокументОснование = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ДокументОснование", Неопределено);
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			Подразделение = ДокументОснование.ПодразделениеКомпании;
		КонецЕсли;
	КонецЕсли;
	
	ДатаПланирования = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ДатаПланирования", Дата('00010101'));
	Периодичность    = СценарийПланирования.Периодичность;
	ТипЦен           = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ТипЦен", Справочники.ТипыЦен.ПустаяСсылка());
	ДатаДокумента    = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Дата", Дата('00010101'));
	КурсДокумента    = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КурсДокумента", 0);
	
	Если НЕ ЗначениеЗаполнено(СценарийПланирования) ИЛИ НЕ ЗначениеЗаполнено(СценарийПланирования.Периодичность) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			Нстр("ru = 'Не выбран сценарий планирования, либо у выбранного сценария не указана периодичность.'"), 
			, , , Отказ
		);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипАнализа) Тогда
		ТипАнализа = Перечисления.ТипыАнализа.ПоФактическимДаннымПродаж;
	КонецЕсли;
	
	Если КоличествоПериодов=0 Тогда
		КоличествоПериодов=3;
	КонецЕсли;
	
	Если КоэффициентРоста=0 Тогда
		КоэффициентРоста = 1;
	КонецЕсли;
	
	Если КоэффициентСезонности=0 Тогда
		КоэффициентСезонности=1;
	КонецЕсли;
	
	Если СмещениеПланирования=0 Тогда
		СмещениеПланирования=1;
	КонецЕсли;
	
	Если КоличествоСезонов=0 Тогда
		КоличествоСезонов=1;
	КонецЕсли;
	
	НастроитьПолеОтбора(Подразделение);
	
	ИзменитьФильтр();
	
	ПараметрыТипаЦен = Новый Структура;
	ПараметрыТипаЦен.Вставить("ТипЦен",                    ТипЦен);
	ПараметрыТипаЦен.Вставить("КурсДокумента",             КурсДокумента);
	ПараметрыТипаЦен.Вставить("НадписьИнформацияОТипеЦен", Элементы.НадписьИнформацияОТипеЦен);
	ПланированиеСервер.СформироватьНадписьТипаЦены(ПараметрыТипаЦен);
	
	ВывестиПредставлениеПериода();
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при изменении данных реквизита "ПоказательПланирования".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ПоказательПланированияПриИзменении(Элемент)
	
	ИзменитьФильтр();
	
КонецПроцедуры // ПоказательПланированияПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "ТипАнализа".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ТипАнализаПриИзменении(Элемент)
	
	ИзменитьФильтр();
	
КонецПроцедуры // ТипАнализаПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "КоличествоСезонов".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура КоличествоСезоновПриИзменении(Элемент)
	
	КоличествоСезоновПриИзмененииНаСервере();
	
КонецПроцедуры // КоличествоСезоновПриИзменении()

// Обработчик события возникающегопри изменении данных реквизита "КоличествоСезонов" в контексте сервера.
//
&НаСервере
Процедура КоличествоСезоновПриИзмененииНаСервере()
	
	ПланированиеСервер.ПроверкаКоличестваСезонов(ЭтотОбъект, Периодичность);
	ВывестиПредставлениеПериода();
	
КонецПроцедуры // КоличествоСезоновПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "СмещениеПланирования".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура СмещениеПланированияПриИзменении(Элемент)
	
	ВывестиПредставлениеПериода();
	
КонецПроцедуры // СмещениеПланированияПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "КоличествоПериодов".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура КоличествоПериодовПриИзменении(Элемент)
	
	КоличествоПериодовПриИзмененииНаСервере();
	
КонецПроцедуры // КоличествоПериодовПриИзменении()

// Обработчик события возникающегопри изменении данных реквизита "КоличествоПериодов" в контексте сервера.
//
&НаСервере
Процедура КоличествоПериодовПриИзмененииНаСервере()
	
	ПланированиеСервер.ПроверкаКоличестваСезонов(ЭтотОбъект, Периодичность);
	ВывестиПредставлениеПериода();
	
КонецПроцедуры // КоличествоПериодовПриИзмененииНаСервере()

// Обработчик события события возникающего на клиенте при регулировании поля ввода "КоэффициентРоста".
//
&НаКлиенте
Процедура КоэффициентРостаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КоэффициентРоста = Макс(КоэффициентРоста + Направление*0.01, 0);
	
КонецПроцедуры // КоэффициентРостаРегулирование()

// Обработчик события события возникающего на клиенте при регулировании поля ввода "КоэффициентСезонности".
//
&НаКлиенте
Процедура КоэффициентСезонностиРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КоэффициентСезонности = Макс(КоэффициентСезонности + Направление*0.01, 0);
	
КонецПроцедуры // КоэффициентСезонностиРегулирование()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик выполнения команды "Выбрать" на сервере
//
&НаСервере
Процедура ВыбратьНаСервере()
	
	ВВалютеУчета  = ТипЦен.ВВалютеУчета;
	РабочийТипЦен = ТипЦен;
	ПоКоличеству  = ПоказательПланирования;
	КоличествоПрошлыхПериодов = КоличествоПериодов*КоличествоСезонов;
	
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыЗапроса();
	ЛеваяЧастьПути = ?(ТипАнализа = Перечисления.ТипыАнализа.ПоФактическимДаннымПродаж ИЛИ ТипАнализа = Перечисления.ТипыАнализа.ПоФактическимДаннымЗакупок, "Автомобиль.", "");
	ПраваяЧастьПути = ?(ПоМоделям, "Модель", "ВариантКомплектации");
	МаксКоличествоПериодов = ПланированиеСервер.ПолучитьМаксимальноеКоличествоПериодов(ЭтотОбъект, ДополнительныеПараметры, ЛеваяЧастьПути+ПраваяЧастьПути);
	
	Если НеУчитыватьПериодыБезДанных Тогда
		
		Если МаксКоличествоПериодов = 0 Тогда
			Если ТипАнализа = Перечисления.ТипыАнализа.ПоФактическимДаннымПродаж Тогда
				ТекстТипАнализа = "по продажам";
			ИначеЕсли ТипАнализа=Перечисления.ТипыАнализа.ПоРанееПланируемымДаннымПродаж Тогда
				ТекстТипАнализа = "по ранее планируемым данным продаж";
			КонецЕсли;
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(Нстр("ru = 'Для анализа %1 и заданного периода планирования нет данных.'"), ТекстТипАнализа)
			);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли (((КоличествоСезонов - 1) * 12) + (КоличествоПериодов)) > МаксКоличествоПериодов Тогда
		
		Если ТипАнализа = Перечисления.ТипыАнализа.ПоФактическимДаннымПродаж Тогда
			ТекстТипАнализа = "по продажам";
		ИначеЕсли ТипАнализа= Перечисления.ТипыАнализа.ПоРанееПланируемымДаннымПродаж Тогда
			ТекстТипАнализа = "по ранее планируемым данным продаж";
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				Нстр("ru = 'Максимально допустимое количество периодов для анализа %1 для текущего планируемого периода: %2 %3.'"),
				ТекстТипАнализа,
				МаксКоличествоПериодов,
				ПланированиеСервер.ВернутьСтрокуКоличествоПериодовДляАнализа(МаксКоличествоПериодов, Периодичность)
			)
		);
		КоличествоПериодов = Мин(МаксКоличествоПериодов, КоличествоПериодов);
		СмещениеПланирования = Мин(МаксКоличествоПериодов - КоличествоПериодов + 1, СмещениеПланирования);
		КоличествоСезонов = Мин(КоличествоСезонов, Макс(Цел(МаксКоличествоПериодов / 12),1));
		ВывестиПредставлениеПериода();
		Возврат;
	КонецЕсли;
	
	УчитыватьСебестоимость = ПланированиеСебестоимости;
	
	ТекстЦенаАвтомобиля = "ЦеныАвтомобилей.Цена";
	ТекстЦенаМодели = "ЦеныМоделей.Цена";
	// Если расчетная цена получим базовую цену
	Если РабочийТипЦен.Рассчитывается Тогда
		Пока РабочийТипЦен.Рассчитывается Цикл
			ТекстЦенаАвтомобиля = "("+ТекстЦенаАвтомобиля+"+"+ТекстЦенаАвтомобиля+"/100*"+РабочийТипЦен.ПроцентСкидкиНаценки+")";
			ТекстЦенаМодели = "("+ТекстЦенаМодели+"+"+ТекстЦенаМодели+"/100*"+РабочийТипЦен.ПроцентСкидкиНаценки+")";
			РабочийТипЦен = РабочийТипЦен.БазовыйТипЦен;
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса="";
	ТекстОтбора = "";
	ТекстОтбораДопТаблиц = "";
	Если ДополнительныеПараметры.Свойство("ОтборПоПодразделению") Тогда
		ТекстОтбора = Символы.ПС + " И " + ДополнительныеПараметры.ОтборПоПодразделению;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ДопОтборы") Тогда
		ТекстОтбора = ТекстОтбора + Символы.ПС + "И " + ДополнительныеПараметры.ДопОтборы.ТекстОбора;
	КонецЕсли;
	
	ТекстОтбораЦенАвтомобиля = "";
	ТекстОтбораЦенМоделей = "";
	Если ДополнительныеПараметры.Свойство("ОтборыДляЦенАвтомобиля") Тогда
		ТекстОтбораЦенАвтомобиля = Символы.ПС+"И "+ДополнительныеПараметры.ОтборыДляЦенАвтомобиля.ТекстОбора;
		ТекстОтбораЦенМоделей	 = Символы.ПС+"И "+ДополнительныеПараметры.ОтборыДляЦенМодели.ТекстОбора;
	КонецЕсли;
	
	СтруктураПолей = Новый Структура;
	СтрПериодичность = СокрЛП(Периодичность);
	
	Если ТипАнализа = Перечисления.ТипыАнализа.ПоФактическимДаннымПродаж Тогда
		
		// ПО РЕГИСТРУ ПРОДАЖ
		СтруктураПолей.Вставить("Поля", Новый Структура("ВариантКомплектации, Модель"));
		СтруктураПолей.Вставить("Количество");
		
		Если УчитыватьСебестоимость Тогда
			СтруктураПолей.Вставить("СебестоимостьУпр");
		КонецЕсли;
		
		ТекстЗапроса ="
		|	ВЫБРАТЬ
		|	ТаблицаДанных.Автомобиль.ВариантКомплектации КАК ВариантКомплектации,
		|	ТаблицаДанных.Автомобиль.Модель КАК Модель,
		|	ТаблицаДанных.Автомобиль.Модель.Наименование + ЕСТЬNULL("" ("" + ТаблицаДанных.Автомобиль.ВариантКомплектации.Наименование+"")"","""") КАК Представление,
		|	НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, "+СтрПериодичность+") КАК Период,
		|	"+Строка(Справочники.СтавкиНДС.ОсновнаяСтавкаНДС.Ставка)+" КАК Ставка,
		|	СУММА(ТаблицаДанных.Количество) КАК Количество,
		|	СУММА(ТаблицаДанных.СуммаУпр) КАК СуммаУпр,
		|	0 КАК СуммаНДС,
		|	СУММА(ТаблицаДанных.СебестоимостьУпр) КАК СебестоимостьУпр,
		|	СРЕДНЕЕ(ВЫБОР КОГДА ЕСТЬNULL("+ТекстЦенаАвтомобиля+", 0) <> 0 ТОГДА
		|		"+ТекстЦенаАвтомобиля+" * ЕСТЬNULL(КурсыВалютАвтомобиля.Курс, 0) / ЕСТЬNULL(КурсыВалютАвтомобиля.Кратность, 1)  / &КурсУпрВалюты
		|	КОГДА ЕСТЬNULL("+ТекстЦенаМодели+", 0) <> 0 ТОГДА
		|		"+ТекстЦенаМодели+" * ЕСТЬNULL(КурсыВалютМодели.Курс, 0) / ЕСТЬNULL(КурсыВалютМодели.Кратность, 1) / &КурсУпрВалюты
		|	КОГДА ТаблицаДанных.Количество<>0 ТОГДА
		|		ТаблицаДанных.СуммаУпр / ТаблицаДанных.Количество
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ) КАК Цена,
		|	"+Строка(СпособОкругления)+" КАК СпособОкругления
		|
		|ПОМЕСТИТЬ 
		|	ТаблицаРегистра
		|
		|ИЗ
		|	РегистрНакопления.ПродажиАвтомобилей КАК ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныАвтомобилей.СрезПоследних(&ДатаДокумента, ТипЦен = &ТипЦен И Автомобиль ССЫЛКА Справочник.Автомобили И ВариантКомплектации = ЗНАЧЕНИЕ(Справочник.ВариантыКомплектации.ПустаяСсылка) "+ТекстОтбораЦенАвтомобиля+") КАК ЦеныАвтомобилей
		|			ПО ТаблицаДанных.Автомобиль = ЦеныАвтомобилей.Автомобиль"+?(ВВалютеУчета,"
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютАвтомобиля
		|			ПО ТаблицаДанных.Автомобиль.ВалютаУчета = КурсыВалютАвтомобиля.Валюта","
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВыбВалютаЦены) КАК КурсыВалютАвтомобиля
		|			ПО ИСТИНА")+"
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныАвтомобилей.СрезПоследних(&ДатаДокумента, ТипЦен = &ТипЦен И Автомобиль ССЫЛКА Справочник.Модели" + ТекстОтбораЦенМоделей + ") КАК ЦеныМоделей
		|			ПО ТаблицаДанных.Автомобиль.Модель = ЦеныМоделей.Автомобиль
		|			И ТаблицаДанных.Автомобиль.ВариантКомплектации = ЦеныМоделей.ВариантКомплектации"+?(ВВалютеУчета,"
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютМодели
		|			ПО ТаблицаДанных.Автомобиль.ВариантКомплектации.ВалютаУчета = КурсыВалютАвтомобиля.Валюта","
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВыбВалютаЦены) КАК КурсыВалютМодели
		|			ПО ИСТИНА")+"
		|ГДЕ
		| #ТекстОтбора# 
		|	"+ТекстОтбора+"
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДанных.Автомобиль.ВариантКомплектации,
		|	ТаблицаДанных.Автомобиль.Модель,
		|	НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, "+СтрПериодичность+")
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаДанных.Количество)<>0";
		
	ИначеЕсли ТипАнализа = Перечисления.ТипыАнализа.ПоРанееПланируемымДаннымПродаж Тогда
		
		//ПО РЕГИСТРУ ПАРТИЙ (ЗАКУПКИ)
		СтруктураПолей.Вставить("Поля", Новый Структура("ВариантКомплектации, Модель"));
		СтруктураПолей.Вставить("Количество");
		
		Если УчитыватьСебестоимость Тогда
			СтруктураПолей.Вставить("СебестоимостьУпр");
		КонецЕсли;
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ТаблицаДанных.ВариантКомплектации КАК ВариантКомплектации,
		|	ТаблицаДанных.Модель КАК Модель,
		|	ТаблицаДанных.Модель.Наименование + ЕСТЬNULL("" ("" + ТаблицаДанных.ВариантыКомплектации.Наименование+"")"","""") КАК Представление,
		|	НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, "+СтрПериодичность+") КАК Период,
		|	"+Строка(Справочники.СтавкиНДС.ОсновнаяСтавкаНДС.Ставка)+" КАК Ставка,
		|	СУММА(ТаблицаДанных.Количество) КАК Количество,
		|	СУММА(ТаблицаДанных.СуммаУпр) КАК СуммаУпр,
		|	0 КАК СуммаНДС,
		|	СУММА(ТаблицаДанных.СебестоимостьУпр) КАК СебестоимостьУпр,
		|	СРЕДНЕЕ(ВЫРАЗИТЬ(ВЫБОР КОГДА ЕСТЬNULL("+ТекстЦенаМодели+", 0) <> 0 ТОГДА
		|		"+ТекстЦенаМодели+" * ЕСТЬNULL(КурсыВалютМодели.Курс, 0) / ЕСТЬNULL(КурсыВалютМодели.Кратность, 1) / &КурсУпрВалюты
		|	 КОГДА ТаблицаДанных.Количество<>0 ТОГДА
		|   	ТаблицаДанных.СуммаУпр / ТаблицаДанных.Количество
		|	ИНАЧЕ
		|       0
		|	КОНЕЦ КАК ЧИСЛО(15,2))) КАК Цена,
		|	"+Строка(СпособОкругления)+" КАК СпособОкругления
        |
		|ПОМЕСТИТЬ 
		|	ТаблицаРегистра
		|                                                         
		|ИЗ
		|	РегистрНакопления.БюджетПродажАвтомобилей КАК ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныАвтомобилей.СрезПоследних(&ДатаДокумента, ТипЦен = &ТипЦен И Автомобиль ССЫЛКА Справочник.Модели" + ТекстОтбораЦенМоделей + ") КАК ЦеныМоделей
		|			ПО ТаблицаДанных.Модель = ЦеныМоделей.Автомобиль
		|			И ТаблицаДанных.ВариантКомплектации = ЦеныМоделей.ВариантКомплектации"+?(ВВалютеУчета,"
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютМодели
		|			ПО ТаблицаДанных.ВариантКомплектации.ВалютаУчета = КурсыВалютАвтомобиля.Валюта","                          
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВыбВалютаЦены) КАК КурсыВалютМодели
		|			ПО ИСТИНА")+"
		|ГДЕ
		|	#ТекстОтбора# 
		|	"+ ТекстОтбора +"
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДанных.ВариантКомплектации,
		|	ТаблицаДанных.Модель,
		|	НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, "+СтрПериодичность+")
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаДанных.Количество)<>0";
		
	Иначе
		СтруктураПолей.Вставить("Поля", Новый Структура("Модель"));
		СтруктураПолей.Вставить("Количество");
		Если УчитыватьСебестоимость Тогда
			СтруктураПолей.Вставить("СебестоимостьУпр");
		КонецЕсли;
			
		ТекстЗапроса = "ВЫБРАТЬ
		|	ТаблицаДанных.Модель КАК Модель,
		|	ТаблицаДанных.Модель.Наименование КАК Представление,
		|	НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, "+СтрПериодичность+") КАК Период,
		|	"+Строка(Справочники.СтавкиНДС.ОсновнаяСтавкаНДС.Ставка)+" КАК Ставка,
		|	СУММА(ТаблицаДанных.Количество) КАК Количество,
		|	СУММА(ТаблицаДанных.СуммаУпр) КАК СуммаУпр,
		|	0 КАК СуммаНДС,
		|	СУММА(ТаблицаДанных.СебестоимостьУпр) КАК СебестоимостьУпр,
		|	СРЕДНЕЕ(ВЫРАЗИТЬ(ВЫБОР КОГДА ЕСТЬNULL(ТаблицаЦенМоделей.Цена, 0)<>0 ТОГДА
		|		ТаблицаЦенМоделей.Цена * ЕСТЬNULL(КурсыВалютМодели.Курс, 0) / ЕСТЬNULL(КурсыВалютМодели.Кратность, 1) / &КурсУпрВалюты
		|	КОГДА ТаблицаДанных.Количество<>0 ТОГДА
		|   	ТаблицаДанных.СуммаУпр/ТаблицаДанных.Количество
		|	ИНАЧЕ
		|       0
		|	КОНЕЦ КАК ЧИСЛО(15,2))) КАК Цена,
		|	"+Строка(СпособОкругления)+" КАК СпособОкругления
        |
		|ПОМЕСТИТЬ 
		|	ТаблицаРегистра
		|                                                         
		|ИЗ
		|	РегистрНакопления.БюджетПродажАвтомобилей КАК ТаблицаДанных
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		| 	ВЫРАЗИТЬ(ЦеныМоделей.Автомобиль КАК Справочник.Модели) КАК Модель,
		| 	СРЕДНЕЕ("+ТекстЦенаМодели+") КАК Цена
		| Из РегистрСведений.ЦеныАвтомобилей.СрезПоследних(&ДатаДокумента, ТипЦен = &ТипЦен И Автомобиль ССЫЛКА Справочник.Модели" + ТекстОтбораЦенМоделей + ") КАК ЦеныМоделей
		| СГРУППИРОВАТЬ ПО
		| 	ВЫРАЗИТЬ(ЦеныМоделей.Автомобиль КАК Справочник.Модели)) КАК ТаблицаЦенМоделей
		|			ПО ТаблицаДанных.Модель = ТаблицаЦенМоделей.Модель"+?(ВВалютеУчета,"
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютМодели
		|			ПО ТаблицаДанных.Модель.ВалютаУчета = КурсыВалютАвтомобиля.Валюта","
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВыбВалютаЦены) КАК КурсыВалютМодели
		|			ПО ИСТИНА")+"
		|ГДЕ
		|	#ТекстОтбора# 
		|	"+ ТекстОтбора +"
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДанных.Модель,
		|	НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, "+СтрПериодичность+")
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаДанных.Количество)<>0";
	КонецЕсли;
	
	// Получим даты границ анализируемого периода
	ПараметрыДляАнализаДат = Новый Структура;
	ПараметрыДляАнализаДат.Вставить("Периодичность", Периодичность);
	ПараметрыДляАнализаДат.Вставить("ДатаПланирования", ДатаПланирования);
	ПланированиеСервер.ПолучитьПериодыПланирования(ЭтотОбъект, ПараметрыДляАнализаДат);
	
	Запрос = Новый Запрос();
	МенеджерДанныхРегистра = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерДанныхРегистра;
	
	Для Каждого ТекПараметр Из ПараметрыДляАнализаДат.СтруктураСезонов Цикл
		Запрос.УстановитьПараметр(ТекПараметр.Ключ, ТекПараметр.Значение);
	КонецЦикла;
	
	Если ДополнительныеПараметры.Свойство("ДопОтборы") Тогда
		Для Каждого ТекПараметр Из ДополнительныеПараметры.ДопОтборы.Параметры Цикл
			Запрос.УстановитьПараметр(ТекПараметр.Ключ, ТекПараметр.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "#ТекстОтбора#", ПараметрыДляАнализаДат.ТекстОтбора);
	Курс = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(Константы.ВалютаУправленческогоУчетаКомпании.Получить(), ДатаДокумента);
	
	Запрос.УстановитьПараметр("ТипЦен",        РабочийТипЦен);
	Запрос.УстановитьПараметр("КурсУпрВалюты", ?(Курс = 0, 1, Курс));
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("ВыбВалютаЦены", РабочийТипЦен.ВалютаЦены);
	
	Если ДополнительныеПараметры.Свойство("Подразделение") Тогда
		Запрос.УстановитьПараметр("Подразделение", ДополнительныеПараметры.Подразделение);
	КонецЕсли;
	
	Запрос.Выполнить();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КоэффициентРостаПродаж", КоэффициентРоста);
	СтруктураПараметров.Вставить("КоэффициентСезонности", КоэффициентСезонности);
	СтруктураПараметров.Вставить("КоличествоПрошлыхПериодов", КоличествоПрошлыхПериодов);
	СтруктураПараметров.Вставить("ДатаДокумента", ДатаДокумента);
	СтруктураПараметров.Вставить("ПоКоличеству", ПоКоличеству);
	СтруктураПараметров.Вставить("СтрПериодичность", СтрПериодичность);
	СтруктураПараметров.Вставить("НеУчитыватьПериодыБезДанных", НеУчитыватьПериодыБезДанных);
	
	ДанныеАвтомобилей = ПланированиеСервер.ОбработатьРезультатНаивногоПрогнозирования(СтруктураПараметров, СтруктураПолей, МенеджерДанныхРегистра);
	
	Для Каждого ТекСтрока Из ДанныеАвтомобилей Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры // ВыбратьНаСервере()

// Обработчик команды "Выбрать"
//
&НаКлиенте
Процедура Выбрать(Команда)
	
	Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Нстр("ru = 'Не выбран тип цен.'"));
		Возврат;
	КонецЕсли;
	
	Если КоличествоПериодов = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Нстр("ru = 'Количество периодов для анализа должно быть отлично от нуля.'"));
		Возврат;
	КонецЕсли;
	
	ВыбратьНаСервере();
	
	РезультатВыбора = Новый Структура();
	РезультатВыбора.Вставить("КоличествоПериодов",          КоличествоПериодов);
	РезультатВыбора.Вставить("КоэффициентРостаПродаж",      КоэффициентРоста);
	РезультатВыбора.Вставить("КоэффициентСезонности",       КоэффициентСезонности);
	РезультатВыбора.Вставить("ТипАнализа",                  ТипАнализа);
	РезультатВыбора.Вставить("ПоказательПланирования",      ПоказательПланирования);
	РезультатВыбора.Вставить("СпособОкругления",            СпособОкругления);
	РезультатВыбора.Вставить("НеУчитыватьПериодыБезДанных", НеУчитыватьПериодыБезДанных);
	РезультатВыбора.Вставить("КоличествоСезонов",           КоличествоСезонов);
	РезультатВыбора.Вставить("СмещениеПланирования",        СмещениеПланирования);
	
	ТаблицаРезультата = Новый Массив;
	Для Каждого ТекСтрока Из Результат Цикл
		
		НоваяСтрока = Новый Структура("Модель, ВариантКомплектации, Количество, Цена, НормативнаяЦена,СуммаВсегоУпр, СуммаНДС, СебестоимостьУпр, СтавкаНДС", 
		                              ТекСтрока.Модель, ТекСтрока.ВариантКомплектации, ТекСтрока.Количество, ТекСтрока.Цена, ТекСтрока.НормативнаяЦена, ТекСтрока.СуммаВсегоУпр, ТекСтрока.СуммаНДС, ТекСтрока.СебестоимостьУпр, ТекСтрока.Ставка);
		ТаблицаРезультата.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	РезультатВыбора.Вставить("ТаблицаАвтомобилей", ТаблицаРезультата);
	РезультатВыбора.Вставить("СпособПоследнегоЗаполнения", 0);
	
	Закрыть(РезультатВыбора);
	
КонецПроцедуры // Выбрать()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВывестиПредставлениеПериода()
	
	Если Периодичность=Перечисления.ПериодичностьПланирования.Месяц Тогда
		ПредставлениеПериода = Формат(ДатаПланирования, "ДФ='ММММ гггг ""г.""'");
	ИначеЕсли Периодичность=Перечисления.ПериодичностьПланирования.Квартал Тогда
		ПредставлениеПериода = Формат(ДатаПланирования, "ДФ='к ""квартал"" гггг ""г.""'");
	ИначеЕсли Периодичность=Перечисления.ПериодичностьПланирования.Год Тогда
		ПредставлениеПериода = Формат(ДатаПланирования, "ДФ='гггг ""г.""'");
	КонецЕсли;
	
	ПредставлениеПериода = "Период планирования "+ПредставлениеПериода+" по данным за "+ПланированиеСервер.ВывестиПредставлениеПериода(ЭтотОбъект, Периодичность, ДатаПланирования);
	Элементы.НадписьПредставлениеПериода.Заголовок = ПредставлениеПериода;
	
КонецПроцедуры // ВывестиПредставлениеПериода()

// возвращает дополнительные параметры запроса
//
&НаСервере
Функция ПолучитьДополнительныеПараметрыЗапроса()
	
	// Вычислим максимально допустимое количество периодов для анализа
	ДополнительныеПараметры = Новый Структура;
	
	ДеревоОтбора = РеквизитФормыВЗначение("Отбор");
	
	Если ТипАнализа=Перечисления.ТипыАнализа.ПоФактическимДаннымПродаж Тогда
		ЭлементОтбора = ДеревоОтбора.Строки.Найти("ПодразделениеОтгрузки", "ЛевоеЗначение");
		Если ЭлементОтбора.Использование Тогда
			СтрокаУсловия=СтрЗаменить(СтрЗаменить(Документы.БюджетЗакупокАвтомобилей.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения),"#","ТаблицаДанных.ПодразделениеКомпании"),"&","&Подразделение");
			ДополнительныеПараметры.Вставить("ОтборПоПодразделению", СтрокаУсловия);
			ДополнительныеПараметры.Вставить("Подразделение", ЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
		
		СтрокаУсловияОтбораДляПартий = "";
		Если СписокМоделей.Количество() > 0 Тогда
			СтрокаУсловияОтбора = "ТаблицаДанных.Автомобиль.Модель в (&СписокМоделей)";
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура("СписокМоделей", СписокМоделей));
			СтрокаУсловияОтбораДляПартий = СтрокаУсловияОтбораДляПартий + Символы.ПС+"И "+СтрокаУсловияОтбора;
		КонецЕсли;
		
		ЭлементОтбора = ДеревоОтбора.Строки.Найти("Модель", "ЛевоеЗначение");
		Если ЭлементОтбора.Использование Тогда
			УсловиеОтбора = СтрЗаменить(Документы.БюджетЗакупокАвтомобилей.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения), "&", "&Модель");
			СтрокаУсловияОтбора = СтрЗаменить(УсловиеОтбора, "#", " ТаблицаДанных.Автомобиль.Модель");
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура("Модель", ЭлементОтбора.ПравоеЗначение));
			СтрокаУсловияОтбораДляПартий = СтрокаУсловияОтбораДляПартий + Символы.ПС+"И "+СтрокаУсловияОтбора;
		КонецЕсли;
		
		Если НЕ ПоМоделям Тогда
			ЭлементОтбора = ДеревоОтбора.Строки.Найти("ВариантКомплектации", "ЛевоеЗначение");
			Если ЭлементОтбора.Использование Тогда
				УсловиеОтбора = СтрЗаменить(Документы.БюджетЗакупокАвтомобилей.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения), "&", "&ВариантКомплектации");
				СтрокаУсловияОтбора = СтрЗаменить(УсловиеОтбора, "#", " ТаблицаДанных.Автомобиль.ВариантКомплектации");
				ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура("ВариантКомплектации", ЭлементОтбора.ПравоеЗначение));
				СтрокаУсловияОтбораДляПартий = СтрокаУсловияОтбораДляПартий + Символы.ПС+"И "+СтрокаУсловияОтбора;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаУсловияОтбораДляПартий = СтрЗаменить(СтрокаУсловияОтбораДляПартий,"ТаблицаДанных","ОстаткиАвтомобилей");
		
		ЭлементОтбора = ДеревоОтбора.Строки.Найти("ПодразделениеЗакупки", "ЛевоеЗначение");
		Если ЭлементОтбора.Использование Тогда
			
			СтрокаУсловия=СтрЗаменить(СтрЗаменить(Документы.БюджетЗакупокАвтомобилей.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения),"#","ОстаткиАвтомобилей.СкладКомпании.ПодразделениеКомпании"),"&","&Подразделение");
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОстаткиАвтомобилей.Партия КАК Партия             
			|ИЗ
			|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
			|ГДЕ                                         
			| "+СтрокаУсловия+"          
			|	И ОстаткиАвтомобилей.Период <= &ДатаПланирования
			|	И ОстаткиАвтомобилей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И ОстаткиАвтомобилей.Количество <> 0
			|  "+СтрокаУсловияОтбораДляПартий;
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Подразделение", ЭлементОтбора.ПравоеЗначение);
			Запрос.УстановитьПараметр("ДатаПланирования", ДатаПланирования);
			Запрос.УстановитьПараметр("Модель", ДеревоОтбора.Строки.Найти("Модель", "ЛевоеЗначение").ПравоеЗначение);
			Если НЕ ПоМоделям Тогда
				Запрос.УстановитьПараметр("ВариантКомплектации", ДеревоОтбора.Строки.Найти("ВариантКомплектации", "ЛевоеЗначение").ПравоеЗначение);
			КонецЕсли;
			
			Партии = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Партия");
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", " ТаблицаДанных.Партия в (&Партии) ", Новый Структура("Партии", Партии));
			
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("ИмяТаблицы", "ПродажиАвтомобилей");
		
	ИначеЕсли ТипАнализа = Перечисления.ТипыАнализа.ПоРанееПланируемымДаннымПродаж Тогда
		
		ЭлементОтбора = ДеревоОтбора.Строки.Найти("ПодразделениеОтгрузки", "ЛевоеЗначение");
		Если ЭлементОтбора.Использование Тогда
			СтрокаУсловия=СтрЗаменить(СтрЗаменить(Документы.БюджетЗакупокАвтомобилей.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения),"#","ТаблицаДанных.ПодразделениеКомпании"),"&","&Подразделение");
			ДополнительныеПараметры.Вставить("ОтборПоПодразделению", СтрокаУсловия);
			ДополнительныеПараметры.Вставить("Подразделение",        ЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
		
		СтрокаУсловияОтбора = "ТаблицаДанных.СценарийПланирования=&СценарийПланирования
		//| И ТаблицаДанных.Автомобиль ССЫЛКА Справочник."+?(ПоМоделям, "Модели", "ВариантыКомплектации");
		| И ТаблицаДанных.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации."+?(ПоМоделям, "БюджетПродажПоМоделям)", "БюджетПродажПоВариантамКомплектации)");
		ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура("СценарийПланирования", СценарийПланирования));
		
		Если (НЕ ПоМоделям) И (СписокМоделей.Количество() > 0) Тогда
			СтрокаУсловияОтбора = "ТаблицаДанных.Модель в (&СписокМоделей)";
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура("СписокМоделей", СписокМоделей));
		КонецЕсли;
		
		Если ПоМоделям Тогда
			ЭлементОтбора = ДеревоОтбора.Строки.Найти("Модель", "ЛевоеЗначение");
			Если ЭлементОтбора.Использование Тогда
				УсловиеОтбора = СтрЗаменить(Документы.БюджетЗакупокАвтомобилей.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения), "&", "&Модель");
				СтрокаУсловияОтбора = СтрЗаменить(УсловиеОтбора, "#", " ТаблицаДанных.Модель");
				ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура("Модель", ЭлементОтбора.ПравоеЗначение));
			КонецЕсли;
		Иначе
			ЭлементОтбора = ДеревоОтбора.Строки.Найти("Модель", "ЛевоеЗначение");
			Если ЭлементОтбора.Использование Тогда
				УсловиеОтбора = СтрЗаменить(Документы.БюджетЗакупокАвтомобилей.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения), "&", "&Модель");
				СтрокаУсловияОтбора = СтрЗаменить(УсловиеОтбора, "#", " ТаблицаДанных.Модель");
				ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура("Модель", ЭлементОтбора.ПравоеЗначение));
			КонецЕсли;
			ЭлементОтбора = ДеревоОтбора.Строки.Найти("ВариантКомплектации", "ЛевоеЗначение");
			Если ЭлементОтбора.Использование Тогда
				УсловиеОтбора = СтрЗаменить(Документы.БюджетЗакупокАвтомобилей.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения), "&", "&ВариантКомплектации");
				СтрокаУсловияОтбора = СтрЗаменить(УсловиеОтбора, "#", " ТаблицаДанных.ВариантКомплектации");
				ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура("ВариантКомплектации", ЭлементОтбора.ПравоеЗначение));
			КонецЕсли;
			
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("ИмяТаблицы", "БюджетПродажАвтомобилей");
		
	КонецЕсли;
	
	Если (НЕ ПоМоделям) И СписокМоделей.Количество() > 0 Тогда
		СтрокаУсловияОтбораЦенАвтомобиля = "Автомобиль.Модель в (&СписокМоделей)";
		СтрокаУсловияОтбораЦенМодели = "Автомобиль в (&СписокМоделей)";
		ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ОтборыДляЦенАвтомобиля", СтрокаУсловияОтбораЦенАвтомобиля, Новый Структура());
		ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ОтборыДляЦенМодели", СтрокаУсловияОтбораЦенМодели, Новый Структура());
	КонецЕсли;
	
	ЭлементОтбора = ДеревоОтбора.Строки.Найти("Модель", "ЛевоеЗначение");
	Если ЭлементОтбора.Использование Тогда
		УсловиеОтбора = СтрЗаменить(Документы.БюджетЗакупокАвтомобилей.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения), "&", "&Модель");
		СтрокаУсловияОтбораЦенАвтомобиля = СтрЗаменить(УсловиеОтбора, "#", " Автомобиль.Модель");
		СтрокаУсловияОтбораЦенМодели = СтрЗаменить(УсловиеОтбора, "#", " Автомобиль");
		ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ОтборыДляЦенАвтомобиля", СтрокаУсловияОтбораЦенАвтомобиля, Новый Структура());
		ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ОтборыДляЦенМодели", СтрокаУсловияОтбораЦенМодели, Новый Структура());
	КонецЕсли;
	
	Если НЕ ПоМоделям Тогда
		ЭлементОтбора = ДеревоОтбора.Строки.Найти("ВариантКомплектации", "ЛевоеЗначение");
		Если ЭлементОтбора.Использование Тогда
			УсловиеОтбора = СтрЗаменить(Документы.БюджетЗакупокАвтомобилей.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения), "&", "&ВариантКомплектации");
			СтрокаУсловияОтбораЦенАвтомобиля = СтрЗаменить(УсловиеОтбора, "#", " Автомобиль.ВариантКомплектации");
			СтрокаУсловияОтбораЦенМодели = СтрЗаменить(УсловиеОтбора, "#", " ВариантКомплектации");
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ОтборыДляЦенАвтомобиля", СтрокаУсловияОтбораЦенАвтомобиля, Новый Структура());
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ОтборыДляЦенМодели", СтрокаУсловияОтбораЦенМодели, Новый Структура());
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции // ПолучитьДополнительныеПараметрыЗапроса()

// Обработчик окончания выбора значения отбора
//
&НаКлиенте
Процедура ОповещениеВыбораЗначенияОтбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("СписокЗначений") Тогда
		
		ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.ПравоеЗначение = РезультатЗакрытия;
		
	КонецЕсли;
	Элементы.Отбор.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры //ОповещениеВыбораЗначенияОтбора()

// Функция определения того, что отбор выполняетсяпо списку значений
//
&НаКлиенте
Функция ОтборПоСписку(ВидСравненияОтбора)
	
	РезультатОтбора = Ложь;
	Если ВидСравненияОтбора = ВидСравнения.ВСписке ИЛИ 
		ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии ИЛИ
		ВидСравненияОтбора = ВидСравнения.НеВСписке ИЛИ 
		ВидСравненияОтбора= ВидСравнения.НеВСпискеПоИерархии Тогда
		
		РезультатОтбора = Истина;
		
	КонецЕсли;
	
	Возврат РезультатОтбора;
	
КонецФункции //ОтборПоСписку()

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ОТБОРОМ

// Добавляем дополнительные отборы
&НаСервере
Процедура НастроитьПолеОтбора(Подразделение)
	
	// заполним быстрые отборы
	ДеревоОтбор = ЭтотОбъект.Отбор.ПолучитьЭлементы();
	
	НовыйОтбор = ДеревоОтбор.Добавить();
	НовыйОтбор.Использование  = Истина;
	НовыйОтбор.ЛевоеЗначение  = "ПодразделениеОтгрузки";
	НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
	НовыйОтбор.ПравоеЗначение = Подразделение;
	НовыйОтбор.Заголовок      = "Подразделение отгрузки";
	
	НовыйОтбор = ДеревоОтбор.Добавить();
	НовыйОтбор.Использование  = Ложь;
	НовыйОтбор.ЛевоеЗначение  = "ПодразделениеЗакупки";
	НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
	НовыйОтбор.ПравоеЗначение = Справочники.ПодразделенияКомпании.ПустаяСсылка();
	НовыйОтбор.Заголовок      = "Подразделение закупки";
	
	НовыйОтбор = ДеревоОтбор.Добавить();
	НовыйОтбор.Использование  = Ложь;
	НовыйОтбор.ЛевоеЗначение  = "Модель";
	НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
	НовыйОтбор.ПравоеЗначение = Справочники.Модели.ПустаяСсылка();
	НовыйОтбор.Заголовок      = "Модель";
	
	Если НЕ ПоМоделям Тогда
		НовыйОтбор = ДеревоОтбор.Добавить();
		НовыйОтбор.Использование  = Ложь;
		НовыйОтбор.ЛевоеЗначение  = "ВариантКомплектации";
		НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
		НовыйОтбор.ПравоеЗначение = Справочники.ВариантыКомплектации.ПустаяСсылка();
		НовыйОтбор.Заголовок      = "Вариант комплектации";
	КонецЕсли;
	
КонецПроцедуры // НастроитьПолеОтбора()

&НаСервере
Процедура ИзменитьФильтр()
	
	ДеревоОтбор = ЭтотОбъект.Отбор.ПолучитьЭлементы();
	
	ПодразделениеОтгрузки = Неопределено;
	ПодразделениеЗакупки = Неопределено;
	Индекс = 0;
	
	Для Каждого ТекОтбор Из ДеревоОтбор Цикл
		Если ДеревоОтбор[Индекс].ЛевоеЗначение = "ПодразделениеОтгрузки" Тогда
			ПодразделениеОтгрузки = ТекОтбор;
		ИначеЕсли ДеревоОтбор[Индекс].ЛевоеЗначение = "ПодразделениеЗакупки" Тогда
			ПодразделениеЗакупки = ТекОтбор;
		КонецЕсли;
		Индекс = Индекс +1;
	КонецЦикла;
	
	Если ТипАнализа=Перечисления.ТипыАнализа.ПоФактическимДаннымПродаж Тогда
		
		Если ПодразделениеЗакупки = Неопределено Тогда
			НовыйОтбор = ДеревоОтбор.Добавить();
			НовыйОтбор.Использование  = Ложь;
			НовыйОтбор.ЛевоеЗначение  = "ПодразделениеЗакупки";
			НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
			НовыйОтбор.ПравоеЗначение = Справочники.ПодразделенияКомпании.ПустаяСсылка();
			НовыйОтбор.Заголовок      = "Подразделение закупки";
			Индекс = ДеревоОтбор.Индекс(НовыйОтбор);
			ДеревоОтбор.Сдвинуть(Индекс, -Индекс);
		КонецЕсли;
		
		Если ПодразделениеОтгрузки = Неопределено Тогда
			НовыйОтбор = ДеревоОтбор.Добавить();
			НовыйОтбор.Использование  = Ложь;
			НовыйОтбор.ЛевоеЗначение  = "ПодразделениеОтгрузки";
			НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
			НовыйОтбор.Заголовок      = "Подразделение отгрузки";
			Индекс = ДеревоОтбор.Индекс(НовыйОтбор);
			ДеревоОтбор.Сдвинуть(Индекс, 1-Индекс);
		КонецЕсли;
		
	ИначеЕсли ТипАнализа=Перечисления.ТипыАнализа.ПоРанееПланируемымДаннымПродаж Тогда
		
		Если ПодразделениеЗакупки <> Неопределено Тогда
			Индекс = ДеревоОтбор.Индекс(ПодразделениеЗакупки);
			ДеревоОтбор.Удалить(Индекс);
		КонецЕсли;
		
		Если ПодразделениеОтгрузки = Неопределено Тогда
			НовыйОтбор = ДеревоОтбор.Добавить();
			НовыйОтбор.Использование  = Ложь;
			НовыйОтбор.ЛевоеЗначение  = "ПодразделениеОтгрузки";
			НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
			НовыйОтбор.Заголовок      = "Подразделение отгрузки";
			Индекс = ДеревоОтбор.Индекс(НовыйОтбор);
			ДеревоОтбор.Сдвинуть(Индекс, -Индекс);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ИзменитьФильтр()

// Обработчик события возникающего на клиенте перед началом изменения таблицы "Отбор".
//
&НаКлиенте
Процедура ОтборПередНачаломИзменения(Элемент, Отказ)
	
	Поле = Элементы.Отбор.ТекущийЭлемент;
	Если Поле.Имя = "ОтборПравоеЗначение" Тогда
		
		СтандартнаяОбработка = Истина;
		ВыбраннаяСтрока      = Неопределено;
		ОтборПравоеЗначениеНачалоВыбора(Элемент, ВыбраннаяСтрока, СтандартнаяОбработка);
		
	ИначеЕсли Поле.Имя = "ОтборВидСравнения" Тогда
		
		СтандартнаяОбработка = Истина;
		ВыбраннаяСтрока      = Неопределено;
		ОтборВидСравненияНачалоВыбора(Элемент, ВыбраннаяСтрока, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры //ОтборПередНачаломИзменения()

// Обработчик изменения поля "Вид сравнения" таблицы "Отбор"
//
&НаКлиенте
Процедура ОтборВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.ПравоеЗначение) = Тип("СписокЗначений") И ЗначениеЗаполнено(ТекущиеДанные.ПравоеЗначение) И НЕ ТекущиеДанные.ВидСравнения = ВидСравнения.ВСписке И НЕ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВСписке
		 И НЕ ТекущиеДанные.ВидСравнения = ВидСравнения.ВСпискеПоИерархии И НЕ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
		
		Значение = ТекущиеДанные.ПравоеЗначение[0].Значение;
		ТекущиеДанные.ПравоеЗначение.Очистить();
		ОтборПравоеЗначениеНачалоВыбора(Элементы.ОтборПравоеЗначение, Значение, Истина);
		
	КонецЕсли;
	
КонецПроцедуры // ОтборВидСравненияПриИзменении()

// Обработчик начала выбора поля "Вид сравнения" таблицы "Отбор"
//
&НаКлиенте
Процедура ОтборВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокВыбора = Элементы.ОтборВидСравнения.СписокВыбора;
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить(ВидСравнения.Равно,              Строка(ВидСравнения.Равно));
	СписокВыбора.Добавить(ВидСравнения.НеРавно,            Строка(ВидСравнения.НеРавно));
	СписокВыбора.Добавить(ВидСравнения.ВСписке,            Строка(ВидСравнения.ВСписке));
	СписокВыбора.Добавить(ВидСравнения.ВИерархии,          Строка(ВидСравнения.ВИерархии));
	СписокВыбора.Добавить(ВидСравнения.ВСпискеПоИерархии,  Строка(ВидСравнения.ВСпискеПоИерархии));
	СписокВыбора.Добавить(ВидСравнения.НеВСписке,          Строка(ВидСравнения.НеВСписке));
	СписокВыбора.Добавить(ВидСравнения.НеВИерархии,        Строка(ВидСравнения.НеВИерархии));
	СписокВыбора.Добавить(ВидСравнения.НеВСпискеПоИерархии,Строка(ВидСравнения.НеВСпискеПоИерархии));
	
КонецПроцедуры // ОтборВидСравненияНачалоВыбора()

// Обработчик изменения поля "Правое значение" таблицы "Отбор"
//
&НаКлиенте
Процедура ОтборПравоеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ТекущиеДанные.Использование = ЗначениеЗаполнено(ТекущиеДанные.ПравоеЗначение);
	
КонецПроцедуры

// Обработчик начала выбора поля "Правое значение" таблицы "Отбор"
//
&НаКлиенте
Процедура ОтборПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтборПоСписку(ТекущиеДанные.ВидСравнения) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ТекущиеДанные.ВидСравнения = ВидСравнения.ВСпискеПоИерархии ИЛИ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
			ТолькоГруппы = Истина;
		Иначе
			ТолькоГруппы = Ложь;
		КонецЕсли;
		
		СписокВыбора =  ТекущиеДанные.ПравоеЗначение;
		
		Если ТекущиеДанные.ЛевоеЗначение = "Модель" Тогда
			СтруктураПараметров = Новый Структура("СписокВыбора, ТипЗначения, ДоступныеЗначения, ТолькоГруппы", СписокВыбора, Новый ОписаниеТипов("СправочникСсылка.Модели"), Неопределено, ТолькоГруппы);
		ИначеЕсли ТекущиеДанные.ЛевоеЗначение = "ВариантКомплектации" Тогда
			СтруктураПараметров = Новый Структура("СписокВыбора, ТипЗначения, ДоступныеЗначения, ТолькоГруппы", СписокВыбора, Новый ОписаниеТипов("СправочникСсылка.ВариантыКомплектации"), Неопределено, ТолькоГруппы);
		ИначеЕсли ТекущиеДанные.ЛевоеЗначение = "ПодразделениеОтгрузки" ИЛИ ТекущиеДанные.ЛевоеЗначение = "ПодразделениеЗакупки" Тогда
			СтруктураПараметров = Новый Структура("СписокВыбора, ТипЗначения, ДоступныеЗначения, ТолькоГруппы", СписокВыбора, Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"), Неопределено, ТолькоГруппы);
		КонецЕсли;
			
		ОписаниеОповещенияВыбораЗначения = Новый ОписаниеОповещения("ОповещениеВыбораЗначенияОтбора", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ОтчетВыборЗначенияОтбораИзСписка", СтруктураПараметров, Элемент,,,, ОписаниеОповещенияВыбораЗначения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		Если ТекущиеДанные.ВидСравнения = ВидСравнения.ВИерархии ИЛИ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВИерархии Тогда
			ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		Иначе
			ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
		КонецЕсли;
		
		Если ТекущиеДанные.ЛевоеЗначение = "ПодразделениеОтгрузки" ИЛИ ТекущиеДанные.ЛевоеЗначение = "ПодразделениеЗакупки" Тогда
			Элементы.ОтборПравоеЗначение.БыстрыйВыбор         = Ложь;
			Элементы.ОтборПравоеЗначение.ОграничениеТипа      = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании");
			Элементы.ОтборПравоеЗначение.КнопкаВыбора         = Истина;
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ВыборГруппИЭлементов;
		ИначеЕсли ТекущиеДанные.ЛевоеЗначение = "Модель" Тогда
			Элементы.ОтборПравоеЗначение.БыстрыйВыбор         = Ложь;
			Элементы.ОтборПравоеЗначение.ОграничениеТипа      = Новый ОписаниеТипов("СправочникСсылка.Модели");
			Элементы.ОтборПравоеЗначение.КнопкаВыбора         = Истина;
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ВыборГруппИЭлементов;
		ИначеЕсли ТекущиеДанные.ЛевоеЗначение = "ВариантКомплектации" Тогда
			Элементы.ОтборПравоеЗначение.БыстрыйВыбор         = Ложь;
			Элементы.ОтборПравоеЗначение.ОграничениеТипа      = Новый ОписаниеТипов("СправочникСсылка.ВариантыКомплектации");
			Элементы.ОтборПравоеЗначение.КнопкаВыбора         = Истина;
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ВыборГруппИЭлементов;
			Если ВыборГруппИЭлементов = ГруппыИЭлементы.Группы Тогда
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеВыбора <> Неопределено Тогда
			ТекущиеДанные.ПравоеЗначение = ДанныеВыбора;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

