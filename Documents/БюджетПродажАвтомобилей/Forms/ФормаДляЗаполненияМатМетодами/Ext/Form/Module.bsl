// Модуль формы "Заполнение математическими методами"

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СценарийПланирования        = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СценарийПланирования",        Неопределено);
	КоличествоПериодов          = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КоличествоПериодов",          0);
	ПоказательПланирования      = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПоказательПланирования",      Ложь);
	СпособОкругления            = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СпособОкругления",            0);
	НеУчитыватьПериодыБезДанных = ПолучитьЗначениеПараметраСтруктуры(Параметры, "НеУчитыватьПериодыБезДанных", Ложь);
	КоличествоСезонов           = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КоличествоСезонов",           0);
	СмещениеПланирования        = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СмещениеПланирования",        0);
	ТипАнализа                  = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ТипАнализа",                  Неопределено);
	МодельПрогнозирования       = ПолучитьЗначениеПараметраСтруктуры(Параметры, "МодельПрогнозирования",       Неопределено);
	Параметр1                   = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Параметр1",                   0);
	Параметр2                   = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Параметр2",                   0);
	Параметр3                   = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Параметр3",                   0);
	РасчетСезонности            = ПолучитьЗначениеПараметраСтруктуры(Параметры, "РасчетСезонности",            Ложь); 
	ХозОперация                 = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ХозОперация",                 Неопределено);
	ДатаДокумента               = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Дата",                        Неопределено);
	ТипЦен                      = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ТипЦен",                      Неопределено);
	КурсДокумента               = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КурсДокумента",               0);
	ДатаПланирования            = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ДатаПланирования",            Неопределено);
	Подразделение               = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПодразделениеКомпании",       Неопределено);
	ПланированиеСебестоимости   = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПланированиеСебестоимости",   Ложь);
	
	Если НЕ ЗначениеЗаполнено(СценарийПланирования) ИЛИ НЕ ЗначениеЗаполнено(СценарийПланирования.Периодичность) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			Нстр("ru = 'Не выбран сценарий планирования, либо у выбранного сценария не указана периодичность.'")
		);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПоМоделям  = ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоМоделям;
	
	Если ПоМоделям Тогда
		// Для категорий, показатель планирования предопределен: "СуммаВсегоУпр",
		// поэтому запретим редактирование этого реквизита.
		Элементы.Страницы.ТекущаяСтраница.Заголовок = "Модели";
	КонецЕсли;
	
	КурсУпрВалюты = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(Константы.ВалютаУправленческогоУчетаКомпании.Получить(), ДатаДокумента);
	
	КоэфИзУпрВалютыВРегВалюту = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(), ДатаДокумента);
	
	ПереполучитьДанные = Истина;
	
	Если КоличествоПериодов = 0 Тогда
		КоличествоПериодов = 3;
	КонецЕсли;
	
	Если СмещениеПланирования = 0 Тогда
		СмещениеПланирования = 1;
	КонецЕсли;
	
	Если КоличествоСезонов = 0 Тогда
		КоличествоСезонов = 1;
	КонецЕсли;
	
	МаксКоличествоПериодов = 0;
	
	Если НЕ ЗначениеЗаполнено(МодельПрогнозирования) Тогда
		МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Линейный;
	КонецЕсли;
	
	// Заполним надпись с типом цены
	ПараметрыНадписи = Новый Структура;
	ПараметрыНадписи.Вставить("ТипЦен",                    ТипЦен);
	ПараметрыНадписи.Вставить("КурсДокумента",             КурсДокумента);
	ПараметрыНадписи.Вставить("НадписьИнформацияОТипеЦен", Элементы.НадписьИнформацияОТипеЦен);
	ПланированиеСервер.СформироватьНадписьТипаЦены(ПараметрыНадписи);
	
	// Выведем период планирования (Вдруг забыл, пока форму открывал)
	ПараметрыПериода = Новый Структура;
	ПараметрыПериода.Вставить("ДатаИзПериода", ДатаПланирования);
	ПараметрыПериода.Вставить("Периодичность", СценарийПланирования.Периодичность);
	ПараметрыПериода.Вставить("Действие", 0);
	
	НастроитьПоляОтбора(Подразделение);
	
	СчетчикДиаграмм = 0;
	
	УправлениеДиалогомСервер("МодельПрогнозирования");
	УправлениеДиалогомСервер("ПоказательПланирования");
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при изменении данных реквизита "ПоказательПланирования" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ПоказательПланированияПриИзмененииНаСервере()
	
	ПереполучитьДанные = Истина;
	УправлениеДиалогомСервер("ПоказательПланирования");
	
КонецПроцедуры // ПоказательПланированияПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "ПоказательПланирования".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ПоказательПланированияПриИзменении(Элемент)
	
	ПоказательПланированияПриИзмененииНаСервере();
	
КонецПроцедуры // ПоказательПланированияПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "МодельПрогнозирования" в контексте сервера.
//
&НаСервере
Процедура МодельПрогнозированияПриИзмененииНаСервере()
	
	УправлениеДиалогомСервер("МодельПрогнозирования");
	
КонецПроцедуры // УправлениеДиалогомСервер()

// Обработчик события возникающего на клиенте при изменении данных реквизита "МодельПрогнозирования".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура МодельПрогнозированияПриИзменении(Элемент)
	
	МодельПрогнозированияПриИзмененииНаСервере();
	
КонецПроцедуры // МодельПрогнозированияПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "РасчетСезонности" в контексте сервера.
//
&НаСервере
Процедура РасчетСезонностиПриИзмененииНаСервере()
	
	УправлениеДиалогомСервер();
	
КонецПроцедуры // РасчетСезонностиПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "РасчетСезонности".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура РасчетСезонностиПриИзменении(Элемент)
	
	РасчетСезонностиПриИзмененииНаСервере();
	
КонецПроцедуры // РасчетСезонностиПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Параметр1" в контексте сервера.
//
&НаСервере
Процедура Параметр1ПриИзмененииНаСервере()
	
	УправлениеДиалогомСервер();
	
КонецПроцедуры // Параметр1ПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Параметр1".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура Параметр1ПриИзменении(Элемент)
	
	Параметр1ПриИзмененииНаСервере();
	
КонецПроцедуры // Параметр1ПриИзменении()

// Обработчик события возникающего на клиенте регулирование данных реквизита "Параметр1".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура Параметр1Регулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если МодельПрогнозирования = ПредопределенноеЗначение("Перечисление.МоделиПрогнозирования.Сглаживанием") Тогда
		СтандартнаяОбработка = Ложь;
		Параметр1 = Макс(Параметр1 + Направление*0.01, 0);
	КонецЕсли;
	
КонецПроцедуры // Параметр1Регулирование()

// Обработчик события возникающего на клиенте регулирование данных реквизита "Параметр2".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура Параметр2Регулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если МодельПрогнозирования = ПредопределенноеЗначение("Перечисление.МоделиПрогнозирования.Сглаживанием") Тогда
		СтандартнаяОбработка = Ложь;
		Параметр2 = Макс(Параметр2 + Направление*0.01, 0);
	КонецЕсли;
	
КонецПроцедуры // Параметр2Регулирование()

// Обработчик события возникающего на клиенте регулирование данных реквизита "Параметр3".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура Параметр3Регулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если МодельПрогнозирования = ПредопределенноеЗначение("Перечисление.МоделиПрогнозирования.Сглаживанием") Тогда
		СтандартнаяОбработка = Ложь;
		Параметр3 = Макс(Параметр3 + Направление*0.01, 0);
	КонецЕсли;
	
КонецПроцедуры // Параметр3Регулирование()

// Обработчик события возникающего на клиенте при изменении данных реквизита "КоличествоПериодов" в контексте сервера.
//
&НаСервере
Процедура КоличествоПериодовПриИзмененииНаСервере()
	
	ПланированиеСервер.ПроверкаКоличестваСезонов(ЭтотОбъект, СценарийПланирования.Периодичность);
	ПереполучитьДанные = Истина;
	УправлениеДиалогомСервер("МодельПрогнозирования");
	
КонецПроцедуры // КоличествоПериодовПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "КоличествоПериодов".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура КоличествоПериодовПриИзменении(Элемент)
	КоличествоПериодовПриИзмененииНаСервере();
КонецПроцедуры // КоличествоПериодовПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "СмещениеПланирования" в контексте сервера.
//
&НаСервере
Процедура СмещениеПланированияПриИзмененииНаСервере()
	
	ПереполучитьДанные = Истина;
	УправлениеДиалогомСервер("МодельПрогнозирования");
	
КонецПроцедуры // СмещениеПланированияПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "СмещениеПланирования".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура СмещениеПланированияПриИзменении(Элемент)
	СмещениеПланированияПриИзмененииНаСервере();
КонецПроцедуры // СмещениеПланированияПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "КоличествоСезонов" в контексте сервера.
//
&НаСервере
Процедура КоличествоСезоновПриИзмененииНаСервере()
	
	ПланированиеСервер.ПроверкаКоличестваСезонов(ЭтотОбъект, СценарийПланирования.Периодичность);
	ПереполучитьДанные = Истина;
	УправлениеДиалогомСервер("МодельПрогнозирования");
	
КонецПроцедуры // КоличествоСезоновПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "КоличествоСезонов".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура КоличествоСезоновПриИзменении(Элемент)
	КоличествоСезоновПриИзмененииНаСервере();
КонецПроцедуры // КоличествоСезоновПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "НеУчитыватьПериодыБезДанных" в контексте сервера.
//
&НаСервере
Процедура НеУчитыватьПериодыБезДанныхПриИзмененииНаСервере()
	
	ПереполучитьДанные = Истина;
	УправлениеДиалогомСервер();
	
КонецПроцедуры // НеУчитыватьПериодыБезДанныхПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "НеУчитыватьПериодыБезДанных".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура НеУчитыватьПериодыБезДанныхПриИзменении(Элемент)
	НеУчитыватьПериодыБезДанныхПриИзмененииНаСервере();
КонецПроцедуры // НеУчитыватьПериодыБезДанныхПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события нажатия кнопки "График"
//
&НаКлиенте
Процедура График(Команда)
	
	Если Автомобили.ПолучитьЭлементы().Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Нстр("ru = 'Данные для построения графика отсутствуют. Для прогнозирования нажмите кнопку ""Спрогнозировать""'"));
		Возврат;
	КонецЕсли;
	
	// Выведем графики для текущей строки табличного поля
	ТекСтрока = Элементы.Автомобили.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Нстр("ru = 'Не выбрана строка таблицы.'"));
		Возврат;
	КонецЕсли;
	
	// Текущая строка должна быть нулевого уровня, если это не так
	Если НЕ ЗначениеЗаполнено(ТекСтрока.Модель) И НЕ ЗначениеЗаполнено(ТекСтрока.ВариантКомплектации) И ТекСтрока.Представление <> "Итого по всем позициям: " Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Нстр("ru = 'Построение графика возможно только для строк верхнего уровня! Выберете другую строку.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", СокрЛП(МодельПрогнозирования)+" """+?(ТекСтрока.Представление = "Итого по всем позициям: ", "По всем позициям", ТекСтрока.Представление) +"""");
	ПараметрыФормы.Вставить("ТекСтрока", СформироватьДанныеДляГрафика(ТекСтрока.Представление));
	ПараметрыФормы.Вставить("КоличествоПрошлыхПериодов", ТекСтрока.КоличествоПериодов);
	
	ОткрытьФорму("Документ.БюджетПродажАвтомобилей.Форма.ФормаРезультата", ПараметрыФормы, ЭтотОбъект, СчетчикДиаграмм);
	
	СчетчикДиаграмм = СчетчикДиаграмм + 1;
	
КонецПроцедуры // График()

// Обработчик события нажатия кнопки "Спрогнозировать" на сервере
//
&НаСервере
Процедура СпрогнозироватьНаСервере()
	
	Сформировать();
	
КонецПроцедуры // СпрогнозироватьНаСервере()

// Обработчик события нажатия кнопки "Спрогнозировать" на клиенте
//
&НаКлиенте
Процедура Спрогнозировать(Команда)
	СпрогнозироватьНаСервере();
КонецПроцедуры

// Обработчик события нажатия кнопки "ОК" на клиенте
//
&НаКлиенте
Процедура ОК(Команда)
	
	Если Автомобили.ПолучитьЭлементы().Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Нстр("ru = 'Данные не спрогнозированы. Таблица пустая.'"));
		Возврат;
	КонецЕсли;
	
	ФормированиеРезультата();
	
	РезультатВыбора = Новый Структура();
	РезультатВыбора.Вставить("КоличествоПериодов",          КоличествоПериодов);
	РезультатВыбора.Вставить("ПоказательПланирования",      ПоказательПланирования);
	РезультатВыбора.Вставить("СпособОкругления",            СпособОкругления);
	РезультатВыбора.Вставить("НеУчитыватьПериодыБезДанных", НеУчитыватьПериодыБезДанных);
	РезультатВыбора.Вставить("КоличествоСезонов",           КоличествоСезонов);
	РезультатВыбора.Вставить("СмещениеПланирования",        СмещениеПланирования);
	РезультатВыбора.Вставить("МодельПрогнозирования",       МодельПрогнозирования);
	РезультатВыбора.Вставить("Параметр1",                   Параметр1);
	РезультатВыбора.Вставить("Параметр2",                   Параметр2);
	РезультатВыбора.Вставить("Параметр3",                   Параметр3);
	РезультатВыбора.Вставить("РасчетСезонности",            РасчетСезонности);
	РезультатВыбора.Вставить("ТипАнализа",                  ПредопределенноеЗначение("Перечисление.ТипыАнализа.ПоФактическимДаннымПродаж"));

	
	ТаблицаРезультата = Новый Массив;
	Для Каждого ТекСтрока Из Результат Цикл
		
		НоваяСтрока = Новый Структура("Модель, ВариантКомплектации, Количество, Цена, НормативнаяЦена,СуммаВсегоУпр, СуммаНДС, СебестоимостьУпр, СтавкаНДС", 
		                              ТекСтрока.Модель, ТекСтрока.ВариантКомплектации, ТекСтрока.Количество, ТекСтрока.Цена, ТекСтрока.НормативнаяЦена, ТекСтрока.СуммаВсегоУпр, ТекСтрока.СуммаНДС, ТекСтрока.СебестоимостьУпр, ТекСтрока.Ставка);
		ТаблицаРезультата.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	РезультатВыбора.Вставить("ТаблицаАвтомобилей", ТаблицаРезультата);
	РезультатВыбора.Вставить("СпособПоследнегоЗаполнения", 1);
	
	Закрыть(РезультатВыбора);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// возвращает дополнительные параметры запроса
//
&НаСервере
Функция ПолучитьДополнительныеПараметрыЗапроса()
	
	// Вычислим максимально допустимое количество периодов для анализа
	ДополнительныеПараметры = Новый Структура;
	
	ДеревоОтбора = РеквизитФормыВЗначение("Отбор");
	
	ЭлементОтбора = ДеревоОтбора.Строки.Найти("ПодразделениеОтгрузки", "ЛевоеЗначение");
	Если ЭлементОтбора.Использование Тогда
		СтрокаУсловия = СтрЗаменить(СтрЗаменить(Документы.БюджетЗакупокАвтомобилей.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения),"#","ТаблицаДанных.ПодразделениеКомпании"),"&","&Подразделение");
		ДополнительныеПараметры.Вставить("ОтборПоПодразделению", СтрокаУсловия);
		ДополнительныеПараметры.Вставить("Подразделение", ЭлементОтбора.ПравоеЗначение);
	КонецЕсли;
	
	СтрокаУсловияОтбораДляПартий = "";
	ЭлементОтбора = ДеревоОтбора.Строки.Найти("Модель", "ЛевоеЗначение");
	Если ЭлементОтбора.Использование Тогда
		УсловиеОтбора = СтрЗаменить(Документы.БюджетЗакупокАвтомобилей.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения), "&", "&Модель");
		СтрокаУсловияОтбора = СтрЗаменить(УсловиеОтбора, "#", " ТаблицаДанных.Автомобиль.Модель");
		ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура("Модель", ЭлементОтбора.ПравоеЗначение));
		СтрокаУсловияОтбораДляПартий = СтрокаУсловияОтбораДляПартий + Символы.ПС+"И "+СтрокаУсловияОтбора;
	КонецЕсли;
	
	Если НЕ ПоМоделям Тогда
		ЭлементОтбора = ДеревоОтбора.Строки.Найти("ВариантКомплектации", "ЛевоеЗначение");
		Если ЭлементОтбора.Использование Тогда
			УсловиеОтбора = СтрЗаменить(Документы.БюджетЗакупокАвтомобилей.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения), "&", "&ВариантКомплектации");
			СтрокаУсловияОтбора = СтрЗаменить(УсловиеОтбора, "#", " ТаблицаДанных.Автомобиль.ВариантКомплектации");
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура("ВариантКомплектации", ЭлементОтбора.ПравоеЗначение));
			СтрокаУсловияОтбораДляПартий = СтрокаУсловияОтбораДляПартий + Символы.ПС+"И "+СтрокаУсловияОтбора;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаУсловияОтбораДляПартий = СтрЗаменить(СтрокаУсловияОтбораДляПартий,"ТаблицаДанных","ОстаткиАвтомобилей");
	
	ЭлементОтбора = ДеревоОтбора.Строки.Найти("ПодразделениеЗакупки", "ЛевоеЗначение");
	Если ЭлементОтбора.Использование Тогда
		
		СтрокаУсловия=СтрЗаменить(СтрЗаменить(Документы.БюджетЗакупокАвтомобилей.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения),"#","ОстаткиАвтомобилей.СкладКомпании.ПодразделениеКомпании"),"&","&Подразделение");
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОстаткиАвтомобилей.Партия КАК Партия             
		|ИЗ
		|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
		|ГДЕ
		| "+СтрокаУсловия+"          
		|	И ОстаткиАвтомобилей.Период <= &ДатаПланирования
		|	И ОстаткиАвтомобилей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОстаткиАвтомобилей.Количество <> 0
		|  "+СтрокаУсловияОтбораДляПартий;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Подразделение", ЭлементОтбора.ПравоеЗначение);
		Запрос.УстановитьПараметр("ДатаПланирования", ДатаПланирования);
		Запрос.УстановитьПараметр("Модель", ДеревоОтбора.Строки.Найти("Модель", "ЛевоеЗначение").ПравоеЗначение);
		Если НЕ ПоМоделям Тогда
			Запрос.УстановитьПараметр("ВариантКомплектации", ДеревоОтбора.Строки.Найти("ВариантКомплектации", "ЛевоеЗначение").ПравоеЗначение);
		КонецЕсли;
		
		Партии = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Партия");
		ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", " ТаблицаДанных.Партия в (&Партии) ", Новый Структура("Партии", Партии));
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ИмяТаблицы", "ПродажиАвтомобилей");
	
	
	ЭлементОтбора = ДеревоОтбора.Строки.Найти("Модель", "ЛевоеЗначение");
	Если ЭлементОтбора.Использование Тогда
		УсловиеОтбора = СтрЗаменить(Документы.БюджетЗакупокАвтомобилей.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения), "&", "&Модель");
		СтрокаУсловияОтбораЦенАвтомобиля = СтрЗаменить(УсловиеОтбора, "#", " Автомобиль.Модель");
		СтрокаУсловияОтбораЦенМодели = СтрЗаменить(УсловиеОтбора, "#", " Автомобиль");
		ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ОтборыДляЦенАвтомобиля", СтрокаУсловияОтбораЦенАвтомобиля, Новый Структура());
		ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ОтборыДляЦенМодели", СтрокаУсловияОтбораЦенМодели, Новый Структура());
	КонецЕсли;
	
	Если НЕ ПоМоделям Тогда
		ЭлементОтбора = ДеревоОтбора.Строки.Найти("ВариантКомплектации", "ЛевоеЗначение");
		Если ЭлементОтбора.Использование Тогда
			УсловиеОтбора = СтрЗаменить(Документы.БюджетЗакупокАвтомобилей.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения), "&", "&ВариантКомплектации");
			СтрокаУсловияОтбораЦенАвтомобиля = СтрЗаменить(УсловиеОтбора, "#", " Автомобиль.ВариантКомплектации");
			СтрокаУсловияОтбораЦенМодели = СтрЗаменить(УсловиеОтбора, "#", " ВариантКомплектации");
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ОтборыДляЦенАвтомобиля", СтрокаУсловияОтбораЦенАвтомобиля, Новый Структура());
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ОтборыДляЦенМодели", СтрокаУсловияОтбораЦенМодели, Новый Структура());
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции // ПолучитьДополнительныеПараметрыЗапроса()

// Формирует дерево значений для прогнозирования по переданным параметрам.
//
&НаСервере
Процедура Сформировать()
	
	Автомобили.ПолучитьЭлементы().Очистить();
	РабочийТипЦен = ТипЦен;
	ВВалютеУчета  = ТипЦен.ВВалютеУчета;
	Периодичность = СценарийПланирования.Периодичность;
	КоличествоПрошлыхПериодов = КоличествоПериодов*КоличествоСезонов;
	
	Если КоличествоПрошлыхПериодов < 2 Тогда
		ОбщегоНазначения.СообщитьПользователю(Нстр("ru = 'Построение математической модели невозможно.'"));
		Возврат;
	КонецЕсли;
	
	Если МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Полиномиальный Тогда
		Если КоличествоПрошлыхПериодов < Параметр1 * Параметр1 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					Нстр("ru = 'Для ряда, содержащего только %1 элементов, полином степени %2 не может быть построен. %3 Необходимо увеличить количество анализируемых периодов до %4.'"),
					 СокрЛП(КоличествоПрошлыхПериодов),
					 СокрЛП(Параметр1),
					 Символы.ПС,
					 (Параметр1*Параметр1)
				)
			);
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыЗапроса();
	МаксКоличествоПериодов = ПланированиеСервер.ПолучитьМаксимальноеКоличествоПериодов(ЭтотОбъект, ДополнительныеПараметры, ?(ПоМоделям,"Автомобиль.Модель", "Автомобиль.ВариантКомплектации"));
	
	Если НеУчитыватьПериодыБезДанных Тогда
		Если МаксКоличествоПериодов < 2 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					Нстр("ru = 'Максимально допустимое количество периодов для анализа по продажам для текущего планируемого периода: %1. %2Построение математической модели невозможно! Увеличьте количество анализируемых периодов.'"),
					СокрЛП(МаксКоличествоПериодов),
					Символы.ПС
				)
			);
			Возврат;
		КонецЕсли;
		Если МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Полиномиальный Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					Нстр("ru = 'Максимально допустимое количество периодов для анализа по продажам для текущего планируемого периода: %1. %2Полином степени %3 не может быть построен! Необходимо увеличить количество анализируемых периодов.'"),
					 СокрЛП(МаксКоличествоПериодов),
					 Символы.ПС,
					 СокрЛП(Параметр1)
				)
			);
			Возврат;
		КонецЕсли; 
	ИначеЕсли (((КоличествоСезонов - 1) * 12) + (КоличествоПериодов)) > МаксКоличествоПериодов Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				Нстр("ru = 'Максимально допустимое количество периодов для анализа по продажам для текущего планируемого периода: %1 %2.'"),
				СокрЛП(МаксКоличествоПериодов),
				ПланированиеСервер.ВернутьСтрокуКоличествоПериодовДляАнализа(МаксКоличествоПериодов, Периодичность)
			)
		);
		
		КоличествоПериодов = Мин(МаксКоличествоПериодов, КоличествоПериодов);
		КоличествоСезонов  = Мин(КоличествоСезонов, Макс(Цел(МаксКоличествоПериодов / 12), 1));
		
		УправлениеДиалогомСервер("МодельПрогнозирования");
		Возврат;
		
	КонецЕсли;
	
	УчитыватьСебестоимость = ПланированиеСебестоимости;
	
	// Получим данные за период
	ТекстЦенаАвтомобиля = "ЦеныАвтомобилей.Цена";
	ТекстЦенаМодели = "ЦеныМоделей.Цена";
	// Если расчетная цена получим базовую цену
	Если РабочийТипЦен.Рассчитывается Тогда
		Пока РабочийТипЦен.Рассчитывается Цикл
			ТекстЦенаАвтомобиля = "("+ТекстЦенаАвтомобиля+"+"+ТекстЦенаАвтомобиля+"/100*"+РабочийТипЦен.ПроцентСкидкиНаценки+")";
			ТекстЦенаМодели = "("+ТекстЦенаМодели+"+"+ТекстЦенаМодели+"/100*"+РабочийТипЦен.ПроцентСкидкиНаценки+")";
			РабочийТипЦен = РабочийТипЦен.БазовыйТипЦен;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураПолей = Новый Структура;
	
	ТекстОтбора = "";
	Если ДополнительныеПараметры.Свойство("ОтборПоПодразделению") Тогда
		ТекстОтбора = Символы.ПС+" И "+ДополнительныеПараметры.ОтборПоПодразделению;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ДопОтборы") Тогда
		ТекстОтбора = ТекстОтбора+Символы.ПС+"И "+ДополнительныеПараметры.ДопОтборы.ТекстОбора;
	КонецЕсли;
	
	ТекстОтбораЦенАвтомобиля = "";
	ТекстОтбораЦенМоделей = "";
	Если ДополнительныеПараметры.Свойство("ОтборыДляЦенАвтомобиля") Тогда
		ТекстОтбораЦенАвтомобиля = Символы.ПС+"И "+ДополнительныеПараметры.ОтборыДляЦенАвтомобиля.ТекстОбора;
		ТекстОтбораЦенМоделей	 = Символы.ПС+"И "+ДополнительныеПараметры.ОтборыДляЦенМодели.ТекстОбора;
	КонецЕсли;
	
	ТекстЗапроса = "";
	СтрПериодичность = СокрЛП(Периодичность);
	
	ИмяИзмерения = "Модель";
	Представление = "ТаблицаДанных.Автомобиль.Модель.Наименование КАК Представление,";
	
	ИмяИзмерения = "";
	Если ПоМоделям Тогда
		ТекИзмерения	= "ТаблицаДанных.Автомобиль.Модель КАК Модель";
		ТекГруппировка	= "ТаблицаДанных.Автомобиль.Модель";
		Представление	= "ТаблицаДанных.Автомобиль.Модель.Наименование КАК Представление,";
		ИмяИзмерения	= "Модель";
		СтруктураПолей.Вставить("Измерение", "Модель");
		Измерение		= "";
	Иначе
		ТекИзмерения	= "ТаблицаДанных.Автомобиль.Модель КАК Модель,
					|	ТаблицаДанных.Автомобиль.ВариантКомплектации КАК ВариантКомплектации";
		ТекГруппировка	= "ТаблицаДанных.Автомобиль.Модель,
					|	ТаблицаДанных.Автомобиль.ВариантКомплектации";
		Представление	= "ТаблицаДанных.Автомобиль.Модель.Наименование + ЕСТЬNULL("" ("" + ТаблицаДанных.Автомобиль.ВариантКомплектации.Наименование+"")"","""") КАК Представление,";
		Измерение		= "ТаблицаДанных.Автомобиль.Модель.Наименование + ЕСТЬNULL("" ("" + ТаблицаДанных.Автомобиль.ВариантКомплектации.Наименование+"")"","""") КАК Измерение,";
		ИмяИзмерения	= "ВариантКомплектации";
		СтруктураПолей.Вставить("Поля", Новый Структура("ВариантКомплектации, Модель"));
		СтруктураПолей.Вставить("Измерение", "Измерение");
	КонецЕсли;
	
	СтруктураПолей.Вставить("Цена");
	Если УчитыватьСебестоимость Тогда
		СтруктураПолей.Вставить("СебестоимостьУпр");
	КонецЕсли;
		
		ТекстЗапроса ="
		|	ВЫБРАТЬ
		|	"+ТекИзмерения+",
		|	"+Измерение+"
		|	"+Представление+"
		|	НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, "+СтрПериодичность+") КАК Период,
		|	"+Строка(Справочники.СтавкиНДС.ОсновнаяСтавкаНДС.Ставка)+" КАК Ставка,
		|	СУММА("+?(ПоказательПланирования, "ТаблицаДанных.Количество", "ТаблицаДанных.СуммаУпр")+") КАК Показатель,
		|	СУММА(ТаблицаДанных.Количество) КАК Количество,
		|	СУММА(ТаблицаДанных.СуммаУпр) КАК СуммаУпр,
		|   СУММА(ТаблицаДанных.СебестоимостьУпр) КАК СебестоимостьУпр,
		|	СРЕДНЕЕ(ВЫБОР КОГДА ЕСТЬNULL("+ТекстЦенаАвтомобиля+", 0) <> 0 ТОГДА
		|		"+ТекстЦенаАвтомобиля+" * ЕСТЬNULL(КурсыВалютАвтомобиля.Курс, 0) / ЕСТЬNULL(КурсыВалютАвтомобиля.Кратность, 1)  / &КурсУпрВалюты
		|	КОГДА ЕСТЬNULL("+ТекстЦенаМодели+", 0) <> 0 ТОГДА
		|		"+ТекстЦенаМодели+" * ЕСТЬNULL(КурсыВалютМодели.Курс, 0) / ЕСТЬNULL(КурсыВалютМодели.Кратность, 1) / &КурсУпрВалюты
		|	КОГДА ТаблицаДанных.Количество<>0 ТОГДА
		|		ТаблицаДанных.СуммаУпр / ТаблицаДанных.Количество
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ) КАК Цена
		|
		|ПОМЕСТИТЬ 
		|	ТаблицаРегистра
		|
		|ИЗ
		|	РегистрНакопления.ПродажиАвтомобилей КАК ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныАвтомобилей.СрезПоследних(&ДатаДокумента, ТипЦен = &ТипЦен И Автомобиль ССЫЛКА Справочник.Автомобили И ВариантКомплектации = ЗНАЧЕНИЕ(Справочник.ВариантыКомплектации.ПустаяСсылка) "+ТекстОтбораЦенАвтомобиля+") КАК ЦеныАвтомобилей
		|			ПО ТаблицаДанных.Автомобиль = ЦеныАвтомобилей.Автомобиль"+?(ВВалютеУчета,"
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютАвтомобиля
		|			ПО ТаблицаДанных.Автомобиль.ВалютаУчета = КурсыВалютАвтомобиля.Валюта","
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВыбВалютаЦены) КАК КурсыВалютАвтомобиля
		|			ПО ИСТИНА")+"
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныАвтомобилей.СрезПоследних(&ДатаДокумента, ТипЦен = &ТипЦен И Автомобиль ССЫЛКА Справочник.Модели" + ТекстОтбораЦенМоделей + ") КАК ЦеныМоделей
		|			ПО ТаблицаДанных.Автомобиль.Модель = ЦеныМоделей.Автомобиль
		|			И ТаблицаДанных.Автомобиль.ВариантКомплектации = ЦеныМоделей.ВариантКомплектации"+?(ВВалютеУчета,"
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютМодели
		|			ПО ТаблицаДанных.Автомобиль.ВариантКомплектации.ВалютаУчета = КурсыВалютАвтомобиля.Валюта","
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВыбВалютаЦены) КАК КурсыВалютМодели
		|			ПО ИСТИНА")+"
		|ГДЕ
		| #ТекстОтбора# 
		|	"+ТекстОтбора+"
		|
		|СГРУППИРОВАТЬ ПО
		|	"+ТекГруппировка+",
		|	НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, "+СтрПериодичность+")
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаДанных.Количество)<>0";
	
	ПараметрыДляАнализаДат = Новый Структура;
	ПараметрыДляАнализаДат.Вставить("Периодичность", Периодичность);
	ПланированиеСервер.ПолучитьПериодыПланирования(ЭтаФорма, ПараметрыДляАнализаДат);
	
	// Выполняем запрос
	Запрос = Новый Запрос();
	МенеджерДанныхРегистра = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерДанныхРегистра;
	
	Для Каждого ТекПараметр Из ПараметрыДляАнализаДат.СтруктураСезонов Цикл
		Запрос.УстановитьПараметр(ТекПараметр.Ключ, ТекПараметр.Значение);
	КонецЦикла;
	
	Если ДополнительныеПараметры.Свойство("ДопОтборы") Тогда
		Для Каждого ТекПараметр Из ДополнительныеПараметры.ДопОтборы.Параметры Цикл
			Запрос.УстановитьПараметр(ТекПараметр.Ключ, ТекПараметр.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "#ТекстОтбора#", ПараметрыДляАнализаДат.ТекстОтбора);
	Запрос.УстановитьПараметр("ДатаДокумента",       ДатаДокумента);
	
	Курс = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(Константы.ВалютаУправленческогоУчетаКомпании.Получить(), ДатаДокумента);
	
	Запрос.УстановитьПараметр("ТипЦен", РабочийТипЦен);
	Запрос.УстановитьПараметр("КурсУпрВалюты", ?(Курс=0, 1, Курс));
	Запрос.УстановитьПараметр("ВыбВалютаЦены", РабочийТипЦен.ВалютаЦены);
	Запрос.УстановитьПараметр("КоличествоПериодов",  КоличествоПрошлыхПериодов);
	Если ДополнительныеПараметры.Свойство("Подразделение") Тогда
		Запрос.УстановитьПараметр("Подразделение",  ДополнительныеПараметры.Подразделение);
	КонецЕсли;
	
	Запрос.Выполнить();
	
	НаборАвтомобилей = РеквизитФормыВЗначение("Автомобили");
	
	// Выполняем запрос, заполняем дерево значений	
	ПараметрыДляЗаполненияДЗ = Новый Структура;
	ПараметрыДляЗаполненияДЗ.Вставить("ДеревоЗначений",         	 НаборАвтомобилей);
	ПараметрыДляЗаполненияДЗ.Вставить("Периодичность",       		 Периодичность);
	ПараметрыДляЗаполненияДЗ.Вставить("СтруктураСезонов",			 ПараметрыДляАнализаДат.СтруктураСезонов);
	ПараметрыДляЗаполненияДЗ.Вставить("ПериодКакКоличество", 		 Ложь);
	ПараметрыДляЗаполненияДЗ.Вставить("НеУчитыватьПериодыБезДанных", НеУчитыватьПериодыБезДанных);
	ПараметрыДляЗаполненияДЗ.Вставить("ДатаПланирования", 			 ДатаПланирования);
	
	Если (НЕ НеУчитыватьПериодыБезДанных) И КоличествоСезонов>1 Тогда
		ТекстЗапросаДополнения = "";
		Если ПоМоделям Тогда
			ТекстЗапросаДополнения = "(ВЫБРАТЬ
			|	Модели.Ссылка КАК Модель
			|ИЗ
			|	Справочник.Модели КАК Модели
			|ГДЕ
			|	Модели.Ссылка В(&ОтборДополнения)) КАК ТаблицаДополнения
			|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ*
			|ИЗ
			|	ТаблицаРегистра КАК Таблица
			|ГДЕ
			|	Таблица.Период МЕЖДУ &ДатаНачала И &ДатаКонца) КАК ТаблицаРегистра
			| ПО ТаблицаДополнения.Модель = ТаблицаРегистра.Модель";
			
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Модель КАК Модель
			|ИЗ
			|	ТаблицаРегистра КАК ТаблицаРегистра";
		Иначе
			ТекстЗапросаДополнения = "(ВЫБРАТЬ
			|	ВариантыКомплектации.Ссылка КАК ВариантКомплектации
			|ИЗ
			|	Справочник.ВариантыКомплектации КАК ВариантКомплектации
			|ГДЕ
			|	ВариантыКомплектации.Ссылка В(&ОтборДополнения)) КАК ТаблицаДополнения
			|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ*
			|ИЗ
			|	ТаблицаРегистра КАК Таблица
			|ГДЕ
			|	Таблица.Период МЕЖДУ &ДатаНачала И &ДатаКонца) КАК ТаблицаРегистра
			| ПО ТаблицаДополнения.ВариантКомплектации = ТаблицаРегистра.ВариантКомплектации";
			
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВариантКомплектации КАК ВариантКомплектации
			|ИЗ
			|	ТаблицаРегистра КАК ТаблицаРегистра";
		КонецЕсли;
		ПараметрыДляЗаполненияДЗ.Вставить("ТекстЗапросаДополнения", ТекстЗапросаДополнения);
		ПараметрыДляЗаполненияДЗ.Вставить("ОтборДополнения", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(ИмяИзмерения));
		
	КонецЕсли;
	
	ДеревоАвтомобилей = ПланированиеСервер.ПолучитьДеревоДанных(ЭтотОбъект, ПараметрыДляЗаполненияДЗ, СтруктураПолей, МенеджерДанныхРегистра);
	АдресДереваКэш = ПоместитьВоВременноеХранилище(ДеревоАвтомобилей);
	ПереполучитьМодель();
	ПереполучитьДанные = Ложь;
	
КонецПроцедуры // Сформировать()

// Обработчик для заполнения данными дерева "Автомобили"
//
&НаСервере
Процедура ПереполучитьМодель()
	
	ДеревоАвтомобилей = ПолучитьИзВременногоХранилища(АдресДереваКэш);
	Элементы.АвтомобилиОшибка.ТекстПодвала = "";
	
	Если ДеревоАвтомобилей = Неопределено ИЛИ ДеревоАвтомобилей.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоПрошлыхПериодов = КоличествоПериодов*КоличествоСезонов;
	
	Если МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Полиномиальный Тогда
		Если КоличествоПрошлыхПериодов < Параметр1 * Параметр1 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					Нстр("ru = 'Для ряда, содержащего только %1 элементов, полином степени %2 не может быть построен! %3Необходимо увеличить количество анализируемых периодов до %4'"),
					СокрЛП(КоличествоПрошлыхПериодов),
					СокрЛП(Параметр1),
					Символы.ПС,
					(Параметр1*Параметр1)
				)
			);
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	Если НеУчитыватьПериодыБезДанных Тогда
		Если МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Полиномиальный Тогда
			Если МаксКоличествоПериодов < Параметр1 * Параметр1 Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						Нстр("ru = 'Максимально допустимое количество периодов для анализа по продажам для текущего планируемого периода: %1. %2 Полином степени %3 не может быть построен! Необходимо увеличить количество анализируемых периодов.'"),
						СокрЛП(МаксКоличествоПериодов),
						Символы.ПС,
						СокрЛП(Параметр1)
					)
				);
				Возврат;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Если МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Сглаживанием Тогда
		Параметр1 = ?(Параметр1 <= 0, 0.5, Параметр1);
		Параметр2 = ?(Параметр2 <= 0, 0.5, Параметр2);
		Если РасчетСезонности Тогда
			Параметр3 = ?(Параметр3 <= 0, 0.5, Параметр3);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыДляЗаполненияДЗ = Новый Структура;
	ПараметрыДляЗаполненияДЗ.Вставить("ДеревоЗначений",   ДеревоАвтомобилей.Скопировать());
	ПараметрыДляЗаполненияДЗ.Вставить("Периодичность",    Периодичность);
	ПараметрыДляЗаполненияДЗ.Вставить("ДатаПланирования", ДатаПланирования);
	
	ДеревоРезультата = ПланированиеСервер.ПолучитьДеревоПрогноза(ЭтотОбъект, ПараметрыДляЗаполненияДЗ);
	
	// Установим общую ошибку в подвале табличного поля
	Если ДеревоРезультата.Строки.Итог("Ошибка")=0 Тогда
		Элементы.АвтомобилиОшибка.ТекстПодвала = "";
	Иначе
		Элементы.АвтомобилиОшибка.ТекстПодвала = "Ср.ариф.ошибка: " + Окр(ДеревоРезультата.Строки.Итог("Ошибка") - ДеревоРезультата.Строки[0].Ошибка / ?(ДеревоРезультата.Строки.Количество()=0,1,ДеревоРезультата.Строки.Количество()), 3);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоРезультата, "Автомобили");
	
	УстановитьУсловноеОформление();
	
	АдресДереваКэш = ПоместитьВоВременноеХранилище(ДеревоАвтомобилей);
	
КонецПроцедуры //ПереполучитьМодель()

// Обработчик для вывода интервала в виде надписи на форме
//
&НаСервере
Процедура ВывестиПредставлениеПериода()
	
	Периодичность = СценарийПланирования.Периодичность;
	Если Периодичность=Перечисления.ПериодичностьПланирования.Месяц Тогда
		ПредставлениеПериода = Формат(ДатаПланирования, "ДФ='ММММ гггг ""г.""'");
	ИначеЕсли Периодичность=Перечисления.ПериодичностьПланирования.Квартал Тогда
		ПредставлениеПериода = Формат(ДатаПланирования, "ДФ='к ""квартал"" гггг ""г.""'");
	ИначеЕсли Периодичность=Перечисления.ПериодичностьПланирования.Год Тогда
		ПредставлениеПериода = Формат(ДатаПланирования, "ДФ='гггг ""г.""'");
	КонецЕсли;
	
	ПредставлениеПериода = "Период планирования "+ПредставлениеПериода+" по данным за "+ПланированиеСервер.ВывестиПредставлениеПериода(ЭтотОбъект, Периодичность, ДатаПланирования);
	Элементы.НадписьПредставлениеПериода.Заголовок = ПредставлениеПериода;
	
КонецПроцедуры // ВывестиПредставлениеПериода()

// Управляет видимостью, доступностью, заголовками,максимальными и минимальными значениями кнопок регулирования.
//
// Параметры:
//  Элемент - строка, имя элемента формы.
//
&НаСервере
Процедура УправлениеДиалогомСервер(Элемент="")
	
	Если Элемент="МодельПрогнозирования" Тогда
		
		// Сделаем доступной надпись
		Если МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Средним  ИЛИ
			МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Линейный ИЛИ
			МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Экспоненциальный Тогда
			
			Элементы.ГруппаПараметр1.Доступность = Ложь;
			Элементы.ГруппаПараметр2.Доступность = Ложь;
			Элементы.ГруппаПараметр3.Доступность = Ложь;
			Элементы.НадписьКомментарий1.Заголовок = "";
			Элементы.НадписьКомментарий2.Заголовок = "";
			Элементы.НадписьКомментарий3.Заголовок = "";
			//ЭлементыФормы.ПанельПараметрыМодели.Свертка = РежимСверткиЭлементаУправления.Верх;
			
		ИначеЕсли МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Сглаживанием Тогда
			//ЭлементыФормы.ПанельПараметрыМодели.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			Элементы.ГруппаПараметр1.Доступность = Истина;
			Элементы.ГруппаПараметр2.Доступность = Истина;
			
			Элементы.Параметр1.Доступность = Истина;
			Элементы.Параметр2.Доступность = Истина;
			Элементы.Параметр1.Заголовок = "Постоянная сглаживания для данных";
			Элементы.Параметр2.Заголовок = "Постоянная сглаживания тренда";
			
			Если ПланированиеСервер.УчитыватьСезоннуюКомпоненту(ЭтотОбъект) Тогда
				Элементы.ГруппаПараметр3.Доступность       = Истина;
				Элементы.НадписьКомментарий3.Заголовок = "[0;1] Оценка сезонных эффектов";
			Иначе
				Элементы.ГруппаПараметр3.Доступность       = Ложь;
				Элементы.НадписьКомментарий3.Заголовок = "<Выбрано недостаточное количество анализируемых периодов>";
			КонецЕсли;
			
			// Установим комментарии
			Элементы.НадписьКомментарий1.Заголовок = "[0;1] Оценка текущего уровня временного ряда";
			Элементы.НадписьКомментарий2.Заголовок = "[0;1] Оценка наклона временного ряда";
			
			Если Параметр1<=0 ИЛИ Параметр1>1 Тогда
				Параметр1=0.5;
			КонецЕсли;
			
			Если Параметр2<=0 ИЛИ Параметр2>1 Тогда
				Параметр2=0.5;
			КонецЕсли;
			
			Если Параметр3<=0 ИЛИ Параметр3>1 Тогда
				Параметр3=0.5;
			КонецЕсли;
			
			// формат ввода
			Элементы.Параметр1.ФорматРедактирования = "ЧЦ=10; ЧДЦ=4";
			Элементы.Параметр1.МаксимальноеЗначение = 1;
			Элементы.Параметр1.МинимальноеЗначение  = 0;
			
		ИначеЕсли МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Полиномиальный Тогда
			//ЭлементыФормы.ПанельПараметрыМодели.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			Элементы.ГруппаПараметр1.Доступность = Истина;
			Элементы.Параметр1.Доступность      = Истина;
			Элементы.Параметр1.Заголовок = "Степень полинома";
			Параметр1 = ?(Параметр1<2,3,Параметр1);
			
			// Остальные скроем
			Элементы.ГруппаПараметр2.Доступность = Ложь;
			Элементы.ГруппаПараметр3.Доступность = Ложь;
			Элементы.НадписьКомментарий3.Заголовок = "<Не используется для данной модели прогнозирования>";
			
			// Установим комментарии
			Элементы.НадписьКомментарий1.Заголовок = "Квадрат степени полинома должен быть меньше количества анализируемых периодов";
			Элементы.НадписьКомментарий2.Заголовок = "<Не используется для данной модели прогнозирования>";
			
			// Установим формат ввода
			Элементы.Параметр1.ФорматРедактирования = "ЧЦ=1; ЧДЦ=0";
			Элементы.Параметр1.МаксимальноеЗначение = 6;
			Элементы.Параметр1.МинимальноеЗначение  = 2; 
			
		КонецЕсли;
		
		Если МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Линейный        ИЛИ 
			МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Экспоненциальный ИЛИ
			МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Полиномиальный   ИЛИ
			МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Сглаживанием Тогда
			Если ПланированиеСервер.УчитыватьСезоннуюКомпоненту(ЭтотОбъект) Тогда 
				Элементы.РасчетСезонности.Доступность = Истина;
			Иначе
				Элементы.РасчетСезонности.Доступность = Ложь;
				РасчетСезонности = Ложь;
			КонецЕсли;
		Иначе
			Элементы.РасчетСезонности.Доступность = Ложь;
			РасчетСезонности = Ложь;
		КонецЕсли;
		
		ВывестиПредставлениеПериода();
		
	ИначеЕсли Элемент="ПоказательПланирования" Тогда
		// Установим названия колонок
		Если ПоказательПланирования Тогда
			//Количество
			Элементы.АвтомобилиСуммаФакт.Заголовок         = "Количество (факт.знач.)";
			Элементы.АвтомобилиСуммаТренд.Заголовок        = "Количество (знач.модели)";
			Элементы.АвтомобилиСуммаОграниченная.Заголовок = "Количество (огран.)";
		Иначе
			// Сумма (упр.)
			Элементы.АвтомобилиСуммаФакт.Заголовок         = "Сумма упр. (факт.знач.)";
			Элементы.АвтомобилиСуммаТренд.Заголовок        = "Сумма упр. (знач.модели)";
			Элементы.АвтомобилиСуммаОграниченная.Заголовок = "Сумма упр. (огран.)";
		КонецЕсли;
		
	КонецЕсли;
	
	// Данные нужно пересчитать
	Если Автомобили.ПолучитьЭлементы().Количество() <> 0 Тогда
			Автомобили.ПолучитьЭлементы().Очистить();
			 // Спрогнозируем снова
			Если ПереполучитьДанные Тогда
				Сформировать();
			Иначе
				ПереполучитьМодель();
			КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УправлениеДиалогом()

// Обработчик для формирования результата
//
&НаСервере
Процедура ФормированиеРезультата()
	
	ТаблЧасть      = Результат;
	ДеревоЗначений = РеквизитФормыВЗначение("Автомобили");
	
	// Очистим табличную часть документа
	ТаблЧасть.Очистить();
	
	// Рассчитаем коэффициент пересчета из валюты Упр. в валюту Рег.
	КоэффициентПересчетаВалют = ПланированиеСервер.ПолучитьКоэффициентПересчетаВалют(ДатаДокумента);
	
	// Начнем заполнение
	Для Сч=1 По ДеревоЗначений.Строки.Количество()-1 Цикл
		
		ТекСтрока = ДеревоЗначений.Строки[Сч];
		НовСтрока                     = ТаблЧасть.Добавить();
		НовСтрока.Модель              = ТекСтрока.Модель;
		НовСтрока.ВариантКомплектации = ТекСтрока.ВариантКомплектации;
		НовСтрока.Цена                = ТекСтрока.Цена;
		
		Если НовСтрока.Цена=0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					Нстр("ru = 'Для позиции: <%1> не установлена цена. Цена рассчитана как средняя цена за период'"),
					ТекСтрока.Представление
				)
			);
			НовСтрока.Цена = ТекСтрока.СрЦенаЗаПериод;
		КонецЕсли;
		
		Если НовСтрока.Цена=0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Показатель должен быть не меньше нуля.
		ТекСтрока.ПрогнозноеЗначение = Макс(0, ТекСтрока.ПрогнозноеЗначение);
		Если ПоказательПланирования Тогда
			НовСтрока.Количество = ТекСтрока.ПрогнозноеЗначение;
		Иначе
			НовСтрока.Количество = ТекСтрока.ПрогнозноеЗначение / НовСтрока.Цена;
		КонецЕсли;
		
		Если СпособОкругления = 1 Тогда
			НовСтрока.Количество = Окр(НовСтрока.Количество, 0, 1);
		ИначеЕсли СпособОкругления = 2 Тогда
			НовСтрока.Количество = Окр(НовСтрока.Количество+0.5, 0, 0);
		ИначеЕсли СпособОкругления = 3 Тогда
			НовСтрока.Количество = Цел(НовСтрока.Количество);
		КонецЕсли; 
		
		НовСтрока.СуммаВсегоУпр = НовСтрока.Количество * НовСтрока.Цена;
		НовСтрока.СуммаНДС = НовСтрока.СуммаВсегоУпр  * КоэффициентПересчетаВалют * ТекСтрока.Ставка/100;
		
		// Себестоимость
		Если ПланированиеСебестоимости Тогда
			НовСтрока.НормативнаяЦена  = ТекСтрока.НормативнаяЦена;
			НовСтрока.СебестоимостьУпр = НовСтрока.НормативнаяЦена * НовСтрока.Количество;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик изменения условного оформления для строк дерева "Автомобили"
//
&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭтотОбъект.УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Автомобили");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автомобили.Представление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Итого по всем позициям: ";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоНебесноГолубой);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт",    Новый Шрифт(, 9, Истина));
	
	Для Каждого ТекЭлемент Из Автомобили.ПолучитьЭлементы() Цикл
		
		Если ТекЭлемент <> Автомобили.ПолучитьЭлементы()[0] Тогда
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Автомобили");
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автомобили.Представление");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = ТекЭлемент.Представление;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.АкварельноСиний);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция определения того, что отбор выполняетсяпо списку значений
//
&НаКлиенте
Функция ОтборПоСписку(ВидСравненияОтбора)
	
	РезультатОтбора = Ложь;
	Если ВидСравненияОтбора = ВидСравнения.ВСписке ИЛИ 
		ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии ИЛИ
		ВидСравненияОтбора = ВидСравнения.НеВСписке ИЛИ 
		ВидСравненияОтбора= ВидСравнения.НеВСпискеПоИерархии Тогда
		
		РезультатОтбора = Истина;
		
	КонецЕсли;
	
	Возврат РезультатОтбора;
	
КонецФункции //ОтборПоСписку()

// Обработчик окончания выбора значения отбора
//
&НаКлиенте
Процедура ОповещениеВыбораЗначенияОтбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("СписокЗначений") Тогда
		
		ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.ПравоеЗначение = РезультатЗакрытия;
		
	КонецЕсли;
	Элементы.Отбор.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры //ОповещениеВыбораЗначенияОтбора()

// Обработчик формирования данных для вывода графика
//
&НаСервере
Функция СформироватьДанныеДляГрафика(ПредставлениеСтроки)
	
	ДеревоАвтомобилей = РеквизитФормыВЗначение("Автомобили");
	
	ДанныеГрафика = Новый Массив;
	
	Для Каждого ТекСтрока Из ДеревоАвтомобилей.Строки Цикл
		
		Если ТекСтрока.Представление = ПредставлениеСтроки Тогда
			
			Для Каждого Строка Из ТекСтрока.Строки Цикл
				ДанныеСтроки = Новый Структура("Представление,СуммаФакт,СуммаТренд", Строка.Представление, Строка.СуммаФакт, Строка.СуммаТренд);
				ДанныеГрафика.Добавить(ДанныеСтроки);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеГрафика;
	
КонецФункции // СформироватьДанныеДляГрафика()

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ОТБОРОМ

// Добавляем дополнительные отборы
//
&НаСервере
Процедура НастроитьПоляОтбора(Подразделение)
	
	// заполним быстрые отборы
	ДеревоОтбор = ЭтотОбъект.Отбор.ПолучитьЭлементы();
	
	НовыйОтбор = ДеревоОтбор.Добавить();
	НовыйОтбор.Использование  = Истина;
	НовыйОтбор.ЛевоеЗначение  = "ПодразделениеОтгрузки";
	НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
	НовыйОтбор.ПравоеЗначение = Подразделение;
	НовыйОтбор.Заголовок      = "Подразделение отгрузки";
	
	НовыйОтбор = ДеревоОтбор.Добавить();
	НовыйОтбор.Использование  = Ложь;
	НовыйОтбор.ЛевоеЗначение  = "ПодразделениеЗакупки";
	НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
	НовыйОтбор.ПравоеЗначение = Справочники.ПодразделенияКомпании.ПустаяСсылка();
	НовыйОтбор.Заголовок      = "Подразделение закупки";
	
	НовыйОтбор = ДеревоОтбор.Добавить();
	НовыйОтбор.Использование  = Ложь;
	НовыйОтбор.ЛевоеЗначение  = "Модель";
	НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
	НовыйОтбор.ПравоеЗначение = Справочники.Модели.ПустаяСсылка();
	НовыйОтбор.Заголовок      = "Модель";
	
	Если НЕ ПоМоделям Тогда
		НовыйОтбор = ДеревоОтбор.Добавить();
		НовыйОтбор.Использование  = Ложь;
		НовыйОтбор.ЛевоеЗначение  = "ВариантКомплектации";
		НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
		НовыйОтбор.ПравоеЗначение = Справочники.ВариантыКомплектации.ПустаяСсылка();
		НовыйОтбор.Заголовок      = "Вариант комплектации";
	КонецЕсли;
	
КонецПроцедуры // НастроитьПолеОтбора()

// Обработчик изменения поля "Вид сравнения" таблицы "Отбор"
//
&НаКлиенте
Процедура ОтборВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.ПравоеЗначение) = Тип("СписокЗначений") И ЗначениеЗаполнено(ТекущиеДанные.ПравоеЗначение) И НЕ ТекущиеДанные.ВидСравнения = ВидСравнения.ВСписке И НЕ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВСписке
		 И НЕ ТекущиеДанные.ВидСравнения = ВидСравнения.ВСпискеПоИерархии И НЕ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
		
		Значение = ТекущиеДанные.ПравоеЗначение[0].Значение;
		ТекущиеДанные.ПравоеЗначение.Очистить();
		ОтборПравоеЗначениеНачалоВыбора(Элементы.ОтборПравоеЗначение, Значение, Истина);
		
	КонецЕсли;
	
КонецПроцедуры // ОтборВидСравненияПриИзменении()

// Обработчик изменения поля "Правое значение" таблицы "Отбор"
//
&НаКлиенте
Процедура ОтборВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокВыбора = Элементы.ОтборВидСравнения.СписокВыбора;
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить(ВидСравнения.Равно,              Строка(ВидСравнения.Равно));
	СписокВыбора.Добавить(ВидСравнения.НеРавно,            Строка(ВидСравнения.НеРавно));
	СписокВыбора.Добавить(ВидСравнения.ВСписке,            Строка(ВидСравнения.ВСписке));
	СписокВыбора.Добавить(ВидСравнения.ВИерархии,          Строка(ВидСравнения.ВИерархии));
	СписокВыбора.Добавить(ВидСравнения.ВСпискеПоИерархии,  Строка(ВидСравнения.ВСпискеПоИерархии));
	СписокВыбора.Добавить(ВидСравнения.НеВСписке,          Строка(ВидСравнения.НеВСписке));
	СписокВыбора.Добавить(ВидСравнения.НеВИерархии,        Строка(ВидСравнения.НеВИерархии));
	СписокВыбора.Добавить(ВидСравнения.НеВСпискеПоИерархии,Строка(ВидСравнения.НеВСпискеПоИерархии));
	
КонецПроцедуры // ОтборВидСравненияНачалоВыбора()

// Обработчик события возникающего на клиенте перед началом изменения таблицы "Отбор".
//
&НаКлиенте
Процедура ОтборПередНачаломИзменения(Элемент, Отказ)
	
	Поле = Элементы.Отбор.ТекущийЭлемент;
	Если Поле.Имя = "ОтборПравоеЗначение" Тогда
		
		СтандартнаяОбработка = Истина;
		ВыбраннаяСтрока      = Неопределено;
		ОтборПравоеЗначениеНачалоВыбора(Элемент, ВыбраннаяСтрока, СтандартнаяОбработка);
		
	ИначеЕсли Поле.Имя = "ОтборВидСравнения" Тогда
		
		СтандартнаяОбработка = Истина;
		ВыбраннаяСтрока      = Неопределено;
		ОтборВидСравненияНачалоВыбора(Элемент, ВыбраннаяСтрока, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры //ОтборПередНачаломИзменения()

// Обработчик события перед окончанием редактирования
//
&НаКлиенте
Процедура ОтборПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ПереполучитьДанные = Истина;
	УправлениеДиалогомСервер();
	
КонецПроцедуры // ОтборПередОкончаниемРедактирования()

// Обработчик изменения поля "Правое значение" таблицы "Отбор"
//
&НаКлиенте
Процедура ОтборПравоеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ТекущиеДанные.Использование = ЗначениеЗаполнено(ТекущиеДанные.ПравоеЗначение);
	
КонецПроцедуры

// Обработчик начала выбора поля "Правое значение" таблицы "Отбор"
//
&НаКлиенте
Процедура ОтборПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтборПоСписку(ТекущиеДанные.ВидСравнения) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ТекущиеДанные.ВидСравнения = ВидСравнения.ВСпискеПоИерархии ИЛИ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
			ТолькоГруппы = Истина;
		Иначе
			ТолькоГруппы = Ложь;
		КонецЕсли;
		
		СписокВыбора =  ТекущиеДанные.ПравоеЗначение;
		
		Если ТекущиеДанные.ЛевоеЗначение = "Модель" Тогда
			СтруктураПараметров = Новый Структура("СписокВыбора, ТипЗначения, ДоступныеЗначения, ТолькоГруппы", СписокВыбора, Новый ОписаниеТипов("СправочникСсылка.Модели"), Неопределено, ТолькоГруппы);
		ИначеЕсли ТекущиеДанные.ЛевоеЗначение = "ВариантКомплектации" Тогда
			СтруктураПараметров = Новый Структура("СписокВыбора, ТипЗначения, ДоступныеЗначения, ТолькоГруппы", СписокВыбора, Новый ОписаниеТипов("СправочникСсылка.ВариантыКомплектации"), Неопределено, ТолькоГруппы);
		ИначеЕсли ТекущиеДанные.ЛевоеЗначение = "ПодразделениеОтгрузки" ИЛИ ТекущиеДанные.ЛевоеЗначение = "ПодразделениеЗакупки" Тогда
			СтруктураПараметров = Новый Структура("СписокВыбора, ТипЗначения, ДоступныеЗначения, ТолькоГруппы", СписокВыбора, Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"), Неопределено, ТолькоГруппы);
		КонецЕсли;
			
		ОписаниеОповещенияВыбораЗначения = Новый ОписаниеОповещения("ОповещениеВыбораЗначенияОтбора", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ОтчетВыборЗначенияОтбораИзСписка", СтруктураПараметров, Элемент,,,, ОписаниеОповещенияВыбораЗначения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		Если ТекущиеДанные.ВидСравнения = ВидСравнения.ВИерархии ИЛИ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВИерархии Тогда
			ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		Иначе
			ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
		КонецЕсли;
		
		Если ТекущиеДанные.ЛевоеЗначение = "ПодразделениеОтгрузки" ИЛИ ТекущиеДанные.ЛевоеЗначение = "ПодразделениеЗакупки" Тогда
			Элементы.ОтборПравоеЗначение.БыстрыйВыбор         = Ложь;
			Элементы.ОтборПравоеЗначение.ОграничениеТипа      = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании");
			Элементы.ОтборПравоеЗначение.КнопкаВыбора         = Истина;
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ВыборГруппИЭлементов;
		ИначеЕсли ТекущиеДанные.ЛевоеЗначение = "Модель" Тогда
			Элементы.ОтборПравоеЗначение.БыстрыйВыбор         = Ложь;
			Элементы.ОтборПравоеЗначение.ОграничениеТипа      = Новый ОписаниеТипов("СправочникСсылка.Модели");
			Элементы.ОтборПравоеЗначение.КнопкаВыбора         = Истина;
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ВыборГруппИЭлементов;
		ИначеЕсли ТекущиеДанные.ЛевоеЗначение = "ВариантКомплектации" Тогда
			Элементы.ОтборПравоеЗначение.БыстрыйВыбор         = Ложь;
			Элементы.ОтборПравоеЗначение.ОграничениеТипа      = Новый ОписаниеТипов("СправочникСсылка.ВариантыКомплектации");
			Элементы.ОтборПравоеЗначение.КнопкаВыбора         = Истина;
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ВыборГруппИЭлементов;
			Если ВыборГруппИЭлементов = ГруппыИЭлементы.Группы Тогда
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеВыбора <> Неопределено Тогда
			ТекущиеДанные.ПравоеЗначение = ДанныеВыбора;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОтборПравоеЗначениеНачалоВыбора()

#КонецОбласти
