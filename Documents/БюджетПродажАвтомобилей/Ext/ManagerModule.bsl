// Модуль менеджера документа "Бюджет продаж автомобилей"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. 
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Автомобили.Итог("СуммаВсегоУпр"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	// Возвращаем сведения об итогах операции.
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используеся в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость выводв только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возращаемая сторка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", 
										Объединить = Ложь, ТолькоОсновныеКонтакты = Истина) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("СценарийПланирования");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Автомобили");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Автомобили.Модель");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеАвтомобили = Новый Массив();
	УникальныеАвтомобили.Добавить("Модель");
	УникальныеАвтомобили.Добавить("ВариантКомплектации");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Автомобили", УникальныеАвтомобили);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	//КонтролируемыеРеквизиты.Вставить("СкладКомпании",         КонтрольПоПодразделению);
	//КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	//
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Автомобили.Количество() > 0);
	
	ОбработкаТабличнойЧастиАвтомобили.ПерезаполнитьЦеныТабличныхЧастей(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СценарийПланированияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("ДатаИзПериода" , Объект.ДатаПланирования);
	Параметры.Вставить("Периодичность" , Объект.СценарийПланирования.Периодичность);
	Параметры.Вставить("Действие"      , 0);
	
	ПланированиеСервер.ПолучитьДатыПланируемогоПериода(Параметры);
	
	Объект.ДатаПланирования = Параметры.ДатаНачала;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтомобили

// Обрабоотчик изменения модели в ТЧ "Автомобили"
//
// Параметры:
//	Объект - ДокументОбъект или Объект формы - Объект для которого происходит изменение
//	Строка - Строка табличной части - Строка тч с измененной моделью
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиМодельПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	УстановитьЦену(Объект, Строка, ПараметрыДействия);
	
	РассчитатьСуммуСтроки("Цена", Объект, Строка, ПараметрыДействия);
КонецПроцедуры

// Обрабоотчик изменения модели в ТЧ "Автомобили"
//
// Параметры:
//	Объект - ДокументОбъект или Объект формы - Объект для которого происходит изменение
//	Строка - Строка табличной части - Строка тч с измененной моделью
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиВариантКомплектацииПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	УстановитьЦену(Объект, Строка, ПараметрыДействия);
	
	РассчитатьСуммуСтроки("Цена", Объект, Строка, ПараметрыДействия);
КонецПроцедуры

// Обрабоотчик изменения модели в ТЧ "Автомобили"
//
// Параметры:
//	Объект - ДокументОбъект или Объект формы - Объект для которого происходит изменение
//	Строка - Строка табличной части - Строка тч с измененной моделью
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	РассчитатьСуммуСтроки("суммаНДС", Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обрабоотчик изменения модели в ТЧ "Автомобили"
//
// Параметры:
//	Объект - ДокументОбъект или Объект формы - Объект для которого происходит изменение
//	Строка - Строка табличной части - Строка тч с измененной моделью
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаВсегоУпрПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	РассчитатьСуммуСтроки("СуммаВсегоУпр", Объект, Строка, ПараметрыДействия=Неопределено);
КонецПроцедуры

// Обрабоотчик изменения модели в ТЧ "Автомобили"
//
// Параметры:
//	Объект - ДокументОбъект или Объект формы - Объект для которого происходит изменение
//	Строка - Строка табличной части - Строка тч с измененной моделью
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	

	РассчитатьСуммуСтроки("Цена", Объект, Строка, ПараметрыДействия);
КонецПроцедуры

// Обрабоотчик изменения модели в ТЧ "Автомобили"
//
// Параметры:
//	Объект - ДокументОбъект или Объект формы - Объект для которого происходит изменение
//	Строка - Строка табличной части - Строка тч с измененной моделью
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	РассчитатьСуммуСтроки("Количество", Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обрабоотчик изменения модели в ТЧ "Автомобили"
//
// Параметры:
//	Объект - ДокументОбъект или Объект формы - Объект для которого происходит изменение
//	Строка - Строка табличной части - Строка тч с измененной моделью
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиНормативнаяЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	РассчитатьСуммуСтроки("НормативнаяЦена", Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обрабоотчик изменения модели в ТЧ "Автомобили"
//
// Параметры:
//	Объект - ДокументОбъект или Объект формы - Объект для которого происходит изменение
//	Строка - Строка табличной части - Строка тч с измененной моделью
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСебестоимостьУпрПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	РассчитатьСуммуСтроки("СебестоимостьУпр", Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// установка цены для модели и варианта комплектации
//
// Параметры:
//	Объект - ДокументОбъект или Объект формы - Объект для которого происходит изменение
//	Строка - Строка табличной части - Строка тч 
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура УстановитьЦену(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	Строка.Цена = ЦенообразованиеСервер.ПолучитьЦенуАвтомобиля(
		Объект.ТипЦен,
		Строка.Модель,
		Строка.ВариантКомплектации,
		Объект.Дата,
		Константы.ВалютаУправленческогоУчетаКомпании.Получить());
КонецПроцедуры

// расчет суммы по строке
//
// Параметры:
//	ТочкаВхода - Строка - направление расчета суммовых показателей строки
//	Объект - ДокументОбъект или ОбъектФормы - Объект расчета
//	Строка - Строка табличной части - строка тч для расчета
//	ПараметрыДействия - Структура - Дополнительные парамтеры расчета.
//	
Процедура РассчитатьСуммуСтроки(ТочкаВхода, Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если ТочкаВхода = "Цена" ИЛИ ТочкаВхода = "Количество" Тогда
		Строка.СуммаВсегоУпр = Строка.Количество*Строка.Цена;
		
		// Получим курсы упр. и рег. валюты на дату документа
		КоэфПересчета   = РаботаСКурсамиВалютПлатформа.ПолучитьКоэффициентПересчетаВалют(Объект.Дата);
		Строка.СуммаНДС = Строка.СуммаВсегоУпр*КоэфПересчета*Справочники.СтавкиНДС.ОсновнаяСтавкаНДС.Ставка/100;
	КонецЕсли;
	
	Если ТочкаВхода = "СуммаВсегоУпр" Тогда
		КоэфПересчета   = РаботаСКурсамиВалютПлатформа.ПолучитьКоэффициентПересчетаВалют(Объект.Дата);
		Строка.СуммаНДС = Строка.СуммаВсегоУпр*КоэфПересчета*Справочники.СтавкиНДС.ОсновнаяСтавкаНДС.Ставка/100;
		Строка.Цена     = ?(Строка.Количество = 0, Строка.СуммаВсегоУпр, Строка.СуммаВсегоУпр/Строка.Количество);
	КонецЕсли;
	
	Если ТочкаВхода = "СебестоимостьУпр" Тогда
		Строка.НормативнаяЦена = ?(Строка.Количество = 0, Строка.СебестоимостьУпр, Строка.СебестоимостьУпр/Строка.Количество);
	КонецЕсли;
	
	Если ТочкаВхода = "НормативнаяЦена" ИЛИ ТочкаВхода = "Количество" Тогда
		Строка.СебестоимостьУпр = Строка.НормативнаяЦена*Строка.Количество;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Автомобили");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "БюджетПродажАвтомобилей");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Автомобили");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СценарийПланирования",            "СценарийПланирования");
	ПараметрыФормы.Вставить("КоличествоПериодов",              "КоличествоПериодов");
	ПараметрыФормы.Вставить("КоэффициентРоста",                "КоэффициентРоста");
	ПараметрыФормы.Вставить("КоэффициентСезонности",           "КоэффициентСезонности");
	ПараметрыФормы.Вставить("ТипАнализа",                      "ТипАнализа");
	ПараметрыФормы.Вставить("ПоказательПланирования",          "ПоказательПланирования");
	ПараметрыФормы.Вставить("СпособОкругления",                "СпособОкругления");
	ПараметрыФормы.Вставить("ХозОперация",                     "ХозОперация");
	ПараметрыФормы.Вставить("НеУчитыватьПериодыБезДанных",     "НеУчитыватьПериодыБезДанных");
	ПараметрыФормы.Вставить("КоличествоСезонов",               "КоличествоСезонов");
	ПараметрыФормы.Вставить("СмещениеПланирования",            "СмещениеПланирования");
	ПараметрыФормы.Вставить("ДатаПланирования",                "ДатаПланирования");
	ПараметрыФормы.Вставить("ПланированиеСебестоимости",       "ПланированиеСебестоимости");
	ПараметрыФормы.Вставить("МодельПрогнозирования",           "МодельПрогнозирования");
	ПараметрыФормы.Вставить("Параметр1",                       "Параметр1");
	ПараметрыФормы.Вставить("Параметр2",                       "Параметр2");
	ПараметрыФормы.Вставить("Параметр3",                       "Параметр3");
	ПараметрыФормы.Вставить("РасчетСезонности",                "РасчетСезонности");
	ПараметрыФормы.Вставить("ДокументОснование",               "ДокументОснование");
	ПараметрыФормы.Вставить("МетодыРаспределенияКатегорий",    "МетодыРаспределенияКатегорий");
	ПараметрыФормы.Вставить("ПараметрУправленияРаспределением","ПараметрУправленияРаспределением");
	ПараметрыФормы.Вставить("ТипЦен",                          "ТипЦен");
	ПараметрыФормы.Вставить("Дата",                            "Дата");
	ПараметрыФормы.Вставить("КурсДокумента",                   "КурсДокумента");
	ПараметрыФормы.Вставить("ПодразделениеКомпании",           "ПодразделениеКомпании");
	ПараметрыФормы.Вставить("Владелец",                        "Ссылка");
	
	ФормаАвтозаполнения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ФормаАвтозаполнения.ВыборСсылки 		= "Документ.БюджетПродажАвтомобилей.Форма.ФормаДляЗаполненияПростымСпособом";
	ФормаАвтозаполнения.Обязательный 		= Истина;
	
	ФормаАвтозаполнения.Параметры = ПараметрыФормы;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "АвтомобилиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Наивное прогнозирование'");
	Команда.Идентификатор	= "ЗаполнениеТабличнойЧастиАвтомобили";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автомобили";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("РезультатВыбора", ФормаАвтозаполнения);

	ФормаАвтозаполнения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ФормаАвтозаполнения.ВыборСсылки 		= "Документ.БюджетПродажАвтомобилей.Форма.ФормаДляЗаполненияМатМетодами";
	ФормаАвтозаполнения.Обязательный 		= Истина;
	
	ФормаАвтозаполнения.Параметры = ПараметрыФормы;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "АвтомобилиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Прогнозирование мат. методами'");
	Команда.Идентификатор	= "ЗаполнениеТабличнойЧастиАвтомобили";
	Команда.Порядок			= 51;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автомобили";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("РезультатВыбора", ФормаАвтозаполнения);

	ФормаАвтозаполнения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ФормаАвтозаполнения.ВыборСсылки 		= "Документ.БюджетПродажАвтомобилей.Форма.ФормаДляЗаполненияПоДокументуОснованию";
	ФормаАвтозаполнения.Обязательный 		= Истина;
	
	ФормаАвтозаполнения.Параметры = ПараметрыФормы;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "АвтомобилиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнение по документу основанию'");
	Команда.Идентификатор	= "ЗаполнениеТабличнойЧастиАвтомобили";
	Команда.Порядок			= 52;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автомобили";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("РезультатВыбора", ФормаАвтозаполнения);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнениеПоДаннымПрошлогоПериода.Видимость",                  Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнениеПоДаннымПрошлогоПериода.Доступность",                Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнениеМетодамиМатематическогоПрогнозирования.Видимость",   Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнениеМетодамиМатематическогоПрогнозирования.Доступность", Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнениеПоДокументуОснованию.Видимость",                     Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнениеПоДокументуОснованию.Доступность",                   Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения табличной части документа "Автомобили" выбранным методом
//
Функция ЗаполнениеТабличнойЧастиАвтомобили(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыКоманды.Свойство("РезультатВыбора") Тогда
		ПараметрыЗаполнения = ПараметрыКоманды;
	Иначе
		ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	КонецЕсли;
	Объект = ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Результат = ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗаполнения, "РезультатВыбора", Неопределено);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, ПараметрыЗаполнения.РезультатВыбора);
		Для Каждого ТекСтрока Из ПараметрыЗаполнения.РезультатВыбора.ТаблицаАвтомобилей Цикл
			НоваяСтрока = Объект.Автомобили.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции // ЗаполнениеТабличнойЧастиАвтомобили()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.БюджетПродажАвтомобилей",
		"ПФ_MXL_БюджетПродажАвтомобилей",
		НСтр("ru = 'Бюджет продаж автомобилей'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
		Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_БюджетПродажАвтомобилей") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_БюджетПродажАвтомобилей",
															"Бюджет продаж автомобилей",
															ПечатьБюджетПродажАвтомобилей(МассивОбъектов, ОбъектыПечати));
															
		КонецЕсли;
														
КонецПроцедуры // Печать()

// Формирует табличный документ 
// 
// Параметры:
//  ТабДокумент - табличный документ.
//
// Возвращаемое значение:
//  ТабДокумент - возвращает сформированный табличный документ.
//
Функция ПечатьБюджетПродажАвтомобилей(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_БюджетПродажАвтомобилей_БюджетПродажАвтомобилей";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.БюджетПродажАвтомобилей.ПФ_MXL_БюджетПродажАвтомобилей");
		
		Если НЕ Документ.ПланированиеСебестоимости Тогда
			ОбластьМодель = Макет.Область(1,Макет.Область("Модель").Право);
			ОбластьВариантКомплектации = Макет.Область(1,Макет.Область("ВариантКомплектации").Право);
			ОбластьСебестоимость = Макет.Область("Себестоимость");
			ШиринаКолонокСебестоимости = 0;
		Для Сч = ОбластьСебестоимость.Лево По ОбластьСебестоимость.Право-1 Цикл
			ШиринаКолонокСебестоимости = ШиринаКолонокСебестоимости + Макет.Область(1, Сч).ШиринаКолонки;
		КонецЦикла;
			ОбластьМодель.ШиринаКолонки = ОбластьМодель.ШиринаКолонки + ШиринаКолонокСебестоимости;
			ОбластьВариантКомплектации.ШиринаКолонки = ОбластьВариантКомплектации.ШиринаКолонки + Макет.Область(1, ОбластьСебестоимость.Право).ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьСебестоимость,ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// Обработка областей
		ПоМоделям = (Документ.ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоМоделям);
		Если ПоМоделям Тогда
			ОбластьШапкаТаблицы.Область(2,3,2,4).Объединить();
			ОбластьСтрока.Область(1,3,1,4).Объединить();
		КонецЕсли;
		
		// форматы вывода
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		
		// ЗАГОЛОВОК
		
		// вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка          = ТекстЗаголовка;
		Если ЗначениеЗаполнено(Документ.ПодразделениеКомпании) Тогда
			ОбластьЗаголовок.Параметры.ПредставлениеПодразделениеКомпании = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ПодразделениеКомпании);
			ОбластьЗаголовок.Параметры.ПодразделениеКомпании = Документ.ПодразделениеКомпании;
		КонецЕсли;
		ОбластьЗаголовок.Параметры.ПредставлениеСценарийПланирования = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СценарийПланирования);
		
		Параметры = Новый Структура;
		Параметры.Вставить("ДатаИзПериода", Документ.ДатаПланирования);
		Параметры.Вставить("Периодичность", Документ.СценарийПланирования.Периодичность);
		Параметры.Вставить("Действие", 0);
		ПредставлениеПериодаПланирования = ПланированиеСервер.ПолучитьДатыПланируемогоПериода(Параметры);
		ОбластьЗаголовок.Параметры.ПредставлениеПериодаПланирования = ПредставлениеПериодаПланирования;
		
		// выведем или удалим ШК
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// готовим шапку
		НомерСтраницы = 2; НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего",Документ.ВалютаДокумента,0,0,0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// 
		СтруктураИтоговПоСтранице = Новый Структура;
		СтруктураИтоговПоСтранице.Вставить("Количество", 0);
		СтруктураИтоговПоСтранице.Вставить("СуммаВсегоУпр", 0);
		СтруктураИтоговПоСтранице.Вставить("СуммаНДС", 0);
		Если Документ.ПланированиеСебестоимости Тогда
			СтруктураИтоговПоСтранице.Вставить("СебестоимостьУпр", 0);
			СтруктураИтоговПоСтранице.Вставить("МаржинальнаяПрибыль", 0);
		КонецЕсли;

	ТекстЗапроса = "ВЫБРАТЬ
	|	ТаблицаАвтомобили.Модель КАК Модель,
	|	ТаблицаАвтомобили.ВариантКомплектации,
	|	ТаблицаАвтомобили.Цена КАК Цена,
	|	ТаблицаАвтомобили.Количество КАК Количество,
	|	ТаблицаАвтомобили.СуммаВсегоУпр КАК СуммаВсегоУпр,
	|	ТаблицаАвтомобили.СуммаВсегоУпр - ТаблицаАвтомобили.СебестоимостьУпр КАК МаржинальнаяПрибыль,
	|	ТаблицаАвтомобили.НормативнаяЦена КАК НормативнаяЦена,
	|	ТаблицаАвтомобили.СебестоимостьУпр КАК СебестоимостьУпр,
	|	ТаблицаАвтомобили.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.БюджетПродажАвтомобилей.Автомобили КАК ТаблицаАвтомобили
	|ГДЕ
	|	ТаблицаАвтомобили.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаАвтомобили.НомерСтроки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
	ВыборкаТабличнойЧасти = Запрос.Выполнить().Выгрузить();
	
	КоличествоПозиций = ВыборкаТабличнойЧасти.Количество()-1;
	ИндексСтроки = 0;
	
	
	// перебор строк 	
	Для каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
		//ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ,Документ));
		ИндексСтроки = ИндексСтроки+1;
		ОбластьСтрока.Параметры.НомерСтроки = ИндексСтроки;
		ОбластьСтрока.Параметры.МодельНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТЧ.Модель);
		ОбластьСтрока.Параметры.Модель = СтрокаТЧ.Модель;
		Если НЕ ПоМоделям Тогда
			ОбластьСтрока.Параметры.ВариантКомплектацииНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТЧ.ВариантКомплектации);
			ОбластьСтрока.Параметры.ВариантКомплектации = СтрокаТЧ.ВариантКомплектации;
		КонецЕсли;
		ОбластьСтрока.Параметры.Количество	= Формат(СтрокаТЧ.Количество, ФорматВыводаКоличества);
		ОбластьСтрока.Параметры.Цена		= Формат(СтрокаТЧ.Цена, ФорматВыводаСуммы);
		ОбластьСтрока.Параметры.СуммаУпр	= Формат(СтрокаТЧ.СуммаВсегоУпр, ФорматВыводаСуммы);
		ОбластьСтрока.Параметры.СуммаНДС	= Формат(СтрокаТЧ.СуммаНДС, ФорматВыводаСуммы);
		
		Если Документ.ПланированиеСебестоимости Тогда
			ОбластьСтрока.Параметры.НормативнаяЦена		= Формат(СтрокаТЧ.НормативнаяЦена, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СебестоимостьУпр	= Формат(СтрокаТЧ.СебестоимостьУпр, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.МаржинальнаяПрибыль	= Формат(СтрокаТЧ.МаржинальнаяПрибыль, ФорматВыводаСуммы);
		КонецЕсли;

		
		// доп. области
		мсвДопОбластиПодвала = Неопределено;
		Если Документ.Автомобили.Индекс(СтрокаТЧ) = Документ.Автомобили.Количество()-1 Тогда
			мсвДопОбластиПодвала = Новый Массив;
			мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
		КонецЕсли;
		
		НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока, ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ, мсвДопОбластиПодвала);
		
		// инициализация итогов по странице
		Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
			СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего",Документ.ВалютаДокумента,0,0);
			НомерСтраницыПредыдущий   = НомерСтраницы;
			ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
		КонецЕсли;
		
		// добавляем итоги
		УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ,СтруктураИтоговПоСтранице);
	КонецЦикла;
	
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент,ОбластьИтогоПоСтранице,СтруктураИтоговПоСтранице,Документ);
		КонецЕсли;
		
		// заполнение подвала и итогов
		ИтогоКоличество		= ВыборкаТабличнойЧасти.Итог("Количество");
		СуммаВсего	= ВыборкаТабличнойЧасти.Итог("СуммаВсегоУпр");
		НДСВсего     	= ВыборкаТабличнойЧасти.Итог("СуммаНДС");
		
		ОбластьПодвал.Параметры.ИтогоКоличество = Формат(ИтогоКоличество, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.ИтогоСуммаВсегоУпр = Формат(СуммаВсего, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.ИтогоСуммаНДС = Формат(НДСВсего, ФорматВыводаСуммы);
		
		Если Документ.ПланированиеСебестоимости Тогда
			ИтогоСебестоимостьУпр    = Документ.Автомобили.Итог("СебестоимостьУпр");
			ИтогоМаржинальнаяПрибыль = СуммаВсего-ИтогоСебестоимостьУпр;
			ОбластьПодвал.Параметры.ИтогоСебестоимостьУпр = Формат(ИтогоСебестоимостьУпр, ФорматВыводаСуммы);
			ОбластьПодвал.Параметры.ИтогоМаржинальнаяПрибыль = Формат(ИтогоМаржинальнаяПрибыль, ФорматВыводаСуммы);
		КонецЕсли;

		
		Если ПоМоделям Тогда
			ОбластьПодвал.Параметры.СуммаПрописью = "Всего запланировано позиций моделей "+ВыборкаТабличнойЧасти.Количество()+" на сумму " + РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего,Документ.ВалютаДокумента);
		Иначе
			ОбластьПодвал.Параметры.СуммаПрописью = "Всего запланировано позиций вариантов комплектации "+ВыборкаТабличнойЧасти.Количество()+" на сумму " + РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего,Документ.ВалютаДокумента);
		КонецЕсли; 
		ОбластьПодвал.Параметры.ПредставлениеАвтор = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Автор);

		УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент,ОбластьПодвал,,,НомерСтраницы,,Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьБюджетПродажАвтомобилей()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.БюджетЗакупокАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.БюджетПродажАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);

		
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
	
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
		
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.БюджетПродажАвтомобилей);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли