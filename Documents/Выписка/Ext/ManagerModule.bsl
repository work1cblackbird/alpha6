// Модуль менеджера документа "Выписка"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область ЗапретРедактированияРеквизитовОбъектов

// Определяет блокируемые реквизиты
//
// Возвращаемое значение:
//  Массив - Строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]. Например: "Объект.Автор", "ПолеАвтор".
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив();
	
	Для Каждого ИмяРеквизита Из Метаданные.Документы.Выписка.ТабличныеЧасти.Товары.Реквизиты Цикл
		
		Если ИмяРеквизита.Имя = "ДоговорВзаиморасчетов" Тогда
			Продолжить;	
		КонецЕсли;
		
		РеквизитТовара = "Товары." + ИмяРеквизита.Имя;
		Результат.Добавить(РеквизитТовара);
		
	КонецЦикла;
	
	Результат.Добавить("Контрагент");
	Результат.Добавить("ДоговорВзаиморасчетов");
	Результат.Добавить("ПараметрыДокумента");
	Результат.Добавить("КассаККМ");
	Результат.Добавить("ФР");
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.АвансовыйОтчет);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетФактураВыданный);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетФактураПолученный);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЧекКоррекции);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 СтрокаТаблицыЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.Выписка);

КонецФункции

#КонецОбласти

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьСтавкуНДС(Объект)
	
	ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата);
   	НоваяСтавкаНДС = ПараметрыНДС.ОсновнаяСтавка;
	
	Для Каждого СтрокаТЧ Из Объект.Состав Цикл
		Если СтрокаТЧ.СуммаРасход<>0 И СтрокаТЧ.СтавкаНДС<>НоваяСтавкаНДС Тогда
			СтрокаТЧ.СтавкаНДС = НоваяСтавкаНДС;
			СоставСтавкаНДСПриИзменении(Объект, СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Производит расчет значений итоговых показателей по операции в целом.
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево - Признак получения расширенных сведений об итогах операции.
// 
// Возвращаемое значение:
//  Структура - Рассчитать итоги операции:
//   * СуммаДокумента - Число
//   * СуммаПриход - Число
//   * СуммаРасход - Число
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Состав.Итог("СуммаПриход") - Объект.Состав.Итог("СуммаРасход"));
	
	Если Не Расширенные Тогда
		
		Возврат ИтогиОперации;
		
	КонецЕсли;
	
	ИтогиОперации.Вставить("СуммаПриход", 0);
	ИтогиОперации.Вставить("СуммаРасход", 0);
	
	Для Каждого Строка Из Объект.Состав Цикл
		
		ИтогиОперации.СуммаПриход = ИтогиОперации.СуммаПриход + Строка.СуммаПриход;
		ИтогиОперации.СуммаРасход = ИтогиОперации.СуммаРасход + Строка.СуммаРасход;
		
	КонецЦикла;
		
	Возврат ИтогиОперации;
	
КонецФункции

// Установка банковского счета в соответствии с организацией
//
Процедура УстановитьБанковскийСчет(Объект, ПараметрыДействия)
	
	Если Объект.БанковскийСчет.Пустая() Тогда
		Объект.БанковскийСчет = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Объект.Организация);
	Иначе
		Результат = ОбработкаСобытийДокументаСервер.ПроверитьКорректностьБанковскогоСчета(Объект.БанковскийСчет,
													Объект.Организация, Объект.ПодразделениеКомпании);
		Если НЕ Результат Тогда
			Объект.БанковскийСчет = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Объект.Организация);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УстановитьБанковскийСчет()

Процедура ЗаполнитьПлатежноеПоручениеОснование(Объект) Экспорт
	
	Если Объект.ХозОперация = Справочники.ХозОперации.СтрокаБанковскойВыписки Тогда
		Для Каждого Строка Из Объект.Состав Цикл
			Строка.ПлатежноеПоручениеОснование = Объект.ПлатежноеПоручениеОснование;
		КонецЦикла;
	Иначе
		Объект.ПлатежноеПоручениеОснование = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Получение типа расчета документа в соовтетсвии с указанными параметрами документа.
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  УчитыватьСтатьюДДС - Булево - Учитывать статью ДДС
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыРасчетаДенежнымиСредствами -- Тип расчета для формирования в чеке
//
Функция ТипРасчетаПоДокументу(Объект, УчитыватьСтатьюДДС = Истина) Экспорт
	
	// Параметры типа расчета.
	ДокументыВозвратаПрихода = Новый Массив;
	ДокументыВозвратаПрихода.Добавить(Тип("ДокументСсылка.ВозвратПоставщику"));
	ДокументыВозвратаПрихода.Добавить(Тип("ДокументСсылка.ВозвратПоставщикуАвтомобилей"));
	
	ДокументыВозвратаРасхода = Новый Массив;
	ДокументыВозвратаРасхода.Добавить(Тип("ДокументСсылка.ВозвратОтПокупателя"));
	ДокументыВозвратаРасхода.Добавить(Тип("ДокументСсылка.ВозвратОтПокупателяАвтомобилей"));
	
	СделкиПрихода = ПланыВидовХарактеристик.ТипыСделок.ПолучитьРазрешенныеТипыСделок(Истина,Ложь);
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить(Тип("ДокументСсылка.ЗаказПоставщикуНаАвтомобиль"));
	МассивИсключений.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
	МассивИсключений.Добавить(Тип("ДокументСсылка.Инкассация"));
	МассивИсключений.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
	МассивИсключений.Добавить(Тип("ДокументСсылка.Выписка"));
	МассивИсключений.Добавить(Тип("ДокументСсылка.ПереоценкаВалютныхСредств"));
	
	// Дополним документы возврата прихода
	Для Каждого ТекущаяСделка Из СделкиПрихода Цикл
		Если МассивИсключений.Найти(ТекущаяСделка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДокументыВозвратаРасхода.Добавить(ТекущаяСделка);
	КонецЦикла;
	
	ЭтоРасходВыписки = Ложь;
	ВозвратПоВыписке = Истина;
	ЭтоРасходВыписки = (Объект.СуммаДокументаРасход <> 0
		ИЛИ Объект.СтатьяДДС.ВидДвижения = Перечисления.ВидыДвижений.Расход);
	ЗаполненыСделки = Ложь;
	Для Каждого ТекущаяСтрока Из Объект.Состав Цикл
		ЗаполненыСделки = ЗаполненыСделки ИЛИ ЗначениеЗаполнено(ТекущаяСтрока.Сделка);
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Сделка) ИЛИ
			ЭтоРасходВыписки И ДокументыВозвратаРасхода.Найти(ТипЗнч(ТекущаяСтрока.Сделка)) = Неопределено ИЛИ
			НЕ ЭтоРасходВыписки И ДокументыВозвратаПрихода.Найти(ТипЗнч(ТекущаяСтрока.Сделка)) = Неопределено Тогда
			ВозвратПоВыписке = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УчитыватьСтатьюДДС И НЕ ЗаполненыСделки И ЗначениеЗаполнено(Объект.СтатьяДДС) Тогда
		ВидСтатьи = Объект.СтатьяДДС.ВидДвижения;
		Если ВидСтатьи = Перечисления.ВидыДвижений.Расход Тогда
			Возврат ?(Объект.СтатьяДДС = Справочники.СтатьиДДС.ВозвратПокупателю,
				Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств,
				Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств);
		КонецЕсли;
		Если ВидСтатьи = Перечисления.ВидыДвижений.Приход Тогда
			Возврат ?(Объект.СтатьяДДС = Справочники.СтатьиДДС.ВозвратОтПоставщика
				ИЛИ Объект.СтатьяДДС = Справочники.СтатьиДДС.ВозвратИзПодОтчета,
			Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств,
			Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭтоРасходВыписки И ВозвратПоВыписке Тогда
		Возврат Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств;
	ИначеЕсли ЭтоРасходВыписки И ВозвратПоВыписке Тогда
		Возврат Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
	ИначеЕсли ЭтоРасходВыписки Тогда
		Возврат Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств;
	Иначе
		Возврат Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОстатокОплатыПоПлатежномуКалендарю(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлатежныйКалендарьОбороты.ДокументПланирования КАК ДокументПланирования,
		|	СУММА(ПлатежныйКалендарьОбороты.РасходОборот) КАК РасходОборот,
		|	СУММА(ПлатежныйКалендарьОбороты.РасходФактОборот) КАК РасходФактОборот
		|ИЗ
		|	РегистрНакопления.ПлатежныйКалендарь.Обороты(&Дата, , Регистратор, ) КАК ПлатежныйКалендарьОбороты
		|ГДЕ
		|	ПлатежныйКалендарьОбороты.ДокументПланирования = &Ссылка
		|	И ПлатежныйКалендарьОбороты.СтатьяДДС = &СтатьяДДС
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлатежныйКалендарьОбороты.ДокументПланирования";
	
	Запрос.УстановитьПараметр("Дата", 		Ссылка.Дата);
	Запрос.УстановитьПараметр("Ссылка", 	Ссылка);
	Запрос.УстановитьПараметр("СтатьяДДС", 	Ссылка.СтатьяДДС);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.РасходОборот > ВыборкаДетальныеЗаписи.РасходФактОборот Тогда  
			Возврат ВыборкаДетальныеЗаписи.РасходОборот - ВыборкаДетальныеЗаписи.РасходФактОборот; 
		Иначе
			Возврат 0;
		КонецЕсли;
	КонецЦикла;
		
КонецФункции

// Возвращает перечень дополнительных реквизитов при открытии общей формы "Параметры документа".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение неотображаемых реквизитов.
//
// Возвращаемое значение:
//  Структура - структура, содержащая дооплнительные параметры открытия формы "Параемтры документа".
//
Функция ПолучитьДопПараметрыОткрытияФормыПараметров(Объект) Экспорт
	
	ДопПараметры = Новый Структура;
	//ДопПараметры.Вставить("ЗапретитьРедактированиеВалютыДокумента", Истина);
	
	Возврат ДопПараметры;
	
КонецФункции
 
Функция ПроверитьВидОперацииПеремещение(Операция) Экспорт
	
	Если Не ЗначениеЗаполнено(Операция) Тогда
		Возврат Ложь;
	Иначе
		Возврат Операция = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПереводНаДругойСчетОрганизации 
			ИЛИ Операция = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПереводСДругогоСчетаОрганизации
			ИЛИ Операция = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВзносНаличнымиИзКассы
			ИЛИ Операция = Перечисления.ВидыОперацийДвиженияДенежныхСредств.СнятиеНаличныхВКассу;			
	КонецЕсли;
	
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
// 
// Возвращаемое значение:
//  Массив из Строка -- Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("БанковскийСчет");
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	
	ОперацияДокумента = Объект.ВидОперации;
	ЭтоПеремещение = ПроверитьВидОперацииПеремещение(ОперацияДокумента);
	
	Если ЭтоПеремещение Тогда 
	    ОбязательныеРеквизиты.Добавить("СтатьяДДС"); 
		ОбязательныеРеквизиты.Добавить("СтавкаНДС");
		Если ОперацияДокумента = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПереводНаДругойСчетОрганизации 
			ИЛИ ОперацияДокумента = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПереводСДругогоСчетаОрганизации Тогда 
				ОбязательныеРеквизиты.Добавить("БанковскийСчетКонтрагента");  
		Иначе
			ОбязательныеРеквизиты.Добавить("Касса");
		КонецЕсли;
				
	ИначеЕсли
		Объект.ХозОперация = Справочники.ХозОперации.СтрокаБанковскойВыписки
		Или Объект.ХозОперация = Справочники.ХозОперации.ПоступлениеВОперационнуюКассу
		Или Объект.ХозОперация = Справочники.ХозОперации.РасходИзОперационнойКассы
	Тогда
		
		ОбязательныеРеквизиты.Добавить("СтавкаНДС");
		ОбязательныеРеквизиты.Добавить("СтатьяДДС");
		ОбязательныеРеквизиты.Добавить("Контрагент");
		ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
		
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
			РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(Объект.ДоговорВзаиморасчетов);
		
		Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам
			ИЛИ РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(Объект.ВерсияОбъекта) Тогда
			ОбязательныеРеквизиты.Добавить("Состав.СпособЗачетаАвансов");
		КонецЕсли;
		
	Иначе
		
		Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
			ОбязательныеРеквизиты.Добавить("Состав");
		КонецЕсли;
		ОбязательныеРеквизиты.Добавить("Состав.СтатьяДДС");
		ОбязательныеРеквизиты.Добавить("Состав.Контрагент");
		ОбязательныеРеквизиты.Добавить("Состав.ДоговорВзаиморасчетов");
		
	КонецЕсли;
	
	Если Объект.ДляПробитияНаФР Тогда
		
		ОбязательныеРеквизиты.Добавить("ПризнакСпособаРасчета");
		ОбязательныеРеквизиты.Добавить("ТипРасчета");
		
	КонецЕсли;
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	Возврат Новый Структура();
	
КонецФункции

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево - Признак необходимости выполнить контроль по подразделению.
// 
// Возвращаемое значение:
//  Структура -- Содержит перечень проверяемых реквизитов
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("БанковскийСчет");
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	КонтролируемыеРеквизиты.Вставить("БанковскийСчетКонтрагента");
	КонтролируемыеРеквизиты.Вставить("Касса");  
	
	КонтролируемыеРеквизитыТЧ = Новый Структура();
	КонтролируемыеРеквизитыТЧ.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	КонтролируемыеРеквизитыТЧ.Вставить("Сделка", КонтрольПоПодразделению);
	
	КонтролируемыеРеквизиты.Вставить("Состав", КонтролируемыеРеквизитыТЧ);
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ДополнительныеПараметры.ДляПроведения.Вставить("ВерсияОбъекта", Объект.ВерсияОбъекта);
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("Выписка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Выписка.Ссылка КАК Ссылка,
	|	Выписка.Дата КАК Дата,
	|	Выписка.Организация КАК Организация,
	|	Выписка.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Выписка.ХозОперация КАК ХозОперация,
	|	Выписка.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Выписка.КурсДокумента КАК КурсДокумента,
	|	Выписка.ВалютаДокумента КАК ВалютаДокумента,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ДанныеШапки
	|ИЗ
	|	Документ.Выписка КАК Выписка
	|ГДЕ
	|	Выписка.Ссылка = &Выписка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ ТаблицаКурсовВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыпискаСостав.Ссылка.Организация КАК Организация,
	|	ВыпискаСостав.Ссылка КАК Ссылка,
	|	ВыпискаСостав.Ссылка.Дата КАК Дата,
	|	ВыпискаСостав.Ссылка.ХозОперация КАК ХозОперация,
	|	ВыпискаСостав.СтатьяДДС КАК СтатьяДДС,
	|	ВыпискаСостав.Контрагент КАК Контрагент,
	|	ВыпискаСостав.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ВыпискаСостав.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	ВыпискаСостав.Сделка КАК Сделка,
	|	ВыпискаСостав.СуммаПриход КАК СуммаПриход,
	|	ВыпискаСостав.СуммаРасход КАК СуммаРасход,
	|	ВыпискаСостав.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	ВыпискаСостав.СуммаУслуг КАК СуммаУслуг,
	|	ВыпискаСостав.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВыпискаСостав.Ссылка.КурсДокумента КАК КурсДокумента,
	|	ВыпискаСостав.Ссылка.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ВыпискаСостав.СпособЗачетаАвансов КАК СпособЗачетаОплаты,
	|	ВыпискаСостав.Заказ КАК Заказ,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	Документ.Выписка.Состав КАК ВыпискаСостав
	|ГДЕ
	|	ВыпискаСостав.Ссылка = &Выписка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставДокумента.Организация КАК Организация,
	|	СоставДокумента.Ссылка КАК Ссылка,
	|	СоставДокумента.Дата КАК Дата,
	|	СоставДокумента.ХозОперация КАК ХозОперация,
	|	СоставДокумента.СтатьяДДС КАК СтатьяДДС,
	|	СоставДокумента.Контрагент КАК Контрагент,
	|	СоставДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	СоставДокумента.ВалютаДоговора КАК ВалютаДоговора,
	|	СоставДокумента.Сделка КАК Сделка,
	|	СоставДокумента.СуммаПриход КАК СуммаПриход,
	|	СоставДокумента.СуммаРасход КАК СуммаРасход,
	|	СоставДокумента.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	СоставДокумента.СуммаУслуг КАК СуммаУслуг,
	|	СоставДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	СоставДокумента.КурсДокумента КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ТаблицаКурсовВалют.Курс ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаКурсовВалют.Курс / ТаблицаКурсовВалют.Кратность КАК ЧИСЛО(10, 6))
	|	КОНЕЦ КАК КурсВалютыРегл,
	|	ВЫБОР
	|		КОГДА СоставДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ СоставДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	СоставДокумента.СпособЗачетаОплаты КАК СпособЗачетаОплаты,
	|	СоставДокумента.Заказ КАК Заказ,
	|	СоставДокумента.ВалютаРегл КАК ВалютаРегл,
	|	СоставДокумента.ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ СоставВыписки
	|ИЗ
	|	СоставДокумента КАК СоставДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКурсовВалют КАК ТаблицаКурсовВалют
	|		ПО СоставДокумента.ВалютаРегл = ТаблицаКурсовВалют.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсовВалют КАК КурсыВалютУпр
	|		ПО СоставДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаКурсовВалют
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СоставДокумента";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	СуммовыеРазницы = РегистрыНакопления.РасчетыСКонтрагентами.ИнициализацияСуммовыхРазниц();
	
	// Дополним таблицу для списания суммовых разниц
	РасчетыСКонтрагентами.Колонки.Добавить(
		"КурсВалютыВзаиморасчетов",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 6, ДопустимыйЗнак.Неотрицательный)));
	
	Если РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ДвиженияДокумента.ДляПроведения.ВерсияОбъекта) Тогда
		
		ЗаполнитьРасчетамиСКонтрагентомПоСоставу(ДвиженияДокумента, РасчетыСКонтрагентами, Отказ);
		
	Иначе
		
		ЗаполнитьРасчетамиПоСделке(ДвиженияДокумента, РасчетыСКонтрагентами);
		
	КонецЕсли;
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	// Дополним таблицу суммовыми разницами
	РегистрыНакопления.РасчетыСКонтрагентами.СписатьСуммовыеРазницы(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		СуммовыеРазницы,
		Истина);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	ДвиженияДокумента.Вставить("СуммовыеРазницы", СуммовыеРазницы);
	
КонецПроцедуры

Процедура ЗаполнитьРасчетамиСКонтрагентомПоСоставу(ДвиженияДокумента, РасчетыСКонтрагентами, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоставВыписки.Ссылка КАК Ссылка,
	|	СоставВыписки.Дата КАК Дата,
	|	СоставВыписки.Организация КАК Организация,
	|	СоставВыписки.ХозОперация КАК ХозОперация,
	|	СоставВыписки.Контрагент КАК Контрагент,
	|	СоставВыписки.Контрагент.ВидКонтрагента КАК ВидКонтрагента,
	|	СоставВыписки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	СоставВыписки.ВалютаДоговора КАК ВалютаДоговора,
	|	СоставВыписки.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	СоставВыписки.ВалютаРегл КАК ВалютаРегл,
	|	СоставВыписки.ВалютаУпр КАК ВалютаУпр,
	|	СоставВыписки.ВалютаДокумента КАК ВалютаДокумента,
	|	СоставВыписки.КурсДокумента КАК КурсДокумента,
	|	СоставВыписки.КурсВалютыУпр КАК КурсВалютыУпр,
	|	СоставВыписки.КурсВалютыРегл КАК КурсВалютыРегл
	|ПОМЕСТИТЬ ШапкаДокумента
	|ИЗ
	|	СоставВыписки КАК СоставВыписки
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставВыписки.Ссылка,
	|	СоставВыписки.Дата,
	|	СоставВыписки.Организация,
	|	СоставВыписки.ХозОперация,
	|	СоставВыписки.Контрагент,
	|	СоставВыписки.Контрагент.ВидКонтрагента,
	|	СоставВыписки.ДоговорВзаиморасчетов,
	|	СоставВыписки.ВалютаДоговора,
	|	СоставВыписки.КурсВалютыВзаиморасчетов,
	|	СоставВыписки.ВалютаРегл,
	|	СоставВыписки.ВалютаУпр,
	|	СоставВыписки.ВалютаДокумента,
	|	СоставВыписки.КурсДокумента,
	|	СоставВыписки.КурсВалютыУпр,
	|	СоставВыписки.КурсВалютыРегл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставВыписки.Ссылка КАК Ссылка,
	|	СоставВыписки.Дата КАК Дата,
	|	СоставВыписки.Организация КАК Организация,
	|	СоставВыписки.ХозОперация КАК ХозОперация,
	|	СоставВыписки.Контрагент КАК Контрагент,
	|	СоставВыписки.Контрагент.ВидКонтрагента КАК ВидКонтрагента,
	|	СоставВыписки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	СоставВыписки.Сделка КАК Сделка,
	|	СУММА(СоставВыписки.СуммаПриход) КАК Сумма,
	|	СоставВыписки.ВалютаДоговора КАК ВалютаДоговора,
	|	СоставВыписки.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	СоставВыписки.ВалютаРегл КАК ВалютаРегл,
	|	СоставВыписки.ВалютаУпр КАК ВалютаУпр,
	|	СоставВыписки.КурсВалютыУпр КАК КурсВалютыУпр,
	|	СоставВыписки.КурсВалютыРегл КАК КурсВалютыРегл,
	|	СоставВыписки.ВалютаДокумента КАК ВалютаДокумента,
	|	СоставВыписки.КурсДокумента КАК КурсДокумента,
	|	ИСТИНА КАК ЭтоПриход,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).Состояние
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СостояниеЗаказНаряда,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).ДатаЗакрытия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаЗакрытия,
	|	СоставВыписки.СпособЗачетаОплаты КАК СпособЗачетаОплаты,
	|	СоставВыписки.Заказ КАК Заказ
	|ИЗ
	|	СоставВыписки КАК СоставВыписки
	|ГДЕ
	|	СоставВыписки.СуммаПриход > 0
	|	И СоставВыписки.СуммаРасход = 0
	|	И СоставВыписки.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|	И СоставВыписки.СпособЗачетаОплаты = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПоДокументу)
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставВыписки.Ссылка,
	|	СоставВыписки.Дата,
	|	СоставВыписки.Организация,
	|	СоставВыписки.ХозОперация,
	|	СоставВыписки.Контрагент,
	|	СоставВыписки.Контрагент.ВидКонтрагента,
	|	СоставВыписки.ДоговорВзаиморасчетов,
	|	СоставВыписки.Сделка,
	|	СоставВыписки.КурсДокумента,
	|	СоставВыписки.ВалютаДоговора,
	|	СоставВыписки.КурсВалютыВзаиморасчетов,
	|	СоставВыписки.ВалютаДокумента,
	|	СоставВыписки.ВалютаРегл,
	|	СоставВыписки.ВалютаУпр,
	|	СоставВыписки.КурсВалютыУпр,
	|	СоставВыписки.КурсВалютыРегл,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).Состояние
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).ДатаЗакрытия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ,
	|	СоставВыписки.СпособЗачетаОплаты,
	|	СоставВыписки.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставВыписки.Ссылка КАК Ссылка,
	|	СоставВыписки.Дата КАК Дата,
	|	СоставВыписки.Организация КАК Организация,
	|	СоставВыписки.ХозОперация КАК ХозОперация,
	|	СоставВыписки.Контрагент КАК Контрагент,
	|	СоставВыписки.Контрагент.ВидКонтрагента КАК ВидКонтрагента,
	|	СоставВыписки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	СоставВыписки.Сделка КАК Сделка,
	|	СУММА(СоставВыписки.СуммаРасход) КАК Сумма,
	|	СоставВыписки.ВалютаДоговора КАК ВалютаДоговора,
	|	СоставВыписки.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	СоставВыписки.ВалютаРегл КАК ВалютаРегл,
	|	СоставВыписки.ВалютаУпр КАК ВалютаУпр,
	|	СоставВыписки.КурсВалютыУпр КАК КурсВалютыУпр,
	|	СоставВыписки.КурсВалютыРегл КАК КурсВалютыРегл,
	|	СоставВыписки.ВалютаДокумента КАК ВалютаДокумента,
	|	СоставВыписки.КурсДокумента КАК КурсДокумента,
	|	ИСТИНА КАК ЭтоПриход,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).Состояние
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СостояниеЗаказНаряда,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).ДатаЗакрытия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаЗакрытия,
	|	СоставВыписки.СпособЗачетаОплаты КАК СпособЗачетаОплаты,
	|	СоставВыписки.Заказ КАК Заказ
	|ИЗ
	|	СоставВыписки КАК СоставВыписки
	|ГДЕ
	|	СоставВыписки.СуммаРасход > 0
	|	И СоставВыписки.СуммаПриход = 0
	|	И СоставВыписки.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|	И СоставВыписки.СпособЗачетаОплаты = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПоДокументу)
	|	И СоставВыписки.СтатьяДДС <> ЗНАЧЕНИЕ(Справочник.СтатьиДДС.ОплатаБанковскихУслуг)
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставВыписки.Ссылка,
	|	СоставВыписки.Дата,
	|	СоставВыписки.Организация,
	|	СоставВыписки.ХозОперация,
	|	СоставВыписки.Контрагент,
	|	СоставВыписки.Контрагент.ВидКонтрагента,
	|	СоставВыписки.ДоговорВзаиморасчетов,
	|	СоставВыписки.Сделка,
	|	СоставВыписки.ВалютаДоговора,
	|	СоставВыписки.КурсВалютыВзаиморасчетов,
	|	СоставВыписки.ВалютаРегл,
	|	СоставВыписки.ВалютаУпр,
	|	СоставВыписки.ВалютаДокумента,
	|	СоставВыписки.КурсДокумента,
	|	СоставВыписки.КурсВалютыУпр,
	|	СоставВыписки.КурсВалютыРегл,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).Состояние
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).ДатаЗакрытия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ,
	|	СоставВыписки.СпособЗачетаОплаты,
	|	СоставВыписки.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставВыписки.Ссылка КАК Ссылка,
	|	СоставВыписки.Дата КАК Дата,
	|	СоставВыписки.Организация КАК Организация,
	|	СоставВыписки.ХозОперация КАК ХозОперация,
	|	СоставВыписки.Контрагент КАК Контрагент,
	|	СоставВыписки.Контрагент.ВидКонтрагента КАК ВидКонтрагента,
	|	СоставВыписки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	СоставВыписки.Сделка КАК Сделка,
	|	СУММА(СоставВыписки.СуммаРасход) КАК Сумма,
	|	СоставВыписки.ВалютаДоговора КАК ВалютаДоговора,
	|	СоставВыписки.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	СоставВыписки.ВалютаРегл КАК ВалютаРегл,
	|	СоставВыписки.ВалютаУпр КАК ВалютаУпр,
	|	СоставВыписки.КурсВалютыУпр КАК КурсВалютыУпр,
	|	СоставВыписки.КурсВалютыРегл КАК КурсВалютыРегл,
	|	СоставВыписки.ВалютаДокумента КАК ВалютаДокумента,
	|	СоставВыписки.КурсДокумента КАК КурсДокумента,
	|	ИСТИНА КАК ЭтоПриход,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).Состояние
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СостояниеЗаказНаряда,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).ДатаЗакрытия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаЗакрытия,
	|	СоставВыписки.СпособЗачетаОплаты КАК СпособЗачетаОплаты,
	|	СоставВыписки.Заказ КАК Заказ
	|ИЗ
	|	СоставВыписки КАК СоставВыписки
	|ГДЕ
	|	СоставВыписки.СуммаРасход > 0
	|	И СоставВыписки.СуммаПриход = 0
	|	И СоставВыписки.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|	И СоставВыписки.СпособЗачетаОплаты = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.НеЗачитывать)
	|	И СоставВыписки.СтатьяДДС <> ЗНАЧЕНИЕ(Справочник.СтатьиДДС.ОплатаБанковскихУслуг)
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставВыписки.Ссылка,
	|	СоставВыписки.Дата,
	|	СоставВыписки.Организация,
	|	СоставВыписки.ХозОперация,
	|	СоставВыписки.Контрагент,
	|	СоставВыписки.Контрагент.ВидКонтрагента,
	|	СоставВыписки.ДоговорВзаиморасчетов,
	|	СоставВыписки.Сделка,
	|	СоставВыписки.ВалютаДоговора,
	|	СоставВыписки.КурсВалютыВзаиморасчетов,
	|	СоставВыписки.ВалютаРегл,
	|	СоставВыписки.ВалютаУпр,
	|	СоставВыписки.КурсВалютыУпр,
	|	СоставВыписки.КурсВалютыРегл,
	|	СоставВыписки.ВалютаДокумента,
	|	СоставВыписки.КурсДокумента,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).Состояние
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).ДатаЗакрытия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ,
	|	СоставВыписки.СпособЗачетаОплаты,
	|	СоставВыписки.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставВыписки.Ссылка КАК Ссылка,
	|	СоставВыписки.Дата КАК Дата,
	|	СоставВыписки.Организация КАК Организация,
	|	СоставВыписки.ХозОперация КАК ХозОперация,
	|	СоставВыписки.Контрагент КАК Контрагент,
	|	СоставВыписки.Контрагент.ВидКонтрагента КАК ВидКонтрагента,
	|	СоставВыписки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	СоставВыписки.Сделка КАК Сделка,
	|	СУММА(СоставВыписки.СуммаРасход) КАК Сумма,
	|	СоставВыписки.ВалютаДоговора КАК ВалютаДоговора,
	|	СоставВыписки.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	СоставВыписки.ВалютаРегл КАК ВалютаРегл,
	|	СоставВыписки.ВалютаУпр КАК ВалютаУпр,
	|	СоставВыписки.КурсВалютыУпр КАК КурсВалютыУпр,
	|	СоставВыписки.КурсВалютыРегл КАК КурсВалютыРегл,
	|	СоставВыписки.ВалютаДокумента КАК ВалютаДокумента,
	|	СоставВыписки.КурсДокумента КАК КурсДокумента,
	|	ИСТИНА КАК ЭтоПриход,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).Состояние
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СостояниеЗаказНаряда,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).ДатаЗакрытия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаЗакрытия,
	|	СоставВыписки.СпособЗачетаОплаты КАК СпособЗачетаОплаты,
	|	СоставВыписки.Заказ КАК Заказ
	|ИЗ
	|	СоставВыписки КАК СоставВыписки
	|ГДЕ
	|	СоставВыписки.СуммаРасход > 0
	|	И СоставВыписки.СуммаПриход = 0
	|	И СоставВыписки.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|	И СоставВыписки.СпособЗачетаОплаты = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
	|	И СоставВыписки.СтатьяДДС <> ЗНАЧЕНИЕ(Справочник.СтатьиДДС.ОплатаБанковскихУслуг)
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставВыписки.Ссылка,
	|	СоставВыписки.Дата,
	|	СоставВыписки.Организация,
	|	СоставВыписки.ХозОперация,
	|	СоставВыписки.Контрагент,
	|	СоставВыписки.Контрагент.ВидКонтрагента,
	|	СоставВыписки.ДоговорВзаиморасчетов,
	|	СоставВыписки.Сделка,
	|	СоставВыписки.ВалютаДоговора,
	|	СоставВыписки.КурсВалютыВзаиморасчетов,
	|	СоставВыписки.ВалютаРегл,
	|	СоставВыписки.ВалютаУпр,
	|	СоставВыписки.КурсВалютыУпр,
	|	СоставВыписки.КурсВалютыРегл,
	|	СоставВыписки.ВалютаДокумента,
	|	СоставВыписки.КурсДокумента,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).Состояние
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).ДатаЗакрытия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ,
	|	СоставВыписки.СпособЗачетаОплаты,
	|	СоставВыписки.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставВыписки.Ссылка КАК Ссылка,
	|	СоставВыписки.Дата КАК Дата,
	|	СоставВыписки.Организация КАК Организация,
	|	СоставВыписки.ХозОперация КАК ХозОперация,
	|	СоставВыписки.Контрагент КАК Контрагент,
	|	СоставВыписки.Контрагент.ВидКонтрагента КАК ВидКонтрагента,
	|	СоставВыписки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	СоставВыписки.Сделка КАК Сделка,
	|	СУММА(СоставВыписки.СуммаПриход) КАК Сумма,
	|	СоставВыписки.ВалютаДоговора КАК ВалютаДоговора,
	|	СоставВыписки.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	СоставВыписки.ВалютаРегл КАК ВалютаРегл,
	|	СоставВыписки.ВалютаУпр КАК ВалютаУпр,
	|	СоставВыписки.КурсВалютыУпр КАК КурсВалютыУпр,
	|	СоставВыписки.КурсВалютыРегл КАК КурсВалютыРегл,
	|	СоставВыписки.ВалютаДокумента КАК ВалютаДокумента,
	|	СоставВыписки.КурсДокумента КАК КурсДокумента,
	|	ИСТИНА КАК ЭтоПриход,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).Состояние
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СостояниеЗаказНаряда,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).ДатаЗакрытия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаЗакрытия,
	|	СоставВыписки.СпособЗачетаОплаты КАК СпособЗачетаОплаты,
	|	СоставВыписки.Заказ КАК Заказ
	|ИЗ
	|	СоставВыписки КАК СоставВыписки
	|ГДЕ
	|	СоставВыписки.СуммаПриход > 0
	|	И СоставВыписки.СуммаРасход = 0
	|	И СоставВыписки.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|	И СоставВыписки.СпособЗачетаОплаты = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Незачитывать)
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставВыписки.Ссылка,
	|	СоставВыписки.Дата,
	|	СоставВыписки.Организация,
	|	СоставВыписки.ХозОперация,
	|	СоставВыписки.Контрагент,
	|	СоставВыписки.Контрагент.ВидКонтрагента,
	|	СоставВыписки.ДоговорВзаиморасчетов,
	|	СоставВыписки.Сделка,
	|	СоставВыписки.ВалютаДоговора,
	|	СоставВыписки.КурсВалютыВзаиморасчетов,
	|	СоставВыписки.ВалютаРегл,
	|	СоставВыписки.ВалютаУпр,
	|	СоставВыписки.КурсВалютыУпр,
	|	СоставВыписки.КурсВалютыРегл,
	|	СоставВыписки.ВалютаДокумента,
	|	СоставВыписки.КурсДокумента,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).Состояние
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).ДатаЗакрытия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ,
	|	СоставВыписки.СпособЗачетаОплаты,
	|	СоставВыписки.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставВыписки.Ссылка КАК Ссылка,
	|	СоставВыписки.Дата КАК Дата,
	|	СоставВыписки.Организация КАК Организация,
	|	СоставВыписки.ХозОперация КАК ХозОперация,
	|	СоставВыписки.Контрагент КАК Контрагент,
	|	СоставВыписки.Контрагент.ВидКонтрагента КАК ВидКонтрагента,
	|	СоставВыписки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	СоставВыписки.Сделка КАК Сделка,
	|	СУММА(СоставВыписки.СуммаПриход) КАК Сумма,
	|	СоставВыписки.ВалютаДоговора КАК ВалютаДоговора,
	|	СоставВыписки.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	СоставВыписки.ВалютаРегл КАК ВалютаРегл,
	|	СоставВыписки.ВалютаУпр КАК ВалютаУпр,
	|	СоставВыписки.КурсВалютыУпр КАК КурсВалютыУпр,
	|	СоставВыписки.КурсВалютыРегл КАК КурсВалютыРегл,
	|	СоставВыписки.ВалютаДокумента КАК ВалютаДокумента,
	|	СоставВыписки.КурсДокумента КАК КурсДокумента,
	|	ИСТИНА КАК ЭтоПриход,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).Состояние
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СостояниеЗаказНаряда,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).ДатаЗакрытия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаЗакрытия,
	|	СоставВыписки.СпособЗачетаОплаты КАК СпособЗачетаОплаты,
	|	СоставВыписки.Заказ КАК Заказ
	|ИЗ
	|	СоставВыписки КАК СоставВыписки
	|ГДЕ
	|	СоставВыписки.СуммаПриход > 0
	|	И СоставВыписки.СуммаРасход = 0
	|	И СоставВыписки.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|	И СоставВыписки.СпособЗачетаОплаты = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставВыписки.Ссылка,
	|	СоставВыписки.Дата,
	|	СоставВыписки.Организация,
	|	СоставВыписки.ХозОперация,
	|	СоставВыписки.Контрагент,
	|	СоставВыписки.Контрагент.ВидКонтрагента,
	|	СоставВыписки.ДоговорВзаиморасчетов,
	|	СоставВыписки.Сделка,
	|	СоставВыписки.ВалютаДоговора,
	|	СоставВыписки.КурсВалютыВзаиморасчетов,
	|	СоставВыписки.ВалютаРегл,
	|	СоставВыписки.ВалютаУпр,
	|	СоставВыписки.КурсВалютыУпр,
	|	СоставВыписки.КурсВалютыРегл,
	|	СоставВыписки.ВалютаДокумента,
	|	СоставВыписки.КурсДокумента,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).Состояние
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).ДатаЗакрытия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ,
	|	СоставВыписки.СпособЗачетаОплаты,
	|	СоставВыписки.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКонтрагентами.ДокументРасчетов КАК ДокументРасчетов,
	|	РасчетыСКонтрагентами.Заказ КАК Заказ,
	|	МИНИМУМ(РасчетыСКонтрагентами.Период) КАК Период
	|ПОМЕСТИТЬ ТаблицаСортировки
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
	|ГДЕ
	|	(РасчетыСКонтрагентами.Организация, РасчетыСКонтрагентами.Контрагент, РасчетыСКонтрагентами.ДоговорВзаиморасчетов) В
	|			(ВЫБРАТЬ
	|				ШапкаДокумента.Организация КАК Организация,
	|				ШапкаДокумента.Контрагент КАК Контрагент,
	|				ШапкаДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов
	|			ИЗ
	|				ШапкаДокумента КАК ШапкаДокумента)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКонтрагентами.ДокументРасчетов,
	|	РасчетыСКонтрагентами.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Организация КАК Организация,
	|	РасчетыСКонтрагентамиОстатки.Контрагент КАК Контрагент,
	|	РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	РасчетыСКонтрагентамиОстатки.ТипРасчета КАК ТипРасчета,
	|	РасчетыСКонтрагентамиОстатки.ДокументРасчетов КАК ДокументРасчетов,
	|	РасчетыСКонтрагентамиОстатки.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА РасчетыСКонтрагентамиОстатки.СуммаОстаток < 0
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * РасчетыСКонтрагентамиОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ТаблицаСортировки.Период КАК Период,
	|	ВЫБОР
	|		КОГДА РасчетыСКонтрагентамиОстатки.СуммаОстаток < 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоПриход
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(
	|			&моментВремени,
	|			(Организация, Контрагент, ДоговорВзаиморасчетов) В
	|				(ВЫБРАТЬ
	|					ШапкаДокумента.Организация КАК Организация,
	|					ШапкаДокумента.Контрагент КАК Контрагент,
	|					ШапкаДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов
	|				ИЗ
	|					ШапкаДокумента КАК ШапкаДокумента)) КАК РасчетыСКонтрагентамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСортировки КАК ТаблицаСортировки
	|		ПО РасчетыСКонтрагентамиОстатки.ДокументРасчетов = ТаблицаСортировки.ДокументРасчетов
	|			И РасчетыСКонтрагентамиОстатки.Заказ = ТаблицаСортировки.Заказ
	|ГДЕ
	|	РасчетыСКонтрагентамиОстатки.СуммаОстаток <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШапкаДокумента.Ссылка КАК Ссылка,
	|	ШапкаДокумента.Дата КАК Дата,
	|	ШапкаДокумента.Организация КАК Организация,
	|	ШапкаДокумента.ХозОперация КАК ХозОперация,
	|	ШапкаДокумента.Контрагент КАК Контрагент,
	|	ШапкаДокумента.ВидКонтрагента КАК ВидКонтрагента,
	|	ШапкаДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ШапкаДокумента.ВалютаДоговора КАК ВалютаДоговора,
	|	ШапкаДокумента.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	ШапкаДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ШапкаДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ШапкаДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ШапкаДокумента.КурсДокумента КАК КурсДокумента,
	|	ШапкаДокумента.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ШапкаДокумента.КурсВалютыРегл КАК КурсВалютыРегл
	|ИЗ
	|	ШапкаДокумента КАК ШапкаДокумента";
	
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДвиженияДокумента.ДляПроведения.Дата, ВидГраницы.Исключая));
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	// Сформируем приход.
	ОстаткиПоПриходу = ПакетЗапроса[8].Выгрузить();
	НайденныеСтроки = ОстаткиПоПриходу.НайтиСтроки(Новый Структура("ЭтоПриход", Ложь));
	
	Для Каждого СтрокаУдалить Из НайденныеСтроки Цикл
		ОстаткиПоПриходу.Удалить(СтрокаУдалить);
	КонецЦикла;
	
	ОстаткиПоПриходу.Сортировать("Период,ДокументРасчетов,Заказ");
	
	ОплатыПоДокументу = Новый Структура();
	ОплатыПоДокументу.Вставить("ОстаткиВзаиморасчетов", ОстаткиПоПриходу);
	ОплатыПоДокументу.Вставить("ОплатаПоДокументамРасчета", ПакетЗапроса[1].Выгрузить());
	ОплатыПоДокументу.Вставить("АвтоматическоеСписание", ПакетЗапроса[6].Выгрузить());
	ОплатыПоДокументу.Вставить("ДанныеОбОплате", ПакетЗапроса[5].Выгрузить());
	ОплатыПоДокументу.Вставить("ДанныеОДокументе", ПакетЗапроса[9].Выбрать());
	
	РасчетыСКонтрагентамиСервер.РаспределитьОплатуКонтрагента(
		РасчетыСКонтрагентами,
		ОплатыПоДокументу,
		Отказ);
	
	// Сформируем расход.
	ОстаткиПоРасходу = ПакетЗапроса[8].Выгрузить();
	НайденныеСтроки = ОстаткиПоРасходу.НайтиСтроки(Новый Структура("ЭтоПриход", Истина));
	
	Для Каждого СтрокаУдалить Из НайденныеСтроки Цикл
		ОстаткиПоРасходу.Удалить(СтрокаУдалить);
	КонецЦикла;
	
	ОстаткиПоРасходу.Сортировать("Период,ДокументРасчетов,Заказ");
	
	ОплатыПоДокументу = Новый Структура();
	ОплатыПоДокументу.Вставить("ОстаткиВзаиморасчетов", ОстаткиПоРасходу);
	ОплатыПоДокументу.Вставить("ОплатаПоДокументамРасчета", ПакетЗапроса[2].Выгрузить());
	ОплатыПоДокументу.Вставить("АвтоматическоеСписание", ПакетЗапроса[4].Выгрузить());
	ОплатыПоДокументу.Вставить("ДанныеОбОплате", ПакетЗапроса[3].Выгрузить());
	ОплатыПоДокументу.Вставить("ДанныеОДокументе", ПакетЗапроса[9].Выбрать());
	
	РасчетыСКонтрагентамиСервер.РаспределитьОплатуКонтрагента(
		РасчетыСКонтрагентами,
		ОплатыПоДокументу,
		Отказ,
		Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьРасчетамиПоСделке(ДвиженияДокумента, РасчетыСКонтрагентами)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	СоставВыписки.Ссылка КАК Ссылка,
	|	СоставВыписки.Дата КАК Дата,
	|	СоставВыписки.Организация КАК Организация,
	|	СоставВыписки.ХозОперация КАК ХозОперация,
	|	СоставВыписки.Контрагент КАК Контрагент,
	|	СоставВыписки.Контрагент.ВидКонтрагента КАК ВидКонтрагента,
	|	СоставВыписки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	СоставВыписки.Сделка КАК Сделка,
	|	СУММА(СоставВыписки.СуммаПриход) КАК Сумма,
	|	СоставВыписки.ВалютаДоговора КАК ВалютаДоговора,
	|	СоставВыписки.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	СоставВыписки.ВалютаРегл КАК ВалютаРегл,
	|	СоставВыписки.ВалютаУпр КАК ВалютаУпр,
	|	СоставВыписки.КурсВалютыРегл КАК КурсВалютыРегл,
	|	СоставВыписки.КурсВалютыУпр КАК КурсВалютыУпр,
	|	СоставВыписки.ВалютаДокумента КАК ВалютаДокумента,
	|	СоставВыписки.КурсДокумента КАК КурсДокумента,
	|	ИСТИНА КАК ЭтоПриход,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).Состояние
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СостояниеЗаказНаряда,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).ДатаЗакрытия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаЗакрытия
	|ИЗ
	|	СоставВыписки КАК СоставВыписки
	|ГДЕ
	|	СоставВыписки.СуммаПриход > 0
	|	И СоставВыписки.СуммаРасход = 0
	|	И СоставВыписки.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставВыписки.Ссылка,
	|	СоставВыписки.Дата,
	|	СоставВыписки.Организация,
	|	СоставВыписки.ХозОперация,
	|	СоставВыписки.Контрагент,
	|	СоставВыписки.Контрагент.ВидКонтрагента,
	|	СоставВыписки.ДоговорВзаиморасчетов,
	|	СоставВыписки.Сделка,
	|	СоставВыписки.ВалютаДоговора,
	|	СоставВыписки.КурсВалютыВзаиморасчетов,
	|	СоставВыписки.ВалютаРегл,
	|	СоставВыписки.ВалютаУпр,
	|	СоставВыписки.КурсВалютыРегл,
	|	СоставВыписки.КурсВалютыУпр,
	|	СоставВыписки.ВалютаДокумента,
	|	СоставВыписки.КурсДокумента,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).Состояние
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).ДатаЗакрытия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоставВыписки.Ссылка,
	|	СоставВыписки.Дата,
	|	СоставВыписки.Организация,
	|	СоставВыписки.ХозОперация,
	|	СоставВыписки.Контрагент,
	|	СоставВыписки.Контрагент.ВидКонтрагента,
	|	СоставВыписки.ДоговорВзаиморасчетов,
	|	СоставВыписки.Сделка,
	|	СУММА(СоставВыписки.СуммаРасход - СоставВыписки.СуммаУслуг),
	|	СоставВыписки.ВалютаДоговора,
	|	СоставВыписки.КурсВалютыВзаиморасчетов,
	|	СоставВыписки.ВалютаРегл,
	|	СоставВыписки.ВалютаУпр,
	|	СоставВыписки.КурсВалютыРегл,
	|	СоставВыписки.КурсВалютыУпр,
	|	СоставВыписки.ВалютаДокумента,
	|	СоставВыписки.КурсДокумента,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).Состояние
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).ДатаЗакрытия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ
	|ИЗ
	|	СоставВыписки КАК СоставВыписки
	|ГДЕ
	|	СоставВыписки.СуммаРасход > 0
	|	И СоставВыписки.СуммаПриход = 0
	|	И СоставВыписки.СтатьяДДС <> ЗНАЧЕНИЕ(Справочник.СтатьиДДС.ОплатаБанковскихУслуг)
	|	И СоставВыписки.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставВыписки.Ссылка,
	|	СоставВыписки.Дата,
	|	СоставВыписки.Организация,
	|	СоставВыписки.ХозОперация,
	|	СоставВыписки.Контрагент,
	|	СоставВыписки.Контрагент.ВидКонтрагента,
	|	СоставВыписки.ДоговорВзаиморасчетов,
	|	СоставВыписки.Сделка,
	|	СоставВыписки.ВалютаДоговора,
	|	СоставВыписки.ВалютаРегл,
	|	СоставВыписки.ВалютаУпр,
	|	СоставВыписки.КурсВалютыВзаиморасчетов,
	|	СоставВыписки.КурсВалютыРегл,
	|	СоставВыписки.КурсВалютыУпр,
	|	СоставВыписки.ВалютаДокумента,
	|	СоставВыписки.КурсДокумента,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).Состояние
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СоставВыписки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставВыписки.Сделка КАК Документ.ЗаказНаряд).ДатаЗакрытия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ";
	
	ДанныеОбОплате = Запрос.Выполнить().Выгрузить();
	
	Если ДанныеОбОплате.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОплаты Из ДанныеОбОплате Цикл
		
		НоваяСтрока = РасчетыСКонтрагентами.Добавить();
		НоваяСтрока.ВидДвижения = 
			?(СтрокаОплаты.ЭтоПриход, ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
		НоваяСтрока.Организация = СтрокаОплаты.Организация;
		НоваяСтрока.Период = СтрокаОплаты.Дата;
		НоваяСтрока.Регистратор = СтрокаОплаты.Ссылка;
		НоваяСтрока.Контрагент = СтрокаОплаты.Контрагент;
		НоваяСтрока.ДоговорВзаиморасчетов = СтрокаОплаты.ДоговорВзаиморасчетов;
		
		// Определим тип расчета, документ расчета и сделку
		Если ЗначениеЗаполнено(СтрокаОплаты.Сделка) Тогда
			
			СделкаЯвляетсяЗаказом =
				Метаданные.ОпределяемыеТипы.ЗаказыДокументовРасчета.Тип.СодержитТип(ТипЗнч(СтрокаОплаты.Сделка))
				И Не (СтрокаОплаты.СостояниеЗаказНаряда = Справочники.ВидыСостоянийЗаказНарядов.Закрыт
				И СтрокаОплаты.Дата >= СтрокаОплаты.ДатаЗакрытия);
			СделкаСчетНаОплату = ОбработкаСобытийДокументаСервер.ЭтоСчетНаОплату(ТипЗнч(СтрокаОплаты.Сделка));
			СделкаЯвляетсяДокументомОплаты =
				Не (ТипЗнч(СтрокаОплаты.Сделка) = Тип("ДокументСсылка.АвансовыйОтчет")
					И СтрокаОплаты.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ПодотчетноеЛицо)
				И Метаданные.ОпределяемыеТипы.ДокументыОплаты.Тип.СодержитТип(ТипЗнч(СтрокаОплаты.Сделка))
				И Не ОбработкаСобытийДокументаСервер.ЭтоЗаказАвтомобиля(ТипЗнч(СтрокаОплаты.Сделка));
			ЭтоАванс = СделкаЯвляетсяЗаказом ИЛИ СделкаСчетНаОплату ИЛИ СделкаЯвляетсяДокументомОплаты;
			
		Иначе
			
			СделкаЯвляетсяЗаказом = Ложь;
			СделкаЯвляетсяДокументомОплаты = Ложь;
			ЭтоАванс = Истина;
			
		КонецЕсли;
		
		Если ЭтоАванс Тогда
			
			НоваяСтрока.ТипРасчета = Перечисления.ТипыРасчетов.Аванс;
			НоваяСтрока.ДокументРасчетов =
				?(СделкаЯвляетсяДокументомОплаты,
				СтрокаОплаты.Сделка,
				СтрокаОплаты.Ссылка);
			
			Если СделкаЯвляетсяЗаказом Тогда
				
				НоваяСтрока.Заказ = СтрокаОплаты.Сделка;
				
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока.ТипРасчета = Перечисления.ТипыРасчетов.Оплата;
			НоваяСтрока.ДокументРасчетов = СтрокаОплаты.Сделка;
			
		КонецЕсли;
		
		КурсВалютыВзаиморасчетов = ?(Не ЗначениеЗаполнено(СтрокаОплаты.КурсВалютыВзаиморасчетов),
					СтрокаОплаты.Дата,
					СтрокаОплаты.КурсВалютыВзаиморасчетов);
		
		НоваяСтрока.Сумма = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СтрокаОплаты.Сумма,
				СтрокаОплаты.ВалютаДокумента,
				СтрокаОплаты.КурсДокумента,
				СтрокаОплаты.ВалютаДоговора,
				КурсВалютыВзаиморасчетов),
			2);
		НоваяСтрока.СуммаУпр = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СтрокаОплаты.Сумма,
				СтрокаОплаты.ВалютаДокумента,
				СтрокаОплаты.КурсДокумента,
				СтрокаОплаты.ВалютаУпр,
				СтрокаОплаты.КурсВалютыУпр),
			2);
		НоваяСтрока.СуммаБаз = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СтрокаОплаты.Сумма,
				СтрокаОплаты.ВалютаДокумента,
				СтрокаОплаты.КурсДокумента,
				СтрокаОплаты.ВалютаРегл,
				СтрокаОплаты.КурсВалютыРегл),
			2);
		НоваяСтрока.ХозОперация = СтрокаОплаты.ХозОперация;
		НоваяСтрока.Курс = СтрокаОплаты.КурсДокумента;
		НоваяСтрока.ВалютаПлатежа = СтрокаОплаты.ВалютаДокумента;
		Если СтрокаОплаты.ЭтоПриход Тогда
			НоваяСтрока.ВидОперации = ?(
				ЭтоАванс,
				Перечисления.ВидыОперацийВзаиморасчетов.НачислениеКредиторскойЗадолженности,
				Перечисления.ВидыОперацийВзаиморасчетов.ПогашениеДебиторскойЗадолженности);
		Иначе
			НоваяСтрока.ВидОперации = ?(
				ЭтоАванс,
				Перечисления.ВидыОперацийВзаиморасчетов.НачислениеДебиторскойЗадолженности,
				Перечисления.ВидыОперацийВзаиморасчетов.ПогашениеКредиторскойЗадолженности);
		КонецЕсли;
		НоваяСтрока.Активность = Истина;
		
		// Дополнительные данные
		НоваяСтрока.КурсВалютыВзаиморасчетов = КурсВалютыВзаиморасчетов;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Неопределено, Структура - Получить параметры действия:
//   * ОбъектЗаполнен - Булево
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ОбъектЗаполнен", (Объект.Состав.Количество() > 0));
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Получим признаки необходимости совершить пересчет суммовых показателей документа.
	ТребуетсяПересчетЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен", ЛОЖЬ);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
	// Пересчитаем сумму к оплате отдельно от таблицы товаров.
	Если ТребуетсяПересчетЦен Тогда
		
		СтарыйКурс = ПараметрыДействия.СтарыйКурс;
		НовыйКурс  = Объект.КурсДокумента;
		
		Если (СтарыйКурс*НовыйКурс)=0 ИЛИ СтарыйКурс=НовыйКурс Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицыТовары Из Объект.Товары Цикл
			СтрокаТаблицыТовары.СебестоимостьАвтомобиля = Окр(СтрокаТаблицыТовары.СебестоимостьАвтомобиля*СтарыйКурс/НовыйКурс, 2);
			СтрокаТаблицыТовары.СуммаСкидкиБонусами     = Окр(СтрокаТаблицыТовары.СуммаСкидкиБонусами*СтарыйКурс/НовыйКурс, 2);
			СтавкаНДС = СтрокаТаблицыТовары.СтавкаНДС.Ставка;
			Если НЕ СтрокаТаблицыТовары.СебестоимостьАвтомобиля = 0 Тогда
				СтрокаТаблицыТовары.СуммаНДС = (СтрокаТаблицыТовары.СуммаВсего - СтрокаТаблицыТовары.СебестоимостьАвтомобиля) * СтавкаНДС / (100 + СтавкаНДС);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	// проверим ставку для организации и подразделения
	УстановитьСтавкуНДС(Объект);
	
	// Установим банковский счет
	УстановитьБанковскийСчет(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
	// проверим ставку для организации и подразделения
	УстановитьСтавкуНДС(Объект);
	
	// Установим банковский счет
	УстановитьБанковскийСчет(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ЗаполнитьПлатежноеПоручениеОснование(Объект);
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ПоступлениеВОперационнуюКассу
		И Объект.СтатьяДДС.ВидДвижения <> Перечисления.ВидыДвижений.Приход Тогда
		Объект.СтатьяДДС = Неопределено;
	ИначеЕсли Объект.ХозОперация = Справочники.ХозОперации.РасходИзОперационнойКассы
		И Объект.СтатьяДДС.ВидДвижения <> Перечисления.ВидыДвижений.Расход Тогда
		Объект.СтатьяДДС = Неопределено;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
	// пересчитаем курс взаиморасчетов в ТЧ Состав
	Для Каждого Строка Из Объект.Состав Цикл
		Если ЗначениеЗаполнено(Строка.ДоговорВзаиморасчетов) Тогда
			Если Строка.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = Объект.ВалютаДокумента Тогда
				Строка.КурсВалютыВзаиморасчетов = Объект.КурсДокумента;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Статья ДДС".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СтатьяДДСПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.СтатьяДДС.ВидДвижения=Перечисления.ВидыДвижений.Приход Тогда
		Если Объект.СуммаДокументаРасход <> 0 Тогда
			Объект.СуммаДокументаРасход = 0;
			ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
			ПараметрыДействия.Вставить("ИзменениеНаправленияПлатежа",Истина);
			СуммаДокументаРасходПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
	ИначеЕсли Объект.СтатьяДДС.ВидДвижения=Перечисления.ВидыДвижений.Расход Тогда
		Если Объект.СуммаДокументаПриход <> 0 Тогда
			Объект.СуммаДокументаПриход = 0;
			ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
			ПараметрыДействия.Вставить("ИзменениеНаправленияПлатежа",Истина);
			СуммаДокументаПриходПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.СтатьяДДС = Справочники.СтатьиДДС.ОплатаБанковскихУслуг Тогда
		Объект.СуммаУслуг = 0;
	КонецЕсли;
	
	// Пройдемся по документу и сменим строку
	Для Каждого Строка Из Объект.Состав Цикл
		Если Строка.СтатьяДДС <> Объект.СтатьяДДС Тогда
			Строка.СтатьяДДС = Объект.СтатьяДДС;
			СоставСтатьяДДСПриИзменении(Объект, Строка, ПараметрыДействия);
			СуммаДокументаПриходПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
	КонецЦикла;
	
	Объект.ВидОперации = Объект.СтатьяДДС.Операция; 
	ВидОперацииПриИзменении(Объект, ПараметрыДействия);
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "ВидОперации".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВидОперацииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ЭтоВнутренниеПереводы = ПроверитьВидОперацииПеремещение(Объект.ВидОперации);
	
	Если ЭтоВнутренниеПереводы Тогда 
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Объект.ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Статья ДДС".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаРасходПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	СтавкаНДСПриИзменении(Объект, ПараметрыДействия);
	
	// Заполним итоговую сумму
	ИтогиОперации = РассчитатьИтогиОперации(Объект);
	ЗаполнитьЗначенияСвойств(Объект, ИтогиОперации);

КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Статья ДДС".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриходПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	СтавкаНДСПриИзменении(Объект, ПараметрыДействия);
	
	// Заполним итоговую сумму
	ИтогиОперации = РассчитатьИтогиОперации(Объект);
	ЗаполнитьЗначенияСвойств(Объект, ИтогиОперации);

КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма услуг".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаУслугПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	СуммаПлатежа = Объект.СуммаДокументаПриход + Объект.СуммаДокументаРасход;
	Если СуммаПлатежа < Объект.СуммаУслуг Тогда
		Объект.СуммаУслуг = СуммаПлатежа;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Сумма прихода/расхода не может быть меньше суммы комиссии банка.'"));
	КонецЕсли;
	
КонецПроцедуры // СуммаУслугПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Статья ДДС".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// установим параметр вид договора
	Если Объект.СтатьяДДС.ВидДвижения=Перечисления.ВидыДвижений.Приход Тогда
		ПараметрыДействия.Вставить("ВидДоговора",Перечисления.ВидыДоговоров.Продажа);
	ИначеЕсли Объект.СтатьяДДС.ВидДвижения=Перечисления.ВидыДвижений.Расход Тогда
		ПараметрыДействия.Вставить("ВидДоговора",Перечисления.ВидыДоговоров.Покупка);
	Иначе
		ПараметрыДействия.Вставить("ВидДоговора",Перечисления.ВидыДоговоров.Продажа);
	КонецЕсли;
	
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	Для Каждого Строка Из Объект.Состав Цикл
		Если Строка.Контрагент = Объект.Контрагент Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.Контрагент = Объект.Контрагент;
		СоставКонтрагентПриИзменении(Объект, Строка);
	КонецЦикла;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Статья ДДС".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура, ДокументОбъект.Выписка - Объект;
//  ПараметрыДействия - Структура- Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорВзаиморасчетов, "ВидДоговора,СтатьяДДС");
	
	Если ЗначениеЗаполнено(РеквизитыДоговора.СтатьяДДС) Тогда
		
		Объект.СтатьяДДС = РеквизитыДоговора.СтатьяДДС;
		СтатьяДДСПриИзменении(Объект, ПараметрыДействия);
		
	ИначеЕсли РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоров.Зарплата Тогда
		
		Объект.СтатьяДДС = Справочники.СтатьиДДС.ВыдачаЗП;
		СтатьяДДСПриИзменении(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Состав Цикл
		
		Если Строка.ДоговорВзаиморасчетов = Объект.ДоговорВзаиморасчетов Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.ДоговорВзаиморасчетов = Объект.ДоговорВзаиморасчетов;
		СоставДоговорВзаиморасчетовПриИзменении(Объект, Строка);
		
	КонецЦикла;
	
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Статья ДДС".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СтавкаНДСПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Объект.СуммаНДС = Окр((Объект.СуммаДокументаПриход + Объект.СуммаДокументаРасход)*Объект.СтавкаНДС.Ставка/(100+Объект.СтавкаНДС.Ставка),2);
	
	Для Каждого Строка Из Объект.Состав Цикл
		Если Строка.СтавкаНДС = Объект.СтавкаНДС Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.СтавкаНДС = Объект.СтавкаНДС;
		СоставСтавкаНДСПриИзменении(Объект, Строка);
	КонецЦикла;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Статья ДДС".
//
// Параметры:
//  Объект - ДокументОбъект.Выписка, ДанныеФормыСтруктура - Объект, для которого выполняется обработка события;
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура БанковскийСчетПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ВалютаДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ВалютаДенежныхСредств");
	
	Если Не Объект.БанковскийСчет.Пустая() И Объект.ВалютаДокумента <> ВалютаДенежныхСредств Тогда
		
		Объект.ВалютаДокумента = ВалютаДенежныхСредств;
		Документы.Выписка.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПлатежноеПоручениеОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ЗаполнитьПлатежноеПоручениеОснование(Объект);
	
КонецПроцедуры // ПлатежноеПоручениеОснованиеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Касса ККМ".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КассаККМПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Производим приведение параметров кассового ордера в соответствии с выбранной кассой ККМ.
	ОбработкаРеквизитовДокументаСервер.КассаККМПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КассаККМПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСостав

// Обработчик события возникающего при изменении данных реквизита "Способ зачета оплаты" в таблице "Состав".
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Неопределено - Параметры действия
Процедура СоставСпособЗачетаАвансовПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Не РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(Объект.ДоговорВзаиморасчетов) Тогда
		Возврат;
	КонецЕсли;
	
	Если Строка.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически Тогда
		Строка.Сделка = Неопределено;
		Строка.Заказ = Неопределено;
	ИначеЕсли Строка.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда
		Строка.Сделка = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Состав".
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТабличнойЧасти - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Неопределено, Структура - Параметры действия:
//   * ИзменениеНаправленияПлатежа - Булево
Процедура СоставСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	Строка.СуммаНДС = Окр((Строка.СуммаПриход + Строка.СуммаРасход) * Строка.СтавкаНДС.Ставка /
		(100 + Строка.СтавкаНДС.Ставка), 2);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Состав".
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура, ДокументОбъект.Выписка - Объект, для которого выполняется обработка события;
//  Строка - СтрокаТабличнойЧасти - Строка, при изменении поля которой возникло событие:
//   * ПлатежноеПоручениеОснование - ДокументСсылка.ПлатежноеПоручение 
//  ПараметрыДействия - Неопределено, Структура - Параметры действия:
//   * ИзменениеНаправленияПлатежа - Булево
Процедура СоставКонтрагентПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Строка.Контрагент) Тогда
		
		ВидДоговора = Неопределено;
		
		Если ЗначениеЗаполнено(Объект.СтатьяДДС) И Объект.СтатьяДДС.ВидДвижения=Перечисления.ВидыДвижений.Приход Тогда
			
			ВидДоговора = Перечисления.ВидыДоговоров.Продажа;
			
		ИначеЕсли ЗначениеЗаполнено(Объект.СтатьяДДС) И Объект.СтатьяДДС.ВидДвижения=Перечисления.ВидыДвижений.Расход Тогда
			
			ВидДоговора = Перечисления.ВидыДоговоров.Покупка;
			
		КонецЕсли;
		
		Если Не ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеЗаполнятьДоговор", Ложь) Тогда
			
			Строка.ДоговорВзаиморасчетов = ОбработкаРеквизитовДокументаСервер.ПолучитьДоговорВзаиморасчетов(
					Строка.Контрагент,
					ВидДоговора,
					Объект,
					ПараметрыДействия
			);
			
		КонецЕсли;
		
		СоставДоговорВзаиморасчетовПриИзменении(Объект, Строка, ПараметрыДействия);
		
		Если
			ЗначениеЗаполнено(Строка.ПлатежноеПоручениеОснование)
			И ТипЗнч(Строка.ПлатежноеПоручениеОснование) = Тип("ДокументСсылка.ПлатежноеПоручение")
		Тогда
			
			КонтрагентПлатежногоПоручения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ПлатежноеПоручениеОснование,
				"Контрагент");
			
			Если Строка.Контрагент <> КонтрагентПлатежногоПоручения Тогда
				
				Строка.ПлатежноеПоручениеОснование = Неопределено;
				Строка.НазначениеПлатежа = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Строка.ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
		Строка.ПлатежноеПоручениеОснование = Неопределено;
		
	КонецЕсли;
	
	// Проставим ставки НДС для входящих платежей
	Если Строка.Контрагент.ОсвобожденОтНДС Тогда
		НоваяСтавкаНДС = Справочники.СтавкиНДС.БезНДС;
	Иначе
		НоваяСтавкаНДС = РаботаСоСтавкамиНДСПовтИсп.СтавкаНДСПоЗначению(20, Ложь);
	КонецЕсли;
	
	Если Строка.СуммаПриход <> 0 И Строка.СтавкаНДС <> НоваяСтавкаНДС Тогда
		Строка.СтавкаНДС = НоваяСтавкаНДС;
		СоставСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	Иначе
		НоваяСтавкаНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата).ОсновнаяСтавка;
		
		Если Строка.СуммаРасход <> 0 И Строка.СтавкаНДС <> НоваяСтавкаНДС Тогда
			Строка.СтавкаНДС = НоваяСтавкаНДС;
			СоставСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьРеквизит(Строка, "ФормаСобственности") Тогда
		
		Строка.ФормаСобственности = Строка.Контрагент.ФормаСобственности;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Состав".
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТабличнойЧасти - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Неопределено, Структура - Параметры действия:
//   * ИзменениеНаправленияПлатежа - Булево
//
Процедура СоставДоговорВзаиморасчетовПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ЭтоЗП = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ДоговорВзаиморасчетов, "ВидДоговора") = Перечисления.ВидыДоговоров.Зарплата);
	Если ЗначениеЗаполнено(Строка.ДоговорВзаиморасчетов) Тогда
		Если ЕстьРеквизит(Строка, "СпособВеденияВзаиморасчетов") Тогда
			СпособВеденияВзаиморасчетов = Строка.СпособВеденияВзаиморасчетов;
		Иначе
			СпособВеденияВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Строка.ДоговорВзаиморасчетов,
				"СпособВеденияВзаиморасчетов");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Сделка)
			И СпособВеденияВзаиморасчетов = Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам
			И Не РасчетыСКонтрагентамиСервер.ДоступныеТипыДокументовРасчета().СодержитТип(ТипЗнч(Строка.Сделка)) Тогда
			Строка.Сделка = Неопределено;
		КонецЕсли;
		Строка.СпособЗачетаАвансов =
			?(Не ЭтоЗП, Строка.ДоговорВзаиморасчетов.СпособЗачетаАвансов, Перечисления.СпособыЗачетаАвансов.Автоматически);
		Строка.КурсВалютыВзаиморасчетов = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалютыВзаиморасчетов(Объект, Строка.ДоговорВзаиморасчетов);
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеЗаполнятьСуммуДолга", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	Если Строка.СуммаПриход = 0 И Строка.СуммаРасход = 0 Тогда
		СоставРассчитатьСумму(Объект, Строка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.ДоговорВзаиморасчетов.СтатьяДДС) Тогда
		Строка.СтатьяДДС = Строка.ДоговорВзаиморасчетов.СтатьяДДС;
		СоставСтатьяДДСПриИзменении(Объект, Строка, ПараметрыДействия);
	ИначеЕсли ЭтоЗП Тогда
		Строка.СтатьяДДС = Справочники.СтатьиДДС.ВыдачаЗП;
		СоставСтатьяДДСПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Состав".
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура, Неопределено - Параметры действия:
// * ОбъектЗаполнен - Булево
Процедура СоставСтатьяДДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Строка.СтатьяДДС) Тогда
		Если Строка.СтатьяДДС.ВидДвижения = Перечисления.ВидыДвижений.Приход Тогда
			Если НЕ Строка.СуммаРасход = 0 Тогда
				Строка.СуммаРасход = 0;
				СоставСуммаРасходПриИзменении(Объект, Строка, Истина, ПараметрыДействия);
			КонецЕсли;
		ИначеЕсли Строка.СтатьяДДС.ВидДвижения = Перечисления.ВидыДвижений.Расход Тогда
			Если НЕ Строка.СуммаПриход = 0 Тогда
				Строка.СуммаПриход = 0;
				СоставСуммаПриходПриИзменении(Объект, Строка, Истина, ПараметрыДействия);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, "ВидДвижения", "Состав") Тогда
		Строка.ВидДвижения = Строка.СтатьяДДС.ВидДвижения;
	КонецЕсли;
	
	Если Строка.СтатьяДДС = Справочники.СтатьиДДС.ОплатаБанковскихУслуг Тогда
		Если Строка.СуммаУслуг <> 0 Тогда
			Строка.СуммаУслуг = 0;
			СоставСуммаУслугПриИзменении(Объект, Строка, ПараметрыДействия);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Состав".
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Неопределено - Параметры действия
Процедура СоставСделкаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Строка.Сделка) Тогда
		
		КонтрагентИДоговорСделки = УправлениеДиалогомДокументаСервер.ИменаКонтрагентаИДоговораВзаиморасчетовПоСделке(
			Строка.Сделка,
			Объект);
		
		Если Объект.ХозОперация = Справочники.ХозОперации.БанковскаяВыписка Тогда
			Если ЕстьРеквизит(Строка.Сделка, КонтрагентИДоговорСделки.ИмяКонтрагента) Тогда
				Строка.Контрагент = Строка.Сделка[КонтрагентИДоговорСделки.ИмяКонтрагента];
				СоставКонтрагентПриИзменении(Объект, Строка, ПараметрыДействия);
				Если ЕстьРеквизит(Строка.Сделка, КонтрагентИДоговорСделки.ИмяДоговораВзаиморасчетов) Тогда
					Строка.ДоговорВзаиморасчетов = Строка.Сделка[КонтрагентИДоговорСделки.ИмяДоговораВзаиморасчетов];
					СоставДоговорВзаиморасчетовПриИзменении(Объект, Строка, ПараметрыДействия);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ЕстьРеквизит(Строка.Сделка, КонтрагентИДоговорСделки.ИмяКонтрагента) Тогда
				Объект.Контрагент = Строка.Сделка[КонтрагентИДоговорСделки.ИмяКонтрагента];
				КонтрагентПриИзменении(Объект);
				Если ЕстьРеквизит(Строка.Сделка, КонтрагентИДоговорСделки.ИмяДоговораВзаиморасчетов) Тогда
					Объект.ДоговорВзаиморасчетов = Строка.Сделка[КонтрагентИДоговорСделки.ИмяДоговораВзаиморасчетов];
					ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СоставРассчитатьСумму(Объект,Строка);
	
	Если ЗначениеЗаполнено(Строка.Сделка)
		И (Строка.СуммаПриход > 0 ИЛИ Строка.СуммаРасход > 0) Тогда
		
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("СуммаНДС",        Строка.СуммаНДС);
		СтруктураСтроки.Вставить("СтавкаНДС",       Строка.СтавкаНДС);
		СтруктураСтроки.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураСтроки.Вставить("КурсДокумента",   Объект.КурсДокумента);
		СуммаОплаты = ?(Строка.СуммаПриход = 0, Строка.СуммаРасход, Строка.СуммаПриход);
		ОбработкаСобытийДокументаСервер.УстановитьСтавкуНДС(Строка.Сделка, СтруктураСтроки, СуммаОплаты,,, Ложь);
		
		Строка.СуммаНДС = СтруктураСтроки.СуммаНДС;
		
		// Для типа реализации автомобилей потребуется изменить ставку НДС
		Если (ТипЗнч(Строка.Сделка) = Тип("ДокументСсылка.РеализацияАвтомобилей")
			ИЛИ ТипЗнч(Строка.Сделка) = Тип("ДокументСсылка.СчетНаОплатуЗаАвтомобили"))
			И Объект.СтавкаНДС <> СтруктураСтроки.СтавкаНДС Тогда
			Строка.СтавкаНДС = СтруктураСтроки.СтавкаНДС;
			Объект.СтавкаНДС = СтруктураСтроки.СтавкаНДС;
			Объект.СуммаНДС = Объект.Состав.Итог("СуммаНДС");
			
			// Заполним сумму прихода и расхода
			Объект.СуммаДокументаПриход = Объект.Состав.Итог("СуммаПриход");
			Объект.СуммаДокументаРасход = Объект.Состав.Итог("СуммаРасход");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Заказ" в таблице "Состав".
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Неопределено - Параметры действия
Процедура СоставЗаказПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если (Строка.СуммаПриход > 0 ИЛИ Строка.СуммаРасход > 0)
		ИЛИ Не ЗначениеЗаполнено(Строка.Сделка) Тогда
		Возврат;
	КонецЕсли;
	
	СоставРассчитатьСумму(Объект,Строка);
	
	Если ЗначениеЗаполнено(Строка.Сделка)
		И (Строка.СуммаПриход > 0 ИЛИ Строка.СуммаРасход > 0) Тогда
		
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("СуммаНДС",        Строка.СуммаНДС);
		СтруктураСтроки.Вставить("СтавкаНДС",       Строка.СтавкаНДС);
		СтруктураСтроки.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураСтроки.Вставить("КурсДокумента",   Объект.КурсДокумента);
		СуммаОплаты = ?(Строка.СуммаПриход = 0, Строка.СуммаРасход, Строка.СуммаПриход);
		ОбработкаСобытийДокументаСервер.УстановитьСтавкуНДС(Строка.Сделка, СтруктураСтроки, СуммаОплаты,,, Ложь);
		
		Строка.СуммаНДС = СтруктураСтроки.СуммаНДС;
		
		// Для типа реализации автомобилей потребуется изменить ставку НДС
		Если (ТипЗнч(Строка.Сделка) = Тип("ДокументСсылка.РеализацияАвтомобилей")
			ИЛИ ТипЗнч(Строка.Сделка) = Тип("ДокументСсылка.СчетНаОплатуЗаАвтомобили"))
			И Объект.СтавкаНДС <> СтруктураСтроки.СтавкаНДС Тогда
			Строка.СтавкаНДС = СтруктураСтроки.СтавкаНДС;
			Объект.СтавкаНДС = СтруктураСтроки.СтавкаНДС;
			Объект.СуммаНДС = Объект.Состав.Итог("СуммаНДС");
			
			// Заполним сумму прихода и расхода
			Объект.СуммаДокументаПриход = Объект.Состав.Итог("СуммаПриход");
			Объект.СуммаДокументаРасход = Объект.Состав.Итог("СуммаРасход");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Состав".
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ИзменениеНаправленияПлатежа - Булево, Структура, Неопределено - Изменение направления платежа:
// * ОбъектЗаполнен - Булево -
//  ПараметрыДействия - Структура, Неопределено - Параметры действия:
// * ИзменениеНаправленияПлатежа - Булево
Процедура СоставСуммаПриходПриИзменении(Объект, Строка, ИзменениеНаправленияПлатежа = Ложь, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ИзменениеНаправленияПлатежа = Строка.СуммаРасход <> 0;
	
	Если НЕ Строка.СуммаПриход = 0 Тогда
		Строка.СуммаРасход = 0;
	КонецЕсли;
	
	СоставСуммаПриИзменении(Объект, Строка, ИзменениеНаправленияПлатежа, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Состав".
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ИзменениеНаправленияПлатежа - Булево, Структура, Неопределено - Изменение направления платежа:
// * ОбъектЗаполнен - Булево -
//  ПараметрыДействия - Структура, Неопределено - Параметры действия:
// * ИзменениеНаправленияПлатежа - Булево
Процедура СоставСуммаРасходПриИзменении(Объект, Строка, ИзменениеНаправленияПлатежа = Ложь, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ИзменениеНаправленияПлатежа = Строка.СуммаПриход <> 0;
	
	Если НЕ Строка.СуммаРасход = 0 Тогда
		Строка.СуммаПриход = 0;
	КонецЕсли;
	
	СоставСуммаПриИзменении(Объект, Строка, ИзменениеНаправленияПлатежа, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Состав".
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ИзменениеНаправленияПлатежа - Булево - Изменение направления платежа
//  ПараметрыДействия - Структура, Неопределено - Параметры действия:
//   * ОбъектЗаполнен - Булево
Процедура СоставСуммаПриИзменении(Объект, Строка, ИзменениеНаправленияПлатежа, ПараметрыДействия = Неопределено)
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ИзменениеНаправленияПлатежа Тогда
		Если НЕ Строка.СуммаПриход = 0 Тогда
			// Проставим ставку НДС для входящего платежа
			НоваяСтавкаНДС = ?(Строка.Контрагент.ОсвобожденОтНДС, 
				Справочники.СтавкиНДС.БезНДС, 
				РаботаСоСтавкамиНДСПовтИсп.СтавкаНДСПоЗначению(20, Ложь)
			);
			Если Строка.СтавкаНДС <> НоваяСтавкаНДС Тогда
				Строка.СтавкаНДС = НоваяСтавкаНДС;
			КонецЕсли;
		Иначе
			// Проставим ставку НДС для входящего исходящего платежа
			НоваяСтавкаНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата).ОсновнаяСтавка;
			
			Если Строка.СтавкаНДС <> НоваяСтавкаНДС Тогда
				Строка.СтавкаНДС = НоваяСтавкаНДС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СоставСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
	СуммаПлатежа = Строка.СуммаРасход + Строка.СуммаПриход;
	Если НЕ Строка.СтатьяДДС = Справочники.СтатьиДДС.ОплатаБанковскихУслуг Тогда
		Если СуммаПлатежа < Строка.СуммаУслуг Тогда
			Строка.СуммаУслуг = СуммаПлатежа;
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Сумма прихода/расхода не может быть меньше суммы комиссии банка.'"));
		КонецЕсли;
		Строка.ПроцентКомиссии = ?(Строка.СуммаУслуг = 0 ИЛИ СуммаПлатежа = 0, 0, Строка.СуммаУслуг / СуммаПлатежа * 100);
	КонецЕсли;
	Строка.СуммаРазница = СуммаПлатежа - Строка.СуммаУслуг;
	
КонецПроцедуры // СоставСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент комиссии" в таблице "Состав".
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Неопределено - Параметры действия
Процедура СоставПроцентКомиссииПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	Сумма = Строка.СуммаПриход + Строка.СуммаРасход;
	Строка.СуммаУслуг = Окр(Сумма * Строка.ПроцентКомиссии / 100, 2);
	Строка.СуммаРазница = Сумма - Строка.СуммаУслуг;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма услуг" в таблице "Состав".
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Неопределено, Структура - Параметры действия:
// * ИзменениеНаправленияПлатежа - Булево
Процедура СоставСуммаУслугПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	СуммаПлатежа = Строка.СуммаПриход + Строка.СуммаРасход;
	Если СуммаПлатежа < Строка.СуммаУслуг Тогда
		Строка.СуммаУслуг = СуммаПлатежа;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Сумма прихода/расхода не может быть меньше суммы комиссии банка.'"));
	КонецЕсли;
	Строка.СуммаРазница = СуммаПлатежа - Строка.СуммаУслуг;
	Строка.ПроцентКомиссии = ?(Строка.СуммаУслуг = 0 ИЛИ СуммаПлатежа = 0, 0, Строка.СуммаУслуг / СуммаПлатежа * 100);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма разница" в таблице "Состав".
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Неопределено - Параметры действия
Процедура СоставСуммаРазницаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Строка.СтатьяДДС.ВидДвижения = Перечисления.ВидыДвижений.Расход Тогда
		Строка.СуммаРасход = Строка.СуммаРазница + Строка.СуммаУслуг;
		СоставСуммаРасходПриИзменении(Объект, Строка, ПараметрыДействия);
	ИначеЕсли Строка.СтатьяДДС.ВидДвижения = Перечисления.ВидыДвижений.Приход Тогда
		Строка.СуммаПриход = Строка.СуммаРазница + Строка.СуммаУслуг;
		СоставСуммаПриходПриИзменении(Объект, Строка, ПараметрыДействия);
	Иначе
		Если Строка.СуммаРасход <> 0 Тогда
			Строка.СуммаРасход = Строка.СуммаРазница + Строка.СуммаУслуг;
			СоставСуммаРасходПриИзменении(Объект, Строка, ПараметрыДействия);
		Иначе
			Строка.СуммаПриход = Строка.СуммаРазница + Строка.СуммаУслуг;
			СоставСуммаПриходПриИзменении(Объект, Строка, ПараметрыДействия);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Строка.СтатьяДДС = Справочники.СтатьиДДС.ОплатаБанковскихУслуг Тогда
		СуммаПлатежа = Строка.СуммаПриход + Строка.СуммаРасход;
		Строка.ПроцентКомиссии = ?(Строка.СуммаУслуг = 0 ИЛИ СуммаПлатежа = 0, 0, Строка.СуммаУслуг / СуммаПлатежа * 100);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Состав".
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Неопределено - Параметры действия
Процедура СоставПлатежноеПоручениеОснованиеПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Строка.ПлатежноеПоручениеОснование) Тогда
		
		Строка.НазначениеПлатежа = "";
		Строка.СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
		Строка.СуммаНДС  = 0;
		Строка.СтатьяДДС = Справочники.СтатьиДДС.ПустаяСсылка();
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(Строка.ПлатежноеПоручениеОснование) = Тип("Строка") Тогда
		Возврат
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Строка.ПлатежноеПоручениеОснование,
		"Контрагент,ДоговорВзаиморасчетов,НазначениеПлатежа,СтавкаНДС,СуммаНДС");
		
	ИзмененКонтрагент = (Строка.Контрагент <> ЗначенияРеквизитов.Контрагент);
	ИзмененДоговорВзаиморасчетов = (Строка.ДоговорВзаиморасчетов <> ЗначенияРеквизитов.ДоговорВзаиморасчетов);
	
	ЗаполнитьЗначенияСвойств(Строка, ЗначенияРеквизитов);
	
	Если ИзмененКонтрагент Тогда
		СоставКонтрагентПриИзменении(Объект, Строка, ПараметрыДействия);
	ИначеЕсли ИзмененДоговорВзаиморасчетов Тогда
		СоставДоговорВзаиморасчетовПриИзменении(объект, Строка, ПараметрыДействия);
	Иначе
		СоставРассчитатьСумму(Объект, Строка);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Состав".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//
Процедура СоставРассчитатьСумму(Объект, Строка)
	
	Если ЗначениеЗаполнено(Строка.ПлатежноеПоручениеОснование)
		И (ТипЗнч(Строка.ПлатежноеПоручениеОснование)=Тип("ДокументСсылка.ПлатежноеПоручение")) Тогда
		РеквизитыПлатежногоПоручения = ОбщегоНазначения
			.ЗначенияРеквизитовОбъекта(Строка.ПлатежноеПоручениеОснование, "СуммаДокумента,ВалютаДокумента");
		
		ОстатокПоСделке = РеквизитыПлатежногоПоручения.СуммаДокумента;
		ОстатокПоСделке = -РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ОстатокПоСделке,
			РеквизитыПлатежногоПоручения.ВалютаДокумента,
			?(ЗначениеЗаполнено(Строка.КурсВалютыВзаиморасчетов), Строка.КурсВалютыВзаиморасчетов, Объект.Дата),
			Объект.ВалютаДокумента,
			Объект.КурсДокумента);
	Иначе
		Отбор = Новый Структура();
		Отбор.Вставить("Контрагент"            , Строка.Контрагент);
		Отбор.Вставить("ДоговорВзаиморасчетов" , Строка.ДоговорВзаиморасчетов);
		Если ЗначениеЗаполнено(Строка.Сделка) Тогда
			Отбор.Вставить("ДокументРасчетов" , Строка.Сделка);
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.Заказ) Тогда
			Отбор.Вставить("Заказ" , Строка.Заказ);
		КонецЕсли;
		МоментВремени = Новый МоментВремени(Объект.Дата, Объект.Ссылка);
		Долги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(Отбор, МоментВремени, "Сумма");
		ОстатокПоСделке = Долги.Итог("Сумма");
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ОстатокПоСделке,
			Строка.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,
			?(ЗначениеЗаполнено(Строка.КурсВалютыВзаиморасчетов), Строка.КурсВалютыВзаиморасчетов, Объект.Дата),
			Объект.ВалютаДокумента,
			Объект.КурсДокумента);
	КонецЕсли;
	
	Если ОстатокПоСделке > 0 Тогда
		Если Строка.СтатьяДДС.ВидДвижения <> Перечисления.ВидыДвижений.Расход Тогда
			ИзменениеНаправленияПлатежа = Ложь;
			ИзменитьСумму = Истина;
			Если Строка.СуммаРасход <> 0 Тогда
				Строка.СуммаРасход = 0;
				ИзменениеНаправленияПлатежа = Истина;
				ИзменитьСумму = (Строка.СтатьяДДС.ВидДвижения<>Перечисления.ВидыДвижений.Приход);
			КонецЕсли;
			Если ИзменитьСумму Тогда
				Строка.СуммаПриход = ОстатокПоСделке;
			КонецЕсли;
			СоставСуммаПриходПриИзменении(Объект, Строка, ИзменениеНаправленияПлатежа);
		КонецЕсли;
	Иначе
		Если Строка.СтатьяДДС.ВидДвижения <> Перечисления.ВидыДвижений.Приход Тогда
			ИзменениеНаправленияПлатежа = Ложь;
			ИзменитьСумму = Истина;
			Если Строка.СуммаПриход <> 0 Тогда
				Строка.СуммаПриход = 0;
				ИзменениеНаправленияПлатежа = Истина;
				ИзменитьСумму = (Строка.СтатьяДДС.ВидДвижения<>Перечисления.ВидыДвижений.Расход);
			КонецЕсли;
			Если ИзменитьСумму Тогда
				Строка.СуммаРасход = -ОстатокПоСделке;
			КонецЕсли;
			СоставСуммаРасходПриИзменении(Объект, Строка, ИзменениеНаправленияПлатежа);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия.
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыПроцентСкидкиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.ПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыПроцентСкидкиСтрокиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаСкидкиСтрокиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки на товар" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.СкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСкидкаНаТоварПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаСкидкиПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Состав");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "Выписка");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Состав");
	КонецЕсли;
	//
	ВыборПлатежногоПоручения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборПлатежногоПоручения.ВыборСсылки 		= "Документ.ПлатежноеПоручение.ФормаСписка";
	ВыборПлатежногоПоручения.Обязательный 		= Истина;

	Отбор = Новый Структура("СчетОрганизации", "БанковскийСчет");
	ВыборПлатежногоПоручения.Параметры			= Новый Структура("Отбор,РежимВыбора,ДатаДокумента", Отбор, Истина, "Дата");	

	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "СоставПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'По платежным поручениям'");
	Команда.Идентификатор	= "СоставПлатежнымиПоручениями";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Состав";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ПлатежноеПоручение", ВыборПлатежногоПоручения);
	//	
	ВыборПланаПоступленияДС 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборПланаПоступленияДС.ВыборСсылки 		= "Документ.ПланПоступленияДС.ФормаСписка";
	ВыборПланаПоступленияДС.Обязательный 		= Истина;
	ВыборПланаПоступленияДС.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать план поступления денежных средств.'");

	Отбор = Новый Структура("ХозОперация, СтруктурнаяЕдиница", Справочники.ХозОперации.ПланПоступленияНаРС, "БанковскийСчет"); 
	ВыборПланаПоступленияДС.Параметры			= Новый Структура("Отбор,РежимВыбора", Отбор, Истина);

	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "СоставПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'По планам поступления ДС'");
	Команда.Идентификатор	= "СоставПланПоступленияДС";
	Команда.Порядок			= 51;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Состав";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ПланПоступленияДС", ВыборПланаПоступленияДС);
	//
	ВыборЗаявкиНаРасходДС 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборЗаявкиНаРасходДС.ВыборСсылки 		= "Документ.ЗаявкаНаРасходДС.ФормаСписка";
	ВыборЗаявкиНаРасходДС.Обязательный 		= Истина;
	ВыборЗаявкиНаРасходДС.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать заявку на расход денежных средств.'");

	Отбор = Новый Структура("ХозОперация, СтруктурнаяЕдиница", Справочники.ХозОперации.ЗаявкаНаРасходСРС, "БанковскийСчет");
	ВыборЗаявкиНаРасходДС.Параметры			= Новый Структура("Отбор,РежимВыбора", Отбор, Истина);

	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "СоставПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'По заявкам на расход ДС'");
	Команда.Идентификатор	= "СоставЗаявкаНаРасходДС";
	Команда.Порядок			= 52;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Состав";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ЗаявкаНаРасходДС", ВыборЗаявкиНаРасходДС);
	//
	ВыборПодразделения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборПодразделения.ВыборСсылки 		= "Справочник.ПодразделенияКомпании.ФормаСписка";
	ВыборПодразделения.Обязательный 	= Истина;
	ВыборПодразделения.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать подразделение компании.'");

	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "СоставПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить по текущей задолженности сотрудникам'");
	Команда.Идентификатор	= "СоставЗаполнитьПоТекущейЗадолженности";
	Команда.Порядок			= 53;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Состав";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ПодразделениеКомпании", ВыборПодразделения);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
// 
// Возвращаемое значение:
//  Соответствие из Булево - Получить параметры команд заполнения
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("СоставПлатежнымиПоручениями.Видимость",   Истина);
	ПараметрыКоманд.Вставить("СоставПлатежнымиПоручениями.Доступность", Истина);
	ПараметрыКоманд.Вставить("СоставПланПоступленияДС.Видимость",       Истина);
	ПараметрыКоманд.Вставить("СоставПланПоступленияДС.Доступность",     Истина);
	ПараметрыКоманд.Вставить("СоставЗаявкаНаРасходДС.Видимость",        Истина);
	ПараметрыКоманд.Вставить("СоставЗаявкаНаРасходДС.Доступность",      Истина);
	ПараметрыКоманд.Вставить("СоставЗаполнитьПоТекущейЗадолженности.Видимость",   Истина);
	ПараметрыКоманд.Вставить("СоставЗаполнитьПоТекущейЗадолженности.Доступность", Истина);
	Возврат ПараметрыКоманд;
	
КонецФункции

// Обработчик заполнения документа по платежным поручениям
// 
// Параметры:
//  Объект Объект
//  ПараметрыЗаполнения Параметры заполнения
//  ПараметрыДействия - Неопределено - Параметры действия
// 
// Возвращаемое значение:
//  
Функция СоставПлатежнымиПоручениями(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	НоваяСтрока                             = Объект.Состав.Добавить();
	НоваяСтрока.Контрагент                  = ПараметрыЗаполнения.ПлатежноеПоручение.Контрагент;
	НоваяСтрока.ДоговорВзаиморасчетов       = ПараметрыЗаполнения.ПлатежноеПоручение.ДоговорВзаиморасчетов;
	Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(
				НоваяСтрока.ДоговорВзаиморасчетов) Тогда
		НоваяСтрока.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	Иначе
		НоваяСтрока.СпособЗачетаАвансов = ПараметрыЗаполнения.ПлатежноеПоручение.ДоговорВзаиморасчетов.СпособЗачетаАвансов;
	КонецЕсли;
	НоваяСтрока.СуммаРасход                 = ПараметрыЗаполнения.ПлатежноеПоручение.СуммаДокумента;
	НоваяСтрока.ПлатежноеПоручениеОснование = ПараметрыЗаполнения.ПлатежноеПоручение;
	НоваяСтрока.НазначениеПлатежа           = СокрЛП(ПараметрыЗаполнения.ПлатежноеПоручение.НазначениеПлатежа);
	НоваяСтрока.СтавкаНДС                   = ПараметрыЗаполнения.ПлатежноеПоручение.СтавкаНДС;
	НоваяСтрока.СуммаНДС                    = ПараметрыЗаполнения.ПлатежноеПоручение.СуммаНДС;
	НоваяСтрока.СтатьяДДС                   = ПараметрыЗаполнения.ПлатежноеПоручение.СтатьяДДС;
	Возврат Истина;
	
КонецФункции

// Обработчик заполнения документа по планам поступления ДС
// 
// Параметры:
//  Объект Объект
//  ПараметрыЗаполнения Параметры заполнения
//  ПараметрыДействия - Неопределено - Параметры действия
// 
// Возвращаемое значение:
//  Булево - Состав план поступления ДС
Функция СоставПланПоступленияДС(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("Контрагент",            ПараметрыЗаполнения.ПланПоступленияДС.Контрагент);
	СтруктураОтбор.Вставить("ДоговорВзаиморасчетов", ПараметрыЗаполнения.ПланПоступленияДС.ДоговорВзаиморасчетов);
	СтруктураОтбор.Вставить("СтатьяДДС",             ПараметрыЗаполнения.ПланПоступленияДС.СтатьяДДС);
	СтруктураОтбор.Вставить("СуммаПриход",           ПараметрыЗаполнения.ПланПоступленияДС.СуммаДокумента); 
	СтруктураОтбор.Вставить("Сделка",    		     ПараметрыЗаполнения.ПланПоступленияДС.Сделка);
	СтруктураОтбор.Вставить("ДокументПланирования",  ПараметрыЗаполнения.ПланПоступленияДС);
	
	НайденныеСтроки = Объект.Состав.НайтиСтроки(СтруктураОтбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтрокаСостава                       = Объект.Состав.Добавить();
		СтрокаСостава.СтатьяДДС             = ПараметрыЗаполнения.ПланПоступленияДС.СтатьяДДС;
		СтрокаСостава.Контрагент            = ПараметрыЗаполнения.ПланПоступленияДС.Контрагент;
		СтрокаСостава.ДоговорВзаиморасчетов = ПараметрыЗаполнения.ПланПоступленияДС.ДоговорВзаиморасчетов;
		СтрокаСостава.СуммаПриход           = ПараметрыЗаполнения.ПланПоступленияДС.СуммаДокумента;  
		СтрокаСостава.Сделка				= ПараметрыЗаполнения.ПланПоступленияДС.Сделка; 
		СтрокаСостава.ДокументПланирования  = Параметрызаполнения.ПланПоступленияДС;
		
		Если Не ЗначениеЗаполнено(СтрокаСостава.ДоговорВзаиморасчетов) Тогда
			СтрокаСостава.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		Иначе
			Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(
				СтрокаСостава.ДоговорВзаиморасчетов) Тогда
				ТипыДокументовРасчетов = РасчетыСКонтрагентамиСервер.ДоступныеТипыДокументовРасчета();
				Если СтрокаСостава.Сделка <> Неопределено
					И ТипыДокументовРасчетов.СодержитТип(ТипЗнч(СтрокаСостава.Сделка)) Тогда
					СтрокаСостава.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
				Иначе
					Если ЗначениеЗаполнено(СтрокаСостава.Сделка) Тогда
						СтрокаСостава.Заказ = СтрокаСостава.Сделка;
						СтрокаСостава.Сделка = Неопределено;
					КонецЕсли;
					СтрокаСостава.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
				КонецЕсли;
			Иначе
				СтрокаСостава.СпособЗачетаАвансов      = СтрокаСостава.ДоговорВзаиморасчетов.СпособЗачетаАвансов;
			КонецЕсли;
			СтрокаСостава.КурсВалютыВзаиморасчетов = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалютыВзаиморасчетов(Объект, СтрокаСостава.ДоговорВзаиморасчетов);
		КонецЕсли; 
		СтрокаСостава.ПлатежноеПоручениеОснование = ПараметрыЗаполнения.ПланПоступленияДС;
		СтрокаСостава.НазначениеПлатежа           = СокрЛП(ПараметрыЗаполнения.ПланПоступленияДС.Назначение);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Обработчик заполнения документа по заявкам на расход ДС
//
Функция СоставЗаявкаНаРасходДС(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("Контрагент",            ПараметрыЗаполнения.ЗаявкаНаРасходДС.Контрагент);
	СтруктураОтбор.Вставить("ДоговорВзаиморасчетов", ПараметрыЗаполнения.ЗаявкаНаРасходДС.ДоговорВзаиморасчетов);
	СтруктураОтбор.Вставить("СтатьяДДС",             ПараметрыЗаполнения.ЗаявкаНаРасходДС.СтатьяДДС);
	СтруктураОтбор.Вставить("СуммаРасход",           ПараметрыЗаполнения.ЗаявкаНаРасходДС.СуммаДокумента);
	СтруктураОтбор.Вставить("Сделка",    		     ПараметрыЗаполнения.ЗаявкаНаРасходДС.Сделка);
	СтруктураОтбор.Вставить("ДокументПланирования",  ПараметрыЗаполнения.ЗаявкаНаРасходДС);

	НайденныеСтроки = Объект.Состав.НайтиСтроки(СтруктураОтбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтрокаСостава                       = Объект.Состав.Добавить();
		СтрокаСостава.СтатьяДДС             = ПараметрыЗаполнения.ЗаявкаНаРасходДС.СтатьяДДС;
		СтрокаСостава.Контрагент            = ПараметрыЗаполнения.ЗаявкаНаРасходДС.Контрагент;
		СтрокаСостава.ДоговорВзаиморасчетов = ПараметрыЗаполнения.ЗаявкаНаРасходДС.ДоговорВзаиморасчетов;
		СтрокаСостава.СуммаРасход           = ПараметрыЗаполнения.ЗаявкаНаРасходДС.СуммаДокумента;
		СтрокаСостава.Сделка				= ПараметрыЗаполнения.ЗаявкаНаРасходДС.Сделка; 
		СтрокаСостава.ДокументПланирования  = Параметрызаполнения.ЗаявкаНаРасходДС;
		
		Если Не ЗначениеЗаполнено(СтрокаСостава.ДоговорВзаиморасчетов) Тогда
			СтрокаСостава.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		ИначеЕсли ЗначениеЗаполнено(СтрокаСостава.ДоговорВзаиморасчетов) Тогда
			Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(
				СтрокаСостава.ДоговорВзаиморасчетов) Тогда
				ТипыДокументовРасчетов = РасчетыСКонтрагентамиСервер.ДоступныеТипыДокументовРасчета();
				Если СтрокаСостава.Сделка <> Неопределено
					И ТипыДокументовРасчетов.СодержитТип(ТипЗнч(СтрокаСостава.Сделка)) Тогда
					СтрокаСостава.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
				Иначе
					Если ЗначениеЗаполнено(СтрокаСостава.Сделка) Тогда
						СтрокаСостава.Заказ = СтрокаСостава.Сделка;
						СтрокаСостава.Сделка = Неопределено;
					КонецЕсли;
					СтрокаСостава.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
				КонецЕсли;
			Иначе
				СтрокаСостава.СпособЗачетаАвансов = СтрокаСостава.ДоговорВзаиморасчетов.СпособЗачетаАвансов;
			КонецЕсли;
		КонецЕсли;
		СтрокаСостава.ПлатежноеПоручениеОснование = ПараметрыЗаполнения.ЗаявкаНаРасходДС;
		СтрокаСостава.НазначениеПлатежа           = СокрЛП(ПараметрыЗаполнения.ЗаявкаНаРасходДС.Назначение);
	КонецЕсли;
	
КонецФункции // СоставЗаявкаНаРасходДС()

// Обработчик заполнения документа по  текущей задолженности
//
Функция СоставЗаполнитьПоТекущейЗадолженности(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.ПодразделениеКомпании = ПараметрыЗаполнения.ПодразделениеКомпании Тогда
		Объект.ПодразделениеКомпании = ПараметрыЗаполнения.ПодразделениеКомпании;
		ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	// Заполним
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСКонтрагентамиОстатки.Контрагент КАК Контрагент,
	|	РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	РасчетыСКонтрагентамиОстатки.СуммаОстаток КАК СуммаОстаток,
	|	РасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток,
	|	РасчетыСКонтрагентамиОстатки.СуммаБазОстаток КАК СуммаБазОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(
	|			&МоментВремени,
	|			Контрагент В
	|					(ВЫБРАТЬ
	|						Контрагенты.Ссылка КАК Контрагент
	|					ИЗ
	|						Справочник.Контрагенты КАК Контрагенты
	|					ГДЕ
	|						Контрагенты.Сотрудник.ПодразделениеКомпании = &Подразделение)
	|				И ДоговорВзаиморасчетов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.Зарплата)) КАК РасчетыСКонтрагентамиОстатки
	|ГДЕ
	|	РасчетыСКонтрагентамиОстатки.СуммаОстаток < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВзаиморасчетыКомпанииОстатки.Контрагент,
	|	ВзаиморасчетыКомпанииОстатки.ДоговорВзаиморасчетов,
	|	ВзаиморасчетыКомпанииОстатки.СуммаОстаток,
	|	ВзаиморасчетыКомпанииОстатки.СуммаУпрОстаток,
	|	ВзаиморасчетыКомпанииОстатки.СуммаБазОстаток
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыКомпании.Остатки(
	|			&МоментВремени,
	|			Контрагент В
	|					(ВЫБРАТЬ
	|						Контрагенты.Ссылка КАК Контрагент
	|					ИЗ
	|						Справочник.Контрагенты КАК Контрагенты
	|					ГДЕ
	|						Контрагенты.Сотрудник.ПодразделениеКомпании = &Подразделение)
	|				И ДоговорВзаиморасчетов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.Зарплата)) КАК ВзаиморасчетыКомпанииОстатки
	|ГДЕ
	|	ВзаиморасчетыКомпанииОстатки.СуммаОстаток < 0";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	МоментВремени = ?(НЕ ЗначениеЗаполнено(Ссылка),Новый МоментВремени(КонецДня(Объект.Дата)), Новый МоментВремени(Объект.Дата, Ссылка));
	МоментВремени = ?(Объект.Проведен, Новый Граница(Ссылка.МоментВремени(), ВидГраницы.Исключая), МоментВремени);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);	
	Запрос.УстановитьПараметр("Подразделение", Объект.ПодразделениеКомпании);
	РезультатЗапросаПоСотрудникам = Запрос.Выполнить();
	
	ВалютаУпр=Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаБаз=Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	Выборка = РезультатЗапросаПоСотрудникам.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Состав.Добавить();
		НоваяСтрока.Контрагент				= Выборка.Контрагент;
		НоваяСтрока.ДоговорВзаиморасчетов	= Выборка.ДоговорВзаиморасчетов;
		Если Объект.ВалютаДокумента=НоваяСтрока.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов Тогда
			НоваяСтрока.СуммаРасход = -Выборка.СуммаОстаток;
		ИначеЕсли Объект.ВалютаДокумента=ВалютаБаз Тогда
			НоваяСтрока.СуммаРасход = -Выборка.СуммаБазОстаток;
		ИначеЕсли Объект.ВалютаДокумента=ВалютаУпр Тогда
			НоваяСтрока.СуммаРасход = -Выборка.СуммаУпрОстаток;
		Иначе
			НоваяСтрока.СуммаРасход = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(-Выборка.СуммаОстаток, НоваяСтрока.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, Объект.Дата, Объект.ВалютаДокумента, Объект.КурсДокумента);
		КонецЕсли; 
		СоставДоговорВзаиморасчетовПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		НоваяСтрока.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	КонецЦикла;
	
КонецФункции // СотрудникиЗаполнитьПоТекущейЗадолженности()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.Выписка",
		"ПФ_MXL_БанковскаяВыписка",
		НСтр("ru = 'Банковская выписка'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов - Массив из ДокументСсылка - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - ТаблицаЗначений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_БанковскаяВыписка") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_БанковскаяВыписка",
			НСтр("ru = 'Банковская выписка'"),
			ПечатьБанковскаяВыписка(МассивОбъектов, ОбъектыПечати)
		);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует печатную форму "БанковскаяВыписка"
//
Функция ПечатьБанковскаяВыписка(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Выписка_БанковскаяВыписка";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// зададим параметры макета
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Выписка.ПФ_MXL_БанковскаяВыписка");
		
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизация =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		ОбластьЗаголовок.Параметры.Счет = Документ.БанковскийСчет;
		ОбластьЗаголовок.Параметры.БанковскийСчет =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.БанковскийСчет);
		ОбластьЗаголовок.Параметры.Валюта = Документ.ВалютаДокумента;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);

		СтруктураОтбора	= Новый Структура("СтруктурнаяЕдиница", Документ.БанковскийСчет);
		МоментВремени	= ?(ТипЗнч(Документ) <> Тип("ДокументСсылка.Выписка"),
			Новый МоментВремени(КонецДня(Документ.Дата)), Документ.Ссылка.МоментВремени());
		тзОстатки       = РегистрыНакопления.ДенежныеСредстваКомпании.Остатки(МоментВремени, СтруктураОтбора, , "Сумма");
		Остаток         = тзОстатки.Итог("Сумма");
		СуммаНачОстаток = Остаток;
		ИтогиСуммаПриход = 0;
		
		// готовим шапку
		НомерСтраницы = 2; НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура;
		СтруктураИтоговПоСтранице.Вставить("СуммаНачальныйОстаток", СуммаНачОстаток);
		СтруктураИтоговПоСтранице.Вставить("СуммаПриход",           0);
		СтруктураИтоговПоСтранице.Вставить("СуммаРасход",           0);
		СтруктураИтоговПоСтранице.Вставить("СуммаКонечныйОстаток",  СуммаНачОстаток);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		ОбластьПодвал.Параметры.СуммаНачальныйОстаток = Формат(Остаток, ФорматВыводаСуммы);
		ВыборкаТабличнойЧасти = Документ.Состав;
		ПлатежныеПолучения = Новый Массив;
		Для Каждого Строка Из ВыборкаТабличнойЧасти Цикл
			Если ЗначениеЗаполнено(Строка.ПлатежноеПоручениеОснование)
				И ТипЗнч(Строка.ПлатежноеПоручениеОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
				
				ПлатежныеПолучения.Добавить(Строка.ПлатежноеПоручениеОснование);
				
			КонецЕсли;
		КонецЦикла;
		
		Если ПлатежныеПолучения.Количество() > 0 Тогда
			РеквизитыПлатежныхПоручений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ПлатежныеПолучения, "Номер,Дата");
		Иначе
			РеквизитыПлатежныхПоручений = Новый Соответствие;
		КонецЕсли;
		
		// готовим области строки
		Для каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			
			СтрокаТЧ_СуммаПриходДС = 0;
			Если СтрокаТЧ.СуммаПриход <> 0 Тогда
				СтрокаТЧ_СуммаПриходДС = СтрокаТЧ.СуммаПриход - СтрокаТЧ.СуммаУслуг;		
			КонецЕсли;			
			
			ОбластьСтрока.Параметры.Заполнить(СтрокаТЧ);
			ОбластьСтрока.Параметры.СуммаПриход  = Формат(СтрокаТЧ_СуммаПриходДС, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СуммаРасход  = Формат(СтрокаТЧ.СуммаРасход, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СуммаОстаток = Формат(Остаток,              ФорматВыводаСуммы);
			СуммаКонОстаток = Остаток + СтрокаТЧ_СуммаПриходДС - СтрокаТЧ.СуммаРасход;
			ОбластьСтрока.Параметры.СуммаКонОстаток = Формат(СуммаКонОстаток,   ФорматВыводаСуммы);
			
			РеквизитыПлатежногоПоручения = РеквизитыПлатежныхПоручений.Получить(СтрокаТЧ.ПлатежноеПоручениеОснование);
			Если ЗначениеЗаполнено(СтрокаТЧ.ВхДокНомер) И ЗначениеЗаполнено(СтрокаТЧ.ВхДокДата) Тогда
				РеквизитыПлатежногоПоручения = Новый Структура("Номер,Дата",
					СтрокаТЧ.ВхДокНомер, СтрокаТЧ.ВхДокДата);
			КонецЕсли;
			
			Если РеквизитыПлатежногоПоручения <> Неопределено Тогда
				ОбластьСтрока.Параметры.ПлатежноеПоручениеОснование = СтрШаблон(НСтр("ru = '№ %1 от %2'"),
					СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(СокрЛП(РеквизитыПлатежногоПоручения.Номер), "0"),
					Формат(РеквизитыПлатежногоПоручения.Дата, "ДЛФ=D"));
			КонецЕсли;
			
			ОбластьСтрока.Параметры.НазначениеПлатежа = СтрЗаменить(СтрокаТЧ.НазначениеПлатежа, Символы.ПС, " ");
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если ВыборкаТабличнойЧасти.Индекс(СтрокаТЧ) = ВыборкаТабличнойЧасти.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			Остаток = Остаток+СтрокаТЧ_СуммаПриходДС-СтрокаТЧ.СуммаРасход;
			ИтогиСуммаПриход = ИтогиСуммаПриход + СтрокаТЧ_СуммаПриходДС;
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				КонечныйОстаток = СтруктураИтоговПоСтранице.СуммаКонечныйОстаток;
				СтруктураИтоговПоСтранице = Новый Структура;
				СтруктураИтоговПоСтранице.Вставить("СуммаНачальныйОстаток", КонечныйОстаток);
				СтруктураИтоговПоСтранице.Вставить("СуммаПриход",           0);
				СтруктураИтоговПоСтранице.Вставить("СуммаРасход",           0);
				СтруктураИтоговПоСтранице.Вставить("СуммаКонечныйОстаток",  КонечныйОстаток);
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			КонецЕсли;
			// добавляем итоги
			ИтогиПоСтранице = Новый Структура;
			ИтогиПоСтранице.Вставить("СуммаНачальныйОстаток", 0);
			ИтогиПоСтранице.Вставить("СуммаПриход",           СтрокаТЧ_СуммаПриходДС);
			ИтогиПоСтранице.Вставить("СуммаРасход",           СтрокаТЧ.СуммаРасход);
			ИтогиПоСтранице.Вставить("СуммаКонечныйОстаток",  СтрокаТЧ_СуммаПриходДС - СтрокаТЧ.СуммаРасход);
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(ИтогиПоСтранице, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// итоги
		СуммаПриход = ИтогиСуммаПриход;
		ОбластьПодвал.Параметры.ИтогоСуммаПриход = Формат(СуммаПриход, ФорматВыводаСуммы);
		СуммаРасход = Документ.Состав.Итог("СуммаРасход");
		ОбластьПодвал.Параметры.ИтогоСуммаРасход = Формат(СуммаРасход, ФорматВыводаСуммы);
		СуммаКонечныйОстаток = СуммаНачОстаток + СуммаПриход - СуммаРасход;
		ОбластьПодвал.Параметры.СуммаКонечныйОстаток = Формат(СуммаКонечныйОстаток, ФорматВыводаСуммы);
		
		// сумма прописью
		ОбластьПодвал.Параметры.СуммаПрописьюНачОстаток =
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(тзОстатки.Итог("Сумма"), Документ.ВалютаДокумента);
		ОбластьПодвал.Параметры.СуммаПрописьюПриход =
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаПриход, Документ.ВалютаДокумента);
		ОбластьПодвал.Параметры.СуммаПрописьюРасход =
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаРасход, Документ.ВалютаДокумента);
		ОбластьПодвал.Параметры.СуммаПрописьюКонОстаток = 
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(Остаток, Документ.ВалютаДокумента);
		
		// Выводим представления и расшифровки подписей
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ГлавныйБухгалтер", "ГлавныйБухгалтер"));
		ТабличныйДокумент.ТолькоПросмотр = Истина;
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции //ПечатьБанковскаяВыписка()

#КонецОбласти

// Проверяет возможность ввода счет-фактуры выданной на основании документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.Выписка - документ, для которого выполняется действие.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина, если ввод возможен, Ложь - в противном случае.
//
Функция ВозможенВводСчетФактурыВыданной(ДокументОбъект, ДополнительныеПарметры = Неопределено) Экспорт
	
	СистемаНО = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.СистемаНалогообложения,
		ДокументОбъект.Организация,
	); 
	
	НалогообложениеУСН = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.НалогообложениеНДСПриУСН,
		ДокументОбъект.Организация,
	);
	
	Если СистемаНО = Перечисления.СистемыНалогообложения.Упрощенная И НЕ РаботаСоСтавкамиНДССервер.УСНПлательщикНДС(НалогообложениеУСН) Тогда
        Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбработкаСобытийДокументаСервер.ДокументСодержитСтрокиСНДС(ДокументОбъект, "Товары, Состав");
		
КонецФункции

// Проверяет возможность ввода счет-фактуры полученной на основании документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.Выписка - документ, для которого выполняется действие.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина, если ввод возможен, Ложь - в противном случае.
//
Функция ВозможенВводСчетФактурыПолученной(ДокументОбъект, ДополнительныеПарметры = Неопределено) Экспорт
	
	Возврат ОбработкаСобытийДокументаСервер.ДокументСодержитСтрокиСНДС(ДокументОбъект, "Товары, Состав");
	
КонецФункции

#КонецОбласти

#КонецЕсли