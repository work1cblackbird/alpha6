// Модуль документа "Выписка"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ЭтотОбъект);
	
	// Вызываем общий обработчик события
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"Товары"
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	Если ХозОперация = Справочники.ХозОперации.ПоступлениеВОперационнуюКассу
		И СтатьяДДС.ВидДвижения <> Перечисления.ВидыДвижений.Приход Тогда
		СтатьяДДС = Неопределено;
	ИначеЕсли ХозОперация = Справочники.ХозОперации.РасходИзОперационнойКассы
		И СтатьяДДС.ВидДвижения <> Перечисления.ВидыДвижений.Расход Тогда
		СтатьяДДС = Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если НЕ ЗначениеЗаполнено(БанковскийСчет) Тогда 
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаРасходДС") 
			И ЗначениеЗаполнено(ДанныеЗаполнения.СтруктурнаяЕдиница) 
			И ТипЗнч(ДанныеЗаполнения.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			БанковскийСчет = ДанныеЗаполнения.СтруктурнаяЕдиница;
		Иначе
			БанковскийСчет = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Организация);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		Если ВалютаДокумента <> БанковскийСчет.ВалютаДенежныхСредств Тогда 
			ВалютаДокумента	= БанковскийСчет.ВалютаДенежныхСредств;
			СтруктураКурса	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
			КурсДокумента	= СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
			//Документы.Выписка.ВалютаДокументаПриИзменении(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	ПечататьАртикулНоменклатуры = Организация.ПечататьАртикулНоменклатурыВЧеках;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ЭтотОбъект, Истина);
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	Товары.Очистить();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
		
	Если ХозОперация = Справочники.ХозОперации.СтрокаБанковскойВыписки Тогда
		
		Если СуммаДокументаПриход <> Состав.Итог("СуммаПриход") Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Сумма прихода документа не равна сумме прихода платежей.'"), ЭтотОбъект,,,Отказ);
		КонецЕсли;
		
		Если СуммаДокументаРасход <> Состав.Итог("СуммаРасход") Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Сумма расхода документа не равна сумме расхода платежей.'"), ЭтотОбъект,,,Отказ);
		КонецЕсли;
		
		Если СуммаУслуг <> Состав.Итог("СуммаУслуг") Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Сумма банковских услуг документа не равна сумме услуг платежей.'"), ЭтотОбъект,,,Отказ);
		КонецЕсли;
		
		Если СуммаНДС <> Состав.Итог("СуммаНДС") Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Сумма НДС документа не равна сумме НДС платежей.'"), ЭтотОбъект,,,Отказ);
		КонецЕсли;
		
		Для Каждого стрСостав Из Состав Цикл
			
			Если НЕ ЗначениеЗаполнено(стрСостав.Сделка) Тогда
				Продолжить;
			КонецЕсли;
			
			КонтрагентИДоговорСделки = УправлениеДиалогомДокументаСервер.ИменаКонтрагентаИДоговораВзаиморасчетовПоСделке(
				стрСостав.Сделка,
				ЭтотОбъект);
			
			Если ЕстьРеквизит(стрСостав.Сделка, КонтрагентИДоговорСделки.ИмяКонтрагента)
					И стрСостав.Контрагент <> стрСостав.Сделка[КонтрагентИДоговорСделки.ИмяКонтрагента] Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В строке №%1 контрагент сделки не совпадает с контрагентом документа.'"), стрСостав.НомерСтроки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
			КонецЕсли;
			
			Если ЕстьРеквизит(стрСостав.Сделка, КонтрагентИДоговорСделки.ИмяДоговораВзаиморасчетов)
					И стрСостав.ДоговорВзаиморасчетов <> стрСостав.Сделка[КонтрагентИДоговорСделки.ИмяДоговораВзаиморасчетов] Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В строке №%1 договор сделки не совпадает с договором документа.'"), стрСостав.НомерСтроки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого стрСостав Из Состав Цикл
			Если стрСостав.СуммаПриход < стрСостав.СуммаУслуг И стрСостав.СуммаРасход < стрСостав.СуммаУслуг Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В строке №%1 сумма услуг превышает сумму платежа.'"), стрСостав.НомерСтроки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ХозОперация = Справочники.ХозОперации.ПоступлениеВОперационнуюКассу
		И СтатьяДДС.ВидДвижения <> Перечисления.ВидыДвижений.Приход Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Статья ДДС не соответствует Хоз.операции'"), ЭтотОбъект,,,Отказ);
	ИначеЕсли ХозОперация = Справочники.ХозОперации.РасходИзОперационнойКассы
		И СтатьяДДС.ВидДвижения <> Перечисления.ВидыДвижений.Расход Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Статья ДДС не соответствует Хоз.операции'"), ЭтотОбъект,,,Отказ);
	КонецЕсли;
	
	Если Товары.Количество() > 0 И ДляПробитияНаФР Тогда
		
		ТекстСообщения = "";
		Если НЕ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(ЭтотОбъект, Товары, ПризнакСпособаРасчета,ТекстСообщения) Тогда
			ТекстСообщения = НСтр("ru='Неверно заполнен ""Способ расчета"".'") + " " + ТекстСообщения;	
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"ПризнакСпособаРасчета",,Отказ);	
		КонецЕсли;
		
		Сумма = ?(СуммаДокумента>0,СуммаДокумента,-СуммаДокумента);
		Если Сумма > 0 И Товары.Итог("СуммаОплаты") = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Необходимо произвести пропорциональное распределение суммы вносимой оплаты между предметами платежа'"),,,,Отказ);
		ИначеЕсли Сумма <> Товары.Итог("СуммаОплаты") Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Неверно заполнена колонка ""Сумма оплаты"" в табличной части товары, необходимо распределить сумму оплаты'"),,,,Отказ);
		КонецЕсли;
		
	КонецЕсли;

	Если ДляПробитияНаФР Тогда	
		ТекстОшибки = УправлениеДиалогомДокументаСервер.ПроверитьКорректностьЗаполненияТелефонEmail(ТелефонEmailПокупателя);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ТелефонEmailПокупателя", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не (РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов)
		И Не РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ВерсияОбъекта)) Тогда
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ПроверятьСуммы", Ложь);
		ДополнительныеПараметры.Вставить("ПроверятьСостав", Ложь);
		ДополнительныеПараметры.Вставить("ИмяРеквизитаСделки", "Сделка");
		ДополнительныеПараметры.Вставить("ИмяСпособаЗачетаОплаты", "СпособЗачетаАвансов");
		РасчетыСКонтрагентамиСервер.ПроизвестиПроверкуЗаполненияСостава(ЭтотОбъект, Отказ, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ХозОперация = Справочники.ХозОперации.БанковскаяВыписка Тогда
		
		СтатьяДДС = Справочники.СтатьиДДС.ПустаяСсылка();
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
		СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
		СуммаНДС = 0;
		НазначениеПлатежа = "";
		ВхДокНомер = "";
		ВхДокДата = Дата(1, 1, 1);
		ПлатежноеПоручениеОснование = Неопределено;
		
	КонецЕсли;
	
	Если ХозОперация <> Справочники.ХозОперации.СтрокаБанковскойВыписки Тогда
		
		СуммаДокументаПриход = Состав.Итог("СуммаПриход");
		СуммаДокументаРасход = Состав.Итог("СуммаРасход");
		СуммаУслуг = Состав.Итог("СуммаУслуг");
		
	Иначе
		
		Для Каждого Строка Из Состав Цикл
			ЗаполнитьЗначенияСвойств(Строка, ЭтотОбъект, "ВхДокНомер,ВхДокДата,ПлатежноеПоручениеОснование");
		КонецЦикла;
		
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РаботаСГраницами.ПередУдалением(ЭтотОбъект, Отказ);
	
КонецПроцедуры

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если РасчетыСКонтрагентамиСервер.ЕстьЗачетАвансаПоДокументу(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Ошибка, если счет не соответствует организации или иерархии подразделения.
	Отказ = Отказ Или НЕ ОбработкаСобытийДокументаСервер.ПроверитьКорректностьБанковскогоСчета(
		БанковскийСчет,
		Организация,
		ПодразделениеКомпании,
		ДополнительныеСвойства
	);
	
	Если Отказ Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Банковский счет не соответствует выбранной организации/подразделению компании.'"),
			ЭтотОбъект,
			,
			,
			Отказ
		);
		Возврат;
		
	КонецЕсли;
	
	СуммаДоходаРасходаСуммовыхРазниц=0;
	ЭтоВнутренниеПереводы = Документы.Выписка.ПроверитьВидОперацииПеремещение(ВидОперации);
	
	// Деньги
	НаборЗаписейДС=Движения.ДенежныеСредстваКомпании;
	НаборЗаписейДС.РежимПроведения=РежимПроведения;
	НаборЗаписейДС.СтруктурнаяЕдиница=БанковскийСчет;
	НаборЗаписейДС.Валюта=ВалютаДокумента;
	НаборЗаписейДС.Курс=КурсДокумента;
	
	// Взаиморасчеты
	НаборЗаписейВзаиморасчеты=Движения.ВзаиморасчетыКомпании;
	НаборЗаписейВзаиморасчеты.РежимПроведения=РежимПроведения;
	ТипыСделокСПокупателем=ЗаказыСервер.ПолучитьТипыСделок(Истина);
	ТипыСделокСПоставщиком=ЗаказыСервер.ПолучитьТипыСделок(Ложь);
	
	// БАЛАНС: Подразделение банковского счета и подразделения договоров из табличной части могут
	// находится в разных балансовых "ветках". Поэтому, если в системе ведется баланс по подразделениям, то возможен
	// "разрыв" баланса. Следовательно, придется создавать корректирующие движения по регистру "Доходы и расходы".
	БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(Дата);
	ПодразделениеБанкСета         = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(БанковскийСчет.ПодразделениеКомпании, Дата);
	
	// Для накопления записей корректировок используем специальную таблицу
	ТаблицаВзаиморасчетов = Новый ТаблицаЗначений;
	ТаблицаВзаиморасчетов.Колонки.Добавить("Подразделение",  Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаУпрРасход", Новый ОписаниеТипов("Число"));
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаУпрПриход", Новый ОписаниеТипов("Число"));
	
	// Суммовые разницы возникают в рамках договора, поэтому их нельзя списывать одним движением.
	ТаблицаСуммовыхРазниц = Новый ТаблицаЗначений;
	ТаблицаСуммовыхРазниц.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
	ТаблицаСуммовыхРазниц.Колонки.Добавить("СуммаУпр",      Новый ОписаниеТипов("Число"));
	
	СпособВеденияУчетаДоговоров = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		Состав.ВыгрузитьКолонку("ДоговорВзаиморасчетов"),
		"СпособВеденияВзаиморасчетов");
	ЕстьДоговораПоРасчетнымДокументам = Ложь;
	ЕстьДоговораПоСделкам = Ложь;
	
	Для Каждого СтрокаТЧ Из Состав Цикл
		
		// Если используем подключаемой оборудование проведем деньги по кассе ККМ
		Если ДляПробитияНаФР И ЗначениеЗаполнено(КассаККМ) Тогда
			
			Если СтрокаТЧ.СуммаПриход <> 0 Тогда
				
				НаборЗаписейКассыККМ = Движения.КассыККМ;
				НаборЗаписейКассыККМ.ДокументОбъект  = ЭтотОбъект;
				НаборЗаписейКассыККМ.РежимПроведения = РежимПроведения;
				НаборЗаписейКассыККМ.КассаККМ        = КассаККМ;
				НаборЗаписейКассыККМ.ТипОплаты       = Перечисления.ТипыОплатыККТ.Электронно;
				НаборЗаписейКассыККМ.Сумма           = СтрокаТЧ.СуммаПриход;
				Отказ = НЕ НаборЗаписейКассыККМ.Приход() ИЛИ Отказ;
				
				Если НЕ Отказ Тогда
					НаборЗаписейКассыККМ.Записать();
				КонецЕсли;
				
				НаборЗаписейКассыККМ = Движения.КассыККМ;
				НаборЗаписейКассыККМ.ДокументОбъект  = ЭтотОбъект;
				НаборЗаписейКассыККМ.РежимПроведения = РежимПроведения;
				НаборЗаписейКассыККМ.КассаККМ        = КассаККМ;
				НаборЗаписейКассыККМ.ТипОплаты       = Перечисления.ТипыОплатыККТ.Электронно;
				НаборЗаписейКассыККМ.Сумма           = СтрокаТЧ.СуммаПриход;
				Отказ = НЕ НаборЗаписейКассыККМ.Расход() ИЛИ Отказ;
				
			ИначеЕсли СтрокаТЧ.СуммаРасход <> 0 Тогда
				
				НаборЗаписейКассыККМ = Движения.КассыККМ;
				НаборЗаписейКассыККМ.ДокументОбъект  = ЭтотОбъект;
				НаборЗаписейКассыККМ.РежимПроведения = РежимПроведения;
				НаборЗаписейКассыККМ.КассаККМ        = КассаККМ;
				НаборЗаписейКассыККМ.ТипОплаты       = Перечисления.ТипыОплатыККТ.Электронно;
				НаборЗаписейКассыККМ.Сумма           = СтрокаТЧ.СуммаРасход;
				Отказ = НЕ НаборЗаписейКассыККМ.Расход() ИЛИ Отказ;
				
				НаборЗаписейКассыККМ = Движения.КассыККМ;
				НаборЗаписейКассыККМ.ДокументОбъект  = ЭтотОбъект;
				НаборЗаписейКассыККМ.РежимПроведения = РежимПроведения;
				НаборЗаписейКассыККМ.КассаККМ        = КассаККМ;
				НаборЗаписейКассыККМ.ТипОплаты       = Перечисления.ТипыОплатыККТ.Электронно;
				НаборЗаписейКассыККМ.Сумма           = СтрокаТЧ.СуммаРасход;
				Отказ = НЕ НаборЗаписейКассыККМ.Приход() ИЛИ Отказ;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Обнулим суммовые разницы 
		СуммаДоходаРасходаСуммовыхРазниц = 0;
		
		НаборЗаписейДС.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейВзаиморасчеты.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейВзаиморасчеты.Валюта = Неопределено;
		НаборЗаписейВзаиморасчеты.КурсВзаиморасчетов = СтрокаТЧ.КурсВалютыВзаиморасчетов;
		
		// деньги
		НаборЗаписейДС.СтатьяДДС=СтрокаТЧ.СтатьяДДС;
		
		// взаиморасчеты
		СуммаПриход = 0;
		СуммаРасход = 0;
		Если (СтрокаТЧ.СуммаПриход <> 0) И (СтрокаТЧ.СуммаРасход <> 0) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Приход и расход в одной строке %1.'"), СтрокаТЧ.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
			Продолжить;
		ИначеЕсли (СтрокаТЧ.СуммаПриход = 0) И (СтрокаТЧ.СуммаРасход = 0) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ни прихода, ни расхода в строке %1.'"), СтрокаТЧ.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
			Продолжить;
		ИначеЕсли СтрокаТЧ.СуммаПриход <> 0 Тогда
			// взаиморасчеты
			СуммаПриход = СтрокаТЧ.СуммаПриход;
			
			// деньги
			Если НЕ (СтрокаТЧ.СуммаПриход - СтрокаТЧ.СуммаУслуг) = 0 Тогда
				НаборЗаписейДС.Сумма=СтрокаТЧ.СуммаПриход - СтрокаТЧ.СуммаУслуг;
				НаборЗаписейДС.СуммаВсего=СуммаДокументаПриход - СтрокаТЧ.СуммаПриход-СуммаДокументаРасход;
				Отказ=НЕ НаборЗаписейДС.Приход() ИЛИ Отказ;
			КонецЕсли;
		ИначеЕсли СтрокаТЧ.СуммаРасход <> 0 Тогда
			// взаиморасчеты
			Если НЕ СтрокаТЧ.СтатьяДДС = Справочники.СтатьиДДС.ОплатаБанковскихУслуг Тогда
				СуммаРасход = СтрокаТЧ.СуммаРасход - СтрокаТЧ.СуммаУслуг;
			КонецЕсли;
			
			// деньги
			НаборЗаписейДС.Сумма = СтрокаТЧ.СуммаРасход;
			НаборЗаписейДС.СуммаВсего = СуммаДокументаПриход + СтрокаТЧ.СуммаРасход-СуммаДокументаРасход;
			Отказ = НЕ НаборЗаписейДС.Расход() ИЛИ Отказ;
		КонецЕсли; 
		
		Если  НЕ ЭтоВнутренниеПереводы Тогда 
			Если СпособВеденияУчетаДоговоров.Получить(СтрокаТЧ.ДоговорВзаиморасчетов) =
				Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам Тогда
				ЕстьДоговораПоРасчетнымДокументам = Истина;
			Иначе
				ЕстьДоговораПоСделкам = Истина;
				НаборЗаписейВзаиморасчеты.Контрагент=СтрокаТЧ.Контрагент;
				НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов=СтрокаТЧ.ДоговорВзаиморасчетов;
				НаборЗаписейВзаиморасчеты.Сделка=СтрокаТЧ.Сделка;
				ТипСделки=ТипЗнч(СтрокаТЧ.Сделка);
				Если ТипыСделокСПокупателем.СодержитТип(ТипСделки) Тогда
					НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем=Истина;
				ИначеЕсли ТипыСделокСПоставщиком.СодержитТип(ТипСделки) Тогда
					НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем=Ложь;
				Иначе
					НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем=Неопределено;
				КонецЕсли;
				Если РежимПроведения=РежимПроведенияДокумента.Оперативный Тогда
					НаборЗаписейВзаиморасчеты.МоментВремени=Неопределено;
				Иначе
					Если СтрокаТЧ.НомерСтроки=1 Тогда
						НаборЗаписейВзаиморасчеты.МоментВремени=Новый Граница(МоментВремени(),ВидГраницы.Исключая);
					Иначе
						НаборЗаписейВзаиморасчеты.МоментВремени=Новый Граница(МоментВремени(),ВидГраницы.Включая);
					КонецЕсли;  
				КонецЕсли;  
				НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок =
				(СтрокаТЧ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически);
				НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц=0;
				Если СуммаПриход <> 0 Тогда
					// взаиморасчеты
					НаборЗаписейВзаиморасчеты.Сумма = СуммаПриход;
					Отказ = НЕ НаборЗаписейВзаиморасчеты.Расход() ИЛИ Отказ;
				ИначеЕсли СуммаРасход <> 0 Тогда
					// взаиморасчеты
					НаборЗаписейВзаиморасчеты.Сумма = СуммаРасход;
					Отказ = НЕ НаборЗаписейВзаиморасчеты.Приход() ИЛИ Отказ;
				КонецЕсли; 
				
				НаборЗаписейВзаиморасчеты.Записать();
				
				СуммаДоходаРасходаСуммовыхРазниц = НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
				
				// Заполняем таблицу суммовых разниц
				НоваяСтрока = ТаблицаСуммовыхРазниц.Добавить();
				Если БалансВедетсяПоПодразделениям Тогда
					НоваяСтрока.Подразделение = СтрокаТЧ.ДоговорВзаиморасчетов.ПодразделениеКомпании;
				Иначе
					НоваяСтрока.Подразделение = ПодразделениеКомпании; 
				КонецЕсли;
				НоваяСтрока.СуммаУпр = СуммаДоходаРасходаСуммовыхРазниц;
				
			КонецЕсли; 
		КонецЕсли;
		
		Если СтрокаТЧ.СуммаУслуг <> 0 ИЛИ СтрокаТЧ.СтатьяДДС = Справочники.СтатьиДДС.ОплатаБанковскихУслуг Тогда
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейДиР.Подразделение  = БанковскийСчет.ПодразделениеКомпании;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.РасходыНаУслугиБанков;
			НаборЗаписейДиР.ВУпрВалюте = Ложь;
			НаборЗаписейДиР.Расход     = ?(СтрокаТЧ.СуммаУслуг = 0, СтрокаТЧ.СуммаРасход, СтрокаТЧ.СуммаУслуг);
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли; 
		
		Если ЭтоВнутренниеПереводы Тогда 
			Если СтрокаТЧ.СуммаРасход <> 0 Тогда 
				НаборЗаписейДиР = Движения.ДоходыИРасходы;
				НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
				НаборЗаписейДиР.Подразделение  = БанковскийСчет.ПодразделениеКомпании;
				НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.ПереводыВПути;
				НаборЗаписейДиР.ВУпрВалюте = Ложь;
				НаборЗаписейДиР.Расход     = СтрокаТЧ.СуммаРасход;
				Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;  
			КонецЕсли; 
			
			Если СтрокаТЧ.СуммаПриход <>0 Тогда 
				НаборЗаписейДиР = Движения.ДоходыИРасходы;
				НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
				НаборЗаписейДиР.Подразделение  = БанковскийСчет.ПодразделениеКомпании;
				НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.ПереводыВПути;
				НаборЗаписейДиР.ВУпрВалюте = Ложь;
				НаборЗаписейДиР.Доход  = СтрокаТЧ.СуммаПриход;
				Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;  
			КонецЕсли;
		КонецЕсли;

		
		// БАЛАНС: Если балансовые подразделения договора и банковского счета различны, то будет 
		// "разрыв" баланса. Необходимо добавить корректирующие движения по регистру "Доходы и Расходы".
		Если БалансВедетсяПоПодразделениям И Не ЭтоВнутренниеПереводы Тогда
			ПодразделениеДоговора = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(СтрокаТЧ.ДоговорВзаиморасчетов.ПодразделениеКомпании, Дата);
			Если ПодразделениеБанкСета<>ПодразделениеДоговора Тогда
				НоваяСтрока = ТаблицаВзаиморасчетов.Добавить();
				НоваяСтрока.Подразделение  = СтрокаТЧ.ДоговорВзаиморасчетов.ПодразделениеКомпании;
				НоваяСтрока.СуммаУпрРасход = СтрокаТЧ.СуммаРасход;
				НоваяСтрока.СуммаУпрПриход = СтрокаТЧ.СуммаПриход;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 	
	
	Документы.Выписка.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	Документы.Выписка.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	// Создаем движения по суммовым разницам
	СуммовыеРазницы = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеСвойства,
		"СуммовыеРазницы",
		Неопределено);
	Если СуммовыеРазницы <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СуммовыеРазницы, ТаблицаСуммовыхРазниц);
	КонецЕсли;
	ТаблицаСуммовыхРазниц.Свернуть("Подразделение", "СуммаУпр");
	Если ТаблицаСуммовыхРазниц.Количество()<>0 Тогда
		Для Каждого ТекСтрока Из ТаблицаСуммовыхРазниц Цикл  	
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДиР.Подразделение          = ТекСтрока.Подразделение;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
			НаборЗаписейДиР.ВУпрВалюте = Истина;
			Если ТекСтрока.СуммаУпр<0 Тогда
				НаборЗаписейДиР.Расход = -ТекСтрока.СуммаУпр;
			Иначе
				НаборЗаписейДиР.Доход  = ТекСтрока.СуммаУпр;
			КонецЕсли;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЦикла;	
	КонецЕсли;
	
	// БАЛАНС: создаем корректирующие движения. Сумма в управленческой валюте будет рассчитана в 
	// модуле набора записей. Для этого указываем реквизит "ВУпрВалюте=Ложь";
	ТаблицаВзаиморасчетов.Свернуть("Подразделение", "СуммаУпрРасход, СуммаУпрПриход");
	Если ТаблицаВзаиморасчетов.Количество()<>0 Тогда
		Для Каждого ТекСтрока Из ТаблицаВзаиморасчетов Цикл  	
			
			Если ТекСтрока.СуммаУпрПриход<>0 Тогда
				// Корректируем движения денежных средств
				НаборЗаписейДиР = Движения.ДоходыИРасходы;
				НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
				НаборЗаписейДиР.Подразделение  = БанковскийСчет.ПодразделениеКомпании;
				НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
				НаборЗаписейДиР.ВУпрВалюте = Ложь;
				НаборЗаписейДиР.Доход      = ТекСтрока.СуммаУпрПриход;
				Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;	
				
				// Корректируем движения взаиморасчетов.
				НаборЗаписейДиР = Движения.ДоходыИРасходы;
				НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
				НаборЗаписейДиР.Подразделение  = ТекСтрока.Подразделение;
				НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
				НаборЗаписейДиР.ВУпрВалюте = Ложь;
				НаборЗаписейДиР.Расход     = ТекСтрока.СуммаУпрПриход;
				Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;	
			КонецЕсли;
			
			Если ТекСтрока.СуммаУпрРасход<>0 Тогда
				// Корректируем движения денежных средств
				НаборЗаписейДиР = Движения.ДоходыИРасходы;
				НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
				НаборЗаписейДиР.Подразделение  = БанковскийСчет.ПодразделениеКомпании;
				НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
				НаборЗаписейДиР.ВУпрВалюте = Ложь;
				НаборЗаписейДиР.Доход      = ТекСтрока.СуммаУпрРасход;
				Отказ = НЕ НаборЗаписейДиР.Расход() ИЛИ Отказ;
				
				// Корректируем движения взаиморасчетов.
				НаборЗаписейДиР = Движения.ДоходыИРасходы;
				НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
				НаборЗаписейДиР.Подразделение  = ТекСтрока.Подразделение;
				НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
				НаборЗаписейДиР.ВУпрВалюте = Ложь;
				НаборЗаписейДиР.Доход      = ТекСтрока.СуммаУпрРасход;
				Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;	
			КонецЕсли;  					
		КонецЦикла;	
	КонецЕсли;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	// проведение в Платежный календарь
	НаборЗаписей = Движения.ПлатежныйКалендарь;
	НаборЗаписей.ДокументОбъект = Ссылка;
	
	Отказ = Не НаборЗаписей.ФактВыписка() ИЛИ Отказ;
	
	// двигаем границу последовательности взаиморасчетов
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСделку(Знач Основание, ЭтоДебетоваяСделка)

	// Для правильного определения взаиморасчетов	
	Если ЕстьРеквизит(Основание, "ДокументОснование") Тогда
		ОснованиеСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ДокументОснование");
		Если ТипЗнч(ОснованиеСчета) = Тип("ДокументСсылка.ЗаказПокупателя")
			ИЛИ ТипЗнч(ОснованиеСчета) = Тип("ДокументСсылка.ЗаказНаАвтомобиль")
			ИЛИ ТипЗнч(ОснованиеСчета) = Тип("ДокументСсылка.ЗаказНаряд")
			ИЛИ ТипЗнч(ОснованиеСчета) = Тип("ДокументСсылка.РеализацияТоваров")
			ИЛИ ТипЗнч(ОснованиеСчета) = Тип("ДокументСсылка.РеализацияАвтомобилей") Тогда
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для правильного определения взаиморасчетов сделка была заменена");
		Возврат ОснованиеСчета;
			
		КонецЕсли;
	КонецЕсли;
	
	ДоступныеСделки = ПланыВидовХарактеристик.ТипыСделок.ПолучитьРазрешенныеТипыСделок(ЭтоДебетоваяСделка, НЕ ЭтоДебетоваяСделка);
	
	Пока ЕстьРеквизит(Основание, "ДокументОснование")
		И ЗначениеЗаполнено(Основание.ДокументОснование)
		И ДоступныеСделки.Найти(ТипЗнч(Основание.ДокументОснование)) <> Неопределено Цикл
		
		Основание = Основание.ДокументОснование;
		
	КонецЦикла;
	
	Возврат Основание;
	
КонецФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Счет на оплату за автомобили"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СчетНаОплатуЗаАвтомобили(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем обработчик заполнения на основании документа "Счет на оплату"
	Возврат ОбработкаЗаполнения_СчетНаОплату(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);	
	
КонецФункции // ОбработкаЗаполнения_СчетНаОплатуЗаАвтомобили()

// Производит заполнение объекта на основании документа "Заявка на расход ДС"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаРасходДС(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОснованиеПлатежи = ДанныеЗаполнения.Платежи;
	Если ОснованиеПлатежи.Количество() > 0 Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПланПоступленияДС") Тогда
			Сделка = ПолучитьСделку(ДанныеЗаполнения.Сделка, Истина);
		Иначе
			Сделка = ПолучитьСделку(ДанныеЗаполнения.Сделка, Ложь);
		КонецЕсли;
		
		ЭтоЗаказ = Метаданные.ОпределяемыеТипы.ЗаказыДокументовРасчета.Тип.СодержитТип(ТипЗнч(Сделка));
		ДополнительныеСвойства.ПараметрыДействия.Вставить("НеЗаполнятьДоговор", Истина);
		
		Для Каждого Платеж Из ОснованиеПлатежи Цикл
			
			НоваяСтрока                       = Состав.Добавить();
			НоваяСтрока.СтатьяДДС             = ДанныеЗаполнения.СтатьяДДС;
			НоваяСтрока.Контрагент            = ДанныеЗаполнения.Контрагент;
			НоваяСтрока.ДоговорВзаиморасчетов = ДанныеЗаполнения.ДоговорВзаиморасчетов;
			Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(
					ДанныеЗаполнения.ДоговорВзаиморасчетов)
				И РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ВерсияОбъекта) Тогда
				Если ЭтоЗаказ Тогда
					НоваяСтрока.Заказ = Сделка;
					НоваяСтрока.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
				Иначе
					НоваяСтрока.Сделка = Сделка;
					НоваяСтрока.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
				КонецЕсли;
			Иначе
				НоваяСтрока.Сделка = Сделка;
			КонецЕсли;
			НоваяСтрока.ДокументПланирования  = ДанныеЗаполнения;
			НоваяСтрока.НазначениеПлатежа     = СокрЛП(ДанныеЗаполнения.Назначение);
			
			Документы.Выписка.СоставКонтрагентПриИзменении(ЭтотОбъект, НоваяСтрока, ДополнительныеСвойства.ПараметрыДействия);
			
			Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаРасходДС") Тогда
				НоваяСтрока.СуммаРасход = Документы.Выписка.ПолучитьОстатокОплатыПоПлатежномуКалендарю(ДанныеЗаполнения); 
			Иначе 
				НоваяСтрока.СуммаПриход = Платеж.Сумма;
			КонецЕсли;
			
			Если НоваяСтрока.СуммаПриход > 0 Тогда
				Документы.Выписка.СоставСуммаПриходПриИзменении(ЭтотОбъект, НоваяСтрока, , ДополнительныеСвойства.ПараметрыДействия);
			ИначеЕсли 
				НоваяСтрока.СуммаРасход > 0 Тогда 
				Документы.Выписка.СоставСуммаРасходПриИзменении(ЭтотОбъект, НоваяСтрока, , ДополнительныеСвойства.ПараметрыДействия);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаявкаНаРасходДС()

// Производит заполнение объекта на основании документа "План поступления ДС"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПланПоступленияДС(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Возвращаем заполнение по заявке на расход дс
	Возврат ОбработкаЗаполнения_ЗаявкаНаРасходДС(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_ПланПоступленияДС()

// Производит заполнение объекта на основании документа "Счет на оплату"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СчетНаОплату(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтатьяДДС = Справочники.СтатьиДДС.ОплатаОтПокупателя;
	Документы.Выписка.ХозОперацияПриИзменении(ЭтотОбъект);
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДанныеЗаполнения,
		"Контрагент,ДоговорВзаиморасчетов,СуммаДокумента,ВалютаДокумента,РасчетныйСчетОрганизации"
	);
	БанковскийСчет = РеквизитыОснования.РасчетныйСчетОрганизации;
	Документы.Выписка.БанковскийСчетПриИзменении(ЭтотОбъект);
	
	СуммаОснования = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
		РеквизитыОснования.СуммаДокумента,
		РеквизитыОснования.ВалютаДокумента,
		Дата,
		ВалютаДокумента,
		Дата
	);
	СделкаОснования = ПолучитьСделку(ДанныеЗаполнения, Ложь);
	
	СуммаДокументаПриход = СуммаОснования;
	Документы.Выписка.СуммаДокументаПриходПриИзменении(ЭтотОбъект);
	
	ОбработкаСобытийДокументаСервер.УстановитьСтавкуНДС(ДанныеЗаполнения.Ссылка, ЭтотОбъект, СуммаДокументаПриход);
	
	ВзаиморасчетыПоДокументамРасчетов = РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(
		ДоговорВзаиморасчетов)
		И РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ВерсияОбъекта);
	
	СтрокаСостава = Состав.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаСостава, РеквизитыОснования);
	СтрокаСостава.СтатьяДДС = СтатьяДДС;
	Документы.Выписка.СоставДоговорВзаиморасчетовПриИзменении(ЭтотОбъект, СтрокаСостава);
	Если ВзаиморасчетыПоДокументамРасчетов Тогда
		Если ТипЗнч(СделкаОснования) = Тип("ДокументСсылка.СчетНаОплату")
			ИЛИ ТипЗнч(СделкаОснования) = Тип("ДокументСсылка.СчетНаОплатуЗаАвтомобили") Тогда
			СтрокаСостава.Заказ = СделкаОснования;
			СтрокаСостава.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
		Иначе
			СтрокаСостава.Сделка = СделкаОснования;
			СтрокаСостава.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
		КонецЕсли;
	Иначе
		СтрокаСостава.Сделка = СделкаОснования;
	КонецЕсли;
	СтрокаСостава.СтавкаНДС = СтавкаНДС;
	СтрокаСостава.СуммаПриход = СуммаОснования;
	Документы.Выписка.СоставСуммаПриходПриИзменении(ЭтотОбъект, СтрокаСостава);
	СтрокаСостава.СуммаНДС = СуммаНДС;
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_СчетНаОплату()

// Производит заполнение объекта на основании документа "Заявка на хранение шин"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаХранениеШин(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка);
	
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	// изменим ставку НДС, если нужно
	ОбработкаСобытийДокументаСервер.УстановитьСтавкуНДС(ДанныеЗаполнения, ЭтотОбъект);
	
	СтатьяДДС = Справочники.СтатьиДДС.ПредоплатаОтПокупателя;
	ХозОперация = Справочники.ХозОперации.СтрокаБанковскойВыписки;
	Документы.Выписка.ХозОперацияПриИзменении(ЭтотОбъект);
	
	РеквизитыОснования = ОбщегоНазначения
		.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Контрагент,ДоговорВзаиморасчетов,СуммаДокумента,ВалютаДокумента");
	СуммаОснования = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
		РеквизитыОснования.СуммаДокумента, РеквизитыОснования.ВалютаДокумента, Дата, ВалютаДокумента, Дата);
	
	СуммаДокументаПриход = СуммаОснования;
	Документы.Выписка.СуммаДокументаПриходПриИзменении(ЭтотОбъект);
	
	СтрокаСостава = Состав.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаСостава, РеквизитыОснования);
	СтрокаСостава.СтатьяДДС = СтатьяДДС;
	Документы.Выписка.СоставДоговорВзаиморасчетовПриИзменении(ЭтотОбъект, СтрокаСостава);
	Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(
					ДанныеЗаполнения.ДоговорВзаиморасчетов)
		И РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ВерсияОбъекта) Тогда
		СтрокаСостава.Заказ = ДанныеЗаполнения;
		СтрокаСостава.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
	Иначе
		СтрокаСостава.Сделка = ДанныеЗаполнения;
	КонецЕсли;
	СтрокаСостава.СтавкаНДС = СтавкаНДС;
	СтрокаСостава.СуммаПриход = СуммаОснования;
	Документы.Выписка.СоставСуммаПриходПриИзменении(ЭтотОбъект, СтрокаСостава);
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаявкаНаХранениеШин()

// Производит заполнение объекта на основании документа "Инкассация"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Инкассация(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	
	ИзменилсяКонтрагент = (Контрагент            <> ДокументОснование.ПлатежнаяСистема);
	ИзменилсяДоговор    = (ДоговорВзаиморасчетов <> ДокументОснование.ДоговорВзаиморасчетовПлатежнаяСистема);
	
	Контрагент            = ДокументОснование.ПлатежнаяСистема;
	ДоговорВзаиморасчетов = ДокументОснование.ДоговорВзаиморасчетовПлатежнаяСистема;
		
	Если ИзменилсяКонтрагент Тогда
		Документы.Выписка.КонтрагентПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	КонецЕсли;
	
	Если ИзменилсяДоговор Тогда
		Документы.Выписка.ДоговорВзаиморасчетовПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	КонецЕсли;
	
	
	Оплаты = ДокументОснование.Оплаты.Выгрузить();
	Оплаты.Свернуть("ТипОплаты", "Сумма,СуммаВозврат");
	
	СтрокаОплатБезнал = Оплаты.Найти(Перечисления.ТипыОплатыККТ.Электронно, "ТипОплаты");
	ЭтоРасход = Ложь;
	Если СтрокаОплатБезнал = Неопределено Тогда
		СуммаДокументаПриход = 0;
	Иначе
		СуммаОплаты = СтрокаОплатБезнал.Сумма - СтрокаОплатБезнал.СуммаВозврат;
		Если СуммаОплаты >= 0 Тогда
			СуммаДокументаПриход = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаОплаты,
				ДокументОснование.ВалютаДокумента, ДокументОснование.КурсДокумента, ВалютаДокумента, Дата);
		Иначе
			СуммаДокументаРасход = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте( - СуммаОплаты,
				ДокументОснование.ВалютаДокумента, ДокументОснование.КурсДокумента, ВалютаДокумента, Дата);
			ЭтоРасход = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоРасход Тогда
		Документы.Выписка.СуммаДокументаРасходПриИзменении(ЭтотОбъект,ДополнительныеСвойства.ПараметрыДействия);
	Иначе
		Документы.Выписка.СуммаДокументаПриходПриИзменении(ЭтотОбъект,ДополнительныеСвойства.ПараметрыДействия);
	КонецЕсли;
	
	СтрокаСостава = Состав.Добавить();
	СтрокаСостава.Контрагент = Контрагент;
	СтрокаСостава.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
	СтрокаСостава.СтатьяДДС = СтатьяДДС;
	Документы.Выписка.СоставДоговорВзаиморасчетовПриИзменении(ЭтотОбъект, СтрокаСостава);
	СтрокаСостава.Сделка = ДанныеЗаполнения;
	СтрокаСостава.СтавкаНДС = СтавкаНДС;
	Если ЭтоРасход Тогда
		СтрокаСостава.СуммаРасход = СуммаДокументаРасход;
		Документы.Выписка.СоставСуммаРасходПриИзменении(ЭтотОбъект, СтрокаСостава);
	Иначе
		СтрокаСостава.СуммаПриход = СуммаДокументаПриход;
		Документы.Выписка.СоставСуммаПриходПриИзменении(ЭтотОбъект, СтрокаСостава);
	КонецЕсли;
	Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(
					ДанныеЗаполнения.ДоговорВзаиморасчетовПлатежнаяСистема)
		И РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ВерсияОбъекта) Тогда
		СтрокаСостава.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
	КонецЕсли;
	СтрокаСостава.СуммаНДС = СуммаНДС;

	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Инкассация()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
