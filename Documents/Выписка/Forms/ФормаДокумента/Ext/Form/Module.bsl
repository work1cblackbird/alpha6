///////////////////////////////////////////////////////////////////////////////
// Модуль основной формы документа "Выписка"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// ПодключаемоеОборудование
	ТипыОборудования = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
	ТипыОборудования.СканерШтрихкода = Истина;
	ТипыОборудования.СчитывательМагнитныхКарт = Истина;
	МенеджерОборудования.ПриСозданииНаСервере(ЭтаФорма, ТипыОборудования);
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	ЗапретРедактированияРеквизитовОбъектовАльфаАвто.ЗаблокироватьФискальныеРеквизиты(ЭтотОбъект);
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ОграничитьВыборКонтактныхЛиц(Элементы.Контрагент);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	
	РазрешитьРедактированиеЦенИСумм = ПраваИНастройкиПользователя.Значение("РедактированиеЦенИСуммВНоменклатурныхТаблицах", Объект);
	РаботаСФормой.РазрешитьРедактированиеЦенИСумм(
		РаботаСФормой.ТиповыеПоляСуммовыхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм
	);
		
	ОписаниеНовойКолонкиПроизводитель = РаботаСФормой.ОписаниеНовойКолонкиПроизводитель();
	ОписаниеНовойКолонкиПроизводитель.ТабличнаяЧасть = Элементы.Товары;
	ОписаниеНовойКолонкиПроизводитель.ПоставитьПеред = Элементы.ТоварыНоменклатураАртикул;
	НоваяКолонкаПроизводитель = РаботаСФормой.НоваяКолонкаПроизводитель(ЭтотОбъект, ОписаниеНовойКолонкиПроизводитель);
	
	КолонкиКодАртикулИПроизводитель = Новый Структура();
	КолонкиКодАртикулИПроизводитель.Вставить("Код", Элементы.ТоварыНоменклатураКод);
	КолонкиКодАртикулИПроизводитель.Вставить("Артикул", Элементы.ТоварыНоменклатураАртикул);
	КолонкиКодАртикулИПроизводитель.Вставить("Производитель", НоваяКолонкаПроизводитель);
	РаботаСФормой.НастроитьВидимостьКолонокКодАртикулИПроизводитель(КолонкиКодАртикулИПроизводитель);
	РаботаСФормой.ОткрытьФормуТолькоДляПросмотра(ЭтотОбъект, Объект);
	
	Если Объект.ХозОперация <> Справочники.ХозОперации.БанковскаяВыписка Тогда
		Элементы.ВыборХозОперации.ПодчиненныеЭлементы.ХозОперацияБанковскаяВыписка.Видимость = Ложь;
	КонецЕсли;
	
	// Заполним служебные реквизиты ТЧ Состав
	Для Каждого ТекущаяСтрока Из Объект.Состав Цикл
		ТекущаяСтрока.ВидДвижения = ТекущаяСтрока.СтатьяДДС.ВидДвижения;
		ТекущаяСтрока.ФормаСобственности = ТекущаяСтрока.Контрагент.ФормаСобственности;
	КонецЦикла;
	
	ФормаСобственности = Объект.Контрагент.ФормаСобственности;
	
	НастроитьСписокВыбораКодВидаДохода();
	
	РедактироватьТовары = Объект.Товары.Количество() > 0;
	
	ОбновитьКонтактнуюИнформацию(НЕ ЗначениеЗаполнено(Объект.Ссылка));
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец АльфаАвто.СобытияОбъектов
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		// Заполним служебные реквизиты ТЧ Состав
		ЗаполнитьДополнительныеРевизитыСостава();
		
		РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
		РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
		НастроитьПараметрыВыбораЭлементовФормы();
		УправлениеДиалогомНаСервере();
		
	КонецЕсли;
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);

КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ПриОткрытии_ФормаДокумента(ЭтотОбъект, Отказ);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование

КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия = Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ОбработкаОповещения_ФормаДокумента(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.СобытияОбъектов
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		Возврат;
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// Штрихкодирование
	ШтрихкодированиеКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец Штрихкодирование
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	
	РедактироватьТовары = Объект.Товары.Количество() > 0;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриЧтенииНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект);
	// Конец АльфаАвто.СобытияОбъектов
	
	// Заполним служебные реквизиты ТЧ Состав
	ЗаполнитьДополнительныеРевизитыСостава();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("Выписка", ПараметрыЗаписи.РежимЗаписи,
		Объект.Товары.Количество() > 50);
		
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);
	
КонецПроцедуры 

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПередЗаписьюНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	ЗапретРедактированияРеквизитовОбъектовАльфаАвто.ЗаблокироватьФискальныеРеквизиты(ЭтотОбъект);
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПослеЗаписиНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры 

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)

	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Выписка.ДатаПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Выписка.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	БанковскийСчетПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	Документы.Выписка.БанковскийСчетПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ПлатежноеПоручениеОснованиеПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Выписка.ПлатежноеПоручениеОснованиеПриИзменении(Объект, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежноеПоручениеОснованиеПриИзменении(Команда)
	
	ПараметрыДействия = Новый Структура;
	ПлатежноеПоручениеОснованиеПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПлатежноеПоручениеОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.СтатьяДДС) ИЛИ НЕ ВидДвиженияРасход(Объект.СтатьяДДС) Тогда 
		Элемент.ОграничениеТипа = Новый ОписаниеТипов("Строка", ,
			Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная));
	Иначе
		Элемент.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручение");
	КонецЕсли;
	
	Объект.ПлатежноеПоручениеОснование = Элемент.ОграничениеТипа.ПривестиЗначение(Объект.ПлатежноеПоручениеОснование);
	
КонецПроцедуры 

&НаКлиенте
Процедура НомерВходящегоДокументаПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(Объект.ВхДокНомер) И НЕ ЗначениеЗаполнено(Объект.ВхДокДата) Тогда
		Объект.ВхДокДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	ИначеЕсли ПустаяСтрока(Объект.ВхДокНомер) Тогда
		Объект.ВхДокДата = Дата(1, 1, 1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяПСНПриИзменении(Элемент)
	ПараметрыДействия = Новый Структура;
	ИспользуетсяПСНПриИзмененииНаСервере(ПараметрыДействия);    
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
КонецПроцедуры

&НаСервере
Процедура ИспользуетсяПСНПриИзмененииНаСервере(ПараметрыДействия)
	Элементы.Патент.Доступность = ИспользуетсяПСН; 
	Если НЕ ИспользуетсяПСН Тогда
		Объект.Патент = Справочники.Патенты.ПустаяСсылка();
	Иначе
		ОбработкаРеквизитовДокументаСервер.УстановитьПатентПоОрганизации(Объект); 
	КонецЕсли; 
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	КонтрагентПриИзмененииНаСервере(Неопределено, ПараметрыДействия);
	
	// Обработаем изменения требующие ответа от пользователя
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
	ОбновитьКонтактнуюИнформацию();

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(Элемент, ПараметрыДействия = Неопределено)
	
	ПараметрыДействия = Новый Структура;
	Документы.Выписка.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	ФормаСобственности = Объект.Контрагент.ФормаСобственности;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();

КонецПроцедуры 

&НаКлиенте
Процедура ДоговорВзаиморасчетовПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия);

КонецПроцедуры  

&НаСервере
Процедура ДоговорВзаиморасчетовПриИзмененииНаСервере(Элемент, ПараметрыДействия = Неопределено)

	ПараметрыДействия = Новый Структура;
	Документы.Выписка.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();

КонецПроцедуры 

&НаКлиенте
Процедура СтатьяДДСПриИзменении(Элемент)

	ПараметрыДействия = Новый Структура;
	СтатьяДДСПриИзмененииНаСервере(ПараметрыДействия);

КонецПроцедуры 

&НаСервере
Процедура СтатьяДДСПриИзмененииНаСервере(Элемент, ПараметрыДействия = Неопределено)
	
	ПараметрыДействия = Новый Структура;
	Документы.Выписка.СтатьяДДСПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриходПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	СуммаДокументаПриходПриИзмененииНаСервере(ПараметрыДействия);

КонецПроцедуры 

&НаСервере
Процедура СуммаДокументаПриходПриИзмененииНаСервере(Элемент, ПараметрыДействия = Неопределено)

	ПараметрыДействия = Новый Структура;
	Документы.Выписка.СуммаДокументаПриходПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();

КонецПроцедуры 

&НаКлиенте
Процедура СуммаДокументаРасходПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	СуммаДокументаРасходПриИзмененииНаСервере(ПараметрыДействия);

КонецПроцедуры 

&НаСервере
Процедура СуммаДокументаРасходПриИзмененииНаСервере(Элемент, ПараметрыДействия = Неопределено)
	
	ПараметрыДействия = Новый Структура;
	Документы.Выписка.СуммаДокументаРасходПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();

КонецПроцедуры 

&НаСервере
Процедура СуммаУслугПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	Документы.Выписка.СуммаУслугПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаУслугПриИзменении(Элемент)
	
	СуммаУслугПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	СтавкаНДСПриИзмененииНаСервере(ПараметрыДействия);

КонецПроцедуры 

&НаСервере
Процедура СтавкаНДСПриИзмененииНаСервере(Элемент, ПараметрыДействия = Неопределено)
	
	ПараметрыДействия = Новый Структура;
	Документы.Выписка.СтавкаНДСПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();

КонецПроцедуры 

&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	СуммаНДСПриИзмененииНаСервере(ПараметрыДействия);

КонецПроцедуры 

&НаСервере
Процедура СуммаНДСПриИзмененииНаСервере(Элемент, ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ДляПробитияНаФРПриИзменении(Элемент)
	
	ДляПробитияНаФРПриИзмененииНаСервере();
	
	// Установим доступность полей ввода фискальных данных
	Элементы.ФискальныеРеквизитыПараметры.Доступность = Объект.ДляПробитияНаФР;
	Элементы.РедактироватьТовары.Доступность = Объект.ДляПробитияНаФР ;
		
КонецПроцедуры 

&НаСервере
Процедура ДляПробитияНаФРПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
		
	Если Объект.ДляПробитияНаФР И НЕ ЗначениеЗаполнено(Объект.ТипРасчета) Тогда
		Объект.ТипРасчета = Документы.Выписка.ТипРасчетаПоДокументу(Объект);
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура КассаККМПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Выписка.КассаККМПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	КассаККМПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПризнакСпособаРасчетаПриИзменении(Элемент)
	УправлениеДиалогомНаСервере();
КонецПроцедуры

&НаСервере
Процедура ФРПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ФРПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ФРПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ТелефонEmailПокупателяПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонEmailПокупателяПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ТелефонEmailПокупателяПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьТоварыПриИзменении(Элемент)
	
	Если НЕ РедактироватьТовары И Объект.Товары.Количество() <> 0 Тогда
		
		ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_РедактироватьТоварыЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(
			ОбработчикОповещения,
			НСтр("ru = 'Таблица товаров будет очищена. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет
		);
		
		Возврат;
		
	КонецЕсли;
	
	РедактироватьТоварыПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура РедактироватьТоварыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ПерезаполнитьТоварыНаСервере();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСостав

&НаКлиенте
Процедура СоставПриИзменении(Элемент)
	
	СоставПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СоставПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Если Объект.ХозОперация <> Справочники.ХозОперации.БанковскаяВыписка И Элементы.Состав.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Объект.Состав.НайтиПоИдентификатору(Элементы.Состав.ТекущаяСтрока);
		Если ТекущиеДанные.СтатьяДДС <> Объект.СтатьяДДС Тогда
			ТекущиеДанные.СтатьяДДС = Объект.СтатьяДДС;
			Документы.Выписка.СоставСтатьяДДСПриИзменении(Объект, ТекущиеДанные);
		КонецЕсли;
		Если ТекущиеДанные.Контрагент <> Объект.Контрагент Тогда
			ТекущиеДанные.Контрагент = Объект.Контрагент;
			ПараметрыДействия        = Новый Структура("ПерерасчетНеТребуется", Истина);
			Документы.Выписка.СоставКонтрагентПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
		КонецЕсли;
		Если ТекущиеДанные.ДоговорВзаиморасчетов <> Объект.ДоговорВзаиморасчетов Тогда
			ТекущиеДанные.ДоговорВзаиморасчетов = Объект.ДоговорВзаиморасчетов;
			ПараметрыДействия                   = Новый Структура("ПерерасчетНеТребуется", Истина);
			Документы.Выписка.СоставДоговорВзаиморасчетовПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
			ТекущиеДанные.СпособВеденияВзаимозачетов = ТекущиеДанные.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов;
		КонецЕсли;
		Если ТекущиеДанные.СтавкаНДС <> Объект.СтавкаНДС Тогда
			ТекущиеДанные.СтавкаНДС = Объект.СтавкаНДС;
			Документы.Выписка.СоставСтавкаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекущиеДанные.СпособВеденияВзаимозачетов) Тогда
			ТекущиеДанные.СпособВеденияВзаимозачетов = ТекущиеДанные.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов;
		КонецЕсли;
	КонецЕсли;
	
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(ЭтотОбъект);
	Документы.Выписка.ЗаполнитьПлатежноеПоручениеОснование(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеДиалогомДокументаКлиент.ТоварыПриОкончанииРедактирования(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока,
		ОтменаРедактирования, 
		"Состав"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПослеУдаления(Элемент)
	
	СоставПослеУдаленияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СоставПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)
	
	ПерезаполнитьТоварыНаСервере();
	
КонецПроцедуры 

#Область ОбработчикиСобытийПолейТаблицыФормыСостав

&НаСервере
Процедура СоставДокументПланированияПриИзмененииНаСервере()
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Состав.НайтиПоИдентификатору(Элементы.Состав.ТекущаяСтрока);
	
	Если ТекущиеДанные.ДокументПланирования = Документы.ЗаявкаНаРасходДС.ПустаяСсылка() 
		ИЛИ ТекущиеДанные.ДокументПланирования = Документы.ПланПоступленияДС.ПустаяСсылка() Тогда
		Возврат;
	КонецЕсли;
	
	// Очистим текущуюСтроку
	ТекущиеДанные.ВидДвижения 			      = Перечисления.ВидыДвижений.ПустаяСсылка();
	ТекущиеДанные.ДоговорВзаиморасчетов       = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	ТекущиеДанные.Контрагент                  = Справочники.Контрагенты.ПустаяСсылка();
	ТекущиеДанные.КоррСчет                    = ПланыСчетов.Регламентированный.ПустаяСсылка();
	ТекущиеДанные.КурсВалютыВзаиморасчетов    = 0;
	ТекущиеДанные.НазначениеПлатежа           = "";
	ТекущиеДанные.ПлатежноеПоручениеОснование = Документы.ПлатежноеПоручение.ПустаяСсылка();
	ТекущиеДанные.ПроцентКомиссии             = 0;
	ТекущиеДанные.Сделка                      = Неопределено;
	ТекущиеДанные.СтавкаНДС                   = Справочники.СтавкиНДС.ПустаяСсылка();
	ТекущиеДанные.СтатьяДДС                   = Справочники.СтатьиДДС.ПустаяСсылка();
	ТекущиеДанные.СуммаНДС                    = 0;
	ТекущиеДанные.СуммаПриход                 = 0;
	ТекущиеДанные.СуммаРасход                 = 0;
	ТекущиеДанные.СуммаУслуг                  = 0;
	
	Запрос = Новый Запрос;
	Если ТипЗнч(ТекущиеДанные.ДокументПланирования) = Тип("ДокументСсылка.ЗаявкаНаРасходДС") Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗаявкаНаРасходДС.СтатьяДДС КАК СтатьяДДС,
			|	ЗаявкаНаРасходДС.Контрагент КАК Контрагент,
			|	ЗаявкаНаРасходДС.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
			|	СУММА(ЗаявкаНаРасходДСПлатежи.Сумма) КАК СуммаРасход,
			|	0 КАК СуммаПриход,
			|	ЗаявкаНаРасходДС.Сделка КАК Сделка
			|ИЗ
			|	Документ.ЗаявкаНаРасходДС.Платежи КАК ЗаявкаНаРасходДСПлатежи
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходДС КАК ЗаявкаНаРасходДС
			|		ПО ЗаявкаНаРасходДСПлатежи.Ссылка = ЗаявкаНаРасходДС.Ссылка
			|ГДЕ
			|	ЗаявкаНаРасходДС.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаявкаНаРасходДС.СтатьяДДС,
			|	ЗаявкаНаРасходДС.Контрагент,
			|	ЗаявкаНаРасходДС.ДоговорВзаиморасчетов,
			|	ЗаявкаНаРасходДС.Сделка";
	
	ИначеЕсли ТипЗнч(ТекущиеДанные.ДокументПланирования) = Тип("ДокументСсылка.ПланПоступленияДС") Тогда
		Запрос.Текст = 
			 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			 |	ПланПоступленияДС.СтатьяДДС КАК СтатьяДДС,
			 |	ПланПоступленияДС.Контрагент КАК Контрагент,
			 |	ПланПоступленияДС.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
			 |	0 КАК СуммаРасход,
			 |	СУММА(ПланПоступленияДСПлатежи.Сумма) КАК СуммаПриход,
			 |	ПланПоступленияДС.Сделка КАК Сделка
			 |ИЗ
			 |	Документ.ПланПоступленияДС.Платежи КАК ПланПоступленияДСПлатежи
			 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланПоступленияДС КАК ПланПоступленияДС
			 |		ПО ПланПоступленияДСПлатежи.Ссылка = ПланПоступленияДС.Ссылка
			 |ГДЕ
			 |	ПланПоступленияДС.Ссылка = &Ссылка
			 |
			 |СГРУППИРОВАТЬ ПО
			 |	ПланПоступленияДС.СтатьяДДС,
			 |	ПланПоступленияДС.Контрагент,
			 |	ПланПоступленияДС.ДоговорВзаиморасчетов,
			 |	ПланПоступленияДС.Сделка";
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("Ссылка", ТекущиеДанные.ДокументПланирования);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекущиеДанные.СтатьяДДС             = Выборка.СтатьяДДС;
		ТекущиеДанные.Контрагент            = Выборка.Контрагент;
		ТекущиеДанные.ДоговорВзаиморасчетов = Выборка.ДоговорВзаиморасчетов; 
		ТекущиеДанные.Сделка                = Выборка.Сделка;
		ТекущиеДанные.СуммаРасход           = Выборка.СуммаРасход;
		ТекущиеДанные.СуммаПриход           = Выборка.СуммаПриход;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставДокументПланированияПриИзменении(Элемент)
	
	СоставДокументПланированияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСтатьяДДСПриИзменении(Элемент)

	СоставСтатьяДДСПриИзмененииНаСервере();

КонецПроцедуры 

&НаСервере
Процедура СоставСтатьяДДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Состав.НайтиПоИдентификатору(Элементы.Состав.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.Выписка.СоставСтатьяДДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
	Если ТекущиеДанные.ВидДвижения = Перечисления.ВидыДвижений.Приход
		И ЗначениеЗаполнено(ТекущиеДанные.ПлатежноеПоручениеОснование) Тогда
		
		ТекущиеДанные.ПлатежноеПоручениеОснование = Неопределено;
		СоставПлатежноеПоручениеОснованиеПриИзмененииНаСервере(ПараметрыДействия);
		
	КонецЕсли;

	НастроитьПараметрыВыбораЭлементовФормы();
	
КонецПроцедуры 

&НаКлиенте
Процедура СоставКонтрагентПриИзменении(Элемент)

	СоставКонтрагентПриИзмененииНаСервере();

КонецПроцедуры 

&НаСервере
Процедура СоставКонтрагентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Состав.НайтиПоИдентификатору(Элементы.Состав.ТекущаяСтрока);
	Документы.Выписка.СоставКонтрагентПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставДоговорВзаиморасчетовПриИзменении(Элемент)
	
	СоставДоговорВзаиморасчетовПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура СоставДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Состав.НайтиПоИдентификатору(Элементы.Состав.ТекущаяСтрока);
	Документы.Выписка.СоставДоговорВзаиморасчетовПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура СоставСпособЗачетаАвансовПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Состав.НайтиПоИдентификатору(Элементы.Состав.ТекущаяСтрока);
	Документы.Выписка.СоставСпособЗачетаАвансовПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ПерезаполнитьТоварыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСпособЗачетаАвансовПриИзменении(Элемент)
	
	СоставСпособЗачетаАвансовПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСделкаПриИзменении(Элемент)
	
	СоставСделкаПриИзмененииНаСервере();

КонецПроцедуры 

&НаСервере
Процедура СоставСделкаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Состав.НайтиПоИдентификатору(Элементы.Состав.ТекущаяСтрока);
	Документы.Выписка.СоставСделкаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ПерезаполнитьТоварыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СоставЗаказПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Состав.НайтиПоИдентификатору(Элементы.Состав.ТекущаяСтрока);
	Документы.Выписка.СоставЗаказПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставЗаказПриИзменении(Элемент)
	СоставЗаказПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СоставЗаказНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Состав.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	// Получим тип документа
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработатьВыборТипаСделки", ЭтотОбъект, Элемент);
	ТипыСделки = СписокТиповЗаказов();
	ТипыСделки.ПоказатьВыборЭлемента(
		ОбработчикОповещения,
		НСтр("ru = 'Выберите тип заказа'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Состав.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	// Получим тип документа
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработатьВыборТипаСделки", ЭтотОбъект, Элемент);
	ТипыСделки = СписокТиповСделок(ТекущиеДанные.ДоговорВзаиморасчетов, Объект.ВерсияОбъекта);
	ТипыСделки.ПоказатьВыборЭлемента(
		ОбработчикОповещения,
		НСтр("ru = 'Выберите тип сделки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСуммаПриходПриИзменении(Элемент)

	СоставСуммаПриходПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура СоставСуммаПриходПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Состав.НайтиПоИдентификатору(Элементы.Состав.ТекущаяСтрока);
	Документы.Выписка.СоставСуммаПриходПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСуммаРасходПриИзменении(Элемент)
	
	СоставСуммаРасходПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура СоставСуммаРасходПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Состав.НайтиПоИдентификатору(Элементы.Состав.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.Выписка.СоставСуммаРасходПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры // СоставСуммаРасходПриИзмененииНаСервере()

&НаКлиенте
Процедура СоставПроцентКомиссииПриИзменении(Элемент)
	
	СоставПроцентКомиссииПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура СоставПроцентКомиссииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Состав.НайтиПоИдентификатору(Элементы.Состав.ТекущаяСтрока);
	Документы.Выписка.СоставПроцентКомиссииПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура СоставСуммаУслугПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Состав.НайтиПоИдентификатору(Элементы.Состав.ТекущаяСтрока);
	Документы.Выписка.СоставСуммаУслугПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура СоставСуммаУслугПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	СоставСуммаУслугПриИзмененииНаСервере();
	
КонецПроцедуры // СоставСуммаУслугПриИзменении()

&НаСервере
Процедура СоставСуммаРазницаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Состав.НайтиПоИдентификатору(Элементы.Состав.ТекущаяСтрока);
	Документы.Выписка.СоставСуммаРазницаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура СоставСуммаРазницаПриИзменении(Элемент)
	
	СоставСуммаРазницаПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура СоставСтавкаНДСПриИзменении(Элемент)

	СоставСтавкаНДСПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура СоставСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	ТекущиеДанные = Объект.Состав.НайтиПоИдентификатору(Элементы.Состав.ТекущаяСтрока);
	Документы.Выписка.СоставСтавкаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПлатежноеПоручениеОснованиеПриИзменении(Элемент)
	
	СоставПлатежноеПоручениеОснованиеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СоставПлатежноеПоручениеОснованиеПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Состав.НайтиПоИдентификатору(Элементы.Состав.ТекущаяСтрока);
	Документы.Выписка.СоставПлатежноеПоручениеОснованиеПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНомерВходящегоДокументаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Состав.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ВхДокНомер)
		И НЕ ЗначениеЗаполнено(ТекущиеДанные.ВхДокДата) Тогда
		
		ТекущиеДанные.ВхДокДата = ОбщегоНазначенияКлиент.ДатаСеанса();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекущиеДанные.ВхДокНомер) Тогда
		
		ТекущиеДанные.ВхДокДата = Дата(1, 1, 1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПлатежноеПоручениеОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Состав.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.СтатьяДДС) ИЛИ НЕ ВидДвиженияРасход(ТекущиеДанные.СтатьяДДС) Тогда
		Элемент.ОграничениеТипа = Новый ОписаниеТипов("Строка", ,
			Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная));
	Иначе
		Элемент.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручение");
	КонецЕсли;
	
	ТекущиеДанные.ПлатежноеПоручениеОснование =
		Элемент.ОграничениеТипа.ПривестиЗначение(ТекущиеДанные.ПлатежноеПоручениеОснование);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеДиалогомДокументаКлиент.ТоварыПриОкончанииРедактирования(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока,
		ОтменаРедактирования
	);
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока.СуммаСкидкиБонусами = 0;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ТоварыПослеУдаленияНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)

	УправлениеДиалогомДокументаСервер.ТоварыПослеУдаления(
	ЭтотОбъект,
	Элементы.Товары, ПараметрыДействия);
	
КонецПроцедуры 

#Область ОбработчикиСобытийПолейТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТоварыНоменклатураПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Выписка.ТоварыНоменклатураПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Выписка.ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТоварыЕдиницаИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры 
 
&НаСервере
Процедура ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Выписка.ТоварыЕдиницаИзмеренияПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Выписка.ТоварыКоличествоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	ТоварыКоличествоПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТоварыЦенаПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыЦенаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Выписка.ТоварыЦенаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТоварыСуммаПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСуммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Выписка.ТоварыСуммаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСуммаВсегоПриИзменении(Элемент)
	
	ТоварыСуммаВсегоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Выписка.ТоварыСуммаВсегоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТоварыСтавкаНДСПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Выписка.ТоварыСтавкаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТоварыСуммаНДСПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСуммаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Выписка.ТоварыСуммаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Элемент)
	
	ТоварыСуммаСкидкиСтрокиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Выписка.ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	
	ТоварыСуммаСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Выписка.ТоварыСуммаСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкидкаНаТоварПриИзменении(Элемент)
	
	ТоварыСкидкаНаТоварПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСкидкаНаТоварПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Выписка.ТоварыСкидкаНаТоварПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиПриИзменении(Элемент)

	ТоварыПроцентСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПроцентСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	

	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Выписка.ТоварыПроцентСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПроцентСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Выписка.ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Элемент)

	ТоварыПроцентСкидкиСтрокиПриИзмененииНаСервере();
	
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)
	
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// Обработчик события кнопки "ПробитьЧек"
//
&НаКлиенте
Процедура ПробитьЧек(Команда)
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
		
	// Вызываем общий обработчик события
	УправлениеДиалогомДокументаКлиент.ПробитьЧек(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события кнопки "УправлениеККМ"
&НаКлиенте
Процедура УправлениеККМ(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ФР", Объект.ФР);
	
	ОткрытьФорму(
		"ОбщаяФорма.УправлениеФискальнымУстройством",
		ПараметрыФормы,
		ЭтотОбъект
	);

КонецПроцедуры //УправлениеККМ()

// Обработчик события нажатия кнопки "Подбор номенклатуры".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	// Вызываем общий обработчик события
	УправлениеДиалогомКлиент.ОткрытьПодборНоменклатуры(ЭтотОбъект);
	
КонецПроцедуры // ПодборНоменклатуры()

&НаКлиенте
Процедура ПерезаполнитьТовары(Команда)
	
	ПараметрыДействия = Новый Структура;
	
	ПерезаполнитьТоварыНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьТоварыНаСервере(ПараметрыДействия = Неопределено)
	
	Объект.Товары.Очистить();
	
	Если РедактироватьТовары И Объект.ДляПробитияНаФР Тогда
		
		Объект.Товары.Загрузить(УправлениеДиалогомДокументаСервер.ПодготовитьТаблицуТоваров(Объект, Ложь));
		ЗащищенныеФункцииСервер.ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект.Товары);
		ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(ЭтотОбъект, , , Объект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОплаты(Команда)
	
	ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ПодборОплаты");
	
	Если Элементы.СуммаДокументаПриход.Доступность Тогда
		ЭтоПриход = Истина;
		СуммаКОплате = Объект.СуммаДокументаПриход;
	Иначе
		ЭтоПриход = Ложь;
		СуммаКОплате = Объект.СуммаДокументаРасход;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из Объект.Состав Цикл
		
		Если ТекущаяСтрока.СпособЗачетаАвансов =
				ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.ПоДокументу") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоПриход Тогда
			СуммаСтроки = ТекущаяСтрока.СуммаПриход;
		Иначе
			СуммаСтроки = ТекущаяСтрока.СуммаРасход;
		КонецЕсли;
		СуммаКОплате = СуммаКОплате - СуммаСтроки;
		
	КонецЦикла;
	
	ПараметрыПодбора = Новый Структура();
	ПараметрыПодбора.Вставить("Период", Объект.Дата);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("ДоговорВзаиморасчетов", Объект.ДоговорВзаиморасчетов);
	ПараметрыПодбора.Вставить("РасчетыСПокупателем", Элементы.СуммаДокументаПриход.Доступность);
	ПараметрыПодбора.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("КурсДокумента", Объект.КурсДокумента);
	ПараметрыПодбора.Вставить("КурсВалютыВзаиморасчетов", 0);
	ПараметрыПодбора.Вставить("ЗачтенныеОплаты", Объект.Состав);
	ПараметрыПодбора.Вставить("ИмяСделкиОплаты", "Сделка");
	ПараметрыПодбора.Вставить("СуммаДокумента", СуммаКОплате);
	
	ОткрытьФорму(
		"ОбщаяФорма.ПодборОплаты",
		ПараметрыПодбора,
		ЭтотОбъект,,,,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПризнакАвтомобиляОтФизЛица()
	
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		ТекущаяСтрока.ИндикаторСебестоимостиАвтомобиля = БиблиотекаКартинок.Информация;
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура НастроитьСписокВыбораКодВидаДохода()
	
	СписокВыбора = Элементы.СоставКодВидаДохода.СписокВыбора;
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить("", НСтр("ru = 'не производится (это не доход физ.лица)'"));
	
	СписокВыбора.Добавить("1",
		НСтр("ru = '1 - разрешено, с ограничением по сумме'"));
	СписокВыбора.Добавить("2",
		НСтр("ru = '2 - запрещено'"));
	СписокВыбора.Добавить("3",
		НСтр("ru = '3 - разрешено без ограничений п. 2'"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоСтрокаБанковскойВыписки(ХозОперация)
	
	Возврат ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.СтрокаБанковскойВыписки")
		ИЛИ ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ПоступлениеВОперационнуюКассу")
		ИЛИ ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.РасходИзОперационнойКассы");
	
КонецФункции

&НаСервереБезКонтекста
Функция ВозможноВзысканиеСПеречисленияФизлицу(Знач Дата, Контрагент)
	
	Дата = ?(Дата = '00010101', ТекущаяДатаСеанса(), Дата);
	
	Результат = Ложь;
	
	Результат =
		Не Контрагент.Пустая()
		И Контрагент.ФормаСобственности = ПредопределенноеЗначение("Перечисление.ФормыСобственности.ЧастноеЛицо");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
 
	// Вызываем общий обработчик действия
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформление(ЭтотОбъект);
	
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеГТД(ЭтотОбъект);
	
	// Просмотр сумм
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоставСуммаРасход.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоставПлатежноеПоручениеОснование.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Состав.ВидДвижения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыДвижений.Приход;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоставСуммаПриход.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Состав.ВидДвижения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыДвижений.Расход;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоставПроцентКомиссии.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоставСуммаУслуг.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Состав.СтатьяДДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.СтатьиДДС.ОплатаБанковскихУслуг;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Условное оформление для выделения автомобиля, купленного у физлица
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыИндикаторСебестоимостиАвтомобиля");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СебестоимостьАвтомобиля");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	Если НЕ ЭтоСтрокаБанковскойВыписки(Объект.ХозОперация) Тогда
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СоставКодВидаДохода");
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Состав.ФормаСобственности");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.ФормыСобственности.ЧастноеЛицо");
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	КонецЕсли;
	
	// При установки способа расчетов с контрагентом
	Если РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(Объект.ВерсияОбъекта) Тогда
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СоставСделка");
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СоставЗаказ");
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Состав.СпособЗачетаАвансов");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыЗачетаАвансов.Автоматически;
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Состав.СпособВеденияВзаимозачетов");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СоставСделка");
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Состав.СпособЗачетаАвансов");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Состав.СпособВеденияВзаимозачетов");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'На аванс'"));
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ВидДвиженияРасход(Ссылка)
	
	Возврат Ссылка.ВидДвижения = Перечисления.ВидыДвижений.Расход;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_РедактироватьТоварыЗавершение(ОтветНаВопрос, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОчиститьТЧ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ОчиститьТЧ", Ложь);
	Если ОчиститьТЧ И НЕ ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		РедактироватьТовары = Истина;
		Возврат;
	КонецЕсли;
	
	РедактироватьТоварыПриИзмененииНаСервере();
	
КонецПроцедуры // Подключаемый_РедактироватьТоварыЗавершение()

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЗаполнениеОбъектов
&НаКлиенте
Процедура ПослеОбработкиЗаполнения(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ПослеОбработкиЗаполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиЗаполненияНаСервере()
	
	ЗаполнениеОбъектовАльфаАвто.ПослеОбработкиЗаполнения(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ЗаполнениеОбъектов

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
//@skip-warning
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
    ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСуммаДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.ПоказатьРасширенныеИтогиОперации(ЭтотОбъект, Элемент);
	
КонецПроцедуры
// Конец Ядро

// СчетаФактуры
&НаКлиенте
Процедура НадписьВзаиморасчетыНажатие(Элемент)
	
	УправлениеДиалогомДокументаКлиент.НадписьВзаиморасчетыНажатие(ЭтотОбъект);
	
КонецПроцедуры
// Конец СчетаФактуры

&НаКлиенте
Процедура БанковскийСчетРасширеннаяПодсказкаНажатие(Элемент)
	
	УправлениеДиалогомДокументаКлиент.НадписьДенежныеСредстваНажатие(ЭтотОбъект, "БанковскийСчет");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// Вызываем общий обработчик события настройки параметров выбора
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ПоступлениеВОперационнуюКассу Тогда
		
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.СтатьяДДС.ПараметрыВыбора,
			"Отбор.ВидДвижения", Перечисления.ВидыДвижений.Приход);
		
	ИначеЕсли Объект.ХозОперация = Справочники.ХозОперации.РасходИзОперационнойКассы Тогда
		
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.СтатьяДДС.ПараметрыВыбора,
			"Отбор.ВидДвижения", Перечисления.ВидыДвижений.Расход);
		
	Иначе
		
		Элементы.СтатьяДДС.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив());
		
	КонецЕсли;
	
	Если Объект.ХозОперация = Справочники.ХозОперации.БанковскаяВыписка И Объект.Товары.Количество() > 0 Тогда
		Объект.Товары.Очистить();
		РедактироватьТовары = Ложь;
	Конецесли;
	
	// Исключены "Передачи" так как это денежный документ, а не товарный,
	// и передачу товара этими документами не подразумеваем.
	СпособыРасчета = Новый Массив;
	СпособыРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.Аванс);
	СпособыРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная);
	СпособыРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная);
	СпособыРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.ОплатаКредита);
	УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.ПризнакСпособаРасчета.ПараметрыВыбора,
		"Отбор.Ссылка", СпособыРасчета);
	
	// Ограничим выбор вида операции чека.
	ВидыОперации = Новый Массив;
	ВидыОперации.Добавить(Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств);
	ВидыОперации.Добавить(Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств);
	ВидыОперации.Добавить(Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств);
	ВидыОперации.Добавить(Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств);
	УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.ТипРасчета.ПараметрыВыбора, "Отбор.Ссылка", ВидыОперации);
	
КонецПроцедуры // НастроитьПараметрыВыбораЭлементовФормы()

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	// Вызываем общий обработчик действия
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	Элементы.СтраницаПлатеж.Видимость = НЕ (Объект.ХозОперация = Справочники.ХозОперации.БанковскаяВыписка);
	
	ЭтоСтрокаБанковскойВыписки = ЭтоСтрокаБанковскойВыписки(Объект.ХозОперация); 
	ЭтоПеремещениеНаСчет = Объект.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПереводНаДругойСчетОрганизации ИЛИ
	   Объект.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПереводСДругогоСчетаОрганизации;
	ЭтоПеремещениеВКассу = Объект.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВзносНаличнымиИзКассы ИЛИ
	   Объект.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.СнятиеНаличныхВКассу;
	ЭтоПеремещение = ЭтоПеремещениеНаСчет ИЛИ ЭтоПеремещениеВКассу;  
	   
	Элементы.Контрагент.Видимость = НЕ ЭтоПеремещение;
	Элементы.ДоговорВзаиморасчетов.Видимость = Не ЭтоПеремещение; 
	
	Элементы.БанковскийСчетКонтрагента.Видимость = ЭтоПеремещениеНаСчет;
	Элементы.БанковскийСчетКонтрагента.Заголовок = ?(
		ЭтоПеремещениеНаСчет И Объект.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ПереводНаДругойСчетОрганизации,
		НСтр("ru = 'Счет получатель'"),
		НСтр("ru = 'Счет отправитель'")
	);

	
	Элементы.Касса.Видимость = ЭтоПеремещениеВКассу;  

	Элементы.ГруппаРеквизитыВедомости.Видимость = Объект.СтатьяДДС = Справочники.СтатьиДДС.ВыдачаЗП;
	Элементы.ПлатежноеПоручениеОснование.Видимость = ЭтоСтрокаБанковскойВыписки;
	Элементы.СоставСтатьяДДС.Видимость = НЕ ЭтоСтрокаБанковскойВыписки;
	Элементы.СоставКонтрагент.Видимость = НЕ ЭтоСтрокаБанковскойВыписки;
	Элементы.СоставДоговорВзаиморасчетов.Видимость = НЕ ЭтоСтрокаБанковскойВыписки;
	Элементы.СоставСтавкаНДС.Видимость = НЕ ЭтоСтрокаБанковскойВыписки;
	Элементы.СоставНазначениеПлатежа.Видимость = НЕ ЭтоСтрокаБанковскойВыписки;
	Элементы.СоставПлатежноеПоручениеОснование.Видимость = НЕ ЭтоСтрокаБанковскойВыписки;
	Элементы.ОписаниеВходящегоДокумента.Видимость = ЭтоСтрокаБанковскойВыписки;
	Элементы.СоставНомерВходящегоДокумента.Видимость = НЕ ЭтоСтрокаБанковскойВыписки;
	Элементы.СоставДатаВходящегоДокумента.Видимость = НЕ ЭтоСтрокаБанковскойВыписки;
	
	Элементы.СоставСделка.Видимость = Не ЭтоПеремещение;
	Элементы.СоставСпособЗачетаАвансов.Видимость = Не ЭтоПеремещение;

	Элементы.СуммаДокументаПриход.Доступность = Ложь;
	Элементы.СуммаДокументаРасход.Доступность = Ложь;
	Элементы.СуммаУслуг.Доступность = ?(Объект.СтатьяДДС = Справочники.СтатьиДДС.ОплатаБанковскихУслуг, Ложь, Истина);
	Если ЗначениеЗаполнено(Объект.СтатьяДДС) Тогда
		Если Объект.СтатьяДДС.ВидДвижения = Перечисления.ВидыДвижений.Приход Тогда
			Элементы.СуммаДокументаПриход.Доступность = Истина;
		ИначеЕсли Объект.СтатьяДДС.ВидДвижения = Перечисления.ВидыДвижений.Расход Тогда
			Элементы.СуммаДокументаРасход.Доступность = Истина;
		ИначеЕсли Объект.СтатьяДДС.ВидДвижения = Перечисления.ВидыДвижений.Прочее Тогда
			Элементы.СуммаДокументаПриход.Доступность = Истина;
			Элементы.СуммаДокументаРасход.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Установим доступность полей ввода фискальных данных
	Элементы.ФискальныеРеквизиты.Видимость = (Объект.ХозОперация = Справочники.ХозОперации.СтрокаБанковскойВыписки И НЕ ЭтоПеремещение ИЛИ
		Объект.ХозОперация = Справочники.ХозОперации.ПоступлениеВОперационнуюКассу ИЛИ
		Объект.ХозОперация = Справочники.ХозОперации.РасходИзОперационнойКассы);
	Элементы.СтраницаТовары.Видимость = Элементы.ФискальныеРеквизиты.Видимость;
	Если Элементы.ФискальныеРеквизиты.Видимость Тогда
		Элементы.ФискальныеРеквизитыПараметры.Доступность = Объект.ДляПробитияНаФР;
		Элементы.ФормаПробитьЧек.Доступность = НЕ ЗначениеЗаполнено(Объект.ДатаФР) И НЕ ТолькоПросмотр;
		Элементы.СтраницаТовары.Видимость = Объект.Товары.Количество() > 0 И Объект.ДляПробитияНаФР И РедактироватьТовары;
		Элементы.РедактироватьТовары.Доступность = Объект.ДляПробитияНаФР;
		ВыделениеМежценовойРазницыОтдельнойСтрокой = ПраваИНастройкиПользователя.Значение("ВыделениеМежценовойРазницыОтдельнойСтрокой", Объект);
		Элементы.ТоварыСебестоимостьАвтомобиля.Видимость = ВыделениеМежценовойРазницыОтдельнойСтрокой;
		ЗаполнитьПризнакАвтомобиляОтФизЛица();
	Иначе
		Элементы.ФормаПробитьЧек.Доступность = Ложь;
		Элементы.СтраницаТовары.Видимость = Ложь;
	КонецЕсли;
	
	Если ЭтоСтрокаБанковскойВыписки Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"СоставКодВидаДохода",
			"Видимость",
			ВозможноВзысканиеСПеречисленияФизлицу(Объект.Дата, Объект.Контрагент)
		);
	Иначе
		ДатаДокумента = ?(Объект.Дата = "1,1,1,0,0,0", ТекущаяДатаСеанса(), Объект.Дата);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"СоставКодВидаДохода",
			"Видимость",
			ОбменСБанкамиКлиентСервер.ДействуетУказаниеБанкаРоссии5286У(ДатаДокумента)
		);
 	КонецЕсли;
	
	УправлениеДиалогомДокументаСервер.УстановитьИнформациюПечатиЧека(
		ЭтотОбъект,
		Объект.ФР,
		Объект.ТелефонEmailПокупателя,
		НЕ ЗначениеЗаполнено(Объект.ДатаФР) И Объект.ДляПробитияНаФР
	);
	
	СпособВеденияВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Объект.ДоговорВзаиморасчетов,
		"СпособВеденияВзаиморасчетов");
	ПоРасчетнымДокументам = СпособВеденияВзаиморасчетов = Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам;
	УчитывастьСпособОплаты = РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(Объект.ВерсияОбъекта);
	Элементы.СоставСпособЗачетаАвансов.СписокВыбора.ЗагрузитьЗначения(
		Справочники.ДоговорыВзаиморасчетов.ДоступныеВидыЗачетаАвансаДляУчета(СпособВеденияВзаиморасчетов));
	Элементы.СоставЗаказ.Видимость = ПоРасчетнымДокументам И УчитывастьСпособОплаты;
	Элементы.СоставСпособЗачетаАвансов.Видимость = Не ПоРасчетнымДокументам ИЛИ УчитывастьСпособОплаты;
	Элементы.СоставСделка.Заголовок = ?(ПоРасчетнымДокументам, НСтр("ru = 'Документ расчетов'"), НСтр("ru = 'Сделка'"));
	Элементы.СоставПодборОплаты.Видимость = ПоРасчетнымДокументам И УчитывастьСпособОплаты;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры = Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, 
												РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, 
											ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, 
												РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры 

#КонецОбласти

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	                                                                                                                
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура Подключаемый_ШтрихкодированиеОбработкаОповещения(РезультатОповещения,
	ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если РезультатОповещения.Свойство("Действие") Тогда
		ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры)

	ШтрихкодированиеВызовСервера.ОбработкаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры, , Объект);

КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(ОбновлятьКИ = Истина)
	
	Документы.ЧекНаОплату.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, ОбновлятьКИ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеРевизитыСостава()
	
	Для Каждого ТекущаяСтрока Из Объект.Состав Цикл
		ТекущаяСтрока.ВидДвижения = ТекущаяСтрока.СтатьяДДС.ВидДвижения;
		ТекущаяСтрока.ФормаСобственности = ТекущаяСтрока.Контрагент.ФормаСобственности;
		ТекущаяСтрока.СпособВеденияВзаимозачетов = ТекущаяСтрока.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокТиповСделок(ДоговорВзаиморасчетов, ВерсияОбъекта)
	
	Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(
			ДоговорВзаиморасчетов)
		И РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ВерсияОбъекта) Тогда
		ТипыДляРасчетныхДокументов = РасчетыСКонтрагентамиСервер.ДоступныеТипыДокументовРасчета();
		ТипыСделок = Новый СписокЗначений();
		ТипыСделок.ЗагрузитьЗначения(ТипыДляРасчетныхДокументов.Типы());
		ТипыСделок.СортироватьПоЗначению(НаправлениеСортировки.Возр);
		Возврат ТипыСделок;
	КонецЕсли;
	Возврат УправлениеДиалогомДокументаСервер.СписокТиповСделок();
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокТиповЗаказов()
	
	Возврат УправлениеДиалогомДокументаСервер.СписокТиповЗаказов();
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыборТипаСделки(ВыбранныйТипСделки, ПолеВызова) Экспорт
	
	Если ВыбранныйТипСделки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбораДокумента = ПараметрыДляВыбораСделки(ВыбранныйТипСделки.Значение);
	
	ПараметрыВыбораСделки = Новый Структура();
	ПараметрыВыбораСделки.Вставить(
		"Отбор",
		ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыбораДокумента.ПараметрыВыбора));
	ПараметрыВыбораСделки.Вставить("РежимВыбора", Истина);
	ПараметрыВыбораСделки.Вставить("УстановитьОтборыКонтрагентовИДоговоровДляВыбораСделки", Истина);
	
	ОткрытьФорму(
		ПараметрыВыбораДокумента.ИмяФормыВыбора,
		ПараметрыВыбораСделки,
		ПолеВызова);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыДляВыбораСделки(ТипСделки)
	
	Возврат УправлениеДиалогомДокументаСервер.ПараметрыДляВыбораСделки(Объект, ТипСделки);
	
КонецФункции

#КонецОбласти