// Модуль документа "Переоценка"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполненНаОснованииДокумента = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ВыполненоЗаполнениеНаОсновании", "");
	Если НЕ (ЗаполненНаОснованииДокумента = "ПеремещениеТоваров" 
		ИЛИ ЗаполненНаОснованииДокумента = "ПоступлениеТоваров" 
		ИЛИ ЗаполненНаОснованииДокумента = "РеализацияТоваров"
		ИЛИ ЗаполненНаОснованииДокумента = "Инвентаризация"
		ИЛИ ЗаполненНаОснованииДокумента = "ПересортицаТоваров")
		И (ТипЗнч(ДанныеЗаполнения) <> Тип("СправочникСсылка.Контрагенты")) Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Ссылка") И ТипЗнч(ДанныеЗаполнения.Ссылка) = Тип("ДокументСсылка.ИзменениеЦен") Тогда
			ОбработкаЗаполнения_ИзменениеЦен(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ИзменениеЦен") Тогда 
			ОбработкаЗаполнения_ИзменениеЦен(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
		Иначе
			ВыполнитьОбщиеДействияПриЗаполнении(ДанныеЗаполнения);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Очистим неиспользуемые реквизиты
	Если ХозОперация = Справочники.ХозОперации.ПереоценкаТоваровВРознице Тогда
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	ИначеЕсли ХозОперация = Справочники.ХозОперации.ПереоценкаТоваровОтданныхНаКомиссию Тогда
		СкладКомпании = Справочники.СкладыКомпании.ПустаяСсылка();
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ПроверитьКорректностьТоваровКомиссионныхДокументов(ЭтотОбъект, Отказ);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Документы.Переоценка.ПересчитатьСтроку(ЭтотОбъект);
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПартиямПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// переоценим остатки
	Если ХозОперация=Справочники.ХозОперации.ПереоценкаТоваровВРознице Тогда
		Запрос=Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ДокументТовары.Количество*ДокументТовары.Коэффициент КАК Количество,
		|	ДокументТовары.Цена КАК ЦенаРозничная,
		|	0 КАК Резерв
		|ИЗ
		|	Документ.Переоценка.Товары КАК ДокументТовары
		|ГДЕ
		|	  ДокументТовары.Ссылка=&Ссылка
		|");
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		РезультатЗапросаПоТоварам=Запрос.Выполнить();
		НаборЗаписейОстатки=Движения.ОстаткиТоваровКомпании;
		НаборЗаписейОстатки.РежимПроведения=РежимПроведения;
		НаборЗаписейОстатки.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейОстатки.РезультатЗапросаПоТоварам=РезультатЗапросаПоТоварам;
		НаборЗаписейОстатки.СкладКомпании=СкладКомпании;
		Отказ=НЕ НаборЗаписейОстатки.Переоценка(ХозОперация,Истина,Ложь) ИЛИ Отказ;
	КонецЕсли;
	
	// партии
	Если ХозОперация=Справочники.ХозОперации.ПереоценкаТоваровОтданныхНаКомиссию ИЛИ ХозОперация=Справочники.ХозОперации.ПереоценкаТоваровПринятыхНаКомиссию Тогда
		Отказ=НЕ ПровестиПоПартиям(РежимПроведения,Ссылка) ИЛИ Отказ;
	КонецЕсли;
	
	// установим изменившиеся цены
	Если НЕ Отказ И ХозОперация=Справочники.ХозОперации.ПереоценкаТоваровВРознице И НЕ СкладКомпании.ТипЦенРозничнойТорговли.Рассчитывается Тогда
		НаборЗаписейЦены=Движения.Цены;
		НаборЗаписейЦены.ДокументОбъект        = ЭтотОбъект;
		НаборЗаписейЦены.Контрагент            = Неопределено;
		НаборЗаписейЦены.ИмяРеквизитаЦена      = "Цена";
		НаборЗаписейЦены.ТипЦен                = СкладКомпании.ТипЦенРозничнойТорговли;
		НаборЗаписейЦены.ПодразделениеКомпании = СкладКомпании.ПодразделениеКомпании;
		Отказ = НЕ НаборЗаписейЦены.УстановитьЦены() ИЛИ Отказ;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Процедура выполняет общие действия при заполнении на основании всех документов
//
// Параметры: 
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//
Процедура ВыполнитьОбщиеДействияПриЗаполнении(ДанныеЗаполнения,
	ИмяДокументаОснования = "",
	ТипЦенЗаполнения = Неопределено)
	                                                                 
	Если ХозОперация = Справочники.ХозОперации.ПереоценкаТоваровВРознице Тогда
		Если (СкладКомпании<>Неопределено) И (СкладКомпании.Розничный) И ТипЦенЗаполнения = Неопределено Тогда
			
			ТипЦен = СкладКомпании.ТипЦенРозничнойТорговли;
			ВалютаДокумента = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен, Неопределено);
			СтруктураКурса  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			КурсДокумента   = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
			
		Иначе
			СкладКомпании = Справочники.СкладыКомпании.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	УсловияОтбора = "";
	
	// заполним ТЧ
	Если ХозОперация = Справочники.ХозОперации.ПереоценкаТоваровОтданныхНаКомиссию Тогда
		ИмяРегистра		= "ПартииТоваровОтданные"; 
		ИмяРесурса		= "СуммаОстаток";
		УсловияОтбора	= "Контрагент=&Контрагент И Номенклатура В (&Номенклатура) И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры) И ДоговорВзаиморасчетов=&ДоговорВзаиморасчетов";
		
	ИначеЕсли ХозОперация = Справочники.ХозОперации.ПереоценкаТоваровПринятыхНаКомиссию Тогда
		
		ИмяРегистра		= "ПартииТоваровКомпании"; 
		ИмяРесурса		= "СуммаОстаток";
		УсловияОтбора	= "СкладКомпании=&СкладКомпании И Номенклатура В (&Номенклатура) И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры) И СтатусПартии=&СтатусПартии И Партия.ДоговорВзаиморасчетов=&ДоговорВзаиморасчетов И Партия.Контрагент=&Контрагент";
		
	Иначе
		
		ИмяРегистра		= "ОстаткиТоваровКомпании"; 
		ИмяРесурса		= "СуммаРознОстаток";
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
			
			УсловияОтбора			= "Номенклатура В (&Номенклатура) И СкладКомпании=&СкладКомпании И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)";
			
			МетаданныеОснования 	= ДанныеЗаполнения.Метаданные();
			МетаданныеТаблицы 		= МетаданныеОснования.ТабличныеЧасти.Найти("Товары");
			
			Если НЕ МетаданныеТаблицы = Неопределено Тогда
				
				ИмяРеквизитаЦены = Неопределено;
				
				Если НЕ МетаданныеТаблицы.Реквизиты.Найти("ЦенаРозничная") = Неопределено Тогда
					ИмяРеквизитаЦены = "ЦенаРозничная";
				ИначеЕсли НЕ МетаданныеТаблицы.Реквизиты.Найти("Цена") = Неопределено Тогда
					ИмяРеквизитаЦены = "Цена";
				КонецЕсли;
				
				Если НЕ ИмяРеквизитаЦены = Неопределено Тогда
					
					Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
										|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
					|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
					|	ТаблицаТоваров."+ИмяРеквизитаЦены+" КАК Цена,
					|	ТаблицаТоваров.НомерСтроки
					|ПОМЕСТИТЬ ТаблицаТоваров
					|ИЗ
					|	&ТаблицаТоваров КАК ТаблицаТоваров " +?(НЕ ИмяДокументаОснования = "ИзменениеЦен", " Где ТаблицаТоваров.Количество > 0 ", "
					|	ГДЕ
					|	ТаблицаТоваров.ТипЦен = &ТипЦен") + "
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
					|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
					|	МАКСИМУМ(ТаблицаТоваров.Цена) КАК Цена,
					|	ТаблицаТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
					|	ТаблицаТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент КАК Коэффициент,
					|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
					|	МАКСИМУМ(1) КАК Количество
					|ИЗ
					|	ТаблицаТоваров КАК ТаблицаТоваров 
					|
					|СГРУППИРОВАТЬ ПО
					|	ТаблицаТоваров.Номенклатура,
					|	ТаблицаТоваров.ХарактеристикаНоменклатуры,
					|	ТаблицаТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения,
					|	ТаблицаТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент,
					|	ТаблицаТоваров.НомерСтроки
					|
					|УПОРЯДОЧИТЬ ПО
					|	НомерСтроки");
					
					Запрос.УстановитьПараметр("ТаблицаТоваров", ДанныеЗаполнения.Товары);
					Запрос.УстановитьПараметр("ТипЦен", ТипЦенЗаполнения);
					Товары.Загрузить(Запрос.Выполнить().Выгрузить());
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			УсловияОтбора = "СкладКомпании=&СкладКомпании";
			
		КонецЕсли;
		
	КонецЕсли;

	// Для заполнения на основании инвентаризации нужны только те строки, в которых количество изменилось.
	// Поэтому сделаем соединение с ТЧ основания.
	Если ИмяДокументаОснования = "Инвентаризация" Тогда
		
		СтрокаВложЗапроса1 = " (ВЫБРАТЬ
		|	Осн.Номенклатура КАК Номенклатура,
		|	Осн.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|ИЗ
		|	Документ.Инвентаризация.Товары КАК Осн
		|ГДЕ
		|	Осн.Ссылка = &ДокОснование
		|	И Осн.Количество <> 0) КАК ВложенныйЗапрос
		|ЛЕВОЕ СОЕДИНЕНИЕ ";
		
		СтрокаВложЗапроса2 = " ПО ВложенныйЗапрос.Номенклатура = Рег.Номенклатура
		|	И ВложенныйЗапрос.ХарактеристикаНоменклатуры = Рег.ХарактеристикаНоменклатуры ";
		
	Иначе 
		
		СтрокаВложЗапроса1 = "";
		СтрокаВложЗапроса2 = "";
		
	КонецЕсли;

	МоментОстатков	= ?(ЗначениеЗаполнено(ДанныеЗаполнения),Новый МоментВремени(КонецДня(ТекущаяДатаСеанса())),Новый МоментВремени(КонецДня(Дата)));
	МоментВремени	= ?(ЗначениеЗаполнено(Ссылка),МоментВремени(),МоментОстатков);
	ВалютаИз 		= Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КурсИз   		= 1;
	
	Запрос			= Новый Запрос;
	Запрос.Текст 	= " ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Рег.Номенклатура КАК Номенклатура,
	|	Рег.ХарактеристикаНоменклатуры,
	|	"+?(ХозОперация=Справочники.ХозОперации.ПереоценкаТоваровОтданныхНаКомиссию,"Рег.ДокументПередачи КАК ДокументПередачи,","")+"
	|	"+?(ХозОперация=Справочники.ХозОперации.ПереоценкаТоваровПринятыхНаКомиссию,"Рег.Партия КАК ДокументПередачи,","")+"
	|	Рег.КоличествоОстаток КАК Количество,
	|	ВЫБОР КОГДА Рег.КоличествоОстаток=0 ИЛИ Рег.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ (Рег."+ИмяРесурса+" / Рег.КоличествоОстаток)КОНЕЦ КАК ЦенаСтарая
	|ИЗ " + СтрокаВложЗапроса1 + "
	|	РегистрНакопления."+ИмяРегистра+".Остатки(&МоментВремени, "+УсловияОтбора+") КАК Рег " +СтрокаВложЗапроса2;
	
	Запрос.УстановитьПараметр("МоментВремени",			МоментВремени);
	Запрос.УстановитьПараметр("СкладКомпании", 			СкладКомпании);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", 	ДоговорВзаиморасчетов);
	Запрос.УстановитьПараметр("Контрагент", 			Контрагент);
	Запрос.УстановитьПараметр("СтатусПартии", 			Перечисления.СтатусыПартий.ТоварПринятыйКомиссия);
	Запрос.УстановитьПараметр("ДокОснование", 			ДанныеЗаполнения);
	
	// У пересортицы по две колонки номенклатуры и характеристики номенклатуры - приход и расход.
	Если ИмяДокументаОснования = "Пересортица" Тогда
		
		// Выгрузим колонки номенклатуры прихода и расхода в один массив
		МассивНоменклатуры 		= ДанныеЗаполнения.Товары.ВыгрузитьКолонку("Номенклатура");
		Буфер1 					= ДанныеЗаполнения.Товары.ВыгрузитьКолонку("НоменклатураПриход");
		// Выгрузим колонки характеристики прихода и расхода в один массив
		МассивХарактеристик 	= ДанныеЗаполнения.Товары.ВыгрузитьКолонку("ХарактеристикаНоменклатуры");
		Буфер2 					= ДанныеЗаполнения.Товары.ВыгрузитьКолонку("ХарактеристикаНоменклатурыПриход");
		
		Для Сч = 0 По Буфер1.ВГраница() Цикл
			
			МассивНоменклатуры.Добавить(Буфер1[Сч]);
			МассивХарактеристик.Добавить(Буфер2[Сч]);
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Номенклатура",				МассивНоменклатуры);
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",	МассивХарактеристик);	
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		
		Если ИмяДокументаОснования = "ИзменениеЦен" Тогда
			ТаблицаТоваров = ДанныеЗаполнения.Товары.Выгрузить();
			ТаблицаТоваров.Свернуть("Номенклатура,ХарактеристикаНоменклатуры");
			Запрос.УстановитьПараметр("Номенклатура",				ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура"));
			Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",	ТаблицаТоваров.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
			МассивНоменклатуры = Новый Массив;
			МассивХарактеристик = Новый Массив;
			
			Для Каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл 
				Если ТекСтрока.Количество > 0 Тогда
					МассивНоменклатуры.Добавить(ТекСтрока.Номенклатура);
					МассивХарактеристик.Добавить(ТекСтрока.ХарактеристикаНоменклатуры);
				КонецЕсли;
			КонецЦикла;
			
			Запрос.УстановитьПараметр("Номенклатура",				МассивНоменклатуры);
			Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",	МассивХарактеристик);
		Иначе
			Запрос.УстановитьПараметр("Номенклатура",				ДанныеЗаполнения.Товары.ВыгрузитьКолонку("Номенклатура"));
			Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",	ДанныеЗаполнения.Товары.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
		КонецЕсли;
		
	Иначе
		
		ПустойМассив 			= Новый Массив;
		Запрос.УстановитьПараметр("Номенклатура",				ПустойМассив);	
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",	ПустойМассив);
		
	КонецЕсли;
	
	СтруктураОтбора 	= Новый Структура;
	Выборка 			= Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора.Вставить("Номенклатура", 				Выборка.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", 	Выборка.ХарактеристикаНоменклатуры);
		
		Если НЕ ХозОперация = Справочники.ХозОперации.ПереоценкаТоваровВРознице Тогда
			СтруктураОтбора.Вставить("ДокументПередачи", Выборка.ДокументПередачи);
		КонецЕсли;
		
		НайденныеСтроки = Товары.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			НоваяСтрока 							= Товары.Добавить();
			НоваяСтрока.Номенклатура               	= Выборка.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры 	= Выборка.ХарактеристикаНоменклатуры;
			
			Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				НоваяСтрока.ЕдиницаИзмерения       	= НоваяСтрока.Номенклатура.ОсновнаяЕдиницаИзмерения;
			КонецЕсли;
			
			НоваяСтрока.Коэффициент = 1;
			
		Иначе
			
			НоваяСтрока = НайденныеСтроки[0];
			
		КонецЕсли;
		
		НоваяСтрока.Количество 	= Выборка.Количество / НоваяСтрока.Коэффициент;
		
		Если НоваяСтрока.Цена = 0 И ХозОперация = Справочники.ХозОперации.ПереоценкаТоваровВРознице Тогда
			НоваяСтрока.Цена 	= ЦенообразованиеСервер.ПолучитьЦену(ТипЦен, НоваяСтрока.Номенклатура, МоментВремени(),, ВалютаДокумента, КурсДокумента, НоваяСтрока.ХарактеристикаНоменклатуры, НоваяСтрока.ЕдиницаИзмерения, ПодразделениеКомпании) * НоваяСтрока.Коэффициент;
		КонецЕсли;
		
		Если НЕ ХозОперация = Справочники.ХозОперации.ПереоценкаТоваровВРознице Тогда
			НоваяСтрока.ДокументПередачи = Выборка.ДокументПередачи;
		КонецЕсли;
		
		НоваяСтрока.ЦенаСтарая 	= РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Выборка.ЦенаСтарая, ВалютаИз, КурсИз, ВалютаДокумента, КурсДокумента) * НоваяСтрока.Коэффициент;
		
		Если НоваяСтрока.Цена = 0 Тогда
			НоваяСтрока.Цена 	= НоваяСтрока.ЦенаСтарая;
		КонецЕсли;
		
		НоваяСтрока.Сумма = (НоваяСтрока.Цена - НоваяСтрока.ЦенаСтарая) * НоваяСтрока.Количество;
		
	КонецЦикла;
	
КонецПроцедуры

// Производит заполнение объекта на основании документа "Перемещение товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПеремещениеТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если (ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваров)
		ИЛИ (ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровИзФилиала) Тогда 
		// Для перемещения товаров сделаем переоценку на складе - получателе товара.
		// Исключение - перемещение товаров в филиал, там переоценку сделаем на складе - отправителе.
		СкладКомпании = ДанныеЗаполнения.СкладПолучатель;
		ПодразделениеКомпании = ДанныеЗаполнения.СкладПолучатель.ПодразделениеКомпании;
	КонецЕсли;
	
	ВыполнитьОбщиеДействияПриЗаполнении(ДанныеЗаполнения);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПеремещениеТоваров()

// Производит заполнение объекта на основании документа "Поступление товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия Тогда
		// установим соответствующие хоз. операции для случая комиссии
		ХозОперация = Справочники.ХозОперации.ПереоценкаТоваровПринятыхНаКомиссию;
	КонецЕсли;
	
	Товары.Очистить();
	
	ВыполнитьОбщиеДействияПриЗаполнении(ДанныеЗаполнения);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеТоваров()

// Производит заполнение объекта на основании документа "Реализация товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РеализацияТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.РеализацияТоваровКомиссия Тогда
		ХозОперация = Справочники.ХозОперации.ПереоценкаТоваровОтданныхНаКомиссию;
	КонецЕсли;
	
	Товары.Очистить();
	
	ВыполнитьОбщиеДействияПриЗаполнении(ДанныеЗаполнения);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РеализацияТоваров()

// Производит заполнение объекта на основании документа "Инвентаризация"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Инвентаризация(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,
		 ТекстЗаполнения, СтандартнаяОбработка) Тогда
		 Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию Тогда
		ХозОперация = Справочники.ХозОперации.ПереоценкаТоваровОтданныхНаКомиссию;
	КонецЕсли;
	
	Товары.Очистить();
	
	ВыполнитьОбщиеДействияПриЗаполнении(ДанныеЗаполнения,НСтр("ru='Инвентаризация'"));
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Инвентаризация()

// Производит заполнение объекта на основании документа "Пересортица товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПересортицаТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВыполнитьОбщиеДействияПриЗаполнении(ДанныеЗаполнения, НСтр("ru='Пересортица'"));
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПересортицаТоваров()

// Производит заполнение объекта на основании документа "Изменение цен"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ИзменениеЦен(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения.Ссылка, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ТипЦен") Тогда
		ТипЦенЗаполнения = ДанныеЗаполнения.ТипЦен;
		ТипЦен = ТипЦенЗаполнения;
	Иначе
		ТипЦенЗаполнения = ?(ДанныеЗаполнения.Ссылка.ПараметрыРасчета.Количество() > 0,
			ДанныеЗаполнения.Ссылка.ПараметрыРасчета[0].ТипЦен, Неопределено);
	КонецЕсли;
	Товары.Очистить();
	ВыполнитьОбщиеДействияПриЗаполнении(ДанныеЗаполнения.Ссылка, НСтр("ru='ИзменениеЦен'"), ТипЦенЗаполнения);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ИзменениеЦен()

// Производит заполнение объекта на основании справочника "Контрагенты"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Контрагенты(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Заполняем специфические для данной операции реквизиты
	ХозОперация = Справочники.ХозОперации.ПереоценкаТоваровПринятыхНаКомиссию;
	Документы.Переоценка.ХозОперацияПриИзменении(ЭтотОбъект);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Контрагенты()

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// возвращает выборку по шапке
//
// Параметры:
//  ДокументСсылка - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Выборка - выборка по шапке
//
Функция ПолучитьШапкуДокумента(ДокументСсылка)
	Запрос=Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ТипЦен КАК ТипЦен,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Док.Проект КАК Проект,
	|	Док.Организация КАК Организация,
	/////////// ПРИВАТ ////////////
	|	Док.СкладКомпании КАК СкладКомпании,
	|	Док.Контрагент КАК Контрагент,
	|	Док.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов
	|
	|ИЗ
	|	Документ."+Метаданные().Имя+" КАК Док
	|ГДЕ
	|	Док.Ссылка=&Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции // ПолучитьШапкуДокумента()

// формирует движения документа по партионным регистрам
//
// Параметры:
//  Режим           - режим проведения (оперативный/неоперативный)
//  ДокументСсылка  - ссылка на документ который надо допровести по партиям.
//
// Возвращаемое значение:
//  Возвращает Истина - все ОК, ложь - чего-то не так.
//
Функция ПровестиПоПартиям(Режим,ДокументСсылка) Экспорт
	Отказ=Ложь;
	
	// получим шапку документа
	ШапкаДокумента=ПолучитьШапкуДокумента(ДокументСсылка);
	
	// Проверим, если подразделение проводится по партиям "отложено", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям=Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
		Возврат НЕ Отказ;
	КонецЕсли;
	
	// переоцениваем регистр "ПартииТоваровОтданные"
	ИмяРегистраПартии = ?(ХозОперация = Справочники.ХозОперации.ПереоценкаТоваровОтданныхНаКомиссию, "ПартииТоваровОтданные", "ПартииТоваровКомпании");
	НаборЗаписейПартииТоваров=Движения[ИмяРегистраПартии];
	НаборЗаписейПартииТоваров.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейПартииТоваров.ШапкаДокумента=ШапкаДокумента;
	Если ИмяРегистраПартии = "ПартииТоваровКомпании" Тогда
		НаборЗаписейПартииТоваров.Организация = ШапкаДокумента.Организация;
	КонецЕсли;
	Если ХозОперация=Справочники.ХозОперации.ПереоценкаТоваровПринятыхНаКомиссию Тогда
		НаборЗаписейПартииТоваров.СкладКомпании=ШапкаДокумента.СкладКомпании;
	КонецЕсли;
	НаборЗаписейПартииТоваров.Сторно=Ложь;
	НаборЗаписейПартииТоваров.РезультатЗапросаПоТоварам=Неопределено;
	Отказ = НЕ НаборЗаписейПартииТоваров.Переоценка() ИЛИ Отказ;
	
	// если идет допроведение, то надо получить те значения которые были раньше
	Если Режим<>РежимПроведенияДокумента.Оперативный И Ссылка<>ДокументСсылка Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ СкладКомпании ИЗ РегистрНакопления.ПартииТоваровКомпании ГДЕ Регистратор=&Ссылка");
		Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
		Результат = Запрос.Выполнить(); СкладКомпанииБыл=Неопределено;
		Если НЕ Результат.Пустой() Тогда
			СкладКомпанииБыл = Результат.Выгрузить().ВыгрузитьКолонку("СкладКомпании");
		КонецЕсли;
		ДополнительныеСвойства.Вставить("СкладКомпанииБыл",СкладКомпанииБыл);
		ДополнительныеСвойства.МоментВремениБыл = ДокументСсылка.МоментВремени();
	КонецЕсли;
	
	// двигаем границу последовательности партий
	Если ХозОперация<>Справочники.ХозОперации.ПереоценкаТоваровОтданныхНаКомиссию Тогда
		Если Ссылка <> ДокументСсылка Тогда
			
			РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
			РаботаСГраницами.ДвиженияПоПартиямПередПроведением(ДокументСсылка, ДополнительныеСвойства);
			
		КонецЕсли;
		
		РаботаСГраницами.СдвинутьГраницуПартий(ДокументСсылка, ДополнительныеСвойства, Движения);
		
	КонецЕсли;
	
	Возврат НЕ Отказ;
КонецФункции // ПровестиПоПартиям()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
