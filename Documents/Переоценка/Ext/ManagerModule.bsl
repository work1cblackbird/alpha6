// Модуль менеджера документа "Переоценка"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.Переоценка);

КонецФункции

#КонецОбласти 

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. 
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Товары.Итог("Сумма"));
		
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Пересчитывает количество, старую цену и старую сумму.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется пересчет.
//  Строка - строка табличной части, если не определена, то пересчитывается вся табличная часть.
//
Процедура ПересчитатьСтроку(Объект, Строка = Неопределено) Экспорт
	
	// посмотрим пересчитываем строку или всю табл. часть
	ВсюТабличнуюЧасть = (Строка = Неопределено);
	
	ВалютаИз          = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	// формируем условия расчета
	Если Объект.ХозОперация = Справочники.ХозОперации.ПереоценкаТоваровОтданныхНаКомиссию Тогда
		
		ИмяРегистра		= "ПартииТоваровОтданные"; 
		ИмяРесурса		= "СуммаОстаток";
		УсловияОтбора	= "Контрагент=&Контрагент И Номенклатура В (&Номенклатура) И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры) И ДоговорВзаиморасчетов=&ДоговорВзаиморасчетов";
		
	ИначеЕсли Объект.ХозОперация = Справочники.ХозОперации.ПереоценкаТоваровПринятыхНаКомиссию Тогда
		
		ИмяРегистра		= "ПартииТоваровКомпании"; 
		ИмяРесурса		= "СуммаОстаток";
		УсловияОтбора	= "СкладКомпании=&СкладКомпании И Номенклатура В (&Номенклатура) И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры) И СтатусПартии=&СтатусПартии И Партия.ДоговорВзаиморасчетов=&ДоговорВзаиморасчетов И Партия.Контрагент=&Контрагент";
		
	Иначе	
		
		ИмяРегистра		= "ОстаткиТоваровКомпании"; 
		ИмяРесурса		= "СуммаРознОстаток";
		УсловияОтбора	= "Номенклатура В (&Номенклатура) И СкладКомпании=&СкладКомпании И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)";
		
	КонецЕсли;
	
	МоментОстатков  = ?(ЗначениеЗаполнено(Объект.ДокументОснование),Новый МоментВремени(КонецДня(ТекущаяДатаСеанса())),Новый МоментВремени(КонецДня(Объект.Дата)));
	МоментВремени   = ?(ЗначениеЗаполнено(Объект.Ссылка), Новый МоментВремени(Объект.Дата),МоментОстатков);
	ВалютаИз		= Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КурсИз			= 1;
	
	Товары = Объект.Товары.Выгрузить();
	
	Запрос			= Новый Запрос;
	Запрос.Текст	= " ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Рег.Номенклатура,
	|	Рег.ХарактеристикаНоменклатуры,
	|	"+?(Объект.ХозОперация = Справочники.ХозОперации.ПереоценкаТоваровОтданныхНаКомиссию,"Рег.ДокументПередачи КАК ДокументПередачи,","")+"
	|	"+?(Объект.ХозОперация = Справочники.ХозОперации.ПереоценкаТоваровПринятыхНаКомиссию,"Рег.Партия КАК ДокументПередачи,","")+"
	|	Рег.КоличествоОстаток КАК Количество,
	|	ВЫБОР КОГДА Рег.КоличествоОстаток=0 ИЛИ Рег.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ (Рег."+ИмяРесурса+" / Рег.КоличествоОстаток)КОНЕЦ КАК ЦенаСтарая
	|ИЗ
	|	РегистрНакопления."+ИмяРегистра+".Остатки(&МоментВремени, "+УсловияОтбора+") КАК Рег";
	
	Запрос.УстановитьПараметр("МоментВремени",				МоментВремени);
	Запрос.УстановитьПараметр("Номенклатура",				?(ВсюТабличнуюЧасть, Товары.ВыгрузитьКолонку("Номенклатура"),Строка.Номенклатура));
	Запрос.УстановитьПараметр("СкладКомпании", 				Объект.СкладКомпании);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", 		Объект.ДоговорВзаиморасчетов);
	Запрос.УстановитьПараметр("Контрагент", 				Объект.Контрагент);
	Запрос.УстановитьПараметр("СтатусПартии", 				Перечисления.СтатусыПартий.ТоварПринятыйКомиссия);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",	?(ВсюТабличнуюЧасть, Товары.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"),Строка.ХарактеристикаНоменклатуры));
	
	Результат	= Запрос.Выполнить();
		
	// Выгружаем результат запроса в таблицу значений
	ТЗ			= Результат.Выгрузить();
	
	// Если это вся табличная часть - то перебор всей табличной части.
	Если Строка = Неопределено Тогда
		
		СтруктураОтбора = Новый Структура();
		
		Для Каждого ТекСтрокаТЧ Из Объект.Товары Цикл
			
			СтруктураОтбора.Вставить("Номенклатура", 				ТекСтрокаТЧ.Номенклатура);
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", 	ТекСтрокаТЧ.ХарактеристикаНоменклатуры);
			
			Если НЕ Объект.ХозОперация = Справочники.ХозОперации.ПереоценкаТоваровВРознице Тогда
				СтруктураОтбора.Вставить("ДокументПередачи", ТекСтрокаТЧ.ДокументПередачи);
			КонецЕсли;
			
			МассивНайденныхСтрок	= ТЗ.НайтиСтроки(СтруктураОтбора);
			ТекСтрокаТЧ.Количество	= ?(МассивНайденныхСтрок.Количество() = 0,0,МассивНайденныхСтрок[0].Количество) / ?(ТекСтрокаТЧ.Коэффициент = 0, 1, ТекСтрокаТЧ.Коэффициент);
			ТекСтрокаТЧ.ЦенаСтарая	= ?(МассивНайденныхСтрок.Количество() = 0,0,МассивНайденныхСтрок[0].ЦенаСтарая);
			ТекСтрокаТЧ.ЦенаСтарая	= РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТекСтрокаТЧ.ЦенаСтарая,ВалютаИз,КурсИз,Объект.ВалютаДокумента,Объект.КурсДокумента) * ТекСтрокаТЧ.Коэффициент;
			
			Если ТекСтрокаТЧ.Цена = 0 Тогда 
				ТекСтрокаТЧ.Цена = ТекСтрокаТЧ.ЦенаСтарая; 
			КонецЕсли;
			
			ТекСтрокаТЧ.Сумма = (ТекСтрокаТЧ.Цена - ТекСтрокаТЧ.ЦенаСтарая) * ТекСтрокаТЧ.Количество;
			
			Если ТЗ.Колонки.Найти("ДокументПередачи")<>Неопределено Тогда
				ТекСтрокаТЧ.ДокументПередачи = ?(МассивНайденныхСтрок.Количество() = 0,Неопределено,МассивНайденныхСтрок[0].ДокументПередачи);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе 
		
		// установка по текущей строке
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", 				Строка.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", 	Строка.ХарактеристикаНоменклатуры);
		
		Если НЕ Объект.ХозОперация = Справочники.ХозОперации.ПереоценкаТоваровВРознице Тогда
			СтруктураОтбора.Вставить("ДокументПередачи", Строка.ДокументПередачи);
		КонецЕсли;
		
		МассивНайденныхСтрок	= ТЗ.НайтиСтроки(СтруктураОтбора);
		Строка.Количество	= ?(МассивНайденныхСтрок.Количество() = 0,0,МассивНайденныхСтрок[0].Количество) / ?(Строка.Коэффициент = 0, 1, Строка.Коэффициент);
		Строка.ЦенаСтарая	= ?(МассивНайденныхСтрок.Количество() = 0,0,МассивНайденныхСтрок[0].ЦенаСтарая);
		Строка.ЦенаСтарая	= РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Строка.ЦенаСтарая,ВалютаИз,КурсИз,Объект.ВалютаДокумента,Объект.КурсДокумента) * Строка.Коэффициент;
		
		Если Строка.Цена = 0 Тогда 
			Строка.Цена = Строка.ЦенаСтарая; 
		КонецЕсли;
		
		Строка.Сумма = (Строка.Цена-Строка.ЦенаСтарая)*Строка.Количество;
		
		Если НЕ ЗначениеЗаполнено(Строка.ДокументПередачи) Тогда
			Возврат;
		КонецЕсли;
		
		Если ТЗ.Колонки.Найти("ДокументПередачи")<>Неопределено Тогда
			Строка.ДокументПередачи = ?(МассивНайденныхСтрок.Количество()=0,Неопределено,МассивНайденныхСтрок[0].ДокументПередачи);
		КонецЕсли;
		
		Если МассивНайденныхСтрок.Количество() = 0 Тогда
			
			ОписаниеОшибки = НСтр("ru = 'Выбраный документ не подходит по отбору'");
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = ОписаниеОшибки;
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьСтроку()

// Возвращает перечень нередактируемых реквизитов при открытии общей формы "Параметры документа".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение неотображаемых реквизитов.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.

Функция ПолучитьНеотображаемыеРеквизиты(Объект) Экспорт
	
	НеотображаемыеРеквизиты = Новый Массив;
	НеотображаемыеРеквизиты.Вставить("ТипЦен");
	
	Возврат НеотображаемыеРеквизиты;
	
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	Если Объект.ХозОперация <> Справочники.ХозОперации.ПереоценкаТоваровВРознице Тогда
		ОбязательныеРеквизиты.Добавить("Контрагент");
		ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	Иначе
		ОбязательныеРеквизиты.Добавить("СкладКомпании");
	КонецЕсли;

	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли; 
	
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	Если Объект.ХозОперация <> Справочники.ХозОперации.ПереоценкаТоваровВРознице Тогда
		ОбязательныеРеквизиты.Добавить("Товары.ДокументПередачи");
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;

КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары=Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	
	Если Объект.ХозОперация <> Справочники.ХозОперации.ПереоценкаТоваровВРознице Тогда
		УникальныеТовары.Добавить("ДокументПередачи");
	КонецЕсли;

	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти=Новый Структура();
	УникальныеТабличныеЧасти.Вставить("Товары",УникальныеТовары);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	Если Объект.ХозОперация <> Справочники.ХозОперации.ПереоценкаТоваровВРознице Тогда
		КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	Иначе	
		КонтролируемыеРеквизиты.Вставить("СкладКомпании", Ложь);
	КонецЕсли;	
	
	Если Объект.ХозОперация <> Справочники.ХозОперации.ПереоценкаТоваровВРознице Тогда
		КонтролируемыеРеквизитыТЧ = Новый Структура();
		КонтролируемыеРеквизитыТЧ.Вставить("ДокументПередачи", КонтрольПоПодразделению);
		КонтролируемыеРеквизиты.Вставить("Товары", КонтролируемыеРеквизитыТЧ);
	КонецЕсли;

	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
	// Проверка корректности значения реквизита "СкладКомпании"
	Если Не Объект.СкладКомпании.Пустая() И Объект.ХозОперация = Справочники.ХозОперации.ПереоценкаТоваровВРознице И Не Объект.СкладКомпании.Розничный Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выбранный склад: <%1> не является розничным. Переоценка товаров компании возможна только на розничном складе.'"),Объект.СкладКомпании);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,Объект.Ссылка);
		Объект.СкладКомпании = Справочники.СкладыКомпании.ПустаяСсылка();
		СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	// Проверка корректности значения реквизита "СкладКомпании"
	Если Не Объект.СкладКомпании.Пустая() И Объект.ХозОперация = Справочники.ХозОперации.ПереоценкаТоваровВРознице И Не Объект.СкладКомпании.Розничный Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выбранный склад: <%1> не является розничным. Переоценка товаров компании возможна только на розничном складе.'"),Объект.СкладКомпании);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,Объект.Ссылка);
		Объект.СкладКомпании = Справочники.СкладыКомпании.ПустаяСсылка();
		СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
	Если Объект.СкладКомпании.Розничный И Объект.ХозОперация = Справочники.ХозОперации.ПереоценкаТоваровВРознице Тогда
		Объект.ВалютаДокумента 	= РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(Объект.ТипЦен, Неопределено);
		СтруктураКурса  		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсДокумента 	= СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	КонецЕсли;
	
	Если Объект.Товары.Количество()>0 И НЕ Объект.СкладКомпании.Пустая() Тогда
		ПересчитатьСтроку(Объект);
	КонецЕсли;
		
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьСтроку(Объект, Строка);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ПересчитатьСтроку(Объект, Строка);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ПересчитатьСтроку(Объект, Строка);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка,  ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ПересчитатьСтроку(Объект, Строка);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ПересчитатьСтроку(Объект, Строка);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Документ передачи" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыДокументПередачиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Выполним пересчет показателей строки
	Если ЗначениеЗаполнено(Строка.ДокументПередачи) Тогда
		ПересчитатьСтроку(Объект, Строка);
	КонецЕсли;
	
КонецПроцедуры // ТоварыДокументПередачиПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Товары");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "Переоценка");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Товары");
	КонецЕсли;

	ВыборСклада 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборСклада.ВыборСсылки 		= "Справочник.СкладыКомпании.ФормаСписка";
	ВыборСклада.Обязательный 		= Истина;
	ВыборСклада.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать склад компании.'");
	
	Отбор 							= Новый Структура("Организация,ПодразделениеКомпании", "Организация", "ПодразделениеКомпании");
	ВыборСклада.Параметры			= Новый Структура("РежимВыбора,Отбор", Истина, Отбор); 
	
	ВыборДоговора 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборДоговора.ВыборСсылки 		= "Справочник.ДоговорыВзаиморасчетов.ФормаСписка";
	ВыборДоговора.Обязательный 		= Истина;
	ВыборДоговора.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать договор взаиморасчетов.'");
	
	Отбор = Новый Структура("Организация,ПодразделениеКомпании,ХозОперация", "Организация", 
			"ПодразделениеКомпании", "ХозОперация");	
	ВыборДоговора.Параметры			= Новый Структура("РежимВыбора,Отбор", Истина, Отбор); 
	
	Команда 						= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление			= НСтр("ru = 'Заполнить остатками по складу по комиссии'");
	Команда.Идентификатор			= "ТоварыЗаполнитьСкладскимиОстаткамиПоКомиссии";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", 			ВыборСклада);
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ДоговорВзаиморасчетов", 	ВыборДоговора);
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ХозОперация",	
		Справочники.ХозОперации.ПереоценкаТоваровВРознице, ВидСравненияКомпоновкиДанных.НеРавно);
	//
	Команда 						= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление			= НСтр("ru = 'Заполнить остатками по складу по рознице'");
	Команда.Идентификатор			= "ТоварыЗаполнитьСкладскимиОстаткамиПоРознице";
	Команда.Порядок					= 51;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", ВыборСклада);
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ХозОперация",	Справочники.ХозОперации.ПереоценкаТоваровВРознице);
	//
	Команда 						= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление			= НСтр("ru = 'Заполнить не переоцененными товарами'");
	Команда.Идентификатор			= "ТоварыЗаполнитьНеПереоцененными";
	Команда.Порядок					= 52;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", ВыборСклада);
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ХозОперация",	Справочники.ХозОперации.ПереоценкаТоваровВРознице);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстаткамиПоКомиссии.Видимость",   Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстаткамиПоКомиссии.Доступность", (Объект.ХозОперация = Справочники.ХозОперации.ПереоценкаТоваровОтданныхНаКомиссию) ИЛИ (Объект.ХозОперация = Справочники.ХозОперации.ПереоценкаТоваровПринятыхНаКомиссию));
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстаткамиПоРознице.Видимость",    Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстаткамиПоРознице.Доступность",  (Объект.ХозОперация=Справочники.ХозОперации.ПереоценкаТоваровВРознице));
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьНеПереоцененными.Видимость",                Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьНеПереоцененными.Доступность",              (Объект.ХозОперация = Справочники.ХозОперации.ПереоценкаТоваровВРознице));
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по остаткам отданных или принятых на комиссию
//
Функция ТоварыЗаполнитьСкладскимиОстаткамиПоКомиссии(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.ХозОперация = Справочники.ХозОперации.ПереоценкаТоваровОтданныхНаКомиссию И НЕ Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании Тогда
		Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании;
		СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.ДоговорВзаиморасчетов = ПараметрыЗаполнения.ДоговорВзаиморасчетов Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = ПараметрыЗаполнения.ДоговорВзаиморасчетов.Владелец;
			КонтрагентПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
		Объект.ДоговорВзаиморасчетов = ПараметрыЗаполнения.ДоговорВзаиморасчетов;
		ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	НаКомиссиюОтданный = (Объект.ХозОперация=Справочники.ХозОперации.ПереоценкаТоваровОтданныхНаКомиссию);
	
	Запрос=Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартииТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
	|	ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПартииТоваровКомпанииОстатки.Партия КАК ДокументПередачи,
	|	ЕСТЬNULL(ПартииТоваровКомпанииОстатки.КоличествоОстаток,0) КАК Количество
	|ИЗ
	|	РегистрНакопления.ПартииТоваровКомпании.Остатки(&Момент,СтатусПартии=&СтатусПартии И Партия.Контрагент=&Контрагент И Партия.ДоговорВзаиморасчетов=&ДоговорВзаиморасчетов) КАК ПартииТоваровКомпанииОстатки
	|
	|ГДЕ
	|	ПартииТоваровКомпанииОстатки.Партия Ссылка Документ.ПоступлениеТоваров
	|");
	
	МоментВремени=?(Ссылка.Пустая(),Новый МоментВремени(КонецДня(Объект.Дата)), Новый МоментВремени(Объект.Дата));
	Запрос.УстановитьПараметр("Момент",                МоментВремени);
	Запрос.УстановитьПараметр("Контрагент",            Объект.Контрагент);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", Объект.ДоговорВзаиморасчетов);
	Запрос.УстановитьПараметр("СтатусПартии",          Перечисления.СтатусыПартий.ТоварПринятыйКомиссия);
	
	Если НаКомиссиюОтданный Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПартииТоваровКомпании", "ПартииТоваровОтданные");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СтатусПартии=&СтатусПартии И ", "");
	КонецЕсли;
	
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		ТоварыНоменклатураПриИзменении(Объект, СтрокаТЧ, ПараметрыДействия);
	КонецЦикла;
	
	ПересчитатьСтроку(Объект, Неопределено);
	
КонецФункции // ТоварыЗаполнитьСкладскимиОстаткамиПоКомиссии()

// Обработчик заполнения документа по остаткам товаров
//
Функция ТоварыЗаполнитьСкладскимиОстаткамиПоРознице(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.СкладКомпании=ПараметрыЗаполнения.СкладКомпании Тогда
		Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании;
		СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Запрос=Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ОстаткиТоваровКомпанииОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(&Момент, СкладКомпании=&СкладКомпании) КАК ОстаткиТоваровКомпанииОстатки");
	
	МоментВремени=?(Ссылка.Пустая(),Новый МоментВремени(КонецДня(Объект.Дата)), Новый МоментВремени(Объект.Дата));
	Запрос.УстановитьПараметр("Момент",МоментВремени);
	Запрос.УстановитьПараметр("СкладКомпании", Объект.СкладКомпании);
	
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		ТоварыНоменклатураПриИзменении(Объект, СтрокаТЧ, ПараметрыДействия);
	КонецЦикла;
	
	ПересчитатьСтроку(Объект, Неопределено);
	
КонецФункции // ТоварыЗаполнитьСкладскимиОстаткамиПоРознице()

// Обработчик заполнения документа не переоцененными товарами
//
Функция ТоварыЗаполнитьНеПереоцененными(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.СкладКомпании=ПараметрыЗаполнения.СкладКомпании Тогда
		Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании;
		СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Если Объект.СкладКомпании.Розничный Тогда
		
		// запрос
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
		|	ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ОстаткиТоваровКомпанииОстатки.КоличествоОстаток КАК Количество,
		|	ВЫБОР КОГДА ОстаткиТоваровКомпанииОстатки.КоличествоОстаток = 0 ТОГДА
		|		0
		|	ИНАЧЕ
		|		ВЫРАЗИТЬ(ОстаткиТоваровКомпанииОстатки.СуммаРознОстаток/ОстаткиТоваровКомпанииОстатки.КоличествоОстаток КАК ЧИСЛО(15,2))
		|	КОНЕЦ КАК ЦенаСтарая, 
		|   0 КАК Цена,
		|   ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,
		|	1 КАК Коэффициент
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(&Момент,СкладКомпании=&СкладКомпании) КАК ОстаткиТоваровКомпанииОстатки
		|";
		
		Запрос.УстановитьПараметр("СкладКомпании", Объект.СкладКомпании);
		Запрос.УстановитьПараметр("Момент",        Новый МоментВремени(Объект.Дата));			
		
		ВременнаяТЗ = Запрос.Выполнить().Выгрузить();

		Для Каждого СтрокаТЗ Из ВременнаяТЗ Цикл
			// Расчет цены.
			СтрокаТЗ.ЕдиницаИзмерения = СтрокаТЗ.Номенклатура.ОсновнаяЕдиницаИзмерения;
			СтрокаТЗ.Цена             = ЦенообразованиеСервер.ПолучитьЦену(Объект.СкладКомпании.ТипЦенРозничнойТорговли, СтрокаТЗ.Номенклатура, Новый МоментВремени(Объект.Дата),, Объект.ВалютаДокумента, Объект.КурсДокумента, СтрокаТЗ.ХарактеристикаНоменклатуры, СтрокаТЗ.ЕдиницаИзмерения, Объект.СкладКомпании.ПодразделениеКомпании);
			Если (СтрокаТЗ.Цена<>0) И (СтрокаТЗ.Цена = СтрокаТЗ.ЦенаСтарая) Тогда
				НоваяСтрокаТЧ = Объект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЗ);
				ТоварыЦенаПриИзменении(Объект, НоваяСтрокаТЧ, ПараметрыДействия);
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не указан розничный склад.'"), Ссылка);
	КонецЕсли;

КонецФункции // ТоварыЗаполнитьНеПереоцененными()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.Переоценка",
		"ПФ_MXL_Переоценка",
		НСтр("ru = 'Переоценка'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Ценники",
		НСтр("ru = 'Печать ценников'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати",
		,,,,
		Ложь);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Этикетки",
		НСтр("ru = 'Печать этикеток'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати",
		,,,,
		Ложь);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Переоценка") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_Переоценка",
															"Переоценка",
															ПечатьПереоценка(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;	
	
КонецПроцедуры // Печать()

// Формирует печатную форму "Переоценка"
//
Функция ПечатьПереоценка(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Переоценка_Переоценка";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Переоценка.ПФ_MXL_Переоценка");
		
		// Форматы вывода
		ОбластьШапкаТаблицы    = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// Вывод заголовка документа.
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ, "Переоценка");
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ПредставлениеСклада	= УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			Документ.СкладКомпании);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Готовим шапку
		НомерСтраницы = 2; НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,Сумма", Документ.ВалютаДокумента, 0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// Готовим области строки
		ВыборкаТабличнойЧасти = Документ.Товары;
		СуммаВсего	= 0; 
		Для каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			// Заполняем данные строки.
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ);
			СтруктураСтроки.Вставить("СуммаВсего", Формат(СтрокаТЧ.Сумма, ФорматВыводаСуммы));
			СтруктураСтроки.Вставить("ЦенаСтарая", Формат(СтрокаТЧ.ЦенаСтарая, ФорматВыводаСуммы));
			СтруктураСтроки.Цена = Формат(СтрокаТЧ.Цена, ФорматВыводаСуммы);
			ПроцентНаценки = ?(СтрокаТЧ.ЦенаСтарая = 0, 0, 100 * (СтрокаТЧ.Цена - СтрокаТЧ.ЦенаСтарая) / СтрокаТЧ.ЦенаСтарая);
			СтруктураСтроки.Вставить("ПроцентНаценки", Формат(ПроцентНаценки, "ЧЦ=6; ЧДЦ=2"));
			
			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			
			// Доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,Сумма", Документ.ВалютаДокумента, 0);
				НомерСтраницыПред   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// Итоги
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("Сумма");
		ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'") + Символы.НПП
			+ ВыборкаТабличнойЧасти.Количество() + Символы.НПП + НСтр("ru = 'на сумму'") + Символы.НПП
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, Документ.ВалютаДокумента);
		
		// Выводим представления и расшифровки подписей.
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "МОЛ"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции //ПечатьПереоценка()

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//	Адрес   - адрес структуры данных во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПереоценкаТовары.Номенклатура   КАК Номенклатура,
	|	ПереоценкаТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ПереоценкаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|
	|	МИНИМУМ(ПереоценкаТовары.НомерСтроки) КАК Порядок,
	|	СУММА(
	|		ВЫБОР КОГДА ПереоценкаТовары.Ссылка.СкладКомпании.Розничный = ИСТИНА ТОГДА
	|			ПереоценкаТовары.Количество * (ЕСТЬNULL(ПереоценкаТовары.ЕдиницаИзмерения.Коэффициент, 1) / ЕСТЬNULL(Цены.ЕдиницаИзмерения.Коэффициент, 1))
	|		ИНАЧЕ
	|			ПереоценкаТовары.Количество
	|		КОНЕЦ) КАК Количество,
	|	МАКСИМУМ(ПереоценкаТовары.Цена) КАК Цена
	|ИЗ
	|	Документ.Переоценка.Товары КАК ПереоценкаТовары
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Цены.СрезПоследних КАК Цены
	|		ПО Цены.Номенклатура   = ПереоценкаТовары.Номенклатура
	|		 И Цены.ХарактеристикаНоменклатуры = ПереоценкаТовары.ХарактеристикаНоменклатуры
	|		 И Цены.ТипЦен        = ПереоценкаТовары.Ссылка.СкладКомпании.ТипЦенРозничнойТорговли
	|	
	|ГДЕ
	|	ПереоценкаТовары.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПереоценкаТовары.Номенклатура,
	|	ПереоценкаТовары.ХарактеристикаНоменклатуры,
	|	ПереоценкаТовары.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Переоценка.Организация            КАК Организация,
	|	Переоценка.ПодразделениеКомпании  КАК ПодразделениеКомпании,
	|	Переоценка.СкладКомпании          КАК СкладКомпании,
	|	Переоценка.СкладКомпании.ТипЦенРозничнойТорговли КАК ТипЦены
	|ИЗ
	|	Документ.Переоценка КАК Переоценка
	|ГДЕ
	|	Переоценка.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов  = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций 			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивПодразделенийКомпании = УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ПодразделениеКомпании").ВыгрузитьКолонку(0);
	МассивСкладов    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "СкладКомпании").ВыгрузитьКолонку(0);
	МассивТиповЦен    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ТипЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьПодразделениеКомпании", ?(МассивПодразделенийКомпании.Количество() = 1, МассивПодразделенийКомпании[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьТипЦены",     ?(МассивТиповЦен.Количество() = 1,    МассивТиповЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЭтикеток");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("НеПересчитыватьЦены");
	СтруктураДействий.Вставить("ЦеныИзДокументаОснования");

	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	Товары.ЗаполнитьЗначения(СтруктураДействий.ЗаполнитьОрганизацию, "Организация");
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//	Адрес - адрес структуры данных во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЦенников(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПереоценкаТовары.Номенклатура КАК Номенклатура,
	|	ПереоценкаТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ПереоценкаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МИНИМУМ(ПереоценкаТовары.НомерСтроки) КАК Порядок,
	|	СУММА(ВЫБОР
	|			КОГДА ПереоценкаТовары.Ссылка.СкладКомпании.Розничный = ИСТИНА
	|				ТОГДА ПереоценкаТовары.Количество * (ЕСТЬNULL(ПереоценкаТовары.ЕдиницаИзмерения.Коэффициент, 1) / ЕСТЬNULL(Цены.ЕдиницаИзмерения.Коэффициент, 1))
	|			ИНАЧЕ ПереоценкаТовары.Количество
	|		КОНЕЦ) КАК Количество,
	|	МАКСИМУМ(ПереоценкаТовары.Цена) КАК Цена
	|ИЗ
	|	Документ.Переоценка.Товары КАК ПереоценкаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Цены.СрезПоследних КАК Цены
	|		ПО (Цены.Номенклатура = ПереоценкаТовары.Номенклатура)
	|			И (Цены.ХарактеристикаНоменклатуры = ПереоценкаТовары.ХарактеристикаНоменклатуры)
	|			И (Цены.ТипЦен = ПереоценкаТовары.Ссылка.СкладКомпании.ТипЦенРозничнойТорговли)
	|ГДЕ
	|	ПереоценкаТовары.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПереоценкаТовары.Номенклатура,
	|	ПереоценкаТовары.ХарактеристикаНоменклатуры,
	|	ПереоценкаТовары.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Переоценка.Организация КАК Организация,
	|	Переоценка.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Переоценка.СкладКомпании КАК СкладКомпании,
	|	Переоценка.СкладКомпании.ТипЦенРозничнойТорговли КАК ТипЦены
	|ИЗ
	|	Документ.Переоценка КАК Переоценка
	|ГДЕ
	|	Переоценка.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций 			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивПодразделенийКомпании = УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ПодразделениеКомпании").ВыгрузитьКолонку(0);
	МассивСкладов    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "СкладКомпании").ВыгрузитьКолонку(0);
	МассивТиповЦен    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ТипЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьПодразделениеКомпании", ?(МассивПодразделенийКомпании.Количество() = 1, МассивПодразделенийКомпании[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьВидЦены",     ?(МассивТиповЦен.Количество() = 1,    МассивТиповЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЦенников");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("НеПересчитыватьЦены");
	СтруктураДействий.Вставить("ЦеныИзДокументаОснования");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	Товары.ЗаполнитьЗначения(СтруктураДействий.ЗаполнитьОрганизацию, "Организация");
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли