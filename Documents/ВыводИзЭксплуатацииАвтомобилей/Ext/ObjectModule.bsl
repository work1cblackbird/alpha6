// Модуль объекта документа "Вывод из эксплуатации автомобилей"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ЭтотОбъект.Активы Цикл
		Документы.ВыводИзЭксплуатацииАвтомобилей.АктивыПрочийАктивПриИзменении(ЭтотОбъект, ТекСтрока, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
	КонецЦикла;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим корректность заполнения количества для активов c уникальными номерами
	ОбработкаТабличнойЧастиАктивы.ПроверитьКоличествоУникальныхНомеров(ЭтотОбъект, Отказ);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоОстаткамАвтомобилейПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоКомплектацииПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	СброситьВидАвтомобилей();
	
	// Произведем перерасчет итоговой суммы документа
	ОбработкаСобытийДокументаСервер.ПересчитатьСуммуДокументаПоСебестоимостиСписания(ЭтотОбъект, Отказ,,, ИСТИНА);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;

	РезультатЗапросаПоАктивам = ПолучитьРезультатЗапросаПоАктивам().Выгрузить().Скопировать();

	ПроверитьСоответствиеАктивовИАвтомобилей(РежимПроведения, Отказ);
	
	Если Отказ Тогда Возврат; КонецЕсли;
	
	// получим шапку документа
	ШапкаДокумента=ПолучитьШапкуДокумента(Ссылка);
	
	// 1) спишем из "Активов в эксплуатации"
	НаборЗаписейЭксплуатация = Движения.ПрочиеАктивыВЭксплуатации;
	НаборЗаписейЭксплуатация.ДокументОбъект            = ЭтотОбъект;
	НаборЗаписейЭксплуатация.ПодразделениеКомпании     = ПодразделениеОтгрузки;
	НаборЗаписейЭксплуатация.ЭтоВыбытие                = Истина;
	НаборЗаписейЭксплуатация.РезультатЗапросаПоАктивам = РезультатЗапросаПоАктивам;
	Отказ = НЕ НаборЗаписейЭксплуатация.Расход() ИЛИ Отказ;
	
	// 2) Проведем по ТестДрайву
	НаборЗаписейТестДрайв = Движения.АвтомобилиДляТестДрайва;
	НаборЗаписейТестДрайв.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейТестДрайв.ПодразделениеКомпании = ПодразделениеОтгрузки;
	НаборЗаписейТестДрайв.РезультатЗапросаПоАвтомобилям = РезультатЗапросаПоАктивам;
	Отказ = НЕ НаборЗаписейТестДрайв.Расход() ИЛИ Отказ;
	
	// 3) Проведем про остаткам авто и резервам
	ВернутьАвтомобилиНаСклад(Отказ);
	
	// 4) Изменим вид автомобилей
	Отказ = Отказ ИЛИ УстановитьВидАвтомобилей();
	
	// 5) запишем ДиР
	СуммаПоАктивам   = Движения.ПрочиеАктивыВЭксплуатации.Итог("БалансоваяСтоимостьУпр") - Движения.ПрочиеАктивыВЭксплуатации.Итог("СуммаАмортизацииУпр");
	СуммаПоДокументу = Движения.КомплектацияАвтомобилей.Итог("СуммаУпр") + Движения.ОстаткиАвтомобилей.Итог("СуммаУпр");
	
	СуммаРазница = СуммаПоДокументу - СуммаПоАктивам;
	
	Если Окр(УправлениеДиалогомСервер.ПолучитьМодульЧисла(СуммаРазница), 2, РежимОкругления.Окр15как20) >= 0.01 Тогда
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект			= ЭтотОбъект;
			НаборЗаписейДиР.ШапкаДокумента			= ШапкаДокумента;		
			НаборЗаписейДиР.СтатьяДоходовИРасходов	= Справочники.СтатьиДоходовИРасходов.СписаниеАктивов;
			НаборЗаписейДиР.ВУпрВалюте				= Истина;
			Если СуммаРазница > 0 Тогда
				НаборЗаписейДиР.Доход  = СуммаРазница;
			Иначе
				НаборЗаписейДиР.Расход  = СуммаРазница;
			КонецЕсли;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
	КонецЕсли;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	// двигаем границу последовательности автомобилей
	РаботаСГраницами.СдвинутьГраницуОстатковАвтомобилей(Ссылка, ДополнительныеСвойства, Движения);
	
	// двигаем границу последовательности комплектаций автомобилей
	РаботаСГраницами.СдвинутьГраницуКомплектации(Ссылка, ДополнительныеСвойства, Движения);
	
	// Произведем перерасчет итоговой суммы документа
	ОбработкаСобытийДокументаСервер.ПересчитатьСуммуДокументаПоСебестоимостиСписания(ЭтотОбъект, Отказ, "ПрочиеАктивыВЭксплуатации");
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// сформирует свой результат запроса по активам
//
// Возвращаемое значение:
//  Возвращает результат запроса.
//
Функция ПолучитьРезультатЗапросаПоАктивам()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	РеализацияАктивовАктивы.ПрочийАктив КАК Актив,
	               |	РеализацияАктивовАктивы.Сумма КАК Сумма,
	               |	РеализацияАктивовАктивы.Количество КАК Количество,
	               |	РеализацияАктивовАктивы.ВидАренды КАК ВидАренды
	               |ИЗ
	               |	Документ.ВыводИзЭксплуатацииАвтомобилей.Активы КАК РеализацияАктивовАктивы
	               |ГДЕ
	               |	РеализацияАктивовАктивы.Ссылка = &Ссылка";

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();
КонецФункции // ПолучитьРезультатЗапросаПоАктивам()

// возвращает выборку по шапке
//
// Параметры:
//  ДокументСсылка - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Выборка - выборка по шапке
//
Функция ПолучитьШапкуДокумента(ДокументСсылка)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Док.ДокументОснование КАК ДокументОснование,
	|	Док.ПодразделениеОтгрузки КАК ПодразделениеОтгрузки
	|ИЗ
	|	Документ."+Метаданные().Имя+" КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции // ПолучитьШапкуДокумента()

Функция ВернутьАвтомобилиНаСклад(Отказ)
	// Получим список документов двинувших регистр активов при поступлении указанных авто.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрочиеАктивыВЭксплуатации.Регистратор КАК ДокументДвижения
	|ПОМЕСТИТЬ ТаблРегистраторов
	|ИЗ
	|	РегистрНакопления.ПрочиеАктивыВЭксплуатации КАК ПрочиеАктивыВЭксплуатации
	|ГДЕ
	|	ПрочиеАктивыВЭксплуатации.ПрочийАктив В(&СписокПрочихАктив)
	|	И ПрочиеАктивыВЭксплуатации.Автомобиль В(&СписокАвтомобилей)
	|	И ПрочиеАктивыВЭксплуатации.Регистратор ССЫЛКА Документ.ВводВЭксплуатациюАвтомобилей
	|	И ПрочиеАктивыВЭксплуатации.ВидДвижения = &ВидДвижения
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрочиеАктивыВЭксплуатации.Регистратор
	|;
	|ВЫБРАТЬ
	|	ОстаткиАвтомобилей.Автомобиль КАК Автомобиль,
	|	ОстаткиАвтомобилей.Автомобиль.ГТД КАК ГТД,
	|	ОстаткиАвтомобилей.Сумма КАК Сумма,
	|	ОстаткиАвтомобилей.СуммаНДС КАК СуммаНДС,
	|	ОстаткиАвтомобилей.СуммаБезНДС КАК СуммаБезНДС,
	|	ОстаткиАвтомобилей.СуммаУпр КАК СуммаУпр,
	|	ОстаткиАвтомобилей.СуммаНДСУпр КАК СуммаНДСУпр,
	|	ОстаткиАвтомобилей.СуммаБезНДСУпр КАК СуммаБезНДСУпр,
	|	0 КАК СуммаПродажи,
	|	0 КАК СуммаПродажиУпр,
	|	NULL КАК Номенклатура,
	|	NULL КАК ХарактеристикаНоменклатуры,
	|	1 КАК Количество
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	|ГДЕ
	|	ОстаткиАвтомобилей.Регистратор В
	|			(ВЫБРАТЬ
	|				ТаблРегистраторов.ДокументДвижения
	|			ИЗ
	|				ТаблРегистраторов КАК ТаблРегистраторов)
	|	И ОстаткиАвтомобилей.Автомобиль В(&СписокАвтомобилей)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КомплектацияАвтомобилей.Автомобиль,
	|	КомплектацияАвтомобилей.ГТД,
	|	КомплектацияАвтомобилей.Сумма,
	|	КомплектацияАвтомобилей.СуммаНДС,
	|	КомплектацияАвтомобилей.СуммаБезНДС,
	|	КомплектацияАвтомобилей.СуммаУпр,
	|	КомплектацияАвтомобилей.СуммаНДСУпр,
	|	КомплектацияАвтомобилей.СуммаБезНДСУпр,
	|	КомплектацияАвтомобилей.СуммаПродажи КАК СуммаПродажи,
	|	КомплектацияАвтомобилей.СуммаПродажиУпр КАК СуммаПродажиУпр,
	|	КомплектацияАвтомобилей.Номенклатура,
	|	КомплектацияАвтомобилей.ХарактеристикаНоменклатуры,
	|	КомплектацияАвтомобилей.Количество
	|ИЗ
	|	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
	|ГДЕ
	|	КомплектацияАвтомобилей.Регистратор В
	|			(ВЫБРАТЬ
	|				ТаблРегистраторов.ДокументДвижения
	|			ИЗ
	|				ТаблРегистраторов КАК ТаблРегистраторов)
	|	И КомплектацияАвтомобилей.Автомобиль В(&СписокАвтомобилей)
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаУпр)
	|ПО
	|	Автомобиль";
	
	Запрос.УстановитьПараметр("СписокПрочихАктив", Активы.ВыгрузитьКолонку("ПрочийАктив"));
	Запрос.УстановитьПараметр("СписокАвтомобилей", Активы.ВыгрузитьКолонку("Автомобиль"));
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	ВыборкаАвтомобилей = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВалютаРегл=Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр=Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	Пока ВыборкаАвтомобилей.Следующий() Цикл
		ВыборкаДетальная = ВыборкаАвтомобилей.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		// получим сумму по документу
		СтруктураПоиска = Новый Структура("Автомобиль",ВыборкаАвтомобилей.Автомобиль);
		МассивНайденныхСумм = Активы.НайтиСтроки(СтруктураПоиска);
		Если МассивНайденныхСумм.Количество() > 0 Тогда
			СуммаВВалДок = МассивНайденныхСумм[0].Сумма;
		Иначе
			СуммаВВалДок = 0;
		КонецЕсли;
		
		Если ВалютаДокумента = ВалютаУпр Тогда
			СуммаВВалУпр  = СуммаВВалДок;
			СуммаВВалРегл = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаВВалДок,ВалютаДокумента,КурсДокумента,ВалютаРегл,Дата);
		ИначеЕсли ВалютаДокумента = ВалютаРегл Тогда
			СуммаВВалУпр  = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаВВалДок,ВалютаДокумента,КурсДокумента,ВалютаУпр,КурсВалютыУпр);
			СуммаВВалРегл = СуммаВВалДок;
		Иначе
			СуммаВВалУпр  = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаВВалДок,ВалютаДокумента,КурсДокумента,ВалютаУпр,КурсВалютыУпр);
			СуммаВВалРегл = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаВВалДок,ВалютаДокумента,КурсДокумента,ВалютаРегл,Дата);
		КонецЕсли;
		
		РасчетнаяУпр   = ВыборкаАвтомобилей.СуммаУпр;
		РасчетанаяРегл = ВыборкаАвтомобилей.Сумма;
		
		Если РасчетнаяУпр <> 0 Тогда
			ЦенаЗаЕдУпр = СуммаВВалУпр/РасчетнаяУпр;
		Иначе
			ЦенаЗаЕдУпр = 0;
		КонецЕсли;
		
		Если РасчетанаяРегл <> 0 Тогда
			ЦенаЗаЕдРегл = СуммаВВалРегл/РасчетанаяРегл;
		Иначе
			ЦенаЗаЕдРегл = 0;
		КонецЕсли;
		
		Если ЦенаЗаЕдУпр < 0.01 ИЛИ ЦенаЗаЕдРегл < 0.01 Тогда
			ЦенаЗаЕдУпр = 0;
			ЦенаЗаЕдРегл = 0;
		КонецЕсли;
		
		Пока ВыборкаДетальная.Следующий() Цикл
			// пройдемся и вернем опции
			Если НЕ ЗначениеЗаполнено(ВыборкаДетальная.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			// измерения
			НоваяЗапись = Движения.КомплектацияАвтомобилей.Добавить();
			НоваяЗапись.ВидДвижения                = ВидДвиженияНакопления.Приход;
			НоваяЗапись.СкладКомпании              = СкладКомпании;
			НоваяЗапись.Регистратор                = Ссылка;
			НоваяЗапись.Период                     = Дата;
			НоваяЗапись.Автомобиль                 = ВыборкаДетальная.Автомобиль;
			НоваяЗапись.Номенклатура               = ВыборкаДетальная.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры = ВыборкаДетальная.ХарактеристикаНоменклатуры;
			НоваяЗапись.СтатусПартии               = Перечисления.СтатусыПартий.ТоварКупленный;
			НоваяЗапись.Партия                     = Ссылка;
			НоваяЗапись.ГТД                        = ВыборкаДетальная.ГТД;
			
			//ресурсы
			НоваяЗапись.Количество                 = ВыборкаДетальная.Количество;
			НоваяЗапись.Сумма                      = ВыборкаДетальная.Сумма*ЦенаЗаЕдРегл;
			НоваяЗапись.СуммаНДС                   = ВыборкаДетальная.СуммаНДС*ЦенаЗаЕдРегл;;
			НоваяЗапись.СуммаБезНДС                = ВыборкаДетальная.СуммаБезНДС*ЦенаЗаЕдРегл;;
			НоваяЗапись.СуммаУпр                   = ВыборкаДетальная.СуммаУпр*ЦенаЗаЕдУпр;
			НоваяЗапись.СуммаНДСУпр                = ВыборкаДетальная.СуммаНДСУпр*ЦенаЗаЕдУпр;
			НоваяЗапись.СуммаБезНДСУпр             = ВыборкаДетальная.СуммаБезНДСУпр*ЦенаЗаЕдУпр;
			НоваяЗапись.СуммаПродажи               = ВыборкаДетальная.СуммаПродажи;
			НоваяЗапись.СуммаПродажиУпр            = ВыборкаДетальная.СуммаПродажиУпр;
			
			// реквизиты
			//НоваяЗапись.СтавкаНДС                  = Справочники.СтавкиНДС.БезНДС;
			НоваяЗапись.ХозОперация                = ХозОперация;
			
			СуммаВВалРегл = СуммаВВалРегл - НоваяЗапись.Сумма;
			СуммаВВалУпр  = СуммаВВалУпр - НоваяЗапись.СуммаУпр;
		КонецЦикла;
		
		ВыборкаДетальная.Сбросить();
		Пока ВыборкаДетальная.Следующий() Цикл
			// оприходуем авто
			Если ЗначениеЗаполнено(ВыборкаДетальная.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяЗапись = Движения.ОстаткиАвтомобилей.Добавить();
			
			// измерения
			НоваяЗапись.ВидДвижения   = ВидДвиженияНакопления.Приход;
			НоваяЗапись.Регистратор   = Ссылка;
			НоваяЗапись.Период        = Дата;
			НоваяЗапись.Автомобиль    = ВыборкаДетальная.Автомобиль;
			НоваяЗапись.СкладКомпании = СкладКомпании;
			НоваяЗапись.СтатусПартии  = Перечисления.СтатусыПартий.ТоварКупленный;
			НоваяЗапись.Партия        = Ссылка;
			
			НоваяЗапись.Количество    = 1;
			НоваяЗапись.Сумма         = СуммаВВалРегл;
			НоваяЗапись.СуммаУпр      = СуммаВВалУпр;
			
			НоваяЗапись.СуммаНДС      = Окр(СуммаВВалРегл*ВыборкаДетальная.СуммаНДС/ВыборкаДетальная.Сумма,2,РежимОкругления.Окр15как20);
			НоваяЗапись.СуммаНДСУпр	  = Окр(СуммаВВалУпр*ВыборкаДетальная.СуммаНДСУпр/ВыборкаДетальная.СуммаУпр,2,РежимОкругления.Окр15как20);
			НоваяЗапись.СуммаБезНДС   = НоваяЗапись.Сумма-НоваяЗапись.СуммаНДС;
			НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр-НоваяЗапись.СуммаНДСУпр;
			
			//НоваяЗапись.СтавкаНДС     = Справочники.СтавкиНДС.БезНДС;
			НоваяЗапись.ХозОперация   = ХозОперация;
			НоваяЗапись.Проект        = Проект;
			Прервать;
		КонецЦикла;
	КонецЦикла;
	
	// Автомобили из документа ВводОстатковПрочихАктивов
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрочиеАктивыВЭксплуатации.Количество КАК Количество,
	|	ПрочиеАктивыВЭксплуатации.БалансоваяСтоимость КАК Сумма,
	|	ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьУпр КАК СуммаУпр,
	|	ПрочиеАктивыВЭксплуатации.Автомобиль КАК Автомобиль
	|ИЗ
	|	РегистрНакопления.ПрочиеАктивыВЭксплуатации КАК ПрочиеАктивыВЭксплуатации
	|ГДЕ
	|	ПрочиеАктивыВЭксплуатации.ПрочийАктив В(&СписокПрочихАктив)
	|	И ПрочиеАктивыВЭксплуатации.Автомобиль В(&СписокАвтомобилей)
	|	И ПрочиеАктивыВЭксплуатации.Регистратор ССЫЛКА Документ.ВводОстатковПрочихАктивов
	|	И ПрочиеАктивыВЭксплуатации.ВидДвижения = &ВидДвижения";
	
	Запрос.УстановитьПараметр("СписокПрочихАктив", Активы.ВыгрузитьКолонку("ПрочийАктив"));
	Запрос.УстановитьПараметр("СписокАвтомобилей", Активы.ВыгрузитьКолонку("Автомобиль"));
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	ВыборкаАвтомобилей = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаАвтомобилей.Следующий() Цикл
		
		НоваяЗапись = Движения.ОстаткиАвтомобилей.Добавить();
		
		// измерения
		НоваяЗапись.ВидДвижения    = ВидДвиженияНакопления.Приход;
		НоваяЗапись.Регистратор    = Ссылка;
		НоваяЗапись.Период         = Дата;
		НоваяЗапись.Автомобиль     = ВыборкаАвтомобилей.Автомобиль;
		НоваяЗапись.СкладКомпании  = СкладКомпании;
		НоваяЗапись.СтатусПартии   = Перечисления.СтатусыПартий.ТоварКупленный;
		НоваяЗапись.Партия         = Ссылка;
		
		НоваяЗапись.Количество     = 1;
		НоваяЗапись.Сумма          = ВыборкаАвтомобилей.Сумма;
		НоваяЗапись.СуммаУпр       = ВыборкаАвтомобилей.СуммаУпр;
		
		КоэфНДС = Справочники.СтавкиНДС.ОсновнаяСтавкаНДС.Ставка/(100 + Справочники.СтавкиНДС.ОсновнаяСтавкаНДС.Ставка);
		
		НоваяЗапись.СуммаНДС       = Окр(ВыборкаАвтомобилей.Сумма * КоэфНДС, 2,РежимОкругления.Окр15как20);
		НоваяЗапись.СуммаНДСУпр    = Окр(ВыборкаАвтомобилей.СуммаУпр * КоэфНДС, 2,РежимОкругления.Окр15как20);
		НоваяЗапись.СуммаБезНДС    = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
		НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
		
		// НоваяЗапись.СтавкаНДС      = Справочники.СтавкиНДС.ОсновнаяСтавкаНДС;
		НоваяЗапись.ХозОперация    = ХозОперация;
		НоваяЗапись.Проект        = Проект;
		
	КонецЦикла;
	
КонецФункции

Процедура ПроверитьСоответствиеАктивовИАвтомобилей(РежимЗаписи,Отказ)
	// проверим возможность проведения
	Если НЕ ОбменДанными.Загрузка Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПрочиеАктивыВЭксплуатацииОстатки.ПрочийАктив КАК ПрочийАктив,
		|	ПрочиеАктивыВЭксплуатацииОстатки.Автомобиль КАК Автомобиль
		|ИЗ
		|	РегистрНакопления.ПрочиеАктивыВЭксплуатации.Остатки(, ПрочийАктив В (&СписокПрочийАктив)) КАК ПрочиеАктивыВЭксплуатацииОстатки";
		Запрос.УстановитьПараметр("СписокПрочийАктив", Активы.ВыгрузитьКолонку("ПрочийАктив"));
		Выборка = Запрос.Выполнить().Выбрать();
		
		Ошибки = "";
		Для Каждого стрАктив Из Активы Цикл
			стрПоиска = Новый Структура("ПрочийАктив,Автомобиль", стрАктив.ПрочийАктив, стрАктив.Автомобиль);
			Выборка.Сбросить();
			Если НЕ Выборка.НайтиСледующий(стрПоиска) Тогда
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Актив <%1> и автомобиль <%2> не соответствуют друг другу.'"),
					стрАктив.ПрочийАктив,
					стрАктив.Автомобиль
				);
				ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Активы", стрАктив.НомерСтроки, "Актив");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ПутьКТабличнойЧасти, , Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция УстановитьВидАвтомобилей()
	
	// Определим автомобили для которых необходимо установить вид
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВыводИзЭксплуатацииАвтомобилейАктивы.Автомобиль КАК Автомобиль
	|ПОМЕСТИТЬ Автомобили
	|ИЗ
	|	Документ.ВыводИзЭксплуатацииАвтомобилей.Активы КАК ВыводИзЭксплуатацииАвтомобилейАктивы
	|ГДЕ
	|	ВыводИзЭксплуатацииАвтомобилейАктивы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвтомобилиСрезПоследних.Автомобиль КАК Автомобиль,
	|	АвтомобилиСрезПоследних.Значение КАК Значение
	|ПОМЕСТИТЬ ВидыАвтомобилей
	|ИЗ
	|	РегистрСведений.Автомобили.СрезПоследних(
	|			&Момент,
	|			Автомобиль В
	|					(ВЫБРАТЬ
	|						Автомобили.Автомобиль КАК Автомобиль
	|					ИЗ
	|						Автомобили КАК Автомобили)
	|				И ВидЗначения = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяИнформацияАвтомобилей.ВидАвтомобиля)) КАК АвтомобилиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Автомобили.Автомобиль КАК Автомобиль
	|ИЗ
	|	Автомобили КАК Автомобили
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыАвтомобилей КАК ВидыАвтомобилей
	|		ПО Автомобили.Автомобиль = ВидыАвтомобилей.Автомобиль
	|ГДЕ
	|	ВидыАвтомобилей.Значение <> ЗНАЧЕНИЕ(Перечисление.ВидАвтомобиля.АвтомобильСПробегом)");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Момент", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Отказ = Ложь;
	
	Пока Выборка.Следующий() И НЕ Отказ Цикл
		
		Отказ = Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(
			Выборка.Автомобиль,
			Перечисления.ВидАвтомобиля.АвтомобильСПробегом,
			Перечисления.ДополнительнаяИнформацияАвтомобилей.ВидАвтомобиля,
			Дата,
			Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.Прочее);
		
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

Процедура СброситьВидАвтомобилей()
	
	МенеджерЗаписи = РегистрыСведений.Автомобили.СоздатьМенеджерЗаписи();
	СтараяДата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Дата");
	
	Для Каждого Строка Из Активы Цикл
		
		РегистрыСведений.Автомобили.УдалитьЗначениеРегистраСведения(
			Строка.Автомобиль,
			СтараяДата,
			Перечисления.ДополнительнаяИнформацияАвтомобилей.ВидАвтомобиля);
			
	КонецЦикла;
	
КонецПроцедуры

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Ввод в эксплуатацию автомобилей".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВводВЭксплуатациюАвтомобилей(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПодразделениеОтгрузки = ДанныеЗаполнения.ПодразделениеПолучатель;
	ПодразделениеКомпании = ДанныеЗаполнения.ПодразделениеПолучатель;
	
	Запрос =  Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВводВЭксплуатациюАвтомобилейАвтомобили.Актив,
	|	ВводВЭксплуатациюАвтомобилейАвтомобили.Автомобиль,
	|	ЕСТЬNULL(ПрочиеАктивыВЭксплуатацииОстатки.КоличествоОстаток, 0) КАК Количество,
	|	ЕСТЬNULL(ПрочиеАктивыВЭксплуатацииОстатки.БалансоваяСтоимостьОстаток, 0) - ЕСТЬNULL(ПрочиеАктивыВЭксплуатацииОстатки.СуммаАмортизацииОстаток, 0) КАК Себестоимость,
	|	ЕСТЬNULL(ПрочиеАктивыВЭксплуатацииОстатки.БалансоваяСтоимостьУпрОстаток, 0) - ЕСТЬNULL(ПрочиеАктивыВЭксплуатацииОстатки.СуммаАмортизацииУпрОстаток, 0) КАК СебестоимостьУпр
	|ИЗ
	|	Документ.ВводВЭксплуатациюАвтомобилей.Автомобили КАК ВводВЭксплуатациюАвтомобилейАвтомобили
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПрочиеАктивыВЭксплуатации.Остатки КАК ПрочиеАктивыВЭксплуатацииОстатки
	|		ПО ВводВЭксплуатациюАвтомобилейАвтомобили.Автомобиль = ПрочиеАктивыВЭксплуатацииОстатки.Автомобиль
	|			И ВводВЭксплуатациюАвтомобилейАвтомобили.Актив = ПрочиеАктивыВЭксплуатацииОстатки.ПрочийАктив
	|ГДЕ
	|	ЕСТЬNULL(ПрочиеАктивыВЭксплуатацииОстатки.КоличествоОстаток, 0) > 0
	|	И ВводВЭксплуатациюАвтомобилейАвтомобили.Ссылка = &Основание";
	Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Активы.Добавить();
		НоваяСтрока.Автомобиль  = Выборка.Автомобиль;
		НоваяСтрока.ПрочийАктив = Выборка.Актив;
		НоваяСтрока.Количество  = Выборка.Количество;
		
		Если ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
			НоваяСтрока.Сумма = Выборка.Себестоимость;
		ИначеЕсли ВалютаДокумента = Константы.ВалютаУправленческогоУчетаКомпании.Получить() Тогда
			НоваяСтрока.Сумма = Выборка.СебестоимостьУпр;
		Иначе
			НоваяСтрока.Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Выборка.СебестоимостьУпр,
				Константы.ВалютаУправленческогоУчетаКомпании.Получить(), КурсВалютыУпр, ВалютаДокумента, КурсДокумента);
		КонецЕсли;
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ВводВЭксплуатациюАвтомобилей()

// Производит заполнение объекта на основании документа "Перемещение активов"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПеремещениеАктивов(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Активы.Очистить();
	ПодразделениеОтгрузки = ДанныеЗаполнения.ПодразделениеПолучатель;
	ПодразделениеКомпании = ДанныеЗаполнения.ПодразделениеПолучатель;
	Организация           = ПодразделениеКомпании.Организация;
	
	Запрос =  Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеАктивовАвтомобили.ПрочийАктив КАК Актив,
	|	ЕСТЬNULL(ПрочиеАктивыВЭксплуатацииОстатки.Автомобиль,Неопределено) КАК Автомобиль,
	|	ЕСТЬNULL(ПрочиеАктивыВЭксплуатацииОстатки.КоличествоОстаток, 0) КАК Количество,
	|	ЕСТЬNULL(ПрочиеАктивыВЭксплуатацииОстатки.БалансоваяСтоимостьОстаток, 0) - ЕСТЬNULL(ПрочиеАктивыВЭксплуатацииОстатки.СуммаАмортизацииОстаток, 0) КАК Себестоимость,
	|	ЕСТЬNULL(ПрочиеАктивыВЭксплуатацииОстатки.БалансоваяСтоимостьУпрОстаток, 0) - ЕСТЬNULL(ПрочиеАктивыВЭксплуатацииОстатки.СуммаАмортизацииУпрОстаток, 0) КАК СебестоимостьУпр
	|ИЗ
	|	Документ.ПеремещениеАктивов.Активы КАК ПеремещениеАктивовАвтомобили
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПрочиеАктивыВЭксплуатации.Остатки КАК ПрочиеАктивыВЭксплуатацииОстатки
	|		ПО ПеремещениеАктивовАвтомобили.ПрочийАктив = ПрочиеАктивыВЭксплуатацииОстатки.ПрочийАктив
	|ГДЕ
	|	ЕСТЬNULL(ПрочиеАктивыВЭксплуатацииОстатки.КоличествоОстаток, 0) > 0
	|	И ПеремещениеАктивовАвтомобили.Ссылка = &Основание";
	Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.Автомобиль) Тогда Продолжить; КонецЕсли;
		НоваяСтрока = Активы.Добавить();
		НоваяСтрока.Автомобиль  = Выборка.Автомобиль;
		НоваяСтрока.ПрочийАктив = Выборка.Актив;
		НоваяСтрока.Количество  = Выборка.Количество;
		
		Если ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
			НоваяСтрока.Сумма = Выборка.Себестоимость;
		ИначеЕсли ВалютаДокумента = Константы.ВалютаУправленческогоУчетаКомпании.Получить() Тогда
			НоваяСтрока.Сумма = Выборка.СебестоимостьУпр;
		Иначе
			НоваяСтрока.Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Выборка.СебестоимостьУпр,
				Константы.ВалютаУправленческогоУчетаКомпании.Получить(), КурсВалютыУпр, ВалютаДокумента, КурсДокумента);
		КонецЕсли;
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПеремещениеАктивов()

// Производит заполнение объекта по передаваемой структуре
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПодразделениеОтгрузки = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "ПодразделениеКомпании");
	
	Структура_Активы = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "КарточкаАктива", Новый Массив);
	Для Каждого Актив Из Структура_Активы Цикл
		НоваяСтрока = Активы.Добавить();
		НоваяСтрока.ПрочийАктив = Актив;
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// формирует движения документа по партионным регистрам
//
// Параметры:
//  Режим           - режим проведения (оперативный/неоперативный)
//  ДокументСсылка  - ссылка на документ который надо допровести по партиям.
//
// Возвращаемое значение:
//  Возвращает Истина - все ОК, ложь - чего-то не так.
//
Функция ПровестиПоПартиям(Режим,ДокументСсылка=Неопределено) Экспорт
	Отказ=Ложь;
	Возврат НЕ Отказ;
КонецФункции // ПровестиПоПартиям()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
