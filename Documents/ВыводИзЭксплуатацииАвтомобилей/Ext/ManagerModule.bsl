// Модуль менеджера документа "Вывод из эксплуатации автомобилей"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ВыводИзЭксплуатацииАвтомобилей);

КонецФункции

#КонецОбласти

#Область ЗапретРедактированияРеквизитовОбъектов

// Определяет блокируемые реквизиты
//
// Возвращаемое значение:
//  Массив - Строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]. Например: "Объект.Автор", "ПолеАвтор".
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
    
    Результат = Новый Массив();
    Результат.Добавить("Активы.ВидАренды; АктивыВидАренды");
    Возврат Результат;
    
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Активы.Итог("Сумма"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используеся в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость выводв только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возращаемая сторка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", 
						Объединить = Ложь, ТолькоОсновныеКонтакты = Истина) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("СкладКомпании");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеОтгрузки");

	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Активы");
	КонецЕсли;

	ОбязательныеРеквизиты.Добавить("Активы.ПрочийАктив");
	ОбязательныеРеквизиты.Добавить("Активы.Автомобиль");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеАктивы = Новый Массив();
	УникальныеАктивы.Добавить("ПрочийАктив");
	УникальныеАктивы.Добавить("Автомобиль");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Активы", УникальныеАктивы);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Активы.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаТабличнойЧастиАктивы.ВыполнитьПересчетТабличнойЧасти(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АктивыПрочийАктивПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("ПодразделениеКомпании", Объект.ПодразделениеОтгрузки);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Подразделение",   Объект.ПодразделениеОтгрузки);
	Параметры.Вставить("Актив",           Строка.ПрочийАктив);
	Параметры.Вставить("Момент",          ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка.МоментВремени(), Объект.Дата));
	Параметры.Вставить("ИмяКолонкиАктив", "ПрочийАктив");

	ТаблицаОстаткиАктива = УправлениеПрочимиАктивами.ПолучитьОстаткиАктивов(Параметры);
	
	// заполним реквизиты
	Если ТаблицаОстаткиАктива.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Прочий актив ""%1"". Подразделение ""%2"". Не обнаружен'"),
				СокрЛП(Строка.ПрочийАктив),
				СокрЛП(Объект.ПодразделениеОтгрузки)
			));
	Иначе
		Строка.Автомобиль = ТаблицаОстаткиАктива[0].Автомобиль;
		Строка.Количество = 1;
		Если Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
			БалансоваяСтоимость = ТаблицаОстаткиАктива[0].БалансоваяСтоимостьРегл;
			СуммаАмортизации    = ТаблицаОстаткиАктива[0].АмортизацияРегл;
		Иначе
			БалансоваяСтоимость = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТаблицаОстаткиАктива[0].БалансоваяСтоимость, Константы.ВалютаУправленческогоУчетаКомпании.Получить(), ?(НЕ ЗначениеЗаполнено(Объект.КурсВалютыУпр), Объект.Дата, Объект.КурсВалютыУпр), Объект.ВалютаДокумента, Объект.КурсДокумента);
			СуммаАмортизации    = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТаблицаОстаткиАктива[0].Амортизация,         Константы.ВалютаУправленческогоУчетаКомпании.Получить(), ?(НЕ ЗначениеЗаполнено(Объект.КурсВалютыУпр), Объект.Дата, Объект.КурсВалютыУпр), Объект.ВалютаДокумента, Объект.КурсДокумента);
		КонецЕсли; 
		Строка.Сумма = БалансоваяСтоимость - СуммаАмортизации;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиАктивы.АктивПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Обновим информацию по виду аренды
	РегистрыНакопления.АвтомобилиДляТестДрайва.ЗаполнитьВидАрендыАвтомобиля(Объект, Строка);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Активы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АктивыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры // АктивыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автомобиль" в таблице "Активы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АктивыАвтомобильПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Обновим информацию по виду аренды
	РегистрыНакопления.АвтомобилиДляТестДрайва.ЗаполнитьВидАрендыАвтомобиля(Объект, Строка);
	
КонецПроцедуры // АктивыАвтомобильПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт

	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Активы");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ВыводИзЭксплуатацииАвтомобилей");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Активы");
	КонецЕсли;
	
	ВыборПодразделения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборПодразделения.ВыборСсылки 		= "Справочник.ПодразделенияКомпании.ФормаСписка";
	ВыборПодразделения.Обязательный 	= Истина;
	ВыборПодразделения.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать подразделение компании.'");

	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "АктивыПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить активами подразделения'");
	Команда.Идентификатор	= "АктивыЗаполнитьАктивамиПодразделения";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Активы";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ПодразделениеОтгрузки", ВыборПодразделения);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("АктивыЗаполнитьАктивамиПодразделения.Видимость",    Истина);
	ПараметрыКоманд.Вставить("АктивыЗаполнитьАктивамиПодразделения.Доступность",  Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по заказам контрагенту
//
Функция АктивыЗаполнитьАктивамиПодразделения(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.ПодразделениеОтгрузки.Пустая() Тогда
		
		Объект.ПодразделениеОтгрузки = ПараметрыЗаполнения.ПодразделениеОтгрузки;
		
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ПодразделениеКомпании", Объект.ПодразделениеОтгрузки);
	МоментВремени = ?(
		Ссылка.Пустая(),
		Объект.Дата,
		Новый Граница(Новый МоментВремени(Объект.Дата, Ссылка),ВидГраницы.Исключая));
	
	Параметры = Новый Структура;
	Параметры.Вставить("Подразделение",   Объект.ПодразделениеОтгрузки);
	Параметры.Вставить("Момент",          МоментВремени);
	Параметры.Вставить("ИмяКолонкиАктив", "ПрочийАктив");

	АктивыПодразделения = УправлениеПрочимиАктивами.ПолучитьОстаткиАктивов(Параметры);
	
	ВВалютеРегл = Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВВалютеУпр = Объект.ВалютаДокумента = ВалютаУпр;
	КурсУпр = ?(ЗначениеЗаполнено(Объект.КурсВалютыУпр), Объект.КурсВалютыУпр, Объект.Дата);
	
	Для Каждого Актив Из АктивыПодразделения Цикл
		
		Если Актив.Автомобиль.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.Активы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Актив, "ПрочийАктив,Количество,Автомобиль");
		
		Если ВВалютеРегл Тогда
			
			НоваяСтрока.Сумма = Актив.БалансоваяСтоимостьРегл - Актив.АмортизацияРегл;
			
		ИначеЕсли ВВалютеУпр Тогда
			
			НоваяСтрока.Сумма = Актив.БалансоваяСтоимость - Актив.Амортизация;
			
		Иначе
			
			НоваяСтрока.Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				Актив.БалансоваяСтоимость - Актив.Амортизация,
				ВалютаУпр,
				КурсУпр,
				Объект.ВалютаДокумента,
				Объект.КурсДокумента,
				РежимОкругления.Окр15как20);
			
		КонецЕсли;
		
		ОбработкаТабличнойЧастиАктивы.АктивПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		
	КонецЦикла;
	
	// Обновим информацию по виду аренды
	РегистрыНакопления.АвтомобилиДляТестДрайва.ЗаполнитьВидАренды(Объект);
	
КонецФункции // АктивыЗаполнитьАктивамиПодразделения()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ВыводИзЭксплуатацииАвтомобилей",
		"ВыводИзЭксплуатацииАвтомобилей",
		НСтр("ru = 'Вывод из эксплуатации автомобилей'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ВыводИзЭксплуатацииАвтомобилей") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ВыводИзЭксплуатацииАвтомобилей",
															"Вывод из эксплуатации автомобилей",
															ПечатьВыводИзЭксплуатацииАвтомобилей(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Функция осуществляет печать произвольного документа.
// Можно направить печать на экран или принтер, а также распечатать необходимое количество копий.
//
// Параметры:
//	ЭтотОбъект							- ДокументОбъект	- Документ для печати
//	НазваниеПечатнойФормы 				- Строка			- Название печатной формы, если пусто, то по умолчанию
//	КоличествоЭкземпляров				- Число				- Количество экземпляров документа
//	НаПринтер							- Булево			- Признак отправки документа на принтер без отображения его на экране
//  Документ 	  						- ТабличныйДокумент	- Макет печатной формы.
//
// Возвращаемое значение:
//   ТабличныйДокумент	- Сформированная печатная форма.
//
Функция ПечатьВыводИзЭксплуатацииАвтомобилей(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВыводИзЭксплуатацииАвтомобилей.ПФ_MXL_РеализацияАктивов");
		
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// форматы вывода
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		
		// дата документа
		ДатаДокумента = Документ.Дата;
		
		// заголовок
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьЗаголовок.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		ОбластьЗаголовок.Параметры.ПредставлениеПодразделения =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ПодразделениеКомпании, ДатаДокумента);
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ПредставлениеКонтрагента = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.ПодразделениеОтгрузки, , ДополнительныеПараметры);
			
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		НомерСтраницы = 2; НомерСтраницыПредыдущий = 2;
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СтоимостьРеализации", Документ.ВалютаДокумента, 0);
		// заполним параметры шапки таблицы для следующего листа
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		
		Если Документ.Проведен Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	РеализацияАктивовАктивы.НомерСтроки,
			|	ПрочиеАктивыВЭксплуатации.ПрочийАктив КАК ПрочийАктив,
			|	РеализацияАктивовАктивы.Сумма КАК СтоимостьРеализации,
			|	ВЫБОР
			|		КОГДА ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьУпр ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьУпр * &МножительКурса
			|	КОНЕЦ - ВЫБОР
			|		КОГДА ПрочиеАктивыВЭксплуатации.СуммаАмортизацииУпр ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ ПрочиеАктивыВЭксплуатации.СуммаАмортизацииУпр * &МножительКурса
			|	КОНЕЦ КАК ОстаточнаяСтоимость
			|ИЗ
			|	Документ.ВыводИзЭксплуатацииАвтомобилей.Активы КАК РеализацияАктивовАктивы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПрочиеАктивыВЭксплуатации КАК ПрочиеАктивыВЭксплуатации
			|		ПО РеализацияАктивовАктивы.ПрочийАктив = ПрочиеАктивыВЭксплуатации.ПрочийАктив
			|ГДЕ
			|	ПрочиеАктивыВЭксплуатации.ВидДвижения = &ВидДвиженияНакопленияРасход
			|	И ПрочиеАктивыВЭксплуатации.Регистратор = &Ссылка
			|	И РеализацияАктивовАктивы.Ссылка = &Ссылка";
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
			Запрос.УстановитьПараметр("ВидДвиженияНакопленияРасход", ВидДвиженияНакопления.Расход);
			ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
			Если НЕ ЗначениеЗаполнено(Документ.КурсВалютыУпр) Тогда
				МножительКурса = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(1, ВалютаУправленческогоУчета, Документ.Дата,
					Документ.ВалютаДокумента, Документ.КурсДокумента);
			Иначе
				МножительКурса = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(1, ВалютаУправленческогоУчета,
					Документ.КурсВалютыУпр, Документ.ВалютаДокумента, Документ.КурсДокумента);
			КонецЕсли;
			Запрос.УстановитьПараметр("МножительКурса", МножительКурса);
			ВыборкаТабличнойЧасти = Запрос.Выполнить().Выгрузить();
		Иначе
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Документ не проведен данные о остаточной стоимости не доступны.'"), Документ);
			ВыборкаТабличнойЧасти = Документ.Активы.Выгрузить();
			ТипОстаточнаяСтоимость = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(15, 2));
			ВыборкаТабличнойЧасти.Колонки.Добавить("ОстаточнаяСтоимость", ТипОстаточнаяСтоимость);
			ВыборкаТабличнойЧасти.ЗаполнитьЗначения(0, "ОстаточнаяСтоимость");
			ВыборкаТабличнойЧасти.Колонки.Сумма.Имя = "СтоимостьРеализации";
		КонецЕсли;
		
		
		// перебор строк
		Для каждого СтрокаТабличнойЧасти Из ВыборкаТабличнойЧасти Цикл
			// заполняем данные строки
			ОбластьСтрока.Параметры.Заполнить(СтрокаТабличнойЧасти);
			АктивНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТабличнойЧасти.ПрочийАктив);
			ОбластьСтрока.Параметры.ПрочийАктив			= СтрокаТабличнойЧасти.ПрочийАктив;
			ОбластьСтрока.Параметры.АктивНаименование	= АктивНаименование;
			ОбластьСтрока.Параметры.Код					= СтрокаТабличнойЧасти.ПрочийАктив.ИнвентарныйНомер;
			ОбластьСтрока.Параметры.ОстаточнаяСтоимость = Формат(СтрокаТабличнойЧасти.ОстаточнаяСтоимость, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СтоимостьРеализации = Формат(СтрокаТабличнойЧасти.СтоимостьРеализации, ФорматВыводаСуммы);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Активы.Индекс(СтрокаТабличнойЧасти) = Документ.Активы.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СтоимостьРеализации", Документ.ВалютаДокумента, 0);
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТабличнойЧасти, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// заполнение подвала и итогов
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("СтоимостьРеализации");
		ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью = СтрШаблон(НСтр("ru = 'Всего наименований %1 на сумму %2'"),
			ВыборкаТабличнойЧасти.Количество(),
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, Документ.ВалютаДокумента));
		
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// блок области
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВыводИзЭксплуатацииАвтомобилей_ВыводИзЭксплуатацииАвтомобилей";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьРеализацияАктивов()

#КонецОбласти

#КонецОбласти

#КонецЕсли