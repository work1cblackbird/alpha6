// Модуль менеджера документа "Договор аренды"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда   
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	
	ИтогПоАренде = Объект.Автомобили.Итог("СуммаВсего");
	ИтогПоТоварам = Объект.Товары.Итог("СуммаВсего");
	
	ИтогиОперации.Вставить("СуммаДокумента", ИтогПоАренде + ИтогПоТоварам);
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	СуммаНДС = Объект.Автомобили.Итог("СуммаНДС") + Объект.Товары.Итог("СуммаНДС");
	
	ИтогиОперации.Вставить("СуммаНДС",    СуммаНДС);
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента - ИтогиОперации.СуммаНДС);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Производит расчет суммы скидки/наценки по документу в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция РассчитатьСуммуСкидкиНаценки(Объект) Экспорт
	
	Объект.СуммаСкидкиНаценки =
		Объект.Товары.Итог("СуммаСкидки")
		+ Объект.Товары.Итог("СуммаСкидкиСтроки")
		+ Объект.Автомобили.Итог("СуммаСкидки");
	
КонецФункции // РассчитатьСуммуСкидкиНаценки()

Процедура РассчитатьДокументАренды(Объект, ПараметрыДействия = Неопределено)
	
	АрендаАвтомобилей.РассчитатьДокументАренды(Объект, ПараметрыДействия);	
	
КонецПроцедуры

Функция ПолучитьДанныеАвтомобиля(Автомобили, Дата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДоговорАрендыАвтомобили.Автомобиль КАК Автомобиль,
	               |	ДоговорАрендыАвтомобили.АвтомобильVIN КАК АвтомобильVIN,
	               |	ДоговорАрендыАвтомобили.АвтомобильМодель КАК АвтомобильМодель,
	               |	ДоговорАрендыАвтомобили.АвтомобильГодВыпуска КАК АвтомобильГодВыпуска,
	               |	ДоговорАрендыАвтомобили.АвтомобильЦвет КАК АвтомобильЦвет,
	               |	ДоговорАрендыАвтомобили.АвтомобильМарка КАК АвтомобильМарка
	               |ПОМЕСТИТЬ втАвтомобили
	               |ИЗ
	               |	&ТаблицаАвтомобилей КАК ДоговорАрендыАвтомобили
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КомплектацияАвтомобилейОстатки.Автомобиль КАК Автомобиль,
	               |	КомплектацияАвтомобилейОстатки.Номенклатура КАК Номенклатура,
	               |	КомплектацияАвтомобилейОстатки.КоличествоОстаток КАК КоличествоОстаток
	               |ПОМЕСТИТЬ втОстатки
	               |ИЗ
	               |	РегистрНакопления.КомплектацияАвтомобилей.Остатки(
	               |			&Дата,
	               |			Автомобиль В
	               |				(ВЫБРАТЬ
	               |					втАвтомобили.Автомобиль КАК Автомобиль
	               |				ИЗ
	               |					втАвтомобили КАК втАвтомобили)) КАК КомплектацияАвтомобилейОстатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Автомобиль
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АвтомобилиСрезПоследних.Автомобиль КАК Автомобиль,
	               |	АвтомобилиСрезПоследних.Значение КАК Значение
	               |ПОМЕСТИТЬ втСРТС
	               |ИЗ
	               |	РегистрСведений.Автомобили.СрезПоследних(
	               |			&Дата,
	               |			ВидЗначения = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяИнформацияАвтомобилей.СвидетельствоОРегистрацииТС)
	               |				И Автомобиль В
	               |					(ВЫБРАТЬ
	               |						втАвтомобили.Автомобиль КАК Автомобиль
	               |					ИЗ
	               |						втАвтомобили КАК втАвтомобили)) КАК АвтомобилиСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Автомобиль
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втАвтомобили.Автомобиль КАК Автомобиль,
	               |	втАвтомобили.АвтомобильVIN КАК VIN,
	               |	втАвтомобили.АвтомобильМодель КАК Модель,
	               |	втАвтомобили.АвтомобильГодВыпуска КАК АвтомобильГодВыпуска,
	               |	втАвтомобили.АвтомобильЦвет КАК Цвет,
	               |	втАвтомобили.АвтомобильМарка КАК Марка,
	               |	ЕСТЬNULL(втОстатки.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	               |	ЕСТЬNULL(втОстатки.КоличествоОстаток, 0) КАК Количество,
	               |	ЕСТЬNULL(втСРТС.Значение, ЗНАЧЕНИЕ(Перечисление.ДополнительнаяИнформацияАвтомобилей.ПустаяСсылка)) КАК СРТС
	               |ИЗ
	               |	втАвтомобили КАК втАвтомобили
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК втОстатки
	               |		ПО втАвтомобили.Автомобиль = втОстатки.Автомобиль
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втСРТС КАК втСРТС
	               |		ПО втАвтомобили.Автомобиль = втСРТС.Автомобиль
	               |ИТОГИ
	               |	МАКСИМУМ(VIN),
	               |	МАКСИМУМ(Модель),
	               |	МАКСИМУМ(АвтомобильГодВыпуска),
	               |	МАКСИМУМ(Цвет),
	               |	МАКСИМУМ(Марка),
	               |	СУММА(Количество),
	               |	МАКСИМУМ(СРТС)
	               |ПО
	               |	Автомобиль";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ТаблицаАвтомобилей", Автомобили);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаАвтомобили = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ВыборкаАвтомобили;
	
КонецФункции

// Процедра получения доступа к расчету скидок из менеджера.
//
Процедура РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти = "Товары", СкидкаШапкиАбсолютная = Ложь) Экспорт
	
	СкидкиНаценкиСервер.РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти, СкидкаШапкиАбсолютная);
	
КонецПроцедуры // РассчитатьСкидкиСтроки()

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ВидАренды");
	ОбязательныеРеквизиты.Добавить("Заказчик");
	ОбязательныеРеквизиты.Добавить("ДатаНачала");
	ОбязательныеРеквизиты.Добавить("ДатаОкончания");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Автомобили");
	КонецЕсли; 
	
	ОбязательныеРеквизиты.Добавить("Автомобили.Автомобиль");
	
	ОбязательныеРеквизиты.Добавить("Водители.Водитель");
	
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");

	ДанныеВидаАренды = АрендаАвтомобилей.ДанныеВидаАренды(Объект.ВидАренды);
	
	Если ДанныеВидаАренды.ТипАренды = Перечисления.ТипыРемонта.Платный Тогда
		ОбязательныеРеквизиты.Добавить("Контрагент");
		ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	КонецЕсли;
	
	Если ДанныеВидаАренды.ДепозитИспользование Тогда
		ОбязательныеРеквизиты.Добавить("ДоговорДепозита");
	КонецЕсли;
	
	Если ДанныеВидаАренды.ВодителиОбязательны Тогда
		ОбязательныеРеквизиты.Добавить("Водители");
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ИдентификаторАвтомобиля");
	
	// Уникальные поля таблицы автомобилей
	УникальныеАвтомобили = Новый Массив();
	УникальныеАвтомобили.Добавить("Автомобиль");
	
	// Уникальные поля таблицы автомобилей
	УникальныеВодители = Новый Массив();
	УникальныеВодители.Добавить("Водитель");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Товары", УникальныеТовары);
	УникальныеРеквизиты.Вставить("Водители", УникальныеВодители);
	УникальныеРеквизиты.Вставить("Автомобили", УникальныеАвтомобили);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	Если НЕ ПараметрыДействия.Свойство("ДанныеВидаАренды") Тогда
		ПараметрыДействия.Вставить("ДанныеВидаАренды", АрендаАвтомобилей.ДанныеВидаАренды(Объект.ВидАренды));
	КонецЕсли;
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработка пересчета табличных частей объекта.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаТабличнойЧастиАвтомобили.ВыполнитьПересчетТабличнойЧасти(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия для табличной части "Тарификация"
	ОбработкаТабличнойЧастиТарификация.ВыполнитьПересчетТабличнойЧасти(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
		
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	Если ПараметрыДействия.ДанныеВидаАренды.ДепозитИспользование Тогда
		
		Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорДепозита, "Владелец") = Объект.Контрагент Тогда
		
			ПараметрыДействия.Вставить("ТребуетсяУстановкаЦен",
				ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбъектЗаполнен", Истина));
			ПараметрыДействия.Вставить("ДоговорДляДепозитаАренды", Истина);
			
			Объект.ДоговорДепозита = ОбработкаРеквизитовДокументаСервер.ПолучитьДоговорВзаиморасчетов(
				Объект.Контрагент, Перечисления.ВидыДоговоров.Прочее, Объект, ПараметрыДействия);
			ДоговорДепозитаПриИзменении(Объект, ПараметрыДействия);	
			
		КонецЕсли;
	Иначе
		Объект.ДоговорДепозита = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "ВидАренды".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВидАрендыПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Объект.ТипЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия.ДанныеВидаАренды, "ТипЦен", Объект.ТипЦен);
	ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
	РассчитатьДокументАренды(Объект, ПараметрыДействия);
	
	КонтрагентДепозита = Объект.Контрагент;
	
	Если ПараметрыДействия.ДанныеВидаАренды.ТипАренды = Перечисления.ТипыРемонта.Бесплатный Тогда
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Объект.ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
		
		Объект.Товары.Очистить();
		
		КонтрагентДепозита = Объект.Заказчик;
		
	ИначеЕсли Объект.Контрагент.Пустая() Тогда
		Объект.Контрагент = Объект.Заказчик;
		КонтрагентПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Если ПараметрыДействия.ДанныеВидаАренды.ДепозитИспользование
		И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорДепозита, "Владелец") = КонтрагентДепозита Тогда
		
		ПараметрыДействия.Вставить("ДоговорДляДепозитаАренды", Истина);
		
		Объект.ДоговорДепозита = ОбработкаРеквизитовДокументаСервер.ПолучитьДоговорВзаиморасчетов(
			КонтрагентДепозита, Перечисления.ВидыДоговоров.Прочее, Объект, ПараметрыДействия);
		ДоговорДепозитаПриИзменении(Объект, ПараметрыДействия);
	Иначе
		Объект.ДоговорДепозита = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // ВидАрендыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "ДатаНачала".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаНачалаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.ДатаНачала >= Объект.ДатаОкончания Тогда
		Объект.ДатаОкончания = '00010101';
	КонецЕсли;
	
	РассчитатьДокументАренды(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДатаНачалаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "ДатаОкончания".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаОкончанияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.ДатаНачала >= Объект.ДатаОкончания Тогда
		Объект.ДатаНачала = '00010101';
	КонецЕсли;
	
	РассчитатьДокументАренды(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДатаОкончанияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Заказчик".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЗаказчикПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ПараметрыДействия.ДанныеВидаАренды.ТипАренды = Перечисления.ТипыРемонта.Платный Тогда
		Если  Объект.Контрагент.Пустая() Тогда
			Объект.Контрагент = Объект.Заказчик;
			КонтрагентПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
	Иначе
		Если ПараметрыДействия.ДанныеВидаАренды.ДепозитИспользование Тогда
			ПараметрыДействия.Вставить("ДоговорДляДепозитаАренды", Истина);
			
			Объект.ДоговорДепозита = ОбработкаРеквизитовДокументаСервер.ПолучитьДоговорВзаиморасчетов(
				Объект.Заказчик, Перечисления.ВидыДоговоров.Прочее, Объект, ПараметрыДействия);
			ДоговорДепозитаПриИзменении(Объект, ПараметрыДействия);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаказчикПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "ДоговорДепозита".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорДепозитаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	РассчитатьДокументАренды(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорДепозитаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Вид места выдачи".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура МестоВыдачиВидПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт 

	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	АрендаАвтомобилей.МестоПриемкиВыдачиВидПриИзменении(Объект, ПараметрыДействия, "МестоВыдачи");
	
	МестоВыдачиПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Место выдачи".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура МестоВыдачиПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	АрендаАвтомобилей.МестоПриемкиВыдачиПриИзменении(Объект, ПараметрыДействия, "МестоВыдачи");
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Вид места приемки".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура МестоПриемкиВидПриИзменении(Объект, ПараметрыДействия = Неопределено)  Экспорт

	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	АрендаАвтомобилей.МестоПриемкиВыдачиВидПриИзменении(Объект, ПараметрыДействия, "МестоПриемки");
	
	МестоПриемкиПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Место приемки".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура МестоПриемкиПриИзменении(Объект, ПараметрыДействия = Неопределено)  Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	АрендаАвтомобилей.МестоПриемкиВыдачиПриИзменении(Объект, ПараметрыДействия, "МестоПриемки");
	
КонецПроцедуры

Процедура СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Для Каждого Строка Из Объект.Товары Цикл
		Строка.ЗначениеСкидкиШапкиИзменено = Ложь;
	КонецЦикла;
	
	ОбработкаРеквизитовДокументаСервер.СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Карточка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КарточкаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КарточкаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтомобили

// Обработчик события возникающего при изменении данных реквизита "Автомобиль"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиАвтомобильПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// потом убрать 
	Если ПустаяСтрока(Строка.ИдентификаторАвтомобиля) Тогда
		Строка.ИдентификаторАвтомобиля = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	АрендаАвтомобилей.РассчитатьСтоимостьАренды(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	АрендаАвтомобилей.РассчитатьСуммуСтроки(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	АрендаАвтомобилей.РассчитатьСуммуСтроки(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	АрендаАвтомобилей.РассчитатьСуммуСтроки(Объект, Строка, ПараметрыДействия, "СуммаСкидки");
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	АрендаАвтомобилей.РассчитатьСуммуСтроки(Объект, Строка, ПараметрыДействия, "СуммаВсего");
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	АрендаАвтомобилей.РассчитатьСуммуСтроки(Объект, Строка, ПараметрыДействия, "ПроцентСкидки");
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВодители

// Обработчик события возникающего при изменении данных реквизита "Водитель"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВодителиВодительПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ Строка.Водитель.Пустая() Тогда
		
		Строка.Паспорт = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
			Строка.Водитель, Перечисления.ВидыДокументов.Паспорт);
		Строка.ВодительскоеУдостоверение  =  Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
			Строка.Водитель, Перечисления.ВидыДокументов.ВодительскоеУдостоверение);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
		
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
		
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
		
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
		
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
		
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
		
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Скидка на товар" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
		
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ДоговорАренды",
		"ПФ_MXL_ДоговорАренды",
		НСтр("ru = 'Договор аренды'"),
		СсылкаНаДокумент);
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ДоговорАренды",
		"ПФ_MXL_ДоговорБезвозмездногоИспользования",
		НСтр("ru = 'Договор безвозмездного использования'"),
		СсылкаНаДокумент);
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ДоговорАренды",
		"ПФ_MXL_АктПриемаПередачиТранспортногоСредства",
		НСтр("ru = 'Акт приема-передачи транспортного средства'"),
		СсылкаНаДокумент);
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ДоговорАренды",
		"ПФ_MXL_АктВозвратаТранспортногоСредства",
		НСтр("ru = 'Акт возврата транспортного средства'"),
		СсылкаНаДокумент);
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ДоговорАренды",
		"ПФ_MXL_Доверенность",
		НСтр("ru = 'Доверенность на управление транспортным средством'"),
		СсылкаНаДокумент);
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ДоговорАренды",
		"ПФ_MXL_ТарификацияАренды",
		НСтр("ru = 'Тарификация аренды'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ДоговорАренды") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ДоговорАренды",
															НСтр("ru = 'Договор аренды'"),
															ПечатьДоговорАренды(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ДоговорБезвозмездногоИспользования") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ДоговорБезвозмездногоИспользования",
															НСтр("ru = 'Договор безвозмездного использования'"),
															ПечатьДоговорБезвозмездногоИспользования(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_АктПриемаПередачиТранспортногоСредства") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_АктПриемаПередачиТранспортногоСредства",
															НСтр("ru = 'Акт приема-передачи транспортного средства'"),
															ПечатьАктПриемаПередачиТранспортногоСредства(МассивОбъектов, ОбъектыПечати, "Прием"));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_АктВозвратаТранспортногоСредства") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_АктВозвратаТранспортногоСредства",
															НСтр("ru = 'Акт возврата транспортного средства'"),
															ПечатьАктПриемаПередачиТранспортногоСредства(МассивОбъектов, ОбъектыПечати, "Возврат"));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Доверенность") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_Доверенность",
															НСтр("ru = 'Доверенность на управление транспортным средством'"),
															ПечатьДоверенность(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ТарификацияАренды") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ТарификацияАренды",
															НСтр("ru = 'Тарификация аренды'"),
															ПечатьТарификацияАренды(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;

КонецПроцедуры // Печать()

Функция ПечатьДоговорАренды(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ДоговорАренды_ДоговорАренды";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ПервыйДокумент = Ложь;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ДоговорАренды.ПФ_MXL_ДоговорАренды");
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДоговорАренды.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
			|	ДоговорАренды.ПодписантОтОрганизации КАК ПодписантОтОрганизации,
			|	ДоговорАренды.ПодписантОтКонтрагента КАК ПодписантОтКонтрагента,
			|	ДоговорАренды.Организация КАК Организация,
			|	ДоговорАренды.Дата КАК Дата,
			|	ДоговорАренды.ДатаНачала КАК ДатаНачала,
			|	ДоговорАренды.ДатаОкончания КАК ДатаОкончания,
			|	ДоговорАренды.МестоВыдачиАдрес КАК МестоВыдачи,
			|	ДоговорАренды.МестоПриемкиАдрес КАК МестоПриемки,
			|	ДоговорАренды.ВалютаДокумента КАК ВалютаДокумента,
			|	ДоговорАренды.СуммаДокумента КАК СуммаДокумента,
			|	ДоговорАренды.ВидАренды.ДепозитИспользование КАК ЕстьДепозит,
			|	ДоговорАренды.СуммаДепозита КАК СуммаДепозита,
			|	ВЫБОР
			|		КОГДА ДоговорАренды.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|			ТОГДА ДоговорАренды.Заказчик
			|		ИНАЧЕ ДоговорАренды.Контрагент
			|	КОНЕЦ КАК Контрагент
			|ПОМЕСТИТЬ ВТ_Данные
			|ИЗ
			|	Документ.ДоговорАренды КАК ДоговорАренды
			|ГДЕ
			|	ДоговорАренды.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Данные.ОрганизацияНаименованиеПолное КАК ОрганизацияНаименованиеПолное,
			|	ВТ_Данные.ПодписантОтОрганизации КАК ПодписантОтОрганизации,
			|	ВТ_Данные.ПодписантОтКонтрагента КАК ПодписантОтКонтрагента,
			|	ВТ_Данные.Организация КАК Организация,
			|	ВТ_Данные.Дата КАК Дата,
			|	ВТ_Данные.ДатаНачала КАК ДатаНачала,
			|	ВТ_Данные.ДатаОкончания КАК ДатаОкончания,
			|	ВТ_Данные.МестоВыдачи КАК МестоВыдачи,
			|	ВТ_Данные.МестоПриемки КАК МестоПриемки,
			|	ВТ_Данные.ВалютаДокумента КАК ВалютаДокумента,
			|	ВТ_Данные.СуммаДокумента КАК СуммаДокумента,
			|	ВТ_Данные.ЕстьДепозит КАК ЕстьДепозит,
			|	ВТ_Данные.СуммаДепозита КАК СуммаДепозита,
			|	ВТ_Данные.Контрагент КАК Контрагент,
			|	ВТ_Данные.Контрагент.ФормаСобственности КАК КонтрагентФормаСобственности,
			|	ВТ_Данные.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное
			|ИЗ
			|	ВТ_Данные КАК ВТ_Данные
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДоговорАрендыАвтомобили.Автомобиль.Модель КАК Модель,
			|	ДоговорАрендыАвтомобили.Автомобиль.Цвет КАК Цвет,
			|	ДоговорАрендыАвтомобили.Автомобиль.Марка КАК Марка,
			|	ДоговорАрендыАвтомобили.Автомобиль.ГодВыпуска КАК АвтомобильГодВыпуска,
			|	ДоговорАрендыАвтомобили.Автомобиль КАК Автомобиль
			|ИЗ
			|	Документ.ДоговорАренды.Автомобили КАК ДоговорАрендыАвтомобили
			|ГДЕ
			|	ДоговорАрендыАвтомобили.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
		
		Результат = Запрос.ВыполнитьПакет();
		
		ВыборкаДетальныеЗаписи = Результат[1].Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		
		ДанныеПодписантаОрганизации = АрендаАвтомобилей.ДанныеПодписантаОрганизации(ВыборкаДетальныеЗаписи);
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаДоговора");
		
		МассивПодразделения = Новый Массив();
		МассивПодразделения.Добавить(Документ.Организация);
		КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивПодразделения,
			Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, ТекущаяДатаСеанса());
		
		Если КонтактнаяИнформация.Количество() > 0 Тогда
			Адрес = РаботаСАдресами.ГородАдресаКонтактнойИнформации(КонтактнаяИнформация[0].ЗначенияПолей);
			
			Если Адрес = "" И СтрНайти(КонтактнаяИнформация[0].ЗначенияПолей, "Москва") Тогда
				Адрес = НСтр("ru = 'г. Москва'");
			КонецЕсли;
			
		Иначе
			Адрес = "";
		КонецЕсли;
		
		ОбластьШапка.Параметры.НомерДоговора = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		ОбластьШапка.Параметры.Дата          = Формат(ВыборкаДетальныеЗаписи.Дата, "ДЛФ=DD");
		ОбластьШапка.Параметры.Город         = Адрес;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		Контрагент = ВыборкаДетальныеЗаписи.Контрагент;
		
		Если ВыборкаДетальныеЗаписи.КонтрагентФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо Тогда
			
			Область = Макет.ПолучитьОбласть("ЮрЛицо");
			ДанныеПодписантаКонтрагент  = АрендаАвтомобилей.ДанныеПодписантаКонтрагента(ВыборкаДетальныеЗаписи);
			Область.Параметры.КонтрагентНаименование   = ВыборкаДетальныеЗаписи.КонтрагентНаименованиеПолное;
			ЮрЛицо = Истина;
			
		Иначе
			
			Область = Макет.ПолучитьОбласть("ФизЛицо");
			ДанныеПодписантаКонтрагент = АрендаАвтомобилей.ПолучитьДанныеПаспорта(Контрагент);
			ДанныеПодписантаКонтрагент.Вставить("ФИОПолностью", Контрагент.Наименование);
			ДанныеПодписантаКонтрагент.Вставить("КонтрагентПодписантФИО",
					ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Контрагент.Наименование));
			ЮрЛицо = Ложь;
			
		КонецЕсли;
		
		Область.Параметры.ПредставлениеОрганизации = ВыборкаДетальныеЗаписи.ОрганизацияНаименованиеПолное;
		
		Область.Параметры.Заполнить(ДанныеПодписантаОрганизации);
		Область.Параметры.Заполнить(ДанныеПодписантаКонтрагент);
		ТабличныйДокумент.Вывести(Область);
		
		ОбластьДокумента = Макет.ПолучитьОбласть("ПредметДоговора1");
		ТабличныйДокумент.Вывести(ОбластьДокумента);
		
		ОбластьДокумента = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьДокумента);
		
		// Выводим Табличную часть.
		ВыборкаТаблица = Результат[2].Выбрать();
		НомерСтроки = 1;
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		
		Пока ВыборкаТаблица.Следующий() Цикл
			
			ГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(ВыборкаТаблица.Автомобиль,
				Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер, ВыборкаДетальныеЗаписи.Дата);
			ГодВыпуска = ВыборкаТаблица.АвтомобильГодВыпуска;
			
			ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
			ОбластьСтрока.Параметры.ГосНомер = ГосНомер;
			ОбластьСтрока.Параметры.ГодВыпуска = ?(ЗначениеЗаполнено(ГодВыпуска), Формат(ГодВыпуска, "ДФ=yyyy"), "");
			ОбластьСтрока.Параметры.Заполнить(ВыборкаТаблица);
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		ОбластьДокумента = Макет.ПолучитьОбласть("ПредметДоговора2");
		
		ОбластьДокумента.Параметры.ДатаС        = Формат(ВыборкаДетальныеЗаписи.ДатаНачала,    "ДЛФ=D");
		ОбластьДокумента.Параметры.ДатаПо       = Формат(ВыборкаДетальныеЗаписи.ДатаОкончания, "ДЛФ=D");
		ОбластьДокумента.Параметры.МестоВыдачи  = ВыборкаДетальныеЗаписи.МестоВыдачи;
		ОбластьДокумента.Параметры.МестоПриемки = ВыборкаДетальныеЗаписи.МестоПриемки;
		
		ТабличныйДокумент.Вывести(ОбластьДокумента);
		
		// Выводим пункт 2.
		ОбластьДокумента = Макет.ПолучитьОбласть("Пункт2");
		ТабличныйДокумент.Вывести(ОбластьДокумента);
		
		// Выводим пункт 3.
		ОбластьДокумента = Макет.ПолучитьОбласть("Пункт3_1");
		
		СуммаДок  = ВыборкаДетальныеЗаписи.СуммаДокумента;
		ВалютаДок = ВыборкаДетальныеЗаписи.ВалютаДокумента;
		
		СуммаДокумента 		= СуммаДок;
		МассивПараметров 	= СтрРазделить(ВалютаДок.ПараметрыПрописи, ",");
		Если МассивПараметров.Количество() > 2 Тогда
			СтрокаПодстановки 	= СтрШаблон(";%4 %1 ;; %4 %2 ; %4 %3 ;", МассивПараметров[0],
				МассивПараметров[1], МассивПараметров[2], "%1");
			СуммаДокумента 		= СтрокаСЧислом(СтрокаПодстановки, СуммаДок, ВидЧисловогоЗначения.Количественное);
		КонецЕсли;
		
		ОбластьДокумента.Параметры.Сумма = СтрШаблон("%1 (%2)", СуммаДокумента,
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаДок, ВалютаДок));
		
		ТабличныйДокумент.Вывести(ОбластьДокумента);
		
		ЕстьДепозит = ВыборкаДетальныеЗаписи.ЕстьДепозит;
		НомерПункта = 4;
		
		Если ЕстьДепозит Тогда
			
			ОбластьДокумента = Макет.ПолучитьОбласть("Пункт3_2");
			НомерПункта      = 6;
			СуммаДепозита    = ВыборкаДетальныеЗаписи.СуммаДепозита;
			
			Если МассивПараметров.Количество() > 2 Тогда
				СуммаДеп = СтрокаСЧислом(СтрокаПодстановки, СуммаДепозита, ВидЧисловогоЗначения.Количественное);
			КонецЕсли;
			
			ОбластьДокумента.Параметры.СуммаДепозита = СтрШаблон(
					"%1 (%2)", СуммаДеп,
					РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаДепозита, ВалютаДок)
			);			
			
			ТабличныйДокумент.Вывести(ОбластьДокумента);
			
		КонецЕсли;
		
		ОбластьДокумента = Макет.ПолучитьОбласть("Пункт3_3");
		ОбластьДокумента.Параметры.НомерПункта = НомерПункта;
		ТабличныйДокумент.Вывести(ОбластьДокумента);
		
		// Выводим пункт 4.
		ОбластьДокумента = Макет.ПолучитьОбласть("Пункт4");
		ТабличныйДокумент.Вывести(ОбластьДокумента);
		
		// Выводим пункт 5.
		ОбластьДокумента = Макет.ПолучитьОбласть("Пункт5");
		ТабличныйДокумент.Вывести(ОбластьДокумента);
		
		// Выводим пункт 6.
		ОбластьДокумента = Макет.ПолучитьОбласть("Пункт6");
		ТабличныйДокумент.Вывести(ОбластьДокумента);
		
		// Выводим пункт 7.
		ОбластьДокумента = Макет.ПолучитьОбласть("Пункт7");
		
		ДопУсловия = НСтр("ru = 'не указаны'");
		Если ЗначениеЗаполнено(Документ.УсловияИспользования) Тогда
			
			ДопУсловия = Документ.УсловияИспользования;
			
		КонецЕсли;
		
		ОбластьДокумента.Параметры.ДопУсловия = ДопУсловия;
		
		ТабличныйДокумент.Вывести(ОбластьДокумента);
		
		// Выводим пункт 8.
		Организация = ВыборкаДетальныеЗаписи.Организация;
		
		Если ЮрЛицо Тогда
			
			ОбластьДокумента = Макет.ПолучитьОбласть("Пункт8_Юр");
			
			ОбластьДокумента.Параметры.ПочтовыйАдресАрендатор =
				УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Контрагент,
					Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, ТекущаяДатаСеанса());
			
			ОбластьДокумента.Параметры.АрендаторФИО = ДанныеПодписантаКонтрагент.ФИОПолностью;
			ОбластьДокумента.Параметры.РасшифровкаПодписиАрендатор = ДанныеПодписантаКонтрагент.КонтрагентПодписантФИО;
			
		Иначе
			
			ОбластьДокумента = Макет.ПолучитьОбласть("Пункт8_Физ");
			
			// Укажем данные подписанта, если он есть.
			Подписант = ?(
				ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПодписантОтКонтрагента),
				ВыборкаДетальныеЗаписи.ПодписантОтКонтрагента.Подписант,
				Контрагент
			);
			
			Если Подписант <> Контрагент Тогда
				
				Контрагент = Подписант;
				ДанныеПодписантаКонтрагент = АрендаАвтомобилей.ПолучитьДанныеПаспорта(Контрагент);
				ДанныеПодписантаКонтрагент.Вставить("ФИОПолностью", Контрагент.Наименование);
				ДанныеПодписантаКонтрагент.Вставить("КонтрагентПодписантФИО",
					ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Контрагент.Наименование));
			КонецЕсли;
			
			ОбластьДокумента.Параметры.ПаспортныеДанные = СтрШаблон(
				НСтр("ru = 'Паспорт: серия %1 № %2 выдан %3 %4'"),
				ДанныеПодписантаКонтрагент.ПаспортСерия,
				ДанныеПодписантаКонтрагент.ПаспортНомер,
				ДанныеПодписантаКонтрагент.ПаспортДатаВыдачи,
				ДанныеПодписантаКонтрагент.ПаспортКемВыдан
			);
			
			ОбластьДокумента.Параметры.АрендаторФИО = ДанныеПодписантаКонтрагент.ФИОПолностью;
			ОбластьДокумента.Параметры.РасшифровкаПодписиАрендатор = ДанныеПодписантаКонтрагент.КонтрагентПодписантФИО;
		КонецЕсли;
		
		// Арендатор.
		ОбластьДокумента.Параметры.ЮрАдресАрендатор = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Контрагент,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ТекущаяДатаСеанса());
		ОбластьДокумента.Параметры.АрендаторТелефон = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Контрагент,
			Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		ОбластьДокумента.Параметры.АрендаторEmail   = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Контрагент,
			Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, ТекущаяДатаСеанса());
		
		// Арендодатель.
		ОбластьДокумента.Параметры.ЮрАдресАрендодатель       =
			УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация,
				Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ТекущаяДатаСеанса());
		ОбластьДокумента.Параметры.ПочтовыйАдресАрендодатель =
			УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация,
				Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, ТекущаяДатаСеанса());
		ОбластьДокумента.Параметры.АрендодательТелефон       =
			УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация,
				Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, ТекущаяДатаСеанса());
		ОбластьДокумента.Параметры.АрендодательEmail         =
			УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация,
				Справочники.ВидыКонтактнойИнформации.EmailОрганизации, ТекущаяДатаСеанса());
		
		СтруктураПредставления = Новый Структура;
		СтруктураПредставления.Вставить("БанковскийСчет",   НСтр("ru = 'р/с '"));
		СтруктураПредставления.Вставить("Банк",             НСтр("ru = 'в банке'") + Символы.НПП);
		СтруктураПредставления.Вставить("БИК",              НСтр("ru = 'БИК '"));
		СтруктураПредставления.Вставить("КоррСчет",         НСтр("ru = 'к/с '"));
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ДополнительныеПараметры.ДляПечати = Истина;
		
		ОбластьДокумента.Параметры.БанковскиеРеквизиты = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Организация, СтруктураПредставления, ДополнительныеПараметры);
			
		ОбластьДокумента.Параметры.БанковскиеРеквизитыАрендатор = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
				Контрагент, СтруктураПредставления, ДополнительныеПараметры);
		
		ОбластьДокумента.Параметры.АрендодательДолжность = ДанныеПодписантаОрганизации.ОрганизацияПодписантДолжность;
		ОбластьДокумента.Параметры.АрендодательФИО       = ДанныеПодписантаОрганизации.ФИОПолностью;
		ОбластьДокумента.Параметры.РасшифровкаПодписиАрендодатель = ДанныеПодписантаОрганизации.ОрганизацияПодписантФИО;
		ТабличныйДокумент.Вывести(ОбластьДокумента);
		
		ТабличныйДокумент.ВерхнийКолонтитул.НачальнаяСтраница = 1;
		ТабличныйДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		ТабличныйДокумент.ВерхнийКолонтитул.ТекстСправа = НСтр("ru = 'Страница [&НомерСтраницы] из [&СтраницВсего]'");
		ТабличныйДокумент.ВерхнийКолонтитул.ТекстСлева = НСтр("ru = 'Договор № '") + Документ.Номер;
		ТабличныйДокумент.РазмерКолонтитулаСверху = 20;
		ТабличныйДокумент.ВерхнийКолонтитул.Выводить = Истина;
		
		// Блок области
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьДоговорБезвозмездногоИспользования(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ДоговорАренды_ДоговорБезвозмездногоИспользования";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;

	ПервыйДокумент = Истина;
	
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если Документ.ВидАренды.ТипАренды <> Перечисления.ТипыРемонта.Бесплатный Тогда
			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Печатная форма доступна только для бесплатного типа аренды'"));
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ПервыйДокумент = Ложь;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ДоговорАренды.ПФ_MXL_ДоговорБезвозмездногоИспользования");
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДоговорАренды.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
			|	ДоговорАренды.ПодписантОтОрганизации КАК ПодписантОтОрганизации,
			|	ДоговорАренды.ПодписантОтКонтрагента КАК ПодписантОтКонтрагента,
			|	ДоговорАренды.Организация КАК Организация,
			|	ДоговорАренды.Дата КАК Дата,
			|	ДоговорАренды.ДатаНачала КАК ДатаНачала,
			|	ДоговорАренды.ДатаОкончания КАК ДатаОкончания,
			|	ДоговорАренды.МестоВыдачиАдрес КАК МестоВыдачи,
			|	ДоговорАренды.МестоПриемкиАдрес КАК МестоПриемки,
			|	ДоговорАренды.ВалютаДокумента КАК ВалютаДокумента,
			|	ДоговорАренды.СуммаДокумента КАК СуммаДокумента,
			|	ДоговорАренды.ВидАренды.ДепозитИспользование КАК ЕстьДепозит,
			|	ДоговорАренды.СуммаДепозита КАК СуммаДепозита,
			|	ВЫБОР
			|		КОГДА ДоговорАренды.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|			ТОГДА ДоговорАренды.Заказчик
			|		ИНАЧЕ ДоговорАренды.Контрагент
			|	КОНЕЦ КАК Контрагент
			|ПОМЕСТИТЬ ВТ_Данные
			|ИЗ
			|	Документ.ДоговорАренды КАК ДоговорАренды
			|ГДЕ
			|	ДоговорАренды.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Данные.ОрганизацияНаименованиеПолное КАК ОрганизацияНаименованиеПолное,
			|	ВТ_Данные.ПодписантОтОрганизации КАК ПодписантОтОрганизации,
			|	ВТ_Данные.ПодписантОтКонтрагента КАК ПодписантОтКонтрагента,
			|	ВТ_Данные.Организация КАК Организация,
			|	ВТ_Данные.Дата КАК Дата,
			|	ВТ_Данные.ДатаНачала КАК ДатаНачала,
			|	ВТ_Данные.ДатаОкончания КАК ДатаОкончания,
			|	ВТ_Данные.МестоВыдачи КАК МестоВыдачи,
			|	ВТ_Данные.МестоПриемки КАК МестоПриемки,
			|	ВТ_Данные.ВалютаДокумента КАК ВалютаДокумента,
			|	ВТ_Данные.СуммаДокумента КАК СуммаДокумента,
			|	ВТ_Данные.ЕстьДепозит КАК ЕстьДепозит,
			|	ВТ_Данные.СуммаДепозита КАК СуммаДепозита,
			|	ВТ_Данные.Контрагент КАК Контрагент,
			|	ВТ_Данные.Контрагент.ФормаСобственности КАК КонтрагентФормаСобственности,
			|	ВТ_Данные.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное
			|ИЗ
			|	ВТ_Данные КАК ВТ_Данные
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДоговорАрендыАвтомобили.Автомобиль КАК Автомобиль,
			|	ДоговорАрендыАвтомобили.Автомобиль.ГодВыпуска КАК АвтомобильГодВыпуска,
			|	ДоговорАрендыАвтомобили.Автомобиль.Модель КАК АвтомобильМодель,
			|	ДоговорАрендыАвтомобили.Автомобиль.Марка КАК АвтомобильМарка,
			|	ДоговорАрендыАвтомобили.Автомобиль.Цвет КАК АвтомобильЦвет
			|ИЗ
			|	Документ.ДоговорАренды.Автомобили КАК ДоговорАрендыАвтомобили";
		
		Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
		
		Результат = Запрос.ВыполнитьПакет();
		
		ВыборкаДетальныеЗаписи = Результат[1].Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		
		ДанныеПодписантаОрганизации = АрендаАвтомобилей.ДанныеПодписантаОрганизации(ВыборкаДетальныеЗаписи);
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаДоговора");
		
		МассивПодразделения = Новый Массив();
		МассивПодразделения.Добавить(Документ.Организация);
		КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивПодразделения,
			Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, ТекущаяДатаСеанса());
		
		Если КонтактнаяИнформация.Количество() > 0 Тогда
			Адрес = РаботаСАдресами.ГородАдресаКонтактнойИнформации(КонтактнаяИнформация[0].ЗначенияПолей);
			
			Если Адрес = "" И СтрНайти(КонтактнаяИнформация[0].ЗначенияПолей, "Москва") Тогда
				Адрес = НСтр("ru = 'г. Москва'");
			КонецЕсли;
			
		Иначе
			Адрес = "";
		КонецЕсли;
		
		ОбластьШапка.Параметры.НомерДоговора = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		ОбластьШапка.Параметры.Дата          = Формат(ВыборкаДетальныеЗаписи.Дата, "ДЛФ=DD");
		ОбластьШапка.Параметры.Город         = Адрес;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		Контрагент = ВыборкаДетальныеЗаписи.Контрагент;
		
		Если ВыборкаДетальныеЗаписи.КонтрагентФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо Тогда
			
			Область = Макет.ПолучитьОбласть("ЮрЛицо");
			ДанныеПодписантаКонтрагент  = АрендаАвтомобилей.ДанныеПодписантаКонтрагента(ВыборкаДетальныеЗаписи);
			Область.Параметры.КонтрагентНаименование   = ВыборкаДетальныеЗаписи.КонтрагентНаименованиеПолное;
			ЮрЛицо = Истина;
			
		Иначе
			
			Область = Макет.ПолучитьОбласть("ФизЛицо");
			ДанныеПодписантаКонтрагент = АрендаАвтомобилей.ПолучитьДанныеПаспорта(Контрагент);
			ДанныеПодписантаКонтрагент.Вставить("ФИОПолностью", Контрагент.Наименование);
			ДанныеПодписантаКонтрагент.Вставить("КонтрагентПодписантФИО",
					ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Контрагент.Наименование));
			ЮрЛицо = Ложь;
			
		КонецЕсли;
		
		Область.Параметры.ПредставлениеОрганизации = ВыборкаДетальныеЗаписи.ОрганизацияНаименованиеПолное;
		
		Область.Параметры.Заполнить(ДанныеПодписантаОрганизации);
		Область.Параметры.Заполнить(ДанныеПодписантаКонтрагент);
		ТабличныйДокумент.Вывести(Область);
		
		ОбластьДокумента = Макет.ПолучитьОбласть("Пункт1");
		
		ВыборкаТаблица = Результат[2].Выбрать();
		
		Если ВыборкаТаблица.Следующий() Тогда
			
			ГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(ВыборкаТаблица.Автомобиль,
				Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер, ВыборкаДетальныеЗаписи.Дата);
			ГодВыпуска = ВыборкаТаблица.АвтомобильГодВыпуска;
			
			ОбластьДокумента.Параметры.ГосНомер = ГосНомер;
			ОбластьДокумента.Параметры.ГодВыпуска = ?(ЗначениеЗаполнено(ГодВыпуска), Формат(ГодВыпуска, "ДФ=yyyy"), "");
			ОбластьДокумента.Параметры.Заполнить(ВыборкаТаблица);
			
		КонецЕсли;
		
		ОбластьДокумента.Параметры.ДатаС        = Формат(ВыборкаДетальныеЗаписи.ДатаНачала,    "ДЛФ=D");
		ОбластьДокумента.Параметры.ДатаПо       = Формат(ВыборкаДетальныеЗаписи.ДатаОкончания, "ДЛФ=D");
		ОбластьДокумента.Параметры.МестоВыдачи  = ВыборкаДетальныеЗаписи.МестоВыдачи;
		ОбластьДокумента.Параметры.МестоПриемки = ВыборкаДетальныеЗаписи.МестоПриемки;
		
		ТабличныйДокумент.Вывести(ОбластьДокумента);
		
		// Выводим пункт 2.
		ОбластьДокумента = Макет.ПолучитьОбласть("Пункт2");
		ТабличныйДокумент.Вывести(ОбластьДокумента);
		
		// Выводим пункт 3.
		ОбластьДокумента = Макет.ПолучитьОбласть("Пункт3");
		ТабличныйДокумент.Вывести(ОбластьДокумента);
		
		Если ВыборкаДетальныеЗаписи.ЕстьДепозит Тогда
			
			ОбластьДокумента = Макет.ПолучитьОбласть("Пункт3_2");
			СуммаДепозита    = ВыборкаДетальныеЗаписи.СуммаДепозита;
			
			ВалютаДок = ВыборкаДетальныеЗаписи.ВалютаДокумента;
			
			МассивПараметров = СтрРазделить(ВалютаДок.ПараметрыПрописи, ",");
			СтрокаПодстановки = СтрШаблон(";%4 %1 ;; %4 %2 ; %4 %3 ;", МассивПараметров[0],
				МассивПараметров[1], МассивПараметров[2], "%1");
			
			ОбластьДокумента.Параметры.СуммаДепозита = СтрШаблон(
					"%1 (%2)",
					СтрокаСЧислом(СтрокаПодстановки, СуммаДепозита, ВидЧисловогоЗначения.Количественное),
					РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаДепозита, ВалютаДок)
			);
			
			ТабличныйДокумент.Вывести(ОбластьДокумента);
			
		КонецЕсли;
		
		// Выводим пункт 4.
		ОбластьДокумента = Макет.ПолучитьОбласть("Пункт4");
		ТабличныйДокумент.Вывести(ОбластьДокумента);
		
		// Выводим пункт 5.
		ОбластьДокумента = Макет.ПолучитьОбласть("Пункт5");
		ТабличныйДокумент.Вывести(ОбластьДокумента);
		
		// Выводим пункт 6.
		ОбластьДокумента = Макет.ПолучитьОбласть("Пункт6");
		ТабличныйДокумент.Вывести(ОбластьДокумента);
		
		// Выводим пункт 7.
		ОбластьДокумента = Макет.ПолучитьОбласть("Пункт7");
		
		ДопУсловия = НСтр("ru = 'не указаны'");
		Если ЗначениеЗаполнено(Документ.УсловияИспользования) Тогда
			
			ДопУсловия = Документ.УсловияИспользования;
			
		КонецЕсли;
		
		ОбластьДокумента.Параметры.ДопУсловия = ДопУсловия;
		
		ТабличныйДокумент.Вывести(ОбластьДокумента);
		
		// Выводим пункт 8.
		Организация = ВыборкаДетальныеЗаписи.Организация;
		
		Если ЮрЛицо Тогда
			
			ОбластьДокумента = Макет.ПолучитьОбласть("Пункт8_Юр");
			
			ОбластьДокумента.Параметры.ПочтовыйАдресАрендатор =
				УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Контрагент,
				Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, ТекущаяДатаСеанса());
			
			ОбластьДокумента.Параметры.АрендаторФИО = ДанныеПодписантаКонтрагент.ФИОПолностью;
			ОбластьДокумента.Параметры.РасшифровкаПодписиАрендатор = ДанныеПодписантаКонтрагент.КонтрагентПодписантФИО;
			
		Иначе
			
			ОбластьДокумента = Макет.ПолучитьОбласть("Пункт8_Физ");
			
			// Укажем данные подписанта, если он есть.
			Подписант = ?(
				ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПодписантОтКонтрагента),
				ВыборкаДетальныеЗаписи.ПодписантОтКонтрагента.Подписант,
				Контрагент
			);
			
			Если Подписант <> Контрагент Тогда
				
				Контрагент = Подписант;
				ДанныеПодписантаКонтрагент = АрендаАвтомобилей.ПолучитьДанныеПаспорта(Контрагент);
				ДанныеПодписантаКонтрагент.Вставить("ФИОПолностью", Контрагент.Наименование);
				ДанныеПодписантаКонтрагент.Вставить("КонтрагентПодписантФИО",
					ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Контрагент.Наименование));
			КонецЕсли;
			
			ОбластьДокумента.Параметры.ПаспортныеДанные = СтрШаблон(
				НСтр("ru = 'Паспорт: серия %1 № %2 выдан %3 %4'"),
				ДанныеПодписантаКонтрагент.ПаспортСерия,
				ДанныеПодписантаКонтрагент.ПаспортНомер,
				ДанныеПодписантаКонтрагент.ПаспортДатаВыдачи,
				ДанныеПодписантаКонтрагент.ПаспортКемВыдан
			);
			
			ОбластьДокумента.Параметры.АрендаторФИО = ДанныеПодписантаКонтрагент.ФИОПолностью;
			ОбластьДокумента.Параметры.РасшифровкаПодписиАрендатор = ДанныеПодписантаКонтрагент.КонтрагентПодписантФИО;
			
		КонецЕсли;
		
		// Арендатор.
		ОбластьДокумента.Параметры.ЮрАдресАрендатор = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Контрагент,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ТекущаяДатаСеанса());
		ОбластьДокумента.Параметры.АрендаторТелефон = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Контрагент,
			Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		ОбластьДокумента.Параметры.АрендаторEmail   = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Контрагент,
			Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, ТекущаяДатаСеанса());
		
		// Арендодатель.
		ОбластьДокумента.Параметры.ЮрАдресАрендодатель       =
			УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация,
				Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ТекущаяДатаСеанса());
		ОбластьДокумента.Параметры.ПочтовыйАдресАрендодатель =
			УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация,
				Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, ТекущаяДатаСеанса());
		ОбластьДокумента.Параметры.АрендодательТелефон       =
			УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация,
				Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, ТекущаяДатаСеанса());
		ОбластьДокумента.Параметры.АрендодательEmail         =
			УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация,
				Справочники.ВидыКонтактнойИнформации.EmailОрганизации, ТекущаяДатаСеанса());
		
		СтруктураПредставления = Новый Структура;
		СтруктураПредставления.Вставить("БанковскийСчет",   НСтр("ru = 'р/с '"));
		СтруктураПредставления.Вставить("Банк",             НСтр("ru = 'в банке'") + Символы.НПП);
		СтруктураПредставления.Вставить("БИК",              НСтр("ru = 'БИК '"));
		СтруктураПредставления.Вставить("КоррСчет",         НСтр("ru = 'к/с '"));
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ДополнительныеПараметры.ДляПечати = Истина;
		
		ОбластьДокумента.Параметры.БанковскиеРеквизиты = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Организация, СтруктураПредставления, ДополнительныеПараметры);
			
		ОбластьДокумента.Параметры.БанковскиеРеквизитыАрендатор = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
				Контрагент, СтруктураПредставления, ДополнительныеПараметры);
		
		ОбластьДокумента.Параметры.АрендодательДолжность = ДанныеПодписантаОрганизации.ОрганизацияПодписантДолжность;
		ОбластьДокумента.Параметры.АрендодательФИО       = ДанныеПодписантаОрганизации.ФИОПолностью;
		ОбластьДокумента.Параметры.РасшифровкаПодписиАрендодатель = ДанныеПодписантаОрганизации.ОрганизацияПодписантФИО;
		ТабличныйДокумент.Вывести(ОбластьДокумента);
		
		ТабличныйДокумент.ВерхнийКолонтитул.НачальнаяСтраница = 1;
		ТабличныйДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		ТабличныйДокумент.ВерхнийКолонтитул.ТекстСправа = НСтр("ru = 'Страница [&НомерСтраницы] из [&СтраницВсего]'");
		ТабличныйДокумент.ВерхнийКолонтитул.ТекстСлева = НСтр("ru = 'Договор № '") + Документ.Номер;
		ТабличныйДокумент.РазмерКолонтитулаСверху = 20;
		ТабличныйДокумент.ВерхнийКолонтитул.Выводить = Истина;
		
		// Блок области
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьАктПриемаПередачиТранспортногоСредства(МассивОбъектов, ОбъектыПечати, Вид)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если Вид = "Прием" Тогда
		
		ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ДоговорАренды_АктПриемаПередачиТранспортногоСредства";
		ИмяМакета = "Документ.ДоговорАренды.ПФ_MXL_АктПриемаПередачиТранспортногоСредства";
		
	Иначе
		
		ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ДоговорАренды_АктВозвратаТранспортногоСредства";
		ИмяМакета = "Документ.ДоговорАренды.ПФ_MXL_АктВозвратаТранспортногоСредства";
		
	КонецЕсли;
	
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	РезультатЗапроса = ДанныеДокументовДляПечатиАктаПриемаПередачиТранспортногоСредства(МассивОбъектов);
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат ТабличныйДокумент;
		
	КонецЕсли;
	
	ДанныеДокументовАренды = РезультатЗапроса.Выбрать();
	ПервыйДокумент = Истина;
	
	Пока ДанныеДокументовАренды.Следующий() Цикл
		
		ТаблицаАвтомобилей = ДанныеДокументовАренды.Автомобили.Выгрузить();
		
		Если ТаблицаАвтомобилей.Количество() = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВывестиДокументАктПриемаПередачиТранспортногоСредства(ДанныеДокументовАренды, ИмяМакета, ТаблицаАвтомобилей,
			ТабличныйДокумент);
			
		// Блок области
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ДанныеДокументовАренды.Документ
		);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ДанныеДокументовДляПечатиАктаПриемаПередачиТранспортногоСредства(ДокументыДляПечати)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДоговорАренды.Ссылка КАК Документ,
		|	ДоговорАренды.Дата КАК Дата,
		|	ДоговорАренды.Номер КАК Номер,
		|	ДоговорАренды.Контрагент КАК Контрагент,
		|	ДоговорАренды.Контрагент.Наименование КАК КонтрагентНаименование,
		|	ДоговорАренды.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
		|	ДоговорАренды.Организация КАК Организация,
		|	ДоговорАренды.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	ДоговорАренды.ПодписантОтКонтрагента КАК ПодписантОтКонтрагента,
		|	ДоговорАренды.ПодписантОтОрганизации КАК ПодписантОтОрганизации,
		|	ДоговорАренды.Контрагент.ФормаСобственности КАК КонтрагентФормаСобственности,
		|	ДоговорАренды.Автомобили.(
		|		Автомобиль КАК Автомобиль,
		|		Автомобиль.VIN КАК АвтомобильVIN,
		|		Автомобиль.Цвет КАК АвтомобильЦвет,
		|		Автомобиль.Модель КАК АвтомобильМодель,
		|		Автомобиль.Марка КАК АвтомобильМарка,
		|		Автомобиль.ГодВыпуска КАК АвтомобильГодВыпуска
		|	) КАК Автомобили,
		|	ДоговорАренды.Заказчик КАК Заказчик
		|ИЗ
		|	Документ.ДоговорАренды КАК ДоговорАренды
		|ГДЕ
		|	ДоговорАренды.Ссылка В(&СписокДокументов)"
	);
	Запрос.УстановитьПараметр("СписокДокументов", ДокументыДляПечати);
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ВывестиДокументАктПриемаПередачиТранспортногоСредства(ДанныеДокументовАренды,
                                                                ИмяМакета,
                                                                ТаблицаАвтомобилей,
                                                                ТабличныйДокумент)
		
	Организация = ДанныеДокументовАренды.Организация;
	Контрагент = ДанныеДокументовАренды.Контрагент;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		
		Контрагент = ДанныеДокументовАренды.Заказчик;
		
	КонецЕсли;
	
	МассивПодразделения = Новый Массив();
	МассивПодразделения.Добавить(Организация);
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивПодразделения,
	Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, ТекущаяДатаСеанса());
	
	Если КонтактнаяИнформация.Количество() > 0 Тогда
		Адрес = РаботаСАдресами.ГородАдресаКонтактнойИнформации(КонтактнаяИнформация[0].ЗначенияПолей);
		
		Если Адрес = "" И СтрНайти(КонтактнаяИнформация[0].ЗначенияПолей, "Москва") Тогда
			Адрес = "г. Москва";
		КонецЕсли;
		
	Иначе
		Адрес = "";
	КонецЕсли;
	
	ДанныеПодписантаОрганизации = АрендаАвтомобилей.ДанныеПодписантаОрганизации(ДанныеДокументовАренды);
	ДанныеПодписантаОрганизации.Вставить("ПредставлениеОрганизации",
	ДанныеДокументовАренды.ОрганизацияНаименованиеПолное);
	
	Если Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо Тогда
		
		ИмяОбласти = "ЮрЛицо";
		ДанныеПодписантаКонтрагент  = АрендаАвтомобилей.ДанныеПодписантаКонтрагента(ДанныеДокументовАренды);
		ДанныеПодписантаКонтрагент.Вставить("КонтрагентНаименование", ДанныеДокументовАренды.КонтрагентНаименованиеПолное);
		ЮрЛицо = Истина;
		
	Иначе
		
		КонтрагентНаименование = Контрагент.Наименование;
		ИмяОбласти = "ФизЛицо";
		ДанныеПодписантаКонтрагент = АрендаАвтомобилей.ПолучитьДанныеПаспорта(Контрагент);
		ДанныеПодписантаКонтрагент.Вставить("ФИОПолностью", КонтрагентНаименование);
		ДанныеПодписантаКонтрагент.Вставить("КонтрагентПодписантФИО",
		ФизическиеЛицаКлиентСервер.ФамилияИнициалы(КонтрагентНаименование));
		ЮрЛицо = Ложь;
		
	КонецЕсли;
	
	ДатаДокумента = ДанныеДокументовАренды.Дата;
	СтруктураДокумента = Новый Структура;
	СтруктураДокумента.Вставить("НомерДоговора",
	УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ДанныеДокументовАренды.Документ));
	СтруктураДокумента.Вставить("ДатаДоговора",  Формат(ДатаДокумента, "ДЛФ=DD"));
	СтруктураДокумента.Вставить("Город",         Адрес);
	
	ВыборкаАвтомобили = ПолучитьДанныеАвтомобиля(ТаблицаАвтомобилей, ДатаДокумента);
	
	ПервыйАвтомобиль = Истина;
	
	Пока ВыборкаАвтомобили.Следующий() Цикл
		
		Если Не ПервыйАвтомобиль Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйАвтомобиль = Ложь;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы(ИмяМакета);
		
		// Выводим шапку.
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.Заполнить(СтруктураДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		// Выводим область с описание Арендатора и Арендодателя.
		ОбластьДокумента = Макет.ПолучитьОбласть(ИмяОбласти);
		ОбластьДокумента.Параметры.Заполнить(ДанныеПодписантаОрганизации);
		ОбластьДокумента.Параметры.Заполнить(ДанныеПодписантаКонтрагент);
		
		ТабличныйДокумент.Вывести(ОбластьДокумента);
		
		// Выводим область с телом договора.
		
		ОбластьТело = Макет.ПолучитьОбласть("Тело");
		ОбластьТело.Параметры.Заполнить(СтруктураДокумента);
		ОбластьТело.Параметры.Заполнить(ВыборкаАвтомобили);
		
		ОбластьТело.Параметры.ГосНомер =
		Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(ВыборкаАвтомобили.Автомобиль,
		Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер, ДатаДокумента);
		ОбластьТело.Параметры.ГодВыпуска =
		?(ЗначениеЗаполнено(ВыборкаАвтомобили.АвтомобильГодВыпуска),
		Формат(ВыборкаАвтомобили.АвтомобильГодВыпуска, "ДФ=yyyy"), "");
		ТабличныйДокумент.Вывести(ОбластьТело);
		
		// Выводим таблицу доп. оборудования и запчастей.
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		СтрокаТаблицы = Макет.ПолучитьОбласть("Строка");
		
		Если ВыборкаАвтомобили.Количество > 0 Тогда
			
			НомерСтроки = 1;
			
			ДетальныеЗаписи = ВыборкаАвтомобили.Выбрать();
			Пока ДетальныеЗаписи.Следующий() Цикл
				
				СтрокаТаблицы.Параметры.НомерСтроки = НомерСтроки;
				СтрокаТаблицы.Параметры.Заполнить(ДетальныеЗаписи);
				НомерСтроки = НомерСтроки + 1;
				ТабличныйДокумент.Вывести(СтрокаТаблицы);
				
			КонецЦикла;
			
		Иначе
			
			СтрокаТаблицы.Параметры.НомерСтроки = 1;
			ТабличныйДокумент.Вывести(СтрокаТаблицы);
			СтрокаТаблицы.Параметры.НомерСтроки = 2;
			ТабличныйДокумент.Вывести(СтрокаТаблицы);
			СтрокаТаблицы.Параметры.НомерСтроки = 3;
			ТабличныйДокумент.Вывести(СтрокаТаблицы);
			
		КонецЕсли;
		
		//
		ОбластьДокумента = Макет.ПолучитьОбласть("Документы");
		
		СРТС = ВыборкаАвтомобили.СРТС;
		ОбластьДокумента.Параметры.НомерСРТС = ?(ЗначениеЗаполнено(СРТС), СРТС.Номер, "НЕ ЗАПОЛНЕНО");
		ОбластьДокумента.Параметры.ДатаСРТС = ?(ЗначениеЗаполнено(СРТС), Формат(СРТС.ДатаВыдачи, "ДЛФ=D"), "НЕ ЗАПОЛНЕНО");
		ТабличныйДокумент.Вывести(ОбластьДокумента);
		
		//
		ОбластьДокумента = Макет.ПолучитьОбласть("Подписи");
		
		ОбластьДокумента.Параметры.АрендодательФИО         = ДанныеПодписантаОрганизации.ФИОПолностью;
		ОбластьДокумента.Параметры.РасшифровкаАрендодатель = ДанныеПодписантаОрганизации.ОрганизацияПодписантФИО;
		
		Подписант = ?(
		ЗначениеЗаполнено(ДанныеДокументовАренды.ПодписантОтКонтрагента),
		ДанныеДокументовАренды.ПодписантОтКонтрагента.Подписант,
		Контрагент
		);
		
		Если Подписант <> Контрагент Тогда
			ДанныеПодписантаКонтрагент = АрендаАвтомобилей.ПолучитьДанныеПаспорта(Подписант);
			ДанныеПодписантаКонтрагент.Вставить("ФИОПолностью", Подписант.Наименование);
			ДанныеПодписантаКонтрагент.Вставить("КонтрагентПодписантФИО",
			ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Подписант.Наименование));
		КонецЕсли;
		
		ОбластьДокумента.Параметры.АрендаторФИО         = ДанныеПодписантаКонтрагент.ФИОПолностью;
		ОбластьДокумента.Параметры.РасшифровкаАрендатор = ДанныеПодписантаКонтрагент.КонтрагентПодписантФИО;
		
		ОбластьДокумента.Параметры.МП = ?(ЮрЛицо, "М.П.", "");
		
		ТабличныйДокумент.Вывести(ОбластьДокумента);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПечатьДоверенность(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ДоговорАренды_Доверенность";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ПервыйДокумент = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорАренды.Организация КАК Организация,
		|	ДоговорАренды.Ссылка КАК Ссылка,
		|	ДоговорАренды.Водители.(
		|		Водитель КАК Водитель,
		|		Паспорт КАК Паспорт
		|	) КАК Водители,
		|	ДоговорАренды.Автомобили.(
		|		Автомобиль КАК Автомобиль,
		|		Автомобиль.Марка КАК Марка,
		|		Автомобиль.Модель КАК Модель,
		|		Автомобиль.Цвет КАК Цвет,
		|		Автомобиль.ГодВыпуска КАК АвтомобильГодВыпуска
		|	) КАК Автомобили,
		|	ДоговорАренды.ДатаНачала КАК ДатаНачала,
		|	ДоговорАренды.ДатаОкончания КАК ДатаОкончания,
		|	ДоговорАренды.Дата КАК Дата,
		|	ДоговорАренды.Организация.Представление КАК ОрганизацияПредставление
		|ИЗ
		|	Документ.ДоговорАренды КАК ДоговорАренды
		|ГДЕ
		|	ДоговорАренды.Ссылка В(&СписокДокументов)";
	
	Запрос.УстановитьПараметр("СписокДокументов", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Документ = РезультатЗапроса.Выбрать();
	
	Пока Документ.Следующий() Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ПервыйДокумент = Ложь;
		
		Организация   = Документ.Организация;
		ДатаНачала    = Формат(Документ.ДатаНачала, "ДЛФ=D");
		ДатаОкончания = Формат(Документ.ДатаОкончания, "ДЛФ=D");
		ДатаДокумента = Документ.Дата;
		Автомобили    = Документ.Автомобили.Выбрать();
		Водители      = Документ.Водители.Выбрать();
		
		МассивПодразделения = Новый Массив();
		МассивПодразделения.Добавить(Организация);
		КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивПодразделения,
			Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, ТекущаяДатаСеанса());
		
		Если КонтактнаяИнформация.Количество() > 0 Тогда
			Адрес = РаботаСАдресами.ГородАдресаКонтактнойИнформации(КонтактнаяИнформация[0].ЗначенияПолей);
			
			Если Адрес = "" И СтрНайти(КонтактнаяИнформация[0].ЗначенияПолей, "Москва") Тогда
				Адрес = "г. Москва";
			КонецЕсли;
			
		Иначе
			Адрес = "";
		КонецЕсли;
		
		// Получаем руководителя.
		СтруктураОтбора = Новый Структура("Организация, Объект",
			Организация,
			Перечисления.ВидыОбъектовСведений.Руководитель);
		СтруктураСведений = РегистрыСведений.СведенияКомпании.ПолучитьПоследнее(НачалоДня(Документ.Дата), СтруктураОтбора);
		
		ОрганизацияГенДирРП = "НЕ ЗАПОЛНЕНО";
		ОрганизацияГенДирФИО = "НЕ ЗАПОЛНЕНО";
		ОрганизацияГенДир   = СтруктураСведений.Значение;
		Если ЗначениеЗаполнено(ОрганизацияГенДир) Тогда
			ОрганизацияГенДирФИО = ОрганизацияГенДир.Наименование;
			ОрганизацияГенДирРП =
				СклонениеПредставленийОбъектов.ПросклонятьФИО(ОрганизацияГенДир.Наименование, 2, ОрганизацияГенДир);
		КонецЕсли;
		
		СтруктураДокумента = Новый Структура();
		СтруктураДокумента.Вставить("Дата", Формат(Документ.Дата, "ДЛФ=DD"));
		СтруктураДокумента.Вставить("Город", Адрес);
		СтруктураДокумента.Вставить("ПредставлениеОрганизации", Документ.ОрганизацияПредставление);
		СтруктураДокумента.Вставить("ОрганизацияПодписантРП", ОрганизацияГенДирРП);
		СтруктураДокумента.Вставить("ОрганизацияГенДирФИО", ОрганизацияГенДирФИО);
		СтруктураДокумента.Вставить("ДатаС", ДатаНачала);
		СтруктураДокумента.Вставить("ДатаПо", ДатаОкончания);
		
		СписокВодителей = Новый Структура;
		Номер = 1;
		Пока Водители.Следующий() Цикл
			
			ДанныеПаспорта = АрендаАвтомобилей.ПолучитьДанныеПаспорта(Водители.Водитель, Водители.Паспорт, 4);
			ДанныеПаспорта.Вставить("НомерСтроки", Номер);
			СписокВодителей.Вставить("Водитель" + Номер, ДанныеПаспорта);
			Номер = Номер + 1;
			
		КонецЦикла;
		
		СтруктураДокумента.Вставить("СписокВодителей", СписокВодителей);
		
		ПервыйАвтомобиль = Истина;
		Пока Автомобили.Следующий() Цикл
			
			Если Не ПервыйАвтомобиль Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйАвтомобиль = Ложь;
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ДоговорАренды.ПФ_MXL_Доверенность");
			
			Шапка = Макет.ПолучитьОбласть("Шапка");
			Шапка.Параметры.Заполнить(СтруктураДокумента);
			Шапка.Параметры.Заполнить(Автомобили);
			Шапка.Параметры.ГодВыпуска = ?(ЗначениеЗаполнено(Автомобили.АвтомобильГодВыпуска),
				Формат(Автомобили.АвтомобильГодВыпуска, "ДФ=yyyy"), "");
			Шапка.Параметры.ГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
											Автомобили.Автомобиль,
											Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер,
											ДатаДокумента
										);
			
			ТабличныйДокумент.Вывести(Шапка);
			
			СтрокаВодитель = Макет.ПолучитьОбласть("Водитель");
			
			Для Каждого Водитель Из СтруктураДокумента.СписокВодителей Цикл
				
				СтрокаВодитель.Параметры.Заполнить(Водитель.Значение);
				ТабличныйДокумент.Вывести(СтрокаВодитель);
				
			КонецЦикла;
			
			Тело = Макет.ПолучитьОбласть("Тело");
			Тело.Параметры.Заполнить(СтруктураДокумента);
			ТабличныйДокумент.Вывести(Тело);
			
			Подвал = Макет.ПолучитьОбласть("Подвал");
			Подвал.Параметры.ГенеральныйДиректорФИО = СтруктураДокумента.ОрганизацияГенДирФИО;
			ТабличныйДокумент.Вывести(Подвал);
			
		КонецЦикла;
		
		// Блок области
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьТарификацияАренды(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ДоговорАренды_ТарификацияАренды";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ПервыйДокумент = Истина;
		
	Для Каждого Документ Из МассивОбъектов Цикл
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВидыАрендыДополнительныеУслуги.Номенклатура КАК Номенклатура
			|ИЗ
			|	Справочник.ВидыАренды.ДополнительныеУслуги КАК ВидыАрендыДополнительныеУслуги
			|ГДЕ
			|	ВидыАрендыДополнительныеУслуги.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Документ.ВидАренды);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			ЕстьВсеУслуги = Ложь;
		Иначе
			ВсеУслуги = РезультатЗапроса.Выгрузить();
			ЕстьВсеУслуги = Истина;
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		ПервыйДокумент = Ложь;
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, 
			"ВалютаДокумента.Наименование,ВалютаДокумента,ТипЦен,Дата,КурсДокумента,ПодразделениеКомпании,ТипЦен.ЦенаВключаетНДС");
		
		ВалютаДокумента =  РеквизитыДокумента.ВалютаДокументаНаименование;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ДоговорАренды.ПФ_MXL_ТарификацияАренды");
		
		ПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаДокумента");
		ОбластьШапка.Параметры.ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ШапкаАвтомобили = Макет.ПолучитьОбласть("ШапкаАвтомобили");
		СтрокаАвтомобили = Макет.ПолучитьОбласть("СтрокаАвтомобиль");
		СтрокаПериод = Макет.ПолучитьОбласть("СтрокаПериод");
		
		НомерСтраницы = 1;
		НомерСтраницыПредыдущий = 2;
		ШапкаАвтомобили.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
		ШапкаАвтомобили.Параметры.ВалютаДокумента = ВалютаДокумента;
		ШапкаАвтомобили.Параметры.ЗаголовокЦены = ТарификацияАрендыЗаголовокЦены(РеквизитыДокумента.ТипЦенЦенаВключаетНДС);
		ТабличныйДокумент.Вывести(ШапкаАвтомобили);
		
		ТарификацияИзДокумента = Документ.Тарификация.Выгрузить();
		
		НомерСтроки = 1;
		
		МассивПериодов = АрендаАвтомобилей.МассивПериодов();
		
		КоличествоЭлементов = МассивПериодов.Количество() - 1;
		
		Для Каждого Строка Из ТарификацияИзДокумента Цикл
			
			СтрокаАвтомобили.Параметры.НомерСтроки = НомерСтроки;
			СтрокаАвтомобили.Параметры.Автомобиль = Строка.Автомобиль;
			НомерСтроки = НомерСтроки + 1;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, СтрокаАвтомобили,
					ШапкаАвтомобили, , НомерСтраницы, , Документ);
					
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ШапкаАвтомобили.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
				
			Для Сч = 0 По КоличествоЭлементов Цикл
				
				Период = МассивПериодов[КоличествоЭлементов - Сч];
				
				Если Строка["Цена" + Период] Тогда
					
					СтрокаПериод.Параметры.Период = Период;
					СтрокаПериод.Параметры.Стоимость = Формат(Строка["Цена" + Период], ФорматВыводаСуммы);
					
					НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, СтрокаПериод,
							ШапкаАвтомобили, , НомерСтраницы, , Документ);
							
					Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
						НомерСтраницыПредыдущий   = НомерСтраницы;
						ШапкаАвтомобили.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ПустаяСтрока);
		
		Если НЕ ЕстьВсеУслуги Тогда
			// Блок области
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
			Продолжить;
		КонецЕсли;
		
		ШапкаДопУслуги = Макет.ПолучитьОбласть("ШапкаУслуги");
		СтрокаУслуги = Макет.ПолучитьОбласть("СтрокаУслуги");
		ШапкаДопУслуги.Параметры.Заголовок = НСтр("ru = 'Дополнительные услуги:'");
		ШапкаДопУслуги.Параметры.ВалютаДокумента = ВалютаДокумента;   
		ШапкаДопУслуги.Параметры.ЗаголовокЦены = ТарификацияАрендыЗаголовокЦены(РеквизитыДокумента.ТипЦенЦенаВключаетНДС);
		ШапкаДопУслуги.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
		
		ТабличныйДокумент.Вывести(ПустаяСтрока);
		
		ШапкаДопУслуги.Параметры.Заголовок = НСтр("ru = 'Возможные дополнительные услуги:'");
		ШапкаДопУслуги.Параметры.НомерСтраницы = "";
		ШапкаДопУслуги.Параметры.ВалютаДокумента = ВалютаДокумента;
		ШапкаДопУслуги.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;		
		ТабличныйДокумент.Вывести(ШапкаДопУслуги);
		
		НомерСтроки = 1;
		Для Каждого Строка Из ВсеУслуги Цикл
			
			Стоимость = ЦенообразованиеСервер.ПолучитьЦену(РеквизитыДокумента.ТипЦен, 
				Строка.Номенклатура, 
				РеквизитыДокумента.Дата,, 
				РеквизитыДокумента.ВалютаДокумента, 
				РеквизитыДокумента.КурсДокумента,, 
				РеквизитыДокумента.ПодразделениеКомпании);
			
			СтрокаУслуги.Параметры.НомерСтроки = НомерСтроки;
			СтрокаУслуги.Параметры.Услуга = Строка.Номенклатура;
			СтрокаУслуги.Параметры.Стоимость = Формат(Стоимость, ФорматВыводаСуммы);
			НомерСтроки = НомерСтроки + 1;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, СтрокаУслуги,
					ШапкаДопУслуги, , НомерСтраницы, , Документ);
			
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
					НомерСтраницыПредыдущий   = НомерСтраницы;
					ШапкаДопУслуги.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
		КонецЦикла;
		
		// Блок области
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ТарификацияАрендыЗаголовокЦены(ЦенаВключаетНДС)
	
	Если ЦенаВключаетНДС Тогда
		
		Возврат НСтр("ru = 'Цена с НДС'");
		
	КонецЕсли;
	
	Возврат НСтр("ru = 'Цена без НДС'");
	
КонецФункции

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РеализацияТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ИзменениеДоговораАренды);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЖалобаКлиента);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетНаОплату);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;


КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ДоговорАренды);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
