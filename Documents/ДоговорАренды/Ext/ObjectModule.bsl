// Модуль документа "Договор аренды"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)

	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект,
				ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, "ВхДокНомер,ВхДокДатаВрем") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбработкаСобытийДокументаСервер.ВводСПустымОснованием(ДанныеЗаполнения) Тогда
		
		Заказчик = Справочники.Контрагенты.ПустаяСсылка();
		Документы.ДоговорАренды.ЗаказчикПриИзменении(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Документы.ДоговорАренды.КонтрагентПриИзменении(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
		СкидкаНаценка = Справочники.ТипыСкидок.ПустаяСсылка();
		Документы.ДоговорАренды.СкидкаНаценкаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
		ТипЦен          = ПравоПользователя("ОсновнойТипЦенПродажи", ЭтотОбъект);
		Документы.ДоговорАренды.ТипЦенПриИзменении(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
		ВалютаДокумента = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен,,Ложь);
		Документы.ДоговорАренды.ВалютаДокументаПриИзменении(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
		
	КонецЕсли;

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
	Если ВидАренды.Пустая() Тогда
		ВидАренды = ПраваИНастройкиПользователя.Значение("ОсновнойВидАренды");
		Документы.ДоговорАренды.ВидАрендыПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	МестоВыдачиВид = Перечисления.АрендаВидыМестПриемкиИВыдачи.ПодразделениеКомпании;
	Документы.ДоговорАренды.МестоВыдачиВидПриИзменении(ЭтотОбъект);
	
	МестоПриемкиВид = Перечисления.АрендаВидыМестПриемкиИВыдачи.ПодразделениеКомпании;
	Документы.ДоговорАренды.МестоПриемкиВидПриИзменении(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
		
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	Если Ссылка.Проведен
		И НЕ ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь) Тогда
		
		АрендаАвтомобилей.ПроверитьВозможностьПроведения(ЭтотОбъект, Отказ);
		
	КонецЕсли;
	
	СуммаЗаАренду            = Автомобили.Итог("СуммаВсего");
	СуммаДепозита            = Автомобили.Итог("СуммаДепозита");
	СуммаДополнительныхУслуг = Товары.Итог("СуммаВсего");
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
		
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь) Тогда
	
		Параметры = Новый Структура("ТолькоДоговоры", Истина);
		
		МассивАвтомобилей = Автомобили.ВыгрузитьКолонку("Автомобиль");
		
		ТаблицаИнтерваловАренды = АрендаАвтомобилей.ТаблицаИнтерваловАренды(МассивАвтомобилей,
			ДатаНачала,
			ДатаОкончания,
			Параметры);
		
		Для Каждого СтрокаИнтервала Из ТаблицаИнтерваловАренды Цикл
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСТР("ru = 'Автомобиль %1 используется с %2 по %3 согласно документу %4. Проведение договора невозможно.'"),
					СтрокаИнтервала.Автомобиль,
					Формат(СтрокаИнтервала.ДатаНачала, НСтр("ru = 'ДФ=''dd.MM.yyyy ЧЧ:мм'''")),
					Формат(СтрокаИнтервала.ДатаОкончания, НСтр("ru = 'ДФ=''dd.MM.yyyy ЧЧ:мм'''")),
					СтрокаИнтервала.Документ
				),
				ЭтотОбъект,
				,
				,
				Отказ
			);
				
		КонецЦикла;
		
		АрендаАвтомобилей.ПроверитьАвтомобилиВЭксплуатации(МассивАвтомобилей, ДатаНачала, ДатаОкончания, Отказ);
	
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		АрендаАвтомобилей.ПровестиПоРегиструРасчета(ЭтотОбъект, Отказ);
		
		РегистрыСведений.АрендаДействующиеСоглашения.ЗаписатьСоглашение(ЭтотОбъект, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Производит заполнение объекта на основании документа "Заявка на аренду"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаАренду(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.
			ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "Состояние") 
		= Перечисления.СостояниеЗаявкиНаРемонт.Отклонено Тогда
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект,
			НСТР("ru = 'Ввод договора аренды по отклоненной заявке невозможен.'"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаявкаНаАренду.Заказчик КАК Заказчик,
	|	ЗаявкаНаАренду.Контрагент КАК Контрагент,
	|	ЗаявкаНаАренду.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ЗаявкаНаАренду.Ссылка КАК ДокументОснование,
	|	ЗаявкаНаАренду.ВидАренды КАК ВидАренды,
	|	ЗаявкаНаАренду.УсловияИспользования КАК УсловияИспользования,
	|	ЗаявкаНаАренду.ДатаНачала КАК ДатаНачала,
	|	ЗаявкаНаАренду.ДатаОкончания КАК ДатаОкончания,
	|	ЗаявкаНаАренду.Автомобили.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Автомобиль КАК Автомобиль,
	|		ИдентификаторАвтомобиля КАК ИдентификаторАвтомобиля,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		СуммаСкидки КАК СуммаСкидки,
	|		СуммаВсего КАК СуммаВсего,
	|		СуммаДепозита КАК СуммаДепозита,
	|		ПроцентСкидки КАК ПроцентСкидки
	|	) КАК Автомобили,
	|	ЗаявкаНаАренду.Товары.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ИдентификаторАвтомобиля КАК ИдентификаторАвтомобиля,
	|		Номенклатура КАК Номенклатура,
	|		Количество КАК Количество,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Коэффициент КАК Коэффициент,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		ПроцентСкидки КАК ПроцентСкидки,
	|		СуммаСкидки КАК СуммаСкидки,
	|		СуммаВсего КАК СуммаВсего,
	|		СкидкаНаТовар КАК СкидкаНаТовар,
	|		ПроцентСкидкиСтроки КАК ПроцентСкидкиСтроки,
	|		СуммаСкидкиСтроки КАК СуммаСкидкиСтроки
	|	) КАК Товары,
	|	ЗаявкаНаАренду.Тарификация.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ДатаНачала КАК ДатаНачала,
	|		ДатаОкончания КАК ДатаОкончания,
	|		КоличествоМинута КАК КоличествоМинута,
	|		КоличествоЧас КАК КоличествоЧас,
	|		КоличествоСутки КАК КоличествоСутки,
	|		КоличествоНеделя КАК КоличествоНеделя,
	|		КоличествоМесяц КАК КоличествоМесяц,
	|		ЦенаМинута КАК ЦенаМинута,
	|		ЦенаЧас КАК ЦенаЧас,
	|		ЦенаСутки КАК ЦенаСутки,
	|		ЦенаНеделя КАК ЦенаНеделя,
	|		ЦенаМесяц КАК ЦенаМесяц,
	|		СуммаВсего КАК СуммаВсего,
	|		ИдентификаторАвтомобиля КАК ИдентификаторАвтомобиля,
	|		Автомобиль КАК Автомобиль,
	|		КоличествоКвартал КАК КоличествоКвартал,
	|		КоличествоГод КАК КоличествоГод,
	|		ЦенаГод КАК ЦенаГод,
	|		ЦенаКвартал КАК ЦенаКвартал
	|	) КАК Тарификация
	|ИЗ
	|	Документ.ЗаявкаНаАренду КАК ЗаявкаНаАренду
	|ГДЕ
	|	ЗаявкаНаАренду.Ссылка = &ДанныеЗаполнения";
	Запрос.УстановитьПараметр("ДанныеЗаполнения", ДанныеЗаполнения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);	
		Документы.ДоговорАренды.КонтрагентПриИзменении(ЭтотОбъект);
		Документы.ДоговорАренды.ЗаказчикПриИзменении(ЭтотОбъект);
		Автомобили.Загрузить(Выборка.Автомобили.Выгрузить());
		Товары.Загрузить(Выборка.Товары.Выгрузить());
		Тарификация.Загрузить(Выборка.Тарификация.Выгрузить());
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Производит заполнение объекта по передаваемой структуре
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДатаНачала    = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "ДатаНачала");
	ДатаОкончания = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "ДатаОкончания");
	ВидАренды     = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "ВидАренды");
	
	Структура_Активы = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "Автомобиль", Новый Массив);
	Если ТипЗнч(Структура_Активы) = Тип("Массив") Тогда
		Для Каждого Автомобиль Из Структура_Активы Цикл
			НоваяСтрока = Автомобили.Добавить();
			НоваяСтрока.Автомобиль = Автомобиль;
			Документы.ЗаявкаНаАренду.АвтомобилиАвтомобильПриИзменении(ЭтотОбъект, НоваяСтрока);
		КонецЦикла;
	Иначе
		НоваяСтрока = Автомобили.Добавить();
		НоваяСтрока.Автомобиль = Структура_Активы;
		Документы.ЗаявкаНаАренду.АвтомобилиАвтомобильПриИзменении(ЭтотОбъект, НоваяСтрока);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецЕсли