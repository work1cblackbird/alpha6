// Модуль менеджера документа "Инвентаризация автомобилей"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#Область ОбновлениеВерсииИБ

// Начальное заполнение реквизита "ГТДИзлишков"
//
Процедура ЗаполнитьГТДИзлишковИзОперацииПрослеживаемыхТоваров() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнвентаризацияАвтомобилейАвтомобили.Ссылка КАК Ссылка,
		|	ИнвентаризацияАвтомобилейАвтомобили.ГТДИзлишков КАК РНПТ,
		|	ИнвентаризацияАвтомобилейАвтомобили.Автомобиль КАК Автомобиль
		|ПОМЕСТИТЬ втДанныеДокумента
		|ИЗ
		|	Документ.ИнвентаризацияАвтомобилей.Автомобили КАК ИнвентаризацияАвтомобилейАвтомобили
		|ГДЕ
		|	ИнвентаризацияАвтомобилейАвтомобили.Ссылка.Проведен
		|	И ИнвентаризацияАвтомобилейАвтомобили.КоличествоУчет > ИнвентаризацияАвтомобилейАвтомобили.Количество
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОперацииПрослеживаемыхТоваров.Регистратор КАК Регистратор,
		|	ОперацииПрослеживаемыхТоваров.Номенклатура КАК Номенклатура,
		|	ОперацииПрослеживаемыхТоваров.РНПТ КАК РНПТ
		|ПОМЕСТИТЬ втДанныеРегистра
		|ИЗ
		|	РегистрСведений.ОперацииПрослеживаемыхТоваров КАК ОперацииПрослеживаемыхТоваров
		|ГДЕ
		|	ОперацииПрослеживаемыхТоваров.КодОперации = ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.ВозвратУтерянногоТовара)
		|	И ОперацииПрослеживаемыхТоваров.Документ ССЫЛКА Документ.ИнвентаризацияАвтомобилей
		|	И ОперацииПрослеживаемыхТоваров.Активность
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДанныеРегистра.Регистратор КАК Ссылка,
		|	втДанныеРегистра.Номенклатура КАК Автомобиль,
		|	втДанныеРегистра.РНПТ КАК РНПТ
		|ИЗ
		|	втДанныеРегистра КАК втДанныеРегистра
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеДокумента КАК втДанныеДокумента
		|		ПО втДанныеРегистра.Регистратор = втДанныеДокумента.Ссылка
		|			И втДанныеРегистра.Номенклатура = втДанныеДокумента.Автомобиль
		|ГДЕ
		|	втДанныеДокумента.РНПТ <> втДанныеРегистра.РНПТ
		|ИТОГИ ПО
		|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылка.Следующий() Цикл
		
		ДокументОбъект = ВыборкаСсылка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Заблокировать();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Выборка = ВыборкаСсылка.Выбрать();
	
		Пока Выборка.Следующий() Цикл
			
			СтрАвтомобили = ДокументОбъект.Автомобили.Найти(Выборка.Автомобиль,"Автомобиль");	
			СтрАвтомобили.ГТДИзлишков = Выборка.РНПТ;
			
		КонецЦикла;
		
		Попытка
			ДокументОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления документа Инвентаризация автомобилей'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			
		КонецПопытки;		
		
	КонецЦикла;	
	
КонецПроцедуры

// Заполняет новые реквизиты данными из доп. сведений
//
Процедура ЗаполнитьДанныеИнвентаризации() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеСведения.Объект КАК Ссылка,
	               |	ДополнительныеСведения.Свойство КАК Реквизит,
	               |	ДополнительныеСведения.Значение КАК ЗначениеРеквизита
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Объект ССЫЛКА Документ.ИнвентаризацияАвтомобилей
	               |	И НЕ ДополнительныеСведения.Значение = НЕОПРЕДЕЛЕНО
	               |	И НЕ ДополнительныеСведения.Значение = ДАТАВРЕМЯ(1, 1, 1)
	               |	И (ДополнительныеСведения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаНачала)
	               |				И НЕ ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Документ.ИнвентаризацияАвтомобилей).ДатаНачалаИнвентаризации = ДополнительныеСведения.Значение
	               |			ИЛИ ДополнительныеСведения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаКонца)
	               |				И НЕ ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Документ.ИнвентаризацияАвтомобилей).ДатаОкончанияИнвентаризации = ДополнительныеСведения.Значение)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ДополнительныеСведения.Объект,
	               |	ДополнительныеСведения.Свойство,
	               |	ДополнительныеСведения.Значение
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияАвтомобилей.ИнвентаризационнаяКомиссия КАК ИнвентаризацияАвтомобилейИнвентаризационнаяКомиссия
	               |		ПО ДополнительныеСведения.Объект = ИнвентаризацияАвтомобилейИнвентаризационнаяКомиссия.Ссылка
	               |			И ДополнительныеСведения.Значение = ИнвентаризацияАвтомобилейИнвентаризационнаяКомиссия.ЧленКомиссии
	               |			И (ДополнительныеСведения.Значение ССЫЛКА Справочник.Сотрудники)
	               |			И (НЕ ДополнительныеСведения.Значение = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
	               |			И (ДополнительныеСведения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЧленКомиссии1)
	               |				ИЛИ ДополнительныеСведения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЧленКомиссии2)
	               |				ИЛИ ДополнительныеСведения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПредседательКомиссии))
	               |ГДЕ
	               |	ДополнительныеСведения.Объект ССЫЛКА Документ.ИнвентаризацияАвтомобилей
	               |	И ДополнительныеСведения.Значение ССЫЛКА Справочник.Сотрудники
	               |	И НЕ ДополнительныеСведения.Значение = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |	И (ДополнительныеСведения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЧленКомиссии1)
	               |			ИЛИ ДополнительныеСведения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЧленКомиссии2)
	               |			ИЛИ ДополнительныеСведения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПредседательКомиссии))
	               |	И ИнвентаризацияАвтомобилейИнвентаризационнаяКомиссия.Ссылка ЕСТЬ NULL
	               |ИТОГИ ПО
	               |	Ссылка";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДопСведенияМенеджер = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения; 
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Заблокировать();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		ВыборкаДетальныеЗаписи = Выборка.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если ВыборкаДетальныеЗаписи.Реквизит = ДопСведенияМенеджер.ДатаНачала Тогда 
				
				ДокументОбъект.ДатаНачалаИнвентаризации = ВыборкаДетальныеЗаписи.ЗначениеРеквизита;	
				
			ИначеЕсли ВыборкаДетальныеЗаписи.Реквизит = ДопСведенияМенеджер.ДатаКонца Тогда
				
				ДокументОбъект.ДатаОкончанияИнвентаризации = ВыборкаДетальныеЗаписи.ЗначениеРеквизита;	
				
			ИначеЕсли ВыборкаДетальныеЗаписи.Реквизит = ДопСведенияМенеджер.ЧленКомиссии1
				ИЛИ ВыборкаДетальныеЗаписи.Реквизит = ДопСведенияМенеджер.ЧленКомиссии2 Тогда
				
				СтрокаТЧ = ДокументОбъект.ИнвентаризационнаяКомиссия.Найти(ВыборкаДетальныеЗаписи.ЗначениеРеквизита, "ЧленКомиссии"); 
				Если НЕ СтрокаТЧ = Неопределено Тогда  
					Продолжить;					
				КонецЕсли;	
				
				НоваяСтрока = ДокументОбъект.ИнвентаризационнаяКомиссия.Добавить();
				НоваяСтрока.ЧленКомиссии = ВыборкаДетальныеЗаписи.ЗначениеРеквизита;
				
			ИначеЕсли ВыборкаДетальныеЗаписи.Реквизит = ДопСведенияМенеджер.ПредседательКомиссии Тогда
				
				СтрокаТЧ = ДокументОбъект.ИнвентаризационнаяКомиссия.Найти(ВыборкаДетальныеЗаписи.ЗначениеРеквизита, "ЧленКомиссии"); 
				Если НЕ СтрокаТЧ = Неопределено Тогда  
					НоваяСтрока.Председатель = Истина;
					Продолжить;
				КонецЕсли;	
				
				НоваяСтрока = ДокументОбъект.ИнвентаризационнаяКомиссия.Добавить();
				НоваяСтрока.ЧленКомиссии = ВыборкаДетальныеЗаписи.ЗначениеРеквизита;
				НоваяСтрока.Председатель = Истина;
				
			КонецЕсли;	
						
		КонецЦикла;	
		
		Попытка
			ДокументОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления документа Инвентаризация автомобилей'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				);
        КонецПопытки;
		
	КонецЦикла;	
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Автомобили.Итог("Сумма"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используеся в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость выводв только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возращаемая сторка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить = ЛОЖЬ, ТолькоОсновныеКонтакты = ИСТИНА) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

// Получение данных о прослеживаемых товаров
//
// Параметры:
//  Объект	 - ДокументОбъект.ИнвентаризацияАвтомобилей - Документ, на основании которого произошла операция с товаром
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Список прослеживаемых товаров
//
Функция ОперацииСПрослеживаемымиТоварами(Объект) Экспорт
	
	// Получим таблицу для формирования данных по операции
	ТаблицаОперацииПрослеживаемости = УчетПрослеживаемыхТоваровСервер.ИнициализацияТаблицыОпераций();
	
	// Сформируем запрос из документа
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнвентаризацияАвтомобилейАвтомобили.Ссылка КАК Ссылка,
	               |	ИнвентаризацияАвтомобилейАвтомобили.Автомобиль КАК Автомобиль,
	               |	ВЫБОР
	               |		КОГДА ИнвентаризацияАвтомобилейАвтомобили.КоличествоУчет > ИнвентаризацияАвтомобилейАвтомобили.Количество
	               |			ТОГДА ИнвентаризацияАвтомобилейАвтомобили.ГТДИзлишков
	               |		ИНАЧЕ ИнвентаризацияАвтомобилейАвтомобили.Автомобиль.ГТД
	               |	КОНЕЦ КАК ГТД
	               |ПОМЕСТИТЬ втАвтомобили
	               |ИЗ
	               |	Документ.ИнвентаризацияАвтомобилей.Автомобили КАК ИнвентаризацияАвтомобилейАвтомобили
	               |ГДЕ
	               |	ИнвентаризацияАвтомобилейАвтомобили.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(Перечисление.ДокументыОтображенияОпераций.ОтчетОбОперациях) КАК ОтчетностьОперации,
	               |	ВЫБОР
	               |		КОГДА ОстаткиАвтомобилей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.НедостачаТовараПоИнвентаризации)
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.ВозвратУтерянногоТовара)
	               |	КОНЕЦ КАК КодОперации,
	               |	ЗНАЧЕНИЕ(Перечисление.ТипыДокументов.Другое) КАК ВидДокумента,
	               |	ОстаткиАвтомобилей.Автомобиль КАК Номенклатура,
	               |	втАвтомобили.ГТД КАК РНПТ,
	               |	ОстаткиАвтомобилей.Количество КАК КоличествоПрослеживаемости,
	               |	ОстаткиАвтомобилей.СуммаБезНДС КАК СуммаБезНДС
	               |ИЗ
	               |	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втАвтомобили КАК втАвтомобили
	               |		ПО ОстаткиАвтомобилей.Регистратор = втАвтомобили.Ссылка
	               |			И ОстаткиАвтомобилей.Автомобиль = втАвтомобили.Автомобиль
	               |			И (втАвтомобили.ГТД.РНПТ)
	               |ГДЕ
	               |	ОстаткиАвтомобилей.Регистратор = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Проверим есть РНПТ у документа
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	ТаблицаРНПТ = РезультатЗапроса.Выгрузить();
	
	// Зафиксируем данные для заполнения
	Организация = Объект.Организация;
	Документ = Объект.Ссылка;
	ПериодОтчета = НачалоКвартала(Объект.Дата);
	НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект.Ссылка);
	ДатаДокумента = Объект.Дата;
	
	Для Каждого ТекущаяСтрока Из ТаблицаРНПТ Цикл
		
		НоваяСтрока = ТаблицаОперацииПрослеживаемости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ПериодОтчета = ПериодОтчета;
		НоваяСтрока.Документ = Документ;
		НоваяСтрока.НомерДокумента = НомерДокумента;
		НоваяСтрока.ДатаДокумента = ДатаДокумента;
		
	КонецЦикла;
	
	Возврат ТаблицаОперацииПрослеживаемости;
	
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	Если Объект.ХозОперация=Справочники.ХозОперации.ИнвентаризацияАвтомобилейОтданныхНаКомиссию Тогда
		ОбязательныеРеквизиты.Добавить("Контрагент");
		ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
			РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(Объект.ДоговорВзаиморасчетов);
		Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
			ОбязательныеРеквизиты.Добавить("СпособЗачетаАвансов");
		КонецЕсли;
	Иначе
		ОбязательныеРеквизиты.Добавить("СкладКомпании");
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация"); 
	ОбязательныеРеквизиты.Добавить("СтатьяСписанияОбнаруженнойНедостачиТМЦ");
	ОбязательныеРеквизиты.Добавить("СтатьяОприходованияОбнаруженныхИзлишковТМЦ");
    ОбязательныеРеквизиты.Добавить("ИнвентаризационнаяКомиссия.ЧленКомиссии");

	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Автомобили");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Автомобили.Автомобиль");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	// Обязательные поля таблицы автомобили
	ОбязательныеАвтомобили=Новый Массив();
	ОбязательныеАвтомобили.Добавить("Автомобиль");
	
	// Обязательные поля таблицы Инвентаризационная комиссия
	УникальныеЧленыКомиссии = Новый Массив();
	УникальныеЧленыКомиссии.Добавить("ЧленКомиссии");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Автомобили",ОбязательныеАвтомобили);
	УникальныеРеквизиты.Вставить("ИнвентаризационнаяКомиссия", УникальныеЧленыКомиссии);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	КонтролируемыеРеквизиты.Вставить("СкладКомпании",         Ложь);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Автомобили.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.ПерезаполнитьЦеныТабличныхЧастей(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если Объект.ХозОперация=Справочники.ХозОперации.ИнвентаризацияАвтомобилейОтданныхНаКомиссию Тогда
		Объект.СкладКомпании = Справочники.СкладыКомпании.ПустаяСсылка();
	Иначе
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Объект.ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	КонецЕсли;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	Для каждого СтрокаАвтомобиля Из Объект.Автомобили Цикл
		АвтомобилиРасчетноеКоличествоПриИзменении(Объект,СтрокаАвтомобиля,ПараметрыДействия);
	КонецЦикла; 
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтомобили

// Обработчик события возникающего при изменении данных реквизита "Автомобиль"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиАвтомобильПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект);
	
	ОбработкаТабличнойЧастиАвтомобили.АвтомобильПриИзменении(Объект, Строка, ПараметрыДействия);
	
	АвтомобилиРасчетноеКоличествоПриИзменении(Объект,Строка,ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект);
	
	ОбработкаТабличнойЧастиАвтомобили.ЦенаПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
	Строка.Сумма     = Строка.Цена * Строка.Количество;
	Строка.СуммаУчет = Строка.Цена * Строка.КоличествоУчет;

КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект);
	
	ОбработкаТабличнойЧастиАвтомобили.СуммаПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
	Строка.Цена=?(Строка.Количество=0,0,Строка.Сумма/Строка.Количество);
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект);
	
	ОбработкаТабличнойЧастиАвтомобили.СуммаВсегоПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект);
	
	ОбработкаТабличнойЧастиАвтомобили.СтавкаНДСПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Расчетное количество"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиРасчетноеКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Если Объект.ХозОперация <> Справочники.ХозОперации.ИнвентаризацияАвтомобилейОтданныхНаКомиссию Тогда
		
		СтруктураОтбора = Новый Структура("СкладКомпании,Автомобиль");
		СтруктураОтбора.СкладКомпании = Объект.СкладКомпании;
		СтруктураОтбора.Автомобиль    = Строка.Автомобиль;
		
		ТаблицаОстатков = РегистрыНакопления.ОстаткиАвтомобилей.Остатки(
			Объект.Дата,
			СтруктураОтбора,
			,
			"СуммаУпр,Количество");
		Если ТаблицаОстатков.Количество() > 0 Тогда
			
			Строка.Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				ТаблицаОстатков.Итог("СуммаУпр"),
				Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
				Объект.Дата,
				Объект.ВалютаДокумента,
				Объект.КурсДокумента);
			
			Строка.Количество = ТаблицаОстатков.Итог("Количество");
			
		Иначе
			
			Строка.Цена       = 0;
			Строка.Количество = 0;
			
		КонецЕсли;
		
		ТаблицаОстатков = РегистрыНакопления.КомплектацияАвтомобилей.Остатки(
			Объект.Дата,
			СтруктураОтбора,
			,
			"СуммаУпр,Количество");
		Если ТаблицаОстатков.Количество() > 0 Тогда
			Строка.Цена = Строка.Цена + РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				ТаблицаОстатков.Итог("СуммаУпр"),
				Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
				Объект.Дата,
				Объект.ВалютаДокумента,Объект.КурсДокумента);
		КонецЕсли;
		
	Иначе
		
		СтруктураОтбора = Новый Структура("Контрагент,ДоговорВзаиморасчетов,Автомобиль");
		СтруктураОтбора.Контрагент            = Объект.Контрагент;
		СтруктураОтбора.ДоговорВзаиморасчетов = Объект.ДоговорВзаиморасчетов;
		СтруктураОтбора.Автомобиль            = Строка.Автомобиль;
		
		ТаблицаОстатков = РегистрыНакопления.АвтомобилиОтданные.Остатки(Объект.Дата,СтруктураОтбора,,"СуммаУпр,Количество");
		
		Если ТаблицаОстатков.Количество()>0 Тогда
			
			Строка.Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				ТаблицаОстатков.Итог("СуммаУпр"),
				Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
				Объект.Дата,
				Объект.ВалютаДокумента,
				Объект.КурсДокумента);
			
			Строка.Количество = ТаблицаОстатков.Итог("Количество");
			
		Иначе
			
			Строка.Цена       = 0;
			Строка.Количество = 0;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Строка.КоличествоУчет = 0 Тогда
		
		Строка.КоличествоУчет = Строка.Количество;
		Строка.СуммаУчет      = Строка.Количество * Строка.Цена;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество учета"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиКоличествоУчетПриИзменении(Объект, Строка, ПраметрыДействия=Неопределено) Экспорт
	Строка.СуммаУчет=Строка.Цена*Строка.КоличествоУчет;
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма учета"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаУчетПриИзменении(Объект, Строка, ПраметрыДействия=Неопределено) Экспорт
	Строка.Цена=?(Строка.КоличествоУчет=0,0,Строка.СуммаУчет/Строка.КоличествоУчет);
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиКоличествоПриИзменении(Объект, Строка, ПраметрыДействия=Неопределено) Экспорт
	Строка.Сумма=Строка.Цена*Строка.Количество;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Автомобили");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ИнвентаризацияАвтомобилей");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Автомобили");
	КонецЕсли;
	
	ВыборДоговоров 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборДоговоров.ВыборСсылки 		= "Справочник.ДоговорыВзаиморасчетов.ФормаСписка";
	ВыборДоговоров.Обязательный 	= Истина;
	ВыборДоговоров.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать договор взаиморасчетов.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю			= "АвтомобилиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить по договору комиссии'");
	Команда.Идентификатор	= "АвтомобилиЗаполнитьПоДоговоруКомиссии";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автомобили";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ДоговорВзаиморасчетов", ВыборДоговоров);
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ХозОперация", Справочники.ХозОперации.ИнвентаризацияАвтомобилейОтданныхНаКомиссию); 
	//
	ВыборСклада 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборСклада.ВыборСсылки 		= "Справочник.СкладыКомпании.ФормаСписка";
	ВыборСклада.Обязательный 		= Истина;
	ВыборСклада.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать склад компании.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю			= "АвтомобилиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить складскими остатками'");
	Команда.Идентификатор	= "АвтомобилиЗаполнитьСкладскимиОстатками";
	Команда.Порядок			= 51;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автомобили";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", ВыборСклада);
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ХозОперация", 
		Справочники.ХозОперации.ИнвентаризацияАвтомобилейОтданныхНаКомиссию, ВидСравненияКомпоновкиДанных.НеРавно); 
	//
	ВыборАвтомобиля 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборАвтомобиля.ВыборСсылки 		= "Справочник.Автомобили.ФормаВыбораГруппы";
	ВыборАвтомобиля.Обязательный 		= Истина;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю			= "АвтомобилиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить складскими остатками по группе'");
	Команда.Идентификатор	= "АвтомобилиЗаполнитьСкладскимиОстаткамиПоГруппе";
	Команда.Порядок			= 52;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автомобили";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", 	ВыборСклада);
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("Автомобиль", 	ВыборАвтомобиля);
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ХозОперация", 
		Справочники.ХозОперации.ИнвентаризацияАвтомобилейОтданныхНаКомиссию, ВидСравненияКомпоновкиДанных.НеРавно); 
	//
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю			= "АвтомобилиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить по группе автомобилей'");
	Команда.Идентификатор	= "АвтомобилиЗаполнитьПоГруппеАвтомобилей";     
	Команда.Порядок			= 53;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автомобили";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("Автомобиль", ВыборАвтомобиля);
	//
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю			= "АвтомобилиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить всеми автомобилями'");
	Команда.Идентификатор	= "АвтомобилиЗаполнитьВсемиАвтомобилями";
	Команда.Порядок			= 54;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автомобили";
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьПоДоговоруКомиссии.Видимость",             Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьПоДоговоруКомиссии.Доступность",          (Объект.ХозОперация = Справочники.ХозОперации.ИнвентаризацияАвтомобилейОтданныхНаКомиссию));
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьСкладскимиОстатками.Видимость",            Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьСкладскимиОстатками.Доступность",         (Объект.ХозОперация <> Справочники.ХозОперации.ИнвентаризацияАвтомобилейОтданныхНаКомиссию));
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьСкладскимиОстаткамиПоГруппе.Видимость",    Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьСкладскимиОстаткамиПоГруппе.Доступность", (Объект.ХозОперация <> Справочники.ХозОперации.ИнвентаризацияАвтомобилейОтданныхНаКомиссию));
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьПоГруппеАвтомобилей.Видимость",            Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьПоГруппеАвтомобилей.Доступность",          Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьВсемиАвтомобилями.Видимость",              Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьВсемиАвтомобилями.Доступность",            Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по договору контрагента
//
Функция АвтомобилиЗаполнитьПоДоговоруКомиссии(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	ПараметрыДействия 	= ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Момент", ?(НЕ ЗначениеЗаполнено(Ссылка), Новый МоментВремени(КонецДня(Объект.Дата)), Новый МоментВремени(Объект.Дата)));
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения
	Если НЕ Объект.ДоговорВзаиморасчетов = ПараметрыЗаполнения.ДоговорВзаиморасчетов Тогда
		Объект.ДоговорВзаиморасчетов = ПараметрыЗаполнения.ДоговорВзаиморасчетов;
		ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;

	Запрос.Текст =
		"ВЫБРАТЬ
		|	АвтомобилиОтданныеОстатки.Автомобиль КАК Автомобиль,
		|	АвтомобилиОтданныеОстатки.КоличествоОстаток КАК Количество,
		|	АвтомобилиОтданныеОстатки.СуммаУпрОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.АвтомобилиОтданные.Остатки(&Момент,Контрагент=&Контрагент И ДоговорВзаиморасчетов=&ДоговорВзаиморасчетов) КАК АвтомобилиОтданныеОстатки";
	Запрос.УстановитьПараметр("Контрагент", 			Объект.Контрагент);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", 	Объект.ДоговорВзаиморасчетов);
			
	ТаблицаАвтомобилей = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из ТаблицаАвтомобилей Цикл
		НоваяСтрока				= Объект.Автомобили.Добавить();
		НоваяСтрока.Автомобиль	= СтрокаТЧ.Автомобиль;
		АвтомобилиАвтомобильПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		НоваяСтрока.Количество	= СтрокаТЧ.Количество;
		АвтомобилиКоличествоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
	КонецЦикла;
	
КонецФункции // АвтомобилиЗаполнитьПоДоговоруКомиссии()

// Обработчик заполнения документа складскими остатками или по договору контрагента
//
Функция АвтомобилиЗаполнитьСкладскимиОстатками(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	ПараметрыДействия 	= ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Запрос=Новый Запрос();
	Запрос.УстановитьПараметр("Момент",?(НЕ ЗначениеЗаполнено(Ссылка),Новый МоментВремени(КонецДня(Объект.Дата)),Новый МоментВремени(Объект.Дата)));
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения
	Если НЕ Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании Тогда
		Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании;
		СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОстаткиАвтомобилейОстатки.Автомобиль КАК Автомобиль,
		|	ОстаткиАвтомобилейОстатки.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ОстаткиАвтомобилей.Остатки(&Момент,СкладКомпании=&СкладКомпании) КАК ОстаткиАвтомобилейОстатки";
	Запрос.УстановитьПараметр("СкладКомпании", Объект.СкладКомпании);
		
	ТаблицаАвтомобилей = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТЧ Из ТаблицаАвтомобилей Цикл
		НоваяСтрока				= Объект.Автомобили.Добавить();
		НоваяСтрока.Автомобиль	= СтрокаТЧ.Автомобиль;
		АвтомобилиАвтомобильПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		НоваяСтрока.Количество	= СтрокаТЧ.Количество;
		АвтомобилиКоличествоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
	КонецЦикла;
	
КонецФункции // АвтомобилиЗаполнитьСкладскимиОстатками()

// Обработчик заполнения документа складскими остатками или по договору контрагента
//
Функция АвтомобилиЗаполнитьСкладскимиОстаткамиПоГруппе(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	ПараметрыДействия 	= ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Запрос=Новый Запрос();
	Запрос.УстановитьПараметр("Момент",?(НЕ ЗначениеЗаполнено(Ссылка),Новый МоментВремени(КонецДня(Объект.Дата)),Новый МоментВремени(Объект.Дата)));
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения
	Если НЕ Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании Тогда
		Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании;
		СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОстаткиАвтомобилейОстатки.Автомобиль КАК Автомобиль,
		|	ОстаткиАвтомобилейОстатки.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ОстаткиАвтомобилей.Остатки(&Момент,СкладКомпании=&СкладКомпании И Автомобиль В ИЕРАРХИИ(&ВыбГруппа)) КАК ОстаткиАвтомобилейОстатки";
	
	Запрос.УстановитьПараметр("ВыбГруппа", 		ПараметрыЗаполнения.Автомобиль);
	Запрос.УстановитьПараметр("СкладКомпании", 	Объект.СкладКомпании);
		
	ТаблицаАвтомобилей = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТЧ Из ТаблицаАвтомобилей Цикл
		НоваяСтрока				= Объект.Автомобили.Добавить();
		НоваяСтрока.Автомобиль	= СтрокаТЧ.Автомобиль;
		АвтомобилиАвтомобильПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		НоваяСтрока.Количество	= СтрокаТЧ.Количество;
		АвтомобилиКоличествоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
	КонецЦикла;
	
КонецФункции // АвтомобилиЗаполнитьСкладскимиОстаткамиПоГруппе()

// Обработчик заполнения документа по группе автомобилей
//
Функция АвтомобилиЗаполнитьПоГруппеАвтомобилей(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	Автомобили 	= Объект.Автомобили.Выгрузить();
	Выборка 	= Справочники.Автомобили.ВыбратьИерархически(ПараметрыЗаполнения.Автомобиль);
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоГруппа Тогда 
			Продолжить; 
		КонецЕсли;
		
		Если Автомобили.Найти(Выборка.Ссылка,"Автомобиль") <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока				 = Объект.Автомобили.Добавить();
		НоваяСтрока.Автомобиль	 = Выборка.Ссылка;
		АвтомобилиАвтомобильПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
	КонецЦикла;

КонецФункции // АвтомобилиЗаполнитьПоГруппеАвтомобилей()

// Обработчик заполнения документа всеми автомобилями
//
Функция АвтомобилиЗаполнитьВсемиАвтомобилями(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	Автомобили 	= Объект.Автомобили.Выгрузить();
	Выборка 	= Справочники.Автомобили.ВыбратьИерархически();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоГруппа Тогда 
			Продолжить; 
		КонецЕсли;
		
		Если Автомобили.Найти(Выборка.Ссылка,"Автомобиль") <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока				 = Объект.Автомобили.Добавить();
		НоваяСтрока.Автомобиль	 = Выборка.Ссылка;
		АвтомобилиАвтомобильПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
	КонецЦикла;

КонецФункции // АвтомобилиЗаполнитьВсемиАвтомобилями()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ИнвентаризацияАвтомобилей",
		"ИнвентаризацияАвтомобилейНаКомиссии",
		НСтр("ru = 'Инвентаризация автомобилей на комиссии'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьИНВ",
		"ПФ_MXL_ИНВ3",
		НСтр("ru = 'Инвентаризационная опись (ИНВ-3)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьИНВ",
		"ПФ_MXL_ИНВ19",
		НСтр("ru = 'Сличительная ведомость (ИНВ-19)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ИнвентаризацияАвтомобилей",
		"ИнвентаризацияАвтомобилей",
		НСтр("ru = 'Пустографка'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьИНВ",
		"ПФ_MXL_ИНВ22",
		НСтр("ru = 'ИНВ22 (Приказ о проведении инвентаризации)'"),
		СсылкаНаДокумент);	
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИнвентаризацияАвтомобилейНаКомиссии") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ИнвентаризацияАвтомобилейНаКомиссии",
															"Инвентаризация автомобилей на комиссии",
															ПечатьИнвентаризацияАвтомобилейНаКомиссии(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИнвентаризацияАвтомобилей") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ИнвентаризацияАвтомобилей",
															"Пустографка",
															ПечатьИнвентаризацияАвтомобилей(МассивОбъектов, ОбъектыПечати));
															
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "ИнвентаризацияАвтомобилейНаКомиссии"
// Возвращает сформированный табличный документ:
Функция ПечатьИнвентаризацияАвтомобилейНаКомиссии(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // Новый документ должен быть на одтдельной странице.
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы(
			"Документ.ИнвентаризацияАвтомобилей.ПФ_MXL_ИнвентаризацияАвтомобилейНаКомиссии");
		
		// форматы вывода
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// заголовок
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		
		Если Документ.ХозОперация = Справочники.ХозОперации.ИнвентаризацияАвтомобилейОтданныхНаКомиссию Тогда
			ОбластьЗаголовок.Параметры.ТекстПокупатель = "Покупатель: ";
			ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
			ДополнительныеПараметры.НаДату = Документ.Дата;
			ОбластьЗаголовок.Параметры.ПредставлениеПокупателя =
				УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Контрагент, , ДополнительныеПараметры);
			ОбластьЗаголовок.Параметры.Покупатель = Документ.Контрагент;
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// готовим области строки
		НомерСтраницы = 2; НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура;
		СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента",   Документ.ВалютаДокумента);
		СтруктураИтоговПоСтранице.Вставить("Количество",        0);
		СтруктураИтоговПоСтранице.Вставить("КоличествоУчет",    0);
		СтруктураИтоговПоСтранице.Вставить("КоличествоРазница", 0);
		СтруктураИтоговПоСтранице.Вставить("Сумма",             0);
		СтруктураИтоговПоСтранице.Вставить("СуммаУчет",         0);
		СтруктураИтоговПоСтранице.Вставить("СуммаРазница",      0);
		
		// заполним параметры шапки таблицы для следующего листа
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		ВыборкаТабличнойЧасти = Документ.Автомобили;
		// подготовим дополнительную таблицу
		СтруктураСтрокиТЧ = Новый Структура;
		СтруктураСтрокиТЧ.Вставить("НомерСтроки");
		СтруктураСтрокиТЧ.Вставить("Количество");
		СтруктураСтрокиТЧ.Вставить("КоличествоУчет");
		СтруктураСтрокиТЧ.Вставить("КоличествоРазница");
		СтруктураСтрокиТЧ.Вставить("Сумма");
		СтруктураСтрокиТЧ.Вставить("СуммаУчет");
		СтруктураСтрокиТЧ.Вставить("СуммаРазница");
		СтруктураСтрокиТЧ.Вставить("Цена");
		
		// перебор строк
		Для Каждого СтрокаТабличнойЧасти Из ВыборкаТабличнойЧасти Цикл
			ЗаполнитьЗначенияСвойств(СтруктураСтрокиТЧ, СтрокаТабличнойЧасти);
			СтруктураСтрокиТЧ.КоличествоРазница = СтруктураСтрокиТЧ.КоличествоУчет - СтруктураСтрокиТЧ.Количество;
			СтруктураСтрокиТЧ.СуммаРазница = СтруктураСтрокиТЧ.СуммаУчет - СтруктураСтрокиТЧ.Сумма;		
			// заполняем данные строки
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхСтрокиДляАвтомобилей(СтрокаТабличнойЧасти,
				Документ);
			
			СтруктураСтроки.Сумма = Формат(СтруктураСтрокиТЧ.Сумма, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			ОбластьСтрока.Параметры.КоличествоУчет    = Формат(СтрокаТабличнойЧасти.КоличествоУчет, ФорматВыводаКоличества);
			ОбластьСтрока.Параметры.КоличествоРазница = Формат(СтруктураСтрокиТЧ.КоличествоРазница, ФорматВыводаКоличества);
			ОбластьСтрока.Параметры.СуммаУчет         = Формат(СтрокаТабличнойЧасти.СуммаУчет,      ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СуммаРазница      = Формат(СтруктураСтрокиТЧ.СуммаРазница,      ФорматВыводаСуммы);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Автомобили.Индекс(СтрокаТабличнойЧасти) = Документ.Автомобили.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,Сумма", Документ.ВалютаДокумента, 0);
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтруктураСтрокиТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// итоги
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		КоличествоУчетВсего    = ВыборкаТабличнойЧасти.Итог("КоличествоУчет");
		КоличествоВсего        = ВыборкаТабличнойЧасти.Итог("Количество");
		СуммаУчетВсего         = ВыборкаТабличнойЧасти.Итог("СуммаУчет");
		СуммаВсего             = ВыборкаТабличнойЧасти.Итог("Сумма");
		КоличествоРазницаВсего = КоличествоУчетВсего - КоличествоВсего;
		СуммаРазницаВсего      = СуммаУчетВсего - СуммаВсего;
		
		ОбластьПодвал.Параметры.КоличествоУчетВсего    = Формат(КоличествоУчетВсего,    ФорматВыводаКоличества);
		ОбластьПодвал.Параметры.КоличествоВсего        = Формат(КоличествоВсего,        ФорматВыводаКоличества);
		ОбластьПодвал.Параметры.КоличествоРазницаВсего = Формат(КоличествоРазницаВсего, ФорматВыводаКоличества);
		ОбластьПодвал.Параметры.СуммаУчетВсего         = Формат(СуммаУчетВсего,         ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаВсего             = Формат(СуммаВсего,             ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаРазницаВсего      = Формат(СуммаРазницаВсего,      ФорматВыводаСуммы);
		
		// Выводим представления и расшифровки подписей
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "МОЛ"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияАвтомобилей_ИнвентаризацияАвтомобилейНаКомиссии";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "ИНВ3"
// Возвращает сформированный табличный документ:
Функция ПолучитьДанныеДляПечатиИНВ3(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"             	, Объект.Организация);
	ДанныеОбъекта.Вставить("Валюта"        				, Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("Дата"                   	, Объект.Дата);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  	, Объект.ПодразделениеКомпании); 
	ДанныеОбъекта.Вставить("Основание"     				, Объект.ОснованиеВид);
	ДанныеОбъекта.Вставить("ОснованиеДата"         		, Объект.ОснованиеДата);
	ДанныеОбъекта.Вставить("ОснованиеНомер"         	, Объект.ОснованиеНомер);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнвентаризацияАвтомобилейАвтомобили.НомерСтроки КАК НомерСтроки,
	               |	ИнвентаризацияАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
	               |	ИнвентаризацияАвтомобилейАвтомобили.Автомобиль.VIN КАК ТоварКод,
	               |	ИнвентаризацияАвтомобилейАвтомобили.Количество КАК КоличествоКнижн,
	               |	ИнвентаризацияАвтомобилейАвтомобили.КоличествоУчет КАК КоличествоФакт,
	               |	ИнвентаризацияАвтомобилейАвтомобили.Цена,
	               |	ИнвентаризацияАвтомобилейАвтомобили.Сумма КАК СуммаКнижн,
	               |	ИнвентаризацияАвтомобилейАвтомобили.СуммаУчет КАК СуммаФакт
	               |ИЗ
	               |	Документ.ИнвентаризацияАвтомобилей.Автомобили КАК ИнвентаризацияАвтомобилейАвтомобили
	               |ГДЕ
	               |	ИнвентаризацияАвтомобилейАвтомобили.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти", Товары);
	
	ДанныеОбъекта.Вставить("ДатаНачалаИнвентаризации"   , Объект.ДатаНачалаИнвентаризации); 
	ДанныеОбъекта.Вставить("ДатаОкончанияИнвентаризации", Объект.ДатаОкончанияИнвентаризации);  
	ДанныеОбъекта.Вставить("МОЛ"						, 
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект.СкладКомпании,"МОЛ")
	); 
	ДанныеОбъекта.Вставить("ИнвентаризационнаяКомиссия"	, Объект.ИнвентаризационнаяКомиссия.Выгрузить());		
	Возврат ДанныеОбъекта;
	
КонецФункции

// Формирует печатную форму "ИНВ19"
// Возвращает сформированный табличный документ:
Функция ПолучитьДанныеДляПечатиИНВ19(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ИнвентаризацияАвтомобилей Тогда
		ВыборкаСтрокТовары = РегистрыНакопления.ОстаткиАвтомобилей.СоздатьНаборЗаписей();
		ПростоеСписание = ИСТИНА;
	ИначеЕсли Объект.ХозОперация = Справочники.ХозОперации.ИнвентаризацияАвтомобилейОтданныхНаКомиссию Тогда
		ВыборкаСтрокТовары = РегистрыНакопления.АвтомобилиОтданные.СоздатьНаборЗаписей();
		ПростоеСписание = ЛОЖЬ;
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Для хоз операции " + Объект.ХозОперация.Наименование +
			" формирование ИНВ-19 не описано.'"));
		Возврат Неопределено;
	КонецЕсли; 
	ВыборкаСтрокТовары.Отбор.Регистратор.Значение = Объект.Ссылка;
	ВыборкаСтрокТовары.Прочитать();

	// Определимся откуда будем брать многострочную часть документа
	// если движения есть, то из регистра, иначе - из табличной части документа.
	ЕстьДвиженияПоРегистру = Ложь;
	Если ВыборкаСтрокТовары.Количество() > 0 Тогда
		ЕстьДвиженияПоРегистру = Истина;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ИнвентаризацияАвтомобилейАвтомобили.НомерСтроки КАК НомерСтроки,
		|	ИнвентаризацияАвтомобилейАвтомобили.Автомобиль КАК Автомобиль,
		|	ИнвентаризацияАвтомобилейАвтомобили.Количество КАК КоличествоКнижн,
		|	ИнвентаризацияАвтомобилейАвтомобили.КоличествоУчет КАК КоличествоФакт,
		|	ИнвентаризацияАвтомобилейАвтомобили.Цена,
		|	ИнвентаризацияАвтомобилейАвтомобили.Сумма КАК СуммаКнижн,
		|	ИнвентаризацияАвтомобилейАвтомобили.СуммаУчет КАК СуммаФакт
		|ИЗ
		|	Документ.ИнвентаризацияАвтомобилей.Автомобили КАК ИнвентаризацияАвтомобилейАвтомобили
		|ГДЕ
		|	ИнвентаризацияАвтомобилейАвтомобили.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		ВыборкаСтрокТовары = Запрос.Выполнить().Выгрузить();
	КонецЕсли; 

	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"             	, Объект.Организация);
	ДанныеОбъекта.Вставить("Валюта"        				, Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("Дата"                   	, Объект.Дата);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  	, Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("Основание"         			, Объект.ОснованиеВид);
	ДанныеОбъекта.Вставить("ОснованиеДата"         		, Объект.ОснованиеДата);
	ДанныеОбъекта.Вставить("ОснованиеНомер"         	, Объект.ОснованиеНомер);
	ДанныеОбъекта.Вставить("ЕстьДвиженияПоРегистру"     , ЕстьДвиженияПоРегистру);
	ДанныеОбъекта.Вставить("ПростоеСписание"    		, ПростоеСписание);
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти"      , ВыборкаСтрокТовары);
	
	ДанныеОбъекта.Вставить("ДатаНачалаИнвентаризации"   , Объект.ДатаНачалаИнвентаризации); 
	ДанныеОбъекта.Вставить("ДатаОкончанияИнвентаризации", Объект.ДатаОкончанияИнвентаризации);  
	ДанныеОбъекта.Вставить("МОЛ"						, 
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект.СкладКомпании,"МОЛ")
	); 
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 			, 
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"ГлавныйБухгалтер")
	);
	
	Возврат ДанныеОбъекта;

КонецФункции

// Формирует печатную форму "Пустографка"
// Возвращает сформированный табличный документ:
Функция ПечатьИнвентаризацияАвтомобилей(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияАвтомобилей_ИнвентаризацияАвтомобилей";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИнвентаризацияАвтомобилей.ПФ_MXL_ИнвентаризацияАвтомобилей");
		
		// форматы вывода
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// заголовок
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		
		Если Документ.ХозОперация = Справочники.ХозОперации.ИнвентаризацияАвтомобилей Тогда
			ОбластьЗаголовок.Параметры.ТекстКонтрагентСклад = "Склад:";
			ОбластьЗаголовок.Параметры.ПредставлениеКонтрагентаСклада =
				УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СкладКомпании);
			ОбластьЗаголовок.Параметры.КонтрагентСклад = Документ.СкладКомпании;
		ИначеЕсли Документ.ХозОперация = Справочники.ХозОперации.ИнвентаризацияАвтомобилейОтданныхНаКомиссию Тогда
			ОбластьЗаголовок.Параметры.ТекстКонтрагентСклад = "Комиссионер:";
			ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
			ДополнительныеПараметры.НаДату = Документ.Дата;
			ОбластьЗаголовок.Параметры.ПредставлениеКонтрагентаСклада =
				УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Контрагент, , ДополнительныеПараметры);
			ОбластьЗаголовок.Параметры.КонтрагентСклад = Документ.Контрагент;
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// готовим области строки
		НомерСтраницы = 2; НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаУпр", Документ.ВалютаДокумента, 0);
		
		// заполним параметры шапки таблицы для следующего листа
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		   
		// перебор строк
		ВыборкаТабличнойЧасти = Документ.Автомобили;
		Для каждого СтрокаТабличнойЧасти Из ВыборкаТабличнойЧасти Цикл
			// заполняем данные строки
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхСтрокиДляАвтомобилей(СтрокаТабличнойЧасти,
				Документ);
			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Автомобили.Индекс(СтрокаТабличнойЧасти) = Документ.Автомобили.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
				
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,Сумма", Документ.ВалютаДокумента, 0);
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// Выводим представления и расшифровки подписей
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "МОЛ"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "Приказ (постановление, распоряжение) о проведении инвентаризации (ИНВ-22)"
//
Функция ПолучитьДанныеДляПечатиИНВ22(Объект) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияАвтомобилей.Ссылка КАК Ссылка,
	|	ИнвентаризацияАвтомобилей.Номер КАК Номер,
	|	ИнвентаризацияАвтомобилей.Дата КАК Дата,
	|	ИнвентаризацияАвтомобилей.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	ИнвентаризацияАвтомобилей.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	ИнвентаризацияАвтомобилей.ОснованиеВид КАК ОснованиеВид,
	|	ИнвентаризацияАвтомобилей.ОснованиеДата КАК ОснованиеДата,
	|	ИнвентаризацияАвтомобилей.ОснованиеНомер КАК ОснованиеНомер,
	|	ИнвентаризацияАвтомобилей.Организация КАК Организация,
	|	ИнвентаризацияАвтомобилей.Организация.КодПоОКПО КАК ОрганизацияКодПоОКПО,
	|	ИнвентаризацияАвтомобилей.СкладКомпании.Представление КАК ПредставлениеСклада,
	|	ИнвентаризацияАвтомобилей.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ИнвентаризацияАвтомобилей.ИнвентаризационнаяКомиссия.(
	|		НомерСтроки КАК НомерСтроки,
	|		ЧленКомиссии КАК ЧленКомиссии,
	|		Председатель КАК Председатель
	|	) КАК ИнвентаризационнаяКомиссия,
	|	ИнвентаризацияАвтомобилей.ПричинаПроведенияИнвентаризации КАК ПричинаПроведенияИнвентаризации
	|ИЗ
	|	Документ.ИнвентаризацияАвтомобилей КАК ИнвентаризацияАвтомобилей
	|ГДЕ
	|	ИнвентаризацияАвтомобилей.Ссылка = &Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИнвентаризацияАвтомобилей.Дата,
	|	Ссылка,
	|	Председатель УБЫВ";

	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВозвратОтПокупателяАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйСкладскойОрдерНаАвтомобили);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйСкладскойОрдерНаАвтомобили);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ИнвентаризацияАвтомобилей);

КонецФункции

#КонецОбласти

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговора",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов"));
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	// TODO: Временное формирование товаров отданных
	АвтомобилиОтданные = Объект.Движения.АвтомобилиОтданные.Выгрузить();
	АвтомобилиОтданные.Свернуть("ВидДвижения","СуммаУпр,СуммаСебестоимостиУпр");
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"АвтомобилиОтданные",
		АвтомобилиОтданные);
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаДоговора", ДополнительныеПараметры.ДляПроведения.ВалютаДоговора);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ИнвентаризацияАвтомобилей.Организация КАК Организация,
	|	ИнвентаризацияАвтомобилей.Ссылка КАК Ссылка,
	|	ИнвентаризацияАвтомобилей.Дата КАК Дата,
	|	ИнвентаризацияАвтомобилей.ХозОперация КАК ХозОперация,
	|	ИнвентаризацияАвтомобилей.Контрагент КАК Контрагент,
	|	ИнвентаризацияАвтомобилей.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ИнвентаризацияАвтомобилей.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	ИнвентаризацияАвтомобилей.Ссылка КАК Сделка,
	|	ИнвентаризацияАвтомобилей.СуммаДокумента КАК Сумма,
	|	ИнвентаризацияАвтомобилей.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	ИнвентаризацияАвтомобилей.ВалютаДокумента КАК ВалютаДокумента,
	|	ИнвентаризацияАвтомобилей.КурсДокумента КАК КурсДокумента,
	|	ИнвентаризацияАвтомобилей.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.НеЗачитывать) КАК СпособЗачетаАвансов,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.ИнвентаризацияАвтомобилей КАК ИнвентаризацияАвтомобилей
	|ГДЕ
	|	ИнвентаризацияАвтомобилей.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр, &ВалютаДоговора)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ХозОперация КАК ХозОперация,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДоговора КАК ВалютаДоговора,
	|	ДанныеДокумента.Сделка КАК Сделка,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыВзаиморасчетов = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютВзаиморасчетов.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетов.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыВзаиморасчетов
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютВзаиморасчетов
	|		ПО ДанныеДокумента.ВалютаДоговора = КурсыВалютВзаиморасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	
	Если ДвиженияДокумента.ДляПроведения.ХозОперация <> Справочники.ХозОперации.ИнвентаризацияАвтомобилейОтданныхНаКомиссию Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Задолженность.ВалютаДоговора КАК ВалютаДоговора,
	|	Задолженность.Сделка КАК Сделка,
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр
	|ИЗ
	|	Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)";
	
	РезультатЗапросаДокумента = Запрос.Выполнить();
	
	Если РезультатЗапросаДокумента.Пустой() Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	Сумма = 0;
	Если ДвиженияДокумента.ДляПроведения.АвтомобилиОтданные.Количество() = 0 Тогда
		
		ЗапросПартииОтданные = Новый Запрос;
		ЗапросПартииОтданные.Текст = "ВЫБРАТЬ
		|	АвтомобилиОтданные.ВидДвижения КАК ВидДвижения,
		|	СУММА(АвтомобилиОтданные.СуммаУпр) КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.АвтомобилиОтданные КАК АвтомобилиОтданные
		|ГДЕ
		|	АвтомобилиОтданные.Регистратор = &Регистратор
		|	И АвтомобилиОтданные.ВидДвижения = &ВидДвижения
		|
		|СГРУППИРОВАТЬ ПО
		|	АвтомобилиОтданные.ВидДвижения";
		ЗапросПартииОтданные.УстановитьПараметр("Регистратор", ДвиженияДокумента.ДляПроведения.Ссылка);
		ЗапросПартииОтданные.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
		
		ПартииОтданные = ЗапросПартииОтданные.Выполнить().Выгрузить();
		
	Иначе
		
		ПартииОтданные = ДвиженияДокумента.ДляПроведения.АвтомобилиОтданные;
		
	КонецЕсли;
	
	СтрокаСуммы = ПартииОтданные.Найти(
		ВидДвиженияНакопления.Расход,
		"ВидДвижения");
	
	Если СтрокаСуммы <> Неопределено Тогда
		
		Сумма = СтрокаСуммы.СуммаУпр;
		
	КонецЕсли;
	
	Если Сумма = 0 Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	ДанныеОбОплате = ОбменДаннымиСлужебный.РезультатЗапросаВСтруктуру(РезультатЗапросаДокумента);
	ДанныеОбОплате.Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
		Сумма,
		Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
		ДанныеОбОплате.КурсВалютыУпр,
		ДанныеОбОплате.ВалютаДокумента,
		ДанныеОбОплате.КурсДокумента);
	
	РасчетыСКонтрагентамиСервер.ДополнитьРасчетыСКонтрагентом(
		РасчетыСКонтрагентами,
		ДанныеОбОплате,
		Неопределено,
		Отказ);
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли