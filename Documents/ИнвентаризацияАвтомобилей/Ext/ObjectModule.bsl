// Модуль объекта документа "Инвентаризация автомобилей"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если ЭтоНовый() Тогда
		ЭтотОбъект.ТипЦен = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенЗакупкиАвтомобилей", ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ПроверитьКорректностьТоваровКомиссионныхДокументов(
		ЭтотОбъект,
		Отказ,
		"Автомобили",
		"Автомобиль",
		Ложь
	);

	// Проверим заполнение РНПТ у послеживаемого товара
	УчетПрослеживаемыхТоваровСервер.ПроверитьЗаполнениеРНПТПрослеживаемогоТовара(ЭтотОбъект, "Автомобили", "Автомобиль", "ГТДИзлишков");
	
КонецПроцедуры

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка корректности типа цен.
	Если ТипЦен.Рассчитывается Тогда
		
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Использование расчетных типов цен запрещено.'"), ЭтотОбъект);
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ДоговорВзаиморасчетовБыл");
	ДополнительныеСвойства.Вставить("АвтомобильСкладКомпанииБыл");
	ДополнительныеСвойства.Вставить("ИзмеренияРегистраБыли");
	ДополнительныеСвойства.Вставить("МоментВремениБыл");
	Если (ХозОперация=Справочники.ХозОперации.ИнвентаризацияАвтомобилейОтданныхНаКомиссию) И 
		 (ЗначениеЗаполнено(СкладКомпании)) Тогда
		 СкладКомпании=Неопределено;
	КонецЕсли; 
	
	// Проверим корректность склада
	Если НЕ Отказ Тогда
		Если ЗначениеЗаполнено(СкладКомпании) Тогда
			Если СкладКомпании.Розничный Тогда
				#Если Клиент Тогда
				ПоказатьПредупреждение(,"Выбранный склад: """ + СкладКомпании + """ является розничным!
				|Выберите оптовый склад",10);
				#КонецЕсли
				Отказ=Истина; Возврат;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	// если мы проводим документ задним числом, то пересчитаем количество расчетное
	Если РежимЗаписи=РежимЗаписиДокумента.Проведение Тогда
		Запрос=Новый Запрос;
		Если ХозОперация=Справочники.ХозОперации.ИнвентаризацияАвтомобилей Тогда
			ТекстЗапроса="
			|ВЫБРАТЬ
			|	ВЫБОР 
			|		КОГДА СУММА(ОстаткиАвтомобилей.КоличествоОстаток) ЕСТЬ NULL
			|		ТОГДА 0
			|		ИНАЧЕ СУММА(ОстаткиАвтомобилей.КоличествоОстаток)
			|		КОНЕЦ
			|	КАК Количество
			|ИЗ
			|	РегистрНакопления.ОстаткиАвтомобилей.Остатки(&Момент,Автомобиль=&Автомобиль И СкладКомпании=&СкладКомпании) КАК ОстаткиАвтомобилей
			|";
			Запрос.УстановитьПараметр("СкладКомпании",СкладКомпании);
		Иначе
			ТекстЗапроса="
			|ВЫБРАТЬ
			|	ВЫБОР 
			|		КОГДА СУММА(АвтомобилиОтданные.КоличествоОстаток) ЕСТЬ NULL
			|		ТОГДА 0
			|		ИНАЧЕ СУММА(АвтомобилиОтданные.КоличествоОстаток)
			|		КОНЕЦ
			|	КАК Количество
			|ИЗ
			|	РегистрНакопления.АвтомобилиОтданные.Остатки(&Момент,Контрагент=&Контрагент И Автомобиль=&Автомобиль И ДоговорВзаиморасчетов=&ДоговорВзаиморасчетов) КАК АвтомобилиОтданные
			|";
			Запрос.УстановитьПараметр("Контрагент",Контрагент);
			Запрос.УстановитьПараметр("ДоговорВзаиморасчетов",ДоговорВзаиморасчетов);
		КонецЕсли;
		Запрос.Текст=ТекстЗапроса;
		ГраницаРасчета=Новый Граница(МоментВремени(),ВидГраницы.Исключая);
		Запрос.УстановитьПараметр("Момент",?(ЭтоНовый(),КонецДня(ТекущаяДатаСеанса()),ГраницаРасчета));
		Для Каждого СтрокаТЧ Из Автомобили Цикл
			Запрос.УстановитьПараметр("Автомобиль",СтрокаТЧ.Автомобиль);
			Результат=Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				СтрокаТЧ.Количество=0;
			Иначе
				СтрокаТЧ.Количество=Результат.Выгрузить().Получить(0).Количество;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоЗаказамАвтомобилейПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоКомплектацииПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
	Если ОбновитьДанныеАвтомобилей() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// проверим, что автомобиль отсутствует на остатках по различным регистрам
	Если НЕ РегистрыНакопления.ОстаткиАвтомобилей.ПроверитьОстаткиАвтомобилей(ЭтотОбъект,Отказ) Тогда 
		Возврат; 
	КонецЕсли;
	
	// У нас не стандартная таблица, поэтому сформирует свой результат запроса по автомобилям.
	РезультатЗапросаПоАвтомобилямИзлишки=ПолучитьРезультатЗапросаПоАвтомобилям(Истина);
	РезультатЗапросаПоАвтомобилямНедостачи=ПолучитьРезультатЗапросаПоАвтомобилям(Ложь);
	
	Если ХозОперация=Справочники.ХозОперации.ИнвентаризацияАвтомобилей Тогда
		Отказ = ПроверитьЗаказыНаАвтомобиль(РезультатЗапросаПоАвтомобилямНедостачи.Выгрузить().ВыгрузитьКолонку("Автомобиль")) ИЛИ Отказ;
	КонецЕсли;
	
	// получим шапку документа
	ШапкаДокумента=ПолучитьШапкуДокумента(Ссылка);

	// определим вид проводки
	Если ХозОперация=Справочники.ХозОперации.ИнвентаризацияАвтомобилей Тогда
		
		
		// 1. Приходуем излишки
		НаборЗаписейОстатки=Движения.ОстаткиАвтомобилей;
		НаборЗаписейОстатки.РежимПроведения=РежимПроведения;
		НаборЗаписейОстатки.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейОстатки.РезультатЗапросаПоАвтомобилям=РезультатЗапросаПоАвтомобилямИзлишки;
		НаборЗаписейОстатки.СкладКомпании=СкладКомпании;
		НаборЗаписейОстатки.СтатусПартии=Перечисления.СтатусыПартий.ТоварКупленный;
		НаборЗаписейОстатки.Партия=Ссылка;
		НаборЗаписейОстатки.ШапкаДокумента=ШапкаДокумента;
		//НаборЗаписейОстатки.Приходовать=Истина;
		//НаборЗаписейОстатки.Резервировать=Ложь;
		Отказ=НЕ НаборЗаписейОстатки.Приход() ИЛИ Отказ;
		
		// 2. Списываем недостачи
		НаборЗаписейОстатки.РежимПроведения=РежимПроведения;
		НаборЗаписейОстатки.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейОстатки.РезультатЗапросаПоАвтомобилям=РезультатЗапросаПоАвтомобилямНедостачи;
		НаборЗаписейОстатки.СкладКомпании=СкладКомпании;
		НаборЗаписейОстатки.СтатусПартии=Новый Массив;
		НаборЗаписейОстатки.СтатусПартии.Добавить(Перечисления.СтатусыПартий.ТоварКупленный);
		НаборЗаписейОстатки.СтатусПартии.Добавить(Перечисления.СтатусыПартий.ТоварПринятыйКомиссия);
		НаборЗаписейОстатки.Партия=Ссылка;
		НаборЗаписейОстатки.ШапкаДокумента=ШапкаДокумента;
		//НаборЗаписейОстатки.Приходовать=Истина;
		//НаборЗаписейОстатки.Резервировать=Ложь;
		Отказ=НЕ НаборЗаписейОстатки.Расход() ИЛИ Отказ;
		// 3. Зачитываем принятые на реализацию автомобили, которые были списаны инвентаризацией.
		НаборЗаписейРеализованныеТовары=Движения.РеализованныеАвтомобили;
		НаборЗаписейРеализованныеТовары.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейРеализованныеТовары.Списание=Истина;
		НаборЗаписейРеализованныеТовары.РезультатЗапросаПоАвтомобилям=РезультатЗапросаПоАвтомобилямНедостачи;
		Отказ=НЕ НаборЗаписейРеализованныеТовары.Приход() ИЛИ Отказ;
		
		Если НЕ Отказ Тогда
			НаборЗаписейОстатки.Записать();
			НаборЗаписейРеализованныеТовары.Записать();
		КонецЕсли; 
		
	Иначе
		// 1. Приходуем излишки
		НаборЗаписейАвтомобилиОтданные=Движения.АвтомобилиОтданные;
		НаборЗаписейАвтомобилиОтданные.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейАвтомобилиОтданные.Контрагент=Контрагент;
		НаборЗаписейАвтомобилиОтданные.ДоговорВзаиморасчетов=ДоговорВзаиморасчетов;
		НаборЗаписейАвтомобилиОтданные.РезультатЗапросаПоАвтомобилям=РезультатЗапросаПоАвтомобилямИзлишки;
		НаборЗаписейАвтомобилиОтданные.ПередаватьНаКомиссиюВсеАвтомобили=Истина;
		Отказ=НЕ НаборЗаписейАвтомобилиОтданные.Приход() ИЛИ Отказ;
		// 2. Списываем недостачи
		НаборЗаписейАвтомобилиОтданные.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейАвтомобилиОтданные.Контрагент=Контрагент;
		НаборЗаписейАвтомобилиОтданные.ДоговорВзаиморасчетов=ДоговорВзаиморасчетов;
		НаборЗаписейАвтомобилиОтданные.РезультатЗапросаПоАвтомобилям=РезультатЗапросаПоАвтомобилямНедостачи;
		НаборЗаписейАвтомобилиОтданные.ПередаватьНаКомиссиюВсеАвтомобили=Истина;
		Отказ=НЕ НаборЗаписейАвтомобилиОтданные.Расход() ИЛИ Отказ;
		
		Если Не ЗначениеЗаполнено(КурсВалютыУпр) Тогда
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Константы.ВалютаУправленческогоУчетаКомпании.Получить(),МоментВремени());
			КурсУпр		   = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		Иначе
			КурсУпр        = КурсВалютыУпр;
		КонецЕсли;
		тзАвтомобилиОтданные = НаборЗаписейАвтомобилиОтданные.Выгрузить();
		тзАвтомобилиОтданные.Свернуть("ВидДвижения","СуммаУпр,СуммаСебестоимостиУпр");
		
		// 3. Взаиморасчеты за излишний товар.
		СтрокаТЗ = тзАвтомобилиОтданные.Найти(ВидДвиженияНакопления.Приход,"ВидДвижения");
		Если СтрокаТЗ <> Неопределено Тогда
			НаборЗаписейДиР 						= Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект 			= ЭтотОбъект;
			БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(Дата);
			Если БалансВедетсяПоПодразделениям Тогда 
				НаборЗаписейДиР.Подразделение = СкладКомпании.ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДиР.СтатьяДоходовИРасходов	= СтатьяОприходованияОбнаруженныхИзлишковТМЦ;
			НаборЗаписейДиР.ВУпрВалюте				= Истина;
			НаборЗаписейДиР.Доход					= СтрокаТЗ.СуммаУпр;
			//НаборЗаписейДиР.ШапкаДокумента			= ШапкаДокумента;
			Отказ=НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;
		// 4. Взаиморасчеты за утраченный товар.
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
			РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
		СтрокаТЗ = тзАвтомобилиОтданные.Найти(ВидДвиженияНакопления.Расход,"ВидДвижения");
		Если СтрокаТЗ <> Неопределено
			И Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
			НаборЗаписейВзаиморасчеты=Движения.ВзаиморасчетыКомпании;
			НаборЗаписейВзаиморасчеты.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейВзаиморасчеты.Контрагент=Контрагент;
			НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов=ДоговорВзаиморасчетов;
			НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок = 
				(СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически);
			НаборЗаписейВзаиморасчеты.Сделка=Неопределено;
			НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем=Истина;
			НаборЗаписейВзаиморасчеты.Сумма=РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТЗ.СуммаУпр,Константы.ВалютаУправленческогоУчетаКомпании.Получить(),КурсУпр,ВалютаДокумента,КурсДокумента);
			НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц=0;
			Отказ = НЕ НаборЗаписейВзаиморасчеты.Приход() ИЛИ Отказ;
			
			// доходы и расходы по суммовым разницам
			СуммаДоходаРасходаСуммовыхРазниц=НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
			Если СуммаДоходаРасходаСуммовыхРазниц<>0 Тогда
				НаборЗаписейДиР = Движения.ДоходыИРасходы;
				НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
				НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
				НаборЗаписейДиР.ВУпрВалюте = Истина;
				Если СуммаДоходаРасходаСуммовыхРазниц<0 Тогда
					НаборЗаписейДиР.Расход = -СуммаДоходаРасходаСуммовыхРазниц;
				Иначе
					НаборЗаписейДиР.Доход = СуммаДоходаРасходаСуммовыхРазниц;
				КонецЕсли;
				Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			НаборЗаписейАвтомобилиОтданные.Записать();
		КонецЕсли; 
		
	КонецЕсли;
	
	Документы.ИнвентаризацияАвтомобилей.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	Документы.ИнвентаризацияАвтомобилей.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	// Проверим налиие прослеживаемых товаров, которые были реализованы
	Если НЕ Отказ Тогда
		Движения.ОстаткиАвтомобилей.Записать();
	КонецЕсли;
	ТаблицаПрослеживаемыхТоваров = Документы.ИнвентаризацияАвтомобилей.ОперацииСПрослеживаемымиТоварами(
		ЭтотОбъект);
	НаборЗаписейОперацииПрослеживаемости = Движения.ОперацииПрослеживаемыхТоваров;
	НаборЗаписейОперацииПрослеживаемости.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейОперацииПрослеживаемости.ТаблицаПрослеживаемыхТоваров = ТаблицаПрослеживаемыхТоваров;
	Если НЕ НаборЗаписейОперацииПрослеживаемости.ДобавитьОперациюПрослеживаемости() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// двигаем границу последовательности автомобилей
	РаботаСГраницами.СдвинутьГраницуЗаказовАвтомобилей(Ссылка, ДополнительныеСвойства, Движения);
	
	// двигаем границу последовательности взаиморасчетов
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	
	// проведем партии товаров
	Отказ=НЕ ПровестиПоПартиям(РежимПроведения,Ссылка) ИЛИ Отказ;
	
	// сбросим переменные
	РезультатЗапросаПоАвтомобилямИзлишки=Неопределено;
	РезультатЗапросаПоАвтомобилямНедостачи=Неопределено;
	
КонецПроцедуры // ОбработкаПроведения

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбновитьДанныеАвтомобилей()
	
	РежимЗаписи = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "РежимЗаписи");
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		
		Возврат Ложь;
		
	КонецЕсли;

	АвтомобилиСсылки = Автомобили.ВыгрузитьКолонку("Автомобиль");
	ГТДАвтомобилей = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(АвтомобилиСсылки, "ГТД");
		
	Для Каждого СтрокаАвтомобиля Из Автомобили Цикл
		
		АвтомобильПриходуется = (СтрокаАвтомобиля.КоличествоУчет > СтрокаАвтомобиля.Количество);
		Если НЕ АвтомобильПриходуется Тогда
			Продолжить;
		КонецЕсли;
		
		ГТД = ГТДАвтомобилей.Получить(СтрокаАвтомобиля.Автомобиль);
		
		Если ЗначениеЗаполнено(СтрокаАвтомобиля.ГТДИзлишков) И СтрокаАвтомобиля.ГТДИзлишков <> ГТД Тогда
			
			Попытка              
				
				Автомобиль = СтрокаАвтомобиля.Автомобиль.ПолучитьОбъект();
				Автомобиль.Заблокировать();
				Автомобиль.ГТД = СтрокаАвтомобиля.ГТДИзлишков;
				Автомобиль.ОбменДанными.Загрузка = Истина;
				Автомобиль.Записать();
			
			Исключение
			
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Не удалось обновить информацию автомобиля %1'"), Автомобиль.Наименование), ЭтотОбъект);
				СобытиеЖурнала = НСтр("ru = 'Обновление информации об автомобиле из инвентаризации'",
					ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(СобытиеЖурнала, УровеньЖурналаРегистрации.Ошибка,, СтрокаАвтомобиля.Автомобиль,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат Истина;
			
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#Область ОбработчикиЗаполненияОбъекта

// Проверка наличия резервов на автомобиль
//
// Параметры
// Возвращаемое значение:
//   <Булево> - Заказов на данный автомобиль нет
//
Функция ПроверитьЗаказыНаАвтомобиль(СписокАвтомобилей = Неопределено)
	ДокументОбъектСтруктура = Новый Структура();
	ДокументОбъектСтруктура.Вставить("МетаданныеИмя", ЭтотОбъект.Метаданные().Имя);
	ДокументОбъектСтруктура.Вставить("МоментВремени", МоментВремени());
	Если СписокАвтомобилей = Неопределено Тогда
		ДокументОбъектСтруктура.Вставить("Автомобили", Автомобили.ВыгрузитьКолонку("Автомобиль"));
	Иначе
		ДокументОбъектСтруктура.Вставить("Автомобили", СписокАвтомобилей);
	КонецЕсли; 
	Возврат ЗащищенныеФункцииАльфаАвтоСервер.РезервыАвтомобиляПроверитьЗаказыНаАвтомобиль(ДокументОбъектСтруктура);
КонецФункции // ПроверитьЗаказыНаАвтомобиль()

// У нас не стандартная таблица, поэтому сформирует свой результат запроса по автомобилям
// Излишки - Булево, истина-возвращает излишки, ложь-недостачи
Функция ПолучитьРезультатЗапросаПоАвтомобилям(Излишки)
	ДокументОбъектСтруктура=Новый Структура();
	ДокументОбъектСтруктура.Вставить("Ссылка",Ссылка);
	ДокументОбъектСтруктура.Вставить("МоментВремени",МоментВремени());
	ДокументОбъектСтруктура.Вставить("ТипЦен",ТипЦен);
	ДокументОбъектСтруктура.Вставить("СкладКомпании",СкладКомпании);
	ДокументОбъектСтруктура.Вставить("ХозОперация",ХозОперация);
	ДокументОбъектСтруктура.Вставить("Контрагент",Контрагент);
	ДокументОбъектСтруктура.Вставить("ДоговорВзаиморасчетов",ДоговорВзаиморасчетов);
	Возврат ЗащищенныеФункцииАльфаАвтоСервер.ИнвентаризацияАвтомобилейПолучитьРезультатЗапросаПоАвтомобилям(ДокументОбъектСтруктура,Излишки);
КонецФункции

// Возвращает выборку по шапке
// ДокументСсылка - Ссылка на документ для которого получаем шапку
Функция ПолучитьШапкуДокумента(ДокументСсылка) Экспорт
	Запрос=Новый Запрос("
	|ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ТипЦен КАК ТипЦен,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	/////////// ПРИВАТ ////////////
	|	Док.СкладКомпании КАК СкладКомпании,
	|	Док.Контрагент КАК Контрагент,
	|	Док.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Док.СтатьяСписанияОбнаруженнойНедостачиТМЦ КАК СтатьяСписанияОбнаруженнойНедостачиТМЦ,
	|	Док.СтатьяОприходованияОбнаруженныхИзлишковТМЦ КАК СтатьяОприходованияОбнаруженныхИзлишковТМЦ
	|
	|ИЗ
	|	Документ."+Метаданные().Имя+" КАК Док
	|ГДЕ
	|	Док.Ссылка=&Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции

// Формирует движения документа по партионным регистрам
// Возвращает Истина - все хорошо, ложь - чего-то не так
Функция ПровестиПоПартиям(Режим, ДокументСсылка) Экспорт
	Отказ = Ложь;
	
	// получим шапку документа
	ШапкаДокумента = ПолучитьШапкуДокумента(ДокументСсылка);
	
	// Получим способ ведения баланса.
	БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
		
	// Если было отложенное проведение по партиям, то :
	// Очистим возможные движения по регистру комплектации автомобилей 
	НаборЗаписейПартионногоРегистра = РегистрыНакопления.КомплектацияАвтомобилей.СоздатьНаборЗаписей();
	НаборЗаписейПартионногоРегистра.Отбор.Регистратор.Значение = ШапкаДокумента.Ссылка;
	НаборЗаписейПартионногоРегистра.Отбор.Регистратор.Использование = Истина;
	НаборЗаписейПартионногоРегистра.Записать();
	
	// Проверим, если подразделение проводиться по партиям "отложено", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям = Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента = ШапкаДокумента;
	Отказ = НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	
	// определим вид проводки
	Если ХозОперация = Справочники.ХозОперации.ИнвентаризацияАвтомобилей Тогда
		// Спишем оборудование автомобиля
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ОстаткиАвтомобилей.Автомобиль
		|ИЗ
		|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
		|ГДЕ
		|	ОстаткиАвтомобилей.Регистратор = &Регистратор
		|	И ОстаткиАвтомобилей.ВидДвижения = &ВидДвиженияРасход";
		Запрос.УстановитьПараметр("Регистратор", ШапкаДокумента.Ссылка);
		Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
		ВыборкаАвтомобилиРасход = Запрос.Выполнить().Выбрать();
		НаборЗаписейКомплектацияАвтомобилей = Движения.КомплектацияАвтомобилей;
		Пока ВыборкаАвтомобилиРасход.Следующий() Цикл
			// Спишем оборудование недостающего автомобиля
			НаборЗаписейКомплектацияАвтомобилей.РежимПроведения = Режим;
			НаборЗаписейКомплектацияАвтомобилей.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейКомплектацияАвтомобилей.РезультатЗапросаПоТоварам = Неопределено;
			НаборЗаписейКомплектацияАвтомобилей.Автомобиль = ВыборкаАвтомобилиРасход.Автомобиль;
			НаборЗаписейКомплектацияАвтомобилей.СкладКомпании = ШапкаДокумента.СкладКомпании;
			НаборЗаписейКомплектацияАвтомобилей.ПериодДвижения = ШапкаДокумента.МоментВремени;
			НаборЗаписейКомплектацияАвтомобилей.ШапкаДокумента = ШапкаДокумента;
			Отказ = НЕ НаборЗаписейКомплектацияАвтомобилей.Расход() ИЛИ Отказ;
		КонецЦикла;
		Если НЕ Отказ Тогда
			НаборЗаписейКомплектацияАвтомобилей.Записать();
		КонецЕсли;
		
		// Доходы и расходы
		НаборЗаписейОстатки = Движения.ОстаткиАвтомобилей;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		             |	ОстаткиАвтомобилей.ВидДвижения,
		             |	СУММА(ОстаткиАвтомобилей.СуммаУпр) КАК СуммаУпр
		             |ИЗ
		             |	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
		             |ГДЕ
		             |	ОстаткиАвтомобилей.Регистратор = &Регистратор
		             |СГРУППИРОВАТЬ ПО
		             |	ОстаткиАвтомобилей.ВидДвижения";
		Запрос.УстановитьПараметр("Регистратор",ШапкаДокумента.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(Новый Структура("ВидДвижения",ВидДвиженияНакопления.Приход)) Тогда
			НаборЗаписейДиР 						= Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект 			= ЭтотОбъект;
			Если БалансВедетсяПоПодразделениям Тогда
				НаборЗаписейДиР.Подразделение = ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
			КонецЕсли;
			Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
				НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьНеоприходованныхПартий;
			Иначе
				НаборЗаписейДиР.СтатьяДоходовИРасходов = ШапкаДокумента.СтатьяОприходованияОбнаруженныхИзлишковТМЦ;
			КонецЕсли; 
			НаборЗаписейДиР.ВУпрВалюте				= Истина;
			НаборЗаписейДиР.Доход					= Выборка.СуммаУпр;
			НаборЗаписейДиР.ШапкаДокумента			= ШапкаДокумента;
			Отказ=НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли; 
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(Новый Структура("ВидДвижения",ВидДвиженияНакопления.Расход)) Тогда
			НаборЗаписейДиР 						= Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект 			= ЭтотОбъект;
			Если БалансВедетсяПоПодразделениям Тогда
				НаборЗаписейДиР.Подразделение = ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
			КонецЕсли;
			Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
				НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьНеоприходованныхПартий;
			Иначе
				НаборЗаписейДиР.СтатьяДоходовИРасходов = ШапкаДокумента.СтатьяСписанияОбнаруженнойНедостачиТМЦ;
			КонецЕсли; 
			НаборЗаписейДиР.ВУпрВалюте				= Истина;
			НаборЗаписейДиР.Расход					= Выборка.СуммаУпр;
			НаборЗаписейДиР.ШапкаДокумента			= ШапкаДокумента;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли; 
	Иначе
		// Доходы и расходы
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СУММА(АвтомобилиОтданные.СуммаУпр) КАК СуммаУпр,
		|	СУММА(АвтомобилиОтданные.СуммаСебестоимостиУпр) КАК СуммаСебестоимостиУпр
		|ИЗ
		|	РегистрНакопления.АвтомобилиОтданные КАК АвтомобилиОтданные
		|ГДЕ
		|	АвтомобилиОтданные.Регистратор = &Регистратор
		|	И АвтомобилиОтданные.ВидДвижения = &ВидДвиженияРасход";
		Запрос.УстановитьПараметр("Регистратор", ШапкаДокумента.Ссылка);
		Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			// сумма себестоимости списанных товаров по недостачи
			НаборЗаписейДиР					= Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект	= ЭтотОбъект;
			Если БалансВедетсяПоПодразделениям Тогда
				НаборЗаписейДиР.Подразделение = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
			КонецЕсли;
			Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
				НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьНеоприходованныхПартий;
			Иначе
				НаборЗаписейДиР.СтатьяДоходовИРасходов = ШапкаДокумента.СтатьяСписанияОбнаруженнойНедостачиТМЦ;
			КонецЕСли;
			НаборЗаписейДиР.ВУпрВалюте		= Истина;
			НаборЗаписейДиР.Расход			= Выборка.СуммаСебестоимостиУпр;	
			НаборЗаписейДиР.ШапкаДокумента	= ШапкаДокумента;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			// СуммаВсего - списанная сумма товарной задолженности
			НаборЗаписейДиР					= Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект	= ЭтотОбъект;
			Если БалансВедетсяПоПодразделениям Тогда
				НаборЗаписейДиР.Подразделение = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДиР.ВУпрВалюте		= Истина;
			Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
				НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьНеоприходованныхПартий;
			Иначе
				НаборЗаписейДиР.СтатьяДоходовИРасходов = ШапкаДокумента.СтатьяОприходованияОбнаруженныхИзлишковТМЦ;
			КонецЕсли;
			НаборЗаписейДиР.Доход			= Выборка.СуммаУпр;
			НаборЗаписейДиР.ШапкаДокумента	= ШапкаДокумента;
			Отказ=НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;
	КонецЕсли;
	
	// двигаем границу последовательности комплектации
	Если Ссылка <> ДокументСсылка Тогда
		
		РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоКомплектацииПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		
	КонецЕсли;
	
	РаботаСГраницами.СдвинутьГраницуКомплектации(ДокументСсылка, ДополнительныеСвойства, Движения);
	
	Возврат НЕ Отказ;
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
