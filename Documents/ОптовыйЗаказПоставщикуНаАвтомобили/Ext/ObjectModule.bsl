#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	Если ОбработкаСобытийДокументаСервер.ВводСПустымОснованием(ДанныеЗаполнения) Тогда
		//@skip-check module-unused-local-variable
		ВалютаДокумента = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен,, Ложь);
	КонецЕсли;
	
	ПродолжатьВыполнение = Не ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если ПродолжатьВыполнение Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Состояние = Перечисления.СостоянияОптовогоЗаказаПоставщикуНаАвтомобили.Черновик;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

//@skip-check data-exchange-load
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Если Не ТипЦен.Пустая() И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипЦен, "Рассчитывается") Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Использование расчетных типов цен запрещено.'"),
			ЭтотОбъект,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если Состояние <> Перечисления.СостоянияОптовогоЗаказаПоставщикуНаАвтомобили.Черновик Тогда
		
		ЗаказыСервер.СопоставитьСпецификацииИАвтомобили(ЭтотОбъект, Отказ);
		
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоЗаказамАвтомобилейПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСГраницами.ПередУдалением(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказыПоставщикамНаАвтомобили.Автомобиль КАК Автомобиль
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикамНаАвтомобили КАК ЗаказыПоставщикамНаАвтомобили
		|ГДЕ
		|	ЗаказыПоставщикамНаАвтомобили.Регистратор = &Регистратор"
	);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	АвтомобилиКПроверке = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Автомобиль");
	
	Если Не ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Документы.ОптовыйЗаказПоставщикуНаАвтомобили.ПроверитьКорректностьИзмененияЗаказа(ЭтотОбъект, АвтомобилиКПроверке,
		Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если Не ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Документы.ОптовыйЗаказПоставщикуНаАвтомобили.ИнициализироватьДанныеДокумента(ЭтотОбъект, ДополнительныеСвойства);
	
	Если Состояние <> Перечисления.СостоянияОптовогоЗаказаПоставщикуНаАвтомобили.Черновик И Не Отказ Тогда
		
		Документы.ОптовыйЗаказПоставщикуНаАвтомобили.ПроверитьПредоплатыПоЗаказамКлиентов(ЭтотОбъект,
				ДополнительныеСвойства, Отказ);
		
		Если Не Отказ Тогда
			
			Документы.ОптовыйЗаказПоставщикуНаАвтомобили.СформироватьДвиженияЗаказовНаАвтомобили(ЭтотОбъект,
				ДополнительныеСвойства);
			
			Движения.Записать();
			
			Документы.ОптовыйЗаказПоставщикуНаАвтомобили.ПроверитьЗаказыНаАвтомобиль(ЭтотОбъект,
				ДополнительныеСвойства, Отказ);
			
			АвтомобилиКПроверке = ДополнительныеСвойства
				.ДвиженияПередПроведением
				.ЗаказыПоставщикамНаАвтомобили
				.ВыгрузитьКолонку("Автомобиль");
			Документы.ОптовыйЗаказПоставщикуНаАвтомобили.ПроверитьКорректностьИзмененияЗаказа(
				ЭтотОбъект,
				АвтомобилиКПроверке,
				Отказ
			);
				
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		РаботаСГраницами.СдвинутьГраницуЗаказовАвтомобилей(Ссылка, ДополнительныеСвойства, Движения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Оптовый заказ поставщику на автомобили"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ОптовыйЗаказПоставщикуНаАвтомобили(ДанныеЗаполнения,
                                                               ТекстЗаполнения = "",
                                                               СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"Автомобили"
	);
	
	Если Не ПродолжитьВыполнение Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Автомобили.Очистить();
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта на основании документа "Оптовый заказ клиента на автомобили"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ОптовыйЗаказКлиентаНаАвтомобили(ДанныеЗаполнения,
                                                            ТекстЗаполнения = "",
                                                            СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если Не ПродолжитьВыполнение Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ОсновнойПоставщик = ПраваИНастройкиПользователя.Значение("ОсновнойПоставщик", ЭтотОбъект);
	
	Если ЗначениеЗаполнено(ОсновнойПоставщик) И ОсновнойПоставщик <> Контрагент Тогда
		
		Контрагент = ОсновнойПоставщик;
		ПараметрыДействия = Новый Структура();
		Документы.ОптовыйЗаказПоставщикуНаАвтомобили.КонтрагентПриИзменении(ЭтотОбъект, ПараметрыДействия);
		
	КонецЕсли;
	
	ТипЦен = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенЗакупкиАвтомобилей", ЭтотОбъект);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОптовыйЗаказКлиентаНаАвтомобилиАвтомобили.Автомобиль,
		|	ОптовыйЗаказКлиентаНаАвтомобилиАвтомобили.Спецификация
		|ПОМЕСТИТЬ АвтомобилиИзЗаказаКлиенту
		|ИЗ
		|	Документ.ОптовыйЗаказКлиентаНаАвтомобили.Автомобили КАК ОптовыйЗаказКлиентаНаАвтомобилиАвтомобили
		|ГДЕ
		|	ОптовыйЗаказКлиентаНаАвтомобилиАвтомобили.Ссылка = &ЗаказПоставщику
		|	И НЕ ОптовыйЗаказКлиентаНаАвтомобилиАвтомобили.Отменено
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗаказыПоставщикамНаАвтомобилиОстатки.Автомобиль
		|ПОМЕСТИТЬ АвтомобилиНаОстатках
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикамНаАвтомобили.Остатки(, Автомобиль В
		|		(ВЫБРАТЬ
		|			АвтомобилиИзЗаказаКлиенту.Автомобиль
		|		ИЗ
		|			АвтомобилиИзЗаказаКлиенту КАК АвтомобилиИзЗаказаКлиенту)) КАК ЗаказыПоставщикамНаАвтомобилиОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОстаткиАвтомобилейОстатки.Автомобиль
		|ИЗ
		|	РегистрНакопления.ОстаткиАвтомобилей.Остатки(, Автомобиль В
		|		(ВЫБРАТЬ
		|			АвтомобилиИзЗаказаКлиенту.Автомобиль
		|		ИЗ
		|			АвтомобилиИзЗаказаКлиенту КАК АвтомобилиИзЗаказаКлиенту)) КАК ОстаткиАвтомобилейОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПродажиАвтомобилейОбороты.Автомобиль
		|ИЗ
		|	РегистрНакопления.ПродажиАвтомобилей.Обороты(&НачалоПериода,,, Автомобиль В
		|		(ВЫБРАТЬ
		|			АвтомобилиИзЗаказаКлиенту.Автомобиль
		|		ИЗ
		|			АвтомобилиИзЗаказаКлиенту КАК АвтомобилиИзЗаказаКлиенту)) КАК
		|		ПродажиАвтомобилейОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АвтомобилиИзЗаказаКлиенту.Автомобиль,
		|	АвтомобилиИзЗаказаКлиенту.Спецификация
		|ИЗ
		|	АвтомобилиИзЗаказаКлиенту КАК АвтомобилиИзЗаказаКлиенту
		|		ЛЕВОЕ СОЕДИНЕНИЕ АвтомобилиНаОстатках КАК АвтомобилиНаОстатках
		|		ПО АвтомобилиИзЗаказаКлиенту.Автомобиль = АвтомобилиНаОстатках.Автомобиль
		|ГДЕ
		|	АвтомобилиНаОстатках.Автомобиль ЕСТЬ NULL"
	);
	Запрос.УстановитьПараметр("ЗаказПоставщику", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("НачалоПериода", ДанныеЗаполнения.МоментВремени());
	
	Автомобили.Очистить();
	
	АвтомобилиДляДобовленияВЗаказ = Запрос.Выполнить().Выбрать();
	ДобавленныеСпецификации = Новый Массив();
	
	Пока АвтомобилиДляДобовленияВЗаказ.Следующий() Цикл
		
		ДобавленныеСпецификации.Добавить(АвтомобилиДляДобовленияВЗаказ.Спецификация);
		НоваяСтрока = Автомобили.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, АвтомобилиДляДобовленияВЗаказ);
		Документы.ОптовыйЗаказПоставщикуНаАвтомобили.АвтомобилиАвтомобильПриИзменении(ЭтотОбъект, НоваяСтрока);
		
	КонецЦикла;
	
	СпецификацииКУдалению = Новый Массив();
	
	Для Каждого Строка Из Спецификации Цикл
		
		Если ДобавленныеСпецификации.Найти(Строка.КлючСтроки) = Неопределено Тогда
			
			СпецификацииКУдалению.Добавить(Строка);
			
		Иначе
			
			Строка.Количество = Автомобили.НайтиСтроки(Новый Структура("Спецификация", Строка.КлючСтроки)).Количество();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СпецификацияКУдалению Из СпецификацииКУдалению Цикл
		
		Спецификации.Удалить(СпецификацияКУдалению);
		
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли