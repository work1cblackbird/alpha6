#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПоступлениеАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетОтПоставщикаЗаАвтомобили);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ОптовыйЗаказПоставщикуНаАвтомобили);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЧекНаОплату);

	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено - описание добавленной команды.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ОптовыйЗаказПоставщикуНаАвтомобили);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
//@skip-check module-empty-method
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(
		КомандыПечати,
		"Документ.ОптовыйЗаказПоставщикуНаАвтомобили",
		"ПФ_MXL_ОптовыйЗаказПоставщикуНаАвтомобили",
		НСтр("ru = 'Оптовый заказ поставщику на автомобили'"),
		СсылкаНаДокумент
	);
	
КонецПроцедуры

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив из Строка - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - ТаблицаЗначений  - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ОптовыйЗаказПоставщикуНаАвтомобили") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ОптовыйЗаказПоставщикуНаАвтомобили",
			НСтр("ru = 'Оптовый заказ поставщику на автомобили'"),
			ПечатьОптовыйЗаказПоставщикуНаАвтомобили(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
		);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
// 
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//  Параметры - Структура- Параметры
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Автомобили");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ПоступлениеАвтомобилей");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Автомобили");
	КонецЕсли;
	
КонецПроцедуры

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
// 
// Возвращаемое значение:
//  Соответствие Из Строка - Получить параметры команд заполнения
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	ПараметрыКоманд = Новый Соответствие;
	Возврат ПараметрыКоманд;
	
КонецФункции

#КонецОбласти

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив из Строка - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	ОбязательныеРеквизиты.Добавить("Состояние");
	ОбязательныеРеквизиты.Добавить("Спецификации.Марка");
	ОбязательныеРеквизиты.Добавить("Спецификации.Модель");
	ОбязательныеРеквизиты.Добавить("Спецификации.Количество");
	ОбязательныеРеквизиты.Добавить("Автомобили.Автомобиль");
	ОбязательныеРеквизиты.Добавить("Автомобили.Количество");
	ОбязательныеРеквизиты.Добавить("Автомобили.СтавкаНДС");
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - с полями:
//   * Спецификации - Массив из Строка - 
//   * Автомобили - Массив из Строка - 
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	УникальныеРеквизиты = Новый Структура("Спецификации,Автомобили", Новый Массив(), Новый Массив());
	//TODO: Добавить уникальные реквизиты автомобилей
	Возврат УникальныеРеквизиты;
	
КонецФункции

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов:
//   * ДоговорВзаиморасчетов - Булево - 
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий.
//
// Параметры:
//  Объект				 - ДанныеФормыСтруктура	 - Объект, для которого выполняется обработка события.
//  ПараметрыДействия	 - Структура			 - Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Структура - Параметры действия.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Истина);
	
	//@skip-check constructor-function-return-section
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяУстановкаЦен", Ложь) Тогда
		
		Для Каждого Авто Из Объект.Автомобили Цикл
			ОбработкаТабличнойЧастиАвтомобили.УстановитьЦенуНаАвтомобиль(Объект, Авто);
			АвтомобилиЦенаПриИзменении(Объект, Авто);
		КонецЦикла;
		
		ПараметрыДействия.ТребуетсяУстановкаЦен = Ложь;
		
		Если ПараметрыДействия.Свойство("ТребуетсяПересчетЦен") Тогда
			ПараметрыДействия.ТребуетсяПересчетЦен = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиАвтомобили.ПерезаполнитьЦеныТабличныхЧастей(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	УстановитьСтавкиНДС(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	УстановитьСтавкиНДС(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

//@skip-check module-structure-top-region
#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтомобили

// Обработчик события возникающего при изменении данных реквизита "Автомобиль"
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура, ДокументОбъект - объект документа;
//  Строка - ДанныеФормыЭлементКоллекции, СтрокаТаблицыЗначений - строка автомобилей;
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиАвтомобильПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиАвтомобили.АвтомобильПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена"
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура, ДокументОбъект - объект документа;
//  Строка - ДанныеФормыЭлементКоллекции, СтрокаТаблицыЗначений - строка автомобилей;
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиАвтомобили.ЦенаПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма"
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура, ДокументОбъект - объект документа;
//  Строка - ДанныеФормыЭлементКоллекции, СтрокаТаблицыЗначений - строка автомобилей;
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиАвтомобили.СуммаПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего"
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура, ДокументОбъект - объект документа;
//  Строка - ДанныеФормыЭлементКоллекции, СтрокаТаблицыЗначений - строка автомобилей;
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиАвтомобили.СуммаВсегоПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС"
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура, ДокументОбъект - объект документа;
//  Строка - ДанныеФормыЭлементКоллекции, СтрокаТаблицыЗначений - строка автомобилей;
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиАвтомобили.СтавкаНДСПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки"
// Параметры:
//  Объект - ДанныеФормыСтруктура, ДокументОбъект - объект документа;
//  Строка - ДанныеФормыЭлементКоллекции, СтрокаТаблицыЗначений - строка автомобилей;
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиАвтомобили.АвтомобилиРассчитатьСуммуСтроки(
		"СуммаСкидки",
		Объект,
		Строка,
		ПараметрыДействия,
		"Автомобили"
	);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Приобретен у физ. лица"
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура, ДокументОбъект - объект документа;
//  Строка - ДанныеФормыЭлементКоллекции, СтрокаТаблицыЗначений - строка автомобилей;
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиПриобретенУФизЛицаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	АвтомобилиСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

//@skip-check module-structure-top-region
#Область ОбработчикиСобытийЭлементовТаблицыФормыСпецификации

// Обработчик события возникающего при изменении данных реквизита "Спецификации"
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура, ДокументОбъект - объект документа;
//  Строка - ДанныеФормыЭлементКоллекции, СтрокаТаблицыЗначений - строка автомобилей;
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура СпецификацииМодельПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Строка.Модель) Тогда
		
		//@skip-check bsl-legacy-check-string-literal
		Строка.Марка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Модель, "Марка");
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Спецификации"
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура, ДокументОбъект - объект документа;
//  Строка - ДанныеФормыЭлементКоллекции, СтрокаТаблицыЗначений - строка автомобилей;
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура СпецификацииВариантКомплектацииПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Строка.Модель) Тогда
		
		//@skip-check bsl-legacy-check-string-literal
		Строка.Модель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ВариантКомплектации, "Владелец");
		СпецификацииМодельПриИзменении(Объект, Строка, ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПроведения

// Инициализировать данные документа для проведения.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.ОптовыйЗаказПоставщикуНаАвтомобили - Документ объект
//  ДополнительныеСвойства - Структура - Дополнительные свойства
Процедура ИнициализироватьДанныеДокумента(ДокументОбъект, ДополнительныеСвойства) Экспорт
	
	//@skip-check bsl-legacy-check-static-feature-access-for-unknown-left-part
	ДополнительныеСвойства.Вставить("ХозОперация", ДокументОбъект.ХозОперация);
	//@skip-check bsl-legacy-check-static-feature-access-for-unknown-left-part
	ДополнительныеСвойства.Вставить("ВалютаДокумента", ДокументОбъект.ВалютаДокумента);
	//@skip-check bsl-legacy-check-static-feature-access-for-unknown-left-part
	ДополнительныеСвойства.Вставить("КурсДокумента", ДокументОбъект.КурсДокумента);
	
	ДополнительныеСвойства.Вставить("Ссылка", ДокументОбъект.Ссылка);
	ДополнительныеСвойства.Вставить("ВалютаУпр", Константы.ВалютаУправленческогоУчетаКомпании.Получить());
	ДополнительныеСвойства.Вставить("АвтомобилиДляЗаписи", АвтомобилиВЗаказе(ДокументОбъект));
	
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.ДоговорВзаиморасчетов,
		"ВалютаВзаиморасчетов,МаксимальныйКредит,ОтменаКонтроляСуммыКредита");
	ДополнительныеСвойства.Вставить("ДанныеДоговора", ДанныеДоговора);
	ДополнительныеСвойства.Вставить("ПроверкаМаксимальногоПревышенияКредитаКонтрагента",
		ПраваИНастройкиПользователя.Значение("ПроверкаМаксимальногоПревышенияКредитаКонтрагента", ДокументОбъект));
	
КонецПроцедуры

// Автомобили в заказе.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.ОптовыйЗаказПоставщикуНаАвтомобили - Документ объект
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Автомобили в заказе
Функция АвтомобилиВЗаказе(ДокументОбъект) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили.Автомобиль КАК Автомобиль,
		|	ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили.Количество КАК Количество,
		|	ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили.СуммаВсего КАК СуммаВВалютеДокумента
		|ИЗ
		|	Документ.ОптовыйЗаказПоставщикуНаАвтомобили.Автомобили КАК ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили
		|ГДЕ
		|	ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили.Ссылка = &Ссылка
		|	И НЕ ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили.Отменено"
	);
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Сформировать движения заказов на автомобили.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.ОптовыйЗаказПоставщикуНаАвтомобили - Документ объект
//  ДополнительныеСвойства - Структура- 
Процедура СформироватьДвиженияЗаказовНаАвтомобили(ДокументОбъект, ДополнительныеСвойства) Экспорт
	
	ДокументОбъект.Движения.ЗаказыПоставщикамНаАвтомобили.Очистить();
	
	Для Каждого ЗаписьАвтомобиля Из ДополнительныеСвойства.АвтомобилиДляЗаписи Цикл
		
		НоваяЗапись = ДокументОбъект.Движения.ЗаказыПоставщикамНаАвтомобили.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьАвтомобиля);
		НоваяЗапись.ЗаказПоставщику = ДокументОбъект.Ссылка;
		НоваяЗапись.Регистратор = ДокументОбъект.Ссылка;
		НоваяЗапись.Период = ДокументОбъект.Дата;
		НоваяЗапись.ХозОперация = ДополнительныеСвойства.ХозОперация;
		
		НоваяЗапись.Сумма = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				ЗаписьАвтомобиля.СуммаВВалютеДокумента,
				ДополнительныеСвойства.ВалютаДокумента,
				ДополнительныеСвойства.КурсДокумента,
				ДополнительныеСвойства.ДанныеДоговора.ВалютаВзаиморасчетов,
				ДокументОбъект.Дата
			),
			2
		);
		НоваяЗапись.СуммаУпр = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				ЗаписьАвтомобиля.СуммаВВалютеДокумента,
				ДополнительныеСвойства.ВалютаДокумента,
				ДополнительныеСвойства.КурсДокумента,
				ДополнительныеСвойства.ВалютаУпр,
				ДокументОбъект.Дата
			),
			2
		);
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПроверкиКорректностиПриПроведении

// Проверить корректность изменения заказа.
// 
// Параметры:
//  ДокументЗаказ - ДокументОбъект.ОптовыйЗаказПоставщикуНаАвтомобили - Документ заказ;
//  Автомобили - Массив Из СправочникСсылка.Автомобили - Автомобили
//  Отказ - Булево - Отказ
//
Процедура ПроверитьКорректностьИзмененияЗаказа(ДокументЗаказ, Автомобили, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(Автомобили) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказыПоставщикамНаАвтомобилиОстатки.Автомобиль КАК Автомобиль,
		|	ЗаказыПоставщикамНаАвтомобилиОстатки.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикамНаАвтомобили.Остатки(, Автомобиль В (&Автомобили)
		|	И ЗаказПоставщику = &ЗаказПоставщику) КАК ЗаказыПоставщикамНаАвтомобилиОстатки
		|ГДЕ
		|	ЗаказыПоставщикамНаАвтомобилиОстатки.КоличествоОстаток < 0"
	);
	Запрос.УстановитьПараметр("Автомобили", Автомобили);
	Запрос.УстановитьПараметр("ЗаказПоставщику", ДокументЗаказ.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	АвтомобилиСОшибкой = РезультатЗапроса.Выбрать();
	
	ШаблонСообщения = НСтр("ru = 'Автомобиль <%1> уже поступил на склад. Отмена в заказе не возможна.'");
	
	Пока АвтомобилиСОшибкой.Следующий() Цикл
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(ШаблонСообщения, АвтомобилиСОшибкой.Автомобиль),
			,
			,
			,
			Отказ
		);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверить процент предоплаты.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.ОптовыйЗаказПоставщикуНаАвтомобили - Документ объект
//  ДополнительныеСвойства - Структура - Дополнительные свойства
//  Отказ - Булево - Признак отказа
Процедура ПроверитьПредоплатыПоЗаказамКлиентов(ДокументОбъект, ДополнительныеСвойства, Отказ) Экспорт
	
	АвтомобилиЗаказанныеКлиентами = АвтомобилиЗаказанныеКлиентами(ДокументОбъект.Ссылка);
	ДолгиПоПредоплате = ДолгиПоПредоплате(ДокументОбъект.Ссылка,
		АвтомобилиЗаказанныеКлиентами.ВыгрузитьКолонку("Заказ"));
	
	ШаблонСообщения = НСтр("ru = 'Автомобили: <%1> ожидают предоплаты по заказу <%2>. Долг составляет: %3 %4.'");
	
	Для Каждого Долг Из ДолгиПоПредоплате Цикл
		
		АвтомобилиВЗаказе = АвтомобилиЗаказанныеКлиентами.НайтиСтроки(Новый Структура("Заказ", Долг.Заказ));
		ЧастиСтроки = Новый Массив();
		
		Для Каждого Автомобиль Из АвтомобилиВЗаказе Цикл
			
			ЧастиСтроки.Добавить(Автомобиль.Автомобиль);
			
		КонецЦикла;
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				ШаблонСообщения,
				СтрСоединить(ЧастиСтроки, ", "),
				СокрЛП(Долг.Заказ),
				Формат(Долг.Долг, "ЧЦ=15; ЧДЦ=2"),
				СокрЛП(Долг.Валюта)
			),
			,
			,
			,
			Отказ
		);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверить заказы на автомобиль.
// 
// Параметры:
//  ДокументОбъект -  ДокументОбъект.ОптовыйЗаказКлиентаНаАвтомобили- Документ объект
//  ДополнительныеСвойства - Структура - Дополнительные свойства
//  Отказ - Булево - Признак отказа
Процедура ПроверитьЗаказыНаАвтомобиль(ДокументОбъект, ДополнительныеСвойства, Отказ) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказыПоставщикамНаАвтомобилиОстатки.Автомобиль КАК Автомобиль,
		|	ЗаказыПоставщикамНаАвтомобилиОстатки.ЗаказПоставщику КАК Заказ,
		|	ЕСТЬNULL(ЗаказыПоставщикамНаАвтомобилиОстатки.КоличествоОстаток, 0) КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикамНаАвтомобили.Остатки(&НаГраницу,
		|		Автомобиль В (&Автомобили)) КАК ЗаказыПоставщикамНаАвтомобилиОстатки
		|ИТОГИ
		|	СУММА(Количество)
		|ПО
		|	Автомобиль
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыАвтомобилейОстатки.Автомобиль КАК Автомобиль,
		|	ЗаказыАвтомобилейОстатки.ЗаказПоставщику КАК Заказ,
		|	ЕСТЬNULL(ЗаказыАвтомобилейОстатки.КоличествоОстаток, 0) КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикамНаАвтомобили.Остатки(, Автомобиль В (&Автомобили)) КАК ЗаказыАвтомобилейОстатки
		|ИТОГИ
		|	СУММА(Количество)
		|ПО
		|	Автомобиль"
	);
	Запрос.УстановитьПараметр("НаГраницу", Новый Граница(ДокументОбъект.МоментВремени(), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Автомобили", ДополнительныеСвойства.АвтомобилиДляЗаписи.ВыгрузитьКолонку("Автомобиль"));
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ОшибкиПоЗаказам = Новый Соответствие();
	
	ОстаткиНаДатуЗаказа = РезультатыЗапросов[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ОстаткиНаДатуЗаказа.Следующий() Цикл
		
		Если ОстаткиНаДатуЗаказа.Количество > 1 Тогда
			
			ДетализацияПоЗаказам = ОстаткиНаДатуЗаказа.Выбрать();
			
			Пока ДетализацияПоЗаказам.Следующий() Цикл
				
				Если ДетализацияПоЗаказам.Заказ <> ДокументОбъект.Ссылка Тогда
					
					ОшибкиПоЗаказам.Вставить(ДетализацияПоЗаказам.Автомобиль, ДетализацияПоЗаказам.Заказ);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОстаткиНаТекущуюДату = РезультатыЗапросов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ОстаткиНаТекущуюДату.Следующий() Цикл
		
		Если ОстаткиНаТекущуюДату.Количество > 1 Тогда
			
			ДетализацияПоЗаказам = ОстаткиНаТекущуюДату.Выбрать();
			
			Пока ДетализацияПоЗаказам.Следующий() Цикл
				
				Если ДетализацияПоЗаказам.Заказ <> ДокументОбъект.Ссылка Тогда
					
					ОшибкиПоЗаказам.Вставить(ДетализацияПоЗаказам.Автомобиль, ДетализацияПоЗаказам.Заказ);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ШаблонСообщенияАвтомобильЗаказан = НСтр("ru = 'Автомобиль: <%1> уже заказан по документу <%2>.'");
	
	Для Каждого Ошибка Из ОшибкиПоЗаказам Цикл
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(ШаблонСообщенияАвтомобильЗаказан, Ошибка.Ключ, Ошибка.Значение),
			,
			,
			,
			Отказ
		);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
// Возвращаемое значение:
//  Структура - структура с полями:
//   * СуммаДокумента       - Число
//   * СуммаНДС             - Число
//   * СуммаБезНДС          - Число
//   * СуммаСкидкиДокумента - Число
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	СуммаДокумента = Объект.Автомобили.Итог("СуммаВсего"); // Число
	
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", СуммаДокумента);
	
	Если НЕ Расширенные Тогда
		
		//@skip-check constructor-function-return-section
		Возврат ИтогиОперации;
		
	КонецЕсли;
	
	СуммаНДС = Объект.Автомобили.Итог("СуммаНДС"); // Число
	
	ИтогиОперации.Вставить("СуммаНДС"            , СуммаНДС);
	ИтогиОперации.Вставить("СуммаБезНДС"         , СуммаДокумента - СуммаНДС);
	ИтогиОперации.Вставить("СуммаСкидкиДокумента", Объект.Автомобили.Итог("СуммаСкидки"));
	//@skip-check constructor-function-return-section
	Возврат ИтогиОперации;
	
КонецФункции

// Непоступившие автомобили.
// 
// Параметры:
//  ЗаказПоставщику - ДокументСсылка.ОптовыйЗаказПоставщикуНаАвтомобили - Заказ поставщику
// 
// Возвращаемое значение:
//  РезультатЗапроса - Непоступившие автомобили
//
Функция НепоступившиеАвтомобили(ЗаказПоставщику) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили.Автомобиль,
		|	ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили.Количество,
		|	ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили.Цена,
		|	ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили.Сумма,
		|	ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили.СуммаСкидки,
		|	ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили.СтавкаНДС,
		|	ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили.СуммаНДС,
		|	ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили.СуммаВсего
		|ПОМЕСТИТЬ АвтомобилиЗаказа
		|ИЗ
		|	Документ.ОптовыйЗаказПоставщикуНаАвтомобили.Автомобили КАК ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили
		|ГДЕ
		|	ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили.Ссылка = &Заказ
		|	И НЕ ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили.Отменено
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиАвтомобилейОстатки.Автомобиль,
		|	ОстаткиАвтомобилейОстатки.КоличествоОстаток
		|ПОМЕСТИТЬ АвтомобилиНаОстатках
		|ИЗ
		|	РегистрНакопления.ОстаткиАвтомобилей.Остатки(, Автомобиль В
		|		(ВЫБРАТЬ
		|			АвтомобилиЗаказа.Автомобиль
		|		ИЗ
		|			АвтомобилиЗаказа КАК АвтомобилиЗаказа)) КАК ОстаткиАвтомобилейОстатки
		|ГДЕ
		|	ОстаткиАвтомобилейОстатки.КоличествоОстаток > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АвтомобилиЗаказа.Автомобиль КАК Автомобиль,
		|	АвтомобилиЗаказа.Автомобиль.VIN КАК VIN,
		|	АвтомобилиЗаказа.Количество,
		|	АвтомобилиЗаказа.Цена,
		|	АвтомобилиЗаказа.Сумма,
		|	АвтомобилиЗаказа.СуммаСкидки,
		|	АвтомобилиЗаказа.СтавкаНДС,
		|	АвтомобилиЗаказа.СуммаНДС,
		|	АвтомобилиЗаказа.СуммаВсего
		|ИЗ
		|	АвтомобилиЗаказа КАК АвтомобилиЗаказа
		|ЛЕВОЕ СОЕДИНЕНИЕ АвтомобилиНаОстатках КАК АвтомобилиНаОстатках
		|ПО АвтомобилиЗаказа.Автомобиль = АвтомобилиНаОстатках.Автомобиль
		|ГДЕ
		|	АвтомобилиНаОстатках.Автомобиль ЕСТЬ NULL
		|"
	);
	Запрос.УстановитьПараметр("Заказ", ЗаказПоставщику);
	Возврат Запрос.Выполнить();
	
КонецФункции

// Сумма автомобиля.
// 
// Параметры:
//  Заказ - ДокументСсылка.ОптовыйЗаказПоставщикуНаАвтомобили - Заказ
//  Автомобиль - СправочникСсылка.Автомобили - Автомобиль
// 
// Возвращаемое значение:
//  Структура - Суммовые показатели автомобиля:
// * Сумма - Число -
// * СтавкаНДС - СправочникСсылка.СтавкиНДС -
Функция СуммовыеПоказателиАвтомобиля(Заказ, Автомобиль) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили.СуммаВсего КАК Сумма,
		|	ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили.СтавкаНДС КАК СтавкаНДС
		|ИЗ
		|	Документ.ОптовыйЗаказПоставщикуНаАвтомобили.Автомобили КАК ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили
		|ГДЕ
		|	ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили.Ссылка = &Заказ
		|	И ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили.Автомобиль = &Автомобиль"
	);
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Автомобиль", Автомобиль);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Новый Структура("Сумма,СтавкаНДС", 0, Справочники.СтавкиНДС.ОсновнаяСтавкаНДС);
		
	КонецЕсли;
	
	СуммаАвтомобиля = РезультатЗапроса.Выбрать();
	СуммаАвтомобиля.Следующий();
	//@skip-check constructor-function-return-section
	Возврат Новый Структура("Сумма,СтавкаНДС", СуммаАвтомобиля.Сумма, СуммаАвтомобиля.СтавкаНДС);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьСтавкиНДС(Объект, ПараметрыДействия)
	
	// Организация может является плательщиком НДС, а может и нет.. надо обработать ТЧ
	ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата);
		
	СтавкаНДС = ?(ПараметрыНДС.ОсвобожденОтНДС,
		Справочники.СтавкиНДС.БезНДС, 
		РаботаСоСтавкамиНДССервер.СтавкаНДСНоменклатуры(ПараметрыНДС)
	);
	
	Для Каждого СтрокаТЧ Из Объект.Автомобили Цикл
		СтрокаТЧ.СтавкаНДС = СтавкаНДС;
		АвтомобилиСтавкаНДСПриИзменении(Объект, СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры

Функция АвтомобилиЗаказанныеКлиентами(Заказ)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили.Автомобиль КАК Автомобиль
		|ПОМЕСТИТЬ АвтомобилиВЗаказе
		|ИЗ
		|	Документ.ОптовыйЗаказПоставщикуНаАвтомобили.Автомобили КАК ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили
		|ГДЕ
		|	ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили.Ссылка = &Заказ
		|	И НЕ ОптовыйЗаказПоставщикуНаАвтомобилиАвтомобили.Отменено
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АвтомобилиВЗаказе.Автомобиль,
		|	ЗаказыАвтомобилейОстатки.Заказ
		|ИЗ
		|	АвтомобилиВЗаказе КАК АвтомобилиВЗаказе
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыАвтомобилей.Остатки(&НаДату, Автомобиль В
		|			(ВЫБРАТЬ
		|				АвтомобилиВЗаказе.Автомобиль
		|			ИЗ
		|				АвтомобилиВЗаказе КАК АвтомобилиВЗаказе)) КАК ЗаказыАвтомобилейОстатки
		|		ПО АвтомобилиВЗаказе.Автомобиль = ЗаказыАвтомобилейОстатки.Автомобиль"
	);
	Запрос.УстановитьПараметр("НаДату", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "Дата"));
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДолгиПоПредоплате(ЗаказПоставщику, ЗаказыНаАвтомобили)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Валюта",            Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	Результат.Колонки.Добавить("СуммаЗаказа",       Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Результат.Колонки.Добавить("ПроцентПредоплаты", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Результат.Колонки.Добавить("Предоплата",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Результат.Колонки.Добавить("Долг",              Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	ТипыЗаказов = Новый Массив(2);
	ТипыЗаказов[0] = Тип("ДокументСсылка.ЗаказНаАвтомобиль");
	ТипыЗаказов[1] = Тип("ДокументСсылка.ОптовыйЗаказКлиентаНаАвтомобили");
	Результат.Колонки.Добавить("Заказ", Новый ОписаниеТипов(ТипыЗаказов));
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаЗаказов.Ссылка КАК Заказ,
		|	ТаблицаЗаказов.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК Валюта,
		|	ТаблицаЗаказов.ПроцентПредоплаты КАК ПроцентПредоплаты
		|ПОМЕСТИТЬ ТаблицаЗаказов
		|ИЗ
		|	Документ.ЗаказНаАвтомобиль КАК ТаблицаЗаказов
		|ГДЕ
		|	ТаблицаЗаказов.Проведен
		|	И ТаблицаЗаказов.Ссылка В (&Заказы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаЗаказов.Ссылка КАК Заказ,
		|	ТаблицаЗаказов.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК Валюта,
		|	ТаблицаЗаказов.ПроцентПредоплаты КАК ПроцентПредоплаты
		|ИЗ
		|	Документ.ОптовыйЗаказКлиентаНаАвтомобили КАК ТаблицаЗаказов
		|ГДЕ
		|	ТаблицаЗаказов.Проведен
		|	И ТаблицаЗаказов.Ссылка В (&Заказы)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыСКонтрагентамиОстатки.Заказ КАК Заказ,
		|	РасчетыСКонтрагентамиОстатки.СуммаОстаток КАК СуммаОстаток
		|ПОМЕСТИТЬ ОстаткиДолговПоЗаказам
		|ИЗ
		|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(&МоментВремени, Заказ В
		|		(ВЫБРАТЬ
		|			ТаблицаЗаказов.Заказ
		|		ИЗ
		|			ТаблицаЗаказов)) КАК РасчетыСКонтрагентамиОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВзаиморасчетыКомпанииОстатки.Сделка,
		|	ВзаиморасчетыКомпанииОстатки.СуммаОстаток
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыКомпании.Остатки(&МоментВремени, Сделка В
		|		(ВЫБРАТЬ
		|			ТаблицаЗаказов.Заказ
		|		ИЗ
		|			ТаблицаЗаказов)) КАК ВзаиморасчетыКомпанииОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаЗаказов.Заказ КАК Заказ,
		|	ТаблицаЗаказов.Валюта КАК Валюта,
		|	ТаблицаЗаказов.ПроцентПредоплаты КАК ПроцентПредоплаты,
		|	ЕСТЬNULL(ЗаказыПокупателейОстатки.СуммаОстаток, 0) КАК СуммаЗаказа,
		|	СУММА(ЕСТЬNULL(ОстаткиДолговПоЗаказам.СуммаОстаток, 0)) КАК СуммаДолга
		|ИЗ
		|	ТаблицаЗаказов КАК ТаблицаЗаказов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыАвтомобилей.Остатки(&МоментВремени, Заказ В
		|			(ВЫБРАТЬ
		|				ТаблицаЗаказов.Заказ
		|			ИЗ
		|				ТаблицаЗаказов)) КАК ЗаказыПокупателейОстатки
		|		ПО ТаблицаЗаказов.Заказ = ЗаказыПокупателейОстатки.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиДолговПоЗаказам КАК ОстаткиДолговПоЗаказам
		|		ПО ТаблицаЗаказов.Заказ = ОстаткиДолговПоЗаказам.Заказ
		|ГДЕ
		|	ЕСТЬNULL(ЗаказыПокупателейОстатки.СуммаОстаток, 0) <> 0
		|	ИЛИ ЕСТЬNULL(ОстаткиДолговПоЗаказам.СуммаОстаток, 0) <> 0
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаЗаказов.Заказ,
		|	ТаблицаЗаказов.Валюта,
		|	ТаблицаЗаказов.ПроцентПредоплаты,
		|	ЕСТЬNULL(ЗаказыПокупателейОстатки.СуммаОстаток, 0)"
	);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(ЗаказПоставщику.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Заказы", ЗаказыНаАвтомобили);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	ДолгиПоЗаказам = РезультатЗапроса.Выбрать();
	
	Пока ДолгиПоЗаказам.Следующий() Цикл
		
		Долг   = 0;
		Оплата = 0;
		
		Если ДолгиПоЗаказам.СуммаДолга > 0 Тогда
			Долг   = ДолгиПоЗаказам.СуммаДолга;
		Иначе
			Оплата = -ДолгиПоЗаказам.СуммаДолга;
		КонецЕсли;
		
		СуммаЗаказа = ДолгиПоЗаказам.СуммаЗаказа + Долг;
		// если есть дебиторская задолженность, то включим ее в состав суммы заказа
		Долг = (СуммаЗаказа * ДолгиПоЗаказам.ПроцентПредоплаты / 100) - Оплата;
		
		Погрешность = СуммаЗаказа * 0.0009999;
		
		Если Долг > Погрешность Тогда
			
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Заказ = ДолгиПоЗаказам.Заказ;
			НоваяСтрока.Валюта = ДолгиПоЗаказам.Валюта;
			НоваяСтрока.СуммаЗаказа = СуммаЗаказа;
			НоваяСтрока.ПроцентПредоплаты = ДолгиПоЗаказам.ПроцентПредоплаты;
			НоваяСтрока.Предоплата = Оплата;
			НоваяСтрока.Долг = Долг;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПечатьОптовыйЗаказПоставщикуНаАвтомобили(МассивОбъектов, ОбъектыПечати, ПараметрыПечати = Неопределено)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОптовыйЗаказПоставщикуНаАвтомобили_ОптовыйЗаказПоставщикуНаАвтомобили";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью
			.МакетПечатнойФормы("Документ.ОптовыйЗаказПоставщикуНаАвтомобили.ПФ_MXL_ОптовыйЗаказПоставщикуНаАвтомобили");
		
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		ДатаДокумента = Документ.Дата;
		
		// Вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ,
			НСтр("ru = 'Оптовый заказ поставщику на автомобили'"));
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = УправлениеПечатьюПлатформа
			.ПолучитьПредставлениеСправочника(Документ.Организация,, ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ПредставлениеПокупателя =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Контрагент, , ДополнительныеПараметры);
		
		// Выведем или удалим ШК
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Готовим шапку
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура;
		СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
		СтруктураИтоговПоСтранице.Вставить("СуммаНДС", 0);
		СтруктураИтоговПоСтранице.Вставить("СуммаВсего", 0);
		
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		ВыборкаТабличнойЧасти = Документ.Автомобили;
		Для каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			ЗаполнитьЗначенияСвойств(
				ОбластьСтрока.Параметры,
				УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхСтрокиДляАвтомобилей(СтрокаТЧ, Документ)
			);
			
			ДопОбластиПодвала = Неопределено;
			
			Если Документ.Автомобили.Индекс(СтрокаТЧ) = Документ.Автомобили.Количество() - 1 Тогда
				
				ДопОбластиПодвала = Новый Массив;
				ДопОбластиПодвала.Добавить(ОбластьПодвал);
				
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(
				ТабличныйДокумент,
				ОбластьСтрока,
				ОбластьШапкаТаблицы,
				ОбластьИтогоПоСтранице,
				НомерСтраницы,
				СтруктураИтоговПоСтранице,
				Документ,
				ДопОбластиПодвала
			);
			
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				
				СтруктураИтоговПоСтранице = Новый Структура;
				СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
				СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
				СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
				
			КонецЕсли;
			
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
			
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			
			УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(
				ТабличныйДокумент,
				ОбластьИтогоПоСтранице,
				СтруктураИтоговПоСтранице,
				Документ
			);
				
		КонецЕсли;
		
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("СуммаВсего");
		ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		НДСВсего = ВыборкаТабличнойЧасти.Итог("СуммаНДС");
		ОбластьПодвал.Параметры.НДСВсего = Формат(НДСВсего, ФорматВыводаСуммы);
		
		ШаблонСуммыПрописью = НСтр("ru = 'Всего наименований %1 на сумму %2'");
		ОбластьПодвал.Параметры.СуммаПрописью = СтрШаблон(
			ШаблонСуммыПрописью,
			ВыборкаТабличнойЧасти.Количество(),
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, Документ.ВалютаДокумента)
		);
		
		ДанныеПодписант = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Документ, "Исполнитель"); 
		ОбластьПодвал.Параметры.ИсполнительПредставление = ДанныеПодписант.Представление;

		УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(
			ТабличныйДокумент,
			ОбластьПодвал,
			,
			,
			НомерСтраницы,
			,
			Документ
		);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#КонецОбласти

#КонецЕсли