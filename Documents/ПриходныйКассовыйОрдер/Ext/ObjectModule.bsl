// Модуль объекта документа "Приходный кассовый ордер"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Счет на оплату"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//	НаОснованииЗаказа	 - Булево 		- на основании заказа.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СчетНаОплату(ДанныеЗаполнения,
		ТекстЗаполнения = "",
		СтандартнаяОбработка = Истина,
		НаОснованииЗаказа = Ложь) Экспорт

	// Если данные заполнения не указаны, значит производится проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПрерватьЗаполнение = НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если ПрерватьЗаполнение Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказНаАвтомобиль") 
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		РеквизитыДокументаОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументОснование,
			"ВалютаДокумента,Контрагент,ДоговорВзаиморасчетов,СуммаДокумента,СуммаПредоплаты,Дата"
		);
		
	Иначе
		РеквизитыДокументаОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументОснование,
			"ВалютаДокумента,Контрагент,ДоговорВзаиморасчетов,СуммаДокумента,Дата"
		);
		
	КонецЕсли;
	
	ВалютаДокумента = РеквизитыДокументаОснования.ВалютаДокумента;
	Документы.ПриходныйКассовыйОрдер.ВалютаДокументаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	Если НаОснованииЗаказа Тогда
		
		ДолгиОплатПоЗаказу = ЗаказыСервер.ДолгиПоПредоплате(ЭтотОбъект, ДокументОснование);
		
		Если ДолгиОплатПоЗаказу.Количество() > 0 Тогда
			
			ДокументОснованиеСуммаДокумента = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				ДолгиОплатПоЗаказу.Итог("СуммаЗаказа"),
				РеквизитыДокументаОснования.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,
				Дата,
				ВалютаДокумента,
				Дата,
				РежимОкругления.Окр15как20
			);
			
		Иначе
			
			ДокументОснованиеСуммаДокумента = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				РеквизитыДокументаОснования.СуммаДокумента,
				РеквизитыДокументаОснования.ВалютаДокумента,
				Дата,
				ВалютаДокумента,
				Дата,
				РежимОкругления.Окр15как20
			);
			
		КонецЕсли;
		
	Иначе
		
		ДокументОснованиеСуммаДокумента = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			РеквизитыДокументаОснования.СуммаДокумента,
			РеквизитыДокументаОснования.ВалютаДокумента,
			Дата,
			ВалютаДокумента,
			Дата,
			РежимОкругления.Окр15как20
		);
		
	КонецЕсли;
	
	Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(
			РеквизитыДокументаОснования.ДоговорВзаиморасчетов) Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаРасход КАК Сумма,
		|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрРасход КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.РасчетыСКонтрагентами.Обороты(
		|			,
		|			,
		|			,
		|			Контрагент = &Контрагент
		|				И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
		|				И (ДокументРасчетов = &Сделка
		|					ИЛИ ДокументРасчетов.ДокументОснование = &Сделка
		|					ИЛИ Заказ.ДокументОснование = &Сделка)) КАК ВзаиморасчетыКомпанииОстаткиИОбороты";
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаРасход КАК Сумма,
		|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрРасход КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыКомпании.Обороты(
		|			,
		|			,
		|			,
		|			Контрагент = &Контрагент
		|				И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
		|				И (Сделка = &Сделка
		|					ИЛИ Сделка.ДокументОснование = &Сделка)) КАК ВзаиморасчетыКомпанииОстаткиИОбороты";
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Сделка",                ДокументОснование);
	Запрос.УстановитьПараметр("Контрагент",            РеквизитыДокументаОснования.Контрагент);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", РеквизитыДокументаОснования.ДоговорВзаиморасчетов);
	
	ОплатыПоСделке = Запрос.Выполнить().Выгрузить();
		
	Если ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		
		Оплачено = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ОплатыПоСделке.Итог("Сумма"),
			ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,
			Дата,
			ВалютаДокумента,
			Дата,
			РежимОкругления.Окр15как20
		);
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			
			СуммаПредоплаты = ДокументОснование.СуммаПредоплаты;
			
		Иначе
			
			СуммаПредоплаты = ДокументОснованиеСуммаДокумента;
			
		КонецЕсли;
		
	Иначе
		
		Оплачено = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ОплатыПоСделке.Итог("СуммаУпр"),
			Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
			Дата,
			ВалютаДокумента,
			?(НЕ ЗначениеЗаполнено(КурсДокумента), Дата, КурсДокумента),
			РежимОкругления.Окр15как20
		);
		
		Если НаОснованииЗаказа Тогда
			
			СуммаПредоплаты = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				РеквизитыДокументаОснования.СуммаПредоплаты,
				РеквизитыДокументаОснования.ВалютаДокумента,
				РеквизитыДокументаОснования.Дата,
				ВалютаДокумента,
				Дата,
				РежимОкругления.Окр15как20
			);
			
		Иначе
			
			СуммаПредоплаты = ДокументОснованиеСуммаДокумента;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СуммаПредоплаты > Оплачено Тогда
		
		СуммаДокумента  = СуммаПредоплаты - Оплачено;
		Комментарий = СтрШаблон(НСтр("ru='Предоплата по документу <%1>'"), ДокументОснование);
		
	Иначе
		
		СуммаДокумента  = ДокументОснованиеСуммаДокумента - Оплачено;
		
	КонецЕсли;
	
	СуммаДокумента	= Макс(СуммаДокумента, 0);
	Документы.ПриходныйКассовыйОрдер.СуммаДокументаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	СтатьяДДС = Справочники.СтатьиДДС.ОплатаОтПокупателя;
	
	// Для правильного определения взаиморасчетов	
	Если ЕстьРеквизит(ДокументОснование, "ДокументОснование") Тогда
		ОснованиеСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДокументОснование");
		Если ТипЗнч(ОснованиеСчета) = Тип("ДокументСсылка.ДоговорАренды")
			ИЛИ ТипЗнч(ОснованиеСчета) = Тип("ДокументСсылка.ЗаказПокупателя")
			ИЛИ ТипЗнч(ОснованиеСчета) = Тип("ДокументСсылка.ЗаказНаАвтомобиль")
			ИЛИ ТипЗнч(ОснованиеСчета) = Тип("ДокументСсылка.ЗаказНаряд")
			ИЛИ ТипЗнч(ОснованиеСчета) = Тип("ДокументСсылка.РеализацияТоваров")
			ИЛИ ТипЗнч(ОснованиеСчета) = Тип("ДокументСсылка.РеализацияАвтомобилей") Тогда
			
			РасчетыСКонтрагентамиСервер.ЗаполнитьСоставОплатыПоДокументуРасчетов(ЭтотОбъект, ОснованиеСчета);
			Сделка = ОснованиеСчета;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для правильного определения взаиморасчетов сделка была заменена");
			
		КонецЕсли;
	Иначе
		РасчетыСКонтрагентамиСервер.ЗаполнитьСоставОплатыПоДокументуРасчетов(ЭтотОбъект, Неопределено);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_СчетНаОплату()

// Производит заполнение объекта на основании документа "Заказ покупателя"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПокупателя(ДанныеЗаполнения,
                                            ТекстЗаполнения = "",
                                            СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ОбработкаЗаполнения_СчетНаОплату(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, Истина);
	
КонецФункции // ОбработкаЗаполнения_ЗаказПокупателя()

// Производит заполнение объекта на основании документа "Расходный кассовый ордер"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РасходныйКассовыйОрдер(ДанныеЗаполнения,
		ТекстЗаполнения = "",
		СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Продолжать = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ Продолжать Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Изменим валюту для перерасчета
	ВалютаДокумента = ДокументОснование.ВалютаДокумента;
	Документы.ПриходныйКассовыйОрдер.ВалютаДокументаПриИзменении(
		ЭтотОбъект,
		ДополнительныеСвойства.ПараметрыДействия
	);
	
	Если ТипЗнч(ДокументОснование) =Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		ХозОперация = Справочники.ХозОперации.ВозвратДенежныхСредствОтПодотчетника;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Контрагент", ДокументОснование.Контрагент);
	СтруктураОтбора.Вставить("ДоговорВзаиморасчетов", ДокументОснование.ДоговорВзаиморасчетов);
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
			РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
		
			Если РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ВерсияОбъекта)
				И СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
			
			// Будем заполнять таблицу по движению РКО
			РасчетыСКонтрагентамиСервер.ЗаполнитьВзаиморасчетыПоДокументуОплаты(ЭтотОбъект, ДанныеЗаполнения);
			СуммаДокумента = Макс(Состав.Итог("Сумма"),0);
			Документы.ПриходныйКассовыйОрдер.СуммаДокументаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
			
			// Возвращаем признак возможности дальнейшей обработки события
			Возврат Истина;
			
		ИначеЕсли ЗначениеЗаполнено(ДокументОснование.Сделка) Тогда
			
			СтруктураОтбора.Вставить("ДокументРасчетов", ДокументОснование.Сделка);
			Сделка = ДокументОснование.Сделка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	тзДолги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(СтруктураОтбора);
	Если ВалютаДокумента = ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов Тогда
		Долг = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			тзДолги.Итог("Сумма"),
			ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,
			ДокументОснование.Дата,
			ВалютаДокумента,
			ДокументОснование.Дата,
			РежимОкругления.Окр15как20
		);
	ИначеЕсли ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
		Долг = тзДолги.Итог("СуммаБаз");
	Иначе
		Долг = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			тзДолги.Итог("СуммаУпр"),
			Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
			ДокументОснование.Дата,
			ВалютаДокумента,
			ДокументОснование.Дата,
			РежимОкругления.Окр15как20
		);
	КонецЕсли;
	
	СуммаДокумента = Макс(Долг,0);
	Документы.ПриходныйКассовыйОрдер.СуммаДокументаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	// Статья ДДС - Возврат из подотчета
	СтатьяДДС = Справочники.СтатьиДДС.ВозвратИзПодОтчета;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РасходныйКассовыйОрдер()

// Производит заполнение объекта на основании документа "Авансовый отчет"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_АвансовыйОтчет(ДанныеЗаполнения,
		ТекстЗаполнения = "",
		СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем обработчик заполнения на основании документа "Расходный кассовый ордер"
	Возврат ОбработкаЗаполнения_РасходныйКассовыйОрдер(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_АвансовыйОтчет()

// Производит заполнение объекта на основании документа "Инкассация"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Инкассация(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИзменилсяКонтрагент = (Контрагент            <> ДокументОснование.Инкассатор);
	ИзменилсяДоговор    = (ДоговорВзаиморасчетов <> ДокументОснование.ДоговорВзаиморасчетовИнкассатор);
	
	Контрагент            = ДокументОснование.Инкассатор;
	ДоговорВзаиморасчетов = ДокументОснование.ДоговорВзаиморасчетовИнкассатор;
	
	Если ИзменилсяКонтрагент Тогда
		Документы.ПриходныйКассовыйОрдер.КонтрагентПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	КонецЕсли;
	
	Если ИзменилсяДоговор Тогда
		Документы.ПриходныйКассовыйОрдер.ДоговорВзаиморасчетовПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	КонецЕсли;
	
	СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
	
	Оплаты = ДокументОснование.Оплаты.Выгрузить();
	Оплаты.Свернуть("ТипОплаты", "Сумма,СуммаВозврат");
	
	СтрокаОплатНаличными = Оплаты.Найти(Перечисления.ТипыОплатыККТ.Наличные, "ТипОплаты");
	Если СтрокаОплатНаличными=Неопределено Тогда
		СуммаДокумента = 0;
	Иначе
		СуммаОплаты = СтрокаОплатНаличными.Сумма + СтрокаОплатНаличными.СуммаВозврат;
		СуммаДокумента = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаОплаты,
			ДокументОснование.ВалютаДокумента, ДокументОснование.КурсДокумента, ВалютаДокумента, Дата);
	КонецЕсли;
	
	Документы.ПриходныйКассовыйОрдер.СуммаДокументаПриИзменении(ЭтотОбъект,ДополнительныеСвойства.ПараметрыДействия);
	КурсВалютыВзаиморасчетов = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалютыВзаиморасчетов(ЭтотОбъект,
		ДоговорВзаиморасчетов, ДокументОснование);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Инкассация()

// Производит заполнение объекта на основании документа "Инвентаризация"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Инвентаризация(ДанныеЗаполнения,
		ТекстЗаполнения = "",
		СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ДанныеЗаполнения.ХозОперация=Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию Тогда
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект,
			НСтр("ru='Можно вводить только на основании инвентаризации товаров отданных на комиссию.'"));
		Возврат Ложь;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект,
		ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ИнвентаризацияТовары.Сумма) КАК Сумма
	|ИЗ
	|	Документ.Инвентаризация.Товары КАК ИнвентаризацияТовары
	|ГДЕ
	|	 ИнвентаризацияТовары.Ссылка = &ДокументОснование И ИнвентаризацияТовары.Количество < 0";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Сумма) Тогда
		СуммаДокумента = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(-Выборка.Сумма,
			ДокументОснование.ВалютаДокумента, ДокументОснование.КурсДокумента, ВалютаДокумента, Дата);
	КонецЕсли;
	
	Документы.ПриходныйКассовыйОрдер.СуммаДокументаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	// Статья ДДС - Оплата от покупателя
	СтатьяДДС = Справочники.СтатьиДДС.ОплатаОтПокупателя;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Инвентаризация()

// Производит заполнение объекта на основании документа "Реализация активов"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РеализацияАктивов(ДанныеЗаполнения,
		ТекстЗаполнения = "",
		СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент = ДокументОснование.Контрагент;
	
	// вычислим сумму к оплате
	СуммаДок = ДокументОснование.Активы.Итог("Сумма");
	НДС = ДокументОснование.Активы.Итог("СуммаНДС");
	СуммаДокумента = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДок,
		ДокументОснование.ВалютаДокумента, ДокументОснование.КурсДокумента, ВалютаДокумента, Дата);
	СуммаНДС = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(НДС,
		ДокументОснование.ВалютаДокумента, ДокументОснование.КурсДокумента, ВалютаДокумента, Дата);
	
	// Статья ДДС - Оплата от покупателя
	СтатьяДДС = Справочники.СтатьиДДС.ОплатаОтПокупателя;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РеализацияАктивов()

// Производит заполнение объекта на основании документа "План поступления д/с"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПланПоступленияДС(ДанныеЗаполнения,
		ТекстЗаполнения = "",
		СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СуммаДокумента = ДокументОснование.СуммаДокумента;
	Документы.ПриходныйКассовыйОрдер.СуммаДокументаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	// В зависимости от хоз операции документа основания будем подставлять Кассу или нет.
	Если ДокументОснование.ХозОперация = Справочники.ХозОперации.ПланПоступленияВКассу Тогда
		КассаКомпании = ДокументОснование.СтруктурнаяЕдиница;
	КонецЕсли;
	
	Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов) Тогда
		РасчетыСКонтрагентамиСервер.ЗаполнитьСоставОплатыПоДокументуРасчетов(ЭтотОбъект, ДокументОснование.Сделка, Истина);
	Иначе
		Сделка = ДокументОснование.Сделка;
	КонецЕсли;
	
	ДокументПланирования = ДокументОснование;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПланПоступленияДС()

// Производит заполнение объекта на основании документа "Заказ-наряд"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаряд(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Продолжать = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ Продолжать Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДокументОснование.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Внимание! В заказ-наряде используется бесплатный ремонт.'"),
			ЭтотОбъект,
			"ДокументОснование"
		);
	ИначеЕсли ДокументОснование.СуммаДокумента = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Внимание! Итоговая сумма по заказ-наряду равна нулю.'"), ЭтотОбъект, "ДокументОснование");
	КонецЕсли;
	
	// Вычислим сумму задолженности по заказ-наряду
	Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(
			ДокументОснование.ДоговорВзаиморасчетов) Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Контрагент",            Контрагент);
		СтруктураОтбора.Вставить("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов);
		СтруктураОтбора.Вставить("ДокументРасчетов", ДанныеЗаполнения);
		
		тзДолги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(СтруктураОтбора);
		
		Если ДанныеЗаполнения.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
			ОстатокПоСделке = 0;
		Иначе
			ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ДанныеЗаполнения.СуммаДокумента,
				ДанныеЗаполнения.ВалютаДокумента, ДанныеЗаполнения.КурсДокумента, ВалютаДокумента, КурсДокумента);
		КонецЕсли;
		Если ДанныеЗаполнения.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
			ОстатокПоСделке = 0;
		Иначе
			ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ДанныеЗаполнения.СуммаДокумента,
			ДанныеЗаполнения.ВалютаДокумента, ДанныеЗаполнения.КурсДокумента, ВалютаДокумента, КурсДокумента);
		КонецЕсли;
		Если ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
			ОстатокПоСделке = ОстатокПоСделке
				+ РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("Сумма"),
				ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,
				ДанныеЗаполнения.КурсДокумента, ВалютаДокумента, КурсДокумента);
		ИначеЕсли Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() = ВалютаДокумента Тогда
			ОстатокПоСделке = ОстатокПоСделке + тзДолги.Итог("СуммаБаз");
		Иначе
			ОстатокПоСделке = ОстатокПоСделке
				+ РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("СуммаУпр"),
				Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
				ДанныеЗаполнения.КурсВалютыУпр, ВалютаДокумента, КурсДокумента);
		КонецЕсли;
		
		СуммаДокумента = ?(ОстатокПоСделке < 0, 0, ОстатокПоСделке);
		
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаОборот КАК Сумма,
		|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрОборот КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыКомпании.Обороты(
		|		,
		|		,
		|		Регистратор,
		|		ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
		|		    И Контрагент = &Контрагент
		|		    И (Сделка = &Сделка
		|		        ИЛИ Сделка.ДокументОснование = &Сделка)) КАК ВзаиморасчетыКомпанииОстаткиИОбороты
		|ГДЕ
		|	ВзаиморасчетыКомпанииОстаткиИОбороты.Регистратор <> &ЗаказНаряд";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", ДокументОснование.ДоговорВзаиморасчетов);
		Запрос.УстановитьПараметр("Контрагент",            ДокументОснование.Контрагент);
		Запрос.УстановитьПараметр("Сделка",                ДокументОснование);
		Запрос.УстановитьПараметр("ЗаказНаряд",            ДокументОснование);
		
		тзДолги = Запрос.Выполнить().Выгрузить();
		ПересчетНаДату=ТекущаяДатаСеанса();
		
		Если ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
			Долг = тзДолги.Итог("Сумма");
		Иначе
			Долг = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			тзДолги.Итог("Сумма"),
			ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,
			ПересчетНаДату,
			ВалютаДокумента,
			КурсДокумента
			);
		КонецЕсли;
		
		СуммаЗаказНаряда = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
		ДокументОснование.СуммаДокумента,
		ДокументОснование.ВалютаДокумента,
		ПересчетНаДату,
		ВалютаДокумента,
		ПересчетНаДату
		);
		СуммаДокумента = Долг + СуммаЗаказНаряда;
		
	КонецЕсли;

	СуммаДокумента	= Макс(СуммаДокумента, 0);
	Документы.ПриходныйКассовыйОрдер.СуммаДокументаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	// Статья ДДС - Оплата от покупателя
	СтатьяДДС          = Справочники.СтатьиДДС.ОплатаОтПокупателя;
	СпособЗачетаАвансов = ДокументОснование.СпособЗачетаАвансов;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаряд()

// Производит заполнение объекта на основании документа "Счет на оплату за автомобили".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СчетНаОплатуЗаАвтомобили(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем обработчик заполнения на основании документа "Счет на оплату"
	Возврат ОбработкаЗаполнения_СчетНаОплату(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_СчетНаОплатуЗаАвтомобили()

// Производит заполнение объекта на основании документа "Заказ на автомобиль"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаАвтомобиль(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем обработчик заполнения на основании документа "Счет на оплату"
	Возврат ОбработкаЗаполнения_СчетНаОплату(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ИСТИНА);
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаАвтомобиль()

// Производит заполнение объекта на основании документа "Реализация автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РеализацияАвтомобилей(ДанныеЗаполнения,
		ТекстЗаполнения = "",
		СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Продолжать = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ Продолжать Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтруктураОтбора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Контрагент,ДоговорВзаиморасчетов");
	СтруктураОтбора.Вставить("ДокументРасчетов", ДанныеЗаполнения);
	
	тзДолги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(СтруктураОтбора);
	Если ВалютаДокумента = ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов Тогда
		Долг = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			тзДолги.Итог("Сумма"),
			ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,
			ДокументОснование.Дата,
			ВалютаДокумента,
			ДокументОснование.Дата,
			РежимОкругления.Окр15как20
		);
	ИначеЕсли ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
		Долг = тзДолги.Итог("СуммаБаз");
	Иначе
		Долг = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			тзДолги.Итог("СуммаУпр"),
			Константы.ВалютаУправленческогоУчетаКомпании.Получить(), 
			ДокументОснование.Дата,
			ВалютаДокумента,
			ДокументОснование.Дата,
			РежимОкругления.Окр15как20
		);
	КонецЕсли;
	
	СуммаДокумента = Макс(Долг, 0);
	
	// Статья ДДС - Оплата от покупателя
	СтатьяДДС = Справочники.СтатьиДДС.ОплатаОтПокупателя;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РеализацияАвтомобилей()

// Производит заполнение объекта на основании документа "Возврат поставщику".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВозвратПоставщику(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "ДокументОснование,Контрагент,ДоговорВзаиморасчетов");
	Если ЗначениеЗаполнено(ДанныеОснования.ДокументОснование) Тогда
		СделкаДокумента = ДанныеОснования.ДокументОснование;
	Иначе
		СделкаДокумента = ДанныеЗаполнения;
	КонецЕсли;
	
	ВзаиморасчетыПоДокументамРачетов = РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(
			ДанныеОснования.ДоговорВзаиморасчетов);
	
	Если ВзаиморасчетыПоДокументамРачетов Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаОборот КАК Сумма,
		|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрОборот КАК СуммаУпр,
		|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаБазОборот КАК СуммаБаз,
		|	ВзаиморасчетыКомпанииОстаткиИОбороты.ДокументРасчетов КАК Сделка
		|ИЗ
		|	РегистрНакопления.РасчетыСКонтрагентами.Обороты(
		|			,
		|			,
		|			,
		|			Контрагент = &Контрагент
		|				И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
		|				И (ДокументРасчетов = &Сделка
		|					ИЛИ ДокументРасчетов.ДокументОснование = &Сделка)) КАК ВзаиморасчетыКомпанииОстаткиИОбороты";
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаОборот КАК Сумма,
		|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрОборот КАК СуммаУпр,
		|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаБазОборот КАК СуммаБаз,
		|	ВзаиморасчетыКомпанииОстаткиИОбороты.Сделка КАК Сделка
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыКомпании.Обороты(
		|			,
		|			,
		|			,
		|			Контрагент = &Контрагент
		|				И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
		|				И (Сделка = &Сделка
		|					ИЛИ Сделка.ДокументОснование = &Сделка)) КАК ВзаиморасчетыКомпанииОстаткиИОбороты";
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Контрагент",            ДанныеОснования.Контрагент);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", ДанныеОснования.ДоговорВзаиморасчетов);
	Запрос.УстановитьПараметр("Сделка", СделкаДокумента);
	
	тзВзаиморасчет = Запрос.Выполнить().Выгрузить();
	Если тзВзаиморасчет.Количество() > 0 И НЕ тзВзаиморасчет[0].Сделка = СделкаДокумента Тогда
		СделкаДокумента = тзВзаиморасчет[0].Сделка;	
	КонецЕсли;
	
	Если ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		СуммаКОплате = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзВзаиморасчет.Итог("Сумма"),
			ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, Дата, ВалютаДокумента, Дата, РежимОкругления.Окр15как20);
	Иначе
		СуммаКОплате = тзВзаиморасчет.Итог("СуммаУпр");
		СуммаКОплате = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаКОплате,
			Константы.ВалютаУправленческогоУчетаКомпании.Получить(), Дата, ВалютаДокумента,
			?(НЕ ЗначениеЗаполнено(КурсДокумента), Дата, КурсДокумента), РежимОкругления.Окр15как20);
	КонецЕсли;
	
	СуммаДокумента = ?(СуммаКОплате > 0, СуммаКОплате, 0);
	
	Если ВзаиморасчетыПоДокументамРачетов Тогда
		РасчетыСКонтрагентамиСервер.ЗаполнитьСоставОплатыПоДокументуРасчетов(ЭтотОбъект, СделкаДокумента, Истина);
	Иначе
		Сделка = СделкаДокумента;
	КонецЕсли;
	
	// Статья ДДС - Оплата от поставщика
	СтатьяДДС = Справочники.СтатьиДДС.ВозвратОтПоставщика;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ВозвратПоставщику()

// Производит заполнение объекта на основании документа "Возврат поставщику автомобилей".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВозвратПоставщикуАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ОбработкаЗаполнения_ВозвратПоставщику(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_ВозвратПоставщикуАвтомобилей()

// Производит заполнение объекта на основании документа "Оптовый заказ клиента на автомобили"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ОптовыйЗаказКлиентаНаАвтомобили(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем обработчик заполнения на основании документа "Счет на оплату"
	Возврат ОбработкаЗаполнения_СчетНаОплату(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаАвтомобиль()

// Производит заполнение объекта на основании документа "Заявка на хранение шин"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаХранениеШин(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ОбработкаЗаполнения_СчетНаОплату(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_ЗаявкаНаХранениеШин()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	// Проверка возможность ввода документа на основании
	Если ОбработкаСобытийОбъектаСервер.ВозможенВводНаОсновании(ЭтотОбъект, ДанныеЗаполнения) И
		(НЕ ПраваИНастройкиПользователя.Значение("ВводОплатыПоЗаказНаряду", ЭтотОбъект)) Тогда
		
		Если ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.ЗаказНаряд")
			ИЛИ ЕстьРеквизит(ДанныеЗаполнения, "ДокументОснование") 
			И ТипЗнч(ДанныеЗаполнения.ДокументОснование)=Тип("ДокументСсылка.ЗаказНаряд") Тогда
			
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, 
				НСтр("ru='Ввод приходного кассового ордера на основании заказ-наряда запрещен.'"));
			СтандартнаяОбработка = ЛОЖЬ;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ЭтотОбъект);
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка,"Товары") Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем специфические для данной операции реквизиты
	ВзаиморасчетыПоДокументамРачетов =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	Если ВзаиморасчетыПоДокументамРачетов И Состав.Количество() = 0 Тогда
		РасчетыСКонтрагентамиСервер.ЗаполнитьСоставОплатыПоДокументуРасчетов(ЭтотОбъект, ДанныеЗаполнения, Истина);
	ИначеЕсли НЕ ЗначениеЗаполнено(Сделка) Тогда
		Сделка = ДанныеЗаполнения;
	КонецЕсли;
	Если ЗначениеЗаполнено(Сделка)
		И НЕ (ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.ВозвратПоставщику")
		ИЛИ ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.ВозвратПоставщикуАвтомобилей")) Тогда
		Основание = Сделка;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПринятоОТ) И ЗначениеЗаполнено(Контрагент) Тогда
		ПринятоОТ = СокрЛП(Контрагент.НаименованиеПолное);
	КонецЕсли;	
	
	КурсВалютыВзаиморасчетов = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалютыВзаиморасчетов(ЭтотОбъект, ?(НЕ ЗначениеЗаполнено(ДоговорВзаиморасчетов), Неопределено, ДоговорВзаиморасчетов), ?(НЕ ЗначениеЗаполнено(ДокументОснование), Неопределено, ДокументОснование));
	
	// Произведем дозаполнение объекта остатком по сделке
	Если ЗначениеЗаполнено(ДокументОснование) И ДополнительныеСвойства.Свойство("ВыполненоЗаполнениеНаОсновании") И ДополнительныеСвойства.ВыполненоЗаполнениеНаОсновании=Неопределено Тогда
		ЗаполнитьОстаткомПоСделке();
	КонецЕсли;
	
	Если РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ВерсияОбъекта)
		И ВзаиморасчетыПоДокументамРачетов Тогда
		СуммаДокумента = Состав.Итог("Сумма");
		СтавкаНДС = Состав[0].СтавкаНДС;
		СуммаНДС = Состав.Итог("СуммаНДС");
	ИначеЕсли Не ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Инкассация")
		И ОбработкаСобытийОбъектаСервер.ВозможенВводНаОсновании(ЭтотОбъект, ДанныеЗаполнения) Тогда
		// изменим ставку НДС, если нужно
		ОбработкаСобытийДокументаСервер.УстановитьСтавкуНДС(ДанныеЗаполнения, ЭтотОбъект, СуммаДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.КассаКомпании) Тогда
		Документы.ПриходныйКассовыйОрдер.КассаКомпанииПриИзменении(ЭтотОбъект,ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
	КонецЕсли;
	
	Если ДляПробитияНаФР Тогда
		ТипРасчета = Документы.ПриходныйКассовыйОрдер.ТипРасчетаПоДокументу(ЭтотОбъект);
	КонецЕсли;
	
	ПечататьАртикулНоменклатуры = Организация.ПечататьАртикулНоменклатурыВЧеках;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ЭтотОбъект, Истина);
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если СуммаДокумента<0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Сумма документа не должна быть отрицательной'"),, "СуммаДокумента",,Отказ);
	КонецЕсли;

	Если Товары.Количество() > 0 И ДляПробитияНаФР Тогда
		
		ТекстСообщения = "";
		Если НЕ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(ЭтотОбъект, Товары, ПризнакСпособаРасчета,ТекстСообщения) Тогда
			ТекстСообщения = НСтр("ru='Неверно заполнен ""Способ расчета"".'") + " " + ТекстСообщения;	
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"ПризнакСпособаРасчета",,Отказ);	
		КонецЕсли;
		
		Если СуммаДокумента > 0 И Товары.Итог("СуммаОплаты") = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Необходимо произвести пропорциональное распределение суммы вносимой оплаты между предметами платежа'"),,,,Отказ);
		ИначеЕсли СуммаДокумента <> Товары.Итог("СуммаОплаты") Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Неверно заполнена колонка ""Сумма оплаты"" в табличной части товары, необходимо распределить сумму оплаты'"),,,,Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ВерсияОбъекта)
		И РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов) Тогда
		
		РасчетыСКонтрагентамиСервер.ПроизвестиПроверкуЗаполненияСостава(ЭтотОбъект, Отказ);
		
	ИначеЕсли НЕ ОбработкаСобытийДокументаСервер.ПроверкаСоответствияКонтрагентаДоговораПоСделке(
		ЭтотОбъект, Сделка, Контрагент, ДоговорВзаиморасчетов, ДополнительныеСвойства) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Контрагент и договор взаиморасчетов документа Сделка не соответствуют указанным в шапке документа'"),
			,
			"Сделка",
			,
			Отказ);
		
	КонецЕсли;
	
	Если ДляПробитияНаФР Тогда	
		ТекстОшибки = УправлениеДиалогомДокументаСервер.ПроверитьКорректностьЗаполненияТелефонEmail(ТелефонEmailПокупателя);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ТелефонEmailПокупателя", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Очистим табличную часть "Состав"
	Если Не РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов) Тогда
		Состав.Очистить();
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим, возможен ли ввод документа на основании
	Если НЕ ПраваИНастройкиПользователя.Значение("ВводОплатыПоЗаказНаряду", ЭтотОбъект)
		И ЗначениеЗаполнено(ЭтотОбъект.Сделка)
		И ТипЗнч(ЭтотОбъект.Сделка)=Тип("ДокументСсылка.ЗаказНаряд") Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Формирование приходного кассового ордера на основании заказ-наряда запрещено.'"),
			ЭтотОбъект,
			"Сделка",
			,
			Отказ
		);
		Возврат;
		
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если РасчетыСКонтрагентамиСервер.ЕстьЗачетАвансаПоДокументу(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(Дата);
	
	// Приходуем деньги в кассу
	НаборЗаписейДС=Движения.ДенежныеСредстваКомпании;
	НаборЗаписейДС.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДС.РежимПроведения=РежимПроведения;
	НаборЗаписейДС.СтруктурнаяЕдиница=КассаКомпании;
	НаборЗаписейДС.СтатьяДДС=СтатьяДДС;
	НаборЗаписейДС.Валюта=Неопределено;
	НаборЗаписейДС.Сумма=СуммаДокумента;
	Отказ=НЕ НаборЗаписейДС.Приход() ИЛИ Отказ;
	
	// Если используем подключаемой оборудование проведем деньги по кассе ККМ
	Если ДляПробитияНаФР И ЗначениеЗаполнено(КассаККМ) Тогда
		
		НаборЗаписейКассыККМ=Движения.КассыККМ;
		НаборЗаписейКассыККМ.ДокументОбъект 	= ЭтотОбъект;
		НаборЗаписейКассыККМ.РежимПроведения 	= РежимПроведения;
		НаборЗаписейКассыККМ.КассаККМ 			= КассаККМ;
		НаборЗаписейКассыККМ.ТипОплаты 			= Перечисления.ТипыОплатыККТ.Наличные;
		НаборЗаписейКассыККМ.Сумма 			    = СуммаДокумента;
		Отказ=НЕ НаборЗаписейКассыККМ.Приход() ИЛИ Отказ;
		
		Если НЕ Отказ Тогда
			НаборЗаписейКассыККМ.Записать();
		КонецЕсли;
		

		НаборЗаписейКассыККМ=Движения.КассыККМ;
		НаборЗаписейКассыККМ.ДокументОбъект 	= ЭтотОбъект;
		НаборЗаписейКассыККМ.РежимПроведения 	= РежимПроведения;
		НаборЗаписейКассыККМ.КассаККМ 			= КассаККМ;
		НаборЗаписейКассыККМ.ТипОплаты 			= Перечисления.ТипыОплатыККТ.Наличные;
		НаборЗаписейКассыККМ.Сумма 			    = СуммаДокумента; 
		НаборЗаписейКассыККМ.ДополнительныеСвойства.Вставить("РазрешитьОтрицательныеОстаткиПоКассе", Истина);

		Отказ=НЕ НаборЗаписейКассыККМ.Расход() ИЛИ Отказ;
	КонецЕсли;
	
	// Проводим взаиморасчеты
	Документы.ПриходныйКассовыйОрдер.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);

	ЭтоВнутренниеПереводы = Документы.ПриходныйКассовыйОрдер.ПроверитьВидОперацииПеремещение(ВидОперации);
	Если Не ЭтоВнутренниеПереводы Тогда 
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
			РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
		Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
			Документы.ПриходныйКассовыйОрдер.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
			Документы.ПриходныйКассовыйОрдер.СформироватьТаблицуДоходыИРасходы(ДополнительныеСвойства);
		Иначе
			НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыКомпании;
			НаборЗаписейВзаиморасчеты.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейВзаиморасчеты.РежимПроведения = РежимПроведения;
			НаборЗаписейВзаиморасчеты.Контрагент = Контрагент;
			НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
			Если ЗначениеЗаполнено(Сделка)Тогда
				НаборЗаписейВзаиморасчеты.Сделка = Сделка;
				ТипСделка = ТипЗнч(Сделка);
				Если ЗаказыСервер.ПолучитьТипыСделок(Ложь).СодержитТип(ТипСделка) Тогда
					НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем = Ложь;
				ИначеЕсли ЗаказыСервер.ПолучитьТипыСделок(Истина).СодержитТип(ТипСделка) Тогда
					НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем = Истина;
				Иначе
					НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем = Неопределено;
				КонецЕсли;
			Иначе
				НаборЗаписейВзаиморасчеты.Сделка = Неопределено;
			КонецЕсли;
			НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок =
				(СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически);
			НаборЗаписейВзаиморасчеты.Сумма = СуммаДокумента;
			НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц = 0;
			Отказ=НЕ НаборЗаписейВзаиморасчеты.Расход() ИЛИ Отказ;
			
			// Доходы и расходы по суммовым разницам
			СуммаДоходаРасходаСуммовыхРазниц=НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
			Если СуммаДоходаРасходаСуммовыхРазниц<>0 Тогда
				НаборЗаписейДиР = Движения.ДоходыИРасходы;
				НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
				Если ВедетсяБалансПоПодразделению Тогда
					НаборЗаписейДиР.Подразделение = ДоговорВзаиморасчетов.ПодразделениеКомпании;
				КонецЕсли;
				НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
				НаборЗаписейДиР.ВУпрВалюте = Истина;
				Если СуммаДоходаРасходаСуммовыхРазниц<0 Тогда
					НаборЗаписейДиР.Расход = -СуммаДоходаРасходаСуммовыхРазниц;
				Иначе
					НаборЗаписейДиР.Доход = СуммаДоходаРасходаСуммовыхРазниц;
				КонецЕсли;
				Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	// Определим необходимость формирования корректирующих проводок
	ПодразделениеКасса = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(КассаКомпании.ПодразделениеКомпании, Дата);
	ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ДоговорВзаиморасчетов.ПодразделениеКомпании, Дата);
	БалансовыеПодразделенияНеРавны = (ПодразделениеДоговорВзаиморасчетов<>ПодразделениеКасса);
	Если ВедетсяБалансПоПодразделению И БалансовыеПодразделенияНеРавны И Не ЭтоВнутренниеПереводы Тогда
		НаборЗаписейДиР = Движения.ДоходыИРасходы;
		
		НаборЗаписейДиР.ДокументОбъект			= ЭтотОбъект;
		НаборЗаписейДиР.Подразделение			= КассаКомпании.ПодразделениеКомпании;
		НаборЗаписейДиР.СтатьяДоходовИРасходов	= Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
		НаборЗаписейДиР.ВУпрВалюте				= Ложь;
		НаборЗаписейДиР.Доход					= СуммаДокумента;
		Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		
		НаборЗаписейДиР.ДокументОбъект			= ЭтотОбъект;
		НаборЗаписейДиР.Подразделение			= ДоговорВзаиморасчетов.ПодразделениеКомпании;
		НаборЗаписейДиР.СтатьяДоходовИРасходов	= Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
		НаборЗаписейДиР.ВУпрВалюте				= Ложь;
		НаборЗаписейДиР.Расход					= СуммаДокумента;
		Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
	КонецЕсли; 
	
	
	// Зафиксируем наличную оплату
	Если ХозОперация = Справочники.ХозОперации.ПриходныйКассовыйОрдер и Не ЭтоВнутренниеПереводы Тогда
		НаборЗаписейНаличныеРасчеты=Движения.НаличныеРасчеты;
		НаборЗаписейНаличныеРасчеты.ДокументОбъект 	= ЭтотОбъект;
		НаборЗаписейНаличныеРасчеты.РежимПроведения 	= РежимПроведения;
		Отказ = НЕ НаборЗаписейНаличныеРасчеты.Приход() ИЛИ Отказ;
	КонецЕсли; 
	
	Если ЭтоВнутренниеПереводы Тогда
		НаборЗаписейДиР = Движения.ДоходыИРасходы;
		НаборЗаписейДиР.ДокументОбъект			= ЭтотОбъект;
		НаборЗаписейДиР.Подразделение			= КассаКомпании.ПодразделениеКомпании;
		НаборЗаписейДиР.СтатьяДоходовИРасходов	= Справочники.СтатьиДоходовИРасходов.ПереводыВПути;
		НаборЗаписейДиР.ВУпрВалюте				= Ложь;
		НаборЗаписейДиР.Доход					= СуммаДокумента;
		Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
	КонецЕсли;

	
	// Возможно расхождение баланса на "копейки" из-за округления.
	// Возникшую разницу необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	// Двигаем границу последовательности взаиморасчетов
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	
	// Проведение в Платежный календарь
	Если Не Отказ Тогда
		НаборЗаписей = Движения.ПлатежныйКалендарь;
		НаборЗаписей.ДокументОбъект = Ссылка;
		НаборЗаписей.Поступление    = Истина;
		НаборЗаписей.Факт();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит заполнение объекта на основании остатков взаиморасчетов по переданной сделке.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ЗаполнитьОстаткомПоСделке()
	
	// Изменим валюту для перерасчета
	ЭтотОбъект.ВалютаДокумента = ЭтотОбъект.ДокументОснование.ВалютаДокумента;
	Документы.ПриходныйКассовыйОрдер.ВалютаДокументаПриИзменении(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
	
	// Вычислим сумму
	СтруктураОтбора = Новый Структура(
		"Контрагент,ДоговорВзаиморасчетов,ДокументРасчетов",
		Контрагент,
		ДоговорВзаиморасчетов,
		ДокументОснование);
	
	тзДолги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(
		СтруктураОтбора,
		ТекущаяДатаСеанса());
	
	Если ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("Сумма"), ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДокументОснование.КурсДокумента, ВалютаДокумента, КурсДокумента);
		
	ИначеЕсли ВалютаДокумента=Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
		ОстатокПоСделке = тзДолги.Итог("СуммаБаз");
		
	Иначе
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("СуммаУпр"), Константы.ВалютаУправленческогоУчетаКомпании.Получить(), ДокументОснование.КурсВалютыУпр, ВалютаДокумента, КурсДокумента);
	КонецЕсли;
	
	СуммаДокумента	= Макс(ОстатокПоСделке,0);
	Документы.ПриходныйКассовыйОрдер.СуммаДокументаПриИзменении(ЭтотОбъект,ДополнительныеСвойства.ПараметрыДействия);
	
	Если РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ВерсияОбъекта)
		И РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов) Тогда
		
		// Найдем расчетный документ
		УсловиеПоиска = Новый Структура("ДокументРасчетов", ДокументОснование);
		НайденныеСтроки = Состав.НайтиСтроки(УсловиеПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			НайденныеСтроки[0].Сумма = СуммаДокумента;
			НайденныеСтроки[0].СтавкаНДС = СтавкаНДС;
			НайденныеСтроки[0].СуммаНДС = СуммаНДС;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Статья ДДС - Оплата от покупателя
	СтатьяДДС = Справочники.СтатьиДДС.ОплатаОтПокупателя;
	
КонецПроцедуры // ЗаполнитьОстаткомПоСделке()

#КонецОбласти

#Область Инициализация

ДополнительныеСвойства.Вставить("ПроверкаИсторическогоПорядкаОпераций", Ложь);

#КонецОбласти

#КонецЕсли
