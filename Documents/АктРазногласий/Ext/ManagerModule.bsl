// Модуль менеджера документа "Акт разногласий"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Движения документа выполненные по регистру ГТД
//
// Параметры:
// 	Сам - Документ.Ссылка - документ по которому выбираются движения регистра ГТД
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит результат запроса к регистру ГТД.
//
Функция ДвиженияПоГТД(Сам) Экспорт
	
	Возврат Документы.ЗаказНаряд.ДвиженияПоГТД(Сам.ДокументОснование);
	
КонецФункции

#Область ОбработчикиОбновления

// Выполняет перенос свойств в реквизиты объекта
// Руководитель, ГлавныйБухгалтер,Отустил, ОтпустилКонтрагент, Получил, ПолучилКонтрагент
//
Процедура ВыполнитьПереносПодписантовИзСвойств() Экспорт
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();
	ПеренесеныВсеСвойства = Истина;  
	
	МассивПереносимыхСвойств = УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктРазногласийДополнительныеРеквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АктРазногласий.ДополнительныеРеквизиты КАК АктРазногласийДополнительныеРеквизиты
	|ГДЕ
	|	АктРазногласийДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", МассивПереносимыхСвойств);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СвойстваКУдалению = Новый Массив();
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.АктРазногласий");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();  
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗначенияСвойств = ДокументОбъект.ДополнительныеРеквизиты.Выгрузить();
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда
				
				СвойствоРуководитель = ЗначенияСвойств.Найти(ПереносимыеСвойства.Руководитель,"Свойство");
				
				Если СвойствоРуководитель <> Неопределено Тогда
					
					ДокументОбъект.Руководитель = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоРуководитель.Значение,
						Выборка.Ссылка
					);
					
					Если ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоРуководитель.Свойство);
						
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтОрганизации) Тогда 
					
					ДокументОбъект.Руководитель = ДокументОбъект.ПодписантОтОрганизации
					
				КонецЕсли;
				
			КонецЕсли;
			// заполнение реквизита ГлавныйБухгалтер
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда	
				
				СвойствоГлавныйБухгалтер = ЗначенияСвойств.Найти(ПереносимыеСвойства.ГлавныйБухгалтер,"Свойство");
				
				Если СвойствоГлавныйБухгалтер <> Неопределено Тогда
					
					ДокументОбъект.ГлавныйБухгалтер = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоГлавныйБухгалтер.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоГлавныйБухгалтер.Свойство); 
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
			
			// заполнение реквизита Отпустил
			Если Не ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда	
				
				СвойствоОтпустил = ЗначенияСвойств.Найти(ПереносимыеСвойства.Отпустил,"Свойство");
				
				Если СвойствоОтпустил <> Неопределено Тогда
					
					ДокументОбъект.Отпустил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоОтпустил.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоОтпустил.Свойство);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда	
				
				СвойствоПолучилКонтрагент = ЗначенияСвойств.Найти(ПереносимыеСвойства.ПолучилКонтрагент,"Свойство");
				
				Если СвойствоПолучилКонтрагент <> Неопределено Тогда
					
					ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоПолучилКонтрагент.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоПолучилКонтрагент.Свойство);
						
					КонецЕсли; 
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтКонтрагента) Тогда 
					
					ДокументОбъект.Получил = ДокументОбъект.ПодписантОтКонтрагента
					
				КонецЕсли;
				
			КонецЕсли; 
			// перенос реквизита доверенность в ПОлучилКонтрагент
			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
				
				СвойствоДоверенность = ЗначенияСвойств.Найти(ПереносимыеСвойства.Доверенность,"Свойство");
				
				Если СвойствоДоверенность <> Неопределено Тогда

					Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
							СвойствоДоверенность.Значение.Владелец,
							Выборка.Ссылка,
							СвойствоДоверенность.Значение
						);
						
						Если ЗначениеЗаполнено(ДокументОбъект.Получил)  И значениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство);
							
						КонецЕсли; 
						
					ИначеЕсли ДокументОбъект.Получил.Подписант = СвойствоДоверенность.Значение.Владелец
						И  НЕ ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
						
						ПолучилОбъект = ДокументОбъект.Получил.ПолучитьОбъект();
						ПолучилОбъект.Основание = СвойствоДоверенность.Значение;  
						
						Попытка	
							ПолучилОбъект.Записать(); 
						Исключение	
						КонецПопытки;
						
						Если ЗначениеЗаполнено(ПолучилОбъект.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство); 
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
			
			// Реквизит принял из доверенности
			Если Не ЗначениеЗаполнено(ДокументОбъект.Принял) Тогда
				СвойствоДоверенность = ЗначенияСвойств.Найти(ПереносимыеСвойства.Доверенность,"Свойство");
				
				Если СвойствоДоверенность <> Неопределено Тогда

										
					ДокументОбъект.Принял = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоДоверенность.Значение.Владелец,
						Выборка.Ссылка,
						СвойствоДоверенность.Значение
					);
						
					Если ЗначениеЗаполнено(ДокументОбъект.Принял)  И значениеЗаполнено(ДокументОбъект.Принял.Основание) Тогда
							
						СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство);
							
					КонецЕсли; 
					
				КонецЕсли;
					
			КонецЕсли;
	
			Если СвойстваКУдалению.Количество()>0 Тогда  
				
				Для Каждого Элемент Из СвойстваКУдалению Цикл 
					
					Строка = ДокументОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
					Если Строка <> Неопределено Тогда 
						
						ДокументОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение 
			
			ОтменитьТранзакцию(); 
			
			ПеренесеныВсеСвойства = Ложь;

			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления списка подписантов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ПеренесеныВсеСвойства Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Набор
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка.ИмяПредопределенныхДанных = ""Документ_АктРазногласий""";
		
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();	
			
			Пока Выборка.Следующий() Цикл
				

				Попытка	
					НаборОбъект = Выборка.Набор.ПолучитьОбъект();
					
					Для Каждого Элемент Из МассивПереносимыхСвойств Цикл 
					
						Строка = НаборОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
						Если Строка <> Неопределено Тогда 
						
							НаборОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
						КонецЕсли;
					
					КонецЦикла;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборОбъект);
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось обработать справочник: ""НаборыДополнительныхРеквизитовИСведений"" по причине:
							|%1'"), 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений, "НаборыДополнительныхРеквизитовИСведений", ТекстСообщения);
				КонецПопытки;	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры	

// Выполяет проверку выполнения отложенного обработчика обновления ВыполнитьПереносПодписантовИзСвойств
//
// Параметры:
//	Параметры - Структура - параметры выполнения операции.
//
// Возвращаемое значение:
//	Булево - Результат проверки;
//
Функция ПроверитьПереносПодписантовИзСвойств(Параметры) Экспорт
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктРазногласийДополнительныеРеквизиты.Свойство КАК Свойство,
	|	АктРазногласийДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Документ.АктРазногласий.ДополнительныеРеквизиты КАК АктРазногласийДополнительныеРеквизиты
	|ГДЕ
	|	АктРазногласийДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)
	|	И АктРазногласийДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства));
	Запрос.УстановитьПараметр("Ссылка",				 Параметры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
	    Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетНаОплату);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетФактураВыданный);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
	
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
		
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.АктРазногласий);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект		 - ДанныеФормыСтруктура	 - Объект, для которого выполняется обработка события.
//  Расширенные	 - Булево				 - Признак получения расширенных сведений об итогах операци.
// 
// Возвращаемое значение:
//  Структура - Итог операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Товары.Итог("СуммаВсего") + Объект.Автоработы.Итог("СуммаВсего"));
	ИтогиОперации.Вставить("СуммаДокументаДоКорректировки", Объект.Товары.Итог("СуммаВсегоПоЗаказНаряду") + Объект.Автоработы.Итог("СуммаВсегоПоЗаказНаряду"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС",    Объект.Товары.Итог("СуммаНДС") + Объект.Автоработы.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента - ИтогиОперации.СуммаНДС);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Производит расчет суммы скидки/наценки по документу в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция РассчитатьСуммуСкидкиНаценки(Объект) Экспорт
	
	Объект.СуммаСкидкиНаценки = Объект.Товары.Итог("СуммаСкидки") + Объект.Товары.Итог("СуммаСкидкиСтроки");
	Объект.СуммаСкидкиНаценкиРабот = Объект.Автоработы.Итог("СуммаСкидки") + Объект.Автоработы.Итог("СуммаСкидкиСтроки");
	
КонецФункции // РассчитатьСуммуСкидкиНаценки()

// Используеся в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка 				   - Ссылка    - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость выводв только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возращаемая сторка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить = Ложь,
		ТолькоОсновныеКонтакты = Истина) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

// Заполнение ставки ндс таблицы "Авторабот" по признаку освобождения от НДС
//
// Параметры:
//  Объект			 - Объект	 - текущий объект заполнения.
//  ПараметрыНДС	 - Структура - параметры плательщика НДС.
//
Процедура УстановитьСтавкуНДСДляРабот(Объект, ПараметрыНДС)
	
	ОсвобожденОтНДС = ПараметрыНДС.ОсвобожденОтНДС;
	
	Для Каждого Строка Из Объект.Автоработы Цикл
		Строка.СтавкаНДС = ?(ОсвобожденОтНДС, 
			Справочники.СтавкиНДС.БезНДС,
			РаботаСоСтавкамиНДССервер.СтавкаНДСНоменклатуры(ПараметрыНДС, Строка.Авторабота)
		);
		АвтоработыСтавкаНДСПриИзменении(Объект, Строка);
	КонецЦикла;
	
КонецПроцедуры

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности
//
// Параметры:
//  Объект	 - ДанныеФормыСтруктура	 - Объект, для которого выполняется получение параметров проверки.
// 
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ТипЦенРабот");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДокументОснование");
	ОбязательныеРеквизиты.Добавить("ВидРемонта");
	ОбязательныеРеквизиты.Добавить("Автомобиль");
		
	Если Не Автосервис.ЭтоКомплектацияСборкаАвтомобиля(Объект.ВидРемонта) Тогда
		ОбязательныеРеквизиты.Добавить("Заказчик");
		Если Объект.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Платный Тогда
			ОбязательныеРеквизиты.Добавить("Контрагент");
			ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
		КонецЕсли;
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	ОбязательныеРеквизиты.Добавить("Автоработы.Работа");
	ОбязательныеРеквизиты.Добавить("Автоработы.Нормочас");
	ОбязательныеРеквизиты.Добавить("Автоработы.Коэффициент");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	
	// Уникальные поля таблицы авторабот
	УникальныеАвтоработы = Новый Массив();
	УникальныеАвтоработы.Добавить("Авторабота");
	УникальныеАвтоработы.Добавить("Нормочас");
	УникальныеАвтоработы.Добавить("Коэффициент");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Товары"    , УникальныеТовары);
	УникальныеРеквизиты.Вставить("Автоработы", УникальныеАвтоработы);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий.
//
// Параметры:
//  Объект				 - ДанныеФормыСтруктура	 - Объект, для которого выполняется обработка события.
//  ПараметрыДействия	 - Структура			 - Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Структура - Параметры действия.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	Если ЕстьРеквизит(Объект, , "Автоработы") Тогда
		ПараметрыДействия.Вставить("ОбъектЗаполненАвтоработами", Объект.Автоработы.Количество() > 0);
	КонецЕсли;
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработка пересчета табличных частей объекта.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("НеСбрасыватьПризнакПересчетаЦен");
	
	// Вызываем общий обработчик действия
	ОбработкаТабличнойЧастиАвтоработы.ПерезаполнитьЦеныТабличнойЧасти(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата);
	
	УстановитьСтавкуНДСДляРабот(Объект, ПараметрыНДС);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
	ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата);
	
	УстановитьСтавкуНДСДляРабот(Объект, ПараметрыНДС);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен работ".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенРаботПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	
	
КонецПроцедуры // ТипЦенРаботПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Скидка наценка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // СкидкаНаценкаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Мастер".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкаНаценкаРаботыПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // СкидкаНаценкаРаботыПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПодтверждениеПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	                        
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Строка.Подтверждение Тогда
		Строка.Количество = (Строка.КоличествоПоЗаказНаряду*Строка.КоэффициентПоЗаказНаряду)/Строка.Коэффициент;
		ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
		Строка.СуммаВсего = Строка.СуммаВсегоПоЗаказНаряду;
		ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	Иначе
		Строка.Количество = 0;
		ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЕсли; 
	
	ТоварыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	                        
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ТоварыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ТоварыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ТоварыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ТоварыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ТоварыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ТоварыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ТоварыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ТоварыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ТоварыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Строка.ПроцентСкидки > 100 Тогда
		Строка.ПроцентСкидки = 100;
	КонецЕсли;
		
	СуммаБезСкидок     = СкидкиНаценкиСервер.ПолучитьСуммуСтрокиБезСкидок(Объект, Строка, "Товары");
	Строка.СуммаСкидки = Окр(СуммаБезСкидок * Строка.ПроцентСкидки / 100, 2);
	
	СуммаСоСкидкой = Строка.Сумма - Строка.СуммаСкидкиСтроки - Строка.СуммаСкидки;
	
	// Включает ли цена НДС?
	Если ПараметрыДействия.Свойство("ТипЦен") Тогда
		ЦенаВключаетНДС = (ПараметрыДействия.ТипЦен.Пустая() ИЛИ ПараметрыДействия.ТипЦен.ЦенаВключаетНДС);
	ИначеЕсли ЕстьРеквизит(Объект, "ТипЦен") Тогда
		ЦенаВключаетНДС = (Объект.ТипЦен.Пустая() ИЛИ Объект.ТипЦен.ЦенаВключаетНДС);
	Иначе
		ЦенаВключаетНДС = Истина;
	КонецЕсли;
		
	СтавкаНДС = Строка.СтавкаНДС.Ставка;
	
	Если ЦенаВключаетНДС Тогда
		Строка.СуммаВсего = СуммаСоСкидкой;
		Строка.СуммаНДС   = Окр((СуммаСоСкидкой * СтавкаНДС) / (100 + СтавкаНДС), 2);
	Иначе
		Строка.СуммаНДС   = Окр((СуммаСоСкидкой * СтавкаНДС) / 100, 2);
		Строка.СуммаВсего = СуммаСоСкидкой + Строка.СуммаНДС;
	КонецЕсли;
	
	Строка.СуммаВсего = СуммаСоСкидкой;
	
	ТоварыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
		
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Строка.ПроцентСкидкиСтроки > 100 Тогда
		Строка.ПроцентСкидкиСтроки = 100;
	КонецЕсли;
		
	СуммаБезСкидок = СкидкиНаценкиСервер.ПолучитьСуммуСтрокиБезСкидок(Объект, Строка, "Товары");
	Строка.СуммаСкидкиСтроки = Окр(СуммаБезСкидок*Строка.ПроцентСкидкиСтроки/100, 2);
	
	СуммаСоСкидкой = Строка.Сумма - Строка.СуммаСкидкиСтроки - Строка.СуммаСкидки;
	
	// Включает ли цена НДС?
	Если ПараметрыДействия.Свойство("ТипЦен") Тогда
		ЦенаВключаетНДС = (ПараметрыДействия.ТипЦен.Пустая() ИЛИ ПараметрыДействия.ТипЦен.ЦенаВключаетНДС);
	ИначеЕсли ЕстьРеквизит(Объект, "ТипЦен") Тогда
		ЦенаВключаетНДС = (Объект.ТипЦен.Пустая() ИЛИ Объект.ТипЦен.ЦенаВключаетНДС);
	Иначе
		ЦенаВключаетНДС = Истина;
	КонецЕсли;
		
	СтавкаНДС = Строка.СтавкаНДС.Ставка;
	
	Если ЦенаВключаетНДС Тогда
		Строка.СуммаВсего = СуммаСоСкидкой;
		Строка.СуммаНДС   = Окр((СуммаСоСкидкой * СтавкаНДС) / (100 + СтавкаНДС), 2);
	Иначе
		Строка.СуммаНДС   = Окр((СуммаСоСкидкой * СтавкаНДС) / 100, 2);
		Строка.СуммаВсего = СуммаСоСкидкой + Строка.СуммаНДС;
	КонецЕсли;
	
	Строка.СуммаВсего = СуммаСоСкидкой;
	
	ТоварыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
		
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	СуммаБезСкидок = СкидкиНаценкиСервер.ПолучитьСуммуСтрокиБезСкидок(Объект, Строка, "Товары");
	Строка.ПроцентСкидки = ?(СуммаБезСкидок = 0, 0, Окр(Строка.СуммаСкидки * 100 / СуммаБезСкидок, 2));
	
	ТоварыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
		
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	СуммаБезСкидок = СкидкиНаценкиСервер.ПолучитьСуммуСтрокиБезСкидок(Объект, Строка, "Товары");
	Строка.ПроцентСкидкиСтроки = ?(СуммаБезСкидок = 0, 0, Окр(Строка.СуммаСкидкиСтроки*100/СуммаБезСкидок,2));
	
	ТоварыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
		
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Процедура заполнения реквизитов разницы на основе реквизитов заполнения
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыРасчетРазницы(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Строка.КоличествоРазница  = (Строка.Количество*Строка.Коэффициент)-(Строка.КоличествоПоЗаказНаряду*Строка.КоэффициентПоЗаказНаряду);
	Строка.СуммаНДСРазница    = Строка.СуммаНДС-Строка.СуммаНДСПоЗаказНаряду;
	Строка.СуммаСкидкиРазница = (Строка.СуммаСкидки+Строка.СуммаСкидкиСтроки)-Строка.СуммаСкидкиПоЗаказНаряду;
	Строка.СуммаВсегоРазница  = Строка.СуммаВсего-Строка.СуммаВсегоПоЗаказНаряду;
	
КонецПроцедуры

// процедура расчета скидок по значениям подобранным
Процедура РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти = "Товары", СкидкаШапкиАбсолютная = Ложь) Экспорт
	
	СкидкиНаценкиСервер.РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти, СкидкаШапкиАбсолютная);
	
КонецПроцедуры // РассчитатьСкидкиСтроки()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтоработы

// Обработчик события возникающего при изменении данных реквизита "Подтверждение" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыПодтверждениеПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	                        
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Строка.Подтверждение Тогда
		Строка.Количество = (Строка.КоличествоПоЗаказНаряду*Строка.КоэффициентПоЗаказНаряду)/Строка.Коэффициент;
		АвтоработыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
		Строка.СуммаВсего = Строка.СуммаВсегоПоЗаказНаряду;
		АвтоработыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	Иначе
		Строка.Количество = 0;
		АвтоработыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЕсли; 
	
	АвтоработыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Авторабота" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыАвтоработаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	                        
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.АвтоработаПриИзменении(Объект, Строка, ПараметрыДействия);
	
	АвтоработыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	                        
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
	АвтоработыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Нормочас" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыНормочасПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	                        
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.НормочасПриИзменении(Объект, Строка, ПараметрыДействия);
	
	АвтоработыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Коэффициент" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыКоэффициентПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	                        
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.КоэффициентПриИзменении(Объект, Строка, ПараметрыДействия);
	
	АвтоработыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	                        
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
	АвтоработыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	                        
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
	АвтоработыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	                        
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
	АвтоработыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	                        
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
	АвтоработыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	                        
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	АвтоработыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент скидки" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	                        
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	СуммаБезСкидок     = СкидкиНаценкиСервер.ПолучитьСуммуСтрокиБезСкидок(Объект, Строка, "Автоработы");
	Строка.СуммаСкидки = Окр(СуммаБезСкидок*Строка.ПроцентСкидки/100, 2);
	
	СуммаСоСкидкой = Строка.Сумма - Строка.СуммаСкидкиСтроки - Строка.СуммаСкидки;
	
	// Включает ли цена НДС?
	Если ПараметрыДействия.Свойство("ТипЦен") Тогда
		ЦенаВключаетНДС = (ПараметрыДействия.ТипЦен.Пустая() ИЛИ ПараметрыДействия.ТипЦен.ЦенаВключаетНДС);
	ИначеЕсли ЕстьРеквизит(Объект, "ТипЦен") Тогда
		ЦенаВключаетНДС = (Объект.ТипЦен.Пустая() ИЛИ Объект.ТипЦен.ЦенаВключаетНДС);
	Иначе
		ЦенаВключаетНДС = Истина;
	КонецЕсли;
		
	СтавкаНДС = Строка.СтавкаНДС.Ставка;
	
	Если ЦенаВключаетНДС Тогда
		Строка.СуммаВсего = СуммаСоСкидкой;
		Строка.СуммаНДС   = Окр((СуммаСоСкидкой * СтавкаНДС)/(100 + СтавкаНДС), 2);
	Иначе
		Строка.СуммаНДС   = Окр((СуммаСоСкидкой * СтавкаНДС)/100, 2);
		Строка.СуммаВсего = СуммаСоСкидкой + Строка.СуммаНДС;
	КонецЕсли;
	
	Строка.СуммаВсего = СуммаСоСкидкой;
	
	АвтоработыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент скидки строки" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	                        
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Строка.ПроцентСкидкиСтроки > 100 Тогда
		Строка.ПроцентСкидкиСтроки = 100;
	КонецЕсли;
		
	СуммаБезСкидок = СкидкиНаценкиСервер.ПолучитьСуммуСтрокиБезСкидок(Объект, Строка, "Автоработы");
	Строка.СуммаСкидкиСтроки = Окр(СуммаБезСкидок*Строка.ПроцентСкидкиСтроки/100, 2);
	
	СуммаСоСкидкой = Строка.Сумма - Строка.СуммаСкидкиСтроки - Строка.СуммаСкидки;
	
	// Включает ли цена НДС?
	Если ПараметрыДействия.Свойство("ТипЦен") Тогда
		ЦенаВключаетНДС = (ПараметрыДействия.ТипЦен.Пустая() ИЛИ ПараметрыДействия.ТипЦен.ЦенаВключаетНДС);
	ИначеЕсли ЕстьРеквизит(Объект, "ТипЦен") Тогда
		ЦенаВключаетНДС = (Объект.ТипЦен.Пустая() ИЛИ Объект.ТипЦен.ЦенаВключаетНДС);
	Иначе
		ЦенаВключаетНДС = Истина;
	КонецЕсли;
		
	СтавкаНДС = Строка.СтавкаНДС.Ставка;
	
	Если ЦенаВключаетНДС Тогда
		Строка.СуммаВсего = СуммаСоСкидкой;
		Строка.СуммаНДС   = Окр((СуммаСоСкидкой * СтавкаНДС)/(100 + СтавкаНДС), 2);
	Иначе
		Строка.СуммаНДС   = Окр((СуммаСоСкидкой * СтавкаНДС)/100, 2);
		Строка.СуммаВсего = СуммаСоСкидкой + Строка.СуммаНДС;
	КонецЕсли;
	
	Строка.СуммаВсего = СуммаСоСкидкой;
	
	АвтоработыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	                        
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	СуммаБезСкидок = СкидкиНаценкиСервер.ПолучитьСуммуСтрокиБезСкидок(Объект, Строка, "Автоработы");
	Строка.ПроцентСкидки = ?(СуммаБезСкидок = 0, 0, Окр(Строка.СуммаСкидки*100/СуммаБезСкидок,2));
	
	АвтоработыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки строки" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыСуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	                        
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	СуммаБезСкидок = СкидкиНаценкиСервер.ПолучитьСуммуСтрокиБезСкидок(Объект, Строка, "Автоработы");
	Строка.ПроцентСкидкиСтроки = ?(СуммаБезСкидок = 0, 0, Окр(Строка.СуммаСкидкиСтроки*100/СуммаБезСкидок,2));
	
	АвтоработыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Способ расчета стоимости работы" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыСпособРасчетаСтоимостиРаботыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.РасчетСтоимостиРаботыПриИзменении(Объект, Строка, ПараметрыДействия);
	
	АвтоработыРасчетРазницы(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура заполнения реквизитов разницы на основе реквизитов заполнения
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыРасчетРазницы(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Строка.КоличествоРазница  = (Строка.Количество)-(Строка.КоличествоПоЗаказНаряду);
	Строка.КоэффициентРазница = Строка.Коэффициент-Строка.КоэффициентПоЗаказНаряду;
	Строка.СуммаНДСРазница    = Строка.СуммаНДС-Строка.СуммаНДСПоЗаказНаряду;
	Строка.СуммаСкидкиРазница = (Строка.СуммаСкидки+Строка.СуммаСкидкиСтроки)-Строка.СуммаСкидкиПоЗаказНаряду;
	Строка.СуммаВсегоРазница  = Строка.СуммаВсего-Строка.СуммаВсегоПоЗаказНаряду;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	Если ПраваИНастройкиПользователя.Значение("ЗапросВалютыПечатногоДокумента") Тогда
		УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
			"Документ.АктРазногласий",
			"ПФ_MXL_ЗаказНаряд",
			НСтр("ru = 'Заказ-наряд'"),
			СсылкаНаДокумент,
			"УправлениеПечатьюАвтосалонКлиент.НачатьВыборВалютыДляПечати");
		УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
			"Документ.АктРазногласий",
			"ПФ_MXL_АктОбОказанииУслуг",
			НСтр("ru = 'Акт об оказании услуг'"),
			СсылкаНаДокумент,
			"УправлениеПечатьюАвтосалонКлиент.НачатьВыборВалютыДляПечати");
	Иначе
		УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
			"Документ.АктРазногласий",
			"ПФ_MXL_АктОбОказанииУслуг",
			НСтр("ru = 'Акт об оказании услуг'"),
			СсылкаНаДокумент);
		УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
			"Документ.АктРазногласий",
			"ПФ_MXL_ЗаказНаряд",
			НСтр("ru = 'Заказ-наряд'"),
			СсылкаНаДокумент);
	КонецЕсли;
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ12",
		НСтр("ru = 'ТОРГ-12 (Товарная накладная)'"),
		СсылкаНаДокумент);
		
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов			 - Массив		 - массив объектов для формирования печатных форм.
//  ПараметрыПечати			 - Структура	 - дополнительные параметры печати.
//  КоллекцияПечатныхФорм	 - ТаблицаЗначений	 - таблица с идентификаторами печатных форм и макетами печати.
//  ОбъектыПечати			 - Структура		 - список областьей печатной формы в разрезе документов.
//  ПараметрыВывода			 - Структура		 - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ЗаказНаряд") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ПФ_MXL_ЗаказНаряд",
			"Заказ-наряд",
			ПечатьЗаказНаряд(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;														
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_АктОбОказанииУслуг") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ПФ_MXL_АктОбОказанииУслуг",
			"Акт об оказании услуг",
			ПечатьАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;														
	
		
КонецПроцедуры // Печать()

// Формирует печатную форму "ЗаказНаряд"
// Возвращает сформированный табличный документ:
Функция ПечатьЗаказНаряд(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктРазногласий_ЗаказНаряд";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;

	// зададим параметры макета
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		
		// Предварительные обработки данных
		// Валюта печати
		ВалютаПечатногоДокумента = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПечати,
			"ВалютаПечатногоДокумента",
			Документ.ВалютаДокумента);
		
		ТаблицаТоваров = Документ.Товары.Выгрузить();
		ТаблицаАвторабот = Документ.Автоработы.Выгрузить();
			
		// Пересчет сумм по выбранной валюте.
		Если ВалютаПечатногоДокумента <> Документ.ВалютаДокумента Тогда
			
			РаспределениеСумм = Неопределено;
			ПересчитатьПоРасчетамСКонтрагентами = ПересчитатьТаблицуНаОснованииВзаиморасчетов(
				Документ,
				ТаблицаАвторабот,
				ТаблицаТоваров,
				РаспределениеСумм,
				ВалютаПечатногоДокумента);
			
			Если ТаблицаАвторабот.Количество() > 0 Тогда
				ДокументОбъектСтруктура = УправлениеПечатьюПлатформа.ДанныеДокументаДляПерерасчетаТаблицы();
				ЗаполнитьЗначенияСвойств(ДокументОбъектСтруктура, Документ);
				ДокументОбъектСтруктура.Документ = Документ;
				ДокументОбъектСтруктура.ТипЦен = Документ.ТипЦенРабот;
				ДокументОбъектСтруктура.ПропуститьПересчетПоВзаиморасчетам = Истина;
				
				ДополнитьПараметрыПересчетаДанных(
					ДокументОбъектСтруктура,
					ПересчитатьПоРасчетамСКонтрагентами,
					РаспределениеСумм);
				
				ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ТаблицаАвторабот,
					ДокументОбъектСтруктура,
					ВалютаПечатногоДокумента);
			КонецЕсли;
			
			Если ТаблицаТоваров.Количество() > 0 Тогда
				ДокументОбъектСтруктура = УправлениеПечатьюПлатформа.ДанныеДокументаДляПерерасчетаТаблицы();
				ЗаполнитьЗначенияСвойств(ДокументОбъектСтруктура, Документ);
				ДокументОбъектСтруктура.Документ = Документ;
				ДокументОбъектСтруктура.ПропуститьПересчетПоВзаиморасчетам = Истина;
				
				ДополнитьПараметрыПересчетаДанных(
					ДокументОбъектСтруктура,
					ПересчитатьПоРасчетамСКонтрагентами,
					РаспределениеСумм,
					Ложь);
				
				ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ТаблицаТоваров,
					ДокументОбъектСтруктура,
					ВалютаПечатногоДокумента);
			КонецЕсли;
			
		КонецЕсли;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АктРазногласий.ПФ_MXL_ЗаказНаряд");
		
		НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		НомерДляПечатиДокументОснование = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ.ДокументОснование);
		
		ЕстьСкидкаПоДеталям = Ложь;
		Если Документ.Товары.Итог("СуммаСкидки") <> 0 Тогда
			ЕстьСкидкаПоДеталям = Истина;
		КонецЕсли;
			
		ЕстьСкидкаПоАвтоработам = Ложь;
		Если Документ.Автоработы.Итог("СуммаСкидки") <> 0 Тогда
			ЕстьСкидкаПоАвтоработам = Истина;
		КонецЕсли;
		
		ОбластьСкидка = Макет.Область("Скидка");
		ОбластьУслуги = Макет.ПолучитьОбласть("Услуги");
		ОбластьДетали = Макет.ПолучитьОбласть("Детали");
		
		ОбластьСтрокаДеталей	        = Макет.ПолучитьОбласть("СтрокаДеталей");
		ОбластьИтоговПоСтраницеДетали	= Макет.ПолучитьОбласть("ИтогиПоСтраницеДеталей");
		ОбластьПодвалДеталей	        = Макет.ПолучитьОбласть("ПодвалДетали");
		
		ОбластьСтрокаУслуг		        = Макет.ПолучитьОбласть("СтрокаРабот");
		ОбластьИтоговПоСтраницеУслуги	= Макет.ПолучитьОбласть("ИтогиПоСтраницеРабот");
		ОбластьПодвалУслуг		        = Макет.ПолучитьОбласть("ПодвалУслуги");
		
		БезЛинии     = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		ОбычнаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		
		// Настроем колонки вывода деталей если не было скидок
		Если Не ЕстьСкидкаПоДеталям Тогда
			ПоложениеШапкиДеталей = ОбластьДетали.Область("ШапкаДеталей").Низ;
			ПозицияКолонки = ОбластьСкидка.Лево;
			Пока ПозицияКолонки > 6 Цикл
				ОбластьДетали.Область(ПоложениеШапкиДеталей-1,ПозицияКолонки,ПоложениеШапкиДеталей-1,ПозицияКолонки).Текст =
					ОбластьДетали.Область(ПоложениеШапкиДеталей-1,ПозицияКолонки-1,ПоложениеШапкиДеталей-1,ПозицияКолонки-1).Текст;
				ОбластьДетали.Область(ПоложениеШапкиДеталей,ПозицияКолонки,ПоложениеШапкиДеталей,ПозицияКолонки).Текст =
					ОбластьДетали.Область(ПоложениеШапкиДеталей,ПозицияКолонки-1,ПоложениеШапкиДеталей,ПозицияКолонки-1).Текст;
				
				ОбластьИсточник 			= ОбластьСтрокаДеталей.Область(1,ПозицияКолонки-1,1,ПозицияКолонки-1);
				ОбластьПриемник 			= ОбластьСтрокаДеталей.Область(1,ПозицияКолонки,1,ПозицияКолонки);
				ОбластьПриемник.Текст 		= ОбластьИсточник.Текст;
				ОбластьПриемник.Заполнение	= ОбластьИсточник.Заполнение;
				ОбластьПриемник.Параметр	= ОбластьИсточник.Параметр;
				
				ОбластьИсточник 			= ОбластьИтоговПоСтраницеДетали.Область(1,ПозицияКолонки-1,1,ПозицияКолонки-1);
				ОбластьПриемник 			= ОбластьИтоговПоСтраницеДетали.Область(1,ПозицияКолонки,1,ПозицияКолонки);
				ОбластьПриемник.Текст 		= ОбластьИсточник.Текст;
				ОбластьПриемник.Заполнение	= ОбластьИсточник.Заполнение;
				ОбластьПриемник.Параметр	= ОбластьИсточник.Параметр;
				
				ОбластьИсточник 			= ОбластьПодвалДеталей.Область(1,ПозицияКолонки-1,1,ПозицияКолонки-1);
				ОбластьПриемник 			= ОбластьПодвалДеталей.Область(1,ПозицияКолонки,1,ПозицияКолонки);
				ОбластьПриемник.Текст 		= ОбластьИсточник.Текст;
				ОбластьПриемник.Заполнение	= ОбластьИсточник.Заполнение;
				ОбластьПриемник.Параметр	= ОбластьИсточник.Параметр;
				
				ПозицияКолонки = ПозицияКолонки-1;
			КонецЦикла;
			
			ОбластьДетали.Область(ПоложениеШапкиДеталей-1, 4, ПоложениеШапкиДеталей-1, 6).Объединить();
			ОбластьДетали.Область(ПоложениеШапкиДеталей, 4, ПоложениеШапкиДеталей, 6).Объединить();
			ОбластьСтрокаДеталей.Область(1, 4, 1, 6).Объединить();
			
			ТекОбласть = ОбластьИтоговПоСтраницеДетали.Область(1, 2, 1, 6);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСнизу = БезЛинии;
			
			ТекОбласть = ОбластьПодвалДеталей.Область(1, 2, 1, 6);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСнизу = БезЛинии;
			
			ТекОбласть = ОбластьИтоговПоСтраницеДетали.Область(1, 8, 1, 9);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСлева = ОбычнаяЛиния;
			ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ТекОбласть.Текст = "на сумму:";
			
			ТекОбласть = ОбластьПодвалДеталей.Область(1, 8, 1, 9);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСлева = ОбычнаяЛиния;
			ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ТекОбласть.Текст = "на сумму:";
			
			ПозицияКолонки = ОбластьСкидка.Лево-1;
			Пока ПозицияКолонки <= ОбластьДетали.ШиринаТаблицы Цикл
				ОбластьДетали.Область(ПоложениеШапкиДеталей,ПозицияКолонки,ПоложениеШапкиДеталей,ПозицияКолонки).Текст = ПозицияКолонки-3;
				ПозицияКолонки = ПозицияКолонки + 1;
			КонецЦикла;
		КонецЕсли;
		
		ОбластьШапкаДеталей = ОбластьДетали.ПолучитьОбласть("ШапкаДеталей");
		
		// Настроем колонки вывода услуг если не было скидок
		Если Не ЕстьСкидкаПоАвтоработам Тогда
			ПоложениеШапкиУслуг = ОбластьУслуги.Область("ШапкаУслуг").Низ;
			ПозицияКолонки = ОбластьСкидка.Лево;
			Пока ПозицияКолонки > 5 Цикл
				ОбластьУслуги.Область(ПоложениеШапкиУслуг-1,ПозицияКолонки,ПоложениеШапкиУслуг-1,ПозицияКолонки).Текст =
					ОбластьУслуги.Область(ПоложениеШапкиУслуг-1,ПозицияКолонки-1,ПоложениеШапкиУслуг-1,ПозицияКолонки-1).Текст;
				ОбластьУслуги.Область(ПоложениеШапкиУслуг,ПозицияКолонки,ПоложениеШапкиУслуг,ПозицияКолонки).Текст =
					ОбластьУслуги.Область(ПоложениеШапкиУслуг,ПозицияКолонки-1,ПоложениеШапкиУслуг,ПозицияКолонки-1).Текст;
				
				ОбластьИсточник 			= ОбластьСтрокаУслуг.Область(1,ПозицияКолонки-1,1,ПозицияКолонки-1);
				ОбластьПриемник 			= ОбластьСтрокаУслуг.Область(1,ПозицияКолонки,1,ПозицияКолонки);
				ОбластьПриемник.Текст 		= ОбластьИсточник.Текст;
				ОбластьПриемник.Заполнение	= ОбластьИсточник.Заполнение;
				ОбластьПриемник.Параметр	= ОбластьИсточник.Параметр;
				
				ОбластьИсточник 			= ОбластьИтоговПоСтраницеУслуги.Область(1,ПозицияКолонки-1,1,ПозицияКолонки-1);
				ОбластьПриемник 			= ОбластьИтоговПоСтраницеУслуги.Область(1,ПозицияКолонки,1,ПозицияКолонки);
				ОбластьПриемник.Текст 		= ОбластьИсточник.Текст;
				ОбластьПриемник.Заполнение	= ОбластьИсточник.Заполнение;
				ОбластьПриемник.Параметр	= ОбластьИсточник.Параметр;
				
				ОбластьИсточник 			= ОбластьПодвалУслуг.Область(1,ПозицияКолонки-1,1,ПозицияКолонки-1);
				ОбластьПриемник 			= ОбластьПодвалУслуг.Область(1,ПозицияКолонки,1,ПозицияКолонки);
				ОбластьПриемник.Текст 		= ОбластьИсточник.Текст;
				ОбластьПриемник.Заполнение	= ОбластьИсточник.Заполнение;
				ОбластьПриемник.Параметр	= ОбластьИсточник.Параметр;
				
				ПозицияКолонки = ПозицияКолонки-1;
			КонецЦикла;
			
			ОбластьУслуги.Область(ПоложениеШапкиУслуг-1, 4, ПоложениеШапкиУслуг-1, 5).Объединить();
			ОбластьУслуги.Область(ПоложениеШапкиУслуг, 4, ПоложениеШапкиУслуг, 5).Объединить();
			ОбластьСтрокаУслуг.Область(1, 4, 1, 5).Объединить();
			
			ТекОбласть = ОбластьИтоговПоСтраницеУслуги.Область(1, 2, 1, 5);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСнизу = БезЛинии;
			
			ТекОбласть = ОбластьПодвалУслуг.Область(1, 2, 1, 5);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСнизу = БезЛинии;
			
			ТекОбласть = ОбластьИтоговПоСтраницеУслуги.Область(1, 7, 1, 9);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСлева = ОбычнаяЛиния;
			ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ТекОбласть.Текст = "на сумму:";
			
			ТекОбласть = ОбластьПодвалУслуг.Область(1, 7, 1, 9);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСлева = ОбычнаяЛиния;
			ТекОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ТекОбласть.Текст = "на сумму:";
			
			ПозицияКолонки = ОбластьСкидка.Лево-1;
			Пока ПозицияКолонки <= ОбластьУслуги.ШиринаТаблицы Цикл
				ОбластьУслуги.Область(ПоложениеШапкиУслуг,ПозицияКолонки,ПоложениеШапкиУслуг,ПозицияКолонки).Текст = ПозицияКолонки-2;
				ПозицияКолонки = ПозицияКолонки + 1;
			КонецЦикла;
		КонецЕсли;
		
		ОбластьШапкаУслуг = ОбластьУслуги.ПолучитьОбласть("ШапкаУслуг");
		
		// инициализация итогов по документу
		ИтогоСуммаРабот	              = 0;
		ИтогоСуммаНДСРабот            = 0;
		ИтогоСуммаСкидкиРабот         = 0;
		ИтогоКоличествоРабот          = 0;
		ИтогоСуммаДеталей	          = 0;
		ИтогоСуммаНДСДеталей          = 0;
		ИтогоСуммаСкидкиДеталей       = 0;
		ИтогоКоличествоДеталей        = 0;
		
		// Вывод шапки документа
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.Организация = Документ.Организация;
		ОбластьШапка.Параметры.ФирмаПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация);
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ДляПечати = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьШапка.Параметры.ФирмаАдресЮридический = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			ОбластьШапка.Параметры.Организация, Новый Структура("АдресЮридический"," "), ДополнительныеПараметры);
		ОбластьШапка.Параметры.НомерДок = НомерДляПечатиДокументОснование;
		ОбластьШапка.Параметры.ДатаДок = Формат(Документ.ДокументОснование.Дата,"ДФ=дд.ММ.гггг");
		ОбластьШапка.Параметры.Заказчик = Документ.Заказчик;
		ОбластьШапка.Параметры.ЗаказчикПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Заказчик);
		ОбластьШапка.Параметры.ЗаказчикАдресПочтовый = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Заказчик, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.ЗаказчикТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Заказчик, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.Контрагент = Документ.Контрагент;
		ОбластьШапка.Параметры.КонтрагентПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент);
		ОбластьШапка.Параметры.КонтрагентИНН = Документ.Контрагент.ИНН;
		ОбластьШапка.Параметры.КонтрагентАдресЮридический = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ТекущаяДатаСеанса());
		ОбластьШапка.Параметры.КонтрагентТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		
		Если ЗначениеЗаполнено(Документ.Автомобиль) Тогда
			ОбластьШапка.Параметры.АвтомобильГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Документ.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер, Документ.ДокументОснование.ДатаСоздания);
			ОбластьШапка.Параметры.АвтомобильПробег   = СокрЛП(Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Документ.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег, Документ.ДокументОснование.ДатаНачала));
		КонецЕсли;
		ОбластьШапка.Параметры.Автомобиль = Документ.Автомобиль;
		ОбластьШапка.Параметры.АвтомобильКод = Документ.Автомобиль.VIN;
		ОбластьШапка.Параметры.АвтомобильМодель = Документ.Автомобиль.Модель;
		ОбластьШапка.Параметры.АвтомобильГодВыпуска = Формат(Документ.Автомобиль.ГодВыпуска, "ДФ=гггг");
		
		ОбластьШапка.Параметры.ДатаСоздания = Формат(Документ.ДокументОснование.ДатаСоздания, "ДФ = дд.ММ.гггг");	
		ОбластьШапка.Параметры.ВидРемонта = Документ.ВидРемонта;	
		ОбластьШапка.Параметры.Диспетчер = Документ.ДокументОснование.Диспетчер;
		ОбластьШапка.Параметры.Мастер = Документ.ДокументОснование.Мастер;
		ОбластьШапка.Параметры.Состояние = Документ.ДокументОснование.Состояние;
		ОбластьШапка.Параметры.Валюта = ВалютаПечатногоДокумента;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		КолонкаКода = УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах();
		
		// Временная таблица
		Табл = ТаблицаАвторабот.Скопировать();
		КоличествоРабот = Табл.Количество();
		ПустыеСтроки=Табл.НайтиСтроки(Новый Структура("Количество",0));
		Для каждого ПустаяСтрока Из ПустыеСтроки Цикл
			Табл.Удалить(ПустаяСтрока);
		КонецЦикла; 
		
		// инициализация итогов по документу
		ИтогоСуммаРабот		= 0;
		ИтогоСуммаНДСРабот	= 0;
		
		Если КоличествоРабот <> 0 Тогда
		
			// Вывод шапки табличной части работ(услуг)
			ОбластьУслуги.Параметры.НомерДок = НомерДляПечатиДокументОснование;
			ОбластьУслуги.Параметры.ДатаДок = Формат(Документ.ДокументОснование.Дата, "ДФ=дд.ММ.гггг");
			ОбластьУслуги.Параметры.ИмяКолонкиКодов = КолонкаКода.Синоним;
			ТабличныйДокумент.Вывести(ОбластьУслуги);
			
			НомерСтраницы = 2;
			НомерСтраницыПред = 2;
			ТекстЗаголовка = "Выполненные работы по заказ-наряду №  "
				+НомерДляПечатиДокументОснование
				+" от "
				+Формат(Документ.ДокументОснование.Дата, "ДФ=дд.ММ.гггг");
			
			// Вывод табличной части работ
			Ном	= 0;
			СтруктураИтоговПоСтранице = Новый Структура("СуммаВсего, СуммаНДС, СуммаСкидки, Количество", 0, 0, 0, 0);
			
			МассивОбластиПодвала = Новый Массив;
			МассивОбластиПодвала.Добавить(ОбластьПодвалУслуг);
			Для каждого СтрокаРабот Из Табл Цикл
				Ном = Ном + 1;
				ОбластьСтрокаУслуг.Параметры.НомСтр = Ном;
				ОбластьСтрокаУслуг.Параметры.Код = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаРабот.Авторабота);
				ОбластьСтрокаУслуг.Параметры.Номенклатура = СтрокаРабот.Авторабота;
				ОбластьСтрокаУслуг.Параметры.Наименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаРабот.Авторабота);
				ОбластьСтрокаУслуг.Параметры.Цена = Формат(СтрокаРабот.Цена, "ЧЦ=15; ЧДЦ=2");
				ОбластьСтрокаУслуг.Параметры.Коэффициент = Формат(СтрокаРабот.Коэффициент, "ЧЦ=10; ЧДЦ=3");
				ОбластьСтрокаУслуг.Параметры.Количество = Формат(СтрокаРабот.Количество, ФорматВыводаКоличества);
				ОбластьСтрокаУслуг.Параметры.Единица = СтрокаРабот.Нормочас;
				ОбластьСтрокаУслуг.Параметры.Сумма = Формат(СтрокаРабот.СуммаВсего, ФорматВыводаСуммы);
				Если ЕстьСкидкаПоАвтоработам Тогда
					ОбластьСтрокаУслуг.Параметры.Скидка = Формат(СтрокаРабот.СуммаСкидки, ФорматВыводаСуммы);
				КонецЕсли;
				ОбластьСтрокаУслуг.Параметры.НДС = Формат(СтрокаРабот.СуммаНДС, ФорматВыводаСуммы);
				
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент,
					ОбластьСтрокаУслуг,
					ОбластьШапкаУслуг,
					ОбластьИтоговПоСтраницеУслуги,
					НомерСтраницы,
					СтруктураИтоговПоСтранице,
					Документ);
				
				// Обновим итоги по документу
				ИтогоКоличествоРабот  = ИтогоКоличествоРабот + СтрокаРабот.Количество;
				ИтогоСуммаРабот       = ИтогоСуммаРабот + СтрокаРабот.СуммаВсего;
				ИтогоСуммаНДСРабот    = ИтогоСуммаНДСРабот + СтрокаРабот.СуммаНДС;
				ИтогоСуммаСкидкиРабот = ИтогоСуммаСкидкиРабот + СтрокаРабот.СуммаСкидки;
				
				// инициализация итогов по странице
				Если НомерСтраницы <> НомерСтраницыПред Тогда
					СтруктураИтоговПоСтранице = Новый Структура("СуммаВсего, СуммаНДС, СуммаСкидки, Количество", 0, 0, 0, 0);
					НомерСтраницыПред = НомерСтраницы;
					ОбластьШапкаУслуг.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
				КонецЕсли;
				
				// Добавляем итоги
				УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаРабот, СтруктураИтоговПоСтранице);
				
			КонецЦикла; 
			
			// выводим последний итог по странице, если страниц больше единицы
			Если НомерСтраницы > 2 Тогда
				УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент,
					ОбластьИтоговПоСтраницеУслуги,
					СтруктураИтоговПоСтранице,
					Документ);
			КонецЕсли;
			
			// Вывод подвала табличной части услуг
			ОбластьПодвалУслуг.Параметры.Количество = Формат(ИтогоКоличествоРабот, ФорматВыводаКоличества);
			ОбластьПодвалУслуг.Параметры.Сумма = Формат(ИтогоСуммаРабот, ФорматВыводаСуммы);
			ОбластьПодвалУслуг.Параметры.НДС = Формат(ИтогоСуммаНДСРабот, ФорматВыводаСуммы);
			Если ЕстьСкидкаПоАвтоработам Тогда
				ОбластьПодвалУслуг.Параметры.Скидка = Формат(ИтогоСуммаСкидкиРабот, ФорматВыводаСуммы);
			КонецЕсли;
			ОбластьПодвалУслуг.Параметры.ЧислоПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоСуммаРабот, ВалютаПечатногоДокумента);
			Если ИтогоСуммаНДСРабот <> 0 Тогда
				ОбластьПодвалУслуг.Параметры.ЧислоПрописью = ОбластьПодвалУслуг.Параметры.ЧислоПрописью
					+ " в т.ч. НДС "
					+ Формат(ИтогоСуммаНДСРабот, "ЧЦ=15; ЧДЦ=2")
					+ " " 
					+ ВалютаПечатногоДокумента;
			КонецЕсли; 
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент,
				ОбластьПодвалУслуг,
				,
				,
				НомерСтраницы,
				,
				Документ);
		КонецЕсли;
		
		// Формирование врем. таблиц товаров
		Табл = ТаблицаТоваров.Скопировать();
		ПустыеСтроки=Табл.НайтиСтроки(Новый Структура("Количество",0));
		Для каждого ПустаяСтрока Из ПустыеСтроки Цикл
			Табл.Удалить(ПустаяСтрока);
		КонецЦикла; 
		КоличествоДеталей = Табл.Количество();
		
		ТабДокВрем = Новый ТабличныйДокумент;
		ТабДокВрем.ПолеСверху = 0;
		ТабДокВрем.ПолеСнизу  = 0;
		ТабДокВрем.ПолеСлева  = 0;
		ТабДокВрем.ПолеСправа = 0;
		
		Если КоличествоДеталей <> 0 Тогда
			
			// Вывод шапки табличной части деталей
			ОбластьДетали.Параметры.НомерДок = НомерДляПечатиДокументОснование;
			ОбластьДетали.Параметры.ДатаДок = Формат(Документ.ДокументОснование.Дата, "ДФ=дд.ММ.гггг");
			// Если помещается только шапка, но ни одной строчки, то шапку переносим на след. страницу.
			ОбластьДетали.Параметры.ИмяКолонкиКодов = КолонкаКода.Синоним;
			ТабДокВрем.Вывести(ОбластьДетали);
			ОбластьМакетаСтрокаВрем = Макет.ПолучитьОбласть("СтрокаДеталей");
			СтрокаДеталей = Табл[0];
			ТекОбласть = ОбластьМакетаСтрокаВрем.Область(1, , 1);
			// Присутствуют заполненные строки (заполняем не все параметры - только наиболее вероятно длинные).
			ТекТовар = СтрокаДеталей.Номенклатура;
			
			ОбластьМакетаСтрокаВрем.Параметры.Наименование = ТекТовар.НаименованиеПолное;
			ТабДокВрем.Вывести(ОбластьМакетаСтрокаВрем);
			ТабДокВрем.Вывести(ОбластьИтоговПоСтраницеДетали);
			Если НЕ ТабличныйДокумент.ПроверитьВывод(ТабДокВрем) Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ОбластьДетали.Параметры.НомерДок = НомерДляПечатиДокументОснование;
			ОбластьДетали.Параметры.ДатаДок = Формат(Документ.ДокументОснование.Дата, "ДФ = дд.ММ.гггг");
			ТабличныйДокумент.Вывести(ОбластьДетали);
			
			НомерСтраницы = 2;
			НомерСтраницыПред = 2;
		
			ТекстЗаголовка = "Расходная накладная к заказ-наряду №  "
				+НомерДляПечатиДокументОснование
				+" от "
				+Формат(Документ.ДокументОснование.Дата, "ДФ = дд.ММ.гггг");
				
			// Заполним параметры шапки таблицы для следующего листа.
			ОбластьШапкаДеталей.Параметры.ТекстЗаголовка = ТекстЗаголовка;
			ОбластьШапкаДеталей.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			ОбластьШапкаДеталей.Параметры.ИмяКолонкиКодов = КолонкаКода.Синоним;
				
			// Вывод табличной части деталей.
			Ном = 0;
			СтруктураИтоговПоСтранице = Новый Структура("СуммаВсего, СуммаНДС, СуммаСкидки, Количество", 0, 0, 0, 0);
				
			МассивОбластиПодвала = Новый Массив;
			МассивОбластиПодвала.Добавить(ОбластьПодвалДеталей);
			Для каждого СтрокаДеталей Из Табл Цикл
				Ном = Ном + 1;
				
				ОбластьСтрокаДеталей.Параметры.НомСтр = Ном;
				ТекТовар = СтрокаДеталей.Номенклатура;
				ОбластьСтрокаДеталей.Параметры.Код = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(ТекТовар);
				ОбластьСтрокаДеталей.Параметры.Номенклатура = ТекТовар;
				ОбластьСтрокаДеталей.Параметры.Наименование = ТекТовар.НаименованиеПолное;
				ОбластьСтрокаДеталей.Параметры.Цена = Формат(СтрокаДеталей.Цена, "ЧЦ=15; ЧДЦ=2");
				ОбластьСтрокаДеталей.Параметры.Количество = Формат(СтрокаДеталей.Количество*СтрокаДеталей.Коэффициент, ФорматВыводаКоличества);
				ОбластьСтрокаДеталей.Параметры.Единица = СтрокаДеталей.ЕдиницаИзмерения;
				ОбластьСтрокаДеталей.Параметры.Сумма = Формат(СтрокаДеталей.СуммаВсего, ФорматВыводаСуммы);
				Если ЕстьСкидкаПоДеталям Тогда
					ОбластьСтрокаДеталей.Параметры.Скидка = Формат(СтрокаДеталей.СуммаСкидки, ФорматВыводаСуммы);
				КонецЕсли;
				ОбластьСтрокаДеталей.Параметры.НДС = Формат(СтрокаДеталей.СуммаНДС, ФорматВыводаСуммы);
				
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент,
					ОбластьСтрокаДеталей,
					ОбластьШапкаДеталей,
					ОбластьИтоговПоСтраницеДетали,
					НомерСтраницы,
					СтруктураИтоговПоСтранице,
					Документ,
					?(Ном=КоличествоДеталей, МассивОбластиПодвала, Неопределено));
					
				// Обновим итоги по документу
				ИтогоКоличествоДеталей = ИтогоКоличествоДеталей + СтрокаДеталей.Количество*СтрокаДеталей.Коэффициент;
				ИтогоСуммаДеталей		= ИтогоСуммаДеталей		+ СтрокаДеталей.СуммаВсего;
				ИтогоСуммаНДСДеталей	= ИтогоСуммаНДСДеталей	+ СтрокаДеталей.СуммаНДС;
				ИтогоСуммаСкидкиДеталей	= ИтогоСуммаСкидкиДеталей	+ СтрокаДеталей.СуммаСкидки;
					
				// инициализация итогов по странице
				Если НомерСтраницы <> НомерСтраницыПред Тогда
					СтруктураИтоговПоСтранице = Новый Структура("СуммаВсего, СуммаНДС, СуммаСкидки, Количество", 0, 0, 0, 0);
					НомерСтраницыПред = НомерСтраницы;
					ОбластьШапкаДеталей.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
				КонецЕсли;
					
				// обновим итоги по странице
				СтруктураИтоговПоСтранице.СуммаВсего = СтруктураИтоговПоСтранице.СуммаВсего + СтрокаДеталей.СуммаВсего;
				СтруктураИтоговПоСтранице.СуммаНДС   = СтруктураИтоговПоСтранице.СуммаНДС + СтрокаДеталей.СуммаНДС;
				СтруктураИтоговПоСтранице.Количество = СтруктураИтоговПоСтранице.Количество + СтрокаДеталей.Количество*СтрокаДеталей.Коэффициент;
				СтруктураИтоговПоСтранице.СуммаСкидки = СтруктураИтоговПоСтранице.СуммаСкидки + СтрокаДеталей.СуммаСкидки;
			КонецЦикла;
			
			// выводим последний итог по странице, если страниц больше единицы
			Если НомерСтраницы > 2 Тогда
				УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтоговПоСтраницеДетали, СтруктураИтоговПоСтранице, Документ);
			КонецЕсли;
			
			// Вывод подвала табличной части деталей
			ОбластьПодвалДеталей.Параметры.Количество = Формат(ИтогоКоличествоДеталей, ФорматВыводаКоличества);
			ОбластьПодвалДеталей.Параметры.Сумма = Формат(ИтогоСуммаДеталей, ФорматВыводаСуммы);
			ОбластьПодвалДеталей.Параметры.НДС = Формат(ИтогоСуммаНДСДеталей, ФорматВыводаСуммы);
			Если ЕстьСкидкаПоДеталям Тогда
				ОбластьПодвалДеталей.Параметры.Скидка = Формат(ИтогоСуммаСкидкиДеталей, ФорматВыводаСуммы);
			КонецЕсли;
			ОбластьПодвалДеталей.Параметры.ЧислоПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоСуммаДеталей, ВалютаПечатногоДокумента);
			Если ИтогоСуммаНДСДеталей <> 0 Тогда
				ОбластьПодвалДеталей.Параметры.ЧислоПрописью = ОбластьПодвалДеталей.Параметры.ЧислоПрописью + " в т.ч. НДС " +Формат(ИтогоСуммаНДСДеталей, ФорматВыводаСуммы) + " " + ВалютаПечатногоДокумента;
			КонецЕсли; 
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвалДеталей, , , НомерСтраницы, , Документ);
		КонецЕсли;
		
		// Вывод подвала документа
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьПодвал.Параметры.Сумма = Формат(ИтогоСуммаРабот + ИтогоСуммаДеталей, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.НДС = Формат(ИтогоСуммаНДСРабот + ИтогоСуммаНДСДеталей, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.ЧислоПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоСуммаРабот + ИтогоСуммаДеталей, ВалютаПечатногоДокумента);
		Если (ИтогоСуммаНДСРабот + ИтогоСуммаНДСДеталей) <> 0 Тогда
			ОбластьПодвал.Параметры.ЧислоПрописью = ОбластьПодвал.Параметры.ЧислоПрописью + " в т.ч. НДС " + Формат(ИтогоСуммаНДСРабот+ИтогоСуммаНДСДеталей, ФорматВыводаСуммы) + " " + ВалютаПечатногоДокумента;
		КонецЕсли; 
		Если ПустаяСтрока(Документ.ДокументОснование.Гарантии) Тогда
			ТекОбласть = ОбластьПодвал.Область(7,, 7);
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			ОбластьПодвал.Область(7, 3, 7, 3).Текст = "";
		Иначе
			ОбластьПодвал.Параметры.Гарантии = Документ.ДокументОснование.Гарантии;
		КонецЕсли;
		Если ПустаяСтрока(Документ.ДокументОснование.Рекомендации) Тогда
			ТекОбласть = ОбластьПодвал.Область(9,, 9);
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			ОбластьПодвал.Область(9, 3, 9, 3).Текст = "";
		Иначе
			ОбластьПодвал.Параметры.Рекомендации = Документ.ДокументОснование.Рекомендации;	
		КонецЕсли;
		ОбластьПодвал.Параметры.Мастер = Документ.ДокументОснование.Мастер;
		ОбластьПодвал.Параметры.МастерПолноеНаименование = Документ.ДокументОснование.Мастер.Наименование;
		ОбластьПодвал.Параметры.Заказчик = Документ.Заказчик;
		ОбластьПодвал.Параметры.ЗаказчикПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Заказчик);
		ОбластьПодвал.Параметры.ДатаДок = Формат(Документ.Дата,"ДФ = дд.ММ.гггг");
		НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// !!!_antsyu Необходимо разобраться с выводом причины обращения из Заказ-наряда
		//// Вывод причины
		//ОбластьПричина = Макет.ПолучитьОбласть("Причина");
		//Если ПустаяСтрока(Документ.ДокументОснование.ПричинаОбращения) Тогда
		//	ТекОбласть = ОбластьПричина.Область(2, , 2, );
		//	ТекОбласть.АвтовысотаСтроки = Ложь;
		//	ТекОбласть.ВысотаСтроки = 22;
		//КонецЕсли;
		//ОбластьПричина.Параметры.ПричинаОбращения = Документ.ДокументОснование.ПричинаОбращения;
		//НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПричина, , , НомерСтраницы, , Документ);
		
		// Верхние колонтитулы
		ТабличныйДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
		ТабличныйДокумент.ВерхнийКолонтитул.Выводить = Истина;
		ТабличныйДокумент.ВерхнийКолонтитул.НачальнаяСтраница = 2;
		ТабличныйДокумент.ВерхнийКолонтитул.ТекстСправа = "Акт разногласий № " + НомерДляПечати 
				+ " от " + Формат(Документ.Дата, "ДФ = дд.ММ.гггг");
		ТабличныйДокумент.ВерхнийКолонтитул.Шрифт = Новый Шрифт(ТабличныйДокумент.ВерхнийКолонтитул.Шрифт,,,, 
																									Истина, Истина);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьЗаказНаряд()

// Формирует печатную форму "ТОРГ-12"
// Возвращает сформированный табличный документ:
Функция ПолучитьДанныеДляПечатиТОРГ12(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	Если  ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда 
		ДокументОснование = Объект.ДоговорВзаиморасчетов; 
		ОснованиеДата = Формат(Объект.ДоговорВзаиморасчетов.ДатаНачала, "ЧЦ=; ДФ=dd.MM.yyyy");
		ОснованиеНомер = Объект.ДоговорВзаиморасчетов.НомерДоговора;
	Иначе
		ДокументОснование = Объект.ДокументОснование;
		ОснованиеДата = ?(ЗначениеЗаполнено(Объект.ДатаЗакрытия), Объект.ДатаЗакрытия, Объект.Дата);
		ОснованиеНомер = Объект.Номер;
	КонецЕсли;

	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"          , Объект.КурсДокумента);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("ДокументОснование"      , ДокументОснование);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  , Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("ОснованиеДата"          , ОснованиеДата);
	ДанныеОбъекта.Вставить("ОснованиеНомер"         , ОснованиеНомер);
	ДанныеОбъекта.Вставить("ВидДеятельностиПоОКДП"  , Объект.Организация.КодПоОКДП);
	ДанныеОбъекта.Вставить("РасчетныйСчетДокумента" ,"");
	ДанныеОбъекта.Вставить("Поставщик"             , Объект.Организация);
	ДанныеОбъекта.Вставить("Плательщик"            , Объект.Контрагент);  
	ДанныеОбъекта.Вставить("Грузоотправитель"        , ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, Объект.Организация));
	ДанныеОбъекта.Вставить("Грузополучатель"         , ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, Объект.Контрагент)); 
	ДанныеОбъекта.Вставить("ПоставщикПоОКПО"        , Объект.Организация.КодПоОКПО);
	ДанныеОбъекта.Вставить("ПлательщикПоОКПО"       , Объект.Контрагент.КодПоОКПО);
	ДанныеОбъекта.Вставить("ГрузополучательПоОКПО" , ДанныеОбъекта.Грузополучатель.КодПоОКПО);

	
	// выборка табличной части	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АктРазногласийТовары.НомерСтроки КАК НомерСтроки,
	               |	АктРазногласийТовары.ПоЗаказНаряду КАК ПоЗаказНаряду,
	               |	АктРазногласийТовары.Подтверждение КАК Подтверждение,
	               |	АктРазногласийТовары.Номенклатура КАК Номенклатура,
	               |	АктРазногласийТовары.Количество КАК Количество,
	               |	АктРазногласийТовары.КоличествоПоЗаказНаряду КАК КоличествоПоЗаказНаряду,
	               |	АктРазногласийТовары.КоличествоРазница КАК КоличествоРазница,
	               |	АктРазногласийТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	АктРазногласийТовары.ЕдиницаИзмеренияПоЗаказНаряду КАК ЕдиницаИзмеренияПоЗаказНаряду,
	               |	АктРазногласийТовары.Коэффициент КАК Коэффициент,
	               |	АктРазногласийТовары.КоэффициентПоЗаказНаряду КАК КоэффициентПоЗаказНаряду,
	               |	АктРазногласийТовары.Цена КАК Цена,
	               |	АктРазногласийТовары.Сумма КАК Сумма,
	               |	АктРазногласийТовары.СтавкаНДС КАК СтавкаНДС,
	               |	АктРазногласийТовары.СтавкаНДСПоЗаказНаряду КАК СтавкаНДСПоЗаказНаряду,
	               |	АктРазногласийТовары.СуммаНДС КАК СуммаНДС,
	               |	АктРазногласийТовары.СуммаНДСПоЗаказНаряду КАК СуммаНДСПоЗаказНаряду,
	               |	АктРазногласийТовары.СуммаНДСРазница КАК СуммаНДСРазница,
	               |	АктРазногласийТовары.ПроцентСкидки КАК ПроцентСкидки,
	               |	АктРазногласийТовары.ПроцентСкидкиСтроки КАК ПроцентСкидкиСтроки,
	               |	АктРазногласийТовары.СуммаСкидки КАК СуммаСкидки,
	               |	АктРазногласийТовары.СуммаСкидкиСтроки КАК СуммаСкидкиСтроки,
	               |	АктРазногласийТовары.СуммаСкидкиПоЗаказНаряду КАК СуммаСкидкиПоЗаказНаряду,
	               |	АктРазногласийТовары.СуммаСкидкиРазница КАК СуммаСкидкиРазница,
	               |	АктРазногласийТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	АктРазногласийТовары.СуммаВсего КАК СуммаВсего,
	               |	АктРазногласийТовары.СуммаВсегоПоЗаказНаряду КАК СуммаВсегоПоЗаказНаряду,
	               |	АктРазногласийТовары.СуммаВсегоРазница КАК СуммаВсегоРазница,
	               |	АктРазногласийТовары.Номенклатура.Артикул КАК Код,
	               |	АктРазногласийТовары.СуммаВсего - АктРазногласийТовары.СуммаНДС КАК СуммаБезНДС
	               |ИЗ
	               |	Документ.АктРазногласий.Товары КАК АктРазногласийТовары
	               |ГДЕ
	               |	АктРазногласийТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Товары = Запрос.Выполнить().Выгрузить();
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти", Товары);
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки);
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства);
	ДатаОтгрузки = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", ЗначенияСвойствОбъекта);	
	ДанныеОбъекта.Вставить("ДатаОтгрузки"     , ?(НЕ ЗначениеЗаполнено(ДатаОтгрузки),"""___""____________ 20___",Формат(ДатаОтгрузки,"ДФ=dd.MM.yyyy")));
	
	ДанныеОбъекта.Вставить("Руководитель"     	     , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Руководитель"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Отпустил"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Отпустил"));  
	ДанныеОбъекта.Вставить("Принял"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Принял"));
	ДанныеОбъекта.Вставить("Получил"          		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Получил")); 
	
	Возврат ДанныеОбъекта;
	
КонецФункции // ПолучитьДанныеДляПечатиТОРГ12()

// Формирует печатную форму "Акт об оказании услуг"
// Возвращает сформированный табличный документ:
Функция ПечатьАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати.
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктРазногласий_АктОбОказанииУслуг";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	// Зададим параметры макета.
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда 
			// Новый документ должен быть на отдельной странице.
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АктРазногласий.ПФ_MXL_АктОбОказанииУслуг");
		
		НомерДляПечати= УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		
		// Предварительные обработки данных
		// Валюта печати
		ВалютаПечатногоДокумента = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПечати,
			"ВалютаПечатногоДокумента",
			Документ.ВалютаДокумента);
		
		ТаблицаАвторабот = Документ.Автоработы.Выгрузить();
		
		// Пересчет сумм по выбранной валюте.
		Если ТаблицаАвторабот.Количество() > 0
			И ВалютаПечатногоДокумента <> Документ.ВалютаДокумента Тогда
			
			ТаблицаТоваров = Документ.Товары.Выгрузить();
			
			РаспределениеСумм = Неопределено;
			ПересчитатьПоРасчетамСКонтрагентами = ПересчитатьТаблицуНаОснованииВзаиморасчетов(
				Документ,
				ТаблицаАвторабот,
				ТаблицаТоваров,
				РаспределениеСумм,
				ВалютаПечатногоДокумента);
			
			ДокументОбъектСтруктура = УправлениеПечатьюПлатформа.ДанныеДокументаДляПерерасчетаТаблицы();
			ЗаполнитьЗначенияСвойств(ДокументОбъектСтруктура, Документ);
			ДокументОбъектСтруктура.Документ = Документ;
			ДокументОбъектСтруктура.ТипЦен = Документ.ТипЦенРабот;
			ДокументОбъектСтруктура.ПропуститьПересчетПоВзаиморасчетам = Истина;
			
			ДополнитьПараметрыПересчетаДанных(
				ДокументОбъектСтруктура,
				ПересчитатьПоРасчетамСКонтрагентами,
				РаспределениеСумм);
			
			ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ТаблицаАвторабот,
				ДокументОбъектСтруктура,
				ВалютаПечатногоДокумента);
		КонецЕсли;
		
		ЕстьСкидка = Истина;
		Если ТаблицаАвторабот.Итог("СуммаСкидки") = 0 Тогда
			ЕстьСкидка = Ложь;
			ОбластьСкидка = Макет.Область("Скидка");
			ОбластьУслуга = Макет.Область("Услуга");
			ОбластьУслуга.ШиринаКолонки = ОбластьУслуга.ШиринаКолонки + ОбластьСкидка.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьСкидка, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		КонецЕсли;
		
		// Дата документа.
		ДатаДокумента = Документ.Дата;
		
		Если УправлениеПечатьюПлатформа.ЕстьЛоготип(Документ.Организация, Документ.ПодразделениеКомпании) Тогда
			ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокСЛоготипом");
			УправлениеПечатьюПлатформа.ЗаполнитьЛоготип(ОбластьЗаголовок, Документ.Организация, Документ.ПодразделениеКомпании);
		Иначе
			ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.НомерДок = НомерДляПечати;
		ОбластьЗаголовок.Параметры.ДатаДок = Формат(Документ.Дата, "ДФ = дд.ММ.гггг");
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ПредставлениеПолучателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Контрагент, , ДополнительныеПараметры);
		ОбластьЗаголовок.Параметры.ВалютаПечатногоДокумента = ВалютаПечатногоДокумента;
				
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		Если ЗначениеЗаполнено(Документ.Автомобиль) Тогда
			ОбластьАвтомобиль = Макет.ПолучитьОбласть("Автомобиль");
			ОбластьАвтомобиль.Параметры.ПредставлениеАвтомобиля = СокрЛП(Документ.Автомобиль.Наименование);
			ТабличныйДокумент.Вывести(ОбластьАвтомобиль);
		КонецЕсли;
		
		ОбластьДокументОснование = Макет.ПолучитьОбласть("ДокументОснование");
		ОбластьДокументОснование.Параметры.ДокументОснование = СокрЛП(Документ.ДокументОснование);
		ТабличныйДокумент.Вывести(ОбластьДокументОснование);
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		ТекстЗаголовка = "Акт об оказании услуг №  "+НомерДляПечати+" от "+Формат(Документ.Дата, "ДФ=дд.ММ.гггг");
			
		// Заполним параметры шапки таблицы для следующего листа.
		ОбластьШапка.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапка.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
		
		// Вывод табличной части работ.
		Ном	= 0;
		СтруктураИтоговПоСтранице = Новый Структура("СуммаВсего, СуммаНДС, СуммаСкидки", 0, 0, 0);
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
		
		ВыборкаТабличнойЧасти = ТаблицаАвторабот;
		Для Каждого СтрокаТабличнойЧасти Из ВыборкаТабличнойЧасти Цикл
			Если СтрокаТабличнойЧасти.Количество=0 Тогда
				Продолжить;
			КонецЕсли; 
			ОбластьСтрока.Параметры.НомерСтроки = СтрокаТабличнойЧасти.НомерСтроки;
			ОбластьСтрока.Параметры.Работа = 
				УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТабличнойЧасти.Авторабота);
			ОбластьСтрока.Параметры.Количество = Формат(СтрокаТабличнойЧасти.Количество, ФорматВыводаКоличества);
			ОбластьСтрока.Параметры.Коэффициент = Формат(СтрокаТабличнойЧасти.Коэффициент, "ЧЦ=10; ЧДЦ=3");
			ОбластьСтрока.Параметры.Нормочас = СтрокаТабличнойЧасти.Нормочас;
			ОбластьСтрока.Параметры.Цена = Формат(СтрокаТабличнойЧасти.Цена, ФорматВыводаСуммы);
			Если ЕстьСкидка Тогда
				ОбластьСтрока.Параметры.СуммаСкидки = Формат(СтрокаТабличнойЧасти.СуммаСкидки, ФорматВыводаСуммы);
			КонецЕсли;
			ОбластьСтрока.Параметры.СуммаВсего = Формат(СтрокаТабличнойЧасти.СуммаВсего, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СуммаНДС = Формат(СтрокаТабличнойЧасти.СуммаНДС, ФорматВыводаСуммы);
				
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапка, ОбластьИтогПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ);
				
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура("СуммаВсего, СуммаНДС, СуммаСкидки", 0, 0, 0);
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапка.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// Обновим итоги по странице.
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТабличнойЧасти, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// Выведем последний итог по странице, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогПоСтранице,
				СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("СуммаВсего");
		СуммаНДС   = ВыборкаТабличнойЧасти.Итог("СуммаНДС");
		
		ОбластьИтого = Макет.ПолучитьОбласть("Итого");
		Если ЕстьСкидка Тогда
			ОбластьИтого.Параметры.СуммаСкидки = Формат(ВыборкаТабличнойЧасти.Итог("СуммаСкидки"), "ЧДЦ=2; ЧРГ=' '; ЧН=0,00");
		КонецЕсли;
		
		ОбластьИтого.Параметры.СуммаВсего = Формат(СуммаВсего, "ЧДЦ=2; ЧРГ=' '; ЧН=0,00");
		ОбластьИтого.Параметры.СуммаНДС   = Формат(СуммаНДС, "ЧДЦ=2; ЧРГ=' '; ЧН=0,00");
		ТабличныйДокумент.Вывести(ОбластьИтого);
		
		ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = СтрШаблон(
			НСтр("ru = 'Всего услуг %1 на сумму %2 %3 (в т.ч. НДС %4 %5)'"),
			ВыборкаТабличнойЧасти.Количество(),
			Формат(СуммаВсего, "ЧДЦ=2; ЧРГ=' '; ЧН=0,00"),
			ВалютаПечатногоДокумента,
			Формат(СуммаНДС, "ЧДЦ=2; ЧРГ=' '; ЧН=0,00"),
			ВалютаПечатногоДокумента);
		ОбластьСуммаПрописью.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего,
			ВалютаПечатногоДокумента);
		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
		
		ОбластьПодписи.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"Отпустил"));
		ОбластьПодписи.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,
			"ПолучилКонтрагент", "Получил"));
		ТабличныйДокумент.Вывести(ОбластьПодписи);
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьАктОбОказанииУслуг()

Функция ПересчитатьТаблицуНаОснованииВзаиморасчетов(
		Документ,
		ТаблицаРабот,
		ТаблицаТоваров,
		РаспределениеСумм,
		ВалютаПечатногоДокумента)
	
	ПересчитаныСуммы = Ложь;
	
	ВалютаРегл = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаУпр = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	Если Не (ВалютаПечатногоДокумента = ВалютаРегл
			ИЛИ ВалютаПечатногоДокумента = ВалютаУпр) Тогда
		
		Возврат ПересчитаныСуммы;
		
	КонецЕсли;
	
	ТаблицаВзаиморасчетов =
		РасчетыСКонтрагентамиСервер.РасчетыСКонтрагентамиПоДокументу(Документ, Истина);
		
	Если ТаблицаВзаиморасчетов.Количество() > 0 Тогда
		ТаблицаДляПересчета = ТаблицаРабот.Скопировать(, "НомерСтроки,СтавкаНДС,СуммаСкидки,Сумма,СуммаНДС,СуммаВсего");
		ТаблицаДляПересчета.Колонки.Добавить("ЭтоРабота", Новый ОписаниеТипов("Булево"));
		Для Каждого ТекущаяСтрока Из ТаблицаДляПересчета Цикл
			ТекущаяСтрока.ЭтоРабота = Истина;
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаТоваров, ТаблицаДляПересчета);
		
		РаспределениеСумм = ТаблицаДляПересчета.Скопировать();
		СуммыТоваров = РаспределениеСумм.ВыгрузитьКолонку("СуммаВсего");
		РаспределениеСумм.ЗагрузитьКолонку(СуммыТоваров, "Сумма");
		СведенияОВалюте = Новый Структура();
		СведенияОВалюте.Вставить("ВалютаДоговора", Неопределено);
		СведенияОВалюте.Вставить("ВалютаРегл", ВалютаРегл);
		СведенияОВалюте.Вставить("ВалютаУпр", ВалютаУпр);
		СведенияОВалюте.Вставить("КурсРегл", Документ.Дата);
		СведенияОВалюте.Вставить("КурсУпр", Документ.Дата);
		
		ПересчитаныСуммы = ОбработкаСобытийДокументаСервер.ПересчитанаВВалюту(
			Документ,
			РаспределениеСумм,
			ТаблицаВзаиморасчетов,
			СведенияОВалюте);
			
	КонецЕсли;
	
	Возврат ПересчитаныСуммы;
	
КонецФункции

Процедура ДополнитьПараметрыПересчетаДанных(ДокументОбъектСтруктура,
		ПересчитатьПоРасчетамСКонтрагентами,
		РаспределениеСумм,
		ДляАвторабот = Истина)
	
	Если Не ПересчитатьПоРасчетамСКонтрагентами Тогда
		Возврат;
	КонецЕсли;
	
	РаспределениеСуммАвторабот = РаспределениеСумм.Скопировать();
	УсловиеОтбора = Новый Структура("ЭтоРабота", Не ДляАвторабот);
	СтрокиРаспределения = РаспределениеСуммАвторабот.НайтиСтроки(УсловиеОтбора);
	Для Каждого ТекущаяСтрока Из СтрокиРаспределения Цикл
		РаспределениеСуммАвторабот.Удалить(ТекущаяСтрока);
	КонецЦикла;
	ДокументОбъектСтруктура.Вставить("РаспределениеСумм", РаспределениеСуммАвторабот);
	
КонецПроцедуры

#КонецОбласти

// Проверяет возможность ввода счет-фактуры выданной на основании документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.АктРазногласий - документ, для которого выполняется действие.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина, если ввод возможен, Ложь - в противном случае.
//
Функция ВозможенВводСчетФактурыВыданной(ДокументОбъект, ДополнительныеПарметры = Неопределено) Экспорт
	
	СистемаНО = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.СистемаНалогообложения,
		ДокументОбъект.Организация,
	);  
	
	НалогообложениеУСН = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.НалогообложениеНДСПриУСН,
		ДокументОбъект.Организация,
	);
	
	Если СистемаНО = Перечисления.СистемыНалогообложения.Упрощенная И НЕ РаботаСоСтавкамиНДССервер.УСНПлательщикНДС(НалогообложениеУСН) Тогда
        Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбработкаСобытийДокументаСервер.ДокументСодержитСтрокиСНДС(ДокументОбъект, "Товары, Автоработы");
	
КонецФункции

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговора",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов"));
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаДоговора", ДополнительныеПараметры.ДляПроведения.ВалютаДоговора);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	АктРазногласий.Организация КАК Организация,
	|	АктРазногласий.Ссылка КАК Ссылка,
	|	АктРазногласий.Дата КАК Дата,
	|	АктРазногласий.ХозОперация КАК ХозОперация,
	|	АктРазногласий.ДокументОснование КАК ДокументОснование,
	|	АктРазногласий.Контрагент КАК Контрагент,
	|	АктРазногласий.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	АктРазногласий.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	АктРазногласий.ДокументОснование КАК Сделка,
	|	АктРазногласий.СуммаДокумента КАК Сумма,
	|	АктРазногласий.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	АктРазногласий.ВалютаДокумента КАК ВалютаДокумента,
	|	АктРазногласий.КурсДокумента КАК КурсДокумента,
	|	АктРазногласий.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.НеЗачитывать) КАК СпособЗачетаАвансов,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.АктРазногласий КАК АктРазногласий
	|ГДЕ
	|	АктРазногласий.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(АктРазногласийТовары.СуммаВсегоРазница), 0) КАК СуммаКорректировки,
	|	АктРазногласийТовары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СуммаРазницыКорректировки
	|ИЗ
	|	Документ.АктРазногласий.Товары КАК АктРазногласийТовары
	|ГДЕ
	|	АктРазногласийТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	АктРазногласийТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(АктРазногласийАвтоработы.СуммаВсегоРазница), 0),
	|	АктРазногласийАвтоработы.Ссылка
	|ИЗ
	|	Документ.АктРазногласий.Автоработы КАК АктРазногласийАвтоработы
	|
	|СГРУППИРОВАТЬ ПО
	|	АктРазногласийАвтоработы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(СуммаРазницыКорректировки.СуммаКорректировки) КАК СуммаКорректировки,
	|	СуммаРазницыКорректировки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СуммаРазницыКорректировкиИтог
	|ИЗ
	|	СуммаРазницыКорректировки КАК СуммаРазницыКорректировки
	|ГДЕ
	|	СуммаРазницыКорректировки.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СуммаРазницыКорректировки.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр, &ВалютаДоговора)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ХозОперация КАК ХозОперация,
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДоговора КАК ВалютаДоговора,
	|	ДанныеДокумента.Сделка КАК Сделка,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыВзаиморасчетов = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютВзаиморасчетов.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетов.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыВзаиморасчетов
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл,
	|	ЕСТЬNULL(СуммаРазницыКорректировкиИтог.СуммаКорректировки, 0) КАК СуммаКорректировки
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютВзаиморасчетов
	|		ПО ДанныеДокумента.ВалютаДоговора = КурсыВалютВзаиморасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммаРазницыКорректировкиИтог КАК СуммаРазницыКорректировкиИтог
	|		ПО ДанныеДокумента.Ссылка = СуммаРазницыКорректировкиИтог.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.ДокументОснование КАК ДокументОснование,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Задолженность.ВалютаДоговора КАК ВалютаДоговора,
	|	Задолженность.Сделка КАК Сделка,
	|	ВЫБОР
	|		КОГДА Задолженность.СуммаКорректировки < 0
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * Задолженность.СуммаКорректировки КАК Сумма,
	|	Задолженность.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр,
	|	Задолженность.СуммаКорректировки > 0 КАК УвеличениеДолга
	|ИЗ
	|	Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)";
	
	ДанныеОбОплате = Запрос.Выполнить().Выбрать();
	
	Если Не ДанныеОбОплате.Следующий()
		Или ДанныеОбОплате.Сумма = 0 Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	Если ДанныеОбОплате.УвеличениеДолга Тогда
		
		РасчетыСКонтрагентамиСервер.ДобавитьЗаписьРасчетаКонтрагентов(
			ДанныеОбОплате,
			РасчетыСКонтрагентами,
			ДанныеОбОплате.Сумма,
			ВидДвиженияНакопления.Приход,
			Перечисления.ВидыОперацийВзаиморасчетов.НачислениеДебиторскойЗадолженности,
			ДанныеОбОплате.Сделка,,
			Истина);
		
	Иначе
		
		РасчетыСКонтрагентамиСервер.ЗачестьОплатуПоСделке(
			РасчетыСКонтрагентами,
			ДанныеОбОплате,,
			Истина);
		
		УсловиеПоиска = Новый Структура();
		УсловиеПоиска.Вставить("ДокументРасчетов", ДанныеОбОплате.Сделка);
		УсловиеПоиска.Вставить("ВидДвижения", ВидДвиженияНакопления.Расход);
		
		НайденныеСтроки = РасчетыСКонтрагентами.НайтиСтроки(УсловиеПоиска);
		
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			
			ТекущаяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
			ТекущаяСтрока.Сумма = - ТекущаяСтрока.Сумма;
			ТекущаяСтрока.СуммаУпр = - ТекущаяСтрока.СуммаУпр;
			ТекущаяСтрока.СуммаБаз = - ТекущаяСтрока.СуммаБаз;
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

