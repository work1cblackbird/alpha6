// Модуль объекта документа "Акт разногласий"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает выборку по шапке
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктРазногласий
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - Шапка документа.
//
Функция ПолучитьШапкуДокумента(ДокументСсылка) Экспорт
	Запрос=Новый Запрос(
		"ВЫБРАТЬ
		|	Док.Ссылка КАК Ссылка,
		|	Док.Дата КАК Дата,
		|	Док.ВалютаДокумента КАК ВалютаДокумента,
		|	Док.КурсДокумента КАК КурсДокумента,
		|	Док.ТипЦен КАК ТипЦен,
		|	Док.ТипЦенРабот КАК ТипЦенРабот,
		|	Док.ХозОперация КАК ХозОперация,
		|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
		|	Док.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
		|	Док.МоментВремени КАК МоментВремени,
		|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
		/////////// ПРИВАТ ////////////
		|	Док.ДокументОснование КАК ЗаказНаряд,
		|	Док.ВидРемонта КАК ВидРемонта,
		|	Док.Автомобиль КАК Автомобиль,
		|	Док.Контрагент КАК Контрагент,
		|	Док.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	Док.СуммаНоменклатурыДокумента КАК СуммаНоменклатурыДокумента,
		|	Док.СуммаРаботДокумента КАК СуммаРаботДокумента,
		|	&СуммаРазногласий КАК СуммаДокумента,
		|	Док.ДокументОснование КАК ДокументОснование
		|
		|ИЗ
		|	Документ."+Метаданные().Имя+" КАК Док
		|ГДЕ
		|	Док.Ссылка=&Ссылка"
	);
	Запрос.УстановитьПараметр("Ссылка"          , ДокументСсылка);
	Запрос.УстановитьПараметр("СуммаРазногласий", Товары.Итог("СуммаВсегоРазница")+Автоработы.Итог("СуммаВсегоРазница"));
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий(); 
	Возврат Выборка;
	
КонецФункции

// Формирует движения документа по партионным регистрам
//
// Параметры:
// 	Режим - РежимПроведенияДокумента - режим проведения (оперативный/неоперативный)
// 	ДокументСсылка - ДокументСсылка.АктРазногласий - ссылка на документ который надо допровести по партиям.
// 	СуммаРазногласий - Число - Сумма разногласий.
//
// Возвращаемое значение:
//	Булево - Возвращает Истина - все нормально, ложь - чего-то не так
//
Функция ПровестиПоПартиям(Режим, ДокументСсылка, СуммаРазногласий) Экспорт
	Отказ=Ложь;
	
	// Получим шапку документа
	ШапкаДокумента = ПолучитьШапкуДокумента(ДокументСсылка);
	
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
	
	НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
	НаборЗаписейДоходыИРасходы.ДокументОбъект = ЭтотОбъект;
	Если ВедетсяБалансПоПодразделению Тогда
		НаборЗаписейДоходыИРасходы.Подразделение = ДоговорВзаиморасчетов.ПодразделениеКомпании;
	КонецЕсли;
	НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
	НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьНеоприходованныхПартий;
	НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Ложь;
	НаборЗаписейДоходыИРасходы.Доход                  = СуммаРазногласий;
	НаборЗаписейДоходыИРасходы.Приход();
	
	// Проверим, если подразделение проводиться по партиям "отложенно", то дальше не идем
	НаборЗаписейДопроведениеПоПартиям=Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
		Возврат НЕ Отказ;
	КонецЕсли;

	ВалютаРегл     = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл, МоментВремени());
	КурсРегл       = СтруктураКурса.Курс/?(СтруктураКурса.Кратность=0,1,СтруктураКурса.Кратность);
	ВалютаУпр      = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ПартияТоваровОтрицательныхОстатков             = Константы.ПартияТоваровОтрицательныхОстатков.Получить();
	ПартияТоваровОтрицательныхОстатковСтатусПартии = ?(ПартияТоваровОтрицательныхОстатков.ХозОперация=Справочники.ХозОперации.ПоступлениеТоваровКомиссия,Перечисления.СтатусыПартий.ТоварПринятыйКомиссия,Перечисления.СтатусыПартий.ТоварКупленный);
	ПартияТоваровОтрицательныхОстатковКонтрагент   = ПартияТоваровОтрицательныхОстатков.Контрагент;
	
	НаборЗаписейПродажи = Движения.Продажи;
	
	// Проведем приход/сторнирование деталей по регистру продаж.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Продажи.ПодразделениеКомпании,
	|	Продажи.Номенклатура,
	|	Продажи.ДокументПродажи,
	|	Продажи.Поставщик,
	|	Продажи.Покупатель,
	|	Продажи.СтатусПартии,
	|	Продажи.ХозОперация,
	|	Продажи.ДоговорВзаиморасчетов,
	|	Продажи.ХарактеристикаНоменклатуры,
	|	Продажи.СкладКомпании,
	|	Продажи.Авторабота,
	|	Продажи.СтавкаНДС,
	|	Продажи.Партия,
	|	Продажи.ГТД,
	|	Продажи.Количество,
	|	Продажи.Сумма,
	|	Продажи.СуммаНДС,
	|	Продажи.СуммаНДСУпр,
	|	Продажи.СуммаСкидки,
	|	Продажи.СуммаСкидкиУпр,
	|	Продажи.СуммаУпр,
	|	Продажи.СебестоимостьУпр,
	|	Продажи.Себестоимость,
	|	Продажи.СуммаНДСВходящий
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Регистратор = &ЗаказНаряд
	|	И Продажи.Авторабота = &АвтоработаПустая
	|
	|УПОРЯДОЧИТЬ ПО
	|	Продажи.НомерСтроки";
	Запрос.УстановитьПараметр("ЗаказНаряд"       , ДокументОснование);
	Запрос.УстановитьПараметр("АвтоработаПустая" , Справочники.Автоработы.ПустаяСсылка());
	тзПродажи = Запрос.Выполнить().Выгрузить();
	
	СписокСтавокНДС  = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Товары.ВыгрузитьКолонку("СтавкаНДС"));
	СтавкиНДС        = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокСтавокНДС, "Ставка");
	
	Для каждого СтрокаТЧ Из Товары Цикл
		Количество     = СтрокаТЧ.КоличествоРазница;
		СуммаРегл      = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТЧ.СуммаВсегоРазница,ВалютаДокумента,КурсДокумента,ВалютаРегл,КурсРегл);
		СуммаУпр       = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТЧ.СуммаВсегоРазница,ВалютаДокумента,КурсДокумента,ВалютаУпр,КурсВалютыУпр);
		СуммаНДС       = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТЧ.СуммаНДСРазница,ВалютаДокумента,КурсДокумента,ВалютаРегл,КурсРегл);
		СуммаНДСУпр    = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТЧ.СуммаНДСРазница,ВалютаДокумента,КурсДокумента,ВалютаУпр,КурсВалютыУпр);
		СуммаСкидки    = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТЧ.СуммаСкидкиРазница,ВалютаДокумента,КурсДокумента,ВалютаРегл,КурсРегл);
		СуммаСкидкиУпр = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТЧ.СуммаСкидкиРазница,ВалютаДокумента,КурсДокумента,ВалютаУпр,КурсВалютыУпр);
		
		Если Количество=0 И СуммаРегл=0 И СуммаУпр=0 И СуммаНДС=0 И СуммаСкидки=0 Тогда
			Продолжить;
		КонецЕсли; 
		
		СтавкаНДС = СтавкиНДС.Получить(СтрокаТЧ.СтавкаНДС);
		
		Если Количество >= 0 Тогда
			// Если количество деталей увеличено - приход по партии отрицательных остатков
			НоваяЗаписьПродажи=НаборЗаписейПродажи.Добавить();
			НоваяЗаписьПродажи.Период=ШапкаДокумента.Дата;
			НоваяЗаписьПродажи.Регистратор=ШапкаДокумента.Ссылка;
			НоваяЗаписьПродажи.ПодразделениеКомпании=ШапкаДокумента.ПодразделениеКомпании;
			НоваяЗаписьПродажи.Номенклатура=СтрокаТЧ.Номенклатура;
			
			// НоваяЗаписьПродажи.ДокументПродажи=?(Количество=0,ШапкаДокумента.ЗаказНаряд,ШапкаДокумента.Ссылка);
			НоваяЗаписьПродажи.ДокументПродажи=ШапкаДокумента.ЗаказНаряд;
			НоваяЗаписьПродажи.Поставщик=ПартияТоваровОтрицательныхОстатковКонтрагент;
			НоваяЗаписьПродажи.Покупатель=ШапкаДокумента.Контрагент;
			НоваяЗаписьПродажи.СтатусПартии=ПартияТоваровОтрицательныхОстатковСтатусПартии;
			НоваяЗаписьПродажи.ХозОперация=ШапкаДокумента.ХозОперация;
			НоваяЗаписьПродажи.ДоговорВзаиморасчетов=ШапкаДокумента.ДоговорВзаиморасчетов;
			НоваяЗаписьПродажи.ХарактеристикаНоменклатуры=СтрокаТЧ.ХарактеристикаНоменклатуры;
			НоваяЗаписьПродажи.СкладКомпании=ДокументОснование.Цех;
			НоваяЗаписьПродажи.СтавкаНДС=СтрокаТЧ.СтавкаНДС;
			НоваяЗаписьПродажи.Партия=ПартияТоваровОтрицательныхОстатков;
			НоваяЗаписьПродажи.Количество=Количество;
			НоваяЗаписьПродажи.Сумма=СуммаРегл;
			НоваяЗаписьПродажи.СуммаНДС=СуммаНДС;
			НоваяЗаписьПродажи.СуммаСкидки=СуммаСкидки;
			НоваяЗаписьПродажи.СуммаУпр=СуммаУпр;
			НоваяЗаписьПродажи.СебестоимостьУпр=0;
			НоваяЗаписьПродажи.Себестоимость=0;
			НоваяЗаписьПродажи.СуммаНДСВходящий=0;
			НоваяЗаписьПродажи.СебестоимостьБезНДС=0;
			НоваяЗаписьПродажи.СебестоимостьБезНДСУпр=0;
			НоваяЗаписьПродажи.ВыручкаБезНДС                      = НоваяЗаписьПродажи.Сумма - НоваяЗаписьПродажи.СуммаНДС;
			НоваяЗаписьПродажи.ВыручкаДоПримененияСкидкиБезНДС    = НоваяЗаписьПродажи.Сумма + НоваяЗаписьПродажи.СуммаСкидки - НоваяЗаписьПродажи.СуммаНДС - Окр(НоваяЗаписьПродажи.СуммаСкидки * СтавкаНДС / (100 + СтавкаНДС), 2);
			НоваяЗаписьПродажи.ВыручкаДоПримененияСкидки          = НоваяЗаписьПродажи.Сумма + НоваяЗаписьПродажи.СуммаСкидки;
			НоваяЗаписьПродажи.СуммаНДСУпр                        = СуммаНДСУпр;
			НоваяЗаписьПродажи.СуммаСкидкиУпр                     = СуммаСкидкиУпр;
			НоваяЗаписьПродажи.ВыручкаБезНДСУпр                   = НоваяЗаписьПродажи.СуммаУпр - НоваяЗаписьПродажи.СуммаНДСУпр;
			НоваяЗаписьПродажи.ВыручкаДоПримененияСкидкиБезНДСУпр = НоваяЗаписьПродажи.СуммаУпр + НоваяЗаписьПродажи.СуммаСкидкиУпр - НоваяЗаписьПродажи.СуммаНДСУпр - Окр(НоваяЗаписьПродажи.СуммаСкидкиУпр * СтавкаНДС / (100 + СтавкаНДС), 2);
			НоваяЗаписьПродажи.ВыручкаДоПримененияСкидкиУпр       = НоваяЗаписьПродажи.СуммаУпр + НоваяЗаписьПродажи.СуммаСкидкиУпр;
		Иначе
			// При уменьшении количества деталей - сторнируем те продажи, 
			// которые были проведены заказ-нарядом.
			Количество=-Количество;
			СуммаРегл=-СуммаРегл;
			СуммаУпр=-СуммаУпр;
			СуммаНДС=-СуммаНДС;
			СуммаСкидки=-СуммаСкидки;
			СуммаНДСУпр=-СуммаНДСУпр;
			СуммаСкидкиУпр=-СуммаСкидкиУпр;
			СтрокиПродаж=тзПродажи.НайтиСтроки(Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,СтавкаНДС",СтрокаТЧ.Номенклатура,СтрокаТЧ.ХарактеристикаНоменклатуры,СтрокаТЧ.СтавкаНДСПоЗаказНаряду));
			НоваяЗаписьПродажи=Неопределено;
			Для каждого СтрокаПродаж Из СтрокиПродаж Цикл
				Если Количество<=0 Тогда Прервать; КонецЕсли;
				НоваяЗаписьПродажи=НаборЗаписейПродажи.Добавить();
				НоваяЗаписьПродажи.Период=ШапкаДокумента.Дата;
				НоваяЗаписьПродажи.Регистратор=ШапкаДокумента.Ссылка;
				НоваяЗаписьПродажи.ПодразделениеКомпании=СтрокаПродаж.ПодразделениеКомпании;
				НоваяЗаписьПродажи.Номенклатура=СтрокаПродаж.Номенклатура;
				НоваяЗаписьПродажи.ДокументПродажи=СтрокаПродаж.ДокументПродажи;
				НоваяЗаписьПродажи.Поставщик=СтрокаПродаж.Поставщик;
				НоваяЗаписьПродажи.Покупатель=СтрокаПродаж.Покупатель;
				НоваяЗаписьПродажи.СтатусПартии=СтрокаПродаж.СтатусПартии;
				НоваяЗаписьПродажи.ХозОперация=ШапкаДокумента.ХозОперация;
				НоваяЗаписьПродажи.ДоговорВзаиморасчетов=СтрокаПродаж.ДоговорВзаиморасчетов;
				НоваяЗаписьПродажи.ХарактеристикаНоменклатуры=СтрокаПродаж.ХарактеристикаНоменклатуры;
				НоваяЗаписьПродажи.СкладКомпании=СтрокаПродаж.СкладКомпании;
				НоваяЗаписьПродажи.СтавкаНДС=СтрокаПродаж.СтавкаНДС;
				НоваяЗаписьПродажи.Партия=СтрокаПродаж.Партия;
				НоваяЗаписьПродажи.ГТД=СтрокаПродаж.ГТД;
				НоваяЗаписьПродажи.Количество=-Мин(СтрокаПродаж.Количество,Количество);
				НоваяЗаписьПродажи.Сумма=-Мин(СтрокаПродаж.Сумма,СуммаРегл);
				НоваяЗаписьПродажи.СуммаНДС=-Мин(СтрокаПродаж.СуммаНДС,СуммаНДС);
				НоваяЗаписьПродажи.СуммаСкидки=-Мин(СтрокаПродаж.СуммаСкидки,СуммаСкидки);
				НоваяЗаписьПродажи.СуммаУпр=-Мин(СтрокаПродаж.СуммаУпр,СуммаУпр);
				НоваяЗаписьПродажи.ВыручкаБезНДС                      = НоваяЗаписьПродажи.Сумма - НоваяЗаписьПродажи.СуммаНДС;
				НоваяЗаписьПродажи.ВыручкаДоПримененияСкидкиБезНДС    = НоваяЗаписьПродажи.Сумма + НоваяЗаписьПродажи.СуммаСкидки - НоваяЗаписьПродажи.СуммаНДС - Окр(НоваяЗаписьПродажи.СуммаСкидки * СтрокаПродаж.СтавкаНДС.Ставка / (100 + СтрокаПродаж.СтавкаНДС.Ставка), 2);
				НоваяЗаписьПродажи.ВыручкаДоПримененияСкидки          = НоваяЗаписьПродажи.Сумма + НоваяЗаписьПродажи.СуммаСкидки;
				НоваяЗаписьПродажи.СуммаНДСУпр                        = -Мин(СтрокаПродаж.СуммаНДСУпр,СуммаНДСУпр);
				НоваяЗаписьПродажи.СуммаСкидкиУпр                     = -Мин(СтрокаПродаж.СуммаСкидкиУпр,СуммаСкидкиУпр);
				НоваяЗаписьПродажи.ВыручкаБезНДСУпр                   = НоваяЗаписьПродажи.СуммаУпр - НоваяЗаписьПродажи.СуммаНДСУпр;
				НоваяЗаписьПродажи.ВыручкаДоПримененияСкидкиБезНДСУпр = НоваяЗаписьПродажи.СуммаУпр + НоваяЗаписьПродажи.СуммаСкидкиУпр - НоваяЗаписьПродажи.СуммаНДСУпр - Окр(НоваяЗаписьПродажи.СуммаСкидкиУпр * СтрокаПродаж.СтавкаНДС.Ставка / (100 + СтрокаПродаж.СтавкаНДС.Ставка), 2);
				НоваяЗаписьПродажи.ВыручкаДоПримененияСкидкиУпр       = НоваяЗаписьПродажи.СуммаУпр + НоваяЗаписьПродажи.СуммаСкидкиУпр;
				
				Количество=Количество-(-НоваяЗаписьПродажи.Количество);
				СуммаРегл=СуммаРегл-(-НоваяЗаписьПродажи.Сумма);
				СуммаУпр=СуммаУпр-(-НоваяЗаписьПродажи.СуммаУпр);
				СуммаНДС=СуммаНДС-(-НоваяЗаписьПродажи.СуммаНДС);
				СуммаСкидки=СуммаСкидки-(-НоваяЗаписьПродажи.СуммаСкидки);
				СуммаНДСУпр=СуммаНДСУпр-(-НоваяЗаписьПродажи.СуммаНДСУпр);
				СуммаСкидкиУпр=СуммаСкидкиУпр-(-НоваяЗаписьПродажи.СуммаСкидкиУпр);
			КонецЦикла; 
			Количество=Окр(Количество,3);
			СуммаРегл=Окр(СуммаРегл,2);
			СуммаУпр=Окр(СуммаУпр,2);
			СуммаНДС=Окр(СуммаНДС,2);
			СуммаСкидки=Окр(СуммаСкидки,2);
			СуммаНДСУпр=Окр(СуммаНДСУпр,2);
			СуммаСкидкиУпр=Окр(СуммаСкидкиУпр,2);
			Если Количество<>0 ИЛИ СуммаРегл<>0 ИЛИ СуммаУпр<>0 ИЛИ СуммаНДС<>0 ИЛИ СуммаСкидки<>0 ИЛИ СуммаНДСУпр <> 0 ИЛИ СуммаСкидкиУпр <> 0 Тогда
				// Если после сторнирования еще что-то осталось - сторно на последнюю партию или партию отрицательных остатков.
				НоваяЗаписьПродажиПревышение=НаборЗаписейПродажи.Добавить();
				Если НоваяЗаписьПродажи=Неопределено Тогда
					НоваяЗаписьПродажиПревышение.Поставщик=ПартияТоваровОтрицательныхОстатковКонтрагент;
					НоваяЗаписьПродажиПревышение.Партия=ПартияТоваровОтрицательныхОстатков;
					НоваяЗаписьПродажиПревышение.СтатусПартии=ПартияТоваровОтрицательныхОстатковСтатусПартии;
					НоваяЗаписьПродажиПревышение.СкладКомпании=ДокументОснование.Цех;
				Иначе
					НоваяЗаписьПродажиПревышение.Поставщик=НоваяЗаписьПродажи.Поставщик;
					НоваяЗаписьПродажиПревышение.Партия=НоваяЗаписьПродажи.Партия;
					НоваяЗаписьПродажиПревышение.СтатусПартии=НоваяЗаписьПродажи.СтатусПартии;
					НоваяЗаписьПродажиПревышение.СкладКомпании=НоваяЗаписьПродажи.СкладКомпании;
				КонецЕсли; 
				НоваяЗаписьПродажиПревышение.Период=ШапкаДокумента.Дата;
				НоваяЗаписьПродажиПревышение.Регистратор=ШапкаДокумента.Ссылка;
				НоваяЗаписьПродажиПревышение.ПодразделениеКомпании=ШапкаДокумента.ПодразделениеКомпании;
				НоваяЗаписьПродажиПревышение.Номенклатура=СтрокаТЧ.Номенклатура;
				// НоваяЗаписьПродажиПревышение.ДокументПродажи=ШапкаДокумента.Ссылка;
				НоваяЗаписьПродажиПревышение.ДокументПродажи=ШапкаДокумента.ЗаказНаряд;
				НоваяЗаписьПродажиПревышение.Покупатель=ШапкаДокумента.Контрагент;
				НоваяЗаписьПродажиПревышение.ХозОперация=ШапкаДокумента.ХозОперация;
				НоваяЗаписьПродажиПревышение.ДоговорВзаиморасчетов=ШапкаДокумента.ДоговорВзаиморасчетов;
				НоваяЗаписьПродажиПревышение.ХарактеристикаНоменклатуры=СтрокаТЧ.ХарактеристикаНоменклатуры;
				НоваяЗаписьПродажиПревышение.СтавкаНДС=СтрокаТЧ.СтавкаНДС;
				НоваяЗаписьПродажиПревышение.Количество=-Количество;
				НоваяЗаписьПродажиПревышение.Сумма=-СуммаРегл;
				НоваяЗаписьПродажиПревышение.СуммаНДС=-СуммаНДС;
				НоваяЗаписьПродажиПревышение.СуммаСкидки=-СуммаСкидки;
				НоваяЗаписьПродажиПревышение.СуммаУпр=-СуммаУпр;
				НоваяЗаписьПродажиПревышение.СебестоимостьУпр=0;
				НоваяЗаписьПродажиПревышение.Себестоимость=0;
				НоваяЗаписьПродажиПревышение.СуммаНДСВходящий=0;
				НоваяЗаписьПродажиПревышение.СебестоимостьБезНДС=0;
				НоваяЗаписьПродажиПревышение.СебестоимостьБезНДСУпр=0;
				НоваяЗаписьПродажиПревышение.ВыручкаБезНДС                      = НоваяЗаписьПродажиПревышение.Сумма - НоваяЗаписьПродажиПревышение.СуммаНДС;
				НоваяЗаписьПродажиПревышение.ВыручкаДоПримененияСкидкиБезНДС    = НоваяЗаписьПродажиПревышение.Сумма + НоваяЗаписьПродажиПревышение.СуммаСкидки - НоваяЗаписьПродажиПревышение.СуммаНДС - Окр(НоваяЗаписьПродажиПревышение.СуммаСкидки * СтавкаНДС / (100 + СтавкаНДС), 2);
				НоваяЗаписьПродажиПревышение.ВыручкаДоПримененияСкидки          = НоваяЗаписьПродажиПревышение.Сумма + НоваяЗаписьПродажиПревышение.СуммаСкидки;
				НоваяЗаписьПродажиПревышение.СуммаНДСУпр                        = -СуммаНДСУпр;
				НоваяЗаписьПродажиПревышение.СуммаСкидкиУпр                     = -СуммаСкидкиУпр;
				НоваяЗаписьПродажиПревышение.ВыручкаБезНДСУпр                   = НоваяЗаписьПродажиПревышение.СуммаУпр - НоваяЗаписьПродажиПревышение.СуммаНДСУпр;
				НоваяЗаписьПродажиПревышение.ВыручкаДоПримененияСкидкиБезНДСУпр = НоваяЗаписьПродажиПревышение.СуммаУпр + НоваяЗаписьПродажиПревышение.СуммаСкидкиУпр - НоваяЗаписьПродажиПревышение.СуммаНДСУпр - Окр(НоваяЗаписьПродажиПревышение.СуммаСкидкиУпр * СтавкаНДС / (100 + СтавкаНДС), 2);
				НоваяЗаписьПродажиПревышение.ВыручкаДоПримененияСкидкиУпр       = НоваяЗаписьПродажиПревышение.СуммаУпр + НоваяЗаписьПродажиПревышение.СуммаСкидкиУпр;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	// Проведем приход/сторнирование авторабот по регистру продаж.
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	Продажи.ПодразделениеКомпании,
	             |	Продажи.Номенклатура,
	             |	Продажи.ДокументПродажи,
	             |	Продажи.Поставщик,
	             |	Продажи.Покупатель,
	             |	Продажи.СтатусПартии,
	             |	Продажи.ХозОперация,
	             |	Продажи.ДоговорВзаиморасчетов,
	             |	Продажи.ХарактеристикаНоменклатуры,
	             |	Продажи.СкладКомпании,
	             |	Продажи.Авторабота,
	             |	Продажи.СтавкаНДС,
	             |	Продажи.Партия,
	             |	Продажи.ГТД,
	             |	Продажи.Количество,
	             |	Продажи.КоличествоНормочасов,
	             |	Продажи.Сумма,
	             |	Продажи.СуммаНДС,
	             |	Продажи.СуммаНДСУпр,
	             |	Продажи.СуммаСкидки,
	             |	Продажи.СуммаСкидкиУпр,
	             |	Продажи.СуммаУпр,
	             |	Продажи.СебестоимостьУпр,
	             |	Продажи.Себестоимость,
	             |	Продажи.СуммаНДСВходящий
	             |ИЗ
	             |	РегистрНакопления.Продажи КАК Продажи
	             |ГДЕ
	             |	Продажи.Регистратор = &ЗаказНаряд
	             |	И Продажи.Номенклатура = &НоменклатураАвторабота
	             |	И Продажи.Авторабота <> &АвтоработаПустая
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Продажи.НомерСтроки";
	Запрос.УстановитьПараметр("ЗаказНаряд"             , ДокументОснование);
	Запрос.УстановитьПараметр("НоменклатураАвторабота" , Справочники.Номенклатура.Авторабота);
	Запрос.УстановитьПараметр("АвтоработаПустая"       , Справочники.Автоработы.ПустаяСсылка());
	тзПродажи = Запрос.Выполнить().Выгрузить();
	
	НормочасРубль = Справочники.Нормочасы.Рубль;
	
	СписокСтавокНДС  = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Автоработы.ВыгрузитьКолонку("СтавкаНДС"));
	СтавкиНДС        = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокСтавокНДС, "Ставка");
	
	Для Каждого СтрокаТЧ Из Автоработы Цикл
		Количество = СтрокаТЧ.КоличествоРазница;
		
		Если СтрокаТЧ.Нормочас = НормочасРубль Тогда
			КоличествоНормочасов = 0;
		Иначе
			КоличествоНормочасов = СтрокаТЧ.Количество*СтрокаТЧ.Коэффициент;
		КонецЕсли;
		
		Если НЕ ЦенообразованиеСервер.ПолучитьЦенуНормочаса(СтрокаТЧ.НормочасПоЗаказНаряду, Дата, ТипЦенРабот, СтрокаТЧ.Авторабота).ЦенаБезСкидкиНаценки = 1 Тогда
			КоличествоНормочасов = КоличествоНормочасов - (СтрокаТЧ.КоличествоПоЗаказНаряду*СтрокаТЧ.КоэффициентПоЗаказНаряду);
		КонецЕсли;
		
		СуммаРегл      = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТЧ.СуммаВсегоРазница,ВалютаДокумента,КурсДокумента,ВалютаРегл,КурсРегл);
		СуммаУпр       = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТЧ.СуммаВсегоРазница,ВалютаДокумента,КурсДокумента,ВалютаУпр,КурсВалютыУпр);
		СуммаНДС       = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТЧ.СуммаНДСРазница,ВалютаДокумента,КурсДокумента,ВалютаРегл,КурсРегл);
		СуммаСкидки    = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТЧ.СуммаСкидкиРазница,ВалютаДокумента,КурсДокумента,ВалютаРегл,КурсРегл);
		СуммаНДСУпр    = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТЧ.СуммаНДСРазница,ВалютаДокумента,КурсДокумента,ВалютаУпр,КурсВалютыУпр);
		СуммаСкидкиУпр = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТЧ.СуммаСкидкиРазница,ВалютаДокумента,КурсДокумента,ВалютаУпр,КурсВалютыУпр);
		
		Если Количество=0 И СуммаРегл=0 И СуммаУпр=0 И СуммаНДС=0 И СуммаСкидки=0 И КоличествоНормочасов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтавкаНДС = СтавкиНДС.Получить(СтрокаТЧ.СтавкаНДС);
		
		Если Количество >= 0 Тогда
			// Если количество работ увеличено - приход по продажам.
			НоваяЗаписьПродажи=НаборЗаписейПродажи.Добавить();
			НоваяЗаписьПродажи.Период=ШапкаДокумента.Дата;
			НоваяЗаписьПродажи.Регистратор=ШапкаДокумента.Ссылка;
			НоваяЗаписьПродажи.ПодразделениеКомпании=ШапкаДокумента.ПодразделениеКомпании;
			НоваяЗаписьПродажи.Номенклатура=Справочники.Номенклатура.Авторабота;
			НоваяЗаписьПродажи.ДокументПродажи=ШапкаДокумента.ЗаказНаряд;
			НоваяЗаписьПродажи.Покупатель=ШапкаДокумента.Контрагент;
			НоваяЗаписьПродажи.ХозОперация=ШапкаДокумента.ХозОперация;
			НоваяЗаписьПродажи.ДоговорВзаиморасчетов=ШапкаДокумента.ДоговорВзаиморасчетов;
			НоваяЗаписьПродажи.СкладКомпании=ДокументОснование.Цех;
			НоваяЗаписьПродажи.Авторабота=СтрокаТЧ.Авторабота;
			НоваяЗаписьПродажи.СтавкаНДС=СтрокаТЧ.СтавкаНДС;
			НоваяЗаписьПродажи.Количество=Количество;
			НоваяЗаписьПродажи.КоличествоНормочасов=КоличествоНормочасов;
			НоваяЗаписьПродажи.Сумма=СуммаРегл;
			НоваяЗаписьПродажи.СуммаНДС=СуммаНДС;
			НоваяЗаписьПродажи.СуммаСкидки=СуммаСкидки;
			НоваяЗаписьПродажи.СуммаУпр=СуммаУпр;
			НоваяЗаписьПродажи.СебестоимостьУпр=0;
			НоваяЗаписьПродажи.Себестоимость=0;
			НоваяЗаписьПродажи.СуммаНДСВходящий=0;
			НоваяЗаписьПродажи.СебестоимостьБезНДС=0;
			НоваяЗаписьПродажи.СебестоимостьБезНДСУпр=0;
			НоваяЗаписьПродажи.ВыручкаБезНДС                      = НоваяЗаписьПродажи.Сумма - НоваяЗаписьПродажи.СуммаНДС;
			НоваяЗаписьПродажи.ВыручкаДоПримененияСкидкиБезНДС    = НоваяЗаписьПродажи.Сумма + НоваяЗаписьПродажи.СуммаСкидки - НоваяЗаписьПродажи.СуммаНДС - Окр(НоваяЗаписьПродажи.СуммаСкидки * СтавкаНДС / (100 + СтавкаНДС), 2);
			НоваяЗаписьПродажи.ВыручкаДоПримененияСкидки          = НоваяЗаписьПродажи.Сумма + НоваяЗаписьПродажи.СуммаСкидки;
			НоваяЗаписьПродажи.СуммаНДСУпр                        = СуммаНДСУпр;
			НоваяЗаписьПродажи.СуммаСкидкиУпр                     = СуммаСкидкиУпр;
			НоваяЗаписьПродажи.ВыручкаБезНДСУпр                   = НоваяЗаписьПродажи.СуммаУпр - НоваяЗаписьПродажи.СуммаНДСУпр;
			НоваяЗаписьПродажи.ВыручкаДоПримененияСкидкиБезНДСУпр = НоваяЗаписьПродажи.СуммаУпр + НоваяЗаписьПродажи.СуммаСкидкиУпр - НоваяЗаписьПродажи.СуммаНДСУпр - Окр(НоваяЗаписьПродажи.СуммаСкидкиУпр * СтавкаНДС / (100 + СтавкаНДС), 2);
			НоваяЗаписьПродажи.ВыручкаДоПримененияСкидкиУпр       = НоваяЗаписьПродажи.СуммаУпр + НоваяЗаписьПродажи.СуммаСкидкиУпр;
		Иначе
			// При уменьшении количества работ - сторнируем те продажи,
			// которые были проведены заказ-нарядом.
			Количество=-Количество;
			КоличествоНормочасов = -КоличествоНормочасов;
			СуммаРегл=-СуммаРегл;
			СуммаУпр=-СуммаУпр;
			СуммаНДС=-СуммаНДС;
			СуммаСкидки=-СуммаСкидки;
			СуммаНДСУпр=-СуммаНДСУпр;
			СуммаСкидкиУпр=-СуммаСкидкиУпр;
			СтрокиПродаж=тзПродажи.НайтиСтроки(Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,Авторабота,СтавкаНДС",Справочники.Номенклатура.Авторабота,Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(),СтрокаТЧ.Авторабота,СтрокаТЧ.СтавкаНДСПоЗаказНаряду));
			НоваяЗаписьПродажи=Неопределено;
			Для каждого СтрокаПродаж Из СтрокиПродаж Цикл
				Если Количество<=0 Тогда Прервать; КонецЕсли;
				НоваяЗаписьПродажи=НаборЗаписейПродажи.Добавить();
				НоваяЗаписьПродажи.Период=ШапкаДокумента.Дата;
				НоваяЗаписьПродажи.Регистратор=ШапкаДокумента.Ссылка;
				НоваяЗаписьПродажи.ПодразделениеКомпании=СтрокаПродаж.ПодразделениеКомпании;
				НоваяЗаписьПродажи.Номенклатура=СтрокаПродаж.Номенклатура;
				НоваяЗаписьПродажи.ДокументПродажи=СтрокаПродаж.ДокументПродажи;
				НоваяЗаписьПродажи.Поставщик=СтрокаПродаж.Поставщик;
				НоваяЗаписьПродажи.Покупатель=СтрокаПродаж.Покупатель;
				НоваяЗаписьПродажи.СтатусПартии=СтрокаПродаж.СтатусПартии;
				НоваяЗаписьПродажи.ХозОперация=ШапкаДокумента.ХозОперация;
				НоваяЗаписьПродажи.ДоговорВзаиморасчетов=СтрокаПродаж.ДоговорВзаиморасчетов;
				НоваяЗаписьПродажи.ХарактеристикаНоменклатуры=СтрокаПродаж.ХарактеристикаНоменклатуры;
				НоваяЗаписьПродажи.СкладКомпании=СтрокаПродаж.СкладКомпании;
				НоваяЗаписьПродажи.Авторабота=СтрокаТЧ.Авторабота;
				НоваяЗаписьПродажи.СтавкаНДС=СтрокаПродаж.СтавкаНДС;
				НоваяЗаписьПродажи.Партия=СтрокаПродаж.Партия;
				НоваяЗаписьПродажи.ГТД=СтрокаПродаж.ГТД;
				НоваяЗаписьПродажи.Количество           = -Мин(СтрокаПродаж.Количество, Количество);
				НоваяЗаписьПродажи.КоличествоНормочасов = -Мин(СтрокаПродаж.КоличествоНормочасов, КоличествоНормочасов);
				НоваяЗаписьПродажи.Сумма=-Мин(СтрокаПродаж.Сумма,СуммаРегл);
				НоваяЗаписьПродажи.СуммаНДС=-Мин(СтрокаПродаж.СуммаНДС,СуммаНДС);
				НоваяЗаписьПродажи.СуммаСкидки=-Мин(СтрокаПродаж.СуммаСкидки,СуммаСкидки);
				НоваяЗаписьПродажи.СуммаУпр=-Мин(СтрокаПродаж.СуммаУпр,СуммаУпр);
				НоваяЗаписьПродажи.ВыручкаБезНДС                      = НоваяЗаписьПродажи.Сумма - НоваяЗаписьПродажи.СуммаНДС;
				НоваяЗаписьПродажи.ВыручкаДоПримененияСкидкиБезНДС    = НоваяЗаписьПродажи.Сумма + НоваяЗаписьПродажи.СуммаСкидки - НоваяЗаписьПродажи.СуммаНДС - Окр(НоваяЗаписьПродажи.СуммаСкидки * СтрокаПродаж.СтавкаНДС.Ставка / (100 + СтрокаПродаж.СтавкаНДС.Ставка), 2);
				НоваяЗаписьПродажи.ВыручкаДоПримененияСкидки          = НоваяЗаписьПродажи.Сумма + НоваяЗаписьПродажи.СуммаСкидки;
				НоваяЗаписьПродажи.СуммаНДСУпр                        = -Мин(СтрокаПродаж.СуммаНДСУпр,СуммаНДСУпр);
				НоваяЗаписьПродажи.СуммаСкидкиУпр                     = -Мин(СтрокаПродаж.СуммаСкидкиУпр,СуммаСкидкиУпр);
				НоваяЗаписьПродажи.ВыручкаБезНДСУпр                   = НоваяЗаписьПродажи.СуммаУпр - НоваяЗаписьПродажи.СуммаНДСУпр;
				НоваяЗаписьПродажи.ВыручкаДоПримененияСкидкиБезНДСУпр = НоваяЗаписьПродажи.СуммаУпр + НоваяЗаписьПродажи.СуммаСкидкиУпр - НоваяЗаписьПродажи.СуммаНДСУпр - Окр(НоваяЗаписьПродажи.СуммаСкидкиУпр * СтрокаПродаж.СтавкаНДС.Ставка / (100 + СтрокаПродаж.СтавкаНДС.Ставка), 2);
				НоваяЗаписьПродажи.ВыручкаДоПримененияСкидкиУпр       = НоваяЗаписьПродажи.СуммаУпр + НоваяЗаписьПродажи.СуммаСкидкиУпр;
				
				Количество           = Количество-(-НоваяЗаписьПродажи.Количество);
				КоличествоНормочасов = КоличествоНормочасов-(-НоваяЗаписьПродажи.КоличествоНормочасов);
				СуммаРегл=СуммаРегл-(-НоваяЗаписьПродажи.Сумма);
				СуммаУпр=СуммаУпр-(-НоваяЗаписьПродажи.СуммаУпр);
				СуммаНДС=СуммаНДС-(-НоваяЗаписьПродажи.СуммаНДС);
				СуммаСкидки=СуммаСкидки-(-НоваяЗаписьПродажи.СуммаСкидки);
				СуммаНДСУпр=Окр(СуммаНДСУпр,2);
				СуммаСкидкиУпр=Окр(СуммаСкидкиУпр,2);
			КонецЦикла;
			Количество=Окр(Количество,3);
			КоличествоНормочасов = Окр(КоличествоНормочасов,3);
			СуммаРегл=Окр(СуммаРегл,2);
			СуммаУпр=Окр(СуммаУпр,2);
			СуммаНДС=Окр(СуммаНДС,2);
			СуммаСкидки=Окр(СуммаСкидки,2);
			СуммаНДСУпр=Окр(СуммаНДСУпр,2);
			СуммаСкидкиУпр=Окр(СуммаСкидкиУпр,2);
			Если Количество<>0 ИЛИ СуммаРегл<>0 ИЛИ СуммаУпр<>0 ИЛИ СуммаНДС<>0 ИЛИ СуммаСкидки<>0 ИЛИ КоличествоНормочасов<>0 Тогда
				// Если после сторнирования еще что-то осталось - сторно на последнюю партию или на пустую партию.
				НоваяЗаписьПродажиПревышение=НаборЗаписейПродажи.Добавить();
				Если НоваяЗаписьПродажи=Неопределено Тогда
					НоваяЗаписьПродажиПревышение.СкладКомпании=ДокументОснование.Цех;
				Иначе
					НоваяЗаписьПродажиПревышение.Поставщик=НоваяЗаписьПродажи.Поставщик;
					НоваяЗаписьПродажиПревышение.Партия=НоваяЗаписьПродажи.Партия;
					НоваяЗаписьПродажиПревышение.СтатусПартии=НоваяЗаписьПродажи.СтатусПартии;
					НоваяЗаписьПродажиПревышение.СкладКомпании=НоваяЗаписьПродажи.СкладКомпании;
				КонецЕсли; 
				НоваяЗаписьПродажиПревышение.Период=ШапкаДокумента.Дата;
				НоваяЗаписьПродажиПревышение.Регистратор=ШапкаДокумента.Ссылка;
				НоваяЗаписьПродажиПревышение.ПодразделениеКомпании=ШапкаДокумента.ПодразделениеКомпании;
				НоваяЗаписьПродажиПревышение.Номенклатура=Справочники.Номенклатура.Авторабота;
				НоваяЗаписьПродажиПревышение.ДокументПродажи=ШапкаДокумента.ЗаказНаряд;
				НоваяЗаписьПродажиПревышение.Покупатель=ШапкаДокумента.Контрагент;
				НоваяЗаписьПродажиПревышение.ХозОперация=ШапкаДокумента.ХозОперация;
				НоваяЗаписьПродажиПревышение.ДоговорВзаиморасчетов=ШапкаДокумента.ДоговорВзаиморасчетов;
				НоваяЗаписьПродажиПревышение.Авторабота=СтрокаТЧ.Авторабота;
				НоваяЗаписьПродажиПревышение.СтавкаНДС=СтрокаТЧ.СтавкаНДС;
				НоваяЗаписьПродажиПревышение.Количество=-Количество;
				НоваяЗаписьПродажиПревышение.КоличествоНормочасов=-КоличествоНормочасов;
				НоваяЗаписьПродажиПревышение.Сумма=-СуммаРегл;
				НоваяЗаписьПродажиПревышение.СуммаНДС=-СуммаНДС;
				НоваяЗаписьПродажиПревышение.СуммаСкидки=-СуммаСкидки;
				НоваяЗаписьПродажиПревышение.СуммаУпр=-СуммаУпр;
				НоваяЗаписьПродажиПревышение.СебестоимостьУпр=0;
				НоваяЗаписьПродажиПревышение.Себестоимость=0;
				НоваяЗаписьПродажиПревышение.СуммаНДСВходящий=0;
				НоваяЗаписьПродажиПревышение.СебестоимостьБезНДС=0;
				НоваяЗаписьПродажиПревышение.СебестоимостьБезНДСУпр=0;
				НоваяЗаписьПродажиПревышение.ВыручкаБезНДС                      = НоваяЗаписьПродажиПревышение.Сумма - НоваяЗаписьПродажиПревышение.СуммаНДС;
				НоваяЗаписьПродажиПревышение.ВыручкаДоПримененияСкидкиБезНДС    = НоваяЗаписьПродажиПревышение.Сумма + НоваяЗаписьПродажиПревышение.СуммаСкидки - НоваяЗаписьПродажиПревышение.СуммаНДС - Окр(НоваяЗаписьПродажиПревышение.СуммаСкидки * СтавкаНДС / (100 + СтавкаНДС), 2);
				НоваяЗаписьПродажиПревышение.ВыручкаДоПримененияСкидки          = НоваяЗаписьПродажиПревышение.Сумма + НоваяЗаписьПродажиПревышение.СуммаСкидки;
				НоваяЗаписьПродажиПревышение.СуммаНДСУпр                        = -СуммаНДСУпр;
				НоваяЗаписьПродажиПревышение.СуммаСкидкиУпр                     = -СуммаСкидкиУпр;
				НоваяЗаписьПродажиПревышение.ВыручкаБезНДСУпр                   = НоваяЗаписьПродажиПревышение.СуммаУпр - НоваяЗаписьПродажиПревышение.СуммаНДСУпр;
				НоваяЗаписьПродажиПревышение.ВыручкаДоПримененияСкидкиБезНДСУпр = НоваяЗаписьПродажиПревышение.СуммаУпр + НоваяЗаписьПродажиПревышение.СуммаСкидкиУпр - НоваяЗаписьПродажиПревышение.СуммаНДСУпр - Окр(НоваяЗаписьПродажиПревышение.СуммаСкидкиУпр * СтавкаНДС / (100 + СтавкаНДС), 2);
				НоваяЗаписьПродажиПревышение.ВыручкаДоПримененияСкидкиУпр       = НоваяЗаписьПродажиПревышение.СуммаУпр + НоваяЗаписьПродажиПревышение.СуммаСкидкиУпр;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат НЕ Отказ;
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, "ВхДокНомер,ВхДокДатаВрем") Тогда
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ПравоПользователя("ПроведениеНезаполненныхДокументов", ЭтотОбъект) Тогда
		Если НЕ ЗначениеЗаполнено(Товары) И НЕ ЗначениеЗаполнено(Автоработы) Тогда
			ПроверяемыеРеквизиты.Добавить("Товары");
			ПроверяемыеРеквизиты.Добавить("Автоработы");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
			Если ДокументОснование.Состояние <> Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
				ТекстСообщения = НСтр("ru = 'Проведение акта разногласий возможено только на основании закрытого заказ-наряда.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
			ИначеЕсли ДокументОснование.ВидРемонта.ТипРемонта <> Перечисления.ТипыРемонта.Платный Тогда
				ТекстСообщения = НСтр("ru = 'Проведение акта разногласий возможено только на основании заказ-наряда с платным видом ремонта.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	Если Не ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ); 
	// Конец УтверждениеДокументов
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если УтверждениеДокументовСервер.ИспользоватьУтверждениеДокументов() Тогда
		
		УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(Дата);
	
	СуммаРазногласий = Товары.Итог("СуммаВсегоРазница")+Автоработы.Итог("СуммаВсегоРазница");
	
	ВалютаРегл     = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл, МоментВремени());
	КурсРегл       = СтруктураКурса.Курс/?(СтруктураКурса.Кратность=0, 1, СтруктураКурса.Кратность);
	ВалютаУпр      = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	Если ВалютаДокумента = ДоговорВзаиморасчетов.ВалютаВзаиморасчетов Тогда
		СуммаДокументаДог = СуммаРазногласий;
	ИначеЕсли ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаУпр Тогда
		СуммаДокументаДог = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаРазногласий,ВалютаДокумента,КурсДокумента,ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,КурсВалютыУпр);
	Иначе
		СуммаДокументаДог = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаРазногласий,ВалютаДокумента,КурсДокумента,ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,МоментВремени());
	КонецЕсли; 
	Если ВалютаДокумента = ВалютаУпр Тогда
		СуммаДокументаУпр = СуммаРазногласий;
	Иначе
		СуммаДокументаУпр = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаРазногласий,ВалютаДокумента,КурсДокумента,ВалютаУпр,КурсВалютыУпр);
	КонецЕсли; 
	Если ВалютаДокумента = ВалютаРегл Тогда
		СуммаДокументаБаз = СуммаРазногласий;
	Иначе
		СуммаДокументаБаз = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаРазногласий,ВалютаДокумента,КурсДокумента,ВалютаРегл,КурсРегл);
	КонецЕсли; 
	
	// Проводим взаиморасчеты.
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыКомпании;
		Если СуммаРазногласий > 0 Тогда
			
			// Для способа закрытия сделок по счетам и заказам - всю сумму на сделку ЗН.
			НоваяЗапись = НаборЗаписейВзаиморасчеты.Добавить();
			НоваяЗапись.ВидДвижения           = ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период                = Дата;
			НоваяЗапись.Регистратор           = Ссылка;
			НоваяЗапись.Контрагент            = Контрагент;
			НоваяЗапись.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
			НоваяЗапись.Сделка                = ДокументОснование;
			НоваяЗапись.ХозОперация           = ХозОперация;
			НоваяЗапись.ВидОперации           = Перечисления.ВидыОперацийВзаиморасчетов.НачислениеДебиторскойЗадолженности;
			НоваяЗапись.Сумма                 = СуммаДокументаДог;
			НоваяЗапись.СуммаУпр              = СуммаДокументаУпр;
			НоваяЗапись.СуммаБаз              = СуммаДокументаБаз;
			
		ИначеЕсли СуммаРазногласий < 0 Тогда
			// При уменьшении суммы - отсторнируем движения по взаиморасчетам самого ЗН.
			СуммаДокументаДог = -СуммаДокументаДог; СуммаДокументаУпр = -СуммаДокументаУпр; СуммаДокументаБаз = -СуммаДокументаБаз;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВзаиморасчетыКомпании.Контрагент,
			|	ВзаиморасчетыКомпании.ДоговорВзаиморасчетов,
			|	ВзаиморасчетыКомпании.Сделка КАК Сделка,
			|	СУММА(ВзаиморасчетыКомпании.Сумма) КАК Сумма,
			|	СУММА(ВзаиморасчетыКомпании.СуммаУпр) КАК СуммаУпр,
			|	СУММА(ВзаиморасчетыКомпании.СуммаБаз) КАК СуммаБаз
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыКомпании КАК ВзаиморасчетыКомпании
			|ГДЕ
			|	ВзаиморасчетыКомпании.Регистратор = &ЗаказНаряд
			|
			|СГРУППИРОВАТЬ ПО
			|	ВзаиморасчетыКомпании.ДоговорВзаиморасчетов,
			|	ВзаиморасчетыКомпании.Контрагент,
			|	ВзаиморасчетыКомпании.Сделка,
			|	ВзаиморасчетыКомпании.НомерСтроки
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сделка УБЫВ";
			Запрос.УстановитьПараметр("ЗаказНаряд", ДокументОснование);
			
			// Наложим блокировку на считываемые данные.
			СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ВзаиморасчетыКомпании");
			ЗначенияБлокировки = Новый Соответствие;
			ЗначенияБлокировки.Вставить("Период"               , Новый Диапазон(, Дата));
			ЗначенияБлокировки.Вставить("Контрагент"           , Контрагент);
			ЗначенияБлокировки.Вставить("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов); 
			ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки);
			
			Выборка = Запрос.Выполнить().Выбрать(); СуммаДокументаОстаток = -СуммаРазногласий;
			Пока Выборка.Следующий() Цикл
				Если СуммаДокументаОстаток <= 0 Тогда Прервать; КонецЕсли;
				
				Если ВалютаДокумента=ДоговорВзаиморасчетов.ВалютаВзаиморасчетов Тогда
					СуммаДвиженияДог=Мин(Выборка.Сумма,СуммаДокументаДог);
					СуммаДвиженияУпр=РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДвиженияДог,ВалютаДокумента,КурсДокумента,ВалютаУпр,КурсВалютыУпр);
					СуммаДвиженияБаз=РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДвиженияДог,ВалютаДокумента,КурсДокумента,ВалютаРегл,КурсРегл);
					СуммаДокументаОстаток=СуммаДокументаОстаток-СуммаДвиженияДог;
				ИначеЕсли ВалютаДокумента=ВалютаУпр Тогда
					СуммаДвиженияУпр=Мин(Выборка.СуммаУпр,СуммаДокументаУпр);
					СуммаДвиженияДог=РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДвиженияУпр,ВалютаУпр,КурсВалютыУпр,ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,МоментВремени());
					СуммаДвиженияБаз=РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДвиженияУпр,ВалютаУпр,КурсВалютыУпр,ВалютаРегл,КурсРегл);
					СуммаДокументаОстаток=СуммаДокументаОстаток-РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДвиженияУпр,ВалютаУпр,КурсВалютыУпр,ВалютаДокумента,КурсДокумента);
				ИначеЕсли ВалютаДокумента=ВалютаРегл Тогда
					СуммаДвиженияБаз=Мин(Выборка.СуммаБаз,СуммаДокументаБаз);
					СуммаДвиженияДог=РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДвиженияБаз,ВалютаРегл,КурсРегл,ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,МоментВремени());
					СуммаДвиженияУпр=РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДвиженияБаз,ВалютаРегл,КурсРегл,ВалютаУпр,КурсВалютыУпр);
					СуммаДокументаОстаток=СуммаДокументаОстаток-РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДвиженияБаз,ВалютаРегл,КурсРегл,ВалютаДокумента,КурсДокумента);
				Иначе
					СуммаДвиженияДог=РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаРазногласий,ВалютаДокумента,КурсДокумента,ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,МоментВремени());
					СуммаДвиженияДог=Мин(СуммаДвиженияДог,Выборка.Сумма);
					СуммаДвиженияУпр=РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДвиженияДог,ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,МоментВремени(),ВалютаУпр,КурсВалютыУпр);
					СуммаДвиженияБаз=РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДвиженияДог,ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,МоментВремени(),ВалютаРегл,КурсРегл);
					СуммаДокументаОстаток=СуммаДокументаОстаток-РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДвиженияДог,ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,МоментВремени(),ВалютаДокумента,КурсДокумента);
				КонецЕсли; 
				
				НоваяЗапись = НаборЗаписейВзаиморасчеты.Добавить();
				НоваяЗапись.ВидДвижения           = ВидДвиженияНакопления.Приход;
				НоваяЗапись.Период                = Дата;
				НоваяЗапись.Регистратор           = Ссылка;
				НоваяЗапись.Контрагент            = Выборка.Контрагент;
				НоваяЗапись.ДоговорВзаиморасчетов = Выборка.ДоговорВзаиморасчетов;
				НоваяЗапись.Сделка                = Выборка.Сделка;
				НоваяЗапись.ХозОперация           = ХозОперация;
				НоваяЗапись.ВидОперации           = Перечисления.ВидыОперацийВзаиморасчетов.НачислениеДебиторскойЗадолженности;
				НоваяЗапись.Сумма                 = -СуммаДвиженияДог;
				НоваяЗапись.СуммаУпр              = -СуммаДвиженияУпр;
				НоваяЗапись.СуммаБаз              = -СуммаДвиженияБаз;
				СуммаДокументаДог                 = СуммаДокументаДог-СуммаДвиженияДог;
				СуммаДокументаУпр                 = СуммаДокументаУпр-СуммаДвиженияУпр;
				СуммаДокументаБаз                 = СуммаДокументаБаз-СуммаДвиженияБаз;
			КонецЦикла;
		КонецЕсли;
		СуммаДоходаРасходаСуммовыхРазниц = 0;
		тзНаборЗаписейВзаиморасчеты = НаборЗаписейВзаиморасчеты.Выгрузить();
		тзНаборЗаписейВзаиморасчеты.Свернуть("Контрагент,ДоговорВзаиморасчетов,Сделка");
		Для каждого СделкаВзаиморасчетов Из тзНаборЗаписейВзаиморасчеты Цикл
			НаборЗаписейВзаиморасчеты.Контрагент                       = СделкаВзаиморасчетов.Контрагент;
			НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов            = СделкаВзаиморасчетов.ДоговорВзаиморасчетов;
			НаборЗаписейВзаиморасчеты.Сделка                           = СделкаВзаиморасчетов.Сделка;
			НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем        = Истина;
			НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок               = Ложь;
			НаборЗаписейВзаиморасчеты.ДокументОбъект                   = ЭтотОбъект;
			НаборЗаписейВзаиморасчеты.ШапкаДокумента                   = ЭтотОбъект;
			НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц = 0;
			НаборЗаписейВзаиморасчеты.РежимПроведения                  = РежимПроведения;
			НаборЗаписейВзаиморасчеты.МоментВремени                    = МоментВремени();
			НаборЗаписейВзаиморасчеты.СписаниеКурсовойРазницыБаз(СделкаВзаиморасчетов.ДоговорВзаиморасчетов,СделкаВзаиморасчетов.Контрагент,СделкаВзаиморасчетов.Сделка);
			СуммаДоходаРасходаСуммовыхРазниц = СуммаДоходаРасходаСуммовыхРазниц+НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
			
			Если СуммаДоходаРасходаСуммовыхРазниц<>0 Тогда
				НаборЗаписейДиР = Движения.ДоходыИРасходы;
				НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
				Если ВедетсяБалансПоПодразделению Тогда
					НаборЗаписейДиР.Подразделение = ДоговорВзаиморасчетов.ПодразделениеКомпании;
				КонецЕсли;
				НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
				НаборЗаписейДиР.ВУпрВалюте = Истина;
				Если СуммаДоходаРасходаСуммовыхРазниц<0 Тогда
					НаборЗаписейДиР.Расход = -СуммаДоходаРасходаСуммовыхРазниц;
				Иначе
					НаборЗаписейДиР.Доход = СуммаДоходаРасходаСуммовыхРазниц;
				КонецЕсли;
				Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			КонецЕсли;
			
			Если УчетныеПолитикиСервер.Значение("РежимСписанияСуммовыхРазниц",Дата) = Перечисления.РежимыРегламентныхОпераций.ПриПроведенииДокумента Тогда
				НаборЗаписейВзаиморасчеты.Контрагент                       = Контрагент;
				НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов            = ДоговорВзаиморасчетов;
				НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем        = Истина;
				НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок               = Ложь;
				НаборЗаписейВзаиморасчеты.ДокументОбъект                   = ЭтотОбъект;
				НаборЗаписейВзаиморасчеты.ШапкаДокумента                   = ЭтотОбъект;
				НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц = 0;
				НаборЗаписейВзаиморасчеты.РежимПроведения                  = РежимПроведения;
				НаборЗаписейВзаиморасчеты.МоментВремени                    = МоментВремени();
				НаборЗаписейВзаиморасчеты.СписаниеСуммовыхРазниц();
			КонецЕсли;
		КонецЦикла; 
		
		НаборЗаписейВзаиморасчеты.МоментВремени  = Неопределено;
		НаборЗаписейВзаиморасчеты.ДокументОбъект = Неопределено;
		НаборЗаписейВзаиморасчеты.ШапкаДокумента = Неопределено;
	КонецЕсли;
	Документы.АктРазногласий.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	Документы.АктРазногласий.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	// Проведем партии товаров.
	Отказ = НЕ ПровестиПоПартиям(РежимПроведения, Ссылка, СуммаРазногласий) ИЛИ Отказ;
	
	// Двигаем границу последовательности взаиморасчетов.
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "ЗаказНаряд"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаряд(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Товары.Очистить();
	Автоработы.Очистить();
	
	ПрерватьЗаполнение = Не ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если ПрерватьЗаполнение Тогда
		
		Возврат Истина;
		
	КонецЕсли;
		
	Если ДанныеЗаполнения <> Неопределено Тогда
		
		Если ДанныеЗаполнения.Состояние <> Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
			
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
				ЭтотОбъект,
				НСтр("ru = 'Ввод акта разногласий возможен только на основании закрытого заказ-наряда.'")
			);
			ДанныеЗаполнения = Неопределено;
			ДокументОснование = Неопределено;
			Возврат Истина;
			
		ИначеЕсли ДанныеЗаполнения.ВидРемонта.ТипРемонта <> Перечисления.ТипыРемонта.Платный Тогда
			
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
				ЭтотОбъект,
				НСтр("ru = 'Ввод акта разногласий возможен только на основании заказ-наряда с платным видом ремонта.'")
			);
			ДанныеЗаполнения = Неопределено;
			ДокументОснование = Неопределено;
			Возврат Истина;
			
		КонецЕсли;
		 
	КонецЕсли; 
	
	Заказчик   = ДанныеЗаполнения.СводныйРемонтныйЗаказ.Заказчик;
	Автомобиль = ДанныеЗаполнения.СводныйРемонтныйЗаказ.Автомобиль;
	Товары.Свернуть("Номенклатура,ЕдиницаИзмерения,Коэффициент,СтавкаНДС,ХарактеристикаНоменклатуры,Цена,ПроцентСкидки,ПроцентСкидкиСтроки","Количество,Сумма,СуммаНДС,СуммаСкидки,СуммаСкидкиСтроки,СуммаВсего");
	
	Для каждого СтрокаТЧ Из Товары Цикл
		СтрокаТЧ.ПоЗаказНаряду                 = Истина;
		СтрокаТЧ.Подтверждение                 = Истина;
		СтрокаТЧ.КоличествоПоЗаказНаряду       = СтрокаТЧ.Количество;
		СтрокаТЧ.ЕдиницаИзмеренияПоЗаказНаряду = СтрокаТЧ.ЕдиницаИзмерения;
		СтрокаТЧ.КоэффициентПоЗаказНаряду      = СтрокаТЧ.Коэффициент;
		СтрокаТЧ.СтавкаНДСПоЗаказНаряду        = СтрокаТЧ.СтавкаНДС;
		СтрокаТЧ.СуммаНДСПоЗаказНаряду         = СтрокаТЧ.СуммаНДС;
		СтрокаТЧ.ПроцентСкидки                 = СтрокаТЧ.ПроцентСкидки + СтрокаТЧ.ПроцентСкидкиСтроки;
		СтрокаТЧ.ПроцентСкидкиСтроки           = 0;
		СтрокаТЧ.СуммаСкидки                   = СтрокаТЧ.СуммаСкидки + СтрокаТЧ.СуммаСкидкиСтроки;
		СтрокаТЧ.СуммаСкидкиСтроки             = 0;
		СтрокаТЧ.СуммаСкидкиПоЗаказНаряду      = СтрокаТЧ.СуммаСкидки;
		СтрокаТЧ.СуммаВсегоПоЗаказНаряду       = СтрокаТЧ.СуммаВсего;
		
		Документы.АктРазногласий.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект, СтрокаТЧ);
		
	КонецЦикла;
	
	Автоработы.Свернуть(
		"Авторабота,Нормочас,Коэффициент,СтавкаНДС,ПроцентСкидки,ПроцентСкидкиСтроки,СпособРасчетаСтоимостиРаботы",
		"Количество,Сумма,СуммаНДС,СуммаСкидки,СуммаСкидкиСтроки,СуммаВсего");
	
	Для Каждого СтрокаТЧ Из Автоработы Цикл
		
		СтрокаТЧ.ПоЗаказНаряду            = Истина;
		СтрокаТЧ.Подтверждение            = Истина;
		СтрокаТЧ.КоличествоПоЗаказНаряду  = СтрокаТЧ.Количество;
		СтрокаТЧ.НормочасПоЗаказНаряду    = СтрокаТЧ.Нормочас;
		СтрокаТЧ.КоэффициентПоЗаказНаряду = СтрокаТЧ.Коэффициент;
		СтрокаТЧ.СтавкаНДСПоЗаказНаряду   = СтрокаТЧ.СтавкаНДС;
		СтрокаТЧ.СуммаНДСПоЗаказНаряду    = СтрокаТЧ.СуммаНДС;
		СтрокаТЧ.ПроцентСкидки            = СтрокаТЧ.ПроцентСкидки + СтрокаТЧ.ПроцентСкидкиСтроки;
		СтрокаТЧ.ПроцентСкидкиСтроки      = 0;
		СтрокаТЧ.СуммаСкидки              = СтрокаТЧ.СуммаСкидки + СтрокаТЧ.СуммаСкидкиСтроки;
		СтрокаТЧ.СуммаСкидкиСтроки        = 0;
		СтрокаТЧ.СуммаСкидкиПоЗаказНаряду = СтрокаТЧ.СуммаСкидки;
		СтрокаТЧ.СуммаВсегоПоЗаказНаряду  = СтрокаТЧ.СуммаВсего;
		
		Документы.АктРазногласий.АвтоработыСуммаВсегоПриИзменении(ЭтотОбъект, СтрокаТЧ);
		
	КонецЦикла; 
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
