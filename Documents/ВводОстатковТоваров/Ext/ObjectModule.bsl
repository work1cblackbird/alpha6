// Модуль документа "Ввод остатков товаров"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)

	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, "ВхДокНомер,ВхДокДатаВрем") Тогда
		Возврат;
	КонецЕсли;
	
	СтатьяОприходованияТМЦ = Справочники.СтатьиДоходовИРасходов.ВводОстатковТоваров;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим параметры запрета для номенклатуры
	Отказ = Отказ ИЛИ ПроверитьПараметрыЗапретаВыбораНоменклатуры();
	
	// Очистим неиспользуемые реквизиты
	Если ХозОперация = Справочники.ХозОперации.ВводОстатковТоваровПереданныхНаКомиссию Тогда
		СкладКомпании = Справочники.СкладыКомпании.ПустаяСсылка();
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ПроверитьКорректностьТоваровКомиссионныхДокументов(ЭтотОбъект, Отказ);
	
	// Проверим заполнение РНПТ у послеживаемого товара
	УчетПрослеживаемыхТоваровСервер.ПроверитьЗаполнениеРНПТПрослеживаемогоТовара(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Произведем очистку не использующихся в текущем контексте реквизитов
	ОбработкаСобытийДокументаСервер.ОчиститьПолеЦенаРозничнаяДляНеРозничныхСкладов(ЭтотОбъект, СкладКомпании);
	
	Если ХозОперация = Справочники.ХозОперации.ВводОстатковТоваровПереданныхНаКомиссию И ЗначениеЗаполнено(СкладКомпании) Тогда
		СкладКомпании = Справочники.СкладыКомпании.ПустаяСсылка();
	КонецЕсли;
	
	Если ХозОперация = Справочники.ХозОперации.ВводОстатковТоваровПринятыхНаКомиссию Тогда
		
		СтратегияСписанияПартийПоДатам = ПолучитьСтратегиюСписанияПоДатам(СкладКомпании, Организация, ?(РежимПроведения = РежимПроведенияДокумента.Оперативный, Неопределено, Дата));
		
		Если СтратегияСписанияПартийПоДатам = Перечисления.СтратегияСписанияПартийТоваровПоДатам.Средняя Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='При стратегии списания партий по среднему нельзя приходовать комиссионный товар.'"), ЭтотОбъект,,,Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПартиямПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ХозОперация=Справочники.ХозОперации.ВводОстатковТоваров
		ИЛИ ХозОперация=Справочники.ХозОперации.ВводОстатковТоваровПринятыхНаКомиссию Тогда
		// У нас не стандартная таблица, поэтому сформирует свой результат запроса по товарам.
		РезультатЗапросаПоТоварам=ПолучитьРезультатЗапросаПоТоварам(ЭтотОбъект);
		
		// Приходуем товар
		НаборЗаписейОстатки=Движения.ОстаткиТоваровКомпании;
		НаборЗаписейОстатки.РежимПроведения=РежимПроведения;
		НаборЗаписейОстатки.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейОстатки.РезультатЗапросаПоТоварам=Неопределено;
		НаборЗаписейОстатки.СкладКомпании=СкладКомпании;
		НаборЗаписейОстатки.Контрагент=Контрагент;
		НаборЗаписейОстатки.Приходовать=Истина;
		НаборЗаписейОстатки.Резервировать=Ложь;
		НаборЗаписейОстатки.ПоБазовомуКоличеству=Ложь;
		НаборЗаписейОстатки.РежимПроведения=РежимПроведения;
		НаборЗаписейОстатки.ДвиженияПоРознице=СкладКомпании.Розничный;
		Отказ=НЕ НаборЗаписейОстатки.Приход() ИЛИ Отказ;

		// Если приходуем товар на розничный склад, то установим розничные цены на этот товар.
		Если НЕ Отказ И СкладКомпании.Розничный И ПодразделениеКомпании.УстановкаЦенДокументамиПоступления И НЕ СкладКомпании.ТипЦенРозничнойТорговли.Рассчитывается Тогда
			НаборЗаписейЦены=Движения.Цены;
			НаборЗаписейЦены.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейЦены.Контрагент=Неопределено;
			НаборЗаписейЦены.ТипЦен=СкладКомпании.ТипЦенРозничнойТорговли;
			НаборЗаписейЦены.ПодразделениеКомпании = СкладКомпании.ПодразделениеКомпании;
			НаборЗаписейЦены.УстанавливатьЦеныУслуг=Ложь;
			Отказ = НЕ НаборЗаписейЦены.УстановитьЦены() ИЛИ Отказ;
		КонецЕсли;
		
		// установим цены контрагентов, если, конечно контрагент имеется
		Если НЕ Отказ И ТипЦен.РегистрироватьЦеныПоПриходу И ЗначениеЗаполнено(Контрагент) И НЕ ТипЦен.Рассчитывается Тогда
			НаборЗаписейЦены=Движения.Цены;
			НаборЗаписейЦены.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейЦены.Контрагент=Контрагент;
			НаборЗаписейЦены.ИмяРеквизитаЦена="Цена";
			НаборЗаписейЦены.ТипЦен=ТипЦен;
			Отказ = НЕ НаборЗаписейЦены.УстановитьЦены() ИЛИ Отказ;
		КонецЕсли;
		
		// установим закупочные цены контрагентов, если, конечно контрагент имеется
		Если НЕ Отказ И ПодразделениеКомпании.ФормироватьЗакупочнуюЦену И НЕ Справочники.ТипыЦен.ОсновнойТипЦенЗакупки.Рассчитывается Тогда
			НаборЗаписейЦены=Движения.Цены;
			НаборЗаписейЦены.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейЦены.Контрагент=Неопределено;
			НаборЗаписейЦены.ИмяРеквизитаЦена="Цена";
			НаборЗаписейЦены.ТипЦен=Справочники.ТипыЦен.ОсновнойТипЦенЗакупки;
			Отказ = НЕ НаборЗаписейЦены.УстановитьЦены() ИЛИ Отказ;
		КонецЕсли;
		
		// установим нормативные цены если это разрешено
		Если НЕ Отказ И ПодразделениеКомпании.ФормироватьНормативнуюЦену И НЕ Справочники.ТипыЦен.НормативнаяЦена.Рассчитывается Тогда
			НаборЗаписейЦены=Движения.Цены;
			НаборЗаписейЦены.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейЦены.Контрагент=Неопределено;
			НаборЗаписейЦены.ИмяРеквизитаЦена="Цена";
			НаборЗаписейЦены.ТипЦен=Справочники.ТипыЦен.НормативнаяЦена;
			Отказ = НЕ НаборЗаписейЦены.УстановитьЦены() ИЛИ Отказ;
		КонецЕсли;
	КонецЕсли;
	
	// проведем партии товаров
	Отказ=НЕ ПровестиПоПартиям(РежимПроведения,Ссылка) ИЛИ Отказ;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	// Запись ячеек в РС ЯчейкиХраненияПоУмолчанию.
	Если НЕ Отказ И ПолучитьФункциональнуюОпцию("ИспользоватьЯчейкиХранения") Тогда
		
		РегистрыСведений.ЯчейкиХраненияПоУмолчанию.ЗаполнитьЯчейкиХранения(
			Товары.Выгрузить(, "Номенклатура,Ячейка"),
			СкладКомпании,
			Дата,
			Ложь
		);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Приходный складской ордер"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПриходныйСкладскойОрдер(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ВладелецТовара)
		И (ТипЗнч(ДанныеЗаполнения.ВладелецТовара) = Тип("СправочникСсылка.Контрагенты")) Тогда
		
		ХозОперация	= Справочники.ХозОперации.ВводОстатковТоваровПринятыхНаКомиссию;
		Контрагент	= ДанныеЗаполнения.ВладелецТовара;
		
	Иначе
		
		ХозОперация	= Справочники.ХозОперации.ВводОстатковТоваров;
		
	КонецЕсли;
	Документы.ВводОстатковТоваров.КонтрагентПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПриходныйСкладскойОрдер()

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// У нас не стандартная таблица, поэтому сформирует свой результат запроса по товарам.
//
// Параметры:
//  ШапкаДокумента - Документ.Ссылка - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Возвращает результат запроса.
//
Функция ПолучитьРезультатЗапросаПоТоварам(ШапкаДокумента)
	ТекстЗапроса="
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.Ссылка КАК Партия,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,
		|   ОстаткиТоваров.СуммаНДС КАК СуммаНДС,
		|	ОстаткиТоваров.Сумма КАК СуммаВсего,
		|	0 КАК СуммаРозн,
		|	ОстаткиТоваров.Сумма КАК Сумма,
		|	ОстаткиТоваров.Количество*ОстаткиТоваров.Коэффициент КАК Количество
		|ИЗ
		|	Документ.ВводОстатковТоваров.Товары КАК ОстаткиТоваров
		|ГДЕ
		|	  ОстаткиТоваров.Ссылка = &Ссылка
		|	И ОстаткиТоваров.Количество > 0
		|";
		
	Запрос=Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",ШапкаДокумента.Ссылка);
	Запрос.Текст=ТекстЗапроса;
	Возврат Запрос.Выполнить();
КонецФункции // ПолучитьРезультатЗапросаПоТоварам()

// возвращает выборку по шапке
//
// Параметры:
//  ДокументСсылка - Документ.Ссылка - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Выборка - Выборка по шапке.
//
Функция ПолучитьШапкуДокумента(ДокументСсылка)
	Запрос=Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ТипЦен КАК ТипЦен,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.Организация КАК Организация,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Док.Проект КАК Проект,
	/////////// ПРИВАТ ////////////
	|	Док.СкладКомпании КАК СкладКомпании,
	|	Док.Контрагент КАК Контрагент,
	|	Док.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Док.СтатьяОприходованияТМЦ КАК СтатьяОприходованияТМЦ
	|
	|ИЗ
	|	Документ."+Метаданные().Имя+" КАК Док
	|ГДЕ
	|	Док.Ссылка=&Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции // ПолучитьШапкуДокумента()

// формирует движения документа по партионным регистрам
//
// Параметры:
//  Режим           - режим проведения (оперативный/неоперативный)
//  ДокументСсылка  - ссылка на документ который надо допровести по партиям.
//
// Возвращаемое значение:
//  Возвращает Истина - все ОК, ложь - чего-то не так.
//
Функция ПровестиПоПартиям(Режим,ДокументСсылка) Экспорт
	Отказ=Ложь;
	
		
	// получим шапку документа
	ШапкаДокумента=ПолучитьШапкуДокумента(ДокументСсылка);
	
	// Получим способ ведения баланса.
	БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
	
	// Проверим, если подразделение проводиться по партиям "отложенно", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям=Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
		Возврат НЕ Отказ;
	КонецЕсли;

	// определим вид проводки
	Если ШапкаДокумента.ХозОперация=Справочники.ХозОперации.ВводОстатковТоваров
		ИЛИ ШапкаДокумента.ХозОперация=Справочники.ХозОперации.ВводОстатковТоваровПринятыхНаКомиссию Тогда
		// Приходуем товар
		НаборЗаписейПартии=Движения.ПартииТоваровКомпании;
		НаборЗаписейПартии.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейПартии.СкладКомпании=ШапкаДокумента.СкладКомпании;
		НаборЗаписейПартии.Организация=ШапкаДокумента.Организация;
		НаборЗаписейПартии.ЕстьСтавкаНДС=Истина;
		Если ШапкаДокумента.ХозОперация=Справочники.ХозОперации.ВводОстатковТоваров Тогда
			НаборЗаписейПартии.СтатусПартии=Перечисления.СтатусыПартий.ТоварКупленный;
		Иначе
			НаборЗаписейПартии.СтатусПартии=Перечисления.СтатусыПартий.ТоварПринятыйКомиссия;
		КонецЕсли; 
		НаборЗаписейПартии.ПоБазовомуКоличеству=Ложь;
		НаборЗаписейПартии.ШапкаДокумента=ШапкаДокумента;
		НаборЗаписейПартии.РежимПроведения=Режим;
		Отказ=НЕ НаборЗаписейПартии.Приход() ИЛИ Отказ;
		
		Если ШапкаДокумента.ХозОперация=Справочники.ХозОперации.ВводОстатковТоваров Тогда
			// Доходы и расходы
			НаборЗаписейДиР 						= Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект 			= ЭтотОбъект;
			НаборЗаписейДиР.СтатьяДоходовИРасходов	= ШапкаДокумента.СтатьяОприходованияТМЦ;
			Если БалансВедетсяПоПодразделениям Тогда
				НаборЗаписейДиР.Подразделение = ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДиР.ВУпрВалюте				= Истина;
			НаборЗаписейДиР.Доход					= НаборЗаписейПартии.Итог("СуммаУпр");
			НаборЗаписейДиР.Расход					= 0;
			НаборЗаписейДиР.ШапкаДокумента			= ШапкаДокумента;
			Отказ=НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли; 
		
	ИначеЕсли ШапкаДокумента.ХозОперация=Справочники.ХозОперации.ВводОстатковТоваровПереданныхНаКомиссию Тогда
		// Отдаем товар на комиссию
	   	// получим результат запроса по товарной таблице.
		Запрос=Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВводОстатковТоваровТовары.Номенклатура КАК Номенклатура,
			|	ВводОстатковТоваровТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	&Ссылка КАК Партия,
			|	ВводОстатковТоваровТовары.ГТД КАК ГТД,
			|	Сумма(ВводОстатковТоваровТовары.СуммаНДС) КАК СуммаНДС,
			|	Сумма(ВводОстатковТоваровТовары.Сумма) КАК Сумма,
			|	Сумма(ВводОстатковТоваровТовары.СуммаВсего) КАК СуммаВсего,
			|	Сумма(ВводОстатковТоваровТовары.Количество*ВводОстатковТоваровТовары.Коэффициент) КАК Количество
			|ИЗ
			|	Документ.ВводОстатковТоваров.Товары КАК ВводОстатковТоваровТовары
			|ГДЕ
			|	ВводОстатковТоваровТовары.Ссылка=&Ссылка
			|	И ВводОстатковТоваровТовары.Номенклатура.ВидНоменклатуры<>&Услуга
			|СГРУППИРОВАТЬ ПО
			|	Номенклатура,
			|	ХарактеристикаНоменклатуры,
			|	ГТД
			|");
		Запрос.УстановитьПараметр("Ссылка",ШапкаДокумента.Ссылка);
		Запрос.УстановитьПараметр("Услуга",Перечисления.ВидыНоменклатуры.Услуга);
		// Проведем по регистру отданных на реализацию товаров
		НаборЗаписейПартииОтданные=Движения.ПартииТоваровОтданные;
		НаборЗаписейПартииОтданные.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейПартииОтданные.Контрагент=ШапкаДокумента.Контрагент;
		НаборЗаписейПартииОтданные.ДоговорВзаиморасчетов=ШапкаДокумента.ДоговорВзаиморасчетов;
		НаборЗаписейПартииОтданные.РезультатЗапросаПоТоварам=Запрос.Выполнить();
		НаборЗаписейПартииОтданные.ПоБазовомуКоличеству=Ложь;
		НаборЗаписейПартииОтданные.ПередаватьНаКомиссиюВесьТовар=Истина;
		НаборЗаписейПартииОтданные.ШапкаДокумента=ШапкаДокумента;
		НаборЗаписейПартииОтданные.РежимПроведения=Режим;
		Отказ=НЕ НаборЗаписейПартииОтданные.Приход() ИЛИ Отказ;
		
		// Доходы и расходы
		НаборЗаписейДиР 						= Движения.ДоходыИРасходы;
		НаборЗаписейДиР.ДокументОбъект 			= ЭтотОбъект;
		НаборЗаписейДиР.СтатьяДоходовИРасходов	= ШапкаДокумента.СтатьяОприходованияТМЦ;
		Если БалансВедетсяПоПодразделениям Тогда
			НаборЗаписейДиР.Подразделение = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
		КонецЕсли;
		НаборЗаписейДиР.ВУпрВалюте				= Истина;
		НаборЗаписейДиР.ШапкаДокумента			= ШапкаДокумента;
		НаборЗаписейДиР.Доход					= НаборЗаписейПартииОтданные.Итог("СуммаУпр");
		НаборЗаписейДиР.Расход					= 0;
		Отказ=НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		
	ИначеЕсли ШапкаДокумента.ХозОперация=Справочники.ХозОперации.ВводОстатковТоваровПринятыхИПроданных Тогда
		
		ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		Если ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр) Тогда
			КурсУпр = ШапкаДокумента.КурсВалютыУпр;
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр,ШапкаДокумента.Дата);
			КурсУпр = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		КонецЕсли;	
		НаборЗаписейРеализованныеТовары=Движения.РеализованныеТовары;
		Для каждого СтрокаТоваров Из ШапкаДокумента.Ссылка.Товары Цикл
			НоваяЗапись = НаборЗаписейРеализованныеТовары.Добавить();
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период = ШапкаДокумента.Дата;
			НоваяЗапись.Регистратор = ШапкаДокумента.Ссылка;
			НоваяЗапись.Контрагент = ШапкаДокумента.Контрагент;
			НоваяЗапись.Номенклатура = СтрокаТоваров.Номенклатура;
			НоваяЗапись.ДоговорВзаиморасчетов = ШапкаДокумента.ДоговорВзаиморасчетов;
			НоваяЗапись.ХарактеристикаНоменклатуры = СтрокаТоваров.ХарактеристикаНоменклатуры;
			НоваяЗапись.ДокументПередачи =  ШапкаДокумента.Ссылка;
			НоваяЗапись.ГТД = СтрокаТоваров.ГТД;
			НоваяЗапись.ХозОперация = ШапкаДокумента.ХозОперация;
			НоваяЗапись.Количество = СтрокаТоваров.Количество;
			НоваяЗапись.СуммаРегл = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТоваров.СуммаВсего, ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента, Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(), ШапкаДокумента.Дата), 2);
			НоваяЗапись.СуммаУпр = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТоваров.СуммаВсего, ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента, ВалютаУпр, КурсУпр), 2);
			НоваяЗапись.СуммаНДС = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТоваров.СуммаНДС, ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента, Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(), ШапкаДокумента.Дата), 2);
			НоваяЗапись.СуммаНДСУпр = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТоваров.СуммаНДС, ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента, ВалютаУпр, КурсУпр), 2);
			НоваяЗапись.СуммаБезНДС = НоваяЗапись.СуммаРегл - НоваяЗапись.СуммаНДС;
			НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
			НоваяЗапись.СуммаПродажи = НоваяЗапись.СуммаУпр;
			НоваяЗапись.СуммаПродажиРегл = НоваяЗапись.СуммаРегл;
		КонецЦикла; 
		
		// БАЛАНС: Увеличим доход на сумму из реализованных товаров
		// подготовим таблицу движений в разрезе подразделений реализованных товаров.
		ТаблицаСписанийПартийРеализованных = Движения.РеализованныеТовары.Выгрузить();
		ТаблицаСписанийПартийРеализованных.Свернуть("ДоговорВзаиморасчетов","СуммаУпр");
		
		ОписаниеТипов=Новый ОписаниеТипов;
		ОписаниеТипов.Типы().Добавить(Тип("СправочникСсылка.ПодразделенияКомпании"));
		ТаблицаСписанийПартийРеализованных.Колонки.Добавить("Подразделение",ОписаниеТипов);
		Для Каждого СтрокаСписания Из ТаблицаСписанийПартийРеализованных Цикл
			Если БалансВедетсяПоПодразделениям Тогда
				СтрокаСписания.Подразделение = СтрокаСписания.ДоговорВзаиморасчетов.ПодразделениеКомпании;
			Иначе
				СтрокаСписания.Подразделение = ПодразделениеКомпании;  
			КонецЕсли;
		КонецЦикла;	
		ТаблицаСписанийПартийРеализованных.Свернуть("Подразделение","СуммаУпр");
		
		Для Каждого СтрокаСписания Из ТаблицаСписанийПартийРеализованных Цикл
			НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.Подразделение          = СтрокаСписания.Подразделение;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.Себестоимость;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
			НаборЗаписейДоходыИРасходы.Доход                  = 0;
			НаборЗаписейДоходыИРасходы.Расход                 = СтрокаСписания.СуммаУпр;	
			НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
			Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		КонецЦикла;
	КонецЕсли;
	
	// двигаем границу последовательности партий
	Если ХозОперация=Справочники.ХозОперации.ВводОстатковТоваров 
		ИЛИ ХозОперация=Справочники.ХозОперации.ВводОстатковТоваровПринятыхНаКомиссию Тогда
		
		Если Ссылка <> ДокументСсылка Тогда
			
			РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
			РаботаСГраницами.ДвиженияПоПартиямПередПроведением(ДокументСсылка, ДополнительныеСвойства);
			
		КонецЕсли;
		
		РаботаСГраницами.СдвинутьГраницуПартий(ДокументСсылка, ДополнительныеСвойства, Движения);

	КонецЕсли;
		
	Возврат НЕ Отказ;
	
КонецФункции // ПровестиПоПартиям()

#КонецОбласти

Функция ПараметрыПроверкиОперацийСНоменклатурой()
	
	Параметры = Новый Структура;
	
	// заполняем
	Параметры.Вставить("Предупреждать", Истина);
	ТаблицыДляПроверки = Новый Массив;
	ТаблицыДляПроверки.Добавить("Товары");
	Параметры.Вставить("ТаблицыДляПроверки", ТаблицыДляПроверки);
	
	Возврат Параметры;
	
КонецФункции

Функция ПроверитьПараметрыЗапретаВыбораНоменклатуры()
	
	ПараметрыПроверки = ПараметрыПроверкиОперацийСНоменклатурой();
	ДополнительныеСвойства.Вставить("ПараметрыПроверки", ПараметрыПроверки);
	
	Возврат ОбработкаСобытийДокументаСервер.ПроверитьПараметрыЗапретаВыбораНоменклатуры(ЭтотОбъект, ПараметрыПроверки);
	
КонецФункции

#КонецОбласти

#Область Инициализация

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// Установим параметры проверки документа
ДополнительныеСвойства.Вставить("ТоварыЗапретАвтоСписанияХарактеристик", ИСТИНА);

#КонецОбласти

#КонецЕсли
