// Модуль менеджера документа "Бюджет оказания услуг по автоработам"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.БюджетОказанияУслугПоАвтоработам);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
	
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
		
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.БюджетОказанияУслугПоАвтоработам);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Автоработы.Итог("СуммаВсегоУпр"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	// Возвращаем сведения об итогах операции.
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используеся в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость выводв только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возращаемая сторка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", 
									Объединить = Ложь, ТолькоОсновныеКонтакты = Истина) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

// Функция возвращает строку для подстановки в условие запроса
// #-надо заменить на имя поля, &-надо заменить на имя параметра.
//
// Параметры:
//	ВидСравн - ВидСравнения - Вид сравнения.
//
// Возвращаемое значение:
//	Строка - Строка подстановки в условие запроса.
//
Функция СформироватьСтрокуВидаСравнения(ВидСравн) Экспорт
	
	Если ТипЗнч(ВидСравн)<>Тип("ВидСравнения") Тогда
		Возврат "";
	КонецЕсли; 
	
	СтрокаУсловия = "";
	Если ВидСравн = ВидСравнения.Равно Тогда
		СтрокаУсловия = "#=&";
	ИначеЕсли ВидСравн= ВидСравнения.НеРавно Тогда
		СтрокаУсловия = "#<>&";
	ИначеЕсли ВидСравн= ВидСравнения.ВСписке Тогда
		СтрокаУсловия = "# В (&)";
	ИначеЕсли ВидСравн= ВидСравнения.ВСпискеПоИерархии Тогда
		СтрокаУсловия = "# В ИЕРАРХИИ (&)";
	ИначеЕсли ВидСравн= ВидСравнения.ВИерархии Тогда
		СтрокаУсловия = "# В ИЕРАРХИИ (&)";	
	ИначеЕсли ВидСравн= ВидСравнения.НеВСписке Тогда
		СтрокаУсловия = "НЕ # В (&)";
	ИначеЕсли ВидСравн= ВидСравнения.НеВСпискеПоИерархии Тогда
		СтрокаУсловия = "НЕ # В ИЕРАРХИИ (&)";
	ИначеЕсли ВидСравн= ВидСравнения.НеВИерархии Тогда
		СтрокаУсловия = "НЕ # В ИЕРАРХИИ (&)";
	ИначеЕсли ВидСравн= ВидСравнения.Больше Тогда
		СтрокаУсловия = "#>&";
	ИначеЕсли ВидСравн= ВидСравнения.БольшеИлиРавно Тогда
		СтрокаУсловия = "#>=&";
	ИначеЕсли ВидСравн= ВидСравнения.Меньше Тогда
		СтрокаУсловия = "#<&";
	ИначеЕсли ВидСравн= ВидСравнения.МеньшеИлиРавно Тогда
		СтрокаУсловия = "#<=&";
	КонецЕсли;
	
	Возврат СтрокаУсловия;
	
КонецФункции // СформироватьСтрокуВидаСравнения()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("СценарийПланирования");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Автоработы");
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("Автоработы.Авторабота");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеАвтоработы = Новый Массив();
	УникальныеАвтоработы.Добавить("Авторабота");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Автоработы", УникальныеАвтоработы);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Автоработы.Количество() > 0);
	
	Если ЕстьРеквизит(Объект, , "Автоработы") Тогда
		ПараметрыДействия.Вставить("ОбъектЗаполненАвтоработами", Объект.Автоработы.Количество() > 0);
	КонецЕсли;
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаТабличнойЧастиАвтоработы.ПерезаполнитьЦеныТабличнойЧасти(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СценарийПланированияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("ДатаИзПериода" , Объект.ДатаПланирования);
	Параметры.Вставить("Периодичность" , Объект.СценарийПланирования.Периодичность);
	Параметры.Вставить("Действие"      , 0);
	
	ПланированиеСервер.ПолучитьДатыПланируемогоПериода(Параметры);
	
	Объект.ДатаПланирования = Параметры.ДатаНачала;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтоработы

// Обработчик события возникающего при изменении данных реквизита "Авторабота" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыАвтоработаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Строка.Авторабота) Тогда
		Возврат;
	КонецЕсли;
	
	// Если работа задана - получим ее цену согласно класса автомобиля (если автомобиль выбран).
	ЦенаАвтоработы = ЦенообразованиеСервер.ПолучитьЦенуАвтоработы(
		Объект.ТипЦен,
		Строка.Авторабота,
		Справочники.Модели.ПустаяСсылка(),
		Справочники.Контрагенты.ПустаяСсылка(),
		Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка(),
		Справочники.Цеха.ПустаяСсылка(),
		Справочники.ВидыРемонта.ПустаяСсылка(),,
		Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
		Объект.Дата);
	
	Строка.Цена = ЦенаАвтоработы.Цена*ЦенаАвтоработы.НормаВремени;
	РассчитатьСуммуСтроки("Цена", Объект, Строка, ПараметрыДействия);
	
	Если ЕстьРеквизит(Объект, "СтавкаНДС", "Автоработы") Тогда
		Строка.СтавкаНДС = Строка.Авторабота.Номенклатура.СтавкаНДС;
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Авторабота" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	РассчитатьСуммуСтроки("Количество", Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Авторабота" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	РассчитатьСуммуСтроки("Цена", Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Авторабота" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыСуммаВсегоУпрПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	РассчитатьСуммуСтроки("СуммаВсегоУпр", Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// расчет суммы по строке
//
// Параметры:
//	ТочкаВхода - Строка - направление расчета суммовых показателей строки.
//	Объект - ДокументОбъект или ОбъектФормы - Объект расчета
//	Строка - Строка табличной части - строка тч для расчета
//	ПараметрыДействия - Структура - Дополнительные парамтеры расчета.
//	
Процедура РассчитатьСуммуСтроки(ТочкаВхода, Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если ТочкаВхода = "Цена" ИЛИ ТочкаВхода = "Количество" Тогда
		Строка.СуммаВсегоУпр = Строка.Количество*Строка.Цена;
		
		// Получим курсы упр. и рег. валюты на дату документа
		КоэфПересчета   = РаботаСКурсамиВалютПлатформа.ПолучитьКоэффициентПересчетаВалют(Объект.Дата);
		Строка.СуммаНДС = Строка.СуммаВсегоУпр*КоэфПересчета*Справочники.СтавкиНДС.ОсновнаяСтавкаНДС.Ставка/100;
	КонецЕсли;
	
	Если ТочкаВхода = "СуммаВсегоУпр" Тогда
		КоэфПересчета   = РаботаСКурсамиВалютПлатформа.ПолучитьКоэффициентПересчетаВалют(Объект.Дата);
		Строка.СуммаНДС = Строка.СуммаВсегоУпр*КоэфПересчета*Справочники.СтавкиНДС.ОсновнаяСтавкаНДС.Ставка/100;
		Строка.Цена     = ?(Строка.Количество = 0, Строка.СуммаВсегоУпр, Строка.СуммаВсегоУпр/Строка.Количество);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт

	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Автоработы");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "БюджетОказанияУслугПоАвтоработам");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Автоработы");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СценарийПланирования",            "СценарийПланирования");
	ПараметрыФормы.Вставить("КоличествоПериодов",              "КоличествоПериодов");
	ПараметрыФормы.Вставить("КоэффициентРоста",                "КоэффициентРоста");
	ПараметрыФормы.Вставить("КоэффициентСезонности",           "КоэффициентСезонности");
	ПараметрыФормы.Вставить("ТипАнализа",                      "ТипАнализа");
	ПараметрыФормы.Вставить("ПоказательПланирования",          "ПоказательПланирования");
	ПараметрыФормы.Вставить("СпособОкругления",                "СпособОкругления");
	ПараметрыФормы.Вставить("НеУчитыватьПериодыБезДанных",     "НеУчитыватьПериодыБезДанных");
	ПараметрыФормы.Вставить("КоличествоСезонов",               "КоличествоСезонов");
	ПараметрыФормы.Вставить("СмещениеПланирования",            "СмещениеПланирования");
	ПараметрыФормы.Вставить("ДатаПланирования",                "ДатаПланирования");
	ПараметрыФормы.Вставить("МодельПрогнозирования",           "МодельПрогнозирования");
	ПараметрыФормы.Вставить("Параметр1",                       "Параметр1");
	ПараметрыФормы.Вставить("Параметр2",                       "Параметр2");
	ПараметрыФормы.Вставить("Параметр3",                       "Параметр3");
	ПараметрыФормы.Вставить("РасчетСезонности",                "РасчетСезонности");
	ПараметрыФормы.Вставить("ДокументОснование",               "ДокументОснование");
	ПараметрыФормы.Вставить("МетодыРаспределенияКатегорий",    "МетодыРаспределенияКатегорий");
	ПараметрыФормы.Вставить("ПараметрУправленияРаспределением","ПараметрУправленияРаспределением");
	ПараметрыФормы.Вставить("ТипЦен",                          "ТипЦен");
	ПараметрыФормы.Вставить("Дата",                            "Дата");
	ПараметрыФормы.Вставить("КурсДокумента",                   "КурсДокумента");
	ПараметрыФормы.Вставить("ПодразделениеКомпании",           "ПодразделениеКомпании");
	ПараметрыФормы.Вставить("Владелец",                        "Ссылка");
	
	ФормаАвтозаполнения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ФормаАвтозаполнения.ВыборСсылки 		= "Документ.БюджетОказанияУслугПоАвтоработам.Форма.ФормаДляЗаполненияПростымСпособом";
	ФормаАвтозаполнения.Обязательный 		= Истина;
	
	ФормаАвтозаполнения.Параметры = ПараметрыФормы;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "АвтоработыПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Наивное прогнозирование'");
	Команда.Идентификатор	= "ЗаполнениеТабличнойЧастиАвтоработы";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автоработы";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("РезультатВыбора", ФормаАвтозаполнения);

	ФормаАвтозаполнения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ФормаАвтозаполнения.ВыборСсылки 		= "Документ.БюджетОказанияУслугПоАвтоработам.Форма.ФормаДляЗаполненияМатМетодами";
	ФормаАвтозаполнения.Обязательный 		= Истина;
	
	ФормаАвтозаполнения.Параметры = ПараметрыФормы;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "АвтоработыПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Прогнозирование мат. методами'");
	Команда.Идентификатор	= "ЗаполнениеТабличнойЧастиАвтоработы";
	Команда.Порядок			= 51;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автоработы";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("РезультатВыбора", ФормаАвтозаполнения);

	ФормаАвтозаполнения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ФормаАвтозаполнения.ВыборСсылки 		= "Документ.БюджетОказанияУслугПоАвтоработам.Форма.ФормаДляЗаполненияПоДокументуОснованию";
	ФормаАвтозаполнения.Обязательный 		= Истина;
	
	ФормаАвтозаполнения.Параметры = ПараметрыФормы;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "АвтоработыПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнение по документу основанию'");
	Команда.Идентификатор	= "ЗаполнениеТабличнойЧастиАвтоработы";
	Команда.Порядок			= 52;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автоработы";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("РезультатВыбора", ФормаАвтозаполнения);

КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("АвтоработыЗаполнениеПоДаннымПрошлогоПериода.Видимость",                  Истина);
	ПараметрыКоманд.Вставить("АвтоработыЗаполнениеПоДаннымПрошлогоПериода.Доступность",                Истина);
	ПараметрыКоманд.Вставить("АвтоработыЗаполнениеМетодамиМатематическогоПрогнозирования.Видимость",   Истина);
	ПараметрыКоманд.Вставить("АвтоработыЗаполнениеМетодамиМатематическогоПрогнозирования.Доступность", Истина);
	ПараметрыКоманд.Вставить("АвтоработыЗаполнениеПоДокументуОснованию.Видимость",                     Истина);
	ПараметрыКоманд.Вставить("АвтоработыЗаполнениеПоДокументуОснованию.Доступность",                   Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения табличной части документа "Автоработы" выбранным методом
//
Функция ЗаполнениеТабличнойЧастиАвтоработы(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	Если ПараметрыКоманды.Свойство("РезультатВыбора") Тогда
		ПараметрыЗаполнения = ПараметрыКоманды;
	Иначе
		ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	КонецЕсли;
	Объект = ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Результат = ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗаполнения, "РезультатВыбора", Неопределено);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, ПараметрыЗаполнения.РезультатВыбора);
		Для Каждого ТекСтрока Из ПараметрыЗаполнения.РезультатВыбора.ТаблицаАвторабот Цикл
			НоваяСтрока = Объект.Автоработы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.СтавкаНДС = НоваяСтрока.Авторабота.Номенклатура.СтавкаНДС;
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции // ЗаполнениеТабличнойЧастиАвтоработы()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.БюджетОказанияУслугПоАвтоработам",
		"ПФ_MXL_БюджетОказанияУслугПоАвтоработам",
		НСтр("ru = 'Бюджет оказания услуг по автоработам'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_БюджетОказанияУслугПоАвтоработам") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_БюджетОказанияУслугПоАвтоработам",
															"Бюджет оказания услуг по автоработам",
															ПечатьБюджетОказанияУслугПоАвтоработам(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует табличный документ 
// 
// Параметры:
//  ТабДокумент - табличный документ.
//
// Возвращаемое значение:
//  ТабДокумент - возвращает сформированный табличный документ.
//
Функция ПечатьБюджетОказанияУслугПоАвтоработам(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_БюджетОказанияУслугПоАвтоработам_БюджетОказанияУслугПоАвтоработам";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.БюджетОказанияУслугПоАвтоработам.ПФ_MXL_БюджетОказанияУслугПоАвтоработам");
		
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// заголовок
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка          = ТекстЗаголовка;
		Если ЗначениеЗаполнено(Документ.ПодразделениеКомпании) Тогда
			ОбластьЗаголовок.Параметры.ПредставлениеПодразделениеКомпании = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ПодразделениеКомпании);
		КонецЕсли;
		ОбластьЗаголовок.Параметры.ПредставлениеСценарийПланирования = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СценарийПланирования);
		
		Параметры = Новый Структура;
		Параметры.Вставить("ДатаИзПериода", Документ.ДатаПланирования);
		Параметры.Вставить("Периодичность", Документ.СценарийПланирования.Периодичность);
		Параметры.Вставить("Действие", 0);
		ПредставлениеПериодаПланирования = ПланированиеСервер.ПолучитьДатыПланируемогоПериода(Параметры);
		ОбластьЗаголовок.Параметры.ПредставлениеПериодаПланирования = ПредставлениеПериодаПланирования;
		
		// выведем или удалим ШК
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// готовим шапку
		НомерСтраницы = 2; НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего",Документ.ВалютаДокумента,0,0,0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		СтруктураИтоговПоСтранице = Новый Структура;
		СтруктураИтоговПоСтранице.Вставить("Количество", 0);
		СтруктураИтоговПоСтранице.Вставить("СуммаВсегоУпр", 0);
		СтруктураИтоговПоСтранице.Вставить("СуммаНДС", 0);
		
		// форматы вывода
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		
		ИндексСтроки = 0;
		ВыборкаТабличнойЧасти = Документ.Автоработы;
		
		Для каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			ИндексСтроки = ИндексСтроки+1;
			ОбластьСтрока.Параметры.НомерСтроки = ИндексСтроки;
			ОбластьСтрока.Параметры.РаботаНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТЧ.Авторабота);
			ОбластьСтрока.Параметры.Работа = СтрокаТЧ.Авторабота;
			ОбластьСтрока.Параметры.Количество	= Формат(СтрокаТЧ.Количество, ФорматВыводаКоличества);
			ОбластьСтрока.Параметры.Цена		= Формат(СтрокаТЧ.Цена, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СуммаУпр	= Формат(СтрокаТЧ.СуммаВсегоУпр, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СуммаНДС	= Формат(СтрокаТЧ.СуммаНДС, ФорматВыводаСуммы);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Автоработы.Индекс(СтрокаТЧ) = Документ.Автоработы.Количество()-1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока, ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ, мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего",Документ.ВалютаДокумента,0,0);
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ,СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент,ОбластьИтогоПоСтранице,СтруктураИтоговПоСтранице,Документ);
		КонецЕсли;
		
		// заполнение подвала и итогов
		ИтогоКоличество		= ВыборкаТабличнойЧасти.Итог("Количество");
		СуммаВсего	= ВыборкаТабличнойЧасти.Итог("СуммаВсегоУпр");
		НДСВсего     	= ВыборкаТабличнойЧасти.Итог("СуммаНДС");
		
		ОбластьПодвал.Параметры.ИтогоКоличество = Формат(ИтогоКоличество, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.ИтогоСуммаВсегоУпр = Формат(СуммаВсего, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.ИтогоСуммаНДС = Формат(НДСВсего, ФорматВыводаСуммы);
		
		ОбластьПодвал.Параметры.СуммаПрописью = "Всего запланировано работ "+ВыборкаТабличнойЧасти.Количество()+" на сумму " + РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего,Документ.ВалютаДокумента);
		
		ОбластьПодвал.Параметры.ПредставлениеАвтор = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Автор);
		
		УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент,ОбластьПодвал,,,НомерСтраницы,,Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьБюджетОказанияУслугПоАвтоработам()

#КонецОбласти

#КонецОбласти
	
#КонецЕсли