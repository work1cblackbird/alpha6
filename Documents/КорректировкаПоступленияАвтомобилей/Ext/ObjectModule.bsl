// Модуль объекта документа "Корректировка поступления автомобиля"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)

	Если Не ВозможенВВодНаОсновании(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения)
		И НЕ ОбработкаСобытийДокументаСервер.ВводСПустымОснованием(ДанныеЗаполнения) Тогда
		
		Если НЕ ДанныеЗаполнения.Проведен Тогда
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
				ЭтотОбъект,
				Нстр("ru = 'Корректировка поступления автомобилей вводится только на основании проведенного документа.'")
			);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтотОбъект.Ссылка.Пустая() Тогда
		Контрагент = Неопределено;
		ДоговорВзаиморасчетов = Неопределено;
	КонецЕсли;
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ОбщегоНазначения.СообщитьПользователю(Нстр("ru = 'Ввод корректировки реализации автомобилей возможен только на основании.'"), ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	Если
		ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.КорректировкаПоступленияАвтомобилейИсправлениеВПервичныхДокументах")
		И НЕ ЗначениеЗаполнено(НомерИсправления)
	Тогда
		НомерИсправления = 1;
	КонецЕсли;
	
	Сделка = ПолучитьСделку();
	
	Основания = ПолучитьСписокОснований();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаРег = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	// заполняем суммы автомобилей
	Для Каждого Автомобиль Из Автомобили Цикл
		Суммы = ПолучитьСебестоимостьАвтомобиля(Автомобиль.Автомобиль, Основания);
		
		Если ВалютаРег = ВалютаДокумента Тогда
			Автомобиль.СуммаВсего = Суммы.Сумма;
		Иначе
			Автомобиль.СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				Суммы.СуммаУпр,
				ВалютаУпр,
				КурсВалютыУпр,
				ВалютаДокумента,
				КурсДокумента
			);
		КонецЕсли;
		Документы.КорректировкаПоступленияАвтомобилей.АвтомобилиСуммаВсегоПриИзменении(
			ЭтотОбъект,
			Автомобиль,
			ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия
		);
		
		Автомобиль.СуммаНДС = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			Суммы.СуммаНДС,
			ВалютаРег,
			Дата,
			ВалютаДокумента,
			КурсДокумента
		);
		
		// заполним доп реквизиты
		Автомобиль.СуммаВсегоПоДокументуПоступления = Автомобиль.СуммаВсего;
		Автомобиль.СуммаПоДокументуПоступления      = Автомобиль.Сумма;
		Автомобиль.СуммаНДСПоДокументуПоступления   = Автомобиль.СуммаНДС;
		Автомобиль.СтавкаНДСПоДокументуПоступления  = Автомобиль.СтавкаНДС;
		Автомобиль.ГТДПоДокументуПоступления        = Автомобиль.ГТД;
		Автомобиль.КоличествоПоДокументуПоступления = Автомобиль.Количество;
		Автомобиль.ИзДокументаОснования             = Истина;
		
		Документы.КорректировкаПоступленияАвтомобилей.РасчетРазницы(
			ЭтотОбъект,
			Автомобиль,
			ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия
		);
	КонецЦикла;
	
	// Подсчет новой суммы документа назначения
	СуммаДокумента = Автомобили.Итог("СуммаВсего");
	
	ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия.Вставить("ТребуетсяУстановкаЦен", Ложь);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоУниверсальныйДокумент 
		И (Не ЗначениеЗаполнено(ЭтотОбъект.ВхДокДата)
		 Или Не ЗначениеЗаполнено(ЭтотОбъект.ВхДокНомер))Тогда
		 
		 ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Для документа с признаком УКД необходимо заполнить данные входящего документа!'"),
				ЭтотОбъект,,, Отказ);

	КонецЕсли; 	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	// заполним сделку
	Сделка = ПолучитьСделку();
	
	// Проверим хоз. операции
	// составим списко документов движений.
	Если ХозОперация = Справочники.ХозОперации.КорректировкаПоступленияАвтомобилейКорректировкаПоСогласованиюСторон Тогда
		
		// заполним значение до корректировки
		Для Каждого Строка Из Автомобили Цикл
			Строка.СуммаВсегоДоКорректировки = Строка.СуммаВсегоПоДокументуПоступления;
			Строка.СуммаНДСДоКорректировки   = Строка.СуммаНДСПоДокументуПоступления;
		КонецЦикла;
		
	ИначеЕсли ХозОперация = Справочники.ХозОперации.КорректировкаПоступленияАвтомобилейИсправлениеВПервичныхДокументах Тогда
		
		// проверим введенные на основании корректировки
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПодчиненныеДокументы.Ссылка КАК Документ
		|ИЗ
		|	КритерийОтбора.ПодчиненныеДокументы(&Основание) КАК ПодчиненныеДокументы
		|ГДЕ
		|	ПодчиненныеДокументы.Ссылка ССЫЛКА Документ.КорректировкаПоступленияАвтомобилей
		|	И НЕ ПодчиненныеДокументы.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.КорректировкаПоступленияАвтомобилейКорректировкаПоСогласованиюСторон)
		|	И НЕ ПодчиненныеДокументы.Ссылка = &Ссылка
		|	И ПодчиненныеДокументы.Ссылка.Проведен";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Основание", ДокументОснование);
		Запрос.УстановитьПараметр("Ссылка",    Ссылка);
		ВыполнениеЗапроса = Запрос.Выполнить();
		
		Если НЕ ВыполнениеЗапроса.Пустой() Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'К документу %1 введено больше одного корректировочного документа с хоз. операцей ""Исправление первичных документов"". 
				|Каждую последующую корректировку следует вводить на основании предыдущей.'"),
				Строка(ДокументОснование)
			);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка корректности типа цен.
	Если ТипЦен.Рассчитывается Тогда
		
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Использование расчетных типов цен запрещено.'"), ЭтотОбъект);
		
	КонецЕсли;
	
	ЭтоУниверсальныйДокумент = ЭтоУниверсальныйДокумент
		И Документы.КорректировкаПоступленияАвтомобилей.ВозможенВводСчетФактурыПолученной(ЭтотОбъект);
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоОстаткамАвтомобилейПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоКомплектацииПередПроведением(Ссылка, ДополнительныеСвойства);
	
	СуммаДокумента        = Автомобили.Итог("СуммаВсего");
	СуммаДокументаРазница = Автомобили.Итог("СуммаВсегоРазница");
	
КонецПроцедуры

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Отказ ИЛИ ОбновитьГТДАвтомобилей();
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ТипСчетФактуры", "СчетФактураПолученный");
	ОбработкаСобытийДокументаСервер.УдалитьПодчиненныеСФ(ЭтотОбъект, ПараметрыДействия, Отказ);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ВозможенВВодНаОсновании(Сделка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТаблицаДокумента = ПолучитьТаблицуАвтомобилей();
	СписокОснований  = ПолучитьСписокОснований();
	
	// движения по регистру Остатки автомобилей
	НеобходимоСкорректироватьСебестоимость = ВыполнитьДвиженияПоОстаткам(ТаблицаДокумента, СписокОснований, Отказ);
	
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	ДополнительныеСвойства.Вставить(
		"СпособУчетаВзаиморасчетовПоРасчетнымДокументам",
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам);
	
	// движения по регистру взаиморасчетов
	Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		ВыполнитьДвиженияПоВзаиморасчетам(Отказ, РежимПроведения);
	КонецЕсли;
	
	// движения по продажам
	ВыполнитьДвиженияПоРегистрамРеализации(НеобходимоСкорректироватьСебестоимость, ТаблицаДокумента, Отказ);
	
	Документы.КорректировкаПоступленияАвтомобилей.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	
	ВыполнитьДвиженияПоВозвратуАвтомобилей(ТаблицаДокумента, Отказ, РежимПроведения);
	
	Если Не ДополнительныеСвойства.ТаблицыДвиженийДокумента.Свойство("РасчетыСКонтрагентами") Тогда
		Документы.КорректировкаПоступленияАвтомобилей.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	КонецЕсли;
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект); 
	
	// Проверим налиие прослеживаемых товаров, которые были возвращены из розницы
	ТаблицаПрослеживаемыхТоваров = Документы.КорректировкаПоступленияАвтомобилей.ОперацииСПрослеживаемымиТоварами(
		ЭтотОбъект);
	НаборЗаписейОперацииПрослеживаемости = Движения.ОперацииПрослеживаемыхТоваров;
	НаборЗаписейОперацииПрослеживаемости.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейОперацииПрослеживаемости.ТаблицаПрослеживаемыхТоваров = ТаблицаПрослеживаемыхТоваров;
	Если НЕ НаборЗаписейОперацииПрослеживаемости.ДобавитьОперациюПрослеживаемости() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	// границы
	РаботаСГраницами.СдвинутьГраницуОстатковАвтомобилей(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	ПараметрыДействия = Новый Структура;
	ОбработкаСобытийДокументаСервер.СоздатьОбновитьСФПолученный(ЭтотОбъект, ДополнительныеСвойства, ПараметрыДействия, Отказ);
	
КонецПроцедуры // ОбработкаПроведения

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Формирует движения документа по партионным регистрам
// Возвращает Истина - все хорошо, ложь - чего-то не так.
Функция ПровестиПоПартиям(Режим,ДокументСсылка,ТаблицаДокумента,АвтомобилиКВозврату) Экспорт
	Отказ=Ложь;
	
	// получим шапку документа
	ШапкаДокумента=ПолучитьШапкуДокумента(ДокументСсылка);
	
	Если Не ДополнительныеСвойства.Свойство("ТаблицыДвиженийДокумента") Тогда
		Документы.КорректировкаПоступленияАвтомобилей.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	КонецЕсли;
	
	// Получим способ ведения баланса.
	БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
	
	Если ДополнительныеСвойства.Свойство("СпособУчетаВзаиморасчетовПоРасчетнымДокументам") Тогда
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам = ДополнительныеСвойства.СпособУчетаВзаиморасчетовПоРасчетнымДокументам;
	Иначе
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
			РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	КонецЕсли;
	
	// Определим необходимость корректирующих проводок для поддержания баланса по подразделениям.
	ПодразделениеСклад                 = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(СкладКомпании.ПодразделениеКомпании, ШапкаДокумента.Дата);
	ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ДоговорВзаиморасчетов.ПодразделениеКомпании, ШапкаДокумента.Дата);
	БалансовыеПодразделенияНеРавны     = (ПодразделениеДоговорВзаиморасчетов<>ПодразделениеСклад);
		
	// Если было отложенное проведение по партиям, то :
	// Очистим возможные движения по регистру комплектации автомобилей. 
	НаборЗаписейПартионногоРегистра=РегистрыНакопления.КомплектацияАвтомобилей.СоздатьНаборЗаписей();
	НаборЗаписейПартионногоРегистра.Отбор.Регистратор.Значение=ШапкаДокумента.Ссылка;
	НаборЗаписейПартионногоРегистра.Отбор.Регистратор.Использование=Истина;
	НаборЗаписейПартионногоРегистра.Записать();
	
	// Спишем оборудование автомобиля
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КомплектацияАвтомобилейОстатки.Автомобиль КАК Автомобиль,
	               |	КомплектацияАвтомобилейОстатки.СкладКомпании КАК СкладКомпании,
	               |	КомплектацияАвтомобилейОстатки.Номенклатура КАК Номенклатура,
	               |	КомплектацияАвтомобилейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	КомплектацияАвтомобилейОстатки.СтатусПартии КАК СтатусПартии,
	               |	КомплектацияАвтомобилейОстатки.Партия КАК Партия,
	               |	КомплектацияАвтомобилейОстатки.ГТД КАК ГТД,
	               |	КомплектацияАвтомобилейОстатки.КоличествоОстаток КАК Количество,
	               |	КомплектацияАвтомобилейОстатки.СуммаОстаток КАК Сумма,
	               |	КомплектацияАвтомобилейОстатки.СуммаНДСОстаток КАК СуммаНДС,
	               |	КомплектацияАвтомобилейОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	               |	КомплектацияАвтомобилейОстатки.СуммаУпрОстаток КАК СуммаУпр,
	               |	КомплектацияАвтомобилейОстатки.СуммаНДСУпрОстаток КАК СуммаНДСУпр,
	               |	КомплектацияАвтомобилейОстатки.СуммаБезНДСУпрОстаток КАК СуммаБезНДСУпр,
	               |	КомплектацияАвтомобилейОстатки.СуммаПродажиОстаток КАК СуммаПродажи,
	               |	КомплектацияАвтомобилейОстатки.СуммаПродажиУпрОстаток КАК СуммаПродажиУпр
	               |ИЗ
	               |	РегистрНакопления.КомплектацияАвтомобилей.Остатки(&МоментВремени, Автомобиль В (&СписокАвтомобилей)) КАК КомплектацияАвтомобилейОстатки";
	Запрос.УстановитьПараметр("МоментВремени"     , МоментВремени());
	Запрос.УстановитьПараметр("Ссылка"            , Ссылка);
	Запрос.УстановитьПараметр("СписокАвтомобилей" , АвтомобилиКВозврату);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДвижениеКомплектации = Движения.КомплектацияАвтомобилей.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеКомплектации, Выборка);
		ДвижениеКомплектации.Период          = Дата;
		ДвижениеКомплектации.Регистратор     = Ссылка;
		ДвижениеКомплектации.ВидДвижения     = ВидДвиженияНакопления.Приход;
		ДвижениеКомплектации.Количество      = -ДвижениеКомплектации.Количество;
		ДвижениеКомплектации.Сумма           = -ДвижениеКомплектации.Сумма;
		ДвижениеКомплектации.СуммаНДС        = -ДвижениеКомплектации.СуммаНДС;
		ДвижениеКомплектации.СуммаБезНДС     = -ДвижениеКомплектации.СуммаБезНДС;
		ДвижениеКомплектации.СуммаУпр        = -ДвижениеКомплектации.СуммаУпр;
		ДвижениеКомплектации.СуммаНДСУпр     = -ДвижениеКомплектации.СуммаНДСУпр;
		ДвижениеКомплектации.СуммаБезНДСУпр  = -ДвижениеКомплектации.СуммаБезНДСУпр;
		ДвижениеКомплектации.СуммаПродажи    = -ДвижениеКомплектации.СуммаПродажи;
		ДвижениеКомплектации.СуммаПродажиУпр = -ДвижениеКомплектации.СуммаПродажиУпр;
		
	КонецЦикла;
	
	Движения.КомплектацияАвтомобилей.Записать();
	
	// двигаем границу последовательности комплектаций автомобилей
	Если Ссылка<>ДокументСсылка Тогда
		
		РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоКомплектацииПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		
	КонецЕсли;
	
	РаботаСГраницами.СдвинутьГраницуКомплектации(ДокументСсылка, ДополнительныеСвойства, Движения);
	
	ВалютаРегл=Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(); 
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл,ШапкаДокумента.МоментВремени);
	КурсРегл = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	ВалютаУпр=Константы.ВалютаУправленческогоУчетаКомпании.Получить(); 
	Если НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр) Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр,ШапкаДокумента.МоментВремени);
		КурсУпр = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	Иначе
		КурсУпр = ШапкаДокумента.КурсВалютыУпр;
	КонецЕсли;	
	
	// спишем реализованное оборудование
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	КомплектацияАвтомобилей.Период,
	|	КомплектацияАвтомобилей.Регистратор,
	|	КомплектацияАвтомобилей.НомерСтроки КАК НомерСтроки,
	|	КомплектацияАвтомобилей.Активность,
	|	КомплектацияАвтомобилей.ВидДвижения,
	|	КомплектацияАвтомобилей.Автомобиль,
	|	КомплектацияАвтомобилей.СкладКомпании,
	|	КомплектацияАвтомобилей.Номенклатура,
	|	КомплектацияАвтомобилей.ХарактеристикаНоменклатуры,
	|	КомплектацияАвтомобилей.СтатусПартии,
	|	КомплектацияАвтомобилей.Партия,
	|	КомплектацияАвтомобилей.ГТД,
	|	КомплектацияАвтомобилей.Количество,
	|	КомплектацияАвтомобилей.Сумма,
	|	КомплектацияАвтомобилей.СуммаНДС,
	|	КомплектацияАвтомобилей.СуммаУпр,
	|	КомплектацияАвтомобилей.СуммаНДСУпр,
	|	КомплектацияАвтомобилей.СуммаПродажи,
	|	КомплектацияАвтомобилей.СуммаПродажиУпр,
	|	КомплектацияАвтомобилей.ХозОперация,
	|	КомплектацияАвтомобилей.СтавкаНДС
	|ИЗ
	|	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
	|ГДЕ
	|	КомплектацияАвтомобилей.Регистратор = &Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Запрос.УстановитьПараметр("Регистратор", ШапкаДокумента.Ссылка);
	РезультатКомплектацияАвтомобилей = Запрос.Выполнить();
	ВыборкаКомплектацияАвтомобилей = РезультатКомплектацияАвтомобилей.Выбрать();
	НаборЗаписейРеализованныеТовары = Движения.РеализованныеТовары;
	НаборЗаписейПродажи = Движения.Продажи;
	СуммаПродажи = 0;
	СуммаПродажиУпр = 0;
	Пока ВыборкаКомплектацияАвтомобилей.Следующий() Цикл
		Если ТипЗнч(ВыборкаКомплектацияАвтомобилей.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
			Если ВыборкаКомплектацияАвтомобилей.СтатусПартии=Перечисления.СтатусыПартий.ТоварПринятыйКомиссия Тогда
				НоваяЗапись = НаборЗаписейРеализованныеТовары.Добавить();
				НоваяЗапись.ВидДвижения                = ВидДвиженияНакопления.Приход;
				НоваяЗапись.Период                     = ШапкаДокумента.Дата;
				НоваяЗапись.Регистратор                = ШапкаДокумента.Ссылка;
				НоваяЗапись.Контрагент                 = ШапкаДокумента.Контрагент;
				НоваяЗапись.ДоговорВзаиморасчетов      = ШапкаДокумента.ДоговорВзаиморасчетов;
				НоваяЗапись.Автомобиль                 = ВыборкаКомплектацияАвтомобилей.Автомобиль;
				НоваяЗапись.Номенклатура               = ВыборкаКомплектацияАвтомобилей.Номенклатура;
				НоваяЗапись.ХарактеристикаНоменклатуры = ВыборкаКомплектацияАвтомобилей.ХарактеристикаНоменклатуры;
				НоваяЗапись.ДокументПередачи           = ВыборкаКомплектацияАвтомобилей.Партия;
				НоваяЗапись.ГТД                        = ВыборкаКомплектацияАвтомобилей.ГТД;
				НоваяЗапись.Количество                 = -ВыборкаКомплектацияАвтомобилей.Количество;
				НоваяЗапись.СуммаУпр                   = -ВыборкаКомплектацияАвтомобилей.СуммаУпр;
				НоваяЗапись.СуммаНДСУпр                = -ВыборкаКомплектацияАвтомобилей.СуммаНДСУпр;
				НоваяЗапись.СуммаБезНДСУпр             = -(НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр);
				НоваяЗапись.СуммаРегл                  = -ВыборкаКомплектацияАвтомобилей.Сумма;
				НоваяЗапись.СуммаНДС                   = -ВыборкаКомплектацияАвтомобилей.СуммаНДС;
				НоваяЗапись.СуммаБезНДС                = -(НоваяЗапись.СуммаРегл - НоваяЗапись.СуммаНДС);
				НоваяЗапись.СуммаПродажиРегл           = -ВыборкаКомплектацияАвтомобилей.СуммаПродажи;
				НоваяЗапись.СуммаПродажи               = -ВыборкаКомплектацияАвтомобилей.СуммаПродажиУпр;
				// Себестоимость равна продаже.
				Если НЕ НоваяЗапись.ДоговорВзаиморасчетов.КомиссияОтчетНаОснованииПродаж Тогда
					НоваяЗапись.СуммаРегл      = НоваяЗапись.СуммаПродажиРегл;
					НоваяЗапись.СуммаНДС       = Окр((НоваяЗапись.СуммаРегл * ВыборкаКомплектацияАвтомобилей.СтавкаНДС.Ставка)/(100 + ВыборкаКомплектацияАвтомобилей.СтавкаНДС.Ставка),2);
					НоваяЗапись.СуммаБезНДС    = НоваяЗапись.СуммаРегл - НоваяЗапись.СуммаНДС;
					НоваяЗапись.СуммаУпр       = НоваяЗапись.СуммаПродажи;
					НоваяЗапись.СуммаНДСУпр    = Окр(НоваяЗапись.СуммаПродажи*ВыборкаКомплектацияАвтомобилей.СтавкаНДС.Ставка/(100 + ВыборкаКомплектацияАвтомобилей.СтавкаНДС.Ставка),2);
					НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
				КонецЕсли;
				НоваяЗапись.ХозОперация                = ШапкаДокумента.ХозОперация;
			КонецЕсли;
			НоваяЗапись = НаборЗаписейПродажи.Добавить();
			НоваяЗапись.Период                     = ШапкаДокумента.Дата;
			НоваяЗапись.Регистратор                = ШапкаДокумента.Ссылка;
			НоваяЗапись.ПодразделениеКомпании      = ШапкаДокумента.ПодразделениеКомпании;
			НоваяЗапись.Автомобиль                 = ВыборкаКомплектацияАвтомобилей.Автомобиль;
			НоваяЗапись.Номенклатура               = ВыборкаКомплектацияАвтомобилей.Номенклатура;
			НоваяЗапись.ДокументПродажи			   = ШапкаДокумента.Ссылка;
			Если ЕстьРеквизит(ВыборкаКомплектацияАвтомобилей.Партия, "Контрагент") Тогда
				НоваяЗапись.Поставщик              = ВыборкаКомплектацияАвтомобилей.Партия.Контрагент;
			КонецЕсли;
			НоваяЗапись.Покупатель                 = ШапкаДокумента.Контрагент;
			НоваяЗапись.СтатусПартии               = ВыборкаКомплектацияАвтомобилей.СтатусПартии;
			НоваяЗапись.ХозОперация                = ШапкаДокумента.ХозОперация;
			НоваяЗапись.ДоговорВзаиморасчетов      = ШапкаДокумента.ДоговорВзаиморасчетов;
			НоваяЗапись.ХарактеристикаНоменклатуры = ВыборкаКомплектацияАвтомобилей.ХарактеристикаНоменклатуры;
			НоваяЗапись.СкладКомпании              = ШапкаДокумента.СкладКомпании;
			НайденныеСтроки = ТаблицаДокумента.НайтиСтроки(Новый Структура("Автомобиль", ВыборкаКомплектацияАвтомобилей.Автомобиль));
			Если НайденныеСтроки.Количество() > 0 Тогда
				НоваяЗапись.СтавкаНДС              = НайденныеСтроки[0].СтавкаНДС;
			КонецЕсли; 
			НоваяЗапись.Партия                     = ВыборкаКомплектацияАвтомобилей.Партия;
			НоваяЗапись.ГТД                        = ВыборкаКомплектацияАвтомобилей.ГТД;
			НоваяЗапись.Количество                 = -ВыборкаКомплектацияАвтомобилей.Количество;
			НоваяЗапись.Сумма                      = -ВыборкаКомплектацияАвтомобилей.СуммаПродажи;
			НоваяЗапись.СуммаНДС                   = Окр(НоваяЗапись.Сумма*НоваяЗапись.СтавкаНДС.Ставка/100, 2);
			НоваяЗапись.СуммаУпр                   = -ВыборкаКомплектацияАвтомобилей.СуммаПродажиУпр;
			НоваяЗапись.СуммаНДСУпр                = Окр(НоваяЗапись.СуммаУпр*НоваяЗапись.СтавкаНДС.Ставка/100, 2);
			НоваяЗапись.СебестоимостьУпр           = -ВыборкаКомплектацияАвтомобилей.СуммаУпр;
			НоваяЗапись.Себестоимость              = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(-ВыборкаКомплектацияАвтомобилей.СуммаУпр,ВалютаУпр,КурсУпр,ВалютаРегл,КурсРегл),2);
			НоваяЗапись.СуммаНДСВходящий           = -ВыборкаКомплектацияАвтомобилей.СуммаНДС;
			НоваяЗапись.СуммаНДСВходящийУпр        = -ВыборкаКомплектацияАвтомобилей.СуммаНДСУпр;
			НоваяЗапись.СебестоимостьБезНДС        = НоваяЗапись.Себестоимость - НоваяЗапись.СуммаНДСВходящий;
			НоваяЗапись.СебестоимостьБезНДСУпр     = НоваяЗапись.СебестоимостьУпр - НоваяЗапись.СуммаНДСВходящийУпр;
			НоваяЗапись.ВыручкаБезНДС                      = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
			НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДС    = НоваяЗапись.Сумма + НоваяЗапись.СуммаСкидки - НоваяЗапись.СуммаНДС - Окр(НоваяЗапись.СуммаСкидки*НоваяЗапись.СтавкаНДС.Ставка/(100+НоваяЗапись.СтавкаНДС.Ставка), 2);
			НоваяЗапись.ВыручкаДоПримененияСкидки          = НоваяЗапись.Сумма + НоваяЗапись.СуммаСкидки;
			НоваяЗапись.ВыручкаБезНДСУпр                   = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
			НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДСУпр = НоваяЗапись.СуммаУпр + НоваяЗапись.СуммаСкидкиУпр - НоваяЗапись.СуммаНДСУпр - Окр(НоваяЗапись.СуммаСкидкиУпр*НоваяЗапись.СтавкаНДС.Ставка/(100+НоваяЗапись.СтавкаНДС.Ставка), 2);
			НоваяЗапись.ВыручкаДоПримененияСкидкиУпр       = НоваяЗапись.СуммаУпр + НоваяЗапись.СуммаСкидкиУпр;
			СуммаПродажи = СуммаПродажи + НоваяЗапись.Сумма;
			СуммаПродажиУпр = СуммаПродажиУпр + НоваяЗапись.СуммаУпр;
		КонецЕсли;
	КонецЦикла; 
	
	ДополнительныеСвойства.Вставить(
		"СуммаКомплектации",
		Новый Структура("СуммаПродажи, СуммаПродажиУпр", -СуммаПродажи, -СуммаПродажиУпр));
	
	Если СуммаПродажи <> 0 И (Сделка.ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилей ИЛИ
		Сделка.ХозОперация = Справочники.ХозОперации.ПереходВСобственностьАвтомобилей) Тогда
		
		Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
			
			Если Не ДополнительныеСвойства.ТаблицыДвиженийДокумента.Свойство("РасчетыСКонтрагентами") Тогда
				Документы.КорректировкаПоступленияАвтомобилей.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
			КонецЕсли;
			
		Иначе
		
			НаборЗаписейВзаиморасчеты                       = Движения.ВзаиморасчетыКомпании;
			НаборЗаписейВзаиморасчеты.ДокументОбъект        = ЭтотОбъект;
			НаборЗаписейВзаиморасчеты.РежимПроведения       = Режим;
			НаборЗаписейВзаиморасчеты.Контрагент            = Контрагент;
			НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
			НаборЗаписейВзаиморасчеты.Сделка                = Сделка;
			НаборЗаписейВзаиморасчеты.Валюта                = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
			НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем        = Истина;
			НаборЗаписейВзаиморасчеты.Сумма                            = -СуммаПродажи;
			НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц = 0;
			Отказ = НЕ НаборЗаписейВзаиморасчеты.Расход() ИЛИ Отказ;
			
			// доходы и расходы по суммовым разницам
			СуммаДоходаРасходаСуммовыхРазниц = НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
			Если СуммаДоходаРасходаСуммовыхРазниц <> 0 Тогда
				НаборЗаписейДиР                        = Движения.ДоходыИРасходы;
				НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
				НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
				НаборЗаписейДиР.ВУпрВалюте             = Истина;
				Если СуммаДоходаРасходаСуммовыхРазниц<0 Тогда
					НаборЗаписейДиР.Расход = -СуммаДоходаРасходаСуммовыхРазниц;
				Иначе
					НаборЗаписейДиР.Доход = СуммаДоходаРасходаСуммовыхРазниц;
				КонецЕсли;
				
				Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НЕ Отказ;
КонецФункции

// Возвращает выборку по шапке
// ДокументСсылка - Ссылка на документ для которого получаем шапку.
Функция ПолучитьШапкуДокумента(ДокументСсылка) Экспорт
	Запрос=Новый Запрос("
	|ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ТипЦен КАК ТипЦен,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	/////////// ПРИВАТ ////////////
	|	Док.СкладКомпании КАК СкладКомпании,
	|	Док.Контрагент КАК Контрагент,
	|	Док.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов
	|
	|ИЗ
	|	Документ.КорректировкаПоступленияАвтомобилей КАК Док
	|
	|ГДЕ
	|	Док.Ссылка=&Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Поступление автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеАвтомобилей(
	ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент = ДанныеЗаполнения.Контрагент;
	ДоговорВзаиморасчетов = ДанныеЗаполнения.ДоговорВзаиморасчетов;
	Автомобили.Загрузить(ДанныеЗаполнения.Автомобили.Выгрузить());
	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта на основании документа "Корректировака поступления автомобилей".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_КорректировкаПоступленияАвтомобилей(
	ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если
		ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.КорректировкаПоступленияАвтомобилейИсправлениеВПервичныхДокументах")
	Тогда
		НомерИсправления = ДанныеЗаполнения.НомерИсправления + 1;
	КонецЕсли;
	
	Контрагент = ДанныеЗаполнения.Контрагент;
	ДоговорВзаиморасчетов = ДанныеЗаполнения.ДоговорВзаиморасчетов;
	Автомобили.Загрузить(ДанныеЗаполнения.Автомобили.Выгрузить());
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("Количество", 0);
	НайденныеСтроки = Автомобили.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
		
		Автомобили.Удалить(ТекущаяСтрока);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ВозможенВВодНаОсновании(ДанныеЗаполнения)
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения)
		И (ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеАвтомобилей")
		Или ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкаПоступленияАвтомобилей")) Тогда
		
		Если ДанныеЗаполнения = Ссылка Тогда
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
				ЭтотОбъект,
				НСтр("ru = 'Ввод корректировки реализации автомобилей на основании самой себя запрещен.'"));
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ ДанныеЗаполнения.Проведен Тогда
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
				ЭтотОбъект,
				НСтр("ru = 'Ввод корректировки реализации автомобилей возможен только на основании проведенного документа.'"));
			Возврат Ложь;
		КонецЕсли;

		ХозОперацияОснования = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "ХозОперация", "");
		Если ХозОперацияОснования = Справочники.ХозОперации.ПоступлениеАвтомобилейКомиссия Тогда
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
				ЭтотОбъект,
				НСтр("ru = 'Ввод корректировки поступления автомобилей не возможен на основании поступления автомобилей комиссия.'"));
			Возврат Ложь;
		КонецЕсли;
		Если ХозОперацияОснования = Справочники.ХозОперации.ПоступлениеАвтомобилейОтветственноеХранение Тогда
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
				ЭтотОбъект,
				НСтр("ru = 'Ввод корректировки поступления автомобилей не возможен на основании поступления автомобилей на ответственное хранение.'"));
			Возврат Ложь;
		КонецЕсли;
		Если ХозОперацияОснования = Справочники.ХозОперации.ПереходВСобственностьАвтомобилей Тогда
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
				ЭтотОбъект,
				НСтр("ru = 'Ввод корректировки поступления автомобилей не возможен на основании перехода автомобилей в собственность.'"));
			Возврат Ложь;
		КонецЕсли;
		
		Если Документы.КорректировкаПоступленияАвтомобилей.КорректировкаНеДоступна(ДанныеЗаполнения) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'На основании <%1> введен возврат автомобилей поставщику. Ввод корректировки поступления автомобилей невозможен.'"),
				ДанныеЗаполнения);
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
				ЭтотОбъект,
				ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

Функция ПолучитьСебестоимостьАвтомобиля(Автомобиль, СписокОснований = Неопределено)
	
	Если СписокОснований = Неопределено Тогда
		СписокОснований = ПолучитьСписокОснований();
	КонецЕсли;
	
	Результат = Новый Структура("Сумма,СуммаУпр,СуммаНДС",0,0,0);
	
	// автомобили
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ОстаткиАвтомобилей.Сумма) КАК Сумма,
	|	СУММА(ОстаткиАвтомобилей.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ОстаткиАвтомобилей.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	|ГДЕ
	|	ОстаткиАвтомобилей.ВидДвижения = &ВидДвижения
	|	И ОстаткиАвтомобилей.Регистратор В(&Регистраторы)
	|	И ОстаткиАвтомобилей.Автомобиль = &Автомобиль
	|	"+?(Сделка.ХозОперация = Справочники.ХозОперации.ПереходВСобственностьАвтомобилей,"И ОстаткиАвтомобилей.СтатусПартии <> &СтатусПартии","")+"";
	
	Запрос.УстановитьПараметр("ВидДвижения"  , ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Автомобиль"   , Автомобиль);
	Запрос.УстановитьПараметр("Регистраторы" , СписокОснований);
	Запрос.УстановитьПараметр("СтатусПартии" , Перечисления.СтатусыПартий.ТоварОтветственноеХранение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.Сумма    = Результат.Сумма + Выборка.Сумма;
		Результат.СуммаУпр = Результат.СуммаУпр + Выборка.СуммаУпр;
		Результат.СуммаНДС = Результат.СуммаНДС + Выборка.СуммаНДС;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСписокОснований()
	
	Основания = Новый Массив;
	ТекОснование = ДокументОснование;
	
	Если ТекОснование = Неопределено Тогда
		Возврат Основания;
	КонецЕсли;
	
	Пока ТипЗнч(ТекОснование) <> Тип("ДокументСсылка.ПоступлениеАвтомобилей") Цикл
		Основания.Добавить(ТекОснование);
		ТекОснование = ТекОснование.ДокументОснование;
	КонецЦикла;
	
	Основания.Добавить(ТекОснование);
	
	Возврат Основания;
	
КонецФункции

Функция ПолучитьСделку(СписокОснований = Неопределено)
	
	Если СписокОснований = Неопределено Тогда
		СписокОснований = ПолучитьСписокОснований();
	КонецЕсли;
	
	Для Каждого Основание Из СписокОснований Цикл
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеАвтомобилей") Тогда
			Возврат Основание;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Документы.ПоступлениеАвтомобилей.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьТаблицуАвтомобилей()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаПоступленияАвтомобилейАвтомобили.Автомобиль КАК Автомобиль,
	|	КорректировкаПоступленияАвтомобилейАвтомобили.СуммаВсегоРазница КАК СуммаВсегоРазница,
	|	КорректировкаПоступленияАвтомобилейАвтомобили.СуммаНДСРазница КАК СуммаНДСРазница,
	|	КорректировкаПоступленияАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ОстаткиАвтомобилейОстатки.Автомобиль ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОстаток,
	|	КорректировкаПоступленияАвтомобилейАвтомобили.Количество КАК Количество,
	|	ОстаткиАвтомобилейОстатки.Партия КАК Партия
	|ИЗ
	|	Документ.КорректировкаПоступленияАвтомобилей.Автомобили КАК КорректировкаПоступленияАвтомобилейАвтомобили
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиАвтомобилей.Остатки(&МоментВремени, Автомобиль В (&СписокАвтомобилей)) КАК ОстаткиАвтомобилейОстатки
	|		ПО КорректировкаПоступленияАвтомобилейАвтомобили.Автомобиль = ОстаткиАвтомобилейОстатки.Автомобиль
	|ГДЕ
	|	КорректировкаПоступленияАвтомобилейАвтомобили.Ссылка = &Ссылка
	|	И (КорректировкаПоступленияАвтомобилейАвтомобили.СуммаВсегоРазница <> 0
	|			ИЛИ КорректировкаПоступленияАвтомобилейАвтомобили.СуммаНДСРазница <> 0
	|			ИЛИ КорректировкаПоступленияАвтомобилейАвтомобили.КоличествоРазница <> 0)";
	
	Запрос.УстановитьПараметр("МоментВремени"     , МоментВремени());
	Запрос.УстановитьПараметр("Ссылка"            , Ссылка);
	Запрос.УстановитьПараметр("СписокАвтомобилей" , Автомобили.ВыгрузитьКолонку("Автомобиль"));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ОбновитьГТДАвтомобилей()
	
	РежимЗаписи = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "РежимЗаписи");
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	АвтомобилиСсылки = Автомобили.ВыгрузитьКолонку("Автомобиль");
	ГТДАвтомобилей = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(АвтомобилиСсылки, "ГТД");
	АвтомобилиКОбновлению = Новый Соответствие;
	
	Для Каждого СтрокаАвтомобиля Из Автомобили Цикл
		
		ЗаполнитьРеквизиты = Новый Структура();
		ГТДАвтомобиля = ГТДАвтомобилей.Получить(СтрокаАвтомобиля.Автомобиль);
		
		Если ГТДАвтомобиля = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрокаАвтомобиля.ГТД <> ГТДАвтомобиля Тогда
			
			ЗаполнитьРеквизиты.Вставить("ГТД", СтрокаАвтомобиля.ГТД);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаполнитьРеквизиты) Тогда
			
			АвтомобилиКОбновлению.Вставить(СтрокаАвтомобиля.Автомобиль, ЗаполнитьРеквизиты);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючЗначение Из АвтомобилиКОбновлению Цикл
		
		Попытка
			
			Автомобиль = КлючЗначение.Ключ.ПолучитьОбъект();
			Автомобиль.Заблокировать();
			ЗаполнитьЗначенияСвойств(Автомобиль, КлючЗначение.Значение);
			Автомобиль.ОбменДанными.Загрузка = Истина;
			Автомобиль.Записать();
			
		Исключение
			
			ВывестиСообщение(СтрШаблон(НСтр("ru = 'Не удалось обновить ГТД в карточке автомобиля %1'"), Автомобиль.Наименование), ЭтотОбъект);
			СобытиеЖурнала = НСтр("ru = 'Обновление ГТД автомобиля из корректировки поступления'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(СобытиеЖурнала, УровеньЖурналаРегистрации.Ошибка,, КлючЗначение.Ключ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат Истина;
			
		КонецПопытки
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#Область ФормированиеДвиженийДокумента

Функция ВыполнитьДвиженияПоОстаткам(ТаблицаДокумента, СписокОснований, Отказ)
	
	НеобходимоСкорректироватьСебестоимость = Новый Массив;
	
	Если ТаблицаДокумента.Количество() = 0 Тогда
		Возврат НеобходимоСкорректироватьСебестоимость;
	КонецЕсли;
	
	ВалютаУпр  = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	// получим записи из регистра остатков
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиАвтомобилей.Автомобиль КАК Автомобиль,
	|	ОстаткиАвтомобилей.СкладКомпании КАК СкладКомпании,
	|	ОстаткиАвтомобилей.СтатусПартии КАК СтатусПартии,
	|	ОстаткиАвтомобилей.Партия КАК Партия,
	|	ОстаткиАвтомобилей.Автомобиль.ГТД КАК ГТД,
	|	СУММА(ОстаткиАвтомобилей.Количество) КАК Количество,
	|	СУММА(ОстаткиАвтомобилей.Сумма) КАК Сумма,
	|	СУММА(ОстаткиАвтомобилей.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ОстаткиАвтомобилей.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ОстаткиАвтомобилей.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ОстаткиАвтомобилей.СуммаНДСУпр) КАК СуммаНДСУпр,
	|	СУММА(ОстаткиАвтомобилей.СуммаБезНДСУпр) КАК СуммаБезНДСУпр
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	|ГДЕ
	|	ОстаткиАвтомобилей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОстаткиАвтомобилей.Регистратор В(&Регистраторы)
	|	И ОстаткиАвтомобилей.Автомобиль В(&Автомобили)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиАвтомобилей.Партия,
	|	ОстаткиАвтомобилей.СтатусПартии,
	|	ОстаткиАвтомобилей.Автомобиль,
	|	ОстаткиАвтомобилей.СкладКомпании,
	|	ОстаткиАвтомобилей.Автомобиль.ГТД";
	
	
	Запрос.УстановитьПараметр("Регистраторы" , СписокОснований);
	Запрос.УстановитьПараметр("Автомобили"   , ТаблицаДокумента.ВыгрузитьКолонку("Автомобиль"));
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаАвтомобиля Из ТаблицаДокумента Цикл
		
		Если СтрокаАвтомобиля.Количество = 0 Тогда
			
			// Проверим наличия автомобиля на остатках
			Если НЕ СтрокаАвтомобиля.ЕстьОстаток Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Автомобиль <%1> отсутствует на складе <%2>. Расход невозможен.'"),
						СтрокаАвтомобиля.Автомобиль,
						СкладКомпании
					),
					,,, Отказ
				);
				Продолжить;
			КонецЕсли;
			
			НайденныеСтроки = ТаблицаОстатков.НайтиСтроки(Новый Структура("Автомобиль", СтрокаАвтомобиля.Автомобиль));
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Для автомобиля <%1> не найденны движения в данной цепочке.'"),
						СтрокаАвтомобиля.Автомобиль),
						ЭтотОбъект,,,
						Отказ
					);
				Продолжить;
			КонецЕсли;
			
			// Сторнирование поступления авто
			ОстаткиПоСделке = Ложь;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ДвижениеОстатки = Движения.ОстаткиАвтомобилей.Добавить();
				ЗаполнитьЗначенияСвойств(ДвижениеОстатки, НайденнаяСтрока);
				
				ДвижениеОстатки.Период         = Дата;
				ДвижениеОстатки.Регистратор    = Ссылка;
				ДвижениеОстатки.ВидДвижения    = ВидДвиженияНакопления.Приход;
				ДвижениеОстатки.Количество     = -ДвижениеОстатки.Количество;
				ДвижениеОстатки.Сумма          = -ДвижениеОстатки.Сумма;
				ДвижениеОстатки.СуммаНДС       = -ДвижениеОстатки.СуммаНДС;
				ДвижениеОстатки.СуммаУпр       = -ДвижениеОстатки.СуммаУпр;
				ДвижениеОстатки.СуммаНДСУпр    = -ДвижениеОстатки.СуммаНДСУпр;
				ДвижениеОстатки.СуммаБезНДС    = -ДвижениеОстатки.СуммаБезНДС;
				ДвижениеОстатки.СуммаБезНДСУпр = -ДвижениеОстатки.СуммаБезНДСУпр;
				
				ДвижениеОстатки.СтавкаНДС   = СтрокаАвтомобиля.СтавкаНДС;
				ДвижениеОстатки.ХозОперация = ХозОперация;
				ДвижениеОстатки.Проект 		= Проект;
				ОстаткиПоСделке = ОстаткиПоСделке ИЛИ (НайденнаяСтрока.Партия = СтрокаАвтомобиля.Партия);
			КонецЦикла;
			
			Если НЕ ОстаткиПоСделке Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Не удалось откорректировать автомобиль <%1> - партия была расформирована.'"), 
						СтрокаАвтомобиля.Автомобиль
					),
					ЭтотОбъект,,, 
					Отказ
				);
				Продолжить;
				
			КонецЕсли;
			
		Иначе
			
			НайденныеСтроки = ТаблицаОстатков.НайтиСтроки(Новый Структура("Автомобиль", СтрокаАвтомобиля.Автомобиль));
			
			СтрокаОстаткаАвтомобиля = Неопределено;
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаОстаткаАвтомобиля = Неопределено;
			ИначеЕсли Сделка.ХозОперация = Справочники.ХозОперации.ПереходВСобственностьАвтомобилей Тогда
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если НЕ НайденнаяСтрока.СтатусПартии = Перечисления.СтатусыПартий.ТоварОтветственноеХранение Тогда
						СтрокаОстаткаАвтомобиля = НайденнаяСтрока;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				СтрокаОстаткаАвтомобиля = НайденныеСтроки[0];
			КонецЕсли;
			
			Если СтрокаОстаткаАвтомобиля = Неопределено Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Для автомобиля <%1> не найденны движения в данной цепочке.'"),
						СтрокаАвтомобиля.Автомобиль
					),
					ЭтотОбъект,,,
					Отказ
				);
				Продолжить;
			КонецЕсли;
			
			ДвижениеОстатки = Движения.ОстаткиАвтомобилей.Добавить();
			ЗаполнитьЗначенияСвойств(ДвижениеОстатки, НайденныеСтроки[0],"Автомобиль,СкладКомпании,СтатусПартии,Партия");
			
			ДвижениеОстатки.Период         = Дата;
			ДвижениеОстатки.Регистратор    = Ссылка;
			ДвижениеОстатки.ВидДвижения    = ВидДвиженияНакопления.Приход;
			ДвижениеОстатки.Количество     = 0;
			ДвижениеОстатки.Сумма          = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаАвтомобиля.СуммаВсегоРазница, ВалютаДокумента, КурсДокумента, ВалютаРегл, Дата);
			ДвижениеОстатки.СуммаНДС       = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаАвтомобиля.СуммаНДСРазница  , ВалютаДокумента, КурсДокумента, ВалютаРегл, Дата);
			ДвижениеОстатки.СуммаУпр       = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаАвтомобиля.СуммаВсегоРазница, ВалютаДокумента, КурсДокумента, ВалютаУпр , КурсВалютыУпр);
			ДвижениеОстатки.СуммаНДСУпр    = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаАвтомобиля.СуммаНДСРазница,   ВалютаДокумента, КурсДокумента, ВалютаУпр , КурсВалютыУпр);
			ДвижениеОстатки.СуммаБезНДС    = ДвижениеОстатки.Сумма - ДвижениеОстатки.СуммаНДС;
			ДвижениеОстатки.СуммаБезНДСУпр = ДвижениеОстатки.СуммаУпр - ДвижениеОстатки.СуммаНДСУпр;
			
			ДвижениеОстатки.СтавкаНДС   = СтрокаАвтомобиля.СтавкаНДС;
			ДвижениеОстатки.ХозОперация = ХозОперация;
			ДвижениеОстатки.Проект 		= Проект;
			
			
			// откорректруем списывающие движение если необходимо
			Если НЕ СтрокаАвтомобиля.ЕстьОстаток Тогда
				ДвижениеОстаткиРасход = Движения.ОстаткиАвтомобилей.Добавить();
				ЗаполнитьЗначенияСвойств(ДвижениеОстаткиРасход, ДвижениеОстатки);
				ДвижениеОстаткиРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
				
				// скорректируем себестоимость на регистре продажи
				Если Сделка.ХозОперация <> Справочники.ХозОперации.ПоступлениеАвтомобилейОтветственноеХранение Тогда
					НеобходимоСкорректироватьСебестоимость.Добавить(СтрокаАвтомобиля.Автомобиль);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Движения.ОстаткиАвтомобилей.Записать();
	
	Возврат НеобходимоСкорректироватьСебестоимость;
	
КонецФункции

Процедура ВыполнитьДвиженияПоВзаиморасчетам(Отказ, Режим)
	
	// получим сумму различий
	СуммаЗаписи = Автомобили.Итог("СуммаВсегоРазница");
	
	Если СуммаЗаписи = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Сделка.ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилей ИЛИ
		Сделка.ХозОперация = Справочники.ХозОперации.ПереходВСобственностьАвтомобилей Тогда
		
		НаборЗаписейВзаиморасчеты                       = Движения.ВзаиморасчетыКомпании;
		НаборЗаписейВзаиморасчеты.ДокументОбъект        = ЭтотОбъект;
		НаборЗаписейВзаиморасчеты.РежимПроведения       = Режим;
		НаборЗаписейВзаиморасчеты.Контрагент            = Контрагент;
		НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
		НаборЗаписейВзаиморасчеты.Сделка                = Сделка;
	
		НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем        = Истина;
		НаборЗаписейВзаиморасчеты.Сумма                            = СуммаЗаписи;
		НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц = 0;
		Отказ = НЕ НаборЗаписейВзаиморасчеты.Расход() ИЛИ Отказ;
		
		// доходы и расходы по суммовым разницам
		СуммаДоходаРасходаСуммовыхРазниц = НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
		Если СуммаДоходаРасходаСуммовыхРазниц <> 0 Тогда
			НаборЗаписейДиР                        = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
			НаборЗаписейДиР.ВУпрВалюте             = Истина;
			Если СуммаДоходаРасходаСуммовыхРазниц<0 Тогда
				НаборЗаписейДиР.Расход = -СуммаДоходаРасходаСуммовыхРазниц;
			Иначе
				НаборЗаписейДиР.Доход = СуммаДоходаРасходаСуммовыхРазниц;
			КонецЕсли;
			
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьДвиженияПоРегистрамРеализации(НеобходимоСкорректироватьСебестоимость, ТаблицаДокумента, Отказ)
	
	Если НеобходимоСкорректироватьСебестоимость.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПродажиАвтомобилей.ПодразделениеКомпании,
	|	ПродажиАвтомобилей.Автомобиль,
	|	ПродажиАвтомобилей.ДокументПродажи,
	|	ПродажиАвтомобилей.Поставщик,
	|	ПродажиАвтомобилей.Покупатель,
	|	ПродажиАвтомобилей.СтатусПартии,
	|	ПродажиАвтомобилей.ДоговорВзаиморасчетов,
	|	ПродажиАвтомобилей.СкладКомпании,
	|	ПродажиАвтомобилей.СтавкаНДС,
	|	ПродажиАвтомобилей.Партия,
	|	ПродажиАвтомобилей.ГТД
	|ИЗ
	|	РегистрНакопления.ПродажиАвтомобилей КАК ПродажиАвтомобилей
	|ГДЕ
	|	ПродажиАвтомобилей.Автомобиль В(&Автомобили)
	|	И ПродажиАвтомобилей.Партия = &Партия
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажиАвтомобилей.ПодразделениеКомпании,
	|	ПродажиАвтомобилей.Автомобиль,
	|	ПродажиАвтомобилей.ДокументПродажи,
	|	ПродажиАвтомобилей.Поставщик,
	|	ПродажиАвтомобилей.Покупатель,
	|	ПродажиАвтомобилей.СтатусПартии,
	|	ПродажиАвтомобилей.ДоговорВзаиморасчетов,
	|	ПродажиАвтомобилей.СкладКомпании,
	|	ПродажиАвтомобилей.СтавкаНДС,
	|	ПродажиАвтомобилей.Партия,
	|	ПродажиАвтомобилей.ГТД";
	
	Запрос.УстановитьПараметр("Автомобили" , НеобходимоСкорректироватьСебестоимость);
	Запрос.УстановитьПараметр("Партия"     , Сделка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВалютаУпр  = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	СуммаДоходовИРасходов = 0;
	
	Пока Выборка.Следующий() Цикл
		// получим сумму из документа и откорректируем продажи
		НайденныеСтроки = ТаблицаДокумента.НайтиСтроки(Новый Структура("Автомобиль",Выборка.Автомобиль));
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаРазница    = НайденныеСтроки[0].СуммаВсегоРазница;
		СуммаНДСРазница = НайденныеСтроки[0].СуммаНДСРазница;
		
		НоваяЗапись = Движения.ПродажиАвтомобилей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка, "ПодразделениеКомпании,Автомобиль,ДокументПродажи,Поставщик,Покупатель,СтатусПартии,ДоговорВзаиморасчетов,СкладКомпании,СтавкаНДС,Партия,ГТД");
		
		НоваяЗапись.Период      = Дата;
		НоваяЗапись.Регистратор = Ссылка;
		НоваяЗапись.ХозОперация = ХозОперация;
		
		НоваяЗапись.Себестоимость    = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаРазница, ВалютаДокумента, КурсДокумента, ВалютаРегл, Дата);
		НоваяЗапись.СебестоимостьУпр = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаРазница, ВалютаДокумента, КурсДокумента, ВалютаУпр , КурсВалютыУпр);
		НоваяЗапись.СуммаНДСВходящий = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаНДСРазница, ВалютаДокумента, КурсДокумента, ВалютаРегл, Дата);
		
		НоваяЗапись.СуммаНДСВходящийУпр    = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(НоваяЗапись.СуммаНДСВходящий, ВалютаРегл,Дата,ВалютаУпр,КурсВалютыУпр),2);
		НоваяЗапись.СебестоимостьБезНДС    = НоваяЗапись.Себестоимость - НоваяЗапись.СуммаНДСВходящий;
		НоваяЗапись.СебестоимостьБезНДСУпр = НоваяЗапись.СебестоимостьУпр - НоваяЗапись.СуммаНДСВходящийУпр;
		
		// скорректируем доходы
		СуммаДоходовИРасходов = СуммаДоходовИРасходов + НоваяЗапись.СебестоимостьУпр;
		
		// Также откоректируем себестоимость на регистре реализованных авто,
		// если отчет комитенту строится по сумме поступления.
		Если Сделка.ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилейКомиссия
				И ДоговорВзаиморасчетов.КомиссияОтчетНаОснованииПродаж Тогда
			ЗаписьРеализованныеАвто                       = Движения.РеализованныеАвтомобили.Добавить();
			ЗаписьРеализованныеАвто.Период                = Дата;
			ЗаписьРеализованныеАвто.Регистратор           = Ссылка;
			ЗаписьРеализованныеАвто.Контрагент            = Контрагент;
			ЗаписьРеализованныеАвто.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
			ЗаписьРеализованныеАвто.Автомобиль            = Выборка.Автомобиль;
			ЗаписьРеализованныеАвто.ДокументПередачи      = Сделка;
			ЗаписьРеализованныеАвто.ГТД                   = Выборка.ГТД;
			ЗаписьРеализованныеАвто.СуммаУпр              = НоваяЗапись.СебестоимостьУпр;
			ЗаписьРеализованныеАвто.СуммаБезНДСУпр        = НоваяЗапись.СебестоимостьБезНДСУпр;
			ЗаписьРеализованныеАвто.СуммаНДСУпр           = НоваяЗапись.СуммаНДСВходящийУпр;
			ЗаписьРеализованныеАвто.СуммаРегл             = НоваяЗапись.Себестоимость;
			ЗаписьРеализованныеАвто.СуммаБезНДС           = НоваяЗапись.СебестоимостьБезНДС;
			ЗаписьРеализованныеАвто.СуммаНДС              = НоваяЗапись.СуммаНДСВходящий;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.ПродажиАвтомобилей.Записать();
	Движения.РеализованныеАвтомобили.Записать();
	
	Если СуммаДоходовИРасходов <> 0 Тогда
		НаборЗаписейДиР = Движения.ДоходыИРасходы;
		НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьАвтомобилей;
		НаборЗаписейДиР.ВУпрВалюте             = Истина;
		Если Сделка.ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилейКомиссия Тогда
			НаборЗаписейДиР.Доход = СуммаДоходовИРасходов;
			Отказ = НЕ НаборЗаписейДиР.Расход() ИЛИ Отказ;
		Иначе
			НаборЗаписейДиР.Расход = СуммаДоходовИРасходов;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;
	КонецЕсли;
	
	Движения.ДоходыИРасходы.Записать();
	
КонецПроцедуры

Процедура ВыполнитьДвиженияПоВозвратуАвтомобилей(ТаблицаДокумента, Отказ, Режим)
	
	// Сформируем список автомобилей для возврата
	АвтомобилиКВозврату = Новый Массив;
	
	НайденныеСтроки = ТаблицаДокумента.НайтиСтроки(Новый Структура("Количество", 0));
	
	// Автомобилей нет к возврату
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
		АвтомобилиКВозврату.Добавить(ТекущаяСтрока.Автомобиль);
	КонецЦикла;
	
	// Проверим наличие незакрытых документов по комплектации автомобилей.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗаказНаряд.Ссылка) КАК ЗаказНаряд,
	               |	ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль КАК Автомобиль
	               |ИЗ
	               |	Документ.ЗаказНаряд КАК ЗаказНаряд
	               |ГДЕ
	               |	ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль В(&Автомобили)
	               |	И ЗаказНаряд.Дата <= &Дата
	               |	И ЗаказНаряд.ВидРемонта.ТипРемонта = ЗНАЧЕНИЕ(Перечисление.ТипыРемонта.КомплектацияАвтомобиля)
	               |	И НЕ ЗаказНаряд.ПометкаУдаления
	               |	И ЗаказНаряд.Состояние <> ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.Закрыт)
	               |ИТОГИ ПО
	               |	Автомобиль
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗаказНарядАвтомобили.Ссылка) КАК ЗаказНаряд,
	               |	ЗаказНарядАвтомобили.Автомобиль КАК Автомобиль
	               |ИЗ
	               |	Документ.ЗаказНаряд.Автомобили КАК ЗаказНарядАвтомобили
	               |ГДЕ
	               |	ЗаказНарядАвтомобили.Ссылка.Дата <= &Дата
	               |	И ЗаказНарядАвтомобили.Ссылка.ВидРемонта.ТипРемонта = ЗНАЧЕНИЕ(Перечисление.ТипыРемонта.СборкаАвтомобиля)
	               |	И НЕ ЗаказНарядАвтомобили.Ссылка.ПометкаУдаления
	               |ИТОГИ ПО
	               |	Автомобиль";
	Запрос.УстановитьПараметр("Автомобили", АвтомобилиКВозврату);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	ВыборкаАвтомобилей = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТекстСообщения = 
		НСтр("ru = 'У автомобиля <%1> есть незавершенные документы: %2.'");
	
	Пока ВыборкаАвтомобилей.Следующий() Цикл
		
		СписокЗН = Новый Массив;
		ВыборкаЗН = ВыборкаАвтомобилей.Выбрать();
		
		Пока ВыборкаЗН.Следующий() Цикл
			СписокЗН.Добавить(ВыборкаЗН.ЗаказНаряд);
		КонецЦикла;
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(ТекстСообщения, ВыборкаАвтомобилей.Автомобиль, СтрСоединить(СписокЗН, "; ")),
			,,,
			Отказ
		);
		
	КонецЦикла;
	
	Отказ = ПроверитьЗаказыНаАвтомобиль(АвтомобилиКВозврату) ИЛИ Отказ;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПровестиПоПартиям(Режим, Ссылка, ТаблицаДокумента, АвтомобилиКВозврату);
	
КонецПроцедуры // ВыполнитьДвиженияПоВозвратуАвтомобилей()

Функция ПроверитьЗаказыНаАвтомобиль(АвтомобилиКВозврату)
	ДокументОбъектСтруктура = Новый Структура();
	ДокументОбъектСтруктура.Вставить("МоментВремени", МоментВремени());
	ДокументОбъектСтруктура.Вставить("Автомобили", АвтомобилиКВозврату);
	
	Возврат ЗащищенныеФункцииАльфаАвтоСервер.РезервыАвтомобиляПроверитьЗаказыНаАвтомобиль(ДокументОбъектСтруктура);
КонецФункции // ПроверитьЗаказыНаАвтомобиль()

#КонецОбласти

#КонецОбласти

#КонецЕсли
