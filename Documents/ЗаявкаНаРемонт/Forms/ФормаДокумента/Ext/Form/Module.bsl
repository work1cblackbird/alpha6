// Модуль основной формы документа "Заявка на ремонт"

#Область ОписаниеПеременных

&НаКлиенте
Перем АдресИзДанныхВыбора Экспорт;

&НаКлиенте
Перем ТелефонИзДанныхВыбора Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// ПодключаемоеОборудование
	ТипыОборудования = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
	ТипыОборудования.СканерШтрихкода = Истина;
	ТипыОборудования.СчитывательМагнитныхКарт = Истина;
	МенеджерОборудования.ПриСозданииНаСервере(ЭтаФорма, ТипыОборудования);
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ПараметрыОтображенияМеток = УправлениеСвойствами.ПараметрыОтображенияМеток();
	ПараметрыОтображенияМеток.МаксимумМетокНаФорме = 3;
	ПараметрыОтображенияМеток.ВариантОтображенияМеток = Перечисления.ВариантыОтображенияМеток.Надпись;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	ДополнительныеПараметры.Вставить("ПараметрыОтображенияМеток", ПараметрыОтображенияМеток);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	
	УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(ЭтотОбъект, Объект.Заказчик, "ГруппаМеткиЗаказчика");
	УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(ЭтотОбъект, Объект.Контрагент);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ОграничитьВыборКонтактныхЛиц(Элементы.Контрагент);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	
	РазрешитьРедактированиеЦенИСумм = ПраваИНастройкиПользователя.Значение("РедактированиеЦенИСуммВНоменклатурныхТаблицах", Объект);
	РаботаСФормой.РазрешитьРедактированиеЦенИСумм(
		РаботаСФормой.ТиповыеПоляСуммовыхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм
	);
	
	СпособВыбораСкидки = ПраваИНастройкиПользователя.Значение("СпособВыбораСкидки", Объект);
	РаботаСФормой.РазрешитьРедактированиеСкидок(
		РаботаСФормой.ТиповыеПоляСкидочныхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм,
		СпособВыбораСкидки
	);
	РаботаСФормой.ОткрытьФормуТолькоДляПросмотра(ЭтотОбъект, Объект);
	
	// Штрихкодирование
	ШтрихкодированиеВызовСервера.ПрочитатьШтрихкодДокумента(ЭтотОбъект, Объект);
	// Конец Штрихкодирование
	
	ОписаниеНовойКолонкиПроизводитель = РаботаСФормой.ОписаниеНовойКолонкиПроизводитель();
	ОписаниеНовойКолонкиПроизводитель.ТабличнаяЧасть = Элементы.Товары;
	ОписаниеНовойКолонкиПроизводитель.ПоставитьПеред = Элементы.ТоварыАртикул;
	НоваяКолонкаПроизводитель = РаботаСФормой.НоваяКолонкаПроизводитель(ЭтотОбъект, ОписаниеНовойКолонкиПроизводитель);
	
	КолонкиКодАртикулИПроизводитель = Новый Структура();
	КолонкиКодАртикулИПроизводитель.Вставить("Код", Элементы.ТоварыКод);
	КолонкиКодАртикулИПроизводитель.Вставить("Артикул", Элементы.ТоварыАртикул);
	КолонкиКодАртикулИПроизводитель.Вставить("Производитель", НоваяКолонкаПроизводитель);
	РаботаСФормой.НастроитьВидимостьКолонокКодАртикулИПроизводитель(КолонкиКодАртикулИПроизводитель);

	// Установим вариант отображения цен и сумм
	ЗащищенныеФункцииСервер.УстановитьДоступностьКолонокЦенИСумм(ЭтотОбъект, "Автоработы");
	
	// Установим вариант отображения дополнительных полей "Код" и "Артикул"
	УправлениеДиалогомДокументаСервер.УстановитьВидимостьКолонокКодАртикул(ЭтотОбъект, "Автоработы");
	УправлениеДиалогомДокументаСервер.УстановитьВидимостьКолонокКодАртикул(ЭтотОбъект, "ВспомогательныеАвтоработы");
	УправлениеДиалогомДокументаСервер.УстановитьВидимостьКолонкиПроизводитель(ЭтотОбъект, "Товары", "НоменклатураАртикул");
	
	ПереносРаботДеталейВРекомендацииПриУдалении = ПраваИНастройкиПользователя.Значение("ПереносРаботДеталейВРекомендацииПриУдалении");
	
	// установим формат редактирования года выпуска
	Элементы.ГодВыпуска.ФорматРедактирования = АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(ЭтотОбъект);
	
	ИнициализироватьПодменюСостоянийЗаявки();
	
	Автосервис.ОбновитьПредставлениеИсполнителей(Объект);
	
	Элементы.НеОбновлятьКИ.Пометка = Истина;
	Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Заголовок = НСтр("ru = 'Не обновлять'");
	СнятоПовторноеОбращениеВСервис = Ложь;
	
	Элементы.ТоварыПеренестиНоменклатуруВРекомендации.Доступность = НЕ ТолькоПросмотр;
	Элементы.АвтоработыПеренестиАвтоработыВРекомендации.Доступность = НЕ ТолькоПросмотр;
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец АльфаАвто.СобытияОбъектов
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);
	
	// Дальнейшие операции выпольняются только для новых документов
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		РегистрыСведений.ЗапланированныеТО.ЧтениеЗначенияРегистраСведения(Объект.Автомобиль, ЭтотОбъект);
		ПроверитьНеобходимостьОбновленияКИ();
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ИнициализироватьПоляКонтактнойИнформации();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// Обновим КИ
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		Объект.Заказчик,
		ЭтотОбъект,
		"Телефон,АдресЭлектроннойПочты",
		"ПредставлениеТелефона,АдресЭлектроннойПочты"
	);
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
		
	Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Доступность = Ложь;
		
	ПредыдущийПробег = АвтомобилиКлиентСервер.
		ПредставлениеПредыдущихПробегов(Объект.Автомобиль, СформироватьМассивДатПробега(Объект));
	
	ИспользоватьПричиныОбращений = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(
		ЭтотОбъект.ИмяФормы, 
		"ИспользоватьПричиныОбращений",
		Истина
	);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	ПроверитьРекомендацииПоАвтомобилю(Ложь, Истина);
	УправлениеДиалогомНаСервере();
	ОбновитьПоказателиТоваров(ЭтотОбъект);
	ПоказатьПоказатели(Истина);
	УстановитьСвойстваПоляВводаТелефона();
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетИтоговАвторабот()
	
	Если НЕ Элементы.Автоработы.ОтборСтрок = Неопределено Тогда
		ИтогАвтоработыКоличество = 0;
		ИтогАвтоработыКоэффициент = 0;
		ИтогАвтоработыСумма = 0;
		ИтогАвтоработыСуммаВсего = 0;
		ИтогАвтоработыСуммаНДС = 0;
		Для Каждого ТекущаяСтрока Из Объект.Автоработы Цикл
			Если Элементы.Автоработы.ПроверитьСтроку(ТекущаяСтрока.ПолучитьИдентификатор()) Тогда
				ИтогАвтоработыКоличество = ИтогАвтоработыКоличество + ТекущаяСтрока.Количество; 
				ИтогАвтоработыКоэффициент = ИтогАвтоработыКоэффициент + ТекущаяСтрока.Коэффициент;
				ИтогАвтоработыСумма = ИтогАвтоработыСумма + ТекущаяСтрока.Сумма;
				ИтогАвтоработыСуммаВсего = ИтогАвтоработыСуммаВсего + ТекущаяСтрока.СуммаВсего;
				ИтогАвтоработыСуммаНДС = ИтогАвтоработыСуммаНДС + ТекущаяСтрока.СуммаНДС;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ИтогАвтоработыКоличество = Объект.Автоработы.Итог("Количество");
		ИтогАвтоработыКоэффициент = Объект.Автоработы.Итог("Коэффициент");
		ИтогАвтоработыСумма = Объект.Автоработы.Итог("Сумма");
		ИтогАвтоработыСуммаВсего = Объект.Автоработы.Итог("СуммаВсего");
		ИтогАвтоработыСуммаНДС = Объект.Автоработы.Итог("СуммаНДС");
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетИтоговТоваров()
	
	Если НЕ Элементы.Товары.ОтборСтрок = Неопределено Тогда
		ИтогТоварыКоличество = 0;
		ИтогТоварыСумма = 0;
		ИтогТоварыСуммаВсего = 0;
		ИтогТоварыСуммаНДС = 0;
		Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
			Если Элементы.Товары.ПроверитьСтроку(ТекущаяСтрока.ПолучитьИдентификатор()) Тогда
				ИтогТоварыКоличество = ИтогТоварыКоличество + ТекущаяСтрока.Количество;
				ИтогТоварыСумма = ИтогТоварыСумма + ТекущаяСтрока.Сумма;
				ИтогТоварыСуммаВсего = ИтогТоварыСуммаВсего + ТекущаяСтрока.СуммаВсего;
				ИтогТоварыСуммаНДС = ИтогТоварыСуммаНДС + ТекущаяСтрока.СуммаНДС;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ИтогТоварыКоличество = Объект.Товары.Итог("Количество");
		ИтогТоварыСумма = Объект.Товары.Итог("Сумма");
		ИтогТоварыСуммаВсего = Объект.Товары.Итог("СуммаВсего");
		ИтогТоварыСуммаНДС = Объект.Товары.Итог("СуммаНДС");
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "Автоработы", "Дополнительная");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ПричиныОбращенияАвтоработы");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ПричиныОбращенияТовары");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ВспомогательныеАвтоработы");
	
	// Автивируем первую строку в причинах обращения
	Если Объект.ПричиныОбращения.Количество() > 0 И Элементы.ПричиныОбращенияТовары.ТекущаяСтрока = Неопределено Тогда
		
		Элементы.ПричиныОбращенияТовары.ТекущаяСтрока = Объект.ПричиныОбращения[0].ПолучитьИдентификатор();
		
	КонецЕсли;
	
	ПричиныОбращенияТоварыПриАктивизацииСтроки(Элементы.ПричиныОбращенияТовары);
	ПричиныОбращенияАвтоработыПриАктивизацииСтроки(Элементы.ПричиныОбращенияАвтоработы);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		АвтомобильПриИзменении(Неопределено);
	КонецЕсли;
	
	СформироватьИнформациюПоСнятиюПовторногоОбращения();
	
	УстановитьДоступностьЖалобы();
	УстановитьДоступностьПереносаПозицийВРекомендации();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ПриОткрытии_ФормаДокумента(ЭтотОбъект, Отказ);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ПризнакЗакрытияФормы = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ОбработкаОповещения_ФормаДокумента(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.СобытияОбъектов
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	Если ИмяСобытия = "ВыборРекомендацииАвтомобиля" И Источник = Объект.Ссылка Тогда
		
		ДобавитьРекомендациюАвтомобиля(Параметр);
		Модифицированность = Истина;
		Возврат;
		
	ИначеЕсли ИмяСобытия = "ПереходВЗаписьНаРемонт" И Источник = ЭтотОбъект Тогда
		
		Закрыть();
	
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		Возврат;
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// Штрихкодирование
	ШтрихкодированиеКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец Штрихкодирование
	
	// СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	ЗащитаПерсональныхДанныхКлиент.ОбработкаОповещенияФормы(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	
КонецПроцедуры 

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ИнициализироватьПоляКонтактнойИнформации();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	
	ПроверитьРекомендацииПоАвтомобилю();
	
	// Обновим КИ
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		Объект.Заказчик,
		ЭтотОбъект,
		"Телефон,АдресЭлектроннойПочты",
		"ПредставлениеТелефона,АдресЭлектроннойПочты"
	);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	
	ИспользоватьПричиныОбращений = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(
		ЭтотОбъект.ИмяФормы, 
		"ИспользоватьПричиныОбращений",
		Истина
	);
	
	ПредыдущийПробег = АвтомобилиКлиентСервер.ПредставлениеПредыдущихПробегов(
		Объект.Автомобиль,
		СформироватьМассивДатПробега(Объект)
	);
	
	ЕстьВыполненныеЗаказНаряды = Документы.ЗаявкаНаРемонт.ЕстьЗаказНаряды(Объект.Ссылка);
	УправлениеДиалогомНаСервере();
	
	КэшПлательщик = Объект.Контрагент;
	КэшВидРемонта = Объект.ВидРемонта;
	КэшЗаказчик   = Объект.Заказчик;
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриЧтенииНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект);
	// Конец АльфаАвто.СобытияОбъектов
	
	ОбновитьПоказателиТоваров(ЭтотОбъект);
	ПоказатьПоказатели(Истина);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("ЗаявкаНаРемонт", ПараметрыЗаписи.РежимЗаписи,
		Объект.Товары.Количество() > 50);
		
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Проверим наличие указанного комментария данного действия
	Если СнятоПовторноеОбращениеВСервис
		И ПустаяСтрока(Объект.ПричинаСнятияПовторногоОбращения) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не введен комментарий, на основании чего был снят признак повторного обращения в сервис'"),
			,
			"Объект.ПричинаСнятияПовторногоОбращения",,
			Отказ);
		
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОбновлятьКИ", Элементы.ОбновлятьКИ.Пометка);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РегистрироватьИзмененияДокумента", Истина);
	
	// запишем использование
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(
		ИмяФормы, 
		"ИспользоватьПричиныОбращений", 
		ИспользоватьПричиныОбращений
	);
	
	ПолучитьШаблонСообщенияУведомления(ТекущийОбъект);
	УстановленоПовторноеОбращениеВСервис = Автосервис.УстановленПризнакПовторногоОбращенияВСервис(ТекущийОбъект);
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПередЗаписьюНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	
	// Штрихкодирование
	ШтрихкодированиеВызовСервера.ЗаписатьШтрихкодДокумента(ЭтотОбъект, Объект);
	// Конец Штрихкодирование
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	Если ТипЗнч(Объект.Автомобиль)=Тип("СправочникСсылка.Автомобили") Тогда
		Если ОбработкаПодборРекомендаций.Модифицированность Тогда
			Обработки.ПодборРекомендаций.ЗаписатьРекомендации(ОбработкаПодборРекомендаций);
			ПроверитьРекомендацииПоАвтомобилю(Ложь, Истина);
		КонецЕсли;
		Обработки.ПодборРекомендаций.ПроверитьВыполнениеРекомендаций(ОбработкаПодборРекомендаций, Объект.Ссылка);
		ПроверитьРекомендацииПоАвтомобилю();
	КонецЕсли;
	
	Если УстановленоПовторноеОбращениеВСервис Тогда
		
		Автосервис.ОтправитьУведомление(
			ТекущийОбъект,
			Перечисления.ВидыУведомлений.ПовторноеОбращениеВСервис);
		
	КонецЕсли;
	
	// Обновим КИ
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		Объект.Заказчик,
		ЭтотОбъект,
		"Телефон,АдресЭлектроннойПочты",
		"ПредставлениеТелефона,АдресЭлектроннойПочты"
	);
	
	// TODO: Запись планирования в регистр
	
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
		Объект.ПричиныОбращения,
		Объект.Автоработы,
		Объект.Товары
	);
	
	Автосервис.ОбновитьПредставлениеИсполнителей(Объект);
	
	ЗаписатьИнформациюОбЗагруженномДеле(ТекущийОбъект.Ссылка);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПослеЗаписиНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
	Если ТипЗнч(ТекущийОбъект.ДокументОснование) = Тип("ДокументСсылка.Событие") Тогда
		ОбработкаСобытийДокументаСервер.ОбновитьДокументОснование_Событие(ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.Событие") Тогда
		Оповестить("ОповещениеДляДокументаСобытие", Объект.Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонСМС) Тогда
		АвтосервисКлиент.ОткрытьДокументСообщенияSMS(Объект.Ссылка, ШаблонСМС);
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗаписи, "ЗакрытьПослеЗаписи", Ложь) Тогда
		
		Закрыть();
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОтложенныйРасчетПоказателей", 1, Истина);
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры 

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	
	Настройки.Вставить("ПоказыватьПодсветку", Элементы.ТоварыПодсветка.Пометка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;

	Если Настройки.Получить("ПоказыватьПодсветку")=ИСТИНА Тогда
		Элементы.ТоварыПодсветка.Пометка = Истина;
		ОбновитьРаскраскуТоваровПоПоказателям(ЭтотОбъект);
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
		
КонецПроцедуры

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаявкаНаРемонт.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаявкаНаРемонт.ДатаПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаказчикПриИзменении(Элемент)
	
	ОбработатьИзменениеЗаказчика();
	
КонецПроцедуры

&НаСервере
Процедура ЗаказчикПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Если НЕ Элементы.Контрагент.Доступность	Тогда	
		
		ПараметрыДействия.Вставить("НеПодставлятьКонтрагентаИзЗаказчика", Истина);

	КонецЕсли;

	Документы.ЗаявкаНаРемонт.ЗаказчикПриИзменении(Объект, ПараметрыДействия);
	УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(ЭтотОбъект, Объект.Контрагент);
	
	// Проверим наличие заметок по выбранному объекту.
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Объект.Заказчик, ПараметрыДействия);
	
	// Обновим КИ
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		Объект.Заказчик,
		ЭтотОбъект,
		"Телефон,АдресЭлектроннойПочты",
		"ПредставлениеТелефона,АдресЭлектроннойПочты"
	);

	ПроверитьНеобходимостьОбновленияКИ();
	КомментарийТелефона = ЗначениеКомментарияКонтактнойИнформацииСервер(Объект.ПредставлениеТелефонаСтрокой);
	
	// заполним список выбора автомобилями контрагента
	АвтомобилиКонтрагента = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "АвтомобилиКонтрагента", Новый Массив);
	
	Элементы.Автомобиль.СписокВыбора.ЗагрузитьЗначения(АвтомобилиКонтрагента);
	
	УправлениеДиалогомНаСервере();
	
	УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(ЭтотОбъект, Объект.Заказчик, "ГруппаМеткиЗаказчика");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество() Тогда
		СтандартнаяОбработка = Ложь;
		Объект.Заказчик = ВыбранноеЗначение[0].КонтактноеЛицо;
		АдресИзДанныхВыбора = "";
		ТелефонИзДанныхВыбора = "";
		Для Каждого Строка Из ВыбранноеЗначение Цикл
			Если Строка.ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") 
				И Не ЗначениеЗаполнено(АдресИзДанныхВыбора) Тогда
				АдресИзДанныхВыбора = Строка.ЗначениеКИ;
			ИначеЕсли Строка.ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") 
				И Не ЗначениеЗаполнено(ТелефонИзДанныхВыбора)Тогда
				ТелефонИзДанныхВыбора = Строка.ЗначениеКИ;
			КонецЕсли;
		КонецЦикла;
		ОбработатьИзменениеЗаказчика();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПолученияДанных.Вставить("ПоискКонтрагентовСКИ");
	
	ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.Контрагенты"), ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПолученияДанных.Вставить("ПоискКонтрагентовСКИ");
	
	ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.Контрагенты"), ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("НеобходимоПерезаполнитьЗаказчика", Ложь);
	
	АвтомобильПриИзмененииНаСервере(ПараметрыДействия);
	
	ПроверитьРекомендацииПоАвтомобилю();
	
	ПроверитьСервиснуюКампанию();
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура АвтомобильПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаявкаНаРемонт.АвтомобильПриИзменении(Объект, ПараметрыДействия);
	РегистрыСведений.ЗапланированныеТО.ЧтениеЗначенияРегистраСведения(Объект.Автомобиль, ЭтотОбъект);
	
	// Проверим наличие заметок по выбранному объекту.
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Объект.Автомобиль, ПараметрыДействия);
	
	// Сформируем представление пробегов автомобиля
	ПредыдущийПробег = АвтомобилиКлиентСервер.ПредставлениеПредыдущихПробегов(
		Объект.Автомобиль, 
		СформироватьМассивДатПробега(Объект)
	);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура МодельПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	МодельПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура МодельПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦенРабот", Истина);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ВариантКомплектацииПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦенРабот", Истина);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура VINПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;	
	VINПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура VINПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ГосНомерПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ГосНомерПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ГосНомерПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	АвтомобилиСервер.ПроверитьКорректностьГосНомера(Объект, Объект.ГосНомер, Истина);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ЦехПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ЦехПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ЦехПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаявкаНаРемонт.ЦехПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРемонтаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	
	ПараметрыДействия.Вставить("КэшПлательщик", КэшПлательщик);
	ПараметрыДействия.Вставить("КэшВидРемонта", КэшВидРемонта);
	ПараметрыДействия.Вставить("КэшЗаказчик", КэшЗаказчик);
	
	ВидРемонтаПриИзмененииНаСервере(ПараметрыДействия);
	
	Результат = СвязанныеРаботыКлиент.НачатьЗаполнениеПоВидуРемонта(Объект, ЭтотОбъект, ПараметрыДействия);
	
	Если Не Результат Тогда
		// Обработаем изменения требующие ответа от пользователя
		ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
		
		КэшВидРемонта = Объект.ВидРемонта;
		КэшПлательщик = Объект.Контрагент;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидРемонтаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаявкаНаРемонт.ВидРемонтаПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СервиснаяКампанияРасширеннаяПодсказкаНажатие(Элемент)
	
	АвтосервисКлиент.ОткрытьФормуВыбораСервиснойКомпании(ЭтотОбъект, Объект.Автомобиль);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	КонтрагентПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	КэшПлательщик = Объект.Контрагент;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаявкаНаРемонт.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Объект.Контрагент, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(ЭтотОбъект, Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорВзаиморасчетовПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаявкаНаРемонт.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура МаркетинговаяПрограммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаявкаНаРемонт.МаркетинговаяПрограммаПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МаркетинговаяПрограммаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	МаркетинговаяПрограммаПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура СервиснаяКампанияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Если ЗначениеЗаполнено(Объект.СервиснаяКампания.ВидРемонта) Тогда
		Если Объект.СервиснаяКампания.ВидРемонта <> Объект.ВидРемонта Тогда
			ПараметрыДействия.Вставить("ТребуетсяУстановкаВидаРемонта", Истина);
		Иначе
			
			ЗадаватьВопросОбОчисткеТабличныхЧастей = (Объект.Автоработы.Количество() > 0
				ИЛИ Объект.Товары.Количество() > 0 
				ИЛИ Объект.ВспомогательныеАвтоработы.Количество() > 0);
			
			Если ЗадаватьВопросОбОчисткеТабличныхЧастей Тогда
				ПараметрыДействия.Вставить("ЗадаватьВопросОбОчисткеТабличныхЧастей", Истина);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.СервиснаяКампания.Автоработы.Количество() > 0
		И (ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.РедактированиеДеталейЗаказНаряда)
			ИЛИ ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.РедактированиеРаботЗаказНаряда))Тогда
		
		ПараметрыДействия.Вставить("ТребуетсяЗаполнениеАвтоработамиПоСервиснойКомпании", Истина);
		
	КонецЕсли;
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СервиснаяКампанияПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	СервиснаяКампанияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура СостояниеЗаявкиНаРемонтПриИзменении(ИмяКоманды, ПараметрыДействия = Неопределено)
	
	ЗначениеВыбора = Перечисления.СостояниеЗаявкиНаРемонт[СтрЗаменить(ИмяКоманды, "СостояниеЗнР", "")];
	Если ЗначениеВыбора = Объект.Состояние И ЗначениеВыбора <> Перечисления.СостояниеЗаявкиНаРемонт.Отклонено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Состояние = ЗначениеВыбора;
	Документы.ЗаявкаНаРемонт.СостояниеПриИзменении(Объект, ПараметрыДействия);
	
	Для Каждого Элемент Из Элементы.ВыборСостоянияЗаявки.ПодчиненныеЭлементы Цикл
		Элемент.Пометка = (Элемент.Имя = ИмяКоманды);
	КонецЦикла;
	
	ОбновитьПоказателиТоваров(ЭтотОбъект);
	ПоказатьПоказатели(Истина);

	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ЗапроситьПричинуОтказа", Ложь) Тогда
		УправлениеДиалогомНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НормочасПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	НормочасПриИзмененииНаСервере(ПараметрыДействия);
	
	// Вызываем общий обработчик проверки необходимости выполнения пересчета табличных частей объекта.
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
КонецПроцедуры

&НаСервере
Процедура НормочасПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаявкаНаРемонт.НормочасПриИзменении(Объект, ПараметрыДействия);
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВременныеРамкиПриИзменении(Элемент = Неопределено)
	
	ПредыдущийПробег = АвтомобилиКлиентСервер.
		ПредставлениеПредыдущихПробегов(Объект.Автомобиль, СформироватьМассивДатПробега(Объект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПричиныОбращенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПричиныОбращенийКлиент.ОписаниеПричиныОбращенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПричиныОбращенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		ПричинаОбращенияИзменилась = Истина;
		
		ПричиныОбращенийКлиент.ДобавитьПричиныОбращенияВДокумент(ВыбранноеЗначение, Объект);
		ПричиныОбращенийКлиент.ОбновитьОписаниеПричиныОбращения(Объект, Элементы.ОписаниеПричиныОбращения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПричиныОбращенияАвтоПодбор(
	Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПричиныОбращенийКлиент.ОписаниеПричиныОбращенияАвтоПодбор(Элемент, Текст, ДанныеВыбора,
		ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПричиныОбращенияПриИзменении(Элемент)
	
	ПерваяСтрокаПричиныОбращения = ПричиныОбращенийКлиент.ПерваяСтрокаПричиныОбращения(Объект);
	
	Если НЕ ЗначениеЗаполнено(ПерваяСтрокаПричиныОбращения.ИдентификаторПричиныОбращения) Тогда
		ПерваяСтрокаПричиныОбращения.ИдентификаторПричиныОбращения = Новый УникальныйИдентификатор;
		ПричинаОбращенияИзменилась = Истина;
	КонецЕсли;
	
	ПерваяСтрокаПричиныОбращения.ПричинаОбращенияСодержание = Объект.ОписаниеПричиныОбращения;
	
	Если ПричинаОбращенияИзменилась Тогда
		
		ОбработатьИзменениеПричиныОбращения(ПерваяСтрокаПричиныОбращения);
				
		ПричиныОбращенийКлиент.ОбновитьИдентификаторыТаблиц(Объект);

		ПричиныОбращенийКлиентСервер
			.ОбновитьИндикаторыПричинОбращения(Объект.ПричиныОбращения, Объект.Автоработы, Объект.Товары);
			
		//@skip-check unknown-method-property
		Элементы.ПричиныОбращенияТовары.ТекущаяСтрока = ПерваяСтрокаПричиныОбращения.ПолучитьИдентификатор();
		//@skip-check unknown-method-property
		Элементы.ПричиныОбращенияАвтоработы.ТекущаяСтрока = ПерваяСтрокаПричиныОбращения.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПовторноеОбращениеПриИзмененииНаСервере()
	
	Если НЕ Объект.ПовторноеОбращение Тогда
		
		Объект.АвторСнятияПовторногоОбращения = Пользователи.ТекущийПользователь();
		Объект.ДатаСнятияПовторногоОбращения = ТекущаяДатаСеанса();
		
	Иначе
		
		Объект.АвторСнятияПовторногоОбращения = Неопределено;
		Объект.ДатаСнятияПовторногоОбращения = Неопределено;
		Объект.ПричинаСнятияПовторногоОбращения = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторноеОбращениеПриИзменении(Элемент)
	
	ПовторноеОбращениеПриИзмененииНаСервере();
	
	Если НЕ Объект.ПовторноеОбращение Тогда
		
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"Подключаемый_ОкончаниеВводаТекстаСнятияПовторногоОбращения",
			ЭтотОбъект);
		
		ПоказатьВводСтроки(
			ОбработчикОповещения,
			Объект.ПричинаСнятияПовторногоОбращения,
			НСтр("ru = 'Комментарий к снятию признака повторного обращения'"),
			500,
			Истина);
		
		СнятоПовторноеОбращениеВСервис = Истина;
		
	Иначе
		
		СнятоПовторноеОбращениеВСервис = Ложь;
		
	КонецЕсли;
	
	СформироватьИнформациюПоСнятиюПовторногоОбращения();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ВывестиКоличествоСтрок();
	
КонецПроцедуры // СтраницыПриСменеСтраницы()

#Область СтандартныеПодсистемыКонтактнаяИнформация

&НаСервере
Процедура ИнициализироватьПоляКонтактнойИнформации()
	
	ВидКонтактнойИнформацииТелефона = Новый Структура;
	ВидКонтактнойИнформацииТелефона.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	ВидКонтактнойИнформацииЭлектроннойПочты = Новый Структура;
	ВидКонтактнойИнформацииЭлектроннойПочты.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	КомментарийТелефона = ЗначениеКомментарияКонтактнойИнформацииСервер(Объект.ПредставлениеТелефонаСтрокой);
	
	РазрешитьВводНесколькихЗначенийТелефона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, "РазрешитьВводНесколькихЗначений");
	
	РазрешитьВводНесколькихЗначенийЭлектроннойПочты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, "РазрешитьВводНесколькихЗначений");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеКомментарияКонтактнойИнформацииСервер(КонтактнаяИнформация)
	
	Результат = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(КонтактнаяИнформация);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначенияПолейКонтактнойИнформацииСервер(Знач Представление, Знач ВидКонтактнойИнформации, Знач Комментарий = Неопределено)
	
	// Создаем новый экземпляр по представлению.
	Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, ВидКонтактнойИнформации);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПредставлениеТелефонаПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		Объект.ПредставлениеТелефона        = "";
		Объект.ПредставлениеТелефонаСтрокой = "";
		УстановитьСвойстваПоляВводаТелефона();
		Возврат;
	КонецЕсли;
	
	// Формируем внутренние значения полей по тексту и параметрам формирования из
	// реквизита ВидКонтактнойИнформацииЭлектроннойПочты.     
	Объект.ПредставлениеТелефона = Текст;
	Объект.ПредставлениеТелефонаСтрокой = ЗначенияПолейКонтактнойИнформацииСервер(Текст, ВидКонтактнойИнформацииТелефона);
	
	ПроверитьНеобходимостьОбновленияКИ();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТелефонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Если представление было изменено в поле и сразу нажата кнопка выбора, то необходимо 
	// привести данные в соответствие и сбросить внутренние поля для повторного разбора.
	Если Элемент.ТекстРедактирования <> Объект.ПредставлениеТелефона Тогда
		Объект.ПредставлениеТелефона = Элемент.ТекстРедактирования;
		Объект.ПредставлениеТелефонаСтрокой = "";
	КонецЕсли;
	
	// Данные для редактирования
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента"),
		Объект.ПредставлениеТелефонаСтрокой,
		Объект.ПредставлениеТелефона,
		КомментарийТелефона
	);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТелефонаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТелефонИзменен = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Объект.ПредставлениеТелефона        = ВыбранноеЗначение.Представление;
		КомментарийТелефона                 = ВыбранноеЗначение.Комментарий;
		Объект.ПредставлениеТелефонаСтрокой = ВыбранноеЗначение.Значение;
		ТелефонИзменен = Истина;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		Объект.ПредставлениеТелефона        = ВыбранноеЗначение;
		КомментарийТелефона                 = "";
		Объект.ПредставлениеТелефонаСтрокой = ЗначенияПолейКонтактнойИнформацииСервер(ВыбранноеЗначение, ВидКонтактнойИнформацииТелефона);
		ТелефонИзменен = Истина;
		
	КонецЕсли;
	
	Если ТелефонИзменен Тогда
		ПроверитьНеобходимостьОбновленияКИ();
		УправлениеДиалогомНаСервере();
		Модифицированность = Истина;
	Иначе
		УстановитьСвойстваПоляВводаТелефона();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТелефонаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.ПредставлениеТелефона        = "";
	КомментарийТелефона                 = "";
	Объект.ПредставлениеТелефонаСтрокой = ""; 
	ПроверитьНеобходимостьОбновленияКИ();
	УстановитьСвойстваПоляВводаТелефона();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭлектроннойПочтыПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		Объект.АдресЭлектроннойПочты        = "";
		Объект.АдресЭлектроннойПочтыСтрокой = "";
		Возврат;
	КонецЕсли;
	
	// Формируем внутренние значения полей по тексту и параметрам формирования из
	// реквизита ВидКонтактнойИнформацииЭлектроннойПочты.
	Объект.АдресЭлектроннойПочты        = Текст;
	Объект.АдресЭлектроннойПочтыСтрокой = ЗначенияПолейКонтактнойИнформацииСервер(Текст, ВидКонтактнойИнформацииЭлектроннойПочты);
	
	ПроверитьНеобходимостьОбновленияКИ();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭлектроннойПочтыОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.АдресЭлектроннойПочты        = "";
	Объект.АдресЭлектроннойПочтыСтрокой = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзМенюТелефон(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Телефон = Объект.ПредставлениеТелефона;
		Если ВыбранныйЭлемент.Значение = "ОтправитьSMS" Тогда
			
			ВзаимодействияАльфаАвтоКлиент.СоздатьSMS(
				Объект.ПредставлениеТелефона,
				Объект.Контрагент,
				Объект.Ссылка
			);
		Иначе
			ВзаимодействияАльфаАвтоКлиент.ПозвонитьКонтакту(Объект.Заказчик, Телефон, Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьОбновленияКИ()
	
	УстановитьСвойстваПоляВводаТелефона();
	
	Если ТипЗнч(Объект.Заказчик) = Тип("Строка")
		ИЛИ Объект.Заказчик = Справочники.Контрагенты.ПустаяСсылка() Тогда
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Элементы.АдресЭлектроннойПочты.СписокВыбора.Количество() > 0
		И Объект.АдресЭлектроннойПочты <> "" Тогда
		ЭлектроннаяПочта = Элементы.АдресЭлектроннойПочты.СписокВыбора.НайтиПоЗначению(Объект.АдресЭлектроннойПочты);
		ЭтоНовыйАдрес = (ЭлектроннаяПочта = Неопределено);
	Иначе
		ЭтоНовыйАдрес = (Объект.АдресЭлектроннойПочты <> "");
	КонецЕсли;
	
	Если Элементы.ПредставлениеТелефона.СписокВыбора.Количество() > 0
		И Объект.ПредставлениеТелефона <> "" Тогда
		Телефон = Элементы.ПредставлениеТелефона.СписокВыбора.НайтиПоЗначению(Объект.ПредставлениеТелефона);
		ЭтоНовыйТелефон = (Телефон = Неопределено);
	Иначе
		ЭтоНовыйТелефон = (Объект.ПредставлениеТелефона <> "");
	КонецЕсли;
	
	ЕстьНоваяКИ = ЭтоНовыйАдрес ИЛИ ЭтоНовыйТелефон;
	
	Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Доступность = ЕстьНоваяКИ;
	
	Если НЕ ЕстьНоваяКИ Тогда
		Элементы.ОбновлятьКИ.Пометка   = Ложь;
		Элементы.НеОбновлятьКИ.Пометка = Истина;
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Заголовок = НСтр("ru = 'Не обновлять'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПричиныОбращенияАвтоработы

&НаКлиенте
Процедура ПричиныОбращенияАвтоработыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если (НоваяСтрока И ПустаяСтрока(Элемент.ТекущиеДанные.ИдентификаторПричиныОбращения)) ИЛИ Копирование Тогда
		
		Элемент.ТекущиеДанные.ИдентификаторПричиныОбращения = Новый УникальныйИдентификатор;
		ПричиныОбращенийКлиент.ОбновитьИдентификаторыТаблиц(Объект);
		ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(Элемент.ТекущиеДанные, Элементы.Автоработы, ИспользоватьПричиныОбращений);
		УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.Автоработы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияАвтоработыПриАктивизацииСтроки(Элемент)
	
	Если НЕ Элемент = Неопределено Тогда
		ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(Элемент.ТекущиеДанные, Элементы.Автоработы, ИспользоватьПричиныОбращений);
		Элементы.ПричиныОбращенияТовары.ТекущаяСтрока = Элемент.ТекущаяСтрока;
	КонецЕсли;
	
	ВывестиКоличествоСтрок(Элементы.Автоработы);
	РасчетИтоговАвторабот();
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияАвтоработыПриИзменении(Элемент)
	
	ПричиныОбращенийКлиент.ОбновитьОписаниеПричиныОбращения(Объект, Элементы.ОписаниеПричиныОбращения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияАвтоработыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		
		ПричиныОбращенийКлиент.ОбновитьИдентификаторыТаблиц(Объект);
		
	КонецЕсли;
	
	ПричиныОбращенийКлиентСервер
		.ОбновитьИндикаторыПричинОбращения(Объект.ПричиныОбращения, Объект.Автоработы, Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияАвтоработыПередУдалением(Элемент, Отказ)
	
	Если Объект.ПричиныОбращения.Количество() > 1 Тогда
		
		Отбор = Новый Структура("ИдентификаторПричиныОбращения", Элемент.ТекущиеДанные.ИдентификаторПричиныОбращения);
		СтрокиУдаляемогоЭлементаАвтоработы = Объект.Автоработы.НайтиСтроки(Отбор);
		СтрокиУдаляемогоЭлементаТовары = Объект.Товары.НайтиСтроки(Отбор);
		
		Если НЕ СтрокиУдаляемогоЭлементаАвтоработы.Количество() = 0 ИЛИ НЕ СтрокиУдаляемогоЭлементаТовары.Количество() = 0 Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Событие", "ВопросПеренесенияПозицийВДругуюПричинуОбращеий");
			ДополнительныеПараметры.Вставить("ИмяКоманды", "");
			ДополнительныеПараметры.Вставить("Элемент", Элемент);
			Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ДополнительныеПараметры);
			
			КнопкиВопроса = Новый СписокЗначений;
			КнопкиВопроса.Добавить("Перенести", "Перенести в другую причину обращения");
			КнопкиВопроса.Добавить("Удалить", "Удалить позиции");
			КнопкиВопроса.Добавить("Отмена", "Отменить удаление причины обращения");
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Выберите что необходимо сделать с Автоработами/Товарами удаляемой причины обращения?'"), КнопкиВопроса);
			
			Отказ = Истина;
			
		КонецЕсли;
		
	Иначе
		
		ПричиныОбращенийКлиент.СброситьИдентификаторПричиныОбращения(
			Объект, Элемент.ТекущиеДанные.ИдентификаторПричиныОбращения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияАвтоработыПослеУдаления(Элемент)
	
	ОбновитьДанныеПослеУдаленияПричиныОбращения(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияАвтоработыПричинаОбращенияСодержаниеПриИзменении(Элемент)
	
	ТекДанные = Элементы.ПричиныОбращенияАвтоработы.ТекущиеДанные;
	
	Если ПричинаОбращенияИзменилась ИЛИ НЕ ЗначениеЗаполнено(ТекДанные.ПричинаОбращения) Тогда
		
		ОбработатьИзменениеПричиныОбращения(ТекДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияАвтоработыПредставлениеСтрокиНаФормеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПричиныОбращенийКлиент
		.ОткрытьФормуВыбораПричиныОбращения(Элемент, Элементы.ПричиныОбращенияАвтоработы.ТекущиеДанные.ПричинаОбращения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияАвтоработыПричинаОбращенияСодержаниеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПричиныОбращенийКлиент
		.НачатьРедактированиеПричины(Элементы.ПричиныОбращенияАвтоработы.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияАвтоработыПредставлениеСтрокиНаФормеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		ПричинаОбращенияИзменилась = Истина;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Модель", Объект.Модель);
		ДопПараметры.Вставить("Комплектация", Объект.ВариантКомплектации);
		ПричиныОбращенийКлиент.ЗаполнитьСтрокуПричиныПоВыбранномуЗначению(
			Элементы.ПричиныОбращенияАвтоработы.ТекущиеДанные, ВыбранноеЗначение, ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияАвтоработыПредставлениеСтрокиНаФормеАвтоПодбор(
	Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПричиныОбращенийКлиент.ОписаниеПричиныОбращенияАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		ПараметрыПолученияДанных,
		Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияАвтоработыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка <> Неопределено Тогда
		
		Причина = Объект.ПричиныОбращения.НайтиПоИдентификатору(Строка);
		
		Если Причина <> Неопределено
			И ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
			И ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
			
			Для Каждого ПеретаскиваемаяСтрока Из ПараметрыПеретаскивания.Значение Цикл
				
				Если ТипЗнч(ПеретаскиваемаяСтрока) = Тип("ДанныеФормыЭлементКоллекции")
					И ПеретаскиваемаяСтрока.Свойство("ИдентификаторПричиныОбращения") Тогда
					
					ПеретаскиваемаяСтрока.ИдентификаторПричиныОбращения = Причина.ИдентификаторПричиныОбращения;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.Автоработы);
	
	ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
		Элементы.ПричиныОбращенияАвтоработы.ТекущиеДанные,
		Элементы.Автоработы,
		ИспользоватьПричиныОбращений);
	
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
		Объект.ПричиныОбращения,
		Объект.Автоработы,
		Объект.Товары);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПричиныОбращенияТовары

&НаКлиенте
Процедура ПричиныОбращенияТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если (НоваяСтрока И ПустаяСтрока(Элемент.ТекущиеДанные.ИдентификаторПричиныОбращения)) ИЛИ Копирование Тогда
		
		Элемент.ТекущиеДанные.ИдентификаторПричиныОбращения = Новый УникальныйИдентификатор;
		ПричиныОбращенийКлиент.ОбновитьИдентификаторыТаблиц(Объект);
		
		ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
			Элемент.ТекущиеДанные,
			Элементы.Товары,
			ИспользоватьПричиныОбращений
		);
		
		УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.Товары);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияТоварыПриАктивизацииСтроки(Элемент)
	
	Если НЕ Элемент = Неопределено Тогда
		
		ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
			Элемент.ТекущиеДанные,
			Элементы.Товары,
			ИспользоватьПричиныОбращений
		);
		Элементы.ПричиныОбращенияАвтоработы.ТекущаяСтрока = Элемент.ТекущаяСтрока;
		
	КонецЕсли;
	
	ВывестиКоличествоСтрок(Элементы.Товары);
	РасчетИтоговТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияТоварыПриИзменении(Элемент)
	
	ПричиныОбращенийКлиент.ОбновитьОписаниеПричиныОбращения(Объект, Элементы.ОписаниеПричиныОбращения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		
		ПричиныОбращенийКлиент.ОбновитьИдентификаторыТаблиц(Объект);
		
	КонецЕсли;
	
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
		Объект.ПричиныОбращения,
		Объект.Автоработы,
		Объект.Товары
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияТоварыПередУдалением(Элемент, Отказ)
	
	Если Объект.ПричиныОбращения.Количество() > 1 Тогда
		
		Отбор = Новый Структура("ИдентификаторПричиныОбращения", Элемент.ТекущиеДанные.ИдентификаторПричиныОбращения);
		СтрокиУдаляемогоЭлементаАвтоработы = Объект.Автоработы.НайтиСтроки(Отбор);
		СтрокиУдаляемогоЭлементаТовары = Объект.Товары.НайтиСтроки(Отбор);
		
		Если НЕ СтрокиУдаляемогоЭлементаАвтоработы.Количество() = 0 ИЛИ НЕ СтрокиУдаляемогоЭлементаТовары.Количество() = 0 Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Событие", "ВопросПеренесенияПозицийВДругуюПричинуОбращеий");
			ДополнительныеПараметры.Вставить("ИмяКоманды", "");
			ДополнительныеПараметры.Вставить("Элемент", Элемент);
			Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ДополнительныеПараметры);
			
			КнопкиВопроса = Новый СписокЗначений;
			КнопкиВопроса.Добавить("Перенести", "Перенести в другую причину обращения");
			КнопкиВопроса.Добавить("Удалить", "Удалить позиции");
			КнопкиВопроса.Добавить("Отмена", "Отменить удаление причины обращения");
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Выберите что необходимо сделать с Автоработами/Товарами удаляемой причины обращения?'"), КнопкиВопроса);
			
			Отказ = Истина;
			
		КонецЕсли;
		
	Иначе
		
		ПричиныОбращенийКлиент.СброситьИдентификаторПричиныОбращения(
			Объект, Элемент.ТекущиеДанные.ИдентификаторПричиныОбращения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияТоварыПослеУдаления(Элемент)
	
	ОбновитьДанныеПослеУдаленияПричиныОбращения(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияТоварыПричинаОбращенияСодержаниеПриИзменении(Элемент)
	
	ТекДанные = Элементы.ПричиныОбращенияТовары.ТекущиеДанные;
	
	Если ПричинаОбращенияИзменилась ИЛИ НЕ ЗначениеЗаполнено(ТекДанные.ПричинаОбращения) Тогда
		
		ОбработатьИзменениеПричиныОбращения(ТекДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияТоварыПричинаОбращенияСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПричиныОбращенийКлиент.ОткрытьФормуВыбораПричиныОбращения(
		Элемент, 
		Элементы.ПричиныОбращенияТовары.ТекущиеДанные.ПричинаОбращения
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияТоварыПричинаОбращенияСодержаниеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПричиныОбращенийКлиент.НачатьРедактированиеПричины(
		Элементы.ПричиныОбращенияТовары.ТекущиеДанные,
		ЭтотОбъект
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияТоварыПричинаОбращенияСодержаниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		ПричинаОбращенияИзменилась = Истина;
		
		ТекущиеДанные = Объект.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияТовары.ТекущаяСтрока);
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Модель", Объект.Модель);
		ДопПараметры.Вставить("Комплектация", Объект.ВариантКомплектации);
		ПричиныОбращенийКлиент.ЗаполнитьСтрокуПричиныПоВыбранномуЗначению(ТекущиеДанные, ВыбранноеЗначение, ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияТоварыПричинаОбращенияСодержаниеАвтоПодбор(
	Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПричиныОбращенийКлиент.ОписаниеПричиныОбращенияАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		ПараметрыПолученияДанных,
		Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОбращенияТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка <> Неопределено Тогда
		
		Причина = Объект.ПричиныОбращения.НайтиПоИдентификатору(Строка);
		
		Если Причина <> Неопределено
			И ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
			И ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
			
			Для Каждого ПеретаскиваемаяСтрока Из ПараметрыПеретаскивания.Значение Цикл
				
				Если ТипЗнч(ПеретаскиваемаяСтрока) = Тип("ДанныеФормыЭлементКоллекции")
					И ПеретаскиваемаяСтрока.Свойство("ИдентификаторПричиныОбращения") Тогда
					
					ПеретаскиваемаяСтрока.ИдентификаторПричиныОбращения = Причина.ИдентификаторПричиныОбращения;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.Товары);
	
	ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
		Элементы.ПричиныОбращенияТовары.ТекущиеДанные, 
		Элементы.Товары,
		ИспользоватьПричиныОбращений
	);
	
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
		Объект.ПричиныОбращения, 
		Объект.Автоработы,
		Объект.Товары
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СкидкиНаценкиКлиент.ОбработкаВыбора(ЭтотОбъект, Поле, ВыбраннаяСтрока, Объект.БлокироватьПерерасчетСкидок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ПричиныОбращенияТоварыПриАктивизацииСтроки(Элементы.ПричиныОбращенияТовары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ,  ПослеВопроса=Ложь)
	
	Если ПереносРаботДеталейВРекомендацииПриУдалении И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Номенклатура) И НЕ ПослеВопроса Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Событие", "ВопросПеренесенияВРекомендацииУдаляемыхСтрокТоваров");
		ДополнительныеПараметры.Вставить("ИмяКоманды", "");
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перенести удаляемую строку в рекомендации автомобиля?'"), РежимДиалогаВопрос.ДаНет);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	УправлениеДиалогомДокументаКлиент.ТоварыПередУдалением(ЭтотОбъект, Элемент, Отказ);
	
	Если НЕ Отказ Тогда
		
		ВыделенныеСтрокиКоличество = Элементы.Товары.ВыделенныеСтроки.Количество();
		Пока ВыделенныеСтрокиКоличество - 1 >= 0 Цикл
			ВыделеннаяСтрока = Элементы.Товары.ВыделенныеСтроки[0];
			НайденнаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
			Объект.Товары.Удалить(НайденнаяСтрока);
			ВыделенныеСтрокиКоличество = ВыделенныеСтрокиКоличество - 1;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеДиалогомДокументаКлиент.ТоварыПриОкончанииРедактирования(
		ЭтотОбъект, 
		Элемент,
		НоваяСтрока, 
		ОтменаРедактирования
	);

	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОтложенныйРасчетПоказателей", 1, Истина);

	ПричиныОбращенийКлиентСервер
		.ОбновитьИндикаторыПричинОбращения(Объект.ПричиныОбращения, Объект.Автоработы, Объект.Товары);
	РасчетИтоговТоваров();
КонецПроцедуры 

&НаСервере
Процедура ТоварыПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомДокументаСервер.ТоварыПослеУдаления(ЭтаФорма, Элементы.Товары, ПараметрыДействия);
	
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
		Объект.ПричиныОбращения,
		Объект.Автоработы,
		Объект.Товары
	);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ТоварыПослеУдаленияНаСервере();
	
КонецПроцедуры 

#Область ОбработчикиСобытийПолейТаблицыФормыТовары

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.ТоварыНоменклатураПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ТоварыНоменклатураПриИзмененииНаСервере();
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(Объект, ТекущиеДанные, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.ТоварыЕдиницаИзмеренияПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТоварыЕдиницаИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.ТоварыКоличествоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТоварыКоличествоПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыЦенаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.ТоварыЦенаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТоварыЦенаПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСуммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.ТоварыСуммаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТоварыСуммаПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.ТоварыСуммаВсегоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСуммаВсегоПриИзменении(Элемент)
	
	ТоварыСуммаВсегоПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.ТоварыСтавкаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТоварыСтавкаНДСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.ТоварыСуммаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТоварыСуммаНДСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Элемент)

	ТоварыСуммаСкидкиСтрокиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.ТоварыСуммаСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	
	ТоварыСуммаСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСкидкаНаТоварПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Ложь;
	ТекущиеДанные.СкидкаСтрокиИзменена = Истина;
	Документы.ЗаявкаНаРемонт.ТоварыСкидкаНаТоварПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкидкаНаТоварПриИзменении(Элемент)
	
	ТоварыСкидкаНаТоварПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПроцентСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.ТоварыПроцентСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиПриИзменении(Элемент)
	
	ТоварыПроцентСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПроцентСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Элемент)
	
	ТоварыПроцентСкидкиСтрокиПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура();
	
	Если ЗначениеЗаполнено(Объект.Модель) Тогда
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Модель", Объект.Модель);
		ДополнительныеПараметры.Вставить("ОтборНоменклатурыПоПрименяемости");
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.СкладКомпании) Тогда
		ДополнительныеПараметры.Вставить("СкладКомпании", ТекущиеДанные.СкладКомпании);
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущиеДанные.Номенклатура);
	
	УправлениеДиалогомДокументаКлиент.ТоварыНоменклатураНачалоВыбора(
		ЭтотОбъект,
		Элемент,
		ДанныеВыбора,
		ВыборДобавлением,
		СтандартнаяОбработка,
		ДополнительныеПараметры);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ПустаяСтрока(ТекущиеДанные.ИдентификаторПричиныОбращения) И Элементы.ПричиныОбращенияТовары.ТекущаяСтрока <> Неопределено Тогда
		ДанныеОбращения = Объект.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияТовары.ТекущаяСтрока);
		ТекущиеДанные.ИдентификаторПричиныОбращения = ДанныеОбращения.ИдентификаторПричиныОбращения;
		ПричиныОбращенияТоварыПриАктивизацииСтроки(Элементы.ПричиныОбращенияТовары);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтоработы

&НаКлиенте
Процедура АвтоработыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СкидкиНаценкиКлиент.ОбработкаВыбора(
		ЭтотОбъект,
		Поле,
		ВыбраннаяСтрока,
		Объект.БлокироватьПерерасчетСкидок,
		"Автоработы"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыПриАктивизацииСтроки(Элемент)
	
	ПричиныОбращенияАвтоработыПриАктивизацииСтроки(Элементы.ПричиныОбращенияАвтоработы);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УправлениеДиалогомАльфаАвтоКлиент.АвтоработыПриНачалеРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, Копирование);
	
	ТекущиеДанные = Элементы.Автоработы.ТекущиеДанные;
	
	Если ПустаяСтрока(ТекущиеДанные.ИдентификаторРаботы) ИЛИ Копирование Тогда
		ТекущиеДанные.ИдентификаторРаботы = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущиеДанные.ИдентификаторПричиныОбращения) 
		И Элементы.ПричиныОбращенияАвтоработы.ТекущаяСтрока <> Неопределено Тогда
		
		ДанныеОбращения = Объект.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияАвтоработы.ТекущаяСтрока);
		ТекущиеДанные.ИдентификаторПричиныОбращения = ДанныеОбращения.ИдентификаторПричиныОбращения;
		ПричиныОбращенияАвтоработыПриАктивизацииСтроки(Элементы.ПричиныОбращенияАвтоработы);
		
	КонецЕсли;
	
	Если Копирование Тогда 
		ТекущиеДанные.Исполнители = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыПередУдалением(Элемент, Отказ, ПослеВопроса=Ложь)
	
	Если ПереносРаботДеталейВРекомендацииПриУдалении И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Авторабота) И НЕ ПослеВопроса Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Событие", "ВопросПеренесенияВРекомендацииУдаляемыхСтрок");
		ДополнительныеПараметры.Вставить("ИмяКоманды", "");
		ДополнительныеПараметры.Вставить("Элемент", Элементы.Автоработы);
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перенести удаляемую строку в рекомендации автомобиля?'"), РежимДиалогаВопрос.ДаНет);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УправлениеДиалогомАльфаАвтоКлиент.АвтоработыПередУдалением(ЭтотОбъект, Элемент, Отказ);
	
	ОбщегоНазначенияАвтосалонКлиент.УдалитьСопутствующиеСтроки(
		ОбщегоНазначенияАвтосалонКлиент.ИдентификаторыТаблицыВСтроки(Элемент.ВыделенныеСтроки, Объект.Автоработы),
		Объект.Исполнители,
		"ИдентификаторРаботы");
	
	Если НЕ Отказ Тогда
		
		ВыделенныеСтрокиКоличество = Элементы.Автоработы.ВыделенныеСтроки.Количество();
		Пока ВыделенныеСтрокиКоличество - 1 >= 0 Цикл
			ВыделеннаяСтрока = Элементы.Автоработы.ВыделенныеСтроки[0];
			НайденнаяСтрока = Объект.Автоработы.НайтиПоИдентификатору(ВыделеннаяСтрока);
			Объект.Автоработы.Удалить(НайденнаяСтрока);
			ВыделенныеСтрокиКоличество = ВыделенныеСтрокиКоличество - 1;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Автоработы.ТекущиеДанные;
	
	Если НоваяСтрока И 
		НЕ ОтменаРедактирования И
		(НЕ ТекущиеДанные = Неопределено И НЕ ЗначениеЗаполнено(ТекущиеДанные.Исполнители)) Тогда
		
		ЗаполнениеИсполнителей(ЭтотОбъект, Объект);
		
	КонецЕсли;
	
	УправлениеДиалогомАльфаАвтоКлиент.АвтоработыПриОкончанииРедактирования(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока,
		ОтменаРедактирования
	);
	
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
		Объект.ПричиныОбращения, 
		Объект.Автоработы, 
		Объект.Товары
	);   
	РасчетИтоговАвторабот();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыПослеУдаления(Элемент)
	
	АвтоработыПослеУдаленияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомАльфаАвтоСервер.АвтоработыПослеУдаления(ЭтотОбъект, Элементы.Автоработы);
	
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
		Объект.ПричиныОбращения,
		Объект.Автоработы,
		Объект.Товары
	);
	
КонецПроцедуры

#Область ОбработчикиСобытийПолейТаблицыФормыТовары

&НаКлиенте
Процедура АвтоработыАвтоработаПриИзменении(Элемент)
	
	АвтоработыАвтоработаПриИзмененииНаСервере();
	
	// Заполним связанные работы
	ТекущиеДанные = Элементы.Автоработы.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(Объект, ТекущиеДанные, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыАвтоработаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.АвтоработыАвтоработаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыКоличествоПриИзменении(Элемент)
	
	АвтоработыКоличествоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.АвтоработыКоличествоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыНормочасПриИзменении(Элемент)
	
	АвтоработыНормочасПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыНормочасПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.АвтоработыНормочасПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыКоэффициентПриИзменении(Элемент)
	
	АвтоработыКоэффициентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыКоэффициентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.АвтоработыКоэффициентПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыЦенаПриИзменении(Элемент)
	
	АвтоработыЦенаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыЦенаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.АвтоработыЦенаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыСуммаПриИзменении(Элемент)
	
	АвтоработыСуммаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыСуммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.АвтоработыСуммаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыСуммаВсегоПриИзменении(Элемент)
	
	АвтоработыСуммаВсегоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.АвтоработыСуммаВсегоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыСтавкаНДСПриИзменении(Элемент)
	
	АвтоработыСтавкаНДСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.АвтоработыСтавкаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыСуммаНДСПриИзменении(Элемент)
	
	АвтоработыСуммаНДСПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура АвтоработыСуммаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.АвтоработыСуммаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура АвтоработыПроцентСкидкиПриИзменении(Элемент)
	
	АвтоработыПроцентСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыПроцентСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.АвтоработыПроцентСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыСуммаСкидкиПриИзменении(Элемент)
	
	АвтоработыСуммаСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыСуммаСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.АвтоработыСуммаСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыСкидкаНаТоварПриИзменении(Элемент)
	
	АвтоработыСкидкаНаТоварПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыСкидкаНаТоварПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Ложь;
	ТекущиеДанные.СкидкаСтрокиИзменена = Истина;
	Документы.ЗаявкаНаРемонт.АвтоработыСкидкаНаТоварПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыПроцентСкидкиСтрокиПриИзменении(Элемент)
	
	АвтоработыПроцентСкидкиСтрокиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыПроцентСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.АвтоработыПроцентСкидкиСтрокиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыСуммаСкидкиСтрокиПриИзменении(Элемент)
	
	АвтоработыСуммаСкидкиСтрокиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтоработыСуммаСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.АвтоработыСуммаСкидкиСтрокиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыИсполнителиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПодборИсполнителей();
	
КонецПроцедуры 

&НаСервере
Процедура АвтоработыСпособРасчетаСтоимостиРаботыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Элементы.Автоработы.ТекущаяСтрока);
	Документы.ЗаявкаНаРемонт.АвтоработыСпособРасчетаСтоимостиРаботыПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоработыСпособРасчетаСтоимостиРаботыПриИзменении(Элемент)
	
	АвтоработыСпособРасчетаСтоимостиРаботыПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВспомогательныеАвтоработы

&НаКлиенте
Процедура ВспомогательныеАвтоработыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если ПустаяСтрока(Элементы.ВспомогательныеАвтоработы.ТекущиеДанные.ИдентификаторРаботы) Тогда
		
		Элементы.ВспомогательныеАвтоработы.ТекущиеДанные.ИдентификаторРаботы = Новый УникальныйИдентификатор;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВспомогательныеАвтоработыАвтоработаПриИзмененииНаСервере(ПараметрыДействия=Неопределено)
	
	ТекущиеДанные = Объект.ВспомогательныеАвтоработы.НайтиПоИдентификатору(
		Элементы.ВспомогательныеАвтоработы.ТекущаяСтрока);
	
	Документы.ЗаявкаНаРемонт.ВспомогательныеАвтоработыАвтоработаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ВспомогательныеАвтоработыАвтоработаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура();
	
	ВспомогательныеАвтоработыАвтоработаПриИзмененииНаСервере(ПараметрыДействия);
	
	// Заполним связанные работы
	ТекущиеДанные = Элементы.ВспомогательныеАвтоработы.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(Объект, ТекущиеДанные, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)
	
	ОписаниеОбъекта = Неопределено;
	РежимПросмотраМеток = Ложь;
	
	Если СтрНайти(ЭлементИлиКоманда.Имя, "ОстальныеМетки") = 1 Тогда
		
		Если ЭлементИлиКоманда.Родитель.Имя = "ГруппаМеткиКонтрагента" Тогда
			ОписаниеОбъекта = Объект.Контрагент;
			РежимПросмотраМеток = Истина;
		ИначеЕсли ЭлементИлиКоманда.Родитель.Имя = "ГруппаМеткиЗаказчика" Тогда
			ОписаниеОбъекта = Объект.Заказчик;
			РежимПросмотраМеток = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеСвойствамиАльфаАвтоКлиент.ВыполнитьКоманду(
		ЭтотОбъект,
		ЭлементИлиКоманда,
		СтандартнаяОбработка,
		ОписаниеОбъекта,
		РежимПросмотраМеток);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СостояниеЗаявкиНаРемонтПриИзменении(Команда)
	
	ПараметрыДействия = Новый Структура;
	СостояниеЗаявкиНаРемонтПриИзменении(Команда.Имя, ПараметрыДействия);
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ЗапроситьПричинуОтказа", Ложь) Тогда
		
		ОписаниеОповещенияОЗакрытииФормы = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			ЭтотОбъект, 
			"ВыборПричиныОтказаОтОбслуживания"
		);
		
		ПараметрыОткрытияФормы = Новый Структура("РежимВыбора", Истина);
		
		ОткрытьФорму(
			"Справочник.ПричиныОтказаОтОбслуживания.ФормаВыбора",
			ПараметрыОткрытияФормы,
			ЭтотОбъект,
			ЭтотОбъект,
			,,
			ОписаниеОповещенияОЗакрытииФормы,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРекомендацииНажатие(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Событие", "ВопросЗаписиДокументаДляПодбораРекомендации");
		ДополнительныеПараметры.Вставить("ИмяКоманды", Кнопка.Имя);
		
		Оповещение = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			ЭтотОбъект,
			ДополнительныеПараметры
		);
		
		ПоказатьВопрос(
			Оповещение, 
			НСтр("ru = 'Документ еще не записан, загрузка не возможна. Записать документ?'"),
			РежимДиалогаВопрос.ДаНет
		);
		Возврат;
		
	КонецЕсли;
	
	ОткрытьПодборРекомендаций(Кнопка.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборРекомендаций(ИмяКоманды)
	
	Если ТипЗнч(Объект.Автомобиль) <> Тип("СправочникСсылка.Автомобили") И (НЕ ЗначениеЗаполнено(Объект.Автомобиль)) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Автомобиль не выбран.'"), Объект.Ссылка);
		Возврат;
		
	КонецЕсли; 
	
	// передадим начальные параметры
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Автомобиль",            Объект.Автомобиль);
	СтруктураПараметров.Вставить("ТипЦен",                Объект.ТипЦен);
	СтруктураПараметров.Вставить("ТипЦенАвторабот",       Объект.ТипЦенРабот);
	СтруктураПараметров.Вставить("Дата",                  Объект.Дата);
	СтруктураПараметров.Вставить("Контрагент",            Объект.Контрагент);
	СтруктураПараметров.Вставить("ДоговорВзаиморасчетов", Объект.ДоговорВзаиморасчетов);
	СтруктураПараметров.Вставить("Цех",                   Объект.Цех);
	СтруктураПараметров.Вставить("ВидРемонта",            Объект.ВидРемонта);
	СтруктураПараметров.Вставить("Рекомендации",          ОбработкаПодборРекомендаций.Рекомендации);
	СтруктураПараметров.Вставить("ИмяДокумента", 		  "Документ.ЗаявкаНаРемонт");
	
	// Добавим текущую причину обращения если они используются
	ДанныеОбращения = Неопределено;
	Если Элементы.ПричиныОбращенияТовары.ТекущаяСтрока <> Неопределено Тогда
		
		ДанныеОбращения = Объект.ПричиныОбращения.НайтиПоИдентификатору(
			Элементы.ПричиныОбращенияТовары.ТекущаяСтрока).ИдентификаторПричиныОбращения;
			
	КонецЕсли;
	СтруктураПараметров.Вставить("ИдентификаторПричиныОбращения", ДанныеОбращения);
	
	// установим начальный отбор
	СтруктураПараметров.Вставить("РежимВыбора",           Истина);
	СтруктураПараметров.Вставить("ОтборАктуальный",       Истина);
	Если ИмяКоманды="ПодборРекомендацийАвторабот" Тогда
		СтруктураПараметров.Вставить("ОтборРекомендацияАвтоработы",   Истина);
		СтруктураПараметров.Вставить("ОтборРекомендацияНоменклатура", Ложь);
	ИначеЕсли ИмяКоманды="ПодборРекомендацийТоваров" Тогда
		СтруктураПараметров.Вставить("ОтборРекомендацияАвтоработы",   Ложь);
		СтруктураПараметров.Вставить("ОтборРекомендацияНоменклатура", Истина);
	Иначе
		СтруктураПараметров.Вставить("ОтборРекомендацияАвтоработы",   Истина);
		СтруктураПараметров.Вставить("ОтборРекомендацияНоменклатура", Истина);
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ПодборРекомендаций");
	
	ОткрытьФорму(
		"Обработка.ПодборРекомендаций.Форма", 
		СтруктураПараметров,
		ЭтотОбъект,
		,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры 

&НаКлиенте
Процедура ИспользоватьПричиныОбращений(Команда)
	
	ИспользоватьПричиныОбращений = НЕ ИспользоватьПричиныОбращений;
	
	ПричиныОбращенияАвтоработыПриАктивизацииСтроки(Элементы.ПричиныОбращенияАвтоработы);
	ПричиныОбращенияТоварыПриАктивизацииСтроки(Элементы.ПричиныОбращенияТовары);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборАвторабот(Команда)
	
	ПараметрыДействия = Новый Структура;
	
	Если Элементы.ПричиныОбращенияТовары.ТекущаяСтрока <> Неопределено Тогда
		ДанныеОбращения = Объект.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияТовары.ТекущаяСтрока);
		ПараметрыДействия.Вставить("ИдентификаторПричиныОбращения", ДанныеОбращения.ИдентификаторПричиныОбращения);
		ПричиныОбращенияАвтоработыПриАктивизацииСтроки(Элементы.ПричиныОбращенияАвтоработы);
	КонецЕсли;
	
	// Вызываем общий обработчик события
	УправлениеДиалогомАльфаАвтоКлиент.ОткрытьПодборАвторабот(ЭтотОбъект,, , ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	ПараметрыОбратногоВызова = Новый Структура;
	
	Если Элементы.ПричиныОбращенияТовары.ТекущаяСтрока <> Неопределено Тогда
		
		ДанныеОбращения = Объект.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияТовары.ТекущаяСтрока);
		ПараметрыОбратногоВызова.Вставить("ИдентификаторПричиныОбращения", ДанныеОбращения.ИдентификаторПричиныОбращения);
		ПричиныОбращенияТоварыПриАктивизацииСтроки(Элементы.ПричиныОбращенияТовары);
		
	КонецЕсли;
	
	ПараметрыДействия = Новый Структура();
	Если ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		Применяемость = Объект.Автомобиль;
	ИначеЕсли ЗначениеЗаполнено(Объект.Модель) Тогда
		Применяемость = Объект.Модель;
	КонецЕсли;
	Если ЗначениеЗаполнено(Применяемость) Тогда
		ПараметрыДействия.Вставить("Модель", Применяемость);
		ПараметрыДействия.Вставить("ОтборНоменклатурыПоПрименяемости");
	КонецЕсли;
	
	ПодборТоваровКлиент.ОткрытьПодборТоваровВДокументАвтосервиса(
		ЭтотОбъект,
		Объект,,
		ПараметрыОбратногоВызова,
		ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПодборПоЗаказам(Команда)
	
	// Проверим, что установлена блокировка скидок
	Если НЕ Объект.БлокироватьПерерасчетСкидок Тогда
		
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"Подключаемый_ЗавершениеБлокировкиСкидокПередПодбором",
			ЭтотОбъект);
		
		ПоказатьВопрос(
			ОбработчикОповещения,
			НСтр("ru = 'Установлен перерасчет скидок, что может повлиять на сумму подобранных товаров.
				|Включить блокировку перерасчета скидок?'"),
			РежимДиалогаВопрос.ДаНет,,,
			НСтр("ru = 'Подбор по списку заказанного'"));
		
		Возврат;
		
	КонецЕсли;
	
	ПодборПоЗаказамЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодборЗаменЗавершение(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаПодбораЗамен(РезультатОповещения, ДополнительныеПараметры);
	
	ПодключитьОбработчикОжидания("ОтложенныйРасчетПоказателей", 1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаПодбораЗамен(Результат, ДополнительныеПараметры=Неопределено)
	
	ЗаменыСервер.ВыполнитьЗаменуТоваровВДокументе(Объект, Результат, Истина, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗамен(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СвернутьПо", "ИдентификаторПричиныОбращения,Номенклатура,ХарактеристикаНоменклатуры");
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ПодборЗаменЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СкладКомпанииОстатки",  Неопределено);
	ПараметрыОткрытия.Вставить("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	ПараметрыОткрытия.Вставить("ТипЦен",                Объект.ТипЦен);
	ПараметрыОткрытия.Вставить("Валюта",                Объект.ВалютаДокумента);
	ПодборТоваровКлиент.ОткрытьПодборЗаменНоменклатуры(ЭтотОбъект, Объект, ПараметрыОткрытия, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	Попытка
		
		Записать(Новый Структура("ЗакрытьПослеЗаписи, РежимЗаписи", Истина, РежимЗаписиДокумента.Проведение));
		
	Исключение
		
		ОбщегоНазначенияАвтосалонВызовСервера.ОшибкаЖурналаРегистрации(
			СобытиеОшибкиДокумента(), 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Объект.Ссылка
		);
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось провести: ""Заявку на ремонт"".'"));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗаявкуНаРемонт(Команда)
	
	Попытка
		
		Записать();
		
	Исключение
		
		ОбщегоНазначенияАвтосалонВызовСервера.ОшибкаЖурналаРегистрации(
			СобытиеОшибкиДокумента(),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Объект.Ссылка
		);
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось записать: ""Заявку на ремонт"".'"));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоказателиТоваровКоманда(Команда)
	
	ОтложенныйРасчетПоказателей();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентРасширеннаяПодсказкаНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Объект",                Объект);
	ПараметрыФормы.Вставить("Карточка",              Объект.Карточка);
	ПараметрыФормы.Вставить("Дата",                  Объект.Дата);
	ПараметрыФормы.Вставить("КоличествоКНачислению", 0);
	ПараметрыФормы.Вставить("КоличествоКСписанию",   0);
	ПараметрыФормы.Вставить("ТолькоПросмотр",        Истина);
	
	ОткрытьФорму(
		"ОбщаяФорма.ФормаДанныхОБонуснойПрограмме", 
		ПараметрыФормы, 
		ЭтотОбъект,
		,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСвязанныеРаботы(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаботы Тогда
		
		ТекущаяПричинаОбращения = Элементы.ПричиныОбращенияАвтоработы.ТекущиеДанные;
		
	Иначе
		
		ТекущаяПричинаОбращения = Элементы.ПричиныОбращенияТовары.ТекущиеДанные;
		
	КонецЕсли;
	
	Если ТекущаяПричинаОбращения <> Неопределено Тогда
		
		КлючСтроки = ТекущаяПричинаОбращения.ИдентификаторПричиныОбращения;
		
	КонецЕсли;
	
	СвязанныеРаботыКлиент.НачатьВыборКомплекснойРаботы(ЭтотОбъект, КлючСтроки, Объект);
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьПоВидуРемонта(Команда)
	
	СвязанныеРаботыКлиент.НачатьЗаполнениеПоВидуРемонта(Объект, ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	
	// Сначала зададим вопрос об очитке табличной части
	Если НЕ СформироватьВопросОбОчисткеТабличнойЧасти(Команда.Имя) Тогда
		
		// Определим табличную часть, для которой была вызвана данная команда
		ИмяТабличнойЧасти = ?(НЕ СтрНайти(Команда.Имя, "Автоработы") = 0, "Автоработы", "Товары");
		ОткрытьФормуЗагрузкиИзФайла(ИмяТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОчиститьТабличнуюЧасть(Команда)
	
	СформироватьВопросОбОчисткеТабличнойЧасти(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПодсветка(Команда)
	
	Элементы.ТоварыПодсветка.Пометка = НЕ Элементы.ТоварыПодсветка.Пометка;	
	ОбновитьПоказателиТоваров(ЭтотОбъект);
	ПоказатьПоказатели(Истина);
	СохраняемыеВНастройкахДанныеМодифицированы = ИСТИНА;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаВсехЗаказовИРезервов(Команда)
	
	Если Модифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОтменаВсехЗаказовИРезервовОповещение", ЭтаФорма);
			ПоказатьВопрос(Оповещение,
			НСтр("ru = 'Сохранить документ и отменить все заказы и резервы?'"),
			РежимДиалогаВопрос.ДаНет
		);
		
	Иначе
		
		ОтменаВсехЗаказовИРезервовПродолжение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзВнешнихКаталогов(Команда)
	
	ПараметрыФормы = Новый Структура();
	
	Если ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		ПараметрыФормы.Вставить("Автомобиль", Объект.Автомобиль);
	Иначе
		ПараметрыФормы.Вставить("Модель", Объект.Модель);
		ПараметрыФормы.Вставить("ВариантКомплектации", Объект.ВариантКомплектации);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	ПараметрыДействия = Новый Структура;
	
	Если Элементы.ПричиныОбращенияАвтоработы.ТекущаяСтрока <> Неопределено Тогда
		ДанныеОбращения = Объект.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияАвтоработы.ТекущаяСтрока);
		ПараметрыДействия.Вставить("ИдентификаторПричиныОбращения", ДанныеОбращения.ИдентификаторПричиныОбращения);
		ПричиныОбращенияАвтоработыПриАктивизацииСтроки(Элементы.ПричиныОбращенияАвтоработы);
	КонецЕсли;
	
	АвтосервисКлиент.ЗагрузкаИзВнешнихКаталогов(ЭтотОбъект, ПараметрыФормы, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьОбменСAutoPadWeb(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗаявкаНаРемонт", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ОткрытиеИзФормыДокумента", Истина);
	ПараметрыОткрытия.Вставить("ВладелецФормаДокументаЗаказНаряд", Истина);
	ПараметрыОткрытия.Вставить("ЗаказНаряд", Неопределено);
	ПараметрыОткрытия.Вставить("СводныйРемонтныйЗаказ", Неопределено);
	
	ОткрытьФорму(
		"Обработка.ОбменСAudaPadWeb.Форма",
		ПараметрыОткрытия,
		ЭтотОбъект,
		КлючУникальности,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьКИ(Команда)
	
	ИмяКоманды = Команда.Имя;
	
	Если ИмяКоманды = "ОбновлятьКИ" И ПроверитьСогласиеНаОбработкуПерсональныхДанных(Объект.Заказчик) Тогда
		
		Если Не РазрешитьВводНесколькихЗначенийТелефона Или Не РазрешитьВводНесколькихЗначенийЭлектроннойПочты Тогда
			Обработчик = Новый ОписаниеОповещения("Подключаемый_ОбновлятьКИ", ЭтотОбъект);
			Если Не РазрешитьВводНесколькихЗначенийТелефона И Не РазрешитьВводНесколькихЗначенийЭлектроннойПочты Тогда
				ВидыКИ = НСтр("ru = 'телефона и адреса электронной почты'");
			ИначеЕсли Не РазрешитьВводНесколькихЗначенийТелефона Тогда
				ВидыКИ = НСтр("ru = 'телефона'");
			Иначе
				ВидыКИ = НСтр("ru = 'адреса электронной почты'");
			КонецЕсли;
			ТекстВопроса = СтрШаблон(
				НСтр("ru = 'Для %1 не настроено хранение нескольких значений.
				|При включении обновления текущие значения в карточке контрагента будут заменены данными из документа. Продолжить?'"),
				ВидыКИ
			);
			
			ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Возврат;
		КонецЕсли;
		
		Подключаемый_ОбновлятьКИ(КодВозвратаДиалога.Да);
		
	Иначе
		Подключаемый_ОбновлятьКИ(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПозвонитьИлиОтправитьSMS(Команда)
	
	Список = Новый СписокЗначений;
	Список.Добавить("Позвонить", НСтр("ru = 'Позвонить'"),, БиблиотекаКартинок.Позвонить);
	Список.Добавить("ОтправитьSMS", НСтр("ru = 'Отправить SMS...'"),, БиблиотекаКартинок.ОтправитьSMS);
	ОповещениеМеню = Новый ОписаниеОповещения("ПослеВыбораИзМенюТелефон", ЭтотОбъект, Параметры);
	ЭтотОбъект.ПоказатьВыборИзМеню(ОповещениеМеню, Список, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НаписатьПисьмо(Команда)
	
	УправлениеКонтактнойИнформациейКлиент.СоздатьЭлектронноеПисьмо(Объект.АдресЭлектроннойПочтыСтрокой,
	Объект.АдресЭлектроннойПочты, ВидКонтактнойИнформацииЭлектроннойПочты, Объект.Заказчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзДокументаТовары(Команда)
	
	ПараметрыЗаполнения = Новый Структура;
	ИдентификаторПричиныОбращения = "";
	Если Объект.ПричиныОбращения.Количество() > 0 И НЕ Элементы.ПричиныОбращенияТовары.ТекущаяСтрока = Неопределено Тогда
		ТекущиеДанные = Объект.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияТовары.ТекущаяСтрока);
		ИдентификаторПричиныОбращения = ТекущиеДанные.ИдентификаторПричиныОбращения;
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторПричиныОбращения", ИдентификаторПричиныОбращения);
	Обработчик = Новый ОписаниеОповещения(
		"Подключаемый_ЗагрузитьИзДокументаТовары",
		ЭтотОбъект,
		ДополнительныеПараметры
	);
	
	ДополнительныеПараметры = Новый Структура("ОбработчикОповещения", Обработчик);
	ОписаниеКоманды = Новый Структура("ДополнительныеПараметры", ДополнительныеПараметры);
	ПараметрыЗаполнения.Вставить("ОписаниеКоманды", ОписаниеКоманды);
	
	ЗаполнениеОбъектовАльфаАвтоКлиент.НачатьЗаполнениеИзДокумента(ЭтотОбъект, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзКорзины(Команда)
	
	ПараметрыЗаполнения = Новый Структура;
	ИдентификаторПричиныОбращения = "";
	Если Объект.ПричиныОбращения.Количество() > 0 И НЕ Элементы.ПричиныОбращенияТовары.ТекущаяСтрока = Неопределено Тогда
		ТекущиеДанные = Объект.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияТовары.ТекущаяСтрока);
		ИдентификаторПричиныОбращения = ТекущиеДанные.ИдентификаторПричиныОбращения;
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторПричиныОбращения", ИдентификаторПричиныОбращения);
	Обработчик = Новый ОписаниеОповещения(
		"Подключаемый_ЗагрузитьИзКорзины",
		ЭтотОбъект,
		ДополнительныеПараметры
	);
	
	ДополнительныеПараметры = Новый Структура("ОбработчикОповещения", Обработчик);
	ОписаниеКоманды = Новый Структура("ДополнительныеПараметры", ДополнительныеПараметры);
	ПараметрыЗаполнения.Вставить("ОписаниеКоманды", ОписаниеКоманды);
	
	ЗаполнениеОбъектовАльфаАвтоКлиент.НачатьЗаполнениеИзКорзины(ЭтотОбъект, ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
 
	// Вызываем общий обработчик действия
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформление(ЭтотОбъект);
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеРучногоСписанияХарактеристик(ЭтотОбъект);
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеСуммыВсего(ЭтотОбъект);
	
	СкидкиНаценкиСервер.УстановитьУсловноеОформление(
		ЭтотОбъект,
		СкидкиНаценкиСервер.ПараметрыУстановкиУсловногоОформления(ЭтотОбъект)
	);
	
	// Раскраска товаров
	Раскраска = Новый Соответствие;
	Раскраска.Вставить("ПолученаПоЗаказуКлиента", ЦветаСтиля.ЗаказНарядТоварыПолученаПоЗаказуКлиента);
	Раскраска.Вставить("ИмеетсяНаСкладе", ЦветаСтиля.ЗаказНарядТоварыИмеетсяНаСкладе);
	Раскраска.Вставить("РаспределенаУПоставщика", ЦветаСтиля.ЗаказНарядТоварыРаспределенаУПоставщика);
	Раскраска.Вставить("ТребуетсяЗаказать", ЦветаСтиля.ЗаказНарядТоварыТребуетсяЗаказать);

	Для Каждого Строка Из Раскраска Цикл
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЦветРаскраскиСтроки");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Строка.Ключ;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Строка.Значение);
	КонецЦикла;
	
	// Запрет редактирования ТоварыСумма
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТоварыСуммаВсегоТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Запрет редактирования АвтоработыСумма
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвтоработыСумма.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТоварыСуммаВсегоТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Запрет редактирования АвтоработыСуммаВсего
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвтоработыСуммаВсего.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТоварыСуммаВсегоТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры // УстановитьУсловноеОформление()

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда) 
	
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект); 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЗаполнениеОбъектов
&НаКлиенте
Процедура ПослеОбработкиЗаполнения(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ПослеОбработкиЗаполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиЗаполненияНаСервере()
	
	ЗаполнениеОбъектовАльфаАвто.ПослеОбработкиЗаполнения(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ЗаполнениеОбъектов

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
//@skip-warning
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
    ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Функция ЕстьПравоНаРедактирование()
	Возврат ПравоДоступа("Редактирование", Метаданные.Документы.ЗаявкаНаРемонт);	
КонецФункции

&НаКлиенте
Процедура НадписьСуммаДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.ПоказатьРасширенныеИтогиОперации(ЭтотОбъект, Элемент);
	
КонецПроцедуры
// Конец Ядро

// СчетаФактуры
&НаКлиенте
Процедура НадписьВзаиморасчетыНажатие(Элемент)
	
	УправлениеДиалогомДокументаКлиент.НадписьВзаиморасчетыНажатие(ЭтотОбъект);
	
КонецПроцедуры
// Конец СчетаФактуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ПроверитьСогласиеНаОбработкуПерсональныхДанных(Контрагент)
	
	Если ТипЗнч(Контрагент) = Тип("Строка") ИЛИ Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указан контрагент.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	Если НЕ (Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо
		ИЛИ Контрагент.ФормаСобственности  = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Согласие = ЗащитаПерсональныхДанных.ДействующееСогласиеНаОбработкуПерсональныхДанных(
		Контрагент,
		Справочники.Организации.ОрганизацияПоУмолчанию(),
		КонецДня(ТекущаяДатаСеанса())
	);
	
	Если Согласие = Неопределено Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Отсутствует согласие на обработку персональных данных. Запись контактной информации невозможна.'")
		);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьТабличныеЧастиДокумента()
	
	ТекущиеДанные = Элементы.ПричиныОбращенияАвтоработы.ТекущиеДанные;
	
	Если Объект.ПричиныОбращения.Количество() > 0 И ТекущиеДанные <> Неопределено Тогда
		НайденныеСтроки = Объект.Автоработы.НайтиСтроки(
			Новый Структура("ИдентификаторПричиныОбращения", ТекущиеДанные.ИдентификаторПричиныОбращения));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
				Объект.Автоработы.Удалить(ТекущаяСтрока);
			КонецЦикла;
		КонецЕсли;
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(
			Новый Структура("ИдентификаторПричиныОбращения", ТекущиеДанные.ИдентификаторПричиныОбращения));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
				Объект.Товары.Удалить(ТекущаяСтрока);
			КонецЦикла;
		КонецЕсли;
	Иначе
		Объект.Автоработы.Очистить();
		Объект.Товары.Очистить();
	КонецЕсли;
	
	Объект.ВспомогательныеАвтоработы.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСервиснуюКампанию()
	
	Если Не ЗначениеЗаполнено(Объект.СервиснаяКампания) Тогда
		Возврат;
	КонецЕсли;
	
	// получим сервисные компании
	СервисныеКомпании = АвтомобилиСервер.ПроверитьСервиснуюКампанию(Объект.Автомобиль, Объект.Дата, Истина, Объект.Ссылка);
	
	Отбор = Новый Структура("СервиснаяКампания", Объект.СервиснаяКампания);
	НайденныеСтроки = СервисныеКомпании.НайтиСтроки(Отбор);
	
	Если СервисныеКомпании.Количество() = 0 ИЛИ НайденныеСтроки.Количество() = 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Сервисная кампания <%1> недоступна для автомобиля <%2>.'"),
			Объект.СервиснаяКампания,
			Объект.Автомобиль
		);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
		Объект.СервиснаяКампания = Справочники.СервисныеКампании.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

// Процедура передачи вызова в менеджер
//
&НаСервере
Процедура ЗаполнитьПоСервиснойКомпании(ПараметрыЗаполнения)
	
	Документы.ЗаявкаНаРемонт.ЗаполнениеПоСервиснойКомпании(Объект, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРекомендацииПоАвтомобилю(ПерезаполнениеСпискаРекомендаций = Истина, УстанавливатьВидимостьДекорации = Ложь)
	
	Если УстанавливатьВидимостьДекорации Тогда
		ОбработкаПодборРекомендаций.Автомобиль = Объект.Автомобиль;
		ОбъектПодборРекомендаций = РеквизитФормыВЗначение("ОбработкаПодборРекомендаций");
		Элементы.КартинкаРекомендации.Видимость =
			ОбъектПодборРекомендаций.ПроверитьНаличиеРекомендация(Перечисления.СостоянияСобытий.Запланировано);
		Возврат;
	КонецЕсли;
	
	Если ПерезаполнениеСпискаРекомендаций Тогда
		ОбработкаПодборРекомендаций.Автомобиль            = Объект.Автомобиль;
		ОбработкаПодборРекомендаций.ТипЦен                = Объект.ТипЦен;
		ОбработкаПодборРекомендаций.ТипЦенАвторабот       = Объект.ТипЦенРабот;
		ОбработкаПодборРекомендаций.Дата                  = Объект.Дата;
		ОбработкаПодборРекомендаций.Контрагент            = Объект.Контрагент;
		ОбработкаПодборРекомендаций.ДоговорВзаиморасчетов = Объект.ДоговорВзаиморасчетов;
		ОбработкаПодборРекомендаций.Цех                   = Объект.Цех;
		ОбработкаПодборРекомендаций.ВидРемонта            = Объект.ВидРемонта;
		ОбъектПодборРекомендаций = РеквизитФормыВЗначение("ОбработкаПодборРекомендаций");
		ОбъектПодборРекомендаций.ЗаполнитьРекомендации();
		ОбработкаПодборРекомендаций.Рекомендации.Загрузить(ОбъектПодборРекомендаций.Рекомендации.Выгрузить());
	КонецЕсли;
	
	Если ОбработкаПодборРекомендаций.Рекомендации.НайтиСтроки(
			Новый Структура("Состояние", Перечисления.СостоянияСобытий.Запланировано)).Количество() = 0 Тогда
		Элементы.КартинкаРекомендации.Видимость=Ложь;
	Иначе
		Элементы.КартинкаРекомендации.Видимость=Истина;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаРезультатаПодбораАвторабот(ПараметрыПодбора)
	
	// Получим параметры выполнения подбора
	ПодобраннаяАвторабота  = ПолучитьИзВременногоХранилища(ПараметрыПодбора.ПодобранныеАвтоработы);
	ТабличнаяЧастьОбъекта  = Объект.Автоработы;
	
	ИндетификаторПричиныОбращения = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыПодбора.ПараметрыДействия,
		"ИдентификаторПричиныОбращения",
		Неопределено
	);
	ЕстьИндетификаторПричиныОбращения = (НЕ ИндетификаторПричиныОбращения = Неопределено);
	
	ПараметрыПодбора.ПараметрыДействия = 
		Документы.ЗаказНаряд.ПолучитьПараметрыДействия(Объект, ПараметрыПодбора.ПараметрыДействия);
		
	ПараметрыПодбора.ПараметрыДействия =
		Документы.ЗаказНаряд.ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыПодбора.ПараметрыДействия);
	
	// Заблокируем пересчет скидок
	ПересчитатьСкидки = Ложь;
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыПодбора.ПараметрыДействия, "НеРассчитыватьСкидки", Ложь) Тогда
		ПересчитатьСкидки = Истина;
		ПараметрыПодбора.ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура(
		?(ЕстьИндетификаторПричиныОбращения, "ИдентификаторПричиныОбращения,", "")+"Авторабота");
	Если ЕстьИндетификаторПричиныОбращения Тогда
		ПараметрыОтбора.ИдентификаторПричиныОбращения = ИндетификаторПричиныОбращения;
	КонецЕсли;
	
	// Производим перенос подобранной номенклатуры в табличную часть объекта
	Для Каждого СтрокаАвторабот Из ПодобраннаяАвторабота Цикл
			
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаАвторабот);
		НайденныеСтроки = ТабличнаяЧастьОбъекта.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество()=0 Тогда
			
			// Добавим новую строку и заполним ее
			СтрокаТабличнойЧасти = ТабличнаяЧастьОбъекта.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаАвторабот);
			СтрокаТабличнойЧасти.ИдентификаторРаботы = Новый УникальныйИдентификатор;
			
			Если ЕстьИндетификаторПричиныОбращения Тогда
				СтрокаТабличнойЧасти.ИдентификаторПричиныОбращения = ИндетификаторПричиныОбращения;
			КонецЕсли;
			
			// Вызываем обработчик изменения данных объекта
			Выполнить("Документы.ЗаявкаНаРемонт.АвтоработыАвтоработаПриИзменении(Объект, СтрокаТабличнойЧасти, ПараметрыПодбора.ПараметрыДействия)");
			
			МассивАвторабот.Добавить(СтрокаТабличнойЧасти.ИдентификаторРаботы);
			
		Иначе
			
			// Получим строку и увеличим в ней количество
			СтрокаТабличнойЧасти = НайденныеСтроки[0];
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаАвторабот.Количество;
			
			// Вызываем обработчик изменения данных объекта
			Выполнить("Документы.ЗаявкаНаРемонт.АвтоработыКоличествоПриИзменении(Объект, СтрокаТабличнойЧасти, ПараметрыПодбора.ПараметрыДействия)");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПересчитатьСкидки Тогда
		ПараметрыПодбора.ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
		СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыПодбора.ПараметрыДействия, "Автоработы");
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаРезультатаПодбораНоменклатуры(Корзина, Контекст)
	
	ПодборТоваровСервер.ЗаполнитьТоварыИзКорзиныВДокументахАвтосервиса(Объект, Объект.Товары, Корзина, Контекст);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	ПодборТоваровКлиентСервер.ОбновитьВидимостьХарактеристики(Элементы.ТоварыХарактеристикаНоменклатуры, Объект.Товары);
	УправлениеДиалогомНаСервере();
	ОбновитьПоказателиТоваров(ЭтотОбъект);
	ПоказатьПоказатели(Истина);
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПоместитьТаблицуИсполнителиВХранилище(Знач Объект, ИдентификаторРаботы, УникальныйИдентификатор)
	
	Возврат Автосервис.ПоместитьТаблицуИсполнителиВХранилище(Объект, ИдентификаторРаботы, УникальныйИдентификатор);
	
КонецФункции 

&НаКлиенте
Процедура ПодборИсполнителей()
	
	Если Элементы.Автоработы.ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	АдресИсполнителей = ПоместитьТаблицуИсполнителиВХранилище(
							Объект,
							Элементы.Автоработы.ТекущиеДанные.ИдентификаторРаботы,
							УникальныйИдентификатор
						);
	
	АвтосервисКлиент.НачатьПодборИсполнителей(
		Объект,
		Элементы.Автоработы.ТекущиеДанные.ИдентификаторРаботы,
		АдресИсполнителей,
		ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуИсполнителейИзХранилища(АдресВХранилище, ИдентификаторРаботы)
	
	Автосервис.ЗаполнитьТаблицуИсполнителейИзХранилища(Объект, АдресВХранилище, ИдентификаторРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеИсполнителей(Форма, ЗаказНаряд, МассивРабот = Неопределено)
	
	// скорректируем тип значения массива работ
	Если МассивРабот = Неопределено Тогда
		МассивРабот = Новый СписокЗначений;
	КонецЕсли;
	
	ТекущиеДанные = Форма.Элементы.Автоработы.ТекущиеДанные;
	
	СтруктураПоиска = Новый Структура("ИдентификаторПричиныОбращения", ТекущиеДанные.ИдентификаторПричиныОбращения);
	
	Если ТекущиеДанные = Неопределено Тогда
		ИдентификаторТекущейРаботы = Неопределено;
		ПричинаОбращенияСтроки = Неопределено;
		КоличествоРаботВПричине = 0;
	Иначе
		ИдентификаторТекущейРаботы = Форма.Элементы.Автоработы.ТекущиеДанные.ИдентификаторРаботы;
		СтрокиПричин = ЗаказНаряд.ПричиныОбращения.НайтиСтроки(СтруктураПоиска);
		Если СтрокиПричин.Количество() = 0 ИЛИ НЕ Форма.ИспользоватьПричиныОбращений Тогда
			ПричинаОбращенияСтроки = Неопределено;
			КоличествоРаботВПричине = 0;
		Иначе
			ПричинаОбращенияСтроки = СтрокиПричин[0];
			КоличествоРаботВПричине = ЗаказНаряд.Автоработы.НайтиСтроки(СтруктураПоиска).Количество();
		КонецЕсли;
	КонецЕсли;
	
	
	// если массив не передан, значит устанавливаем исполнителя для текущей работы
	Если МассивРабот.Количество() = 0 И (НЕ ТекущиеДанные = Неопределено) Тогда
		МассивРабот.Добавить(ТекущиеДанные);
	КонецЕсли;
	
	// проверим, есть ли работы для заполнения исполнителей
	Если МассивРабот.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Если установлен флаг одинаковых исполнителей для всех работ
	// запрашивать исполнителей не надо, а возьмем их из другой работы.
	Если ЗаказНаряд.ИсполнителиОдинаковыеДляВсехРабот И ЗаказНаряд.Автоработы.Количество()>1 И ЗаказНаряд.Исполнители.Количество()>0 Тогда
		ВремИдентификаторТекущейРаботы = Форма.Элементы.Автоработы.ТекущаяСтрока;
		Для Каждого Работа Из ЗаказНаряд.Автоработы Цикл
			// Найдем работу отличную от текущей
			Если (НЕ ИдентификаторТекущейРаботы = Работа.ИдентификаторРаботы) Тогда
				ИдентификаторТекущейРаботы = Работа.ИдентификаторРаботы;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// И установим исполнителей из нее
		УправлениеДиалогомАльфаАвтоКлиент.ИсполнителиУстановитьДляВсех(ЗаказНаряд, ИдентификаторТекущейРаботы);
		Форма.Элементы.Автоработы.ТекущаяСтрока = ВремИдентификаторТекущейРаботы;
		
	ИначеЕсли ПричинаОбращенияСтроки <> Неопределено
		И КоличествоРаботВПричине > 1
		И ПричинаОбращенияСтроки.ИсполнителиОдинаковыеВРамкахПричины Тогда
		
		ВремИдентификаторТекущейРаботы = Форма.Элементы.Автоработы.ТекущаяСтрока;
		
		АвтоработыПричины = ЗаказНаряд.Автоработы.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого Работа Из АвтоработыПричины Цикл
			// Найдем работу отличную от текущей
			Если (НЕ ИдентификаторТекущейРаботы = Работа.ИдентификаторРаботы) Тогда
				ИдентификаторТекущейРаботы = Работа.ИдентификаторРаботы;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// И установим исполнителей из нее
		УправлениеДиалогомАльфаАвтоКлиент.ИсполнителиУстановитьДляПричиныОбращения(
			ЗаказНаряд, ПричинаОбращенияСтроки, ИдентификаторТекущейРаботы);
		Форма.Элементы.Автоработы.ТекущаяСтрока = ВремИдентификаторТекущейРаботы;
		
	Иначе
		
		ИсполнителиРаботы = ЗаказНаряд.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", ИдентификаторТекущейРаботы));
		Если ИсполнителиРаботы.Количество() = 0 И Форма.ЗапрашиватьИсполнителей Тогда
			
			ИндексПредыдущейСтроки = ЗаказНаряд.Автоработы.Индекс(МассивРабот[0]) - 1;
			Если ИндексПредыдущейСтроки < 0 Тогда
				СтрокаПредыдущейРаботы = Неопределено;
			Иначе
				СтрокаПредыдущейРаботы = ЗаказНаряд.Автоработы[ИндексПредыдущейСтроки];
			КонецЕсли;

			
			Если НЕ СтрокаПредыдущейРаботы = Неопределено Тогда
				// Получим список исполнителей работы из предыдущей строки
				ИсполнителиПредыдущейРаботы = ЗаказНаряд.Исполнители.НайтиСтроки(
					Новый Структура("ИдентификаторРаботы", СтрокаПредыдущейРаботы.ИдентификаторРаботы));
				СтрокаИсполнителейПредыдущейРаботы = "";
				Для Каждого ИсполнительПредыдущейРаботы Из ИсполнителиПредыдущейРаботы Цикл
					Если НЕ ПустаяСтрока(СтрокаИсполнителейПредыдущейРаботы) Тогда
						СтрокаИсполнителейПредыдущейРаботы = СтрокаИсполнителейПредыдущейРаботы+"
							|";
					КонецЕсли; 
					СтрокаИсполнителейПредыдущейРаботы = СтрокаИсполнителейПредыдущейРаботы+ 
						СокрЛП(ИсполнительПредыдущейРаботы.Исполнитель)+
						" - "+
						Формат(ИсполнительПредыдущейРаботы.Процент,"ЧЦ=5; ЧДЦ=2; ЧН=0,00")+"%";
				КонецЦикла;
				
				Если ИсполнителиПредыдущейРаботы.Количество()>0 Тогда
					// Если у предыдущей работы есть исполнители
					// Зададим вопрос о копировании этих исполнителей.
					ОтветНаВопрос = КодВозвратаДиалога.Нет;
					Если МассивРабот.Количество() = 1 Тогда
						ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Установить исполнителей для работы <""%1"">
													|как и у работы <""%2"">:
													|""%3""'"),
													СокрЛП(МассивРабот[0].Значение.Работа),
													СокрЛП(СтрокаПредыдущейРаботы.Работа),
													СтрокаИсполнителейПредыдущейРаботы
										);
					Иначе
						ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Установить исполнителей для добавленных работ
													|как и у работы <""%1"">:
													|""%2""'"), СокрЛП(СтрокаПредыдущейРаботы.Работа), СтрокаИсполнителейПредыдущейРаботы);
					КонецЕсли;
					
					ДополнительныеПараметры = Новый Структура;
					ДополнительныеПараметры.Вставить("МассивРабот",                 МассивРабот);
					ДополнительныеПараметры.Вставить("ИсполнителиПредыдущейРаботы", ИсполнителиПредыдущейРаботы);
					ДополнительныеПараметры.Вставить("Событие",                     "УстановитьИсполнителейПоПредыдущейРаботе");
					
					Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", Форма, ДополнительныеПараметры);
					ПоказатьВопрос(Оповещение,
									ТекстВопроса,
									РежимДиалогаВопрос.ДаНет,
									0,
									КодВозвратаДиалога.Да,
									НСтр("ru = 'Заполнение исполнителей'")
					);
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ПодборИсполнителей();
		КонецЕсли;
	КонецЕсли;
	
	АвтоработыПриАктивизацииСтроки(Элементы.Автоработы);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРекомендациюАвтомобиляНаСервере(РекомендацияАвтомобиля, НоваяСтрокаАвторабот)
	
	Обработки.ПодборРекомендаций.ДобавитьРекомендациюВДокумент(Объект, ЭтотОбъект, РекомендацияАвтомобиля, НоваяСтрокаАвторабот);
	
	ОбновитьПоказателиТоваров(ЭтотОбъект);
	ПоказатьПоказатели(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРекомендациюАвтомобиля(РекомендацияАвтомобиля)
	
	// Если будет добавлена новая строка в ТЧ Автоработы, то выполнем подбор исполнителей и связанный работ.
	НоваяСтрокаАвторабот = Ложь;
	
	ДобавитьРекомендациюАвтомобиляНаСервере(РекомендацияАвтомобиля, НоваяСтрокаАвторабот);
	
	ПричиныОбращенияАвтоработыПриАктивизацииСтроки(Неопределено);
	ПричиныОбращенияТоварыПриАктивизацииСтроки(Неопределено);
	
	Если НоваяСтрокаАвторабот Тогда
		
		НайденнаяСтрока = Объект.Автоработы.НайтиСтроки(Новый Структура("Авторабота", РекомендацияАвтомобиля.Рекомендация));
		Элементы.Автоработы.ТекущаяСтрока = НайденнаяСтрока[0].ПолучитьИдентификатор();
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(Объект, РекомендацияАвтомобиля, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаписатьНовуюРекомендациюАвтомобиля(ИмяКоманды, ОтказПеремещения)
	
	// создадим структуру строки для записи рекомендации
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("Период", Объект.Дата);
	СтруктураСтроки.Вставить("Автомобиль", Объект.Автомобиль);
	
	СтруктураСтроки.Вставить("Исполнитель",  Справочники.Пользователи.ПустаяСсылка());
	СтруктураСтроки.Вставить("ЗаказНаряд", Документы.ЗаказНаряд.ПустаяСсылка());
	
	СтруктураСтроки.Вставить("ЗаявкаНаРемонт", Документы.ЗаявкаНаРемонт.ПустаяСсылка());
	
	СтруктураСтроки.Вставить("Автор", Объект.Автор);
	СтруктураСтроки.Вставить("ПричинаОтказа", Справочники.ПричиныОтказаОтОбслуживания.ПустаяСсылка());
	СтруктураСтроки.Вставить("ДатаВыполнения", '00010101');
	СтруктураСтроки.Вставить("Выполнена", Ложь);
	СтруктураСтроки.Вставить("Состояние", Перечисления.СостоянияСобытий.ПустаяСсылка());
	СтруктураСтроки.Вставить("ПериодЗаписи", СтруктураСтроки.Период);
	СтруктураСтроки.Вставить("ДатаАктуальности", '00010101');
	СтруктураСтроки.Вставить("ДатаЗаписи", '00010101');
	СтруктураСтроки.Вставить("Комментарий", "");
	
	Если ИмяКоманды = "ПеренестиАвтоработыВРекомендации" Тогда
		Для Каждого Строка Из Элементы.Автоработы.ВыделенныеСтроки Цикл
			ТекущиеДанные = Объект.Автоработы.НайтиПоИдентификатору(Строка);
			СтруктураСтроки.Вставить("Рекомендация", ТекущиеДанные.Авторабота);
			СтруктураСтроки.Вставить("Количество", ТекущиеДанные.Количество);
			СтруктураСтроки.Вставить("Коэффициент", ТекущиеДанные.Коэффициент);

			
			Если НЕ ЗначениеЗаполнено(СтруктураСтроки.Рекомендация) Тогда
				ОтказПеремещения = Истина;
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Не заполнена рекомендация автомобиля. Перемещение рекомендации отменено.'")
				);
				Возврат;
			КонецЕсли;
			
			СтруктураСтроки.Вставить("РекомендацияЗаписи", СтруктураСтроки.Рекомендация);
			Обработки.ПодборРекомендаций.ЗаписатьСтрокуРекомендации(ОбработкаПодборРекомендаций, СтруктураСтроки);
			
			// выполним обновление объекта обработки подбора рекомендации
			ПроверитьРекомендацииПоАвтомобилю();
			
			СтруктураСтроки.Удалить("Рекомендация");
			СтруктураСтроки.Удалить("Количество");
			СтруктураСтроки.Удалить("РекомендацияЗаписи");
		КонецЦикла;
	ИначеЕсли ИмяКоманды = "ПеренестиНоменклатуруВРекомендации" Тогда
		Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
			ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Строка);
			СтруктураСтроки.Вставить("Рекомендация", 		ТекущиеДанные.Номенклатура);
			СтруктураСтроки.Вставить("Количество", 			ТекущиеДанные.Количество);
			СтруктураСтроки.Вставить("Коэффициент", 		ТекущиеДанные.Коэффициент);
			СтруктураСтроки.Вставить("ЕдиницаИзмерения", 	ТекущиеДанные.ЕдиницаИзмерения);
			
			Если НЕ ЗначениеЗаполнено(СтруктураСтроки.Рекомендация) Тогда
				ОтказПеремещения = Истина;
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Не заполнена рекомендация автомобиля. Перемещение рекомендации отменено.'")
				);
				Возврат;
			КонецЕсли;
			
			СтруктураСтроки.Вставить("РекомендацияЗаписи", СтруктураСтроки.Рекомендация);
			Обработки.ПодборРекомендаций.ЗаписатьСтрокуРекомендации(ОбработкаПодборРекомендаций, СтруктураСтроки);
			
			// выполним обновление объекта обработки подбора рекомендации
			ПроверитьРекомендацииПоАвтомобилю();
			
			СтруктураСтроки.Удалить("Рекомендация");
			СтруктураСтроки.Удалить("Количество");
			СтруктураСтроки.Удалить("РекомендацияЗаписи");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиРекомендациюАвтомобиля(ИмяКоманды)
	
	Если ТипЗнч(Объект.Автомобиль)<>Тип("СправочникСсылка.Автомобили") И (НЕ ЗначениеЗаполнено(Объект.Автомобиль)) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Автомобиль не выбран.'"), Объект.Ссылка);
		Возврат;
	КонецЕсли; 
	
	Если ИмяКоманды = "ПеренестиАвтоработыВРекомендации" И Объект.Автоработы.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Таблица ""Автоработы"" не заполнена.'"), Объект.Ссылка);
		Возврат;
	ИначеЕсли ИмяКоманды = "ПеренестиНоменклатуруВРекомендации" И Объект.Товары.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Таблица ""Товары"" не заполнена.'"), Объект.Ссылка);
		Возврат;
	КонецЕсли;
	
	ОтказПеремещения = Ложь;
	
	ЗаписатьНовуюРекомендациюАвтомобиля(ИмяКоманды, ОтказПеремещения);
	
	Если ОтказПеремещения Тогда
		Возврат;
	КонецЕсли;
	
	// передадим начальные параметры
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Автомобиль",            Объект.Автомобиль);
	СтруктураПараметров.Вставить("ТипЦен",                Объект.ТипЦен);
	СтруктураПараметров.Вставить("ТипЦенАвторабот",       Объект.ТипЦенРабот);
	СтруктураПараметров.Вставить("Дата",                  Объект.Дата);
	СтруктураПараметров.Вставить("Контрагент",            Объект.Контрагент);
	СтруктураПараметров.Вставить("ДоговорВзаиморасчетов", Объект.ДоговорВзаиморасчетов);
	СтруктураПараметров.Вставить("Цех",                   Объект.Цех);
	СтруктураПараметров.Вставить("ВидРемонта",            Объект.ВидРемонта);
	СтруктураПараметров.Вставить("Рекомендации",          ОбработкаПодборРекомендаций.Рекомендации);
	
	// Добавим текущую причину обращения если они используются
	ДанныеОбращения = Неопределено;
	Если Элементы.ПричиныОбращенияТовары.ТекущаяСтрока <> Неопределено Тогда
		ДанныеОбращения = Объект.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияТовары.ТекущаяСтрока).ИдентификаторПричиныОбращения;
	КонецЕсли;
	СтруктураПараметров.Вставить("ИдентификаторПричиныОбращения", ДанныеОбращения);
	
	// установим начальный отбор
	СтруктураПараметров.Вставить("РежимВыбора",           Истина);
	СтруктураПараметров.Вставить("ОтборАктуальный",       Истина);
	
	Если ИмяКоманды="ПеренестиАвтоработыВРекомендации" Тогда
		СтруктураПараметров.Вставить("ОтборРекомендацияАвтоработы",   Истина);
	ИначеЕсли ИмяКоманды="ПеренестиНоменклатуруВРекомендации" Тогда
		СтруктураПараметров.Вставить("ОтборРекомендацияНоменклатура", Истина);
	КонецЕсли; 
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВРекомендации(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Событие", "ВопросЗаписиДокументаДляПодбораРекомендации");
		ДополнительныеПараметры.Вставить("ИмяКоманды", Команда.Имя);
		
		Оповещение = Новый ОписаниеОповещения(
			"Подключаемый_ОбработкаРезультатаОповещения",
			ЭтотОбъект,
			ДополнительныеПараметры
		);
		ПоказатьВопрос(
			Оповещение,
			НСтр("ru = 'Документ еще не записан, загрузка не возможна. Записать документ?'"),
			РежимДиалогаВопрос.ДаНет
		);
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Событие", "ВопросУдаленияСтрокПеренесенныхВРекомендации");
	ДополнительныеПараметры.Вставить("ИмяКоманды", Команда.Имя);
	
	Оповещение = Новый ОписаниеОповещения(
		"Подключаемый_ОбработкаРезультатаОповещения",
		ЭтотОбъект,
		ДополнительныеПараметры
	);
	ПоказатьВопрос(
		Оповещение,
		НСтр("ru = 'Удалить из документа строки, перенесенные в рекомендации?'"),
		РежимДиалогаВопрос.ДаНет
	);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьМассивДатПробега(Объект)
	
	ДатыПробега = Новый Массив;
	
	ДатыПробега.Добавить(?(ЗначениеЗаполнено(Объект.ДатаНачала), Объект.ДатаНачала, Объект.Дата));
	Если ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		ДатыПробега.Добавить(Объект.ДатаОкончания);
	КонецЕсли;
	
	Возврат ДатыПробега;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПоказателиТоваров(Форма)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДокументОснование", Форма.Объект.ДокументОснование);
	
	ПоказателиЗапасов = АвтосервисВызовСервера.ПоказателиЗапасов(
		Форма.Объект.Ссылка,
		Форма.Объект.Товары,
		ДополнительныеПараметры
	);
	
	Для Каждого Показатель Из ПоказателиЗапасов Цикл
		
		Строка = Форма.Объект.Товары.НайтиПоИдентификатору(Показатель.ИдентификаторСтроки);
		
		Коэффициент     = ?(Строка.Коэффициент = 0, 1, Строка.Коэффициент);
		ОстатокНаСкладе = ?(Показатель.ОстатокНаСкладе <> 0, Показатель.ОстатокНаСкладе, Показатель.КоличествоОстаток);
		Заказано        = ?(Показатель.Заказано <> 0, Показатель.Заказано, Показатель.ЗаказаноПодЗнР);
		Зарезервировано = ?(Показатель.Зарезервировано <> 0, Показатель.Зарезервировано, Показатель.ЗарезервированоПодЗнР);
		
		Строка.ОстатокНаСкладе = ОстатокНаСкладе;
		Строка.Заказано        = Заказано/Коэффициент;
		Строка.ВРезерве = Зарезервировано/Коэффициент;
		
	КонецЦикла;
	
	ОбновитьРаскраскуТоваровПоПоказателям(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьРаскраскуТоваровПоПоказателям(Форма)
	
	СброситьРаскраску = (Форма.ЕстьВыполненныеЗаказНаряды ИЛИ НЕ Форма.Элементы.ТоварыПодсветка.Пометка
		ИЛИ Форма.Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостояниеЗаявкиНаРемонт.Отклонено"));
		
	Для Каждого СтрокаТоваров Из Форма.Объект.Товары Цикл
		
		Если СброситьРаскраску Тогда
			
			СтрокаТоваров.ЦветРаскраскиСтроки = "стандартный";
			Продолжить;
			
		КонецЕсли;
		
		Если СтрокаТоваров.Количество <= СтрокаТоваров.ВРезерве Тогда
			
			СтрокаТоваров.ЦветРаскраскиСтроки = "ПолученаПоЗаказуКлиента";
			
		ИначеЕсли СтрокаТоваров.Количество <= СтрокаТоваров.ОстатокНаСкладе Тогда
			
			СтрокаТоваров.ЦветРаскраскиСтроки = "ИмеетсяНаСкладе";
			
		ИначеЕсли СтрокаТоваров.Количество <= (СтрокаТоваров.Заказано + СтрокаТоваров.ОстатокНаСкладе) Тогда
			
			СтрокаТоваров.ЦветРаскраскиСтроки = "РаспределенаУПоставщика";
			
		Иначе
			
			СтрокаТоваров.ЦветРаскраскиСтроки = "ТребуетсяЗаказать";
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеБонусныхБаллах()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БонусныеБаллыОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.БонусныеБаллы.Остатки(
		|			,
		|			БонуснаяКарта = &Карта
		|				И АктивностьБонусов) КАК БонусныеБаллыОстатки";
	Запрос.УстановитьПараметр("Карта", Объект.Карточка);
	Запрос.УстановитьПараметр("МоментВремени", Объект.Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Элементы.Контрагент.РасширеннаяПодсказка.Заголовок = НСтр("ru = 'Бонусы в наличии:'")
														+ Символы.НПП
														+?(Выборка.Следующий(), Выборка.КоличествоОстаток, 0);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СобытиеОшибкиДокумента()
	
	#Если НЕ ТонкийКлиент И НЕ ВебКлиент И НЕ МобильныйКлиент И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
		МодульОбщегоНазначения = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначения");
	#Иначе
		МодульОбщегоНазначения = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбщегоНазначенияКлиент");
	#КонецЕсли
	
	Возврат НСтр("ru = 'Заказ-наряд.Ошибка записи документа'", МодульОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеПричиныОбращенияНаСервере(ТекущаяСтрока, ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ПричиныОбращения.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТекущиеДанные.ПричинаОбращения.Пустая() Тогда
		
		ТекущиеДанные.ПричинаОбращения = Справочники.ПричиныОбращений.Прочее;
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Модель", Объект.Модель);
		ДопПараметры.Вставить("Комплектация", Объект.ВариантКомплектации);
		
		ЗаполнитьЗначенияСвойств(
			ТекущиеДанные,
			ПричиныОбращенийСлужебныйВызовСервера.ДанныеСтрокиПричиныОбращения(ТекущиеДанные.ПричинаОбращения, ДопПараметры),
			,
			"ПричинаОбращенияСодержание");
		
	КонецЕсли;
	
	Документы.ЗаявкаНаРемонт.ПричиныОбращенияПричинаОбращенияПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПричиныОбращения(ТекущиеДанные)
	
	ПричинаОбращенияИзменилась = Ложь;
	
	ПараметрыДействия = Новый Структура;
	ОбработатьИзменениеПричиныОбращенияНаСервере(ТекущиеДанные.ПолучитьИдентификатор(), ПараметрыДействия);
	
	// Обновим идентификаторы причины обращения перед подбором связанных.
	ПричиныОбращенийКлиент.ОбновитьИдентификаторыТаблиц(Объект);
	
	ДругиеИсточники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные);
	ПродолжитьЗаполнение = Истина;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИзменилсяВидРемонта", Ложь) Тогда
		
		ПродолжитьЗаполнение = НЕ СвязанныеРаботыКлиент
			.НачатьЗаполнениеПоВидуРемонта(Объект, ЭтотОбъект, ПараметрыДействия, ДругиеИсточники);
		
	КонецЕсли;
	
	Если ПродолжитьЗаполнение Тогда
		
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(Объект, ДругиеИсточники, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьВопросОбОчисткеТабличнойЧасти(ИмяКоманды)
	
	// Определим табличную часть, для которой была вызвана данная команда
	ИмяТабличнойЧасти = ?(НЕ СтрНайти(ИмяКоманды, "Автоработы") = 0, "Автоработы", "Товары");
	
	СтрокиДляУдаленияИзТабличнойЧасти = Новый Массив;
	
	Если НЕ Элементы["ПричиныОбращения" + ИмяТабличнойЧасти].ТекущиеДанные = Неопределено Тогда
		
		// Вычислим имеются ли строки для соответствующей причины обращения
		ТекущиеДанные = Элементы["ПричиныОбращения"+ИмяТабличнойЧасти].ТекущиеДанные;
		
		НайденныеСтроки = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("ИдентификаторПричиныОбращения", 
																	ТекущиеДанные.ИдентификаторПричиныОбращения));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Сформируем массив строк для удаления из табличной части документа
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			СтрокиДляУдаленияИзТабличнойЧасти.Добавить(ТекущаяСтрока);
		КонецЦикла;
		
	ИначеЕсли Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		// Табличная часть пустая и нечего очищать
		Возврат Ложь;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКоманды",        ИмяКоманды);
	ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	
	Если СтрокиДляУдаленияИзТабличнойЧасти.Количество() > 0 Тогда
		ДополнительныеПараметры.Вставить("СтрокиТабличнойЧастиДляУдаления", СтрокиДляУдаленияИзТабличнойЧасти);
	КонецЕсли;
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ОбработкаРезультатаОчисткиТабличнойЧасти", 
													ЭтотОбъект,
													ДополнительныеПараметры
													);
	ПоказатьВопрос(ОбработкаОповещения,
				НСтр("ru = 'Очистить табличную часть """+ИмяТабличнойЧасти+"""?'"), 
				РежимДиалогаВопрос.ДаНет
	);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаРезультатаОчисткиТабличнойЧасти(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКоманды        = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ИмяКоманды");
	ИмяТабличнойЧасти = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ИмяТабличнойЧасти");
	СтрокиДляУдаления = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "СтрокиТабличнойЧастиДляУдаления");
	
	Если НЕ ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		
		СтрокиДляУдаления = Новый Массив;
		
		Если НЕ ЗначениеЗаполнено(СтрокиДляУдаления) Тогда
			
			Для Каждого Строка Из Объект[ИмяТабличнойЧасти] Цикл
				
				СтрокиДляУдаления.Добавить(Строка);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// выполним действия необходимые перед удалением.
		Если ИмяТабличнойЧасти = "Автоработы" Тогда
			
			ОбщегоНазначенияАвтосалонКлиент.УдалитьСопутствующиеСтроки(
				СтрокиДляУдаления,
				Объект.Исполнители,
				"ИдентификаторРаботы"
			);
			
		КонецЕсли;
		
		// Удаляем строки
		Для Каждого Строка Из СтрокиДляУдаления Цикл
			
			Объект[ИмяТабличнойЧасти].Удалить(Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Продолжим заполнение табличной части
	Если СтрНайти(ИмяКоманды, "ЗагрузитьИзФайла") Тогда
		
		ОткрытьФормуЗагрузкиИзФайла(ИмяТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьФормуЗагрузкиИзФайла(ИмяТабличнойЧасти)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РучнаяНумерацияКолонокТабличногоДокумента", Ложь);
	ПараметрыФормы.Вставить("РежимЗагрузки",                             3);
	ПараметрыФормы.Вставить("ТабличнаяЧастьИсточника",                   ИмяТабличнойЧасти);
	ПараметрыФормы.Вставить("СсылкаИсточника",                           Объект.Ссылка);
	ПараметрыФормы.Вставить("Контрагент",                                ?(Объект.Свойство("Контрагент"), Объект.Контрагент, Неопределено));
	ПараметрыФормы.Вставить("ЦенаВключаетНДС",                           ЦенаВключаетНДС());

	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработкаРезультатаЗагрузкиИзФайла", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.ЗагрузкаДанныхИзТабличногоДокумента.Форма.ФормаПомощник",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаСервере
Функция ЦенаВключаетНДС()
	Возврат Объект.ТипЦен.ЦенаВключаетНДС;
КонецФункции

&НаКлиенте
Процедура ОбработкаРезультатаЗагрузкиИзФайла(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РезультатОповещения) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнениеТабличнойЧастиИзФайла(РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеТабличнойЧастиИзФайла(РезультатОповещения)
	
	// Получим параметры работы
	АдресТаблицаЗагрузкаИЗФайлаВХранилище = РезультатОповещения.АдресТаблицаЗагрузкаИЗФайлаВХранилище;
	ИмяТабличнойЧасти                     = РезультатОповещения.ИмяТабличнойЧасти;
	
	ИдентификаторПричиныОбращения = "";
	Если НЕ Элементы["ПричиныОбращения" + ИмяТабличнойЧасти].ТекущаяСтрока = Неопределено Тогда
		
		ТекущиеДанные = Объект.ПричиныОбращения.НайтиПоИдентификатору(
							Элементы["ПричиныОбращения"+ИмяТабличнойЧасти].ТекущаяСтрока);
		ИдентификаторПричиныОбращения = ТекущиеДанные.ИдентификаторПричиныОбращения;
		
	КонецЕсли;
	
	// Производим заполнение таблицы объекта
	Если ЗначениеЗаполнено(АдресТаблицаЗагрузкаИЗФайлаВХранилище) Тогда
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресТаблицаЗагрузкаИЗФайлаВХранилище);
		
		Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
			
			НовСтр = Объект[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаТоваров);
			НовСтр.ИдентификаторПричиныОбращения = ИдентификаторПричиныОбращения;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПредставлениеАвтомобиляРасширеннаяПодсказкаНажатие(Элемент)
	
	АвтомобилиКлиент.ОтчетИсторияАвтомобиля(ЭтотОбъект, Объект.Автомобиль);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВывестиКоличествоСтрок(Таблица = Неопределено)
	
	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	ВыводитьОбщееКоличество = НЕ(ИмяТекущейСтраницы = "СтраницаРаботы" ИЛИ ИмяТекущейСтраницы = "СтраницаТовары");
	
	Если Таблица = Неопределено Тогда
		УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.Автоработы,, НЕ ВыводитьОбщееКоличество);
		УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.Товары,,     НЕ ВыводитьОбщееКоличество);
	Иначе
		УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Таблица,, НЕ ВыводитьОбщееКоличество);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ИнициализироватьПодменюСостоянийЗаявки()
	
	Для Каждого СостояниеЗаявкиНаРемонт Из Метаданные.Перечисления.СостояниеЗаявкиНаРемонт.ЗначенияПеречисления Цикл
		// добавим команду
		ИмяНовойКоманды           = "СостояниеЗнР"+СостояниеЗаявкиНаРемонт.Имя;
		ПредставлениеНовойКоманды = СостояниеЗаявкиНаРемонт.Синоним;
		
		НоваяКоманда = ЭтотОбъект.Команды.Добавить(ИмяНовойКоманды);
		НоваяКоманда.Действие  = "Подключаемый_СостояниеЗаявкиНаРемонтПриИзменении";
		НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
		
		// добавим кнопку для команды
		НоваяКнопка = Элементы.Добавить(ИмяНовойКоманды, Тип("КнопкаФормы"), Элементы.ВыборСостоянияЗаявки);
		НоваяКнопка.ИмяКоманды = ИмяНовойКоманды;
		НоваяКнопка.Заголовок = ПредставлениеНовойКоманды;
		
		НоваяКнопка.Пометка = (Объект.Состояние = Перечисления.СостояниеЗаявкиНаРемонт[СостояниеЗаявкиНаРемонт.Имя]);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодборТоваровЗавершение(Корзина, Контекст) Экспорт
	
	Если Корзина = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаПодбораНоменклатуры(Корзина, Контекст);
	
	Если Корзина.Количество() > 0 Тогда
		ПараметрыОткрытия = Новый Структура("Автомобиль", Объект.Автомобиль);
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(Объект, Корзина, ЭтотОбъект, ПараметрыОткрытия);	
	КонецЕсли;

	УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаВсехЗаказовИРезервовПродолжение()
	
	Заказы = Новый Массив;
	ПолучитьЗаказыПокупателя(Заказы);
	
	Если НЕ Заказы.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	// Создаем Корректировку для каждого из заказов.
	Для Каждого Заказ Из Заказы Цикл
		
		ПараметрыФормы = Новый Структура("Основание, ОтменаЗаказовИРезервов", Заказ, Истина);
		
		ОткрытьФорму(ПолучитьИмяОткрываемойФормы(Заказ, ПараметрыФормы),
			ПараметрыФормы,
			ЭтотОбъект,
			Новый УникальныйИдентификатор
		);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаВсехЗаказовИРезервовОповещение(Результат, ДопПараметры = Неопределено) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Записать();
	Исключение
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось сохранить документ. Операция отменена.'"));
		Возврат;
	КонецПопытки;
	
	ОтменаВсехЗаказовИРезервовПродолжение();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗаказыПокупателя(Заказы)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЗаказыПокупателейОстатки.Заказ КАК Документ.ЗаказПокупателя) КАК Заказ
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(
	|			,
	|			Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И Заказ.ДокументОснование = &ДокументОснование) КАК ЗаказыПокупателейОстатки";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'По заявке на ремонт <%1> нет заказов/резервов.'"),
				Объект.Ссылка
			)
		);
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Заказы.Добавить(Выборка.Заказ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяОткрываемойФормы(Заказ, ПараметрыФормы)
	
	Если Заказ.ХозОперация = Справочники.ХозОперации.ЗаказРезервированиеПокупателя
		ИЛИ Заказ.ХозОперация = Справочники.ХозОперации.РезервированиеПокупателя Тогда
		
		ИмяФормы = "Документ.СнятиеРезервовЗаказовПокупателя.ФормаОбъекта";
		ПараметрыФормы.Вставить("КорректировкаЗаказа", Истина);
		
	Иначе
		
		ИмяФормы = "Документ.КорректировкаЗаказаПокупателя.ФормаОбъекта";
		
	КонецЕсли;
	
	Возврат ИмяФормы;
	
КонецФункции

&НаСервере
Процедура ПолучитьШаблонСообщенияУведомления(ТекущийОбъект)
	
	// Проверим состояние для отправки СМС
	ШаблонСМС = Неопределено;
	Если ТекущийОбъект.Состояние = Перечисления.СостояниеЗаявкиНаРемонт.Отклонено Тогда
		
		ШаблонПриОтменеЗаявки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.ВидРемонта, "ШаблонПриОтменеЗаявки");
		
		Если НЕ ЗначениеЗаполнено(ШаблонПриОтменеЗаявки) Тогда
			Возврат;
		КонецЕсли;
		
		// Получим текущее состояние в базе
		СостояниеЗаявкиНаРемонт = Неопределено;
		Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
			СостояниеЗаявкиНаРемонт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.Ссылка, "Состояние");
			РегистрыСведений.НапоминаниеОЗаписиНаРемонт.УдалитьИзЗаявкиНаРемонт(ТекущийОбъект.Ссылка);
		КонецЕсли;
		
		Если ТекущийОбъект.Состояние <> СостояниеЗаявкиНаРемонт Тогда
			ШаблонСМС = ШаблонПриОтменеЗаявки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦеныВПодобранныхТоварах(ПодобранныеТовары)
	
	ПодобранныеТовары.Колонки.Добавить("Сумма");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	               |	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ТаблицаТоваров.Заказ КАК Заказ
	               |ПОМЕСТИТЬ СписокНоменклатурыЗаказов
	               |ИЗ
	               |	&ТаблицаТоваров КАК ТаблицаТоваров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаказыПокупателейОстатки.Заказ КАК Заказ,
	               |	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	               |	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ЗаказыПокупателейОстатки.СуммаОстаток КАК СуммаОстаток,
	               |	ЗаказыПокупателейОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток,
	               |	ЗаказыПокупателейОстатки.ЗаказаноОстаток КАК ЗаказаноОстаток
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Остатки(
	               |			,
	               |			(Заказ, Номенклатура, ХарактеристикаНоменклатуры) В
	               |				(ВЫБРАТЬ
	               |					СписокНоменклатурыЗаказов.Заказ КАК Заказ,
	               |					СписокНоменклатурыЗаказов.Номенклатура КАК Номенклатура,
	               |					СписокНоменклатурыЗаказов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	               |				ИЗ
	               |					СписокНоменклатурыЗаказов КАК СписокНоменклатурыЗаказов)) КАК ЗаказыПокупателейОстатки";
	Запрос.УстановитьПараметр("ТаблицаТоваров", ПодобранныеТовары);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПоиска = Новый Структура("Заказ,Номенклатура,ХарактеристикаНоменклатуры");
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	НеТребуетсяПереводВалюты = (Объект.ВалютаДокумента = ВалютаУпр);
	
	Если НЕ НеТребуетсяПереводВалюты Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл, Объект.Дата);
		КурсРегл = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		СтрокаТоваров = ПодобранныеТовары.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокаТоваров.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НеТребуетсяПереводВалюты Тогда
			СуммаЗаказа = Выборка.СуммаУпрОстаток;
		Иначе
			СуммаЗаказа = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				Выборка.СуммаОстаток,
				ВалютаРегл,
				КурсРегл,
				Объект.ВалютаДокумента,
				Объект.КурсДокумента);
		КонецЕсли;
		
		СтрокаТоваров[0].Сумма = ?(Выборка.ЗаказаноОстаток = 0,
			0,
			Окр(СуммаЗаказа / Выборка.ЗаказаноОстаток * СтрокаТоваров[0].Количество, 2));
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗавершениеБлокировкиСкидокПередПодбором(
		РезультатОтвета,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		Объект.БлокироватьПерерасчетСкидок = Истина;
	КонецЕсли;
	
	ПодборПоЗаказамЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоЗаказамЗавершение()
	
	Отборы = Новый Соответствие;
	Отборы.Вставить("Контрагент", Объект.Контрагент);
	Отборы.Вставить("Заказ.Организация", Объект.Организация);
	
	ДопПараметры = Новый Структура();
	Если Элементы.ПричиныОбращенияТовары.ТекущиеДанные <> Неопределено Тогда
		
		ДопПараметры.Вставить(
			"ИдентификаторПричиныОбращения",
			Элементы.ПричиныОбращенияТовары.ТекущиеДанные.ИдентификаторПричиныОбращения
		);
		
	КонецЕсли;
	
	УправлениеДиалогомКлиент.ОткрытьПодборПоЗаказам(
		ЭтотОбъект,
		"ЗаявкаНаРемонт.СКД_ПодборПоЗаказам",
		Отборы,
		"Остаток",
		,
		,
		ДопПараметры
	);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗагрузкиИзВнешнегоКаталога(АдресЗагрузки, ДополнительныеПараметры)
	
	МассивАвторабот.Очистить();
	
	ИдентификаторПричиныОбращения = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеПараметры, "ИдентификаторПричиныОбращения", Неопределено);
	ЕстьИдентификаторПричиныОбращения = (НЕ ИдентификаторПричиныОбращения = Неопределено);
	
	ПараметрыДействия = Документы.ЗаявкаНаРемонт.ПолучитьПараметрыДействия(Объект);
	ПараметрыДействия.Вставить("НеРассчитыватьБонусы", Истина);
	
	// Заблокируем пересчет скидок
	ПересчитатьСкидки = Ложь;
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеРассчитыватьСкидки", Ложь) Тогда
		ПересчитатьСкидки = Истина;
		ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	КонецЕсли;
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("ПараметрыДействия", ПараметрыДействия);
	
	Если ЕстьИдентификаторПричиныОбращения Тогда
		ПараметрыЗагрузки.Вставить("ИдентификаторПричиныОбращения", ИдентификаторПричиныОбращения);
	КонецЕсли;
	
	Автосервис.ЗагрузитьДанныеИзВнешнихКаталогов(ЭтотОбъект, Объект, АдресЗагрузки, ПараметрыЗагрузки);
	
	Если НЕ ПараметрыЗагрузки.Свойство("РезультатЗагрузки") Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗагрузки = ПараметрыЗагрузки.РезультатЗагрузки;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивАвторабот, РезультатЗагрузки.МассивАвторабот);
	
	Если ПересчитатьСкидки Тогда
		ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
		Если РезультатЗагрузки.ЗагруженыАвтоработы Тогда
			СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "Автоработы");
		КонецЕсли;
		Если РезультатЗагрузки.ЗагруженыТовары Тогда
			СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия);
		КонецЕсли;
	КонецЕсли;
	
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОкончаниеВводаТекстаСнятияПовторногоОбращения(
		Результат,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		Объект.ПричинаСнятияПовторногоОбращения = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИнформациюПоСнятиюПовторногоОбращения()
	
	СнятоПовторноеОбращение =
		(ЗначениеЗаполнено(Объект.Ссылка) ИЛИ СнятоПовторноеОбращениеВСервис)
		И НЕ Объект.ПовторноеОбращение И ЗначениеЗаполнено(Объект.АвторСнятияПовторногоОбращения);
		
	Элементы.ИнформацияСнятииПовторногоОбращения.Видимость = СнятоПовторноеОбращение;
	Элементы.ПричинаСнятияПовторногоОбращения.Видимость = СнятоПовторноеОбращение;
	Элементы.ИнформацияСнятииПовторногоОбращения.Заголовок =
		СтрШаблон(НСтр("ru = 'Снял %1 от %2'"),
		Строка(Объект.АвторСнятияПовторногоОбращения),
		Формат(Объект.ДатаСнятияПовторногоОбращения, ""));
	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЖалобы()
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЖалобаКлиента) Тогда
		Элементы.ФормаДокументЖалобаКлиентаСоздатьНаОсновании.Видимость = Константы.ИспользоватьЖалобы.Получить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПереносаПозицийВРекомендации()
	
	Если НЕ ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.РекомендацииПоАвтомобилю) Тогда
		Элементы.АвтоработыПеренестиАвтоработыВРекомендации.Видимость = Ложь;
		Элементы.ТоварыПеренестиНоменклатуруВРекомендации.Видимость   = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИнформациюОбЗагруженномДеле(ДокументСсылка)
	
	Если ЗначениеЗаполнено(ИдентификаторДела) И ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Менеджер = РегистрыСведений.ОбменСAudaPadWeb.СоздатьМенеджерЗаписи();
		Менеджер.Период               = ТекущаяДатаСеанса();
		Менеджер.Автор                = Пользователи.ТекущийПользователь();
		Менеджер.ЗаказНаряд           = ДокументСсылка;
		Менеджер.ИдентификаторДела    = ИдентификаторДела;
		Менеджер.ИдентификаторЗадания = ИдентификаторЗадания;
		
		Менеджер.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

#Область СвязанныеРаботы

&НаСервере
Процедура НастроитьДоступностьСкидок()
	
	СпособВыбораСкидки = ПравоПользователя("СпособВыбораСкидки", Объект);
	ДоступныСкидки = СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидки
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.АвтоматическиеИРучныеСкидки
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов;
	ДоступноРедактированиеСкидок = СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыПроцентСкидки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСуммаСкидки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСкидкаНаТовар",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступныСкидки
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыПроцентСкидкиСтроки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСуммаСкидкиСтроки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	// Автоработы
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АвтоработыПроцентСкидки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АвтоработыСуммаСкидки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АвтоработыСкидкаНаТовар",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступныСкидки
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АвтоработыПроцентСкидкиСтроки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АвтоработыСуммаСкидкиСтроки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	
КонецПроцедуры

&НаСервере
Функция ПодборСвязанныхРаботЗавершениеНаСервере(СвязанныеПозиции)
	
	ПараметрыДействия = СвязанныеРаботы.ЗаполнитьСвязаннымиРаботами(СвязанныеПозиции, Объект, ЭтотОбъект);
	
	ОбновитьПоказателиТоваров(ЭтотОбъект); 
	ПоказатьПоказатели(Истина);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	Возврат ПараметрыДействия;
	
КонецФункции
    
&НаКлиенте
Процедура Подключаемый_ПодборСвязанныхРаботЗавершение(СвязанныеРаботы, Постобработка=Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СвязанныеРаботы) Тогда
		
		ПараметрыДействия = ПодборСвязанныхРаботЗавершениеНаСервере(СвязанныеРаботы);
		ПараметрыДействия.Вставить("ОбновитьАктивныеПричиныОбращений", Истина);
		
	КонецЕсли;
	
	СвязанныеРаботыКлиент.Постобработка(Постобработка);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ЗавершениеЗаполнениеПоВидуРемонта(Ответ, ДругиеИсточники) Экспорт
	
	ПараметрыВыполнения = ДругиеИсточники;
	Если ТипЗнч(ПараметрыВыполнения) = Тип("Структура") Тогда
		ОбработкаРезультатаВыполненияДействия(ПараметрыВыполнения);
	ИначеЕсли ТипЗнч(ПараметрыВыполнения) = Тип("Массив")
		И ТипЗнч(ПараметрыВыполнения[ПараметрыВыполнения.Количество() - 1]) = Тип("Структура") Тогда
		ОбработкаРезультатаВыполненияДействия(ПараметрыВыполнения[ПараметрыВыполнения.Количество() - 1]);
	КонецЕсли;
	
	СвязанныеРаботыКлиент.ЗавершениеЗаполнениеПоВидуРемонта(Объект, ЭтотОбъект, Ответ, ДругиеИсточники);
	
КонецПроцедуры

#КонецОбласти

#Область ПричиныОбращения

&НаКлиенте
Процедура Подключаемый_РедактированиеПричиныЗавершение(ДанныеСтроки, КлючСтроки) Экспорт
	
	ПричиныОбращенийКлиент.ЗаполнитьСтрокуПричины(ДанныеСтроки, КлючСтроки, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтаФорма);
	
	// Настроим отбор сервисных кампаний
	ТаблицаСервисныхКампаний = АвтомобилиСервер.ПроверитьСервиснуюКампанию(
		Объект.Автомобиль,
		Объект.Дата,
		Истина,
		Объект.Ссылка
	);
	СервисныеКампании = ТаблицаСервисныхКампаний.ВыгрузитьКолонку("СервиснаяКампания");
	
	Если Не Элементы.Найти("СервиснаяКампания") = Неопределено Тогда
		
		АвтомобилиСервер.ОбновитьСостояниеСервиснойКомпании(
			СервисныеКампании.Количество() > 0,
			Элементы.СервиснаяКампания,
			Элементы.СостояниеСервиснойКомпании
		);
		
		Если НЕ ЗначениеЗаполнено(СервисныеКампании) Тогда
			СервисныеКампании.Добавить(Справочники.СервисныеКампании.ПустаяСсылка());
		КонецЕсли;
		
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
			Элементы.СервиснаяКампания.ПараметрыВыбора,
			"Отбор.Ссылка",
			СервисныеКампании
		);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	УправлениеДиалогомАльфаАвтоСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Объект.Автомобиль) Тогда
	
		Элементы.Модель.Доступность              = Ложь;
		Элементы.ВариантКомплектации.Доступность = Ложь;
		Элементы.VIN.Доступность                 = Ложь;
		Элементы.ГодВыпуска.Доступность          = Ложь;
		Элементы.СервиснаяКампания.Доступность   = Истина;
		
		НаименованиеАвтомобиляПоПолям = Объект.Автомобиль.Наименование;
		
	Иначе
		Элементы.Модель.Доступность              = Истина;
		Элементы.ВариантКомплектации.Доступность = Истина;
		Элементы.VIN.Доступность                 = Истина;
		Элементы.ГодВыпуска.Доступность          = Истина;
		Элементы.СервиснаяКампания.Доступность   = Ложь;
		
		НаименованиеАвтомобиляПоПолям = Справочники.Автомобили.СформироватьНаименованиеАвтомобиляПоПолям(
											Объект.Модель,
											,
											Объект.ГосНомер,
											Объект.VIN
										);
		
	КонецЕсли;
	
	Элементы.ПредставлениеАвтомобиляРасширеннаяПодсказка.Заголовок = Справочники.Автомобили.СформироватьИнформациюАвтомобиля(Объект);
	
	Если ЗначениеЗаполнено(Объект.Заказчик) Тогда
		Элементы.ОбращениеККлиенту.Доступность = Ложь;
		НаименованиеЗаказчикаПоПолям = Объект.Заказчик.Наименование + " - " + Объект.ПредставлениеТелефона;
	Иначе
		Элементы.ОбращениеККлиенту.Доступность = Истина;
		НаименованиеЗаказчикаПоПолям = Объект.ОбращениеККлиенту + " - " + Объект.ПредставлениеТелефона;
	КонецЕсли;
	
	ЕстьРачеты = Объект.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Платный;
	
	Элементы.Контрагент.Доступность             = ЕстьРачеты;
	Элементы.ДоговорВзаиморасчетов.Доступность  = ЕстьРачеты;
	Элементы.МаркетинговаяПрограмма.Доступность = ЕстьРачеты;
	
	// По данному праву также будем контролировать доступ
	// для редактирования колонки "Норма времени(Коэффициент)" в ТЧ "Работы".
	РедактированиеНормВремениИНормочасов = ПраваИНастройкиПользователя.Значение("РедактированиеНормВремениИНормоЧасов", Объект);
	
	Элементы.АвтоработыНормочас.Доступность    = РедактированиеНормВремениИНормочасов;
	Элементы.АвтоработыКоэффициент.Доступность = РедактированиеНормВремениИНормочасов;
	
	ЗапрашиватьИсполнителей = ПраваИНастройкиПользователя.Значение("ПодборИсполнителейПриДобавленииАвтоработыВЗаказНаряд", Объект);
	
	// Заблочим скидки
	СпособВыбораСкидки = ПраваИНастройкиПользователя.Значение("СпособВыбораСкидки", Объект);
	ДоступныСкидки = (СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидки
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.АвтоматическиеИРучныеСкидки
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов);
	
	Элементы.МаркетинговаяПрограмма.ТолькоПросмотр = НЕ ДоступныСкидки;
	
	РедактированиеНоменклатуры = ПраваИНастройкиПользователя.Значение("РедактированиеДеталейЗаказНаряда", Объект);
	РедактированиеРабот        = ПраваИНастройкиПользователя.Значение("РедактированиеРаботЗаказНаряда", Объект);
	
	Элементы.Товары.ТолькоПросмотр             = НЕ РедактированиеНоменклатуры;
	
	Элементы.Автоработы.ТолькоПросмотр = НЕ РедактированиеРабот;
	
	Элементы.ПричиныОбращенияАвтоработы.Видимость      = ИспользоватьПричиныОбращений;
	Элементы.ПричиныОбращенияТовары.Видимость          = ИспользоватьПричиныОбращений;
	Элементы.ФормаИспользоватьПричиныОбращений.Пометка = ИспользоватьПричиныОбращений;
	
	Элементы.ОписаниеПричиныОбращения.Доступность = (Объект.ПричиныОбращения.Количество() <= 1);
	
	// Установим видимость команд заполнения
	Элементы.АвтоработыЗаполнитьПоВидуРемонта.Доступность = ПраваИНастройкиПользователя.Значение("РедактированиеРаботЗаказНаряда", Объект)
															И ЗначениеЗаполнено(Объект.ВидРемонта) 
															И Объект.ВидРемонта.Автоработы.Количество() > 0;
	
	Элементы.АвтоработыЗагрузитьИзФайлаАвтоработы.Видимость = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", Объект);
	Элементы.ТоварыЗагрузитьИзФайлаТовары.Видимость         = Элементы.АвтоработыЗагрузитьИзФайлаАвтоработы.Видимость;
	
	Элементы.ВыборСостоянияЗаявки.Заголовок = Строка(Объект.Состояние) + 
											 ?(ЗначениеЗаполнено(Объект.ПричинаОтказаОтОбслуживания),
											 					 СтрШаблон(" [%1]", 
																 Объект.ПричинаОтказаОтОбслуживания),
																 ""
											 );
	
	// Проверим вывод возможность вывода информации по бонусным баллам
	СформироватьПредставлениеБонусныхБаллах();
	Элементы.Контрагент.ОтображениеПодсказки = ?(ЗначениеЗаполнено(
													Объект.Карточка.БонуснаяПрограмма), 
													ОтображениеПодсказки.ОтображатьСправа, 
													ОтображениеПодсказки.Нет
												);
	
	Объект.Пробег = ?(Элементы.Пробег.Доступность, Объект.Пробег, 0);
	
	// mikolv для планирования
	Если Объект.ХозОперация = Справочники.ХозОперации.ПланРемонта Тогда
		Элементы.ДатаНачала.ТолькоПросмотр = Истина;
		Элементы.ДатаОкончания.ТолькоПросмотр = Истина;
		Элементы.ВремяНачало.ТолькоПросмотр = Истина;
		Элементы.ВремяОкончание.ТолькоПросмотр = Истина;
	ИначеЕсли Объект.ХозОперация = Справочники.ХозОперации.ЗаявкаНаРемонт Тогда
		Элементы.ДатаНачала.ТолькоПросмотр = Ложь;
		Элементы.ДатаОкончания.ТолькоПросмотр = Ложь;
		Элементы.ВремяНачало.ТолькоПросмотр = Ложь;
		Элементы.ВремяОкончание.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
		Объект.ПричиныОбращения,
		Объект.Автоработы,
		Объект.Товары
	);
	
	Элементы.ГруппаПовторноеОбращение.ТолькоПросмотр =
		НЕ ПраваИНастройкиПользователя.Значение("ИзменениеПризнаковПовторногоОбращенияВСервис") 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка);
	
	РедактированиеНоменклатуры = ПраваИНастройкиПользователя.Значение("РедактированиеДеталейЗаказНаряда", Объект);
	РедактированиеРабот        = ПраваИНастройкиПользователя.Значение("РедактированиеРаботЗаказНаряда", Объект);
	
	Элементы.ТоварыПодменюЗаполнение.Доступность    	= РедактированиеНоменклатуры;
	Элементы.ТоварыПодменюПодбора.Доступность       	= РедактированиеНоменклатуры;
	
	Элементы.АвтоработыПодменюЗаполнение.Доступность 	= РедактированиеРабот;
	Элементы.АвтоработыПодменюПодбора.Доступность    	= РедактированиеРабот;
	
	Элементы.ТоварыКоманднаяПанель.Доступность 			= Истина;
	
	Если ЭтотОбъект.Команды.Найти("РазрешитьРедактированиеРеквизитовОбъекта") <> Неопределено Тогда
		Элементы.РазрешитьРедактированиеРеквизитовОбъекта.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ПредставлениеТелефона.РедактированиеТекста =
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента.ВидРедактирования <> "Диалог";
    Элементы.ПредставлениеТелефона.КнопкаВыбора =
		НЕ Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента.ВидРедактирования = "ПолеВвода";
	Элементы.ПредставлениеТелефона.КнопкаВыпадающегоСписка = 
		НЕ Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента.ВидРедактирования = "ПолеВвода";
	
	НастроитьДоступностьСкидок();
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(
				ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "ВыборПричиныОтказаОтОбслуживания" Тогда
		
		Объект.ПричинаОтказаОтОбслуживания = РезультатОповещения;
		РезультатОповещения = Новый Структура;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие", "") = "ПодборПоСпискуЗаказанного"
		И ЭтоАдресВременногоХранилища(РезультатОповещения) Тогда
		
		ПодобранныеТовары = ПолучитьИзВременногоХранилища(РезультатОповещения);
		
		ИдентификаторПричиныОбращения = ПолучитьЗначениеПараметраСтруктуры(
											ДополнительныеПараметры,
											"ИдентификаторПричиныОбращения", 
											""
										);
		
		УсловеиПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения");
		Если НЕ ПустаяСтрока(СокрЛП(ИдентификаторПричиныОбращения)) Тогда
			УсловеиПоиска.Вставить("ИдентификаторПричиныОбращения");
		КонецЕсли;
		
		ПараметрыДействия = Документы.ЗаказНаряд.ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
		// Блокировка перерсчета скидок построчно
		ПересчитатьСкидки = Ложь;
		Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеРассчитыватьСкидки", Ложь) Тогда
			ПересчитатьСкидки = Истина;
			ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
		КонецЕсли;
		
		ЗаполнитьЦеныВПодобранныхТоварах(ПодобранныеТовары);
		
		Для Каждого Строка Из ПодобранныеТовары Цикл
			ЗаполнитьЗначенияСвойств(УсловеиПоиска, Строка);
			Если УсловеиПоиска.Свойство("ИдентификаторПричиныОбращения") Тогда
				УсловеиПоиска.ИдентификаторПричиныОбращения = ИдентификаторПричиныОбращения;
			КонецЕсли;
			
			ПодходящиеСтроки = Объект.Товары.НайтиСтроки(УсловеиПоиска);
			Если ПодходящиеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Объект.Товары.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Количество,Коэффициент");
				НоваяСтрока.ИдентификаторПричиныОбращения = ИдентификаторПричиныОбращения;
				
				Документы.ЗаявкаНаРемонт.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
				
				// Вызываем общий обработчик изменения реквизитов формы
				УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока, ПараметрыДействия);
				
				Если НоваяСтрока.Цена = 0 И Строка.Сумма <> 0 Тогда
					НоваяСтрока.СуммаВсего = Строка.Сумма;
					Документы.ЗаявкаНаРемонт.ТоварыСуммаВсегоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
				КонецЕсли;
				
			Иначе
				НоваяСтрока = ПодходящиеСтроки[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + Строка.Количество;
				
				Документы.ЗаявкаНаРемонт.ТоварыКоличествоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
			КонецЕсли;
		КонецЦикла;
		
		// Пересчет скидок
		Если ПересчитатьСкидки Тогда
			ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
			СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия);
		КонецЕсли;
		
		ОбновитьПоказателиТоваров(ЭтотОбъект);
		ПоказатьПоказатели(Истина);
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие", "") = "ЗагрузитьЗаявкуНаРемонт" Тогда
		Если НЕ ЭтоАдресВременногоХранилища(РезультатОповещения) Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеКЗаполнению = ПолучитьИзВременногоХранилища(РезультатОповещения);
		
		Если ДанныеКЗаполнению.Свойство("Объект") Тогда
			ИдентификаторДела    = ДанныеКЗаполнению.Объект.ИдентификаторДела;
			ИдентификаторЗадания = ДанныеКЗаполнению.Объект.ИдентификаторЗадания;
		КонецЕсли;
		
		// заполняем документ
		РеквизитыКЗаполнению = 
			"БлокироватьПерерасчетСкидок,ВалютаДокумента,КурсДокумента";
		Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ОбновлятьШапкуДокумента", Ложь) Тогда
			РеквизитыКЗаполнению = РеквизитыКЗаполнению
				+ ",Дата,Состояние,ТипЦен,ТипЦенРабот,ВидРемонта,Цех,Контрагент,ДоговорВзаиморасчетов,Заказчик,Автомобиль";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Объект, ДанныеКЗаполнению.ЗаявкаНаРемонтОбъект, РеквизитыКЗаполнению);
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ДополнительныеПараметрыДокументов", ДанныеКЗаполнению.ДополнительныеПараметрыДокументов);
		ПараметрыЗаполнения.Вставить("Объект"                          , ДанныеКЗаполнению.Объект);
		ПараметрыЗаполнения.Вставить("ЗаявкаНаРемонтОбъект"            , Объект);
		ПараметрыЗаполнения.Вставить("ТаблицаСоответствияАвторабот"    , ДанныеКЗаполнению.ТаблицаСоответствияАвторабот);
		ПараметрыЗаполнения.Вставить("ТаблицаСоответствияТоваров"      , ДанныеКЗаполнению.ТаблицаСоответствияТоваров);
		ПараметрыЗаполнения.Вставить("ДополнительныеКоды"              , ДанныеКЗаполнению.ДополнительныеКоды);
		ПараметрыЗаполнения.Вставить("ИтогоПоДокументу"                , ДанныеКЗаполнению.ИтогоПоДокументу);
		
		ОбменСAudaPadWeb.ЗаполнитьТабличныеЧастиДокумента(ПараметрыЗаполнения, ЭтотОбъект);
		
		ОбновитьПоказателиТоваров(ЭтотОбъект);
		ПоказатьПоказатели(Истина);
		
		Модифицированность  = Истина;
			
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	// Вызываем общий обработчик события в контексте клиента
	ПродолжитьВыполнение = УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(
		ЭтотОбъект,
		РезультатОповещения,
		ДополнительныеПараметры
	);
	Если НЕ ПродолжитьВыполнение И ДополнительныеПараметры <> "ВыборПричиныОтказаОтОбслуживания" Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСобытия = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие", "");
	
	Если ДополнительныеПараметры = "ЗаполнениеПоСервиснойКомпании" Тогда
		
		Вопросы = РезультатОповещения.КоллекцияОпераций;
		ПараметрыЗаполнения = Новый Структура();
		ОчиститьТабличныеЧастиПередЗаполнением = Ложь;
		Для Каждого Вопрос Из Вопросы Цикл
			Если Вопрос.Ключ = "ТребуетсяУстановкаВидаРемонта" Тогда
				ПараметрыЗаполнения.Вставить("ТребуетсяУстановкаВидаРемонта", ВРег(Вопрос.Значение) = "ДА");
			КонецЕсли;
			Если Вопрос.Ключ = "ЗадаватьВопросОбОчисткеТабличныхЧастей" Тогда
				ОчиститьТабличныеЧастиПередЗаполнением = ВРег(Вопрос.Значение) = "ДА";
			КонецЕсли;
		КонецЦикла;
		
		ДругиеИсточники = Новый Массив;
		ДругиеИсточники.Добавить(Объект.СервиснаяКампания);
		Если ПараметрыЗаполнения.Свойство("ТребуетсяУстановкаВидаРемонта") Тогда
			ЗаполнитьПоСервиснойКомпании(ПараметрыЗаполнения);
			СвязанныеРаботыКлиент.НачатьЗаполнениеПоВидуРемонта(Объект, ЭтотОбъект, ДополнительныеПараметры, ДругиеИсточники);
		Иначе
			Если ОчиститьТабличныеЧастиПередЗаполнением Тогда
				ОчиститьТабличныеЧастиДокумента();
			КонецЕсли;
			СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(Объект, Объект.СервиснаяКампания, ЭтотОбъект);
		КонецЕсли;
		
		ОбработкаРезультатаВыполненияДействия(ПараметрыЗаполнения);
		УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.Автоработы);
		
		НастроитьПараметрыВыбораЭлементовФормы();
		
	ИначеЕсли ИмяСобытия = "ВыборСервиснойКомпании" Тогда
		Объект.СервиснаяКампания = РезультатОповещения;
		СервиснаяКампанияПриИзменении(Неопределено);
		
		Возврат;
	ИначеЕсли ИмяСобытия = "ВопросУдаленияСтрокПеренесенныхВРекомендации" Тогда
		
		ПеренестиРекомендациюАвтомобиля(ДополнительныеПараметры.ИмяКоманды);
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			Если ДополнительныеПараметры.ИмяКоманды = Команды.Найти("ПеренестиАвтоработыВРекомендации").Имя Тогда
				Модифицированность = Истина;
				АвтоработыПередУдалением(Элементы.Автоработы, Ложь, Истина);
			ИначеЕсли ДополнительныеПараметры.ИмяКоманды = Команды.Найти("ПеренестиНоменклатуруВРекомендации").Имя Тогда
				Модифицированность = Истина;
				ТоварыПередУдалением(Элементы.Товары, Ложь, Истина);
			КонецЕсли;
		КонецЕсли;
		Возврат;
		
	ИначеЕсли ИмяСобытия = "ВопросПеренесенияВРекомендацииУдаляемыхСтрок" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			
			ПеренестиРекомендациюАвтомобиля(Команды.Найти("ПеренестиАвтоработыВРекомендации").Имя);
			
		КонецЕсли;
		
		Модифицированность = Истина;
		АвтоработыПередУдалением(ДополнительныеПараметры.Элемент, Ложь, Истина);
		ПричиныОбращенийКлиентСервер
			.ОбновитьИндикаторыПричинОбращения(Объект.ПричиныОбращения, Объект.Автоработы, Объект.Товары);
		
		Возврат;
		
	ИначеЕсли ИмяСобытия = "ВопросПеренесенияВРекомендацииУдаляемыхСтрокТоваров" Тогда
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			ПеренестиРекомендациюАвтомобиля(Команды.Найти("ПеренестиНоменклатуруВРекомендации").Имя);
		КонецЕсли;
		Модифицированность = Истина;
		ТоварыПередУдалением(ДополнительныеПараметры.Элемент, Ложь, Истина);
		Возврат;
	ИначеЕсли ИмяСобытия = "ВопросЗаписиДокументаДляПодбораРекомендации" Тогда
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			Попытка
				Записать();
				Если СтрНайти(ДополнительныеПараметры.ИмяКоманды, "Перенести") > 0 Тогда
					ПеренестиРекомендациюАвтомобиля(ДополнительныеПараметры.ИмяКоманды);
				Иначе
					ОткрытьПодборРекомендаций(ДополнительныеПараметры.ИмяКоманды);
				КонецЕсли;
			Исключение
				Возврат;
			КонецПопытки;
		КонецЕсли;
		Возврат;
	ИначеЕсли ИмяСобытия = "УстановитьИсполнителейПоПредыдущейРаботе" Тогда
			
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			
			МассивРабот                 = ДополнительныеПараметры.МассивРабот;
			ИсполнителиПредыдущейРаботы = ДополнительныеПараметры.ИсполнителиПредыдущейРаботы;
			
			Для Каждого СтрокаТекущейРаботы Из МассивРабот Цикл
				
				Для Каждого ИсполнительПредыдущейРаботы Из ИсполнителиПредыдущейРаботы Цикл
					НовыйИсполнитель = Объект.Исполнители.Добавить();
					НовыйИсполнитель.ИдентификаторРаботы = СтрокаТекущейРаботы.ИдентификаторРаботы;
					НовыйИсполнитель.Исполнитель         = ИсполнительПредыдущейРаботы.Исполнитель;
					НовыйИсполнитель.Цех                 = ИсполнительПредыдущейРаботы.Цех;
					НовыйИсполнитель.Процент             = ИсполнительПредыдущейРаботы.Процент;
				КонецЦикла;
				
			КонецЦикла;
			
			АвтоработыПриАктивизацииСтроки(Элементы.Автоработы);
		Иначе
			ПодборИсполнителей();
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "ПодборИсполнителей" Тогда
		СтрокаТабличнойЧасти   = Элементы.Автоработы.ТекущиеДанные;
		СтрокаПричиныОбращения = Элементы.ПричиныОбращенияАвтоработы.ТекущиеДанные;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторРаботы) Тогда
			СтрокаТабличнойЧасти.ИдентификаторРаботы = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		Объект.ИсполнителиОдинаковыеДляВсехРабот   = РезультатОповещения.ИсполнителиОдинаковыеДляВсехРабот;
		Если СтрокаПричиныОбращения <> Неопределено Тогда
			СтрокаПричиныОбращения.ИсполнителиОдинаковыеВРамкахПричины =
				РезультатОповещения.ИсполнителиОдинаковыеВРамкахПричины;
		КонецЕсли;
		
		ЗаполнитьТаблицуИсполнителейИзХранилища(РезультатОповещения.АдресИсполнителейВХранилище,
			СтрокаТабличнойЧасти.ИдентификаторРаботы);
		
		// Сформируем массив строк ТЧ Авторабот, для которых необходимо заполнить испольнителей по результату подбора.
		Если МассивАвторабот.Количество() > 0 Тогда
			ПараметрыОтбора = Новый Структура("ИдентификаторРаботы", МассивАвторабот[0].Значение);
			СтрокиАвторабот = Объект.Автоработы.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиАвторабот.Количество() > 0 Тогда
				Элементы.Автоработы.ТекущаяСтрока = СтрокиАвторабот[0].ПолучитьИдентификатор();
				ЗаполнениеИсполнителей(ЭтотОбъект, Объект);
				МассивАвторабот.Удалить(МассивАвторабот.НайтиПоЗначению(МассивАвторабот[0].Значение));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ДополнительныеПараметры = "ПодборАвторабот" Тогда
		
		МассивАвторабот.Очистить();
		
		ОбработкаРезультатаПодбораАвторабот(РезультатОповещения);
		
		// Связанные автоработы
		СоставОбъектовСвязанныхРабот = Новый Массив;
		Для Каждого Авторабота Из МассивАвторабот Цикл
			
			СтрокиАвторабот = Объект.Автоработы.НайтиСтроки(Новый Структура("ИдентификаторРаботы", Авторабота.Значение));
			
			Если СтрокиАвторабот.Количество() > 0 И СоставОбъектовСвязанныхРабот.Найти(СтрокиАвторабот[0]) = Неопределено Тогда
				СоставОбъектовСвязанныхРабот.Добавить(СтрокиАвторабот[0]);
			КонецЕсли;
			
		КонецЦикла;
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(Объект, СоставОбъектовСвязанныхРабот, ЭтотОбъект);
		
		// Сформируем массив строк ТЧ Авторабот, для которых необходимо заполнить испольнителей по результату подбора.
		Если МассивАвторабот.Количество() > 0 Тогда
			ПараметрыОтбора = Новый Структура("ИдентификаторРаботы", МассивАвторабот[0].Значение);
			СтрокиАвторабот = Объект.Автоработы.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиАвторабот.Количество() > 0 Тогда
				Элементы.Автоработы.ТекущаяСтрока = СтрокиАвторабот[0].ПолучитьИдентификатор();
				ЗаполнениеИсполнителей(ЭтотОбъект, Объект);
				МассивАвторабот.Удалить(МассивАвторабот.НайтиПоЗначению(МассивАвторабот[0].Значение));
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "ПодборРекомендаций" Тогда
		
		ОбработкаПодборРекомендаций.Рекомендации.Очистить();
		ОбработкаПодборРекомендаций.Модифицированность = РезультатОповещения.Модифицированность;
		Для Каждого ТекСтрока Из РезультатОповещения.Рекомендации Цикл
			ЗаполнитьЗначенияСвойств(ОбработкаПодборРекомендаций.Рекомендации.Добавить(), ТекСтрока);
		КонецЦикла;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "НеобходимоПерезаполнитьЗаказчика", Ложь) Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			АвтомобильПриИзмененииНаСервере(ДополнительныеПараметры);
		КонецЕсли;
		Возврат;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "НеобходимоПерезаполнитьАвтомобиль", Ложь) Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			Объект.Автомобиль = ПредопределенноеЗначение("Справочник.Автомобили.ПустаяСсылка");
			ЗаказчикПриИзмененииНаСервере(ДополнительныеПараметры);
			АвтомобильПриИзменении(Неопределено);
		КонецЕсли;
		Возврат;
		
	ИначеЕсли
		ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие", "") = "ЗагрузкаИзВнешнихКаталогов" Тогда
		
		ОбработкаРезультатаЗагрузкиИзВнешнегоКаталога(РезультатОповещения, ДополнительныеПараметры);
		
		// Сформируем массив строк ТЧ Авторабот, для которых необходимо заполнить испольнителей по результату подбора.
		Если МассивАвторабот.Количество() > 0 Тогда
			ПараметрыОтбора = Новый Структура("ИдентификаторРаботы", МассивАвторабот[0].Значение);
			СтрокиАвторабот = Объект.Автоработы.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиАвторабот.Количество() > 0 Тогда
				Элементы.Автоработы.ТекущаяСтрока = СтрокиАвторабот[0].ПолучитьИдентификатор();
				ЗаполнениеИсполнителей(ЭтотОбъект, Объект);
				МассивАвторабот.Удалить(МассивАвторабот.НайтиПоЗначению(МассивАвторабот[0].Значение));
			КонецЕсли;
		КонецЕсли;
		
		ВывестиКоличествоСтрок();
		
	ИначеЕсли ДополнительныеПараметры = "ПараметрыДокумента"
		И РезультатОповещения.ИзмененныеРеквизиты.Свойство("Дата") Тогда
		
		ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
		ДатаПриИзменении(Неопределено);
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие") = "ВопросПеренесенияПозицийВДругуюПричинуОбращеий" Тогда
		
		СтрокаПричиныОбращения = ДополнительныеПараметры.Элемент.ТекущиеДанные;
		ИдентификаторПричиныОбращения = СтрокаПричиныОбращения.ИдентификаторПричиныОбращения;
		
		Если РезультатОповещения = "Перенести" Тогда
			
			ДополнительныеПараметры.Вставить("Событие", "ВыборПричиныОбращенияДляПереносаПозиций");
			Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ДополнительныеПараметры);
			
			МассивСсылок = Новый Массив;
			
			Для Каждого ПричинаОбращения Из Объект.ПричиныОбращения Цикл
				Если ПричинаОбращения <> СтрокаПричиныОбращения Тогда
					МассивСсылок.Добавить(ПричинаОбращения.ПричинаОбращения);
				КонецЕсли;
			КонецЦикла;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Ссылка", МассивСсылок);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
			ПараметрыФормы.Вставить("РежимВыбора", Истина);
			
			ОткрытьФорму(
				"Справочник.ПричиныОбращений.ФормаВыбора",
				ПараметрыФормы,
				ЭтотОбъект,
				,
				,
				,
				Оповещение,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
			);
			
		ИначеЕсли РезультатОповещения = "Удалить" Тогда
			
			Объект.ПричиныОбращения.Удалить(СтрокаПричиныОбращения);
			
			Отбор = Новый Структура("ИдентификаторПричиныОбращения", ИдентификаторПричиныОбращения);
			СтрокиУдаляемогоЭлемента = Объект.Автоработы.НайтиСтроки(Отбор);
			
			Для Каждого Строка Из СтрокиУдаляемогоЭлемента Цикл
				Объект.Автоработы.Удалить(Строка);
			КонецЦикла;
			
			СтрокиУдаляемогоЭлемента = Объект.Товары.НайтиСтроки(Отбор);
			
			Для Каждого Строка Из СтрокиУдаляемогоЭлемента Цикл
				Объект.Товары.Удалить(Строка);
			КонецЦикла;
			
			ОбновитьДанныеПослеУдаленияПричиныОбращения(ДополнительныеПараметры.Элемент);
			Модифицированность = Истина;
			
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "Событие") = "ВыборПричиныОбращенияДляПереносаПозиций" Тогда
		
		Если ЗначениеЗаполнено(РезультатОповещения) Тогда
			
			СтрокаПричиныОбращения = ДополнительныеПараметры.Элемент.ТекущиеДанные;
			ИдентификаторПричиныОбращения = СтрокаПричиныОбращения.ИдентификаторПричиныОбращения;
			Объект.ПричиныОбращения.Удалить(СтрокаПричиныОбращения);
			
			Отбор = Новый Структура("ПричинаОбращения", РезультатОповещения);
			НайденныеСтроки = Объект.ПричиныОбращения.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Отбор = Новый Структура("ИдентификаторПричиныОбращения", ИдентификаторПричиныОбращения);
				СтрокиЗаменяемогоЭлемента = Объект.Автоработы.НайтиСтроки(Отбор);
				
				Для Каждого Строка Из СтрокиЗаменяемогоЭлемента Цикл
					Строка.ИдентификаторПричиныОбращения = НайденныеСтроки[0].ИдентификаторПричиныОбращения;
				КонецЦикла;
				
				СтрокиЗаменяемогоЭлемента = Объект.Товары.НайтиСтроки(Отбор);
				
				Для Каждого Строка Из СтрокиЗаменяемогоЭлемента Цикл
					Строка.ИдентификаторПричиныОбращения = НайденныеСтроки[0].ИдентификаторПричиныОбращения;
				КонецЦикла;
				
			КонецЕсли;
			
			ОбновитьДанныеПослеУдаленияПричиныОбращения(ДополнительныеПараметры.Элемент);
			Модифицированность = Истина;
			
		КонецЕсли;
		
		Возврат;
		
	Иначе
		// Обработаем событие в контексте сервера
		ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	КонецЕсли;
	
	ИзмененныеРеквизиты = ПолучитьЗначениеПараметраСтруктуры(РезультатОповещения, "ИзмененныеРеквизиты");
	Если ЗначениеЗаполнено(ПолучитьЗначениеПараметраСтруктуры(ИзмененныеРеквизиты, "Дата")) Тогда
		
		ПредыдущийПробег = АвтомобилиКлиентСервер.
			ПредставлениеПредыдущихПробегов(Объект.Автомобиль, СформироватьМассивДатПробега(Объект));
		
	КонецЕсли;
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	// Проверяем целесообразность выполнения дальнейших операций
	Если НЕ(ТипЗнч(ПараметрыДействия)=Тип("Структура") 
	ИЛИ ТипЗнч(ПараметрыДействия)=Тип("ФиксированнаяСтруктура") 
	ИЛИ ТипЗнч(ПараметрыДействия)=Тип("ДанныеФормыСтруктура")) Тогда 
		Возврат; 
	КонецЕсли;
	
	НеобходимоПерезаполнитьЗаказчика  = ПолучитьЗначениеПараметраСтруктуры(
											ПараметрыДействия,
											"НеобходимоПерезаполнитьЗаказчика", 
											Ложь
										);
	НеобходимоПерезаполнитьАвтомобиль = ПолучитьЗначениеПараметраСтруктуры(
											ПараметрыДействия, 
											"НеобходимоПерезаполнитьАвтомобиль", 
											Ложь
										);
	
	Если НеобходимоПерезаполнитьЗаказчика Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ПараметрыДействия),
			СтрШаблон("Владелец автомобиля <%1> = <%2>.
						|Выбран заказчиком <%3>. Установить заказчиком <%2>?",
						Объект.Автомобиль,
						ПараметрыДействия.ВладелецАвтомобиля,
						Объект.Заказчик),
			РежимДиалогаВопрос.ДаНет
		);
			
		Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Элемент") = Неопределено Тогда
			ПараметрыДействия.Удалить("Элемент");
		КонецЕсли;
		
	КонецЕсли;
	
	Если НеобходимоПерезаполнитьАвтомобиль Тогда
		Обработчик = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ПараметрыДействия);
		
		Если ЗначениеЗаполнено(ПараметрыДействия.ВладелецАвтомобиля) Тогда
			ТекстВопроса = НСтр("ru = 'Владелец автомобиля <%1> = <%2>.
				|Выбран заказчиком <%3>. Очистить поле ""Автомобиль""?'");
			
			ТекстВопроса = СтрШаблон(ТекстВопроса, Объект.Автомобиль, ПараметрыДействия.ВладелецАвтомобиля, Объект.Заказчик);
		Иначе
			ТекстВопроса = НСтр("ru = 'Владелец автомобиля <%1> не указан.
				|Выбран заказчиком <%2>. Очистить поле ""Автомобиль""?'");
			
			ТекстВопроса = СтрШаблон(ТекстВопроса, Объект.Автомобиль, Объект.Заказчик);
		КонецЕсли;
		
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Изменение заказчика'"));
		
		Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Элемент") = Неопределено Тогда
			ПараметрыДействия.Удалить("Элемент");
		КонецЕсли;
		
	КонецЕсли;
	
	// ++siniko временно заплатка
	Если НЕ (НеобходимоПерезаполнитьАвтомобиль ИЛИ НеобходимоПерезаполнитьЗаказчика) Тогда
		
		Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Элемент") = Неопределено Тогда
			ПараметрыДействия.Удалить("Элемент");
		КонецЕсли;
		
	КонецЕсли;
	// --siniko временно заплатка
	
	// Вызов обработчика для определения необходимости заполнения документа по сервисной компании
	АвтосервисКлиент.ПолучитьРазрешенияДляЗаполненияПоСервиснойКомпании(ЭтотОбъект, ПараметрыДействия);
	
	// Проверим нужноли нам открыть форму выбора сервисной компании
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОткрытьСписокСервисныхКампаний", Ложь) Тогда
		АвтосервисКлиент.ОткрытьФормуВыбораСервиснойКомпании(ЭтотОбъект, Объект.Автомобиль);
		ПараметрыДействия.ОткрытьСписокСервисныхКампаний = Ложь;
	КонецЕсли;
	
	// Вызываем общий обработчик проверки необходимости выполнения пересчета табличных частей объекта.
	Если НЕ ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
		ПараметрыДействия.Вставить("ОбъектЗаполненАвтоработами", Объект.Автоработы.Количество() > 0);
	КонецЕсли;
	АвтосервисКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОчищатьПоляАвтомобиля", Ложь) Тогда
		
		ПредыдущийПробег = АвтомобилиКлиентСервер.
			ПредставлениеПредыдущихПробегов(Объект.Автомобиль, СформироватьМассивДатПробега(Объект));
		
	КонецЕсли;
	
	// Активируем строки причин обращения для обновления отбора
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбновитьАктивныеПричиныОбращений", Ложь) Тогда
		ПричиныОбращенийКлиент.ОбновитьИдентификаторыТаблиц(Объект);
		ПричиныОбращенияАвтоработыПриАктивизацииСтроки(Элементы.ПричиныОбращенияАвтоработы);
		ПричиныОбращенияТоварыПриАктивизацииСтроки(Элементы.ПричиныОбращенияТовары);
	КонецЕсли;
	
	// Заполним исполнителей для добавленных авторабот
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ЗаполнятьИсполнителейРабот", Ложь)
		И ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НовыеАвтоработы") <> Неопределено Тогда
		
		// TODO: Удалить после обновления механизма подбора исполнителей
		МассивАвторабот.ЗагрузитьЗначения(ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НовыеАвтоработы"));
		
		// Сформируем массив строк ТЧ Авторабот, для которых необходимо заполнить испольнителей по результату подбора.
		Если МассивАвторабот.Количество() > 0 Тогда
			СтрокиАвторабот = Объект.Автоработы.НайтиСтроки(Новый Структура("ИдентификаторРаботы", МассивАвторабот[0].Значение));
			Если СтрокиАвторабот.Количество() > 0 Тогда
				Элементы.Автоработы.ТекущаяСтрока = СтрокиАвторабот[0].ПолучитьИдентификатор();
				ЗаполнениеИсполнителей(ЭтотОбъект, Объект);
				МассивАвторабот.Удалить(МассивАвторабот.НайтиПоЗначению(МассивАвторабот[0].Значение));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры 

#КонецОбласти

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	                                                                                                                
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура Подключаемый_ШтрихкодированиеОбработкаОповещения(РезультатОповещения,
	ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ПричиныОбращенияТовары.ТекущаяСтрока <> Неопределено Тогда
		
		ДанныеОбращения = Объект.ПричиныОбращения.НайтиПоИдентификатору(Элементы.ПричиныОбращенияТовары.ТекущаяСтрока);
		РезультатОповещения.Вставить("ИдентификаторПричиныОбращения", ДанныеОбращения.ИдентификаторПричиныОбращения);
		
	КонецЕсли;
	
	Если РезультатОповещения.Свойство("Действие") Тогда
		
		ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры)

	ШтрихкодированиеВызовСервера.ОбработкаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры, , Объект);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтложенныйРасчетПоказателей()
	
	ДлительнаяОперацияРасчетЗапасов = ЗапуститьРасчетПоказателейЗапасов();
	
	Если ДлительнаяОперацияРасчетЗапасов.Статус = "Выполняется" Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперацияРасчетЗапасов,
			Новый ОписаниеОповещения("ПриЗавершенииРасчетаПоказателейЗапасов", ЭтотОбъект),
			ПараметрыОжидания
		);
		
		ПоказатьПоказатели(Ложь);
		
	Иначе
		
		ПриЗавершенииРасчетаПоказателейЗапасов(ДлительнаяОперацияРасчетЗапасов);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗапуститьРасчетПоказателейЗапасов()
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НСтр("ru = 'Расчет показателей запасов'");
	ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Ссылка", Объект.Ссылка); 
	ПараметрыМетода.Вставить("Товары", Объект.Товары.Выгрузить());
	ПараметрыМетода.Вставить("ДополнительныеПараметры", Новый Структура("ДокументОснование", Объект.ДокументОснование));
	
	ДлительнаяОперацияРасчетЗапасов = ДлительныеОперации.ВыполнитьВФоне(
		"Автосервис.ОбновитьПоказателиТоваровФЗ",
		ПараметрыМетода,
		ПараметрыВыполненияВФоне
	);
	
	Возврат ДлительнаяОперацияРасчетЗапасов;
	
КонецФункции

&НаКлиенте
Процедура ПриЗавершенииРасчетаПоказателейЗапасов(ДлительнаяОперацияРасчетЗапасов,
                                                 ДополнительныеПараметры = Неопределено) Экспорт
												 
	Если ТипЗнч(ДлительнаяОперацияРасчетЗапасов) = Тип("Структура")
		И ДлительнаяОперацияРасчетЗапасов.Свойство("Статус") Тогда
		Если ДлительнаяОперацияРасчетЗапасов.Статус = "Выполнено" Тогда
			
			ПоказателиЗапасов = ПолучитьИзВременногоХранилища(ДлительнаяОперацияРасчетЗапасов.АдресРезультата);
			АвтосервисКлиент.ОбновитьПоказателиНаФормеЗаявка(ЭтотОбъект, ПоказателиЗапасов);
			ПоказатьПоказатели(Истина);
			
		ИначеЕсли ДлительнаяОперацияРасчетЗапасов.Статус = "Ошибка" Тогда
			
			ПоказатьПоказатели(Ложь, НСтр("ru = 'Ошибка при получении параметров запасов.'"));
			
		ИначеЕсли ДлительнаяОперацияРасчетЗапасов.Статус = "Отменено" Тогда
			
			ПоказатьПоказатели(Ложь, НСтр("ru = 'Задание отменено администратором.'"));
			
		КонецЕсли;
	Иначе
		ПоказатьПоказатели(Ложь);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПоказатели(ПоказыватьПоказатели, ТекстОшибки = Неопределено)
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		Элементы.СтраниыИнформацияОбОстатках.ТекущаяСтраница = Элементы.СтраницаОшибка;
		ОшибкаПолученияПоказателей = ТекстОшибки;
		
	ИначеЕсли ПоказыватьПоказатели Тогда
		
		Элементы.СтраниыИнформацияОбОстатках.ТекущаяСтраница = Элементы.СтраницаПоказатели;
		
	Иначе
		
		Элементы.СтраниыИнформацияОбОстатках.ТекущаяСтраница = Элементы.СтраницаОбновление;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПослеУдаленияПричиныОбращения(Элемент)
	
	ПричиныОбращенийКлиент.ОбновитьИдентификаторыТаблиц(Объект);
	
	ПричиныОбращенийКлиентСервер.ОбновитьИндикаторыПричинОбращения(
		Объект.ПричиныОбращения,
		Объект.Автоработы,
		Объект.Товары
	);
	
	ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
		Элемент.ТекущиеДанные,
		Элементы.Автоработы,
		ИспользоватьПричиныОбращений
	);
	
	ПричиныОбращенийКлиент.ОтобратьДанныеПоПричинеОбращения(
		Элемент.ТекущиеДанные,
		Элементы.Товары,
		ИспользоватьПричиныОбращений
	);
	
	УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.Автоработы);
	УправлениеДиалогомАльфаАвтоКлиент.ОбновитьЗаголовокТаблицы(ЭтотОбъект, Элементы.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьИзДокументаТовары(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзДокументаТоварыНаСервере(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзДокументаТоварыНаСервере(Результат, ДополнительныеПараметры)
	
	Товары = ПолучитьИзВременногоХранилища(Результат.Корзина);
	ОбработкаРезультатаПодбораНоменклатуры(Товары, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьИзКорзины(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзКорзиныЗавершениеНаСервере(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзКорзиныЗавершениеНаСервере(Результат, ДополнительныеПараметры)
	
	Товары = РегистрыСведений.Корзина.ТоварыИзКорзины(Результат.Наименование, Результат.Дата);
	ОбработкаРезультатаПодбораНоменклатуры(Товары, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеЗаказчика()
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("НеобходимоПерезаполнитьАвтомобиль", Ложь);
	ПараметрыДействия.Вставить("ПерерасчитыватьКоэффициентАвторабот", Истина);
	
	ПараметрыДействия.Вставить("КэшПлательщик", КэшПлательщик);
	ПараметрыДействия.Вставить("КэшВидРемонта", КэшВидРемонта);
	ПараметрыДействия.Вставить("КэшЗаказчик", КэшЗаказчик);
	
	Если ЗначениеЗаполнено(ТелефонИзДанныхВыбора) Тогда
		ПараметрыДействия.Вставить("ТелефонИзДанныхВыбора", ТелефонИзДанныхВыбора);
	КонецЕсли;
	Если ЗначениеЗаполнено(АдресИзДанныхВыбора) Тогда
		ПараметрыДействия.Вставить("АдресИзДанныхВыбора", АдресИзДанныхВыбора);
	КонецЕсли;
	
	ЗаказчикПриИзмененииНаСервере(ПараметрыДействия);
	
	КэшПлательщик = Объект.Контрагент;
	КэшЗаказчик = Объект.Заказчик;
	
	// Обработаем изменения требующие ответа от пользователя
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
	ТелефонИзДанныхВыбора = "";
	АдресИзДанныхВыбора = "";
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваПоляВводаТелефона()
	
	УправлениеКонтактнойИнформациейАльфаАвто.УстановитьСвойстваПоляВводаТелефона(
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
		Объект.ПредставлениеТелефона,
		Элементы.ПредставлениеТелефона
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновлятьКИ(Результат, ДополнетельныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Элементы.ОбновлятьКИ.Пометка   = Истина;
		Элементы.НеОбновлятьКИ.Пометка = Ложь;
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Заголовок = НСтр("ru = 'Обновлять'");
	Иначе
		Элементы.ОбновлятьКИ.Пометка   = Ложь;
		Элементы.НеОбновлятьКИ.Пометка = Истина;
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Заголовок = НСтр("ru = 'Не обновлять'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти