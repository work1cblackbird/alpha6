// Модуль объекта документа "Заявка на ремонт"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "Имя") = "Событие" Тогда
		
		ДанныеЗаполненияКопия = ДанныеЗаполнения;
		ДанныеЗаполнения = ДанныеЗаполнения.Событие;
		
	КонецЕсли;
	
	ПрерватьЗаполнение = НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если ПрерватьЗаполнение Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка);
		
	КонецЕсли;
	
	Если ПраваИНастройкиПользователя.Значение("ПланированиеПриОформленииЗаявкиНаРемонт") Тогда
		
		ХозОперация = Справочники.ХозОперации.ПланРемонта;
		
	КонецЕсли;
	
	Если ОбработкаСобытийДокументаСервер.ВводСПустымОснованием(ДанныеЗаполнения) Тогда
		
		Заказчик = Справочники.Контрагенты.ПустаяСсылка();
		Документы.ЗаявкаНаРемонт.ЗаказчикПриИзменении(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Документы.ЗаявкаНаРемонт.КонтрагентПриИзменении(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
		СкидкаНаценка = Справочники.ТипыСкидок.ПустаяСсылка();
		Документы.ЗаявкаНаРемонт.СкидкаНаценкаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
		СкидкаНаценкаРаботы = Справочники.ТипыСкидок.ПустаяСсылка();
		Документы.ЗаявкаНаРемонт.СкидкаНаценкаРаботыПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
		ТипЦен = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенПродажи", ЭтотОбъект);
		Документы.ЗаявкаНаРемонт.ТипЦенПриИзменении(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
		ВалютаДокумента = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен,,Ложь);
		Документы.ЗаявкаНаРемонт.ВалютаДокументаПриИзменении(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТипЦенРабот) Тогда
		
		ТипЦенРабот = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенРабот", ЭтотОбъект);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Цех) Тогда
		
		Цех = ПраваИНастройкиПользователя.Значение("ОсновнойЦех", ЭтотОбъект);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидРемонта) Тогда
		
		ВидРемонта=ПраваИНастройкиПользователя.Значение("ВидРемонтаПоУмолчанию", ЭтотОбъект);
		Документы.ЗаявкаНаРемонт.ВидРемонтаПриИзменении(ЭтотОбъект);
		
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		
		СвязанныеРаботы.ЗаполнитьАвтоработыПоВидуРемонтаПриСозданииНовогоДокумента(ЭтотОбъект);
		ОсновнойСкладКомпании = ПраваИНастройкиПользователя.Значение("ОсновнойСкладКомпании", ЭтотОбъект);
		
		Для Каждого СтрокаТоваров Из Товары Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТоваров.СкладКомпании) Тогда
				СтрокаТоваров.СкладКомпании = ОсновнойСкладКомпании;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеЗаполненияКонтрагент = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполненияКопия, "Контрагент");
	
	Если ДанныеЗаполненияКонтрагент <> Неопределено Тогда
		
		Если ТипЗнч(ДанныеЗаполненияКонтрагент) = Тип("Строка") Тогда
			
			ОбращениеККлиенту = ДанныеЗаполненияКонтрагент;
			Заказчик = Справочники.Контрагенты.ПустаяСсылка();
			
		Иначе
			
			Заказчик = ДанныеЗаполненияКонтрагент;
			
		КонецЕсли;
		
		Документы.ЗаявкаНаРемонт.ЗаказчикПриИзменении(ЭтотОбъект, Новый Структура("ПодставлятьНомерТелефона", Ложь));
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполненияКопия, "Имя") = "Событие" Тогда
		
		Если ЗначениеЗаполнено(ДанныеЗаполненияКопия.Событие.Контрагент) Тогда
			
			Заказчик = ДанныеЗаполненияКопия.Событие.Контрагент;
			
		КонецЕсли;
		
		Документы.ЗаявкаНаРемонт.ЗаказчикПриИзменении(ЭтотОбъект, Новый Структура("ПодставлятьНомерТелефона", Ложь));
		
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Событие") Тогда
		ЭтотОбъект.ДатаНачала    = Дата(1, 1, 1);
		ЭтотОбъект.ДатаОкончания = Дата(1, 1, 1);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если Не ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаменаGuid = Новый Соответствие;
	
	Для Каждого ПричинаОбращения Из ПричиныОбращения Цикл
		
		ЗаменаGuid.Вставить(ПричинаОбращения.ИдентификаторПричиныОбращения, Новый УникальныйИдентификатор);
		ПричинаОбращения.ИдентификаторПричиныОбращения = ЗаменаGuid.Получить(
			ПричинаОбращения.ИдентификаторПричиныОбращения);
		
	КонецЦикла;
	
	Для Каждого Товар Из Товары Цикл
		Товар.ИдентификаторПричиныОбращения = ЗаменаGuid.Получить(Товар.ИдентификаторПричиныОбращения);
	КонецЦикла;
	
	Для Каждого Авторабота Из Автоработы Цикл
		Авторабота.ИдентификаторПричиныОбращения = ЗаменаGuid.Получить(Авторабота.ИдентификаторПричиныОбращения);
		СтарыйИдентификаторРаботы                = Авторабота.ИдентификаторРаботы;
		Авторабота.ИдентификаторРаботы           = Новый УникальныйИдентификатор;
		
		НайденныеСтроки = Исполнители.НайтиСтроки(Новый Структура("ИдентификаторРаботы", СтарыйИдентификаторРаботы));
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			ТекущаяСтрока.ИдентификаторРаботы = Авторабота.ИдентификаторРаботы;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Авторабота Из ВспомогательныеАвтоработы Цикл
		Авторабота.ИдентификаторРаботы = Новый УникальныйИдентификатор;
	КонецЦикла;
	
	ПовторноеОбращение = Ложь;
	АвторСнятияПовторногоОбращения = Справочники.Пользователи.ПустаяСсылка();
	ДатаСнятияПовторногоОбращения = Дата(1, 1, 1);
	ПричинаСнятияПовторногоОбращения = "";
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Проверим параметры запрета для номенклатуры
	Отказ = Отказ ИЛИ ПроверитьПараметрыЗапретаВыбораНоменклатуры();
	
	// Проверим корректность дат
	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) И (ДатаНачала > ДатаОкончания) Тогда
		
		ТекстСообщения = НСтр("ru = 'Дата начала заявки на ремонт более даты его окончания.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
		
	КонецЕсли;
	
	// Проверим корректность ввода гос. номера
	Отказ = Отказ Или АвтомобилиСервер.ПроверитьКорректностьГосНомера(ЭтотОбъект, ГосНомер, Истина);
	Отказ = Отказ Или ЕстьНезакрытыеЗаказыПокупателейПозаявке();
	
	Автосервис.ПроверитьЗаполнениеНормачасаАвтоработы(ЭтотОбъект, Отказ);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "ОбновлятьКИ", Ложь) Тогда
		
		КомментарийТелефона = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(ПредставлениеТелефонаСтрокой);
		УправлениеКонтактнойИнформациейАльфаАвто.СохранитьТелефон(Заказчик, ПредставлениеТелефона, КомментарийТелефона, Отказ);
		УправлениеКонтактнойИнформациейАльфаАвто.СохранитьЭлектроннуюПочту(Заказчик, АдресЭлектроннойПочты, Отказ);
		
	КонецЕсли;
	
	УправлениеКонтактнойИнформациейАльфаАвто.ПроверитьТелефонСМаскойПередЗаписью(ЭтотОбъект);
	
	// Сбросим контрагента и договор для бесплатного вида ремонта.
	Если Автосервис.ЭтоБесплатный(ВидРемонта) Тогда
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорВзаиморасчетов) Тогда
			
			ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьПустыеПричиныОбращений();
	ЗаполнитьСуммовыеПоказателиДокумента();
	
	ДатаНачалаЗаявки = Дата(1, 1, 1);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		ДатаНачалаЗаявки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ДатаНачала");
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВремяНачалаПередЗаписью", ДатаНачалаЗаявки);
	
	Если ЭтоНовый() Тогда
		
		ДополнительныеСвойства.Вставить("Новый");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ЭтоНовый", Ложь)
		И ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ИсточникЗаписи") <> "ЗаписьНаРемонт" Тогда
		
		Отказ = Отказ ИЛИ ПланированиеРесурсов.СкорректироватьПланированиеПоДокументу(Ссылка);
		
	КонецЕсли;
	
	Если НЕ Отказ
		И ТипЗнч(Автомобиль) = Тип("СправочникСсылка.Автомобили")
		И НЕ Автомобиль.Пустая() 
		И НЕ ПустаяСтрока(ГосНомер) Тогда
		
		Отказ = Отказ
				ИЛИ Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(Автомобиль,
						ГосНомер,
						Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер,
						Дата,
						Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.ЗаписьНаРемонт);
	КонецЕсли;
	
	Если НЕ Отказ
		И ТипЗнч(Автомобиль) = Тип("СправочникСсылка.Автомобили")
		И НЕ Автомобиль.Пустая()
		И ЗначениеЗаполнено(Пробег) Тогда
		
		Отказ = Отказ
				ИЛИ Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(Автомобиль,
						Пробег,
						Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег,
						Дата,
						Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.ЗаписьНаРемонт);
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВремяНачалаПриЗаписи", ДатаНачала);
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РаботаСГраницами.ПередУдалением(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Механизм отправки смс
	РегистрыСведений.НапоминаниеОЗаписиНаРемонт.УдалитьИзЗаявкиНаРемонт(Ссылка);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Отказ = Отказ ИЛИ ОчиститьПланированиеДокументаПриОтклонении();
	
	СформироватьНапоминанияЗаявки();
	
КонецПроцедуры // ОбработкаПроведения

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьСуммовыеПоказателиДокумента()
	
	СуммаНоменклатурыДокумента = Товары.Итог("СуммаВсего");
	СуммаРаботДокумента = Автоработы.Итог("СуммаВсего");
	СуммаДокумента = СуммаНоменклатурыДокумента+СуммаРаботДокумента;
	
	НормочасРубль = Справочники.Нормочасы.Рубль;
	
	НовоеВремяВыполненияРабот = 0;
	Для Каждого СтрокаРабот Из Автоработы Цикл
		Если СтрокаРабот.Нормочас <> НормочасРубль Тогда
			НовоеВремяВыполненияРабот = НовоеВремяВыполненияРабот + (СтрокаРабот.Коэффициент*СтрокаРабот.Количество);
		КонецЕсли;
	КонецЦикла;
	
	Если НовоеВремяВыполненияРабот <> ВремяВыполненияРабот Тогда
		ВремяВыполненияРабот = НовоеВремяВыполненияРабот;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПустыеПричиныОбращений()
	
	ДанныеПричиныПрочее = ПричиныОбращенийСлужебныйВызовСервера.ДанныеСтрокиПричиныОбращения(
		Справочники.ПричиныОбращений.Прочее,
		Новый Структура("Модель,Комплектация", Модель, ВариантКомплектации));
	
	Для Каждого Строка Из ПричиныОбращения Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.ПричинаОбращения) Тогда
			
			ПоляЗаполнения = Новый Массив;
			
			Если НЕ ЗначениеЗаполнено(Строка.ТипПричиныОбращения) Тогда
				
				ПоляЗаполнения.Добавить("ТипПричиныОбращения");
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Строка.НормаВремени) Тогда
				
				ПоляЗаполнения.Добавить("НормаВремени");
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Строка.ВидРемонтаПричиныОбращения) Тогда
				
				ПоляЗаполнения.Добавить("ВидРемонтаПричиныОбращения");
				
			КонецЕсли;
			
			Строка.ПричинаОбращения = Справочники.ПричиныОбращений.Прочее;
			
			Если ЗначениеЗаполнено(ПоляЗаполнения) Тогда
				
				ЗаполнитьЗначенияСвойств(Строка, ДанныеПричиныПрочее, СтрСоединить(ПоляЗаполнения, ","));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьНезакрытыеЗаказыПокупателейПозаявке()
	
	Если Ссылка.Пустая() ИЛИ Состояние <> Перечисления.СостояниеЗаявкиНаРемонт.Отклонено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	%1,
	|	ЗаказыПокупателейОстатки.Номенклатура.БазоваяЕдиницаИзмерения КАК Единица,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) КАК Заказано,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) КАК Резерв
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(
	|			,
	|			Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И Заказ.ДокументОснование = &ЗаявкаНаРемонт) КАК ЗаказыПокупателейОстатки");
	Запрос.УстановитьПараметр("ЗаявкаНаРемонт", Ссылка);
	
	ИмяРеквизитаКода = ПолучитьФункциональнуюОпцию("ИспользоватьАртикул");
	
	Если ИмяРеквизитаКода = Перечисления.РежимыВыводаКодаВДокументах.Код
		ИЛИ ИмяРеквизитаКода = Перечисления.РежимыВыводаКодаВДокументах.КодИПроизводитель Тогда
		
		Вставка = "ЗаказыПокупателейОстатки.Номенклатура.Код КАК КодПредставление";
		
	ИначеЕсли ИмяРеквизитаКода = Перечисления.РежимыВыводаКодаВДокументах.Артикул
		ИЛИ ИмяРеквизитаКода = Перечисления.РежимыВыводаКодаВДокументах.АртикулИПроизводитель Тогда
		
		Вставка = "ЗаказыПокупателейОстатки.Номенклатура.Артикул КАК КодПредставление";
		
	Иначе
		
		Вставка = "ЗаказыПокупателейОстатки.Номенклатура.Код + ""/"" + ЗаказыПокупателейОстатки.Номенклатура.Артикул КАК КодПредставление";
		
	КонецЕсли;
	
	Запрос.Текст = СтрШаблон(Запрос.Текст, Вставка);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	СообщениеПользователю = ОбщегоНазначенияКлиентСервер
		.ЗначениеВМассиве(НСтр("ru = 'По заявке на ремонт существуют заказанные/зарезервированные детали:'"));
	
	Пока Выборка.Следующий() Цикл
		
		ОписаниеДетали = СтрШаблон(НСтр("ru = 'Деталь %1/%2'"), Выборка.КодПредставление, Выборка.Номенклатура);
		
		Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
			
			ОписаниеДетали = ОписаниеДетали + " " + СтрШаблон(НСтр("ru = 'с характеристикой %1'"), Выборка.Характеристика)
			
		КонецЕсли;
		
		ОписаниеДетали = ОписаниеДетали + " "
			+ СтрШаблон(
				НСтр("ru = 'заказана под заявку на ремонт в количестве %1 %2'"),
				Формат(Выборка.Заказано, "ЧДЦ=2; ЧН=0,00"),
				Выборка.Единица);
		
		Если Выборка.Резерв <> 0 Тогда
			
			ОписаниеДетали = ОписаниеДетали + " "
				+ СтрШаблон(
					НСтр("ru = 'и зарезервирована в количестве %1 %2'"),
					Формат(Выборка.Резерв, "ЧДЦ=2; ЧН=0,00"),
					Выборка.Единица);
			
		КонецЕсли;
		
		СообщениеПользователю.Добавить(Символы.Таб + ОписаниеДетали);
		
	КонецЦикла;
	
	СообщениеПользователю.Добавить(НСтр("ru = 'Произведите корректировку/снятие резервов данных деталей.'"));
	ОбщегоНазначения.СообщитьПользователю(СтрСоединить(СообщениеПользователю, Символы.ПС), ЭтотОбъект);
	
	Возврат Истина;
	
КонецФункции

Функция ОчиститьПланированиеДокументаПриОтклонении()
	
	// Если заявку отклонили очистим планировани по данной заявке.
	Если Состояние <> Перечисления.СостояниеЗаявкиНаРемонт.Отклонено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыСведений.ПланированиеРабот.СоздатьНаборЗаписей();
	Набор.Отбор.Документ.Установить(Ссылка);
	
	НаборПоРесурсам = РегистрыСведений.ПланированиеРесурсов.СоздатьНаборЗаписей();
	НаборПоРесурсам.Отбор.Документ.Установить(Ссылка);
	
	Попытка
		
		Набор.Записать(Истина);
		НаборПоРесурсам.Записать(Истина);
		
	Исключение
		
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), ЭтотОбъект);
		ЗаписьЖурналаРегистрации(
			"Ошибка очистки планирования",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные(),
			Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
		Возврат Истина;
		
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

Процедура СформироватьНапоминанияЗаявки()
	
	Если НЕ ЗначениеЗаполнено(ВидРемонта) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВидаРемонта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ВидРемонта,
			"ОтправлятьУведомления,ШаблонПриЗаписиНаРемонт");
	
	// Проверим необходимо ли отправлять смс.
	Если НЕ ДанныеВидаРемонта.ОтправлятьУведомления Тогда
		Возврат;
	КонецЕсли;
	
	Если Состояние = Перечисления.СостояниеЗаявкиНаРемонт.Отклонено
		ИЛИ ДатаНачала < ТекущаяДатаСеанса()
		ИЛИ НЕ ЗначениеЗаполнено(ДанныеВидаРемонта.ШаблонПриЗаписиНаРемонт) Тогда
			РегистрыСведений.НапоминаниеОЗаписиНаРемонт.УдалитьИзЗаявкиНаРемонт(Ссылка);
	Иначе
		Если НЕ ЗначениеЗаполнено(Заказчик) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не удалось проверить у заказчика согласие на получение SMS.
					|Для получения SMS необходимо выбрать заказчика из справочника контрагентов.'"));
		ИначеЕсли ЗначениеЗаполнено(ПредставлениеТелефона) Тогда
			// Проверим соласие на получение СМС
			СогласиеНаСМС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказчик, "СогласиеНаПолучениеSMS");
			Если НЕ СогласиеНаСМС Тогда
				Возврат;
			КонецЕсли;
			РегистрыСведений.НапоминаниеОЗаписиНаРемонт.СоздатьИзменитьИзЗаявкиНаРемонт(Ссылка);
		КонецЕсли;
	КонецЕсли;
	ДополнительныеСвойства.Удалить("Новый");
	
КонецПроцедуры // СформироватьНапоминанияЗаявки()

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Заказ на автомобиль"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаАвтомобиль(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипЦенРабот) Тогда
		ТипЦенРабот = ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.ОсновнойТипЦенРабот, ЭтотОбъект);
	КонецЕсли;
	
	Если ЗащищенныеФункцииАльфаАвтоСервер.ПодсистемаДоступна("ЗащитаАвтосалон") Тогда
		ВидРемонта = Автосервис.ВидРемонтаТипаКомплектацияАвтомобиля();
		Если НЕ ЗначениеЗаполнено(Автомобиль) Тогда
			Автомобиль = ДанныеЗаполнения.Автомобиль;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидРемонта) Тогда
		ВидРемонта = ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.ВидРемонтаПоУмолчанию, ЭтотОбъект);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Цех) Тогда
		Цех = ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.ОсновнойЦех, ЭтотОбъект);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПриходныйСкладскойОрдер()

// Производит заполнение объекта на основании документа "Дефектовочная ведомость"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ДефектовочнаяВедомость(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Заказчик = ДанныеЗаполнения.Контрагент;
	Документы.ЗаявкаНаРемонт.ЗаказчикПриИзменении(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия); 
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ДефектовочнаяВедомость()

// Производит заполнение объекта на основании документа "Заказ на автомобиль"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Контрагенты(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипЦенРабот) Тогда
		ТипЦенРабот = ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.ОсновнойТипЦенРабот, ЭтотОбъект);
	КонецЕсли;
	
	Заказчик   = ДанныеЗаполнения;
	Контрагент = ДанныеЗаполнения;
	ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	Документы.ЗаявкаНаРемонт.КонтрагентПриИзменении(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(ВидРемонта) Тогда
		ВидРемонта = ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.ВидРемонтаПоУмолчанию, ЭтотОбъект);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Цех) Тогда
		Цех = ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.ОсновнойЦех, ЭтотОбъект);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПриходныйСкладскойОрдер()

// Производит заполнение объекта на основании документа "Акт оценки автомобиля"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_АктОценкиАвтомобиля(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПрерватьЗаполнение = Не ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если ПрерватьЗаполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Заказчик = ДанныеЗаполнения.Контрагент;
	Документы.ЗаявкаНаРемонт.ЗаказчикПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта по передаваемой структуре
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ЗаполнениеИзКорзины") Тогда
		Для Каждого Строка Из ДанныеЗаполнения.Товары Цикл		
			НоваяСтрока 						   = Товары.Добавить();	
			НоваяСтрока.Номенклатура 			   = Строка.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
			НоваяСтрока.Количество 				   = Строка.Количество;
			НоваяСтрока.ЕдиницаИзмерения 		   = Строка.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент		 		   = Строка.Коэффициент;
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ВидРемонта") Тогда
		
		ВидРемонта = ДанныеЗаполнения.ВидРемонта;
		Документы.ЗаявкаНаРемонт.ВидРемонтаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("Автомобиль") Тогда
		
		Если ТипЗнч(ДанныеЗаполнения.Автомобиль) = Тип("Массив") Тогда
			ДанныеЗаполнения.Автомобиль = ДанныеЗаполнения.Автомобиль[0];
		КонецЕсли;
		
		Автомобиль = ДанныеЗаполнения.Автомобиль;
		Документы.ЗаявкаНаРемонт.АвтомобильПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("МассивПричин") Тогда
		
		Для Каждого Причина Из ДанныеЗаполнения.МассивПричин Цикл
			НоваяСтрока = ПричиныОбращения.Добавить();
			НоваяСтрока.ПричинаОбращения              = Справочники.ПричиныОбращений.Прочее;
			НоваяСтрока.ПричинаОбращенияСодержание    = Причина;
			НоваяСтрока.ИдентификаторПричиныОбращения = Новый УникальныйИдентификатор;
			Документы.ЗаявкаНаРемонт.ПричиныОбращенияПричинаОбращенияПриИзменении(ЭтотОбъект, НоваяСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("СервиснаяКампания") Тогда
		
		СервиснаяКампания = ДанныеЗаполнения.СервиснаяКампания;
		ДополнительныеСвойства.ПараметрыДействия.Вставить("ОчиститьТаблицы", Истина);
		ДополнительныеСвойства.ПараметрыДействия.Вставить("ТребуетсяУстановкаВидаРемонта", НЕ ЗначениеЗаполнено(ВидРемонта));
		ДополнительныеСвойства.ПараметрыДействия.Вставить("ТребуетсяЗаполнениеАвтоработамиПоСервиснойКомпании", Истина);
		Документы.ЗаявкаНаРемонт.ЗаполнениеПоСервиснойКомпании(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Структура()

// Производит заполнение объекта на основании документа "Реализация автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РеализацияАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипЦенРабот) Тогда
		ТипЦенРабот = ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.ОсновнойТипЦенРабот, ЭтотОбъект);
	КонецЕсли;
	
	Если ЗащищенныеФункцииАльфаАвтоСервер.ПодсистемаДоступна("ЗащитаАвтосалон") Тогда
		Если НЕ ЗначениеЗаполнено(Автомобиль) И ДанныеЗаполнения.Автомобили.Количество()>0  Тогда
			Автомобиль = ДанныеЗаполнения.Автомобили[0].Автомобиль;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидРемонта) Тогда
		ВидРемонта = ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.ВидРемонтаПоУмолчанию, ЭтотОбъект);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Цех) Тогда
		Цех = ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.ОсновнойЦех, ЭтотОбъект);
	КонецЕсли;
	
	// Удалим пустые строки в ТЧ Товары, т.к. они нет возможности вывода автомобилей
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаТовара Из Товары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовара.Номенклатура) Тогда
			УдаляемыеСтроки.Добавить(СтрокаТовара);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Товары.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПриходныйСкладскойОрдер()

// Производит заполнение объекта на основании документа "Заказ покупателя"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПокупателя(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПрерватьЗаполнение = НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если ПрерватьЗаполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Заказчик = Контрагент;
	
	Если НЕ ЗначениеЗаполнено(ТипЦенРабот) Тогда
		ТипЦенРабот = ПраваИНастройкиПользователя.Значение(
			ПланыВидовХарактеристик.ПраваИНастройки.ОсновнойТипЦенРабот,
			ЭтотОбъект
		);
	КонецЕсли;
	
	Если ЗащищенныеФункцииАльфаАвтоСервер.ПодсистемаДоступна("ЗащитаАвтосалон") Тогда
		ВидРемонта = Автосервис.ВидРемонтаТипаКомплектацияАвтомобиля();
		Если НЕ ЗначениеЗаполнено(Автомобиль) Тогда
			Автомобиль = ДанныеЗаполнения.Автомобиль;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидРемонта) Тогда
		ВидРемонта = ПраваИНастройкиПользователя.Значение(
			ПланыВидовХарактеристик.ПраваИНастройки.ВидРемонтаПоУмолчанию,
			ЭтотОбъект
		);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Цех) Тогда
		Цех = ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.ОсновнойЦех, ЭтотОбъект);
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.СкладКомпании,
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток КАК Количество,
	|	ЗаказыПокупателейОстатки.СуммаОстаток КАК СуммаЗаказа,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.Количество * ЗаказПокупателяТовары.Коэффициент,1) КАК КоличествоБазовое,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.ЕдиницаИзмерения, Значение(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.Коэффициент,1) КАК Коэффициент,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.СтавкаНДС, ЗаказыПокупателейОстатки.Номенклатура.СтавкаНДС) КАК СтавкаНДС,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.НомерСтроки, 1000000) КАК НомерСтроки,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.СкидкаНаТовар, ЗНАЧЕНИЕ(Справочник.ТипыСкидок.ПустаяСсылка)) КАК СкидкаНаТовар,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.ПроцентСкидкиСтроки, 0) КАК ПроцентСкидкиСтроки,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.ПроцентСкидки, 0) КАК ПроцентСкидки
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(" + ?(Ссылка.Пустая(), "", "&НаМомент") + ",
	|	Контрагент = &ВыбКонтрагент И Заказ = &ВыбЗаказ) КАК ЗаказыПокупателейОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ПО
	|	ЗаказыПокупателейОстатки.Заказ = ЗаказПокупателяТовары.Ссылка И 
	|	ЗаказыПокупателейОстатки.Номенклатура = ЗаказПокупателяТовары.Номенклатура И 
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказПокупателяТовары.ХарактеристикаНоменклатуры
	|ГДЕ
	|	ЗаказыПокупателейОстатки.Номенклатура.ВидНоменклатуры<>ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.ПрочиеАктивы)
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(КоличествоБазовое),
	|	МАКСИМУМ(Количество),
	|	МАКСИМУМ(СуммаЗаказа)
	|ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	СкладКомпании";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НаМомент",      МоментВремени());
	Запрос.УстановитьПараметр("ВыбКонтрагент", Контрагент);
	Запрос.УстановитьПараметр("ВыбЗаказ",      ДанныеЗаполнения);
	Товары.Очистить(); // нужные только скорректированные позиции
	ВыборкаНоменклатуры = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВалютаЗаказа   = ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов;
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаЗаказа,Дата);
	КурсЗаказа     = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	// перенос скидки
	СкидкаНаценка = ДанныеЗаполнения.СкидкаНаценка;
	Документы.ЗаявкаНаРемонт.СкидкаНаценкаПриИзменении(ЭтотОбъект);
	
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		ВыборкаХарактеристик = ВыборкаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХарактеристик.Следующий() Цикл
			
			ВсегоОсталось             = ВыборкаХарактеристик.Количество;
			КоличествоБазовоеПоЗаказу = ВыборкаХарактеристик.КоличествоБазовое;
			СуммаОсталось             = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				ВыборкаХарактеристик.СуммаЗаказа,
				ВалютаЗаказа,
				КурсЗаказа,
				ВалютаДокумента,
				КурсДокумента
			);
			
			ВыборкаСкладов = ВыборкаХарактеристик.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаСкладов.Следующий() Цикл
				ВыборкаДетали = ВыборкаСкладов.Выбрать(ОбходРезультатаЗапроса.Прямой);
				СтрокаДетали  = Неопределено;
				Пока ВыборкаДетали.Следующий() Цикл
					
					Если ВсегоОсталось = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если ВыборкаДетали.Количество = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если КоличествоБазовоеПоЗаказу = 1 Тогда
						КоличествоСтроки = ВыборкаДетали.Количество;
					Иначе
						КоличествоСтроки = ВыборкаДетали.Количество
							* (ВыборкаДетали.КоличествоБазовое / КоличествоБазовоеПоЗаказу);
					КонецЕсли;
					
					//НомерСтроки = ВыборкаДетали.НомерСтроки;
					ТекущееКоличество = Мин(ВсегоОсталось, КоличествоСтроки);
					СтрокаДетали = Товары.Добавить();
					СтрокаДетали.Номенклатура               = ВыборкаДетали.Номенклатура;
					СтрокаДетали.ХарактеристикаНоменклатуры = ВыборкаДетали.ХарактеристикаНоменклатуры;
					СтрокаДетали.СкладКомпании              = ВыборкаДетали.СкладКомпании;
					СтрокаДетали.ЕдиницаИзмерения           = ВыборкаДетали.ЕдиницаИзмерения;
					СтрокаДетали.Коэффициент                = ВыборкаДетали.Коэффициент;
					СтрокаДетали.Количество                 = ТекущееКоличество
						/ ?(НЕ ЗначениеЗаполнено(СтрокаДетали.Коэффициент), 1, СтрокаДетали.Коэффициент);
					
					Документы.ЗаявкаНаРемонт.ТоварыНоменклатураПриИзменении(ЭтотОбъект, СтрокаДетали);
					
					ТекСумма      = (СуммаОсталось / ВсегоОсталось) * ТекущееКоличество;
					СуммаОсталось = СуммаОсталось - ТекСумма;
					
					СтрокаДетали.СтавкаНДС                  = ВыборкаДетали.СтавкаНДС;
					// перенос скидок
					СтрокаДетали.СкидкаНаТовар              = ВыборкаДетали.СкидкаНаТовар;
					СтрокаДетали.ПроцентСкидки              = ВыборкаДетали.ПроцентСкидки;
					СтрокаДетали.ПроцентСкидкиСтроки        = ВыборкаДетали.ПроцентСкидкиСтроки;
					СтрокаДетали.СуммаВсего                 = ТекСумма;
					
					Документы.ЗаявкаНаРемонт.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект, СтрокаДетали);
					
					ВсегоОсталось = ВсегоОсталось - ТекущееКоличество;
					
				КонецЦикла;
				
				Если ВсегоОсталось > 0 ИЛИ СуммаОсталось > 0 Тогда
					Если НЕ СтрокаДетали = Неопределено Тогда
						СтрокаДетали.Количество = СтрокаДетали.Количество
							+ (ВсегоОсталось / ?(НЕ ЗначениеЗаполнено(СтрокаДетали.Коэффициент), 1, СтрокаДетали.Коэффициент));
						Документы.ЗаявкаНаРемонт.ТоварыКоличествоПриИзменении(ЭтотОбъект, СтрокаДетали);
						СтрокаДетали.СуммаВсего = СтрокаДетали.СуммаВсего + СуммаОсталось;
					Иначе
						
						СтрокаДетали = Товары.Добавить();
						СтрокаДетали.Номенклатура               = ВыборкаСкладов.Номенклатура;
						СтрокаДетали.ХарактеристикаНоменклатуры = ВыборкаСкладов.ХарактеристикаНоменклатуры;
						СтрокаДетали.СкладКомпании              = ВыборкаСкладов.СкладКомпании;
						Документы.ЗаявкаНаРемонт.ТоварыНоменклатураПриИзменении(ЭтотОбъект, СтрокаДетали);
						
						СтрокаДетали.СтавкаНДС                  = ПолучитьПараметрыПлательщикаНДС(ЭтотОбъект.Организация, ЭтотОбъект.ПодразделениеКомпании, ЭтотОбъект.Дата).ОсновнаяСтавка;
						СтрокаДетали.Количество                 = ВсегоОсталось
							/ ?(НЕ ЗначениеЗаполнено(СтрокаДетали.Коэффициент), 1, СтрокаДетали.Коэффициент);
						Документы.ЗаявкаНаРемонт.ТоварыКоличествоПриИзменении(ЭтотОбъект, СтрокаДетали);
						
						СтрокаДетали.СуммаВсего = СуммаОсталось;
						
					КонецЕсли;
					Документы.ЗаявкаНаРемонт.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект, СтрокаДетали);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта на основании документа "Событие"
//
// Параметры:
//  Событие			     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Событие(ДанныеЗаполнения, 
	ТекстЗаполнения = "", 
	СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения.
	ПрерватьЗаполнение = НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если ПрерватьЗаполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Если контрагент был заполнен в документе-основании,
	// подтянем информацию из его карточки вызовом соответствующего обработчика.
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		Документы.ЗаявкаНаРемонт.КонтрагентПриИзменении(ЭтотОбъект);
		
	КонецЕсли;
	
	// Даже если в карточке контрагента заполнен телефон/почта заполняем эту информацию из События.
	УправлениеКонтактнойИнформациейАльфаАвто.ЗаполнитьКонтактнуюИнформациюИзСобытия(ДанныеЗаполнения, ЭтотОбъект);
	
	// Возвращаем признак возможности дальнейшей обработки события. 
	Возврат Истина;
	
КонецФункции
#КонецОбласти

Функция ПараметрыПроверкиОперацийСНоменклатурой()
	
	Параметры = Новый Структура;
	
	// заполняем
	Параметры.Вставить("ЗапретПродажи", Истина);
	ТаблицыДляПроверки = Новый Массив;
	ТаблицыДляПроверки.Добавить("Товары");
	Параметры.Вставить("ТаблицыДляПроверки", ТаблицыДляПроверки);
	
	Возврат Параметры;
	
КонецФункции

Функция ПроверитьПараметрыЗапретаВыбораНоменклатуры()
	
	ПараметрыПроверки = ПараметрыПроверкиОперацийСНоменклатурой();
	ДополнительныеСвойства.Вставить("ПараметрыПроверки", ПараметрыПроверки);
	
	Возврат ОбработкаСобытийДокументаСервер.ПроверитьПараметрыЗапретаВыбораНоменклатуры(ЭтотОбъект, ПараметрыПроверки);
	
КонецФункции

#КонецОбласти

#КонецЕсли
