// Модуль менеджера документа "Заявка на ремонт"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ДефектовочнаяВедомость);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЖалобаКлиента);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказПокупателя);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаАренду);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СнятиеРезервовЗаказовПокупателя);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетНаОплату);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ЗаявкаНаРемонт);

КонецФункции

#КонецОбласти

#Область ЗапретРедактированияРеквизитовОбъектов

// Определяет блокируемые реквизиты
//
// Возвращаемое значение:
//  Массив - Строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]. Например: "Объект.Автор", "ПолеАвтор".
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив();
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//  Параметры - Структура - Вспомогательные параметры. 
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	// TODO: Пока нет команд заполнения для докумнета
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Установить ставку НДС для ТЧ работ
//
Процедура УстановитьСтавкуНДСДляРабот(Объект, ПараметрыДействия = Неопределено)
	
	ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата);

	ОсвобожденОтНДС = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОсвобожденОтНДС", Ложь)
					  ИЛИ ПараметрыНДС.ОсвобожденОтНДС;
					  
	СтавкаБезНДС    = Справочники.СтавкиНДС.БезНДС;
	
	Для Каждого Строка Из Объект.Автоработы Цикл
		Строка.СтавкаНДС = ?(ОсвобожденОтНДС, 
			СтавкаБезНДС,
			РаботаСоСтавкамиНДССервер.СтавкаНДСНоменклатуры(ПараметрыНДС, Строка.Авторабота)
		);
		АвтоработыСтавкаНДСПриИзменении(Объект, Строка);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьГарантийногоПлательщика(Объект, ПараметрыДействия)
	
	НовыйКонтрагент            = Неопределено;
	НовыйДоговорВзаиморасчетов = Неопределено;
	
	// Выполним поиск гарантийого контрагента
	Если НЕ ЗначениеЗаполнено(Объект.ВидРемонта)
		ИЛИ Объект.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Платный Тогда
		
		Отбор = Новый Структура("Модель", Справочники.Модели.ПустаяСсылка());
		Если ЕстьРеквизит(Объект, "Автомобиль") Тогда
			Если ТипЗнч(Объект.Автомобиль) = Тип("СправочникСсылка.Автомобили") Тогда
				Отбор.Модель = Объект.Автомобиль.Модель;
			ИначеЕсли ТипЗнч(Объект.Автомобиль) = Тип("СправочникСсылка.Модели") Тогда
				Отбор.Модель = Объект.Автомобиль;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.Автомобиль) И ЕстьРеквизит(Объект, "Модель") Тогда
				Отбор.Модель = Объект.Модель;	
			КонецЕсли;
		ИначеЕсли ЕстьРеквизит(Объект.ДокументОснование, "Автомобиль") Тогда
			Если ТипЗнч(Объект.ДокументОснование.Автомобиль) = Тип("СправочникСсылка.Автомобили") Тогда
				Отбор.Модель = Объект.ДокументОснование.Автомобиль.Модель;
			ИначеЕсли ТипЗнч(Объект.ДокументОснование.Автомобиль) = Тип("СправочникСсылка.Модели") Тогда
				Отбор.Модель = Объект.ДокументОснование.Автомобиль;
			КонецЕсли;
		КонецЕсли;
		
		Гарантии = Объект.ВидРемонта.Гарантия.НайтиСтроки(Отбор);
		
		Если Гарантии.Количество() = 0 Тогда
			
			УстановленПлательщик = Ложь;
			
			// Проверим наличие плательщика вида ремонта для любой модели
			Если ЗначениеЗаполнено(Отбор.Модель) Тогда
				Отбор.Модель = Справочники.Модели.ПустаяСсылка();
				ГарантииПоВсемМоделям = Объект.ВидРемонта.Гарантия.НайтиСтроки(Отбор);
				Если НЕ ГарантииПоВсемМоделям.Количество() = 0 Тогда
					НовыйКонтрагент            = ГарантииПоВсемМоделям[0].Контрагент;
					НовыйДоговорВзаиморасчетов = ГарантииПоВсемМоделям[0].ДоговорВзаиморасчетов;
					УстановленПлательщик = Истина;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			НовыйКонтрагент            = Гарантии[0].Контрагент;
			НовыйДоговорВзаиморасчетов = Гарантии[0].ДоговорВзаиморасчетов;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Контрагент",            НовыйКонтрагент);
	Результат.Вставить("ДоговорВзаиморасчетов", НовыйДоговорВзаиморасчетов);
	
	Возврат Результат;
	
КонецФункции // ПолучитьГарантийногоПлательщика()

// Установить плательщика по гарантии
//
Процедура УстановитьГарантийногоПлательщика(Объект, ПараметрыДействия = Неопределено)
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ДанныеПлательщика = ПолучитьГарантийногоПлательщика(Объект, ПараметрыДействия);
	
	УстановленПлательщик = Ложь;
	
	// выполним подстановку
	Если ЗначениеЗаполнено(ДанныеПлательщика.Контрагент) Тогда
		
		УстановленПлательщик = Истина;
		
		Объект.Контрагент = ДанныеПлательщика.Контрагент;
		КонтрагентПриИзменении(Объект, ПараметрыДействия);
		
		Если ЗначениеЗаполнено(ДанныеПлательщика.ДоговорВзаиморасчетов)
			И (Объект.ДоговорВзаиморасчетов <> ДанныеПлательщика.ДоговорВзаиморасчетов) Тогда
			
			Объект.ДоговорВзаиморасчетов = ДанныеПлательщика.ДоговорВзаиморасчетов;
			ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
			
		КонецЕсли;
		
	Иначе
		
		// а был ли гарантийный плательщик?
		ДанныеОбъекта = Новый Структура;
		ВремПараметрыДействия = Новый Структура;
		
		// Получим значения данных до изменения. Если их нет в параметрах - возьмем из ссылки.
		КэшВидРемонта = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "КэшВидРемонта", Объект.Ссылка.ВидРемонта);
		КэшПлательщик = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "КэшПлательщик", Объект.Ссылка.Контрагент);
		КэшЗаказчик   = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "КэшЗаказчик",   Объект.Ссылка.Заказчик);
		ДанныеОбъекта.Вставить("ВидРемонта",        КэшВидРемонта);
		ДанныеОбъекта.Вставить("Автомобиль",        Объект.Автомобиль);
		ДанныеОбъекта.Вставить("ДокументОснование", Объект.ДокументОснование);
		ДанныеОбъекта.Вставить("Контрагент",        Объект.Контрагент);
		ДанныеОбъекта.Вставить("Заказчик",          Объект.Заказчик);
		
		ДанныеСтарого = ПолучитьГарантийногоПлательщика(ДанныеОбъекта, ВремПараметрыДействия);
		
		Если ЗначениеЗаполнено(ДанныеСтарого.Контрагент) И ДанныеСтарого.Контрагент = КэшПлательщик Тогда
			
			// Новый вид ремонта не гарантийный, старый - гарантийный, 
			// старый вид ремонта имеет гарантийного плательщика,
			// старый плательщик из старого гарантийного ремонта.
			// Исходя из этого меняем плательщика на заказчика.
			Объект.Контрагент = ПолучитьВедущегоКонтрагента(Объект.Заказчик);
			КонтрагентПриИзменении(Объект, ПараметрыДействия);
			УстановленПлательщик = Истина;
		КонецЕсли;
		
		Если
			ЗначениеЗаполнено(Объект.Заказчик)
			И НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеПодставлятьКонтрагентаИзЗаказчика", Ложь)
			И (НЕ ЗначениеЗаполнено(Объект.Контрагент) ИЛИ Объект.Контрагент = КэшЗаказчик)
		Тогда
			Объект.Контрагент = ПолучитьВедущегоКонтрагента(Объект.Заказчик);
			КонтрагентПриИзменении(Объект, ПараметрыДействия);
			УстановленПлательщик = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	КэшПлательщик = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "КэшПлательщик", Объект.Ссылка.Контрагент);
	Если УстановленПлательщик И Объект.Контрагент <> КэшПлательщик Тогда
		
		// подготовим сообщение для вывода об изменении контрагента
		Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеВыводитьСообщенияНаСервере", Ложь) Тогда
			
			Сообщение = Новый Структура;
			Сообщение.Вставить("Заголовок", НСтр("ru = 'Установлен новый плательщик.'"));
			Сообщение.Вставить("Текст",
				СтрШаблон(НСтр("ru = '""%1"" по договору ""%2""'"), Объект.Контрагент, Объект.ДоговорВзаиморасчетов)
			);
			
			Если ПараметрыДействия.Свойство("ДляВыводаНаКлиенте") Тогда
				
				ПараметрыДействия.ДляВыводаНаКлиенте.Добавить(Сообщение);
				
			Иначе
				
				ПараметрыДействия.Вставить("ДляВыводаНаКлиенте", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сообщение));
				
			КонецЕсли;
			
		Иначе
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Установлен новый плательщик по заявке на ремонт: %1 по договору %2'"),
					Объект.Контрагент,
					Объект.ДоговорВзаиморасчетов
				),
				Объект.Ссылка
			);
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры // УстановитьГарантийногоПлательщика()

// Возвращает ведущего контрагента для контрагента в параметре
// Параметры:
//  Заказчик    - Ссылка на контрагента, для которого происходит поиск ведущего.
Функция ПолучитьВедущегоКонтрагента(Заказчик) Экспорт
	
	// !!! Исправить как будет изменена структура регистра сведений "Контактные лица"
	//ПустойКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	//Если ТипЗнч(Заказчик) = ТипЗнч(ПустойКонтрагент) Тогда
	//	Если Заказчик.ВидКонтрагента = Перечисления.ВидыКонтрагентов.КонтактноеЛицо Тогда
	//		Если Заказчик.ВедушийКонтрагент <> Неопределено И Заказчик.ВедушийКонтрагент <> ПустойКонтрагент Тогда
	//			Возврат ПолучитьВедущегоКонтрагента(Заказчик.ВедушийКонтрагент);
	//		Иначе
	//			Возврат ПустойКонтрагент;
	//		КонецЕсли;
	//	Иначе
			Возврат Заказчик;
	//	КонецЕсли;
	//Иначе
	//	Возврат ПустойКонтрагент;
	//КонецЕсли;
	
КонецФункции

// расчет продолжительности по спроке при заполненных дате начала и конца
//
Процедура РассчитатьПродолжительность(Объект, Строка) Экспорт
	
	Если ЗначениеЗаполнено(Строка.НачалоВыполнения) И ЗначениеЗаполнено(Строка.ОкончаниеВыполнения) И (Строка.НачалоВыполнения < Строка.ОкончаниеВыполнения) Тогда
		Строка.Продолжительность = Окр((Строка.ОкончаниеВыполнения - Строка.НачалоВыполнения)/3600, 2, РежимОкругления.Окр15как20);
	Иначе
		Строка.Продолжительность = 0;
	КонецЕсли;
	
КонецПроцедуры

// Заполнение Вида ремонта и Авторабот из Сервисной компании
//
Процедура ЗаполнениеПоСервиснойКомпании(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	РедактированиеРаботЗаказНаряда   = ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.РедактированиеРаботЗаказНаряда, Объект);
	РедактированиеДеталейЗаказНаряда = ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.РедактированиеДеталейЗаказНаряда, Объект);
	
	// Если передана причина обращения, то сделаем заполнение авторабот и деталей для нее.
	ИдентификаторПричиныОбращения = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ПричинаОбращения", Неопределено);
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОчиститьТаблицы", Ложь) Тогда
		Если РедактированиеРаботЗаказНаряда Тогда
			Если ИдентификаторПричиныОбращения = Неопределено Тогда
				Объект.Автоработы.Очистить();
			Иначе
				СтрокиАвторабот = Объект.Автоработы.НайтиСтроки(Новый Структура("ИдентификаторПричиныОбращения", ИдентификаторПричиныОбращения));
				Для Каждого ТекущаяСтрока Из СтрокиАвторабот Цикл
					Объект.Автоработы.Удалить(ТекущаяСтрока);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если РедактированиеДеталейЗаказНаряда Тогда
			Если ИдентификаторПричиныОбращения = Неопределено Тогда
				Объект.Товары.Очистить();
			Иначе
				СтрокиДеталей = Объект.Товары.НайтиСтроки(Новый Структура("ИдентификаторПричиныОбращения", ИдентификаторПричиныОбращения));
				Для Каждого ТекущаяСтрока Из СтрокиДеталей Цикл
					Объект.Товары.Удалить(ТекущаяСтрока);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТребуетсяУстановкаВидаРемонта                     = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяУстановкаВидаРемонта", Ложь);
	ТребуетсяЗаполнениеАвтоработамиПоСервиснойКомпании = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяЗаполнениеАвтоработамиПоСервиснойКомпании", Ложь);
	
	Если ТребуетсяУстановкаВидаРемонта Тогда
		Объект.ВидРемонта = Объект.СервиснаяКампания.ВидРемонта;
		ВидРемонтаПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Если ТребуетсяЗаполнениеАвтоработамиПоСервиснойКомпании Тогда
		Для Каждого АвтоработаСервиснойКампании Из Объект.СервиснаяКампания.Автоработы Цикл
			Если ТипЗнч(АвтоработаСервиснойКампании.Авторабота) = Тип("СправочникСсылка.Автоработы") И РедактированиеРаботЗаказНаряда Тогда
				
				// попробуем найти строку в ТЧ Вспомогательные автоработы
				СтрокаТЧ = Неопределено;
				Отбор = Новый Структура("Авторабота", АвтоработаСервиснойКампании.Авторабота);
				Если АвтоработаСервиснойКампании.ВспомогательнаяАвторабота Тогда
					НайденныеСтроки = Объект.ВспомогательныеАвтоработы.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество() = 0 Тогда
						НоваяСтрокаАвторабот = Объект.ВспомогательныеАвтоработы.Добавить();
						НоваяСтрокаАвторабот.Авторабота = АвтоработаСервиснойКампании.Авторабота;
						ВспомогательныеАвтоработыАвтоработаПриИзменении(Объект, НоваяСтрокаАвторабот);
					КонецЕсли;
				Иначе
					// попробуем найти строку в ТЧ Автоработы
					Если Объект.Автоработы.Количество() > 0 Тогда
						Если НЕ ИдентификаторПричиныОбращения = Неопределено Тогда
							Отбор.Вставить("ИдентификаторПричиныОбращения", ИдентификаторПричиныОбращения);
						КонецЕсли;
						
						НайденныеСтроки = Объект.Автоработы.НайтиСтроки(Отбор);
						Если НайденныеСтроки.Количество() > 0 Тогда
							СтрокаТЧ = НайденныеСтроки[0];
						КонецЕсли;
					КонецЕсли;
					Если СтрокаТЧ = Неопределено Тогда
						НоваяСтрокаАвторабот = Объект.Автоработы.Добавить();
						НоваяСтрокаАвторабот.Авторабота = АвтоработаСервиснойКампании.Авторабота;
						АвтоработыАвтоработаПриИзменении(Объект, НоваяСтрокаАвторабот);
						
						НоваяСтрокаАвторабот.Количество = АвтоработаСервиснойКампании.Количество;
						АвтоработыКоличествоПриИзменении(Объект, НоваяСтрокаАвторабот);
						
						НоваяСтрокаАвторабот.ИдентификаторРаботы = Новый УникальныйИдентификатор;
						
						Если НЕ ИдентификаторПричиныОбращения = Неопределено Тогда
							НоваяСтрокаАвторабот.ИдентификаторПричиныОбращения = ИдентификаторПричиныОбращения;
						КонецЕсли;
					Иначе
						СтрокаТЧ.Количество = СтрокаТЧ.Количество + АвтоработаСервиснойКампании.Количество;
						АвтоработыКоличествоПриИзменении(Объект, СтрокаТЧ);
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(АвтоработаСервиснойКампании.Авторабота) = Тип("СправочникСсылка.Номенклатура") И РедактированиеДеталейЗаказНаряда Тогда
				// попробуем найти строку в ТЧ
				СтрокаТЧ = Неопределено;
				Если Объект.Товары.Количество() > 0 Тогда
					Отбор = Новый Структура("Номенклатура", АвтоработаСервиснойКампании.Авторабота);
					
					Если НЕ ИдентификаторПричиныОбращения = Неопределено Тогда
						Отбор.Вставить("ИдентификаторПричиныОбращения", ИдентификаторПричиныОбращения);
					КонецЕсли;
					
					НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество() > 0 Тогда
						СтрокаТЧ = НайденныеСтроки[0];
					КонецЕсли;
				КонецЕсли;
				
				Если СтрокаТЧ = Неопределено Тогда
					НоваяСтрокаТоваров = Объект.Товары.Добавить();
					
					НоваяСтрокаТоваров.Номенклатура = АвтоработаСервиснойКампании.Авторабота;
					ТоварыНоменклатураПриИзменении(Объект, НоваяСтрокаТоваров);
					
					Если ОбработкаТабличнойЧастиТовары.ДопустимаяСтрока(НоваяСтрокаТоваров, Объект.Товары) Тогда
						НоваяСтрокаТоваров.Количество = АвтоработаСервиснойКампании.Количество;
						ТоварыКоличествоПриИзменении(Объект, НоваяСтрокаТоваров);
						
						Если НЕ ИдентификаторПричиныОбращения = Неопределено Тогда
							НоваяСтрокаТоваров.ИдентификаторПричиныОбращения = ИдентификаторПричиныОбращения;
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					СтрокаТЧ.Количество = СтрокаТЧ.Количество + АвтоработаСервиснойКампании.Количество;
					ТоварыКоличествоПриИзменении(Объект, СтрокаТЧ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Сбросим признаки расчета
	ПараметрыДействия.Вставить("ТребуетсяУстановкаВидаРемонта"                     , Ложь);
	ПараметрыДействия.Вставить("ОчиститьТаблицы"                                   , Ложь);
	ПараметрыДействия.Вставить("ТребуетсяЗаполнениеАвтоработамиПоСервиснойКомпании" , Ложь);
	
КонецПроцедуры

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Товары.Итог("СуммаВсего")+Объект.Автоработы.Итог("СуммаВсего"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС"        , Объект.Товары.Итог("СуммаНДС")+Объект.Автоработы.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаНДСТоваров" , Объект.Товары.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаНДСРабот"   , Объект.Автоработы.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС"     , ИтогиОперации.СуммаДокумента-ИтогиОперации.СуммаНДС);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Производит расчет суммы скидки/наценки по документу в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция РассчитатьСуммуСкидкиНаценки(Объект) Экспорт
	
	Объект.СуммаСкидкиНаценки = Объект.Товары.Итог("СуммаСкидки")
		+ Объект.Товары.Итог("СуммаСкидкиСтроки");
	Объект.СуммаСкидкиНаценкиРабот = Объект.Автоработы.Итог("СуммаСкидки")
		+ Объект.Автоработы.Итог("СуммаСкидкиСтроки");
	
КонецФункции // РассчитатьСуммуСкидкиНаценки()

// Используеся в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость выводв только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возращаемая сторка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить = ЛОЖЬ, ТолькоОсновныеКонтакты = ИСТИНА) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

// Процедра получения доступа к расчету скидок из менеджера.
Процедура РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти="Товары", СкидкаШапкиАбсолютная=Ложь) Экспорт
	
	СкидкиНаценкиСервер.РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти, СкидкаШапкиАбсолютная);
	
КонецПроцедуры // РассчитатьСкидкиСтроки()

// Получение списка причин обращения таблицей или менеджером временных таблиц.
Функция ПолучитьПричиныОбращенийДокумента(Документ, ВернутьМенеджер = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	Если ВернутьМенеджер Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонецЕсли;
	
	
	Запрос.Текст =
	СтрШаблон(
	"ВЫБРАТЬ
	|	ЗаявкаНаРемонтПричиныОбращения.ИдентификаторПричиныОбращения КАК ИдентификаторПричины,
	|	ЗаявкаНаРемонтПричиныОбращения.ПричинаОбращения,
	|	ЗаявкаНаРемонтПричиныОбращения.ПричинаОбращенияСодержание,
	|	ЗаявкаНаРемонтПричиныОбращения.ТипПричиныОбращения,
	|	ЗаявкаНаРемонтПричиныОбращения.ВидРемонтаПричиныОбращения
	|%1
	|ИЗ
	|	Документ.ЗаявкаНаРемонт.ПричиныОбращения КАК ЗаявкаНаРемонтПричиныОбращения
	|ГДЕ
	|	ЗаявкаНаРемонтПричиныОбращения.Ссылка = &Ссылка",
	?(ВернутьМенеджер, "ПОМЕСТИТЬ ПричиныОбращений", ""));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат ?(ВернутьМенеджер, МенеджерВременныхТаблиц, РезультатЗапроса.Выгрузить());
	
КонецФункции

// Определяет есть ли на введенный на основании СРЗ.
//
// Параметры:
//  Ссылка - ДокументСсылка.ЗаявкаНаРемонт - Ссылка на проверяемую заявку;
//  СводныйРемонтныйЗаказ (исходящий параметр) - ДокументСсылка.СводныйРемонтныйЗаказ - Найденный СРЗ.
//
// Возвращаемое значение. Булево.
// Истина - СРЗ найден, Ложь - нет.
//
Функция ЕстьСводныйРемонтныйЗаказ(Ссылка, СводныйРемонтныйЗаказ = Неопределено) Экспорт
	
	Если Ссылка.Пустая() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СводныйРемонтныйЗаказ.Ссылка
	|ИЗ
	|	Документ.СводныйРемонтныйЗаказ КАК СводныйРемонтныйЗаказ
	|ГДЕ
	|	СводныйРемонтныйЗаказ.ДокументОснование = &ДокументОснование
	|	И СводныйРемонтныйЗаказ.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СводныйРемонтныйЗаказ = Выборка.Ссылка;
		Возврат Истина;
		
	КонецЕсли;
	
	СводныйРемонтныйЗаказ = Неопределено;
	Возврат Ложь;
	
КонецФункции

Функция ЕстьЗаказНаряды(ЗаявкаНаРемонт, ТолькоВыполненные = Истина) Экспорт
	
	// Определим наличие закрытых ЗН на основании ЗнР.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СводныйРемонтныйЗаказ.Ссылка КАК СводныйРемонтныйЗаказ
	               |ПОМЕСТИТЬ СписокСРЗ
	               |ИЗ
	               |	Документ.СводныйРемонтныйЗаказ КАК СводныйРемонтныйЗаказ
	               |ГДЕ
	               |	СводныйРемонтныйЗаказ.ДокументОснование = &ЗаявкаНаРемонт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ЗаказНаряд.Ссылка КАК Ссылка,
	               |	ЗаказНаряд.Состояние КАК Состояние
	               |ИЗ
	               |	СписокСРЗ КАК СписокСРЗ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд КАК ЗаказНаряд
	               |		ПО СписокСРЗ.СводныйРемонтныйЗаказ = ЗаказНаряд.СводныйРемонтныйЗаказ";
	Запрос.УстановитьПараметр("ЗаявкаНаРемонт", ЗаявкаНаРемонт);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ТолькоВыполненные И Выборка.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен
			ИЛИ Выборка.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
			Возврат Истина;
		ИначеЕсли НЕ ТолькоВыполненные Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ЕстьЗаказНаряды()

Функция ПолучитьПоказателиЗапасов(ТекущаяЗаявкаНаРемонт, ТаблицаТоваров, ДопПараметры=Неопределено) Экспорт
	
	ПоСкладу = ПолучитьЗначениеПараметраСтруктуры(ДопПараметры, "ПоСкладу");
	ЗаказПокупателя = ПолучитьЗначениеПараметраСтруктуры(ДопПараметры, "Заказ");
	ТипКоличества = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
	
	ПоказателиЗапасов = Новый ТаблицаЗначений;
	ПоказателиЗапасов.Колонки.Добавить("Номенклатура",               Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ПоказателиЗапасов.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ПоказателиЗапасов.Колонки.Добавить("СкладКомпании",              Новый ОписаниеТипов("СправочникСсылка.СкладыКомпании"));
	ПоказателиЗапасов.Колонки.Добавить("ЕдиницаИзмерения",           Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ПоказателиЗапасов.Колонки.Добавить("ИдентификаторСтроки",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	ПоказателиЗапасов.Колонки.Добавить("Заказано",                   ТипКоличества);
	ПоказателиЗапасов.Колонки.Добавить("КоличествоОстаток",          ТипКоличества);
	ПоказателиЗапасов.Колонки.Добавить("ЗаказаноПодЗнР",             ТипКоличества);
	ПоказателиЗапасов.Колонки.Добавить("ЗарезервированоПодЗнР",      ТипКоличества);
	ПоказателиЗапасов.Колонки.Добавить("Зарезервировано",            ТипКоличества);
	ПоказателиЗапасов.Колонки.Добавить("Коэффициент",                ТипКоличества);
	ПоказателиЗапасов.Колонки.Добавить("ОстатокНаСкладе",            ТипКоличества);
	ПоказателиЗапасов.Колонки.Добавить("НомерСтроки",            	 ТипКоличества);

	ЕстьНомерСтроки = ТипЗнч(ТаблицаТоваров) = Тип("ДанныеФормыКоллекция") Или  ЕстьРеквизит(ТаблицаТоваров, "НомерСтроки");
	
	//Индексы
	ПоказателиЗапасов.Индексы.Добавить("Номенклатура");
	ПоказателиЗапасов.Индексы.Добавить("ХарактеристикаНоменклатуры");
	
	// В состоянии отклонено нет необходимости в указании остатков.
	Если ТекущаяЗаявкаНаРемонт.Состояние = Перечисления.СостояниеЗаявкиНаРемонт.Отклонено Тогда
		Возврат ПоказателиЗапасов;
	КонецЕсли;
	
	ТаблицаФормы = (ТипЗнч(ТаблицаТоваров) = Тип("ДанныеФормыКоллекция"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ТекстОтбораЗаказПокупателя = "";
	Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		ТекстОтбораЗаказПокупателя = " (Заказ=&ВыбЗаказПокупателя) ИЛИ ";
		Запрос.УстановитьПараметр("ВыбЗаказПокупателя", ЗаказПокупателя);
	КонецЕсли;
	
	//ОтборПоСтроке = Ложь;
	ТекстОтбора = "";
	ТекстПараметров = "";
	
	// Таблица строк
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗаявкаНаРемонтТовары.Номенклатура,
	|	ЗаявкаНаРемонтТовары.ХарактеристикаНоменклатуры,
	|	ЗаявкаНаРемонтТовары.СкладКомпании КАК СкладКомпании
	|ПОМЕСТИТЬ ЗаявкаНаРемонтТовары
	|ИЗ
	|	&Товары КАК ЗаявкаНаРемонтТовары
	|" + ТекстОтбора +"
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкаНаРемонтТовары.Номенклатура КАК Номенклатура,
	|	ЗаявкаНаРемонтТовары.СкладКомпании КАК СкладКомпании,
	|	ЗаявкаНаРемонтТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ
	|	ТаблицаТоваров
	|ИЗ
	|	ЗаявкаНаРемонтТовары КАК ЗаявкаНаРемонтТовары
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СкладКомпании
	|;
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Регистратор
	|ПОМЕСТИТЬ
	|	ТаблицаЗаказов
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.ДокументОснование = &ЗаявкаНаРемонт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ДокументОснованиеЗаявкиНаРемонт
	|;
	|
	|ВЫБРАТЬ
	|	ОбъединеннаяТаблица.Номенклатура КАК Номенклатура,
	|	ОбъединеннаяТаблица.СкладКомпании КАК СкладКомпании,
	|	ОбъединеннаяТаблица.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ОбъединеннаяТаблица.ПеремещеноСоСклада) КАК ПеремещеноСоСклада,
	|	СУММА(ОбъединеннаяТаблица.Зарезервировано) КАК Зарезервировано,
	|	СУММА(ОбъединеннаяТаблица.ОстатокНаСкладе)+СУММА(ОбъединеннаяТаблица.Зарезервировано) КАК КоличествоОстаток,
	|	СУММА(ОбъединеннаяТаблица.ОстатокНаСкладе) КАК ОстатокНаСкладе
	|ИЗ(
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Номенклатура,
	|		ТаблицаТоваров.СкладКомпании,
	|		ТаблицаТоваров.ХарактеристикаНоменклатуры,
	|		0 КАК ПеремещеноСоСклада,
	|		0 КАК Зарезервировано,
	|		0 КАК ОстатокНаСкладе
	|	ИЗ
	|		ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗаказыПокупателейОстатки.Номенклатура,
	|		ЗаказыПокупателейОстатки.СкладКомпании,
	|		ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	|		0,
	|		ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0),
	|		0
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(,
	|		"+ТекстОтбораЗаказПокупателя+"Заказ В (ВЫБРАТЬ ТаблицаЗаказов.Регистратор ИЗ ТаблицаЗаказов КАК ТаблицаЗаказов)
	|		"+?(ПоСкладу=Неопределено,"","И (СкладКомпании=&ПоСкладу)")+") КАК ЗаказыПокупателейОстатки
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ОстаткиТоваровКомпанииОстатки.Номенклатура,
	|		ОстаткиТоваровКомпанииОстатки.СкладКомпании,
	|		ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры,
	|		0,
	|		0,
	|		ОстаткиТоваровКомпанииОстатки.КоличествоОстаток-ОстаткиТоваровКомпанииОстатки.РезервОстаток
	|	ИЗ
	|		РегистрНакопления.ОстаткиТоваровКомпании.Остатки(, (СкладКомпании, Номенклатура, ХарактеристикаНоменклатуры) В 
	|			(ВЫБРАТЬ СкладКомпании, Номенклатура, ХарактеристикаНоменклатуры ИЗ ТаблицаТоваров КАК ТаблицаТоваров)) КАК ОстаткиТоваровКомпанииОстатки) КАК ОбъединеннаяТаблица
	|СГРУППИРОВАТЬ ПО
	|	ОбъединеннаяТаблица.Номенклатура,
	|	ОбъединеннаяТаблица.СкладКомпании,
	|	ОбъединеннаяТаблица.ХарактеристикаНоменклатуры
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Если ТаблицаФормы Тогда
		Запрос.УстановитьПараметр("Товары", ТаблицаТоваров.Выгрузить(, "Номенклатура, ХарактеристикаНоменклатуры, СкладКомпании"));
	Иначе
		Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	КонецЕсли;
	Запрос.УстановитьПараметр("ЗаявкаНаРемонт", ТекущаяЗаявкаНаРемонт.Ссылка);
	ДокументОснование = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопПараметры, "ДокументОснование", Неопределено);
	Запрос.УстановитьПараметр("ДокументОснованиеЗаявкиНаРемонт", ДокументОснование);
	Запрос.УстановитьПараметр("Контрагент",     ТекущаяЗаявкаНаРемонт.Контрагент);
	Запрос.УстановитьПараметр("ПоСкладу",       ПоСкладу);
	
	УстановитьПривилегированныйРежим(Истина);
	ПоказателиПоСкладам = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ТаблицаТоваровБезСкладов
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|ВЫБРАТЬ
	|	ОбъединенныйЗапрос.Номенклатура,
	|	ОбъединенныйЗапрос.ХарактеристикаНоменклатуры,
	|	СУММА(ОбъединенныйЗапрос.Заказано) КАК Заказано,
	|	СУММА(ОбъединенныйЗапрос.ЗаказаноПодЗнР) КАК ЗаказаноПодЗнР,
	|	СУММА(ОбъединенныйЗапрос.ЗарезервированоПодЗнР) КАК ЗарезервированоПодЗнР
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ЗаказыПокупателейОстатки.ЗаказаноОстаток-ЗаказыПокупателейОстатки.РезервОстаток КАК Заказано,
	|		0 КАК ЗаказаноПодЗнР,
	|		0 КАК ЗарезервированоПодЗнР
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(,
	|		"+ТекстОтбораЗаказПокупателя+"Заказ В (ВЫБРАТЬ ТаблицаЗаказов.Регистратор ИЗ ТаблицаЗаказов КАК ТаблицаЗаказов)) КАК ЗаказыПокупателейОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыПокупателейОстатки.Номенклатура,
	|		ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	|		0,
	|		ЗаказыПокупателейОстатки.ЗаказаноОстаток-ЗаказыПокупателейОстатки.РезервОстаток,
	|		ЗаказыПокупателейОстатки.РезервОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(,
	|		"+ТекстОтбораЗаказПокупателя+"Заказ В (ВЫБРАТЬ ТаблицаЗаказов.Регистратор ИЗ ТаблицаЗаказов КАК ТаблицаЗаказов)) КАК ЗаказыПокупателейОстатки) КАК ОбъединенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ОбъединенныйЗапрос.Номенклатура,
	|	ОбъединенныйЗапрос.ХарактеристикаНоменклатуры
	|	";
	
	ОбщиеПоказатели = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		
		СтруктураПоиска = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаТоваров.Номенклатура, СтрокаТоваров.ХарактеристикаНоменклатуры);
		
		Заказано              = 0;
		ЗаказаноПодЗнР        = 0;
		ЗарезервированоПодЗнР = 0;
		
		СтрокиЗаказов = ОбщиеПоказатели.НайтиСтроки(СтруктураПоиска);
		Если НЕ СтрокиЗаказов.Количество() = 0 Тогда
			ПерваяСтрока = СтрокиЗаказов[0];
			Заказано              = ПерваяСтрока.Заказано;
			ЗаказаноПодЗнР        = ПерваяСтрока.ЗаказаноПодЗнР;
			ЗарезервированоПодЗнР = ПерваяСтрока.ЗарезервированоПодЗнР;
		КонецЕсли;
		
		Если ПоСкладу = Неопределено Тогда
			СтруктураПоиска.Вставить("СкладКомпании", СтрокаТоваров.СкладКомпании);
		Иначе
			СтруктураПоиска.Вставить("СкладКомпании", ПоСкладу);
		КонецЕсли;
		
		РесурсыСтроки  = ПоказателиПоСкладам.НайтиСтроки(СтруктураПоиска);
		Если РесурсыСтроки.Количество()=0 Тогда
			
			Если ПоСкладу = Неопределено ИЛИ СтрокаТоваров.СкладКомпании = ПоСкладу Тогда
				НоваяСтрока = ПоказателиЗапасов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
				НоваяСтрока.Заказано              = Заказано;
				НоваяСтрока.ЗаказаноПодЗнР        = ЗаказаноПодЗнР;
				НоваяСтрока.ЗарезервированоПодЗнР = ЗарезервированоПодЗнР;
				НоваяСтрока.ИдентификаторСтроки   = СтрокаТоваров.ПолучитьИдентификатор();
			КонецЕсли;
			
		Иначе
			
			СтрокаРесурсов = РесурсыСтроки[0];
			Количество = СтрокаТоваров.Количество*СтрокаТоваров.Коэффициент;
			
			Если ПоСкладу = Неопределено ИЛИ СтрокаТоваров.СкладКомпании = ПоСкладу Тогда
				НоваяСтрока = ПоказателиЗапасов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРесурсов);
				НоваяСтрока.ЕдиницаИзмерения      = СтрокаТоваров.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент           = СтрокаТоваров.Коэффициент;
				НоваяСтрока.Заказано              = Заказано;
				НоваяСтрока.ЗаказаноПодЗнР        = ЗаказаноПодЗнР;
				НоваяСтрока.ЗарезервированоПодЗнР = ЗарезервированоПодЗнР;
				Если ЕстьНомерСтроки Тогда
				 	НоваяСТрока.НомерСтроки 		 = СтрокаТоваров.НомерСтроки;
    			КонецЕсли;
				Если ТаблицаФормы Тогда
					НоваяСтрока.ИдентификаторСтроки = СтрокаТоваров.ПолучитьИдентификатор();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоказателиЗапасов;
	
КонецФункции //ПолучитьПоказателиЗапасов()

// Получает ссылку на автомобиль или модель если автомобиль не указан.
//
// Параметры:
//  Документ - ДокументСсылка.ЗаявкаНаРемонт - Документ из которого необходимо получить автомобиль.
//
// Возвращаемое значение:
//  СправочникСсылка.Автомобили, СправочникСсылка.Модели.
//
Функция АвтомобильДокумента(Документ) Экспорт
	
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Автомобиль, Модель");
	
	Если ЗначениеЗаполнено(ДанныеДокумента.Автомобиль) Тогда
		Возврат ДанныеДокумента.Автомобиль;
	КонецЕсли;
	
	Возврат ДанныеДокумента.Модель;
	
КонецФункции // АвтомобильДокумента()

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
	ПолучателиSMS.Очистить();
	
	Если ТипЗнч(ПредметСообщения) = Тип("ДокументСсылка.ЗаявкаНаРемонт") Тогда
		ПредметПисьма = ПредметСообщения;
	Иначе
		ПредметПисьма = ПредметСообщения.Предмет;
	КонецЕсли;
	
	Если ТипЗнч(ПредметПисьма) = Тип("ДокументСсылка.ЗаявкаНаРемонт") Тогда
		
		ДанныеПредмета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ПредметПисьма,
				"ПредставлениеТелефона, Заказчик");
		
		Если ЗначениеЗаполнено(ДанныеПредмета.ПредставлениеТелефона) Тогда
			НомерТелефона = ДанныеПредмета.ПредставлениеТелефона;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(НомерТелефона) Тогда
			НоваяСтрока = ПолучателиSMS.Добавить();
			НоваяСтрока.НомерТелефона = НомерТелефона;
			НоваяСтрока.Контакт = ДанныеПредмета.Заказчик;
			НоваяСтрока.Представление = СокрЛП(ДанныеПредмета.Заказчик);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ТипЦенРабот");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ВидРемонта");
	//ОбязательныеРеквизиты.Добавить("Автомобиль");
	ОбязательныеРеквизиты.Добавить("Цех");
	
	Если Автосервис.ЭтоКомплектацияСборкаАвтомобиля(Объект.ВидРемонта) Тогда
		ОбязательныеРеквизиты.Добавить("Заказчик");
	КонецЕсли;
	
	// Товары
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	// Автоработы
	ОбязательныеРеквизиты.Добавить("Автоработы.Авторабота");
	ОбязательныеРеквизиты.Добавить("Автоработы.ИдентификаторРаботы");
	ОбязательныеРеквизиты.Добавить("Автоработы.Количество");
	
	// ВспомогательныеАвтоработы
	ОбязательныеРеквизиты.Добавить("ВспомогательныеАвтоработы.Авторабота");
	ОбязательныеРеквизиты.Добавить("ВспомогательныеАвтоработы.ИдентификаторРаботы");
	
	// Исполнители
	ОбязательныеРеквизиты.Добавить("Исполнители.ИдентификаторРаботы");
	ОбязательныеРеквизиты.Добавить("Исполнители.Исполнитель");
	ОбязательныеРеквизиты.Добавить("Исполнители.Цех");
	ОбязательныеРеквизиты.Добавить("Исполнители.Процент");
	
	// ПричиныОбращения
	ОбязательныеРеквизиты.Добавить("ПричиныОбращения.ПричинаОбращения");
	ОбязательныеРеквизиты.Добавить("ПричиныОбращения.ПричинаОбращенияСодержание");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	УникальныеТовары.Добавить("ИдентификаторПричиныОбращения");
	
	// Уникальные поля таблицы работ
	УникальныеАвтоработы = Новый Массив;
	УникальныеАвтоработы.Добавить("Авторабота");
	УникальныеАвтоработы.Добавить("ИдентификаторПричиныОбращения");
	
	// Уникальные поля таблицы причин обращения
	УникальныеПричиныОбращения = Новый Массив;
	УникальныеПричиныОбращения.Добавить("ИдентификаторПричиныОбращения");
	
	// Уникальные поля таблицы исполнителей
	УникальныеИсполнители = Новый Массив;
	УникальныеИсполнители.Добавить("ИдентификаторРаботы");
	УникальныеИсполнители.Добавить("Исполнитель");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Товары"       , УникальныеТовары);
	УникальныеРеквизиты.Вставить("Автоработы"   , УникальныеАвтоработы);
	УникальныеРеквизиты.Вставить("ПричиныОбращения"   , УникальныеПричиныОбращения);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("Цех",                   Ложь);
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Инициализируем параметры обработки действия с объектом
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	Если ЕстьРеквизит(Объект, , "Товары") Тогда
		ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ПараметрыДействия.Вставить("РезервыДляКонтрагента", Объект.Контрагент);
		КонецЕсли;
		
		ПараметрыДействия.Вставить("ИмяСкладаВСтроке", "СкладКомпании");
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, , "Автоработы") Тогда
		ПараметрыДействия.Вставить("ОбъектЗаполненАвтоработами", Объект.Автоработы.Количество() > 0);
	КонецЕсли;
	
	Если НЕ ПараметрыДействия.Свойство("НеРассчитыватьСкидки") Тогда
		ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Объект.ВидРемонта.ТипРемонта <> Перечисления.ТипыРемонта.Платный);
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ИмяРеквизитаСкидкаНаценка"         , "СкидкаНаценка");
	ПараметрыДействия.Вставить("ИмяРеквизитаЗначениеСкидкиНаценки" , "ЗначениеСкидкиНаценки");
	ПараметрыДействия.Вставить("ИмяРеквизитаСуммаСкидкиНаценки"    , "СуммаСкидкиНаценки");
	ПараметрыДействия.Вставить("СкидкаНаРаботы"                    , Ложь);
	
	// Возвращаем сформированную структуру параметров
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ИмяРеквизитаСкидкаНаценка"         , "СкидкаНаценкаРаботы");
	ПараметрыДействия.Вставить("ИмяРеквизитаЗначениеСкидкиНаценки" , "ЗначениеСкидкиНаценкиРабот");
	ПараметрыДействия.Вставить("ИмяРеквизитаСуммаСкидкиНаценки"    , "СуммаСкидкиНаценкиРабот");
	ПараметрыДействия.Вставить("СкидкаНаРаботы"                    , Истина);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("НеСбрасыватьПризнакПересчетаЦен");
	
	// Вызываем общий обработчик действия
	ОбработкаТабличнойЧастиАвтоработы.ПерезаполнитьЦеныТабличнойЧасти(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ПараметрыДействияРаботы = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦенРабот", ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбъектЗаполнен", ИСТИНА));
	
	Если Не Автосервис.ЭтоКомплектацияСборкаАвтомобиля(Объект.ВидРемонта) Тогда
		
		СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "Товары");
		СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействияРаботы, "Автоработы");
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦенРабот", ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбъектЗаполнен", ИСТИНА));
	
	УстановитьСтавкуНДСДляРабот(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦенРабот", ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбъектЗаполнен", ИСТИНА));
	
	УстановитьСтавкуНДСДляРабот(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	Если ЕстьРеквизит(Объект, "Заказчик") Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Заказчик) Тогда
			Объект.Заказчик = Объект.Контрагент;
			ЗаказчикПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦенРабот", ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбъектЗаполненАвтоработами", ИСТИНА));
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
	Автосервис.УстановитьНормочас(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Заказчик".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЗаказчикПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// При вводе на основании События оставим номер, указанный в Событии.
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ПодставлятьНомерТелефона", Истина) Тогда
		
		// Заполняет системные поля телефона и электронной почты в документе
		УправлениеКонтактнойИнформациейАльфаАвто.ЗаполнитьКонтактнуюИнформациюВДокументе(
			Объект,
			Объект.Заказчик,
			ПараметрыДействия);
		
	КонецЕсли;
	
	УстановитьГарантийногоПлательщика(Объект, ПараметрыДействия);
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	Если (ПараметрыДействия.Свойство("НеобходимоПерезаполнитьАвтомобиль") И ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеобходимоПерезаполнитьАвтомобиль", Ложь))
		ИЛИ НЕ (ПараметрыДействия.Свойство("НеобходимоПерезаполнитьАвтомобиль")) ИЛИ НЕ ЗначениеЗаполнено(Объект.Автомобиль) 
		ИЛИ Объект.Заказчик = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Объект.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин, Объект.Дата) Тогда
			Если НЕ ЗначениеЗаполнено(Объект.Автомобиль) Тогда
				ПараметрыДействия.Вставить("ОчищатьПоляАвтомобиля", Истина);
			КонецЕсли;
			АвтомобильПриИзменении(Объект, ПараметрыДействия);
	Иначе
		Владелец = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Объект.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин, Объект.Дата);
		ПараметрыДействия.Вставить("ВладелецАвтомобиля", ?(ЗначениеЗаполнено(Владелец), Владелец, Справочники.Контрагенты.ПустаяСсылка()));
		ПараметрыДействия.НеобходимоПерезаполнитьАвтомобиль = Истина;
	КонецЕсли;
	
	АвтомобилиКонтрагента = Справочники.Контрагенты.АвтомобилиКонтрагента(Объект.Заказчик, Объект.Дата);
	ПараметрыДействия.Вставить("АвтомобилиКонтрагента", АвтомобилиКонтрагента);
	
КонецПроцедуры // ЗаказчикПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автомобиль".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобильПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ОчищатьПоляАвтомобиля = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОчищатьПоляАвтомобиля", Ложь);
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Автомобиль = Объект.Автомобиль;
	
	Если ЗначениеЗаполнено(Автомобиль) И НЕ ОчищатьПоляАвтомобиля Тогда
		Владелец = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин, Объект.Дата); 
		
		Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
			Владелец = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(Владелец)) И (НЕ Объект.Заказчик = Владелец) Тогда
			Если (ПараметрыДействия.Свойство("НеобходимоПерезаполнитьЗаказчика") И ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеобходимоПерезаполнитьЗаказчика", Ложь))
				ИЛИ НЕ (ПараметрыДействия.Свойство("НеобходимоПерезаполнитьЗаказчика")) ИЛИ НЕ ЗначениеЗаполнено(Объект.Заказчик) Тогда
					Объект.Заказчик = Владелец;
					ЗаказчикПриИзменении(Объект, ПараметрыДействия);
			Иначе
				ПараметрыДействия.НеобходимоПерезаполнитьЗаказчика = Истина;
				ПараметрыДействия.Вставить("ВладелецАвтомобиля", Владелец);
			КонецЕсли;
		КонецЕсли;
		
		Объект.ГодВыпуска          = Объект.Автомобиль.ГодВыпуска;
		Объект.VIN                 = Объект.Автомобиль.VIN;
		Объект.Модель              = Объект.Автомобиль.Модель;
		Объект.ВариантКомплектации = Объект.Автомобиль.ВариантКомплектации;
		
		// заполним пробег
		Объект.Пробег = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Объект.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег, Объект.Дата);
		
		// заполним гос номер
		Объект.ГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Объект.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер, Объект.Дата);
		
	Иначе
		
		Объект.VIN      = "";
		Объект.ГосНомер = "";
		Объект.Пробег   = 0;
		
		// если произошло изменение заказчика
		Если ОчищатьПоляАвтомобиля Тогда
			Объект.Модель = Справочники.Модели.ПустаяСсылка();
			Объект.ВариантКомплектации = Справочники.ВариантыКомплектации.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦенРабот", ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбъектЗаполненАвтоработами", ИСТИНА));
	
	// получим сервисные компании
	СервисныеКомпании = АвтомобилиСервер.ПроверитьСервиснуюКампанию(Объект.Автомобиль, Объект.Дата, Истина, Объект.Ссылка);
	
	ЕстьАктивныеСервисныеКампании = Ложь; ОткрытьСписок = Ложь;
	
	Для Каждого СтрокаСК Из СервисныеКомпании Цикл
		Если НЕ (ЗначениеЗаполнено(СтрокаСК.ДатаВыполнения) ИЛИ ЗначениеЗаполнено(СтрокаСК.ДокументВыполнения)) Тогда
			ЕстьАктивныеСервисныеКампании = Истина;
			ОткрытьСписок = (СтрокаСК.СервиснаяКампания <> Объект.СервиснаяКампания);
			Если ОткрытьСписок Тогда Прервать; КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьАктивныеСервисныеКампании И ОткрытьСписок Тогда
		ПараметрыДействия.Вставить("ОткрытьСписокСервисныхКампаний", Истина);
	КонецЕсли;
	
КонецПроцедуры // ЗаказчикПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цех".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЦехПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Цех) И НЕ ЗначениеЗаполнено(Объект.Мастер) Тогда
		Объект.Мастер = Объект.Цех.Мастер;
		МастерПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦенРабот", ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбъектЗаполнен", ИСТИНА));
	
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "Автоработы");
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Мастер".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура МастерПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Мастер".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КарточкаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.КарточкаПриИзменении(Объект, ПараметрыДействия);
	
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "Автоработы");
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Мастер".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура МаркетинговаяПрограммаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// получим значение права
	СпособВыбораСкидки = ПраваИНастройкиПользователя.Значение("СпособВыбораСкидки", Объект);
	
	Если НЕ(СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.СкидкиЗапрещены
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.АвтоматическиеСкидки) Тогда
		
		Если ЗначениеЗаполнено(Объект.МаркетинговаяПрограмма.СкидкаНаценка) Тогда
			Объект.СкидкаНаценка = Объект.МаркетинговаяПрограмма.СкидкаНаценка;
			
			СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.МаркетинговаяПрограмма.СкидкаНаценкаРаботы) Тогда
			Объект.СкидкаНаценкаРаботы = Объект.МаркетинговаяПрограмма.СкидкаНаценкаРаботы;
			
			СкидкаНаценкаРаботыПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "ВидРемонта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВидРемонтаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	БесплатныйВидРемонта = Автосервис.ЭтоБесплатный(Объект.ВидРемонта);
	
	Если ЗначениеЗаполнено(Объект.ВидРемонта) Тогда
		Если БесплатныйВидРемонта Тогда
			Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
				Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
				КонтрагентПриИзменении(Объект, ПараметрыДействия);
			КонецЕсли;
			Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов) Тогда
				Объект.ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
				ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
			КонецЕсли;
		КонецЕсли;
		
		Автосервис.УстановитьНормочас(Объект, ПараметрыДействия);
		
		Если (ЗначениеЗаполнено(Объект.ВидРемонта)
			И БесплатныйВидРемонта)
			ИЛИ НЕ ЗначениеЗаполнено(Объект.Заказчик) Тогда
			ПараметрыДействия.Вставить("НеПодставлятьКонтрагентаИзЗаказчика", Истина);
		КонецЕсли;
		УстановитьГарантийногоПлательщика(Объект, ПараметрыДействия);
		
		ПараметрыДействия.Вставить("ТребуетсяУстановкаЦенРабот", ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбъектЗаполненАвтоработами", ИСТИНА));
		ПараметрыДействия.Вставить("ВидРемонтаЕстьРаботыПоУмолчанию", Объект.ВидРемонта.Автоработы.Количество() > 0);
		
	КонецЕсли;
	
	Если БесплатныйВидРемонта Тогда
		
		// Почистим скидки и сопутствующие реквизиты
		Объект.Карточка               = Справочники.Карточки.ПустаяСсылка();
		Объект.МаркетинговаяПрограмма = Справочники.МаркетинговыеПрограммы.ПустаяСсылка();
		Объект.СкидкаНаценка          = Справочники.ТипыСкидок.ПустаяСсылка();
		Объект.СкидкаНаценкаРаботы    = Справочники.ТипыСкидок.ПустаяСсылка();
		
		Для Каждого Строка Из Объект.Товары Цикл
			Строка.СкидкаНаТовар = Справочники.ТипыСкидок.ПустаяСсылка();
			Строка.ПроцентСкидки = 0; Строка.СуммаСкидки = 0;
			Строка.ПроцентСкидкиСтроки = 0; Строка.СуммаСкидкиСтроки = 0;
			
			ТоварыСуммаПриИзменении(Объект, Строка);
		КонецЦикла;
		
		Для Каждого Строка Из Объект.Автоработы Цикл
			Строка.СкидкаНаТовар = Справочники.ТипыСкидок.ПустаяСсылка();
			Строка.ПроцентСкидки = 0; Строка.СуммаСкидки = 0;
			Строка.ПроцентСкидкиСтроки = 0; Строка.СуммаСкидкиСтроки = 0;
			
			АвтоработыСуммаПриИзменении(Объект, Строка);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 ИЛИ Объект.Автоработы.Количество() > 0 Тогда
		
		ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата);
		
		ОсвобожденОтНДС = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОсвобожденОтНДС", Ложь)
						  ИЛИ ПараметрыНДС.ОсвобожденОтНДС;

		
		СтавкаБезНДС = Справочники.СтавкиНДС.БезНДС;
		
		Если НЕ Объект.ВидРемонта.Пустая() Тогда
			
			ВидРемонтаОсвобожденОтНДС = ОбщегоНазначения
				.ЗначенияРеквизитовОбъекта(Объект.ВидРемонта, "ОсвобожденОтНДС,ОсвобожденОтНДСРаботы");
			
		Иначе
			
			ВидРемонтаОсвобожденОтНДС = Новый Структура("ОсвобожденОтНДС,ОсвобожденОтНДСРаботы", Ложь, Ложь);
			
		КонецЕсли;
		
		ПараметрыДействияДокумента = ПолучитьПараметрыДействия(Объект);
		
		// Блокировка перерсчета скидок построчно
		ПересчитатьСкидки = Ложь;
		Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействияДокумента, "НеРассчитыватьСкидки", Ложь) Тогда
			ПересчитатьСкидки = Истина;
			ПараметрыДействияДокумента.Вставить("НеРассчитыватьСкидки", Истина);
		КонецЕсли;
		
		Для Каждого Строка Из Объект.Товары Цикл
			Строка.СтавкаНДС = ?(ОсвобожденОтНДС ИЛИ ВидРемонтаОсвобожденОтНДС.ОсвобожденОтНДС, 
				СтавкаБезНДС,
				РаботаСоСтавкамиНДССервер.СтавкаНДСНоменклатуры(ПараметрыНДС, Строка.Номенклатура)
			);
			
			ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействияДокумента);
			
		КонецЦикла;
		
		Для Каждого Строка Из Объект.Автоработы Цикл
			Строка.СтавкаНДС = ?(ОсвобожденОтНДС ИЛИ ВидРемонтаОсвобожденОтНДС.ОсвобожденОтНДСРаботы, 
				СтавкаБезНДС,
				РаботаСоСтавкамиНДССервер.СтавкаНДСНоменклатуры(ПараметрыНДС, Строка.Авторабота)
			);
			
			АвтоработыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействияДокумента);
			
		КонецЦикла;		
		// Пересчитаем скидки
		Если ПересчитатьСкидки Тогда
			ПараметрыДействияДокумента.Удалить("НеРассчитыватьСкидки");
			ПараметрыДокумента = ПолучитьПараметрыДействия(Объект);
			ЗаполнитьЗначенияСвойств(ПараметрыДействияДокумента, ПараметрыДокумента, 
				"ИмяРеквизитаСкидкаНаценка,ИмяРеквизитаЗначениеСкидкиНаценки,ИмяРеквизитаСуммаСкидкиНаценки,СкидкаНаРаботы");
			СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействияДокумента);
			ПараметрыДействияДокумента  = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействияДокумента);
			СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействияДокумента, "Автоработы");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Мастер".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенРаботПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ИзменятьВалюту = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИзменятьВалютуИзТипаЦен", Истина);
	
	Если ИзменятьВалюту И ЗначениеЗаполнено(Объект.ТипЦенРабот.ВалютаЦены)
		И (Объект.ТипЦенРабот.ВалютаЦены <> Объект.ВалютаДокумента)
		И ПраваИНастройкиПользователя.Значение("ИзменятьВалютуПоКатегорииЦен", Объект) Тогда
		
		Объект.ВалютаДокумента = Объект.ТипЦенРабот.ВалютаЦены;
		ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦенРабот", ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОбъектЗаполнен", ИСТИНА));
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Мастер".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкаНаценкаРаботыПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	Для Каждого Строка Из Объект.Автоработы Цикл
		Строка.ЗначениеСкидкиШапкиИзменено = Ложь;
	КонецЦикла;
	
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия, "Автоработы");
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Мастер".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Для Каждого Строка Из Объект.Товары Цикл
		Строка.ЗначениеСкидкиШапкиИзменено = Ложь;
	КонецЦикла;
	
	ОбработкаРеквизитовДокументаСервер.СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Состояние".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СостояниеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если Объект.Состояние = Перечисления.СостояниеЗаявкиНаРемонт.Отклонено Тогда
		ПараметрыДействия.Вставить("ЗапроситьПричинуОтказа", Истина);
	Иначе
		Объект.ПричинаОтказаОтОбслуживания = Справочники.ПричиныОтказаОтОбслуживания.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Нормочас".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура НормочасПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.Нормочас) Тогда
		Возврат;
	КонецЕсли;
	
	// Получим цену нормочаса	
	ЦенаНормочаса = ЦенообразованиеСервер.ПолучитьЦенуНормочаса(Объект.Нормочас, Объект.Дата, Объект.ТипЦенРабот);
	Если ЦенаНормочаса.ЦенаБезСкидкиНаценки = 1 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выбран нормочас с ценой 1. Пересчет цен не будет выполнен.'"), Объект.Ссылка, "Нормочас");
		Возврат;		
	КонецЕсли;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦенРабот", Истина);
	
КонецПроцедуры // ВидРемонтаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Строка.СкладКомпании) Тогда
		
		СкладКомпанииПраво = ПраваИНастройкиПользователя.Значение("ОсновнойСкладКомпании");
		
		// Проверим соответствие организации и склада
		Если Объект.Автор.Организация = СкладКомпанииПраво.Организация Тогда
			Строка.СкладКомпании = СкладКомпанииПраво;
		КонецЕсли;
		
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	УстановитьПричинуОбращения(Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дельнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если (Строка.СуммаСкидкиСтроки > 0) И (Объект.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный) Тогда
		Строка.СуммаСкидкиСтроки = 0;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если (Строка.СуммаСкидки > 0) И (Объект.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный) Тогда
		Строка.СуммаСкидки = 0;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Скидка на товар" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если (Объект.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный) Тогда
		Строка.СкидкаНаТовар = Справочники.ТипыСкидок.ПустаяСсылка();
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если (Строка.ПроцентСкидки > 0) И (Объект.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный) Тогда
		Строка.ПроцентСкидки = 0;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если (Строка.ПроцентСкидкиСтроки > 0) И (Объект.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный) Тогда
		Строка.ПроцентСкидкиСтроки = 0;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтоработы

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыАвтоработаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.АвтоработаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыНормочасПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.НормочасПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыКоэффициентПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.КоэффициентПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиАвтоработы.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыПроцентСкидкиПриИзменении(Объект, Строка,ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.ПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.СуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыСкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.СкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.ПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыСуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.СуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыСпособРасчетаСтоимостиРаботыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия = ПолучитьПараметрыДействияСкидокДляАвторабот(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтоработы.РасчетСтоимостиРаботыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВспомогательныеАвтоработы

// Обработчик события возникающего при изменении данных реквизита в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ВспомогательныеАвтоработыАвтоработаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПустаяСтрока(Строка.ИдентификаторРаботы) Тогда
		Строка.ИдентификаторРаботы = Новый УникальныйИдентификатор();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		ОбъектПоискаВарианта = Объект.Автомобиль;
	Иначе
		ОбъектПоискаВарианта = Объект;
	КонецЕсли;
	
	Если ОбъектПоискаВарианта.ВариантКомплектации.Пустая() Тогда
		ФильтрНормыВремени = ОбъектПоискаВарианта.Модель;
	Иначе
		ФильтрНормыВремени = ОбъектПоискаВарианта.ВариантКомплектации;
	КонецЕсли;
	
	Строка.НормаВремени = ЦенообразованиеСервер.НормаВремениАвтоработы(Строка.Авторабота, ФильтрНормыВремени);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнители

// Обработчик события возникающего при изменении данных реквизита "Исполнитель" в таблице "Исполнители".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ИсполнителиИсполнительПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Строка.Цех) Тогда
		Если ЗначениеЗаполнено(Строка.Исполнитель.Цех) Тогда
			Строка.Цех = Строка.Исполнитель.Цех;
		Иначе
			Строка.Цех = Объект.Цех;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПричиныОбращения

// Обработчик события возникающего при изменении данных реквизита в таблице "Причины обращения".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ПричиныОбращенияПричинаОбращенияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.ВидРемонта) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ВидРемонта.Пустая() Тогда
		
		ВидРемонта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ПричинаОбращения, "ВидРемонта");
		
		Если ЗначениеЗаполнено(ВидРемонта) Тогда
			
			Объект.ВидРемонта = ВидРемонта;
			ВидРемонтаПриИзменении(Объект, ПараметрыДействия);
			ПараметрыДействия.Вставить("ИзменилсяВидРемонта", Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалыЗаказчика

// Обработчик события возникающего при изменении данных реквизита в таблице "Материалы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура МатериалыЗаказчикаНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// проверим а не набор ли у нас...
	Если Строка.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Набор Тогда
		ОбработкаТабличнойЧастиТовары.РазложитьНаборНаСтроки(Объект, Строка, ПараметрыДействия);
		Возврат;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ОбработатьИзменениеНоменклатура(Объект, Строка, ПараметрыДействия, "МатериалыЗаказчика");
	
	// Проверим, имеют ли смысл дельнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Материалы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура МатериалыЗаказчикаЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита в таблице "Материалы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура МатериалыЗаказчикаХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаявкаНаРемонт",
		"БланкЗаявки",
		НСтр("ru = 'Бланк заявки'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаявкаНаРемонт",
		"РабочаяЗаявка",
		НСтр("ru = 'Рабочая заявка'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "БланкЗаявки") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"БланкЗаявки",
			НСтр("ru = 'Бланк заявки'"),
			ПечатьБланкЗаявки(МассивОбъектов, ОбъектыПечати)
		);
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РабочаяЗаявка") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"РабочаяЗаявка",
			НСтр("ru = 'Рабочая заявка'"),
			ПечатьРабочаяЗаявка(МассивОбъектов, ОбъектыПечати)
		);
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "БланкЗаявки"
//
// Параметры:
//  МассивОбъектов - Массив    - массив объектов для формирования печатных форм
//  ОбъектыПечати  - Структура - список областьей печатной формы в разрезе документов
//
// Возвращаемое значение:
//  ТабличныйДокумент - возвращает сформированный табличный документ.
//
Функция ПечатьБланкЗаявки(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявкаНаРемонт_БланкЗаявки";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявкаНаРемонт.ПФ_MXL_БланкЗаявки");
		
		НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		
		// Вывод шапки документа
		ОбластьШапка.Параметры.НомерДок = НомерДляПечати;
		ОбластьШапка.Параметры.ДатаСоздания = Формат(Документ.Дата, "ДФ = дд.ММ.гггг");
		
		Если НЕ ЗначениеЗаполнено(Документ.Заказчик) Тогда
			ОбластьШапка.Параметры.ЗаказчикТелефоны = Документ.ПредставлениеТелефона;
			ОбластьШапка.Параметры.ЗаказчикПолноеНаименование = Документ.ОбращениеККлиенту;
		ИначеЕсли ТипЗнч(Документ.Заказчик) = Тип("СправочникСсылка.Контрагенты") Тогда
			ОбластьШапка.Параметры.Заказчик = Документ.Заказчик;
			ОбластьШапка.Параметры.ЗаказчикПолноеНаименование 
						= УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Заказчик);
			ОбластьШапка.Параметры.ЗаказчикАдресПочтовый      
						= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Заказчик, 
							Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, ТекущаяДатаСеанса());
			ОбластьШапка.Параметры.ЗаказчикТелефоны           
						= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Заказчик, 
							Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		Иначе
			ОбластьШапка.Параметры.ЗаказчикПолноеНаименование = СокрЛП(Документ.Заказчик);
			// ОбластьМакета.Параметры.ЗаказчикАдресПочтовый     = КонтактнаяИнформация;
			ОбластьШапка.Параметры.ЗаказчикТелефоны           = Документ.ПредставлениеТелефона;
		КонецЕсли; 
		Если ЗначениеЗаполнено(Документ.Автомобиль) Тогда
			МодельАвтомобиля =  Документ.Автомобиль.Модель;
			ОбластьШапка.Параметры.Модель = Документ.Автомобиль;
			ОбластьШапка.Параметры.АвтомобильМодель = Документ.Автомобиль.Наименование;
		ИначеЕсли ЗначениеЗаполнено(Документ.Модель) Тогда
			МодельАвтомобиля =  Документ.Модель;
			ОбластьШапка.Параметры.Модель = Документ.Модель;
			ОбластьШапка.Параметры.АвтомобильМодель = Документ.Модель.НаименованиеПолное;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(МодельАвтомобиля) И ЗначениеЗаполнено(МодельАвтомобиля.ФайлКартинки) Тогда
			
			Попытка
				АдресКартинки = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(МодельАвтомобиля.ФайлКартинки).СсылкаНаДвоичныеДанныеФайла;
				СхемаТС = Новый Картинка(ПолучитьИзВременногоХранилища(АдресКартинки), Ложь);
				ОбластьШапка.Рисунки.СхемаТС.Картинка = СхемаТС;
				ОбластьШапка.Рисунки.СхемаТС.РазмерКартинки = РазмерКартинки.Пропорционально;
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка заполнения картинки'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Документ.Автомобиль) Тогда
			Если ТипЗнч(Документ.Автомобиль)=Тип("СправочникСсылка.Автомобили") Тогда
				ОбластьШапка.Параметры.АвтомобильГосНомер   = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Документ.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер,Документ.Дата);
				ОбластьШапка.Параметры.АвтомобильКод        = Документ.Автомобиль.VIN;
				ОбластьШапка.Параметры.АвтомобильГодВыпуска = Формат(Документ.Автомобиль.ГодВыпуска, АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Документ));
				ОбластьШапка.Параметры.АвтомобильПробег     = СокрЛП(Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Документ.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег,Документ.Дата));
			КонецЕсли;
		Иначе
			ОбластьШапка.Параметры.АвтомобильГосНомер   = Документ.ГосНомер;
			ОбластьШапка.Параметры.АвтомобильКод        = Документ.VIN;
			ОбластьШапка.Параметры.АвтомобильГодВыпуска = Формат(Документ.ГодВыпуска, "ДФ=гггг");
			ОбластьШапка.Параметры.АвтомобильПробег     = Документ.Пробег;
		КонецЕсли; 
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ОбластьПодвал.Параметры.Мастер = Документ.Мастер;
		ОбластьПодвал.Параметры.МастерНаименование = Документ.Мастер.Наименование;
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "РабочаяЗаявка"
// Параметры:
//  МассивОбъектов - Массив    - массив объектов для формирования печатных форм
//  ОбъектыПечати  - Структура - список областьей печатной формы в разрезе документов
//
// Возвращаемое значение:
//  ТабличныйДокумент - возвращает сформированный табличный документ.
//
Функция ПечатьРабочаяЗаявка(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявкаНаРемонт_РабочаяЗаявка";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	
	// зададим параметры макета
	ТабличныйДокумент.ПолеСверху = 10; //поле равно высоте колонтитулов
	ТабличныйДокумент.ПолеСлева  = 0;
	ТабличныйДокумент.ПолеСнизу  = 0;
	ТабличныйДокумент.ПолеСправа = 0;
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТаблицаТоваров = Документ.Товары.Выгрузить();
		ТаблицаРабот = Документ.Автоработы.Выгрузить();
		
		ТаблицаПричинОбращений = Документ.ПричиныОбращения.Выгрузить();
		
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявкаНаРемонт.ПФ_MXL_РабочаяЗаявка");
		
		ЕстьСкидкаПоДеталям = Ложь;
		Если Документ.Товары.Итог("СуммаСкидки") <> 0 ИЛИ Документ.Товары.Итог("СуммаСкидкиСтроки") <> 0 Тогда
			ЕстьСкидкаПоДеталям = Истина;
		КонецЕсли;
			
		ЕстьСкидкаПоРаботам = Ложь;
		Если Документ.Автоработы.Итог("СуммаСкидки") <> 0 ИЛИ Документ.Автоработы.Итог("СуммаСкидкиСтроки") <> 0 Тогда
			ЕстьСкидкаПоРаботам = Истина;
		КонецЕсли;
		
		ЕстьПричиныОбращений = (ТаблицаПричинОбращений.Количество() > 0);
		
		Если НЕ ЕстьПричиныОбращений Тогда
			ТаблицаПричинОбращений.Добавить();
		КонецЕсли;
		
		ОбластьШапкаПричиныОбращения  = Макет.ПолучитьОбласть("ШапкаПричиныОбращения");
		ОбластьПодвалПричиныОбращения = Макет.ПолучитьОбласть("ПодвалПричиныОбращения");
		
		ОбластьСкидка = Макет.Область("Скидка");
		
		ОбластьУслуги = Макет.ПолучитьОбласть("Услуги");
		ОбластьДетали = Макет.ПолучитьОбласть("Детали");
		
		ОбластьСтрокаДеталей	        = Макет.ПолучитьОбласть("СтрокаДеталей");
		ОбластьИтоговПоСтраницеДетали	= Макет.ПолучитьОбласть("ИтогиПоСтраницеДеталей");
		ОбластьПодвалДеталей	        = Макет.ПолучитьОбласть("ПодвалДетали");
		
		ОбластьСтрокаУслуг		        = Макет.ПолучитьОбласть("СтрокаРабот");
		ОбластьИтоговПоСтраницеУслуги	= Макет.ПолучитьОбласть("ИтогиПоСтраницеРабот");
		ОбластьПодвалУслуг		        = Макет.ПолучитьОбласть("ПодвалУслуги");
		
		БезЛинии 	 = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		// Настроем колонки вывода деталей если не было скидок
		Если Не ЕстьСкидкаПоДеталям Тогда
			ПоложениеШапкиДеталей = ОбластьДетали.Область("ШапкаДеталей").Низ;
			ПозицияКолонки = ОбластьСкидка.Лево;
			Пока ПозицияКолонки > 5 Цикл
				ОбластьДетали.Область(ПоложениеШапкиДеталей - 1, ПозицияКолонки, ПоложениеШапкиДеталей - 1, ПозицияКолонки).Текст 
					= ОбластьДетали.Область(ПоложениеШапкиДеталей - 1, ПозицияКолонки - 1, 
						ПоложениеШапкиДеталей - 1, ПозицияКолонки - 1).Текст;
				ОбластьДетали.Область(ПоложениеШапкиДеталей,ПозицияКолонки,ПоложениеШапкиДеталей,ПозицияКолонки).Текст = 
					ОбластьДетали.Область(ПоложениеШапкиДеталей, ПозицияКолонки - 1, ПоложениеШапкиДеталей,ПозицияКолонки - 1).Текст;
				
				ОбластьИсточник = ОбластьСтрокаДеталей.Область(1, ПозицияКолонки - 1,1 ,ПозицияКолонки - 1);
				ОбластьПриемник = ОбластьСтрокаДеталей.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				ОбластьПриемник.Текст 		= ОбластьИсточник.Текст;
				ОбластьПриемник.Заполнение	= ОбластьИсточник.Заполнение;
				ОбластьПриемник.Параметр	= ОбластьИсточник.Параметр;
				
				ОбластьИсточник = ОбластьИтоговПоСтраницеДетали.Область(1, ПозицияКолонки - 1, 1, ПозицияКолонки - 1);
				ОбластьПриемник = ОбластьИтоговПоСтраницеДетали.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				ОбластьПриемник.Текст 		= ОбластьИсточник.Текст;
				ОбластьПриемник.Заполнение	= ОбластьИсточник.Заполнение;
				ОбластьПриемник.Параметр	= ОбластьИсточник.Параметр;
				
				ОбластьИсточник = ОбластьПодвалДеталей.Область(1, ПозицияКолонки - 1, 1, ПозицияКолонки - 1);
				ОбластьПриемник = ОбластьПодвалДеталей.Область(1, ПозицияКолонки, 1, ПозицияКолонки);
				ОбластьПриемник.Текст 		= ОбластьИсточник.Текст;
				ОбластьПриемник.Заполнение	= ОбластьИсточник.Заполнение;
				ОбластьПриемник.Параметр	= ОбластьИсточник.Параметр;
				
				ПозицияКолонки = ПозицияКолонки - 1;
			КонецЦикла;
			
			ОбластьДетали.Область(ПоложениеШапкиДеталей - 1, 4, ПоложениеШапкиДеталей - 1, 5).Объединить();
			ОбластьДетали.Область(ПоложениеШапкиДеталей, 4, ПоложениеШапкиДеталей, 5).Объединить();
			ОбластьСтрокаДеталей.Область(1, 4, 1, 5).Объединить();
			
			ТекОбласть = ОбластьИтоговПоСтраницеДетали.Область(1, 2, 1, 8);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСнизу = БезЛинии;
			
			ТекОбласть = ОбластьПодвалДеталей.Область(1, 2, 1, 8);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСнизу = БезЛинии;
			
			ПозицияКолонки = ОбластьСкидка.Лево - 1;
			Пока ПозицияКолонки <= ОбластьДетали.ШиринаТаблицы Цикл
				ОбластьДетали.Область(ПоложениеШапкиДеталей, ПозицияКолонки, 
									ПоложениеШапкиДеталей, ПозицияКолонки).Текст = ПозицияКолонки - 2;
				ПозицияКолонки = ПозицияКолонки + 1;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ЕстьПричиныОбращений Тогда
			
			ТекОбласть = ОбластьШапкаПричиныОбращения.Область(1,, 1);
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			ОбластьШапкаПричиныОбращения.Область(1, 2, 1, 2).Текст = "";
			
			ТекОбласть = ОбластьШапкаПричиныОбращения.Область(2,, 2);
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			ОбластьШапкаПричиныОбращения.Область(2, 2, 2, 2).Текст = "";
			
			ТекОбласть = ОбластьПодвалПричиныОбращения.Область(1,, 1);
			ТекОбласть.Очистить(Истина, Истина, Истина);
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			
			ТекОбласть = ОбластьПодвалПричиныОбращения.Область(2,, 2);
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
		КонецЕсли;
		
		ОбластьШапкаДеталей = ОбластьДетали.ПолучитьОбласть("ШапкаДеталей");
		
		// Настроем колонки вывода услуг если не было скидок
		Если Не ЕстьСкидкаПоРаботам Тогда
			ПоложениеШапкиУслуг = ОбластьУслуги.Область("ШапкаУслуг").Низ;
			ПозицияКолонки = ОбластьСкидка.Лево;
			Пока ПозицияКолонки > 5 Цикл
				ОбластьУслуги.Область(ПоложениеШапкиУслуг-1,ПозицияКолонки,ПоложениеШапкиУслуг-1,ПозицияКолонки).Текст = ОбластьУслуги.Область(ПоложениеШапкиУслуг-1,ПозицияКолонки-1,ПоложениеШапкиУслуг-1,ПозицияКолонки-1).Текст;
				ОбластьУслуги.Область(ПоложениеШапкиУслуг,ПозицияКолонки,ПоложениеШапкиУслуг,ПозицияКолонки).Текст = ОбластьУслуги.Область(ПоложениеШапкиУслуг,ПозицияКолонки-1,ПоложениеШапкиУслуг,ПозицияКолонки-1).Текст;
				
				ОбластьИсточник = ОбластьСтрокаУслуг.Область(1,ПозицияКолонки-1,1,ПозицияКолонки-1);
				ОбластьПриемник = ОбластьСтрокаУслуг.Область(1,ПозицияКолонки,1,ПозицияКолонки);
				ОбластьПриемник.Текст 		= ОбластьИсточник.Текст;
				ОбластьПриемник.Заполнение	= ОбластьИсточник.Заполнение;
				ОбластьПриемник.Параметр	= ОбластьИсточник.Параметр;
				
				ОбластьИсточник = ОбластьИтоговПоСтраницеУслуги.Область(1,ПозицияКолонки-1,1,ПозицияКолонки-1);
				ОбластьПриемник = ОбластьИтоговПоСтраницеУслуги.Область(1,ПозицияКолонки,1,ПозицияКолонки);
				ОбластьПриемник.Текст 		= ОбластьИсточник.Текст;
				ОбластьПриемник.Заполнение	= ОбластьИсточник.Заполнение;
				ОбластьПриемник.Параметр	= ОбластьИсточник.Параметр;
				
				ОбластьИсточник = ОбластьПодвалУслуг.Область(1,ПозицияКолонки-1,1,ПозицияКолонки-1);
				ОбластьПриемник = ОбластьПодвалУслуг.Область(1,ПозицияКолонки,1,ПозицияКолонки);
				ОбластьПриемник.Текст 		= ОбластьИсточник.Текст;
				ОбластьПриемник.Заполнение	= ОбластьИсточник.Заполнение;
				ОбластьПриемник.Параметр	= ОбластьИсточник.Параметр;
				
				ПозицияКолонки = ПозицияКолонки-1;
			КонецЦикла;
			
			ОбластьУслуги.Область(ПоложениеШапкиУслуг-1, 4, ПоложениеШапкиУслуг-1, 5).Объединить();
			ОбластьУслуги.Область(ПоложениеШапкиУслуг, 4, ПоложениеШапкиУслуг, 5).Объединить();
			ОбластьСтрокаУслуг.Область(1, 4, 1, 5).Объединить();
			
			ТекОбласть = ОбластьИтоговПоСтраницеУслуги.Область(1, 2, 1, 8);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСнизу = БезЛинии;
			
			ТекОбласть = ОбластьПодвалУслуг.Область(1, 2, 1, 8);
			ТекОбласть.Объединить();
			ТекОбласть.ГраницаСнизу = БезЛинии;
			
			ПозицияКолонки = ОбластьСкидка.Лево-1;
			Пока ПозицияКолонки <= ОбластьУслуги.ШиринаТаблицы Цикл
				ОбластьУслуги.Область(ПоложениеШапкиУслуг,ПозицияКолонки,ПоложениеШапкиУслуг,ПозицияКолонки).Текст = ПозицияКолонки-2;
				ПозицияКолонки = ПозицияКолонки + 1;
			КонецЦикла;
		КонецЕсли;
		
		ОбластьШапкаУслуг = ОбластьУслуги.ПолучитьОбласть("ШапкаУслуг");
		
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		
		НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
	
	
	// Вывод шапки документа
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьШапка.Параметры.Организация = Документ.Организация;
	ОбластьШапка.Параметры.ОрганизацияПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация);
	ОбластьШапка.Параметры.ОрганизацияАдресЮридический = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ТекущаяДатаСеанса());
	ОбластьШапка.Параметры.НомерДок = НомерДляПечати;
	ОбластьШапка.Параметры.ДатаДок = Формат(Документ.Дата, "ДФ = дд.ММ.гггг");
	ОбластьШапка.Параметры.ДатаНачала = Формат(Документ.ДатаНачала, "ДФ = дд.ММ.гггг");
	Если ЗначениеЗаполнено(Документ.Заказчик) Тогда
		Если ТипЗнч(Документ.Заказчик)=Тип("СправочникСсылка.Контрагенты") Тогда
			ОбластьШапка.Параметры.Заказчик = Документ.Заказчик;
			ОбластьШапка.Параметры.ЗаказчикПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Заказчик);
			ОбластьШапка.Параметры.ЗаказчикАдресПочтовый      = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Заказчик, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, ТекущаяДатаСеанса());
			ОбластьШапка.Параметры.ЗаказчикТелефоны           = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Документ.Заказчик, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		Иначе
			ОбластьШапка.Параметры.ЗаказчикПолноеНаименование = СокрЛП(Документ.Заказчик);
			// ОбластьШапка.Параметры.ЗаказчикАдресПочтовый     = КонтактнаяИнформация;
			ОбластьШапка.Параметры.ЗаказчикТелефоны = Документ.ПредставлениеТелефона;
		КонецЕсли;
	Иначе
		ОбластьШапка.Параметры.ЗаказчикТелефоны = Документ.ПредставлениеТелефона;
		ОбластьШапка.Параметры.ЗаказчикПолноеНаименование = Документ.ОбращениеККлиенту;
	КонецЕсли;
	
	Автомобиль = Документ.Автомобиль;
	Если ЗначениеЗаполнено(Автомобиль) Тогда		
		Если ТипЗнч(Автомобиль)=Тип("СправочникСсылка.Автомобили") Тогда
			ОбластьШапка.Параметры.Автомобиль = Автомобиль;
			ОбластьШапка.Параметры.АвтомобильМодель = Автомобиль.Модель; 
			ОбластьШапка.Параметры.АвтомобильГосНомер = ?(ЗначениеЗаполнено(Автомобиль), Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер, Документ.Дата), ""); 
			ОбластьШапка.Параметры.АвтомобильКод = Автомобиль.VIN; 
			ОбластьШапка.Параметры.АвтомобильГодВыпуска = Формат(Автомобиль.ГодВыпуска,АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Документ)); 
			ОбластьШапка.Параметры.АвтомобильПробег = ?(ЗначениеЗаполнено(Автомобиль), СокрЛП(Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег, Документ.Дата)), ""); 
		ИначеЕсли ТипЗнч(Автомобиль)=Тип("СправочникСсылка.Модели") Тогда
			ОбластьШапка.Параметры.Автомобиль = Автомобиль;
			ОбластьШапка.Параметры.АвтомобильМодель = Автомобиль.НаименованиеПолное; 
		КонецЕсли;
	Иначе
		Модель = ?(ЗначениеЗаполнено(Документ.Модель), Документ.Модель, "________________");
		ОбластьШапка.Параметры.АвтомобильГосНомер = Документ.ГосНомер;
		ОбластьШапка.Параметры.АвтомобильКод = Документ.VIN;
		ОбластьШапка.Параметры.АвтомобильГодВыпуска = Формат(Документ.ГодВыпуска, "ДФ=гггг");
		ОбластьШапка.Параметры.АвтомобильПробег = Документ.Пробег;
		ОбластьШапка.Параметры.АвтомобильМодель = Модель;
	КонецЕсли;
	ОбластьШапка.Параметры.ВидРемонта = Документ.ВидРемонта;
		
	ОбластьШапка.Параметры.Диспетчер = Документ.Диспетчер;
	ОбластьШапка.Параметры.ПредДатаНачала = Формат(Документ.ДатаНачала, "ДЛФ=DT; ДП='Не задана'");
	ОбластьШапка.Параметры.ДатаОкончания = Формат(Документ.ДатаОкончания, "ДЛФ=DT; ДП='Не задана'");
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	// Сформируем итоговую сумму документа
	ИтогоСуммаПоДокументу = 0;
	
	НомерСтраницы = 2;
	НомерСтраницыПред = 2;
	
	Для Каждого ТекущаяПричинаОбращения Из ТаблицаПричинОбращений Цикл
		
		// Сформируем таблицы для вывода
		Если ЕстьПричиныОбращений Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ИдентификаторПричиныОбращения", ТекущаяПричинаОбращения.ИдентификаторПричиныОбращения);
			Табл       = ТаблицаРабот.НайтиСтроки(ПараметрыОтбора);
			ТаблТовары = ТаблицаТоваров.НайтиСтроки(ПараметрыОтбора);
			
			ОбластьШапкаПричиныОбращения.Параметры.ПричинаОбращения           = ТекущаяПричинаОбращения.ПричинаОбращения;
			ОбластьШапкаПричиныОбращения.Параметры.СодержаниеПричиныОбращения = ТекущаяПричинаОбращения.ПричинаОбращенияСодержание;
			ТабличныйДокумент.Вывести(ОбластьШапкаПричиныОбращения);
			
		Иначе
			
			// Временная таблица
			Табл = ТаблицаРабот.Скопировать();
			
			// Формирование врем. таблиц товаров
			ТаблТовары = ТаблицаТоваров.Скопировать();
		КонецЕсли;
		
		
		// Вывод шапки табличной части работ
		Если ЕстьПричиныОбращений Тогда
			ОбластьУслуги.Область(2, 3, 2, 3).Текст = СтрШаблон(
				НСтр("ru = 'Работы по причине обращения ""%1""'"),
				ТекущаяПричинаОбращения.ПричинаОбращения
			);
		Иначе
			ОбластьУслуги.Параметры.НомерДок = НомерДляПечати;
			ОбластьУслуги.Параметры.ДатаДок = Формат(Документ.Дата, "ДЛФ=D");
		КонецЕсли;
		КолонкаКода = УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах();
		ОбластьУслуги.Параметры.ИмяКолонкиКодов = СтрЗаменить(КолонкаКода, "/", Символы.ПС);
		ТабличныйДокумент.Вывести(ОбластьУслуги);
		
		Для ДопСтр = 1 По 5 Цикл
			Табл.Добавить();
		КонецЦикла;
		КоличествоРабот = Табл.Количество();
		
		// инициализация итогов по документу
		ИтогоСуммаРабот	              = 0;
		ИтогоСуммаСкидкиРабот	      = 0;
		ИтогоСуммаДеталей	          = 0;
		ИтогоСуммаСкидкиДеталей	      = 0;
		
		Если ЕстьПричиныОбращений Тогда
			ТекстЗаголовка = СтрШаблон(
				НСтр("ru = 'Заявка на работы по причине обращения: %1'"),
				ТекущаяПричинаОбращения.ПричинаОбращения
			);
		Иначе
			ТекстЗаголовка = СтрШаблон(
				НСтр("ru = 'Заявка на работы по заявке на ремонт № %1 от %2'"),
				НомерДляПечати,
				Формат(Документ.Дата, "ДЛФ=D")
			);
		КонецЕсли;
		
		ОбластьШапкаУслуг.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаУслуг.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
		ОбластьШапкаУслуг.Параметры.ИмяКолонкиКодов = КолонкаКода;
		
		// Вывод табличной части работ
		Ном = 0;
		СтруктураИтоговПоСтранице = Новый Структура("СуммаВсего, СуммаСкидки", 0, 0);
		
		ОбластьИтоговПоСтраницеУслуги.Параметры.ТекстИтоговПоСтранице =
			НСтр("ru = 'Итого по странице предварительная сумма работ:'");
		МассивОбластиПодвала = Новый Массив;
		МассивОбластиПодвала.Добавить(ОбластьПодвалУслуг);
		Для Каждого СтрокаРабот Из Табл Цикл
			Ном = Ном + 1;
			
			ОбластьСтрокаУслуг.Параметры.НомСтр = Ном;
			Если Ном > (КоличествоРабот-5) Тогда
				// заполним параметры
				ОбластьСтрокаУслуг.Параметры.Авторабота = "";
				ОбластьСтрокаУслуг.Параметры.Код = "";
				ОбластьСтрокаУслуг.Параметры.Наименование = "";
				ОбластьСтрокаУслуг.Параметры.Цена = "";
				ОбластьСтрокаУслуг.Параметры.Количество = "";
				ОбластьСтрокаУслуг.Параметры.Единица = "";
				ОбластьСтрокаУслуг.Параметры.Сумма = "";
				Если ЕстьСкидкаПоРаботам Тогда
					ОбластьСтрокаУслуг.Параметры.Скидка = "";
				КонецЕсли;
				ОбластьСтрокаУслуг.Параметры.ПримечаниеРаботы = "";
				ТекОбласть = ОбластьСтрокаУслуг.Область(1,, 1);
				// установим для пустой строки высоту, равную двум строкам. Параметры не заполняем
				ТекОбласть.АвтовысотаСтроки = Ложь;
				ТекОбласть.ВысотаСтроки = 22;
			Иначе
				// заполним параметры
				ОбластьСтрокаУслуг.Параметры.Авторабота = СтрокаРабот.Авторабота;
				ОбластьСтрокаУслуг.Параметры.Код = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаРабот.Авторабота);
				ОбластьСтрокаУслуг.Параметры.Наименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаРабот.Авторабота);
				ОбластьСтрокаУслуг.Параметры.Цена = Формат(СтрокаРабот.Цена, ФорматВыводаСуммы);
				ОбластьСтрокаУслуг.Параметры.Количество = Формат(СтрокаРабот.Количество * СтрокаРабот.Коэффициент, ФорматВыводаКоличества);
				ОбластьСтрокаУслуг.Параметры.Единица = СтрокаРабот.Нормочас;
				ОбластьСтрокаУслуг.Параметры.Сумма = Формат(СтрокаРабот.СуммаВсего, ФорматВыводаСуммы);
				Если ЕстьСкидкаПоРаботам Тогда
					ОбластьСтрокаУслуг.Параметры.Скидка = Формат(СтрокаРабот.СуммаСкидки+СтрокаРабот.СуммаСкидкиСтроки, ФорматВыводаСуммы);
				КонецЕсли;
				Если СтрокаРабот.ПримечаниеРаботыПечать <> "" Тогда
					ОбластьСтрокаУслуг.Параметры.ПримечаниеРаботы = СтрокаРабот.ПримечаниеРаботыПечать;
				КонецЕсли;
				// Обновим итоги по документу
				ИтогоСуммаРабот = ИтогоСуммаРабот + СтрокаРабот.СуммаВсего;
				ИтогоСуммаСкидкиРабот = ИтогоСуммаСкидкиРабот + СтрокаРабот.СуммаСкидки + СтрокаРабот.СуммаСкидкиСтроки;
			КонецЕсли;
			// Обновим итоги по странице
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаУслуг, ОбластьШапкаУслуг, ОбластьИтоговПоСтраницеУслуги, НомерСтраницы, СтруктураИтоговПоСтранице, Документ, ?(Ном=КоличествоРабот, МассивОбластиПодвала, Неопределено));
			
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура("СуммаВсего, СуммаСкидки", 0, 0);
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапкаУслуг.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			КонецЕсли;
			
			Если СтрокаРабот = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// обновим итоги по странице
			СтруктураИтоговПоСтранице.СуммаВсего  = СтруктураИтоговПоСтранице.СуммаВсего + СтрокаРабот.СуммаВсего;
			СтруктураИтоговПоСтранице.СуммаСкидки = СтруктураИтоговПоСтранице.СуммаСкидки + СтрокаРабот.СуммаСкидки + СтрокаРабот.СуммаСкидкиСтроки;
		КонецЦикла; 
		
		// выводим последний итог по странице, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент,ОбластьИтоговПоСтраницеУслуги,СтруктураИтоговПоСтранице,Документ);
		КонецЕсли;
		
		ОбластьПодвалУслуг.Параметры.Сумма = Формат(ИтогоСуммаРабот, ФорматВыводаСуммы);
		Если ЕстьСкидкаПоРаботам Тогда
			ОбластьПодвалУслуг.Параметры.Скидка = Формат(ИтогоСуммаСкидкиРабот, ФорматВыводаСуммы);
		КонецЕсли;
		НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(
			ТабличныйДокумент,
			ОбластьПодвалУслуг,
			, ,
			НомерСтраницы,
			,
			Документ
		);
		
		Для ТекСтр = 1 По 5 Цикл
			ТаблТовары.Добавить();
		КонецЦикла;
		КоличествоДеталей = ТаблТовары.Количество();
		
		// Вывод шапки табличной части деталей
		Если ЕстьПричиныОбращений Тогда
			ОбластьДетали.Область(2, 3, 2, 3).Текст = СтрШаблон(
				НСтр("ru = 'Требование к причине обращения ""%1""'"),
				ТекущаяПричинаОбращения.ПричинаОбращения
			);
		Иначе
			ОбластьДетали.Параметры.НомерДок = НомерДляПечати;
			ОбластьДетали.Параметры.ДатаДок  = Формат(Документ.Дата, "ДФ = дд.ММ.гггг");
		КонецЕсли;
		// Если помещается только шапка, но ни одной строчки, то шапку переносим на след. страницу.
		ТабДокВрем = Новый ТабличныйДокумент;
		ТабДокВрем.ПолеСверху = 10; 
		ТабДокВрем.ПолеСнизу  = 0;
		ТабДокВрем.ПолеСлева  = 0; 
		ТабДокВрем.ПолеСправа = 0;
		ОбластьДетали.Параметры.ИмяКолонкиКодов = КолонкаКода;
		ТабДокВрем.Вывести(ОбластьДетали);
		ОбластьМакетаСтрокаВрем = Макет.ПолучитьОбласть("СтрокаДеталей");
		СтрокаДеталей = ТаблТовары[0];
		ТекОбласть = ОбластьМакетаСтрокаВрем.Область(1,, 1);
		Если КоличествоДеталей = 5 Тогда
			// присутствуют только пустые строки
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 22;
		Иначе
			// Присутствуют заполненные строки (заполняем не все параметры - только наиболее вероятно длинные).
			ТекТовар = СтрокаДеталей.Номенклатура;
			ОбластьМакетаСтрокаВрем.Параметры.Номенклатура = ТекТовар;
			ОбластьМакетаСтрокаВрем.Параметры.Код = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(ТекТовар);
			ОбластьМакетаСтрокаВрем.Параметры.Наименование = ТекТовар.НаименованиеПолное;
		КонецЕсли;
		ТабДокВрем.Вывести(ОбластьМакетаСтрокаВрем);
		ТабДокВрем.Вывести(ОбластьИтоговПоСтраницеДетали);
		Если НЕ ТабличныйДокумент.ПроверитьВывод(ТабДокВрем) Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьДетали);
		
		Если ЕстьПричиныОбращений Тогда
			ТекстЗаголовка = СтрШаблон(
				НСтр("ru = 'Требование к причине обращения: %1'"),
				ТекущаяПричинаОбращения.ПричинаОбращения
			);
		Иначе
			ТекстЗаголовка = СтрШаблон(
				НСтр("ru = 'Требование к заявке на ремонт № %1 от %2'"),
				НомерДляПечати,
				Формат(Документ.Дата, "ДЛФ=D")
			);
		КонецЕсли;
		
		// заполним параметры шапки таблицы для следующего листа
		ОбластьШапкаДеталей.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаДеталей.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
		ОбластьШапкаДеталей.Параметры.ИмяКолонкиКодов = КолонкаКода;
		
		// Вывод табличной части деталей
		Ном = 0;
		СтруктураИтоговПоСтранице = Новый Структура("СуммаВсего, СуммаСкидки", 0, 0);
		
		ОбластьИтоговПоСтраницеДетали.Параметры.ТекстИтоговПоСтранице =
			НСтр("ru = 'Итого по странице предварительная сумма материалов:'");
		
		МассивОбластиПодвала = Новый Массив;
		МассивОбластиПодвала.Добавить(ОбластьПодвалДеталей);
		Для Каждого СтрокаДеталей Из ТаблТовары Цикл
			Ном = Ном + 1;
			
			ОбластьСтрокаДеталей.Параметры.НомСтр = Ном;
			Если Ном > (КоличествоДеталей-5) Тогда
				ОбластьСтрокаДеталей.Параметры.Номенклатура = "";
				ОбластьСтрокаДеталей.Параметры.Код = "";
				ОбластьСтрокаДеталей.Параметры.Наименование = "";
				ОбластьСтрокаДеталей.Параметры.Цена = "";
				ОбластьСтрокаДеталей.Параметры.Количество = "";
				ОбластьСтрокаДеталей.Параметры.Единица = "";
				ОбластьСтрокаДеталей.Параметры.Сумма = "";
				Если ЕстьСкидкаПоДеталям Тогда
					ОбластьСтрокаДеталей.Параметры.Скидка = "";
				КонецЕсли;
				// установим для пустой строки высоту, равную двум строкам. Параметры не заполняем
				ТекОбласть = ОбластьСтрокаДеталей.Область(1,, 1);
				ТекОбласть.АвтовысотаСтроки = Ложь;
				ТекОбласть.ВысотаСтроки = 22;
			Иначе
				// заполним параметры
				ТекТовар = СтрокаДеталей.Номенклатура;
				ОбластьСтрокаДеталей.Параметры.Номенклатура = ТекТовар;
				ОбластьСтрокаДеталей.Параметры.Код= УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаДеталей.Номенклатура);
				ОбластьСтрокаДеталей.Параметры.Наименование = СтрокаДеталей.Номенклатура.НаименованиеПолное;
				ОбластьСтрокаДеталей.Параметры.Цена = Формат(СтрокаДеталей.Цена, ФорматВыводаСуммы);
				ОбластьСтрокаДеталей.Параметры.Количество 
										= Формат(СтрокаДеталей.Количество * СтрокаДеталей.Коэффициент, ФорматВыводаКоличества);
				ОбластьСтрокаДеталей.Параметры.Единица = СтрокаДеталей.ЕдиницаИзмерения;
				ОбластьСтрокаДеталей.Параметры.Сумма = Формат(СтрокаДеталей.СуммаВсего, ФорматВыводаСуммы);
				Если ЕстьСкидкаПоДеталям Тогда
					ОбластьСтрокаДеталей.Параметры.Скидка = Формат(СтрокаДеталей.СуммаСкидки+СтрокаДеталей.СуммаСкидкиСтроки, ФорматВыводаСуммы);
				КонецЕсли;
				// Обновим итоги по документу
				ИтогоСуммаДеталей = ИтогоСуммаДеталей + СтрокаДеталей.СуммаВсего;
				ИтогоСуммаСкидкиДеталей = ИтогоСуммаСкидкиДеталей + СтрокаДеталей.СуммаСкидки + СтрокаДеталей.СуммаСкидкиСтроки;
			КонецЕсли;
			// Обновим итоги по странице
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаДеталей, ОбластьШапкаДеталей, ОбластьИтоговПоСтраницеДетали, НомерСтраницы, СтруктураИтоговПоСтранице, Документ, ?(Ном=КоличествоДеталей, МассивОбластиПодвала, Неопределено));
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура("СуммаВсего, СуммаСкидки", 0, 0);
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапкаДеталей.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			КонецЕсли;
			
			Если СтрокаДеталей = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// обновим итоги по странице
			СтруктураИтоговПоСтранице.СуммаВсего  = СтруктураИтоговПоСтранице.СуммаВсего + СтрокаДеталей.СуммаВсего;
			СтруктураИтоговПоСтранице.СуммаСкидки = СтруктураИтоговПоСтранице.СуммаСкидки + СтрокаДеталей.СуммаСкидки + СтрокаДеталей.СуммаСкидкиСтроки;
		КонецЦикла; 
		
		// выводим последний итог по странице, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент,ОбластьИтоговПоСтраницеДетали,СтруктураИтоговПоСтранице,Документ);
		КонецЕсли;
		
		// Вывод подвала табличной части деталей
		ОбластьПодвалДеталей.Параметры.Сумма = Формат(ИтогоСуммаДеталей, ФорматВыводаСуммы);
		Если ЕстьСкидкаПоДеталям Тогда
			ОбластьПодвалДеталей.Параметры.Скидка = Формат(ИтогоСуммаСкидкиДеталей, ФорматВыводаСуммы);
		КонецЕсли;
		НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвалДеталей, , , НомерСтраницы, , Документ);
		
		Если ЕстьПричиныОбращений Тогда
			ОбластьПодвалПричиныОбращения.Параметры.Сумма = Формат(ИтогоСуммаРабот + ИтогоСуммаДеталей, ФорматВыводаСуммы);
			ТабличныйДокумент.Вывести(ОбластьПодвалПричиныОбращения);
		КонецЕсли;
		
		ИтогоСуммаПоДокументу = ИтогоСуммаПоДокументу + ИтогоСуммаРабот + ИтогоСуммаДеталей;
		
	КонецЦикла;
	
	// Вывод подвала документа
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвал.Параметры.Сумма = Формат(ИтогоСуммаПоДокументу, ФорматВыводаСуммы);
	ОбластьПодвал.Параметры.Мастер = Документ.Мастер;
	ОбластьПодвал.Параметры.МастерНаименование = Документ.Мастер.Наименование;
	Если ТипЗнч(Документ.Заказчик) = Тип("СправочникСсылка.Контрагенты") Тогда
		ОбластьПодвал.Параметры.Заказчик = Документ.Заказчик;
		ОбластьПодвал.Параметры.ЗаказчикНаименование = Документ.Заказчик.Наименование;
	Иначе
		ОбластьПодвал.Параметры.ЗаказчикНаименование = СокрЛП(Документ.Заказчик);
	КонецЕсли; 
	ОбластьПодвал.Параметры.ДатаДок = Формат(Документ.Дата,"ДФ = дд.ММ.гггг");
	
	// выведем или удалим ШК
	УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьПодвал, Документ);
		
	НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
	
	// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла; 
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

Процедура УстановитьПричинуОбращения(Строка, ПараметрыДействия)
	
	Если ЗначениеЗаполнено(Строка.ИдентификаторПричиныОбращения) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторПричиныОбращения = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыДействия,
		"ИдентификаторПричиныОбращения",
		Неопределено
	);
	
	Если Не ИдентификаторПричиныОбращения = Неопределено Тогда
		Строка.ИдентификаторПричиныОбращения = ИдентификаторПричиныОбращения;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

