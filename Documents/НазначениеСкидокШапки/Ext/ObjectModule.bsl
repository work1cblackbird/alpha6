// Модуль документа "Назначение скидок шапки"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	// Произведем заполнение реквизитов документа
	ДатаНачалаДействия = Дата;
	
КонецПроцедуры

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	// Произведем заполнение реквизитов документа
	ДатаНачалаДействия = ТекущаяДатаСеанса();
	
КонецПроцедуры

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// установим идентификатор скидки для каждой строки
	Для Каждого Строка Из Скидки Цикл
		
		Параметры = Новый Структура();
		Параметры.Вставить("ПодразделениеКомпании"    , ПодразделениеКомпании);
		Параметры.Вставить("РучнаяСкидка"             , Строка.Скидка.РучнаяСкидка);
		Параметры.Вставить("НачВремя"                 , Строка.НачВремя);
		Параметры.Вставить("КонВремя"                 , Строка.КонВремя);
		Параметры.Вставить("ДниНедели"                , Строка.ДниНедели);
		Параметры.Вставить("ДисконтнаяКарта"          , Строка.ДисконтнаяКарта);
		Параметры.Вставить("ОтСуммыНакопленияНаКарте" , Строка.СуммаНакопления);
		Параметры.Вставить("ЗалОбслуживания"          , Строка.СкладКомпании);
		Параметры.Вставить("Свойство"                 , Строка.Свойство);
		Параметры.Вставить("ОтСуммыЧека"              , Строка.СуммаЧека);
		Параметры.Вставить("Скидка"                   , Строка.Скидка);
		
		
		РасчетныйИдентификатор = СкидкиНаценкиСервер.ПолучитьИдентификаторСкидкиШапки(Параметры, Строка.ИдентификаторСкидки);
		Строка.ИдентификаторСкидки = ?(РасчетныйИдентификатор = Неопределено,"",РасчетныйИдентификатор) +?(ЗначениеЗаполнено(Строка.ИдентификаторСкидки),0,Строка.НомерСтроки);
		
		Если НЕ (Строка.СкидкаНаТовары ИЛИ Строка.СкидкаНаРаботы) Тогда
			Строка.СкидкаНаТовары = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ,Проведение=Ложь)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписейСкидки = Движения.СкидкиШапки;
	
	НаборЗаписейСкидки.ДокументСсылка            = Ссылка;
	НаборЗаписейСкидки.ПодразделениеКомпании     = ПодразделениеКомпании;
	НаборЗаписейСкидки.РезультатЗапросаПоСкидкам = Документы.НазначениеСкидокШапки.ПолучитьТаблицуСкидок(ЭтотОбъект);
	
	Если ХозОперация = Справочники.ХозОперации.НазначениеОбщихСкидок Тогда
		Отказ = Отказ ИЛИ НаборЗаписейСкидки.УстановитьСкидки(); // Установка скидки на шапку документа
	Иначе
		Отказ = Отказ ИЛИ НаборЗаписейСкидки.ОтменитьСкидки();   // Отмена скидки на шапку документа
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
