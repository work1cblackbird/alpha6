// Модуль менеджера документа "Назначение скидок шапки"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", 0);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Функция получает таблицу скидок и их параметров действия
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьТаблицуСкидок(Объект) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НазначениеСкидокШапкиСкидки.Скидка.РучнаяСкидка КАК РучнаяСкидка,
	|	НазначениеСкидокШапкиСкидки.НачВремя,
	|	НазначениеСкидокШапкиСкидки.КонВремя,
	|	НазначениеСкидокШапкиСкидки.ДниНедели,
	|	НазначениеСкидокШапкиСкидки.ДисконтнаяКарта,
	|	НазначениеСкидокШапкиСкидки.СуммаНакопления КАК ОтСуммыНакопленияНаКарте,
	|	НазначениеСкидокШапкиСкидки.СкладКомпании КАК ЗалОбслуживания,
	|	НазначениеСкидокШапкиСкидки.Свойство,
	|	НазначениеСкидокШапкиСкидки.СуммаЧека КАК ОтСуммыЧека,
	|	НазначениеСкидокШапкиСкидки.Скидка,
	|	НазначениеСкидокШапкиСкидки.Ссылка КАК РегистраторСкидки,
	|	НазначениеСкидокШапкиСкидки.ЗначениеСкидки,
	|	НазначениеСкидокШапкиСкидки.Скидка.СпособВычисления КАК СпособВычисления,
	|	НазначениеСкидокШапкиСкидки.ФлагВытеснения,
	|	НазначениеСкидокШапкиСкидки.ИдентификаторСкидки,
	|	НазначениеСкидокШапкиСкидки.СкидкаНаТовары,
	|	НазначениеСкидокШапкиСкидки.СкидкаНаРаботы,
	|	ЕСТЬNULL(СкидкиШапкиСрезПоследних.Действует, ЛОЖЬ) КАК СкидкаУстановлена
	|ИЗ
	|	Документ.НазначениеСкидокШапки.Скидки КАК НазначениеСкидокШапкиСкидки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкидкиШапки.СрезПоследних(
	|		&Дата,
	|		ПодразделениеКомпании = &ПодразделениеКомпании
	|		    И Скидка В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		            НазначениеСкидокШапкиСкидки.Скидка
	|		        ИЗ
	|		            Документ.НазначениеСкидокШапки.Скидки КАК НазначениеСкидокШапкиСкидки
	|		        ГДЕ
	|		            НазначениеСкидокШапкиСкидки.Ссылка = &Ссылка)) КАК СкидкиШапкиСрезПоследних
	|		ПО НазначениеСкидокШапкиСкидки.НачВремя 			= СкидкиШапкиСрезПоследних.НачВремя
	|			И НазначениеСкидокШапкиСкидки.КонВремя 			= СкидкиШапкиСрезПоследних.КонВремя
	|			И НазначениеСкидокШапкиСкидки.ДниНедели 		= СкидкиШапкиСрезПоследних.ДниНедели
	|			И НазначениеСкидокШапкиСкидки.ДисконтнаяКарта 	= СкидкиШапкиСрезПоследних.ДисконтнаяКарта
	|			И НазначениеСкидокШапкиСкидки.СуммаНакопления 	= СкидкиШапкиСрезПоследних.ОтСуммыНакопленияНаКарте
	|			И НазначениеСкидокШапкиСкидки.СкладКомпании 	= СкидкиШапкиСрезПоследних.ЗалОбслуживания
	|			И НазначениеСкидокШапкиСкидки.Свойство 			= СкидкиШапкиСрезПоследних.Свойство
	|			И НазначениеСкидокШапкиСкидки.СуммаЧека 		= СкидкиШапкиСрезПоследних.ОтСуммыЧека
	|			И НазначениеСкидокШапкиСкидки.Скидка 			= СкидкиШапкиСрезПоследних.Скидка
	|			И НазначениеСкидокШапкиСкидки.ЗначениеСкидки 	= СкидкиШапкиСрезПоследних.ЗначениеСкидки
	|			И НазначениеСкидокШапкиСкидки.СкидкаНаТовары 	= СкидкиШапкиСрезПоследних.СкидкаНаТовары
	|			И НазначениеСкидокШапкиСкидки.СкидкаНаРаботы 	= СкидкиШапкиСрезПоследних.СкидкаНаРаботы
	|			И (СкидкиШапкиСрезПоследних.Действует)
	|ГДЕ
	|	НазначениеСкидокШапкиСкидки.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка",	Объект.Ссылка);
	Запрос.УстановитьПараметр("Дата",	Новый Граница(Объект.ДатаНачалаДействия, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	
	Возврат Запрос.Выполнить();
КонецФункции // ПолучитьТаблицуСкидок()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДатаНачалаДействия");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Скидки");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Скидки.Скидка");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы скидки
	УникальныеСкидки = Новый Массив();
	
	УникальныеСкидки.Добавить("Скидка");
	УникальныеСкидки.Добавить("СкидкаНаТовары");
	УникальныеСкидки.Добавить("СкидкаНаРаботы");
	УникальныеСкидки.Добавить("ЗначениеСкидки");
	УникальныеСкидки.Добавить("Свойство");
	УникальныеСкидки.Добавить("ДисконтнаяКарта");
	УникальныеСкидки.Добавить("СуммаНакопления");
	УникальныеСкидки.Добавить("НачВремя");
	УникальныеСкидки.Добавить("КонВремя");
	УникальныеСкидки.Добавить("ДниНедели");
	УникальныеСкидки.Добавить("СкладКомпании");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Скидки", УникальныеСкидки);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", ИСТИНА);
	ПараметрыДействия.Вставить("НеРассчитыватьСкидки", ИСТИНА);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДокументОснованиеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДатаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	// Отключим установку цен, так как в данном документе она не нужна
	ПараметрыДействия.ТребуетсяУстановкаЦен = Ложь;
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСкидки

// Обработчик события возникающего при изменении данных реквизита "Скидка" в таблице "Скидки".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкиСкидкаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Строка.Скидка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, "СпособВычисления", "Скидки") Тогда
		Строка.СпособВычисления = ?(Строка.Скидка.СпособВычисления = Перечисления.СкидкиСпособВычисления.Абсолютная, Строка(Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить()), "%");
	КонецЕсли;
	
	Если Объект.ХозОперация = Справочники.ХозОперации.НазначениеОбщихСкидок Тогда
		
		// Произведем первоначальное заполнение некоторых полей текущей строки
		Строка.ФлагВытеснения= Строка.Скидка.ФлагВытеснения;
		Строка.КонВремя  = ?(ЗначениеЗаполнено(Строка.КонВремя), Строка.КонВремя, '00010101235959');
		Строка.ДниНедели = ?(ПустаяСтрока(Строка.ДниНедели), "1111111", Строка.ДниНедели);
		
		// Проверим корректность заполнения реквизита "ЗначениеСкидки"
		СкидкиЗначениеСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
		
	Иначе
		// Отмена скидок. Скидка выбрана, найдем ее среди установленных
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СкидкиШапкиСрезПоследних.ФлагВытеснения,
		|	СкидкиШапкиСрезПоследних.ЗначениеСкидки,
		|	СкидкиШапкиСрезПоследних.ДисконтнаяКарта,
		|	СкидкиШапкиСрезПоследних.ОтСуммыНакопленияНаКарте КАК СуммаНакопления,
		|	СкидкиШапкиСрезПоследних.ОтСуммыЧека КАК СуммаЧека,
		|	СкидкиШапкиСрезПоследних.НачВремя,
		|	СкидкиШапкиСрезПоследних.КонВремя,
		|	СкидкиШапкиСрезПоследних.ДниНедели,
		|	СкидкиШапкиСрезПоследних.ЗалОбслуживания КАК СкладКомпании,
		|	СкидкиШапкиСрезПоследних.СкидкаНаТовары,
		|	СкидкиШапкиСрезПоследних.СкидкаНаРаботы,
		|	СкидкиШапкиСрезПоследних.Свойство
		|ИЗ
		|	РегистрСведений.СкидкиШапки.СрезПоследних(
		|		&Дата,
		|		ПодразделениеКомпании = &ПодразделениеКомпании
		|//ФИЛЬТРЫ
		|			И Скидка = &Скидка) КАК СкидкиШапкиСрезПоследних
		|ГДЕ
		|	СкидкиШапкиСрезПоследних.Действует
		|
		|УПОРЯДОЧИТЬ ПО
		|	СкидкиШапкиСрезПоследних.Период
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Дата",                  Новый Граница(Объект.ДатаНачалаДействия, ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
		Запрос.УстановитьПараметр("Скидка",                Строка.Скидка);
		
		// Построим дополнительный фильтр по всем заполненным полям текущей строки
		СписокПолей = Новый Структура();
		СписокПолей.Вставить("НачВремя",                 Строка.НачВремя);
		СписокПолей.Вставить("КонВремя",                 Строка.КонВремя);
		СписокПолей.Вставить("ДниНедели",                ?(Строка.ДниНедели = "0000000", "", Строка.ДниНедели));
		СписокПолей.Вставить("ДисконтнаяКарта",          Строка.ДисконтнаяКарта);
		СписокПолей.Вставить("ОтСуммыНакопленияНаКарте", Строка.СуммаНакопления);
		СписокПолей.Вставить("ЗалОбслуживания",          Строка.СкладКомпании);
		СписокПолей.Вставить("Свойство",                 Строка.Свойство);
		СписокПолей.Вставить("ОтСуммыЧека",              Строка.СуммаЧека);
		
		ДопПоляОтбора = "";
		
		Для Каждого ТекПоле Из СписокПолей Цикл
			Если НЕ ЗначениеЗаполнено(ТекПоле.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			ДопПоляОтбора = ДопПоляОтбора + "			И "+ТекПоле.Ключ+" = &"+ТекПоле.Ключ + Символы.ПС;
			Запрос.УстановитьПараметр(ТекПоле.Ключ,ТекПоле.Значение);
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(ДопПоляОтбора) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ФИЛЬТРЫ", ДопПоляОтбора);
		КонецЕсли;
		
		// Установим текст запроса и произведем заполнение строки документа найденными данными.
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Строка, Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СкидкиСкидкаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Значение скидки" в таблице "Скидки".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкиЗначениеСкидкиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если (Строка.ЗначениеСкидки > 100) И (Строка.Скидка.СпособВычисления=Перечисления.СкидкиСпособВычисления.Относительная) И (ЗначениеЗаполнено(Строка.Скидка)) Тогда
		Строка.ЗначениеСкидки = 100;
	КонецЕсли;
	
КонецПроцедуры // СкидкиЗначениеСкидкиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Дисконтная карта" в таблице "Скидки".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкиДисконтнаяКартаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Строка.ДисконтнаяКарта) Тогда
		Строка.СуммаНакопления = 0;
	КонецЕсли;
	
КонецПроцедуры // СкидкиДисконтнаяКартаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Конечное время" в таблице "Скидки".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкиКонВремяПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Строка.КонВремя = Дата("00010101000000") Тогда
		Строка.КонВремя  = Дата("00010101235959");
	КонецЕсли;	
	
КонецПроцедуры // СкидкиКонВремяПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Скидки");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "НазначениеСкидокШапки");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Скидки");
	КонецЕсли;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "СкидкиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить действующими скидками'");
	Команда.Идентификатор	= "СкидкиЗаполнитьДействующимиСкидками";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Скидки";	
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("СкидкиЗаполнитьДействующимиСкидками.Видимость",   (НЕ Объект.ХозОперация = Справочники.ХозОперации.НазначениеОбщихСкидок));
	ПараметрыКоманд.Вставить("СкидкиЗаполнитьДействующимиСкидками.Доступность", Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по заказам контрагенту
//
Функция СкидкиЗаполнитьДействующимиСкидками(Ссылка, ПараметрыКоманды, ПараметрыДействия=Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкидкиШапкиСрезПоследних.Скидка,
	|	СкидкиШапкиСрезПоследних.ФлагВытеснения,
	|	СкидкиШапкиСрезПоследних.СкидкаНаТовары,
	|	СкидкиШапкиСрезПоследних.СкидкаНаРаботы,
	|	СкидкиШапкиСрезПоследних.ЗначениеСкидки,
	|	СкидкиШапкиСрезПоследних.Свойство,
	|	СкидкиШапкиСрезПоследних.ОтСуммыЧека КАК СуммаЧека,
	|	СкидкиШапкиСрезПоследних.ДисконтнаяКарта,
	|	СкидкиШапкиСрезПоследних.ОтСуммыНакопленияНаКарте КАК СуммаНакопления,
	|	СкидкиШапкиСрезПоследних.НачВремя,
	|	СкидкиШапкиСрезПоследних.КонВремя,
	|	СкидкиШапкиСрезПоследних.ДниНедели,
	|	СкидкиШапкиСрезПоследних.ЗалОбслуживания КАК СкладКомпании,
	|	СкидкиШапкиСрезПоследних.ИдентификаторСкидки КАК ИдентификаторСкидки
	|ИЗ
	|	РегистрСведений.СкидкиШапки.СрезПоследних(
	|		&Дата,
	|		ПодразделениеКомпании = &ПодразделениеКомпании
	|		    И Скидка.ВидСкидки = &ВидСкидкиНаДокумент) КАК СкидкиШапкиСрезПоследних
	|ГДЕ
	|	СкидкиШапкиСрезПоследних.Действует
	|
	|УПОРЯДОЧИТЬ ПО
	|	СкидкиШапкиСрезПоследних.Период
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", Новый Граница(Объект.ДатаНачалаДействия, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	Запрос.УстановитьПараметр("ВидСкидкиНаДокумент", Перечисления.ВидыСкидок.НаДокумент);
	
	Объект.Скидки.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецФункции // СкидкиЗаполнитьДействующимиСкидками()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.НазначениеСкидокШапки",
		"НазначениеСкидокШапки",
		НСтр("ru = 'Назначение скидок шапки'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НазначениеСкидокШапки") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"НазначениеСкидокШапки",
															НСтр("ru = 'Назначение скидок шапки'"),
															ПечатьНазначениеСкидокШапки(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//	Адрес   - адрес структуры данных во временном хранилище.
//
Функция ПечатьНазначениеСкидокШапки(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НазначениеСкидокШапки_НазначениеСкидокШапки";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;

	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		// Получим макет печатной формы.
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.НазначениеСкидокШапки.НазначениеСкидокШапки");
		
		// Зададим параметры макета
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабличныйДокумент.АвтоМасштаб        = Истина;
		
		// Получение необходимых областей.
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// Заголовок
		ЗаполнитьЗначенияСвойств(ОбластьЗаголовок.Параметры,Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(
			Документ, Документ.ХозОперация.Наименование);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ОрганизацияПредставление = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ПодразделениеКомпанииПредставление =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ПодразделениеКомпании, Документ.Дата);
		
		// Выводим свойства
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Готовим шапку
		НомерСтраницы = 2; НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура();
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// Получим данные для печати.
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НазначениеСкидокШапкиСкидки.НомерСтроки,
		|	НазначениеСкидокШапкиСкидки.Скидка,
		|	НазначениеСкидокШапкиСкидки.Скидка.РучнаяСкидка КАК РучнаяСкидка,
		|	НазначениеСкидокШапкиСкидки.ФлагВытеснения,
		|	НазначениеСкидокШапкиСкидки.ЗначениеСкидки,
		|	НазначениеСкидокШапкиСкидки.СуммаЧека,
		|	НазначениеСкидокШапкиСкидки.ДисконтнаяКарта,
		|	НазначениеСкидокШапкиСкидки.СуммаНакопления,
		|	НазначениеСкидокШапкиСкидки.НачВремя,
		|	НазначениеСкидокШапкиСкидки.КонВремя,
		|	НазначениеСкидокШапкиСкидки.ДниНедели,
		|	ИСТИНА КАК Пн,
		|	ИСТИНА КАК Вт,
		|	ИСТИНА КАК Ср,
		|	ИСТИНА КАК Чт,
		|	ИСТИНА КАК Пт,
		|	ИСТИНА КАК Сб,
		|	ИСТИНА КАК Вс,
		|	НазначениеСкидокШапкиСкидки.СкладКомпании,
		|	НазначениеСкидокШапкиСкидки.Свойство,
		|	НазначениеСкидокШапкиСкидки.СкидкаНаТовары,
		|	НазначениеСкидокШапкиСкидки.СкидкаНаРаботы
		|ИЗ
		|	Документ.НазначениеСкидокШапки.Скидки КАК НазначениеСкидокШапкиСкидки
		|ГДЕ
		|	НазначениеСкидокШапкиСкидки.Ссылка = &Ссылка";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
		
		// Перебор строк
		ВыборкаТабличнойЧасти = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаТабличнойЧасти Из ВыборкаТабличнойЧасти Цикл
			// Заполняем данные строки.
			ДниНедели = СтрокаТабличнойЧасти.ДниНедели;
			СтрокаТабличнойЧасти.Пн = (Сред(ДниНедели, 1, 1) = "1");
			СтрокаТабличнойЧасти.Вт = (Сред(ДниНедели, 2, 1) = "1");
			СтрокаТабличнойЧасти.Ср = (Сред(ДниНедели, 3, 1) = "1");
			СтрокаТабличнойЧасти.Чт = (Сред(ДниНедели, 4, 1) = "1");
			СтрокаТабличнойЧасти.Пт = (Сред(ДниНедели, 5, 1) = "1");
			СтрокаТабличнойЧасти.Сб = (Сред(ДниНедели, 6, 1) = "1");
			СтрокаТабличнойЧасти.Вс = (Сред(ДниНедели, 7, 1) = "1");
			
			// Применим форматирование к полям строки.
			ОбластьСтрока.Параметры.Заполнить(СтрокаТабличнойЧасти);
			ОбластьСтрока.Параметры.ЗначениеСкидки           = Формат(СтрокаТабличнойЧасти.ЗначениеСкидки, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СуммаЧека                = Формат(СтрокаТабличнойЧасти.СуммаЧека, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СуммаНакопления          = Формат(СтрокаТабличнойЧасти.СуммаНакопления, ФорматВыводаСуммы);
			
			// Выводим строку, делая проверку попадания на лист.
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			КонецЕсли;
		КонецЦикла;
		
		// Заполнение подвала и итогов.
		ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'")
			+ Символы.НПП + ВыборкаТабличнойЧасти.Количество();
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// Блок области
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции  //ПечатьНазначениеСкидокСтроки()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.НазначениеСкидокШапки);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли