// Модуль объекта документа "Реализация автомобилей"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура выполняет контроль корректного проведения реализациии автомобилей перед записью.
//
// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	Если ОбработкаСобытийДокументаСервер.ВводСПустымОснованием(ДанныеЗаполнения) Тогда
		ТипЦен          = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенПродажиАвтомобилей", ЭтотОбъект);
		ВалютаДокумента = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен,, Ложь);
	КонецЕсли;
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Товары.Очистить();
	Для Каждого СтрокаАвтомобиля Из Автомобили Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаАвтомобиля.ИдентификаторАвтомобиля) Тогда
			СтрокаАвтомобиля.ИдентификаторАвтомобиля = Новый УникальныйИдентификатор;
		КонецЕсли;
		// !!!_Добавить скидки на автомобили
		Документы.РеализацияАвтомобилей.ДобавитьОборудованиеАвтомобиля(ЭтотОбъект, СтрокаАвтомобиля.Автомобиль, Истина);
	КонецЦикла;
	
	ИдентификаторГосударственногоКонтракта = ?(ЗначениеЗаполнено(ИдентификаторГосударственногоКонтракта),
		ИдентификаторГосударственногоКонтракта,
		ДоговорВзаиморасчетов.ИдентификаторГосударственногоКонтракта);
	
	ЗачетАвансов.Очистить();
	
КонецПроцедуры

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	ЗачетАвансов.Очистить();
	
КонецПроцедуры

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// проверим заполненность ТЧ Автомобили
	Для Каждого СтрокаАвтомобиля Из Автомобили Цикл
		Если ПустаяСтрока(СтрокаАвтомобиля.ИдентификаторАвтомобиля) Тогда
			СтрокаАвтомобиля.ИдентификаторАвтомобиля = Новый УникальныйИдентификатор();
		КонецЕсли;
	КонецЦикла;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим расстановку флажков, для поступления автомобилей без заказа
	Для Каждого СтрокаАвтомобиля Из Автомобили Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаАвтомобиля.ЗаказНаАвтомобиль) И СтрокаАвтомобиля.АвтомобильБезЗаказа = Ложь Тогда
			
			ТекстСообщения = НСтр("ru = 'Автомобиль <%1> отгружается без заказа. Установите признак поступления автомобиля без заказа.'");;
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстСообщения,СокрЛП(СтрокаАвтомобиля.Автомобиль)),
				ЭтотОбъект,
				"Автомобили",
				,Отказ
			);
			
		КонецЕсли;
	КонецЦикла;
	
	ОбработкаСобытийДокументаСервер.ПроверитьКорректностьТоваровКомиссионныхДокументов(
		ЭтотОбъект,
		Отказ,
		"Автомобили",
		"Автомобиль",
		Ложь
	);
	ОбработкаСобытийДокументаСервер.ПроверитьКорректностьТоваровКомиссионныхДокументов(ЭтотОбъект, Отказ);
	
	// Проверим заполнение РНПТ у послеживаемого товара
	УчетПрослеживаемыхТоваровСервер.ПроверитьЗаполнениеРНПТПрослеживаемогоТовара(ЭтотОбъект, "Автомобили", "Автомобиль");
	УчетПрослеживаемыхТоваровСервер.ПроверитьЗаполнениеРНПТПрослеживаемогоТовара(ЭтотОбъект);
	
	Отказ = Отказ Или Справочники
		.ДоговорыВзаиморасчетов
		.НеКорректноЗаполненИдентификаторГосКонтракта(ЭтотОбъект, ИдентификаторГосударственногоКонтракта);
	
	РасчетыСКонтрагентамиСервер.ПроверитьКорректностьЗачетаАвансов(ЭтотОбъект, Отказ);
	
КонецПроцедуры

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Обновим оборудование автомобилей
	Для каждого СтрокаАвтомобилей Из Автомобили Цикл
		Документы.РеализацияАвтомобилей.ДобавитьОборудованиеАвтомобиля(ЭтотОбъект, СтрокаАвтомобилей.Автомобиль, Ложь);
	КонецЦикла;
	
	ИтогиОперации = Документы.РеализацияАвтомобилей.РассчитатьИтогиОперации(ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ИтогиОперации);
	
	// Проверим на все открытые заказ-наряды и заявки на ремонт до даты реализации
	ПроверитьОткрытеДокуменыАвтомобиля(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
	// Проверим, что цепочка не испортится (новая реализация более ранним сроком, чем существующая, запрещена)
	ПередЗаписьюРеализацияАвтомобилей(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
	ЭтоУниверсальныйДокумент = ЭтоУниверсальныйДокумент
		И Документы.РеализацияАвтомобилей.ВозможенВводСчетФактурыВыданной(ЭтотОбъект);
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоЗаказамАвтомобилейПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоОстаткамАвтомобилейПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоКомплектацииПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ТипСчетФактуры", "СчетФактураВыданный");
	ОбработкаСобытийДокументаСервер.УдалитьПодчиненныеСФ(ЭтотОбъект, ПараметрыДействия, Отказ);
	
КонецПроцедуры

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, Режим) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ КонтрольКомплектацииАвтомобиляПриОтгрузке(Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	
	// проведем взаиморасчеты
	Если ХозОперация <> Справочники.ХозОперации.РеализацияАвтомобилейКомиссия Тогда
		
		// Перед формированием взаиморасчетов проверим всю сумму долга контрагента.
		ПроверитьСуммуДолгаКонтрагента(Отказ, Режим);
		
		Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
			ВыполнитьДвиженияПоВзаиморасчетам(Отказ, Режим);
		КонецЕсли;
		
	КонецЕсли;
	
	Документы.РеализацияАвтомобилей.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	Документы.РеализацияАвтомобилей.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	Отказ = ПроверитьЗаказыНаАвтомобиль() ИЛИ Отказ;
	
	// Для начала закроем заказы покупателя на эти автомобили
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	РеализацияАвтомобилейАвтомобили.Автомобиль КАК Автомобиль
	|ПОМЕСТИТЬ
	|	ТаблицаАвтомобили
	|ИЗ
	|	Документ.РеализацияАвтомобилей.Автомобили КАК РеализацияАвтомобилейАвтомобили
	|ГДЕ
	|	РеализацияАвтомобилейАвтомобили.Ссылка = &Ссылка И 
	|	РеализацияАвтомобилейАвтомобили.АвтомобильБезЗаказа = ЛОЖЬ
	|ИНДЕКСИРОВАТЬ ПО
	|	Автомобиль
	|;
	|
	|ВЫБРАТЬ
	|	ЗаказыАвтомобилейОстатки.Автомобиль КАК Автомобиль,
	|	ЗаказыАвтомобилейОстатки.Заказ КАК Заказ,
	|	ЗаказыАвтомобилейОстатки.Заказ.Контрагент КАК Контрагент,
	|	ЗаказыАвтомобилейОстатки.Заказ.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ЕСТЬNULL(ЗаказыАвтомобилейОстатки.КоличествоОстаток, 0) КАК Количество,
	|	ЕСТЬNULL(ЗаказыАвтомобилейОстатки.РезервОстаток, 0) КАК Резерв,
	|	ЕСТЬNULL(ЗаказыАвтомобилейОстатки.СуммаОстаток, 0) КАК Сумма,
	|	ЕСТЬNULL(ЗаказыАвтомобилейОстатки.СуммаУпрОстаток, 0) КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.ЗаказыАвтомобилей.Остатки(
	|	&НаДату,
	|	Автомобиль В (ВЫБРАТЬ Автомобиль ИЗ ТаблицаАвтомобили)) КАК ЗаказыАвтомобилейОстатки";
	
	Запрос.УстановитьПараметр("Ссылка"     , Ссылка);
	Запрос.УстановитьПараметр("ПустойЗаказ", Документы.ЗаказНаАвтомобиль.ПустаяСсылка());
	Запрос.УстановитьПараметр("НаДату"     , Дата);
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ЗаказыАвтомобилей");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, Дата));
	
	СтруктураПараметровБлокировки.Вставить("ИсточникДанных", Автомобили);
	ОписаниеИсточника = Новый Соответствие;
	ОписаниеИсточника.Вставить("Автомобиль", "Автомобиль");
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	
	ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
	ТаблицаЗаказов.Индексы.Добавить("Автомобиль");
	НаборЗаписейЗаказыАвтомобилей = Движения.ЗаказыАвтомобилей;
	
	Для Каждого ТекСтрока Из Автомобили Цикл
		
		СервисныеКампании = АвтомобилиСервер.ПроверитьСервиснуюКампанию(ТекСтрока.Автомобиль, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()), Истина);
		СервисныеКампании = СервисныеКампании.ВыгрузитьКолонку("СервиснаяКампания");
		Если СервисныеКампании.Количество() > 1 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Для автомобиля <%1> найдены невыполненные сервисные кампании'"),ТекСтрока.Автомобиль
				),
				ТекСтрока.Автомобиль
			);
		ИначеЕсли СервисныеКампании.Количество() = 1 Тогда
		ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Для автомобиля <%1> найдена невыполненная сервисная кампания'"),ТекСтрока.Автомобиль
				),
				ТекСтрока.Автомобиль
			);
		КонецЕсли;
		
		Если ТекСтрока.АвтомобильБезЗаказа Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЗаказа = ТаблицаЗаказов.Найти(ТекСтрока.Автомобиль, "Автомобиль");
		
		Если СтрокаЗаказа = Неопределено ИЛИ ТекСтрока.Количество>СтрокаЗаказа.Количество Тогда
			
			ТекстСообщения = НСтр("ru = 'Автомобиль <%1> не заказывался.Закрытие заказа невозможно.'");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстСообщения, ТекСтрока.Автомобиль),
				ТекСтрока.Автомобиль,
				,, Отказ
			);
			
			Продолжить;
		ИначеЕсли СтрокаЗаказа.Заказ <> ТекСтрока.ЗаказНаАвтомобиль Тогда
			
			ТекстСообщения = НСтр("ru = 'Автомобиль <%1> заказан документом <%2>. Закрытие чужого заказа невозможно.'");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстСообщения, СтрокаЗаказа.Автомобиль, СтрокаЗаказа.Заказ),
				СтрокаЗаказа.Автомобиль,
				,, Отказ
			);
			
			Продолжить;
		ИначеЕсли СтрокаЗаказа.Контрагент <> Контрагент Тогда
			
			ТекстСообщения = НСтр("ru = 'Автомобиль <%1> заказан контрагентом <%2>. Закрытие чужого заказа невозможно.'");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстСообщения, СтрокаЗаказа.Автомобиль, СтрокаЗаказа.Контрагент),
				СтрокаЗаказа.Автомобиль,
				,, Отказ
			);
			
			Продолжить;
		ИначеЕсли СтрокаЗаказа.ДоговорВзаиморасчетов<>ДоговорВзаиморасчетов Тогда
			
			ТекстСообщения = НСтр("ru = 'Автомобиль <%1> заказан контрагентом согласно договора <%2>. Закрытие заказа по другому договору невозможно.'");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстСообщения, СтрокаЗаказа.Автомобиль,СтрокаЗаказа.ДоговорВзаиморасчетов),
				СтрокаЗаказа.Автомобиль,
				,, Отказ
			);
			
			Продолжить;
		ИначеЕсли СтрокаЗаказа.Резерв = 0 Тогда
			
			ТекстСообщения = НСтр("ru = 'Автомобиль <%1> не зарезервирован. Закрытие заказа невозможно. Закрытие заказа невозможно.'");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстСообщения,ТекСтрока.Автомобиль),
				ТекСтрока.Автомобиль,
				,, Отказ
			);
			
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписейЗаказыАвтомобилей.Добавить();
		
		НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
		НоваяЗапись.Период      = Дата;
		НоваяЗапись.Регистратор = Ссылка;
		НоваяЗапись.Автомобиль  = СтрокаЗаказа.Автомобиль;
		НоваяЗапись.Заказ       = СтрокаЗаказа.Заказ;
		НоваяЗапись.Количество  = СтрокаЗаказа.Количество;
		НоваяЗапись.Резерв      = СтрокаЗаказа.Резерв;
		НоваяЗапись.Сумма       = СтрокаЗаказа.Сумма;
		НоваяЗапись.СуммаУпр    = СтрокаЗаказа.СуммаУпр;
		НоваяЗапись.ХозОперация = ХозОперация;
		
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		НаборЗаписейЗаказыАвтомобилей.Записать();
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		// получим шапку документа
		ШапкаДокумента = ПолучитьШапкуДокумента(Ссылка);

		// Спишем автомобиль со склада
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументАвтомобили.Автомобиль КАК Автомобиль,
		|	ДокументАвтомобили.Количество КАК Количество,
		|	ДокументАвтомобили.СуммаВсего КАК СуммаПродажи,
		|	ДокументАвтомобили.Цена КАК ЦенаАвтомобиля
		|ИЗ
		|	Документ.РеализацияАвтомобилей.Автомобили КАК ДокументАвтомобили
		|ГДЕ
		|	ДокументАвтомобили.Ссылка = &Ссылка";
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		НаборЗаписейОстаткиАвтомобилей = Движения.ОстаткиАвтомобилей;
		НаборЗаписейОстаткиАвтомобилей.РежимПроведения               = Режим;
		НаборЗаписейОстаткиАвтомобилей.ДокументОбъект                = ЭтотОбъект;
		НаборЗаписейОстаткиАвтомобилей.РезультатЗапросаПоАвтомобилям = Запрос.Выполнить().Выгрузить();
		НаборЗаписейОстаткиАвтомобилей.СкладКомпании                 = СкладКомпании;
		НаборЗаписейОстаткиАвтомобилей.СуммаПродажи                  = "СуммаПродажи";
		НаборЗаписейОстаткиАвтомобилей.ШапкаДокумента                = ШапкаДокумента;

		Отказ = НЕ НаборЗаписейОстаткиАвтомобилей.Расход() ИЛИ Отказ;
		
		Если НЕ Отказ Тогда
			НаборЗаписейОстаткиАвтомобилей.Записать();
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ Отказ Тогда
		Отказ=НЕ ПровестиПоПартиям(Режим,Ссылка) ИЛИ Отказ;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ШапкаДокумента = ПолучитьШапкуДокумента(Ссылка);
		ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
		 		
		// комиссия
		Если ХозОперация=Справочники.ХозОперации.РеализацияАвтомобилейКомиссия Тогда
			
			// проведем партии автомобилей переданные на комиссию
			НаборЗаписейАвтомобилиОтданные = Движения.АвтомобилиОтданные;
			НаборЗаписейАвтомобилиОтданные.ДокументОбъект                = ЭтотОбъект;
			НаборЗаписейАвтомобилиОтданные.Контрагент                    = Контрагент;
			НаборЗаписейАвтомобилиОтданные.ДоговорВзаиморасчетов         = ДоговорВзаиморасчетов;
			НаборЗаписейАвтомобилиОтданные.РезультатЗапросаПоАвтомобилям = Неопределено;
			
			Отказ = НЕ НаборЗаписейАвтомобилиОтданные.Приход() ИЛИ Отказ;
			
			// Определим необходимость формирования корректирующих проводок
			// получим шапку документа.
			ПодразделениеСклад                 = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ШапкаДокумента.СкладКомпании.ПодразделениеКомпании,ШапкаДокумента.Дата);
			ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании,ШапкаДокумента.Дата);
			БалансовыеПодразделенияНеРавны     = (ПодразделениеДоговорВзаиморасчетов <> ПодразделениеСклад);
			
			// Если балансовые подразделение договора и подразделения склад не равны, то сформируем корректирующие проводки.
			Если ВедетсяБалансПоПодразделению И БалансовыеПодразделенияНеРавны Тогда
				НаборЗаписейОстаткиАвтомобилей      = Движения.ОстаткиАвтомобилей;
				НаборЗаписейКомплектацияАвтомобилей = Движения.КомплектацияАвтомобилей;
				
				СебестоимостьУпр = НаборЗаписейОстаткиАвтомобилей.Итог("СуммаУпр")+НаборЗаписейКомплектацияАвтомобилей.Итог("СуммаУпр");
				
				// сумма себестоимости списанных автомобилей
				НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
				НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
				НаборЗаписейДоходыИРасходы.Подразделение          = ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
				НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
				НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
				НаборЗаписейДоходыИРасходы.Доход                  = СебестоимостьУпр;
				НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
				
				Отказ = НЕ НаборЗаписейДоходыИРасходы.Расход() ИЛИ Отказ;
				
				НаборЗаписейАвтомобилиОтданные = Движения.АвтомобилиОтданные;
				НаборЗаписейПартииОтданные     = Движения.ПартииТоваровОтданные;
				
				СебестоимостьУпр = НаборЗаписейАвтомобилиОтданные.Итог("СуммаСебестоимостиУпр") + НаборЗаписейПартииОтданные.Итог("СуммаСебестоимостиУпр");
				
				// сумма себестоимости списанных товаров
				НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
				НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
				НаборЗаписейДоходыИРасходы.Подразделение          = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
				НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
				НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
				НаборЗаписейДоходыИРасходы.Доход                  = СебестоимостьУпр;
				НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
				
				Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
			КонецЕсли;
		Иначе
			
			РасчетыСКонтрагентами = РасчетыСКонтрагентамиСервер.ДвиженияРасчетовСКонтрагентамиПоДокументу(
				ЭтотОбъект,
				ШапкаДокумента);
			
			// спишем реализованные комиссионные автомобили
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ОстаткиАвтомобилей.Автомобиль КАК Автомобиль,
			|	ОстаткиАвтомобилей.Количество КАК Количество,
			|	РеализацияАвтомобилейАвтомобили.СуммаВсего КАК СуммаПродажи,
			|	РеализацияАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС
			|ИЗ
			|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияАвтомобилей.Автомобили КАК РеализацияАвтомобилейАвтомобили
			|		ПО ОстаткиАвтомобилей.Автомобиль = РеализацияАвтомобилейАвтомобили.Автомобиль
			|			И ОстаткиАвтомобилей.Регистратор = РеализацияАвтомобилейАвтомобили.Ссылка
			|ГДЕ
			|	ОстаткиАвтомобилей.Регистратор = &Регистратор
			|	И ОстаткиАвтомобилей.СтатусПартии = &СтатусПартииТоварПринятыйКомиссия";
			Запрос.УстановитьПараметр("Регистратор"                       , Ссылка);
			Запрос.УстановитьПараметр("СтатусПартииТоварПринятыйКомиссия" , Перечисления.СтатусыПартий.ТоварПринятыйКомиссия);
			
			НаборЗаписейРеализованныеАвтомобили = Движения.РеализованныеАвтомобили;
			НаборЗаписейРеализованныеАвтомобили.ДокументОбъект                = ЭтотОбъект;
			НаборЗаписейРеализованныеАвтомобили.Контрагент                    = Контрагент;
			НаборЗаписейРеализованныеАвтомобили.ДоговорВзаиморасчетов         = ДоговорВзаиморасчетов;
			НаборЗаписейРеализованныеАвтомобили.РезультатЗапросаПоАвтомобилям = Запрос.Выполнить();
			НаборЗаписейРеализованныеАвтомобили.ВУпрВалюте                    = Ложь;
			
			Отказ = НЕ НаборЗаписейРеализованныеАвтомобили.Приход() ИЛИ Отказ;
			
			// продажи автомобилей
			Если НЕ Отказ Тогда
				НаборЗаписейПродажиАвтомобилей = Движения.ПродажиАвтомобилей;
				НаборЗаписейПродажиАвтомобилей.ДокументОбъект                = ЭтотОбъект;
				НаборЗаписейПродажиАвтомобилей.СкладКомпании                 = СкладКомпании;
				НаборЗаписейПродажиАвтомобилей.ДокументПродажи               = Ссылка;
				НаборЗаписейПродажиАвтомобилей.Сторно                        = Ложь;
				НаборЗаписейПродажиАвтомобилей.Покупатель                    = Контрагент;
				НаборЗаписейПродажиАвтомобилей.ДоговорВзаиморасчетов         = ДоговорВзаиморасчетов;
				НаборЗаписейПродажиАвтомобилей.ПодразделениеКомпании         = ПодразделениеКомпании;
				НаборЗаписейПродажиАвтомобилей.Комиссия                      = Ложь; 
				НаборЗаписейПродажиАвтомобилей.РасчетыСКонтрагентами         = РасчетыСКонтрагентами;
				НаборЗаписейПродажиАвтомобилей.РезультатЗапросаПоАвтомобилям = НаборЗаписейПродажиАвтомобилей.ПолучитьТаблицуАвтомобилей().Выгрузить();
				
				Отказ = НЕ НаборЗаписейПродажиАвтомобилей.Приход() ИЛИ Отказ;
			КонецЕсли;
			
			// доходы и расходы
			НаборЗаписейРеализованныеТовары = Движения.РеализованныеТовары;
			НаборЗаписейРеализованныеТовары.Записать();
			НаборЗаписейРеализованныеАвтомобили.Записать();
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОбъединенныйЗапрос.Подразделение КАК Подразделение,
			|	ЕСТЬNULL(СУММА(ОбъединенныйЗапрос.СуммаАвтомобилейУпр), 0) КАК СуммаАвтомобилейУпр,
			|	ЕСТЬNULL(СУММА(ОбъединенныйЗапрос.СуммаОборудованияУпр), 0) КАК СуммаОборудованияУпр
			|ИЗ(
			|ВЫБРАТЬ
			|	РеализованныеАвтомобили.ДоговорВзаиморасчетов.ПодразделениеКомпании КАК Подразделение,
			|	ЕСТЬNULL(СУММА(РеализованныеАвтомобили.СуммаУпр), 0) КАК СуммаАвтомобилейУпр,
			|	0 КАК СуммаОборудованияУпр
			|ИЗ
			|	РегистрНакопления.РеализованныеАвтомобили КАК РеализованныеАвтомобили
			|ГДЕ
			|	РеализованныеАвтомобили.Регистратор = &Регистратор
			|СГРУППИРОВАТЬ ПО
			|	РеализованныеАвтомобили.ДоговорВзаиморасчетов.ПодразделениеКомпании
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РеализованныеТовары.ДоговорВзаиморасчетов.ПодразделениеКомпании,
			|	0,
			|	ЕСТЬNULL(СУММА(РеализованныеТовары.СуммаУпр),0)
			|ИЗ
			|	РегистрНакопления.РеализованныеТовары КАК РеализованныеТовары
			|ГДЕ
			|	РеализованныеТовары.Регистратор = &Регистратор
			|СГРУППИРОВАТЬ ПО
			|	РеализованныеТовары.ДоговорВзаиморасчетов.ПодразделениеКомпании
			|) КАК ОбъединенныйЗапрос
			|СГРУППИРОВАТЬ ПО
			|	ОбъединенныйЗапрос.Подразделение";
			Запрос.УстановитьПараметр("Регистратор", ШапкаДокумента.Ссылка);
			
			// В случае если ведется баланс по подразделению передадим подразделение соответствующее корреспонденции.
			Если ВедетсяБалансПоПодразделению Тогда
				Выборка = Запрос.Выполнить().Выбрать();
				НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
				Пока Выборка.Следующий() Цикл
					СуммаАвтомобилейУпр  = Выборка.СуммаАвтомобилейУпр;
					СуммаОборудованияУпр = Выборка.СуммаОборудованияУпр;
					Если СуммаАвтомобилейУпр <> 0 Тогда
						НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
						НаборЗаписейДоходыИРасходы.Подразделение          = Выборка.Подразделение;
						НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьАвтомобилей;
						НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
						НаборЗаписейДоходыИРасходы.Расход                 = СуммаАвтомобилейУпр;
						НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
						
						Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
					КонецЕсли;
					Если СуммаОборудованияУпр <> 0 Тогда
						НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
						НаборЗаписейДоходыИРасходы.Подразделение          = Выборка.Подразделение;
						НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.Себестоимость;
						НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
						НаборЗаписейДоходыИРасходы.Расход                 = СуммаОборудованияУпр;
						НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
						
						Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
					КонецЕсли;
				КонецЦикла; 
			Иначе
				ТаблицаСебестоимости = Запрос.Выполнить().Выгрузить();
				СуммаАвтомобилейУпр  = ТаблицаСебестоимости.Итог("СуммаАвтомобилейУпр");
				СуммаОборудованияУпр = ТаблицаСебестоимости.Итог("СуммаОборудованияУпр");
				Если СуммаАвтомобилейУпр <> 0 Тогда
					НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
					НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
					НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьАвтомобилей;
					НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
					НаборЗаписейДоходыИРасходы.Расход                  = СуммаАвтомобилейУпр;
					НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
					
					Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
				КонецЕсли;
				Если СуммаОборудованияУпр <> 0 Тогда
					НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
					НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
					НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.Себестоимость;
					НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
					НаборЗаписейДоходыИРасходы.Расход                 = СуммаОборудованияУпр;
					НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
					
					Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ОбработкаПроведенияНакопленияПоКарточкамКонтрагентов();
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		ЭтоРеализацияАвтомобилей = ХозОперация = Справочники.ХозОперации.РеализацияАвтомобилей;
		
		// Запишем историю владельцев автомобилей
		Для Каждого ТекСтрока Из Автомобили Цикл
			
			Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(
				ТекСтрока.Автомобиль,
				Заказчик,
				Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин,
				Дата,
				Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.РеализацияАвтомобиля);
			
			Если ЭтоРеализацияАвтомобилей Тогда
				
				Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(
					ТекСтрока.Автомобиль,
					ТекСтрока.ПриобретенУФизЛица,
					Перечисления.ДополнительнаяИнформацияАвтомобилей.ПриобретенУФизЛица,
					Дата,
					Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.РеализацияАвтомобиля);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	Если НЕ Отказ И НЕ ТипЦен.Рассчитывается И ХозОперация = Справочники.ХозОперации.РеализацияАвтомобилей И  СброситьСведенияОЦене Тогда
		
		НаборЗаписейЦены                = Движения.ЦеныАвтомобилей;
		НаборЗаписейЦены.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейЦены.ТипЦен         = ТипЦен;

		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	РеализацияАвтомобилейАвтомобили.Автомобиль КАК Автомобиль,
		                      |	ЗНАЧЕНИЕ(Справочник.ВариантыКомплектации.ПустаяССылка) КАК ВариантКомплектации,
		                      |	РеализацияАвтомобилейАвтомобили.Цена КАК ЦенаВБазе,
		                      |	0 КАК НоваяЦена
		                      |ИЗ
		                      |	Документ.РеализацияАвтомобилей.Автомобили КАК РеализацияАвтомобилейАвтомобили
		                      |ГДЕ
		                      |	РеализацияАвтомобилейАвтомобили.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
				
		НаборЗаписейЦены.РезультатЗапросаПоАвтомобилям = Запрос.Выполнить();
		
		НаборЗаписейЦены.ПроверятьОдинаковыеЦены = Ложь;
		
		Отказ = НЕ НаборЗаписейЦены.УстановитьЦены() ИЛИ Отказ;
	КонецЕсли;
	
	// Проверим налиие прослеживаемых товаров, которые были реализованы
	Если НЕ Отказ Тогда
		Движения.ПродажиАвтомобилей.Записать();
	КонецЕсли;
	ТаблицаПрослеживаемыхТоваров = Документы.РеализацияАвтомобилей.ОперацииСПрослеживаемымиТоварами(
		ЭтотОбъект);
	НаборЗаписейОперацииПрослеживаемости = Движения.ОперацииПрослеживаемыхТоваров;
	НаборЗаписейОперацииПрослеживаемости.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейОперацииПрослеживаемости.ТаблицаПрослеживаемыхТоваров = ТаблицаПрослеживаемыхТоваров;
	Если НЕ НаборЗаписейОперацииПрослеживаемости.ДобавитьОперациюПрослеживаемости() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// двигаем границу последовательности автомобилей
	РаботаСГраницами.СдвинутьГраницуОстатковАвтомобилей(Ссылка, ДополнительныеСвойства, Движения);
	
	ДвигаемГраницу = (Режим <> РежимПроведенияДокумента.Оперативный И Движения.КомплектацияАвтомобилей.Количество() > 0);
	
	// двигаем границу последовательности комплектаций автомобилей
	РаботаСГраницами.СдвинутьГраницуКомплектации(Ссылка, ДополнительныеСвойства, Движения);
	
	// двигаем границу последовательности взаиморасчетов
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	
	// двигаем границу последовательности заказы на автомобиль
	РаботаСГраницами.СдвинутьГраницуЗаказовАвтомобилей(Ссылка, ДополнительныеСвойства, Движения);

	ПараметрыДействия = Новый Структура;
	ОбработкаСобытийДокументаСервер.СоздатьОбновитьСФВыданный(ЭтотОбъект, ДополнительныеСвойства, ПараметрыДействия, Отказ);
	
КонецПроцедуры // ОбработкаПроведения

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверка на совпадение параметров автомобиля заказанным
//
Функция КонтрольКомплектацииАвтомобиляПриОтгрузке(Отказ)
	
	КонтрольУспешен = Истина;
	
	Если НЕ ПраваИНастройкиПользователя.Значение("КонтрольКомплектацииАвтомобиляПриОтгрузке", ЭтотОбъект) Тогда
		Возврат КонтрольУспешен;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияАвтомобилейАвтомобили.ИдентификаторАвтомобиля,
	|	РеализацияАвтомобилейАвтомобили.Автомобиль,
	|	РеализацияАвтомобилейАвтомобили.ЗаказНаАвтомобиль
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.РеализацияАвтомобилей.Автомобили КАК РеализацияАвтомобилейАвтомобили
	|ГДЕ
	|	РеализацияАвтомобилейАвтомобили.Ссылка = &Ссылка
	|	И РеализацияАвтомобилейАвтомобили.ЗаказНаАвтомобиль <> ЗНАЧЕНИЕ(Документ.ЗаказНаАвтомобиль.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияАвтомобилейАвтомобили.ИдентификаторАвтомобиля,
	|	РеализацияАвтомобилейАвтомобили.Автомобиль,
	|	РеализацияАвтомобилейАвтомобили.ЗаказНаАвтомобиль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОпцииАвтомобилей.Автомобиль,
	|	ОпцииАвтомобилей.Опция,
	|	ОпцииАвтомобилей.Количество
	|ПОМЕСТИТЬ ТекущиеОпции
	|ИЗ
	|	РегистрСведений.ОпцииАвтомобилей КАК ОпцииАвтомобилей
	|ГДЕ
	|	ОпцииАвтомобилей.ЗаписьАктивна = ИСТИНА
	|	И ОпцииАвтомобилей.Автомобиль В
	|			(ВЫБРАТЬ
	|				ТаблицаДокумента.Автомобиль
	|			ИЗ
	|				ТаблицаДокумента КАК ТаблицаДокумента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КомплектацияАвтомобилейОстатки.Автомобиль,
	|	КомплектацияАвтомобилейОстатки.Номенклатура,
	|	КомплектацияАвтомобилейОстатки.КоличествоОстаток КАК Количество
	|ПОМЕСТИТЬ ТекущееОборудование
	|ИЗ
	|	РегистрНакопления.КомплектацияАвтомобилей.Остатки(
	|			&Момент,
	|			Автомобиль В
	|				(ВЫБРАТЬ
	|					ТаблицаДокумента.Автомобиль
	|				ИЗ
	|					ТаблицаДокумента КАК ТаблицаДокумента)) КАК КомплектацияАвтомобилейОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаАвтомобильОпции.Ссылка КАК Заказ,
	|	ЗаказНаАвтомобильОпции.Опция,
	|	ЗаказНаАвтомобильОпции.Количество
	|ПОМЕСТИТЬ ЗаказанныеОпции
	|ИЗ
	|	Документ.ЗаказНаАвтомобиль.Опции КАК ЗаказНаАвтомобильОпции
	|ГДЕ
	|	ЗаказНаАвтомобильОпции.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаДокумента.ЗаказНаАвтомобиль
	|			ИЗ
	|				ТаблицаДокумента КАК ТаблицаДокумента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаАвтомобильТовары.Ссылка КАК Заказ,
	|	ЗаказНаАвтомобильТовары.Номенклатура,
	|	ЗаказНаАвтомобильТовары.Количество
	|ПОМЕСТИТЬ ЗаказанноеОборудование
	|ИЗ
	|	Документ.ЗаказНаАвтомобиль.Товары КАК ЗаказНаАвтомобильТовары
	|ГДЕ
	|	ЗаказНаАвтомобильТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаДокумента.ЗаказНаАвтомобиль
	|			ИЗ
	|				ТаблицаДокумента КАК ТаблицаДокумента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ЗаказанныеОпции.Опция, ТекущиеОпции.Опция) КАК Опция,
	|	ЗаказанныеОпции.Заказ,
	|	ЕстьNULL(ТекущиеОпции.Автомобиль, ЗаказанныеОпции.Заказ.Автомобиль) КАК Автомобиль,
	|	ЕСТЬNULL(ЗаказанныеОпции.Количество, 0) КАК КоличествоЗаказано,
	|	ЕСТЬNULL(ТекущиеОпции.Количество, 0) КАК КоличествоТекущее
	|ИЗ
	|	ТекущиеОпции КАК ТекущиеОпции
	|		ПОЛНОЕ СОЕДИНЕНИЕ ЗаказанныеОпции КАК ЗаказанныеОпции
	|		ПО ТекущиеОпции.Опция = ЗаказанныеОпции.Опция
	|ГДЕ
	|	ЕСТЬNULL(ЗаказанныеОпции.Количество, 0) <> ЕСТЬNULL(ТекущиеОпции.Количество, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказанноеОборудование.Заказ,
	|	ЕстьNULL(ТекущееОборудование.Автомобиль, ЗаказанноеОборудование.Заказ.Автомобиль) КАК Автомобиль,
	|	ЕСТЬNULL(ЗаказанноеОборудование.Номенклатура, ТекущееОборудование.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ЗаказанноеОборудование.Количество, 0) КАК КоличествоЗаказанное,
	|	ЕСТЬNULL(ТекущееОборудование.Количество, 0) КАК КоличествоТекущее
	|ИЗ
	|	ТекущееОборудование КАК ТекущееОборудование
	|		ПОЛНОЕ СОЕДИНЕНИЕ ЗаказанноеОборудование КАК ЗаказанноеОборудование
	|		ПО ТекущееОборудование.Номенклатура = ЗаказанноеОборудование.Номенклатура
	|ГДЕ
	|	ЕСТЬNULL(ЗаказанноеОборудование.Количество, 0) <> ЕСТЬNULL(ТекущееОборудование.Количество, 0)";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Момент", МоментВремени());
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ОбщиеОпции        = РезультатЗапроса[РезультатЗапроса.Количество()-2].Выгрузить();
	ОбщееОборудование = РезультатЗапроса[РезультатЗапроса.Количество()-1].Выгрузить();
	
	Для Каждого СтрокаАвтомобиля Из Автомобили Цикл
		
		Если
			Не ЗначениеЗаполнено(СтрокаАвтомобиля.ЗаказНаАвтомобиль)
			Или ТипЗнч(СтрокаАвтомобиля.ЗаказНаАвтомобиль) <> Тип("ДокументСсылка.ЗаказНаАвтомобиль")
		Тогда
			Продолжить;
		КонецЕсли;
		
		// проверим данные автомобиля
		Если
			СтрокаАвтомобиля.Автомобиль.Модель <> СтрокаАвтомобиля.ЗаказНаАвтомобиль.Модель
			Или СтрокаАвтомобиля.Автомобиль.ВариантКомплектации <> СтрокаАвтомобиля.ЗаказНаАвтомобиль.ВариантКомплектации
			Или (
					(ЗначениеЗаполнено(СтрокаАвтомобиля.Автомобиль.Цвет))
					И (ЗначениеЗаполнено(СтрокаАвтомобиля.ЗаказНаАвтомобиль.Цвет))
					И (СтрокаАвтомобиля.Автомобиль.Цвет <> СтрокаАвтомобиля.ЗаказНаАвтомобиль.Цвет)
				)
		Тогда
			
			ТекстСообщенияАвтомобиль = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автомобиль <%1>, модель <%2>%3%4.'"),
				СокрЛП(СтрокаАвтомобиля.Автомобиль),
				СокрЛП(СтрокаАвтомобиля.Автомобиль.Модель),
				?(ЗначениеЗаполнено(СтрокаАвтомобиля.Автомобиль.ВариантКомплектации)," в комплектации <"+СокрЛП(СтрокаАвтомобиля.Автомобиль.ВариантКомплектации)+">", ""),
				?(ЗначениеЗаполнено(СтрокаАвтомобиля.Автомобиль.Цвет),", цвет <"+СокрЛП(СтрокаАвтомобиля.Автомобиль.Цвет)+">", "")
			);
			
			ТекстСообщенияЗаказ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По заказу <%1> заказывалась модель <%2>%3%4.'"),
				СокрЛП(СтрокаАвтомобиля.ЗаказНаАвтомобиль),
				СокрЛП(СтрокаАвтомобиля.ЗаказНаАвтомобиль.Модель),
				?(ЗначениеЗаполнено(СтрокаАвтомобиля.ЗаказНаАвтомобиль.ВариантКомплектации)," в комплектации <"+СокрЛП(СтрокаАвтомобиля.ЗаказНаАвтомобиль.ВариантКомплектации)+">", ""),
				?(ЗначениеЗаполнено(СтрокаАвтомобиля.ЗаказНаАвтомобиль.Цвет),", цвет <"+СокрЛП(СтрокаАвтомобиля.ЗаказНаАвтомобиль.Цвет)+">", "")
			);
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщенияАвтомобиль + Символы.ПС + ТекстСообщенияЗаказ,
				СтрокаАвтомобиля.ЗаказНаАвтомобиль,
				,
				,
				Отказ
			);
			
			КонтрольУспешен = Ложь;
			
		КонецЕсли;
		
		// проверим оборудование
		Отбор = Новый Структура("Заказ,Автомобиль", СтрокаАвтомобиля.ЗаказНаАвтомобиль, СтрокаАвтомобиля.Автомобиль);
		НайденныеОпции = ОбщиеОпции.НайтиСтроки(Отбор);
		Для Каждого Опция Из НайденныеОпции Цикл
			ТекстСообщения = НСтр("ru = 'Автомобиль <%1>. Опция <%2> по заказу <%3> заказывалась в количестве %4, укомплектован в количестве %5.'");
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					ТекстСообщения,
					СтрокаАвтомобиля.Автомобиль,
					Опция.Опция,
					СтрокаАвтомобиля.ЗаказНаАвтомобиль,
					Опция.КоличествоЗаказано,
					Опция.КоличествоТекущее
				),
				,
				,
				,
				Отказ
			);
			
			КонтрольУспешен = Ложь;
		КонецЦикла;
		
		НайденноеОборудование = ОбщееОборудование.НайтиСтроки(Отбор);
		Для Каждого Оборудование Из НайденноеОборудование Цикл
			ТекстСообщения = НСтр("ru = 'Автомобиль <%1>. Оборудование <%2> по заказу <%3> заказывалась в количестве %4, укомплектован в количестве %5.'");
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					ТекстСообщения,
					СтрокаАвтомобиля.Автомобиль,
					Оборудование.Номенклатура,
					СтрокаАвтомобиля.ЗаказНаАвтомобиль,
					Оборудование.КоличествоЗаказанное,
					Оборудование.КоличествоТекущее
				),
				,,,Отказ
			);
			
			КонтрольУспешен = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	Возврат КонтрольУспешен;
	
КонецФункции

// Проверка наличия других заказов на автомобиль с данным VINом
//
// Параметры
//  VINАвтомобиля - <Строка> - VIN автомобиля, заказы на который проверяются
//  ОбъектПроверки - <ДокументОбъект> - Документ, который проверяет наличие заказов.
//
// Возвращаемое значение:
//   <Булево> - Заказов на данный автомобиль нет.
//
Функция ПроверитьЗаказыНаАвтомобиль()
	ДокументОбъектСтруктура = Новый Структура();
	ДокументОбъектСтруктура.Вставить("Ссылка"        , Ссылка);
	ДокументОбъектСтруктура.Вставить("МоментВремени" , МоментВремени());
	
	Возврат ЗащищенныеФункцииАльфаАвтоСервер.РеализацияАвтомобилейПроверитьЗаказыНаАвтомобиль(ДокументОбъектСтруктура);
КонецФункции // ПроверитьЗаказыНаАвтомобиль()

// обработчик проведения по карточкам контрагнтов
//
Процедура ОбработкаПроведенияНакопленияПоКарточкамКонтрагентов()
	
	Если НЕ ЗначениеЗаполнено(Карточка) ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияАвтомобилейАвтомобили.Ссылка.Контрагент,
	|	РеализацияАвтомобилейАвтомобили.Ссылка.Карточка,
	|	РеализацияАвтомобилейАвтомобили.Ссылка.Дата КАК ПериодНакопления,
	|	СУММА(РеализацияАвтомобилейАвтомобили.Количество) КАК КоличествоНоменклатуры,
	|	СУММА(РеализацияАвтомобилейАвтомобили.СуммаВсего) КАК Сумма,
	|	СУММА(0) КАК КоличествоЧеков
	|ИЗ
	|	Документ.РеализацияАвтомобилей.Автомобили КАК РеализацияАвтомобилейАвтомобили
	|ГДЕ
	|	РеализацияАвтомобилейАвтомобили.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияАвтомобилейАвтомобили.Ссылка.Контрагент,
	|	РеализацияАвтомобилейАвтомобили.Ссылка.Дата,
	|	РеализацияАвтомобилейАвтомобили.Ссылка.Карточка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	НаборНакоплениеСумм = Движения.НакопленияПоКарточкамКонтрагентов;
	НаборНакоплениеСумм.ДокументСсылка   = Ссылка;
	НаборНакоплениеСумм.РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	НаборНакоплениеСумм.ВыполнитьДвижения();
	
КонецПроцедуры

Процедура ПередЗаписьюРеализацияАвтомобилей(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Не Источник.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		// Проверим есть ли в документе автомобили, которых нет на текущих остатках по партии, списываемой данной реализацией.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
			|	Автомобили.Автомобиль КАК Автомобиль,
			|	Автомобили.НомерСтроки КАК НомерСтроки
			|ПОМЕСТИТЬ Автомобили
			|ИЗ
			|	&Автомобили КАК Автомобили
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Автомобили.Автомобиль КАК Автомобиль,
			|	Автомобили.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	Автомобили КАК Автомобили
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиАвтомобилей.Остатки(
			|				,
			|				(Автомобиль, Партия) В
			|					(ВЫБРАТЬ
			|						ОстаткиАвтомобилейОстатки.Автомобиль КАК Автомобиль,
			|						ОстаткиАвтомобилейОстатки.Партия КАК Партия
			|					ИЗ
			|						РегистрНакопления.ОстаткиАвтомобилей.Остатки(&МоментВремени, Автомобиль В
			|							(ВЫБРАТЬ
			|								Автомобили.Автомобиль КАК Автомобиль
			|							ИЗ
			|								Автомобили КАК Автомобили)) КАК ОстаткиАвтомобилейОстатки)) КАК ОстаткиАвтомобилейОстатки
			|		ПО Автомобили.Автомобиль = ОстаткиАвтомобилейОстатки.Автомобиль
			|ГДЕ
			|	ОстаткиАвтомобилейОстатки.Автомобиль ЕСТЬ NULL";
		Запрос.УстановитьПараметр("МоментВремени", Новый Граница(Источник.МоментВремени(),ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("Автомобили",    Источник.Автомобили.Выгрузить(,"Автомобиль,НомерСтроки"));
		Результат = Запрос.Выполнить();
		
		// Есть автомобили, которых нет на текущих остатках по партии автомобиля.
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Автомобили",Выборка.НомерСтроки, "Автомобиль");
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Автомобиль <%1> отсутствует на остатках партии, которой он был оприходован. Расход невозможен.'"),
						Выборка.Автомобиль
					),
					Источник,
					ПутьКТабличнойЧасти,
					"Объект",
					Отказ
				);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюЗаказаНаАвтомобиль()

// Проверка на все открытые заказ-наряды и заявки на ремонт до даты реализации
//
Процедура ПроверитьОткрытеДокуменыАвтомобиля(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	// Если выполняется восстановление последовательностей, то отключим проверку
	Если ПолучитьЗначениеПараметраСтруктуры(Источник.ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПрава = ПраваИНастройкиПользователя.Значение("КонтрольОткрытыхЗаказНарядов");
	
	Если ЗначениеПрава = Перечисления.ВидыКонтроля.НеКонтролировать Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказНаряд.Ссылка КАК Ссылка,
	|	ЗаказНаряд.Дата КАК Дата,
	|	ЗаказНаряд.СводныйРемонтныйЗаказ КАК СводныйРемонтныйЗаказ,
	|	ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль КАК Автомобиль,
	|	ЗаказНаряд.Состояние КАК Состояние,
	|	ЗаказНаряд.СводныйРемонтныйЗаказ.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ НезакрытыеЗаказНаряды
	|ИЗ
	|	Документ.ЗаказНаряд КАК ЗаказНаряд
	|ГДЕ
	|	ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль В(&Автомобили)
	|	И ЗаказНаряд.Состояние <> ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.Закрыт)
	|	И НЕ ЗаказНаряд.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НезакрытыеЗаказНаряды.Ссылка КАК Ссылка,
	|	НезакрытыеЗаказНаряды.Автомобиль КАК Автомобиль
	|ИЗ
	|	НезакрытыеЗаказНаряды КАК НезакрытыеЗаказНаряды
	|ГДЕ
	|	НезакрытыеЗаказНаряды.Дата <= &Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкаНаРемонт.Ссылка,
	|	ЗаявкаНаРемонт.Автомобиль
	|ИЗ
	|	Документ.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
	|ГДЕ
	|	ЗаявкаНаРемонт.Дата <= &Дата
	|	И НЕ ЗаявкаНаРемонт.ПометкаУдаления
	|	И ЗаявкаНаРемонт.Ссылка В
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			НезакрытыеЗаказНаряды.ДокументОснование КАК ДокументОснование
	|		ИЗ
	|			НезакрытыеЗаказНаряды КАК НезакрытыеЗаказНаряды)
	|	И ЗаявкаНаРемонт.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостояниеЗаявкиНаРемонт.Отклонено)";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Автомобили", Источник.Автомобили.ВыгрузитьКолонку("Автомобиль"));
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'По автомобилю <%1> есть незакрытые документы <%2>.'"),
						Выборка.Автомобиль,
						Выборка.Ссылка
					),
					Источник,
					,
					,
					?(ЗначениеПрава = Перечисления.ВидыКонтроля.Запрещать, Отказ, Неопределено)
				);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьОткрытеДокуменыАвтомобиля

// Процедура проверки максимальной суммы долга контрагента
//
Процедура ПроверитьСуммуДолгаКонтрагента(Отказ, РежимПроведения)
	
	ПроверкаПревышенияКредита    = ПраваИНастройкиПользователя.Значение("ПроверкаМаксимальногоПревышенияКредитаКонтрагента", ЭтотОбъект);
	ДанныеДоговораВзаиморасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов,ОтменаКонтроляСуммыКредита,МаксимальныйКредит");
	
	Если ПраваИНастройкиПользователя.Значение("ПроверкаМаксимальногоПревышенияКредитаКонтрагента", ЭтотОбъект)
		И НЕ ДанныеДоговораВзаиморасчетов.ОтменаКонтроляСуммыКредита Тогда
		
		// Получим остатки взаиморасчетов по договору.
		ИменаИсточникаОстатков = РасчетыСКонтрагентамиСервер.ИменаИсточникаДанных(
			РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов));
		ТекстЗапроса = "ВЫБРАТЬ
		|	ЕСТЬNULL(РасчетыСКонтрагентамиОстатки.СуммаОстаток, 0) КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.#ИмяРегистра.Остатки(&Момент, 
		|							Контрагент = &Контрагент И ДоговорВзаиморасчетов=&ДоговорВзаиморасчетов) КАК РасчетыСКонтрагентамиОстатки
		|";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРегистра", ИменаИсточникаОстатков.ИмяРегистра);
		Если РежимПроведения=РежимПроведенияДокумента.Неоперативный Тогда
			НаМомент = Новый Граница(МоментВремени(),ВидГраницы.Исключая);
		Иначе
			НаМомент = Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		// Наложим блокировку на считываемые данные
		СтруктураПараметровБлокировки =
			Новый Структура(
				"ТипТаблицы, ИмяТаблицы",
				"РегистрНакопления",
				ИменаИсточникаОстатков.ИмяРегистра);
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",                Новый Диапазон(, Дата));
		ЗначенияБлокировки.Вставить("Контрагент",            Контрагент);
		ЗначенияБлокировки.Вставить("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов); 
		ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки);
		
		Запрос.УстановитьПараметр("Момент",                НаМомент);
		Запрос.УстановитьПараметр("Контрагент",            Контрагент);
		Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов);
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			// Долг пересчитаем в валюту договора взаиморасчетов (так как контроль будет в этой валюте).
			СуммаДолга = Выборка.СуммаОстаток;
		КонецЕсли;
		
		// Пересчитаем сумму документа в валюту договора взаиморасчетов.
		СуммаСделки = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			СуммаДокумента,
			ВалютаДокумента,
			КурсДокумента,
			ДанныеДоговораВзаиморасчетов.ВалютаВзаиморасчетов,
			КурсВалютыВзаиморасчетов);
			
			
		Если ХозОперация.ВидОперации=Перечисления.ВидыОперацийДоговора.Продажа Тогда
			// Проверим есть ли долг по договору.
			Если СуммаДолга+СуммаСделки > 0 Тогда
				// Проверим есть ли право на отгрузку при наличии задолженности.
				РазрешитьОтгрузкуВДолг = ПраваИНастройкиПользователя.Значение("РазрешитьОтгрузкуВДолг",ЭтотОбъект);
				Если РазрешитьОтгрузкуВДолг И СуммаДолга > 0 Тогда
					ОбщегоНазначения.СообщитьПользователю(
						НСтр("ru = 'Зафиксирована отгрузка контрагенту при наличии задолженности по договору взаиморасчетов.'"),
						ЭтотОбъект,,,Ложь);
				ИначеЕсли НЕ РазрешитьОтгрузкуВДолг И (СуммаДолга+СуммаСделки) > ДанныеДоговораВзаиморасчетов.МаксимальныйКредит Тогда
					СообщениеОбОшибке = ?(СуммаДолга <= 0, НСтр("ru = 'Нет прав производить отгрузку без предварительной оплаты.'"),
						НСтр("ru = 'Нет прав производить отгрузку при наличии задолженности по договору взаиморасчетов.'"));
						ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке,ЭтотОбъект,,,Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; // Документ отгрузки ТМЦ
			
		Если ((СуммаДолга+СуммаСделки) > ДанныеДоговораВзаиморасчетов.МаксимальныйКредит) Тогда
			// Проверим есть ли право на превышение максимального кредита.
			Если ПраваИНастройкиПользователя.Значение("РазрешитьПревышениеМаксимальногоКредитаКонтрагента",ЭтотОбъект) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Зафиксировано превышение максимальной суммы кредита по договору взаиморасчетов.'"),
					ЭтотОбъект);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Нет прав на превышение максимальной суммы кредита по договору взаиморасчетов.'"),
					ЭтотОбъект,,, Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСуммуДолгаКонтрагента()

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Поступление автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеАвтомобилей(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, "Автомобили") Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТипЦен = ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.ОсновнойТипЦенПродажиАвтомобилей, ЭтотОбъект);
	
	Контрагент = ПраваИНастройкиПользователя.Значение(ПланыВидовХарактеристик.ПраваИНастройки.ОсновнойПокупатель, ЭтотОбъект);
	Документы.РеализацияАвтомобилей.КонтрагентПриИзменении(ЭтотОбъект);
	
	Руководитель		  = Неопределено;
	ГлавныйБухгалтер	  = Неопределено;
	Отпустил			  = Неопределено; 
	Получил				  = Неопределено;
	Принял				  = Неопределено;
    Грузоотправитель	  = Неопределено;
	Грузополучатель		  = Неопределено; 

	Автомобили.Очистить();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеАвтомобилейАвтомобили.Автомобиль КАК Автомобиль,
	|	ПоступлениеАвтомобилейАвтомобили.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаАвтомобилей
	|ИЗ
	|	Документ.ПоступлениеАвтомобилей.Автомобили КАК ПоступлениеАвтомобилейАвтомобили
	|ГДЕ
	|	ПоступлениеАвтомобилейАвтомобили.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыАвтомобилейОстатки.Заказ КАК Заказ,
	|	ЗаказыАвтомобилейОстатки.Автомобиль КАК Автомобиль
	|ПОМЕСТИТЬ Заказы
	|ИЗ
	|	РегистрНакопления.ЗаказыАвтомобилей.Остатки(
	|			&МоментВремени,
	|			Автомобиль В
	|				(ВЫБРАТЬ
	|					Автомобили.Автомобиль
	|				ИЗ
	|					ТаблицаАвтомобилей КАК Автомобили)) КАК ЗаказыАвтомобилейОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАвтомобилей.Автомобиль КАК Автомобиль,
	|	ТаблицаАвтомобилей.Количество КАК Количество,
	|	Заказы.Заказ КАК Заказ,
	|	Заказы.Заказ ЕСТЬ NULL КАК БезЗаказа
	|ИЗ
	|	ТаблицаАвтомобилей КАК ТаблицаАвтомобилей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Заказы КАК Заказы
	|		ПО ТаблицаАвтомобилей.Автомобиль = Заказы.Автомобиль";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МоментВремени", ?(Ссылка.Пустая(), Неопределено, МоментВремени()));
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Автомобили.Добавить();
			НоваяСтрока.ИдентификаторАвтомобиля = Новый УникальныйИдентификатор;
			НоваяСтрока.Автомобиль = Выборка.Автомобиль;
			
			Если Выборка.БезЗаказа Тогда
				НоваяСтрока.АвтомобильБезЗаказа = Истина;
			Иначе
				НоваяСтрока.ЗаказНаАвтомобиль = Выборка.Заказ;
			КонецЕсли;
			
			Документы.РеализацияАвтомобилей.АвтомобилиАвтомобильПриИзменении(ЭтотОбъект, НоваяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеАвтомобилей()

// Производит заполнение объекта на основании документа "Перемещение автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПеремещениеАвтомобилей(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СкладКомпании = ДанныеЗаполнения.СкладПолучатель;
	
	Для Каждого СтрокаАвтомобиля Из Автомобили Цикл
		
		АвтомобилиСервер.ЗаполнитьПризнакПриобретенияУФизЛица(ЭтотОбъект, СтрокаАвтомобиля);
		
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПеремещениеАвтомобилей()

// Производит заполнение объекта на основании документа "Счет на оплату за автомобили".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СчетНаОплатуЗаАвтомобили(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Заказчик = ДанныеЗаполнения.Заказчик;
	
	Для Каждого СтрокаАвтомобиля Из Автомобили Цикл
		
		СтрокаАвтомобиля.ПриобретенУФизЛица = СтрокаАвтомобиля.СебестоимостьАвтомобиля <> 0;
		
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_СчетНаОплатуЗаАвтомобили()

// Производит заполнение объекта на основании документа "Заказ на автомобиль"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаАвтомобиль(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, "Автомобили") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Автомобили.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыАвтомобилейОстатки.Автомобиль КАК Автомобиль
	|ИЗ
	|	РегистрНакопления.ЗаказыАвтомобилей.Остатки(, Заказ = &Заказ) КАК ЗаказыАвтомобилейОстатки
	|ГДЕ
	|	ЗаказыАвтомобилейОстатки.РезервОстаток = 1";
	Запрос.УстановитьПараметр("Заказ", ДанныеЗаполнения);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтрокаАвтомобиля                         = Автомобили.Добавить();
		СтрокаАвтомобиля.ИдентификаторАвтомобиля = Новый УникальныйИдентификатор;
		
		Для Каждого стрТоваров Из Товары Цикл
			стрТоваров.ИдентификаторАвтомобиля = СтрокаАвтомобиля.ИдентификаторАвтомобиля;
		КонецЦикла;
		
		СтрокаАвтомобиля.Автомобиль        = Выборка.Автомобиль;
		Документы.РеализацияАвтомобилей.АвтомобилиАвтомобильПриИзменении(ЭтотОбъект, СтрокаАвтомобиля,
			ДополнительныеСвойства.ПараметрыДействия);
		
		СтрокаАвтомобиля.ЗаказНаАвтомобиль = ДанныеЗаполнения;
		Документы.РеализацияАвтомобилей.АвтомобилиЗаказНаАвтомобиль(ЭтотОбъект, СтрокаАвтомобиля,
			ДополнительныеСвойства.ПараметрыДействия);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиАвтомобилейОстатки.СкладКомпании КАК СкладКомпании
		|ИЗ
		|	РегистрНакопления.ОстаткиАвтомобилей.Остатки(, Автомобиль = &Автомобиль) КАК ОстаткиАвтомобилейОстатки";
		Запрос.УстановитьПараметр("Автомобиль", Выборка.Автомобиль);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			СкладКомпании = Выборка.СкладКомпании;
		КонецЕсли;
	КонецЕсли;
	
	Товары.Очистить();
	Для Каждого СтрокаАвтомобиля Из Автомобили Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаАвтомобиля.ИдентификаторАвтомобиля) Тогда
			СтрокаАвтомобиля.ИдентификаторАвтомобиля = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		// скидки авто
		Документы.РеализацияАвтомобилей.ДобавитьОборудованиеАвтомобиля(ЭтотОбъект, СтрокаАвтомобиля.Автомобиль, Истина);
	КонецЦикла;
	
	// перенесем строчные скидки из заказа
	ТЗЗаказа = ДанныеЗаполнения.Товары.Выгрузить();
	
	Для Каждого стрТоваров Из Товары Цикл
		Отбор = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры",
			стрТоваров.Номенклатура, стрТоваров.ХарактеристикаНоменклатуры);
		МассивНайденных = ТЗЗаказа.НайтиСтроки(Отбор);
		Если МассивНайденных.Количество() = 0 Тогда
			ПроцентСкидкиШапки  = 0;
			ПроцентСкидкиСтроки = 0;
			СкидкаСтроки        = Справочники.ТипыСкидок.ПустаяСсылка();
			СуммаВсего = стрТоваров.СуммаВсего;
		ИначеЕсли МассивНайденных.Количество() > 1 Тогда
			СкидкаСтроки = Справочники.ТипыСкидок.ПустаяСсылка();
			СуммаСкидкиСтрокиВсего = 0;
			СуммаСкидкиШапкиВсего = 0;
			СуммаВсего = 0;
			Для Каждого стрМассива Из МассивНайденных Цикл
				Если НЕ ЗначениеЗаполнено(СкидкаСтроки) И ЗначениеЗаполнено(стрМассива.СкидкаНаТовар) Тогда
					СкидкаСтроки = стрМассива.СкидкаНаТовар;
				КонецЕсли;
				
				СуммаВсего             = СуммаВсего + стрМассива.СуммаВсего;
				СуммаСкидкиШапкиВсего  = СуммаСкидкиШапкиВсего + стрМассива.СуммаСкидки;
				СуммаСкидкиСтрокиВсего = СуммаСкидкиСтрокиВсего + стрМассива.СуммаСкидкиСтроки;
			КонецЦикла;
			
			СуммаСоСкидкой = СуммаВсего + СуммаСкидкиШапкиВсего + СуммаСкидкиСтрокиВсего;
			
			Если СуммаСоСкидкой = 0 Тогда
				ПроцентСкидкиШапки  = 0;
				ПроцентСкидкиСтроки = 0;
			Иначе
				ПроцентСкидкиШапки  = (СуммаСкидкиШапкиВсего * 100) / СуммаСоСкидкой;
				ПроцентСкидкиСтроки = (СуммаСкидкиСтрокиВсего * 100) / СуммаСоСкидкой;
			КонецЕсли;
		Иначе
			стрМассива = МассивНайденных[0];
			ПроцентСкидкиШапки  = стрМассива.ПроцентСкидки;
			ПроцентСкидкиСтроки = стрМассива.ПроцентСкидкиСтроки;
			СкидкаСтроки        = стрМассива.СкидкаНаТовар;
			СуммаВсего          = стрМассива.СуммаВсего;
		КонецЕсли;
		
		стрТоваров.ПроцентСкидки       = ПроцентСкидкиШапки;
		стрТоваров.ПроцентСкидкиСтроки = ПроцентСкидкиСтроки;
		стрТоваров.СкидкаНаТовар       = СкидкаСтроки;
		Документы.РеализацияАвтомобилей.ТоварыПроцентСкидкиПриИзменении(
			ЭтотОбъект,
			стрТоваров,
			ДополнительныеСвойства.ПараметрыДействия
		);
		Документы.РеализацияАвтомобилей.ТоварыПроцентСкидкиСтрокиПриИзменении(
			ЭтотОбъект,
			стрТоваров,
			ДополнительныеСвойства.ПараметрыДействия
		);
		стрТоваров.СуммаВсего = СуммаВсего;
		Документы.РеализацияАвтомобилей.ТоварыСуммаВсегоПриИзменении(
			ЭтотОбъект,
			стрТоваров,
			ДополнительныеСвойства.ПараметрыДействия
		);
		
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Ложь;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаАвтомобиль()

// Производит заполнение объекта на основании документа "Ввод остатков автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВводОстатковАвтомобилей(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент            = Справочники.Контрагенты.ПустаяСсылка();
	ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ВводОстатковАвтомобилей()

// Производит заполнение объекта на основании документа "Оптовый заказ клиента на автомобили"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ОптовыйЗаказКлиентаНаАвтомобили(ДанныеЗаполнения,
                                                            ТекстЗаполнения = "",
                                                            СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"Автомобили"
	);
	
	Если Не ПродолжитьВыполнение Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Автомобили.Очистить();
	
	АвтомобилиГотовыеКОтгрузке = Документы.ОптовыйЗаказКлиентаНаАвтомобили.АвтомобилиГотовыеКОтгрузке(ДанныеЗаполнения);
	АвтомобилиГотовыеКОтгрузке = АвтомобилиГотовыеКОтгрузке.Выбрать();
	
	Пока АвтомобилиГотовыеКОтгрузке.Следующий() Цикл
		
		НоваяСтрока = Автомобили.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, АвтомобилиГотовыеКОтгрузке);
		НоваяСтрока.ЗаказНаАвтомобиль = ДанныеЗаполнения;
		
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// Формирует движения документа по партионным регистрам
// Возвращает Истина - все хорошо, ложь - чего-то не так.
Функция ПровестиПоПартиям(Режим, ДокументСсылка) Экспорт
	Отказ=Ложь;
	
	Если ДополнительныеСвойства.Свойство("СпособУчетаВзаиморасчетовПоРасчетнымДокументам") Тогда
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам = ДополнительныеСвойства.СпособУчетаВзаиморасчетовПоРасчетнымДокументам;
	Иначе
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
			РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	КонецЕсли;
	
	// получим шапку документа
	ШапкаДокумента = ПолучитьШапкуДокумента(ДокументСсылка);
	
	Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		УсловиеОтбора = Новый Структура;
		УсловиеОтбора.Вставить("ТипРасчета", Перечисления.ТипыРасчетов.Оплата);
		УсловиеОтбора.Вставить("ВидДвижения", ВидДвиженияНакопления.Приход);
		СуммыПоРасчетамСКонтрагентом = РасчетыСКонтрагентамиСервер.СуммовыеПоказателиРасчетаСКонтрагентами(
		ДополнительныеСвойства.ТаблицыДвиженийДокумента.РасчетыСКонтрагентами,
		УсловиеОтбора);
		СуммаДоходов = СуммыПоРасчетамСКонтрагентом.СуммаУпр;
	Иначе
		СуммаДоходов = ШапкаДокумента.СуммаДокумента;
	КонецЕсли;
	
	ВУпрВалюте = (ШапкаДокумента.ВалютаДокумента = Константы.ВалютаУправленческогоУчетаКомпании.Получить())
		ИЛИ СпособУчетаВзаиморасчетовПоРасчетнымДокументам;
	
	// определим необходимость формирования корректирующих проводок
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
		
	// Если было отложенное проведение по партиям, то :
	// Очистим возможные движения по регистру комплектации автомобилей.
	НаборЗаписейПартионногоРегистра                                 = РегистрыНакопления.КомплектацияАвтомобилей.СоздатьНаборЗаписей();
	НаборЗаписейПартионногоРегистра.Отбор.Регистратор.Значение      = ШапкаДокумента.Ссылка;
	НаборЗаписейПартионногоРегистра.Отбор.Регистратор.Использование = Истина;
	НаборЗаписейПартионногоРегистра.Записать();
	
	// Проверим, если подразделение проводиться по партиям "отложено", то дальше не идем
	НаборЗаписейДопроведениеПоПартиям                = Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента = ШапкаДокумента;
	
	Отказ = НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	
	// Спишем оборудование автомобиля
	Запрос       = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияАвтомобилейАвтомобили.Автомобиль
	|ИЗ
	|	Документ.РеализацияАвтомобилей.Автомобили КАК РеализацияАвтомобилейАвтомобили
	|ГДЕ
	|	РеализацияАвтомобилейАвтомобили.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ШапкаДокумента.Ссылка);
	
	ВыборкаАвтомобили = Запрос.Выполнить().Выбрать();
	
	НаборЗаписейКомплектацияАвтомобилей = Движения.КомплектацияАвтомобилей;
	
	Пока ВыборкаАвтомобили.Следующий() Цикл
		// Спишем оборудование по документу
		НаборЗаписейКомплектацияАвтомобилей.РежимПроведения           = Режим;
		НаборЗаписейКомплектацияАвтомобилей.ДокументОбъект            = ЭтотОбъект;
		НаборЗаписейКомплектацияАвтомобилей.РезультатЗапросаПоТоварам = Неопределено;
		НаборЗаписейКомплектацияАвтомобилей.Автомобиль                = ВыборкаАвтомобили.Автомобиль;
		НаборЗаписейКомплектацияАвтомобилей.СкладКомпании             = ШапкаДокумента.СкладКомпании;
		НаборЗаписейКомплектацияАвтомобилей.ПериодДвижения            = ШапкаДокумента.МоментВремени;
		НаборЗаписейКомплектацияАвтомобилей.ШапкаДокумента            = ШапкаДокумента;
		Отказ = НЕ НаборЗаписейКомплектацияАвтомобилей.Расход() ИЛИ Отказ;
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		НаборЗаписейКомплектацияАвтомобилей.Записать();
	КонецЕсли;
	
	// ВалютаРегл    =Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(); 
	// СтруктураКурса = обКурсДляВалюты(ВалютаРегл,ШапкаДокумента.МоментВремени);
	// КурсРегл	   = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	// ВалютаУпр=Константы.ВалютаУправленческогоУчетаКомпании.Получить(); 
	// Если НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр) Тогда
	//	СтруктураКурса = обКурсДляВалюты(ВалютаУпр,ШапкаДокумента.МоментВремени);
	//	КурсУпр		   = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	// Иначе
	//	КурсУпр        = ШапкаДокумента.КурсВалютыУпр;
	// КонецЕсли;
	
	// комиссия
	Если ШапкаДокумента.ХозОперация = Справочники.ХозОперации.РеализацияАвтомобилейКомиссия Тогда
		Если НЕ НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
			// А теперь установленное оборудование оприходуем на "Партии товаров отданные"
			НаборЗаписейПартииОтданные = Движения.ПартииТоваровОтданные;
			НаборЗаписейПартииОтданные.ДокументОбъект        = ЭтотОбъект;
			НаборЗаписейПартииОтданные.Контрагент            = ШапкаДокумента.Контрагент;
			НаборЗаписейПартииОтданные.ДоговорВзаиморасчетов = ШапкаДокумента.ДоговорВзаиморасчетов;
			НаборЗаписейПартииОтданные.ПоБазовомуКоличеству  = Ложь;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	КомплектацияАвтомобилей.Автомобиль КАК Автомобиль,
			|	КомплектацияАвтомобилей.Номенклатура КАК Номенклатура,
			|	КомплектацияАвтомобилей.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	КомплектацияАвтомобилей.СтатусПартии КАК СтатусПартии,
			|	КомплектацияАвтомобилей.Партия КАК Партия,
			|	КомплектацияАвтомобилей.ГТД КАК ГТД,
			|	СУММА(КомплектацияАвтомобилей.Количество) КАК Количество,
			|	СУММА(КомплектацияАвтомобилей.Сумма) КАК Сумма,
			|	СУММА(КомплектацияАвтомобилей.СуммаНДС) КАК СуммаНДС,
			|	СУММА(КомплектацияАвтомобилей.СуммаБезНДС) КАК СуммаБезНДС,
			|	СУММА(КомплектацияАвтомобилей.СуммаУпр) КАК СуммаУпр,
			|	СУММА(КомплектацияАвтомобилей.СуммаНДСУпр) КАК СуммаНДСУпр,
			|	СУММА(КомплектацияАвтомобилей.СуммаБезНДСУпр) КАК СуммаБезНДСУпр
			|ИЗ
			|	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
			|ГДЕ
			|	КомплектацияАвтомобилей.Регистратор = &Регистратор
			|	И КомплектацияАвтомобилей.Номенклатура ССЫЛКА Справочник.Номенклатура
			|
			|СГРУППИРОВАТЬ ПО
			|	КомплектацияАвтомобилей.Автомобиль,
			|	КомплектацияАвтомобилей.СтатусПартии,
			|	КомплектацияАвтомобилей.Номенклатура,
			|	КомплектацияАвтомобилей.ХарактеристикаНоменклатуры,
			|	КомплектацияАвтомобилей.Партия,
			|	КомплектацияАвтомобилей.ГТД";
			Запрос.УстановитьПараметр("Регистратор",ШапкаДокумента.Ссылка);
			
			НаборЗаписейПартииОтданные.РезультатЗапросаПоПартиям = Запрос.Выполнить().Выгрузить();
			НаборЗаписейПартииОтданные.РезультатЗапросаПоГТД     = НаборЗаписейКомплектацияАвтомобилей.Выгрузить();
			НаборЗаписейПартииОтданные.ШапкаДокумента            = ШапкаДокумента;
			НаборЗаписейПартииОтданные.ЕстьАвтомобиль            = Истина;
			
			Отказ = НЕ НаборЗаписейПартииОтданные.Приход() ИЛИ Отказ;
			
		КонецЕсли;
	Иначе
		Если НЕ НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
			// спишем реализованное комиссионное оборудование, установленное нами
			НаборЗаписейРеализованныеТовары                       = Движения.РеализованныеТовары;
			НаборЗаписейРеализованныеТовары.ДокументОбъект        = ЭтотОбъект;
			НаборЗаписейРеализованныеТовары.Контрагент            = ШапкаДокумента.Контрагент;
			НаборЗаписейРеализованныеТовары.ДоговорВзаиморасчетов = ШапкаДокумента.ДоговорВзаиморасчетов;
			
			Запрос = Новый Запрос;
			Запрос.Текст=
			"ВЫБРАТЬ
			|	КомплектацияАвтомобилей.Автомобиль КАК Автомобиль,
			|	КомплектацияАвтомобилей.Номенклатура КАК Номенклатура,
			|	КомплектацияАвтомобилей.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	КомплектацияАвтомобилей.Партия КАК Партия,
			|	КомплектацияАвтомобилей.СтатусПартии КАК СтатусПартии,
			|	СУММА(КомплектацияАвтомобилей.Количество) КАК Количество,
			|	СУММА(КомплектацияАвтомобилей.Сумма) КАК Сумма,
			|	СУММА(КомплектацияАвтомобилей.СуммаНДС) КАК СуммаНДС,
			|	СУММА(КомплектацияАвтомобилей.СуммаБезНДС) КАК СуммаБезНДС,
			|	СУММА(КомплектацияАвтомобилей.СуммаУпр) КАК СуммаУпр,
			|	СУММА(КомплектацияАвтомобилей.СуммаНДСУпр) КАК СуммаНДСУпр,
			|	СУММА(КомплектацияАвтомобилей.СуммаБезНДСУпр) КАК СуммаБезНДСУпр,
			|	КомплектацияАвтомобилей.СтавкаНДС КАК СтавкаНДС
			|ИЗ
			|	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
			|ГДЕ
			|	КомплектацияАвтомобилей.Регистратор = &Регистратор
			|	И КомплектацияАвтомобилей.СтатусПартии = &СтатусПартииТоварПринятыйКомиссия
			|	И КомплектацияАвтомобилей.Номенклатура ССЫЛКА Справочник.Номенклатура
			|
			|СГРУППИРОВАТЬ ПО
			|	КомплектацияАвтомобилей.Автомобиль,
			|	КомплектацияАвтомобилей.Номенклатура,
			|	КомплектацияАвтомобилей.СтатусПартии,
			|	КомплектацияАвтомобилей.ХарактеристикаНоменклатуры,
			|	КомплектацияАвтомобилей.Партия,
			|	КомплектацияАвтомобилей.СтавкаНДС";
			Запрос.УстановитьПараметр("Регистратор",ШапкаДокумента.Ссылка);
			Запрос.УстановитьПараметр("СтатусПартииТоварПринятыйКомиссия",Перечисления.СтатусыПартий.ТоварПринятыйКомиссия);
			
			НаборЗаписейРеализованныеТовары.РезультатЗапросаПоПартиям = Запрос.Выполнить().Выгрузить();
			НаборЗаписейРеализованныеТовары.РезультатЗапросаПоТоварам = Неопределено;
			НаборЗаписейРеализованныеТовары.ПоБазовомуКоличеству      = Ложь;
			НаборЗаписейРеализованныеТовары.ЕстьАвтомобиль            = Истина;
			НаборЗаписейРеализованныеТовары.РезультатЗапросаПоГТД     = НаборЗаписейКомплектацияАвтомобилей.Выгрузить();
			НаборЗаписейРеализованныеТовары.ШапкаДокумента            = ШапкаДокумента;
			
			Отказ = НЕ НаборЗаписейРеализованныеТовары.Приход() ИЛИ Отказ;
			
			// продажи оборудования, установленного нами
			НаборЗаписейПродажи = Движения.Продажи;
			НаборЗаписейПродажи.ДокументОбъект            = ЭтотОбъект;
			НаборЗаписейПродажи.СкладКомпании             = ШапкаДокумента.СкладКомпании;
			НаборЗаписейПродажи.ДокументПродажи           = ШапкаДокумента.ДокументПродажи;
			НаборЗаписейПродажи.Сторно                    = Ложь;
			НаборЗаписейПродажи.Покупатель                = ШапкаДокумента.Контрагент;
			НаборЗаписейПродажи.РезультатЗапросаПоТоварам = Неопределено;
			НаборЗаписейПродажи.ДоговорВзаиморасчетов     = ШапкаДокумента.ДоговорВзаиморасчетов;
			НаборЗаписейПродажи.ПодразделениеКомпании     = ШапкаДокумента.ПодразделениеКомпании;
			НаборЗаписейПродажи.Комиссия                  = Ложь;
			НаборЗаписейПродажи.Автомобиль                = Неопределено;
			НаборЗаписейПродажи.ЕстьАвтомобиль            = Истина;
			НаборЗаписейПродажи.ПоБазовомуКоличеству      = Ложь;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	КомплектацияАвтомобилей.ВидДвижения КАК ВидДвижения,
			|	КомплектацияАвтомобилей.Автомобиль КАК Автомобиль,
			|	КомплектацияАвтомобилей.Номенклатура КАК Номенклатура,
			|	КомплектацияАвтомобилей.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	КомплектацияАвтомобилей.Партия КАК Партия,
			|	КомплектацияАвтомобилей.СтатусПартии КАК СтатусПартии,
			|	КомплектацияАвтомобилей.ГТД КАК ГТД,
			|	СУММА(КомплектацияАвтомобилей.Количество) КАК Количество,
			|	СУММА(КомплектацияАвтомобилей.Сумма) КАК Сумма,
			|	СУММА(КомплектацияАвтомобилей.СуммаНДС) КАК СуммаНДС,
			|	СУММА(КомплектацияАвтомобилей.СуммаБезНДС) КАК СуммаБезНДС,
			|	СУММА(КомплектацияАвтомобилей.СуммаУпр) КАК СуммаУпр,
			|	СУММА(КомплектацияАвтомобилей.СуммаНДСУпр) КАК СуммаНДСУпр,
			|	СУММА(КомплектацияАвтомобилей.СуммаБезНДСУпр) КАК СуммаБезНДСУпр
			|ИЗ
			|	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
			|ГДЕ
			|	КомплектацияАвтомобилей.Регистратор = &Регистратор
			|	И КомплектацияАвтомобилей.Номенклатура ССЫЛКА Справочник.Номенклатура
			|
			|СГРУППИРОВАТЬ ПО
			|	КомплектацияАвтомобилей.Автомобиль,
			|	КомплектацияАвтомобилей.Номенклатура,
			|	КомплектацияАвтомобилей.ВидДвижения,
			|	КомплектацияАвтомобилей.ХарактеристикаНоменклатуры,
			|	КомплектацияАвтомобилей.СтатусПартии,
			|	КомплектацияАвтомобилей.Партия,
			|	КомплектацияАвтомобилей.ГТД";
			Запрос.УстановитьПараметр("Регистратор",ШапкаДокумента.Ссылка);
			
			НаборЗаписейПродажи.РезультатЗапросаПоПартиям = Запрос.Выполнить().Выгрузить();
			НаборЗаписейПродажи.РезультатЗапросаПоТоварам = Неопределено;
			НаборЗаписейПродажи.ШапкаДокумента            = ШапкаДокумента;
			
			Отказ = НЕ НаборЗаписейПродажи.Приход() ИЛИ Отказ;
		КонецЕсли;
		
		// Доход от начисления дебиторской задолженности по отгруженным автомобилям
		Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
			
			НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект = ЭтотОбъект;
			
			Если ВедетсяБалансПоПодразделению Тогда
				НаборЗаписейДоходыИРасходы.Подразделение = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
			КонецЕсли;
			
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьНеоприходованныхПартий;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте             = ВУпрВалюте;
			НаборЗаписейДоходыИРасходы.Доход                  = СуммаДоходов;
			НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
			
			Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		Иначе
			
			Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
				СуммыАвтомобиляСОборудованием = Новый Массив();
				СуммыАвтомобиляСОборудованием.Добавить(ШапкаДокумента.СуммаАвтомобилей);
				СуммыАвтомобиляСОборудованием.Добавить(ШапкаДокумента.СуммаДопОборудования);
				НовыеСуммы = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаДоходов,
					СуммыАвтомобиляСОборудованием);
				Если НовыеСуммы = Неопределено ИЛИ НовыеСуммы.Количество() = 0 Тогда
					СуммаАвтомобилей = ШапкаДокумента.СуммаАвтомобилей;
					СуммаДопОборудования = ШапкаДокумента.СуммаДопОборудования;
				Иначе
					СуммаАвтомобилей = НовыеСуммы[0];
					СуммаДопОборудования = НовыеСуммы[1];
				КонецЕсли;
			Иначе
				СуммаАвтомобилей = ШапкаДокумента.СуммаАвтомобилей;
				СуммаДопОборудования = ШапкаДокумента.СуммаДопОборудования;
			КонецЕсли;
			
			Если СуммаАвтомобилей > 0 Тогда
				НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
				НаборЗаписейДоходыИРасходы.ДокументОбъект = ЭтотОбъект;
				
				Если ВедетсяБалансПоПодразделению Тогда
					НаборЗаписейДоходыИРасходы.Подразделение = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
				КонецЕсли;
				
				НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.НачислениеДебиторскойЗадолженностиПоАвтомобилям;
				НаборЗаписейДоходыИРасходы.ВУпрВалюте             = ВУпрВалюте;
				НаборЗаписейДоходыИРасходы.Доход                  = СуммаАвтомобилей;
				НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
				
				Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
			КонецЕсли;
			
			Если СуммаДопОборудования > 0 Тогда
				НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
				НаборЗаписейДоходыИРасходы.ДокументОбъект = ЭтотОбъект;
				
				Если ВедетсяБалансПоПодразделению Тогда
					НаборЗаписейДоходыИРасходы.Подразделение = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
				КонецЕсли;
				
				НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.НачислениеДебиторскойЗадолженностиПоТовару;
				НаборЗаписейДоходыИРасходы.ВУпрВалюте             = ВУпрВалюте;
				НаборЗаписейДоходыИРасходы.Доход                  = СуммаДопОборудования;
				НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
				
				Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если (ХозОперация=Справочники.ХозОперации.РеализацияАвтомобилейКомиссия И
		  НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии) ИЛИ
		  ХозОперация=Справочники.ХозОперации.РеализацияАвтомобилей Тогда
		
		// доходы и расходы
		СебестоимостьАвтомобилейУпр  = 0; СебестоимостьОборудованияУпр = 0;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ОстаткиАвтомобилей.СуммаУпр), 0) КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
		|ГДЕ
		|	ОстаткиАвтомобилей.Регистратор = &Регистратор
		|	И ОстаткиАвтомобилей.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварКупленный)";
		
		Запрос.УстановитьПараметр("Регистратор", ШапкаДокумента.Ссылка);
		
		Выборка=Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			СебестоимостьАвтомобилейУпр = Выборка.СуммаУпр;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(КомплектацияАвтомобилей.СуммаУпр), 0) КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
		|ГДЕ
		|	КомплектацияАвтомобилей.Регистратор = &Регистратор
		|	И КомплектацияАвтомобилей.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварКупленный)";
		
		Запрос.УстановитьПараметр("Регистратор",ШапкаДокумента.Ссылка);
		
		Выборка=Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			СебестоимостьОборудованияУпр = Выборка.СуммаУпр;
		КонецЕсли;
		
		Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
			СебестоимостьУпр = СебестоимостьАвтомобилейУпр + СебестоимостьОборудованияУпр;
			
			Если СебестоимостьУпр <> 0 Тогда
				// сумма себестоимости списанных автомобилей
				НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
				НаборЗаписейДоходыИРасходы.ДокументОбъект = ЭтотОбъект;
				НаборЗаписейДоходыИРасходы.ШапкаДокумента = ШапкаДокумента;
				
				Если ВедетсяБалансПоПодразделению Тогда
					НаборЗаписейДоходыИРасходы.Подразделение = ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
				КонецЕсли;
				
				НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьНеоприходованныхПартий;
				НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
				НаборЗаписейДоходыИРасходы.Расход                 = СебестоимостьУпр;
				
				Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
			КонецЕсли;
		Иначе
			Если СебестоимостьАвтомобилейУпр <> 0 Тогда
				// сумма себестоимости списанных автомобилей
				НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
				НаборЗаписейДоходыИРасходы.ДокументОбъект = ЭтотОбъект;
				НаборЗаписейДоходыИРасходы.ШапкаДокумента = ШапкаДокумента;
				
				Если ВедетсяБалансПоПодразделению Тогда
					НаборЗаписейДоходыИРасходы.Подразделение = ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
				КонецЕсли;
				
				НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьАвтомобилей;
				НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
				НаборЗаписейДоходыИРасходы.Расход                 = СебестоимостьАвтомобилейУпр;
				
				Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
			КонецЕсли;
			
			Если СебестоимостьОборудованияУпр <> 0 Тогда
				// сумма себестоимости списанных автомобилей
				НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
				НаборЗаписейДоходыИРасходы.ДокументОбъект = ЭтотОбъект;
				НаборЗаписейДоходыИРасходы.ШапкаДокумента = ШапкаДокумента;
				
				Если ВедетсяБалансПоПодразделению Тогда
					НаборЗаписейДоходыИРасходы.Подразделение = ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
				КонецЕсли;
				
				НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.Себестоимость;
				НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
				НаборЗаписейДоходыИРасходы.Расход                 = СебестоимостьОборудованияУпр;
				
				Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НЕ Отказ;
КонецФункции

// Возвращает выборку по шапке
// ДокументСсылка - Ссылка на документ для которого получаем шапку.
Функция ПолучитьШапкуДокумента(ДокументСсылка) Экспорт
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СУММА(СуммыТаблиц.СуммаАвтомобилей) КАК СуммаАвтомобилей,
	|	СУММА(СуммыТаблиц.СуммаДопОборудования) КАК СуммаДопОборудования
	|ПОМЕСТИТЬ
	|	СуммыТаблиц
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаАвтомобили.СуммаВсего КАК СуммаАвтомобилей,
	|		0 КАК СуммаДопОборудования
	|	ИЗ
	|		Документ.РеализацияАвтомобилей.Автомобили КАК ТаблицаАвтомобили
	|	ГДЕ
	|		ТаблицаАвтомобили.Ссылка=&Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		0,
	|		ТаблицаТовары.СуммаВсего
	|	ИЗ
	|		Документ.РеализацияАвтомобилей.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка=&Ссылка) КАК СуммыТаблиц
	|;
	|
	|ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ТипЦен КАК ТипЦен,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Док.Проект КАК Проект,
	/////////// ПРИВАТ ////////////
	|	Док.СкладКомпании КАК СкладКомпании,
	|	Док.Ссылка КАК ДокументПродажи,
	|	Док.Контрагент КАК Контрагент,
	|	Док.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Док.СуммаДокумента КАК СуммаДокумента,
	|	Док.ДокументОснование КАК ДокументОснование,
	|	ЕСТЬNULL(СуммыТаблиц.СуммаАвтомобилей, 0) КАК СуммаАвтомобилей,
	|	ЕСТЬNULL(СуммыТаблиц.СуммаДопОборудования, 0) КАК СуммаДопОборудования
	|ИЗ
	|	Документ.РеализацияАвтомобилей КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	СуммыТаблиц КАК СуммыТаблиц
	|ПО
	|	ИСТИНА
	|ГДЕ
	|	Док.Ссылка=&Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции

#КонецОбласти

Процедура ВыполнитьДвиженияПоВзаиморасчетам(Отказ, Режим)
	
	СуммаВсехАвтомобилейПоЗаказам = 0;
	СуммаДоходаРасходаСуммовыхРазниц = 0;
	
	Для Каждого СтрокаАвтомобиля Из Автомобили Цикл
		Если ЗначениеЗаполнено(СтрокаАвтомобиля.ЗаказНаАвтомобиль) Тогда
			СуммаАвтомобиля = СтрокаАвтомобиля.СуммаВсего;
			СтрокиОпций = Товары.НайтиСтроки(
				Новый Структура("ИдентификаторАвтомобиля", СтрокаАвтомобиля.ИдентификаторАвтомобиля));
			Для Каждого СтрокаТоваров Из СтрокиОпций Цикл
				СуммаАвтомобиля = СуммаАвтомобиля + СтрокаТоваров.СуммаВсего;
			КонецЦикла;
			Если СуммаАвтомобиля <> 0 Тогда
				НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыКомпании;
				
				НаборЗаписейВзаиморасчеты.ДокументОбъект                   = ЭтотОбъект;
				НаборЗаписейВзаиморасчеты.РежимПроведения                  = Режим;
				НаборЗаписейВзаиморасчеты.Контрагент                       = Контрагент;
				НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов            = ДоговорВзаиморасчетов;
				НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок =
					(СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически);
				НаборЗаписейВзаиморасчеты.Сделка                           = СтрокаАвтомобиля.ЗаказНаАвтомобиль;
				НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем        = Истина;
				НаборЗаписейВзаиморасчеты.КонтрольДолгаПриПродаже          = Ложь;
				НаборЗаписейВзаиморасчеты.Сумма                            = СуммаАвтомобиля;
				НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц = 0;
				
				Отказ = НЕ НаборЗаписейВзаиморасчеты.Приход() ИЛИ Отказ;
				
				СуммаВсехАвтомобилейПоЗаказам = СуммаВсехАвтомобилейПоЗаказам + СуммаАвтомобиля;
				СуммаДоходаРасходаСуммовыхРазниц =
					СуммаДоходаРасходаСуммовыхРазниц + НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СуммаВсехАвтомобилейПоЗаказам = СуммаДокумента - СуммаВсехАвтомобилейПоЗаказам;
	
	Если СуммаВсехАвтомобилейПоЗаказам <> 0 Тогда
		НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыКомпании;
		
		НаборЗаписейВзаиморасчеты.ДокументОбъект        = ЭтотОбъект;
		НаборЗаписейВзаиморасчеты.РежимПроведения       = Режим;
		НаборЗаписейВзаиморасчеты.Контрагент            = Контрагент;
		НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
		НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок	=
			(СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически);
		
		Если (ЗначениеЗаполнено(ДокументОснование)) И (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказНаАвтомобиль")) Тогда
			НаборЗаписейВзаиморасчеты.Сделка = ДокументОснование;
		Иначе
			НаборЗаписейВзаиморасчеты.Сделка = Неопределено;
		КонецЕсли;
		
		НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем        = Истина;
		НаборЗаписейВзаиморасчеты.КонтрольДолгаПриПродаже          = Ложь;
		НаборЗаписейВзаиморасчеты.Сумма                            = СуммаВсехАвтомобилейПоЗаказам;
		НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц = 0;
		
		Отказ = НЕ НаборЗаписейВзаиморасчеты.Приход() ИЛИ Отказ;
		
		СуммаДоходаРасходаСуммовыхРазниц =
			СуммаДоходаРасходаСуммовыхРазниц + НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
	КонецЕсли; 
	
	// доходы и расходы по суммовым разницам
	Если СуммаДоходаРасходаСуммовыхРазниц <> 0 Тогда
		НаборЗаписейДиР = Движения.ДоходыИРасходы;
		
		НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
		НаборЗаписейДиР.ВУпрВалюте             = Истина;
		
		Если СуммаДоходаРасходаСуммовыхРазниц < 0 Тогда
			НаборЗаписейДиР.Расход = -СуммаДоходаРасходаСуммовыхРазниц;
		Иначе
			НаборЗаписейДиР.Доход  = СуммаДоходаРасходаСуммовыхРазниц;
		КонецЕсли;
		
		Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
