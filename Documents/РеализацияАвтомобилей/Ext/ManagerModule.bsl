// Модуль менеджера документа "Реализация автомобилей"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Движения документа выполненные по регистру ГТД
//
// Параметры:
//  Сам - ДокументСсылка.РеализацияАвтомобилей - Документ, для которого выполняется операция.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками:
//    * Номенклатура - СправочникСсылка.Номенклатура - Номенклатура, по которой ведется учет по кодам маркировки;
//    * ХарактеристикаНоменклатуры - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика номенклатуры с кодом;
//    * ГТД - СправочникСсылка.ГТД - Грузовая таможенная декларация;
//    * Количество - Число - Количество товара
//    * Партия - Характеристика.ТипыПартий - Документ партии.
//
Функция ДвиженияПоГТД(Сам) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КомплектацияАвтомобилей.Номенклатура,
		|	КомплектацияАвтомобилей.ХарактеристикаНоменклатуры,
		|	КомплектацияАвтомобилей.Партия,
		|	КомплектацияАвтомобилей.ГТД,
		|	СУММА(КомплектацияАвтомобилей.Количество) КАК Количество
		|ИЗ
		|	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
		|ГДЕ
		|	КомплектацияАвтомобилей.Регистратор = &Сам
		|
		|СГРУППИРОВАТЬ ПО
		|	КомплектацияАвтомобилей.ГТД,
		|	КомплектацияАвтомобилей.Партия,
		|	КомплектацияАвтомобилей.Номенклатура,
		|	КомплектацияАвтомобилей.ХарактеристикаНоменклатуры"
	);
	Запрос.УстановитьПараметр("Сам", Сам);	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область ОбработчикиОбновления

// Выполняет перенос свойств в реквизиты объекта
// Руководитель, ГлавныйБухгалтер,Отустил, ОтпустилКонтрагент, Получил, ПолучилКонтрагент
//
Процедура ВыполнитьПереносПодписантовИзСвойств() Экспорт 
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();
	ПеренесеныВсеСвойства = Истина;
	МассивПереносимыхСвойств = УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства);
	 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияАвтомобилейДополнительныеРеквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияАвтомобилей.ДополнительныеРеквизиты КАК РеализацияАвтомобилейДополнительныеРеквизиты
	|ГДЕ
	|	РеализацияАвтомобилейДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", МассивПереносимыхСвойств);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();  
	
	Пока Выборка.Следующий() Цикл  
		
		СвойстваКУдалению = Новый Массив();
		
		НачатьТранзакцию(); 
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.РеализацияАвтомобилей");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();  
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗначенияСвойств = ДокументОбъект.ДополнительныеРеквизиты.Выгрузить();
			
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда 
				
				СвойствоРуководитель = ЗначенияСвойств.Найти(ПереносимыеСвойства.Руководитель,"Свойство");
				
				Если СвойствоРуководитель <> Неопределено Тогда
					
					ДокументОбъект.Руководитель = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоРуководитель.Значение,
						Выборка.Ссылка
					);
					
					Если ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоРуководитель.Свойство);
						
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтОрганизации) Тогда 
					
					ДокументОбъект.Руководитель = ДокументОбъект.ПодписантОтОрганизации
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда	
				
				СвойствоГлавныйБухгалтер = ЗначенияСвойств.Найти(ПереносимыеСвойства.ГлавныйБухгалтер,"Свойство");
				
				Если СвойствоГлавныйБухгалтер <> Неопределено Тогда
					
					ДокументОбъект.ГлавныйБухгалтер = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоГлавныйБухгалтер.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоГлавныйБухгалтер.Свойство); 
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда	
				
				СвойствоОтпустил = ЗначенияСвойств.Найти(ПереносимыеСвойства.Отпустил,"Свойство");
				
				Если СвойствоОтпустил <> Неопределено Тогда
					
					ДокументОбъект.Отпустил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоОтпустил.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоОтпустил.Свойство);
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда	
				
				СвойствоПолучилКонтрагент = ЗначенияСвойств.Найти(ПереносимыеСвойства.ПолучилКонтрагент,"Свойство");
				
				Если СвойствоПолучилКонтрагент <> Неопределено Тогда
					
					ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоПолучилКонтрагент.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоПолучилКонтрагент.Свойство);
						
					КонецЕсли; 
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтКонтрагента) Тогда 
					
					ДокументОбъект.Получил = ДокументОбъект.ПодписантОтКонтрагента
					
				КонецЕсли;
				
			КонецЕсли; 

			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
				
				СвойствоДоверенность = ЗначенияСвойств.Найти(ПереносимыеСвойства.Доверенность,"Свойство");
				
				Если СвойствоДоверенность <> Неопределено Тогда

					Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
							СвойствоДоверенность.Значение.Владелец,
							Выборка.Ссылка,
							СвойствоДоверенность.Значение
						);
						
						Если ЗначениеЗаполнено(ДокументОбъект.Получил)  И значениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство);
							
						КонецЕсли; 
						
					ИначеЕсли ДокументОбъект.Получил.Подписант = СвойствоДоверенность.Значение.Владелец
						И  НЕ ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
						
						ПолучилОбъект = ДокументОбъект.Получил.ПолучитьОбъект();
						ПолучилОбъект.Основание = СвойствоДоверенность.Значение;  
						
						Попытка	
							ПолучилОбъект.Записать(); 
						Исключение	
						КонецПопытки;
						
						Если ЗначениеЗаполнено(ПолучилОбъект.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство); 
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Принял) Тогда
				СвойствоДоверенность = ЗначенияСвойств.Найти(ПереносимыеСвойства.Доверенность,"Свойство");
				
				Если СвойствоДоверенность <> Неопределено Тогда
										
					ДокументОбъект.Принял = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоДоверенность.Значение.Владелец,
						Выборка.Ссылка,
						СвойствоДоверенность.Значение
					);
						
					Если ЗначениеЗаполнено(ДокументОбъект.Принял)  И значениеЗаполнено(ДокументОбъект.Принял.Основание) Тогда
							
						СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство);
							
					КонецЕсли; 
					
				КонецЕсли;
					
			КонецЕсли;
			
			Если СвойстваКУдалению.Количество()>0 Тогда  
				
				Для Каждого Элемент Из СвойстваКУдалению Цикл 
					
					Строка = ДокументОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
					Если Строка <> Неопределено Тогда 
						
						ДокументОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение 
			
			ОтменитьТранзакцию();
			ПеренесеныВсеСвойства = Ложь;
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления списка подписантов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
		
	КонецЦикла;
	Если ПеренесеныВсеСвойства Тогда
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Набор
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка.ИмяПредопределенныхДанных = ""Документ_РеализацияАвтомобилей""";
		
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();	
			
			Пока Выборка.Следующий() Цикл
				

				Попытка	
					НаборОбъект = Выборка.Набор.ПолучитьОбъект();
					
					Для Каждого Элемент Из МассивПереносимыхСвойств Цикл 
					
						Строка = НаборОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
						Если Строка <> Неопределено Тогда 
						
							НаборОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
						КонецЕсли;
					
					КонецЦикла;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборОбъект);
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось обработать справочник: ""НаборыДополнительныхРеквизитовИСведений"" по причине:
							|%1'"), 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений, "НаборыДополнительныхРеквизитовИСведений", ТекстСообщения);
				КонецПопытки;	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры	

// Выполяет проверку выполнения отложенного обработчика обновления ВыполнитьПереносПодписантовИзСвойств
//
// Параметры:
//  Параметры - Структура - параметры выполнения операции
//
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ПроверитьПереносПодписантовИзСвойств (Параметры) Экспорт
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияАвтомобилейДополнительныеРеквизиты.Свойство КАК Свойство,
	|	РеализацияАвтомобилейДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Документ.РеализацияАвтомобилей.ДополнительныеРеквизиты КАК РеализацияАвтомобилейДополнительныеРеквизиты
	|ГДЕ
	|	РеализацияАвтомобилейДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)
	|	И РеализацияАвтомобилейДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства));
	Запрос.УстановитьПараметр("Ссылка",				 Параметры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
	    Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ИнтервьюКонтрагента

// Полдучение респондента для проведения интервью.
//
// Параметры:
//  Объект  - ДокументСсылка.ЗаказНаряд - Документ, на основании которого проводится интервью.
//
// Возвращаемое значение:
//   СправочникСсылка.Контрагенты   - Респондент для интервью.
//
Функция РеспондентДляИнтервью(Объект) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Контрагент");
	
КонецФункции // РесподентДляИнтервью()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Автомобили.Итог("СуммаВсего") + Объект.Товары.Итог("СуммаВсего"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	ИтогиОперации.Вставить("СуммаАвтомобилей"  , Объект.Автомобили.Итог("СуммаВсего"));
	ИтогиОперации.Вставить("СуммаОборудования" , Объект.Товары.Итог("СуммаВсего"));
	ИтогиОперации.Вставить("СуммаНДС"          , Объект.Автомобили.Итог("СуммаНДС") + Объект.Товары.Итог("СуммаНДС"));
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Производит расчет суммы скидки/наценки по документу в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция РассчитатьСуммуСкидкиНаценки(Объект) Экспорт
	
	Объект.СуммаСкидкиНаценки =
		Объект.Автомобили.Итог("СуммаСкидки")
		+ Объект.Товары.Итог("СуммаСкидки")
		+ Объект.Товары.Итог("СуммаСкидкиСтроки");
	
КонецФункции // РассчитатьСуммуСкидкиНаценки()

// процедура устанавливает необходимую ставку НДС для таблицы автомобилей
Процедура УстановитьСтавкиНДС(Объект, ПараметрыДействия)
	
	// Организация может является плательщиком НДС, а может и нет.. надо обработать ТЧ
	СтавкаНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата).ОсновнаяСтавка;
	
	Для Каждого СтрокаТЧ Из Объект.Автомобили Цикл
		СтрокаТЧ.СтавкаНДС = СтавкаНДС;
		АвтомобилиСтавкаНДСПриИзменении(Объект, СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры

// Добавим оборудование автомобиля
Процедура ДобавитьОборудованиеАвтомобиля(Объект, Знач Автомобиль,ИзменятьЦену) Экспорт
	
	ДокументОбъектСтруктура = Новый Структура();
	ДокументОбъектСтруктура.Вставить("Ссылка"     , Объект.Ссылка);
	ДокументОбъектСтруктура.Вставить("Дата"       , Объект.Дата);
	ДокументОбъектСтруктура.Вставить("Автомобили" , Объект.Автомобили.Выгрузить());
	ДокументОбъектСтруктура.Вставить("Товары"     , Объект.Товары.Выгрузить());
	
	ЗащищенныеФункцииАльфаАвтоСервер.РеализацияАвтомобилейДобавитьОборудованиеАвтомобиля(ДокументОбъектСтруктура,Автомобиль);
	
	Если НЕ ДокументОбъектСтруктура.Свойство("ТаблицаТоваров") Тогда
		Возврат;
	КонецЕсли; 
	
	Объект.Товары.Очистить();
	Объект.Товары.Загрузить(ДокументОбъектСтруктура.Товары);
	
	Если ИзменятьЦену Тогда
		ВалютаРегламентированногоУчетаОрганизаций = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		Если Объект.ВалютаДокумента <> ВалютаРегламентированногоУчетаОрганизаций Тогда
			ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить(); 
			Если НЕ ЗначениеЗаполнено(Объект.КурсВалютыУпр) Тогда
				СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, Объект.Дата);
				КурсУпр        = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
			Иначе
				КурсУпр        = Объект.КурсВалютыУпр;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаТоваров Из ДокументОбъектСтруктура.ТаблицаТоваров Цикл
		СтрокиОборудования = Объект.Товары.НайтиСтроки(Новый Структура("ИдентификаторАвтомобиля,Номенклатура,ХарактеристикаНоменклатуры",ДокументОбъектСтруктура.ИдентификаторАвтомобиля,СтрокаТоваров.Номенклатура,СтрокаТоваров.ХарактеристикаНоменклатуры));
		Если СтрокиОборудования.Количество() = 0 Тогда
			НоваяСтрокаТоваров                            = Объект.Товары.Добавить();
			НоваяСтрокаТоваров.ИдентификаторАвтомобиля    = ДокументОбъектСтруктура.ИдентификаторАвтомобиля;
			НоваяСтрокаТоваров.Номенклатура               = СтрокаТоваров.Номенклатура;
			НоваяСтрокаТоваров.ХарактеристикаНоменклатуры = СтрокаТоваров.ХарактеристикаНоменклатуры;
			ТоварыНоменклатураПриИзменении(Объект, НоваяСтрокаТоваров);
		Иначе
			НоваяСтрокаТоваров = СтрокиОборудования[0];
		КонецЕсли;
		
		НоваяСтрокаТоваров.Количество = СтрокаТоваров.Количество/?(НЕ ЗначениеЗаполнено(НоваяСтрокаТоваров.Коэффициент),1,НоваяСтрокаТоваров.Коэффициент);
		
		Если ИзменятьЦену Тогда
			
			Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчетаОрганизаций Тогда
				НоваяСтрокаТоваров.СуммаВсего = СтрокаТоваров.СуммаПродажи;
			Иначе
				НоваяСтрокаТоваров.СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТоваров.СуммаПродажиУпр, ВалютаУпр, КурсУпр, Объект.ВалютаДокумента, Объект.КурсДокумента);
			КонецЕсли;
			
			ТоварыСуммаВсегоПриИзменении(Объект, НоваяСтрокаТоваров);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// форимрование суммы строки без скидки
Функция ПолучитьСуммуСтрокиБезСкидок(Объект, Строка, ИмяТабличнойЧасти = "Автомобили") Экспорт
	
	Результат = 0;
	
	Если ЕстьРеквизит(Объект, "ТипЦен") Тогда
		ЦенаВключаетНДС = НЕ ЗначениеЗаполнено(Объект.ТипЦен) ИЛИ Объект.ТипЦен.ЦенаВключаетНДС;
	Иначе
		ЦенаВключаетНДС = Истина;
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, "СтавкаНДС", ИмяТабличнойЧасти) Тогда
		СтавкаНДС = Строка.СтавкаНДС.Ставка;
	Иначе
		СтавкаНДС = 0;
	КонецЕсли;
	
	Результат = Строка.Сумма;
	Если НЕ ЦенаВключаетНДС Тогда
		Себестоимость = АвтомобилиСервер.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Строка.Автомобиль, Объект);
		Результат = Результат + Окр((Результат - Себестоимость) * СтавкаНДС / 100, 2);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция - Получить доп оборудование
//
// Параметры:
//  Идентификатор	 - Строка	 - Идентификатор авто
// 
// Возвращаемое значение:
//  Массив - Массив найденого оборудования.
//
Функция ПолучитьДопОборудование(Товары, Идентификатор)
	Возврат Товары.НайтиСтроки(Новый Структура("ИдентификаторАвтомобиля", Идентификатор));
КонецФункции

// Получение данных о прослеживаемых товаров
//
// Параметры:
//  Объект	 - ДокументОбъект.РеализацияАвтомобилей - Документ, на основании которого произошла операция с товаром
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Список прослеживаемых товаров
//
Функция ОперацииСПрослеживаемымиТоварами(Объект) Экспорт
	
	// TODO: На данный момент сделано только для формирования отчета об операциях
	
	// Получим таблицу для формирования данных по операции
	ТаблицаОперацииПрослеживаемости = УчетПрослеживаемыхТоваровСервер.ИнициализацияТаблицыОпераций();
	
	ОсвобождентОтНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Неопределено, Объект.Дата).ОсвобожденОтНДС;
		
	// Проверим есть ли ставка НДС в документе
	ТаблицаНДС = Объект.Автомобили.Выгрузить();
	ТаблицаНДС.Свернуть("СтавкаНДС");
	ЕстьНДС = НЕ (ТаблицаНДС.Количество() = 1 И ТаблицаНДС[0].СтавкаНДС = Справочники.СтавкиНДС.БезНДС);
	
	// Операцию об отчете не выводим если есть ставка НДС в документе и организация плательщик НДС
	Если ЕстьНДС И НЕ ОсвобождентОтНДС Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	// Сформируем запрос из документа
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПродажиАвтомобилей.Автомобиль КАК Номенклатура,
	|	ПродажиАвтомобилей.ГТД КАК РНПТ,
	|	СУММА(ПродажиАвтомобилей.Количество) КАК КоличествоПрослеживаемости,
	|	СУММА(ПродажиАвтомобилей.ВыручкаБезНДС) КАК СуммаБезНДС
	|ИЗ
	|	РегистрНакопления.ПродажиАвтомобилей КАК ПродажиАвтомобилей
	|ГДЕ
	|	ПродажиАвтомобилей.Регистратор = &Ссылка
	|	И ПродажиАвтомобилей.ГТД.РНПТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажиАвтомобилей.Автомобиль,
	|	ПродажиАвтомобилей.ГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияАвтомобилей.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(РеализацияАвтомобилей.Дата, КВАРТАЛ) КАК ПериодОтчета,
	|	ЗНАЧЕНИЕ(Перечисление.ДокументыОтображенияОпераций.ОтчетОбОперациях) КАК ОтчетностьОперации,
	|	ВЫБОР
	|		КОГДА РеализацияАвтомобилей.Контрагент.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|				И РеализацияАвтомобилей.Контрагент.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.ВывозЗаПределыРФ)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.РеализацияТоваров)
	|	КОНЕЦ КАК КодОперации,
	|	РеализацияАвтомобилей.Ссылка КАК Документ,
	|	РеализацияАвтомобилей.Дата КАК ДатаДокумента,
	|	РеализацияАвтомобилей.Номер КАК НомерДокумента,
	|	РеализацияАвтомобилей.Контрагент КАК Контрагент,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументов.Другое) КАК ВидДокумента,
	|	РеализацияАвтомобилей.Контрагент.СтранаРегистрацииЕАЭС КАК КонтрагентСтранаРегистрацииЕАЭС
	|ИЗ
	|	Документ.РеализацияАвтомобилей КАК РеализацияАвтомобилей
	|ГДЕ
	|	РеализацияАвтомобилей.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	// Проверим есть РНПТ у документа
	Если ПакетЗапросов[0].Пустой() Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	ШапкаДокумента = ПакетЗапросов[1].Выбрать();
	ШапкаДокумента.Следующий();
	
	// Указываем для отчета только для контрагентов не из ЕАЭС
	Если ШапкаДокумента.КонтрагентСтранаРегистрацииЕАЭС Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	РНПТДокумента = ПакетЗапросов[0].Выгрузить();
	НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ШапкаДокумента.Документ);
	
	Для Каждого ТекущаяСтрока Из РНПТДокумента Цикл
		
		НоваяСтрока = ТаблицаОперацииПрослеживаемости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ШапкаДокумента);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.НомерДокумента = НомерДокумента;
		
	КонецЦикла;
	
	Возврат ТаблицаОперацииПрослеживаемости;
	
КонецФункции

// Проверка на наличие ограничения на формирование расчетов с контрагентом.
//
// Параметры:
//  Обеъект	 - ДокуменОбъект, ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
// 
// Возвращаемое значение:
//  Булево - Расчеты с контрагентом формируются или нет.
//
Функция ДоступноФормированиеРасчетовСКонтрагентами(Объект) Экспорт
	
	ДоступныеОперации = Новый Массив;
	ДоступныеОперации.Добавить(Справочники.ХозОперации.РеализацияАвтомобилей);
	
	Возврат ДоступныеОперации.Найти(Объект.ХозОперация) <> Неопределено;
	
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	//// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("СкладКомпании");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	Если ДоступноФормированиеРасчетовСКонтрагентами(Объект) Тогда 
		ОбязательныеРеквизиты.Добавить("СпособЗачетаАвансов");
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("Заказчик");
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Автомобили");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Автомобили.Автомобиль");
	ОбязательныеРеквизиты.Добавить("Автомобили.ИдентификаторАвтомобиля");
	ОбязательныеРеквизиты.Добавить("Автомобили.Количество");
	
	ОбязательныеРеквизиты.Добавить("Товары.ИдентификаторАвтомобиля");
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	Если ДоступноФормированиеРасчетовСКонтрагентами(Объект) Тогда 
		Если Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
			ОбязательныеРеквизиты.Добавить("ЗачетАвансов");
		КонецЕсли;
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("ЗачетАвансов.ДокументАванса");
	ОбязательныеРеквизиты.Добавить("ЗачетАвансов.Сумма");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы автомобили
	УникальныеАвтомобили = Новый Массив();
	УникальныеАвтомобили.Добавить("Автомобиль");
	
	// Уникальные поля таблицы опции
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("ИдентификаторАвтомобиля");
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Автомобили" , УникальныеАвтомобили);
	УникальныеРеквизиты.Вставить("Товары"     , УникальныеТовары);
	
	УникальныеЗачетАвансов = Новый Массив();
	УникальныеЗачетАвансов.Добавить("ДокументАванса");
	УникальныеРеквизиты.Вставить("ЗачетАвансов", УникальныеЗачетАвансов);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("СкладКомпании",         Ложь);
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговора",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов"));
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаДоговора", ДополнительныеПараметры.ДляПроведения.ВалютаДоговора);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияАвтомобилей.Организация КАК Организация,
	|	РеализацияАвтомобилей.Ссылка КАК Ссылка,
	|	РеализацияАвтомобилей.Дата КАК Дата,
	|	РеализацияАвтомобилей.ХозОперация КАК ХозОперация,
	|	РеализацияАвтомобилей.ДокументОснование КАК ДокументОснование,
	|	РеализацияАвтомобилей.Контрагент КАК Контрагент,
	|	РеализацияАвтомобилей.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	РеализацияАвтомобилей.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	РеализацияАвтомобилей.Ссылка КАК Сделка,
	|	РеализацияАвтомобилей.СуммаДокумента КАК Сумма,
	|	РеализацияАвтомобилей.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	РеализацияАвтомобилей.ВалютаДокумента КАК ВалютаДокумента,
	|	РеализацияАвтомобилей.КурсДокумента КАК КурсДокумента,
	|	РеализацияАвтомобилей.КурсВалютыУпр КАК КурсВалютыУпр,
	|	РеализацияАвтомобилей.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.РеализацияАвтомобилей КАК РеализацияАвтомобилей
	|ГДЕ
	|	РеализацияАвтомобилей.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияАвтомобилейЗачетАвансов.Ссылка КАК Ссылка,
	|	РеализацияАвтомобилейЗачетАвансов.ДокументАванса КАК ДокументАванса,
	|	СУММА(РеализацияАвтомобилейЗачетАвансов.Сумма) КАК Сумма
	|ПОМЕСТИТЬ РаспределениеАванса
	|ИЗ
	|	Документ.РеализацияАвтомобилей.ЗачетАвансов КАК РеализацияАвтомобилейЗачетАвансов
	|ГДЕ
	|	РеализацияАвтомобилейЗачетАвансов.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияАвтомобилейЗачетАвансов.Ссылка,
	|	РеализацияАвтомобилейЗачетАвансов.ДокументАванса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр, &ВалютаДоговора)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ХозОперация КАК ХозОперация,
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДоговора КАК ВалютаДоговора,
	|	ДанныеДокумента.Сделка КАК Сделка,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыВзаиморасчетов = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютВзаиморасчетов.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетов.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыВзаиморасчетов
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютВзаиморасчетов
	|		ПО ДанныеДокумента.ВалютаДоговора = КурсыВалютВзаиморасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияАвтомобилейАвтомобили.Ссылка КАК Ссылка,
	|	РеализацияАвтомобилейАвтомобили.НомерСтроки КАК НомерСтроки,
	|	РеализацияАвтомобилейАвтомобили.Автомобиль КАК Автомобиль,
	|	РеализацияАвтомобилейАвтомобили.ИдентификаторАвтомобиля КАК ИдентификаторАвтомобиля,
	|	РеализацияАвтомобилейАвтомобили.Количество КАК Количество,
	|	РеализацияАвтомобилейАвтомобили.Цена КАК Цена,
	|	РеализацияАвтомобилейАвтомобили.Сумма КАК Сумма,
	|	РеализацияАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС,
	|	РеализацияАвтомобилейАвтомобили.СуммаНДС КАК СуммаНДС,
	|	РеализацияАвтомобилейАвтомобили.УдалитьПроцентСкидки КАК УдалитьПроцентСкидки,
	|	РеализацияАвтомобилейАвтомобили.СуммаСкидки КАК СуммаСкидки,
	|	РеализацияАвтомобилейАвтомобили.СуммаВсего КАК СуммаВсего,
	|	РеализацияАвтомобилейАвтомобили.АвтомобильБезЗаказа КАК АвтомобильБезЗаказа,
	|	РеализацияАвтомобилейАвтомобили.ЗаказНаАвтомобиль КАК ЗаказНаАвтомобиль,
	|	РеализацияАвтомобилейАвтомобили.СебестоимостьАвтомобиля КАК Себестоимость
	|ПОМЕСТИТЬ АвтомобилиДокумента
	|ИЗ
	|	Документ.РеализацияАвтомобилей.Автомобили КАК РеализацияАвтомобилейАвтомобили
	|ГДЕ
	|	РеализацияАвтомобилейАвтомобили.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	
	Если Не ДоступноФормированиеРасчетовСКонтрагентами(ДвиженияДокумента.ДляПроведения) Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.ДокументОснование КАК ДокументОснование,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Задолженность.ВалютаДоговора КАК ВалютаДоговора,
	|	Задолженность.Сделка КАК Сделка,
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр
	|ИЗ
	|	Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеАванса.ДокументАванса КАК ДокументАванса,
	|	РаспределениеАванса.Сумма КАК Сумма
	|ИЗ
	|	РаспределениеАванса КАК РаспределениеАванса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвтомобилиДокумента.ЗаказНаАвтомобиль КАК ЗаказНаАвтомобиль
	|ИЗ
	|	АвтомобилиДокумента КАК АвтомобилиДокумента";
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеОбОплате = ПакетЗапроса[0].Выбрать();
	ЗачетАванса = ПакетЗапроса[1].Выгрузить();
	
	Если Не ДанныеОбОплате.Следующий() Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	СписокЗаказов = ПакетЗапроса[2].Выгрузить().ВыгрузитьКолонку("ЗаказНаАвтомобиль");
	
	РасчетыСКонтрагентамиСервер.ДополнитьРасчетыСКонтрагентом(
		РасчетыСКонтрагентами,
		ДанныеОбОплате,
		ЗачетАванса,
		Отказ,,
		СписокЗаказов);
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ,
		Ложь);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Автомобили.Количество() > 0);
		
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяУстановкаЦен", Ложь) Тогда
		
		Для Каждого Авто Из Объект.Автомобили Цикл
			ОбработкаТабличнойЧастиАвтомобили.УстановитьЦенуНаАвтомобиль(Объект, Авто);
			АвтомобилиЦенаПриИзменении(Объект, Авто);
		КонецЦикла;
		
		Для Каждого Оборудование Из Объект.Товары Цикл
			ТоварыНоменклатураПриИзменении(Объект, Оборудование);
		КонецЦикла;
		
		ПараметрыДействия.ТребуетсяУстановкаЦен = Ложь;
		
		Если ПараметрыДействия.Свойство("ТребуетсяПересчетЦен") Тогда
			ПараметрыДействия.ТребуетсяПересчетЦен = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиАвтомобили.ПерезаполнитьЦеныТабличныхЧастей(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	УстановитьСтавкиНДС(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
	УстановитьСтавкиНДС(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	Если (ЗначениеЗаполнено(Объект.Контрагент)) И (Объект.Заказчик <> Объект.Контрагент) Тогда
		Объект.Заказчик = Объект.Контрагент;
		ЗаказчикПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЗаказчикПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если (ЗначениеЗаполнено(Объект.Заказчик)) И (НЕ ЗначениеЗаполнено(Объект.Контрагент)) Тогда
		Объект.Контрагент = Объект.Заказчик;
		КонтрагентПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "СкидкаНаценкаАвтомобили".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КарточкаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "СкидкаНаценка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Для Каждого Строка Из Объект.Товары Цикл
		Строка.ЗначениеСкидкиШапкиИзменено = Ложь;
	КонецЦикла;
	
	ОбработкаРеквизитовДокументаСервер.СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтомобили

// Обработчик события возникающего при изменении данных реквизита "Автомобиль"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиАвтомобильПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	АвтомобилиСервер.ЗаполнитьПризнакПриобретенияУФизЛица(Объект, Строка);
	
	Строка.СебестоимостьАвтомобиля = АвтомобилиСервер
		.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Строка.Автомобиль, Объект);
	
	ПараметрыДействия.Вставить("Себестоимость", Строка.СебестоимостьАвтомобиля);
	
	ОбработкаТабличнойЧастиАвтомобили.АвтомобильПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
	ДобавитьОборудованиеАвтомобиля(Объект, Строка.Автомобиль, Истина);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Строка.СебестоимостьАвтомобиля = АвтомобилиСервер
		.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Строка.Автомобиль, Объект);
	
	ПараметрыДействия.Вставить("Себестоимость", Строка.СебестоимостьАвтомобиля);
	
	ОбработкаТабличнойЧастиАвтомобили.ЦенаПриИзменении(ОБъект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Строка.СебестоимостьАвтомобиля = АвтомобилиСервер
		.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Строка.Автомобиль, Объект);
	
	ПараметрыДействия.Вставить("Себестоимость", Строка.СебестоимостьАвтомобиля);
	
	ОбработкаТабличнойЧастиАвтомобили.СуммаПриИзменении(ОБъект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Строка.СебестоимостьАвтомобиля = АвтомобилиСервер
		.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Строка.Автомобиль, Объект);
	
	ПараметрыДействия.Вставить("Себестоимость", Строка.СебестоимостьАвтомобиля);
	
	ОбработкаТабличнойЧастиАвтомобили.СуммаВсегоПриИзменении(ОБъект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Строка.СебестоимостьАвтомобиля = АвтомобилиСервер
		.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Строка.Автомобиль, Объект);
	
	ПараметрыДействия.Вставить("Себестоимость", Строка.СебестоимостьАвтомобиля);
	
	ОбработкаТабличнойЧастиАвтомобили.СтавкаНДСПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "заказ на автомобиль"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиЗаказНаАвтомобиль(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Строка.ЗаказНаАвтомобиль) Тогда
		Строка.АвтомобильБезЗаказа = Ложь;
		ПараметрыДействия.Вставить("ИзменилсяЗаказ", Истина);
		ПараметрыДействия.Вставить("ИскатьЗаказ", Ложь);
		Если НЕ Строка.Автомобиль = Строка.ЗаказНаАвтомобиль.Автомобиль Тогда
			Строка.Автомобиль = Строка.ЗаказНаАвтомобиль.Автомобиль;
		КонецЕсли;
		АвтомобилиАвтомобильПриИзменении(Объект, Строка, ПараметрыДействия);
	Иначе
		Строка.СуммаСкидки = 0;
		АвтомобилиЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Автомобиль без заказа"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиАвтомобильБезЗаказа(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Строка.ЗаказНаАвтомобиль) Тогда
		Строка.ЗаказНаАвтомобиль = Неопределено;
		АвтомобилиЗаказНаАвтомобиль(Объект, Строка);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки"
//
Процедура АвтомобилиПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Строка.СебестоимостьАвтомобиля = АвтомобилиСервер
		.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Строка.Автомобиль, Объект);
	
	ПараметрыДействия.Вставить("Себестоимость", Строка.СебестоимостьАвтомобиля);
	
	ОбработкаТабличнойЧастиАвтомобили.АвтомобилиРассчитатьСуммуСтроки("ПроцентСкидки", Объект, Строка, ПараметрыДействия, "Автомобили");
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки"
//
Процедура АвтомобилиСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Строка.СебестоимостьАвтомобиля = АвтомобилиСервер
		.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Строка.Автомобиль, Объект);
	
	ПараметрыДействия.Вставить("Себестоимость", Строка.СебестоимостьАвтомобиля);
	
	ОбработкаТабличнойЧастиАвтомобили.АвтомобилиРассчитатьСуммуСтроки("СуммаСкидки", Объект, Строка, ПараметрыДействия, "Автомобили");
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Приобретен у физ. лица"
//
Процедура АвтомобилиПриобретенУФизЛицаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	АвтомобилиСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
		// Если имеем дело с автомобилем - обработаем локально
		// Установим количество.
		Строка.Количество = 1;
		Строка.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
		Строка.Коэффициент = 1;
		// Заполним ставку НДС
		Если Не ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
			Строка.СтавкаНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата).ОсновнаяСтавка;
		КонецЕсли;
	Иначе
		ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЕсли;
	
	// Проверим, имеют ли смысл дельнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	// А вот тут мы загрузим те цены, которые указаны в регистре комплектации
	
	СтрокиАвтомобиля = Объект.Автомобили.НайтиСтроки(Новый Структура("ИдентификаторАвтомобиля", Строка.ИдентификаторАвтомобиля));
	
	Если СтрокиАвтомобиля.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Автомобиль = СтрокиАвтомобиля[0].Автомобиль;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(КомплектацияАвтомобилейОстатки.КоличествоОстаток) КАК Количество,
	|	СУММА(КомплектацияАвтомобилейОстатки.СуммаПродажиОстаток) КАК СуммаПродажи,
	|	СУММА(КомплектацияАвтомобилейОстатки.СуммаПродажиУпрОстаток) КАК СуммаПродажиУпр
	|ИЗ
	|	РегистрНакопления.КомплектацияАвтомобилей.Остатки(
	|		&НаДату,
	|		Автомобиль = &Автомобиль
	|		    И Номенклатура = &Номенклатура
	|		    И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры) КАК КомплектацияАвтомобилейОстатки";
	Запрос.УстановитьПараметр("НаДату"                     , ?(Объект.Ссылка.Пустая(), Новый МоментВремени(КонецДня(Объект.Дата)),Новый Граница(Объект.Дата,ВидГраницы.Исключая)));
	Запрос.УстановитьПараметр("Автомобиль"                 , Автомобиль);
	Запрос.УстановитьПараметр("Номенклатура"               , Строка.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры" , Строка.ХарактеристикаНоменклатуры);
	ОстаткиОборудования = Запрос.Выполнить().Выгрузить();
	
	Строка.Количество = ОстаткиОборудования.Итог("Количество");
	
	Если Строка.Количество = 0 Тогда
		Строка.Количество=0;
	КонецЕсли;
	
	ВалютаРегламентированногоУчетаОрганизаций = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчетаОрганизаций Тогда
		ОстатокСуммы = ОстаткиОборудования.Итог("СуммаПродажи");
	Иначе
		ОстатокСуммы = ОстаткиОборудования.Итог("СуммаПродажиУпр");
		ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить(); 
		Если НЕ ЗначениеЗаполнено(Объект.КурсВалютыУпр) Тогда
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, Объект.Дата);
			КурсУпр        = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		Иначе
			КурсУпр        = Объект.КурсВалютыУпр;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОстатокСуммы) Тогда
		ОстатокСуммы=0;
	КонецЕсли;
	
	Если Объект.ВалютаДокумента <> ВалютаРегламентированногоУчетаОрганизаций Тогда
		ОстатокСуммы = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ОстатокСуммы, ВалютаУпр, КурсУпр, Объект.ВалютаДокумента, Объект.КурсДокумента);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС = Истина;
	Иначе
		ЦенаВключаетНДС = Объект.ТипЦен.ЦенаВключаетНДС;
	КонецЕсли;
	
	Если НЕ ЦенаВключаетНДС Тогда
		// НДС в цену не включен
		ОстатокСуммы=(100*ОстатокСуммы)/(100+Строка.СтавкаНДС.Ставка);
	КонецЕсли; 
	Строка.Сумма = ОстатокСуммы;
	
	ТоварыСуммаПриИзменении(Объект, Строка);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество базовое" в таблице "Товары".
//
// Параметры:
//  Объект 
//  Строка - строка табличной части
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоБазовоеПриИзменении(Объект, Строка);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "ГТД" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыГТДПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ГТДПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Партия" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПартияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПартияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиСтрокиПриИзменении(Объект, Строка);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиПриИзменении(Объект, Строка);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Скидка на товар" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ТоварыПроцентСкидкиПриИзменении(Объект, Строка);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПроцентСкидкиСтрокиПриИзменении(Объект, Строка);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка);
	
КонецПроцедуры

// расчет скидок по строке
Процедура РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти="Товары", СкидкаШапкиАбсолютная=Ложь) Экспорт
	
	СкидкиНаценкиСервер.РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти, СкидкаШапкиАбсолютная);
	
КонецПроцедуры // РассчитатьСкидкиСтроки()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗачетАвансов

// Обработчик события возникающего при изменении данных реквизита "Документ аванса" в таблице "ЗачетАвансов".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЗачетАвансовДокументАвансаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	РасчетыСКонтрагентамиСервер.ДокументАвансаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Автомобили");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ВозвратПоставщикуАвтомобилей");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Автомобили");
	КонецЕсли;
		
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.РеализацияАвтомобилей",
		"РеализацияАвтомобилей",
		НСтр("ru = 'Реализация автомобилей'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ12",
		НСтр("ru = 'ТОРГ-12 (Товарная накладная)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ12_Развернутая",
		НСтр("ru = 'ТОРГ-12 (Развернутая товарная накладная)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТТН",
		НСтр("ru = '1-Т (Товарно-транспортная накладная)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТТН30122011_Приложение4",
		НСтр("ru = 'Приложение №4 (Транспортная накладная)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.РеализацияАвтомобилей",
		"АктПриемаПередачиТС",
		НСтр("ru = 'Акт приема-передачи ТС'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьУПД",
		"ПФ_MXL_УПД",
		НСтр("ru = 'Универсальный передаточный документ'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"",
		"ПФ_MXL_ДоговорКуплиПродажиАвтомобиля",
		НСтр("ru = 'Договор купли-продажи автомобиля'"),
		СсылкаНаДокумент,
		"УправлениеПечатьюАвтосалонКлиент.ПечатьДоговорКуплиПродажи");
		
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РеализацияАвтомобилей") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"РеализацияАвтомобилей",
															"Реализация автомобилей",
															ПечатьРеализацияАвтомобилей(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктПриемаПередачиТС") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"АктПриемаПередачиТС",
															"Акт приема-передачи ТС",
															ПечатьАктПриемаПередачиТС(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ДоговорКуплиПродажиАвтомобиля") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ДоговорКуплиПродажиАвтомобиля",
															"Договор купли-продажи автомобиля",
															ПечатьДоговорКуплиПродажиАвтомобиля(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "Накладная"
// Возвращает сформированный табличный документ:
Функция ПечатьРеализацияАвтомобилей(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияАвтомобилей.ПФ_MXL_РеализацияАвтомобилей");
		
		Если Документ.Автомобили.Итог("СуммаСкидки") = 0 И Документ.Товары.Итог("СуммаСкидки") = 0 Тогда
			// удалим область
			ОбластьСкидка = Макет.Область("Скидка");
			ОбластьТовар = Макет.Область("Товар");
			ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ОбластьСкидка.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьСкидка, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// заголовок
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Наименование", "");
		СтруктураПараметров.Вставить("ИНН", "ИНН ");
		СтруктураПараметров.Вставить("КПП", "КПП ");
		СтруктураПараметров.Вставить("АдресЮридический", "");
		СтруктураПараметров.Вставить("ТелефонРабочий", "тел.: ");
		СтруктураПараметров.Вставить("БанковскийСчет", "р/с ");
		СтруктураПараметров.Вставить("Банк", НСтр("ru = 'в банке'") + Символы.НПП);
		СтруктураПараметров.Вставить("БИК", "БИК ");
		СтруктураПараметров.Вставить("КоррСчет", "к/с ");
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПокупателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Контрагент, СтруктураПараметров, ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ПредставлениеСклада =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СкладКомпании);
		
		// выведем или удалим ШК
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// заполняем заголовок колонки НДС по типу цен
		Параметры = Новый Структура("НДС");
		Параметры.НДС = "НДС";
		Если Документ.ТипЦен.ЦенаВключаетНДС
			И НЕ ПолучитьПараметрыПлательщикаНДС(Документ.Организация, Документ.ПодразделениеКомпании, Документ.Дата).ОсвобожденОтНДС Тогда	// Если НДС включен
			Параметры.НДС = НСтр("ru = 'в т.ч. НДС'");
		КонецЕсли;
		ОбластьШапкаТаблицы.Параметры.Заполнить(Параметры);
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// подготовим дополнительную таблицу
		ТаблицаТоваровПоАвтомобилям = Документ.Товары.Выгрузить();
		ТаблицаТоваровПоАвтомобилям.Свернуть("ИдентификаторАвтомобиля", "Сумма,СуммаНДС,СуммаСкидки,СуммаВсего");
		
		// готовим шапку
		НомерСтраницы = 2;
		НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура;
		СтруктураИтоговПоСтранице.Вставить("СуммаВсего", 0);
		СтруктураИтоговПоСтранице.Вставить("СуммаНДС", 0);
		СтруктураИтоговПоСтранице.Вставить("СуммаСкидки", 0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		ИтогСкидка = 0;
		// 
		ВыборкаТабличнойЧасти = Документ.Автомобили.Выгрузить();
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			СтрокаТабличнойЧастиТоваров = ТаблицаТоваровПоАвтомобилям.Найти(СтрокаТЧ.ИдентификаторАвтомобиля,
				"ИдентификаторАвтомобиля");
			Если СтрокаТабличнойЧастиТоваров <> Неопределено Тогда
				СтрокаТЧ.Сумма		= СтрокаТЧ.Сумма		+ СтрокаТабличнойЧастиТоваров.Сумма;
				СтрокаТЧ.СуммаНДС	= СтрокаТЧ.СуммаНДС		+ СтрокаТабличнойЧастиТоваров.СуммаНДС;
				СтрокаТЧ.СуммаВсего	= СтрокаТЧ.СуммаВсего	+ СтрокаТабличнойЧастиТоваров.СуммаВсего;
				СтрокаТЧ.СуммаСкидки = СтрокаТЧ.СуммаСкидки + СтрокаТабличнойЧастиТоваров.СуммаСкидки;
			КонецЕсли;
			
			// заполняем данные строки
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхСтрокиДляАвтомобилей(СтрокаТЧ, Документ);
			
			СистемаНалогообложения 	= ПолучитьЗначениеУчетнойПолитики("СистемаНалогообложения", Документ.Организация);
			УпрощеннаяСистема 		= СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная;
			Если УпрощеннаяСистема И СтрокаТЧ.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
				СтруктураСтроки.ВСтавить("СуммаНДС", "Без НДС");	
			КонецЕсли;
			
			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Автомобили.Индекс(СтрокаТЧ) = Документ.Автомобили.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура;
				СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
				СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
				СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
				СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
				НомерСтраницыПредыдущий = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			ИтогСкидка = ИтогСкидка + СтрокаТЧ.СуммаСкидки;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// заполнение подвала и итогов
		
		// форматы вывода
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("СуммаВсего");
		ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		НДСВсего   = ВыборкаТабличнойЧасти.Итог("СуммаНДС");
		ОбластьПодвал.Параметры.НДСВсего = Формат(НДСВсего, ФорматВыводаСуммы);
		Если Документ.Автомобили.Итог("СуммаСкидки") > 0 ИЛИ Документ.Товары.Итог("СуммаСкидки") > 0 Тогда
			СкидкаВсего = ИтогСкидка;
			Попытка
				СкидкаВсего = СкидкаВсего + ВыборкаТабличнойЧасти.Итог("СуммаСкидкиСтроки");
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при подсчете скидки'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
			КонецПопытки;
			ОбластьПодвал.Параметры.СкидкаВсего = Формат(СкидкаВсего, ФорматВыводаСуммы);
		КонецЕсли;
		ОбластьПодвал.Параметры.СуммаПрописью = СтрШаблон(НСтр("ru = 'Всего наименований %1 на сумму %2'"),
			ВыборкаТабличнойЧасти.Количество(),
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, Документ.ВалютаДокумента));
		
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПолучилКонтрагент", "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// блок области
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияАвтомобилей_РеализацияАвтомобилей";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "ТОРГ-12"
// Возвращает сформированный табличный документ:
Функция ПолучитьДанныеДляПечатиТОРГ12(Объект) Экспорт
	
	Товары = ПолучитьТабличныеЧастиДляПечатиБезОборудования(Объект);
	
	Возврат ПолучитьДанныеОбъектаДляПечатиТОРГ12(Объект,Товары);
	
КонецФункции

// Формирует печатную форму "ТОРГ-12 развернутая"
// Возвращает сформированный табличный документ:
Функция ПолучитьДанныеДляПечатиТОРГ12Развернутая(Объект) Экспорт
	
	Товары = ПолучитьТабличныеЧастиДляПечатиСОборудованием(Объект);
	
	Возврат ПолучитьДанныеОбъектаДляПечатиТОРГ12(Объект, Товары);

КонецФункции

// Получает данные для печатной формы "ТОРГ12".
Функция ПолучитьДанныеОбъектаДляПечатиТОРГ12(Объект, Товары) 
	
	 ДанныеОбъекта = Новый Структура();
	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"          , Объект.КурсДокумента);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("ДокументОснование"      , Объект.ДоговорВзаиморасчетов);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  , Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("ОснованиеДата"          , Формат(Объект.ДоговорВзаиморасчетов.ДатаНачала, "ЧЦ=; ДФ=dd.MM.yyyy"));
	ДанныеОбъекта.Вставить("ОснованиеНомер"         , Объект.ДоговорВзаиморасчетов.НомерДоговора);
	ДанныеОбъекта.Вставить("КодПоОКПО"              , Объект.Организация.КодПоОКПО);
	ДанныеОбъекта.Вставить("РасчетныйСчетДокумента" , "");
	
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти"  , Товары);
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПоставщикКонтрагент);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Плательщик);
		
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства);
	ДанныеОбъекта.Вставить("Поставщик"             , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ПоставщикКонтрагент", ЗначенияСвойствОбъекта,Объект.Организация));
	ДанныеОбъекта.Вставить("Плательщик"            , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Плательщик", ЗначенияСвойствОбъекта,Объект.Контрагент));
		
	ДанныеОбъекта.Вставить("Грузоотправитель"        , ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, Объект.Организация));
	ДанныеОбъекта.Вставить("Грузополучатель"         , ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, Объект.Контрагент));
	
	ДанныеОбъекта.Вставить("ГрузополучательПоОКПО" , ДанныеОбъекта.Грузополучатель.КодПоОКПО);
	ДанныеОбъекта.Вставить("ПоставщикПоОКПО"       , ДанныеОбъекта.Поставщик.КодПоОКПО);
	ДанныеОбъекта.Вставить("ПлательщикПоОКПО"      , ?(ТипЗнч(ДанныеОбъекта.Плательщик) = Тип("СправочникСсылка.ПодразделенияКомпании"), ДанныеОбъекта.Плательщик.Организация.КодПоОКПО, ДанныеОбъекта.Плательщик.КодПоОКПО));
	
	ДанныеОбъекта.Вставить("Руководитель"     	     , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Руководитель"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Отпустил"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Отпустил"));
	ДанныеОбъекта.Вставить("Принял"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Принял"));
	ДанныеОбъекта.Вставить("Получил"          		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Получил"));
	ДанныеОбъекта.Вставить("ИмяТабличнойЧасти", "Автомобили");
	
	Возврат ДанныеОбъекта;
	
КонецФункции

// Формирует печатную форму Т-1 "Товарно-транспортная накладная"
// 
// Параметры:
//  ТабДокумент - табличный документ.
//
// Возвращаемое значение:
//  ТабДокумент - возвращает сформированный табличный документ.
//
Функция ПолучитьДанныеДляПечатиТ1(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КурсРегл  = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(ВалютаРегл, Объект.Дата);
	ВалютаДокумента = Объект.ВалютаДокумента;
	КурсДокумента = Объект.КурсДокумента;
	
	// данные документа
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , ВалютаРегл);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	
	// форматы вывода
	ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Объект);
	ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Объект);
	
	// формирование табличной чати 
	ТаблицаВыбора = Новый ТаблицаЗначений;
	ТаблицаВыбора.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Автомобили"));
	ТаблицаВыбора.Колонки.Добавить("КодПродукции", Новый ОписаниеТипов("Строка"));
	// ТаблицаВыбора.Колонки.Добавить("ТоварНаименование", Новый ОписаниеТипов("Строка"));
	ТаблицаВыбора.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("Строка"));
	ТаблицаВыбора.Колонки.Добавить("Артикул", Новый ОписаниеТипов("Строка"));
	ТаблицаВыбора.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаВыбора.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаВыбора.Колонки.Добавить("КоличествоБазовое", Новый ОписаниеТипов("Число"));
	ТаблицаВыбора.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	ТаблицаВыбора.Колонки.Добавить("СуммаВсего", Новый ОписаниеТипов("Число"));
	
	ВыборкаАвтомобилей = Объект.Автомобили.Выгрузить();
	КоличествоСтрок = ВыборкаАвтомобилей.Количество();
	
	Для Каждого СтрокаАвтомобиля Из ВыборкаАвтомобилей Цикл
		СтрокиОпций = 
			Объект.Товары.НайтиСтроки(Новый Структура("ИдентификаторАвтомобиля", СтрокаАвтомобиля.ИдентификаторАвтомобиля));
		Для Каждого СтрокаОпций Из СтрокиОпций Цикл
			СтрокаАвтомобиля.СуммаВсего = СтрокаАвтомобиля.СуммаВсего + СтрокаОпций.СуммаВсего;
		КонецЦикла;
	КонецЦикла;
	
	ТребуетсяПересчетСуммыВсего = Истина;
	Если Объект.Проведен Тогда
		РасчетыСКонтрагентами = РасчетыСКонтрагентамиСервер.РасчетыСКонтрагентамиПоДокументу(Объект);
		Если РасчетыСКонтрагентами.Количество() > 0 Тогда
			ТребуетсяПересчетСуммыВсего = Ложь;
			УсловиеОтбора = Новый Структура;
			УсловиеОтбора.Вставить("ТипРасчета", Перечисления.ТипыРасчетов.Оплата);
			УсловиеОтбора.Вставить("ВидДвижения", ВидДвиженияНакопления.Приход);
			СуммыПоРасчетамСКонтрагентом = РасчетыСКонтрагентамиСервер.СуммовыеПоказателиРасчетаСКонтрагентами(
				РасчетыСКонтрагентами,
				УсловиеОтбора);
			ОбработкаСобытийДокументаСервер.РаспределитьСуммуПоТаблице(
				СуммыПоРасчетамСКонтрагентом.СуммаБаз,
				ВыборкаАвтомобилей,
				"СуммаВсего");
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из ВыборкаАвтомобилей Цикл
		
		НоваяСтрока = ТаблицаВыбора.Добавить();
		
		Если ТребуетсяПересчетСуммыВсего Тогда
			СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СтрокаТабличнойЧасти.СуммаВсего,
				ВалютаДокумента,
				КурсДокумента,
				ВалютаРегл,
				КурсРегл,
				РежимОкругления.Окр15как20);
		Иначе
			СуммаВсего = СтрокаТабличнойЧасти.СуммаВсего;
		КонецЕсли;
		
		// Сумма = СтрокаТабличнойЧасти.СуммаАвтомобиля + СтрокаТабличнойЧасти.СуммаКомплектации;
		НоваяСтрока.КодПродукции				= СтрокаТабличнойЧасти.Автомобиль.VIN;
		НоваяСтрока.ХарактеристикаНоменклатуры	= "";
		НоваяСтрока.Артикул 					= "";
		НоваяСтрока.Количество					= Формат(СтрокаТабличнойЧасти.Количество, ФорматВыводаКоличества);
		НоваяСтрока.Цена						= Формат(СуммаВсего, ФорматВыводаСуммы);
		НоваяСтрока.Номенклатура				= СтрокаТабличнойЧасти.Автомобиль;
		НоваяСтрока.ЕдиницаИзмерения			= Справочники.КлассификаторЕдиницИзмерения.шт.Наименование;
		НоваяСтрока.СуммаВсего					= Формат(СуммаВсего, ФорматВыводаСуммы);
		НоваяСтрока.КоличествоБазовое			= 1;
	КонецЦикла;
	
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти", ТаблицаВыбора);
	
	Если ЗначениеЗаполнено(Объект.Грузополучатель) Тогда
		
		ДанныеОбъекта.Вставить("Грузополучатель", Объект.Грузополучатель);
		
	Иначе
		
		ДанныеОбъекта.Вставить("Грузополучатель", Объект.Контрагент);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Грузоотправитель) Тогда
		
		ДанныеОбъекта.Вставить("Грузоотправитель", Объект.Грузоотправитель);
		
	Иначе
		
		ДанныеОбъекта.Вставить("Грузоотправитель", Объект.Организация);
		
	КонецЕсли;
	
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Грузополучатель);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Грузоотправитель);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Плательщик);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Заказчик);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства);
	
	ДанныеОбъекта.Вставить("Плательщик"            		, УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Плательщик", ЗначенияСвойствОбъекта,Объект.Контрагент));
	ДанныеОбъекта.Вставить("Заказчик"            		, УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Плательщик", ЗначенияСвойствОбъекта,Объект.Контрагент));
	ДанныеОбъекта.Вставить("ЛицензионнаяКарточка"  		, "");
	ДанныеОбъекта.Вставить("СрокДоставки"          		, "");
	ДанныеОбъекта.Вставить("Перевозчик"            		, Объект.Перевозчик);
	ДанныеОбъекта.Вставить("МаркаАвтомобиля"            , Объект.МодельАвтомобиля);
	ДанныеОбъекта.Вставить("ГосНомерАвтомобиля"         , Объект.ГосНомерАвтомобиля);
	ДанныеОбъекта.Вставить("Водитель"           		, Объект.Водитель);
	ДанныеОбъекта.Вставить("ВодительскоеУдостоверение"  , Объект.НомерВодительскогоУдостоверения);
	ДанныеОбъекта.Вставить("ВидПеревозки"           	, "");
	ДанныеОбъекта.Вставить("ПунктПогрузки"            	, "");
	ДанныеОбъекта.Вставить("ПунктРазгрузки"             , Объект.АдресДоставки);
	ДанныеОбъекта.Вставить("МаркаПрицепа"            	, Объект.МодельПрицепа);
	ДанныеОбъекта.Вставить("ГосНомерПрицепа"            , Объект.ГосНомерПрицепа);
	ДанныеОбъекта.Вставить("ОписаниеГруза"            	, Объект.ОписаниеГруза);	
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"      , Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("Отпустил"         			, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Отпустил", "Отпустил"));
	ДанныеОбъекта.Вставить("Получил"          			, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Получил", "Получил"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 			, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Руководитель"     			, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Руководитель"));
	
	Возврат ДанныеОбъекта;
	
КонецФункции //ПечатьТ1()

// Формирует печатную форму "Акт приема-передачи ТС"
// 
// Параметры:
//  ТабДокумент - табличный документ.
//
// Возвращаемое значение:
//  ТабДокумент - возвращает сформированный табличный документ.
//
Функция ПечатьАктПриемаПередачиТС(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияАвтомобилей.ПФ_MXL_АктПриемаПередачиТС");
		
		Паспорт = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
			Документ.Контрагент,
			Перечисления.ВидыДокументов.Паспорт
		);
		
		// свойства
		ИскомыеСвойства = Новый Массив();
		ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Отпустил);
	
		ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Документ, Истина, Истина, ИскомыеСвойства);
		
		Сотрудник = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства(
			"Отпустил",
			ЗначенияСвойствОбъекта,
			Справочники.Сотрудники.ПустаяСсылка()
		);
		Если Сотрудник.Пустая() Тогда
			Руководитель = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Руководитель");
			Если ЗначениеЗаполнено(Руководитель) И ТипЗнч(Руководитель) = Тип("Структура") Тогда
				Если ЗначениеЗаполнено(Руководитель.РуководительДолжность) Тогда
					ОрганизацияДолжность = НСтр("ru = ', в лице'") + Символы.НПП + СокрЛП(НРег(Руководитель.РуководительДолжность));
					ДолжностьПодпись = СокрЛП(НРег(Руководитель.РуководительДолжность));
				КонецЕсли;
			КонецЕсли;
			ОрганизацияЛицо = " " + СокрЛП(Руководитель.Руководитель);
			ДоверенностьРуководителя = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
				Руководитель.Руководитель,
				Перечисления.ВидыДокументов.Доверенность
			);
		Иначе
			ОрганизацияЛицо = " " + СокрЛП(Сотрудник.Наименование);
			Если ЗначениеЗаполнено(Сотрудник.Должность) Тогда
				ОрганизацияДолжность = НСтр("ru = ', в лице'") + Символы.НПП + СокрЛП(НРег(Сотрудник.Должность));
				ДолжностьПодпись = СокрЛП(НРег(Сотрудник.Должность));
			КонецЕсли;
			ДоверенностьРуководителя = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
				Сотрудник,
				Перечисления.ВидыДокументов.Доверенность
			);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоверенностьРуководителя) Тогда
			ОрганизацияДокумент = СтрШаблон(
				НСтр("ru = 'Доверенности № %1 от %2'"),
				ДоверенностьРуководителя.Номер,
				Формат(ДоверенностьРуководителя.ДатаВыдачи, "ДЛФ=D")
			);
		Иначе
			ОрганизацияДокумент = "Устава";
		КонецЕсли;
		ОрганизацияДокумент = ", действующего  на основании " + ОрганизацияДокумент;
		
		ПаспортныеДанные = "";
		Если ЗначениеЗаполнено(Паспорт) Тогда
			ПаспортныеДанные = СтрШаблон(
				НСтр("ru = ', паспорт серии %1 № %2 выдан %3 %4 г.'"),
				Паспорт.Серия,
				Паспорт.Номер,
				Паспорт.КемВыдан,
				Формат(Паспорт.ДатаВыдачи, "ДЛФ=DD")
			);
		КонецЕсли;
		
		Для Каждого Строка Из Документ.Автомобили Цикл
			
			Если ЕстьРеквизит(Документ,,"Товары") Тогда
				ДопОборудованиеАвто = ПолучитьДопОборудование(Документ.Товары, Строка.ИдентификаторАвтомобиля);
			Иначе
				ДопОборудованиеАвто = Новый Массив;
			КонецЕсли;
			
			СуммаДопОборудования = 0;
			
			ОбластьМакетаВерх = Макет.ПолучитьОбласть("ШапкаВерх");
			ОбластьМакетаНиз = Макет.ПолучитьОбласть("ШапкаНиз");
			
			ОбластьМакетаВерх.Параметры.Дата = Формат(Документ.Дата,"ДЛФ=DD");
			ОбластьМакетаВерх.Параметры.Организация = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация, Документ.Дата);
			ФактическийАдрес = Документ.ПодразделениеКомпании.КонтактнаяИнформация.Выгрузить();
			Если ФактическийАдрес <> Неопределено  И ФактическийАдрес.Количество() > 0 Тогда
				Инд = 0;
				Пока Инд < ФактическийАдрес.Количество() Цикл
					Если ФактическийАдрес[Инд].Вид.ИмяПредопределенныхДанных = "ФактАдресПодразделенияКомпании" Тогда
						Если ЗначениеЗаполнено(ФактическийАдрес[Инд].Город) Тогда
							ОбластьМакетаВерх.Параметры.Город = ?(Лев(ФактическийАдрес[Инд].Город, 1) = "г",
								ФактическийАдрес[Инд].Город,
								"г. " + ФактическийАдрес[Инд].Город
							);
						Иначе
							ОбластьМакетаВерх.Параметры.Город = "";
						КонецЕсли;
					КонецЕсли;
					Инд = Инд+1;
				КонецЦикла;
			КонецЕсли;
			
			ОбластьМакетаВерх.Параметры.ОрганизацияДолжность = ОрганизацияДолжность;
			ОбластьМакетаНиз.Параметры.ДолжностьПодпись = ДолжностьПодпись;
			ОбластьМакетаНиз.Параметры.ОрганизацияЛицо = ОрганизацияЛицо;
			ОбластьМакетаВерх.Параметры.ОрганизацияДокумент = ОрганизацияДокумент;
			
			ОбластьМакетаВерх.Параметры.Покупатель = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент, Документ.Дата);
			ОбластьМакетаВерх.Параметры.ПаспортныеДанные = ПаспортныеДанные;
			
			ОбластьМакетаВерх.Параметры.Модель = "" + УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Строка.Автомобиль.Модель);
			ОбластьМакетаВерх.Параметры.ГодВыпуска = Формат(Строка.Автомобиль.ГодВыпуска, "ДФ=гггг");
			ОбластьМакетаВерх.Параметры.Цвет = Строка.Автомобиль.Цвет;
			ОбластьМакетаВерх.Параметры.VIN = Строка.Автомобиль.VIN;
		
			Если ЗначениеЗаполнено(Строка.Автомобиль.НомерКузова) Тогда
				ОбластьМакетаВерх.Параметры.НомерКузова = Строка.Автомобиль.НомерКузова;
			Иначе
				ОбластьМакетаВерх.Параметры.НомерКузова = "отсутствует";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.Автомобиль.НомерШасси) Тогда
				ОбластьМакетаВерх.Параметры.НомерШасси = Строка.Автомобиль.НомерШасси;
			Иначе
				ОбластьМакетаВерх.Параметры.НомерШасси = "отсутствует";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.Автомобиль.НомерКузова) Тогда
				ОбластьМакетаВерх.Параметры.НомерДвигателя = Строка.Автомобиль.НомерДвигателя;
			Иначе
				ОбластьМакетаВерх.Параметры.НомерДвигателя = "отсутствует";
			КонецЕсли;
			
			ПТС = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
				Строка.Автомобиль,
				Перечисления.ВидыДокументов.ПТС
			);
			
			Если ЗначениеЗаполнено(ПТС) Тогда
				ОбластьМакетаВерх.Параметры.ПТС = СтрШаблон(
					НСтр("ru = 'ПТС %1 № %2 выдан %3 %4'"),
					ПТС.Серия,
					ПТС.Номер,
					ПТС.КемВыдан,
					Формат(ПТС.ДатаВыдачи, "ДЛФ=DD")
				);
			Иначе
				ПТС = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
					Строка.Автомобиль,
					Перечисления.ВидыДокументов.ЭлектронныйПТС
				);
				
				Если ЗначениеЗаполнено(ПТС) Тогда
					ОбластьМакетаВерх.Параметры.ПТС = СтрШаблон(
						НСтр("ru = 'Электронный ПТС № %1 создан %2'"),
						ПТС.Номер,
						Формат(ПТС.ДатаВыдачи, "ДЛФ=DD")
					);
				Иначе
					ОбластьМакетаВерх.Параметры.ПТС = "отсутствует";
				КонецЕсли;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакетаВерх);
			
			// Выведем оборудование
			
			ОбластьДопОборудования = Макет.ПолучитьОбласть("ШапкаЦентрОборудование");
			КолВоДопОборудования = ДопОборудованиеАвто.Количество();
			Если КолВоДопОборудования = 0 Тогда
				ОбластьДопОборудования.Параметры.ДопОборудование = "отсутствует";
				ТабличныйДокумент.Вывести(ОбластьДопОборудования);
			ИначеЕсли КолВоДопОборудования = 1 Тогда
				Для Каждого СтрокаОборудования Из ДопОборудованиеАвто Цикл
					ОбластьДопОборудования.Параметры.ДопОборудование = НРег(СтрокаОборудования.Номенклатура.Наименование);
					СуммаДопОборудования = СуммаДопОборудования + СтрокаОборудования.СуммаВсего;
					ТабличныйДокумент.Вывести(ОбластьДопОборудования);
				КонецЦикла;
			Иначе
				ОбластьДопОборудования.Параметры.ДопОборудование = НРег(ДопОборудованиеАвто[0].Номенклатура.Наименование) + ",";
				СуммаДопОборудования = СуммаДопОборудования + ДопОборудованиеАвто[0].СуммаВсего;
				ТабличныйДокумент.Вывести(ОбластьДопОборудования);
				
				ОбластьДопОборудованияПодч = Макет.ПолучитьОбласть("ШапкаЦентрОборудованиеДоп");
				Индекс = 1;
				Пока Индекс < КолВоДопОборудования Цикл
					ОбластьДопОборудованияПодч.Параметры.ДопОборудованиеПодч = 
						НРег(ДопОборудованиеАвто[Индекс].Номенклатура.Наименование)
						+ ?(Индекс = КолВоДопОборудования - 1, ".", ",");
					СуммаДопОборудования = СуммаДопОборудования + ДопОборудованиеАвто[Индекс].СуммаВсего;
					ТабличныйДокумент.Вывести(ОбластьДопОборудованияПодч);
					Индекс = Индекс + 1;
				КонецЦикла;

			КонецЕсли;
			
			ОбластьМакетаНиз.Параметры.ЦенаАвтомобиля = Формат(Окр(Строка.СуммаВсего + СуммаДопОборудования), "ЧДЦ=2");
			ОбластьМакетаНиз.Параметры.ЦенаАвтомобиляПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(
				Строка.СуммаВсего + СуммаДопОборудования,
				Документ.ВалютаДокумента
			);
			ОбластьМакетаНиз.Параметры.Валюта = Документ.ВалютаДокумента;
			
			ТабличныйДокумент.Вывести(ОбластьМакетаНиз);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияАвтомобилей_АктПриемаПередачиТС";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "Акт приема-передачи ТС"
// 
// Параметры:
//  ТабДокумент - табличный документ.
//
// Возвращаемое значение:
//  ТабДокумент - возвращает сформированный табличный документ.
//
Функция ПечатьДоговорКуплиПродажиАвтомобиля(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	КоличествоАвтомобилейИДокументов = МассивОбъектов.Количество() - 1;
	
	ПервыйДокумент = Истина;
	
	// формирование табличного документа
	Для Сч = 0 По КоличествоАвтомобилейИДокументов Цикл
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияАвтомобилей.ПФ_MXL_ДоговорКуплиПродажиАвтомобиля");
		
		Автомобиль = МассивОбъектов[Сч];
		Документ   = МассивОбъектов[Сч+1];
		
		// продается авто физ. или юр. лицу?
		ПокупательФизЛицо = ?(Документ.Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо,
			Истина, Ложь);
		
		// получение необходимых областей
		ОбластьЗаголовок                = Макет.ПолучитьОбласть("Заголовок");
		ОбластьЗаголовокПродолжение     = Макет.ПолучитьОбласть("ЗаголовокПродолжение");
		ОбластьТаблицаРеквизитов        = Макет.ПолучитьОбласть("ТаблицаРеквизитов");
		ОбластьТекстДоговора            = Макет.ПолучитьОбласть("ТекстДоговора");
		ОбластьТекстДоговораПродолжение = Макет.ПолучитьОбласть("ТекстДоговораПродолжение");
		ОбластьАдресПродавца            = Макет.ПолучитьОбласть("АдресПродавца");
		ОбластьПодпись                  = Макет.ПолучитьОбласть("Подпись");
		Если ПокупательФизЛицо Тогда
			ОбластьЛицо      = Макет.ПолучитьОбласть("ФизЛицо");
			ОбластьЛицоП42   = Макет.ПолучитьОбласть("ФизЛицоП42");
			ОбластьЛицоАдрес = Макет.ПолучитьОбласть("ФизЛицоАдрес");
		Иначе
			ОбластьЛицо      = Макет.ПолучитьОбласть("ЮрЛицо");
			ОбластьЛицоП42   = Макет.ПолучитьОбласть("ЮрЛицоП42");
			ОбластьЛицоАдрес = Макет.ПолучитьОбласть("ЮрЛицоАдрес");
		КонецЕсли;
		
		// заполним область заголовка
		КонтактнаяИнформация = Документ.Организация.КонтактнаяИнформация.Выгрузить();
		Если КонтактнаяИнформация <> Неопределено И КонтактнаяИнформация.Количество() > 0 Тогда
			Инд = 0;
			Пока Инд < КонтактнаяИнформация.Количество() Цикл
				Если КонтактнаяИнформация[Инд].Вид.ИмяПредопределенныхДанных = "ЮрАдресОрганизации" Тогда
					Если ЗначениеЗаполнено(КонтактнаяИнформация[Инд].Город) Тогда
						Город = КонтактнаяИнформация[Инд].Город;
						Город = ?(Лев(Город, 1) = "г", Город, "г. " + Город);
					Иначе
						Город = "";
					КонецЕсли;
					ОбластьЗаголовок.Параметры.МестоКуплиПродажи = Город;
				КонецЕсли;
				Инд = Инд+1;
			КонецЦикла;
		КонецЕсли;
		ОбластьЗаголовок.Параметры.НомДоговора        = Документ.Номер;
		ОбластьЗаголовок.Параметры.Приложение         = ?(ПокупательФизЛицо, "Приложение №2", "Приложение");
		ОбластьЗаголовок.Параметры.ФормаСобственности = ?(ПокупательФизЛицо, "Физическое лицо", "Юридическое лицо");
		ОбластьЗаголовок.Параметры.ЧислоДата          = Формат(Документ.Дата, "ДФ=дд");
		ОбластьЗаголовок.Параметры.ЧислоДатаДог       = Формат(Документ.ДоговорВзаиморасчетов.ДатаНачала, "ДФ=дд");
		ОбластьЗаголовок.Параметры.МесяцГод           = Сред(Формат(Документ.Дата, "ДЛФ=DD"),СтрДлина(ОбластьЗаголовок.Параметры.ЧислоДата) + 1);
		ОбластьЗаголовок.Параметры.МесяцГодДог        =
			Сред(Формат(Документ.ДоговорВзаиморасчетов.ДатаНачала, "ДЛФ=DD"), СтрДлина(ОбластьЗаголовок.Параметры.ЧислоДатаДог) + 1);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		ОбластьЛицо.Параметры.Организация = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация, Документ.Дата);
		Руководитель = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Руководитель");
		Если ЗначениеЗаполнено(Руководитель) И ТипЗнч(Руководитель) = Тип("Структура") Тогда
			Если ЗначениеЗаполнено(Руководитель.РуководительДолжность) Тогда
				ОрганизацияДолжность = ФизическиеЛицаАльфаАвто.Просклонять(СокрЛП(НРег(Руководитель.РуководительДолжность)), 2,
					ОбластьЛицо.Параметры.ОрганизацияДолжность);
				ОбластьЛицо.Параметры.ОрганизацияДолжность = ", в лице " + ОбластьЛицо.Параметры.ОрганизацияДолжность;
			ИначеЕсли ЗначениеЗаполнено(Руководитель.Руководитель) И ЗначениеЗаполнено(Руководитель.Руководитель.Должность) Тогда
				ОрганизацияДолжность = ФизическиеЛицаАльфаАвто.Просклонять(СокрЛП(НРег(Руководитель.Руководитель.Должность)), 2,
					ОбластьЛицо.Параметры.ОрганизацияДолжность);
				ОбластьЛицо.Параметры.ОрганизацияДолжность = ", в лице " + ОбластьЛицо.Параметры.ОрганизацияДолжность;
			КонецЕсли;
		КонецЕсли;
		
		ОрганизацияЛицо = ФизическиеЛицаАльфаАвто.Просклонять(СокрЛП(Руководитель.Руководитель), 2,
			ОбластьЛицо.Параметры.ОрганизацияЛицо);
		ОбластьЛицо.Параметры.ОрганизацияЛицо = " " + ОбластьЛицо.Параметры.ОрганизацияЛицо;
		
		ДоверенностьРуководителя = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
			Руководитель.Руководитель, Перечисления.ВидыДокументов.Доверенность);
		Если ЗначениеЗаполнено(ДоверенностьРуководителя) Тогда
			ОрганизацияДокумент = "Доверенности № " + ДоверенностьРуководителя.Номер 
				+ " от " + Формат(ДоверенностьРуководителя.ДатаВыдачи, "ДЛФ=D");
		Иначе
			ОрганизацияДокумент = "Устава";
		КонецЕсли;
		
		ОбластьЛицо.Параметры.ОрганизацияДокумент = ", действующего  на основании " + ОрганизацияДокумент;
		
		Если ПокупательФизЛицо Тогда
			ОбластьЛицо.Параметры.Покупатель = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент, Документ.Дата);
			Паспорт = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
				Документ.Контрагент, Перечисления.ВидыДокументов.Паспорт);
			
			Если ЗначениеЗаполнено(Паспорт) Тогда
				ОбластьЛицо.Параметры.ПаспортныеДанные = СтрШаблон(НСтр("ru = ', паспорт серии %1 № %2 выдан %3 %4'"),
					Паспорт.Серия, Паспорт.Номер, Паспорт.КемВыдан, Формат(Паспорт.ДатаВыдачи, "ДЛФ=DD"));
			КонецЕсли;
		Иначе
			// В КОНТРАГЕНТЕ ЕСТЬ ДОВЕРЕННОСТЬ, НО НЕТ ДОЛЖНОСТИ И РУКОВОДИТЕЛЯ
			
			ОбластьЛицо.Параметры.ОрганизацияПокупатель = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент, Документ.Дата);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьЛицо);
		ТабличныйДокумент.Вывести(ОбластьЗаголовокПродолжение);
		
		ЗаполнитьЗначенияСвойств(ОбластьТаблицаРеквизитов.Параметры, Автомобиль,
			"НомерКузова,ГТД,VIN,Цвет,НомерДвигателя,НомерШасси");
		ОбластьТаблицаРеквизитов.Параметры.ГодВыпуска = Формат(Автомобиль.ГодВыпуска, "ДФ=yyyy");
		ОбластьТаблицаРеквизитов.Параметры.МаркаМодель = "" + Автомобиль.Марка + ", " + Автомобиль.Модель;
		ОбластьТаблицаРеквизитов.Параметры.ПТС = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль.Ссылка,
			Перечисления.ДополнительнаяИнформацияАвтомобилей.ТехПаспорт);
		
		ИскомыеСвойства = Новый Массив();
		ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ТипТранспортногоСредства);
		ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Автомобиль, Истина, Ложь, ИскомыеСвойства);
		ОбластьТаблицаРеквизитов.Параметры.ТипТС = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства(
			"ТипТранспортногоСредства", ЗначенияСвойствОбъекта);
		
		// Если тип ТС не указан в самом авто, поищем его в модели авто
		Если НЕ ЗначениеЗаполнено(ОбластьТаблицаРеквизитов.Параметры.ТипТС) Тогда
			ЗначенияСвойствОбъекта =
				УправлениеСвойствами.ПолучитьЗначенияСвойств(Автомобиль.Модель, Истина, Ложь, ИскомыеСвойства);
			ОбластьТаблицаРеквизитов.Параметры.ТипТС =
				УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ТипТранспортногоСредства", ЗначенияСвойствОбъекта);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьТаблицаРеквизитов);
		
		СуммаАвтомобиля = Документ.Автомобили.НайтиСтроки(Новый Структура("Автомобиль", Автомобиль))[0].СуммаВсего;
		ОбластьТекстДоговора.Параметры.СуммаВсего = СуммаАвтомобиля;
		ОбластьТекстДоговора.Параметры.СуммаВсегоПрописью =
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаАвтомобиля, Документ.ВалютаДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьТекстДоговора);
		
		ИскомыеСвойства = Новый Массив();
		ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СудДляПечатиВДоговорах);
		ЗначенияСвойствОбъекта =
			УправлениеСвойствами.ПолучитьЗначенияСвойств(Документ.Организация, Истина, Ложь, ИскомыеСвойства);
		ОбластьЛицоП42.Параметры.АдресСуда = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства(
			"СудДляПечатиВДоговорах", ЗначенияСвойствОбъекта);
		
		ТабличныйДокумент.Вывести(ОбластьЛицоП42);
		
		ОбластьТекстДоговораПродолжение.Параметры.МесяцГод    = Сред(Формат(Документ.Дата, "ДФ='дд ММММ гггг'"), 4) + " г.";
		ОбластьТекстДоговораПродолжение.Параметры.НомДоговора = Документ.Номер;
		ОбластьТекстДоговораПродолжение.Параметры.ЧислоДата   = Формат(Документ.Дата, "ДФ=дд");
		
		ТабличныйДокумент.Вывести(ОбластьТекстДоговораПродолжение);
		
		ТелефонОрганизации = ""; ФаксОрганизации = "";
		Если КонтактнаяИнформация <> Неопределено И КонтактнаяИнформация.Количество() > 0 Тогда
			Инд = 0;
			Пока Инд < КонтактнаяИнформация.Количество() Цикл
				Если КонтактнаяИнформация[Инд].Вид.ИмяПредопределенныхДанных = "ЮрАдресОрганизации" Тогда
					ОбластьАдресПродавца.Параметры.ЮрАдресОрганизации = "Юр. адрес: " + КонтактнаяИнформация[Инд].Представление;
				ИначеЕсли КонтактнаяИнформация[Инд].Вид.ИмяПредопределенныхДанных = "ФактАдресОрганизации" Тогда
					ОбластьАдресПродавца.Параметры.ФизАдресОрганизации = "Физ. адрес: " + КонтактнаяИнформация[Инд].Представление;
				ИначеЕсли КонтактнаяИнформация[Инд].Вид.ИмяПредопределенныхДанных = "ТелефонОрганизации" Тогда
					ТелефонОрганизации = КонтактнаяИнформация[Инд].Представление;
				ИначеЕсли КонтактнаяИнформация[Инд].Вид.ИмяПредопределенныхДанных = "ФаксОрганизации" Тогда
					ФаксОрганизации = КонтактнаяИнформация[Инд].Представление;
				КонецЕсли;
				Инд = Инд + 1;
			КонецЦикла;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ИНН", "ИНН ");
		СтруктураПараметров.Вставить("КПП", "КПП ");
		СтруктураПараметров.Вставить("Наименование", "");
		СтруктураПараметров.Вставить("ОКПО", "Код ОКПО ");
		
		ОбластьАдресПродавца.Параметры.Организация = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация, Документ.Дата);
		ОбластьАдресПродавца.Параметры.Телефон = ?(ЗначениеЗаполнено(ТелефонОрганизации), "Тел.: " + ТелефонОрганизации, "") 
			+ ?(ЗначениеЗаполнено(ФаксОрганизации), " Факс.: " + ФаксОрганизации, "");
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьАдресПродавца.Параметры.РеквизитыОрганизации = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, СтруктураПараметров, ДополнительныеПараметры);
		ОбластьАдресПродавца.Параметры.БанкПолучателя = Документ.Организация.ОсновнойБанковскийСчет.Банк;
		ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Документ.Организация);
		ОбластьАдресПродавца.Параметры.РеквизитыБанка       = "р/сч " + ОсновнойБанковскийСчет.НомерСчета
			+ ", к/с " + ОсновнойБанковскийСчет.Банк.КоррСчет 
			+ "; БИК " + ОсновнойБанковскийСчет.Банк.Код + ".";
		
		ТабличныйДокумент.Вывести(ОбластьАдресПродавца);
		
		КонтактнаяИнформация = Документ.Контрагент.КонтактнаяИнформация.Выгрузить();
		Если КонтактнаяИнформация <> Неопределено И КонтактнаяИнформация.Количество() > 0 Тогда
			Инд = 0;
			Пока Инд < КонтактнаяИнформация.Количество() Цикл
				Если КонтактнаяИнформация[Инд].Вид.ИмяПредопределенныхДанных = "ЮрАдресКонтрагента" Тогда
					ОбластьЛицоАдрес.Параметры.АдресПокупателя = КонтактнаяИнформация[Инд].Представление;
				КонецЕсли;
				Инд = Инд+1;
			КонецЦикла;
		КонецЕсли;
		Если ПокупательФизЛицо Тогда
			ОбластьЛицоАдрес.Параметры.ФИОПокупателя          = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент, Документ.Дата);
			ОбластьЛицоАдрес.Параметры.ПаспортПокупателя      = Паспорт.Серия + " № "+ Паспорт.Номер + " выдан "
				+ Паспорт.КемВыдан + " " + Формат(Паспорт.ДатаВыдачи, "ДЛФ=DD");
			ОбластьЛицоАдрес.Параметры.ДатаРожденияПокупателя = Формат(Документ.Контрагент.ДатаРождения, "ДЛФ=DD");
		Иначе
			ОбластьЛицоАдрес.Параметры.ОрганизацияПокупатель = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент, Документ.Дата);
			ОбластьЛицоАдрес.Параметры.РеквизитыОрганизацииПокупатель = Документ.Контрагент.ИНН + " / "
				+ Документ.Контрагент.КПП;
			ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Документ.Контрагент);
			ОбластьЛицоАдрес.Параметры.БанкПокупатель= "" + ОсновнойБанковскийСчет.Банк
				+ ", р/сч " + ОсновнойБанковскийСчет.НомерСчета
				+ ", к/с " + ОсновнойБанковскийСчет.Банк.КоррСчет
				+ "; БИК " + ОсновнойБанковскийСчет.Банк.Код + ".";
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьЛицоАдрес);
		
		Если ЗначениеЗаполнено(Руководитель.Руководитель) Тогда
			ОбластьПодпись.Параметры.ФИОПродавца =
			ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Руководитель.Руководитель.Наименование);
		КонецЕсли;
		ОбластьПодпись.Параметры.ФИОПокупателя = 
			?(ПокупательФизЛицо, ФизическиеЛицаКлиентСервер.ФамилияИнициалы(УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент, Документ.Дата)), "");
		
		ТабличныйДокумент.Вывести(ОбластьПодпись);
		
		// В "массив объектов" приходит связка Автомобиль-ДокументПродажи, поэтому "перескочим" документ и перейдем на следующий автомобиль.
		Сч = Сч + 1;
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияАвтомобилей_ДоговорКуплиПродажиАвтомобиля";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
 КонецФункции

// функция получения данных для УПД
Функция ПолучитьДанныеДляПечатиУПД(Объект) Экспорт
	
	ДокументФактура = ЗащищенныеФункцииСервер.ПодчиненныйСчетФактураВыданный(Объект.Ссылка).СчетФактура;
	ДанныеОбъекта = Новый Структура();
	
	// Сформируем статус документа
	Если ЗначениеЗаполнено(ДокументФактура) Тогда
		
		Статус = 1;
		ДокументОбъект = ДокументФактура;
		
		// Получаем себестоимость автомобилей для печати межценовой разницы.
		ТаблицаТоваров = Документы.СчетФактураВыданный.ПолучитьТоварыССебестоимостью(ДокументОбъект);
		
	Иначе
		Статус = 2;
		ДокументОбъект = Объект;
		
		// формируем таблицу для вывода на печать
		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТаблицаТоваров.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура, СправочникСсылка.Автомобили"));
		// ТаблицаТоваров.Колонки.Добавить("ТоварКод", Новый ОписаниеТипов("Строка"));
		ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
		ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
		ТаблицаТоваров.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
		ТаблицаТоваров.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
		ТаблицаТоваров.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число"));
		ТаблицаТоваров.Колонки.Добавить("СуммаВсего", Новый ОписаниеТипов("Число"));
		ТаблицаТоваров.Колонки.Добавить("Себестоимость", Новый ОписаниеТипов("Число"));
		ТаблицаТоваров.Колонки.Добавить("СебестоимостьРегл", Новый ОписаниеТипов("Число"));
		ТаблицаТоваров.Колонки.Добавить("СебестоимостьУпр", Новый ОписаниеТипов("Число"));
		ТаблицаТоваров.Колонки.Добавить("ГТД", Новый ОписаниеТипов("СправочникСсылка.ГТД"));
		
		БезОборудования = НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект, "НеВключатьВСтоимостьАвтомобиляСтоимостьОборудования");

		Если БезОборудования Тогда
			
			ВыборкаТабличнойЧасти = ПолучитьТабличныеЧастиДляПечатиБезОборудования(ДокументОбъект);
			
		Иначе
			
			ВыборкаТабличнойЧасти = ПолучитьТабличныеЧастиДляПечатиСОборудованием(ДокументОбъект);
			
		КонецЕсли;
		
		Для Каждого ТекСтрока Из ВыборкаТабличнойЧасти Цикл
			НоваяСтрока = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;	
					
	КонецЕсли;
	
	// данные документа
	ДанныеОбъекта.Вставить("Дата"                   	, ДокументОбъект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  	, УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ДокументОбъект));
	ДанныеОбъекта.Вставить("ХозОперация"            	, ДокументОбъект.ХозОперация);
	ДанныеОбъекта.Вставить("ДокументОснование"      	, ДокументОбъект.ДокументОснование);
	ДанныеОбъекта.Вставить("ВалютаДокумента"      		, ДокументОбъект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"      		, ДокументОбъект.КурсДокумента);
	ДанныеОбъекта.Вставить("ТипЦен"      				, ДокументОбъект.ТипЦен);
	ДанныеОбъекта.Вставить("Поставщик"              	, ДокументОбъект.Организация);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  	, ДокументОбъект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("Покупатель"              	, ДокументОбъект.Контрагент);
	ДанныеОбъекта.Вставить("Организация"              	, Объект.Организация);
	ДанныеОбъекта.Вставить("ДоговорВзаиморасчетов"     	, ?(ЗначениеЗаполнено(ДокументОбъект.ДоговорВзаиморасчетов), Объект.ДоговорВзаиморасчетов, "--"));
	ДанныеОбъекта.Вставить("Товары"              		, ТаблицаТоваров);
	ДанныеОбъекта.Вставить("СуммаДокумента"             , ДокументОбъект.СуммаДокумента);
	ДанныеОбъекта.Вставить("Статус"              		, Статус);
	ДанныеОбъекта.Вставить("ИдентификаторГосударственногоКонтракта", Объект.ИдентификаторГосударственногоКонтракта);
	ДанныеОбъекта.Вставить("ДокументОтгрузки", ?(Статус = 1, ДокументОбъект.ДокументОснование, Объект.Ссылка));
	
	Если Статус = 1 Тогда
		ДанныеОбъекта.Вставить("НомерИсправления"       	, ?(ЗначениеЗаполнено(ДокументОбъект.НомерИсправления), ДокументОбъект.НомерИсправления, "--"));
		ДанныеОбъекта.Вставить("ДатаИсправления"        	, ?(ЗначениеЗаполнено(ДокументОбъект.Дата), ДокументОбъект.Дата, "--"));
		ДанныеОбъекта.Вставить("ПлатежноРасчетныеДокументы" , ДокументОбъект.ПлатежноРасчетныеДокументы);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("ТаблицаРНПТ", УправлениеДиалогомДокументаСервер.РНПТПрослеживаемыхТоваров(Объект.Ссылка));
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства); 
	ДанныеОбъекта.Вставить("ДатаОтгрузки"            , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", ЗначенияСвойствОбъекта)); 
	
	ДанныеОбъекта.Вставить("Грузоотправитель"        , ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, ДокументОбъект.Организация));
	ДанныеОбъекта.Вставить("Грузополучатель"         , ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, ДокументОбъект.Контрагент));
  	
	ДанныеОбъекта.Вставить("Руководитель"     	     , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Руководитель"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Отпустил"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Отпустил"));
	ДанныеОбъекта.Вставить("Получил"          		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Получил"));
	ДанныеОбъекта.Вставить("Менеджер"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Менеджер"));
	
	Возврат ДанныеОбъекта;
	
КонецФункции

// Получает данные для печатных форм
// Возвращает таблицу автомобилей и товаров свернутых по автомобилям
Функция ПолучитьТабличныеЧастиДляПечатиБезОборудования(Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияАвтомобилейТовары.ИдентификаторАвтомобиля КАК ИдентификаторАвтомобиля,
	|	СУММА(РеализацияАвтомобилейТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(РеализацияАвтомобилейТовары.СуммаВсего) КАК СуммаВсего
	|ПОМЕСТИТЬ ОборудованиеАвтомобиля
	|ИЗ
	|	Документ.РеализацияАвтомобилей.Товары КАК РеализацияАвтомобилейТовары
	|ГДЕ
	|	РеализацияАвтомобилейТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияАвтомобилейТовары.ИдентификаторАвтомобиля
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияАвтомобилейАвтомобили.НомерСтроки КАК НомерСтроки,
	|	РеализацияАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
	|	"""" КАК ХарактеристикаНоменклатуры,
	|	РеализацияАвтомобилейАвтомобили.Автомобиль.Наименование КАК ТоварНаименование,
	|	РеализацияАвтомобилейАвтомобили.Автомобиль.VIN КАК Код,
	|	МИНИМУМ(ЕдиницыИзмерения.Ссылка) КАК ЕдиницаИзмерения,
	|	""796"" КАК КодЕдиницаИзмерения,
	|	1 КАК Количество,
	|	1 КАК Коэффициент,
	|	1 КАК КоличествоБазовое,
	|	РеализацияАвтомобилейАвтомобили.СуммаВсего + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаВсего, 0) КАК СуммаВсего,
	|	РеализацияАвтомобилейАвтомобили.СуммаВсего + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаВсего, 0) - (РеализацияАвтомобилейАвтомобили.СуммаНДС + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаНДС, 0)) КАК СуммаБезНДС,
	|	РеализацияАвтомобилейАвтомобили.СуммаВсего + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаВсего, 0) - (РеализацияАвтомобилейАвтомобили.СуммаНДС + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаНДС, 0)) КАК ЦенаБезНДС,
	|	РеализацияАвтомобилейАвтомобили.СуммаНДС + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаНДС, 0) КАК СуммаНДС,
	|	РеализацияАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС,
	|	СРЕДНЕЕ(РеализацияАвтомобилейАвтомобили.Цена) КАК Цена,
	|	СУММА(РеализацияАвтомобилейАвтомобили.СуммаСкидки) КАК СуммаСкидки,
	|	СРЕДНЕЕ(РеализацияАвтомобилейАвтомобили.СуммаСкидки) КАК СуммаСкидкиСтроки,
	|	РеализацияАвтомобилейАвтомобили.СебестоимостьАвтомобиля КАК Себестоимость,
	|	РеализацияАвтомобилейАвтомобили.Автомобиль.ГТД КАК ГТД
	|ИЗ
	|	Документ.РеализацияАвтомобилей.Автомобили КАК РеализацияАвтомобилейАвтомобили
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборудованиеАвтомобиля КАК ОборудованиеАвтомобиля
	|		ПО РеализацияАвтомобилейАвтомобили.ИдентификаторАвтомобиля = ОборудованиеАвтомобиля.ИдентификаторАвтомобиля,
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	РеализацияАвтомобилейАвтомобили.Ссылка = &Ссылка
	|	И ЕдиницыИзмерения.Наименование = ""шт""
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияАвтомобилейАвтомобили.НомерСтроки,
	|	РеализацияАвтомобилейАвтомобили.Автомобиль,
	|	РеализацияАвтомобилейАвтомобили.Автомобиль.VIN,
	|	РеализацияАвтомобилейАвтомобили.СтавкаНДС,
	|	РеализацияАвтомобилейАвтомобили.Автомобиль.Наименование,
	|	РеализацияАвтомобилейАвтомобили.СуммаВсего + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаВсего, 0),
	|	РеализацияАвтомобилейАвтомобили.СуммаВсего + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаВсего, 0) - (РеализацияАвтомобилейАвтомобили.СуммаНДС + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаНДС, 0)),
	|	РеализацияАвтомобилейАвтомобили.СуммаНДС + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаНДС, 0),
	|	РеализацияАвтомобилейАвтомобили.СебестоимостьАвтомобиля,
	|	РеализацияАвтомобилейАвтомобили.Автомобиль.ГТД,
	|	РеализацияАвтомобилейАвтомобили.СуммаВсего + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаВсего, 0) - (РеализацияАвтомобилейАвтомобили.СуммаНДС + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаНДС, 0))";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Товары = Запрос.Выполнить().Выгрузить();
	
	АвтомобилиСервер.ДополнитьСебестоимостьюАвтомобилей(Товары, Объект.Дата);
	
	Возврат Товары;
	
КонецФункции

// Получает данные для печатных форм
// Возвращает таблицу автомобилей и товаров развернутых по оборудованию
Функция ПолучитьТабличныеЧастиДляПечатиСОборудованием(Объект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияАвтомобилейАвтомобили.НомерСтроки КАК НомерСтроки,
	|	РеализацияАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
	|	"""" КАК ХарактеристикаНоменклатуры,
	|	РеализацияАвтомобилейАвтомобили.Автомобиль.Наименование КАК ТоварНаименование,
	|	РеализацияАвтомобилейАвтомобили.Автомобиль.VIN КАК Код,
	|	&ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияАвтомобилейАвтомобили.Количество КАК Количество,
	|	1 КАК Коэффициент,
	|	1 КАК КоличестовБазовое,
	|	РеализацияАвтомобилейАвтомобили.СуммаВсего КАК СуммаВсего,
	|	РеализацияАвтомобилейАвтомобили.СуммаВсего - РеализацияАвтомобилейАвтомобили.СуммаНДС КАК СуммаБезНДС,
	|	РеализацияАвтомобилейАвтомобили.СуммаНДС КАК СуммаНДС,
	|	РеализацияАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС,
	|	РеализацияАвтомобилейАвтомобили.Цена КАК Цена,
	|	РеализацияАвтомобилейАвтомобили.СуммаСкидки КАК СуммаСкидки,
	|	NULL КАК СуммаСкидкиСтроки
	|ИЗ
	|	Документ.РеализацияАвтомобилей.Автомобили КАК РеализацияАвтомобилейАвтомобили
	|ГДЕ
	|	РеализацияАвтомобилейАвтомобили.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияАвтомобилейТовары.НомерСтроки,
	|	РеализацияАвтомобилейТовары.Номенклатура,
	|	РеализацияАвтомобилейТовары.ХарактеристикаНоменклатуры,
	|	РеализацияАвтомобилейТовары.Номенклатура.Наименование,
	|	"""",
	|	РеализацияАвтомобилейТовары.ЕдиницаИзмерения,
	|	РеализацияАвтомобилейТовары.Количество,
	|	РеализацияАвтомобилейТовары.Коэффициент,
	|	1,
	|	РеализацияАвтомобилейТовары.СуммаВсего,
	|	РеализацияАвтомобилейТовары.СуммаВсего - РеализацияАвтомобилейТовары.СуммаНДС,
	|	РеализацияАвтомобилейТовары.СуммаНДС,
	|	РеализацияАвтомобилейТовары.СтавкаНДС,
	|	РеализацияАвтомобилейТовары.Цена,
	|	РеализацияАвтомобилейТовары.СуммаСкидки,
	|	РеализацияАвтомобилейТовары.СуммаСкидкиСтроки
	|ИЗ
	|	Документ.РеализацияАвтомобилей.Товары КАК РеализацияАвтомобилейТовары
	|ГДЕ
	|	РеализацияАвтомобилейТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.НайтиПоНаименованию("шт",Истина));

	Товары = Запрос.Выполнить().Выгрузить();
	
	АвтомобилиСервер.ДополнитьСебестоимостьюАвтомобилей(Товары, Объект.Дата);
	
	Возврат Товары;
	
КонецФункции

#Область ЭДО

// Формирует коллекцию с описанием кодов маркировок проданых товаров
//
// Параметры:
//  Сам - ДокументСсылка.РеализацияТоваров - Документ, для которого выполняется операция.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками:
//    * ИдентификаторТовара - Строка - идентификатор строки товаров к которой относятся коды;
//    * КодМаркировки - Строка - код маркировки товара
//
Функция ПолучитьКодыУпаковокМаркируемойПродукции(Сам) Экспорт
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("ИдентификаторТовара");
	Таблица.Колонки.Добавить("КодМаркировки");
	
	Возврат Таблица;
	
КонецФункции

// Формирует коллекцию с описанием кодов маркировок проданых товаров в разрезе номенклатуры и характеристики
//
// Параметры:
//  Сам - ДокументСсылка.РеализацияТоваров - Документ, для которого выполняется операция.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками:
//    * Номенклатура - СправочникСсылка.Номенклатура - номенклатура, по которой ведется учет по кодам маркировки;
//    * ХарактеристикаНоменклатуры - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика номенклатуры с кодом;
//    * КодМаркировки - Строка - код маркировки товара
//
Функция ПолучитьКодыУпаковокМаркируемойПродукцииСНоменклатурой(Сам) Экспорт
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Номенклатура");
	Таблица.Колонки.Добавить("ХарактеристикаНоменклатуры");
	Таблица.Колонки.Добавить("КодМаркировки");
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаРеализацииАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВозвратОтПокупателяАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЖалобаКлиента);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаРасходДС);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ОтчетКомиссионераЗаАвтомобили);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ОтчетКомитентуЗаАвтомобили);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйСкладскойОрдерНаАвтомобили);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетНаОплатуЗаАвтомобили);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетФактураВыданный);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЧекНаОплату); 
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаРемонт);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.РеализацияАвтомобилей);

КонецФункции

#КонецОбласти

// Проверяет возможность ввода счет-фактуры выданной на основании документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.РеализацияАвтомобилей - документ, для которого выполняется действие.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина, если ввод возможен, Ложь - в противном случае.
//
Функция ВозможенВводСчетФактурыВыданной(ДокументОбъект, ДополнительныеПарметры = Неопределено) Экспорт
	
	СистемаНО = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.СистемаНалогообложения,
		ДокументОбъект.Организация,
	);
	
	НалогообложениеУСН = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.НалогообложениеНДСПриУСН,
		ДокументОбъект.Организация,
	);
	
	Если СистемаНО = Перечисления.СистемыНалогообложения.Упрощенная И НЕ РаботаСоСтавкамиНДССервер.УСНПлательщикНДС(НалогообложениеУСН) Тогда
        Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбработкаСобытийДокументаСервер.ДокументСодержитСтрокиСНДС(ДокументОбъект, "Автомобили, Товары");

КонецФункции

#КонецОбласти

#КонецЕсли