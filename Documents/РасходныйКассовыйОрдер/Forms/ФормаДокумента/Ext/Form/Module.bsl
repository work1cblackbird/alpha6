///////////////////////////////////////////////////////////////////////////////
// Модуль основной формы документа "Расходный кассовый ордер"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НалоговыйДокумент = ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиНалоговыйДокумент(ЭтотОбъект, Объект);
	
	// ПодключаемоеОборудование
	ТипыОборудования = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
	ТипыОборудования.СканерШтрихкода = Истина;
	ТипыОборудования.СчитывательМагнитныхКарт = Истина;
	МенеджерОборудования.ПриСозданииНаСервере(ЭтаФорма, ТипыОборудования);
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// УтверждениеДокументов
	УтверждениеДокументовСервер.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	// Конец УтверждениеДокументов
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	ЗапретРедактированияРеквизитовОбъектовАльфаАвто.ЗаблокироватьФискальныеРеквизиты(ЭтотОбъект);
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ОграничитьВыборКонтактныхЛиц(Элементы.Контрагент);
	РаботаСФормой.НастроитьОтображениеСИспользованиемБазовогоКоличества(Элементы.ТоварыКоличество);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	
	РазрешитьРедактированиеЦенИСумм = ПраваИНастройкиПользователя.Значение("РедактированиеЦенИСуммВНоменклатурныхТаблицах", Объект);
	РаботаСФормой.РазрешитьРедактированиеЦенИСумм(
		РаботаСФормой.ТиповыеПоляСуммовыхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм
	); 
	РаботаСФормой.УстановитьСвойствоЭлементовФормы(
		ЭтаФорма,
		"КассаКомпанииРасширеннаяПодсказка",
		"Гиперссылка",
		"Просмотр",
		Метаданные.Отчеты.ОстаткиИОборотыДенежныхСредствКомпании);
		
	РаботаСФормой.УстановитьСвойствоЭлементовФормы(
		ЭтаФорма,
		"ДоговорВзаиморасчетовРасширеннаяПодсказка",
		"Гиперссылка",
		"Просмотр",
		Метаданные.Отчеты.ВзаиморасчетыСКонтрагентом);
	
	СпособВыбораСкидки = ПраваИНастройкиПользователя.Значение("СпособВыбораСкидки", Объект);
	РаботаСФормой.РазрешитьРедактированиеСкидок(
		РаботаСФормой.ТиповыеПоляСкидочныхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм,
		СпособВыбораСкидки
	);
	
	ОписаниеНовойКолонкиПроизводитель = РаботаСФормой.ОписаниеНовойКолонкиПроизводитель();
	ОписаниеНовойКолонкиПроизводитель.ТабличнаяЧасть = Элементы.Товары;
	ОписаниеНовойКолонкиПроизводитель.ПоставитьПеред = Элементы.ТоварыНоменклатураАртикул;
	НоваяКолонкаПроизводитель = РаботаСФормой.НоваяКолонкаПроизводитель(ЭтотОбъект, ОписаниеНовойКолонкиПроизводитель);
	
	КолонкиКодАртикулИПроизводитель = Новый Структура();
	КолонкиКодАртикулИПроизводитель.Вставить("Код", Элементы.ТоварыНоменклатураКод);
	КолонкиКодАртикулИПроизводитель.Вставить("Артикул", Элементы.ТоварыНоменклатураАртикул);
	КолонкиКодАртикулИПроизводитель.Вставить("Производитель", НоваяКолонкаПроизводитель);
	РаботаСФормой.НастроитьВидимостьКолонокКодАртикулИПроизводитель(КолонкиКодАртикулИПроизводитель);
	РаботаСФормой.ОткрытьФормуТолькоДляПросмотра(ЭтотОбъект, Объект);
	
	ФормаСобственности = Объект.Контрагент.ФормаСобственности;
	РедактироватьТовары = Объект.Товары.Количество() > 0;
	
	ОбновитьКонтактнуюИнформацию(НЕ ЗначениеЗаполнено(Объект.Ссылка));
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		РазбитьПлатеж = Объект.Состав.Количество() > 1;
		ЗаполнитьПлатеж(Истина);
		РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
		НастроитьПараметрыВыбораЭлементовФормы();
		УправлениеДиалогомНаСервере();
	КонецЕсли;
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// УтверждениеДокументов
	УтверждениеДокументовКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец УтверждениеДокументов
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// Штрихкодирование
	ШтрихкодированиеКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец Штрихкодирование
	
	// УтверждениеДокументов
	УтверждениеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец УтверждениеДокументов
	
	РаботаСФормойКлиент.ТребуетсяОбновитьЗаголовокНадписиНалоговыйДокумент(ЭтотОбъект, ИмяСобытия);	
	
КонецПроцедуры 

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	
	РазбитьПлатеж = Объект.Состав.Количество() > 1;
	ЗаполнитьПлатеж(Истина);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	НалоговыйДокумент = ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиНалоговыйДокумент(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("РасходныйКассовыйОрдер", ПараметрыЗаписи.РежимЗаписи,
		Объект.Товары.Количество() > 50);
		
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);
	
	ПроверитьОбновитьСоставПлатежа(Отказ);
	
КонецПроцедуры 

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры 

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	ЗапретРедактированияРеквизитовОбъектовАльфаАвто.ЗаблокироватьФискальныеРеквизиты(ЭтотОбъект);
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);
	РаботаСФормойКлиент.ОбновитьПодчиненныеСчета(Объект.Ссылка, Неопределено);
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры 

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РасходныйКассовыйОрдер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РасходныйКассовыйОрдер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	
	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ВалютаДокументаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РасходныйКассовыйОрдер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);

	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ВалютаДокументаПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РасходныйКассовыйОрдер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	ФормаСобственности = Объект.Контрагент.ФормаСобственности;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	КонтрагентПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
	ОбновитьКонтактнуюИнформацию();
	
КонецПроцедуры 

&НаСервере
Процедура ДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ПараметрыДействия = Новый Структура();
	Документы.РасходныйКассовыйОрдер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);

	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДоговорВзаиморасчетовПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура СтатьяДДСПриИзмененииНаСервере(Элемент, ПараметрыДействия = Неопределено)
	Документы.РасходныйКассовыйОрдер.СтатьяДДСПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДДСПриИзменении(Элемент)  
	ПараметрыДействия = Новый Структура;
	СтатьяДДСПриИзмененииНаСервере(ПараметрыДействия);
КонецПроцедуры

&НаСервере
Процедура КассаКомпанииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РасходныйКассовыйОрдер.КассаКомпанииПриИзменении(Объект, ПараметрыДействия);

	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура КассаКомпанииПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	КассаКомпанииПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура СделкаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РасходныйКассовыйОрдер.СделкаПриИзменении(Объект, ПараметрыДействия);

	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура СделкаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	СделкаПриИзмененииНаСервере(ПараметрыДействия);
	ПараметрыДействия.Вставить("ЗаполнитьПоСделке");
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Получим тип документа
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработатьВыборТипаСделки", ЭтотОбъект, Элемент);
	ТипыСделки = СписокТиповСделок(Объект.ДоговорВзаиморасчетов, Объект.ВерсияОбъекта);
	ТипыСделки.ПоказатьВыборЭлемента(
		ОбработчикОповещения,
		НСтр("ru = 'Выберите тип сделки'"));
	
КонецПроцедуры

&НаСервере
Процедура КассаККМПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	Документы.РасходныйКассовыйОрдер.КассаККМПриИзменении(Объект, ПараметрыДействия);

	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	КассаККМПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПризнакСпособаРасчетаПриИзменении(Элемент)
	УправлениеДиалогомНаСервере();
КонецПроцедуры

&НаСервере
Процедура ФРПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ФРПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ФРПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ТелефонEmailПокупателяПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонEmailПокупателяПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ТелефонEmailПокупателяПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ДляПробитияНаФРПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
		
	Если НЕ Объект.ДляПробитияНаФР Тогда
		ПерезаполнитьТоварыНаСервере();
	Иначе
		Если НЕ ЗначениеЗаполнено(Объект.ТипРасчета) Тогда
			Объект.ТипРасчета = Документы.РасходныйКассовыйОрдер.ТипРасчетаПоДокументу(Объект);
		КонецЕсли;
	КонецЕсли;

	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДляПробитияНаФРПриИзменении(Элемент)
		
	ПараметрыДействия = Новый Структура;
	ДляПробитияНаФРПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура СтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РасходныйКассовыйОрдер.СтавкаНДСПриИзменении(Объект, ПараметрыДействия);

	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	СтавкаНДСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СуммаДокументаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РасходныйКассовыйОрдер.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);

	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	СуммаДокументаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РедактироватьТоварыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ЗаполнитьПлатежомСостав();
	ПерезаполнитьТоварыНаСервере(ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура РедактироватьТоварыПриИзменении(Элемент)
	
	Если РедактироватьТовары
		И ЗначениеЗаполнено(Объект.ДокументОснование)
		И ЗначениеЗаполнено(Объект.Сделка)
		И Объект.ДокументОснование <> Объект.Сделка Тогда
		
		ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_РедактироватьТоварыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(
			ОбработчикОповещения,
			НСтр("ru = 'Заполнить товарами по сделке?'"),
			РежимДиалогаВопрос.ДаНет);
			
		Возврат;
	ИначеЕсли НЕ РедактироватьТовары И Объект.Товары.Количество() <> 0 Тогда
		ДополнительныеПараметры = Новый Структура("ОчиститьТЧ", Истина);
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"Подключаемый_РедактироватьТоварыЗавершение",
			ЭтотОбъект,
			ДополнительныеПараметры
		);
		
		ПоказатьВопрос(
			ОбработчикОповещения,
			НСтр("ru = 'Таблица товаров будет очищена. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет
		);
		
		Возврат;
	КонецЕсли;
	
	РедактироватьТоварыПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ИспользуетсяПСНПриИзменении(Элемент)
	ПараметрыДействия = Новый Структура;
	ИспользуетсяПСНПриИзмененииНаСервере(ПараметрыДействия);    
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
КонецПроцедуры

&НаСервере
Процедура ИспользуетсяПСНПриИзмененииНаСервере(ПараметрыДействия)
	Элементы.Патент.Доступность = ИспользуетсяПСН; 
	Если НЕ ИспользуетсяПСН Тогда
		Объект.Патент = Справочники.Патенты.ПустаяСсылка();
	Иначе
		ОбработкаРеквизитовДокументаСервер.УстановитьПатентПоОрганизации(Объект); 
	КонецЕсли; 
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура РежимВыбораПлатежаПриИзмененииНаСервере()
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимВыбораПлатежаПриИзменении(Элемент)
	
	ЗаполнитьПлатеж();
	РежимВыбораПлатежаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаСпособЗачетаОплатыБезРазбиенияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ЗаполнитьПлатежомСостав();
	Если Элементы.Состав.ТекущаяСтрока = Неопределено Тогда
		ТекущиеДанные = Объект.Состав[0];
	Иначе
		ТекущиеДанные = Объект.Состав.НайтиПоИдентификатору(Элементы.Состав.ТекущаяСтрока);
	КонецЕсли;
	Документы.РасходныйКассовыйОрдер.СоставСпособЗачетаОплатыПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ПерезаполнитьТоварыНаСервере();
	ЗаполнитьПлатеж();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСпособЗачетаОплатыБезРазбиенияПриИзменении(Элемент)
	
	РасшифровкаПлатежаСпособЗачетаОплатыБезРазбиенияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДокументРасчетовБезРазбиенияНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Получим тип документа
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработатьВыборТипаСделки", ЭтотОбъект, Элемент);
	ТипыСделки = СписокТиповСделок(Объект.ДоговорВзаиморасчетов, Объект.ВерсияОбъекта);
	ТипыСделки.ПоказатьВыборЭлемента(
		ОбработчикОповещения,
		НСтр("ru = 'Выберите тип документа расчетов'"));
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаДокументРасчетовБезРазбиенияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ЗаполнитьПлатежомСостав();
	Если Элементы.Состав.ТекущаяСтрока = Неопределено Тогда
		ТекущиеДанные = Объект.Состав[0];
	Иначе
		ТекущиеДанные = Объект.Состав.НайтиПоИдентификатору(Элементы.Состав.ТекущаяСтрока);
	КонецЕсли;
	Документы.РасходныйКассовыйОрдер.СоставДокументРасчетовПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ПерезаполнитьТоварыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДокументРасчетовБезРазбиенияПриИзменении(Элемент)
	
	РасшифровкаПлатежаДокументРасчетовБезРазбиенияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаЗаказБезРазбиенияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ЗаполнитьПлатежомСостав();
	Если Элементы.Состав.ТекущаяСтрока = Неопределено Тогда
		ТекущиеДанные = Объект.Состав[0];
	Иначе
		ТекущиеДанные = Объект.Состав.НайтиПоИдентификатору(Элементы.Состав.ТекущаяСтрока);
	КонецЕсли;
	Документы.РасходныйКассовыйОрдер.СоставЗаказПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ПерезаполнитьТоварыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказБезРазбиенияПриИзменении(Элемент)
	
	РасшифровкаПлатежаЗаказБезРазбиенияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказБезРазбиенияНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Получим тип документа
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработатьВыборТипаСделки", ЭтотОбъект, Элемент);
	ТипыСделки = СписокТиповЗаказов();
	ТипыСделки.ПоказатьВыборЭлемента(
		ОбработчикОповещения,
		НСтр("ru = 'Выберите тип заказа'"));
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовУправленияОбщегоНазначения

&НаКлиенте
Процедура НадписьДенежныеСредстваНажатие(Элемент)
	
	УправлениеДиалогомДокументаКлиент.НадписьДенежныеСредстваНажатие(ЭтотОбъект, "КассаКомпании");
	
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСостав

&НаСервере
Процедура СоставСпособЗачетаОплатыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Состав.НайтиПоИдентификатору(Элементы.Состав.ТекущаяСтрока);
	Документы.РасходныйКассовыйОрдер.СоставСпособЗачетаОплатыПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ЗаполнитьПлатежомСостав();
	ПерезаполнитьТоварыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСпособЗачетаОплатыПриИзменении(Элемент)
	
	СоставСпособЗачетаОплатыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставДокументРасчетовНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Состав.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	// Получим тип документа
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработатьВыборТипаСделки", ЭтотОбъект, Элемент);
	ТипыСделки = СписокТиповСделок(Объект.ДоговорВзаиморасчетов, Объект.ВерсияОбъекта);
	ТипыСделки.ПоказатьВыборЭлемента(
		ОбработчикОповещения,
		НСтр("ru = 'Выберите тип документа расчетов'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СоставДокументРасчетовПриИзменении(Элемент)
	
	СоставДокументРасчетовПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СоставДокументРасчетовПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Состав.НайтиПоИдентификатору(Элементы.Состав.ТекущаяСтрока);
	Документы.РасходныйКассовыйОрдер.СоставДокументРасчетовПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ЗаполнитьПлатежомСостав();
	ПерезаполнитьТоварыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СоставЗаказПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Состав.НайтиПоИдентификатору(Элементы.Состав.ТекущаяСтрока);
	Документы.РасходныйКассовыйОрдер.СоставЗаказПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ЗаполнитьПлатежомСостав();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставЗаказПриИзменении(Элемент)
	
	СоставЗаказПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставЗаказНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Получим тип документа
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработатьВыборТипаСделки", ЭтотОбъект, Элемент);
	ТипыСделки = СписокТиповЗаказов();
	ТипыСделки.ПоказатьВыборЭлемента(
		ОбработчикОповещения,
		НСтр("ru = 'Выберите тип заказа'"));
	
КонецПроцедуры

&НаСервере
Процедура СоставСуммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Состав.НайтиПоИдентификатору(Элементы.Состав.ТекущаяСтрока);
	Документы.РасходныйКассовыйОрдер.СоставСуммаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСуммаПриИзменении(Элемент)
	
	СоставСуммаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СоставСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Состав.НайтиПоИдентификатору(Элементы.Состав.ТекущаяСтрока);
	Документы.РасходныйКассовыйОрдер.СоставСтавкаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСтавкаНДСПриИзменении(Элемент)
	
	СоставСтавкаНДСПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеДиалогомДокументаКлиент.ТоварыПриОкончанииРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования);
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока.СуммаСкидкиБонусами = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомДокументаСервер.ТоварыПослеУдаления(ЭтотОбъект, Элементы.Товары, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ТоварыПослеУдаленияНаСервере();
	
КонецПроцедуры 

#Область ОбработчикиСобытийПолейТаблицыФормыТовары

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РасходныйКассовыйОрдер.ТоварыНоменклатураПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТоварыНоменклатураПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РасходныйКассовыйОрдер.ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РасходныйКассовыйОрдер.ТоварыЕдиницаИзмеренияПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТоварыЕдиницаИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РасходныйКассовыйОрдер.ТоварыКоличествоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТоварыКоличествоПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыЦенаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РасходныйКассовыйОрдер.ТоварыЦенаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТоварыЦенаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РасходныйКассовыйОрдер.ТоварыСуммаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТоварыСуммаПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РасходныйКассовыйОрдер.ТоварыСуммаВсегоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСуммаВсегоПриИзменении(Элемент)
	
	ТоварыСуммаВсегоПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РасходныйКассовыйОрдер.ТоварыСтавкаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТоварыСтавкаНДСПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСуммаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РасходныйКассовыйОрдер.ТоварыСуммаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТоварыСуммаНДСПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСуммаСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РасходныйКассовыйОрдер.ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Элемент)
	
	ТоварыСуммаСкидкиСтрокиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РасходныйКассовыйОрдер.ТоварыСуммаСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	
	ТоварыСуммаСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСкидкаНаТоварПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РасходныйКассовыйОрдер.ТоварыСкидкаНаТоварПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкидкаНаТоварПриИзменении(Элемент)
	
	ТоварыСкидкаНаТоварПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПроцентСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РасходныйКассовыйОрдер.ТоварыПроцентСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиПриИзменении(Элемент)
	
	ТоварыПроцентСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПроцентСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РасходныйКассовыйОрдер.ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Элемент)
	
	ТоварыПроцентСкидкиСтрокиПриИзмененииНаСервере();
	
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)
	
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПробитьЧек(Команда)
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("Наличные",ИСТИНА);
	ПараметрыДействия.Вставить("ЭтоВозврат",Истина);
	ПараметрыДействия.Вставить("ОповещениеПробитьЧекЗавершениеФР",Новый ОписаниеОповещения("ПробитьЧекЗавершениеФР", ЭтотОбъект,ПараметрыДействия));

	УправлениеДиалогомДокументаКлиент.ПробитьЧек(ЭтотОбъект,ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеККМ(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ФР", Объект.ФР);
	
	ОткрытьФорму(
		"ОбщаяФорма.УправлениеФискальнымУстройством",
		ПараметрыФормы,
		ЭтотОбъект
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	УправлениеДиалогомКлиент.ОткрытьПодборНоменклатуры(ЭтотОбъект);
	
КонецПроцедуры 

&НаСервере
Процедура ПерезаполнитьТоварыНаСервере(ПараметрыДействия = Неопределено)
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура();
	КонецЕсли;
	
	Объект.Товары.Очистить();
	Если РедактироватьТовары И Объект.ДляПробитияНаФР Тогда
		
		Если НЕ ПараметрыДействия.Свойство("ЗаполнятьПоОснованию")
			И ЗначениеЗаполнено(Объект.Сделка)
			И НЕ Объект.Сделка = Объект.ДокументОснование Тогда
			ПараметрыДействия.Вставить("ЗаполнитьПоСделке", Истина);
		КонецЕсли;
		
		Объект.Товары.Загрузить(
			УправлениеДиалогомДокументаСервер.ПодготовитьТаблицуТоваров(Объект, Ложь, ПараметрыДействия));
		ЗащищенныеФункцииСервер.ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект.Товары);
		ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(ЭтотОбъект,,,Объект);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПерезаполнитьТовары(Команда)
	
	ПараметрыДействия = Новый Структура;
	ПерезаполнитьТоварыНаСервере(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура РаспределитьНаСервере()
	
	Документы.ЧекНаОплату.ПроизвестиРаспределениеСуммыОплаты(Объект.СуммаДокумента, Объект.Товары);

КонецПроцедуры 

&НаКлиенте
Процедура Распределить(Команда)
	
	РаспределитьНаСервере();	
	
КонецПроцедуры 

&НаКлиенте
Процедура ПодборОплаты(Команда)
	
	УправлениеДиалогомКлиент.ОткрытьПодборОплаты(ЭтотОбъект, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПробитьЧекЗавершениеФР(РезультатВыполнения, Параметры) Экспорт
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ТипИнкассации", 1);
	ПараметрыОперации.Вставить("Сумма"        , Объект.СуммаДокумента);
	ПараметрыОперации.Вставить("ДокументОснование" , Объект.Ссылка);
	Кассир = "";
	ИННКассира = "";
	МенеджерОборудованияВызовСервераПереопределяемый.ТекущийКассир(Кассир, ИННКассира);
	ПараметрыОперации.Вставить("Кассир", Кассир);
	ПараметрыОперации.Вставить("КассирИНН", ИННКассира);
	
	Параметры.Вставить("ПараметрыВыбранногоЭТ", РезультатВыполнения);

	Оповещение = Новый ОписаниеОповещения("НапечататьЧекКлиентИнкассацияЗавершение", ЭтотОбъект, Параметры);
	ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьИнкассациюНаФискальномУстройстве(
		Оповещение,
		УникальныйИдентификатор,
		Объект.ФР,
		ПараметрыОперации
	);
	
КонецПроцедуры 

&НаКлиенте
Процедура НапечататьЧекКлиентИнкассацияЗавершение(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При операции внесения/выемки произошла ошибка.
									|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	Иначе
		// Пробьем чек
		УправлениеДиалогомДокументаКлиент.ПробитьЧекЗавершениеФР(ПараметрыОперации.ПараметрыВыбранногоЭТ,ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакАвтомобиляОтФизЛица()
	
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		ТекущаяСтрока.ИндикаторСебестоимостиАвтомобиля = БиблиотекаКартинок.Информация;
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ЗавершениеЗаполненияТоваров(ПерезаполнятьТовары, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПерезаполнятьТовары Тогда
		ПерезаполнитьТоварыНаСервере();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_РедактироватьТоварыЗавершение(ОтветНаВопрос, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОчиститьТЧ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ОчиститьТЧ", Ложь);
	Если ОчиститьТЧ И НЕ ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		РедактироватьТовары = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыДействия = Новый Структура;
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		ПараметрыДействия.Вставить("ЗаполнятьПоОснованию");
	КонецЕсли;
	// Обработаем событие в контексте сервера
	РедактироватьТоварыПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры 

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЗаполнениеОбъектов
&НаКлиенте
Процедура ПослеОбработкиЗаполнения(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ПослеОбработкиЗаполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиЗаполненияНаСервере()
	
	ЗаполнениеОбъектовАльфаАвто.ПослеОбработкиЗаполнения(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ЗаполнениеОбъектов

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
//@skip-warning
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
    ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСуммаДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.ПоказатьРасширенныеИтогиОперации(ЭтотОбъект, Элемент);
	
КонецПроцедуры
// Конец Ядро

// СчетаФактуры
&НаКлиенте
Процедура НадписьНалоговыйДокументНажатие(Элемент)
	
	УправлениеДиалогомДокументаКлиент.НадписьНалоговыйДокументНажатие(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВзаиморасчетыНажатие(Элемент)
	
	УправлениеДиалогомДокументаКлиент.НадписьВзаиморасчетыНажатие(ЭтотОбъект);
	
КонецПроцедуры
// Конец СчетаФактуры

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	// Вызываем общий обработчик события настройки параметров выбора
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
	Если Не Элементы.Найти("Контрагент")=Неопределено Тогда
		Если Объект.ХозОперация=Справочники.ХозОперации.ВыдачаДенежныхСредствПодотчетнику ИЛИ Объект.ХозОперация=Справочники.ХозОперации.ВыплатаЗарплатыРаботнику Тогда 
			УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.Контрагент.ПараметрыВыбора, "Отбор.ВидКонтрагента", Перечисления.ВидыКонтрагентов.ПодотчетноеЛицо);
		Иначе
			ВидыКонтрагентов = Справочники.Контрагенты.ПолучитьВидыКонтрагентов();
			УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.Контрагент.ПараметрыВыбора, "Отбор.ВидКонтрагента", ВидыКонтрагентов);
		КонецЕсли;
	КонецЕсли;
	// Исключены "Передачи" так как это денежный документ, а не товарный, и передачу товара этими документами не подразумеваем.
	СпособыРасчета = Новый Массив;
	СпособыРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.Аванс);
	СпособыРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой);
	СпособыРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой);
	СпособыРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная);
	СпособыРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная);
	СпособыРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.ОплатаКредита);
	УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.ПризнакСпособаРасчета.ПараметрыВыбора, "Отбор.Ссылка", СпособыРасчета);
	// Ограничим выбор вида операции чека только теми, по которым возможен расход денежных средств.
	ВидыОперации = Новый Массив;
	ВидыОперации.Добавить(Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств);
	ВидыОперации.Добавить(Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств);
	УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.ТипРасчета.ПараметрыВыбора, "Отбор.Ссылка", ВидыОперации);  
	
	ВидДвиженияПараметры = Новый Массив; 
	ВидДвиженияПараметры.Добавить(Перечисления.ВидыДвижений.Расход);
	ВидДвиженияПараметры.Добавить(Перечисления.ВидыДвижений.Прочее);

	УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.СтатьяДДС.ПараметрыВыбора, "Отбор.ВидДвижения", ВидДвиженияПараметры);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	// Вызываем общий обработчик управления элементами диалога
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	// Установим доступность полей ввода фискальных данных
	Элементы.ФискальныеРеквизитыПараметры.Доступность = Объект.ДляПробитияНаФР;
	Элементы.СтраницаТовары.Видимость = Объект.Товары.Количество() > 0
		ИЛИ (Объект.ДляПробитияНаФР И ЗначениеЗаполнено(Объект.ДокументОснование) И РедактироватьТовары);
	Элементы.РедактироватьТовары.Доступность = Объект.ДляПробитияНаФР;
	Элементы.Распределить.Видимость = Элементы.СтраницаТовары.Видимость;
	
	Элементы.ГруппаРеквизитыВедомости.Видимость = (Объект.ХозОперация = Справочники.ХозОперации.ВыплатаЗарплатыРаботнику);

	Элементы.ФормаПробитьЧек.Доступность = НЕ ЗначениеЗаполнено(Объект.ДатаФР) И НЕ ТолькоПросмотр;
	
	ВыделениеМежценовойРазницыОтдельнойСтрокой = ПраваИНастройкиПользователя.Значение("ВыделениеМежценовойРазницыОтдельнойСтрокой", Объект);
	Элементы.ТоварыСебестоимостьАвтомобиля.Видимость = ВыделениеМежценовойРазницыОтдельнойСтрокой;
	ЗаполнитьПризнакАвтомобиляОтФизЛица();
	
	УправлениеДиалогомДокументаСервер.УстановитьИнформациюПечатиЧека(
		ЭтотОбъект,
		Объект.ФР,
		Объект.ТелефонEmailПокупателя,
		НЕ ЗначениеЗаполнено(Объект.ДатаФР) И Объект.ДляПробитияНаФР
	);
	
	Элементы.СпособЗачетаАвансов.Видимость =
		(Объект.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов =
			Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоСделкам);
			
	ВзаиморасчетыПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(Объект.ДоговорВзаиморасчетов);
	ИспользуютсяВзаиморасчетыПоРасчетнымДокументам =
		ВзаиморасчетыПоРасчетнымДокументам
		И РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(Объект.ВерсияОбъекта);
	СпособЗачетаОплатыПоДокументу = СпособЗачетаОплаты = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
	ЭтоПеремещение = Объект.ВидОперации = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВзносНаличнымиВБанк;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СпособЗачетаАвансов",
		"Видимость",
		Не ВзаиморасчетыПоРасчетнымДокументам
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Сделка",
		"Видимость",
		Не ИспользуютсяВзаиморасчетыПоРасчетнымДокументам
		И Не ЭтоПеремещение
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РазбитьПлатеж",
		"Видимость",
		ИспользуютсяВзаиморасчетыПоРасчетнымДокументам
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РасшифровкаПлатежаСпособЗачетаОплатыБезРазбиения",
		"Видимость",
		ИспользуютсяВзаиморасчетыПоРасчетнымДокументам И Не РазбитьПлатеж
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РасшифровкаПлатежаДокументРасчетовБезРазбиения",
		"Видимость",
		ИспользуютсяВзаиморасчетыПоРасчетнымДокументам И Не РазбитьПлатеж И СпособЗачетаОплатыПоДокументу
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РасшифровкаПлатежаЗаказБезРазбиения",
		"Видимость",
		ИспользуютсяВзаиморасчетыПоРасчетнымДокументам
		И Не РазбитьПлатеж
		И (СпособЗачетаОплатыПоДокументу ИЛИ СпособЗачетаОплаты = Перечисления.СпособыЗачетаАвансов.НеЗачитывать)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СтраницаСостав",
		"Видимость",
		ИспользуютсяВзаиморасчетыПоРасчетнымДокументам И РазбитьПлатеж
	); 
	
	Элементы.Контрагент.Видимость = НЕ ЭтоПеремещение;
	Элементы.ДоговорВзаиморасчетов.Видимость = НЕ ЭтоПеремещение;
	Элементы.БанковскийСчетОрганизации.Видимость = ЭтоПеремещение;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
 
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеГТД(ЭтотОбъект);
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеСпособовОплаты(ЭтотОбъект);
	
	// Условное оформление для выделения автомобиля, купленного у физлица
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыИндикаторСебестоимостиАвтомобиля");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СебестоимостьАвтомобиля");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПлатеж(Истина);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если НЕ УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	КоллекцияОпераций = Новый Структура();
	Если ТипЗнч(ПараметрыДействия) = Тип("Структура") И ПараметрыДействия.Свойство("ЗаполнитьПоСделке") Тогда
		Если ЗначениеЗаполнено(Объект.Сделка) И Объект.ДляПробитияНаФР И РедактироватьТовары Тогда
			ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_ЗавершениеЗаполненияТоваров", ЭтотОбъект);
			
			ПоследовательныеОперацииКлиентСервер.ДобавитьВопросДаНет(КоллекцияОпераций, "ТребуетсяЗаполнитьПоСделке", 
				НСтр("ru='Перезаполнить таблицу <Товары> по сделке?'"),,,
				ОбработчикОповещения);
			
			ПараметрыДействия.Вставить("ТребуетсяЗаполнитьПоСделке", Ложь);
			ПараметрыДействия.Вставить("ТребуетсяПересчетЦен",  Ложь);
			ПараметрыДействия.Вставить("ТребуетсяУстановкаЦен", Ложь);
		КонецЕсли;
		ПараметрыДействия.Удалить("ЗаполнитьПоСделке");
	КонецЕсли;
	
	Если НЕ Элементы.СтраницаТовары.Видимость Тогда
	
		ПараметрыДействия.Вставить("ТребуетсяУстановкаЦен", Ложь);
	
	КонецЕсли;

	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия, КоллекцияОпераций);
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры 

#КонецОбласти

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	                                                                                                                
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура Подключаемый_ШтрихкодированиеОбработкаОповещения(РезультатОповещения,
	ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если РезультатОповещения.Свойство("Действие") Тогда
		ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры)

	ШтрихкодированиеВызовСервера.ОбработкаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры, , Объект);

КонецПроцедуры

#КонецОбласти

#Область УтверждениеДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуУтверждения(Команда)
	
	УтверждениеДокументовКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект.Ссылка);
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбработкуКомандыУтвержденияНаСервере(ПараметрыОбработки,
		ДополнительныеПараметры) Экспорт
	
	ОбработкаКомандыУтвержденияНаСервере(ПараметрыОбработки, ДополнительныеПараметры);
	Оповестить("ПослеУтвержденияДокументов", Объект.Ссылка, ИмяФормы);
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаКомандыУтвержденияНаСервере(ПараметрыОбработки, ДополнительныеПараметры)
	
	УтверждениеДокументовВызовСервера.ОбработкаКомандыФормы(ЭтотОбъект, ПараметрыОбработки.ИмяКоманды, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыУтвержденияДокументов()
	
	ОбновитьКомандыУтвержденияДокументовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыУтвержденияДокументовНаСервере()
	
	УтверждениеДокументовКлиентСервер.УстановитьДоступностьКнопокУтверждения(ЭтотОбъект, Объект, ТолькоПросмотр);
	УтверждениеДокументовВызовСервера.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, Объект, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ОбновитьЗаголовокНадписиНалоговыйДокумент(РезультатОповещения, ДополнительныеПараметры) Экспорт
	
	ОбновитьЗаголовокНадписиНалоговыйДокументНаСервере();
	
КонецПроцедуры

Процедура ОбновитьЗаголовокНадписиНалоговыйДокументНаСервере()
	
	РаботаСФормойВызовСервера.ОбновитьЗаголовокНадписиНалоговыйДокумент(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(ОбновлятьКИ = Истина)
	
	Документы.ЧекНаОплату.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, ОбновлятьКИ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокТиповСделок(ДоговорВзаиморасчетов, ВерсияОбъекта)
	
	Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(
			ДоговорВзаиморасчетов)
		И РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ВерсияОбъекта) Тогда
		ТипыДляРасчетныхДокументов = РасчетыСКонтрагентамиСервер.ДоступныеТипыДокументовРасчета();
		ТипыСделок = Новый СписокЗначений();
		ТипыСделок.ЗагрузитьЗначения(ТипыДляРасчетныхДокументов.Типы());
		ТипыСделок.СортироватьПоЗначению(НаправлениеСортировки.Возр);
		Возврат ТипыСделок;
	КонецЕсли;
	Возврат УправлениеДиалогомДокументаСервер.СписокТиповСделок();
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокТиповЗаказов()
	
	Возврат УправлениеДиалогомДокументаСервер.СписокТиповЗаказов();
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыборТипаСделки(ВыбранныйТипСделки, ПолеВызова) Экспорт
	
	Если ВыбранныйТипСделки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбораДокумента = ПараметрыДляВыбораСделки(ВыбранныйТипСделки.Значение);
	
	ПараметрыВыбораСделки = Новый Структура();
	ПараметрыВыбораСделки.Вставить(
		"Отбор",
		ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыбораДокумента.ПараметрыВыбора));
	ПараметрыВыбораСделки.Вставить("РежимВыбора", Истина);
	ПараметрыВыбораСделки.Вставить("УстановитьОтборыКонтрагентовИДоговоровДляВыбораСделки", Истина);
	Если Элементы.РазбитьПлатеж.Видимость Тогда
		ЗаблокированныеПоля = Новый Массив;
		ЗаблокированныеПоля.Добавить("Контрагент");
		ЗаблокированныеПоля.Добавить("ДоговорВзаиморасчетов");
		ПараметрыВыбораСделки.Вставить("ЗаблокированныеПоля", ЗаблокированныеПоля);
	КонецЕсли;
	
	ОткрытьФорму(
		ПараметрыВыбораДокумента.ИмяФормыВыбора,
		ПараметрыВыбораСделки,
		ПолеВызова);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыДляВыбораСделки(ТипСделки)
	
	Возврат УправлениеДиалогомДокументаСервер.ПараметрыДляВыбораСделки(Объект, ТипСделки);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПлатеж(НачальноеЗаполнение = Ложь)
	
	Если Не РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(Объект.ВерсияОбъекта) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если РазбитьПлатеж Тогда
		
		Если НачальноеЗаполнение Тогда
			Возврат;
		КонецЕсли;
		
		Если Объект.Состав.Количество() > 0 Тогда
			
			СтрокаСостава = Объект.Состав[0];
			
		Иначе
			
			СтрокаСостава = Объект.Состав.Добавить();
			
		КонецЕсли;
		
		СтрокаСостава.ДокументРасчетов = ДокументРасчетов;
		СтрокаСостава.Заказ = Заказ;
		СтрокаСостава.Сумма = Объект.СуммаДокумента;
		СтрокаСостава.СтавкаНДС = Объект.СтавкаНДС;
		СтрокаСостава.СуммаНДС = Объект.СуммаНДС;
		СтрокаСостава.СпособЗачетаОплаты = СпособЗачетаОплаты;
		
	ИначеЕсли Объект.Состав.Количество() > 0 Тогда
		
		СпособЗачетаОплаты = Объект.Состав[0].СпособЗачетаОплаты;
		ДокументРасчетов = Объект.Состав[0].ДокументРасчетов;
		Заказ = Объект.Состав[0].Заказ;
		
		// Удалим остальные строки из состава.
		ЭтоПерваяСтрока = Истина;
		УдалитьСтрокиСостава = Новый Массив;
		Для Каждого СтрокаСостава Из Объект.Состав Цикл
			
			Если ЭтоПерваяСтрока Тогда
				ЭтоПерваяСтрока = Ложь;
			КонецЕсли;
			
			УдалитьСтрокиСостава.Добавить(СтрокаСостава);
			
		КонецЦикла;
		
		Для Каждого СтрокаКУдалению Из УдалитьСтрокиСостава Цикл
			
			Объект.Состав.Удалить(СтрокаКУдалению);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПлатежомСостав()
	
	Если Не РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(Объект.ДоговорВзаиморасчетов)
		ИЛИ Не РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(Объект.ВерсияОбъекта) Тогда
		
		Объект.Состав.Очистить();
		Возврат;
		
	КонецЕсли;
	
	Если РазбитьПлатеж Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Состав.Количество() > 0 Тогда
		
		СтрокаСостава = Объект.Состав[0];
		
	Иначе
		
		СтрокаСостава = Объект.Состав.Добавить();
		
	КонецЕсли;
	
	СтрокаСостава.ДокументРасчетов = ДокументРасчетов;
	СтрокаСостава.Заказ = Заказ;
	СтрокаСостава.Сумма = Объект.СуммаДокумента;
	СтрокаСостава.СтавкаНДС = Объект.СтавкаНДС;
	СтрокаСостава.СуммаНДС = Объект.СуммаНДС;
	СтрокаСостава.СпособЗачетаОплаты = СпособЗачетаОплаты;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОбновитьСоставПлатежа(Отказ)
	
	Если Не Элементы.РазбитьПлатеж.Видимость
		ИЛИ РазбитьПлатеж Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим, что все данные заполнены
	Если Не ЗначениеЗаполнено(СпособЗачетаОплаты) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не указан способ зачета оплаты.'"),
			,
			"СпособЗачетаОплаты",
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если СпособЗачетаОплаты = ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.ПоДокументу")
		И Не ЗначениеЗаполнено(ДокументРасчетов) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не указан документ расчетов для зачета оплаты.'"),
			,
			"ДокументРасчетов",
			,
			Отказ
		);
		
	КонецЕсли;
	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Состав.Количество() > 0 Тогда
		
		СтрокаСостава = Объект.Состав[0];
		
	Иначе
		
		СтрокаСостава = Объект.Состав.Добавить();
		
	КонецЕсли;
	
	СтрокаСостава.ДокументРасчетов = ДокументРасчетов;
	СтрокаСостава.Заказ = Заказ;
	СтрокаСостава.Сумма = Объект.СуммаДокумента;
	СтрокаСостава.СтавкаНДС = Объект.СтавкаНДС;
	СтрокаСостава.СуммаНДС = Объект.СуммаНДС;
	СтрокаСостава.СпособЗачетаОплаты = СпособЗачетаОплаты;
	
КонецПроцедуры

#КонецОбласти