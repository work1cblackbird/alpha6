// Модуль менеджера документа "Расходный кассовый ордер"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.АвансовыйОтчет);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Инкассация);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДолга);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПоступлениеТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетФактураПолученный);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЧекКоррекции);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.РасходныйКассовыйОрдер);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(КассаКомпании)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ЗапретРедактированияРеквизитовОбъектов

// Определяет блокируемые реквизиты
//
// Возвращаемое значение:
//  Массив - Строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]. Например: "Объект.Автор", "ПолеАвтор".
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив();
	
	Для Каждого ИмяРеквизита Из Метаданные.Документы.ПриходныйКассовыйОрдер.ТабличныеЧасти.Товары.Реквизиты Цикл
		Если ИмяРеквизита.Имя = "ДоговорВзаиморасчетов" Тогда
			Продолжить;	
		КонецЕсли;
		Результат.Добавить("Товары." + ИмяРеквизита.Имя);
	КонецЦикла;
	
	ЭлементыКомандноеПанели = ";ТоварыКоманднаяПанель, ТоварыКонтекстноеМенюДобавить, ТоварыКонтекстноеМенюСкопировать, ТоварыКонтекстноеМенюУдалить, ТоварыКонтекстноеМенюПереместить";
	Результат.Добавить(ЭлементыКомандноеПанели);
	Результат.Добавить("КассаККМ");
	Результат.Добавить("ФР");
	Результат.Добавить("Контрагент");
	Результат.Добавить("ДоговорВзаиморасчетов");
	Результат.Добавить("ПараметрыДокумента");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.СуммаДокумента);
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС",    Объект.СуммаНДС);
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента-ИтогиОперации.СуммаНДС);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Получение типа расчета документа в соовтетсвии с указанными параметрами документа.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыРасчетаДенежнымиСредствами - Тип расчета для формирования в чеке
//
Функция ТипРасчетаПоДокументу(Объект, УчитыватьСтатьюДДС = Истина) Экспорт
	
	// Если не заполнено основание и сделка, то получим по статье вид операции.
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) И НЕ ЗначениеЗаполнено(Объект.Сделка) Тогда
		
		Если УчитыватьСтатьюДДС И Объект.СтатьяДДС = Справочники.СтатьиДДС.ВозвратПокупателю Тогда
			Возврат Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
		Иначе
			Возврат Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств;
		КонецЕсли;
		
	КонецЕсли;
	
	// Документ основание ПКО - вид операции возврат прихода
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		Возврат Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
	КонецЕсли;
	
	// Получим по сделке вид операции
	Если НЕ ЗначениеЗаполнено(Объект.Сделка) Тогда
		Возврат Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств;
	КонецЕсли;
	
	ДокументыВозвратаРасхода = Новый Массив;
	ДокументыВозвратаРасхода.Добавить(Тип("ДокументСсылка.ВозвратОтПокупателя"));
	ДокументыВозвратаРасхода.Добавить(Тип("ДокументСсылка.ВозвратОтПокупателяАвтомобилей"));
	
	СделкиПрихода = ПланыВидовХарактеристик.ТипыСделок.ПолучитьРазрешенныеТипыСделок(Истина, Ложь);
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить(Тип("ДокументСсылка.ЗаказПоставщикуНаАвтомобиль"));
	МассивИсключений.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
	МассивИсключений.Добавить(Тип("ДокументСсылка.Инкассация"));
	МассивИсключений.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
	МассивИсключений.Добавить(Тип("ДокументСсылка.Выписка"));
	МассивИсключений.Добавить(Тип("ДокументСсылка.ПереоценкаВалютныхСредств"));
	
	// Дополним документы возврата прихода
	Для Каждого ТекущаяСделка Из СделкиПрихода Цикл
		Если МассивИсключений.Найти(ТекущаяСделка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДокументыВозвратаРасхода.Добавить(ТекущаяСделка);
	КонецЦикла;
	
	ТипЗнчСделки = ТипЗнч(Объект.Сделка);
	ТипЗнчОснования = ТипЗнч(Объект.ДокументОснование);
	
	Если ДокументыВозвратаРасхода.Найти(ТипЗнчСделки) = Неопределено
		И ДокументыВозвратаРасхода.Найти(ТипЗнчОснования) = Неопределено Тогда
		Возврат Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств;
	Иначе
		Возврат Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств;
	КонецЕсли;
	
КонецФункции // ТипРасчетаПоДокументу()

Процедура РассчитатьСуммуПоДокументуРасчетов(Объект, Строка)
	
	Отбор = Новый Структура();
	Отбор.Вставить("Контрагент"            , Объект.Контрагент);
	Отбор.Вставить("ДоговорВзаиморасчетов" , Объект.ДоговорВзаиморасчетов);
	Если ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
		Отбор.Вставить("ДокументРасчетов" , Строка.ДокументРасчетов);
	КонецЕсли;
	Если ЗначениеЗаполнено(Строка.Заказ) Тогда
		Отбор.Вставить("Заказ" , Строка.Заказ);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		МоментВремени = Новый МоментВремени(Объект.Дата, Объект.Ссылка);
	Иначе
		МоментВремени = Неопределено;
	КонецЕсли;
	Долги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(Отбор, МоментВремени, "Сумма");
	ОстатокПоСделке = Долги.Итог("Сумма");
	ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
		ОстатокПоСделке,
		Объект.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,
		?(ЗначениеЗаполнено(Объект.КурсВалютыВзаиморасчетов), Объект.КурсВалютыВзаиморасчетов, Объект.Дата),
		Объект.ВалютаДокумента,
		Объект.КурсДокумента);
	
	Если ОстатокПоСделке < 0 Тогда
		Строка.Сумма = - ОстатокПоСделке;
		СоставСуммаПриИзменении(Объект, Строка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.ДокументРасчетов)
		И Строка.Сумма > 0 Тогда
		
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("СуммаНДС",        Строка.СуммаНДС);
		СтруктураСтроки.Вставить("СтавкаНДС",       Строка.СтавкаНДС);
		СтруктураСтроки.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураСтроки.Вставить("КурсДокумента",   Объект.КурсДокумента);
		ОбработкаСобытийДокументаСервер.УстановитьСтавкуНДС(Строка.ДокументРасчетов, СтруктураСтроки, Строка.Сумма,,, Ложь);
		
		Строка.СуммаНДС = СтруктураСтроки.СуммаНДС;
		
		// Для типа реализации автомобилей потребуется изменить ставку НДС
		Если (ТипЗнч(Строка.ДокументРасчетов) = Тип("ДокументСсылка.РеализацияАвтомобилей")
			ИЛИ ТипЗнч(Строка.ДокументРасчетов) = Тип("ДокументСсылка.СчетНаОплатуЗаАвтомобили"))
			И Объект.СтавкаНДС <> СтруктураСтроки.СтавкаНДС Тогда
			Строка.СтавкаНДС = СтруктураСтроки.СтавкаНДС;
			Объект.СтавкаНДС = СтруктураСтроки.СтавкаНДС;
			Объект.СуммаНДС = Объект.Состав.Итог("СуммаНДС");
			
			// Заполним сумму
			Объект.СуммаДокумента = Объект.Состав.Итог("Сумма");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

// Производит заполнение печатных реквизитов выдачи денег: "Выдать" и "По документу"
//
// Параметры:
//  Объект - ДокументОбъект.РасходныйКассовыйОрдер (в случае, когда обработчик вызван из обработки заполнения)
//  или ДанныеФормыСтруктура (когда обработчик вызван для формы документа).
//
Процедура ЗаполнитьПечатныеРеквизитыВыдатьИПоДокументу(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		Объект.Выдать = СокрЛП(Объект.Контрагент.НаименованиеПолное);
		ПодтверждающийДокумент = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
			Объект.Контрагент,
			Перечисления.ВидыДокументов.Паспорт
		);
		
		Если НЕ ПодтверждающийДокумент.Пустая() Тогда
			
			Объект.ПоДокументу = ПодтверждающийДокумент.Наименование
				+ ?(ПустаяСтрока(ПодтверждающийДокумент.КемВыдан),""," выданный " + ПодтверждающийДокумент.КемВыдан);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьВидОперацииПеремещение(Операция) Экспорт
	
	Если Операция = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Операция = Перечисления.ВидыОперацийДвиженияДенежныхСредств.ВзносНаличнымиВБанк;
		
	КонецЕсли;
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("КассаКомпании");
	ОбязательныеРеквизиты.Добавить("СуммаДокумента");
	ОбязательныеРеквизиты.Добавить("СтатьяДДС");
	ОбязательныеРеквизиты.Добавить("СтавкаНДС");

	Если Объект.ДляПробитияНаФР Тогда
		ОбязательныеРеквизиты.Добавить("ПризнакСпособаРасчета");
		ОбязательныеРеквизиты.Добавить("ТипРасчета");
	КонецЕсли; 		
	
	Если НЕ ПроверитьВидОперацииПеремещение(Объект.ВидОперации)Тогда
		
		ОбязательныеРеквизиты.Добавить("Контрагент");
		ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");

		СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
			РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(Объект.ДоговорВзаиморасчетов);
		Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
			ОбязательныеРеквизиты.Добавить("СпособЗачетаАвансов");
		КонецЕсли;
		
		Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам
			И РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(Объект.ВерсияОбъекта) Тогда
			ОбязательныеРеквизиты.Добавить("Состав.СпособЗачетаОплаты");
		КонецЕсли; 
	Иначе 
		ОбязательныеРеквизиты.Добавить("БанковскийСчетОрганизации");
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	
	Если РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(Объект.ВерсияОбъекта) Тогда
		
		// Состав уникальность строк
		УникальныеПлатежи = Новый Массив();
		УникальныеПлатежи.Добавить("ДокументРасчетов");
		УникальныеПлатежи.Добавить("Заказ");
		УникальныеПлатежи.Добавить("СпособЗачетаОплаты");
		
		// Структура уникальных реквизитов табличных частей
		УникальныеРеквизиты = Новый Структура();
		УникальныеРеквизиты.Вставить("Состав", УникальныеПлатежи);
		
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("КассаКомпании",         ЛОЖЬ);
	КонтролируемыеРеквизиты.Вставить("КассаККМ",              ЛОЖЬ);
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	КонтролируемыеРеквизиты.Вставить("БанковскийСчетОрганизации", ЛОЖЬ);

	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("НомерДокумента");
	Результат.Добавить("НомерЧека");
	Результат.Добавить("НомерСмены");
	Результат.Добавить("ДляПробитияНаФР");
	Результат.Добавить("ФР");
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговора",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов"));
	ДополнительныеПараметры.ДляПроведения.Вставить("ВерсияОбъекта", Объект.ВерсияОбъекта);
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаДоговора", ДополнительныеПараметры.ДляПроведения.ВалютаДоговора);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Организация КАК Организация,
	|	РасходныйКассовыйОрдер.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
	|	РасходныйКассовыйОрдер.Дата КАК Дата,
	|	РасходныйКассовыйОрдер.ХозОперация КАК ХозОперация,
	|	РасходныйКассовыйОрдер.Сделка КАК Сделка,
	|	РасходныйКассовыйОрдер.Контрагент КАК Контрагент,
	|	РасходныйКассовыйОрдер.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	РасходныйКассовыйОрдер.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	РасходныйКассовыйОрдер.СуммаДокумента КАК СуммаДокумента,
	|	РасходныйКассовыйОрдер.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	РасходныйКассовыйОрдер.КурсВалютыУпр КАК КурсВалютыУпр,
	|	РасходныйКассовыйОрдер.КурсДокумента КАК КурсДокумента,
	|	РасходныйКассовыйОрдер.ВалютаДокумента КАК ВалютаДокумента,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ШапкаДокумента
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ ТаблицаКурсовВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр, &ВалютаДоговора)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШапкаДокумента.Организация КАК Организация,
	|	ШапкаДокумента.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ШапкаДокумента.Ссылка КАК Ссылка,
	|	ШапкаДокумента.Дата КАК Дата,
	|	ШапкаДокумента.ХозОперация КАК ХозОперация,
	|	ШапкаДокумента.Сделка КАК Сделка,
	|	ШапкаДокумента.Контрагент КАК Контрагент,
	|	ШапкаДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ШапкаДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.КурсВалютыВзаиморасчетов = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютВзаиморасчетов.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетов.Кратность, 1)
	|		ИНАЧЕ ШапкаДокумента.КурсВалютыВзаиморасчетов
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ШапкаДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ШапкаДокумента.КурсДокумента КАК КурсДокумента,
	|	ШапкаДокумента.ВалютаДоговора КАК ВалютаДоговора,
	|	ШапкаДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ШапкаДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ШапкаДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл
	|ПОМЕСТИТЬ ШапкаДокументаСКурсами
	|ИЗ
	|	ШапкаДокумента КАК ШапкаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсовВалют КАК КурсыВалютУпр
	|		ПО ШапкаДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсовВалют КАК КурсыВалютВзаиморасчетов
	|		ПО ШапкаДокумента.ВалютаДоговора = КурсыВалютВзаиморасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсовВалют КАК КурсыВалютРегл
	|		ПО ШапкаДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдерСостав.Ссылка КАК Ссылка,
	|	РасходныйКассовыйОрдерСостав.ДокументРасчетов КАК ДокументРасчетов,
	|	РасходныйКассовыйОрдерСостав.Заказ КАК Заказ,
	|	РасходныйКассовыйОрдерСостав.Сумма КАК Сумма,
	|	РасходныйКассовыйОрдерСостав.СтавкаНДС КАК СтавкаНДС,
	|	РасходныйКассовыйОрдерСостав.СуммаНДС КАК СуммаНДС,
	|	РасходныйКассовыйОрдерСостав.СпособЗачетаОплаты КАК СпособЗачетаОплаты
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.Состав КАК РасходныйКассовыйОрдерСостав
	|ГДЕ
	|	РасходныйКассовыйОрдерСостав.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШапкаДокументаСКурсами.Организация КАК Организация,
	|	ШапкаДокументаСКурсами.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ШапкаДокументаСКурсами.Ссылка КАК Ссылка,
	|	ШапкаДокументаСКурсами.Дата КАК Дата,
	|	ШапкаДокументаСКурсами.ХозОперация КАК ХозОперация,
	|	ШапкаДокументаСКурсами.Контрагент КАК Контрагент,
	|	ШапкаДокументаСКурсами.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ШапкаДокументаСКурсами.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	ШапкаДокументаСКурсами.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ШапкаДокументаСКурсами.КурсДокумента КАК КурсДокумента,
	|	ШапкаДокументаСКурсами.ВалютаДоговора КАК ВалютаДоговора,
	|	ШапкаДокументаСКурсами.ВалютаДокумента КАК ВалютаДокумента,
	|	ШапкаДокументаСКурсами.ВалютаРегл КАК ВалютаРегл,
	|	ШапкаДокументаСКурсами.ВалютаУпр КАК ВалютаУпр,
	|	ШапкаДокументаСКурсами.КурсВалютыРегл КАК КурсВалютыРегл,
	|	РасшифровкаПлатежа.ДокументРасчетов КАК ДокументРасчетов,
	|	РасшифровкаПлатежа.Заказ КАК Заказ,
	|	РасшифровкаПлатежа.Сумма КАК Сумма,
	|	РасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	РасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|	РасшифровкаПлатежа.СпособЗачетаОплаты КАК СпособЗачетаОплаты
	|ПОМЕСТИТЬ ДанныеДокументаОплаты
	|ИЗ
	|	РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ШапкаДокументаСКурсами КАК ШапкаДокументаСКурсами
	|		ПО РасшифровкаПлатежа.Ссылка = ШапкаДокументаСКурсами.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ШапкаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаКурсовВалют
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РасшифровкаПлатежа";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	СуммовыеРазницы = РегистрыНакопления.РасчетыСКонтрагентами.ИнициализацияСуммовыхРазниц();
	
	// Дополним таблицу для списания суммовых разниц
	РасчетыСКонтрагентами.Колонки.Добавить(
		"КурсВалютыВзаиморасчетов",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 6, ДопустимыйЗнак.Неотрицательный)));
	
	Если РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ДвиженияДокумента.ДляПроведения.ВерсияОбъекта) Тогда
		
		ЗаполнитьРасчетамиСКонтрагентомПоСоставу(ДвиженияДокумента, РасчетыСКонтрагентами, СуммовыеРазницы, Отказ);
		
	Иначе
		
		ЗаполнитьРасчетамиПоСделке(ДвиженияДокумента, РасчетыСКонтрагентами, СуммовыеРазницы);
		
	КонецЕсли;
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	ДвиженияДокумента.Вставить("СуммовыеРазницы", СуммовыеРазницы);
	
КонецПроцедуры

Процедура ЗаполнитьРасчетамиСКонтрагентомПоСоставу(ДвиженияДокумента, РасчетыСКонтрагентами, СуммовыеРазницы, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеДокументаОплаты.Организация КАК Организация,
	               |	ДанныеДокументаОплаты.Ссылка КАК Ссылка,
	               |	ДанныеДокументаОплаты.Дата КАК Дата,
	               |	ДанныеДокументаОплаты.ХозОперация КАК ХозОперация,
	               |	ДанныеДокументаОплаты.ДокументРасчетов КАК Сделка,
	               |	ДанныеДокументаОплаты.Контрагент КАК Контрагент,
	               |	ДанныеДокументаОплаты.Контрагент.ВидКонтрагента КАК ВидКонтрагента,
	               |	ДанныеДокументаОплаты.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	               |	ДанныеДокументаОплаты.Сумма КАК Сумма,
	               |	ДанныеДокументаОплаты.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	               |	ДанныеДокументаОплаты.КурсВалютыУпр КАК КурсВалютыУпр,
	               |	ДанныеДокументаОплаты.КурсДокумента КАК КурсДокумента,
	               |	ДанныеДокументаОплаты.ВалютаДоговора КАК ВалютаДоговора,
	               |	ДанныеДокументаОплаты.ВалютаДокумента КАК ВалютаДокумента,
	               |	ДанныеДокументаОплаты.ВалютаРегл КАК ВалютаРегл,
	               |	ДанныеДокументаОплаты.ВалютаУпр КАК ВалютаУпр,
	               |	ДанныеДокументаОплаты.КурсВалютыРегл КАК КурсВалютыРегл,
	               |	ДанныеДокументаОплаты.Заказ КАК Заказ,
	               |	ДанныеДокументаОплаты.СпособЗачетаОплаты КАК СпособЗачетаОплаты,
	               |	ВЫБОР
	               |		КОГДА ВЫРАЗИТЬ(ДанныеДокументаОплаты.ДокументРасчетов КАК Документ.ЗаказНаряд) <> ЗНАЧЕНИЕ(Документ.ЗаказНаряд.ПустаяСсылка)
	               |			ТОГДА ВЫРАЗИТЬ(ДанныеДокументаОплаты.ДокументРасчетов КАК Документ.ЗаказНаряд).Состояние
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ КАК СостояниеЗаказНаряда,
	               |	ВЫБОР
	               |		КОГДА ВЫРАЗИТЬ(ДанныеДокументаОплаты.ДокументРасчетов КАК Документ.ЗаказНаряд) <> ЗНАЧЕНИЕ(Документ.ЗаказНаряд.ПустаяСсылка)
	               |			ТОГДА ВЫРАЗИТЬ(ДанныеДокументаОплаты.ДокументРасчетов КАК Документ.ЗаказНаряд).ДатаЗакрытия
	               |		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	               |	КОНЕЦ КАК ДатаЗакрытия
	               |ИЗ
	               |	ДанныеДокументаОплаты КАК ДанныеДокументаОплаты
	               |ГДЕ
	               |	ДанныеДокументаОплаты.СпособЗачетаОплаты = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПоДокументу)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеДокументаОплаты.Организация КАК Организация,
	               |	ДанныеДокументаОплаты.Ссылка КАК Ссылка,
	               |	ДанныеДокументаОплаты.Дата КАК Дата,
	               |	ДанныеДокументаОплаты.ХозОперация КАК ХозОперация,
	               |	ДанныеДокументаОплаты.ДокументРасчетов КАК Сделка,
	               |	ДанныеДокументаОплаты.Контрагент КАК Контрагент,
	               |	ДанныеДокументаОплаты.Контрагент.ВидКонтрагента КАК ВидКонтрагента,
	               |	ДанныеДокументаОплаты.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	               |	СУММА(ДанныеДокументаОплаты.Сумма) КАК Сумма,
	               |	ДанныеДокументаОплаты.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	               |	ДанныеДокументаОплаты.КурсВалютыУпр КАК КурсВалютыУпр,
	               |	ДанныеДокументаОплаты.КурсДокумента КАК КурсДокумента,
	               |	ДанныеДокументаОплаты.ВалютаДоговора КАК ВалютаДоговора,
	               |	ДанныеДокументаОплаты.ВалютаДокумента КАК ВалютаДокумента,
	               |	ДанныеДокументаОплаты.ВалютаРегл КАК ВалютаРегл,
	               |	ДанныеДокументаОплаты.ВалютаУпр КАК ВалютаУпр,
	               |	ДанныеДокументаОплаты.КурсВалютыРегл КАК КурсВалютыРегл,
	               |	ДанныеДокументаОплаты.Заказ КАК Заказ,
	               |	ДанныеДокументаОплаты.СпособЗачетаОплаты КАК СпособЗачетаОплаты
	               |ИЗ
	               |	ДанныеДокументаОплаты КАК ДанныеДокументаОплаты
	               |ГДЕ
	               |	ДанныеДокументаОплаты.СпособЗачетаОплаты = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДанныеДокументаОплаты.Организация,
	               |	ДанныеДокументаОплаты.Ссылка,
	               |	ДанныеДокументаОплаты.Дата,
	               |	ДанныеДокументаОплаты.ХозОперация,
	               |	ДанныеДокументаОплаты.ДокументРасчетов,
	               |	ДанныеДокументаОплаты.Контрагент,
	               |	ДанныеДокументаОплаты.Контрагент.ВидКонтрагента,
	               |	ДанныеДокументаОплаты.ДоговорВзаиморасчетов,
	               |	ДанныеДокументаОплаты.КурсВалютыВзаиморасчетов,
	               |	ДанныеДокументаОплаты.КурсВалютыУпр,
	               |	ДанныеДокументаОплаты.КурсДокумента,
	               |	ДанныеДокументаОплаты.ВалютаДоговора,
	               |	ДанныеДокументаОплаты.ВалютаДокумента,
	               |	ДанныеДокументаОплаты.ВалютаРегл,
	               |	ДанныеДокументаОплаты.ВалютаУпр,
	               |	ДанныеДокументаОплаты.КурсВалютыРегл,
	               |	ДанныеДокументаОплаты.Заказ,
	               |	ДанныеДокументаОплаты.СпособЗачетаОплаты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеДокументаОплаты.Организация КАК Организация,
	               |	ДанныеДокументаОплаты.Ссылка КАК Ссылка,
	               |	ДанныеДокументаОплаты.Дата КАК Дата,
	               |	ДанныеДокументаОплаты.ХозОперация КАК ХозОперация,
	               |	ДанныеДокументаОплаты.ДокументРасчетов КАК Сделка,
	               |	ДанныеДокументаОплаты.Контрагент КАК Контрагент,
	               |	ДанныеДокументаОплаты.Контрагент.ВидКонтрагента КАК ВидКонтрагента,
	               |	ДанныеДокументаОплаты.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	               |	ДанныеДокументаОплаты.Сумма КАК Сумма,
	               |	ДанныеДокументаОплаты.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	               |	ДанныеДокументаОплаты.КурсВалютыУпр КАК КурсВалютыУпр,
	               |	ДанныеДокументаОплаты.КурсДокумента КАК КурсДокумента,
	               |	ДанныеДокументаОплаты.ВалютаДоговора КАК ВалютаДоговора,
	               |	ДанныеДокументаОплаты.ВалютаДокумента КАК ВалютаДокумента,
	               |	ДанныеДокументаОплаты.ВалютаРегл КАК ВалютаРегл,
	               |	ДанныеДокументаОплаты.ВалютаУпр КАК ВалютаУпр,
	               |	ДанныеДокументаОплаты.КурсВалютыРегл КАК КурсВалютыРегл,
	               |	ДанныеДокументаОплаты.Заказ КАК Заказ,
	               |	ДанныеДокументаОплаты.СпособЗачетаОплаты КАК СпособЗачетаОплаты
	               |ИЗ
	               |	ДанныеДокументаОплаты КАК ДанныеДокументаОплаты
	               |ГДЕ
	               |	ДанныеДокументаОплаты.СпособЗачетаОплаты = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Незачитывать)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеДокументаОплаты.Организация КАК Организация,
	               |	ДанныеДокументаОплаты.Контрагент КАК Контрагент,
	               |	ДанныеДокументаОплаты.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов
	               |ПОМЕСТИТЬ ПараметрыДляПолученияОстатков
	               |ИЗ
	               |	ДанныеДокументаОплаты КАК ДанныеДокументаОплаты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РасчетыСКонтрагентами.ДокументРасчетов КАК ДокументРасчетов,
	               |	РасчетыСКонтрагентами.Заказ КАК Заказ,
	               |	МИНИМУМ(РасчетыСКонтрагентами.Период) КАК Период
	               |ПОМЕСТИТЬ ТаблицаСортировки
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
	               |ГДЕ
	               |	(РасчетыСКонтрагентами.Организация, РасчетыСКонтрагентами.Контрагент, РасчетыСКонтрагентами.ДоговорВзаиморасчетов) В
	               |			(ВЫБРАТЬ
	               |				ПараметрыДляПолученияОстатков.Организация КАК Организация,
	               |				ПараметрыДляПолученияОстатков.Контрагент КАК Контрагент,
	               |				ПараметрыДляПолученияОстатков.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов
	               |			ИЗ
	               |				ПараметрыДляПолученияОстатков КАК ПараметрыДляПолученияОстатков)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РасчетыСКонтрагентами.ДокументРасчетов,
	               |	РасчетыСКонтрагентами.Заказ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РасчетыСКонтрагентамиОстатки.Организация КАК Организация,
	               |	РасчетыСКонтрагентамиОстатки.Контрагент КАК Контрагент,
	               |	РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	               |	РасчетыСКонтрагентамиОстатки.ТипРасчета КАК ТипРасчета,
	               |	РасчетыСКонтрагентамиОстатки.ДокументРасчетов КАК ДокументРасчетов,
	               |	РасчетыСКонтрагентамиОстатки.Заказ КАК Заказ,
	               |	- РасчетыСКонтрагентамиОстатки.СуммаОстаток КАК СуммаОстаток,
	               |	ТаблицаСортировки.Период КАК Период
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКонтрагентами.Остатки(
	               |			&МоментВремени,
	               |			(Организация, Контрагент, ДоговорВзаиморасчетов) В
	               |				(ВЫБРАТЬ
	               |					ПараметрыДляПолученияОстатков.Организация КАК Организация,
	               |					ПараметрыДляПолученияОстатков.Контрагент КАК Контрагент,
	               |					ПараметрыДляПолученияОстатков.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов
	               |				ИЗ
	               |					ПараметрыДляПолученияОстатков КАК ПараметрыДляПолученияОстатков)) КАК РасчетыСКонтрагентамиОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСортировки КАК ТаблицаСортировки
	               |		ПО РасчетыСКонтрагентамиОстатки.ДокументРасчетов = ТаблицаСортировки.ДокументРасчетов
	               |			И РасчетыСКонтрагентамиОстатки.Заказ = ТаблицаСортировки.Заказ
	               |ГДЕ
	               |	РасчетыСКонтрагентамиОстатки.СуммаОстаток < 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период,
	               |	ДокументРасчетов,
	               |	Заказ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеДокументаОплаты.Организация КАК Организация,
	               |	ДанныеДокументаОплаты.ПодразделениеКомпании КАК ПодразделениеКомпании,
	               |	ДанныеДокументаОплаты.Ссылка КАК Ссылка,
	               |	ДанныеДокументаОплаты.Дата КАК Дата,
	               |	ДанныеДокументаОплаты.ХозОперация КАК ХозОперация,
	               |	ДанныеДокументаОплаты.Контрагент КАК Контрагент,
	               |	ДанныеДокументаОплаты.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	               |	ДанныеДокументаОплаты.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	               |	ДанныеДокументаОплаты.КурсВалютыУпр КАК КурсВалютыУпр,
	               |	ДанныеДокументаОплаты.КурсДокумента КАК КурсДокумента,
	               |	ДанныеДокументаОплаты.ВалютаДоговора КАК ВалютаДоговора,
	               |	ДанныеДокументаОплаты.ВалютаДокумента КАК ВалютаДокумента,
	               |	ДанныеДокументаОплаты.ВалютаРегл КАК ВалютаРегл,
	               |	ДанныеДокументаОплаты.ВалютаУпр КАК ВалютаУпр,
	               |	ДанныеДокументаОплаты.КурсВалютыРегл КАК КурсВалютыРегл
	               |ИЗ
	               |	ДанныеДокументаОплаты КАК ДанныеДокументаОплаты";
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДвиженияДокумента.ДляПроведения.Дата, ВидГраницы.Исключая));
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ОплатыПоДокументу = Новый Структура();
	ОплатыПоДокументу.Вставить("ОстаткиВзаиморасчетов", ПакетЗапроса[5].Выгрузить());
	ОплатыПоДокументу.Вставить("ОплатаПоДокументамРасчета", ПакетЗапроса[0].Выгрузить());
	ОплатыПоДокументу.Вставить("АвтоматическоеСписание", ПакетЗапроса[1].Выгрузить());
	ОплатыПоДокументу.Вставить("ДанныеОбОплате", ПакетЗапроса[2].Выгрузить());
	ОплатыПоДокументу.Вставить("ДанныеОДокументе", ПакетЗапроса[6].Выбрать());
	
	РасчетыСКонтрагентамиСервер.РаспределитьОплатуКонтрагента(
		РасчетыСКонтрагентами,
		ОплатыПоДокументу,
		Отказ,
		Ложь);
	
	ДанныеОДокументе = ПакетЗапроса[6].Выбрать();
	ДанныеОДокументе.Следующий();
	
	// Дополним таблицу суммовыми разницами
	РегистрыНакопления.РасчетыСКонтрагентами.СписатьСуммовыеРазницы(
		ДанныеОДокументе,
		РасчетыСКонтрагентами,
		СуммовыеРазницы,
		Истина);
	
КонецПроцедуры

Процедура ЗаполнитьРасчетамиПоСделке(ДвиженияДокумента, РасчетыСКонтрагентами, СуммовыеРазницы)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеДокументаОплаты.Организация КАК Организация,
	|	ДанныеДокументаОплаты.Ссылка КАК Ссылка,
	|	ДанныеДокументаОплаты.Дата КАК Дата,
	|	ДанныеДокументаОплаты.ХозОперация КАК ХозОперация,
	|	ДанныеДокументаОплаты.Сделка КАК Сделка,
	|	ДанныеДокументаОплаты.Контрагент КАК Контрагент,
	|	ДанныеДокументаОплаты.Контрагент.ВидКонтрагента КАК ВидКонтрагента,
	|	ДанныеДокументаОплаты.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ДанныеДокументаОплаты.СуммаДокумента КАК Сумма,
	|	ДанныеДокументаОплаты.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	ДанныеДокументаОплаты.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ДанныеДокументаОплаты.КурсДокумента КАК КурсДокумента,
	|	ДанныеДокументаОплаты.ВалютаДоговора КАК ВалютаДоговора,
	|	ДанныеДокументаОплаты.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокументаОплаты.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокументаОплаты.ВалютаУпр КАК ВалютаУпр,
	|	ДанныеДокументаОплаты.КурсВалютыРегл КАК КурсВалютыРегл,
	|	ВЫБОР
	|		КОГДА ДанныеДокументаОплаты.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(ДанныеДокументаОплаты.Сделка КАК Документ.ЗаказНаряд).Состояние
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СостояниеЗаказНаряда,
	|	ВЫБОР
	|		КОГДА ДанныеДокументаОплаты.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(ДанныеДокументаОплаты.Сделка КАК Документ.ЗаказНаряд).ДатаЗакрытия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаЗакрытия
	|ИЗ
	|	ШапкаДокументаСКурсами КАК ДанныеДокументаОплаты
	|ГДЕ
	|	ДанныеДокументаОплаты.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)";
	
	ДанныеОбОплате = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаОплаты Из ДанныеОбОплате Цикл
		
		НоваяСтрока = РасчетыСКонтрагентами.Добавить();
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		НоваяСтрока.Организация = СтрокаОплаты.Организация;
		НоваяСтрока.Период = СтрокаОплаты.Дата;
		НоваяСтрока.Регистратор = СтрокаОплаты.Ссылка;
		НоваяСтрока.Контрагент = СтрокаОплаты.Контрагент;
		НоваяСтрока.ДоговорВзаиморасчетов = СтрокаОплаты.ДоговорВзаиморасчетов;
		
		// Определим тип расчета, документ расчета и сделку
		Если ЗначениеЗаполнено(СтрокаОплаты.Сделка) Тогда
			
			СделкаЯвляетсяЗаказом =
				Метаданные.ОпределяемыеТипы.ЗаказыДокументовРасчета.Тип.СодержитТип(ТипЗнч(СтрокаОплаты.Сделка))
				И Не (СтрокаОплаты.СостояниеЗаказНаряда = Справочники.ВидыСостоянийЗаказНарядов.Закрыт
				И СтрокаОплаты.Дата >= СтрокаОплаты.ДатаЗакрытия);
			СделкаСчетНаОплату = ОбработкаСобытийДокументаСервер.ЭтоСчетНаОплату(ТипЗнч(СтрокаОплаты.Сделка));
			СделкаЯвляетсяДокументомОплаты =
				Не (ТипЗнч(СтрокаОплаты.Сделка) = Тип("ДокументСсылка.АвансовыйОтчет")
					И СтрокаОплаты.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ПодотчетноеЛицо)
				И Метаданные.ОпределяемыеТипы.ДокументыОплаты.Тип.СодержитТип(ТипЗнч(СтрокаОплаты.Сделка))
				И Не ОбработкаСобытийДокументаСервер.ЭтоЗаказАвтомобиля(ТипЗнч(СтрокаОплаты.Сделка));
			ЭтоАванс = СделкаЯвляетсяЗаказом ИЛИ СделкаСчетНаОплату ИЛИ СделкаЯвляетсяДокументомОплаты;
			
		Иначе
			
			СделкаЯвляетсяЗаказом = Ложь;
			СделкаЯвляетсяДокументомОплаты = Ложь;
			ЭтоАванс = Истина;
			
		КонецЕсли;
		
		Если ЭтоАванс Тогда
			
			НоваяСтрока.ТипРасчета = Перечисления.ТипыРасчетов.Аванс;
			НоваяСтрока.ДокументРасчетов =
				?(СделкаЯвляетсяДокументомОплаты,
				СтрокаОплаты.Сделка,
				СтрокаОплаты.Ссылка);
			
			Если СделкаЯвляетсяЗаказом Тогда
				
				НоваяСтрока.Заказ = СтрокаОплаты.Сделка;
				
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока.ТипРасчета = Перечисления.ТипыРасчетов.Оплата;
			НоваяСтрока.ДокументРасчетов = СтрокаОплаты.Сделка;
			
		КонецЕсли;
		
		КурсВалютыВзаиморасчетов = ?(Не ЗначениеЗаполнено(СтрокаОплаты.КурсВалютыВзаиморасчетов),
					СтрокаОплаты.Дата,
					СтрокаОплаты.КурсВалютыВзаиморасчетов);
		
		НоваяСтрока.Сумма = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СтрокаОплаты.Сумма,
				СтрокаОплаты.ВалютаДокумента,
				СтрокаОплаты.КурсДокумента,
				СтрокаОплаты.ВалютаДоговора,
				КурсВалютыВзаиморасчетов),
			2);
		НоваяСтрока.СуммаУпр = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СтрокаОплаты.Сумма,
				СтрокаОплаты.ВалютаДокумента,
				СтрокаОплаты.КурсДокумента,
				СтрокаОплаты.ВалютаУпр,
				СтрокаОплаты.КурсВалютыУпр),
			2);
		НоваяСтрока.СуммаБаз = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СтрокаОплаты.Сумма,
				СтрокаОплаты.ВалютаДокумента,
				СтрокаОплаты.КурсДокумента,
				СтрокаОплаты.ВалютаРегл,
				СтрокаОплаты.КурсВалютыРегл),
			2);
		НоваяСтрока.ХозОперация = СтрокаОплаты.ХозОперация;
		НоваяСтрока.Курс = СтрокаОплаты.КурсДокумента;
		НоваяСтрока.ВалютаПлатежа = СтрокаОплаты.ВалютаДокумента;
		НоваяСтрока.ВидОперации = ?(
			ЭтоАванс,
			Перечисления.ВидыОперацийВзаиморасчетов.НачислениеДебиторскойЗадолженности,
			Перечисления.ВидыОперацийВзаиморасчетов.ПогашениеКредиторскойЗадолженности);
		НоваяСтрока.Активность = Истина;
		
		// Дополнительные данные
		НоваяСтрока.КурсВалютыВзаиморасчетов = КурсВалютыВзаиморасчетов;
		
	КонецЦикла;
	
	// Дополним таблицу суммовыми разницами
	Если ДанныеОбОплате.Количество() > 0 Тогда
		РегистрыНакопления.РасчетыСКонтрагентами.СписатьСуммовыеРазницы(
			ДанныеОбОплате[0],
			РасчетыСКонтрагентами,
			СуммовыеРазницы,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьТаблицуДоходыИРасходы(ДвиженияДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеДокументаОплаты.Ссылка КАК Ссылка,
	|	ДанныеДокументаОплаты.Дата КАК Дата,
	|	ДанныеДокументаОплаты.Организация КАК Организация,
	|	ДанныеДокументаОплаты.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ДанныеДокументаОплаты.ХозОперация КАК ХозОперация
	|ИЗ
	|	ДанныеДокументаОплаты КАК ДанныеДокументаОплаты";
	
	ДанныеЗаполнения = Запрос.Выполнить().Выбрать();
	ДанныеЗаполнения.Следующий();
	
	ДоходыИРасходы = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("ДоходыИРасходы");
	
	СуммовыеРазницы = ПолучитьЗначениеПараметраСтруктуры(
		ДвиженияДокумента,
		"СуммовыеРазницы",
		Новый ТаблицаЗначений);
	
	РегистрыНакопления.ДоходыИРасходы.ЗаполнитьСуммовыеРазницы(
		ДанныеЗаполнения,
		СуммовыеРазницы,
		ДоходыИРасходы,
		ДанныеЗаполнения.ПодразделениеКомпании);
		
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("ДоходыИРасходы", ДоходыИРасходы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", ИСТИНА);
	ПараметрыДействия.Вставить("ВалютаЗависитОтКассыККМ", ЛОЖЬ);
	
	Если ЗначениеЗаполнено(Объект.КассаКомпании) И НЕ Объект.КассаКомпании.МноговалютнаяКасса Тогда
		ПараметрыДействия.Вставить("ВалютаВзаиморасчетов", Объект.КассаКомпании.ВалютаДенежныхСредств);
	КонецЕсли;
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Получим признаки необходимости совершить пересчет суммовых показателей документа.
	ТребуетсяПересчетЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен", ЛОЖЬ);
	СуммаДокумента       = Объект.СуммаДокумента;
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
	// Пересчитаем сумму к оплате отдельно от таблицы товаров.
	Если ТребуетсяПересчетЦен Тогда
		
		СтарыйКурс = ПараметрыДействия.СтарыйКурс;
		НовыйКурс  = Объект.КурсДокумента;
		
		Если (СтарыйКурс*НовыйКурс)=0 ИЛИ СтарыйКурс=НовыйКурс Тогда
			Возврат;
		КонецЕсли;
		
		Объект.СуммаДокумента = Окр(СуммаДокумента*СтарыйКурс/НовыйКурс, 2);
		СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
		
		Для Каждого СтрокаТаблицыТовары Из Объект.Товары Цикл
			СтрокаТаблицыТовары.СебестоимостьАвтомобиля = Окр(СтрокаТаблицыТовары.СебестоимостьАвтомобиля*СтарыйКурс/НовыйКурс, 2);
			СтрокаТаблицыТовары.СуммаСкидкиБонусами     = Окр(СтрокаТаблицыТовары.СуммаСкидкиБонусами*СтарыйКурс/НовыйКурс, 2);
			СтавкаНДС = СтрокаТаблицыТовары.СтавкаНДС.Ставка;
			Если НЕ СтрокаТаблицыТовары.СебестоимостьАвтомобиля = 0 Тогда
				СтрокаТаблицыТовары.СуммаНДС = (СтрокаТаблицыТовары.СуммаВсего - СтрокаТаблицыТовары.СебестоимостьАвтомобиля) * СтавкаНДС / (100 + СтавкаНДС);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "ХозОперация".
//
// Параметры:
//  Объект - УправляемаяФорма (в случае, когда обработчик вызван для формы настроек параметров документа)
//  или ДанныеФормыСтруктура (когда обработчик вызван для формы документа).
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДатаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДокументОснованиеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Касса компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КассаКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КассаКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КассаКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект - УправляемаяФорма (в случае, когда обработчик вызван для формы настроек параметров документа)
//  или ДанныеФормыСтруктура (когда обработчик вызван для формы документа).
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	Документы.РасходныйКассовыйОрдер.ЗаполнитьПечатныеРеквизитыВыдатьИПоДокументу(Объект);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "ДоговорВзаиморасчетов".
//
// Параметры:
//  Объект - УправляемаяФорма (в случае, когда обработчик вызван для формы настроек параметров документа)
//  или ДанныеФормыСтруктура (когда обработчик вызван для формы документа).
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сделка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СделкаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Сделка) Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("Контрагент"            , Объект.Контрагент);
		Отбор.Вставить("ДоговорВзаиморасчетов" , Объект.ДоговорВзаиморасчетов);
		Отбор.Вставить("ДокументРасчетов" , Объект.Сделка);
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			МоментВремени = Новый МоментВремени(Объект.Дата, Объект.Ссылка);
		Иначе
			МоментВремени = Неопределено;
		КонецЕсли;
		Долги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(Отбор, МоментВремени, "Сумма");
		ОстатокПоСделке = Долги.Итог("Сумма");
		Объект.СуммаДокумента = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			- ОстатокПоСделке,
			Объект.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,
			Объект.Дата,
			Объект.ВалютаДокумента,
			Объект.КурсДокумента);
		СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // СделкаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Производим расчет новой суммы НДС
	ОбработкаРеквизитовДокументаСервер.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СтавкаНДСПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Производим расчет новой суммы НДС
	ОбработкаРеквизитовДокументаСервер.СтавкаНДСПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Касса ККМ".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КассаККМПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Производим приведение параметров кассового ордера в соответствии с выбранной кассой ККМ.
	ОбработкаРеквизитовДокументаСервер.КассаККМПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КассаККМПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Статья ДДС".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СтатьяДДСПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Объект.ВидОперации = Объект.СтатьяДДС.Операция;
	ВидОперацииПриИзменении(Объект)
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Статья ДДС".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВидОперацииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ЭтоВнутренниеПереводы = ПроверитьВидОперацииПеремещение(Объект.ВидОперации);
	
	Если ЭтоВнутренниеПереводы Тогда 
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Объект.ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
		Объект.Сделка = Неопределено;
		Объект.Выдать = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСостав

// Обработчик события возникающего при изменении данных реквизита "Способ зачета оплаты" в таблице "Состав".
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Неопределено - Параметры действия
Процедура СоставСпособЗачетаОплатыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Строка.СпособЗачетаОплаты = Перечисления.СпособыЗачетаАвансов.Автоматически Тогда
		Строка.ДокументРасчетов = Неопределено;
		Строка.Заказ = Неопределено;
	ИначеЕсли Строка.СпособЗачетаОплаты = Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда
		Строка.ДокументРасчетов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ расчетов" в таблице "Состав".
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Неопределено - Параметры действия
Процедура СоставДокументРасчетовПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
		
		КонтрагентИДоговорСделки = УправлениеДиалогомДокументаСервер.ИменаКонтрагентаИДоговораВзаиморасчетовПоСделке(
			Строка.ДокументРасчетов,
			Объект);
		
		Если ЕстьРеквизит(Строка.ДокументРасчетов, КонтрагентИДоговорСделки.ИмяКонтрагента) Тогда
			Объект.Контрагент = Строка.ДокументРасчетов[КонтрагентИДоговорСделки.ИмяКонтрагента];
			КонтрагентПриИзменении(Объект);
			Если ЕстьРеквизит(Строка.ДокументРасчетов, КонтрагентИДоговорСделки.ИмяДоговораВзаиморасчетов) Тогда
				Объект.ДоговорВзаиморасчетов = Строка.ДокументРасчетов[КонтрагентИДоговорСделки.ИмяДоговораВзаиморасчетов];
				ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РассчитатьСуммуПоДокументуРасчетов(Объект, Строка);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Состав".
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Неопределено - Параметры действия
Процедура СоставЗаказПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Строка.Сумма = 0 Тогда
		РассчитатьСуммуПоДокументуРасчетов(Объект, Строка);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Состав".
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТаблицыЗначений - Строка, при изменении поля которой возникло событие.
//  ИзменениеНаправленияПлатежа - Булево - Изменение направления платежа
//  ПараметрыДействия - Структура, Неопределено - Параметры действия:
//   * ОбъектЗаполнен - Булево
Процедура СоставСуммаПриИзменении(
		Объект,
		Строка,
		ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
		// Проставим ставку НДС для входящего исходящего платежа
	НоваяСтавкаНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата).ОсновнаяСтавка; 
	
	Если Строка.СтавкаНДС <> НоваяСтавкаНДС Тогда
		Строка.СтавкаНДС = НоваяСтавкаНДС;
	КонецЕсли;
	
	СоставСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // СоставСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Состав".
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Строка - СтрокаТабличнойЧасти - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Неопределено, Структура - Параметры действия:
//   * ИзменениеНаправленияПлатежа - Булево
Процедура СоставСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	Строка.СуммаНДС = Окр(Строка.Сумма * Строка.СтавкаНДС.Ставка /
		(100 + Строка.СтавкаНДС.Ставка), 2);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия.
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыПроцентСкидкиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.ПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыПроцентСкидкиСтрокиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаСкидкиСтрокиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки на товар" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.СкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСкидкаНаТоварПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаСкидкиПриИзменении()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.РасходныйКассовыйОрдер",
		"ПФ_MXL_РасходныйКассовыйОрдер",
		НСтр("ru = 'Расходный кассовый ордер'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик события формирования печатной формы.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - информация для заполнения письма при отправке печатной формы электронной почтой.
//                                     Содержит следующие поля:
//    ** Получатель - Строка, СписокЗначений, Массив - список получателей письма;
//    ** Тема - Строка - Тема письма,
//    ** Текст - Строка - Текст письма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_РасходныйКассовыйОрдер") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"ПФ_MXL_РасходныйКассовыйОрдер",
		НСтр("ru = 'Расходный кассовый ордер'"),
		ПечатьРасходныйКассовыйОрдер(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "РасходныйКассовыйОрдер"
// 
Функция ПечатьРасходныйКассовыйОрдер(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйКассовыйОрдер_РасходныйКассовыйОрдер";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати,ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РасходныйКассовыйОрдер.ПФ_MXL_РасходныйКассовыйОрдер");
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		// Получаем область шапки документа
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Документ);
		ОбластьМакета.Параметры.СуммаДокумента = Формат(Документ.СуммаДокумента,ФорматВыводаСуммы);
		
		ОбластьМакета.Параметры.ОрганизацияПоОКПО	= Документ.Организация.КодПоОКПО;
		ОбластьМакета.Параметры.КодПодразделения	= Документ.ПодразделениеКомпании.Код;
		ОбластьМакета.Параметры.РеквизитыДокументаУдостоверяющегоЛичность = Документ.ПоДокументу;
		
		Если Не ЗначениеЗаполнено(Документ.Основание) Тогда
			ОбластьМакета.Параметры.Основание = Документ.ХозОперация;
		КонецЕсли;
		
		ОбластьМакета.Параметры.КредитСубСчет		 = ?(Документ.ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(),"50.1","50.2");
		ОбластьМакета.Параметры.ДебетСубСчет		 = Документ.СтатьяДДС.КоррСчет.Код;
		СуммаПрописью 								 = РаботаСКурсамиВалют.СформироватьСуммуПрописью(Документ.СуммаДокумента, Документ.ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью		 = СуммаПрописью;
		ОбластьМакета.Параметры.СуммаПрописьюПолучил = СуммаПрописью;
		Если (Документ.ХозОперация=Справочники.ХозОперации.РасходныйКассовыйОрдер) Тогда
			ОбластьМакета.Параметры.ВТомЧисле = "НДС (" + УправлениеПечатьюПлатформа.ПолучитьПредставлениеСтавкиНДС(Документ.СтавкаНДС) + ") " 
			+ Формат(Документ.СуммаНДС, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00")+" "+Документ.ВалютаДокумента;
		КонецЕсли;	
		
		Руководитель = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Руководитель");
		ГлавныйБухгалтер = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ГлавныйБухгалтер");
		Кассир = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Кассир");
		ОбластьМакета.Параметры.Заполнить(Руководитель);
		ОбластьМакета.Параметры.Заполнить(ГлавныйБухгалтер);
		ОбластьМакета.Параметры.Заполнить(Кассир);
		
		ОбластьМакета.Параметры.Номер = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		ОбластьМакета.Параметры.Подразделение = Документ.ПодразделениеКомпании;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатьРасходныйКассовыйОрдер()

#КонецОбласти

// Проверяет возможность ввода счет-фактуры полученной на основании документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.РасходныйКассовыйОрдер - документ, для которого выполняется действие.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина, если ввод возможен, Ложь - в противном случае.
//
Функция ВозможенВводСчетФактурыПолученной(ДокументОбъект, ДополнительныеПарметры = Неопределено) Экспорт
	
	Возврат ОбработкаСобытийДокументаСервер.ДокументСодержитСтрокиСНДС(ДокументОбъект, "Товары");
	
КонецФункции

#КонецОбласти

#КонецЕсли