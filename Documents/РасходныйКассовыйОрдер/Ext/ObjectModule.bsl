// Модуль объекта документа "Расходный кассовый ордер"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Процедура - обработчик ввода на основании
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ЭтотОбъект);
	
	// Вызываем общий обработчик события
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"Товары"
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	ВзаиморасчетыПоДокументамРачетов =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	Если ВзаиморасчетыПоДокументамРачетов И Состав.Количество() = 0 Тогда
		РасчетыСКонтрагентамиСервер.ЗаполнитьСоставОплатыПоДокументуРасчетов(ЭтотОбъект, ДанныеЗаполнения, Истина);
	ИначеЕсли НЕ ЗначениеЗаполнено(Сделка) Тогда
		Сделка = ДанныеЗаполнения;
	КонецЕсли;
	Основание = ДанныеЗаполнения;
	ДокументОснование = ДанныеЗаполнения;
	
	// изменим ставку НДС, если нужно
	Если РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ВерсияОбъекта)
		И ВзаиморасчетыПоДокументамРачетов Тогда
		СуммаДокумента = Состав.Итог("Сумма");
		СтавкаНДС = Состав[0].СтавкаНДС;
		СуммаНДС = Состав.Итог("СуммаНДС");
	ИначеЕсли Не ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Инкассация")
		И ОбработкаСобытийОбъектаСервер.ВозможенВводНаОсновании(ЭтотОбъект, ДанныеЗаполнения) Тогда
		ОбработкаСобытийДокументаСервер.УстановитьСтавкуНДС(ДанныеЗаполнения, ЭтотОбъект, СуммаДокумента);
	КонецЕсли;
	
	// Заполняем специфические для данной операции реквизиты
	Если НЕ (ЗначениеЗаполнено(ДанныеЗаполнения) И (ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаРасходДС")
		ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер"))) Тогда
		Если НЕ ЗначениеЗаполнено(Сделка) Тогда
			Сделка = ДанныеЗаполнения;
		КонецЕсли;
		Основание = Сделка;
		ДокументОснование = Сделка;
	КонецЕсли;
	
	КурсВалютыВзаиморасчетов = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалютыВзаиморасчетов(
		ЭтотОбъект,
		?(НЕ ЗначениеЗаполнено(ДоговорВзаиморасчетов), Неопределено, ДоговорВзаиморасчетов),
		?(НЕ ЗначениеЗаполнено(ДокументОснование), Неопределено, ДокументОснование)
	);
	
	Если ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.ВыплатаЗарплаты") Тогда	
		ХозОперация=Справочники.ХозОперации.ВыплатаЗарплатыРаботнику;
	ИначеЕсли ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		ХозОперация=Справочники.ХозОперации.ВыдачаДенежныхСредствПодотчетнику;
	КонецЕсли;

	Если ЗначениеЗаполнено(КассаККМ) Тогда
		Документы.РасходныйКассовыйОрдер.КассаККМПриИзменении(ЭтотОбъект,ДополнительныеСвойства.ПараметрыДействия);
	КонецЕсли;
	Если ЗначениеЗаполнено(КассаКомпании) Тогда
		Документы.РасходныйКассовыйОрдер.КассаКомпанииПриИзменении(ЭтотОбъект,ДополнительныеСвойства.ПараметрыДействия);
	КонецЕсли;
	
	Если ДляПробитияНаФР Тогда
		ТипРасчета = Документы.РасходныйКассовыйОрдер.ТипРасчетаПоДокументу(ЭтотОбъект);
	КонецЕсли;
	
	ПечататьАртикулНоменклатуры = Организация.ПечататьАртикулНоменклатурыВЧеках;
	Документы.РасходныйКассовыйОрдер.ЗаполнитьПечатныеРеквизитыВыдатьИПоДокументу(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ЭтотОбъект, Истина);
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	Товары.Очистить();
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если СуммаДокумента < 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Сумма документа не должна быть отрицательной'"),
			,
			"СуммаДокумента",
			,
			Отказ
		);
	КонецЕсли;

	Если Товары.Количество() > 0 И ДляПробитияНаФР Тогда
		
		ТекстСообщения = "";
		Если НЕ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(ЭтотОбъект, Товары, ПризнакСпособаРасчета,ТекстСообщения) Тогда
			ТекстСообщения = НСтр("ru='Неверно заполнен ""Способ расчета"".'") + " " + ТекстСообщения;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ПризнакСпособаРасчета", , Отказ);
		КонецЕсли;
		
		Если СуммаДокумента > 0 И Товары.Итог("СуммаОплаты") = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Необходимо произвести пропорциональное распределение суммы вносимой оплаты между предметами платежа'"),
				, , ,
				Отказ
			);
		ИначеЕсли СуммаДокумента <> Товары.Итог("СуммаОплаты") Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр(
					"ru='Неверно заполнена колонка ""Сумма оплаты"" в табличной части товары, необходимо распределить сумму оплаты'"
				),
				, , ,
				Отказ
			);
		КонецЕсли;
		
	КонецЕсли;
	
	Если РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ВерсияОбъекта)
		И РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов) Тогда
		РасчетыСКонтрагентамиСервер.ПроизвестиПроверкуЗаполненияСостава(ЭтотОбъект, Отказ);
	ИначеЕсли НЕ ОбработкаСобытийДокументаСервер.ПроверкаСоответствияКонтрагентаДоговораПоСделке(
		ЭтотОбъект, Сделка, Контрагент, ДоговорВзаиморасчетов, ДополнительныеСвойства) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Контрагент и договор взаиморасчетов документа Сделка не соответствуют указанным в шапке документа'"),
			,
			"Сделка",
			,
			Отказ);
		
	КонецЕсли;
	
	Если ДляПробитияНаФР Тогда	
		ТекстОшибки = УправлениеДиалогомДокументаСервер.ПроверитьКорректностьЗаполненияТелефонEmail(ТелефонEmailПокупателя);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ТелефонEmailПокупателя", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Очистим табличную часть "Состав"
	Если Не РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов) Тогда
		Состав.Очистить();
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если РасчетыСКонтрагентамиСервер.ЕстьЗачетАвансаПоДокументу(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(Дата);
	
	// приходуем деньги в кассу
	НаборЗаписейДС=Движения.ДенежныеСредстваКомпании;
	НаборЗаписейДС.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДС.РежимПроведения=РежимПроведения;
	НаборЗаписейДС.СтруктурнаяЕдиница=КассаКомпании;
	НаборЗаписейДС.Валюта=Неопределено;
	НаборЗаписейДС.СтатьяДДС=СтатьяДДС;
	НаборЗаписейДС.Сумма=СуммаДокумента;
	Отказ=НЕ НаборЗаписейДС.Расход() ИЛИ Отказ;
	
	// Если используем подключаемой оборудование проведем деньги по кассе ККМ
	Если ДляПробитияНаФР И ЗначениеЗаполнено(КассаККМ) Тогда
		
		НаборЗаписейКассыККМ=Движения.КассыККМ;
		НаборЗаписейКассыККМ.ДокументОбъект 	= ЭтотОбъект;
		НаборЗаписейКассыККМ.РежимПроведения 	= РежимПроведения;
		НаборЗаписейКассыККМ.КассаККМ 			= КассаККМ;
		НаборЗаписейКассыККМ.ТипОплаты	 		= Перечисления.ТипыОплатыККТ.Наличные;
		НаборЗаписейКассыККМ.Сумма 			    = СуммаДокумента;  
		НаборЗаписейКассыККМ.ДополнительныеСвойства.Вставить("РазрешитьОтрицательныеОстаткиПоКассе", Истина);

		Отказ=НЕ НаборЗаписейКассыККМ.Расход() ИЛИ Отказ;
		
		НаборЗаписейКассыККМ=Движения.КассыККМ;
		НаборЗаписейКассыККМ.ДокументОбъект 	= ЭтотОбъект;
		НаборЗаписейКассыККМ.РежимПроведения 	= РежимПроведения;
		НаборЗаписейКассыККМ.КассаККМ 			= КассаККМ;
		НаборЗаписейКассыККМ.ТипОплаты	 		= Перечисления.ТипыОплатыККТ.Наличные;
		НаборЗаписейКассыККМ.Сумма 			    = СуммаДокумента;
		Отказ=НЕ НаборЗаписейКассыККМ.Приход() ИЛИ Отказ;
		
	КонецЕсли;
	
	ЭтоВнутренниеПереводы = Документы.РасходныйКассовыйОрдер.ПроверитьВидОперацииПеремещение(ВидОперации);
	Документы.РасходныйКассовыйОрдер.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	Если Не ЭтоВнутренниеПереводы Тогда  
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
			РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
		
		// проводим взаиморасчеты
		Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
			Документы.РасходныйКассовыйОрдер.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
			Документы.РасходныйКассовыйОрдер.СформироватьТаблицуДоходыИРасходы(ДополнительныеСвойства);
		Иначе
			НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыКомпании;
			НаборЗаписейВзаиморасчеты.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейВзаиморасчеты.РежимПроведения = РежимПроведения;
			НаборЗаписейВзаиморасчеты.Контрагент = Контрагент;
			НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
			НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок = 
				СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
			Если ЗначениеЗаполнено(Сделка)Тогда
				НаборЗаписейВзаиморасчеты.Сделка = Сделка;
				ТипСделка = ТипЗнч(Сделка);
				Если ЗаказыСервер.ПолучитьТипыСделок(Истина).СодержитТип(ТипСделка) Тогда
					НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем = Истина;
				ИначеЕсли ЗаказыСервер.ПолучитьТипыСделок(Ложь).СодержитТип(ТипСделка) Тогда
					НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем = Ложь;
				Иначе
					НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем = Неопределено;
				КонецЕсли;
			Иначе
				НаборЗаписейВзаиморасчеты.Сделка = Неопределено;
			КонецЕсли; 
			НаборЗаписейВзаиморасчеты.Сумма = СуммаДокумента;
			НаборЗаписейВзаиморасчеты.Валюта = Неопределено;
			НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц = 0;
			Отказ = НЕ НаборЗаписейВзаиморасчеты.Приход() ИЛИ Отказ;
			СуммаДоходаРасходаСуммовыхРазниц=НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
			// доходы и расходы по суммовым разницам
			Если СуммаДоходаРасходаСуммовыхРазниц <> 0 Тогда
				НаборЗаписейДиР = Движения.ДоходыИРасходы;
				НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
				// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
				Если ВедетсяБалансПоПодразделению Тогда
					НаборЗаписейДиР.Подразделение = ДоговорВзаиморасчетов.ПодразделениеКомпании;
				КонецЕсли;
				НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
				НаборЗаписейДиР.ВУпрВалюте = Истина;
				Если СуммаДоходаРасходаСуммовыхРазниц<0 Тогда
					НаборЗаписейДиР.Расход = -СуммаДоходаРасходаСуммовыхРазниц;
				Иначе
					НаборЗаписейДиР.Доход = СуммаДоходаРасходаСуммовыхРазниц;
				КонецЕсли;
				Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;

	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	ПодразделениеКасса = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(КассаКомпании.ПодразделениеКомпании, Дата);
	ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ДоговорВзаиморасчетов.ПодразделениеКомпании, Дата);
	БалансовыеПодразделенияНеРавны = (ПодразделениеДоговорВзаиморасчетов<>ПодразделениеКасса);
	Если ВедетсяБалансПоПодразделению И БалансовыеПодразделенияНеРавны И  Не ЭтоВнутренниеПереводы Тогда
		НаборЗаписейДиР = Движения.ДоходыИРасходы;
		
		НаборЗаписейДиР.ДокументОбъект			= ЭтотОбъект;
		НаборЗаписейДиР.Подразделение			= КассаКомпании.ПодразделениеКомпании;
		НаборЗаписейДиР.СтатьяДоходовИРасходов	= Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
		НаборЗаписейДиР.ВУпрВалюте				= Ложь;
		НаборЗаписейДиР.Доход					= СуммаДокумента;
		Отказ = НЕ НаборЗаписейДиР.Расход() ИЛИ Отказ;
		
		НаборЗаписейДиР.ДокументОбъект			= ЭтотОбъект;
		НаборЗаписейДиР.Подразделение			= ДоговорВзаиморасчетов.ПодразделениеКомпании;
		НаборЗаписейДиР.СтатьяДоходовИРасходов	= Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
		НаборЗаписейДиР.ВУпрВалюте				= Ложь;
		НаборЗаписейДиР.Доход					= СуммаДокумента;
		Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
	КонецЕсли;	
	
	Если ЭтоВнутренниеПереводы Тогда 
		НаборЗаписейДиР = Движения.ДоходыИРасходы;
		НаборЗаписейДиР.ДокументОбъект			= ЭтотОбъект;  
		НаборЗаписейДиР.Подразделение			= КассаКомпании.ПодразделениеКомпании;
       	НаборЗаписейДиР.СтатьяДоходовИРасходов	= Справочники.СтатьиДоходовИРасходов.ПереводыВПути;
		НаборЗаписейДиР.ВУпрВалюте				= Ложь;
		НаборЗаписейДиР.Расход					= СуммаДокумента;
		Отказ =  НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
	КонецЕсли;

	// Зафиксируем наличную оплату
	Если ХозОперация = Справочники.ХозОперации.РасходныйКассовыйОрдер И НЕ ЭтоВнутренниеПереводы Тогда
		НаборЗаписейНаличныеРасчеты=Движения.НаличныеРасчеты;
		НаборЗаписейНаличныеРасчеты.ДокументОбъект 	= ЭтотОбъект;
		НаборЗаписейНаличныеРасчеты.РежимПроведения 	= РежимПроведения;
		НаборЗаписейНаличныеРасчеты.РежимРасходаСредств = Истина;
		Отказ = НЕ НаборЗаписейНаличныеРасчеты.Приход() ИЛИ Отказ;
	КонецЕсли;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
		
	// двигаем границу последовательности взаиморасчетов
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	
	// проведение в Платежный календарь
	НаборЗаписей = Движения.ПлатежныйКалендарь;
	НаборЗаписей.ДокументОбъект = Ссылка;
	НаборЗаписей.Поступление    = Ложь;
	НаборЗаписей.Факт();
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Инкассация"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Инкассация(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИзменилсяКонтрагент = (Контрагент <> ДокументОснование.Инкассатор);
	ИзменилсяДоговор    = (ДоговорВзаиморасчетов <> ДокументОснование.ДоговорВзаиморасчетовИнкассатор);
		
	Контрагент				= ДокументОснование.Инкассатор;
	ДоговорВзаиморасчетов	= ДокументОснование.ДоговорВзаиморасчетовИнкассатор;
		
	Если ИзменилсяКонтрагент Тогда
		Документы.РасходныйКассовыйОрдер.КонтрагентПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	КонецЕсли;
		
	Если ИзменилсяДоговор Тогда
		Документы.РасходныйКассовыйОрдер.ДоговорВзаиморасчетовПриИзменении(ЭтотОбъект,
			ДополнительныеСвойства.ПараметрыДействия);
	КонецЕсли;
	
	СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
	
	Оплаты = ДокументОснование.Оплаты.Выгрузить();
	Оплаты.Свернуть("ТипОплаты", "Сумма,СуммаВозврат");

	СтрокаОплатНаличными = Оплаты.Найти(Перечисления.ТипыОплатыККТ.Наличные, "ТипОплаты");
	Если СтрокаОплатНаличными = Неопределено Тогда
		СуммаДокумента = 0;
	Иначе
		СуммаДокумента = СтрокаОплатНаличными.Сумма + СтрокаОплатНаличными.СуммаВозврат;
	КонецЕсли;
	
	СуммаДокумента	= РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДокумента, ДокументОснование.ВалютаДокумента,
		ДокументОснование.КурсДокумента, ВалютаДокумента, Дата);
	Документы.РасходныйКассовыйОрдер.СуммаДокументаПриИзменении(ЭтотОбъект,ДополнительныеСвойства.ПараметрыДействия);
	КурсВалютыВзаиморасчетов = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалютыВзаиморасчетов(ЭтотОбъект,
		ДоговорВзаиморасчетов, ДокументОснование);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Инкассация()

// Производит заполнение объекта на основании документа "Обслуживание актива"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ОбслуживаниеАктива(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;

	// Вычислим сумму
	СуммаДокумента	= РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ДокументОснование.СтоимостьСтороннихУслуг,
		ДокументОснование.ВалютаДокумента, ДокументОснование.КурсДокумента, ВалютаДокумента, Дата);
	Документы.РасходныйКассовыйОрдер.СуммаДокументаПриИзменении(ЭтотОбъект,ДополнительныеСвойства.ПараметрыДействия);
	
	// Статья ДДС - Оплата поставщику
	СтатьяДДС		= Справочники.СтатьиДДС.ОплатаПоставщику;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ОбслуживаниеАктива()

// Производит заполнение объекта на основании документа "Возврат от покупателя"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВозвратОтПокупателя(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;

	// Вычислим сумму
	СуммаДокумента	= РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ДокументОснование.СуммаДокумента,
		ДокументОснование.ВалютаДокумента, ДокументОснование.КурсДокумента, ВалютаДокумента, Дата);
	Документы.РасходныйКассовыйОрдер.СуммаДокументаПриИзменении(ЭтотОбъект,
		ДополнительныеСвойства.ПараметрыДействия);
	
	// Статья ДДС - Возврат покупателю
	СтатьяДДС = Справочники.СтатьиДДС.ВозвратПокупателю;
		
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ВозвратОтПокупателя()

// Производит заполнение объекта на основании документа "Приходный кассовый ордер"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПриходныйКассовыйОрдер(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтатьяДДС = Справочники.СтатьиДДС.ВозвратПокупателю;
	
	// Изменим валюту для перерасчета
	ВалютаДокумента = ДокументОснование.ВалютаДокумента;
	Документы.РасходныйКассовыйОрдер.ВалютаДокументаПриИзменении(ЭтотОбъект,
		ДополнительныеСвойства.ПараметрыДействия);
	
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	
	Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам
		И РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ВерсияОбъекта) Тогда
		
		// Будем заполнять таблицу по движению РКО
		РасчетыСКонтрагентамиСервер.ЗаполнитьВзаиморасчетыПоДокументуОплаты(ЭтотОбъект, ДанныеЗаполнения);
		СуммаДокумента = Макс(Состав.Итог("Сумма"),0);
		Документы.ПриходныйКассовыйОрдер.СуммаДокументаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
		
		// Возвращаем признак возможности дальнейшей обработки события
		Возврат Истина;
		
	КонецЕсли;
	
	СтруктураОтбора	= Новый Структура();
	СтруктураОтбора.Вставить("Контрагент", ДокументОснование.Контрагент);
	СтруктураОтбора.Вставить("ДоговорВзаиморасчетов", ДокументОснование.ДоговорВзаиморасчетов);
	
	Если ЗначениеЗаполнено(ДокументОснование.Сделка) Тогда
		СтруктураОтбора.Вставить("ДокументРасчетов", ДокументОснование.Сделка);
		Сделка = ДокументОснование.Сделка;
	КонецЕсли;
	
	тзДолги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(СтруктураОтбора);
	
	Если ВалютаДокумента = ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов Тогда
		Долг = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(-тзДолги.Итог("Сумма"), ДокументОснование.ДоговорВзаиморасчетов.
			ВалютаВзаиморасчетов, ДокументОснование.Дата, ВалютаДокумента, ДокументОснование.Дата, РежимОкругления.Окр15как20);
	ИначеЕсли ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
		Долг = -тзДолги.Итог("СуммаБаз");
	Иначе
		Долг = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(-тзДолги.Итог("СуммаУпр"),
			Константы.ВалютаУправленческогоУчетаКомпании.Получить(), ДокументОснование.Дата, ВалютаДокумента,
			ДокументОснование.Дата, РежимОкругления.Окр15как20);
	КонецЕсли;
		
	СуммаДокумента	= Макс(Долг,0);
	Документы.РасходныйКассовыйОрдер.СуммаДокументаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПриходныйКассовыйОрдер()

// Производит заполнение объекта на основании документа "Заявка на расход ДС"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаРасходДС(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.ВыдачаДенежныхСредствПодотчетнику;
	
	СуммаДокумента	= РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ДокументОснование.СуммаДокумента,
		ДокументОснование.ВалютаДокумента, ДокументОснование.КурсДокумента, ВалютаДокумента, Дата);
	Документы.РасходныйКассовыйОрдер.СуммаДокументаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	// В зависимости от хоз операции документа основания будем подставлять Кассу или нет.
	Если ДокументОснование.ХозОперация = Справочники.ХозОперации.ЗаявкаНаРасходИзКассы Тогда
		КассаКомпании = ДокументОснование.СтруктурнаяЕдиница;
	КонецЕсли;
	
	СделкаОснования = ДокументОснование.Сделка;
	Если ЗначениеЗаполнено(СделкаОснования) Тогда
		РасчетыСКонтрагентамиСервер.ЗаполнитьСоставОплатыПоДокументуРасчетов(ЭтотОбъект, СделкаОснования);
	КонецЕсли;
	
	Если Состав.Количество() = 0 Тогда
		Сделка = СделкаОснования;
	КонецЕсли;
	ДокументПланирования = ДокументОснование;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаявкаНаРасходДС()

// Производит заполнение объекта на основании документа "Поступление товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПоступлениеКомиссия = (ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия);
	
	// Изменим валюту для перерасчета
	ВалютаДокумента = ДокументОснование.ВалютаДокумента;
	Документы.РасходныйКассовыйОрдер.ВалютаДокументаПриИзменении(ЭтотОбъект,
		ДополнительныеСвойства.ПараметрыДействия);
	
	// Вычислим сумму
	СтруктураОтбора = Новый Структура(); 
	СтруктураОтбора.Вставить("Контрагент", ДокументОснование.ДоговорВзаиморасчетов.Владелец);
	СтруктураОтбора.Вставить("ДоговорВзаиморасчетов", ДокументОснование.ДоговорВзаиморасчетов);
	Если НЕ ПоступлениеКомиссия Тогда
		СтруктураОтбора.Вставить("ДокументРасчетов", ДокументОснование);
	КонецЕсли;
	
	тзДолги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(СтруктураОтбора, ТекущаяДатаСеанса());
	
	Если ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("Сумма"),
			ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДокументОснование.КурсДокумента,
			ВалютаДокумента, КурсДокумента);
	ИначеЕсли ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
		ОстатокПоСделке = тзДолги.Итог("СуммаБаз");
	Иначе
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("СуммаУпр"),
			Константы.ВалютаУправленческогоУчетаКомпании.Получить(), ДокументОснование.КурсВалютыУпр,
			ВалютаДокумента, КурсДокумента);
	КонецЕсли;
	
	СуммаДокумента = Макс(-ОстатокПоСделке,0);
	Документы.РасходныйКассовыйОрдер.СуммаДокументаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	// Статья ДДС - Оплата поставщику
	СтатьяДДС = Справочники.СтатьиДДС.ОплатаПоставщику;
		
		
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеТоваров()

// Производит заполнение объекта на основании документа "Авансовый отчет"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_АвансовыйОтчет(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем обработчик заполнения на основании документа "ПоступлениеТоваров"
	Возврат ОбработкаЗаполнения_ПоступлениеТоваров(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_АвансовыйОтчет()

// Производит заполнение объекта на основании документа "Заказ поставщику"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПоставщику(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производится проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Изменим валюту для перерасчета
	ВалютаДокумента = ДокументОснование.ВалютаДокумента;
	Документы.РасходныйКассовыйОрдер.ВалютаДокументаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПоставщикамОстатки.СуммаОстаток КАК СуммаЗаказа,
	|	ЗаказыПоставщикамОстатки.СуммаУпрОстаток КАК СуммаЗаказаУпр
	|ПОМЕСТИТЬ ТаблицаЗаказов
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику = &Заказ) КАК ЗаказыПоставщикамОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	-ВзаиморасчетыКомпанииОстатки.СуммаОстаток,
	|	-ВзаиморасчетыКомпанииОстатки.СуммаУпрОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(
	|			,
	|			Заказ ССЫЛКА Документ.ЗаказПоставщику
	|				И Заказ = &Заказ) КАК ВзаиморасчетыКомпанииОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ТаблицаЗаказов.СуммаЗаказа) КАК СуммаЗаказа,
	|	СУММА(ТаблицаЗаказов.СуммаЗаказаУпр) КАК СуммаЗаказаУпр
	|ИЗ
	|	ТаблицаЗаказов КАК ТаблицаЗаказов
	|;
	|
	|//////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПоставщикам.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщикам.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ЗаказыПоставщикам.Заказано) КАК Количество,
	|	СУММА(ЗаказыПоставщикам.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ЗаказыПоставщикамОстатки
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|ГДЕ
	|	ЗаказыПоставщикам.Период <= &Момент
	|	И НЕ ЗаказыПоставщикам.Регистратор ССЫЛКА Документ.ПоступлениеТоваров
	|	И ЗаказыПоставщикам.ЗаказПоставщику = &Заказ
	|	И ЗаказыПоставщикам.Контрагент = &Контрагент
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПоставщикам.Номенклатура,
	|	ЗаказыПоставщикам.ХарактеристикаНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	(НЕ СУММА(ЗаказыПоставщикам.Заказано) = 0 ИЛИ (НЕ СУММА(ЗаказыПоставщикам.Сумма) = 0))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПоставщикамОстатки.Количество КАК Количество,
	|	ЗаказыПоставщикамОстатки.Сумма КАК СуммаЗаказа,
	|	ЕСТЬNULL(ЗаказПоставщикуТовары.Количество * ЗаказПоставщикуТовары.Коэффициент, 1) КАК КоличествоБазовое,
	|	ЕСТЬNULL(ЗаказПоставщикуТовары.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЗаказПоставщикуТовары.Коэффициент, 1) КАК Коэффициент,
	|	ЕСТЬNULL(ЗаказПоставщикуТовары.СтавкаНДС, ЗаказыПоставщикамОстатки.Номенклатура.СтавкаНДС) КАК СтавкаНДС
	|ИЗ
	|	ЗаказыПоставщикамОстатки КАК ЗаказыПоставщикамОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|		ПО (ЗаказПоставщикуТовары.Ссылка = &Заказ)
	|			И ЗаказыПоставщикамОстатки.Номенклатура = ЗаказПоставщикуТовары.Номенклатура
	|			И ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры = ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(Количество),
	|	СУММА(КоличествоБазовое),
	|	МАКСИМУМ(СуммаЗаказа)
	|ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Заказ", ДокументОснование);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Момент", КонецДня(Дата));
	СуммаСделки    = 0;
	СуммаСделкиУпр = 0;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Выборка = МассивРезультатов[1].Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СуммаСделки    = Выборка.СуммаЗаказа;
		СуммаСделкиУпр = Выборка.СуммаЗаказаУпр;
		
	КонецЕсли;
		
	Если ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаСделки,
			ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДокументОснование.КурсДокумента,
			ВалютаДокумента, КурсДокумента);
	Иначе
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаСделкиУпр,
			Константы.ВалютаУправленческогоУчетаКомпании.Получить(), КурсВалютыУпр, ВалютаДокумента, КурсДокумента);
	КонецЕсли;
	
	СуммаДокумента = Макс(ОстатокПоСделке,0);
	Документы.РасходныйКассовыйОрдер.СуммаДокументаПриИзменении(ЭтотОбъект,ДополнительныеСвойства.ПараметрыДействия);
	
	// Статья ДДС - Оплата поставщику
	СтатьяДДС = Справочники.СтатьиДДС.ОплатаПоставщику;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПоставщику()

// Производит заполнение объекта на основании документа "Отчет комитенту"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ОтчетКомитенту(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;

	// Изменим валюту для перерасчета
	ВалютаДокумента = ДокументОснование.ВалютаДокумента;
	Документы.РасходныйКассовыйОрдер.ВалютаДокументаПриИзменении(ЭтотОбъект,
		ДополнительныеСвойства.ПараметрыДействия);
	
	// Вычислим сумму
	СтруктураОтбора = Новый Структура(); 
	СтруктураОтбора.Вставить("Контрагент", ДокументОснование.ДоговорВзаиморасчетов.Владелец);
	СтруктураОтбора.Вставить("ДоговорВзаиморасчетов", ДокументОснование.ДоговорВзаиморасчетов);
	СтруктураОтбора.Вставить("ДокументРасчетов", ДокументОснование);
	
	тзДолги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(СтруктураОтбора, ТекущаяДатаСеанса());
	
	Если ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("Сумма"),
			ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДокументОснование.КурсДокумента,
			ВалютаДокумента, КурсДокумента);
	ИначеЕсли ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
		ОстатокПоСделке = тзДолги.Итог("СуммаБаз");
	Иначе
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("СуммаУпр"),
			Константы.ВалютаУправленческогоУчетаКомпании.Получить(), ДокументОснование.КурсВалютыУпр,
			ВалютаДокумента, КурсДокумента);
	КонецЕсли;
	
	СуммаДокумента = Макс(-ОстатокПоСделке,0);
	Документы.РасходныйКассовыйОрдер.СуммаДокументаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	// Статья ДДС - Оплата поставщику
	СтатьяДДС = Справочники.СтатьиДДС.ОплатаПоставщику;
		
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ОтчетКомитенту()

// Производит заполнение объекта на основании документа "Поступление доп. расходов"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеДопРасходов(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем обработчик заполнения на основании документа "ПоступлениеТоваров"
	Возврат ОбработкаЗаполнения_ПоступлениеТоваров(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеДопРасходов()

// Производит заполнение объекта на основании документа "Счет от поставщика"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СчетОтПоставщика(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтатьяДДС = Справочники.СтатьиДДС.ОплатаПоставщику;
	
	Если ДанныеЗаполнения.ВалютаДокумента <> ВалютаДокумента Тогда
		
		СуммаДокумента = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ДанныеЗаполнения.СуммаДокумента,
			ДанныеЗаполнения.ВалютаДокумента,
			ДанныеЗаполнения.КурсДокумента,
			ВалютаДокумента,
			Дата,
			РежимОкругления.Окр15как20
		);
		
	КонецЕсли;
	
	ОснованиеСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ДокументОснование");
	Если ТипЗнч(ОснованиеСчета) = Тип("ДокументСсылка.ЗаказПоставщику")
		ИЛИ ТипЗнч(ОснованиеСчета) = Тип("ДокументСсылка.ЗаказПоставщикуНаАвтомобиль")
		ИЛИ ТипЗнч(ОснованиеСчета) = Тип("ДокументСсылка.ПоступлениеАвтомобилей")
		ИЛИ ТипЗнч(ОснованиеСчета) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		
		РасчетыСКонтрагентамиСервер.ЗаполнитьСоставОплатыПоДокументуРасчетов(ЭтотОбъект, ОснованиеСчета);
		Сделка = ОснованиеСчета;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для правильного определения взаиморасчетов сделка была заменена");
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_СчетОтПоставщика()

// Производит заполнение объекта на основании документа "Возврат от покупателя автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВозвратОтПокупателяАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СделкаДокумента = ДанныеЗаполнения;
	ВзаиморасчетыПоДокументамРачетов = РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(
		ДокументОснование.ДоговорВзаиморасчетов);
	
	// Проверим сумму долга
	Запрос = Новый Запрос;
	Если ВзаиморасчетыПоДокументамРачетов Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	-РасчетыСКонтрагентамиОстаткиИОбороты.СуммаОборот КАК Сумма,
		|	-РасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрОборот КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.РасчетыСКонтрагентами.Обороты(
		|			,
		|			,
		|			,
		|			Контрагент = &Контрагент
		|				И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
		|				И (ДокументРасчетов = &Сделка
		|					ИЛИ ДокументРасчетов.ДокументОснование = &Сделка)) КАК РасчетыСКонтрагентамиОстаткиИОбороты
		|ГДЕ
		|	РасчетыСКонтрагентамиОстаткиИОбороты.СуммаОборот < 0";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	-ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаОборот КАК Сумма,
		|	-ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрОборот КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыКомпании.Обороты(
		|			,
		|			,
		|			,
		|			Контрагент = &Контрагент
		|				И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
		|				И (Сделка = &Сделка
		|					ИЛИ Сделка.ДокументОснование = &Сделка)) КАК ВзаиморасчетыКомпанииОстаткиИОбороты
		|ГДЕ
		|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаОборот < 0";
		Если ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование) Тогда
			СделкаДокумента = ДанныеЗаполнения.ДокументОснование;
		КонецЕсли;
	КонецЕсли;
	Запрос.УстановитьПараметр("Контрагент",            ДокументОснование.Контрагент);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", ДокументОснование.ДоговорВзаиморасчетов);
	Запрос.УстановитьПараметр("Сделка", СделкаДокумента);
	
	тзОплаты = Запрос.Выполнить().Выгрузить();
	
	Если ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		Долг = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзОплаты.Итог("Сумма"),
			ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, Дата, ВалютаДокумента, Дата,
			РежимОкругления.Окр15как20);
	Иначе
		Долг = тзОплаты.Итог("СуммаУпр");
		Долг = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Долг, Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
			Дата, ВалютаДокумента,
			?(НЕ ЗначениеЗаполнено(КурсДокумента), Дата, КурсДокумента), РежимОкругления.Окр15как20);
	КонецЕсли;
	
	СуммаСделки    = ДанныеЗаполнения.СуммаДокумента;
	
	Если Долг < СуммаСделки Тогда
		СуммаДокумента = Макс(Долг, 0);
	КонецЕсли;
	
	Если ВзаиморасчетыПоДокументамРачетов Тогда
		РасчетыСКонтрагентамиСервер.ЗаполнитьСоставОплатыПоДокументуРасчетов(ЭтотОбъект, СделкаДокумента, Истина);
	Иначе
		Сделка = СделкаДокумента;
	КонецЕсли;
	
	// Статья ДДС - Возврат покупателю
	СтатьяДДС = Справочники.СтатьиДДС.ВозвратПокупателю;
		
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ВозвратОтПокупателяАвтомобилей()

// Производит заполнение объекта на основании документа "Отчет комитенту за автомобили"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ОтчетКомитентуЗаАвтомобили(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;

	// Изменим валюту для перерасчета
	ВалютаДокумента = ДокументОснование.ВалютаДокумента;
	Документы.РасходныйКассовыйОрдер.ВалютаДокументаПриИзменении(ЭтотОбъект,
		ДополнительныеСвойства.ПараметрыДействия);
	
	// Вычислим сумму
	СтруктураОтбора = Новый Структура(); 
	СтруктураОтбора.Вставить("Контрагент", ДокументОснование.ДоговорВзаиморасчетов.Владелец);
	СтруктураОтбора.Вставить("ДоговорВзаиморасчетов", ДокументОснование.ДоговорВзаиморасчетов);
	СтруктураОтбора.Вставить("ДокументРасчетов", ДокументОснование);
	
	тзДолги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(СтруктураОтбора, ТекущаяДатаСеанса());
	
	Если ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("Сумма"),
			ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДокументОснование.КурсДокумента,
			ВалютаДокумента, КурсДокумента);
	ИначеЕсли ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
		ОстатокПоСделке = тзДолги.Итог("СуммаБаз");
	Иначе
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("СуммаУпр"),
			Константы.ВалютаУправленческогоУчетаКомпании.Получить(), ДокументОснование.КурсВалютыУпр,
			ВалютаДокумента, КурсДокумента);
	КонецЕсли;
	
	СуммаДокумента = Макс(-ОстатокПоСделке,0);
	Документы.РасходныйКассовыйОрдер.СуммаДокументаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	// Статья ДДС - Оплата поставщику
	СтатьяДДС = Справочники.СтатьиДДС.ОплатаПоставщику;
		
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ОтчетКомитентуЗаАвтомобили()

// Производит заполнение объекта на основании документа "Поступление автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПоступлениеКомиссия = (ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилейКомиссия);
	
	// Изменим валюту для перерасчета
	ВалютаДокумента = ДокументОснование.ВалютаДокумента;
	Документы.РасходныйКассовыйОрдер.ВалютаДокументаПриИзменении(ЭтотОбъект,
		ДополнительныеСвойства.ПараметрыДействия);
	
	// Вычислим сумму
	СтруктураОтбора = Новый Структура(); 
	СтруктураОтбора.Вставить("Контрагент", ДокументОснование.ДоговорВзаиморасчетов.Владелец);
	СтруктураОтбора.Вставить("ДоговорВзаиморасчетов", ДокументОснование.ДоговорВзаиморасчетов);
	
	Если НЕ ПоступлениеКомиссия Тогда
		СтруктураОтбора.Вставить("ДокументРасчетов", ДокументОснование);
	КонецЕсли;
	
	тзДолги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(СтруктураОтбора, ТекущаяДатаСеанса());
	
	Если ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("Сумма"),
			ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДокументОснование.КурсДокумента,
			ВалютаДокумента, КурсДокумента);
	ИначеЕсли ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
		ОстатокПоСделке = тзДолги.Итог("СуммаБаз");
	Иначе
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("СуммаУпр"),
			Константы.ВалютаУправленческогоУчетаКомпании.Получить(), ДокументОснование.КурсВалютыУпр,
			ВалютаДокумента, КурсДокумента);
	КонецЕсли;
	
	СуммаДокумента = Макс(- ОстатокПоСделке,0);
	Документы.РасходныйКассовыйОрдер.СуммаДокументаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	// Статья ДДС - Оплата поставщику
	СтатьяДДС = Справочники.СтатьиДДС.ОплатаПоставщику;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеАвтомобилей()

// Производит заполнение объекта на основании документа "Заказ поставщику на автомобиль"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПоставщикуНаАвтомобиль(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Изменим валюту для перерасчета
	ВалютаДокумента = ДокументОснование.ВалютаДокумента;
	Документы.РасходныйКассовыйОрдер.ВалютаДокументаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВложеннаяТаблица.СуммаЗаказа) КАК СуммаЗаказа,
	|	СУММА(ВложеннаяТаблица.СуммаЗаказаУпр) КАК СуммаЗаказаУпр
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыПоставщикамОстатки.СуммаОстаток КАК СуммаЗаказа,
	|		ЗаказыПоставщикамОстатки.СуммаУпрОстаток КАК СуммаЗаказаУпр
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикамНаАвтомобили.Остатки(, ЗаказПоставщику = &Заказ) КАК ЗаказыПоставщикамОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		-РасчетыСКонтрагентамиОстатки.СуммаОстаток,
	|		-РасчетыСКонтрагентамиОстатки.СуммаУпрОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСКонтрагентами.Остатки(, Заказ ССЫЛКА Документ.ЗаказПоставщикуНаАвтомобиль И Заказ = &Заказ) КАК РасчетыСКонтрагентамиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		-ВзаиморасчетыКомпанииОстатки.СуммаОстаток,
	|		-ВзаиморасчетыКомпанииОстатки.СуммаУпрОстаток
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыКомпании.Остатки(, Сделка ССЫЛКА Документ.ЗаказПоставщикуНаАвтомобиль И Сделка = &Заказ) КАК ВзаиморасчетыКомпанииОстатки) КАК ВложеннаяТаблица
	|");
	Запрос.УстановитьПараметр("Заказ", ДокументОснование);
	
	СуммаСделки    = 0;
	СуммаСделкиУпр = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		СуммаСделки    = Выборка.СуммаЗаказа;
		СуммаСделкиУпр = Выборка.СуммаЗаказаУпр;
		
	КонецЕсли;
		
	Если ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаСделки,
			ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДокументОснование.КурсДокумента,
			ВалютаДокумента, КурсДокумента);
	Иначе
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаСделкиУпр,
			Константы.ВалютаУправленческогоУчетаКомпании.Получить(), КурсВалютыУпр, ВалютаДокумента, КурсДокумента);
	КонецЕсли;
	
	СуммаДокумента = Макс(ОстатокПоСделке, 0);
	Документы.РасходныйКассовыйОрдер.СуммаДокументаПриИзменении(ЭтотОбъект,ДополнительныеСвойства.ПараметрыДействия);
	
	// Статья ДДС - Оплата поставщику
	СтатьяДДС = Справочники.СтатьиДДС.ОплатаПоставщику;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПоставщикуНаАвтомобиль()

// Производит заполнение объекта на основании документа "Счет от поставщика за автомобили"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СчетОтПоставщикаЗаАвтомобили(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем обработчик заполнения на основании документа "ПоступлениеТоваров"
	Возврат ОбработкаЗаполнения_СчетОтПоставщика(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_СчетОтПоставщикаЗаАвтомобили()

// Производит заполнение объекта на основании документа "Оптовый заказ поставщику на автомобили"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ОптовыйЗаказПоставщикуНаАвтомобили(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Изменим валюту для перерасчета
	ВалютаДокумента = ДокументОснование.ВалютаДокумента;
	Документы.РасходныйКассовыйОрдер.ВалютаДокументаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВложеннаяТаблица.СуммаЗаказа) КАК СуммаЗаказа,
	|	СУММА(ВложеннаяТаблица.СуммаЗаказаУпр) КАК СуммаЗаказаУпр
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыПоставщикамОстатки.СуммаОстаток КАК СуммаЗаказа,
	|		ЗаказыПоставщикамОстатки.СуммаУпрОстаток КАК СуммаЗаказаУпр
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикамНаАвтомобили.Остатки(, ЗаказПоставщику = &Заказ) КАК ЗаказыПоставщикамОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		-РасчетыСКонтрагентамиОстатки.СуммаОстаток,
	|		-РасчетыСКонтрагентамиОстатки.СуммаУпрОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСКонтрагентами.Остатки(, Заказ ССЫЛКА Документ.ОптовыйЗаказПоставщикуНаАвтомобили И Заказ = &Заказ) КАК РасчетыСКонтрагентамиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		-ВзаиморасчетыКомпанииОстатки.СуммаОстаток,
	|		-ВзаиморасчетыКомпанииОстатки.СуммаУпрОстаток
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыКомпании.Остатки(, Сделка ССЫЛКА Документ.ОптовыйЗаказПоставщикуНаАвтомобили И Сделка = &Заказ) КАК ВзаиморасчетыКомпанииОстатки) КАК ВложеннаяТаблица
	|");
	Запрос.УстановитьПараметр("Заказ", ДокументОснование);
	
	СуммаСделки    = 0;
	СуммаСделкиУпр = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		СуммаСделки    = Выборка.СуммаЗаказа;
		СуммаСделкиУпр = Выборка.СуммаЗаказаУпр;
		
	КонецЕсли;
		
	Если ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаСделки,
			ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДокументОснование.КурсДокумента,
			ВалютаДокумента, КурсДокумента);
	Иначе
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаСделкиУпр,
			Константы.ВалютаУправленческогоУчетаКомпании.Получить(), КурсВалютыУпр, ВалютаДокумента, КурсДокумента);
	КонецЕсли;
	
	СуммаДокумента = Макс(ОстатокПоСделке, 0);
	Документы.РасходныйКассовыйОрдер.СуммаДокументаПриИзменении(ЭтотОбъект,ДополнительныеСвойства.ПараметрыДействия);
	
	// Статья ДДС - Оплата поставщику
	СтатьяДДС = Справочники.СтатьиДДС.ОплатаПоставщику;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ОптовыйЗаказПоставщикуНаАвтомобили()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
