// Модуль менеджера документа "Изменение цен аренды"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", 0);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ВидАренды");
	ОбязательныеРеквизиты.Добавить("ДатаНачалаДействия");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Автомобили");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Автомобили.Модель");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	УникальныеСтроки = Новый Массив();
	УникальныеСтроки.Добавить("ВариантКомплектации");
	УникальныеСтроки.Добавить("Модель");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Автомобили", УникальныеСтроки);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Автомобили.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработка пересчета табличных частей объекта.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Документы.ИзменениеЦенАренды.ВыполнитьПересчетТабличнойЧастиАвтомобили(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

// Обработка выполнения пересчета табличной части "Автомобили"
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Данные формы документа "Изменение цен аренды", для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВыполнитьПересчетТабличнойЧастиАвтомобили(Объект, ПараметрыДействия) Экспорт

	ТребуетсяПересчетЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен", Ложь);
	
	Если НЕ ТребуетсяПересчетЦен Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтарыйКурс = ПараметрыДействия.СтарыйКурс;
	НовыйКурс  = Объект.КурсДокумента;
	
	Если (СтарыйКурс * НовыйКурс) = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'При пересчете валюты обнаружен нулевой курс валюты.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	
	ИначеЕсли СтарыйКурс = НовыйКурс Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоэффициентСоотношенияКурсов = СтарыйКурс / НовыйКурс;

	Для Каждого Строка Из Объект.Автомобили Цикл
		
		Строка.Минута  = Окр(Строка.Минута * КоэффициентСоотношенияКурсов, 2);
		Строка.Час     = Окр(Строка.Час * КоэффициентСоотношенияКурсов, 2);
		Строка.Сутки   = Окр(Строка.Сутки * КоэффициентСоотношенияКурсов, 2);
		Строка.Неделя  = Окр(Строка.Неделя * КоэффициентСоотношенияКурсов, 2);
		Строка.Месяц   = Окр(Строка.Месяц * КоэффициентСоотношенияКурсов, 2);
		Строка.Квартал = Окр(Строка.Квартал * КоэффициентСоотношенияКурсов, 2);
		Строка.Год     = Окр(Строка.Год * КоэффициентСоотношенияКурсов, 2);
		Строка.Депозит = Окр(Строка.Депозит * КоэффициентСоотношенияКурсов, 2);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
		
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Вид аренды".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВидАрендыПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ДанныеВидаАренды = АрендаАвтомобилей.ДанныеВидаАренды(Объект.ВидАренды);
	
	Для Каждого СтрокаАвтомобиля Из Объект.Автомобили Цикл
		
		Если НЕ ДанныеВидаАренды.ТарификацияГод Тогда
			СтрокаАвтомобиля.Год = 0;
		КонецЕсли;
		
		Если НЕ ДанныеВидаАренды.ТарификацияКвартал Тогда
			СтрокаАвтомобиля.Квартал = 0;
		КонецЕсли;
		
		Если НЕ ДанныеВидаАренды.ТарификацияМесяц Тогда
			СтрокаАвтомобиля.Месяц = 0;
		КонецЕсли;
		
		Если НЕ ДанныеВидаАренды.ТарификацияНеделя Тогда
			СтрокаАвтомобиля.Неделя = 0;
		КонецЕсли;
		
		Если НЕ ДанныеВидаАренды.ТарификацияСутки Тогда
			СтрокаАвтомобиля.Сутки = 0;
		КонецЕсли;
		
		Если НЕ ДанныеВидаАренды.ТарификацияЧас Тогда
			СтрокаАвтомобиля.Час = 0;
		КонецЕсли;
			
		Если НЕ ДанныеВидаАренды.ТарификацияМинута Тогда
			СтрокаАвтомобиля.Минута = 0;
		КонецЕсли;
		
		Если НЕ ДанныеВидаАренды.ДепозитИспользование Тогда
			СтрокаАвтомобиля.Депозит = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.ВалютаДокумента = ДанныеВидаАренды.Валюта;
	ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт

	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Автомобили");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ИзменениеЦенАренды");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Автомобили");
	КонецЕсли;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю			= "АвтомобилиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'По текущей стоимости'");
	Команда.Идентификатор	= "АвтомобилиЗаполнитьПоТекущейСтоимости";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автомобили";
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю			= "АвтомобилиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Перезаполнить стоимость'");
	Команда.Идентификатор	= "АвтомобилиПерезаполнитьСтоимость";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автомобили";
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением = Ложь;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю			= "АвтомобилиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'По используемым в подразделении автомобилям'");
	Команда.Идентификатор	= "АвтомобилиЗаполнитьПоИспользуемымАвтомобилям";
	Команда.Порядок			= 51;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автомобили";
		
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа данными по текущему ценообразованию
//
Функция АвтомобилиЗаполнитьПоТекущейСтоимости(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект	= ПараметрыКоманды.Источник;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЦенАрендыАвтомобилей(Ложь);
	Запрос.УстановитьПараметр("ДатаНачалаДействия",    Объект.ДатаНачалаДействия);
	Запрос.УстановитьПараметр("ВидАренды",             Объект.ВидАренды);
	Запрос.УстановитьПараметр("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НоваяСтрока = Объект.Автомобили.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);

	КонецЦикла;
	
КонецФункции // АвтомобилиЗаполнитьПоТекущейСтоимости()

// Обработчик заполнения документа данными по текущему ценообразованию
//
Процедура АвтомобилиПерезаполнитьСтоимость(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	Объект = ПараметрыКоманды.Источник;
	
	Если НЕ Объект.Автомобили.Количество() Тогда
	
		Возврат;
	
	ИначеЕсли Объект.ВидАренды.Пустая() Тогда
		
		ВывестиСообщение(
			НСтр("ru = 'Поле ""Вид аренды"" не заполнено'"),
			,
			"Объект.ВидАренды"
		);
		
		Возврат;
	
	КонецЕсли;
	
	ПустыеЦены = Новый Структура();
	ПустыеЦены.Вставить("Минута" , 0);
	ПустыеЦены.Вставить("Час"    , 0);
	ПустыеЦены.Вставить("Сутки"  , 0);
	ПустыеЦены.Вставить("Неделя" , 0);
	ПустыеЦены.Вставить("Месяц"  , 0);
	ПустыеЦены.Вставить("Квартал", 0);
	ПустыеЦены.Вставить("Год"    , 0);
	ПустыеЦены.Вставить("Депозит", 0);
	
	Запрос = Новый Запрос;
    Запрос.Текст =
		"ВЫБРАТЬ
		|	МодельИКомплектация.Модель КАК Модель,
		|	МодельИКомплектация.ВариантКомплектации КАК ВариантКомплектации
		|ПОМЕСТИТЬ МодельИКомплектация
		|ИЗ
		|	&МодельИКомплектация КАК МодельИКомплектация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МодельИКомплектация.Модель КАК Модель,
		|	МодельИКомплектация.ВариантКомплектации КАК ВариантКомплектации,
		|	ЕСТЬNULL(ЦеныАрендыСрезПоследних.Минута, 0) КАК Минута,
		|	ЕСТЬNULL(ЦеныАрендыСрезПоследних.Час, 0) КАК Час,
		|	ЕСТЬNULL(ЦеныАрендыСрезПоследних.Сутки, 0) КАК Сутки,
		|	ЕСТЬNULL(ЦеныАрендыСрезПоследних.Неделя, 0) КАК Неделя,
		|	ЕСТЬNULL(ЦеныАрендыСрезПоследних.Месяц, 0) КАК Месяц,
		|	ЕСТЬNULL(ЦеныАрендыСрезПоследних.Квартал, 0) КАК Квартал,
		|	ЕСТЬNULL(ЦеныАрендыСрезПоследних.Год, 0) КАК Год,
		|	ЕСТЬNULL(ЦеныАрендыСрезПоследних.Депозит, 0) КАК Депозит
		|ИЗ
		|	МодельИКомплектация КАК МодельИКомплектация
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныАренды.СрезПоследних(
		|				&ДатаНачалаДействия,
		|				ВидАренды = &ВидАренды
		|					И ПодразделениеКомпании = &ПодразделениеКомпании) КАК ЦеныАрендыСрезПоследних
		|		ПО МодельИКомплектация.Модель = ЦеныАрендыСрезПоследних.Модель
		|			И МодельИКомплектация.ВариантКомплектации = ЦеныАрендыСрезПоследних.ВариантКомплектации";
	
	Запрос.УстановитьПараметр("ДатаНачалаДействия"   , Объект.ДатаНачалаДействия);
	Запрос.УстановитьПараметр("ВидАренды"            , Объект.ВидАренды);
	Запрос.УстановитьПараметр("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	Запрос.УстановитьПараметр("МодельИКОмплектация"  , Объект.Автомобили.Выгрузить(, "Модель, ВариантКомплектации"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Если результат запроса пустой, то устанавливаем пустые цены для всех строк табличной части Автомобили
	Если РезультатЗапроса.Пустой() Тогда
		
		Для Каждого СтрокаАвтомобиля Из Объект.Автомобили Цикл
			
			ЗаполнитьЗначенияСвойств(СтрокаАвтомобиля, ПустыеЦены);
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	ЦеныАренды = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаАвтомобиля Из Объект.Автомобили Цикл
	
		ОбтборАвтомобиля = Новый Структура("Модель, ВариантКомплектации", СтрокаАвтомобиля.Модель,  СтрокаАвтомобиля.ВариантКомплектации);
		НайденныеЦены = ЦеныАренды.НайтиСтроки(ОбтборАвтомобиля);
		
		Если НайденныеЦены.Количество() Тогда
			
			ТекущиеЦены = НайденныеЦены[0];
			
		Иначе
			
			ТекущиеЦены = ПустыеЦены;
		
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаАвтомобиля, ТекущиеЦены, , "Модель, ВариантКомплектации");

	КонецЦикла;

КонецПроцедуры

Процедура АвтомобилиЗаполнитьПоТекущейСтоимостиОбъект(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Автомобили = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Автомобиль", Новый Массив);
	ПоАвтомобилям = Автомобили.Количество() > 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЦенАрендыАвтомобилей(ПоАвтомобилям);
	Запрос.УстановитьПараметр("ДатаНачалаДействия",    Объект.ДатаНачалаДействия);
	Запрос.УстановитьПараметр("ВидАренды",             Объект.ВидАренды);
	Запрос.УстановитьПараметр("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	
	Если ПоАвтомобилям Тогда
		
		Запрос.УстановитьПараметр("Автомобили", Автомобили);
		
	КонецЕсли;
	
	Объект.Автомобили.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Функция ТекстЗапросаЦенАрендыАвтомобилей(ПоАвтомобилям)

	 Если ПоАвтомобилям Тогда
		 
		 ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Автомобили.Ссылка КАК Автомобиль,
			|	Автомобили.Ссылка.Модель КАК Модель,
			|	Автомобили.Ссылка.ВариантКомплектации КАК ВариантКомплектации,
			|	Автомобили.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ВТ_Автомобили
			|ИЗ
			|	Справочник.Автомобили КАК Автомобили
			|ГДЕ
			|	Автомобили.Ссылка В(&Автомобили)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЦеныАрендыСрезПоследних.Модель КАК Модель,
			|	ЦеныАрендыСрезПоследних.ВариантКомплектации КАК ВариантКомплектации,
			|	ЦеныАрендыСрезПоследних.Минута КАК Минута,
			|	ЦеныАрендыСрезПоследних.Час КАК Час,
			|	ЦеныАрендыСрезПоследних.Сутки КАК Сутки,
			|	ЦеныАрендыСрезПоследних.Неделя КАК Неделя,
			|	ЦеныАрендыСрезПоследних.Месяц КАК Месяц,
			|	ЦеныАрендыСрезПоследних.Квартал КАК Квартал,
			|	ЦеныАрендыСрезПоследних.Год КАК Год,
			|	ЦеныАрендыСрезПоследних.Депозит КАК Депозит
			|ПОМЕСТИТЬ ВТ_Цены
			|ИЗ
			|	ВТ_Автомобили КАК ВТ_Автомобили
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныАренды.СрезПоследних(
			|				&ДатаНачалаДействия,
			|				ПодразделениеКомпании = &ПодразделениеКомпании
			|					И ВидАренды = &ВидАренды) КАК ЦеныАрендыСрезПоследних
			|		ПО ВТ_Автомобили.Модель = ЦеныАрендыСрезПоследних.Модель
			|			И ВТ_Автомобили.ВариантКомплектации = ЦеныАрендыСрезПоследних.ВариантКомплектации
			|ГДЕ
			|	ЦеныАрендыСрезПоследних.ВариантКомплектации <> ЗНАЧЕНИЕ(Справочник.ВариантыКомплектации.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЦеныАрендыСрезПоследних.Модель,
			|	ЦеныАрендыСрезПоследних.ВариантКомплектации,
			|	ЦеныАрендыСрезПоследних.Минута,
			|	ЦеныАрендыСрезПоследних.Час,
			|	ЦеныАрендыСрезПоследних.Сутки,
			|	ЦеныАрендыСрезПоследних.Неделя,
			|	ЦеныАрендыСрезПоследних.Месяц,
			|	ЦеныАрендыСрезПоследних.Квартал,
			|	ЦеныАрендыСрезПоследних.Год,
			|	ЦеныАрендыСрезПоследних.Депозит
			|ИЗ
			|	ВТ_Автомобили КАК ВТ_Автомобили
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныАренды.СрезПоследних(
			|				&ДатаНачалаДействия,
			|				ПодразделениеКомпании = &ПодразделениеКомпании
			|					И ВидАренды = &ВидАренды) КАК ЦеныАрендыСрезПоследних
			|		ПО ВТ_Автомобили.Модель = ЦеныАрендыСрезПоследних.Модель
			|			И (ЦеныАрендыСрезПоследних.ВариантКомплектации = ЗНАЧЕНИЕ(Справочник.ВариантыКомплектации.ПустаяСсылка))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВТ_Автомобили.Модель,
			|	ВТ_Автомобили.ВариантКомплектации,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL
			|ИЗ
			|	ВТ_Автомобили КАК ВТ_Автомобили
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Цены.Модель КАК Модель,
			|	ВТ_Цены.ВариантКомплектации КАК ВариантКомплектации,
			|	МАКСИМУМ(ВТ_Цены.Минута) КАК Минута,
			|	МАКСИМУМ(ВТ_Цены.Час) КАК Час,
			|	МАКСИМУМ(ВТ_Цены.Сутки) КАК Сутки,
			|	МАКСИМУМ(ВТ_Цены.Неделя) КАК Неделя,
			|	МАКСИМУМ(ВТ_Цены.Месяц) КАК Месяц,
			|	МАКСИМУМ(ВТ_Цены.Квартал) КАК Квартал,
			|	МАКСИМУМ(ВТ_Цены.Год) КАК Год,
			|	МАКСИМУМ(ВТ_Цены.Депозит) КАК Депозит
			|ИЗ
			|	ВТ_Цены КАК ВТ_Цены
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_Цены.Модель,
			|	ВТ_Цены.ВариантКомплектации";
	Иначе
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ЦеныАрендыСрезПоследних.Модель КАК Модель,
			|	ЦеныАрендыСрезПоследних.ВариантКомплектации КАК ВариантКомплектации,
			|	ЦеныАрендыСрезПоследних.Минута КАК Минута,
			|	ЦеныАрендыСрезПоследних.Час КАК Час,
			|	ЦеныАрендыСрезПоследних.Сутки КАК Сутки,
			|	ЦеныАрендыСрезПоследних.Неделя КАК Неделя,
			|	ЦеныАрендыСрезПоследних.Месяц КАК Месяц,
			|	ЦеныАрендыСрезПоследних.Квартал КАК Квартал,
			|	ЦеныАрендыСрезПоследних.Год КАК Год,
			|	ЦеныАрендыСрезПоследних.Депозит КАК Депозит
			|ИЗ
			|	РегистрСведений.ЦеныАренды.СрезПоследних(
			|			&ДатаНачалаДействия,
			|			ВидАренды = &ВидАренды
			|				И ПодразделениеКомпании = &ПодразделениеКомпании) КАК ЦеныАрендыСрезПоследних";
	 	
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

// Обработчик заполнения документа моделями и вариантами комплектации по используемым в подразделении автомобилям
//
Функция АвтомобилиЗаполнитьПоИспользуемымАвтомобилям(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АвтомобилиДляТестДрайваОстатки.Автомобиль.Модель КАК Модель,
	|	АвтомобилиДляТестДрайваОстатки.Автомобиль.ВариантКомплектации КАК ВариантКомплектации
	|ПОМЕСТИТЬ вт_Модели
	|ИЗ
	|	РегистрНакопления.АвтомобилиДляТестДрайва.Остатки(
	|			&ДатаНачалаДействия,
	|			ПодразделениеКомпании = &ПодразделениеКомпании
	|				И ВидАренды = &ВидАренды) КАК АвтомобилиДляТестДрайваОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	АвтомобилиДляТестДрайваОстатки.Автомобиль.Модель,
	|	АвтомобилиДляТестДрайваОстатки.Автомобиль.ВариантКомплектации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Модели.Модель КАК Модель,
	|	вт_Модели.ВариантКомплектации КАК ВариантКомплектации,
	|	ЕСТЬNULL(ЦеныАрендыСрезПоследних.Минута, 0) КАК Минута,
	|	ЕСТЬNULL(ЦеныАрендыСрезПоследних.Час, 0) КАК Час,
	|	ЕСТЬNULL(ЦеныАрендыСрезПоследних.Сутки, 0) КАК Сутки,
	|	ЕСТЬNULL(ЦеныАрендыСрезПоследних.Неделя, 0) КАК Неделя,
	|	ЕСТЬNULL(ЦеныАрендыСрезПоследних.Месяц, 0) КАК Месяц,
	|	ЕСТЬNULL(ЦеныАрендыСрезПоследних.Депозит, 0) КАК Депозит
	|ИЗ
	|	вт_Модели КАК вт_Модели
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныАренды.СрезПоследних(
	|				&ДатаНачалаДействия,
	|				ВидАренды = &ВидАренды
	|					И ПодразделениеКомпании = &ПодразделениеКомпании
	|					И (Модель, ВариантКомплектации) В
	|						(ВЫБРАТЬ
	|							вт_Модели.Модель КАК Модель,
	|							вт_Модели.ВариантКомплектации КАК ВариантКомплектации
	|						ИЗ
	|							вт_Модели КАК вт_Модели)) КАК ЦеныАрендыСрезПоследних
	|		ПО вт_Модели.Модель = ЦеныАрендыСрезПоследних.Модель
	|			И вт_Модели.ВариантКомплектации = ЦеныАрендыСрезПоследних.ВариантКомплектации";
	Запрос.УстановитьПараметр("ДатаНачалаДействия",    Объект.ДатаНачалаДействия);
	Запрос.УстановитьПараметр("ВидАренды",             Объект.ВидАренды);
	Запрос.УстановитьПараметр("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НоваяСтрока = Объект.Автомобили.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		
	КонецЦикла;
	
КонецФункции // АвтомобилиЗаполнитьПоИспользуемомуПаркуАвтомобилей()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ИзменениеЦенАренды);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
