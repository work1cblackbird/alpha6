// Модуль документа "Распределение заказа покупателя"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Контрагент            = ДокументОснование.Контрагент;
		ДоговорВзаиморасчетов = ДокументОснование.ДоговорВзаиморасчетов;
	ИначеЕсли ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.ЗаказВнутренний") Тогда
		Контрагент            = ДокументОснование.ПодразделениеПолучатель;
		ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	Иначе
		Контрагент            = Справочники.Контрагенты.ПустаяСсылка();
		ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	КонецЕсли;
	
	Документы.РаспределениеЗаказаПокупателя.КонтрагентПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	Документы.РаспределениеЗаказаПокупателя.ЗаполнитьНеРаспределеннымиТоварами(ЭтотОбъект);
	
КонецПроцедуры //ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Отказ
		И РежимЗаписи = РежимЗаписиДокумента.Проведение
		И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		ТаблицаДолгов = ЗаказыСервер.ДолгиПоПредоплате(ЭтотОбъект, ДокументОснование);
		Если ТаблицаДолгов.Количество()>0 Тогда
			СтрокаПоиска = ТаблицаДолгов[0];
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Заказ <%1> нельзя распределить. Долг по предоплате составляет: <%2> <%3>'"),
				СокрЛП(ДокументОснование),
				Формат(СтрокаПоиска.Долг,"ЧЦ=15; ЧДЦ=2"),
				СокрЛП(СтрокаПоиска.Валюта)
			);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , ,Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоЗаказамПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Получим остатки заказанных покупателем товаров
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	             |	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |	СУММА(ЗаказыПокупателейОстатки.ЗаказаноОстаток) КАК Заказано,
	             |	СУММА(ЗаказыПокупателейОстатки.РезервОстаток) КАК Резерв,
	             |	СУММА(ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)) КАК Распределено
	             |ИЗ
	             |	РегистрНакопления.ЗаказыПокупателей.Остатки(
	             |		&НаМомент,
	             |		Заказ = &Заказ
	             |		    И Номенклатура В (&Номенклатура)
	             |		    И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)) КАК ЗаказыПокупателейОстатки
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыРаспределение.Остатки(
	             |		&НаМомент,
	             |		ЗаказПокупателя = &Заказ
	             |		    И Номенклатура В (&Номенклатура)
	             |		    И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)) КАК ЗаказыРаспределениеОстатки
	             |		ПО ЗаказыПокупателейОстатки.Заказ = ЗаказыРаспределениеОстатки.ЗаказПокупателя
	             |			И ЗаказыПокупателейОстатки.Номенклатура = ЗаказыРаспределениеОстатки.Номенклатура
	             |			И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ЗаказыПокупателейОстатки.Номенклатура,
	             |	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Номенклатура,
	             |	ХарактеристикаНоменклатуры";
	Запрос.УстановитьПараметр("НаМомент",МоментВремени());
	Запрос.УстановитьПараметр("Заказ",ДокументОснование);
	Запрос.УстановитьПараметр("Номенклатура",Товары.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",Товары.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ЗаказыПокупателей");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(,Дата));
	ЗначенияБлокировки.Вставить("Заказ", ДокументОснование);
	СтруктураПараметровБлокировки.Вставить("ИсточникДанных", Товары);
	ОписаниеИсточника = Новый Соответствие;
	ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
	ОписаниеИсточника.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	СтруктураПараметровБлокировки.ИмяТаблицы = "ЗаказыРаспределение";
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(,Дата));
	ЗначенияБлокировки.Вставить("ЗаказПокупателя", ДокументОснование);
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	ВыборкаЗаказПокупателя=Запрос.Выполнить().Выгрузить();
	
	// Получим остатки нераспределенных заказов поставщикам
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ОбъединенныйЗапрос.ЗаказПоставщику КАК ЗаказПоставщику,
	             |	ОбъединенныйЗапрос.Номенклатура,
	             |	ОбъединенныйЗапрос.ХарактеристикаНоменклатуры,
	             |	СУММА(ОбъединенныйЗапрос.Заказано) КАК Заказано,
	             |	СУММА(ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)) КАК Распределено
				 |
				 |ИЗ(ВЫБРАТЬ
	             |	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
	             |	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	             |	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |	ЗаказыПоставщикамОстатки.ЗаказаноОстаток КАК Заказано
	             |ИЗ
	             |	РегистрНакопления.ЗаказыПоставщикам.Остатки(
	             |		&НаМомент,
	             |		ЗаказПоставщику В (&Заказ)
	             |		    И Номенклатура В (&Номенклатура)
	             |		    И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)) КАК ЗаказыПоставщикамОстатки
				 |
				 |ОБЪЕДИНИТЬ ВСЕ
				 |
				 |ВЫБРАТЬ
				 |	ЗаказыПокупателейОстатки.Заказ,
	             |	ЗаказыПокупателейОстатки.Номенклатура,
	             |	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	             |	ЗаказыПокупателейОстатки.ЗаказаноОстаток - ЗаказыПокупателейОстатки.РезервОстаток
	             |ИЗ
	             |	РегистрНакопления.ЗаказыПокупателей.Остатки(
	             |		&НаМомент,
				 |		Заказ ССЫЛКА Документ.ЗаказВнутренний
				 |		И Заказ <> &ВыбЗаказ
	             |		И Заказ В (&Заказ)
	             |		И Номенклатура В (&Номенклатура)
	             |		И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)) КАК ЗаказыПокупателейОстатки) КАК ОбъединенныйЗапрос
				 |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыРаспределение.Остатки(
	             |		&НаМомент,
	             |		ЗаказПоставщика В (&Заказ)
	             |		    И Номенклатура В (&Номенклатура)
	             |		    И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)) КАК ЗаказыРаспределениеОстатки
	             |		ПО ОбъединенныйЗапрос.ЗаказПоставщику = ЗаказыРаспределениеОстатки.ЗаказПоставщика
	             |			И ОбъединенныйЗапрос.Номенклатура = ЗаказыРаспределениеОстатки.Номенклатура
	             |			И ОбъединенныйЗапрос.ХарактеристикаНоменклатуры = ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ОбъединенныйЗапрос.ЗаказПоставщику,
	             |	ОбъединенныйЗапрос.ХарактеристикаНоменклатуры,
	             |	ОбъединенныйЗапрос.Номенклатура
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ЗаказПоставщику.МоментВремени";
	Запрос.УстановитьПараметр("НаМомент",?(Ссылка.Пустая(),Дата,МоментВремени()));
	Запрос.УстановитьПараметр("Заказ",Товары.ВыгрузитьКолонку("ЗаказПоставщику"));
	Запрос.УстановитьПараметр("ВыбЗаказ", ДокументОснование);
	Запрос.УстановитьПараметр("Номенклатура",Товары.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",Товары.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
	// Наложим блокировку на считываемые данные
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(,Дата));
	СтруктураПараметровБлокировки = Новый Соответствие;
	СтруктураПараметровБлокировки.Вставить("ИсточникДанных", Товары);
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ЗаказыРаспределение");
	ОписаниеИсточника = Новый Соответствие;
	ОписаниеИсточника.Вставить("ЗаказПоставщика", "ЗаказПоставщику");
	ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
	ОписаниеИсточника.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	ВыборкаЗаказыПоставщикам=Запрос.Выполнить().Выгрузить();
	
	ДвиженияЗаказыРаспределение=Движения.ЗаказыРаспределение;
	
	Для каждого СтрокаТоваров Из Товары Цикл
		ТоварыКоличество=СтрокаТоваров.Количество*(?(СтрокаТоваров.Коэффициент=0,1,СтрокаТоваров.Коэффициент));
		// Проверим остатки товара по заказу покупателя
		СтрокиЗаказаПокупателя=ВыборкаЗаказПокупателя.НайтиСтроки(Новый Структура("Номенклатура,ХарактеристикаНоменклатуры",СтрокаТоваров.Номенклатура,СтрокаТоваров.ХарактеристикаНоменклатуры));
		Если СтрокиЗаказаПокупателя.Количество()=0 Тогда
			ЗаказПокупателяЗаказано=0;
			ЗаказПокупателяРезерв=0;
			ЗаказПокупателяРаспределено=0;
			ЗаказПокупателяОсталосьРаспределить=0;
		Иначе
			ЗаказПокупателяЗаказано=СтрокиЗаказаПокупателя[0].Заказано;
			ЗаказПокупателяРезерв=СтрокиЗаказаПокупателя[0].Резерв;
			ЗаказПокупателяРаспределено=СтрокиЗаказаПокупателя[0].Распределено;
			ЗаказПокупателяОсталосьРаспределить=ЗаказПокупателяЗаказано-ЗаказПокупателяРезерв-ЗаказПокупателяРаспределено;
		КонецЕсли; 
		Если ЗаказПокупателяОсталосьРаспределить<ТоварыКоличество Тогда
			Если Не ЗначениеЗаполнено(СтрокаТоваров.ХарактеристикаНоменклатуры) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '[<%1>] Товар <%2>. Осталось распределить по заказу покупателя <%3> <%4>. Распределяется <%5> <%6>. Превышение <%7> <%8>'"),
																						СокрЛП(СтрокаТоваров.Номенклатура.Код),
																						СокрЛП(СтрокаТоваров.Номенклатура),
																						Формат(ЗаказПокупателяОсталосьРаспределить,"ЧДЦ=3; ЧН=0,00"),
																						СокрЛП(СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения),
																						Формат(ТоварыКоличество,"ЧДЦ=3; ЧН=0,00"),
																						СокрЛП(СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения),
																						Формат(ТоварыКоличество-ЗаказПокупателяОсталосьРаспределить,"ЧДЦ=3; ЧН=0,00"),
																						СокрЛП(СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения));
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '[<%1>] Товар <%2> с характеристикой <%3>. Осталось распределить по заказу покупателя <%4> <%5>. Распределяется <%6> <%7>. Превышение <%8> <%9>'"),
																						СокрЛП(СтрокаТоваров.Номенклатура.Код),
																						СокрЛП(СтрокаТоваров.ХарактеристикаНоменклатуры),
																						СокрЛП(СтрокаТоваров.Номенклатура),
																						Формат(ЗаказПокупателяОсталосьРаспределить,"ЧДЦ=3; ЧН=0,00"),
																						СокрЛП(СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения),
																						Формат(ТоварыКоличество,"ЧДЦ=3; ЧН=0,00"),
																						СокрЛП(СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения),
																						Формат(ТоварыКоличество-ЗаказПокупателяОсталосьРаспределить,"ЧДЦ=3; ЧН=0,00"),
																						СокрЛП(СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения));
			КонецЕсли; 
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары",СтрокаТоваров.НомерСтроки, "Номенклатура");																		
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,ПутьКТабличнойЧасти,,Отказ);
		КонецЕсли;
		// Проверим остатки нераспределенного товара по заказу поставщику
		СтрокиЗаказаПоставщику=ВыборкаЗаказыПоставщикам.НайтиСтроки(Новый Структура("ЗаказПоставщику,Номенклатура,ХарактеристикаНоменклатуры",СтрокаТоваров.ЗаказПоставщику,СтрокаТоваров.Номенклатура,СтрокаТоваров.ХарактеристикаНоменклатуры));
		Если СтрокиЗаказаПоставщику.Количество()=0 Тогда
			ЗаказПоставщикуЗаказано=0;
			ЗаказПоставщикуРаспределено=0;
			ЗаказПоставщикуОсталосьРаспределить=0;
		Иначе
			ЗаказПоставщикуЗаказано=СтрокиЗаказаПоставщику[0].Заказано;
			ЗаказПоставщикуРаспределено=СтрокиЗаказаПоставщику[0].Распределено;
			ЗаказПоставщикуОсталосьРаспределить=ЗаказПоставщикуЗаказано-ЗаказПоставщикуРаспределено;
		КонецЕсли; 
		Если ЗаказПоставщикуОсталосьРаспределить<ТоварыКоличество Тогда
			Если ЗначениеЗаполнено(СтрокаТоваров.ХарактеристикаНоменклатуры) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '[<%1>] Товар <%2>.  Осталось нераспределенным в заказе поставщику <%3> <%4>. Распределяется <%5> <%6>. Превышение <%7> <%8>'"),
																						СокрЛП(СтрокаТоваров.Номенклатура.Код),
																						СокрЛП(СтрокаТоваров.Номенклатура),
																						Формат(ЗаказПоставщикуОсталосьРаспределить,"ЧДЦ=3; ЧН=0,00"),
																						СокрЛП(СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения),
																						Формат(ТоварыКоличество,"ЧДЦ=3; ЧН=0,00"),
																						СокрЛП(СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения),
																						Формат(ТоварыКоличество-ЗаказПоставщикуОсталосьРаспределить,"ЧДЦ=3; ЧН=0,00"),
																						СокрЛП(СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения));
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '[<%1>] Товар <%2> с характеристикой <%3>.  Осталось нераспределенным в заказе поставщику <%4> <%5>. Распределяется <%6> <%7>. Превышение <%8> <%9>'"),
																						СокрЛП(СтрокаТоваров.Номенклатура.Код),
																						СокрЛП(СтрокаТоваров.Номенклатура),
																						СокрЛП(СтрокаТоваров.ХарактеристикаНоменклатуры),
																						Формат(ЗаказПоставщикуОсталосьРаспределить,"ЧДЦ=3; ЧН=0,00"),
																						СокрЛП(СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения),
																						Формат(ТоварыКоличество,"ЧДЦ=3; ЧН=0,00"),
																						СокрЛП(СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения),
																						Формат(ТоварыКоличество-ЗаказПоставщикуОсталосьРаспределить,"ЧДЦ=3; ЧН=0,00"),
																						СокрЛП(СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения));

			КонецЕсли; 
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары",СтрокаТоваров.НомерСтроки, "Номенклатура");																		
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,ПутьКТабличнойЧасти,,Отказ);

		КонецЕсли; 
		// Если все нормально, добавим запись в регистр распределения
		Если НЕ Отказ Тогда
			НоваяЗапись=ДвиженияЗаказыРаспределение.Добавить();
			НоваяЗапись.ВидДвижения=ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период=Дата;
			НоваяЗапись.Регистратор=Ссылка;
			НоваяЗапись.ЗаказПокупателя=ДокументОснование;
			НоваяЗапись.ЗаказПоставщика=СтрокаТоваров.ЗаказПоставщику;
			НоваяЗапись.Номенклатура=СтрокаТоваров.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры=СтрокаТоваров.ХарактеристикаНоменклатуры;
			НоваяЗапись.Количество=ТоварыКоличество;
			НоваяЗапись.ХозОперация=ХозОперация;
		КонецЕсли; 
	КонецЦикла; 
	
	// двигаем границу последовательности заказов
	РаботаСГраницами.СдвинутьГраницуЗаказов(Ссылка,  ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
