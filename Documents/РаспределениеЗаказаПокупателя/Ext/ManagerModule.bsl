// Модуль менеджера документа "Распределение заказа покупателя"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.РаспределениеЗаказаПокупателя);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", 0);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

Процедура ЗаполнитьНеРаспределеннымиТоварами(Объект, Строка = Неопределено) Экспорт
	
	Основание = Объект.ДокументОснование;
	
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаМомент", ?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Ссылка.МоментВремени()));
	Запрос.УстановитьПараметр("Заказ",    Основание);
	Запрос.УстановитьПараметр("Организация", Основание.Организация);
	Запрос.УстановитьПараметр("Подразделение", Основание.ПодразделениеКомпании);
	
	Если Строка = Неопределено Тогда
		Объект.Товары.Очистить();
	Иначе
		Запрос.УстановитьПараметр("Номенклатура", Строка.Номенклатура);
		Запрос.УстановитьПараметр("ЗаказПоставщика", Строка.ЗаказПоставщику);
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", Строка.ХарактеристикаНоменклатуры);
		ЗаказПоставщику = Строка.ЗаказПоставщику;
		КоэффициентЕдиницыИзмерения = ?(ЗначениеЗаполнено(Строка.Коэффициент), Строка.Коэффициент, Строка.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	// Получим нераспределенные остатки по заказам поставщикам
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	             |	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |	ЗаказыПокупателейОстатки.ЗаказаноОстаток - (ЗаказыПокупателейОстатки.РезервОстаток + ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)) КАК Заказано
	             |ПОМЕСТИТЬ ОстаткиПоЗаказуПокупателя
	             |ИЗ
	             |	РегистрНакопления.ЗаказыПокупателей.Остатки(
	             |			&НаМомент,
	             |			Заказ = &Заказ
	             |				" + ?(Строка = Неопределено, ")", "И Номенклатура = &Номенклатура И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры)") + " КАК ЗаказыПокупателейОстатки
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыРаспределение.Остатки(
	             |				&НаМомент,
	             |				ЗаказПокупателя = &Заказ
	             |					" + ?(Строка = Неопределено, ")", "И Номенклатура = &Номенклатура И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры)") + " КАК ЗаказыРаспределениеОстатки
	             |		ПО ЗаказыПокупателейОстатки.Номенклатура = ЗаказыРаспределениеОстатки.Номенклатура
	             |			И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры
	             |ГДЕ
	             |	ЗаказыПокупателейОстатки.ЗаказаноОстаток - (ЗаказыПокупателейОстатки.РезервОстаток + ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)) > 0
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ОбъединенныйЗапрос.ЗаказПоставщику КАК ЗаказПоставщику,
	             |	ОбъединенныйЗапрос.Номенклатура КАК Номенклатура,
	             |	ОбъединенныйЗапрос.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |	ОбъединенныйЗапрос.Заказано - ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0) КАК Заказано
	             |ПОМЕСТИТЬ ОстаткиПоЗаказамПоставщикам
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
	             |		ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	             |		ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |		ЗаказыПоставщикамОстатки.ЗаказаноОстаток КАК Заказано
	             |	ИЗ
	             |		РегистрНакопления.ЗаказыПоставщикам.Остатки(
	             |				&НаМомент,
	             |				Номенклатура В
	             |						(ВЫБРАТЬ
	             |							ОстаткиПоЗаказуПокупателя.Номенклатура КАК Номенклатура
	             |						ИЗ
	             |							ОстаткиПоЗаказуПокупателя КАК ОстаткиПоЗаказуПокупателя)
	             |					И ХарактеристикаНоменклатуры В
	             |						(ВЫБРАТЬ
	             |							ОстаткиПоЗаказуПокупателя.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	             |						ИЗ
	             |							ОстаткиПоЗаказуПокупателя КАК ОстаткиПоЗаказуПокупателя)
	             |					И ЗаказПоставщику.Организация = &Организация
				 |					"+?(ЗначениеЗаполнено(ЗаказПоставщику), "И ЗаказПоставщику = &ЗаказПоставщика", "")+"
	             |					И ЗаказПоставщику.ПодразделениеКомпании В ИЕРАРХИИ (&Подразделение)) КАК ЗаказыПоставщикамОстатки
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		ЗаказыПокупателейОстатки.Заказ,
	             |		ЗаказыПокупателейОстатки.Номенклатура,
	             |		ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	             |		ЗаказыПокупателейОстатки.ЗаказаноОстаток - ЗаказыПокупателейОстатки.РезервОстаток
	             |	ИЗ
	             |		РегистрНакопления.ЗаказыПокупателей.Остатки(
	             |				&НаМомент,
	             |				Заказ ССЫЛКА Документ.ЗаказВнутренний
	             |					И Заказ <> &Заказ
	             |					И Номенклатура В
	             |						(ВЫБРАТЬ
	             |							ОстаткиПоЗаказуПокупателя.Номенклатура КАК Номенклатура
	             |						ИЗ
	             |							ОстаткиПоЗаказуПокупателя КАК ОстаткиПоЗаказуПокупателя)
	             |					И ХарактеристикаНоменклатуры В
	             |						(ВЫБРАТЬ
	             |							ОстаткиПоЗаказуПокупателя.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	             |						ИЗ
	             |							ОстаткиПоЗаказуПокупателя КАК ОстаткиПоЗаказуПокупателя)
	             |					И ВЫРАЗИТЬ(Заказ КАК Документ.ЗаказВнутренний).Организация = &Организация
				 |					"+?(ЗначениеЗаполнено(ЗаказПоставщику), "И Заказ = &ЗаказПоставщика", "")+"
	             |					И ВЫРАЗИТЬ(Заказ КАК Документ.ЗаказВнутренний).ПодразделениеПолучатель В ИЕРАРХИИ (&Подразделение)) КАК ЗаказыПокупателейОстатки) КАК ОбъединенныйЗапрос
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыРаспределение.Остатки(
	             |				&НаМомент,
	             |				Номенклатура В
	             |						(ВЫБРАТЬ
	             |							ОстаткиПоЗаказуПокупателя.Номенклатура КАК Номенклатура
	             |						ИЗ
	             |							ОстаткиПоЗаказуПокупателя КАК ОстаткиПоЗаказуПокупателя)
	             |					И ХарактеристикаНоменклатуры В
	             |						(ВЫБРАТЬ
	             |							ОстаткиПоЗаказуПокупателя.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	             |						ИЗ
	             |							ОстаткиПоЗаказуПокупателя КАК ОстаткиПоЗаказуПокупателя)) КАК ЗаказыРаспределениеОстатки
	             |		ПО ОбъединенныйЗапрос.ЗаказПоставщику = ЗаказыРаспределениеОстатки.ЗаказПоставщика
	             |			И ОбъединенныйЗапрос.Номенклатура = ЗаказыРаспределениеОстатки.Номенклатура
	             |			И ОбъединенныйЗапрос.ХарактеристикаНоменклатуры = ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры
	             |ГДЕ
	             |	ОбъединенныйЗапрос.Заказано - ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0) > 0
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ОстаткиПоЗаказамПоставщикам.Номенклатура КАК Номенклатура,
	             |	ОстаткиПоЗаказамПоставщикам.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |	ОстаткиПоЗаказамПоставщикам.Заказано КАК Заказано,
	             |	ОстаткиПоЗаказамПоставщикам.ЗаказПоставщику КАК ЗаказПоставщику,
	             |	ОстаткиПоЗаказуПокупателя.Заказано КАК ЗаказаноЗаказПокупателя,
	             |	ОстаткиПоЗаказамПоставщикам.ЗаказПоставщику.МоментВремени КАК ЗаказПоставщикуМоментВремени
	             |ИЗ
	             |	ОстаткиПоЗаказуПокупателя КАК ОстаткиПоЗаказуПокупателя
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиПоЗаказамПоставщикам КАК ОстаткиПоЗаказамПоставщикам
	             |		ПО ОстаткиПоЗаказуПокупателя.Номенклатура = ОстаткиПоЗаказамПоставщикам.Номенклатура
	             |			И ОстаткиПоЗаказуПокупателя.ХарактеристикаНоменклатуры = ОстаткиПоЗаказамПоставщикам.ХарактеристикаНоменклатуры
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ЗаказПоставщикуМоментВремени
	             |ИТОГИ
	             |	СУММА(Заказано),
	             |	МАКСИМУМ(ЗаказаноЗаказПокупателя)
	             |ПО
	             |	Номенклатура,
	             |	ХарактеристикаНоменклатуры";
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект);
	
	ВыборкаНоменклатура = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		ВыборкаХарактеристикаНоменклатуры = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХарактеристикаНоменклатуры.Следующий() Цикл
			ВыборкаДетальныеЗаписи = ВыборкаХарактеристикаНоменклатуры.Выбрать();			
			
			Если Строка = Неопределено Тогда
				Заказано = ВыборкаХарактеристикаНоменклатуры.ЗаказаноЗаказПокупателя;
				
				Пока Заказано > 0 И ВыборкаДетальныеЗаписи.Следующий() Цикл
					Распределить = Мин(Заказано, ВыборкаДетальныеЗаписи.Заказано);
					НоваяСтрока = Объект.Товары.Добавить();
					НоваяСтрока.Номенклатура               = ВыборкаДетальныеЗаписи.Номенклатура;
					НоваяСтрока.ХарактеристикаНоменклатуры = ВыборкаДетальныеЗаписи.ХарактеристикаНоменклатуры;
					
					// Вызываем общий обработчик события
					ОбработкаТабличнойЧастиТовары.ОбработатьИзменениеНоменклатура(Объект, НоваяСтрока, ПараметрыДействия);
					
					Если НоваяСтрока.Коэффициент = 0 Тогда
						НоваяСтрока.Коэффициент = 1;
					КонецЕсли;
					
					НоваяСтрока.Количество      = Распределить/НоваяСтрока.Коэффициент;
					НоваяСтрока.ЗаказПоставщику = ВыборкаДетальныеЗаписи.ЗаказПоставщику;
					Заказано = Заказано-Распределить;
				КонецЦикла;
				
			Иначе
				
				Заказано = ВыборкаХарактеристикаНоменклатуры.ЗаказаноЗаказПокупателя;
				
				СтрокиТоваров = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры));
				Для Каждого СтрокаТоваров Из СтрокиТоваров Цикл
					Если СтрокаТоваров.НомерСтроки=Строка.НомерСтроки Тогда
						Продолжить;
					КонецЕсли;
					Заказано = Заказано-(СтрокаТоваров.Количество*СтрокаТоваров.Коэффициент);
				КонецЦикла;
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					ЗаказаноУПоставщика = ВыборкаДетальныеЗаписи.Заказано;
					
					СтрокиТоваров = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЗаказПоставщику", Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры, ВыборкаДетальныеЗаписи.ЗаказПоставщику));
					Для Каждого СтрокаТоваров Из СтрокиТоваров Цикл
						Если СтрокаТоваров.НомерСтроки = Строка.НомерСтроки Тогда
							Продолжить;
						КонецЕсли;
						ЗаказаноУПоставщика = ЗаказаноУПоставщика-(СтрокаТоваров.Количество*СтрокаТоваров.Коэффициент);
					КонецЦикла;
					
					Если ЗаказаноУПоставщика>0 Тогда
						Количество      = Окр(Мин(Заказано, ЗаказаноУПоставщика)/КоэффициентЕдиницыИзмерения, 3);
						ЗаказПоставщику = ВыборкаДетальныеЗаписи.ЗаказПоставщику;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				
				Если (НЕ ЗаказПоставщику = Неопределено) И (НЕ Строка.ЗаказПоставщику = ЗаказПоставщику) Тогда
					Строка.ЗаказПоставщику = ЗаказПоставщику;
				КонецЕсли;
				
				Если (НЕ Количество = Строка.Количество) Тогда
					Строка.Количество = Количество;
					ТоварыКоличествоПриИзменении(Объект, Строка);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДокументОснование");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	ОбязательныеРеквизиты.Добавить("Товары.ЗаказПоставщику");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары=Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	УникальныеТовары.Добавить("ЗаказПоставщику");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти=Новый Структура();
	УникальныеТабличныеЧасти.Вставить("Товары",УникальныеТовары);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	ПараметрыДействия.Вставить("ПересчетСуммы", ЛОЖЬ);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		// Вызываем общий обработчик события
		ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
		
	Иначе
		
		Объект.ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		// Вызываем общий обработчик события
		ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНеРаспределеннымиТоварами = Истина;
	Если ПараметрыДействия <> Неопределено Тогда
		Если ПараметрыДействия.Свойство("ЗаполнитьНеРаспределеннымиТоварами") Тогда 
			ЗаполнитьНеРаспределеннымиТоварами = ПараметрыДействия.ЗаполнитьНеРаспределеннымиТоварами;
		КонецЕсли;
	КонецЕсли;

	Если ЗаполнитьНеРаспределеннымиТоварами Тогда 
		ЗаполнитьНеРаспределеннымиТоварами(Объект, Строка);
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ОбработатьИзменениеХарактеристикаНоменклатуры(Объект, Строка, ПараметрыДействия);
	
	ЗаполнитьНеРаспределеннымиТоварами = Истина;
	Если ПараметрыДействия <> Неопределено Тогда
		Если ПараметрыДействия.Свойство("ЗаполнитьНеРаспределеннымиТоварами") Тогда 
			ЗаполнитьНеРаспределеннымиТоварами = ПараметрыДействия.ЗаполнитьНеРаспределеннымиТоварами;
		КонецЕсли;
	КонецЕсли;

	Если ЗаполнитьНеРаспределеннымиТоварами Тогда 
		ЗаполнитьНеРаспределеннымиТоварами(Объект, Строка);
	КонецЕсли;
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ОбработатьИзменениеЕдиницаИзмерения(Объект, Строка, ПараметрыДействия);
	
	ЗаполнитьНеРаспределеннымиТоварами = Истина;
	Если ПараметрыДействия <> Неопределено Тогда
		Если ПараметрыДействия.Свойство("ЗаполнитьНеРаспределеннымиТоварами") Тогда 
			ЗаполнитьНеРаспределеннымиТоварами = ПараметрыДействия.ЗаполнитьНеРаспределеннымиТоварами;
		КонецЕсли;
	КонецЕсли;

	Если ЗаполнитьНеРаспределеннымиТоварами Тогда 
		ЗаполнитьНеРаспределеннымиТоварами(Объект, Строка);
	КонецЕсли;
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Заказ поставщику" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЗаказПоставщикуПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ЗаполнитьНеРаспределеннымиТоварами = Истина;
	Если ПараметрыДействия <> Неопределено Тогда
		Если ПараметрыДействия.Свойство("ЗаполнитьНеРаспределеннымиТоварами") Тогда 
			ЗаполнитьНеРаспределеннымиТоварами = ПараметрыДействия.ЗаполнитьНеРаспределеннымиТоварами;
		КонецЕсли;
	КонецЕсли;

	Если ЗаполнитьНеРаспределеннымиТоварами Тогда 
		ЗаполнитьНеРаспределеннымиТоварами(Объект, Строка);
	КонецЕсли;
	
КонецПроцедуры // ТоварыЗаказПоставщикуПриИзменении()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.РаспределениеЗаказаПокупателя",
		"ПФ_MXL_РаспределениеЗаказаПокупателя",
		НСтр("ru = 'Распределение заказа покупателя'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_РаспределениеЗаказаПокупателя") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_РаспределениеЗаказаПокупателя",
															НСтр("ru = 'Распределение заказа покупателя'"),
															ПечатьРаспределениеЗаказаПокупателя(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;		
КонецПроцедуры // Печать()

// Формирует печатную форму "РаспределениеЗаказаПокупателя"
//
Функция ПечатьРаспределениеЗаказаПокупателя(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РаспределениеЗаказаПокупателя_РаспределениеЗаказаПокупателя";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы(
			"Документ.РаспределениеЗаказаПокупателя.ПФ_MXL_РаспределениеЗаказаПокупателя");
		
		ОбластьШапкаТаблицы    = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПокупателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Контрагент, , ДополнительныеПараметры);
		ОбластьЗаголовок.Параметры.ПредставлениеЗаказа =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ.ДокументОснование);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// готовим шапку
		СтруктураИтоговПоСтранице = Новый Структура();
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// готовим области строки
		Инд = 0;
		ВыборкаТабличнойЧасти = Документ.Товары;
		КоличествоСтрок = ВыборкаТабличнойЧасти.Количество();
		Для каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			Инд = Инд+1;
			// заполняем данные строки
			СтруктураСтроки 		= УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ);
			СтруктураСтроки.Вставить("ЗаказПоставщикуПредставление",
				УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(СтрокаТЧ.ЗаказПоставщику));
			СтруктураСтроки.Вставить("ЗаказПоставщику", СтрокаТЧ.ЗаказПоставщику);
			СтруктураСтроки.Вставить("Поставщик", ?(ТипЗнч(СтрокаТЧ.ЗаказПоставщику) = Тип("ДокументСсылка.ЗаказВнутренний"),
				СтрокаТЧ.ЗаказПоставщику.ПодразделениеКомпании, СтрокаТЧ.ЗаказПоставщику.Контрагент));
			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если ВыборкаТабличнойЧасти.Индекс(СтрокаТЧ) = ВыборкаТабличнойЧасти.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, , Документ,
				?(Инд = КоличествоСтрок, мсвДопОбластиПодвала, Неопределено));
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				НомерСтраницыПред		  = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции //ПечатьРаспределениеЗаказаПокупателя()

#КонецОбласти

#КонецОбласти

#КонецЕсли