// Модуль менеджера документа "Перемещение незавершонного производства"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ОбработчикиОбновления

// Возвращает все документы, в которых присутствуют коды маркировки.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка результата запроса, содержащая требуемые документы.
//
Функция ДокументыСКодамиМаркировки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПеремещениеНезавершенногоПроизводстваКодыМаркировки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеНезавершенногоПроизводства.КодыМаркировки КАК ПеремещениеНезавершенногоПроизводстваКодыМаркировки
	|ГДЕ
	|	ПеремещениеНезавершенногоПроизводстваКодыМаркировки.КодМаркировки <> """"";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Процедура зачистки криптохвостов кодов маркировки.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ПеремещениеНезавершенногоПроизводства - документ,
//                                                                          для которого выполняется действие.
//
Процедура ОтрезатьКриптохвосты(ДокументОбъект) Экспорт
	
	Для Каждого СтрокаТоваров Из ДокументОбъект.КодыМаркировки Цикл
		СтрокаТоваров.КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(СтрокаТоваров.КодМаркировки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. 
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Вычислим сумму списания товаров
	ИтогиОперации = Новый Структура();
	
	Если НЕ Объект.Проведен Тогда
		ИтогиОперации.Вставить("СуммаДокумента", 0);
	Иначе
		ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		
		Если НЕ ЗначениеЗаполнено(Объект.КурсВалютыУпр) Тогда
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, Объект.Дата);
			КурсУпр        = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		Иначе
			КурсУпр = Объект.КурсВалютыУпр;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТоварыВПроизводстве.Номенклатура,
		               |	ТоварыВПроизводстве." + ?(Объект.ВалютаДокумента = ВалютаРегл, "Сумма", "СуммаУпр") + " КАК Сумма
		               |ИЗ
		               |	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
		               |ГДЕ
		               |	ТоварыВПроизводстве.Регистратор = &Регистратор
		               |	И ТоварыВПроизводстве.ВидДвижения = &ВидДвижения";
		Запрос.УстановитьПараметр("Регистратор"       , Объект.Ссылка);
		Запрос.УстановитьПараметр("ВидДвижения" , ВидДвиженияНакопления.Приход);
		КэшСуммСписания = Запрос.Выполнить().Выгрузить();
		
		Если Объект.ВалютаДокумента <> ВалютаУпр И Объект.ВалютаДокумента <> ВалютаРегл Тогда
			Для каждого СтрокаСписания Из КэшСуммСписания Цикл
				СтрокаСписания.Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					СтрокаСписания.Сумма, 
					ВалютаУпр, 
					КурсУпр, 
					Объект.ВалютаДокумента, 
					Объект.КурсДокумента);
			КонецЦикла;
		КонецЕсли;
		
		ИтогиОперации.Вставить("СуммаДокумента", КэшСуммСписания.Итог("Сумма"));
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используеся в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость выводв только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возращаемая сторка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить = ЛОЖЬ, ТолькоОсновныеКонтакты = ИСТИНА) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

// Получение строкового представления о ремонтируемом автомобиле
Функция ОтобразитьИнформациюОбАвтомобиле(ДокументОснование) Экспорт
	ИнформацияОбАвтомобиле="";
	Если ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.ЗаказНаряд") И ЗначениеЗаполнено(ДокументОснование) Тогда
		
		Попытка
			ГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(ДокументОснование.СводныйРемонтныйЗаказ.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер, ДокументОснование.Дата);
		Исключение
			ГосНомер = "";
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ГосНомер) Тогда
			ГосНомер="; гос № "+ГосНомер;
		Иначе
			ГосНомер="";
		КонецЕсли;
		
		Попытка
			ИнформацияОбАвтомобиле=СокрЛП(ДокументОснование.СводныйРемонтныйЗаказ.Автомобиль.Модель)+"; VIN "+ДокументОснование.СводныйРемонтныйЗаказ.Автомобиль.VIN+ГосНомер;
		Исключение
			ИнформацияОбАвтомобиле="";
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ИнформацияОбАвтомобиле;
	
КонецФункции

Процедура ЗаполнитьТоваромВПроизводствеПоЗаказНаряду(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Остатки.Номенклатура КАК Номенклатура,
		|	Остатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	Остатки.КоличествоОстаток КАК Количество
		|	// ПАРТИИ
		|ИЗ
		|	РегистрНакопления.ТоварыВПроизводстве.Остатки(
		|		&НаМомент,
		|		ЗаказНаряд = &ЗаказНаряд И 
		|		Цех = &Цех
		|) КАК Остатки"
	);
	
	Запрос.УстановитьПараметр("ЗаказНаряд", Объект.ДокументОснование);
	Запрос.УстановитьПараметр("Цех", Объект.Цех);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос.УстановитьПараметр("НаМомент", Новый МоментВремени(Объект.Дата, Объект.Ссылка));
		
	Иначе
		
		Запрос.УстановитьПараметр("НаМомент", Новый МоментВремени(ТекущаяДатаСеанса()));
		
	КонецЕсли;
	
	Если ПраваИНастройкиПользователя.Значение("ВыборочноеСписаниеПартий") Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ПАРТИИ", ",Остатки.Партия,Остатки.ГТД");
		
	КонецЕсли;
	
	Объект.Товары.Очистить();
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,, "Количество");		
		ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		НоваяСтрока.Количество = Выборка.Количество / ?(НоваяСтрока.Коэффициент = 0, 1, НоваяСтрока.Коэффициент);
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ДокументОснование");
	ОбязательныеРеквизиты.Добавить("ЗаказНаряд");
	ОбязательныеРеквизиты.Добавить("Цех");
	ОбязательныеРеквизиты.Добавить("ЦехПолучатель");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;

	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	ОбязательныеРеквизиты.Добавить("КодыМаркировки.КодМаркировки");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	
	Если ПраваИНастройкиПользователя.Значение("ВыборочноеСписаниеПартий", Объект) Тогда
		УникальныеТовары.Добавить("Партия");
		УникальныеТовары.Добавить("ГТД");
	КонецЕсли;
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Товары", УникальныеТовары);

	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("Цех", Ложь);
	КонтролируемыеРеквизиты.Вставить("ЦехПолучатель", Ложь);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цех".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЦехПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	//орЗаполнитьОстаткиНоменклатурыВПроизводстве(Объект, Объект.Товары, Объект.ДокументОснование, Объект.Цех);
	
КонецПроцедуры // ЦехПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дельнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Строка.ИдентификаторТовара) Тогда
		Строка.ИдентификаторТовара = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Партия" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПартияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПартияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыПартияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Партия" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыГТДПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ГТДПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыГТДПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Товары");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ПеремещениеНезавершенногоПроизводства");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Товары");
	КонецЕсли;

	ВыборЦеха 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборЦеха.ВыборСсылки 		= "Справочник.Цеха.ФормаСписка";
	ВыборЦеха.Обязательный 		= Истина;
	ВыборЦеха.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать цех.'");
	
	ВыборОснования 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборОснования.ВыборСсылки 		= "Документ.ЗаказНаряд.ФормаСписка";
	ВыборОснования.Обязательный 	= Истина;
	ВыборОснования.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать заказ-наряд.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить излишками в производстве'");
	Команда.Идентификатор	= "ТоварыЗаполнитьИзлишкамиВПроизводстве";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("Цех", 				ВыборЦеха);
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ДокументОснование", 	ВыборОснования);
		
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьИзлишкамиВПроизводстве.Видимость",   Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьИзлишкамиВПроизводстве.Доступность", Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по излишкам в производстве
//
Функция ТоварыЗаполнитьИзлишкамиВПроизводстве(Ссылка, ПараметрыКоманды, ПараметрыДействия=Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;           
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.Цех = ПараметрыЗаполнения.Цех Тогда
		Объект.Цех = ПараметрыЗаполнения.Цех;
	КонецЕсли;
	
	Если НЕ Объект.ДокументОснование = ПараметрыЗаполнения.ДокументОснование Тогда
		Объект.ДокументОснование = ПараметрыЗаполнения.ДокументОснование;
		ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ВложенныйЗапрос.КоличествоОстаток) КАК НадоИзвлечь,
	|	СУММА(ВложенныйЗапрос.КоличествоВЦехе) КАК КоличествоВЦехе
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыВПроизводствеОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыВПроизводствеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ТоварыВПроизводствеОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|		0 КАК КоличествоВЦехе
	|	ИЗ
	|		РегистрНакопления.ТоварыВПроизводстве.Остатки(&НаДату, ЗаказНаряд = &ВыбЗаказНаряд) КАК ТоварыВПроизводствеОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыВПроизводствеОстатки.Номенклатура,
	|		ТоварыВПроизводствеОстатки.ХарактеристикаНоменклатуры,
	|		0,
	|		ТоварыВПроизводствеОстатки.КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ТоварыВПроизводстве.Остатки(
	|			&НаДату,
	|			ЗаказНаряд = &ВыбЗаказНаряд
	|			    И Цех = &ВыбЦех) КАК ТоварыВПроизводствеОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказНарядТовары.Номенклатура,
	|		ЗаказНарядТовары.ХарактеристикаНоменклатуры,
	|		-ЗаказНарядТовары.Количество * ЗаказНарядТовары.Коэффициент,
	|		0
	|	ИЗ
	|		Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
	|	ГДЕ
	|		ЗаказНарядТовары.Ссылка = &ВыбЗаказНаряд) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НаДату",        ?(ЗначениеЗаполнено(Ссылка), Новый МоментВремени(Объект.Дата, Ссылка), Новый МоментВремени(ТекущаяДатаСеанса())));
	Запрос.УстановитьПараметр("ВыбЦех",        Объект.Цех);
	Запрос.УстановитьПараметр("ВыбЗаказНаряд", Объект.ДокументОснование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		НадоИзвлечь = Окр(Выборка.НадоИзвлечь, 3, 1);
		КоличествоВЦехе = Окр(Выборка.КоличествоВЦехе, 3, 1);
		НадоИзвлечь = Мин(НадоИзвлечь, КоличествоВЦехе);
		
		Если НадоИзвлечь <= 0 Тогда Продолжить; КонецЕсли;
		// Добавим новую строку
		НоваяСтрока = Объект.Товары.Добавить();
		// Заполним номенклатуру для новой строки
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		// Заполним характеристику номенклатуры для новой строки
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		// Заполним количество для новой строки
		НоваяСтрока.Количество = НадоИзвлечь;
		ТоварыКоличествоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
	КонецЦикла;
	
КонецФункции // ТоварыЗаполнитьИзлишкамиВПроизводстве()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ПеремещениеНезавершенногоПроизводства",
		"ПеремещениеНезавершенногоПроизводства",
		НСтр("ru = 'Перемещение незавершенного производства'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ13",
		НСтр("ru = 'ТОРГ-13 (Накладная на внутреннее перемещение)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТТН",
		НСтр("ru = '1-Т (Товарно-транспортная накладная)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТТН30122011_Приложение4",
		НСтр("ru = 'Приложение №4 (Транспортная накладная)'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПеремещениеНезавершенногоПроизводства") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПеремещениеНезавершенногоПроизводства",
			НСтр("ru = 'Перемещение незавершенного производства'"),
			ПечатьПеремещениеНезавершенногоПроизводства(МассивОбъектов, ОбъектыПечати)
		);
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "ПеремещениеНезавершенногоПроизводства"
// Возвращает сформированный табличный документ
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//
// Возвращаемое значение:
//  ТабличныйДокумент - сформированный табличный документ.
//
Функция ПечатьПеремещениеНезавершенногоПроизводства(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеНезавершенногоПроизводства_ПеремещениеНезавершенногоПроизводства";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на дотдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы(
			"Документ.ПеремещениеНезавершенногоПроизводства.ПФ_MXL_ПеремещениеНезавершенногоПроизводства");
		
		ВыборкаТабличнойЧасти = Документ.Товары.Выгрузить();
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		
		ОбластьШапкаТаблицы    = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		// Вывод надписей шапки документа
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ОрганизацияПредставление =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ДокументОснованиеПредставление =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ.ДокументОснование);
		ОбластьЗаголовок.Параметры.ЦехПредставление = Документ.Цех;
		ОбластьЗаголовок.Параметры.ЗаказНарядПредставление =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ.ЗаказНаряд);
		ОбластьЗаголовок.Параметры.АвтомобильПредставление = ОтобразитьИнформациюОбАвтомобиле(Документ.ЗаказНаряд);
		ОбластьЗаголовок.Параметры.Автомобиль = Документ.ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль;
		ОбластьЗаголовок.Параметры.ЦехПолучательПредставление = Документ.ЦехПолучатель;
			
		// выведем или удалим ШК
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// готовим шапку
		НомерСтраницы = 2;
		НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура();
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// Перебор строк
		Для Каждого СтрокаТабличнойЧасти Из ВыборкаТабличнойЧасти Цикл
			// Заполняем данные строки
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТабличнойЧасти,
				Документ);
			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТабличнойЧасти) = Документ.Товары.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТабличнойЧасти, СтруктураИтоговПоСтранице);
			
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// Выводим общее количество деталей
		ВсегоНаименований 	= Формат(ВыборкаТабличнойЧасти.Количество(), ФорматВыводаКоличества);
		ОбщееКоличество 	= Формат(ВыборкаТабличнойЧасти.Итог("Количество"), ФорматВыводаКоличества);
		ОбластьПодвал.Параметры.Итого = СтрШаблон(
			НСтр("ru = 'Всего наименований %1 в количестве %2'"),
			ВсегоНаименований,
			ОбщееКоличество
		);
		
		// Выводим представления и расшифровки подписей
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции //ПечатьИзвлечениеТоваровИзПроизводства()

// Формирует печатную форму "ТОРГ13"
// Возвращает сформированный табличный документ:
Функция ПолучитьДанныеДляПечатиТОРГ13(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"        	, Объект.КурсДокумента); 
	ДанныеОбъекта.Вставить("КурсВалютыУпр"       	, Объект.КурсВалютыУпр); 
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("Розничный"       		, Ложь);
	ДанныеОбъекта.Вставить("ТребуетсяПересчет"      , Ложь);
	
	СтрокаКолонокСвертки = "Количество";
	
	ВалютаУпр   = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаДокумента = Объект.ВалютаДокумента;
	КурсДокумента   = Объект.КурсДокумента;
	ВалютаРегл      = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КурсРегл  = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(ВалютаРегл, Объект.Дата);
	Если НЕ ЗначениеЗаполнено(Объект.КурсВалютыУпр) Тогда
		КурсУпр = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(ВалютаУпр, Объект.Дата);
	Иначе
		КурсУпр = Объект.КурсВалютыУпр; 
	КонецЕсли; 
	
	ИмяРегистра = "ТоварыВПроизводстве";
	ИспользуемыеРесурсы = Новый Структура("Сумма"+?(ВалютаДокумента=ВалютаУпр,"Упр",""));
	СтрокаКолонокСвертки = СтрокаКолонокСвертки+",Сумма"+?(ВалютаДокумента=ВалютаУпр,"Упр","");
	
	ПараметрыПолучения = ЗащищенныеФункцииСервер.СоздатьПараметрыПолученияТаблицыСписания();
	ПараметрыПолучения.ИмяРегистра         = ИмяРегистра;
	ПараметрыПолучения.ИспользуемыеРесурсы = ИспользуемыеРесурсы;
	ПараметрыПолучения.ВидДвиженияПриход   = ВидДвиженияНакопления.Приход;
	
	ТаблицаСуммСписания = ЗащищенныеФункцииСервер.ПолучитьТаблицуСуммСписания(Объект, ПараметрыПолучения);
	ТаблицаСуммСписания.Свернуть("Номенклатура,ЕдиницаИзмерения,ХарактеристикаНоменклатуры", СтрокаКолонокСвертки);
	
	// Добавим колонку "СуммаНДС" для формирвания ПФ
	ТаблицаСуммСписания.Колонки.Добавить("СуммаНДС");
	Если ВалютаДокумента=ВалютаУпр Тогда
		ТаблицаСуммСписания.Колонки.Добавить("Сумма");
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из ТаблицаСуммСписания Цикл
		ТекущаяСтрока.СуммаНДС = 0;
		Если ВалютаДокумента=ВалютаУпр Тогда
			Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТекущаяСтрока.СуммаУпр, ВалютаУпр, КурсУпр, ВалютаДокумента, КурсДокумента);
		Иначе
			Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТекущаяСтрока.Сумма, ВалютаРегл, КурсРегл, ВалютаДокумента, КурсДокумента);
		КонецЕсли;
		ТекущаяСтрока.Сумма = Сумма;
	КонецЦикла;
	
	ДанныеОбъекта.Вставить("КоличествоСтрок"  	   , ТаблицаСуммСписания.Количество());
	ДанныеОбъекта.Вставить("ТаблицаСуммСписания"   , ТаблицаСуммСписания);	
	ДанныеОбъекта.Вставить("Грузоотправитель"      , Неопределено);
	ДанныеОбъекта.Вставить("Грузополучатель"       , Неопределено);	
	ДанныеОбъекта.Вставить("Отпустил"			   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Отпустил","ОтпустилПредставление"));
	ДанныеОбъекта.Вставить("Получил"			   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Получил","ПолучилПредставление"));
	
	Возврат ДанныеОбъекта;
	
КонецФункции // ПолучитьДанныеДляПечатиТОРГ13()

// Формирует печатную форму Т-1 "Товарно-транспортная накладная"
// 
// Параметры:
//  ТабДокумент - табличный документ.
//
// Возвращаемое значение:
//  ТабДокумент - возвращает сформированный табличный документ.
//
Функция ПолучитьДанныеДляПечатиТ1(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	// данные документа
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , ВалютаРегл);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	
	ВалютаДокумента = Объект.ВалютаДокумента;
	КурсДокумента   = Объект.КурсДокумента;
	КурсРегл  = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(ВалютаРегл, Объект.Дата);
	СтрокаКолонокСвертки = "Количество, КоличествоБазовое";
	ИмяРегистра = "ТоварыВПроизводстве";
	ИспользуемыеРесурсы = Новый Структура("Сумма");
	СтрокаКолонокСвертки = СтрокаКолонокСвертки+",Сумма";
	
	ПараметрыПолучения = ЗащищенныеФункцииСервер.СоздатьПараметрыПолученияТаблицыСписания();
	ПараметрыПолучения.ИмяРегистра         = ИмяРегистра;
	ПараметрыПолучения.ИспользуемыеРесурсы = ИспользуемыеРесурсы;
	ПараметрыПолучения.ВидДвиженияПриход   = ВидДвиженияНакопления.Приход;
	
	ТаблицаСуммСписания = ЗащищенныеФункцииСервер.ПолучитьТаблицуСуммСписания(Объект, ПараметрыПолучения);
	ТаблицаСуммСписания.Свернуть("Номенклатура,ЕдиницаИзмерения,ХарактеристикаНоменклатуры", СтрокаКолонокСвертки);
	
	// Добавим колонку "Сумма всего" для формирвания ПФ
	ТаблицаСуммСписания.Колонки.Добавить("СуммаВсего");
	
	Для Каждого ТекущаяСтрока Из ТаблицаСуммСписания Цикл
		ТекущаяСтрока.СуммаВсего = ТекущаяСтрока.Сумма;
	КонецЦикла;
	
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти"  , ТаблицаСуммСписания);
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Плательщик);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Заказчик);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Ложь, Истина, ИскомыеСвойства);
	
	ДанныеОбъекта.Вставить("Грузоотправитель"       	, Неопределено);
	ДанныеОбъекта.Вставить("Грузополучатель"       		, Неопределено);
	ДанныеОбъекта.Вставить("Плательщик"            		, УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Плательщик", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("Заказчик"            		, УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Заказчик", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("ЛицензионнаяКарточка"  		, "");
	ДанныеОбъекта.Вставить("СрокДоставки"          		, "");
	ДанныеОбъекта.Вставить("Перевозчик"            		, Объект.Перевозчик);
	ДанныеОбъекта.Вставить("МаркаАвтомобиля"            , Объект.МодельАвтомобиля);
	ДанныеОбъекта.Вставить("ГосНомерАвтомобиля"         , Объект.ГосНомерАвтомобиля);
	ДанныеОбъекта.Вставить("Водитель"           		, Объект.Водитель);
	ДанныеОбъекта.Вставить("ВодительскоеУдостоверение"  , Объект.НомерВодительскогоУдостоверения);
	ДанныеОбъекта.Вставить("ВидПеревозки"           	, "");
	ДанныеОбъекта.Вставить("ПунктПогрузки"            	, "");
	ДанныеОбъекта.Вставить("ПунктРазгрузки"             , Объект.АдресДоставки);
	ДанныеОбъекта.Вставить("МаркаПрицепа"            	, Объект.МодельПрицепа);
	ДанныеОбъекта.Вставить("ГосНомерПрицепа"            , Объект.ГосНомерПрицепа);
	ДанныеОбъекта.Вставить("ОписаниеГруза"            	, Объект.ОписаниеГруза);	
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"      , Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("Отпустил"         			, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Отпустил", "Отпустил"));
	ДанныеОбъекта.Вставить("Получил"          			, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Получил", "Получил"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 			, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Руководитель"     			, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Руководитель"));
	
	Возврат ДанныеОбъекта;
	
КонецФункции //ПечатьТ1()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ПеремещениеНезавершенногоПроизводства);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли