// Модуль менеджера документа "Бюджет закупок"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда   
	
#Область ПрограммныйИнтерфейс

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.БюджетЗакупок);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказПоставщику);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
			
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
	
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
		
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.БюджетЗакупок);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. 
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Товары.Итог("СуммаВсегоУпр") + Объект.Услуги.Итог("СуммаВсегоУпр"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Функция возвращает строку для подстановки в условие запроса
// #-надо заменить на имя поля, &-надо заменить на имя параметра.
//
// Параметры:
//	ВидСравн - ВидСравнения - Вид сравнения.
//
// Возвращаемое значение:
//	Строка - Строка подстановки в условие запроса.
//
Функция СформироватьСтрокуВидаСравнения(ВидСравн) Экспорт
	
	Если ТипЗнч(ВидСравн)<>Тип("ВидСравнения") Тогда
		Возврат "";
	КонецЕсли; 
	
	СтрокаУсловия = "";
	Если ВидСравн = ВидСравнения.Равно Тогда
		СтрокаУсловия = "#=&";
	ИначеЕсли ВидСравн= ВидСравнения.НеРавно Тогда
		СтрокаУсловия = "#<>&";
	ИначеЕсли ВидСравн= ВидСравнения.ВСписке Тогда
		СтрокаУсловия = "# В (&)";
	ИначеЕсли ВидСравн= ВидСравнения.ВСпискеПоИерархии Тогда
		СтрокаУсловия = "# В ИЕРАРХИИ (&)";
	ИначеЕсли ВидСравн= ВидСравнения.ВИерархии Тогда
		СтрокаУсловия = "# В ИЕРАРХИИ (&)";	
	ИначеЕсли ВидСравн= ВидСравнения.НеВСписке Тогда
		СтрокаУсловия = "НЕ # В (&)";
	ИначеЕсли ВидСравн= ВидСравнения.НеВСпискеПоИерархии Тогда
		СтрокаУсловия = "НЕ # В ИЕРАРХИИ (&)";
	ИначеЕсли ВидСравн= ВидСравнения.НеВИерархии Тогда
		СтрокаУсловия = "НЕ # В ИЕРАРХИИ (&)";
	ИначеЕсли ВидСравн= ВидСравнения.Больше Тогда
		СтрокаУсловия = "#>&";
	ИначеЕсли ВидСравн= ВидСравнения.БольшеИлиРавно Тогда
		СтрокаУсловия = "#>=&";
	ИначеЕсли ВидСравн= ВидСравнения.Меньше Тогда
		СтрокаУсловия = "#<&";
	ИначеЕсли ВидСравн= ВидСравнения.МеньшеИлиРавно Тогда
		СтрокаУсловия = "#<=&";
	КонецЕсли;
	
	Возврат СтрокаУсловия;
	
КонецФункции // СформироватьСтрокуВидаСравнения()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("СценарийПланирования");
	
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Услуги.Номенклатура");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Товары", УникальныеТовары);
	УникальныеРеквизиты.Вставить("Услуги", УникальныеТовары);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	// Если в табличной части находится тип номенклатуры снимем флаг пересчета цен.
	Если Объект.ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоКатегориям И ПараметрыДействия.Свойство("ТребуетсяУстановкаЦен") Тогда
		ПараметрыДействия.ТребуетсяУстановкаЦен = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
	// Если в табличной части находится тип номенклатуры снимем флаг пересчета цен.
	Если Объект.ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоКатегориям И ПараметрыДействия.Свойство("ТребуетсяУстановкаЦен") Тогда
		ПараметрыДействия.ТребуетсяУстановкаЦен = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СценарийПланированияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	Параметры = Новый Структура;
	Параметры.Вставить("ДатаИзПериода", Объект.ДатаПланирования);
	Параметры.Вставить("Периодичность", Объект.СценарийПланирования.Периодичность);
	Параметры.Вставить("Действие", 0);
	ПланированиеСервер.ПолучитьДатыПланируемогоПериода(Параметры);
	Объект.ДатаПланирования = Параметры.ДатаНачала;
КонецПроцедуры // СценарийПланированияПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	ТоварыЦенаПриИзменении(Объект, Строка)
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	НоваяСуммаУпр  = Строка.Количество * Строка.Цена;
	
	Строка.СуммаВсегоУпр = НоваяСуммаУпр;
	
	// Рассчитаем НДС по ставке из справочника по актуальному курсу
	Если ТипЗнч(Строка.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
		Строка.СтавкаНДС = Строка.Номенклатура.СтавкаНДС.Ставка; 
	Иначе
		Строка.СтавкаНДС = Справочники.СтавкиНДС.ОсновнаяСтавкаНДС.Ставка;
	КонецЕсли;
	
	// Получим курсы упр. и рег. валюты на дату документа
	КоэфПересчета   = РаботаСКурсамиВалютПлатформа.ПолучитьКоэффициентПересчетаВалют(Объект.Дата);
	Строка.СуммаНДС = Строка.СуммаВсегоУпр*КоэфПересчета*Строка.СтавкаНДС/100;

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоУпрПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	ХОПоНоменклатуре = (Объект.ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоНоменклатуре);
	
	Строка.СтавкаНДС       = ?(ХОПоНоменклатуре, Строка.Номенклатура.СтавкаНДС.Ставка, Справочники.СтавкиНДС.ОсновнаяСтавкаНДС.Ставка);
	КоэфПересчета   = РаботаСКурсамиВалютПлатформа.ПолучитьКоэффициентПересчетаВалют(Объект.Дата);
	Строка.СуммаНДС = Строка.СуммаВсегоУпр*КоэфПересчета*Строка.СтавкаНДС/100;
	
	Если ХОПоНоменклатуре Тогда
		Строка.Цена = ?(Строка.Количество = 0, Строка.СуммаВсегоУпр, Строка.СуммаВсегоУпр/Строка.Количество);
	КонецЕсли;
	
КонецПроцедуры // ТоварыСуммаВсегоУпрПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Услуги".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура УслугиНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Строка.Цена = ЦенообразованиеСервер.ПолучитьЦену(Объект.ТипЦен, Строка.Номенклатура, Объект.Дата, Справочники.Контрагенты.ПустаяСсылка(), Константы.ВалютаУправленческогоУчетаКомпании.Получить(),,,, Объект.ПодразделениеКомпании);
		УслугиЦенаПриИзменении(объект, Строка, ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры // УслугиНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Услуги".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура УслугиКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	УслугиЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // УслугиКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Услуги".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура УслугиЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Строка.СуммаВсегоУпр = Строка.Количество * Строка.Цена;
	// Рассчитаем НДС по ставке из справочника по актуальному курсу
	// Получим ставку.
	Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		СтавкаНДС = Строка.Номенклатура.СтавкаНДС.Ставка;
	Иначе
		СтавкаНДС = Справочники.СтавкиНДС.ОсновнаяСтавкаНДС.Ставка;
	КонецЕсли;
	
	// Получим курсы упр. и рег. валюты на дату документа
	КоэфПересчета   = РаботаСКурсамиВалютПлатформа.ПолучитьКоэффициентПересчетаВалют(Объект.Дата);
	Строка.СуммаНДС = Строка.СуммаВсегоУпр * КоэфПересчета * СтавкаНДС/100;
	
КонецПроцедуры // УслугиЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Услуги".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура УслугиСуммаВсегоУпрПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	ХОПоНоменклатуре = (Объект.ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоНоменклатуре);
	
	СтавкаНДС       = ?(ХОПоНоменклатуре, Строка.Номенклатура.СтавкаНДС.Ставка, Справочники.СтавкиНДС.ОсновнаяСтавкаНДС.Ставка);
	КоэфПересчета   = РаботаСКурсамиВалютПлатформа.ПолучитьКоэффициентПересчетаВалют(Объект.Дата);
	Строка.СуммаНДС = Строка.СуммаВсегоУпр * КоэфПересчета * СтавкаНДС/100;
	
	Если ХОПоНоменклатуре Тогда
		Строка.Цена = ?(Строка.Количество=0, Строка.СуммаВсегоУпр, Строка.СуммаВсегоУпр/Строка.Количество);
	КонецЕсли;
	
КонецПроцедуры // УслугиСуммаВсегоУпрПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ТабличныеЧастиСКомандами = Новый Массив();
	ТабличныеЧастиСКомандами.Добавить("Товары");
	ТабличныеЧастиСКомандами.Добавить("Услуги");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "БюджетЗакупок");
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиСКомандами Цикл
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, ТабличнаяЧасть);
		
		Если ОтображатьЗаполнитьИзФайла Тогда
			ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, ТабличнаяЧасть);
		КонецЕсли;
	КонецЦикла;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СценарийПланирования",            "СценарийПланирования");
	ПараметрыФормы.Вставить("КоличествоПериодов",              "КоличествоПериодов");
	ПараметрыФормы.Вставить("КоэффициентРоста",                "КоэффициентРоста");
	ПараметрыФормы.Вставить("КоэффициентСезонности",           "КоэффициентСезонности");
	ПараметрыФормы.Вставить("ТипАнализа",                      "ТипАнализа");
	ПараметрыФормы.Вставить("ПоказательПланирования",          "ПоказательПланирования");
	ПараметрыФормы.Вставить("СпособОкругления",                "СпособОкругления");
	ПараметрыФормы.Вставить("СпособУчетаОстатков",             "СпособУчетаОстатков");
	ПараметрыФормы.Вставить("НеУчитыватьПериодыБезДанных",     "НеУчитыватьПериодыБезДанных");
	ПараметрыФормы.Вставить("КоличествоСезонов",               "КоличествоСезонов");
	ПараметрыФормы.Вставить("СмещениеПланирования",            "СмещениеПланирования");
	ПараметрыФормы.Вставить("ХозОперация",                     "ХозОперация");
	ПараметрыФормы.Вставить("ДатаПланирования",                "ДатаПланирования");
	ПараметрыФормы.Вставить("МодельПрогнозирования",           "МодельПрогнозирования");
	ПараметрыФормы.Вставить("Параметр1",                       "Параметр1");
	ПараметрыФормы.Вставить("Параметр2",                       "Параметр2");
	ПараметрыФормы.Вставить("Параметр3",                       "Параметр3");
	ПараметрыФормы.Вставить("РасчетСезонности",                "РасчетСезонности");
	ПараметрыФормы.Вставить("ДокументОснование",               "ДокументОснование");
	ПараметрыФормы.Вставить("МетодыРаспределенияКатегорий",    "МетодыРаспределенияКатегорий");
	ПараметрыФормы.Вставить("ПараметрУправленияРаспределением","ПараметрУправленияРаспределением");
	ПараметрыФормы.Вставить("ТипЦен",                          "ТипЦен");
	ПараметрыФормы.Вставить("Дата",                            "Дата");
	ПараметрыФормы.Вставить("КурсДокумента",                   "КурсДокумента");
	ПараметрыФормы.Вставить("ПодразделениеКомпании",           "ПодразделениеКомпании");
	ПараметрыФормы.Вставить("Владелец",                        "Ссылка");
	ПараметрыФормы.Вставить("ИмяТабличнойЧасти",               "Товар"); 

	ФормаАвтозаполнения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ФормаАвтозаполнения.ВыборСсылки 		= "Документ.БюджетЗакупок.Форма.ФормаДляЗаполненияПростымСпособом";
	ФормаАвтозаполнения.Обязательный 		= Истина;
	
	ФормаАвтозаполнения.Параметры = ПараметрыФормы;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Наивное прогнозирование'");
	Команда.Идентификатор	= "ЗаполнениеТабличнойЧастиТовары";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("РезультатВыбора", ФормаАвтозаполнения);
	//	
	ФормаАвтозаполнения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ФормаАвтозаполнения.ВыборСсылки 		= "Документ.БюджетЗакупок.Форма.ФормаДляЗаполненияМатМетодами";
	ФормаАвтозаполнения.Обязательный 		= Истина;
	
	ФормаАвтозаполнения.Параметры = ПараметрыФормы;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Прогнозирование мат. методами'");
	Команда.Идентификатор	= "ЗаполнениеТабличнойЧастиТовары";
	Команда.Порядок			= 51;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("РезультатВыбора", ФормаАвтозаполнения);
	//
	ФормаАвтозаполнения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ФормаАвтозаполнения.ВыборСсылки 		= "Документ.БюджетЗакупок.Форма.ФормаДляЗаполненияПоДокументуОснованию";
	ФормаАвтозаполнения.Обязательный 		= Истина;
	
	ФормаАвтозаполнения.Параметры = ПараметрыФормы;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнение по документу основанию'");
	Команда.Идентификатор	= "ЗаполнениеТабличнойЧастиТовары";
	Команда.Порядок			= 52;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("РезультатВыбора", ФормаАвтозаполнения);
	//	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СценарийПланирования",            "СценарийПланирования");
	ПараметрыФормы.Вставить("КоличествоПериодов",              "КоличествоПериодов");
	ПараметрыФормы.Вставить("КоэффициентРостаПродаж",          "КоэффициентРостаПродаж");
	ПараметрыФормы.Вставить("КоэффициентСезонности",           "КоэффициентСезонности");
	ПараметрыФормы.Вставить("ТипАнализа",                      "ТипАнализа");
	ПараметрыФормы.Вставить("ПоказательПланирования",          "ПоказательПланирования");
	ПараметрыФормы.Вставить("СпособОкругления",                "СпособОкругления");
	ПараметрыФормы.Вставить("НеУчитыватьПериодыБезДанных",     "НеУчитыватьПериодыБезДанных");
	ПараметрыФормы.Вставить("КоличествоСезонов",               "КоличествоСезонов");
	ПараметрыФормы.Вставить("СмещениеПланирования",            "СмещениеПланирования");
	ПараметрыФормы.Вставить("ХозОперация",                     "ХозОперация");
	ПараметрыФормы.Вставить("ДатаПланирования",                "ДатаПланирования");
	ПараметрыФормы.Вставить("ПланированиеСебестоимости",       "ПланированиеСебестоимости");
	ПараметрыФормы.Вставить("МодельПрогнозирования",           "МодельПрогнозирования");
	ПараметрыФормы.Вставить("Параметр1",                       "Параметр1");
	ПараметрыФормы.Вставить("Параметр2",                       "Параметр2");
	ПараметрыФормы.Вставить("Параметр3",                       "Параметр3");
	ПараметрыФормы.Вставить("РасчетСезонности",                "РасчетСезонности");
	ПараметрыФормы.Вставить("ДокументОснование",               "ДокументОснование");
	ПараметрыФормы.Вставить("МетодыРаспределенияКатегорий",    "МетодыРаспределенияКатегорий");
	ПараметрыФормы.Вставить("ПараметрУправленияРаспределением","ПараметрУправленияРаспределением");
	ПараметрыФормы.Вставить("ТипЦен",                          "ТипЦен");
	ПараметрыФормы.Вставить("Дата",                            "Дата");
	ПараметрыФормы.Вставить("КурсДокумента",                   "КурсДокумента");
	ПараметрыФормы.Вставить("ПодразделениеКомпании",           "ПодразделениеКомпании");
	ПараметрыФормы.Вставить("Владелец",                         "Ссылка");
	ПараметрыФормы.Вставить("ИмяТабличнойЧасти",               "Услуга");

	ФормаАвтозаполнения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ФормаАвтозаполнения.ВыборСсылки 		= "Документ.БюджетЗакупок.Форма.ФормаДляЗаполненияПростымСпособом";
	ФормаАвтозаполнения.Обязательный 		= Истина;
	
	ФормаАвтозаполнения.Параметры = ПараметрыФормы;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "УслугиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Наивное прогнозирование'");
	Команда.Идентификатор	= "ЗаполнениеТабличнойЧастиУслуги";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Услуги";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("РезультатВыбора", ФормаАвтозаполнения);
	//
	ФормаАвтозаполнения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ФормаАвтозаполнения.ВыборСсылки 		= "Документ.БюджетЗакупок.Форма.ФормаДляЗаполненияМатМетодами";
	ФормаАвтозаполнения.Обязательный 		= Истина;
	
	ФормаАвтозаполнения.Параметры = ПараметрыФормы;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "УслугиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Прогнозирование мат. методами'");
	Команда.Идентификатор	= "ЗаполнениеТабличнойЧастиУслуги";
	Команда.Порядок			= 51;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Услуги";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("РезультатВыбора", ФормаАвтозаполнения);
	//	
	ФормаАвтозаполнения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ФормаАвтозаполнения.ВыборСсылки 		= "Документ.БюджетЗакупок.Форма.ФормаДляЗаполненияПоДокументуОснованию";
	ФормаАвтозаполнения.Обязательный 		= Истина;
	
	ФормаАвтозаполнения.Параметры = ПараметрыФормы;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "УслугиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнение по документу основанию'");
	Команда.Идентификатор	= "ЗаполнениеТабличнойЧастиУслуги";
	Команда.Порядок			= 52;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Услуги";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("РезультатВыбора", ФормаАвтозаполнения);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ТоварыЗаполнениеПоДаннымПрошлогоПериода.Видимость",                   Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнениеПоДаннымПрошлогоПериода.Доступность",                 Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнениеМетодамиМатематическогоПрогнозирования.Видимость",    Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнениеМетодамиМатематическогоПрогнозирования.Доступность",  Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнениеПоДокументуОснованию.Видимость",                      Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнениеПоДокументуОснованию.Доступность",                    Истина);
	ПараметрыКоманд.Вставить("УслугиЗаполнениеПоДаннымПрошлогоПериода.Видимость",                   Истина);
	ПараметрыКоманд.Вставить("УслугиЗаполнениеПоДаннымПрошлогоПериода.Доступность",                 Истина);
	ПараметрыКоманд.Вставить("УслугиЗаполнениеМетодамиМатематическогоПрогнозирования.Видимость",    Истина);
	ПараметрыКоманд.Вставить("УслугиЗаполнениеМетодамиМатематическогоПрогнозирования.Доступность",  Истина);
	ПараметрыКоманд.Вставить("УслугиЗаполнениеПоДокументуОснованию.Видимость",                      Истина);
	ПараметрыКоманд.Вставить("УслугиЗаполнениеПоДокументуОснованию.Доступность",                    Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения табличной части документа "Товары" выбранным методом.
//
Функция ЗаполнениеТабличнойЧастиТовары(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыКоманды.Свойство("РезультатВыбора") Тогда
		ПараметрыЗаполнения = ПараметрыКоманды;
	Иначе
		ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	КонецЕсли;
	Объект = ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Результат = ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗаполнения, "РезультатВыбора", Неопределено);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, ПараметрыЗаполнения.РезультатВыбора);
		Для Каждого ТекСтрока Из ПараметрыЗаполнения.РезультатВыбора.ТаблицаНоменклатуры Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			Если ТипЗнч(НоваяСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.БазоваяЕдиницаИзмерения;
			КонецЕсли;
			НоваяСтрока.Код = НоваяСтрока.Номенклатура.Код;
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции // ЗаполнениеТабличнойЧастиТовары()

// Обработчик заполнения табличной части документа "Услуги" выбранным методом.
//
Функция ЗаполнениеТабличнойЧастиУслуги(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыКоманды.Свойство("РезультатВыбора") Тогда
		ПараметрыЗаполнения = ПараметрыКоманды;
	Иначе
		ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	КонецЕсли;
	Объект = ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Результат = ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗаполнения, "РезультатВыбора", Неопределено);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, ПараметрыЗаполнения.РезультатВыбора);
		Для Каждого ТекСтрока Из ПараметрыЗаполнения.РезультатВыбора.ТаблицаНоменклатуры Цикл
			НоваяСтрока = Объект.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			Если ТипЗнч(НоваяСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.БазоваяЕдиницаИзмерения;
			КонецЕсли;
			НоваяСтрока.Код = НоваяСтрока.Номенклатура.Код;
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции // ЗаполнениеТабличнойЧастиУслуги()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.БюджетЗакупок",
		"ПФ_MXL_БюджетЗакупок",
		НСтр("ru = 'Бюджет закупок'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_БюджетЗакупок") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_БюджетЗакупок",
															"БюджетЗакупок",
															ПечатьБюджетЗакупок(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;	
КонецПроцедуры // Печать()

// Формирует печатную форму "БюджетЗакупок"
//
Функция ПечатьБюджетЗакупок(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_БюджетЗакупок_БюджетЗакупок";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати,ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.БюджетЗакупок.ПФ_MXL_БюджетЗакупок");
		
		ОбластьЗаголовка = ПолучитьЗаполненнуюОбластьТабличногоДокумента("Заголовок", Макет, Документ); 
		ТабличныйДокумент.Вывести(ОбластьЗаголовка);
		
		// установим следующий номер страницы
		НомерСтраницы = 2;
		НомерСтраницыПред = НомерСтраницы;

		// ТЕПЕРЬ ШАПКА	
		ОбластьШапкаТаблицы = ПолучитьЗаполненнуюОбластьТабличногоДокумента("ШапкаТаблицы", Макет, Документ);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// заполним параметры шапки таблицы для следующего листа
		ОбластьШапкаТаблицы = ПолучитьЗаполненнуюОбластьТабличногоДокумента("ШапкаТаблицы", Макет, Документ, ("Страница: " + НомерСтраницы));
		
		// ИТОГИ НА СТРАНИЦЕ
		УчетКоличества    = (Документ.ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоНоменклатуре);
		СтруктураИтоговПоСтранице = Новый Структура;
		СтруктураИтоговПоСтранице.Вставить("СуммаВсегоУпр",0);
		СтруктураИтоговПоСтранице.Вставить("СуммаНДС",0);
		
		ОбластьИтогоПоСтранице = ПолучитьЗаполненнуюОбластьТабличногоДокумента("ИтогоПоСтранице", Макет, Документ, СтруктураИтоговПоСтранице);         	
		
		ВыборкаТабличнойЧасти = Документ.Товары;
		
		// ИТОГ ПО ДОКУМЕНТУ
		СтруктураИтогов = Новый Структура;
		СтруктураИтогов.Вставить("ИтогоСуммаВсегоУпр", ВыборкаТабличнойЧасти.Итог("СуммаВсегоУпр"));
		СтруктураИтогов.Вставить("ИтогоСуммаНДС",     ВыборкаТабличнойЧасти.Итог("СуммаНДС"));
		СтруктураИтогов.Вставить("КоличествоПозиций", ВыборкаТабличнойЧасти.Количество());
		
		Если Документ.ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоНоменклатуре Тогда
			ОбластьПодвал = ПолучитьЗаполненнуюОбластьТабличногоДокумента("ПодвалПоНоменклатуре", Макет, Документ, СтруктураИтогов); 			
		Иначе
			ОбластьПодвал = ПолучитьЗаполненнуюОбластьТабличногоДокумента("Подвал", Макет, Документ, СтруктураИтогов);
		КонецЕсли;
		
		Для Каждого СтрокаТабличнойЧасти Из ВыборкаТабличнойЧасти Цикл
			// заполняем данные строки
			ОбластьСтрока = ПолучитьЗаполненнуюОбластьТабличногоДокумента("Строка", Макет, Документ, СтрокаТабличнойЧасти); 
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если ВыборкаТабличнойЧасти.Индекс(СтрокаТабличнойЧасти) = ВыборкаТабличнойЧасти.Количество() -1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			// Получаем табл. документ (итоги на странице) с заполненным параметрами. Иначе никак.
			Если Документ.ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоНоменклатуре Тогда
				ОбластьИтогоПоСтранице = ПолучитьЗаполненнуюОбластьТабличногоДокумента("ИтогоПоСтранице", Макет, Документ, СтруктураИтоговПоСтранице);
			Иначе
				ОбластьИтогоПоСтранице = ПолучитьЗаполненнуюОбластьТабличногоДокумента("ИтогоПоСтраницеБезКоличества", Макет,  Документ, СтруктураИтоговПоСтранице);
			КонецЕсли;
			
			// выводим строку, делая проверку попадания на лист
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока, ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ, мсвДопОбластиПодвала);			
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				// обнулим структуру
				Для Каждого стрСтруктуры Из СтруктураИтоговПоСтранице Цикл
					СтруктураИтоговПоСтранице.Вставить(стрСтруктуры.Ключ, 0);
				КонецЦикла;
				НомерСтраницыПред = НомерСтраницы;
				// заполним параметры шапки таблицы для следующего листа
				ОбластьШапкаТаблицы = ПолучитьЗаполненнуюОбластьТабличногоДокумента("ШапкаТаблицы", Макет, Документ, ("Страница: " + НомерСтраницы));	
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТабличнойЧасти,СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент,ОбластьИтогоПоСтранице,СтруктураИтоговПоСтранице,Документ);
		КонецЕсли;
		
		УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент,ОбластьПодвал,,,НомерСтраницы,,Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции //ПечатьБюджетЗакупок()

// Заполняет параметры переданной области таблицы для следующего листа
//
// Параметры:
//  ИмяОбласти        - Строка - Имя области для заполнения,
//  Макет             - Макет,
//  Документ          - Объект,
//  ДопПараметр       - Структура - передает дополнительные параметры.
//
Функция ПолучитьЗаполненнуюОбластьТабличногоДокумента(ИмяОбласти, Макет, Документ,ДопПараметр="")
	
	Если ИмяОбласти="Заголовок" Тогда
		ОбластьЗаголовка = Новый ТабличныйДокумент;
		МакетШапки     = Макет.ПолучитьОбласть(ИмяОбласти+"|Товар");
		МакетШапки.Параметры.Заполнить(Документ);
		МакетШапки.Параметры.ПодразделениеКомпании = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(МакетШапки.Параметры.ПодразделениеКомпании, Документ.Дата);
		МакетШапки.Параметры.ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		
		Параметры = Новый Структура;
		Параметры.Вставить("ДатаИзПериода", Документ.ДатаПланирования);
		Параметры.Вставить("Периодичность", Документ.СценарийПланирования.Периодичность);
		Параметры.Вставить("Действие", 0);
		
		ПредставлениеПериодаПланирования = ПланированиеСервер.ПолучитьДатыПланируемогоПериода(Параметры);
		
		МакетШапки.Параметры.СценарийПланирования = Документ.СценарийПланирования;
		МакетШапки.Параметры.ПредставлениеПериодаПланирования = ПредставлениеПериодаПланирования;
		ОбластьЗаголовка.Вывести(МакетШапки); 		
		ОбластьЗаголовка.Присоединить(Макет.ПолучитьОбласть(ИмяОбласти+"|Код") );
		
		Если Документ.ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоНоменклатуре Тогда
			ОбластьЗаголовка.Присоединить(Макет.ПолучитьОбласть(ИмяОбласти + "|Количество") );
			ОбластьЗаголовка.Присоединить(Макет.ПолучитьОбласть(ИмяОбласти + "|Цена") );
		КонецЕсли;  
		
		ОбластьЗаголовка.Присоединить(Макет.ПолучитьОбласть(ИмяОбласти + "|СуммаУпр")); 
		ОбластьЗаголовка.Присоединить(Макет.ПолучитьОбласть(ИмяОбласти + "|НДС"));
		Возврат ОбластьЗаголовка;
		
	ИначеЕсли ИмяОбласти = "ШапкаТаблицы" Тогда
		ОбластьШапкаТаблицы = Новый ТабличныйДокумент;  
		МакетШапкиТовар     = Макет.ПолучитьОбласть(ИмяОбласти + "|Товар");		
		Если Документ.ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоНоменклатуре Тогда
			МакетШапкиТовар.Параметры.Товар = НСтр("ru = 'Товар'"); 
		Иначе
			МакетШапкиТовар.Параметры.Товар = НСтр("ru = 'Типы номенклатуры'");
		КонецЕсли;
		ОбластьШапкаТаблицы.Вывести(МакетШапкиТовар);
		ОбластьШапкаТаблицы.Присоединить(Макет.ПолучитьОбласть(ИмяОбласти + "|Код") );
		
		Если Документ.ХозОперация=Справочники.ХозОперации.БюджетЗакупокПоНоменклатуре Тогда
			ОбластьШапкаТаблицы.Присоединить( Макет.ПолучитьОбласть(ИмяОбласти + "|Количество") );
			ОбластьШапкаТаблицы.Присоединить( Макет.ПолучитьОбласть(ИмяОбласти + "|Цена") );
		КонецЕсли;  	
		ОбластьШапкаТаблицы.Присоединить(Макет.ПолучитьОбласть(ИмяОбласти + "|СуммаУпр")); 
		МакетШапкиТовар = Макет.ПолучитьОбласть(ИмяОбласти + "|НДС");
		Если ДопПараметр <> "" Тогда
			МакетШапкиТовар.Параметры.НомерСтраницы = ДопПараметр;
		КонецЕсли;  		
		ОбластьШапкаТаблицы.Присоединить(МакетШапкиТовар); 
		Возврат ОбластьШапкаТаблицы;
		
	ИначеЕсли ИмяОбласти = "Строка" Тогда
		ОбластьСтроки        = Новый ТабличныйДокумент;
		СтрокаТабличнойЧасти = ДопПараметр;
		// Форматы вывода
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		ФорматВыводаСуммы 	   = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ); 
		
		МакетСтроки	         = Макет.ПолучитьОбласть(ИмяОбласти + "|Товар");
		МакетСтроки.Параметры.НомерСтроки       = СтрокаТабличнойЧасти.НомерСтроки;
		МакетСтроки.Параметры.ТоварНаименование = СтрокаТабличнойЧасти.Номенклатура.Наименование;
		ОбластьСтроки.Вывести(МакетСтроки); 		
		
		МакетСтроки = Макет.ПолучитьОбласть(ИмяОбласти+"|Код");
		МакетСтроки.Параметры.Код = СтрокаТабличнойЧасти.Номенклатура.Код;
		ОбластьСтроки.Присоединить(МакетСтроки);
		
		Если Документ.ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоНоменклатуре Тогда
			МакетСтроки = Макет.ПолучитьОбласть(ИмяОбласти + "|Количество");
			МакетСтроки.Параметры.Количество = Формат(СтрокаТабличнойЧасти.Количество, ФорматВыводаКоличества);
			ОбластьСтроки.Присоединить(МакетСтроки);
			
			МакетСтроки = Макет.ПолучитьОбласть(ИмяОбласти+"|Цена");
			МакетСтроки.Параметры.Цена = Формат(СтрокаТабличнойЧасти.Цена, ФорматВыводаСуммы);
			ОбластьСтроки.Присоединить(МакетСтроки);    
		КонецЕсли;  		
		МакетСтроки = Макет.ПолучитьОбласть(ИмяОбласти+"|СуммаУпр");
		МакетСтроки.Параметры.СуммаУпр = Формат(СтрокаТабличнойЧасти.СуммаВсегоУпр, ФорматВыводаСуммы);
		ОбластьСтроки.Присоединить(МакетСтроки);
			
		МакетСтроки = Макет.ПолучитьОбласть(ИмяОбласти + "|НДС");
		МакетСтроки.Параметры.СуммаНДС = Формат(СтрокаТабличнойЧасти.СуммаНДС, ФорматВыводаСуммы);
		ОбластьСтроки.Присоединить(МакетСтроки);
		Возврат ОбластьСтроки;
		
	ИначеЕсли ИмяОбласти = "ИтогоПоСтранице" ИЛИ ИмяОбласти = "ИтогоПоСтраницеБезКоличества" Тогда
		ОбластьИтогов             = Новый ТабличныйДокумент;
		СтруктураИтоговПоСтранице = ДопПараметр;
		
		// Форматы вывода
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		ФорматВыводаСуммы 	   = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ); 
		
		ОбластьИтогов.Вывести(Макет.ПолучитьОбласть(ИмяОбласти+"|Товар"));
		
		МакетСтроки = Макет.ПолучитьОбласть(ИмяОбласти+"|Код"); 
		МакетСтроки.Параметры.ВалютаДокумента = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		ОбластьИтогов.Присоединить(МакетСтроки);
		
		Если Документ.ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоНоменклатуре Тогда
			ОбластьИтогов.Присоединить(Макет.ПолучитьОбласть(ИмяОбласти + "|Количество")); 
			МакетСтроки =  Макет.ПолучитьОбласть(ИмяОбласти + "|Цена");
			ОбластьИтогов.Присоединить(МакетСтроки);
		КонецЕсли; 
		
		МакетСтроки = Макет.ПолучитьОбласть(ИмяОбласти+"|СуммаУпр");
		МакетСтроки.Параметры.СуммаВсегоУпр = Формат(СтруктураИтоговПоСтранице.СуммаВсегоУпр, ФорматВыводаСуммы);
		ОбластьИтогов.Присоединить(МакетСтроки);   
			
		МакетСтроки = Макет.ПолучитьОбласть(ИмяОбласти+"|НДС");
		МакетСтроки.Параметры.СуммаНДС = Формат(СтруктураИтоговПоСтранице.СуммаНДС, ФорматВыводаСуммы);
		ОбластьИтогов.Присоединить(МакетСтроки);   
		Возврат ОбластьИтогов; 
		
	ИначеЕсли ИмяОбласти = "Подвал" ИЛИ ИмяОбласти = "ПодвалПоНоменклатуре" Тогда
		ОбластьПодвала = Новый ТабличныйДокумент;
		СтруктураИтогов = ДопПараметр;
		// Форматы вывода
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		ФорматВыводаСуммы 	   = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ); 
		
		МакетСтроки = Макет.ПолучитьОбласть(ИмяОбласти+"|Товар");
		Если Документ.ХозОперация=Справочники.ХозОперации.БюджетЗакупокПоНоменклатуре Тогда
			МакетСтроки.Параметры.СуммаПрописью     = НСтр("ru = 'Всего запланировано позиций номенклатуры'") + Символы.НПП 
														+ СтруктураИтогов.КоличествоПозиций + Символы.НПП + НСтр("ru = 'на сумму'") + Символы.НПП 
														+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СтруктураИтогов.ИтогоСуммаВсегоУпр, Константы.ВалютаУправленческогоУчетаКомпании.Получить());
		Иначе
			МакетСтроки.Параметры.СуммаПрописью     = НСтр("ru = 'Всего запланировано типов номенклатуры'") + Символы.НПП 
														+ СтруктураИтогов.КоличествоПозиций + Символы.НПП + НСтр("ru = 'на сумму'") + Символы.НПП 
														+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СтруктураИтогов.ИтогоСуммаВсегоУпр, Константы.ВалютаУправленческогоУчетаКомпании.Получить());
		КонецЕсли; 
		МакетСтроки.Параметры.Автор = Документ.Автор;
		ОбластьПодвала.Вывести(МакетСтроки); 		
		
		МакетСтроки = Макет.ПолучитьОбласть(ИмяОбласти + "|Код"); 		
		Если ИмяОбласти = "Подвал" Тогда
			МакетСтроки.Параметры.ВалютаДокумента = Константы.ВалютаУправленческогоУчетаКомпании.Получить();			
		КонецЕсли;
		ОбластьПодвала.Присоединить(МакетСтроки);
		
		Если Документ.ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоНоменклатуре Тогда
			МакетСтроки = Макет.ПолучитьОбласть(ИмяОбласти + "|Количество"); 			
			ОбластьПодвала.Присоединить(МакетСтроки);  
			
			МакетСтроки = Макет.ПолучитьОбласть(ИмяОбласти + "|Цена");
			МакетСтроки.Параметры.ВалютаДокумента = Константы.ВалютаУправленческогоУчетаКомпании.Получить();	
			ОбластьПодвала.Присоединить(МакетСтроки);    
		КонецЕсли;  		
		МакетСтроки = Макет.ПолучитьОбласть(ИмяОбласти + "|СуммаУпр");
		МакетСтроки.Параметры.ИтогоСуммаВсегоУпр = Формат(СтруктураИтогов.ИтогоСуммаВсегоУпр, ФорматВыводаСуммы);
		ОбластьПодвала.Присоединить(МакетСтроки);   
		
		МакетСтроки = Макет.ПолучитьОбласть(ИмяОбласти + "|НДС");
		МакетСтроки.Параметры.ИтогоСуммаНДС = Формат(СтруктураИтогов.ИтогоСуммаНДС, ФорматВыводаСуммы);
		ОбластьПодвала.Присоединить(МакетСтроки); 		
		
		Возврат ОбластьПодвала;
	КонецЕсли;
	
КонецФункции // ПолучитьЗаполненнуюОбластьТабличногоДокумента()

#КонецОбласти

#КонецОбласти

#КонецЕсли