///////////////////////////////////////////////////////////////////////////////
// Модуль формы "Заполнение по документу основанию"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СценарийПланирования             = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СценарийПланирования",             Неопределено);
	ДокументОснование                = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ДокументОснование",                Неопределено);
	МетодыРаспределенияКатегорий     = ПолучитьЗначениеПараметраСтруктуры(Параметры, "МетодыРаспределенияКатегорий",     Неопределено);
	ПараметрУправленияРаспределением = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПараметрУправленияРаспределением", Неопределено);
	ХозОперация                      = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ХозОперация",                      Неопределено);
	КоличествоПериодов               = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КоличествоПериодов",               Неопределено);
	КоэффициентРоста                 = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КоэффициентРоста",                 0);
	КоэффициентСезонности            = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КоэффициентСезонности",            0);
	ТипАнализа                       = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ТипАнализа",                       Неопределено);
	ПоказательПланирования           = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПоказательПланирования",           Неопределено);
	СпособОкругления                 = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СпособОкругления",                 0);
	СмещениеПланирования             = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СмещениеПланирования",             Неопределено);
	КоличествоСезонов                = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КоличествоСезонов",                Неопределено);
	НеУчитыватьПериодыБезДанных      = ПолучитьЗначениеПараметраСтруктуры(Параметры, "НеУчитыватьПериодыБезДанных",      Ложь);
	ТипЦен                           = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ТипЦен",                           Неопределено);
	КурсДокумента                    = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КурсДокумента",                    0);
	Дата                             = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Дата",                             Неопределено);
	ПодразделениеКомпании            = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПодразделениеКомпании",            Неопределено);
	ДатаПланирования                 = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ДатаПланирования",                 Неопределено);
	Владелец                         = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Владелец",                         Неопределено);
	СпособУчетаОстатков              = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СпособУчетаОстатков",              Неопределено);
	
	Если НЕ ЗначениеЗаполнено(СценарийПланирования) ИЛИ НЕ ЗначениеЗаполнено(СценарийПланирования.Периодичность) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбран сценарий планирования, либо у выбранного сценария не указана периодичность.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ПланированиеСебестоимости Тогда
		Элементы.МетодыРаспределенияКатегорий.СписокВыбора.Добавить(Перечисления.МетодыРаспределенияКатегорий.ПоМаржинальнойПрибыли);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МетодыРаспределенияКатегорий) Тогда
		МетодыРаспределенияКатегорий = Перечисления.МетодыРаспределенияКатегорий.ПоСумме;
	КонецЕсли;
	
	Если ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоКатегориям Тогда
		Элементы.НоменклатураКоличество.Видимость              = Ложь;
		Элементы.НоменклатураЦена.Видимость                    = Ложь;
		Элементы.НоменклатураБазоваяЕдиницаИзмерения.Видимость = Ложь;
	Иначе
		Элементы.НоменклатураКоличество.Видимость              = Истина;
		Элементы.НоменклатураЦена.Видимость                    = Истина;
		Элементы.НоменклатураБазоваяЕдиницаИзмерения.Видимость = Истина;
	КонецЕсли;
	
	УправлениеОтображением("ДокументОснование");
	
	ОсновнаяСтавкаНДС = Справочники.СтавкиНДС.ОсновнаяСтавкаНДС.Ставка;
	
	// Заполним табличное поле
	ЗаполнитьТабличноеПоле();
	
	// Заполним надпись с типом цены
	ПараметрыНадписи = Новый Структура;
	ПараметрыНадписи.Вставить("ТипЦен",                    ТипЦен);
	ПараметрыНадписи.Вставить("КурсДокумента",             КурсДокумента);
	ПараметрыНадписи.Вставить("НадписьИнформацияОТипеЦен", Элементы.НадписьИнформацияОТипеЦен);
	ПланированиеСервер.СформироватьНадписьТипаЦены(ПараметрыНадписи);
	
	НастроитьПараметрыВыбораДокументаОснование();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Обработчик события возникающего на клиенте перед закрытием формы.
//
// Параметры:
//  Форма                          - УправляемаяФорма   - Форма, в которой возникло событие.
//  Отказ                          - Булево - Признак отказа от создания формы.
//  ОбработчикПоложительногоОтвета - ОписаниеОповещения - Процедура в которую будет передано управление при
//                                                        положительном ответе на вопрос.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	УправлениеДиалогомКлиент.ПроверитьМодифицированностьДанныхПриЗакрытии(ЭтотОбъект,Отказ,Новый ОписаниеОповещения("Подключаемый_ПередЗакрытием", ЭтотОбъект));
	
КонецПроцедуры //ПередЗакрытием()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "ДокументОснование" в контексте сервера.
//
&НаСервере
Процедура ДокументОснованиеПриИзмененииНаСервере()
	
	УправлениеОтображением("ДокументОснование");
	ЗаполнитьТабличноеПоле();
	ПодразделениеДокументаОснование = ДокументОснование.ПодразделениеКомпании;
	
КонецПроцедуры // ДокументОснованиеПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "ДокументОснование".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	ДокументОснованиеПриИзмененииНаСервере();
	
КонецПроцедуры // ДокументОснованиеПриИзменении()

// Обработчик события возникающего на клиенте перед началом выбора данных реквизита "ДокументОснование".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ОтборДатаКонца", ПараметрыПериода.ДатаКонца);
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		ПараметрыФормы.Вставить("ОтборДокументИсключение", Владелец);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ОтборПоСценариюПланирования", СписокСценарияПланирования);
	
	Если ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.БюджетЗакупокПоКатегориям") Тогда
		ОтборПоХозОперации = Новый Массив;
		ОтборПоХозОперации.Добавить(ПредопределенноеЗначение("Справочник.ХозОперации.БюджетЗакупокПоКатегориям"));
		ОтборПоХозОперации.Добавить(ПредопределенноеЗначение("Справочник.ХозОперации.БюджетПродажПоКатегориям"));
		ПараметрыФормы.Вставить("ОтборПоХозОперации", Новый ФиксированныйМассив(ОтборПоХозОперации));
	Иначе
		ОтборПоХозОперации = Новый Массив;
		ОтборПоХозОперации.Добавить(ПредопределенноеЗначение("Справочник.ХозОперации.БюджетЗакупокПоКатегориям"));
		ОтборПоХозОперации.Добавить(ПредопределенноеЗначение("Справочник.ХозОперации.БюджетПродажПоКатегориям"));
		ОтборПоХозОперации.Добавить(ПредопределенноеЗначение("Справочник.ХозОперации.БюджетЗакупокПоНоменклатуре"));
		ОтборПоХозОперации.Добавить(ПредопределенноеЗначение("Справочник.ХозОперации.БюджетПродажПоНоменклатуре"));
		ПараметрыФормы.Вставить("ОтборПоХозОперации", Новый ФиксированныйМассив(ОтборПоХозОперации));
	КонецЕсли;
	
	ОткрытьФорму("ЖурналДокументов.Бюджетирование.ФормаСписка", ПараметрыФормы, Элемент);
	
КонецПроцедуры

// Обработчик события, возникающий при очистке поля "СпособУчетаОстатков"
//
&НаКлиенте
Процедура СпособУчетаОстатковОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры // СпособУчетаОстатковОчистка()

// Обработчик события возникающего на клиенте перед началом интерактивного добавления строки дерева "Номенклатура".
//
// Параметры:
//  Элемент     - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура НоменклатураПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Добавлять будем независимо от текущей строки
	Отказ = Истина;
	
	ОбновитьПараметрыВыбора();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ТипНоменклатуры", ОбновитьПараметрыВыбора()));
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаСписка", ПараметрыФормы, Элементы.Номенклатура,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик события возникающего на сервере после удаления строки дерева "Номенклатура".
//
// Параметры:
//  Элемент     - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаСервере
Процедура НоменклатураПослеУдаленияНаСервере()
	
	ПересчитатьНераспределеннуюСумму();
	
КонецПроцедуры

// Обработчик события возникающего на клиенте после удаления строки дерева "Номенклатура".
//
// Параметры:
//  Элемент     - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура НоменклатураПослеУдаления(Элемент)
	НоменклатураПослеУдаленияНаСервере();
КонецПроцедуры

// Обработчик события возникающего на сервере обработка выбора дерева "Номенклатура".
//
&НаСервере
Процедура НоменклатураОбработкаВыбораНаСервере(ВыбранноеЗначение)
	
	// Поищем есть ли такой тип номенклатуры в списке
	ПоискТипНоменклатуры = ВыбранноеЗначение.ТипНоменклатуры;
	
	ДеревоНоменклатуры = РеквизитФормыВЗначение("Номенклатура");
	
	НайденнаяСтрока = ДеревоНоменклатуры.Строки.Найти(ПоискТипНоменклатуры, "Номенклатура");
	Если НайденнаяСтрока = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Тип выбранной номенклатуры отсутствует в таблице.'"));
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрокаЗначения = НайденнаяСтрока.Строки.Найти(ВыбранноеЗначение, "Номенклатура");
	Если НайденнаяСтрокаЗначения = Неопределено Тогда
		
		НоваяСтрока                              = НайденнаяСтрока.Строки.Добавить();
		НоваяСтрока.Номенклатура                 = ВыбранноеЗначение;
		
		НайденнаяСтрокаЗначения                  = НоваяСтрока;
		ЗначениеВРеквизитФормы(ДеревоНоменклатуры, "Номенклатура");
	КонецЕсли;
	
	ОбработкаРеквизита("Номенклатура.Номенклатура", НайденнаяСтрокаЗначения);
	ЗначениеВРеквизитФормы(ДеревоНоменклатуры, "Номенклатура");
	
	Для Каждого ТекТипНоменклатуры Из Номенклатура.ПолучитьЭлементы() Цикл
		
		Для Каждого ТекНоменклатура Из ТекТипНоменклатуры.ПолучитьЭлементы() Цикл
			
			Если ТекНоменклатура.Номенклатура = НайденнаяСтрокаЗначения.Номенклатура Тогда
				Элементы.Номенклатура.ТекущаяСтрока = ТекНоменклатура.ПолучитьИдентификатор();
				Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
					ТекНоменклатура.БазоваяЕдиницаИзмерения = ВыбранноеЗначение.БазоваяЕдиницаИзмерения;
					ТекНоменклатура.СтавкаНДС = Строка(ВыбранноеЗначение.СтавкаНДС.Ставка) + "%";
					ТекНоменклатура.Ставка    = ВыбранноеЗначение.СтавкаНДС.Ставка;
				КонецЕсли;
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // НоменклатураОбработкаВыбораНаСервере()

// Обработчик события возникающего на клиенте обработка выбора дерева "Номенклатура".
//
// Параметры:
//  Элемент     - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НоменклатураОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры // НоменклатураОбработкаВыбора()

// Обработчик события возникающего в момент нажатия кнопки выбора реквизита "Номенклатура".
//
&НаКлиенте
Процедура НоменклатураНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Номенклатура.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Установим отбор при изменении номенклатуры
	СтандартнаяОбработка = Ложь;
	
	ОтборТипНоменклатуры = ПолучитьТипНоменклатуры();
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ТипНоменклатуры", ОтборТипНоменклатуры));
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаСписка", ПараметрыФормы, Элемент);
	
КонецПроцедуры // НоменклатураОбработкаВыбора()

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура НоменклатураНоменклатураПриИзмененииНаСервере()
	
	ТекСтрока = Номенклатура.НайтиПоИдентификатору(Элементы.Номенклатура.ТекущаяСтрока);
	ОбработкаРеквизита("Номенклатура.Номенклатура", ТекСтрока);
	УстановитьУсловноеОформление();
	
КонецПроцедуры // НоменклатураНоменклатураПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Номенклатура".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура НоменклатураНоменклатураПриИзменении(Элемент)
	
	НоменклатураНоменклатураПриИзмененииНаСервере();
	
КонецПроцедуры // НоменклатураНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура НоменклатураКоличествоПриИзмененииНаСервере()
	
	ТекСтрока = Номенклатура.НайтиПоИдентификатору(Элементы.Номенклатура.ТекущаяСтрока);
	ОбработкаРеквизита("Номенклатура.Количество", ТекСтрока);
	
КонецПроцедуры // НоменклатураКоличествоПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Количество".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура НоменклатураКоличествоПриИзменении(Элемент)
	
	НоменклатураКоличествоПриИзмененииНаСервере();
	
КонецПроцедуры // НоменклатураКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура НоменклатураЦенаПриИзмененииНаСервере()
	
	ТекСтрока = Номенклатура.НайтиПоИдентификатору(Элементы.Номенклатура.ТекущаяСтрока);
	ОбработкаРеквизита("Номенклатура.Цена", ТекСтрока);
	
КонецПроцедуры // НоменклатураЦенаПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Цена".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура НоменклатураЦенаПриИзменении(Элемент)
	
	НоменклатураЦенаПриИзмененииНаСервере();
	
КонецПроцедуры // НоменклатураЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "СуммаВсегоУпрНеРаспред" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура НоменклатураСуммаВсегоУпрНеРаспредПриИзмененииНаСервере()
	
	ТекСтрока = Номенклатура.НайтиПоИдентификатору(Элементы.Номенклатура.ТекущаяСтрока);
	ОбработкаРеквизита("Номенклатура.СуммаВсегоУпрНеРаспред", ТекСтрока);
	
КонецПроцедуры // НоменклатураСуммаВсегоУпрНеРаспредПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "СуммаВсегоУпрНеРаспред".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура НоменклатураСуммаВсегоУпрНеРаспредПриИзменении(Элемент)
	
	НоменклатураСуммаВсегоУпрНеРаспредПриИзмененииНаСервере();
	
КонецПроцедуры // НоменклатураСуммаВсегоУпрНеРаспредПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик команды "Перечитать"
//
&НаКлиенте
Процедура Перечитать(Команда)
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ПеречитатьВыполнение", ЭтотОбъект);
	
	ПоказатьВопрос(ОбработчикОповещения, НСтр("ru = 'Перезаполнение таблицы приведет к потере сделанных изменений.
	                                                |Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Обработчик команды "Заполнить"
//
&НаКлиенте
Процедура Заполнить(Команда)
	
	ЧтоТоЕсть = Ложь;
	Для Каждого ТекущаяСтрока Из Номенклатура.ПолучитьЭлементы() Цикл
		Если ТекущаяСтрока.ПолучитьЭлементы().Количество() <> 0 Тогда
			ЧтоТоЕсть = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЧтоТоЕсть Тогда
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ЗаполнениеДереваНоменклатуры", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, НСтр("ru = 'Внимание! Табличная часть будет перезаполнена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ЗаполнениеПростымСпособом();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Распределить" на сервере
//
&НаСервере
Процедура РаспределитьНаСервере()
	
	ДеревоНоменклатуры = РеквизитФормыВЗначение("Номенклатура");
	
	ПараметрыДанных = Новый Структура;
	ПараметрыДанных.Вставить("ДеревоЗначений",                   ДеревоНоменклатуры);
	ПараметрыДанных.Вставить("ДатаДокумента",                    Дата);
	ПараметрыДанных.Вставить("МетодыРаспределенияКатегорий",     МетодыРаспределенияКатегорий);
	ПараметрыДанных.Вставить("ПараметрУправленияРаспределением", ПараметрУправленияРаспределением);
	ПараметрыДанных.Вставить("ИмяТабличнойЧасти",                "Товары");
	ПараметрыДанных.Вставить("ЕстьСебестоимостьУпр",             Ложь);
	
	ПланированиеСервер.РаспределитьСуммыКатегорийПоНоменклатуре(ПараметрыДанных);
	ПересчитатьНераспределеннуюСумму();
	
	ЗначениеВРеквизитФормы(ДеревоНоменклатуры, "Номенклатура");
	
	ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Распределение завершено.'"));
	
КонецПроцедуры // РаспределитьНаСервере()

// Обработчик события нажатия кнопки "Распределить" на клиенте
//
&НаКлиенте
Процедура Распределить(Команда)
	
	РаспределитьНаСервере();
	
КонецПроцедуры // Распределить()

// Обработчик события нажатия кнопки "ОК" на клиенте
//
&НаКлиенте
Процедура ОК(Команда)
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		
		ОбработкаОповещения = Новый ОписаниеОповещения("СформироватьИтоговуюТаблицу", ЭтотОбъект, "ЗакрытьОкно");
		ПоказатьВопрос(ОбработкаОповещения, НСтр("ru = 'Не выбран документ-основание. Закрыть форму без сохранения?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	СформироватьИтоговуюТаблицуНоменклатуры();
	
	РезультатВыбора = Новый Структура;
	РезультатВыбора.Вставить("ДокументОснование",                ДокументОснование);
	РезультатВыбора.Вставить("МетодыРаспределенияКатегорий",     МетодыРаспределенияКатегорий);
	РезультатВыбора.Вставить("ПараметрУправленияРаспределением", ПараметрУправленияРаспределением);
	РезультатВыбора.Вставить("СпособУчетаОстатков",              СпособУчетаОстатков);
	
	// сохраним параметры простого заполнения
	РезультатВыбора.Вставить("КоличествоПериодов",          КоличествоПериодов);
	РезультатВыбора.Вставить("КоэффициентРостаПродаж",      КоэффициентРоста);
	РезультатВыбора.Вставить("ТипАнализа",                  ТипАнализа);
	РезультатВыбора.Вставить("КоэффициентСезонности",       КоэффициентСезонности);
	РезультатВыбора.Вставить("ПоказательПланирования",      ПоказательПланирования);
	РезультатВыбора.Вставить("СпособОкругления",            СпособОкругления);
	РезультатВыбора.Вставить("СмещениеПланирования",        СмещениеПланирования);
	РезультатВыбора.Вставить("КоличествоСезонов",           КоличествоСезонов);
	РезультатВыбора.Вставить("НеУчитыватьПериодыБезДанных", НеУчитыватьПериодыБезДанных);
	
	ТаблицаРезультата = Новый Массив;
	Для Каждого ТекСтрока Из Результат Цикл
		
		НоваяСтрока = Новый Структура("Номенклатура, Количество, Цена, СуммаВсегоУпр, СуммаНДС, СтавкаНДС");
		НоваяСтрока.Номенклатура  = ТекСтрока.Номенклатура;
		НоваяСтрока.Количество    = ТекСтрока.Количество;
		НоваяСтрока.Цена          = ТекСтрока.Цена;
		НоваяСтрока.СуммаВсегоУпр = ТекСтрока.СуммаВсегоУпр;
		НоваяСтрока.СуммаНДС      = ТекСтрока.СуммаНДС;
		НоваяСтрока.СтавкаНДС     = ТекСтрока.Ставка;
		ТаблицаРезультата.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	РезультатВыбора.Вставить("ТаблицаНоменклатуры", ТаблицаРезультата);
	РезультатВыбора.Вставить("СпособПоследнегоЗаполнения", 2);
	
	Модифицированность = Ложь;
	Закрыть(РезультатВыбора);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура для управления доступностью/видимостью элементов диалога
//
// Параметры:
//  Элемент - строка - передает имя элемента формы.
//
&НаСервере
Процедура УправлениеОтображением(Элемент="")
	
	Если Элемент="ДокументОснование" Тогда
		ПризнакРаспределения = Ложь;
		Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
			// Свернем все
			УправлениеОтображением("СвернутьПанель");
			
			// Отобразим таблицу значений
			УправлениеОтображением("ОтобразитьТаблицу");
			
			// Доступность командной панели
			УправлениеОтображением("ПанельНеДоступна");
		ИначеЕсли (ДокументОснование.ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоКатегориям ИЛИ ДокументОснование.ХозОперация = Справочники.ХозОперации.БюджетПродажПоКатегориям)
			       И ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоНоменклатуре Тогда
				   
			// Развернуть 
			УправлениеОтображением("РазвернутьПанель");
			
			// Таблицу сделать деревом значений
			УправлениеОтображением("ОтобразитьДерево");
			
			// Доступность командной панели
			УправлениеОтображением("ПанельДоступна");
			
			ПризнакРаспределения = Истина;
		Иначе
			// Свернуть
			УправлениеОтображением("СвернутьПанель");
			
			// Отобразим таблицу значений
			УправлениеОтображением("ОтобразитьТаблицу"); 
			
			// Доступность командной панели
			УправлениеОтображением("ПанельНеДоступна"); 
		КонецЕсли;
		
	ИначеЕсли Элемент="СвернутьПанель" Тогда
		Элементы.МетодРаспределенияИзмеряемыйПоказатель.Доступность = Ложь;
	ИначеЕсли Элемент="РазвернутьПанель" Тогда
		Элементы.МетодРаспределенияИзмеряемыйПоказатель.Доступность = Истина;
	ИначеЕсли Элемент="ОтобразитьДерево" Тогда
		Элементы.Номенклатура.Отображение = ОтображениеТаблицы.Дерево;
	ИначеЕсли Элемент="ОтобразитьТаблицу" Тогда
		Элементы.Номенклатура.Отображение = ОтображениеТаблицы.Список;
	ИначеЕсли Элемент="ПанельНеДоступна" Тогда
		Элементы.Номенклатура.ИзменятьСоставСтрок = Ложь;
		Элементы.Номенклатура.ТолькоПросмотр      = Истина;
		Элементы.НоменклатураКоманднаяПанель.Доступность = Ложь;
		
		// Разберемся с колонками
		Элементы.НоменклатураСуммаВсегоУпр.Видимость = Ложь;
		
	ИначеЕсли Элемент="ПанельДоступна" Тогда
		
		Элементы.Номенклатура.ИзменятьСоставСтрок = Истина;
		Элементы.Номенклатура.ТолькоПросмотр      = Ложь;
		Элементы.НоменклатураКоманднаяПанель.Доступность = Истина;
		
		// Разберемся с колонками
		Элементы.НоменклатураСуммаВсегоУпр.Видимость = Истина;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры // УправлениеОтображением()

// Заполняет таблицу по табличной части документа основания
//
&НаСервере
Процедура ЗаполнитьТабличноеПоле()
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументПоНоменклатуре  = (ХозОперация = Справочники.ХозОперации.БюджетПродажПоНоменклатуре ИЛИ ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоНоменклатуре);
	ОснованиеПоНоменклатуре = (ДокументОснование.ХозОперация = Справочники.ХозОперации.БюджетПродажПоНоменклатуре ИЛИ ДокументОснование.ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоНоменклатуре);
	Если ДокументПоНоменклатуре И НЕ ОснованиеПоНоменклатуре Тогда
		ДеревоДвухуровневое = Истина;
	Иначе
		ДеревоДвухуровневое = Ложь;
	КонецЕсли;
	
	ДеревоНоменклатура = РеквизитФормыВЗначение("Номенклатура");
	
	Если ДеревоНоменклатура.Колонки.Найти("МинОстаток")<>Неопределено Тогда
		УчитыватьОстатки = Истина;
	Иначе
		 УчитыватьОстатки = Ложь;
	КонецЕсли;
	
	Номенклатура.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРЕДСТАВЛЕНИЕ(БюджетЗакупокТовары.Номенклатура) КАК Представление,
	|	БюджетЗакупокТовары.Номенклатура,
	|	БюджетЗакупокТовары.Цена,
	|	БюджетЗакупокТовары.Количество,"+?(ДеревоДвухуровневое, "
	|	БюджетЗакупокТовары.СуммаВсегоУпр КАК СуммаВсегоУпр,
	|	0 КАК СуммаВсегоУпрНеРаспред,","
	|	0 КАК СуммаВсегоУпр,
	|	БюджетЗакупокТовары.СуммаВсегоУпр КАК СуммаВсегоУпрНеРаспред,")+"
	|	БюджетЗакупокТовары.СуммаНДС";
	
	Если УчитыватьОстатки Тогда
		Запрос.Текст = Запрос.Текст + ",
		|ЕСТЬNULL(ДополнительныеРеквизитыНоменклатурыСрезПоследних_1.ЗначениеРеквизита, 0) КАК МинОстаток, 
		|ЕСТЬNULL(ДополнительныеРеквизитыНоменклатурыСрезПоследних_2.ЗначениеРеквизита, 0) КАК МаксОстаток 
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + " 
	|ИЗ
	|	Документ."+ДокументОснование.Метаданные().Имя+".Товары КАК БюджетЗакупокТовары";
	
	Если УчитыватьОстатки Тогда
		Запрос.Текст = Запрос.Текст + ",
		|  ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеРеквизитыНоменклатуры.СрезПоследних(
		|  &ДатаДокумента,
		|  ПодразделениеКомпании = &Подразделение
		|  И ДополнительныйРеквизит = &ДополнительныйРеквизитМинимум) КАК ДополнительныеРеквизитыНоменклатурыСрезПоследних_1
		|  ПО БюджетЗакупокТовары.Номенклатура = ДополнительныеРеквизитыНоменклатурыСрезПоследних_1.Номенклатура
		|
		| ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеРеквизитыНоменклатуры.СрезПоследних(
		| &ДатаДокумента,
		| ПодразделениеКомпании = &Подразделение
		| И ДополнительныйРеквизит = &ДополнительныйРеквизитМаксимум) КАК ДополнительныеРеквизитыНоменклатурыСрезПоследних_2
		|ПО БюджетЗакупокТовары.Номенклатура = ДополнительныеРеквизитыНоменклатурыСрезПоследних_2.Номенклатура
		|";
	КонецЕсли;   
	
	Запрос.Текст = Запрос.Текст + " 
	|ГДЕ
	|	БюджетЗакупокТовары.Ссылка = &Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Ссылка",        ДокументОснование);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("Подразделение", ПодразделениеКомпании);
	Запрос.УстановитьПараметр("ДополнительныйРеквизитМинимум",  Перечисления.ДополнительныеРеквизитыНоменклатуры.МинимальныйОстаток);
	Запрос.УстановитьПараметр("ДополнительныйРеквизитМаксимум", Перечисления.ДополнительныеРеквизитыНоменклатуры.МаксимальныйЗапас);
	Выборка = Запрос.Выполнить().Выбрать();
	Сч = 1;
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Номенклатура.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.СтавкаНДС = Строка(ОсновнаяСтавкаНДС) + "%";
		НоваяСтрока.Ставка = ОсновнаяСтавкаНДС;
		Сч = Сч + 1;
	КонецЦикла;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры // ЗаполнитьТабличноеПоле()

// Формирование параметров выбора документа основания
//
&НаСервере
Процедура НастроитьПараметрыВыбораДокументаОснование()
	
	ПараметрыПериода = Новый Структура;
	ПараметрыПериода.Вставить("ДатаИзПериода", ДатаПланирования);
	ПараметрыПериода.Вставить("Периодичность", СценарийПланирования.Периодичность);
	ПараметрыПериода.Вставить("Действие", 0);
	ПланированиеСервер.ПолучитьДатыПланируемогоПериода(ПараметрыПериода);
	
	// Отбор по периодичности
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СценарииПланирования.Ссылка
	|ИЗ
	|	Справочник.СценарииПланирования КАК СценарииПланирования
	|ГДЕ
	|	СценарииПланирования.ЭтоГруппа = ЛОЖЬ
	|	И СценарииПланирования.Периодичность = &Периодичность";
	Запрос.УстановитьПараметр("Периодичность", СценарийПланирования.Периодичность);
	СписокСценарияПланирования.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Пересчитывает значение нераспределенной суммы
//
// Параметры
//  Строка  - строка дерева значений, которой принадлежит выбранная коллекция строк.
//
&НаСервере
Процедура ПересчитатьНераспределеннуюСумму(Строка="")
	
	Если Строка="" Тогда
		
		Для Каждого ТекСтрока Из Номенклатура.ПолучитьЭлементы() Цикл
			
			СуммаВсегоУпрНеРаспред = 0;
			
			Для Каждого ТекНоменклатура Из ТекСтрока.ПолучитьЭлементы() Цикл
				
				СуммаВсегоУпрНеРаспред = СуммаВсегоУпрНеРаспред + ТекНоменклатура.СуммаВсегоУпрНеРаспред;
				
			КонецЦикла;
			
			ТекСтрока.СуммаВсегоУпрНеРаспред = СуммаВсегоУпрНеРаспред;
			
		КонецЦикла;
		
	Иначе
		// Только по одному типу, для скорости
		Строка.СуммаВсегоУпрНеРаспред = Строка.Строки.Итог("СуммаВсегоУпрНеРаспред");
		
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьНераспределеннуюСумму()

// Обработка выбранного реквизита, вызывается обработчиками события "ПриИзменении"
// реквизитов ДереваЗначений "Номенклатура".
//
// Параметры:
//  Реквизит  - Строка - передает имя реквизита 
//  Данные    - Строка дерева значений.
//
&НаСервере
Процедура ОбработкаРеквизита(Реквизит, Данные)
	
	Если Реквизит="Номенклатура.Номенклатура" Тогда
		
		Данные.Цена = ЦенообразованиеСервер.ПолучитьЦену(ТипЦен, Данные.Номенклатура, Дата, Справочники.Контрагенты.ПустаяСсылка(), Константы.ВалютаУправленческогоУчетаКомпании.Получить(),,,, ПодразделениеКомпании);
		ОбработкаРеквизита("Номенклатура.Цена", Данные);
		
	ИначеЕсли Реквизит="Номенклатура.Цена" Тогда
		
		СтараяСуммаУпр = Данные.СуммаВсегоУпрНеРаспред;
		НоваяСуммаУпр  = Данные.Количество * Данные.Цена;
		
		Данные.СуммаВсегоУпрНеРаспред = НоваяСуммаУпр;
		
		// Рассчитаем НДС по ставке из справочника по актуальному курсу
		// Получим ставку.
		Если ТипЗнч(Данные.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
			СтавкаНДС = Данные.Номенклатура.СтавкаНДС.Ставка;
		Иначе
			СтавкаНДС = ОсновнаяСтавкаНДС;
		КонецЕсли;
		
		// Получим курсы упр. и рег. валюты на дату документа
		КоэфПересчета   = ПланированиеСервер.ПолучитьКоэффициентПересчетаВалют(Дата);
		Данные.СуммаНДС = Данные.СуммаВсегоУпрНеРаспред * КоэфПересчета * СтавкаНДС/100;
		
	ИначеЕсли Реквизит="Номенклатура.Количество" Тогда
		ОбработкаРеквизита("Номенклатура.Цена"           , Данные);
		
	ИначеЕсли Реквизит="Номенклатура.СуммаВсегоУпрНеРаспред" Тогда
		ХОПоНоменклатуре = (ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоНоменклатуре);
		Если ТипЗнч(Данные.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			СтавкаНДС = Данные.Номенклатура.СтавкаНДС.Ставка;
		Иначе
			СтавкаНДС = ОсновнаяСтавкаНДС;
		КонецЕсли;
		
		КоэфПересчета    = ПланированиеСервер.ПолучитьКоэффициентПересчетаВалют(Дата);
		Данные.СуммаНДС  = Данные.СуммаВсегоУпр * КоэфПересчета * СтавкаНДС/100;
		
		Если ХОПоНоменклатуре Тогда
			Если Данные.Количество = 0 Тогда
				Данные.Количество = 1;
			КонецЕсли;
			Данные.Цена = Данные.СуммаВсегоУпрНеРаспред / Данные.Количество;
		КонецЕсли;
		
	КонецЕсли;
	
	// Пересчет
	Если ТипЗнч(Данные)=Тип("ДанныеФормыЭлементДерева") Тогда
		Если ТипЗнч(Данные.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			ПересчитатьНераспределеннуюСумму();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРеквизита()

// Обработка результата вопроса команды "Перечитать"
//
&НаКлиенте
Процедура ПеречитатьВыполнение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТабличноеПоле();
	КонецЕсли;
	
КонецПроцедуры // ПеречитатьВыполнение()

// Обработчик очистки дерева значений "Номенклатура"
//
&НаКлиенте
Процедура ЗаполнениеДереваНоменклатуры(Результат, ДополнительныеДействия) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнениеПростымСпособом();
	
КонецПроцедуры // ЗаполнениеДереваНоменклатуры()

// Обработчик заполнения дерева значений "Номенклатура"
//
&НаКлиенте
Процедура ЗаполнениеПростымСпособом()
	
	// очистим номенклатурные позиции
	Для каждого ТекСтрока Из Номенклатура.ПолучитьЭлементы() Цикл
		ТекСтрока.ПолучитьЭлементы().Очистить();
	КонецЦикла;
	
	Список = Новый СписокЗначений;
	Для Каждого ТекСтрока Из Номенклатура.ПолучитьЭлементы() Цикл
		Список.Добавить(ТекСтрока.Номенклатура);
	КонецЦикла;
	
	// Параметры формы
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФормаМастера", Истина);
	ПараметрыФормы.Вставить("СценарийПланирования",        СценарийПланирования);
	ПараметрыФормы.Вставить("КоличествоПериодов",          КоличествоПериодов);
	ПараметрыФормы.Вставить("КоэффициентРоста",            КоэффициентРоста);
	ПараметрыФормы.Вставить("КоэффициентСезонности",       КоэффициентСезонности);
	ПараметрыФормы.Вставить("ТипАнализа",                  ТипАнализа);
	ПараметрыФормы.Вставить("ПоказательПланирования",      ПоказательПланирования);
	ПараметрыФормы.Вставить("СпособОкругления",            СпособОкругления);
	ПараметрыФормы.Вставить("НеУчитыватьПериодыБезДанных", НеУчитыватьПериодыБезДанных);
	ПараметрыФормы.Вставить("КоличествоСезонов",           КоличествоСезонов);
	ПараметрыФормы.Вставить("СмещениеПланирования",        СмещениеПланирования);
	ПараметрыФормы.Вставить("ТипНоменклатуры",             Список);
	ПараметрыФормы.Вставить("Дата",                        Дата);
	ПараметрыФормы.Вставить("ТипЦен",                      ТипЦен);
	ПараметрыФормы.Вставить("КурсДокумента",               КурсДокумента);
	ПараметрыФормы.Вставить("ДокументОснование",           ДокументОснование);
	ПараметрыФормы.Вставить("ДатаПланирования",            ДатаПланирования);
	ПараметрыФормы.Вставить("СпособУчетаОстатков",         СпособУчетаОстатков);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ВыводРезультатаЗаполненияНоменклатуры", ЭтотОбъект);
	
	ОткрытьФорму("Документ.БюджетЗакупок.Форма.ФормаДляЗаполненияПростымСпособом", ПараметрыФормы, ЭтотОбъект, ,,, ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ЗаполнениеПростымСпособом()

// Обработчик загрузки сформированного набора данных по номенклатуре в контексте сервера.
//
&НаСервере
Процедура ВыводРезультатаЗаполненияНоменклатурыНаСервере(ДанныеНоменклатуры)
	
	ДеревоНоменклатуры = РеквизитФормыВЗначение("Номенклатура");
	
	Для Каждого ТекущаяСтрока Из ДанныеНоменклатуры Цикл
		
		НайденнаяСтрока = ДеревоНоменклатуры.Строки.Найти(ТекущаяСтрока.ТипНоменклатуры, "Номенклатура");
		
		Если НайденнаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НайденнаяСтрока.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.СуммаВсегоУпрНеРаспред = ТекущаяСтрока.СуммаВсегоУпр;
		
		Если ТипЗнч(НоваяСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			НоваяСтрока.СтавкаНДС = Строка(НоваяСтрока.Номенклатура.СтавкаНДС.Ставка) + "%";
			НоваяСтрока.Ставка    = НоваяСтрока.Номенклатура.СтавкаНДС.Ставка;
		Иначе
			НоваяСтрока.СтавкаНДС = Строка(ОсновнаяСтавкаНДС) + "%";
			НоваяСтрока.Ставка    = ОсновнаяСтавкаНДС;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоНоменклатуры, "Номенклатура");
	
	// Пересчитаем итоговую нераспределенную сумму
	ПересчитатьНераспределеннуюСумму();
	
КонецПроцедуры

// Обработчик загрузки сформированного набора данных по номенклатуре
//
&НаКлиенте
Процедура ВыводРезультатаЗаполненияНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат)<>Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
	
	ВыводРезультатаЗаполненияНоменклатурыНаСервере(Результат.ТаблицаНоменклатуры);
	
КонецПроцедуры // ВыводРезультатаЗаполненияНоменклатуры()

//  Обработчик формирования результирующей таблицы
//
&НаСервере
Процедура СформироватьИтоговуюТаблицуНоменклатуры()
	
	ДвухУровневоеДерево = (ДокументОснование.ХозОперация = Справочники.ХозОперации.БюджетПродажПоКатегориям И ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоНоменклатуре);
	ДвухУровневоеДерево = ДвухУровневоеДерево ИЛИ (ДокументОснование.ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоКатегориям И ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоНоменклатуре);
	
	ДеревоНоменклатуры = РеквизитФормыВЗначение("Номенклатура");
	
	ПараметрыДанных = Новый Структура;
	ПараметрыДанных.Вставить("ТабличнаяЧасть",      Результат);
	ПараметрыДанных.Вставить("ДеревоЗначений",      ДеревоНоменклатуры);
	ПараметрыДанных.Вставить("ДвухУровневоеДерево", ДвухУровневоеДерево);
	ПараметрыДанных.Вставить("ИмяПоляПриемника",    "Номенклатура");
	ПараметрыДанных.Вставить("ИмяПоляИсточника",    "Номенклатура");
	
	ПланированиеСервер.ЗаполнитьТабличнуюЧастьПоДеревуЗначений(ПараметрыДанных);
	
КонецПроцедуры // СформироватьИтоговуюТаблицуНоменклатуры()

// Обработчик для формирования списка типа номенклатуры для отбора номенклатуры
//
&НаСервере
Функция ОбновитьПараметрыВыбора()
	
	ДеревоНоменклатуры = РеквизитФормыВЗначение("Номенклатура");
	Возврат Новый ФиксированныйМассив(ДеревоНоменклатуры.Строки.ВыгрузитьКолонку("Номенклатура"));
	
КонецФункции // ОбновитьПараметрыВыбора()

// Обработчик для формирования условного оформления для дерева значений "Номенклатура".
//
&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Если ПризнакРаспределения Тогда
		
		Для Каждого ТекЭлемент Из Номенклатура.ПолучитьЭлементы() Цикл
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Номенклатура");
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура.Номенклатура");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = ТекЭлемент.Номенклатура;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.АкварельноСиний);
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НоменклатураНоменклатура.Имя);
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НоменклатураКоличество.Имя);
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НоменклатураЦена.Имя);
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НоменклатураСуммаВсегоУпрНеРаспред.Имя);
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НоменклатураСуммаНДС.Имя);
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура.Номенклатура");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = ТекЭлемент.Номенклатура;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НоменклатураСуммаВсегоУпрНеРаспред.Имя);
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура.Номенклатура");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = ТекЭлемент.Номенклатура;
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура.СуммаВсегоУпр");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
			ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура.СуммаВсегоУпрНеРаспред");
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Синий);
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НоменклатураСуммаВсегоУпрНеРаспред.Имя);
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура.Номенклатура");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = ТекЭлемент.Номенклатура;
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура.СуммаВсегоУпр");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
			ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура.СуммаВсегоУпрНеРаспред");
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НоменклатураСуммаВсегоУпр.Имя);
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура.Номенклатура");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = ТекЭлемент.Номенклатура;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для загрузки результата 
//
&НаКлиенте
Процедура СформироватьИтоговуюТаблицу(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры // СформироватьИтоговуюТаблицу()

// Функция для вывода типа номенклатуры по номенклатуре
//
&НаСервере
Функция ПолучитьТипНоменклатуры()
	
	ТипНоменклатуры = Номенклатура.НайтиПоИдентификатору(Элементы.Номенклатура.ТекущаяСтрока).ПолучитьРодителя();
	
	Если ТипНоменклатуры = Неопределено Тогда
		Возврат Номенклатура.НайтиПоИдентификатору(Элементы.Номенклатура.ТекущаяСтрока).Номенклатура;
	Иначе
		Возврат ТипНоменклатуры.Номенклатура;
	КонецЕсли;
	
КонецФункции // ПолучитьТипНоменклатуры()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Структура - Содержит процедуру в которую будет передан ответ на вопрос и формы из которой
//                                        вызвано оповещение.
//
&НаКлиенте
Процедура Подключаемый_ПередЗакрытием(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОК(Неопределено);
	
КонецПроцедуры //Подключаемый_ПередЗакрытием()

#КонецОбласти

