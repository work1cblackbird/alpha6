///////////////////////////////////////////////////////////////////////////////
// Модуль формы "Заполнение простым способом"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СценарийПланирования        = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СценарийПланирования",        Неопределено);
	ФормаМастера                = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ФормаМастера",                Ложь);
	КоличествоПериодов          = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КоличествоПериодов",          0);
	КоэффициентРоста            = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КоэффициентРоста",            0);
	КоэффициентСезонности       = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КоэффициентСезонности",       0);
	ТипАнализа                  = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ТипАнализа",                  Неопределено);
	ПоказательПланирования      = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПоказательПланирования",      Неопределено);
	СпособОкругления            = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СпособОкругления",            0);
	НеУчитыватьПериодыБезДанных = ПолучитьЗначениеПараметраСтруктуры(Параметры, "НеУчитыватьПериодыБезДанных", Ложь);
	КоличествоСезонов           = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КоличествоСезонов",           0);
	СмещениеПланирования        = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СмещениеПланирования",        0);
	СпособУчетаОстатков         = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СпособУчетаОстатков",         Неопределено);
	
	Если НЕ ФормаМастера Тогда
		ХозОперация    = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ХозОперация", Справочники.ХозОперации.ПустаяСсылка());
		ПоКатегориям   = ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоКатегориям;
		ВалютаУпрУчета = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		Подразделение  = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПодразделениеКомпании", Справочники.ПодразделенияКомпании.ПустаяСсылка());
	Иначе
		ТипНоменклатуры = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ТипНоменклатуры");
		ДокументОснование = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ДокументОснование", Неопределено);
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			Подразделение = ДокументОснование.ПодразделениеКомпании;
		КонецЕсли;
	КонецЕсли;
	
	ИмяТабличнойЧасти = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ИмяТабличнойЧасти", "");
	Если ИмяТабличнойЧасти = "Товар" Тогда
		ИмяТабличнойЧасти = "Товары";
	ИначеЕсли ИмяТабличнойЧасти = "Услуга" Тогда
		ИмяТабличнойЧасти = "Услуги";
	КонецЕсли;
	
	ДатаПланирования = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ДатаПланирования", Дата('00010101'));
	Периодичность    = СценарийПланирования.Периодичность;
	ТипЦен           = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ТипЦен", Справочники.ТипыЦен.ПустаяСсылка());
	ДатаДокумента    = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Дата", Дата('00010101'));
	КурсДокумента    = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КурсДокумента", 0);
	
	Если НЕ ЗначениеЗаполнено(СценарийПланирования) ИЛИ НЕ ЗначениеЗаполнено(СценарийПланирования.Периодичность) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не выбран сценарий планирования, либо у выбранного сценария не указана периодичность.'"),
			, , , Отказ
		);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипАнализа) Тогда
		ТипАнализа = Перечисления.ТипыАнализа.ПоФактическимДаннымЗакупок;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СпособУчетаОстатков) Тогда
		СпособУчетаОстатков = Перечисления.СпособыУчетаОстатков.НеУчитывать;
	КонецЕсли;
	
	Если КоличествоПериодов=0 Тогда
		КоличествоПериодов=3;
	КонецЕсли;
	
	Если КоэффициентРоста=0 Тогда
		КоэффициентРоста = 1;
	КонецЕсли;
	
	Если КоэффициентСезонности=0 Тогда
		КоэффициентСезонности=1;
	КонецЕсли;
	
	Если СмещениеПланирования=0 Тогда
		СмещениеПланирования=1;
	КонецЕсли;
	
	Если КоличествоСезонов=0 Тогда
		КоличествоСезонов=1;
	КонецЕсли;
	
	НастроитьПолеОтбора(Подразделение);
	
	ИзменитьФильтр();
	
	УправлениеДиалогом();
	
	ПараметрыТипаЦен = Новый Структура;
	ПараметрыТипаЦен.Вставить("ТипЦен",                    ТипЦен);
	ПараметрыТипаЦен.Вставить("КурсДокумента",             КурсДокумента);
	ПараметрыТипаЦен.Вставить("НадписьИнформацияОТипеЦен", Элементы.НадписьИнформацияОТипеЦен);
	ПланированиеСервер.СформироватьНадписьТипаЦены(ПараметрыТипаЦен);
	
	ВывестиПредставлениеПериода();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Обработчик события возникающего на клиенте перед закрытием формы.
//
// Параметры:
//  Форма                          - УправляемаяФорма   - Форма, в которой возникло событие.
//  Отказ                          - Булево - Признак отказа от создания формы.
//  ОбработчикПоложительногоОтвета - ОписаниеОповещения - Процедура в которую будет передано управление при
//                                                        положительном ответе на вопрос.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	УправлениеДиалогомКлиент.ПроверитьМодифицированностьДанныхПриЗакрытии(ЭтотОбъект,Отказ,Новый ОписаниеОповещения("Подключаемый_ПередЗакрытием", ЭтотОбъект));
	
КонецПроцедуры //ПередЗакрытием()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при изменении данных реквизита "ПоказательПланирования".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ПоказательПланированияПриИзменении(Элемент)
	
	ИзменитьФильтр();
	
КонецПроцедуры // ПоказательПланированияПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "ТипАнализа".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ТипАнализаПриИзменении(Элемент)
	
	ИзменитьФильтр();
	
КонецПроцедуры // ТипАнализаПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "КоличествоСезонов".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура КоличествоСезоновПриИзменении(Элемент)
	
	КоличествоСезоновПриИзмененииНаСервере();
	
КонецПроцедуры // КоличествоСезоновПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "КоличествоСезонов" в контексте сервера.
//
&НаСервере
Процедура КоличествоСезоновПриИзмененииНаСервере()
	
	ПланированиеСервер.ПроверкаКоличестваСезонов(ЭтотОбъект, Периодичность);
	ВывестиПредставлениеПериода();
	
КонецПроцедуры // КоличествоСезоновПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "СмещениеПланирования".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура СмещениеПланированияПриИзменении(Элемент)
	
	ВывестиПредставлениеПериода();
	
КонецПроцедуры // СмещениеПланированияПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "КоличествоПериодов".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура КоличествоПериодовПриИзменении(Элемент)
	
	КоличествоПериодовПриИзмененииНаСервере();
	
КонецПроцедуры // КоличествоПериодовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "КоличествоПериодов" в контексте сервера.
//
&НаСервере
Процедура КоличествоПериодовПриИзмененииНаСервере()
	
	ПланированиеСервер.ПроверкаКоличестваСезонов(ЭтотОбъект, Периодичность);
	ВывестиПредставлениеПериода();
	
КонецПроцедуры // КоличествоПериодовПриИзмененииНаСервере()

// Обработчик события события возникающего на клиенте при регулировании поля ввода "КоэффициентРоста".
//
&НаКлиенте
Процедура КоэффициентРостаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КоэффициентРоста = Макс(КоэффициентРоста + Направление*0.01, 0);
	
КонецПроцедуры // КоэффициентРостаРегулирование()

// Обработчик события события возникающего на клиенте при регулировании поля ввода "КоэффициентСезонности".
//
&НаКлиенте
Процедура КоэффициентСезонностиРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КоэффициентСезонности = Макс(КоэффициентСезонности + Направление*0.01, 0);
	
КонецПроцедуры // КоэффициентСезонностиРегулирование()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик выполнения команды "Выбрать" на сервере
//
&НаСервере
Процедура ВыбратьНаСервере()
	
	ВВалютеУчета  = ТипЦен.ВВалютеУчета;
	РабочийТипЦен = ТипЦен;
	ПоКатегориям  = ХозОперация = Справочники.ХозОперации.БюджетЗакупокПоКатегориям;
	ПоКоличеству  = ПоказательПланирования;
	КоличествоПрошлыхПериодов = КоличествоПериодов*КоличествоСезонов;
	
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыЗапроса();
	МаксКоличествоПериодов = ПланированиеСервер.ПолучитьМаксимальноеКоличествоПериодов(ЭтотОбъект, ДополнительныеПараметры, ?(ПоКатегориям, "Номенклатура.ТипНоменклатуры", "Номенклатура"));
	
	// Если заполняем услуги
	Если МаксКоличествоПериодов = 0 И ИмяТабличнойЧасти = "Услуги" И ТипАнализа = Перечисления.ТипыАнализа.ПоФактическимДаннымЗакупок Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
			|	ПоступлениеТоваровТовары.Номенклатура,
			|	СУММА(ПоступлениеТоваровТовары.Количество) КАК Количество,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПоступлениеТоваровТовары.Ссылка.Дата) КАК КоличествоПериодов
			|ИЗ
			|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
			|ГДЕ
			|	ПоступлениеТоваровТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
			|	И ПоступлениеТоваровТовары.Ссылка.ПодразделениеКомпании = &Подразделение
			|	И ПоступлениеТоваровТовары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
			|	И ПоступлениеТоваровТовары.Ссылка.Проведен
			|	И НЕ ПоступлениеТоваровТовары.Ссылка.ПометкаУдаления
			|
			|СГРУППИРОВАТЬ ПО
			|	ПоступлениеТоваровТовары.Номенклатура
			|
			|ИМЕЮЩИЕ
			|	СУММА(ПоступлениеТоваровТовары.Количество) <> 0";
		
		// Получим даты границ анализируемого периода
		ПараметрыДляАнализаДат = Новый Структура;
		ПараметрыДляАнализаДат.Вставить("Периодичность", Периодичность);
		ПараметрыДляАнализаДат.Вставить("ДатаПланирования", ДатаПланирования);
		ПланированиеСервер.ПолучитьПериодыПланирования(ЭтотОбъект, ПараметрыДляАнализаДат);
		
		Запрос.УстановитьПараметр("НачалоПериода", ПараметрыДляАнализаДат.СтруктураСезонов.НачалоПериода0);
		Запрос.УстановитьПараметр("КонецПериода",  ПараметрыДляАнализаДат.СтруктураСезонов.КонецПериода0);
		Запрос.УстановитьПараметр("Подразделение", ДополнительныеПараметры.Подразделение);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			МаксКоличествоПериодов = Выборка.КоличествоПериодов;
		КонецЕсли;
	КонецЕсли;
	
	Если НеУчитыватьПериодыБезДанных Тогда
		
		Если МаксКоличествоПериодов = 0 Тогда
			Если ТипАнализа = Перечисления.ТипыАнализа.ПоФактическимДаннымПродаж Тогда
				ТекстТипАнализа = НСтр("ru = 'по продажам'");
			ИначеЕсли ТипАнализа=Перечисления.ТипыАнализа.ПоФактическимДаннымЗакупок Тогда
				ТекстТипАнализа = НСтр("ru = 'по закупкам'");
			ИначеЕсли ТипАнализа=Перечисления.ТипыАнализа.ПоРанееПланируемымДаннымПродаж Тогда
				ТекстТипАнализа = НСтр("ru = 'по ранее планируемым данным продаж'");
			ИначеЕсли ТипАнализа = Перечисления.ТипыАнализа.ПоРанееПланируемымДаннымЗакупок Тогда
				ТекстТипАнализа = НСтр("ru = 'по ранее планируемым данным закупок'");	
			КонецЕсли;
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Для анализа %1 и заданного периода планирования нет данных.'"),ТекстТипАнализа)
			);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли (((КоличествоСезонов - 1) * 12) + (КоличествоПериодов)) > МаксКоличествоПериодов Тогда
		
		Если ТипАнализа = Перечисления.ТипыАнализа.ПоФактическимДаннымПродаж Тогда
			ТекстТипАнализа = НСтр("ru = 'по продажам'");
		ИначеЕсли ТипАнализа = Перечисления.ТипыАнализа.ПоФактическимДаннымЗакупок Тогда
			ТекстТипАнализа = НСтр("ru = 'по закупкам'");
		ИначеЕсли ТипАнализа= Перечисления.ТипыАнализа.ПоРанееПланируемымДаннымПродаж Тогда
			ТекстТипАнализа = НСтр("ru = 'по ранее планируемым данным продаж'");
		ИначеЕсли ТипАнализа = Перечисления.ТипыАнализа.ПоРанееПланируемымДаннымЗакупок Тогда
			ТекстТипАнализа = НСтр("ru = 'по ранее планируемым данным закупок'");	
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Максимально допустимое количество периодов для анализа %1 для текущего планируемого периода: %2 %3.'"),
				ТекстТипАнализа,
				МаксКоличествоПериодов,
				ПланированиеСервер.ВернутьСтрокуКоличествоПериодовДляАнализа(МаксКоличествоПериодов, Периодичность)
				)
			);
		КоличествоПериодов = Мин(МаксКоличествоПериодов, КоличествоПериодов);
		СмещениеПланирования = Мин(МаксКоличествоПериодов - КоличествоПериодов + 1, СмещениеПланирования);
		КоличествоСезонов = Мин(КоличествоСезонов, Макс(Цел(МаксКоличествоПериодов / 12),1));
		ВывестиПредставлениеПериода();
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса="";
	ТекстОтбора = "";
	ТекстОтбораДопТаблиц = "";
	Если ДополнительныеПараметры.Свойство("ОтборПоПодразделению") Тогда
		ТекстОтбора = Символы.ПС + " И " + ДополнительныеПараметры.ОтборПоПодразделению;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ДопОтборы") Тогда
		ТекстОтбора = ТекстОтбора + Символы.ПС + "И " + ДополнительныеПараметры.ДопОтборы.ТекстОтбора;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОтборыДопТаблиц") Тогда
		ТекстОтбораДопТаблиц = ТекстОтбораДопТаблиц + Символы.ПС + "И " + СтрЗаменить(ДополнительныеПараметры.ОтборыДопТаблиц.ТекстОтбора, "ТаблицаДанных.", "");
	КонецЕсли;
	
	СтруктураПолей = Новый Структура;
	СтрПериодичность = СокрЛП(Периодичность);
	УчетСкладскихОстатков = СпособУчетаОстатков <> Перечисления.СпособыУчетаОстатков.НеУчитывать;
	УчетЦены = Истина;
	Если ТипАнализа = Перечисления.ТипыАнализа.ПоФактическимДаннымПродаж Тогда
		
		// ПО РЕГИСТРУ ПРОДАЖ
		СтруктураПолей.Вставить("Поля", Новый Структура("Номенклатура, ТипНоменклатуры, Весовой"));
		СтруктураПолей.Вставить("Количество");
		
		ТекстЗапроса  = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		| МАКСИМУМ(" + ?(ПоКатегориям, "
		|   (ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ОсновнаяСтавкаНДС)).Ставка","
		|   ТаблицаДанных.Номенклатура.СтавкаНДС.Ставка" ) + ") КАК Ставка,
		|	ТаблицаДанных.Номенклатура.Наименование КАК Представление,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, " + СтрПериодичность + ") КАК Период,
		|	ТаблицаДанных.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТаблицаДанных.Номенклатура.ТипНоменклатуры.Весовой КАК Весовой,
		|	СУММА(ТаблицаДанных.Количество) КАК Количество,
		|	СУММА(ТаблицаДанных.СуммаУпр) КАК СуммаУпр,
		|	0 КАК СуммаНДС,
		|	" + Строка(СпособОкругления) + " КАК СпособОкругления
		|ПОМЕСТИТЬ 
		|	ТаблицаДанных
		|
		|ИЗ
		|	РегистрНакопления.Продажи КАК ТаблицаДанных
		|ГДЕ
		| #ТекстОтбора# 
		|	" + ТекстОтбора + "
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДанных.Номенклатура,
		|	НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, " + СтрПериодичность + ")
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаДанных.Количество) <> 0
		|ИНДЕКСИРОВАТЬ ПО 
		|	Номенклатура";
		
	ИначеЕсли ТипАнализа = Перечисления.ТипыАнализа.ПоФактическимДаннымЗакупок Тогда
		
		//ПО РЕГИСТРУ ПАРТИЙ (ЗАКУПКИ)
		СтруктураПолей.Вставить("Поля", Новый Структура("Номенклатура, ТипНоменклатуры, Весовой"));
		СтруктураПолей.Вставить("Количество");
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|МАКСИМУМ("+?(ПоКатегориям, "(ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ОсновнаяСтавкаНДС)).Ставка", "ТаблицаДанных.Номенклатура.СтавкаНДС.Ставка") + ") КАК Ставка,
		|	ТаблицаДанных.Номенклатура.Наименование КАК Представление,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, " + СтрПериодичность + ") КАК Период,
		|	ТаблицаДанных.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТаблицаДанных.Номенклатура.ТипНоменклатуры.Весовой КАК Весовой,
		|	СУММА(ТаблицаДанных.Количество) КАК Количество,
		|	СУММА(ТаблицаДанных.СуммаУпр) КАК СуммаУпр,
		|	0 КАК СуммаНДС,
		|	" + Строка(СпособОкругления) + " КАК СпособОкругления
		|ПОМЕСТИТЬ 
		|	ТаблицаДанных
		|
		|ИЗ
		|	РегистрНакопления.ПартииТоваровКомпании КАК ТаблицаДанных
		|ГДЕ
		| #ТекстОтбора# 
		|	"+ ТекстОтбора +"
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДанных.Номенклатура,
		|	НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, " + СтрПериодичность + ")
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаДанных.Количество)<>0";
		
		Если ИмяТабличнойЧасти = "Услуги" Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|МАКСИМУМ("+?(ПоКатегориям, "(ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ОсновнаяСтавкаНДС)).Ставка", "ПоступлениеТоваровТовары.Номенклатура.СтавкаНДС.Ставка") + ") КАК Ставка,
				|	ПоступлениеТоваровТовары.Номенклатура.Наименование,
				|	ПоступлениеТоваровТовары.Номенклатура,
				|	НАЧАЛОПЕРИОДА(ПоступлениеТоваровТовары.Ссылка.Дата, " + СтрПериодичность + "),
				|	ПоступлениеТоваровТовары.Номенклатура.ТипНоменклатуры,
				|	ПоступлениеТоваровТовары.Номенклатура.ТипНоменклатуры.Весовой,
				|	СУММА(ПоступлениеТоваровТовары.Количество),
				|	СУММА(ПоступлениеТоваровТовары.СуммаВсего),
				|	СУММА(ПоступлениеТоваровТовары.СуммаНДС),
				|	" + Строка(СпособОкругления) + " КАК СпособОкругления
				|ИЗ
				|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
				|ГДЕ
				|	ПоступлениеТоваровТовары.Ссылка.Дата МЕЖДУ &НачалоПериода0 И &КонецПериода0
				|	И ПоступлениеТоваровТовары.Ссылка.ПодразделениеКомпании = &Подразделение
				|	И ПоступлениеТоваровТовары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
				|	И ПоступлениеТоваровТовары.Ссылка.Проведен
				|	И НЕ ПоступлениеТоваровТовары.Ссылка.ПометкаУдаления
				|
				|СГРУППИРОВАТЬ ПО
				|	ПоступлениеТоваровТовары.Номенклатура,
				|	НАЧАЛОПЕРИОДА(ПоступлениеТоваровТовары.Ссылка.Дата, " + СтрПериодичность + "),
				|	ПоступлениеТоваровТовары.Номенклатура.Наименование,
				|	ПоступлениеТоваровТовары.Номенклатура.ТипНоменклатуры,
				|	ПоступлениеТоваровТовары.Номенклатура.ТипНоменклатуры.Весовой,
				|	ПоступлениеТоваровТовары.Ссылка,
				|	ПоступлениеТоваровТовары.Ссылка
				|
				|ИМЕЮЩИЕ
				|	СУММА(ПоступлениеТоваровТовары.Количество) <> 0";
		КонецЕсли;
		
	ИначеЕсли ТипАнализа=Перечисления.ТипыАнализа.ПоРанееПланируемымДаннымЗакупок Тогда
		
		// ПО РЕГИСТРУ ПЛАНИРОВАНИЯ ЗАКУПОК
		Если Не ПоКатегориям Тогда
			
			СтруктураПолей.Вставить("Поля", Новый Структура("Номенклатура, ТипНоменклатуры, Весовой"));
			СтруктураПолей.Вставить("Количество");
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|   ТаблицаДанных.Номенклатура.СтавкаНДС.Ставка КАК Ставка,
			|	ТаблицаДанных.Номенклатура.Наименование КАК Представление,
			|	ВЫРАЗИТЬ(ТаблицаДанных.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
			|	НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, " + СтрПериодичность + ") КАК Период,
			|	ТаблицаДанных.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
			|	ТаблицаДанных.Номенклатура.ТипНоменклатуры.Весовой КАК Весовой,
			|	СУММА(ТаблицаДанных.Количество) КАК Количество,
			|	СУММА(ТаблицаДанных.СуммаУпр) КАК СуммаУпр,
			|	0 КАК СуммаНДС,
			|	" + Строка(СпособОкругления) + " КАК СпособОкругления
			|ПОМЕСТИТЬ 
			|	ТаблицаДанных
			|ИЗ
			|	РегистрНакопления.БюджетЗакупок КАК ТаблицаДанных
			|ГДЕ
			|	#ТекстОтбора# 
			|	" + ТекстОтбора + "
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаДанных.Номенклатура,
			|	НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, " + СтрПериодичность + ")
			|ИМЕЮЩИЕ
			|	СУММА(ТаблицаДанных.Количество)<>0
			|ИНДЕКСИРОВАТЬ ПО 
			|	Номенклатура";
			
		Иначе
			
			УчетСкладскихОстатков = Ложь;
			УчетЦены = Ложь;
			СтруктураПолей.Вставить("Поля", Новый Структура("Номенклатура"));
			ТекстЗапроса ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаДанных.Номенклатура.Наименование КАК Представление,
			|	НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, " + СтрПериодичность + ") КАК Период,
			|	ВЫРАЗИТЬ(ТаблицаДанных.Номенклатура КАК Справочник.ТипыНоменклатуры) КАК Номенклатура,
			|	СУММА(ТаблицаДанных.СуммаУпр) КАК СуммаУпр,
			|	СУММА(ТаблицаДанных.СуммаНДС) КАК СуммаНДС,
			| " + Строка(СпособОкругления) + " КАК СпособОкругления
			|ПОМЕСТИТЬ 
			|	ТаблицаРегистра
			|ИЗ
			|	РегистрНакопления.БюджетЗакупок КАК ТаблицаДанных
			|ГДЕ
			|	#ТекстОтбора#
			|	" + ТекстОтбора + "
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаДанных.Номенклатура,
			|	НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, " + СтрПериодичность + ")";
			
		КонецЕсли;
		
	ИначеЕсли ТипАнализа = Перечисления.ТипыАнализа.ПоРанееПланируемымДаннымПродаж Тогда
		
		// ПО РЕГИСТРУ ПЛАНИРОВАНИЯ ПРОДАЖ
		Если Не ПоКатегориям Тогда
			
			СтруктураПолей.Вставить("Поля", Новый Структура("Номенклатура, ТипНоменклатуры, Весовой"));
			СтруктураПолей.Вставить("Количество");
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|   ТаблицаДанных.Номенклатура.СтавкаНДС.Ставка КАК Ставка,
			|	ТаблицаДанных.Номенклатура.Наименование КАК Представление,
			|	ВЫРАЗИТЬ(ТаблицаДанных.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
			|	НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, " + СтрПериодичность + ") КАК Период,
			|	ТаблицаДанных.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
			|	ТаблицаДанных.Номенклатура.ТипНоменклатуры.Весовой КАК Весовой,
			|	" + Строка(СпособОкругления) + " КАК СпособОкругления,
			|	СУММА(ТаблицаДанных.Количество) КАК Количество,
			|	СУММА(ТаблицаДанных.СуммаУпр) КАК СуммаУпр,
			|	0 КАК СуммаНДС
			|ПОМЕСТИТЬ 
			|	ТаблицаДанных
			|ИЗ
			|	РегистрНакопления.БюджетПродаж КАК ТаблицаДанных
			|ГДЕ
			|	#ТекстОтбора#
			|	" + ТекстОтбора + "
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаДанных.Номенклатура,
			|	НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, " + СтрПериодичность + ")
			|ИМЕЮЩИЕ
			|	СУММА(ТаблицаДанных.Количество)<> 0
			|ИНДЕКСИРОВАТЬ ПО 
			|	Номенклатура";
			
		Иначе
			
			УчетСкладскихОстатков = Ложь;
			УчетЦены = Ложь;
			СтруктураПолей.Вставить("Поля", Новый Структура("Номенклатура"));
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|   ТаблицаДанных.Номенклатура.Наименование КАК Представление,
			|	ВЫРАЗИТЬ(ТаблицаДанных.Номенклатура КАК Справочник.ТипыНоменклатуры) КАК Номенклатура,
			|	НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, " + СтрПериодичность + ") КАК Период,
			|	СУММА(ТаблицаДанных.СуммаУпр) КАК СуммаУпр,
			|	СУММА(ТаблицаДанных.СуммаНДС) КАК СуммаНДС,
			| " + Строка(СпособОкругления) + " КАК СпособОкругления
			|ПОМЕСТИТЬ 
			|	ТаблицаРегистра
			|ИЗ
			|	РегистрНакопления.БюджетПродаж КАК ТаблицаДанных
			|ГДЕ
			|	#ТекстОтбора#
			|	"+ ТекстОтбора +"
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаДанных.Номенклатура,
			|	НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, " + СтрПериодичность + ")";
		КонецЕсли;
	КонецЕсли;
	
	// Получим даты границ анализируемого периода
	ПараметрыДляАнализаДат = Новый Структура;
	ПараметрыДляАнализаДат.Вставить("Периодичность", Периодичность);
	ПараметрыДляАнализаДат.Вставить("ДатаПланирования", ДатаПланирования);
	ПланированиеСервер.ПолучитьПериодыПланирования(ЭтотОбъект, ПараметрыДляАнализаДат);
	
	Запрос = Новый Запрос();
	МенеджерДанныхРегистра = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерДанныхРегистра;
	
	Для Каждого ТекПараметр Из ПараметрыДляАнализаДат.СтруктураСезонов Цикл
		Запрос.УстановитьПараметр(ТекПараметр.Ключ, ТекПараметр.Значение);
	КонецЦикла;
	
	Если ДополнительныеПараметры.Свойство("ДопОтборы") Тогда
		Для Каждого ТекПараметр Из ДополнительныеПараметры.ДопОтборы.Параметры Цикл
			Запрос.УстановитьПараметр(ТекПараметр.Ключ, ТекПараметр.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если УчетСкладскихОстатков И ДополнительныеПараметры.Свойство("ОтборыДопТаблиц") Тогда
		Для Каждого ТекПараметр Из ДополнительныеПараметры.ОтборыДопТаблиц.Параметры Цикл
			Запрос.УстановитьПараметр(ТекПараметр.Ключ, ТекПараметр.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("Подразделение") Тогда
		Запрос.УстановитьПараметр("Подразделение", ДополнительныеПараметры.Подразделение);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "#ТекстОтбора#", ПараметрыДляАнализаДат.ТекстОтбора);
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.Выполнить();
	
	ИтоговыйТекстСоединения = "";
	ИтоговыйТекстВыборки = "";
	
	Если УчетСкладскихОстатков Тогда
		Запрос.УстановитьПараметр("ДополнительныйРеквизитМинимум",  Перечисления.ДополнительныеРеквизитыНоменклатуры.МинимальныйОстаток);
		Запрос.УстановитьПараметр("ДополнительныйРеквизитМаксимум", Перечисления.ДополнительныеРеквизитыНоменклатуры.МаксимальныйЗапас);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		| ДополнительныеРеквизиты.Номенклатура КАК Номенклатура,
		| МИНИМУМ(ДополнительныеРеквизиты.МинОстаток) КАК МинОстаток,
		| МИНИМУМ(ДополнительныеРеквизиты.МинОстаток) КАК МаксОстаток
		| ПОМЕСТИТЬ ДополнительныеРеквизиты
		|ИЗ(
		|	ВЫБРАТЬ
		|		ДополнительныеРеквизитыНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		| 		ДополнительныеРеквизитыНоменклатурыСрезПоследних.ЗначениеРеквизита КАК МинОстаток,
		| 		0 КАК МаксОстаток
		|	ИЗ
		|  		РегистрСведений.ДополнительныеРеквизитыНоменклатуры.СрезПоследних(
		| 		 &ДатаДокумента,
		|  		 ДополнительныйРеквизит = &ДополнительныйРеквизитМинимум " + ТекстОтбораДопТаблиц + ") КАК ДополнительныеРеквизитыНоменклатурыСрезПоследних
		|
		|	ОБЪЕДИНИТЬ ВСЕ 
		|
		| 	ВЫБРАТЬ
		| 		ДополнительныеРеквизитыНоменклатурыСрезПоследних.Номенклатура,
		| 		0,
		| 		ДополнительныеРеквизитыНоменклатурыСрезПоследних.ЗначениеРеквизита
		|	ИЗ
		| 		РегистрСведений.ДополнительныеРеквизитыНоменклатуры.СрезПоследних(
		| 		&ДатаДокумента,
		| 		ДополнительныйРеквизит = &ДополнительныйРеквизитМаксимум " + ТекстОтбораДопТаблиц + ") КАК ДополнительныеРеквизитыНоменклатурыСрезПоследних) КАК ДополнительныеРеквизиты
		|СГРУППИРОВАТЬ ПО
		|	ДополнительныеРеквизиты.Номенклатура
		|ИНДЕКСИРОВАТЬ ПО 
		|	Номенклатура";
		
		Запрос.Выполнить();
		
		ИтоговыйТекстВыборки = ИтоговыйТекстВыборки + ",
		|ЕСТЬNULL(ДополнительныеРеквизиты.МинОстаток, 0) КАК МинОстаток, 
		|ЕСТЬNULL(ДополнительныеРеквизиты.МаксОстаток, 0) КАК МаксОстаток";
		
		ИтоговыйТекстСоединения = "ЛЕВОЕ СОЕДИНЕНИЕ ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		| ПО ТаблицаДанных.Номенклатура = ДополнительныеРеквизиты.Номенклатура";
		
	КонецЕсли;
	
	Если УчетЦены Тогда;
		
		ТекстЦена = "ЦеныСрезПоследних.Цена";
		// Если расчетная цена получим базовую цену
		Пока РабочийТипЦен.Рассчитывается Цикл
			Если РабочийТипЦен.ПроцентСкидкиНаценки<>0 Тогда
				ТекстЦена = "("+ТекстЦена+"+"+ТекстЦена+"*"+Формат(РабочийТипЦен.ПроцентСкидкиНаценки / 100,"ЧРД=.")+")";
			КонецЕсли;
			РабочийТипЦен = РабочийТипЦен.БазовыйТипЦен;
		КонецЦикла;
		
		Курс = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(Константы.ВалютаУправленческогоУчетаКомпании.Получить(), ДатаДокумента);
		
		Запрос.УстановитьПараметр("ТипЦен", РабочийТипЦен);
		Запрос.УстановитьПараметр("КурсУпрВалюты", ?(Курс=0, 1, Курс));
		Запрос.УстановитьПараметр("ВыбВалютаЦены", РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(РабочийТипЦен, Неопределено, Ложь));
		
		// Таблица данных
		ТекТекстОтбора = "";
		Если ДополнительныеПараметры.Свойство("ОтборПоПодразделению") Тогда
			ТекТекстОтбора = Символы.ПС+" И "+?(СтрНайти(ДополнительныеПараметры.ОтборПоПодразделению, "СкладКомпании") = 0, СтрЗаменить(ДополнительныеПараметры.ОтборПоПодразделению,"ПодразделениеКомпании","Ссылка"), СтрЗаменить(ДополнительныеПараметры.ОтборПоПодразделению,"СкладКомпании.ПодразделениеКомпании","Ссылка"));
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанных.Ссылка КАК Подразделение
		|ИЗ
		|	Справочник.ПодразделенияКомпании КАК ТаблицаДанных
		|ГДЕ
		|	(НЕ ТаблицаДанных.ПометкаУдаления)"+ТекТекстОтбора+"
		|";
		
		ТаблицаИерархииПодразделений = Новый ТаблицаЗначений;
		ТаблицаИерархииПодразделений.Колонки.Добавить("Подразделение",Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
		ТаблицаИерархииПодразделений.Колонки.Добавить("Родитель",Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
		ТаблицаИерархииПодразделений.Колонки.Добавить("Уровень",Новый ОписаниеТипов("Число"));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекущееПодразделение = Выборка.Подразделение;
			Уровень = 0;
			Пока ЗначениеЗаполнено(ТекущееПодразделение) Цикл
				СтрокаПодразделения = ТаблицаИерархииПодразделений.Добавить();
				СтрокаПодразделения.Подразделение = Выборка.Подразделение;
				СтрокаПодразделения.Родитель = ТекущееПодразделение;
				СтрокаПодразделения.Уровень = Уровень;
				
				// Получаем родителя подразделения
				ТекущееПодразделение = ТекущееПодразделение.Родитель;
				Уровень = Уровень + 1;
			КонецЦикла;
			СтрокаПодразделения = ТаблицаИерархииПодразделений.Добавить();
			СтрокаПодразделения.Подразделение = Выборка.Подразделение;
			СтрокаПодразделения.Родитель = Справочники.ПодразделенияКомпании.ПустаяСсылка();
			СтрокаПодразделения.Уровень = Уровень;
		КонецЦикла;
		
		ТекстЗапросаЦены = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаПодразделений.Подразделение КАК Подразделение,
		|	ТаблицаПодразделений.Родитель КАК Родитель,
		|	ТаблицаПодразделений.Уровень КАК Уровень
		|ПОМЕСТИТЬ ТаблицаПодразделений
		|ИЗ
		|	&ТаблицаИерархииПодразделений КАК ТаблицаПодразделений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаПодразделений.Подразделение КАК Подразделение,
		|	ТаблицаПодразделений.Родитель КАК Родитель,
		|	ТаблицаПодразделений.Уровень КАК Уровень,
		|	ЦеныСрезПоследних.Номенклатура КАК Номенклатура,
		|	ВЫРАЗИТЬ(" + ТекстЦена + " * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) / ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1) / &КурсУпрВалюты КАК ЧИСЛО(15,2)) КАК Цена
		|
		|ПОМЕСТИТЬ ТаблицаДанныхПоЦенам
		|
		|ИЗ ТаблицаПодразделений КАК ТаблицаПодразделений
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Цены.СрезПоследних(&ДатаДокумента,
		|		ТипЦен = &ТипЦен
		|		И Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|		И ХарактеристикаНоменклатуры=ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		И ЕдиницаИзмерения=ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|		И ПодразделениеКомпании В (ВЫБРАТЬ РАЗЛИЧНЫЕ ТаблицаПодразделений.Родитель ИЗ ТаблицаПодразделений КАК ТаблицаПодразделений)
		|		И Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ ТаблицаДанных.Номенклатура ИЗ ТаблицаДанных КАК ТаблицаДанных)) КАК ЦеныСрезПоследних" + ?(ВВалютеУчета, "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
		|			ПО ЦеныСрезПоследних.Номенклатура.ВалютаУчета = КурсыВалютСрезПоследних.Валюта", "
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВыбВалютаЦены) КАК КурсыВалютСрезПоследних
		|			ПО ИСТИНА") + "
		|	ПО ТаблицаПодразделений.Родитель = ЦеныСрезПоследних.ПодразделениеКомпании
		|ГДЕ
		|	ЦеныСрезПоследних.Цена > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ  РАЗРЕШЕННЫЕ
		|	ТаблицаДанныхПоЦенам.Номенклатура,
		|	СРЕДНЕЕ(ТаблицаДанныхПоЦенам.Цена) КАК Цена
		|	
		|ПОМЕСТИТЬ ТаблицаЦен
		|	
		|ИЗ
		|	ТаблицаДанныхПоЦенам КАК ТаблицаДанныхПоЦенам
		|ГДЕ
		|	ТаблицаДанныхПоЦенам.Уровень В
		|			(ВЫБРАТЬ
		|				МИНИМУМ(Табл.Уровень)
		|			ИЗ
		|				ТаблицаДанныхПоЦенам КАК Табл
		|			СГРУППИРОВАТЬ ПО
		|				Табл.Номенклатура,
		|				Табл.Подразделение)
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДанныхПоЦенам.Номенклатура
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаПодразделений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаДанныхПоЦенам";
		
		Запрос.Текст = ТекстЗапросаЦены;
		Запрос.УстановитьПараметр("ТаблицаИерархииПодразделений",ТаблицаИерархииПодразделений);
		Запрос.Выполнить();
		
		ИтоговыйТекстВыборки = ИтоговыйТекстВыборки + ",
		|ЕСТЬNULL(ТаблицаЦен.Цена, 0) КАК Цена";
		
		ИтоговыйТекстСоединения = ИтоговыйТекстСоединения + "
		|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦен КАК ТаблицаЦен
		| ПО ТаблицаДанных.Номенклатура = ТаблицаЦен.Номенклатура";
		
	КонецЕсли;
	
	Если ИтоговыйТекстСоединения <> "" Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|   ТаблицаДанных.Ставка КАК Ставка,
		|	ТаблицаДанных.Представление КАК Представление,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Период КАК Период,
		|	ТаблицаДанных.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТаблицаДанных.Весовой КАК Весовой,
		|	ТаблицаДанных.Количество КАК Количество,
		|	ТаблицаДанных.СуммаУпр КАК СуммаУпр,
		|	ТаблицаДанных.СуммаНДС КАК СуммаНДС,
		|	ТаблицаДанных.СпособОкругления КАК СпособОкругления" + ИтоговыйТекстВыборки + "
		|ПОМЕСТИТЬ ТаблицаРегистра
		|ИЗ ТаблицаДанных КАК ТаблицаДанных
		|" + ИтоговыйТекстСоединения;
		Запрос.Выполнить();
		
		Если УчетСкладскихОстатков Тогда
			Запрос.Текст = "УНИЧТОЖИТЬ ДополнительныеРеквизиты";
			Запрос.Выполнить();
		КонецЕсли;
		
		Если УчетЦены Тогда
			Запрос.Текст = "УНИЧТОЖИТЬ ТаблицаЦен";
			Запрос.Выполнить();
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КоэффициентРостаПродаж", КоэффициентРоста);
	СтруктураПараметров.Вставить("КоэффициентСезонности", КоэффициентСезонности);
	СтруктураПараметров.Вставить("КоличествоПрошлыхПериодов", КоличествоПрошлыхПериодов);
	СтруктураПараметров.Вставить("ДатаДокумента", ДатаДокумента);
	СтруктураПараметров.Вставить("СпособУчетаСкладскихОстатков", СпособУчетаОстатков);
	СтруктураПараметров.Вставить("ПоКоличеству", ПоКоличеству);
	СтруктураПараметров.Вставить("СтрПериодичность", СтрПериодичность);
	СтруктураПараметров.Вставить("НеУчитыватьПериодыБезДанных", НеУчитыватьПериодыБезДанных);
	
	ДанныеНоменклатуры = ПланированиеСервер.ОбработатьРезультатНаивногоПрогнозирования(СтруктураПараметров, СтруктураПолей, МенеджерДанныхРегистра);
	
	Для Каждого ТекСтрока Из ДанныеНоменклатуры Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), ТекСтрока);
	КонецЦикла;
	
	Если ПоКатегориям И (ТипАнализа = Перечисления.ТипыАнализа.ПоФактическимДаннымЗакупок ИЛИ ТипАнализа = Перечисления.ТипыАнализа.ПоФактическимДаннымПродаж) Тогда
		// свернем результирующую таблицу по типу номенклатуры
		Для Каждого ТекСтрока Из Результат Цикл
			ТекСтрока.Номенклатура = ТекСтрока.ТипНоменклатуры;
		КонецЦикла;
		ТипыНоменклатуры = РеквизитФормыВЗначение("Результат");
		ТипыНоменклатуры.Свернуть("Номенклатура", "Количество, Цена, СуммаВсегоУпр, СуммаНДС, Ставка");
		Результат.Очистить();
		Для Каждого ТекСтрока Из ТипыНоменклатуры Цикл
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ВыбратьНаСервере()

// Обработчик команды "Выбрать"
//
&НаКлиенте
Процедура Выбрать(Команда)
	
	Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран тип цен.'"));
		Возврат;
	КонецЕсли;
	
	Если КоличествоПериодов = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Количество периодов для анализа должно быть отлично от нуля.'"));
		Возврат;
	КонецЕсли;
	
	ВыбратьНаСервере();
	
	РезультатВыбора = Новый Структура();
	РезультатВыбора.Вставить("КоличествоПериодов",          КоличествоПериодов);
	РезультатВыбора.Вставить("КоэффициентРостаПродаж",      КоэффициентРоста);
	РезультатВыбора.Вставить("КоэффициентСезонности",       КоэффициентСезонности);
	РезультатВыбора.Вставить("ТипАнализа",                  ТипАнализа);
	РезультатВыбора.Вставить("ПоказательПланирования",      ПоказательПланирования);
	РезультатВыбора.Вставить("СпособОкругления",            СпособОкругления);
	РезультатВыбора.Вставить("НеУчитыватьПериодыБезДанных", НеУчитыватьПериодыБезДанных);
	РезультатВыбора.Вставить("КоличествоСезонов",           КоличествоСезонов);
	РезультатВыбора.Вставить("СмещениеПланирования",        СмещениеПланирования);
	РезультатВыбора.Вставить("СпособУчетаОстатков",         СпособУчетаОстатков);
	
	ТаблицаРезультата = Новый Массив;
	Для Каждого ТекСтрока Из Результат Цикл
		
		НоваяСтрока = Новый Структура("Номенклатура, ТипНоменклатуры, Количество, Цена, СуммаВсегоУпр, СуммаНДС, СтавкаНДС");
		НоваяСтрока.Номенклатура    = ТекСтрока.Номенклатура;
		НоваяСтрока.ТипНоменклатуры = ТекСтрока.ТипНоменклатуры;
		НоваяСтрока.Количество      = ТекСтрока.Количество;
		НоваяСтрока.Цена            = ТекСтрока.Цена;
		НоваяСтрока.СуммаВсегоУпр   = ТекСтрока.СуммаВсегоУпр;
		НоваяСтрока.СуммаНДС        = ТекСтрока.СуммаНДС;
		НоваяСтрока.СтавкаНДС       = ТекСтрока.Ставка;
		ТаблицаРезультата.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	РезультатВыбора.Вставить("ТаблицаНоменклатуры", ТаблицаРезультата);
	РезультатВыбора.Вставить("СпособПоследнегоЗаполнения", 0);
	
	Модифицированность = Ложь;
	Закрыть(РезультатВыбора);
	
КонецПроцедуры // Выбрать()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает привязки, высоту, режим свертки.
//
&НаСервере
Процедура УправлениеДиалогом()
	
	Если ПоКатегориям Тогда
		Элементы.СпособУчетаОстатков.Доступность    = Ложь;
		СпособУчетаОстатков                         = Перечисления.СпособыУчетаОстатков.НеУчитывать;
		Элементы.ПоказательПланирования.Доступность = Ложь;
		ПоказательПланирования                      = Ложь;
		Элементы.СпособОкругления.Доступность       = Ложь;
		СпособОкругления = 0;
	КонецЕсли;
	
КонецПроцедуры // УправлениеДиалогом()

&НаСервере
Процедура ВывестиПредставлениеПериода()
	
	Если Периодичность=Перечисления.ПериодичностьПланирования.Месяц Тогда
		ПредставлениеПериода = Формат(ДатаПланирования, "ДФ='ММММ гггг ""г.""'");
	ИначеЕсли Периодичность=Перечисления.ПериодичностьПланирования.Квартал Тогда
		ПредставлениеПериода = Формат(ДатаПланирования, "ДФ='к ""квартал"" гггг ""г.""'");
	ИначеЕсли Периодичность=Перечисления.ПериодичностьПланирования.Год Тогда
		ПредставлениеПериода = Формат(ДатаПланирования, "ДФ='гггг ""г.""'");
	КонецЕсли;
	
	ПредставлениеПериода = НСтр("ru = 'Период планирования'") + Символы.НПП + ПредставлениеПериода + Символы.НПП 
							+ НСтр("ru = 'по данным за'") + Символы.НПП 
							+ ПланированиеСервер.ВывестиПредставлениеПериода(ЭтотОбъект, Периодичность, ДатаПланирования);
	Элементы.НадписьПредставлениеПериода.Заголовок = ПредставлениеПериода;
	
КонецПроцедуры // ВывестиПредставлениеПериода()

// возвращает дополнительные параметры запроса
//
&НаСервере
Функция ПолучитьДополнительныеПараметрыЗапроса()
	
	// Вычислим максимально допустимое количество периодов для анализа
	ДополнительныеПараметры = Новый Структура;
	
	ДеревоОтбора = РеквизитФормыВЗначение("Отбор");
	
	Если ТипАнализа=Перечисления.ТипыАнализа.ПоФактическимДаннымПродаж Тогда
		ЭлементОтбора = ДеревоОтбора.Строки.Найти("ПодразделениеОтгрузки", "ЛевоеЗначение");
		Если ЭлементОтбора.Использование Тогда
			СтрокаУсловия=СтрЗаменить(СтрЗаменить(Документы.БюджетЗакупок.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения),"#","ТаблицаДанных.ПодразделениеКомпании"),"&","&Подразделение");
			ДополнительныеПараметры.Вставить("ОтборПоПодразделению", СтрокаУсловия);
			ДополнительныеПараметры.Вставить("Подразделение", ЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
		
		СтрокаУсловияОтбора = ?(ИмяТабличнойЧасти="Товары", "ТаблицаДанных.Номенклатура.ТипНоменклатуры.ВидНоменклатуры<>ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)", "ТаблицаДанных.Номенклатура.ТипНоменклатуры.ВидНоменклатуры=ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)");
		ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура());
		СтрокаУсловияОтбораДляПартий = "";
		
		Если ТипНоменклатуры.Количество() > 0 Тогда
			СтрокаУсловияОтбора = НСтр("ru = 'ТаблицаДанных.Номенклатура.ТипНоменклатуры в (&ТипНоменклатуры)'");
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура("ТипНоменклатуры", ТипНоменклатуры));
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ОтборыДопТаблиц", СтрокаУсловияОтбора, Новый Структура("ТипНоменклатуры", ТипНоменклатуры));
			СтрокаУсловияОтбораДляПартий = СтрокаУсловияОтбораДляПартий + Символы.ПС+"И "+СтрокаУсловияОтбора;
		КонецЕсли;
		
		ЭлементОтбора =  ДеревоОтбора.Строки.Найти("Номенклатура", "ЛевоеЗначение");
		Если ЭлементОтбора.Использование Тогда
			СтрокаУсловияОтбора = СтрЗаменить(СтрЗаменить(Документы.БюджетЗакупок.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения),"#"," ТаблицаДанных.Номенклатура"+?(ПоКатегориям,".ТипНоменклатуры "," ")),"&","&Номенклатура");
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура("Номенклатура", ЭлементОтбора.ПравоеЗначение));
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ОтборыДопТаблиц", СтрокаУсловияОтбора, Новый Структура("Номенклатура", ЭлементОтбора.ПравоеЗначение));
			СтрокаУсловияОтбораДляПартий = СтрокаУсловияОтбораДляПартий + Символы.ПС+"И "+СтрокаУсловияОтбора;
		КонецЕсли;
		
		СтрокаУсловияОтбораДляПартий = СтрЗаменить(СтрокаУсловияОтбораДляПартий,"ТаблицаДанных","ПартииТоваровКомпании");
		
		ЭлементОтбора = ДеревоОтбора.Строки.Найти("ПодразделениеЗакупки", "ЛевоеЗначение");
		Если ЭлементОтбора.Использование Тогда
			
			СтрокаУсловия=СтрЗаменить(СтрЗаменить(Документы.БюджетЗакупок.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения),"#","ПартииТоваровКомпании.СкладКомпании.ПодразделениеКомпании"),"&","&Подразделение");
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ПартииТоваровКомпании.Партия КАК Партия             
			|ИЗ
			|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
			|ГДЕ
			| "+СтрокаУсловия+"          
			|	И ПартииТоваровКомпании.Период <= &ДатаПланирования
			|	И ПартииТоваровКомпании.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И ПартииТоваровКомпании.Количество <> 0
			|  "+СтрокаУсловияОтбораДляПартий;
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Подразделение", ЭлементОтбора.ПравоеЗначение);
			Запрос.УстановитьПараметр("ДатаПланирования", ДатаПланирования);
			Запрос.УстановитьПараметр("Номенклатура", ДеревоОтбора.Строки.Найти("Номенклатура", "ЛевоеЗначение").ПравоеЗначение);
			Запрос.УстановитьПараметр("ТипНоменклатуры", ТипНоменклатуры);
			
			Партии = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Партия");
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", Символы.НПП + НСтр("ru = 'ТаблицаДанных.Партия в (&Партии)'") + Символы.НПП, Новый Структура("Партии", Партии));
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("ИмяТаблицы", "Продажи");
		
	ИначеЕсли ТипАнализа = Перечисления.ТипыАнализа.ПоРанееПланируемымДаннымПродаж Тогда
		
		ЭлементОтбора = ДеревоОтбора.Строки.Найти("ПодразделениеОтгрузки", "ЛевоеЗначение");
		Если ЭлементОтбора.Использование Тогда
			СтрокаУсловия=СтрЗаменить(СтрЗаменить(Документы.БюджетЗакупок.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения),"#","ТаблицаДанных.ПодразделениеКомпании"),"&","&Подразделение");
			ДополнительныеПараметры.Вставить("ОтборПоПодразделению", СтрокаУсловия);
			ДополнительныеПараметры.Вставить("Подразделение",        ЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
		
		СтрокаУсловияОтбора = ?(ИмяТабличнойЧасти="Товары", "ТаблицаДанных.Номенклатура.ТипНоменклатуры.ВидНоменклатуры<>ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)", "ТаблицаДанных.Номенклатура.ТипНоменклатуры.ВидНоменклатуры=ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)");
		ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура());
		
		СтрокаУсловияОтбора = "ТаблицаДанных.СценарийПланирования=&СценарийПланирования
		| И ТаблицаДанных.Номенклатура ССЫЛКА Справочник."+?(ПоКатегориям, "ТипыНоменклатуры", "Номенклатура");
		ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура("СценарийПланирования", СценарийПланирования));
		
		Если (НЕ ПоКатегориям) И (ТипНоменклатуры.Количество() > 0) Тогда
			СтрокаУсловияОтбора = НСтр("ru = 'ТаблицаДанных.Номенклатура.ТипНоменклатуры в (&ТипНоменклатуры)'");
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура("ТипНоменклатуры", ТипНоменклатуры));
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ОтборыДопТаблиц", СтрокаУсловияОтбора, Новый Структура("ТипНоменклатуры", ТипНоменклатуры));
		КонецЕсли;
		ЭлементОтбора = ДеревоОтбора.Строки.Найти("Номенклатура", "ЛевоеЗначение");
		Если ЭлементОтбора.Использование Тогда
			СтрокаУсловияОтбора = СтрЗаменить(СтрЗаменить(Документы.БюджетЗакупок.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения),"#"," ТаблицаДанных.Номенклатура"+?(ПоКатегориям,".ТипНоменклатуры "," ")),"&","&Номенклатура");
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура("Номенклатура", ЭлементОтбора.ПравоеЗначение));
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ОтборыДопТаблиц", СтрокаУсловияОтбора, Новый Структура("Номенклатура", ЭлементОтбора.ПравоеЗначение));
		КонецЕсли;
		ДополнительныеПараметры.Вставить("ИмяТаблицы", "БюджетПродаж");
		
	ИначеЕсли ТипАнализа = Перечисления.ТипыАнализа.ПоФактическимДаннымЗакупок Тогда
		
		ЭлементОтбора = ДеревоОтбора.Строки.Найти("ПодразделениеЗакупки", "ЛевоеЗначение");
		Если ЭлементОтбора.Использование Тогда
			СтрокаУсловия = СтрЗаменить(СтрЗаменить(Документы.БюджетЗакупок.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения),"#","ТаблицаДанных.СкладКомпании.ПодразделениеКомпании"),"&","&Подразделение");
			ДополнительныеПараметры.Вставить("ОтборПоПодразделению", СтрокаУсловия);
			ДополнительныеПараметры.Вставить("Подразделение", ЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
		
		СтрокаУсловияОтбора = ?(ИмяТабличнойЧасти="Товары", "ТаблицаДанных.Номенклатура.ТипНоменклатуры.ВидНоменклатуры<>ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)", "ТаблицаДанных.Номенклатура.ТипНоменклатуры.ВидНоменклатуры=ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)");
		ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура());
		
		СтрокаУсловияОтбора="ТаблицаДанных.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ";
		ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура());
		
		Если ТипНоменклатуры.Количество() > 0 Тогда
			СтрокаУсловияОтбора = НСтр("ru = 'ТаблицаДанных.Номенклатура.ТипНоменклатуры в (&ТипНоменклатуры)'");
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура("ТипНоменклатуры", ТипНоменклатуры));
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ОтборыДопТаблиц", СтрокаУсловияОтбора, Новый Структура("ТипНоменклатуры", ТипНоменклатуры));
		КонецЕсли;
		
		ЭлементОтбора = ДеревоОтбора.Строки.Найти("Номенклатура", "ЛевоеЗначение");
		Если ЭлементОтбора.Использование Тогда
			СтрокаУсловияОтбора = СтрЗаменить(СтрЗаменить(Документы.БюджетЗакупок.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения),"#"," ТаблицаДанных.Номенклатура" + ?(ПоКатегориям,".ТипНоменклатуры ", " ")), "&", "&Номенклатура");
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура("Номенклатура", ЭлементОтбора.ПравоеЗначение));
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ОтборыДопТаблиц", СтрокаУсловияОтбора, Новый Структура("Номенклатура", ЭлементОтбора.ПравоеЗначение));
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("ИмяТаблицы", "ПартииТоваровКомпании");
		
	ИначеЕсли ТипАнализа = Перечисления.ТипыАнализа.ПоРанееПланируемымДаннымЗакупок Тогда
		
		ЭлементОтбора = ДеревоОтбора.Строки.Найти("ПодразделениеЗакупки", "ЛевоеЗначение");
		Если ЭлементОтбора.Использование Тогда
			СтрокаУсловия = СтрЗаменить(СтрЗаменить(Документы.БюджетЗакупок.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения),"#","ТаблицаДанных.ПодразделениеКомпании"), "&", "&Подразделение");
			ДополнительныеПараметры.Вставить("ОтборПоПодразделению", СтрокаУсловия);
			ДополнительныеПараметры.Вставить("Подразделение", ЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
		
		СтрокаУсловияОтбора = ?(ИмяТабличнойЧасти="Товары", "ТаблицаДанных.Номенклатура.ТипНоменклатуры.ВидНоменклатуры<>ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)", "ТаблицаДанных.Номенклатура.ТипНоменклатуры.ВидНоменклатуры=ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)");
		ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура());
		
		СтрокаУсловияОтбора = "ТаблицаДанных.СценарийПланирования=&СценарийПланирования
		| И ТаблицаДанных.Номенклатура ССЫЛКА Справочник." + ?(ПоКатегориям, "ТипыНоменклатуры", "Номенклатура");
		ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура("СценарийПланирования", СценарийПланирования));
		
		Если (Не ПоКатегориям) И (ТипНоменклатуры.Количество() > 0) Тогда
			СтрокаУсловияОтбора = НСтр("ru = 'ТаблицаДанных.Номенклатура.ТипНоменклатуры в (&ТипНоменклатуры)'");
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура("ТипНоменклатуры", ТипНоменклатуры));
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ОтборыДопТаблиц", СтрокаУсловияОтбора, Новый Структура("ТипНоменклатуры", ТипНоменклатуры));
		КонецЕсли;
		
		ЭлементОтбора = ДеревоОтбора.Строки.Найти("Номенклатура", "ЛевоеЗначение");
		Если ЭлементОтбора.Использование Тогда
			СтрокаУсловияОтбора = СтрЗаменить(СтрЗаменить(Документы.БюджетЗакупок.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения),"#"," ТаблицаДанных.Номенклатура"+?(ПоКатегориям,".ТипНоменклатуры "," ")),"&","&Номенклатура");
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура("Номенклатура", ЭлементОтбора.ПравоеЗначение));
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ОтборыДопТаблиц", СтрокаУсловияОтбора, Новый Структура("Номенклатура", ЭлементОтбора.ПравоеЗначение));
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("ИмяТаблицы", "БюджетЗакупок");
		
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции // ПолучитьДополнительныеПараметрыЗапроса()

// Обработчик окончания выбора значения отбора
//
&НаКлиенте
Процедура ОповещениеВыбораЗначенияОтбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("СписокЗначений") Тогда
		
		ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.ПравоеЗначение = РезультатЗакрытия;
		
	КонецЕсли;
	Элементы.Отбор.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры //ОповещениеВыбораЗначенияОтбора()

// Функция определения того, что отбор выполняется по списку значений
//
&НаКлиенте
Функция ОтборПоСписку(ВидСравненияОтбора)
	
	РезультатОтбора = Ложь;
	Если ВидСравненияОтбора = ВидСравнения.ВСписке
		ИЛИ ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии
		ИЛИ ВидСравненияОтбора = ВидСравнения.НеВСписке
		ИЛИ ВидСравненияОтбора= ВидСравнения.НеВСпискеПоИерархии Тогда
		
		РезультатОтбора = Истина;
		
	КонецЕсли;
	
	Возврат РезультатОтбора;
	
КонецФункции //ОтборПоСписку()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Структура - Содержит процедуру в которую будет передан ответ на вопрос и формы из которой
//                                        вызвано оповещение.
//
&НаКлиенте
Процедура Подключаемый_ПередЗакрытием(Результат, ДополнительныеПараметры=Неопределено) Экспорт
	
	Выбрать(Неопределено);
	
КонецПроцедуры //Подключаемый_ПередЗакрытием()

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ОТБОРОМ

// Добавляем дополнительные отборы
&НаСервере
Процедура НастроитьПолеОтбора(Подразделение)
	
	// заполним быстрые отборы
	ДеревоОтбор = Отбор.ПолучитьЭлементы();
	
	НовыйОтбор = ДеревоОтбор.Добавить();
	НовыйОтбор.Использование  = Ложь;
	НовыйОтбор.ЛевоеЗначение  = "ПодразделениеОтгрузки";
	НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
	НовыйОтбор.ПравоеЗначение = Справочники.ПодразделенияКомпании.ПустаяСсылка();
	НовыйОтбор.Заголовок      = НСтр("ru = 'Подразделение отгрузки'");
	
	НовыйОтбор = ДеревоОтбор.Добавить();
	НовыйОтбор.Использование  = Истина;
	НовыйОтбор.ЛевоеЗначение  = "ПодразделениеЗакупки";
	НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
	НовыйОтбор.ПравоеЗначение = Подразделение;
	НовыйОтбор.Заголовок      = НСтр("ru = 'Подразделение закупки'");
	
	НовыйОтбор = ДеревоОтбор.Добавить();
	НовыйОтбор.Использование  = Ложь;
	НовыйОтбор.ЛевоеЗначение  = "Номенклатура";
	НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
	НовыйОтбор.ПравоеЗначение = ?(ПоКатегориям, Справочники.ТипыНоменклатуры.ПустаяСсылка(), Справочники.Номенклатура.ПустаяСсылка());
	НовыйОтбор.Заголовок      = ?(ПоКатегориям, НСтр("ru = 'Тип номенклатуры'"), "Номенклатура");
	
КонецПроцедуры // НастроитьПолеОтбора()

&НаСервере
Процедура ИзменитьФильтр()
	
	ДеревоОтбор = Отбор.ПолучитьЭлементы();
	
	ПодразделениеОтгрузки = Неопределено;
	ПодразделениеЗакупки = Неопределено;
	Индекс = 0;
	
	Для Каждого ТекОтбор Из ДеревоОтбор Цикл
		Если ДеревоОтбор[Индекс].ЛевоеЗначение = "ПодразделениеОтгрузки" Тогда
			ПодразделениеОтгрузки = ТекОтбор;
		ИначеЕсли ДеревоОтбор[Индекс].ЛевоеЗначение = "ПодразделениеЗакупки" Тогда
			ПодразделениеЗакупки = ТекОтбор;
		КонецЕсли;
		Индекс = Индекс +1;
	КонецЦикла;
	
	Если ТипАнализа=Перечисления.ТипыАнализа.ПоФактическимДаннымПродаж Тогда
		
		Если ПодразделениеОтгрузки = Неопределено Тогда
			НовыйОтбор = ДеревоОтбор.Добавить();
			НовыйОтбор.Использование  = Ложь;
			НовыйОтбор.ЛевоеЗначение  = "ПодразделениеОтгрузки";
			НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
			НовыйОтбор.Заголовок      = НСтр("ru = 'Подразделение отгрузки'");
			Индекс = ДеревоОтбор.Индекс(НовыйОтбор);
			ДеревоОтбор.Сдвинуть(Индекс, -Индекс);
		КонецЕсли;
		
		Если ПодразделениеЗакупки = Неопределено Тогда
			НовыйОтбор = ДеревоОтбор.Добавить();
			НовыйОтбор.Использование  = Ложь;
			НовыйОтбор.ЛевоеЗначение  = "ПодразделениеЗакупки";
			НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
			НовыйОтбор.ПравоеЗначение = Справочники.ПодразделенияКомпании.ПустаяСсылка();
			НовыйОтбор.Заголовок      = НСтр("ru = 'Подразделение закупки'");
			Индекс = ДеревоОтбор.Индекс(НовыйОтбор);
			ДеревоОтбор.Сдвинуть(Индекс, 1-Индекс);
		КонецЕсли;
		
	ИначеЕсли ТипАнализа=Перечисления.ТипыАнализа.ПоРанееПланируемымДаннымПродаж Тогда
		
		Если ПодразделениеЗакупки <> Неопределено Тогда
			Индекс = ДеревоОтбор.Индекс(ПодразделениеЗакупки);
			ДеревоОтбор.Удалить(Индекс);
		КонецЕсли;
		
		Если ПодразделениеОтгрузки = Неопределено Тогда
			НовыйОтбор = ДеревоОтбор.Добавить();
			НовыйОтбор.Использование  = Ложь;
			НовыйОтбор.ЛевоеЗначение  = "ПодразделениеОтгрузки";
			НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
			НовыйОтбор.Заголовок      = НСтр("ru = 'Подразделение отгрузки'");
			Индекс = ДеревоОтбор.Индекс(НовыйОтбор);
			ДеревоОтбор.Сдвинуть(Индекс, -Индекс);
		КонецЕсли;
		
	Иначе
		
		Если ПодразделениеОтгрузки <> Неопределено Тогда
			Индекс = ДеревоОтбор.Индекс(ПодразделениеОтгрузки);
			ДеревоОтбор.Удалить(Индекс);
		КонецЕсли;
		
		Если ПодразделениеЗакупки = Неопределено Тогда
			НовыйОтбор = ДеревоОтбор.Добавить();
			НовыйОтбор.Использование  = Ложь;
			НовыйОтбор.ЛевоеЗначение  = "ПодразделениеЗакупки";
			НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
			НовыйОтбор.Заголовок      = НСтр("ru = 'Подразделение закупки'");
			Индекс = ДеревоОтбор.Индекс(НовыйОтбор);
			ДеревоОтбор.Сдвинуть(Индекс, -Индекс);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ИзменитьФильтр()

// Обработчик события возникающего на клиенте перед началом изменения таблицы "Отбор".
//
&НаКлиенте
Процедура ОтборПередНачаломИзменения(Элемент, Отказ)
	
	Поле = Элементы.Отбор.ТекущийЭлемент;
	Если Поле.Имя = "ОтборПравоеЗначение" Тогда
		
		СтандартнаяОбработка = Истина;
		ВыбраннаяСтрока      = Неопределено;
		ОтборПравоеЗначениеНачалоВыбора(Элемент, ВыбраннаяСтрока, СтандартнаяОбработка);
		
	ИначеЕсли Поле.Имя = "ОтборВидСравнения" Тогда
		
		СтандартнаяОбработка = Истина;
		ВыбраннаяСтрока      = Неопределено;
		ОтборВидСравненияНачалоВыбора(Элемент, ВыбраннаяСтрока, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры //ОтборПередНачаломИзменения()

// Обработчик изменения поля "Вид сравнения" таблицы "Отбор"
//
&НаКлиенте
Процедура ОтборВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.ПравоеЗначение) = Тип("СписокЗначений") И ЗначениеЗаполнено(ТекущиеДанные.ПравоеЗначение) И НЕ ТекущиеДанные.ВидСравнения = ВидСравнения.ВСписке И НЕ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВСписке
		 И НЕ ТекущиеДанные.ВидСравнения = ВидСравнения.ВСпискеПоИерархии И НЕ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
		
		Значение = ТекущиеДанные.ПравоеЗначение[0].Значение;
		ТекущиеДанные.ПравоеЗначение.Очистить();
		ОтборПравоеЗначениеНачалоВыбора(Элементы.ОтборПравоеЗначение, Значение, Истина);
		
	КонецЕсли;
	
КонецПроцедуры // ОтборВидСравненияПриИзменении()

// Обработчик начала выбора поля "Вид сравнения" таблицы "Отбор"
//
&НаКлиенте
Процедура ОтборВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокВыбора = Элементы.ОтборВидСравнения.СписокВыбора;
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить(ВидСравнения.Равно,              Строка(ВидСравнения.Равно));
	СписокВыбора.Добавить(ВидСравнения.НеРавно,            Строка(ВидСравнения.НеРавно));
	СписокВыбора.Добавить(ВидСравнения.ВСписке,            Строка(ВидСравнения.ВСписке));
	СписокВыбора.Добавить(ВидСравнения.ВИерархии,          Строка(ВидСравнения.ВИерархии));
	СписокВыбора.Добавить(ВидСравнения.ВСпискеПоИерархии,  Строка(ВидСравнения.ВСпискеПоИерархии));
	СписокВыбора.Добавить(ВидСравнения.НеВСписке,          Строка(ВидСравнения.НеВСписке));
	СписокВыбора.Добавить(ВидСравнения.НеВИерархии,        Строка(ВидСравнения.НеВИерархии));
	СписокВыбора.Добавить(ВидСравнения.НеВСпискеПоИерархии,Строка(ВидСравнения.НеВСпискеПоИерархии));
	
КонецПроцедуры // ОтборВидСравненияНачалоВыбора()

// Обработчик изменения поля "Правое значение" таблицы "Отбор"
//
&НаКлиенте
Процедура ОтборПравоеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ТекущиеДанные.Использование = ЗначениеЗаполнено(ТекущиеДанные.ПравоеЗначение);
	
КонецПроцедуры

// Обработчик начала выбора поля "Правое значение" таблицы "Отбор"
//
&НаКлиенте
Процедура ОтборПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтборПоСписку(ТекущиеДанные.ВидСравнения) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ТекущиеДанные.ВидСравнения = ВидСравнения.ВСпискеПоИерархии ИЛИ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
			ТолькоГруппы = Истина;
		Иначе
			ТолькоГруппы = Ложь;
		КонецЕсли;
		
		СписокВыбора =  ТекущиеДанные.ПравоеЗначение;
		
		Если ТекущиеДанные.ЛевоеЗначение = "Номенклатура" Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СписокВыбора",      СписокВыбора);
			СтруктураПараметров.Вставить("ТипЗначения",       ?(ПоКатегориям, Новый ОписаниеТипов("СправочникСсылка.ТипыНоменклатуры"), Новый ОписаниеТипов("СправочникСсылка.Номенклатура")));
			СтруктураПараметров.Вставить("ДоступныеЗначения", Неопределено);
			СтруктураПараметров.Вставить("ТолькоГруппы",      ТолькоГруппы);
		ИначеЕсли ТекущиеДанные.ЛевоеЗначение = "ПодразделениеОтгрузки" ИЛИ ТекущиеДанные.ЛевоеЗначение = "ПодразделениеЗакупки" Тогда
			ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании");
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СписокВыбора",      СписокВыбора);
			СтруктураПараметров.Вставить("ТипЗначения",       ТипЗначения);
			СтруктураПараметров.Вставить("ДоступныеЗначения", Неопределено);
			СтруктураПараметров.Вставить("ТолькоГруппы",      ТолькоГруппы);
		КонецЕсли;
			
		ОписаниеОповещенияВыбораЗначения = Новый ОписаниеОповещения("ОповещениеВыбораЗначенияОтбора", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ОтчетВыборЗначенияОтбораИзСписка", СтруктураПараметров, Элемент,,,, ОписаниеОповещенияВыбораЗначения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		Если ТекущиеДанные.ВидСравнения = ВидСравнения.ВИерархии ИЛИ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВИерархии Тогда
			ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		Иначе
			ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
		КонецЕсли;
		
		Если ТекущиеДанные.ЛевоеЗначение = "ПодразделениеОтгрузки" ИЛИ ТекущиеДанные.ЛевоеЗначение = "ПодразделениеЗакупки" Тогда
			Элементы.ОтборПравоеЗначение.БыстрыйВыбор         = Ложь;
			Элементы.ОтборПравоеЗначение.ОграничениеТипа      = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании");
			Элементы.ОтборПравоеЗначение.КнопкаВыбора         = Истина;
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ВыборГруппИЭлементов;
		ИначеЕсли ТекущиеДанные.ЛевоеЗначение = "Номенклатура" Тогда
			Элементы.ОтборПравоеЗначение.БыстрыйВыбор         = Ложь;
			Элементы.ОтборПравоеЗначение.ОграничениеТипа      = ?(ПоКатегориям, Новый ОписаниеТипов("СправочникСсылка.ТипыНоменклатуры"), Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			Элементы.ОтборПравоеЗначение.КнопкаВыбора         = Истина;
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ВыборГруппИЭлементов;
		КонецЕсли;
		
		Если ДанныеВыбора <> Неопределено Тогда
			ТекущиеДанные.ПравоеЗначение = ДанныеВыбора;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

