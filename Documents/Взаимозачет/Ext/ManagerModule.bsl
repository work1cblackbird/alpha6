// Модуль менеджера документа "Взаимозачет"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. 
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	СуммаДокумента = 0;
	Для Каждого Строка Из Объект.Состав Цикл
		СуммаДокумента = СуммаДокумента + РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Строка.Сумма, Строка.ДоговорВзаиморасчетовДебитор.ВалютаВзаиморасчетов, Объект.Дата, Объект.ВалютаДокумента, Объект.КурсДокумента);
	КонецЦикла;
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", СуммаДокумента);
		
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Обработка выбора договора взаиморасчетов
//
// Параметры:
//	ДебиторКредитор - Строка - Окончание реквизита
//	Строка - Строка табличной части
//	Объект
//
Процедура ОбработатьВыборДоговора(Строка, ДебиторКредитор = "Дебитор", Объект = Неопределено)
	
	ТекущийДоговор   = Строка["ДоговорВзаиморасчетов" + ДебиторКредитор];
	ТекущаяСделка    = Строка["Сделка" + ДебиторКредитор];	
	
	Если ЕстьРеквизит(ТекущаяСделка, "ДоговорВзаиморасчетов") Тогда
		Если ТекущийДоговор <> ТекущаяСделка.ДоговорВзаиморасчетов Тогда
			Строка["Сделка" + ДебиторКредитор] = Неопределено;
		КонецЕсли;
	ИначеЕсли ЕстьРеквизит(ТекущаяСделка,, "Состав") Тогда
		Если ЕстьРеквизит(ТекущаяСделка, "ДоговорВзаиморасчетов", "Состав") Тогда
			// Значит реквизит "ДоговорВзаиморасчетов" находится в табличной части "Состав" документа-сделки.
			Если ТекущаяСделка.Состав.Найти(ТекущийДоговор, "ДоговорВзаиморасчетов") = Неопределено Тогда
				Строка["Сделка" + ДебиторКредитор] = Неопределено;
			КонецЕсли;
		ИначеЕсли ЕстьРеквизит(ТекущаяСделка, "ДоговорВзаиморасчетовДебитор", "Состав") Тогда
			// Значит в качестве сделки выступает документ "Взаимозачет".
			Если (ТекущаяСделка.Состав.Найти(ТекущийДоговор, "ДоговорВзаиморасчетовДебитор") = Неопределено)
				И (ТекущаяСделка.Состав.Найти(ТекущийДоговор, "ДоговорВзаиморасчетовКредитор") = Неопределено) Тогда
				
				Строка["Сделка" + ДебиторКредитор] = Неопределено;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработка выбора сделки
//
// Параметры:
//	ДебиторКредитор - Строка - Окончание реквизита
//	Строка - Строка табличной части
//	Объект
//
Процедура ОбработатьВыборСделки(Строка, ДебиторКредитор = "Дебитор", Объект = Неопределено, ПараметрыДействия = Неопределено) Экспорт
	ТекущийДоговор = Строка["ДоговорВзаиморасчетов" + ДебиторКредитор];
	ТекущаяСделка  = Строка["Сделка" + ДебиторКредитор]; 
	БылаПроверка = Ложь;
	
	Если ТипЗнч(ТекущаяСделка) = Тип("ДокументСсылка.НачислениеЗарплаты")
		ИЛИ ТипЗнч(ТекущаяСделка) = Тип("ДокументСсылка.ВыплатаЗарплаты") Тогда
		ИмяТабличнойЧасти = "Сотрудники";
	Иначе
		ИмяТабличнойЧасти = "Состав";
	КонецЕсли;
	
	Если ЕстьРеквизит(ТекущаяСделка, "ДоговорВзаиморасчетов") Тогда
		БылаПроверка = Истина;
		Если ТекущийДоговор.Пустая() Тогда
			Строка["ДоговорВзаиморасчетов" + ДебиторКредитор] = ТекущаяСделка.ДоговорВзаиморасчетов;
		ИначеЕсли ТекущийДоговор <> ТекущаяСделка.ДоговорВзаиморасчетов Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Договор взаиморасчетов выбранной сделки не соответствует текущему договору <%1>.'"),
				ТекущийДоговор
			);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
			Строка["Сделка" + ДебиторКредитор] = Неопределено;
		КонецЕсли;
	ИначеЕсли ЕстьРеквизит(ТекущаяСделка,, ИмяТабличнойЧасти) Тогда
		Если ЕстьРеквизит(ТекущаяСделка, "ДоговорВзаиморасчетов", ИмяТабличнойЧасти) Тогда
			// Значит реквизит "ДоговорВзаиморасчетов" находится в табличной части  документа-сделки.
			БылаПроверка = Истина;
			Если ТекущийДоговор.Пустая() Тогда
				// Ищем первый подходящий договор в табличной части.
				Для Каждого ТекСтрокаТЧ Из ТекущаяСделка[ИмяТабличнойЧасти] Цикл
					Если ТекСтрокаТЧ.ДоговорВзаиморасчетов.Владелец = Объект[ДебиторКредитор] Тогда
						Строка["ДоговорВзаиморасчетов" + ДебиторКредитор] = ТекСтрокаТЧ.ДоговорВзаиморасчетов;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТекущаяСделка[ИмяТабличнойЧасти].Найти(ТекущийДоговор, "ДоговорВзаиморасчетов") = Неопределено Тогда
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'В табличной части <%1> выбранной сделки не найдено договора <%2>. Выберите другую сделку, либо другой договор.'"),
					ИмяТабличнойЧасти,
					ТекущийДоговор
				);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
				
			Строка["Сделка" + ДебиторКредитор] = Неопределено;
			КонецЕсли;
			
		ИначеЕсли ЕстьРеквизит(ТекущаяСделка, "ДоговорВзаиморасчетовДебитор", ИмяТабличнойЧасти) Тогда
			// Значит в качестве сделки выступает документ "Взаимозачет".
			БылаПроверка = Истина;
			Если ТекущийДоговор.Пустая() Тогда
				// Ищем первый подходящий договор в табличной части.
				Для Каждого ТекСтрокаТЧ Из ТекущаяСделка[ИмяТабличнойЧасти] Цикл
					Если ТекСтрокаТЧ.ДоговорВзаиморасчетовДебитор.Владелец = Объект[ДебиторКредитор] Тогда
						Строка["ДоговорВзаиморасчетов" + ДебиторКредитор] = ТекСтрокаТЧ.ДоговорВзаиморасчетовДебитор;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				// Если не нашли договор в дебиторах, тогда ищем в кредиторах
				Если Строка["ДоговорВзаиморасчетов" + ДебиторКредитор].Пустая() Тогда
					Для Каждого ТекСтрокаТЧ Из ТекущаяСделка[ИмяТабличнойЧасти] Цикл
						Если ТекСтрокаТЧ.ДоговорВзаиморасчетовКредитор.Владелец = Объект[ДебиторКредитор] Тогда
							Строка["ДоговорВзаиморасчетов" + ДебиторКредитор] = ТекСтрокаТЧ.ДоговорВзаиморасчетовКредитор;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			ИначеЕсли (ТекущаяСделка[ИмяТабличнойЧасти].Найти(ТекущийДоговор, "ДоговорВзаиморасчетовДебитор") = Неопределено) И (ТекущаяСделка[ИмяТабличнойЧасти].Найти(ТекущийДоговор, "ДоговорВзаиморасчетовКредитор") = Неопределено) Тогда
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'В табличной части <%1> выбранной сделки не найдено договора <%2>. Выберите другую сделку, либо другой договор.'"),
					ИмяТабличнойЧасти,
					ТекущийДоговор
				);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
				Строка["Сделка" + ДебиторКредитор] = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ БылаПроверка Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Договор взаиморасчетов выбранной сделки не соответствует текущему договору <%1>.'"),
			ТекущийДоговор
		);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);

		Строка["Сделка" + ДебиторКредитор] = Неопределено;
	Иначе
		
		Если ПараметрыДействия <> Неопределено
			И ПараметрыДействия.Свойство("ПроверкаПередЗаписью") Тогда
			Возврат;
		КонецЕсли;
		
		Если ДебиторКредитор = "Дебитор" Тогда
			СоставДоговорВзаиморасчетовДебиторПриИзменении(Объект, Строка);
		Иначе
			СоставДоговорВзаиморасчетовКредиторПриИзменении(Объект, Строка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ДайДанныеПаспорта(Паспорт)
	
	Результат = Новый Структура("Серия,Номер,КемВыдан,ДатаВыдачи");
	
	Если Паспорт.Пустая() Тогда
		
		Результат.Серия      = "______";
		Результат.Номер      = "__________";
		Результат.КемВыдан   = "________________________";
		Результат.ДатаВыдачи = "___.____________._______";
		
		Возврат Результат;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, Паспорт);
	
	Результат.ДатаВыдачи = Формат(Результат.ДатаВыдачи, "ДЛФ=DD");
	
	Если НЕ ЗначениеЗаполнено(Результат.Серия) Тогда
		Результат.Серия = "______";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат.КемВыдан) Тогда
		Результат.КемВыдан   = "________________________";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ДайДанныеПаспорта()

Функция ДайДанныеБанковскийСчет(Счет)
	
	Результат = Новый Структура("Банк,НомерСчета,КоррСчет,Код");
	
	Если Счет.Пустая() Тогда
		Результат.Банк       = "______________________";
		Результат.НомерСчета = "______________________";
		Результат.КоррСчет   = "______________________";
		Результат.Код        = "__________";
	Иначе
		Результат.Банк       = Счет.Банк;
		Результат.НомерСчета = Счет.НомерСчета;
		Результат.КоррСчет   = ?(ЗначениеЗаполнено(Счет.Банк.КоррСчет), Счет.Банк.КоррСчет, "______________________");
		Результат.Код        = Счет.Банк.Код;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ДайДанныеБанковскийСчет()

Процедура ЗаполнитьДанныеОрганизации(Документ, Организация, Должность, ОрганизацияЛицо, ПредставлениеРуководителя)
	
	Организация = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация, Документ.Дата);
	Руководитель = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Руководитель");
	
	Если ЗначениеЗаполнено(Руководитель) И ТипЗнч(Руководитель) = Тип("Структура")
		И ЗначениеЗаполнено(Руководитель.Руководитель) Тогда
	
		Должность = НСтр("ru = ', в лице'") + Символы.НПП;
		Если ЗначениеЗаполнено(Руководитель.РуководительДолжность) Тогда
			ПредставлениеДолжности = СклонениеПредставленийОбъектов.ПросклонятьПредставление(
				Строка(Руководитель.РуководительДолжность), 2, Руководитель.РуководительДолжность
			);
			Должность = Должность + Символы.НПП + СокрЛП(НРег(ПредставлениеДолжности));
		КонецЕсли;
		
		ОрганизацияЛицо = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			Руководитель.Руководитель, Документ.Дата
		);
		ОрганизацияЛицо = СклонениеПредставленийОбъектов.ПросклонятьПредставление(
			ОрганизацияЛицо, 2, Руководитель.Руководитель
		);
		ДоверенностьРуководителя = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
			Руководитель.Руководитель, Перечисления.ВидыДокументов.Доверенность
		);
		Если ЗначениеЗаполнено(ДоверенностьРуководителя) Тогда
			ОрганизацияЛицо = СтрШаблон(НСтр("ru = '%1, , действующего на основании %2'"),
				ОрганизацияЛицо, ДоверенностьРуководителя
			);
		КонецЕсли;
		
		ПредставлениеРуководителя = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ОрганизацияЛицо);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДанныеОрганизации()

Процедура ЗаполнитьИнформациюОПокупателе(Документ,
		ОбластьПокупательАдрес,
		Покупатель,
		ПредставлениеПокупателя,
		ФизЛицо)
	
	АдресПокупателя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Документ.Кредитор,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
		Документ.Дата
	);
	АдресПокупателя = ?(ЗначениеЗаполнено(АдресПокупателя), АдресПокупателя,
		"___________________________________________________________________________"
	);
	ОбластьПокупательАдрес.Параметры.АдресПокупателя = АдресПокупателя;
	
	Если ФизЛицо Тогда
		ОбластьПокупательАдрес.Параметры.ФИОПокупателя = Покупатель;
		Паспорт = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
			Документ.Кредитор, Перечисления.ВидыДокументов.Паспорт
		);
		ДанныеПаспорта = ДайДанныеПаспорта(Паспорт);
		ОбластьПокупательАдрес.Параметры.ПаспортПокупателя = СтрШаблон(НСтр("ru = '%1 № %2 выдан %3 %4'"),
			ДанныеПаспорта.Серия,
			ДанныеПаспорта.Номер,
			ДанныеПаспорта.КемВыдан,
			ДанныеПаспорта.ДатаВыдачи
		);
		ДатаРождения = Документ.Кредитор.ДатаРождения;
		ОбластьПокупательАдрес.Параметры.ДатаРожденияПолПокупателя = СтрШаблон(НСтр("ru = '%1, %2'"),
			?(ЗначениеЗаполнено(ДатаРождения), Формат(ДатаРождения, "ДЛФ=DD"), "__.____________.____"),
			?(ЗначениеЗаполнено(Документ.Кредитор.Пол), Документ.Кредитор.Пол, "__________")
		);
		АдресЭлектроннойПочтыПокупателя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Документ.Кредитор,
			Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,
			Документ.Дата
		);
		АдресЭлектроннойПочтыПокупателя = ?(ЗначениеЗаполнено(АдресЭлектроннойПочтыПокупателя),
			АдресЭлектроннойПочтыПокупателя, "______________________________"
		);
		ОбластьПокупательАдрес.Параметры.АдресЭлектроннойПочтыПокупателя = АдресЭлектроннойПочтыПокупателя;
		
		ТелефонПокупателя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Документ.Кредитор,
			Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
			Документ.Дата
		);
		ТелефонПокупателя = ?(ЗначениеЗаполнено(ТелефонПокупателя), ТелефонПокупателя, "______________________");
		ОбластьПокупательАдрес.Параметры.ТелефонПокупателя = ТелефонПокупателя;
		
		ПредставлениеПокупателя = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(
			ОбластьПокупательАдрес.Параметры.ФИОПокупателя
		);
	Иначе
		ОбластьПокупательАдрес.Параметры.ОрганизацияПокупатель = Покупатель;
		ОбластьПокупательАдрес.Параметры.РеквизитыОрганизацииПокупатель = 
			?(ЗначениеЗаполнено(Документ.Кредитор.ИНН), Документ.Кредитор.ИНН, "______________________") + " / "
			+ ?(ЗначениеЗаполнено(Документ.Кредитор.КПП), Документ.Кредитор.КПП, "______________________");
		ПредставлениеПокупателя = "                       ";
	КонецЕсли;
	
	ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Документ.Кредитор);
	ДанныеБанковскийСчет = ДайДанныеБанковскийСчет(ОсновнойБанковскийСчет);
	ОбластьПокупательАдрес.Параметры.БанкПокупатель = СтрШаблон(НСтр("ru = '%1, р/сч %2, к/с %3; БИК %4.'"),
		ДанныеБанковскийСчет.Банк,
		ДанныеБанковскийСчет.НомерСчета,
		ДанныеБанковскийСчет.КоррСчет,
		ДанныеБанковскийСчет.Код
	);
	
КонецПроцедуры


#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("Дебитор");
	ОбязательныеРеквизиты.Добавить("Кредитор");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Состав");
	КонецЕсли;

	ОбязательныеРеквизиты.Добавить("Состав.ДоговорВзаиморасчетовДебитор");
	ОбязательныеРеквизиты.Добавить("Состав.ДоговорВзаиморасчетовКредитор");
	ОбязательныеРеквизиты.Добавить("Состав.СделкаДебитор");
	ОбязательныеРеквизиты.Добавить("Состав.СделкаКредитор");
	ОбязательныеРеквизиты.Добавить("Состав.Сумма");

	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	УникальныеСостав = Новый Массив;
	УникальныеСостав.Добавить("ДоговорВзаиморасчетовДебитор");
	УникальныеСостав.Добавить("ДоговорВзаиморасчетовКредитор");
	УникальныеСостав.Добавить("СделкаДебитор");
	УникальныеСостав.Добавить("СделкаКредитор");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти=Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
		
	КонтролируемыеРеквизитыТЧ = Новый Структура();
	КонтролируемыеРеквизитыТЧ.Вставить("ДоговорВзаиморасчетовДебитор", КонтрольПоПодразделению);
	КонтролируемыеРеквизитыТЧ.Вставить("ДоговорВзаиморасчетовКредитор", КонтрольПоПодразделению);
	КонтролируемыеРеквизитыТЧ.Вставить("СделкаКредитор", КонтрольПоПодразделению);
	КонтролируемыеРеквизитыТЧ.Вставить("СделкаДебитор", КонтрольПоПодразделению);
	
	КонтролируемыеРеквизиты.Вставить("Состав", КонтролируемыеРеквизитыТЧ);

	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Состав.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Дебитор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДебиторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Дебитор) Тогда
		Для Каждого Строка Из Объект.Состав Цикл
			Если НЕ Строка.ДоговорВзаиморасчетовДебитор.Владелец = Объект.Дебитор Тогда
				Строка.ДоговорВзаиморасчетовДебитор = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
				Строка.СделкаДебитор                = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ДебиторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Кредитор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КредиторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Кредитор) Тогда
		Для Каждого Строка Из Объект.Состав Цикл
			Если НЕ Строка.ДоговорВзаиморасчетовКредитор.Владелец = Объект.Кредитор Тогда
				Строка.ДоговорВзаиморасчетовКредитор = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
				Строка.СделкаДебитор                = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // КредиторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСостав

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов дебитора" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СоставДоговорВзаиморасчетовДебиторПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Строка.ДоговорВзаиморасчетовДебитор)
		И Строка.ДоговорВзаиморасчетовДебитор.Владелец <> Объект.Дебитор Тогда
		
		Объект.Дебитор = Строка.ДоговорВзаиморасчетовДебитор.Владелец;
		ДебиторПриИзменении(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.СделкаДебитор) И ЗначениеЗаполнено(Строка.ДоговорВзаиморасчетовДебитор) Тогда
		ОбработатьВыборДоговора(Строка);
	КонецЕсли;
	
	Строка.КурсВалютыДоговораДебитора = 0;
	
КонецПроцедуры // СоставДоговорВзаиморасчетовДебиторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов кредитора" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СоставДоговорВзаиморасчетовКредиторПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Строка.ДоговорВзаиморасчетовКредитор)
		И Строка.ДоговорВзаиморасчетовКредитор.Владелец <> Объект.Кредитор Тогда
		
		Объект.Кредитор = Строка.ДоговорВзаиморасчетовКредитор.Владелец;
		КредиторПриИзменении(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.СделкаКредитор) И ЗначениеЗаполнено(Строка.ДоговорВзаиморасчетовКредитор) Тогда
		ОбработатьВыборДоговора(Строка, "Кредитор");
	КонецЕсли;
	
	Строка.КурсВалютыДоговораКредитора = 0;
	
КонецПроцедуры // СоставДоговорВзаиморасчетовКредиторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сделка дебитора" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СоставСделкаДебиторПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Строка.СделкаДебитор) Тогда
		ОбработатьВыборСделки(Строка,, Объект);
	КонецЕсли;
	
	СоставСделкаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // СоставСделкаДебиторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сделка кредитор" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СоставСделкаКредиторПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Строка.СделкаКредитор) Тогда
		ОбработатьВыборСделки(Строка, "Кредитор", Объект);
	КонецЕсли;
	
	СоставСделкаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // СоставСделкаКредиторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сделка".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СоставСделкаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено)
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Проверим можно ли и нужно ли получить сумму взаимозачета
	Если Строка.Сумма <> 0
		ИЛИ НЕ ЗначениеЗаполнено(Строка.СделкаДебитор)
		ИЛИ НЕ ЗначениеЗаполнено(Строка.СделкаКредитор) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДоговорДебиторПоРасчетымДокументам = РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(
		Строка.ДоговорВзаиморасчетовДебитор);
	ДоговорКредиторПоРасчетымДокументам = РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(
		Строка.ДоговорВзаиморасчетовКредитор);
	
	ИменаИсточникаОстатковДебетора = РасчетыСКонтрагентамиСервер.ИменаИсточникаДанных(ДоговорДебиторПоРасчетымДокументам);
	ИменаИсточникаОстатковКредитора = РасчетыСКонтрагентамиСервер.ИменаИсточникаДанных(
		ДоговорКредиторПоРасчетымДокументам);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпр,
	               |	РасчетыСКонтрагентамиОстатки.СуммаБазОстаток КАК СуммаБаз
	               |ИЗ
	               |	РегистрНакопления.#ИмяРегистраДебитор.Остатки(
	               |			&Дата,
	               |			Контрагент = &Дебитор
	               |				И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетовДебитор
	               |				И #ИмяСделкиДебитор = &СделкаДебитор) КАК РасчетыСКонтрагентамиОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	-РасчетыСКонтрагентамиОстатки.СуммаУпрОстаток,
	               |	-РасчетыСКонтрагентамиОстатки.СуммаБазОстаток
	               |ИЗ
	               |	РегистрНакопления.#ИмяРегистраКредитор.Остатки(
	               |			&Дата,
	               |			Контрагент = &Кредитор
	               |				И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетовКредитор
	               |				И #ИмяСделкиКредитор = &СделкаКредитор) КАК РасчетыСКонтрагентамиОстатки
	               |ИТОГИ
	               |	МИНИМУМ(СуммаУпр),
	               |	МИНИМУМ(СуммаБаз)
	               |ПО
	               |	ОБЩИЕ";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРегистраДебитор", ИменаИсточникаОстатковДебетора.ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяСделкиДебитор", ИменаИсточникаОстатковДебетора.ИмяСделки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРегистраКредитор", ИменаИсточникаОстатковКредитора.ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяСделкиКредитор", ИменаИсточникаОстатковКредитора.ИмяСделки);
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата"                          , Объект.Дата);
	Запрос.УстановитьПараметр("Дебитор"                       , Объект.Дебитор);
	Запрос.УстановитьПараметр("СделкаДебитор"                 , Строка.СделкаДебитор);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетовДебитор"  , Строка.ДоговорВзаиморасчетовДебитор);
	Запрос.УстановитьПараметр("Кредитор"                      , Объект.Кредитор);
	Запрос.УстановитьПараметр("СделкаКредитор"                , Строка.СделкаКредитор);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетовКредитор" , Строка.ДоговорВзаиморасчетовКредитор);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
			Строка.Сумма = Выборка.СуммаБаз;
		Иначе
			Строка.Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Выборка.СуммаУпр,Константы.ВалютаУправленческогоУчетаКомпании.Получить(), Объект.Дата, Объект.ВалютаДокумента, Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Состав");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю			= "СоставПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить по остаткам взаиморасчетов'");
	Команда.Идентификатор	= "СоставЗаполнитьОстатками";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Состав";
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Функция получения заказов на автомобиль
//
Функция ПолучитьСписокЗаказовНаАвтомобиль(ЗаказНаАвтомобиль) Экспорт
	
	ОтмененныйЗаказ = ЗаказНаАвтомобиль.ДокументОснование;
	
	Если ТипЗнч(ОтмененныйЗаказ) = Тип("ДокументСсылка.ЗаказНаАвтомобиль") И ЗначениеЗаполнено(ОтмененныйЗаказ) Тогда
		МассивЗаказов = ПолучитьСписокЗаказовНаАвтомобиль(ОтмененныйЗаказ);
		МассивЗаказов.Добавить(ОтмененныйЗаказ);
	Иначе
		МассивЗаказов = Новый Массив;
	КонецЕсли;
	
	Возврат МассивЗаказов;
	
КонецФункции

// Функция получения заказов на автомобиль поставщику
//
Функция ПолучитьСписокЗаказовНаАвтомобильПоставщику(ЗаказНаАвтомобиль) Экспорт
	
	ОтмененныйЗаказ = ЗаказНаАвтомобиль.ДокументОснование;
	
	Если ТипЗнч(ОтмененныйЗаказ) = Тип("ДокументСсылка.ЗаказПоставщикуНаАвтомобиль") И ЗначениеЗаполнено(ОтмененныйЗаказ) Тогда
		МассивЗаказов = ПолучитьСписокЗаказовНаАвтомобильПоставщику(ОтмененныйЗаказ);
		МассивЗаказов.Добавить(ОтмененныйЗаказ);
	Иначе
		МассивЗаказов = Новый Массив;
	КонецЕсли;
	
	Возврат МассивЗаказов;
	
КонецФункции

// Обработчик заполнения документа по остаткам взаиморасчетов контрагентов
//
Процедура СоставЗаполнитьОстатками(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	Объект = ПараметрыКоманды.Источник;
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Дебитор) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru= 'Необходимо заполнить дебитора'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Кредитор) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru= 'Необходимо заполнить кредитора'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросОстаткиДолгов = Новый Запрос;
	ЗапросОстаткиДолгов.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	РасчетыСКонтрагентамиОстатки.ТипРасчета КАК ТипРасчета,
		|	РасчетыСКонтрагентамиОстатки.ДокументРасчетов КАК Сделка,
		|	РасчетыСКонтрагентамиОстатки.Заказ КАК Заказ,
		|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) КАК КурсВалютыВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА РасчетыСКонтрагентамиОстатки.Контрагент = &Дебитор
		|				И РасчетыСКонтрагентамиОстатки.СуммаОстаток > 0
		|			ТОГДА РасчетыСКонтрагентамиОстатки.СуммаОстаток
		|		ИНАЧЕ -РасчетыСКонтрагентамиОстатки.СуммаОстаток
		|	КОНЕЦ КАК СуммаОстаток,
		|	РасчетыСКонтрагентамиОстатки.ДокументРасчетов.МоментВремени КАК СделкаМоментВремени,
		|	ВЫБОР
		|		КОГДА РасчетыСКонтрагентамиОстатки.СуммаОстаток > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Дебитор,
		|	РасчетыСКонтрагентамиОстатки.Контрагент КАК Контрагент
		|ИЗ
		|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(
		|			&Момент,
		|			ДоговорВзаиморасчетов.Организация = &Организация
		|				И ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
		|				И (Контрагент = &Дебитор
		|					ИЛИ Контрагент = &Кредитор)) КАК РасчетыСКонтрагентамиОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Момент, ) КАК КурсыВалютСрезПоследних
		|		ПО РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
		|ГДЕ
		|	(РасчетыСКонтрагентамиОстатки.Контрагент = &Дебитор
		|				И РасчетыСКонтрагентамиОстатки.СуммаОстаток > 0
		|			ИЛИ РасчетыСКонтрагентамиОстатки.Контрагент = &Кредитор
		|				И РасчетыСКонтрагентамиОстатки.СуммаОстаток < 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВзаиморасчетыКомпанииОстатки.ДоговорВзаиморасчетов,
		|	НЕОПРЕДЕЛЕНО,
		|	ВзаиморасчетыКомпанииОстатки.Сделка,
		|	НЕОПРЕДЕЛЕНО,
		|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1),
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыКомпанииОстатки.Контрагент = &Дебитор
		|				И ВзаиморасчетыКомпанииОстатки.СуммаОстаток > 0
		|			ТОГДА ВзаиморасчетыКомпанииОстатки.СуммаОстаток
		|		ИНАЧЕ -ВзаиморасчетыКомпанииОстатки.СуммаОстаток
		|	КОНЕЦ,
		|	ВзаиморасчетыКомпанииОстатки.Сделка.МоментВремени,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыКомпанииОстатки.СуммаОстаток > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВзаиморасчетыКомпанииОстатки.Контрагент
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыКомпании.Остатки(
		|			&Момент,
		|			ДоговорВзаиморасчетов.Организация = &Организация
		|				И ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоСделкам)
		|				И (Контрагент = &Дебитор
		|					ИЛИ Контрагент = &Кредитор)) КАК ВзаиморасчетыКомпанииОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Момент, ) КАК КурсыВалютСрезПоследних
		|		ПО ВзаиморасчетыКомпанииОстатки.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
		|ГДЕ
		|	(ВзаиморасчетыКомпанииОстатки.Контрагент = &Дебитор
		|				И ВзаиморасчетыКомпанииОстатки.СуммаОстаток > 0
		|			ИЛИ ВзаиморасчетыКомпанииОстатки.Контрагент = &Кредитор
		|				И ВзаиморасчетыКомпанииОстатки.СуммаОстаток < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СделкаМоментВремени
		|ИТОГИ
		|	СУММА(СуммаОстаток)
		|ПО
		|	Дебитор";
	
	ЗапросОстаткиДолгов.УстановитьПараметр("Дебитор", Объект.Дебитор);
	ЗапросОстаткиДолгов.УстановитьПараметр("Кредитор", Объект.Кредитор);
	
	МоментВремени = ?(НЕ ЗначениеЗаполнено(Ссылка),
		Новый МоментВремени(КонецДня(Объект.Дата)),
		Новый МоментВремени(Объект.Дата, Ссылка));
	ЗапросОстаткиДолгов.УстановитьПараметр("Момент", МоментВремени);
	ЗапросОстаткиДолгов.УстановитьПараметр("Организация", Объект.Организация);
	
	ВыборкаОбщихОстатков = ЗапросОстаткиДолгов.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаОбщихОстатков.Количество() < 2 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru= 'Отсутствуют остатки взаиморасчетов выбранных контрагентов'"));
		Возврат;
	КонецЕсли;
	
	// определим выборки с минимальным и максимальным остатком
	ВыборкаОбщихОстатков.Следующий();
	
	ВыборкаМинимальныхОстатков = ВыборкаОбщихОстатков.Выбрать();
	МинимальнаяСуммаОстатков = ВыборкаОбщихОстатков.СуммаОстаток;
	
	Если ВыборкаОбщихОстатков.СуммаОстаток <= 0 Тогда
		
		ТекстКонтрагента = ?(ВыборкаОбщихОстатков.Дебитор, "дебитора", "кредитора");
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru= 'Для " + ТекстКонтрагента + " отсутствуют остатки задолженности'"));
		Отказ = Истина;
		
	КонецЕсли;
	
	ВыборкаОбщихОстатков.Следующий();
	
	Если ВыборкаОбщихОстатков.СуммаОстаток <= 0 Тогда
		
		ТекстКонтрагента = ?(ВыборкаОбщихОстатков.Дебитор, "дебитора", "кредитора");
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru= 'Для " + ТекстКонтрагента + " отсутствуют остатки задолженности'"));
		Отказ = Истина;
		
	КонецЕсли;
	
	Если ВыборкаОбщихОстатков.СуммаОстаток < МинимальнаяСуммаОстатков Тогда
		ВыборкаМаксимальныхОстатков = ВыборкаМинимальныхОстатков;
		ВыборкаМинимальныхОстатков = ВыборкаОбщихОстатков.Выбрать();
	Иначе
		ВыборкаМаксимальныхОстатков = ВыборкаОбщихОстатков.Выбрать();
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаМаксимальныхОстатков.Следующий();
	
	Если ВыборкаМаксимальныхОстатков.Дебитор Тогда
		СуффиксРеквизитовМинимальнойВыборки = "Кредитор";
		СуффиксРеквизитовМаксимальнойВыборки = "Дебитор";
	Иначе
		СуффиксРеквизитовМинимальнойВыборки = "Дебитор";
		СуффиксРеквизитовМаксимальнойВыборки = "Кредитор";
	КонецЕсли;
	
	ТекущаяСуммаМаксимальныхОстатков = ВыборкаМаксимальныхОстатков.СуммаОстаток;
	ТекущаяСуммаМинимальныхОстатков = 0;
	
	Пока ВыборкаМинимальныхОстатков.Следующий() Цикл
		
		ТекущаяСуммаМинимальныхОстатков = ВыборкаМинимальныхОстатков.СуммаОстаток;
		
		Пока ТекущаяСуммаМинимальныхОстатков > 0 Цикл
			
			Если ТекущаяСуммаМаксимальныхОстатков = 0 Тогда
				ВыборкаМаксимальныхОстатков.Следующий();
				ТекущаяСуммаМаксимальныхОстатков = ВыборкаМаксимальныхОстатков.СуммаОстаток;
				Продолжить;
			КонецЕсли;
			
			СуммаСделкиКЗаполнению = Мин(ТекущаяСуммаМинимальныхОстатков, ТекущаяСуммаМаксимальныхОстатков);
			ТекущаяСуммаМинимальныхОстатков = ТекущаяСуммаМинимальныхОстатков - СуммаСделкиКЗаполнению;
			ТекущаяСуммаМаксимальныхОстатков = ТекущаяСуммаМаксимальныхОстатков - СуммаСделкиКЗаполнению;
			
			НоваяСтрокаСостава = Объект.Состав.Добавить();
			НоваяСтрокаСостава.Сумма = СуммаСделкиКЗаполнению;
			НоваяСтрокаСостава["ДоговорВзаиморасчетов"+СуффиксРеквизитовМинимальнойВыборки] = 
				ВыборкаМинимальныхОстатков.ДоговорВзаиморасчетов;
			НоваяСтрокаСостава["ДоговорВзаиморасчетов"+СуффиксРеквизитовМаксимальнойВыборки] = 
				ВыборкаМаксимальныхОстатков.ДоговорВзаиморасчетов;
			НоваяСтрокаСостава["Сделка"+СуффиксРеквизитовМинимальнойВыборки] = 
				ВыборкаМинимальныхОстатков.Сделка;
			НоваяСтрокаСостава["Сделка"+СуффиксРеквизитовМаксимальнойВыборки] = 
				ВыборкаМаксимальныхОстатков.Сделка;
			НоваяСтрокаСостава["КурсВалютыДоговора"+СуффиксРеквизитовМинимальнойВыборки+"а"] = 
				ВыборкаМинимальныхОстатков.КурсВалютыВзаиморасчетов;
			НоваяСтрокаСостава["КурсВалютыДоговора"+СуффиксРеквизитовМаксимальнойВыборки+"а"] = 
				ВыборкаМаксимальныхОстатков.КурсВалютыВзаиморасчетов;
			НоваяСтрокаСостава["ТипРасчета"+СуффиксРеквизитовМинимальнойВыборки] = 
				ВыборкаМинимальныхОстатков.ТипРасчета;
			НоваяСтрокаСостава["ТипРасчета"+СуффиксРеквизитовМаксимальнойВыборки] = 
				ВыборкаМаксимальныхОстатков.ТипРасчета;
			НоваяСтрокаСостава["Заказ"+СуффиксРеквизитовМинимальнойВыборки] = 
				ВыборкаМинимальныхОстатков.Заказ;
			НоваяСтрокаСостава["Заказ"+СуффиксРеквизитовМаксимальнойВыборки] = 
				ВыборкаМаксимальныхОстатков.Заказ;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // СоставЗаполнитьДолгами()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.Взаимозачет",
		"ПФ_MXL_Взаимозачет",
		НСтр("ru = 'Взаимозачет'"),
		СсылкаНаДокумент
	);
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.Взаимозачет",
		"ПФ_MXL_ВзаимозачетTradeIn",
		НСтр("ru = 'Взаимозачет TradeIn'"),
		СсылкаНаДокумент
	);
	
	УправлениеПечатьюАльфаАвто.ДобавитьУсловиеВидимостиПоследнейКоманды(КомандыПечати, 
		"Дебитор", СсылкаНаДокумент.Кредитор);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Взаимозачет") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ПФ_MXL_Взаимозачет",
			"Взаимозачет",
			ПечатьВзаимозачет(МассивОбъектов, ОбъектыПечати)
		);
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ВзаимозачетTradeIn") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ПФ_MXL_ВзаимозачетTradeIn",
			НСтр("ru = 'Договор взаимозачета по TradeIn'"),
			ПечатьВзаимозачетTradeIn(МассивОбъектов, ОбъектыПечати)
		);
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "Взаимозачет"
//
Функция ПечатьВзаимозачет(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Взаимозачет_Взаимозачет";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Взаимозачет.ПФ_MXL_Взаимозачет");
		
		ЕстьВзаиморасчетыСДебеторомПоРасчетнымДокументам = РасчетыСКонтрагентамиСервер.ЕстьДоговорПоРасчетнымДокументам(
			Документ.Состав.ВыгрузитьКолонку("ДоговорВзаиморасчетовДебитор"));
		ЕстьВзаиморасчетыСКредиторомПоРасчетнымДокументам = РасчетыСКонтрагентамиСервер.ЕстьДоговорПоРасчетнымДокументам(
			Документ.Состав.ВыгрузитьКолонку("ДоговорВзаиморасчетовКредитор"));
		
		// форматы вывода 
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		Если ЕстьВзаиморасчетыСДебеторомПоРасчетнымДокументам
			ИЛИ ЕстьВзаиморасчетыСКредиторомПоРасчетнымДокументам Тогда
			ОбластьШапкаТаблицы     = Макет.ПолучитьОбласть("ШапкаТаблицыРасчеты");
			ОбластьСтрока   		= Макет.ПолучитьОбласть("СтрокаРасчеты");
			ОбластьИтогоПоСтранице 	= Макет.ПолучитьОбласть("ИтогоПоСтраницеРасчеты");
			ОбластьПодвал          	= Макет.ПолучитьОбласть("ПодвалРасчеты");
		Иначе
			ОбластьШапкаТаблицы     = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ОбластьСтрока   		= Макет.ПолучитьОбласть("Строка");
			ОбластьИтогоПоСтранице 	= Макет.ПолучитьОбласть("ИтогоПоСтранице");
			ОбластьПодвал          	= Макет.ПолучитьОбласть("Подвал");
		КонецЕсли;
		
		// вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизация =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		
		ОбластьЗаголовок.Параметры.Дебитор = Документ.Дебитор;
		ОбластьЗаголовок.Параметры.ДебиторПредставление =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Дебитор, , ДополнительныеПараметры);
		ОбластьЗаголовок.Параметры.Кредитор = Документ.Кредитор;
		ОбластьЗаголовок.Параметры.КредиторПредставление =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Кредитор, , ДополнительныеПараметры);
		ОбластьЗаголовок.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
	
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// готовим шапку
		НомерСтраницы = 2; НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,Сумма", Документ.ВалютаДокумента, 0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// готовим области строки
		ВыборкаТабличнойЧасти = Документ.Состав;
		СуммаВсего	= 0;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			// заполняем данные строки	
			ОбластьСтрока.Параметры.Заполнить(СтрокаТЧ);
			ОбластьСтрока.Параметры.Сумма = Формат(СтрокаТЧ.Сумма, ФорматВыводаСуммы);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если ВыборкаТабличнойЧасти.Индекс(СтрокаТЧ) = ВыборкаТабличнойЧасти.Количество()-1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,Сумма", Документ.ВалютаДокумента, 0);
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// итоги
		Сумма = Документ.Состав.Итог("Сумма");
		ОбластьПодвал.Параметры.ИтогоСумма = Формат(Сумма, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью =
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(Сумма, Документ.ВалютаДокумента);
		
		// Выводим представления и расшифровки подписей
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ГлавныйБухгалтер"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// зададим параметры макета
		ТабличныйДокумент.ТолькоПросмотр = Истина;
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции //ПечатьВзаимозачет()

// Формирует печатную форму "Договор взаимозачета по TradeIn"
//
Функция ПечатьВзаимозачетTradeIn(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Взаимозачет_ВзаимозачетTradeIn";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		// Это макет только для встречных требований - дебитор и кредитор должны совпадать,
		// иначе...
		Если Документ.Дебитор <> Документ.Кредитор Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Данная печатная форма не доступна для документа <%1>'"), Документ)
			);
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФизЛицо = Документ.Кредитор.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Взаимозачет.ПФ_MXL_ВзаимозачетTradeIn");
		
		// данные организации
		ПредставлениеРуководителя = "                     ";
		Организация = "";
		Должность = "";
		ОрганизацияЛицо = "";
		ЗаполнитьДанныеОрганизации(Документ, Организация, Должность, ОрганизацияЛицо, ПредставлениеРуководителя);
		
		// данные покупателя
		Покупатель = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Кредитор, Документ.Дата);
		
		// Подготовим данные подвала. он един для всех строк документа.
		ОбластьДанныеОрганизации = Макет.ПолучитьОбласть("АдресОрганизации");
		Если ФизЛицо Тогда
			ОбластьПокупательАдрес = Макет.ПолучитьОбласть("ФизЛицоАдрес");
		Иначе
			ОбластьПокупательАдрес = Макет.ПолучитьОбласть("ЮрЛицоАдрес");
		КонецЕсли;
		
		// Продавец
		ОбластьДанныеОрганизации.Параметры.Организация = Организация;
		
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(Документ.Организация);
		ДанныеЮрАдресаОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
			МассивОбъектов,
			Перечисления.ТипыКонтактнойИнформации.Адрес,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
			Документ.Дата
		);
		Город = "_____________";
		ЮрАдресОрганизации = "___________________________________________________________________________";
		Если ДанныеЮрАдресаОрганизации.Количество() > 0 Тогда
			ЮрАдресОрганизации = ДанныеЮрАдресаОрганизации[0].Представление;
			СтруктураАдреса = РаботаСАдресами.СведенияОбАдресе(ДанныеЮрАдресаОрганизации[0].ЗначенияПолей);
			Город = ПолучитьЗначениеПараметраСтруктуры(СтруктураАдреса, "Город", Город);
		КонецЕсли;
		ОбластьДанныеОрганизации.Параметры.ЮрАдресОрганизации = ЮрАдресОрганизации;
		
		ФизАдресОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Документ.Организация,
			Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации,
			Документ.Дата
		);
		Если НЕ ЗначениеЗаполнено(ФизАдресОрганизации) Тогда
			ФизАдресОрганизации = "___________________________________________________________________________";
		КонецЕсли;
		ОбластьДанныеОрганизации.Параметры.ФизАдресОрганизации = ФизАдресОрганизации;
		
		ТелефонОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Документ.Организация,
			Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,
			Документ.Дата
		);
		Если НЕ ЗначениеЗаполнено(ТелефонОрганизации) Тогда
			ТелефонОрганизации = "__________________";
		КонецЕсли;
		
		ФаксОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Документ.Организация,
			Справочники.ВидыКонтактнойИнформации.ФаксОрганизации,
			Документ.Дата
		);
		
		ОбластьДанныеОрганизации.Параметры.Телефон = ТелефонОрганизации 
			+ ?(СтрДлина(ФаксОрганизации) > 0, "," + ФаксОрганизации, ", _____________________");
		
		КППОрганизации = УправлениеПечатьюПлатформа.ПолучитьКППДляПечати(Документ.Организация, Неопределено, Документ.Дата);
		ОбластьДанныеОрганизации.Параметры.ИННКПП = СтрШаблон(НСтр("ru = 'ИНН %1, КПП %2'"),
			?(ЗначениеЗаполнено(Документ.Организация.ИНН), Документ.Организация.ИНН, "_______________"),
			?(СтрДлина(КППОрганизации) > 0, КППОрганизации, "_______________")
		);
		
		КодПоОКПО = Документ.Организация.КодПоОКПО;
		КодПоОКПО = ?(ЗначениеЗаполнено(КодПоОКПО), КодПоОКПО, "_____________");
		ОбластьДанныеОрганизации.Параметры.ОКПО = КодПоОКПО;
		
		ОсновнойСчетОрганизации = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Документ.Организация);
		ДанныеБанковскийСчет = ДайДанныеБанковскийСчет(ОсновнойСчетОрганизации);
		ОбластьДанныеОрганизации.Параметры.БанкПолучателя = ДанныеБанковскийСчет.Банк;
		ОбластьДанныеОрганизации.Параметры.РеквизитыБанка = СтрШаблон(НСтр("ru = 'р/сч %1, к/с %2; БИК %3'"),
			ДанныеБанковскийСчет.НомерСчета,
			ДанныеБанковскийСчет.КоррСчет,
			ДанныеБанковскийСчет.Код + "."
		);
		
		// Покупатель
		ПредставлениеПокупателя = "";
		ЗаполнитьИнформациюОПокупателе(Документ, ОбластьПокупательАдрес, Покупатель, ПредставлениеПокупателя, ФизЛицо);
		
		// подпись
		ОбластьПодпись = Макет.ПолучитьОбласть("Подпись");
		ОбластьПодпись.Параметры.ФИОПродавца = ПредставлениеРуководителя;
		ОбластьПодпись.Параметры.ФИОПокупателя = ПредставлениеПокупателя;
		
		Для Каждого СтрокаДокумента Из Документ.Состав Цикл
		
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
			// форматы вывода
			ОбластьШапка  = Макет.ПолучитьОбласть("Шапка");
			
			ОбластьШапка.Параметры.Дата = Формат(Документ.Дата, "ДЛФ=DD");
			ОбластьШапка.Параметры.Город = Город;
			ОбластьШапка.Параметры.Организация = Организация;
			ОбластьШапка.Параметры.ОрганизацияДолжность = Должность;
			ОбластьШапка.Параметры.ОрганизацияЛицо = ОрганизацияЛицо;
			
			ОбластьШапка.Параметры.Кредитор = Покупатель;
			
			ОбластьШапка.Параметры.ДоговорДебет = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
				СтрокаДокумента.ДоговорВзаиморасчетовДебитор, Документ.Дата
			);
			ОбластьШапка.Параметры.ДоговорКредит = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
				СтрокаДокумента.ДоговорВзаиморасчетовКредитор, Документ.Дата
			);
			СуммаДебет = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СтрокаДокумента.СделкаДебитор.СуммаДокумента,
				СтрокаДокумента.СделкаДебитор.ВалютаДокумента,
				СтрокаДокумента.СделкаДебитор.КурсДокумента,
				Документ.ВалютаДокумента,
				Документ.КурсДокумента,
				РежимОкругления.Окр15как20
			);
			
			ОбластьШапка.Параметры.СуммаДебет = СтрШаблон("%1 (%2)",
				Формат(СуммаДебет, ФорматВыводаСуммы),
				РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаДебет, Документ.ВалютаДокумента)
			);
			
			СуммаКредит = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СтрокаДокумента.СделкаКредитор.СуммаДокумента,
				СтрокаДокумента.СделкаКредитор.ВалютаДокумента,
				СтрокаДокумента.СделкаКредитор.КурсДокумента,
				Документ.ВалютаДокумента,
				Документ.КурсДокумента,
				РежимОкругления.Окр15как20
			);
			ОбластьШапка.Параметры.СуммаКредит = СтрШаблон("%1 (%2)",
				Формат(СуммаКредит, ФорматВыводаСуммы),
				РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКредит, Документ.ВалютаДокумента)
			);
			
			ОбластьШапка.Параметры.СуммаСоглашения = СтрШаблон("%1 (%2)",
				Формат(СтрокаДокумента.Сумма, ФорматВыводаСуммы),
				РаботаСКурсамиВалют.СформироватьСуммуПрописью(СтрокаДокумента.Сумма, Документ.ВалютаДокумента)
			);
			
			ТабличныйДокумент.Вывести(ОбластьШапка);
			ТабличныйДокумент.Вывести(ОбластьДанныеОрганизации);
			ТабличныйДокумент.Вывести(ОбластьПокупательАдрес);
			ТабличныйДокумент.Вывести(ОбластьПодпись);
			
			// отметим конец области документа
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьВзаимозачетTradeIn()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.Взаимозачет);

КонецФункции

#КонецОбласти

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"БалансВедетсяПоПодразделениям",
		БалансВедетсяПоПодразделениям(Объект.Дата));
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Взаимозачет.Организация КАК Организация,
	|	Взаимозачет.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Взаимозачет.Ссылка КАК Ссылка,
	|	Взаимозачет.Дата КАК Дата,
	|	Взаимозачет.ХозОперация КАК ХозОперация,
	|	Взаимозачет.ДокументОснование КАК ДокументОснование,
	|	Взаимозачет.Дебитор КАК Дебитор,
	|	Взаимозачет.Кредитор КАК Кредитор,
	|	Взаимозачет.СуммаДокумента КАК Сумма,
	|	Взаимозачет.ВалютаДокумента КАК ВалютаДокумента,
	|	Взаимозачет.КурсДокумента КАК КурсДокумента,
	|	Взаимозачет.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка) КАК СпособЗачетаАвансов,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.Взаимозачет КАК Взаимозачет
	|ГДЕ
	|	Взаимозачет.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ХозОперация КАК ХозОперация,
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокумента.Дебитор КАК Дебитор,
	|	ДанныеДокумента.Кредитор КАК Кредитор,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаимозачетСостав.Ссылка КАК Ссылка,
	|	ВзаимозачетСостав.ДоговорВзаиморасчетовДебитор КАК ДоговорВзаиморасчетовДебитор,
	|	ВзаимозачетСостав.ДоговорВзаиморасчетовКредитор КАК ДоговорВзаиморасчетовКредитор,
	|	ВзаимозачетСостав.СделкаДебитор КАК СделкаДебитор,
	|	ВзаимозачетСостав.СделкаКредитор КАК СделкаКредитор,
	|	ВЫБОР
	|		КОГДА ВзаимозачетСостав.КурсВалютыДоговораДебитора = 0
	|			ТОГДА ВЫБОР
	|					КОГДА ВзаимозачетСостав.ДоговорВзаиморасчетовДебитор.ВалютаВзаиморасчетов = ВзаимозачетСостав.Ссылка.ВалютаДокумента
	|						ТОГДА ВзаимозачетСостав.Ссылка.КурсДокумента
	|					ИНАЧЕ ВзаимозачетСостав.Ссылка.Дата
	|				КОНЕЦ
	|		ИНАЧЕ ВзаимозачетСостав.КурсВалютыДоговораДебитора
	|	КОНЕЦ КАК КурсВалютыДоговораДебитора,
	|	ВЫБОР
	|		КОГДА ВзаимозачетСостав.КурсВалютыДоговораКредитора = 0
	|			ТОГДА ВЫБОР
	|					КОГДА ВзаимозачетСостав.ДоговорВзаиморасчетовКредитор.ВалютаВзаиморасчетов = ВзаимозачетСостав.Ссылка.ВалютаДокумента
	|						ТОГДА ВзаимозачетСостав.Ссылка.КурсДокумента
	|					ИНАЧЕ ВзаимозачетСостав.Ссылка.Дата
	|				КОНЕЦ
	|		ИНАЧЕ ВзаимозачетСостав.КурсВалютыДоговораКредитора
	|	КОНЕЦ КАК КурсВалютыДоговораКредитора,
	|	ВзаимозачетСостав.Сумма КАК Сумма,
	|	ВзаимозачетСостав.ДоговорВзаиморасчетовДебитор.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетовДебитор,
	|	ВзаимозачетСостав.ДоговорВзаиморасчетовКредитор.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетовКредитор,
	|	ВзаимозачетСостав.ТипРасчетаДебитор КАК ТипРасчетаДебитор,
	|	ВзаимозачетСостав.ТипРасчетаКредитор КАК ТипРасчетаКредитор,
	|	ВзаимозачетСостав.ЗаказДебитор КАК ЗаказДебитор,
	|	ВзаимозачетСостав.ЗаказКредитор КАК ЗаказКредитор
	|ПОМЕСТИТЬ СоставВзаимозачета
	|ИЗ
	|	Документ.Взаимозачет.Состав КАК ВзаимозачетСостав
	|ГДЕ
	|	ВзаимозачетСостав.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	СуммовыеРазницы = РегистрыНакопления.РасчетыСКонтрагентами.ИнициализацияСуммовыхРазниц();
	
	// Дополним таблицу для списания суммовых разниц
	ТипыКурса = Новый Массив;
	ТипыКурса.Добавить(Тип("Число"));
	ТипыКурса.Добавить(Тип("Дата"));
	
	РасчетыСКонтрагентами.Колонки.Добавить(
		"КурсВалютыВзаиморасчетов",
		Новый ОписаниеТипов(ТипыКурса));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый МоментВремени(ДвиженияДокумента.ДляПроведения.Дата, ДвиженияДокумента.ДляПроведения.Ссылка));
	Запрос.Текст = "ВЫБРАТЬ
	|	СоставВзаимозачета.Ссылка КАК Ссылка,
	|	СоставВзаимозачета.ДоговорВзаиморасчетовДебитор КАК Договор,
	|	СоставВзаимозачета.СделкаДебитор КАК Сделка,
	|	СоставВзаимозачета.Сумма КАК Сумма,
	|	СоставВзаимозачета.КурсВалютыДоговораДебитора КАК КурсВалютыДоговора,
	|	СоставВзаимозачета.ВалютаВзаиморасчетовДебитор КАК ВалютаДоговора,
	|	СоставВзаимозачета.ТипРасчетаДебитор КАК ТипРасчета,
	|	СоставВзаимозачета.ЗаказДебитор КАК Заказ,
	|	ИСТИНА КАК ЭтоДебитор
	|ПОМЕСТИТЬ РасчетыКредитораДебитора
	|ИЗ
	|	СоставВзаимозачета КАК СоставВзаимозачета
	|ГДЕ
	|	СоставВзаимозачета.ДоговорВзаиморасчетовДебитор.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоставВзаимозачета.Ссылка,
	|	СоставВзаимозачета.ДоговорВзаиморасчетовКредитор,
	|	СоставВзаимозачета.СделкаКредитор,
	|	СоставВзаимозачета.Сумма,
	|	СоставВзаимозачета.КурсВалютыДоговораКредитора,
	|	СоставВзаимозачета.ВалютаВзаиморасчетовКредитор,
	|	СоставВзаимозачета.ТипРасчетаКредитор,
	|	СоставВзаимозачета.ЗаказКредитор,
	|	ЛОЖЬ
	|ИЗ
	|	СоставВзаимозачета КАК СоставВзаимозачета
	|ГДЕ
	|	СоставВзаимозачета.ДоговорВзаиморасчетовКредитор.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыКредитораДебитора.Ссылка КАК Ссылка,
	|	РасчетыКредитораДебитора.Договор КАК ДоговорВзаиморасчетов,
	|	РасчетыКредитораДебитора.Сделка КАК Сделка,
	|	РасчетыКредитораДебитора.Сумма КАК Сумма,
	|	РасчетыКредитораДебитора.КурсВалютыДоговора КАК КурсВалютыВзаиморасчетов,
	|	РасчетыКредитораДебитора.ВалютаДоговора КАК ВалютаДоговора,
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА РасчетыКредитораДебитора.ЭтоДебитор
	|			ТОГДА Задолженность.Дебитор
	|		ИНАЧЕ Задолженность.Кредитор
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА РасчетыКредитораДебитора.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(РасчетыКредитораДебитора.Сделка КАК Документ.ЗаказНаряд).Состояние
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СостояниеЗаказНаряда,
	|	ВЫБОР
	|		КОГДА РасчетыКредитораДебитора.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(РасчетыКредитораДебитора.Сделка КАК Документ.ЗаказНаряд).ДатаЗакрытия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаЗакрытия,
	|	РасчетыКредитораДебитора.ТипРасчета КАК ТипРасчета,
	|	РасчетыКредитораДебитора.Заказ КАК Заказ,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.ДокументОснование КАК ДокументОснование,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр,
	|	РасчетыКредитораДебитора.ЭтоДебитор КАК ЭтоДебитор
	|ИЗ
	|	РасчетыКредитораДебитора КАК РасчетыКредитораДебитора
	|		ЛЕВОЕ СОЕДИНЕНИЕ Задолженность КАК Задолженность
	|		ПО РасчетыКредитораДебитора.Ссылка = Задолженность.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Организация КАК Организация,
	|	РасчетыСКонтрагентамиОстатки.Контрагент КАК Контрагент,
	|	РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	РасчетыСКонтрагентамиОстатки.ТипРасчета КАК ТипРасчета,
	|	РасчетыСКонтрагентамиОстатки.ДокументРасчетов КАК Сделка,
	|	РасчетыСКонтрагентамиОстатки.Заказ КАК Заказ,
	|	РасчетыСКонтрагентамиОстатки.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(
	|			&МоментВремени,
	|			(ДоговорВзаиморасчетов, ДокументРасчетов, Заказ, ТипРасчета) В
	|				(ВЫБРАТЬ
	|					РасчетыКредитораДебитора.Договор КАК Договор,
	|					РасчетыКредитораДебитора.Сделка КАК Сделка,
	|					РасчетыКредитораДебитора.Заказ КАК Заказ,
	|					РасчетыКредитораДебитора.ТипРасчета КАК ТипРасчета
	|				ИЗ
	|					РасчетыКредитораДебитора КАК РасчетыКредитораДебитора)) КАК РасчетыСКонтрагентамиОстатки";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[1].Пустой() Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	НеЗакрытыеСделки = РезультатЗапроса[2].Выгрузить();
	ДанныеОбОплате = РезультатЗапроса[1].Выбрать();
	
	Пока ДанныеОбОплате.Следующий() Цикл
		
		Если ДанныеОбОплате.ВалютаДокумента = ДанныеОбОплате.ВалютаДоговора Тогда
			СуммаОплаты = ДанныеОбОплате.Сумма;
		Иначе
			СуммаОплаты = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					ДанныеОбОплате.Сумма,
					ДанныеОбОплате.ВалютаДокумента,
					ДанныеОбОплате.КурсДокумента,
					ДанныеОбОплате.ВалютаДоговора,
					ДанныеОбОплате.КурсВалютыВзаиморасчетов),
				2);
		КонецЕсли;
		
		РасчетыСКонтрагентамиСервер.ДобавитьЗаписьРасчетаКонтрагентов(
			ДанныеОбОплате,
			РасчетыСКонтрагентами,
			СуммаОплаты,
			?(ДанныеОбОплате.ЭтоДебитор, ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход),
			?(ДанныеОбОплате.ЭтоДебитор,
				Перечисления.ВидыОперацийВзаиморасчетов.ПогашениеДебиторскойЗадолженности,
				Перечисления.ВидыОперацийВзаиморасчетов.ПогашениеКредиторскойЗадолженности),
			ДанныеОбОплате.Сделка,
			ДанныеОбОплате.ТипРасчета);
		
		// Получим остаток
		СуммаОстаток = 0;
		УсловиеПоиска = Новый Структура();
		УсловиеПоиска.Вставить("Организация");
		УсловиеПоиска.Вставить("Контрагент");
		УсловиеПоиска.Вставить("ТипРасчета");
		УсловиеПоиска.Вставить("Сделка");
		УсловиеПоиска.Вставить("Заказ");
		ЗаполнитьЗначенияСвойств(УсловиеПоиска, ДанныеОбОплате);
		
		НайденныеСтроки = НеЗакрытыеСделки.НайтиСтроки(УсловиеПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СуммаОстаток = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					НайденныеСтроки[0].СуммаОстаток,
					ДанныеОбОплате.ВалютаДоговора,
					ДанныеОбОплате.КурсВалютыВзаиморасчетов,
					ДанныеОбОплате.ВалютаДокумента,
					ДанныеОбОплате.КурсДокумента),
				2);
			
			Если Не ДанныеОбОплате.ЭтоДебитор Тогда
				
				СуммаОстаток = - СуммаОстаток;
				
			КонецЕсли;
			
		КонецЕсли;
		
		РасчетыСКонтрагентамиСервер.ПроверитьПереплатуПоСделке(
			ДанныеОбОплате.Сделка,
			ДанныеОбОплате.Сумма,
			СуммаОстаток,
			Отказ);
		
	КонецЦикла;
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	// Дополним таблицу суммовыми разницами
	РегистрыНакопления.РасчетыСКонтрагентами.СписатьСуммовыеРазницы(
		ДанныеОбОплате,
		РасчетыСКонтрагентами,
		СуммовыеРазницы,
		Истина,
		Ложь);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	ДвиженияДокумента.Вставить("СуммовыеРазницы", СуммовыеРазницы);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли