// Модуль документа "Взаимозачет"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = ИСТИНА)
	
	ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ЭтотОбъект);
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, 
																						СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ЭтотОбъект, Истина);
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	СпособВеденияВзаиморасчетовДоговоровДебитор = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		Состав.ВыгрузитьКолонку("ДоговорВзаиморасчетовДебитор"),
		"СпособВеденияВзаиморасчетов");
	СпособВеденияВзаиморасчетовДоговоровКредитор = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		Состав.ВыгрузитьКолонку("ДоговорВзаиморасчетовКредитор"),
		"СпособВеденияВзаиморасчетов");
	
	Для Каждого СтрокаСостава Из Состав Цикл
		
		Если СпособВеденияВзаиморасчетовДоговоровДебитор.Получить(СтрокаСостава.ДоговорВзаиморасчетовДебитор)
			= Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам
			И Не ЗначениеЗаполнено(СтрокаСостава.ТипРасчетаДебитор) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Для строки %1 табличной части ""Состав"" не заполнен реквизит ""Тип расчета дебитора"".'"),
					СтрокаСостава.НомерСтроки),
				ЭтотОбъект,
				СтрШаблон("Состав[%1].ТипРасчетаДебитор", Состав.Индекс(СтрокаСостава)),
				,
				Отказ
			);
		КонецЕсли;
		
		Если СпособВеденияВзаиморасчетовДоговоровКредитор.Получить(СтрокаСостава.ДоговорВзаиморасчетовКредитор)
			= Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам
			И Не ЗначениеЗаполнено(СтрокаСостава.ТипРасчетаКредитор) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Для строки %1 табличной части ""Состав"" не заполнен реквизит ""Тип расчета кредитора"".'"),
					СтрокаСостава.НомерСтроки),
				ЭтотОбъект,
				СтрШаблон("Состав[%1].ТипРасчетаКредитор", Состав.Индекс(СтрокаСостава)),
				,
				Отказ
			);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Выполним проверку соответствия ДоговораВзаиморасчетов в ТЧ Состав с Договором в документе Сделка.
	Для Каждого Строка Из Состав Цикл
		
		ПараметрыДействия = Новый Структура("ПроверкаПередЗаписью", Истина);
		
		Документы.Взаимозачет.ОбработатьВыборСделки(Строка, "Дебитор", ЭтотОбъект, ПараметрыДействия);
		Документы.Взаимозачет.ОбработатьВыборСделки(Строка, "Кредитор", ЭтотОбъект, ПараметрыДействия);
		ОтказДебитор = ?(Строка.СделкаДебитор = Неопределено, Истина, Ложь);
		ОтказКредитор = ?(Строка.СделкаКредитор = Неопределено, Истина, Ложь);
		
		Если ОтказДебитор ИЛИ ОтказКредитор Тогда
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	СпособВеденияВзаиморасчетовДоговоровДебитор = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		Состав.ВыгрузитьКолонку("ДоговорВзаиморасчетовДебитор"),
		"СпособВеденияВзаиморасчетов");
	СпособВеденияВзаиморасчетовДоговоровКредитор = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		Состав.ВыгрузитьКолонку("ДоговорВзаиморасчетовКредитор"),
		"СпособВеденияВзаиморасчетов");
	
	// проводим
	НаборЗаписейВзаиморасчетыКомпании = Движения.ВзаиморасчетыКомпании;
	НаборЗаписейВзаиморасчетыКомпании.РежимПроведения = РежимПроведения;
	
	ТипыСделокПокупателя = ЗаказыСервер.ПолучитьТипыСделок(Истина);
	ТипыСделокПоставщика = ЗаказыСервер.ПолучитьТипыСделок(Ложь);
	
	// БАЛАНС: Подразделения договор кредитора и дебитора могут находиться в различных балансовых "ветках".
	// Поэтому, в случае ведения баланса по подразделениям возникнет балансовый разрыв.
	// Необходимо добавить корректирующие движения по регистру "Доходы и расходы".
	БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(Дата);
	Если БалансВедетсяПоПодразделениям Тогда
		ТаблицаВзаиморасчетов = Новый ТаблицаЗначений;
		ТаблицаВзаиморасчетов.Колонки.Добавить("Подразделение",  
								Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
		ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаУпрДоход",  Новый ОписаниеТипов("Число"));
		ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаУпрРасход", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	// Суммовые разницы возникают в рамках договора, поэтому их нельзя списывать одним движением.
	ТаблицаСуммовыхРазниц = Новый ТаблицаЗначений;
	ТаблицаСуммовыхРазниц.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
	ТаблицаСуммовыхРазниц.Колонки.Добавить("СуммаУпр",      Новый ОписаниеТипов("Число"));
      	       	
	Доход  = 0; 
	Расход = 0;
	ЕстьДоговорПоРасчетнымДокументамДебитор = Ложь;
	ЕстьДоговорПоРасчетнымДокументамКредитор = Ложь;
	Для Каждого СтрокаТЧ Из Состав Цикл
		СуммоваяРазницаПоДебитору  = 0;
		СуммоваяРазницаПоКредитору = 0;
		
		Доход = Доход + СтрокаТЧ.Сумма;
		Расход = Расход + СтрокаТЧ.Сумма;
		
		ПоРасчетнымДокументамДебитор =
			(СпособВеденияВзаиморасчетовДоговоровДебитор.Получить(
				СтрокаТЧ.ДоговорВзаиморасчетовДебитор) =
			Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам);
		ПоРасчетнымДокументамКредитор =
			(СпособВеденияВзаиморасчетовДоговоровКредитор.Получить(
				СтрокаТЧ.ДоговорВзаиморасчетовКредитор) =
			Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам);
		
		Если Не ПоРасчетнымДокументамДебитор Тогда
			НаборЗаписейВзаиморасчетыКомпании.ДокументОбъект        = ЭтотОбъект;
			НаборЗаписейВзаиморасчетыКомпании.Контрагент            = Дебитор;
			НаборЗаписейВзаиморасчетыКомпании.ДоговорВзаиморасчетов = СтрокаТЧ.ДоговорВзаиморасчетовДебитор;
			НаборЗаписейВзаиморасчетыКомпании.КурсВзаиморасчетов    = ?(СтрокаТЧ.КурсВалютыДоговораДебитора = 0, 
																Неопределено, СтрокаТЧ.КурсВалютыДоговораДебитора);
			НаборЗаписейВзаиморасчетыКомпании.Сделка = СтрокаТЧ.СделкаДебитор;
			НаборЗаписейВзаиморасчетыКомпании.АвтоЗакрытиеСделок	= Ложь;
			НаборЗаписейВзаиморасчетыКомпании.СписатьНераспределеннуюСуммуПоСделке = Истина;
			Если ТипыСделокПокупателя.СодержитТип(ТипЗнч(СтрокаТЧ.СделкаДебитор)) Тогда
				НаборЗаписейВзаиморасчетыКомпании.ВзаиморасчетыСПокупателем = Истина;
			ИначеЕсли ТипыСделокПоставщика.СодержитТип(ТипЗнч(СтрокаТЧ.СделкаДебитор)) Тогда
				НаборЗаписейВзаиморасчетыКомпании.ВзаиморасчетыСПокупателем = Ложь;
			Иначе
				НаборЗаписейВзаиморасчетыКомпании.ВзаиморасчетыСПокупателем = Неопределено;
			КонецЕсли; 
			НаборЗаписейВзаиморасчетыКомпании.Сумма = СтрокаТЧ.Сумма;
			НаборЗаписейВзаиморасчетыКомпании.СуммаДоходаРасходаСуммовыхРазниц = 0;
			Отказ = НЕ НаборЗаписейВзаиморасчетыКомпании.Расход() ИЛИ Отказ;
			СуммоваяРазницаПоДебитору = НаборЗаписейВзаиморасчетыКомпании.СуммаДоходаРасходаСуммовыхРазниц;
		Иначе
			ЕстьДоговорПоРасчетнымДокументамДебитор = Истина;
		КонецЕсли;
		
		Если Не ПоРасчетнымДокументамКредитор Тогда
			НаборЗаписейВзаиморасчетыКомпании.ДокументОбъект        = ЭтотОбъект;
			НаборЗаписейВзаиморасчетыКомпании.Контрагент            = Кредитор;
			НаборЗаписейВзаиморасчетыКомпании.ДоговорВзаиморасчетов = СтрокаТЧ.ДоговорВзаиморасчетовКредитор;
			НаборЗаписейВзаиморасчетыКомпании.КурсВзаиморасчетов    = ?(СтрокаТЧ.КурсВалютыДоговораКредитора = 0, 
																Неопределено, СтрокаТЧ.КурсВалютыДоговораКредитора);
			НаборЗаписейВзаиморасчетыКомпании.Сделка                = СтрокаТЧ.СделкаКредитор;
			НаборЗаписейВзаиморасчетыКомпании.АвтоЗакрытиеСделок 	= Ложь;
			НаборЗаписейВзаиморасчетыКомпании.СписатьНераспределеннуюСуммуПоСделке = Истина;
			Если ТипыСделокПокупателя.СодержитТип(ТипЗнч(СтрокаТЧ.СделкаКредитор)) Тогда
				НаборЗаписейВзаиморасчетыКомпании.ВзаиморасчетыСПокупателем = Истина;
			ИначеЕсли ТипыСделокПоставщика.СодержитТип(ТипЗнч(СтрокаТЧ.СделкаКредитор)) Тогда
				НаборЗаписейВзаиморасчетыКомпании.ВзаиморасчетыСПокупателем = Ложь;
			Иначе
				НаборЗаписейВзаиморасчетыКомпании.ВзаиморасчетыСПокупателем = Неопределено;
			КонецЕсли; 
			НаборЗаписейВзаиморасчетыКомпании.Сумма = СтрокаТЧ.Сумма;
			НаборЗаписейВзаиморасчетыКомпании.СуммаДоходаРасходаСуммовыхРазниц = 0;
			Отказ  = НЕ НаборЗаписейВзаиморасчетыКомпании.Приход() ИЛИ Отказ;
			СуммоваяРазницаПоКредитору = НаборЗаписейВзаиморасчетыКомпании.СуммаДоходаРасходаСуммовыхРазниц;
		Иначе
			ЕстьДоговорПоРасчетнымДокументамКредитор = Истина;
		КонецЕсли;
		
		// Заполняем таблицу суммовых разниц. Отдельно по кредиту и дебету.
		Если СуммоваяРазницаПоДебитору <> 0 Тогда
			НоваяСтрока = ТаблицаСуммовыхРазниц.Добавить();
			Если БалансВедетсяПоПодразделениям Тогда
				НоваяСтрока.Подразделение = СтрокаТЧ.ДоговорВзаиморасчетовДебитор.ПодразделениеКомпании;
			Иначе
				НоваяСтрока.Подразделение = ПодразделениеКомпании;  
			КонецЕсли;
			НоваяСтрока.СуммаУпр      = СуммоваяРазницаПоДебитору;
		КонецЕсли;
		
		Если СуммоваяРазницаПоКредитору <> 0 Тогда
			НоваяСтрока = ТаблицаСуммовыхРазниц.Добавить();
			Если БалансВедетсяПоПодразделениям Тогда
				НоваяСтрока.Подразделение = СтрокаТЧ.ДоговорВзаиморасчетовДебитор.ПодразделениеКомпании;
			Иначе
				НоваяСтрока.Подразделение = ПодразделениеКомпании;  
			КонецЕсли; 
			НоваяСтрока.СуммаУпр      = СуммоваяРазницаПоКредитору;
		КонецЕсли;
		
		// БАЛАНС: проверяем, находятся ли подразделения в различных балансовых ветках.
		Если БалансВедетсяПоПодразделениям Тогда
			ПодразделениеДебитора  = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(	
			                                СтрокаТЧ.ДоговорВзаиморасчетовДебитор.ПодразделениеКомпании, Дата);		
			ПодразделениеКредитора = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(
											СтрокаТЧ.ДоговорВзаиморасчетовКредитор.ПодразделениеКомпании, Дата);	
			Если ПодразделениеДебитора <> ПодразделениеКредитора Тогда
				// Увеличение кредиторской задолженности
				Если Не ПоРасчетнымДокументамДебитор Тогда
					НоваяСтрока = ТаблицаВзаиморасчетов.Добавить();
					НоваяСтрока.Подразделение  = СтрокаТЧ.ДоговорВзаиморасчетовДебитор.ПодразделениеКомпании;
					НоваяСтрока.СуммаУпрРасход = СтрокаТЧ.Сумма;
				КонецЕсли;
				
				// Увеличение дебиторской задолженности
				Если Не ПоРасчетнымДокументамКредитор Тогда
					НоваяСтрока = ТаблицаВзаиморасчетов.Добавить();
					НоваяСтрока.Подразделение  = СтрокаТЧ.ДоговорВзаиморасчетовКредитор.ПодразделениеКомпании;
					НоваяСтрока.СуммаУпрДоход  = СтрокаТЧ.Сумма;
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
	Документы.Взаимозачет.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	
	Если ЕстьДоговорПоРасчетнымДокументамДебитор ИЛИ ЕстьДоговорПоРасчетнымДокументамКредитор Тогда
		Документы.Взаимозачет.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	КонецЕсли;
	
	//Документы.Взаимозачет.СформироватьТаблицуДоходыИРасходы(ДополнительныеСвойства);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	// БАЛАНС: создаем корректирующие движения.
	Если БалансВедетсяПоПодразделениям Тогда
		ТаблицаВзаиморасчетов.Свернуть("Подразделение", "СуммаУпрРасход, СуммаУпрДоход");
		Для Каждого ТекСтрока Из ТаблицаВзаиморасчетов  Цикл 
			Если ТекСтрока.СуммаУпрРасход <> 0 Тогда
				// Корректируем движения взаиморасчетов.
				НаборЗаписейДиР = Движения.ДоходыИРасходы;
				НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
				НаборЗаписейДиР.Подразделение          = ТекСтрока.Подразделение;
				НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
				НаборЗаписейДиР.ВУпрВалюте             = Ложь;
				НаборЗаписейДиР.Расход                 = ТекСтрока.СуммаУпрРасход;
				Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;	
			КонецЕсли;
			Если ТекСтрока.СуммаУпрДоход <> 0 Тогда
				// Корректируем движения взаиморасчетов.
				НаборЗаписейДиР = Движения.ДоходыИРасходы;
				НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
				НаборЗаписейДиР.Подразделение          = ТекСтрока.Подразделение;
				НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
				НаборЗаписейДиР.ВУпрВалюте             = Ложь;
				НаборЗаписейДиР.Доход                  = ТекСтрока.СуммаУпрДоход;
				Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Доходы и расходы по суммовым разницам.
	Если ДополнительныеСвойства.Свойство("СуммовыеРазницы") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
			ДополнительныеСвойства.СуммовыеРазницы, ТаблицаСуммовыхРазниц);
	КонецЕсли;
	ТаблицаСуммовыхРазниц.Свернуть("Подразделение", "СуммаУпр");
	Для Каждого ТекСтрока Из ТаблицаСуммовыхРазниц Цикл
		НаборЗаписейДиР = Движения.ДоходыИРасходы;
		НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДиР.Подразделение          = ТекСтрока.Подразделение;
		НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
		НаборЗаписейДиР.ВУпрВалюте             = Истина;
		Если ТекСтрока.СуммаУпр < 0 Тогда
			НаборЗаписейДиР.Расход = -ТекСтрока.СуммаУпр;
		Иначе
			НаборЗаписейДиР.Доход = ТекСтрока.СуммаУпр;
		КонецЕсли;
		Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;		
	КонецЦикла;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	// двигаем границу последовательности взаиморасчетов
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Заказ на автомобиль"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаАвтомобиль(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, 
									ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивЗаказов = Документы.Взаимозачет.ПолучитьСписокЗаказовНаАвтомобиль(ДанныеЗаполнения);
	
	Если МассивЗаказов.Количество() > 0 Тогда
		
		ПересчетСуммы = Ложь;
		
		Если ВалютаДокумента = Константы.ВалютаУправленческогоУчетаКомпании.Получить() Тогда
			ИмяРесурсаСуммы = "СуммаУпр";
		ИначеЕсли ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
			ИмяРесурсаСуммы = "СуммаБаз";
		Иначе
			ИмяРесурсаСуммы = "Сумма";
			ПересчетСуммы   = Истина;
		КонецЕсли;
		
		НовыйУчетРасчетовСКонтрагентом = РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(
			ДанныеЗаполнения.ДоговорВзаиморасчетов);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
		
		Если НовыйУчетРасчетовСКонтрагентом Тогда
			Запрос.Текст = "ВЫБРАТЬ
			|	РасчетыСКонтрагентамиОстатки.Контрагент КАК Контрагент,
			|	РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетовКредитор,
			|	РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК Валюта,
			|	РасчетыСКонтрагентамиОстатки.ДокументРасчетов КАК СделкаКредитор,
			|	РасчетыСКонтрагентамиОстатки.ТипРасчета КАК ТипРасчетаКредитор,
			|	РасчетыСКонтрагентамиОстатки.Заказ КАК ЗаказКредитор,
			|	РасчетыСКонтрагентамиОстатки." + ИмяРесурсаСуммы + "Остаток КАК Сумма
			|ИЗ
			|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(, Заказ В (&МассивЗаказов)) КАК РасчетыСКонтрагентамиОстатки
			|ГДЕ
			|	РасчетыСКонтрагентамиОстатки." + ИмяРесурсаСуммы + "Остаток < 0
			|ИТОГИ ПО
			|	Контрагент";
		Иначе
			Запрос.Текст = "ВЫБРАТЬ
			|	ВзаиморасчетыКомпанииОстатки.Контрагент,
			|	ВзаиморасчетыКомпанииОстатки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетовКредитор,
			|	ВзаиморасчетыКомпанииОстатки.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК Валюта,
			|	ВзаиморасчетыКомпанииОстатки.Сделка КАК СделкаКредитор,
			|	ВзаиморасчетыКомпанииОстатки." + ИмяРесурсаСуммы + "Остаток КАК Сумма
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыКомпании.Остатки(, Сделка В (&МассивЗаказов)) КАК ВзаиморасчетыКомпанииОстатки
			|ГДЕ
			|	ВзаиморасчетыКомпанииОстатки." + ИмяРесурсаСуммы + "Остаток < 0
			|ИТОГИ ПО
			|	Контрагент
			|";
		КонецЕсли;
		
		ВыборкаКонтрагент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Дебитор  = ДанныеЗаполнения.Контрагент;
		Договор  = ДанныеЗаполнения.ДоговорВзаиморасчетов;
		Валюта   = ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов;
		стрКурс  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Дата);
		
		Попытка
			КурсВалютыДоговораДебитора = стрКурс.Курс / ?(стрКурс.Кратность = 0, 1, стрКурс.Кратность);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка записи курса валюты'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если ВыборкаКонтрагент.Следующий() Тогда
			
			Кредитор = ВыборкаКонтрагент.Контрагент;
			Выборка  = ВыборкаКонтрагент.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				НоваяСтрока = Состав.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				стрКурс = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.Валюта, Дата);
				
				Попытка
					НоваяСтрока.КурсВалютыДоговораКредитора = стрКурс.Курс / ?(стрКурс.Кратность = 0, 1, стрКурс.Кратность);
				Исключение 
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка записи курса валюты'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
				НоваяСтрока.Сумма                         = -Выборка.Сумма;
				НоваяСтрока.ДоговорВзаиморасчетовДебитор  = Договор;
				Если НовыйУчетРасчетовСКонтрагентом Тогда
					НоваяСтрока.ТипРасчетаДебитор = Перечисления.ТипыРасчетов.Аванс;
					НоваяСтрока.ЗаказДебитор = ДанныеЗаполнения;
				Иначе
					НоваяСтрока.СделкаДебитор = ДанныеЗаполнения;
				КонецЕсли;
				НоваяСтрока.КурсВалютыДоговораДебитора    = КурсВалютыДоговораДебитора;
				
				Если ПересчетСуммы И (НЕ ВалютаДокумента = Выборка.Валюта) Тогда
					НоваяСтрока.Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(-Выборка.Сумма, Выборка.Валюта, 
						НоваяСтрока.КурсВалютыДоговораКредитора, ВалютаДокумента, Дата);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаАвтомобиль()

// Производит заполнение объекта на основании документа "Заказ поставщику на автомобиль".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПоставщикуНаАвтомобиль(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, 
								ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивЗаказов = Документы.Взаимозачет.ПолучитьСписокЗаказовНаАвтомобильПоставщику(ДанныеЗаполнения);
	
	Если МассивЗаказов.Количество() > 0 Тогда
		
		ПересчетСуммы = Ложь;
		
		Если ВалютаДокумента = Константы.ВалютаУправленческогоУчетаКомпании.Получить() Тогда
			ИмяРесурсаСуммы = "СуммаУпр";
		ИначеЕсли ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
			ИмяРесурсаСуммы = "СуммаБаз";
		Иначе
			ИмяРесурсаСуммы = "Сумма";
			ПересчетСуммы   = Истина;
		КонецЕсли;
		
		НовыйУчетРасчетовСКонтрагентом = РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(
			ДанныеЗаполнения.ДоговорВзаиморасчетов);
			
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
		
		Если НовыйУчетРасчетовСКонтрагентом Тогда
			Запрос.Текст = "ВЫБРАТЬ
			|	РасчетыСКонтрагентамиОстатки.Контрагент КАК Контрагент,
			|	РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетовДебитор,
			|	РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК Валюта,
			|	РасчетыСКонтрагентамиОстатки.ДокументРасчетов КАК СделкаДебитор,
			|	РасчетыСКонтрагентамиОстатки.ТипРасчета КАК ТипРасчетаДебитор,
			|	РасчетыСКонтрагентамиОстатки.Заказ КАК ЗаказДебитор,
			|	РасчетыСКонтрагентамиОстатки." + ИмяРесурсаСуммы + "Остаток КАК Сумма
			|ИЗ
			|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(, Заказ В (&МассивЗаказов)) КАК РасчетыСКонтрагентамиОстатки
			|ГДЕ
			|	РасчетыСКонтрагентамиОстатки." + ИмяРесурсаСуммы + "Остаток > 0
			|ИТОГИ ПО
			|	Контрагент";
		Иначе
			Запрос.Текст = "ВЫБРАТЬ
			|	ВзаиморасчетыКомпанииОстатки.Контрагент,
			|	ВзаиморасчетыКомпанииОстатки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетовДебитор,
			|	ВзаиморасчетыКомпанииОстатки.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК Валюта,
			|	ВзаиморасчетыКомпанииОстатки.Сделка КАК СделкаДебитор,
			|	ВзаиморасчетыКомпанииОстатки." + ИмяРесурсаСуммы + "Остаток КАК Сумма
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыКомпании.Остатки(, Сделка В (&МассивЗаказов)) КАК ВзаиморасчетыКомпанииОстатки
			|ГДЕ
			|	ВзаиморасчетыКомпанииОстатки." + ИмяРесурсаСуммы + "Остаток > 0
			|ИТОГИ ПО
			|	Контрагент
			|";
		КонецЕсли;
		ВыборкаКонтрагент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Кредитор = ДанныеЗаполнения.Контрагент;
		Договор  = ДанныеЗаполнения.ДоговорВзаиморасчетов;
		Валюта   = ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов;
		стрКурс  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Дата);
		
		Попытка
			КурсВалютыДоговораКредитора = стрКурс.Курс / ?(стрКурс.Кратность = 0, 1, стрКурс.Кратность);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка записи курса валюты'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если ВыборкаКонтрагент.Следующий() Тогда
			
			Дебитор = ВыборкаКонтрагент.Контрагент;
			Выборка = ВыборкаКонтрагент.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				НоваяСтрока = Состав.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				стрКурс = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.Валюта, Дата);
				
				Попытка
					НоваяСтрока.КурсВалютыДоговораДебитора = стрКурс.Курс / ?(стрКурс.Кратность = 0, 1, стрКурс.Кратность);
				Исключение 
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка записи курса валюты'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
				НоваяСтрока.Сумма                         = Выборка.Сумма;
				НоваяСтрока.ДоговорВзаиморасчетовКредитор = Договор;
				Если НовыйУчетРасчетовСКонтрагентом Тогда
					НоваяСтрока.ТипРасчетаКредитор = Перечисления.ТипыРасчетов.Аванс;
					НоваяСтрока.ЗаказКредитор = ДанныеЗаполнения;
				Иначе
					НоваяСтрока.СделкаКредитор = ДанныеЗаполнения;
				КонецЕсли;
				НоваяСтрока.КурсВалютыДоговораКредитора   = КурсВалютыДоговораКредитора;
				
				Если ПересчетСуммы И (НЕ ВалютаДокумента = Выборка.Валюта) Тогда
					НоваяСтрока.Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Выборка.Сумма, Выборка.Валюта, 
															НоваяСтрока.КурсВалютыДоговораДебитора, ВалютаДокумента, Дата);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПоставщикуНаАвтомобиль()

// Производит заполнение объекта на основании документа "Отчет комитенту за автомобили".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ОтчетКомитентуЗаАвтомобили(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПрерватьЗаполнение = Не ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект,
		ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
	Если ПрерватьЗаполнение Тогда
			
		Возврат Истина;
		
	КонецЕсли;
	
	Если
		Не ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование)
		Или ТипЗнч(ДанныеЗаполнения.ДокументОснование) <> Тип("ДокументСсылка.ПоступлениеАвтомобилей")
	Тогда
		
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
			ЭтотОбъект,
			НСтр("ru='Для создания документа ""Взаимозачет"", основанием документа ""Отчет комитенту за автомобили"" должен быть документ ""Поступление автомобилей на комиссию"". '")
		);
		Возврат Ложь;
		
	КонецЕсли;
	
	НовыйУчетРасчетовСКонтрагентом = РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(
		ДанныеЗаполнения.ДоговорВзаиморасчетов);
	
	СуммаРаспределения = ДанныеЗаполнения.СуммаДокумента - ДанныеЗаполнения.СуммаВознаграждения;
	ЗаказНаАвто = АвтомобилиСПробегомСервер.СвязанныйЗаказ(ДанныеЗаполнения.ДокументОснование);
	
	ДокументОснование = ДанныеЗаполнения.ДокументОснование;
		
	Кредитор = ДанныеЗаполнения.Контрагент;
	Дебитор = Кредитор;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказыАвтомобилей.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ЗаказыАвтомобилей КАК ЗаказыАвтомобилей
		|ГДЕ
		|	ЗаказыАвтомобилей.ВидДвижения = &ВидДвижения
		|	И ЗаказыАвтомобилей.Заказ = &Заказ";
	
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("Заказ", ЗаказНаАвто);

	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	НоваяСтрока = Состав.Добавить();
	НоваяСтрока.Сумма 							= СуммаРаспределения;
	НоваяСтрока.ДоговорВзаиморасчетовКредитор 	= ДанныеЗаполнения.ДоговорВзаиморасчетов;
	Если НовыйУчетРасчетовСКонтрагентом Тогда
		НоваяСтрока.ТипРасчетаКредитор = Перечисления.ТипыРасчетов.Оплата;
	КонецЕсли;
	НоваяСтрока.СделкаКредитор = ДанныеЗаполнения;

	Если РезультатЗапроса.Количество() > 0 Тогда
		
		НоваяСтрока.ДоговорВзаиморасчетовДебитор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			РезультатЗапроса[0].Регистратор, "ДоговорВзаиморасчетов");
		Если НовыйУчетРасчетовСКонтрагентом Тогда
			НоваяСтрока.ТипРасчетаДебитор = Перечисления.ТипыРасчетов.Оплата;
		КонецЕсли;
		НоваяСтрока.СделкаДебитор = РезультатЗапроса[0].Регистратор;
		
	ИначеЕсли ЗаказНаАвто <> Неопределено Тогда
		
		НоваяСтрока.ДоговорВзаиморасчетовДебитор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказНаАвто, "ДоговорВзаиморасчетов");
		Если НовыйУчетРасчетовСКонтрагентом Тогда
			НоваяСтрока.ТипРасчетаДебитор = Перечисления.ТипыРасчетов.Оплата;
			НоваяСтрока.ЗаказДебитор = ЗаказНаАвто;
		Иначе
			НоваяСтрока.СделкаДебитор = ЗаказНаАвто;
		КонецЕсли;
		
	КонецЕсли;
		
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ОтчетКомитентуЗаАвтомобили()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
