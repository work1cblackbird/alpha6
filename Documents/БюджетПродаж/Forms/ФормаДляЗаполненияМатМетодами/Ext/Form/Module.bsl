// Модуль формы "Заполнение математическими методами"

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СценарийПланирования        = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СценарийПланирования",        Неопределено);
	КоличествоПериодов          = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КоличествоПериодов",          0);
	ПоказательПланирования      = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПоказательПланирования",      Ложь);
	СпособОкругления            = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СпособОкругления",            0);
	НеУчитыватьПериодыБезДанных = ПолучитьЗначениеПараметраСтруктуры(Параметры, "НеУчитыватьПериодыБезДанных", Ложь);
	КоличествоСезонов           = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КоличествоСезонов",           0);
	СмещениеПланирования        = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СмещениеПланирования",        0);
	ТипАнализа                  = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ТипАнализа",                  Неопределено);
	МодельПрогнозирования       = ПолучитьЗначениеПараметраСтруктуры(Параметры, "МодельПрогнозирования",       Неопределено);
	Параметр1                   = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Параметр1",                   0);
	Параметр2                   = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Параметр2",                   0);
	Параметр3                   = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Параметр3",                   0);
	РасчетСезонности            = ПолучитьЗначениеПараметраСтруктуры(Параметры, "РасчетСезонности",            Ложь); 
	ХозОперация                 = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ХозОперация",                 Неопределено);
	ДатаДокумента               = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Дата",                        Неопределено);
	ТипЦен                      = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ТипЦен",                      Неопределено);
	КурсДокумента               = ПолучитьЗначениеПараметраСтруктуры(Параметры, "КурсДокумента",               0);
	ДатаПланирования            = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ДатаПланирования",            Неопределено);
	Подразделение               = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ПодразделениеКомпании",       Неопределено);
	ИмяТабличнойЧасти           = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ИмяТабличнойЧасти",           "");
	
	Если ИмяТабличнойЧасти = "Товар" Тогда
		ИмяТабличнойЧасти = "Товары";
	ИначеЕсли ИмяТабличнойЧасти = "Услуга" Тогда
		ИмяТабличнойЧасти = "Услуги";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СценарийПланирования) ИЛИ НЕ ЗначениеЗаполнено(СценарийПланирования.Периодичность) Тогда
		ОбщегоНазначения.СообщитьПользователю (НСтр("ru = 'Не выбран сценарий планирования, либо у выбранного сценария не указана периодичность.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПоКатегориям  = ХозОперация = Справочники.ХозОперации.БюджетПродажПоКатегориям;
	
	Если ПоКатегориям Тогда
		// Для категорий, показатель планирования предопределен: "СуммаВсегоУпр",
		// поэтому запретим редактирование этого реквизита.
		ПоказательПланирования                      = Ложь;
		Элементы.ПоказательПланирования.Доступность = Ложь;
		
		СпособОкругления = 0;
		Элементы.СпособОкругления.Доступность = Ложь;
		
		Элементы.Страницы.ТекущаяСтраница.Заголовок = НСтр("ru = 'Типы номенклатуры'");
	КонецЕсли;
	
	КурсУпрВалюты   = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(Константы.ВалютаУправленческогоУчетаКомпании.Получить(), ДатаДокумента);
	
	КоэфИзУпрВалютыВРегВалюту   = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(), ДатаДокумента);
	
	ПереполучитьДанные = Истина;
	
	Если КоличествоПериодов=0 Тогда
		КоличествоПериодов=3;
	КонецЕсли;
	
	Если СмещениеПланирования=0 Тогда
		СмещениеПланирования=1;
	КонецЕсли;
	
	Если КоличествоСезонов=0 Тогда
		КоличествоСезонов=1;
	КонецЕсли;
	
	МаксКоличествоПериодов	= 0;
	
	Если НЕ ЗначениеЗаполнено(МодельПрогнозирования) Тогда
		МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Линейный;
	КонецЕсли;
	
	// Заполним надпись с типом цены
	ПараметрыНадписи = Новый Структура;
	ПараметрыНадписи.Вставить("ТипЦен",                    ТипЦен);
	ПараметрыНадписи.Вставить("КурсДокумента",             КурсДокумента);
	ПараметрыНадписи.Вставить("НадписьИнформацияОТипеЦен", Элементы.НадписьИнформацияОТипеЦен);
	ПланированиеСервер.СформироватьНадписьТипаЦены(ПараметрыНадписи);
	
	// Выведем период планирования (Вдруг забыл, пока форму открывал)
	ПараметрыПериода = Новый Структура;
	ПараметрыПериода.Вставить("ДатаИзПериода", ДатаПланирования);
	ПараметрыПериода.Вставить("Периодичность", СценарийПланирования.Периодичность);
	ПараметрыПериода.Вставить("Действие", 0);
	
	// Разберемся с округлением
	Если ПоКатегориям Тогда
		Элементы.СпособОкругления.Доступность = Ложь;
	КонецЕсли;
	
	НастроитьПоляОтбора(Подразделение);
	
	СчетчикДиаграмм = 0;
	
	УправлениеДиалогомСервер("МодельПрогнозирования"); 
	УправлениеДиалогомСервер("ПоказательПланирования");
	
КонецПроцедуры

// Обработчик события возникающего на клиенте перед закрытием формы.
//
// Параметры:
//  Форма                          - УправляемаяФорма   - Форма, в которой возникло событие.
//  Отказ                          - Булево - Признак отказа от создания формы.
//  ОбработчикПоложительногоОтвета - ОписаниеОповещения - Процедура в которую будет передано управление при
//                                                        положительном ответе на вопрос.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	УправлениеДиалогомКлиент.ПроверитьМодифицированностьДанныхПриЗакрытии(ЭтотОбъект,Отказ,Новый ОписаниеОповещения("Подключаемый_ПередЗакрытием", ЭтотОбъект));
	
КонецПроцедуры //ПередЗакрытием()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при изменении данных реквизита "ПоказательПланирования" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ПоказательПланированияПриИзмененииНаСервере()
	
	ПереполучитьДанные = Истина;
	УправлениеДиалогомСервер("ПоказательПланирования");
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "ПоказательПланирования".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ПоказательПланированияПриИзменении(Элемент)
	ПоказательПланированияПриИзмененииНаСервере();
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "СпособОкругления".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура СпособОкругленияПриИзменении(Элемент)
	
	Если СпособОкругления = 0 Тогда
		ОкруглятьВБольшуюСторону = Ложь;
	ИначеЕсли СпособОкругления = 1 Тогда
		ОкруглятьВБольшуюСторону = Истина;
	КонецЕсли;
	
КонецПроцедуры // СпособОкругленияПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "МодельПрогнозирования" в контексте сервера.
//
&НаСервере
Процедура МодельПрогнозированияПриИзмененииНаСервере()
	
	УправлениеДиалогомСервер("МодельПрогнозирования");
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "МодельПрогнозирования".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура МодельПрогнозированияПриИзменении(Элемент)
	МодельПрогнозированияПриИзмененииНаСервере();
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "РасчетСезонности" в контексте сервера.
//
&НаСервере
Процедура РасчетСезонностиПриИзмененииНаСервере()
	УправлениеДиалогомСервер();
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "РасчетСезонности".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура РасчетСезонностиПриИзменении(Элемент)
	
	РасчетСезонностиПриИзмененииНаСервере();
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Параметр1" в контексте сервера.
//
&НаСервере
Процедура Параметр1ПриИзмененииНаСервере()
	УправлениеДиалогомСервер();
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Параметр1".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура Параметр1ПриИзменении(Элемент)
	Параметр1ПриИзмененииНаСервере();
КонецПроцедуры

// Обработчик события возникающего на клиенте регулирование данных реквизита "Параметр1".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура Параметр1Регулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если МодельПрогнозирования = ПредопределенноеЗначение("Перечисление.МоделиПрогнозирования.Сглаживанием") Тогда
		СтандартнаяОбработка = Ложь;
		Параметр1 = Макс(Параметр1 + Направление*0.01, 0);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте регулирование данных реквизита "Параметр2".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура Параметр2Регулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если МодельПрогнозирования = ПредопределенноеЗначение("Перечисление.МоделиПрогнозирования.Сглаживанием") Тогда
		СтандартнаяОбработка = Ложь;
		Параметр2 = Макс(Параметр2 + Направление*0.01, 0);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте регулирование данных реквизита "Параметр3".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура Параметр3Регулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если МодельПрогнозирования = ПредопределенноеЗначение("Перечисление.МоделиПрогнозирования.Сглаживанием") Тогда
		СтандартнаяОбработка = Ложь;
		Параметр3 = Макс(Параметр3 + Направление*0.01, 0);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "КоличествоПериодов" в контексте сервера.
//
&НаСервере
Процедура КоличествоПериодовПриИзмененииНаСервере()
	
	ПланированиеСервер.ПроверкаКоличестваСезонов(ЭтотОбъект, СценарийПланирования.Периодичность);
	ПереполучитьДанные = Истина;
	УправлениеДиалогомСервер("МодельПрогнозирования");
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "КоличествоПериодов".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура КоличествоПериодовПриИзменении(Элемент)
	КоличествоПериодовПриИзмененииНаСервере();
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "СмещениеПланирования" в контексте сервера.
//
&НаСервере
Процедура СмещениеПланированияПриИзмененииНаСервере()
	
	ПереполучитьДанные = Истина;
	УправлениеДиалогомСервер("МодельПрогнозирования");
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "СмещениеПланирования".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура СмещениеПланированияПриИзменении(Элемент)
	СмещениеПланированияПриИзмененииНаСервере();
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "КоличествоСезонов" в контексте сервера.
//
&НаСервере
Процедура КоличествоСезоновПриИзмененииНаСервере()
	
	ПланированиеСервер.ПроверкаКоличестваСезонов(ЭтотОбъект, СценарийПланирования.Периодичность);
	ПереполучитьДанные = Истина;
	УправлениеДиалогомСервер("МодельПрогнозирования");
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "КоличествоСезонов".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура КоличествоСезоновПриИзменении(Элемент)
	КоличествоСезоновПриИзмененииНаСервере();
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "НеУчитыватьПериодыБезДанных" в контексте сервера.
//
&НаСервере
Процедура НеУчитыватьПериодыБезДанныхПриИзмененииНаСервере()
	
	ПереполучитьДанные = Истина;
	УправлениеДиалогомСервер();
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "НеУчитыватьПериодыБезДанных".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура НеУчитыватьПериодыБезДанныхПриИзменении(Элемент)
	НеУчитыватьПериодыБезДанныхПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события нажатия кнопки "График"
//
&НаКлиенте
Процедура График(Команда)
	
	Если Номенклатура.ПолучитьЭлементы().Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Данные для построения графика отсутствуют. Для прогнозирования нажмите кнопку ""Спрогнозировать""'"));
		Возврат;
	КонецЕсли;
	
	// Выведем графики для текущей строки табличного поля
	ТекСтрока = Элементы.Номенклатура.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана строка таблицы.'"));
		Возврат;
	КонецЕсли;
	
	// Текущая строка должна быть нулевого уровня, если это не так
	Если ТекСтрока.Номенклатура = Неопределено И ТекСтрока.Представление <> НСтр("ru = 'Итого по всем позициям:'") + Символы.НПП Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Построение графика возможно только для строк верхнего уровня. Выберете другую строку.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", СокрЛП(МодельПрогнозирования)+" """+?(ТекСтрока.Представление = НСтр("ru = 'Итого по всем позициям:'") + Символы.НПП, НСтр("ru = 'По всем позициям'") + Символы.НПП, ТекСтрока.Представление) +"""");
	ПараметрыФормы.Вставить("ТекСтрока", СформироватьДанныеДляГрафика(ТекСтрока.Представление));
	ПараметрыФормы.Вставить("КоличествоПрошлыхПериодов", ТекСтрока.КоличествоПериодов);
	
	ОткрытьФорму("Документ.БюджетПродаж.Форма.ФормаРезультата", ПараметрыФормы, ЭтотОбъект, СчетчикДиаграмм);
	
	СчетчикДиаграмм = СчетчикДиаграмм + 1;
	
КонецПроцедуры // График()

// Обработчик события нажатия кнопки "Спрогнозировать" на сервере
//
&НаСервере
Процедура СпрогнозироватьНаСервере()
	
	Сформировать();
	
КонецПроцедуры // СпрогнозироватьНаСервере()

// Обработчик события нажатия кнопки "Спрогнозировать" на клиенте
//
&НаКлиенте
Процедура Спрогнозировать(Команда)
	СпрогнозироватьНаСервере();
КонецПроцедуры

// Обработчик события нажатия кнопки "ОК" на клиенте
//
&НаКлиенте
Процедура ОК(Команда)
	
	Если Номенклатура.ПолучитьЭлементы().Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Данные не спрогнозированы. Таблица пустая.'"));
		Возврат;
	КонецЕсли;
	
	ФормированиеРезультата();
	
	РезультатВыбора = Новый Структура();
	РезультатВыбора.Вставить("КоличествоПериодов",          КоличествоПериодов);
	РезультатВыбора.Вставить("ПоказательПланирования",      ПоказательПланирования);
	РезультатВыбора.Вставить("СпособОкругления",            СпособОкругления);
	РезультатВыбора.Вставить("НеУчитыватьПериодыБезДанных", НеУчитыватьПериодыБезДанных);
	РезультатВыбора.Вставить("КоличествоСезонов",           КоличествоСезонов);
	РезультатВыбора.Вставить("СмещениеПланирования",        СмещениеПланирования);
	РезультатВыбора.Вставить("МодельПрогнозирования",       МодельПрогнозирования);
	РезультатВыбора.Вставить("Параметр1",                   Параметр1);
	РезультатВыбора.Вставить("Параметр2",                   Параметр2);
	РезультатВыбора.Вставить("Параметр3",                   Параметр3);
	РезультатВыбора.Вставить("РасчетСезонности",            РасчетСезонности);
	РезультатВыбора.Вставить("ТипАнализа",                  ПредопределенноеЗначение("Перечисление.ТипыАнализа.ПоФактическимДаннымПродаж"));

	
	ТаблицаРезультата = Новый Массив;
	Для Каждого ТекСтрока Из Результат Цикл
		
		НоваяСтрока = Новый Структура("Номенклатура, Количество, Цена, НормативнаяЦена, СуммаВсегоУпр, СуммаНДС, СебестоимостьУпр, СтавкаНДС");
		НоваяСтрока.Номенклатура     = ТекСтрока.Номенклатура;
		НоваяСтрока.Количество       = ТекСтрока.Количество;
		НоваяСтрока.Цена             = ТекСтрока.Цена;
		НоваяСтрока.НормативнаяЦена  = ТекСтрока.НормативнаяЦена;
		НоваяСтрока.СуммаВсегоУпр    = ТекСтрока.СуммаВсегоУпр;
		НоваяСтрока.СуммаНДС         = ТекСтрока.СуммаНДС;
		НоваяСтрока.СебестоимостьУпр = ТекСтрока.СебестоимостьУпр;
		НоваяСтрока.СтавкаНДС        = ТекСтрока.Ставка;
									  ТаблицаРезультата.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	РезультатВыбора.Вставить("ТаблицаНоменклатуры", ТаблицаРезультата);
	РезультатВыбора.Вставить("СпособПоследнегоЗаполнения", 1);
	
	Модифицированность = Ложь;
	Закрыть(РезультатВыбора);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// возвращает дополнительные параметры запроса
//
&НаСервере
Функция ПолучитьДополнительныеПараметрыЗапроса()
	
	// Вычислим максимально допустимое количество периодов для анализа
	ДополнительныеПараметры = Новый Структура;
	
	ДеревоОтбора = РеквизитФормыВЗначение("Отбор");
	
	ЭлементОтбора = ДеревоОтбора.Строки.Найти("ПодразделениеОтгрузки", "ЛевоеЗначение");
	Если ЭлементОтбора.Использование Тогда
		СтрокаУсловия = СтрЗаменить(СтрЗаменить(Документы.БюджетПродаж.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения),"#","ТаблицаДанных.ПодразделениеКомпании"),"&","&Подразделение");
		ДополнительныеПараметры.Вставить("ОтборПоПодразделению", СтрокаУсловия);
		ДополнительныеПараметры.Вставить("Подразделение", ЭлементОтбора.ПравоеЗначение);
	КонецЕсли;
	
	Если ПоКатегориям Тогда
		СтрокаУсловияОтбора = ?(ИмяТабличнойЧасти="Товары", "ТаблицаДанных.Номенклатура.ТипНоменклатуры.ВидНоменклатуры<>ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)", "ТаблицаДанных.Номенклатура.ТипНоменклатуры.ВидНоменклатуры=ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)");
		ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура());
		СтрокаУсловияОтбораДляПартий = "";
	Иначе
		СтрокаУсловияОтбора = ?(ИмяТабличнойЧасти="Товары", "ТаблицаДанных.Номенклатура.ВидНоменклатуры<>ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)", "ТаблицаДанных.Номенклатура.ВидНоменклатуры=ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)");
		ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура());
		СтрокаУсловияОтбораДляПартий = "";
	КонецЕсли;
	
	ЭлементОтбора =  ДеревоОтбора.Строки.Найти("Номенклатура", "ЛевоеЗначение");
	Если ЭлементОтбора.Использование Тогда
		СтрокаУсловияОтбора = СтрЗаменить(СтрЗаменить(Документы.БюджетПродаж.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения),"#"," ТаблицаДанных.Номенклатура"+?(ПоКатегориям,".ТипНоменклатуры "," ")),"&","&Номенклатура");
		ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", СтрокаУсловияОтбора, Новый Структура("Номенклатура", ЭлементОтбора.ПравоеЗначение));
		СтрокаУсловияОтбораДляПартий = Символы.ПС+"И "+СтрокаУсловияОтбора;
	КонецЕсли;
	
	СтрокаУсловияОтбораДляПартий = СтрЗаменить(СтрокаУсловияОтбораДляПартий,"ТаблицаДанных","ПартииТоваровКомпании");
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		ЭлементОтбора = ДеревоОтбора.Строки.Найти("ПодразделениеЗакупки", "ЛевоеЗначение");
		Если ЭлементОтбора.Использование Тогда
			
			СтрокаУсловия=СтрЗаменить(СтрЗаменить(Документы.БюджетПродаж.СформироватьСтрокуВидаСравнения(ЭлементОтбора.ВидСравнения),"#","ПартииТоваровКомпании.СкладКомпании.ПодразделениеКомпании"),"&","&Подразделение");
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ПартииТоваровКомпании.Партия КАК Партия
			|ИЗ
			|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
			|ГДЕ
			| "+СтрокаУсловия+"          
			|	И ПартииТоваровКомпании.Период <= &ДатаПланирования
			|	И ПартииТоваровКомпании.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И ПартииТоваровКомпании.Количество <> 0
			|  "+СтрокаУсловияОтбораДляПартий;
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Подразделение",    ЭлементОтбора.ПравоеЗначение);
			Запрос.УстановитьПараметр("ДатаПланирования", ДатаПланирования);
			Запрос.УстановитьПараметр("Номенклатура",     ДеревоОтбора.Строки.Найти("Номенклатура", "ЛевоеЗначение").ПравоеЗначение);
			
			Партии = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Партия");
			ПланированиеСервер.ДобавитьДополнительныйОтбор(ДополнительныеПараметры, "ДопОтборы", Символы.НПП + НСтр("ru = 'ТаблицаДанных.Партия в (&Партии)'") + Символы.НПП, Новый Структура("Партии", Партии));
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ИмяТаблицы", "Продажи");
	
	Возврат ДополнительныеПараметры;
	
КонецФункции // ПолучитьДополнительныеПараметрыЗапроса()

// Формирует дерево значений для прогнозирования по переданным параметрам.
//
&НаСервере
Процедура Сформировать()
	
	Номенклатура.ПолучитьЭлементы().Очистить();
	РабочийТипЦен = ТипЦен;
	ВВалютеУчета  = ТипЦен.ВВалютеУчета;
	Периодичность = СценарийПланирования.Периодичность;
	КоличествоПрошлыхПериодов = КоличествоПериодов*КоличествоСезонов;
	
	Если КоличествоПрошлыхПериодов < 2 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Построение математической модели невозможно.'"));
		Возврат;
	КонецЕсли;
	
	Если МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Полиномиальный Тогда
		Если КоличествоПрошлыхПериодов < Параметр1 * Параметр1 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Для ряда, содержащего только %1 элементов, полином степени %2 не может быть построен.%3Необходимо увеличить количество анализируемых периодов до %4.'"),
					СокрЛП(КоличествоПрошлыхПериодов),
					СокрЛП(Параметр1),
					Символы.ПС,
					(Параметр1 * Параметр1)
				)
			);
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыЗапроса();
	
	
	МаксКоличествоПериодов = ПланированиеСервер.ПолучитьМаксимальноеКоличествоПериодов(ЭтотОбъект, ДополнительныеПараметры, ?(ПоКатегориям, "Номенклатура.ТипНоменклатуры", "Номенклатура"));
	
	Если НеУчитыватьПериодыБезДанных Тогда
		Если МаксКоличествоПериодов < 2 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Максимально допустимое количество периодов для анализа по продажам для текущего планируемого периода: %1. %2Построение математической модели невозможно. Увеличьте количество анализируемых периодов.'"),
					СокрЛП(МаксКоличествоПериодов),
					Символы.ПС
				)
			);
			Возврат;
		КонецЕсли;
		Если МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Полиномиальный Тогда
			Если МаксКоличествоПериодов < Параметр1 * Параметр1 Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Максимально допустимое количество периодов для анализа по продажам для текущего планируемого периода: %1. %2Полином степени %3 не может быть построен. Необходимо увеличить количество анализируемых периодов.'"),
						СокрЛП(МаксКоличествоПериодов),
						Символы.ПС,
						СокрЛП(Параметр1)
					)
				);
				Возврат;
			КонецЕсли; 
		КонецЕсли;
	ИначеЕсли (((КоличествоСезонов - 1) * 12) + (КоличествоПериодов)) > МаксКоличествоПериодов Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Максимально допустимое количество периодов для анализа по продажам для текущего планируемого периода: %1 %2.'"),
				СокрЛП(МаксКоличествоПериодов),
				ПланированиеСервер.ВернутьСтрокуКоличествоПериодовДляАнализа(МаксКоличествоПериодов, Периодичность)
			)
		);
		
		КоличествоПериодов = Мин(МаксКоличествоПериодов, КоличествоПериодов);
		КоличествоСезонов  = Мин(КоличествоСезонов, Макс(Цел(МаксКоличествоПериодов / 12), 1));
		УправлениеДиалогомСервер("МодельПрогнозирования");
		Возврат;
	КонецЕсли;
	
	// Получим данные за период
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Измерение", "Номенклатура");
	
	ТекстОтбора = "";
	Если ДополнительныеПараметры.Свойство("ОтборПоПодразделению") Тогда
		ТекстОтбора = Символы.ПС + " И " + ДополнительныеПараметры.ОтборПоПодразделению;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ДопОтборы") Тогда
		ТекстОтбора = ТекстОтбора + Символы.ПС + "И " + ДополнительныеПараметры.ДопОтборы.ТекстОтбора;
	КонецЕсли;
	
	УчитыватьСебестоимость = ПланированиеСебестоимости И ИмяТабличнойЧасти = "Товары";
	
	ТекстЗапроса = "";
	ПериодКакКоличество = Ложь;
	СтрПериодичность = СокрЛП(Периодичность);
	
	Если УчитыватьСебестоимость Тогда
		СтруктураПолей.Вставить("СебестоимостьУпр");
	КонецЕсли;
	УчетЦены = Истина;
	Если ПоКатегориям Тогда
		ПериодКакКоличество = НеУчитыватьПериодыБезДанных;
		УчетЦены = Ложь;
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|   (ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ОсновнаяСтавкаНДС)).Ставка КАК Ставка,
		|	ТаблицаДанных.Номенклатура.ТипНоменклатуры КАК Номенклатура,
		|	ТаблицаДанных.Номенклатура.ТипНоменклатуры.Наименование КАК Представление,
		|	НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, " + СтрПериодичность + ") КАК Период,
		|	СУММА(ТаблицаДанных.СуммаУпр) КАК Показатель,
		|	СУММА(ТаблицаДанных.СуммаУпр) КАК СуммаУпр,
		|   СУММА(ТаблицаДанных.СебестоимостьУпр) КАК СебестоимостьУпр,
		|   &КоличествоПериодов КАК Количество
		|ПОМЕСТИТЬ
		|	ТаблицаРегистра
		|ИЗ
		|	РегистрНакопления.Продажи КАК ТаблицаДанных
		|
		|ГДЕ
		| #ТекстОтбора# " + ТекстОтбора + "
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДанных.Номенклатура.ТипНоменклатуры,
		|	НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, " + СтрПериодичность + ")
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаДанных.Количество)<>0";
		
	Иначе
		СтруктураПолей.Вставить("Цена");
		СтруктураПолей.Вставить("Поля", Новый Структура("Весовой"));
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|   ТаблицаДанных.Номенклатура.СтавкаНДС.Ставка КАК Ставка,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Номенклатура.Наименование КАК Представление,
		|	ТаблицаДанных.Номенклатура.ТипНоменклатуры.Весовой КАК Весовой,
		|	НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, " + СтрПериодичность + ") КАК Период,
		|	СУММА(" + ?(ПоказательПланирования, "ТаблицаДанных.Количество", "ТаблицаДанных.СуммаУпр") + ") КАК Показатель,
		|	СУММА(ТаблицаДанных.СуммаУпр) КАК СуммаУпр,
		|	СУММА(ТаблицаДанных.СебестоимостьУпр) КАК СебестоимостьУпр,
		|	СУММА(ТаблицаДанных.Количество) КАК Количество
		|ПОМЕСТИТЬ
		|	ТаблицаДанных
		|ИЗ
		|	РегистрНакопления.Продажи КАК ТаблицаДанных
		|ГДЕ
		|	#ТекстОтбора# " + ТекстОтбора + "
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДанных.Номенклатура,
		|	НАЧАЛОПЕРИОДА(ТаблицаДанных.Период, " + СтрПериодичность + ")
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаДанных.Количество)<>0
		|ИНДЕКСИРОВАТЬ ПО 
		|	Номенклатура";		
	КонецЕсли;
	
	ПараметрыДляАнализаДат = Новый Структура;
	ПараметрыДляАнализаДат.Вставить("Периодичность", Периодичность);
	ПланированиеСервер.ПолучитьПериодыПланирования(ЭтотОбъект, ПараметрыДляАнализаДат);
	
	// Выполняем запрос
	Запрос = Новый Запрос();
	МенеджерДанныхРегистра = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерДанныхРегистра;
	
	Для Каждого ТекПараметр Из ПараметрыДляАнализаДат.СтруктураСезонов Цикл
		Запрос.УстановитьПараметр(ТекПараметр.Ключ, ТекПараметр.Значение);
	КонецЦикла;
	
	Если ДополнительныеПараметры.Свойство("ДопОтборы") Тогда
		Для Каждого ТекПараметр Из ДополнительныеПараметры.ДопОтборы.Параметры Цикл
			Запрос.УстановитьПараметр(ТекПараметр.Ключ, ТекПараметр.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "#ТекстОтбора#", ПараметрыДляАнализаДат.ТекстОтбора);
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	
	Курс = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(Константы.ВалютаУправленческогоУчетаКомпании.Получить(), ДатаДокумента);
	
	Запрос.УстановитьПараметр("КоличествоПериодов", КоличествоПрошлыхПериодов);
	Если ДополнительныеПараметры.Свойство("Подразделение") Тогда
		Запрос.УстановитьПараметр("Подразделение", ДополнительныеПараметры.Подразделение);
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Если УчетЦены Тогда;
		ТекстЦена = "ЦеныСрезПоследних.Цена";
		// Если расчетная цена получим базовую цену
		Пока РабочийТипЦен.Рассчитывается Цикл
			Если РабочийТипЦен.ПроцентСкидкиНаценки <> 0 Тогда
				ТекстЦена = "(" + ТекстЦена + "+" + ТекстЦена + "*" + Формат(РабочийТипЦен.ПроцентСкидкиНаценки / 100, "ЧРД=.") + ")";
			КонецЕсли;
			РабочийТипЦен = РабочийТипЦен.БазовыйТипЦен;
		КонецЦикла;
		
		Курс = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(Константы.ВалютаУправленческогоУчетаКомпании.Получить(), ДатаДокумента);
		
		Запрос.УстановитьПараметр("ТипЦен", РабочийТипЦен);
		Запрос.УстановитьПараметр("КурсУпрВалюты", ?(Курс = 0, 1, Курс));
		Запрос.УстановитьПараметр("ВыбВалютаЦены", РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(РабочийТипЦен, Неопределено, Ложь));
		
		// Таблица данных
		ТекТекстОтбора = "";
		Если ДополнительныеПараметры.Свойство("ОтборПоПодразделению") Тогда
			ТекТекстОтбора = Символы.ПС + " И " + СтрЗаменить(ДополнительныеПараметры.ОтборПоПодразделению, "ПодразделениеКомпании", "Ссылка");
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанных.Ссылка КАК Подразделение
		|ИЗ
		|	Справочник.ПодразделенияКомпании КАК ТаблицаДанных
		|ГДЕ
		|	(НЕ ТаблицаДанных.ПометкаУдаления)" + ТекТекстОтбора + "
		|";
		
		ТаблицаИерархииПодразделений = Новый ТаблицаЗначений;
		ТаблицаИерархииПодразделений.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
		ТаблицаИерархииПодразделений.Колонки.Добавить("Родитель", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
		ТаблицаИерархииПодразделений.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекущееПодразделение = Выборка.Подразделение;
			Уровень = 0;
			Пока ЗначениеЗаполнено(ТекущееПодразделение) Цикл
				СтрокаПодразделения = ТаблицаИерархииПодразделений.Добавить();
				СтрокаПодразделения.Подразделение = Выборка.Подразделение;
				СтрокаПодразделения.Родитель = ТекущееПодразделение;
				СтрокаПодразделения.Уровень = Уровень;
				// Получаем родителя подразделения
				ТекущееПодразделение = ТекущееПодразделение.Родитель;
				Уровень = Уровень + 1;
			КонецЦикла;
			СтрокаПодразделения = ТаблицаИерархииПодразделений.Добавить();
			СтрокаПодразделения.Подразделение = Выборка.Подразделение;
			СтрокаПодразделения.Родитель = Справочники.ПодразделенияКомпании.ПустаяСсылка();
			СтрокаПодразделения.Уровень = Уровень;
		КонецЦикла;
		
		ТекстЗапросаЦены = "ВЫБРАТЬ 
		|	ТаблицаПодразделений.Подразделение КАК Подразделение,
		|	ТаблицаПодразделений.Родитель КАК Родитель,
		|	ТаблицаПодразделений.Уровень КАК Уровень
		|ПОМЕСТИТЬ ТаблицаПодразделений
		|ИЗ
		|	&ТаблицаИерархииПодразделений КАК ТаблицаПодразделений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаПодразделений.Подразделение КАК Подразделение,
		|	ТаблицаПодразделений.Родитель КАК Родитель,
		|	ТаблицаПодразделений.Уровень КАК Уровень,
		|	ЦеныСрезПоследних.Номенклатура КАК Номенклатура,
		|	ВЫРАЗИТЬ(" + ТекстЦена + " * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) / ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1) / &КурсУпрВалюты КАК ЧИСЛО(15,2)) КАК Цена
		|
		|ПОМЕСТИТЬ ТаблицаДанныхПоЦенам
		|
		|ИЗ ТаблицаПодразделений КАК ТаблицаПодразделений
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Цены.СрезПоследних(&ДатаДокумента,
		|		ТипЦен = &ТипЦен
		|		И Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|		И ХарактеристикаНоменклатуры=ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		И ЕдиницаИзмерения=ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|		И ПодразделениеКомпании В (ВЫБРАТЬ РАЗЛИЧНЫЕ ТаблицаПодразделений.Родитель ИЗ ТаблицаПодразделений КАК ТаблицаПодразделений)
		|		И Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ ТаблицаДанных.Номенклатура ИЗ ТаблицаДанных КАК ТаблицаДанных)) КАК ЦеныСрезПоследних" + ?(ВВалютеУчета, "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
		|			ПО ЦеныСрезПоследних.Номенклатура.ВалютаУчета = КурсыВалютСрезПоследних.Валюта", "
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВыбВалютаЦены) КАК КурсыВалютСрезПоследних
		|			ПО ИСТИНА") + "
		|	ПО ТаблицаПодразделений.Родитель = ЦеныСрезПоследних.ПодразделениеКомпании
		|ГДЕ
		|	ЦеныСрезПоследних.Цена > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанныхПоЦенам.Номенклатура,
		|	СРЕДНЕЕ(ТаблицаДанныхПоЦенам.Цена) КАК Цена
		|	
		|ПОМЕСТИТЬ ТаблицаЦен
		|	
		|ИЗ
		|	ТаблицаДанныхПоЦенам КАК ТаблицаДанныхПоЦенам
		|ГДЕ
		|	ТаблицаДанныхПоЦенам.Уровень В
		|			(ВЫБРАТЬ
		|				МИНИМУМ(Табл.Уровень)
		|			ИЗ
		|				ТаблицаДанныхПоЦенам КАК Табл
		|			СГРУППИРОВАТЬ ПО
		|				Табл.Номенклатура,
		|				Табл.Подразделение)
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДанныхПоЦенам.Номенклатура
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаПодразделений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаДанныхПоЦенам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|   ТаблицаДанных.Ставка КАК Ставка,
		|	ТаблицаДанных.Представление КАК Представление,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Весовой КАК Весовой,
		|	ТаблицаДанных.Период КАК Период,
		|	ТаблицаДанных.Показатель КАК Показатель,
		|	ТаблицаДанных.СуммаУпр КАК СуммаУпр,
		|   ТаблицаДанных.СебестоимостьУпр КАК СебестоимостьУпр,
		|   ТаблицаДанных.Количество КАК Количество,
		|	ЕСТЬNULL(ТаблицаЦен.Цена, 0) КАК Цена
		|ПОМЕСТИТЬ ТаблицаРегистра
		|ИЗ ТаблицаДанных КАК ТаблицаДанных
		| ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦен КАК ТаблицаЦен
		| 	ПО ТаблицаДанных.Номенклатура = ТаблицаЦен.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаЦен";
		
		Запрос.Текст = ТекстЗапросаЦены;
		Запрос.УстановитьПараметр("ТаблицаИерархииПодразделений", ТаблицаИерархииПодразделений);
		Запрос.Выполнить();
		
	КонецЕсли;
	
	НаборНоменклатуры = РеквизитФормыВЗначение("Номенклатура");
	
	// Выполняем запрос, заполняем дерево значений	
	ПараметрыДляЗаполненияДЗ = Новый Структура;
	ПараметрыДляЗаполненияДЗ.Вставить("ДеревоЗначений",         	 НаборНоменклатуры);
	ПараметрыДляЗаполненияДЗ.Вставить("Периодичность",       		 Периодичность);
	ПараметрыДляЗаполненияДЗ.Вставить("СтруктураСезонов",			 ПараметрыДляАнализаДат.СтруктураСезонов);
	ПараметрыДляЗаполненияДЗ.Вставить("ПериодКакКоличество", 		 ПериодКакКоличество);
	ПараметрыДляЗаполненияДЗ.Вставить("НеУчитыватьПериодыБезДанных", НеУчитыватьПериодыБезДанных);
	ПараметрыДляЗаполненияДЗ.Вставить("ДатаПланирования", 			 ДатаПланирования);
	
	Если (Не НеУчитыватьПериодыБезДанных) И КоличествоСезонов > 1 Тогда
		ТекстЗапросаДополнения = "";
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Номенклатура КАК Номенклатура
		|ИЗ
		|	ТаблицаРегистра КАК ТаблицаРегистра";
		
		ОтборДополнения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
		
		Если ПоКатегориям Тогда
			Запрос.Текст = "ВЫБРАТЬ
			|	ТипыНоменклатуры.Ссылка КАК Номенклатура,
			|	ТипыНоменклатуры.Ссылка.Наименование КАК Представление
			|ПОМЕСТИТЬ ТаблицаДополнения
			|ИЗ
			|	Справочник.ТипыНоменклатуры КАК ТипыНоменклатуры
			|ГДЕ
			|	ТипыНоменклатуры.Ссылка В(&ОтборДополнения)";
			
		Иначе
			Запрос.Текст = "ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Номенклатура,
			|	Номенклатура.Ссылка.Наименование КАК Представление
			|ПОМЕСТИТЬ ТаблицаДополнения
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка В(&ОтборДополнения)";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ОтборДополнения", ОтборДополнения);
		Запрос.Выполнить();
		
		ТекстЗапросаДополнения = "
		|	ТаблицаДополнения КАК ТаблицаДополнения
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРегистра КАК ТаблицаРегистра
		| ПО ТаблицаДополнения.Номенклатура = ТаблицаРегистра.Номенклатура
		| И ТаблицаРегистра.Период МЕЖДУ &ДатаНачала И &ДатаКонца";
		
		ПараметрыДляЗаполненияДЗ.Вставить("ТекстЗапросаДополнения", ТекстЗапросаДополнения);
		ПараметрыДляЗаполненияДЗ.Вставить("ОтборДополнения", ОтборДополнения);
		
	КонецЕсли;
	
	ДеревоНоменклатуры = ПланированиеСервер.ПолучитьДеревоДанных(ЭтотОбъект, ПараметрыДляЗаполненияДЗ, СтруктураПолей, МенеджерДанныхРегистра);
	АдресДереваКэш = ПоместитьВоВременноеХранилище(ДеревоНоменклатуры);
	ПереполучитьМодель();
	ПереполучитьДанные = Ложь;
	
КонецПроцедуры // Сформировать()

// Обработчик для заполнения данными дерева "Номенклатура"
//
&НаСервере
Процедура ПереполучитьМодель()
	
	ДеревоНоменклатуры = ПолучитьИзВременногоХранилища(АдресДереваКэш);
	
	Если ДеревоНоменклатуры = Неопределено ИЛИ ДеревоНоменклатуры.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоПрошлыхПериодов = КоличествоПериодов*КоличествоСезонов;
	
	Если МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Полиномиальный Тогда
		Если КоличествоПрошлыхПериодов < Параметр1 * Параметр1 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Для ряда, содержащего только %1 элементов, полином степени %2 не может быть построен. %3Необходимо увеличить количество анализируемых периодов до %4.'"),
					СокрЛП(КоличествоПрошлыхПериодов),
					СокрЛП(Параметр1),
					Символы.ПС,
					(Параметр1*Параметр1)
				)
			);
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	Если НеУчитыватьПериодыБезДанных Тогда
		Если МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Полиномиальный Тогда
			Если МаксКоличествоПериодов < Параметр1 * Параметр1 Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Максимально допустимое количество периодов для анализа по продажам для текущего планируемого периода: %1. %2Полином степени %3 не может быть построен. Необходимо увеличить количество анализируемых периодов.'"),
						СокрЛП(МаксКоличествоПериодов),
						Символы.ПС,
						СокрЛП(Параметр1)
					)
				);
				Возврат;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Если МодельПрогнозирования=Перечисления.МоделиПрогнозирования.Сглаживанием Тогда
		Параметр1 = ?(Параметр1<=0,0.5,Параметр1);
		Параметр2 = ?(Параметр2<=0,0.5,Параметр2);
		Если РасчетСезонности Тогда
			Параметр3 = ?(Параметр3<=0,0.5,Параметр3);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыДляЗаполненияДЗ = Новый Структура;
	ПараметрыДляЗаполненияДЗ.Вставить("ДеревоЗначений",   ДеревоНоменклатуры.Скопировать());
	ПараметрыДляЗаполненияДЗ.Вставить("Периодичность",    Периодичность);
	ПараметрыДляЗаполненияДЗ.Вставить("ДатаПланирования", ДатаПланирования);
	ДеревоРезультата = ПланированиеСервер.ПолучитьДеревоПрогноза(ЭтотОбъект, ПараметрыДляЗаполненияДЗ);
	
	// Установим общую ошибку в подвале табличного поля
	Если ДеревоРезультата.Строки.Итог("Ошибка")=0 Тогда
		Элементы.НоменклатураОшибка.ТекстПодвала = "";
	Иначе
		Элементы.НоменклатураОшибка.ТекстПодвала = "Ср.ариф.ошибка: " + Окр(ДеревоРезультата.Строки.Итог("Ошибка") - ДеревоРезультата.Строки[0].Ошибка / ?(ДеревоРезультата.Строки.Количество()=0,1,ДеревоРезультата.Строки.Количество()), 3);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоРезультата, "Номенклатура");
	
	УстановитьУсловноеОформление();
	
	АдресДереваКэш = ПоместитьВоВременноеХранилище(ДеревоНоменклатуры);
	
КонецПроцедуры //ПереполучитьМодель()

// Обработчик для вывода интервала в виде надписи на форме
//
&НаСервере
Процедура ВывестиПредставлениеПериода()
	
	Периодичность = СценарийПланирования.Периодичность;
	Если Периодичность=Перечисления.ПериодичностьПланирования.Месяц Тогда
		ПредставлениеПериода = Формат(ДатаПланирования, "ДФ='ММММ гггг ""г.""'");
	ИначеЕсли Периодичность=Перечисления.ПериодичностьПланирования.Квартал Тогда
		ПредставлениеПериода = Формат(ДатаПланирования, "ДФ='к ""квартал"" гггг ""г.""'");
	ИначеЕсли Периодичность=Перечисления.ПериодичностьПланирования.Год Тогда
		ПредставлениеПериода = Формат(ДатаПланирования, "ДФ='гггг ""г.""'");
	КонецЕсли;
	
	ПредставлениеПериода = НСтр("ru = 'Период планирования'") + Символы.НПП + ПредставлениеПериода  + Символы.НПП
							+ НСтр("ru = 'по данным за'") + Символы.НПП
							+ ПланированиеСервер.ВывестиПредставлениеПериода(ЭтотОбъект, Периодичность, ДатаПланирования);
	Элементы.НадписьПредставлениеПериода.Заголовок = ПредставлениеПериода;
	
КонецПроцедуры // ВывестиПредставлениеПериода()

// Управляет видимостью, доступностью, заголовками,максимальными и минимальными значениями кнопок регулирования.
//
// Параметры:
//  Элемент - строка, имя элемента формы.
//
&НаСервере
Процедура УправлениеДиалогомСервер(Элемент="")
	
	Если Элемент="МодельПрогнозирования" Тогда
		
		// Сделаем доступной надпись
		Если МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Средним
			ИЛИ МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Линейный
			ИЛИ МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Экспоненциальный Тогда
			
			Элементы.ГруппаПараметр1.Доступность = Ложь;
			Элементы.ГруппаПараметр2.Доступность = Ложь;
			Элементы.ГруппаПараметр3.Доступность = Ложь;
			Элементы.НадписьКомментарий1.Заголовок = "";
			Элементы.НадписьКомментарий2.Заголовок = "";
			Элементы.НадписьКомментарий3.Заголовок = "";
			
		ИначеЕсли МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Сглаживанием Тогда
			
			Элементы.ГруппаПараметр1.Доступность = Истина;
			Элементы.ГруппаПараметр2.Доступность = Истина;
			
			Элементы.Параметр1.Доступность = Истина;
			Элементы.Параметр2.Доступность = Истина;
			Элементы.Параметр1.Заголовок = НСтр("ru = 'Постоянная сглаживания для данных'");
			Элементы.Параметр2.Заголовок = НСтр("ru = 'Постоянная сглаживания тренда'");
			
			Если ПланированиеСервер.УчитыватьСезоннуюКомпоненту(ЭтотОбъект) Тогда
				Элементы.ГруппаПараметр3.Доступность       = Истина;
				Элементы.НадписьКомментарий3.Заголовок = НСтр("ru = '[0;1] Оценка сезонных эффектов'");
			Иначе
				Элементы.ГруппаПараметр3.Доступность       = Ложь;
				Элементы.НадписьКомментарий3.Заголовок = НСтр("ru = '<Выбрано недостаточное количество анализируемых периодов>'");
			КонецЕсли;
			
			// Установим комментарии
			Элементы.НадписьКомментарий1.Заголовок = НСтр("ru = '[0;1] Оценка текущего уровня временного ряда'");
			Элементы.НадписьКомментарий2.Заголовок = НСтр("ru = '[0;1] Оценка наклона временного ряда'");
			
			Если Параметр1<=0 ИЛИ Параметр1>1 Тогда
				Параметр1=0.5;
			КонецЕсли;
			
			Если Параметр2<=0 ИЛИ Параметр2>1 Тогда
				Параметр2=0.5;
			КонецЕсли;
			
			Если Параметр3<=0 ИЛИ Параметр3>1 Тогда
				Параметр3=0.5;
			КонецЕсли;
			
			// формат ввода
			Элементы.Параметр1.ФорматРедактирования = "ЧЦ=10; ЧДЦ=4";
			Элементы.Параметр1.МаксимальноеЗначение = 1;
			Элементы.Параметр1.МинимальноеЗначение  = 0;
			
		ИначеЕсли МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Полиномиальный Тогда
			
			Элементы.ГруппаПараметр1.Доступность = Истина;
			Элементы.Параметр1.Доступность      = Истина;
			Элементы.Параметр1.Заголовок = НСтр("ru = 'Степень полинома'");
			Параметр1 = ?(Параметр1<2,3,Параметр1);
			
			// Остальные скроем
			Элементы.ГруппаПараметр2.Доступность = Ложь;
			Элементы.ГруппаПараметр3.Доступность = Ложь;
			Элементы.НадписьКомментарий3.Заголовок = НСтр("ru = '<Не используется для данной модели прогнозирования>'");
			
			// Установим комментарии
			Элементы.НадписьКомментарий1.Заголовок = НСтр("ru = 'Квадрат степени полинома должен быть меньше количества анализируемых периодов'");
			Элементы.НадписьКомментарий2.Заголовок = НСтр("ru = '<Не используется для данной модели прогнозирования>'");
			
			// Установим формат ввода
			Элементы.Параметр1.ФорматРедактирования = "ЧЦ=1; ЧДЦ=0";
			Элементы.Параметр1.МаксимальноеЗначение = 6;
			Элементы.Параметр1.МинимальноеЗначение  = 2; 
			
		КонецЕсли;
		
		Если МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Линейный
			ИЛИ МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Экспоненциальный
			ИЛИ МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Полиномиальный
			ИЛИ МодельПрогнозирования = Перечисления.МоделиПрогнозирования.Сглаживанием Тогда
			Если ПланированиеСервер.УчитыватьСезоннуюКомпоненту(ЭтотОбъект) Тогда 
				Элементы.РасчетСезонности.Доступность = Истина;
			Иначе
				Элементы.РасчетСезонности.Доступность = Ложь;
				РасчетСезонности = Ложь;
			КонецЕсли;
		Иначе
			Элементы.РасчетСезонности.Доступность = Ложь;
			РасчетСезонности = Ложь;
		КонецЕсли;
		
		ВывестиПредставлениеПериода();
		
	ИначеЕсли Элемент="ПоказательПланирования" Тогда
		// Установим названия колонок
		Если ПоказательПланирования Тогда
			// Количество
			Элементы.НоменклатураСуммаФакт.Заголовок         = НСтр("ru = 'Количество (факт.знач.)'");
			Элементы.НоменклатураСуммаТренд.Заголовок        = НСтр("ru = 'Количество (знач.модели)'");
			Элементы.НоменклатураСуммаОграниченная.Заголовок = НСтр("ru = 'Количество (огран.)'");
		Иначе
			// Сумма (упр.)
			Элементы.НоменклатураСуммаФакт.Заголовок         = НСтр("ru = 'Сумма упр. (факт.знач.)'");
			Элементы.НоменклатураСуммаТренд.Заголовок        = НСтр("ru = 'Сумма упр. (знач.модели)'");
			Элементы.НоменклатураСуммаОграниченная.Заголовок = НСтр("ru = 'Сумма упр. (огран.)'");
		КонецЕсли;
	КонецЕсли;
	
	// Данные нужно пересчитать
	Если Номенклатура.ПолучитьЭлементы().Количество() <> 0 Тогда
			Номенклатура.ПолучитьЭлементы().Очистить();
			// Спрогнозируем снова
			Если ПереполучитьДанные Тогда
				Сформировать();
			Иначе
				ПереполучитьМодель();
			КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УправлениеДиалогом()

// Обработчик для формирования результата
//
&НаСервере
Процедура ФормированиеРезультата()
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("ТаблЧасть",                 Результат);
	ПараметрыФормирования.Вставить("ДеревоЗначений",            РеквизитФормыВЗначение("Номенклатура"));
	ПараметрыФормирования.Вставить("ДатаДокумента",             ДатаДокумента);
	ПараметрыФормирования.Вставить("НеРассчитыватьКоличество",  ПоКатегориям);
	ПараметрыФормирования.Вставить("ПланированиеСебестоимости", (ПланированиеСебестоимости И ИмяТабличнойЧасти = "Товары"));
	ПараметрыФормирования.Вставить("ПоказательПланирования",    ПоказательПланирования);
	ПараметрыФормирования.Вставить("СпособОкругления",          СпособОкругления);
	ПараметрыФормирования.Вставить("ИмяПоляПриемника",          "Номенклатура");
	ПараметрыФормирования.Вставить("ИмяПоляИсточника",          "Номенклатура");
	
	ПланированиеСервер.ЗаполнитьТабличнуюЧасть(ПараметрыФормирования);
	
КонецПроцедуры

// Обработчик изменения условного оформления для строк дерева "Номенклатура"
//
&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Номенклатура");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура.Представление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru = 'Итого по всем позициям'") + ":" + Символы.НПП;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоНебесноГолубой);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт",    Новый Шрифт(, 9, Истина));
	
	Для Каждого ТекЭлемент Из Номенклатура.ПолучитьЭлементы() Цикл
		
		Если ТекЭлемент <> Номенклатура.ПолучитьЭлементы()[0] Тогда
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Номенклатура");
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура.Представление");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = ТекЭлемент.Представление;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.АкварельноСиний);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция определения того, что отбор выполняется по списку значений
//
&НаКлиенте
Функция ОтборПоСписку(ВидСравненияОтбора)
	
	РезультатОтбора = Ложь;
	Если ВидСравненияОтбора = ВидСравнения.ВСписке
		ИЛИ ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии
		ИЛИ ВидСравненияОтбора = ВидСравнения.НеВСписке
		ИЛИ ВидСравненияОтбора= ВидСравнения.НеВСпискеПоИерархии Тогда
		
		РезультатОтбора = Истина;
		
	КонецЕсли;
	
	Возврат РезультатОтбора;
	
КонецФункции //ОтборПоСписку()

// Обработчик окончания выбора значения отбора
//
&НаКлиенте
Процедура ОповещениеВыбораЗначенияОтбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("СписокЗначений") Тогда
		
		ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.ПравоеЗначение = РезультатЗакрытия;
		
	КонецЕсли;
	Элементы.Отбор.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры //ОповещениеВыбораЗначенияОтбора()

// Обработчик формирования данных для вывода графика
//
&НаСервере
Функция СформироватьДанныеДляГрафика(ПредставлениеСтроки)
	
	ДеревоНоменклатуры = РеквизитФормыВЗначение("Номенклатура");
	
	ДанныеГрафика = Новый Массив;
	
	Для Каждого ТекСтрока Из ДеревоНоменклатуры.Строки Цикл
		
		Если ТекСтрока.Представление = ПредставлениеСтроки Тогда
			
			Для Каждого Строка Из ТекСтрока.Строки Цикл
				ДанныеСтроки = Новый Структура("Представление,СуммаФакт,СуммаТренд", Строка.Представление, Строка.СуммаФакт, Строка.СуммаТренд);
				ДанныеГрафика.Добавить(ДанныеСтроки);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеГрафика;
	
КонецФункции // СформироватьДанныеДляГрафика()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Структура - Содержит процедуру в которую будет передан ответ на вопрос и формы из которой
//                                        вызвано оповещение.
//
&НаКлиенте
Процедура Подключаемый_ПередЗакрытием(Результат, ДополнительныеПараметры=Неопределено) Экспорт
	
	Ок(Неопределено);
	
КонецПроцедуры //Подключаемый_ПередЗакрытием()

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ОТБОРОМ

// Добавляем дополнительные отборы
//
&НаСервере
Процедура НастроитьПоляОтбора(Подразделение)
	
	// заполним быстрые отборы
	ДеревоОтбор = Отбор.ПолучитьЭлементы();
	
	НовыйОтбор = ДеревоОтбор.Добавить();
	НовыйОтбор.Использование  = Истина;
	НовыйОтбор.ЛевоеЗначение  = "ПодразделениеОтгрузки";
	НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
	НовыйОтбор.ПравоеЗначение = Подразделение;
	НовыйОтбор.Заголовок      = НСтр("ru = 'Подразделение отгрузки'");
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		НовыйОтбор = ДеревоОтбор.Добавить();
		НовыйОтбор.Использование  = Ложь;
		НовыйОтбор.ЛевоеЗначение  = "ПодразделениеЗакупки";
		НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
		НовыйОтбор.ПравоеЗначение = Справочники.ПодразделенияКомпании.ПустаяСсылка();
		НовыйОтбор.Заголовок      = НСтр("ru = 'Подразделение закупки'");
	КонецЕсли;
	
	НовыйОтбор = ДеревоОтбор.Добавить();
	НовыйОтбор.Использование  = Ложь;
	НовыйОтбор.ЛевоеЗначение  = "Номенклатура";
	НовыйОтбор.ВидСравнения   = ВидСравнения.Равно;
	НовыйОтбор.ПравоеЗначение = ?(ПоКатегориям, Справочники.ТипыНоменклатуры.ПустаяСсылка(), Справочники.Номенклатура.ПустаяСсылка());
	
	ЗаголовокОтбора = "";
	Если ИмяТабличнойЧасти = "Услуги" Тогда
		Если ПоКатегориям Тогда
			ЗаголовокОтбора = НСтр("ru = 'Тип услуги'");
		Иначе
			ЗаголовокОтбора = "Услуга";
		КонецЕсли;
	Иначе
		Если ПоКатегориям Тогда
			ЗаголовокОтбора = НСтр("ru = 'Тип номенклатуры'");
		Иначе
			ЗаголовокОтбора = "Номенклатура";
		КонецЕсли;
	КонецЕсли;
	
	НовыйОтбор.Заголовок = ЗаголовокОтбора;
	
КонецПроцедуры // НастроитьПолеОтбора()

// Обработчик изменения поля "Вид сравнения" таблицы "Отбор"
//
&НаКлиенте
Процедура ОтборВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.ПравоеЗначение) = Тип("СписокЗначений") И ЗначениеЗаполнено(ТекущиеДанные.ПравоеЗначение) И НЕ ТекущиеДанные.ВидСравнения = ВидСравнения.ВСписке И НЕ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВСписке
		 И НЕ ТекущиеДанные.ВидСравнения = ВидСравнения.ВСпискеПоИерархии И НЕ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
		
		Значение = ТекущиеДанные.ПравоеЗначение[0].Значение;
		ТекущиеДанные.ПравоеЗначение.Очистить();
		ОтборПравоеЗначениеНачалоВыбора(Элементы.ОтборПравоеЗначение, Значение, Истина);
		
	КонецЕсли;
	
КонецПроцедуры // ОтборВидСравненияПриИзменении()

// Обработчик изменения поля "Правое значение" таблицы "Отбор"
//
&НаКлиенте
Процедура ОтборВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокВыбора = Элементы.ОтборВидСравнения.СписокВыбора;
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить(ВидСравнения.Равно,              Строка(ВидСравнения.Равно));
	СписокВыбора.Добавить(ВидСравнения.НеРавно,            Строка(ВидСравнения.НеРавно));
	СписокВыбора.Добавить(ВидСравнения.ВСписке,            Строка(ВидСравнения.ВСписке));
	СписокВыбора.Добавить(ВидСравнения.ВИерархии,          Строка(ВидСравнения.ВИерархии));
	СписокВыбора.Добавить(ВидСравнения.ВСпискеПоИерархии,  Строка(ВидСравнения.ВСпискеПоИерархии));
	СписокВыбора.Добавить(ВидСравнения.НеВСписке,          Строка(ВидСравнения.НеВСписке));
	СписокВыбора.Добавить(ВидСравнения.НеВИерархии,        Строка(ВидСравнения.НеВИерархии));
	СписокВыбора.Добавить(ВидСравнения.НеВСпискеПоИерархии,Строка(ВидСравнения.НеВСпискеПоИерархии));
	
КонецПроцедуры // ОтборВидСравненияНачалоВыбора()

// Обработчик события возникающего на клиенте перед началом изменения таблицы "Отбор".
//
&НаКлиенте
Процедура ОтборПередНачаломИзменения(Элемент, Отказ)
	
	Поле = Элементы.Отбор.ТекущийЭлемент;
	Если Поле.Имя = "ОтборПравоеЗначение" Тогда
		
		СтандартнаяОбработка = Истина;
		ВыбраннаяСтрока      = Неопределено;
		ОтборПравоеЗначениеНачалоВыбора(Элемент, ВыбраннаяСтрока, СтандартнаяОбработка);
		
	ИначеЕсли Поле.Имя = "ОтборВидСравнения" Тогда
		
		СтандартнаяОбработка = Истина;
		ВыбраннаяСтрока      = Неопределено;
		ОтборВидСравненияНачалоВыбора(Элемент, ВыбраннаяСтрока, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры //ОтборПередНачаломИзменения()

// Обработчик изменения поля "Правое значение" таблицы "Отбор"
//
&НаКлиенте
Процедура ОтборПравоеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ТекущиеДанные.Использование = ЗначениеЗаполнено(ТекущиеДанные.ПравоеЗначение);
	
КонецПроцедуры

// Обработчик начала выбора поля "Правое значение" таблицы "Отбор"
//
&НаКлиенте
Процедура ОтборПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Отбор.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтборПоСписку(ТекущиеДанные.ВидСравнения) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ТекущиеДанные.ВидСравнения = ВидСравнения.ВСпискеПоИерархии ИЛИ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
			ТолькоГруппы = Истина;
		Иначе
			ТолькоГруппы = Ложь;
		КонецЕсли;
		
		СписокВыбора =  ТекущиеДанные.ПравоеЗначение;
		
		Если ТекущиеДанные.ЛевоеЗначение = "Номенклатура" Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СписокВыбора",      СписокВыбора);
			СтруктураПараметров.Вставить("ТипЗначения",       ?(ПоКатегориям, Новый ОписаниеТипов("СправочникСсылка.ТипыНоменклатуры"), Новый ОписаниеТипов("СправочникСсылка.Номенклатура")));
			СтруктураПараметров.Вставить("ДоступныеЗначения", Неопределено);
			СтруктураПараметров.Вставить("ТолькоГруппы",      ТолькоГруппы);
		ИначеЕсли ТекущиеДанные.ЛевоеЗначение = "ПодразделениеОтгрузки" ИЛИ ТекущиеДанные.ЛевоеЗначение = "ПодразделениеЗакупки" Тогда
			ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании");
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СписокВыбора",      СписокВыбора);
			СтруктураПараметров.Вставить("ТипЗначения",       ТипЗначения);
			СтруктураПараметров.Вставить("ДоступныеЗначения", Неопределено);
			СтруктураПараметров.Вставить("ТолькоГруппы",      ТолькоГруппы);
		КонецЕсли;
			
		ОписаниеОповещенияВыбораЗначения = Новый ОписаниеОповещения("ОповещениеВыбораЗначенияОтбора", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ОтчетВыборЗначенияОтбораИзСписка", СтруктураПараметров, Элемент,,,, ОписаниеОповещенияВыбораЗначения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		Если ТекущиеДанные.ВидСравнения = ВидСравнения.ВИерархии ИЛИ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВИерархии Тогда
			ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		Иначе
			ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
		КонецЕсли;
		
		Если ТекущиеДанные.ЛевоеЗначение = "ПодразделениеОтгрузки" ИЛИ ТекущиеДанные.ЛевоеЗначение = "ПодразделениеЗакупки" Тогда
			Элементы.ОтборПравоеЗначение.БыстрыйВыбор         = Ложь;
			Элементы.ОтборПравоеЗначение.ОграничениеТипа      = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании");
			Элементы.ОтборПравоеЗначение.КнопкаВыбора         = Истина;
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ВыборГруппИЭлементов;
		ИначеЕсли ТекущиеДанные.ЛевоеЗначение = "Номенклатура" Тогда
			Элементы.ОтборПравоеЗначение.БыстрыйВыбор         = Ложь;
			Элементы.ОтборПравоеЗначение.ОграничениеТипа      = ?(ПоКатегориям, Новый ОписаниеТипов("СправочникСсылка.ТипыНоменклатуры"), Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			Элементы.ОтборПравоеЗначение.КнопкаВыбора         = Истина;
			Элементы.ОтборПравоеЗначение.ВыборГруппИЭлементов = ВыборГруппИЭлементов;
		КонецЕсли;
		
		Если ДанныеВыбора <> Неопределено Тогда
			ТекущиеДанные.ПравоеЗначение = ДанныеВыбора;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОтборПравоеЗначениеНачалоВыбора()

#КонецОбласти

