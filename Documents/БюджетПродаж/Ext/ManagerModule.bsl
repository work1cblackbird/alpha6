// Модуль менеджера документа "Бюджет продаж"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. 
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Товары.Итог("СуммаВсегоУпр") + Объект.Услуги.Итог("СуммаВсегоУпр"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Функция возвращает строку для подстановки в условие запроса
// #-надо заменить на имя поля, &-надо заменить на имя параметра.
//
// Параметры:
//	ВидСравн - ВидСравнения - Вид сравнения.
//
// Возвращаемое значение:
//	Строка - Строка подстановки в условие запроса.
//
Функция СформироватьСтрокуВидаСравнения(ВидСравн) Экспорт
	
	Если ТипЗнч(ВидСравн)<>Тип("ВидСравнения") Тогда
		Возврат "";
	КонецЕсли; 
	
	СтрокаУсловия = "";
	Если ВидСравн = ВидСравнения.Равно Тогда
		СтрокаУсловия = "#=&";
	ИначеЕсли ВидСравн= ВидСравнения.НеРавно Тогда
		СтрокаУсловия = "#<>&";
	ИначеЕсли ВидСравн= ВидСравнения.ВСписке Тогда
		СтрокаУсловия = "# В (&)";
	ИначеЕсли ВидСравн= ВидСравнения.ВСпискеПоИерархии Тогда
		СтрокаУсловия = "# В ИЕРАРХИИ (&)";
	ИначеЕсли ВидСравн= ВидСравнения.ВИерархии Тогда
		СтрокаУсловия = "# В ИЕРАРХИИ (&)";	
	ИначеЕсли ВидСравн= ВидСравнения.НеВСписке Тогда
		СтрокаУсловия = "НЕ # В (&)";
	ИначеЕсли ВидСравн= ВидСравнения.НеВСпискеПоИерархии Тогда
		СтрокаУсловия = "НЕ # В ИЕРАРХИИ (&)";
	ИначеЕсли ВидСравн= ВидСравнения.НеВИерархии Тогда
		СтрокаУсловия = "НЕ # В ИЕРАРХИИ (&)";
	ИначеЕсли ВидСравн= ВидСравнения.Больше Тогда
		СтрокаУсловия = "#>&";
	ИначеЕсли ВидСравн= ВидСравнения.БольшеИлиРавно Тогда
		СтрокаУсловия = "#>=&";
	ИначеЕсли ВидСравн= ВидСравнения.Меньше Тогда
		СтрокаУсловия = "#<&";
	ИначеЕсли ВидСравн= ВидСравнения.МеньшеИлиРавно Тогда
		СтрокаУсловия = "#<=&";
	КонецЕсли;
	
	Возврат СтрокаУсловия;
	
КонецФункции // СформироватьСтрокуВидаСравнения()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("СценарийПланирования");
	
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Услуги.Номенклатура");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Товары", УникальныеТовары);
	УникальныеРеквизиты.Вставить("Услуги", УникальныеТовары);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	// Если в табличной части находится тип номенклатуры снимем флаг пересчета цен
	Если Объект.ХозОперация = Справочники.ХозОперации.БюджетПродажПоКатегориям И ПараметрыДействия.Свойство("ТребуетсяУстановкаЦен") Тогда
		ПараметрыДействия.ТребуетсяУстановкаЦен = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
	// Если в табличной части находится тип номенклатуры снимем флаг пересчета цен
	Если Объект.ХозОперация = Справочники.ХозОперации.БюджетПродажПоКатегориям И ПараметрыДействия.Свойство("ТребуетсяУстановкаЦен") Тогда
		ПараметрыДействия.ТребуетсяУстановкаЦен = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СценарийПланированияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДатаИзПериода", Объект.ДатаПланирования);
	Параметры.Вставить("Периодичность", Объект.СценарийПланирования.Периодичность);
	Параметры.Вставить("Действие", 0);
	ПланированиеСервер.ПолучитьДатыПланируемогоПериода(Параметры);
	Объект.ДатаПланирования = Параметры.ДатаНачала;
	
КонецПроцедуры // СценарийПланированияПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	// заполним доп реквизиты
	Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Строка.ЕдиницаИзмерения = Строка.Номенклатура.БазоваяЕдиницаИзмерения;
		Строка.СтавкаНДС        = "" + Строка.Номенклатура.СтавкаНДС.Ставка + "%";
		Строка.Код              = Строка.Номенклатура.Код;
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	ТоварыНормативнаяЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Строка.СуммаВсегоУпр = Строка.Количество * Строка.Цена;
	
	// Рассчитаем НДС по ставке из справочника по актуальному курсу
	// Получим ставку.
	Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		СтавкаНДС = Строка.Номенклатура.СтавкаНДС.Ставка;
	Иначе
		СтавкаНДС = Справочники.СтавкиНДС.ОсновнаяСтавкаНДС.Ставка;
	КонецЕсли;
	
	// Получим курсы упр. и рег. валюты на дату документа
	КоэфПересчета   = РаботаСКурсамиВалютПлатформа.ПолучитьКоэффициентПересчетаВалют(Объект.Дата);
	Строка.СуммаНДС = Строка.СуммаВсегоУпр * КоэфПересчета * СтавкаНДС/100;
	
	Строка.МаржинальнаяПрибыль = Строка.СуммаВсегоУпр - Строка.СебестоимостьУпр;
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена нормативная" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНормативнаяЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Строка.СебестоимостьУпр = Строка.НормативнаяЦена * Строка.Количество;
	Строка.МаржинальнаяПрибыль = Строка.СуммаВсегоУпр - Строка.СебестоимостьУпр;
	
КонецПроцедуры // ТоварыНормативнаяЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоУпрПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	ХОПоНоменклатуре = (Объект.ХозОперация = Справочники.ХозОперации.БюджетПродажПоНоменклатуре);
	
	СтавкаНДС       = ?(ХОПоНоменклатуре, Строка.Номенклатура.СтавкаНДС.Ставка, Справочники.СтавкиНДС.ОсновнаяСтавкаНДС.Ставка);
	КоэфПересчета   = РаботаСКурсамиВалютПлатформа.ПолучитьКоэффициентПересчетаВалют(Объект.Дата);
	Строка.СуммаНДС = Строка.СуммаВсегоУпр * КоэфПересчета * СтавкаНДС/100;			
	
	Если ХОПоНоменклатуре Тогда
		Строка.Цена = ?(Строка.Количество=0, Строка.СуммаВсегоУпр, Строка.СуммаВсегоУпр / Строка.Количество);
	КонецЕсли;
	
	Строка.МаржинальнаяПрибыль = Строка.СуммаВсегоУпр - Строка.СебестоимостьУпр;
	
КонецПроцедуры // ТоварыСуммаВсегоУпрПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Себестоимость" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСебестоимостьУпрПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Если Объект.ХозОперация=Справочники.ХозОперации.БюджетПродажПоНоменклатуре Тогда 			
		Строка.НормативнаяЦена = ?(Строка.Количество=0, Строка.СебестоимостьУпр, Строка.СебестоимостьУпр / Строка.Количество);
	КонецЕсли;
	
	Строка.МаржинальнаяПрибыль = Строка.СуммаВсегоУпр - Строка.СебестоимостьУпр;
	
КонецПроцедуры // ТоварыСебестоимостьУпрПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Услуги".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура УслугиНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Строка.Цена = ЦенообразованиеСервер.ПолучитьЦену(Объект.ТипЦен, Строка.Номенклатура, Объект.Дата, Справочники.Контрагенты.ПустаяСсылка(), Константы.ВалютаУправленческогоУчетаКомпании.Получить(),,,, Объект.ПодразделениеКомпании);
		УслугиЦенаПриИзменении(объект, Строка, ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры // УслугиНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Услуги".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура УслугиКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	УслугиЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // УслугиКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Услуги".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура УслугиЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Строка.СуммаВсегоУпр = Строка.Количество * Строка.Цена;
	// Рассчитаем НДС по ставке из справочника по актуальному курсу
	// Получим ставку.
	Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		СтавкаНДС = Строка.Номенклатура.СтавкаНДС.Ставка;
	Иначе
		СтавкаНДС = Справочники.СтавкиНДС.ОсновнаяСтавкаНДС.Ставка;
	КонецЕсли;
	
	// Получим курсы упр. и рег. валюты на дату документа
	КоэфПересчета   = РаботаСКурсамиВалютПлатформа.ПолучитьКоэффициентПересчетаВалют(Объект.Дата);
	Строка.СуммаНДС = Строка.СуммаВсегоУпр * КоэфПересчета * СтавкаНДС/100;
	
КонецПроцедуры // УслугиЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Услуги".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура УслугиСуммаВсегоУпрПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	ХОПоНоменклатуре = (Объект.ХозОперация = Справочники.ХозОперации.БюджетПродажПоНоменклатуре);
	
	СтавкаНДС       = ?(ХОПоНоменклатуре, Строка.Номенклатура.СтавкаНДС.Ставка, Справочники.СтавкиНДС.ОсновнаяСтавкаНДС.Ставка);
	КоэфПересчета   = РаботаСКурсамиВалютПлатформа.ПолучитьКоэффициентПересчетаВалют(Объект.Дата);
	Строка.СуммаНДС = Строка.СуммаВсегоУпр * КоэфПересчета * СтавкаНДС/100;
	
	Если ХОПоНоменклатуре Тогда
		Строка.Цена = ?(Строка.Количество=0, Строка.СуммаВсегоУпр, Строка.СуммаВсегоУпр/Строка.Количество);
	КонецЕсли;
	
КонецПроцедуры // УслугиСуммаВсегоУпрПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ТабличныеЧастиСКомандами = Новый Массив();
	ТабличныеЧастиСКомандами.Добавить("Товары");
	ТабличныеЧастиСКомандами.Добавить("Услуги");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "БюджетПродаж");
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиСКомандами Цикл
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, ТабличнаяЧасть);
		
		Если ОтображатьЗаполнитьИзФайла Тогда
			ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, ТабличнаяЧасть);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СценарийПланирования",            "СценарийПланирования");
	ПараметрыФормы.Вставить("КоличествоПериодов",              "КоличествоПериодов");
	ПараметрыФормы.Вставить("КоэффициентРостаПродаж",          "КоэффициентРостаПродаж");
	ПараметрыФормы.Вставить("КоэффициентСезонности",           "КоэффициентСезонности");
	ПараметрыФормы.Вставить("ТипАнализа",                      "ТипАнализа");
	ПараметрыФормы.Вставить("ПоказательПланирования",          "ПоказательПланирования");
	ПараметрыФормы.Вставить("СпособОкругления",                "СпособОкругления");
	ПараметрыФормы.Вставить("НеУчитыватьПериодыБезДанных",     "НеУчитыватьПериодыБезДанных");
	ПараметрыФормы.Вставить("КоличествоСезонов",               "КоличествоСезонов");
	ПараметрыФормы.Вставить("СмещениеПланирования",            "СмещениеПланирования");
	ПараметрыФормы.Вставить("ХозОперация",                     "ХозОперация");
	ПараметрыФормы.Вставить("ДатаПланирования",                "ДатаПланирования");
	ПараметрыФормы.Вставить("ПланированиеСебестоимости",       "ПланированиеСебестоимости");
	ПараметрыФормы.Вставить("МодельПрогнозирования",           "МодельПрогнозирования");
	ПараметрыФормы.Вставить("Параметр1",                       "Параметр1");
	ПараметрыФормы.Вставить("Параметр2",                       "Параметр2");
	ПараметрыФормы.Вставить("Параметр3",                       "Параметр3");
	ПараметрыФормы.Вставить("РасчетСезонности",                "РасчетСезонности");
	ПараметрыФормы.Вставить("ДокументОснование",               "ДокументОснование");
	ПараметрыФормы.Вставить("МетодыРаспределенияКатегорий",    "МетодыРаспределенияКатегорий");
	ПараметрыФормы.Вставить("ПараметрУправленияРаспределением","ПараметрУправленияРаспределением");
	ПараметрыФормы.Вставить("ТипЦен",                          "ТипЦен");
	ПараметрыФормы.Вставить("Дата",                            "Дата");
	ПараметрыФормы.Вставить("КурсДокумента",                   "КурсДокумента");
	ПараметрыФормы.Вставить("ПодразделениеКомпании",           "ПодразделениеКомпании");
	ПараметрыФормы.Вставить("Владелец",                        "Ссылка");
	ПараметрыФормы.Вставить("ИмяТабличнойЧасти",               "Товар");

	ФормаАвтозаполнения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ФормаАвтозаполнения.ВыборСсылки 		= "Документ.БюджетПродаж.Форма.ФормаДляЗаполненияПростымСпособом";
	ФормаАвтозаполнения.Обязательный 		= Истина;
	
	ФормаАвтозаполнения.Параметры = ПараметрыФормы;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Наивное прогнозирование'");
	Команда.Идентификатор	= "ЗаполнениеТабличнойЧастиТовары";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("РезультатВыбора", ФормаАвтозаполнения);
	
	ФормаАвтозаполнения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ФормаАвтозаполнения.ВыборСсылки 		= "Документ.БюджетПродаж.Форма.ФормаДляЗаполненияМатМетодами";
	ФормаАвтозаполнения.Обязательный 		= Истина;
	
	ФормаАвтозаполнения.Параметры = ПараметрыФормы;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Прогнозирование мат. методами'");
	Команда.Идентификатор	= "ЗаполнениеТабличнойЧастиТовары";
	Команда.Порядок			= 51;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("РезультатВыбора", ФормаАвтозаполнения);
	
	ФормаАвтозаполнения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ФормаАвтозаполнения.ВыборСсылки 		= "Документ.БюджетПродаж.Форма.ФормаДляЗаполненияПоДокументуОснованию";
	ФормаАвтозаполнения.Обязательный 		= Истина;
	
	ФормаАвтозаполнения.Параметры = ПараметрыФормы;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнение по документу основанию'");
	Команда.Идентификатор	= "ЗаполнениеТабличнойЧастиТовары";
	Команда.Порядок			= 52;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("РезультатВыбора", ФормаАвтозаполнения);
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СценарийПланирования",            "СценарийПланирования");
	ПараметрыФормы.Вставить("КоличествоПериодов",              "КоличествоПериодов");
	ПараметрыФормы.Вставить("КоэффициентРостаПродаж",          "КоэффициентРостаПродаж");
	ПараметрыФормы.Вставить("КоэффициентСезонности",           "КоэффициентСезонности");
	ПараметрыФормы.Вставить("ТипАнализа",                      "ТипАнализа");
	ПараметрыФормы.Вставить("ПоказательПланирования",          "ПоказательПланирования");
	ПараметрыФормы.Вставить("СпособОкругления",                "СпособОкругления");
	ПараметрыФормы.Вставить("НеУчитыватьПериодыБезДанных",     "НеУчитыватьПериодыБезДанных");
	ПараметрыФормы.Вставить("КоличествоСезонов",               "КоличествоСезонов");
	ПараметрыФормы.Вставить("СмещениеПланирования",            "СмещениеПланирования");
	ПараметрыФормы.Вставить("ХозОперация",                     "ХозОперация");
	ПараметрыФормы.Вставить("ДатаПланирования",                "ДатаПланирования");
	ПараметрыФормы.Вставить("ПланированиеСебестоимости",       "ПланированиеСебестоимости");
	ПараметрыФормы.Вставить("МодельПрогнозирования",           "МодельПрогнозирования");
	ПараметрыФормы.Вставить("Параметр1",                       "Параметр1");
	ПараметрыФормы.Вставить("Параметр2",                       "Параметр2");
	ПараметрыФормы.Вставить("Параметр3",                       "Параметр3");
	ПараметрыФормы.Вставить("РасчетСезонности",                "РасчетСезонности");
	ПараметрыФормы.Вставить("ДокументОснование",               "ДокументОснование");
	ПараметрыФормы.Вставить("МетодыРаспределенияКатегорий",    "МетодыРаспределенияКатегорий");
	ПараметрыФормы.Вставить("ПараметрУправленияРаспределением","ПараметрУправленияРаспределением");
	ПараметрыФормы.Вставить("ТипЦен",                          "ТипЦен");
	ПараметрыФормы.Вставить("Дата",                            "Дата");
	ПараметрыФормы.Вставить("КурсДокумента",                   "КурсДокумента");
	ПараметрыФормы.Вставить("ПодразделениеКомпании",           "ПодразделениеКомпании");
	ПараметрыФормы.Вставить("Владелец",                         "Ссылка");
	ПараметрыФормы.Вставить("ИмяТабличнойЧасти",               "Услуга");
	
	ФормаАвтозаполнения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ФормаАвтозаполнения.ВыборСсылки 		= "Документ.БюджетПродаж.Форма.ФормаДляЗаполненияПростымСпособом";
	ФормаАвтозаполнения.Обязательный 		= Истина;
	
	ФормаАвтозаполнения.Параметры = ПараметрыФормы;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "УслугиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Наивное прогнозирование'");
	Команда.Идентификатор	= "ЗаполнениеТабличнойЧастиУслуги";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Услуги";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("РезультатВыбора", ФормаАвтозаполнения);
	
	ФормаАвтозаполнения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ФормаАвтозаполнения.ВыборСсылки 		= "Документ.БюджетПродаж.Форма.ФормаДляЗаполненияМатМетодами";
	ФормаАвтозаполнения.Обязательный 		= Истина;
	
	ФормаАвтозаполнения.Параметры = ПараметрыФормы;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "УслугиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Прогнозирование мат. методами'");
	Команда.Идентификатор	= "ЗаполнениеТабличнойЧастиУслуги";
	Команда.Порядок			= 51;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Услуги";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("РезультатВыбора", ФормаАвтозаполнения);
	
	ФормаАвтозаполнения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ФормаАвтозаполнения.ВыборСсылки 		= "Документ.БюджетПродаж.Форма.ФормаДляЗаполненияПоДокументуОснованию";
	ФормаАвтозаполнения.Обязательный 		= Истина;
	
	ФормаАвтозаполнения.Параметры = ПараметрыФормы;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "УслугиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнение по документу основанию'");
	Команда.Идентификатор	= "ЗаполнениеТабличнойЧастиУслуги";
	Команда.Порядок			= 52;
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Услуги";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("РезультатВыбора", ФормаАвтозаполнения);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ТоварыЗаполнениеПоДаннымПрошлогоПериода.Видимость",                  Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнениеПоДаннымПрошлогоПериода.Доступность",                Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнениеМетодамиМатематическогоПрогнозирования.Видимость",   Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнениеМетодамиМатематическогоПрогнозирования.Доступность", Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнениеПоДокументуОснованию.Видимость",                     Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнениеПоДокументуОснованию.Доступность",                   Истина);
	ПараметрыКоманд.Вставить("УслугиЗаполнениеПоДаннымПрошлогоПериода.Видимость",                  Истина);
	ПараметрыКоманд.Вставить("УслугиЗаполнениеПоДаннымПрошлогоПериода.Доступность",                Истина);
	ПараметрыКоманд.Вставить("УслугиЗаполнениеМетодамиМатематическогоПрогнозирования.Видимость",   Истина);
	ПараметрыКоманд.Вставить("УслугиЗаполнениеМетодамиМатематическогоПрогнозирования.Доступность", Истина);
	ПараметрыКоманд.Вставить("УслугиЗаполнениеПоДокументуОснованию.Видимость",                     Истина);
	ПараметрыКоманд.Вставить("УслугиЗаполнениеПоДокументуОснованию.Доступность",                   Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения табличной части документа "Товары" выбранным методом.
//
Функция ЗаполнениеТабличнойЧастиТовары(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыКоманды.Свойство("РезультатВыбора") Тогда
		ПараметрыЗаполнения = ПараметрыКоманды;
	Иначе
		ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	КонецЕсли;
	Объект = ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Результат = ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗаполнения, "РезультатВыбора", Неопределено);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, ПараметрыЗаполнения.РезультатВыбора);
		Для Каждого ТекСтрока Из ПараметрыЗаполнения.РезультатВыбора.ТаблицаНоменклатуры Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			Если ТипЗнч(НоваяСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.БазоваяЕдиницаИзмерения;
				НоваяСтрока.СтавкаНДС = Строка(НоваяСтрока.СтавкаНДС) + "%";
			КонецЕсли;
			НоваяСтрока.Код = НоваяСтрока.Номенклатура.Код;
			НоваяСтрока.МаржинальнаяПрибыль = НоваяСтрока.СуммаВсегоУпр - НоваяСтрока.СебестоимостьУпр;
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции // ЗаполнениеТабличнойЧастиТовары()

// Обработчик заполнения табличной части документа "Услуги" выбранным методом.
//
Функция ЗаполнениеТабличнойЧастиУслуги(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	Если ПараметрыКоманды.Свойство("РезультатВыбора") Тогда
		ПараметрыЗаполнения = ПараметрыКоманды;
	Иначе
		ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	КонецЕсли;
	Объект = ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Результат = ПолучитьЗначениеПараметраСтруктуры(ПараметрыЗаполнения, "РезультатВыбора", Неопределено);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, ПараметрыЗаполнения.РезультатВыбора);
		Для Каждого ТекСтрока Из ПараметрыЗаполнения.РезультатВыбора.ТаблицаНоменклатуры Цикл
			НоваяСтрока = Объект.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			Если ТипЗнч(НоваяСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.БазоваяЕдиницаИзмерения;
				НоваяСтрока.СтавкаНДС = Строка(НоваяСтрока.СтавкаНДС) + "%";
			КонецЕсли;
			НоваяСтрока.Код = НоваяСтрока.Номенклатура.Код;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // ЗаполнениеТабличнойЧастиУслуги()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.БюджетПродаж",
		"ПФ_MXL_БюджетПродаж",
		НСтр("ru = 'Бюджет продаж'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_БюджетПродаж") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_БюджетПродаж",
															"Бюджет Продаж",
															ПечатьБюджетПродаж(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;	
КонецПроцедуры // Печать()

// Формирует печатную форму "БюджетПродаж"
//
Функция ПечатьБюджетПродаж(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_БюджетПродаж_БюджетПродаж";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати,ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.БюджетПродаж.ПФ_MXL_БюджетПродаж");
		
		// для начала настроим макет
		ОбластьТовар = Макет.Область("Товар");
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ИмяКодаТовара = Неопределено;
		Если Документ.ПланированиеСебестоимости Тогда
			Если Документ.ХозОперация=Справочники.ХозОперации.БюджетПродажПоКатегориям Тогда
				ОбластьНормативнаяЦена = Макет.Область("НормативнаяЦена");
				ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ОбластьНормативнаяЦена.ШиринаКолонки;
				Макет.УдалитьОбласть(ОбластьНормативнаяЦена,ТипСмещенияТабличногоДокумента.ПоВертикали);
			КонецЕсли;
		Иначе
			ОбластьНормативнаяЦена	= Макет.Область("НормативнаяЦена");
			ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ОбластьНормативнаяЦена.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьНормативнаяЦена,ТипСмещенияТабличногоДокумента.ПоВертикали);
			ОбластьСебестоимость = Макет.Область("Себестоимость");
			ШиринаКолонокСебестоимости = Макет.Область(1, ОбластьСебестоимость.Лево).ШиринаКолонки+Макет.Область(1, ОбластьСебестоимость.Право).ШиринаКолонки;
			ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ШиринаКолонокСебестоимости;
			Макет.УдалитьОбласть(ОбластьСебестоимость,ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		Если Документ.ХозОперация=Справочники.ХозОперации.БюджетПродажПоКатегориям Тогда
			ОбластьКоличество	= Макет.Область("Количество");
			ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ОбластьКоличество.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьКоличество,ТипСмещенияТабличногоДокумента.ПоВертикали);
			ОбластьЕдиницаИзмерения	= Макет.Область("ЕдиницаИзмерения");
			ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ОбластьЕдиницаИзмерения.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьЕдиницаИзмерения,ТипСмещенияТабличногоДокумента.ПоВертикали);
			ОбластьЦена	= Макет.Область("Цена");
			ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ОбластьЦена.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьЦена,ТипСмещенияТабличногоДокумента.ПоВертикали);
			ОбластьКод	= Макет.Область("Код");
			ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ОбластьКод.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьКод,ТипСмещенияТабличногоДокумента.ПоВертикали);
		Иначе
			ИмяКодаТовара = УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах().Синоним;
		КонецЕсли;
		
		// ЗАГОЛОВОК
		ОбластьЗаголовка = Макет.ПолучитьОбласть("Заголовок");
		ОбластьЗаголовка.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовка.Параметры.ПодразделениеКомпании = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ОбластьЗаголовка.Параметры.ПодразделениеКомпании, Документ.Дата);
		ОбластьЗаголовка.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		Параметры = Новый Структура;                                 
		Параметры.Вставить("ДатаИзПериода", Документ.ДатаПланирования);
		Параметры.Вставить("Периодичность", Документ.СценарийПланирования.Периодичность);
		Параметры.Вставить("Действие", 0);
		ПредставлениеПериодаПланирования = ПланированиеСервер.ПолучитьДатыПланируемогоПериода(Параметры);	
		
		ОбластьЗаголовка.Параметры.СценарийПланирования = Документ.СценарийПланирования;
		ОбластьЗаголовка.Параметры.ПредставлениеПериодаПланирования = ПредставлениеПериодаПланирования;
		ТабличныйДокумент.Вывести(ОбластьЗаголовка);
		
		// ИТОГИ НА СТРАНИЦЕ
		УчетКоличества    = (Документ.ХозОперация=Справочники.ХозОперации.БюджетПродажПоНоменклатуре);
		УчетСебестоимости = Документ.ПланированиеСебестоимости;
		СтруктураИтоговПоСтранице 	= Новый Структура;
		СтруктураИтоговПоТаблице 	= Новый Структура;
		СтруктураИтоговПоДокументу	= Новый Структура;
		
		СтруктураИтоговПоСтранице.Вставить("СуммаУпр",0);
		
		Если УчетСебестоимости Тогда
			Если УчетКоличества Тогда
				СтруктураИтоговПоСтранице.Вставить("НормативнаяЦена",0);
			КонецЕсли;
			СтруктураИтоговПоСтранице.Вставить("СебестоимостьУпр",0);
			СтруктураИтоговПоСтранице.Вставить("МаржинальнаяПрибыль",0);
		КонецЕсли;
		Если УчетКоличества Тогда
			СтруктураИтоговПоСтранице.Вставить("Количество",0);
		КонецЕсли;
		СтруктураИтоговПоСтранице.Вставить("СуммаНДС",0);
		
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвалТоваров = Макет.ПолучитьОбласть("ПодвалТоваров");
		ОбластьПодвалУслуг = Макет.ПолучитьОбласть("ПодвалУслуг");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		
		ИмяТЧТовара = """Товары""";
		ИмяТЧУслуги = """Услуги""";
		Если Документ.ХозОперация=Справочники.ХозОперации.БюджетПродажПоКатегориям Тогда
			ИмяТЧТовара = НСтр("ru = '""Типы номенклатуры""'");
			ИмяТЧУслуги = НСтр("ru = '""Типы услуг""'");
		КонецЕсли;
		
		Для Каждого ЭлементСтруктуры Из СтруктураИтоговПоСтранице Цикл
			СтруктураИтоговПоТаблице.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			СтруктураИтоговПоДокументу.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьШапкаТаблицы.Параметры.Товар = ИмяТЧТовара;
		Если ИмяКодаТовара<>Неопределено Тогда
			ОбластьШапкаТаблицы.Параметры.ИмяКодаТовара = ИмяКодаТовара;
		КонецЕсли;
		
		// сразу два, т.к. выводим на второй странице только
		НомерСтраницы = 2;
		НомерСтраницыПред = НомерСтраницы;
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БюджетПродажТовары.Номенклатура КАК Номенклатура,
		|	БюджетПродажТовары.Номенклатура.Наименование КАК ТоварНаименование,
		|	БюджетПродажТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	БюджетПродажТовары.Цена КАК Цена,
		|	БюджетПродажТовары.Количество КАК Количество,
		|	БюджетПродажТовары.СуммаВсегоУпр КАК СуммаУпр,
		|	БюджетПродажТовары.СуммаВсегоУпр - БюджетПродажТовары.СебестоимостьУпр КАК МаржинальнаяПрибыль,
		|	БюджетПродажТовары.НормативнаяЦена КАК НормативнаяЦена,
		|	БюджетПродажТовары.СебестоимостьУпр КАК СебестоимостьУпр,
		|	БюджетПродажТовары.СуммаНДС КАК СуммаНДС
		|ИЗ
		|	Документ.БюджетПродаж.Товары КАК БюджетПродажТовары
		|ГДЕ
		|	БюджетПродажТовары.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	БюджетПродажТовары.НомерСтроки";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
		ВыборкаНоменклатуры = Запрос.Выполнить().Выбрать();
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТовара");
		Ном=1;
		КоличествоНоменклатуры = ВыборкаНоменклатуры.Количество();
		Если КоличествоНоменклатуры > 0 Тогда
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			// заполним параметры шапки таблицы для следующего листа
			ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
			ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			Пока ВыборкаНоменклатуры.Следующий() Цикл
				ОбластьСтрока.Параметры.НомерСтроки = Ном;
				ОбластьСтрока.Параметры.ТоварНаименование = ВыборкаНоменклатуры.ТоварНаименование;
				ОбластьСтрока.Параметры.Номенклатура	  = ВыборкаНоменклатуры.Номенклатура;
				
				ПараметрыЗаполнения = Новый Структура;
				ПараметрыЗаполнения.Вставить("УчетКоличества",         УчетКоличества);
				ПараметрыЗаполнения.Вставить("УчетСебестоимости",      УчетСебестоимости);
				ПараметрыЗаполнения.Вставить("ЭтоСтрока",              Истина);
				ПараметрыЗаполнения.Вставить("ИмяКодаТовара",          ИмяКодаТовара);
				ПараметрыЗаполнения.Вставить("ФорматВыводаСуммы",      ФорматВыводаСуммы);
				ПараметрыЗаполнения.Вставить("ФорматВыводаКоличества", ФорматВыводаКоличества );
				ПараметрыЗаполнения.Вставить("ЭтоУслуга",              Ложь);
				ЗаполнитьМакетНоменклатурнойСтроки(ОбластьСтрока, ВыборкаНоменклатуры, ПараметрыЗаполнения);
				
				мсвДопОбластиПодвала = Неопределено;
				Если Ном=КоличествоНоменклатуры Тогда
					мсвДопОбластиПодвала = Новый Массив;
					мсвДопОбластиПодвала.Добавить(ОбластьПодвалТоваров);
				КонецЕсли;
				
				// выводим строку, делая проверку попадания на лист
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока, ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ, мсвДопОбластиПодвала);
				
				// инициализация итогов по странице
				Если НомерСтраницы <> НомерСтраницыПред Тогда
					// обнулим структуру
					Для Каждого ЭлементСтруктуры Из СтруктураИтоговПоСтранице Цикл
						СтруктураИтоговПоТаблице.Вставить(ЭлементСтруктуры.Ключ, СтруктураИтоговПоТаблице[ЭлементСтруктуры.Ключ]+ЭлементСтруктуры.Значение);
						СтруктураИтоговПоСтранице.Вставить(ЭлементСтруктуры.Ключ, 0);
					КонецЦикла;
					НомерСтраницыПред = НомерСтраницы;
					ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
					ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
				КонецЕсли;
				УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(ВыборкаНоменклатуры,СтруктураИтоговПоСтранице);
				Ном=Ном+1;
			КонецЦикла;
			
			Для Каждого ЭлементСтруктуры Из СтруктураИтоговПоСтранице Цикл
				СтруктураИтоговПоТаблице.Вставить(ЭлементСтруктуры.Ключ, СтруктураИтоговПоТаблице[ЭлементСтруктуры.Ключ]+ЭлементСтруктуры.Значение);
			КонецЦикла;
			
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("УчетКоличества",         УчетКоличества);
			ПараметрыЗаполнения.Вставить("УчетСебестоимости",      УчетСебестоимости);
			ПараметрыЗаполнения.Вставить("ЭтоСтрока",              Ложь);
			ПараметрыЗаполнения.Вставить("ИмяКодаТовара",          "");
			ПараметрыЗаполнения.Вставить("ФорматВыводаСуммы",      ФорматВыводаСуммы);
			ПараметрыЗаполнения.Вставить("ФорматВыводаКоличества", ФорматВыводаКоличества);
			ПараметрыЗаполнения.Вставить("ЭтоУслуга",              Ложь);
			ЗаполнитьМакетНоменклатурнойСтроки(ОбластьПодвалТоваров, СтруктураИтоговПоТаблице, ПараметрыЗаполнения);
			
			ОбластьПодвалТоваров.Параметры.ТекстИтога = НСтр("ru = 'Итого по таблице'") + Символы.НПП + ОбластьШапкаТаблицы.Параметры.Товар+":";
			ТабличныйДокумент.Вывести(ОбластьПодвалТоваров);
		КонецЕсли;
		
		Для Каждого ЭлементСтруктуры Из СтруктураИтоговПоТаблице Цикл
			СтруктураИтоговПоДокументу.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			СтруктураИтоговПоТаблице.Вставить(ЭлементСтруктуры.Ключ, 0);
		КонецЦикла;
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БюджетПродажУслуги.Номенклатура КАК Номенклатура,
		|	БюджетПродажУслуги.Номенклатура.Наименование КАК ТоварНаименование,
		|	БюджетПродажУслуги.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	БюджетПродажУслуги.Цена КАК Цена,
		|	БюджетПродажУслуги.Количество КАК Количество,
		|	БюджетПродажУслуги.СуммаВсегоУпр КАК СуммаУпр,
		|	БюджетПродажУслуги.СуммаВсегоУпр КАК МаржинальнаяПрибыль,
		|	0 КАК НормативнаяЦена,
		|	0 КАК СебестоимостьУпр,
		|	БюджетПродажУслуги.СуммаНДС КАК СуммаНДС
		|ИЗ
		|	Документ.БюджетПродаж.Услуги КАК БюджетПродажУслуги
		|ГДЕ
		|	БюджетПродажУслуги.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	БюджетПродажУслуги.НомерСтроки";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
		ВыборкаУслуг = Запрос.Выполнить().Выбрать();
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаУслуги");
		Ном=1;
		КоличествоНоменклатуры = ВыборкаУслуг.Количество();
		Если КоличествоНоменклатуры>0 Тогда
			ОбластьШапкаТаблицы.Параметры.Товар = ИмяТЧУслуги;
			ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = "";
			ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "";
				
			// Разбиение на страницы.
			// запишем их в один массив
			МассивОбластейДляПроверки = Новый Массив;
			МассивОбластейДляПроверки.Добавить(ОбластьШапкаТаблицы);
			МассивОбластейДляПроверки.Добавить(ОбластьМакета);
			МассивОбластейДляПроверки.Добавить(ОбластьИтогоПоСтранице);
			
			// проверим, помещаются ли на странице
			Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивОбластейДляПроверки) Тогда
				// выводим итог по странице
				УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент,ОбластьИтогоПоСтранице,СтруктураИтоговПоСтранице,Документ);
				// переходим на следующую страницу
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц(); 
				ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
				НомерСтраницы = НомерСтраницы + 1;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
			ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
				
			Пока ВыборкаУслуг.Следующий() Цикл
				ОбластьМакета.Параметры.НомерСтроки = Ном;
				ОбластьМакета.Параметры.ТоварНаименование = ВыборкаУслуг.ТоварНаименование;
				ОбластьМакета.Параметры.Номенклатура	  = ВыборкаУслуг.Номенклатура;
				
				ПараметрыЗаполнения = Новый Структура;
				ПараметрыЗаполнения.Вставить("УчетКоличества",         УчетКоличества);
				ПараметрыЗаполнения.Вставить("УчетСебестоимости",      УчетСебестоимости);
				ПараметрыЗаполнения.Вставить("ЭтоСтрока",              Истина);
				ПараметрыЗаполнения.Вставить("ИмяКодаТовара",          ИмяКодаТовара);
				ПараметрыЗаполнения.Вставить("ФорматВыводаСуммы",      ФорматВыводаСуммы);
				ПараметрыЗаполнения.Вставить("ФорматВыводаКоличества", ФорматВыводаКоличества);
				ПараметрыЗаполнения.Вставить("ЭтоУслуга",              Истина);
				ЗаполнитьМакетНоменклатурнойСтроки(ОбластьМакета, ВыборкаУслуг, ПараметрыЗаполнения);
				
				мсвДопОбластиПодвала = Неопределено;
				Если Ном=КоличествоНоменклатуры Тогда
					мсвДопОбластиПодвала = Новый Массив;
					мсвДопОбластиПодвала.Добавить(ОбластьПодвалУслуг);
				КонецЕсли;
				
				// выводим строку, делая проверку попадания на лист
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьМакета, ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ, мсвДопОбластиПодвала);		
				
				// инициализация итогов по странице
				Если НомерСтраницы <> НомерСтраницыПред Тогда
					// обнулим структуру
						Для Каждого стрСтруктуры Из СтруктураИтоговПоСтранице Цикл
							СтруктураИтоговПоСтранице.Вставить(стрСтруктуры.Ключ, 0);
						КонецЦикла;
						НомерСтраницыПред = НомерСтраницы;
					КонецЕсли;
					УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(ВыборкаУслуг,СтруктураИтоговПоСтранице);					
					Ном=Ном+1;	
				КонецЦикла;
				УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(ВыборкаУслуг,СтруктураИтоговПоТаблице);
				
				ПараметрыЗаполнения = Новый Структура;
				ПараметрыЗаполнения.Вставить("УчетКоличества",         УчетКоличества);
				ПараметрыЗаполнения.Вставить("УчетСебестоимости",      УчетСебестоимости);
				ПараметрыЗаполнения.Вставить("ЭтоСтрока",              Ложь);
				ПараметрыЗаполнения.Вставить("ИмяКодаТовара",          "");
				ПараметрыЗаполнения.Вставить("ФорматВыводаСуммы",      ФорматВыводаСуммы);
				ПараметрыЗаполнения.Вставить("ФорматВыводаКоличества", ФорматВыводаКоличества);
				ПараметрыЗаполнения.Вставить("ЭтоУслуга",              Истина);
				ЗаполнитьМакетНоменклатурнойСтроки(ОбластьПодвалУслуг, СтруктураИтоговПоТаблице, ПараметрыЗаполнения);
				
				ОбластьПодвалУслуг.Параметры.ТекстИтога = НСтр("ru = 'Итого по таблице'") + Символы.НПП +ОбластьШапкаТаблицы.Параметры.Товар+":";
				ТабличныйДокумент.Вывести(ОбластьПодвалУслуг);
			
			Для Каждого ЭлементСтруктуры Из СтруктураИтоговПоТаблице Цикл
				СтруктураИтоговПоДокументу.Вставить(ЭлементСтруктуры.Ключ, СтруктураИтоговПоДокументу[ЭлементСтруктуры.Ключ]+ЭлементСтруктуры.Значение);
			КонецЦикла;	
		КонецЕсли;
		ОбластьПодвал.Параметры.Автор = Документ.Автор;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент,ОбластьИтогоПоСтранице,СтруктураИтоговПоСтранице,Документ);
		КонецЕсли;
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("УчетКоличества",         УчетКоличества);
		ПараметрыЗаполнения.Вставить("УчетСебестоимости",      УчетСебестоимости);
		ПараметрыЗаполнения.Вставить("ЭтоСтрока",              Ложь);
		ПараметрыЗаполнения.Вставить("ИмяКодаТовара",          "");
		ПараметрыЗаполнения.Вставить("ФорматВыводаСуммы",      ФорматВыводаСуммы);
		ПараметрыЗаполнения.Вставить("ФорматВыводаКоличества", ФорматВыводаКоличества);
		ПараметрыЗаполнения.Вставить("ЭтоУслуга",              Ложь);
		ЗаполнитьМакетНоменклатурнойСтроки(ОбластьПодвал, СтруктураИтоговПоДокументу, ПараметрыЗаполнения);
		
		КоличествоПозиций = Документ.Товары.Количество() + Документ.Услуги.Количество();
		Если Документ.ХозОперация=Справочники.ХозОперации.БюджетПродажПоНоменклатуре Тогда
			ОбластьПодвал.Параметры.СуммаПрописью     = НСтр("ru = 'Всего запланировано позиций номенклатуры'") + Символы.НПП
															+ КоличествоПозиций + Символы.НПП + НСтр("ru = 'на сумму'") + Символы.НПП 
															+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СтруктураИтоговПоДокументу.СуммаУпр, ВалютаУпр);
		Иначе
			ОбластьПодвал.Параметры.СуммаПрописью     = НСтр("ru = 'Всего запланировано типов номенклатуры'") + Символы.НПП 
															+ КоличествоПозиций + Символы.НПП + НСтр("ru = 'на сумму'") + Символы.НПП 
															+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СтруктураИтоговПоДокументу.СуммаУпр, ВалютаУпр);
		КонецЕсли;
		
		УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент,ОбластьПодвал, , ,НомерСтраницы,,Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции //ПечатьБюджетПродаж()

// Процедура заполнения макета данными из строки номенклатуры
Процедура ЗаполнитьМакетНоменклатурнойСтроки(ОбластьМакета, СтруктураДанных, ПараметрыЗаполнения)
		
		Если ПараметрыЗаполнения.УчетКоличества Тогда
			ОбластьМакета.Параметры.Количество = Формат(СтруктураДанных.Количество, ПараметрыЗаполнения.ФорматВыводаКоличества);
			Если ПараметрыЗаполнения.ЭтоСтрока Тогда
				ОбластьМакета.Параметры.Код  = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтруктураДанных.Номенклатура);
				ОбластьМакета.Параметры.Цена = Формат(СтруктураДанных.Цена, ПараметрыЗаполнения.ФорматВыводаСуммы);
				ОбластьМакета.Параметры.ЕдиницаИзмерения  = СтруктураДанных.ЕдиницаИзмерения;
			КонецЕсли;
		КонецЕсли;
		ОбластьМакета.Параметры.СуммаУпр = Формат(СтруктураДанных.СуммаУпр, ПараметрыЗаполнения.ФорматВыводаСуммы);
		Если ПараметрыЗаполнения.УчетСебестоимости Тогда
			Если НЕ ПараметрыЗаполнения.ЭтоУслуга Тогда
				Если ПараметрыЗаполнения.УчетКоличества И ПараметрыЗаполнения.ЭтоСтрока Тогда
					ОбластьМакета.Параметры.НормативнаяЦена = Формат(СтруктураДанных.НормативнаяЦена, ПараметрыЗаполнения.ФорматВыводаСуммы);
				КонецЕсли; 
				ОбластьМакета.Параметры.СебестоимостьУпр    = Формат(СтруктураДанных.СебестоимостьУпр, ПараметрыЗаполнения.ФорматВыводаСуммы); 
			КонецЕсли;
			// Выводим маржинальную прибыль
			ОбластьЯчеек = ОбластьМакета.Область(1, 2, 1, 2);
			Если СтруктураДанных.МаржинальнаяПрибыль<0 Тогда
				ОбластьЯчеек.ЦветТекста = Новый Цвет(255, 0, 0);
			Иначе
				ОбластьЯчеек.ЦветТекста = Новый Цвет(0, 0, 0);
			КонецЕсли;
			ОбластьМакета.Параметры.МаржинальнаяПрибыль = Формат(СтруктураДанных.МаржинальнаяПрибыль, ПараметрыЗаполнения.ФорматВыводаСуммы);
		КонецЕсли;
		ОбластьМакета.Параметры.СуммаНДС = Формат(СтруктураДанных.СуммаНДС, ПараметрыЗаполнения.ФорматВыводаСуммы);
		
КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.БюджетЗакупок);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.БюджетПродаж);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
		
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
	
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
		
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.БюджетПродаж);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли