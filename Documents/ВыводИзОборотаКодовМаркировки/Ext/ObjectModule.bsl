// Модуль объекта документа "Вывод из оборота кодов маркировки"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаВыводаИзОборота) Тогда
		ДатаВыводаИзОборота = Дата;
	КонецЕсли;
	
	ТипЦен = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенПродажи");
	Если НЕ ДанныеЗаполнения = Неопределено Тогда
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			Если ДанныеЗаполнения.Свойство("ТипЦен") Тогда
				ТипЦен = ДанныеЗаполнения.ТипЦен;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДанныеЗаполнения)) Тогда
			ТипЦен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ТипЦен");
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТовар Из Товары Цикл
		
		// Заполним доп. поля для товарной строки
		Если ПустаяСтрока(СтрокаТовар.ИдентификаторТовара) Тогда
			СтрокаТовар.ИдентификаторТовара = Новый УникальныйИдентификатор;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ТоварнаяГруппа) Тогда
		ТоварнаяГруппа = МаркировкаТоваровСервер.ТоварнаяГруппа(Товары.ВыгрузитьКолонку("Номенклатура"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	КодыМаркировки.Очистить();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МаркировкаТоваровСервер.ПроверкаКодовМаркировкиПередЗаписью(ЭтотОбъект);
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	МаркировкаТоваровСервер.ПроверитьЗаполнениеКодовМаркировки(ЭтотОбъект, Отказ, , , Истина);
	МаркировкаТоваровСервер.НоменклатураСоответствуетТоварнойГруппе(ЭтотОбъект, Отказ);
	
	// Проверим, что заполненны данные о первичном документе 
	Если ЗначениеЗаполнено(ВидПервичногоДокумента)
		ИЛИ ЗначениеЗаполнено(ДатаПервичногоДокумента)
		ИЛИ ЗначениеЗаполнено(НомерПервичногоДокумента) Тогда
		ПроверитьЗаполнениеПервичногоДокумента(
			Отказ,
			ВидПервичногоДокумента,
			ДатаПервичногоДокумента,
			НомерПервичногоДокумента);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из Товары Цикл
		ПроверитьЗаполнениеПервичногоДокумента(
			Отказ,
			ТекущаяСтрока.ВидПервичногоДокумента,
			ТекущаяСтрока.ДатаПервичногоДокумента,
			ТекущаяСтрока.НомерПервичногоДокумента,
			ТекущаяСтрока.НомерСтроки);
	КонецЦикла;
	
	Если ПричинаВывода = Перечисления.ПричиныВыводаИзОборота.БезвозмезднаяПередача
		И НЕ Контрагент.Пустая() Тогда
		ИННКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ИНН");
		Если НЕ ЗначениеЗаполнено(ИННКонтрагента) Тогда
			ВывестиСообщение(НСтр("ru = 'У контрагента не указан ИНН.'"), ЭтотОбъект,,, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Проверим по параметрам импортера
	Если Документы.ВыводИзОборотаКодовМаркировки.ЗаполнятьИмпортера(ПричинаВывода) Тогда
		Отказ = Отказ ИЛИ НЕ Документы.ВыводИзОборотаКодовМаркировки.КорректныйИмпортер(Импортер, Истина);
	КонецЕсли;
	
	Если Документы.ВыводИзОборотаКодовМаркировки.ВыводитьАдресМестаВыбития(ПричинаВывода) Тогда
		Отказ = Отказ
			ИЛИ Документы.ВыводИзОборотаКодовМаркировки.ИдентификаторАдресаФИАС(АдресМестаВыбытия, Истина) = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Только для записанных документов определим статус из регистра при необходимости
	Если ЗначениеЗаполнено(Ссылка)
		И ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "Статус") = Неопределено Тогда
		ДанныеСтатусаДокумента = РегистрыСведений.СтатусыДокументовМаркировки.ПолучитьСтатусДокумента(Ссылка);
		ДополнительныеСвойства.Вставить("ИдентификаторДокумента", ДанныеСтатусаДокумента.ИдентификаторДокумента);
		ДополнительныеСвойства.Вставить("Статус", ДанныеСтатусаДокумента.Статус);
		ДополнительныеСвойства.Вставить("ОписаниеОшибки", ДанныеСтатусаДокумента.ОписаниеОшибки);
	КонецЕсли;
	
	// Разберем маркировку на состовляющие для поиска
	Для Каждого ТекущийКодМаркировки Из КодыМаркировки Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекущийКодМаркировки.КодМаркировки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураМаркировки = МенеджерОборудованияМаркировка.РазобратьШтриховойКодТовара(
			ТекущийКодМаркировки.КодМаркировки);
		Если СтруктураМаркировки.ТипИдентификатораТовара <>
			ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1") Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Код маркировки <%1> не разобран. Проверьте его корректность.'"),
				СокрЛП(ТекущийКодМаркировки.КодМаркировки)
			);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		МаркировкаТоваровСервер.ЗаписатьСтатусДокумента(Ссылка, ДополнительныеСвойства);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Удалим введенные в оборот коды маркировки
	НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
	НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейСостоянияКодовМаркировки.ОтменаПроведения();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиЗаполненияОбъекта

Функция ОбработкаЗаполнения_ЗаказНаряд(ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект, ДанныеЗаполнения,ТекстЗаполнения,СтандартнаяОбработка, "Товары")  Тогда
		
			Возврат Истина;
		
	КонецЕсли;
	
	Возврат ОбработкаЗаполненияЗаказНарядКорректировкаРеализации(
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"ЗаказНаряд"
	);
	
КонецФункции

Функция ОбработкаЗаполнения_КорректировкаРеализации(ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения,СтандартнаяОбработка,"Товары")Тогда
		
			Возврат Истина;  
			
	КонецЕсли;
	
	Возврат ОбработкаЗаполненияЗаказНарядКорректировкаРеализации(
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"КорректировкаРеализации"
	);
	
КонецФункции

Функция ОбработкаЗаполнения_КорректировкаПоступления(ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения,СтандартнаяОбработка,"Товары")Тогда
			Возврат Истина;
	КонецЕсли;
	
	ОбработкаЗаполненияЗаказНарядКорректировкаРеализации(
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"КорректировкаПоступления"
	);
	
	// Пройдемся по незаполненным количествам
	Для Каждого ТекущаяСтрока Из ДанныеЗаполнения.Товары Цикл
		
		КоличествоРазница = ТекущаяСтрока.КоличествоРазница * ТекущаяСтрока.Коэффициент;
		
		Если КоличествоРазница > 0
			ИЛИ НЕ ТекущаяСтрока.Номенклатура.ТипНоменклатуры.ВедетсяМаркировка Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиКМ =
			ДанныеЗаполнения.КодыМаркировки.НайтиСтроки(
				Новый Структура("ИдентификаторТовара", ТекущаяСтрока.ИдентификаторТовара));
		
		СтрокиКМВозврата =
			ДанныеЗаполнения.КодыМаркировки.НайтиСтроки(
				Новый Структура("ИдентификаторТовара,Возврат", ТекущаяСтрока.ИдентификаторТовара, Истина));
		
		Если (СтрокиКМ.Количество() - СтрокиКМВозврата.Количество()) < - КоличествоРазница Тогда
			
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ФормаСобственностиКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДанныеЗаполнения.Контрагент,
		"ФормаСобственности");
	СделкаКорректировки = Документы.КорректировкаПоступления.ПолучитьСделку(ДанныеЗаполнения);
	ХозОперацияСделки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		СделкаКорректировки,
		"ХозОперация");
	
	Если ФормаСобственностиКонтрагента = перечисления.ФормыСобственности.ЧастноеЛицо
		И ХозОперацияСделки = Справочники.ХозОперации.ПоступлениеТоваровКомиссия Тогда
		
		ПричинаВывода = Перечисления.ПричиныВыводаИзОборота.Возврат;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОбработкаЗаполнения_Чек(ДанныеЗаполнения,
	ТекстЗаполнения,
	СтандартнаяОбработка = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Хозоперация <> Справочники.ХозОперации.Чек Тогда
		ТекстСообщения = НСтр("ru = 'Вывод из оборота доступен только при вводе на основании чека продажи.'");
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ДанныеЗаполнения, ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект, ДанныеЗаполнения,ТекстЗаполнения,СтандартнаяОбработка, "Товары")  Тогда
		
			Возврат Истина;
		
	КонецЕсли;
	
	Возврат ОбработкаЗаполненияНаОсновании(ДанныеЗаполнения, ТекстЗаполнения);
	
КонецФункции

Функция ОбработкаЗаполнения_СписаниеТоваров(ДанныеЗаполнения,
	ТекстЗаполнения,
	СтандартнаяОбработка = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;

	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект, ДанныеЗаполнения,ТекстЗаполнения,СтандартнаяОбработка, "Товары")  Тогда
		
			Возврат Истина;
		
	КонецЕсли;

	
	Возврат ОбработкаЗаполненияНаОсновании(ДанныеЗаполнения, ТекстЗаполнения, "ЦенаРозничная");
	
КонецФункции
	
Функция ОбработкаЗаполнения_РеализацияТоваров(ДанныеЗаполнения,
	ТекстЗаполнения,
	СтандартнаяОбработка = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект, ДанныеЗаполнения,ТекстЗаполнения,СтандартнаяОбработка, "Товары")  Тогда
		
			Возврат Истина;
		
	КонецЕсли;
	
	Возврат ОбработкаЗаполненияНаОсновании(ДанныеЗаполнения, ТекстЗаполнения);
	
КонецФункции

Функция ОбработкаЗаполнения_ВозвратПоставщику(ДанныеЗаполнения,
	ТекстЗаполнения,
	СтандартнаяОбработка = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект, ДанныеЗаполнения,ТекстЗаполнения,СтандартнаяОбработка, "Товары")  Тогда
		
			Возврат Истина;
		
	КонецЕсли;
	
	ПричинаВывода = Перечисления.ПричиныВыводаИзОборота.Возврат;
	
	Возврат ОбработкаЗаполненияНаОсновании(ДанныеЗаполнения, ТекстЗаполнения);
	
КонецФункции

Функция ОбработкаЗаполненияЗаказНарядКорректировкаРеализации(ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		ТипДокументаОснования)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект, ДанныеЗаполнения,ТекстЗаполнения,СтандартнаяОбработка, "Товары")  Тогда
		
			Возврат Истина;
		
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		Если ДанныеЗаполнения.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
			ДатаДокумента = ДанныеЗаполнения.ДатаЗакрытия;
		ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.ДатаОкончания) Тогда
			ДатаДокумента = ДанныеЗаполнения.ДатаОкончания;
		Иначе
			ДатаДокумента = ДанныеЗаполнения.Дата;
		КонецЕсли;
	Иначе
		ДатаДокумента = ДанныеЗаполнения.Дата;
	КонецЕсли;
	
	ДатаВыводаИзОборота = ДатаДокумента;
	НаименованиеПервичногоДокумента = Строка(ДанныеЗаполнения.ХозОперация);
	ДатаПервичногоДокумента = ДатаДокумента;
	НомерПервичногоДокумента = ДанныеЗаполнения.Номер;
	
	// Запросом получим коды маркировок
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СостоянияКодовМаркировки.Номенклатура КАК Номенклатура,
	|	СостоянияКодовМаркировки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СостоянияКодовМаркировки.КодМаркировки КАК КодМаркировки,
	|	1 КАК Количество,
	|	ЕСТЬNULL(ДокументОснованиеТовары.Цена, 0) КАК Цена
	|ИЗ
	|	РегистрСведений.СостоянияКодовМаркировки КАК СостоянияКодовМаркировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ." + ТипДокументаОснования + ".Товары КАК ДокументОснованиеТовары
	|		ПО СостоянияКодовМаркировки.Номенклатура = ДокументОснованиеТовары.Номенклатура
	|			И СостоянияКодовМаркировки.ХарактеристикаНоменклатуры = ДокументОснованиеТовары.ХарактеристикаНоменклатуры
	|ГДЕ
	|	СостоянияКодовМаркировки.ДокументОснование = &Основание
	|	И СостоянияКодовМаркировки.Состояние В(&Состояние)
	|	И ДокументОснованиеТовары.Ссылка = &Основание";
	Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
	
	СписокСостояний = Новый Массив;
	СписокСостояний.Добавить(Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаРозничнаяПродажа);
	СписокСостояний.Добавить(
		Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаИспользованДляСобственныхНуждПредприятия
	);
	СписокСостояний.Добавить(Перечисления.СостоянияКодовМаркировки.ПередачаДругомуСобственнику);
	СписокСостояний.Добавить(Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаВозвращенФизическомуЛицу);
	
	Запрос.УстановитьПараметр("Состояние", СписокСостояний);
	
	ТаблицаМаркировки = Запрос.Выполнить().Выгрузить();
	
	ТаблицаНоменклатуры = ТаблицаМаркировки.Скопировать();
	ТаблицаНоменклатуры.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,Цена", "Количество");
	
	КодыМаркировки.Очистить();
	Товары.Очистить();
	
	// Заполним ТЧ Товары
	Для Каждого ТекущаяСтрока Из ТаблицаНоменклатуры Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		Документы.ВыводИзОборотаКодовМаркировки.ТоварыНоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока);
		НоваяСтрока.Цена = ТекущаяСтрока.Цена;
		НоваяСтрока.ИдентификаторТовара = Новый УникальныйИдентификатор;
	КонецЦикла;
	
	// Заполним ТЧ Коды Маркировки
	СтруктураПоискаСтроки = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
	Для Каждого ТекущаяСтрока Из ТаблицаМаркировки Цикл
		НоваяСтрока = КодыМаркировки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаСтроки, ТекущаяСтрока);
		НоваяСтрока.ИдентификаторТовара = Товары.НайтиСтроки(СтруктураПоискаСтроки)[0].ИдентификаторТовара;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ОбработкаЗаполненияНаОсновании(ДанныеЗаполнения, ТекстЗаполнения, РеквизитЦены = "Цена")
	
	ДатаВыводаИзОборота = ДанныеЗаполнения.Дата;
	НаименованиеПервичногоДокумента = Строка(ДанныеЗаполнения.ХозОперация);
	ДатаПервичногоДокумента = ДанныеЗаполнения.Дата;
	НомерПервичногоДокумента = ДанныеЗаполнения.Номер; 
	ВидПервичногоДокумента = Перечисления.ВидыПервичныхДокументов.Прочее;
	
	// Загрузим все коды маркировоки
	КодыМаркировки.Загрузить(ДанныеЗаполнения.КодыМаркировки.Выгрузить());
	
	// Пройдемся по ТЧ
	СтруктураПоиска = Новый Структура("ИдентификаторТовара");
	
	Для Каждого ТекущаяСтрока Из ДанныеЗаполнения.Товары Цикл
		
		СтруктураПоиска.ИдентификаторТовара = ТекущаяСтрока.ИдентификаторТовара;
		НайденныеСтроки = КодыМаркировки.НайтиСтроки(СтруктураПоиска);
		
		КоличествоКодов = НайденныеСтроки.Количество();
		
		// У данной номенклатуры нет кодов маркировки
		// не будем ее выгружать
		Если КоличествоКодов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		Документы.ВыводИзОборотаКодовМаркировки.ТоварыНоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока);
		НоваяСтрока.Цена = ТекущаяСтрока[РеквизитЦены];
		Коэффициент = ?(НоваяСтрока.Коэффициент = 0, 1, НоваяСтрока.Коэффициент);
		Если КоличествоКодов <> НоваяСтрока.Количество * Коэффициент Тогда
			НоваяСтрока.Количество = Окр(КоличествоКодов / Коэффициент, 3);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьЗаполнениеПервичногоДокумента(
		Отказ,
		ВидДокумента,
		ДатаДокумента,
		НомерДокумента,
		НомерСтроки = Неопределено)
		
	Если Документы.ВыводИзОборотаКодовМаркировки.НеПередаватьПервичныйДокумент(ПричинаВывода) Тогда
		Возврат;
	КонецЕсли;
	
	ПоляЗаполнения = Новый Массив;
	Если НЕ ЗначениеЗаполнено(ВидДокумента) Тогда
		ПоляЗаполнения.Добавить(НСтр("ru = 'Вид первичного документа'"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ПоляЗаполнения.Добавить(НСтр("ru = 'Дата первичного документа'"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НомерДокумента) Тогда
		ПоляЗаполнения.Добавить(НСтр("ru = 'Номер первичного документа'"));
	КонецЕсли;
	
	// Все заполнены
	Если ПоляЗаполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Работаем с реквизитами шапки
	Если НомерСтроки = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Не заполнены реквизиты первичного документа: %1.'"),
				СтрСоединить(ПоляЗаполнения, ", ")
			),
			ЭтотОбъект,,,
			Отказ
		);
		Возврат;
	КонецЕсли;
	
	ЗаполненыДанныеВШапке =
		ЗначениеЗаполнено(ВидПервичногоДокумента)
		И ЗначениеЗаполнено(ДатаПервичногоДокумента)
		И ЗначениеЗаполнено(НомерПервичногоДокумента);
	
	Если ПоляЗаполнения.Количество() = 3 Тогда
		Если ЗаполненыДанныеВШапке Тогда
			// Реквизиты указаны в шапке
			Возврат; 
		КонецЕсли;
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Товары. Строка %1. Не заполнены данные о первичном документе.'"), 
					Строка(НомерСтроки)
				),
				ЭтотОбъект,,,
				Отказ
			);
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.СообщитьПользователю(
		СтрШаблон(
			НСтр("ru = 'Товары. Строка %1. Не заполнены реквизиты первичного документа в строке: %2.'"),
			СтрСоединить(ПоляЗаполнения, ", ")
		),
		ЭтотОбъект,,,
		Отказ
	);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

