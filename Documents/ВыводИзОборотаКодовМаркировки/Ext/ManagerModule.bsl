// Модуль менеджера документа "Вывод из оборота кодов маркировки".

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.   
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
// Возвращаемое значение:
//  Структура - Возвращаем сведения об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();

	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;

	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	Если Объект.ПричинаВывода = Перечисления.ПричиныВыводаИзОборота.ДистанционнаяПродажа
		ИЛИ Объект.ПричинаВывода = Перечисления.ПричиныВыводаИзОборота.ПродажаПоОбразцам
		ИЛИ Объект.ПричинаВывода = Перечисления.ПричиныВыводаИзОборота.РозничнаяПродажа
		ИЛИ Объект.ПричинаВывода = Перечисления.ПричиныВыводаИзОборота.ПродажаЧерезВендинговыйАппарат
		ИЛИ Объект.ПричинаВывода = Перечисления.ПричиныВыводаИзОборота.Фасовка Тогда
		ОбязательныеРеквизиты.Добавить("Товары.Цена");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("КодыМаркировки.КодМаркировки");
	
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ДатаВыводаИзОборота");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("Статус");
	ОбязательныеРеквизиты.Добавить("ПричинаВывода");
	ОбязательныеРеквизиты.Добавить("ТоварнаяГруппа");
	
	Если Объект.ВидПервичногоДокумента = Перечисления.ВидыПервичныхДокументов.Прочее Тогда
		ОбязательныеРеквизиты.Добавить("НаименованиеПервичногоДокумента");
	КонецЕсли;
	
	Если Объект.ПричинаВывода = Перечисления.ПричиныВыводаИзОборота.БезвозмезднаяПередача Тогда
		ОбязательныеРеквизиты.Добавить("Контрагент");
	КонецЕсли;
	
	Если УказыватьОписаниеПричиныВывода(Объект.ПричинаВывода) Тогда
		ОбязательныеРеквизиты.Добавить("ОписаниеПричины");
	КонецЕсли; 
	
	Если ВыводитьИдентификаторГосКонтракта(Объект.ПричинаВывода) Тогда
		ОбязательныеРеквизиты.Добавить("ИдентификаторГосударственногоКонтракта");
	КонецЕсли;
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	УникальныеРеквизиты = Новый Структура();
	
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	
	УникальныеРеквизиты.Вставить("Товары", УникальныеТовары);
	
	УникальныеКодыМаркировки = Новый Массив;
	УникальныеКодыМаркировки.Добавить("КодМаркировки");
	УникальныеРеквизиты.Вставить("КодыМаркировки", УникальныеКодыМаркировки);
	
	Возврат УникальныеРеквизиты;
	
КонецФункции

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	КонтролируемыеРеквизиты = Новый Структура();
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Структура - Содержит набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Причина вывода".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПричинаВыводаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Заполним контрагента
	Если Документы.ВыводИзОборотаКодовМаркировки.ЗаполнятьКонтрагента(Объект.ПричинаВывода)
		И Объект.Контрагент.Пустая()
		И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ИмяРеквизита = "";
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
			// Получим контрагента из Сводного ремонтного заказа
			ИмяРеквизита = "СводныйРемонтныйЗаказ.Заказчик";
		ИначеЕсли ЕстьРеквизит(Объект.ДокументОснование, "Контргент") Тогда
			ИмяРеквизита = "Контрагент";
		КонецЕсли;
		Если НЕ ПустаяСтрока(ИмяРеквизита) Тогда
			Объект.Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Объект.ДокументОснование,
				ИмяРеквизита);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	Если ПустаяСтрока(Строка.ИдентификаторТовара) Тогда
		Строка.ИдентификаторТовара = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
КонецПроцедуры

// Производит формирование структуры с доступностью и видимостью команд печати объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
// 	Структура - произвольные параметры, переданные при вызове команды печати.
//
Функция ПолучитьПараметрыКомандПечати(Объект) Экспорт
	
	ПараметрыКоманд = Новый Соответствие;
	Возврат ПараметрыКоманд;
	
КонецФункции

// Обработчик события формирования печатной формы.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - информация для заполнения письма при отправке печатной формы электронной почтой.
//                                     Содержит следующие поля:
//    ** Получатель - Строка, СписокЗначений, Массив - список получателей письма;
//    ** Тема - Строка - Тема письма,
//    ** Текст - Строка - Текст письма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
КонецПроцедуры

#Область ОбработчикиОбновления

// Возвращает все документы, в которых присутствуют коды маркировки.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка результата запроса, содержащая требуемые документы.
//
Функция ДокументыСКодамиМаркировки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыводИзОборотаКодовМаркировкиКодыМаркировки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВыводИзОборотаКодовМаркировки.КодыМаркировки КАК ВыводИзОборотаКодовМаркировкиКодыМаркировки
	|ГДЕ
	|	ВыводИзОборотаКодовМаркировкиКодыМаркировки.КодМаркировки <> """"";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Процедура зачистки криптохвостов кодов маркировки.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ВыводИзОборотаКодовМаркировки - документ, для которого выполняется действие.
//
Процедура ОтрезатьКриптохвосты(ДокументОбъект) Экспорт
	
	Для Каждого СтрокаТоваров Из ДокументОбъект.КодыМаркировки Цикл
		СтрокаТоваров.КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(СтрокаТоваров.КодМаркировки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ВыводИзОборотаКодовМаркировки);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получение данных документа для вывода из оборота
//
// Параметры:
//  Объект	 - ДокументСсылка.ВыводИзОборотаКодовМаркировки - Документ, для которого получаем данные
// 
// Возвращаемое значение:
//  Структура - Данные документа в формате для отправки запроса
//
Функция ДанныеВыводаИзОборотаКодовМаркировки(Объект, Сообщение) Экспорт
	
	ТекстСообщения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВыводИзОборотаКодовМаркировки.Организация.ИНН КАК ОрганизацияИНН,
	               |	ВыводИзОборотаКодовМаркировки.ПричинаВывода КАК ПричинаВывода,
	               |	ВыводИзОборотаКодовМаркировки.ВидПервичногоДокумента КАК ВидПервичногоДокумента,
	               |	ВыводИзОборотаКодовМаркировки.ДатаВыводаИзОборота КАК ДатаВыводаИзОборота,
	               |	ВыводИзОборотаКодовМаркировки.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента,
	               |	ВыводИзОборотаКодовМаркировки.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
	               |	ВыводИзОборотаКодовМаркировки.НаименованиеПервичногоДокумента КАК НаименованиеПервичногоДокумента,
	               |	ЕСТЬNULL(ВыводИзОборотаКодовМаркировки.Контрагент.ИНН, """") КАК КонтрагентИНН,
	               |	ВыводИзОборотаКодовМаркировки.ОписаниеПричины КАК ОписаниеПричины,
	               |	ЕСТЬNULL(ВыводИзОборотаКодовМаркировки.Импортер.СтранаРегистрации.Код, """") КАК СтранаРегистрацииКод,
	               |	ЕСТЬNULL(ВыводИзОборотаКодовМаркировки.Импортер.НалоговыйНомер, """") КАК НалоговыйНомер,
	               |	ВыводИзОборотаКодовМаркировки.АдресМестаВыбытия КАК АдресМестаВыбытия,
	               |	ВыводИзОборотаКодовМаркировки.ИдентификаторГосударственногоКонтракта КАК ИдентификаторГосударственногоКонтракта
	               |ИЗ
	               |	Документ.ВыводИзОборотаКодовМаркировки КАК ВыводИзОборотаКодовМаркировки
	               |ГДЕ
	               |	ВыводИзОборотаКодовМаркировки.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВыводИзОборотаКодовМаркировкиТовары.ИдентификаторТовара КАК ИдентификаторТовара,
	               |	ВыводИзОборотаКодовМаркировкиТовары.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента,
	               |	ВыводИзОборотаКодовМаркировкиТовары.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
	               |	ВыводИзОборотаКодовМаркировкиТовары.ВидПервичногоДокумента КАК ВидПервичногоДокумента,
	               |	ВыводИзОборотаКодовМаркировкиТовары.НаименованиеПервичногоДокумента КАК НаименованиеПервичногоДокумента,
	               |	ВыводИзОборотаКодовМаркировкиТовары.Цена КАК Цена
	               |ПОМЕСТИТЬ ТЧПервичныеДокументы
	               |ИЗ
	               |	Документ.ВыводИзОборотаКодовМаркировки.Товары КАК ВыводИзОборотаКодовМаркировкиТовары
	               |ГДЕ
	               |	ВыводИзОборотаКодовМаркировкиТовары.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВыводИзОборотаКодовМаркировкиКодыМаркировки.ИдентификаторТовара КАК ИдентификаторТовара,
	               |	ВыводИзОборотаКодовМаркировкиКодыМаркировки.КодМаркировки КАК КодМаркировки
	               |ПОМЕСТИТЬ ТаблицаКодовМаркировок
	               |ИЗ
	               |	Документ.ВыводИзОборотаКодовМаркировки.КодыМаркировки КАК ВыводИзОборотаКодовМаркировкиКодыМаркировки
	               |ГДЕ
	               |	ВыводИзОборотаКодовМаркировкиКодыМаркировки.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаКодовМаркировок.КодМаркировки КАК КодМаркировки,
	               |	ТЧПервичныеДокументы.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента,
	               |	ТЧПервичныеДокументы.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
	               |	ТЧПервичныеДокументы.ВидПервичногоДокумента КАК ВидПервичногоДокумента,
	               |	ТЧПервичныеДокументы.НаименованиеПервичногоДокумента КАК НаименованиеПервичногоДокумента,
	               |	ТЧПервичныеДокументы.Цена КАК Цена
	               |ИЗ
	               |	ТЧПервичныеДокументы КАК ТЧПервичныеДокументы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКодовМаркировок КАК ТаблицаКодовМаркировок
	               |		ПО ТЧПервичныеДокументы.ИдентификаторТовара = ТаблицаКодовМаркировок.ИдентификаторТовара";
	Запрос.УстановитьПараметр("Ссылка", Объект);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ШапкаДокумента = ПакетЗапроса[0].Выбрать();
	ШапкаДокумента.Следующий();
	
	Если НеиспользуемаяПричинаВывода(ШапкаДокумента.ПричинаВывода) Тогда
		Сообщение = НСтр("ru = 'Указанная причина вывода из оборота больше не используется.'");
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаДокумента = ПакетЗапроса[3].Выбрать();
	
	// Заполним шапку запроса
	ШапкаДатаПервичногоДокумента = Формат(ШапкаДокумента.ДатаПервичногоДокумента, "ДФ=dd.MM.yyyy");
	ШапкаНомерПервичногоДокумента = ШапкаДокумента.НомерПервичногоДокумента;     
	ШапкаВидПервичногоДокумента = ОбменССистемойМаркировкиСервер.ВидПервичногоДокумента(ШапкаДокумента.ВидПервичногоДокумента);
	Если ШапкаДокумента.ВидПервичногоДокумента = Перечисления.ВидыПервичныхДокументов.Прочее Тогда
		ШапкаНаименованиеПервичногоДокумента = СокрЛП(ШапкаДокумента.НаименованиеПервичногоДокумента);
	Иначе
		ШапкаНаименованиеПервичногоДокумента = "";
	КонецЕсли;
	
	НеЗаполнятьПервичныйДокумент = НеПередаватьПервичныйДокумент(ШапкаДокумента.ПричинаВывода);
	ПричинаВывода = ОбменССистемойМаркировкиСервер.ПричинаВыводаИзОборота(ШапкаДокумента.ПричинаВывода);
	ТекстСообщения.Вставить("action", ПричинаВывода);
	ТекстСообщения.Вставить("action_date", Формат(ШапкаДокумента.ДатаВыводаИзОборота, "ДФ=dd.MM.yyyy"));
	ТекстСообщения.Вставить("document_date", "");
	ТекстСообщения.Вставить("document_number", "");
	
	ТекстСообщения.Вставить("document_type", "");
	ТекстСообщения.Вставить("inn", СокрЛП(ШапкаДокумента.ОрганизацияИНН));
	
	ЗаполнитьДополнительныеДанныеДокумента(ШапкаДокумента, ТекстСообщения);
	ПередаватьЦену = ВидимостьЦеныТоваров(ШапкаДокумента.ПричинаВывода);
	
	// Табличная часть с КМ
	ТекстСообщения.Вставить("products", Новый Массив);
	
	Пока СтрокаДокумента.Следующий() Цикл
		
		ТекстОшибки = "";
		
		КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(
			СтрокаДокумента.КодМаркировки,
			ТекстОшибки,
			Ложь);
		
		// Проверим, что это КМ
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаКМ = Новый Структура;
		СтрокаКМ.Вставить("cis", КодМаркировки);
		
		Если НеЗаполнятьПервичныйДокумент Тогда
			
			СтрокаКМ.Вставить("primary_document_date", "");
			СтрокаКМ.Вставить("primary_document_number", "");
			СтрокаКМ.Вставить("primary_document_type", "");
			СтрокаКМ.Вставить("primary_document_custom_name", "");
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаДокумента.ВидПервичногоДокумента) Тогда
			
			ВидПервичногоДокумента = ОбменССистемойМаркировкиСервер.ВидПервичногоДокумента(
				СтрокаДокумента.ВидПервичногоДокумента);
			
			СтрокаКМ.Вставить("primary_document_date", Формат(СтрокаДокумента.ДатаПервичногоДокумента, "ДФ=dd.MM.yyyy"));
			СтрокаКМ.Вставить("primary_document_number", СокрЛП(СтрокаДокумента.НомерПервичногоДокумента));
			СтрокаКМ.Вставить("primary_document_type", ВидПервичногоДокумента);
			
			Если СтрокаДокумента.ВидПервичногоДокумента = Перечисления.ВидыПервичныхДокументов.Прочее Тогда
				СтрокаКМ.Вставить("primary_document_custom_name", СокрЛП(СтрокаДокумента.НаименованиеПервичногоДокумента));
			КонецЕсли;
			
		Иначе
			
			СтрокаКМ.Вставить("primary_document_date", ШапкаДатаПервичногоДокумента);
			СтрокаКМ.Вставить("primary_document_number", ШапкаНомерПервичногоДокумента);
			СтрокаКМ.Вставить("primary_document_type", ШапкаВидПервичногоДокумента);
			СтрокаКМ.Вставить("primary_document_custom_name", ШапкаНаименованиеПервичногоДокумента);
			
		КонецЕсли;
		
		Если ПередаватьЦену Тогда
			Цена = СтрЗаменить(Строка(СтрокаДокумента.Цена * 100), Символы.НПП, "");
			СтрокаКМ.Вставить("product_cost", Цена);
		КонецЕсли;
		
		ТекстСообщения.products.Добавить(СтрокаКМ);
		
	КонецЦикла;
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция ЗапросДокумента(Объект, ПараметрыОбмена, Сообщение) Экспорт
	
	СтруктураСообщения = ДанныеВыводаИзОборотаКодовМаркировки(Объект, Сообщение);
	
	Возврат СтруктураСообщения;
	
КонецФункции

Процедура ЗаполнитьДополнительныеДанныеДокумента(ШапкаДокумента, ТекстСообщения)
	
	// ИНН покупателя устанавливаем для ограниченных причин вывода
	Если Документы.ВыводИзОборотаКодовМаркировки.ЗаполнятьКонтрагента(ШапкаДокумента.ПричинаВывода) Тогда
		ТекстСообщения.Вставить("buyer_inn", ШапкаДокумента.КонтрагентИНН);
	КонецЕсли;
	
	// Укажем описание причины
	Если УказыватьОписаниеПричиныВывода(ШапкаДокумента.ПричинаВывода) Тогда
		ТекстСообщения.Вставить("withdrawal_type_other", ШапкаДокумента.ОписаниеПричины);
	КонецЕсли;
	
	// Укажем данные импортера
	Если ЗаполнятьИмпортера(ШапкаДокумента.ПричинаВывода) Тогда
		ДанныеИмортера = Новый Структура("СтранаРегистрацииКод,НалоговыйНомер");
		ЗаполнитьЗначенияСвойств(ДанныеИмортера, ШапкаДокумента);
		Если КорректныйИмпортер(ДанныеИмортера) Тогда
			ТекстСообщения.Вставить("destination_country_code", ШапкаДокумента.СтранаРегистрацииКод);
			ТекстСообщения.Вставить("importer_id", ШапкаДокумента.НалоговыйНомер);
		КонецЕсли;
	КонецЕсли;
	
	// Добавим адрес выбытия
	Если ВыводитьАдресМестаВыбития(ШапкаДокумента.ПричинаВывода) Тогда
		ИдентификаторАдреса = ИдентификаторАдресаФИАС(ШапкаДокумента.АдресМестаВыбытия);
		ТекстСообщения.Вставить("fias_id", Строка(ИдентификаторАдреса));
	КонецЕсли;
	
	// Добавим гос. контракт
	Если ВыводитьИдентификаторГосКонтракта(ШапкаДокумента.ПричинаВывода) Тогда
		ТекстСообщения.Вставить("state_contract_id", ШапкаДокумента.ИдентификаторГосударственногоКонтракта);
	КонецЕсли;
	
КонецПроцедуры

Функция НеиспользуемаяПричинаВывода(ПричинаВывода)
	
	Возврат ПричинаВывода = Перечисления.ПричиныВыводаИзОборота.Ликвидация;
	
КонецФункции

// Проверяет возможность вывода контрагента в документ
//
// Параметры:
//  ПричинаВывода	 - ПеречислениеСсылка.ПричиныВыводаИзОборота - Причина вывода документа.
// 
// Возвращаемое значение:
//  Булево - Результат проверки причины вывода.
//
Функция ЗаполнятьКонтрагента(ПричинаВывода) Экспорт
	
	СписокПричинВывода = Новый Массив;
	СписокПричинВывода.Добавить(Перечисления.ПричиныВыводаИзОборота.БезвозмезднаяПередача);
	СписокПричинВывода.Добавить(Перечисления.ПричиныВыводаИзОборота.ДляСобственныхНужд);
	СписокПричинВывода.Добавить(Перечисления.ПричиныВыводаИзОборота.ИспользованиеДляПроизводственныхЦелей);
	
	Возврат СписокПричинВывода.Найти(ПричинаВывода) <> Неопределено;
	
КонецФункции

// Проверяет возможность вывода описания причины в документ
//
// Параметры:
//  ПричинаВывода	 - ПеречислениеСсылка.ПричиныВыводаИзОборота - Причина вывода документа.
// 
// Возвращаемое значение:
//  Булево - Результат проверки причины вывода.
//
Функция УказыватьОписаниеПричиныВывода(ПричинаВывода) Экспорт
	
	Возврат ПричинаВывода = Перечисления.ПричиныВыводаИзОборота.Другое;
	
КонецФункции

// Проверяет возможность вывода импортера в документ
//
// Параметры:
//  ПричинаВывода	 - ПеречислениеСсылка.ПричиныВыводаИзОборота - Причина вывода документа.
// 
// Возвращаемое значение:
//  Булево - Результат проверки причины вывода.
//
Функция ЗаполнятьИмпортера(ПричинаВывода) Экспорт
	
	Возврат ПричинаВывода = Перечисления.ПричиныВыводаИзОборота.ЭкспортЕАЭС;
	
КонецФункции

// Проверяет данные об импортере документа.
//
// Параметры:
//  Импортер			 - СправочникСсылка.Контрагенты - Проверяемый контргаент.
//  ВыводитьСообщение	 - Булево - Выводить ошибку при ее наличии.
// 
// Возвращаемое значение:
//  Булево - Результат проверки испортера.
//
Функция КорректныйИмпортер(Импортер, ВыводитьСообщение = Ложь) Экспорт
	
	ДанныеИмпортераКорректны = Истина;
	ТекстСообщения = "";
	
	Если НЕ ЗначениеЗаполнено(Импортер) Тогда
		Возврат ДанныеИмпортераКорректны;
	КонецЕсли;
	
	Если ТипЗнч(Импортер) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПараметрыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Импортер, "СтранаРегистрации.Код,НалоговыйНомер");
	Иначе
		ПараметрыКонтрагента = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Импортер);
	КонецЕсли;
	
	// Заполним соответствия
	КодСтраныИДлинаИНН = Новый Соответствие;
	КодСтраныИДлинаИНН.Вставить("112",  9);
	КодСтраныИДлинаИНН.Вставить("398", 12);
	КодСтраныИДлинаИНН.Вставить("417", 14);
	КодСтраныИДлинаИНН.Вставить("051",  8); 
	
	НайденныйИНН = КодСтраныИДлинаИНН.Получить(ПараметрыКонтрагента.СтранаРегистрацииКод);
	
	Если НайденныйИНН = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Указанный импортер не из страны-участника ЕАЭС'");
		ДанныеИмпортераКорректны = Ложь;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыКонтрагента.НалоговыйНомер)
		И СтрДлина(ПараметрыКонтрагента.НалоговыйНомер) <> НайденныйИНН Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Указанный налоговый номер у импортера должен сотоять из %1 цифр'"),
			Строка(НайденныйИНН));
		ДанныеИмпортераКорректны = Ложь;
	КонецЕсли;
	
	Если ВыводитьСообщение И НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ВывестиСообщение(ТекстСообщения);
	КонецЕсли;
	
	Возврат ДанныеИмпортераКорректны;
	
КонецФункции

// Проверяет необходимость заполнения первичного документа
//
// Параметры:
//  ПричинаВывода	 - ПеречислениеСсылка.ПричиныВыводаИзОборота - Причина вывода документа.
// 
// Возвращаемое значение:
//  Булево - Результат проверки причины вывода.
//
Функция НеПередаватьПервичныйДокумент(ПричинаВывода) Экспорт
	
	Возврат (ПричинаВывода = Перечисления.ПричиныВыводаИзОборота.ЭкспортЕАЭС
		ИЛИ ПричинаВывода = Перечисления.ПричиныВыводаИзОборота.ПродажаПоГосКонтракту
		ИЛИ ПричинаВывода = Перечисления.ПричиныВыводаИзОборота.ПродажаПоСделкеСГосТайной);
	
КонецФункции

// Проверяет возможносьт ввода адреса места выбытия
//
// Параметры:
//  ПричинаВывода	 - ПеречислениеСсылка.ПричиныВыводаИзОборота - Причина вывода документа.
// 
// Возвращаемое значение:
//  Булево - Результат проверки причины вывода.
//
Функция ВыводитьАдресМестаВыбития(ПричинаВывода) Экспорт 
	
	СписокПричинВывода = Новый Массив;
	СписокПричинВывода.Добавить(Перечисления.ПричиныВыводаИзОборота.Возврат);
	СписокПричинВывода.Добавить(Перечисления.ПричиныВыводаИзОборота.ДистанционнаяПродажа);
	СписокПричинВывода.Добавить(Перечисления.ПричиныВыводаИзОборота.Другое);
	СписокПричинВывода.Добавить(Перечисления.ПричиныВыводаИзОборота.Конфискация);
	СписокПричинВывода.Добавить(Перечисления.ПричиныВыводаИзОборота.ПродажаПоОбразцам);
	СписокПричинВывода.Добавить(Перечисления.ПричиныВыводаИзОборота.РозничнаяПродажа);
	СписокПричинВывода.Добавить(Перечисления.ПричиныВыводаИзОборота.Уничтожение);
	СписокПричинВывода.Добавить(Перечисления.ПричиныВыводаИзОборота.Утилизация);
	СписокПричинВывода.Добавить(Перечисления.ПричиныВыводаИзОборота.УтратаПовреждение);
	СписокПричинВывода.Добавить(Перечисления.ПричиныВыводаИзОборота.ОтзывТоваровСРынка);
	СписокПричинВывода.Добавить(Перечисления.ПричиныВыводаИзОборота.ПродажаЧерезВендинговыйАппарат);
	СписокПричинВывода.Добавить(Перечисления.ПричиныВыводаИзОборота.ИстечениеСрокаГодности);
	
	Возврат СписокПричинВывода.Найти(ПричинаВывода) <> Неопределено;
	
КонецФункции

// Получение идентификатора ФИАС для отправки документа
//
// Параметры:
//  АдресМестаВыбытия	 - Строка - Значение адреса места выбытия.
//  ВыводитьСообщение	 - Булево - Вывдить ошибку при ее обнаружении.
// 
// Возвращаемое значение:
//  Строка - Идентификатор ФИАС.
//
Функция ИдентификаторАдресаФИАС(АдресМестаВыбытия, ВыводитьСообщение = Ложь) Экспорт
	
	Если ПустаяСтрока(АдресМестаВыбытия) Тогда
		Возврат "";
	КонецЕсли;
	
	Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(АдресМестаВыбытия) Тогда
		Возврат АдресМестаВыбытия;
	КонецЕсли;
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(АдресМестаВыбытия) Тогда
		ДанныеАдреса = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(
			АдресМестаВыбытия,
			Перечисления.ТипыКонтактнойИнформации.Адрес);
		НаселенныйПунктДетально = РаботаСАдресами.ПодготовитьАдресДляВвода(ДанныеАдреса);
	Иначе
		РезультатыЧтения = Новый Структура;
		XDTOКонтактная = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияИзXML(
			АдресМестаВыбытия,
			Перечисления.ТипыКонтактнойИнформации.Адрес,
			РезультатыЧтения);
		Если РезультатыЧтения.Свойство("ТекстОшибки") Тогда
			Возврат "";
		КонецЕсли;
		ДанныеАдреса = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(
			XDTOКонтактная,
			Перечисления.ТипыКонтактнойИнформации.Адрес);
		НаселенныйПунктДетально = РаботаСАдресами.ПодготовитьАдресДляВвода(ДанныеАдреса);
	КонецЕсли;
	
	ИдентификаторАдреса = Неопределено;
	Если ЗначениеЗаполнено(НаселенныйПунктДетально.houseId) Тогда
		ИдентификаторАдреса = НаселенныйПунктДетально.houseId;
	ИначеЕсли ЗначениеЗаполнено(НаселенныйПунктДетально.streetId) Тогда
		ИдентификаторАдреса = НаселенныйПунктДетально.streetId;
	КонецЕсли;
	
	Если ВыводитьСообщение
		И НЕ ЗначениеЗаполнено(ИдентификаторАдреса) Тогда
		ВывестиСообщение(НСтр("ru = 'Указанный адрес места выбытия не соответствует данным ФИАС.'"));
	КонецЕсли;
	
	Возврат ИдентификаторАдреса;
	
КонецФункции

// Проверяет возможность вывода гос. контракта в документ
//
// Параметры:
//  ПричинаВывода	 - ПеречислениеСсылка.ПричиныВыводаИзОборота - Причина вывода документа.
// 
// Возвращаемое значение:
//  Булево - Результат проверки причины вывода.
//
Функция ВыводитьИдентификаторГосКонтракта(ПричинаВывода) Экспорт
	
	Возврат (ПричинаВывода = Перечисления.ПричиныВыводаИзОборота.ПродажаПоГосКонтракту
		ИЛИ ПричинаВывода = Перечисления.ПричиныВыводаИзОборота.ПродажаПоСделкеСГосТайной);
	
КонецФункции

Функция ВидимостьЦеныТоваров(ПричинаВывода) Экспорт
	
	ПричиныВыводаИзОборота = Новый Массив;
	ПричиныВыводаИзОборота.Добавить(Перечисления.ПричиныВыводаИзОборота.ДистанционнаяПродажа);
	ПричиныВыводаИзОборота.Добавить(Перечисления.ПричиныВыводаИзОборота.ПродажаПоОбразцам);
	ПричиныВыводаИзОборота.Добавить(Перечисления.ПричиныВыводаИзОборота.РозничнаяПродажа);
	ПричиныВыводаИзОборота.Добавить(Перечисления.ПричиныВыводаИзОборота.БезвозмезднаяПередача);
	ПричиныВыводаИзОборота.Добавить(Перечисления.ПричиныВыводаИзОборота.ПродажаЧерезВендинговыйАппарат);
	ПричиныВыводаИзОборота.Добавить(Перечисления.ПричиныВыводаИзОборота.ИспользованиеДляПроизводственныхЦелей);
	ПричиныВыводаИзОборота.Добавить(Перечисления.ПричиныВыводаИзОборота.ДляСобственныхНужд);
	ПричиныВыводаИзОборота.Добавить(Перечисления.ПричиныВыводаИзОборота.Фасовка);
	
	Возврат ПричиныВыводаИзОборота.Найти(ПричинаВывода) <> Неопределено;
	
КонецФункции

Процедура ЗаполнитьСтатусыКодовМаркировки(Ссылка, Отказ, СтатусДокумента = Неопределено) Экспорт

	Если СтатусДокумента = Неопределено Тогда 
		ДанныеСтатусаДокумента 	= РегистрыСведений.СтатусыДокументовМаркировки.ПолучитьСтатусДокумента(Ссылка);
		СтатусДокумента 		= ДанныеСтатусаДокумента.Статус;
	КонецЕсли;
	
	Если НЕ Отказ И СтатусДокумента = Перечисления.СтатусыДокументовМаркировки.Выполнен Тогда
		ЭтотОбъект = Ссылка.ПолучитьОбъект();		
		// Отменим записи состояний документа
		НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
		НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейСостоянияКодовМаркировки.ОтменаПроведения();
		
		ТаблицаМаркировки = НаборЗаписейСостоянияКодовМаркировки.ТаблицаКодовМаркировки();
		
		ТаблицаМаркировки.Колонки.Добавить("GTIN", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
		ТаблицаМаркировки.Колонки.Добавить("СерийныйНомер", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
		
		// Разберем маркировку на состовляющие для поиска
		Для Каждого ТекущийКодМаркировки Из ТаблицаМаркировки Цикл
			
			Если НЕ ЗначениеЗаполнено(ТекущийКодМаркировки.КодМаркировки) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураМаркировки =
				МенеджерОборудованияМаркировка.РазобратьШтриховойКодТовара(ТекущийКодМаркировки.КодМаркировки);
			
			Если СтруктураМаркировки.ТипИдентификатораТовара <>
				ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1") Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущийКодМаркировки.GTIN = СтруктураМаркировки.GTIN;
			ТекущийКодМаркировки.СерийныйНомер = СтруктураМаркировки.СерийныйНомер;
			
		КонецЦикла;
		
		ТекущиеСтатусыМаркировки =
			РегистрыСведений.СостоянияКодовМаркировки.ТекущиеСтатусыКодовМаркировки(ТаблицаМаркировки, Ссылка.МоментВремени());
		
		ВыведенныеТовары = Новый Массив;
		СостоянияВОбороте = Перечисления.СостоянияКодовМаркировки.СостоянияВводаВОборотМаркировки();
		
		Для Каждого ТекущаяСтрока Из ТекущиеСтатусыМаркировки Цикл
			Если СостоянияВОбороте.Найти(ТекущаяСтрока.Состояние) = Неопределено Тогда
				ВыведенныеТовары.Добавить(ТекущаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекущаяСтрока Из ВыведенныеТовары Цикл
			ТекущиеСтатусыМаркировки.Удалить(ТекущаяСтрока);
		КонецЦикла;
		
		// Изменим состояние маркировки, которые ранее не были выведены
		НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
		НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейСостоянияКодовМаркировки.Организация = Ссылка.Организация;
		НаборЗаписейСостоянияКодовМаркировки.РезультатЗапросаПоКодамМаркировки = ТекущиеСтатусыМаркировки;
		НаборЗаписейСостоянияКодовМаркировки.Состояние = СостояниеКодаМаркировки(Ссылка);
		НаборЗаписейСостоянияКодовМаркировки.РежимПроведения = РежимПроведенияДокумента.Неоперативный;
		Если НЕ НаборЗаписейСостоянияКодовМаркировки.СостояниеКодовМаркировки() Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СостояниеКодаМаркировки(Ссылка)
	
	Результат = Неопределено;
	
	СостоянияКодовМаркировки = Новый Соответствие();
	СостоянияКодовМаркировки.Вставить(
		Перечисления.ПричиныВыводаИзОборота.Возврат,
		Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаВозвращенФизическомуЛицу);
	СостоянияКодовМаркировки.Вставить(
		Перечисления.ПричиныВыводаИзОборота.ДляСобственныхНужд,
		Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаИспользованДляСобственныхНуждПредприятия);
	СостоянияКодовМаркировки.Вставить(
		Перечисления.ПричиныВыводаИзОборота.Конфискация,
		Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаКонфискация);
	СостоянияКодовМаркировки.Вставить(
		Перечисления.ПричиныВыводаИзОборота.Ликвидация,
		Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаЛиквидацияПредприятия);
	СостоянияКодовМаркировки.Вставить(
		Перечисления.ПричиныВыводаИзОборота.РозничнаяПродажа,
		Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаРозничнаяПродажа);
	СостоянияКодовМаркировки.Вставить(
		Перечисления.ПричиныВыводаИзОборота.Уничтожение,
		Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаПриУничтожении);
	СостоянияКодовМаркировки.Вставить(
		Перечисления.ПричиныВыводаИзОборота.УтратаПовреждение,
		Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаПриУтратеИлиПовреждении);
	СостоянияКодовМаркировки.Вставить(
		Перечисления.ПричиныВыводаИзОборота.Экспорт,
		Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаЭкспортированЗаПределыСтранЕАЭС);
	СостоянияКодовМаркировки.Вставить(
		Перечисления.ПричиныВыводаИзОборота.ЭкспортЕАЭС,
		Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаЭкспортированВСтраныЕАЭС);
	СостоянияКодовМаркировки.Вставить(
		Перечисления.ПричиныВыводаИзОборота.ДистанционнаяПродажа,
		Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаДистанционнаяПродажа);
	СостоянияКодовМаркировки.Вставить(
		Перечисления.ПричиныВыводаИзОборота.БезвозмезднаяПередача,
		Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаБезвозмезднаяПередача);
	СостоянияКодовМаркировки.Вставить(
		Перечисления.ПричиныВыводаИзОборота.ПродажаПоГосКонтракту,
		Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаПродажаПоГосКонтракту);
	СостоянияКодовМаркировки.Вставить(
		Перечисления.ПричиныВыводаИзОборота.ПродажаПоОбразцам,
		Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаПродажаПоОбразцам);
	СостоянияКодовМаркировки.Вставить(
		Перечисления.ПричиныВыводаИзОборота.ПродажаПоСделкеСГосТайной,
		Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаПродажаПоСделкеСГосТайной);
	СостоянияКодовМаркировки.Вставить(
		Перечисления.ПричиныВыводаИзОборота.Утилизация,
		Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаУтилизация);
	СостоянияКодовМаркировки.Вставить(
		Перечисления.ПричиныВыводаИзОборота.ПродажаЧерезВендинговыйАппарат,
		Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаПродажаЧерезВендинговыйАппарат);
	СостоянияКодовМаркировки.Вставить(
		Перечисления.ПричиныВыводаИзОборота.ИстечениеСрокаГодности,
		Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаИстечениеСрокаГодности);
	СостоянияКодовМаркировки.Вставить(
		Перечисления.ПричиныВыводаИзОборота.ИспользованиеДляПроизводственныхЦелей,
		Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаИспользованиеДляПроизводственныхЦелей);
	
	Результат = СостоянияКодовМаркировки.Получить(Ссылка.ПричинаВывода);
	
	Если Результат = Неопределено Тогда
		Результат = Перечисления.СостоянияКодовМаркировки.ВыведенИзОборота;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли