// Модуль документа "Резервирование заказов покупателя"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Исполнитель) Тогда 
		Подписант = ОрганизацииАльфаАвто.Руководитель(ЭтотОбъект.Организация, ЭтотОбъект.Дата);
		
		Если ЗначениеЗаполнено(Подписант)Тогда
			Исполнитель = УправлениеПечатьюПлатформа.ПолучитьПодписантаСотрудника(Подписант, Организация, ПодразделениеКомпании);	
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;  
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	// Проверим корректность заполнения табличной части
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаТоваров Из Товары Цикл
		
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			Если ТипЗнч(СтрокаТоваров.ЗаказПокупателя) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Строка <%1>: Вид заказа не соответствует контрагенту.'"),
					СокрЛП(СтрокаТоваров.НомерСтроки)
				);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
			Иначе
				Если Контрагент <> СтрокаТоваров.ЗаказПокупателя.Контрагент Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Строка <%1>: Контрагент заказа не соответствует контрагенту документа.'"),
						СокрЛП(СтрокаТоваров.НомерСтроки)
					);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
				КонецЕсли; 
			КонецЕсли; 
			
		ИначеЕсли ТипЗнч(Контрагент) = Тип("СправочникСсылка.ПодразделенияКомпании") Тогда
			
			Если ТипЗнч(СтрокаТоваров.ЗаказПокупателя) <> Тип("ДокументСсылка.ЗаказВнутренний") Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Строка <%1>: Вид заказа не соответствует контрагенту.'"),
					СокрЛП(СтрокаТоваров.НомерСтроки)
				);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
			Иначе
				Если Контрагент <> СтрокаТоваров.ЗаказПокупателя.ПодразделениеПолучатель Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Строка <%1>: Контрагент заказа не соответствует контрагенту документа.'"),
						СокрЛП(СтрокаТоваров.НомерСтроки)
					);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЕсли;
				
	КонецЦикла;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоЗаказамПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование запроса по табличной части товаров
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ДокументТовары.ЗаказПокупателя КАК Заказ,
	|	ДокументТовары.МестоРазмещения КАК СкладКомпании,
	|	0 КАК Количество,
	|	ДокументТовары.Количество*ДокументТовары.Коэффициент КАК Резерв
	|ИЗ
	|	Документ.РезервированиеЗаказовПокупателя.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка=&Ссылка И ДокументТовары.Количество>0
	|");
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	// Корректируем заказ покупателя
	НаборЗаписейЗаказыПокупателей = Движения.ЗаказыПокупателей;
	НаборЗаписейЗаказыПокупателей.РежимПроведения = РежимПроведения;
	НаборЗаписейЗаказыПокупателей.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейЗаказыПокупателей.РезультатЗапросаПоТоварам = Запрос.Выполнить();
	НаборЗаписейЗаказыПокупателей.Контрагент = Контрагент;
	НаборЗаписейЗаказыПокупателей.Заказ = Неопределено;
	НаборЗаписейЗаказыПокупателей.СкладКомпании = Неопределено;
	НаборЗаписейЗаказыПокупателей.Заказывать = Ложь;
	НаборЗаписейЗаказыПокупателей.Резервировать = Истина;
	Отказ=НЕ НаборЗаписейЗаказыПокупателей.Приход() ИЛИ Отказ;
	
	// Снимаем распределение заказов покупателя
	РезультатЗакрытияЗаказов=НаборЗаписейЗаказыПокупателей.Выгрузить();
	РезультатЗакрытияЗаказов.Свернуть("Заказ,Контрагент,Номенклатура,ХарактеристикаНоменклатуры","Резерв");
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	РезультатЗакрытияЗаказов.Контрагент КАК Контрагент,
	             |	РезультатЗакрытияЗаказов.Заказ КАК Заказ,
	             |	РезультатЗакрытияЗаказов.Номенклатура КАК Номенклатура,
	             |	РезультатЗакрытияЗаказов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |	РезультатЗакрытияЗаказов.Резерв
	             |ПОМЕСТИТЬ РезультатЗакрытияЗаказов
	             |ИЗ
	             |	&РезультатЗакрытияЗаказов КАК РезультатЗакрытияЗаказов
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	РезультатЗакрытияЗаказов.Контрагент КАК Контрагент,
	             |	РезультатЗакрытияЗаказов.Заказ КАК Заказ,
	             |	РезультатЗакрытияЗаказов.Номенклатура КАК Номенклатура,
	             |	РезультатЗакрытияЗаказов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) - РезультатЗакрытияЗаказов.Резерв - ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0) КАК Количество
	             |ИЗ
	             |	РезультатЗакрытияЗаказов КАК РезультатЗакрытияЗаказов
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
	             |				&НаМомент,
	             |				Контрагент В (&Контрагент)
	             |					И Заказ В (&Заказ)
	             |					И Номенклатура В (&Номенклатура)
	             |					И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)) КАК ЗаказыПокупателейОстатки
	             |		ПО РезультатЗакрытияЗаказов.Контрагент = ЗаказыПокупателейОстатки.Контрагент
	             |			И РезультатЗакрытияЗаказов.Заказ = ЗаказыПокупателейОстатки.Заказ
	             |			И РезультатЗакрытияЗаказов.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
	             |			И РезультатЗакрытияЗаказов.ХарактеристикаНоменклатуры = ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыРаспределение.Остатки(
	             |				&НаМомент,
	             |				ЗаказПокупателя В (&Заказ)
	             |					И Номенклатура В (&Номенклатура)
	             |					И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)) КАК ЗаказыРаспределениеОстатки
	             |		ПО РезультатЗакрытияЗаказов.Заказ = ЗаказыРаспределениеОстатки.ЗаказПокупателя
	             |			И РезультатЗакрытияЗаказов.Номенклатура = ЗаказыРаспределениеОстатки.Номенклатура
	             |			И РезультатЗакрытияЗаказов.ХарактеристикаНоменклатуры = ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры";
	
	Запрос.УстановитьПараметр("НаМомент",МоментВремени());
	Запрос.УстановитьПараметр("Контрагент",РезультатЗакрытияЗаказов.ВыгрузитьКолонку("Контрагент"));
	Запрос.УстановитьПараметр("Заказ",РезультатЗакрытияЗаказов.ВыгрузитьКолонку("Заказ"));
	Запрос.УстановитьПараметр("Номенклатура",РезультатЗакрытияЗаказов.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",РезультатЗакрытияЗаказов.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
	Запрос.УстановитьПараметр("РезультатЗакрытияЗаказов",РезультатЗакрытияЗаказов);
	
	НаборЗаписейРаспределениеЗаказов = Движения.ЗаказыРаспределение;
	НаборЗаписейРаспределениеЗаказов.РежимПроведения = РежимПроведения;
	НаборЗаписейРаспределениеЗаказов.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейРаспределениеЗаказов.РезультатЗапросаПоТоварам = Запрос.Выполнить().Выгрузить();
	НаборЗаписейРаспределениеЗаказов.ЗаказПокупателя = "Заказ";
	НаборЗаписейРаспределениеЗаказов.ЗаказПоставщика = Неопределено;
	НаборЗаписейРаспределениеЗаказов.Контрагент = Контрагент;
	НаборЗаписейРаспределениеЗаказов.ПоБазовомуКоличеству=Истина;
	НаборЗаписейРаспределениеЗаказов.ПорядокЗакрытияЗаказовПоставщику="ЗаказыРаспределениеОстатки.ЗаказПокупателя.Дата ВОЗР";
	Отказ=НЕ НаборЗаписейРаспределениеЗаказов.КорректировкаРаспределения() ИЛИ Отказ;
	
	// Корректировка резервирования товаров на складе
	НаборЗаписейОстатки=Движения.ОстаткиТоваровКомпании;
	НаборЗаписейОстатки.РежимПроведения=РежимПроведения;
	НаборЗаписейОстатки.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейОстатки.РезультатЗапросаПоТоварам=НаборЗаписейЗаказыПокупателей.РезультатЗапросаПоТоварам;
	НаборЗаписейОстатки.СкладКомпании=Неопределено;
	НаборЗаписейОстатки.ДвиженияПоРознице=Ложь;
	Отказ = НЕ НаборЗаписейОстатки.Зарезервировать() ИЛИ Отказ;
	
	// Двигаем границу последовательности заказов
	РаботаСГраницами.СдвинутьГраницуЗаказов(Ссылка,  ДополнительныеСвойства, Движения);

КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Заказ покупателя"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПокупателя(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент	= ДанныеЗаполнения.Контрагент;
	ХозОперация	= Справочники.ХозОперации.РезервированиеПодЗаказПокупателя;
	
	Документы.РезервированиеЗаказовПокупателя.СкорректироватьТабличнуюЧастьПриЗаполнении(ЭтотОбъект, ДанныеЗаполнения);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПокупателя()

// Производит заполнение объекта на основании документа "Заказ внутренний"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказВнутренний(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент	= ДанныеЗаполнения.ПодразделениеПолучатель;
	ХозОперация	= Справочники.ХозОперации.РезервированиеПодВнутреннийЗаказ;
	
	Документы.РезервированиеЗаказовПокупателя.СкорректироватьТабличнуюЧастьПриЗаполнении(ЭтотОбъект, ДанныеЗаполнения);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказВнутренний()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
