// Модуль менеджера документа "Инвентаризация"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. 
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбновлениеВерсииИБ

// Заполняет новые реквизиты данными из неактуального реквизита и из доп. сведений
//
Процедура ЗаполнитьДанныеИнвентаризации() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Инвентаризация.Ссылка КАК Ссылка,
	               |	""ПричинаПроведенияИнвентаризации"" КАК Реквизит,
	               |	Инвентаризация.УдалитьОснование КАК ЗначениеРеквизита
	               |ИЗ
	               |	Документ.Инвентаризация КАК Инвентаризация
	               |ГДЕ
	               |	НЕ Инвентаризация.УдалитьОснование = """"
	               |	И Инвентаризация.ПричинаПроведенияИнвентаризации <> Инвентаризация.УдалитьОснование
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ДополнительныеСведения.Объект,
	               |	ДополнительныеСведения.Свойство,
	               |	ДополнительныеСведения.Значение
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Объект ССЫЛКА Документ.Инвентаризация
	               |	И НЕ ДополнительныеСведения.Значение = НЕОПРЕДЕЛЕНО
	               |	И НЕ ДополнительныеСведения.Значение = ДАТАВРЕМЯ(1, 1, 1)
	               |	И (ДополнительныеСведения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаНачала)
	               |				И НЕ ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Документ.Инвентаризация).ДатаНачалаИнвентаризации = ДополнительныеСведения.Значение
	               |			ИЛИ ДополнительныеСведения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаКонца)
	               |				И НЕ ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Документ.Инвентаризация).ДатаОкончанияИнвентаризации = ДополнительныеСведения.Значение)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ДополнительныеСведения.Объект,
	               |	ДополнительныеСведения.Свойство,
	               |	ДополнительныеСведения.Значение
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Инвентаризация.ИнвентаризационнаяКомиссия КАК ИнвентаризацияИнвентаризационнаяКомиссия
	               |		ПО ДополнительныеСведения.Объект = ИнвентаризацияИнвентаризационнаяКомиссия.Ссылка
	               |			И ДополнительныеСведения.Значение = ИнвентаризацияИнвентаризационнаяКомиссия.ЧленКомиссии
	               |			И (ДополнительныеСведения.Значение ССЫЛКА Справочник.Сотрудники)
	               |			И (НЕ ДополнительныеСведения.Значение = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
	               |			И (ДополнительныеСведения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЧленКомиссии1)
	               |				ИЛИ ДополнительныеСведения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЧленКомиссии2)
	               |				ИЛИ ДополнительныеСведения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПредседательКомиссии))
	               |ГДЕ
	               |	ДополнительныеСведения.Объект ССЫЛКА Документ.Инвентаризация
	               |	И ДополнительныеСведения.Значение ССЫЛКА Справочник.Сотрудники
	               |	И НЕ ДополнительныеСведения.Значение = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |	И (ДополнительныеСведения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЧленКомиссии1)
	               |			ИЛИ ДополнительныеСведения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЧленКомиссии2)
	               |			ИЛИ ДополнительныеСведения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПредседательКомиссии))
	               |	И ИнвентаризацияИнвентаризационнаяКомиссия.Ссылка ЕСТЬ NULL
	               |ИТОГИ ПО
	               |	Ссылка";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДопСведенияМенеджер = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения; 
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Заблокировать();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		ВыборкаДетальныеЗаписи = Выборка.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если ВыборкаДетальныеЗаписи.Реквизит = "ПричинаПроведенияИнвентаризации" Тогда
				
				ДокументОбъект.ПричинаПроведенияИнвентаризации = ВыборкаДетальныеЗаписи.ЗначениеРеквизита;				
				
			ИначеЕсли ВыборкаДетальныеЗаписи.Реквизит = ДопСведенияМенеджер.ДатаНачала Тогда 
				
				ДокументОбъект.ДатаНачалаИнвентаризации = ВыборкаДетальныеЗаписи.ЗначениеРеквизита;	
				
			ИначеЕсли ВыборкаДетальныеЗаписи.Реквизит = ДопСведенияМенеджер.ДатаКонца Тогда
				
				ДокументОбъект.ДатаОкончанияИнвентаризации = ВыборкаДетальныеЗаписи.ЗначениеРеквизита;	
				
			ИначеЕсли ВыборкаДетальныеЗаписи.Реквизит = ДопСведенияМенеджер.ЧленКомиссии1
				ИЛИ ВыборкаДетальныеЗаписи.Реквизит = ДопСведенияМенеджер.ЧленКомиссии2 Тогда
				
				СтрокаТЧ = ДокументОбъект.ИнвентаризационнаяКомиссия.Найти(ВыборкаДетальныеЗаписи.ЗначениеРеквизита, "ЧленКомиссии"); 
				Если НЕ СтрокаТЧ = Неопределено Тогда  
					Продолжить;					
				КонецЕсли;	
				
				НоваяСтрока = ДокументОбъект.ИнвентаризационнаяКомиссия.Добавить();
				НоваяСтрока.ЧленКомиссии = ВыборкаДетальныеЗаписи.ЗначениеРеквизита;
				
			ИначеЕсли ВыборкаДетальныеЗаписи.Реквизит = ДопСведенияМенеджер.ПредседательКомиссии Тогда
				
				СтрокаТЧ = ДокументОбъект.ИнвентаризационнаяКомиссия.Найти(ВыборкаДетальныеЗаписи.ЗначениеРеквизита, "ЧленКомиссии"); 
				Если НЕ СтрокаТЧ = Неопределено Тогда  
					НоваяСтрока.Председатель = Истина;
					Продолжить;
				КонецЕсли;	
				
				НоваяСтрока = ДокументОбъект.ИнвентаризационнаяКомиссия.Добавить();
				НоваяСтрока.ЧленКомиссии = ВыборкаДетальныеЗаписи.ЗначениеРеквизита;
				НоваяСтрока.Председатель = Истина;
				
			КонецЕсли;	
						
		КонецЦикла;	
		
		Попытка
			ДокументОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления документа Инвентаризация'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				);
        КонецПопытки;
		
	КонецЦикла;	
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Товары.Итог("Сумма"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	ИтогиОперации.Вставить("КоличествоКнижное",     Объект.Товары.Итог("КоличествоКнижн"));
	ИтогиОперации.Вставить("КоличествоФактическое", Объект.Товары.Итог("КоличествоФакт"));
	
	ИтогиОперации.Вставить("СуммаКнижная",     Объект.Товары.Итог("СуммаКнижн"));
	ИтогиОперации.Вставить("СуммаФактическая", Объект.Товары.Итог("СуммаФакт"));
	
	// Производим добавление сведений о розничной сумме только в случае если выбран розничный склад.
	Если Объект.СкладКомпании.Розничный Тогда
		ИтогиОперации.Вставить("СуммаРозничная", Объект.Товары.Итог("СуммаРозничная"));
		ИтогиОперации.Вставить("ПроцентНаценки", ?(ИтогиОперации.СуммаДокумента=0, 0, Окр(ИтогиОперации.СуммаРозничная/ИтогиОперации.СуммаДокумента-1, 2)*100));
	КонецЕсли;

	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Процедура производит расчет всех зависимых параметров строки
Процедура РассчитатьСуммуСтроки(ТочкаВхода, Строка, ПараметрыДействия=Неопределено)
	
	// Производим корректировку фактического количества в строке
	Если ТочкаВхода<>"КоличествоФакт" Тогда
		Если Строка.КоличествоФакт=0 И НЕ ПараметрыДействия.Свойство("НеЗаполнятьКоличествоФакт") Тогда
			Строка.КоличествоФакт = Строка.КоличествоКнижн;
		КонецЕсли;
	КонецЕсли;
	
	Если ТочкаВхода="КоличествоФакт" ИЛИ ТочкаВхода="КоличествоКнижн" Тогда
		Строка.Количество = Строка.КоличествоФакт - Строка.КоличествоКнижн;
	КонецЕсли;
	
	Если ТочкаВхода="КоличествоФакт" ИЛИ ТочкаВхода="Цена" ИЛИ ТочкаВхода="КоличествоКнижн" Тогда
		Строка.СуммаКнижн = Строка.Цена * Строка.КоличествоКнижн;
		Строка.СуммаФакт = Строка.Цена * Строка.КоличествоФакт;
	КонецЕсли;
	
	Если ТочкаВхода="СуммаФакт" ИЛИ ТочкаВхода="КоличествоФакт" ИЛИ ТочкаВхода="КоличествоКнижн" ИЛИ ТочкаВхода="Цена" Тогда
		Строка.Сумма = Строка.СуммаФакт - Строка.СуммаКнижн;
	КонецЕсли;
	
	ПересчитанаЦенаРозничная = (ТочкаВхода="Цена" ИЛИ ТочкаВхода="СуммаРозничная" ИЛИ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ИзмениласьЦенаРозничная", ЛОЖЬ));
	
	Если ТочкаВхода="ЦенаРозничная" ИЛИ ТочкаВхода="КоличествоКнижн" ИЛИ ПересчитанаЦенаРозничная Тогда
		Строка.СуммаРозничнаяКнижн = Строка.ЦенаРозничная * Строка.КоличествоКнижн;
	КонецЕсли;
	
	Если ТочкаВхода="КоличествоФакт" ИЛИ ТочкаВхода="ЦенаРозничная" ИЛИ ТочкаВхода="КоличествоКнижн" ИЛИ ПересчитанаЦенаРозничная Тогда
		Если Строка.КоличествоФакт=Строка.КоличествоКнижн Тогда
			Строка.СуммаРозничнаяФакт = Строка.СуммаРозничнаяКнижн;
		Иначе
			Строка.СуммаРозничнаяФакт = Строка.ЦенаРозничная * Строка.КоличествоФакт;
		КонецЕсли;
	КонецЕсли;
	
	Если ТочкаВхода="СуммаРозничнаяФакт" ИЛИ ТочкаВхода="ЦенаРозничная" ИЛИ ТочкаВхода="КоличествоФакт" ИЛИ ТочкаВхода="КоличествоКнижн" ИЛИ ПересчитанаЦенаРозничная Тогда
		Строка.СуммаРозничная = Строка.СуммаРозничнаяФакт - Строка.СуммаРозничнаяКнижн;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуСтроки()

// Получить флаг получать книжное количество из партий
//
Функция ПолучитьФлагПолучатьКнижноеКоличествоИзПартий() Экспорт
	
	РежимПроведенияПоПартиям = ОбработкаСобытийДокументаСервер.ПолучитьРежимПроведенияПоПартиям();
	
	Возврат (РежимПроведенияПоПартиям=Перечисления.РежимыПроведенияПартий.ПервичнымиДокументамиДопроведение ИЛИ РежимПроведенияПоПартиям=Перечисления.РежимыПроведенияПартий.ПервичнымиДокументами);
	
КонецФункции // СменитьФлагПолучатьКнижноеКоличествоИзПартий()

// Производит заполнение показателей "Книжное количество" и "Себестоимость" по данным учета.
//
// Параметры:
//  Строка            - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура              - Набор параметров, использующихся при выполнения операции.
//
Процедура ЗаполнитьПоказателиСтрокиПоДаннымУчета(Объект, Строка, ПараметрыДействия = Неопределено)
	
	// Проверим, имеют ли смысл все дальнейшие операции
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ЗаполнитьПоказателиСтрокиПоДаннымУчета", Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыДействия.Свойство("МоментВремени") Тогда
		МоментВремени = ?(Объект.Ссылка.Пустая(),
			Новый МоментВремени(КонецДня(Объект.Дата)),
			Новый МоментВремени(Объект.Дата, Объект.Ссылка)
		);
	Иначе
		МоментВремени = ПараметрыДействия.МоментВремени;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Номенклатура", Строка.Номенклатура);
	Если ЗначениеЗаполнено(Строка.ХарактеристикаНоменклатуры) Тогда
		ПараметрыОтбора.Вставить("ХарактеристикаНоменклатуры", Строка.ХарактеристикаНоменклатуры);
	КонецЕсли;
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию Тогда
		
		// Расширяем параметры отбора
		ПараметрыОтбора.Вставить("Контрагент",            Объект.Контрагент);
		ПараметрыОтбора.Вставить("ДоговорВзаиморасчетов", Объект.ДоговорВзаиморасчетов);
		ПараметрыОтбора.Вставить("ДокументПередачи",      Строка.ДокументПередачи);
		Если ЗначениеЗаполнено(Строка.ГТД) Тогда
			ПараметрыОтбора.Вставить("ГТД", Строка.ГТД);
		КонецЕсли;
		
		// Выполняем запрос и получаем нужные показатели
		ПартииТоваровОтданные = РегистрыНакопления.ПартииТоваровОтданные.Остатки(
			МоментВремени,
			ПараметрыОтбора,
			"Номенклатура",
			"Количество,СуммаСебестоимостиУпр,СуммаСебестоимостиРегл"
		);
		КоличествоКнижн = ПартииТоваровОтданные.Итог("Количество");
		СуммаКнижнУпр   = ПартииТоваровОтданные.Итог("СуммаСебестоимостиУпр");
		СуммаКнижнРегл  = ПартииТоваровОтданные.Итог("СуммаСебестоимостиРегл");
		
	Иначе
		
		// Если в текущем узле ведется партионный учет, то остатки получим по данным партий.
		Если ПолучитьФлагПолучатьКнижноеКоличествоИзПартий() Тогда
			
			// Расширяем параметры отбора
			ПараметрыОтбора.Вставить("СкладКомпании", Объект.СкладКомпании);
			Если ЗапасыТоваров.ОбособленныйУчетТоваровПоОрганизациям(МоментВремени.Дата)
				И Не ЗапасыТоваров.РежимКонтроляОстатковНаСкладахПоКомпании() Тогда
				ПараметрыОтбора.Вставить("Организация", Объект.Организация);
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.Партия) Тогда
				ПараметрыОтбора.Вставить("Партия", Строка.Партия);
			КонецЕсли;
			
			// Выполняем запрос и получаем нужные показатели
			ПартииТоваровКомпании = РегистрыНакопления.ПартииТоваровКомпании.Остатки(
				МоментВремени,
				ПараметрыОтбора,
				"Номенклатура",
				"Количество,СуммаУпр,Сумма"
			);
			КоличествоКнижн = ПартииТоваровКомпании.Итог("Количество");
			СуммаКнижнУпр   = ПартииТоваровКомпании.Итог("СуммаУпр");
			СуммаКнижнРегл  = ПартииТоваровКомпании.Итог("Сумма");
			
			// Получаем уточненное количество по ГТД
			Если ЗначениеЗаполнено(Строка.ГТД) Тогда
				
				// Расширяем параметры отбора
				ПараметрыОтбора.Вставить("ГТД", Строка.ГТД);
				
				// Выполняем запрос и получаем нужные показатели
				ГТДПартийТоваровКомпании = РегистрыНакопления.ГТДПартийТоваровКомпании.Остатки(
					МоментВремени,
					ПараметрыОтбора,
					"Номенклатура",
					"Количество"
				);
				КоличествоКнижнПоГТД = ГТДПартийТоваровКомпании.Итог("Количество");
				СуммаКнижнУпр        = ?(КоличествоКнижн=0, 0, СуммаКнижнУпр  / КоличествоКнижн * КоличествоКнижнПоГТД);
				СуммаКнижнРегл       = ?(КоличествоКнижн=0, 0, СуммаКнижнРегл / КоличествоКнижн * КоличествоКнижнПоГТД);
				КоличествоКнижн      = КоличествоКнижнПоГТД;
				
			КонецЕсли;
			
		Иначе
			
			// Расширяем параметры отбора
			ПараметрыОтбора.Вставить("СкладКомпании", Объект.СкладКомпании);
			
			// Выполняем запрос и получаем нужные показатели
			ОстаткиТоваровКомпании = РегистрыНакопления.ОстаткиТоваровКомпании.Остатки(
				МоментВремени,
				ПараметрыОтбора,
				"Номенклатура",
				"Количество,СуммаРозн"
			);
			КоличествоКнижн = ОстаткиТоваровКомпании.Итог("Количество");
			СуммаКнижнУпр   = 0;
			СуммаКнижнРегл  = 0;
			
		КонецЕсли;
		
	КонецЕсли;
	
	КоличествоПереданное = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "КоличествоКнижн", 0);
	
	Если КоличествоПереданное <> 0 Тогда
		СуммаКнижнУпр = ?(КоличествоКнижн = 0, 0, СуммаКнижнУпр / КоличествоКнижн * КоличествоПереданное);
		СуммаКнижнРегл = ?(КоличествоКнижн = 0, 0, СуммаКнижнРегл / КоличествоКнижн * КоличествоПереданное);
		КоличествоКнижн      = КоличествоПереданное;
	КонецЕсли;
	
	// Приводим к коэффициенту в строке
	Строка.КоличествоКнижн = ?(Строка.Коэффициент=0, КоличествоКнижн, КоличествоКнижн/Строка.Коэффициент);
	
	// Произведем корректировку фактического количества, если не нулевой остаток, в т.ч. отрицательный.
	Если НЕ Строка.КоличествоКнижн=0 И НЕ ПараметрыДействия.Свойство("НеЗаполнятьКоличествоФакт") Тогда
		Строка.КоличествоФакт = Строка.КоличествоКнижн;
	КонецЕсли;
	
	// Выполняем пересчет цены в валюту документа
	Если СуммаКнижнРегл=0 И СуммаКнижнУпр=0 Тогда
		Строка.СуммаКнижн = 0;
	ИначеЕсли Объект.ВалютаДокумента=Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
		Строка.СуммаКнижн = СуммаКнижнРегл;
	Иначе
		Строка.СуммаКнижн = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			СуммаКнижнУпр,
			Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
			МоментВремени,
			Объект.ВалютаДокумента,
			МоментВремени
		);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоказателиСтрокиПоДаннымУчета()

// Получение данных о прослеживаемых товаров
//
// Параметры:
//  Объект	 - ДокументОбъект.Инвентаризация - Документ, на основании которого произошла операция с товаром
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Список прослеживаемых товаров
//
Функция ОперацииСПрослеживаемымиТоварами(Объект) Экспорт
	
	// Получим таблицу для формирования данных по операции
	ТаблицаОперацииПрослеживаемости = УчетПрослеживаемыхТоваровСервер.ИнициализацияТаблицыОпераций();
	
	// Сформируем запрос из документа
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
	|	СУММА(ПартииТоваровКомпании.Количество) КАК КоличествоОсталось,
	|	СУММА(ПартииТоваровКомпании.СуммаБезНДС) КАК СуммаОсталось
	|ИЗ
	|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
	|ГДЕ
	|	ПартииТоваровКомпании.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровКомпании.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ДокументыОтображенияОпераций.ОтчетОбОперациях) КАК ОтчетностьОперации,
	|	ВЫБОР
	|		КОГДА ГТДПартийТоваровКомпании.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.НедостачаТовараПоИнвентаризации)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.ВозвратУтерянногоТовара)
	|	КОНЕЦ КАК КодОперации,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументов.Другое) КАК ВидДокумента,
	|	ГТДПартийТоваровКомпании.Номенклатура КАК Номенклатура,
	|	ГТДПартийТоваровКомпании.ГТД КАК РНПТ,
	|	СУММА(ГТДПартийТоваровКомпании.Количество) КАК КоличествоПрослеживаемости
	|ИЗ
	|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
	|ГДЕ
	|	ГТДПартийТоваровКомпании.Регистратор = &Ссылка
	|	И ГТДПартийТоваровКомпании.ГТД.РНПТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ГТДПартийТоваровКомпании.Номенклатура,
	|	ГТДПартийТоваровКомпании.ГТД,
	|	ВЫБОР
	|		КОГДА ГТДПартийТоваровКомпании.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.НедостачаТовараПоИнвентаризации)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.ВозвратУтерянногоТовара)
	|	КОНЕЦ";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	// Проверим есть РНПТ у документа
	Если ПакетЗапросов[1].Пустой() Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	ТаблицаТоваров = ПакетЗапросов[0].Выгрузить();
	ТаблицаРНПТ = ПакетЗапросов[1].Выгрузить();
	
	// Зафиксируем данные для заполнения
	Организация = Объект.Организация;
	Документ = Объект.Ссылка;
	ПериодОтчета = НачалоКвартала(Объект.Дата);
	НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект.Ссылка);
	ДатаДокумента = Объект.Дата;
	
	Для Каждого ТекущаяСтрока Из ТаблицаРНПТ Цикл
		
		НоваяСтрока = ТаблицаОперацииПрослеживаемости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ПериодОтчета = ПериодОтчета;
		НоваяСтрока.Документ = Документ;
		НоваяСтрока.НомерДокумента = НомерДокумента;
		НоваяСтрока.ДатаДокумента = ДатаДокумента;
		
		// Получим сумму товара
		КоличествоРНПТ = ТекущаяСтрока.КоличествоПрослеживаемости;
		НайденныеСтроки = ТаблицаТоваров.НайтиСтроки(Новый Структура("Номенклатура", ТекущаяСтрока.Номенклатура));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаНоменклатуры = НайденныеСтроки[0];
		
		Если КоличествоРНПТ >= СтрокаНоменклатуры.КоличествоОсталось Тогда
			СуммаБезНДС = СтрокаНоменклатуры.СуммаОсталось;
		Иначе
			СуммаБезНДС = Окр(СтрокаНоменклатуры.СуммаОсталось /
				?(СтрокаНоменклатуры.КоличествоОсталось = 0, 1, СтрокаНоменклатуры.КоличествоОсталось)
				* КоличествоРНПТ, 2);
		КонецЕсли;
		НоваяСтрока.СуммаБезНДС = СуммаБезНДС;
		
		СтрокаНоменклатуры.КоличествоОсталось = СтрокаНоменклатуры.КоличествоОсталось - КоличествоРНПТ;
		СтрокаНоменклатуры.СуммаОсталось = СтрокаНоменклатуры.СуммаОсталось - СуммаБезНДС;
		Если СтрокаНоменклатуры.КоличествоОсталось <= 0 Тогда
			ТаблицаТоваров.Удалить(СтрокаНоменклатуры);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаОперацииПрослеживаемости;
	
КонецФункции

Функция ПривестиМакетПечатнойФормыИнвентаризации(Макет, Объект)
	
	ЕстьКод = ПравоПользователя("ВыводитьКодВПечатныхФормах");
	Если НЕ ЕстьКод И Макет.Области.Найти("Код") <> Неопределено Тогда
		
		// удалим область "Код"
		ОбластьКод = Макет.Область("Код | Строка");
		ОбластьШапка  = Макет.Область("Код | ШапкаТаблицы");
		
		Сч = ОбластьКод.Право;
		ШиринаКода = ОбластьКод.ШиринаКолонки;
		ОбластьШапкаЛево = Неопределено;
		ОбластьСтрокаЛево = Неопределено;
		
		ОтступШапки = 1;
		ОбластьСтрокаПраво = Макет.Область(ОбластьКод.Верх, Сч, ОбластьКод.Низ, Сч);
		ОбластьШапкаПраво  = Макет.Область(ОбластьШапка.Низ - ОтступШапки, Сч, ОбластьШапка.Низ, Сч);
		ОбластьСтрокаЛево  = Макет.Область(ОбластьКод.Верх, Сч - ОтступШапки, ОбластьКод.Низ, Сч - ОтступШапки);
		ОбластьШапкаЛево   = Макет.Область(
			ОбластьШапка.Низ - ОтступШапки,
			Сч - ОтступШапки,
			ОбластьШапка.Низ,
			Сч - ОтступШапки);
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаПраво, ОбластьСтрокаЛево);
		ЗаполнитьЗначенияСвойств(ОбластьШапкаПраво, ОбластьШапкаЛево);
		
		Если ОбластьШапкаЛево.Параметр = Неопределено Тогда
			ОбластьШапкаПраво.Текст = ОбластьШапкаЛево.Текст;
		КонецЕсли;
		
		ОбластьСтрокаЛево.Очистить();
		ОбластьШапкаЛево.Очистить();
		
		ОбластьШапкаЛево.ШиринаКолонки  = ШиринаКода;
		ОбластьСтрокаЛево.ШиринаКолонки = ШиринаКода;
		
		Отступ = 2;
		Макет.Область(
			ОбластьШапка.Низ - ОтступШапки,
			ОбластьКод.Право - Отступ,
			ОбластьШапка.Низ,
			ОбластьКод.Право).Объединить();
		Макет.Область(
			ОбластьСтрокаЛево.Низ,
			ОбластьКод.Право - Отступ,
			ОбластьСтрокаЛево.Низ,
			ОбластьКод.Право).Объединить();
		
	КонецЕсли;
	
	// теперь запишем параметры шапки
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	Если ЕстьКод Тогда
		КолонкаКода = УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах();
		ОбластьМакета.Параметры.ИмяКолонкиКод = СтрЗаменить(КолонкаКода.Синоним, "/", Символы.ПС);
	КонецЕсли;

	Возврат ОбластьМакета;
	
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию Тогда
		ОбязательныеРеквизиты.Добавить("Контрагент");
		ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
			РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(Объект.ДоговорВзаиморасчетов);
		Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
			ОбязательныеРеквизиты.Добавить("СпособЗачетаАвансов");
		КонецЕсли;
		ОбязательныеРеквизиты.Добавить("Товары.ДокументПередачи");
	Иначе
		ОбязательныеРеквизиты.Добавить("СкладКомпании");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("СтатьяСписанияОбнаруженнойНедостачиТМЦ");
	ОбязательныеРеквизиты.Добавить("СтатьяОприходованияОбнаруженныхИзлишковТМЦ");
	ОбязательныеРеквизиты.Добавить("РежимКорректировкиКоличества");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	ОбязательныеРеквизиты.Добавить("ИнвентаризационнаяКомиссия.ЧленКомиссии");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары=Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	УникальныеТовары.Добавить("ДокументПередачи");
	
	Если ПраваИНастройкиПользователя.Значение("ВыборочноеСписаниеПартий", Объект) Тогда
		УникальныеТовары.Добавить("Партия");
		УникальныеТовары.Добавить("ГТД");
	Иначе
		УникальныеТовары.Добавить("ГТДИзлишков");
	КонецЕсли;
	
	УникальныеЧленыКомиссии = Новый Массив();
	УникальныеЧленыКомиссии.Добавить("ЧленКомиссии");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти=Новый Структура();
	УникальныеТабличныеЧасти.Вставить("Товары", УникальныеТовары);
	УникальныеТабличныеЧасти.Вставить("ИнвентаризационнаяКомиссия", УникальныеЧленыКомиссии);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Параметры проверки полей таблицы товаров
	КонтролируемыеРеквизитыТовары = Новый Структура();
	КонтролируемыеРеквизитыТовары.Вставить("Партия", ЛОЖЬ);
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("СкладКомпании",         Ложь);
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	КонтролируемыеРеквизиты.Вставить("Товары",                КонтролируемыеРеквизитыТовары);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Инициализируем параметры обработки действия с объектом
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	// Возвращаем сформированную структуру параметров
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ТребуетсяУстановкаЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяУстановкаЦен", Ложь);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
	// Произведем получение и установку цены
	Если ТребуетсяУстановкаЦен И ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "РежимПолученияЦеныПоСебестоимости", ЛОЖЬ) Тогда
		ТоварыПересчитатьПоказателиПоДаннымУчета(Объект, , ПараметрыДействия, Истина);
	КонецЕсли;

КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// очистим неиспользуемые реквизиты
	Если Объект.ХозОперация = Справочники.ХозОперации.ИнвентаризацияТоваров Тогда
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Объект.ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	Иначе
		Объект.СкладКомпании = Справочники.СкладыКомпании.ПустаяСсылка();
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
	// Для варианта с выводом цен по себестоимости уберем установку цен
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "РежимПолученияЦеныПоСебестоимости", Ложь) Тогда
		ПараметрыДействия.Вставить("ТребуетсяУстановкаЦен", Ложь);
	КонецЕсли;
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ПараметрыДействия.Вставить("ЗапретИзмененияЦен", Истина);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	ПараметрыДействия.Вставить("ИмяРеквизитаКоличество", "КоличествоФакт");
	
	// Проверим а не набор ли у нас...
	Если Строка.Номенклатура.ВидНоменклатуры=Перечисления.ВидыНоменклатуры.Набор Тогда
		ОбработкаТабличнойЧастиТовары.РазложитьНаборНаСтроки(Объект, Строка, ПараметрыДействия);
		Возврат;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ОбработатьИзменениеНоменклатура(Объект, Строка, ПараметрыДействия);
	
	// Получим и заполним книжное количество и себестоимость товара по данным учета
	ЗаполнитьПоказателиСтрокиПоДаннымУчета(Объект, Строка, ПараметрыДействия);
	
	// Произведем получение и установку цены
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "РежимПолученияЦеныПоСебестоимости", ЛОЖЬ) Тогда
		Строка.Цена = ?(Строка.КоличествоКнижн*Строка.Коэффициент=0, Строка.СуммаКнижн, Строка.СуммаКнижн/Строка.КоличествоКнижн/Строка.Коэффициент);
	Иначе
		// Получим цену по типу цен документа
		ОбработкаТабличнойЧастиТовары.УстановитьЦенуНоменклатуры(Объект, Строка, ПараметрыДействия);
	КонецЕсли;
	
	// Произведем получение и установку розничной цены
	ОбработкаТабличнойЧастиТовары.УстановитьРозничнуюЦену(Объект, Строка, ПараметрыДействия);
	
	// Вызываем общий обработчик пересчета показателей строки
	ОбработкаТабличнойЧастиТовары.РассчитатьСуммуСтроки("Количество", Объект, Строка, ПараметрыДействия);
	
	// Производим расчет зависимых показателей строки
	РассчитатьСуммуСтроки("КоличествоКнижн", Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("ЦенаТолькоДляХарактеристики", ИСТИНА);
	
	// Производим корректировку и заполнение связанных аналитик в строке
	ОбработкаТабличнойЧастиТовары.ОбработатьИзменениеХарактеристикаНоменклатуры(Объект, Строка, ПараметрыДействия);
	
	// Получим и заполним книжное количество и себестоимость товара по данным учета
	ЗаполнитьПоказателиСтрокиПоДаннымУчета(Объект, Строка, ПараметрыДействия);
	
	// Произведем получение и установку цены
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "РежимПолученияЦеныПоСебестоимости", ЛОЖЬ) Тогда
		Строка.Цена = ?(Строка.КоличествоКнижн*Строка.Коэффициент=0, Строка.СуммаКнижн, Строка.СуммаКнижн/Строка.КоличествоКнижн/Строка.Коэффициент);
	Иначе
		// Получим цену по типу цен документа
		ОбработкаТабличнойЧастиТовары.УстановитьЦенуНоменклатуры(Объект, Строка, ПараметрыДействия);
	КонецЕсли;
	
	// Произведем получение и установку розничной цены
	ОбработкаТабличнойЧастиТовары.УстановитьРозничнуюЦену(Объект, Строка, ПараметрыДействия);
	
	// Вызываем общий обработчик пересчета показателей строки
	ОбработкаТабличнойЧастиТовары.РассчитатьСуммуСтроки("Количество", Объект, Строка, ПараметрыДействия);
	
	// Производим расчет зависимых показателей строки
	РассчитатьСуммуСтроки("КоличествоКнижн", Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Производим корректировку и заполнение связанных аналитик в строке
	ОбработкаТабличнойЧастиТовары.ОбработатьИзменениеЕдиницаИзмерения(Объект, Строка, ПараметрыДействия);
	
	// Получим и заполним книжное количество и себестоимость товара по данным учета
	ЗаполнитьПоказателиСтрокиПоДаннымУчета(Объект, Строка, ПараметрыДействия);
	
	// Произведем получение и установку цены
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "РежимПолученияЦеныПоСебестоимости", ЛОЖЬ) Тогда
		Строка.Цена = ?(Строка.КоличествоКнижн*Строка.Коэффициент=0, Строка.СуммаКнижн, Строка.СуммаКнижн/Строка.КоличествоКнижн/Строка.Коэффициент);
	Иначе
		// Получим цену по типу цен документа
		ОбработкаТабличнойЧастиТовары.УстановитьЦенуНоменклатуры(Объект, Строка, ПараметрыДействия);
	КонецЕсли;
	
	// Произведем получение и установку розничной цены
	ОбработкаТабличнойЧастиТовары.УстановитьРозничнуюЦену(Объект, Строка, ПараметрыДействия);
	
	// Вызываем общий обработчик пересчета показателей строки
	ОбработкаТабличнойЧастиТовары.РассчитатьСуммуСтроки("Количество", Объект, Строка, ПараметрыДействия);
	
	// Производим расчет зависимых показателей строки
	РассчитатьСуммуСтроки("КоличествоКнижн", Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Документ передачи" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыДокументПередачиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Получим и заполним книжное количество и себестоимость товара по данным учета
	ЗаполнитьПоказателиСтрокиПоДаннымУчета(Объект, Строка, ПараметрыДействия);
	
	// Произведем получение и установку цены
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "РежимПолученияЦеныПоСебестоимости", ЛОЖЬ) Тогда
		Строка.Цена = ?(Строка.КоличествоКнижн*Строка.Коэффициент=0, Строка.СуммаКнижн, Строка.СуммаКнижн/Строка.КоличествоКнижн/Строка.Коэффициент);
	КонецЕсли;
	
	// Производим расчет зависимых показателей строки
	РассчитатьСуммуСтроки("КоличествоКнижн", Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыДокументПередачиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Партия" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПартияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПартияПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Получим и заполним книжное количество и себестоимость товара по данным учета
	ЗаполнитьПоказателиСтрокиПоДаннымУчета(Объект, Строка, ПараметрыДействия);
	
	// Произведем получение и установку цены
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "РежимПолученияЦеныПоСебестоимости", ЛОЖЬ) Тогда
		Строка.Цена = ?(Строка.КоличествоКнижн*Строка.Коэффициент=0, Строка.СуммаКнижн, Строка.СуммаКнижн/Строка.КоличествоКнижн/Строка.Коэффициент);
	КонецЕсли;
	
	// Производим расчет зависимых показателей строки
	РассчитатьСуммуСтроки("КоличествоКнижн", Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыПартияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "ГТД" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыГТДПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ГТДПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Получим и заполним книжное количество и себестоимость товара по данным учета
	ЗаполнитьПоказателиСтрокиПоДаннымУчета(Объект, Строка, ПараметрыДействия);
	
	// Произведем получение и установку цены
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "РежимПолученияЦеныПоСебестоимости", ЛОЖЬ) Тогда
		Строка.Цена = ?(Строка.КоличествоКнижн*Строка.Коэффициент=0, Строка.СуммаКнижн, Строка.СуммаКнижн/Строка.КоличествоКнижн/Строка.Коэффициент);
	КонецЕсли;
	
	// Производим расчет зависимых показателей строки
	РассчитатьСуммуСтроки("КоличествоКнижн", Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыГТДПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Производим расчет зависимых показателей строки
	РассчитатьСуммуСтроки("Цена", Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество факт" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоФактПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Производим расчет зависимых показателей строки
	РассчитатьСуммуСтроки("КоличествоФакт", Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоФактПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма факт" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаФактПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Производим расчет зависимых показателей строки
	РассчитатьСуммуСтроки("СуммаФакт", Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаФактПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена розничная" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Производим расчет зависимых показателей строки
	РассчитатьСуммуСтроки("ЦенаРозничная", Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаРозничнаяПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма розничная факт" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаРозничнаяФактПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Производим расчет зависимых показателей строки
	РассчитатьСуммуСтроки("СуммаРозничнаяФакт", Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаРозничнаяФактПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Товары");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "Инвентаризация");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Пересчитать книжное количество и сумму'");
	Команда.Идентификатор	= "ТоварыПересчитатьПоказателиПоДаннымУчета";
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением = Ложь;
    //
	ВыборСклада 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборСклада.ВыборСсылки 		= "Справочник.СкладыКомпании.ФормаСписка";
	ВыборСклада.Обязательный 		= Истина;
	ВыборСклада.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать склад компании.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить складскими остатками'");
	Команда.Идентификатор	= "ТоварыЗаполнитьСкладскимиОстатками";
	Команда.Порядок			= 51;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", ВыборСклада);
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ХозОперация", 
		Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию, ВидСравненияКомпоновкиДанных.НеРавно); 
	//
	ВыборЯчейки 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборЯчейки.ВыборСсылки 		= "Справочник.ЯчейкиХранения.ФормаСписка";
	ВыборЯчейки.Обязательный 		= Истина;
	ВыборЯчейки.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать массив ячеек.'");
	ВыборЯчейки.Параметры			= Новый Структура(
		"РежимВыбора,МножественныйВыбор,Отбор",
		Истина,
		Истина,
		Новый Структура("Владелец","СкладКомпании")
	);
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить складскими остатками номенклатурой с ячейкой по умолчанию'");
	Команда.Идентификатор	= "ТоварыЗаполнитьСкладскимиОстатками";
	Команда.Порядок			= 52;
	Команда.ДополнительныеПараметры.ПараметрВыполнения = "ТоварыЗаполнитьСкладскимиОстаткамиНоменклатуройСЯчейкойПоУмолчанию";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("Ячейка", ВыборЯчейки);
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", ВыборСклада);
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "СкладКомпании.ВидСклада", Перечисления.ВидыСкладов.ОрдерныйЯчеистый); 
	//
	ВыборНоменклатуры 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборНоменклатуры.ВыборСсылки 		= "Справочник.Номенклатура.ФормаВыбораГруппы";
	ВыборНоменклатуры.Обязательный 		= Истина;
	ВыборНоменклатуры.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать группу номенклатуры.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить складскими остатками по группе номенклатуры'");
	Команда.Идентификатор	= "ТоварыЗаполнитьСкладскимиОстатками";
	Команда.Порядок			= 53;
	Команда.ДополнительныеПараметры.ПараметрВыполнения = "ТоварыЗаполнитьСкладскимиОстаткамиПоГруппе";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ГруппаНоменклатуры", ВыборНоменклатуры);
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", 		ВыборСклада);
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ХозОперация", 
		Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию, ВидСравненияКомпоновкиДанных.НеРавно); 
	//	
	ВыборДоговоров 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборДоговоров.ВыборСсылки 		= "Справочник.ДоговорыВзаиморасчетов.ФормаСписка";
	ВыборДоговоров.Обязательный 	= Истина;
	ВыборДоговоров.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать договор комиссии.'");
	
	ХозОперация = Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию;
	ВидДоговора = Новый ФиксированныйМассив(Справочники.ХозОперации.ПолучитьВидыДоговоров(ХозОперация));
	Отбор 		= Новый Структура("Организация,ПодразделениеКомпании,ВидДоговора",
					"Организация", "ПодразделениеКомпании", ВидДоговора);
	
	ВыборДоговоров.Параметры		= Новый Структура("РежимВыбора,Отбор", Истина, Отбор);
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить по договору комиссии'");
	Команда.Идентификатор	= "ТоварыЗаполнитьПоДоговоруКомиссии";
	Команда.Порядок			= 54;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ДоговорВзаиморасчетов", ВыборДоговоров);
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ХозОперация", Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию); 
	//
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить по группе номенклатуры'");
	Команда.Идентификатор	= "ТоварыЗаполнитьПоГруппеНоменклатуры";
	Команда.Порядок			= 55;
	Команда.ДополнительныеПараметры.ПараметрВыполнения = "ТоварыЗаполнитьПоГруппеНоменклатуры";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ГруппаНоменклатуры", ВыборНоменклатуры);
	//	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить всей номенклатурой'");
	Команда.Идентификатор	= "ТоварыЗаполнитьНоменклатурой";
	Команда.Порядок			= 56;
	Команда.ДополнительныеПараметры.ПараметрВыполнения = "ТоварыЗаполнитьВсейНоменклатурой";
	//	
	Команда 								= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление					= НСтр("ru = 'Свернуть одинаковые строки'");
	Команда.Идентификатор					= "ТоварыСвернутьОдинаковыеСтроки";
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением = Ложь;
	Команда.ДополнительныеПараметры.ПодтверждениеПередЗаполнением = Истина;
	Команда.Порядок							= 57;
	Команда.ДополнительныеПараметры.ПараметрВыполнения = "ТоварыСвернутьОдинаковыеСтроки";
	//
	Команда 								= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление					= НСтр("ru = 'Обнулить фактическое количество'");
	Команда.Идентификатор					= "ТоварыОбнулитьКоличествоФакт";
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением = Ложь;
	Команда.ДополнительныеПараметры.ПодтверждениеПередЗаполнением = Истина;
	Команда.Порядок							= 58;
	Команда.ДополнительныеПараметры.ПараметрВыполнения = "ТоварыОбнулитьКоличествоФакт";
	//
	Команда 								= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление					= НСтр("ru = 'Заполнить фактическое количество расчетным'");
	Команда.Идентификатор					= "ТоварыСравнятьРасчетФакт";
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением = Ложь;
	Команда.ДополнительныеПараметры.ПодтверждениеПередЗаполнением = Истина;
	Команда.Порядок							= 59;
	Команда.ДополнительныеПараметры.ПараметрВыполнения = "ТоварыСравнятьРасчетФакт";
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ТоварыПересчитатьПоказателиПоДаннымУчета.Видимость", Истина);
	ПараметрыКоманд.Вставить("ТоварыПересчитатьПоказателиПоДаннымУчета.Доступность", Истина);
	
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстатками.Видимость",  Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстатками.Доступность",
		Объект.ХозОперация <> Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию);
	
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстаткамиПоГруппе.Видимость", Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстаткамиПоГруппе.Доступность",
		Объект.ХозОперация <> Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию);
	
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьПоДоговоруКомиссии.Видимость", Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьПоДоговоруКомиссии.Доступность",
		Объект.ХозОперация = Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию);
	
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстаткамиНоменклатуройСЯчейкойПоУмолчанию.Видимость", Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстаткамиНоменклатуройСЯчейкойПоУмолчанию.Доступность",
		Объект.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Производит пересчет показателей "Книжное количество" и "Себестоимость" всех строк таблицы по данным учета.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ТоварыПересчитатьПоказателиПоДаннымУчета(Объект,
		ПараметрыКоманды = Неопределено,
		ПараметрыДействия = Неопределено,
		РежимПолученияЦеныПоСебестоимости = ЛОЖЬ) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды;
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Объект) Тогда
		ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
		Объект				= ПараметрыКоманды.Источник;
		РежимПолученияЦеныПоСебестоимости = ПараметрыКоманды.Форма.РежимПолученияЦеныПоСебестоимости;
	КонецЕсли;
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ПолучатьКнижноеКоличествоИзПартий = ПолучитьФлагПолучатьКнижноеКоличествоИзПартий();
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Товары.НомерСтроки,
		|	Товары.Номенклатура,
		|	Товары.ХарактеристикаНоменклатуры,
		|	Товары.ДокументПередачи,
		|	Товары.Партия,
		|	Товары.ГТД,
		|	Товары.Коэффициент КАК Коэффициент
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Товары.НомерСтроки,
		|	Товары.Номенклатура,
		|	Товары.ДокументПередачи,
		|	Товары.Партия,
		|	Товары.ГТД,
		|	Товары.ХарактеристикаНоменклатуры,
		|	СУММА(ЕСТЬNULL(ПартииТоваровОтданныеОстатки.КоличествоОстаток, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(ПартииТоваровОтданныеОстатки.СуммаСебестоимостиУпрОстаток, 0) * &КоэффициентВалютыУпр) КАК СуммаУпр,
		|	СУММА(ЕСТЬNULL(ПартииТоваровОтданныеОстатки.СуммаСебестоимостиРеглОстаток, 0) * &КоэффициентВалютыРегл) КАК СуммаРегл
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровОтданные.Остатки(
		|				&МоментВремени,
		|					Контрагент = &Контрагент
		|					И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
		|					И Номенклатура В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Товары.Номенклатура
		|						ИЗ
		|							Товары КАК Товары)) КАК ПартииТоваровОтданныеОстатки
		|		ПО Товары.ДокументПередачи = ПартииТоваровОтданныеОстатки.ДокументПередачи
		|			И Товары.Номенклатура = ПартииТоваровОтданныеОстатки.Номенклатура
		|			И (Товары.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|				ИЛИ Товары.ХарактеристикаНоменклатуры = ПартииТоваровОтданныеОстатки.ХарактеристикаНоменклатуры)
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.НомерСтроки,
		|	Товары.Номенклатура,
		|	Товары.ХарактеристикаНоменклатуры,
		|	Товары.Партия,
		|	Товары.ГТД,
		|	Товары.ДокументПередачи";
		
	ИначеЕсли ПолучатьКнижноеКоличествоИзПартий Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	Товары.ДокументПередачи КАК ДокументПередачи,
		|	Товары.Партия КАК Партия,
		|	Товары.ГТД КАК ГТД,
		|	ВЫРАЗИТЬ(Товары.Цена КАК ЧИСЛО(15,2)) КАК Цена,
		|	Товары.Коэффициент КАК Коэффициент
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиПартийТоваров.НомерСтроки,
		|	ОстаткиПартийТоваров.Номенклатура,
		|	ОстаткиПартийТоваров.ДокументПередачи,
		|	ОстаткиПартийТоваров.Партия,
		|	ОстаткиПартийТоваров.ГТД,
		|	ОстаткиПартийТоваров.ХарактеристикаНоменклатуры,
		|	ВЫБОР
		|		КОГДА ГТДПартийТоваровКомпанииОстатки.КоличествоОстаток ЕСТЬ NULL 
		|			ТОГДА ОстаткиПартийТоваров.Количество
		|		ИНАЧЕ ГТДПартийТоваровКомпанииОстатки.КоличествоОстаток
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ГТДПартийТоваровКомпанииОстатки.КоличествоОстаток ЕСТЬ NULL 
		|				ИЛИ ОстаткиПартийТоваров.Количество = 0
		|			ТОГДА ОстаткиПартийТоваров.СуммаУпр * &КоэффициентВалютыУпр
		|		ИНАЧЕ ОстаткиПартийТоваров.СуммаУпр * &КоэффициентВалютыУпр / ОстаткиПартийТоваров.Количество * ГТДПартийТоваровКомпанииОстатки.КоличествоОстаток
		|	КОНЕЦ КАК СуммаУпр,
		|	ВЫБОР
		|		КОГДА ГТДПартийТоваровКомпанииОстатки.КоличествоОстаток ЕСТЬ NULL 
		|				ИЛИ ОстаткиПартийТоваров.Количество = 0
		|			ТОГДА ОстаткиПартийТоваров.СуммаРегл * &КоэффициентВалютыРегл
		|		ИНАЧЕ ОстаткиПартийТоваров.СуммаРегл * &КоэффициентВалютыРегл / ОстаткиПартийТоваров.Количество * ГТДПартийТоваровКомпанииОстатки.КоличествоОстаток
		|	КОНЕЦ КАК СуммаРегл
		|ИЗ
		|	(ВЫБРАТЬ
		|		Товары.НомерСтроки КАК НомерСтроки,
		|		Товары.Номенклатура КАК Номенклатура,
		|		Товары.ДокументПередачи КАК ДокументПередачи,
		|		Товары.Партия КАК Партия,
		|		Товары.ГТД КАК ГТД,
		|		Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		СУММА(ЕСТЬNULL(ПартииТоваровКомпанииОстатки.КоличествоОстаток, 0)) КАК Количество,
		|		СУММА(ЕСТЬNULL(ПартииТоваровКомпанииОстатки.СуммаУпрОстаток, 0)) КАК СуммаУпр,
		|		СУММА(ЕСТЬNULL(ПартииТоваровКомпанииОстатки.СуммаОстаток, 0)) КАК СуммаРегл
		|	ИЗ
		|		Товары КАК Товары
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровКомпании.Остатки(
		|					&МоментВремени,
		|					СкладКомпании = &СкладКомпании
		|						И (&БезФильтраПоОрганизации
		|							ИЛИ Организация = &Организация)
		|						И Номенклатура В
		|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|								Товары.Номенклатура
		|							ИЗ
		|								Товары КАК Товары)) КАК ПартииТоваровКомпанииОстатки
		|			ПО Товары.Номенклатура = ПартииТоваровКомпанииОстатки.Номенклатура
		|				И (Товары.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|					ИЛИ Товары.ХарактеристикаНоменклатуры = ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры)
		|				И (Товары.Партия = НЕОПРЕДЕЛЕНО
		|					ИЛИ Товары.Партия = ПартииТоваровКомпанииОстатки.Партия)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Товары.НомерСтроки,
		|		Товары.Номенклатура,
		|		Товары.ГТД,
		|		Товары.ХарактеристикаНоменклатуры,
		|		Товары.Партия,
		|		Товары.ДокументПередачи) КАК ОстаткиПартийТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ГТДПартийТоваровКомпании.Остатки(
		|				&МоментВремени,
		|				СкладКомпании = &СкладКомпании
		|					И (&БезФильтраПоОрганизации
		|						ИЛИ Организация = &Организация)
		|					И (Номенклатура, ХарактеристикаНоменклатуры, Партия, ГТД) В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Товары.Номенклатура,
		|							Товары.ХарактеристикаНоменклатуры,
		|							Товары.Партия,
		|							Товары.ГТД
		|						ИЗ
		|							Товары КАК Товары)) КАК ГТДПартийТоваровКомпанииОстатки
		|		ПО ОстаткиПартийТоваров.Номенклатура = ГТДПартийТоваровКомпанииОстатки.Номенклатура
		|			И ОстаткиПартийТоваров.ХарактеристикаНоменклатуры = ГТДПартийТоваровКомпанииОстатки.ХарактеристикаНоменклатуры
		|			И ОстаткиПартийТоваров.Партия = ГТДПартийТоваровКомпанииОстатки.Партия
		|			И ОстаткиПартийТоваров.ГТД = ГТДПартийТоваровКомпанииОстатки.ГТД";
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	Товары.ДокументПередачи КАК ДокументПередачи,
		|	Товары.Партия КАК Партия,
		|	Товары.ГТД КАК ГТД,
		|	ВЫРАЗИТЬ(Товары.Цена КАК ЧИСЛО(15,2)) КАК Цена,
		|	Товары.Коэффициент КАК Коэффициент
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Товары.НомерСтроки,
		|	Товары.Номенклатура,
		|	Товары.ДокументПередачи,
		|	Товары.Партия,
		|	Товары.ГТД,
		|	Товары.ХарактеристикаНоменклатуры,
		|	СУММА(ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток, 0)) КАК Количество,
		|	СУММА(Товары.Цена * ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток, 0)) КАК СуммаУпр,
		|	СУММА(Товары.Цена * ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток, 0)) КАК СуммаРегл
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровКомпании.Остатки(
		|				&МоментВремени,
		|				СкладКомпании = &СкладКомпании
		|					И Номенклатура В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Товары.Номенклатура
		|						ИЗ
		|							Товары КАК Товары)) КАК ОстаткиТоваровКомпанииОстатки
		|		ПО Товары.Номенклатура = ОстаткиТоваровКомпанииОстатки.Номенклатура
		|			И (Товары.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|				ИЛИ Товары.ХарактеристикаНоменклатуры = ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры)
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.НомерСтроки,
		|	Товары.Номенклатура,
		|	Товары.ХарактеристикаНоменклатуры,
		|	Товары.Партия,
		|	Товары.ГТД,
		|	Товары.ДокументПередачи";
		
	КонецЕсли;
	
	МоментВремени = ?(Объект.Ссылка.Пустая(),
		Новый МоментВремени(КонецДня(Объект.Дата)),
		Новый МоментВремени(Объект.Дата, Объект.Ссылка)
	);
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр  = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	КоэффициентВалютыРегл = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(1, ВалютаРегл, МоментВремени, Объект.ВалютаДокумента, МоментВремени);
	КоэффициентВалютыУпр  = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(1, ВалютаУпр,  МоментВремени, Объект.ВалютаДокумента, МоментВремени);
	
	// Инициализируем объект запроса
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МоментВремени",         Новый Граница(МоментВремени, ВидГраницы.Исключая));
	Запрос.Параметры.Вставить("Контрагент",            Объект.Контрагент);
	Запрос.Параметры.Вставить("ДоговорВзаиморасчетов", Объект.ДоговорВзаиморасчетов);
	Запрос.Параметры.Вставить("СкладКомпании",         Объект.СкладКомпании);
	Если ПолучатьКнижноеКоличествоИзПартий Тогда
		Запрос.Параметры.Вставить("БезФильтраПоОрганизации", ЗапасыТоваров.ФильтрЗапросаПоОрганизации(МоментВремени.Дата));
		Запрос.Параметры.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	Запрос.Параметры.Вставить("Товары",                Объект.Товары.Выгрузить());
	Запрос.Параметры.Вставить("КоэффициентВалютыРегл", КоэффициентВалютыРегл);
	Запрос.Параметры.Вставить("КоэффициентВалютыУпр",  КоэффициентВалютыУпр);
	
	// Выполним запрос и произведем упорядочивание таблицы остатков
	ОстаткиТоваров = Запрос.Выполнить().Выгрузить();
	ОстаткиТоваров.Сортировать("Номенклатура, ДокументПередачи, Партия Убыв, ГТД Убыв, ХарактеристикаНоменклатуры Убыв");
	
	ОстаткиТоваров.Колонки.Добавить("Активность",      Новый ОписаниеТипов("Булево"));
	ОстаткиТоваров.Колонки.Добавить("ВычетКоличество", Новый ОписаниеТипов("Число"));
	ОстаткиТоваров.Колонки.Добавить("ВычетСуммаУпр",   Новый ОписаниеТипов("Число"));
	ОстаткиТоваров.Колонки.Добавить("ВычетСуммаРегл",  Новый ОписаниеТипов("Число"));
	ОстаткиТоваров.ЗаполнитьЗначения(ИСТИНА, "Активность");
	ОстаткиТоваров.ЗаполнитьЗначения(0, "ВычетКоличество");
	ОстаткиТоваров.ЗаполнитьЗначения(0, "ВычетСуммаУпр");
	ОстаткиТоваров.ЗаполнитьЗначения(0, "ВычетСуммаРегл");
	
	ПриоритетПолей = Новый Структура();
	ПриоритетПолей.Вставить("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	ПриоритетПолей.Вставить("ГТД",                        Справочники.ГТД.ПустаяСсылка());
	ПриоритетПолей.Вставить("Партия",                     Неопределено);
	
	// Произведем корректировку таблицы полученных остатков
	Для каждого СтрокаТаблицыОстатков Из ОстаткиТоваров Цикл
		
		// Получим соответствующую строку табличной части документа
		СтрокаТаблицыТоваров = Объект.Товары[СтрокаТаблицыОстатков.НомерСтроки-1];
		
		// Установим полученные показатели
		СтрокаТаблицыТоваров.КоличествоКнижн = ?(СтрокаТаблицыТоваров.Коэффициент=0, СтрокаТаблицыОстатков.Количество, СтрокаТаблицыОстатков.Количество / СтрокаТаблицыТоваров.Коэффициент);
		СтрокаТаблицыТоваров.СуммаКнижн      = ?(Объект.ВалютаДокумента=ВалютаРегл, СтрокаТаблицыОстатков.СуммаРегл, СтрокаТаблицыОстатков.СуммаУпр);
		
		// Произведем получение и установку цены
		Если РежимПолученияЦеныПоСебестоимости Тогда
			СтрокаТаблицыТоваров.Цена = ?(СтрокаТаблицыТоваров.КоличествоКнижн*СтрокаТаблицыТоваров.Коэффициент=0, СтрокаТаблицыТоваров.СуммаКнижн, СтрокаТаблицыТоваров.СуммаКнижн/СтрокаТаблицыТоваров.КоличествоКнижн / СтрокаТаблицыТоваров.Коэффициент);
		Иначе
			// Получим цену по типу цен документа
			ОбработкаТабличнойЧастиТовары.УстановитьЦенуНоменклатуры(Объект, СтрокаТаблицыТоваров, ПараметрыДействия);
		КонецЕсли;
		
		// Произведем пересчет зависимых показателей строки
		РассчитатьСуммуСтроки("КоличествоКнижн", СтрокаТаблицыТоваров, ПараметрыДействия);
		
		// Корректировка не имеет смысла для последней строки
		Если ОстаткиТоваров.Индекс(СтрокаТаблицыОстатков)=ОстаткиТоваров.Количество()-1 Тогда
			Продолжить;
		КонецЕсли;
		
		// Исключаем текущую строку остатка из обхода
		СтрокаТаблицыОстатков.Активность = ЛОЖЬ;
		
		// Производим корректировку таблицы остатков товаров
		Для каждого ИсключаемоеПоле Из ПриоритетПолей Цикл
			
			// Пропускаем, если текущее поле и так не заполнено
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыТоваров[ИсключаемоеПоле.Ключ]) Тогда
				Продолжить;
			КонецЕсли;
			
			// Формируем структуру параметров поиска связанных строк
			ПараметрыОтбора = Новый Структура("Активность,Номенклатура,ДокументПередачи,ХарактеристикаНоменклатуры,Партия,ГТД", ИСТИНА);
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаТаблицыТоваров);
			
			// Очищаем одно из полей поиска
			ПараметрыОтбора.Вставить(ИсключаемоеПоле.Ключ, ИсключаемоеПоле.Значение);
			
			// Производим корректировку связанных строк таблицы остатков
			Для каждого СвязаннаяСтрокаОстатков Из ОстаткиТоваров.НайтиСтроки(ПараметрыОтбора) Цикл
				СвязаннаяСтрокаОстатков.Количество = СвязаннаяСтрокаОстатков.Количество - (СтрокаТаблицыОстатков.Количество + СтрокаТаблицыОстатков.ВычетКоличество);
				СвязаннаяСтрокаОстатков.СуммаУпр   = СвязаннаяСтрокаОстатков.СуммаУпр   - (СтрокаТаблицыОстатков.СуммаУпр   + СтрокаТаблицыОстатков.ВычетСуммаУпр);
				СвязаннаяСтрокаОстатков.СуммаРегл  = СвязаннаяСтрокаОстатков.СуммаРегл  - (СтрокаТаблицыОстатков.СуммаРегл  + СтрокаТаблицыОстатков.ВычетСуммаРегл);
				СвязаннаяСтрокаОстатков.ВычетКоличество = СвязаннаяСтрокаОстатков.ВычетКоличество + (СтрокаТаблицыОстатков.Количество + СтрокаТаблицыОстатков.ВычетКоличество);
				СвязаннаяСтрокаОстатков.ВычетСуммаУпр   = СвязаннаяСтрокаОстатков.ВычетСуммаУпр   + (СтрокаТаблицыОстатков.СуммаУпр   + СтрокаТаблицыОстатков.ВычетСуммаУпр);
				СвязаннаяСтрокаОстатков.ВычетСуммаРегл  = СвязаннаяСтрокаОстатков.ВычетСуммаРегл  + (СтрокаТаблицыОстатков.СуммаРегл  + СтрокаТаблицыОстатков.ВычетСуммаРегл);
			КонецЦикла;
			
		КонецЦикла;
		
		// Обнулим показатели текущей строки для упрощения отладки
		СтрокаТаблицыОстатков.Количество = 0;
		СтрокаТаблицыОстатков.СуммаУпр   = 0;
		СтрокаТаблицыОстатков.СуммаРегл  = 0;
		
	КонецЦикла;
	
	// Пересчитаем итоговую сумму документа
	ИтогиОперации = Документы.Инвентаризация.РассчитатьИтогиОперации(Объект);
	ЗаполнитьЗначенияСвойств(Объект, ИтогиОперации);
	
КонецФункции // ТоварыПересчитатьПоказателиПоДаннымУчета()

// Обработчик заполнения документа складскими остатками
//
Функция ТоварыЗаполнитьСкладскимиОстатками(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("ЗаполнитьПоказателиСтрокиПоДаннымУчета", ЛОЖЬ);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.СкладКомпании=ПараметрыЗаполнения.СкладКомпании Тогда
		Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании;
		СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	ОстаткиТоваров = ЗаполнениеДокументовСервер.ПолучитьСкладскиеОстатки(Объект, ПараметрыЗаполнения);
	ЯчеистыйСклад = Объект.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.Ячеистый
		Или Объект.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый;
	ЕстьЯчейки = ЕстьРеквизит(ОстаткиТоваров, "Ячейка");
	
	Для Каждого СтрокаТаблицы Из ОстаткиТоваров Цикл
		
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("Номенклатура",               СтрокаТаблицы.Номенклатура);
		ПараметрыОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицы.ХарактеристикаНоменклатуры);
		
		Если Объект.Товары.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура               = СтрокаТаблицы.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
		НоваяСтрока.ДокументПередачи           = Неопределено;
		НоваяСтрока.Партия                     = Неопределено;
		ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		
		Если ЯчеистыйСклад И ЕстьЯчейки И ЗначениеЗаполнено(СтрокаТаблицы.Ячейка) Тогда
			
			НоваяСтрока.Ячейка = СтрокаТаблицы.Ячейка;
			
		КонецЕсли;
		
		Если
			ПараметрыЗаполнения.ПараметрКоманды = "ТоварыЗаполнитьСкладскимиОстаткамиНоменклатуройСЯчейкойПоУмолчанию"
			И ПараметрыЗаполнения.Ячейка.Найти(НоваяСтрока.Ячейка) = Неопределено
		Тогда
			
			Объект.Товары.Удалить(НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТоварыПересчитатьПоказателиПоДаннымУчета(Объект, ПараметрыЗаполнения, ПараметрыДействия, ИСТИНА);
	
КонецФункции

// Обработчик заполнения документа по договору комиссии
//
Функция ТоварыЗаполнитьПоДоговоруКомиссии(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("ЗаполнитьПоказателиСтрокиПоДаннымУчета", ЛОЖЬ);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.ДоговорВзаиморасчетов = ПараметрыЗаполнения.ДоговорВзаиморасчетов Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = ПараметрыЗаполнения.ДоговорВзаиморасчетов.Владелец;
			КонтрагентПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
		Объект.ДоговорВзаиморасчетов = ПараметрыЗаполнения.ДоговорВзаиморасчетов;
		ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	// Получаем перечень товаров
	ТоварыПоДоговоруКомиссии = ЗаполнениеДокументовСервер.ПолучитьТоварыПоДоговоруКомиссии(Объект, ПараметрыЗаполнения);
	
	// Производим добавление в документ
	Для Каждого СтрокаТаблицы Из ТоварыПоДоговоруКомиссии Цикл
		
		// Формируем параметры поиска товара
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("Номенклатура",               СтрокаТаблицы.Номенклатура);
		ПараметрыОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицы.ХарактеристикаНоменклатуры);
		ПараметрыОтбора.Вставить("ДокументПередачи",           СтрокаТаблицы.ДокументПередачи);
		
		// Проверим, имеется ли текущая номенклатура в документе
		Если Объект.Товары.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Добавляем новую строку
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура               = СтрокаТаблицы.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
		НоваяСтрока.ДокументПередачи           = СтрокаТаблицы.ДокументПередачи;
		НоваяСтрока.Партия                     = Неопределено;
		
		// отработаем изменение номенклатуры
		ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		
	КонецЦикла;
	
	// Выполняем комплексный пересчет книжный показателей таблицы
	ТоварыПересчитатьПоказателиПоДаннымУчета(Объект, ПараметрыЗаполнения, ПараметрыДействия, ИСТИНА);
	
КонецФункции

// Обработчик заполнения документа выбранной группой номенклатуры
//
Функция ТоварыЗаполнитьПоГруппеНоменклатуры(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;

	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("ЗаполнитьПоказателиСтрокиПоДаннымУчета", ЛОЖЬ);
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	НоменклатураВГруппе.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		Номенклатура.Ссылка КАК Ссылка
	                      |	ИЗ
	                      |		Справочник.Номенклатура КАК Номенклатура
	                      |	ГДЕ
	                      |		Номенклатура.ЭтоГруппа = ЛОЖЬ
	                      |		И Номенклатура.ПометкаУдаления = ЛОЖЬ
	                      |		И Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Набор)
	                      |		И Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	                      |		И Номенклатура.Родитель = &ГруппаНоменклатуры
	                      |	
	                      |	ОБЪЕДИНИТЬ ВСЕ
	                      |	
	                      |	ВЫБРАТЬ
	                      |		НоменклатураСоставНабора.Номенклатура.Ссылка
	                      |	ИЗ
	                      |		Справочник.Номенклатура.СоставНабора КАК НоменклатураСоставНабора
	                      |	ГДЕ
	                      |		НоменклатураСоставНабора.Номенклатура.ЭтоГруппа = ЛОЖЬ
	                      |		И НоменклатураСоставНабора.Номенклатура.ПометкаУдаления = ЛОЖЬ
	                      |		И НоменклатураСоставНабора.Ссылка.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Набор)
	                      |		И НоменклатураСоставНабора.Ссылка.Родитель = &ГруппаНоменклатуры) КАК НоменклатураВГруппе
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Ссылка");
	Запрос.УстановитьПараметр("ГруппаНоменклатуры", ПараметрыЗаполнения.ГруппаНоменклатуры);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска = Новый Структура("Номенклатура", Выборка.Ссылка);
		РезультатПоиска = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		// добавляем строку
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Ссылка;
		НоваяСтрока.ДокументПередачи = Неопределено;
		НоваяСтрока.Партия           = Неопределено;
		// отработаем изменение номенклатуры
		ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
	КонецЦикла;

	// Выполняем комплексный пересчет книжный показателей таблицы
	ТоварыПересчитатьПоказателиПоДаннымУчета(Объект, ПараметрыЗаполнения, ПараметрыДействия, ИСТИНА);
	
КонецФункции // ТоварыЗаполнитьПоГруппеНоменклатуры()

// Обработчик заполнения документа выбранной по группе или всей номенклатурой
//
Функция ТоварыЗаполнитьНоменклатурой(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;

	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("ЗаполнитьПоказателиСтрокиПоДаннымУчета", ЛОЖЬ);
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Номенклатура.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Номенклатура КАК Номенклатура
	                      |ГДЕ
	                      |	Номенклатура.ЭтоГруппа = ЛОЖЬ
	                      |	И Номенклатура.ПометкаУдаления = ЛОЖЬ
	                      |	И Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Набор)
	                      |	И Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Ссылка");
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Ссылка;
		НоваяСтрока.ДокументПередачи = Неопределено;
		НоваяСтрока.Партия           = Неопределено;
		
		ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
	КонецЦикла;
	
	// Выполняем комплексный пересчет книжный показателей таблицы
	ТоварыПересчитатьПоказателиПоДаннымУчета(Объект, ПараметрыЗаполнения, ПараметрыДействия, ИСТИНА);

КонецФункции // ТоварыЗаполнитьВсейНоменклатурой()

// Обработчик сворачивания строк товаров
//
Функция ТоварыСвернутьОдинаковыеСтроки(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник; 
	ПараметрыДействия 	= Новый Структура;
	
	РежимПолученияЦеныПоСебестоимости = ПараметрыКоманды.Форма.РежимПолученияЦеныПоСебестоимости;
	
	// Выгрузим товары,затем свернем
	ТаблицаТоваров = Объект.Товары.Выгрузить();
	ТаблицаТоваров.Свернуть("Номенклатура,ЕдиницаИзмерения,Коэффициент,ХарактеристикаНоменклатуры,ДокументПередачи,Партия,ГТД","КоличествоФакт,СуммаФакт");
	Объект.Товары.Очистить();
	Объект.Товары.Загрузить(ТаблицаТоваров);
	
	// Обработаем изменение фактического количества
	Для Каждого СтрокаТовар Из Объект.Товары Цикл
		
		ПараметрыДействия.Вставить("КоличествоФакт", СтрокаТовар.КоличествоФакт);
		
		ТоварыКоличествоФактПриИзменении(Объект, СтрокаТовар, ПараметрыДействия);
		
	КонецЦикла;
	
	// Выполняем комплексный пересчет книжный показателей таблицы  
	ПараметрыДействия.Вставить("НеЗаполнятьКоличествоФакт", Истина);
	ТоварыПересчитатьПоказателиПоДаннымУчета(Объект, ПараметрыЗаполнения, ПараметрыДействия, РежимПолученияЦеныПоСебестоимости);
	
КонецФункции // ТоварыСвернутьОдинаковыеСтроки()

// Обработчик обнуления фактического количества
//
Функция ТоварыОбнулитьКоличествоФакт(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	Если НЕ Объект.Товары.Количество() = 0 Тогда
		
		МассивНолей = Новый Массив(Объект.Товары.Количество());
		
		// Заполним фактическое количество нулями
		ТаблицаТоваров = Объект.Товары.Выгрузить();
		ТаблицаТоваров.ЗагрузитьКолонку(МассивНолей,"КоличествоФакт");
		Объект.Товары.Загрузить(ТаблицаТоваров);
		
		// Обработаем изменение фактического количества
		Для Каждого СтрокаТовар Из Объект.Товары Цикл
			ТоварыКоличествоФактПриИзменении(Объект, СтрокаТовар);
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции // ТоварыОбнулитьКоличествоФакт()

// Обработчик заполнения расчетного количества фактическим
//
Функция ТоварыСравнятьРасчетФакт(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	РежимПолученияЦеныПоСебестоимости = ПараметрыКоманды.Форма.РежимПолученияЦеныПоСебестоимости;
	
	Если НЕ Объект.Товары.Количество() = 0 Тогда
		
		ТаблицаТоваров = Объект.Товары.Выгрузить();
		
		ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("КоличествоКнижн"),"КоличествоФакт");
		
		Объект.Товары.Загрузить(ТаблицаТоваров);
		
		// Обработаем изменение фактического количества
		Для Каждого СтрокаТовар Из Объект.Товары Цикл
			ТоварыКоличествоФактПриИзменении(Объект, СтрокаТовар);
		КонецЦикла;
		
	КонецЕсли;
	
	// Выполняем комплексный пересчет книжный показателей таблицы
	ТоварыПересчитатьПоказателиПоДаннымУчета(Объект, ПараметрыЗаполнения, ПараметрыДействия, РежимПолученияЦеныПоСебестоимости);
	
КонецФункции // ТоварыСравнятьРасчетФакт()

// Обработчик заполнения товаров при создании на основании Инв-ии ордерного склада
//
Процедура ОбработкаЗаполненияТовары_ИнвентаризацияОрдерногоСклада(ЭтотОбъект, ДанныеЗаполнения, ПараметрыДействия = Неопределено) Экспорт
	
	// Проверяем каждую строку ТЧ Товары обычной Инвентаризации. 
	Для Каждого ТекСтрока Из ЭтотОбъект.Товары Цикл
		
		КоличествоФакт = 0;
		НомерПроверяемойСтроки = ТекСтрока.НомерСтроки;
		
		Отбор = Новый Структура();
		Отбор.Вставить("Номенклатура",               ТекСтрока.Номенклатура);
		Отбор.Вставить("ХарактеристикаНоменклатуры", ТекСтрока.ХарактеристикаНоменклатуры);
		Отбор.Вставить("ЕдиницаИзмерения",           ТекСтрока.ЕдиницаИзмерения);
		Отбор.Вставить("Коэффициент",                ТекСтрока.Коэффициент);
		
		// Найдем в ордерной инвентаризации все строки с той же номенклатурой. 
		// Соберем все фактические количества оттуда. Это нужно для сохранения данных, которые пользователи ввели вручную. 
		СовпадающиеСтрокиОрдернаяИнвентаризацияМассив = ДанныеЗаполнения.Товары.НайтиСтроки(Отбор);
		
		Для Каждого СовпадающаяСтрокаОрдернаяИнвентаризация Из СовпадающиеСтрокиОрдернаяИнвентаризацияМассив Цикл
			
			КоличествоФакт = КоличествоФакт + СовпадающаяСтрокаОрдернаяИнвентаризация.КоличествоУчет;
			
		КонецЦикла;
		
		// Найдем в новой обычной инвентаризации все строки с той же номенклатурой.
		// Удалим все такие строки, кроме первой, которую сейчас рассматриваем. 
		СовпадающиеСтрокиИнвентаризацияМассив = ЭтотОбъект.Товары.НайтиСтроки(Отбор);
		
		Для Каждого СовпадающаяСтрока Из СовпадающиеСтрокиИнвентаризацияМассив Цикл
			
			Если НЕ СовпадающаяСтрока.НомерСтроки = НомерПроверяемойСтроки Тогда
				
				ЭтотОбъект.Товары.Удалить(СовпадающаяСтрока);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЯчейкиХраненияПоУмолчанию.ЯчейкаХранения КАК ЯчейкаХранения
		|ИЗ
		|	РегистрСведений.ЯчейкиХраненияПоУмолчанию КАК ЯчейкиХраненияПоУмолчанию
		|ГДЕ
		|	ЯчейкиХраненияПоУмолчанию.СкладКомпании = &СкладКомпании
		|	И ЯчейкиХраненияПоУмолчанию.Номенклатура = &Номенклатура";
		
		Запрос.УстановитьПараметр("Номенклатура", ТекСтрока.Номенклатура);
		Запрос.УстановитьПараметр("СкладКомпании", ЭтотОбъект.СкладКомпании);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Если РезультатЗапроса.Количество() > 0 Тогда
			ТекСтрока.Ячейка = РезультатЗапроса[0].ЯчейкаХранения;
		КонецЕсли;
		
		// Заполним строку ТЧ Товары стандартным способом. 
		// Затем заполним фактическое количество данными из ордерной инвентаризации. 
		Документы.Инвентаризация.ТоварыНоменклатураПриИзменении(ЭтотОбъект, ТекСтрока, ПараметрыДействия);
		ТекСтрока.Количество = КоличествоФакт;
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьИНВ",
		"ПФ_MXL_ИНВ3",
		НСтр("ru = 'ИНВ-3 (Инвентаризационная опись)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьИНВ",
		"ПФ_MXL_ИНВ19",
		НСтр("ru = 'ИНВ-19 (Сличительная ведомость)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.Инвентаризация",
		"ПФ_MXL_Инвентаризация",
		НСтр("ru = 'Инвентаризация (пустографка)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.Инвентаризация",
		"ПФ_MXL_ИтогиПоЛистам",
		НСтр("ru = 'Инвентаризация (итоги по листам)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьИНВ",
		"ПФ_MXL_ИНВ22",
		НСтр("ru = 'ИНВ-22 (Приказ о проведении инвентаризации)'"),
		СсылкаНаДокумент);
		
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати, 
		"Документ.Инвентаризация",
		"ПФ_MXL_ИнвентаризацияТоваров",
		НСтр("ru = 'Инвентаризация товаров на комиссии'"),
		СсылкаНаДокумент);
		
	УправлениеПечатьюАльфаАвто.ДобавитьУсловиеВидимостиПоследнейКоманды(КомандыПечати, 
		"ХозОперация", Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию);
		
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ИнвентаризацияТоваров") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ИнвентаризацияТоваров",
															НСтр("ru = 'Инвентаризация товаров на комиссии'"),
															ПечатьИнвентаризацияТоваров(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Инвентаризация") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_Инвентаризация",
															НСтр("ru = 'Инвентаризация (пустографка)'"),
															ПечатьИнвентаризация(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ИтогиПоЛистам") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ИтогиПоЛистам",
															НСтр("ru = 'Инвентаризация (итоги по листам)'"),
															ПечатьИтогиПоЛистам(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;

	
КонецПроцедуры // Печать()

// Формирует печатную форму "ИнвентаризацияТоваровНаКомиссии"
//
Функция ПечатьИнвентаризацияТоваров(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Инвентаризация_ИнвентаризацияТоваровНаКомиссии";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Инвентаризация.ПФ_MXL_ИнвентаризацияТоваров");
		
		ОбластьШапкаТаблицы    = ПривестиМакетПечатнойФормыИнвентаризации(Макет, Документ);
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// вывод заголовка документа
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ,
			НСтр("ru = 'Инвентаризация товаров на комиссии'"));
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПокупателя =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Контрагент, , ДополнительныеПараметры);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// готовим шапку
		НомерСтраницы = 2; НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента", Документ.ВалютаДокумента);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// готовим области строки
		ВыборкаТабличнойЧасти = Документ.Товары;
		Для каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,
				УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ));
			ОбластьСтрока.Параметры.КоличествоКнижн = Формат(СтрокаТЧ.КоличествоКнижн, ФорматВыводаКоличества);
			ОбластьСтрока.Параметры.КоличествоФакт  = Формат(СтрокаТЧ.КоличествоФакт,  ФорматВыводаКоличества);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				НомерСтраницыПред		  = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
	// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "Инвентаризация (пустографка)"
//
Функция ПечатьИнвентаризация(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Инвентаризация_Инвентаризация";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Инвентаризация.ПФ_MXL_Инвентаризация");
		
		// Настроим макет отчета
		// Удаляем колонку "ЯчейкаХранения", если ни в одной из номенклатур этот реквизит не заполнен.
		// Увеличиваем за ее счет колонку "Товар".
		ВыборкаТабличнойЧасти = Документ.Товары;
		ЕстьЯчейкиХранения = Ложь;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.Ячейка) Тогда
				ЕстьЯчейкиХранения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьЯчейкиХранения Тогда
			ОбластьТовар = Макет.Область("Товар");
			ОбластьЯчейкаХранения = Макет.Область("ЯчейкаХранения");
			ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ОбластьЯчейкаХранения.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьЯчейкаХранения, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		ОбластьШапкаТаблицы    = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ, "Инвентаризация");
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ПредставлениеСклада =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.СкладКомпании);
			
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// готовим шапку
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента", Документ.ВалютаДокумента);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// готовим области строки
		Для каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ);
			СтруктураСтроки.Вставить("Ячейка");
			ЯчейкаДляПечати = СокрЛП(СтрокаТЧ.Ячейка.Код);
			СтруктураСтроки.Ячейка = ?(НЕ ЗначениеЗаполнено(ЯчейкаДляПечати), " ", ЯчейкаДляПечати);
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,СтруктураСтроки);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				НомерСтраницыПред		  = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;

		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатьИнвентаризация()

// Формирует печатную форму "Инвентаризация (итоги по листам)"
//
Функция ПечатьИтогиПоЛистам(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Инвентаризация_ИнвентаризацияИтогиПоЛистам";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати,ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;

	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// для начала настроим макет
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Инвентаризация.ПФ_MXL_ИтогиПоЛистам");
				
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ, "Инвентаризация");
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		// вывод свойств
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		НомерСтраницы = 2;
		НомерСтраницыПред = НомерСтраницы;
	
		// теперь выводим шапку
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);	
	
		// готовим области строки
		СтруктураИтоговПоСтранице = Новый Структура("СуммаЗакупки,СуммаПродажи",0,0);	
	
		// заполним параметры шапки таблицы для следующего листа
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
		
		ТаблицаВременная=Новый ТаблицаЗначений();
		ТаблицаВременная.Колонки.Добавить("НомерЛиста");
		ТаблицаВременная.Колонки.Добавить("СуммаЗакупки");
		ТаблицаВременная.Колонки.Добавить("СуммаПродажи");
		
		ВыборкаТабличнойЧасти = Документ.Товары;
		Для Каждого СтрокаТовар Из ВыборкаТабличнойЧасти Цикл
			НоваяСтрока=ТаблицаВременная.Добавить();
			НоваяСтрока.НомерЛиста=СтрокаТовар.НомерЛиста;
			НоваяСтрока.СуммаЗакупки=СтрокаТовар.КоличествоФакт*СтрокаТовар.Цена;
			НоваяСтрока.СуммаПродажи=СтрокаТовар.КоличествоФакт*СтрокаТовар.ЦенаРозничная;
		КонецЦикла;
		ТаблицаВременная.Свернуть("НомерЛиста","СуммаЗакупки,СуммаПродажи");
		ТаблицаВременная.Сортировать("НомерЛиста Возр");
	
		// перебор строк
		Для каждого СтрокаТабличнойЧасти Из ТаблицаВременная Цикл
			// заполняем данные строки
			ОбластьСтрока.Параметры.Заполнить(СтрокаТабличнойЧасти);
			ОбластьСтрока.Параметры.СуммаЗакупки = Формат(СтрокаТабличнойЧасти.СуммаЗакупки,ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СуммаПродажи = Формат(СтрокаТабличнойЧасти.СуммаПродажи,ФорматВыводаСуммы);

			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если ТаблицаВременная.Индекс(СтрокаТабличнойЧасти) = ТаблицаВременная.Количество()-1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			// выводим строку, делая проверку попадания на лист
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока, ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ, мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				НомерСтраницыПред 		  = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			КонецЕсли;	
		
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТабличнойЧасти,СтруктураИтоговПоСтранице);	
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент,ОбластьИтогоПоСтранице,СтруктураИтоговПоСтранице,Документ);
		КонецЕсли;
		
		// итоги
		СуммаЗакупки = ТаблицаВременная.Итог("СуммаЗакупки");
		ОбластьПодвал.Параметры.СуммаЗакупки = Формат(СуммаЗакупки,ФорматВыводаСуммы);
		
		СуммаПродажи = ТаблицаВременная.Итог("СуммаПродажи");
		ОбластьПодвал.Параметры.СуммаПродажи = Формат(СуммаПродажи,ФорматВыводаСуммы);	
		УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент,ОбластьПодвал,,,НомерСтраницы,,Документ);		
				
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатьИтогиПоЛистам()

// Формирует печатную форму "Инвентаризационная опись (ИНВ-3)"
//
Функция ПолучитьДанныеДляПечатиИНВ3(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
		
	// данные документа
	ДанныеОбъекта.Вставить("Организация"             	, Объект.Организация);
	ДанныеОбъекта.Вставить("Валюта"        				, Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("Дата"                   	, Объект.Дата);
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти" 		, Объект.Товары);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  	, Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("Основание"        	 		, Объект.ОснованиеВид);
	ДанныеОбъекта.Вставить("ОснованиеДата"         		, Объект.ОснованиеДата);
	ДанныеОбъекта.Вставить("ОснованиеНомер"         	, Объект.ОснованиеНомер); 
	
	ДанныеОбъекта.Вставить("ДатаНачалаИнвентаризации"   , Объект.ДатаНачалаИнвентаризации); 
	ДанныеОбъекта.Вставить("ДатаОкончанияИнвентаризации", Объект.ДатаОкончанияИнвентаризации);  
	ДанныеОбъекта.Вставить("МОЛ"						, 
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект.СкладКомпании,"МОЛ")
	); 
	ДанныеОбъекта.Вставить("ИнвентаризационнаяКомиссия"	, Объект.ИнвентаризационнаяКомиссия.Выгрузить());	
	
	Возврат ДанныеОбъекта;
	
КонецФункции 

// Формирует печатную форму "Сличительная ведомость (ИНВ-19)"
//
Функция ПолучитьДанныеДляПечатиИНВ19(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ИнвентаризацияТоваров Тогда
		Если Объект.СкладКомпании.Розничный Тогда
			ВыборкаСтрокТовары = РегистрыНакопления.ОстаткиТоваровКомпании.СоздатьНаборЗаписей();
		Иначе
			ВыборкаСтрокТовары = РегистрыНакопления.ПартииТоваровКомпании.СоздатьНаборЗаписей();
		КонецЕсли; 
		ПростоеСписание = ИСТИНА;
	ИначеЕсли Объект.ХозОперация = Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию Тогда
		ВыборкаСтрокТовары = РегистрыНакопления.ПартииТоваровОтданные.СоздатьНаборЗаписей();
		ПростоеСписание = ЛОЖЬ;
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Для хоз операции'") + Символы.НПП + Объект.ХозОперация.Наименование + Символы.НПП + НСтр("ru = 'формирование ИНВ-19 не описано.'"));
		Возврат Неопределено;
	КонецЕсли; 
	ВыборкаСтрокТовары.Отбор.Регистратор.Значение = Объект.Ссылка;
	ВыборкаСтрокТовары.Прочитать();

	// Определимся откуда будем брать многострочную часть документа
	// если движения есть, то из регистра, иначе - из табличной части документа.
	ЕстьДвиженияПоРегистру = Ложь;
	Если ВыборкаСтрокТовары.Количество() > 0 Тогда
		ЕстьДвиженияПоРегистру = Истина;
	Иначе
		ВыборкаСтрокТовары = Объект.Товары;
	КонецЕсли; 

	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"             	, Объект.Организация);
	ДанныеОбъекта.Вставить("Валюта"        				, Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("Дата"                   	, Объект.Дата);
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти" 		, ВыборкаСтрокТовары);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  	, Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("Основание"         			, Объект.ОснованиеВид);
	ДанныеОбъекта.Вставить("ОснованиеДата"         		, Объект.ОснованиеДата);
	ДанныеОбъекта.Вставить("ОснованиеНомер"         	, Объект.ОснованиеНомер);
	ДанныеОбъекта.Вставить("ЕстьДвиженияПоРегистру"     , ЕстьДвиженияПоРегистру);
	ДанныеОбъекта.Вставить("ПростоеСписание"    		, ПростоеСписание);
		
	ДанныеОбъекта.Вставить("ДатаНачалаИнвентаризации"   , Объект.ДатаНачалаИнвентаризации); 
	ДанныеОбъекта.Вставить("ДатаОкончанияИнвентаризации", Объект.ДатаОкончанияИнвентаризации);  
	ДанныеОбъекта.Вставить("МОЛ"						, 
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект.СкладКомпании,"МОЛ")
	); 
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 			, 
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"ГлавныйБухгалтер")
	);
	Возврат ДанныеОбъекта;
КонецФункции

// Формирует печатную форму "Приказ (постановление, распоряжение) о проведении инвентаризации (ИНВ-22)"
//
Функция ПолучитьДанныеДляПечатиИНВ22(Объект) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Инвентаризация.Ссылка КАК Ссылка,
	|	Инвентаризация.Номер КАК Номер,
	|	Инвентаризация.Дата КАК Дата,
	|	Инвентаризация.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	Инвентаризация.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	Инвентаризация.ОснованиеВид КАК ОснованиеВид,
	|	Инвентаризация.ОснованиеДата КАК ОснованиеДата,
	|	Инвентаризация.ОснованиеНомер КАК ОснованиеНомер,
	|	Инвентаризация.Организация КАК Организация,
	|	Инвентаризация.Организация.КодПоОКПО КАК ОрганизацияКодПоОКПО,
	|	Инвентаризация.СкладКомпании.Представление КАК ПредставлениеСклада,
	|	Инвентаризация.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Инвентаризация.ИнвентаризационнаяКомиссия.(
	|		НомерСтроки КАК НомерСтроки,
	|		ЧленКомиссии КАК ЧленКомиссии,
	|		Председатель КАК Председатель
	|	) КАК ИнвентаризационнаяКомиссия,
	|	Инвентаризация.ПричинаПроведенияИнвентаризации КАК ПричинаПроведенияИнвентаризации
	|ИЗ
	|	Документ.Инвентаризация КАК Инвентаризация
	|ГДЕ
	|	Инвентаризация.Ссылка = &Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	Инвентаризация.Дата,
	|	Ссылка,
	|	Председатель УБЫВ";

	Возврат Запрос.Выполнить().Выбрать();

КонецФункции
	
#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВозвратОтПокупателя);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ИнвентаризацияОрдерногоСклада);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Переоценка);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.Инвентаризация);

КонецФункции

#КонецОбласти

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговора",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов"));
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	// TODO: Временное формирование товаров отданных
	ПартииТоваровОтданные = Объект.Движения.ПартииТоваровОтданные.Выгрузить();
	ПартииТоваровОтданные.Свернуть("ВидДвижения","СуммаУпр,СуммаСебестоимостиУпр");
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ПартииТоваровОтданные",
		ПартииТоваровОтданные);
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаДоговора", ДополнительныеПараметры.ДляПроведения.ВалютаДоговора);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Инвентаризация.Организация КАК Организация,
	|	Инвентаризация.Ссылка КАК Ссылка,
	|	Инвентаризация.Дата КАК Дата,
	|	Инвентаризация.ХозОперация КАК ХозОперация,
	|	Инвентаризация.ДокументОснование КАК ДокументОснование,
	|	Инвентаризация.Контрагент КАК Контрагент,
	|	Инвентаризация.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Инвентаризация.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	Инвентаризация.Ссылка КАК Сделка,
	|	Инвентаризация.СуммаДокумента КАК Сумма,
	|	Инвентаризация.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Инвентаризация.ВалютаДокумента КАК ВалютаДокумента,
	|	Инвентаризация.КурсДокумента КАК КурсДокумента,
	|	Инвентаризация.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.НеЗачитывать) КАК СпособЗачетаАвансов,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.Инвентаризация КАК Инвентаризация
	|ГДЕ
	|	Инвентаризация.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр, &ВалютаДоговора)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ХозОперация КАК ХозОперация,
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДоговора КАК ВалютаДоговора,
	|	ДанныеДокумента.Сделка КАК Сделка,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыВзаиморасчетов = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютВзаиморасчетов.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетов.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыВзаиморасчетов
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютВзаиморасчетов
	|		ПО ДанныеДокумента.ВалютаДоговора = КурсыВалютВзаиморасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	
	Если ДвиженияДокумента.ДляПроведения.ХозОперация <> Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.ДокументОснование КАК ДокументОснование,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Задолженность.ВалютаДоговора КАК ВалютаДоговора,
	|	Задолженность.Сделка КАК Сделка,
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр
	|ИЗ
	|	Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)";
	
	РезультатЗапросаДокумента = Запрос.Выполнить();
	
	Если РезультатЗапросаДокумента.Пустой() Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	Сумма = 0;
	Если ДвиженияДокумента.ДляПроведения.ПартииТоваровОтданные.Количество() = 0 Тогда
		
		ЗапросПартииОтданные = Новый Запрос;
		ЗапросПартииОтданные.Текст = "ВЫБРАТЬ
		|	ПартииТоваровОтданные.ВидДвижения КАК ВидДвижения,
		|	СУММА(ПартииТоваровОтданные.СуммаУпр) КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.ПартииТоваровОтданные КАК ПартииТоваровОтданные
		|ГДЕ
		|	ПартииТоваровОтданные.Регистратор = &Регистратор
		|	И ПартииТоваровОтданные.ВидДвижения = &ВидДвижения
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваровОтданные.ВидДвижения";
		ЗапросПартииОтданные.УстановитьПараметр("Регистратор", ДвиженияДокумента.ДляПроведения.Ссылка);
		ЗапросПартииОтданные.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
		
		ПартииОтданные = ЗапросПартииОтданные.Выполнить().Выгрузить();
		
	Иначе
		
		ПартииОтданные = ДвиженияДокумента.ДляПроведения.ПартииТоваровОтданные;
		
	КонецЕсли;
	
	СтрокаСуммы = ПартииОтданные.Найти(
		ВидДвиженияНакопления.Расход,
		"ВидДвижения");
	
	Если СтрокаСуммы <> Неопределено Тогда
		
		Сумма = СтрокаСуммы.СуммаУпр;
		
	КонецЕсли;
	
	Если Сумма = 0 Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	ДанныеОбОплате = ОбменДаннымиСлужебный.РезультатЗапросаВСтруктуру(РезультатЗапросаДокумента);
	ДанныеОбОплате.Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
		Сумма,
		Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
		ДанныеОбОплате.КурсВалютыУпр,
		ДанныеОбОплате.ВалютаДокумента,
		ДанныеОбОплате.КурсДокумента);
	
	РасчетыСКонтрагентамиСервер.ДополнитьРасчетыСКонтрагентом(
		РасчетыСКонтрагентами,
		ДанныеОбОплате,
		Неопределено,
		Отказ);
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ,
		Ложь);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли