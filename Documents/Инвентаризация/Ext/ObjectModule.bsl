// Модуль документа "Инвентаризация"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СкладКомпании) И НЕ ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ВыполненоЗаполнениеНаОсновании", Неопределено)=Неопределено Тогда
		Для каждого СтрокаТоваров Из Товары Цикл
			СтрокаТоваров.КоличествоФакт = СтрокаТоваров.Количество;
		КонецЦикла;
	КонецЕсли;
	
	// Могут быть повторяющиеся строки, свернем их
	ТаблицаТоваров = Товары.Выгрузить();
	ТаблицаТоваров.Свернуть("Номенклатура,ЕдиницаИзмерения,Коэффициент,Цена,ЦенаРозничная,ХарактеристикаНоменклатуры,ДокументПередачи,Партия,ГТД,КоличествоКнижн,СуммаКнижн","КоличествоФакт,СуммаФакт");
	
	Если НЕ ТаблицаТоваров.Количество()=Товары.Количество() Тогда
		
		Товары.Загрузить(ТаблицаТоваров);
		
		Для Каждого СтрокаТовар Из Товары Цикл
			Документы.Инвентаризация.ТоварыКоличествоФактПриИзменении(ЭтотОбъект, СтрокаТовар, ДополнительныеСвойства.ПараметрыДействия);
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтатьяСписанияОбнаруженнойНедостачиТМЦ) Тогда
		СтатьяСписанияОбнаруженнойНедостачиТМЦ = Справочники.СтатьиДоходовИРасходов.СписаниеОбнаруженнойНедостачиТМЦ;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтатьяОприходованияОбнаруженныхИзлишковТМЦ) Тогда
		СтатьяОприходованияОбнаруженныхИзлишковТМЦ = Справочники.СтатьиДоходовИРасходов.ОприходованиеОбнаруженныхИзлишковТМЦ;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РежимКорректировкиКоличества) Тогда
		РежимКорректировкиКоличества = ПраваИНастройкиПользователя.Значение("КорректировкаКоличестваВИнвентаризации", ЭтотОбъект);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		ТипЦен = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенЗакупки", ЭтотОбъект);
	КонецЕсли;
	
	Документы.Инвентаризация.ТоварыПересчитатьПоказателиПоДаннымУчета(ЭтотОбъект, , ДополнительныеСвойства.ПараметрыДействия);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Получаем таблицу признаков ведения учета для по товарам табличной части
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Номенклатура.ТипНоменклатуры.АвтоСписаниеХарактеристик = ЗНАЧЕНИЕ(Перечисление.РежимыАвтоСписанияХарактеристик.РучноеСписание)
	|				ИЛИ Номенклатура.ТипНоменклатуры.АвтоСписаниеХарактеристик = ЗНАЧЕНИЕ(Перечисление.РежимыАвтоСписанияХарактеристик.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РучноеСписаниеХарактеристик,
	|	ВЫБОР
	|		КОГДА Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 1
	|				ИЛИ Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 2
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчетВедется
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокНоменклатуры",Товары.ВыгрузитьКолонку("Номенклатура"));
	ПараметрыУчета = Запрос.Выполнить().Выгрузить();
	
	// Выполняем проверку корректности заполнения
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		
		// Проверять нужно только те строки у которых заполнена номенклатура и не заполнена характеристика.
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура)
			ИЛИ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры) Тогда
			Продолжить;
		КонецЕсли;
		
		// получим параметры ведения учета по текущей номенклатуре
		ПараметрыУчетаНоменклатуры = ПараметрыУчета.Найти(СтрокаТабличнойЧасти.Номенклатура, "Номенклатура");
		
		Если ПараметрыУчетаНоменклатуры.РучноеСписаниеХарактеристик Тогда
			Продолжить;
		КонецЕсли;
		
		// Установим признак запрета автоматического списания
		ТоварыЗапретАвтоСписанияХарактеристик = СтрокаТабличнойЧасти.Количество > 0;
		
		// Проверим и сообщим пользователю если что-то не так
		Если ПараметрыУчетаНоменклатуры.УчетВедется И ТоварыЗапретАвтоСписанияХарактеристик Тогда
			
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары",СтрокаТабличнойЧасти.НомерСтроки, "ХарактеристикаНоменклатуры");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Поле ""%1"" строки %2 таблицы ""%3"" не заполнено'"),
					"ХарактеристикаНоменклатуры",
					СтрокаТабличнойЧасти.НомерСтроки,
					"Товары"
				),
				,
				ПутьКТабличнойЧасти,
				"Объект",
				Отказ
			);

		КонецЕсли;
		
	КонецЦикла;
	
	ОбработкаСобытийДокументаСервер.ПроверитьКорректностьТоваровКомиссионныхДокументов(ЭтотОбъект, Отказ);
	
	// Проверим заполнение РНПТ у послеживаемого товара
	УчетПрослеживаемыхТоваровСервер.ПроверитьЗаполнениеРНПТПрослеживаемогоТовара(ЭтотОбъект);
	УчетПрослеживаемыхТоваровСервер.ПроверитьЗаполнениеРНПТПрослеживаемогоТовара(ЭтотОбъект, , , "ГТДИзлишков");
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Произведем очистку не использующихся в текущем контексте реквизитов
	ОбработкаСобытийДокументаСервер.ОчиститьПолеЦенаРозничнаяДляНеРозничныхСкладов(ЭтотОбъект, СкладКомпании);
	
	// Проверим, нет ли в наличие проведенных чеков
	Если РежимЗаписи=РежимЗаписиДокумента.Проведение И ХозОперация=Справочники.ХозОперации.ИнвентаризацияТоваров И СкладКомпании.Розничный Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиТоваровКомпании.Регистратор
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваровКомпании КАК ОстаткиТоваровКомпании
		|ГДЕ
		|	ОстаткиТоваровКомпании.СкладКомпании = &СкладКомпании 
		|	И ОстаткиТоваровКомпании.Регистратор ССЫЛКА Документ.Чек
		|	И ОстаткиТоваровКомпании.Период МЕЖДУ &ДатаНачалоДня И &ДатаКонецДня";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ДатаНачалоДня", НачалоДня(Дата));
		Запрос.УстановитьПараметр("ДатаКонецДня",  КонецДня (Дата));
		Запрос.УстановитьПараметр("СкладКомпании", СкладКомпании);
		
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Инвентаризацию можно проводить только после закрытия кассовой смены.'"), ЭтотОбъект, "СкладКомпании",, Отказ);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПолучатьКнижноеКоличествоИзПартий = Документы.Инвентаризация.ПолучитьФлагПолучатьКнижноеКоличествоИзПартий();
	Комиссия                          = (ХозОперация = Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию);
	// проверяем, присутствуют ли партии в табличной части
	ЕстьПартии = Ложь;
	Для Каждого СтрокаТовар Из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовар.Партия) Тогда
			ЕстьПартии = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		Если (НЕ Комиссия) И (ЗначениеЗаполнено(СтрокаТЧ.ДокументПередачи)) Тогда
			СтрокаТЧ.ДокументПередачи = Неопределено;
		КонецЕсли;
		
		Если (НЕ ЕстьПартии) ИЛИ Комиссия ИЛИ (НЕ ПолучатьКнижноеКоличествоИзПартий) Тогда
			СтрокаТЧ.Партия = Неопределено;
			СтрокаТЧ.ГТД    = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если мы проводим документ задним числом, то пересчитаем количество расчетное
	Если РежимЗаписи=РежимЗаписиДокумента.Проведение И РежимКорректировкиКоличества=Перечисления.РежимКорректировкиКоличестваВИнвентаризации.КорректироватьКнижноеКоличество Тогда
		
		Если НЕ ЭтотОбъект.Ссылка.Пустая() Тогда
			Движения.ПартииТоваровКомпании.Записать(Истина);
		КонецЕсли;
		
		ПараметрыДействия = Новый Структура;
		ПараметрыДействия.Вставить("НеЗаполнятьКоличествоФакт", Истина);
		
		Документы.Инвентаризация.ТоварыПересчитатьПоказателиПоДаннымУчета(ЭтотОбъект,, ПараметрыДействия);
		
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоЗаказамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПартиямПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры //ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Проверка ТЧ на наличие резервов
	Если ХозОперация<>Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ИнвентаризацияТовары.Номенклатура КАК Номенклатура,
		|	ИнвентаризацияТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ИнвентаризацияТовары.Количество КАК Количество
		|ПОМЕСТИТЬ ТЧ
		|ИЗ
		|	Документ.Инвентаризация.Товары КАК ИнвентаризацияТовары
		|ГДЕ
		|	ИнвентаризацияТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТЧ.Номенклатура КАК Номенклатура,
		|	ТЧ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ОстаткиТоваровКомпанииОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(
		|			&МоментВремени,
		|			Номенклатура В
		|					(ВЫБРАТЬ
		|						ТЧ.Номенклатура КАК Номенклатура
		|					ИЗ
		|						ТЧ КАК ТЧ)
		|				И ХарактеристикаНоменклатуры В
		|					(ВЫБРАТЬ
		|						ТЧ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|					ИЗ
		|						ТЧ КАК ТЧ)
		|				И СкладКомпании = &СкладКомпании) КАК ОстаткиТоваровКомпанииОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТЧ КАК ТЧ
		|		ПО ТЧ.Номенклатура = ОстаткиТоваровКомпанииОстатки.Номенклатура
		|			И ТЧ.ХарактеристикаНоменклатуры = ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры
		|ГДЕ
		|	ОстаткиТоваровКомпанииОстатки.КоличествоОстаток - ОстаткиТоваровКомпанииОстатки.РезервОстаток + ЕСТЬNULL(ТЧ.Количество, 0) < 0";
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.УстановитьПараметр("МоментВремени",?(РежимПроведения = РежимПроведенияДокумента.Оперативный,Неопределено,МоментВремени()));
		Запрос.УстановитьПараметр("СкладКомпании",СкладКомпании);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Отказ = Истина;
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Отбор = Новый Структура;
				Отбор.Вставить("Номенклатура",Выборка.Номенклатура);
				Если ЗначениеЗаполнено(Выборка.ХарактеристикаНоменклатуры) Тогда
					Отбор.Вставить("ХарактеристикаНоменклатуры",Выборка.ХарактеристикаНоменклатуры);
				КонецЕсли;
				СтрокаТЧ = Товары.НайтиСтроки(Отбор);
				Текст = НСтр("ru = 'Для номенклатуры %1 в строке %2 есть резерв. Проведение невозможно.'");
				Текст = СтрШаблон(Текст, Строка(СтрокаТЧ[0].Номенклатура), Строка(СтрокаТЧ[0].НомерСтроки));
				Текст = НСтр("ru = '"+ Текст + "'");
				
				ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары",СтрокаТЧ[0].НомерСтроки, "Номенклатура");
				ОбщегоНазначения.СообщитьПользователю(Текст,,ПутьКТабличнойЧасти, "Объект");
			КонецЦикла;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// У нас не стандартная таблица, поэтому сформирует свой результат запроса по товарам.
	РезультатЗапросаПоТоварамИзлишки   = ПолучитьРезультатЗапросаПоТоварам(ЭтотОбъект);
	РезультатЗапросаПоТоварамНедостачи = ПолучитьРезультатЗапросаПоТоварам(ЭтотОбъект,"Недостачи");
	
	// определим вид проводки
	Если ХозОперация<>Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию Тогда
		ОстаткиТоваровКомпанииПередПроведением = ДополнительныеСвойства.ДвиженияПередПроведением.ОстаткиТоваровКомпании.Скопировать();
		
		НаборЗаписейОстатки = Движения.ОстаткиТоваровКомпании;
		// 1. Списываем недостачи
		Если НЕ РезультатЗапросаПоТоварамНедостачи.Пустой() Тогда
			ДополнительныеСвойства.ДвиженияПередПроведением.ОстаткиТоваровКомпании =
				ОбщегоНазначенияАвтосалон.ВыгрузитьТаблицуЗначений(
					ОстаткиТоваровКомпанииПередПроведением,
					Новый Структура("ВидДвижения", ВидДвиженияНакопления.Расход));
			НаборЗаписейОстатки.ДокументОбъект            = ЭтотОбъект;
			НаборЗаписейОстатки.СкладКомпании             = СкладКомпании;
			НаборЗаписейОстатки.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварамНедостачи;
			НаборЗаписейОстатки.ДвиженияПоРознице         = Истина;
			НаборЗаписейОстатки.ЕстьРозничнаяСумма        = Истина;
			НаборЗаписейОстатки.Резервировать             = Истина;
			Отказ = НЕ НаборЗаписейОстатки.Расход() ИЛИ Отказ;
		КонецЕсли;
		Если Отказ Тогда
			Возврат; // дальше смысла не имеет
		КонецЕсли;
		
		// Снимаем резервы по заказам (если таковые были)
		НаборЗаписейЗаказыПокупателей = Движения.ЗаказыПокупателей;
		НаборЗаписейЗаказыПокупателей.РежимПроведения = РежимПроведения;
		НаборЗаписейЗаказыПокупателей.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейЗаказыПокупателей.РезультатЗапросаПоТоварам = НаборЗаписейОстатки.Выгрузить();
		НаборЗаписейЗаказыПокупателей.СкладКомпании = СкладКомпании;
		Отказ=НЕ НаборЗаписейЗаказыПокупателей.СнятиеРезервовЗаказовПокупателей() ИЛИ Отказ;
		
		// 2. Приходуем излишки
		Если НЕ РезультатЗапросаПоТоварамИзлишки.Пустой() Тогда
			ДополнительныеСвойства.ДвиженияПередПроведением.ОстаткиТоваровКомпании =
				ОбщегоНазначенияАвтосалон.ВыгрузитьТаблицуЗначений(
					ОстаткиТоваровКомпанииПередПроведением,
					Новый Структура("ВидДвижения", ВидДвиженияНакопления.Приход));
			НаборЗаписейОстатки.ДокументОбъект            = ЭтотОбъект;
			НаборЗаписейОстатки.СкладКомпании             = СкладКомпании;
			НаборЗаписейОстатки.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварамИзлишки;
			НаборЗаписейОстатки.ДвиженияПоРознице         = Истина;
			НаборЗаписейОстатки.ЕстьРозничнаяСумма        = Истина;
			НаборЗаписейОстатки.Резервировать             = Ложь;
			Отказ = НЕ НаборЗаписейОстатки.Приход() ИЛИ Отказ;
		КонецЕсли;

		ДополнительныеСвойства.ДвиженияПередПроведением.ОстаткиТоваровКомпании = ОстаткиТоваровКомпанииПередПроведением;
	КонецЕсли;
	
	// двигаем границу последовательности заказов
	Если ХозОперация<>Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию Тогда 	
		РаботаСГраницами.СдвинутьГраницуЗаказов(Ссылка,  ДополнительныеСвойства, Движения);
	КонецЕсли;
	
	// Проведем партии товаров.
	Отказ = НЕ ПровестиПоПартиям(РежимПроведения,Ссылка, РезультатЗапросаПоТоварамИзлишки, РезультатЗапросаПоТоварамНедостачи) ИЛИ Отказ;
	
	// Если инвентаризация на розничном складе, то установим измененные розничные цены.
	Если НЕ Отказ И СкладКомпании.Розничный И НЕ СкладКомпании.ТипЦенРозничнойТорговли.Рассчитывается Тогда
		// устанавливаем цены.
		НаборЗаписейЦены = Движения.Цены;
		НаборЗаписейЦены.ДокументОбъект            = ЭтотОбъект;
		НаборЗаписейЦены.Контрагент                = Неопределено;
		НаборЗаписейЦены.ТипЦен                    = СкладКомпании.ТипЦенРозничнойТорговли;
		НаборЗаписейЦены.РезультатЗапросаПоТоварам = Неопределено;
		НаборЗаписейЦены.ИмяРеквизитаЦена          = "ЦенаРозничная";
		НаборЗаписейЦены.ПодразделениеКомпании     = СкладКомпании.ПодразделениеКомпании;
		Отказ = НЕ НаборЗаписейЦены.УстановитьЦены() ИЛИ Отказ;
	КонецЕсли;
	
	// Проверим налиие прослеживаемых товаров, которые были реализованы
	Если НЕ Отказ Тогда
		Движения.ПартииТоваровКомпании.Записать();
		Движения.ГТДПартийТоваровКомпании.Записать();
	КонецЕсли;
	ТаблицаПрослеживаемыхТоваров = Документы.Инвентаризация.ОперацииСПрослеживаемымиТоварами(
		ЭтотОбъект);
	НаборЗаписейОперацииПрослеживаемости = Движения.ОперацииПрослеживаемыхТоваров;
	НаборЗаписейОперацииПрослеживаемости.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейОперацииПрослеживаемости.ТаблицаПрослеживаемыхТоваров = ТаблицаПрослеживаемыхТоваров;
	Если НЕ НаборЗаписейОперацииПрослеживаемости.ДобавитьОперациюПрослеживаемости() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// сбросим переменные
	РезультатЗапросаПоТоварамИзлишки   = Неопределено;
	РезультатЗапросаПоТоварамНедостачи = Неопределено;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании справочника "Контрагенты"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Контрагенты(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Заполняем специфические для данной операции реквизиты
	ХозОперация = Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию;
	Документы.Инвентаризация.ХозОперацияПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Контрагенты()

// Производит заполнение объекта на основании "Инвентаризации ордерного склада"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ИнвентаризацияОрдерногоСклада(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДополнительныеСвойства.ПараметрыДействия.Вставить("РежимПолученияЦеныПоСебестоимости", Истина);
	
	Документы.Инвентаризация.ОбработкаЗаполненияТовары_ИнвентаризацияОрдерногоСклада(ЭтотОбъект, ДанныеЗаполнения, ДополнительныеСвойства.ПараметрыДействия);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Контрагенты()

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// У нас не стандартная таблица, поэтому сформирует свой результат запроса по товарам.
//
// Параметры:
//  ШапкаДокумента - ДокументСсылка или Выборка.
//  Режим          - Строка - указывает режим запроса.
//
// Возвращаемое значение:
//  Возвращает результат запроса.
//
Функция ПолучитьРезультатЗапросаПоТоварам(ШапкаДокумента,Режим="Излишки")
  Если Режим="Излишки" Тогда
        ТекстЗапроса="
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ИнвентаризацияТовары.Номенклатура,
        |	ИнвентаризацияТовары.ХарактеристикаНоменклатуры,
        |	ИнвентаризацияТовары.ДокументПередачи КАК ДокументПередачи,";
        Если ШапкаДокумента.ХозОперация=Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию Тогда
            ТекстЗапроса=ТекстЗапроса+"
            |	ИнвентаризацияТовары.Партия КАК Партия,";
        КонецЕсли;
		ТекстЗапроса=ТекстЗапроса+"
		|	ИнвентаризацияТовары.ГТДИзлишков КАК ГТД,";
        
		ТекстЗапроса=ТекстЗапроса+"
		|	0 КАК СуммаНДС,";
        
        Если ШапкаДокумента.ХозОперация<>Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию Тогда
            Если ЗначениеЗаполнено(ШапкаДокумента.СкладКомпании) И ШапкаДокумента.СкладКомпании.Розничный Тогда
                ТекстЗапроса=ТекстЗапроса+"
                |	ИнвентаризацияТовары.СуммаРозничная КАК СуммаРозничная,
                |	ИнвентаризацияТовары.ЦенаРозничная КАК ЦенаРозничная,";
            Иначе
                ТекстЗапроса=ТекстЗапроса+"
                |	0 КАК СуммаРозничная,
                |	0 КАК ЦенаРозничная,";
            КонецЕсли;	
        КонецЕсли;
		
        ТекстЗапроса=ТекстЗапроса+"
		|	ИнвентаризацияТовары.Сумма КАК СуммаВсего,
        |	ИнвентаризацияТовары.Количество*ИнвентаризацияТовары.Коэффициент КАК Количество
        |ИЗ
        |	Документ.Инвентаризация.Товары КАК ИнвентаризацияТовары
        |ГДЕ
        |	  ИнвентаризацияТовары.Ссылка=&Ссылка
        |	И (
        |		ИнвентаризацияТовары.Количество>0
        |	)
        |";
        
        Запрос=Новый Запрос();
        Запрос.УстановитьПараметр("Ссылка",ШапкаДокумента.Ссылка);
        Запрос.Текст=ТекстЗапроса;
        Возврат Запрос.Выполнить();
        
    Иначе
        // пройдемся по табличной части и сформируем таблицу значений
        Если ШапкаДокумента.ХозОперация=Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию Тогда
            ИмяРегистрПартий = "ПартииТоваровОтданные";
        Иначе
            ИмяРегистрПартий = "ПартииТоваровКомпании";
        КонецЕсли;
        
        ТекстЗапроса="		
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ИнвентаризацияТовары.Номенклатура КАК Номенклатура,
        |	ИнвентаризацияТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
        |	ИнвентаризацияТовары.ДокументПередачи КАК ДокументПередачи,
        |	ИнвентаризацияТовары.Партия КАК Партия,
        |	ИнвентаризацияТовары.ГТД КАК ГТД,
        |	0 КАК СуммаНДС,";
        
        Если ШапкаДокумента.ХозОперация<>Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию Тогда
            ТекстЗапроса=ТекстЗапроса+"
            |	ИнвентаризацияТовары.Сумма*(-1) КАК СуммаВсего,";
            Если ЗначениеЗаполнено(ШапкаДокумента.СкладКомпании) И ШапкаДокумента.СкладКомпании.Розничный Тогда
                ТекстЗапроса=ТекстЗапроса+"
                |	ИнвентаризацияТовары.СуммаРозничная*(-1) КАК СуммаРозничная,
                |	ИнвентаризацияТовары.ЦенаРозничная КАК ЦенаРозничная,";
            Иначе
                ТекстЗапроса=ТекстЗапроса+"
                |	0 КАК СуммаРозничная,
                |	0 КАК ЦенаРозничная,";
            КонецЕсли;	
        Иначе
            ТекстЗапроса=ТекстЗапроса+"
            |	ИнвентаризацияТовары.Сумма*(-1) КАК СуммаВсего,";
        КонецЕсли;
        ТекстЗапроса=ТекстЗапроса+"
        |	ИнвентаризацияТовары.Количество*(-1)*ИнвентаризацияТовары.Коэффициент КАК Количество
        |ИЗ
        |	Документ.Инвентаризация.Товары КАК ИнвентаризацияТовары
        |ГДЕ
        |	  ИнвентаризацияТовары.Ссылка=&Ссылка
        |	И (
        |		ИнвентаризацияТовары.Количество*(-1)>0
        |	)
        |";
        
        Запрос=Новый Запрос();
        Запрос.УстановитьПараметр("Ссылка",ШапкаДокумента.Ссылка);
        Запрос.УстановитьПараметр("ПустаяХарактеристика",Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
        Запрос.УстановитьПараметр("ПустаяПартия",Неопределено);
        Запрос.Текст=ТекстЗапроса;
        Возврат Запрос.Выполнить(); 
    КонецЕсли;
КонецФункции // ПолучитьРезультатЗапросаПоТоварам()

// возвращает выборку по шапке
//
// Параметры:
//  ДокументСсылка - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Выборка - выборка по шапке
//
Функция ПолучитьШапкуДокумента(ДокументСсылка) Экспорт
	Запрос=Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ТипЦен КАК ТипЦен,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.Организация КАК Организация,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Док.Проект КАК Проект,
	/////////// ПРИВАТ ////////////
	|	Док.СкладКомпании КАК СкладКомпании,
	|	Док.Контрагент КАК Контрагент,
	|	Док.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Док.СтатьяСписанияОбнаруженнойНедостачиТМЦ КАК СтатьяСписанияОбнаруженнойНедостачиТМЦ,
	|	Док.СтатьяОприходованияОбнаруженныхИзлишковТМЦ КАК СтатьяОприходованияОбнаруженныхИзлишковТМЦ
	|
	|ИЗ
	|	Документ."+Метаданные().Имя+" КАК Док
	|ГДЕ
	|	Док.Ссылка=&Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции // ПолучитьШапкуДокумента()

// формирует движения документа по партионным регистрам
//
// Параметры:
//  Режим           - режим проведения (оперативный/неоперативный)
//  ДокументСсылка  - ссылка на документ который надо допровести по партиям.
//
// Возвращаемое значение:
//  Возвращает Истина - все ОК, ложь - чего-то не так.
//
Функция ПровестиПоПартиям(Режим,ДокументСсылка, РезультатЗапросаПоТоварамИзлишки = Неопределено, РезультатЗапросаПоТоварамНедостачи = Неопределено) Экспорт
	Отказ=Ложь;
	
	// получим шапку документа
	ШапкаДокумента=ПолучитьШапкуДокумента(ДокументСсылка);
	
	// Получим способ ведения баланса.
	БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
		
	// Проверим, если подразделение проводиться по партиям "отложенно", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям=Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
		Возврат НЕ Отказ;
	КонецЕсли;
	
	// У нас не стандартная таблица, поэтому сформирует свой результат запроса по товарам.
	Если РезультатЗапросаПоТоварамИзлишки=Неопределено Тогда РезультатЗапросаПоТоварамИзлишки=ПолучитьРезультатЗапросаПоТоварам(ШапкаДокумента); КонецЕсли;
	Если РезультатЗапросаПоТоварамНедостачи=Неопределено Тогда РезультатЗапросаПоТоварамНедостачи=ПолучитьРезультатЗапросаПоТоварам(ШапкаДокумента,"Недостачи"); КонецЕсли;
    // определим вид проводки
	Если ШапкаДокумента.ХозОперация<>Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию Тогда
		НаборЗаписейПартии=Движения.ПартииТоваровКомпании;
		
		// проверяем, присутствуют ли партии в табличной части
		ЕстьПартии = Ложь;
		Для Каждого СтрокаТовар Из Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТовар.Партия) Тогда
				ЕстьПартии = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// 2. Приходуем излишки
		Если НЕ РезультатЗапросаПоТоварамИзлишки.Пустой() Тогда
			НаборЗаписейПартии.ДокументОбъект            = ЭтотОбъект;
			НаборЗаписейПартии.СкладКомпании             = ШапкаДокумента.СкладКомпании;
			НаборЗаписейПартии.Организация               = ШапкаДокумента.Организация;
			НаборЗаписейПартии.ИмяРеквизитаДокумент      = Неопределено;
			НаборЗаписейПартии.СтатусПартии              = Перечисления.СтатусыПартий.ТоварКупленный;
			НаборЗаписейПартии.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварамИзлишки;
			НаборЗаписейПартии.ШапкаДокумента            = ШапкаДокумента;
			Отказ = НЕ НаборЗаписейПартии.Приход() ИЛИ Отказ;
		КонецЕсли;
		
		// 3. Списываем недостачи
		Если НЕ РезультатЗапросаПоТоварамНедостачи.Пустой() Тогда
			НаборЗаписейПартии.ДокументОбъект            = ЭтотОбъект;
			НаборЗаписейПартии.СкладКомпании             = ШапкаДокумента.СкладКомпании;
			НаборЗаписейПартии.Организация               = ШапкаДокумента.Организация;
			НаборЗаписейПартии.ИмяРеквизитаДокумент      = ?(ЕстьПартии,"Партия","");
			НаборЗаписейПартии.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварамНедостачи;
			НаборЗаписейПартии.СтатусПартии              = Неопределено;
			НаборЗаписейПартии.ШапкаДокумента            = ШапкаДокумента;
			Отказ = НЕ НаборЗаписейПартии.Расход() ИЛИ Отказ;
		КонецЕсли;
		
		// 4. Зачитываем принятые на реализацию товары, которые были списаны инвентаризацией.
		НаборЗаписейРеализованныеТовары = Движения.РеализованныеТовары;
		НаборЗаписейРеализованныеТовары.ДокументОбъект            = ЭтотОбъект;
		НаборЗаписейРеализованныеТовары.Списание                  = Истина;
		НаборЗаписейРеализованныеТовары.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварамНедостачи;
		НаборЗаписейРеализованныеТовары.ШапкаДокумента            = ШапкаДокумента;
		Отказ = НЕ НаборЗаписейРеализованныеТовары.Приход() ИЛИ Отказ;
		
		// 5. Доходы и расходы
		ТаблицаЗначений = НаборЗаписейПартии.Выгрузить();
		СуммаРасхода    = 0;
		СуммаДохода     = 0;
		Для Каждого СтрокаТаблицыЗначения Из ТаблицаЗначений Цикл
			Если СтрокаТаблицыЗначения.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
				СуммаРасхода = СуммаРасхода + СтрокаТаблицыЗначения.СуммаУпр;
			Иначе
				СуммаДохода = СуммаДохода + СтрокаТаблицыЗначения.СуммаУпр;
			КонецЕсли;
		КонецЦикла;                                                  
		
		ТаблицаЗначений.Свернуть("ВидДвижения");
		СтрокаТЗ = ТаблицаЗначений.Найти(ВидДвиженияНакопления.Расход,"ВидДвижения");
		Если СтрокаТЗ<>Неопределено Тогда
			НаборЗаписейДиР 						= Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект 			= ЭтотОбъект;
			Если БалансВедетсяПоПодразделениям Тогда
				НаборЗаписейДиР.Подразделение = ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДиР.СтатьяДоходовИРасходов	= ШапкаДокумента.СтатьяСписанияОбнаруженнойНедостачиТМЦ;
			НаборЗаписейДиР.ВУпрВалюте				= Истина;
			НаборЗаписейДиР.Расход					= СуммаРасхода;
			НаборЗаписейДиР.ШапкаДокумента			= ШапкаДокумента;
			Отказ=НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли; 
		
		СтрокаТЗ = ТаблицаЗначений.Найти(ВидДвиженияНакопления.Приход,"ВидДвижения");
		Если СтрокаТЗ <> Неопределено Тогда
			НаборЗаписейДиР 						= Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект 			= ЭтотОбъект;
			Если БалансВедетсяПоПодразделениям Тогда 
				НаборЗаписейДиР.Подразделение = ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДиР.СтатьяДоходовИРасходов	= ШапкаДокумента.СтатьяОприходованияОбнаруженныхИзлишковТМЦ;
			НаборЗаписейДиР.ВУпрВалюте				= Истина;
			НаборЗаписейДиР.Доход					= СуммаДохода;
			НаборЗаписейДиР.ШапкаДокумента			= ШапкаДокумента;
			Отказ=НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли; 
	Иначе
		// 1. Приходуем излишки
		НаборЗаписейПартииОтданные=Движения.ПартииТоваровОтданные;
		НаборЗаписейПартииОтданные.ДокументОбъект                = ЭтотОбъект;
		НаборЗаписейПартииОтданные.Контрагент                    = ШапкаДокумента.Контрагент;
		НаборЗаписейПартииОтданные.ДоговорВзаиморасчетов         = ШапкаДокумента.ДоговорВзаиморасчетов;
		НаборЗаписейПартииОтданные.РезультатЗапросаПоТоварам     = РезультатЗапросаПоТоварамИзлишки;
		НаборЗаписейПартииОтданные.ПередаватьНаКомиссиюВесьТовар = Истина;
		НаборЗаписейПартииОтданные.ШапкаДокумента                = ШапкаДокумента;
		Отказ = НЕ НаборЗаписейПартииОтданные.Приход() ИЛИ Отказ;
		// 2. Списываем недостачи
		НаборЗаписейПартииОтданные.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварамНедостачи;
		НаборЗаписейПартииОтданные.ДокументОбъект            = ЭтотОбъект;
		НаборЗаписейПартииОтданные.ШапкаДокумента            = ШапкаДокумента;
		Отказ = НЕ НаборЗаписейПартииОтданные.Расход() ИЛИ Отказ;
		
		ТаблицаЗначений = НаборЗаписейПартииОтданные.Выгрузить();
		ТаблицаЗначений.Свернуть("ВидДвижения","СуммаУпр,СуммаСебестоимостиУпр");
		
		Если НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр) Тогда
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Константы.ВалютаУправленческогоУчетаКомпании.Получить(),Дата);
			КурсУпрВалюты  = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		Иначе
			КурсУпрВалюты = ШапкаДокумента.КурсВалютыУпр;
		КонецЕсли;	
		
		// 3. Взаиморасчеты на излишний товар
		СтрокаТЗ = ТаблицаЗначений.Найти(ВидДвиженияНакопления.Приход,"ВидДвижения");
		Если СтрокаТЗ <> Неопределено Тогда
			НаборЗаписейДиР 						= Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект 			= ЭтотОбъект;
			Если БалансВедетсяПоПодразделениям Тогда 
				НаборЗаписейДиР.Подразделение = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДиР.СтатьяДоходовИРасходов	= ШапкаДокумента.СтатьяОприходованияОбнаруженныхИзлишковТМЦ;
			НаборЗаписейДиР.ВУпрВалюте				= Истина;
			НаборЗаписейДиР.Доход					= СтрокаТЗ.СуммаУпр;
			НаборЗаписейДиР.ШапкаДокумента			= ШапкаДокумента;
			Отказ=НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли; 
		
		// 4. Взаиморасчеты на утраченный товар
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
			РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
		СтрокаТЗ = ТаблицаЗначений.Найти(ВидДвиженияНакопления.Расход,"ВидДвижения");
		Если СтрокаТЗ <> Неопределено Тогда
			
			Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
				НаборЗаписейВзаиморасчеты=Движения.ВзаиморасчетыКомпании;
				НаборЗаписейВзаиморасчеты.ДокументОбъект            = ЭтотОбъект;
				НаборЗаписейВзаиморасчеты.Контрагент                = ШапкаДокумента.Контрагент;
				НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов     = ШапкаДокумента.ДоговорВзаиморасчетов;
				НаборЗаписейВзаиморасчеты.Сделка                    = Неопределено;
				НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок =
					СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
				НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем = Истина;
				НаборЗаписейВзаиморасчеты.КонтрольДолгаПриПродаже   = ЛОЖЬ;
				НаборЗаписейВзаиморасчеты.Сумма                     = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТЗ.СуммаУпр,Константы.ВалютаУправленческогоУчетаКомпании.Получить(),КурсУпрВалюты, ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента);
				НаборЗаписейВзаиморасчеты.ШапкаДокумента            = ШапкаДокумента;
				НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц = 0;
				Отказ = НЕ НаборЗаписейВзаиморасчеты.Приход() ИЛИ Отказ;
				
				// Доходы и расходы по суммовым разницам.
				СуммаДоходаРасходаСуммовыхРазниц=НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
				Если СуммаДоходаРасходаСуммовыхРазниц<>0 Тогда
					НаборЗаписейДиР = Движения.ДоходыИРасходы;
					НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
					Если БалансВедетсяПоПодразделениям Тогда
						НаборЗаписейДиР.Подразделение = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
					КонецЕсли;
					НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
					НаборЗаписейДиР.ВУпрВалюте             = Истина;
					НаборЗаписейДиР.ШапкаДокумента         = ШапкаДокумента;
					Если СуммаДоходаРасходаСуммовыхРазниц<0 Тогда
						НаборЗаписейДиР.Расход = -СуммаДоходаРасходаСуммовыхРазниц;
					Иначе
						НаборЗаписейДиР.Доход = СуммаДоходаРасходаСуммовыхРазниц;
					КонецЕсли;
					Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
				КонецЕсли;
			КонецЕсли;
			
			// Доходы и расходы
			// сумма себестоимости списанных товаров по недостачи.
			НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
			Если БалансВедетсяПоПодразделениям Тогда
				НаборЗаписейДоходыИРасходы.Подразделение = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.Себестоимость;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
			НаборЗаписейДоходыИРасходы.Расход                 = СтрокаТЗ.СуммаСебестоимостиУпр;	
			НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
			Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
			
			// СуммаВсего - списанная сумма товарной задолженности
			НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
			Если БалансВедетсяПоПодразделениям Тогда
				НаборЗаписейДоходыИРасходы.Подразделение = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.НачислениеДебиторскойЗадолженностиПоТовару;
			НаборЗаписейДоходыИРасходы.Доход                  = СтрокаТЗ.СуммаУпр;
			НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
			Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		КонецЕсли;  			
	КонецЕсли;
	
	Документы.Инвентаризация.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	Документы.Инвентаризация.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	// двигаем границу последовательности взаиморасчетов
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	
	// двигаем границу последовательности партий
	Если ШапкаДокумента.ХозОперация<>Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию Тогда
		
		Если Ссылка <> ДокументСсылка Тогда
			
			РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
			РаботаСГраницами.ДвиженияПоПартиямПередПроведением(ДокументСсылка, ДополнительныеСвойства);
			
		КонецЕсли;
		
		РаботаСГраницами.СдвинутьГраницуПартий(ДокументСсылка, ДополнительныеСвойства, Движения);
		
	КонецЕсли;
	
	Возврат НЕ Отказ;
КонецФункции // ПровестиПоПартиям()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
