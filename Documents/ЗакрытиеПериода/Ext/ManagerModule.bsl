// Модуль менеджера документа "Закрытие периода"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. 
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти=Новый Структура();
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
		
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗакрытиеПериода",
		"ПФ_MXL_РаспределениеСтатей",
		НСтр("ru = 'Распределение статей'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗакрытиеПериода",
		"ПФ_MXL_ОтчетПоОстаткам",
		НСтр("ru = 'Отчет по остаткам'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_РаспределениеСтатей") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_РаспределениеСтатей",
															НСтр("ru = 'Распределение статей'"),
															ПечатьРаспределениеСтатей(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ОтчетПоОстаткам") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ОтчетПоОстаткам",
															НСтр("ru = 'Отчет по остаткам'"),
															ПечатьОтчетПоОстаткам(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;													
КонецПроцедуры // Печать()

// Формирует печатную форму "РаспределениеСтатей"
//
Функция ПечатьРаспределениеСтатей(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗакрытиеПериода_РаспределениеСтатей";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати,ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗакрытиеПериода.ПФ_MXL_РаспределениеСтатей");
		
		// форматы вывода
		ОбластьЗаголовок       	= Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапки    		= Макет.ПолучитьОбласть("ОбластьШапки");
		ОбластьПодразделения	= Макет.ПолучитьОбласть("СтрокаБалансовоеПодразделение");
		ОбластьСтатьи			= Макет.ПолучитьОбласть("СтрокаСтатьяДиР");
		ОбластьПодвал          	= Макет.ПолучитьОбласть("Подвал");
		
		// вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
				
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);

		// готовим шапку
		НомерСтраницы = 2; НомерСтраницыПред = 2;
		ОбластьШапки.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// Получаем движения документа.
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаСтатейПолучателей.ПодразделениеКомпании КАК Подразделение,
		|	ТаблицаСтатейПолучателей.СтатьяРаспределения КАК СтатьяИсточник,
		|	ТаблицаСтатейПолучателей.СтатьяДоходовИРасходов КАК СтатьяПолучатель,
		|	ТаблицаСтатейПолучателей.ДоходУпр КАК ДоходУпр,
		|	ТаблицаСтатейПолучателей.РасходУпр КАК РасходУпр,
		|	ПорядокЗакрытияБалансовыхСтатей.Порядок КАК Порядок
		|ИЗ
		|	РегистрНакопления.ДоходыИРасходы КАК ТаблицаСтатейПолучателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокЗакрытияБалансовыхСтатей КАК ПорядокЗакрытияБалансовыхСтатей
		|		ПО ТаблицаСтатейПолучателей.СтатьяРаспределения = ПорядокЗакрытияБалансовыхСтатей.Статья
		|ГДЕ
		|	ТаблицаСтатейПолучателей.ХозОперация = &ХозОперация
		|	И ТаблицаСтатейПолучателей.Регистратор = &Регистратор
		|	И ТаблицаСтатейПолучателей.ВидДвижения = &ВидДвиженияПриход
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПодразделениеКомпании,
		|	Порядок
		|ИТОГИ
		|	СУММА(ДоходУпр),
		|	СУММА(РасходУпр)
		|ПО
		|	Подразделение,
		|	СтатьяИсточник";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ХозОперация",       Справочники.ХозОперации.РаспределениеДоходовИРасходов);
		Запрос.УстановитьПараметр("Регистратор",       Документ.Ссылка);
		Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);

		// готовим области строки
		ВыборкаПоПодразделениям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПодразделениям.Следующий() Цикл
			// Выводим подразделение.
			ОбластьПодразделения.Параметры.БалансовоеПодразделение = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ВыборкаПоПодразделениям.Подразделение, Документ.Дата);
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодразделения, ОбластьШапки, , НомерСтраницы, , Документ);
			
			Если НомерСтраницы<>НомерСтраницыПред Тогда
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапки.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			КонецЕсли;
			
			ТабличныйДокумент.НачатьГруппуСтрок();
			
			// Спускаемся ниже
			ВыборкаПоСтатье = ВыборкаПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоСтатье.Следующий() Цикл 			
				ВыборкаПоЗаписям = ВыборкаПоСтатье.Выбрать();
				Пока ВыборкаПоЗаписям.Следующий() Цикл
					// Выводим записи
					ОбластьСтатьи = Макет.ПолучитьОбласть("СтрокаСтатьяДиР");
					ОбластьСтатьи.Параметры.РаспределяемаяСтатья = ВыборкаПоЗаписям.СтатьяИсточник;
					ОбластьСтатьи.Параметры.СтатьяПолучатель     = ВыборкаПоЗаписям.СтатьяПолучатель;
					ОбластьСтатьи.Параметры.СуммаДоходаУпр       = Формат(ВыборкаПоЗаписям.ДоходУпр,  ФорматВыводаСуммы);
	                ОбластьСтатьи.Параметры.СуммаРасходаУпр      = Формат(ВыборкаПоЗаписям.РасходУпр, ФорматВыводаСуммы);
					
					НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтатьи, ОбластьШапки, , НомерСтраницы, , Документ);
					
					Если НомерСтраницы<>НомерСтраницыПред Тогда
						НомерСтраницыПред = НомерСтраницы;
						ОбластьШапки.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			ТабличныйДокумент.ЗакончитьГруппуСтрок(); 		
		КонецЦикла;                             	
				
		УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент,ОбластьПодвал,,,НомерСтраницы,,Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции //ПечатьРаспределениеСтатей()

// Формирует печатную форму "ОтчетПоОстаткам"
//
Функция ПечатьОтчетПоОстаткам(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗакрытиеПериода_ОтчетПоОстаткам";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати,ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗакрытиеПериода.ПФ_MXL_ОтчетПоОстаткам");
		
		// форматы вывода
		ОбластьЗаголовок       	= Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапки    		= Макет.ПолучитьОбласть("ОбластьШапки");
		ОбластьПодразделения	= Макет.ПолучитьОбласть("СтрокаБалансовоеПодразделение");
		ОбластьСтатьи			= Макет.ПолучитьОбласть("СтрокаСтатьяДиР");
		ОбластьПодвал          	= Макет.ПолучитьОбласть("Подвал");
		
		// вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
				
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);

		// готовим шапку
		НомерСтраницы = 2; НомерСтраницыПред = 2;
		ОбластьШапки.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// Получаем движения документа.
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачальныеОстаткиИОбороты.Подразделение КАК Подразделение,
		|	НачальныеОстаткиИОбороты.Статья КАК Статья,
		|	НачальныеОстаткиИОбороты.ДоходПриход,
		|	НачальныеОстаткиИОбороты.РасходПриход,
		|	НачальныеОстаткиИОбороты.ДоходНачОст,
		|	НачальныеОстаткиИОбороты.РасходНачОст,
		|	ЕСТЬNULL(ДоходыИРасходыОстатки.ДоходУпрОстаток, 0) КАК ДоходКонОст,
		|	ЕСТЬNULL(ДоходыИРасходыОстатки.РасходУпрОстаток, 0) КАК РасходКонОст
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЕСТЬNULL(ВложенныйЗапрос.Подразделение, ДоходыИРасходыОстатки.ПодразделениеКомпании) КАК Подразделение,
		|		ЕСТЬNULL(ВложенныйЗапрос.Статья, ДоходыИРасходыОстатки.СтатьяДоходовИРасходов) КАК Статья,
		|		ЕСТЬNULL(ВложенныйЗапрос.ДоходПриход, 0) КАК ДоходПриход,
		|		ЕСТЬNULL(ВложенныйЗапрос.РасходПриход, 0) КАК РасходПриход,
		|		ЕСТЬNULL(ДоходыИРасходыОстатки.ДоходУпрОстаток, 0) КАК ДоходНачОст,
		|		ЕСТЬNULL(ДоходыИРасходыОстатки.РасходУпрОстаток, 0) КАК РасходНачОст
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ДоходыИРасходы.ПодразделениеКомпании КАК Подразделение,
		|			ДоходыИРасходы.СтатьяДоходовИРасходов КАК Статья,
		|			СУММА(ДоходыИРасходы.ДоходУпр) КАК ДоходПриход,
		|			СУММА(ДоходыИРасходы.РасходУпр) КАК РасходПриход
		|		ИЗ
		|			РегистрНакопления.ДоходыИРасходы КАК ДоходыИРасходы
		|		ГДЕ
		|			ДоходыИРасходы.ВидДвижения = &ВидДвиженияПриход
		|			И ДоходыИРасходы.Регистратор = &Регистратор
		|			И ДоходыИРасходы.ПодразделениеКомпании.Балансовое
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ДоходыИРасходы.ПодразделениеКомпании,
		|			ДоходыИРасходы.СтатьяДоходовИРасходов) КАК ВложенныйЗапрос
		|			ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ДоходыИРасходы.Остатки(&МоментНаНачалоДокумента, ПодразделениеКомпании.Балансовое) КАК ДоходыИРасходыОстатки
		|			ПО ВложенныйЗапрос.Статья = ДоходыИРасходыОстатки.СтатьяДоходовИРасходов
		|				И ВложенныйЗапрос.Подразделение = ДоходыИРасходыОстатки.ПодразделениеКомпании) КАК НачальныеОстаткиИОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДоходыИРасходы.Остатки(&МоментНаКонецДокумента, ПодразделениеКомпании.Балансовое) КАК ДоходыИРасходыОстатки
		|		ПО НачальныеОстаткиИОбороты.Подразделение = ДоходыИРасходыОстатки.ПодразделениеКомпании
		|			И НачальныеОстаткиИОбороты.Статья = ДоходыИРасходыОстатки.СтатьяДоходовИРасходов
		|
		|УПОРЯДОЧИТЬ ПО
		|	Подразделение,
		|	Статья
		|ИТОГИ ПО
		|	Подразделение";
				
		Запрос = Новый Запрос(ТекстЗапроса); 
		Момент = ?(Документ.Ссылка.Пустая(),Новый МоментВремени(КонецДня(Документ.Дата)),Документ.Ссылка.МоментВремени());
		Запрос.УстановитьПараметр("МоментНаНачалоДокумента", Новый Граница(Момент, ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("МоментНаКонецДокумента",  Новый Граница(Момент, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("Регистратор",             Документ.Ссылка);
		Запрос.УстановитьПараметр("ВидДвиженияПриход",       ВидДвиженияНакопления.Приход);
		Выборка = Запрос.Выполнить().Выбрать();

		// готовим области строки
		ВыборкаПоПодразделениям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПодразделениям.Следующий() Цикл
			// Выводим подразделение.
			ОбластьПодразделения.Параметры.БалансовоеПодразделение = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ВыборкаПоПодразделениям.Подразделение, Документ.Дата);
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодразделения, ОбластьШапки, , НомерСтраницы, , Документ);
			
			Если НомерСтраницы<>НомерСтраницыПред Тогда
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапки.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			КонецЕсли;
			
			ТабличныйДокумент.НачатьГруппуСтрок();
			
			// Спускаемся ниже
			ВыборкаПоСтатье = ВыборкаПоПодразделениям.Выбрать();
			Пока ВыборкаПоСтатье.Следующий() Цикл 			
				// Выводим записи
				ОбластьСтатьи.Параметры.Статья = ВыборкаПоСтатье.Статья;
				ОбластьСтатьи.Параметры.СуммаДоходаНачОст  = Формат(ВыборкаПоСтатье.ДоходНачОст,  ФорматВыводаСуммы);
				ОбластьСтатьи.Параметры.СуммаРасходаНачОст = Формат(ВыборкаПоСтатье.РасходНачОст, ФорматВыводаСуммы);
				ОбластьСтатьи.Параметры.СуммаДоходаПриход  = Формат(ВыборкаПоСтатье.ДоходПриход,  ФорматВыводаСуммы);
				ОбластьСтатьи.Параметры.СуммаРасходаПриход = Формат(ВыборкаПоСтатье.РасходПриход, ФорматВыводаСуммы);
				ОбластьСтатьи.Параметры.СуммаДоходаКонОст  = Формат(ВыборкаПоСтатье.ДоходНачОст  + ВыборкаПоСтатье.ДоходПриход,  ФорматВыводаСуммы);
				ОбластьСтатьи.Параметры.СуммаРасходаКонОст = Формат(ВыборкаПоСтатье.РасходНачОст + ВыборкаПоСтатье.РасходПриход, ФорматВыводаСуммы);
				ОбластьСтатьи.Параметры.СуммаДоходаКонОстПосле  = Формат(ВыборкаПоСтатье.ДоходКонОст,  ФорматВыводаСуммы);
				ОбластьСтатьи.Параметры.СуммаРасходаКонОстПосле = Формат(ВыборкаПоСтатье.РасходКонОст, ФорматВыводаСуммы);
				
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтатьи, ОбластьШапки, , НомерСтраницы, , Документ);
				Если НомерСтраницы<>НомерСтраницыПред Тогда
					НомерСтраницыПред = НомерСтраницы;
					ОбластьШапки.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
				КонецЕсли;
			КонецЦикла;
			ТабличныйДокумент.ЗакончитьГруппуСтрок(); 
		КонецЦикла;             	
				
		УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент,ОбластьПодвал,,,НомерСтраницы,,Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции //ПечатьОтчетПоОстаткам()

#КонецОбласти


#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли