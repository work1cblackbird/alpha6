// Модуль объекта документа "Закрытие периода"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Документ должен быть последним в течение дня.
	УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;

	ГраницаРасчетов = Новый Граница(Новый МоментВремени(Дата + 1, Ссылка), ВидГраницы.Исключая);
	
	// Действие №1: Производим перенос остатков с небалансовых подразделений на балансовые (или на корень).
	// Получим таблицу значений. Первая колонка - это подразделение, остатки которого необходимо перенести.
	// Вторая колонка - подразделение, куда переносим (это будет либо балансовое подразделение, либо корневое).
	
	// В случае ведения баланса по организациям, нельзя выполнять перенос остатков,
	// т.к. организации подразделений могут не совпадает.
	Если БалансВедетсяПоОрганизациям(Дата) Тогда
		ТаблицаПереноса = ПолучитьСоответствияБалансовымПодразделениям(БалансВедетсяПоПодразделениям(Дата), Дата);
		Если ТаблицаПереноса.Количество()<>0 Тогда // Получаем остатки по подразделениям
			// Поместим таблицу во "Временную таблицу"
			МенеджерВТ = Новый МенеджерВременныхТаблиц;
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Источник,
			|	Приемник
			|ПОМЕСТИТЬ ТаблицаСоответствий
			|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
			|ИНДЕКСИРОВАТЬ ПО Источник";
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
			Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПереноса);
			Запрос.Выполнить();
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДоходыИРасходыОстатки.ПодразделениеКомпании КАК ПодразделениеКомпании,
			|	ДоходыИРасходыОстатки.СтатьяДоходовИРасходов КАК СтатьяДоходовИРасходов,
			|	ДоходыИРасходыОстатки.ДоходУпрОстаток,
			|	ДоходыИРасходыОстатки.РасходУпрОстаток, 
			|   ТаблицаСоответствий.Приемник
			|ИЗ
			|	РегистрНакопления.ДоходыИРасходы.Остатки(&МоментВремени, ПодразделениеКомпании В (&СписокПодразделений)) КАК ДоходыИРасходыОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСоответствий КАК ТаблицаСоответствий
			|		ПО ДоходыИРасходыОстатки.ПодразделениеКомпании = ТаблицаСоответствий.Источник
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПодразделениеКомпании,
			|	СтатьяДоходовИРасходов"; 
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("МоментВремени", ГраницаРасчетов);
			Запрос.УстановитьПараметр("СписокПодразделений", ТаблицаПереноса.ВыгрузитьКолонку("Источник"));
			
			// наложим блокировку на считываемые данные
			СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ДоходыИРасходы");
			ЗначенияБлокировки = Новый Соответствие;
			ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, Дата)); 
			СтруктураПараметровБлокировки.Вставить("ИсточникДанных", ТаблицаПереноса);
			ОписаниеИсточника = Новый Соответствие;
			ОписаниеИсточника.Вставить("ПодразделениеКомпании", "Источник");
			ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл						
				// Сначала выполняем движение расход по небалансовому подразделению.
				НаборЗаписейДиР = Движения.ДоходыИРасходы;
				НаборЗаписейДиР.Подразделение          = Выборка.ПодразделениеКомпании;
				НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
				НаборЗаписейДиР.ХозОперация            = Справочники.ХозОперации.ПереносОстатковДоходовИРасходовНаБалансовыйУровень;
				НаборЗаписейДиР.СтатьяДоходовИРасходов = Выборка.СтатьяДоходовИРасходов;
				НаборЗаписейДиР.ВУпрВалюте             = Истина;
				НаборЗаписейДиР.Расход                 = Выборка.РасходУпрОстаток;
				НаборЗаписейДиР.Доход                  = Выборка.ДоходУпрОстаток;
				Отказ = НЕ НаборЗаписейДиР.Расход() ИЛИ Отказ; 
				
				// Теперь делаем приход уже по балансовому подразделению.
				НаборЗаписейДиР.Подразделение          = Выборка.Приемник;
				НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
				НаборЗаписейДиР.ХозОперация            = Справочники.ХозОперации.ПереносОстатковДоходовИРасходовНаБалансовыйУровень;
				НаборЗаписейДиР.СтатьяДоходовИРасходов = Выборка.СтатьяДоходовИРасходов;
				НаборЗаписейДиР.ВУпрВалюте             = Истина;
				НаборЗаписейДиР.Расход                 = Выборка.РасходУпрОстаток;
				НаборЗаписейДиР.Доход                  = Выборка.ДоходУпрОстаток;
				Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ; 	
				
				#Если Клиент Тогда			
					Состояние(НСтр("ru = 'Перенос остатков с подразделения <" + Выборка.ПодразделениеКомпании + НСтр("ru = '> на балансовое подразделение <'") + Выборка.Приемник + ">'") );
				#КонецЕсли
			КонецЦикла;
			
			// Движения записываем сразу, т.к. они понадобятся нам далее.
			Движения.ДоходыИРасходы.Записать();
			МенеджерВТ.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
	// Действие №2: Производим закрытие статей балансовых подразделений и корневого элемента.
	// Порядок закрытия статей содержится в регистре сведений "ПорядокЗакрытияБалансовыхСтатей". 
	// Если в регистре сведений не присутствует статья, значит она распределяться не будет.
	// В запросе нам необходимо получить все статьи, присутствующие в регистре сведений в разрезе балансовых
	// подразделений. Даже, если по статье нет остатков, он может появится в ходе распределения.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Подразделение КАК ПодразделениеКомпании,
	|	ВложенныйЗапрос.Порядок КАК Порядок,
	|	ВложенныйЗапрос.Статья,
	|   ВложенныйЗапрос.Статья.СтатьиРаспределения КАК СтатьиРаспределения,
	|	ЕСТЬNULL(ДоходыИРасходыОстатки.ДоходУпрОстаток, 0) КАК Доход,
	|	ЕСТЬNULL(ДоходыИРасходыОстатки.РасходУпрОстаток, 0) КАК Расход
	|ИЗ
	|	(ВЫБРАТЬ
	|			ПодразделенияКомпании.Ссылка КАК Подразделение,
	|			ПорядокЗакрытияБалансовыхСтатей.Статья КАК Статья,
	|			ПорядокЗакрытияБалансовыхСтатей.Порядок КАК Порядок
	|		ИЗ
	|			Справочник.ПодразделенияКомпании КАК ПодразделенияКомпании,
	|			РегистрСведений.ПорядокЗакрытияБалансовыхСтатей КАК ПорядокЗакрытияБалансовыхСтатей
	|";
	
	Если БалансВедетсяПоПодразделениям(Дата) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		| ГДЕ ПодразделенияКомпании.Ссылка.Балансовое";
	КонецЕсли; 
	
	ТекстЗапроса = ТекстЗапроса + "
	|    ) КАК ВложенныйЗапрос 	
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДоходыИРасходы.Остатки(
	|		&МоментВремени,	(НЕ ПодразделениеКомпании.ПометкаУдаления)";
	
	Если БалансВедетсяПоПодразделениям(Дата) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|  И (ПодразделениеКомпании.Балансовое)";
	КонецЕсли;    
	
	ТекстЗапроса = ТекстЗапроса + "
	|		) КАК ДоходыИРасходыОстатки
	|		ПО ВложенныйЗапрос.Подразделение = ДоходыИРасходыОстатки.ПодразделениеКомпании
	|			И ВложенныйЗапрос.Статья = ДоходыИРасходыОстатки.СтатьяДоходовИРасходов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Подразделение,
	|	Порядок";   	
	  	
	Запрос  = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МоментВремени", ГраницаРасчетов);
	тзСтатьиРаспределения = Запрос.Выполнить().Выгрузить();
	
	Если тзСтатьиРаспределения.Количество()<>0 Тогда
		тзСтатьиРаспределения.Колонки.Добавить("Распределена", Новый ОписаниеТипов("Булево"));	
	КонецЕсли;
	
	// Выполняем распределение строго по порядку. После того как статья распределена, 
	// помечаем ее. Если в последующем некоторая статья будет пытаться распределиться на уже распределенную, то
	// это ошибка. В этом случае будем предупреждать пользователя и распределять на служебную статью.
	СтруктураПоиска = Новый Структура;
	
	// Получим служебную статью доходов и расходов. 
	СпецСтатьяДляРаспределения = Организация.СлужебнаяСтатьяДляРаспределения;
	
	// Получаем набор записей.
	НаборЗаписейДиР = Движения.ДоходыИРасходы;	
	
	Для каждого ТекСтрока Из тзСтатьиРаспределения Цикл  	
		#Если Клиент Тогда
			Состояние(НСтр("ru = 'Распределение статьи:'") + Символы.НПП + ТекСтрока.Статья);		
		#КонецЕсли
		
		Если (ТекСтрока.Расход=0) И (ТекСтрока.Доход=0) Тогда
			Продолжить;
		КонецЕсли;
		
		// Получаем табличную часть статьи.
		тзТабличнаяЧасть = ТекСтрока.СтатьиРаспределения;
		
		// Выполняем расход по текущей статье на общие суммы. 		
		НаборЗаписейДиР.Подразделение          = ТекСтрока.ПодразделениеКомпании;
		НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДиР.ХозОперация            = Справочники.ХозОперации.РаспределениеДоходовИРасходов;
		НаборЗаписейДиР.СтатьяДоходовИРасходов = ТекСтрока.Статья;
		НаборЗаписейДиР.ВУпрВалюте             = Истина;
		НаборЗаписейДиР.Расход                 = ТекСтрока.Расход;
		НаборЗаписейДиР.Доход                  = ТекСтрока.Доход;
		НаборЗаписейДиР.СтатьяДиРИсточник      = Неопределено;
		Отказ = НЕ НаборЗаписейДиР.Расход() ИЛИ Отказ; 

		// Находим количество статей, на которые  необходимо распределять.
		КоличествоСтатей = тзТабличнаяЧасть.Количество();
		Если КоличествоСтатей=0 Тогда // Распределять некуда, а нужно. Поэтому распределяем на спец.статью.
			КоличествоСтатей = 1;
			НоваяСтрока = тзТабличнаяЧасть.Добавить();
			НоваяСтрока.СтатьяРаспределения = СпецСтатьяДляРаспределения;
		КонецЕсли;
		
		// Получим суммы, приходящиеся на каждую статью.  
		ВремРасход = Окр(ТекСтрока.Расход / КоличествоСтатей, 2);
		ВремДоход  = Окр(ТекСтрока.Доход  / КоличествоСтатей, 2); 
		      		
		// Проходим по табличной части распределяемой статьи.
		Для каждого СтрокаТабличнойЧасти Из тзТабличнаяЧасть Цикл  	
			ЭтоПоследняяСтрока  = (тзТабличнаяЧасть.Индекс(СтрокаТабличнойЧасти)=(КоличествоСтатей-1));
			СтатьяРаспределения = СтрокаТабличнойЧасти.СтатьяРаспределения;
			
			// Проверим, а не пытаемся ли мы распределить статью на уже распределенную статью. 			
			СтруктураПоиска.Вставить("ПодразделениеКомпании", ТекСтрока.ПодразделениеКомпании);
			СтруктураПоиска.Вставить("Статья",                СтатьяРаспределения);
			мсвСтрок = тзСтатьиРаспределения.НайтиСтроки(СтруктураПоиска);
			
			Если мсвСтрок.Количество()<>0 Тогда  				 
				Если мсвСтрок[0].Распределена Тогда // Придется распределять на спец. статью.
					СтатьяРаспределения = СпецСтатьяДляРаспределения;
					
					СтруктураПоиска.Вставить("ПодразделениеКомпании", ТекСтрока.ПодразделениеКомпании);
					СтруктураПоиска.Вставить("Статья",                СтатьяРаспределения);
					мсвСтрок = тзСтатьиРаспределения.НайтиСтроки(СтруктураПоиска);
					Если мсвСтрок.Количество()<>0 Тогда
						Если мсвСтрок[0].Распределена Тогда // Спец. статья уже сама распределена. Значит ошибка.
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при распределении статьи <%1> на статью <%2>.
							|Нельзя производить распределение на уже распределенную статью.
							|Распределение на служебную статью <%3> невозможно.'"),ТекСтрока.Статья,СтрокаТабличнойЧасти.СтатьяРаспределения,СпецСтатьяДляРаспределения);
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
						Иначе // Спец. статья распределяемая, но еще не распределена
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при распределении статьи <%1> на статью <%2>.
							|Нельзя производить распределение на уже распределенную статью.
							|Произведено распределение на служебную статью <%3>.'"),ТекСтрока.Статья,СтрокаТабличнойЧасти.СтатьяРаспределения,СпецСтатьяДляРаспределения);
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект);
							
							мсвСтрок[0].Расход = мсвСтрок[0].Расход + ?(ЭтоПоследняяСтрока, ТекСтрока.Расход - ВремРасход*(КоличествоСтатей-1),  ВремРасход);
							мсвСтрок[0].Доход  = мсвСтрок[0].Доход  + ?(ЭтоПоследняяСтрока, ТекСтрока.Доход  - ВремДоход*(КоличествоСтатей-1),   ВремДоход); 	
						КонецЕсли;
					Иначе // Спец. статья НЕ распределяемая, поэтому смело распределяем на нее.
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при распределении статьи <%1> на статью <%2>.
						|Нельзя производить распределение на уже распределенную статью.
						|Произведено распределение на служебную статью <%3>.'"),ТекСтрока.Статья,СтрокаТабличнойЧасти.СтатьяРаспределения,СпецСтатьяДляРаспределения);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект);
					КонецЕсли;
				Иначе
					// Статья еще не распределена. Значит увеличиваем ее ресурсы на распределяемую сумму.
					// Однако, возможен случай, когда статья распределяется на саму себя. Хотя такая ситуация
					// бессмысленна с прикладной точки зрения, но вполне возможна. Например, если пользователь указал, что
					// необходимо распределять статью (которая является спец. статьей), но не указал на какие статьи ее распределять.
					// В этом случае, будет задействована, опять-таки, спец. статья (т.к. распределять-то куда-то надо),
					// и в результате мы имеем, что спец. статья распределяется на спец. статью.
					Если ТекСтрока.Статья<>мсвСтрок[0].Статья Тогда
						мсвСтрок[0].Расход = мсвСтрок[0].Расход + ?(ЭтоПоследняяСтрока, ТекСтрока.Расход - ВремРасход*(КоличествоСтатей-1),  ВремРасход);
						мсвСтрок[0].Доход  = мсвСтрок[0].Доход  + ?(ЭтоПоследняяСтрока, ТекСтрока.Доход  - ВремДоход*(КоличествоСтатей-1),   ВремДоход); 
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;  			
			
			НаборЗаписейДиР.Подразделение          = ТекСтрока.ПодразделениеКомпании;
			НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДиР.ХозОперация            = Справочники.ХозОперации.РаспределениеДоходовИРасходов;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = СтатьяРаспределения;
			НаборЗаписейДиР.ВУпрВалюте             = Истина;
			НаборЗаписейДиР.СтатьяДиРИсточник      = ТекСтрока.Статья; // Статья, с которой производится распределение.
			
			// Если это последняя статья из табличной части, то списываем весь остаток, чтобы не оставались "копейки".
			НаборЗаписейДиР.Расход                 = ?(ЭтоПоследняяСтрока, ТекСтрока.Расход - ВремРасход*(КоличествоСтатей-1),  ВремРасход);
			НаборЗаписейДиР.Доход                  = ?(ЭтоПоследняяСтрока, ТекСтрока.Доход  - ВремДоход*(КоличествоСтатей-1),   ВремДоход);
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ; 			
		КонецЦикла;
		
		// Помечаем статью как распределенную.
		ТекСтрока.Распределена = Истина;
	КонецЦикла;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция получает таблицу соответствий небалансовых подразделений балансовым.
// При закрытии периода остатки по регистру "Доходы и расходы" с небалансовых подразделений переносятся
// на балансовые (либо на корневое подразделение).
//
// Параметры:
//  БалансВедетсяПоПодразделению - "Булево" - признак ведения учета баланса по подразделениям.
//											  Соответствует значению константы "Способ ведения баланса".
//
// Возвращаемое значение:
//   Таблица значений 
//       	- Источник: небалансовое подразделение, остатки которого необходимо перенести.
//			- Приемник: балансовое подразделение, на которое происходит перенос остатков.
// 
Функция ПолучитьСоответствияБалансовымПодразделениям(БалансВедетсяПоПодразделению, Дата)
	
	// Если баланс ведется не по подразделениям, то все подразделения закрываются на корневой элемент.
	Если Не БалансВедетсяПоПодразделению Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПодразделенияКомпании.Ссылка КАК Источник,
		|	&Ссылка КАК Приемник
		|ИЗ
		|	Справочник.ПодразделенияКомпании КАК ПодразделенияКомпании
		|ГДЕ
		|	ПодразделенияКомпании.Ссылка <> &Ссылка
		|	И (НЕ ПодразделенияКомпании.ПометкаУдаления)";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", Справочники.ПодразделенияКомпании.ОсновноеПодразделение);
		Возврат Запрос.Выполнить().Выгрузить();
	Иначе
		// В этом случае получим список небалансовых подразделений.
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПодразделенияКомпании.Ссылка КАК Источник,
		|	&Ссылка КАК Приемник
		|ИЗ
		|	Справочник.ПодразделенияКомпании КАК ПодразделенияКомпании
		|ГДЕ
		|	(НЕ ПодразделенияКомпании.Балансовое)
		|	И ПодразделенияКомпании.Ссылка <> &Ссылка
		|	И (НЕ ПодразделенияКомпании.ПометкаУдаления)";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", Справочники.ПодразделенияКомпании.ОсновноеПодразделение);
		
		ТаблицаСоответствий = Запрос.Выполнить().Выгрузить();
		
		// Проходимся по полученным небалансовым подразделениям и находим для них соответствия.
		Для каждого ТекСтрока Из ТаблицаСоответствий  Цикл
			ТекСтрока.Приемник = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ТекСтрока.Источник, Дата);
		КонецЦикла;
		
		Возврат ТаблицаСоответствий;
	КонецЕсли;
	
КонецФункции //ПолучитьСоответствияБалансовымПодразделениям() 

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
