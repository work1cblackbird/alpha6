// Модуль документа "Списание активов"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка=Истина)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	// заполним статью доходов и расходов
	СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СписаниеАктивов;
	
	РегистрыНакопления.АвтомобилиДляТестДрайва.ЗаполнитьВидАренды(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим корректность заполнения количества для активов c уникальными номерами
	ОбработкаТабличнойЧастиАктивы.ПроверитьКоличествоУникальныхНомеров(ЭтотОбъект, Отказ);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Произведем перерасчет итоговой суммы документа
	ОбработкаСобытийДокументаСервер.ПересчитатьСуммуДокументаПоСебестоимостиСписания(ЭтотОбъект, Отказ,,, ИСТИНА);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапросаПоАктивам = ПолучитьРезультатЗапросаПоАктивам();
	
	// спишем из "Активы в эксплуатации"
	НаборЗаписейЭксплуатация = Движения.ПрочиеАктивыВЭксплуатации;
	НаборЗаписейЭксплуатация.ДокументОбъект            = ЭтотОбъект;
	НаборЗаписейЭксплуатация.ПодразделениеКомпании     = ПодразделениеКомпании;
	НаборЗаписейЭксплуатация.ЭтоВыбытие                = Истина;
	НаборЗаписейЭксплуатация.РезультатЗапросаПоАктивам = РезультатЗапросаПоАктивам;
	Отказ = НЕ НаборЗаписейЭксплуатация.Расход() ИЛИ Отказ;
	
	// Проведем по ТестДрайву
	НаборЗаписейТестДрайв = Движения.АвтомобилиДляТестДрайва;
	НаборЗаписейТестДрайв.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейТестДрайв.ПодразделениеКомпании = ПодразделениеКомпании;
	НаборЗаписейТестДрайв.РезультатЗапросаПоАвтомобилям = РезультатЗапросаПоАктивам;
	Отказ = НЕ НаборЗаписейТестДрайв.Расход() ИЛИ Отказ;
	
	// Доходы и расходы
	ИтогРасходПоСписаннымАктивам = НаборЗаписейЭксплуатация.Итог("БалансоваяСтоимостьУпр") - НаборЗаписейЭксплуатация.Итог("СуммаАмортизацииУпр");
	Если Окр(УправлениеДиалогомСервер.ПолучитьМодульЧисла(ИтогРасходПоСписаннымАктивам), 2, РежимОкругления.Окр15как20) >= 0.01 Тогда
		НаборЗаписейДиР = Движения.ДоходыИРасходы;
		НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДиР.СтатьяДоходовИРасходов = ?(НЕ ЗначениеЗаполнено(СтатьяДоходовИРасходов),Справочники.СтатьиДоходовИРасходов.СписаниеАктивов,СтатьяДоходовИРасходов);
		НаборЗаписейДиР.Подразделение		   = ПодразделениеКомпании;
		НаборЗаписейДиР.ВУпрВалюте             = Истина;
		НаборЗаписейДиР.Расход                 = ИтогРасходПоСписаннымАктивам;
		Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
	КонецЕсли;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	// Произведем перерасчет итоговой суммы документа
	ОбработкаСобытийДокументаСервер.ПересчитатьСуммуДокументаПоСебестоимостиСписания(ЭтотОбъект, Отказ, "ПрочиеАктивыВЭксплуатации");
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Ввод в эксплуатацию"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВводВЭксплуатацию(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат ИСТИНА;
	КонецЕсли;
	
	ПодразделениеКомпании = ДанныеЗаполнения.ПодразделениеПолучатель;
	Организация           = ПодразделениеКомпании.Организация;
	
	// идем по строкам и реквизитам табличной части и заполняем соответствующие
	Для Каждого СтрокаОснования Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрока = Активы.Добавить();
		НоваяСтрока.ПрочийАктив = СтрокаОснования.Актив;
		НоваяСтрока.Количество  = СтрокаОснования.Количество;
		Документы.СписаниеАктивов.АктивыПрочийАктивПриИзменении(ЭтотОбъект, НоваяСтрока, ДополнительныеСвойства.ПараметрыДействия);
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ВводВЭксплуатацию()

// Производит заполнение объекта на основании документа "Ввод в эксплуатацию автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВводВЭксплуатациюАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат ИСТИНА;
	КонецЕсли;
	
	ПодразделениеКомпании = ДанныеЗаполнения.ПодразделениеПолучатель;
	Организация           = ПодразделениеКомпании.Организация;
	
	// идем по строкам и реквизитам табличной части и заполняем соответствующие
	Для Каждого СтрокаОснования Из ДанныеЗаполнения.Автомобили Цикл
		НоваяСтрока = Активы.Добавить();
		НоваяСтрока.ПрочийАктив = СтрокаОснования.Актив;
		НоваяСтрока.Количество  = 1;		
		Документы.СписаниеАктивов.АктивыПрочийАктивПриИзменении(ЭтотОбъект, НоваяСтрока, ДополнительныеСвойства.ПараметрыДействия);
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ВводВЭксплуатациюАвтомобилей() 

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// сформирует свой результат запроса по активам
//
// Возвращаемое значение:
//  возвращает результат запроса.
//
Функция ПолучитьРезультатЗапросаПоАктивам()
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СписаниеАктивовАктивы.ПрочийАктив КАК Актив,
	               |	СУММА(СписаниеАктивовАктивы.Количество) КАК Количество,
	               |	СписаниеАктивовАктивы.ВидАренды КАК ВидАренды
	               |ИЗ
	               |	Документ.СписаниеАктивов.Активы КАК СписаниеАктивовАктивы
	               |ГДЕ
	               |	СписаниеАктивовАктивы.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СписаниеАктивовАктивы.ПрочийАктив,
	               |	СписаниеАктивовАктивы.ВидАренды";

	Запрос=Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.Текст=ТекстЗапроса;

	Возврат Запрос.Выполнить();
КонецФункции // ПолучитьРезультатЗапросаПоАктивам()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
