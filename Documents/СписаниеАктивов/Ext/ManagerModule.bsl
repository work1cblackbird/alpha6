// Модуль менеджера документа "Списание активов"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Вычислим сумму списания активов
	СуммаДокументаИтог = ?(Объект.Проведен, Объект.СуммаДокумента, 0);
	СуммаДокумента = ?(ЕстьРеквизит(Объект, "СуммаСписания", "Активы"), 
					Объект.Активы.Итог("СуммаСписания"), СуммаДокументаИтог);
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", СуммаДокумента);
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Проверяет документ на соответствие условиям выгрузки документа 
//
// Параметры:
//  Объект - ДокументОбъект - Объект, для которого выполняется проверка  
//
// Возвращаемое значение:
//  Булево - признак того что документ может быть выгружен
//
Функция РазрешитьРегистрациюДокумента(Объект) Экспорт

	ПрочиеАктивы = Объект.Активы.Выгрузить(, "ПрочийАктив");	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ПрочиеАктивы.ПрочийАктив КАК Справочник.ПрочиеАктивы) КАК Актив
		|ПОМЕСТИТЬ ПрочиеАктивы
		|ИЗ
		|	&ПрочиеАктивы КАК ПрочиеАктивы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктивыПодразделенияОстатки.ПрочийАктив КАК Актив,
		|	АктивыПодразделенияОстатки.ТипЭксплуатации КАК ТипЭксплуатации
		|ИЗ
		|	РегистрНакопления.ПрочиеАктивыВЭксплуатации.Остатки(
		|			&Дата,
		|			ПодразделениеКомпании В ИЕРАРХИИ (&Подразделение)
		|				И ПрочийАктив В
		|					(ВЫБРАТЬ
		|						ПрочиеАктивы.Актив
		|					ИЗ
		|						ПрочиеАктивы
		|					ГДЕ
		|						(ПрочиеАктивы.Актив.ВидПрочегоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихАктивов.СпецОснастка)
		|							ИЛИ ПрочиеАктивы.Актив.ВидПрочегоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихАктивов.Спецодежда)
		|							ИЛИ ПрочиеАктивы.Актив.ВидПрочегоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихАктивов.Инструменты)
		|							ИЛИ ПрочиеАктивы.Актив.ВидПрочегоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихАктивов.МалоценноеОборудованиеИЗапасы)))) КАК АктивыПодразделенияОстатки
		|ГДЕ
		|	АктивыПодразделенияОстатки.ТипЭксплуатации.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизации.СтопроцентныйПриВводе)
		|	И АктивыПодразделенияОстатки.КоличествоОстаток > 0";
		
	Запрос.УстановитьПараметр("ПрочиеАктивы", 	ПрочиеАктивы);
	Запрос.УстановитьПараметр("Дата",			Объект.Дата);
	Запрос.УстановитьПараметр("Подразделение",	Объект.ПодразделениеКомпании);

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина; 
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции


#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ХозОперация"); 
	ОбязательныеРеквизиты.Добавить("СтатьяДоходовИРасходов"); 
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Активы");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Активы.ПрочийАктив");
	ОбязательныеРеквизиты.Добавить("Активы.Количество");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеАктивы = Новый Массив();
	УникальныеАктивы.Добавить("ПрочийАктив");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Активы", УникальныеАктивы);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Активы.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаТабличнойЧастиАктивы.ВыполнитьПересчетТабличнойЧасти(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	                                                    
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАктивы

// Обработчик события возникающего при изменении данных реквизита "Прочий актив" в таблице "Активы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АктивыПрочийАктивПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиАктивы.АктивПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Обновим информацию по виду аренды
	РегистрыНакопления.АвтомобилиДляТестДрайва.ЗаполнитьВидАрендыАвтомобиля(Объект, Строка);
	
КонецПроцедуры // АктивыПрочийАктивПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт

	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Активы");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "СписаниеАктивов");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Активы");
	КонецЕсли;
	
	ВыборПодразделения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборПодразделения.ВыборСсылки 		= "Справочник.ПодразделенияКомпании.ФормаСписка";
	ВыборПодразделения.Обязательный 	= Истина;
	ВыборПодразделения.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать подразделение компании.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "АктивыПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить активами подразделения'");
	Команда.Идентификатор	= "АктивыЗаполнитьАктивамиПодразделения";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Активы";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ПодразделениеКомпании", ВыборПодразделения);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("АктивыЗаполнитьАктивамиПодразделения.Видимость",   Истина);
	ПараметрыКоманд.Вставить("АктивыЗаполнитьАктивамиПодразделения.Доступность", Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по заказам контрагенту
//
Функция АктивыЗаполнитьАктивамиПодразделения(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.ПодразделениеКомпании = ПараметрыЗаполнения.ПодразделениеКомпании Тогда
		Объект.ПодразделениеКомпании = ПараметрыЗаполнения.ПодразделениеКомпании;
		ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("ИмяКоманды", "АктивыЗаполнитьАктивамиПодразделения");
	
	Результат = ЗаполнениеДокументовСервер.ЗаполнитьТабличнуюЧастьАктивами(Объект, ПараметрыЗаполнения);
	
	Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаАктив Из Результат Цикл
			НоваяСтрока = Объект.Активы.Добавить();
			НоваяСтрока.ПрочийАктив = СтрокаАктив.Актив;
			НоваяСтрока.Количество  = СтрокаАктив.Количество;
			АктивыПрочийАктивПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // АктивыЗаполнитьАктивамиПодразделения()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.СписаниеАктивов",
		"ПФ_MXL_СписаниеАктивов",
		НСтр("ru = 'Списание активов'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.СписаниеАктивов",
		"ПФ_MXL_ОС4",
		НСтр("ru = 'ОС-4 (Акт списания ОС)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.СписаниеАктивов",
		"ПФ_MXL_МБ4",
		НСтр("ru = 'МБ-4 (Акт выбытия малоценных и быстроизнашивающихся предметов)'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа.
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_СписаниеАктивов") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПФ_MXL_СписаниеАктивов", 
																НСтр("ru = 'Списание активов'"), ПечатьСписаниеАктивов(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ОС4") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПФ_MXL_ОС4",
																НСтр("ru = 'ОС-4 (Акт списания ОС)'"), ПечатьОС4(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_МБ4") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПФ_MXL_МБ4", 
																НСтр("ru = 'МБ-4 (Акт выбытия малоценных и быстроизнашивающихся предметов)'"),
																ПечатьМБ4(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
КонецПроцедуры // Печать()

// Формирует печатную форму "СписаниеАктивов".
// 
Функция ПечатьСписаниеАктивов(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеАктивов_СписаниеАктивов";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СписаниеАктивов.ПФ_MXL_СписаниеАктивов");
		
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// Вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ПредставлениеПодразделения = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			Документ.ПодразделениеКомпании, Документ.Дата);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);

		// Готовим шапку
		НомерСтраницы = 2; НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,ОстаточнаяСтоимость", Документ.ВалютаДокумента, 0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		Если Документ.Проведен Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СписаниеАктивовАктивы.НомерСтроки,
			|	ПрочиеАктивыВЭксплуатации.ПрочийАктив КАК ПрочийАктив,
			|";
			Если Документ.ВалютаДокумента=Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|	ЕСТЬNULL(ПрочиеАктивыВЭксплуатации.БалансоваяСтоимость,0) КАК БалансоваяСтоимость,
				|	ЕСТЬNULL(ПрочиеАктивыВЭксплуатации.БалансоваяСтоимость,0)-ЕСТЬNULL(ПрочиеАктивыВЭксплуатации.СуммаАмортизации,0) КАК ОстаточнаяСтоимость
				|";
			Иначе
				ТекстЗапроса = ТекстЗапроса + "
				|	ВЫБОР
				|		КОГДА ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьУпр ЕСТЬ NULL 
				|			ТОГДА 0
				|		ИНАЧЕ ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьУпр * &МножительКурса
				|	КОНЕЦ КАК БалансоваяСтоимость,
				|	ВЫБОР
				|		КОГДА ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьУпр ЕСТЬ NULL 
				|			ТОГДА 0
				|		ИНАЧЕ ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьУпр * &МножительКурса
				|	КОНЕЦ - ВЫБОР
				|		КОГДА ПрочиеАктивыВЭксплуатации.СуммаАмортизацииУпр ЕСТЬ NULL 
				|			ТОГДА 0
				|		ИНАЧЕ ПрочиеАктивыВЭксплуатации.СуммаАмортизацииУпр * &МножительКурса
				|	КОНЕЦ КАК ОстаточнаяСтоимость
				|";
			КонецЕсли; 
			ТекстЗапроса = ТекстЗапроса + "
			|ИЗ
			|	Документ.СписаниеАктивов.Активы КАК СписаниеАктивовАктивы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПрочиеАктивыВЭксплуатации КАК ПрочиеАктивыВЭксплуатации
			|		ПО СписаниеАктивовАктивы.ПрочийАктив = ПрочиеАктивыВЭксплуатации.ПрочийАктив
			|ГДЕ
			|	ПрочиеАктивыВЭксплуатации.ВидДвижения = &ВидДвиженияНакопленияРасход
			|	И ПрочиеАктивыВЭксплуатации.Регистратор = &Ссылка
			|	И СписаниеАктивовАктивы.Ссылка = &Ссылка";
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
			Запрос.УстановитьПараметр("ВидДвиженияНакопленияРасход", ВидДвиженияНакопления.Расход);
			ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
			Если НЕ ЗначениеЗаполнено(Документ.КурсВалютыУпр) Тогда
				МножительКурса = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(1, ВалютаУправленческогоУчета,
					Документ.Дата, Документ.ВалютаДокумента, Документ.КурсДокумента);
			Иначе
				МножительКурса = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(1, ВалютаУправленческогоУчета,
					Документ.КурсВалютыУпр, Документ.ВалютаДокумента, Документ.КурсДокумента);
			КонецЕсли;
			Запрос.УстановитьПараметр("МножительКурса", МножительКурса);
		Иначе
			ТЧДокумента = Документ.Активы.Выгрузить();
			ТЧДокумента.Свернуть("ПрочийАктив", "Количество");
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПрочийАктив КАК ПрочийАктив,
			|	Количество  КАК Количество
			|ПОМЕСТИТЬ
			|	ТабДокумента
			|ИЗ
			|	&ТЧДокумента КАК ТЧДокумента
			|;
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТабДокумента.ПрочийАктив КАК ПрочийАктив,
			|	ТабДокумента.Количество  КАК Количество,
			|	ВЫБОР
			|		КОГДА ПрочиеАктивыВЭксплуатации.КоличествоОстаток ЕСТЬ NULL ТОГДА
			|			0
			|		ИНАЧЕ
			|			(ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьУпрОстаток * &МножительКурса)/ПрочиеАктивыВЭксплуатации.КоличествоОстаток*ТабДокумента.Количество
			|	КОНЕЦ КАК БалансоваяСтоимость,
			|	ВЫБОР
			|		КОГДА ПрочиеАктивыВЭксплуатации.КоличествоОстаток ЕСТЬ NULL ТОГДА
			|			0
			|		ИНАЧЕ
			|			(ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьУпрОстаток * &МножительКурса)/ПрочиеАктивыВЭксплуатации.КоличествоОстаток*ТабДокумента.Количество
			|	КОНЕЦ - ВЫБОР
			|			КОГДА ПрочиеАктивыВЭксплуатации.СуммаАмортизацииУпрОстаток ЕСТЬ NULL 
			|				ТОГДА 0
			|			ИНАЧЕ ПрочиеАктивыВЭксплуатации.СуммаАмортизацииУпрОстаток * &МножительКурса
			|		КОНЕЦ КАК ОстаточнаяСтоимость
			|ИЗ
			|	ТабДокумента КАК ТабДокумента
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.ПрочиеАктивыВЭксплуатации.Остатки(
			|		&Момент,
			|		ПрочийАктив В (&СписокАктивов)
			|		И ПодразделениеКомпании = &ПодразделениеКомпании)КАК ПрочиеАктивыВЭксплуатации
			|ПО
			|	ТабДокумента.ПрочийАктив = ПрочиеАктивыВЭксплуатации.ПрочийАктив";
			МоментВремени = ?(Документ.Ссылка.Пустая(), Новый Граница(ТекущаяДатаСеанса(), ВидГраницы.Исключая),
				Документ.Ссылка.МоментВремени());
			Запрос.УстановитьПараметр("Момент"               , МоментВремени);
			Запрос.УстановитьПараметр("СписокАктивов"        , ТЧДокумента.ВыгрузитьКолонку("ПрочийАктив"));
			Запрос.УстановитьПараметр("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
			Запрос.УстановитьПараметр("ТЧДокумента"          , ТЧДокумента);
			Если НЕ ЗначениеЗаполнено(Документ.КурсВалютыУпр) Тогда
				МножительКурса = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(1, ВалютаУправленческогоУчета,
					Документ.Дата, Документ.ВалютаДокумента, Документ.КурсДокумента);
			Иначе
				МножительКурса = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(1, ВалютаУправленческогоУчета,
					Документ.КурсВалютыУпр, Документ.ВалютаДокумента, Документ.КурсДокумента);
			КонецЕсли;
			Запрос.УстановитьПараметр("МножительКурса", МножительКурса);
		КонецЕсли;
		
		// Готовим области строки.
		ВыборкаТабличнойЧасти = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			// Заполняем данные строки.
			ОбластьСтрока.Параметры.Заполнить(СтрокаТЧ);
			ОбластьСтрока.Параметры.ПрочийАктив = СтрокаТЧ.ПрочийАктив;
			ОбластьСтрока.Параметры.АктивНаименование =
				УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТЧ.ПрочийАктив);
			ОбластьСтрока.Параметры.Код					= СтрокаТЧ.ПрочийАктив.ИнвентарныйНомер;
			ОбластьСтрока.Параметры.БалансоваяСтоимость	= Формат(СтрокаТЧ.БалансоваяСтоимость, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.ОстаточнаяСтоимость	= Формат(СтрокаТЧ.ОстаточнаяСтоимость, ФорматВыводаСуммы);
			
			// Доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если ВыборкаТабличнойЧасти.Индекс(СтрокаТЧ) = ВыборкаТабличнойЧасти.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			// Выводим строку, делая проверку попадания на лист.
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,ОстаточнаяСтоимость", Документ.ВалютаДокумента, 0);
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			КонецЕсли;
			
			// Добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// Итоги
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("ОстаточнаяСтоимость");
		ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'") + " " + ВыборкаТабличнойЧасти.Количество()
			+ " " + НСтр("ru = 'на сумму'") + " "
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, Документ.ВалютаДокумента);
		
		// Выводим представления и расшифровки подписей.
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьСписаниеАктивов()

// Формирует печатную форму "ОС4"
// 
Функция ПечатьОС4(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеАктивов_ОС4";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати,ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);

		Если Документ.Проведен Тогда
			// возьмем данные из движений документа
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПрочиеАктивыВЭксплуатации.ПрочийАктив КАК Актив,
			|	//ПрочиеАктивыВЭксплуатации.МОЛ,
			|	ПрочиеАктивыВЭксплуатации.ТипЭксплуатации,
			|	ПрочиеАктивыВЭксплуатации.БалансоваяСтоимость,
			|	ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьУпр,
			|	ПрочиеАктивыВЭксплуатации.СуммаАмортизации,
			|	ПрочиеАктивыВЭксплуатации.СуммаАмортизацииУпр
			|ИЗ
			|	Документ.СписаниеАктивов.Активы КАК СписаниеАктивовАктивы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПрочиеАктивыВЭксплуатации КАК ПрочиеАктивыВЭксплуатации
			|		ПО СписаниеАктивовАктивы.ПрочийАктив = ПрочиеАктивыВЭксплуатации.ПрочийАктив
			|ГДЕ
			|	ПрочиеАктивыВЭксплуатации.Регистратор = &Ссылка
			|	И СписаниеАктивовАктивы.Ссылка = &Ссылка";
			
			Запрос = Новый Запрос();
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
			РезЗапроса = Запрос.Выполнить();
		Иначе
			ТЧДокумента = Документ.Активы.Выгрузить();
			ТЧДокумента.Свернуть("ПрочийАктив","Количество");
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Текст =
			"ВЫБРАТЬ 
			|	ПрочийАктив КАК ПрочийАктив,
			|	Количество  КАК Количество
			|ПОМЕСТИТЬ
			|	ТабДокумента
			|ИЗ
			|	&ТЧДокумента КАК ТЧДокумента
			|;
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТабДокумента.ПрочийАктив КАК Актив,
			|	ТабДокумента.Количество  КАК Количество,
			|	ЕСТЬNULL(ПрочиеАктивыВЭксплуатации.ТипЭксплуатации, ЗНАЧЕНИЕ(Справочник.ТипыЭксплуатации.ПустаяСсылка)) КАК ТипЭксплуатации,
			|	ВЫБОР
			|		КОГДА ПрочиеАктивыВЭксплуатации.КоличествоОстаток ЕСТЬ NULL ТОГДА
			|			0
			|		ИНАЧЕ
			|			(ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьУпрОстаток)/ПрочиеАктивыВЭксплуатации.КоличествоОстаток*ТабДокумента.Количество
			|	КОНЕЦ КАК БалансоваяСтоимостьУпр,
			|	ВЫБОР
			|			КОГДА ПрочиеАктивыВЭксплуатации.СуммаАмортизацииУпрОстаток ЕСТЬ NULL 
			|				ТОГДА 0
			|			ИНАЧЕ ПрочиеАктивыВЭксплуатации.СуммаАмортизацииУпрОстаток
			|		КОНЕЦ КАК СуммаАмортизацииУпр,
			|	ВЫБОР
			|		КОГДА ПрочиеАктивыВЭксплуатации.КоличествоОстаток ЕСТЬ NULL ТОГДА
			|			0
			|		ИНАЧЕ
			|			(ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьОстаток)/ПрочиеАктивыВЭксплуатации.КоличествоОстаток*ТабДокумента.Количество
			|	КОНЕЦ КАК БалансоваяСтоимость,
			|	ВЫБОР
			|			КОГДА ПрочиеАктивыВЭксплуатации.СуммаАмортизацииОстаток ЕСТЬ NULL 
			|				ТОГДА 0
			|			ИНАЧЕ ПрочиеАктивыВЭксплуатации.СуммаАмортизацииОстаток
			|		КОНЕЦ КАК СуммаАмортизации
			|ИЗ
			|	ТабДокумента КАК ТабДокумента
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.ПрочиеАктивыВЭксплуатации.Остатки(
			|		&Момент,
			|		ПрочийАктив В (&СписокАктивов)
			|		И ПодразделениеКомпании = &ПодразделениеКомпании)КАК ПрочиеАктивыВЭксплуатации
			|ПО
			|	ТабДокумента.ПрочийАктив = ПрочиеАктивыВЭксплуатации.ПрочийАктив";
			МоментВремени = ?(Документ.Ссылка.Пустая(),Новый Граница(ТекущаяДатаСеанса(),ВидГраницы.Исключая),Документ.Ссылка.МоментВремени());
			Запрос.УстановитьПараметр("Момент"               , МоментВремени);
			Запрос.УстановитьПараметр("СписокАктивов"        , ТЧДокумента.ВыгрузитьКолонку("ПрочийАктив"));
			Запрос.УстановитьПараметр("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
			Запрос.УстановитьПараметр("ТЧДокумента"          , ТЧДокумента);
			РезЗапроса=Запрос.Выполнить();
		КонецЕсли;
		
		ВыборкаАктивы = РезЗапроса.Выбрать();
		ВыборкаАктивы.Следующий();
		
		// Чтение значения для директора
		ГлавныйБухгалтер 	 = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"ГлавныйБухгалтер");
		Руководитель 		 = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"Руководитель");
		МОЛ 				 = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"МОЛ");
		ПредседательКомиссии = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"ПредседательКомиссии");
		ЧленКомиссии1 		 = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"ЧленКомиссии1");
		ЧленКомиссии2 		 = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"ЧленКомиссии2");
		
		ВРегламентированнойВалюте=(Документ.ВалютаДокумента=Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить());
		ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		
		// дата документа
		ДатаДокумента = Документ.Дата;
		
		Если ВыборкаАктивы.Количество() = 1 Тогда //актив один - печать ОС-1
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СписаниеАктивов.ПФ_MXL_ОС4");
			
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			ОбластьМакета.Параметры.Заполнить(Документ);
			ОбластьМакета.Параметры.Организация   = Документ.Организация;
			ОбластьМакета.Параметры.ПредставлениеОрганизации   = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация, ДатаДокумента);
			ОбластьМакета.Параметры.Подразделение = Документ.ПодразделениеКомпании;
			ОбластьМакета.Параметры.ПредставлениеПодразделения = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ПодразделениеКомпании, ДатаДокумента);
			ОбластьМакета.Параметры.Заполнить(МОЛ);
			ОбластьМакета.Параметры.КодОКПО       = Документ.Организация.КодПоОКПО; 
			ОбластьМакета.Параметры.НомерДок      = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
			ОбластьМакета.Параметры.ДатаДок       = ДатаДокумента;
			ОбластьМакета.Параметры.Заполнить(Руководитель);
			ОбластьМакета.Параметры.НаимОС         = ВыборкаАктивы.Актив;
			ОбластьМакета.Параметры.ИнвНомер       = ВыборкаАктивы.Актив.ИнвентарныйНомер;
			ОбластьМакета.Параметры.ЗаводскойНомер = ВыборкаАктивы.Актив.СерийныйНомер;
			ОбластьМакета.Параметры.ПринятоКУчету  = ВыборкаАктивы.Актив.ДатаВводаВЭксплуатацию;
			ОбластьМакета.Параметры.СрокЭкспл      = ВыборкаАктивы.Актив.СрокПолезногоИспользования;
			ОбластьМакета.Параметры.НачСтоимость   = Формат(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаАктивы.Актив.ПервоначальнаяСтоимость, Константы.ВалютаУправленческогоУчетаКомпании.Получить(), 
													?(НЕ ЗначениеЗаполнено(Документ.КурсВалютыУпр), Документ.Дата, Документ.КурсВалютыУпр), Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(), Документ.Дата),ФорматВыводаСуммы);
			Если ВРегламентированнойВалюте Тогда
				ОбластьМакета.Параметры.НачАмортизация = Формат(ВыборкаАктивы.СуммаАмортизации,ФорматВыводаСуммы);
				ОбластьМакета.Параметры.ОстСтоимость   = Формат(ВыборкаАктивы.БалансоваяСтоимость - ВыборкаАктивы.СуммаАмортизации,ФорматВыводаСуммы);
			Иначе
				ОбластьМакета.Параметры.НачАмортизация = Формат(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаАктивы.СуммаАмортизацииУпр, Константы.ВалютаУправленческогоУчетаКомпании.Получить(), 
																?(НЕ ЗначениеЗаполнено(Документ.КурсВалютыУпр), Документ.Дата, Документ.КурсВалютыУпр), Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(), Документ.Дата),ФорматВыводаСуммы);
				ОбластьМакета.Параметры.ОстСтоимость   = Формат(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаАктивы.БалансоваяСтоимостьУпр - ВыборкаАктивы.СуммаАмортизацииУпр, Константы.ВалютаУправленческогоУчетаКомпании.Получить(), 
																?(НЕ ЗначениеЗаполнено(Документ.КурсВалютыУпр), Документ.Дата, Документ.КурсВалютыУпр), Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(), Документ.Дата),ФорматВыводаСуммы);
			КонецЕсли; 
			
			ОбластьМакета.Параметры.Заполнить(ПредседательКомиссии);
			ОбластьМакета.Параметры.Заполнить(ЧленКомиссии1);
			ОбластьМакета.Параметры.Заполнить(ЧленКомиссии2);
			ОбластьМакета.Параметры.Заполнить(ГлавныйБухгалтер);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
							
		Иначе // активов много - групповая печать (ОС-4б)
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СписаниеАктивов.ПФ_MXL_ОС4б");
					
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			ОбластьМакета.Параметры.Организация   = Документ.Организация;
			ОбластьМакета.Параметры.ПредставлениеОрганизации   = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация, ДатаДокумента);
			ОбластьМакета.Параметры.Подразделение = Документ.ПодразделениеКомпании;
			ОбластьМакета.Параметры.ПредставлениеПодразделения = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ПодразделениеКомпании, ДатаДокумента);
			ОбластьМакета.Параметры.Заполнить(МОЛ);
			ОбластьМакета.Параметры.КодОКПО       = Документ.Организация.КодПоОКПО;
			ОбластьМакета.Параметры.НомерДок      = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
			ОбластьМакета.Параметры.ДатаДок       = Документ.Дата;
			ОбластьМакета.Параметры.Заполнить(Руководитель);
			ТабличныйДокумент.Вывести(ОбластьМакета);

			ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("Шапка1");
			
			СтруктураИтоговПоСтранице = Новый Структура("НачСтоимость, НачАмортизация, ОстСтоимость", 0, 0, 0);
		
			// сразу два, т.к. выводим на второй странице только
			НомерСтраницы = 2;
			НомерСтраницыПред = НомерСтраницы;
			
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			
			// заполним параметры шапки таблицы для следующего листа
			ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
			ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			
			ОбластьИтогиПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
			ОбластьИтоги = Макет.ПолучитьОбласть("Итого");
			ОбластьПодвал = Макет.ПолучитьОбласть("Шапка2");
			
			// преобразуем таблицу данных
			тблВывода = РезЗапроса.Выгрузить();
			тблВывода.Колонки.Добавить("НачСтоимость");
			тблВывода.Колонки.Добавить("НачАмортизация");
			тблВывода.Колонки.Добавить("ОстСтоимость");
			Для Каждого ТекСтрока Из тблВывода Цикл
				ТекСтрока.НачСтоимость = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТекСтрока.Актив.ПервоначальнаяСтоимость, ВалютаУпр,
					?(НЕ ЗначениеЗаполнено(Документ.КурсВалютыУпр), ДатаДокумента, Документ.КурсВалютыУпр), ВалютаРегл, ДатаДокумента);
					
				Если ВРегламентированнойВалюте Тогда	
					ТекСтрока.НачАмортизация = ТекСтрока.СуммаАмортизации;
					ТекСтрока.ОстСтоимость = ТекСтрока.БалансоваяСтоимость - ТекСтрока.СуммаАмортизации
				Иначе
					ТекСтрока.НачАмортизация = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТекСтрока.СуммаАмортизацииУпр, ВалютаУпр,
						?(НЕ ЗначениеЗаполнено(Документ.КурсВалютыУпр), ДатаДокумента, Документ.КурсВалютыУпр), ВалютаРегл, ДатаДокумента);
					ТекСтрока.ОстСтоимость = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТекСтрока.БалансоваяСтоимостьУпр - ТекСтрока.СуммаАмортизацииУпр,
						ВалютаУпр, ?(НЕ ЗначениеЗаполнено(Документ.КурсВалютыУпр), ДатаДокумента, Документ.КурсВалютыУпр),
						ВалютаРегл, ДатаДокумента);
				КонецЕсли;
			КонецЦикла;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка1");
			Нп = 1;
			Для Каждого ТекСтрока Из тблВывода Цикл
				ОбластьМакета.Параметры.Нп             = Нп;
				ОбластьМакета.Параметры.НаимОС         = ТекСтрока.Актив;
				ОбластьМакета.Параметры.ИнвНомер       = ТекСтрока.Актив.ИнвентарныйНомер;
				ОбластьМакета.Параметры.СрокЭкспл      = ТекСтрока.Актив.СрокПолезногоИспользования;
				
				ОбластьМакета.Параметры.НачСтоимость 		= Формат(ТекСтрока.НачСтоимость,ФорматВыводаСуммы);
				ОбластьМакета.Параметры.НачАмортизация 		= Формат(ТекСтрока.НачАмортизация,ФорматВыводаСуммы);
				ОбластьМакета.Параметры.ОстСтоимость 		= Формат(ТекСтрока.ОстСтоимость,ФорматВыводаСуммы);
				
				// доп. области
				мсвДопОбластиПодвала = Неопределено;
				Если Нп = тблВывода.Количество() Тогда
					мсвДопОбластиПодвала = Новый Массив;
					мсвДопОбластиПодвала.Добавить(ОбластьИтоги);
				КонецЕсли;
				
				// выводим строку, делая проверку попадания на лист
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьМакета, ОбластьШапкаТаблицы, ОбластьИтогиПоСтранице,
																					НомерСтраницы, СтруктураИтоговПоСтранице, Документ, мсвДопОбластиПодвала);
				
				// инициализация итогов по странице
				Если НомерСтраницы <> НомерСтраницыПред Тогда
					СтруктураИтоговПоСтранице = Новый Структура("НачСтоимость, НачАмортизация, ОстСтоимость", 0, 0, 0);
					НомерСтраницыПред = НомерСтраницы;
					ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
				КонецЕсли;
				// добавляем итоги
				УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(ТекСтрока,СтруктураИтоговПоСтранице);
				
				Нп = Нп + 1;
			КонецЦикла;
			
			// Выводим последний подвал, если страниц больше единицы
			Если НомерСтраницы > 2 Тогда
				УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент,ОбластьИтогиПоСтранице,СтруктураИтоговПоСтранице,Документ);
			КонецЕсли;
				
			// Выводим итоги по документу в целом
			ОбластьИтоги.Параметры.НачСтоимость = Формат(тблВывода.Итог("НачСтоимость"), ФорматВыводаСуммы);
			ОбластьИтоги.Параметры.НачАмортизация = Формат(тблВывода.Итог("НачАмортизация"), ФорматВыводаСуммы);
			ОбластьИтоги.Параметры.ОстСтоимость = Формат(тблВывода.Итог("ОстСтоимость"), ФорматВыводаСуммы);
			ТабличныйДокумент.Вывести(ОбластьИтоги);
			
			ОбластьПодвал.Параметры.Заполнить(ПредседательКомиссии);
			ОбластьПодвал.Параметры.Заполнить(ЧленКомиссии1);
			ОбластьПодвал.Параметры.Заполнить(ЧленКомиссии2);
			ОбластьПодвал.Параметры.Заполнить(ГлавныйБухгалтер);
			ТабличныйДокумент.Вывести(ОбластьПодвал);
		КонецЕсли;
		
		ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатьОС4()

// Формирует печатную форму "МБ4"
// 
Функция ПечатьМБ4(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеАктивов_МБ4";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати,ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы 		= УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества  = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		
		Если Документ.Проведен Тогда
			// Если проведен  - возьмем данные из движений документа.
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПрочиеАктивыВЭксплуатации.ПрочийАктив КАК Актив,
			|	ПрочиеАктивыВЭксплуатации.МОЛ,
			|	ПрочиеАктивыВЭксплуатации.ТипЭксплуатации,
			|	ПрочиеАктивыВЭксплуатации.БалансоваяСтоимость,
			|	ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьУпр,
			|	ПрочиеАктивыВЭксплуатации.СуммаАмортизации,
			|	ПрочиеАктивыВЭксплуатации.СуммаАмортизацииУпр,
			|	ПрочиеАктивыВЭксплуатации.ПрочийАктив.Номенклатура.СтавкаНДС.Ставка КАК Ставка,
			|	ПрочиеАктивыВЭксплуатации.ПрочийАктив.ИнвентарныйНомер КАК ИнвентарныйНомер,
			|	ПрочиеАктивыВЭксплуатации.ПрочийАктив.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаИзмеренияКод,
			|	ПрочиеАктивыВЭксплуатации.ПрочийАктив.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаИзмеренияНаименование
			|ИЗ
			|	Документ.СписаниеАктивов.Активы КАК СписаниеАктивовАктивы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПрочиеАктивыВЭксплуатации КАК ПрочиеАктивыВЭксплуатации
			|		ПО СписаниеАктивовАктивы.ПрочийАктив = ПрочиеАктивыВЭксплуатации.ПрочийАктив
			|ГДЕ
			|	ПрочиеАктивыВЭксплуатации.Регистратор = &Ссылка
			|	И СписаниеАктивовАктивы.Ссылка = &Ссылка";
			Запрос = Новый Запрос();
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
			РезЗапроса =  Запрос.Выполнить();
		Иначе
			// найдем значения сами
			ТЧДокумента = Документ.Активы.Выгрузить();
			ТЧДокумента.Свернуть("ПрочийАктив","Количество");
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Текст =
			"ВЫБРАТЬ 
			|	ПрочийАктив КАК ПрочийАктив,
			|	Количество  КАК Количество
			|ПОМЕСТИТЬ
			|	ТабДокумента
			|ИЗ
			|	&ТЧДокумента КАК ТЧДокумента
			|;
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТабДокумента.ПрочийАктив КАК Актив,
			|	ТабДокумента.ПрочийАктив.Номенклатура.СтавкаНДС.Ставка КАК Ставка,
			|	ТабДокумента.ПрочийАктив.ИнвентарныйНомер КАК ИнвентарныйНомер,
			|	ТабДокумента.ПрочийАктив.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаИзмеренияКод,
			|	ТабДокумента.ПрочийАктив.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаИзмеренияНаименование,
			|	ТабДокумента.Количество  КАК Количество,
			|	ЕСТЬNULL(ПрочиеАктивыВЭксплуатации.ТипЭксплуатации, ЗНАЧЕНИЕ(Справочник.ТипыЭксплуатации.ПустаяСсылка)) КАК ТипЭксплуатации,
			|	ЕСТЬNULL(ПрочиеАктивыВЭксплуатации.МОЛ, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК МОЛ,
			|	ВЫБОР
			|		КОГДА ПрочиеАктивыВЭксплуатации.КоличествоОстаток ЕСТЬ NULL ТОГДА
			|			0
			|		ИНАЧЕ
			|			(ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьУпрОстаток)/ПрочиеАктивыВЭксплуатации.КоличествоОстаток*ТабДокумента.Количество
			|	КОНЕЦ КАК БалансоваяСтоимостьУпр,
			|	ВЫБОР
			|			КОГДА ПрочиеАктивыВЭксплуатации.СуммаАмортизацииУпрОстаток ЕСТЬ NULL 
			|				ТОГДА 0
			|			ИНАЧЕ ПрочиеАктивыВЭксплуатации.СуммаАмортизацииУпрОстаток
			|		КОНЕЦ КАК СуммаАмортизацииУпр,
			|	ВЫБОР
			|		КОГДА ПрочиеАктивыВЭксплуатации.КоличествоОстаток ЕСТЬ NULL ТОГДА
			|			0
			|		ИНАЧЕ
			|			(ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьОстаток)/ПрочиеАктивыВЭксплуатации.КоличествоОстаток*ТабДокумента.Количество
			|	КОНЕЦ КАК БалансоваяСтоимость,
			|	ВЫБОР
			|			КОГДА ПрочиеАктивыВЭксплуатации.СуммаАмортизацииОстаток ЕСТЬ NULL 
			|				ТОГДА 0
			|			ИНАЧЕ ПрочиеАктивыВЭксплуатации.СуммаАмортизацииОстаток
			|		КОНЕЦ КАК СуммаАмортизации
			|ИЗ
			|	ТабДокумента КАК ТабДокумента
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.ПрочиеАктивыВЭксплуатации.Остатки(
			|		&Момент,
			|		ПрочийАктив В (&СписокАктивов)
			|		И ПодразделениеКомпании = &ПодразделениеКомпании)КАК ПрочиеАктивыВЭксплуатации
			|ПО
			|	ТабДокумента.ПрочийАктив = ПрочиеАктивыВЭксплуатации.ПрочийАктив";
			МоментВремени = ?(Документ.Ссылка.Пустая(),Новый Граница(ТекущаяДатаСеанса(),ВидГраницы.Исключая),Документ.Ссылка.МоментВремени());
			Запрос.УстановитьПараметр("Момент"               , МоментВремени);
			Запрос.УстановитьПараметр("СписокАктивов"        , ТЧДокумента.ВыгрузитьКолонку("ПрочийАктив"));
			Запрос.УстановитьПараметр("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
			Запрос.УстановитьПараметр("ТЧДокумента"          , ТЧДокумента);
			РезЗапроса=Запрос.Выполнить();
		КонецЕсли;
		ВыборкаАктивы = РезЗапроса.Выбрать();
		ВыборкаАктивы.Следующий();

		// Запоминаем кладовщика
		МОЛ = ВыборкаАктивы.МОЛ;
		
		// Заполнение макета
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СписаниеАктивов.ПФ_MXL_МБ4");
		
		// дата документа
		ДатаДокумента = Документ.Дата;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьМакета.Параметры.Заполнить(Документ);
		ОбластьМакета.Параметры.НомерДок						= УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		ОбластьМакета.Параметры.Организация						= Документ.Организация;
		ОбластьМакета.Параметры.ОрганизацияПредставление		= УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация, ДатаДокумента);
		ОбластьМакета.Параметры.ПодразделениеКомпании			= Документ.ПодразделениеКомпании;
		ОбластьМакета.Параметры.Подразделение					= УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ПодразделениеКомпании, ДатаДокумента);
		ОбластьМакета.Параметры.КодОКПО							= Документ.Организация.КодПоОКПО;
		ОбластьМакета.Параметры.ДатаДок							= Документ.Дата;
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ВРегламентированнойВалюте = (Документ.ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить());
		ВалютаУпр  = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		
		ОбластьШапкаТаблицы 	   = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьМакета 			   = Макет.ПолучитьОбласть("СтрокаТаблицы");
		ОбластьИтогиПоСтранице 	   = Макет.ПолучитьОбласть("ПодвалТаблицы");
		ОбластьИтоги 			   = Макет.ПолучитьОбласть("ПодвалОбщиеИтоги");
		ОбластьИтогиПричиныВыбытия = Макет.ПолучитьОбласть("ТаблицаПричинаВыбытия");
		ОбластьИтогиМастер 		   = Макет.ПолучитьОбласть("ТаблицаМастер");
		
		СтруктураИтоговПоСтранице = Новый Структура("НачАмортизация, ОстСтоимость", 0, 0);
		
		// сразу два, т.к. выводим на второй странице только
		НомерСтраницы = 2;
		НомерСтраницыПред = НомерСтраницы;
		
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// заполним параметры шапки таблицы для следующего листа
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
		
		// преобразуем таблицу данных
		тблВывода = РезЗапроса.Выгрузить();
		тблВывода.Колонки.Добавить("НачАмортизация");
		тблВывода.Колонки.Добавить("ОстСтоимость");
	
		Для Каждого ТекСтрока Из тблВывода Цикл
			Если ВРегламентированнойВалюте Тогда	
				ТекСтрока.НачАмортизация = ТекСтрока.СуммаАмортизации;
				ТекСтрока.ОстСтоимость = ТекСтрока.БалансоваяСтоимость - ТекСтрока.СуммаАмортизации;
			Иначе
				ТекСтрока.НачАмортизация = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТекСтрока.СуммаАмортизацииУпр, ВалютаУпр,
					?(НЕ ЗначениеЗаполнено(Документ.КурсВалютыУпр), Документ.Дата, Документ.КурсВалютыУпр), ВалютаРегл, Документ.Дата);
				ТекСтрока.ОстСтоимость = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТекСтрока.БалансоваяСтоимостьУпр - ТекСтрока.СуммаАмортизацииУпр,
					ВалютаУпр, ?(НЕ ЗначениеЗаполнено(Документ.КурсВалютыУпр), Документ.Дата, Документ.КурсВалютыУпр),
					ВалютаРегл, Документ.Дата);
			КонецЕсли;
		КонецЦикла;

		Нп = 1;
		Для Каждого ТекСтрока Из тблВывода Цикл
			ОбластьМакета.Параметры.НаимОС = ТекСтрока.Актив;
			ОбластьМакета.Параметры.ИнвНомер = ТекСтрока.ИнвентарныйНомер;
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = ТекСтрока.БазоваяЕдиницаИзмеренияКод;
			ОбластьМакета.Параметры.ЕдиницаИзмеренияНаименование = ТекСтрока.БазоваяЕдиницаИзмеренияНаименование;
			ОбластьМакета.Параметры.Количество = Формат(1,ФорматВыводаКоличества);
			ОбластьМакета.Параметры.НачАмортизация = Формат(ТекСтрока.НачАмортизация,ФорматВыводаСуммы);
			ОбластьМакета.Параметры.ОстСтоимость = Формат(ТекСтрока.ОстСтоимость,ФорматВыводаСуммы);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Нп = тблВывода.Количество() Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьИтоги);
				мсвДопОбластиПодвала.Добавить(ОбластьИтогиПричиныВыбытия);
				мсвДопОбластиПодвала.Добавить(ОбластьИтогиМастер);
			КонецЕсли;
			
			// выводим строку, делая проверку попадания на лист
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьМакета, ОбластьШапкаТаблицы, ОбластьИтогиПоСтранице,
				НомерСтраницы, СтруктураИтоговПоСтранице, Документ, мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура("НачАмортизация, ОстСтоимость", 0, 0);
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(ТекСтрока, СтруктураИтоговПоСтранице);
			
			Нп = Нп + 1;
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент,ОбластьИтогиПоСтранице,СтруктураИтоговПоСтранице,Документ);
		КонецЕсли;
		
		// Выводим итоги по документу в целом
		ОбластьИтоги.Параметры.НачАмортизация = Формат(тблВывода.Итог("НачАмортизация"), ФорматВыводаСуммы);
		ОбластьИтоги.Параметры.ОстСтоимость = Формат(тблВывода.Итог("ОстСтоимость"), ФорматВыводаСуммы);
		ТабличныйДокумент.Вывести(ОбластьИтоги);
		
		ОбластьИтогиПричиныВыбытия.Параметры.Заполнить(Документ);
		ТабличныйДокумент.Вывести(ОбластьИтогиПричиныВыбытия);
		
		ОбластьИтогиМастер.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"Мастер"));
		ТабличныйДокумент.Вывести(ОбластьИтогиМастер);
		
		// Оборотная сторона
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаВиновник");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаВиновник");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалВиновник");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ТаблицаРуководитель");
		
		ОбластьМакета.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"Руководитель"));
		ОбластьМакета.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"ГлавныйБухгалтер"));
		ОбластьМакета.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"МОЛ"));
				
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Дата");
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;

		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатьМБ4()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.СписаниеАктивов);

КонецФункции

#КонецОбласти

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
    
    Результат = Новый Массив();
    Результат.Добавить("Активы.ВидАренды; АктивыВидАренды");
    Возврат Результат;
    
КонецФункции

#КонецОбласти

#КонецЕсли