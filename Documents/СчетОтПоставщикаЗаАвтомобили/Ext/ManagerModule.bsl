// Модуль менеджера документа "Счет от поставщика за автомобиль"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Автомобили.Итог("СуммаВсего"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	ИтогиОперации.Вставить("СуммаНДС"         , Объект.Автомобили.Итог("СуммаНДС"));
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используеся в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость выводв только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возращаемая сторка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить = ЛОЖЬ, ТолькоОсновныеКонтакты = ИСТИНА) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

// устаналвивает ставку НДС на таблицу автомобилей
//
Процедура УстановитьСтавкуНДСАвтомобилей(Объект, ПараметрыДействия)
	
	Если ПараметрыДействия.Свойство("НеПерезаполнятьСтавкиНДС", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата); 

	ОсвобожденОтНДС = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОсвобожденОтНДС", Ложь)
					  ИЛИ ПараметрыНДС.ОсвобожденОтНДС;
	
	// определяем ставку
	СтавкаНДС = ?(ОсвобожденОтНДС, Справочники.СтавкиНДС.БезНДС, РаботаСоСтавкамиНДССервер.СтавкаНДСНоменклатуры(ПараметрыНДС));
	Для Каждого Строка Из Объект.Автомобили Цикл
		Строка.СтавкаНДС = СтавкаНДС;
		АвтомобилиСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЦикла;
	
КонецПроцедуры

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Автомобили");
	КонецЕсли;

	ОбязательныеРеквизиты.Добавить("Автомобили.Автомобиль");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	//УникальныеТовары = Новый Массив();
	//УникальныеТовары.Добавить("Номенклатура");
	//УникальныеТовары.Добавить("ЕдиницаИзмерения");
	//УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	//УникальныеТовары.Добавить("ГТД");
	//
	//// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	//УникальныеРеквизиты.Вставить("Товары", УникальныеТовары);
	//
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	//КонтролируемыеРеквизиты.Вставить("СкладКомпании",         КонтрольПоПодразделению);
	//КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	//
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Автомобили.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.ПерезаполнитьЦеныТабличныхЧастей(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	// Установим ставку НДС для автомобилей
	УстановитьСтавкуНДСАвтомобилей(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
	// Установим ставку НДС для автомобилей
	УстановитьСтавкуНДСАвтомобилей(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	Если НЕ Объект.Контрагент.Пустая() Тогда
		Если (Объект.РасчетныйСчетКонтрагента.Пустая()) 
			ИЛИ (НЕ Объект.РасчетныйСчетКонтрагента.Владелец = Объект.Контрагент) Тогда
			
			Объект.РасчетныйСчетКонтрагента = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Объект.Контрагент);
		КонецЕсли;
	Иначе
		Объект.РасчетныйСчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтомобили

// Обработчик события возникающего при изменении данных реквизита "Автомобиль"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиАвтомобильПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.АвтомобильПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
	Если Строка.Количество = 0 Тогда 
		Строка.Количество = 1;
	КонецЕсли;
	
	// Заполним ставку НДС
	Если НЕ ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
		Если ЗначениеЗаполнено(Объект.Контрагент) И Объект.Контрагент.ОсвобожденОтНДС Тогда
			Запрос = Новый Запрос("
								|ВЫБРАТЬ ПЕРВЫЕ 1 СпрСтавкиНДС.Ссылка КАК СтавкаБезНДС
								|ИЗ Справочник.СтавкиНДС КАК СпрСтавкиНДС
								|ГДЕ СпрСтавкиНДС.Ставка=0");
			РезультатСтавкаБезНДС = Запрос.Выполнить();
			Если РезультатСтавкаБезНДС.Пустой() Тогда
				Строка.СтавкаНДС  = Неопределено;
			Иначе
				Строка.СтавкаНДС  = РезультатСтавкаБезНДС.Выгрузить().Получить(0).СтавкаБезНДС;
			КонецЕсли;
		Иначе
			Строка.СтавкаНДС	  = Справочники.СтавкиНДС.ОсновнаяСтавкаНДС;
		КонецЕсли;
	КонецЕсли; 
	
	Если ТипЗнч(Строка.Автомобиль) = Тип("СправочникСсылка.Модели") Тогда
		Если Строка.ВариантКомплектации.Владелец <> Строка.Автомобиль Тогда
			Строка.ВариантКомплектации = Неопределено;
		КонецЕсли;
		
		НаМомент = ?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Ссылка);
		Строка.Цена = ЦенообразованиеСервер.ПолучитьЦенуАвтомобиля(Объект.ТипЦен, Строка.Автомобиль, Строка.ВариантКомплектации,
			НаМомент, Объект.ВалютаДокумента, Объект.КурсДокумента);
	КонецЕсли;
	
	АвтомобилиЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Вариант комплектации"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиВариантКомплектацииПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	НаМомент = ?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Ссылка);
	Строка.Цена = ЦенообразованиеСервер.ПолучитьЦенуАвтомобиля(Объект.ТипЦен, Строка.Автомобиль, Строка.ВариантКомплектации,
		Намомент, Объект.ВалютаДокумента, Объект.КурсДокумента);
	
	АвтомобилиЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.ЦенаПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.СуммаПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.СуммаВсегоПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.СтавкаНДСПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// расчет суммы по строке
//
// Параметры:
//	ТочкаВхода - Строка - направление расчета суммовых показателей строки
//	Объект - ДокументОбъект или ОбъектФормы - Объект расчета
//	Строка - Строка табличной части - строка тч для расчета
//	ПараметрыДействия - Структура - Дополнительные парамтеры расчета.
//	
Процедура РассчитатьСуммуСтроки(ТочкаВхода, Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ТочкаВхода = "Цена" Тогда
		Строка.СуммаВсегоУпр = Строка.Количество*Строка.Цена;
		
		// Получим курсы упр. и рег. валюты на дату документа
		КоэфПересчета   = РаботаСКурсамиВалютПлатформа.ПолучитьКоэффициентПересчетаВалют(Объект.Дата);
		Строка.СуммаНДС = Строка.СуммаВсегоУпр*КоэфПересчета*Справочники.СтавкиНДС.ОсновнаяСтавкаНДС.Ставка/100;
	КонецЕсли;
	
	Если ТочкаВхода = "СуммаВсегоУпр" Тогда
		КоэфПересчета   = РаботаСКурсамиВалютПлатформа.ПолучитьКоэффициентПересчетаВалют(Объект.Дата);
		Строка.СуммаНДС = Строка.СуммаВсегоУпр*КоэфПересчета*Справочники.СтавкиНДС.ОсновнаяСтавкаНДС.Ставка/100;
		Строка.Цена     = ?(Строка.Количество = 0, Строка.СуммаВсегоУпр, Строка.СуммаВсегоУпр/Строка.Количество);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Автомобили");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "СчетНаОплатуЗаАвтомобили");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Автомобили");
	КонецЕсли;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "АвтомобилиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить по документу-основанию'");
	Команда.Идентификатор	= "АвтомобилиЗаполнитьПоДокументуОснование";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти 			= "Автомобили";
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением 	= Ложь;
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьПоДокументуОснование.Видимость",   Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьПоДокументуОснование.Доступность", Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по документу основаниию
//
Функция АвтомобилиЗаполнитьПоДокументуОснование(Ссылка, ПараметрыКоманды, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не заполнен документ основание.'"), Ссылка);
	Иначе
		// перезаполняем
		Документ = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.СчетОтПоставщикаЗаАвтомобили"));
		Документ.Заполнить(Объект.ДокументОснование);
		ЗначениеВДанныеФормы(Документ,Объект);
	КонецЕсли;
	
КонецФункции // АвтомобилиЗаполнитьПоДокументуОснование()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.СчетОтПоставщикаЗаАвтомобили",
		"СчетОтПоставщикаЗаАвтомобили",
		НСтр("ru = 'Счет от поставщика за автомобили'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетОтПоставщикаЗаАвтомобили") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"СчетОтПоставщикаЗаАвтомобили",
			НСтр("ru = 'Счет от поставщика за автомобили'"),
			ПечатьСчетОтПоставщикаЗаАвтомобили(МассивОбъектов, ОбъектыПечати)
		);
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "СчетОтПоставщикаЗаАвтомобили"
// Возвращает сформированный табличный документ:
Функция ПечатьСчетОтПоставщикаЗаАвтомобили(МассивОбъектов, ОбъектыПечати) Экспорт
	
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетОтПоставщикаЗаАвтомобили.ПФ_MXL_СчетОтПоставщикаЗаАвтомобили");
		
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьЗаголовокСчета  = Макет.ПолучитьОбласть("ЗаголовокСчета");
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьДокОснование    = Макет.ПолучитьОбласть("ДокументОснование");                         
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// дата документа
		ДатаДокумента = Документ.Дата;
		
		// Заголовок счета
		ОбластьЗаголовокСчета.Параметры.БанкПолучателя = Символы.НПП + Документ.РасчетныйСчетКонтрагента.Банк;
		ОбластьЗаголовокСчета.Параметры.БанкПолучателяПредставление = Документ.РасчетныйСчетКонтрагента.Банк;
		ОбластьЗаголовокСчета.Параметры.БИКБанкаПолучателя = Символы.НПП
			+ СокрЛП(Документ.РасчетныйСчетКонтрагента.Банк.Код);
		ОбластьЗаголовокСчета.Параметры.СчетБанкаПолучателя = Символы.НПП
			+ СокрЛП(Документ.РасчетныйСчетКонтрагента.Банк.КоррСчет);
		ОбластьЗаголовокСчета.Параметры.ИНН = Символы.НПП
			+ УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Контрагент, Новый Структура("ИНН"));
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовокСчета.Параметры.КПП = Символы.НПП
			+ УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
				Документ.Контрагент, Новый Структура("КПП"), ДополнительныеПараметры);
		ОбластьЗаголовокСчета.Параметры.Получатель = Документ.Контрагент;
		ОбластьЗаголовокСчета.Параметры.ПолучательПредставление = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			Документ.Контрагент, ДатаДокумента);
		ОбластьЗаголовокСчета.Параметры.СчетПолучателя = Символы.НПП + СокрЛП(Документ.РасчетныйСчетКонтрагента.НомерСчета);
		ТабличныйДокумент.Вывести(ОбластьЗаголовокСчета);
		
		// вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(
			Документ,
			НСтр("ru = 'Счет от поставщика за автомобили'")
		);
		Если ЗначениеЗаполнено(Документ.ВхДокНомер) Тогда
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, Документ.Номер, Документ.ВхДокНомер);
		КонецЕсли;
		Если ЗначениеЗаполнено(Документ.ВхДокДата) Тогда
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка,Формат(Документ.Дата,"ДФ = dd.MM.yyyy"), Формат(Документ.ВхДокДата,"ДФ = dd.MM.yyyy"));
		КонецЕсли;
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		СтруктураПредставления = Новый Структура;
		СтруктураПредставления.Вставить("ИНН",              "ИНН ");
		СтруктураПредставления.Вставить("КПП",              "КПП ");
		СтруктураПредставления.Вставить("Наименование",     "");
		СтруктураПредставления.Вставить("АдресЮридический", "");
		СтруктураПредставления.Вставить("ТелефонРабочий",   "тел.: ");
		
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Контрагент, СтруктураПредставления, ДополнительныеПараметры);
		
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ОбластьЗаголовок.Параметры.ПредставлениеПокупателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, СтруктураПредставления, ДополнительныеПараметры);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// вывод документа основания
		Если ЗначениеЗаполнено(Документ.ДокументОснование) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ДокументОснование");
			ОбластьМакета.Параметры.ДокументОснованиеПредставление =
				УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ.ДокументОснование);
			ОбластьМакета.Параметры.ДокументОснование = Документ.ДокументОснование;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли; 
		
		// заполняем заголовок колонки НДС по типу цен
		Параметры = Новый Структура("НДС");
		Параметры.НДС = "НДС";
		Если Документ.ТипЦен.ЦенаВключаетНДС
			ИЛИ НЕ ПолучитьПараметрыПлательщикаНДС(Документ.Организация, Документ.ПодразделениеКомпании, Документ.Дата).ОсвобожденОтНДС Тогда	// Если НДС включен
			Параметры.НДС = НСтр("ru = 'в т.ч. НДС'");
		КонецЕсли;
		ОбластьШапкаТаблицы.Параметры.Заполнить(Параметры);
		
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// готовим шапку
		НомерСтраницы = 2;
		НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура;
		СтруктураИтоговПоСтранице.Вставить("СуммаВсего", 0);
		СтруктураИтоговПоСтранице.Вставить("СуммаНДС", 0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		// 
		ВыборкаТабличнойЧасти = Документ.Автомобили.Выгрузить();
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			// заполняем данные строки
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхСтрокиДляАвтомобилей(СтрокаТЧ, Документ);
			СтруктураСтроки.Сумма = СтруктураСтроки.СуммаВсего;
			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Автомобили.Индекс(СтрокаТЧ) = Документ.Автомобили.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура;
				СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
				СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
				СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// итоги
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("СуммаВсего");
		ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		НДСВсего = ВыборкаТабличнойЧасти.Итог("СуммаНДС");
		ОбластьПодвал.Параметры.НДСВсего = Формат(НДСВсего, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью = СтрШаблон(НСтр("ru = 'Всего наименований %1 на сумму %2'"),
			ВыборкаТабличнойЧасти.Количество(),
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, Документ.ВалютаДокумента));
			
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетОтПоставщикаЗаАвтомобили_СчетОтПоставщикаЗаАвтомобили";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьСчетОтПоставщикаЗаАвтомобили()

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаРасходДС);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПлатежноеПоручение);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПоступлениеАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЧекНаОплату);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.СчетОтПоставщикаЗаАвтомобили);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли