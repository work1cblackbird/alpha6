// Модуль документа "Разукомплектация"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Произведем очистку не использующихся в текущем контексте реквизитов
	ОбработкаСобытийДокументаСервер.ОчиститьПолеЦенаРозничнаяДляНеРозничныхСкладов(ЭтотОбъект, СкладКомпании);
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПартиямПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = КоличествоКомплектов = 0;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// получим результаты запроса
	РезультатЗапросаПоТоварамКомплект=ПолучитьРезультатЗапросаПоТоварам(ЭтотОбъект,2);
	РезультатЗапросаПоТоварамСостав=ПолучитьРезультатЗапросаПоТоварам(ЭтотОбъект,0);
	
	// 1. Списываем комплект
	НаборЗаписейОстатки=Движения.ОстаткиТоваровКомпании;
	НаборЗаписейОстатки.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейОстатки.СкладКомпании=СкладКомпании;
	НаборЗаписейОстатки.РезультатЗапросаПоТоварам=РезультатЗапросаПоТоварамКомплект;
	НаборЗаписейОстатки.ДвиженияПоРознице=СкладКомпании.Розничный;

	Отказ=НЕ НаборЗаписейОстатки.Расход() ИЛИ Отказ;
	Если Отказ Тогда
		Возврат; // дальше смысла не имеет
	КонецЕсли;
	
	// 2. Приходуем состав
	НаборЗаписейОстатки.РезультатЗапросаПоТоварам=РезультатЗапросаПоТоварамСостав;
	НаборЗаписейОстатки.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейОстатки.ДвиженияПоРознице=СкладКомпании.Розничный;

	Отказ=НЕ НаборЗаписейОстатки.Приход() ИЛИ Отказ;
	
	// проведем партии товаров
	Отказ=НЕ ПровестиПоПартиям(РежимПроведения,Ссылка) ИЛИ Отказ;
	
	// Если приходуем товар на розничный склад, то установим розничные цены на этот товар.
	Если НЕ Отказ И СкладКомпании.Розничный И ПодразделениеКомпании.УстановкаЦенДокументамиПоступления И НЕ СкладКомпании.ТипЦенРозничнойТорговли.Рассчитывается Тогда
		НаборЗаписейЦены=Движения.Цены;
		НаборЗаписейЦены.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейЦены.Контрагент=Неопределено;
		НаборЗаписейЦены.ПодразделениеКомпании = СкладКомпании.ПодразделениеКомпании;
		НаборЗаписейЦены.ТипЦен=СкладКомпании.ТипЦенРозничнойТорговли;
		Отказ = НЕ НаборЗаписейЦены.УстановитьЦены() ИЛИ Отказ;
	КонецЕсли;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДолюСтоимости() Экспорт 
	
	СуммаОбщая = Товары .Итог("СуммаВсего") - Товары.Итог("СуммаНДС"); 
	Если СуммаОбщая > 0 Тогда
		Для Каждого Строка Из Товары Цикл  
			Строка.ДоляСтоимости = Окр((Строка.СуммаВсего - Строка.СуммаНДС)/СуммаОбщая*100,2) 
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Комплектация"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Комплектация(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.Комплектация Тогда
		
		ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента  = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		
		Для Каждого СтрокаТовар Из Товары Цикл
			Документы.Разукомплектация.ТоварыНоменклатураПриИзменении(ЭтотОбъект, СтрокаТовар,
				ДополнительныеСвойства.ПараметрыДействия);
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьДолюСтоимости();
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Комплектация()

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// У нас не стандартная таблица, поэтому сформирует свой результат запроса по товарам.
//
// Параметры:
//  Режим - число, 0-состав комплекта (по остаткам), 1-состав комплекта (по партиям), 2-сам комплект
//  ШапкаДокумента - выборка.
//
Функция ПолучитьРезультатЗапросаПоТоварам(ШапкаДокумента,Режим=0)
	
	Запрос=Новый Запрос();
	Если Режим=2 Тогда
		// КОМПЛЕКТ
	    ТекстЗапроса="
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Разукомплектация.Комплект КАК Номенклатура,
		|	Разукомплектация.ХарактеристикаКомплекта КАК ХарактеристикаНоменклатуры,
		|	Разукомплектация.ЦенаКомплектаРозничная КАК ЦенаРозничная,
		|	Разукомплектация.КоличествоКомплектов КАК Количество,
		|	Разукомплектация.КоличествоКомплектов*Разукомплектация.ЦенаКомплекта КАК СуммаВсего,";
		Если ШапкаДокумента.СкладКомпании.Розничный Тогда
			ТекстЗапроса=ТекстЗапроса+"
			|	Разукомплектация.КоличествоКомплектов*Разукомплектация.ЦенаКомплектаРозничная КАК СуммаРозн,";
		Иначе
			ТекстЗапроса=ТекстЗапроса+"
			|	0 КАК СуммаРозн,";
		КонецЕсли;
		ТекстЗапроса=ТекстЗапроса+"
		|	Разукомплектация.Комплект.СтавкаНДС КАК СтавкаНДС,
		|	0 КАК СуммаНДС
		|ИЗ
		|	Документ.Разукомплектация КАК Разукомплектация
	    |ГДЕ
		|	Разукомплектация.Ссылка=&Ссылка
		|";
		Запрос.Текст=ТекстЗапроса;
		Запрос.УстановитьПараметр("Ссылка",ШапкаДокумента.Ссылка);
		РезультатЗапроса=Запрос.Выполнить();
		
	Иначе
		// СОСТАВ КОМПЛЕКТА
		Если НЕ ЗначениеЗаполнено(ШапкаДокумента.ДокументОснование) Тогда
		    ТекстЗапроса="
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РазукомплектацияТовары.Номенклатура КАК Номенклатура,
			|	РазукомплектацияТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	РазукомплектацияТовары.ЦенаРозничная КАК ЦенаРозничная,
			|	РазукомплектацияТовары.Количество*РазукомплектацияТовары.Коэффициент*(&КоличествоКомплектов) КАК Количество,";
			Если ШапкаДокумента.СкладКомпании.Розничный Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|	РазукомплектацияТовары.СуммаРозничная КАК СуммаРозн,";
			Иначе
				ТекстЗапроса=ТекстЗапроса+"
				|	0 КАК СуммаРозн,";
			КонецЕсли;
			ТекстЗапроса=ТекстЗапроса+"
			|	РазукомплектацияТовары.СуммаНДС КАК СуммаНДС,
			|	РазукомплектацияТовары.СтавкаНДС КАК СтавкаНДС,
			|	РазукомплектацияТовары.СуммаВсего КАК СуммаВсего
			|
			|ИЗ
			|	Документ.Разукомплектация.Товары КАК РазукомплектацияТовары
			|ГДЕ
			|	РазукомплектацияТовары.Ссылка=&Ссылка
			|";
			Запрос.Текст=ТекстЗапроса;
			Запрос.УстановитьПараметр("Ссылка",ШапкаДокумента.Ссылка);
			Запрос.УстановитьПараметр("КоличествоКомплектов",ШапкаДокумента.КоличествоКомплектов);
			РезультатЗапроса=Запрос.Выполнить();
		Иначе
			Если Режим=0 Тогда
				Запрос=Новый Запрос("
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Номенклатура КАК Номенклатура,
				|	ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
				|	СкладКомпании КАК СкладКомпании,
				|	СУММА(0) КАК ЦенаРозничная,
				|	СУММА(0) КАК СуммаРозничная,
				|	СУММА(0) КАК СуммаСкидки,
				|	СУММА(Количество) КАК Количество,
				|	Сумма(0) КАК СуммаНДС,
				|	СУММА(0) КАК Резерв
				|ИЗ
				|	РегистрНакопления.ОстаткиТоваровКомпании
				|
				|ГДЕ
				|	Регистратор=&Ссылка И ВидДвижения=&ВидДвиженияРасход
				|	
				|СГРУППИРОВАТЬ ПО
				|	Номенклатура,
				|	ХарактеристикаНоменклатуры,
				|	СкладКомпании");
			Иначе
				Запрос=Новый Запрос("
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Номенклатура КАК Номенклатура,
				|	ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
				|	Партия КАК Партия,
				|	СтатусПартии КАК СтатусПартии,
				|	СУММА(СуммаНДС) КАК СуммаНДС,
				|	МАКСИМУМ(СтавкаНДС) КАК СтавкаНДС,
				|	СУММА(Сумма) КАК СуммаВсего,
				|	СУММА(Количество) КАК Количество
				|ИЗ
				|	РегистрНакопления.ПартииТоваровКомпании
				|
				|ГДЕ
				|	Регистратор=&Ссылка И ВидДвижения=&ВидДвиженияРасход
				|	
				|СГРУППИРОВАТЬ ПО
				|	Номенклатура,
				|	ХарактеристикаНоменклатуры,
				|	Партия,
				|	СтатусПартии
				|");
			КонецЕсли;
			Запрос.УстановитьПараметр("Ссылка",ШапкаДокумента.ДокументОснование);
			Запрос.УстановитьПараметр("ВидДвиженияРасход",ВидДвиженияНакопления.Расход);
			ТаблицаДвижений=Запрос.Выполнить().Выгрузить();
			РезультатЗапроса=ТаблицаДвижений.Скопировать(); РезультатЗапроса.Очистить();
			
			ЗапросТовары=Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Номенклатура,
			|	ХарактеристикаНоменклатуры,
			|	СУММА(Количество*Коэффициент) КАК Количество
			|ИЗ
			|	Документ.Разукомплектация.Товары
			|ГДЕ
			|	Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО 
			|	Номенклатура,
			|	ХарактеристикаНоменклатуры
			|");
			ЗапросТовары.УстановитьПараметр("Ссылка",ШапкаДокумента.Ссылка);
			ВыборкаТовары=ЗапросТовары.Выполнить().Выбрать();
			
			// немножко посчитаем таблицу по количеству комплектов
			Пока ВыборкаТовары.Следующий() Цикл
				НадоОприходовать=ВыборкаТовары.Количество*ШапкаДокумента.КоличествоКомплектов;
				СтруктураОтбора=Новый Структура("Номенклатура",ВыборкаТовары.Номенклатура);
				Если ЗначениеЗаполнено(ВыборкаТовары.ХарактеристикаНоменклатуры) Тогда
					СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры",ВыборкаТовары.ХарактеристикаНоменклатуры);
				КонецЕсли;
				НайденныеСтроки=ТаблицаДвижений.НайтиСтроки(СтруктураОтбора);
				
				Для Сч=0 По НайденныеСтроки.ВГраница() Цикл
					ТекСтрока=НайденныеСтроки[Сч];
					Если ТекСтрока.Количество=0 Тогда Продолжить; КонецЕсли;
					
					НоваяСтрока=РезультатЗапроса.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
					
					НоваяСтрока.Количество=Мин(НадоОприходовать,НоваяСтрока.Количество);
					
					Если Режим=1 Тогда
						// если партии, то изменим стоимость и НДС	
						НоваяСтрока.СуммаВсего=НоваяСтрока.СуммаВсего*(НоваяСтрока.Количество/ТекСтрока.Количество);
						НоваяСтрока.СуммаНДС=НоваяСтрока.СуммаНДС*(НоваяСтрока.Количество/ТекСтрока.Количество);
					ИначеЕсли ШапкаДокумента.СкладКомпании.Розничный Тогда
						// для остатков получим текущую розничную цену
						НоваяСтрока.ЦенаРозничная=ЦенообразованиеСервер.ПолучитьЦену(ШапкаДокумента.СкладКомпании.ТипЦенРозничнойТорговли,ВыборкаТовары.Номенклатура,ШапкаДокумента.Ссылка,,ШапкаДокумента.ВалютаДокумента,ШапкаДокумента.КурсДокумента);
						НоваяСтрока.СуммаРозничная=НоваяСтрока.ЦенаРозничная*НоваяСтрока.Количество;
					КонецЕсли;
					
					ТекСтрока.Количество=ТекСтрока.Количество-НоваяСтрока.Количество;
					НадоОприходовать=НадоОприходовать-НоваяСтрока.Количество;
					Если НадоОприходовать<=0 Тогда Прервать; КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат РезультатЗапроса;
	
КонецФункции // ПолучитьРезультатЗапросаПоТоварам()

// возвращает выборку по шапке
//
// Параметры:
//  ДокументСсылка - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Выборка - выборка по шапке
//
Функция ПолучитьШапкуДокумента(ДокументСсылка)
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	СУММА(РазукомплектацияТовары.Цена) КАК Цена
	                    |ПОМЕСТИТЬ ДокТовары
	                    |ИЗ
	                    |	Документ.Разукомплектация.Товары КАК РазукомплектацияТовары
	                    |ГДЕ
	                    |	РазукомплектацияТовары.Ссылка = &Ссылка
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	Док.Ссылка КАК Ссылка,
	                    |	Док.Дата КАК Дата,
	                    |	Док.ВалютаДокумента КАК ВалютаДокумента,
	                    |	Док.КурсДокумента КАК КурсДокумента,
	                    |	Док.ТипЦен КАК ТипЦен,
	                    |	Док.ХозОперация КАК ХозОперация,
	                    |	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	                    |	Док.МоментВремени КАК МоментВремени,
	                    |	Док.Организация КАК Организация,
	                    |	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	                    |	Док.Проект КАК Проект,
	                    |	Док.КоличествоКомплектов КАК КоличествоКомплектов,
	                    |	Док.СкладКомпании КАК СкладКомпании,
	                    |	Док.СкладКомпании.ТипЦенРозничнойТорговли КАК ТипЦенРозничнойТорговли,
	                    |	Док.СкладКомпании.Розничный КАК СкладКомпанииРозничный,
	                    |	Док.СкладКомпании.ПодразделениеКомпании КАК ПодразделениеСклада,
	                    |	Док.ДокументОснование КАК ДокументОснование,
	                    |	ДокТовары.Цена КАК Цена
	                    |ИЗ
	                    |	Документ.Разукомплектация КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ ДокТовары КАК ДокТовары
	                    |		ПО (ИСТИНА)
	                    |ГДЕ
	                    |	Док.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции // ПолучитьШапкуДокумента()

// формирует движения документа по партионным регистрам
//
// Параметры:
//  Режим           - режим проведения (оперативный/неоперативный)
//  ДокументСсылка  - ссылка на документ который надо допровести по партиям.
//
// Возвращаемое значение:
//  Возвращает Истина - все ОК, ложь - чего-то не так.
//
Функция ПровестиПоПартиям(Режим,ДокументСсылка) Экспорт
	
	Отказ=Ложь;
	
	// получим шапку документа
	ШапкаДокумента=ПолучитьШапкуДокумента(ДокументСсылка);
	
	// Проверим, если подразделение проводится по партиям "отложенно", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям=Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
		Возврат НЕ Отказ;
	КонецЕсли;
	
	// определим способ ведения баланса
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
	
	// получим результат запроса по комплекту
	РезультатЗапросаПоТоварамКомплект=ПолучитьРезультатЗапросаПоТоварам(ШапкаДокумента,2);
	
	// 1. Списываем комплект
	НаборЗаписейПартии=Движения.ПартииТоваровКомпании;
	НаборЗаписейПартии.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейПартии.ШапкаДокумента=ШапкаДокумента;
	НаборЗаписейПартии.СкладКомпании=ШапкаДокумента.СкладКомпании;
	НаборЗаписейПартии.Организация=ШапкаДокумента.Организация;
	НаборЗаписейПартии.РезультатЗапросаПоТоварам=РезультатЗапросаПоТоварамКомплект;
	Отказ=НЕ НаборЗаписейПартии.Расход() ИЛИ Отказ;
	
	// Получим результат запроса по составу комплекта
	РезультатЗапросаПоТоварамСостав=ПолучитьРезультатЗапросаПоТоварам(ШапкаДокумента,1);
	
	// 2. Приходуем состав
	НаборЗаписейПартии.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейПартии.ШапкаДокумента = ШапкаДокумента;
	НаборЗаписейПартии.Организация = ШапкаДокумента.Организация;
	НаборЗаписейПартии.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварамСостав;
	//НаборЗаписейПартии.СтатусПартии   = Перечисления.СтатусыПартий.ТоварКупленный;
    НаборЗаписейПартии.ЕстьСтавкаНДС  = Истина;
	Отказ=НЕ НаборЗаписейПартии.Приход() ИЛИ Отказ;
	
	// Доходы и расходы
	ТаблицаДиР=НаборЗаписейПартии.Выгрузить();
	ТаблицаДиР.Свернуть("ВидДвижения","СуммаУпр");
	
	ПриходСумма=0;
	СтрокаТЗ = ТаблицаДиР.Найти(ВидДвиженияНакопления.Приход,"ВидДвижения");
	Если СтрокаТЗ <> Неопределено Тогда
		ПриходСумма = СтрокаТЗ.СуммаУпр;
	КонецЕсли;
	
	РасходСумма = 0;
	СтрокаТЗ = ТаблицаДиР.Найти(ВидДвиженияНакопления.Расход,"ВидДвижения");
	Если СтрокаТЗ <> Неопределено Тогда
		РасходСумма = СтрокаТЗ.СуммаУпр;
	КонецЕсли;
	
	Если ПриходСумма <> РасходСумма Тогда
		НаборЗаписейДиР 						= Движения.ДоходыИРасходы;
		НаборЗаписейДиР.ШапкаДокумента			= ШапкаДокумента;
		НаборЗаписейДиР.ДокументОбъект 			= ЭтотОбъект;
		// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
		Если ВедетсяБалансПоПодразделению Тогда
			НаборЗаписейДиР.Подразделение       = ШапкаДокумента.ПодразделениеСклада;
		КонецЕсли;
		НаборЗаписейДиР.СтатьяДоходовИРасходов	= Справочники.СтатьиДоходовИРасходов.ОтклонениеСебестоимостиПриКомплектации;
		НаборЗаписейДиР.ВУпрВалюте				= Истина;
		
		Разница = ПриходСумма-РасходСумма;
		Если Разница > 0 Тогда
			НаборЗаписейДиР.Доход = Разница;
		Иначе
			НаборЗаписейДиР.Расход = -Разница;
		КонецЕсли; 

		Отказ=НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
	КонецЕсли; 
	
	// двигаем границу последовательности партий
	Если Ссылка <> ДокументСсылка Тогда
		
		РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоПартиямПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		
	КонецЕсли;
	
	РаботаСГраницами.СдвинутьГраницуПартий(ДокументСсылка, ДополнительныеСвойства, Движения);
	
	Возврат НЕ Отказ;
	
КонецФункции // ПровестиПоПартиям()

#КонецОбласти

#КонецОбласти

#Область Инициализация

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// Установим параметры проверки документа
ДополнительныеСвойства.Вставить("ТоварыЗапретАвтоСписанияХарактеристик", ИСТИНА);

#КонецОбласти

#КонецЕсли
