// Модуль объекта документа "Отгрузка товаров"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	// Установим запрет на создание нового документа
	Если ЭтоНовый() Тогда
		ЗапретитьСозданиеНовогоДокумента();
	КонецЕсли;
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаОтгрузкиТоваров) Тогда
		ДатаОтгрузкиТоваров = Дата;
	КонецЕсли;
	
	ТипЦен = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенПродажи");
	Если НЕ ДанныеЗаполнения = Неопределено Тогда
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			Если ДанныеЗаполнения.Свойство("ТипЦен") Тогда
				ТипЦен = ДанныеЗаполнения.ТипЦен;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДанныеЗаполнения)) Тогда
			ТипЦен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ТипЦен");
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТовар Из Товары Цикл
		
		// Заполним доп. поля для товарной строки
		Если ПустаяСтрока(СтрокаТовар.ИдентификаторТовара) Тогда
			СтрокаТовар.ИдентификаторТовара = Новый УникальныйИдентификатор;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ТоварнаяГруппа) Тогда
		ТоварнаяГруппа = МаркировкаТоваровСервер.ТоварнаяГруппа(Товары.ВыгрузитьКолонку("Номенклатура"));
	КонецЕсли;
	
	Документы.ОтгрузкаТоваровКодовМаркировки.УстановитьНеучастникГИСМТ(ЭтотОбъект);
	
	Если ЭтоНовый() Тогда
		ВыводИзОборота = Истина;
		ВидТоварооборота = Перечисления.ВидыОтгрузкиТоваров.Продажа;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	// Установим запрет на создание нового документа
	ЗапретитьСозданиеНовогоДокумента();
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	КодыМаркировки.Очистить();
	ВыводИзОборота = Истина;
	ВидТоварооборота = Перечисления.ВидыОтгрузкиТоваров.Продажа;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МаркировкаТоваровСервер.ПроверкаКодовМаркировкиПередЗаписью(ЭтотОбъект);
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаВыводаИзОборота)
		И ДатаВыводаИзОборота < ДатаПервичногоДокумента Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Дата вывода из оборота не может быть меньше даты первичного документа'"),
			ЭтотОбъект,,,
			Отказ);
	КонецЕсли;
	
	МаркировкаТоваровСервер.ПроверитьЗаполнениеКодовМаркировки(ЭтотОбъект, Отказ, , , Истина);
	МаркировкаТоваровСервер.НоменклатураСоответствуетТоварнойГруппе(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Только для записанных документов определим статус из регистра при необходимости
	Если ЗначениеЗаполнено(Ссылка)
		И ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "Статус") = Неопределено Тогда
		ДанныеСтатусаДокумента = РегистрыСведений.СтатусыДокументовМаркировки.ПолучитьСтатусДокумента(Ссылка);
		ДополнительныеСвойства.Вставить("ИдентификаторДокумента", ДанныеСтатусаДокумента.ИдентификаторДокумента);
		ДополнительныеСвойства.Вставить("Статус", ДанныеСтатусаДокумента.Статус);
		ДополнительныеСвойства.Вставить("ОписаниеОшибки", ДанныеСтатусаДокумента.ОписаниеОшибки);
	КонецЕсли;
	
	// Разберем маркировку на состовляющие для поиска
	Для Каждого ТекущийКодМаркировки Из КодыМаркировки Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекущийКодМаркировки.КодМаркировки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураМаркировки = МенеджерОборудованияМаркировка.РазобратьШтриховойКодТовара(
			ТекущийКодМаркировки.КодМаркировки);
		Если СтруктураМаркировки.ТипИдентификатораТовара <>
			ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1") Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Код маркировки <%1> не разобран. Проверьте его корректность.'"),
				СокрЛП(ТекущийКодМаркировки.КодМаркировки)
			);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		МаркировкаТоваровСервер.ЗаписатьСтатусДокумента(Ссылка, ДополнительныеСвойства);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Удалим введенные в оборот коды маркировки
	НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
	НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейСостоянияКодовМаркировки.ОтменаПроведения();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗапретитьСозданиеНовогоДокумента()
	
	УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
		ЭтотОбъект,
		НСтр("ru = 'Передача документа в ""Честный знак"" отключена. Создание нового документа запрещено.'"));
	
КонецПроцедуры

#Область ОбработчикиЗаполненияОбъекта

Функция ОбработкаЗаполнения_РеализацияТоваров(ДанныеЗаполнения,
	ТекстЗаполнения,
	СтандартнаяОбработка = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"Товары"
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ОбработкаЗаполненияНаОсновании(ДанныеЗаполнения, ТекстЗаполнения);
	
КонецФункции

Функция ОбработкаЗаполнения_ЗаказНаряд(ДанныеЗаполнения,
	ТекстЗаполнения,
	СтандартнаяОбработка = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"Товары"
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
		ДатаДокумента = ДанныеЗаполнения.ДатаЗакрытия;
	ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.ДатаОкончания) Тогда
		ДатаДокумента = ДанныеЗаполнения.ДатаОкончания;
	Иначе
		ДатаДокумента = ДанныеЗаполнения.Дата;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "СводныйРемонтныйЗаказ.Заказчик");
	КонецЕсли;
	
	ДатаОтгрузкиТоваров = ДатаДокумента;
	ДатаПервичногоДокумента = ДатаДокумента;
	НомерПервичногоДокумента = ДанныеЗаполнения.Номер;
	
	// Запросом получим коды маркировок
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	СостоянияКодовМаркировки.Номенклатура КАК Номенклатура,
	               |	СостоянияКодовМаркировки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	СостоянияКодовМаркировки.КодМаркировки КАК КодМаркировки,
	               |	1 КАК Количество
	               |ИЗ
	               |	РегистрСведений.СостоянияКодовМаркировки КАК СостоянияКодовМаркировки
	               |ГДЕ
	               |	СостоянияКодовМаркировки.ДокументОснование = &Основание
	               |	И СостоянияКодовМаркировки.Состояние В(&Состояние)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаказНарядТовары.Номенклатура КАК Номенклатура,
	               |	ЗаказНарядТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	СУММА(ВЫРАЗИТЬ(ЗаказНарядТовары.Количество / ЗаказНарядТовары.Коэффициент КАК ЧИСЛО(15,3))) КАК Количество,
	               |	СУММА(ЗаказНарядТовары.СуммаВсего) КАК СуммаВсего,
	               |	СУММА(ЗаказНарядТовары.СуммаНДС) КАК СуммаНДС,
	               |	ЗаказНарядТовары.СтавкаНДС КАК СтавкаНДС
	               |ИЗ
	               |	Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
	               |ГДЕ
	               |	ЗаказНарядТовары.Ссылка = &Основание
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказНарядТовары.Номенклатура,
	               |	ЗаказНарядТовары.ХарактеристикаНоменклатуры,
	               |	ЗаказНарядТовары.СтавкаНДС";
	Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
	
	СписокСостояний = Новый Массив;
	СписокСостояний.Добавить(Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаРозничнаяПродажа);
	СписокСостояний.Добавить(
		Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаИспользованДляСобственныхНуждПредприятия
	);
	СписокСостояний.Добавить(Перечисления.СостоянияКодовМаркировки.ПередачаДругомуСобственнику);
	
	Запрос.УстановитьПараметр("Состояние", СписокСостояний);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаМаркировки = ПакетЗапроса[0].Выгрузить();
	ТаблицаНоменклатуры = ПакетЗапроса[1].Выгрузить();
	
	КодыМаркировки.Очистить();
	Товары.Очистить();
	
	// Заполним ТЧ
	СтруктураПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
	Для Каждого ТекущаяСтрока Из ТаблицаНоменклатуры Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущаяСтрока);
		СтрокиКМ = ТаблицаМаркировки.НайтиСтроки(СтруктураПоиска);
		
		// По данному товару нет КМ
		Если СтрокиКМ.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		НоваяСтрока.ИдентификаторТовара = Новый УникальныйИдентификатор;
		Документы.ОтгрузкаТоваровКодовМаркировки.ТоварыНоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока);
		ЗаполненныеКМ = Новый Массив;
		КоличествоКМ = 1;
		КоличествоДоступныхКМ = СтрокиКМ.Количество();
		
		Пока КоличествоКМ <= НоваяСтрока.Количество Цикл
			
			НоваяСтрокаКМ = КодыМаркировки.Добавить();
			НоваяСтрокаКМ.ИдентификаторТовара = НоваяСтрока.ИдентификаторТовара;
			НоваяСтрокаКМ.КодМаркировки = СтрокиКМ[КоличествоКМ - 1].КодМаркировки;
			ЗаполненныеКМ.Добавить(СтрокиКМ[КоличествоКМ - 1]);
			КоличествоКМ = КоличествоКМ + 1;
			
			Если КоличествоДоступныхКМ < КоличествоКМ Тогда
				КоличествоКМ = КоличествоКМ - 1;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		// Удалим добавленные строки
		Для Каждого ТекущаяСтрокаКМ Из ЗаполненныеКМ Цикл
			ТаблицаМаркировки.Удалить(ТекущаяСтрокаКМ);
		КонецЦикла;
		
		НоваяСтрока.СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
		Если КоличествоКМ = НоваяСтрока.Количество Тогда
			НоваяСтрока.Сумма = ТекущаяСтрока.СуммаВсего;
			НоваяСтрока.СуммаНДС = ТекущаяСтрока.СуммаНДС;
		Иначе
			НоваяСтрока.Количество = КоличествоКМ;
			НоваяСтрока.Сумма = Окр(ТекущаяСтрока.СуммаВсего / ТекущаяСтрока.Количество * НоваяСтрока.Количество, 2);
			НоваяСтрока.СуммаНДС = Окр(ТекущаяСтрока.СуммаНДС  / ТекущаяСтрока.Количество * НоваяСтрока.Количество, 2);
		КонецЕсли;
		
		НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / ?(НоваяСтрока.Количество = 0, 1, НоваяСтрока.Количество), 2);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ОбработкаЗаполненияНаОсновании(ДанныеЗаполнения, ТекстЗаполнения)
	
	ДатаОтгрузкиТоваров = ДанныеЗаполнения.Дата;
	ДатаПервичногоДокумента = ДанныеЗаполнения.Дата;
	НомерПервичногоДокумента = ДанныеЗаполнения.Номер;
	
	// Загрузим все коды маркировоки
	КодыМаркировки.Загрузить(ДанныеЗаполнения.КодыМаркировки.Выгрузить());
	
	// Пройдемся по ТЧ
	СтруктураПоиска = Новый Структура("ИдентификаторТовара");
	
	Для Каждого ТекущаяСтрока Из ДанныеЗаполнения.Товары Цикл
		
		СтруктураПоиска.ИдентификаторТовара = ТекущаяСтрока.ИдентификаторТовара;
		НайденныеСтроки = КодыМаркировки.НайтиСтроки(СтруктураПоиска);
		
		КоличествоКодов = НайденныеСтроки.Количество();
		
		// У данной номенклатуры нет кодов маркировки
		// не будем ее выгружать
		Если КоличествоКодов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		Документы.ОтгрузкаТоваровКодовМаркировки.ТоварыНоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока);
		НоваяСтрока.Сумма = ТекущаяСтрока.СуммаВсего;
		Коэффициент = ?(НоваяСтрока.Коэффициент = 0, 1, НоваяСтрока.Коэффициент);
		Если КоличествоКодов <> НоваяСтрока.Количество * Коэффициент Тогда
			НоваяСтрока.Количество = Окр(КоличествоКодов / Коэффициент, 3);
		КонецЕсли;
		НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / ?(НоваяСтрока.Количество = 0, 1, НоваяСтрока.Количество), 2);
		НоваяСтрока.СуммаНДС = ТекущаяСтрока.СуммаНДС;
		НоваяСтрока.СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли