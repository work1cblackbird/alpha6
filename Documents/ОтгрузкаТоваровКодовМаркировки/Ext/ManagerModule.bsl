// Модуль менеджера документа "Отгрузка товаров".

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект		 - ДанныеФормыСтруктура	 - Объект, для которого выполняется обработка события.
//  Расширенные	 - Булево				 - Признак получения расширенных сведений об итогах операци.
// 
// Возвращаемое значение:
//  Структура - Данные с итогами показателей
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ВидТоварооборота");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("Статус");
	ОбязательныеРеквизиты.Добавить("ДатаПервичногоДокумента");
	ОбязательныеРеквизиты.Добавить("НомерПервичногоДокумента");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ДатаОтгрузкиТоваров");
	ОбязательныеРеквизиты.Добавить("ТоварнаяГруппа");
	
	Если Объект.ВыводИзОборота Тогда
		ОбязательныеРеквизиты.Добавить("ДатаВыводаИзОборота");
		ОбязательныеРеквизиты.Добавить("ПричинаВыводаИзОборота");
	КонецЕсли;
	
	Если Объект.ПричинаВыводаИзОборота = Перечисления.ПричиныОтгрузкиТоваров.ПриобретениеГосПредприятием Тогда
		ОбязательныеРеквизиты.Добавить("ИдентификаторГосКонтракта");
	КонецЕсли;
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;

	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	ОбязательныеРеквизиты.Добавить("КодыМаркировки.КодМаркировки");
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	УникальныеРеквизиты = Новый Структура();
	
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	
	УникальныеРеквизиты.Вставить("Товары", УникальныеТовары);
	
	УникальныеКодыМаркировки = Новый Массив;
	УникальныеКодыМаркировки.Добавить("КодМаркировки");
	УникальныеРеквизиты.Вставить("КодыМаркировки", УникальныеКодыМаркировки);
	
	Возврат УникальныеРеквизиты;
	
КонецФункции

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	КонтролируемыеРеквизиты = Новый Структура();
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Структура - Параметры действия.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦен", Ложь);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	УстановитьНеучастникГИСМТ(Объект);
	
КонецПроцедуры // КонтрагентПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Проверим а не набор ли у нас...
	Если Строка.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Набор Тогда
		ОбработкаТабличнойЧастиТовары.РазложитьНаборНаСтроки(Объект, Строка, ПараметрыДействия);
		Возврат;
	КонецЕсли;
	
	// Производим корректировку и заполнение связанных аналитик в строке
	ОбработкаТабличнойЧастиТовары.ОбработатьИзменениеНоменклатура(Объект, Строка, ПараметрыДействия);
	
	// Заполняем служебные реквизиты строки
	ОбработкаТабличнойЧастиТовары.ЗаполнитьСлужебныйРеквизитКодыМаркировки(Объект, Строка, ПараметрыДействия);
	
	Если ПустаяСтрока(Строка.ИдентификаторТовара) Тогда
		Строка.ИдентификаторТовара = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Производим корректировку и заполнение связанных аналитик в строке
	ОбработкаТабличнойЧастиТовары.ОбработатьИзменениеХарактеристикаНоменклатуры(Объект, Строка, ПараметрыДействия);
	
	// Обновим индикацию кодов маркировки
	ОбработкаТабличнойЧастиТовары.ЗаполнитьСлужебныйРеквизитКодыМаркировки(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Строка.Сумма = Строка.Цена * Строка.Количество;
	Строка.СуммаНДС = Окр(Строка.Сумма * Строка.СтавкаНДС.Ставка / 100, 2);
	
	// Обновим индикацию кодов маркировки
	ОбработкаТабличнойЧастиТовары.ЗаполнитьСлужебныйРеквизитКодыМаркировки(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Вызываем общий обработчик события
	Строка.Сумма = Строка.Цена * Строка.Количество;
	Строка.СуммаНДС = Окр(Строка.Сумма * Строка.СтавкаНДС.Ставка / (100 + Строка.СтавкаНДС.Ставка), 2);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Вызываем общий обработчик события
	Строка.Цена = Окр(Строка.Сумма / ?(Строка.Количество = 0, 1, Строка.Количество), 2);
	Строка.СуммаНДС = Окр(Строка.Сумма * Строка.СтавкаНДС.Ставка / (100 + Строка.СтавкаНДС.Ставка), 2);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Вызываем общий обработчик события
	Строка.СуммаНДС = Окр(Строка.Сумма * Строка.СтавкаНДС.Ставка / (100 + Строка.СтавкаНДС.Ставка), 2);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления

// Возвращает все документы, в которых присутствуют коды маркировки.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка результата запроса, содержащая требуемые документы.
//
Функция ДокументыСКодамиМаркировки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтгрузкаТоваровКодовМаркировкиКодыМаркировки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтгрузкаТоваровКодовМаркировки.КодыМаркировки КАК ОтгрузкаТоваровКодовМаркировкиКодыМаркировки
	|ГДЕ
	|	ОтгрузкаТоваровКодовМаркировкиКодыМаркировки.КодМаркировки <> """"";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Процедура зачистки криптохвостов кодов маркировки.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ОтгрузкаТоваровКодовМаркировки - документ, для которого выполняется действие.
//
Процедура ОтрезатьКриптохвосты(ДокументОбъект) Экспорт
	
	Для Каждого СтрокаТоваров Из ДокументОбъект.КодыМаркировки Цикл
		СтрокаТоваров.КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(СтрокаТоваров.КодМаркировки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ОтгрузкаТоваровКодовМаркировки);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция АннулироватьОтгрузкуТоваров(Объект, Сообщение)
	
	ТекстСообщения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОтгрузкаТоваровКодовМаркировки.Организация.ИНН КАК ОрганизацияИНН
	               |ИЗ
	               |	Документ.ОтгрузкаТоваровКодовМаркировки КАК ОтгрузкаТоваровКодовМаркировки
	               |ГДЕ
	               |	ОтгрузкаТоваровКодовМаркировки.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Если НЕ ЗначениеЗаполнено(Выборка.ОрганизацияИНН) Тогда
		Сообщение = НСтр("ru = 'У организации не указан ИНН'");
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаписьРегистра = РегистрыСведений.СтатусыДокументовМаркировки.ПолучитьСтатусДокумента(Объект);
	ИдентификаторДокумента = ЗаписьРегистра.ИдентификаторДокумента;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторДокумента) Тогда
		Сообщение = НСтр("ru = 'Нет информации в документе о номере документа в Честном знаке'");
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстСообщения.Вставить("participant_inn", СокрЛП(Выборка.ОрганизацияИНН));
	ТекстСообщения.Вставить("shipment_number", ИдентификаторДокумента);
	
	Возврат ТекстСообщения;
	
КонецФункции

// Получение данных документа для отгрузки кодов маркировки
//
// Параметры:
//  Объект		 - ДокументСсылка.СписаниеКодовМаркировки - Документ, для которого получаем данные
// 
// Возвращаемое значение:
//  Структура - Данные документа в формате для отправки запроса
//
Функция ДанныеОтгрузки(Объект, Сообщение) Экспорт
	
	ТекстСообщения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОтгрузкаТоваровКодовМаркировки.Организация.ИНН КАК ОрганизацияИНН,
	               |	ОтгрузкаТоваровКодовМаркировки.ДатаОтгрузкиТоваров КАК ДатаОтгрузкиТоваров,
	               |	ОтгрузкаТоваровКодовМаркировки.ВидТоварооборота КАК ВидТоварооборота,
	               |	ПРЕДСТАВЛЕНИЕ(ОтгрузкаТоваровКодовМаркировки.Контрагент) КАК ПредставлениеКонтрагента,
	               |	ОтгрузкаТоваровКодовМаркировки.Контрагент.ИНН КАК КонтрагентИНН,
	               |	ОтгрузкаТоваровКодовМаркировки.ОтгрузкаНеучастнику КАК ОтгрузкаНеучастнику,
	               |	ОтгрузкаТоваровКодовМаркировки.ИдентификаторГосКонтракта КАК ИдентификаторГосКонтракта,
	               |	ОтгрузкаТоваровКодовМаркировки.ДатаВыводаИзОборота КАК ДатаВыводаИзОборота,
	               |	ОтгрузкаТоваровКодовМаркировки.ПричинаВыводаИзОборота КАК ПричинаВыводаИзОборота,
	               |	ОтгрузкаТоваровКодовМаркировки.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента,
	               |	ОтгрузкаТоваровКодовМаркировки.НомерПервичногоДокумента КАК НомерПервичногоДокумента
	               |ИЗ
	               |	Документ.ОтгрузкаТоваровКодовМаркировки КАК ОтгрузкаТоваровКодовМаркировки
	               |ГДЕ
	               |	ОтгрузкаТоваровКодовМаркировки.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОтгрузкаТоваровКодовМаркировкиТовары.ИдентификаторТовара КАК ИдентификаторТовара,
	               |	ОтгрузкаТоваровКодовМаркировкиТовары.Цена КАК Цена,
	               |	ОтгрузкаТоваровКодовМаркировкиТовары.СуммаНДС КАК СуммаНДС,
	               |	ОтгрузкаТоваровКодовМаркировкиТовары.Номенклатура КАК Номенклатура,
	               |	ОтгрузкаТоваровКодовМаркировкиТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ОтгрузкаТоваровКодовМаркировкиТовары.Количество КАК Количество
	               |ПОМЕСТИТЬ ТЧПервичныеДокументы
	               |ИЗ
	               |	Документ.ОтгрузкаТоваровКодовМаркировки.Товары КАК ОтгрузкаТоваровКодовМаркировкиТовары
	               |ГДЕ
	               |	ОтгрузкаТоваровКодовМаркировкиТовары.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОтгрузкаТоваровКодовМаркировкиКодыМаркировки.ИдентификаторТовара КАК ИдентификаторТовара,
	               |	ОтгрузкаТоваровКодовМаркировкиКодыМаркировки.КодМаркировки КАК КодМаркировки
	               |ПОМЕСТИТЬ ТаблицаКодовМаркировок
	               |ИЗ
	               |	Документ.ОтгрузкаТоваровКодовМаркировки.КодыМаркировки КАК ОтгрузкаТоваровКодовМаркировкиКодыМаркировки
	               |ГДЕ
	               |	ОтгрузкаТоваровКодовМаркировкиКодыМаркировки.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаКодовМаркировок.КодМаркировки КАК КодМаркировки,
	               |	ТЧПервичныеДокументы.Цена КАК Цена,
	               |	ТЧПервичныеДокументы.СуммаНДС КАК СуммаНДС,
	               |	ТЧПервичныеДокументы.Номенклатура КАК Номенклатура,
	               |	ТЧПервичныеДокументы.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ТЧПервичныеДокументы.Количество КАК Количество
	               |ИЗ
	               |	ТЧПервичныеДокументы КАК ТЧПервичныеДокументы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКодовМаркировок КАК ТаблицаКодовМаркировок
	               |		ПО ТЧПервичныеДокументы.ИдентификаторТовара = ТаблицаКодовМаркировок.ИдентификаторТовара";
	Запрос.УстановитьПараметр("Ссылка", Объект);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	ШапкаДокумента = ПакетЗапроса[0].Выбрать();
	ШапкаДокумента.Следующий();
	
	СтрокаТоваров = ПакетЗапроса[3].Выбрать();
	
	Если НЕ ЗначениеЗаполнено(ШапкаДокумента.КонтрагентИНН) Тогда
		Сообщение = НСтр("ru = 'У контрагента не указан ИНН'");
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстСообщения.Вставить("sender_inn", СокрЛП(ШапкаДокумента.ОрганизацияИНН));
	ТекстСообщения.Вставить("document_date", Формат(ШапкаДокумента.ДатаПервичногоДокумента, "ДФ=dd.MM.yyyy"));
	ТекстСообщения.Вставить("document_num", СокрЛП(ШапкаДокумента.НомерПервичногоДокумента));
	ТекстСообщения.Вставить("receiver", ШапкаДокумента.ПредставлениеКонтрагента);
	ТекстСообщения.Вставить("receiver_inn", СокрЛП(ШапкаДокумента.КонтрагентИНН));
	ТекстСообщения.Вставить("to_not_participant", ШапкаДокумента.ОтгрузкаНеучастнику);
	ТекстСообщения.Вставить("request_type", "SHIPMENT");
	ТекстСообщения.Вставить("transfer_date", Формат(ШапкаДокумента.ДатаОтгрузкиТоваров, "ДФ=dd.MM.yyyy"));
	ТекстСообщения.Вставить("turnover_type",
		ОбменССистемойМаркировкиСервер.ВидТоварооборота(ШапкаДокумента.ВидТоварооборота));
	
	ВидОперации = "";
	Если ЗначениеЗаполнено(ШапкаДокумента.ДатаВыводаИзОборота) Тогда
		ВидОперации = ОбменССистемойМаркировкиСервер.ПричинаОтгрузкиТовара(ШапкаДокумента.ПричинаВыводаИзОборота);
	КонецЕсли;
	
	ТекстСообщения.Вставить("withdrawal_date", Формат(ШапкаДокумента.ДатаВыводаИзОборота, "ДФ=dd.MM.yyyy"));
	ТекстСообщения.Вставить("withdrawal_type", ВидОперации);
	ТекстСообщения.Вставить("st_contract_id", 
		?(ШапкаДокумента.ПричинаВыводаИзОборота = Перечисления.ПричиныОтгрузкиТоваров.ПриобретениеГосПредприятием,
			ШапкаДокумента.ИдентификаторГосКонтракта,
			""));
	
	ТекстСообщения.Вставить("products", Новый Массив);
	
	// Заполним табличную часть
	Пока СтрокаТоваров.Следующий() Цикл
		
		ТекстОшибки = "";
		КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(
			СтрокаТоваров.КодМаркировки,
			ТекстОшибки,
			Ложь);
		
		// Проверим, что это КМ
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаКМ = Новый Структура;
		СтрокаКМ.Вставить("uit_code", КодМаркировки);
		
		// Представление товара
		ПредставлениеТовара = Новый Массив;
		ПредставлениеТовара.Добавить(СокрЛП(СтрокаТоваров.Номенклатура));
		
		Если ЗначениеЗаполнено(СтрокаТоваров.ХарактеристикаНоменклатуры) Тогда
			ПредставлениеТовара.Добавить(СокрЛП(СтрокаТоваров.ХарактеристикаНоменклатуры));
		КонецЕсли;
		
		СтрокаКМ.Вставить("product_description", СтрСоединить(ПредставлениеТовара, ", "));
		СтрокаКМ.Вставить("product_cost",        СтрЗаменить(Строка(СтрокаТоваров.Цена * 100), Символы.НПП, ""));
		СтрокаКМ.Вставить("product_tax",
			СтрЗаменить(Строка(Окр(СтрокаТоваров.СуммаНДС / СтрокаТоваров.Количество, 2) * 100), Символы.НПП, ""));
		
		ТекстСообщения.products.Добавить(СтрокаКМ);
		
	КонецЦикла;
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция ЗапросДокумента(Объект, ПараметрыОбмена, Сообщение) Экспорт
	
	ИмяДействия = ПолучитьЗначениеПараметраСтруктуры(ПараметрыОбмена, "Действие", "");
	
	Если ИмяДействия = "АннулироватьОтгрузкуТоваров" Тогда
		СтруктураСообщения = АннулироватьОтгрузкуТоваров(Объект, Сообщение);
	Иначе
		СтруктураСообщения = ДанныеОтгрузки(Объект, Сообщение);
	КонецЕсли;
	
	Возврат СтруктураСообщения;
	
КонецФункции

// Установка признака неучастника ГИС МТ
//
// Параметры:
//  Объект	 - ДокументСсылка.ОтгрузкаТоваровКодовМаркировки - Документ, для которого проверяетя контрагент
//
Процедура УстановитьНеучастникГИСМТ(Объект) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		Объект.ОтгрузкаНеучастнику = Ложь;
		Возврат;
		
	КонецЕсли;
	
	СтатусыНеучастника = Новый Массив;
	СтатусыНеучастника.Добавить(Перечисления.СтатусыУчастникаОборотаТоваровГИСМТ.Заблокирован);
	СтатусыНеучастника.Добавить(Перечисления.СтатусыУчастникаОборотаТоваровГИСМТ.НеЗарегистрирован);
	СтатусыНеучастника.Добавить(Перечисления.СтатусыУчастникаОборотаТоваровГИСМТ.Удален);
	
	ДанныеКонтрагента =
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "СтатусУчастникаГИСМТ,ФормаСобственности");
	
	ЭтоЮрЛицо = ДанныеКонтрагента.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо
		ИЛИ ДанныеКонтрагента.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель;
	
	Объект.ОтгрузкаНеучастнику =
		(НЕ ЭтоЮрЛицо ИЛИ СтатусыНеучастника.Найти(ДанныеКонтрагента.СтатусУчастникаГИСМТ) <> Неопределено);
	
КонецПроцедуры // УстановитьНеучастникГИСМТ

Процедура ЗаполнитьСтатусыКодовМаркировки(Ссылка, Отказ, СтатусДокумента = Неопределено) Экспорт

	Если СтатусДокумента = Неопределено Тогда 
		СтатусДокумента = РегистрыСведений.СтатусыДокументовМаркировки.ПолучитьСтатусДокумента(Ссылка).Статус;
	КонецЕсли;
	
	АннулированаОтгрузка = (СтатусДокумента = Перечисления.СтатусыДокументовМаркировки.АннулированаОтгрузка);
	
	Если НЕ Отказ И (ЭтоКонечныйСтатус(СтатусДокумента) ИЛИ АннулированаОтгрузка) Тогда
		ЭтотОбъект = Ссылка.ПолучитьОбъект();		
		// Отменим записи состояний документа
		НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
		НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейСостоянияКодовМаркировки.ОтменаПроведения();
		
		ТаблицаМаркировки = НаборЗаписейСостоянияКодовМаркировки.ТаблицаКодовМаркировки();
		
		ТаблицаМаркировки.Колонки.Добавить("GTIN", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
		ТаблицаМаркировки.Колонки.Добавить("СерийныйНомер", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
		
		// Разберем маркировку на состовляющие для поиска
		Для Каждого ТекущийКодМаркировки Из ТаблицаМаркировки Цикл
			
			Если НЕ ЗначениеЗаполнено(ТекущийКодМаркировки.КодМаркировки) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураМаркировки =
				МенеджерОборудованияМаркировка.РазобратьШтриховойКодТовара(ТекущийКодМаркировки.КодМаркировки);
			
			Если СтруктураМаркировки.ТипИдентификатораТовара <>
				ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1") Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущийКодМаркировки.GTIN = СтруктураМаркировки.GTIN;
			ТекущийКодМаркировки.СерийныйНомер = СтруктураМаркировки.СерийныйНомер;
			
		КонецЦикла;
		
		ТекущиеСтатусыМаркировки =
			РегистрыСведений.СостоянияКодовМаркировки.ТекущиеСтатусыКодовМаркировки(ТаблицаМаркировки, Ссылка.МоментВремени());
		
		ВыведенныеТовары = Новый Массив;
		СостоянияВОбороте = Перечисления.СостоянияКодовМаркировки.СостоянияВводаВОборотМаркировки();
		
		Для Каждого ТекущаяСтрока Из ТекущиеСтатусыМаркировки Цикл
			Если (НЕ АннулированаОтгрузка И СостоянияВОбороте.Найти(ТекущаяСтрока.Состояние) = Неопределено)
				ИЛИ (АннулированаОтгрузка И СостоянияВОбороте.Найти(ТекущаяСтрока.Состояние) <> Неопределено) Тогда
				ВыведенныеТовары.Добавить(ТекущаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекущаяСтрока Из ВыведенныеТовары Цикл
			ТекущиеСтатусыМаркировки.Удалить(ТекущаяСтрока);
		КонецЦикла;
		
		// Изменим состояние маркировки, которые ранее не были выведены
		НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
		НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейСостоянияКодовМаркировки.Организация = Ссылка.Организация;
		НаборЗаписейСостоянияКодовМаркировки.РезультатЗапросаПоКодамМаркировки = ТекущиеСтатусыМаркировки;
		НаборЗаписейСостоянияКодовМаркировки.Состояние = СостояниеКодаМаркировки(Ссылка, СтатусДокумента);
		НаборЗаписейСостоянияКодовМаркировки.РежимПроведения = РежимПроведенияДокумента.Неоперативный;
		Если НЕ НаборЗаписейСостоянияКодовМаркировки.СостояниеКодовМаркировки() Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоКонечныйСтатус(Статус)
	
	КонечныеСтатусы = Новый Массив;
	КонечныеСтатусы.Добавить(Перечисления.СтатусыДокументовМаркировки.Принят);
	КонечныеСтатусы.Добавить(Перечисления.СтатусыДокументовМаркировки.ОжидаетПриемку);
	КонечныеСтатусы.Добавить(Перечисления.СтатусыДокументовМаркировки.ОжидаетРегистрации);
	
	Возврат КонечныеСтатусы.Найти(Статус) <> Неопределено;
	
КонецФункции

Функция СостояниеКодаМаркировки(Ссылка, СтатусДокумента)
	
	Результат = Неопределено;
	
	Если СтатусДокумента = Перечисления.СтатусыДокументовМаркировки.АннулированаОтгрузка Тогда
		Результат = Перечисления.СостоянияКодовМаркировки.ВведенВОборот;
	ИначеЕсли Ссылка.ПричинаВыводаИзОборота = Перечисления.ВидыОтгрузкиТоваров.Продажа
		И ЗначениеЗаполнено(Ссылка.ДатаВыводаИзОборота) Тогда
		Результат = Перечисления.СостоянияКодовМаркировки.ВыведенИзОборота;
	Иначе
		Результат = Перечисления.СостоянияКодовМаркировки.ПередачаДругомуСобственнику;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли