///////////////////////////////////////////////////////////////////////////////
// Модуль основной формы документа "План / факт"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
		
	// УтверждениеДокументов
	УтверждениеДокументовСервер.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	// Конец УтверждениеДокументов
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	РаботаСФормой.ОткрытьФормуТолькоДляПросмотра(ЭтотОбъект, Объект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НастроитьПараметрыВыбораЭлементовФормы();
		УправлениеДиалогомНаСервере();
	КонецЕсли;
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// УтверждениеДокументов
	УтверждениеДокументовКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец УтверждениеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// УтверждениеДокументов
	УтверждениеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец УтверждениеДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("ПланФакт", ПараметрыЗаписи.РежимЗаписи, Ложь);
		
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);
	РаботаСФормойКлиент.ОбновитьПодчиненныеСчета(Объект.Ссылка, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ПланФакт.ДатаПриИзменении(Объект, ПараметрыДействия);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ПланФакт.ХозОперацияПриИзменении(Объект, ПараметрыДействия);

	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	
	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ВидПланаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ПланФакт.ВидПланаПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ВидПланаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ВидПланаПриИзмененииНаСервере(ПараметрыДействия);

КонецПроцедуры  

&НаСервере
Процедура ДатаНачалаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ПланФакт.ДатаНачалаПриИзменении(Объект, ПараметрыДействия);
		
КонецПроцедуры 

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаНачалаПриИзмененииНаСервере(ПараметрыДействия);

КонецПроцедуры 

&НаСервере
Процедура ДатаКонцаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ПланФакт.ДатаКонцаПриИзменении(Объект, ПараметрыДействия);
		
КонецПроцедуры 

&НаКлиенте
Процедура ДатаКонцаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаКонцаПриИзмененииНаСервере(ПараметрыДействия);

КонецПроцедуры  

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыПлана

#Область ОбработчикиСобытийПолейТаблицыФормыПараметрыПлана

&НаСервере
Процедура ПараметрыПланаВидПараметраПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ПараметрыПлана.НайтиПоИдентификатору(Элементы.ПараметрыПлана.ТекущаяСтрока);
	Документы.ПланФакт.ПараметрыПланаВидПараметраПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПараметрыПланаВидПараметраПриИзменении(Элемент)
	
	ПараметрыПланаВидПараметраПриИзмененииНаСервере();
	
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаполненияПоказателейВыбор(Команда)
	Если Объект.Показатели.Количество()<>0 Тогда 
		ТекстВопроса = НСтр("ru='Перед заполнением таблица показатели будет очищена
				|Продолжить ?'");                                
		ОбработкаОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаОтветаЗагрузкиПоказателей", 
														ЭтотОбъект,
														Команда);
		ПоказатьВопрос(ОбработкаОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
    	Возврат;
	КонецЕсли;
	
	Если НЕ ЗаполнитьПоказатели(Команда.Имя) Тогда
		ТекстСообщения = НСтр("ru='Заполнить показатели не удалось.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаОтветаЗагрузкиПоказателей(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		РезультатЗаполнения = Ложь;
	Иначе                          
		РезультатЗаполнения = ЗаполнитьПоказатели(ДопПараметры.Имя);
	КонецЕсли;                     
	
	Если Не РезультатЗаполнения Тогда 
		ТекстСообщения = НСтр("ru='Заполнить показатели не удалось.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры
// Конец Ядро

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
		
КонецПроцедуры 

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидПлана) Тогда
		Элементы.ВыводПериодаПланирования.Заголовок = "";
		Элементы.ПоказателиВидАналитикиПланирования1.Заголовок = НСтр("ru = 'Вид аналитики планирования 1'");
		Элементы.ПоказателиВидАналитикиПланирования1.Видимость = Истина;
		Элементы.ПоказателиВидАналитикиПланирования2.Заголовок = НСтр("ru = 'Вид аналитики планирования 2'");
		Элементы.ПоказателиВидАналитикиПланирования2.Видимость = Истина;
		Элементы.ПоказателиПоказательПлана1.Видимость = Истина;
		Элементы.ПоказателиПоказательПлана2.Видимость = Истина;
		Элементы.ПоказателиПоказательПлана3.Видимость = Истина;
		// ПараметрыПлана оставляем как есть.
	Иначе
		ЭтоПлан = (Объект.ХозОперация = Справочники.ХозОперации.План);
		// Заполним период планирования для плана.
		Элементы.ВыводПериодаПланирования.Заголовок = НСтр("ru = 'Период планирования:'") + Символы.НПП 
														+ Объект.ВидПлана.ПериодичностьПланирования;
		Если Не ЗначениеЗаполнено(Объект.ВидПлана.ВидАналитикиПланирования1) Тогда
			Элементы.ПоказателиВидАналитикиПланирования1.Видимость = Ложь;
		Иначе
			Элементы.ПоказателиВидАналитикиПланирования1.Заголовок = Объект.ВидПлана.ВидАналитикиПланирования1.Наименование;
			Элементы.ПоказателиВидАналитикиПланирования1.Видимость = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ВидПлана.ВидАналитикиПланирования2) Тогда
			Элементы.ПоказателиВидАналитикиПланирования2.Видимость = Ложь;
		Иначе
			Элементы.ПоказателиВидАналитикиПланирования2.Заголовок = Объект.ВидПлана.ВидАналитикиПланирования2.Наименование;
			Элементы.ПоказателиВидАналитикиПланирования2.Видимость = Истина;
		КонецЕсли;
		Если ПустаяСтрока(Объект.ВидПлана.ПоказательПлана1) Тогда
			Элементы.ПоказателиПоказательПлана1.Видимость = Ложь;
		Иначе
			Элементы.ПоказателиПоказательПлана1.Заголовок = Объект.ВидПлана.ПоказательПлана1;
			Элементы.ПоказателиПоказательПлана1.Видимость = Истина;
		КонецЕсли;
		Если ПустаяСтрока(Объект.ВидПлана.ПоказательПлана2) Тогда
			Элементы.ПоказателиПоказательПлана2.Видимость = Ложь;
		Иначе
			Элементы.ПоказателиПоказательПлана2.Заголовок = Объект.ВидПлана.ПоказательПлана2;
			Элементы.ПоказателиПоказательПлана2.Видимость = Истина;
		КонецЕсли;
		Если ПустаяСтрока(Объект.ВидПлана.ПоказательПлана3) Тогда
			Элементы.ПоказателиПоказательПлана3.Видимость = Ложь;
		Иначе
			Элементы.ПоказателиПоказательПлана3.Заголовок = Объект.ВидПлана.ПоказательПлана3;
			Элементы.ПоказателиПоказательПлана3.Видимость = Истина;
		КонецЕсли; 
		
		// КоманднаяПанельПоказатели
		ГруппаПользовательскихОбработокЗаполнения = Элементы.Найти("ГруппаПользовательскихОбработокЗаполнения");
		Если ГруппаПользовательскихОбработокЗаполнения <> Неопределено Тогда
			Для Каждого Кнопка Из ГруппаПользовательскихОбработокЗаполнения.ПодчиненныеЭлементы Цикл
				Команды.Удалить(Команды.Найти(Кнопка.Имя));
			КонецЦикла;
			Элементы.Удалить(ГруппаПользовательскихОбработокЗаполнения);
		КонецЕсли;
		
		ГруппаПользовательскихОбработокЗаполнения = Элементы.Добавить("ГруппаПользовательскихОбработокЗаполнения",
																	  Тип("ГруппаФормы"),
																	  Элементы.ПоказателиПодменюЗаполнения);
		ГруппаПользовательскихОбработокЗаполнения.Вид = ВидГруппыФормы.ГруппаКнопок;
		
		Для Каждого ТекстОбработка Из Объект.ВидПлана.ОтчетыИОбработки Цикл
			// если это обработка по заполнению, то добавим в заполнение      
			Наименование = ТРег(ТекстОбработка.Наименование);
			Наименование = СтрЗаменить(Наименование, " ", "");
			
			Если (ЭтоПлан И ТекстОбработка.ФлагЗаполненияПлана)
				Или (Не ЭтоПлан И ТекстОбработка.ФлагЗаполненияФакта) Тогда  
				НоваяКоманда = ЭтаФорма.Команды.Добавить(Наименование);
				НоваяКоманда.Заголовок = ТекстОбработка.Наименование;
				НоваяКоманда.Действие = "КомандаЗаполненияПоказателейВыбор"; 
	
				НовКнопка = Элементы.Добавить(Наименование, Тип("КнопкаФормы"), ГруппаПользовательскихОбработокЗаполнения);
				НовКнопка.Заголовок = ТекстОбработка.Наименование;
				НовКнопка.ИмяКоманды = Наименование;
			КонецЕсли;
		КонецЦикла;

		// Получаем параметры плана из ТЧ справочника.
		Для Каждого ПараметрПлана Из Объект.ВидПлана.ПараметрыПлана Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("ВидПараметра", ПараметрПлана.ВидПараметра);
			Если Объект.ПараметрыПлана.НайтиСтроки(Отбор).Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;
			НовыйПараметрПлана=Объект.ПараметрыПлана.Добавить();
			НовыйПараметрПлана.ВидПараметра=ПараметрПлана.ВидПараметра;
			Если ПараметрПлана.ВидПараметра.ТипЗначения <> Неопределено Тогда
				НовыйПараметрПлана.ЗначениеПараметра=ПараметрПлана.ВидПараметра.ТипЗначения.ПривестиЗначение(НовыйПараметрПлана.ЗначениеПараметра);
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Объект.ВидПлана.ВидОбъектаПланирования) Тогда
			ОбъектПланирования = Объект.ВидПлана.ВидОбъектаПланирования.ТипЗначения.ПривестиЗначение(Объект.ОбъектПланирования);
			Элементы.ОбъектПланирования.Доступность = Истина;
		Иначе
			Элементы.ОбъектПланирования.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если НЕ УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	                                                                                                                
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область УтверждениеДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуУтверждения(Команда)
	
	УтверждениеДокументовКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект.Ссылка);
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбработкуКомандыУтвержденияНаСервере(ПараметрыОбработки,
		ДополнительныеПараметры) Экспорт
	
	ОбработкаКомандыУтвержденияНаСервере(ПараметрыОбработки, ДополнительныеПараметры);
	Оповестить("ПослеУтвержденияДокументов", Объект.Ссылка, ИмяФормы);
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаКомандыУтвержденияНаСервере(ПараметрыОбработки, ДополнительныеПараметры)
	
	УтверждениеДокументовВызовСервера.ОбработкаКомандыФормы(ЭтотОбъект, ПараметрыОбработки.ИмяКоманды, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыУтвержденияДокументов()
	
	ОбновитьКомандыУтвержденияДокументовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыУтвержденияДокументовНаСервере()
	
	УтверждениеДокументовКлиентСервер.УстановитьДоступностьКнопокУтверждения(ЭтотОбъект, Объект, ТолькоПросмотр);
	УтверждениеДокументовВызовСервера.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, Объект, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаПоказателей   

// Заполняет показатели с помощью запроса из внешнего файла
// НаименованиеОбработки - путь и имя файла запроса
// Возвращает Ложь если запрос не выполнился, иначе возвращает Истина
//
// Параметры:
//  НаименованиеОбработки - строка - содержит путь и наименование обработки.
//
&НаСервере
Функция ЗаполнитьПоказатели(Команда)
    НаименованиеОбработки = Команды[Команда].Заголовок;
	Объект.Показатели.Очистить();		
	ВидОбъекта = 0; 
	
	ОтчетОбработка = Объект.ВидПлана.ОтчетыИОбработки.Найти(НаименованиеОбработки, "Наименование");  
	Если ОтчетОбработка = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ВидОбъекта = ОтчетОбработка.ВидОбъекта;
	ЭтоПлан = (Объект.ХозОперация = Справочники.ХозОперации.План);
	
	Если ВидОбъекта=1 Тогда
		Возврат Ложь;
	ИначеЕсли ВидОбъекта=2 Тогда
		// Внешний запрос из текстового файла
		Попытка
			ЗаполнитьПланФактИзФайла(ОтчетОбработка.ПутьКОбъекту);
		Исключение
			Возврат Ложь;
		КонецПопытки;
	ИначеЕсли ВидОбъекта=3 Тогда
		// Встроенная обработка
		Попытка    
			ДанныеОбъекта = РеквизитФормыВЗначение("Объект");
			ОбработкаЗаполненияПоказателей = Обработки[ОтчетОбработка.ПутьКОбъекту].Создать();
			ОбработкаЗаполненияПоказателей.ДокументОбъект = ДанныеОбъекта;
			Если (ЭтоПлан) Тогда
				ОбработкаЗаполненияПоказателей.ЗаполнитьПлан();
			Иначе
				ОбработкаЗаполненияПоказателей.ЗаполнитьФакт();
			КонецЕсли; 
			ЗначениеВРеквизитФормы(ДанныеОбъекта, "Объект");
		Исключение
			Возврат Ложь;
		КонецПопытки;
	ИначеЕсли ВидОбъекта=4 Тогда
		// Внешняя обработка
		Попытка
			ОбработкаЗаполненияПоказателей = ВнешниеОбработки.Создать(ОтчетОбработка.ПутьКОбъекту);
			ОбработкаЗаполненияПоказателей.ДокументОбъект = Объект;
			Если (ЭтоПлан) Тогда
				ОбработкаЗаполненияПоказателей.ЗаполнитьПлан();
			Иначе
				ОбработкаЗаполненияПоказателей.ЗаполнитьФакт();
			КонецЕсли;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	Возврат Истина;
КонецФункции // ЗаполнитьПоказатели()

&НаСервере
Функция ПолучитьИнтервалПрошлогоПериода()
	ДатаНачалаПланирования = Объект.ДатаНачала;
	ДатаКонцаПланирования = Объект.ДатаКонца;
	Если Объект.ВидПлана=Неопределено Тогда
		ДатаНачала_=Неопределено;
		ДатаКонца_=Неопределено;
	ИначеЕсли Объект.ВидПлана.ПериодичностьПланирования=Перечисления.ПериодичностьАнализаНакопительныхСкидок.День Тогда
		ДатаНачала_ = НачалоДня(ДатаНачалаПланирования-1);
		ДатаКонца_  = КонецДня(ДатаКонцаПланирования-1);
	ИначеЕсли Объект.ВидПлана.ПериодичностьПланирования=Перечисления.ПериодичностьАнализаНакопительныхСкидок.Неделя Тогда
		ДатаНачала_ = НачалоНедели(ДатаНачалаПланирования-7);
		ДатаКонца_  = КонецНедели(ДатаКонцаПланирования-7);
	ИначеЕсли Объект.ВидПлана.ПериодичностьПланирования=Перечисления.ПериодичностьАнализаНакопительныхСкидок.Месяц Тогда
		ДатаНачала_ = НачалоМесяца(ДобавитьМесяц(ДатаНачалаПланирования,-1));
		ДатаКонца_  = КонецМесяца(ДобавитьМесяц(ДатаКонцаПланирования,-1));
	ИначеЕсли Объект.ВидПлана.ПериодичностьПланирования=Перечисления.ПериодичностьАнализаНакопительныхСкидок.Квартал Тогда
		ДатаНачала_ = НачалоКвартала(ДобавитьМесяц(ДатаНачалаПланирования,-3));
		ДатаКонца_  = КонецКвартала(ДобавитьМесяц(ДатаКонцаПланирования,-3));
	ИначеЕсли Объект.ВидПлана.ПериодичностьПланирования=Перечисления.ПериодичностьАнализаНакопительныхСкидок.Год Тогда
		ДатаНачала_ = НачалоГода(ДобавитьМесяц(ДатаНачалаПланирования,-12));
		ДатаКонца_  = КонецГода(ДобавитьМесяц(ДатаКонцаПланирования,-12));
	КонецЕсли;
	
	Возврат Новый Структура("ДатаНачала, ДатаКонца", ДатаНачала_, ДатаКонца_)
КонецФункции

&НаСервере
// Заполнение плана / факта из файла
//
// Параметры:
//  НаименованиеОбработки - строка - содержит путь к обработке и наименование.
//
Функция ЗаполнитьПланФактИзФайла(НаименованиеОбработки)
	// период планирования
	Если Объект.ХозОперация = Справочники.ХозОперации.План Тогда
		СтруктураПериода = ПолучитьИнтервалПрошлогоПериода();
		ДатаНачала_ = СтруктураПериода.ДатаНачала;
		ДатаКонца_  = СтруктураПериода.ДатаКонца;
	Иначе
		ДатаНачала_ = Объект.ДатаНачала;
		ДатаКонца_  = Объект.ДатаКонца;
	КонецЕсли;
		
	// читаем файл с текстом запроса
	ТекстЗапроса = Новый ТекстовыйДокумент;
	ТекстЗапроса.Прочитать(НаименованиеОбработки,КодировкаТекста.ANSI);
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса.ПолучитьТекст();
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала_);
	Запрос.УстановитьПараметр("ДатаКонца", ДатаКонца_);
	Запрос.УстановитьПараметр("ВидПлана", Объект.ВидПлана);
	Запрос.УстановитьПараметр("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	Запрос.УстановитьПараметр("МинимальныйОстатокСсылка", Перечисления.ДополнительныеРеквизитыНоменклатуры.МинимальныйОстаток);
	
	Попытка
		Объект.ОбъектПланирования.ПолучитьОбъект();
	Исключение
		Попытка	
			Запрос.УстановитьПараметр(Объект.ОбъектПланирования.Метаданные().Имя, Объект.ОбъектПланирования);	
		Исключение 
		КонецПопытки;
	КонецПопытки;
	
	// проходим по параметрам плана из ТЧ
	Для Каждого ТекПарам Из Объект.ПараметрыПлана Цикл
		Запрос.УстановитьПараметр(ТекПарам.ВидПараметра.Наименование, ТекПарам.ЗначениеПараметра);
	КонецЦикла;
	// выполняем запрос
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	// загружаем в ТЧ результат
	Объект.Показатели.Загрузить(РезультатЗапроса);
КонецФункции // ЗаполнитьПланФактИзФайла()

#КонецОбласти

#КонецОбласти