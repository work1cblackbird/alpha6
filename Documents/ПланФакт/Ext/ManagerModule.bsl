// Модуль менеджера документа "План факт"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает параметр плана из ТЧ ПараметрыПлана документа ПланФакт
//
// Параметры:
//  Объект - ДанныеФормыСтруктура -  Объект, для которого выполняется поиск.
//  НаименованиеПараметра - Строка - Наименование параметра плана.
//
// Возвращаемое значение:
//  Характеристика.ПараметрыПланирования
//
Функция ПолучитьПараметрПлана(Объект, НаименованиеПараметра) Экспорт
	
	СтрокаПараметра = Объект.ПараметрыПлана.Найти(
						ПланыВидовХарактеристик.ПараметрыПланирования.НайтиПоНаименованию(НаименованиеПараметра).Ссылка,
						"ВидПараметра");
	
	Если СтрокаПараметра <> Неопределено Тогда
		
		ЗначениеПараметра = СтрокаПараметра.ЗначениеПараметра;
		
		Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			Возврат ЗначениеПараметра;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьПараметрПлана()

#Область ОбработчикиОбновления      

// Выполняем замену справочника КлассификаторБанков
//
// Параметры: 
//  Ссылка - ДокументСсылка.ЗаказНаАвтомобиль - ссылка на документ, в которм необходимо произвести замену
//
// Возвращаемое значение:
//  Булево - результат выполнения запроса
//
Функция ЗаменитьКлассификаторБанков(Ссылка = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Ссылка = Неопределено Тогда 
		Запрос.Текст = ПолучитьТекстЗапроса();
	Иначе
		Запрос.Текст = ПолучитьТекстЗапроса(Истина);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Результат = Запрос.Выполнить();
		Возврат Результат.Пустой();	
	КонецЕсли;
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекущийОбъект 	= Выборка.Ссылка.ПолучитьОбъект();
		Для Каждого Строка Из ТекущийОбъект[Выборка.ТЧ] Цикл
			Если ТипЗнч(Строка[Выборка.Реквизит]) = Тип("СправочникСсылка.КлассификаторБанковРФ") Тогда
				Строка[Выборка.Реквизит] = Выборка.Банк;
			КонецЕсли;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);
	КонецЦикла;
				
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает границы периода планировании в соответствии со значением
// ПериодичностьПланирования только что выбранного реквизита документа ВидПлана.
// Не подлежит экспорту.
//
Процедура ПолучитьПериодПланирования(Объект)
	
	Если Объект.ВидПлана = Неопределено Тогда
		
		Объект.ДатаНачала = Неопределено;
		Объект.ДатаКонца  = Неопределено;
		
	Иначе
		
		Если Объект.ВидПлана.ПериодичностьПланирования = Перечисления.ПериодичностьАнализаНакопительныхСкидок.День Тогда
			
			Объект.ДатаНачала = НачалоДня(Объект.Дата);
			Объект.ДатаКонца  = КонецДня(Объект.Дата);
			
		ИначеЕсли Объект.ВидПлана.ПериодичностьПланирования =
					Перечисления.ПериодичностьАнализаНакопительныхСкидок.Неделя Тогда
			
			Объект.ДатаНачала = НачалоНедели(Объект.Дата);
			Объект.ДатаКонца  = КонецНедели(Объект.Дата);
			
		ИначеЕсли Объект.ВидПлана.ПериодичностьПланирования =
					Перечисления.ПериодичностьАнализаНакопительныхСкидок.Месяц Тогда
			
			Объект.ДатаНачала = НачалоМесяца(Объект.Дата);
			Объект.ДатаКонца  = КонецМесяца(Объект.Дата);
			
		ИначеЕсли Объект.ВидПлана.ПериодичностьПланирования =
					Перечисления.ПериодичностьАнализаНакопительныхСкидок.Квартал Тогда
			
			Объект.ДатаНачала = НачалоКвартала(Объект.Дата);
			Объект.ДатаКонца  = КонецКвартала(Объект.Дата);
			
		ИначеЕсли Объект.ВидПлана.ПериодичностьПланирования = Перечисления.ПериодичностьАнализаНакопительныхСкидок.Год Тогда
			
			Объект.ДатаНачала = НачалоГода(Объект.Дата);
			Объект.ДатаКонца  = КонецГода(Объект.Дата);
			
		Иначе
			
			Объект.ДатаНачала = Неопределено;
			Объект.ДатаКонца  = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьПериодПланирования()

#Область ПараметрыОбработкиРеквизитовОбъекта

// АПК:299-выкл Обязательный программный интерфейс
// АПК:581-выкл

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВидПлана");
	ОбязательныеРеквизиты.Добавить("ДатаНачала");
	ОбязательныеРеквизиты.Добавить("ДатаКонца");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
		
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Показатели.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
		
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
		
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Вид плана".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВидПланаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// проверим вид плана на работу с выбранным в документе подразделением
	Объект.Показатели.Очистить();
	
	Если Объект.ВидПлана.Подразделения.Найти(Объект.ПодразделениеКомпании,"Подразделение") = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выбранный вид плана не рассчитан для работы с выбранным подразделением.'"), Объект.Ссылка);
		Объект.ВидПлана = Справочники.ВидыПлановКомпании.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидПлана) Тогда
		ПолучитьПериодПланирования(Объект);
	КонецЕсли;
	
КонецПроцедуры  // ВидПланаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Дата начала".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаНачалаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДатаНачалаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Дата конца".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаКонцаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры  // ДатаКонцаПриИзменении()

#КонецОбласти

// АПК:581-вкл
// АПК:299-вкл

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыПлана

// Обработчик события возникающего при изменении данных реквизита "Вид параметра" в таблице "Параметры плана".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПараметрыПланаВидПараметраПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПараметрыПланаВидПараметраПриИзменении()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ПланФакт",
		"ПФ_MXL_ПланФакт",
		НСтр("ru = 'План-факт'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПланФакт") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ПланФакт",
															"План-факт",
															ПечатьПланФакт(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "ПланФакт"
//
Функция ПечатьПланФакт(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПланФакт_ПланФакт";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПланФакт.ПФ_MXL_ПланФакт");
		
		ОбластьЗаголовок                = Макет.ПолучитьОбласть("Заголовок");
		ОбластьОбъектПланирования       = Макет.ПолучитьОбласть("ОбъектПланирования");
		ОбластьПараметрыПлана           = Макет.ПолучитьОбласть("ПараметрыПлана");
		ОбластьПараметрыПланаСтрока     = Макет.ПолучитьОбласть("ПараметрыПланаСтрока");
		ОбластьПоказателиПланаЗаголовок = Макет.ПолучитьОбласть("ПоказателиПланаЗаголовок");
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ОрганизацияПредставление = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.Организация = Документ.Организация;
		ОбластьЗаголовок.Параметры.Подразделение = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			Документ.ПодразделениеКомпании, Документ.Дата);
		
		ОбластьЗаголовок.Параметры.ВидПлана = Документ.ВидПлана;
		ОбластьЗаголовок.Параметры.ПериодПланирования = "(" + Документ.ВидПлана.ПериодичностьПланирования + ") с: "
			+ Формат(Документ.ДатаНачала, "ДФ=dd.MM.yy") + " по: " + Формат(Документ.ДатаКонца, "ДФ=dd.MM.yy");
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		Если ЗначениеЗаполнено(Документ.ОбъектПланирования) Тогда
			ОбластьОбъектПланирования.Параметры.ОбъектПланирования = Документ.ОбъектПланирования;
			ТабличныйДокумент.Вывести(ОбластьОбъектПланирования);
		КонецЕсли;
		
		Если Документ.ПараметрыПлана.Количество() > 0 Тогда
			ТабличныйДокумент.Вывести(ОбластьПараметрыПлана);
			Для Каждого ПараметрПлана Из Документ.ПараметрыПлана Цикл
				ОбластьПараметрыПланаСтрока.Параметры.НомерСтроки = ПараметрПлана.НомерСтроки;
				ОбластьПараметрыПланаСтрока.Параметры.ВидПараметра = ПараметрПлана.ВидПараметра;
				ОбластьПараметрыПланаСтрока.Параметры.ЗначениеПараметра = ПараметрПлана.ЗначениеПараметра;
				ТабличныйДокумент.Вывести(ОбластьПараметрыПланаСтрока);
			КонецЦикла;
		КонецЕсли;
		
		Если Документ.Показатели.Количество()>0 Тогда
			ТабличныйДокумент.Вывести(ОбластьПоказателиПланаЗаголовок);
			ОбластьМакета = Макет.ПолучитьОбласть("ПоказателиПлана|Номер");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			Если ЗначениеЗаполнено(Документ.ВидПлана.ВидАналитикиПланирования1) Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ПоказателиПлана|АналитикаПланирования1");
				ОбластьМакета.Параметры.ВидАналитикиШапка1 = Документ.ВидПлана.ВидАналитикиПланирования1;
				ТабличныйДокумент.Присоединить(ОбластьМакета);
			Иначе
				ОбластьАналитика1 = Макет.Область("АналитикаПланирования2");
				ОбластьАналитика2 = Макет.Область("АналитикаПланирования1");
				ОбластьАналитика2.ШиринаКолонки = ОбластьАналитика2.ШиринаКолонки + ОбластьАналитика1.ШиринаКолонки;
			КонецЕсли;
			Если ЗначениеЗаполнено(Документ.ВидПлана.ВидАналитикиПланирования2) Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ПоказателиПлана|АналитикаПланирования2");
				ОбластьМакета.Параметры.ВидАналитикиШапка2 = Документ.ВидПлана.ВидАналитикиПланирования2;
				ТабличныйДокумент.Присоединить(ОбластьМакета);
			Иначе
				ОбластьАналитика2 = Макет.Область("АналитикаПланирования2");
				ОбластьАналитика1 = Макет.Область("АналитикаПланирования1");
				ОбластьАналитика1.ШиринаКолонки = ОбластьАналитика1.ШиринаКолонки + ОбластьАналитика2.ШиринаКолонки;
			КонецЕсли;
			Если ЗначениеЗаполнено(Документ.ВидПлана.ПоказательПлана1) Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ПоказателиПлана|ПоказательПлана1");
				ОбластьМакета.Параметры.ПоказательПланаШапка1 = Документ.ВидПлана.ПоказательПлана1;
				ТабличныйДокумент.Присоединить(ОбластьМакета);
			Иначе
				ОбластьПоказатель1 = Макет.Область("ПоказательПлана1");
				ОбластьПоказатель2 = Макет.Область("ПоказательПлана2");
				ОбластьПоказатель3 = Макет.Область("ПоказательПлана3");
				ОбластьПоказатель2.ШиринаКолонки = ОбластьПоказатель2.ШиринаКолонки + ОбластьПоказатель1.ШиринаКолонки / 2;
				ОбластьПоказатель3.ШиринаКолонки = ОбластьПоказатель3.ШиринаКолонки + ОбластьПоказатель1.ШиринаКолонки / 2;
			КонецЕсли;
			Если ЗначениеЗаполнено(Документ.ВидПлана.ПоказательПлана2) Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ПоказателиПлана|ПоказательПлана2");
				ОбластьМакета.Параметры.ПоказательПланаШапка2 = Документ.ВидПлана.ПоказательПлана2;
				ТабличныйДокумент.Присоединить(ОбластьМакета);
			Иначе
				ОбластьПоказатель1 = Макет.Область("ПоказательПлана1");
				ОбластьПоказатель2 = Макет.Область("ПоказательПлана2");
				ОбластьПоказатель3 = Макет.Область("ПоказательПлана3");
				ОбластьПоказатель1.ШиринаКолонки = ОбластьПоказатель1.ШиринаКолонки + ОбластьПоказатель2.ШиринаКолонки / 2;
				ОбластьПоказатель3.ШиринаКолонки = ОбластьПоказатель3.ШиринаКолонки + ОбластьПоказатель2.ШиринаКолонки / 2;
			КонецЕсли;
			Если ЗначениеЗаполнено(Документ.ВидПлана.ПоказательПлана3) Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ПоказателиПлана|ПоказательПлана3");
				ОбластьМакета.Параметры.ПоказательПланаШапка3 = Документ.ВидПлана.ПоказательПлана3;
				ТабличныйДокумент.Присоединить(ОбластьМакета);
			Иначе
				ОбластьПоказатель1 = Макет.Область("ПоказательПлана1");
				ОбластьПоказатель2 = Макет.Область("ПоказательПлана2");
				ОбластьПоказатель3 = Макет.Область("ПоказательПлана3");
				ОбластьПоказатель1.ШиринаКолонки = ОбластьПоказатель1.ШиринаКолонки + ОбластьПоказатель3.ШиринаКолонки / 2;
				ОбластьПоказатель2.ШиринаКолонки = ОбластьПоказатель2.ШиринаКолонки + ОбластьПоказатель3.ШиринаКолонки / 2;
			КонецЕсли;
			ОбластьМакета = Макет.ПолучитьОбласть("ПоказателиПлана|ОкончаниеСтроки");
			ТабличныйДокумент.Присоединить(ОбластьМакета);
			
			Для Каждого Показатель Из Документ.Показатели Цикл
				ОбластьМакета = Макет.ПолучитьОбласть("ПоказателиПланаСтрока|Номер");
				ОбластьМакета.Параметры.НомерСтроки = Показатель.НомерСтроки;
				ТабличныйДокумент.Вывести(ОбластьМакета);
				Если ЗначениеЗаполнено(Документ.ВидПлана.ВидАналитикиПланирования1) Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("ПоказателиПланаСтрока|АналитикаПланирования1");
					ОбластьМакета.Параметры.ВидАналитикиСтрока1 = Показатель.ВидАналитикиПланирования1;
					ТабличныйДокумент.Присоединить(ОбластьМакета);
				КонецЕсли;
				Если ЗначениеЗаполнено(Документ.ВидПлана.ВидАналитикиПланирования2) Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("ПоказателиПланаСтрока|АналитикаПланирования2");
					ОбластьМакета.Параметры.ВидАналитикиСтрока2 = Показатель.ВидАналитикиПланирования2;
					ТабличныйДокумент.Присоединить(ОбластьМакета);
				КонецЕсли;
				Если ЗначениеЗаполнено(Документ.ВидПлана.ПоказательПлана1) Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("ПоказателиПланаСтрока|ПоказательПлана1");
					ОбластьМакета.Параметры.ПоказательПланаСтрока1 = Формат(Показатель.ПоказательПлана1, "ЧЦ=10; ЧДЦ=3");
					ТабличныйДокумент.Присоединить(ОбластьМакета);
				КонецЕсли;
				Если ЗначениеЗаполнено(Документ.ВидПлана.ПоказательПлана2) Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("ПоказателиПланаСтрока|ПоказательПлана2");
					ОбластьМакета.Параметры.ПоказательПланаСтрока2 = Формат(Показатель.ПоказательПлана2, "ЧЦ=10; ЧДЦ=3");
					ТабличныйДокумент.Присоединить(ОбластьМакета);
				КонецЕсли;
				Если ЗначениеЗаполнено(Документ.ВидПлана.ПоказательПлана3) Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("ПоказателиПланаСтрока|ПоказательПлана3");
					ОбластьМакета.Параметры.ПоказательПланаСтрока3 = Формат(Показатель.ПоказательПлана3, "ЧЦ=10; ЧДЦ=3");
					ТабличныйДокумент.Присоединить(ОбластьМакета);
				КонецЕсли;
				ОбластьМакета = Макет.ПолучитьОбласть("ПоказателиПланаСтрока|ОкончаниеСтроки");
				ТабличныйДокумент.Присоединить(ОбластьМакета);
			КонецЦикла;
		КонецЕсли;
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьПланФакт()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПланФакт);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ПланФакт);

КонецФункции

#КонецОбласти

Функция ПолучитьТекстЗапроса(Проверка = Ложь)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПланФактПоказатели.Ссылка КАК Ссылка,
		|	""Показатели"" КАК ТЧ,
		|	""ВидАналитикиПланирования1"" КАК Реквизит,
		|	ПланФактПоказатели.ВидАналитикиПланирования1 КАК Банк
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	Документ.ПланФакт.Показатели КАК ПланФактПоказатели
		|ГДЕ
		|	ПланФактПоказатели.ВидАналитикиПланирования1 ССЫЛКА Справочник.КлассификаторБанковРФ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПланФактПоказатели.Ссылка,
		|	""Показатели"",
		|	""ВидАналитикиПланирования2"",
		|	ПланФактПоказатели.ВидАналитикиПланирования2
		|ИЗ
		|	Документ.ПланФакт.Показатели КАК ПланФактПоказатели
		|ГДЕ
		|	ПланФактПоказатели.ВидАналитикиПланирования2 ССЫЛКА Справочник.КлассификаторБанковРФ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПланФактПараметрыПлана.Ссылка,
		|	""ПараметрыПлана"",
		|	""ЗначениеПараметра"",
		|	ПланФактПараметрыПлана.ЗначениеПараметра
		|ИЗ
		|	Документ.ПланФакт.ПараметрыПлана КАК ПланФактПараметрыПлана
		|ГДЕ
		|	ПланФактПараметрыПлана.ЗначениеПараметра ССЫЛКА Справочник.КлассификаторБанковРФ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Ссылка КАК Ссылка,
		|	ВТ.ТЧ КАК ТЧ,
		|	ВТ.Реквизит КАК Реквизит,
		|	ЕСТЬNULL(КлассификаторБанков.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)) КАК Банк
		|ИЗ
		|	ВТ КАК ВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
		|		ПО ВТ.Банк.Код = КлассификаторБанков.Код
		|			И ВТ.Банк.КоррСчет = КлассификаторБанков.КоррСчет
		|			И ВТ.Банк.СВИФТБИК = КлассификаторБанков.СВИФТБИК
		|ГДЕ
		|	КлассификаторБанков.Ссылка = &Ссылка";

	Если Не Проверка Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КлассификаторБанков.Ссылка = &Ссылка", "ИСТИНА");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецЕсли