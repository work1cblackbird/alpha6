// Модуль документа "Авансовый отчет"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, "ВхДокНомер,ВхДокДатаВрем") Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим соответствие вида контрагента
	УстановитьПривилегированныйРежим(Истина);
	Если НЕ Контрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ПодотчетноеЛицо Тогда
		Контрагент            = Справочники.Контрагенты.ПустаяСсылка();
		ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	КонецЕсли;
	
	// Заполним доп. поля
	Для Каждого ТекущаяСтрока Из Товары Цикл
		Если ПустаяСтрока(ТекущаяСтрока.ИдентификаторТовара) Тогда
			ТекущаяСтрока.ИдентификаторТовара = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	// Очищаем считанную маркировку ранее
	КодыМаркировки.Очистить();
	
	Для Каждого Строка Из Расходы Цикл
		
		Строка.СчетФактура = Документы.СчетФактураПолученный.ПустаяСсылка(); 
		Строка.ДатаСчетФактуры = Дата(1,1,1);
		Строка.НомерСчетФактуры = ""; 
		
	КонецЦикла; 
	Для Каждого Строка Из Товары Цикл
		
		Строка.СчетФактура = Документы.СчетФактураПолученный.ПустаяСсылка(); 
		Строка.ДатаСчетФактуры = Дата(1,1,1);
		Строка.НомерСчетФактуры = ""; 
		
	КонецЦикла; 
		
КонецПроцедуры // ПриКопировании()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим правильность заполнения строк табличной части "Расходы".
	Для Каждого СтрокаТабличнойЧасти Из Расходы Цикл
		Если СтрокаТабличнойЧасти.НаРасчеты Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Контрагент) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru='Поле ""Контрагент"" строки %1 таблицы ""Расходы"" не заполнено'"),
						СтрокаТабличнойЧасти.НомерСтроки
					),
					ЭтотОбъект,,,
					Отказ
				);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru='Поле ""Договор"" строки %1 таблицы ""Расходы"" не заполнено'"),
						СтрокаТабличнойЧасти.НомерСтроки
					),
					ЭтотОбъект,,,
					Отказ
				);
			КонецЕсли;
			
		Иначе
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтатьяРасхода) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru='Поле ""Статья расхода"" строки %1 таблицы ""Расходы"" не заполнено'"),
						СтрокаТабличнойЧасти.НомерСтроки
					),
					ЭтотОбъект,,,
					Отказ
				);
			КонецЕсли;
		КонецЕсли;
			
		Если СтрокаТабличнойЧасти.ЕстьСчетФактура Тогда 
			
			Если Не ЗаполненыВходящиеРеквизиты(СтрокаТабличнойЧасти) Тогда  
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru='Расходы: строка <%1> для создания Счета-фактуры полученного необходимо заполнить поля: Номенклатура, Контрагент, Договор, Дата счет-фактуры, Номер счет-фактуры'"),
						СтрокаТабличнойЧасти.НомерСтроки
					),
					ЭтотОбъект,,,
					Отказ
				);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Товары Цикл 
					
		Если СтрокаТабличнойЧасти.ЕстьСчетФактура Тогда 
			
			Если Не ЗаполненыВходящиеРеквизиты(СтрокаТабличнойЧасти) Тогда  
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru='Товары: строка <%1> для создания Счета-фактуры полученного необходимо заполнить поля: Номенклатура, Контрагент, Договор, Дата счет-фактуры, Номер счет-фактуры'"),
						СтрокаТабличнойЧасти.НомерСтроки
					),
					ЭтотОбъект,,,
					Отказ
				);

			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
	// Проверим заполнение ТЧ Коды маркировки
	МаркировкаТоваровСервер.ПроверитьЗаполнениеКодовМаркировки(ЭтотОбъект, Отказ, , , Истина);
	
	// Проверим заполнение РНПТ у послеживаемого товара
	УчетПрослеживаемыхТоваровСервер.ПроверитьЗаполнениеРНПТПрослеживаемогоТовара(ЭтотОбъект); 
	
	Отказ = Отказ ИЛИ ЕстьОшибкиВЗаполненииТаблицыТоваров();
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// корректируем количество базовое 
	Для Каждого Строка Из Товары Цикл
		Если НЕ ЗначениеЗаполнено(Строка.КоличествоБазовое) Тогда
			Строка.КоличествоБазовое = Строка.Количество * Строка.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Произведем очистку не использующихся в текущем контексте реквизитов
	ОбработкаСобытийДокументаСервер.ОчиститьПолеЦенаРозничнаяДляНеРозничныхСкладов(ЭтотОбъект, СкладКомпании);
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПартиямПередПроведением(Ссылка, ДополнительныеСвойства);
	
	СформироватьСчетаФактуры (Отказ);
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Удалим введенные в оборот коды маркировки
	НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
	НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейСостоянияКодовМаркировки.ОтменаПроведения();
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	ФлагУпрВалюты = (ВалютаДокумента=Константы.ВалютаУправленческогоУчетаКомпании.Получить());
	
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(Дата);
	
	// Подготовим таблицу для накопления сумм суммовых разниц по подразделениям и сумм по взаиморасчетам.
	ТаблицаСуммовыхРазниц = Новый ТаблицаЗначений();
	ОписаниеТиповПодразделение=Новый ОписаниеТипов;
	ОписаниеТиповПодразделение.Типы().Добавить(Тип("СправочникСсылка.ПодразделенияКомпании"));
	ТаблицаСуммовыхРазниц.Колонки.Добавить("Подразделение",ОписаниеТиповПодразделение);
	ОписаниеТиповЧисло=Новый ОписаниеТипов;
	ОписаниеТиповЧисло.Типы().Добавить(Тип("Число"));
	ТаблицаСуммовыхРазниц.Колонки.Добавить("Сумма",ОписаниеТиповЧисло);
	
	ТаблицаВзаиморасчетов = Новый ТаблицаЗначений();
	ТаблицаВзаиморасчетов.Колонки.Добавить("Подразделение",ОписаниеТиповПодразделение);
	ТаблицаВзаиморасчетов.Колонки.Добавить("Сумма",ОписаниеТиповЧисло);
	
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	
	// Проводим взаиморасчеты с подотчетником (погашение задолженности подотчетника за полученные деньги).
	Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		НаборЗаписейВзаиморасчеты=Движения.ВзаиморасчетыКомпании;
		НаборЗаписейВзаиморасчеты.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейВзаиморасчеты.РежимПроведения=РежимПроведения;
		НаборЗаписейВзаиморасчеты.Контрагент=Контрагент;
		НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов=ДоговорВзаиморасчетов;
		НаборЗаписейВзаиморасчеты.Сделка=?(ЗначениеЗаполнено(ДокументОснование),ДокументОснование,Неопределено);
		НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок =
			(СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически);
		НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем=Истина;
		НаборЗаписейВзаиморасчеты.Сумма=Расходы.Итог("Сумма")+Товары.Итог("СуммаВсего");
		НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц=0;
		Отказ=НЕ НаборЗаписейВзаиморасчеты.Расход() ИЛИ Отказ;
		СуммаДоходаРасходаСуммовыхРазниц=НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
		СтрокаСуммовыхРазниц = ТаблицаСуммовыхРазниц.Добавить();
		СтрокаСуммовыхРазниц.Подразделение = ДоговорВзаиморасчетов.ПодразделениеКомпании;
		СтрокаСуммовыхРазниц.Сумма = СуммаДоходаРасходаСуммовыхРазниц;
		Если Не Отказ Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДокументРасходы.Контрагент КАК Контрагент,
			|	ДокументРасходы.Договор КАК Договор,
			|	ДокументРасходы.Сделка КАК Сделка,
			|	Сумма(ДокументРасходы.Сумма) КАК СуммаВзаиморасчетов
			|ИЗ
			|	Документ.АвансовыйОтчет.Расходы КАК ДокументРасходы
			|
			|ГДЕ  (ДокументРасходы.Ссылка = &ДокументСсылка)
			| 	 И(ДокументРасходы.НаРасчеты = ИСТИНА)
			|
			|СГРУППИРОВАТЬ ПО 
			|	ДокументРасходы.Контрагент,
			|	ДокументРасходы.Договор,
			|	ДокументРасходы.Сделка
			|");
			Запрос.УстановитьПараметр("ДокументСсылка",Ссылка);
			РезультатЗапросаПоРасходам=Запрос.Выполнить();
			Если НЕ РезультатЗапросаПоРасходам.Пустой() Тогда
				НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыКомпании;
				НаборЗаписейВзаиморасчеты.ДокументОбъект = ЭтотОбъект;
				НаборЗаписейВзаиморасчеты.РежимПроведения = РежимПроведения;
				Выборка=РезультатЗапросаПоРасходам.Выбрать();
				Пока Выборка.Следующий() И НЕ Отказ Цикл
					НаборЗаписейВзаиморасчеты.ДокументОбъект = ЭтотОбъект;
					НаборЗаписейВзаиморасчеты.Контрагент = Выборка.Контрагент;
					НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов = Выборка.Договор;
					НаборЗаписейВзаиморасчеты.КурсВзаиморасчетов = МоментВремени();
					Если ЗначениеЗаполнено(Выборка.Сделка) Тогда
						НаборЗаписейВзаиморасчеты.Сделка = Выборка.Сделка;
					Иначе
						НаборЗаписейВзаиморасчеты.Сделка = Неопределено;
					КонецЕсли;
					НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок =
						(СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически);
					НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем=Ложь;
					НаборЗаписейВзаиморасчеты.Сумма = Выборка.СуммаВзаиморасчетов;
					НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц=0;
					Отказ = НЕ НаборЗаписейВзаиморасчеты.Приход() ИЛИ Отказ;
					
					// доходы и расходы по суммовым разницам
					СуммаДоходаРасходаСуммовыхРазниц=НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
					СтрокаСуммовыхРазниц = ТаблицаСуммовыхРазниц.Добавить();
					СтрокаСуммовыхРазниц.Подразделение = Выборка.Договор.ПодразделениеКомпании;
					СтрокаСуммовыхРазниц.Сумма = СуммаДоходаРасходаСуммовыхРазниц;
					
					СтрокаВзаиморасчетов = ТаблицаВзаиморасчетов.Добавить();
					СтрокаВзаиморасчетов.Подразделение = Выборка.Договор.ПодразделениеКомпании;
					СтрокаВзаиморасчетов.Сумма = Выборка.СуммаВзаиморасчетов;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Документы.АвансовыйОтчет.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	Документы.АвансовыйОтчет.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	Документы.АвансовыйОтчет.СформироватьТаблицуДоходыИРасходы(ДополнительныеСвойства);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	// доходы и расходы по суммовым разницам
	ТаблицаСуммовыхРазниц.Свернуть("Подразделение","Сумма");
	Если ВедетсяБалансПоПодразделению Тогда
		Для Каждого СтрокаСуммовыхРазниц Из ТаблицаСуммовыхРазниц Цикл
			Если СтрокаСуммовыхРазниц.Сумма<>0 Тогда
				НаборЗаписейДиР = Движения.ДоходыИРасходы;
				НаборЗаписейДиР.Подразделение = СтрокаСуммовыхРазниц.Подразделение;
				НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
				НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
				НаборЗаписейДиР.ВУпрВалюте = Истина;
				Если СтрокаСуммовыхРазниц.Сумма<0 Тогда
					НаборЗаписейДиР.Расход = -СтрокаСуммовыхРазниц.Сумма;
				Иначе
					НаборЗаписейДиР.Доход = СтрокаСуммовыхРазниц.Сумма;
				КонецЕсли;
				Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			КонецЕсли;
		КонецЦикла;
	Иначе
		СуммаДоходаРасходаСуммовыхРазниц = ТаблицаСуммовыхРазниц.Итог("Сумма");
		Если СуммаДоходаРасходаСуммовыхРазниц<>0 Тогда
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
			НаборЗаписейДиР.ВУпрВалюте = Истина;
			Если СуммаДоходаРасходаСуммовыхРазниц<0 Тогда
				НаборЗаписейДиР.Расход = -СуммаДоходаРасходаСуммовыхРазниц;
			Иначе
				НаборЗаписейДиР.Доход = СуммаДоходаРасходаСуммовыхРазниц;
			КонецЕсли;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;
	КонецЕсли;
	
	// доходы и расходы по взаиморасчетам
	ТаблицаВзаиморасчетов.Свернуть("Подразделение","Сумма");
	Для Каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетов Цикл
		ПодразделениеВзаиморасчета = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(СтрокаВзаиморасчетов.Подразделение, Дата);
		ПодразделениеДоговор = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ДоговорВзаиморасчетов.ПодразделениеКомпании, Дата);
		БалансовыеПодразделенияНеРавны = ПодразделениеДоговор<>ПодразделениеВзаиморасчета;
		Если ВедетсяБалансПоПодразделению И БалансовыеПодразделенияНеРавны И СтрокаВзаиморасчетов.Сумма<>0 Тогда
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.Подразделение = СтрокаВзаиморасчетов.Подразделение;
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.ВУпрВалюте = ФлагУпрВалюты;
			НаборЗаписейДиР.Доход = СтрокаВзаиморасчетов.Сумма;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.Подразделение = ДоговорВзаиморасчетов.ПодразделениеКомпании;
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.ВУпрВалюте = ФлагУпрВалюты;
			НаборЗаписейДиР.Расход = СтрокаВзаиморасчетов.Сумма;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Отказ Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ДокументРасходы.СтатьяРасхода КАК СтатьяРасхода,
		|	СУММА(ДокументРасходы.СуммаВсего) КАК СуммаРасхода
		|ИЗ
		|	Документ.АвансовыйОтчет.Расходы КАК ДокументРасходы
		|ГДЕ
		|	ДокументРасходы.Ссылка = &ДокументСсылка
		|	И ДокументРасходы.НаРасчеты = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументРасходы.СтатьяРасхода");
		Запрос.УстановитьПараметр("ДокументСсылка",Ссылка);
		РезультатЗапросаПоРасходам = Запрос.Выполнить();
		
		Если НЕ РезультатЗапросаПоРасходам.Пустой() Тогда
			Выборка = РезультатЗапросаПоРасходам.Выбрать();
			Пока Выборка.Следующий() И НЕ Отказ Цикл
				НаборЗаписейДиР							= Движения.ДоходыИРасходы;
				НаборЗаписейДиР.ДокументОбъект			= ЭтотОбъект;
				// В случае если ведется баланс по подразделению передадим подразделение соответствующее корреспонденции.
				Если ВедетсяБалансПоПодразделению Тогда
					НаборЗаписейДиР.Подразделение = ДоговорВзаиморасчетов.ПодразделениеКомпании;
				КонецЕсли;
				НаборЗаписейДиР.СтатьяДоходовИРасходов	= Выборка.СтатьяРасхода;
				НаборЗаписейДиР.ВУпрВалюте				= ФлагУпрВалюты;
				НаборЗаписейДиР.Расход					= Выборка.СуммаРасхода;
				Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	// Произведем движения на основе ТЧ товары
	Если Товары.Количество()>0 Тогда
		// проведем остатки товаров
		НаборЗаписейОстатки								= Движения.ОстаткиТоваровКомпании;
		НаборЗаписейОстатки.РежимПроведения				= РежимПроведения;
		НаборЗаписейОстатки.ДокументОбъект				= ЭтотОбъект;
		НаборЗаписейОстатки.РезультатЗапросаПоТоварам	= Неопределено;
		НаборЗаписейОстатки.СкладКомпании				= СкладКомпании;
		НаборЗаписейОстатки.Приходовать					= Истина;
		НаборЗаписейОстатки.Резервировать				= Ложь;
		НаборЗаписейОстатки.Контрагент					= Контрагент;
		НаборЗаписейОстатки.ПоБазовомуКоличеству		= Истина;
		Если СкладКомпании.Розничный Тогда
			НаборЗаписейОстатки.ДвиженияПоРознице			= Истина;
			НаборЗаписейОстатки.ИмяРеквизитаЦенаРозничная	= "ЦенаРозничная";
			НаборЗаписейОстатки.ИмяРеквизитаСуммаРозничная  = "СуммаРозничная";
			НаборЗаписейОстатки.РазрешитьПереоценку			= Истина;
		Иначе
			НаборЗаписейОстатки.ДвиженияПоРознице			= Ложь;
		КонецЕсли;
		Отказ = Не НаборЗаписейОстатки.Приход() ИЛИ Отказ;
		
		// проведем партии товаров
		Отказ = Не ПровестиПоПартиям(РежимПроведения,Ссылка) ИЛИ Отказ;		
		
		// Если приходуем товар на розничный склад, то установим розничные цены на этот товар.
		Если НЕ Отказ И СкладКомпании.Розничный И ПодразделениеКомпании.УстановкаЦенДокументамиПоступления И НЕ СкладКомпании.ТипЦенРозничнойТорговли.Рассчитывается Тогда
			НаборЗаписейЦены						= Движения.Цены;
			НаборЗаписейЦены.ДокументОбъект			= ЭтотОбъект;
			НаборЗаписейЦены.Контрагент				= Неопределено;
			НаборЗаписейЦены.ТипЦен					= СкладКомпании.ТипЦенРозничнойТорговли;
			НаборЗаписейЦены.ПодразделениеКомпании	= СкладКомпании.ПодразделениеКомпании;
			НаборЗаписейЦены.УстанавливатьЦеныУслуг	= Ложь;
			НаборЗаписейЦены.ИмяРеквизитаЦена		= "ЦенаРозничная";
			Отказ = Не НаборЗаписейЦены.УстановитьЦены() Или Отказ;
		КонецЕсли;

		// установим цены контрагентов
		Если НЕ Отказ И ТипЦен.РегистрироватьЦеныПоПриходу И ЗначениеЗаполнено(Контрагент) И НЕ ТипЦен.Рассчитывается Тогда
			НаборЗаписейЦены						= Движения.Цены;
			НаборЗаписейЦены.ДокументОбъект			= ЭтотОбъект;
			НаборЗаписейЦены.Контрагент				= Контрагент;
			НаборЗаписейЦены.ТипЦен					= ТипЦен;
			НаборЗаписейЦены.УстанавливатьЦеныУслуг	= Истина;
			НаборЗаписейЦены.ИмяРеквизитаЦена		= "Цена";
			Отказ = НЕ НаборЗаписейЦены.УстановитьЦены() ИЛИ Отказ;
		КонецЕсли;
		
		// установим закупочные цены контрагентов, если, конечно контрагент имеется
		Если НЕ Отказ И ПодразделениеКомпании.ФормироватьЗакупочнуюЦену И НЕ Справочники.ТипыЦен.ОсновнойТипЦенЗакупки.Рассчитывается Тогда
			НаборЗаписейЦены						= Движения.Цены;
			НаборЗаписейЦены.ДокументОбъект			= ЭтотОбъект;
			НаборЗаписейЦены.Контрагент				= Неопределено;
			НаборЗаписейЦены.ИмяРеквизитаЦена		= "Цена";
			НаборЗаписейЦены.ТипЦен					= Справочники.ТипыЦен.ОсновнойТипЦенЗакупки;
			Отказ = НЕ НаборЗаписейЦены.УстановитьЦены() ИЛИ Отказ;
		КонецЕсли;
		
		// установим нормативные цены компании
		Если НЕ Отказ И ПодразделениеКомпании.ФормироватьНормативнуюЦену И НЕ Справочники.ТипыЦен.НормативнаяЦена.Рассчитывается Тогда
			НаборЗаписейЦены						= Движения.Цены;
			НаборЗаписейЦены.ДокументОбъект			= ЭтотОбъект;
			НаборЗаписейЦены.Контрагент				= Неопределено;
			НаборЗаписейЦены.ИмяРеквизитаЦена		= "Цена";
			НаборЗаписейЦены.ТипЦен					= Справочники.ТипыЦен.НормативнаяЦена;
			Отказ = НЕ НаборЗаписейЦены.УстановитьЦены() ИЛИ Отказ;
		КонецЕсли;
		
		// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
		// необходимо списать на доходы и расходы.
		Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;		

	КонецЕсли;
	
	// Изменим состояние маркировки
	НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
	НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейСостоянияКодовМаркировки.Организация = Организация;
	НаборЗаписейСостоянияКодовМаркировки.Состояние = Перечисления.СостоянияКодовМаркировки.ВведенВОборот;
	НаборЗаписейСостоянияКодовМаркировки.РежимПроведения = РежимПроведения;
	НаборЗаписейСостоянияКодовМаркировки.ПроверятьВводВОборот = Истина;
	Если НЕ НаборЗаписейСостоянияКодовМаркировки.СостояниеКодовМаркировки() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Зафиксируем новые штрихкоды товара из кода маркировки
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь) Тогда
		МаркировкаТоваровСервер.ПроверитьИДобавитьГТИННоменклатуры(Ссылка);
	КонецЕсли;
	
	// двигаем границу последовательности взаиморасчетов
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	
	ОбновитьСчетФактуры(Ссылка);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьСчетаФактуры (Отказ) 
	
	ДанныеСчетовФактур = ПолучитьДанныеСчетовФактур();
	ТаблицаСФБезДоговора = ДанныеСчетовФактур.Скопировать();
	
	ТаблицаСФБезДоговора.Свернуть("Контрагент, ДатаСчетФактуры, НомерСчетФактуры, Договор");

	ТаблицаСФБезДоговора.Колонки.Добавить("КоличествоСтрок");
	ТаблицаСФБезДоговора.ЗаполнитьЗначения(1, "КоличествоСтрок");

	ТаблицаСФБезДоговора.Свернуть("Контрагент, ДатаСчетФактуры, НомерСчетФактуры","КоличествоСтрок");
	
	Для Каждого Строка ИЗ ТаблицаСФБезДоговора Цикл 
		Если Строка.КоличествоСтрок > 1 Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru='Для счет-фактуры с входящим номером ""%1"", контрагент ""%2"" указаны разные договоры'"),
				Строка.НомерСчетФактуры,
				Строка.Контрагент
			);  
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
			Отказ =Истина;
		КонецЕсли;	
	КонецЦикла;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		ДокументСсылка = ПолучитьСсылкуНового();
		Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
			ДокументСсылка = Документы.АвансовыйОтчет.ПолучитьСсылку();
			УстановитьСсылкуНового(ДокументСсылка);
		КонецЕсли;
	Иначе
		ДокументСсылка = Ссылка;
	КонецЕсли;

	Для Каждого Строка Из ДанныеСчетовФактур Цикл
		
		СсылкаСФ = НайтиСчетФактуру(Строка);
		ОбновитьСФ = ЗначениеЗаполнено(СсылкаСФ);
		Отбор = Новый Структура(
			"Контрагент, Договор, ДатаСчетФактуры, НомерСчетФактуры",
			Строка.Контрагент, Строка.Договор, Строка.ДатаСчетФактуры, Строка.НомерСчетФактуры
		);

		Если ОбновитьСФ Тогда
			
			ОбъектСФ = СсылкаСФ.ПолучитьОбъект();
			ОбъектСФ.Товары.Очистить();
						
			Если ЭтотОбъект.Дата > ОбъектСФ.Дата Тогда
				
				ОбъектСФ.Дата = ЭтотОбъект.Дата + 1; 
				
			КонецЕсли;
	        ОбъектСФ.ДоговорВзаиморасчетов = Строка.Договор;
           			
		Иначе
			
			ОбъектСФ = Документы.СчетФактураПолученный.СоздатьДокумент();
			ОбъектСФ.Организация = ЭтотОбъект.Организация;
			ОбъектСФ.ПодразделениеКомпании = ЭтотОбъект.ПодразделениеКомпании; 
			ОбъектСФ.ДокументОснование = ДокументСсылка; 
			ОбъектСФ.Контрагент = Строка.Контрагент; 
			ОбъектСФ.ДоговорВзаиморасчетов  = Строка.Договор;  
			ОбъектСФ.Дата  =  ЭтотОбъект.Дата + 1;  
			ОбъектСФ.ВхДокНомер = Строка.НомерСчетФактуры;
			ОбъектСФ.ВхДокДата = Строка.ДатаСчетФактуры; 
			
			ОбъектСФ.Автор = Пользователи.ТекущийПользователь();
			ОбъектСФ.ХозОперация = Справочники.ХозОперации.СчетФактураПолученный;
			ОбъектСФ.ВалютаДокумента = ЭтотОбъект.ВалютаДокумента; 
			ОбъектСФ.КурсДокумента = ЭтотОбъект.КурсВалютыВзаиморасчетов;   
			ОбъектСФ.ТипЦен = ЭтотОбъект.ТипЦен;
			ОбъектСФ.Грузоотправитель = Строка.Контрагент;
			
		КонецЕсли; 
		
		Отказ = ПроверитьВходящийНомерДокумента(Строка, ОбъектСФ.Ссылка);
        Отказ = ЗаполнитьТабличныеЧастиСФ(ОбъектСФ, Отбор) ИЛИ Отказ; 
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
					
		Попытка
	
			ОбъектСФ.Записать(РежимЗаписиДокумента.Запись);
	   		ЗаполнитьПолеСчетФактура(ДокументСсылка);  
			
		Исключение
				
			Отказ = Истина;	
				
		КонецПопытки;
	
	КонецЦикла;
				
КонецПроцедуры 

Функция ПроверитьВходящийНомерДокумента(Строка, СсылкаСФ)
	
	РежимКонтроляНомеров =  ПраваИНастройкиПользователя.Значение("ПроверятьУникальностьВходящихИВнешнихНомеровДокументов");
	ПовторениеНомера = Ложь; 
	
	// Прекращаем обработку, если контроль не требуется
	Если НЕ РежимКонтроляНомеров=Перечисления.ВидыКонтроля.НеКонтролировать Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетФактураПолученный КАК Таблица
		|ГДЕ
		|	Таблица.ВхДокНомер = &ВхДокНомер
		|	И Таблица.Ссылка <> &Ссылка
		|	И Таблица.ВхДокДата МЕЖДУ &НачВхДокДата И &КонВхДокДата
		|	И Таблица.Контрагент = &Контрагент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.ВхДокДата";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка",       СсылкаСФ);
		Запрос.УстановитьПараметр("ВхДокНомер",   Строка.НомерСчетФактуры);
		Запрос.УстановитьПараметр("НачВхДокДата", НачалоГода(Строка.ДатаСчетФактуры));
		Запрос.УстановитьПараметр("КонВхДокДата", КонецГода(Строка.ДатаСчетФактуры));
		Запрос.УстановитьПараметр("Контрагент",   Строка.Контрагент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = СтрШаблон(
			НСтр("ru='Повторение внешних номеров документов в пределах контрагента ""%1"": %2'"),
			Строка.Контрагент,
			Выборка.Ссылка
			);
			Если РежимКонтроляНомеров=Перечисления.ВидыКонтроля.Предупреждать Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект); 
				ПовторениеНомера = Истина;
			КонецЕсли;  
		КонецЦикла;
	
	КонецЕсли; 
	
	Возврат ПовторениеНомера; 
	
КонецФункции

Процедура ОбновитьСчетФактуры(ДокументСсылка)
	
	ДанныеСчетовФактур =  ПолучитьДанныеСчетовФактур();
	ПодчиненныеСФ = НайтиСчетаФактурыДокумента(ДокументСсылка); 
	 
	Для Каждого Строка Из ПодчиненныеСФ Цикл
		Отбор = Новый Структура(
			"Контрагент, Договор, ДатаСчетФактуры, НомерСчетФактуры",
			Строка.Контрагент, Строка.Договор, Строка.ДатаСчетФактуры, Строка.НомерСчетФактуры
		);

		СчетФактура = ДанныеСчетовФактур.НайтиСтроки(Отбор);
		ОбъектСФ = Строка.Ссылка.ПолучитьОбъект();

		 Если СчетФактура.Количество() = 0 Тогда 
			 	ОбъектСФ.УстановитьПометкуУдаления(Истина); 
			 Попытка 
				 ОбъектСФ.Записать();
			 Исключение
				 Сообщить("Ошибка записи");
			 КонецПопытки;  
		 Иначе 
		   Если ДокументСсылка.Проведен Тогда
			   Попытка   
				
					 ОбъектСФ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				 Исключение
					 Сообщить("Ошибка записи повторной");
				 КонецПопытки;  
			 КонецЕсли;
		КонецЕсли;

		 
	 КонецЦикла;
	 
КонецПроцедуры

Функция ЗаполнитьТабличныеЧастиСФ(ОбъектСФ, Отбор)     
	
	ОшибкаЗаполнения = Ложь;
	СтрокиРасходы = ЭтотОбъект.Расходы.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаРасходы ИЗ СтрокиРасходы Цикл
		
		НоваяСтрока 				 = ОбъектСФ.Товары.Добавить();
		НоваяСтрока.Номенклатура	 = СтрокаРасходы.Номенклатура;				
		НоваяСтрока.Количество       = 1;
		НоваяСтрока.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
		НоваяСтрока.Коэффициент      = 1;  
		НоваяСтрока.Цена           	 = СтрокаРасходы.Цена;
		НоваяСтрока.Сумма            = СтрокаРасходы.Сумма;
		НоваяСтрока.СтавкаНДС        = СтрокаРасходы.СтавкаНДС;
		НоваяСтрока.СуммаНДС         = СтрокаРасходы.СуммаНДС;
		НоваяСтрока.СуммаВсего       = СтрокаРасходы.СуммаВсего;
		
	КонецЦикла;  
		
	СтрокиТовары = ЭтотОбъект.Товары.НайтиСтроки(Отбор);  
	
	Для каждого СтрокаТовары Из СтрокиТовары Цикл
		
		НоваяСтрока = ОбъектСФ.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары); 
		
	КонецЦикла;
	
	Если ПраваИНастройкиПользователя.Значение("ПроверкаЗаполненияСправочниковИДокументов", ОбъектСФ) Тогда
		
		 ТаблицаТоварыСФ = Новый ТаблицаЗначений(); 
		 ТаблицаТоварыСФ.Колонки.Добавить("Номенклатура");
		 ТаблицаТоварыСФ.Колонки.Добавить("КоличествоСтрок");
		 
         МассивНоменклатур = ОбъектСФ.Товары.ВыгрузитьКолонку("Номенклатура"); 
		 Для Каждого ЭлементНоменклатуры ИЗ МассивНоменклатур Цикл
			 НоваяСтрока = ТаблицаТоварыСФ.Добавить();
			 НоваяСтрока.Номенклатура = ЭлементНоменклатуры;
			 НоваяСтрока.КоличествоСтрок = 1; 
			 
		 КонецЦикла;
		 ТаблицаТоварыСФ.Свернуть("Номенклатура", "КоличествоСтрок");
		 
		 Для Каждого СтрокаСФ Из ТаблицаТоварыСФ Цикл
			 Если СтрокаСФ.КоличествоСтрок > 1 Тогда 
			
				ТекстСообщения = СтрШаблон(
					НСтр("ru='Для счет-фактуры с входящим номером ""%1"" значение Номенклатуры ""%2"" не уникально'"),
					ОбъектСФ.ВхДокНомер,
					СтрокаСФ.Номенклатура
				);  
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
				ОшибкаЗаполнения =Истина;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
    Возврат ОшибкаЗаполнения;
КонецФункции 

Функция ЗаполненыВходящиеРеквизиты(Строка)
	
	Если ЗначениеЗаполнено(Строка.ДатаСчетФактуры)
		И ЗначениеЗаполнено(Строка.НомерСчетФактуры) 
		И ЗначениеЗаполнено(Строка.Контрагент)
		И ЗначениеЗаполнено(Строка.Договор) Тогда
		    
		Возврат Истина;
		
	Иначе
		
	    Возврат Ложь;
		
	КонецЕсли;
КонецФункции 

Процедура ЗаполнитьПолеСчетФактура(ДокументСсылка)  
	
	ТаблицаСФ = НайтиСчетаФактурыДокумента(ДокументСсылка); 
	
	Для Каждого Строка Из ТаблицаСФ Цикл
		
		Отбор = Новый Структура(
			"Контрагент, Договор, ДатаСчетФактуры, НомерСчетФактуры",
			Строка.Контрагент, Строка.Договор, Строка.ДатаСчетФактуры, Строка.НомерСчетФактуры
		);
	
		СтрокиРасходы = ЭтотОбъект.Расходы.НайтиСтроки(Отбор);
		Для Каждого СтрокаРасходы ИЗ СтрокиРасходы Цикл 
			
			ЭтотОбъект.Расходы[СтрокаРасходы.НомерСтроки-1].СчетФактура = Строка.Ссылка; 
		КонецЦикла;  
	
		СтрокиТовары = ЭтотОбъект.Товары.НайтиСтроки(Отбор);  
	
		Для каждого СтрокаТовары Из СтрокиТовары Цикл
			
			ЭтотОбъект.Товары[СтрокаТовары.НомерСтроки-1].СчетФактура = Строка.Ссылка; 
		
		КонецЦикла;
		
	КонецЦикла; 
		
КонецПроцедуры	

Функция НайтиСчетФактуру(Строка)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураПолученный.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.ВхДокНомер = &НомерСчетФактуры
		|	И СчетФактураПолученный.ВхДокДата = &ДатаСчетФактуры
		|	И СчетФактураПолученный.Контрагент = &Контрагент
		|	И СчетФактураПолученный.Организация = &Организация
		|	И СчетФактураПолученный.ПодразделениеКомпании = &ПодразделениеКомпании
		|	И СчетФактураПолученный.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДатаСчетФактуры",	Строка.ДатаСчетФактуры);
	Запрос.УстановитьПараметр("НомерСчетФактуры",	Строка.НомерСчетФактуры);
	Запрос.УстановитьПараметр("Контрагент",			Строка.Контрагент);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ПодразделениеКомпании", ПодразделениеКомпании);
	Запрос.УстановитьПараметр("ДокументОснование", 	Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;  
		
	КонецЕсли;	
	
	Возврат Документы.СчетФактураПолученный.ПустаяСсылка();
	
КонецФункции 

Функция ПолучитьДанныеСчетовФактур()

	ДанныеСчетовФактур = ЭтотОбъект.Расходы.ВыгрузитьКолонки("Контрагент, Договор, ДатаСчетФактуры, НомерСчетФактуры, СчетФактура");
	Для Каждого Строка Из ЭтотОбъект.Расходы Цикл 
		
		Если Строка.ЕстьСчетФактура Тогда 
			
			НоваяСтрока = ДанныеСчетовФактур.Добавить(); 
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
		КонецЕсли; 
	
	КонецЦикла; 
	
	Для Каждого Строка Из ЭтотОбъект.Товары Цикл 
		
		Если Строка.ЕстьСчетФактура Тогда 
			
			НоваяСтрока = ДанныеСчетовФактур.Добавить(); 
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);	
			
		КонецЕсли;  
	
	КонецЦикла;
	
	ДанныеСчетовФактур.Свернуть("Контрагент, Договор,ДатаСчетФактуры, НомерСчетФактуры, СчетФактура"); 
		
	Возврат ДанныеСчетовФактур;
	
КонецФункции

Функция НайтиСчетаФактурыДокумента(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураПолученный.Ссылка КАК Ссылка,
		|	СчетФактураПолученный.Дата КАК Дата,
		|	СчетФактураПолученный.Контрагент КАК Контрагент,
		|	СчетФактураПолученный.ДоговорВзаиморасчетов КАК Договор,
		|	СчетФактураПолученный.ВхДокНомер КАК НомерСчетФактуры,
		|	СчетФактураПолученный.ВхДокДата КАК ДатаСчетФактуры,
		|	СчетФактураПолученный.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.ДокументОснование = &ДокументОснование
		|	И НЕ СчетФактураПолученный.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылка);
		
	ТаблицаСФ = Запрос.Выполнить().Выгрузить();
		
	Возврат ТаблицаСФ;
	
КонецФункции

Функция ЕстьОшибкиВЗаполненииТаблицыТоваров()
	
	УникальнаяНоменклатура = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		Товары.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура"));
	
	Если УникальнаяНоменклатура.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Номенклатура.Ссылка) КАК НоменклатураПредставление
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)
	|	И Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)");

	Запрос.УстановитьПараметр("СписокНоменклатуры", УникальнаяНоменклатура);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ПлохаяНоменклатура = РезультатЗапроса.Выгрузить();
	
	Для Каждого Строка Из ПлохаяНоменклатура Цикл
		
		НайденныеТовары = Товары.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
		
		Если НайденныеТовары.Количество() = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Для Каждого Товар Из НайденныеТовары Цикл
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Вид номенклатуры ""%1"" недопустим в табличной части ""Товары""'"),
				Строка.НоменклатураПредставление,
			);
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				СтрШаблон("Товары[%1].Номенклатура", Товары.Индекс(Товар))
			);
				
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Расходный кассовый ордер"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РасходныйКассовыйОрдер(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрокаАвансов					= ВыданныеАвансы.Добавить();
	СтрокаАвансов.ДокументОснование	= ДанныеЗаполнения;
	Документы.АвансовыйОтчет.ВыданныеАвансыДокументОснованиеПриИзменении(ЭтотОбъект, СтрокаАвансов, ДополнительныеСвойства.ПараметрыДействия); 
	
	Если СтрокаАвансов.Сумма > 0 Тогда
		СтрокаРасходов				= Расходы.Добавить();
		СтрокаРасходов.ДатаРасхода	= ДанныеЗаполнения.Дата;
		СтрокаРасходов.Сумма		= СтрокаАвансов.Сумма;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ОбработкаЗаполнения_РасходныйКассовыйОрдер()

// Производит заполнение объекта на основании документа "Заявка на расход ДС"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаРасходДС(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ДанныеЗаполнения.Платежи Цикл
		
		СтрокаРасходов				 = Расходы.Добавить();
		СтрокаРасходов.ДатаРасхода   = ТекСтрока.ДатаПлатежа;
		СтрокаРасходов.СтатьяРасхода = ТекСтрока.СтатьяРасходов;
		СтрокаРасходов.Сумма 		 = ТекСтрока.Сумма;
		СтрокаРасходов.Содержание 	 = ТекСтрока.Описание;
		
	КонецЦикла;		

	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ОбработкаЗаполнения_ЗаявкаНаРасходДС()

// Производит заполнение объекта на основании документа "Заявка на расход ДС"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Выписка(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрокаАвансов = ВыданныеАвансы.Добавить();
	СтрокаАвансов.ДокументОснование	= ДанныеЗаполнения;
	
	Документы.АвансовыйОтчет.ВыданныеАвансыДокументОснованиеПриИзменении(ЭтотОбъект, СтрокаАвансов,ДополнительныеСвойства.ПараметрыДействия);
	Если СтрокаАвансов.Сумма > 0 Тогда
		СтрокаРасходов = Расходы.Добавить();
		СтрокаРасходов.ДатаРасхода = ДанныеЗаполнения.Дата;
		СтрокаРасходов.Сумма = СтрокаАвансов.Сумма;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат ИСТИНА;
	
КонецФункции // ОбработкаЗаполнения_ЗаявкаНаРасходДС()

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// Формирует движения документа по партионным регистрам
//
// Параметры:
//  Режим - РежимПроведенияДокумента
//  ДокументСсылка - ДокументСсылка.АвансовыйОтчет
//
// Возвращаемое значение:
//  Булево - результат операции
//
Функция ПровестиПоПартиям(Режим, ДокументСсылка) Экспорт
	
	Отказ = Ложь;
	ШапкаДокумента	= ПолучитьШапкуДокумента(ДокументСсылка);
	
	Запрос=Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР КОГДА ДокументТовары.Номенклатура.ВидНоменклатуры=ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга) И ДокументТовары.Номенклатура.СпособРаспределенияДопРасходов=ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияДопРасходов.НаДоходыИРасходы) ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга) ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар) КОНЕЦ КАК ВидНоменклатуры,
	|	ВЫБОР КОГДА ДокументТовары.Номенклатура.ВидНоменклатуры=ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга) ТОГДА ДокументТовары.Номенклатура.СтатьяДопРасходов ИНАЧЕ NULL КОНЕЦ КАК СтатьяДопРасходов,
	|	СУММА(ДокументТовары.СуммаВсего) КАК СуммаВсего
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары 	КАК ДокументТовары
	|
	|ГДЕ  
	|	ДокументТовары.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО 
	|	ВЫБОР КОГДА ДокументТовары.Номенклатура.ВидНоменклатуры=ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга) И ДокументТовары.Номенклатура.СпособРаспределенияДопРасходов=ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияДопРасходов.НаДоходыИРасходы) ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга) ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Товар) КОНЕЦ,
	|	ВЫБОР КОГДА ДокументТовары.Номенклатура.ВидНоменклатуры=ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга) ТОГДА ДокументТовары.Номенклатура.СтатьяДопРасходов ИНАЧЕ NULL КОНЕЦ
	|
	|ИТОГИ ПО ВидНоменклатуры");
	Запрос.УстановитьПараметр("ДокументСсылка", ШапкаДокумента.Ссылка);
	ДеревоДоходовИРасходов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
	
	// Проверим, если подразделение проводиться по партиям "отложенно", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям = Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента = ШапкаДокумента;
	Отказ	= Не НаборЗаписейДопроведениеПоПартиям.Зафиксировать() Или Отказ;
	
	Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
		
		НайденнаяСтрокаТоваров	= ДеревоДоходовИРасходов.Строки.Найти(Перечисления.ВидыНоменклатуры.Товар,"ВидНоменклатуры");
		НайденнаяСтрокаУслуг	= ДеревоДоходовИРасходов.Строки.Найти(Перечисления.ВидыНоменклатуры.Услуга,"ВидНоменклатуры");
		
		Если НайденнаяСтрокаТоваров <> Неопределено Или НайденнаяСтрокаУслуг <> Неопределено Тогда
			
			СуммаВсего = ?(НайденнаяСтрокаТоваров <> Неопределено, НайденнаяСтрокаТоваров.СуммаВсего, 0)
				+ ?(НайденнаяСтрокаУслуг <> Неопределено, НайденнаяСтрокаУслуг.СуммаВсего, 0);
			НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект = ЭтотОбъект;

			Если ВедетсяБалансПоПодразделению Тогда
				
				НаборЗаписейДоходыИРасходы.Подразделение = ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
				
			КонецЕсли;
			
			НаборЗаписейДоходыИРасходы.ШапкаДокумента = ШапкаДокумента;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов
				.СебестоимостьНеоприходованныхПартий;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте = Ложь;
			НаборЗаписейДоходыИРасходы.Расход = СуммаВсего;
			НаборЗаписейДоходыИРасходы.Приход();
			
		КонецЕсли;
		
		Возврат Не Отказ;
		
	КонецЕсли;
	
	ПодразделениеСклад = Справочники
		.ПодразделенияКомпании
		.ПолучитьБалансовоеПодразделение(СкладКомпании.ПодразделениеКомпании, ШапкаДокумента.Дата);  
	ПодразделениеДоговорВзаиморасчетов = Справочники
		.ПодразделенияКомпании
		.ПолучитьБалансовоеПодразделение(ДоговорВзаиморасчетов.ПодразделениеКомпании, ШапкаДокумента.Дата);
	БалансовыеПодразделенияНеРавны = (ПодразделениеДоговорВзаиморасчетов <> ПодразделениеСклад);
	
	НаборЗаписейПартии = Движения.ПартииТоваровКомпании;
	НаборЗаписейПартии.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейПартии.СкладКомпании = ШапкаДокумента.СкладКомпании;
	НаборЗаписейПартии.Организация = ШапкаДокумента.Организация;
	НаборЗаписейПартии.ЕстьСтавкаНДС = Истина;
	НаборЗаписейПартии.СтатусПартии = Перечисления.СтатусыПартий.ТоварКупленный;
	НаборЗаписейПартии.ПоБазовомуКоличеству = Истина;
	НаборЗаписейПартии.ШапкаДокумента = ШапкаДокумента;
	НаборЗаписейПартии.РежимДопРасходы = 1;
	Отказ = Не НаборЗаписейПартии.Приход() Или Отказ;
	
	// Запишем в ДоходыИРасходы услуги стоимость которых не распределяется на себестоимость поступления.
	НайденнаяСтрокаУслуг=ДеревоДоходовИРасходов.Строки.Найти(Перечисления.ВидыНоменклатуры.Услуга,"ВидНоменклатуры");
	Если НайденнаяСтрокаУслуг<>Неопределено Тогда
		СуммаУслуг = 0;
		Для Каждого СтрокаУслуги Из НайденнаяСтрокаУслуг.Строки Цикл
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			// В случае если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
			Если ВедетсяБалансПоПодразделению Тогда
				НаборЗаписейДиР.Подразделение = ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДиР.ШапкаДокумента = ШапкаДокумента;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = СтрокаУслуги.СтатьяДопРасходов;
			НаборЗаписейДиР.ВУпрВалюте = (ШапкаДокумента.ВалютаДокумента=Константы.ВалютаУправленческогоУчетаКомпании.Получить());
			НаборЗаписейДиР.Расход = СтрокаУслуги.СуммаВсего;
			СуммаУслуг = СуммаУслуг+СтрокаУслуги.СуммаВсего;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЦикла;
		// способ ведения не по подразделениям то ничего не будем корректировать
		Если ВедетсяБалансПоПодразделению И БалансовыеПодразделенияНеРавны  И СуммаУслуг<>0 Тогда
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейДиР.Подразделение  = ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.ВУпрВалюте = Ложь;
			НаборЗаписейДиР.Доход = СуммаУслуг;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;	
	КонецЕсли;

	// двигаем границу последовательности партий
	Если Ссылка <> ДокументСсылка Тогда
		
		РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоПартиямПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		
	КонецЕсли;
	
	РаботаСГраницами.СдвинутьГраницуПартий(ДокументСсылка, ДополнительныеСвойства, Движения);
	
	Возврат НЕ Отказ;
	
КонецФункции // ПровестиПоПартиям()

Функция ПолучитьШапкуДокумента(ДокументСсылка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ТипЦен КАК ТипЦен,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.Организация КАК Организация,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Док.Проект КАК Проект,
	/////////// ПРИВАТ ////////////
	|	Док.СкладКомпании КАК СкладКомпании,
	|	Док.СуммаДокумента КАК СуммаДокумента,
	|	Док.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Док.ДокументОснование КАК ДокументОснование
	|
	|ИЗ
	|	Документ."+Метаданные().Имя+" КАК Док
	|ГДЕ
	|	Док.Ссылка=&Ссылка");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

ДополнительныеСвойства.Вставить("ТоварыЗапретАвтоСписанияХарактеристик", Истина);

#КонецОбласти

#КонецЕсли
