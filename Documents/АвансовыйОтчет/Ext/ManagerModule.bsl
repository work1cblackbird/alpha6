// Модуль менеджера документа "Авансовый отчет"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РеализацияТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВводВЭксплуатацию);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВозвратПоставщику);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ИзменениеЦен);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПоступлениеДопРасходов);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПеремещениеТоваров);    
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйСкладскойОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетНаОплату);
		
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
	
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
		
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.АвансовыйОтчет);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. 
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.АвансовыйОтчет",
		"ПФ_MXL_АвансовыйОтчет",
		НСтр("ru = 'Авансовый отчет'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.АвансовыйОтчет",
		"ПФ_MXL_АО1",
		НСтр("ru = 'АО1'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Ценники",
		НСтр("ru = 'Печать ценников'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати",
		,,,,
		Ложь);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Этикетки",
		НСтр("ru = 'Печать этикеток'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати",
		,,,,
		Ложь);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - ТаблицаЗначений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_АвансовыйОтчет") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_АвансовыйОтчет",
															НСтр("ru = 'Авансовый отчет'"),
															ПечатьАвансовыйОтчет(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_АО1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_АО1",
															"АО1",
															ПечатьАО1(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;													
КонецПроцедуры // Печать()

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
// 
// Параметры:
//  МассивДокументов - Массив - Массив документов для печати.
// Возвращаемое значение:
//	Адрес   - адрес структуры данных во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АвансовыйОтчетТовары.Номенклатура КАК Номенклатура,
	|	АвансовыйОтчетТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	АвансовыйОтчетТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МИНИМУМ(АвансовыйОтчетТовары.НомерСтроки) КАК Порядок,
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчетТовары.Ссылка.СкладКомпании.Розничный = ИСТИНА
	|				ТОГДА АвансовыйОтчетТовары.Количество * (ЕСТЬNULL(АвансовыйОтчетТовары.ЕдиницаИзмерения.Коэффициент, 1) / ЕСТЬNULL(Цены.ЕдиницаИзмерения.Коэффициент, 1))
	|			ИНАЧЕ АвансовыйОтчетТовары.Количество
	|		КОНЕЦ) КАК Количество,
	|	МАКСИМУМ(АвансовыйОтчетТовары.СуммаВсего) КАК Цена,
	|	МАКСИМУМ(АвансовыйОтчетТовары.СтавкаНДС) КАК СтавкаНДС,
	|	МАКСИМУМ(АвансовыйОтчетТовары.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Цены.СрезПоследних КАК Цены
	|		ПО (Цены.Номенклатура = АвансовыйОтчетТовары.Номенклатура)
	|			И (Цены.ХарактеристикаНоменклатуры = АвансовыйОтчетТовары.ХарактеристикаНоменклатуры)
	|			И (Цены.ТипЦен = АвансовыйОтчетТовары.Ссылка.СкладКомпании.ТипЦенРозничнойТорговли)
	|ГДЕ
	|	АвансовыйОтчетТовары.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетТовары.Номенклатура,
	|	АвансовыйОтчетТовары.ХарактеристикаНоменклатуры,
	|	АвансовыйОтчетТовары.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АвансовыйОтчет.Организация КАК Организация,
	|	АвансовыйОтчет.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	АвансовыйОтчет.СкладКомпании КАК СкладКомпании,
	|	АвансовыйОтчет.СкладКомпании.ТипЦенРозничнойТорговли КАК ТипЦены
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций 			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивПодразделенийКомпании = УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ПодразделениеКомпании").ВыгрузитьКолонку(0);
	МассивСкладов    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "СкладКомпании").ВыгрузитьКолонку(0);
	МассивТиповЦен    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ТипЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьПодразделениеКомпании", ?(МассивПодразделенийКомпании.Количество() = 1, МассивПодразделенийКомпании[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьТипЦены",     ?(МассивТиповЦен.Количество() = 1,    МассивТиповЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЭтикеток");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("НеПересчитыватьЦены");
	СтруктураДействий.Вставить("ЦеныИзДокументаОснования");

	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	Товары.ЗаполнитьЗначения(СтруктураДействий.ЗаполнитьОрганизацию, "Организация");
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", МассивРезультатов[0].Выгрузить());
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
// 
// Параметры:
//  МассивДокументов - Массив - Массив документов для печати.
// Возвращаемое значение:
//	Адрес - адрес структуры данных во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЦенников(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АвансовыйОтчетТовары.Номенклатура КАК Номенклатура,
	|	АвансовыйОтчетТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	АвансовыйОтчетТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МИНИМУМ(АвансовыйОтчетТовары.НомерСтроки) КАК Порядок,
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчетТовары.Ссылка.СкладКомпании.Розничный = ИСТИНА
	|				ТОГДА АвансовыйОтчетТовары.Количество * (ЕСТЬNULL(АвансовыйОтчетТовары.ЕдиницаИзмерения.Коэффициент, 1) / ЕСТЬNULL(Цены.ЕдиницаИзмерения.Коэффициент, 1))
	|			ИНАЧЕ АвансовыйОтчетТовары.Количество
	|		КОНЕЦ) КАК Количество,
	|	МАКСИМУМ(АвансовыйОтчетТовары.СуммаВсего) КАК Цена,
	|	МАКСИМУМ(АвансовыйОтчетТовары.СтавкаНДС) КАК СтавкаНДС,
	|	МАКСИМУМ(АвансовыйОтчетТовары.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Цены.СрезПоследних КАК Цены
	|		ПО (Цены.Номенклатура = АвансовыйОтчетТовары.Номенклатура)
	|			И (Цены.ХарактеристикаНоменклатуры = АвансовыйОтчетТовары.ХарактеристикаНоменклатуры)
	|			И (Цены.ТипЦен = АвансовыйОтчетТовары.Ссылка.СкладКомпании.ТипЦенРозничнойТорговли)
	|ГДЕ
	|	АвансовыйОтчетТовары.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетТовары.Номенклатура,
	|	АвансовыйОтчетТовары.ХарактеристикаНоменклатуры,
	|	АвансовыйОтчетТовары.ЕдиницаИзмерения
	|		
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АвансовыйОтчет.Организация КАК Организация,
	|	АвансовыйОтчет.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	АвансовыйОтчет.СкладКомпании КАК СкладКомпании,
	|	АвансовыйОтчет.СкладКомпании.ТипЦенРозничнойТорговли КАК ТипЦены
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций 			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивПодразделенийКомпании = УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ПодразделениеКомпании").ВыгрузитьКолонку(0);
	МассивСкладов    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "СкладКомпании").ВыгрузитьКолонку(0);
	МассивТиповЦен    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ТипЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьПодразделениеКомпании", ?(МассивПодразделенийКомпании.Количество() = 1, МассивПодразделенийКомпании[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьВидЦены",     ?(МассивТиповЦен.Количество() = 1,    МассивТиповЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЦенников");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("НеПересчитыватьЦены");
	СтруктураДействий.Вставить("ЦеныИзДокументаОснования");

	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	Товары.ЗаполнитьЗначения(СтруктураДействий.ЗаполнитьОрганизацию, "Организация");
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//  Параметры - Структура - Вспомогательные параметры. 
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
	
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
		
	КонецЕсли;
	
	ТабличныеЧастиСКомандами = Новый Массив();
	ТабличныеЧастиСКомандами.Добавить("Товары");
	ТабличныеЧастиСКомандами.Добавить("Расходы");
	ТабличныеЧастиСКомандами.Добавить("ВыданныеАвансы");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "АвансовыйОтчет");
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиСКомандами Цикл
		
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, ТабличнаяЧасть);
		
		Если ОтображатьЗаполнитьИзФайла Тогда
			
			ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, ТабличнаяЧасть);
			
		КонецЕсли;
		
	КонецЦикла;

	ВыборКонтрагента = ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборКонтрагента.ВыборСсылки = "Справочник.Контрагенты.ФормаСписка";
	ВыборКонтрагента.Обязательный = Истина;
	ВыборКонтрагента.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать контрагента.'");
	
	ВыборДоговора = ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборДоговора.ВыборСсылки = "Справочник.ДоговорыВзаиморасчетов.ФормаСписка";
	ВыборДоговора.Обязательный = Истина;
	ВыборДоговора.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать договор взаиморасчетов.'");
	
	Команда = ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить заказами контрагента'");
	Команда.Идентификатор	= "ТоварыЗаполнитьЗаказамиКонтрагента";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("Контрагент", ВыборКонтрагента);

	Команда = ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю = ЗаполнениеОбъектовАльфаАвто.ИмяПодменюПоУмолчанию("ВыданныеАвансы");
	Команда.Идентификатор = "ВыданныеАвансыЗаполнитьВыданныеАвансы";
	Команда.Представление = НСтр("ru = 'Заполнить выданные авансы'");
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "ВыданныеАвансы";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("Контрагент", ВыборКонтрагента);	
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ДоговорВзаиморасчетов", ВыборДоговора);
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзДокумента(
		КомандыЗаполнения,
		"Товары",
		Параметры
	);
	
КонецПроцедуры

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
// Возвращаемое значение:
//  Структура - сформированные параметры видимости и доступности команд проверки.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьЗаказамиКонтрагента.Видимость",       Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьЗаказамиКонтрагента.Доступность",     Истина);
	ПараметрыКоманд.Вставить("ВыданныеАвансыЗаполнитьВыданныеАвансы.Видимость",    Истина);
	ПараметрыКоманд.Вставить("ВыданныеАвансыЗаполнитьВыданныеАвансы.Доступность",  Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки.
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по заказам контрагенту.
// Параметры: 
//  Ссылка - ДокументСсылка.АвансовыйОтчет - документ для которого производится заполнение.
//	ПараметрыКоманды - Структура - параметры команды заполнения.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//	
Процедура ТоварыЗаполнитьЗаказамиКонтрагента(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект = ПараметрыКоманды.Источник;

	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.Контрагент=ПараметрыЗаполнения.Контрагент Тогда
		Объект.Контрагент = ПараметрыЗаполнения.Контрагент;
		КонтрагентПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ЗаказыПоставщикамОстатки.Номенклатура,
	|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры,
	|	СУММА(ЗаказыПоставщикамОстатки.ЗаказаноОстаток) КАК ЗаказаноОстаток
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&Момент, Контрагент = &Контрагент) КАК ЗаказыПоставщикамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПоставщикамОстатки.Номенклатура,
	|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры";
	
	Запрос=Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Момент", ?(Не ЗначениеЗаполнено(Ссылка), Новый МоментВремени(КонецДня(Объект.Дата)), Новый МоментВремени(ТекущаяДатаСеанса())));
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВсегоСтрок = Выборка.Количество();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока								= Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура				= Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры	= Выборка.ХарактеристикаНоменклатуры;
		ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		НоваяСтрока.Количество					= Выборка.ЗаказаноОстаток;
		ТоварыКоличествоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
	КонецЦикла;

КонецПроцедуры // ТоварыЗаполнитьЗаказамиПоставщику()

// Заполняет табличную часть "ВыданныеАвансы" по неоплаченным сделкам
// Параметры: 
//  Ссылка - ДокументСсылка.АвансовыйОтчет - документ для которого производится заполнение
//	ПараметрыКоманды - Структура - параметры команды заполнения 
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//	
Процедура ВыданныеАвансыЗаполнитьВыданныеАвансы(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект = ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.ДоговорВзаиморасчетов=ПараметрыЗаполнения.ДоговорВзаиморасчетов Тогда
		Объект.ДоговорВзаиморасчетов = ПараметрыЗаполнения.ДоговорВзаиморасчетов;
		ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Если НЕ Объект.Контрагент=ПараметрыЗаполнения.Контрагент Тогда
		Объект.Контрагент = ПараметрыЗаполнения.Контрагент;
		КонтрагентПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(Объект.ДоговорВзаиморасчетов) Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасчетыСКонтрагентамиОстаткиИОбороты.ДокументРасчетов КАК Сделка,
		|	РасчетыСКонтрагентамиОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаОстаток,
		|	РасчетыСКонтрагентамиОстаткиИОбороты.СуммаПриход КАК СуммаПриход
		|ИЗ
		|	РегистрНакопления.РасчетыСКонтрагентами.ОстаткиИОбороты(
		|			&ПериодС,
		|			&ПериодПо,
		|			,
		|			,
		|			Организация = &Организация
		|				И Контрагент = &Контрагент
		|				И ДоговорВзаиморасчетов = &Договор
		|				И ТипРасчета = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
		|				И ТИПЗНАЧЕНИЯ(ДокументРасчетов) В (ТИП(Документ.РасходныйКассовыйОрдер), ТИП(Документ.Выписка))) КАК РасчетыСКонтрагентамиОстаткиИОбороты
		|ГДЕ
		|	РасчетыСКонтрагентамиОстаткиИОбороты.СуммаПриход > 0";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|ВзаиморасчетыКомпанииОстаткиИОбороты.Сделка КАК Сделка,
		|ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаОстаток,
		|ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаПриход КАК СуммаПриход
		|
		|ИЗ
		|РегистрНакопления.ВзаиморасчетыКомпании.ОстаткиИОбороты(&ПериодС,&ПериодПо) КАК ВзаиморасчетыКомпанииОстаткиИОбороты
		|
		|ГДЕ
		|	(ВзаиморасчетыКомпанииОстаткиИОбороты.Контрагент=&Контрагент) 
		|	И (ВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорВзаиморасчетов=&Договор)
		|	И (ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаПриход>0)
		|";
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Договор", Объект.ДоговорВзаиморасчетов);
	Запрос.УстановитьПараметр("ПериодС", Объект.ПериодС);
	Запрос.УстановитьПараметр("ПериодПо", Объект.ПериодПо);
	РезультатЗапросаПоСделкам = Запрос.Выполнить();
	Если НЕ РезультатЗапросаПоСделкам.Пустой() Тогда
		Выборка = РезультатЗапросаПоСделкам.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаАвансы					= Объект.ВыданныеАвансы.Добавить();
			СтрокаАвансы.ДокументОснование	= Выборка.Сделка;
			СтрокаАвансы.Сумма				= Выборка.СуммаОстаток;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ВыданныеАвансыЗаполнитьВыданныеАвансы()

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует печатную форму "АО1"
//
Функция ПечатьАО1(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвансовыйОтчет_АО1";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;

	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		НомерСтраницы = 2;
		
		// валюты
		ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		
		// получим данные о ранее выданных этому лицу авансах
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Момент",Новый Граница(Документ.Ссылка.МоментВремени(),ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("Контрагент", Документ.Контрагент);
		Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", Документ.ДоговорВзаиморасчетов);
		
		Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(Документ.ДоговорВзаиморасчетов) Тогда
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
							|	РасчетыСКонтрагентамиОстатки.СуммаБазОстаток КАК Сумма
							|ИЗ
							|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(
							|			&Момент,
							|			Контрагент = &Контрагент
							|				И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов) КАК РасчетыСКонтрагентамиОстатки";
		Иначе
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
							|	ВзаиморасчетыКомпанииОстатки.СуммаБазОстаток КАК Сумма
							|ИЗ
							|	РегистрНакопления.ВзаиморасчетыКомпании.Остатки(
							|			&Момент,
							|			Контрагент = &Контрагент
							|				И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов) КАК ВзаиморасчетыКомпанииОстатки";
		КонецЕсли;
		ВыборкаПредАвансы = Запрос.Выполнить().Выбрать();
		ОстатокНаНачало = 0;
		Если ВыборкаПредАвансы.Следующий() И (НЕ ВыборкаПредАвансы.Сумма = null) Тогда
			ОстатокНаНачало = ВыборкаПредАвансы.Сумма;
		КонецЕсли;
		// ОстатокНаНачало > 0 --> контрагент должен организации  --> остаток.
		// ОстатокНаНачало < 0 --> организация должна контрагенту --> перерасход.
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АвансовыйОтчет.ПФ_MXL_АО1");

		ОбластьТитул           = Макет.ПолучитьОбласть("Титул");
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// вывод титул листа документа
		ОбластьТитул.Параметры.Заполнить(Документ);
		
		// получаем дату
		ДатаДокумента = Документ.Дата;
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьТитул.Параметры.ОрганизацияПредставление = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		СуммаАвансыОбщ = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Документ.ВыданныеАвансы.Итог("Сумма"),
			Документ.ВалютаДокумента, ДатаДокумента, ВалютаРеглУчета, ДатаДокумента);
		// Вычтем из всех выданных ранее авансов те, за которые контрагент отчитывается данным документом
		СуммаРасходыОбщ = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			Документ.Расходы.Итог("Сумма") + Документ.Товары.Итог("Сумма"), Документ.ВалютаДокумента, Документ.Дата,
			ВалютаРеглУчета, ДатаДокумента);
		СуммаРасходыРуб = Цел(СуммаРасходыОбщ);
		СуммаРасходыКоп = 100 * (Окр(СуммаРасходыОбщ - СуммаРасходыРуб, 2, 1));
		ОбластьТитул.Параметры.ИзрасходованоРуб = СуммаРасходыРуб;
		ОбластьТитул.Параметры.ИзрасходованоКоп = Формат(СуммаРасходыКоп, "ЧЦ=2; ЧН=00; ЧВН=");
		
		ОбластьТитул.Параметры.Подразделение = Документ.ПодразделениеКомпании;
		ОбластьТитул.Параметры.ПредставлениеПодразделения = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			Документ.ПодразделениеКомпании, ДатаДокумента);
		ОбластьТитул.Параметры.КодПодразделения = Документ.ПодразделениеКомпании.Код;
		ОбластьТитул.Параметры.ПодотчетноеЛицо = Документ.Контрагент;
		ПредставлениеПодотчетногоЛица = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент,
			ДатаДокумента);
		ОбластьТитул.Параметры.ПредставлениеПодотчетногоЛица = ПредставлениеПодотчетногоЛица;
		ОбластьТитул.Параметры.ПредставлениеПодотчетногоЛицаРП = СклонениеПредставленийОбъектов.ПросклонятьПредставление(
			ПредставлениеПодотчетногоЛица, 2, Документ.Контрагент);
		ОбластьТитул.Параметры.ТабельныйНомер = Документ.Контрагент.Сотрудник.ТабельныйНомер;
		Если Документ.Контрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ПодотчетноеЛицо Тогда
			ОбластьТитул.Параметры.ДолжностьПодотчетногоЛицаПредставление =
				Документ.Контрагент.Сотрудник.Должность.ПолноеНаименование();
		Иначе
			ОбластьТитул.Параметры.ДолжностьПодотчетногоЛицаПредставление = "";
		КонецЕсли;
		ОбластьТитул.Параметры.ПредставлениеВалютыДокумента = Документ.ВалютаДокумента;
		ОбластьТитул.Параметры.НачальныйОстаток =
			?((ОстатокНаНачало - СуммаАвансыОбщ) > 0, Формат(ОстатокНаНачало - СуммаАвансыОбщ, ФорматВыводаСуммы), "");
		ОбластьТитул.Параметры.НачальныйПерерасход = ?(ОстатокНаНачало < 0, Формат(-ОстатокНаНачало, ФорматВыводаСуммы), "");
		ОбластьТитул.Параметры.ПолученоИзКассы = Формат(СуммаАвансыОбщ, ФорматВыводаСуммы);
		ОбластьТитул.Параметры.ОрганизацияПоОКПО = Документ.Организация.КодПоОКПО;
		Если НЕ (Документ.ВалютаДокумента = ВалютаРеглУчета) Тогда
			ОбластьТитул.Параметры.ПолученоИзКассыВВалюте = Формат(Документ.ВыданныеАвансы.Итог("Сумма"), ФорматВыводаСуммы);
		КонецЕсли;
		ОбластьТитул.Параметры.ИтогоПолучено = Формат(СуммаАвансыОбщ, ФорматВыводаСуммы);
		ОбластьТитул.Параметры.Израсходовано = Формат(СуммаРасходыОбщ, ФорматВыводаСуммы);
		ОстатокНаКонец = ОстатокНаНачало - СуммаРасходыОбщ;
		ОбластьТитул.Параметры.КонечныйОстаток    = ?(ОстатокНаКонец > 0, Формат(ОстатокНаКонец, ФорматВыводаСуммы), "");
		ОбластьТитул.Параметры.КонечныйПерерасход = ?(ОстатокНаКонец < 0, Формат(-ОстатокНаКонец, ФорматВыводаСуммы), "");
		ОбластьТитул.Параметры.СуммаОтчетаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(Документ.СуммаДокумента,
			Документ.ВалютаДокумента);
		
		// заполним ответственных
		ОбластьТитул.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Руководитель", "Руководитель"));
		ОбластьТитул.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ГлавныйБухгалтер", "ГлавныйБухгалтер"));
		ОбластьТитул.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Кассир", "Кассир"));
		ОбластьТитул.Параметры.Номер = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		
		тблРасходы = Документ.Расходы.Выгрузить().Скопировать();
		// обработка таблицы
		тблРасходы.Колонки.Сумма.Имя = "ПоОтчету";
		тблРасходы.Колонки.Добавить("ПоУчету", тблРасходы.Колонки.ПоОтчету.ТипЗначения);
		тблРасходы.Колонки.Добавить("ПоОтчетуВВалюте", тблРасходы.Колонки.ПоОтчету.ТипЗначения);
		тблРасходы.Колонки.Добавить("ПоУчетуВВалюте", тблРасходы.Колонки.ПоОтчету.ТипЗначения);
		Для Каждого ТекСтрока Из тблРасходы Цикл
			ТекСтрока.НомерРасхода = СокрЛП(ТекСтрока.НомерРасхода);
			ТекСтрока.ДокументРасхода = СокрЛП(ТекСтрока.ДокументРасхода);
			Если НЕ ЗначениеЗаполнено(ТекСтрока.Сделка) Тогда
				ТекСтрока.Сделка = Неопределено;	
			КонецЕсли;
			Если Документ.ВалютаДокумента <> ВалютаРеглУчета Тогда
				ТекСтрока.ПоОтчетуВВалюте = ТекСтрока.ПоОтчету;
			КонецЕсли;
			ТекСтрока.ПоОтчету = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТекСтрока.ПоОтчету, Документ.ВалютаДокумента,
				ДатаДокумента, ВалютаРеглУчета, ДатаДокумента);
			ТекСтрока.ПоУчету = ТекСтрока.ПоОтчету;
			ТекСтрока.ПоУчетуВВалюте = ТекСтрока.ПоОтчетуВВалюте;
		КонецЦикла;

		Если Документ.Товары.Количество() <> 0 Тогда
			ОбластьТитул.Параметры["СубСчетДебет1"]  = "41";
			ОбластьТитул.Параметры["СуммаДебет1"]    = Формат(Документ.Товары.Итог("Сумма"), ФорматВыводаСуммы);
			ОбластьТитул.Параметры["СубСчетКредит1"] = ?(Документ.ВалютаДокумента = ВалютаРеглУчета, "71.1", "71.2");
			ОбластьТитул.Параметры["СуммаКредит1"]   = Формат(Документ.Товары.Итог("Сумма"), ФорматВыводаСуммы);
			Сч = 2; //счетчик строк таблицы бух. запись
		Иначе
			Сч = 1; //счетчик строк таблицы бух. запись
		КонецЕсли;
		
		Взаиморасчеты = Документ.Расходы.Выгрузить();
		Взаиморасчеты.Свернуть("НаРасчеты","Сумма");
		
		Для Каждого СтрокаВзаиморасчетов Из Взаиморасчеты Цикл
			Если СтрокаВзаиморасчетов.НаРасчеты = Истина Тогда
				ОбластьТитул.Параметры["СубСчетДебет" + Строка(Сч)] = "60.01";
				ОбластьТитул.Параметры["СуммаДебет" + Строка(Сч)] = Формат(СтрокаВзаиморасчетов.Сумма, ФорматВыводаСуммы);        	
				ОбластьТитул.Параметры["СубСчетКредит" + Строка(Сч)] = "71.01";
				ОбластьТитул.Параметры["СуммаКредит" + Строка(Сч)] = Формат(СтрокаВзаиморасчетов.Сумма, ФорматВыводаСуммы); 
				Сч = Сч + 1;
			КонецЕсли;	
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из тблРасходы Цикл
			Если НЕ (СтрокаТабличнойЧасти.НаРасчеты ИЛИ (Сч > 8)) Тогда
				// заполним бух. запись суммами по статьям расходов
				ОбластьТитул.Параметры["СубСчетДебет" + Строка(Сч)] = СтрокаТабличнойЧасти.СтатьяРасхода.КоррСчет;
				ОбластьТитул.Параметры["СуммаДебет" + Строка(Сч)] = Формат(СтрокаТабличнойЧасти.ПоОтчету, ФорматВыводаСуммы);
				ОбластьТитул.Параметры["СубСчетКредит" + Строка(Сч)] =
					?(Документ.ВалютаДокумента = ВалютаРеглУчета, "71.1", "71.2");
				ОбластьТитул.Параметры["СуммаКредит" + Строка(Сч)] = Формат(СтрокаТабличнойЧасти.ПоОтчету, ФорматВыводаСуммы);
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		ТабличныйДокумент.Вывести(ОбластьТитул);
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// готовим шапку
		НомерСтраницыПред = НомерСтраницы;
		СтруктураИтоговПоСтранице = Новый Структура("ПоОтчету, ПоОтчетуВВалюте, ПоУчету, ПоУчетуВВалюте");
		СтруктураИтоговПоСтранице.ПоОтчету        = 0;
		СтруктураИтоговПоСтранице.ПоОтчетуВВалюте = 0;
		СтруктураИтоговПоСтранице.ПоУчету         = 0;
		СтруктураИтоговПоСтранице.ПоУчетуВВалюте  = 0;
		
		// доп. области
		мсвДопОбластиПодвала = Новый Массив;
		мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
		НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьЗаголовок,
			, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
			мсвДопОбластиПодвала);
				
		// Добавим к расходам товары
		Для Каждого СтрокаТабличнойЧасти Из Документ.Товары Цикл
			НоваяСтрока = тблРасходы.Добавить();
			НоваяСтрока.ДатаРасхода = СтрокаТабличнойЧасти.ДатаВходящегоДокумента;
			НоваяСтрока.НомерРасхода = СокрЛП(СтрокаТабличнойЧасти.НомерВходящегоДокумента);
			НоваяСтрока.ДокументРасхода = СокрЛП(СтрокаТабличнойЧасти.ВидДокВходящий);
			Если Документ.ВалютаДокумента <> ВалютаРеглУчета Тогда
				НоваяСтрока.ПоОтчетуВВалюте = СтрокаТабличнойЧасти.Сумма;
			КонецЕсли;
			НоваяСтрока.ПоОтчету = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТабличнойЧасти.Сумма, Документ.ВалютаДокумента,
				ДатаДокумента, ВалютаРеглУчета, ДатаДокумента);
			НоваяСтрока.ПоУчету = НоваяСтрока.ПоОтчету;
			НоваяСтрока.ПоУчетуВВалюте = НоваяСтрока.ПоОтчетуВВалюте; 
		КонецЦикла;
		
		// Свернем возможные дубли строк
		тблРасходы.Свернуть("ДатаРасхода, НомерРасхода, ДокументРасхода, Сделка", "ПоОтчету, ПоОтчетуВВалюте, ПоУчету, ПоУчетуВВалюте");
		
		// Счетчик строк данных из двух таблиц
		СчетчикСтрокТаблицы = 1;	
			
		// Заполняем область строки документа
		Для Каждого СтрокаТабличнойЧасти Из тблРасходы Цикл
			ОбластьСтрока.Параметры.Заполнить(СтрокаТабличнойЧасти);
			ОбластьСтрока.Параметры.НомерСтроки = СчетчикСтрокТаблицы;
			ОбластьСтрока.Параметры.ПоОтчету = Формат(СтрокаТабличнойЧасти.ПоОтчету, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.ПоОтчетуВВалюте = Формат(СтрокаТабличнойЧасти.ПоОтчетуВВалюте, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.ПоУчету = Формат(СтрокаТабличнойЧасти.ПоУчету, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.ПоУчетуВВалюте = Формат(СтрокаТабличнойЧасти.ПоУчетуВВалюте, ФорматВыводаСуммы);
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Сделка) Тогда
				ОбластьСтрока.Параметры.ДокументДата = Формат(СтрокаТабличнойЧасти.ДатаРасхода, "ДФ=dd.MM.yy");
				ОбластьСтрока.Параметры.ДокументНомер = СтрокаТабличнойЧасти.НомерРасхода;
				ОбластьСтрока.Параметры.ДокументРасходаПредставление = Неопределено;
			Иначе
				ОбластьСтрока.Параметры.ДокументДата = Формат(СтрокаТабличнойЧасти.Сделка.Дата, "ДФ=dd.MM.yy");
				ОбластьСтрока.Параметры.ДокументНомер = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(
					СтрокаТабличнойЧасти.Сделка);
				ОбластьСтрока.Параметры.ДокументРасхода = СтрокаТабличнойЧасти.Сделка.ХозОперация;
				ОбластьСтрока.Параметры.ДокументРасходаПредставление = СтрокаТабличнойЧасти.Сделка;
			КонецЕсли;
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Расходы.Индекс(СтрокаТабличнойЧасти) = Документ.Расходы.Количество()-1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ПоОтчету, ПоОтчетуВВалюте, ПоУчету, ПоУчетуВВалюте");
				СтруктураИтоговПоСтранице.ПоОтчету        = 0;
				СтруктураИтоговПоСтранице.ПоОтчетуВВалюте = 0;
				СтруктураИтоговПоСтранице.ПоУчету         = 0;
				СтруктураИтоговПоСтранице.ПоУчетуВВалюте  = 0;
				НомерСтраницыПред = НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТабличнойЧасти,СтруктураИтоговПоСтранице);
			
			// Счетчик строк данных из двух таблиц
			СчетчикСтрокТаблицы = СчетчикСтрокТаблицы + 1;
			
		КонецЦикла;
		
		// Получаем область подвала документа
		ОбластьПодвал.Параметры.Заполнить(Документ);
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"Кассир","Кассир"));
		ОбластьПодвал.Параметры.ПредставлениеПодотчетногоЛица = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			Документ.Контрагент, ДатаДокумента);
		ИтогоРегл = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			Документ.Расходы.Итог("Сумма") + Документ.Товары.Итог("Сумма"), Документ.ВалютаДокумента, ДатаДокумента,
			ВалютаРеглУчета, ДатаДокумента);
		ОбластьПодвал.Параметры.ИтогоПоОтчету = Формат(ИтогоРегл, ФорматВыводаСуммы);
		Если Документ.ВалютаДокумента <> ВалютаРеглУчета Тогда
			ОбластьПодвал.Параметры.ИтогоПоОтчетуВВалюте = Формат(
				Документ.Расходы.Итог("Сумма") + Документ.Товары.Итог("Сумма"), ФорматВыводаСуммы);
			ОбластьПодвал.Параметры.ИтогоПоУчетуВВалюте = Формат(
				Документ.Расходы.Итог("Сумма") + Документ.Товары.Итог("Сумма"), ФорматВыводаСуммы);
		КонецЕсли;
		ОбластьПодвал.Параметры.ИтогоПоУчету = Формат(ИтогоРегл, ФорматВыводаСуммы);
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции //ПечатьАО1()

// Формирует печатную форму "АвансовыйОтчет"
//
Функция ПечатьАвансовыйОтчет(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвансовыйОтчет_АвансовыйОтчет";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АвансовыйОтчет.ПФ_MXL_АвансовыйОтчет");
		
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		
		ОбластьЗаголовок.Параметры.Номер    = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		ОбластьЗаголовок.Параметры.Дата     = Формат(Документ.Дата,"ДЛФ=D"); 
		ОбластьЗаголовок.Параметры.ПериодС  = Формат(Документ.ПериодС,"ДЛФ=D");
		ОбластьЗаголовок.Параметры.ПериодПо = Формат(Документ.ПериодПо,"ДЛФ=D");
		
		// определяем дату
		ДатаДокумента = Документ.Дата;
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ОрганизацияПредставление = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ПредставлениеПодотчетногоЛица =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Контрагент, , ДополнительныеПараметры);
		ОбластьЗаголовок.Параметры.ПредставлениеПодразделения = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			Документ.ПодразделениеКомпании, ДатаДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);

		// готовим шапку
		НомерСтраницы = 2; НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,Сумма",Документ.ВалютаДокумента,0);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// готовим области строки
		ВыборкаТабличнойЧасти = Документ.Расходы;
		Для каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			ОбластьСтрока.Параметры.Заполнить(СтрокаТЧ);
			ОбластьСтрока.Параметры.Сумма = Формат(СтрокаТЧ.Сумма,ФорматВыводаСуммы);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если ВыборкаТабличнойЧасти.Индекс(СтрокаТЧ) = ВыборкаТабличнойЧасти.Количество()-1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента, Сумма", Документ.ВалютаДокумента, 0);
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ,СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице,
				СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// итоги
		ОбластьПодвал.Параметры.Заполнить(Документ);
		ОбластьПодвал.Параметры.Израсходовано = Формат(Документ.Расходы.Итог("Сумма"), ФорматВыводаСуммы);
	
		// Выводим представления и расшифровки подписей
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Руководитель", "Руководитель"));
		ОбластьПодвал.Параметры.ПодотчетноеЛицоПредставление = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			Документ.Контрагент, ДатаДокумента);
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции //ПечатьАвансовыйОтчет()

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Расходы.Итог("Сумма") + Объект.Товары.Итог("СуммаВсего"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС",    Объект.Товары.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента - ИтогиОперации.СуммаНДС);
	
	// Производим добавление сведений о розничной сумме только в случае если выбран розничный склад.
	Если Объект.СкладКомпании.Розничный Тогда
		ИтогиОперации.Вставить("СуммаРозничная", Объект.Товары.Итог("СуммаРозничная"));
		ИтогиОперации.Вставить("ПроцентНаценки", ?(ИтогиОперации.СуммаДокумента = 0, 0, Окр(ИтогиОперации.СуммаРозничная / ИтогиОперации.СуммаДокумента - 1, 2) * 100));
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

Процедура КонтрагентТабличнойЧастиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено)
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Строка.Контрагент.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Строка.Договор.Пустая() ИЛИ (Строка.Договор.Владелец <> Строка.Контрагент) Тогда
		// Добавим свойство для создания и поиска корректного вида договора 
		ДоступныеВидыДоговоров = Новый Массив;
		ДоступныеВидыДоговоров.Добавить(Перечисления.ВидыДоговоров.Покупка);
		ПараметрыДействия.Вставить("ДоступныеВидыДоговоров", ДоступныеВидыДоговоров);
		
		Строка.Договор = ОбработкаРеквизитовДокументаСервер.ПолучитьДоговорВзаиморасчетов(Строка.Контрагент, Перечисления.ВидыДоговоров.Покупка, Объект,ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	
	Если Объект.Товары.Количество()>0 Тогда
		ОбязательныеРеквизиты.Добавить("СкладКомпании");
	КонецЕсли; 
	
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Расходы");
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	ОбязательныеРеквизиты.Добавить("ВыданныеАвансы.ДокументОснование");
	ОбязательныеРеквизиты.Добавить("ВыданныеАвансы.Сумма");
	
	ОбязательныеРеквизиты.Добавить("КодыМаркировки.КодМаркировки");
	
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(Объект.ДоговорВзаиморасчетов);
	Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		ОбязательныеРеквизиты.Добавить("СпособЗачетаАвансов");
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	УникальныеТовары.Добавить("ГТД");
	
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Товары", УникальныеТовары);
		
	УникальныеКодМаркировки = Новый Массив;
	УникальныеКодМаркировки.Добавить("КодМаркировки");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти = Новый Структура();
	УникальныеТабличныеЧасти.Вставить("Товары", УникальныеТовары);
	УникальныеТабличныеЧасти.Вставить("КодыМаркировки", УникальныеКодМаркировки);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	
	КонтролируемыеРеквизитыТЧ = Новый Структура();
	КонтролируемыеРеквизитыТЧ.Вставить("Договор", КонтрольПоПодразделению);
	КонтролируемыеРеквизитыТЧ.Вставить("Сделка", КонтрольПоПодразделению);
	КонтролируемыеРеквизиты.Вставить("Расходы", КонтролируемыеРеквизитыТЧ);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//   Структура - структура действий
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработка пересчета табличных частей объекта.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДокументОснованиеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
		
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Проверка склада
	УстановитьПривилегированныйРежим(Истина);
	Если (Объект.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия) И (Объект.СкладКомпании.Розничный) Тогда
		Объект.СкладКомпании = Справочники.СкладыКомпании.ПустаяСсылка();
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасходы

// Обработчик события возникающего при изменении данных реквизита "Контрагент" в таблице "Расходы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура РасходыКонтрагентПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	КонтрагентТабличнойЧастиПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры  // РасходыКонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сделка" в таблице "Расходы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура РасходыСделкаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Строка.Сделка) Тогда
		Возврат;
	КонецЕсли;
	
	Строка.Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Строка.Сделка.СуммаДокумента, Строка.Сделка.ВалютаДокумента, Объект.Дата, Объект.ВалютаДокумента, Объект.КурсДокумента);
	Строка.СуммаВсего = Строка.Сумма;
	Если ЕстьРеквизит(Строка.Сделка,"Контрагент") Тогда
		
		Строка.Контрагент = Строка.Сделка.Контрагент;
		РасходыКонтрагентПриИзменении(Объект, Строка, ПараметрыДействия);
		
		Если ЕстьРеквизит(Строка.Сделка,"ДоговорВзаиморасчетов") Тогда
			Строка.Договор = Строка.Сделка.ДоговорВзаиморасчетов;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры  // РасходыСделкаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "На расчет" в таблице "Расходы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура РасходыНаРасчетыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Очистим колонки таблицы в зависимости от значения флага
	Если Строка.НаРасчеты Тогда
		Строка.СтатьяРасхода = Справочники.СтатьиДоходовИРасходов.ПустаяСсылка(); 
		Строка.Договор = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
		Строка.ЕстьСчетФактура = Ложь;
		Строка.СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
		Строка.СуммаНДС = 0;   
		Строка.СуммаВсего = Строка.Сумма; 
		Строка.ДатаСчетФактуры = Дата(1,1,1);
		Строка.НомерСчетФактуры = "";
		Строка.СчетФактура = Документы.СчетФактураПолученный.ПустаяСсылка();
	Иначе
		Строка.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Строка.Договор = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры  // РасходыНаРасчетПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "ЕстьСчетФактура" в таблице "Расходы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура РасходыЕстьСчетФактураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Очистим колонки таблицы в зависимости от значения флага
	Если Строка.ЕстьСчетФактура Тогда 
		Строка.НаРасчеты = Ложь;
		Строка.Сделка = Неопределено;
	Иначе 
		Строка.ДатаСчетФактуры = Дата(1,1,1);
		Строка.НомерСчетФактуры = "";
		Строка.СчетФактура = Документы.СчетФактураПолученный.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры  // РасходыЕстьСчетФактураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Расходы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура РасходыСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);  
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка,ПараметрыДействия, "Расходы");
	
КонецПроцедуры // РасходыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Расходы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура РасходыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
 	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия, "Расходы");
	
КонецПроцедуры // РасходыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Расходы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура РасходыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события  
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия, "Расходы");
	
КонецПроцедуры // РасходыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Расходы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура РасходыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события  
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия, "Расходы");
	
КонецПроцедуры // РасходыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура РасходыЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия, "Расходы");
	
КонецПроцедуры // РасходыЦенаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Строка.ИдентификаторТовара) Тогда
		Строка.ИдентификаторТовара = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество базовое" в таблице "Товары".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоБазовоеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка,ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент наценки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентНаценкиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПроцентНаценкиПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыПроцентНаценкиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена (розничная)" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаРозничнаяПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма (розничная)" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаРозничнаяПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма (розничная)" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыГТДПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ГТДПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаРозничнаяПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "ЕстьСчетФактура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕстьСчетФактураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Очистим колонки таблицы в зависимости от значения флага
	Если Не Строка.ЕстьСчетФактура Тогда 
		Строка.ДатаСчетФактуры = Дата(1,1,1);
		Строка.НомерСчетФактуры = "";
		Строка.СчетФактура = Документы.СчетФактураПолученный.ПустаяСсылка();
		Строка.Договор = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
		Строка.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры  // ТоварыЕстьСчетФактураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКонтрагентПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	КонтрагентТабличнойЧастиПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры  // ТоварыКонтрагентПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыданныеАвансы

// Обработчик события возникающего при изменении данных реквизита "Сумма (розничная)" в таблице "Выданные авансы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВыданныеАвансыДокументОснованиеПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено)Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Не ЗначениеЗаполнено(Строка.ДокументОснование) Тогда
		
		Строка.Сумма = 0;
		
	Иначе
		
		СтруктураОтбора	= Новый Структура();
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
		СтруктураОтбора.Вставить("Контрагент", Объект.Контрагент);
		СтруктураОтбора.Вставить("ДоговорВзаиморасчетов", Объект.ДоговорВзаиморасчетов);
		СтруктураОтбора.Вставить("ДокументРасчетов", Строка.ДокументОснование);
		СтруктураОтбора.Вставить("ТипРасчета", Перечисления.ТипыРасчетов.Аванс);
		тзДолги			= РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(СтруктураОтбора, Объект.Дата);
		
		Если Строка.ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = Объект.ВалютаДокумента Тогда
			Если Объект.ДокументОснование = Неопределено Тогда 
				ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("Сумма"), Строка.ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, Строка.ДокументОснование.Дата, Объект.ВалютаДокумента, Строка.ДокументОснование.Дата, РежимОкругления.Окр15как20); 		       
			Иначе 						
				ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("Сумма"), Строка.ДокументОснование.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, Объект.ДокументОснование.Дата, Объект.ВалютаДокумента, Объект.ДокументОснование.Дата, РежимОкругления.Окр15как20); 		       
			КонецЕсли; 
		ИначеЕсли Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
			ОстатокПоСделке = тзДолги.Итог("СуммаБаз");
		Иначе
			ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("СуммаУпр"),Константы.ВалютаУправленческогоУчетаКомпании.Получить(),Строка.ДокументОснование.Дата, Объект.ВалютаДокумента,Строка.ДокументОснование.Дата,РежимОкругления.Окр15как20);
		КонецЕсли;
		
		Если ОстатокПоСделке < 0 Тогда
			Строка.Сумма = 0;
		Иначе
			Строка.Сумма = ОстатокПоСделке;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры  // ВыданныеАвансыДокументОснованиеПриИзменении()

#КонецОбласти

// Проверяет возможность ввода счет-фактуры полученной на основании документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ПоступлениеТоваров - документ, для которого выполняется действие.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина, если ввод возможен, Ложь - в противном случае.
//
Функция ВозможенВводСчетФактурыПолученной(ДокументОбъект, ДополнительныеПарметры = Неопределено) Экспорт
	
	Возврат ОбработкаСобытийДокументаСервер.ДокументСодержитСтрокиСНДС(ДокументОбъект, "Расходы, Товары");
	
КонецФункции

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговора",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов"));
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаДоговора", ДополнительныеПараметры.ДляПроведения.ВалютаДоговора);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	АвансовыйОтчет.Организация КАК Организация,
	|	АвансовыйОтчет.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	АвансовыйОтчет.Ссылка КАК Ссылка,
	|	АвансовыйОтчет.Дата КАК Дата,
	|	АвансовыйОтчет.ХозОперация КАК ХозОперация,
	|	АвансовыйОтчет.ДокументОснование КАК ДокументОснование,
	|	АвансовыйОтчет.Контрагент КАК Контрагент,
	|	АвансовыйОтчет.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	АвансовыйОтчет.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	АвансовыйОтчет.Ссылка КАК Сделка,
	|	АвансовыйОтчет.СуммаДокумента КАК Сумма,
	|	АвансовыйОтчет.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	АвансовыйОтчет.ВалютаДокумента КАК ВалютаДокумента,
	|	АвансовыйОтчет.КурсДокумента КАК КурсДокумента,
	|	АвансовыйОтчет.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически) КАК СпособЗачетаАвансов,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(АвансовыйОтчетТовары.СуммаВсего), 0) КАК Сумма,
	|	АвансовыйОтчетТовары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СуммаТоварыРасходы
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
	|ГДЕ
	|	АвансовыйОтчетТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(АвансовыйОтчетРасходы.Сумма), 0),
	|	АвансовыйОтчетРасходы.Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет.Расходы КАК АвансовыйОтчетРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетРасходы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(СуммаТоварыРасходы.Сумма) КАК Сумма,
	|	СуммаТоварыРасходы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СуммаТоварыРасходыИтог
	|ИЗ
	|	СуммаТоварыРасходы КАК СуммаТоварыРасходы
	|ГДЕ
	|	СуммаТоварыРасходы.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СуммаТоварыРасходы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвансовыйОтчетРасходы.Контрагент КАК Контрагент,
	|	АвансовыйОтчетРасходы.Договор КАК Договор,
	|	АвансовыйОтчетРасходы.Договор.ПодразделениеКомпании КАК ПодразделениеКомпанииДоговора,
	|	АвансовыйОтчетРасходы.Сделка КАК Сделка,
	|	СУММА(АвансовыйОтчетРасходы.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВзаиморасчетыНаРасчеты
	|ИЗ
	|	Документ.АвансовыйОтчет.Расходы КАК АвансовыйОтчетРасходы
	|ГДЕ
	|	АвансовыйОтчетРасходы.Ссылка = &Ссылка
	|	И АвансовыйОтчетРасходы.НаРасчеты = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетРасходы.Контрагент,
	|	АвансовыйОтчетРасходы.Сделка,
	|	АвансовыйОтчетРасходы.Договор,
	|	АвансовыйОтчетРасходы.Договор.ПодразделениеКомпании
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр, &ВалютаДоговора)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ХозОперация КАК ХозОперация,
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДоговора КАК ВалютаДоговора,
	|	ДанныеДокумента.Сделка КАК Сделка,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыВзаиморасчетов = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютВзаиморасчетов.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетов.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыВзаиморасчетов
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл,
	|	ЕСТЬNULL(СуммаТоварыРасходыИтог.Сумма, 0) КАК СуммаЗадолженности,
	|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютВзаиморасчетов
	|		ПО ДанныеДокумента.ВалютаДоговора = КурсыВалютВзаиморасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммаТоварыРасходыИтог КАК СуммаТоварыРасходыИтог
	|		ПО ДанныеДокумента.Ссылка = СуммаТоварыРасходыИтог.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвансовыйОтчетВыданныеАвансы.ДокументОснование КАК ДокументОснование,
	|	АвансовыйОтчетВыданныеАвансы.Сумма КАК Сумма
	|ПОМЕСТИТЬ АвансыПоДокументу
	|ИЗ
	|	Документ.АвансовыйОтчет.ВыданныеАвансы КАК АвансовыйОтчетВыданныеАвансы
	|ГДЕ
	|	АвансовыйОтчетВыданныеАвансы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	СуммовыеРазницы = РегистрыНакопления.РасчетыСКонтрагентами.ИнициализацияСуммовыхРазниц();
	
	ОписаниеТиповПодразделение=Новый ОписаниеТипов;
	ОписаниеТиповПодразделение.Типы().Добавить(Тип("СправочникСсылка.ПодразделенияКомпании"));
	ОписаниеТиповЧисло=Новый ОписаниеТипов;
	ОписаниеТиповЧисло.Типы().Добавить(Тип("Число"));
	
	ВзаиморасчетыНаРасходы = Новый ТаблицаЗначений();
	ВзаиморасчетыНаРасходы.Колонки.Добавить("Подразделение", ОписаниеТиповПодразделение);
	ВзаиморасчетыНаРасходы.Колонки.Добавить("Сумма",ОписаниеТиповЧисло);
	
	// Дополним таблицу для списания суммовых разниц
	РасчетыСКонтрагентами.Колонки.Добавить(
		"КурсВалютыВзаиморасчетов",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 6, ДопустимыйЗнак.Неотрицательный)));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.ДокументОснование КАК ДокументОснование,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Задолженность.ВалютаДоговора КАК ВалютаДоговора,
	|	Задолженность.Сделка КАК Сделка,
	|	Задолженность.СуммаЗадолженности КАК СуммаЗадолженности,
	|	Задолженность.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов
	|ИЗ
	|	Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаиморасчетыНаРасчеты.Контрагент КАК Контрагент,
	|	ВзаиморасчетыНаРасчеты.Договор КАК Договор,
	|	ВзаиморасчетыНаРасчеты.Договор.ПодразделениеКомпании КАК ПодразделениеКомпанииДоговора,
	|	ВзаиморасчетыНаРасчеты.Сделка КАК Сделка,
	|	ВзаиморасчетыНаРасчеты.Сумма КАК Сумма,
	|	ВзаиморасчетыНаРасчеты.Договор.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|ИЗ
	|	ВзаиморасчетыНаРасчеты КАК ВзаиморасчетыНаРасчеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвансыПоДокументу.ДокументОснование КАК ДокументОснование,
	|	АвансыПоДокументу.Сумма КАК Сумма
	|ИЗ
	|	АвансыПоДокументу КАК АвансыПоДокументу";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеОбОплате = РезультатЗапроса[0].Выбрать();
	НаРасходы = РезультатЗапроса[1].Выгрузить();
	АвансыКЗачету = РезультатЗапроса[2].Выгрузить();
	
	Если НЕ ДанныеОбОплате.Следующий() Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	Если ДанныеОбОплате.СуммаЗадолженности < АвансыКЗачету.Итог("Сумма")
		И Не ПолучитьЗначениеПараметраСтруктуры(ДвиженияДокумента, "ЭтоВосстановлениеПоследовательностей", Ложь) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Сумма выданных авансов превышает сумму по документу.'"),,,,
			Отказ);
		
	КонецЕсли;
	
	СуммаОплаты = ДанныеОбОплате.СуммаЗадолженности;
	
	Если СуммаОплаты <> 0 И АвансыКЗачету.Количество() > 0 Тогда
		
		// Найдем непогашенные остатки по сделкам
		ЗапросОстатков = Новый Запрос;
		ЗапросОстатков.Текст = "ВЫБРАТЬ
		|	РасчетыСКонтрагентамиОстатки.ДокументРасчетов КАК ДокументРасчетов,
		|	СУММА(РасчетыСКонтрагентамиОстатки.СуммаОстаток) КАК СуммаОстаток,
		|	СУММА(РасчетыСКонтрагентамиОстатки.СуммаУпрОстаток) КАК СуммаУпрОстаток,
		|	СУММА(РасчетыСКонтрагентамиОстатки.СуммаБазОстаток) КАК СуммаБазОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(
		|			&МоментВремени,
		|			Организация = &Организация
		|				И Контрагент = &Контрагент
		|				И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
		|				И ДокументРасчетов В (&Авансы)
		|				И ТипРасчета = ЗНАЧЕНИЕ(перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСКонтрагентамиОстатки
		|ГДЕ
		|	РасчетыСКонтрагентамиОстатки.СуммаОстаток > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСКонтрагентамиОстатки.ДокументРасчетов";
		ЗапросОстатков.УстановитьПараметр("МоментВремени", Новый МоментВремени(ДанныеОбОплате.Дата, ДанныеОбОплате.Ссылка));
		ЗапросОстатков.УстановитьПараметр("Организация", ДанныеОбОплате.Организация);
		ЗапросОстатков.УстановитьПараметр("Контрагент", ДанныеОбОплате.Контрагент);
		ЗапросОстатков.УстановитьПараметр("ДоговорВзаиморасчетов", ДанныеОбОплате.ДоговорВзаиморасчетов);
		ЗапросОстатков.УстановитьПараметр("Авансы", АвансыКЗачету.ВыгрузитьКолонку("ДокументОснование"));
		
		// Наложим блокировку на считываемые данные
		СтруктураПараметровБлокировки = Новый Структура;
		СтруктураПараметровБлокировки.Вставить("ТипТаблицы", "РегистрНакопления");
		СтруктураПараметровБлокировки.Вставить("ИмяТаблицы", "РасчетыСКонтрагентами");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ДанныеОбОплате.Дата));
		ЗначенияБлокировки.Вставить("Контрагент", ДанныеОбОплате.Контрагент);
		ЗначенияБлокировки.Вставить("ДоговорВзаиморасчетов", ДанныеОбОплате.ДоговорВзаиморасчетов);
		ЗначенияБлокировки.Вставить("Организация", ДанныеОбОплате.Организация);
		ЗначенияБлокировки.Вставить("ТипРасчета", Перечисления.ТипыРасчетов.Аванс);
		ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки);
		
		ОстаткиПоАвансам = ЗапросОстатков.Выполнить().Выгрузить();
		УсловиеОтбора = Новый Структура("ДокументРасчетов");
		Для Каждого ВыданныйАванс Из АвансыКЗачету Цикл
			
			Если ДанныеОбОплате.ВалютаДокумента = ДанныеОбОплате.ВалютаДоговора Тогда
				СуммаАванса = ВыданныйАванс.Сумма;
			Иначе
				СуммаАванса = Окр(
					РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
						ВыданныйАванс.Сумма,
						ДанныеОбОплате.ВалютаДокумента,
						ДанныеОбОплате.КурсДокумента,
						ДанныеОбОплате.ВалютаДоговора,
						ДанныеОбОплате.КурсВалютыВзаиморасчетов),
					2);
			КонецЕсли;
			
			// Проверим аванс остатка и то, что по документу указана сумма корректно
			УсловиеОтбора.ДокументРасчетов = ВыданныйАванс.ДокументОснование;
			ОстатокПоАвансу = ОстаткиПоАвансам.НайтиСтроки(УсловиеОтбора);
			Если (ОстатокПоАвансу.Количество() = 0 
				ИЛИ СуммаАванса > ОстатокПоАвансу[0].СуммаОстаток)
				И Не ПолучитьЗначениеПараметраСтруктуры(ДвиженияДокумента, "ЭтоВосстановлениеПоследовательностей", Ложь) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Для выданного аванса %1 указана сумма аванса больше суммы остатка'"),
						ВыданныйАванс.ДокументОснование),,,,
					Отказ);
					СуммаОплаты = 0;
				Продолжить;
			КонецЕсли;
			
			НоваяЗапись = РасчетыСКонтрагентами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеОбОплате);
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
			НоваяЗапись.Период = ДанныеОбОплате.Дата;
			НоваяЗапись.Регистратор = ДанныеОбОплате.Ссылка;
			НоваяЗапись.ТипРасчета = Перечисления.ТипыРасчетов.Аванс;
			НоваяЗапись.ДокументРасчетов = ВыданныйАванс.ДокументОснование;
			
			Если СуммаАванса = ОстатокПоАвансу[0].СуммаОстаток Тогда
				
				НоваяЗапись.Сумма = ОстатокПоАвансу[0].СуммаОстаток;
				НоваяЗапись.СуммаУпр = ОстатокПоАвансу[0].СуммаУпрОстаток;
				НоваяЗапись.СуммаБаз = ОстатокПоАвансу[0].СуммаБазОстаток;
				
			Иначе
				
				КурсыВалют = РасчетыСКонтрагентамиСервер.КурсыВалютДляПересчетаСумм(
					ВыданныйАванс.ДокументОснование,
					ДанныеОбОплате);
				
				НоваяЗапись.Сумма = СуммаАванса;
				НоваяЗапись.СуммаУпр = Окр(
					РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
						ВыданныйАванс.Сумма,
						ДанныеОбОплате.ВалютаДокумента,
						ДанныеОбОплате.КурсДокумента,
						ДанныеОбОплате.ВалютаУпр,
						КурсыВалют.Получить(ДанныеОбОплате.ВалютаУпр)),
					2);
				НоваяЗапись.СуммаБаз = Окр(
					РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
						ВыданныйАванс.Сумма,
						ДанныеОбОплате.ВалютаДокумента,
						ДанныеОбОплате.КурсДокумента,
						ДанныеОбОплате.ВалютаРегл,
						КурсыВалют.Получить(ДанныеОбОплате.ВалютаРегл)),
					2);
				
			КонецЕсли;
			
			НоваяЗапись.Курс = ДанныеОбОплате.КурсДокумента;
			НоваяЗапись.ВалютаПлатежа = ДанныеОбОплате.ВалютаДокумента;
			НоваяЗапись.СпособЗачета = Перечисления.СпособыЗачетаАвансов.Автоматически;
			НоваяЗапись.ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.ПогашениеДебиторскойЗадолженности;
			НоваяЗапись.Активность = Истина;
			
			// Дополнительные данные
			НоваяЗапись.КурсВалютыВзаиморасчетов = ДанныеОбОплате.КурсВалютыВзаиморасчетов;
			
			// Укажем данный зачет аванса как долг и сразу его спишем
			СтрокаНачиленияДолга = РасчетыСКонтрагентами.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНачиленияДолга, НоваяЗапись,, "Заказ");
			СтрокаНачиленияДолга.ВидДвижения = ВидДвиженияНакопления.Приход;
			СтрокаНачиленияДолга.ТипРасчета = Перечисления.ТипыРасчетов.Оплата;
			СтрокаНачиленияДолга.ДокументРасчетов = ДанныеОбОплате.Ссылка;
			СтрокаНачиленияДолга.ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.ЗачетАванса;
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	Если СуммаОплаты <> 0 Тогда
		
		НоваяЗапись = РасчетыСКонтрагентами.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеОбОплате);
		НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
		НоваяЗапись.Период = ДанныеОбОплате.Дата;
		НоваяЗапись.Регистратор = ДанныеОбОплате.Ссылка;
		НоваяЗапись.ТипРасчета = Перечисления.ТипыРасчетов.Оплата;
		НоваяЗапись.ДокументРасчетов = ДанныеОбОплате.Сделка;
		НоваяЗапись.Сумма = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СуммаОплаты,
				ДанныеОбОплате.ВалютаДокумента,
				ДанныеОбОплате.КурсДокумента,
				ДанныеОбОплате.ВалютаДоговора,
				ДанныеОбОплате.КурсВалютыВзаиморасчетов),
			2);
		НоваяЗапись.СуммаУпр = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СуммаОплаты,
				ДанныеОбОплате.ВалютаДокумента,
				ДанныеОбОплате.КурсДокумента,
				ДанныеОбОплате.ВалютаУпр,
				ДанныеОбОплате.КурсВалютыУпр),
			2);
		НоваяЗапись.СуммаБаз = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СуммаОплаты,
				ДанныеОбОплате.ВалютаДокумента,
				ДанныеОбОплате.КурсДокумента,
				ДанныеОбОплате.ВалютаРегл,
				ДанныеОбОплате.КурсВалютыРегл),
			2);
		НоваяЗапись.Курс = ДанныеОбОплате.КурсДокумента;
		НоваяЗапись.ВалютаПлатежа = ДанныеОбОплате.ВалютаДокумента;
		НоваяЗапись.СпособЗачета = ДанныеОбОплате.СпособЗачетаАвансов;
		НоваяЗапись.ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.НачислениеКредиторскойЗадолженности;
		НоваяЗапись.Активность = Истина;
		
		// Дополнительные данные
		НоваяЗапись.КурсВалютыВзаиморасчетов = ДанныеОбОплате.КурсВалютыВзаиморасчетов;
		
	КонецЕсли;
	
	Для Каждого СтрокаРасхода Из НаРасходы Цикл
		
		НоваяЗапись = РасчетыСКонтрагентами.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеОбОплате);
		НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
		НоваяЗапись.Период = ДанныеОбОплате.Дата;
		НоваяЗапись.Регистратор = ДанныеОбОплате.Ссылка;
		НоваяЗапись.Контрагент = СтрокаРасхода.Контрагент;
		НоваяЗапись.ДоговорВзаиморасчетов = СтрокаРасхода.Договор;
		Если ЗначениеЗаполнено(СтрокаРасхода.Сделка) Тогда
			НоваяЗапись.ТипРасчета = Перечисления.ТипыРасчетов.Оплата;
			НоваяЗапись.ДокументРасчетов = СтрокаРасхода.Сделка;
		Иначе
			НоваяЗапись.ТипРасчета = Перечисления.ТипыРасчетов.Аванс;
			НоваяЗапись.ДокументРасчетов = ДанныеОбОплате.Ссылка;
		КонецЕсли;
		НоваяЗапись.Сумма = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СтрокаРасхода.Сумма,
				ДанныеОбОплате.ВалютаДокумента,
				ДанныеОбОплате.КурсДокумента,
				СтрокаРасхода.ВалютаВзаиморасчетов,
				ДанныеОбОплате.Дата),
			2);
		НоваяЗапись.СуммаУпр = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СтрокаРасхода.Сумма,
				ДанныеОбОплате.ВалютаДокумента,
				ДанныеОбОплате.КурсДокумента,
				ДанныеОбОплате.ВалютаУпр,
				ДанныеОбОплате.КурсВалютыУпр),
			2);
		НоваяЗапись.СуммаБаз = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СтрокаРасхода.Сумма,
				ДанныеОбОплате.ВалютаДокумента,
				ДанныеОбОплате.КурсДокумента,
				ДанныеОбОплате.ВалютаРегл,
				ДанныеОбОплате.КурсВалютыРегл),
			2);
		НоваяЗапись.Курс = ДанныеОбОплате.КурсДокумента;
		НоваяЗапись.ВалютаПлатежа = ДанныеОбОплате.ВалютаДокумента;
		НоваяЗапись.СпособЗачета = ДанныеОбОплате.СпособЗачетаАвансов;
		НоваяЗапись.ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.НачислениеДебиторскойЗадолженности;
		НоваяЗапись.Активность = Истина;
		
		СтрокаВзаиморасчетов = ВзаиморасчетыНаРасходы.Добавить();
		СтрокаВзаиморасчетов.Подразделение = СтрокаРасхода.ПодразделениеКомпанииДоговора;
		СтрокаВзаиморасчетов.Сумма = НоваяЗапись.СуммаУпр;
		
		// Дополнительные данные
		НоваяЗапись.КурсВалютыВзаиморасчетов = ДанныеОбОплате.КурсВалютыВзаиморасчетов;
		
	КонецЦикла;
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	// Дополним таблицу суммовыми разницами
	РегистрыНакопления.РасчетыСКонтрагентами.СписатьСуммовыеРазницы(
		ДанныеОбОплате,
		РасчетыСКонтрагентами,
		СуммовыеРазницы,
		Истина);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	ДвиженияДокумента.Вставить("СуммовыеРазницы", СуммовыеРазницы);
	ДвиженияДокумента.Вставить("ВзаиморасчетыНаРасходы", ВзаиморасчетыНаРасходы);
	
КонецПроцедуры

Процедура СформироватьТаблицуДоходыИРасходы(ДвиженияДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.ДоговорВзаиморасчетов.ПодразделениеКомпании КАК ДоговорВзаиморасчетовПодразделениеКомпании
	|ИЗ
	|	Задолженность КАК Задолженность";
	
	ДанныеЗаполнения = Запрос.Выполнить().Выбрать();
	ДанныеЗаполнения.Следующий();
	
	ДоходыИРасходы = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("ДоходыИРасходы");
	
	СуммовыеРазницы = ПолучитьЗначениеПараметраСтруктуры(
		ДвиженияДокумента,
		"СуммовыеРазницы",
		Новый ТаблицаЗначений);
	
	РегистрыНакопления.ДоходыИРасходы.ЗаполнитьСуммовыеРазницы(
		ДанныеЗаполнения,
		СуммовыеРазницы,
		ДоходыИРасходы,
		ДанныеЗаполнения.ПодразделениеКомпании);
	
	Если Не БалансВедетсяПоПодразделениям(ДанныеЗаполнения.Дата) Тогда
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("ДоходыИРасходы", ДоходыИРасходы);
		Возврат;
	КонецЕсли;
	
	// доходы и расходы по взаиморасчетам
	ВзаиморасчетыНаРасходы = ПолучитьЗначениеПараметраСтруктуры(
		ДвиженияДокумента,
		"ВзаиморасчетыНаРасходы",
		Новый ТаблицаЗначений);
	
	Если ВзаиморасчетыНаРасходы.Количество() > 0 Тогда
		ВзаиморасчетыНаРасходы.Свернуть("Подразделение","Сумма");
		ПодразделениеДоговор =
			Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(
				ДанныеЗаполнения.ДоговорВзаиморасчетовПодразделениеКомпании,
				ДанныеЗаполнения.Дата);
		Для Каждого СтрокаВзаиморасчетов Из ВзаиморасчетыНаРасходы Цикл
			ПодразделениеВзаиморасчета =
				Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(
					СтрокаВзаиморасчетов.Подразделение,
					ДанныеЗаполнения.Дата);
			БалансовыеПодразделенияНеРавны = ПодразделениеДоговор <> ПодразделениеВзаиморасчета;
			
		Если БалансовыеПодразделенияНеРавны
			И СтрокаВзаиморасчетов.Сумма <> 0 Тогда
			НоваяЗапись = ДоходыИРасходы.Добавить();
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период = ДанныеЗаполнения.Дата;
			НоваяЗапись.Регистратор = ДанныеЗаполнения.Ссылка;
			НоваяЗапись.ПодразделениеКомпании = СтрокаВзаиморасчетов.Подразделение;
			НоваяЗапись.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			Если СтрокаВзаиморасчетов.Сумма < 0 Тогда
				НоваяЗапись.РасходУпр = -СтрокаВзаиморасчетов.Сумма;
			Иначе
				НоваяЗапись.ДоходУпр  = СтрокаВзаиморасчетов.Сумма;
			КонецЕсли;
			НоваяЗапись.ХозОперация = ДанныеЗаполнения.ХозОперация;
			НоваяЗапись.Активность = Истина; 
			
			НоваяЗапись = ДоходыИРасходы.Добавить();
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период = ДанныеЗаполнения.Дата;
			НоваяЗапись.Регистратор = ДанныеЗаполнения.Ссылка;
			НоваяЗапись.ПодразделениеКомпании = ДанныеЗаполнения.ДоговорВзаиморасчетовПодразделениеКомпании;
			НоваяЗапись.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			Если СтрокаВзаиморасчетов.Сумма < 0 Тогда
				НоваяЗапись.РасходУпр = -СтрокаВзаиморасчетов.Сумма;
			Иначе
				НоваяЗапись.ДоходУпр  = СтрокаВзаиморасчетов.Сумма;
			КонецЕсли;
			НоваяЗапись.ХозОперация = ДанныеЗаполнения.ХозОперация;
			НоваяЗапись.Активность = Истина;
		КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("ДоходыИРасходы", ДоходыИРасходы);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

