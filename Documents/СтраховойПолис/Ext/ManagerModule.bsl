// Модуль менеджера документа "Страховой полис"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используеся в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость выводв только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возращаемая сторка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить = ЛОЖЬ, ТолькоОсновныеКонтакты = ИСТИНА) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

// Функция проихводит посимвольный разбор даты на составные части и
// возвращает результат в виде структуры.
Функция РазобратьДатуВСтруктуру(ТекДата, КлючевоеИмя)
	Результат	= Новый Структура;
	
	Если НЕ ЗначениеЗаполнено(ТекДата) Тогда Возврат Результат; КонецЕсли;
	
	ТекЧас		= Час (ТекДата);
	ТекМинута	= Минута(ТекДата);
	ТекДень		= День(ТекДата);
	ТекМесяц	= Месяц(ТекДата);
	ТекГод		= Год(ТекДата);	
	
	Если ТекЧас>9 Тогда
		Результат.Вставить(КлючевоеИмя+"Ч1", Сред(ТекЧас,1,1));
		Результат.Вставить(КлючевоеИмя+"Ч2", Сред(ТекЧас,2,1));
	Иначе
		Результат.Вставить(КлючевоеИмя+"Ч1", "0");
		Результат.Вставить(КлючевоеИмя+"Ч2", Строка(ТекЧас));
	КонецЕсли;
	
	Если ТекМинута>9 Тогда
		Результат.Вставить(КлючевоеИмя+"Мин1", Сред(ТекМинута,1,1));
		Результат.Вставить(КлючевоеИмя+"Мин2", Сред(ТекМинута,2,1));
	Иначе
		Результат.Вставить(КлючевоеИмя+"Мин1", "0");
		Результат.Вставить(КлючевоеИмя+"Мин2", Строка(ТекМинута));
	КонецЕсли;
	
	Если ТекДень>9 Тогда
		Результат.Вставить(КлючевоеИмя+"Д1", Сред(ТекДень,1,1));
		Результат.Вставить(КлючевоеИмя+"Д2", Сред(ТекДень,2,1));
	Иначе
		Результат.Вставить(КлючевоеИмя+"Д1", "0");
		Результат.Вставить(КлючевоеИмя+"Д2", Строка(ТекДень));
	КонецЕсли;
	
	Если ТекМесяц>9 Тогда
		Результат.Вставить(КлючевоеИмя+"М1", Сред(ТекМесяц,1,1));
		Результат.Вставить(КлючевоеИмя+"М2", Сред(ТекМесяц,2,1));
	Иначе
		Результат.Вставить(КлючевоеИмя+"М1", "0");
		Результат.Вставить(КлючевоеИмя+"М2", Строка(ТекМесяц));
	КонецЕсли;
	
	Результат.Вставить(КлючевоеИмя+"Г1", Сред(ТекГод,4,1));
	Результат.Вставить(КлючевоеИмя+"Г2", Сред(ТекГод,5,1));	
	
	Возврат Результат;
КонецФункции

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("Страхователь");
	ОбязательныеРеквизиты.Добавить("Страховщик");
	ОбязательныеРеквизиты.Добавить("ПрограммаСтрахования");
	ОбязательныеРеквизиты.Добавить("ДатаВыдачи");
	ОбязательныеРеквизиты.Добавить("НомерПолиса");
	ОбязательныеРеквизиты.Добавить("НомерКвитанции");
	ОбязательныеРеквизиты.Добавить("ДокументОснование");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеЛицаДопущенныеКУправлениюТС = Новый Массив();
	УникальныеЛицаДопущенныеКУправлениюТС.Добавить("ЛицоДопущенное");
	УникальныеЛицаДопущенныеКУправлениюТС.Добавить("ВодительскоеУдостоверение");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("ЛицаДопущенныеКУправлениюТС", УникальныеЛицаДопущенныеКУправлениюТС);
	
	 // Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Объект.ВалютаДокумента       = Объект.ДокументОснование.ВалютаДокумента;
		Объект.Автор                 = Объект.ДокументОснование.Автор;
		Объект.КурсДокумента         = Объект.ДокументОснование.КурсДокумента;
		Объект.КурсВалютыУпр         = Объект.ДокументОснование.КурсВалютыУпр;
		Объект.ПодразделениеКомпании = Объект.ДокументОснование.ПодразделениеКомпании;
		Объект.Организация           = Объект.ДокументОснование.Организация;
		Объект.Проект                = Объект.ДокументОснование.Проект;
		Объект.Страхователь          = Объект.ДокументОснование.Страхователь;
		СтраховательПриИзменении(Объект, ПараметрыДействия);
		
		// Воспользуемся первой строкой вариантов страхования из основания
		Для Каждого ТекСтрока Из Объект.ДокументОснование.ВариантыСтрахования Цикл
			Если ТипЗнч(ТекСтрока.ОбъектСтрахования)=Тип("СправочникСсылка.Модели") Тогда
				Объект.ТранспортноеСредство = ТекСтрока.ОбъектСтрахования;
				ТранспортноеСредствоПриИзменении(Объект, ПараметрыДействия);
			КонецЕсли;
			Объект.ВидСтрахования       = ТекСтрока.ВидСтрахования;
			Объект.ПрограммаСтрахования = ТекСтрока.ПрограммаСтрахования;
			Объект.Страховщик           = ТекСтрока.Страховщик;
			Объект.СуммаПремии          = ТекСтрока.СуммаПремии;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	//// Вызываем общий обработчик события
	//ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Страхователь".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СтраховательПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Страхователь) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СобственникТС) Тогда
			Объект.СобственникТС = Объект.Страхователь;
		КонецЕсли;
		
		Если Объект.ЛицаДопущенныеКУправлениюТС.Количество() = 0 Тогда
			НоваяСтрока = Объект.ЛицаДопущенныеКУправлениюТС.Добавить();
			НоваяСтрока.ЛицоДопущенное = Объект.Страхователь;
			
			Если ЗначениеЗаполнено(Объект.СобственникТС) И Объект.СобственникТС <> Объект.Страхователь Тогда
				НоваяСтрока = Объект.ЛицаДопущенныеКУправлениюТС.Добавить();
				НоваяСтрока.ЛицоДопущенное = Объект.СобственникТС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СтраховательПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Транспортное средство".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТранспортноеСредствоПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Автомобиль) И Объект.Автомобиль.Модель <> Объект.ТранспортноеСредство Тогда
		Объект.Автомобиль = Справочники.Автомобили.ПустаяСсылка();
		АвтомобильПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // ТранспортноеСредствоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автомобиль".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобильПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		Объект.ТранспортноеСредство = Объект.Автомобиль.Модель;
	КонецЕсли;
	
КонецПроцедуры // АвтомобильПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Программа страхования".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПрограммаСтрахованияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.ПрограммаСтрахования) Тогда
		Объект.ВидСтрахования = Объект.ПрограммаСтрахования.ВидСтрахования;
	КонецЕсли;
	
КонецПроцедуры // ПрограммаСтрахованияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Вид страхования".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВидСтрахованияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.ВидСтрахования) И
		ЗначениеЗаполнено(Объект.ПрограммаСтрахования) И
		Объект.ПрограммаСтрахования.ВидСтрахования <> Объект.ВидСтрахования Тогда
		Объект.ПрограммаСтрахования = Справочники.ПрограммыСтрахования.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // ВидСтрахованияПриИзменении()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	Если ПраваИНастройкиПользователя.Значение("ЗапросВалютыПечатногоДокумента") Тогда
		УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
			"Документ.СтраховойПолис",
			"КвитанцияНаПолучениеСтраховойПремии",
			НСтр("ru = 'Квитанция на получение страховой премии'"),
			СсылкаНаДокумент,
			"УправлениеПечатьюАвтосалонКлиент.НачатьВыборВалютыДляПечати");
		УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
			"Документ.СтраховойПолис",
			"СтраховойПолис",
			НСтр("ru = 'Страховой полис'"),
			СсылкаНаДокумент,
			"УправлениеПечатьюАвтосалонКлиент.НачатьВыборВалютыДляПечати");
	Иначе
		УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
			"Документ.СтраховойПолис",
			"КвитанцияНаПолучениеСтраховойПремии",
			НСтр("ru = 'Квитанция на получение страховой премии'"),
			СсылкаНаДокумент);
		УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
			"Документ.СтраховойПолис",
			"СтраховойПолис",
			НСтр("ru = 'Страховой полис'"),
			СсылкаНаДокумент);
	КонецЕсли;

КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КвитанцияНаПолучениеСтраховойПремии") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"КвитанцияНаПолучениеСтраховойПремии",
															"Квитанция на получение страховой премии",
															ПечатьКвитанцияНаПолучениеСтраховойПремии(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СтраховойПолис") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"СтраховойПолис",
															"Страховой полис",
															ПечатьСтраховойПолис(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
															
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "Квитанция на получение страховой премии"
// Возвращает сформированный табличный документ:
Функция ПечатьСтраховойПолис(МассивОбъектов, ОбъектыПечати, ПараметрыПечати=Неопределено) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СтраховойПолис_СтраховойПолис";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// валюта печати	
		ВалютаПечатногоДокумента = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПечати,
			"ВалютаПечатногоДокумента",
			Документ.ВалютаДокумента);
		
		КоэффициентПересчета = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(1, Документ.ВалютаДокумента, Документ.КурсДокумента, ВалютаПечатногоДокумента, Документ.Дата);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СтраховойПолис.ПФ_MXL_СтраховойПолис");
		
		ОбластьШапка			= Макет.ПолучитьОбласть("Шапка");
		ОбластьШапкаТаблицы		= Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрока			= Макет.ПолучитьОбласть("Строка");
		ОбластьПодвал			= Макет.ПолучитьОбласть("Подвал");
		
		// дата документа
		ДатаДокумента = Документ.Дата;
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		
		СтруктураШапки	= Новый Структура();
		СтруктураШапки.Вставить(
			"НаименованиеПоставщика",
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры)
		);
		СтруктураШапки.Вставить("СерияПолиса", Документ.СерияПолиса);
		СтруктураШапки.Вставить("НомерПолиса", Документ.НомерПолиса);
		
		// Посимвольный вывод даты начала и окончания страхования
		Если ЗначениеЗаполнено(Документ.ДатаНачалаСтрахования) И
			ЗначениеЗаполнено(Документ.ДатаОкончанияСтрахования)Тогда
			// Дата начала страхования
			СтруктураДаты	= РазобратьДатуВСтруктуру(Документ.ДатаНачалаСтрахования, "ДатаНачалаСтрахования");
			Для Каждого ТекСтрока Из СтруктураДаты Цикл
				СтруктураШапки.Вставить(ТекСтрока.Ключ, ТекСтрока.Значение);
			КонецЦикла;
			// Дата окончания страхования
			СтруктураДаты	= РазобратьДатуВСтруктуру(Документ.ДатаОкончанияСтрахования, "ДатаОкончанияСтрахования");
			Для Каждого ТекСтрока Из СтруктураДаты Цикл
				СтруктураШапки.Вставить(ТекСтрока.Ключ, ТекСтрока.Значение);
			КонецЦикла;
		КонецЕсли;
		
		// Посимвольный вывод дат использования ТС
		Если ЗначениеЗаполнено(Документ.ДатаНачалаИспользованияТС1) И
			ЗначениеЗаполнено(Документ.ДатаОкончанияИспользованияТС1) Тогда
			// Дата начала использования ТС
			СтруктураДаты	= РазобратьДатуВСтруктуру(Документ.ДатаНачалаИспользованияТС1, "ДатаНачалаИспользованияТС1");
			Для Каждого ТекСтрока Из СтруктураДаты Цикл
				СтруктураШапки.Вставить(ТекСтрока.Ключ, ТекСтрока.Значение);
			КонецЦикла;
			// Дата окончания использования ТС
			СтруктураДаты	= РазобратьДатуВСтруктуру(Документ.ДатаОкончанияИспользованияТС1, "ДатаОкончанияИспользованияТС1");
			Для Каждого ТекСтрока Из СтруктураДаты Цикл
				СтруктураШапки.Вставить(ТекСтрока.Ключ, ТекСтрока.Значение);
			КонецЦикла;
		КонецЕсли;
		
		// Посимвольный вывод дат использования ТС
		Если ЗначениеЗаполнено(Документ.ДатаНачалаИспользованияТС2) И
			ЗначениеЗаполнено(Документ.ДатаОкончанияИспользованияТС2) Тогда
			// Дата начала использования ТС
			СтруктураДаты	= РазобратьДатуВСтруктуру(Документ.ДатаНачалаИспользованияТС2, "ДатаНачалаИспользованияТС2");
			Для Каждого ТекСтрока Из СтруктураДаты Цикл
				СтруктураШапки.Вставить(ТекСтрока.Ключ, ТекСтрока.Значение);
			КонецЦикла;
			// Дата окончания использования ТС
			СтруктураДаты	= РазобратьДатуВСтруктуру(Документ.ДатаОкончанияИспользованияТС2, "ДатаОкончанияИспользованияТС2");
			Для Каждого ТекСтрока Из СтруктураДаты Цикл
				СтруктураШапки.Вставить(ТекСтрока.Ключ, ТекСтрока.Значение);
			КонецЦикла;
		КонецЕсли;
		
		// Посимвольный вывод дат использования ТС
		Если ЗначениеЗаполнено(Документ.ДатаНачалаИспользованияТС3) И
			ЗначениеЗаполнено(Документ.ДатаОкончанияИспользованияТС3) Тогда
			// Дата начала использования ТС
			СтруктураДаты	= РазобратьДатуВСтруктуру(Документ.ДатаНачалаИспользованияТС3, "ДатаНачалаИспользованияТС3");
			Для Каждого ТекСтрока Из СтруктураДаты Цикл
				СтруктураШапки.Вставить(ТекСтрока.Ключ, ТекСтрока.Значение);
			КонецЦикла;
			// Дата окончания использования ТС
			СтруктураДаты	= РазобратьДатуВСтруктуру(Документ.ДатаОкончанияИспользованияТС3, "ДатаОкончанияИспользованияТС3");
			Для Каждого ТекСтрока Из СтруктураДаты Цикл
				СтруктураШапки.Вставить(ТекСтрока.Ключ, ТекСтрока.Значение);
			КонецЦикла;		
		КонецЕсли;	
		
		СтруктураШапки.Вставить("Страхователь",			Документ.Страхователь);
		СтруктураШапки.Вставить("СобственникТС",		Документ.СобственникТС);
		СтруктураШапки.Вставить("ТранспортноеСредство",	Документ.ТранспортноеСредство);
		Если ЗначениеЗаполнено(Документ.Автомобиль) Тогда
			ГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Документ.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер);
			ПТС      = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Документ.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ТехПаспорт);
			СтруктураШапки.Вставить("ГосНомер",			ГосНомер);
			Если НЕ ПустаяСтрока(Документ.Автомобиль.VIN) Тогда
				СтрокаДляРазбора	= СокрЛП(Документ.Автомобиль.VIN);
				Счетчик	= 1;
				ДлинаСтрокиРазбора	= СтрДлина(СтрокаДляРазбора);
				Для Индекс=1 По ДлинаСтрокиРазбора Цикл
					// Не может быть больше 17 символов
					Если Счетчик=18 Тогда Прервать; КонецЕсли;
					
					ТекСимвол	= Сред(СтрокаДляРазбора, Индекс, 1);
					СтруктураШапки.Вставить("VIN"+Индекс,	ТекСимвол);
					Счетчик	= Счетчик+1;
				КонецЦикла;
			КонецЕсли;
			Если ЗначениеЗаполнено(ПТС) Тогда
				СтруктураШапки.Вставить("ВидПТС",	ПТС.ВидПодтверждающегоДокумента);
				СтруктураШапки.Вставить("СерияПТС",	ПТС.Серия);
				СтруктураШапки.Вставить("НомерПТС",	ПТС.Номер);
			КонецЕсли;
		КонецЕсли;
		
		Если Документ.ВидДействияДоговора=1 Тогда
			СтруктураШапки.Вставить("ВидДействияДоговора1",	"Х");
			СтруктураШапки.Вставить("ВидДействияДоговора2",	"");
		Иначе
			СтруктураШапки.Вставить("ВидДействияДоговора1",	"");
			СтруктураШапки.Вставить("ВидДействияДоговора2",	"Х");
		КонецЕсли;
		
		ОбластьШапка.Параметры.Заполнить(СтруктураШапки);
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// сразу два, т.к. выводим на второй странице только
		НомерСтраницы		= 2;
		НомерСтраницыПред	= НомерСтраницы;
		Счетчик				= 0;
		СтруктураИтоговПоСтранице	= Новый Структура();
		
		// перебор строк
		ВыборкаТабличнойЧасти = Документ.ЛицаДопущенныеКУправлениюТС;
		Для Каждого СтрокаТабличнойЧасти Из ВыборкаТабличнойЧасти Цикл
			Счетчик	= Счетчик + 1;
			
			// заполняем данные строки
			СтруктураСтроки = Новый Структура();
			СтруктураСтроки.Вставить("Номер",	Счетчик);
			СтруктураСтроки.Вставить("ЛицоДопущенное", СтрокаТабличнойЧасти.ЛицоДопущенное);
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВодительскоеУдостоверение) Тогда
				Удостоверение	= СтрокаТабличнойЧасти.ВодительскоеУдостоверение;
				СерияНомер		= Удостоверение.Серия+" "+Удостоверение.Номер;
				СтруктураСтроки.Вставить("ВодительскоеУдостоверение",	СерияНомер);
			КонецЕсли;
			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			
			// выводим строку, делая проверку попадания на лист
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока, ОбластьШапкаТаблицы, ,
			НомерСтраницы, СтруктураИтоговПоСтранице, Документ, мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				НомерСтраницыПред = НомерСтраницы; 
			КонецЕсли;
		КонецЦикла;
		
		// На странице должно быть как минимум 5 строк
		Если Счетчик<5 Тогда
			ЧислоЦиклов	= 5-Счетчик;
			Для Индекс=1 По ЧислоЦиклов Цикл
				ОбластьСтрока.Параметры.Номер		= "";
				ОбластьСтрока.Параметры.ЛицоДопущенное	= "";
				ОбластьСтрока.Параметры.ВодительскоеУдостоверение	= "";
				ТабличныйДокумент.Вывести(ОбластьСтрока);
			КонецЦикла;
		КонецЕсли;
		
		СтруктураПодвала	= Новый Структура();
		СуммаПремии = Формат(Документ.СуммаПремии * КоэффициентПересчета, ?(НЕ ПустаяСтрока(ФорматВыводаСуммы),ФорматВыводаСуммы,ФорматВыводаСуммы + "ЧДЦ=2; ЧН=0,00"));
		СтруктураПодвала.Вставить("СуммаПремии",			СуммаПремии);
		СтруктураПодвала.Вставить("СуммаПремииПрописью",	РаботаСКурсамиВалют.СформироватьСуммуПрописью(Документ.СуммаПремии*КоэффициентПересчета, ВалютаПечатногоДокумента));
		ТекстВалютыПД = РаботаСКурсамиВалют.СформироватьСуммуПрописью(Цел(Документ.СуммаПремии*КоэффициентПересчета), ВалютаПечатногоДокумента, Истина);
		ТекстВалютыПД = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ТекстВалютыПД, " ");
		СтруктураПодвала.Вставить("ВалютаПечатногоДокумента", ТекстВалютыПД[ТекстВалютыПД.Количество()-1]);
		
		ДатаДляВывода	= Документ.Дата;
		Если ЗначениеЗаполнено(ДатаДляВывода) Тогда
			ТекДень  = День(ДатаДляВывода);
			ТекМесяц = Месяц(ДатаДляВывода);
			ТекГод   = Год(ДатаДляВывода);
			
			СтруктураПодвала.Вставить("ДеньЗаключения", Строка(ТекДень));
			СтруктураПодвала.Вставить("МесяцЗаключения", Строка(ТекМесяц));
			СтруктураПодвала.Вставить("ГодЗаключения", Сред(ТекГод,4));
		КонецЕсли;
		
		ДатаДляВывода	= Документ.ДатаВыдачи;
		Если ЗначениеЗаполнено(ДатаДляВывода) Тогда
			ТекДень  = День(ДатаДляВывода);
			ТекМесяц = Месяц(ДатаДляВывода);
			ТекГод   = Год(ДатаДляВывода);
			
			СтруктураПодвала.Вставить("ДеньПолиса", Строка(ТекДень));
			СтруктураПодвала.Вставить("МесяцПолиса", Строка(ТекМесяц));
			СтруктураПодвала.Вставить("ГодПолиса", Сред(ТекГод,4));
		КонецЕсли;		
		
		СтруктураПодвала.Вставить("ФИОСтраховщика", УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Страховщик));
		
		ОбластьПодвал.Параметры.Заполнить(СтруктураПодвала);
		ТабличныйДокумент.Вывести(ОбластьПодвал);	
		
		// Зададим параметры макета
		ТабличныйДокумент.ПолеСверху			= 10;
		ТабличныйДокумент.ПолеСлева				= 10;
		ТабличныйДокумент.ПолеСнизу				= 10;
		ТабличныйДокумент.ПолеСправа			= 10;
		ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
		ТабличныйДокумент.Автомасштаб			= Истина;
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "Страховой полис"
// Возвращает сформированный табличный документ:
Функция ПечатьКвитанцияНаПолучениеСтраховойПремии(МассивОбъектов, ОбъектыПечати, ПараметрыПечати=Неопределено) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СтраховойПолис_КвитанцияНаПолучениеСтраховойПремии";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Предварительные обработки данных	
		ВалютаПечатногоДокумента = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПечати,
			"ВалютаПечатногоДокумента", Документ.ВалютаДокумента);
			
		СуммаПремии = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Документ.СуммаПремии, Документ.ВалютаДокумента,
			Документ.КурсДокумента, ВалютаПечатногоДокумента, Документ.Дата);
		
		// Необходимо отдельно выводить целую часть суммы прописью без валюты и отдельно дробную.
		ДробнаяЧасть		= СуммаПремии - Цел(СуммаПремии);
		Если ДробнаяЧасть=0 Тогда
			ДробнаяЧасть	= "00";
		Иначе
			ДробнаяЧасть	= Сред(Формат(ДробнаяЧасть,"ЧДЦ=2"), 3);
		КонецЕсли;	
		СуммаПремииПрописью	= РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаПремии, ВалютаПечатногоДокумента);
		Позиция	= Найти(СуммаПремииПрописью, ДробнаяЧасть);
		Если Позиция > 0 Тогда
			СуммаПремииПрописью = Лев(СуммаПремииПрописью, Позиция - 2);
		КонецЕсли;
		Позиция = 0;
		Для Индекс=1 По СтрДлина(СуммаПремииПрописью)Цикл
			Если Сред(СуммаПремииПрописью, Индекс, 1) = " " Тогда
				Позиция = Индекс;
			КонецЕсли;
		КонецЦикла;
		Если Позиция > 0 Тогда
			СуммаПремииПрописью = Лев(СуммаПремииПрописью, Позиция-1);
		КонецЕсли;
		
		ДатаОплаты = Формат(Документ.Дата, "ДЛФ=DD");
		Позиция = Найти(ДатаОплаты, " ");
		Если Позиция > 0 Тогда
			ДатаОплаты = Сред(ДатаОплаты, Позиция + 1);
		КонецЕсли;
		
		// приступим к печати
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СтраховойПолис.ПФ_MXL_КвитанцияНаПолучениеСтраховойПремии");
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		НаименованиеПоставщика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		СтруктураШапки	= Новый Структура();
		СтруктураШапки.Вставить("НаименованиеПоставщика",		НаименованиеПоставщика);
		СтруктураШапки.Вставить("СерияКвитанции",				Документ.СерияКвитанции);
		СтруктураШапки.Вставить("НомерКвитанции",				Документ.НомерКвитанции);
		СтруктураШапки.Вставить("ПодразделениеКомпании",		Документ.ПодразделениеКомпании);
		СтруктураШапки.Вставить("СерияНомерСтраховогоПолиса",	"" + Документ.СерияПолиса + "  " + Документ.НомерПолиса);
		СтруктураШапки.Вставить("Страхователь",					Документ.Страхователь);
		Если ЗначениеЗаполнено(Документ.ПрограммаСтрахования) Тогда
			СтруктураШапки.Вставить("ВидСтрахования",			Документ.ПрограммаСтрахования.ВидСтрахования);
		КонецЕсли;
		ЭтоРубль = Найти(НРег(ВалютаПечатногоДокумента), "rub") > 0;
		СтруктураШапки.Вставить("ВалютаПечатногоДокумента",		?(ЭтоРубль, "руб.", ВалютаПечатногоДокумента));
		СтруктураШапки.Вставить("ВалютаПечатногоДокументаДробь", ?(ЭтоРубль, "коп.", ""));
		СтруктураШапки.Вставить("СуммаПремииЦелая",				СуммаПремииПрописью);
		СтруктураШапки.Вставить("СуммаПремииДробная",			ДробнаяЧасть);
		Если НЕ Документ.ОплатаКвитанцииКартой Тогда
			СтруктураШапки.Вставить("ОплатаНаличными",				"Х");
			СтруктураШапки.Вставить("ОплатаКарточкой",				"");
			СтруктураШапки.Вставить("СуммаПремииНаличнымиЦелая",	СуммаПремииПрописью);
			СтруктураШапки.Вставить("СуммаПремииНаличнымиДробная",	ДробнаяЧасть);
			СтруктураШапки.Вставить("СуммаПремииКартойЦелая",		"");
			СтруктураШапки.Вставить("СуммаПремииКартойДробная",		"");
		Иначе
			СтруктураШапки.Вставить("ОплатаНаличными",				"");
			СтруктураШапки.Вставить("ОплатаКарточкой",				"Х");
			СтруктураШапки.Вставить("СуммаПремииНаличнымиЦелая",	"");
			СтруктураШапки.Вставить("СуммаПремииНаличнымиДробная",	"");
			СтруктураШапки.Вставить("СуммаПремииКартойЦелая",		СуммаПремииПрописью);
			СтруктураШапки.Вставить("СуммаПремииКартойДробная",		ДробнаяЧасть);
		КонецЕсли;
		
		СтруктураШапки.Вставить("ДолжностьСтраховщика",	Документ.ДолжностьСтраховщика);
		
		СтруктураШапки.Вставить("Страховщик",					Документ.Страховщик);
		СтруктураШапки.Вставить("ДеньОплаты",					"""" + День(Документ.Дата) + """");
		СтруктураШапки.Вставить("ДатаОплаты",					ДатаОплаты);	
		
		ОбластьШапка.Параметры.Заполнить(СтруктураШапки);
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		// Зададим параметры макета
		ТабличныйДокумент.ПолеСверху			= 5;
		ТабличныйДокумент.ПолеСлева				= 5;
		ТабличныйДокумент.ПолеСнизу				= 5;
		ТабличныйДокумент.ПолеСправа			= 5;
		ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
		ТабличныйДокумент.Автомасштаб			= Ложь;
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьКвитанцияНаПолучениеСтраховойПремии()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.СтраховойПолис);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли