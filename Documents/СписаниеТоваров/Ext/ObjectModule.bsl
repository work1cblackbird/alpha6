// Модуль документа "Списание товаров"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)

	Если ЗначениеЗаполнено(ДанныеЗаполнения) И ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда	
		Если ДанныеЗаполнения.Свойство("ЗаполнениеИзКорзины") Тогда
			Для Каждого Строка Из ДанныеЗаполнения.Товары Цикл		
				НоваяСтрока 						   = Товары.Добавить();	
				НоваяСтрока.Номенклатура 			   = Строка.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
				НоваяСтрока.Количество 				   = Строка.Количество;
				НоваяСтрока.ЕдиницаИзмерения 		   = Строка.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент		 		   = Строка.Коэффициент;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьРеквизит(ДанныеЗаполнения, "ХозОперация") Тогда
		
		Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.РасходныйСкладскойОрдер Тогда
			Для Каждого СтрТовар Из Товары Цикл
				Документы.СписаниеТоваров.ТоварыКоличествоПриИзменении(ЭтотОбъект, СтрТовар);
			КонецЦикла;
		КонецЕсли;
		
		Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПеремещениеТоваровИзФилиала
			И ЕстьРеквизит(ДанныеЗаполнения, "СкладПолучатель") Тогда
			СкладКомпании = ДанныеЗаполнения.СкладПолучатель;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ХозОперация = Справочники.ХозОперации.СписаниеТоваровОтданныхНаКомиссию 
		ИЛИ БалансВедетсяПоПодразделениям(ТекущаяДатаСеанса()) Тогда
		
		ПодразделениеЗатрат = Справочники.ПодразделенияКомпании.ПустаяСсылка();
	Иначе
		ПодразделениеЗатрат = ПодразделениеКомпании;
	КонецЕсли; 
	
	Для Каждого Строка Из Товары Цикл
		Строка.ИдентификаторТовара = Новый УникальныйИдентификатор;
	КонецЦикла;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	КодыМаркировки.Очистить();
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МаркировкаТоваровСервер.ПроверкаКодовМаркировкиПередЗаписью(ЭтотОбъект);
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ПроверитьКорректностьТоваровКомиссионныхДокументов(ЭтотОбъект, Отказ);
	
	МаркировкаТоваровСервер.ПроверитьЗаполнениеКодовМаркировки(ЭтотОбъект, Отказ);
	УчетПрослеживаемыхТоваровСервер.ПроверитьЗаполнениеРНПТПрослеживаемогоТовара(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Произведем очистку не использующихся в текущем контексте реквизитов
	ОбработкаСобытийДокументаСервер.ОчиститьПолеЦенаРозничнаяДляНеРозничныхСкладов(ЭтотОбъект, СкладКомпании);
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоЗаказамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПартиямПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Произведем перерасчет итоговой суммы документа
	ОбработкаСобытийДокументаСервер.ПересчитатьСуммуДокументаПоСебестоимостиСписания(ЭтотОбъект, Отказ, , , Истина);
	
	// Удалим введенные в оборот коды маркировки
	НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
	НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейСостоянияКодовМаркировки.ОтменаПроведения();
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ХозОперация = Справочники.ХозОперации.СписаниеТоваров
		ИЛИ ХозОперация = Справочники.ХозОперации.СписаниеВПроизводство Тогда
		// Спишем товар со склада
		РезультатЗапросаПоТоварам = ПолучитьРезультатЗапросаПоТоварам(ЭтотОбъект);
		НаборЗаписейОстатки = Движения.ОстаткиТоваровКомпании;
		НаборЗаписейОстатки.ДокументОбъект            = ЭтотОбъект;
		НаборЗаписейОстатки.СкладКомпании             = СкладКомпании;
		НаборЗаписейОстатки.ДвиженияПоРознице         = СкладКомпании.Розничный;
		НаборЗаписейОстатки.Резервировать             = Истина;
		НаборЗаписейОстатки.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам;
		
		Если НЕ НаборЗаписейОстатки.Расход() Тогда
			Отказ = Истина;
			Возврат; // дальше смысла не имеет
		КонецЕсли;
		
		// Снимаем резервы по заказам (если таковые были)
		НаборЗаписейЗаказыПокупателей = Движения.ЗаказыПокупателей;
		НаборЗаписейЗаказыПокупателей.РежимПроведения = РежимПроведения;
		НаборЗаписейЗаказыПокупателей.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейЗаказыПокупателей.РезультатЗапросаПоТоварам = НаборЗаписейОстатки.Выгрузить();
		НаборЗаписейЗаказыПокупателей.СкладКомпании = СкладКомпании;
		Если НЕ НаборЗаписейЗаказыПокупателей.СнятиеРезервовЗаказовПокупателей() Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// двигаем границу последовательности заказов
	Если ХозОперация = Справочники.ХозОперации.СписаниеТоваров
		ИЛИ ХозОперация = Справочники.ХозОперации.СписаниеВПроизводство Тогда
		РаботаСГраницами.СдвинутьГраницуЗаказов(Ссылка, ДополнительныеСвойства, Движения);
	КонецЕсли;
	
	// проведем партии товаров
	Если НЕ ПровестиПоПартиям(РежимПроведения, Ссылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Изменим состояние маркировки
	НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
	НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейСостоянияКодовМаркировки.Организация = Организация;
	НаборЗаписейСостоянияКодовМаркировки.ПроверятьВыводИзОборота = Истина;
	НаборЗаписейСостоянияКодовМаркировки.Состояние =
		Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаВРезультатеСписания;
	НаборЗаписейСостоянияКодовМаркировки.РежимПроведения = РежимПроведения;
	Если НЕ НаборЗаписейСостоянияКодовМаркировки.СостояниеКодовМаркировки() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Проверим налиие прослеживаемых товаров, которые были реализованы
	Если НЕ Отказ Тогда
		Движения.ПартииТоваровКомпании.Записать();
		Движения.ГТДПартийТоваровКомпании.Записать();
	КонецЕсли;
	ТаблицаПрослеживаемыхТоваров = Документы.СписаниеТоваров.ОперацииСПрослеживаемымиТоварами(
		ЭтотОбъект);
	НаборЗаписейОперацииПрослеживаемости = Движения.ОперацииПрослеживаемыхТоваров;
	НаборЗаписейОперацииПрослеживаемости.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейОперацииПрослеживаемости.ТаблицаПрослеживаемыхТоваров = ТаблицаПрослеживаемыхТоваров;
	Если НЕ НаборЗаписейОперацииПрослеживаемости.ДобавитьОперациюПрослеживаемости() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Если НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Произведем перерасчет итоговой суммы документа
	ИмяРегистра = ?(
		ХозОперация = Справочники.ХозОперации.СписаниеТоваровОтданныхНаКомиссию,
		"ПартииТоваровОтданные",
		"ПартииТоваровКомпании"
	);
	ОбработкаСобытийДокументаСервер.ПересчитатьСуммуДокументаПоСебестоимостиСписания(ЭтотОбъект, Отказ, ИмяРегистра);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании справочника "Контрагенты"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Контрагенты(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производится проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Заполняем специфические для данной операции реквизиты
	ХозОперация = Справочники.ХозОперации.СписаниеТоваровОтданныхНаКомиссию;
	Документы.СписаниеТоваров.ХозОперацияПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Контрагенты()

// Производит заполнение объекта на основании документа "Поступление товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.УслугиСтороннихОрганизаций
		ИЛИ ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.УслугиПоСубподряду Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ввод документа ""Списание товаров"" на основании документа ""Поступление товаров"" с хоз.операцией <%1> запрещен.'"),
			ДанныеЗаполнения.ХозОперация);
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;

	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваров 
		ИЛИ ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия 
		ИЛИ ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПоступлениеБезвозмездное 
		ИЛИ ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ВводОстатковТоваров
		ИЛИ ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ВводОстатковТоваровПринятыхНаКомиссию Тогда
		
		ХозОперация = Справочники.ХозОперации.СписаниеТоваров;
		Документы.СписаниеТоваров.ЗаполнитьТоварыОстатками(ЭтотОбъект, ДанныеЗаполнения);
		
	ИначеЕсли ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ВводОстатковТоваровПереданныхНаКомиссию Тогда
		
		ХозОперация = Справочники.ХозОперации.СписаниеТоваровОтданныхНаКомиссию;
		Документы.СписаниеТоваров.ЗаполнитьТоварыОстатками(ЭтотОбъект, ДанныеЗаполнения);
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеТоваров()

// Производит заполнение объекта на основании документа "Ввод остатков товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВводОстатковТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ВводОстатковТоваровПринятыхИПроданных Тогда 	
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ввод документа ""Списание товаров"" на основании документа ""Ввод остатков товаров"" с хоз.операцией <%1> запрещен.'"),
			ДанныеЗаполнения.ХозОперация);
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
		Возврат ЛОЖЬ;
	КонецЕсли;

	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваров 
		ИЛИ ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия 
		ИЛИ ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПоступлениеБезвозмездное 
		ИЛИ ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ВводОстатковТоваров
		ИЛИ ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ВводОстатковТоваровПринятыхНаКомиссию Тогда
		
		ХозОперация = Справочники.ХозОперации.СписаниеТоваров;
		Документы.СписаниеТоваров.ЗаполнитьТоварыОстатками(ЭтотОбъект, ДанныеЗаполнения);
		
	ИначеЕсли ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ВводОстатковТоваровПереданныхНаКомиссию Тогда
		
		ХозОперация = Справочники.ХозОперации.СписаниеТоваровОтданныхНаКомиссию;
		Документы.СписаниеТоваров.ЗаполнитьТоварыОстатками(ЭтотОбъект, ДанныеЗаполнения);
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ВводОстатковТоваров()

// Производит заполнение объекта на основании документа "Заказ-наряда"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаряд(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Товары.Свернуть(
		"Номенклатура,ЕдиницаИзмерения,Коэффициент,ХарактеристикаНоменклатуры,ДокументПередачи,Партия,ГТД,ЦенаРозничная,Ячейка",
		"Количество,СуммаРозничная"
	);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ВводОстатковТоваров()

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// У нас не стандартная таблица, поэтому сформирует свой результат запроса по товарам.
//
// Параметры:
//  ШапкаДокумента - выборка.
//
Функция ПолучитьРезультатЗапросаПоТоварам(ШапкаДокумента)
    ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
                 |	СписаниеТоваровТовары.Номенклатура КАК Номенклатура,
                 |	СписаниеТоваровТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
                 |	СписаниеТоваровТовары.ДокументПередачи КАК ДокументПередачи,
                 |	СписаниеТоваровТовары.Партия КАК Партия,
                 |	СписаниеТоваровТовары.ГТД КАК ГТД,
                 |	СписаниеТоваровТовары.ЦенаРозничная КАК ЦенаРозничная,
                 |	СписаниеТоваровТовары.Количество * СписаниеТоваровТовары.Коэффициент КАК Количество
                 |ИЗ
                 |	Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
                 |ГДЕ
                 |	СписаниеТоваровТовары.Ссылка = &Ссылка";

	Запрос=Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",ШапкаДокумента.Ссылка);
	Запрос.Текст=ТекстЗапроса;

	Возврат Запрос.Выполнить();
КонецФункции // ПолучитьРезультатЗапросаПоТоварам()

// возвращает выборку по шапке
//
// Параметры:
//  ДокументСсылка - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Выборка - выборка по шапке
//
Функция ПолучитьШапкуДокумента(ДокументСсылка) Экспорт
	Запрос=Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка          КАК Ссылка,
	|	Док.Дата            КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента   КАК КурсДокумента,
	|	Док.ТипЦен          КАК ТипЦен,
	|	Док.ХозОперация     КАК ХозОперация,
	|	Док.КурсВалютыУпр   КАК КурсВалютыУпр,
	|	Док.МоментВремени   КАК МоментВремени,
	|	Док.Организация     КАК Организация,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Док.Проект КАК Проект,
	/////////// ПРИВАТ ////////////
	|	Док.СкладКомпании               КАК СкладКомпании,
	|	Док.СкладКомпании.ПодразделениеКомпании КАК ПодразделениеСклада,	
	|	Док.ПодразделениеЗатрат			КАК ПодразделениеЗатрат,	
	|	Док.Контрагент                  КАК Контрагент,
	|	Док.ДоговорВзаиморасчетов       КАК ДоговорВзаиморасчетов,
	|	Док.ДоговорВзаиморасчетов.ПодразделениеКомпании КАК ПодразделениеДоговора, 
	|	Док.ДокументОснование           КАК ДокументОснование,
	|	Док.СтатьяСписанияТМЦ           КАК СтатьяСписанияТМЦ
	|
	|ИЗ
	|	Документ."+Метаданные().Имя+" КАК Док
	|
	|ГДЕ
	|	Док.Ссылка=&Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции // ПолучитьШапкуДокумента()

// формирует движения документа по партионным регистрам
//
// Параметры:
//  Режим           - режим проведения (оперативный/неоперативный)
//  ДокументСсылка  - ссылка на документ который надо допровести по партиям.
//
// Возвращаемое значение:
//  Возвращает Истина - все ОК, ложь - чего-то не так.
//
Функция ПровестиПоПартиям(Режим,ДокументСсылка) Экспорт
	Отказ=Ложь;
	
	// получим шапку документа
	ШапкаДокумента=ПолучитьШапкуДокумента(ДокументСсылка);
	
	// определим способ ведения баланса
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
	
	// Проверим, если подразделение проводиться по партиям "отложенно", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям=Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
		Возврат НЕ Отказ;
	КонецЕсли;
	
		// проверяем, присутствуют ли партии в табличной части
	ЕстьПартии = Ложь;
	Для Каждого СтрокаТовар Из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовар.Партия) Тогда
			ЕстьПартии = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// У нас не стандартная таблица, поэтому сформирует свой результат запроса по товарам.
	РезультатЗапросаПоТоварам=ПолучитьРезультатЗапросаПоТоварам(ШапкаДокумента);
	// определим вид проводки
	Если ШапкаДокумента.ХозОперация=Справочники.ХозОперации.СписаниеТоваров
		ИЛИ ШапкаДокумента.ХозОперация=Справочники.ХозОперации.СписаниеВПроизводство Тогда
		// списываем
		НаборЗаписейПартии=Движения.ПартииТоваровКомпании;
		НаборЗаписейПартии.ДокументОбъект       = ЭтотОбъект;
		НаборЗаписейПартии.СкладКомпании        = ШапкаДокумента.СкладКомпании;
		НаборЗаписейПартии.Организация          = ШапкаДокумента.Организация;
		НаборЗаписейПартии.ИмяРеквизитаДокумент = ?(ЕстьПартии,"Партия","");
		НаборЗаписейПартии.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам;
		НаборЗаписейПартии.ШапкаДокумента            = ШапкаДокумента;
		Отказ=НЕ НаборЗаписейПартии.Расход() ИЛИ Отказ;
		Если НЕ Отказ Тогда НаборЗаписейПартии.Записать(); КонецЕсли; 
		
		// Доходы и расходы. Только по собственному товару.
		СуммаУпрИтого   = 0;
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("СтатусПартии", Перечисления.СтатусыПартий.ТоварКупленный);
		МассивСтрок = НаборЗаписейПартии.Выгрузить().НайтиСтроки(СтруктураПоиска);
		Для каждого ТекСтрока Из МассивСтрок Цикл  	
			СуммаУпрИтого = СуммаУпрИтого + ТекСтрока.СуммаУпр;
		КонецЦикла;
		
		Если СуммаУпрИтого<>0 Тогда
			НаборЗаписейДиР 			   = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
			Если ВедетсяБалансПоПодразделению Тогда
				НаборЗаписейДиР.Подразделение = ШапкаДокумента.ПодразделениеСклада;
			Иначе 
				НаборЗаписейДиР.Подразделение = ШапкаДокумента.ПодразделениеЗатрат;
			КонецЕсли;
			НаборЗаписейДиР.СтатьяДоходовИРасходов	= ШапкаДокумента.СтатьяСписанияТМЦ;
			НаборЗаписейДиР.ВУпрВалюте				= Истина;
			НаборЗаписейДиР.Расход					= СуммаУпрИтого;
			НаборЗаписейДиР.ШапкаДокумента			= ШапкаДокумента;
			Отказ=НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;
		
		// Зачитываем принятые на реализацию товары, которые были списаны
		НаборЗаписейРеализованныеТовары=Движения.РеализованныеТовары;
		НаборЗаписейРеализованныеТовары.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейРеализованныеТовары.Списание=Истина;
		НаборЗаписейРеализованныеТовары.РезультатЗапросаПоТоварам=РезультатЗапросаПоТоварам;
		НаборЗаписейРеализованныеТовары.ШапкаДокумента=ШапкаДокумента;
		Отказ=НЕ НаборЗаписейРеализованныеТовары.Приход() ИЛИ Отказ;
		
		// подготовим таблицу движений в разрезе подразделений комиссионных товаров
		ТаблицаСписанийПартийРеализованных = Движения.РеализованныеТовары.Выгрузить();
		ТаблицаСписанийПартийРеализованных.Свернуть("ДоговорВзаиморасчетов","СуммаУпр");
		
		ТаблицаСписанийПартийРеализованных.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
		Для Каждого СтрокаСписания Из ТаблицаСписанийПартийРеализованных Цикл
			СтрокаСписания.Подразделение = СтрокаСписания.ДоговорВзаиморасчетов.ПодразделениеКомпании;
		КонецЦикла;	
		ТаблицаСписанийПартийРеализованных.Свернуть("Подразделение","СуммаУпр");
		
		// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
		Если ВедетсяБалансПоПодразделению Тогда
			Для Каждого СтрокаСписания Из ТаблицаСписанийПартийРеализованных Цикл
				НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
				НаборЗаписейДоходыИРасходы.ДокументОбъект = ЭтотОбъект;
				НаборЗаписейДоходыИРасходы.Подразделение  = СтрокаСписания.Подразделение;
				НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.Себестоимость;
				НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
				НаборЗаписейДоходыИРасходы.Расход                 = СтрокаСписания.СуммаУпр;
				НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
				Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
			КонецЦикла;
		Иначе
			НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.Себестоимость;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
			НаборЗаписейДоходыИРасходы.Расход                 = ТаблицаСписанийПартийРеализованных.Итог("СуммаУпр");
			НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
			Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		КонецЕсли;
	Иначе
		// списываем товары отданные на комиссию
		НаборЗаписейПартииОтданные = Движения.ПартииТоваровОтданные;
		НаборЗаписейПартииОтданные.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейПартииОтданные.Контрагент     = ШапкаДокумента.Контрагент;
		НаборЗаписейПартииОтданные.ДоговорВзаиморасчетов     = ШапкаДокумента.ДоговорВзаиморасчетов;
		НаборЗаписейПартииОтданные.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам;
		НаборЗаписейПартииОтданные.ШапкаДокумента            = ШапкаДокумента;
		Отказ=НЕ НаборЗаписейПартииОтданные.Расход() ИЛИ Отказ;
		Если НЕ Отказ Тогда НаборЗаписейПартииОтданные.Записать(); КонецЕсли; 
		
		// 3. Доходы и расходы
		ТаблицаЗначений = НаборЗаписейПартииОтданные.Выгрузить();
		ТаблицаЗначений.Свернуть("ВидДвижения","СуммаСебестоимостиУпр");
		
		СтрокаТЗ = ТаблицаЗначений.Найти(ВидДвиженияНакопления.Расход,"ВидДвижения");
		Если СтрокаТЗ <> Неопределено Тогда
			НаборЗаписейДиР 						= Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект 			= ЭтотОбъект;
			// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
			Если ВедетсяБалансПоПодразделению Тогда
				НаборЗаписейДиР.Подразделение       = ШапкаДокумента.ПодразделениеДоговора;
			КонецЕсли;
			НаборЗаписейДиР.СтатьяДоходовИРасходов	= ШапкаДокумента.СтатьяСписанияТМЦ;
			НаборЗаписейДиР.ВУпрВалюте				= Истина;
			НаборЗаписейДиР.ШапкаДокумента			= ШапкаДокумента;
			НаборЗаписейДиР.Расход					= СтрокаТЗ.СуммаСебестоимостиУпр;
			Отказ=НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли; 
		
	КонецЕсли;
	
	// двигаем границу последовательности партий
	Если Ссылка <> ДокументСсылка Тогда
		
		РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоПартиямПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		
	КонецЕсли;
	
	РаботаСГраницами.СдвинутьГраницуПартий(ДокументСсылка, ДополнительныеСвойства, Движения);

	// Все ОК
	Возврат НЕ Отказ;
КонецФункции // ПровестиПоПартиям()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
