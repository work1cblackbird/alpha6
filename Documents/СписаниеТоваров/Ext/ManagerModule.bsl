// Модуль менеджера документа "Списание товаров"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ОбработчикиОбновления

// Возвращает все документы, в которых присутствуют коды маркировки.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка результата запроса, содержащая требуемые документы.
//
Функция ДокументыСКодамиМаркировки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписаниеТоваровКодыМаркировки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СписаниеТоваров.КодыМаркировки КАК СписаниеТоваровКодыМаркировки
	|ГДЕ
	|	СписаниеТоваровКодыМаркировки.КодМаркировки <> """"";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Процедура зачистки криптохвостов кодов маркировки.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.СписаниеТоваров - документ, для которого выполняется действие.
//
Процедура ОтрезатьКриптохвосты(ДокументОбъект) Экспорт
	
	Для Каждого СтрокаТоваров Из ДокументОбъект.КодыМаркировки Цикл
		СтрокаТоваров.КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(СтрокаТоваров.КодМаркировки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВыводИзОборотаКодовМаркировки);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйСкладскойОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.СписаниеТоваров);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Вычислим сумму списания товаров
	СуммаДокументаИтог = ?(Объект.Проведен, Объект.СуммаДокумента, 0);
	СуммаДокумента = ?(ЕстьРеквизит(Объект, "СуммаСписания", "Товары"), 
					Объект.Товары.Итог("СуммаСписания"), СуммаДокументаИтог);
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", СуммаДокумента);
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Производим добавление сведений о розничной сумме только в случае если выбран розничный склад.
	Если Объект.СкладКомпании.Розничный Тогда
		ИтогиОперации.Вставить("СуммаРозничная", Объект.Товары.Итог("СуммаРозничная"));
		ИтогиОперации.Вставить("ПроцентНаценки", ?(ИтогиОперации.СуммаДокумента=0, 0, Окр(ИтогиОперации.СуммаРозничная/ИтогиОперации.СуммаДокумента-1, 2)*100));
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// заполнение количества по остаткам
Процедура ЗаполнитьРасчетноеКоличество(Объект, Строка)
	
	МоментВремени = ?(Объект.Ссылка.Пустая(),Новый МоментВремени(КонецДня(Объект.Дата)),Объект.Ссылка.МоментВремени());
	
	Если НЕ Объект.ХозОперация = Справочники.ХозОперации.СписаниеТоваровОтданныхНаКомиссию Тогда
		
		Отбор         = Новый Структура("СкладКомпании,Номенклатура", Объект.СкладКомпании, Строка.Номенклатура);
		Остатки       = РегистрыНакопления.ОстаткиТоваровКомпании.Остатки(МоментВремени,Отбор,,"Количество,Резерв");
		
		Если Остатки.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
				Строка.Количество = (Остатки.Итог("Количество") - Остатки.Итог("Резерв"))/Строка.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент;
			Иначе
				Строка.Количество = (Остатки.Итог("Количество") - Остатки.Итог("Резерв"))/Строка.ЕдиницаИзмерения.Коэффициент;
			КонецЕсли;
			
		Иначе
			Строка.Количество = 0;
		КонецЕсли;
		
	Иначе
		
		Отбор = Новый Структура("Автомобиль,Контрагент,ДоговорВзаиморасчетов,Номенклатура,ХарактеристикаНоменклатуры");
		Отбор.Автомобиль                 = Справочники.Автомобили.ПустаяСсылка();
		Отбор.Контрагент                 = Объект.Контрагент;
		Отбор.Номенклатура               = Строка.Номенклатура;
		Отбор.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
		Отбор.ДоговорВзаиморасчетов      = Объект.ДоговорВзаиморасчетов;
		
		Если ЗначениеЗаполнено(Строка.ДокументПередачи) Тогда
			Отбор.Вставить("ДокументПередачи",Строка.ДокументПередачи);
		КонецЕсли;
		
		Остатки = РегистрыНакопления.ПартииТоваровОтданные.Остатки(МоментВремени,Отбор,,"Количество");
		
		Если Остатки.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
				Строка.Количество = Остатки.Итог("Количество")/Строка.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент;
			Иначе
				Строка.Количество = Остатки.Итог("Количество")/Строка.ЕдиницаИзмерения.Коэффициент;
			КонецЕсли;
		Иначе
			Строка.Количество = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ТоварыКоличествоПриИзменении(Объект, Строка);
	
КонецПроцедуры

#Область ОбработчикиЗаполненияОбъекта

// Заполняет на основании 
//
// Параметры:
// Объект - заполняемый документ списания
//  Основание - ДокументСсылка.
//
Процедура ЗаполнитьТоварыОстатками(Объект, Основание) Экспорт
	
	ВыборочноеСписаниеПартий = ПраваИНастройкиПользователя.Значение("ВыборочноеСписаниеПартий",Объект);
	
	Если Основание.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваров 
		ИЛИ Основание.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия 
		ИЛИ Основание.ХозОперация = Справочники.ХозОперации.ПоступлениеБезвозмездное Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
							  |	ПоступлениеТоваровТовары.Номенклатура,
							  |	ПоступлениеТоваровТовары.ХарактеристикаНоменклатуры,
							  |	ПоступлениеТоваровТовары.ЕдиницаИзмерения,
							  |	ПоступлениеТоваровТовары.Коэффициент,
							  |	ПоступлениеТоваровТовары.ЦенаРозничная,
							  |	ПоступлениеТоваровТовары.СуммаРозничная,
							  |	МАКСИМУМ(ЕСТЬNULL(ПартииТоваровКомпанииОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток
							  |ИЗ
							  |	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
							  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровКомпании.Остатки(
							  |				"+?(Объект.Ссылка.Пустая(),"","&НаМомент")+",
							  |				СкладКомпании = &Склад
							  |					И Партия = &Основание) КАК ПартииТоваровКомпанииОстатки
							  |		ПО (ПартииТоваровКомпанииОстатки.Номенклатура = ПоступлениеТоваровТовары.Номенклатура)
							  |			И (ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры = ПоступлениеТоваровТовары.ХарактеристикаНоменклатуры)
							  |			И (ПартииТоваровКомпанииОстатки.Партия = ПоступлениеТоваровТовары.Ссылка)
							  |ГДЕ
							  |	ПоступлениеТоваровТовары.Ссылка = &Основание
							  |
							  |СГРУППИРОВАТЬ ПО
							  |	ПоступлениеТоваровТовары.Номенклатура,
							  |	ПоступлениеТоваровТовары.ХарактеристикаНоменклатуры,
							  |	ПоступлениеТоваровТовары.ЕдиницаИзмерения,
							  |	ПоступлениеТоваровТовары.Коэффициент,
							  |	ПоступлениеТоваровТовары.ЦенаРозничная,
							  |	ПоступлениеТоваровТовары.СуммаРозничная");
							  
	ИначеЕсли Основание.ХозОперация = Справочники.ХозОперации.ВводОстатковТоваров 
		ИЛИ Основание.ХозОперация = Справочники.ХозОперации.ВводОстатковТоваровПринятыхНаКомиссию Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
							  |	ВводОстатковТоваровТовары.Номенклатура,
							  |	ВводОстатковТоваровТовары.ХарактеристикаНоменклатуры,
							  |	ВводОстатковТоваровТовары.ЕдиницаИзмерения,
							  |	ВводОстатковТоваровТовары.Коэффициент,
							  |	ВводОстатковТоваровТовары.ЦенаРозничная,
							  |	ВводОстатковТоваровТовары.СуммаРозничная,
							  |	ЕСТЬNULL(ПартииТоваровКомпанииОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток
							  |ИЗ
							  |	Документ.ВводОстатковТоваров.Товары КАК ВводОстатковТоваровТовары
							  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровКомпании.Остатки(
							  |				"+?(Объект.Ссылка.Пустая(),"","&НаМомент")+",
							  |				СкладКомпании = &Склад
							  |					И Партия = &Основание) КАК ПартииТоваровКомпанииОстатки
							  |		ПО (ПартииТоваровКомпанииОстатки.Номенклатура = ВводОстатковТоваровТовары.Номенклатура)
							  |			И (ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры = ВводОстатковТоваровТовары.ХарактеристикаНоменклатуры)
							  |			И (ПартииТоваровКомпанииОстатки.Партия = ВводОстатковТоваровТовары.Ссылка)
							  |ГДЕ
							  |	ВводОстатковТоваровТовары.Ссылка = &Основание
							  |
							  |УПОРЯДОЧИТЬ ПО
							  |	ВводОстатковТоваровТовары.НомерСтроки");
		
	ИначеЕсли Основание.ХозОперация = Справочники.ХозОперации.ВводОстатковТоваровПереданныхНаКомиссию Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
							  |	ВводОстатковТоваровТовары.Номенклатура,
							  |	ВводОстатковТоваровТовары.ХарактеристикаНоменклатуры,
							  |	ВводОстатковТоваровТовары.ЕдиницаИзмерения,
							  |	ВводОстатковТоваровТовары.Коэффициент,
							  |	ВводОстатковТоваровТовары.ЦенаРозничная,
							  |	ВводОстатковТоваровТовары.СуммаРозничная,
							  |	ЕСТЬNULL(ПартииТоваровОтданныеОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток
							  |ИЗ
							  |	Документ.ВводОстатковТоваров.Товары КАК ВводОстатковТоваровТовары
							  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровОтданные.Остатки(
							  |				"+?(Объект.Ссылка.Пустая(),"","&НаМомент")+",
							  |				 Партия = &Основание ) КАК ПартииТоваровОтданныеОстатки
							  |		ПО (ПартииТоваровОтданныеОстатки.Номенклатура = ВводОстатковТоваровТовары.Номенклатура)
							  |			И (ПартииТоваровОтданныеОстатки.ХарактеристикаНоменклатуры = ВводОстатковТоваровТовары.ХарактеристикаНоменклатуры)
							  |			И (ПартииТоваровОтданныеОстатки.Партия = ВводОстатковТоваровТовары.Ссылка)
							  |ГДЕ
							  |	ВводОстатковТоваровТовары.Ссылка = &Основание
							  |
							  |УПОРЯДОЧИТЬ ПО
							  |	ВводОстатковТоваровТовары.НомерСтроки");
	Иначе
		Возврат;
	КонецЕсли;
	Запрос.УстановитьПараметр("НаМомент",	ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Основание",	Основание);
	Запрос.УстановитьПараметр("Склад",		Объект.СкладКомпании);
	ВыборкаНоменклатуры = Запрос.Выполнить().Выбрать();
	Объект.Товары.Очистить(); 
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		Если ВыборкаНоменклатуры.КоличествоОстаток > 0 Тогда
			НоваяСтрока								= Объект.Товары.Добавить();
			НоваяСтрока.Номенклатура				= ВыборкаНоменклатуры.Номенклатура;
			ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока);
			НоваяСтрока.ХарактеристикаНоменклатуры	= ВыборкаНоменклатуры.ХарактеристикаНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения			= ВыборкаНоменклатуры.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент					= ВыборкаНоменклатуры.Коэффициент;
			НоваяСтрока.Количество					= ВыборкаНоменклатуры.КоличествоОстаток;
			НоваяСтрока.ЦенаРозничная				= ВыборкаНоменклатуры.ЦенаРозничная;
			НоваяСтрока.СуммаРозничная				= ВыборкаНоменклатуры.СуммаРозничная;
			ТоварыКоличествоПриИзменении(Объект, НоваяСтрока);
			НоваяСтрока.ДокументПередачи			= Основание;
			Если ВыборочноеСписаниеПартий Тогда
				НоваяСтрока.Партия					= Основание;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ЗаполнитьОстаткамиПоПартии()

#КонецОбласти

// Получение данных о прослеживаемых товаров
//
// Параметры:
//  Объект	 - ДокументОбъект.СписаниеТоваров - Документ, на основании которого произошла операция с товаром
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Список прослеживаемых товаров
//
Функция ОперацииСПрослеживаемымиТоварами(Объект) Экспорт
	
	// Получим таблицу для формирования данных по операции
	ТаблицаОперацииПрослеживаемости = УчетПрослеживаемыхТоваровСервер.ИнициализацияТаблицыОпераций();
	
	// Сформируем запрос из документа
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
	|	СУММА(ПартииТоваровКомпании.Количество) КАК КоличествоОсталось,
	|	СУММА(ПартииТоваровКомпании.СуммаБезНДС) КАК СуммаОсталось
	|ИЗ
	|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
	|ГДЕ
	|	ПартииТоваровКомпании.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровКомпании.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ДокументыОтображенияОпераций.ОтчетОбОперациях) КАК ОтчетностьОперации,
	|	ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.НедостачаТовараПоИнвентаризации) КАК КодОперации,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументов.Другое) КАК ВидДокумента,
	|	ГТДПартийТоваровКомпании.Номенклатура КАК Номенклатура,
	|	ГТДПартийТоваровКомпании.ГТД КАК РНПТ,
	|	СУММА(ГТДПартийТоваровКомпании.Количество) КАК КоличествоПрослеживаемости
	|ИЗ
	|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
	|ГДЕ
	|	ГТДПартийТоваровКомпании.Регистратор = &Ссылка
	|	И ГТДПартийТоваровКомпании.ГТД.РНПТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ГТДПартийТоваровКомпании.Номенклатура,
	|	ГТДПартийТоваровКомпании.ГТД";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	// Проверим есть РНПТ у документа
	Если ПакетЗапросов[1].Пустой() Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	ТаблицаТоваров = ПакетЗапросов[0].Выгрузить();
	ТаблицаРНПТ = ПакетЗапросов[1].Выгрузить();
	
	// Зафиксируем данные для заполнения
	Организация = Объект.Организация;
	Документ = Объект.Ссылка;
	ПериодОтчета = НачалоКвартала(Объект.Дата);
	НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект.Ссылка);
	ДатаДокумента = Объект.Дата;
	
	Для Каждого ТекущаяСтрока Из ТаблицаРНПТ Цикл
		
		НоваяСтрока = ТаблицаОперацииПрослеживаемости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ПериодОтчета = ПериодОтчета;
		НоваяСтрока.Документ = Документ;
		НоваяСтрока.НомерДокумента = НомерДокумента;
		НоваяСтрока.ДатаДокумента = ДатаДокумента;
		
		// Получим сумму товара
		КоличествоРНПТ = ТекущаяСтрока.КоличествоПрослеживаемости;
		НайденныеСтроки = ТаблицаТоваров.НайтиСтроки(Новый Структура("Номенклатура", ТекущаяСтрока.Номенклатура));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаНоменклатуры = НайденныеСтроки[0];
		
		Если КоличествоРНПТ >= СтрокаНоменклатуры.КоличествоОсталось Тогда
			СуммаБезНДС = СтрокаНоменклатуры.СуммаОсталось;
		Иначе
			СуммаБезНДС = Окр(СтрокаНоменклатуры.СуммаОсталось /
				?(СтрокаНоменклатуры.КоличествоОсталось = 0, 1, СтрокаНоменклатуры.КоличествоОсталось)
				* КоличествоРНПТ, 2);
		КонецЕсли;
		НоваяСтрока.СуммаБезНДС = СуммаБезНДС;
		
		СтрокаНоменклатуры.КоличествоОсталось = СтрокаНоменклатуры.КоличествоОсталось - КоличествоРНПТ;
		СтрокаНоменклатуры.СуммаОсталось = СтрокаНоменклатуры.СуммаОсталось - СуммаБезНДС;
		Если СтрокаНоменклатуры.КоличествоОсталось <= 0 Тогда
			ТаблицаТоваров.Удалить(СтрокаНоменклатуры);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаОперацииПрослеживаемости;
	
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("СтатьяСписанияТМЦ");
	Если Объект.ХозОперация = Справочники.ХозОперации.СписаниеТоваровОтданныхНаКомиссию Тогда
		ОбязательныеРеквизиты.Добавить("Контрагент");
		ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	Иначе
		ОбязательныеРеквизиты.Добавить("СкладКомпании");
		Если БалансВедетсяПоПодразделениям(Объект.Дата) Тогда
			ОбязательныеРеквизиты.Добавить("ПодразделениеЗатрат");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;

	// Обязательные поля таблицы товаров
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	Если Объект.ХозОперация = Справочники.ХозОперации.СписаниеТоваровОтданныхНаКомиссию Тогда
		ОбязательныеРеквизиты.Добавить("Товары.ДокументПередачи");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("КодыМаркировки.КодМаркировки");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	
	Если Объект.ХозОперация = Справочники.ХозОперации.СписаниеТоваровОтданныхНаКомиссию Тогда
		УникальныеТовары.Добавить("ДокументПередачи");
	КонецЕсли;
	Если ПраваИНастройкиПользователя.Значение("ВыборочноеСписаниеПартий", Объект) Тогда
		УникальныеТовары.Добавить("Партия");
		УникальныеТовары.Добавить("ГТД");
	КонецЕсли;
	
	УникальныеКодМаркировки = Новый Массив;
	УникальныеКодМаркировки.Добавить("КодМаркировки");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти = Новый Структура();
	УникальныеТабличныеЧасти.Вставить("Товары", УникальныеТовары);
	УникальныеТабличныеЧасти.Вставить("КодыМаркировки", УникальныеКодМаркировки);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Параметры проверки полей таблицы товаров
	КонтролируемыеРеквизитыТовары = Новый Структура();
	КонтролируемыеРеквизитыТовары.Вставить("Партия", ЛОЖЬ);
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("СкладКомпании",         Ложь);
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	КонтролируемыеРеквизиты.Вставить("Товары",                КонтролируемыеРеквизитыТовары);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры //КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры //ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подразделение затрат".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеЗатратПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// зарезервировано
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение затрат".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	Если ПустаяСтрока(Строка.ИдентификаторТовара) Тогда
		Строка.ИдентификаторТовара = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	// обрабатываем приватно
	ЗаполнитьРасчетноеКоличество(Объект, Строка);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ЗаполнитьРасчетноеКоличество(Объект, Строка);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.ОбработатьИзменениеЕдиницаИзмерения(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена (розничная)" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаРозничнаяПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма (розничная)" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаРозничнаяПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаРозничнаяПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Документ передачи" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыДокументПередачиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ЗаполнитьРасчетноеКоличество(Объект, Строка);
	
КонецПроцедуры // ТоварыСуммаРозничнаяПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Товары");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "СписаниеТоваров");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ВыборСклада 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборСклада.ВыборСсылки 		= "Справочник.СкладыКомпании.ФормаСписка";
	ВыборСклада.Обязательный 		= Истина;
	ВыборСклада.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать склад компании.'");

	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить складскими остатками'");
	Команда.Идентификатор	= "ТоварыЗаполнитьСкладскимиОстатками";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", ВыборСклада);
	
	ВыборДоговора 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборДоговора.ВыборСсылки 		= "Справочник.ДоговорыВзаиморасчетов.ФормаСписка";
	ВыборДоговора.Обязательный 		= Истина;
	ВыборДоговора.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать договор комиссии.'"); 
	
	ВидДоговора 					=  Новый ФиксированныйМассив(Справочники.ХозОперации.ПолучитьВидыДоговоров(
										Справочники.ХозОперации.СписаниеТоваровОтданныхНаКомиссию));
	Отбор 							= Новый Структура("Организация,ПодразделениеКомпании,ВидДоговора", 
										"Организация", "ПодразделениеКомпании", ВидДоговора);
	ВыборДоговора.Параметры			= Новый Структура("РежимВыбора,Отбор", Истина, Отбор);
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить по договору комиссии'");
	Команда.Идентификатор	= "ТоварыЗаполнитьПоДоговоруКомиссии";
	Команда.Порядок			= 51;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ДоговорВзаиморасчетов", ВыборДоговора);
	
	ВыборГруппыНоменклатуры = ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборГруппыНоменклатуры.ВыборСсылки = "Справочник.Номенклатура.ФормаВыбораГруппы";
	ВыборГруппыНоменклатуры.Обязательный = Истина;
	ВыборГруппыНоменклатуры.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать группу номенклатуры.'");

	Команда = ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление = НСтр("ru = 'Заполнить по группе номенклатуры'");
	Команда.Идентификатор = "ТоварыЗаполнитьПоГруппеНоменклатуры";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ГруппаНоменклатуры", ВыборГруппыНоменклатуры);
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзДокумента(
		КомандыЗаполнения,
		"Товары",
		Параметры
	);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстатками.Видимость",   Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстатками.Доступность", (Объект.ХозОперация <> Справочники.ХозОперации.СписаниеТоваровОтданныхНаКомиссию));
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьПоДоговоруКомиссии.Видимость",    Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьПоДоговоруКомиссии.Доступность",  (Объект.ХозОперация = Справочники.ХозОперации.СписаниеТоваровОтданныхНаКомиссию));
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа складскими остатками
//
Функция ТоварыЗаполнитьСкладскимиОстатками(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.СкладКомпании=ПараметрыЗаполнения.СкладКомпании Тогда
		Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании;
		СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Результат = ЗаполнениеДокументовСервер.ПолучитьСкладскиеОстатки(Объект, ПараметрыЗаполнения);
	
	Объект.Товары.Загрузить(Результат);
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		ТоварыНоменклатураПриИзменении(Объект, СтрокаТЧ,ПараметрыДействия);
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура("Количество", 0);
	УдаляемыеСтроки = Объект.Товары.НайтиСтроки(СтруктураОтбора);
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Объект.Товары.Удалить(УдаляемаяСтрока);		
	КонецЦикла;	
	
КонецФункции // ТоварыЗаполнитьСкладскимиОстатками()

// Обработчик заполнения документа по договору комиссии
//
Функция ТоварыЗаполнитьПоДоговоруКомиссии(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.ДоговорВзаиморасчетов = ПараметрыЗаполнения.ДоговорВзаиморасчетов Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = ПараметрыЗаполнения.ДоговорВзаиморасчетов.Владелец;
			КонтрагентПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли;
		Объект.ДоговорВзаиморасчетов = ПараметрыЗаполнения.ДоговорВзаиморасчетов;
		ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Результат = ЗаполнениеДокументовСервер.ПолучитьТоварыПоДоговоруКомиссии(Объект, ПараметрыЗаполнения);
	
	Объект.Товары.Загрузить(Результат);
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		ТоварыНоменклатураПриИзменении(Объект, СтрокаТЧ,ПараметрыДействия);
	КонецЦикла;
	
КонецФункции // ТоварыЗаполнитьПоДоговоруКомиссии()

// Обработчик заполнения документа по группе номенклатуры
//
Функция ТоварыЗаполнитьПоГруппеНоменклатуры(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект = ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Результат = ЗаполнениеДокументовСервер.ПолучитьТоварыПоГруппеНоменклатуры(Объект, ПараметрыЗаполнения);
	
	Если ТипЗнч(Результат)=Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаТовар Из Результат Цикл
			
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Номенклатура = СтрокаТовар.Номенклатура;
			ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
			
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // ТоварыЗаполнитьПоГруппеНоменклатуры()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.СписаниеТоваров",
		"ПФ_MXL_СписаниеТоваров",
		НСтр("ru = 'Списание товаров'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ16",
		НСтр("ru = 'ТОРГ-16 (Акт списания товаров)'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик события формирования печатной формы.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - информация для заполнения письма при отправке печатной формы электронной почтой.
//                                     Содержит следующие поля:
//    ** Получатель - Строка, СписокЗначений, Массив - список получателей письма;
//    ** Тема - Строка - Тема письма,
//    ** Текст - Строка - Текст письма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_СписаниеТоваров") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_СписаниеТоваров",
															НСтр("ru = 'Списание товаров'"),
															ПечатьСписаниеТоваров(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;		
КонецПроцедуры // Печать()

// Формирует печатную форму "СписаниеТоваров".
//
Функция ПечатьСписаниеТоваров(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеТоваров_СписаниеТоваров";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ВалютаУпр  = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		Если Документ.ВалютаДокумента = ВалютаРегл Тогда
			ИмяРесурсаСуммы    = "Сумма";
			ИмяРесурсаСуммыНДС = "СуммаНДС";
			ТребуетсяПересчет  = Ложь;
		ИначеЕсли Документ.ВалютаДокумента = ВалютаУпр Тогда
			ИмяРесурсаСуммы    = "СуммаУпр";
			ИмяРесурсаСуммыНДС = "СуммаНДСУпр";
			ТребуетсяПересчет  = Ложь;
		Иначе
			ИмяРесурсаСуммы    = "СуммаУпр";
			ИмяРесурсаСуммыНДС = "СуммаНДСУпр";
			ТребуетсяПересчет  = Истина;
		КонецЕсли;
		Если ТребуетсяПересчет Тогда
			
			Если ЕстьРеквизит(Документ, "КурсВалютыУпр") И ЗначениеЗаполнено(Документ.КурсВалютыУпр) Тогда
				КурсВалютыУпр = Документ.КурсВалютыУпр;
			Иначе
				СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, Документ.Дата);
				КурсВалютыУпр = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
			КонецЕсли;
			
			КоэффициентПересчета = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(1, ВалютаУпр, КурсВалютыУпр,
				Документ.ВалютаДокумента, Документ.КурсДокумента);
		КонецЕсли;
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СписаниеТоваров.ПФ_MXL_СписаниеТоваров");
		
		ОбластьШапкаТаблицы    = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// Дата документа
		ДатаДокумента = Документ.Дата;
		
		// Вывод заголовка документа.
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ПредставлениеПодразделения = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.ПодразделениеКомпании, , ДополнительныеПараметры);
		
		Если Документ.ХозОперация = Справочники.ХозОперации.СписаниеТоваров
			ИЛИ Документ.ХозОперация = Справочники.ХозОперации.СписаниеВПроизводство Тогда
			ОбластьЗаголовок.Параметры.ПредставлениеСкладаКонтрагента =
				УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СкладКомпании);
			ОбластьЗаголовок.Параметры.тСкладКонтрагент = НСтр("ru = 'Склад компании:'");
		Иначе
			ОбластьЗаголовок.Параметры.ПредставлениеСкладаКонтрагента = 
				УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент, ДатаДокумента);
			ОбластьЗаголовок.Параметры.тСкладКонтрагент = "Контрагент:";
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);

		// Готовим шапку
		НомерСтраницы = 2; НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаБезНДС,СуммаВсего",
			Документ.ВалютаДокумента, 0, 0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		ИмяРегистра = ?(Документ.ХозОперация = Справочники.ХозОперации.СписаниеТоваровОтданныхНаКомиссию,
			"ПартииТоваровОтданные", "ПартииТоваровКомпании");
		
		ПараметрыПолучения                      = ЗащищенныеФункцииСервер.СоздатьПараметрыПолученияТаблицыСписания();
		ПараметрыПолучения.ИмяРегистра          = ИмяРегистра;
		ПараметрыПолучения.ИспользуемыеРесурсы  = Новый Структура(ИмяРесурсаСуммы + "," + ИмяРесурсаСуммыНДС);
		ПараметрыПолучения.ВидДвиженияПриход    = ВидДвиженияНакопления.Расход;
		ПараметрыПолучения.ДобавлятьНомерСтроки = Истина;
		
		КэшТаблица = ЗащищенныеФункцииСервер.ПолучитьТаблицуСуммСписания(Документ, ПараметрыПолучения);
		
		ИтогоСумма = 0;
		ИтогоСуммаБезНДС = 0;
		
		// Готовим области строки.
		ВыборкаТабличнойЧасти = Документ.Товары;
		Для каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ);
			
			Отбор = Новый Структура("НомерСтроки", СтрокаТЧ.НомерСтроки);
			
			Если Отбор.Количество() > 0 Тогда
				МассивСумм = КэшТаблица.НайтиСтроки(Отбор);
				Если МассивСумм.Количество() > 0 Тогда
					Сумма       = 0;
					СуммаБезНДС = 0;
					Для Каждого СтрМассивСумм Из МассивСумм Цикл
						Сумма       = Сумма + СтрМассивСумм[ИмяРесурсаСуммы];
						СуммаБезНДС = СуммаБезНДС + (СтрМассивСумм[ИмяРесурсаСуммы] - СтрМассивСумм[ИмяРесурсаСуммыНДС]);
					КонецЦикла;
				КонецЕсли;
			Иначе
				Сумма       = КэшТаблица.Итог(ИмяРесурсаСуммы);
				СуммаБезНДС = КэшТаблица.Итог(ИмяРесурсаСуммы) - КэшТаблица.Итог(ИмяРесурсаСуммыНДС);
			КонецЕсли;
			
			Если ТребуетсяПересчет Тогда
				Сумма       = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Сумма, ВалютаУпр, КурсВалютыУпр,
					Документ.ВалютаДокумента, Документ.КурсДокумента);
				СуммаБезНДС = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаБезНДС, ВалютаУпр, КурсВалютыУпр,
					Документ.ВалютаДокумента, Документ.КурсДокумента);
			КонецЕсли;
			
			Цена  = Сумма / СтрокаТЧ.Количество / СтрокаТЧ.Коэффициент;
		
			СтруктураСтроки.Вставить("Цена",		Формат(Цена, 		ФорматВыводаСуммы));
			СтруктураСтроки.Вставить("СуммаВсего",	Формат(Сумма, 		ФорматВыводаСуммы));
			СтруктураСтроки.Вставить("СуммаБезНДС", Формат(СуммаБезНДС, ФорматВыводаСуммы));
			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			
			// Доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаБезНДС,СуммаВсего",
					Документ.ВалютаДокумента, 0, 0);
				НомерСтраницыПред		  = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			СтруктураСтроки.Вставить("СуммаВсего", Сумма); // чтобы округление не сказалось на итоговой сумме
			СтруктураСтроки.Вставить("СуммаБезНДС", СуммаБезНДС);
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтруктураСтроки, СтруктураИтоговПоСтранице);
			ИтогоСумма = ИтогоСумма + Сумма;
			ИтогоСуммаБезНДС = ИтогоСуммаБезНДС + СуммаБезНДС;
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// Итоги
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		ОбластьПодвал.Параметры.СуммаВсего = Формат(ИтогоСумма, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаБезНДС = Формат(ИтогоСуммаБезНДС, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'") + " " + ВыборкаТабличнойЧасти.Количество()
			+ " " + НСтр("ru = 'на сумму'") +" " 
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоСумма, Документ.ВалютаДокумента);
	
		// Выводим представления и расшифровки подписей.
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил", "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Получил", "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьСписаниеТоваров()

// Формирует печатную форму "ТОРГ 16"
//
Функция ПолучитьДанныеДляПечатиТОРГ16(Объект) Экспорт
	ДанныеОбъекта = Новый Структура();
	
	Если Объект.ХозОперация = Справочники.ХозОперации.СписаниеТоваров
		ИЛИ Объект.ХозОперация = Справочники.ХозОперации.СписаниеВПроизводство Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ПартииТоваровКомпании.НомерСтроки,
			               |	ПартииТоваровКомпании.Номенклатура,
			               |	ПРЕДСТАВЛЕНИЕ(ПартииТоваровКомпании.Номенклатура) КАК НоменклатураПредставление,
			               |	ПартииТоваровКомпании.ХарактеристикаНоменклатуры,
			               |	ПРЕДСТАВЛЕНИЕ(ПартииТоваровКомпании.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатурыПредставление,
			               |	ПартииТоваровКомпании.Партия,
			               |	ПартииТоваровКомпании.Количество,
			               |	ПартииТоваровКомпании.Сумма,
			               |	ПартииТоваровКомпании.СуммаУпр,
			               |	ПартииТоваровКомпании.СуммаНДС,
			               |	ЕСТЬNULL(ОстаткиТоваровКомпании.СуммаРозн, 0) КАК СуммаРозничная
			               |ИЗ
			               |	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровКомпании КАК ОстаткиТоваровКомпании
			               |		ПО ПартииТоваровКомпании.Регистратор = ОстаткиТоваровКомпании.Регистратор
			               |			И ПартииТоваровКомпании.Номенклатура = ОстаткиТоваровКомпании.Номенклатура
			               |			И ПартииТоваровКомпании.ХарактеристикаНоменклатуры = ОстаткиТоваровКомпании.ХарактеристикаНоменклатуры
			               |			И ПартииТоваровКомпании.НомерСтроки = ОстаткиТоваровКомпании.НомерСтроки
			               |ГДЕ
			               |	ПартииТоваровКомпании.Регистратор = &Регистратор";
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
			ВыборкаСтрокТовары = Запрос.Выполнить().Выгрузить();
			ВыборкаСтрокТовары.Колонки.Добавить("Цена");
			ПростоеСписание = Истина;
			
	ИначеЕсли Объект.ХозОперация = Справочники.ХозОперации.СписаниеТоваровОтданныхНаКомиссию Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ПартииТоваровОтданные.НомерСтроки,
			               |	ПартииТоваровОтданные.Номенклатура,
			               |	ПРЕДСТАВЛЕНИЕ(ПартииТоваровОтданные.Номенклатура) КАК НоменклатураПредставление,
			               |	ПартииТоваровОтданные.ХарактеристикаНоменклатуры,
			               |	ПРЕДСТАВЛЕНИЕ(ПартииТоваровОтданные.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатурыПредставление,
			               |	ПартииТоваровОтданные.Партия,
			               |	ПартииТоваровОтданные.ДокументПередачи,
			               |	ПартииТоваровОтданные.Количество,
			               |	ПартииТоваровОтданные.Сумма,
			               |	ПартииТоваровОтданные.СуммаУпр,
			               |	ПартииТоваровОтданные.СуммаНДС,
			               |	ЕСТЬNULL(ОстаткиТоваровКомпании.СуммаРозн, 0) КАК СуммаРозничная
			               |ИЗ
			               |	РегистрНакопления.ПартииТоваровОтданные КАК ПартииТоваровОтданные
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровКомпании КАК ОстаткиТоваровКомпании
			               |		ПО ПартииТоваровОтданные.Регистратор = ОстаткиТоваровКомпании.Регистратор
			               |			И ПартииТоваровОтданные.Номенклатура = ОстаткиТоваровКомпании.Номенклатура
			               |			И ПартииТоваровОтданные.ХарактеристикаНоменклатуры = ОстаткиТоваровКомпании.ХарактеристикаНоменклатуры
			               |			И ПартииТоваровОтданные.НомерСтроки = ОстаткиТоваровКомпании.НомерСтроки
			               |ГДЕ
			               |	ПартииТоваровОтданные.Регистратор = &Регистратор";
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
			ВыборкаСтрокТовары = Запрос.Выполнить().Выгрузить();
			ВыборкаСтрокТовары.Колонки.Добавить("Цена");
			ПростоеСписание = Ложь;
			
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Неправильный вид хозяйственной операции.'"), Объект.Ссылка);
		Возврат Неопределено;
	КонецЕсли;
	
	// Определимся откуда будем брать многострочную часть документа.
	// Если движения есть, то из регистра иначе из табличной части документа.
	ЕстьДвиженияПоРегистру = Ложь;
	КоличествоСтрок = ВыборкаСтрокТовары.Количество();
	Если КоличествоСтрок > 0 Тогда
		ЕстьДвиженияПоРегистру = Истина;
	Иначе
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Документ не проведен по партионному регистру. Отображение партий невозможно.'"),
			Объект.Ссылка
		);
		ВыборкаСтрокТовары = Объект.Товары.Выгрузить();
		ВыборкаСтрокТовары.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
		ВыборкаСтрокТовары.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
		ВыборкаСтрокТовары.Колонки.Добавить("НоменклатураПредставление", Новый ОписаниеТипов("Строка"));
		ВыборкаСтрокТовары.Колонки.Добавить("ХарактеристикаНоменклатурыПредставление", Новый ОписаниеТипов("Строка"));
	КонецЕсли; 
	
	СтрокаСвертки = "Номенклатура, НоменклатураПредставление, ХарактеристикаНоменклатуры, ХарактеристикаНоменклатурыПредставление";
	СтрокаСуммирования = "Количество, Сумма, СуммаРозничная, Цена";
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  , Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("ВыборкаСтрокТовары"  	, ВыборкаСтрокТовары);
	ДанныеОбъекта.Вставить("ПростоеСписание"  		, ПростоеСписание);
	ДанныеОбъекта.Вставить("ЕстьДвиженияПоРегистру" , ЕстьДвиженияПоРегистру);	
	ДанныеОбъекта.Вставить("ПредседательКомиссии"  	, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"ПредседательКомиссии"));
	ДанныеОбъекта.Вставить("ЧленКомиссии1"        	, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"ЧленКомиссии1"));
	ДанныеОбъекта.Вставить("ЧленКомиссии2"       	, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"ЧленКомиссии2"));
	ДанныеОбъекта.Вставить("МОЛ" 			 	 	, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"МОЛ"));
	ДанныеОбъекта.Вставить("Руководитель"    		, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Руководитель"));
	ДанныеОбъекта.Вставить("СтрокаСвертки"			, СтрокаСвертки);
	ДанныеОбъекта.Вставить("СтрокаСуммирования"		, СтрокаСуммирования);
	Возврат ДанныеОбъекта;
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли