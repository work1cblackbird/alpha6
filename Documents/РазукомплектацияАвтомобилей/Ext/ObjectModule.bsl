// Модуль объекта документа "Разукомплектация автомобилей"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА) Экспорт
	
	ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ЭтотОбъект);
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		ТипЦен = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенЗакупки", ЭтотОбъект);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Товары.Очистить();
	Автомобили.Очистить();
	Документы.РазукомплектацияАвтомобилей.ЗаполнитьТабличнуюЧастьПоДокументуОснования(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ЭтоЗаказНарядПоСборкеАвто(ДанныеЗаполнения) Тогда
		ЭтотОбъект.ХозОперация = Справочники.ХозОперации.Демонтаж;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ЭтотОбъект);
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьВозможностьРазукомплектацииСобранногоАвтомобиля(Отказ);
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПраваИНастройкиПользователя.Значение("ПроверкаЗаполненияСправочниковИДокументов", ЭтотОбъект) Тогда
		// Проверим что документ основания есть заказ-наряд с видом ремонта комплектация
		Если Не Автосервис.ЭтоКомплектацияСборкаАвтомобиля(ДокументОснование.ВидРемонта) Тогда
			ОбщегоНазначения.СообщитьПользователю(Нстр("ru = 'Вид ремонта заказ-наряда, на основании которого введена разукомплектация, должен быть <Комплектация автомобиля> или <Сборка автомобиля>.'"), ЭтотОбъект);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка корректности типа цен.
	Если ТипЦен.Рассчитывается Тогда
		
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Использование расчетных типов цен запрещено.'"), ЭтотОбъект);
		
	КонецЕсли;
	
	// Произведем очистку не использующихся в текущем контексте реквизитов
	ОбработкаСобытийДокументаСервер.ОчиститьПолеЦенаРозничнаяДляНеРозничныхСкладов(ЭтотОбъект, ЭтотОбъект.СкладКомпании);
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоКомплектацииПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПартиямПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// проведем остатки товаров
	НаборЗаписейОстатки=Движения.ОстаткиТоваровКомпании;
	НаборЗаписейОстатки.РежимПроведения=РежимПроведения;
	НаборЗаписейОстатки.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейОстатки.РезультатЗапросаПоТоварам=Неопределено;
	НаборЗаписейОстатки.СкладКомпании=СкладКомпании;
	НаборЗаписейОстатки.Приходовать=Истина;
	НаборЗаписейОстатки.Резервировать=Ложь;
	//НаборЗаписейОстатки.Контрагент=Контрагент;
	НаборЗаписейОстатки.ПоБазовомуКоличеству=Ложь;
	НаборЗаписейОстатки.ДвиженияПоРознице=СкладКомпании.Розничный;
	Отказ=НЕ НаборЗаписейОстатки.Приход() ИЛИ Отказ;
	
	// проведем партии товаров
	Отказ=НЕ ПровестиПоПартиям(РежимПроведения,Ссылка) ИЛИ Отказ;
		
	// Если приходуем товар на розничный склад, то установим розничные цены на этот товар.
	Если НЕ Отказ И СкладКомпании.Розничный И ПодразделениеКомпании.УстановкаЦенДокументамиПоступления И НЕ СкладКомпании.ТипЦенРозничнойТорговли.Рассчитывается Тогда
		НаборЗаписейЦены=Движения.Цены;
		НаборЗаписейЦены.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейЦены.Контрагент=Неопределено;
		НаборЗаписейЦены.ТипЦен=СкладКомпании.ТипЦенРозничнойТорговли;
		НаборЗаписейЦены.ПодразделениеКомпании = СкладКомпании.ПодразделениеКомпании;
		НаборЗаписейЦены.УстанавливатьЦеныУслуг=Ложь;
		НаборЗаписейЦены.ИмяРеквизитаЦена="ЦенаРозничная";
		Отказ = НЕ НаборЗаписейЦены.УстановитьЦены() ИЛИ Отказ;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеДвиженийДокумента

// формирует движения документа по партионным регистрам
//
// Параметры:
//  Режим           - режим проведения (оперативный/неоперативный)
//  ДокументСсылка  - ссылка на документ который надо допровести по партиям.
//
// Возвращаемое значение:
//  Возвращает Истина - все ОК, ложь - чего-то не так.
//
Функция ПровестиПоПартиям(Режим,ДокументСсылка) Экспорт
	Отказ=Ложь;
	
	// получим шапку документа
	ШапкаДокумента=ПолучитьШапкуДокумента(ДокументСсылка);
	
	// определим способ ведения баланса
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
		
	// Если было отложенное проведение по партиям, то :
	// Очистим возможные движения по регистру комплектации автомобилей .
	НаборЗаписейПартионногоРегистра=РегистрыНакопления.КомплектацияАвтомобилей.СоздатьНаборЗаписей();
	НаборЗаписейПартионногоРегистра.Отбор.Регистратор.Значение=ШапкаДокумента.Ссылка;
	НаборЗаписейПартионногоРегистра.Отбор.Регистратор.Использование=Истина;
	НаборЗаписейПартионногоРегистра.Записать();
	
	// Проверим, если подразделение проводиться по партиям "отложено", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям=Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	
	// Спишем оборудование по документу
	ЕстьАвтомобиль=Ложь;
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ОстаткиАвтомобилейОстатки.Автомобиль КАК Автомобиль,
	             |	ОстаткиАвтомобилейОстатки.СкладКомпании КАК СкладКомпании,
	             |	ОстаткиАвтомобилейОстатки.СтатусПартии КАК СтатусПартии,
	             |	ОстаткиАвтомобилейОстатки.Партия КАК Партия,
	             |	ОстаткиАвтомобилейОстатки.КоличествоОстаток КАК Количество,
	             |	ОстаткиАвтомобилейОстатки.СуммаОстаток КАК Сумма,
	             |	ОстаткиАвтомобилейОстатки.СуммаНДСОстаток КАК СуммаНДС,
	             |	ОстаткиАвтомобилейОстатки.СуммаУпрОстаток КАК СуммаУпр,
	             |	ОстаткиАвтомобилейОстатки.Автомобиль.ГТД КАК АвтомобильГТД
	             |ИЗ
	             |	РегистрНакопления.ОстаткиАвтомобилей.Остатки(&НаМомент, Автомобиль = &Автомобиль) КАК ОстаткиАвтомобилейОстатки";
	Запрос.УстановитьПараметр("НаМомент",Новый Граница(МоментВремени(),ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Автомобиль",ШапкаДокумента.Автомобиль);
	ВыборкаАвтомобиль = Запрос.Выполнить().Выбрать();
	ТаблицаДопОборудования = Неопределено;
	Если ВыборкаАвтомобиль.Следующий() Тогда
		Если ВыборкаАвтомобиль.Количество > 0 Тогда
			НаборЗаписейКомплектацияАвтомобилей=Движения.КомплектацияАвтомобилей;
			НаборЗаписейКомплектацияАвтомобилей.РежимПроведения=Режим;
			НаборЗаписейКомплектацияАвтомобилей.ДокументОбъект=ЭтотОбъект;
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	РазукомплектацияАвтомобилейТовары.Номенклатура КАК Номенклатура,
			|	РазукомплектацияАвтомобилейТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	РазукомплектацияАвтомобилейТовары.Количество * РазукомплектацияАвтомобилейТовары.Коэффициент КАК Количество,
			|	РазукомплектацияАвтомобилейТовары.СуммаВсего КАК СуммаВсего,
			|	РазукомплектацияАвтомобилейТовары.СуммаНДС КАК СуммаНДС,
			|	РазукомплектацияАвтомобилейТовары.СтавкаНДС КАК СтавкаНДС
			|ПОМЕСТИТЬ РазукомплектацияТовары
			|ИЗ
			|	Документ.РазукомплектацияАвтомобилей.Товары КАК РазукомплектацияАвтомобилейТовары
			|ГДЕ
			|	РазукомплектацияАвтомобилейТовары.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РазукомплектацияАвтомобилейАвтомобили.Автомобиль,
			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
			|	1,
			|	0,
			|	0,
			|	РазукомплектацияАвтомобилейАвтомобили.СтавкаНДС
			|ИЗ
			|	Документ.РазукомплектацияАвтомобилей.Автомобили КАК РазукомплектацияАвтомобилейАвтомобили
			|ГДЕ
			|	РазукомплектацияАвтомобилейАвтомобили.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РазукомплектацияТовары.Номенклатура КАК Номенклатура,
			|	РазукомплектацияТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	ВЫБОР
			|		КОГДА КомплектацияАвтомобилейОстатки.КоличествоОстаток > РазукомплектацияТовары.Количество
			|			ТОГДА РазукомплектацияТовары.Количество
			|		ИНАЧЕ КомплектацияАвтомобилейОстатки.КоличествоОстаток
			|	КОНЕЦ КАК Количество
			|ПОМЕСТИТЬ ОстатокПоКомплектации
			|ИЗ
			|	РазукомплектацияТовары КАК РазукомплектацияТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.КомплектацияАвтомобилей.Остатки(
			|				&МоментВремени,
			|				Автомобиль = &Автомобиль
			|					И СкладКомпании = &СкладКомпании) КАК КомплектацияАвтомобилейОстатки
			|		ПО РазукомплектацияТовары.Номенклатура = КомплектацияАвтомобилейОстатки.Номенклатура
			|			И РазукомплектацияТовары.ХарактеристикаНоменклатуры = КомплектацияАвтомобилейОстатки.ХарактеристикаНоменклатуры
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОстатокПоКомплектации.Номенклатура КАК Номенклатура,
			|	ОстатокПоКомплектации.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	ОстатокПоКомплектации.Количество КАК Количество
			|ИЗ
			|	ОстатокПоКомплектации КАК ОстатокПоКомплектации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РазукомплектацияТовары.Количество - ЕСТЬNULL(ОстатокПоКомплектации.Количество, 0) КАК Количество,
			|	РазукомплектацияТовары.Номенклатура КАК Номенклатура,
			|	РазукомплектацияТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	РазукомплектацияТовары.СуммаВсего * (РазукомплектацияТовары.Количество - ЕСТЬNULL(ОстатокПоКомплектации.Количество, 0)) / РазукомплектацияТовары.Количество КАК СуммаВсего,
			|	РазукомплектацияТовары.СуммаНДС * (РазукомплектацияТовары.Количество - ЕСТЬNULL(ОстатокПоКомплектации.Количество, 0)) / РазукомплектацияТовары.Количество КАК СуммаНДС,
			|	РазукомплектацияТовары.СтавкаНДС КАК СтавкаНДС
			|ИЗ
			|	РазукомплектацияТовары КАК РазукомплектацияТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ ОстатокПоКомплектации КАК ОстатокПоКомплектации
			|		ПО РазукомплектацияТовары.Номенклатура = ОстатокПоКомплектации.Номенклатура
			|			И РазукомплектацияТовары.ХарактеристикаНоменклатуры = ОстатокПоКомплектации.ХарактеристикаНоменклатуры
			|ГДЕ
			|	РазукомплектацияТовары.Количество - ЕСТЬNULL(ОстатокПоКомплектации.Количество, 0) > 0";
			СкладАвтомобиля=ВыборкаАвтомобиль.СкладКомпании;
			Запрос.УстановитьПараметр("Ссылка",        ШапкаДокумента.Ссылка);
			Запрос.УстановитьПараметр("МоментВремени", ШапкаДокумента.МоментВремени);
			Запрос.УстановитьПараметр("Автомобиль",    ШапкаДокумента.Автомобиль);
			Запрос.УстановитьПараметр("СкладКомпании", СкладАвтомобиля);
			
			ПакетЗапросов = Запрос.ВыполнитьПакет();
			
			ТаблицаДопОборудования = ПакетЗапросов[3].Выгрузить();
			
			НаборЗаписейКомплектацияАвтомобилей.РезультатЗапросаПоТоварам = ПакетЗапросов[2];
			НаборЗаписейКомплектацияАвтомобилей.Автомобиль                = ШапкаДокумента.Автомобиль;
			НаборЗаписейКомплектацияАвтомобилей.СкладКомпании             = СкладАвтомобиля;
			НаборЗаписейКомплектацияАвтомобилей.ПериодДвижения            = ШапкаДокумента.МоментВремени;
			НаборЗаписейКомплектацияАвтомобилей.ШапкаДокумента            = ШапкаДокумента;
			Отказ=НЕ НаборЗаписейКомплектацияАвтомобилей.Расход() ИЛИ Отказ;
			ЕстьАвтомобиль=Истина;
		КонецЕсли; 
	КонецЕсли;
	Если ЕстьАвтомобиль=Ложь Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Автомобиль ""%1"" отсутствует на складах.'"),СокрЛП(ШапкаДокумента.Автомобиль)
			),
			ЭтотОбъект,
			,, Отказ
		);
	КонецЕсли;
	
	// Оприходуем партии товаров и ГТД
	Если НЕ Отказ Тогда
		НаборЗаписейПартии=Движения.ПартииТоваровКомпании;
		НаборЗаписейГТД=Движения.ГТДПартийТоваровКомпании;
		Для каждого СтрокаКомплектации Из НаборЗаписейКомплектацияАвтомобилей Цикл
			
			Если ТипЗнч(СтрокаКомплектации.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
				Продолжить;
			КонецЕсли;
			
			// Партии товаров компании
			НоваяЗапись = НаборЗаписейПартии.Добавить();
			НоваяЗапись.ВидДвижения					= ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период						= ШапкаДокумента.Дата;
			НоваяЗапись.Регистратор					= ШапкаДокумента.Ссылка;
			НоваяЗапись.СкладКомпании				= ШапкаДокумента.СкладКомпании;
			НоваяЗапись.Организация = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
				ШапкаДокумента.Организация,
				НоваяЗапись.СкладКомпании,
				НоваяЗапись.Период
			);
			НоваяЗапись.Номенклатура				= СтрокаКомплектации.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры	= СтрокаКомплектации.ХарактеристикаНоменклатуры;
			НоваяЗапись.СтатусПартии				= СтрокаКомплектации.СтатусПартии;
			НоваяЗапись.Партия						= СтрокаКомплектации.Партия;
			НоваяЗапись.ХозОперация					= ШапкаДокумента.ХозОперация;
			НоваяЗапись.СтавкаНДС					= СтрокаКомплектации.СтавкаНДС;
			НоваяЗапись.Проект						= ШапкаДокумента.Проект;
			НоваяЗапись.Количество					= СтрокаКомплектации.Количество;
			НоваяЗапись.Сумма						= СтрокаКомплектации.Сумма;
			НоваяЗапись.СуммаНДС					= СтрокаКомплектации.СуммаНДС;
			НоваяЗапись.СуммаБезНДС					= СтрокаКомплектации.СуммаБезНДС;
			НоваяЗапись.СуммаУпр					= СтрокаКомплектации.СуммаУпр;
			НоваяЗапись.СуммаНДСУпр					= СтрокаКомплектации.СуммаНДСУпр;
			НоваяЗапись.СуммаБезНДСУпр				= СтрокаКомплектации.СуммаБезНДСУпр;
			// ГТД партии товаров компании
			Если ЗначениеЗаполнено(СтрокаКомплектации.ГТД) Тогда
				НоваяЗапись = НаборЗаписейГТД.Добавить();
				НоваяЗапись.ВидДвижения					= ВидДвиженияНакопления.Приход;
				НоваяЗапись.Период						= ШапкаДокумента.Дата;
				НоваяЗапись.Регистратор					= ШапкаДокумента.Ссылка;
				НоваяЗапись.СкладКомпании				= ШапкаДокумента.СкладКомпании;
				НоваяЗапись.Организация = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
					ШапкаДокумента.Организация,
					НоваяЗапись.СкладКомпании,
					НоваяЗапись.Период
				);
				НоваяЗапись.Номенклатура				= СтрокаКомплектации.Номенклатура;
				НоваяЗапись.ХарактеристикаНоменклатуры	= СтрокаКомплектации.ХарактеристикаНоменклатуры;
				НоваяЗапись.Партия						= СтрокаКомплектации.Партия;
				НоваяЗапись.ГТД							= СтрокаКомплектации.ГТД;
				НоваяЗапись.ХозОперация					= ШапкаДокумента.ХозОперация;
				НоваяЗапись.Количество					= СтрокаКомплектации.Количество;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли; 
	
	// Оприходуем дополнительное оборудование.
	СуммаВсего       = 0;
	СуммаУпрВсего    = 0;
	СуммаНДСВсего    = 0;
	СуммаНДСУпрВсего = 0;
	
	ОснованиеСборкаАвтомобиля =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ШапкаДокумента.ДокументОснование, "ВидРемонта.ТипРемонта") =
			Перечисления.ТипыРемонта.СборкаАвтомобиля;
	
	НаборЗаписейОстаткиАвтомобилей = Движения.ОстаткиАвтомобилей;
	Если НЕ Отказ И НЕ ТаблицаДопОборудования = Неопределено Тогда
		СкладАвтомобиля                = ВыборкаАвтомобиль.СкладКомпании;
		НаборЗаписейПартии             = Движения.ПартииТоваровКомпании;
		НаборЗаписейГТД                = Движения.ГТДПартийТоваровКомпании;
		
		ВалютаРегл     = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(); 
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл,ШапкаДокумента.Дата);
		КурсРегл       = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		ВалютаУпр      = Константы.ВалютаУправленческогоУчетаКомпании.Получить(); 
		КурсУпр        = ШапкаДокумента.КурсВалютыУпр;
		
		Для каждого СтрокаДопоборудования Из ТаблицаДопОборудования Цикл
			
			Если ТипЗнч(СтрокаДопоборудования.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
				Продолжить;
			КонецЕсли;
			
			// Партии товаров компании.
			НоваяЗапись                            = НаборЗаписейПартии.Добавить();
			НоваяЗапись.ВидДвижения                = ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период                     = ШапкаДокумента.Дата;
			НоваяЗапись.Регистратор                = ШапкаДокумента.Ссылка;
			НоваяЗапись.СкладКомпании              = ШапкаДокумента.СкладКомпании;
			НоваяЗапись.Организация = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
				ШапкаДокумента.Организация,
				НоваяЗапись.СкладКомпании,
				НоваяЗапись.Период
			);
			НоваяЗапись.Номенклатура               = СтрокаДопоборудования.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры = СтрокаДопоборудования.ХарактеристикаНоменклатуры;
			НоваяЗапись.СтатусПартии               = ВыборкаАвтомобиль.СтатусПартии;
			НоваяЗапись.Партия                     = ВыборкаАвтомобиль.Партия;
			НоваяЗапись.ХозОперация                = ШапкаДокумента.ХозОперация;
			НоваяЗапись.СтавкаНДС                  = СтрокаДопоборудования.СтавкаНДС;
			НоваяЗапись.Проект                     = ШапкаДокумента.Проект;
			НоваяЗапись.Количество                 = СтрокаДопоборудования.Количество;
			НоваяЗапись.Сумма                      = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаДопоборудования.СуммаВсего,
																									   ШапкаДокумента.ВалютаДокумента,
																									   ШапкаДокумента.КурсДокумента,
																									   ВалютаРегл, КурсРегл),2);
			НоваяЗапись.СуммаУпр                   = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаДопоборудования.СуммаВсего,
																									   ШапкаДокумента.ВалютаДокумента,
																									   ШапкаДокумента.КурсДокумента,
																									   ВалютаУпр,КурсУпр),2);
			НоваяЗапись.СуммаНДС                   = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаДопоборудования.СуммаНДС,
																									   ШапкаДокумента.ВалютаДокумента,
																									   ШапкаДокумента.КурсДокумента,
																									   ВалютаРегл,КурсРегл),2);
			НоваяЗапись.СуммаНДСУпр                = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаДопоборудования.СуммаНДС,
																									   ШапкаДокумента.ВалютаДокумента,
																									   ШапкаДокумента.КурсДокумента,
																									   ВалютаУпр,КурсУпр),2);
			НоваяЗапись.СуммаБезНДС    = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
			НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
			СуммаВсего                 = СуммаВсего + НоваяЗапись.Сумма;
			СуммаУпрВсего              = СуммаУпрВсего + НоваяЗапись.СуммаУпр;
			СуммаНДСВсего              = СуммаНДСВсего + НоваяЗапись.СуммаНДС;
			СуммаНДСУпрВсего           = СуммаНДСУпрВсего + НоваяЗапись.СуммаНДСУпр;
			Если ЗначениеЗаполнено(ВыборкаАвтомобиль.АвтомобильГТД) Тогда
				// ГТД партии товаров компании.
				НоваяЗапись                            = НаборЗаписейГТД.Добавить();
				НоваяЗапись.ВидДвижения                = ВидДвиженияНакопления.Приход;
				НоваяЗапись.Период                     = ШапкаДокумента.Дата;
				НоваяЗапись.Регистратор                = ШапкаДокумента.Ссылка;
				НоваяЗапись.СкладКомпании              = ШапкаДокумента.СкладКомпании;
				НоваяЗапись.Организация = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
					ШапкаДокумента.Организация,
					НоваяЗапись.СкладКомпании,
					НоваяЗапись.Период
				);
				НоваяЗапись.Номенклатура               = СтрокаДопоборудования.Номенклатура;
				НоваяЗапись.ХарактеристикаНоменклатуры = СтрокаДопоборудования.ХарактеристикаНоменклатуры;
				НоваяЗапись.Партия                     = ВыборкаАвтомобиль.Партия;
				НоваяЗапись.ГТД                        = ВыборкаАвтомобиль.АвтомобильГТД;
				НоваяЗапись.ХозОперация                = ШапкаДокумента.ХозОперация;
				НоваяЗапись.Количество                 = СтрокаДопоборудования.Количество;
			КонецЕсли; 
		КонецЦикла;
		
		Если СуммаВсего > ВыборкаАвтомобиль.Сумма Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Себестоимость автомобиля ""%1"" составляет %2 %3. %4 Сумма приходуемых комплектующих составляет %5 %3'"),
					СокрЛП(ШапкаДокумента.Автомобиль),
					Формат(ВыборкаАвтомобиль.Сумма,"ЧДЦ=2; ЧН=0,00"),
					ВалютаРегл,
					Символы.ПС,
					Формат(СуммаВсего,"ЧДЦ=2; ЧН=0,00")
				),
				ЭтотОбъект,,,
				Отказ
			);
		КонецЕсли;
		Если СуммаНДСВсего > ВыборкаАвтомобиль.СуммаНДС Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Сумма НДС автомобиля ""%1"" составляет %2 %3. %4 Сумма НДС приходуемых комплектующих составляет %5 %3'"),
					СокрЛП(ШапкаДокумента.Автомобиль),
					Формат(ВыборкаАвтомобиль.СуммаНДС,"ЧДЦ=2; ЧН=0,00"),
					ВалютаРегл,
					Символы.ПС,
					Формат(СуммаНДСВсего,"ЧДЦ=2; ЧН=0,00")
				),
				ЭтотОбъект,,,
				Отказ
			);
		КонецЕсли;
		
	КонецЕсли;
	
	// Дополним движения приходом автомобилей на склад
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РазукомплектацияАвтомобилейАвтомобили.Автомобиль КАК Автомобиль,
	|	РазукомплектацияАвтомобилейАвтомобили.Цена КАК Цена,
	|	РазукомплектацияАвтомобилейАвтомобили.Сумма КАК Сумма,
	|	РазукомплектацияАвтомобилейАвтомобили.СуммаВсего КАК СуммаВсего,
	|	РазукомплектацияАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС,
	|	РазукомплектацияАвтомобилейАвтомобили.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ СписокАвтомобилей
	|ИЗ
	|	Документ.РазукомплектацияАвтомобилей.Автомобили КАК РазукомплектацияАвтомобилейАвтомобили
	|ГДЕ
	|	РазукомплектацияАвтомобилейАвтомобили.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиАвтомобилей.Автомобиль КАК Автомобиль,
	|	ОстаткиАвтомобилей.Партия КАК Партия
	|ПОМЕСТИТЬ ПартииАвтомобилей
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	|ГДЕ
	|	ОстаткиАвтомобилей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ОстаткиАвтомобилей.Регистратор = &ЗаказНаряд
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокАвтомобилей.Автомобиль КАК Автомобиль,
	|	СписокАвтомобилей.Цена КАК Цена,
	|	СписокАвтомобилей.Сумма КАК Сумма,
	|	СписокАвтомобилей.СуммаВсего КАК СуммаВсего,
	|	СписокАвтомобилей.СтавкаНДС КАК СтавкаНДС,
	|	СписокАвтомобилей.СуммаНДС КАК СуммаНДС,
	|	ЕСТЬNULL(ПартииАвтомобилей.Партия, &ЗаказНаряд) КАК Партия
	|ИЗ
	|	СписокАвтомобилей КАК СписокАвтомобилей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПартииАвтомобилей КАК ПартииАвтомобилей
	|		ПО СписокАвтомобилей.Автомобиль = ПартииАвтомобилей.Автомобиль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиАвтомобилейОстатки.Автомобиль КАК Автомобиль,
	|	ОстаткиАвтомобилейОстатки.СкладКомпании КАК СкладКомпании
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей.Остатки(
	|			&МоментВремени,
	|			Автомобиль В
	|				(ВЫБРАТЬ
	|					СписокАвтомобилей.Автомобиль КАК Автомобиль
	|				ИЗ
	|					СписокАвтомобилей КАК СписокАвтомобилей)) КАК ОстаткиАвтомобилейОстатки";
	Запрос.УстановитьПараметр("Ссылка", ШапкаДокумента.Ссылка);
	Запрос.УстановитьПараметр("ЗаказНаряд", ШапкаДокумента.ДокументОснование);
	Запрос.УстановитьПараметр("МоментВремени", ШапкаДокумента.МоментВремени);
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	АвтомобилиНаСкладе = ПакетЗапроса[3].Выбрать();
	
	Пока АвтомобилиНаСкладе.Следующий() Цикл
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Автомобиль ""%1"" ранее был оприходован на склад ""%2""'"),
				СокрЛП(АвтомобилиНаСкладе.Автомобиль),
				СокрЛП(АвтомобилиНаСкладе.СкладКомпании)
			),
			ЭтотОбъект,,,
			Отказ
		);
		
	КонецЦикла;
	
	СписокАвтомобилей = ПакетЗапроса[2].Выгрузить();
	СуммаАвтомобилейУпрПриход = 0;
	Для Каждого СтрокаАвтомобиль Из СписокАвтомобилей Цикл
		
		НоваяЗаписьОстаткиАвтомобилей = НаборЗаписейОстаткиАвтомобилей.Добавить();
		НоваяЗаписьОстаткиАвтомобилей.ВидДвижения    = ВидДвиженияНакопления.Приход;
		НоваяЗаписьОстаткиАвтомобилей.Период         = ШапкаДокумента.Дата;
		НоваяЗаписьОстаткиАвтомобилей.Регистратор    = ШапкаДокумента.Ссылка;
		НоваяЗаписьОстаткиАвтомобилей.Автомобиль     = СтрокаАвтомобиль.Автомобиль;
		НоваяЗаписьОстаткиАвтомобилей.СкладКомпании  = ШапкаДокумента.СкладКомпании;
		НоваяЗаписьОстаткиАвтомобилей.СтатусПартии   = Перечисления.СтатусыПартий.ТоварКупленный;
		НоваяЗаписьОстаткиАвтомобилей.Партия         = СтрокаАвтомобиль.Партия;
		НоваяЗаписьОстаткиАвтомобилей.Количество     = 1;
		НоваяЗаписьОстаткиАвтомобилей.Сумма          = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаАвтомобиль.СуммаВсего,
				ШапкаДокумента.ВалютаДокумента,
				ШапкаДокумента.КурсДокумента,
				ВалютаРегл, КурсРегл),
			2);
		НоваяЗаписьОстаткиАвтомобилей.СуммаУпр       = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаАвтомобиль.СуммаВсего,
				ШапкаДокумента.ВалютаДокумента,
				ШапкаДокумента.КурсДокумента,
				ВалютаУпр,КурсУпр),
			2);
		НоваяЗаписьОстаткиАвтомобилей.СуммаНДС       = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаАвтомобиль.СуммаНДС,
				ШапкаДокумента.ВалютаДокумента,
				ШапкаДокумента.КурсДокумента,
				ВалютаРегл,КурсРегл),
			2);
		НоваяЗаписьОстаткиАвтомобилей.СуммаНДСУпр    = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаАвтомобиль.СуммаНДС,
				ШапкаДокумента.ВалютаДокумента,
				ШапкаДокумента.КурсДокумента,
				ВалютаУпр,КурсУпр),
			2);
		НоваяЗаписьОстаткиАвтомобилей.СуммаБезНДС    =
			НоваяЗаписьОстаткиАвтомобилей.Сумма - НоваяЗаписьОстаткиАвтомобилей.СуммаНДС;
		НоваяЗаписьОстаткиАвтомобилей.СуммаБезНДСУпр =
			НоваяЗаписьОстаткиАвтомобилей.СуммаУпр - НоваяЗаписьОстаткиАвтомобилей.СуммаНДСУпр;
		НоваяЗаписьОстаткиАвтомобилей.ХозОперация    = ШапкаДокумента.ХозОперация;
		НоваяЗаписьОстаткиАвтомобилей.Проект         = Проект;
		
		СуммаАвтомобилейУпрПриход = СуммаАвтомобилейУпрПриход + НоваяЗаписьОстаткиАвтомобилей.СуммаУпр;
		
		СуммаВсего                 = СуммаВсего + НоваяЗаписьОстаткиАвтомобилей.Сумма;
		СуммаУпрВсего              = СуммаУпрВсего + НоваяЗаписьОстаткиАвтомобилей.СуммаУпр;
		СуммаНДСВсего              = СуммаНДСВсего + НоваяЗаписьОстаткиАвтомобилей.СуммаНДС;
		СуммаНДСУпрВсего           = СуммаНДСУпрВсего + НоваяЗаписьОстаткиАвтомобилей.СуммаНДСУпр;
		
	КонецЦикла;
	
	// Списание автомобиля со склада
	СуммаАвтомобилейУпрРасход = 0;
	Если Не Отказ
		И ЗначениеЗаполнено(ШапкаДокумента.ДокументОснование)
		И ОснованиеСборкаАвтомобиля
		И Не ХозОперация = Справочники.ХозОперации.Демонтаж Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ОстаткиАвтомобилейОстатки.Автомобиль КАК Автомобиль,
		|	ОстаткиАвтомобилейОстатки.СкладКомпании КАК СкладКомпании,
		|	ОстаткиАвтомобилейОстатки.СтатусПартии КАК СтатусПартии,
		|	ОстаткиАвтомобилейОстатки.Партия КАК Партия,
		|	ОстаткиАвтомобилейОстатки.КоличествоОстаток КАК Количество,
		|	ОстаткиАвтомобилейОстатки.СуммаОстаток КАК Сумма,
		|	ОстаткиАвтомобилейОстатки.СуммаНДСОстаток КАК СуммаНДС,
		|	ОстаткиАвтомобилейОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	ОстаткиАвтомобилейОстатки.СуммаУпрОстаток КАК СуммаУпр,
		|	ОстаткиАвтомобилейОстатки.СуммаНДСУпрОстаток КАК СуммаНДСУпр,
		|	ОстаткиАвтомобилейОстатки.СуммаБезНДСУпрОстаток КАК СуммаБезНДСУпр
		|ИЗ
		|	РегистрНакопления.ОстаткиАвтомобилей.Остатки(&МоментВремени, Автомобиль = &Автомобиль) КАК ОстаткиАвтомобилейОстатки";
		Запрос.УстановитьПараметр("МоментВремени", ШапкаДокумента.МоментВремени);
		Запрос.УстановитьПараметр("Автомобиль",    ШапкаДокумента.Автомобиль);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			НоваяЗаписьОстаткиАвтомобилей                = НаборЗаписейОстаткиАвтомобилей.Добавить();
			НоваяЗаписьОстаткиАвтомобилей.ВидДвижения    = ВидДвиженияНакопления.Расход;
			НоваяЗаписьОстаткиАвтомобилей.Период         = ШапкаДокумента.Дата;
			НоваяЗаписьОстаткиАвтомобилей.Регистратор    = ШапкаДокумента.Ссылка;
			НоваяЗаписьОстаткиАвтомобилей.Автомобиль     = Выборка.Автомобиль;
			НоваяЗаписьОстаткиАвтомобилей.СкладКомпании  = Выборка.СкладКомпании;
			НоваяЗаписьОстаткиАвтомобилей.СтатусПартии   = Выборка.СтатусПартии;
			НоваяЗаписьОстаткиАвтомобилей.Партия         = Выборка.Партия;
			НоваяЗаписьОстаткиАвтомобилей.Количество     = 1;
			НоваяЗаписьОстаткиАвтомобилей.Сумма          = Выборка.Сумма;
			НоваяЗаписьОстаткиАвтомобилей.СуммаУпр       = Выборка.СуммаУпр;
			НоваяЗаписьОстаткиАвтомобилей.СуммаНДС       = Выборка.СуммаНДС;
			НоваяЗаписьОстаткиАвтомобилей.СуммаНДСУпр    = Выборка.СуммаНДСУпр;
			НоваяЗаписьОстаткиАвтомобилей.СуммаБезНДС    = Выборка.СуммаБезНДС;
			НоваяЗаписьОстаткиАвтомобилей.СуммаБезНДСУпр = Выборка.СуммаБезНДСУпр;
			НоваяЗаписьОстаткиАвтомобилей.ХозОперация    = ШапкаДокумента.ХозОперация;
			НоваяЗаписьОстаткиАвтомобилей.Проект   		 = Проект;
			СуммаАвтомобилейУпрРасход = Выборка.СуммаУпр;
		Иначе
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Автомобиль ""%1"" не найден на складе.'"),
					СокрЛП(ШапкаДокумента.Автомобиль),
				),
				ЭтотОбъект,,,
				Отказ
			);
		КонецЕсли;
		
	ИначеЕсли НЕ Отказ Тогда
		Если СуммаВсего <> 0 ИЛИ СуммаУпрВсего <> 0 ИЛИ СуммаНДСВсего <> 0 Тогда
			НоваяЗаписьОстаткиАвтомобилей                = НаборЗаписейОстаткиАвтомобилей.Добавить();
			НоваяЗаписьОстаткиАвтомобилей.ВидДвижения    = ВидДвиженияНакопления.Расход;
			НоваяЗаписьОстаткиАвтомобилей.Период         = ШапкаДокумента.Дата;
			НоваяЗаписьОстаткиАвтомобилей.Регистратор    = ШапкаДокумента.Ссылка;
			НоваяЗаписьОстаткиАвтомобилей.Автомобиль     = ВыборкаАвтомобиль.Автомобиль;
			НоваяЗаписьОстаткиАвтомобилей.СкладКомпании  = СкладАвтомобиля;
			НоваяЗаписьОстаткиАвтомобилей.СтатусПартии   = ВыборкаАвтомобиль.СтатусПартии;
			НоваяЗаписьОстаткиАвтомобилей.Партия         = ВыборкаАвтомобиль.Партия;
			НоваяЗаписьОстаткиАвтомобилей.Количество     = 0;
			НоваяЗаписьОстаткиАвтомобилей.Сумма          = СуммаВсего;
			НоваяЗаписьОстаткиАвтомобилей.СуммаУпр       = СуммаУпрВсего;
			НоваяЗаписьОстаткиАвтомобилей.СуммаНДС       = СуммаНДСВсего;
			НоваяЗаписьОстаткиАвтомобилей.СуммаНДСУпр    = СуммаНДСУпрВсего;
			НоваяЗаписьОстаткиАвтомобилей.СуммаБезНДС    = СуммаВсего - СуммаНДСВсего;
			НоваяЗаписьОстаткиАвтомобилей.СуммаБезНДСУпр = СуммаУпрВсего - СуммаНДСУпрВсего;
			НоваяЗаписьОстаткиАвтомобилей.ХозОперация    = ШапкаДокумента.ХозОперация;
			НоваяЗаписьОстаткиАвтомобилей.Проект   		 = Проект;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		// БАЛАНС: Если происходит перемещение товаров между складами подразделений, принадлежащих
		// различным балансовым "веткам", то возможен разрыв баланса.
		ДобавлятьКорректирующиеЗаписи = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
		ПодразделениеОтправитель      = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(СкладАвтомобиля.ПодразделениеКомпании, ШапкаДокумента.Дата);
		ПодразделениеПолучатель       = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ШапкаДокумента.СкладКомпании.ПодразделениеКомпании, ШапкаДокумента.Дата);
	    ДобавлятьКорректирующиеЗаписи = ДобавлятьКорректирующиеЗаписи И (ПодразделениеОтправитель<>ПодразделениеПолучатель);
		// Доходы и расходы
		Если ДобавлятьКорректирующиеЗаписи Тогда
			// У подразделения склада-отправителя возникает расход.
			// У подразделения склада-получателя - доход.
			// Если это перемещение в филиал, то движений "приход" не будет.
			ТаблицаПартий=НаборЗаписейКомплектацияАвтомобилей.Выгрузить();
			ТаблицаПартий.Свернуть("СтатусПартии, ВидДвижения","СуммаУпр");
			Для каждого ТекСтрокаДвижения Из ТаблицаПартий Цикл  	
				Если ТекСтрокаДвижения.СтатусПартии=Перечисления.СтатусыПартий.ТоварПринятыйКомиссия Тогда
					Продолжить;
				КонецЕсли;
				СуммаДиР=ТекСтрокаДвижения.СуммаУпр;
				Если СуммаДиР<>0 Тогда
					НаборЗаписейДоходыРасходы=Движения.ДоходыИРасходы;
					НаборЗаписейДоходыРасходы.ДокументОбъект=ЭтотОбъект;
					НаборЗаписейДоходыРасходы.Подразделение =ПодразделениеОтправитель;
					НаборЗаписейДоходыРасходы.ВУпрВалюте     = Истина;
					НаборЗаписейДоходыРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
					НаборЗаписейДоходыРасходы.ШапкаДокумента = ШапкаДокумента;
					НаборЗаписейДоходыРасходы.Расход         = СуммаДиР;
					Отказ = НЕ НаборЗаписейДоходыРасходы.Приход() ИЛИ Отказ;
					НаборЗаписейДоходыРасходы=Движения.ДоходыИРасходы;
					НаборЗаписейДоходыРасходы.ДокументОбъект = ЭтотОбъект;
					НаборЗаписейДоходыРасходы.Подразделение  = ПодразделениеПолучатель; 
					НаборЗаписейДоходыРасходы.ВУпрВалюте     = Истина;
					НаборЗаписейДоходыРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
					НаборЗаписейДоходыРасходы.ШапкаДокумента = ШапкаДокумента;
					НаборЗаписейДоходыРасходы.Доход          = СуммаДиР;
					Отказ = НЕ НаборЗаписейДоходыРасходы.Приход() ИЛИ Отказ;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// На доходы и расходы добавить сумму автомобилей
		РазностьСуммАвтомобилей = СуммаАвтомобилейУпрПриход - СуммаАвтомобилейУпрРасход;
		Если РазностьСуммАвтомобилей <> 0 Тогда
			НаборЗаписейДоходыРасходы = Движения.ДоходыИРасходы;
			НаборЗаписейДоходыРасходы.ДокументОбъект = ЭтотОбъект;
			Если ДобавлятьКорректирующиеЗаписи Тогда
				НаборЗаписейДоходыРасходы.Подразделение = ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДоходыРасходы.ВУпрВалюте     = Истина;
			НаборЗаписейДоходыРасходы.СтатьяДоходовИРасходов =
				Справочники.СтатьиДоходовИРасходов.СебестоимостьАвтомобилей;
			НаборЗаписейДоходыРасходы.ШапкаДокумента = ШапкаДокумента;
			Если РазностьСуммАвтомобилей > 0 Тогда
				НаборЗаписейДоходыРасходы.Доход = РазностьСуммАвтомобилей;
			Иначе
				НаборЗаписейДоходыРасходы.Расход = -РазностьСуммАвтомобилей;
			КонецЕсли;
			Отказ = НЕ НаборЗаписейДоходыРасходы.Приход() ИЛИ Отказ;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если Ссылка <> ДокументСсылка Тогда
		
		РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоКомплектацииПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоПартиямПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		
	КонецЕсли;
	
	// двигаем границу последовательности комплектации
	РаботаСГраницами.СдвинутьГраницуКомплектации(ДокументСсылка, ДополнительныеСвойства, Движения);
	
	// двигаем границу последовательности партий
	РаботаСГраницами.СдвинутьГраницуПартий(ДокументСсылка, ДополнительныеСвойства, Движения);
	
	Возврат НЕ Отказ;
КонецФункции // ПровестиПоПартиям()

// возвращает выборку по шапке
//
// Параметры:
//  ДокументСсылка - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Выборка - выборка по шапке
//
Функция ПолучитьШапкуДокумента(ДокументСсылка)
	Запрос=Новый Запрос("
	|ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ТипЦен КАК ТипЦен,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Док.Организация КАК Организация,
	|	Док.Проект КАК Проект,
	/////////// ПРИВАТ ////////////
	|	Док.ДокументОснование.СводныйРемонтныйЗаказ.Автомобиль КАК Автомобиль,
	|	Док.СкладКомпании КАК СкладКомпании,
	|	Док.СуммаДокумента КАК СуммаДокумента,
	|	Док.ДокументОснование КАК ДокументОснование
	|
	|ИЗ
	|	Документ."+Метаданные().Имя+" КАК Док
	|ГДЕ
	|	Док.Ссылка=&Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции // ПолучитьШапкуДокумента()

Процедура ПроверитьВозможностьРазукомплектацииСобранногоАвтомобиля(Отказ)
	
	Если ВерсияОбъекта < "02.00" ИЛИ Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеЗаказНаряда = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДокументОснование,
		"ВидРемонта.ТипРемонта,СводныйРемонтныйЗаказ.Автомобиль");
	
	Если ХозОперация = Справочники.ХозОперации.РазукомплектацияАвтомобилей
		И ДанныеЗаказНаряда.ВидРемонтаТипРемонта = Перечисления.ТипыРемонта.СборкаАвтомобиля Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КомплектацияАвтомобилейОстатки.Номенклатура КАК Номенклатура,
		|	КомплектацияАвтомобилейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	КомплектацияАвтомобилейОстатки.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.КомплектацияАвтомобилей.Остатки(&МоментВремени, Автомобиль = &Автомобиль) КАК КомплектацияАвтомобилейОстатки";
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
		Запрос.УстановитьПараметр("Автомобиль", ДанныеЗаказНаряда.СводныйРемонтныйЗаказАвтомобиль);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ВсеКомплектующиеУказаны = Истина;
		Пока Выборка.Следующий() Цикл
			
			Если ТипЗнч(Выборка.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
				
				УсловиеПоиска = Новый Структура("Автомобиль", Выборка.Номенклатура);
				НайденныеСтроки = Автомобили.НайтиСтроки(УсловиеПоиска);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					
					// Не нашли автомобиль.
					ВсеКомплектующиеУказаны = Ложь;
					Прервать;
					
				КонецЕсли;
				
			Иначе
				
				// Поищем в номенклатуру.
				УсловиеПоиска = Новый Структура();
				УсловиеПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
				УсловиеПоиска.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);
				НайденныеСтроки = Товары.НайтиСтроки(УсловиеПоиска);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					
					// Не нашли номенклатуру.
					ВсеКомплектующиеУказаны = Ложь;
					Прервать;
					
				Иначе
					
					КоличествоПоДокументу = 0;
					
					Для Каждого СтрокаТоваров Из НайденныеСтроки Цикл
						
						КоличествоПоДокументу = КоличествоПоДокументу + СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
						
					КонецЦикла;
					
					Если КоличествоПоДокументу < Выборка.Количество Тогда
						
						ВсеКомплектующиеУказаны = Ложь;
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ВсеКомплектующиеУказаны Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Указаны не все запасные части и номерные агрегаты, укажите их или выберите хоз. операцию ""Демонтаж""'"),
				,,, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьВозможностьРазукомплектацииСобранногоАвтомобиля()

#КонецОбласти

Функция ЭтоЗаказНарядПоСборкеАвто(ДокументСсылка)
	
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипРемонта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ВидРемонта.ТипРемонта");
	
	Возврат ТипРемонта = Перечисления.ТипыРемонта.СборкаАвтомобиля;
	
КонецФункции

#КонецОбласти

#Область Инициализация

// Установим параметры проверки документа
ЭтотОбъект.ДополнительныеСвойства.Вставить("ТоварыЗапретАвтоСписанияХарактеристик", ИСТИНА);

#КонецОбласти

#КонецЕсли
