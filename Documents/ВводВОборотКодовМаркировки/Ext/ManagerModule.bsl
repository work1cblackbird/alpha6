// Модуль менеджера документа "Ввод в оборот кодов маркировки".

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект		 - ДанныеФормыСтруктура	 - Объект, для которого выполняется обработка события.
//  Расширенные	 - Булево				 - Признак получения расширенных сведений об итогах операци.
// 
// Возвращаемое значение:
//  Структура - Данные с итогами показателей
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("СпособВводаВОборот");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("Статус");
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	ОбязательныеРеквизиты.Добавить("КодыМаркировки.КодМаркировки");
	ОбязательныеРеквизиты.Добавить("ТоварнаяГруппа");
	
	Если Объект.СпособВводаВОборот = Перечисления.СпособыВводаВОборот.ПолучениеОтФизическихЛиц Тогда
		ОбязательныеРеквизиты.Добавить("ДатаПолученияТовара");
	КонецЕсли;
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	УникальныеРеквизиты = Новый Структура();
	
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	УникальныеРеквизиты.Вставить("Товары", УникальныеТовары);
	
	УникальныеКодыМаркировки = Новый Массив();
	УникальныеКодыМаркировки.Добавить("КодМаркировки");
	УникальныеРеквизиты.Вставить("КодыМаркировки", УникальныеКодыМаркировки);
	Возврат УникальныеРеквизиты;
	
КонецФункции

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	КонтролируемыеРеквизиты = Новый Структура();
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
// 
// Возвращаемое значение:
//  Структура - Параметры действия.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	ПараметрыДействия.Вставить("ТребуетсяУстановкаЦен", Ложь);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Строка.ИдентификаторТовара) Тогда
		Строка.ИдентификаторТовара = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Строка.СтранаПроизводства = Строка.Номенклатура.СтранаПроисхождения;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//  Параметры - Структура - Вспомогательные параметры. 
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Товары");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ВводВОборотКодовМаркировки");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Товары");
	КонецЕсли;
	//
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить коды маркировок по заказам на эмиссию'");
	Команда.Идентификатор	= "ЗаполнитьКодыМаркировкиИзЗаказов";
	//
	ВыборСклада		 				= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборСклада.ВыборСсылки 		= "Справочник.СкладыКомпании.ФормаСписка";
	ВыборСклада.Обязательный 		= Истина;
	ВыборСклада.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать склад компании.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить складскими остатками'");
	Команда.Идентификатор	= "ЗаполнитьСкладскимиОстатками";
	Команда.Порядок			= 51;                                                                   
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", ВыборСклада);
    //
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить складским остаткам немаркированных товаров'");
	Команда.Идентификатор	= "ЗаполнитьСкладскимиОстаткамиНеМаркируемыми";
	Команда.Порядок			= 52;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", ВыборСклада);
	//
	ВыборСклада		 				= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборСклада.ВыборСсылки 		= "Справочник.СкладыКомпании.ФормаСписка";
	ВыборСклада.Обязательный 		= Истина;
	ВыборСклада.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать склад компании.'");
	
	ВыборГруппыНоменклатуры		 				= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборГруппыНоменклатуры.ВыборСсылки 		= "Справочник.Номенклатура.ФормаВыбораГруппы";
	ВыборГруппыНоменклатуры.Обязательный 		= Истина;
	ВыборГруппыНоменклатуры.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать группу номенклатуры.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить остатками по группе номенклатуры'");
	Команда.Идентификатор	= "ЗаполнитьСкладскимиОстаткамиПоГруппе";
	Команда.Порядок			= 53;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", 		ВыборСклада);
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ГруппаНоменклатуры", ВыборГруппыНоменклатуры);
	
КонецПроцедуры

// Производит формирование структуры с доступностью команд заполнения объекта
//
// Параметры:
//  Объект	 - ДанныеФормыСтруктура	 - Объект, для которого выполняется обработка события.
// 
// Возвращаемое значение:
//  Соответствие - Настройка доступности и видимости команд заполнения
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	ДоступностьКоманд = Новый Соответствие;
	ДоступностьКоманд.Вставить("ТоварыЗаполнитьКодыМаркировкиИзЗаказов.Видимость"            , Истина);
	ДоступностьКоманд.Вставить("ТоварыЗаполнитьКодыМаркировкиИзЗаказов.Доступность"          , Истина);
	ДоступностьКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстатками.Видимость"                , Истина);
	ДоступностьКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстатками.Доступность"              , Истина);
	ДоступностьКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстаткамиНеМаркируемыми.Видимость"  , Истина);
	ДоступностьКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстаткамиНеМаркируемыми.Доступность", Истина);
	ДоступностьКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстаткамиПоГруппе.Видимость"        , Истина);
	ДоступностьКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстаткамиПоГруппе.Доступность"      , Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ДоступностьКоманд;
	
КонецФункции

// Заполнение табличной части документа заказанными кодами маркировки
//
// Параметры:
//  Ссылка				 - ДокументСсылка.ВводВОборотКодовМаркировки - Документ ввода в оборот
//  ПараметрыКоманды	 - Структура - Параметры для заполнения
//  ПараметрыДействия	 - Структура - Дополнительные параметры
// 
// Возвращаемое значение:
//  Неопределено - Функция не возвращает определенное значение
//
Функция ЗаполнитьКодыМаркировкиИзЗаказов(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Проверим связанные Заказы с документом
	ТекстЗапроса = Новый Массив;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		ТекстЗапроса.Добавить("ВЫБРАТЬ
		|	ЗаказКодовМаркировки.Ссылка КАК Заказ
		|ПОМЕСТИТЬ СписокЗаказов
		|ИЗ
		|	Документ.ЗаказКодовМаркировки КАК ЗаказКодовМаркировки
		|ГДЕ
		|	ЗаказКодовМаркировки.ДокументОснование = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияКодовМаркировки.Номенклатура КАК Номенклатура,
		|	СостоянияКодовМаркировки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СостоянияКодовМаркировки.КодМаркировки КАК КодМаркировки
		|ИЗ
		|	СписокЗаказов КАК СписокЗаказов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКодовМаркировки КАК СостоянияКодовМаркировки
		|		ПО СписокЗаказов.Заказ = СостоянияКодовМаркировки.ДокументОснование");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказКодовМаркировки") Тогда
		
		ТекстЗапроса.Добавить("ВЫБРАТЬ
		|	СостоянияКодовМаркировки.Номенклатура,
		|	СостоянияКодовМаркировки.ХарактеристикаНоменклатуры,
		|	СостоянияКодовМаркировки.КодМаркировки
		|ИЗ
		|	РегистрСведений.СостоянияКодовМаркировки КАК СостоянияКодовМаркировки
		|ГДЕ
		|	СостоянияКодовМаркировки.ДокументОснование = &ДокументОснование");
		
	КонецЕсли;
	
	Если ТекстЗапроса.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаСоединения = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстЗапроса, СтрокаСоединения);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", Объект.ДокументОснование);
	
	СписокМаркировок = Запрос.Выполнить().Выгрузить();
	
	СтруктураПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
	
	Для Каждого ТекущаяСтрока Из СписокМаркировок Цикл
		// Такой код уже добавлен
		ПараметрыОтбора = Новый Структура("КодМаркировки", ТекущаяСтрока.КодМаркировки);
		Если Объект.КодыМаркировки.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Найдем строку с товаром
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущаяСтрока);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаТовара Из НайденныеСтроки Цикл
			
			ПараметрыОтбора = Новый Структура("ИдентификаторТовара", СтрокаТовара.ИдентификаторТовара);
			КоличествоКодов = Объект.КодыМаркировки.НайтиСтроки(ПараметрыОтбора).Количество();
			Если СтрокаТовара.Количество * СтрокаТовара.Коэффициент = КоличествоКодов Тогда
				// Для данной строки заполнили
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Объект.КодыМаркировки.Добавить();
			НоваяСтрока.ИдентификаторТовара = СтрокаТовара.ИдентификаторТовара;
			НоваяСтрока.КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(ТекущаяСтрока.КодМаркировки);
			
			Прервать;
			
		КонецЦикла;
		
	КонецЦикла;

КонецФункции

// Заполнение табличной части документа остатками по складу
//
// Параметры:
//  Ссылка				 - ДокументСсылка.ВводВОборотКодовМаркировки - Документ ввода в оборот
//  ПараметрыКоманды	 - Структура - Параметры для заполнения
//  ПараметрыДействия	 - Структура - Дополнительные параметры
// 
// Возвращаемое значение:
//  Неопределено - Функция не возвращает определенное значение
//
Функция ЗаполнитьСкладскимиОстатками(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	ОстаткиТоваров 		= ЗаполнениеДокументовСервер.ПолучитьСкладскиеОстатки(Объект, ПараметрыЗаполнения);
	ЗаполнитьТЧОстаткамиТоваров(Объект, ОстаткиТоваров);
	
	// Проверим, что есть строки с маркировками после заполнения.
	СтрокиУдалить = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из Объект.КодыМаркировки Цикл
		ПараметрыОтбора = Новый Структура("ИдентификаторТовара", ТекущаяСтрока.ИдентификаторТовара);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокиУдалить.Добавить(ТекущаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		Объект.КодыМаркировки.Удалить(СтрокаУдалить);
	КонецЦикла;

КонецФункции

// Заполнение табличной части документа остатками немаркированных товаров по складу
//
// Параметры:
//  Ссылка				 - ДокументСсылка.ВводВОборотКодовМаркировки - Документ ввода в оборот
//  ПараметрыКоманды	 - Структура - Параметры для заполнения
//  ПараметрыДействия	 - Структура - Дополнительные параметры
// 
// Возвращаемое значение:
//  Неопределено - Функция не возвращает определенное значение
//
Функция ЗаполнитьСкладскимиОстаткамиНеМаркируемыми(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	ОстаткиТоваров 		= ЗаполнениеДокументовСервер.ПолучитьСкладскиеОстатки(Объект, ПараметрыЗаполнения);
	Если ТипЗнч(ОстаткиТоваров) = Тип("ТаблицаЗначений") Тогда
		// Получим ТЗ по кодам, которые уже нанесены на товар
		Запрос 			= Новый Запрос;
		Запрос.Текст 	= 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СостоянияКодовМаркировкиСрезПоследних.Период КАК Период,
			|	СостоянияКодовМаркировкиСрезПоследних.КодМаркировки КАК КодМаркировки,
			|	СостоянияКодовМаркировкиСрезПоследних.Состояние КАК Состояние,
			|	СостоянияКодовМаркировкиСрезПоследних.Номенклатура КАК Номенклатура,
			|	СостоянияКодовМаркировкиСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
			|ПОМЕСТИТЬ СостоянияКодовМаркировки
			|ИЗ
			|	РегистрСведений.СостоянияКодовМаркировки.СрезПоследних(
			|			&МоментВремени,
			|			Номенклатура В (&Номенклатура)
			|				И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)
			|				И Организация = &Организация) КАК СостоянияКодовМаркировкиСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СостоянияКодовМаркировки.КодМаркировки КАК КодМаркировки,
			|	МАКСИМУМ(СостоянияКодовМаркировки.Период) КАК Период
			|ПОМЕСТИТЬ ПоследнееСостояние
			|ИЗ
			|	СостоянияКодовМаркировки КАК СостоянияКодовМаркировки
			|
			|СГРУППИРОВАТЬ ПО
			|	СостоянияКодовМаркировки.КодМаркировки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СостоянияКодовМаркировки.Номенклатура КАК Номенклатура,
			|	СостоянияКодовМаркировки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	СУММА(1) КАК Количество
			|ИЗ
			|	СостоянияКодовМаркировки КАК СостоянияКодовМаркировки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоследнееСостояние КАК ПоследнееСостояние
			|		ПО СостоянияКодовМаркировки.КодМаркировки = ПоследнееСостояние.КодМаркировки
			|			И СостоянияКодовМаркировки.Период = ПоследнееСостояние.Период
			|ГДЕ
			|	СостоянияКодовМаркировки.Состояние В(&СписокСостоянийВОбороте)
			|
			|СГРУППИРОВАТЬ ПО
			|	СостоянияКодовМаркировки.Номенклатура,
			|	СостоянияКодовМаркировки.ХарактеристикаНоменклатуры";
		
		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
			МоментВремени = Новый МоментВремени(КонецДня(Объект.Дата));
		Иначе
			МоментВремени = Ссылка.МоментВремени();
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
		СписокСостоянийВОбороте 	= Перечисления.СостоянияКодовМаркировки.СостоянияВводаВОборотМаркировки();
		Запрос.УстановитьПараметр("СписокСостоянийВОбороте", СписокСостоянийВОбороте);
		Запрос.УстановитьПараметр("Номенклатура", ОстаткиТоваров.ВыгрузитьКолонку("Номенклатура"));
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ОстаткиТоваров.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		
		РезультатЗапроса 			= Запрос.Выполнить();
		ТаблицаМаркированныхТоваров = Неопределено;
		Если Не РезультатЗапроса.Пустой() Тогда 
			ТаблицаМаркированныхТоваров = РезультатЗапроса.Выгрузить();
		КонецЕсли;
		
		ЗаполнитьТЧОстаткамиТоваров(Объект, ОстаткиТоваров, ТаблицаМаркированныхТоваров);
	КонецЕсли;

	СтрокиУдалить = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из Объект.КодыМаркировки Цикл
		ПараметрыОтбора = Новый Структура("ИдентификаторТовара", ТекущаяСтрока.ИдентификаторТовара);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокиУдалить.Добавить(ТекущаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		Объект.КодыМаркировки.Удалить(СтрокаУдалить);
	КонецЦикла;

КонецФункции

// Заполнение табличной части документа остатками по складу по группе номенклатуры
//
// Параметры:
//  Ссылка				 - ДокументСсылка.ВводВОборотКодовМаркировки - Документ ввода в оборот
//  ПараметрыКоманды	 - Структура - Параметры для заполнения
//  ПараметрыДействия	 - Структура - Дополнительные параметры
// 
// Возвращаемое значение:
//  Неопределено - Функция не возвращает определенное значение
//
Функция ЗаполнитьСкладскимиОстаткамиПоГруппе(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	ОстаткиТоваров = ЗаполнениеДокументовСервер.ПолучитьСкладскиеОстатки(Объект, ПараметрыЗаполнения);
	ЗаполнитьТЧОстаткамиТоваров(Объект, ОстаткиТоваров);
	// Проверим, что есть строки с маркировками после заполнения.
	СтрокиУдалить = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из Объект.КодыМаркировки Цикл
		ПараметрыОтбора = Новый Структура("ИдентификаторТовара", ТекущаяСтрока.ИдентификаторТовара);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокиУдалить.Добавить(ТекущаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		Объект.КодыМаркировки.Удалить(СтрокаУдалить);
	КонецЦикла;

КонецФункции

Процедура ЗаполнитьТЧОстаткамиТоваров(Объект, ОстаткиТоваров, ТаблицаМаркированныхТоваров = Неопределено)

	СтруктураПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
	
	Для Каждого СтрокаТовар Из ОстаткиТоваров Цикл
		Если Не СтрокаТовар.Номенклатура.ТипНоменклатуры.ВедетсяМаркировка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТаблицаМаркированныхТоваров <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовар);
			НайденнаяСтрока = ТаблицаМаркированныхТоваров.НайтиСтроки(СтруктураПоиска);
			
			Если НайденнаяСтрока.Количество() > 0 Тогда
				СтрокаТовар.Количество = СтрокаТовар.Количество - НайденнаяСтрока[0].Количество;
				// Весь товар на складе промаркирован
				Если СтрокаТовар.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока 							= Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура 				= СтрокаТовар.Номенклатура;
		Документы.ВводВОборотКодовМаркировки.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока);
		НоваяСтрока.ХарактеристикаНоменклатуры 	= СтрокаТовар.ХарактеристикаНоменклатуры;
		Документы.ВводВОборотКодовМаркировки.ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, НоваяСтрока);
		НоваяСтрока.Количество 					= СтрокаТовар.Количество;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления

// Возвращает все документы, в которых присутствуют коды маркировки.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка результата запроса, содержащая требуемые документы.
//
Функция ДокументыСКодамиМаркировки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВводВОборотКодовМаркировкиКодыМаркировки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВводВОборотКодовМаркировки.КодыМаркировки КАК ВводВОборотКодовМаркировкиКодыМаркировки
	|ГДЕ
	|	ВводВОборотКодовМаркировкиКодыМаркировки.КодМаркировки <> """"";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Процедура зачистки криптохвостов кодов маркировки.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ВводВОборотКодовМаркировки - документ, для которого выполняется действие.
//
Процедура ОтрезатьКриптохвосты(ДокументОбъект) Экспорт
	
	Для Каждого СтрокаТоваров Из ДокументОбъект.КодыМаркировки Цикл
		СтрокаТоваров.КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(СтрокаТоваров.КодМаркировки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказКодовМаркировки);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
	
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
		
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ВводВОборотКодовМаркировки);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.  
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получение данных документа для ввода в оборот
//
// Параметры:
//  Объект	 - ДокументСсылка.ВводВОборотКодовМаркировки - Документ, для которого получаем данные
// 
// Возвращаемое значение:
//  Структура - Данные документа в формате для отправки запроса
//
Функция ДанныеВводаВОборотКодовМаркировки(Объект) Экспорт
	
	ТекстСообщения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВводВОборотКодовМаркировки.Организация.ИНН КАК ОрганизацияИНН,
	|	ВводВОборотКодовМаркировки.СпособВводаВОборот КАК СпособВводаВОборот,
	|	ВводВОборотКодовМаркировки.ДатаПолученияТовара КАК ДатаПолученияТовара
	|ИЗ
	|	Документ.ВводВОборотКодовМаркировки КАК ВводВОборотКодовМаркировки
	|ГДЕ
	|	ВводВОборотКодовМаркировки.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВводВОборотКодовМаркировкиТовары.ИдентификаторТовара КАК ИдентификаторТовара,
	|	ВводВОборотКодовМаркировкиТовары.РегистрационныйНомерДТ КАК РегистрационныйНомерДТ,
	|	ВводВОборотКодовМаркировкиТовары.ДатаРегистрацииДТ КАК ДатаРегистрацииДТ,
	|	ВводВОборотКодовМаркировкиТовары.ВидДокументаРегистрации КАК ВидДокументаРегистрации,
	|	ВводВОборотКодовМаркировкиТовары.НомерДокументаСоответствия КАК НомерДокументаСоответствия,
	|	ВводВОборотКодовМаркировкиТовары.ДатаДокументаСоответствия КАК ДатаДокументаСоответствия,
	|	ВводВОборотКодовМаркировкиТовары.СтранаПроизводства.Код КАК СтранаПроизводства,
	|	ВводВОборотКодовМаркировкиТовары.ДатаПолученияТовара КАК ДатаПолученияТовара
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	Документ.ВводВОборотКодовМаркировки.Товары КАК ВводВОборотКодовМаркировкиТовары
	|ГДЕ
	|	ВводВОборотКодовМаркировкиТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВводВОборотКодовМаркировкиКодыМаркировки.ИдентификаторТовара КАК ИдентификаторТовара,
	|	ВводВОборотКодовМаркировкиКодыМаркировки.КодМаркировки КАК КодМаркировки
	|ПОМЕСТИТЬ ТаблицаКМ
	|ИЗ
	|	Документ.ВводВОборотКодовМаркировки.КодыМаркировки КАК ВводВОборотКодовМаркировкиКодыМаркировки
	|ГДЕ
	|	ВводВОборотКодовМаркировкиКодыМаркировки.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКМ.КодМаркировки КАК КодМаркировки,
	|	ТаблицаТоваров.РегистрационныйНомерДТ КАК РегистрационныйНомерДТ,
	|	ТаблицаТоваров.ДатаРегистрацииДТ КАК ДатаРегистрацииДТ,
	|	ТаблицаТоваров.ВидДокументаРегистрации КАК ВидДокументаРегистрации,
	|	ТаблицаТоваров.НомерДокументаСоответствия КАК НомерДокументаСоответствия,
	|	ТаблицаТоваров.ДатаДокументаСоответствия КАК ДатаДокументаСоответствия,
	|	ТаблицаТоваров.СтранаПроизводства КАК СтранаПроизводства,
	|	ТаблицаТоваров.ДатаПолученияТовара КАК ДатаПолученияТовара
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКМ КАК ТаблицаКМ
	|		ПО ТаблицаТоваров.ИдентификаторТовара = ТаблицаКМ.ИдентификаторТовара";
	Запрос.УстановитьПараметр("Ссылка", Объект);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ШапкаДокумента = ПакетЗапроса[0].Выбрать();
	ШапкаДокумента.Следующий();
	СтрокиДокумента = ПакетЗапроса[3].Выбрать();
	
	// Формируем данные для ввода остатков в оборот
	Если ШапкаДокумента.СпособВводаВОборот = Перечисления.СпособыВводаВОборот.МаркировкаОстатков Тогда
		
		ТекстСообщения = ТекстСообщенияВводаВОборотМаркировкиОстатков(ШапкаДокумента, СтрокиДокумента);
		
	ИначеЕсли ШапкаДокумента.СпособВводаВОборот = Перечисления.СпособыВводаВОборот.ПолучениеОтФизическихЛиц Тогда
		
		ТекстСообщения = ТекстСообщенияВводаВОборотПолученныхОтФизическихЛиц(ШапкаДокумента, СтрокиДокумента);
		
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция ТекстСообщенияВводаВОборотМаркировкиОстатков(ШапкаДокумента, СтрокиДокумента)
	
	ТекстСообщения = Новый Структура;
	
	// Укажим шапку документа
	ТекстСообщения.Вставить("trade_participant_inn", СокрЛП(ШапкаДокумента.ОрганизацияИНН));
	
	// Табличная часть с КМ
	ТекстСообщения.Вставить("products_list", Новый Массив);
	
	Пока СтрокиДокумента.Следующий() Цикл
		
		СтруктураМаркировки = МенеджерОборудованияМаркировка.РазобратьШтриховойКодТовара(СтрокиДокумента.КодМаркировки);
		
		// Только КМ добавляем
		Если СтруктураМаркировки.ТипИдентификатораТовара <>
				ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1") Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаКМ = Новый Структура;
		
		КИ = "01" + СтруктураМаркировки.GTIN + "21" + СтруктураМаркировки.СерийныйНомер;
		СтрокаКМ.Вставить("ki", КИ);
		
		Если ЗначениеЗаполнено(СтрокиДокумента.СтранаПроизводства) Тогда
			СтрокаКМ.Вставить("country", СтрокиДокумента.СтранаПроизводства);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокиДокумента.ДатаРегистрацииДТ) Тогда
			ДатаРегистрации = Формат(СтрокиДокумента.ДатаРегистрацииДТ, "ДФ=dd.MM.yyyy");
			СтрокаКМ.Вставить("declaration_date", ДатаРегистрации);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокиДокумента.РегистрационныйНомерДТ) Тогда
			СтрокаКМ.Вставить("declaration_number", СтрокиДокумента.РегистрационныйНомерДТ);
		КонецЕсли;
		
		ВидДокумента = ОбменССистемойМаркировкиСервер.ВидДокументаСоответствия(
		СтрокиДокумента.ВидДокументаРегистрации);
		
		Если ЗначениеЗаполнено(ВидДокумента) Тогда
			СтрокаКМ.Вставить("certificate_type", ВидДокумента);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокиДокумента.НомерДокументаСоответствия) Тогда
			СтрокаКМ.Вставить("certificate_number", СтрокиДокумента.НомерДокументаСоответствия);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокиДокумента.ДатаДокументаСоответствия) Тогда
			ДатаДокументаСоответствия = Формат(СтрокиДокумента.ДатаДокументаСоответствия, "ДФ=dd.MM.yyyy");
			СтрокаКМ.Вставить("certificate_date", ДатаДокументаСоответствия);
		КонецЕсли;
		
		ТекстСообщения.products_list.Добавить(СтрокаКМ);
		
	КонецЦикла;
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция ТекстСообщенияВводаВОборотПолученныхОтФизическихЛиц(ШапкаДокумента, СтрокиДокумента)
	
	ТекстСообщения = Новый Структура;
	
	// Укажим шапку документа
	ТекстСообщения.Вставить("participant_inn", СокрЛП(ШапкаДокумента.ОрганизацияИНН));
	ТекстСообщения.Вставить("product_receiving_date", Формат(ШапкаДокумента.ДатаПолученияТовара, "ДФ=dd.MM.yyyy"));
	
	// Табличная часть с КМ
	ТекстСообщения.Вставить("products_list", Новый Массив);
	
	Пока СтрокиДокумента.Следующий() Цикл
		
		СтруктураМаркировки = МенеджерОборудованияМаркировка.РазобратьШтриховойКодТовара(СтрокиДокумента.КодМаркировки);
		
		// Только КМ добавляем
		Если СтруктураМаркировки.ТипИдентификатораТовара <>
				ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1") Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаКМ = Новый Структура;
		
		КИ = "01" + СтруктураМаркировки.GTIN + "21" + СтруктураМаркировки.СерийныйНомер;
		СтрокаКМ.Вставить("uit", КИ);
		
		ДатаПолученияТовара =
			?(ЗначениеЗаполнено(СтрокиДокумента.ДатаПолученияТовара),
			СтрокиДокумента.ДатаПолученияТовара,
			ШапкаДокумента.ДатаПолученияТовара);
		СтрокаКМ.Вставить("product_receiving_date", Формат(ДатаПолученияТовара, "ДФ=dd.MM.yyyy"));
		
		ТекстСообщения.products_list.Добавить(СтрокаКМ);
		
	КонецЦикла;
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция ЗапросДокумента(Объект, ПараметрыОбмена, Сообщение) Экспорт
	
	СтруктураСообщения = ДанныеВводаВОборотКодовМаркировки(Объект);
	
	Возврат СтруктураСообщения;
	
КонецФункции

Процедура ЗаполнитьСтатусыКодовМаркировки(Ссылка, Отказ, СтатусДокумента = Неопределено) Экспорт
	
	ДанныеСтатусаДокумента = РегистрыСведений.СтатусыДокументовМаркировки.ПолучитьСтатусДокумента(Ссылка);
	Если СтатусДокумента = Неопределено Тогда 
		СтатусДокумента = ДанныеСтатусаДокумента.Статус;
	КонецЕсли;
	
	Если НЕ Отказ И СтатусДокумента = Перечисления.СтатусыДокументовМаркировки.Выполнен Тогда 
		
		ЭтотОбъект = Ссылка.ПолучитьОбъект();
		
		// Изменим состояние маркировки
		НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
		НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
		
		КодыМаркировки = НаборЗаписейСостоянияКодовМаркировки.ТаблицаКодовМаркировки();
		
		// Дополним коды маркировки периодами 
		НаборЗаписейСостоянияКодовМаркировки.Период = ТекущаяДатаСеанса();
		
		// Если ранее выб установлен режим "Выполнен"
		Если ДанныеСтатусаДокумента.Статус = Перечисления.СтатусыДокументовМаркировки.Выполнен Тогда
			ЗаполнитьПериодУстановкиСтатусаКодаМаркировки(КодыМаркировки, Ссылка);
		КонецЕсли;
		
		НаборЗаписейСостоянияКодовМаркировки.Организация = Ссылка.Организация;
		НаборЗаписейСостоянияКодовМаркировки.Состояние = Перечисления.СостоянияКодовМаркировки.ВведенВОборот;
		НаборЗаписейСостоянияКодовМаркировки.РезультатЗапросаПоКодамМаркировки = КодыМаркировки;
		НаборЗаписейСостоянияКодовМаркировки.РежимПроведения = РежимПроведенияДокумента.Неоперативный;
		НаборЗаписейСостоянияКодовМаркировки.ПроверятьВводВОборот = Истина;
		
		Если Не НаборЗаписейСостоянияКодовМаркировки.СостояниеКодовМаркировки() Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПериодУстановкиСтатусаКодаМаркировки(КодыМаркировки, Документ)
	
	СтатусыКодовМаркировкиПоДокументу =
		РегистрыСведений.СостоянияКодовМаркировки.СтатусыКодовМаркировкиПоДокументу(Документ);
	
	КодыМаркировки.Колонки.Добавить("Период");
	УсловиеПоиска = Новый Структура("КодМаркировки");
	Для Каждого ТекущийКодМаркировки Из КодыМаркировки Цикл
		
		ЗаполнитьЗначенияСвойств(УсловиеПоиска, ТекущийКодМаркировки);
		НайденныеСтроки = СтатусыКодовМаркировкиПоДокументу.НайтиСтроки(УсловиеПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийКодМаркировки.Период = НайденныеСтроки[0].Период;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли