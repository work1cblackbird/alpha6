// Модуль менеджера документа "Тест-драйв"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", 0);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используеся в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость выводв только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возращаемая сторка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить = Ложь, ТолькоОсновныеКонтакты = Истина) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

// Формирование набора записей регистра "График работы ресурсов" по тест-драйву
//
// Параметры:
//   Ссылка - Ссылка на документ тест-драйв.
//
// Возвращаемое значение:
//   Булево - Результат записи набора записей в регистр.
Функция ЗаполнитьГрафикРаботыАвтомобилей(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Очистим регистр ГрафикРаботыРесурсов
	НаборЗаписейГрафикРаботыРесурсов = РегистрыСведений.ГрафикРаботыРесурсов.СоздатьНаборЗаписей();
	НаборЗаписейГрафикРаботыРесурсов.ДокументОбъект = Ссылка;
	НаборЗаписейГрафикРаботыРесурсов.ОтменаПроведения();
	
	НаборЗаписей = Новый ТаблицаЗначений;
	НаборЗаписей.Колонки.Добавить("Ресурс1", Новый ОписаниеТипов("СправочникСсылка.Автомобили"));
	НаборЗаписей.Колонки.Добавить("Ресурс2", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	НаборЗаписей.Колонки.Добавить("Объект");
	НаборЗаписей.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	НаборЗаписей.Колонки.Добавить("НачалоРабочегоВремени", Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	НаборЗаписей.Колонки.Добавить("КонецРабочегоВремени", Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	НаборЗаписей.Колонки.Добавить("Продолжительность", Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	НаборЗаписей.Колонки.Добавить("КоличествоНатуральныхЕдиниц", Новый ОписаниеТипов("Число"));
	НаборЗаписей.Колонки.Добавить("НапомнитьЗа", Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	НаборЗаписей.Колонки.Добавить("ХозОперация", Новый ОписаниеТипов("СправочникСсылка.ХозОперации"));
	НаборЗаписей.Колонки.Добавить("Авторабота", Новый ОписаниеТипов("СправочникСсылка.Автоработы"));
	
	// определим дату начала
	ДатаНачала = Ссылка.ДатаНачала;
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		Попытка
			ДатаНачала = Ссылка.ДатаСоздания;
		Исключение 
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка заполнения даты начала'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки; 
	ИначеЕсли НЕ ЗначениеЗаполнено(НачалоДня(ДатаНачала)) Тогда
		Попытка
			ДатаНачала = НачалоДня(Ссылка.ДатаСоздания) + Час(ДатаНачала) * 60 * 60 + Минута(ДатаНачала) * 60 + Секунда(ДатаНачала);
		Исключение 
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка заполнения даты начала'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
		КонецПопытки; 
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = Ссылка.Дата;
	ИначеЕсли НЕ ЗначениеЗаполнено(НачалоДня(ДатаНачала)) Тогда
		ДатаНачала = НачалоДня(Ссылка.Дата) + Час(ДатаНачала) * 60 * 60 + Минута(ДатаНачала) * 60 + Секунда(ДатаНачала);
	КонецЕсли;
	
	// определим дату окончания
	ДатаОкончания = Ссылка.ДатаОкончания;
	Если НЕ ЗначениеЗаполнено(ДатаОкончания) ИЛИ НЕ ЗначениеЗаполнено(НачалоДня(ДатаОкончания)) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнена дата окончания тест-драйва.'"));
		Возврат Ложь;
	КонецЕсли; 
	Если ДатаОкончания = ДатаНачала Тогда 
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Дата начала и дата окончания тест-драйва совпадают.'"));
		Возврат Ложь;
	КонецЕсли; 
	
	Если НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала) = 0 Тогда
		// Начало окончание в одном дне
		СтрокаГрафикаРаботыРесурсов = НаборЗаписей.Добавить();
		СтрокаГрафикаРаботыРесурсов.Ресурс1 = Ссылка.Автомобиль;
		СтрокаГрафикаРаботыРесурсов.Ресурс2 = Ссылка.Менеджер;
		СтрокаГрафикаРаботыРесурсов.Объект = Ссылка;
		СтрокаГрафикаРаботыРесурсов.Дата = НачалоДня(ДатаНачала);
		СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени = '00010101' + (ДатаНачала - НачалоДня(ДатаНачала));
		СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени = '00010101' + (ДатаОкончания - НачалоДня(ДатаОкончания));
		СтрокаГрафикаРаботыРесурсов.Продолжительность = '00010101' + (СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени - СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени);
		СтрокаГрафикаРаботыРесурсов.ХозОперация = Ссылка.ХозОперация;
	Иначе
		Разница = (НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала)) / 60 / 60 / 24;
		ТекущийДень = НачалоДня(ДатаНачала);
		Пока Разница >= 0 Цикл
			СтрокаГрафикаРаботыРесурсов = НаборЗаписей.Добавить();
			СтрокаГрафикаРаботыРесурсов.Ресурс1 = Ссылка.Автомобиль;
			СтрокаГрафикаРаботыРесурсов.Ресурс2 = Ссылка.Менеджер;
			СтрокаГрафикаРаботыРесурсов.Объект = Ссылка;
			СтрокаГрафикаРаботыРесурсов.Дата = ТекущийДень;					
			// Установим НачалоРабочегоВремени 
			Если ТекущийДень = НачалоДня(ДатаНачала) Тогда
				СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени = '00010101' + (ДатаНачала - НачалоДня(ДатаНачала));
			Иначе
				СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени = '00010101';
			КонецЕсли;
			// Установим КонецРабочегоВремени
			Если ТекущийДень = НачалоДня(ДатаОкончания) Тогда
				СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени = '00010101' + (ДатаОкончания - НачалоДня(ДатаОкончания));
			Иначе
				СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени = '00010101235959';
			КонецЕсли;
			// Посчитаем Продолжительность
			СтрокаГрафикаРаботыРесурсов.Продолжительность = '00010101' + (СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени - СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени);
			СтрокаГрафикаРаботыРесурсов.ХозОперация = Ссылка.ХозОперация;
			
			ТекущийДень = ТекущийДень + 1 * 60 * 60 * 24;
			Разница = Разница - 1;
		КонецЦикла;
	КонецЕсли;
	
	НаборЗаписейГрафикРаботыРесурсов.НаборЗаписей = НаборЗаписей;
	НаборЗаписейГрафикРаботыРесурсов.Проведение();
	
	Возврат Истина;
КонецФункции // орГрафикРаботыРесурсовПоЗаказНаряду() 

// Возвращает структуру, которая содержит анкеты тест-драйва по данной модели
//
// Параметры:
//   Модель - Модель автомобиля.
//   Дата - Дата получения значения.
//
// Возвращаемое значение:
//   Структура - содержит 2 записи (предварительная и итоговая анкета).
Функция ПолучитьАнкетыТестДрайва(Дата, Модель) Экспорт

	СтруктураВозврата = Новый Структура("ПредварительнаяАнкета,ИтоговаяАнкета");
	
	Если ЗначениеЗаполнено(Модель) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	НастройкиТестДрайваСрезПоследних.Модель КАК Модель,
		               |	НастройкиТестДрайваСрезПоследних.АнкетаПредварительная КАК ПредварительнаяАнкета,
		               |	НастройкиТестДрайваСрезПоследних.АнкетаИтоговая КАК ИтоговаяАнкета
		               |ИЗ
		               |	РегистрСведений.НастройкиТестДрайва.СрезПоследних(&Дата, Модель = &Модель) КАК НастройкиТестДрайваСрезПоследних";
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Модель", Модель);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() > 0 Тогда
			Выборка.Следующий();
			СтруктураВозврата.ПредварительнаяАнкета = Выборка.ПредварительнаяАнкета;
			СтруктураВозврата.ИтоговаяАнкета = Выборка.ИтоговаяАнкета;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции // ПолучитьАнкетыТестДрайва()

// Возвращает список значений с автомобилей для тест-драйва по текущим остаткам
//
// Параметры:
//
// Возвращаемое значение:
//   СписокЗначений  - содержит 2 записи (предварительный и итоговый опрос).
Функция ПолучитьАвтомобилиДляТестДрайва() Экспорт     
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	АвтомобилиДляТестДрайваОстатки.Автомобиль КАК Автомобиль
		|ИЗ
		|	РегистрНакопления.АвтомобилиДляТестДрайва.Остатки КАК АвтомобилиДляТестДрайваОстатки";  
	
	СписокАвто = Новый СписокЗначений;
	СписокАвто.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Автомобиль"));  
	
	Возврат СписокАвто;  
	
КонецФункции

// Формирует строку с информацией об автомобиле для отображения на форме
//
// Параметры:
//
// Возвращаемое значение:
//
Функция СформироватьИнформациюОбАвтомобиле(Автомобиль, Дата=Неопределено) Экспорт
	
	Текст = "";
	
	Если ЗначениеЗаполнено(Автомобиль) Тогда
		
		Если ЗначениеЗаполнено(Автомобиль.Модель) Тогда
			Текст = СокрЛП(Автомобиль.Модель.Наименование) + ";";
		КонецЕсли;
		
		ГосНомер = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер,Дата);
 		Если ЗначениеЗаполнено(ГосНомер) Тогда
			Текст = Текст + " " + ГосНомер + ";";
		КонецЕсли;
		
		Пробег = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег,Дата);
 		Если ЗначениеЗаполнено(Пробег) Тогда
			Текст = Текст + " пробег " + Пробег + ";";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Автомобиль.ВариантКомплектации) Тогда
			Текст = Текст + " комплектация: " + СокрЛП(Автомобиль.ВариантКомплектации) + ";";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Автомобиль.Цвет) Тогда
			Текст = Текст + " цвет: " + СокрЛП(Автомобиль.Цвет) + ";";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Возвращает таблицу документов, пересекающихся по времени с текущим документом
//
// Параметры:
//
// Возвращаемое значение:
//
Функция ПолучитьПересечениеДокументов(Объект)  Экспорт
	
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ГрафикРаботыРесурсов.Объект,
		               |	ДОБАВИТЬКДАТЕ(ГрафикРаботыРесурсов.Дата, СЕКУНДА, ЧАС(ГрафикРаботыРесурсов.НачалоРабочегоВремени) * 60 * 60 + МИНУТА(ГрафикРаботыРесурсов.НачалоРабочегоВремени) * 60 + СЕКУНДА(ГрафикРаботыРесурсов.НачалоРабочегоВремени)) КАК НачалоРабочегоВремени,
		               |	ДОБАВИТЬКДАТЕ(ГрафикРаботыРесурсов.Дата, СЕКУНДА, ЧАС(ГрафикРаботыРесурсов.КонецРабочегоВремени) * 60 * 60 + МИНУТА(ГрафикРаботыРесурсов.КонецРабочегоВремени) * 60 + СЕКУНДА(ГрафикРаботыРесурсов.КонецРабочегоВремени)) КАК КонецРабочегоВремени
		               |ПОМЕСТИТЬ ГрафикиРаботРесурсов
		               |ИЗ
		               |	РегистрСведений.ГрафикРаботыРесурсов КАК ГрафикРаботыРесурсов
		               |ГДЕ
		               |	ГрафикРаботыРесурсов.Ресурс1 = &Ресурс1
		               |	И ГрафикРаботыРесурсов.Дата >= &ДеньНачала
		               |	И ГрафикРаботыРесурсов.Дата <= &ДеньОкончания
		               |	И ГрафикРаботыРесурсов.Объект <> &ЭтаСсылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ГрафикРаботыРесурсов.Объект КАК Объект,
		               |	ГрафикРаботыРесурсов.НачалоРабочегоВремени,
		               |	ГрафикРаботыРесурсов.КонецРабочегоВремени
		               |ИЗ
		               |	ГрафикиРаботРесурсов КАК ГрафикРаботыРесурсов
		               |ГДЕ
		               |	(&ДатаНачала >= ГрафикРаботыРесурсов.НачалоРабочегоВремени
		               |				И &ДатаНачала < ГрафикРаботыРесурсов.КонецРабочегоВремени
		               |			ИЛИ &ДатаОкончания > ГрафикРаботыРесурсов.НачалоРабочегоВремени
		               |				И &ДатаОкончания <= ГрафикРаботыРесурсов.КонецРабочегоВремени
		               |			ИЛИ &ДатаНачала <= ГрафикРаботыРесурсов.НачалоРабочегоВремени
		               |				И &ДатаОкончания >= ГрафикРаботыРесурсов.КонецРабочегоВремени)";					   
				   
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ДеньНачала", НачалоДня(Объект.ДатаНачала));
		Запрос.УстановитьПараметр("ДеньОкончания", НачалоДня(Объект.ДатаОкончания));
		Запрос.УстановитьПараметр("ДатаНачала", Объект.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", Объект.ДатаОкончания);
		Запрос.УстановитьПараметр("Ресурс1", Объект.Автомобиль);
		// по сотрудникам пересечение не контроллируется
		// Запрос.УстановитьПараметр("Ресурс2", Менеджер); 
		Запрос.УстановитьПараметр("ЭтаСсылка", Объект.Ссылка);
		Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции //ПолучитьПересечениеДокументов()

// Проверяет соответствие данных об анкетировании состоянию документа
//
// Параметры:
//
// Возвращаемое значение:
//
Функция ПроверитьСостояниеТестДрайва(Объект, Отказ) Экспорт
	
	Если Объект.Состояние <> Перечисления.СостоянияСобытий.Выполняется
		И Объект.Состояние <> Перечисления.СостоянияСобытий.Завершено Тогда
		Возврат Истина;
	КонецЕсли;
		
	ПредварительнаяАнкета = Неопределено;
	ИтоговаяАнкета = Неопределено;
	Если ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		Анкеты = Документы.ТестДрайв.ПолучитьАнкетыТестДрайва(Объект.Дата, Объект.Автомобиль.Модель);	
		Если ТипЗнч(Анкеты)=Тип("Структура") Тогда
			ПредварительнаяАнкета = Анкеты.ПредварительнаяАнкета;
			ИтоговаяАнкета = Анкеты.ИтоговаяАнкета;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Состояние = Перечисления.СостоянияСобытий.Выполняется Тогда
		
		Если ЗначениеЗаполнено(ПредварительнаяАнкета) И НЕ ЗначениеЗаполнено(Объект.ПредварительныйОпрос) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Для перевода документа в состояние ""Выполнение"" необходимо провести предварительное анкетирование.'"),
				Объект.Ссылка,
				,, 
				Отказ
			);
			
		КонецЕсли;
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияСобытий.Завершено Тогда	
		
		Если ЗначениеЗаполнено(ПредварительнаяАнкета) И НЕ ЗначениеЗаполнено(Объект.ПредварительныйОпрос) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Для перевода документа в состояние ""Завершено"" необходимо провести предварительное анкетирование.'"),
				Объект.Ссылка,
				,,
				Отказ
			);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИтоговаяАнкета) И НЕ ЗначениеЗаполнено(Объект.ИтоговыйОпрос) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Для перевода документа в состояние ""Завершено"" необходимо провести итоговое анкетирование.'"),
				Объект.Ссылка,
				,,
				Отказ
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПроверитьСостояниеТестДрайва()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("Автомобиль");
	ОбязательныеРеквизиты.Добавить("Маршрут");
	ОбязательныеРеквизиты.Добавить("Менеджер");
	ОбязательныеРеквизиты.Добавить("Состояние");
	ОбязательныеРеквизиты.Добавить("ДатаНачала");
	ОбязательныеРеквизиты.Добавить("ДатаОкончания");
	
	Если Объект.Состояние = Перечисления.СостоянияСобытий.Выполняется
		ИЛИ Объект.Состояние = Перечисления.СостоянияСобытий.Завершено Тогда
		ОбязательныеРеквизиты.Добавить("Контрагент");
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Истина);
	ПараметрыДействия.Вставить("ПересчетСуммы",  Ложь);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДатаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДокументОснованиеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автомобиль".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобильПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		СписокАвтоДляТестДрайва = Документы.ТестДрайв.ПолучитьАвтомобилиДляТестДрайва();	
		Если СписокАвтоДляТестДрайва.НайтиПоЗначению(Объект.Автомобиль) = Неопределено Тогда
			Объект.Автомобиль = Справочники.Автомобили.ПустаяСсылка();
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Выбранный автомобиль не введен в эксплуатацию для тест-драйва.'"));
		Иначе
			Объект.ПробегНаНачало = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
									Объект.Автомобиль,
									Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег,
									?(ЗначениеЗаполнено(Объект.ДатаНачала), Объект.ДатаНачала, Объект.Дата));
			Объект.ПробегНаКонец  = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
									Объект.Автомобиль,
									Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег,
									?(ЗначениеЗаполнено(Объект.ДатаНачала), Объект.ДатаНачала, Объект.Дата));
			Если Объект.ПробегНаКонец = Неопределено Тогда
				Объект.ПробегНаКонец = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // АвтомобильПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Маршрут".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура МаршрутПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры // МаршрутПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "РезультатТестДрайва".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура РезультатТестДрайваПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры // РезультатТестДрайваПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Состояние".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СостояниеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры // СостояниеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Менеджер".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура МенеджерПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры // МенеджерПриИзменении()

// Обработчик события возникающего при изменении данных реквизитов группы "Временные рамки".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВременныеРамкиПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВременныеРамкиПриИзменении()

// Обработчик события возникающего при изменении данных реквизитов группы "Временные рамки".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаНачалаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВременныеРамкиПриИзменении()

// Обработчик события возникающего при изменении данных реквизитов группы "Временные рамки".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаОкончанияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВременныеРамкиПриИзменении()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ТестДрайв",
		"Договор",
		НСтр("ru = 'Договор проведения тест-драйва'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ТестДрайв",
		"Доверенность",
		НСтр("ru = 'Доверенность'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик события формирования печатной формы.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Договор") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"Договор",
															"Договор проведения тест-драйва",
															ПечатьДоговор(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Доверенность") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"Доверенность",
															"Доверенность",
															ПечатьДоверенность(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "Договор проведения тест-драйва"
// Возвращает сформированный табличный документ:
Функция ПечатьДоговор(МассивОбъектов, ОбъектыПечати) Экспорт 
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ТестДрайв.ПФ_MXL_Договор");
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Номер = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ,Истина);
		
		ФактическийАдрес = Документ.ПодразделениеКомпании.КонтактнаяИнформация.Выгрузить(); //НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.АдресФактический));
		Если ФактическийАдрес <> Неопределено  И ФактическийАдрес.Количество() > 0 Тогда
			Инд = 0;
			Пока Инд < ФактическийАдрес.Количество() Цикл
				Если ФактическийАдрес[Инд].Вид.ИмяПредопределенныхДанных = "ФактАдресПодразделенияКомпании" Тогда
					Если ЗначениеЗаполнено(ФактическийАдрес[Инд].Город) Тогда
						Город = ФактическийАдрес[Инд].Город;
						Город = ?(Лев(Город, 1) = "г", Город, "г. " + Город);
					Иначе
						Город = "";
					КонецЕсли;
					ОбластьМакета.Параметры.Город = Город;
				КонецЕсли;
				Инд = Инд+1;
			КонецЦикла;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Дата = Формат(Документ.Дата,"ДЛФ=DD");
		
		// шапка - данные организации
		ОбластьМакета.Параметры.Организация = Документ.Организация.НаименованиеПолное;
		Отбор = Новый Структура("Организация,Объект", Документ.Организация, Перечисления.ВидыОбъектовСведений.Руководитель);
		СтруктураСведений = РегистрыСведений.СведенияКомпании.ПолучитьПоследнее(Документ.Дата, Отбор);
		Руководитель = СтруктураСведений.Значение;
		
		Если ЗначениеЗаполнено(Руководитель) И ТипЗнч(Руководитель) = Тип("Структура") Тогда
			Должность = ", в лице";
			Если ЗначениеЗаполнено(Руководитель.РуководительДолжность) Тогда
				Должность = Должность + " " + СокрЛП(НРег(Руководитель.РуководительДолжность));
			КонецЕсли;
			ОбластьМакета.Параметры.ОрганизацияДолжность = Должность;
			
			ОрганизацияЛицо = " " + Руководитель.РуководительПредставление;
			ДоверенностьРуководителя = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
				Руководитель.Руководитель, Перечисления.ВидыДокументов.Доверенность);
			Если ЗначениеЗаполнено(ДоверенностьРуководителя) Тогда
				ОрганизацияЛицо = ОрганизацияЛицо + ", действующего  на основании " + ДоверенностьРуководителя;
			КонецЕсли;
			ОбластьМакета.Параметры.ОрганизацияЛицо = ОрганизацияЛицо;
		КонецЕсли;
		
		// шапка - данные заказчика
		ОбластьМакета.Параметры.Покупатель = Документ.Контрагент.НаименованиеПолное;
		Паспорт = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
			Документ.Контрагент, Перечисления.ВидыДокументов.Паспорт);
		Если ЗначениеЗаполнено(Паспорт) Тогда
			ПаспортныеДанные = СтрШаблон(НСтр("ru = 'паспорт серии %1 № %2 выдан %3 %4'"),
				Паспорт.Серия, Паспорт.Номер, Паспорт.КемВыдан, Формат(Паспорт.ДатаВыдачи, "ДЛФ=DD"));
			ОбластьМакета.Параметры.ПаспортныеДанные = " (" + ПаспортныеДанные + ")";
		КонецЕсли;
		
		// данные автомобиля
		Если ЗначениеЗаполнено(Документ.Автомобиль) Тогда
			ОбластьМакета.Параметры.Модель     = Документ.Автомобиль.Модель;
			ОбластьМакета.Параметры.ГодВыпуска = Формат(Год(Документ.Автомобиль.ГодВыпуска), "ЧГ=0");
			ОбластьМакета.Параметры.ГосНомер   = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
				Документ.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер, Документ.Дата);
			ОбластьМакета.Параметры.Цвет       = Документ.Автомобиль.Цвет;
			ОбластьМакета.Параметры.НомерДвигателя = Документ.Автомобиль.НомерДвигателя;
			ОбластьМакета.Параметры.VIN            = Документ.Автомобиль.VIN;
		КонецЕсли;
		
		// дата документа
		ДатаДокумента = Документ.Дата;
		
		// подвал - данные организации
		СтруктураПредставления = Новый Структура;
		СтруктураПредставления.Вставить("Наименование",     "");
		СтруктураПредставления.Вставить("ИНН",              "ИНН ");
		СтруктураПредставления.Вставить("КПП",              "КПП ");
		СтруктураПредставления.Вставить("АдресЮридический", "");
		СтруктураПредставления.Вставить("ТелефонРабочий",   "тел.: ");
		СтруктураПредставления.Вставить("БанковскийСчет",   "р/с ");
		СтруктураПредставления.Вставить("Банк",             НСтр("ru = 'в банке'") + Символы.НПП);
		СтруктураПредставления.Вставить("БИК",              "БИК ");
		СтруктураПредставления.Вставить("КоррСчет",         "к/с ");
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.ДляПечати = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьМакета.Параметры.ОписаниеОрганизации = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.ПодразделениеКомпании, СтруктураПредставления, ДополнительныеПараметры);
		
		// подвал - данные заказчика
		ОписаниеЗаказчика = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент);
		ЗаказчикПочтовыйАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Документ.Контрагент, Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, ТекущаяДатаСеанса());
		Если ЗначениеЗаполнено(ПаспортныеДанные) Тогда
			ОписаниеЗаказчика = ОписаниеЗаказчика + "," + Символы.ПС + ПаспортныеДанные;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗаказчикПочтовыйАдрес) Тогда
			ОписаниеЗаказчика = ОписаниеЗаказчика + Символы.ПС + "Адрес: " + ЗаказчикПочтовыйАдрес;
		КонецЕсли;
		ЗаказчикТелефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Документ.Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса());
		Если ЗначениеЗаполнено(ЗаказчикТелефоны) Тогда
			ОписаниеЗаказчика = ОписаниеЗаказчика + Символы.ПС + "Телефон: " +  ЗаказчикТелефоны;
		КонецЕсли;
		ОбластьМакета.Параметры.ОписаниеЗаказчика = ОписаниеЗаказчика;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТестДрайв_Договор";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьДоговор()

// Формирует печатную форму "Довереноость на право управления ТС"
// Возвращает сформированный табличный документ:
Функция ПечатьДоверенность(МассивОбъектов, ОбъектыПечати) Экспорт 
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ТестДрайв.ПФ_MXL_Доверенность");
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ФактическийАдрес = Документ.ПодразделениеКомпании.КонтактнаяИнформация.Выгрузить();
		Если ФактическийАдрес <> Неопределено  И ФактическийАдрес.Количество() > 0 Тогда
			Инд = 0;
			Пока Инд < ФактическийАдрес.Количество() Цикл
				Если ФактическийАдрес[Инд].Вид.ИмяПредопределенныхДанных = "ФактАдресПодразделенияКомпании" Тогда
					Если ЗначениеЗаполнено(ФактическийАдрес[Инд].Город) Тогда
						Город = ФактическийАдрес[Инд].Город;
						Город = ?(Лев(Город, 1) = "г", Город, "г. " + Город);
					Иначе
						Город = "";
					КонецЕсли;
					ОбластьМакета.Параметры.Город = Город;
				КонецЕсли;
				Инд = Инд + 1;
			КонецЦикла;
		КонецЕсли;
		ОбластьМакета.Параметры.Дата = Формат(Документ.Дата, "ДЛФ=DD");
		
		// дата документа
		ДатаДокумента = Документ.Дата;
		
		// данные организации
		СтруктураПредставления = Новый Структура;
		СтруктураПредставления.Вставить("Наименование",     "");
		СтруктураПредставления.Вставить("ИНН",              "ИНН ");
		СтруктураПредставления.Вставить("КПП",              "КПП ");
		СтруктураПредставления.Вставить("АдресФактический", "");
		СтруктураПредставления.Вставить("ТелефонРабочий",   "тел.: ");
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.ДляПечати = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьМакета.Параметры.Организация = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.ПодразделениеКомпании, СтруктураПредставления, ДополнительныеПараметры);
		
		Отбор = Новый Структура("Организация,Объект", Документ.Организация, Перечисления.ВидыОбъектовСведений.Руководитель);
		СтруктураСведений = РегистрыСведений.СведенияКомпании.ПолучитьПоследнее(Документ.Дата, Отбор);
		Руководитель = СтруктураСведений.Значение;
		Если ЗначениеЗаполнено(Руководитель) И ТипЗнч(Руководитель) = Тип("Структура") Тогда
			Должность = ", в лице";
			Если ЗначениеЗаполнено(Руководитель.РуководительДолжность) Тогда
				Должность = Должность + " " + СокрЛП(НРег(Руководитель.РуководительДолжность));
			КонецЕсли;
			ОбластьМакета.Параметры.ОрганизацияДолжность = Должность;
			
			ОрганизацияЛицо = " " + Руководитель.РуководительПредставление;
			ДоверенностьРуководителя = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
				Руководитель.Руководитель, Перечисления.ВидыДокументов.Доверенность);
			Если ЗначениеЗаполнено(ДоверенностьРуководителя) Тогда
				ОрганизацияЛицо = ОрганизацияЛицо + ", действующего  на основании " + ДоверенностьРуководителя;
			КонецЕсли;
			ОбластьМакета.Параметры.ОрганизацияЛицо = ОрганизацияЛицо;
		КонецЕсли;
		
		// данные заказчика
		ОбластьМакета.Параметры.Покупатель = Документ.Контрагент.НаименованиеПолное;
		Паспорт = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
			Документ.Контрагент, Перечисления.ВидыДокументов.Паспорт);
		Если ЗначениеЗаполнено(Паспорт) Тогда
			ПаспортныеДанные = СтрШаблон(НСтр("ru = 'паспорт серии %1 № %2 выдан %3 %4'"),
				Паспорт.Серия, Паспорт.Номер, Паспорт.КемВыдан, Формат(Паспорт.ДатаВыдачи, "ДЛФ=DD"));
			ОбластьМакета.Параметры.ПаспортныеДанные = " (" + ПаспортныеДанные + ")";
		КонецЕсли;
		
		ЭтоИП = Документ.Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель;
		// форма собственности заказчика 
		Если Документ.Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо Тогда
			ОбластьМакета.Параметры.ТипПокупателя = "юридическому лицу ";
		ИначеЕсли ЭтоИП Тогда
			ОбластьМакета.Параметры.ТипПокупателя = "индивидуальному предпринимателю ";
		Иначе
			ОбластьМакета.Параметры.ТипПокупателя = "физическому лицу ";
		КонецЕсли;
		
		// данные автомобиля
		ПТС = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
			Документ.Автомобиль, Перечисления.ВидыДокументов.ПТС);
		Если ЗначениеЗаполнено(Документ.Автомобиль) Тогда
			ОбластьМакета.Параметры.Модель = Документ.Автомобиль.Модель;
			ОбластьМакета.Параметры.ГодВыпуска = Формат(Год(Документ.Автомобиль.ГодВыпуска),"ЧГ=0");
			ОбластьМакета.Параметры.ГосНомер = 	Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Документ.Автомобиль,
				Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер, Документ.Дата);
			ОбластьМакета.Параметры.Цвет = Документ.Автомобиль.Цвет;
			ОбластьМакета.Параметры.НомерДвигателя = Документ.Автомобиль.НомерДвигателя;
			ОбластьМакета.Параметры.VIN = Документ.Автомобиль.VIN;
			Если ЗначениеЗаполнено(ПТС) Тогда
				ОбластьМакета.Параметры.ПТС = "ПТС " + ПТС.Серия + " № "+ ПТС.Номер + " выдан " + ПТС.КемВыдан + " " 
					+ Формат(ПТС.ДатаВыдачи, "ДЛФ=DD");
			Иначе
				ПТС = Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(
					Документ.Автомобиль, Перечисления.ВидыДокументов.ЭлектронныйПТС);
					
				Если ЗначениеЗаполнено(ПТС) Тогда
					ОбластьМакета.Параметры.ПТС = "Электронный ПТС " + " № "+ ПТС.Номер + " создан " + Формат(ПТС.ДатаВыдачи, "ДЛФ=DD");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТестДрайв_Доверенность";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьДоверенность()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ДефектовочнаяВедомость);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ТестДрайв);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли