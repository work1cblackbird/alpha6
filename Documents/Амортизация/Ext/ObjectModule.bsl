// Модуль документа "Амортизация"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)

	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, "ВхДокНомер,ВхДокДатаВрем") Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	// обновим информацию по активам при копировании
	Для каждого ТекСтрока Из Активы Цикл
		Документы.Амортизация.АктивыПрочийАктивПриИзменении(ЭтотОбъект, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ); 
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапросаПоАктивам = ПолучитьРезультатЗапросаПоАктивам();
	
	// ни одного амортизируемого актива нет
	Если РезультатЗапросаПоАктивам.Количество() = 0 Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Подразделение %1. Ни один из амортизируемых активов не обнаружен.'"),ПодразделениеКомпании);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		Возврат;
		
	// если части активов нет
	ИначеЕсли РезультатЗапросаПоАктивам.Количество() < Активы.Количество() Тогда
	
		Для каждого ТекАктив Из Активы Цикл
			
			СтрокаАктива = РезультатЗапросаПоАктивам.НайтиСтроки(Новый Структура("Актив", ТекАктив.ПрочийАктив));
			
			Если СтрокаАктива.Количество() = 0 Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Подразделение %1. Актив %2 не обнаружен.'"),ПодразделениеКомпании,СокрЛП(ТекАктив.ПрочийАктив));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
		
	// начисляем амортизацию в эксплуатации прочих активов
	НаборЗаписейЭксплуатация = Движения.ПрочиеАктивыВЭксплуатации;
	НаборЗаписейЭксплуатация.ДатаДвижений              = Неопределено;
	НаборЗаписейЭксплуатация.ДокументОбъект            = ЭтотОбъект;
	НаборЗаписейЭксплуатация.ПодразделениеКомпании     = ПодразделениеКомпании;
	НаборЗаписейЭксплуатация.ЭтоАмортизация            = Истина;
	НаборЗаписейЭксплуатация.РезультатЗапросаПоАктивам = РезультатЗапросаПоАктивам;
	Отказ = НЕ НаборЗаписейЭксплуатация.Приход() ИЛИ Отказ;
	
	// начисляем расход по амортизации
	РезультатЗапросаПоСтатьям = ПолучитьРезультатЗапросаПоСтатьям(ЭтотОбъект).Выгрузить();
	НаборЗаписейДиР = Движения.ДоходыИРасходы;
	Для Каждого Строка Из РезультатЗапросаПоСтатьям Цикл
		НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДиР.Подразделение          = ПодразделениеКомпании;
		НаборЗаписейДиР.СтатьяДоходовИРасходов = Строка.СтатьяРасходовПоАмортизации;
		НаборЗаписейДиР.ВУпрВалюте             = Ложь;
		НаборЗаписейДиР.Расход                 = Строка.СуммаАмортизации;
		Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
	КонецЦикла;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеДвиженийДокумента

// Возвращает суммы амортизации сгруппированные по
// статьям доходов и расходов из ТЧ Активы.
//
// Возвращаемое значение:
// возвращает таблицу значений
Функция ПолучитьРезультатЗапросаПоСтатьям(ШапкаДокумента)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА АмортизацияАктивы.СтатьяРасходовПоАмортизации = &ПустаяСсылка
	               |			ТОГДА &Амортизация
	               |		ИНАЧЕ АмортизацияАктивы.СтатьяРасходовПоАмортизации
	               |	КОНЕЦ КАК СтатьяРасходовПоАмортизации,
	               |	СУММА(АмортизацияАктивы.СуммаАмортизации) КАК СуммаАмортизации
	               |ИЗ
	               |	Документ.Амортизация.Активы КАК АмортизацияАктивы
	               |ГДЕ
	               |	АмортизацияАктивы.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЫБОР
	               |		КОГДА АмортизацияАктивы.СтатьяРасходовПоАмортизации = &ПустаяСсылка
	               |			ТОГДА &Амортизация
	               |		ИНАЧЕ АмортизацияАктивы.СтатьяРасходовПоАмортизации
	               |	КОНЕЦ";
				   
	Запрос.УстановитьПараметр("Ссылка", 		ШапкаДокумента.Ссылка);
	Запрос.УстановитьПараметр("Амортизация", 	Справочники.СтатьиДоходовИРасходов.Амортизация);
	Запрос.УстановитьПараметр("ПустаяСсылка", 	Справочники.СтатьиДоходовИРасходов.ПустаяСсылка());
	
	Возврат Запрос.Выполнить();
	
КонецФункции //ПолучитьРезультатЗапросаПоСтатьям()

// сформирует свой результат запроса по активам
//
// Возвращаемое значение:
//  Возвращает таблицу значений, содержащую остатки по активу.
//
Функция ПолучитьРезультатЗапросаПоАктивам()
	
	// получаем ТЗ остатков активов и ТЗ ТЧ
	НаборЗаписейЭксплуатация 						= Движения.ПрочиеАктивыВЭксплуатации;
	НаборЗаписейЭксплуатация.ДокументОбъект 		= ЭтотОбъект;
	НаборЗаписейЭксплуатация.ДатаДвижений 			= КонецМесяца(Дата);
	НаборЗаписейЭксплуатация.ПодразделениеКомпании 	= ПодразделениеКомпании;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Подразделение", ПодразделениеКомпании);
	ПараметрыЗапроса.Вставить("Актив",         Активы.ВыгрузитьКолонку("ПрочийАктив"));
	ПараметрыЗапроса.Вставить("Момент",        КонецМесяца(Дата));
	ТаблОстаткиАктивов = УправлениеПрочимиАктивами.ПолучитьОстаткиАктивов(ПараметрыЗапроса);
	
	ТаблАктивы = Активы.Выгрузить();
	
	// добавляем амортизацию
	Для каждого ТекСтрокаАктива Из ТаблОстаткиАктивов Цикл
		
		СтрокаАктива = ТаблАктивы.Найти(ТекСтрокаАктива.Актив, "ПрочийАктив");
		
		Если СтрокаАктива = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекСтрокаАктива.СуммаОбслуживания  	= 0;
		ТекСтрокаАктива.БалансоваяСтоимость = 0;
		ТекСтрокаАктива.Амортизация			= СтрокаАктива.СуммаАмортизации;
		
	КонецЦикла;
	
	Возврат ТаблОстаткиАктивов;
	
КонецФункции // ПолучитьРезультатЗапросаПоАктивам()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
