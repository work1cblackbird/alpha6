// Модуль менеджера документа "Амортизация"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда 
	
#Область ПрограммныйИнтерфейс

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
		
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
	
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
		
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.Амортизация);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Активы.Итог("СуммаАмортизации"));
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Получает процент амортизации для актива по его эксплуатационным параметрам
//
// Параметры:
//  Актив					- СправочникСсылка.ПрочиеАктивы			- Прочий актив (амортизируемый),
//  ТипЭксплуатации			- СправочникСсылка.ТипыЭксплуатации		- Тип эксплуатации прочего актива,
//  БалансоваяСтоимость		- Число									- Балансовая стоимость актива,
//  НакопленнаяАмортизация	- Число									- Уже накопленная сумма амортизации актива.
//
// Возвращаемое значение:
//  ПроцентАмортизации - Число - Процент амортизации актива.
Функция ПолучитьПроцентАмортизации(Объект, Актив, ТипЭксплуатации, БалансоваяСтоимость, НакопленнаяАмортизация)
	
	// по умолчанию пусть будет все по нулям
	ПроцентАмортизации = 0;
	
	// установлен флажок "консервирование" - не начисляем
	Если ТипЭксплуатации.Консервирование Тогда
		Возврат ПроцентАмортизации;
	КонецЕсли;
	
	// получим все необходимые параметры и коэффициенты
	ДатаВвода              = Актив.ДатаВводаВЭксплуатацию;
	СрокИспользования      = Актив.СрокПолезногоИспользования;
	КоэффициентАмортизации = ?(Актив.КоэффициентУскорения = 0, 1, Актив.КоэффициентУскорения);
	
	// Посмотрим, если срок использования истек,
	// то нужно полностью самортизировать актив, независимо от его текущей стоимости.
	Если ДобавитьМесяц(ДатаВвода, СрокИспользования) < Объект.Дата Тогда
		Возврат (1 - НакопленнаяАмортизация / БалансоваяСтоимость) * 100;
	КонецЕсли;
	
	// и собственно расчет по методам
	
	// ЛИНЕЙНЫЙ
	Если ТипЭксплуатации.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизации.Линейный Тогда
		ПроцентАмортизации = 100 / СрокИспользования;
		
	// УМЕНЬШАЕМОГО ОСТАТКА
	ИначеЕсли ТипЭксплуатации.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизации.УменьшаемогоОстатка Тогда
		Если НакопленнаяАмортизация / БалансоваяСтоимость < 0.8 Тогда
			ПроцентАмортизации = КоэффициентАмортизации * (1 - НакопленнаяАмортизация / БалансоваяСтоимость) / СрокИспользования * 100;
		Иначе
			ПроцентАмортизации = 100 / СрокИспользования;
		КонецЕсли;
		
	// ПО СУММЕ ЧИСЕЛ ЛЕТ
	ИначеЕсли ТипЭксплуатации.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизации.ПоСуммеЧиселЛет Тогда
		СрокИспользованияЛет = Окр(СрокИспользования / 12);
		СуммаЧиселЛет = Окр((1 + СрокИспользованияЛет) * СрокИспользованияЛет / 2);
		НомерТекущегоГода = Год(Объект.Дата) - Год(ДатаВвода);
		Если Месяц(Объект.Дата) > Месяц(ДатаВвода) Тогда
			НомерТекущегоГода = НомерТекущегоГода + 1;
		ИначеЕсли (Месяц(Объект.Дата) = Месяц(ДатаВвода)) И (День(КонецМесяца(Объект.Дата)) > День(ДатаВвода)) Тогда
			НомерТекущегоГода = НомерТекущегоГода + 1;
		КонецЕсли;
		ОсталосьЛет = СрокИспользованияЛет - НомерТекущегоГода;
		ПроцентАмортизации = 100 * (ОсталосьЛет + 1) /СуммаЧиселЛет / 12;
		
		// ДРУГОЙ
	КонецЕсли;
	// 1) 100-процентный при вводе - не начисляем,
	// 2) по объему выработки делаем после ввода, собственно, выработки в ТЧ Активы.
	
	
	// мы не можем позволить отрицательную остаточную стоимость
	Если БалансоваяСтоимость - НакопленнаяАмортизация - (ПроцентАмортизации * БалансоваяСтоимость / 100) < 0 Тогда
		ПроцентАмортизации = (1 - НакопленнаяАмортизация / БалансоваяСтоимость) * 100;
	КонецЕсли;
	
	Возврат ПроцентАмортизации;
	
КонецФункции // ПолучитьПроцентАмортизации()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Активы");
	КонецЕсли;

	ОбязательныеРеквизиты.Добавить("Активы.ПрочийАктив");
	ОбязательныеРеквизиты.Добавить("Активы.СуммаАмортизации");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеАктивы = Новый Массив();
	УникальныеАктивы.Добавить("ПрочийАктив");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Активы", УникальныеАктивы);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Активы.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработка пересчета табличных частей объекта.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаТабличнойЧастиАктивы.ВыполнитьПересчетТабличнойЧасти(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
	// пересчитаем показатели ТЧ
	Для Каждого Строка Из Объект.Активы Цикл
		АктивыПрочийАктивПриИзменении(Объект, Строка);
	КонецЦикла;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАктивы

// Обработчик события возникающего при изменении данных реквизита "Прочий актив" в таблице "Активы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура АктивыПрочийАктивПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// получим остаточную стоимость из регистра  
	ДатаИтог = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
	МоментВремени = ?(НЕ Объект.Ссылка.Пустая(), Новый Граница(Объект.Ссылка.МоментВремени(), ВидГраницы.Исключая), КонецМесяца(ДатаИтог));
	
	ТаблицаАктивов = УправлениеПрочимиАктивами.ПолучитьОстаткиАктивовНеАмортизированных(МоментВремени, Объект.ПодразделениеКомпании,, Строка.ПрочийАктив);
	
	Если ТаблицаАктивов.Количество() > 0 Тогда
		Строка.ТипЭксплуатации             = ТаблицаАктивов[0].ТипЭксплуатации;
		Строка.СтатьяРасходовПоАмортизации = Строка.ТипЭксплуатации.СтатьяРасходовПоАмортизации;
		
		Если Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
			Строка.БалансоваяСтоимость    = ТаблицаАктивов[0].БалансоваяСтоимостьРегл;
			Строка.НакопленнаяАмортизация = ТаблицаАктивов[0].АмортизацияРегл;
		Иначе
			Строка.БалансоваяСтоимость    = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТаблицаАктивов[0].БалансоваяСтоимость,
					Константы.ВалютаУправленческогоУчетаКомпании.Получить(), ?(ЗначениеЗаполнено(Объект.КурсВалютыУпр), 
						Объект.КурсВалютыУпр, МоментВремени), Объект.ВалютаДокумента, Объект.КурсДокумента);
			Строка.НакопленнаяАмортизация = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТаблицаАктивов[0].Амортизация,
					Константы.ВалютаУправленческогоУчетаКомпании.Получить(), ?(ЗначениеЗаполнено(Объект.КурсВалютыУпр), 
						Объект.КурсВалютыУпр, МоментВремени), Объект.ВалютаДокумента, Объект.КурсДокумента);
		КонецЕсли;
		
		Строка.ПроцентАмортизации = ПолучитьПроцентАмортизации(Объект, Строка.ПрочийАктив, Строка.ТипЭксплуатации, Строка.БалансоваяСтоимость, Строка.НакопленнаяАмортизация);
	Иначе
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Прочий актив <%1> в подразделении <%2> не обнаружен или полностью самортизирован'"),
				Строка.ПрочийАктив,
				Объект.ПодразделениеКомпании
				),
			Объект.Ссылка,
			"Активы"
			);
		
		Строка.ПрочийАктив            = Справочники.ПрочиеАктивы.ПустаяСсылка();
		Строка.ТипЭксплуатации        = Справочники.ТипыЭксплуатации.ПустаяСсылка();
		Строка.БалансоваяСтоимость    = 0;
		Строка.НакопленнаяАмортизация = 0;
		Строка.ПроцентАмортизации     = 0;
		
	КонецЕсли;
	
	АктивыТипЭксплуатацииПриИзменении(Объект, Строка, ПараметрыДействия);
	АктивыПроцентАмортизацииПриИзменении(Объект, Строка);
	
КонецПроцедуры // АктивыПрочийАктивПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип эксплуатации" в таблице "Активы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура АктивыТипЭксплуатацииПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Строка.ТипЭксплуатации.СтатьяРасходовПоАмортизации) Тогда
		Строка.СтатьяРасходовПоАмортизации = Строка.ТипЭксплуатации.СтатьяРасходовПоАмортизации;
	КонецЕсли;
	
КонецПроцедуры // АктивыТипЭксплуатацииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Выработка" в таблице "Активы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура АктивыВыработкаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Строка.ПрочийАктив) Тогда
		
		Если Строка.ПрочийАктив.РесурсВыработки = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Прочий актив <%1>. Не указан ресурс выработки (карточка актива).'"),Строка.ПрочийАктив),
				Объект.Ссылка,
				"Активы"
			);
			Строка.ПроцентАмортизации = 0;
			Строка.Выработка          = 0;
		Иначе
			Строка.ПроцентАмортизации = Строка.Выработка/Строка.ПрочийАктив.РесурсВыработки*100;
		КонецЕсли;
		
		АктивыПроцентАмортизацииПриИзменении(Объект, Строка);
		
	КонецЕсли;
	
КонецПроцедуры // АктивыВыработкаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент амортизации" в таблице "Активы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура АктивыПроцентАмортизацииПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Строка.СуммаАмортизации    = Строка.БалансоваяСтоимость * Строка.ПроцентАмортизации / 100;
	Строка.ОстаточнаяСтоимость = Строка.БалансоваяСтоимость - Строка.НакопленнаяАмортизация - Строка.СуммаАмортизации;
	
КонецПроцедуры // АктивыПроцентАмортизацииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма амортизации" в таблице "Активы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура АктивыСуммаАмортизацииПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Строка.БалансоваяСтоимость = 0 Тогда
		Строка.СуммаАмортизации   = 0;
		Строка.ПроцентАмортизации = 0;
	Иначе
		Строка.ПроцентАмортизации = Строка.СуммаАмортизации / Строка.БалансоваяСтоимость * 100;
	КонецЕсли;
	Строка.ОстаточнаяСтоимость = Строка.БалансоваяСтоимость - Строка.НакопленнаяАмортизация - Строка.СуммаАмортизации;
	
КонецПроцедуры // АктивыСуммаАмортизацииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Остаточная стоимость" в таблице "Активы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции.
//
Процедура АктивыОстаточнаяСтоимостьПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	СуммаАмортизации = Строка.БалансоваяСтоимость - Строка.НакопленнаяАмортизация - Строка.ОстаточнаяСтоимость;
	Если СуммаАмортизации >= 0 Тогда
		Строка.СуммаАмортизации = СуммаАмортизации;
		АктивыСуммаАмортизацииПриИзменении(Объект, Строка);
	Иначе
		Строка.ОстаточнаяСтоимость = Строка.БалансоваяСтоимость - Строка.НакопленнаяАмортизация - Строка.СуммаАмортизации;
	КонецЕсли;
	
КонецПроцедуры // АктивыОстаточнаяСтоимостьПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт

	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Активы");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "Амортизация");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Активы");
	КонецЕсли;

	ВыборПодразделения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборПодразделения.ВыборСсылки 		= "Справочник.ПодразделенияКомпании.ФормаСписка";
	ВыборПодразделения.Обязательный 	= Истина;
	ВыборПодразделения.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать подразделение компании.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "АктивыПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить активами подразделения'");
	Команда.Идентификатор	= "АктивыЗаполнитьАктивамиПодразделения";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Активы";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ПодразделениеКомпании", ВыборПодразделения);

КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("АктивыЗаполнитьАктивамиПодразделения.Видимость",    Истина);
	ПараметрыКоманд.Вставить("АктивыЗаполнитьАктивамиПодразделения.Доступность",  Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по заказам контрагенту.
//
Функция АктивыЗаполнитьАктивамиПодразделения(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.ПодразделениеКомпании = ПараметрыЗаполнения.ПодразделениеКомпании Тогда
		Объект.ПодразделениеКомпании = ПараметрыЗаполнения.ПодразделениеКомпании;
		ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("ИмяКоманды", "АктивыЗаполнитьАктивамиПодразделения");
	Результат = ЗаполнениеДокументовСервер.ЗаполнитьТабличнуюЧастьАктивами(Объект, ПараметрыЗаполнения);
	
	Если ТипЗнч(Результат)=Тип("ТаблицаЗначений") И Результат.Количество() > 0 Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПрочиеАктивыВЭксплуатации.ПрочийАктив КАК ПрочийАктив
		|ИЗ
		|	РегистрНакопления.ПрочиеАктивыВЭксплуатации КАК ПрочиеАктивыВЭксплуатации
		|ГДЕ
		|	ПрочиеАктивыВЭксплуатации.Период МЕЖДУ &НачПериода И &КонПериода
		|	И (ПрочиеАктивыВЭксплуатации.Регистратор ССЫЛКА Документ.ВводВЭксплуатацию
		|			ИЛИ ПрочиеАктивыВЭксплуатации.Регистратор ССЫЛКА Документ.ВводВЭксплуатациюАвтомобилей
		|			ИЛИ ПрочиеАктивыВЭксплуатации.Регистратор ССЫЛКА Документ.Амортизация
		|			ИЛИ ПрочиеАктивыВЭксплуатации.Регистратор ССЫЛКА Документ.ВводОстатковПрочихАктивов
		|				И (ПрочиеАктивыВЭксплуатации.ПрочийАктив.ДатаВводаВЭксплуатацию МЕЖДУ &НачПериода И &КонПериода
		|					ИЛИ ПрочиеАктивыВЭксплуатации.ПрочийАктив.ДатаВводаВЭксплуатацию = ДАТАВРЕМЯ(1, 1, 1)))
		|	И ПрочиеАктивыВЭксплуатации.ПрочийАктив В(&ВыбранныеАктивы)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПрочиеАктивыВЭксплуатации.ПрочийАктив";
		
		Запрос = Новый Запрос();
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ВыбранныеАктивы", Результат.ВыгрузитьКолонку("Актив"));
		Запрос.УстановитьПараметр("НачПериода",      НачалоМесяца(Объект.Дата));
		Запрос.УстановитьПараметр("КонПериода",      КонецДня(КонецМесяца(Объект.Дата)));
		
		// сюда выгружаются те активы, которым не нужна амортизация
		РезультатПроверкиАктивов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПрочийАктив");
		
		// в тч добавляются только нужные активы
		Для Каждого СтрокаАктив Из Результат Цикл
			Если РезультатПроверкиАктивов.Найти(СтрокаАктив.Актив)=Неопределено Тогда
				НоваяСтрока = Объект.Активы.Добавить();
				НоваяСтрока.ПрочийАктив = СтрокаАктив.Актив;
				АктивыПрочийАктивПриИзменении(Объект, НоваяСтрока);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции // АктивыЗаполнитьАктивамиПодразделения()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.Амортизация",
		"ПФ_MXL_Амортизация",
		НСтр("ru = 'Амортизация'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Амортизация") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_Амортизация",
															"Амортизация",
															ПечатьАмортизация(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;	
КонецПроцедуры // Печать()

// Формирует печатную форму "Амортизация"
//
Функция ПечатьАмортизация(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Амортизация_Амортизация";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати,ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // Новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Амортизация.ПФ_MXL_Амортизация");
		
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// Получаем дату
		ДатаДокумента = Документ.Дата;
		
		// Вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		ОбластьЗаголовок.Параметры.ПредставлениеПодразделения = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			Документ.ПодразделениеКомпании, ДатаДокумента);
			
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);

		// Готовим шапку
		НомерСтраницы = 2; 
		НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,ОстаточнаяСтоимость", Документ.ВалютаДокумента, 0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		ИмяРегистра = ?(Документ.ХозОперация = Справочники.ХозОперации.СписаниеТоваровОтданныхНаКомиссию,
			"ПартииТоваровОтданные", "ПартииТоваровКомпании");
		
		// Готовим области строки
		ВыборкаТабличнойЧасти = Документ.Активы;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			// Заполняем данные строки
			ОбластьСтрока.Параметры.Заполнить(СтрокаТЧ);
			АктивНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТЧ.ПрочийАктив);
			ОбластьСтрока.Параметры.АктивНаименование		= АктивНаименование;
			ОбластьСтрока.Параметры.Код						= СтрокаТЧ.ПрочийАктив.ИнвентарныйНомер;
			ОбластьСтрока.Параметры.БалансоваяСтоимость		= Формат(СтрокаТЧ.БалансоваяСтоимость   , ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.НакопленнаяАмортизация	= Формат(СтрокаТЧ.НакопленнаяАмортизация, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СуммаАмортизации		= Формат(СтрокаТЧ.СуммаАмортизации      , ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.ОстаточнаяСтоимость		= Формат(СтрокаТЧ.ОстаточнаяСтоимость   , ФорматВыводаСуммы);
			
			// Доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Активы.Индекс(СтрокаТЧ) = Документ.Активы.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			// Инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,ОстаточнаяСтоимость", Документ.ВалютаДокумента, 0);
				НомерСтраницыПред		  = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ,СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, 
				СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;

		// Итоги
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		ОстаточнаяСтоимость = ВыборкаТабличнойЧасти.Итог("ОстаточнаяСтоимость");
		ОбластьПодвал.Параметры.ОстаточнаяСтоимость = Формат(ОстаточнаяСтоимость,ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'") + Символы.НПП
					+ ВыборкаТабличнойЧасти.Количество() + Символы.НПП + НСтр("ru = 'на сумму'") + Символы.НПП 
					+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(ОстаточнаяСтоимость,Документ.ВалютаДокумента);
					
		// Выводим представления и расшифровки подписей.
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"Отпустил","Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"Получил","Получил"));
		
		УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент,ОбластьПодвал,,,НомерСтраницы,,Документ);
		
		// Отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции //ПечатьАмортизация()

#КонецОбласти

#КонецОбласти

#КонецЕсли
