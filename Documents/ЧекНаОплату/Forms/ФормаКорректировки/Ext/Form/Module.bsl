

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОснованиеКорректировки = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ДокументКорректировки");
	
	Если НЕ ЗначениеЗаполнено(ОснованиеКорректировки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указан документ корректировки чека'"),,,, Отказ);
		Возврат;
	КонецЕсли;
	
	КорректировкаПоПриходу = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ЭтоКорректировкаПрихода", Истина);
	
	ДокументОснование = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ДокументОснование");
		
	Если ДокументОснование = Неопределено И ЕстьРеквизит(ОснованиеКорректировки, "ДокументОснование") Тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеКорректировки, "ДокументОснование");
	КонецЕсли;
	
	ТолькоВозврат = (ЕстьРеквизит(ОснованиеКорректировки, "СуммаДокумента") И ОснованиеКорректировки.СуммаДокумента = 0);
		
	ПроверитьЧекиНаОплатуДокумента(ОснованиеКорректировки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// Поиск некорректного чека
	ЧекНайден = НайтиНеКорректныйЧек(ДокументОснование); 	
	ВозвратБезИсправления = ПроверитьВозможностьСозданияЧекаНаВозврат(ОснованиеКорректировки);
	
	Если НЕ ЧекНайден  Тогда  
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не найден некорректный чек на оплату'"),,,, Отказ);
		Возврат;
			
	КонецЕсли; 

	СоздатьДокументыОплаты(ОснованиеКорректировки);

	КассаККМ = Справочники.КассыККМ.ПолучитьОсновнуюКассуККМ();
	КассаККМПриИзмененииНаСервере();   
	
	ТипОплаты = Перечисления.ТипыОплатыККТ.ВстречноеПредоставление;
		
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		ФР = Справочники.НастройкиРМК.ПолучитьПодключенноеОборудование(
		Перечисления.ТипыПодключаемогоОборудования.ККТ,
		КассаККМ);
		Если НЕ ЗначениеЗаполнено(ФР) Тогда
			ФР = Справочники.НастройкиРМК.ПолучитьПодключенноеОборудование(
			Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор,
			КассаККМ);
		КонецЕсли;
		ЧекНаОплатуВозврат.ФР = ФР;
		Если НЕ ТолькоВозврат Тогда
			ЧекНаОплатуКорректировка.ФР = ФР;
		КонецЕсли;
	КонецЕсли;
	
	ТелефонEmailПокупателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЧекНаОплатуОснование, "ТелефонEmailПокупателя");
	
	Если ЗначениеЗаполнено(ТелефонEmailПокупателя) Тогда
		ЧекНаОплатуВозврат.ТелефонEmailПокупателя = ТелефонEmailПокупателя;
		
		Если НЕ ТолькоВозврат Тогда
			ЧекНаОплатуКорректировка.ТелефонEmailПокупателя = ТелефонEmailПокупателя;
		КонецЕсли;
	КонецЕсли;

	
	УправлениеДиалогомНаСервере();
		
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы      

&НаКлиенте
Процедура РежимФормированияЧекаПриИзменении(Элемент)
	
	Если РежимФормированияЧека Тогда  
		Если ВозвратБезИсправления Тогда 
			Если  ЧекНаОплатуВозвратБезИсправления.Оплаты.Количество()> 0 Тогда
				ТипОплаты = ЧекНаОплатуВозвратБезИсправления.Оплаты[0].ТипОплаты;
			Иначе 
				ТипОплаты = Неопределено;
			КонецЕсли;
			ТолькоВозврат = Истина;	
			СоздатьЧекНавозвратБезИсправления(ОснованиеКорректировки);
		Иначе 
			РежимФормированияЧека = Ложь;
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Невозможно создать чек на возврат, выбран режим ""Исправление""'")); 
		КонецЕсли;

	Иначе 
		ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.ВстречноеПредоставление");  
		ТолькоВозврат = (ЕстьРеквизитНаКлиенте(ОснованиеКорректировки, "СуммаДокумента") И ОснованиеКорректировки.СуммаДокумента = 0);

		СоздатьДокументыОплаты(ОснованиеКорректировки);

	КонецЕсли;
	УправлениеДиалогомНасервере();
КонецПроцедуры  

&НаСервере
Процедура КассаККМПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Если РежимФормированияЧека  Тогда   
		
		ЧекНаОплатуВозвратБезИсправления.КассаККМ = КассаККМ;
		Документы.ЧекНаОплату.КассаККМПриИзменении(ЧекНаОплатуВозвратБезИсправления, ПараметрыДействия);

	Иначе
		ЧекНаОплатуВозврат.КассаККМ = КассаККМ;
		Документы.ЧекНаОплату.КассаККМПриИзменении(ЧекНаОплатуВозврат, ПараметрыДействия);
		
		// Вызываем обработчик пересчета табличных частей объекта
		Документы.ЧекНаОплату.ОбработкаПересчетаПоказателейОбъекта(ЧекНаОплатуВозврат, ПараметрыДействия);
		
		Если НЕ ТолькоВозврат Тогда
			ЧекНаОплатуКорректировка.КассаККМ = КассаККМ;
			Документы.ЧекНаОплату.КассаККМПриИзменении(ЧекНаОплатуКорректировка, ПараметрыДействия);
			
			// Вызываем обработчик пересчета табличных частей объекта
			Документы.ЧекНаОплату.ОбработкаПересчетаПоказателейОбъекта(ЧекНаОплатуКорректировка, ПараметрыДействия);
			
			СуммаОплаты = ЧекНаОплатуКорректировка.Товары.Итог("СуммаВсего");
			ЧекНаОплатуКорректировка.СуммаДокумента = СуммаОплаты;
			ЧекНаОплатуКорректировка.Оплаты[0].Сумма = СуммаОплаты;
			
			Документы.ЧекНаОплату.ПроизвестиРаспределениеСуммыОплаты(
			ЧекНаОплатуКорректировка.СуммаДокумента,
			ЧекНаОплатуКорректировка.Товары);
			
		КонецЕсли; 
	КонецЕсли;
	
	СформироватьИнформацию();
	
КонецПроцедуры // КассаККМПриИзмененииНаСервере()

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	КассаККМПриИзмененииНаСервере();
	
КонецПроцедуры // КассаККМПриИзменении()

&НаКлиенте
Процедура ФРПриИзменении(Элемент)

	Если РежимФормированияЧека  Тогда   
		
		ЧекНаОплатуВозвратБезИсправления.ФР = ФР;
	Иначе
		ЧекНаОплатуВозврат.ФР = ФР;
		
		Если НЕ ТолькоВозврат Тогда
			ЧекНаОплатуКорректировка.ФР = ФР;
		КонецЕсли;  
	КонецЕсли;
	
КонецПроцедуры // ФРПриИзменении()

&НаКлиенте
Процедура ТелефонEmailПокупателяПриИзменении(Элемент)  
	
	Если РежимФормированияЧека  Тогда  
		ЧекНаОплатуВозвратБезИсправления.ТелефонEmailПокупателя = ТелефонEmailПокупателя;
	Иначе
		ЧекНаОплатуВозврат.ТелефонEmailПокупателя = ТелефонEmailПокупателя;
		
		Если НЕ ТолькоВозврат Тогда
			ЧекНаОплатуКорректировка.ТелефонEmailПокупателя = ТелефонEmailПокупателя;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТипОплатыПриИзмененииНаСервере()
	ЧекНаОплатуВозвратБезИсправления.Оплаты[0].ТипОплаты = ТипОплаты;
КонецПроцедуры

&НаКлиенте
Процедура ТипОплатыПриИзменении(Элемент)
	ТипОплатыПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПробитьЧеки(Команда)
	
	Если НЕ РеквизитыЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФР) Тогда
		ТекстВопроса = 
			НСтр("ru = 'Не указан ФР. Чеки не будут пробиты после записи.
				|Продолжить?'");
		Обработчик = Новый ОписаниеОповещения("ПродолжитьВыполнениеПробитияЧеков", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ЗавершениеПробитиеЧеков();
	
КонецПроцедуры // ПробитьЧеки()

&НаКлиенте
Процедура ЗаписатьЧеки(Команда)   
	ЗаписатьДокументыЧекНаОплату();	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция НайтиНеКорректныйЧек(ДокументОснование)
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЧекНаОплату.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА ЧекНаОплату.ДатаФР = ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Пробит
	               |ИЗ
	               |	Документ.ЧекНаОплату КАК ЧекНаОплату
	               |ГДЕ
	               |	ЧекНаОплату.ДокументОснование = &ДокументОснование
	               |	И ЧекНаОплату.ХозОперация = &ВидОперации
	               |	И ЧекНаОплату.Проведен";
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ВидОперации", 
		?(КорректировкаПоПриходу, Справочники.ХозОперации.ЧекНаОплату, Справочники.ХозОперации.ЧекНаОплатуПокупки));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЧекНаОплатуОснование = Выборка.Ссылка;
		Если НЕ Выборка.Пробит Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Корректируемый чек %1 не был пробит на ФР.'"), Выборка.Ссылка)
			);
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПолучитьФПДЧека(Сделка)
	
	Если НЕ ЗначениеЗаполнено(Сделка) Тогда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЧекНаОплату.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ДокументОплаты
	               |ИЗ
	               |	Документ.ЧекНаОплату КАК ЧекНаОплату
	               |ГДЕ
	               |	ЧекНаОплату.ДокументОснование = &Сделка
	               |	И ЧекНаОплату.ХозОперация = &ВидОперации
	               |	И ЧекНаОплату.Проведен
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЧекНаОплату.Ссылка
	               |ИЗ
	               |	Документ.ЧекНаОплату КАК ЧекНаОплату
	               |ГДЕ
	               |	ЧекНаОплату.ДокументОснование = НЕОПРЕДЕЛЕНО
	               |	И ЧекНаОплату.Сделка = &Сделка
	               |	И ЧекНаОплату.ХозОперация = &ВидОперации
	               |	И ЧекНаОплату.Проведен
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДокументОплаты.Ссылка КАК ЧекНаОплату,
	               |	ФискальныеОперации.ФискальныйПризнак КАК ФискальныйПризнак
	               |ИЗ
	               |	ДокументОплаты КАК ДокументОплаты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	               |		ПО ДокументОплаты.Ссылка = ФискальныеОперации.ДокументОснование";
	Запрос.УстановитьПараметр("Сделка", Сделка);
	Запрос.УстановитьПараметр("ВидОперации", 
		?(КорректировкаПоПриходу, Справочники.ХозОперации.ЧекНаОплату, Справочники.ХозОперации.ЧекНаОплатуПокупки));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ФискальныйПризнак;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ЗапросПолученияДокументаОснования()

&НаСервере
Процедура СоздатьДокументыОплаты(ОснованиеКорректировки)
	
	Сделка = Неопределено;
	
	Если ЕстьРеквизит(ОснованиеКорректировки, "Сделка") Тогда
		Сделка = ОснованиеКорректировки.Сделка;
	Иначе
		Сделка = ЧекНаОплатуОснование.Сделка;
	КонецЕсли;
		 
	НомерФПД = ПолучитьФПДЧека(Сделка);
	
	Если ПустаяСтрока(НомерФПД) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'У корректируемого чека нет фискального признака пробития на ФР.'"));
	КонецЕсли;
	
	// Заполним чек возврата на основании некорректного чека.
	ЧекНаОплату = РеквизитФормыВЗначение("ЧекНаОплатуВозврат", Тип("ДокументОбъект.ЧекНаОплату"));
	ЧекНаОплату.Заполнить(ЧекНаОплатуОснование);
	ЧекНаОплату.ДокументОснование = ОснованиеКорректировки;
	ЧекНаОплату.Сделка = Сделка;
	ЧекНаОплату.ФР = Неопределено;
	ЧекНаОплату.КассаККМ = Справочники.КассыККМ.ПустаяСсылка();
	ЧекНаОплату.ТелефонEmailПокупателя = "";
	ЧекНаОплату.ДополнительныйРеквизитЧека = НомерФПД;
	Если КорректировкаПоПриходу Тогда
		ЧекНаОплату.ХозОперация = Справочники.ХозОперации.ЧекНаОплатуВозврат;
	Иначе
		ЧекНаОплату.ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупкиВозврат;
	КонецЕсли;
	
	Если ЧекНаОплату.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты Тогда
		ЧекНаОплату.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	КонецЕсли;
	
	// Встречное предоставление
	
	ЧекНаОплату.Оплаты.Очистить();
	
	НоваяСтрока = ЧекНаОплату.Оплаты.Добавить();
	НоваяСтрока.ТипОплаты = Перечисления.ТипыОплатыККТ.ВстречноеПредоставление;
	НоваяСтрока.Сумма = ЧекНаОплату.СуммаДокумента;
	
	ЗначениеВДанныеФормы(ЧекНаОплату, ЧекНаОплатуВозврат);
	
	// Заполним чек возврата на основании некорректного чека.
	Если НЕ ТолькоВозврат Тогда
		
		ЧекНаОплату = РеквизитФормыВЗначение("ЧекНаОплатуКорректировка", Тип("ДокументОбъект.ЧекНаОплату"));  
		
		ДанныеОснования = Новый Структура(); 
		ДанныеОснования.Вставить("Ссылка", ОснованиеКорректировки);
		ДанныеОснования.Вставить("ЭтоВозврат", Ложь);
	
		ЧекНаОплату.Заполнить(ДанныеОснования);
		ЧекНаОплату.Сделка = Сделка;
		ЧекНаОплату.ДополнительныйРеквизитЧека = НомерФПД;
		Если КорректировкаПоПриходу Тогда
			ЧекНаОплату.ХозОперация = Справочники.ХозОперации.ЧекНаОплату;
		Иначе
			ЧекНаОплату.ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупки;
		КонецЕсли; 
		
		ПустыеСтроки = ЧекНаОплату.Товары.НайтиСтроки(Новый Структура("Количество", 0));
	
		Для каждого ПустаяСтрока Из ПустыеСтроки Цикл
			ЧекНаОплату.Товары.Удалить(ПустаяСтрока);
		КонецЦикла;
		
		// Встречное предоставление
		ЧекНаОплату.Оплаты.Очистить();
		
		НоваяСтрока = ЧекНаОплату.Оплаты.Добавить();
		НоваяСтрока.ТипОплаты = Перечисления.ТипыОплатыККТ.ВстречноеПредоставление;
		НоваяСтрока.Сумма = ЧекНаОплату.СуммаДокумента;
		
		ЗначениеВДанныеФормы(ЧекНаОплату, ЧекНаОплатуКорректировка);
		
	КонецЕсли;
	
	СформироватьИнформацию();
	
КонецПроцедуры // СоздатьДокументыОплаты()

&НаСервере
Процедура СоздатьЧекНавозвратБезИсправления(ОснованиеКорректировки) 	
	
	ЧекНаОплату = РеквизитФормыВЗначение("ЧекНаОплатуВозвратБезИсправления", Тип("ДокументОбъект.ЧекНаОплату"));
	ЧекНаОплату.ФР = ФР;
	ЧекНаОплату.КассаККМ = КассаККМ;
	ЧекНаОплату.ТелефонEmailПокупателя = ТелефонEmailПокупателя;

	ЧекНаОплату.Заполнить(ОснованиеКорректировки);
		
	ЗначениеВДанныеФормы(ЧекНаОплату, ЧекНаОплатуВозвратБезИсправления);
	СформироватьИнформацию();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьИнформацию()
	
	Информация = Новый Массив;
	Информация.Добавить(НСтр("ru = 'При пробитии чеков будут сформированы следующие документы:'"));
	
	Если РежимФормированияЧека Тогда 
	    Информация.Добавить(
			СтрШаблон(НСтр("ru = 'Чек на оплату возврат на сумму %1'"), Формат(ЧекНаОплатуВозвратБезИсправления.СуммаДокумента, "ЧДЦ=2")));
	Иначе
		Информация.Добавить(
			СтрШаблон(НСтр("ru = 'Чек на оплату возврат на сумму %1'"), Формат(ЧекНаОплатуВозврат.СуммаДокумента, "ЧДЦ=2"))); 
	КонецЕсли;
		
	Если НЕ ТолькоВозврат Тогда
		Информация.Добавить(
			СтрШаблон(НСтр("ru = 'Корректировочный чек на оплату на сумму %1'"),
			Формат(ЧекНаОплатуКорректировка.СуммаДокумента, "ЧДЦ=2")));
	КонецЕсли;
	
	Элементы.ИнформацияОСформированныхЧеках.Заголовок = СтрСоединить(Информация, Символы.ПС);
	
КонецПроцедуры // СфомрироватьИнформацию()

&НаКлиенте
Функция РеквизитыЗаполнены()
	
	КорректноЗаполнено = Истина;
	
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнена касса ККМ.'"),, "КассаККМ");
		КорректноЗаполнено = Ложь;
	КонецЕсли;
	
	Возврат КорректноЗаполнено;
	
КонецФункции // РеквизитыЗаполнены()

// Обработчик оповещения записи документов чека на оплату.
//
// Параметры:
//  Ответ - КодВозвратаДиалога - Ответ на вопрос о продолжении записи документа.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаКлиенте
Процедура ПродолжитьВыполнениеПробитияЧеков(Ответ, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершениеПробитиеЧеков();
	
КонецПроцедуры // ПродолжитьВыполнениеПробитияЧеков()

&НаКлиенте
Процедура ЗавершениеПробитиеЧеков()
	
	// Запишем документы
	Если НЕ ЗаписатьДокументыЧекНаОплату() Тогда
		Возврат;
	КонецЕсли;
	
	ОшибкаПриПробитии = Ложь;
	
	Если РежимФормированияЧека Тогда 
		ПробитьЧек(ЧекНаОплатуВозвратБезИсправления, "ПечатьЧекаЗавершение"); 
	Иначе	
		ПробитьЧек(ЧекНаОплатуВозврат, "ПечатьЧекаЗавершениеВозврат"); 
	КонецЕсли;
	
КонецПроцедуры // ЗавершениеПробитиеЧеков()

&НаСервере
Функция ЗаписатьДокументыЧекНаОплату()
	
	Если Не ЗначениеЗаполнено (КассаККМ) Тогда
		ОбщегоНазначения.СообщитьПользователю(Нстр("ru = 'Выберите кассу ККМ'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено (ФР) Тогда
		ОбщегоНазначения.СообщитьПользователю(Нстр("ru = 'Выберите фискальный регистратор'")); 
		Возврат Ложь;
	КонецЕсли; 
	
		
	Если РежимФормированияЧека Тогда
		
		Если Не ЗначениеЗаполнено (ТипОплаты) Тогда
			ОбщегоНазначения.СообщитьПользователю(Нстр("ru = 'Выберите тип оплаты'")); 
			Возврат Ложь;
		КонецЕсли; 
		ЧекНаОплату = РеквизитФормыВЗначение("ЧекНаОплатуВозвратБезИсправления", Тип("ДокументОбъект.ЧекНаОплату")); 
		Попытка
			
			ЧекНаОплату.Записать(РежимЗаписиДокумента.Проведение);
		Исключение			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					Нстр("ru = 'Не удалось записать чек на возврат по причине %1'"),
					ОписаниеОшибки()
				)
			);
						
			Возврат Ложь;
		КонецПопытки;
		
		ЗначениеВДанныеФормы(ЧекНаОплату, ЧекНаОплатуВозвратБезИсправления);

        Возврат Истина;
	Иначе
		ДокументЧекЗаписан = Ложь;
		
		ЧекНаОплату = РеквизитФормыВЗначение("ЧекНаОплатуВозврат", Тип("ДокументОбъект.ЧекНаОплату"));
		ЧекНаОплатуКорректный = РеквизитФормыВЗначение("ЧекНаОплатуКорректировка", Тип("ДокументОбъект.ЧекНаОплату"));
		
		НачатьТранзакцию();
		Попытка
			
			ЧекНаОплату.Записать(РежимЗаписиДокумента.Проведение);
			ДокументЧекЗаписан = Истина;
			Если НЕ ТолькоВозврат Тогда
				ЧекНаОплатуКорректный.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Если  ДокументЧекЗаписан Тогда
				ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
				Нстр("ru = 'Не удалось записать корректировочный чек по причине %1'"),
				ОписаниеОшибки()
				)
				);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
				Нстр("ru = 'Не удалось записать чек на возврат по причине %1'"),
				ОписаниеОшибки()
				)
				);
			КонецЕсли;
			
			Возврат Ложь;
			
		КонецПопытки;
		
		ЗначениеВДанныеФормы(ЧекНаОплату, ЧекНаОплатуВозврат);
		ЗначениеВДанныеФормы(ЧекНаОплатуКорректный, ЧекНаОплатуКорректировка);
		
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции // ЗаписатьДокументыЧекНаОплату()

&НаКлиенте
Процедура ПробитьЧек(ДокументЧек, ИмяСобытия)
	
	Если НЕ ЗначениеЗаполнено(ФР) Тогда
		Возврат;
	КонецЕсли;
	
	// Пробъем возврат на ФР
	ПараметрыДействия = Новый Структура();
	ПараметрыДействия.Вставить("Объект", ДокументЧек);
	ПараметрыДействия.Вставить("Форма", ЭтотОбъект);
	
	ОбработчикОповещения = Новый ОписаниеОповещения(ИмяСобытия, ЭтотОбъект);
	
	ПараметрыДействия.Вставить("ОповещениеПриЗавершении", ОбработчикОповещения);
	
	УправлениеДиалогомДокументаКлиент.ПробитьЧекЗавершениеФР(Неопределено, ПараметрыДействия);
	
КонецПроцедуры // ПоробитьЧеки()

&НаКлиенте
Процедура ЗаписатьФискальныеДанныеЧека(РезультатВыполнения, ЧекВозврата = Ложь)
	
	Если НЕ ТипЗнч(РезультатВыполнения) = Тип("Булево") Тогда
		Если НЕ РезультатВыполнения.Результат Тогда
			ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			ОшибкаПриПробитии = Истина;
			Возврат;
		КонецЕсли;
		// Получить номер чека и номер смены.
		ПараметрыФискализации = РезультатВыполнения.ПараметрыФискализации;
		
		ФискальныеРеквизиты = Новый Структура;
		
		НомерСмены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыФискализации, "НомерСменыККТ", "");
		ФискальныеРеквизиты.Вставить("НомерСмены", НомерСмены);
		
		НомерДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыФискализации, "НомерЧекаККТ", "");
		ФискальныеРеквизиты.Вставить("НомерДокумента", НомерДокумента);
		
		ДатаФР = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ПараметрыФискализации,
			"ДатаВремяЧека",
			МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса()
		);
		ФискальныеРеквизиты.Вставить("ДатаФР", ДатаФР);
		
		НомерЧека = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыФискализации, "НомерЧекаЗаСмену", "");
		ФискальныеРеквизиты.Вставить("НомерЧека", НомерЧека);
		
		Объект = ?(РежимФормированияЧека, ЧекНаОплатуВозвратБезИсправления, ?(ЧекВозврата, ЧекНаОплатуВозврат, ЧекНаОплатуКорректировка));
		
		Если ЗначениеЗаполнено(Объект.ДатаФР) Тогда
			Возврат;
		КонецЕсли;
		Если НЕ УправлениеДиалогомВызовСервера.ЗаписатьОбъект(Объект, Истина, ФискальныеРеквизиты) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Не удалось записать сведения о фискальных реквизитах в документ %1.
					| Необходимо вручную внести данные в документ: номер чека - %2, дата чека - %3,"
					+ " номер смены - %4, номер документа - %5'"),
					Объект.Ссылка,
					ФискальныеРеквизиты.НомерЧека,
					ФискальныеРеквизиты.ДатаФР,
					ФискальныеРеквизиты.НомерСмены,
					ФискальныеРеквизиты.НомерДокумента
				)
			);
			ОшибкаПриПробитии = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьФискальныеДанныеЧека()

// Завершение печати чека возврата
//
// Параметры:
//  РезультатВыполнения - Структура - Струкутра результата пробития чека на ФР.
//  Параметры           - Структура - Дополнительные параметры.
//
&НаКлиенте
Процедура ПечатьЧекаЗавершениеВозврат(РезультатВыполнения, Параметры) Экспорт
	
	ЗаписатьФискальныеДанныеЧека(РезультатВыполнения, Истина);
	
	Если ТолькоВозврат ИЛИ РежимФормированияЧека Тогда
		ЗавершениеПечатиЧека();
	Иначе
		ПробитьЧек(ЧекНаОплатуКорректировка, "ПечатьЧекаЗавершение");
	КонецЕсли;
	
КонецПроцедуры // ПечатьЧекаЗавершениеВозврат()

// Завершение печати корректного чека
//
// Параметры:
//  РезультатВыполнения - Структура - Струкутра результата пробития чека на ФР.
//  Параметры           - Структура - Дополнительные параметры.
//
&НаКлиенте
Процедура ПечатьЧекаЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЗаписатьФискальныеДанныеЧека(РезультатВыполнения);
	ЗавершениеПечатиЧека();
	
КонецПроцедуры // ПечатьЧекаЗавершение()

&НаКлиенте
Процедура ЗавершениеПечатиЧека()
	
	Если НЕ ОшибкаПриПробитии Тогда
		
		Закрыть();
		ЧекСсылка = ?(РежимФормированияЧека, ЧекНаОплатуВозвратБезИсправления.Ссылка, ЧекНаОплатуВозврат.Ссылка);  
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'Пробит чек возврата <%1>'"), ЧекСсылка);
		Сообщение.КлючДанных = ЧекСсылка;
		Сообщение.Сообщить();
		
		Если НЕ ТолькоВозврат Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон(НСтр("ru = 'Пробит корректировочный чек <%1>'"), ЧекНаОплатуКорректировка.Ссылка);
			Сообщение.КлючДанных = ЧекНаОплатуКорректировка.Ссылка;
			Сообщение.Сообщить();
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЧекиНаОплатуДокумента(ОснованиеКорректировки, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЧекНаОплату.Ссылка КАК Ссылка,
	               |	ЧекНаОплату.ДатаФР КАК ДатаФР
	               |ИЗ
	               |	Документ.ЧекНаОплату КАК ЧекНаОплату
	               |ГДЕ
	               |	ЧекНаОплату.ДокументОснование = &ДокументОснование
	               |	И ЧекНаОплату.Проведен
	               |	И ЧекНаОплату.ХозОперация = &ХозОперацияВозврат
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЧекНаОплату.Ссылка КАК Ссылка,
	               |	ЧекНаОплату.ДатаФР КАК ДатаФР
	               |ИЗ
	               |	Документ.ЧекНаОплату КАК ЧекНаОплату
	               |ГДЕ
	               |	ЧекНаОплату.ДокументОснование = &ДокументОснование
	               |	И ЧекНаОплату.Проведен
	               |	И ЧекНаОплату.ХозОперация = &ХозОперация";
	Запрос.УстановитьПараметр("ДокументОснование", ОснованиеКорректировки);
	Запрос.УстановитьПараметр("ХозОперация", 
		?(КорректировкаПоПриходу, Справочники.ХозОперации.ЧекНаОплату, Справочники.ХозОперации.ЧекНаОплатуПокупки));
	Запрос.УстановитьПараметр("ХозОперацияВозврат", 
		?(КорректировкаПоПриходу,
			Справочники.ХозОперации.ЧекНаОплатуВозврат,
			Справочники.ХозОперации.ЧекНаОплатуПокупкиВозврат));
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = ПакетЗапроса[0].Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.ДатаФР <> Дата(1, 1, 1) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'На основании документа введен и пробит чек на возврат <%1>'"), Выборка.Ссылка
				),
				,,,
				Отказ
			);
		Иначе
			ЧекНаОплату = Выборка.Ссылка.ПолучитьОбъект();
			ЗначениеВДанныеФормы(ЧекНаОплату, ЧекНаОплатуВозврат);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ТолькоВозврат Тогда
		Выборка = ПакетЗапроса[1].Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.ДатаФР <> Дата(1, 1, 1) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'На основании документа введен и пробит корректировочный чек <%1>'"),
					Выборка.Ссылка
				),
				,,,
				Отказ
			);
			Иначе
				ЧекНаОплату = Выборка.Ссылка.ПолучитьОбъект();
				ЗначениеВДанныеФормы(ЧекНаОплату, ЧекНаОплатуКорректировка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЧекиНаОплатуДокумента()

&НаСервере
Функция ПроверитьВозможностьСозданияЧекаНаВозврат(ОснованиеКорректировки)
	
	ХозОперацияОснования = ОснованиеКорректировки.Хозоперация;
	Если ХозОперацияОснования = 
		Справочники.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон Тогда 
			
		ПараметрыТовары 		= Документы.ЧекНаОплату.ПодготовитьТаблицуКорректировки(ОснованиеКорректировки.Товары.Выгрузить());
		ПараметрыАвтоработы		= Документы.ЧекНаОплату.ПодготовитьТаблицуКорректировки(ОснованиеКорректировки.Автоработы.Выгрузить()); 
			
		Если ПараметрыТовары.ИтоговаяТаблица <> Неопределено  И ПараметрыАвтоработы.ИтоговаяТаблица <> Неопределено Тогда
			Если (ПараметрыТовары.ЭтоВозврат И ПараметрыАвтоработы.ЭтоВозврат) Тогда
					
				Возврат Истина;
			КонецЕсли;
		ИначеЕсли ПараметрыТовары.ИтоговаяТаблица <> Неопределено И 
			ПараметрыАвтоработы.ИтоговаяТаблица = Неопределено И НЕ ПараметрыАвтоработы.ИзменениеЦен И ПараметрыТовары.ЭтоВозврат Тогда
				Возврат Истина;				
		ИначеЕсли ПараметрыАвтоработы.ИтоговаяТаблица <> Неопределено И 
			ПараметрыТовары.ИтоговаяТаблица = Неопределено И  НЕ ПараметрыТовары.ИзменениеЦен И ПараметрыАвтоработы.ЭтоВозврат Тогда
				Возврат Истина;
		КонецЕсли; 
	    Возврат Ложь;
	ИначеЕсли ХозОперацияОснования = Справочники.ХозОперации.КорректировкаРеализацииАвтомобилейКорректировкаПоСогласованиюСторон ИЛИ 
			ХозОперацияОснования = Справочники.ХозОперации.КорректировкаПоступленияАвтомобилейКорректировкаПоСогласованиюСторон  Тогда
			
		ПараметрыАвтомобили = Документы.ЧекНаОплату.ПодготовитьТаблицуКорректировки(ОснованиеКорректировки.Автомобили.Выгрузить(), Истина); 
		Если ПараметрыАвтомобили.ИтоговаяТаблица <> Неопределено И ПараметрыАвтомобили.ЭтоВозврат Тогда 
			 Возврат Истина;
		КонецЕсли; 
	    Возврат Ложь;
	ИначеЕсли ХозОперацияОснования = 
		Справочники.ХозОперации.КорректировкаПоступленияКорректировкаПоСогласованиюСторон Тогда 
			
		ПараметрыТовары = Документы.ЧекНаОплату.ПодготовитьТаблицуКорректировки(ОснованиеКорректировки.Товары.Выгрузить());
		Если ПараметрыТовары.ИтоговаяТаблица <> Неопределено И ПараметрыТовары.ЭтоВозврат Тогда 
			Возврат Истина;
		КонецЕсли;
		Возврат Ложь; 
	Иначе 
		Возврат Ложь;
	КонецЕсли; 
				
КонецФункции 

&НаСервере
Процедура УправлениеДиалогомНаСервере() 
 	
	Элементы.ЧекНаОплатуВозвратСсылка.Видимость = Не РежимФормированияЧека;
	Элементы.ЧекНаОплатуКорректировкаСсылка.Видимость = Не РежимФормированияЧека;
	Элементы.ЧекНаОплатуВозвратБезИсправленияСсылка.Видимость = РежимФормированияЧека;
	Элементы.ЧекНаОплатуОснование.Видимость = Не РежимФормированияЧека;
   	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТипОплаты",
		"Доступность",
		РежимФормированияЧека 
	);

КонецПроцедуры



#КонецОбласти
