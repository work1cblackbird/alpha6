// Модуль менеджера документа "Чек на оплату"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ОбработчикиОбновления

// Возвращает все документы, в которых присутствуют коды маркировки.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка результата запроса, содержащая требуемые документы.
//
Функция ДокументыСКодамиМаркировки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЧекНаОплатуКодыМаркировки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекНаОплату.КодыМаркировки КАК ЧекНаОплатуКодыМаркировки
	|ГДЕ
	|	ЧекНаОплатуКодыМаркировки.КодМаркировки <> """"";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Процедура зачистки криптохвостов кодов маркировки.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ЧекНаОплату - документ, для которого выполняется действие.
//
Процедура ОтрезатьКриптохвосты(ДокументОбъект) Экспорт
	
	Для Каждого СтрокаТоваров Из ДокументОбъект.КодыМаркировки Цикл
		СтрокаТоваров.КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(СтрокаТоваров.КодМаркировки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетФактураВыданный);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЧекНаОплату);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЧекКоррекции);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ЧекНаОплату);

КонецФункции

#КонецОбласти 


#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
				
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения); 
	Команда.Подменю 		= "ТоварыПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Установить ставку без НДС'"); 
	Команда.Идентификатор	= "ТоварыЗаполнитьСтавкуНДС"; 
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Товары";
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением = Ложь;
	Команда.Порядок			= 50;  
	
КонецПроцедуры 

// Обработчик перезаполнения ставки НДС документа 
//
Функция ТоварыЗаполнитьСтавкуНДС(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Объект.Товары) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не заполнена табличная часть'"), Ссылка);
	Иначе 
		Объект.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
		Объект.СуммаНДС = 0;
		Для Каждого Строка Из Объект.Товары Цикл 
			
			Строка.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
			Строка.СуммаНДС = 0;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции // ТоварыЗаполнитьСтавкуНДС()

#КонецОбласти



#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ЗапретРедактированияРеквизитовОбъектов

// Определяет блокируемые реквизиты
//
// Возвращаемое значение:
//  Массив - Строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]. Например: "Объект.Автор", "ПолеАвтор".
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив();
	
	Для Каждого ИмяРеквизита Из Метаданные.Документы.ЧекНаОплату.ТабличныеЧасти.Товары.Реквизиты Цикл
		Если ИмяРеквизита.Имя = "ДоговорВзаиморасчетов" Тогда
			Продолжить;	
		КонецЕсли;
		Результат.Добавить("Товары." + ИмяРеквизита.Имя);
	КонецЦикла;
	
	ЭлементыКомандноеПанели = ";ТоварыДобавить,ТоварыСкопировать,ТоварыИзменить,ТоварыУдалить,ТоварыЗакончитьРедактирование,ТоварыПоискПоТекущемуЗначению1,"
								+ "ТоварыНайти1,ТоварыОтменитьПоиск1,ТоварыПереместить,ТоварыСортировка,ТоварыПодборНоменклатуры";
	
	ЭлементыКомандноеПанели = ЭлементыКомандноеПанели + " ТоварыКонтекстноеМенюДобавить, ТоварыКонтекстноеМенюСкопировать,"
								+ " ТоварыКонтекстноеМенюУдалить, ТоварыКонтекстноеМенюПереместить";
		
	Результат.Добавить(ЭлементыКомандноеПанели);
	Результат.Добавить("Контрагент");
	Результат.Добавить("ДоговорВзаиморасчетов");
	Результат.Добавить("Карточка");
	Результат.Добавить("ПараметрыДокумента");
	Результат.Добавить("СпособЗачетаАвансов");
	Результат.Добавить("КассаККМ");
	Результат.Добавить("ФР");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции.
	ИтогиОперации = Новый Структура();
	НеПересчитыватьСуммуДокумента = ТипЗнч(Объект)= Тип("ДокументОбъект.ЧекНаОплату") 
	И Объект.ДополнительныеСвойства.Свойство("НеПересчитыватьСуммуДокумента") 
	И  Объект.ДополнительныеСвойства.НеПересчитыватьСуммуДокумента;
	
	ИтогиОперации.Вставить("СуммаДокумента", ?(НеПересчитыватьСуммуДокумента,Объект.СуммаДокумента,Объект.Товары.Итог("СуммаВсего")));
		
	// Производим установку полученных значений в итоговые показатели объекта.
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции.
	ИтогиОперации.Вставить("СуммаНДС",    Объект.Товары.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента-ИтогиОперации.СуммаНДС);
	
	// Возвращаем сведения об итогах операции.
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Производит расчет суммы скидки/наценки по документу в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция РассчитатьСуммуСкидкиНаценки(Объект) Экспорт
	
	Объект.СуммаСкидкиНаценки =
		Объект.Товары.Итог("СуммаСкидки")
		+ Объект.Товары.Итог("СуммаСкидкиСтроки")
		+ Объект.Товары.Итог("СуммаСкидкиБонусами");
	
КонецФункции // РассчитатьСуммуСкидкиНаценки()

// Процедура для расчета суммы оплаты. 
Процедура ПроизвестиРаспределениеСуммыОплаты(СуммаДокумента, Товары) Экспорт
	
	Если СуммаДокумента = 0 ИЛИ Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаибольшаяСуммаВсего = 0;
	ИндексСтроки = -1;
	
	КоэффициентРаспределения = ?(Товары.Итог("СуммаВсего") = 0, 0, СуммаДокумента / Товары.Итог("СуммаВсего"));
	
	Для Каждого Строка Из Товары Цикл
		Строка.СуммаОплаты = Окр(Строка.СуммаВсего * КоэффициентРаспределения, 2);
		Если Строка.СуммаВсего > НаибольшаяСуммаВсего Тогда
			НаибольшаяСуммаВсего = Строка.СуммаВсего;
			ИндексСтроки = Товары.Индекс(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Если ИндексСтроки > -1 Тогда
		ОшибкаОкругления = СуммаДокумента - Товары.Итог("СуммаОплаты");
		Товары[ИндексСтроки].СуммаОплаты = Товары[ИндексСтроки].СуммаОплаты + ОшибкаОкругления;
	КонецЕсли;
	
КонецПроцедуры //ПроизвестиРаспределениеСуммыОплаты()

// Процедура заполнения Фискальных реквизитов. Перенос из дополнительных сведений.
//
Процедура ЗаполнитьФискальныеРеквизиты() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеСведения.Свойство КАК Свойство,
	               |	ДополнительныеСведения.Значение КАК Значение,
	               |	ДополнительныеСведения.Объект КАК Объект,
	               |	ДополнительныеСведения.Свойство.Наименование КАК СвойствоНаименование
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(ДополнительныеСведения.Объект) В (&ТипыДокументов)
	               |	И ДополнительныеСведения.Свойство.Наименование В(&ФискальныеРеквизиты)";	
	ФискальныеРеквизиты = Новый Массив;
	ФискальныеРеквизиты.Добавить(НСтр("ru='Телефон или электронный адрес покупателя'"));
	ФискальныеРеквизиты.Добавить(НСтр("ru='Дополнительный реквизит чека'"));
	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить(Тип("ДокументСсылка.Чек"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ЧекНаОплату"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.Выписка"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	Запрос.УстановитьПараметр("ТипыДокументов",ТипыДокументов);
	Запрос.УстановитьПараметр("ФискальныеРеквизиты",ФискальныеРеквизиты);
	ВыборкаДокумента = Запрос.Выполнить().Выбрать();
	
	Свойства = Новый СписокЗначений();
	
	// Перенесем данные в реквизиты документов
	Пока ВыборкаДокумента.Следующий() Цикл
		
		ДокументОбъект = ВыборкаДокумента.Объект.ПолучитьОбъект();
		
		Если ВыборкаДокумента.СвойствоНаименование = НСтр("ru='Телефон или электронный адрес покупателя'") Тогда
			ДокументОбъект.ТелефонEmailПокупателя = ВыборкаДокумента.Значение;	
		ИначеЕсли ВыборкаДокумента.СвойствоНаименование = НСтр("ru='Дополнительный реквизит чека'") Тогда
			ДокументОбъект.ДополнительныйРеквизитЧека = ВыборкаДокумента.Значение;	
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если Свойства.НайтиПоЗначению(ВыборкаДокумента.Свойство) = Неопределено Тогда
			Свойства.Добавить(ВыборкаДокумента.Свойство,ВыборкаДокумента.Свойство);
		КонецЕсли;
			
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			ДокументОбъект.Записать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Не удалось перезаполнить фискальные реквизиты документа %1'"),
					СокрЛП(Строка(ДокументОбъект.Ссылка))
				)
			);
		КонецПопытки;
		
	КонецЦикла;
	
	// Удалим лишние записи
	Для Каждого Строка Из Свойства Цикл
		НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
    	НаборЗаписей.Отбор.Свойство.Установить(Строка.Значение);
		НаборЗаписей.Записать(); 
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьФискальныеРеквизиты()

// Процедура заполнения табличной части "Товары" документа "Чек на оплату"
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура, ДокументОбъект - Объект, для которого выполняется заполнение.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Функция ЗаполнитьТовары(Объект, ЗаполнитьПоОснованию = Истина, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Проверим заполнена сделка и какого она типа.
	ДокументЗаполнения = Неопределено;
	Если НЕ ЗаполнитьПоОснованию И ЗначениеЗаполнено(Объект.Сделка)
		И Метаданные.Документы.ЧекНаОплату.ВводитсяНаОсновании.Содержит(Объект.Сделка.Метаданные())
	Тогда
		ДокументЗаполнения = Объект.Сделка;
	Иначе
		ДокументЗаполнения = Объект.ДокументОснование;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументЗаполнения)
		ИЛИ НЕ ОбщегоНазначения.ЭтоДокумент(ДокументЗаполнения.Метаданные()) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДокументыОграниченияВывода = Новый Массив;
	ДокументыОграниченияВывода.Добавить(Тип("ДокументСсылка.ЗаказПоставщикуНаАвтомобиль"));
	Если ДокументыОграниченияВывода.Найти(ТипЗнч(ДокументЗаполнения)) <> Неопределено Тогда
		ПараметрыДействия.Вставить("НеВыводитьГТД");
		ПараметрыДействия.Вставить("НеВыводитьДоговорКомиссии");
	КонецЕсли;    
	
	Если ПолучитьЗначениеПараметраСтруктуры(Объект.ДополнительныеСвойства, "ЭтоВозврат") = Неопределено  Тогда 
		Если ДокументЗаполнения.Хозоперация = 
			Справочники.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон Тогда 
			
			ПараметрыТовары 		= ПодготовитьТаблицуКорректировки(ДокументЗаполнения.Товары.Выгрузить());
			ПараметрыАвтоработы		= ПодготовитьТаблицуКорректировки(ДокументЗаполнения.Автоработы.Выгрузить()); 
			
			Если ПараметрыТовары.ИтоговаяТаблица <> Неопределено  И ПараметрыАвтоработы.ИтоговаяТаблица <> Неопределено Тогда
				Если (ПараметрыТовары.ЭтоВозврат И ПараметрыАвтоработы.ЭтоВозврат) ИЛИ
					НЕ (ПараметрыТовары.ЭтоВозврат ИЛИ ПараметрыАвтоработы.ЭтоВозврат) Тогда
					
					ПараметрыДействия.Вставить("КорректировкаТовары", 		ПараметрыТовары.ИтоговаяТаблица); 
					ПараметрыДействия.Вставить("КорректировкаАвтоработы",	ПараметрыАвтоработы.ИтоговаяТаблица); 
					ПараметрыДействия.Вставить("ЭтоВозврат", ПараметрыТовары.ЭтоВозврат); 
				КонецЕсли;
			ИначеЕсли ПараметрыТовары.ИтоговаяТаблица <> Неопределено И 
				ПараметрыАвтоработы.ИтоговаяТаблица = Неопределено И НЕ ПараметрыАвтоработы.ИзменениеЦен Тогда
				
				ПараметрыДействия.Вставить("КорректировкаТовары", 		ПараметрыТовары.ИтоговаяТаблица); 
				
				КорректировкаАвтоработы = ДокументЗаполнения.Автоработы.Выгрузить(); 
				КорректировкаАвтоработы.Очистить();
				ПараметрыДействия.Вставить("КорректировкаАвтоработы", 	КорректировкаАвтоработы);
				ПараметрыДействия.Вставить("ЭтоВозврат", ПараметрыТовары.ЭтоВозврат); 
				
			ИначеЕсли ПараметрыАвтоработы.ИтоговаяТаблица <> Неопределено И 
				ПараметрыТовары.ИтоговаяТаблица = Неопределено И  НЕ ПараметрыТовары.ИзменениеЦен Тогда
				
				КорректировкаТовары = ДокументЗаполнения.Товары.Выгрузить();
				КорректировкаТовары.Очистить();
				ПараметрыДействия.Вставить("КорректировкаТовары",		КорректировкаТовары);
				ПараметрыДействия.Вставить("КорректировкаАвтоработы",	ПараметрыАвтоработы.ИтоговаяТаблица);
				ПараметрыДействия.Вставить("ЭтоВозврат", ПараметрыАвтоработы.ЭтоВозврат);
				
			КонецЕсли;
		КонецЕсли; 
		Если ДокументЗаполнения.Хозоперация = Справочники.ХозОперации.КорректировкаРеализацииАвтомобилейКорректировкаПоСогласованиюСторон ИЛИ 
			ДокументЗаполнения.Хозоперация = Справочники.ХозОперации.КорректировкаПоступленияАвтомобилейКорректировкаПоСогласованиюСторон Тогда
			
			ПараметрыАвтомобили = ПодготовитьТаблицуКорректировки(ДокументЗаполнения.Автомобили.Выгрузить(), Истина); 
			Если ПараметрыАвтомобили.ИтоговаяТаблица <> Неопределено Тогда 
				ПараметрыДействия.Вставить("КорректировкаАвтомобили", ПараметрыАвтомобили.ИтоговаяТаблица);
				ПараметрыДействия.Вставить("ЭтоВозврат", ПараметрыАвтомобили.ЭтоВозврат);
			КонецЕсли; 
		КонецЕсли;   
		Если ДокументЗаполнения.Хозоперация = 
			Справочники.ХозОперации.КорректировкаПоступленияКорректировкаПоСогласованиюСторон Тогда 
			
			ПараметрыТовары = ПодготовитьТаблицуКорректировки(ДокументЗаполнения.Товары.Выгрузить());
			Если ПараметрыТовары.ИтоговаяТаблица <> Неопределено  Тогда 
				 ПараметрыДействия.Вставить("КорректировкаТовары", ПараметрыТовары.ИтоговаяТаблица); 
				 ПараметрыДействия.Вставить("ЭтоВозврат", ПараметрыТовары.ЭтоВозврат); 
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли;
	
	Если НЕ ЗаполнитьНоменклатурой(Объект, ДокументЗаполнения, ПараметрыДействия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗаполнитьАвтоработами(Объект, ДокументЗаполнения, ПараметрыДействия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗаполнитьАвтомобилем(Объект, ДокументЗаполнения, ПараметрыДействия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗаполнитьАвтомобилями(Объект, ДокументЗаполнения, ПараметрыДействия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Заполним договор агента
	ЗаполнитьТоварамДоговорАгента(Объект, ДокументЗаполнения);
	
	Если ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваров")
		ИЛИ ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		Если ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			ДокументСделки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументЗаполнения, "Сделка");
		Иначе
			ДокументСделки = ДокументЗаполнения;
		КонецЕсли;
		
		// Заполним договор косиссионера
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументСделки,
			"Хозоперация,ДоговорВзаиморасчетов");
		Если ДанныеОснования.Хозоперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия Тогда
			Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
				ТекущаяСтрока.ДоговорВзаиморасчетов = ДанныеОснования.ДоговорВзаиморасчетов;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.СчетНаОплату") Тогда
		ОснованиеСчетаНаОплату = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументЗаполнения, "ДокументОснование");
		Если ЗначениеЗаполнено(ОснованиеСчетаНаОплату)
			И ТипЗнч(ОснованиеСчетаНаОплату) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
			ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ОснованиеСчетаНаОплату,
				"Хозоперация,ДоговорКомитента");
			Если ДанныеОснования.Хозоперация = Справочники.ХозОперации.РеализацияАгентскихУслуг Тогда
				Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
					ТекущаяСтрока.ДоговорВзаиморасчетов = ДанныеОснования.ДоговорКомитента;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.СчетОтПоставщика") Тогда
		ОснованиеСчетаОтПоставщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументЗаполнения, "ДокументОснование");
		Если ЗначениеЗаполнено(ОснованиеСчетаОтПоставщика)
			И ТипЗнч(ОснованиеСчетаОтПоставщика) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
			ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ОснованиеСчетаОтПоставщика,
				"Хозоперация,ДоговорВзаиморасчетов");
			Если ДанныеОснования.Хозоперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия Тогда
				Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
					ТекущаяСтрока.ДоговорВзаиморасчетов = ДанныеОснования.ДоговорВзаиморасчетов;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументЗаполнения)
		И (ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.РеализацияТоваров")
		ИЛИ ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.ВозвратПоставщику")
		ИЛИ ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.ЗаказНаряд")
		ИЛИ ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.ВозвратОтПокупателя")
		ИЛИ ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.ОтчетКомитенту")
		ИЛИ ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.СчетНаОплату")
		ИЛИ ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.СчетОтПоставщика")
		ИЛИ ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.КорректировкаРеализации")
		ИЛИ ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей")) Тогда
		Объект.БлокироватьПерерасчетСкидок = Истина;
		ТаблицаТоваров = Объект.Товары.Выгрузить();
		
		Если ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.КорректировкаРеализации")
			ИЛИ ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей") Тогда
			ДокументСделки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументЗаполнения, "Сделка");
		Иначе
			ДокументСделки = ДокументЗаполнения;
		КонецЕсли;
		
		УправлениеДиалогомДокументаСервер.ЗаполнитьГТД(Объект, ТаблицаТоваров,, ДокументСделки);
		Объект.Товары.Загрузить(ТаблицаТоваров);
	КонецЕсли;
	
	// Заполним ТЧ Коды маркировки
	МаркировкаТоваровСервер.ЗаполнитьКодыМаркировкиТоваров(Объект, ДокументЗаполнения);
	
	Возврат Истина;
	
КонецФункции // ЗаполнитьТовары()

Функция ЗаполнитьНоменклатурой(Объект, ДокументЗаполнения, ПараметрыДействия)
	
	Если НЕ ЗначениеЗаполнено(ДокументЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Если ЕстьРеквизит(ДокументЗаполнения,, "Товары") И Объект.Товары.Количество() = 0 Тогда
			ТоварыОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументЗаполнения, "Товары").Выгрузить();
			Объект.Товары.Загрузить(ТоварыОснования);
		КонецЕсли;
		Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "КорректировкаТовары") <> Неопределено Тогда
			Объект.Товары.Загрузить(ПараметрыДействия.КорректировкаТовары); 
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток КАК Количество,
	|	ЗаказыПокупателейОстатки.СуммаОстаток КАК СуммаЗаказа,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.Количество * ЗаказПокупателяТовары.Коэффициент,1) КАК КоличествоБазовое,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.ЕдиницаИзмерения,
	|		Значение(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.Коэффициент,1) КАК Коэффициент,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.СтавкаНДС, ЗаказыПокупателейОстатки.Номенклатура.СтавкаНДС) КАК СтавкаНДС,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.НомерСтроки, 1000000) КАК НомерСтроки,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.СкидкаНаТовар, ЗНАЧЕНИЕ(Справочник.ТипыСкидок.ПустаяСсылка)) КАК СкидкаНаТовар,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.ПроцентСкидкиСтроки,0) КАК ПроцентСкидкиСтроки,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.ПроцентСкидки,0) КАК ПроцентСкидки
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки("+?(Объект.Ссылка.Пустая(),"","&НаМомент")+",
	|	Контрагент = &Контрагент И Заказ = &Заказ) КАК ЗаказыПокупателейОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ПО 
	|	ЗаказыПокупателейОстатки.Заказ                      = ЗаказПокупателяТовары.Ссылка
	|	И ЗаказыПокупателейОстатки.Номенклатура               = ЗаказПокупателяТовары.Номенклатура
	|	И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказПокупателяТовары.ХарактеристикаНоменклатуры
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(КоличествоБазовое),
	|	МАКСИМУМ(Количество),
	|	МАКСИМУМ(СуммаЗаказа)
	|ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры");
	
	ВалютаЗаказа	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДокументЗаполнения,
		"ДоговорВзаиморасчетов.ВалютаВзаиморасчетов"
	);
	СтруктураКурса	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаЗаказа,Объект.Дата);
	КурсЗаказа		= СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЧекНаОплату") Тогда
		МоментВремени = Объект.МоментВремени();
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		МоментВремени = Новый МоментВремени(Объект.Дата, Объект.Ссылка);
	Иначе
		МоментВремени = Объект.Дата;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НаМомент", МоментВремени);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Заказ",      ДокументЗаполнения);
	
	СкидкаНаценка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументЗаполнения, "СкидкаНаценка");
	Объект.Товары.Очистить(); // нужные только скорректированные позиции
	ВыборкаНоменклатуры = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		ВыборкаХарактеристик = ВыборкаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХарактеристик.Следующий() Цикл
			ВсегоОсталось 				= ВыборкаХарактеристик.Количество;
			КоличествоБазовоеПоЗаказу 	= ВыборкаХарактеристик.КоличествоБазовое;
			СуммаОсталось 				= РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ВыборкаХарактеристик.СуммаЗаказа,
			ВалютаЗаказа,
			КурсЗаказа,
			Объект.ВалютаДокумента,
			Объект.КурсДокумента);
			ВыборкаДетали 				= ВыборкаХарактеристик.Выбрать(ОбходРезультатаЗапроса.Прямой);
			НоваяСтрока   				= Неопределено;
			Пока ВыборкаДетали.Следующий() Цикл
				Если ВсегоОсталось = 0 Тогда
					Прервать;
				КонецЕсли;
				Если ВыборкаДетали.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				Если КоличествоБазовоеПоЗаказу = 1 Тогда
					КоличествоСтроки = ВыборкаДетали.Количество;
				Иначе
					КоличествоСтроки = ВыборкаДетали.Количество*(ВыборкаДетали.КоличествоБазовое/КоличествоБазовоеПоЗаказу);
				КонецЕсли;
				ТекущееКоличество 						= Мин(ВсегоОсталось, КоличествоСтроки);
				НоваяСтрока								= Объект.Товары.Добавить();
				НоваяСтрока.Номенклатура				= ВыборкаДетали.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры	= ВыборкаДетали.ХарактеристикаНоменклатуры;
				НоваяСтрока.ЕдиницаИзмерения			= ВыборкаДетали.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент					= ВыборкаДетали.Коэффициент;
				Документы.ЧекНаОплату.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
				НоваяСтрока.Количество					= 
				ТекущееКоличество/?(НЕ ЗначениеЗаполнено(НоваяСтрока.Коэффициент),1,НоваяСтрока.Коэффициент);
				НоваяСтрока.СтавкаНДС					= ВыборкаДетали.СтавкаНДС;
				ТекСумма 								= (СуммаОсталось/ВсегоОсталось)*ТекущееКоличество;
				СуммаОсталось 							= СуммаОсталось - ТекСумма;
				
				НоваяСтрока.СкидкаНаТовар 				= ВыборкаДетали.СкидкаНаТовар;
				НоваяСтрока.ПроцентСкидки 				= ВыборкаДетали.ПроцентСкидки;
				НоваяСтрока.ПроцентСкидкиСтроки 		= ВыборкаДетали.ПроцентСкидкиСтроки;
				
				НоваяСтрока.СуммаВсего 					= ТекСумма;
				Документы.ЧекНаОплату.ТоварыСуммаВсегоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
				
				ВсегоОсталось 							= ВсегоОсталось - ТекущееКоличество;
			КонецЦикла;
			
			Если ВсегоОсталось > 0 ИЛИ СуммаОсталось > 0 Тогда
				Если НЕ НоваяСтрока = Неопределено Тогда
					НоваяСтрока.Количество 	= НоваяСтрока.Количество + (ВсегоОсталось/НоваяСтрока.Коэффициент);
					Документы.ЧекНаОплату.ТоварыКоличествоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
					НоваяСтрока.СуммаВсего 	= НоваяСтрока.СуммаВсего + СуммаОсталось;
				Иначе
					НоваяСтрока								= Объект.Товары.Добавить();
					НоваяСтрока.Номенклатура				= ВыборкаХарактеристик.Номенклатура;
					НоваяСтрока.ХарактеристикаНоменклатуры 	= ВыборкаХарактеристик.ХарактеристикаНоменклатуры;
					Документы.ЧекНаОплату.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
					Документы.ЧекНаОплату.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
					НоваяСтрока.СтавкаНДС 					= Справочники.СтавкиНДС.ОсновнаяСтавкаНДС;
					НоваяСтрока.Количество 					=
					ВсегоОсталось/?(НЕ ЗначениеЗаполнено(НоваяСтрока.Коэффициент),1,НоваяСтрока.Коэффициент);
					Документы.ЧекНаОплату.ТоварыКоличествоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
					НоваяСтрока.СуммаВсего 					= СуммаОсталось;
				КонецЕсли;
				Документы.ЧекНаОплату.ТоварыСуммаВсегоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ЗаполнитьНоменклатурой()

Функция ЗаполнитьАвтоработами(Объект, ДокументЗаполнения, ПараметрыДействия)
	
	Если ЕстьРеквизит(ДокументЗаполнения, , "Автоработы") Тогда
		
		УстановитьОтключениеБезопасногоРежима(Истина);
		УстановитьПривилегированныйРежим(Истина);
		
		ДанныеЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументЗаполнения,
			"ВалютаДокумента,КурсДокумента,Автоработы,ТипЦенРабот.ЦенаВключаетНДС");
		
		Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "КорректировкаАвтоработы") <> Неопределено Тогда
			Автоработы = ПараметрыДействия.КорректировкаАвтоработы.Скопировать(); 
		Иначе
			Автоработы = ДанныеЗаполнения.Автоработы.Выгрузить();
		КонецЕсли;
		
		НазванияАвторабот = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			Автоработы.ВыгрузитьКолонку("Авторабота"),
			"Наименование,НаименованиеПолное");
		
		ВалютаОснования = ДанныеЗаполнения.ВалютаДокумента;
		КурсОснования   = ДанныеЗаполнения.КурсДокумента;
		Пересчет = (ВалютаОснования <> Объект.ВалютаДокумента) ИЛИ (КурсОснования <> Объект.КурсДокумента);
		Для Каждого СтрокаТоваров Из Автоработы Цикл
			НоваяСтрокаСчета = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСчета, СтрокаТоваров);
			Если Объект.ТипЦен.ЦенаВключаетНДС Тогда
				Если НЕ ДанныеЗаполнения.ТипЦенРаботЦенаВключаетНДС Тогда
					ЗначениеСтавкиНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрокаСчета.СтавкаНДС, "Ставка");
					НоваяСтрокаСчета.Сумма = НоваяСтрокаСчета.Сумма + НоваяСтрокаСчета.Сумма * ЗначениеСтавкиНДС / 100;
					НоваяСтрокаСчета.Цена = НоваяСтрокаСчета.Сумма / (?(НоваяСтрокаСчета.Количество = 0, 1, НоваяСтрокаСчета.Количество) * ?(НоваяСтрокаСчета.Коэффициент = 0, 1, НоваяСтрокаСчета.Коэффициент)); 
				КонецЕсли;
			Иначе
				Если ДанныеЗаполнения.ТипЦенРаботЦенаВключаетНДС Тогда
					ЗначениеСтавкиНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрокаСчета.СтавкаНДС, "Ставка");
					НоваяСтрокаСчета.Сумма = НоваяСтрокаСчета.Сумма - НоваяСтрокаСчета.Сумма * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
					НоваяСтрокаСчета.Цена = НоваяСтрокаСчета.Сумма / (?(НоваяСтрокаСчета.Количество = 0, 1, НоваяСтрокаСчета.Количество) * ?(НоваяСтрокаСчета.Коэффициент = 0, 1, НоваяСтрокаСчета.Коэффициент)); 
				КонецЕсли;
			КонецЕсли;
			НоваяСтрокаСчета.Номенклатура = СтрокаТоваров.Авторабота.Номенклатура;
			НоваяСтрокаСчета.ЕдиницаИзмерения = СтрокаТоваров.Авторабота.Номенклатура.ОсновнаяЕдиницаИзмерения;
			// Создадим характеристику для автоработы
			НазваниеАвтоработы = НазванияАвторабот.Получить(СтрокаТоваров.Авторабота);
			НаименованиеХарактеристики = СтрШаблон(
				НСтр("ru = 'Авторабота %1. %2'"),
				СтрокаТоваров.НомерСтроки,
				?(ПустаяСтрока(НазваниеАвтоработы.НаименованиеПолное),
					НазваниеАвтоработы.Наименование,
					НазваниеАвтоработы.НаименованиеПолное)
			);
			АвтоработаТипНоменклатуры = Справочники.Номенклатура.Авторабота.ТипНоменклатуры;
			ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(
				НаименованиеХарактеристики,
				Истина,,
				АвтоработаТипНоменклатуры
			);
			
			Если ХарактеристикаНоменклатуры.Пустая() Тогда
				ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
				ХарактеристикаНоменклатуры.УстановитьНовыйКод();
				ХарактеристикаНоменклатуры.Владелец = АвтоработаТипНоменклатуры;
				ХарактеристикаНоменклатуры.Наименование = НаименованиеХарактеристики;
				ХарактеристикаНоменклатуры.ОбменДанными.Загрузка = Истина;
				Попытка
					ХарактеристикаНоменклатуры.Записать();
				Исключение
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'Ошибка создания новой характеристики автоработы: %1%2'"),
							Символы.ПС,
							ОписаниеОшибки()
						)
					);
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			
			НоваяСтрокаСчета.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры.Ссылка;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ЗаполнитьАвтоработами()

Функция ЗаполнитьАвтомобилем(Объект, ДокументЗаполнения, ПараметрыДействия)
	
	Если ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.ЗаказПоставщикуНаАвтомобиль") 
		ИЛИ ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.ЗаказНаАвтомобиль") Тогда
		
		УстановитьОтключениеБезопасногоРежима(Истина);
		УстановитьПривилегированныйРежим(Истина);
		
		Объект.Товары.Очистить();
		
		ЕстьТовары = ЕстьРеквизит(ДокументЗаполнения,, "Товары");
		ЕстьСкидкиИМаркетинговыеПрограммы = ЕстьРеквизит(ДокументЗаполнения, "СкидкиИМаркетинговыеПрограммы");
		ЕстьСебестоимостьАвтомобиля = ЕстьРеквизит(ДокументЗаполнения, "СебестоимостьАвтомобиля");
		СписокРеквизитов =
			"ВалютаДокумента,КурсДокумента,Автомобиль,Опции,ЦенаАвтомобиля,СуммаНДСНаАвтомобиль,СуммаВсегоНаАвтомобиль"
			+?(ЕстьТовары, ",Товары", "")
			+?(ЕстьСкидкиИМаркетинговыеПрограммы, ",СкидкиИМаркетинговыеПрограммы,СуммаРучнойСкидкиНаАвтомобиль", "")
			+?(ЕстьСебестоимостьАвтомобиля, ",СебестоимостьАвтомобиля", "");
		
		ДанныеЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументЗаполнения,
			СписокРеквизитов);
		
		ВалютаОснования = ДанныеЗаполнения.ВалютаДокумента;
		КурсОснования   = ДанныеЗаполнения.КурсДокумента;
		Пересчет = (ВалютаОснования <> Объект.ВалютаДокумента) ИЛИ (КурсОснования <> Объект.КурсДокумента);
		
		Если ЕстьТовары Тогда
			Товары = ДанныеЗаполнения.Товары.Выгрузить();
		Иначе
			Товары = Неопределено;
		КонецЕсли;
		Опции = ДанныеЗаполнения.Опции.Выгрузить();
		
		НоменклатураАвтомобиль = Справочники.Номенклатура.Автомобиль;
		АвтомобильТипНоменклатуры = НоменклатураАвтомобиль.ТипНоменклатуры;
		
		Автомобиль = НоменклатураАвтомобиля(ДанныеЗаполнения.Автомобиль, НоменклатураАвтомобиль);
		
		Если ТипЗнч(ДанныеЗаполнения.Автомобиль) = Тип("СправочникСсылка.Автомобили")
			И ЗначениеЗаполнено(ДанныеЗаполнения.Автомобиль.VIN) Тогда
			
			VIN = ДанныеЗаполнения.Автомобиль.VIN;
			
		Иначе
			VIN = ДанныеЗаполнения.Автомобиль.Наименование;
		КонецЕсли;
		
		ХарактеристикаНоменклатурыНаименование = "VIN " + VIN;
		ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(
			ХарактеристикаНоменклатурыНаименование,
			Истина,
			,
			АвтомобильТипНоменклатуры);
			
		Если ХарактеристикаНоменклатуры.Пустая() Тогда
			ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
			ХарактеристикаНоменклатуры.УстановитьНовыйКод();
			ХарактеристикаНоменклатуры.Владелец = АвтомобильТипНоменклатуры;
			ХарактеристикаНоменклатуры.Наименование = ХарактеристикаНоменклатурыНаименование;
			ХарактеристикаНоменклатуры.СерийныйНомер = VIN;
			ХарактеристикаНоменклатуры.ОбменДанными.Загрузка = Истина;
			Попытка
				ХарактеристикаНоменклатуры.Записать();
			Исключение
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'При записи новой характеристики автомобиля возникла ошибка:%1%2'"),
						Символы.ПС,
						ОписаниеОшибки()
					)
				);
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
		Цена = ДанныеЗаполнения.ЦенаАвтомобиля;
		Сумма = ДанныеЗаполнения.ЦенаАвтомобиля;
		СуммаНДС = ДанныеЗаполнения.СуммаНДСНаАвтомобиль;
		СуммаСкидки = 0;
		Если ЕстьСкидкиИМаркетинговыеПрограммы Тогда
			СкидкиИМаркетинговыеПрограммыДанные = ДанныеЗаполнения.СкидкиИМаркетинговыеПрограммы.Выгрузить();
			
			СуммаСкидки = СкидкиИМаркетинговыеПрограммыДанные.Итог("Значение")
				+ ДанныеЗаполнения.СуммаРучнойСкидкиНаАвтомобиль
				+ Товары.Итог("СуммаСкидки");
		КонецЕсли;
		СуммаВсего = ДанныеЗаполнения.СуммаВсегоНаАвтомобиль;
		
		СебестоимостьАвтомобиля = 0;
		Если ЕстьСебестоимостьАвтомобиля Тогда
			СебестоимостьАвтомобиля = ДанныеЗаполнения.СебестоимостьАвтомобиля;
		КонецЕсли;
		
		Цена = Цена + Опции.Итог("Цена") + ?(ЕстьТовары, Товары.Итог("Цена"), 0);
		Сумма = Сумма + Опции.Итог("Сумма") + ?(ЕстьТовары, Товары.Итог("Сумма"), 0);
		СуммаНДС = СуммаНДС + Опции.Итог("СуммаНДС") + ?(ЕстьТовары, Товары.Итог("СуммаНДС"), 0);
		СуммаВсего = СуммаВсего + Опции.Итог("СуммаВсего") + ?(ЕстьТовары, Товары.Итог("СуммаВсего"), 0);
		
		Цена = ?(
			Пересчет,
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				Цена,
				ВалютаОснования,
				КурсОснования,
				Объект.ВалютаДокумента,
				Объект.КурсДокумента),
			Цена);
		Сумма = ?(
			Пересчет,
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				Сумма,
				ВалютаОснования,
				КурсОснования,
				Объект.ВалютаДокумента,
				Объект.КурсДокумента),
			Сумма);
		СуммаНДС = ?(
			Пересчет,
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СуммаНДС,
				ВалютаОснования,
				КурсОснования,
				Объект.ВалютаДокумента,
				Объект.КурсДокумента),
			СуммаНДС);
		СуммаСкидки = ?(
			Пересчет,
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СуммаСкидки,
				ВалютаОснования,
				КурсОснования,
				Объект.ВалютаДокумента,
				Объект.КурсДокумента),
			СуммаСкидки);
		СуммаВсего = ?(
			Пересчет,
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СуммаВсего,
				ВалютаОснования,
				КурсОснования,
				Объект.ВалютаДокумента,
				Объект.КурсДокумента),
			СуммаВсего);
		СебестоимостьАвтомобиля = ?(
			Пересчет,
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СебестоимостьАвтомобиля,
				ВалютаОснования,
				КурсОснования,
				Объект.ВалютаДокумента,
				Объект.КурсДокумента),
			СебестоимостьАвтомобиля);
		
		СтрокаЧека = Объект.Товары.Добавить();
		СтрокаЧека.Номенклатура = Автомобиль;
		СтрокаЧека.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры.Ссылка;
		Документы.ЧекНаОплату.ТоварыНоменклатураПриИзменении(Объект, СтрокаЧека, ПараметрыДействия);
		СтрокаЧека.Количество = 1;
		
		СтрокаЧека.СуммаСкидки   = СуммаСкидки;
		СтрокаЧека.СуммаВсего    = СуммаВсего;
		Коэффициент = 100;
		МаксимальноеЗначение = 1;
		СтрокаЧека.ПроцентСкидки = ?(
			(СтрокаЧека.СуммаВсего + СтрокаЧека.СуммаСкидки) = 0,
			Коэффициент,
			(МаксимальноеЗначение - (СтрокаЧека.СуммаВсего / (СтрокаЧека.СуммаВсего + СтрокаЧека.СуммаСкидки))) * Коэффициент);
		Документы.ЧекНаОплату.ТоварыСуммаВсегоПриИзменении(Объект, СтрокаЧека, ПараметрыДействия);
		СтрокаЧека.Цена        = Цена;
		СтрокаЧека.Сумма       = Сумма;
		СтрокаЧека.СуммаНДС    = СуммаНДС;
		СтрокаЧека.СуммаСкидки = СуммаСкидки;
		СтрокаЧека.СебестоимостьАвтомобиля = СебестоимостьАвтомобиля;
		
		Если СебестоимостьАвтомобиля <> 0 Тогда 
			
			Если ЗначениеЗаполнено (СтрокаЧека.СтавкаНДС) Тогда
				СтрокаЧека.СтавкаНДС = РаботаСоСтавкамиНДССервер.РасчетнаяСтавкаНДСПоОбычной(СтрокаЧека.СтавкаНДС);
			Иначе
				ОсновнаяСтавка = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата).ОсновнаяСтавка;
				СтрокаЧека.СтавкаНДС = РаботаСоСтавкамиНДССервер.РасчетнаяСтавкаНДСПоОбычной(ОсновнаяСтавка);
			КонецЕсли;
				
		КонецЕсли;
		
		// Заполним комиссионера
		Если НЕ ПараметрыДействия.Свойство("НеВыводитьДоговорКомиссии") Тогда
			ДанныеДоговораВзаиморасчетов = УправлениеДиалогомДокументаСервер.ЗаполнитьДоговорКомисси(
				ДокументЗаполнения,
				ДанныеЗаполнения.Автомобиль);
			
			Если ДанныеДоговораВзаиморасчетов.Количество() > 0 Тогда
				ДоговорКомиссия = ДанныеДоговораВзаиморасчетов.Получить(ДанныеЗаполнения.Автомобиль);
				ЗаполнитьЗначенияСвойств(СтрокаЧека, ДоговорКомиссия);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ЗаполнитьАвтомобилем()

Функция ЗаполнитьАвтомобилями(Объект, ДокументЗаполнения, ПараметрыДействия)
	
	// Для документов, где есть ТЧ "Автомобили"
	Если ЕстьРеквизит(ДокументЗаполнения,, "Автомобили")
		И Не ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		
		УстановитьОтключениеБезопасногоРежима(Истина);
		УстановитьПривилегированныйРежим(Истина);
		
		Объект.Товары.Очистить();
		ЕстьТовары = ЕстьРеквизит(ДокументЗаполнения,,"Товары");
		ЕстьСуммаСкидкиТовары = ЕстьТовары И ЕстьРеквизит(ДокументЗаполнения,"СуммаСкидки","Товары");
		ЕстьСебестоимостьАвтомобиля = ЕстьРеквизит(ДокументЗаполнения, "СебестоимостьАвтомобиля", "Автомобили");
		СписокРеквизитов = "ВалютаДокумента,КурсДокумента,Автомобили" + ?(ЕстьТовары, ",Товары", "");
		
		ДанныеЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументЗаполнения,
			СписокРеквизитов);
		
		Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "КорректировкаАвтомобили") <> Неопределено Тогда
			Автомобили = ПараметрыДействия.КорректировкаАвтомобили.Скопировать(); 
		Иначе
			Автомобили = ДанныеЗаполнения.Автомобили.Выгрузить();
		КонецЕсли;
		
		ЭтоКорректировка = (ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей"));
		СебестоимостьАвтомобилей = Новый Соответствие;
		Если ЭтоКорректировка Тогда
			СебестоимостьАвтомобилей = АвтомобилиСервер
				.СебестоимостьАвтомобилейПриобретенныхУФизЛиц(Автомобили.ВыгрузитьКолонку("Автомобиль"), Объект);
		КонецЕсли;
		
		Если ЕстьТовары Тогда
			Товары = ДанныеЗаполнения.Товары.Выгрузить();
		Иначе
			Товары = Новый ТаблицаЗначений;
			Товары.Колонки.Добавить("ИдентификаторАвтомобиля", Новый ОписаниеТипов("Строка"));
		КонецЕсли;
		
		ВалютаОснования = ДанныеЗаполнения.ВалютаДокумента;
		КурсОснования   = ДанныеЗаполнения.КурсДокумента;
		Пересчет = (ВалютаОснования <> Объект.ВалютаДокумента) ИЛИ (КурсОснования <> Объект.КурсДокумента);
		
		НоменклатураАвтомобиль = Справочники.Номенклатура.Автомобиль;
		АвтомобильТипНоменклатуры = НоменклатураАвтомобиль.ТипНоменклатуры;
		ЕстьСуммаСкидки = ЕстьРеквизит(ДокументЗаполнения,"СуммаСкидки","Автомобили");
		ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
		ВыводитьГТД             = НЕ ПараметрыДействия.Свойство("НеВыводитьГТД");
		ВыводитьДоговорКомиссии = НЕ ПараметрыДействия.Свойство("НеВыводитьДоговорКомиссии");
		
		// Заполнение договора комиссионера.
		Если ВыводитьДоговорКомиссии Тогда
			СделкаОснования = Неопределено;
			Если ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.СчетНаОплатуЗаАвтомобили") Тогда
				СделкаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументЗаполнения, "ДокументОснование");
			КонецЕсли;
			Если ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.СчетОтПоставщикаЗаАвтомобили") Тогда
				СделкаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументЗаполнения, "ДокументОснование");
				Если ЗначениеЗаполнено(СделкаОснования)
					И ТипЗнч(СделкаОснования) = Тип("ДокументСсылка.ЗаказПоставщикуНаАвтомобиль") Тогда
					СделкаОснования = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			ДоговораКомиссии = УправлениеДиалогомДокументаСервер.ЗаполнитьДоговорКомисси(
				?(ЗначениеЗаполнено(СделкаОснования), СделкаОснования, ДокументЗаполнения),
				Автомобили.ВыгрузитьКолонку("Автомобиль"));
		КонецЕсли;
		
		Для Каждого СтрокаАвтомобиля Из Автомобили Цикл
			
			Автомобиль = НоменклатураАвтомобиля(СтрокаАвтомобиля.Автомобиль, НоменклатураАвтомобиль);
			
			// Создадим характеристику для автомобиля
			Если ТипЗнч(СтрокаАвтомобиля.Автомобиль) = Тип("СправочникСсылка.Автомобили")
				И ЗначениеЗаполнено(СтрокаАвтомобиля.Автомобиль.VIN) Тогда
				VIN=СтрокаАвтомобиля.Автомобиль.VIN;
			Иначе
				VIN=СтрокаАвтомобиля.Автомобиль.Наименование;
			КонецЕсли;
			ХарактеристикаНоменклатурыНаименование = "VIN "+VIN;
			ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(
				ХарактеристикаНоменклатурыНаименование,
				Истина,,
				АвтомобильТипНоменклатуры);
			Если ХарактеристикаНоменклатуры.Пустая() Тогда
				ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
				ХарактеристикаНоменклатуры.УстановитьНовыйКод();
				ХарактеристикаНоменклатуры.Владелец = АвтомобильТипНоменклатуры;
				ХарактеристикаНоменклатуры.Наименование = ХарактеристикаНоменклатурыНаименование;
				ХарактеристикаНоменклатуры.СерийныйНомер = VIN;
				ХарактеристикаНоменклатуры.ОбменДанными.Загрузка = Истина;
				Попытка
					ХарактеристикаНоменклатуры.Записать();
				Исключение
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'При записи новой характеристики автомобиля возникла ошибка:%1%2'"),
							Символы.ПС,
							ОписаниеОшибки()
						)
					);
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли; 
			Цена=СтрокаАвтомобиля.Цена;
			Сумма=СтрокаАвтомобиля.Сумма;
			СуммаСкидки = 0;
			СебестоимостьАвтомобиля = 0;
			СуммаНДС=СтрокаАвтомобиля.СуммаНДС;
			Если ЕстьСуммаСкидки Тогда
				СуммаСкидки=СтрокаАвтомобиля.СуммаСкидки;
			КонецЕсли;
			СуммаВсего=СтрокаАвтомобиля.СуммаВсего;
			ИдентификаторАвтомобиля = ?(ЕстьТовары, СтрокаАвтомобиля.ИдентификаторАвтомобиля, "");
			СтрокиОборудования = Товары.НайтиСтроки(
				Новый Структура("ИдентификаторАвтомобиля", ИдентификаторАвтомобиля));
			Для Каждого СтрокаОборудования Из СтрокиОборудования Цикл
				Цена=Цена+СтрокаОборудования.Цена;
				Сумма=Сумма+СтрокаОборудования.Сумма;
				СуммаНДС=СуммаНДС+СтрокаОборудования.СуммаНДС;
				Если ЕстьСуммаСкидкиТовары Тогда
					СуммаСкидки=СуммаСкидки+СтрокаОборудования.СуммаСкидки;
				КонецЕсли;
				СуммаВсего=СуммаВсего+СтрокаОборудования.СуммаВсего;
			КонецЦикла;
			Цена        = ?(Пересчет,
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					Цена,
					ВалютаОснования,
					КурсОснования,
					Объект.ВалютаДокумента,
					Объект.КурсДокумента),
				Цена);
			Сумма       = ?(Пересчет,
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					Сумма,
					ВалютаОснования,
					КурсОснования,
					Объект.ВалютаДокумента,
					Объект.КурсДокумента),
				Сумма);
			СуммаНДС    = ?(Пересчет,
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					СуммаНДС,
					ВалютаОснования,
					КурсОснования,
					Объект.ВалютаДокумента,
					Объект.КурсДокумента),
				СуммаНДС);
			СуммаСкидки = ?(Пересчет,
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					СуммаСкидки,
					ВалютаОснования,
					КурсОснования,
					Объект.ВалютаДокумента,
					Объект.КурсДокумента),
				СуммаСкидки);
			СуммаВсего  = ?(Пересчет,
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					СуммаВсего,
					ВалютаОснования,
					КурсОснования,
					Объект.ВалютаДокумента,
					Объект.КурсДокумента),
				СуммаВсего);
				
			Если ЕстьСебестоимостьАвтомобиля Тогда
				СебестоимостьАвтомобиля = ?(
					Пересчет,
					РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
						СтрокаАвтомобиля.СебестоимостьАвтомобиля,
						ВалютаОснования,
						КурсОснования,
						Объект.ВалютаДокумента,
						Объект.КурсДокумента),
					СтрокаАвтомобиля.СебестоимостьАвтомобиля);
			ИначеЕсли ЭтоКорректировка И СебестоимостьАвтомобилей.Получить(СтрокаАвтомобиля.Автомобиль) <> Неопределено Тогда
				СебестоимостьАвтомобиля = СебестоимостьАвтомобилей.Получить(СтрокаАвтомобиля.Автомобиль);
			Иначе
				СебестоимостьАвтомобиля = 0;
			КонецЕсли;
			
			СтрокаЧека = Объект.Товары.Добавить();
			СтрокаЧека.Номенклатура = Автомобиль;
			СтрокаЧека.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры.Ссылка;
			Документы.ЧекНаОплату.ТоварыНоменклатураПриИзменении(Объект, СтрокаЧека, ПараметрыДействия);
			СтрокаЧека.Количество = 1;
			СтрокаЧека.СуммаСкидки   = СуммаСкидки;
			СтрокаЧека.СуммаВсего    = СуммаВсего;
			
			МаксимальноеЧисло = 1;
			Коэффициент = 100;
			
			СтрокаЧека.ПроцентСкидки = ?(
				(СтрокаЧека.СуммаВсего + СтрокаЧека.СуммаСкидки) = 0,
				Коэффициент,
				(МаксимальноеЧисло - (СтрокаЧека.СуммаВсего / (СтрокаЧека.СуммаВсего + СтрокаЧека.СуммаСкидки))) * Коэффициент);
			Документы.ЧекНаОплату.ТоварыСуммаВсегоПриИзменении(Объект, СтрокаЧека, ПараметрыДействия);
			СтрокаЧека.Цена        = Цена;
			СтрокаЧека.Сумма       = Сумма;
			СтрокаЧека.СтавкаНДС   = СтрокаАвтомобиля.СтавкаНДС;
			СтрокаЧека.СуммаНДС    = СуммаНДС;
			СтрокаЧека.СуммаСкидки = СуммаСкидки;
			
			Если ВыводитьГТД И ТипЗнч(СтрокаАвтомобиля.Автомобиль) = Тип("СправочникСсылка.Автомобили") Тогда
				СтрокаЧека.ГТД = СтрокаАвтомобиля.Автомобиль.ГТД;
			КонецЕсли;
			СтрокаЧека.СебестоимостьАвтомобиля = СебестоимостьАвтомобиля;
			Если ВыводитьДоговорКомиссии Тогда
				ДоговорКомиссии = ДоговораКомиссии.Получить(СтрокаАвтомобиля.Автомобиль);
				Если НЕ ДоговорКомиссии = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СтрокаЧека, ДоговорКомиссии);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // Заполнитьавтомобилями

Процедура ЗаполнитьТоварамДоговорАгента(Объект, ДокументЗаполнения)
	
	Если ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		ДокументРеализацииУслугАгента = ДокументЗаполнения;
	ИначеЕсли ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ДокументРеализацииУслугАгента = ?(
			ТипЗнч(ДокументЗаполнения.Сделка) = Тип("ДокументСсылка.РеализацияТоваров"),
			ДокументЗаполнения.Сделка,
			Неопределено);
	Иначе
		ДокументРеализацииУслугАгента = Неопределено;
	КонецЕсли;
	
	Если ДокументРеализацииУслугАгента <> Неопределено Тогда
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументРеализацииУслугАгента,
			"Хозоперация,ДоговорКомитента");
		Если ДанныеОснования.Хозоперация = Справочники.ХозОперации.РеализацияАгентскихУслуг Тогда
			Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
				ТекущаяСтрока.ДоговорВзаиморасчетов = ДанныеОснования.ДоговорКомитента;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТоварамДоговорАгента()

// Функция ищет в автомобиле дополнительный реквизит "Номенклатура"
// 
// Параметры:
//  АвтомобильДляПоиска    - СправочникСсылка.Автомобиль - Автомобиль поиска номенклатуры.
//  НоменклатураАвтомобиль - СправочникСсылка.Номенклатура - Номенклатура автомобиля.
//
// Возвращаемое значение:
//  СправочникСсылка.Автомобили - Ссылка на автомобиль.
//
Функция НоменклатураАвтомобиля(АвтомобильДляПоиска, НоменклатураАвтомобиль)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.НаборСвойств =
	|		ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Автомобили)
	|	И ДополнительныеРеквизитыИСведения.Наименование ПОДОБНО ""%Номенклатура%""
	|	И НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.НаборСвойств =
	|		ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка)
	|	И ДополнительныеРеквизитыИСведения.Наименование ПОДОБНО ""%Номенклатура%""
	|	И НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Автомобиль = ?(ЗначениеЗаполнено(Выборка.Ссылка),
			УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства(Выборка.Ссылка, АвтомобильДляПоиска),
			НоменклатураАвтомобиль);
		Если ЗначениеЗаполнено(Автомобиль) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Автомобиль = ?(ЗначениеЗаполнено(Автомобиль), Автомобиль, НоменклатураАвтомобиль);
	
	Возврат Автомобиль;
	
КонецФункции

Процедура ОбновитьКонтактнуюИнформацию(Форма, Объект, ОбновлятьКИ = Истина) Экспорт
	
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		Объект.Контрагент,
		Форма,
		"Телефон,АдресЭлектроннойПочты",
		"ТелефонEmailПокупателя,ТелефонEmailПокупателя"
	);

	Если Не ОбновлятьКИ Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.ТелефонEmailПокупателя.СписокВыбора.Количество() > 0 Тогда
		Объект.ТелефонEmailПокупателя = Форма.Элементы.ТелефонEmailПокупателя.СписокВыбора[0].Значение;
	Иначе
		Объект.ТелефонEmailПокупателя = "";
	КонецЕсли; 
	
КонецПроцедуры

Функция ПодготовитьТаблицуКорректировки(ТаблицаРасчета, ТЧАвтомобили = Ложь) Экспорт
	
	ПараметрыЗаполнения = ПолучитьПараметрыЗаполнения();
	
	Если ТаблицаРасчета.Количество() = 0 Тогда
		Возврат ПараметрыЗаполнения;
	КонецЕсли;
	
	ТаблицаРасчета.Колонки.Добавить("Признак"); 
	
	Для Каждого Строка Из ТаблицаРасчета Цикл
		
		Если Строка.СуммаВсего < Строка.СуммаВсегоДоКорректировки Тогда   
			Если Строка.Количество = 0 Тогда  //полный возврат
				Строка.Признак = "Возврат";
			ИначеЕсли НЕ ТЧАвтомобили И (Строка.СуммаВсего / Строка.Количество) = (Строка.СуммаВсегоДоКорректировки / Строка.КоличествоДоКорректировки) Тогда
				Строка.Признак = "Возврат"; 
			Иначе 
				ПараметрыЗаполнения.ИзменениеЦен = Истина;
				Прервать;
			КонецЕсли; 
		ИначеЕсли Строка.СуммаВсего > Строка.СуммаВсегоДоКорректировки Тогда
			Если   НЕ ТЧАвтомобили И Строка.КоличествоДоКорректировки = 0 Тогда 
				Строка.Признак = "Реализация";
			ИначеЕсли НЕ ТЧАвтомобили И  Строка.СуммаВсего / Строка.Количество = Строка.СуммаВсегоДокорректировки / Строка.КоличествоДоКорректировки Тогда
				Строка.Признак = "Реализация"; 
			Иначе                    
				ПараметрыЗаполнения.ИзменениеЦен = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;  

	Если Не ПараметрыЗаполнения.ИзменениеЦен Тогда 
		
		СтрокиВозврат	 	= ТаблицаРасчета.НайтиСтроки(Новый Структура("Признак", "Возврат"));
		СтрокиРеализация 	= ТаблицаРасчета.НайтиСтроки(Новый Структура("Признак", "Реализация"));
		
		ИтоговаяТаблица = ТаблицаРасчета.СкопироватьКолонки();                            
		ИтоговаяТаблица.Колонки.Удалить("Признак");
		
		Если  СтрокиВозврат.Количество()> 0  И СтрокиРеализация.Количество() = 0 Тогда
			Для Каждого Строка ИЗ СтрокиВозврат Цикл 
				НоваяСтрока = ИтоговаяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, , "Количество, Сумма,СуммаНДС, СуммаВсего");
				НоваяСтрока.Количество 	= -Строка.КоличествоРазница; 
				НоваяСтрока.Цена 		= Строка.Цена; 
				НоваяСтрока.Сумма		= НоваяСтрока.Количество * НоваяСтрока.Цена;
				НоваяСтрока.СуммаНДС	= -Строка.СуммаНДСРазница;
				НоваяСтрока.СуммаВсего 	= -Строка.СуммаВсегоРазница;
			КонецЦикла;
			ПараметрыЗаполнения.ИтоговаяТаблица = ИтоговаяТаблица;
			ПараметрыЗаполнения.ЭтоВозврат		= Истина;
				
		ИначеЕсли  СтрокиВозврат.Количество()= 0 И СтрокиРеализация.Количество()> 0 Тогда
			Для Каждого Строка ИЗ СтрокиРеализация Цикл 	
					НоваяСтрока = ИтоговаяТаблица.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, , "Количество, Сумма,СуммаНДС, СуммаВсего");
					НоваяСтрока.Количество 	= Строка.КоличествоРазница;
					НоваяСтрока.Цена 		= Строка.Цена;
					НоваяСтрока.Сумма 		= НоваяСтрока.Количество * НоваяСтрока.Цена;
					НоваяСтрока.СуммаНДС	= Строка.СуммаНДСРазница;
					НоваяСтрока.СуммаВсего 	= Строка.СуммаВсегоРазница;   			
			КонецЦикла;     
			ПараметрыЗаполнения.ИтоговаяТаблица = ИтоговаяТаблица;
			ПараметрыЗаполнения.ЭтоВозврат	= Ложь; 

		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;

КонецФункции

Функция ПолучитьПараметрыЗаполнения() Экспорт
	
	ПараметрыЗаполнения = Новый Структура();
    ПараметрыЗаполнения.Вставить("ИтоговаяТаблица", Неопределено);
	ПараметрыЗаполнения.Вставить("ЭтоВозврат",		Ложь); 
	ПараметрыЗаполнения.Вставить("ИзменениеЦен",	Ложь);   
	
	Возврат ПараметрыЗаполнения;

КонецФункции                       	

Функция АвансПоДокументу(Объект, ЭтоПродажа, ВалютаДокумента)
	
	СуммаАванса = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(РасчетыСКонтрагентами.Сумма) КАК Сумма,
	|	СУММА(РасчетыСКонтрагентами.СуммаУпр) КАК СуммаУпр,
	|	СУММА(РасчетыСКонтрагентами.СуммаБаз) КАК СуммаБаз
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
	|ГДЕ
	|	РасчетыСКонтрагентами.Организация = &Организация
	|	И РасчетыСКонтрагентами.Контрагент = &Контрагент
	|	И РасчетыСКонтрагентами.ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
	|	И РасчетыСКонтрагентами.ТипРасчета = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Оплата)
	|	И РасчетыСКонтрагентами.ДокументРасчетов = &ДокументРасчетов
	|	И РасчетыСКонтрагентами.ВидДвижения = &ВидДвижения";
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", Объект.ДоговорВзаиморасчетов);
	Запрос.УстановитьПараметр("ДокументРасчетов", Объект.Сделка);
	Запрос.УстановитьПараметр("ВидДвижения", ?(ЭтоПродажа, ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат СуммаАванса;
		
	КонецЕсли;
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если ВалютаДокумента = ВалютаУпр Тогда
		
		СуммаАванса = Выборка.СуммаУпр;
		
	ИначеЕсли ВалютаДокумента = ВалютаРегл Тогда
		
		СуммаАванса = Выборка.СуммаБаз;
		
	Иначе
		
		СуммаАванса = Выборка.Сумма;
		
	КонецЕсли;
	
	Возврат СуммаАванса;
	
КонецФункции // АвансПоДокументу()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа.
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	ОбязательныеРеквизиты.Добавить("СуммаДокумента");
	ОбязательныеРеквизиты.Добавить("СтавкаНДС");
	
	Если Константы.ИспользоватьПодключаемоеОборудование.Получить() Тогда
		ОбязательныеРеквизиты.Добавить("КассаККМ");
	КонецЕсли;
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;
	
	// ТЧ товары
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	ОбязательныеРеквизиты.Добавить("Товары.СтавкаНДС");
	Если ПраваИНастройкиПользователя.Значение("ЗапретитьПодарки", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары.СуммаВсего");
	КонецЕсли;
	
	// ТЧ оплаты
	ОбязательныеРеквизиты.Добавить("Оплаты.ТипОплаты");
	ОбязательныеРеквизиты.Добавить("Оплаты.Сумма");
	
	ОбязательныеРеквизиты.Добавить("КодыМаркировки.КодМаркировки");
	
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(Объект.ДоговорВзаиморасчетов);
	
	Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам
		ИЛИ РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(Объект.ВерсияОбъекта) Тогда
		ОбязательныеРеквизиты.Добавить("СпособЗачетаАвансов");
	КонецЕсли;
	
	Если РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(Объект.ВерсияОбъекта)
		И Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ОбязательныеРеквизиты.Добавить("Сделка");
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки.
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров.
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	УникальныеТовары.Добавить("ГТД");
	УникальныеТовары.Добавить("ДоговорВзаиморасчетов");
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд")
		ИЛИ ((ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЧекНаОплату")
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплату"))
		И ТипЗнч(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "ДокументОснование")) = Тип("ДокументСсылка.ЗаказНаряд")) Тогда
		УникальныеТовары.Добавить("КлючСтроки");
	КонецЕсли;
	
	// Уникальные поля таблицы оплат.
	УникальныеОплаты = Новый Массив;
	УникальныеОплаты.Добавить("ТипОплаты");
	УникальныеОплаты.Добавить("ТипПлатежнойКарты");
	УникальныеОплаты.Добавить("Карточка");
	УникальныеОплаты.Добавить("ДоговорВзаиморасчетов");
	
	// Структура уникальных реквизитов табличных частей.
	УникальныеТабличныеЧасти=Новый Структура();
	УникальныеТабличныеЧасти.Вставить("Товары",УникальныеТовары);
	УникальныеТабличныеЧасти.Вставить("Оплаты",УникальныеОплаты);
	
	// Возвращаем сформированные параметры проверки.
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта.
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("КассаККМ", ЛОЖЬ);
	
	// Возвращаем сформированные параметры проверки.
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Товары");
	Результат.Добавить("Оплаты");
	Результат.Добавить("Контрагент");
	Результат.Добавить("ДоговорВзаиморасчетов");
	Результат.Добавить("Карточка");
	Результат.Добавить("СпособЗачетаАвансов");
	
	Результат.Добавить("НомерЧека");
	Результат.Добавить("НомерСмены");
	Результат.Добавить("ДатаФР");
	Результат.Добавить("ФР");
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговора",
	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов"));
	ДополнительныеПараметры.ДляПроведения.Вставить("ВерсияОбъекта", Объект.ВерсияОбъекта);
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаДоговора", ДополнительныеПараметры.ДляПроведения.ВалютаДоговора);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЧекНаОплату.Организация КАК Организация,
	|	ЧекНаОплату.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ЧекНаОплату.Ссылка КАК Ссылка,
	|	ЧекНаОплату.Дата КАК Дата,
	|	ЧекНаОплату.ХозОперация КАК ХозОперация,
	|	ЧекНаОплату.Сделка КАК Сделка,
	|	ЧекНаОплату.Контрагент КАК Контрагент,
	|	ЧекНаОплату.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ЧекНаОплату.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ЧекНаОплату.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	ЧекНаОплату.СуммаДокумента КАК СуммаДокумента,
	|	ЧекНаОплату.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	ЧекНаОплату.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ЧекНаОплату.КурсДокумента КАК КурсДокумента,
	|	ЧекНаОплату.ВалютаДокумента КАК ВалютаДокумента,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ШапкаДокумента
	|ИЗ
	|	Документ.ЧекНаОплату КАК ЧекНаОплату
	|ГДЕ
	|	ЧекНаОплату.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ ТаблицаКурсовВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр, &ВалютаДоговора)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекНаОплатуОплаты.Ссылка КАК Ссылка,
	|	ЧекНаОплатуОплаты.Сумма - ЧекНаОплатуОплаты.Сдача КАК СумаОплаты
	|ПОМЕСТИТЬ ТаблицаОплат
	|ИЗ
	|	Документ.ЧекНаОплату.Оплаты КАК ЧекНаОплатуОплаты
	|ГДЕ
	|	ЧекНаОплатуОплаты.Ссылка = &Ссылка
	|	И ЧекНаОплатуОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Наличные)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекНаОплатуОплаты.Ссылка,
	|	ЧекНаОплатуОплаты.Сумма - ЧекНаОплатуОплаты.Сдача
	|ИЗ
	|	Документ.ЧекНаОплату.Оплаты КАК ЧекНаОплатуОплаты
	|ГДЕ
	|	ЧекНаОплатуОплаты.Ссылка = &Ссылка
	|	И ЧекНаОплатуОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Электронно)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплат.Ссылка КАК Ссылка,
	|	СУММА(ТаблицаОплат.СумаОплаты) КАК СумаОплаты
	|ПОМЕСТИТЬ СуммаОплатПоДокументу
	|ИЗ
	|	ТаблицаОплат КАК ТаблицаОплат
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплат.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШапкаДокумента.Организация КАК Организация,
	|	ШапкаДокумента.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ШапкаДокумента.Ссылка КАК Ссылка,
	|	ШапкаДокумента.Дата КАК Дата,
	|	ШапкаДокумента.ХозОперация КАК ХозОперация,
	|	ШапкаДокумента.Сделка КАК Сделка,
	|	ШапкаДокумента.Контрагент КАК Контрагент,
	|	ШапкаДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ШапкаДокумента.СпособЗачетаАвансов КАК СпособЗачетаОплаты,
	|	ЕСТЬNULL(СуммаОплатПоДокументу.СумаОплаты, 0) КАК СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.КурсВалютыВзаиморасчетов = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютВзаиморасчетов.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетов.Кратность, 1)
	|		ИНАЧЕ ШапкаДокумента.КурсВалютыВзаиморасчетов
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ШапкаДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ШапкаДокумента.КурсДокумента КАК КурсДокумента,
	|	ШапкаДокумента.ВалютаДоговора КАК ВалютаДоговора,
	|	ШапкаДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ШапкаДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ШапкаДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл
	|ПОМЕСТИТЬ ДанныеДокументаОплаты
	|ИЗ
	|	ШапкаДокумента КАК ШапкаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсовВалют КАК КурсыВалютУпр
	|		ПО ШапкаДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсовВалют КАК КурсыВалютВзаиморасчетов
	|		ПО ШапкаДокумента.ВалютаДоговора = КурсыВалютВзаиморасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсовВалют КАК КурсыВалютРегл
	|		ПО ШапкаДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммаОплатПоДокументу КАК СуммаОплатПоДокументу
	|		ПО ШапкаДокумента.Ссылка = СуммаОплатПоДокументу.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ШапкаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаКурсовВалют
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаОплат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СуммаОплатПоДокументу";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	СуммовыеРазницы = РегистрыНакопления.РасчетыСКонтрагентами.ИнициализацияСуммовыхРазниц();
	
	// Дополним таблицу для списания суммовых разниц
	РасчетыСКонтрагентами.Колонки.Добавить(
		"КурсВалютыВзаиморасчетов",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 6, ДопустимыйЗнак.Неотрицательный)));
	
	Если РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ДвиженияДокумента.ДляПроведения.ВерсияОбъекта) Тогда
		
		ЗаполнитьРасчетамиСКонтрагентомПоСпособуЗачетаОплаты(
			ДвиженияДокумента,
			РасчетыСКонтрагентами,
			СуммовыеРазницы,
			Отказ);
		
	Иначе
		
		ЗаполнитьРасчетамиПоСделке(ДвиженияДокумента, РасчетыСКонтрагентами, СуммовыеРазницы);
		
	КонецЕсли;
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	ДвиженияДокумента.Вставить("СуммовыеРазницы", СуммовыеРазницы);
	
КонецПроцедуры

Процедура ЗаполнитьРасчетамиСКонтрагентомПоСпособуЗачетаОплаты(
		ДвиженияДокумента,
		РасчетыСКонтрагентами,
		СуммовыеРазницы,
		Отказ)
	
	СписокОперацийОплатыОтКонтрагента = Новый Массив();
	СписокОперацийОплатыОтКонтрагента.Добавить(Справочники.ХозОперации.ЧекНаОплату);
	СписокОперацийОплатыОтКонтрагента.Добавить(Справочники.ХозОперации.ЧекНаОплатуПокупкиВозврат);
	ЭтоОплатаКонтрагента =
		СписокОперацийОплатыОтКонтрагента.Найти(ДвиженияДокумента.ДляПроведения.ХозОперация) <> Неопределено;
	СписокОперацийОплатыВозврат = Новый Массив();
	СписокОперацийОплатыВозврат.Добавить(Справочники.ХозОперации.ЧекНаОплатуВозврат);
	СписокОперацийОплатыВозврат.Добавить(Справочники.ХозОперации.ЧекНаОплатуПокупкиВозврат);
	ЭтоВозвратОплаты =
		СписокОперацийОплатыВозврат.Найти(ДвиженияДокумента.ДляПроведения.ХозОперация) <> Неопределено
		И ЗначениеЗаполнено(ДвиженияДокумента.ДляПроведения.ДокументОбъект.Сделка);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеДокументаОплаты.Организация КАК Организация,
	|	ДанныеДокументаОплаты.Ссылка КАК Ссылка,
	|	ДанныеДокументаОплаты.Дата КАК Дата,
	|	ДанныеДокументаОплаты.ХозОперация КАК ХозОперация,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеДокументаОплаты.Сделка) В (&ТипыЗаказов)
	|				И НЕ(ДанныеДокументаОплаты.Сделка ССЫЛКА Документ.ЗаказНаряд
	|						И ВЫРАЗИТЬ(ДанныеДокументаОплаты.Сделка КАК Документ.ЗаказНаряд).Состояние = ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.Закрыт)
	|						И ВЫРАЗИТЬ(ДанныеДокументаОплаты.Сделка КАК Документ.ЗаказНаряд).ДатаЗакрытия <= ДанныеДокументаОплаты.Дата)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ДанныеДокументаОплаты.Сделка
	|	КОНЕЦ КАК Сделка,
	|	ДанныеДокументаОплаты.Контрагент КАК Контрагент,
	|	ДанныеДокументаОплаты.Контрагент.ВидКонтрагента КАК ВидКонтрагента,
	|	ДанныеДокументаОплаты.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ДанныеДокументаОплаты.СуммаДокумента КАК Сумма,
	|	ДанныеДокументаОплаты.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	ДанныеДокументаОплаты.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ДанныеДокументаОплаты.КурсДокумента КАК КурсДокумента,
	|	ДанныеДокументаОплаты.ВалютаДоговора КАК ВалютаДоговора,
	|	ДанныеДокументаОплаты.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокументаОплаты.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокументаОплаты.ВалютаУпр КАК ВалютаУпр,
	|	ДанныеДокументаОплаты.КурсВалютыРегл КАК КурсВалютыРегл,
	|	ДанныеДокументаОплаты.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекНаОплату)
	|		ИЛИ ДанныеДокументаОплаты.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекНаОплатуПокупкиВозврат) КАК ЭтоПриход,
	|	ДанныеДокументаОплаты.СпособЗачетаОплаты КАК СпособЗачетаОплаты,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеДокументаОплаты.Сделка) В (&ТипыЗаказов)
	|				И НЕ(ДанныеДокументаОплаты.Сделка ССЫЛКА Документ.ЗаказНаряд
	|						И ВЫРАЗИТЬ(ДанныеДокументаОплаты.Сделка КАК Документ.ЗаказНаряд).Состояние = ЗНАЧЕНИЕ(Справочник.ВидыСостоянийЗаказНарядов.Закрыт)
	|						И ВЫРАЗИТЬ(ДанныеДокументаОплаты.Сделка КАК Документ.ЗаказНаряд).ДатаЗакрытия <= ДанныеДокументаОплаты.Дата)
	|			ТОГДА ДанныеДокументаОплаты.Сделка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Заказ
	|ИЗ
	|	ДанныеДокументаОплаты КАК ДанныеДокументаОплаты
	|ГДЕ
	|	ДанныеДокументаОплаты.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|	И ДанныеДокументаОплаты.СуммаДокумента <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументаОплаты.Организация КАК Организация,
	|	ДанныеДокументаОплаты.Контрагент КАК Контрагент,
	|	ДанныеДокументаОплаты.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов
	|ПОМЕСТИТЬ ПараметрыДляПолученияОстатков
	|ИЗ
	|	ДанныеДокументаОплаты КАК ДанныеДокументаОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКонтрагентами.ДокументРасчетов КАК ДокументРасчетов,
	|	РасчетыСКонтрагентами.Заказ КАК Заказ,
	|	МИНИМУМ(РасчетыСКонтрагентами.Период) КАК Период
	|ПОМЕСТИТЬ ТаблицаСортировки
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
	|ГДЕ
	|	(РасчетыСКонтрагентами.Организация, РасчетыСКонтрагентами.Контрагент, РасчетыСКонтрагентами.ДоговорВзаиморасчетов) В
	|			(ВЫБРАТЬ
	|				ПараметрыДляПолученияОстатков.Организация КАК Организация,
	|				ПараметрыДляПолученияОстатков.Контрагент КАК Контрагент,
	|				ПараметрыДляПолученияОстатков.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов
	|			ИЗ
	|				ПараметрыДляПолученияОстатков КАК ПараметрыДляПолученияОстатков)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКонтрагентами.ДокументРасчетов,
	|	РасчетыСКонтрагентами.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Организация КАК Организация,
	|	РасчетыСКонтрагентамиОстатки.Контрагент КАК Контрагент,
	|	РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	РасчетыСКонтрагентамиОстатки.ТипРасчета КАК ТипРасчета,
	|	РасчетыСКонтрагентамиОстатки.ДокументРасчетов КАК ДокументРасчетов,
	|	РасчетыСКонтрагентамиОстатки.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА &ОплатаКонтрагента
	|			ТОГДА РасчетыСКонтрагентамиОстатки.СуммаОстаток
	|		ИНАЧЕ -РасчетыСКонтрагентамиОстатки.СуммаОстаток
	|	КОНЕЦ КАК СуммаОстаток,
	|	ТаблицаСортировки.Период КАК Период
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(
	|			&МоментВремени,
	|			(Организация, Контрагент, ДоговорВзаиморасчетов) В
	|				(ВЫБРАТЬ
	|					ПараметрыДляПолученияОстатков.Организация КАК Организация,
	|					ПараметрыДляПолученияОстатков.Контрагент КАК Контрагент,
	|					ПараметрыДляПолученияОстатков.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов
	|				ИЗ
	|					ПараметрыДляПолученияОстатков КАК ПараметрыДляПолученияОстатков)) КАК РасчетыСКонтрагентамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСортировки КАК ТаблицаСортировки
	|		ПО РасчетыСКонтрагентамиОстатки.ДокументРасчетов = ТаблицаСортировки.ДокументРасчетов
	|			И РасчетыСКонтрагентамиОстатки.Заказ = ТаблицаСортировки.Заказ
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОплатаКонтрагента
	|				ТОГДА РасчетыСКонтрагентамиОстатки.СуммаОстаток > 0
	|			ИНАЧЕ РасчетыСКонтрагентамиОстатки.СуммаОстаток < 0
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	ДокументРасчетов,
	|	Заказ";
	
	Запрос.УстановитьПараметр("ТипыЗаказов", Метаданные.ОпределяемыеТипы.ЗаказыДокументовРасчета.Тип.Типы());
	Запрос.УстановитьПараметр("ОплатаКонтрагента", ЭтоОплатаКонтрагента);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДвиженияДокумента.ДляПроведения.Дата, ВидГраницы.Исключая));
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	ДанныеОбОплате = ПакетЗапроса[0].Выгрузить();
	
	Если ДанныеОбОплате.Количество() = 0 Тогда
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		ДвиженияДокумента.Вставить("СуммовыеРазницы", СуммовыеРазницы);
		Возврат;
	КонецЕсли;
	
	// Приведем таблицу к необходимой форме.
	ОплатаПоДокументамРасчета = ?(ДанныеОбОплате[0].СпособЗачетаОплаты = Перечисления.СпособыЗачетаАвансов.ПоДокументу,
		ДанныеОбОплате,
		Новый ТаблицаЗначений());
	АвтоматическоеСписание = ?(ДанныеОбОплате[0].СпособЗачетаОплаты = Перечисления.СпособыЗачетаАвансов.Автоматически,
		ДанныеОбОплате,
		Новый ТаблицаЗначений());
	АвансовыеПлатежи = ?(ДанныеОбОплате[0].СпособЗачетаОплаты = Перечисления.СпособыЗачетаАвансов.НеЗачитывать,
		ДанныеОбОплате,
		Новый ТаблицаЗначений());
	
	ОплатыПоДокументу = Новый Структура();
	ОплатыПоДокументу.Вставить("ОстаткиВзаиморасчетов", ПакетЗапроса[3].Выгрузить());
	ОплатыПоДокументу.Вставить("ОплатаПоДокументамРасчета", ОплатаПоДокументамРасчета);
	ОплатыПоДокументу.Вставить("АвтоматическоеСписание", АвтоматическоеСписание);
	ОплатыПоДокументу.Вставить("ДанныеОбОплате", АвансовыеПлатежи);
	ОплатыПоДокументу.Вставить("ДанныеОДокументе", ПакетЗапроса[0].Выбрать());
	ОплатыПоДокументу.Вставить("ЗачестьСуммуОплатыНаДокумент", ЭтоВозвратОплаты);
	
	РасчетыСКонтрагентамиСервер.РаспределитьОплатуКонтрагента(
		РасчетыСКонтрагентами,
		ОплатыПоДокументу,
		Отказ,
		ЭтоОплатаКонтрагента);
	
	// Дополним таблицу суммовыми разницами
	Если ДанныеОбОплате.Количество() > 0 Тогда
		РегистрыНакопления.РасчетыСКонтрагентами.СписатьСуммовыеРазницы(
			ДанныеОбОплате[0],
			РасчетыСКонтрагентами,
			СуммовыеРазницы,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРасчетамиПоСделке(ДвиженияДокумента, РасчетыСКонтрагентами, СуммовыеРазницы)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеДокументаОплаты.Организация КАК Организация,
	|	ДанныеДокументаОплаты.Ссылка КАК Ссылка,
	|	ДанныеДокументаОплаты.Дата КАК Дата,
	|	ДанныеДокументаОплаты.ХозОперация КАК ХозОперация,
	|	ДанныеДокументаОплаты.Сделка КАК Сделка,
	|	ДанныеДокументаОплаты.Контрагент КАК Контрагент,
	|	ДанныеДокументаОплаты.Контрагент.ВидКонтрагента КАК ВидКонтрагента,
	|	ДанныеДокументаОплаты.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ДанныеДокументаОплаты.СуммаДокумента КАК Сумма,
	|	ДанныеДокументаОплаты.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	ДанныеДокументаОплаты.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ДанныеДокументаОплаты.КурсДокумента КАК КурсДокумента,
	|	ДанныеДокументаОплаты.ВалютаДоговора КАК ВалютаДоговора,
	|	ДанныеДокументаОплаты.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокументаОплаты.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокументаОплаты.ВалютаУпр КАК ВалютаУпр,
	|	ДанныеДокументаОплаты.КурсВалютыРегл КАК КурсВалютыРегл,
	|	ДанныеДокументаОплаты.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекНаОплату)
	|		ИЛИ ДанныеДокументаОплаты.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекНаОплатуПокупкиВозврат) КАК ЭтоПриход,
	|	ВЫБОР
	|		КОГДА ДанныеДокументаОплаты.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(ДанныеДокументаОплаты.Сделка КАК Документ.ЗаказНаряд).Состояние
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СостояниеЗаказНаряда,
	|	ВЫБОР
	|		КОГДА ДанныеДокументаОплаты.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(ДанныеДокументаОплаты.Сделка КАК Документ.ЗаказНаряд).ДатаЗакрытия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаЗакрытия
	|ИЗ
	|	ДанныеДокументаОплаты КАК ДанныеДокументаОплаты
	|ГДЕ
	|	ДанныеДокументаОплаты.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|	И ДанныеДокументаОплаты.СуммаДокумента <> 0";
	
	ДанныеОбОплате = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаОплаты Из ДанныеОбОплате Цикл
		
		НоваяСтрока = РасчетыСКонтрагентами.Добавить();
		НоваяСтрока.ВидДвижения = ?(СтрокаОплаты.ЭтоПриход, ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
		НоваяСтрока.Организация = СтрокаОплаты.Организация;
		НоваяСтрока.Период = СтрокаОплаты.Дата;
		НоваяСтрока.Регистратор = СтрокаОплаты.Ссылка;
		НоваяСтрока.Контрагент = СтрокаОплаты.Контрагент;
		НоваяСтрока.ДоговорВзаиморасчетов = СтрокаОплаты.ДоговорВзаиморасчетов;
		
		// Определим тип расчета, документ расчета и сделку
		Если ЗначениеЗаполнено(СтрокаОплаты.Сделка) Тогда
			
			СделкаЯвляетсяЗаказом =
				Метаданные.ОпределяемыеТипы.ЗаказыДокументовРасчета.Тип.СодержитТип(ТипЗнч(СтрокаОплаты.Сделка))
				И Не (СтрокаОплаты.СостояниеЗаказНаряда = Справочники.ВидыСостоянийЗаказНарядов.Закрыт
				И СтрокаОплаты.Дата >= СтрокаОплаты.ДатаЗакрытия);
			СделкаСчетНаОплату = ОбработкаСобытийДокументаСервер.ЭтоСчетНаОплату(ТипЗнч(СтрокаОплаты.Сделка));
			СделкаЯвляетсяДокументомОплаты =
				Не (ТипЗнч(СтрокаОплаты.Сделка) = Тип("ДокументСсылка.АвансовыйОтчет")
					И СтрокаОплаты.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ПодотчетноеЛицо)
				И Метаданные.ОпределяемыеТипы.ДокументыОплаты.Тип.СодержитТип(ТипЗнч(СтрокаОплаты.Сделка))
				И Не ОбработкаСобытийДокументаСервер.ЭтоЗаказАвтомобиля(ТипЗнч(СтрокаОплаты.Сделка));
			ЭтоАванс = СделкаЯвляетсяЗаказом ИЛИ СделкаСчетНаОплату ИЛИ СделкаЯвляетсяДокументомОплаты;
			
		Иначе
			
			СделкаЯвляетсяЗаказом = Ложь;
			СделкаЯвляетсяДокументомОплаты = Ложь;
			ЭтоАванс = Истина;
			
		КонецЕсли;
		
		Если ЭтоАванс Тогда
			
			НоваяСтрока.ТипРасчета = Перечисления.ТипыРасчетов.Аванс;
			НоваяСтрока.ДокументРасчетов =
				?(СделкаЯвляетсяДокументомОплаты,
				СтрокаОплаты.Сделка,
				СтрокаОплаты.Ссылка);
			
			Если СделкаЯвляетсяЗаказом Тогда
				
				НоваяСтрока.Заказ = СтрокаОплаты.Сделка;
				
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока.ТипРасчета = Перечисления.ТипыРасчетов.Оплата;
			НоваяСтрока.ДокументРасчетов = СтрокаОплаты.Сделка;
			
		КонецЕсли;
		
		КурсВалютыВзаиморасчетов = ?(Не ЗначениеЗаполнено(СтрокаОплаты.КурсВалютыВзаиморасчетов),
					СтрокаОплаты.Дата,
					СтрокаОплаты.КурсВалютыВзаиморасчетов);
		
		НоваяСтрока.Сумма = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СтрокаОплаты.Сумма,
				СтрокаОплаты.ВалютаДокумента,
				СтрокаОплаты.КурсДокумента,
				СтрокаОплаты.ВалютаДоговора,
				КурсВалютыВзаиморасчетов),
			2);
		НоваяСтрока.СуммаУпр = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СтрокаОплаты.Сумма,
				СтрокаОплаты.ВалютаДокумента,
				СтрокаОплаты.КурсДокумента,
				СтрокаОплаты.ВалютаУпр,
				СтрокаОплаты.КурсВалютыУпр),
			2);
		НоваяСтрока.СуммаБаз = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СтрокаОплаты.Сумма,
				СтрокаОплаты.ВалютаДокумента,
				СтрокаОплаты.КурсДокумента,
				СтрокаОплаты.ВалютаРегл,
				СтрокаОплаты.КурсВалютыРегл),
			2);
		НоваяСтрока.ХозОперация = СтрокаОплаты.ХозОперация;
		НоваяСтрока.Курс = СтрокаОплаты.КурсДокумента;
		НоваяСтрока.ВалютаПлатежа = СтрокаОплаты.ВалютаДокумента;
		
		Если СтрокаОплаты.ЭтоПриход Тогда
			НоваяСтрока.ВидОперации = ?(
				ЭтоАванс,
				Перечисления.ВидыОперацийВзаиморасчетов.НачислениеКредиторскойЗадолженности,
				Перечисления.ВидыОперацийВзаиморасчетов.ПогашениеДебиторскойЗадолженности);
		Иначе
			НоваяСтрока.ВидОперации = ?(
				ЭтоАванс,
				Перечисления.ВидыОперацийВзаиморасчетов.НачислениеДебиторскойЗадолженности,
				Перечисления.ВидыОперацийВзаиморасчетов.ПогашениеКредиторскойЗадолженности);
		КонецЕсли;
		НоваяСтрока.Активность = Истина;
		
		// Дополнительные данные
		НоваяСтрока.КурсВалютыВзаиморасчетов = КурсВалютыВзаиморасчетов;
		
	КонецЦикла;
	
	// Дополним таблицу суммовыми разницами
	Если ДанныеОбОплате.Количество() > 0 Тогда
		РегистрыНакопления.РасчетыСКонтрагентами.СписатьСуммовыеРазницы(
			ДанныеОбОплате[0],
			РасчетыСКонтрагентами,
			СуммовыеРазницы,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьТаблицуДоходыИРасходы(ДвиженияДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеДокументаОплаты.Ссылка КАК Ссылка,
	|	ДанныеДокументаОплаты.Дата КАК Дата,
	|	ДанныеДокументаОплаты.Организация КАК Организация,
	|	ДанныеДокументаОплаты.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ДанныеДокументаОплаты.ХозОперация КАК ХозОперация
	|ИЗ
	|	ДанныеДокументаОплаты КАК ДанныеДокументаОплаты";
	
	ДанныеЗаполнения = Запрос.Выполнить().Выбрать();
	ДанныеЗаполнения.Следующий();
	
	ДоходыИРасходы = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("ДоходыИРасходы");
	
	СуммовыеРазницы = ПолучитьЗначениеПараметраСтруктуры(
		ДвиженияДокумента,
		"СуммовыеРазницы",
		Новый ТаблицаЗначений);
	
	РегистрыНакопления.ДоходыИРасходы.ЗаполнитьСуммовыеРазницы(
		ДанныеЗаполнения,
		СуммовыеРазницы,
		ДоходыИРасходы,
		ДанныеЗаполнения.ПодразделениеКомпании);
		
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("ДоходыИРасходы", ДоходыИРасходы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта.
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Получим признаки необходимости совершить пересчет суммовых показателей документа.
	ТребуетсяПересчетЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен", ЛОЖЬ);
	ТребуетсяИзменитьКурс = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяИзменитьКурс", ЛОЖЬ);
	СуммаДокумента       = Объект.СуммаДокумента;
	Товары = Объект.Товары.Выгрузить();
	СуммаОплатыРавнаСуммеТоваров = СуммаДокумента = Объект.Товары.Итог("СуммаВсего");
	
	// Вызываем общий обработчик действия.
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
	// Пересчитаем сумму к оплате отдельно от таблицы товаров.
	Если ТребуетсяПересчетЦен ИЛИ ТребуетсяИзменитьКурс Тогда
		
		СтарыйКурс = ПараметрыДействия.СтарыйКурс;
		НовыйКурс  = Объект.КурсДокумента;
		
		Если ТребуетсяПересчетЦен И ((СтарыйКурс * НовыйКурс) = 0 ИЛИ СтарыйКурс = НовыйКурс) Тогда
			Возврат;
		КонецЕсли;
		
		ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		
		ОснованиеВозвратКорректировка = Новый Массив();
		ОснованиеВозвратКорректировка.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
		ОснованиеВозвратКорректировка.Добавить(Тип("ДокументСсылка.КорректировкаПоступленияАвтомобилей"));
		ОснованиеВозвратКорректировка.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
		ОснованиеВозвратКорректировка.Добавить(Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей"));
		ОснованиеВозвратКорректировка.Добавить(Тип("ДокументСсылка.АктРазногласий"));
		ОснованиеВозвратКорректировка.Добавить(Тип("ДокументСсылка.ВозвратОтПокупателя"));
		ОснованиеВозвратКорректировка.Добавить(Тип("ДокументСсылка.ВозвратОтПокупателяАвтомобилей"));
		ОснованиеВозвратКорректировка.Добавить(Тип("ДокументСсылка.ВозвратПоставщику"));
		ОснованиеВозвратКорректировка.Добавить(Тип("ДокументСсылка.ВозвратПоставщикуАвтомобилей"));
		
		ПересчетПоДаннымВазиморасчета =
			РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(Объект.ДоговорВзаиморасчетов)
			И ЗначениеЗаполнено(Объект.Сделка)
			И ОснованиеВозвратКорректировка.Найти(Объект.ДокументОснование) = Неопределено
			И Метаданные.РегистрыНакопления.РасчетыСКонтрагентами.
				СтандартныеРеквизиты.Регистратор.Тип.СодержитТип(ТипЗнч(Объект.Сделка))
			И (Объект.ВалютаДокумента = ВалютаРегл ИЛИ Объект.ВалютаДокумента = ВалютаУпр);
		
		ЭтоПродажа = Объект.Хозоперация = Справочники.ХозОперации.ЧекНаОплату;
		
		Если ПересчетПоДаннымВазиморасчета Тогда
			
			// Пересчет табличной части "Товары"
			ДокументОбъектСтруктура = УправлениеПечатьюПлатформа.ДанныеДокументаДляПерерасчетаТаблицы();
			ЗаполнитьЗначенияСвойств(ДокументОбъектСтруктура, Объект,, "ВалютаДокумента");
			ДокументОбъектСтруктура.ЭтоПродажа = ЭтоПродажа;
			ДокументОбъектСтруктура.Документ = Объект.Сделка;
			Если Объект.ВалютаДокумента = ВалютаРегл Тогда
				ДокументОбъектСтруктура.Вставить("КурсРегл", НовыйКурс);
			Иначе
				ДокументОбъектСтруктура.Вставить("КурсУпр", НовыйКурс);
			КонецЕсли;
			ДокументОбъектСтруктура.Вставить("ПересчитатьОплатуПоКурсу", Истина);
			ДокументОбъектСтруктура.Вставить(
				"ВалютаДоговора",
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов"));
			ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(Товары,
				ДокументОбъектСтруктура,
				Объект.ВалютаДокумента);
			Если Товары.Итог("СуммаВсего") = 0 Тогда
				ПересчетПоДаннымВазиморасчета = Ложь;
				Если ТребуетсяИзменитьКурс Тогда
					Возврат;
				КонецЕсли;
			Иначе
				Объект.Товары.Загрузить(Товары);
			КонецЕсли;
			
		ИначеЕсли ТребуетсяИзменитьКурс Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Для каждого СтрокаТаблицыОплат Из Объект.Оплаты Цикл
			Если ПересчетПоДаннымВазиморасчета
				И СтрокаТаблицыОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата Тогда
				
				СтрокаТаблицыОплат.Сумма = АвансПоДокументу(Объект, ЭтоПродажа, Объект.ВалютаДокумента);
				Продолжить;
				
			КонецЕсли;
			СтрокаТаблицыОплат.Сумма = Окр(СтрокаТаблицыОплат.Сумма*СтарыйКурс/НовыйКурс, 2);
		КонецЦикла;
		
		Если ПересчетПоДаннымВазиморасчета Тогда
			
			Если СуммаОплатыРавнаСуммеТоваров Тогда
				Объект.СуммаДокумента = Объект.Товары.Итог("СуммаВсего");
			Иначе
				Если Объект.Оплаты.Количество() = 0 Тогда
					Объект.СуммаДокумента = Окр(СуммаДокумента * СтарыйКурс / НовыйКурс, 2);
				Иначе
					Объект.СуммаДокумента = Объект.Оплаты.Итог("Сумма");
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Объект.СуммаДокумента = Окр(СуммаДокумента*СтарыйКурс/НовыйКурс, 2);
			
		КонецЕсли;
		СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
		
		Для Каждого СтрокаТаблицыТовары Из Объект.Товары Цикл
			СтрокаТаблицыТовары.СебестоимостьАвтомобиля = Окр(СтрокаТаблицыТовары.СебестоимостьАвтомобиля*СтарыйКурс/НовыйКурс, 2);
			СтрокаТаблицыТовары.СуммаСкидкиБонусами     = Окр(СтрокаТаблицыТовары.СуммаСкидкиБонусами*СтарыйКурс/НовыйКурс, 2);
			СтавкаНДС = СтрокаТаблицыТовары.СтавкаНДС.Ставка;
			Если НЕ СтрокаТаблицыТовары.СебестоимостьАвтомобиля = 0 Тогда
				СтрокаТаблицыТовары.СуммаНДС = (СтрокаТаблицыТовары.СуммаВсего - СтрокаТаблицыТовары.СебестоимостьАвтомобиля) * СтавкаНДС / (100 + СтавкаНДС);
			КонецЕсли;
		КонецЦикла;
		
		ПроизвестиРаспределениеСуммыОплаты(Объект.СуммаДокумента, Объект.Товары);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЧекНаОплату") 
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументОбъект.ЧекНаОплату") Тогда
		
		Объект.ПризнакСпособаРасчета = Объект.ДокументОснование.ПризнакСпособаРасчета;
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплату")
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуЗаАвтомобили") 
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") 
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаАвтомобиль") 
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ВозвратПоставщику") 
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ВозвратПоставщикуАвтомобилей") 
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетОтПоставщика")
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетОтПоставщикаЗаАвтомобили")
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") 
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщикуНаАвтомобиль") 
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ВозвратОтПокупателяАвтомобилей") 
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ВозвратОтПокупателя") Тогда
		
		Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(Объект, Объект.Товары, Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная);

	Иначе
		Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(Объект, Объект.Товары, Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Контрагент)
		И ЗначениеЗаполнено(Объект.Карточка)
		И ЗначениеЗаполнено(Объект.Карточка.Объект)
		И Объект.Контрагент <> Объект.Карточка.Объект Тогда
		
		Объект.Карточка = Справочники.Карточки.ПустаяСсылка();
		КарточкаПриИзменении(Объект, ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Касса ККМ".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КассаККМПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.КассаККМПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КассаККМПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Карточка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КарточкаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Карточка) И Объект.Карточка.ВидКарточки <> Перечисления.ВидыКарточек.ДисконтнаяКарта Тогда
		Объект.Карточка = Справочники.Карточки.ПустаяСсылка();
	КонецЕсли;
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.КарточкаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КарточкаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Вид оплаты".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СделкаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Сделка) Тогда
		
		Если ЕстьРеквизит(Объект.Сделка, "Контрагент") Тогда
			
			Объект.Контрагент = Объект.Сделка.Контрагент;
			Документы.ЧекНаОплату.КонтрагентПриИзменении(Объект, ПараметрыДействия);
			
			Если ЕстьРеквизит(Объект.Сделка, "ДоговорВзаиморасчетов") Тогда
				
				Объект.ДоговорВзаиморасчетов = Объект.Сделка.ДоговорВзаиморасчетов;
				Документы.ЧекНаОплату.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.СчетНаОплату") Тогда
			Объект.СуммаДокумента = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Объект.Сделка.СуммаДокумента,
										Объект.Сделка.ВалютаДокумента, Объект.Дата, Объект.ВалютаДокумента, Объект.КурсДокумента);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СделкаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СтавкаНДСПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия.
	ОбработкаРеквизитовДокументаСервер.СтавкаНДСПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.СуммаДокумента <> Объект.Товары.Итог("СуммаВсего") Тогда
		// Вызываем общий обработчик действия.
		ОбработкаРеквизитовДокументаСервер.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	Иначе
		Объект.СуммаНДС = Объект.Товары.Итог("СуммаНДС");
	КонецЕсли;
	
	// Выполним пересчет суммы сдачи в каждой строке таблицы оплат.
	Для Каждого СтрокаТаблицыОплат Из Объект.Оплаты Цикл
		СтрокаТаблицыОплат.Сдача = 0;
	КонецЦикла;
	Для Каждого СтрокаТаблицыОплат Из Объект.Оплаты Цикл
		ОплатыСуммаПриИзменении(Объект, СтрокаТаблицыОплат, ПараметрыДействия);
	КонецЦикла;
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Скидка наценка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Для Каждого Строка Из Объект.Товары Цикл
		Строка.ЗначениеСкидкиШапкиИзменено = Ложь;
	КонецЦикла;
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкидкаНаценкаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОплаты

// Обработчик события возникающего при изменении данных реквизита "ТипОплаты" в таблице "Оплаты".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОплатыТипОплатыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Если Строка.ТипОплаты=Перечисления.ТипыОплатыККТ.Электронно И Не ЗначениеЗаполнено(Строка.ТипПлатежнойКарты) Тогда 
		Строка.ТипПлатежнойКарты = Справочники.ТипыПлатежныхКарт.ОсновнойТипПлатежнойКарты();
	КонецЕсли;
	
	ОплатыСуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	УправлениеДиалогомКлиентСервер.УстановитьПризнакНеобходимостиЭТ(Объект);
	
КонецПроцедуры // ОплатыТипОплатыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Оплаты".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОплатыСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Если Строка.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
		Строка.Сдача = (Объект.Оплаты.Итог("Сумма") - (Объект.Оплаты.Итог("Сдача") - Строка.Сдача)) - Объект.СуммаДокумента;
		Строка.Сдача = МИН(Строка.Сумма, Строка.Сдача);
	Иначе
		Строка.Сдача = 0;
	КонецЕсли;
	
КонецПроцедуры // ОплатыСуммаПриИзменении()


// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов" в таблице "Оплаты".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОплатыДоговорВзаиморасчетовПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Если НЕ Строка.ДоговорВзаиморасчетов.Пустая()
		И Не Строка.ДоговорВзаиморасчетов.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		Строка.СпособЗачетаАвансов = Строка.ДоговорВзаиморасчетов.СпособЗачетаАвансов;
	КонецЕсли;
	
КонецПроцедуры // ОплатыДоговорВзаиморасчетовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия.
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Строка.ИдентификаторТовара) Тогда
		Строка.ИдентификаторТовара = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыПроцентСкидкиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.ПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыПроцентСкидкиСтрокиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыСуммаСкидкиСтрокиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки на товар" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.СкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыСкидкаНаТоварПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыСуммаСкидкиПриИзменении()

// Расчет скидок по строке.
Процедура РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти = "Товары", СкидкаШапкиАбсолютная = Ложь) Экспорт
	
	СкидкиНаценкиСервер.РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти, СкидкаШапкиАбсолютная);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЧекНаОплату",
		"ПФ_MXL_ЧекНаОплату",
		НСтр("ru = 'Чек на оплату'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа.
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ЧекНаОплату") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ЧекНаОплату",
															НСтр("ru = 'Чек на оплату'"),
															ПечатьЧекНаОплату(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;		
КонецПроцедуры // Печать()

// Формирует печатную форму "ЧекНаОплату".
//
Функция ПечатьЧекНаОплату(МассивОбъектов, ОбъектыПечати,ФронтКассира=Неопределено)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЧекНаОплату_ЧекНаОплату";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;

	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЧекНаОплату.ПФ_MXL_ЧекНаОплату");
		
		ВыборкаТабличнойЧасти = Документ.Товары;
	
		ОбластьШапкаТаблицы       = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		ОбластьЗаголовок          = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицыОплаты = Макет.ПолучитьОбласть("ШапкаТаблицыОплаты");
		ОбластьСтрокаОплаты       = Макет.ПолучитьОбласть("СтрокаОплаты");
		ОбластьПодвалОплаты       = Макет.ПолучитьОбласть("ПодвалОплаты");
		ОбластьСтрока             = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице    = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал             = Макет.ПолучитьОбласть("Подвал");
		
		// Заголовок
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = Документ.ХозОперация.Наименование + " " + "№" + " " + НомерДляПечати+ " " + "от"
			+ " " +Формат(Документ.Дата, "ДЛФ=D");
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПокупателя  = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Контрагент, , ДополнительныеПараметры);
		
		Если ЗначениеЗаполнено(Документ.ДокументОснование) Тогда
			ОбластьЗаголовок.Параметры.ДокументОснованиеПредставление = Документ.ДокументОснование.ХозОперация.Наименование
				+ " " + "№" + " " + СокрЛП(Документ.ДокументОснование.Номер)+ " " 
				+ "от" + " " + Формат(Документ.ДокументОснование.Дата, "ДЛФ=D");
			ОбластьЗаголовок.Параметры.ДокументОснование = Документ.ДокументОснование;
		КонецЕсли; 
				
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыОплаты);

		// Готовим шапку
		НомерСтраницы = 2; НомерСтраницыПред = 2;
		ОбластьШапкаТаблицыОплаты.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицыОплаты.Параметры.НомерСтраницы  = "Страница:" + " " + НомерСтраницы;
		
		ВыборкаТабличнойЧастиОплаты = Документ.Оплаты;
		Для каждого СтрокаТЧ Из ВыборкаТабличнойЧастиОплаты Цикл
			ОбластьСтрокаОплаты.Параметры.Заполнить(СтрокаТЧ);
			ОбластьСтрокаОплаты.Параметры.СуммаВсего = Формат(СтрокаТЧ.Сумма, ФорматВыводаСуммы);
			
			// Доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Оплаты.Индекс(СтрокаТЧ) = Документ.Оплаты.Количество()-1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаОплаты,
				ОбластьШапкаТаблицыОплаты, , НомерСтраницы, , Документ, мсвДопОбластиПодвала);
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапкаТаблицыОплаты.Параметры.НомерСтраницы = "Страница:" + " " + НомерСтраницы;
			КонецЕсли;
			
		КонецЦикла;
		
		// Итоги
		ОбластьПодвалОплаты.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		СуммаВсего = ВыборкаТабличнойЧастиОплаты.Итог("Сумма");
		ОбластьПодвалОплаты.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		ТабличныйДокумент.Вывести(ОбластьПодвалОплаты);
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Готовим шапку
		НомерСтраницы = 2; НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура();
		СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
		СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
		СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
		СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница:" + " " + НомерСтраницы;
		
		ВыборкаТабличнойЧасти = Документ.Товары;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,
				УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ));
			
			// Доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
				СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
				СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
				СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница:" + " " + НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;

		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// Заполнение подвала и итогов.
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("СуммаВсего");
		ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		НДСВсего   = ВыборкаТабличнойЧасти.Итог("СуммаНДС");
		ОбластьПодвал.Параметры.НДСВсего = Формат(НДСВсего, ФорматВыводаСуммы);
		Если Документ.Товары.Итог("СуммаСкидки") > 0 Тогда
			СкидкаВсего = ВыборкаТабличнойЧасти.Итог("СуммаСкидки");
			ОбластьПодвал.Параметры.СкидкаВсего = Формат(СкидкаВсего, ФорматВыводаСуммы);
		КонецЕсли;
		ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'") + " " + ВыборкаТабличнойЧасти.Количество()
			+ " " + НСтр("ru = 'на сумму'") + " " 
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, Документ.ВалютаДокумента);
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// Зададим параметры макета.
		ТабличныйДокумент.АвтоМасштаб = Истина;
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьЧекНаОплату()

#КонецОбласти

// Проверяет возможность ввода счет-фактуры выданной на основании документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ЧекНаОплату - документ, для которого выполняется действие.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина, если ввод возможен, Ложь - в противном случае.
//
Функция ВозможенВводСчетФактурыВыданной(ДокументОбъект, ДополнительныеПарметры = Неопределено) Экспорт
	
	ДанныеДокументОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект, "Организация, СтавкаНДС");
	
	СистемаНО = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.СистемаНалогообложения,
		ДанныеДокументОбъекта.Организация,
	);
	
	НалогообложениеУСН = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.НалогообложениеНДСПриУСН,
		ДокументОбъект.Организация,
	);
	
	Если СистемаНО = Перечисления.СистемыНалогообложения.Упрощенная И НЕ РаботаСоСтавкамиНДССервер.УСНПлательщикНДС(НалогообложениеУСН) Тогда
        Возврат Ложь;
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(ДанныеДокументОбъекта.СтавкаНДС)
		И ДанныеДокументОбъекта.СтавкаНДС  <> Справочники.СтавкиНДС.БезНДС
		Или ОбработкаСобытийДокументаСервер.ДокументСодержитСтрокиСНДС(ДокументОбъект, "Товары");
		
КонецФункции

#КонецОбласти

#КонецЕсли

