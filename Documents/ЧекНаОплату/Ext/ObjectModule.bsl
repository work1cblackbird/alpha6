// Модуль документа "Чек на оплату"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Процедура - обработчик ввода на основании
// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения = Неопределено, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "ЭтоВозврат") = Ложь Тогда
		ДанныеЗаполнения = ДанныеЗаполнения.Ссылка;  
		ЭтотОбъект.ДополнительныеСвойства.Вставить("ЭтоВозврат", Ложь);
	КонецЕсли;	

	// Проверка на право ввода на основании заказ-наряда
	Если НЕ ПраваИНастройкиПользователя.Значение("ВводОплатыПоЗаказНаряду", ЭтотОбъект) Тогда
		Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
			ОтказНаВводДокумента = Ложь;
			Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
				ОтказНаВводДокумента = Истина;
			Иначе
				Если ЕстьРеквизит(ДанныеЗаполнения, "ДокументОснование")
					И ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
					ОтказНаВводДокумента = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ОтказНаВводДокумента Тогда
				УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
					ЭтотОбъект,
					НСтр("ru='Ввод чека на оплату на основании заказ-наряда запрещен.'")
				);
				СтандартнаяОбработка = Ложь;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения)
		И ((ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВозвратОтПокупателя")
				И НЕ ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗакрытиеСмены"))
			ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВозвратПоставщику")
			ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СчетОтПоставщика")
			ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВозвратОтПокупателяАвтомобилей")
			ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВозвратПоставщикуАвтомобилей")
			ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СчетОтПоставщикаЗаАвтомобили")
		)
		И ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование) Тогда
		
		Сделка = ДанныеЗаполнения.ДокументОснование;
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения)
		И (ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СчетНаОплату")
			И ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование)
			И НЕ (ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваров")
				ИЛИ ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику")
			)
			И НЕ (ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеАвтомобилей")
				И (ДанныеЗаполнения.ДокументОснование.ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилейКомиссия
					ИЛИ ДанныеЗаполнения.ДокументОснование.ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилейОтветственноеХранение)
			)
			ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СчетНаОплатуЗаАвтомобили")
			И ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование)
			
		) Тогда
		
		Сделка = ДанныеЗаполнения.ДокументОснование;
		
	Иначе
		
		Сделка = ДанныеЗаполнения;
		
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ЭтотОбъект);
	
	// Вызываем общий обработчик события
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	// изменим ставку НДС и сумму НДС, если нужно
	Если ОбработкаСобытийОбъектаСервер.ВозможенВводНаОсновании(ЭтотОбъект, ДанныеЗаполнения) Тогда
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаАвтомобиль")
				И Товары[0].СебестоимостьАвтомобиля <> 0 Тогда
			СтавкаНДСОсновная = ПолучитьПараметрыПлательщикаНДС(ЭтотОбъект.Организация, ЭтотОбъект.ПодразделениеКомпании, ЭтотОбъект.Дата).ОсновнаяСтавка;
			СтавкаНДС = РаботаСоСтавкамиНДССервер.РасчетнаяСтавкаНДСПоОбычной(СтавкаНДСОсновная);
		Иначе
			ОбработкаСобытийДокументаСервер.УстановитьСтавкуНДС(ДанныеЗаполнения, ЭтотОбъект, СуммаДокумента);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПризнакСпособаРасчета) И Товары.Количество() = 0 Тогда
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс;
	КонецЕсли;
	
	Документы.ЧекНаОплату.СуммаДокументаПриИзменении(ЭтотОбъект);
	Документы.ЧекНаОплату.ПроизвестиРаспределениеСуммыОплаты(СуммаДокумента, Товары);
	
	// Заполним доп. поля
	Для Каждого ТекущаяСтрока Из Товары Цикл
		Если ПустаяСтрока(ТекущаяСтрока.ИдентификаторТовара) Тогда
			ТекущаяСтрока.ИдентификаторТовара = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
	// заполним адрес для контрагента с формой собственности ЮрЛицо и ИП
	ЗаполнитьАдресПокупателя();
	
	ПечататьАртикулНоменклатуры = Организация.ПечататьАртикулНоменклатурыВЧеках;
	
	// Установим способ зачета авансов
	Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов)
		И Не ДополнительныеСвойства.Свойство("УстановленСпособЗачетаОплаты") Тогда
		Если ЗначениеЗаполнено(Сделка)
			И РасчетыСКонтрагентамиСервер.ДоступныеТипыДокументовРасчета().СодержитТип(ТипЗнч(Сделка))
			И Не (ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказНаряд") 
			И Сделка.Состояние <> Справочники.ВидыСостоянийЗаказНарядов.Закрыт) Тогда
			СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
		Иначе
			СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ЭтотОбъект, Истина);
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Предварительно проверим ТЧ Коды маркировки
	МаркировкаТоваровСервер.ПроверкаКодовМаркировкиПередЗаписью(ЭтотОбъект);
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если СуммаДокумента<0 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Сумма к оплате не должна быть отрицательной'"),
			,
			"СуммаДокумента",
			,
			Отказ
		);
	КонецЕсли;
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПроверкаСоответствияКонтрагентаДоговораПоСделке(
		ЭтотОбъект, Сделка, Контрагент, ДоговорВзаиморасчетов, ДополнительныеСвойства) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Контрагент и договор взаиморасчетов документа Сделка не соответствуют указанным в шапке документа'"),
			,
			"Сделка",
			,
			Отказ);
		
	КонецЕсли;
	
	// Проводим инициализацию основных 
	ОплатыВсего = Оплаты.Итог("Сумма");
	ОплатыСдача = Оплаты.Итог("Сдача");
	ОплатыНалом = 0;
	ОплатыБезнал= 0;
	
	// Выполним проверку корректности заполнения реквизит таблицы оплат
	Для Каждого ТекОплата Из Оплаты Цикл
		Если ТекОплата.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
			ОплатыНалом = ОплатыНалом + ТекОплата.Сумма - ТекОплата.Сдача;
		Иначе
			ОплатыБезнал = ОплатыБезнал + ТекОплата.Сумма - ТекОплата.Сдача; 
		КонецЕсли;
					
	КонецЦикла;
		
	// Проводим контроль сумм оплат
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "КонтролироватьЗаполнениеОплат", Истина) И СуммаДокумента < ОплатыВсего Тогда
		// Определим причину превышения оплаты
		Если (ОплатыВсего = ОплатыБезнал) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Сумма безналичной оплаты не может превышать сумму документа.'"),
				ЭтотОбъект,
				,,
				Отказ
			);
			
		ИначеЕсли (ОплатыБезнал >= СуммаДокумента) И (ОплатыНалом > 0) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Сумма безналичной оплаты полностью закрывает сумму чека. Оплата наличными не допустима.'"),
				ЭтотОбъект,
				,,
				Отказ
			);
			
		ИначеЕсли (ОплатыВсего - СуммаДокумента) > ОплатыСдача Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Общая сумма оплат не может быть больше суммы к оплате.'"),
				ЭтотОбъект,
				,,
				Отказ
			);
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Отказ ИЛИ ОбработкаСобытийДокументаСервер.ПроверитьКорректностьРеализацииПодакцизныхТоваров(ЭтотОбъект); 
	
	// Проверим заполнение ТЧ Коды маркировки
	Если ХозОперация = Справочники.ХозОперации.ЧекНаОплату
		ИЛИ ХозОперация = Справочники.ХозОперации.ЧекНаВозврат Тогда
		
		Передача = ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты
			ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой
			ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой;
		
		// Отключим некоторые проверки
		РеализацияТовара = (ХозОперация = Справочники.ХозОперации.ЧекНаОплату И Передача
			И (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд")
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваров")));
		
		МаркировкаТоваровСервер.ПроверитьЗаполнениеКодовМаркировки(ЭтотОбъект, Отказ,,, РеализацияТовара);
		
	КонецЕсли;
	
	ТекстОшибки = УправлениеДиалогомДокументаСервер.ПроверитьКорректностьЗаполненияТелефонEmail(ТелефонEmailПокупателя);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ТелефонEmailПокупателя", , Отказ);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Вызываем общий обработчик события
	ДополнительныеСвойства.Вставить("НеПересчитыватьСуммуДокумента", Истина);
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	СуммаНаличными = 0;
	Для Каждого СтрокаОплат Из Оплаты Цикл
		Если СтрокаОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
			СуммаНаличными = СуммаНаличными + СтрокаОплат.Сумма;
		КонецЕсли;
	КонецЦикла;
	СуммаПрочие = Оплаты.Итог("Сумма") - СуммаНаличными;
	
	ТекстСообщения = "";
	Если НЕ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(ЭтотОбъект, Товары, ПризнакСпособаРасчета,ТекстСообщения) Тогда
		ТекстСообщения = НСтр("ru='Неверно заполнен ""Способ расчета"".'") + " " + ТекстСообщения;	
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"ПризнакСпособаРасчета",,Отказ);	
	КонецЕсли; 
	
	ТекстСообщения = "";
	Если НЕ ПроверитьСоответствиеСпособаРасчетаИТипаОплаты(ЭтотОбъект, Оплаты, ПризнакСпособаРасчета,ТекстСообщения) Тогда
		ТекстСообщения = НСтр("ru='Неверно заполнен ""Тип Оплаты"".'") + " " + ТекстСообщения;	
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
	КонецЕсли;
	
	Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой ИЛИ
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой ИЛИ
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты Тогда
			
		Если СуммаДокумента <> Товары.Итог("СуммаВсего") Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Сумма товарных позиций больше суммы оплат'"),
				,,,Отказ
			);
		ИначеЕсли СуммаДокумента < СуммаПрочие Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Неверно заполнена колонка ""Сумма"" в табличной части оплаты, сумма безналичных платежей больше суммы оплаты'"),
				,,,
				Отказ
			);
		ИначеЕсли СуммаДокумента > Оплаты.Итог("Сумма") Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Неверно заполнена колонка ""Сумма"" в табличной части оплаты'"),
				,,,
				Отказ
			);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СуммаДокумента > 0 И Товары.Итог("СуммаОплаты") = 0 И Товары.Количество()>0 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Необходимо произвести пропорциональное распределение суммы вносимой оплаты между предметами платежа'"),
			,,,
			Отказ
		);
	ИначеЕсли СуммаДокумента <> Товары.Итог("СуммаОплаты") И Товары.Количество()>0 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Неверно заполнена колонка ""Сумма оплаты"" в табличной части товары, необходимо распределить сумму оплаты'"),
			,,,
			Отказ
		);
	ИначеЕсли СуммаДокумента <> (Оплаты.Итог("Сумма") - Оплаты.Итог("Сдача")) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Неверно заполнена колонка ""Сумма"" в табличной части оплаты'"),
			,,,
			Отказ
		);
	КонецЕсли;
	
	Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов)
		И РасчетыСКонтрагентамиСервер.УчетПоСпособуЗачетаОплаты(ВерсияОбъекта)
		И СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически Тогда
		Сделка = Неопределено;
	КонецЕсли;
	
	// Очистим результаты проверки кодов маркировки
	МаркировкаТоваровСервер.ОчиститьДанныеПроверкиКодовМаркировки(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если РасчетыСКонтрагентамиСервер.ЕстьЗачетАвансаПоДокументу(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// определим способ ведения баланса
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(Дата);
	
	СуммаОплатыПоКассе =0;
	
	Для Каждого СтрокаОплаты Из Оплаты Цикл
		
		Если СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные
			ИЛИ СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
			Если (ХозОперация=Справочники.ХозОперации.ЧекНаОплату) ИЛИ (ХозОперация=Справочники.ХозОперации.ЧекНаОплатуПокупкиВозврат) Тогда
				СуммаОплатыПоКассе = СуммаОплатыПоКассе+СтрокаОплаты.Сумма-СтрокаОплаты.Сдача;
			Иначе
				СуммаОплатыПоКассе = СуммаОплатыПоКассе-(СтрокаОплаты.Сумма-СтрокаОплаты.Сдача);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если используем подключаемой оборудование проведем деньги по кассе ККМ
	Если Константы.ИспользоватьПодключаемоеОборудование.Получить() Тогда
		
		НаборЗаписейКассыККМ=Движения.КассыККМ;
		
		Для Каждого СтрокаОплаты Из Оплаты Цикл
			
			НаборЗаписейКассыККМ.ДокументОбъект 	= ЭтотОбъект;
			НаборЗаписейКассыККМ.РежимПроведения 	= РежимПроведения;
			НаборЗаписейКассыККМ.КассаККМ 			= КассаККМ;
			НаборЗаписейКассыККМ.ТипОплаты 			= СтрокаОплаты.ТипОплаты;
			
			Если (ХозОперация=Справочники.ХозОперации.ЧекНаОплату) ИЛИ (ХозОперация=Справочники.ХозОперации.ЧекНаОплатуПокупки) Тогда
				НаборЗаписейКассыККМ.Сумма = СтрокаОплаты.Сумма - СтрокаОплаты.Сдача;
			Иначе
				НаборЗаписейКассыККМ.Сумма = -(СтрокаОплаты.Сумма - СтрокаОплаты.Сдача);
			КонецЕсли;
			
			Если ХозОперация=Справочники.ХозОперации.ЧекНаОплатуПокупки ИЛИ
				ХозОперация=Справочники.ХозОперации.ЧекНаОплатуПокупкиВозврат Тогда
				Отказ = НЕ НаборЗаписейКассыККМ.Расход() ИЛИ Отказ;
			Иначе     
				Отказ = НЕ НаборЗаписейКассыККМ.Приход() ИЛИ Отказ;
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	// подготовим таблицу движений в разрезе подразделений по взаиморасчетам
	ТаблицаВзаиморасчетов = Новый ТаблицаЗначений();
	ТаблицаВзаиморасчетов.Колонки.Добавить("Сумма");
	ТаблицаВзаиморасчетов.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
	
	СтрокаВзаиморасчетов = ТаблицаВзаиморасчетов.Добавить();
	СтрокаВзаиморасчетов.Подразделение = КассаККМ.ПодразделениеКомпании;
	СтрокаВзаиморасчетов.Сумма = СуммаОплатыПоКассе;
	ТаблицаВзаиморасчетов.Свернуть("Подразделение","Сумма");
	
	Документы.ЧекНаОплату.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	
	// проводим взаиморасчеты
	Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыКомпании;
		НаборЗаписейВзаиморасчеты.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейВзаиморасчеты.РежимПроведения = РежимПроведения;
		НаборЗаписейВзаиморасчеты.Контрагент = Контрагент;
		НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
		Если ЗначениеЗаполнено(Сделка)Тогда
			НаборЗаписейВзаиморасчеты.Сделка = Сделка;
			ТипСделка = ТипЗнч(Сделка);
			Если ЗаказыСервер.ПолучитьТипыСделок(Ложь).СодержитТип(ТипСделка) Тогда
				 НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем = Ложь;
			ИначеЕсли ЗаказыСервер.ПолучитьТипыСделок(Истина).СодержитТип(ТипСделка) Тогда
				 НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем = Истина;
			Иначе
				 НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем = Неопределено;
			КонецЕсли; 
		Иначе
			НаборЗаписейВзаиморасчеты.Сделка = Неопределено;
		КонецЕсли; 
		НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок  =  
			(СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически);
		НаборЗаписейВзаиморасчеты.Сумма                            = ТаблицаВзаиморасчетов.Итог("Сумма");
		Если ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупки
			ИЛИ ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупкиВозврат Тогда
			НаборЗаписейВзаиморасчеты.Сумма = - НаборЗаписейВзаиморасчеты.Сумма;
		КонецЕсли;
		НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц = 0;
		Если ХозОперация = Справочники.ХозОперации.ЧекНаОплатуВозврат
			ИЛИ ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупки Тогда
			НаборЗаписейВзаиморасчеты.ПриходРасход = Истина;
		КонецЕсли; 
		Если ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупки ИЛИ
			ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупкиВозврат Тогда
			Отказ  = НЕ НаборЗаписейВзаиморасчеты.Приход() ИЛИ Отказ;
		Иначе
			Отказ = НЕ НаборЗаписейВзаиморасчеты.Расход() ИЛИ Отказ;
		КонецЕсли;
		
		// доходы и расходы по суммовым разницам
		СуммаДоходаРасходаСуммовыхРазниц = НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
		Если СуммаДоходаРасходаСуммовыхРазниц<>0 Тогда
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
			Если ВедетсяБалансПоПодразделению Тогда
				НаборЗаписейДиР.Подразделение = ДоговорВзаиморасчетов.ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
			НаборЗаписейДиР.ВУпрВалюте = Истина;
			Если СуммаДоходаРасходаСуммовыхРазниц<0 Тогда
				НаборЗаписейДиР.Расход = -СуммаДоходаРасходаСуммовыхРазниц;
			Иначе
				НаборЗаписейДиР.Доход = СуммаДоходаРасходаСуммовыхРазниц;
			КонецЕсли;
			Если ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупки ИЛИ
				ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупкиВозврат Тогда
				Отказ  = НЕ НаборЗаписейДиР.Расход() ИЛИ Отказ;
			Иначе
				Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Документы.ЧекНаОплату.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	Документы.ЧекНаОплату.СформироватьТаблицуДоходыИРасходы(ДополнительныеСвойства);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	// определим необходимость формирования корректирующих проводок
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(Дата);
		
	Для Каждого СтрокаСписания Из ТаблицаВзаиморасчетов Цикл
		ПодразделениеВыручки = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(СтрокаСписания.Подразделение, Дата);
		ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ДоговорВзаиморасчетов.ПодразделениеКомпании, Дата);
		БалансовыеПодразделенияНеРавны = (ПодразделениеДоговорВзаиморасчетов<>ПодразделениеВыручки);
		Если ВедетсяБалансПоПодразделению И БалансовыеПодразделенияНеРавны Тогда
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект			= ЭтотОбъект;
			НаборЗаписейДиР.Подразделение			= СтрокаСписания.Подразделение;
			НаборЗаписейДиР.ВУпрВалюте				= Ложь;
			НаборЗаписейДиР.Доход					= СтрокаСписания.Сумма;
			Если СтрокаСписания.Сумма>0 Тогда
				НаборЗаписейДиР.СтатьяДоходовИРасходов	= Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
				Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			Иначе	
				НаборЗаписейДиР.СтатьяДоходовИРасходов	= Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
				Отказ = НЕ НаборЗаписейДиР.Расход() ИЛИ Отказ;
			КонецЕсли;	
			
			НаборЗаписейДиР.ДокументОбъект			= ЭтотОбъект;
			НаборЗаписейДиР.Подразделение			= ДоговорВзаиморасчетов.ПодразделениеКомпании;
			НаборЗаписейДиР.СтатьяДоходовИРасходов	= Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.ВУпрВалюте				= Ложь;
			НаборЗаписейДиР.Расход					= СтрокаСписания.Сумма;
			Если СтрокаСписания.Сумма>0 Тогда
				НаборЗаписейДиР.СтатьяДоходовИРасходов	= Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
				Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			Иначе	
				НаборЗаписейДиР.СтатьяДоходовИРасходов	= Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
				Отказ = НЕ НаборЗаписейДиР.Расход() ИЛИ Отказ;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	НаборЗаписейНаличныеРасчеты=Движения.НаличныеРасчеты;
	НаборЗаписейНаличныеРасчеты.ДокументОбъект 	= ЭтотОбъект;
	НаборЗаписейНаличныеРасчеты.РежимРасходаСредств = (ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупки ИЛИ ХозОперация = Справочники.ХозОперации.ЧекНаОплатуВозврат);
	НаборЗаписейНаличныеРасчеты.РежимПроведения = РежимПроведения;
	Отказ = НЕ НаборЗаписейНаличныеРасчеты.Приход() ИЛИ Отказ;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Вычисляет сумму взаиморасчета с контрагентом.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//
Функция ВычислитьВзаиморасчет(ДанныеЗаполнения) 
	
	ЭтоСчетНаОплатуПоставщикуЗаАвтомобили = ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СчетОтПоставщикаЗаАвтомобили");
	
	// Проверим сумму предоплаты
	Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(
		ДанныеЗаполнения.ДоговорВзаиморасчетов) Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасчетыСКонтрагентамиОстаткиИОбороты.СуммаОборот КАК Сумма,
		|	РасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрОборот КАК СуммаУпр,
		|	РасчетыСКонтрагентамиОстаткиИОбороты.СуммаБазОборот КАК СуммаБаз,
		|	РасчетыСКонтрагентамиОстаткиИОбороты.ДокументРасчетов КАК Сделка
		|ИЗ
		|	РегистрНакопления.РасчетыСКонтрагентами.Обороты(
		|			,
		|			,
		|			,
		|			Организация = &Организация
		|				И Контрагент = &Контрагент
		|				И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
		|				И (ДокументРасчетов = &Сделка
		|					ИЛИ ДокументРасчетов.ДокументОснование = &Сделка
		|					ИЛИ Заказ = &Сделка
		|					ИЛИ Заказ.ДокументОснование = &Сделка)) КАК РасчетыСКонтрагентамиОстаткиИОбороты";
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаОборот КАК Сумма,
		|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрОборот КАК СуммаУпр,
		|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаБазОборот КАК СуммаБаз,
		|	ВзаиморасчетыКомпанииОстаткиИОбороты.Сделка КАК Сделка
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыКомпании.Обороты(
		|			,
		|			,
		|			,
		|			Контрагент = &Контрагент
		|				И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
		|				И (Сделка = &Сделка
		|					ИЛИ Сделка.ДокументОснование = &Сделка)) КАК ВзаиморасчетыКомпанииОстаткиИОбороты";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Контрагент",            ДанныеЗаполнения.Контрагент);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", ДанныеЗаполнения.ДоговорВзаиморасчетов);
	Запрос.УстановитьПараметр("Сделка", Сделка);
	Запрос.УстановитьПараметр("Организация", ДанныеЗаполнения.Организация);
	
	тзВзаиморасчет = Запрос.Выполнить().Выгрузить();
	Если Не ЭтоСчетНаОплатуПоставщикуЗаАвтомобили
		И тзВзаиморасчет.Количество() <> 0
		И НЕ тзВзаиморасчет[0].Сделка = Сделка Тогда
		Сделка = тзВзаиморасчет[0].Сделка;	
	КонецЕсли;
	
	Если ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		СуммаКОплате = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзВзаиморасчет.Итог("Сумма"),ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,Дата,ВалютаДокумента,Дата,РежимОкругления.Окр15как20);
	Иначе
		СуммаКОплате	= тзВзаиморасчет.Итог("СуммаУпр");
		СуммаКОплате	= РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаКОплате,Константы.ВалютаУправленческогоУчетаКомпании.Получить(),Дата, ВалютаДокумента, ?(НЕ ЗначениеЗаполнено(КурсДокумента), Дата, КурсДокумента),РежимОкругления.Окр15как20);
	КонецЕсли;
	
	Возврат СуммаКОплате;
	
КонецФункции // ВычислитьВзаиморасчет()

// Возвращает итог проверки.
//
// Параметры:
//  Ссылка					- ДокументСсылка								- Ссылка на документ, для которого выполняется действие.
//  ТаблицаТоваров			- ДокументТабличнаяЧасть						- Таблица товаров документа.
//  ПризнакСпособаРасчета	- Перечисления.ПризнакиСпособаРасчета, Строка	- Способ расчета.
//  ТекстСообщения			- Строка	
//
// Возвращаемое значение:
//  Булево
//
Функция ПроверитьСоответствиеСпособаРасчетаИТипаОплаты(Ссылка, ТаблицаОплаты, ПризнакСпособаРасчета = "Передача", ТекстСообщения = "") Экспорт
	
	ТипСпособаРасчетаККТ = ?(ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой ИЛИ
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой ИЛИ
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты, "Передача", 
		?(ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита, "Постоплата", "Предоплата"));
		
	ТипыОплаты = ТаблицаОплаты.ВыгрузитьКолонку("ТипОплаты");
	
	Если ТипСпособаРасчетаККТ = "Предоплата" ИЛИ ТипСпособаРасчетаККТ = "Постоплата" Тогда
		
		Если ТипыОплаты.Найти(Перечисления.ТипыОплатыККТ.Предоплата) <> Неопределено
			ИЛИ ТипыОплаты.Найти(Перечисления.ТипыОплатыККТ.Постоплата) <> Неопределено Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru='Для способа расчета ""%1"" не должно быть типов оплаты ""Предоплата"" и  ""Постоплата(Кредит)"".'"), ПризнакСпособаРасчета);	
			Возврат Ложь;  
			
		КонецЕсли; 
		
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Чек на оплату"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЧекНаОплату(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ЧекНаОплату Тогда
		
		Если ДанныеЗаполнения.ХозОперация=Справочники.ХозОперации.ЧекНаОплату Тогда
			ХозОперация    = Справочники.ХозОперации.ЧекНаОплатуВозврат;
		ИначеЕсли ДанныеЗаполнения.ХозОперация=Справочники.ХозОперации.ЧекНаОплатуПокупки Тогда
			ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупкиВозврат;
		КонецЕсли;
		
		СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
		Для каждого СтрокаТабличнойЧасти Из Оплаты Цикл
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.Сдача;
			СтрокаТабличнойЧасти.Сдача = 0;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.КассаККМ) Тогда
		КассаККМ = ДанныеЗаполнения.КассаККМ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ФР) Тогда
		ФР = ДанныеЗаполнения.ФР;
	КонецЕсли;
	
	// Определим признак способа расчета
	ПризнакСпособаРасчета = ДокументОснование.ПризнакСпособаРасчета;
	
	// Получена сумма оплаты, пересчет не требуется
	ДополнительныеСвойства.Вставить("НеПересчитыватьСуммуДокумента", Истина);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЧекНаОплату()

// Производит заполнение объекта на основании документа "Заказ покупателя"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПокупателя(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Проверим сумму предоплаты
	Оплачено = ВычислитьВзаиморасчет(ДанныеЗаполнения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		ТаблицаДолгов = ЗаказыСервер.ДолгиПоПредоплате(ЭтотОбъект, ДанныеЗаполнения);
		Если ТаблицаДолгов.Количество() > 0 Тогда
			ДокументОснованиеСуммаДокумента = 0;
			Для Каждого ТекСтрока Из ТаблицаДолгов Цикл
				ДокументОснованиеСуммаДокумента = ДокументОснованиеСуммаДокумента + ТекСтрока.СуммаЗаказа;
			КонецЦикла;
			ДокументОснованиеСуммаДокумента		= РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ДокументОснованиеСуммаДокумента,
				ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, Дата, ВалютаДокумента,
				Дата, РежимОкругления.Окр15как20);
		Иначе
			ДокументОснованиеСуммаДокумента 	= ДанныеЗаполнения.СуммаДокумента;
		КонецЕсли;
		
	Иначе
		ДокументОснованиеСуммаДокумента 		= ДанныеЗаполнения.СуммаДокумента;
	КонецЕсли;
	
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(Сделка) = Тип("ДокументСсылка.ПоступлениеТоваров")
		ИЛИ ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаявкаНаХранениеШин") Тогда
		Оплачено = -Оплачено;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		СуммаПредоплаты = ДанныеЗаполнения.СуммаПредоплаты;
	Иначе
		СуммаПредоплаты = ДокументОснованиеСуммаДокумента;
	КонецЕсли;
	
	Если НЕ ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаДокумента
		И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
	   	СуммаПредоплаты	= РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ДанныеЗаполнения.СуммаПредоплаты,
			ДанныеЗаполнения.ВалютаДокумента, ДанныеЗаполнения.Дата, ВалютаДокумента, Дата, РежимОкругления.Окр15как20);
	КонецЕсли;	
	
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.РеализацияТоваров")
		ИЛИ ТипЗнч(Сделка) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		СуммаДокумента = Оплачено;	
	ИначеЕсли СуммаПредоплаты > Оплачено Тогда
		СуммаДокумента	= СуммаПредоплаты - Оплачено;
	Иначе
		СуммаДокумента	= ДокументОснованиеСуммаДокумента - Оплачено;
	КонецЕсли;
	СуммаДокумента = ?(СуммаДокумента < 0, 0, СуммаДокумента);
	
	// Заполним табличную часть "Товары".
	Если НЕ Документы.ЧекНаОплату.ЗаполнитьТовары(ЭтотОбъект, , ДополнительныеСвойства.ПараметрыДействия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Получена сумма оплаты, пересчет не требуется
	ДополнительныеСвойства.Вставить("НеПересчитыватьСуммуДокумента", Истина);
	
	// Определим признак способа расчета
	ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(ЭтотОбъект,
		Товары, Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПокупателя()

// Производит заполнение объекта на основании документа "Счет на оплату"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СчетНаОплату(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ДоговорАренды") Тогда
		АрендаАвтомобилей.ЗаполнитьЧекНаОплату(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);	
	КонецЕсли;
	
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказНаАвтомобиль")
		ИЛИ ТипЗнч(Сделка) = Тип("ДокументСсылка.ОптовыйЗаказКлиентаНаАвтомобили") Тогда
		ОбработкаЗаполнения_ЗаказНаАвтомобиль(ДанныеЗаполнения);
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СчетНаОплату") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СчетНаОплатуТовары.Номенклатура КАК Номенклатура,
		|	СчетНаОплатуТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СчетНаОплатуТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СчетНаОплатуТовары.Коэффициент КАК Коэффициент,
		|	СчетНаОплатуТовары.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(СчетНаОплатуТовары.СуммаВсего) КАК СуммаВсего,
		|	СУММА(СчетНаОплатуТовары.СуммаСкидки) КАК СуммаСкидки,
		|	СчетНаОплатуТовары.СкидкаНаТовар КАК СкидкаНаТовар,
		|	СчетНаОплатуТовары.ПроцентСкидкиСтроки КАК ПроцентСкидкиСтроки,
		|	СУММА(СчетНаОплатуТовары.СуммаСкидкиСтроки) КАК СуммаСкидкиСтроки,
		|	СУММА(СчетНаОплатуТовары.Количество) КАК Количество,
		|	СчетНаОплатуТовары.ГТД КАК ГТД
		|ИЗ
		|	Документ.СчетНаОплату.Товары КАК СчетНаОплатуТовары
		|ГДЕ
		|	СчетНаОплатуТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетНаОплатуТовары.ЕдиницаИзмерения,
		|	СчетНаОплатуТовары.Номенклатура,
		|	СчетНаОплатуТовары.СтавкаНДС,
		|	СчетНаОплатуТовары.СкидкаНаТовар,
		|	СчетНаОплатуТовары.Коэффициент,
		|	СчетНаОплатуТовары.ГТД,
		|	СчетНаОплатуТовары.ПроцентСкидкиСтроки,
		|	СчетНаОплатуТовары.ХарактеристикаНоменклатуры";
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		
		ТоварыПоОснованиюСвертка = Запрос.Выполнить().Выгрузить();
		ТоварыОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "Товары").Выгрузить();
		
		// Оставим заполнение товаров как есть
		Если ТоварыПоОснованиюСвертка.Количество() <> ТоварыОснования.Количество() Тогда
			
			Товары.Очистить();
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТоварыПоОснованиюСвертка, Товары);
			УсловиеПоиска = Новый Структура("Номенклатура,ЕдиницаИзмерения,ХарактеристикаНоменклатуры,ГТД");
			
			Для Каждого СтрокаТоваров Из Товары Цикл
				
				ЗаполнитьЗначенияСвойств(УсловиеПоиска, СтрокаТоваров);
				СтрокиТоваровОснования = ТоварыОснования.НайтиСтроки(УсловиеПоиска);
				СтрокаТоваров.СтавкаНДС = СтрокиТоваровОснования[0].СтавкаНДС;
				Документы.ЧекНаОплату.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект, СтрокаТоваров);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОстатокПоСделке = ВычислитьВзаиморасчет(ДанныеЗаполнения);
	
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплату")
		ИЛИ ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуЗаАвтомобили") Тогда
		ОстатокПоСделке = -ОстатокПоСделке;
	КонецЕсли;
	
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		СуммаДокумента = ОстатокПоСделке; 
	ИначеЕсли ОстатокПоСделке > 0 Тогда
		СуммаДокумента = СуммаДокумента - ОстатокПоСделке;
	ИначеЕсли ОстатокПоСделке = 0 Тогда
		
		// Проверим были ли движения по сделке
		Запрос = Новый Запрос;
		Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(
			ДанныеЗаполнения.ДоговорВзаиморасчетов) Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РасчетыСКонтрагентамиОстаткиИОбороты.СуммаОборот КАК Сумма,
			|	РасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрОборот КАК СуммаУпр,
			|	РасчетыСКонтрагентамиОстаткиИОбороты.СуммаБазОборот КАК СуммаБаз,
			|	РасчетыСКонтрагентамиОстаткиИОбороты.ДокументРасчетов КАК Сделка,
			|	РасчетыСКонтрагентамиОстаткиИОбороты.СуммаПриход КАК СуммаПриход,
			|	РасчетыСКонтрагентамиОстаткиИОбороты.СуммаРасход КАК СуммаРасход
			|ИЗ
			|	РегистрНакопления.РасчетыСКонтрагентами.Обороты(
			|			,
			|			,
			|			,
			|			Контрагент = &Контрагент
			|				И ДоговорВзаиморасчетов = &Сделка
			|				И ДокументРасчетов = &Сделка) КАК РасчетыСКонтрагентамиОстаткиИОбороты";
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаОборот КАК Сумма,
			|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрОборот КАК СуммаУпр,
			|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаБазОборот КАК СуммаБаз,
			|	ВзаиморасчетыКомпанииОстаткиИОбороты.Сделка КАК Сделка,
			|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаПриход КАК СуммаПриход,
			|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаРасход КАК СуммаРасход
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыКомпании.Обороты(
			|			,
			|			,
			|			,
			|			Контрагент = &Контрагент
			|				И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
			|				И Сделка = &Сделка) КАК ВзаиморасчетыКомпанииОстаткиИОбороты";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Контрагент",            ДанныеЗаполнения.Контрагент);
		Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", ДанныеЗаполнения.ДоговорВзаиморасчетов);
		Запрос.УстановитьПараметр("Сделка", Сделка);
		тзВзаиморасчет = Запрос.Выполнить().Выгрузить();
		Если тзВзаиморасчет.Количество() > 0 Тогда
			СуммаДокумента = 0;  
		КонецЕсли;
	КонецЕсли;
	
	// Заполним табличную часть "Товары".
	Если НЕ Документы.ЧекНаОплату.ЗаполнитьТовары(ЭтотОбъект, , ДополнительныеСвойства.ПараметрыДействия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Строка Из Товары Цикл
		Строка.КлючСтроки = Новый УникальныйИдентификатор;
	КонецЦикла;	
	
	// Для счета на оплату и возможно других документов, где есть ТЧ "Автоработы"
	Если ЕстьРеквизит(ДанныеЗаполнения,, "Автоработы") Тогда
		СуммаДокумента = Товары.Итог("СуммаВсего");
	КонецЕсли;
	
	// Для документов, где есть ТЧ "Автомобили"
	Если ЕстьРеквизит(ДанныеЗаполнения, , "Автомобили") Тогда
		СуммаДокумента = Товары.Итог("СуммаВсего");
	КонецЕсли;
	
	СуммаДокумента = ?(СуммаДокумента < 0, 0, СуммаДокумента);
	
	// Получена сумма оплаты, пересчет не требуется
	ДополнительныеСвойства.Вставить("НеПересчитыватьСуммуДокумента", Истина);
	
	// Определим признак способа расчета
	ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(ЭтотОбъект, Товары,
		Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная);
		
	// Для правильного определения взаиморасчетов	
	Если ЕстьРеквизит(ДокументОснование, "ДокументОснование") Тогда
		ОснованиеСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДокументОснование");
		Если ТипЗнч(ОснованиеСчета) = Тип("ДокументСсылка.ЗаказПокупателя")
			ИЛИ ТипЗнч(ОснованиеСчета) = Тип("ДокументСсылка.ЗаказНаАвтомобиль")
			ИЛИ ТипЗнч(ОснованиеСчета) = Тип("ДокументСсылка.ЗаказНаряд")
			ИЛИ ТипЗнч(ОснованиеСчета) = Тип("ДокументСсылка.РеализацияТоваров")
			ИЛИ ТипЗнч(ОснованиеСчета) = Тип("ДокументСсылка.РеализацияАвтомобилей") Тогда
			
		Сделка = ОснованиеСчета;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для правильного определения взаиморасчетов сделка была заменена");
			
		КонецЕсли;
	КонецЕсли;	
		
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_СчетНаОплату()

// Производит заполнение объекта на основании документа "Реализация товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РеализацияТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Контрагент",            Контрагент);
	СтруктураОтбора.Вставить("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов);
	СтруктураОтбора.Вставить("ДокументРасчетов",      ДанныеЗаполнения);
	
	тзДолги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(СтруктураОтбора);
	
	Если ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("Сумма"),
			ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеЗаполнения.КурсДокумента,
			ВалютаДокумента, КурсДокумента);
	ИначеЕсли Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() = ВалютаДокумента Тогда
		ОстатокПоСделке = тзДолги.Итог("СуммаБаз");
	Иначе
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("СуммаУпр"),
			Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
			ДанныеЗаполнения.КурсВалютыУпр, ВалютаДокумента, КурсДокумента);
	КонецЕсли;
	
	ОстатокПоСделке = ?(ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияТоваров"), ОстатокПоСделке , -ОстатокПоСделке);
	ОстатокПоСделке = ?(ОстатокПоСделке < 0, 0, ОстатокПоСделке);
	
	// Заполним табличную часть "Товары".
	Если НЕ Документы.ЧекНаОплату.ЗаполнитьТовары(ЭтотОбъект, , ДополнительныеСвойства.ПараметрыДействия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Для документов, где есть ТЧ "Автомобили"
	Если ЕстьРеквизит(ДанныеЗаполнения, , "Автомобили") Тогда
		СуммаДокумента = Товары.Итог("СуммаВсего");
	КонецЕсли;
	
	РанееБылаПередачаТовара = ПоСделкеИмеетсяЧекПередачиТоваров(ДанныеЗаполнения);
	СпособРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	Если РанееБылаПередачаТовара Тогда
		Если ОстатокПоСделке < СуммаДокумента Тогда
			СуммаДокумента = ОстатокПоСделке;
		КонецЕсли;
		СпособРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита;
	ИначеЕсли ОстатокПоСделке < СуммаДокумента Тогда
		СуммаАванса = СуммаДокумента - ОстатокПоСделке;
		СтрокаОплат = Оплаты.НайтиСтроки(Новый Структура("ТипОплаты",
			ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата")));
		Если СтрокаОплат.Количество() = 0 Тогда
			СтрокаОплат = Оплаты.Добавить();
			СтрокаОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата;
			СтрокаОплат.Сумма = СуммаАванса;
		Иначе
			СтрокаОплат[0].Сумма = СтрокаОплат[0].Сумма + СуммаАванса;
		КонецЕсли;
	КонецЕсли;
	
	// Определим признак способа расчета
	ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(ЭтотОбъект,
		Товары, СпособРасчета);
	
	// Получена сумма оплаты, пересчет не требуется
	ДополнительныеСвойства.Вставить("НеПересчитыватьСуммуДокумента", Истина);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РеализацияТоваров()

// Производит заполнение объекта на основании документа "Поступление товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупки;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПоступлениеКомиссия = (ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия);
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Контрагент",            Контрагент);
	СтруктураОтбора.Вставить("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов);
	
	// Сделку берем только когда у нас не комиссионное поступление
	Если НЕ ПоступлениеКомиссия Тогда
		СтруктураОтбора.Вставить("ДокументРасчетов", ДанныеЗаполнения);
	КонецЕсли;
	
	тзДолги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(СтруктураОтбора);
	
	Если ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("Сумма"),
			ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеЗаполнения.КурсДокумента,
			ВалютаДокумента, КурсДокумента);
	ИначеЕсли Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() = ВалютаДокумента Тогда
		ОстатокПоСделке = тзДолги.Итог("СуммаБаз");
	Иначе
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("СуммаУпр"),
			Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
			ДанныеЗаполнения.КурсВалютыУпр, ВалютаДокумента, КурсДокумента);
	КонецЕсли;
	
	ОстатокПоСделке = - ОстатокПоСделке;
	ОстатокПоСделке = ?(ОстатокПоСделке < 0, 0, ОстатокПоСделке);
	
	// Заполним табличную часть "Товары".
	Если НЕ Документы.ЧекНаОплату.ЗаполнитьТовары(ЭтотОбъект, , ДополнительныеСвойства.ПараметрыДействия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПоступлениеКомиссия Тогда
		РанееБылаПередачаТовара = ПоСделкеИмеетсяЧекПередачиТоваров(ДанныеЗаполнения);
		СпособРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
		Если РанееБылаПередачаТовара Тогда
			Если ОстатокПоСделке < СуммаДокумента Тогда
				СуммаДокумента = ОстатокПоСделке;
			КонецЕсли;
			СпособРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита;
		ИначеЕсли ОстатокПоСделке < СуммаДокумента Тогда
			СуммаАванса = СуммаДокумента - ОстатокПоСделке;
			СтрокаОплат = Оплаты.НайтиСтроки(Новый Структура("ТипОплаты",
			ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата")));
			Если СтрокаОплат.Количество() = 0 Тогда
				СтрокаОплат = Оплаты.Добавить();
				СтрокаОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата;
				СтрокаОплат.Сумма = СуммаАванса;
			Иначе
				СтрокаОплат[0].Сумма = СтрокаОплат[0].Сумма + СуммаАванса;
			КонецЕсли;
		КонецЕсли;
	Иначе
		РанееБылаПередачаТовара = Ложь;
		СуммаДокумента = ОстатокПоСделке;
	КонецЕсли;
	
	// Определим признак способа расчета
	Если ПоступлениеКомиссия Тогда
		СпособРасчета = ?(СуммаДокумента <> 0,
			Перечисления.ПризнакиСпособаРасчета.ОплатаКредита,
			Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная);


	КонецЕсли;
	ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(ЭтотОбъект,
		Товары, СпособРасчета);
	
	// Получена сумма оплаты, пересчет не требуется
	ДополнительныеСвойства.Вставить("НеПересчитыватьСуммуДокумента", Истина);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеТоваров()

// Производит заполнение объекта на основании документа "Возврат поставщику"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВозвратПоставщику(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
		
		ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупкиВозврат;
		
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Наш долг
	СуммаКОплате = ВычислитьВзаиморасчет(ДанныеЗаполнения);
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВозвратОтПокупателя")
		ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВозвратОтПокупателяАвтомобилей") Тогда
		СуммаКОплате = - СуммаКОплате;
	КонецЕсли;
	
	// Заполним табличную часть "Товары".
	Если НЕ Документы.ЧекНаОплату.ЗаполнитьТовары(ЭтотОбъект, , ДополнительныеСвойства.ПараметрыДействия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Для документов, где есть ТЧ "Автомобили"
	Если ЕстьРеквизит(ДанныеЗаполнения, , "Автомобили") Тогда
		СуммаДокумента = Товары.Итог("СуммаВсего");
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СчетОтПоставщикаЗаАвтомобили") Тогда
		СуммаКОплате = СуммаДокумента - СуммаКОплате;
	КонецЕсли;
	
	РанееБылаПередачаТовара = ПоСделкеИмеетсяЧекПередачиТоваров(Сделка);
	
	// Определим признак способа расчета
	Если СуммаКОплате < СуммаДокумента  Тогда
		СуммаДокумента = СуммаКОплате;
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(ЭтотОбъект,
			Товары,
			?(РанееБылаПередачаТовара,
				Перечисления.ПризнакиСпособаРасчета.ОплатаКредита,
				Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная));
	Иначе 
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(ЭтотОбъект,
			Товары,
			?(РанееБылаПередачаТовара,
				Перечисления.ПризнакиСпособаРасчета.ОплатаКредита,
				Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой));
	КонецЕсли;
	СуммаДокумента = ?(СуммаДокумента < 0, 0, СуммаДокумента);
	
	// Получена сумма оплаты, пересчет не требуется
	ДополнительныеСвойства.Вставить("НеПересчитыватьСуммуДокумента", Истина);
	
	Возврат Истина;	
		
КонецФункции // ОбработкаЗаполнения_ВозвратПоставщику()

// Производит заполнение объекта на основании документа "Счет от поставщика"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СчетОтПоставщика(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупки;
		
	// Вызываем обработчик заполнения на основании документа "Заказ покупателя"
	Возврат ОбработкаЗаполнения_ЗаказПокупателя(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_СчетОтПоставщика()

// Производит заполнение объекта на основании документа "Заказ поставщику"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПоставщику(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производится проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупки;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Проверим сумму предоплаты
	Оплачено = ВычислитьВзаиморасчет(ДанныеЗаполнения);
	
	// Заполним табличную часть "Товары".
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПоставщикам.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщикам.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ЗаказыПоставщикам.Заказано) КАК Количество,
	|	СУММА(ЗаказыПоставщикам.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ЗаказыПоставщикамОстатки
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|ГДЕ
	|	ЗаказыПоставщикам.Период <= &Момент
	|	И НЕ ЗаказыПоставщикам.Регистратор ССЫЛКА Документ.ПоступлениеТоваров
	|	И ЗаказыПоставщикам.ЗаказПоставщику = &ВыбЗаказПоставщику
	|	И ЗаказыПоставщикам.Контрагент = &ВыбКонтрагент
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПоставщикам.Номенклатура,
	|	ЗаказыПоставщикам.ХарактеристикаНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	(НЕ СУММА(ЗаказыПоставщикам.Заказано) = 0 ИЛИ (НЕ СУММА(ЗаказыПоставщикам.Сумма) = 0))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПоставщикамОстатки.Количество КАК Количество,
	|	ЗаказыПоставщикамОстатки.Сумма КАК СуммаЗаказа,
	|	ЕСТЬNULL(ЗаказПоставщикуТовары.Количество * ЗаказПоставщикуТовары.Коэффициент, 1) КАК КоличествоБазовое,
	|	ЕСТЬNULL(ЗаказПоставщикуТовары.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЗаказПоставщикуТовары.Коэффициент, 1) КАК Коэффициент,
	|	ЕСТЬNULL(ЗаказПоставщикуТовары.СтавкаНДС, ЗаказыПоставщикамОстатки.Номенклатура.СтавкаНДС) КАК СтавкаНДС
	|ИЗ
	|	ЗаказыПоставщикамОстатки КАК ЗаказыПоставщикамОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|		ПО (ЗаказПоставщикуТовары.Ссылка = &ВыбЗаказПоставщику)
	|			И ЗаказыПоставщикамОстатки.Номенклатура = ЗаказПоставщикуТовары.Номенклатура
	|			И ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры = ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(Количество),
	|	СУММА(КоличествоБазовое),
	|	МАКСИМУМ(СуммаЗаказа)
	|ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Момент", КонецДня(Дата));
	Запрос.УстановитьПараметр("ВыбКонтрагент", ДанныеЗаполнения.Контрагент);
	Запрос.УстановитьПараметр("ВыбЗаказПоставщику", ДанныеЗаполнения);
	
	ВалютаЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДанныеЗаполнения,
		"ДоговорВзаиморасчетов.ВалютаВзаиморасчетов"
	);
	СтруктураКурса	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаЗаказа, Дата);
	КурсЗаказа		= СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	Товары.Очистить(); // нужные только скорректированные позиции
	ПараметрыДействия = ДополнительныеСвойства.ПараметрыДействия;
	ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	ВыборкаНоменклатуры = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		ВыборкаХарактеристик = ВыборкаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХарактеристик.Следующий() Цикл
			ВсегоОсталось = ВыборкаХарактеристик.Количество;
			КоличествоБазовоеПоЗаказу = ВыборкаХарактеристик.КоличествоБазовое;
			СуммаОсталось = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				ВыборкаХарактеристик.СуммаЗаказа,
				ВалютаЗаказа,
				КурсЗаказа,
				ВалютаДокумента,
				КурсДокумента);
			ВыборкаДетали = ВыборкаХарактеристик.Выбрать(ОбходРезультатаЗапроса.Прямой);
			НоваяСтрока = Неопределено;
			Пока ВыборкаДетали.Следующий() Цикл
				Если ВсегоОсталось = 0 Тогда
					Прервать;
				КонецЕсли;
				Если ВыборкаДетали.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				Если КоличествоБазовоеПоЗаказу = 1 Тогда
					КоличествоСтроки = ВыборкаДетали.Количество;
				Иначе
					КоличествоСтроки = ВыборкаДетали.Количество * (ВыборкаДетали.КоличествоБазовое / КоличествоБазовоеПоЗаказу);
				КонецЕсли;
				ТекущееКоличество = Мин(ВсегоОсталось, КоличествоСтроки);
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура = ВыборкаДетали.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры = ВыборкаДетали.ХарактеристикаНоменклатуры;
				НоваяСтрока.ЕдиницаИзмерения = ВыборкаДетали.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент = ВыборкаДетали.Коэффициент;
				Документы.ЧекНаОплату.ТоварыНоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока, ПараметрыДействия);
				НоваяСтрока.Количество = ТекущееКоличество / ?(НЕ ЗначениеЗаполнено(НоваяСтрока.Коэффициент), 1, НоваяСтрока.Коэффициент);
				НоваяСтрока.СтавкаНДС = ВыборкаДетали.СтавкаНДС;
				ТекСумма = (СуммаОсталось / ВсегоОсталось) * ТекущееКоличество;
				СуммаОсталось = СуммаОсталось - ТекСумма;
				
				НоваяСтрока.СуммаВсего = ТекСумма;
				Документы.ЧекНаОплату.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект, НоваяСтрока, ПараметрыДействия);
				
				ВсегоОсталось = ВсегоОсталось - ТекущееКоличество;
			КонецЦикла;
			
			Если ВсегоОсталось > 0 ИЛИ СуммаОсталось > 0 Тогда
				Если НЕ НоваяСтрока = Неопределено Тогда
					НоваяСтрока.Количество = НоваяСтрока.Количество + (ВсегоОсталось / НоваяСтрока.Коэффициент);
					Документы.ЧекНаОплату.ТоварыКоличествоПриИзменении(ЭтотОбъект, НоваяСтрока, ПараметрыДействия);
					НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего + СуммаОсталось;
				Иначе
					НоваяСтрока = Товары.Добавить();
					НоваяСтрока.Номенклатура = ВыборкаХарактеристик.Номенклатура;
					НоваяСтрока.ХарактеристикаНоменклатуры = ВыборкаХарактеристик.ХарактеристикаНоменклатуры;
					Документы.ЧекНаОплату.ТоварыНоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока, ПараметрыДействия);
					НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.ОсновнаяСтавкаНДС;
					НоваяСтрока.Количество = ВсегоОсталось / ?(НЕ ЗначениеЗаполнено(НоваяСтрока.Коэффициент), 1, НоваяСтрока.Коэффициент);
					Документы.ЧекНаОплату.ТоварыКоличествоПриИзменении(ЭтотОбъект, НоваяСтрока, ПараметрыДействия);
					НоваяСтрока.СуммаВсего = СуммаОсталось;
				КонецЕсли;
				Документы.ЧекНаОплату.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект, НоваяСтрока, ПараметрыДействия);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Заполним ТЧ Коды маркировки
	МаркировкаТоваровСервер.ЗаполнитьКодыМаркировкиТоваров(ЭтотОбъект, ДанныеЗаполнения);
	
	СуммаДокумента = Товары.Итог("СуммаВсего");
	СуммаДокумента	= СуммаДокумента - Оплачено;
	СуммаДокумента = ?(СуммаДокумента < 0, 0, СуммаДокумента);
	Документы.ЧекНаОплату.СуммаДокументаПриИзменении(ЭтотОбъект, ПараметрыДействия);
	
	// Получена сумма оплаты, пересчет не требуется
	ДополнительныеСвойства.Вставить("НеПересчитыватьСуммуДокумента", Истина);
	
	// Определим признак способа расчета
	ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(
		ЭтотОбъект,
		Товары,
		Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная
	);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПоставщику()

// Производит заполнение объекта на основании документа "Возврат от покупателя"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВозвратОтПокупателя(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ХозОперация = Справочники.ХозОперации.ПустаяСсылка() Тогда
		ХозОперация = Справочники.ХозОперации.ЧекНаОплатуВозврат;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбработкаЗаполнения_ВозвратПоставщику(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ВозвратОтПокупателя()

// Производит заполнение объекта на основании документа "Заказ на автомобиль"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаАвтомобиль(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СуммаПредоплатыПоСчету = 0;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СчетНаОплатуЗаАвтомобили")
		И ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.СчетНаПредоплатуЗаАвтомобили Тогда
		
		СуммаПредоплатыПоСчету = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ДанныеЗаполнения.СуммаДокумента,
			ДанныеЗаполнения.ВалютаДокумента,
			ДанныеЗаполнения.Дата,
			ВалютаДокумента,
			Дата,
			РежимОкругления.Окр15как20
		);
		
	КонецЕсли;
	
	ДанныеЗаполнения = Сделка;
	
	// Проверим сумму предоплаты
	Запрос = Новый Запрос;
	Если РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(
		ДанныеЗаполнения.ДоговорВзаиморасчетов) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыСКонтрагентамиОстаткиИОбороты.СуммаРасход КАК Сумма,
		|	РасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрРасход КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.РасчетыСКонтрагентами.Обороты(,,,
		|		Контрагент = &Контрагент
		|		И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
		|		И (Заказ = &Сделка ИЛИ Заказ.ДокументОснование = &Сделка)) КАК РасчетыСКонтрагентамиОстаткиИОбороты";
		СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
		ДополнительныеСвойства.Вставить("УстановленСпособЗачетаОплаты");
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаРасход КАК Сумма,
		|	ВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрРасход КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыКомпании.Обороты(,,,
		|		Контрагент = &Контрагент
		|		И ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов
		|		И (Сделка = &Сделка ИЛИ Сделка.ДокументОснование = &Сделка)) КАК ВзаиморасчетыКомпанииОстаткиИОбороты";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Контрагент", ДанныеЗаполнения.Контрагент);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", ДанныеЗаполнения.ДоговорВзаиморасчетов);
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СчетОтПоставщикаЗаАвтомобили")
		И ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование) Тогда
		Запрос.УстановитьПараметр("Сделка", ДанныеЗаполнения.ДокументОснование);
	Иначе
		Запрос.УстановитьПараметр("Сделка", ДанныеЗаполнения);
	КонецЕсли;
	
	тзОплаты = Запрос.Выполнить().Выгрузить();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаАвтомобиль")
		ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОптовыйЗаказКлиентаНаАвтомобили") Тогда
		ТаблицаДолгов = ЗаказыСервер.ДолгиПоПредоплате(ЭтотОбъект, ДанныеЗаполнения);
		Если ТаблицаДолгов.Количество() > 0 Тогда
			ДокументОснованиеСуммаДокумента = 0;
			Для Каждого ТекСтрока Из ТаблицаДолгов Цикл
				ДокументОснованиеСуммаДокумента = ДокументОснованиеСуммаДокумента + ТекСтрока.СуммаЗаказа;
			КонецЦикла;
			
			ДокументОснованиеСуммаДокумента = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				ДокументОснованиеСуммаДокумента,
				ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,
				Дата,
				ВалютаДокумента,
				Дата,
				РежимОкругления.Окр15как20
			);
		Иначе
			ДокументОснованиеСуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
		КонецЕсли;
	Иначе
		ДокументОснованиеСуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
	КонецЕсли;
	
	Если ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		Оплачено = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			тзОплаты.Итог("Сумма"),
			ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,
			Дата,
			ВалютаДокумента,
			Дата,
			РежимОкругления.Окр15как20
		);
		
		СуммаПредоплаты = ДанныеЗаполнения.СуммаПредоплаты;
	Иначе
		Оплачено = тзОплаты.Итог("СуммаУпр");
		Оплачено = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			Оплачено,
			Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
			Дата,
			ВалютаДокумента,
			?(НЕ ЗначениеЗаполнено(КурсДокумента), Дата, КурсДокумента),
			РежимОкругления.Окр15как20
		);
		
		СуммаПредоплаты	= РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ДанныеЗаполнения.СуммаПредоплаты,
			ДанныеЗаполнения.ВалютаДокумента,
			ДанныеЗаполнения.Дата,
			ВалютаДокумента,
			Дата,
			РежимОкругления.Окр15как20
		);
	КонецЕсли;
	
	Если СуммаПредоплатыПоСчету > 0 Тогда
		СуммаДокумента = СуммаПредоплатыПоСчету;
	ИначеЕсли СуммаПредоплаты > Оплачено Тогда
		СуммаДокумента = СуммаПредоплаты - Оплачено;
	Иначе
		СуммаДокумента = ДокументОснованиеСуммаДокумента - Оплачено;
	КонецЕсли;
	СуммаДокумента = ?(СуммаДокумента < 0, 0, СуммаДокумента);
	
	// Заполним табличную часть "Товары".
	Если НЕ Документы.ЧекНаОплату.ЗаполнитьТовары(ЭтотОбъект, , ДополнительныеСвойства.ПараметрыДействия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Определим признак способа расчета
	ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(ЭтотОбъект, Товары,
		Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная);
		
	// Получена сумма оплаты, пересчет не требуется
	ДополнительныеСвойства.Вставить("НеПересчитыватьСуммуДокумента", Истина);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаАвтомобиль()

// Производит заполнение объекта на основании документа "Счет на оплату за автомобили".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СчетНаОплатуЗаАвтомобили(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем обработчик заполнения на основании документа "Заказ покупателя"
	Возврат ОбработкаЗаполнения_СчетНаОплату(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_СчетНаОплатуЗаАвтомобили()

// Производит заполнение объекта на основании документа "Реализация автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РеализацияАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Заполним табличную часть "Товары".
	Если НЕ Документы.ЧекНаОплату.ЗаполнитьТовары(ЭтотОбъект, , ДополнительныеСвойства.ПараметрыДействия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Подсчет новой суммы документа назначения
	СуммаДокумента=Товары.Итог("СуммаВсего");
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Контрагент",            Контрагент);
	СтруктураОтбора.Вставить("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов);
	СтруктураОтбора.Вставить("ДокументРасчетов",      ДанныеЗаполнения);
	
	тзДолги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(СтруктураОтбора);
	
	Если ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("Сумма"),
			ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеЗаполнения.КурсДокумента,
			ВалютаДокумента, КурсДокумента);
	ИначеЕсли Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() = ВалютаДокумента Тогда
		ОстатокПоСделке = тзДолги.Итог("СуммаБаз");
	Иначе
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("СуммаУпр"),
			Константы.ВалютаУправленческогоУчетаКомпании.Получить(), ДанныеЗаполнения.КурсВалютыУпр,
			ВалютаДокумента, КурсДокумента);
	КонецЕсли;
	
	ОстатокПоСделке = ?(ОстатокПоСделке < 0, 0, ОстатокПоСделке);
	
	РанееБылаПередачаТовара = ПоСделкеИмеетсяЧекПередачиТоваров(ДанныеЗаполнения);
	
	СпособРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	Если РанееБылаПередачаТовара Тогда
		Если ОстатокПоСделке < СуммаДокумента Тогда
			СуммаДокумента = ОстатокПоСделке;
		КонецЕсли;
		СпособРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита;
	ИначеЕсли ОстатокПоСделке < СуммаДокумента Тогда
		СуммаАванса = СуммаДокумента - ОстатокПоСделке;
		СтрокаОплат = Оплаты.НайтиСтроки(Новый Структура("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата")));
		Если СтрокаОплат.Количество() = 0 Тогда
			СтрокаОплат = Оплаты.Добавить();
			СтрокаОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата; 
			СтрокаОплат.Сумма = СуммаАванса;
		Иначе
			СтрокаОплат[0].Сумма = СтрокаОплат[0].Сумма + СуммаАванса;
		КонецЕсли;
	КонецЕсли;
	
	// Определим признак способа расчета
	ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(
		ЭтотОбъект,
		Товары,
		СпособРасчета);
	
	// Получена сумма оплаты, пересчет не требуется
	ДополнительныеСвойства.Вставить("НеПересчитыватьСуммуДокумента", Истина);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РеализацияАвтомобилей()

// Производит заполнение объекта на основании документа "Заказ наряд"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаряд(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный Тогда
		ТекстСообщения = НСтр("ru = 'Ввод чека на оплату на основании заказ-наряда с бесплатным ремонтом запрещен.'");
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
		Возврат Истина;
	ИначеЕсли ДанныеЗаполнения.СуммаДокумента = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Ввод чека на оплату на основании заказ-наряда с нулевой суммой запрещен.'");
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого Строка Из Товары Цикл
		Строка.КлючСтроки = Новый УникальныйИдентификатор;
	КонецЦикла;
	
	// Заполним табличную часть "Товары".
	Если НЕ Документы.ЧекНаОплату.ЗаполнитьТовары(ЭтотОбъект, , ДополнительныеСвойства.ПараметрыДействия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Контрагент",            Контрагент);
	СтруктураОтбора.Вставить("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов);
	СтруктураОтбора.Вставить("ДокументРасчетов", ДанныеЗаполнения);
	
	тзДолги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(СтруктураОтбора);
	
	Если ДанныеЗаполнения.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
		ОстатокПоСделке = 0;
	Иначе
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ДанныеЗаполнения.СуммаДокумента,
			ДанныеЗаполнения.ВалютаДокумента, ДанныеЗаполнения.КурсДокумента, ВалютаДокумента, КурсДокумента);
	КонецЕсли;
	Если ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		ОстатокПоСделке = ОстатокПоСделке
			+ РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("Сумма"),
				ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,
				ДанныеЗаполнения.КурсДокумента, ВалютаДокумента, КурсДокумента);
	ИначеЕсли Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() = ВалютаДокумента Тогда
		ОстатокПоСделке = ОстатокПоСделке + тзДолги.Итог("СуммаБаз");
	Иначе
		ОстатокПоСделке = ОстатокПоСделке
			+ РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("СуммаУпр"),
				Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
				ДанныеЗаполнения.КурсВалютыУпр, ВалютаДокумента, КурсДокумента);
	КонецЕсли;
	
	ОстатокПоСделке = ?(ОстатокПоСделке < 0, 0, ОстатокПоСделке);
	
	Для Каждого Строка Из Товары Цикл
		Строка.КлючСтроки = Новый УникальныйИдентификатор;
	КонецЦикла;
	
	СуммаДокумента = Товары.Итог("СуммаВсего");
	
	РанееБылаПередачаТовара = ПоСделкеИмеетсяЧекПередачиТоваров(ДанныеЗаполнения);
	
	СпособРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	Если РанееБылаПередачаТовара Тогда
		Если ОстатокПоСделке < СуммаДокумента Тогда
			СуммаДокумента = ОстатокПоСделке;
		КонецЕсли;
		СпособРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита;
	ИначеЕсли ОстатокПоСделке < СуммаДокумента Тогда
		СуммаАванса = СуммаДокумента - ОстатокПоСделке;
		ПараметрыОтбора = Новый Структура("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата"));
		СтрокаОплат = Оплаты.НайтиСтроки(ПараметрыОтбора);
		Если СтрокаОплат.Количество() = 0 Тогда
			СтрокаОплат = Оплаты.Добавить();
			СтрокаОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата; 
			СтрокаОплат.Сумма = СуммаАванса;
		Иначе
			СтрокаОплат[0].Сумма = СтрокаОплат[0].Сумма + СуммаАванса;
		КонецЕсли;
	КонецЕсли;
	
	// Определим признак способа расчета
	ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(ЭтотОбъект, Товары,
		СпособРасчета);
	
	// Получена сумма оплаты, пересчет не требуется
	ДополнительныеСвойства.Вставить("НеПересчитыватьСуммуДокумента", Истина);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаряд()

// Производит заполнение объекта на основании документа "Заказ поставщику на автомобиль"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПоставщикуНаАвтомобиль(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупки;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат ИСТИНА;
	КонецЕсли;
	
	// Вызываем обработчик заполнения на основании документа "Заказ покупателя"
	ОбработкаЗаполнения_ЗаказПокупателя(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
	// Заполним табличную часть "Товары".
	Если НЕ Документы.ЧекНаОплату.ЗаполнитьТовары(ЭтотОбъект, , ДополнительныеСвойства.ПараметрыДействия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Определим признак способа расчета
	ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(ЭтотОбъект, Товары,
		Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;	
	
КонецФункции // ОбработкаЗаполнения_ЗаказПоставщикуНаАвтомобиль()

// Производит заполнение объекта на основании документа "Поступление автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупки;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПоступлениеКомиссия = (ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилейКомиссия);
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Контрагент",            Контрагент);
	СтруктураОтбора.Вставить("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов);
	
	// Сделку берем только когда у нас не комиссионное поступление
	Если НЕ ПоступлениеКомиссия Тогда
		СтруктураОтбора.Вставить("ДокументРасчетов", ДанныеЗаполнения);
	КонецЕсли;
	
	тзДолги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(СтруктураОтбора);
	
	Если ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("Сумма"),
			ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеЗаполнения.КурсДокумента,
			ВалютаДокумента, КурсДокумента);
	ИначеЕсли Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() = ВалютаДокумента Тогда
		ОстатокПоСделке = тзДолги.Итог("СуммаБаз");
	Иначе
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("СуммаУпр"),
			Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
			ДанныеЗаполнения.КурсВалютыУпр, ВалютаДокумента, КурсДокумента);
	КонецЕсли;
	
	ОстатокПоСделке = - ОстатокПоСделке;
	ОстатокПоСделке = ?(ОстатокПоСделке < 0, 0, ОстатокПоСделке);
	
	// Заполним табличную часть "Товары".
	Если НЕ Документы.ЧекНаОплату.ЗаполнитьТовары(ЭтотОбъект, , ДополнительныеСвойства.ПараметрыДействия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Для документов, где есть ТЧ "Автомобили"
	Если НЕ ПоступлениеКомиссия Тогда
		Если ЕстьРеквизит(ДанныеЗаполнения, , "Автомобили") Тогда
			СуммаДокумента = Товары.Итог("СуммаВсего");
		КонецЕсли;
		РанееБылаПередачаТовара = ПоСделкеИмеетсяЧекПередачиТоваров(ДанныеЗаполнения);
		СпособРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
		Если РанееБылаПередачаТовара Тогда
			Если ОстатокПоСделке < СуммаДокумента Тогда
				СуммаДокумента = ОстатокПоСделке;
			КонецЕсли;
			СпособРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита;
		ИначеЕсли ОстатокПоСделке < СуммаДокумента Тогда
			СуммаАванса = СуммаДокумента - ОстатокПоСделке;
			СтрокаОплат = Оплаты.НайтиСтроки(Новый Структура("ТипОплаты",
			ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата")));
			Если СтрокаОплат.Количество() = 0 Тогда
				СтрокаОплат = Оплаты.Добавить();
				СтрокаОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата;
				СтрокаОплат.Сумма = СуммаАванса;
			Иначе
				СтрокаОплат[0].Сумма = СтрокаОплат[0].Сумма + СуммаАванса;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СуммаДокумента = ОстатокПоСделке;
	КонецЕсли;
	
	// Определим признак способа расчета
	Если ПоступлениеКомиссия Тогда
		СпособРасчета = ?(СуммаДокумента <> 0,
			Перечисления.ПризнакиСпособаРасчета.ОплатаКредита,
			Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная);


	КонецЕсли;
	ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(ЭтотОбъект,
		Товары, СпособРасчета);
	// Получена сумма оплаты, пересчет не требуется
	ДополнительныеСвойства.Вставить("НеПересчитыватьСуммуДокумента", Истина);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеАвтомобилей()

// Производит заполнение объекта на основании документа "Счет от поставщикам за автомобили"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СчетОтПоставщикаЗаАвтомобили(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупки;
	
	// Вызываем обработчик заполнения на основании документа "реализация товара"
	ОбработкаЗаполнения_ВозвратОтПокупателя(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
	// Определим признак способа расчета
	ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(ЭтотОбъект, Товары,
		Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_СчетОтПоставщикаЗаАвтомобили()

// Производит заполнение объекта на основании документа "Возврат от покупателя втомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВозвратОтПокупателяАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.ЧекНаОплатуВозврат;
	
	// Получена сумма оплаты, пересчет не требуется
	ДополнительныеСвойства.Вставить("НеПересчитыватьСуммуДокумента", Истина);
	
	// Вызываем обработчик заполнения на основании документа "Заказ покупателя"
	Возврат ОбработкаЗаполнения_ВозвратОтПокупателя(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_ВозвратОтПокупателяАвтомобилей()

// Производит заполнение объекта на основании документа "Возврат поставщику автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВозвратПоставщикуАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем обработчик заполнения на основании документа "Заказ покупателя"
	Возврат ОбработкаЗаполнения_ВозвратПоставщику(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_ВозвратПоставщикуАвтомобилей()

// Производит заполнение объекта на основании документа "Поступление дополнительных расходов"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеДопРасходов(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупки;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ (ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПоступлениеДопРасходов
		ИЛИ ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПоступлениеДопРасходовНаАвтомобили) Тогда
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект,
			НСтр("ru='Ввод чека на оплату возможен только для хоз. операций ""Поступление дополнительных расходов""
			|и ""Поступление дополнительных расходов на автомобили"".'"));
		СтандартнаяОбработка = Ложь;
		Возврат Ложь;
	КонецЕсли;
	
	// Вызываем обработчик заполнения на основании документа "Заказ покупателя"
	Возврат ОбработкаЗаполнения_РеализацияТоваров(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеДопРасходов()

// Производит заполнение объекта на основании документа "Корректировка реализации"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_КорректировкаРеализации(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
			ЭтотОбъект,
			ДанныеЗаполнения,
			ТекстЗаполнения,
			СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
		
	// Заполним табличную часть "Товары".
	Если НЕ Документы.ЧекНаОплату.ЗаполнитьТовары(ЭтотОбъект, , ДополнительныеСвойства.ПараметрыДействия) Тогда
		Возврат Ложь;
	КонецЕсли;   
	
	Оплаты.Очистить();  
	НоваяСтрока = Оплаты.Добавить(); 
	НоваяСтрока.Сумма = Товары.Итог("СуммаВсего");	
	
	Сделка = ДанныеЗаполнения.Сделка;  
	СуммаДокумента = Товары.Итог("СуммаВсего");
	
	Если ПолучитьЗначениеПараметраСтруктуры(ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия, "ЭтоВозврат", Ложь) Тогда 
		ХозОперация = Справочники.ХозОперации.ЧекНаОплатуВозврат;
	Иначе 
		ХозОперация = Справочники.ХозОперации.ЧекНаОплату;
	КонецЕсли;
	// Определим признак способа расчета
	ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(
		ЭтотОбъект,
		Товары,
		Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой);

	Возврат Истина;		
	
КонецФункции // ОбработкаЗаполнения_КорректировкаРеализации()

// Производит заполнение объекта на основании документа "Корректировка поступления"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_КорректировкаПоступления(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупки;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
			ЭтотОбъект,
			ДанныеЗаполнения,
			ТекстЗаполнения,
			СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Заполним табличную часть "Товары".
	Если НЕ Документы.ЧекНаОплату.ЗаполнитьТовары(ЭтотОбъект, , ДополнительныеСвойства.ПараметрыДействия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия, "ЭтоВозврат", Ложь) Тогда 
		ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупкиВозврат;
	КонецЕсли;
	
	// Встречное предоставление
	Оплаты.Очистить();
	
	НоваяСтрока = Оплаты.Добавить();
	НоваяСтрока.Сумма = Товары.Итог("СуммаВсего");

	// Найдем и удалим строки с нулевым количеством
	СтруктураПоиска = Новый Структура("Количество", 0);
	НайденныеСтроки = Товары.НайтиСтроки(СтруктураПоиска);
	
	СуммаДокумента = Товары.Итог("СуммаВсего");

	Если НайденныеСтроки.Количество() > 0 Тогда
		Для Каждого НайденныеСтроки Из НайденныеСтроки Цикл
			Товары.Удалить(НайденныеСтроки);
		КонецЦикла;
		Документы.ЧекНаОплату.ПроизвестиРаспределениеСуммыОплаты(СуммаДокумента, Товары);
	КонецЕсли;
	
	Сделка = ДанныеЗаполнения.Сделка;
	
	// Определим признак способа расчета
	ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(
		ЭтотОбъект,
		Товары,
		Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой);
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_КорректировкаПоступления()

// Производит заполнение объекта на основании документа "Корректировка реализации автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_КорректировкаРеализацииАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ОбработкаЗаполнения_КорректировкаРеализации(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_КорректировкаРеализацииАвтомобилей()

// Производит заполнение объекта на основании документа "Корректировка поступления автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_КорректировкаПоступленияАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ОбработкаЗаполнения_КорректировкаПоступления(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_КорректировкаРеализацииАвтомобилей()

// Производит заполнение объекта на основании документа "Заявка на расход ДС"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаРасходДС(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Продолжать = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ Продолжать Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДокументОснование.ХозОперация <> ПредопределенноеЗначение("Справочник.ХозОперации.ЗаявкаНаРасходИзКассы") Тогда
		ТекстСообщения = НСтр("ru = 'Хоз. операция документа основания не соответствует создаваемому документу.'");
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;

	ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупки;
	
	// Получена сумма оплаты, пересчет не требуется
	ДополнительныеСвойства.Вставить("НеПересчитыватьСуммуДокумента", Истина);
	
	// Вызываем обработчик заполнения на основании документа "Заказ покупателя"
	Если ТипЗнч(ДанныеЗаполнения.Сделка) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		Результат = ОбработкаЗаполнения_ОтчетКомитенту(ДанныеЗаполнения.Сделка, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения.Сделка) = Тип("ДокументСсылка.ОтчетКомитентуЗаАвтомобили") Тогда
		Результат = ОбработкаЗаполнения_ОтчетКомитентуЗаАвтомобили(ДанныеЗаполнения.Сделка, ТекстЗаполнения, СтандартнаяОбработка);
	Иначе
		Результат = ОбработкаЗаполнения_РеализацияТоваров(ДанныеЗаполнения.Сделка, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
	ДокументОснование = ДанныеЗаполнения;
	
	Возврат Результат;
	
КонецФункции // ОбработкаЗаполнения_ЗаявкаНаРасходДС()

// Производит заполнение объекта на основании документа "Заявка на хранение шин"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаХранениеШин(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем обработчик заполнения на основании документа "Заказ покупателя"
	Возврат ОбработкаЗаполнения_ЗаказПокупателя(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_ЗаявкаНаХранениеШин()

// Производит заполнение объекта на основании документа "Отчет комитенту за автомобили"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ОтчетКомитентуЗаАвтомобили(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупки;
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Контрагент",            Контрагент);
	СтруктураОтбора.Вставить("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов);
	СтруктураОтбора.Вставить("ДокументРасчетов", ДанныеЗаполнения);
	
	тзДолги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(СтруктураОтбора);
	
	Если ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("Сумма"),
			ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеЗаполнения.КурсДокумента,
			ВалютаДокумента, КурсДокумента);
	ИначеЕсли Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() = ВалютаДокумента Тогда
		ОстатокПоСделке = тзДолги.Итог("СуммаБаз");
	Иначе
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("СуммаУпр"),
			Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
			ДанныеЗаполнения.КурсВалютыУпр, ВалютаДокумента, КурсДокумента);
	КонецЕсли;
	
	ОстатокПоСделке = - ОстатокПоСделке;
	ОстатокПоСделке = ?(ОстатокПоСделке < 0, 0, ОстатокПоСделке);
	
	// Заполним табличную часть "Товары".
	Если НЕ Документы.ЧекНаОплату.ЗаполнитьТовары(ЭтотОбъект, , ДополнительныеСвойства.ПараметрыДействия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Подсчет новой суммы документа назначения
	ВалютаОснования = ДанныеЗаполнения.ВалютаДокумента;
	КурсОснования   = ДанныеЗаполнения.КурсДокумента;
	Пересчет = (ВалютаОснования <> ВалютаДокумента) ИЛИ (КурсОснования <> КурсДокумента);
	
	АвтомобилиОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "Автомобили").Выгрузить();
	СуммаДокумента = ?(Пересчет,
		РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			АвтомобилиОснования.Итог("СуммаВсего") - АвтомобилиОснования.Итог("Вознаграждение"),
			ВалютаОснования,
			КурсОснования,
			ВалютаДокумента,
			КурсДокумента),
		АвтомобилиОснования.Итог("СуммаВсего") - АвтомобилиОснования.Итог("Вознаграждение"));
	
	// Пересчитаем суммовые показатели.
	VINАвтомобилей = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(АвтомобилиОснования.ВыгрузитьКолонку("Автомобиль"), "VIN");
	СерийныеНомераХарактеристики = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		Товары.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"),
		"СерийныйНомер");
	ОтборСтрок = Новый Структура("ХарактеристикаНоменклатуры");
	Для Каждого СтрокаАвтомобиля Из АвтомобилиОснования Цикл
		VIN = VINАвтомобилей.Получить(СтрокаАвтомобиля.Автомобиль);
		Для Каждого СтрокаХарактеристики Из СерийныеНомераХарактеристики Цикл
			Если VIN = СтрокаХарактеристики.Значение Тогда
				ОтборСтрок.ХарактеристикаНоменклатуры = СтрокаХарактеристики.Ключ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		НайденныеСтроки = Товары.НайтиСтроки(ОтборСтрок);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.СуммаВсего = ?(Пересчет,
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					СтрокаАвтомобиля.СуммаВсего - СтрокаАвтомобиля.Вознаграждение,
					ВалютаОснования,
					КурсОснования,
					ВалютаДокумента,
					КурсДокумента),
				СтрокаАвтомобиля.СуммаВсего - СтрокаАвтомобиля.Вознаграждение);
			Документы.ЧекНаОплату.ТоварыСуммаВсегоПриИзменении(
				ЭтотОбъект,
				НайденнаяСтрока,
				ДополнительныеСвойства.ПараметрыДействия);
		КонецЦикла;
	КонецЦикла;
	
	РанееБылаПередачаТовара = ПоСделкеИмеетсяЧекПередачиТоваров(ДанныеЗаполнения);
	СпособРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	Если РанееБылаПередачаТовара Тогда
		Если ОстатокПоСделке < СуммаДокумента Тогда
			СуммаДокумента = ОстатокПоСделке;
		КонецЕсли;
		СпособРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита;
	ИначеЕсли ОстатокПоСделке < СуммаДокумента Тогда
		СуммаАванса = СуммаДокумента - ОстатокПоСделке;
		СтрокаОплат = Оплаты.НайтиСтроки(Новый Структура("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата")));
		Если СтрокаОплат.Количество() = 0 Тогда
			СтрокаОплат = Оплаты.Добавить();
			СтрокаОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата; 
			СтрокаОплат.Сумма = СуммаАванса;
		Иначе
			СтрокаОплат[0].Сумма = СтрокаОплат[0].Сумма + СуммаАванса;
		КонецЕсли;
	КонецЕсли;
	
	// Определим признак способа расчета
	ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(ЭтотОбъект, Товары,
		СпособРасчета);
	
	// Получена сумма оплаты, пересчет не требуется
	ДополнительныеСвойства.Вставить("НеПересчитыватьСуммуДокумента", Истина);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеАвтомобилей()

// Производит заполнение объекта на основании документа "Отчет комитенту"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ОтчетКомитенту(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.ЧекНаОплатуПокупки;
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Контрагент",            Контрагент);
	СтруктураОтбора.Вставить("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов);
	СтруктураОтбора.Вставить("ДокументРасчетов", ДанныеЗаполнения);
	
	тзДолги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(СтруктураОтбора);
	
	Если ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("Сумма"),
			ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеЗаполнения.КурсДокумента,
			ВалютаДокумента, КурсДокумента);
	ИначеЕсли Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() = ВалютаДокумента Тогда
		ОстатокПоСделке = тзДолги.Итог("СуммаБаз");
	Иначе
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("СуммаУпр"),
			Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
			ДанныеЗаполнения.КурсВалютыУпр, ВалютаДокумента, КурсДокумента);
	КонецЕсли;
	
	ОстатокПоСделке = - ОстатокПоСделке;
	ОстатокПоСделке = ?(ОстатокПоСделке < 0, 0, ОстатокПоСделке);
	
	// Заполним табличную часть "Товары".
	Если НЕ Документы.ЧекНаОплату.ЗаполнитьТовары(ЭтотОбъект, , ДополнительныеСвойства.ПараметрыДействия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТоварыДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "Товары").Выгрузить();
	СуммаДокумента = ТоварыДокумента.Итог("СуммаВсего") - ТоварыДокумента.Итог("Вознаграждение");
	
	// Пересчитаем суммовые показатели.
	ОтборСтрок = Новый Структура("Номенклатура,ЕдиницаИзмерения,ХарактеристикаНоменклатуры,ГТД");
	Для Каждого СтрокаТовара Из ТоварыДокумента Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаТовара);
		НайденныеСтроки = Товары.НайтиСтроки(ОтборСтрок);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.СуммаВсего = СтрокаТовара.СуммаВсего - СтрокаТовара.Вознаграждение;
			Документы.ЧекНаОплату.ТоварыСуммаВсегоПриИзменении(
				ЭтотОбъект,
				НайденнаяСтрока,
				ДополнительныеСвойства.ПараметрыДействия);
		КонецЦикла;
	КонецЦикла;
	
	РанееБылаПередачаТовара = ПоСделкеИмеетсяЧекПередачиТоваров(ДанныеЗаполнения);
	СпособРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	Если РанееБылаПередачаТовара Тогда
		Если ОстатокПоСделке < СуммаДокумента Тогда
			СуммаДокумента = ОстатокПоСделке;
		КонецЕсли;
		СпособРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита;
	ИначеЕсли ОстатокПоСделке < СуммаДокумента Тогда
		СуммаАванса = СуммаДокумента - ОстатокПоСделке;
		СтрокаОплат = Оплаты.НайтиСтроки(Новый Структура("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата")));
		Если СтрокаОплат.Количество() = 0 Тогда
			СтрокаОплат = Оплаты.Добавить();
			СтрокаОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата; 
			СтрокаОплат.Сумма = СуммаАванса;
		Иначе
			СтрокаОплат[0].Сумма = СтрокаОплат[0].Сумма + СуммаАванса;
		КонецЕсли;
	КонецЕсли;
	
	// Определим признак способа расчета
	ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПолучитьПризнакСпособаРасчета(ЭтотОбъект, Товары,
		СпособРасчета);
	
	// Получена сумма оплаты, пересчет не требуется
	ДополнительныеСвойства.Вставить("НеПересчитыватьСуммуДокумента", Истина);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеАвтомобилей()

// Производит заполнение объекта на основании документа "Оптовый заказ клиента на автомобили"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ОптовыйЗаказКлиентаНаАвтомобили(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем обработчик заполнения на основании документа "Заказ покупателя"
	Возврат ОбработкаЗаполнения_ЗаказНаАвтомобиль(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_ОптовыйЗаказКлиентаНаАвтомобили()

// Производит заполнение объекта на основании документа "Оптовый заказ поставщику на автомобили".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ОптовыйЗаказПоставщикуНаАвтомобили(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ОбработкаЗаполнения_ЗаказПоставщикуНаАвтомобиль(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_ОптовыйЗаказПоставщикуНаАвтомобили()

#КонецОбласти

Процедура ЗаполнитьАдресПокупателя()
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ФормаСобственности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ФормаСобственности");
	
	Если НЕ (ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель
		ИЛИ ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	СписокАдресов = УправлениеДиалогомДокументаСервер.АдресаКонтрагента(
		Контрагент,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента
	);
	Если СписокАдресов.Количество() > 0 Тогда
		АдресПокупателя = СписокАдресов[0];
	КонецЕсли;
	
КонецПроцедуры

Функция ПоСделкеИмеетсяЧекПередачиТоваров(ДокументСделки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЧекНаОплату.Ссылка КАК Ссылка,
	               |	ЧекНаОплату.Дата КАК Дата,
	               |	ВЫБОР
	               |		КОГДА ЧекНаОплату.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекНаОплатуВозврат)
	               |				ИЛИ ЧекНаОплату.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекНаОплатуПокупки)
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЭтоПриход
	               |ИЗ
	               |	Документ.ЧекНаОплату КАК ЧекНаОплату
	               |ГДЕ
	               |	ЧекНаОплату.Сделка = &Сделка
	               |	И ЧекНаОплату.Проведен
	               |	И ЧекНаОплату.ПризнакСпособаРасчета В (ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой), ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаБезОплаты), ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой))
	               |	И ЧекНаОплату.Ссылка <> &Ссылка
	               |	И ЧекНаОплату.Дата < &ДатаПроверки
	               |	И ЧекНаОплату.Патент = &Патент
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ПриходныйКассовыйОрдер.Ссылка,
	               |	ПриходныйКассовыйОрдер.Дата,
	               |	ИСТИНА
	               |ИЗ
	               |	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	               |ГДЕ
	               |	ПриходныйКассовыйОрдер.Сделка = &Сделка
	               |	И ПриходныйКассовыйОрдер.Проведен
	               |	И ПриходныйКассовыйОрдер.ПризнакСпособаРасчета В (ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой), ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой))
	               |	И ПриходныйКассовыйОрдер.Ссылка <> &Ссылка
	               |	И ПриходныйКассовыйОрдер.Дата < &ДатаПроверки
	               |	И ПриходныйКассовыйОрдер.Патент = &Патент
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ПриходныйКассовыйОрдерСостав.Ссылка,
	               |	ПриходныйКассовыйОрдерСостав.Ссылка.Дата,
	               |	ИСТИНА
	               |ИЗ
	               |	Документ.ПриходныйКассовыйОрдер.Состав КАК ПриходныйКассовыйОрдерСостав
	               |ГДЕ
	               |	ПриходныйКассовыйОрдерСостав.ДокументРасчетов = &Сделка
	               |	И ПриходныйКассовыйОрдерСостав.Ссылка.Проведен
	               |	И ПриходныйКассовыйОрдерСостав.Ссылка.ПризнакСпособаРасчета В (ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой), ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой))
	               |	И ПриходныйКассовыйОрдерСостав.Ссылка <> &Ссылка
	               |	И ПриходныйКассовыйОрдерСостав.Ссылка.Дата < &ДатаПроверки
	               |	И ПриходныйКассовыйОрдерСостав.Ссылка.Патент = &Патент
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	РасходныйКассовыйОрдер.Ссылка,
	               |	РасходныйКассовыйОрдер.Дата,
	               |	ЛОЖЬ
	               |ИЗ
	               |	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	               |ГДЕ
	               |	РасходныйКассовыйОрдер.Сделка = &Сделка
	               |	И РасходныйКассовыйОрдер.Проведен
	               |	И РасходныйКассовыйОрдер.ПризнакСпособаРасчета В (ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой), ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой))
	               |	И РасходныйКассовыйОрдер.Ссылка <> &Ссылка
	               |	И РасходныйКассовыйОрдер.Дата = &ДатаПроверки
	               |	И РасходныйКассовыйОрдер.Патент = &Патент
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	РасходныйКассовыйОрдерСостав.Ссылка,
	               |	РасходныйКассовыйОрдерСостав.Ссылка.Дата,
	               |	ЛОЖЬ
	               |ИЗ
	               |	Документ.РасходныйКассовыйОрдер.Состав КАК РасходныйКассовыйОрдерСостав
	               |ГДЕ
	               |	РасходныйКассовыйОрдерСостав.ДокументРасчетов = &Сделка
	               |	И РасходныйКассовыйОрдерСостав.Ссылка.Проведен
	               |	И РасходныйКассовыйОрдерСостав.Ссылка.ПризнакСпособаРасчета В (ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой), ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой))
	               |	И РасходныйКассовыйОрдерСостав.Ссылка <> &Ссылка
	               |	И РасходныйКассовыйОрдерСостав.Ссылка.Дата < &ДатаПроверки
	               |	И РасходныйКассовыйОрдерСостав.Ссылка.Патент = &Патент
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВыпискаСостав.Ссылка,
	               |	ВыпискаСостав.Ссылка.Дата,
	               |	ВЫБОР
	               |		КОГДА ВыпискаСостав.СуммаРасход > 0
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ
	               |ИЗ
	               |	Документ.Выписка.Состав КАК ВыпискаСостав
	               |ГДЕ
	               |	ВыпискаСостав.Сделка = &Сделка
	               |	И ВыпискаСостав.Ссылка.Проведен
	               |	И ВыпискаСостав.Ссылка.ПризнакСпособаРасчета В (ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой), ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой))
	               |	И ВыпискаСостав.Ссылка <> &Ссылка
	               |	И ВыпискаСостав.Ссылка.Патент = &Патент
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата УБЫВ";
	Запрос.УстановитьПараметр("Сделка", ДокументСделки);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаПроверки", ?(ЗначениеЗаполнено(Ссылка), Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Патент", Патент);
	
	ВыполнениеЗапроса = Запрос.Выполнить();
	
	Если ВыполнениеЗапроса.Пустой() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ПоследняяПередачаТовара = ВыполнениеЗапроса.Выбрать();
	ПоследняяПередачаТовара.Следующий();
	
	ОперацииСПокупателем = Новый Массив();
	ОперацииСПокупателем.Добавить(Справочники.ХозОперации.ЧекНаОплату);
	ОперацииСПокупателем.Добавить(Справочники.ХозОперации.ЧекНаОплатуВозврат);
	
	ОперацииВозврата = Новый Массив();
	ОперацииВозврата.Добавить(Справочники.ХозОперации.ЧекНаОплатуВозврат);
	ОперацииВозврата.Добавить(Справочники.ХозОперации.ЧекНаОплатуПокупкиВозврат);
	
	ЕстьДокументПередачиТоваров = Ложь;
	Если ОперацииСПокупателем.Найти(ХозОперация) = Неопределено Тогда
		
		Если ОперацииВозврата.Найти(ХозОперация) = Неопределено Тогда
			
			ЕстьДокументПередачиТоваров = Не ПоследняяПередачаТовара.ЭтоПриход;
			
		Иначе
			
			ЕстьДокументПередачиТоваров = ПоследняяПередачаТовара.ЭтоПриход;
			
		КонецЕсли;
		
	Иначе
		
		Если ОперацииВозврата.Найти(ХозОперация) = Неопределено Тогда
			
			ЕстьДокументПередачиТоваров = ПоследняяПередачаТовара.ЭтоПриход;
			
		Иначе
			
			ЕстьДокументПередачиТоваров = Не ПоследняяПередачаТовара.ЭтоПриход;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕстьДокументПередачиТоваров;
	
КонецФункции // ПоСделкеИмеетсяЧекПередачиТоваров()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
