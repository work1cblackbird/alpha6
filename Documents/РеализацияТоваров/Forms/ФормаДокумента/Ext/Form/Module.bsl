///////////////////////////////////////////////////////////////////////////////
// Модуль основной формы документа "Реализация товаров"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();

	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	НалоговыйДокумент = ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиНалоговыйДокумент(ЭтотОбъект, Объект);
	
	// ПодключаемоеОборудование
	ТипыОборудования = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
	ТипыОборудования.СканерШтрихкода = Истина;
	ТипыОборудования.СчитывательМагнитныхКарт = Истина;
	МенеджерОборудования.ПриСозданииНаСервере(ЭтаФорма, ТипыОборудования);
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ПараметрыОтображенияМеток = УправлениеСвойствами.ПараметрыОтображенияМеток();
	ПараметрыОтображенияМеток.МаксимумМетокНаФорме = 3;
	ПараметрыОтображенияМеток.ВариантОтображенияМеток = Перечисления.ВариантыОтображенияМеток.Надпись;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	ДополнительныеПараметры.Вставить("ПараметрыОтображенияМеток", ПараметрыОтображенияМеток);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	
	УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(ЭтотОбъект, Объект.Контрагент);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументССылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// УтверждениеДокументов
	УтверждениеДокументовСервер.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	// Конец УтверждениеДокументов
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовАльфаАвто.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ОграничитьВыборКонтактныхЛиц(Элементы.Контрагент);
	РаботаСФормой.НастроитьОтображениеСИспользованиемБазовогоКоличества(Элементы.ТоварыКоличество);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	
	РазрешитьРедактированиеЦенИСумм = ПраваИНастройкиПользователя.Значение("РедактированиеЦенИСуммВНоменклатурныхТаблицах", Объект);
	РаботаСФормой.РазрешитьРедактированиеЦенИСумм(
		РаботаСФормой.ТиповыеПоляСуммовыхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм
	);
	
	СпособВыбораСкидки = ПраваИНастройкиПользователя.Значение("СпособВыбораСкидки", Объект);
	РаботаСФормой.РазрешитьРедактированиеСкидок(
		РаботаСФормой.ТиповыеПоляСкидочныхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм,
		СпособВыбораСкидки
	);
	
	// Штрихкодирование
	ШтрихкодированиеВызовСервера.ПрочитатьШтрихкодДокумента(ЭтотОбъект, Объект);
	// Конец Штрихкодирование
	
	ОписаниеНовойКолонкиПроизводитель = РаботаСФормой.ОписаниеНовойКолонкиПроизводитель();
	ОписаниеНовойКолонкиПроизводитель.ТабличнаяЧасть = Элементы.Товары;
	ОписаниеНовойКолонкиПроизводитель.ПоставитьПеред = Элементы.ТоварыАртикул;
	НоваяКолонкаПроизводитель = РаботаСФормой.НоваяКолонкаПроизводитель(ЭтотОбъект, ОписаниеНовойКолонкиПроизводитель);
	
	КолонкиКодАртикулИПроизводитель = Новый Структура();
	КолонкиКодАртикулИПроизводитель.Вставить("Код", Элементы.ТоварыКод);
	КолонкиКодАртикулИПроизводитель.Вставить("Артикул", Элементы.ТоварыАртикул);
	КолонкиКодАртикулИПроизводитель.Вставить("Производитель", НоваяКолонкаПроизводитель);
	РаботаСФормой.НастроитьВидимостьКолонокКодАртикулИПроизводитель(КолонкиКодАртикулИПроизводитель);
	РаботаСФормой.ОткрытьФормуТолькоДляПросмотра(ЭтотОбъект, Объект);
	
	ЕдиницаИзмеренияМассы = Строка(Константы.ОсновнаяЕдиницаИзмеренияМассы.Получить());
	РассчитатьМассуНоменклатуры();
	ПроверкаСоответствияКодовМаркировкиПроводилась = Ложь;
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец АльфаАвто.СобытияОбъектов
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ИспользоватьОбменЭД = ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД");
		
		РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
		РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
		РаботаСФормой.УстановитьВидимостьКолонкиСодержаниеУслуги(ЭтотОбъект, Объект);
		
		// Маркировка
		МаркировкаТоваровСервер.ПриСозданииЧтенииНаСервере(ЭтотОбъект, Объект);
		МаркировкаТоваровСервер.ИнициализироватьСлужебныеРеквизиты(ЭтотОбъект);
		// Конец Маркировка
		
		// ПрослеживаемыеТовары
		УчетПрослеживаемыхТоваровСервер.ЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара(Объект);
		// Конец ПрослеживаемыеТовары
		
		РасчетыСКонтрагентамиСервер.ЗаполнитьСлужебныйРеквизитОстатокПоДокументуОплаты(Объект);
		
		РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
		НастроитьПараметрыВыбораЭлементовФормы();
		
		УправлениеДиалогомНаСервере();
	КонецЕсли;
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);
	Если Элементы.ТоварыОстатокНаСкладе.Видимость Тогда
		РаботаСФормой.ОтобразитьОстаткиТоваровНаСкладе(Объект, Элементы.ТоварыОстатокНаСкладе);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// УтверждениеДокументов
	УтверждениеДокументовКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец УтверждениеДокументов
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	УстановитьДоступностьЖалобы();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ПриОткрытии_ФормаДокумента(ЭтотОбъект, Отказ);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	
	Если НЕ УправлениеДиалогомДокументаКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Объект, Окно, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ОбработкаОповещения_ФормаДокумента(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.СобытияОбъектов
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// Штрихкодирование
	ШтрихкодированиеКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец Штрихкодирование
	
	// УтверждениеДокументов
	УтверждениеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец УтверждениеДокументов
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовКлиент.ОбработчикОповещенияФормаДокумента(ИмяСобытия,ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
	РаботаСФормойКлиент.ТребуетсяОбновитьЗаголовокНадписиНалоговыйДокумент(ЭтотОбъект, ИмяСобытия);
	
КонецПроцедуры 

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриЧтенииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПриЧтенииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	РаботаСФормой.УстановитьВидимостьКолонкиСодержаниеУслуги(ЭтотОбъект, Объект);
	
	ИспользоватьОбменЭД = ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД");
	
	// Маркировка
	МаркировкаТоваровСервер.ПриСозданииЧтенииНаСервере(ЭтотОбъект, Объект);
	МаркировкаТоваровСервер.ИнициализироватьСлужебныеРеквизиты(ЭтотОбъект); 
	// Конец Маркировка
	
	// ПрослеживаемыеТовары
	УчетПрослеживаемыхТоваровСервер.ЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара(Объект);
	// Конец ПрослеживаемыеТовары
	
	НастроитьПараметрыВыбораЭлементовФормы();
	РассчитатьМассуНоменклатуры();
	РаботаСФормой.ЗаполнитьСлужебныйРеквизитСуммаСписания(Объект, "ПартииТоваровКомпании");
	УправлениеДиалогомНаСервере();
	ОбновитьРеквизитыРезультатаПроверкиКМ();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриЧтенииНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект);
	// Конец АльфаАвто.СобытияОбъектов 
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриЧтенииНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект);
	// Конец АльфаАвто.СобытияОбъектов
	
	РасчетыСКонтрагентамиСервер.ЗаполнитьСлужебныйРеквизитОстатокПоДокументуОплаты(Объект);
	
	НалоговыйДокумент = ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиНалоговыйДокумент(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("РеализацияТоваров", ПараметрыЗаписи.РежимЗаписи,
		Объект.Товары.Количество() > 50);
		
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);
	
КонецПроцедуры 

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ПараметрыЗаписи.Свойство("ИзменятьЗаказы") Тогда
		ТекущийОбъект.ДополнительныеСвойства.ИзменятьЗаказы = ПараметрыЗаписи.ИзменятьЗаказы;
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПроверятьБлокировкуКарты", Истина);
	
	// Закэшируем результаты проверки состояния кодов маркировки.
	КэшРезультатаПроверкиКодовМаркировки = ПоместитьВоВременноеХранилище(
		Объект.КодыМаркировки.Выгрузить(),
		УникальныйИдентификатор
	);
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПередЗаписьюНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Проверим наличие проверки кодов маркировки
	Если ПроверкаСоответствияКодовМаркировкиПроводилась Тогда
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("ЕстьРазличияСостоянийКМ", Истина);
		УспешнаяПроверкаКМ = (Объект.Товары.НайтиСтроки(СтруктураПоиска).Количество() = 0);
		
		// Маркировка
		МаркировкаТоваровСервер.ЗафиксироватьРезультатПроверкиКодовМаркировки(
			ТекущийОбъект,
			ДатаПроверкиКМ,
			АвторПроверкиКМ,
			УспешнаяПроверкаКМ
		);
		// Конец Маркировка
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	Если НЕ ЭтотОбъект.Элементы.Найти("НадписьНалоговыйДокумент") = Неопределено Тогда
		ЭтотОбъект.НалоговыйДокумент = ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиНалоговыйДокумент(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;

	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	РаботаСФормой.УстановитьВидимостьКолонкиСодержаниеУслуги(ЭтотОбъект, Объект);
	
	// Маркировка
	МаркировкаТоваровСервер.ЗаполнитьСлужебныйРеквизитКодыМаркировки(Объект);
	МаркировкаТоваровСервер.ИнициализироватьСлужебныеРеквизиты(ЭтотОбъект); 
	// Конец Маркировка
	
	// ПрослеживаемыеТовары
	УчетПрослеживаемыхТоваровСервер.ЗаполнитьСлужебныйРеквизитПрослеживаемогоТовара(Объект);
	// Конец ПрослеживаемыеТовары
	
	// Штрихкодирование
	ШтрихкодированиеВызовСервера.ЗаписатьШтрихкодДокумента(ЭтотОбъект, Объект);
	// Конец Штрихкодирование
	
	НастроитьПараметрыВыбораЭлементовФормы();
	РассчитатьМассуНоменклатуры();
	РаботаСФормой.ЗаполнитьСлужебныйРеквизитСуммаСписания(Объект, "ПартииТоваровКомпании");
	УправлениеДиалогомНаСервере();
	ОбновитьРеквизитыРезультатаПроверкиКМ();
	Если Элементы.ТоварыОстатокНаСкладе.Видимость Тогда
		РаботаСФормой.ОтобразитьОстаткиТоваровНаСкладе(Объект, Элементы.ТоварыОстатокНаСкладе);
	КонецЕсли;
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПослеЗаписиНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
	РасчетыСКонтрагентамиСервер.ЗаполнитьСлужебныйРеквизитОстатокПоДокументуОплаты(Объект);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтаФорма, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);
	РаботаСФормойКлиент.ОбновитьПодчиненныеСчета(Объект.Ссылка, Неопределено);
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры 

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РеализацияТоваров.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();  
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры 

&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	
	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РеализацияТоваров.ДатаПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура СкладКомпанииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РеализацияТоваров.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура СкладКомпанииПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	СкладКомпанииПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РеализацияТоваров.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Объект.Контрагент, ПараметрыДействия);
	
	ПриИзмененииКлючевыхРеквизитовСостояниеЭДО();
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(ЭтотОбъект, Объект.Контрагент);
	
КонецПроцедуры 

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("НеобходимоПерезаполнитьАвтомобиль", Ложь);
	КонтрагентПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РеализацияТоваров.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Объект.ДоговорВзаиморасчетов, ПараметрыДействия);
	
	ПриИзмененииКлючевыхРеквизитовСостояниеЭДО();
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДоговорВзаиморасчетовПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура КомитентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РеализацияТоваров.КомитентПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура КомитентПриИзменении(Элемент)
	
	КомитентПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура АвтомобильПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РеализацияТоваров.АвтомобильПриИзменении(Объект, ПараметрыДействия);
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Объект.Автомобиль, ПараметрыДействия);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("НеобходимоПерезаполнитьЗаказчика", Ложь);
	АвтомобильПриИзмененииНаСервере(ПараметрыДействия);
	
	НеобходимоПерезаполнитьЗаказчика  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеобходимоПерезаполнитьЗаказчика",  Ложь);
	
	Если НеобходимоПерезаполнитьЗаказчика Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ПараметрыДействия),
			СтрШаблон("Владелец автомобиля <%1> = <%2>.
				|Выбран контрагентом <%3>. Установить контрагентом <%2>?",
				Объект.Автомобиль, ПараметрыДействия.ВладелецАвтомобиля, Объект.Контрагент),
			РежимДиалогаВопрос.ДаНет);
		
		Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Элемент") = Неопределено Тогда
			ПараметрыДействия.Удалить("Элемент");
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильРасширеннаяПодсказкаНажатие(Элемент)
	
	АвтомобилиКлиент.ОтчетИсторияАвтомобиля(ЭтотОбъект, Объект.Автомобиль);
	
КонецПроцедуры 

&НаКлиенте
Процедура КонтрагентРасширеннаяПодсказкаНажатие(Элемент)
	
	Если ДисконтнаяКартаЗаблокирована() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Дисконтная карта заблокирована.'"),, НСтр("ru = 'Дисконтная карта контрагента'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Объект",                Объект);
	ПараметрыФормы.Вставить("Карточка",              Объект.Карточка);
	ПараметрыФормы.Вставить("Дата",                  Объект.Дата);
	ПараметрыФормы.Вставить("КоличествоКНачислению", Объект.КоличествоКНачислению);
	ПараметрыФормы.Вставить("КоличествоКСписанию",   Объект.КоличествоКСписанию);
	
	ОбработкаОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаИзмененияКоличестваКСписанию", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ФормаДанныхОБонуснойПрограмме", ПараметрыФормы, ЭтотОбъект,,,, ОбработкаОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 

&НаКлиенте
Процедура ДекорацияСостояниеЭДОНажатие(Элемент)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяПСНПриИзменении(Элемент)
	ПараметрыДействия = Новый Структура;
	ИспользуетсяПСНПриИзмененииНаСервере(ПараметрыДействия);    
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
КонецПроцедуры

&НаСервере
Процедура ИспользуетсяПСНПриИзмененииНаСервере(ПараметрыДействия)
	Элементы.Патент.Доступность = ИспользуетсяПСН; 
	Если НЕ ИспользуетсяПСН Тогда
		Объект.Патент = Справочники.Патенты.ПустаяСсылка();
	Иначе
		ОбработкаРеквизитовДокументаСервер.УстановитьПатентПоОрганизации(Объект); 
	КонецЕсли; 
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СпособЗачетаАвансовПриИзменении(Элемент)
	
	СпособЗачетаАвансовПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СпособЗачетаАвансовПриИзмененииНаСервере()
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ПерерасчетСуммыСкидкиБонусами();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Маркировка
	МаркировкаТоваровКлиент.ОткрытьСписокКодовМаркировки(
		ЭтотОбъект,
		ВыбраннаяСтрока,
		Поле,
		СтандартнаяОбработка
	);
	// Конец Маркировка
	
	СкидкиНаценкиКлиент.ОбработкаВыбора(ЭтотОбъект, Поле, ВыбраннаяСтрока, Объект.БлокироватьПерерасчетСкидок);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПроверкаСоответствияКодовМаркировкиПроводилась = Ложь;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ПроверкаСоответствияКодовМаркировкиПроводилась = Ложь;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеДиалогомДокументаКлиент.ТоварыПриОкончанииРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Копирование Тогда
		ТекущиеДанные.СуммаСкидкиБонусами = 0;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторТовара) ИЛИ Копирование Тогда
		ТекущиеДанные.ИдентификаторТовара = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РеализацияТоваров.ОчиститьСуммыСкидкиБонусами(Объект);
	УправлениеДиалогомДокументаСервер.ТоварыПослеУдаления(ЭтотОбъект, Элементы.Товары, ПараметрыДействия);
	ПерерасчетСуммыСкидкиБонусами();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ТоварыПослеУдаленияНаСервере();
	
КонецПроцедуры

#Область ОбработчикиСобытийПолейТаблицыФормыТовары

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РеализацияТоваров.ТоварыНоменклатураПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, ТекущиеДанные, ПараметрыДействия);
	
	РассчитатьМассуСтрокиТовары(ТекущиеДанные);
	
	Если Элементы.ТоварыМасса.Видимость Тогда
		ОбработкаТабличнойЧастиТовары.ВывестиОбщуюМассуТоваров(Объект.Товары, ТоварыМассаТекстПодвала, ЕдиницаИзмеренияМассы);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	ТоварыНоменклатураПриИзмененииНаСервере();
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		// Маркировка
		МаркировкаТоваровКлиент.НачатьСканированиеМаркировки(Объект, ТекущиеДанные, ЭтотОбъект);
		// Конец Маркировка
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущиеДанные.Номенклатура);
	
	УправлениеДиалогомДокументаКлиент.ТоварыНоменклатураНачалоВыбора(
		ЭтотОбъект,
		Элемент,
		ДанныеВыбора,
		ВыборДобавлением,
		СтандартнаяОбработка,
		ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РеализацияТоваров.ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РеализацияТоваров.ТоварыЕдиницаИзмеренияПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	РассчитатьМассуСтрокиТовары(ТекущиеДанные);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТоварыЕдиницаИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РеализацияТоваров.ТоварыКоличествоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	РассчитатьМассуСтрокиТовары(ТекущиеДанные);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТоварыКоличествоПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыКоличествоБазовоеПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РеализацияТоваров.ТоварыКоличествоБазовоеПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	РассчитатьМассуСтрокиТовары(ТекущиеДанные);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыКоличествоБазовоеПриИзменении(Элемент)
	
	ТоварыКоличествоБазовоеПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыЦенаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РеализацияТоваров.ТоварыЦенаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТоварыЦенаПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСуммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РеализацияТоваров.ТоварыСуммаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТоварыСуммаПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РеализацияТоваров.ТоварыСуммаВсегоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСуммаВсегоПриИзменении(Элемент)
	
	ТоварыСуммаВсегоПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РеализацияТоваров.ТоварыСтавкаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТоварыСтавкаНДСПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСуммаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РеализацияТоваров.ТоварыСуммаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТоварыСуммаНДСПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыГТДПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РеализацияТоваров.ТоварыГТДПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыГТДПриИзменении(Элемент)
	
	ТоварыГТДПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПартияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РеализацияТоваров.ТоварыПартияПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияПриИзменении(Элемент)
	
	ТоварыПартияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РеализацияТоваров.ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Элемент)
	
	ТоварыСуммаСкидкиСтрокиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РеализацияТоваров.ТоварыСуммаСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	
	ТоварыСуммаСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСкидкаНаТоварПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Ложь;
	ТекущиеДанные.СкидкаСтрокиИзменена = Истина;
	Документы.РеализацияТоваров.ТоварыСкидкаНаТоварПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкидкаНаТоварПриИзменении(Элемент)
	
	ТоварыСкидкаНаТоварПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПроцентСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РеализацияТоваров.ТоварыПроцентСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиПриИзменении(Элемент)
	
	ТоварыПроцентСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПроцентСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.РеализацияТоваров.ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Элемент)
	
	ТоварыПроцентСкидкиСтрокиПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	УправлениеДиалогомДокументаКлиент.ОткрытьПодборПартий(ЭтотОбъект,Элемент);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийПолейТаблицыФормыЗачетАвансов

&НаСервере
Процедура ЗачетАвансовДокументАвансаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.ЗачетАвансов.НайтиПоИдентификатору(Элементы.ЗачетАвансов.ТекущаяСтрока);
	Документы.РеализацияТоваров.ЗачетАвансовДокументАвансаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачетАвансовДокументАвансаПриИзменении(Элемент)
	
	ЗачетАвансовДокументАвансаПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)
	
	ОписаниеОбъекта = Неопределено;
	РежимПросмотраМеток = Ложь;
	
	Если СтрНайти(ЭлементИлиКоманда.Имя, "ОстальныеМетки") = 1 Тогда
		
		Если ЭлементИлиКоманда.Родитель.Имя = "ГруппаМеткиКонтрагента" Тогда
			ОписаниеОбъекта = Объект.Контрагент;
			РежимПросмотраМеток = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеСвойствамиАльфаАвтоКлиент.ВыполнитьКоманду(
		ЭтотОбъект,
		ЭлементИлиКоманда,
		СтандартнаяОбработка,
		ОписаниеОбъекта,
		РежимПросмотраМеток);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура УпущенныйСпрос(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыНоменклатуры = Новый Структура;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ПараметрыНоменклатуры.Вставить("Количество",   ТекущиеДанные.Количество);
		ПараметрыНоменклатуры.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ПараметрыНоменклатуры", ПараметрыНоменклатуры);
	ОткрытьФорму("Обработка.УпущенныйСпрос.Форма", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	ПараметрыДействия = Новый Структура();
	ПараметрыДействия.Вставить("НеРассчитыватьБонусы", Истина);
	
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.АктОбОказанииУслуг")
		ИЛИ Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.РеализацияАгентскихУслуг") Тогда
		
		ПараметрыДействия.Вставить("НеУстанавливатьОтборНаОстаток", Истина);
		
	КонецЕсли;
	
	// Вызываем общий обработчик события
	УправлениеДиалогомКлиент.ОткрытьПодборНоменклатуры(ЭтотОбъект,,,,, ПараметрыДействия);
	
КонецПроцедуры // ПодборНоменклатуры()

&НаКлиенте
Процедура ПодборПоЗаказам(Команда)
	
	Отборы = Новый Соответствие;
	Отборы.Вставить("Контрагент", Объект.Контрагент);
	Отборы.Вставить("СкладКомпании", Объект.СкладКомпании);
	Отборы.Вставить("Заказ.ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	Отборы.Вставить("ЗаказСервиса"               , Ложь);
	
	УправлениеДиалогомКлиент.ОткрытьПодборПоЗаказам(ЭтотОбъект, "РеализацияТоваров.СКД_ПодборПоЗаказам", Отборы, "Резерв");
	
КонецПроцедуры 

&НаКлиенте
Процедура ПодборЗамен(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СвернутьПо", "Номенклатура,ХарактеристикаНоменклатуры");
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ПодборЗаменЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СкладКомпанииОстатки",  Объект.СкладКомпании);
	ПодборТоваровКлиент.ОткрытьПодборЗаменНоменклатуры(ЭтотОбъект, Объект, ПараметрыОткрытия, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслугВидаАренды(Команда)
	
	АрендаАвтомобилейКлиент.ПодборУслугВидаАренды(ЭтотОбъект);
	
КонецПроцедуры

// Маркировка
&НаКлиенте
Процедура ЗапроситьСтатусыКодовМаркировки(Команда)
	
	ИмяДействия = "ОтправкаЗапросаНаПолучениеТекущихСтатусовМаркировки";
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Действие", ИмяДействия);
	ДополнительныеПараметры.Вставить("КодыМаркировки", ЗаполнитьКодыМаркировкиДляПроверки());
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	ДополнительныеПараметры.Вставить("НеТребуетсяКлючСессии", Ложь);
	ДополнительныеПараметры.Вставить("РазрешенныеСостояния", МаркировкаТоваровКлиент.РазрешенныеСостояния());
	ОбработчикОповещения = Новый ОписаниеОповещения("ПолучитьЗапросЗавершение", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ОбработкаРезультата", ОбработчикОповещения);
	
	МаркировкаТоваровКлиент.ОтправитьПолучитьЗапрос(ЭтотОбъект, Объект, ДополнительныеПараметры);
	
КонецПроцедуры
// Конец Маркировка

&НаКлиенте
Процедура ПодборАвансов(Команда)
	
	УправлениеДиалогомКлиент.ОткрытьПодборАвансов(ЭтотОбъект);
	
КонецПроцедуры
// Конец Маркировка

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПоСпискуЗаказанного(АдресРезультата, Событие)
	
	Если Событие <> "ПодборПоСпискуЗаказанного" ИЛИ НЕ ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПодобранныеТовары = ПолучитьИзВременногоХранилища(АдресРезультата);
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодобранныеТовары.Номенклатура КАК Номенклатура,
	|	ПодобранныеТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПодобранныеТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПодобранныеТовары.Заказ КАК Заказ,
	|	ПодобранныеТовары.Количество * ПодобранныеТовары.Коэффициент КАК Количество
	|ПОМЕСТИТЬ ТоварыКДобавлениюСырые
	|ИЗ
	|	&ПодобранныеТовары КАК ПодобранныеТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКДобавлениюСырые.Номенклатура КАК Номенклатура,
	|	ТоварыКДобавлениюСырые.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТоварыКДобавлениюСырые.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыКДобавлениюСырые.Заказ КАК Заказ,
	|	СУММА(ТоварыКДобавлениюСырые.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыКДобавлению
	|ИЗ
	|	ТоварыКДобавлениюСырые КАК ТоварыКДобавлениюСырые
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКДобавлениюСырые.ХарактеристикаНоменклатуры,
	|	ТоварыКДобавлениюСырые.ЕдиницаИзмерения,
	|	ТоварыКДобавлениюСырые.Заказ,
	|	ТоварыКДобавлениюСырые.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.Заказ КАК Заказ,
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток КАК Количество,
	|	ЗаказыПокупателейОстатки.СуммаОстаток КАК Сумма,
	|	ЗаказыПокупателейОстатки.СуммаУпрОстаток КАК СуммаУпр
	|ПОМЕСТИТЬ ДанныеЗаказов
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(
	|			&Момент,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ТоварыКДобавлению.Номенклатура КАК Номенклатура
	|					ИЗ
	|						ТоварыКДобавлению КАК ТоварыКДобавлению)
	|				И ХарактеристикаНоменклатуры В
	|					(ВЫБРАТЬ
	|						ТоварыКДобавлению.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|					ИЗ
	|						ТоварыКДобавлению КАК ТоварыКДобавлению)
	|				И Заказ В
	|					(ВЫБРАТЬ
	|						ТоварыКДобавлению.Заказ КАК Заказ
	|					ИЗ
	|						ТоварыКДобавлению КАК ТоварыКДобавлению)) КАК ЗаказыПокупателейОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКДобавлению.Номенклатура КАК Номенклатура,
	|	ТоварыКДобавлению.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТоварыКДобавлению.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ТоварыКДобавлению.Количество) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ДанныеЗаказов.Количество, 0) = 0
	|				ТОГДА 0
	|			КОГДА ЕСТЬNULL(ДанныеЗаказов.Количество, 0) = ТоварыКДобавлению.Количество
	|				ТОГДА ЕСТЬNULL(ДанныеЗаказов.Сумма, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДанныеЗаказов.Сумма, 0) / ЕСТЬNULL(ДанныеЗаказов.Количество, 0) * ТоварыКДобавлению.Количество
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ДанныеЗаказов.Количество, 0) = 0
	|				ТОГДА 0
	|			КОГДА ЕСТЬNULL(ДанныеЗаказов.Количество, 0) = ТоварыКДобавлению.Количество
	|				ТОГДА ЕСТЬNULL(ДанныеЗаказов.СуммаУпр, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДанныеЗаказов.СуммаУпр, 0) / ЕСТЬNULL(ДанныеЗаказов.Количество, 0) * ТоварыКДобавлению.Количество
	|		КОНЕЦ) КАК СуммаУпр
	|ИЗ
	|	ТоварыКДобавлению КАК ТоварыКДобавлению
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеЗаказов КАК ДанныеЗаказов
	|		ПО ТоварыКДобавлению.Номенклатура = ДанныеЗаказов.Номенклатура
	|			И ТоварыКДобавлению.ХарактеристикаНоменклатуры = ДанныеЗаказов.ХарактеристикаНоменклатуры
	|			И ТоварыКДобавлению.Заказ = ДанныеЗаказов.Заказ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКДобавлению.ЕдиницаИзмерения,
	|	ТоварыКДобавлению.Номенклатура,
	|	ТоварыКДобавлению.ХарактеристикаНоменклатуры");
	Запрос.УстановитьПараметр("ПодобранныеТовары", ПодобранныеТовары);
	Запрос.УстановитьПараметр("Момент", ?(Объект.Ссылка.Пустая(), Неопределено, Новый Граница(Объект.Дата, ВидГраницы.Исключая)));
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаРег = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КурсРег = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(ВалютаРег, Неопределено, Ложь);
	УсловиеПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения");
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("НеРассчитыватьБонусы", Истина);
	ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСумма = Выборка.Сумма;
		
		Если Объект.ВалютаДокумента = ВалютаУпр Тогда
			
			НоваяСумма = Выборка.СуммаУпр;
			
		ИначеЕсли Объект.ВалютаДокумента <> ВалютаРег Тогда
			
			НоваяСумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			Выборка.Сумма, ВалютаРег, КурсРег, Объект.ВалютаДокумента, Объект.КурсДокумента, 2);
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(УсловиеПоиска, Выборка);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(УсловиеПоиска);
		
		Если НайденныеСтроки.Количество() Тогда
			
			НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + Выборка.Количество;
			Документы.РеализацияТоваров.ТоварыКоличествоПриИзменении(Объект, НайденныеСтроки[0], ПараметрыДействия);
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, "Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Количество");
		Документы.РеализацияТоваров.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		НоваяСтрока.СуммаВсего = НоваяСумма;
		Документы.РеализацияТоваров.ТоварыСуммаВсегоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока, ПараметрыДействия);
		
	КонецЦикла;
	
	ПараметрыДействия.Удалить("НеРассчитыватьБонусы");
	Документы.РеализацияТоваров.ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаИзмененияКоличестваКСписанию(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.КоличествоКСписанию <> Результат Тогда
		Объект.КоличествоКСписанию = Результат;
		Модифицированность = Истина;
		ПерерасчетСуммыСкидкиБонусами();
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаИзмененияКоличестваКСписанию()

&НаСервере
Процедура ПерерасчетСуммыСкидкиБонусами()
	
	Документы.РеализацияТоваров.ПерерасчетСуммыСкидкиБонусами(Объект);
	
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(ЭтотОбъект);
	
	СформироватьПредставлениеБонусныхБаллах();
	
КонецПроцедуры // ПерерасчетСуммыСкидкиБонусами()

&НаСервере
Процедура СформироватьПредставлениеБонусныхБаллах()
	
	Элементы.Контрагент.РасширеннаяПодсказка.Заголовок   = "Бонусы: "+Строка(Объект.КоличествоКСписанию)+" / "+Строка(Объект.КоличествоКНачислению);
	
КонецПроцедуры // СформироватьПредставлениеБонусныхБаллах()

&НаСервере
Функция ДисконтнаяКартаЗаблокирована()
	
	Возврат БонусныеПрограммыСервер.ДисконтнаяКартаЗаблокирована(Объект.Карточка);
	
КонецФункции // ДисконтнаяКартаЗаблокирована()

// НачалоБлока: Обработка связанных работ.

&НаСервере
Функция ПодборСвязанныхРаботЗавершениеНаСервере(СвязанныеПозиции)
	
	ПараметрыДействия = СвязанныеРаботы.ЗаполнитьСвязаннымиРаботами(СвязанныеПозиции, Объект, ЭтотОбъект);
	
	ПерерасчетСуммыСкидкиБонусами();
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработка выбора пользователем связанных работ.
//
// Параметры:
//  СвязанныеРаботы - Массив - Выбранные пользователем связанные работы.
//  Постобработка   - Структура - Содержит поля:
//                                  Обработчик - ОписаниеОповещения - Обработчик который необходимо выполнить после
//                                                                    выбора связанных.
//                                  Данные - Произвольный - Данные передаваемые в выполнение обработчика как результат.
//
&НаКлиенте
Процедура Подключаемый_ПодборСвязанныхРаботЗавершение(СвязанныеРаботы, Постобработка=Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СвязанныеРаботы) Тогда
		
		ПараметрыДействия = ПодборСвязанныхРаботЗавершениеНаСервере(СвязанныеРаботы);
		
	КонецЕсли;
	
	СвязанныеРаботыКлиент.Постобработка(Постобработка);
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры // Подключаемый_ПодборСвязанныхРаботЗавершение()

&НаКлиенте
Процедура Подключаемый_ПодборЗаменЗавершение(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаПодбораЗамен(РезультатОповещения, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаПодбораЗамен(Результат, ДополнительныеПараметры=Неопределено)
	
	ЗаменыСервер.ВыполнитьЗаменуТоваровВДокументе(Объект, Результат, Ложь, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьМассуСтрокиТовары(ТекущиеДанные)
	
	Если Элементы.ТоварыМасса.Видимость Тогда
		ТекущиеДанные.Масса = ОбработкаТабличнойЧастиТовары.ПолучитьМассуСтрокиТовары(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры //РассчитатьМассуСтрокиТовары()

&НаСервере
Процедура РассчитатьМассуНоменклатуры()
	
	Если Элементы.ТоварыМасса.Видимость Тогда
		Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
			РассчитатьМассуСтрокиТовары(СтрокаТаблицы);
		КонецЦикла;
		
		ОбработкаТабличнойЧастиТовары.ВывестиОбщуюМассуТоваров(Объект.Товары, ТоварыМассаТекстПодвала, ЕдиницаИзмеренияМассы);
	КонецЕсли;
	
КонецПроцедуры // РассчитатьМассуНоменклатуры()

// Маркировка
&НаКлиенте
Процедура Подключаемый_СканированиеМаркировкиЗавершение(КодМаркировки, ДополнительныеПараметры = Неопределено) Экспорт
	
	МаркировкаТоваровКлиент.ДобавитьКодМаркировки(Объект.КодыМаркировки, КодМаркировки, ДополнительныеПараметры);
	
	// Обновим отображение на форме
	Результат = Новый Структура;
	ОбработкаРезультатаОповещенияНаСервере(Результат, "РазрешенияДляПересчета");
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(Объект, ТекущиеДанные, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаСоответствияКодовМаркировкиПроводилась = Истина;
	ДатаПроверкиКМ = ОбщегоНазначенияКлиент.ДатаСеанса();
	АвторПроверкиКМ = ПользователиКлиент.ТекущийПользователь();
	ЗаполнитьРеквизитыРезультатаПроверкиКМ(Результат.Данные.КодыМаркировки, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыРезультатаПроверкиКМ()
	
	Если НЕ ЭтоАдресВременногоХранилища(КэшРезультатаПроверкиКодовМаркировки) Тогда
		Возврат;
	КонецЕсли;
	
	КэшКодыМаркировки = ПолучитьИзВременногоХранилища(КэшРезультатаПроверкиКодовМаркировки);
	
	ЗаполнитьРеквизитыРезультатаПроверкиКМ(КэшКодыМаркировки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыРезультатаПроверкиКМ(КодыМаркировки, ПроведенаПроверкаВсехКодов = Ложь)
	
	Для Каждого Строка Из КодыМаркировки Цикл
		ПараметрыОтбора = Новый Структура("КодМаркировки", Строка.КодМаркировки);
		НайденныеСтроки = Объект.КодыМаркировки.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], Строка, , "КодМаркировки");
		Если ПроведенаПроверкаВсехКодов Тогда
			НайденныеСтроки[0].ПроверкаСоответствияКодовМаркировкиПроводилась = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из Объект.Товары Цикл
		ПараметрыОтбора = Новый Структура("ИдентификаторТовара", Строка.ИдентификаторТовара);
		КодыМаркировкиСтроки = Объект.КодыМаркировки.НайтиСтроки(ПараметрыОтбора);
		ПроверкаПроводилась = Истина;
		Для Каждого Код Из КодыМаркировкиСтроки Цикл
			Строка.ЕстьРазличияСостоянийКМ = Строка.ЕстьРазличияСостоянийКМ ИЛИ НЕ Код.Соответствует;
			ПроверкаПроводилась = ПроверкаПроводилась И Код.ПроверкаСоответствияКодовМаркировкиПроводилась;
		КонецЦикла;
		Строка.ПроверкаСоответствияКодовМаркировкиПроводилась = ПроверкаПроводилась;
		
	КонецЦикла;
	
КонецПроцедуры

// Конец Маркировка

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЗаполнениеОбъектов
&НаКлиенте
Процедура ПослеОбработкиЗаполнения(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ПослеОбработкиЗаполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиЗаполненияНаСервере()
	
	ЗаполнениеОбъектовАльфаАвто.ПослеОбработкиЗаполнения(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ЗаполнениеОбъектов

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_ДекорацияСостояниеОригиналаНажатие()
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовКлиент.ОткрытьМенюВыбораСостояния(ЭтотОбъект, Элементы.ДекорацияСостояниеОригинала);
	//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКлючевыхРеквизитовСостояниеЭДО()
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	ПараметрыПриИзменении = ОбменСКонтрагентами.ПараметрыПриИзмененииКлючевыхРеквизитовЭДО();
	
	ПараметрыПриИзменении.Форма                  = ЭтотОбъект;
	ПараметрыПриИзменении.ДокументСсылка         = Объект.Ссылка;
	ПараметрыПриИзменении.ДокументОбъект         = РеквизитФормыВЗначение("Объект");
	ПараметрыПриИзменении.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПриИзменении.ГруппаСостояниеЭДО     = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПриИзмененииКлючевыхРеквизитовЭДО(ПараметрыПриИзменении);
	
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСуммаДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.ПоказатьРасширенныеИтогиОперации(ЭтотОбъект, Элемент);
	
КонецПроцедуры
// Конец Ядро

// СчетаФактуры
&НаКлиенте
Процедура НадписьНалоговыйДокументНажатие(Элемент)
	
	УправлениеДиалогомДокументаКлиент.НадписьНалоговыйДокументНажатие(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВзаиморасчетыНажатие(Элемент)
	
	УправлениеДиалогомДокументаКлиент.НадписьВзаиморасчетыНажатие(ЭтотОбъект);
	
КонецПроцедуры
// Конец СчетаФактуры

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// Вызываем общий обработчик события настройки параметров выбора
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	// Запретим использование розничного склада при поступлении товаров на комиссию
	Если Не Элементы.Найти("СкладКомпании") = Неопределено Тогда
		Если Объект.ХозОперация = Справочники.ХозОперации.РеализацияТоваровКомиссия Тогда
			УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.СкладКомпании.ПараметрыВыбора, "Отбор.Розничный", Ложь);
		Иначе
			УправлениеДиалогомСервер.УдалитьПараметрВыбора(Элементы.СкладКомпании.ПараметрыВыбора, "Отбор.Розничный");
		КонецЕсли;
	КонецЕсли;
	
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораНоменклатурыДляКомиссионныхДокументов(ЭтотОбъект);
	УправлениеДиалогомДокументаСервер.РасставитьСвязиПараметровВыбораДокументовАванса(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	ЭтоРеализацияАгентскихУслуг = Объект.ХозОперация = Справочники.ХозОперации.РеализацияАгентскихУслуг;
	ЭтоАктОбОказанииУслуг       = Объект.ХозОперация = Справочники.ХозОперации.АктОбОказанииУслуг;
	ВыборочноеСписаниеПартий = ПраваИНастройкиПользователя.Значение("ВыборочноеСписаниеПартий", Объект);
	
	// шапка
	Элементы.СкладКомпании.Доступность    = НЕ(ЭтоРеализацияАгентскихУслуг ИЛИ ЭтоАктОбОказанииУслуг);
	Элементы.ДоговорКомитента.Видимость   = ЭтоРеализацияАгентскихУслуг;
	
	// Настроим видимость элементов для хозоперации
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.РеализацияАгентскихУслуг") Тогда
		Элементы.СкладКомпании.Видимость = Ложь;
		Элементы.Комитент.Видимость      = Истина;
	Иначе
		Элементы.СкладКомпании.Видимость = Истина;
		Элементы.Комитент.Видимость      = Ложь;
	КонецЕсли;
	
	// Установим видимость реквизитов "Партия" и "ГТД"
	Элементы.ТоварыПартия.Видимость = НЕ(ЭтоРеализацияАгентскихУслуг ИЛИ ЭтоАктОбОказанииУслуг) 
		И (ВыборочноеСписаниеПартий И ПраваИНастройкиПользователя.Значение("ВыборочноеСписаниеПартий", Объект));
		
	Элементы.ТоварыГТД.Видимость    = Элементы.ТоварыПартия.Видимость;
	
	// колонки ТЧ
	Элементы.ТоварыСтатьяДоходов.Видимость = ЭтоРеализацияАгентскихУслуг ИЛИ ЭтоАктОбОказанииУслуг;
	Элементы.ТоварыЯчейка.Видимость        = Элементы.ТоварыЯчейка.Видимость И НЕ(ЭтоРеализацияАгентскихУслуг ИЛИ ЭтоАктОбОказанииУслуг);
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.АктОбОказанииУслуг")
		ИЛИ Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.РеализацияАгентскихУслуг") Тогда
		Элементы.ТоварыСуммаСписания.Видимость   = Ложь;
		Элементы.ТоварыОстатокНаСкладе.Видимость = Ложь;
		Элементы.ТоварыМасса.Видимость = Ложь;
	Иначе
		Элементы.ТоварыОстатокНаСкладе.Видимость = Истина;
		Элементы.ТоварыМасса.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ТоварыУпущенныйСпрос.Видимость = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.УпущенныйСпрос);
	
	// Сформируем информацию об автомобиле
	Элементы.АвтомобильРасширеннаяПодсказка.Заголовок = Справочники.Автомобили.СформироватьИнформациюАвтомобиля(Объект);
	
	// Проверим вывод возможность вывода информации по бонусным баллам
	СформироватьПредставлениеБонусныхБаллах();
	Элементы.Контрагент.ОтображениеПодсказки = ?(ЗначениеЗаполнено(Объект.Карточка.БонуснаяПрограмма), ОтображениеПодсказки.ОтображатьСнизу, ОтображениеПодсказки.Нет);
	
	// Акт услуг аренды
	ЭтоАктУслугАренды =
		(Объект.ХозОперация = Справочники.ХозОперации.АктОбОказанииУслуг
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ДоговорАренды")
		И ЗначениеЗаполнено(Объект.ДокументОснование));
	Элементы.ТоварыПодборУслугВидаАренды.Видимость = ЭтоАктУслугАренды;
	
	СпособВыбораСкидки = ПравоПользователя("СпособВыбораСкидки", Объект);
	ДоступныСкидки = СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидки
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.АвтоматическиеИРучныеСкидки
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов;
	ДоступноРедактированиеСкидок = СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыПроцентСкидки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСуммаСкидки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСкидкаНаТовар",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступныСкидки
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыПроцентСкидкиСтроки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСуммаСкидкиСтроки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПричинаВыводаИзОборота",
		"Видимость",
		ИспользоватьОбменЭД
	);
	
КонецПроцедуры // УправлениеДиалогомНаСервере()

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	
	// Маркировка
	МаркировкаТоваровСервер.УстановитьУсловноеОформлениеКодыМаркировок(ЭтотОбъект);
	// Конец Маркировка
	
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеРучногоСписанияХарактеристик(ЭтотОбъект);
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеСуммыВсего(ЭтотОбъект);
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеСодержаниеУслуги(ЭтотОбъект); 
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеЗапретРедактированияЯчейкиУслуги(ЭтотОбъект);
	
	СкидкиНаценкиСервер.УстановитьУсловноеОформление(
		ЭтотОбъект,
		СкидкиНаценкиСервер.ПараметрыУстановкиУсловногоОформления(ЭтотОбъект)
	);
	
	УстановитьУсловноеОформлениеЗапретРедактированияСуммы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеЗапретРедактированияСуммы()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТоварыСуммаВсегоТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоСпискуЗаказанного(РезультатОповещения, ДополнительныеПараметры);
	
	// Заполним скидками по бонусам
	Если (ДополнительныеПараметры = "ПараметрыДокумента" И РезультатОповещения.ИзмененныеРеквизиты.Свойство("Дата"))
		ИЛИ ДополнительныеПараметры = "ПодборНоменклатуры" Тогда
		
		ПерерасчетСуммыСкидкиБонусами();
		
	КонецЕсли;
	
	Если ДополнительныеПараметры = "РедактированиеКодовМаркировкиСтрокиТовара" Тогда
		ПроверкаСоответствияКодовМаркировкиПроводилась = Истина;
		Для Каждого Строка Из Объект.Товары Цикл
			ПроверкаСоответствияКодовМаркировкиПроводилась = ПроверкаСоответствияКодовМаркировкиПроводилась
				И Строка.ПроверкаСоответствияКодовМаркировкиПроводилась;
		КонецЦикла;
	КонецЕсли;
	
	РассчитатьМассуНоменклатуры();
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если НЕ УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "НеобходимоПерезаполнитьЗаказчика", Ложь) Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			АвтомобильПриИзмененииНаСервере(ДополнительныеПараметры);
		КонецЕсли;
		Возврат;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "НеобходимоПерезаполнитьАвтомобиль", Ложь) Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			Объект.Автомобиль = ПредопределенноеЗначение("Справочник.Автомобили.ПустаяСсылка");
			КонтрагентПриИзмененииНаСервере(ДополнительныеПараметры);
			АвтомобильПриИзменении(Неопределено);
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьДоступностьЖалобы()
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЖалобаКлиента) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ФормаДокументЖалобаКлиентаСоздатьНаОсновании",
			"Видимость",
			Константы.ИспользоватьЖалобы.Получить()
		);	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ЗаполнитьКодыМаркировкиДляПроверки()
	
	Результат = Новый Массив;
	Для Каждого Строка Из Объект.Товары Цикл
		ПараметрыОтбора = Новый Структура("ИдентификаторТовара", Строка.ИдентификаторТовара);
		НайденныеСтроки = Объект.КодыМаркировки.НайтиСтроки(ПараметрыОтбора);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Результат.Добавить(НайденнаяСтрока.КодМаркировки);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект, РезультатОповещения);
	
	Если
		ТипЗнч(РезультатОповещения) = Тип("Структура")
		И РезультатОповещения.Свойство("ИзмененныеРеквизиты")
		И ТипЗнч(РезультатОповещения.ИзмененныеРеквизиты) = Тип("Структура")
		И РезультатОповещения.ИзмененныеРеквизиты.Свойство("Организация")
	Тогда
		
		ПриИзмененииКлючевыхРеквизитовСостояниеЭДО();
		
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРеквизитыПечатиНажатие(Элемент)
	
	УправлениеПечатьюКлиентАльфаАвто.ОткрытьФормуРедактированияРеквизитовДоставки(ЭтотОбъект); 
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура Подключаемый_ШтрихкодированиеОбработкаОповещения(РезультатОповещения,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если РезультатОповещения.Свойство("Действие") Тогда
		ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ШтрихкодированиеВызовСервера.ОбработкаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры, , Объект);
    УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область УтверждениеДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуУтверждения(Команда)
	
	УтверждениеДокументовКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект.Ссылка);
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбработкуКомандыУтвержденияНаСервере(ПараметрыОбработки,
		ДополнительныеПараметры) Экспорт
	
	ОбработкаКомандыУтвержденияНаСервере(ПараметрыОбработки, ДополнительныеПараметры);
	Оповестить("ПослеУтвержденияДокументов", Объект.Ссылка, ИмяФормы);
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаКомандыУтвержденияНаСервере(ПараметрыОбработки, ДополнительныеПараметры)
	
	УтверждениеДокументовВызовСервера.ОбработкаКомандыФормы(ЭтотОбъект, ПараметрыОбработки.ИмяКоманды, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыУтвержденияДокументов()
	
	ОбновитьКомандыУтвержденияДокументовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыУтвержденияДокументовНаСервере()
	
	УтверждениеДокументовКлиентСервер.УстановитьДоступностьКнопокУтверждения(ЭтотОбъект, Объект, ТолькоПросмотр);
	УтверждениеДокументовВызовСервера.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, Объект, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ОбновитьЗаголовокНадписиНалоговыйДокумент(РезультатОповещения, ДополнительныеПараметры) Экспорт
	
	ОбновитьЗаголовокНадписиНалоговыйДокументНаСервере();
	
КонецПроцедуры

Процедура ОбновитьЗаголовокНадписиНалоговыйДокументНаСервере()
	
	РаботаСФормойВызовСервера.ОбновитьЗаголовокНадписиНалоговыйДокумент(ЭтотОбъект, Объект);
	
КонецПроцедуры

#КонецОбласти

