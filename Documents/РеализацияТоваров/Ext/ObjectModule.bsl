// Модуль объекта документа "Реализация товаров"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	// Если вводится на основании события
	Если ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "Имя") = "Событие" Тогда
		ДанныеЗаполненияКопия = ДанныеЗаполнения;
		ДанныеЗаполнения = ДанныеЗаполнения.Событие;
	КонецЕсли;	
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("РабочийЛистОтделаСтрахования")
		И ДанныеЗаполнения.Свойство("Страховщик") Тогда
		
		ЭтотОбъект.ДополнительныеСвойства.Вставить("Страховщик", ДанныеЗаполнения.Страховщик);
		Заполнить(ДанныеЗаполнения.РабочийЛистОтделаСтрахования);
		Возврат;
		
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;     
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
	// если ввели на основании, но при этом не заполнили ставки НДС, то исправимся
	Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
			Документы.РеализацияТоваров.ТоварыСтавкаНДСПриИзменении(ЭтотОбъект, СтрокаТабличнойЧасти, ДополнительныеСвойства.ПараметрыДействия);
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнить контрагента из события
	ДанныеЗаполненияКонтрагент = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполненияКопия, "Контрагент");
	Если ДанныеЗаполненияКонтрагент <> Неопределено Тогда
		Контрагент = ДанныеЗаполненияКонтрагент;
		Документы.РеализацияТоваров.КонтрагентПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	ИдентификаторГосударственногоКонтракта = ?(ЗначениеЗаполнено(ИдентификаторГосударственногоКонтракта),
		ИдентификаторГосударственногоКонтракта,
		ДоговорВзаиморасчетов.ИдентификаторГосударственногоКонтракта);
	
	// Заполним доп. поля
	Для Каждого ТекущаяСтрока Из Товары Цикл
		Если ПустаяСтрока(ТекущаяСтрока.ИдентификаторТовара) Тогда
			ТекущаяСтрока.ИдентификаторТовара = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
	ЗачетАвансов.Очистить();
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	КодыМаркировки.Очистить();
	ЗачетАвансов.Очистить();
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Предварительно проверим ТЧ Коды маркировки
	МаркировкаТоваровСервер.ПроверкаКодовМаркировкиПередЗаписью(ЭтотОбъект);
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим параметры запрета для номенклатуры
	Отказ = Отказ ИЛИ ПроверитьПараметрыЗапретаВыбораНоменклатуры();
	
	Отказ = Отказ ИЛИ ОбработкаСобытийДокументаСервер.ПроверитьКорректностьРеализацииПодакцизныхТоваров(ЭтотОбъект);
	
	// Проверим заполнение ТЧ Коды маркировки
	МаркировкаТоваровСервер.ПроверитьЗаполнениеКодовМаркировки(ЭтотОбъект, Отказ, , , Истина);
	
	ОбработкаСобытийДокументаСервер.ПроверитьКорректностьТоваровКомиссионныхДокументов(ЭтотОбъект, Отказ);
	
	// Проверим заполнение РНПТ у послеживаемого товара
	УчетПрослеживаемыхТоваровСервер.ПроверитьЗаполнениеРНПТПрослеживаемогоТовара(ЭтотОбъект);
	Отказ = Отказ Или Справочники
		.ДоговорыВзаиморасчетов
		.НеКорректноЗаполненИдентификаторГосКонтракта(ЭтотОбъект, ИдентификаторГосударственногоКонтракта);
	
	РасчетыСКонтрагентамиСервер.ПроверитьКорректностьЗачетаАвансов(ЭтотОбъект, Отказ);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Для Каждого Строка Из Товары Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.КоличествоБазовое) Тогда
			
			Строка.КоличествоБазовое = Строка.Количество * Строка.Коэффициент;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Если
		ХозОперация = Справочники.ХозОперации.АктОбОказанииУслуг
		Или ХозОперация = Справочники.ХозОперации.РеализацияАгентскихУслуг
	Тогда
		
		СкладКомпании = Справочники.СкладыКомпании.ПустаяСсылка();
		
	Иначе
		
		ПустаяСтатьяДоходов = Справочники.СтатьиДоходовИРасходов.ПустаяСсылка();
		
		Для Каждого ТекСтрока Из Товары Цикл
			
			ТекСтрока.СтатьяДоходов = ПустаяСтатьяДоходов;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЭтоУниверсальныйДокумент = ЭтоУниверсальныйДокумент
		И Документы.РеализацияТоваров.ВозможенВводСчетФактурыВыданной(ЭтотОбъект);
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоЗаказамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПартиямПередПроведением(Ссылка, ДополнительныеСвойства);
	
	Если
		БонусныеПрограммыСервер.ДисконтнаяКартаЗаблокирована(Карточка)
		И (
			ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ПроверятьБлокировкуКарты", Ложь)
			Или КоличествоКНачислению = 0
		)
	Тогда
		
		КоличествоКНачислению = 0;
		
	Иначе
		
		БонусныеПрограммыСервер.РассчитатьБонусныеБаллыКНачислению(ЭтотОбъект, Карточка.БонуснаяПрограмма);
		
	КонецЕсли;
	
	Если ХозОперация = Справочники.ХозОперации.РеализацияТоваровКомиссия Тогда
		
		ОбработкаСобытийДокументаСервер.ПроверитьКорректностьТоваровКомиссионныхДокументов(ЭтотОбъект, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Удалим введенные в оборот коды маркировки
	НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
	НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейСостоянияКодовМаркировки.ОтменаПроведения();
	
	ОбработкаСобытийДокументаСервер.ЗаполнитьРеквизитыСуммСписанияВДокументе(ЭтотОбъект, Отказ, "", Истина);
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ТипСчетФактуры", "СчетФактураВыданный");
	ОбработкаСобытийДокументаСервер.УдалитьПодчиненныеСФ(ЭтотОбъект, ПараметрыДействия, Отказ);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// определим необходимость формирования корректирующих проводок
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(Дата);
	
	// проведем взаиморасчеты
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	ДополнительныеСвойства.Вставить(
		"СпособУчетаВзаиморасчетовПоРасчетнымДокументам",
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам);
	Если ХозОперация <> Справочники.ХозОперации.РеализацияТоваровКомиссия
		И Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		НаборЗаписейВзаиморасчеты=Движения.ВзаиморасчетыКомпании;
		НаборЗаписейВзаиморасчеты.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейВзаиморасчеты.РежимПроведения=РежимПроведения;
		НаборЗаписейВзаиморасчеты.Контрагент=Контрагент;
		НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов=ДоговорВзаиморасчетов;
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			НаборЗаписейВзаиморасчеты.Сделка=ДокументОснование;
		Иначе
			НаборЗаписейВзаиморасчеты.Сделка=Неопределено;
		КонецЕсли;
		НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок = СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем=Истина;
		НаборЗаписейВзаиморасчеты.Сумма=Товары.Итог("СуммаВсего");
		НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц=0;
		Отказ = НЕ НаборЗаписейВзаиморасчеты.Приход() ИЛИ Отказ;
		// доходы и расходы по суммовым разницам
		СуммаДоходаРасходаСуммовыхРазниц=НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
		Если СуммаДоходаРасходаСуммовыхРазниц<>0 Тогда
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
			Если ВедетсяБалансПоПодразделению Тогда
				НаборЗаписейДиР.Подразделение  = ДоговорВзаиморасчетов.ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
			НаборЗаписейДиР.ВУпрВалюте = Истина;
			Если СуммаДоходаРасходаСуммовыхРазниц<0 Тогда
				НаборЗаписейДиР.Расход = -СуммаДоходаРасходаСуммовыхРазниц;
			Иначе
				НаборЗаписейДиР.Доход = СуммаДоходаРасходаСуммовыхРазниц;
			КонецЕсли;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ИзменятьЗаказы") И ДополнительныеСвойства.ИзменятьЗаказы Тогда
		
		// Закрываем заказы покупателя по FIFO
		ТекстЗапроса=
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ДокументТовары.КоличествоБазовое КАК Количество,
		|	ДокументТовары.Цена КАК ЦенаРозничная,
		|	0 КАК Резерв,
		|	ДокументТовары.СуммаВсего КАК Сумма
		|ИЗ
		|	Документ.РеализацияТоваров.Товары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Ссылка=&Ссылка И ДокументТовары.Номенклатура.ВидНоменклатуры<>&Услуга";
		Запрос=Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.УстановитьПараметр("Услуга",Перечисления.ВидыНоменклатуры.Услуга);
		// Закрываем заказы
		НаборЗаписейЗаказыПокупателей = Движения.ЗаказыПокупателей;
		НаборЗаписейЗаказыПокупателей.РежимПроведения = РежимПроведения;
		НаборЗаписейЗаказыПокупателей.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейЗаказыПокупателей.РезультатЗапросаПоТоварам = Запрос.Выполнить();
		НаборЗаписейЗаказыПокупателей.Контрагент = Контрагент;
		НаборЗаписейЗаказыПокупателей.Заказ = Неопределено;
		НаборЗаписейЗаказыПокупателей.СкладКомпании = СкладКомпании;
		НаборЗаписейЗаказыПокупателей.Заказывать = Истина;
		НаборЗаписейЗаказыПокупателей.Резервировать = Истина;
		НаборЗаписейЗаказыПокупателей.ПоБазовомуКоличеству=Истина;
		Отказ=НЕ НаборЗаписейЗаказыПокупателей.ЗакрытиеЗаказовПокупателя() ИЛИ Отказ;
		// Если было списание резервов, то таблица товаров содержит списанные резервы.
		РезультатЗапросаПоТоварам=НаборЗаписейЗаказыПокупателей.РезультатЗапросаПоТоварам;
		
		// Снимаем распределение заказов покупателя
		РезультатЗакрытияЗаказов=НаборЗаписейЗаказыПокупателей.Выгрузить();
		КолонкаКоличества=РезультатЗакрытияЗаказов.Колонки.Найти("Заказано");
		КолонкаКоличества.Имя="Количество"; КолонкаКоличества.Заголовок="Количество";
		РезультатЗакрытияЗаказов.Свернуть("Заказ,Контрагент,Номенклатура,ХарактеристикаНоменклатуры","Количество,Резерв");
		Для каждого СтрокаЗаказа Из РезультатЗакрытияЗаказов Цикл
			СтрокаЗаказа.Количество=-(СтрокаЗаказа.Количество-СтрокаЗаказа.Резерв);
		КонецЦикла; 
		НаборЗаписейРаспределениеЗаказов = Движения.ЗаказыРаспределение;
		НаборЗаписейРаспределениеЗаказов.РежимПроведения = РежимПроведения;
		НаборЗаписейРаспределениеЗаказов.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейРаспределениеЗаказов.РезультатЗапросаПоТоварам = РезультатЗакрытияЗаказов;
		НаборЗаписейРаспределениеЗаказов.ЗаказПокупателя = "Заказ";
		НаборЗаписейРаспределениеЗаказов.ЗаказПоставщика = Неопределено;
		НаборЗаписейРаспределениеЗаказов.Контрагент = Контрагент;
		НаборЗаписейРаспределениеЗаказов.ПоБазовомуКоличеству=Истина;
		Отказ=НЕ НаборЗаписейРаспределениеЗаказов.КорректировкаРаспределения() ИЛИ Отказ;
		
	КонецЕсли;
	
	Документы.РеализацияТоваров.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	
	Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		Документы.РеализацияТоваров.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
		УсловиеОтбора = Новый Структура;
		УсловиеОтбора.Вставить("ТипРасчета", Перечисления.ТипыРасчетов.Оплата);
		УсловиеОтбора.Вставить("ВидДвижения", ВидДвиженияНакопления.Приход);
		СуммыПоРасчетамСКонтрагентом = РасчетыСКонтрагентамиСервер.СуммовыеПоказателиРасчетаСКонтрагентами(
			ДополнительныеСвойства.ТаблицыДвиженийДокумента.РасчетыСКонтрагентами,
			УсловиеОтбора);
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВУпрВалюте = (ВалютаДокумента = ВалютаУпр);
	ДоходыИРасходыВУпрВалюте = СпособУчетаВзаиморасчетовПоРасчетнымДокументам ИЛИ ВУпрВалюте;
	
	// Делаем расход по складу
	Если ХозОперация=Справочники.ХозОперации.АктОбОказанииУслуг Тогда
		// проведем услуги по доходам и расходам
		Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
							|	ВЫБОР
							|		КОГДА РеализацияТоваровТовары.СтатьяДоходов = ЗНАЧЕНИЕ(Справочник.СтатьиДоходовИРасходов.ПустаяСсылка) ТОГДА
							|			РеализацияТоваровТовары.Номенклатура.СтатьяДопРасходов
							|		ИНАЧЕ
							|			РеализацияТоваровТовары.СтатьяДоходов
							|	КОНЕЦ КАК СтатьяРасходов,
							|	СУММА(РеализацияТоваровТовары.СуммаВсего) КАК СуммаУслуг
							|ИЗ
							|	Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
							|ГДЕ
							|	РеализацияТоваровТовары.Ссылка = &ТекДок
							|	И РеализацияТоваровТовары.Номенклатура.ВидНоменклатуры = &Услуга
							|СГРУППИРОВАТЬ ПО
							|	ВЫБОР
							|		КОГДА РеализацияТоваровТовары.СтатьяДоходов = ЗНАЧЕНИЕ(Справочник.СтатьиДоходовИРасходов.ПустаяСсылка) ТОГДА
							|			РеализацияТоваровТовары.Номенклатура.СтатьяДопРасходов
							|		ИНАЧЕ
							|			РеализацияТоваровТовары.СтатьяДоходов
							|	КОНЕЦ");
		Запрос.УстановитьПараметр("ТекДок", Ссылка);
		Запрос.УстановитьПараметр("Услуга", Перечисления.ВидыНоменклатуры.Услуга);
		УслугиДокумента=Запрос.Выполнить().Выгрузить();
		Если Не ВУпрВалюте И СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
			
			РасчетыСКонтрагентамиСервер.РаспределитьСуммыПоЧастиТабличнойЧастиДокумента(
				УслугиДокумента,
				СуммыПоРасчетамСКонтрагентом.СуммаУпр,
				СуммаДокумента,
				"СуммаУслуг");
			
		КонецЕсли;
		
		СуммаУслуг = 0;
		Для Каждого СтрокаУслуг Из УслугиДокумента Цикл
			НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте             = ДоходыИРасходыВУпрВалюте;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = СтрокаУслуг.СтатьяРасходов;
			НаборЗаписейДоходыИРасходы.Доход                  = СтрокаУслуг.СуммаУслуг;
			СуммаУслуг = СуммаУслуг + СтрокаУслуг.СуммаУслуг;
			Отказ = (НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ);
		КонецЦикла;

		ПодразделениеПодразделениеКомпании = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ПодразделениеКомпании, Дата);
		ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ДоговорВзаиморасчетов.ПодразделениеКомпании, Дата);
		БалансовыеПодразделенияНеРавны = (ПодразделениеДоговорВзаиморасчетов<>ПодразделениеПодразделениеКомпании);
		
		// Если балансовые подразделение договора и подразделения склад не равны, то сформируем корректирующие проводки.
		Если ВедетсяБалансПоПодразделению И БалансовыеПодразделенияНеРавны Тогда
			НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.Подразделение=ДоговорВзаиморасчетов.ПодразделениеКомпании;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте = СпособУчетаВзаиморасчетовПоРасчетнымДокументам;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДоходыИРасходы.Доход=СуммаУслуг;
			Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
			
			НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.Подразделение=ПодразделениеКомпании;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте = ДоходыИРасходыВУпрВалюте;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДоходыИРасходы.Расход=СуммаУслуг;
			Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		КонецЕсли;
		
		// продажи
		Если НЕ Отказ Тогда
			
			// проверяем, присутствуют ли партии в табличной части
			ЕстьПартии = Ложь;
			Для Каждого СтрокаТовар Из Товары Цикл
				Если ЗначениеЗаполнено(СтрокаТовар.Партия) Тогда
					ЕстьПартии = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			
			// получим шапку документа
			
			ШапкаДокумента=ПолучитьШапкуДокумента(Ссылка);
			
			ЕстьАвтомобильАренды = ТипЗнч(ШапкаДокумента.ДокументОснование) = Тип("ДокументСсылка.ДоговорАренды");
			
			НаборЗаписейПродажи=Движения.Продажи;
			НаборЗаписейПродажи.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейПродажи.СкладКомпании=ШапкаДокумента.СкладКомпании;
			НаборЗаписейПродажи.ДокументПродажи=ШапкаДокумента.ДокументПродажи;
			НаборЗаписейПродажи.Сторно=Ложь;
			НаборЗаписейПродажи.ЕстьАвтомобильАренды = ЕстьАвтомобильАренды;
			НаборЗаписейПродажи.Покупатель=ШапкаДокумента.Контрагент;
			НаборЗаписейПродажи.РезультатЗапросаПоТоварам=Неопределено;
			НаборЗаписейПродажи.ДоговорВзаиморасчетов=ШапкаДокумента.ДоговорВзаиморасчетов;
			НаборЗаписейПродажи.ПодразделениеКомпании=ШапкаДокумента.ПодразделениеКомпании;
			НаборЗаписейПродажи.ИмяРеквизитаДокумент = ?(ЕстьПартии, "Партия","");
			НаборЗаписейПродажи.Комиссия=Ложь;
			НаборЗаписейПродажи.ПоБазовомуКоличеству=Истина;
			НаборЗаписейПродажи.ШапкаДокумента=ШапкаДокумента;
			Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
				НаборЗаписейПродажи.РасчетыСКонтрагентами = ДополнительныеСвойства.ТаблицыДвиженийДокумента.РасчетыСКонтрагентами;
			КонецЕсли;
			Отказ=НЕ НаборЗаписейПродажи.Приход() ИЛИ Отказ;
		КонецЕсли;

	ИначеЕсли ХозОперация=Справочники.ХозОперации.РеализацияАгентскихУслуг Тогда
		ШапкаДокумента					= ПолучитьШапкуДокумента(Ссылка);
		
		// проведем услуги по доходам и расходам
		Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
							|	ВЫБОР
							|		КОГДА РеализацияТоваровТовары.СтатьяДоходов = ЗНАЧЕНИЕ(Справочник.СтатьиДоходовИРасходов.ПустаяСсылка) ТОГДА
							|			РеализацияТоваровТовары.Номенклатура.СтатьяДопРасходов
							|		ИНАЧЕ
							|			РеализацияТоваровТовары.СтатьяДоходов
							|	КОНЕЦ КАК СтатьяРасходов,
							|	СУММА(РеализацияТоваровТовары.СуммаВсего) КАК СуммаУслуг,
							|	СУММА(РеализацияТоваровТовары.СуммаСкидки+РеализацияТоваровТовары.СуммаСкидкиСтроки) КАК СуммаСкидок
							|ИЗ
							|	Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
							|ГДЕ
							|	РеализацияТоваровТовары.Ссылка = &ТекДок
							|	И РеализацияТоваровТовары.Номенклатура.ВидНоменклатуры = &Услуга
							|СГРУППИРОВАТЬ ПО
							|	ВЫБОР
							|		КОГДА РеализацияТоваровТовары.СтатьяДоходов = ЗНАЧЕНИЕ(Справочник.СтатьиДоходовИРасходов.ПустаяСсылка) ТОГДА
							|			РеализацияТоваровТовары.Номенклатура.СтатьяДопРасходов
							|		ИНАЧЕ
							|			РеализацияТоваровТовары.СтатьяДоходов
							|	КОНЕЦ");
		Запрос.УстановитьПараметр("ТекДок", Ссылка);
		Запрос.УстановитьПараметр("Услуга", Перечисления.ВидыНоменклатуры.Услуга);
		УслугиДокумента = Запрос.Выполнить().Выгрузить(); 
		Если Не ВУпрВалюте И СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
			
			РасчетыСКонтрагентамиСервер.РаспределитьСуммыПоЧастиТабличнойЧастиДокумента(
				УслугиДокумента,
				СуммыПоРасчетамСКонтрагентом.СуммаУпр,
				СуммаДокумента,
				"СуммаУслуг");
			
		КонецЕсли;
		СуммаУслуг 	= 0;
		Для Каждого СтрокаУслуг Из УслугиДокумента Цикл
			
			Если (ВУпрВалюте И СпособУчетаВзаиморасчетовПоРасчетнымДокументам)
				ИЛИ Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
				СуммаУслугСоСкидками = СтрокаУслуг.СуммаУслуг + СтрокаУслуг.СуммаСкидок;
			Иначе
				СуммаУслугСоСкидками = СтрокаУслуг.СуммаУслуг
					+ Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
						СтрокаУслуг.СуммаСкидок,
						ШапкаДокумента.ВалютаДокумента,
						ШапкаДокумента.КурсДокумента,
						ВалютаУпр,
						?(НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр),
							ШапкаДокумента.Дата,
							ШапкаДокумента.КурсВалютыУпр)),
						2);
			КонецЕсли;
					
			
			НаборЗаписейДоходыИРасходы							= Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект			= ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов	= Справочники.СтатьиДоходовИРасходов.Себестоимость;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте				= ДоходыИРасходыВУпрВалюте;
			НаборЗаписейДоходыИРасходы.Доход					= СуммаУслугСоСкидками;	
			НаборЗаписейДоходыИРасходы.ШапкаДокумента			= ШапкаДокумента;
			Отказ	= НЕ НаборЗаписейДоходыИРасходы.Расход() ИЛИ Отказ;			
			
			НаборЗаписейДоходыИРасходы							= Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект			= ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте				= ДоходыИРасходыВУпрВалюте;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов	= СтрокаУслуг.СтатьяРасходов;
			НаборЗаписейДоходыИРасходы.Доход					= СтрокаУслуг.СуммаУслуг;
			СуммаУслуг		= СуммаУслуг + СтрокаУслуг.СуммаУслуг;
			Отказ = (НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ);
		КонецЦикла;

		ПодразделениеПодразделениеКомпании = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ПодразделениеКомпании, Дата);
		ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ДоговорВзаиморасчетов.ПодразделениеКомпании, Дата);
		БалансовыеПодразделенияНеРавны = (ПодразделениеДоговорВзаиморасчетов<>ПодразделениеПодразделениеКомпании);
		
		// Если балансовые подразделение договора и подразделения склад не равны, то сформируем корректирующие проводки.
		Если ВедетсяБалансПоПодразделению И БалансовыеПодразделенияНеРавны Тогда
			НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.Подразделение=ДоговорВзаиморасчетов.ПодразделениеКомпании;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте = СпособУчетаВзаиморасчетовПоРасчетнымДокументам;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДоходыИРасходы.Доход=СуммаУслуг;
			Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
			
			НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.Подразделение=ПодразделениеКомпании;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте = ДоходыИРасходыВУпрВалюте;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДоходыИРасходы.Расход=СуммаУслуг;
			Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		КонецЕсли;		
		
		// продажи
		НаборЗаписейПродажи							= Движения.Продажи;
		НаборЗаписейПродажи.ДокументОбъект			= ЭтотОбъект;
		НаборЗаписейПродажи.СкладКомпании			= ШапкаДокумента.СкладКомпании;
		НаборЗаписейПродажи.ДокументПродажи			= ШапкаДокумента.ДокументПродажи;
		НаборЗаписейПродажи.Сторно					= Ложь;
		НаборЗаписейПродажи.Покупатель				= ШапкаДокумента.Контрагент;
		НаборЗаписейПродажи.РезультатЗапросаПоТоварам	= Неопределено;
		НаборЗаписейПродажи.ДоговорВзаиморасчетов	= ШапкаДокумента.ДоговорВзаиморасчетов;
		НаборЗаписейПродажи.ПодразделениеКомпании	= ШапкаДокумента.ПодразделениеКомпании;
		НаборЗаписейПродажи.ИмяРеквизитаДокумент	= "";
		НаборЗаписейПродажи.Комиссия					= Ложь;
		НаборЗаписейПродажи.ПоБазовомуКоличеству	= Истина;
		НаборЗаписейПродажи.ШапкаДокумента			= ШапкаДокумента;
		Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
			НаборЗаписейПродажи.РасчетыСКонтрагентами = ДополнительныеСвойства.ТаблицыДвиженийДокумента.РасчетыСКонтрагентами;
		КонецЕсли;
		Отказ=НЕ НаборЗаписейПродажи.Приход() ИЛИ Отказ;		
		
		// Реализованные товары		
		НаборЗаписейРеализованныеТовары	= Движения.РеализованныеТовары;
		
		ВалютаРегл		= Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		СтруктураКурса	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл,ШапкаДокумента.Дата);
		КурсРегл		= СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		ВалютаУпр		= Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		Если НЕ ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр) Тогда
			СтруктураКурса	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр,ШапкаДокумента.Дата);
			КурсУпр			= СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		Иначе
			КурсУпр			= ШапкаДокумента.КурсВалютыУпр;
		КонецЕсли;

		ТекстЗапросаПоУслугам	= "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                     	  |	ДокТовары.Номенклатура КАК Номенклатура,
		                     	  |	ДокТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		                     	  |	СУММА(ДокТовары.КоличествоБазовое) КАК Количество,
		                     	  |	СУММА(ДокТовары.СуммаСкидки) КАК СуммаСкидки,
		                     	  |	СУММА(ДокТовары.СуммаСкидкиСтроки) КАК СуммаСкидкиСтроки,
		                     	  |	СУММА(ДокТовары.СуммаВсего) КАК СуммаПродажи,
		                     	  |	ДокТовары.СуммаНДС КАК СуммаНДС,
		                     	  |	ДокТовары.СтавкаНДС КАК СтавкаНДС
		                     	  |ИЗ
		                     	  |	Документ.РеализацияТоваров.Товары КАК ДокТовары
		                     	  |ГДЕ
		                     	  |	ДокТовары.Ссылка = &Ссылка
		                     	  |
		                     	  |СГРУППИРОВАТЬ ПО
		                     	  |	ДокТовары.Номенклатура,
		                     	  |	ДокТовары.ХарактеристикаНоменклатуры,
		                     	  |	ДокТовары.СуммаНДС,
		                     	  |	ДокТовары.СтавкаНДС";
		ЗапросТЧ = Новый Запрос(ТекстЗапросаПоУслугам);
		ЗапросТЧ.УстановитьПараметр("Ссылка", ШапкаДокумента.Ссылка);
		ТаблицаУслуги = ЗапросТЧ.Выполнить().Выгрузить();
			
		Для Каждого ТекСтрока Из ТаблицаУслуги Цикл
			НоваяЗапись								= НаборЗаписейРеализованныеТовары.Добавить();
			НоваяЗапись.ВидДвижения					= ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период						= ШапкаДокумента.Дата;
			НоваяЗапись.Регистратор					= ШапкаДокумента.Ссылка;
			НоваяЗапись.Номенклатура				= ТекСтрока.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры	= ТекСтрока.ХарактеристикаНоменклатуры;
			НоваяЗапись.Контрагент					= ШапкаДокумента.Комитент;
			НоваяЗапись.ДоговорВзаиморасчетов		= ШапкаДокумента.ДоговорКомитента;
			НоваяЗапись.ДокументПередачи			= ШапкаДокумента.Ссылка;

			НоваяЗапись.ХозОперация		= ШапкаДокумента.ХозОперация;
			НоваяЗапись.Количество		= ТекСтрока.Количество;
			
			СуммаПоступления			 = ТекСтрока.СуммаПродажи + ТекСтрока.СуммаСкидки + ТекСтрока.СуммаСкидкиСтроки;
			НоваяЗапись.СуммаРегл		 = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаПоступления,ШапкаДокумента.ВалютаДокумента,ШапкаДокумента.КурсДокумента,ВалютаРегл,КурсРегл),2);
			НоваяЗапись.СуммаНДС		 = Окр(НоваяЗапись.СуммаРегл*ТекСтрока.СтавкаНДС.Ставка/(100 + ТекСтрока.СтавкаНДС.Ставка), 2);
			НоваяЗапись.СуммаБезНДС		 = НоваяЗапись.СуммаРегл - НоваяЗапись.СуммаНДС;
			НоваяЗапись.СуммаУпр		 = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаПоступления,ШапкаДокумента.ВалютаДокумента,ШапкаДокумента.КурсДокумента,ВалютаУпр,КурсУпр),2);
			НоваяЗапись.СуммаНДСУпр 	 = Окр(НоваяЗапись.СуммаУпр*ТекСтрока.СтавкаНДС.Ставка/(100 + ТекСтрока.СтавкаНДС.Ставка), 2);
			НоваяЗапись.СуммаБезНДСУпр	 = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
			
			НоваяЗапись.СуммаПродажиРегл = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТекСтрока.СуммаПродажи, ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента, ВалютаРегл, КурсРегл), 2);
			НоваяЗапись.СуммаПродажи     = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТекСтрока.СуммаПродажи, ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента, ВалютаУпр, КурсУпр), 2); 
		КонецЦикла;
	Иначе
		// Для оказания услуг товары не списываем
		// проведем остатки товаров.
		НаборЗаписейОстатки=Движения.ОстаткиТоваровКомпании;
		НаборЗаписейОстатки.РежимПроведения=РежимПроведения;
		НаборЗаписейОстатки.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейОстатки.РезультатЗапросаПоТоварам=РезультатЗапросаПоТоварам;
		НаборЗаписейОстатки.СкладКомпании=СкладКомпании;
		НаборЗаписейОстатки.Приходовать=Истина;
		НаборЗаписейОстатки.Контрагент=Контрагент;
		НаборЗаписейОстатки.ПоБазовомуКоличеству=Истина;
		НаборЗаписейОстатки.ДвиженияПоРознице=СкладКомпании.Розничный;
		НаборЗаписейОстатки.ИмяРеквизитаЦенаРозничная="Цена";
		НаборЗаписейОстатки.ИмяРеквизитаСуммаРозничная="Сумма";
		НаборЗаписейОстатки.Резервировать=РезультатЗапросаПоТоварам<>Неопределено;
		Отказ=НЕ НаборЗаписейОстатки.Расход() ИЛИ Отказ;
		Если Отказ Тогда
			Возврат; // дальше смысла не имеет
		КонецЕсли;
		// Партии
		СуммаВУпрВалюте = ?(
			СпособУчетаВзаиморасчетовПоРасчетнымДокументам,
			СуммыПоРасчетамСКонтрагентом.СуммаУпр,
			Неопределено);
		Отказ=НЕ ПровестиПоПартиям(РежимПроведения,Ссылка, СуммаВУпрВалюте) ИЛИ Отказ;		
		
		Если НЕ Отказ Тогда
		
			 Движения.ГТДПартийТоваровКомпании.Записать();
		
		КонецЕсли;

	КонецЕсли;
	
	// Сформируем сумму накопления
	Если ХозОперация<>Справочники.ХозОперации.РеализацияАгентскихУслуг И ЗначениеЗаполнено(Карточка) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеализацияТоваровТовары.Ссылка.Контрагент,
		|	РеализацияТоваровТовары.Ссылка.Карточка,
		|	РеализацияТоваровТовары.Ссылка.Дата КАК ПериодНакопления,
		|	СУММА(РеализацияТоваровТовары.СуммаВсего) КАК Сумма,
		|	СУММА(РеализацияТоваровТовары.КоличествоБазовое) КАК КоличествоНоменклатуры,
		|	СУММА(0) КАК КоличествоЧеков
		|ИЗ
		|	Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
		|ГДЕ
		|	РеализацияТоваровТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализацияТоваровТовары.Ссылка.Контрагент,
		|	РеализацияТоваровТовары.Ссылка.Дата,
		|	РеализацияТоваровТовары.Ссылка.Карточка";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		НаборНакоплениеСумм = Движения.НакопленияПоКарточкамКонтрагентов;
		НаборНакоплениеСумм.ДокументСсылка   = Ссылка;
		НаборНакоплениеСумм.РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		НаборНакоплениеСумм.ВыполнитьДвижения();
	КонецЕсли;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	Если НЕ Отказ И (ХозОперация = Справочники.ХозОперации.РеализацияТоваров
		ИЛИ ХозОперация = Справочники.ХозОперации.РеализацияТоваровКомиссия) Тогда
		
		СостояниеКодаМаркировки = ?(Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо,
			Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаРозничнаяПродажа,
			Перечисления.СостоянияКодовМаркировки.ПередачаДругомуСобственнику);
		
		// Изменим состояние маркировки
		НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
		НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейСостоянияКодовМаркировки.Организация = Организация;
		НаборЗаписейСостоянияКодовМаркировки.ПроверятьВыводИзОборота = Истина;
		НаборЗаписейСостоянияКодовМаркировки.Состояние = СостояниеКодаМаркировки;
		НаборЗаписейСостоянияКодовМаркировки.РежимПроведения = РежимПроведения;
		Если НЕ НаборЗаписейСостоянияКодовМаркировки.СостояниеКодовМаркировки() Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;

	// бонусные баллы
	НаборБонусныеПрограммы = Движения.БонусныеБаллы;
	Если КоличествоКНачислению > 0 Тогда
		НаборБонусныеПрограммы.Карта             = Карточка;
		НаборБонусныеПрограммы.БонуснаяПрограмма = Карточка.БонуснаяПрограмма;
		НаборБонусныеПрограммы.ХозОперация       = ХозОперация;
		НаборБонусныеПрограммы.КоличествоБаллов  = КоличествоКНачислению;
		НаборБонусныеПрограммы.Регистратор       = Ссылка;
		НаборБонусныеПрограммы.ДокДата           = Дата;
		
		Отказ = НЕ НаборБонусныеПрограммы.Приход() ИЛИ Отказ;
	КонецЕсли;
	
	Если КоличествоКСписанию > 0 Тогда
		МаксимальноеКоличествоБаллов = БонусныеПрограммыСервер.МаксимальноеКоличествоБаллов(ЭтотОбъект, Карточка.БонуснаяПрограмма);
		Если КоличествоКСписанию > МаксимальноеКоличествоБаллов Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Максимальное количество бонусных баллов доступных к оплате %1 меньше указанных %2.'"),
					МаксимальноеКоличествоБаллов,
					КоличествоКСписанию
				),
				ЭтотОбъект,,, Отказ
			);
		КонецЕсли;
		
		НаборБонусныеПрограммы.Карта = Карточка;
		НаборБонусныеПрограммы.БонуснаяПрограмма = Карточка.БонуснаяПрограмма;
		НаборБонусныеПрограммы.ХозОперация       = ХозОперация;
		НаборБонусныеПрограммы.КоличествоБаллов  = КоличествоКСписанию;
		НаборБонусныеПрограммы.Регистратор       = Ссылка;
		НаборБонусныеПрограммы.ДокДата           = Дата;
		
		Отказ = НЕ НаборБонусныеПрограммы.Расход() ИЛИ Отказ;
		
	КонецЕсли;
	
	// Проверим налиие прослеживаемых товаров, которые были реализованы
	Если НЕ Отказ Тогда
		Движения.Продажи.Записать();
	КонецЕсли;
	ТаблицаПрослеживаемыхТоваров = Документы.РеализацияТоваров.ОперацииСПрослеживаемымиТоварами(
		ЭтотОбъект);
	НаборЗаписейОперацииПрослеживаемости = Движения.ОперацииПрослеживаемыхТоваров;
	НаборЗаписейОперацииПрослеживаемости.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейОперацииПрослеживаемости.ТаблицаПрослеживаемыхТоваров = ТаблицаПрослеживаемыхТоваров;
	Если НЕ НаборЗаписейОперацииПрослеживаемости.ДобавитьОперациюПрослеживаемости() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// двигаем границы
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуЗаказов(Ссылка,  ДополнительныеСвойства, Движения);
	
	Если НЕ Отказ Тогда
		ПроверитьСписаниеЗаказов(Отказ);
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ЗаполнитьРеквизитыСуммСписанияВДокументе(ЭтотОбъект, Отказ, "");

	ПараметрыДействия = Новый Структура;
	ОбработкаСобытийДокументаСервер.СоздатьОбновитьСФВыданный(ЭтотОбъект, ДополнительныеСвойства, ПараметрыДействия, Отказ);

КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Заказ покупателя"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПокупателя(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "СкопироватьТабличнуюЧастьОснования", Ложь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Товары.Очистить();
	
	// При вводе на основании заказа, будем отгружать товары, зарезервированные под данный заказ на данном складе.
	Документы.РеализацияТоваров.ЗаполнитьРезервамиПоЗаказу(ЭтотОбъект, ДанныеЗаполнения);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПокупателя()

// Производит заполнение объекта на основании документа "Заказ внутренний"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказВнутренний(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Заполняем специфические для данной операции реквизиты
	ТипЦен = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенПродажи", ЭтотОбъект);
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, "ТипЦен") Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Производим корректировку значений реквизитов объекта
	Контрагент            = Неопределено;
	ДоговорВзаиморасчетов = Неопределено;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказВнутренний()

// Производит заполнение объекта на основании документа "Перемещение товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПеремещениеТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Заполняем специфические для данной операции реквизиты
	СкладКомпании = ДанныеЗаполнения.СкладПолучатель;
	ТипЦен        = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенПродажи", ЭтотОбъект);
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения,
		СтандартнаяОбработка, "СкладКомпании,ТипЦен") Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Производим корректировку значений реквизитов объекта
	Контрагент            = Неопределено;
	ДоговорВзаиморасчетов = Неопределено;
	
	ДополнительныеСвойства.ПараметрыДействия.Вставить("НеРассчитыватьБонусы", Истина);
	ДополнительныеСвойства.ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	
	Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
		Документы.РеализацияТоваров.ТоварыНоменклатураПриИзменении(ЭтотОбъект,
			СтрокаТабличнойЧасти, ДополнительныеСвойства.ПараметрыДействия);
	КонецЦикла;
	
	// Пересчитаем скидки.
	ДополнительныеСвойства.ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	// заполняем ячейки
	Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Номенклатура = ДанныеЗаполнения.Товары[СтрокаТабличнойЧасти.НомерСтроки - 1].Номенклатура Тогда
			СтрокаТабличнойЧасти.Ячейка = ДанныеЗаполнения.Товары[СтрокаТабличнойЧасти.НомерСтроки - 1].ЯчейкаПолучатель;
		КонецЕсли;
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПеремещениеТоваров()

// Производит заполнение объекта на основании документа "Расходный складской ордер"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РасходныйСкладскойОрдер(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,
		ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование.ВладелецТовара)
		И ТипЗнч(ДокументОснование.ВладелецТовара) = Тип("СправочникСсылка.Контрагенты") Тогда
		Контрагент = ДокументОснование.ВладелецТовара;
		Документы.РеализацияТоваров.КонтрагентПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	КонецЕсли;
	
	ДополнительныеСвойства.ПараметрыДействия.Вставить("НеРассчитыватьБонусы", Истина);
	ДополнительныеСвойства.ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	
	Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
		Документы.РеализацияТоваров.ТоварыНоменклатураПриИзменении(ЭтотОбъект,
			СтрокаТабличнойЧасти, ДополнительныеСвойства.ПараметрыДействия);
	КонецЦикла;
	
	// Пересчитаем скидки.
	ДополнительныеСвойства.ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РасходныйСкладскойОрдер()

// Производит заполнение объекта на основании документа "Поступление товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, "ТипЦен") Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Заполняем специфические для данной операции реквизиты
	ТипЦен = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенПродажи", ЭтотОбъект);
	
	// Производим корректировку значений реквизитов объекта
	Контрагент            = Неопределено;
	ДоговорВзаиморасчетов = Неопределено;
	Руководитель		  = Неопределено;
	ГлавныйБухгалтер	  = Неопределено;
	Отпустил			  = Неопределено; 
	Получил				  = Неопределено;
	Принял				  = Неопределено;
    Грузоотправитель	  = Неопределено;
	Грузополучатель		  = Неопределено; 
	
	ВалютаДокумента = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен, Неопределено);
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
	КурсДокумента = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	СтратегияСписанияПартийТоваровПоДатам = ПолучитьСтратегиюСписанияПоДатам(ДанныеЗаполнения.СкладКомпании,
		ДанныеЗаполнения.Организация, ДанныеЗаполнения.Дата);
	СписаниеПартийПоСредней = СтратегияСписанияПартийТоваровПоДатам = Перечисления.СтратегияСписанияПартийТоваровПоДатам.Средняя;
	
	Если СписаниеПартийПоСредней Тогда
		ПартияРеализации = Константы.ПартияТоваровОтрицательныхОстатков.Получить();
	Иначе
		ПартияРеализации = ДокументОснование;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПартииТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
		|	ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СУММА(ПартииТоваровКомпанииОстатки.КоличествоОстаток) КАК Количество
		|ИЗ
		|	РегистрНакопления.ПартииТоваровКомпании.Остатки(
		|			,
		|			СкладКомпании = &СкладКомпании
		|				И Партия = &Партия) КАК ПартииТоваровКомпанииОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваровКомпанииОстатки.Номенклатура,
		|	ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры";
		Запрос.УстановитьПараметр("СкладКомпании", СкладКомпании);
		Запрос.УстановитьПараметр("Партия", ПартияРеализации);
		ОстаткиПартий = Запрос.Выполнить().Выгрузить();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГТДПартийТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
		|	ГТДПартийТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ГТДПартийТоваровКомпанииОстатки.ГТД КАК ГТД,
		|	СУММА(ГТДПартийТоваровКомпанииОстатки.КоличествоОстаток) КАК Количество
		|ИЗ
		|	РегистрНакопления.ГТДПартийТоваровКомпании.Остатки(
		|			,
		|			СкладКомпании = &СкладКомпании
		|				И Партия = &Партия) КАК ГТДПартийТоваровКомпанииОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ГТДПартийТоваровКомпанииОстатки.Номенклатура,
		|	ГТДПартийТоваровКомпанииОстатки.ХарактеристикаНоменклатуры,
		|	ГТДПартийТоваровКомпанииОстатки.ГТД";
		ОстаткиГТД = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	ДополнительныеСвойства.ПараметрыДействия.Вставить("НеРассчитыватьБонусы", Истина);
	ДополнительныеСвойства.ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	ДополнительныеСвойства.ПараметрыДействия.Вставить("НеОчищатьСодержание",  Истина);
	Для Каждого СтрТовар Из Товары Цикл
		
		Документы.РеализацияТоваров.ТоварыНоменклатураПриИзменении(ЭтотОбъект, СтрТовар, ДополнительныеСвойства.ПараметрыДействия);
		
		Если ПраваИНастройкиПользователя.Значение("ВыборочноеСписаниеПартий", ЭтотОбъект) Тогда
			СтрТовар.Партия = ПартияРеализации;
		Иначе
			СтрТовар.Партия = Неопределено;
			СтрТовар.ГТД    = Неопределено;
		КонецЕсли;
		
		Если НЕ СписаниеПартийПоСредней Тогда
			
			СтруктураПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры", СтрТовар.Номенклатура,
				СтрТовар.ХарактеристикаНоменклатуры);
			ОстаткиТекущейПартии=ОстаткиПартий.НайтиСтроки(СтруктураПоиска);
			
			Если ЗначениеЗаполнено(СтрТовар.ГТД) Тогда
				СтруктураПоиска.Вставить("ГТД", СтрТовар.ГТД);
				ОстаткиТекущейГТД = ОстаткиГТД.НайтиСтроки(СтруктураПоиска);
			Иначе
				ОстаткиТекущейГТД = Неопределено;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрТовар.ГТД) Тогда
				Если ОстаткиТекущейГТД.Количество() > 0 Тогда
					СтрТовар.Количество = Мин(ОстаткиТекущейГТД[0].Количество / СтрТовар.Коэффициент, СтрТовар.Количество);
					ОстаткиТекущейГТД[0].Количество = СтрТовар.Количество * СтрТовар.Коэффициент;
					Если ОстаткиТекущейГТД[0].Количество = 0 Тогда
						ОстаткиГТД.Удалить(ОстаткиТекущейГТД[0]);
					КонецЕсли;
				Иначе
					СтрТовар.Количество = 0;
				КонецЕсли;
				Если ОстаткиТекущейПартии.Количество() > 0 Тогда
					ОстаткиТекущейПартии[0].Количество = СтрТовар.Количество * СтрТовар.Коэффициент;
					Если ОстаткиТекущейПартии[0].Количество = 0 Тогда
						ОстаткиПартий.Удалить(ОстаткиТекущейПартии[0]);
					КонецЕсли;
				Иначе
					СтрТовар.Количество = 0;
				КонецЕсли;
			Иначе
				Если ОстаткиТекущейПартии.Количество() > 0 Тогда
					СтрТовар.Количество = Мин(ОстаткиТекущейПартии[0].Количество / СтрТовар.Коэффициент, СтрТовар.Количество);
					ОстаткиТекущейПартии[0].Количество = СтрТовар.Количество * СтрТовар.Коэффициент;
					Если ОстаткиТекущейПартии[0].Количество = 0 Тогда
						ОстаткиПартий.Удалить(ОстаткиТекущейПартии[0]);
					КонецЕсли;
				Иначе
					СтрТовар.Количество = 0;
				КонецЕсли;
			КонецЕсли;
			
			Документы.РеализацияТоваров.ТоварыКоличествоПриИзменении(ЭтотОбъект, СтрТовар, ДополнительныеСвойства.ПараметрыДействия);
			
		КонецЕсли;
		
		СтрТовар.Цена = ЦенообразованиеСервер.ПолучитьЦену(ТипЦен, СтрТовар.Номенклатура,
			?(Ссылка.Пустая(), Дата, Ссылка.МоментВремени()), , ВалютаДокумента, КурсДокумента,
			СтрТовар.ХарактеристикаНоменклатуры, СтрТовар.ЕдиницаИзмерения, ПодразделениеКомпании);
		Документы.РеализацияТоваров.ТоварыЦенаПриИзменении(ЭтотОбъект, СтрТовар, ДополнительныеСвойства.ПараметрыДействия);
		
	КонецЦикла;
	
	ПустыеСтроки = Товары.НайтиСтроки(Новый Структура("Количество", 0));
	Для Сч=1 По ПустыеСтроки.Количество() Цикл
		Товары.Удалить(ПустыеСтроки[Сч - 1]);
	КонецЦикла;
	
	// Пересчитаем скидки.
	ДополнительныеСвойства.ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеТоваров()

// Производит заполнение объекта на основании документа "Ввод остатков товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВводОстатковТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Обработаем по аналогии с "Поступление товаров"
	Возврат ОбработкаЗаполнения_ПоступлениеТоваров(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_ВводОстатковТоваров()

// Производит заполнение объекта на основании документа "Авансовый отчет"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_АвансовыйОтчет(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Обработаем по аналогии с "Поступление товаров"
	Возврат ОбработкаЗаполнения_ПоступлениеТоваров(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_АвансовыйОтчет()

// Производит заполнение объекта на основании документа "Заявка на хранение шин"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаХранениеШин(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Заполняем специфические для данной операции реквизиты
	ХозОперация = Справочники.ХозОперации.АктОбОказанииУслуг;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Проверим наличие услуги по умолчанию у подразделения
	УслугаПоУмолчанию = ?(
		ЗначениеЗаполнено(ПодразделениеКомпании),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодразделениеКомпании, "УслугаПоСезонномуХранениюШинПоУмолчанию"),
		Неопределено);
	
	// Заполним товары
	Если Товары.Количество() = 0 И ЗначениеЗаполнено(УслугаПоУмолчанию) Тогда
		
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура = УслугаПоУмолчанию;
		Документы.РеализацияТоваров.ТоварыНоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока);
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаявкаНаХранениеШин()

// Производит заполнение объекта на основании документа "Рабочий лист отдела страхования".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РабочийЛистОтделаСтрахования(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Заполняем специфические для данной операции реквизиты
	БлокироватьПерерасчетСкидок = Истина;
	ХозОперация                 = Справочники.ХозОперации.РеализацияАгентскихУслуг;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, "БлокироватьПерерасчетСкидок") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование.Страхователь) = Тип("СправочникСсылка.Контрагенты") Тогда
		Контрагент = ДокументОснование.Страхователь;
		Документы.РеализацияТоваров.КонтрагентПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	КонецЕсли;

	Страховщик = Неопределено;
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("Страховщик") Тогда 

		Страховщик = ЭтотОбъект.ДополнительныеСвойства.Страховщик;
		Комитент = Страховщик;
		Документы.РеализацияТоваров.КомитентПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);

	Иначе 
		
		СписокСтраховщиков = Новый СписокЗначений();
		Для Каждого СтрокаСтрахования Из ДокументОснование.ВариантыСтрахования Цикл
			Если СписокСтраховщиков.НайтиПоЗначению(СтрокаСтрахования.Страховщик) = Неопределено Тогда
				СписокСтраховщиков.Добавить(СтрокаСтрахования.Страховщик);
			КонецЕсли;
		КонецЦикла;
		
		Если СписокСтраховщиков.Количество() > 0 Тогда
			Страховщик = СписокСтраховщиков[0].Значение;
			Комитент = Страховщик;
			Документы.РеализацияТоваров.КомитентПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
		КонецЕсли;

	КонецЕсли;
		
	ДополнительныеСвойства.ПараметрыДействия.Вставить("НеРассчитыватьБонусы", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочийЛистОтделаСтрахованияВариантыСтрахования.ПрограммаСтрахования.АгентскаяУслуга КАК АгентскаяУслуга,
		|	РабочийЛистОтделаСтрахованияВариантыСтрахования.Страховщик КАК Страховщик,
		|	СУММА(РабочийЛистОтделаСтрахованияВариантыСтрахования.СуммаПремии) КАК СуммаПремии
		|ИЗ
		|	Документ.РабочийЛистОтделаСтрахования.ВариантыСтрахования КАК РабочийЛистОтделаСтрахованияВариантыСтрахования
		|ГДЕ
		|	РабочийЛистОтделаСтрахованияВариантыСтрахования.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РабочийЛистОтделаСтрахованияВариантыСтрахования.Страховщик,
		|	РабочийЛистОтделаСтрахованияВариантыСтрахования.ПрограммаСтрахования.АгентскаяУслуга";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	ВариантыСтрахования = Запрос.Выполнить().Выгрузить();

	Для Каждого СтрокаТабличнойЧасти Из ВариантыСтрахования Цикл

		Если Страховщик <> Неопределено Тогда
			Если СтрокаТабличнойЧасти.Страховщик <> Страховщик Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура = СтрокаТабличнойЧасти.АгентскаяУслуга;
		Документы.РеализацияТоваров.ТоварыНоменклатураПриИзменении(ЭтотОбъект,
			НоваяСтрока, ДополнительныеСвойства.ПараметрыДействия);
		
		НоваяСтрока.СуммаВсего = СтрокаТабличнойЧасти.СуммаПремии;
		Документы.РеализацияТоваров.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект,
			НоваяСтрока, ДополнительныеСвойства.ПараметрыДействия);
		
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РабочийЛистОтделаСтрахования()

// Производит заполнение объекта на основании документа "Договор аренды"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ДоговорАренды(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.
			ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат АрендаАвтомобилей.ЗаполнитьРеализацияТоваров(ЭтотОбъект,
		ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_ДоговорАренды()

// Производит заполнение объекта на основании документа "Счет на оплату"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СчетНаОплату(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.
			ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДокументОснованиеСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ДокументОснование");
	Если ЗначениеЗаполнено(ДокументОснованиеСчета)
		И ТипЗнч(ДокументОснованиеСчета) = Тип("ДокументСсылка.ЗаявкаНаХранениеШин") Тогда
		ХозОперация = Справочники.ХозОперации.АктОбОказанииУслуг;
	КонецЕсли;
	
	ТоварыОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "Товары").Выгрузить();
	КопияТоваров = Товары.Выгрузить();
	КопияТоваров.Свернуть(
		"Номенклатура,ЕдиницаИзмерения,Коэффициент,ХарактеристикаНоменклатуры,ПроцентСкидки,"
		+ "СкидкаНаТовар,ПроцентСкидкиСтроки,Автомобиль,ГТД",
		"Количество,Сумма,СуммаНДС,СуммаВсего,СуммаСкидки,СуммаСкидкиСтроки");
	
	// Проверим необходимость перезаполнить товары документа
	Если ТоварыОснования.Количество() <> КопияТоваров.Количество() Тогда
		
		Товары.Очистить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(КопияТоваров, Товары);
		УсловиеПоиска = Новый Структура("Номенклатура,ЕдиницаИзмерения,ХарактеристикаНоменклатуры,Автомобиль,ГТД");
		
		Для Каждого СтрокаТоваров Из Товары Цикл
			
			ЗаполнитьЗначенияСвойств(УсловиеПоиска, СтрокаТоваров);
			СтрокиТоваровОснования = ТоварыОснования.НайтиСтроки(УсловиеПоиска);
			СтрокаТоваров.СтавкаНДС = СтрокиТоваровОснования[0].СтавкаНДС;
			СтрокаТоваров.Цена = Окр(СтрокаТоваров.Сумма / СтрокаТоваров.Количество, 2);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено (СкладКомпании) Тогда
		ОбработкаТабличнойЧастиТовары.ПерезаполнитьТаблицуРеквизитЯчейка(ЭтотОбъект);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ДоговорАренды()

// Производит заполнение объекта по передаваемой структуре
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;

	Если ДанныеЗаполнения.Свойство("ЗаполнениеИзКорзины") Тогда
		ПараметрыДействия = Неопределено;
		Для Каждого Строка Из ДанныеЗаполнения.Товары Цикл		
			НоваяСтрока 						   = Товары.Добавить();	
			НоваяСтрока.Номенклатура 			   = Строка.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
			НоваяСтрока.Количество 				   = Строка.Количество;
			НоваяСтрока.ЕдиницаИзмерения 		   = Строка.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент		 		   = Строка.Коэффициент;
			ОбработкаТабличнойЧастиТовары.УстановитьЦены(ЭтотОбъект, НоваяСтрока, ПараметрыДействия);
			Документы.РеализацияТоваров.ТоварыЦенаПриИзменении(ЭтотОбъект, НоваяСтрока, ПараметрыДействия);
		КонецЦикла;
	КонецЕсли;

	Если ДанныеЗаполнения.Свойство("Основание")
		И ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.ДоговорАренды") Тогда
		
		// Вызываем общий обработчик заполнения
		Если НЕ ОбработкаСобытийДокументаСервер.
				ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения.Основание, "", СтандартнаяОбработка) Тогда
			Возврат Истина;
		КонецЕсли;
		
		АрендаАвтомобилей.ЗаполнитьРеализацияТоваров(ЭтотОбъект, ДанныеЗаполнения, , СтандартнаяОбработка);
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Структура()

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// Процедура - Проверяет отгрузку по заказам в режиме из права ПроверкаЗаказаПокупателяПриОтгрузке.
//
// Параметры:
//  Отказ	 - Булево - признак отказа от проведения документа.
//
Процедура ПроверитьСписаниеЗаказов(Отказ)
	
	РежимПроверки = ПраваИНастройкиПользователя.Значение("ПроверкаЗаказаПокупателяПриОтгрузке", ЭтотОбъект);
	
	Если РежимПроверки <> Перечисления.РежимыПроверкиЗаказаВРеализации.НеПроверять Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗаказыПокупателей.Номенклатура КАК Номенклатура,
		|	ЗаказыПокупателей.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЗаказыПокупателей.Заказ КАК Заказ,
		|	-ЗаказыПокупателей.Заказано КАК Количество
		|ПОМЕСТИТЬ втДвиженияЗаказы
		|ИЗ
		|	&ЗаказыПокупателей КАК ЗаказыПокупателей
		| " + ?(РежимПроверки = Перечисления.РежимыПроверкиЗаказаВРеализации.ТолькоПоОснованию,
			" ГДЕ 	ЗаказыПокупателей.Заказ = &ДокументОснование ", "") + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиТоваровКомпании.Номенклатура,
		|	ОстаткиТоваровКомпании.ХарактеристикаНоменклатуры,
		|	ОстаткиТоваровКомпании.Количество
		|ПОМЕСТИТЬ втДвиженияТовары
		|ИЗ
		|	&ОстаткиТоваровКомпании КАК ОстаткиТоваровКомпании
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДвиженияЗаказы.Номенклатура,
		|	втДвиженияЗаказы.ХарактеристикаНоменклатуры,
		|	втДвиженияЗаказы.Количество
		|ПОМЕСТИТЬ втДвижения
		|ИЗ
		|	втДвиженияЗаказы КАК втДвиженияЗаказы
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втДвиженияТовары.Номенклатура,
		|	втДвиженияТовары.ХарактеристикаНоменклатуры,
		|	втДвиженияТовары.Количество
		|ИЗ
		|	втДвиженияТовары КАК втДвиженияТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(втДвижения.Номенклатура) КАК Номенклатура,
		|	втДвижения.Номенклатура КАК НоменклатураСсылка,
		|	ПРЕДСТАВЛЕНИЕ(втДвижения.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры,
		|	СУММА(втДвижения.Количество) КАК Количество,
		|	втДвижения.Номенклатура КАК НоменклатураГруппировка,
		|	втДвижения.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатурыГруппировка,
		|	ПРЕДСТАВЛЕНИЕ(Ном.БазоваяЕдиницаИзмерения) КАК ЕдиницаИзмерения
		|ИЗ
		|	втДвижения КАК втДвижения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Ном
		|		ПО втДвижения.Номенклатура = Ном.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	втДвижения.Номенклатура,
		|	втДвижения.ХарактеристикаНоменклатуры,
		|	ПРЕДСТАВЛЕНИЕ(Ном.БазоваяЕдиницаИзмерения)
		|
		|ИМЕЮЩИЕ
		|	СУММА(втДвижения.Количество) <> 0";
		Запрос.УстановитьПараметр("ОстаткиТоваровКомпании", Движения.ОстаткиТоваровКомпании.Выгрузить());
		Запрос.УстановитьПараметр("ЗаказыПокупателей", Движения.ЗаказыПокупателей.Выгрузить());
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Отказ = Истина;
			
			Если РежимПроверки = Перечисления.РежимыПроверкиЗаказаВРеализации.ЗапретитьБезЗаказа Тогда
				ШаблонБезХарактеристики = НСтр("ru = '[%1] Товар ""%2"" списывается без заказа покупателя в количестве %3 %4'");
				ШаблонСХарактеристикой = НСтр("ru = '[%1] Товар ""%2"" с характеристикой ""%3"" списывается без заказа покупателя в количестве %4 %5'");
			Иначе
				ШаблонБезХарактеристики = НСтр("ru = '[%1] Товар ""%2"" списывается вне заказа-основания в количестве %3 %4'");
				ШаблонСХарактеристикой = НСтр("ru = '[%1] Товар ""%2"" с характеристикой ""%3"" списывается вне заказа-основания в количестве %4 %5");
			КонецЕсли;
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(Выборка.НоменклатураСсылка);
				Если ПустаяСтрока(Выборка.ХарактеристикаНоменклатуры) Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							ШаблонБезХарактеристики,
							ЗначениеКолонкиКода,
							СокрЛП(Выборка.Номенклатура),
							Формат(Выборка.Количество,"ЧДЦ=3; ЧН=0,00"), 
							СокрЛП(Выборка.ЕдиницаИзмерения)
						),
						ЭтотОбъект,,, Истина
					);
				Иначе
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							ШаблонСХарактеристикой,
							ЗначениеКолонкиКода,
							СокрЛП(Выборка.Номенклатура),
							СокрЛП(Выборка.ХарактеристикаНоменклатуры), 
							Формат(Выборка.Количество,"ЧДЦ=3; ЧН=0,00"),
							СокрЛП(Выборка.ЕдиницаИзмерения)
						),
						ЭтотОбъект,,, Истина
					);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает выборку по шапке
//
// Параметры:
//  ДокументСсылка - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Выборка - выборка по шапке
//
Функция ПолучитьШапкуДокумента(ДокументСсылка) Экспорт
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	СУММА(РеализацияТоваровТовары.СуммаВсего) КАК СуммаВсего
	                    |ПОМЕСТИТЬ ДокТовары
	                    |ИЗ
	                    |	Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
	                    |ГДЕ
	                    |	РеализацияТоваровТовары.Ссылка = &Ссылка
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	Док.Ссылка КАК Ссылка,
	                    |	Док.Дата КАК Дата,
	                    |	Док.ВалютаДокумента КАК ВалютаДокумента,
	                    |	Док.КурсДокумента КАК КурсДокумента,
	                    |	Док.ТипЦен КАК ТипЦен,
	                    |	Док.ХозОперация КАК ХозОперация,
	                    |	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	                    |	Док.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	                    |	Док.МоментВремени КАК МоментВремени,
	                    |	Док.Организация КАК Организация,
	                    |	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	                    |	Док.Проект КАК Проект,
	                    |	Док.СкладКомпании КАК СкладКомпании,
	                    |	Док.Ссылка КАК ДокументПродажи,
	                    |	Док.Контрагент КАК Контрагент,
	                    |	Док.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	                    |	Док.Комитент КАК Комитент,
	                    |	Док.ДоговорКомитента КАК ДоговорКомитента,
	                    |	Док.ДокументОснование КАК ДокументОснование,
	                    |	ЕСТЬNULL(ДокТовары.СуммаВсего, 0) КАК СуммаВсего
	                    |ИЗ
	                    |	Документ.РеализацияТоваров КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ ДокТовары КАК ДокТовары
	                    |		ПО (ИСТИНА)
	                    |ГДЕ
	                    |	Док.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции // ПолучитьШапкуДокумента()

// Формирует движения документа по партионным регистрам
//
// Параметры:
//  Режим           - режим проведения (оперативный/неоперативный)
//  ДокументСсылка  - ссылка на документ который надо допровести по партиям.
//
// Возвращаемое значение:
//  Возвращает Истина - все ОК, ложь - чего-то не так.
//
Функция ПровестиПоПартиям(Режим, ДокументСсылка, Знач СуммаДоходов = Неопределено) Экспорт
	Отказ=Ложь;
	
	Если ДополнительныеСвойства.Свойство("СпособУчетаВзаиморасчетовПоРасчетнымДокументам") Тогда
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам = ДополнительныеСвойства.СпособУчетаВзаиморасчетовПоРасчетнымДокументам;
	Иначе
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
			РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	КонецЕсли;
	
	// получим шапку документа
	ШапкаДокумента=ПолучитьШапкуДокумента(ДокументСсылка);
	
	// определим необходимость формирования корректирующих проводок
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
	
	РасчетыСКонтрагентами = РасчетыСКонтрагентамиСервер.ДвиженияРасчетовСКонтрагентамиПоДокументу(
		ЭтотОбъект,
		ШапкаДокумента);
	
	Если СуммаДоходов = Неопределено Тогда
		Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
			УсловиеОтбора = Новый Структура;
			УсловиеОтбора.Вставить("ТипРасчета", Перечисления.ТипыРасчетов.Оплата);
			УсловиеОтбора.Вставить("ВидДвижения", ВидДвиженияНакопления.Приход);
			СуммыПоРасчетамСКонтрагентом = РасчетыСКонтрагентамиСервер.СуммовыеПоказателиРасчетаСКонтрагентами(
				ДополнительныеСвойства.ТаблицыДвиженийДокумента.РасчетыСКонтрагентами,
				УсловиеОтбора);
			СуммаДоходов = СуммыПоРасчетамСКонтрагентом.СуммаУпр;
		Иначе
			СуммаДоходов = ШапкаДокумента.СуммаВсего;
		КонецЕсли;
	КонецЕсли;
	
	// Проверим, если подразделение проводиться по партиям "отложенно", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям=Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
		НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
		// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
		Если ВедетсяБалансПоПодразделению Тогда
			НаборЗаписейДоходыИРасходы.Подразделение = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
		КонецЕсли;
		НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьНеоприходованныхПартий;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте = СпособУчетаВзаиморасчетовПоРасчетнымДокументам;
		НаборЗаписейДоходыИРасходы.Доход = СуммаДоходов;
		НаборЗаписейДоходыИРасходы.Приход();
		Возврат НЕ Отказ;
	КонецЕсли;
	
	ПодразделениеСклад = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ШапкаДокумента.СкладКомпании.ПодразделениеКомпании, ШапкаДокумента.Дата);
	ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании, ШапкаДокумента.Дата);
	БалансовыеПодразделенияНеРавны = (ПодразделениеДоговорВзаиморасчетов<>ПодразделениеСклад);
	
	// проверяем, присутствуют ли партии в табличной части
	ЕстьПартии = Ложь;
	Для Каждого СтрокаТовар Из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовар.Партия) Тогда
			ЕстьПартии = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВУпрВалюте=(ВалютаДокумента=Константы.ВалютаУправленческогоУчетаКомпании.Получить());
	// проведем партии товаров проданные 
	НаборЗаписейПартии=Движения.ПартииТоваровКомпании;
	НаборЗаписейПартии.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейПартии.СкладКомпании=ШапкаДокумента.СкладКомпании;
	НаборЗаписейПартии.Организация=ШапкаДокумента.Организация;
	НаборЗаписейПартии.ИмяРеквизитаДокумент=?(ЕстьПартии,"Партия","");
	НаборЗаписейПартии.ПоБазовомуКоличеству=Истина;
	// если и передаем товар на комиссию, то только собственный
	Если ШапкаДокумента.ХозОперация=Справочники.ХозОперации.РеализацияТоваровКомиссия Тогда
		НаборЗаписейПартии.СтатусПартии=Перечисления.СтатусыПартий.ТоварКупленный;
	КонецЕсли;
	НаборЗаписейПартии.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейПартии.Расход() ИЛИ Отказ;
	// комиссия
	Если (ШапкаДокумента.ХозОперация=Справочники.ХозОперации.РеализацияТоваровКомиссия) Тогда
		// проведем партии товаров переданные на комиссию
		НаборЗаписейПартииОтданные=Движения.ПартииТоваровОтданные;
		НаборЗаписейПартииОтданные.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейПартииОтданные.Контрагент=ШапкаДокумента.Контрагент;
		НаборЗаписейПартииОтданные.ДоговорВзаиморасчетов=ШапкаДокумента.ДоговорВзаиморасчетов;
		НаборЗаписейПартииОтданные.ПоБазовомуКоличеству=Истина;
		НаборЗаписейПартииОтданные.ШапкаДокумента=ШапкаДокумента;
		Отказ=НЕ НаборЗаписейПартииОтданные.Приход() ИЛИ Отказ;
		
		// Если балансовые подразделение договора и подразделения склад не равны, то сформируем корректирующие проводки.
		Если ВедетсяБалансПоПодразделению И БалансовыеПодразделенияНеРавны Тогда
			НаборЗаписейПартии=Движения.ПартииТоваровКомпании;
			СебестоимостьУпр=НаборЗаписейПартии.Итог("СуммаУпр");
			// сумма себестоимости списанных товаров
			НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.Подразделение          = ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
			НаборЗаписейДоходыИРасходы.Доход                  = СебестоимостьУпр;
			НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
			Отказ=НЕ НаборЗаписейДоходыИРасходы.Расход() ИЛИ Отказ;
			
			НаборЗаписейПартииОтданные=Движения.ПартииТоваровОтданные;
			СебестоимостьУпр=НаборЗаписейПартииОтданные.Итог("СуммаСебестоимостиУпр");
			// сумма себестоимости списанных товаров
			НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.Подразделение          = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
			НаборЗаписейДоходыИРасходы.Доход                  = СебестоимостьУпр;
			НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
			Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		КонецЕсли;
	Иначе
		// продажи
		Если НЕ Отказ Тогда
			
			НаборЗаписейПродажи=Движения.Продажи;
			НаборЗаписейПродажи.РежимПроведения = Режим;
			НаборЗаписейПродажи.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейПродажи.СкладКомпании=ШапкаДокумента.СкладКомпании;
			НаборЗаписейПродажи.ДокументПродажи=ШапкаДокумента.ДокументПродажи;
			НаборЗаписейПродажи.Сторно=Ложь;
			НаборЗаписейПродажи.Покупатель=ШапкаДокумента.Контрагент;
			НаборЗаписейПродажи.РезультатЗапросаПоТоварам=Неопределено;
			НаборЗаписейПродажи.ДоговорВзаиморасчетов=ШапкаДокумента.ДоговорВзаиморасчетов;
			НаборЗаписейПродажи.ПодразделениеКомпании=ШапкаДокумента.ПодразделениеКомпании;
			НаборЗаписейПродажи.ИмяРеквизитаДокумент = ?(ЕстьПартии,"Партия","");
			НаборЗаписейПродажи.Комиссия=Ложь;
			НаборЗаписейПродажи.ПоБазовомуКоличеству=Истина;
			НаборЗаписейПродажи.ШапкаДокумента=ШапкаДокумента;
			Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
				НаборЗаписейПродажи.РасчетыСКонтрагентами = РасчетыСКонтрагентами;
			КонецЕсли;
			Отказ=НЕ НаборЗаписейПродажи.Приход() ИЛИ Отказ;
		КонецЕсли;
	КонецЕсли;
	
	// спишем реализованные комиссионные товары
	НаборЗаписейРеализованныеТовары=Движения.РеализованныеТовары;
	НаборЗаписейРеализованныеТовары.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейРеализованныеТовары.Контрагент=ШапкаДокумента.Контрагент;
	НаборЗаписейРеализованныеТовары.ДоговорВзаиморасчетов=ШапкаДокумента.ДоговорВзаиморасчетов;
	НаборЗаписейРеализованныеТовары.ПоБазовомуКоличеству=Истина;
	НаборЗаписейРеализованныеТовары.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейРеализованныеТовары.Приход() ИЛИ Отказ;
	
	// Доходы и расходы, если не комиссия
	Если ШапкаДокумента.ХозОперация<>Справочники.ХозОперации.РеализацияТоваровКомиссия Тогда 
		// Подготовим таблицу движений в разрезе подразделений только собственных списанных партий.
		ТаблицаСписанийПартий = Движения.ПартииТоваровКомпании.Выгрузить();
		ТаблицаСписанийПартий.Свернуть("СкладКомпании,СтатусПартии","СуммаУпр");
		СтруктураОтбора=Новый Структура("СтатусПартии",Перечисления.СтатусыПартий.ТоварПринятыйКомиссия);
		МассивНайденныхСтрок=ТаблицаСписанийПартий.НайтиСтроки(СтруктураОтбора);
		Для Сч=0 По МассивНайденныхСтрок.ВГраница() Цикл
			ТаблицаСписанийПартий.Удалить(МассивНайденныхСтрок[Сч]);
		КонецЦикла;
		
		СебестоимостьУпр = ТаблицаСписанийПартий.Итог("СуммаУпр");
		
		НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
		// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
		Если ВедетсяБалансПоПодразделению Тогда
			НаборЗаписейДоходыИРасходы.Подразделение=ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
		КонецЕсли;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.Себестоимость;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте=Истина;
		НаборЗаписейДоходыИРасходы.Расход=СебестоимостьУпр;	
		НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
		Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		
		// Если балансовые подразделение договора и подразделения склад не равны, то сформируем корректирующие проводки.
		Если ВедетсяБалансПоПодразделению И БалансовыеПодразделенияНеРавны Тогда
			НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.Подразделение          = ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДоходыИРасходы.Доход                  = СебестоимостьУпр;
			Отказ=НЕ НаборЗаписейДоходыИРасходы.Расход() ИЛИ Отказ;
			
			НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.Подразделение          = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДоходыИРасходы.Доход                  = СебестоимостьУпр;
			Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		КонецЕсли;
		
		// Подготовим таблицу движений в разрезе подразделений комиссионных товаров.
		ТаблицаСписанийПартийРеализованных = Движения.РеализованныеТовары.Выгрузить();
		ТаблицаСписанийПартийРеализованных.Свернуть("ДоговорВзаиморасчетов","СуммаУпр");
		
		ОписаниеТипов=Новый ОписаниеТипов;
		ОписаниеТипов.Типы().Добавить(Тип("СправочникСсылка.ПодразделенияКомпании"));
		ТаблицаСписанийПартийРеализованных.Колонки.Добавить("Подразделение",ОписаниеТипов);
		Для Каждого СтрокаСписания Из ТаблицаСписанийПартийРеализованных Цикл
			СтрокаСписания.Подразделение = СтрокаСписания.ДоговорВзаиморасчетов.ПодразделениеКомпании;
		КонецЦикла;	
		ТаблицаСписанийПартийРеализованных.Свернуть("Подразделение","СуммаУпр");
		
		// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
		Если ВедетсяБалансПоПодразделению Тогда
			Для Каждого СтрокаСписания Из ТаблицаСписанийПартийРеализованных Цикл
				НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
				НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
				НаборЗаписейДоходыИРасходы.Подразделение=СтрокаСписания.Подразделение;
				НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.Себестоимость;
				НаборЗаписейДоходыИРасходы.ВУпрВалюте=Истина;
				НаборЗаписейДоходыИРасходы.Расход=СтрокаСписания.СуммаУпр;
				НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
				Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
			КонецЦикла;
		Иначе
			НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.Себестоимость;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте=Истина;
			НаборЗаписейДоходыИРасходы.Расход=ТаблицаСписанийПартийРеализованных.Итог("СуммаУпр");	
			НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
			Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		КонецЕсли;
		
		// Доход от начисления дебиторской задолженности по отгруженному товару и оказанным услугам.
		Запрос=Новый Запрос();
		ТекстЗапроса="
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|		СУММА(РеализацияТоваровТовары.СуммаВсего) КАК СуммаУслуг
		|	ИЗ
		|		Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
		|	ГДЕ
		|		РеализацияТоваровТовары.Ссылка = &ТекДок И РеализацияТоваровТовары.Номенклатура.ВидНоменклатуры=&Услуга
		|";
		Запрос.Текст=ТекстЗапроса;
		Запрос.УстановитьПараметр("ТекДок",ШапкаДокумента.Ссылка);
		Запрос.УстановитьПараметр("Услуга",Перечисления.ВидыНоменклатуры.Услуга);
		УслугиДокумента = Запрос.Выполнить().Выгрузить();
		
		Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам
			И Не ВУпрВалюте И УслугиДокумента.Итог("СуммаУслуг") <> 0 Тогда
			
			РасчетыСКонтрагентамиСервер.РаспределитьСуммыПоЧастиТабличнойЧастиДокумента(
				УслугиДокумента,
				СуммаДоходов,
				ШапкаДокумента.СуммаВсего,
				"СуммаУслуг");
				
			
		КонецЕсли;
		
		СуммаУслуг = УслугиДокумента.Итог("СуммаУслуг");
		СуммаТоваров = СуммаДоходов - СуммаУслуг;
		ВУпрВалютеДоходыРасходы = ВУпрВалюте ИЛИ СпособУчетаВзаиморасчетовПоРасчетнымДокументам;
		
		НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
		// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
		Если ВедетсяБалансПоПодразделению Тогда
			НаборЗаписейДоходыИРасходы.Подразделение=ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
		КонецЕсли;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте = ВУпрВалютеДоходыРасходы;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.НачислениеДебиторскойЗадолженностиПоТовару;
		НаборЗаписейДоходыИРасходы.Доход=СуммаТоваров;
		НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
		Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
	
		НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
		// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
		Если ВедетсяБалансПоПодразделению Тогда
			НаборЗаписейДоходыИРасходы.Подразделение=ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
		КонецЕсли;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте = ВУпрВалютеДоходыРасходы;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.НачислениеДебиторскойЗадолженностиПоУслугам;
		НаборЗаписейДоходыИРасходы.Доход=СуммаУслуг;
		НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
		Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
	КонецЕсли;
	
	Если НЕ Отказ Тогда НаборЗаписейПартии.Записать(); КонецЕсли;
	
	// двигаем границу последовательности партий
	Если Ссылка <> ДокументСсылка Тогда
		
		РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоПартиямПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		
	КонецЕсли;
	
	РаботаСГраницами.СдвинутьГраницуПартий(ДокументСсылка, ДополнительныеСвойства, Движения);
	
	Возврат НЕ Отказ;
КонецФункции // ПровестиПоПартиям()

#КонецОбласти

Функция ПараметрыПроверкиОперацийСНоменклатурой()
	
	Параметры = Новый Структура;
	
	// заполняем
	Параметры.Вставить("ЗапретПродажи", Истина);
	ТаблицыДляПроверки = Новый Массив;
	ТаблицыДляПроверки.Добавить("Товары");
	Параметры.Вставить("ТаблицыДляПроверки", ТаблицыДляПроверки);
	
	Возврат Параметры;
	
КонецФункции

Функция ПроверитьПараметрыЗапретаВыбораНоменклатуры()
	
	ПараметрыПроверки = ПараметрыПроверкиОперацийСНоменклатурой();
	ДополнительныеСвойства.Вставить("ПараметрыПроверки", ПараметрыПроверки);
	
	Возврат ОбработкаСобытийДокументаСервер.ПроверитьПараметрыЗапретаВыбораНоменклатуры(ЭтотОбъект, ПараметрыПроверки);
	
КонецФункции

#КонецОбласти

#Область Инициализация

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// Установим параметры проверки заказов
ДополнительныеСвойства.Вставить("ИзменятьЗаказы", Истина);

#КонецОбласти

#КонецЕсли
