// Модуль менеджера документа "Реализация товаров"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует коллекцию с описанием кодов маркировок проданых товаров
//
// Параметры:
//  Сам - ДокументСсылка.РеализацияТоваров - Документ, для которого выполняется операция.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками:
//    * ИдентификаторТовара - Строка - идентификатор строки товаров к которой относятся коды;
//    * КодМаркировки - Строка - код маркировки товара
//
Функция ПолучитьКодыУпаковокМаркируемойПродукции(Сам) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	РеализацияТоваровТовары.ИдентификаторТовара КАК ИдентификаторТовара
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
	|ГДЕ
	|	РеализацияТоваровТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровКодыМаркировки.ИдентификаторТовара КАК ИдентификаторТовара,
	|	РеализацияТоваровКодыМаркировки.КодМаркировки КАК КодМаркировки
	|ПОМЕСТИТЬ СписокКодовМаркировки
	|ИЗ
	|	Документ.РеализацияТоваров.КодыМаркировки КАК РеализацияТоваровКодыМаркировки
	|ГДЕ
	|	РеализацияТоваровКодыМаркировки.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СписокКодовМаркировки.КодМаркировки КАК КодМаркировки
	|ИЗ
	|	СписокКодовМаркировки КАК СписокКодовМаркировки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
	|		ПО СписокКодовМаркировки.ИдентификаторТовара = ТаблицаТоваров.ИдентификаторТовара";
	Запрос.УстановитьПараметр("Ссылка", Сам);
	
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует коллекцию с описанием кодов маркировок проданых товаров в разрезе номенклатуры и характеристики
//
// Параметры:
//  Сам - ДокументСсылка.РеализацияТоваров - Документ, для которого выполняется операция.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками:
//    * Номенклатура - СправочникСсылка.Номенклатура - номенклатура, по которой ведется учет по кодам маркировки;
//    * ХарактеристикаНоменклатуры - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика номенклатуры с кодом;
//    * КодМаркировки - Строка - код маркировки товара
//
Функция ПолучитьКодыУпаковокМаркируемойПродукцииСНоменклатурой(Сам) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	РеализацияТоваровТовары.ИдентификаторТовара КАК ИдентификаторТовара,
	|	РеализацияТоваровТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
	|ГДЕ
	|	РеализацияТоваровТовары.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторТовара
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровКодыМаркировки.ИдентификаторТовара КАК ИдентификаторТовара,
	|	РеализацияТоваровКодыМаркировки.КодМаркировки КАК КодМаркировки
	|ПОМЕСТИТЬ ТаблицаКодовМаркировки
	|ИЗ
	|	Документ.РеализацияТоваров.КодыМаркировки КАК РеализацияТоваровКодыМаркировки
	|ГДЕ
	|	РеализацияТоваровКодыМаркировки.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторТовара
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаКодовМаркировки.КодМаркировки КАК КодМаркировки
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКодовМаркировки КАК ТаблицаКодовМаркировки
	|		ПО ТаблицаТоваров.ИдентификаторТовара = ТаблицаКодовМаркировки.ИдентификаторТовара");
	
	Запрос.УстановитьПараметр("Ссылка", Сам);
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Движения документа выполненные по регистру ГТД
//
// Параметры:
//  Сам - ДокументСсылка.РеализацияТоваров - Документ, для которого выполняется операция.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками:
//    * Номенклатура - СправочникСсылка.Номенклатура - Номенклатура, по которой ведется учет по кодам маркировки;
//    * ХарактеристикаНоменклатуры - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика номенклатуры с кодом;
//    * ГТД - СправочникСсылка.ГТД - Грузовая таможенная декларация;
//    * Количество - Число - Количество товара
//    * Партия - Характеристика.ТипыПартий - Документ партии.
//
Функция ДвиженияПоГТД(Сам) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ГТДПартийТоваровКомпании.Номенклатура,
		|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры,
		|	ГТДПартийТоваровКомпании.ГТД,
		|	СУММА(ГТДПартийТоваровКомпании.Количество) КАК Количество,
		|	ГТДПартийТоваровКомпании.Партия
		|ИЗ
		|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
		|ГДЕ
		|	ГТДПартийТоваровКомпании.Регистратор = &Сам
		|
		|СГРУППИРОВАТЬ ПО
		|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры,
		|	ГТДПартийТоваровКомпании.ГТД,
		|	ГТДПартийТоваровКомпании.Номенклатура,
		|	ГТДПартийТоваровКомпании.Партия"
	);
	Запрос.УстановитьПараметр("Сам", Сам);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область ОбработчикиОбновления

// Возвращает все документы, в которых присутствуют коды маркировки.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка результата запроса, содержащая требуемые документы.
//
Функция ДокументыСКодамиМаркировки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровКодыМаркировки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияТоваров.КодыМаркировки КАК РеализацияТоваровКодыМаркировки
	|ГДЕ
	|	РеализацияТоваровКодыМаркировки.КодМаркировки <> """"";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Процедура зачистки криптохвостов кодов маркировки.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.РеализацияТоваров - документ, для которого выполняется действие.
//
Процедура ОтрезатьКриптохвосты(ДокументОбъект) Экспорт
	
	Для Каждого СтрокаТоваров Из ДокументОбъект.КодыМаркировки Цикл
		СтрокаТоваров.КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(СтрокаТоваров.КодМаркировки);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет перенос свойств в реквизиты объекта
// Руководитель, ГлавныйБухгалтер,Отустил, ОтпустилКонтрагент, Получил, ПолучилКонтрагент
//
Процедура ВыполнитьПереносПодписантовИзСвойств() Экспорт 
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();   
	МассивПереносимыхСвойств = УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства);
	ПеренесеныВсеСвойства = Истина;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровДополнительныеРеквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияТоваров.ДополнительныеРеквизиты КАК РеализацияТоваровДополнительныеРеквизиты
	|ГДЕ
	|	РеализацияТоваровДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", МассивПереносимыхСвойств);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();  
	
	Пока Выборка.Следующий() Цикл  
		
		СвойстваКУдалению = Новый Массив();
		
		НачатьТранзакцию(); 
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.РеализацияТоваров");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();  
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗначенияСвойств = ДокументОбъект.ДополнительныеРеквизиты.Выгрузить();
			
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда 
				
				СвойствоРуководитель = ЗначенияСвойств.Найти(ПереносимыеСвойства.Руководитель,"Свойство");
				
				Если СвойствоРуководитель <> Неопределено Тогда
					
					ДокументОбъект.Руководитель = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоРуководитель.Значение,
						Выборка.Ссылка
					);
					
					Если ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоРуководитель.Свойство);
						
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтОрганизации) Тогда 
					
					ДокументОбъект.Руководитель = ДокументОбъект.ПодписантОтОрганизации
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда	
				
				СвойствоГлавныйБухгалтер = ЗначенияСвойств.Найти(ПереносимыеСвойства.ГлавныйБухгалтер,"Свойство");
				
				Если СвойствоГлавныйБухгалтер <> Неопределено Тогда
					
					ДокументОбъект.ГлавныйБухгалтер = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоГлавныйБухгалтер.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоГлавныйБухгалтер.Свойство); 
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда	
				
				СвойствоОтпустил = ЗначенияСвойств.Найти(ПереносимыеСвойства.Отпустил,"Свойство");
				
				Если СвойствоОтпустил <> Неопределено Тогда
					
					ДокументОбъект.Отпустил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоОтпустил.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоОтпустил.Свойство);
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда	
				
				СвойствоПолучилКонтрагент = ЗначенияСвойств.Найти(ПереносимыеСвойства.ПолучилКонтрагент,"Свойство");
				
				Если СвойствоПолучилКонтрагент <> Неопределено Тогда
					
					ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоПолучилКонтрагент.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоПолучилКонтрагент.Свойство);
						
					КонецЕсли; 
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтКонтрагента) Тогда 
					
					ДокументОбъект.Получил = ДокументОбъект.ПодписантОтКонтрагента
					
				КонецЕсли;
				
			КонецЕсли; 

			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
				
				СвойствоДоверенность = ЗначенияСвойств.Найти(ПереносимыеСвойства.Доверенность,"Свойство");
				
				Если СвойствоДоверенность <> Неопределено Тогда

					Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
							СвойствоДоверенность.Значение.Владелец,
							Выборка.Ссылка,
							СвойствоДоверенность.Значение
						);
						
						Если ЗначениеЗаполнено(ДокументОбъект.Получил)  И значениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство);
							
						КонецЕсли; 
						
					ИначеЕсли ДокументОбъект.Получил.Подписант = СвойствоДоверенность.Значение.Владелец
						И  НЕ ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
						
						ПолучилОбъект = ДокументОбъект.Получил.ПолучитьОбъект();
						ПолучилОбъект.Основание = СвойствоДоверенность.Значение;  
						
						Попытка	
							ПолучилОбъект.Записать(); 
						Исключение	
						КонецПопытки;
						
						Если ЗначениеЗаполнено(ПолучилОбъект.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство); 
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Принял) Тогда
				СвойствоДоверенность = ЗначенияСвойств.Найти(ПереносимыеСвойства.Доверенность,"Свойство");
				
				Если СвойствоДоверенность <> Неопределено Тогда
			
					ДокументОбъект.Принял = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоДоверенность.Значение.Владелец,
						Выборка.Ссылка,
						СвойствоДоверенность.Значение
					);
						
					Если ЗначениеЗаполнено(ДокументОбъект.Принял)  И значениеЗаполнено(ДокументОбъект.Принял.Основание) Тогда
							
						СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство);
							
					КонецЕсли; 
					
				КонецЕсли;
					
			КонецЕсли;
			
			Если СвойстваКУдалению.Количество()>0 Тогда  
				
				Для Каждого Элемент Из СвойстваКУдалению Цикл 
					
					Строка = ДокументОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
					Если Строка <> Неопределено Тогда 
						
						ДокументОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение 
			
			ОтменитьТранзакцию();
			ПеренесеныВсеСвойства = Ложь;
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления списка подписантов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ПеренесеныВсеСвойства   Тогда
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Набор
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка.ИмяПредопределенныхДанных = ""Документ_РеализацияТоваров""";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();	
			
			Пока Выборка.Следующий() Цикл
				
				Попытка	
					НаборОбъект = Выборка.Набор.ПолучитьОбъект();
					
					Для Каждого Элемент Из МассивПереносимыхСвойств Цикл 
					
						Строка = НаборОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
						Если Строка <> Неопределено Тогда 
						
							НаборОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
						КонецЕсли;
					
					КонецЦикла;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборОбъект);
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось обработать справочник: ""НаборыДополнительныхРеквизитовИСведений"" по причине:
							|%1'"), 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений, "НаборыДополнительныхРеквизитовИСведений", ТекстСообщения);
				КонецПопытки;	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
				
КонецПроцедуры	

// Выполяет проверку выполнения отложенного обработчика обновления ВыполнитьПереносПодписантовИзСвойств
//
// Параметры:
//  Параметры - Структура - параметры выполнения операции
//
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ПроверитьПереносПодписантовИзСвойств (Параметры) Экспорт
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровДополнительныеРеквизиты.Свойство КАК Свойство,
	|	РеализацияТоваровДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Документ.РеализацияТоваров.ДополнительныеРеквизиты КАК РеализацияТоваровДополнительныеРеквизиты
	|ГДЕ
	|	РеализацияТоваровДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)
	|	И РеализацияТоваровДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства));
	Запрос.УстановитьПараметр("Ссылка",				 Параметры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
	    Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Проверяет возможность ввода счет-фактуры выданной на основании документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.РеализацияТоваров - документ, для которого выполняется действие.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина, если ввод возможен, Ложь - в противном случае.
//
Функция ВозможенВводСчетФактурыВыданной(ДокументОбъект, ДополнительныеПарметры = Неопределено) Экспорт
	
	СистемаНО = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.СистемаНалогообложения,
		ДокументОбъект.Организация,
	);  
	
	НалогообложениеУСН = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.НалогообложениеНДСПриУСН,
		ДокументОбъект.Организация,
	);

	Если СистемаНО = Перечисления.СистемыНалогообложения.Упрощенная И НЕ РаботаСоСтавкамиНДССервер.УСНПлательщикНДС(НалогообложениеУСН) Тогда
        Возврат Ложь;
	КонецЕсли;
		
	Возврат ОбработкаСобытийДокументаСервер.ДокументСодержитСтрокиСНДС(ДокументОбъект, "Товары");
		
КонецФункции

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВозвратОтПокупателя);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВыводИзОборотаКодовМаркировки);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЖалобаКлиента);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаРасходДС);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаРеализации);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ОтчетКомиссионера);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ОтчетКомитенту);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ИзменениеЦен);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПоступлениеТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйСкладскойОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетНаОплату);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетФактураВыданный);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.УведомлениеОПеремещенииПрослеживаемыхТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЧекНаОплату);
		
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.РеализацияТоваров);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ИнтервьюКонтрагента

// Полдучение респондента для проведения интервью.
//
// Параметры:
//  Объект  - ДокументСсылка.ЗаказНаряд - Документ, на основании которого проводится интервью.
//
// Возвращаемое значение:
//   СправочникСсылка.Контрагенты   - Респондент для интервью.
//
Функция РеспондентДляИнтервью(Объект) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Контрагент");
	
КонецФункции // РесподентДляИнтервью()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Товары.Итог("СуммаВсего"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС",    Объект.Товары.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента-ИтогиОперации.СуммаНДС);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Производит расчет суммы скидки/наценки по документу в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция РассчитатьСуммуСкидкиНаценки(Объект) Экспорт
	
	Объект.СуммаСкидкиНаценки = Объект.Товары.Итог("СуммаСкидки")
		+ Объект.Товары.Итог("СуммаСкидкиСтроки")
		+ Объект.Товары.Итог("СуммаСкидкиБонусами");
	
КонецФункции // РассчитатьСуммуСкидкиНаценки()

// Используется в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость вывода только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возвращаемая строка, содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить = ЛОЖЬ, ТолькоОсновныеКонтакты = ИСТИНА) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

Процедура РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти="Товары", СкидкаШапкиАбсолютная=Ложь) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект);
	ПараметрыДействия.Вставить("НеРассчитыватьБонусы", Истина);
	
	СкидкиНаценкиСервер.РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти, СкидкаШапкиАбсолютная, ПараметрыДействия);
	
КонецПроцедуры // РассчитатьСкидкиСтроки()

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

// Получение данных о прослеживаемых товаров
//
// Параметры:
//  Объект	 - ДокументОбъект.РеализацияТоваров - Документ, на основании которого произошла операция с товаром
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Список прослеживаемых товаров
//
Функция ОперацииСПрослеживаемымиТоварами(Объект) Экспорт
	
	// TODO: На данный момент сделано только для формирования отчета об операциях
	
	// Получим таблицу для формирования данных по операции
	ТаблицаОперацииПрослеживаемости = УчетПрослеживаемыхТоваровСервер.ИнициализацияТаблицыОпераций();
	
	ОсвобождентОтНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Неопределено, Объект.Дата).ОсвобожденОтНДС;
	
	// Проверим есть ли ставка НДС в документе
	ТаблицаНДС = Объект.Товары.Выгрузить();
	ТаблицаНДС.Свернуть("СтавкаНДС");
	ЕстьНДС = НЕ (ТаблицаНДС.Количество() = 1 И ТаблицаНДС[0].СтавкаНДС = Справочники.СтавкиНДС.БезНДС);
	
	// Операцию об отчете не выводим если есть ставка НДС в документе и организация плательщик НДС
	Если ЕстьНДС И НЕ ОсвобождентОтНДС Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	// Сформируем запрос из документа
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Продажи.Номенклатура КАК Номенклатура,
	|	Продажи.ГТД КАК РНПТ,
	|	СУММА(Продажи.Количество) КАК КоличествоПрослеживаемости,
	|	СУММА(Продажи.ВыручкаБезНДС) КАК СуммаБезНДС
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Регистратор = &Ссылка
	|	И Продажи.ГТД.РНПТ
	|
	|СГРУППИРОВАТЬ ПО
	|	Продажи.Номенклатура,
	|	Продажи.ГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваров.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(РеализацияТоваров.Дата, КВАРТАЛ) КАК ПериодОтчета,
	|	ЗНАЧЕНИЕ(Перечисление.ДокументыОтображенияОпераций.ОтчетОбОперациях) КАК ОтчетностьОперации,
	|	ВЫБОР
	|		КОГДА РеализацияТоваров.Контрагент.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|				И РеализацияТоваров.Контрагент.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.ВывозЗаПределыРФ)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.РеализацияТоваров)
	|	КОНЕЦ КАК КодОперации,
	|	РеализацияТоваров.Ссылка КАК Документ,
	|	РеализацияТоваров.Дата КАК ДатаДокумента,
	|	РеализацияТоваров.Номер КАК НомерДокумента,
	|	РеализацияТоваров.Контрагент КАК Контрагент,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументов.Другое) КАК ВидДокумента,
	|	РеализацияТоваров.Контрагент.СтранаРегистрацииЕАЭС КАК КонтрагентСтранаРегистрацииЕАЭС
	|ИЗ
	|	Документ.РеализацияТоваров КАК РеализацияТоваров
	|ГДЕ
	|	РеализацияТоваров.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	// Проверим есть РНПТ у документа
	Если ПакетЗапросов[0].Пустой() Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	ШапкаДокумента = ПакетЗапросов[1].Выбрать();
	ШапкаДокумента.Следующий();
	
	// Указываем для отчета только для контрагентов не из ЕАЭС
	Если ШапкаДокумента.КонтрагентСтранаРегистрацииЕАЭС Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	РНПТДокумента = ПакетЗапросов[0].Выгрузить();
	НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ШапкаДокумента.Документ);
	
	Для Каждого ТекущаяСтрока Из РНПТДокумента Цикл
		
		НоваяСтрока = ТаблицаОперацииПрослеживаемости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ШапкаДокумента);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.НомерДокумента = НомерДокумента;
		
	КонецЦикла;
	
	Возврат ТаблицаОперацииПрослеживаемости;
	
КонецФункции

// Начальное заполнение реквизита "Причина вывода из оборота"
//
Процедура ЗаполнитьПричинуВыводаИзОборотаМаркируемойПродуции() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваров.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.РеализацияТоваров КАК РеализацияТоваров
	               |ГДЕ
	               |	РеализацияТоваров.УдалитьОтгрузкаДляНуждКонтрагента";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.УдалитьОтгрузкаДляНуждКонтрагента = Ложь;
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ПричинаВыводаИзОборота) Тогда
			ДокументОбъект.ПричинаВыводаИзОборота =
				Перечисления.ПричиныВыбытияМаркируемойПродукции.ИспользованиеДляСобственныхНужд;
		КонецЕсли;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			ДокументОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления документа Реализация товаров'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверка на наличие ограничения на формирование расчетов с контрагентом.
//
// Параметры:
//  Обеъект	 - ДокуменОбъект, ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
// 
// Возвращаемое значение:
//  Булево - Расчеты с контрагентом формируются или нет.
//
Функция ДоступноФормированиеРасчетовСКонтрагентами(Объект) Экспорт
	
	ДоступныеОперации = Новый Массив;
	ДоступныеОперации.Добавить(Справочники.ХозОперации.АктОбОказанииУслуг);
	ДоступныеОперации.Добавить(Справочники.ХозОперации.РеализацияАгентскихУслуг);
	ДоступныеОперации.Добавить(Справочники.ХозОперации.РеализацияТоваров);
	
	Возврат ДоступныеОперации.Найти(Объект.ХозОперация) <> Неопределено;
	
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	
	Если Объект.ХозОперация=Справочники.ХозОперации.РеализацияАгентскихУслуг Тогда
		ОбязательныеРеквизиты.Добавить("Комитент");
		ОбязательныеРеквизиты.Добавить("ДоговорКомитента");
	ИначеЕсли НЕ Объект.ХозОперация=Справочники.ХозОперации.АктОбОказанииУслуг Тогда
		ОбязательныеРеквизиты.Добавить("СкладКомпании");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	Если ДоступноФормированиеРасчетовСКонтрагентами(Объект) Тогда 
		ОбязательныеРеквизиты.Добавить("СпособЗачетаАвансов");
	КонецЕсли; 
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли; 
	
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");  
	ОбязательныеРеквизиты.Добавить("Товары.СтавкаНДС");
	
	ОбязательныеРеквизиты.Добавить("КодыМаркировки.КодМаркировки");
	
	НеЗарегистрированГИСМТ = Объект.Контрагент.СтатусУчастникаГИСМТ = Перечисления.СтатусыУчастникаОборотаТоваровГИСМТ.НеЗарегистрирован;
	
	Если Объект.КодыМаркировки.Количество()>0 И НеЗарегистрированГИСМТ Тогда 
		ОбязательныеРеквизиты.Добавить("ПричинаВыводаИзОборота");
	КонецЕсли; 
	
	Если ДоступноФормированиеРасчетовСКонтрагентами(Объект) Тогда 
		Если Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
			ОбязательныеРеквизиты.Добавить("ЗачетАвансов");
		КонецЕсли;
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("ЗачетАвансов.ДокументАванса");
	ОбязательныеРеквизиты.Добавить("ЗачетАвансов.Сумма");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары=Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	УникальныеТовары.Добавить("Автомобиль");
	
	Если ПраваИНастройкиПользователя.Значение("ВыборочноеСписаниеПартий", Объект) Тогда
		УникальныеТовары.Добавить("Партия");
		УникальныеТовары.Добавить("ГТД");
	КонецЕсли;
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Товары", УникальныеТовары);
	
	УникальныеЗачетАвансов = Новый Массив();
	УникальныеЗачетАвансов.Добавить("ДокументАванса");
	УникальныеРеквизиты.Вставить("ЗачетАвансов", УникальныеЗачетАвансов);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Параметры проверки полей таблицы товаров
	КонтролируемыеРеквизитыТовары = Новый Структура();
	КонтролируемыеРеквизитыТовары.Вставить("Партия", ЛОЖЬ);
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("СкладКомпании",         Ложь);
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	КонтролируемыеРеквизиты.Вставить("Товары",                КонтролируемыеРеквизитыТовары);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	// TODO: тут запрос на получение заказов из запроса
	Если Объект.Движения.ЗаказыПокупателей.Количество() = 0 Тогда
		НаборЗаписейЗаказов = РегистрыНакопления.ЗаказыПокупателей.СоздатьНаборЗаписей();
		НаборЗаписейЗаказов.Отбор.Регистратор.Установить(Объект.Ссылка);
		НаборЗаписейЗаказов.Прочитать();
		ЗаказыДокумента = НаборЗаписейЗаказов.Выгрузить();
	Иначе
		ЗаказыДокумента = Объект.Движения.ЗаказыПокупателей.Выгрузить();
	КонецЕсли;
	ДополнительныеПараметры.ДляПроведения.Вставить("Заказы", ЗаказыДокумента);
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговора",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов"));
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаДоговора", ДополнительныеПараметры.ДляПроведения.ВалютаДоговора);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияТоваров.Организация КАК Организация,
	|	РеализацияТоваров.Ссылка КАК Ссылка,
	|	РеализацияТоваров.Дата КАК Дата,
	|	РеализацияТоваров.ХозОперация КАК ХозОперация,
	|	РеализацияТоваров.ДокументОснование КАК ДокументОснование,
	|	РеализацияТоваров.Контрагент КАК Контрагент,
	|	РеализацияТоваров.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	РеализацияТоваров.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	РеализацияТоваров.Ссылка КАК Сделка,
	|	РеализацияТоваров.СуммаДокумента КАК Сумма,
	|	РеализацияТоваров.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	РеализацияТоваров.ВалютаДокумента КАК ВалютаДокумента,
	|	РеализацияТоваров.КурсДокумента КАК КурсДокумента,
	|	РеализацияТоваров.КурсВалютыУпр КАК КурсВалютыУпр,
	|	РеализацияТоваров.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.РеализацияТоваров КАК РеализацияТоваров
	|ГДЕ
	|	РеализацияТоваров.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровЗачетАвансов.Ссылка КАК Ссылка,
	|	РеализацияТоваровЗачетАвансов.ДокументАванса КАК ДокументАванса,
	|	СУММА(РеализацияТоваровЗачетАвансов.Сумма) КАК Сумма
	|ПОМЕСТИТЬ РаспределениеАванса
	|ИЗ
	|	Документ.РеализацияТоваров.ЗачетАвансов КАК РеализацияТоваровЗачетАвансов
	|ГДЕ
	|	РеализацияТоваровЗачетАвансов.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровЗачетАвансов.Ссылка,
	|	РеализацияТоваровЗачетАвансов.ДокументАванса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр, &ВалютаДоговора)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ХозОперация КАК ХозОперация,
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДоговора КАК ВалютаДоговора,
	|	ДанныеДокумента.Сделка КАК Сделка,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыВзаиморасчетов = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютВзаиморасчетов.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетов.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыВзаиморасчетов
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютВзаиморасчетов
	|		ПО ДанныеДокумента.ВалютаДоговора = КурсыВалютВзаиморасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	
	Если Не ДоступноФормированиеРасчетовСКонтрагентами(ДвиженияДокумента.ДляПроведения) Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.ДокументОснование КАК ДокументОснование,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Задолженность.ВалютаДоговора КАК ВалютаДоговора,
	|	Задолженность.Сделка КАК Сделка,
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр
	|ИЗ
	|	Задолженность КАК Задолженность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеАванса.ДокументАванса КАК ДокументАванса,
	|	РаспределениеАванса.Сумма КАК Сумма
	|ИЗ
	|	РаспределениеАванса КАК РаспределениеАванса";
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеОбОплате = ПакетЗапроса[0].Выбрать();
	ЗачетАванса = ПакетЗапроса[1].Выгрузить();
	
	Если Не ДанныеОбОплате.Следующий() Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	КопияЗаказов = ДвиженияДокумента.ДляПроведения.Заказы.Скопировать();
	КопияЗаказов.Свернуть("Заказ");
	СписокЗаказов = КопияЗаказов.ВыгрузитьКолонку("Заказ");
	
	РасчетыСКонтрагентамиСервер.ДополнитьРасчетыСКонтрагентом(
		РасчетыСКонтрагентами,
		ДанныеОбОплате,
		ЗачетАванса,
		Отказ,,
		СписокЗаказов);
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	Если ЕстьРеквизит(Объект, "Контрагент") И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПараметрыДействия.Вставить("РезервыДляКонтрагента", Объект.Контрагент);
	КонецЕсли;
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ДатаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	// Перезаполним ячейки склада
	ОбработкаТабличнойЧастиТовары.ПерезаполнитьТаблицуРеквизитЯчейка(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаРеквизитаСкладКомпании()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДокументОснованиеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Прописать проверку соответствия реквизитов объекта выбранной хоз.операции
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	Владелец = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Объект.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин, Объект.Дата);
	Если (ПараметрыДействия.Свойство("НеобходимоПерезаполнитьАвтомобиль") И ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеобходимоПерезаполнитьАвтомобиль", Ложь))
		ИЛИ НЕ (ПараметрыДействия.Свойство("НеобходимоПерезаполнитьАвтомобиль")) ИЛИ НЕ ЗначениеЗаполнено(Объект.Автомобиль) 
		ИЛИ Объект.Контрагент = Владелец Тогда
			АвтомобильПриИзменении(Объект, ПараметрыДействия);
	Иначе
		ПараметрыДействия.Вставить("ВладелецАвтомобиля", ?(ЗначениеЗаполнено(Владелец), Владелец, Справочники.Контрагенты.ПустаяСсылка()));
		ПараметрыДействия.НеобходимоПерезаполнитьАвтомобиль = Истина;
	КонецЕсли;  
	
	Если Объект.Контрагент.СтатусУчастникаГИСМТ = Перечисления.СтатусыУчастникаОборотаТоваровГИСМТ.НеЗарегистрирован Тогда 
		Объект.ПричинаВыводаИзОборота = Перечисления.ПричиныВыбытияМаркируемойПродукции.ИспользованиеДляСобственныхНужд;
	Иначе 
		Объект.ПричинаВыводаИзОборота = Перечисления.ПричиныВыбытияМаркируемойПродукции.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Комитент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КомитентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ВидыДоговоров = Новый Массив;
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
	ПараметрыДействия.Вставить("ДоступныеВидыДоговоров", ВидыДоговоров);
	
	Объект.ДоговорКомитента = ОбработкаРеквизитовДокументаСервер.ПолучитьДоговорВзаиморасчетов(Объект.Комитент, Перечисления.ВидыДоговоров.СКомитентом, Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	Для Каждого Строка Из Объект.Товары Цикл
		Строка.ЗначениеСкидкиШапкиИзменено = Ложь;
	КонецЦикла;
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия);
	
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Карточка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КарточкаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаРеквизитовДокументаСервер.КарточкаПриИзменении(Объект, ПараметрыДействия);
	
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	Если Строка <> Неопределено И ЗначениеЗаполнено(Строка.Номенклатура)
		И (Объект.ХозОперация = Справочники.ХозОперации.АктОбОказанииУслуг
			ИЛИ Объект.ХозОперация = Справочники.ХозОперации.РеализацияАгентскихУслуг) Тогда
		
		Строка.СтатьяДоходов = Строка.Номенклатура.СтатьяДопРасходов;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Строка.ИдентификаторТовара) Тогда
		Строка.ИдентификаторТовара = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество базовое" в таблице "Товары".
//
// Параметры:
//  Объект 
//  Строка - строка табличной части
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "ГТД" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыГТДПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ГТДПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Партия" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПартияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПартияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Скидка на товар" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		Если НЕ ТекущаяСтрока = Строка Тогда
			ТекущаяСтрока.СуммаВсего = ТекущаяСтрока.СуммаВсего + ТекущаяСтрока.СуммаСкидкиБонусами;
		КонецЕсли;
		ТекущаяСтрока.СуммаСкидкиБонусами = 0;
	КонецЦикла;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Перерасчет реквизита "Сумма скидки бонусами"
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗачетАвансов

// Обработчик события возникающего при изменении данных реквизита "Документ аванса" в таблице "ЗачетАвансов".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЗачетАвансовДокументАвансаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	РасчетыСКонтрагентамиСервер.ДокументАвансаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Товары");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "РеализацияТоваров");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ВыборСклада 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборСклада.ВыборСсылки 		= "Справочник.СкладыКомпании.ФормаСписка";
	ВыборСклада.Обязательный 		= Истина;
	ВыборСклада.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать склад компании.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить складскими остатками'");
	Команда.Идентификатор	= "ТоварыЗаполнитьОстатками";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", ВыборСклада);
	
	ВыборНоменклатуры 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборНоменклатуры.ВыборСсылки 		= "Справочник.Номенклатура.ФормаВыбораГруппы";
	ВыборНоменклатуры.Обязательный 		= Истина;
	ВыборНоменклатуры.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать группу номенклатуры.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить остатками по группе номенклатуры'");
	Команда.Идентификатор	= "ТоварыЗаполнитьОстатками";
	Команда.Порядок			= 51;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ГруппаНоменклатуры", ВыборНоменклатуры);
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", 		ВыборСклада);
	//ТоварыЗаполнитьСкладскимиОстатками
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить резервами контрагента'");
	Команда.Идентификатор	= "ТоварыЗаполнитьРезервами";
	Команда.Порядок			= 52;
	//ТоварыЗаполнитьСкладскимиОстаткамиПоГруппе	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить резервами по заказу'");
	Команда.Идентификатор	= "ТоварыЗаполнитьРезервамиПоЗаказу";
	Команда.Порядок			= 53;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить по документу-основанию'");
	Команда.Идентификатор	= "ТоварыЗаполнитьПоДокументуОснование";
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением = Ложь;
	Команда.Порядок			= 54;
	
	ДополнительныеПараметры = ЗаполнениеОбъектовАльфаАвто.ДополнительныеПараметрыЗаполненияТЧИзДокумента(Параметры);
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Загрузить из корзины'");
	Команда.Идентификатор	= "ЗагрузитьИзКорзины";
	Команда.Порядок			= 55;
	Команда.Обработчик = "ЗаполнениеОбъектовАльфаАвтоКлиент.НачатьЗаполнениеИзКорзины";
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
		Команда.ДополнительныеПараметры,
		ДополнительныеПараметры,
		Ложь);
		
	ВыборСтавки 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборСтавки.ВыборСсылки 		= "Справочник.СтавкиНДС.ФормаСписка";
	ВыборСтавки.Обязательный 		= Истина;
	ВыборСтавки.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать ставку НДС.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Изменить ставку НДС'"); 
	Команда.Идентификатор	= "ТоварыЗаполнитьСтавкуНДС";
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением = Ложь;
	Команда.Порядок			= 56;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СтавкаНДС", ВыборСтавки);
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзДокумента(
		КомандыЗаполнения,
		"Товары",
		Параметры
	);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью команд заполнения объекта
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть не доступны в зависимости от параметров объекта
	ДоступностьКоманд = Новый Соответствие;
	ДоступностьКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстатками.Видимость",           Истина);
	ДоступностьКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстатками.Доступность",         Истина);
	ДоступностьКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстаткамиПоГруппе.Видимость",   Истина);
	ДоступностьКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстаткамиПоГруппе.Доступность", Истина);
	ДоступностьКоманд.Вставить("ТоварыЗаполнитьРезервамиКонтрагента.Видимость",          Истина);
	ДоступностьКоманд.Вставить("ТоварыЗаполнитьРезервамиКонтрагента.Доступность",        Истина);
	ДоступностьКоманд.Вставить("ТоварыЗаполнитьРезервамиПоЗаказу.Видимость",             Истина);
	ДоступностьКоманд.Вставить("ТоварыЗаполнитьРезервамиПоЗаказу.Доступность",           Истина);
	ДоступностьКоманд.Вставить("ТоварыЗаполнитьПоДокументуОснование.Видимость",			 Истина);
	ДоступностьКоманд.Вставить("ТоварыЗаполнитьПоДокументуОснование.Доступность",		 Истина); 
	ДоступностьКоманд.Вставить("ТоварыЗаполнитьСтавкуНДС.Видимость",					 Истина);
	ДоступностьКоманд.Вставить("ТоварыЗаполнитьСтавкуНДС.Доступность",					 Истина); 
	
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ДоступностьКоманд;
	
КонецФункции // ПолучитьДоступностьКомандЗаполнения()

// Обработчик заполнения документа по резервам контрагента
//
Функция ТоварыЗаполнитьРезервами(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	ЗаполнитьРезервамиКонтрагента(Объект);
	
КонецФункции // ТоварыЗаполнитьРезервами()

// Обработчик заполнения документа резервами по заказу
//
Функция ТоварыЗаполнитьРезервамиПоЗаказу(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
		
	Если ТипЗнч(Объект.ДокументОснование)<>Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Документ не введен на основании заказа покупателя.'"), Ссылка);
	Иначе
		ЗаполнитьРезервамиПоЗаказу(Объект,Объект.ДокументОснование);
	КонецЕсли;
	
КонецФункции // ТоварыЗаполнитьРезервамиПоЗаказу()

// Обработчик заполнения документа по остаткам
//
Функция ТоварыЗаполнитьОстатками(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("НеРассчитыватьБонусы", Истина);
	ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.СкладКомпании=ПараметрыЗаполнения.СкладКомпании Тогда
		Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании;
		СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Результат = ЗаполнениеДокументовСервер.ПолучитьСкладскиеОстатки(Объект, ПараметрыЗаполнения);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект);
	
	Если ТипЗнч(Результат)=Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаТовар Из Результат Цикл
			Если СтрокаТовар.Количество-СтрокаТовар.Резерв<=0 Тогда 
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Номенклатура = СтрокаТовар.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТовар.ХарактеристикаНоменклатуры;
			ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
			НоваяСтрока.Количество=СтрокаТовар.Количество-СтрокаТовар.Резерв;
			ТоварыКоличествоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
			
		КонецЦикла;
	КонецЕсли;
	
	// Пересчет скидок
	ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(Объект, ПараметрыДействия);
	
	// Пересчет скидок по бонусам
	ПараметрыДействия.Удалить("НеРассчитыватьБонусы");
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецФункции // ТоварыЗаполнитьРезервамиПоЗаказуПокупателя()

// Обработчик заполнения документа на основании документа
//
Функция ТоварыЗаполнитьПоДокументуОснование(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не заполнен документ основание.'"), Ссылка);
	Иначе
		// перезаполняем
		ПараметрыДействия.Вставить("ТребуетсяЗаполнитьНаОсновании", Истина);
		ПараметрыДействия.Вставить("СкопироватьТабличнуюЧастьОснования", Истина);
		ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
		ОбработкаТабличнойЧастиТовары.ЗаполнитьСлужебныйРеквизитОстатокНаСкладе(Объект,, ПараметрыДействия);
	КонецЕсли;
	
КонецФункции // ТоварыЗаполнитьПоДокументуОснование()

// Обработчик перезаполнения ставки НДС документа 
//
Функция ТоварыЗаполнитьСтавкуНДС(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Объект.Товары) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не заполнена табличная часть'"), Ссылка);
	Иначе 
		НоваяСтавкаНДС = ПараметрыЗаполнения.СтавкаНДС;
		
		Для Каждого Строка Из Объект.Товары Цикл 
			СтавкаНДСНоменклатуры = Строка.Номенклатура.СтавкаНДС;
			Если СтавкаНДСНоменклатуры = Справочники.СтавкиНДС.БезНДС И Строка.СтавкаНДС = СтавкаНДСНоменклатуры Тогда
				Продолжить;
			Иначе
				Строка.СтавкаНДС = НоваяСтавкаНДС; 
				ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия); 
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции // ТоварыЗаполнитьСтавкуНДС()

// Заполняет на основании заказа
//
// Параметры:
//  Объект          - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  ЗаказПокупателя - ДокументСсылка.
//
Процедура ЗаполнитьРезервамиКонтрагента(Объект) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("НеРассчитыватьБонусы", Истина);
	ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина); 
	ПараметрыДействия.Вставить("РассчитыватьСуммуОтСуммыВсего", Истина);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект);
	
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить(); 
	ВалютаДокумента = Объект.ВалютаДокумента; 
	КурсДокумента = Объект.КурсДокумента;
	РасчетВУправленческойВалюте = ВалютаУпр = ВалютаДокумента;
	
	ТекстЗапроса =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
		|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВЫРАЗИТЬ(ЗаказыПокупателейОстатки.Заказ КАК Документ.ЗаказПокупателя) КАК Заказ,
		|	СУММА(ВЫБОР
		|			КОГДА ЗаказыПокупателейОстатки.СкладКомпании = &СкладКомпании
		|				ТОГДА ЗаказыПокупателейОстатки.РезервОстаток
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Количество,
		|	СУММА(ЗаказыПокупателейОстатки.СуммаУпрОстаток) КАК СуммаЗаказаУпр,
		|	СУММА(ЗаказыПокупателейОстатки.ЗаказаноОстаток) КАК Заказано,
		|	ЗаказыПокупателейОстатки.СуммаОстаток КАК СуммаОстаток,
		|	ЗаказыПокупателейОстатки.Заказ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК Валюта
		|ПОМЕСТИТЬ ВТ_ОстаткиЗаказов
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(
		|			"+?(Объект.Ссылка.Пустая(),"","&НаМомент")+",
		|			Контрагент = &Контрагент
		|				И (СкладКомпании = &СкладКомпании
		|					ИЛИ СкладКомпании = Заказ.СкладКомпании)) КАК ЗаказыПокупателейОстатки
		|ГДЕ
		|	НЕ ЗаказыПокупателейОстатки.Заказ.ДокументОснование ССЫЛКА Документ.ЗаказНаряд
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыПокупателейОстатки.Номенклатура,
		|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
		|	ВЫРАЗИТЬ(ЗаказыПокупателейОстатки.Заказ КАК Документ.ЗаказПокупателя),
		|	ЗаказыПокупателейОстатки.СуммаОстаток,
		|	ЗаказыПокупателейОстатки.Заказ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР
		|			КОГДА ЗаказыПокупателейОстатки.СкладКомпании = &СкладКомпании
		|				ТОГДА ЗаказыПокупателейОстатки.РезервОстаток
		|			ИНАЧЕ 0
		|		КОНЕЦ) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
		|	КурсыВалютСрезПоследних.Курс КАК Курс,
		|	КурсыВалютСрезПоследних.Кратность КАК Кратность
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(
		|			&Дата,
		|			Валюта В
		|				(ВЫБРАТЬ
		|					ВТ_ОстаткиЗаказов.Валюта КАК Валюта
		|				ИЗ
		|					ВТ_ОстаткиЗаказов КАК ВТ_ОстаткиЗаказов)) КАК КурсыВалютСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОстаткиЗаказов.Заказ КАК Заказ,
		|	ВЫБОР
		|		КОГДА ЗаказыПокупателей.Регистратор ССЫЛКА Документ.ЗаказПокупателя
		|			ТОГДА ЗаказыПокупателей.Регистратор
		|		КОГДА ЗаказыПокупателей.Регистратор ССЫЛКА Документ.КорректировкаЗаказаПокупателя
		|			ТОГДА ЗаказыПокупателей.Регистратор
		|		КОГДА ЗаказыПокупателей.Регистратор ССЫЛКА Документ.ЗаменаВЗаказеПокупателя
		|			ТОГДА ЗаказыПокупателей.Регистратор
		|		ИНАЧЕ ЗаказыПокупателей.Заказ
		|	КОНЕЦ КАК Регистратор,
		|	ЗаказыПокупателей.Номенклатура КАК Номенклатура,
		|	ЗаказыПокупателей.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СУММА(ВЫБОР
		|			КОГДА ЗаказыПокупателей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА ЗаказыПокупателей.Заказано
		|			ИНАЧЕ -ЗаказыПокупателей.Заказано
		|		КОНЕЦ) КАК Заказано
		|ПОМЕСТИТЬ ВТ_ТаблицаДвижений
		|ИЗ
		|	ВТ_ОстаткиЗаказов КАК ВТ_ОстаткиЗаказов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
		|		ПО ВТ_ОстаткиЗаказов.Заказ = ЗаказыПокупателей.Заказ
		|			И (ЗаказыПокупателей.Номенклатура = ВТ_ОстаткиЗаказов.Номенклатура)
		|			И (ЗаказыПокупателей.ХарактеристикаНоменклатуры = ВТ_ОстаткиЗаказов.ХарактеристикаНоменклатуры)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ОстаткиЗаказов.Заказ,
		|	ВЫБОР
		|		КОГДА ЗаказыПокупателей.Регистратор ССЫЛКА Документ.ЗаказПокупателя
		|			ТОГДА ЗаказыПокупателей.Регистратор
		|		КОГДА ЗаказыПокупателей.Регистратор ССЫЛКА Документ.КорректировкаЗаказаПокупателя
		|			ТОГДА ЗаказыПокупателей.Регистратор
		|		КОГДА ЗаказыПокупателей.Регистратор ССЫЛКА Документ.ЗаменаВЗаказеПокупателя
		|			ТОГДА ЗаказыПокупателей.Регистратор
		|		ИНАЧЕ ЗаказыПокупателей.Заказ
		|	КОНЕЦ,
		|	ЗаказыПокупателей.Номенклатура,
		|	ЗаказыПокупателей.ХарактеристикаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорректировкаЗаказаПокупателяТовары.Номенклатура КАК Номенклатура,
		|	КорректировкаЗаказаПокупателяТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	КорректировкаЗаказаПокупателяТовары.Количество * КорректировкаЗаказаПокупателяТовары.Коэффициент КАК КоличествоБазовое,
		|	КорректировкаЗаказаПокупателяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	КорректировкаЗаказаПокупателяТовары.Коэффициент КАК Коэффициент,
		|	КорректировкаЗаказаПокупателяТовары.ПроцентСкидки КАК ПроцентСкидки,
		|	КорректировкаЗаказаПокупателяТовары.СтавкаНДС КАК СтавкаНДС,
		|	КорректировкаЗаказаПокупателяТовары.СкидкаНаТовар КАК СкидкаНаТовар,
		|	КорректировкаЗаказаПокупателяТовары.ПроцентСкидкиСтроки КАК ПроцентСкидкиСтроки,
		|	КорректировкаЗаказаПокупателяТовары.ЗначениеСкидкиШапкиИзменено КАК ЗначениеСкидкиШапкиИзменено,
		|	КорректировкаЗаказаПокупателяТовары.ЗначениеСкидкиСтрокиИзменено КАК ЗначениеСкидкиСтрокиИзменено,
		|	КорректировкаЗаказаПокупателяТовары.Ссылка.СкидкаНаценка КАК СкидкаНаценка,
		|	ВТ_ТаблицаДвижений.Заказ КАК Заказ,
		|	0 КАК Порядок
		|ПОМЕСТИТЬ ВТ_Документы
		|ИЗ
		|	ВТ_ТаблицаДвижений КАК ВТ_ТаблицаДвижений
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаЗаказаПокупателя.Товары КАК КорректировкаЗаказаПокупателяТовары
		|		ПО ВТ_ТаблицаДвижений.Регистратор = КорректировкаЗаказаПокупателяТовары.Ссылка
		|			И ВТ_ТаблицаДвижений.Номенклатура = КорректировкаЗаказаПокупателяТовары.Номенклатура
		|			И ВТ_ТаблицаДвижений.ХарактеристикаНоменклатуры = КорректировкаЗаказаПокупателяТовары.ХарактеристикаНоменклатуры
		|ГДЕ
		|	ВТ_ТаблицаДвижений.Заказано > 0
		|	И КорректировкаЗаказаПокупателяТовары.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_ТаблицаДвижений.Регистратор
		|			ИЗ
		|				ВТ_ТаблицаДвижений КАК ВТ_ТаблицаДвижений
		|			ГДЕ
		|				ВТ_ТаблицаДвижений.Регистратор ССЫЛКА Документ.КорректировкаЗаказаПокупателя)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаменаВЗаказеПокупателяТоварыЗаменители.Номенклатура,
		|	ЗаменаВЗаказеПокупателяТоварыЗаменители.ХарактеристикаНоменклатуры,
		|	ЗаменаВЗаказеПокупателяТоварыЗаменители.Количество * ЗаменаВЗаказеПокупателяТоварыЗаменители.Коэффициент,
		|	ЗаменаВЗаказеПокупателяТоварыЗаменители.ЕдиницаИзмерения,
		|	ЗаменаВЗаказеПокупателяТоварыЗаменители.Коэффициент,
		|	ЗаменаВЗаказеПокупателяТоварыЗаменители.ПроцентСкидки,
		|	ЗаменаВЗаказеПокупателяТоварыЗаменители.СтавкаНДС,
		|	ЗаменаВЗаказеПокупателяТоварыЗаменители.СкидкаНаТовар,
		|	ЗаменаВЗаказеПокупателяТоварыЗаменители.ПроцентСкидкиСтроки,
		|	ЗаменаВЗаказеПокупателяТоварыЗаменители.ЗначениеСкидкиШапкиИзменено,
		|	ЗаменаВЗаказеПокупателяТоварыЗаменители.ЗначениеСкидкиСтрокиИзменено,
		|	ЗаменаВЗаказеПокупателяТоварыЗаменители.Ссылка.СкидкаНаценка,
		|	ВТ_ТаблицаДвижений.Заказ,
		|	1
		|ИЗ
		|	ВТ_ТаблицаДвижений КАК ВТ_ТаблицаДвижений
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаменаВЗаказеПокупателя.ТоварыЗаменители КАК ЗаменаВЗаказеПокупателяТоварыЗаменители
		|		ПО ВТ_ТаблицаДвижений.Регистратор = ЗаменаВЗаказеПокупателяТоварыЗаменители.Ссылка
		|			И ВТ_ТаблицаДвижений.Номенклатура = ЗаменаВЗаказеПокупателяТоварыЗаменители.Номенклатура
		|			И ВТ_ТаблицаДвижений.ХарактеристикаНоменклатуры = ЗаменаВЗаказеПокупателяТоварыЗаменители.ХарактеристикаНоменклатуры
		|ГДЕ
		|	ЗаменаВЗаказеПокупателяТоварыЗаменители.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_ТаблицаДвижений.Регистратор
		|			ИЗ
		|				ВТ_ТаблицаДвижений КАК ВТ_ТаблицаДвижений
		|			ГДЕ
		|				ВТ_ТаблицаДвижений.Регистратор ССЫЛКА Документ.ЗаменаВЗаказеПокупателя)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказПокупателяТовары.Номенклатура,
		|	ЗаказПокупателяТовары.ХарактеристикаНоменклатуры,
		|	ЗаказПокупателяТовары.Количество * ЗаказПокупателяТовары.Коэффициент,
		|	ЗаказПокупателяТовары.ЕдиницаИзмерения,
		|	ЗаказПокупателяТовары.Коэффициент,
		|	ЗаказПокупателяТовары.ПроцентСкидки,
		|	ЗаказПокупателяТовары.СтавкаНДС,
		|	ЗаказПокупателяТовары.СкидкаНаТовар,
		|	ЗаказПокупателяТовары.ПроцентСкидкиСтроки,
		|	ЗаказПокупателяТовары.ЗначениеСкидкиШапкиИзменено,
		|	ЗаказПокупателяТовары.ЗначениеСкидкиСтрокиИзменено,
		|	ЗаказПокупателяТовары.Ссылка.СкидкаНаценка,
		|	ВТ_ТаблицаДвижений.Заказ,
		|	2
		|ИЗ
		|	ВТ_ТаблицаДвижений КАК ВТ_ТаблицаДвижений
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|		ПО ВТ_ТаблицаДвижений.Регистратор = ЗаказПокупателяТовары.Ссылка
		|			И ВТ_ТаблицаДвижений.Номенклатура = ЗаказПокупателяТовары.Номенклатура
		|			И ВТ_ТаблицаДвижений.ХарактеристикаНоменклатуры = ЗаказПокупателяТовары.ХарактеристикаНоменклатуры
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_ТаблицаДвижений.Регистратор
		|			ИЗ
		|				ВТ_ТаблицаДвижений КАК ВТ_ТаблицаДвижений
		|			ГДЕ
		|				ВТ_ТаблицаДвижений.Регистратор ССЫЛКА Документ.ЗаказПокупателя)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОстаткиЗаказов.Номенклатура КАК Номенклатура,
		|	ВТ_ОстаткиЗаказов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВТ_ОстаткиЗаказов.Заказ КАК Заказ,
		|	ВТ_ОстаткиЗаказов.Количество КАК Количество,
		|	ВТ_ОстаткиЗаказов.Заказано КАК Заказано,
		|	ВТ_ОстаткиЗаказов.СуммаЗаказаУпр КАК СуммаЗаказаУпр,
		|	ВЫБОР
		|		КОГДА ВТ_ОстаткиЗаказов.Валюта = &ВалютаДокумента
		|			ТОГДА ВТ_ОстаткиЗаказов.СуммаОстаток
		|		ИНАЧЕ ВТ_ОстаткиЗаказов.СуммаОстаток * (ЕСТЬNULL(КурсыВалют.Курс, 0) / ЕСТЬNULL(КурсыВалют.Кратность, 0)) / &КурсДокумента
		|	КОНЕЦ КАК СуммаЗаказа
		|ПОМЕСТИТЬ ВТ_ОстаткиЗаказовСуммы
		|ИЗ
		|	ВТ_ОстаткиЗаказов КАК ВТ_ОстаткиЗаказов
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|		ПО ВТ_ОстаткиЗаказов.Валюта = КурсыВалют.Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОстаткиЗаказовСуммы.Номенклатура КАК Номенклатура,
		|	ВТ_ОстаткиЗаказовСуммы.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВТ_ОстаткиЗаказовСуммы.Заказ КАК Заказ,
		|	МАКСИМУМ(ВТ_ОстаткиЗаказовСуммы.СуммаЗаказаУпр) КАК СуммаЗаказаУпр,
		|	МАКСИМУМ(ВТ_ОстаткиЗаказовСуммы.Количество) КАК Количество,
		|	МАКСИМУМ(ВТ_ОстаткиЗаказовСуммы.Заказано) КАК Заказано,
		|	ЕСТЬNULL(ВТ_Документы.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
		|	МАКСИМУМ(ЕСТЬNULL(ВТ_Документы.КоличествоБазовое, 0)) КАК КоличествоБазовое,
		|	ЕСТЬNULL(ВТ_Документы.Коэффициент, 1) КАК Коэффициент,
		|	МАКСИМУМ(ЕСТЬNULL(ВТ_Документы.СтавкаНДС, ВТ_Документы.Номенклатура.СтавкаНДС)) КАК СтавкаНДС,
		|	ЕСТЬNULL(ВТ_Документы.СкидкаНаТовар, ЗНАЧЕНИЕ(Справочник.ТипыСкидок.ПустаяСсылка)) КАК СкидкаНаТовар,
		|	МАКСИМУМ(ЕСТЬNULL(ВТ_Документы.ПроцентСкидкиСтроки, 0)) КАК ПроцентСкидкиСтроки,
		|	МАКСИМУМ(ЕСТЬNULL(ВТ_Документы.ПроцентСкидки, 0)) КАК ПроцентСкидки,
		|	МАКСИМУМ(ЕСТЬNULL(ВТ_Документы.ЗначениеСкидкиШапкиИзменено, ЛОЖЬ)) КАК ЗначениеСкидкиШапкиИзменено,
		|	МАКСИМУМ(ЕСТЬNULL(ВТ_Документы.ЗначениеСкидкиСтрокиИзменено, ЛОЖЬ)) КАК ЗначениеСкидкиСтрокиИзменено,
		|	МАКСИМУМ(ВТ_ОстаткиЗаказовСуммы.СуммаЗаказа) КАК СуммаЗаказа
		|ИЗ
		|	ВТ_ОстаткиЗаказовСуммы КАК ВТ_ОстаткиЗаказовСуммы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
		|		ПО ВТ_ОстаткиЗаказовСуммы.Номенклатура = ВТ_Документы.Номенклатура
		|			И ВТ_ОстаткиЗаказовСуммы.ХарактеристикаНоменклатуры = ВТ_Документы.ХарактеристикаНоменклатуры
		|			И ВТ_ОстаткиЗаказовСуммы.Заказ = ВТ_Документы.Заказ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ОстаткиЗаказовСуммы.Номенклатура,
		|	ВТ_ОстаткиЗаказовСуммы.ХарактеристикаНоменклатуры,
		|	ВТ_ОстаткиЗаказовСуммы.Заказ,
		|	ЕСТЬNULL(ВТ_Документы.Коэффициент, 1),
		|	ЕСТЬNULL(ВТ_Документы.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)),
		|	ЕСТЬNULL(ВТ_Документы.СкидкаНаТовар, ЗНАЧЕНИЕ(Справочник.ТипыСкидок.ПустаяСсылка)),
		|	ВТ_ОстаткиЗаказовСуммы.СуммаЗаказа
		|ИТОГИ
		|	СУММА(СуммаЗаказаУпр),
		|	СУММА(Количество),
		|	СУММА(Заказано),
		|	СУММА(КоличествоБазовое),
		|	СУММА(СуммаЗаказа)
		|ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Документы.СкидкаНаценка КАК СкидкаНаценка
		|ИЗ
		|	ВТ_Документы КАК ВТ_Документы";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НаМомент",   Новый МоментВремени(Объект.Дата, Объект.Ссылка));
	Запрос.УстановитьПараметр("Контрагент",  Объект.Контрагент);
	Запрос.УстановитьПараметр("СкладКомпании",?(ЗначениеЗаполнено(Объект.СкладКомпании),
		Объект.СкладКомпании, 
		ПраваИНастройкиПользователя.Значение("ОсновнойСкладКомпании", Объект))
	);  
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("КурсДокумента", КурсДокумента);  
	Запрос.УстановитьПараметр("Дата", Объект.Дата);

	МассивРезультатов = Запрос.ВыполнитьПакет();
	ЗначениеСкидкиНаценки = МассивРезультатов[6].Выгрузить();
	
	Если ЗначениеСкидкиНаценки.Количество() = 1 Тогда 
		Объект.СкидкаНаценка =  ЗначениеСкидкиНаценки[0].СкидкаНаценка;
	Иначе 
		Объект.СкидкаНаценка = Справочники.ТипыСкидок.ПустаяСсылка();
	КонецЕсли;
	
	
	ВыборкаНоменклатуры = МассивРезультатов[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		
		ВыборкаХарактеристик = ВыборкаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		
		Пока ВыборкаХарактеристик.Следующий() Цикл 
			
			ВсегоОсталосьКоличество = ВыборкаХарактеристик.Количество; // всего количество резерва по номенклатуре 
			
			Если  РасчетВУправленческойВалюте Тогда
				Сумма = ВыборкаХарактеристик.СуммаЗаказаУпр;
			Иначе
				Сумма = ВыборкаХарактеристик.СуммаЗаказа;
			КонецЕсли;
			
			ВсегоОсталосьСумма = ?(ВыборкаХарактеристик.Заказано = 0, 0, Сумма/ВыборкаХарактеристик.Заказано * ВсегоОсталосьКоличество);
				
			НоваяСтрока = Неопределено;
			ВыборкаЗаказы = ВыборкаХарактеристик.Выбрать(ОбходРезультатаЗапроса.Прямой);  
			
			Пока ВыборкаЗаказы.Следующий() Цикл
				
				Если ВсегоОсталосьКоличество=0 Тогда
					Прервать;
				КонецЕсли;
				Если ВыборкаЗаказы.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				ТекущееКоличество = Мин(ВыборкаЗаказы.Количество, ВыборкаЗаказы.КоличествоБазовое); 
				
				Отбор = Новый Структура ("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Коэффициент",
					ВыборкаЗаказы.Номенклатура,
					ВыборкаЗаказы.ХарактеристикаНоменклатуры,
					ВыборкаЗаказы.ЕдиницаИзмерения,
					ВыборкаЗаказы.Коэффициент
				);   
				МассивСтрок = Объект.Товары.НайтиСтроки(Отбор);
				Если МассивСтрок.Количество()> 0 Тогда 
					
					МассивСтрок[0].Количество         = МассивСтрок[0].Количество + ТекущееКоличество/?(ЗначениеЗаполнено(МассивСтрок[0].Коэффициент), МассивСтрок[0].Коэффициент, 1);
					МассивСтрок[0].КоличествоБазовое  = МассивСтрок[0].КоличествоБазовое + ТекущееКоличество;
					МассивСтрок[0].СтавкаНДС          = ВыборкаЗаказы.СтавкаНДС;
										
					Если ВыборкаЗаказы.СкидкаНаТовар <> МассивСтрок[0].СкидкаНаТовар Тогда
						МассивСтрок[0].СкидкаНаТовар = Справочники.ТипыСкидок.ПустаяСсылка();
						МассивСтрок[0].ПроцентСкидкиСтроки = 0;
					КонецЕсли;
					
					СуммаЗаказа = ?(РасчетВУправленческойВалюте, ВыборкаЗаказы.СуммаЗаказаУпр,  ВыборкаЗаказы.СуммаЗаказа);
					
					Если ВыборкаЗаказы.Количество=ВыборкаЗаказы.Заказано Тогда
						СуммаВсего = СуммаЗаказа;
					ИначеЕсли ВыборкаЗаказы.Заказано <> 0 Тогда
						СуммаВсего = (СуммаЗаказа/ВыборкаЗаказы.Заказано)*ВыборкаЗаказы.Количество;
					Иначе
						СуммаВсего = 0;
					КонецЕсли; 
					МассивСтрок[0].СуммаВсего = МассивСтрок[0].СуммаВсего + СуммаВсего;
					
					ТоварыСуммаВсегоПриИзменении(Объект, МассивСтрок[0], ПараметрыДействия);								
									
				Иначе	 
					НоваяСтрока = Объект.Товары.Добавить();
					НоваяСтрока.Номенклатура                = ВыборкаЗаказы.Номенклатура;
					НоваяСтрока.ХарактеристикаНоменклатуры  = ВыборкаЗаказы.ХарактеристикаНоменклатуры;
					НоваяСтрока.ЕдиницаИзмерения            = ВыборкаЗаказы.ЕдиницаИзмерения;
					НоваяСтрока.Коэффициент                 = ВыборкаЗаказы.Коэффициент;
					ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока,ПараметрыДействия);
					
					НоваяСтрока.Количество                  = ТекущееКоличество/?(ЗначениеЗаполнено(НоваяСтрока.Коэффициент), НоваяСтрока.Коэффициент, 1);
					НоваяСтрока.КоличествоБазовое           = ТекущееКоличество;
					НоваяСтрока.СтавкаНДС                   = ВыборкаЗаказы.СтавкаНДС;
					
					НоваяСтрока.СкидкаНаТовар = ВыборкаЗаказы.СкидкаНаТовар; 
					
					Если НЕ ЗначениеЗаполнено(Объект.СкидкаНаценка) ИЛИ Объект.СкидкаНаценка.СпособВычисления = Перечисления.СкидкиСпособВычисления.Абсолютная Тогда 
						НоваяСтрока.ПроцентСкидки = 0;  
					Иначе 
						НоваяСтрока.ПроцентСкидки = ВыборкаЗаказы.ПроцентСкидки;
					КонецЕсли;
					
					Если  НЕ ЗначениеЗаполнено(ВыборкаЗаказы.СкидкаНаТовар) ИЛИ ВыборкаЗаказы.СкидкаНаТовар.СпособВычисления = Перечисления.СкидкиСпособВычисления.Абсолютная Тогда 
						НоваяСтрока.ПроцентСкидкиСтроки = 0;
					Иначе 
						НоваяСтрока.ПроцентСкидкиСтроки = ВыборкаЗаказы.ПроцентСкидкиСтроки;
					КонецЕсли;   
						
					НоваяСтрока.ЗначениеСкидкиСтрокиИзменено 	= ВыборкаЗаказы.ЗначениеСкидкиСтрокиИзменено;
					НоваяСтрока.ЗначениеСкидкиШапкиИзменено 	= ВыборкаЗаказы.ЗначениеСкидкиШапкиИзменено;
					
					СуммаЗаказа = ?(РасчетВУправленческойВалюте, ВыборкаЗаказы.СуммаЗаказаУпр,  ВыборкаЗаказы.СуммаЗаказа);

					Если ВыборкаЗаказы.КоличествоБазовое=ВыборкаЗаказы.Количество Тогда
						СуммаВсего = СуммаЗаказа;							
					ИначеЕсли ВыборкаЗаказы.Заказано <> 0 Тогда
						СуммаВсего 			= (СуммаЗаказа/ВыборкаЗаказы.Заказано)*ТекущееКоличество;						
					Иначе
						СуммаВсего = 0;
					КонецЕсли; 
					
		
			        НоваяСтрока.СуммаВсего = СуммаВсего;
					ТоварыСуммаВсегоПриИзменении(Объект, НоваяСтрока,ПараметрыДействия);

				КонецЕсли;
								
				ВсегоОсталосьКоличество = ВсегоОсталосьКоличество - ТекущееКоличество;
				ВсегоОсталосьСумма = ВсегоОсталосьСумма - СуммаВсего; 
					
			КонецЦикла;
			
			Если ВсегоОсталосьКоличество>0 ИЛИ ВсегоОсталосьСумма>0 Тогда
				
				Если НЕ НоваяСтрока=Неопределено Тогда
					
					Если ВсегоОсталосьКоличество > 0 Тогда
						НоваяСтрока.Количество        = НоваяСтрока.Количество + (ВсегоОсталосьКоличество/НоваяСтрока.Коэффициент);
						НоваяСтрока.КоличествоБазовое = НоваяСтрока.КоличествоБазовое + ВсегоОсталосьКоличество;
						ТоварыКоличествоПриИзменении(Объект, НоваяСтрока,ПараметрыДействия); 
					КонецЕсли;
					
					НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего + ВсегоОсталосьСумма;
					
				ИначеЕсли ВсегоОсталосьСумма>0 Тогда
					
					НоваяСтрока = Объект.Товары.Добавить();
					НоваяСтрока.Номенклатура               = ВыборкаХарактеристик.Номенклатура;
					НоваяСтрока.ХарактеристикаНоменклатуры = ВыборкаХарактеристик.ХарактеристикаНоменклатуры;
					ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока,ПараметрыДействия);
					
					НоваяСтрока.СтавкаНДС         = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата).ОсновнаяСтавка;
					НоваяСтрока.Количество        = ВсегоОсталосьКоличество/?(НЕ ЗначениеЗаполнено(НоваяСтрока.Коэффициент),1,НоваяСтрока.Коэффициент);
					НоваяСтрока.КоличествоБазовое = НоваяСтрока.КоличествоБазовое + ВсегоОсталосьКоличество;
					ТоварыКоличествоПриИзменении(Объект, НоваяСтрока,ПараметрыДействия);
					
					НоваяСтрока.СуммаВсего = ВсегоОсталосьСумма;
				КонецЕсли;
				
				ТоварыСуммаВсегоПриИзменении(Объект, НоваяСтрока,ПараметрыДействия);
				
			КонецЕсли;	
		КонецЦикла;
		
	КонецЦикла;	
	
	// Пересчет скидок по бонусам
	ПараметрыДействия.Удалить("НеРассчитыватьБонусы");
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
		
КонецПроцедуры // ЗаполнитьРезервамиКонтрагента()

// Заполняет на основании заказа
//
// Параметры:
//  Объект          - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  ЗаказПокупателя - ДокументСсылка.
//
Процедура ЗаполнитьРезервамиПоЗаказу(Объект, ЗаказПокупателя) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("НеРассчитыватьБонусы", Истина);
	ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	ПараметрыДействия.Вставить("РассчитыватьСуммуОтСуммыВсего", Истина);
	
	// Очистим значения реквизита "Сумма скидки бонусами"
	ОчиститьСуммыСкидкиБонусами(Объект);
	
	Объект.СкидкаНаценка = ЗаказПокупателя.СкидкаНаценка;
	
	ВалютаЗаказа   = ЗаказПокупателя.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов;
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаЗаказа, Объект.Дата);
	КурсЗаказа     = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ВЫБОР
	|		КОГДА ЗаказыПокупателейОстатки.СкладКомпании = &СкладКомпании ТОГДА
	|			ЗаказыПокупателейОстатки.РезервОстаток
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК Количество,
	|	СУММА(ЗаказыПокупателейОстатки.ЗаказаноОстаток) КАК Заказано,
	|	СУММА(ЗаказыПокупателейОстатки.СуммаОстаток) КАК СуммаЗаказа,
	|	СУММА(ЗаказыПокупателейОстатки.СуммаУпрОстаток) КАК СуммаЗаказаУпр,
	|	МАКСИМУМ(ЕСТЬNULL(ЗаказПокупателяТовары.Количество * ЗаказПокупателяТовары.Коэффициент,1)) КАК КоличествоБазовое,
	|	МАКСИМУМ(ЕСТЬNULL(ЗаказПокупателяТовары.ЕдиницаИзмерения,Значение(Справочник.ЕдиницыИзмерения.ПустаяСсылка))) КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(ЕСТЬNULL(ЗаказПокупателяТовары.Коэффициент,1)) КАК Коэффициент,
	|	МАКСИМУМ(ЕСТЬNULL(ЗаказПокупателяТовары.СтавкаНДС, ЗаказыПокупателейОстатки.Номенклатура.СтавкаНДС)) КАК СтавкаНДС,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.НомерСтроки, 1000000) КАК НомерСтроки,
	|	МАКСИМУМ(ЕСТЬNULL(ЗаказПокупателяТовары.СкидкаНаТовар, ЗНАЧЕНИЕ(Справочник.ТипыСкидок.ПустаяСсылка))) КАК СкидкаНаТовар,
	|	МАКСИМУМ(ЕСТЬNULL(ЗаказПокупателяТовары.ПроцентСкидкиСтроки,0)) КАК ПроцентСкидкиСтроки,
	|	МАКСИМУМ(ЕСТЬNULL(ЗаказПокупателяТовары.ПроцентСкидки,0)) КАК ПроцентСкидки,
	|	МАКСИМУМ(ЕСТЬNULL(ЗаказПокупателяТовары.ЗначениеСкидкиШапкиИзменено,ЛОЖЬ)) КАК ЗначениеСкидкиШапкиИзменено,
	|	МАКСИМУМ(ЕСТЬNULL(ЗаказПокупателяТовары.ЗначениеСкидкиСтрокиИзменено,ЛОЖЬ)) КАК ЗначениеСкидкиСтрокиИзменено
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки("+?(Объект.Ссылка.Пустая(),"","&НаМомент")+",
	|	Контрагент = &Контрагент
	|	И (СкладКомпании = &СкладКомпании ИЛИ СкладКомпании = &СкладЗаказа) И Заказ = &Заказ) КАК ЗаказыПокупателейОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ПО
	|	ЗаказыПокупателейОстатки.Заказ = ЗаказПокупателяТовары.Ссылка
	|	И ЗаказыПокупателейОстатки.Номенклатура = ЗаказПокупателяТовары.Номенклатура
	|	И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказПокупателяТовары.ХарактеристикаНоменклатуры
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПокупателейОстатки.Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.НомерСтроки, 1000000)
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|		КОГДА ЗаказыПокупателейОстатки.СкладКомпании = &СкладКомпании ТОГДА
	|			ЗаказыПокупателейОстатки.РезервОстаток
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) > 0 
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(КоличествоБазовое),
	|	МАКСИМУМ(Количество),
	|	МАКСИМУМ(СуммаЗаказа),
	|	МАКСИМУМ(СуммаЗаказаУпр),
	|	МАКСИМУМ(Заказано)
	|ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НаМомент",      Новый МоментВремени(Объект.Дата, Объект.Ссылка));
	Запрос.УстановитьПараметр("Контрагент",    Объект.Контрагент);
	Запрос.УстановитьПараметр("Заказ",         ЗаказПокупателя);
	Запрос.УстановитьПараметр("СкладКомпании", ?(ЗначениеЗаполнено(Объект.СкладКомпании),
		Объект.СкладКомпании, 
		ПраваИНастройкиПользователя.Значение("ОсновнойСкладКомпании", Объект))
	);
	Запрос.УстановитьПараметр("СкладЗаказа",   ЗаказПокупателя.СкладКомпании);
	
	ВыборкаНоменклатуры = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		ВыборкаХарактеристик = ВыборкаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХарактеристик.Следующий() Цикл
			
			ВсегоОсталось             = ВыборкаХарактеристик.Количество;
			КоличествоБазовоеПоЗаказу = ВыборкаХарактеристик.КоличествоБазовое;
			
			Если Объект.ВалютаДокумента = Константы.ВалютаУправленческогоУчетаКомпании.Получить() Тогда
				
				Если ВыборкаХарактеристик.Заказано <= ВыборкаХарактеристик.Количество Тогда
					
					СуммаОсталось = ВыборкаХарактеристик.СуммаЗаказаУпр;
					
				Иначе
					
					СуммаОсталось = ВыборкаХарактеристик.СуммаЗаказаУпр/ВыборкаХарактеристик.Заказано*ВыборкаХарактеристик.Количество;
					
				КонецЕсли;
				
			Иначе
				
				Если ВыборкаХарактеристик.Заказано <= ВыборкаХарактеристик.Количество Тогда
					
					СуммаОсталось = ВыборкаХарактеристик.СуммаЗаказа;
					
				Иначе
					
					СуммаОсталось = ВыборкаХарактеристик.СуммаЗаказа/ВыборкаХарактеристик.Заказано*ВыборкаХарактеристик.Количество;
					
				КонецЕсли;
				
				СуммаОсталось = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					СуммаОсталось,
					ВалютаЗаказа,
					КурсЗаказа,
					Объект.ВалютаДокумента,
					Объект.КурсДокумента
				);
				
			КонецЕсли;
			
			ВыборкаДетали = ВыборкаХарактеристик.Выбрать(ОбходРезультатаЗапроса.Прямой);
			НоваяСтрока   = Неопределено;
			
			Пока ВыборкаДетали.Следующий() Цикл
				Если ВсегоОсталось=0 Тогда
					Прервать;
				КонецЕсли;
				Если ВыборкаДетали.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				Если КоличествоБазовоеПоЗаказу = 1 Тогда
					КоличествоСтроки = ВыборкаДетали.Количество;
				Иначе
					КоличествоСтроки = ВыборкаДетали.Количество*(ВыборкаДетали.КоличествоБазовое/КоличествоБазовоеПоЗаказу);
				КонецЕсли;
				ТекущееКоличество = Мин(ВсегоОсталось, КоличествоСтроки);
				
				НоваяСтрока = Объект.Товары.Добавить();
				НоваяСтрока.Номенклатура                = ВыборкаДетали.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры  = ВыборкаДетали.ХарактеристикаНоменклатуры;
				НоваяСтрока.ЕдиницаИзмерения            = ВыборкаДетали.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент                 = ВыборкаДетали.Коэффициент;
				ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока,ПараметрыДействия);
				
				НоваяСтрока.Количество                  = ТекущееКоличество/?(ЗначениеЗаполнено(НоваяСтрока.Коэффициент), НоваяСтрока.Коэффициент, 1);
				НоваяСтрока.КоличествоБазовое           = ТекущееКоличество;
				НоваяСтрока.СтавкаНДС                   = ВыборкаДетали.СтавкаНДС;
				
				НоваяСтрока.СкидкаНаТовар = ВыборкаДетали.СкидкаНаТовар;
				НоваяСтрока.ПроцентСкидки = ВыборкаДетали.ПроцентСкидки;
				НоваяСтрока.ПроцентСкидкиСтроки = ВыборкаДетали.ПроцентСкидкиСтроки;
				НоваяСтрока.ЗначениеСкидкиСтрокиИзменено 	= ВыборкаДетали.ЗначениеСкидкиСтрокиИзменено;
				НоваяСтрока.ЗначениеСкидкиШапкиИзменено 	= ВыборкаДетали.ЗначениеСкидкиШапкиИзменено;
				
				НоваяСтрока.СуммаВсего = (СуммаОсталось/ВсегоОсталось)*ТекущееКоличество;
				ТоварыСуммаВсегоПриИзменении(Объект, НоваяСтрока,ПараметрыДействия);
				
				ВсегоОсталось = ВсегоОсталось - ТекущееКоличество;
				СуммаОсталось = СуммаОсталось - НоваяСтрока.СуммаВсего;
				
			КонецЦикла;
			
			Если ВсегоОсталось>0 ИЛИ СуммаОсталось>0 Тогда
				
				Если НЕ НоваяСтрока=Неопределено Тогда
					
					Если ВсегоОсталось > 0 Тогда
						НоваяСтрока.Количество        = НоваяСтрока.Количество + (ВсегоОсталось/НоваяСтрока.Коэффициент);
						НоваяСтрока.КоличествоБазовое = НоваяСтрока.КоличествоБазовое + ВсегоОсталось;
						ТоварыКоличествоПриИзменении(Объект, НоваяСтрока,ПараметрыДействия); 
					КонецЕсли;
					
					НоваяСтрока.СуммаВсего = НоваяСтрока.СуммаВсего + СуммаОсталось;
					
				ИначеЕсли ВсегоОсталось>0 Тогда
					
					НоваяСтрока = Объект.Товары.Добавить();
					НоваяСтрока.Номенклатура               = ВыборкаХарактеристик.Номенклатура;
					НоваяСтрока.ХарактеристикаНоменклатуры = ВыборкаХарактеристик.ХарактеристикаНоменклатуры;
					ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока,ПараметрыДействия);
					
					НоваяСтрока.СтавкаНДС         = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата).ОсновнаяСтавка;
					НоваяСтрока.Количество        = ВсегоОсталось/?(НЕ ЗначениеЗаполнено(НоваяСтрока.Коэффициент),1,НоваяСтрока.Коэффициент);
					НоваяСтрока.КоличествоБазовое = НоваяСтрока.КоличествоБазовое + ВсегоОсталось;
					ТоварыКоличествоПриИзменении(Объект, НоваяСтрока,ПараметрыДействия);
					
					НоваяСтрока.СуммаВсего = СуммаОсталось;
					
				КонецЕсли;
				
				ТоварыСуммаВсегоПриИзменении(Объект, НоваяСтрока,ПараметрыДействия);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;    
			
	// Пересчет скидок по бонусам
	ПараметрыДействия.Удалить("НеРассчитыватьБонусы");
	ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ЗаполнитьРезервамиКонтрагента()

// процедура формирование таблицы для расчета суммы скидки по бонусам
//
Функция СформироватьСводнуюТаблицу(Объект)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Строка");
	Таблица.Колонки.Добавить("Таблица");
	Таблица.Колонки.Добавить("Сумма");
	Таблица.Колонки.Добавить("РаспределенноеЗначение");
	
	Для Каждого Строка Из Объект.Товары Цикл
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Строка                 = Строка;
		НоваяСтрока.Таблица                = "Товары";
		НоваяСтрока.Сумма                  = Строка.СуммаВсего + Строка.СуммаСкидкиБонусами;
		НоваяСтрока.РаспределенноеЗначение = 0;
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции // СформироватьСводнуюТаблицу()

// Процедура для очистки табличной части документа от расчитанной суммы скидки номенклатуры по бонусной программе.
//
Процедура ОчиститьСуммыСкидкиБонусами(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеРассчитыватьБонусы", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		ТекущаяСтрока.СуммаВсего = ТекущаяСтрока.СуммаВсего + ТекущаяСтрока.СуммаСкидкиБонусами;
		ТекущаяСтрока.СуммаСкидкиБонусами = 0;
	КонецЦикла;
	
КонецПроцедуры // ОчиститьСуммыСкидкиБонусами()

// Процедура расчета суммы скидки номенклатуры по бонусной программе
//
Процедура ПерерасчетСуммыСкидкиБонусами(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеРассчитыватьБонусы", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	// сравним бонусные баллы с суммой всего
	Если НЕ БонусныеПрограммыСервер.БонуснаяПрограммаАктивна(Объект.Карточка.БонуснаяПрограмма, Объект.Дата)
		ИЛИ БонусныеПрограммыСервер.ДисконтнаяКартаЗаблокирована(Объект.Карточка) Тогда
		Объект.КоличествоКСписанию = 0;
		Объект.КоличествоКНачислению = 0;
		ОчиститьСуммыСкидкиБонусами(Объект);
		Возврат;
	КонецЕсли;
	
	Объект.КоличествоКСписанию = Мин(Объект.КоличествоКСписанию,
	БонусныеПрограммыСервер.КоличествоБалловВСуммеДокумента(Объект, Объект.Карточка.БонуснаяПрограмма),
	БонусныеПрограммыСервер.МаксимальноеКоличествоБаллов(Объект, Объект.Карточка.БонуснаяПрограмма));
	
	// расписываем сумму по строкам документа документам
	СводнаяТаблица = СформироватьСводнуюТаблицу(Объект);
	
	СтруктураПараметров 						= БонусныеПрограммыСервер.СоздатьПараметрыРаспределитьСуммуПоТаблице();
	СтруктураПараметров.Таблица 				= СводнаяТаблица;
	СтруктураПараметров.СуммаРаспределения 		= БонусныеПрограммыСервер.БаллыВВалюту(Объект.КоличествоКСписанию, Объект.Карточка.БонуснаяПрограмма, Объект.ВалютаДокумента, Объект.Дата);
	СтруктураПараметров.КолонкаРаспределения 	= "Сумма";
	
	БонусныеПрограммыСервер.РаспределитьСуммуПоТаблице(СтруктураПараметров);
	
	Для Каждого Строка Из СводнаяТаблица Цикл
		Строка.Строка.СуммаВсего          = Строка.Сумма;
		Строка.Строка.СуммаНДС            = Строка.Строка.СуммаВсего*Строка.Строка.СтавкаНДС.Ставка/(100+Строка.Строка.СтавкаНДС.Ставка);
		Строка.Строка.СуммаСкидкиБонусами = Строка.РаспределенноеЗначение;
	КонецЦикла;
	
	БонусныеПрограммыСервер.РассчитатьБонусныеБаллыКНачислению(Объект, Объект.Карточка.БонуснаяПрограмма);
	
КонецПроцедуры // ПерерасчетСуммыСкидкиБонусами()

// Обработчик события возникающего при изменении данных реквизита "Количество к списанию".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КоличествоКСписаниюПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ПерерасчетСуммыСкидкиБонусами(Объект);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // КоличествоКСписаниюПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автомобиль".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобильПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Владелец = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Объект.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин, Объект.Дата);
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
		Владелец = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(Владелец)) И (НЕ Объект.Контрагент = Владелец) Тогда
		Если (ПараметрыДействия.Свойство("НеобходимоПерезаполнитьЗаказчика")
			И ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеобходимоПерезаполнитьЗаказчика", Ложь))
			ИЛИ НЕ ПараметрыДействия.Свойство("НеобходимоПерезаполнитьЗаказчика")
			ИЛИ НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			
			Объект.Контрагент = Владелец;
			КонтрагентПриИзменении(Объект, ПараметрыДействия);
			
		Иначе
			ПараметрыДействия.НеобходимоПерезаполнитьЗаказчика = Истина;
			ПараметрыДействия.Вставить("ВладелецАвтомобиля", Владелец);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // КоличествоКСписаниюПриИзменении()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	Обработчик = ?(
		ПраваИНастройкиПользователя.Значение("ЗапросВалютыПечатногоДокумента"),
		"УправлениеПечатьюАвтосалонКлиент.НачатьВыборВалютыДляПечати",
		"");
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.РеализацияТоваров",
		"ПФ_MXL_РеализацияТоваров",
		НСтр("ru = 'Расходная накладная'"),
		СсылкаНаДокумент,
		Обработчик);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.РеализацияТоваров",
		"ПФ_MXL_ПодборочныйЛист",
		НСтр("ru = 'Подборочный лист'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ12",
		НСтр("ru = 'ТОРГ-12 (Товарная накладная)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТТН30122011_Приложение4",
		НСтр("ru = 'Приложение №4 (Транспортная накладная)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТТН",
		НСтр("ru = '1-Т (Товарно-транспортная накладная)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.РеализацияТоваров",
		"ПФ_MXL_М15",
		НСтр("ru = 'М15 (Накладная на отпуск материалов на сторону)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Ценники",
		НСтр("ru = 'Печать ценников'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати",
		,,,,
		Ложь);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Этикетки",
		НСтр("ru = 'Печать этикеток'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати",
		,,,,
		Ложь);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьУПД",
		"ПФ_MXL_УПД",
		НСтр("ru = 'Универсальный передаточный документ'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.РеализацияТоваров",
		"ПФ_MXL_АктОбОказанииУслуг",
		НСтр("ru = 'Акт об оказании услуг'"),
		СсылкаНаДокумент,
		Обработчик);  
	СписокХО = Новый СписокЗначений; 
	СписокХО.Добавить(Справочники.ХозОперации.АктОбОказанииУслуг);
	СписокХО.Добавить(Справочники.ХозОперации.РеализацияАгентскихУслуг);
	УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандыПечати.Найти("ПФ_MXL_АктОбОказанииУслуг"), "ХозОперация", СписокХО, 
												ВидСравненияКомпоновкиДанных.ВСписке);	
		
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик события формирования печатной формы.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - информация для заполнения письма при отправке печатной формы электронной почтой.
//                                     Содержит следующие поля:
//    ** Получатель - Строка, СписокЗначений, Массив - список получателей письма;
//    ** Тема - Строка - Тема письма,
//    ** Текст - Строка - Текст письма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_РеализацияТоваров") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_РеализацияТоваров",
															НСтр("ru = 'Реализация товаров'"),
															ПечатьРеализацияТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПодборочныйЛист") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ПодборочныйЛист",
															НСтр("ru = 'Подборочный лист'"),
															ПечатьПодборочныйЛист(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_М15") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_М15",
															"М-15",
															ПечатьМ15(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_АктОбОказанииУслуг") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_АктОбОказанииУслуг",
															НСтр("ru = 'Акт об оказании услуг'"),
															ПечатьАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
КонецПроцедуры // Печать()

// Функция печати реализации товаров.
//
Функция ПечатьРеализацияТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваров_РеализацияТоваров";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Валюта печати
		ВалютаПечатногоДокумента = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПечати,
			"ВалютаПечатногоДокумента", Документ.ВалютаДокумента);
		
		// Получим макет печатной формы.
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваров.ПФ_MXL_РеализацияТоваров");
		
		// Получение необходимых областей.
		ОбластьШапкаТаблицы = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		ОбластьШапкаТаблицы.Параметры.Товар = ?(Документ.ХозОперация = Справочники.ХозОперации.АктОбОказанииУслуг,
			"Услуга", "Товар");
		
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьАвтомобиль      = Макет.ПолучитьОбласть("Автомобиль");
		Если Документ.ХозОперация = Справочники.ХозОперации.АктОбОказанииУслуг
			ИЛИ Документ.ХозОперация = Справочники.ХозОперации.РеализацияАгентскихУслуг Тогда
			ОбластьПодвал = Макет.ПолучитьОбласть("ПодвалАкта");
		Иначе
			ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОбластьЗаголовок.Параметры,Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		// * //
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПокупателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Контрагент, , ДополнительныеПараметры);
		ОбластьЗаголовок.Параметры.ПредставлениеСклада =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СкладКомпании);
		// * //
		
		ОбластьЗаголовок.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
		
		// Выведем или удалим ШК.
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		Если ЗначениеЗаполнено(Документ.Автомобиль) Тогда
			ОбластьАвтомобиль.Параметры.ПредставлениеАвтомобиля = СокрЛП(Документ.Автомобиль);
			ТабличныйДокумент.Вывести(ОбластьАвтомобиль);
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		// Готовим шапку
		НомерСтраницы = 2; НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура();
		СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", ВалютаПечатногоДокумента);
		СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
		СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
		СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы; 
		
		// Заполняем ТЧ
		ВыборкаТабличнойЧасти = Документ.Товары.Выгрузить();
		ПерерасчетВВалюте = Ложь;
		// Пересчет сумм по выбранной валюте.
		Если ВыборкаТабличнойЧасти.Количество() > 0
			И ВалютаПечатногоДокумента <> Документ.ВалютаДокумента Тогда
			ДокументОбъектСтруктура = УправлениеПечатьюПлатформа.ДанныеДокументаДляПерерасчетаТаблицы();
			ЗаполнитьЗначенияСвойств(ДокументОбъектСтруктура, Документ);
			ДокументОбъектСтруктура.Документ = Документ;
			
			ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ВыборкаТабличнойЧасти,
				ДокументОбъектСтруктура,
				ВалютаПечатногоДокумента);
			ПерерасчетВВалюте = Истина;
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,
				УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ));
			
			// Доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", ВалютаПечатногоДокумента);
				СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
				СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
				СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// Заполнение подвала и итогов.
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		Если ПерерасчетВВалюте Тогда
			
			СуммаИтого = ВыборкаТабличнойЧасти.Итог("СуммаВсего");
			
		Иначе
			СуммаИтого = Документ.СуммаДокумента;
			
		КонецЕсли;
		
		ОбластьПодвал.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
		ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаИтого, ФорматВыводаСуммы);
		НДСВсего = ВыборкаТабличнойЧасти.Итог("СуммаНДС");
		ОбластьПодвал.Параметры.НДСВсего = Формат(НДСВсего, ФорматВыводаСуммы);
		Если ВыборкаТабличнойЧасти.Итог("СуммаСкидки") > 0
			ИЛИ ВыборкаТабличнойЧасти.Итог("СуммаСкидкиСтроки") > 0
			ИЛИ ВыборкаТабличнойЧасти.Итог("СуммаСкидкиБонусами") > 0 Тогда
			
			СкидкаВсего = ВыборкаТабличнойЧасти.Итог("СуммаСкидки") + ВыборкаТабличнойЧасти.Итог("СуммаСкидкиБонусами");
			Попытка
				СкидкаВсего = СкидкаВсего + ВыборкаТабличнойЧасти.Итог("СуммаСкидкиСтроки");
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка расчета скидки'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			ОбластьПодвал.Параметры.СкидкаВсего = Формат(СкидкаВсего, ФорматВыводаСуммы);
			
		КонецЕсли;
		ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'") + " " + ВыборкаТабличнойЧасти.Количество()
			+ " " + НСтр("ru = 'на сумму'") + " " 
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаИтого, ВалютаПечатногоДокумента);
		
		// сформируем информацию о бонусных баллах
		ТекстБаллы = "";
		Если Документ.КоличествоКСписанию > 0 Тогда
			Текст = СтрШаблон(НСтр("ru = 'Для оплаты использованы бонусные баллы в количестве %1 на сумму %2 %3.'"),
				Документ.КоличествоКСписанию,
				ВыборкаТабличнойЧасти.Итог("СуммаСкидкиБонусами"),
				ВалютаПечатногоДокумента);
			ТекстБаллы = ТекстБаллы + Текст;
		КонецЕсли;
		
		Если Документ.КоличествоКНачислению > 0 Тогда
			Текст = СтрШаблон(НСтр("ru = 'Было начисленно %1 бонусных баллов на сумму в %2 %3.'"),
				Документ.КоличествоКНачислению,
				Документ.КоличествоКНачислению * Документ.Карточка.БонуснаяПрограмма.КратностьБонусов,
				Документ.Карточка.БонуснаяПрограмма.ВалютаБонуса);
			ТекстБаллы = ТекстБаллы + ?(ПустаяСтрока(ТекстБаллы), "", " ") + Текст;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекстБаллы) Тогда
			ТекОбласть = ОбластьПодвал.Область(5,, 5);
			ТекОбласть.АвтовысотаСтроки = Ложь;
			ТекОбласть.ВысотаСтроки = 1;
			ОбластьПодвал.Область(5, 2, 5, 2).Текст = "";
		Иначе
			ОбластьПодвал.Параметры.БонусныеБаллы = ТекстБаллы;
		КонецЕсли;
		
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПолучилКонтрагент", "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// Блок области
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьРеализацияТоваров()

// Функция печати подборочного лист
//
Функция ПечатьПодборочныйЛист(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваров_ПодборочныйЛист";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// получим макет печатной формы
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ПодборочныйЛист");
		
		ВыборкаТабличнойЧасти = Документ.Товары;
		
		// Настроим макет отчета.
		// Удаляем колонку "ЯчейкаХранения", если ни в одной из номенклатур этот реквизит не заполнен.
		// Увеличиваем за ее счет колонку "Товар".
		ЕстьЯчейкиХранения = Ложь;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.Ячейка) Тогда
				ЕстьЯчейкиХранения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьЯчейкиХранения Тогда
			ОбластьТовар = Макет.Область("Товар");
			ОбластьЯчейкаХранения = Макет.Область("ЯчейкаХранения");
			ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ОбластьЯчейкаХранения.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьЯчейкаХранения, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		// получение необходимых областей
		ОбластьШапкаТаблицы = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		ЗаполнитьЗначенияСвойств(ОбластьЗаголовок.Параметры, Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ,
			НСтр("ru = 'Подборочный лист'"));
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		// * //
		ОбластьЗаголовок.Параметры.Поставщик  = "Поставщик:";
		ОбластьЗаголовок.Параметры.Склад      = "Склад:";
		ОбластьЗаголовок.Параметры.Покупатель = "Покупатель:";
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПокупателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Контрагент, , ДополнительныеПараметры);
		ОбластьЗаголовок.Параметры.ПредставлениеСклада =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СкладКомпании);
		// * //
		
		// выведем или удалим ШК
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		// готовим шапку
		НомерСтраницы = 2; НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура();
		СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
		СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
		СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
		СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// заполняем ТЧ
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ);
			// В возвращаемой структуре нет ключа "Ячейка", создадим его
			СтруктураСтроки.Вставить("Ячейка");
			// Если ЯчейкаХранения не определена для данной номенклатуры, то печатаем пробел.
			ЯчейкаДляПечати = СокрЛП(СтрокаТЧ.Ячейка.Код);
			СтруктураСтроки.Ячейка 	= ?(НЕ ЗначениеЗаполнено(ЯчейкаДляПечати), " ", ЯчейкаДляПечати);
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, СтруктураСтроки);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
				СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
				СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
				СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПолучилКонтрагент", "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// блок области
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьПодборочныйЛист()

Функция ПолучитьДанныеДляПечатиТОРГ12(Объект) Экспорт
	ДанныеОбъекта = Новый Структура();
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"          , Объект.КурсДокумента);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("ДокументОснование"      , Объект.ДоговорВзаиморасчетов);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  , Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("ОснованиеДата"          , Формат(Объект.ДоговорВзаиморасчетов.ДатаНачала, "ЧЦ=; ДФ=dd.MM.yyyy"));
	ДанныеОбъекта.Вставить("ОснованиеНомер"         , Объект.ДоговорВзаиморасчетов.НомерДоговора);
	ДанныеОбъекта.Вставить("КодПоОКПО"              , Объект.Организация.КодПоОКПО);
	ДанныеОбъекта.Вставить("РасчетныйСчетДокумента" , "");

	// Выборка табличной части
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровТовары.НомерСтроки КАК НомерСтроки,
	               |	РеализацияТоваровТовары.Номенклатура КАК Номенклатура,
				   |	РеализацияТоваровТовары.Содержание КАК Содержание,
	               |	РеализацияТоваровТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	РеализацияТоваровТовары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	               |	РеализацияТоваровТовары.Номенклатура.Артикул КАК Код,
	               |	РеализацияТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	РеализацияТоваровТовары.Количество КАК Количество,
	               |	РеализацияТоваровТовары.Коэффициент КАК Коэффициент,
	               |	РеализацияТоваровТовары.КоличествоБазовое КАК КоличествоБазовое,
	               |	РеализацияТоваровТовары.СуммаВсего КАК СуммаВсего,
	               |	РеализацияТоваровТовары.СуммаВсего - РеализацияТоваровТовары.СуммаНДС КАК СуммаБезНДС,
	               |	(РеализацияТоваровТовары.СуммаВсего - РеализацияТоваровТовары.СуммаНДС) / РеализацияТоваровТовары.Количество КАК ЦенаБезНДС,
	               |	РеализацияТоваровТовары.СуммаНДС КАК СуммаНДС,
	               |	РеализацияТоваровТовары.СтавкаНДС КАК СтавкаНДС,
	               |	РеализацияТоваровТовары.Цена КАК Цена,
	               |	РеализацияТоваровТовары.СуммаСкидки КАК СуммаСкидки,
	               |	РеализацияТоваровТовары.СуммаСкидкиСтроки КАК СуммаСкидкиСтроки,
	               |	РеализацияТоваровТовары.ГТД КАК ГТД,
	               |	РеализацияТоваровТовары.СуммаСкидкиБонусами КАК СуммаСкидкиБонусами
	               |ИЗ
	               |	Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
	               |ГДЕ
	               |	РеализацияТоваровТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Товары = Запрос.Выполнить().Выгрузить();

	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти"  , Товары);
    	
	// свойства 
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПоставщикКонтрагент);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Плательщик); 

	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства); 
	ДатаОтгрузки = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", ЗначенияСвойствОбъекта);	
	ДанныеОбъекта.Вставить("ДатаОтгрузки"     , ?(НЕ ЗначениеЗаполнено(ДатаОтгрузки),"""___""____________ 20___",Формат(ДатаОтгрузки,"ДЛФ=D")));
	
   	ДанныеОбъекта.Вставить("Поставщик"             , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ПоставщикКонтрагент", ЗначенияСвойствОбъекта,Объект.Организация));
	ДанныеОбъекта.Вставить("Плательщик"            , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Плательщик", ЗначенияСвойствОбъекта,Объект.Контрагент));
	
	ДанныеОбъекта.Вставить("Грузоотправитель"        , ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, Объект.Организация));
	ДанныеОбъекта.Вставить("Грузополучатель"         , ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, Объект.Контрагент));
	ДанныеОбъекта.Вставить("Руководитель"     	     , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Руководитель"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Отпустил"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Отпустил"));  
	ДанныеОбъекта.Вставить("Принял"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Принял"));
	ДанныеОбъекта.Вставить("Получил"          		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Получил")); 
	ДанныеОбъекта.Вставить("ГрузополучательПоОКПО"   , ДанныеОбъекта.Грузополучатель.КодПоОКПО);
	ДанныеОбъекта.Вставить("ПоставщикПоОКПО"         , ДанныеОбъекта.Поставщик.КодПоОКПО);
	ДанныеОбъекта.Вставить("ПлательщикПоОКПО"        , ДанныеОбъекта.Плательщик.КодПоОКПО);
			
	Возврат ДанныеОбъекта;
КонецФункции

Функция ПолучитьДанныеДляПечатиТ1(Объект) Экспорт
	ДанныеОбъекта = Новый Структура();
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КурсРегл  = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(ВалютаРегл, Объект.Дата);
	ВалютаДокумента = Объект.ВалютаДокумента;
	КурсДокумента = Объект.КурсДокумента;
	
	// данные документа
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , ВалютаРегл);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	
	ВыборкаТабличнойЧасти = Объект.Товары.Выгрузить();
	
	ПерерасчетВВалюте = Ложь;
	Если ВалютаДокумента <> ВалютаРегл Тогда
		
		ДокументОбъектСтруктура = УправлениеПечатьюПлатформа.ДанныеДокументаДляПерерасчетаТаблицы();
		ЗаполнитьЗначенияСвойств(ДокументОбъектСтруктура, Объект);
		ДокументОбъектСтруктура.Документ = Объект;
		
		ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ВыборкаТабличнойЧасти,
			ДокументОбъектСтруктура,
			ВалютаРегл);
		ПерерасчетВВалюте = Истина;
		
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти", ВыборкаТабличнойЧасти);
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Плательщик);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Заказчик);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства);
	
	Если ЗначениеЗаполнено(Объект.Грузоотправитель) Тогда
		
		ДанныеОбъекта.Вставить("Грузоотправитель", Объект.Грузоотправитель);
		
	Иначе
		
		ДанныеОбъекта.Вставить("Грузоотправитель", Объект.Организация);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Грузополучатель) Тогда
		
		ДанныеОбъекта.Вставить("Грузополучатель", Объект.Грузополучатель);
		
	Иначе
		
		ДанныеОбъекта.Вставить("Грузополучатель", Объект.Контрагент);
		
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("Плательщик", УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Плательщик", ЗначенияСвойствОбъекта,Объект.Контрагент));
	ДанныеОбъекта.Вставить("Заказчик", УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Заказчик", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("ЛицензионнаяКарточка", "");
	ДанныеОбъекта.Вставить("СрокДоставки", "");
	ДанныеОбъекта.Вставить("Перевозчик", Объект.Перевозчик);
	ДанныеОбъекта.Вставить("МаркаАвтомобиля", Объект.МодельАвтомобиля);
	ДанныеОбъекта.Вставить("ГосНомерАвтомобиля", Объект.ГосНомерАвтомобиля);
	ДанныеОбъекта.Вставить("Водитель", Объект.Водитель);
	ДанныеОбъекта.Вставить("ВодительскоеУдостоверение", Объект.НомерВодительскогоУдостоверения);
	ДанныеОбъекта.Вставить("ВидПеревозки", "");
	ДанныеОбъекта.Вставить("ПунктПогрузки", "");
	ДанныеОбъекта.Вставить("ПунктРазгрузки", Объект.АдресДоставки);
	ДанныеОбъекта.Вставить("МаркаПрицепа", Объект.МодельПрицепа);
	ДанныеОбъекта.Вставить("ГосНомерПрицепа", Объект.ГосНомерПрицепа);
	ДанныеОбъекта.Вставить("ОписаниеГруза", Объект.ОписаниеГруза);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("Отпустил", УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Отпустил", "Отпустил"));
	ДанныеОбъекта.Вставить("Получил", УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Получил", "Получил"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер", УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Руководитель", УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Руководитель"));
	
	Возврат ДанныеОбъекта;
	
КонецФункции

// Формирует печатную форму "М15"
// 
Функция ПечатьМ15(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваров_М15";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;

	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы 	   = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_М15");
		
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьРазделителя 	   = Макет.ПолучитьОбласть("Разделитель");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ОбластьЗаголовок.Параметры.НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации	= УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.КонтрагентНаименование = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Контрагент, , ДополнительныеПараметры);
		ОбластьЗаголовок.Параметры.ОрганизацияПоОКПО = Документ.Организация.КодПоОКПО;
		ОбластьЗаголовок.Параметры.ДатаСоставления = Формат(Документ.Дата, "ДФ = дд.ММ.гггг");
		ОбластьЗаголовок.Параметры.ПодразделениеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			Документ.ПодразделениеКомпании, Документ.Дата);
		Если ЗначениеЗаполнено(Документ.ДоговорВзаиморасчетов) Тогда 
			ОбластьЗаголовок.Параметры.Основание =
				УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ДоговорВзаиморасчетов.Ссылка);
		КонецЕсли;
		
		// свойства
		ИскомыеСвойства = Новый Массив();
		ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Получатель);
		ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Документ, Истина, Истина, ИскомыеСвойства);
		ОбластьЗаголовок.Параметры.Получатель = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Получатель",
			ЗначенияСвойствОбъекта);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// выводим заголовок таблицы
		ОбластьШапкаТаблицы.Параметры.Валюта = Документ.ВалютаДокумента;
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		ВыборкаСтрок = Документ.Товары;
		
		// подвал выводим во временный
		ОбластьПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью =
			ЧислоПрописью(ВыборкаСтрок.Количество(), , ",,,,,,,,0");
		ОбластьПодвал.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ВыборкаСтрок.Итог("Сумма"),
			Документ.ВалютаДокумента);
		ОбластьПодвал.Параметры.ИтогНДС = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ВыборкаСтрок.Итог("СуммаНДС"),
			Документ.ВалютаДокумента);
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Руководитель"));
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ГлавныйБухгалтер"));
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил"));
		Получил = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПолучилКонтрагент");
		Получил.Вставить("ПолучилПредставление", Получил.ПолучилКонтрагентПредставление);
		ОбластьПодвал.Параметры.Заполнить(Получил);
		ТабДокументПодвал = Новый ТабличныйДокумент;
		ТабДокументПодвал.Вывести(ОбластьПодвал);
		
		// сразу два, т.к. выводим на второй странице только
		НомерСтраницы = 2;
		НомерСтраницыПред = НомерСтраницы;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 

		// Выводим многострочную часть документа
		Для каждого СтрокаТЧ Из ВыборкаСтрок Цикл
			СтавкаНДС = СтрокаТЧ.СтавкаНДС.Ставка;
			ОбластьСтрока.Параметры.Заполнить(СтрокаТЧ);
			ОбластьСтрока.Параметры.ТоварНаименование = 
				УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТЧ.Номенклатура);
			ОбластьСтрока.Параметры.ТоварКод					 = СтрокаТЧ.Номенклатура.Код;
			ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод 		 = СтрокаТЧ.Номенклатура.БазоваяЕдиницаИзмерения.Код;
			ОбластьСтрока.Параметры.ЕдиницаИзмеренияНаименование = СтрокаТЧ.Номенклатура.БазоваяЕдиницаИзмерения;
			ОбластьСтрока.Параметры.Количество 					 = Формат(СтрокаТЧ.Количество, ФорматВыводаКоличества);
			ОбластьСтрока.Параметры.Цена 						 = Формат(СтрокаТЧ.Сумма / СтрокаТЧ.Количество, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СуммаБезНДС 				 = Формат(СтрокаТЧ.Сумма, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СуммаСНДС 					 = Формат(СтрокаТЧ.СуммаВсего, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СуммаНДС					 = Формат(СтрокаТЧ.СуммаНДС, ФорматВыводаСуммы);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если ВыборкаСтрок.Индекс(СтрокаТЧ) = ВыборкаСтрок.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ТабДокументПодвал);
			КонецЕсли;
			
			// выводим строку, делая проверку попадания на лист
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьРазделителя, НомерСтраницы, , Документ, мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
		КонецЦикла;
		
		// выводим подвал
		ТабличныйДокумент.Вывести(ТабДокументПодвал);
	
		// Зададим параметры макета
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьМ15()

// Формирует печатную форму "Акт об оказании услуг"
// Возвращает сформированный табличный документ.
//
Функция ПечатьАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваров_АктОбОказанииУслуг";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	// зададим параметры макета
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если Документ.ХозОперация <> Справочники.ХозОперации.АктОбОказанииУслуг
			И Документ.ХозОперация <> Справочники.ХозОперации.РеализацияАгентскихУслуг Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Печатная форма Акта об оказании услуг не доступна для Хоз.операции <%1>'"),
					Документ.ХозОперация
				)
			);
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		ДатаПечатная = Документ.Дата;
		
		// Валюта печати
		ВалютаПечатногоДокумента = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПечати,
			"ВалютаПечатногоДокумента", Документ.ВалютаДокумента);
		
		СистемаНалогообложения 	= ПолучитьЗначениеУчетнойПолитики("СистемаНалогообложения", Документ.Организация);
		УпрощеннаяСистема 		= СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная;

		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваров.ПФ_MXL_АктОбОказанииУслуг");
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		НомерДляПечати = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		
		ТаблицаРабот = Документ.Товары.Выгрузить();
		
		// Пересчет сумм по выбранной валюте.
		Если ТаблицаРабот.Количество() > 0
			И ВалютаПечатногоДокумента <> Документ.ВалютаДокумента Тогда
				ДокументОбъектСтруктура = УправлениеПечатьюПлатформа.ДанныеДокументаДляПерерасчетаТаблицы();
				ЗаполнитьЗначенияСвойств(ДокументОбъектСтруктура, Документ);
				ДокументОбъектСтруктура.Документ = Документ;
			
			ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ТаблицаРабот,
				ДокументОбъектСтруктура,
				ВалютаПечатногоДокумента);
		КонецЕсли;
		
		ЕстьСкидка = Истина;
		Если ТаблицаРабот.Итог("СуммаСкидки") = 0 
			И ТаблицаРабот.Итог("СуммаСкидкиСтроки") = 0
			И ТаблицаРабот.Итог("СуммаСкидкиБонусами") = 0 Тогда
			
			ЕстьСкидка = Ложь;
			ОбластьСкидка = Макет.Область("Скидка");
			ОбластьУслуга = Макет.Область("Услуга");
			
			ОбластьУслуга.ШиринаКолонки = ОбластьУслуга.ШиринаКолонки + ОбластьСкидка.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьСкидка, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			
		КонецЕсли;
		
		Если УправлениеПечатьюПлатформа.ЕстьЛоготип(Документ.Организация, Документ.ПодразделениеКомпании) Тогда
			ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокСЛоготипом");
			УправлениеПечатьюПлатформа.ЗаполнитьЛоготип(ОбластьЗаголовок, Документ.Организация, Документ.ПодразделениеКомпании);
		Иначе
			ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		КонецЕсли;
		
		ОбластьИтого         = Макет.ПолучитьОбласть("Итого");
		ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьПодписи       = Макет.ПолучитьОбласть("Подписи");
		
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		ОбластьЗаголовок.Параметры.НомерДок = НомерДляПечати;
		ОбластьЗаголовок.Параметры.ДатаДок = Формат(ДатаПечатная, "ДЛФ=D");
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.ДляПечати = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.ПодразделениеКомпании, , ДополнительныеПараметры);
		
		ДополнительныеПараметры.ДляПечати = Ложь;
		ОбластьЗаголовок.Параметры.ПредставлениеПолучателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Контрагент, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// вывод документа основания
		Если ЗначениеЗаполнено(Документ.ДокументОснование) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ДокументОснование");
			ОбластьМакета.Параметры.ДокументОснованиеПредставление =
				УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ.ДокументОснование);
			ОбластьМакета.Параметры.ДокументОснование = Документ.ДокументОснование;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		
		ИтогоОбщаяСумма       = 0;
		ИтогоОбщаяСуммаНДС    = 0;
		ИтогоОбщаяСуммаСкидки = 0;
			
		ИтогРаботСумма       = 0;
		ИтогРаботСуммаНДС    = 0;
		ИтогРаботСуммаСкидки = 0;
			
		ВыборкаТабличнойЧасти = ТаблицаРабот;
			
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ТекстЗаголовка = СтрШаблон(
							НСтр("ru = 'Акт об оказании услуг № %1 от %2'"),
							НомерДляПечати,
							Формат(ДатаПечатная, "ДЛФ=D")
						);
		
		// заполним параметры шапки таблицы для следующего листа
		ОбластьШапка.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапка.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
		
		// Вывод табличной части работ
		СтруктураИтоговПоСтранице = Новый Структура;
		СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", ВалютаПечатногоДокумента);
		СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
		СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
		СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
		
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
		
		НомерСтроки = 1;
		Для Каждого СтрокаТабличнойЧасти Из ВыборкаТабличнойЧасти Цикл
			
			ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
			Если Не ПустаяСтрока(СтрокаТабличнойЧасти.Содержание) Тогда
				ОбластьСтрока.Параметры.Работа = СтрокаТабличнойЧасти.Содержание;
			Иначе
				ОбластьСтрока.Параметры.Работа = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
					СтрокаТабличнойЧасти.Номенклатура);
				// аренда	
				Если НЕ ПустаяСтрока(СтрокаТабличнойЧасти.Комментарий) Тогда 
					ОбластьСтрока.Параметры.Работа = СтрокаТабличнойЧасти.Комментарий;
				КонецЕсли;
			КонецЕсли;
			ОбластьСтрока.Параметры.Количество = Формат(СтрокаТабличнойЧасти.Количество, ФорматВыводаКоличества);
			ОбластьСтрока.Параметры.Цена = Формат(СтрокаТабличнойЧасти.Цена, ФорматВыводаСуммы);
			Если ЕстьСкидка Тогда
				Скидка = СтрокаТабличнойЧасти.СуммаСкидки + СтрокаТабличнойЧасти.СуммаСкидкиСтроки
					+ СтрокаТабличнойЧасти.СуммаСкидкиБонусами;
				ОбластьСтрока.Параметры.СуммаСкидки = Формат(Скидка, ФорматВыводаСуммы);
			КонецЕсли;
			ОбластьСтрока.Параметры.СуммаВсего = Формат(СтрокаТабличнойЧасти.СуммаВсего, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СуммаНДС = Формат(СтрокаТабличнойЧасти.СуммаНДС, ФорматВыводаСуммы);
			
			Если УпрощеннаяСистема И СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
				ОбластьСтрока.Параметры.СуммаНДС = "Без НДС";	
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапка, ОбластьИтогПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура;
				СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", ВалютаПечатногоДокумента);
				СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
				СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
				СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапка.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			КонецЕсли;
			
			ИтогРаботСумма       = ИтогРаботСумма + СтрокаТабличнойЧасти.СуммаВсего;
			ИтогРаботСуммаНДС    = ИтогРаботСуммаНДС + СтрокаТабличнойЧасти.СуммаНДС;
			ИтогРаботСуммаСкидки = ИтогРаботСуммаСкидки + СтрокаТабличнойЧасти.СуммаСкидки 
				+ СтрокаТабличнойЧасти.СуммаСкидкиСтроки + СтрокаТабличнойЧасти.СуммаСкидкиБонусами;
			
			НомерСтроки = НомерСтроки + 1;
			
			// обновим итоги по странице
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТабличнойЧасти, СтруктураИтоговПоСтранице);
		КонецЦикла;
		ИтогоОбщаяСумма       = ИтогоОбщаяСумма + ИтогРаботСумма;
		ИтогоОбщаяСуммаНДС    = ИтогоОбщаяСуммаНДС + ИтогРаботСуммаНДС;
		ИтогоОбщаяСуммаСкидки = ИтогоОбщаяСуммаСкидки + ИтогРаботСуммаСкидки;
		
		// выводим последний итог по странице, если страниц больше единицы
		ВтораяСтраница = 2;
		Если НомерСтраницы > ВтораяСтраница Тогда
			УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(
				ТабличныйДокумент,
				ОбластьИтогПоСтранице,
				СтруктураИтоговПоСтранице,
				Документ
			);
		КонецЕсли;
		
		СуммаВсего = ИтогоОбщаяСумма;
		СуммаНДС = ИтогоОбщаяСуммаНДС;
		
		Если ЕстьСкидка Тогда
			ОбластьИтого.Параметры.СуммаСкидки = Формат(ИтогоОбщаяСуммаСкидки, ФорматВыводаСуммы);
		КонецЕсли;
		
		ОбластьИтого.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		ОбластьИтого.Параметры.СуммаНДС = Формат(СуммаНДС, ФорматВыводаСуммы);
		ОбластьИтого.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
		ТабличныйДокумент.Вывести(ОбластьИтого);
		
		ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = СтрШаблон(
			НСтр("ru = 'Всего услуг %1 на сумму %2 %3 (в т.ч. НДС %4 %5)'"),
			ТаблицаРабот.Количество(),
			Формат(СуммаВсего, ФорматВыводаСуммы),
			ВалютаПечатногоДокумента,
			Формат(СуммаНДС, ФорматВыводаСуммы),
			ВалютаПечатногоДокумента);
		ОбластьСуммаПрописью.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(
			СуммаВсего, ВалютаПечатногоДокумента);
		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		ОбластьПодписи.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил", "Отпустил"));
		ОбластьПодписи.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПолучилКонтрагент", "Получил"));
		
		ТабличныйДокумент.Вывести(ОбластьПодписи);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьАктОбОказанииУслуг()

Функция ПолучитьДанныеДляПечатиУПД(Объект) Экспорт
	
	ДокументФактура = ПолучитьСФПоДокументуОснования(Объект.Ссылка);
	ДанныеОбъекта = Новый Структура();
	
	// Сформируем статус документа
	Если ДокументФактура <> Документы.СчетФактураВыданный.ПустаяСсылка() И НЕ ДокументФактура.ПометкаУдаления Тогда
		Статус = 1;
		ДокументОбъект = ДокументФактура;
		ТаблицаТоваров = ДокументОбъект.Товары.Выгрузить();
	Иначе
		Статус = 2;
		ДокументОбъект = Объект;
				
		// Получим ТЧ товаров по счет-фактуре с ГТД  
		УстановитьПривилегированныйРежим(Истина);

		СчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
		СчетФактура.Заполнить(Объект.Ссылка);
		ТаблицаТоваров = СчетФактура.Товары.Выгрузить();
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	// данные документа
	ДанныеОбъекта.Вставить("Дата"                   	, ДокументОбъект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  	, УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ДокументОбъект));
	ДанныеОбъекта.Вставить("ХозОперация"            	, ДокументОбъект.ХозОперация);
	ДанныеОбъекта.Вставить("ДокументОснование"      	, ДокументОбъект.ДокументОснование);
	ДанныеОбъекта.Вставить("ВалютаДокумента"      		, ДокументОбъект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"      		, ДокументОбъект.КурсДокумента);
	ДанныеОбъекта.Вставить("ТипЦен"      				, ДокументОбъект.ТипЦен);
	ДанныеОбъекта.Вставить("Поставщик"              	, ДокументОбъект.Организация);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  	, ДокументОбъект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("Покупатель"              	, ДокументОбъект.Контрагент);
	ДанныеОбъекта.Вставить("Организация"              	, Объект.Организация);
	ДанныеОбъекта.Вставить("ДоговорВзаиморасчетов"     	, ?(ЗначениеЗаполнено(ДокументОбъект.ДоговорВзаиморасчетов), Объект.ДоговорВзаиморасчетов, "--"));
	ДанныеОбъекта.Вставить("Товары"              		, ТаблицаТоваров);
	ДанныеОбъекта.Вставить("СуммаДокумента"             , ДокументОбъект.СуммаДокумента);
	ДанныеОбъекта.Вставить("Статус"              		, Статус);
	ДанныеОбъекта.Вставить("ИдентификаторГосударственногоКонтракта", Объект.ИдентификаторГосударственногоКонтракта);
	ДанныеОбъекта.Вставить("ДокументОтгрузки", ?(Статус = 1, ДокументОбъект.ДокументОснование, Объект.Ссылка));
	
	Если Статус = 1 Тогда
		ДанныеОбъекта.Вставить("НомерИсправления"       	, ?(ЗначениеЗаполнено(ДокументОбъект.НомерИсправления), ДокументОбъект.НомерИсправления, "--"));
		ДанныеОбъекта.Вставить("ДатаИсправления"        	, ?(ЗначениеЗаполнено(ДокументОбъект.Дата), ДокументОбъект.Дата, "--"));
		ДанныеОбъекта.Вставить("ПлатежноРасчетныеДокументы" , ДокументОбъект.ПлатежноРасчетныеДокументы);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("ТаблицаРНПТ", УправлениеДиалогомДокументаСервер.РНПТПрослеживаемыхТоваров(Объект.Ссылка));
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства); 
	ДанныеОбъекта.Вставить("ДатаОтгрузки"            , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", ЗначенияСвойствОбъекта)); 
	
	ДанныеОбъекта.Вставить("Грузоотправитель"        , ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, ДокументОбъект.Организация));
	ДанныеОбъекта.Вставить("Грузополучатель"         , ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, ДокументОбъект.Контрагент));
  	
	ДанныеОбъекта.Вставить("Руководитель"     	     , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Руководитель"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Отпустил"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Отпустил"));
	ДанныеОбъекта.Вставить("Получил"          		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Получил"));
	ДанныеОбъекта.Вставить("Менеджер"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Менеджер"));
	
	Возврат ДанныеОбъекта;
	
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//	Адрес   - адрес структуры данных во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	РеализацияТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МИНИМУМ(РеализацияТоваровТовары.НомерСтроки) КАК Порядок,
	|	СУММА(ВЫБОР
	|			КОГДА РеализацияТоваровТовары.Ссылка.СкладКомпании.Розничный = ИСТИНА
	|				ТОГДА РеализацияТоваровТовары.Количество * (ЕСТЬNULL(РеализацияТоваровТовары.ЕдиницаИзмерения.Коэффициент, 1) / ЕСТЬNULL(Цены.ЕдиницаИзмерения.Коэффициент, 1))
	|			ИНАЧЕ РеализацияТоваровТовары.Количество
	|		КОНЕЦ) КАК Количество,
	|	МАКСИМУМ(РеализацияТоваровТовары.СуммаВсего) КАК Цена,
	|	МАКСИМУМ(РеализацияТоваровТовары.СтавкаНДС) КАК СтавкаНДС,
	|	МАКСИМУМ(РеализацияТоваровТовары.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Цены.СрезПоследних КАК Цены
	|		ПО (Цены.Номенклатура = РеализацияТоваровТовары.Номенклатура)
	|			И (Цены.ХарактеристикаНоменклатуры = РеализацияТоваровТовары.ХарактеристикаНоменклатуры)
	|			И (Цены.ТипЦен = РеализацияТоваровТовары.Ссылка.СкладКомпании.ТипЦенРозничнойТорговли)
	|ГДЕ
	|	РеализацияТоваровТовары.Ссылка В(&МассивДокументов)
	|	И РеализацияТоваровТовары.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровТовары.Номенклатура,
	|	РеализацияТоваровТовары.ХарактеристикаНоменклатуры,
	|	РеализацияТоваровТовары.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РеализацияТоваров.Организация КАК Организация,
	|	РеализацияТоваров.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	РеализацияТоваров.СкладКомпании КАК СкладКомпании,
	|	РеализацияТоваров.СкладКомпании.ТипЦенРозничнойТорговли КАК ТипЦены
	|ИЗ
	|	Документ.РеализацияТоваров КАК РеализацияТоваров
	|ГДЕ
	|	РеализацияТоваров.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций 			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивПодразделенийКомпании = УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ПодразделениеКомпании").ВыгрузитьКолонку(0);
	МассивСкладов    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "СкладКомпании").ВыгрузитьКолонку(0);
	МассивТиповЦен    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ТипЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьПодразделениеКомпании", ?(МассивПодразделенийКомпании.Количество() = 1, МассивПодразделенийКомпании[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьТипЦены",     ?(МассивТиповЦен.Количество() = 1,    МассивТиповЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЭтикеток");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("НеПересчитыватьЦены");
	СтруктураДействий.Вставить("ЦеныИзДокументаОснования");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	Товары.ЗаполнитьЗначения(СтруктураДействий.ЗаполнитьОрганизацию, "Организация");
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//	Адрес - адрес структуры данных во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЦенников(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	РеализацияТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МИНИМУМ(РеализацияТоваровТовары.НомерСтроки) КАК Порядок,
	|	СУММА(ВЫБОР
	|			КОГДА РеализацияТоваровТовары.Ссылка.СкладКомпании.Розничный = ИСТИНА
	|				ТОГДА РеализацияТоваровТовары.Количество * (ЕСТЬNULL(РеализацияТоваровТовары.ЕдиницаИзмерения.Коэффициент, 1) / ЕСТЬNULL(Цены.ЕдиницаИзмерения.Коэффициент, 1))
	|			ИНАЧЕ РеализацияТоваровТовары.Количество
	|		КОНЕЦ) КАК Количество,
	|	МАКСИМУМ(РеализацияТоваровТовары.СуммаВсего) КАК Цена,
	|	МАКСИМУМ(РеализацияТоваровТовары.СтавкаНДС) КАК СтавкаНДС,
	|	МАКСИМУМ(РеализацияТоваровТовары.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Цены.СрезПоследних КАК Цены
	|		ПО (Цены.Номенклатура = РеализацияТоваровТовары.Номенклатура)
	|			И (Цены.ХарактеристикаНоменклатуры = РеализацияТоваровТовары.ХарактеристикаНоменклатуры)
	|			И (Цены.ТипЦен = РеализацияТоваровТовары.Ссылка.СкладКомпании.ТипЦенРозничнойТорговли)
	|ГДЕ
	|	РеализацияТоваровТовары.Ссылка В(&МассивДокументов) И РеализацияТоваровТовары.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровТовары.Номенклатура,
	|	РеализацияТоваровТовары.ХарактеристикаНоменклатуры,
	|	РеализацияТоваровТовары.ЕдиницаИзмерения
	|		
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РеализацияТоваров.Организация КАК Организация,
	|	РеализацияТоваров.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	РеализацияТоваров.СкладКомпании КАК СкладКомпании,
	|	РеализацияТоваров.СкладКомпании.ТипЦенРозничнойТорговли КАК ТипЦены
	|ИЗ
	|	Документ.РеализацияТоваров КАК РеализацияТоваров
	|ГДЕ
	|	РеализацияТоваров.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций 			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивПодразделенийКомпании = УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ПодразделениеКомпании").ВыгрузитьКолонку(0);
	МассивСкладов    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "СкладКомпании").ВыгрузитьКолонку(0);
	МассивТиповЦен    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ТипЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьПодразделениеКомпании", ?(МассивПодразделенийКомпании.Количество() = 1, МассивПодразделенийКомпании[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьВидЦены",     ?(МассивТиповЦен.Количество() = 1,    МассивТиповЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЦенников");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("НеПересчитыватьЦены");
	СтруктураДействий.Вставить("ЦеныИзДокументаОснования");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	Товары.ЗаполнитьЗначения(СтруктураДействий.ЗаполнитьОрганизацию, "Организация");
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

Функция ПолучитьСФПоДокументуОснования(ДокументОснование) Экспорт
	
	ДокументСФ = Документы.СчетФактураВыданный.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетФактураВыданный.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
		|	И СчетФактураВыданный.Проведен";   
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);   

	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			ДокументСФ = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДокументСФ;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

