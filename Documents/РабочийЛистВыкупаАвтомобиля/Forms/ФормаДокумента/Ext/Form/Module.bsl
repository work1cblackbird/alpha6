#Область ОписаниеПеременных

&НаКлиенте
Перем АдресИзДанныхВыбора Экспорт;

&НаКлиенте
Перем ТелефонИзДанныхВыбора Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ИнициализироватьПоляКонтактнойИнформации();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ОграничитьВыборКонтактныхЛиц(Элементы.Контрагент);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	РаботаСФормой.ОткрытьФормуТолькоДляПросмотра(ЭтотОбъект, Объект);
	
	УстановитьМаркуАвтомобиляПоУмолчанию();
	УстановитьПараметрВыбораМодели();
	УстановитьОтборНаСписокСобытий();
	
	// Обновим КИ
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		Объект.Контрагент,
		ЭтотОбъект,
		"Телефон,АдресЭлектроннойПочты",
		"ПредставлениеТелефона,АдресЭлектроннойПочты"
	);
	
	Элементы.НеОбновлятьКИ.Пометка = Истина;
	Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Заголовок = НСтр("ru = 'Не обновлять'");
	
	НастроитьПоляГодаВыпуска();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьСвойстваПоляВводаТелефона();
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Доступность = Ложь;
		ПрочитатьДокументКалькуляции();
		ПрочитатьДокументСогласованияЦены();
		ПрочитатьДокументПоступления();
		НастроитьПараметрыВыбораЭлементовФормы();
		ЗаполнитьКонтролируемыеСвойстваАвтомобиля();
		УправлениеДиалогомНаСервере();
	Иначе
		ПроверитьНеобходимостьОбновленияКИ();
	КонецЕсли;
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	
	Если ИмяСобытия = "ЗаписанАвтомобиль" И Источник.ВладелецФормы = ЭтотОбъект Тогда
		Объект.Автомобиль = Параметр.Автомобиль;
		АвтомобильПриИзменении(Элементы.Автомобиль);
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписанКонтрагент" И Источник.ВладелецФормы = ЭтотОбъект Тогда
		Объект.Контрагент = Параметр;
		КонтрагентПриИзменении(Элементы.Контрагент);
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписанДокументИзменениеЦенАвтомобилей" Тогда
		ПрочитатьДокументСогласованияЦены();
		УправлениеДиалогомНаСервере();
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	ЗащитаПерсональныхДанныхКлиент.ОбработкаОповещенияФормы(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПрочитатьДокументКалькуляции();
	ПрочитатьДокументСогласованияЦены();
	ПрочитатьДокументПоступления();
	
	НастроитьПараметрыВыбораЭлементовФормы();
	ЗаполнитьКонтролируемыеСвойстваАвтомобиля();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("РабочийЛистВыкупаАвтомобиля", ПараметрыЗаписи.РежимЗаписи, Ложь);
		
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОбновлятьКИ", Элементы.ОбновлятьКИ.Пометка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Обновим КИ
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		Объект.Контрагент,
		ЭтотОбъект,
		"Телефон,АдресЭлектроннойПочты",
		"ПредставлениеТелефона,АдресЭлектроннойПочты"
	);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	// Отмена связанных событий
	Если СтатусыОтказов().Найти(Объект.Статус) <> Неопределено Тогда
		АвтомобилиСПробегомВызовСервера.ПолучитьСвязанныеСобытия(Объект.Ссылка, ПараметрыЗаписи);
	КонецЕсли;
	
	Если ТипЗнч(ТекущийОбъект.ДокументОснование) = Тип("ДокументСсылка.Событие") Тогда
		ОбработкаСобытийДокументаСервер.ОбновитьДокументОснование_Событие(ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);
	РаботаСФормойКлиент.ОбновитьПодчиненныеСчета(Объект.Ссылка, Неопределено);
	
	УстановитьОтборНаСписокСобытий();
	// Отмена связанных событий
	Если ПараметрыЗаписи.Свойство("ОтменитьСвязанныеСобытия") Тогда
		ПараметрыОтмены = ПараметрыЗаписи.ОтменитьСвязанныеСобытия;
		Оповещение = Новый ОписаниеОповещения("ПродолжитьПослеЗаписи", ЭтотОбъект, ПараметрыОтмены);
		ТекстВопроса = НСтр("ru = 'Есть подчиненные события для Рабочего листа выкупа %1 от %2.
			|Отменить связанные события?'");
		ТекстВопроса = СтрШаблон(ТекстВопроса, ПараметрыОтмены.Номер, ПараметрыОтмены.Дата);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.Событие") Тогда
		Оповестить("ОповещениеДляДокументаСобытие", Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

//@skip-warning
&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РабочийЛистВыкупаАвтомобиля.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РабочийЛистВыкупаАвтомобиля.ДатаПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументРабочийЛистПриИзменении(Элемент)
	
	Если Объект.ДокументОснование <> Объект.ДокументРабочийЛист Тогда
		Объект.ДокументОснование = Объект.ДокументРабочийЛист;
		ПараметрыДействия = Новый Структура;
		ПараметрыДействия.Вставить("ТребуетсяЗаполнитьНаОсновании", Истина);
		ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ОбработатьИзменениеКонтрагента();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РабочийЛистВыкупаАвтомобиля.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Объект.Контрагент, ПараметрыДействия);
	
	// Обновим КИ
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		Объект.Контрагент,
		ЭтотОбъект,
		"Телефон,АдресЭлектроннойПочты",
		"ПредставлениеТелефона,АдресЭлектроннойПочты"
	);

	ПроверитьНеобходимостьОбновленияКИ();
	КомментарийТелефона = ЗначениеКомментарияКонтактнойИнформацииСервер(Объект.ПредставлениеТелефонаСтрокой);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество() Тогда
		СтандартнаяОбработка = Ложь;
		Объект.Контрагент = ВыбранноеЗначение[0].КонтактноеЛицо;
		АдресИзДанныхВыбора = "";
		ТелефонИзДанныхВыбора = "";
		Для Каждого Строка Из ВыбранноеЗначение Цикл
			Если Строка.ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") 
				И Не ЗначениеЗаполнено(АдресИзДанныхВыбора) Тогда
				АдресИзДанныхВыбора = Строка.ЗначениеКИ;
			ИначеЕсли Строка.ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") 
				И Не ЗначениеЗаполнено(ТелефонИзДанныхВыбора)Тогда
				ТелефонИзДанныхВыбора = Строка.ЗначениеКИ;
			КонецЕсли;
		КонецЦикла;
		ОбработатьИзменениеКонтрагента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПолученияДанных.Вставить("ПоискКонтрагентовСКИ");
	
	ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.Контрагенты"), ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПолученияДанных.Вставить("ПоискКонтрагентовСКИ");
	
	ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.Контрагенты"), ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	АвтомобильПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура АвтомобильПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РабочийЛистВыкупаАвтомобиля.АвтомобильПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МаркаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	МаркаПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура МаркаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РабочийЛистВыкупаАвтомобиля.МаркаПриИзменении(Объект, ПараметрыДействия);
	УстановитьПараметрВыбораМодели();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МодельПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	МодельПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура МодельПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РабочийЛистВыкупаАвтомобиля.МодельПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектацияПриИзменении(Элемент)
	
	Если Объект.Модель = ПредопределенноеЗначение("Справочник.Модели.ПустаяСсылка") Тогда
		Объект.Комплектация = ПредопределенноеЗначение("Справочник.ВариантыКомплектации.ПустаяСсылка");
		Возврат;
	Иначе
		ПараметрыДействия = Новый Структура;
		КомплектацияПриИзмененииНаСервере(ПараметрыДействия);
		ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КомплектацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.РабочийЛистВыкупаАвтомобиля.КомплектацияПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИзменениеЦенАвтомобилейНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ДокументИзменениеЦенАвтомобилей.Пустая() Тогда
		ПоказатьЗначение(Неопределено, ДокументИзменениеЦенАвтомобилей);
	КонецЕсли;
	
КонецПроцедуры

#Область СтандартныеПодсистемыКонтактнаяИнформация

&НаСервере
Процедура ИнициализироватьПоляКонтактнойИнформации()
	
	ВидКонтактнойИнформацииТелефона = Новый Структура;
	ВидКонтактнойИнформацииТелефона.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	ВидКонтактнойИнформацииЭлектроннойПочты = Новый Структура;
	ВидКонтактнойИнформацииЭлектроннойПочты.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	КомментарийТелефона = ЗначениеКомментарияКонтактнойИнформацииСервер(Объект.ПредставлениеТелефонаСтрокой);
	
	РазрешитьВводНесколькихЗначенийТелефона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, "РазрешитьВводНесколькихЗначений");
	
	РазрешитьВводНесколькихЗначенийЭлектроннойПочты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, "РазрешитьВводНесколькихЗначений");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеКомментарияКонтактнойИнформацииСервер(КонтактнаяИнформация)
	
	Результат = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(КонтактнаяИнформация);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначенияПолейКонтактнойИнформацииСервер(Знач Представление, Знач ВидКонтактнойИнформации, Знач Комментарий = Неопределено)
	
	// Создаем новый экземпляр по представлению.
	Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, ВидКонтактнойИнформации);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПредставлениеТелефонаПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		Объект.ПредставлениеТелефона        = "";
		Объект.ПредставлениеТелефонаСтрокой = "";
		УстановитьСвойстваПоляВводаТелефона();
		Возврат;
	КонецЕсли;
	
	// Формируем внутренние значения полей по тексту и параметрам формирования из
	// реквизита ВидКонтактнойИнформацииЭлектроннойПочты.     
	Объект.ПредставлениеТелефона = Текст;
	Объект.ПредставлениеТелефонаСтрокой = ЗначенияПолейКонтактнойИнформацииСервер(Текст, ВидКонтактнойИнформацииТелефона);
	
	ПроверитьНеобходимостьОбновленияКИ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТелефонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Если представление было изменено в поле и сразу нажата кнопка выбора, то необходимо 
	// привести данные в соответствие и сбросить внутренние поля для повторного разбора.
	Если Элемент.ТекстРедактирования <> Объект.ПредставлениеТелефона Тогда
		Объект.ПредставлениеТелефона = Элемент.ТекстРедактирования;
		Объект.ПредставлениеТелефонаСтрокой = "";
	КонецЕсли;
	
	// Данные для редактирования
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента"),
		Объект.ПредставлениеТелефонаСтрокой,
		Объект.ПредставлениеТелефона,
		КомментарийТелефона
	);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТелефонаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Объект.ПредставлениеТелефона        = ВыбранноеЗначение.Представление;
		КомментарийТелефона                 = ВыбранноеЗначение.Комментарий;
		Объект.ПредставлениеТелефонаСтрокой = ВыбранноеЗначение.Значение;
		
		ПроверитьНеобходимостьОбновленияКИ();
		Модифицированность = Истина;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		Объект.ПредставлениеТелефона        = ВыбранноеЗначение;
		КомментарийТелефона                 = "";
		Объект.ПредставлениеТелефонаСтрокой = ЗначенияПолейКонтактнойИнформацииСервер(ВыбранноеЗначение, ВидКонтактнойИнформацииТелефона);
		
		ПроверитьНеобходимостьОбновленияКИ();
		Модифицированность = Истина;
		
	Иначе
		
		УстановитьСвойстваПоляВводаТелефона();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТелефонаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.ПредставлениеТелефона        = "";
	КомментарийТелефона                 = "";
	Объект.ПредставлениеТелефонаСтрокой = ""; 
	
	ПроверитьНеобходимостьОбновленияКИ();
	УстановитьСвойстваПоляВводаТелефона();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭлектроннойПочтыПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		Объект.АдресЭлектроннойПочты        = "";
		Объект.АдресЭлектроннойПочтыСтрокой = "";
		Возврат;
	КонецЕсли;
	
	// Формируем внутренние значения полей по тексту и параметрам формирования из
	// реквизита ВидКонтактнойИнформацииЭлектроннойПочты.
	Объект.АдресЭлектроннойПочты        = Текст;
	Объект.АдресЭлектроннойПочтыСтрокой = ЗначенияПолейКонтактнойИнформацииСервер(Текст, ВидКонтактнойИнформацииЭлектроннойПочты);
	
	ПроверитьНеобходимостьОбновленияКИ();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭлектроннойПочтыОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.АдресЭлектроннойПочты        = "";
	Объект.АдресЭлектроннойПочтыСтрокой = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзМенюТелефон(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ПредставлениеТелефона = Объект.ПредставлениеТелефона;
		Если ВыбранныйЭлемент.Значение = "ОтправитьSMS" Тогда
			
			ВзаимодействияАльфаАвтоКлиент.СоздатьSMS(
				Объект.ПредставлениеТелефона,
				Объект.Контрагент,
				Объект.Ссылка
			);
		Иначе
			ВзаимодействияАльфаАвтоКлиент.ПозвонитьКонтакту(Объект.Контрагент, ПредставлениеТелефона, Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьОбновленияКИ()
	
	УстановитьСвойстваПоляВводаТелефона();
	
	Если ТипЗнч(Объект.Контрагент) = Тип("Строка")
		ИЛИ Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Элементы.АдресЭлектроннойПочты.СписокВыбора.Количество() > 0
		И Объект.АдресЭлектроннойПочты <> "" Тогда
		ЭлектроннаяПочта = Элементы.АдресЭлектроннойПочты.СписокВыбора.НайтиПоЗначению(Объект.АдресЭлектроннойПочты);
		ЭтоНовыйАдрес = (ЭлектроннаяПочта = Неопределено);
	Иначе
		ЭтоНовыйАдрес = (Объект.АдресЭлектроннойПочты <> "");
	КонецЕсли;
	
	Если Элементы.ПредставлениеТелефона.СписокВыбора.Количество() > 0
		И Объект.ПредставлениеТелефона <> "" Тогда
		Телефон = Элементы.ПредставлениеТелефона.СписокВыбора.НайтиПоЗначению(Объект.ПредставлениеТелефона);
		ЭтоНовыйТелефон = (Телефон = Неопределено);
	Иначе
		ЭтоНовыйТелефон = (Объект.ПредставлениеТелефона <> "");
	КонецЕсли;
	
	ЕстьНоваяКИ = ЭтоНовыйАдрес ИЛИ ЭтоНовыйТелефон;
	
	Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Доступность = ЕстьНоваяКИ;
	
	Если НЕ ЕстьНоваяКИ Тогда
		Элементы.ОбновлятьКИ.Пометка   = Ложь;
		Элементы.НеОбновлятьКИ.Пометка = Истина;
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Заголовок = НСтр("ru = 'Не обновлять'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСобытияРабочегоЛиста

&НаКлиенте
Процедура СобытияРабочегоЛистаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СобытияРабочегоЛиста.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодобратьКонтрагента(Команда)
	
	ПоискТолькоПоНаименованию = НЕ ПустаяСтрока(Объект.ОбращениеККлиенту)
		И ПустаяСтрока(Объект.ПредставлениеТелефона)
		И ПустаяСтрока(Объект.АдресЭлектроннойПочты);
	МинимальноеКоличествоСимволовДляПоиска = 4; 
	
	Если ПоискТолькоПоНаименованию И СтрДлина(Объект.ОбращениеККлиенту) < МинимальноеКоличествоСимволовДляПоиска Тогда
		ТекстСообщения = НСтр("ru = 'Для поиска контрагента по наименованию необходимо указывать более трех символов'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДанныеКонтрагента = Новый Структура;
	ДанныеКонтрагента.Вставить("РЛВыкупаАвтомобиля");
	ДанныеКонтрагента.Вставить("Наименование", 			Объект.ОбращениеККлиенту);
	ДанныеКонтрагента.Вставить("АдресЭП", 				Объект.АдресЭлектроннойПочты);
	ДанныеКонтрагента.Вставить("Телефон", 				Объект.ПредставлениеТелефона);
	ДанныеКонтрагента.Вставить("Пол", 					Объект.ПолКлиента);
	ДанныеКонтрагента.Вставить("ФормаСобственности", 	Объект.ФормаСобственности);
	ДанныеКонтрагента.Вставить("РекламныйИсточник", 	Объект.ИсточникИнформации);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ОтборПоНаименованию", 	Объект.ОбращениеККлиенту);
	ПараметрыФормы.Вставить("ОтборНомерТелефона", 	Объект.ПредставлениеТелефона);
	ПараметрыФормы.Вставить("ОтборEmail", 			Объект.АдресЭлектроннойПочты);
	ПараметрыФормы.Вставить("ДанныеЗаполнения", 	ДанныеКонтрагента);
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы, Элементы.Контрагент);	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтрагента(Команда)
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("Пол", Объект.ПолКлиента);
	ДанныеЗаполнения.Вставить("ФормаСобственности", Объект.ФормаСобственности);
	ДанныеЗаполнения.Вставить("ВозрастнаяГруппа", Объект.ВозрастнаяГруппа);
	ДанныеЗаполнения.Вставить("НаименованиеПолное", Объект.ОбращениеККлиенту);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ДанныеЗаполнения);
	ПараметрыФормы.Вставить("НеобходимоОповеститьПослеЗаписи", Истина);
	ПараметрыФормы.Вставить("АдресЭП", Объект.АдресЭлектроннойПочты);
	ПараметрыФормы.Вставить("ТелефонКонтрагента", Объект.ПредставлениеТелефона);
	
	ОткрытьФорму(
		"Справочник.Контрагенты.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьАвтомобиль(Команда)
	
	Если Объект.Контрагент.Пустая() Тогда
		ПредложитьВыбратьКонтрагента();
		Возврат;
	КонецЕсли;
	
	НачатьСозданиеАвтомобиля();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКакОсновноеВозражение(Команда)
	
	Если Элементы.Возражения.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	НовоеОсновноеВозражение = Элементы.Возражения.ТекущиеДанные.Возражение;
	
	Для Каждого Строка Из Объект.Возражения Цикл
		Строка.Основной = (НовоеОсновноеВозражение = Строка.Возражение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСобытие(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПараметрыЗаписиНового = ЗащищенныеФункцииКлиент.СоздатьПараметрыЗаписиНовогоОбъектаНаКлиенте();
		ПараметрыЗаписиНового.ОбработчикСобытия = "ПродолжитьСозданиеСобытия";
		ЗащищенныеФункцииКлиент.ЗаписатьНовыйОбъектНаКлиенте(ЭтотОбъект, ПараметрыЗаписиНового);
		Возврат;
	КонецЕсли;
	
	ПродолжитьСозданиеСобытия();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументОценки(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПараметрыЗаписиНового = ЗащищенныеФункцииКлиент.СоздатьПараметрыЗаписиНовогоОбъектаНаКлиенте();
		ПараметрыЗаписиНового.ОбработчикСобытия = "ПродолжитьСозданиеДокументаОценки";
		ЗащищенныеФункцииКлиент.ЗаписатьНовыйОбъектНаКлиенте(ЭтотОбъект, ПараметрыЗаписиНового);
		Возврат;
	КонецЕсли;
	
	ПродолжитьСозданиеДокументаОценки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьАвтомобильИзАкта(Команда)
	
	Объект.Автомобиль = АвтомобильВАкте;
	АвтомобильПриИзменении(Элементы.Автомобиль);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументПоступления(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		ПараметрыЗаписиНового = ЗащищенныеФункцииКлиент.СоздатьПараметрыЗаписиНовогоОбъектаНаКлиенте();
		ПараметрыЗаписиНового.ОбработчикСобытия = "ПродолжитьСозданиеДокументаПоступления";
		ЗащищенныеФункцииКлиент.ЗаписатьНовыйОбъектНаКлиенте(ЭтотОбъект, ПараметрыЗаписиНового);
		Возврат;
	КонецЕсли;
	
	ПродолжитьСозданиеДокументаПоступления();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоАвтомобилю(Команда)
	
	ОбновитьДанныеПоАвтомобилю();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьКИ(Команда)
	
	ИмяКоманды = Команда.Имя;
	
	Если ИмяКоманды = "ОбновлятьКИ" И ПроверитьСогласиеНаОбработкуПерсональныхДанных(Объект.Контрагент) Тогда
		Если Не РазрешитьВводНесколькихЗначенийТелефона Или Не РазрешитьВводНесколькихЗначенийЭлектроннойПочты Тогда
			Обработчик = Новый ОписаниеОповещения("Подключаемый_ОбновлятьКИ", ЭтотОбъект);
			Если Не РазрешитьВводНесколькихЗначенийТелефона И Не РазрешитьВводНесколькихЗначенийЭлектроннойПочты Тогда
				ВидыКИ = НСтр("ru = 'телефона и адреса электронной почты'");
			ИначеЕсли Не РазрешитьВводНесколькихЗначенийТелефона Тогда
				ВидыКИ = НСтр("ru = 'телефона'");
			Иначе
				ВидыКИ = НСтр("ru = 'адреса электронной почты'");
			КонецЕсли;
			ТекстВопроса = СтрШаблон(
				НСтр("ru = 'Для %1 не настроено хранение нескольких значений.
				|При включении обновления текущие значения в карточке контрагента будут заменены данными из документа. Продолжить?'"),
				ВидыКИ
			);
			
			ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Возврат;
		КонецЕсли;
		
		Подключаемый_ОбновлятьКИ(КодВозвратаДиалога.Да);
		
	Иначе
		Подключаемый_ОбновлятьКИ(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПозвонитьИлиОтправитьSMS(Команда)
	
	Список = Новый СписокЗначений;
	Список.Добавить("Позвонить", НСтр("ru = 'Позвонить'"),, БиблиотекаКартинок.Позвонить);
	Список.Добавить("ОтправитьSMS", НСтр("ru = 'Отправить SMS...'"),, БиблиотекаКартинок.ОтправитьSMS);
	ОповещениеМеню = Новый ОписаниеОповещения("ПослеВыбораИзМенюТелефон", ЭтотОбъект, Параметры);
	ЭтотОбъект.ПоказатьВыборИзМеню(ОповещениеМеню, Список, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НаписатьПисьмо(Команда)
	
	УправлениеКонтактнойИнформациейКлиент.СоздатьЭлектронноеПисьмо(Объект.АдресЭлектроннойПочтыСтрокой,
	Объект.АдресЭлектроннойПочты, ВидКонтактнойИнформацииЭлектроннойПочты, Объект.Контрагент);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьСогласиеНаОбработкуПерсональныхДанных(Контрагент)
	
	Если ТипЗнч(Контрагент) = Тип("Строка") ИЛИ Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указан клиент.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ (Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо
		ИЛИ Контрагент.ФормаСобственности  = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Согласие = ЗащитаПерсональныхДанных.ДействующееСогласиеНаОбработкуПерсональныхДанных(
		Контрагент,
		Справочники.Организации.ОрганизацияПоУмолчанию(),
		КонецДня(ТекущаяДатаСеанса())
	);
	
	Если Согласие = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Отсутствует согласие на обработку персональных данных. Запись контактной информации невозможна.'")
		);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры
// Конец Ядро

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформление()
 
	ВыделитьОсновноеВозражение = ОбщегоНазначенияАвтосалон.НовыйЭлементОформления();
	ВыделитьОсновноеВозражение.Поля.Добавить(Элементы.Возражения.Имя);
	
	ТолькоНаОсновные = ОбщегоНазначенияАвтосалон.НовоеУсловиеОформления();
	ТолькоНаОсновные.Левое = "Объект.Возражения.Основной";
	ТолькоНаОсновные.Правое = Истина;
	ВыделитьОсновноеВозражение.Условия.Добавить(ТолькоНаОсновные);
	
	ВыделитьОсновноеВозражение.Оформление.Вставить("Шрифт", ШрифтыСтиля.СтрокаСПризнакомОсновной);
	ОбщегоНазначенияАвтосалон.УстановитьУсловноеОформление(УсловноеОформление.Элементы,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыделитьОсновноеВозражение));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьМаркуАвтомобиляПоУмолчанию()
	
	Если ЗначениеЗаполнено(Объект.Марка) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяМаркаПоУмолчанию = УчетныеПолитикиСервер.Значение(
		"МаркаПоУмолчанию",
		ТекущаяДатаСеанса(),
		ПараметрыСеанса.ПодразделениеКомпании		
	);
	
	Если ТекущаяМаркаПоУмолчанию = Справочники.Марки.ПустаяСсылка() Тогда
		ТекущаяМаркаПоУмолчанию = Справочники.Марки.МаркаНеУказана;
	КонецЕсли;
	
	Объект.Марка = ТекущаяМаркаПоУмолчанию;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрВыбораМодели()
	
	Если НеСтандартнаяМарка(Объект.Марка) И Элементы.Найти("Модель") <> Неопределено Тогда
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(
			Элементы.Модель.ПараметрыВыбора,
			"Отбор.Марка",
			Объект.Марка
		);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НеСтандартнаяМарка(ВыбраннаяМарка)
	
	Возврат НЕ ВыбраннаяМарка = Справочники.Марки.МаркаНеУказана;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборНаСписокСобытий()
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		СобытияРабочегоЛиста.КомпоновщикНастроек.Настройки.Отбор.Элементы,
		"ОтборПоиска",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаОтбора,
		"ДокументОснование",
		Объект.Ссылка,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаОтбора,
		"Ссылка",
		Объект.ДокументОснование,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
	);
		
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДокументКалькуляции()
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеДокумента = АвтомобилиСПробегомСервер.ПолучитьДокументОсмотра(Объект.Ссылка);
	
	Если ОписаниеДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Калькуляция = ОписаниеДокумента.Оценка;
	АвтомобильВАкте = ОписаниеДокумента.Автомобиль;
	Элементы.Калькуляция.Подсказка = ОписаниеДокумента.ВалютаДокумента;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДокументСогласованияЦены()
	
	Если Объект.Ссылка.Пустая() ИЛИ Калькуляция.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеДокумента = АвтомобилиСПробегомЗащищенныеФункцииСервер.ПолучитьДокументСогласованияЦены(Калькуляция);
	
	Если ОписаниеДокумента = Неопределено Тогда
		НадписьИзменениеЦенАвтомобилей = НСтр("ru = 'Не согласован'");
		Возврат;
	КонецЕсли;
	
	ДокументИзменениеЦенАвтомобилей = ОписаниеДокумента.Ссылка;
	СуммаВыкупа = РаботаСКурсамиВалют.ПересчитатьВВалюту(
		ОписаниеДокумента.Цена,
		ОписаниеДокумента.ВалютаДокумента,
		Объект.ВалютаДокумента,
		Объект.Дата
	);
	
	ЦенаСогласована = ОписаниеДокумента.Проведен;
	НадписьИзменениеЦенАвтомобилей = ?(ЦенаСогласована,
		СтрШаблон(НСтр("ru = 'Согласован. Сумма согласования составляет %1 %2'"),
			СуммаВыкупа, ОписаниеДокумента.ВалютаДокумента),
		НСтр("ru = 'Ожидает согласования'")
	);
	
КонецПроцедуры // ПрочитатьДокументСогласованияЦены()

&НаСервере
Процедура ПрочитатьДокументПоступления()
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПоступлениеАвтомобилей.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеАвтомобилей КАК ПоступлениеАвтомобилей
		|ГДЕ
		|	ПоступлениеАвтомобилей.ДокументОснование = &Документ"
	);
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеДокумента = РезультатЗапроса.Выгрузить()[0];
	ПоступлениеАвтомобиля = ОписаниеДокумента.Ссылка;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	НастроитьВидимостьКнопкиСоздатьАвтомобиль();
	НастроитьВидимостьTradeIn();
	НастроитьДоступностьДанныхАвтомобиля();
	НастроитьВидимостьПредварительнойОценкиИКалькуляции(ЭтотОбъект);
	ЗаблокироватьДокумент();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьКнопкиСоздатьАвтомобиль()
	
	ПоказатьКнопкуСоздать = Объект.Автомобиль.Пустая() И НЕ Объект.Модель.Пустая();
	Элементы.Автомобиль.АвтоМаксимальнаяШирина = НЕ ПоказатьКнопкуСоздать;
	Элементы.СоздатьАвтомобиль.Видимость = ПоказатьКнопкуСоздать;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьTradeIn()
	
	Элементы.ДокументРабочийЛист.Видимость =
		(Объект.ХозОперация = Справочники.ХозОперации.РабочийЛистВыкупаАвтомобиляTradeIn);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьПредварительнойОценкиИКалькуляции(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"СоздатьДокументОценки",
		"Видимость",
		Форма.Калькуляция.Пустая()
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"Калькуляция",
		"Видимость",
		НЕ Форма.Калькуляция.Пустая()
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"НадписьИзменениеЦенАвтомобилей",
		"Видимость",
		НЕ Форма.Калькуляция.Пустая()
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"СоздатьДокументПоступления",
		"Видимость",
		Форма.ПоступлениеАвтомобиля.Пустая()
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПоступлениеАвтомобиля",
		"Видимость",
		НЕ Форма.ПоступлениеАвтомобиля.Пустая()
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ЗамечанияКАвтомобилю",
		"Видимость",
		ЗначениеЗаполнено(Форма.АвтомобильВАкте) И Форма.АвтомобильВАкте <> Форма.Объект.Автомобиль
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ОбновлениеДанныхДокумента",
		"Видимость",
		НЕ Форма.ТолькоПросмотр И ЕстьОтличияДанныхДокументаАвтомобиля(Форма.Объект, Форма.КонтролируемыеСвойстваАвтомобиля)
	);
	
КонецПроцедуры // НастроитьВидимостьПредварительнойОценкиИКалькуляции()

&НаСервере
Процедура ЗаблокироватьДокумент()
	
	ТолькоПросмотр = Объект.Статус = Справочники.СтатусыРабочегоЛистаВыкупаАвтомобиля.Закрыт;
	
	Если ТолькоПросмотр Тогда 
		Элементы.СоздатьДокументОценки.Доступность = Ложь;
		Элементы.СоздатьДокументПоступления.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	СтатусОтказ = СтатусыОтказов().Найти(Объект.Статус) <> Неопределено;
	
	Элементы.АвтомобильСтраница.ТолькоПросмотр = СтатусОтказ;
	Элементы.ВзаимодействияСтраница.ТолькоПросмотр = СтатусОтказ;
	Элементы.СделкаСтраница.ТолькоПросмотр = СтатусОтказ;
	Элементы.ПричинаОтказа.ТолькоПросмотр = СтатусОтказ;
	Элементы.Возражения.ТолькоПросмотр = СтатусОтказ;
	
	Элементы.НомерДата.ТолькоПросмотр = СтатусОтказ;
	Элементы.ПоискКонтрагента.ТолькоПросмотр = СтатусОтказ;
	Элементы.ПолКлиента.ТолькоПросмотр = СтатусОтказ;
	Элементы.ФормаСобственности.ТолькоПросмотр = СтатусОтказ;
	Элементы.ВозрастнаяГруппа.ТолькоПросмотр = СтатусОтказ;
	Элементы.ПредполагаемыйСрок.ТолькоПросмотр = СтатусОтказ;
	Элементы.ИсточникИнформации.ТолькоПросмотр = СтатусОтказ;
	
	Элементы.ПодобратьКонтрагента.Доступность = НЕ СтатусОтказ;
	Элементы.ВозраженияУстановитьКакОсновноеВозражение.Доступность = НЕ СтатусОтказ;
	Элементы.ФормаСоздатьСобытие.Доступность = НЕ СтатусОтказ;
	Элементы.СоздатьАвтомобиль.Доступность = НЕ СтатусОтказ;
	
	Элементы.СоздатьДокументОценки.Доступность = НЕ СтатусОтказ;
	Элементы.СоздатьДокументПоступления.Доступность = НЕ СтатусОтказ;
	Элементы.Статус.ТолькоПросмотр = СтатусОтказ И НЕ ПраваИНастройкиПользователя.Значение("РазрешитьЗакрыватьОтказыОтСделок");
	
КонецПроцедуры // ЗаблокироватьДокумент()

&НаСервере
Функция СтатусыОтказов()
	
	Статусы = Новый Массив();
	Статусы.Добавить(Справочники.СтатусыРабочегоЛистаВыкупаАвтомобиля.ОтказВВыкупе);
	Статусы.Добавить(Справочники.СтатусыРабочегоЛистаВыкупаАвтомобиля.ОтказКлиента);
	Возврат Статусы;
	
КонецФункции

&НаСервере
Процедура НастроитьПоляГодаВыпуска()
	
	ФорматГода = АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Объект);
	Элементы.ГодВыпуска.Формат = ФорматГода;
	Элементы.ГодВыпуска.ФорматРедактирования = ФорматГода;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	ПредложитьУстановитьКонтрагента(ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения,
													 ДополнительныеПараметры = Неопределено) Экспорт
	
	НужноПродолжение = УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(
		ЭтотОбъект,
		РезультатОповещения,
		ДополнительныеПараметры
	);
	
	Если НЕ НужноПродолжение Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры = Неопределено)
	
	НужноПродолжение = УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(
		ЭтотОбъект,
		РезультатОповещения,
		ДополнительныеПараметры
	);
	
	Если НЕ НужноПродолжение Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьУстановитьКонтрагента(ПараметрыДействия)
	
	ВладелецВИБ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыДействия, "ВладелецВИБ", Неопределено);
	ВладелецВИБПредставление =  ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыДействия, "ВладелецВИБПредставление", Неопределено);
	
	Если НЕ ЗначениеЗаполнено(ВладелецВИБ) ИЛИ ВладелецВИБ = Объект.Контрагент Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = СтрШаблон(
		НСтр("ru = 'В базе для выбранного автомобиля указан контрагент %1. %2?'"),
		ВладелецВИБПредставление,
		?(Объект.Контрагент.Пустая(), НСтр("ru = 'Установить'"), НСтр("ru = 'Заменить'"))
	);
	ОбработчикОтвета = Новый ОписаниеОповещения("ПредложитьУстановитьКонтрагентаЗавершение", ЭтотОбъект, ВладелецВИБ);
	ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьУстановитьКонтрагентаЗавершение(Ответ, НовыйКонтрагент) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Контрагент =  НовыйКонтрагент;
		КонтрагентПриИзменении(Элементы.Контрагент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументПредварительнойОценкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НовыйАктОценкиАвтомобиля = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеПараметры,
		"НовыйАктОценкиАвтомобиля"
	);
	
	ИмяРеквизита = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеПараметры,
		"ИмяРеквизита"
	);
	
	Если ЗначениеЗаполнено(НовыйАктОценкиАвтомобиля) И ЗначениеЗаполнено(ИмяРеквизита) Тогда
		ЭтотОбъект[ИмяРеквизита] = НовыйАктОценкиАвтомобиля;
		АвтомобильВАкте = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ДополнительныеПараметры,
			"АвтомобильВАкте"
		);
		НастроитьВидимостьПредварительнойОценкиИКалькуляции(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьЗаполнитьАвтомобиль()
	
	Кнопки = Новый СписокЗначений();
	Кнопки.Добавить("Продолжить", НСтр("ru = 'Создать поступление без автомобиля'"));
	Кнопки.Добавить("Отмена", НСтр("ru = 'Заполнить автомобиль'"));
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ПредложитьЗаполнитьАвтомобильОтвет", ЭтотОбъект),
		НСтр("ru = 'В текущем рабочем листе выкупа не указан автомобиль'"),
		Кнопки,
		,
		"Отмена"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьЗаполнитьАвтомобильОтвет(Ответ, Контекст) Экспорт
	
	Если ВРег(Ответ) = "ПРОДОЛЖИТЬ" Тогда
		НачатьСозданиеДокументаПоступления();
		Возврат;
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.Автомобиль;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСозданиеДокументаПоступления()
	
	ОбработчикОбратногоВызова = Новый ОписаниеОповещения(
		"СоздатьДокументПоступленияЗавершение",
		ЭтотОбъект,
		Новый Структура()
	);
	
	ОткрытьФорму(
		"Документ.ПоступлениеАвтомобилей.ФормаОбъекта",
		Новый Структура("Основание", Объект.Ссылка),
		ЭтотОбъект,
		ЭтотОбъект,
		,
		,
		ОбработчикОбратногоВызова
	);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументПоступленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НовыйПоступлениеАвтомобиля = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеПараметры,
		"ПоступлениеАвтомобиля"
	);
	
	Если ЗначениеЗаполнено(НовыйПоступлениеАвтомобиля) Тогда
		ПоступлениеАвтомобиля = НовыйПоступлениеАвтомобиля;
		НастроитьВидимостьПредварительнойОценкиИКалькуляции(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПослеЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	АвтомобилиСПробегомВызовСервера.ОтменитьСвязанныеСобытия(
		ДополнительныеПараметры.МассивДокументов,
		ДополнительныеПараметры.Комментарий
	);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСозданиеАвтомобиля()
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("Марка", Объект.Марка);
	ДанныеЗаполнения.Вставить("Модель", Объект.Модель);
	ДанныеЗаполнения.Вставить("ВариантКомплектации", Объект.Комплектация);
	ДанныеЗаполнения.Вставить("ТипСалона", Объект.ТипСалона);
	ДанныеЗаполнения.Вставить("ТипКПП", Объект.ТипКПП);
	ДанныеЗаполнения.Вставить("ТипДвигателя", Объект.ТипДвигателя);
	ДанныеЗаполнения.Вставить("ТипКузова", Объект.ТипКузова);
	ДанныеЗаполнения.Вставить("ГодВыпуска", Объект.ГодВыпуска);
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("Владелец", Объект.Контрагент);
	ДопПараметры.Вставить("Пробег", Объект.Пробег);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ДанныеЗаполнения);
	ПараметрыФормы.Вставить("ПараметрыВыбора", ДопПараметры);
	ПараметрыФормы.Вставить("НеобходимоОповеститьПослеЗаписи", Истина);
	
	ОткрытьФорму(
		"Справочник.Автомобили.ФормаОбъекта",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);

КонецПроцедуры

&НаКлиенте
Процедура ПредложитьВыбратьКонтрагента()
	
	Кнопки = Новый СписокЗначений();
	Кнопки.Добавить("Продолжить", НСтр("ru = 'Продолжить'"));
	Кнопки.Добавить("Вернуться", НСтр("ru = 'Вернуться'"));
	
	ТекстВопроса = НСтр("ru = 'Рекомендуется сначала создать карточку контрагента, а затем создавать карточку автомобиля.'"); // BSLLS-off
	ПоказатьВопрос(Новый ОписаниеОповещения("ПредложитьВыбратьКонтрагентаЗавершение", ЭтотОбъект), ТекстВопроса, Кнопки);

КонецПроцедуры

&НаКлиенте
Процедура ПредложитьВыбратьКонтрагентаЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> "Продолжить" Тогда
		Возврат;
	КонецЕсли;
	
	НачатьСозданиеАвтомобиля();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоАвтомобилю()
	
	Если НЕ ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеАвтомобиля = ПараметрыАвтомобиля(Объект.Автомобиль);
	ЗаполнитьЗначенияСвойств(Объект, ДанныеАвтомобиля);
	Элементы.ОбновлениеДанныхДокумента.Видимость = Ложь;
	
	ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Документ заполнен данными по автомобилю'"));
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыАвтомобиля(Автомобиль)
	
	Возврат АвтомобилиСервер.ДанныеАвтомобиля(Автомобиль);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьОтличияДанныхДокументаАвтомобиля(Документ, КонтролируемыеСвойстваАвтомобиля)
	
	Если НЕ ЗначениеЗаполнено(Документ.Автомобиль) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеАвтомобиля = ПараметрыАвтомобиля(Документ.Автомобиль);
	
	Для Каждого ТекущийПараметр Из КонтролируемыеСвойстваАвтомобиля Цикл
		ПолеВДокументе = ?(ЗначениеЗаполнено(ТекущийПараметр.Значение), ТекущийПараметр.Значение, ТекущийПараметр.Ключ);
		Если Документ[ПолеВДокументе] <> ДанныеАвтомобиля[ТекущийПараметр.Ключ]
			И НЕ (НЕ ЗначениеЗаполнено(Документ[ПолеВДокументе])
			И НЕ ЗначениеЗаполнено(ДанныеАвтомобиля[ТекущийПараметр.Ключ])) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКонтролируемыеСвойстваАвтомобиля()
	
	КонтролируемыеСвойства = Новый Структура();
	КонтролируемыеСвойства.Вставить("Марка");
	КонтролируемыеСвойства.Вставить("Модель");
	КонтролируемыеСвойства.Вставить("ВариантКомплектации", "Комплектация");
	КонтролируемыеСвойства.Вставить("ТипСалона");
	КонтролируемыеСвойства.Вставить("ТипКПП");
	КонтролируемыеСвойства.Вставить("ТипДвигателя");
	КонтролируемыеСвойства.Вставить("ТипКузова");
	КонтролируемыеСвойства.Вставить("ГодВыпуска");
	
	КонтролируемыеСвойстваАвтомобиля = Новый ФиксированнаяСтруктура(КонтролируемыеСвойства);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДоступностьДанныхАвтомобиля()
	
	АвтомобильЗаполнен = ЗначениеЗаполнено(Объект.Автомобиль);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДанныеОтКлиента",
		"ТолькоПросмотр",
		АвтомобильЗаполнен
	);
	
КонецПроцедуры

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	                                                                                                                
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбработатьИзменениеКонтрагента()
	
	ПараметрыДействия = Новый Структура;
	Если ЗначениеЗаполнено(ТелефонИзДанныхВыбора) Тогда
		ПараметрыДействия.Вставить("ТелефонИзДанныхВыбора", ТелефонИзДанныхВыбора);
	КонецЕсли;
	Если ЗначениеЗаполнено(АдресИзДанныхВыбора) Тогда
		ПараметрыДействия.Вставить("АдресИзДанныхВыбора", АдресИзДанныхВыбора);
	КонецЕсли;
	КонтрагентПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
	ТелефонИзДанныхВыбора = "";
	АдресИзДанныхВыбора = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСозданиеСобытия(Результат  = Неопределено, ДополнительныеПараметры  = Неопределено) Экспорт
	
	ВзаимодействияКлиент.СоздатьВзаимодействиеИлиПредмет("Документ.Событие.ФормаОбъекта", Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСозданиеДокументаОценки(Результат  = Неопределено, ДополнительныеПараметры  = Неопределено) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"СоздатьДокументПредварительнойОценкиЗавершение",
		ЭтотОбъект,
		Новый Структура("ИмяРеквизита", "Калькуляция")
	);
	Основание = Объект.Ссылка;
	
	ОткрытьФорму(
		"Документ.АктОценкиАвтомобиля.ФормаОбъекта",
		Новый Структура("Основание", Основание),
		ЭтотОбъект,
		КлючУникальности,
		,
		,
		Оповещение
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСозданиеДокументаПоступления(Результат  = Неопределено, ДополнительныеПараметры  = Неопределено) Экспорт
	
	Если Объект.Автомобиль.Пустая() Тогда
		ПредложитьЗаполнитьАвтомобиль();
		Возврат;
	КонецЕсли;
	
	НачатьСозданиеДокументаПоступления();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваПоляВводаТелефона()
	
	УправлениеКонтактнойИнформациейАльфаАвто.УстановитьСвойстваПоляВводаТелефона(
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
		Объект.ПредставлениеТелефона,
		Элементы.ПредставлениеТелефона
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновлятьКИ(Результат, ДополнетельныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Элементы.ОбновлятьКИ.Пометка   = Истина;
		Элементы.НеОбновлятьКИ.Пометка = Ложь;
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Заголовок = НСтр("ru = 'Обновлять'");
	Иначе
		Элементы.ОбновлятьКИ.Пометка   = Ложь;
		Элементы.НеОбновлятьКИ.Пометка = Истина;
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Заголовок = НСтр("ru = 'Не обновлять'");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти