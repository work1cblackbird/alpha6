// Модуль менеджера документа "Заказ внутренний"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. 
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Товары.Итог("СуммаВсего"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Получает количество нераспределенного товара. Если полностью распределено или товар в заказе не найден,
// то возвращает Неопределено
// Параметры:
//	Заказ - {ЗаказПокупателя, ЗаказВнутренний} Ссылка - ссылка на заказ,
//	Номенклатура - номенклатурная позиция,
//	Характеристика - характеристика номенклатуры.
//
Функция ПолучитьТекущееСостояниеЗаказа(Объект, Строка)
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	(ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) - ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)) КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(
	|		&НаДату,
	|		Заказ = &Заказ
	|		И Номенклатура = &Номенклатура
	|		И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры) КАК ЗаказыПокупателейОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ЗаказыРаспределение.Остатки(
	|		&НаДату,
	|		ЗаказПокупателя = &Заказ
	|		И Номенклатура = &Номенклатура
	|		И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры) КАК ЗаказыРаспределениеОстатки
	|ПО
	|	ЗаказыПокупателейОстатки.Номенклатура               = ЗаказыРаспределениеОстатки.Номенклатура
	|	И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры
	|ГДЕ
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) > ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)";
	
	ВидГраницыИтог = ?(Объект.Проведен, ВидГраницы.Исключая, ВидГраницы.Включая);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НаДату",                     ?(Объект.Ссылка.Пустая(), ТекущаяДатаСеанса(), 
																	Новый Граница(Объект.Дата, ВидГраницыИтог)));
																	
	Запрос.УстановитьПараметр("Заказ",                      Строка.ЗаказПокупателя);
	Запрос.УстановитьПараметр("Номенклатура",               Строка.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", Строка.ХарактеристикаНоменклатуры);
	
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		Возврат Рез.Количество;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьТекущееСостояниеЗаказа()

// Перерасчет таблицы товаров в соответствии с таблицей распределений
//
// Параметры:
//	ЭтаФорма - форма, форма обрабатываемого документа.
//
Процедура ПерерасчетРаспределения(Объект) Экспорт
	
	Для Каждого СтрокаТоваров Из Объект.Товары Цикл
		СтрокаТоваров.Количество   = СтрокаТоваров.Количество - Мин(СтрокаТоваров.Распределено, СтрокаТоваров.Количество);
		СтрокаТоваров.Распределено = 0;
	КонецЦикла;
	
	СтруктураНоменклатуры = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры");
	Для Каждого СтрокаРаспределения Из Объект.РаспределениеЗаказа Цикл
		
		Если СтрокаРаспределения.Номенклатура.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураНоменклатуры.Вставить("Номенклатура",               СтрокаРаспределения.Номенклатура);
		СтруктураНоменклатуры.Вставить("ХарактеристикаНоменклатуры", СтрокаРаспределения.ХарактеристикаНоменклатуры);
		
		МассивСтрокТоваров = Объект.Товары.НайтиСтроки(СтруктураНоменклатуры);
		Если МассивСтрокТоваров.Количество() = 0 Тогда
			СтрокаТоваров = Объект.Товары.Добавить();
			СтрокаТоваров.Номенклатура               = СтрокаРаспределения.Номенклатура;
			СтрокаТоваров.ХарактеристикаНоменклатуры = СтрокаРаспределения.ХарактеристикаНоменклатуры;
			СтрокаТоваров.ЕдиницаИзмерения           = СтрокаРаспределения.ЕдиницаИзмерения;
			СтрокаТоваров.Коэффициент                = СтрокаРаспределения.Коэффициент;
			
			// Обработчик события при изменении номенклатуры
			ТоварыНоменклатураПриИзменении(Объект, СтрокаТоваров);
			
			СтрокаТоваров.Количество   = 0;
			СтрокаТоваров.Распределено = 0;
		Иначе
			СтрокаТоваров = МассивСтрокТоваров[0];
		КонецЕсли;
		
		Коэффициент  = ?(СтрокаТоваров.Коэффициент = 0, 1, СтрокаТоваров.Коэффициент);
		Распределено = ((СтрокаРаспределения.Количество * СтрокаРаспределения.Коэффициент) / Коэффициент);
		
		СтрокаТоваров.Распределено = СтрокаТоваров.Распределено + Распределено;
		СтрокаТоваров.Количество   = СтрокаТоваров.Количество   + Распределено;
		
		ТоварыКоличествоПриИзменении(Объект, СтрокаТоваров);
		
	КонецЦикла;
	
	МассивСтрокТоваров = Объект.Товары.НайтиСтроки(Новый Структура("Количество, Резерв, Распределено", 0, 0, 0));
	Для Каждого СтрокаТоваров Из МассивСтрокТоваров Цикл
		Объект.Товары.Удалить(СтрокаТоваров);
	КонецЦикла;
	
КонецПроцедуры // ПерерасчетРаспределения()

// Обработчик события возникающего при изменении данных реквизита "Проверка заполнения"
// в таблице "Распределение заказа".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура РаспределениеЗаказаПроверкаЗаполнения(Объект, Строка)
	
	Если (НЕ ЗначениеЗаполнено(Строка.ЗаказПокупателя)) ИЛИ (НЕ ЗначениеЗаполнено(Строка.Номенклатура)) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоНераспределенного = ПолучитьТекущееСостояниеЗаказа(Объект, Строка);
	Если КоличествоНераспределенного = Неопределено Тогда
		ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(Строка.Номенклатура);
		ОбщегоНазначения.СообщитьПользователю(
				"[" + ЗначениеКолонкиКода + "]" + НСтр("ru = ' Номенклатура <'") + Строка.Номенклатура.Наименование
		+ ?(Строка.ХарактеристикаНоменклатуры.Пустая(), "", " / " + Строка.ХарактеристикаНоменклатуры.Наименование)
		+ НСтр("ru = '> отсутствует в заказе <'") + Строка.ЗаказПокупателя + НСтр("ru = '> или полностью распределена.'"));
		
		Если ТипЗнч(Строка.ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			Строка.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
		Иначе
			Строка.ЗаказПокупателя = Документы.ЗаказВнутренний.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		
		Если КоличествоНераспределенного < Строка.Количество * Строка.Коэффициент Тогда
			Строка.Количество = КоличествоНераспределенного / Строка.Коэффициент;
		КонецЕсли;
		
		мсвСтрок = Строка.ЗаказПокупателя.Товары.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры));
		
		Если мсвСтрок.Количество() > 0 Тогда
			Строка.Цена = мсвСтрок[0].Цена;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры // РаспределениеЗаказаПроверкаЗаполнения()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ПодразделениеПолучатель");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("СкладКомпании");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	ОбязательныеРеквизиты.Добавить("РаспределениеЗаказа.Номенклатура");
	ОбязательныеРеквизиты.Добавить("РаспределениеЗаказа.Количество");
	ОбязательныеРеквизиты.Добавить("РаспределениеЗаказа.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("РаспределениеЗаказа.Коэффициент");
	ОбязательныеРеквизиты.Добавить("РаспределениеЗаказа.ЗаказПокупателя");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	
	// Уникальные поля таблицы Распределение заказа
	УникальныеРаспределение = Новый Массив();
	УникальныеРаспределение.Добавить("Номенклатура");
	УникальныеРаспределение.Добавить("ЕдиницаИзмерения");
	УникальныеРаспределение.Добавить("ХарактеристикаНоменклатуры");
	УникальныеРаспределение.Добавить("ЗаказПокупателя");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти = Новый Структура();
	УникальныеТабличныеЧасти.Вставить("Товары",              УникальныеТовары);
	УникальныеТабличныеЧасти.Вставить("РаспределениеЗаказа", УникальныеРаспределение);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("ПодразделениеПолучатель");
	Если Объект.ХозОперация = Справочники.ХозОперации.ЗаказРезервированиеВнутренние
			ИЛИ Объект.ХозОперация = Справочники.ХозОперации.РезервированиеВнутреннее Тогда
		КонтролируемыеРеквизиты.Вставить("СкладКомпании", Ложь);
	КонецЕсли;
	
	КонтролируемыеРеквизитыТЧ = Новый Структура();
	КонтролируемыеРеквизитыТЧ.Вставить("ЗаказПокупателя", КонтрольПоПодразделению);
	
	КонтролируемыеРеквизиты.Вставить("РаспределениеЗаказа", КонтролируемыеРеквизитыТЧ);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	// IvEd_Alfa +++
	// Очистка реквизитов источника обеспечения при смене подразделения
	Если ЕстьРеквизит(Объект, "КлючСтрокиПоставщика", "Товары") Тогда
		ДанныеЗаполнения = Новый Структура("Поставщик,НаправлениеПоставки,КлючСтрокиПоставщика,СрокПоставкиВСтроке");
		Для Каждого Строка Из Объект.Товары Цикл
			ЗаполнитьЗначенияСвойств(Строка, ДанныеЗаполнения);
		КонецЦикла;
	КонецЕсли;
	// IvEd_Alfa ---
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ЗаказВнутренний Тогда
		
		Для Каждого СтрокаТоваров Из Объект.Товары Цикл
			Если СтрокаТоваров.Резерв<>0 Тогда
				СтрокаТоваров.Резерв = 0;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Объект.ХозОперация=Справочники.ХозОперации.РезервированиеВнутреннее Тогда
		
		Для Каждого СтрокаТоваров Из Объект.Товары Цикл
			Если СтрокаТоваров.Количество <> СтрокаТоваров.Резерв Тогда
				СтрокаТоваров.Количество = СтрокаТоваров.Резерв;
				ТоварыКоличествоПриИзменении(Объект, СтрокаТоваров);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в табличной части "Товары".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "ХарактеристикаНоменклатуры"
// в табличной части "Товары".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "ЕдиницаИзмерения" в табличной части "Товары".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
	Если НЕ Строка.Коэффициент = Строка.ЕдиницаИзмерения.Коэффициент Тогда
		
		КоэффВрем = ?(Строка.Коэффициент = 0, 1, Строка.Коэффициент); // запоминаем старый коэффициент
		
		Строка.Коэффициент  = Строка.ЕдиницаИзмерения.Коэффициент; // установим новый
		Строка.Распределено = Строка.Распределено * КоэффВрем / Строка.Коэффициент; // рассчитаем количество.
		Строка.Количество   = Строка.Количество * КоэффВрем / Строка.Коэффициент; // рассчитаем количество
		
		ТоварыКоличествоПриИзменении(Объект, Строка);
		
	КонецЕсли;
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в табличной части "Товары".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.ХозОперация = Справочники.ХозОперации.РезервированиеВнутреннее Тогда
		Строка.Резерв     = Макс(Строка.Распределено, Строка.Резерв);
		Строка.Количество = Строка.Резерв;
	ИначеЕсли Объект.ХозОперация = Справочники.ХозОперации.ЗаказВнутренний Тогда
		Строка.Резерв     = 0;
		Строка.Количество = Макс(Строка.Распределено, Строка.Количество);
	Иначе
		Строка.Количество = Макс(Строка.Распределено, Строка.Количество);
	КонецЕсли;
	
	Строка.Количество = Макс(Строка.Резерв, Строка.Количество);
	
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Распределено" в табличной части "Товары".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части.
//
Процедура ТоварыРаспределеноПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена" в табличной части "Товары".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма" в табличной части "Товары".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Резерв" в табличной части "Товары".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части.
//
Процедура ТоварыРезервПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ЗаказВнутренний Тогда
		Строка.Резерв = 0;
	ИначеЕсли Строка.Резерв > Строка.Количество ИЛИ Объект.ХозОперация = Справочники.ХозОперации.РезервированиеВнутреннее Тогда
		Строка.Количество = Строка.Резерв;
		ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "СуммаВсего" в табличной части "Товары".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаспределениеЗаказа

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Распределение заказа".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура РаспределениеЗаказаНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия, "РаспределениеЗаказа");
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	РаспределениеЗаказаПроверкаЗаполнения(Объект, Строка);
	
КонецПроцедуры // РаспределениеЗаказаНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры"
// в таблице "Распределение заказа".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура РаспределениеЗаказаХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ОбработатьИзменениеХарактеристикаНоменклатуры(Объект, Строка, ПараметрыДействия, "РаспределениеЗаказа");
	
	РаспределениеЗаказаПроверкаЗаполнения(Объект, Строка);
	
КонецПроцедуры // РаспределениеЗаказаХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Распределение заказа".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура РаспределениеЗаказаЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	//// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ОбработатьИзменениеЕдиницаИзмерения(Объект, Строка, ПараметрыДействия, "РаспределениеЗаказа");
	
КонецПроцедуры // РаспределениеЗаказаЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Распределение заказа".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура РаспределениеЗаказаКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	РаспределениеЗаказаПроверкаЗаполнения(Объект, Строка);
	
КонецПроцедуры // РаспределениеЗаказаКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Заказ покупателя" в таблице "Распределение заказа".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура РаспределениеЗаказаЗаказПокупателяПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	РаспределениеЗаказаПроверкаЗаполнения(Объект, Строка);
	
КонецПроцедуры // РаспределениеЗаказаЗаказПокупателяПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ТабличныеЧастиСКомандами = Новый Массив();
	ТабличныеЧастиСКомандами.Добавить("Товары");
	ТабличныеЧастиСКомандами.Добавить("РаспределениеЗаказа");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ЗаказВнутренний");
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиСКомандами Цикл
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, ТабличнаяЧасть);
		
		Если ОтображатьЗаполнитьИзФайла Тогда
			ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, ТабличнаяЧасть);
		КонецЕсли;
	КонецЦикла;
	
	ВыборПодразделения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборПодразделения.ВыборСсылки 		= "Справочник.ПодразделенияКомпании.ФормаСписка";
	ВыборПодразделения.Обязательный 	= Истина;
	ВыборПодразделения.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать получателя.'");
	
	ВыборСклада 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборСклада.ВыборСсылки 		= "Справочник.СкладыКомпании.ФормаСписка";
	ВыборСклада.Обязательный 		= Истина;
	ВыборСклада.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать склад компании.'");

	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Минимальными остатками'");
	Команда.Идентификатор	= "ТоварыМинимальнымиОстатками";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ПодразделениеПолучатель", ВыборПодразделения);
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "РаспределениеЗаказаПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить по заказам'");
	Команда.Идентификатор	= "РаспределениеЗаказаЗаполнитьПоЗаказам";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "РаспределениеЗаказа";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ПодразделениеПолучатель", ВыборПодразделения);
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить резерв остатками'");
	Команда.Идентификатор	= "ТоварыЗаполнитьРезервОстатками";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", ВыборСклада);
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением = Ложь;
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
		Команда,
		"ХозОперация",
		Справочники.ХозОперации.ЗаказРезервированиеВнутренние
	);
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзДокумента(
		КомандыЗаполнения,
		"Товары",
		Параметры
	);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ТоварыМинимальнымиОстатками.Видимость",             Истина);
	ПараметрыКоманд.Вставить("ТоварыМинимальнымиОстатками.Доступность",           Истина);
	ПараметрыКоманд.Вставить("РаспределениеЗаказаЗаполнитьПоЗаказам.Видимость",   Истина);
	ПараметрыКоманд.Вставить("РаспределениеЗаказаЗаполнитьПоЗаказам.Доступность", Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьРезервОстатками.Видимость",      	  Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьРезервОстатками.Доступность",    	  (Объект.ХозОперация = Справочники.ХозОперации.ЗаказРезервированиеВнутренние));
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа минимальными остатками
//
Функция ТоварыМинимальнымиОстатками(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.ПодразделениеПолучатель = ПараметрыЗаполнения.ПодразделениеПолучатель Тогда
		
		Объект.ПодразделениеПолучатель = ПараметрыЗаполнения.ПодразделениеПолучатель;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДополнительныеРеквизитыНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ДополнительныеРеквизитыНоменклатурыСрезПоследних.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	ЕСТЬNULL(ДополнительныеРеквизитыНоменклатурыСрезПоследних.ЗначениеРеквизита, 0) КАК МинимальныйОстаток,
	|	ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.РезервОстаток, 0) + ЕСТЬNULL(ЗаказыПоставщикамОстатки.ЗаказаноОстаток, 0) + ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) - ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0) КАК ТекущийОстаток
	|ИЗ
	|	РегистрСведений.ДополнительныеРеквизитыНоменклатуры.СрезПоследних(
	|			&НаДату,
	|			ДополнительныйРеквизит = &ДополнительныйРеквизит
	|				И ПодразделениеКомпании = &ПодразделениеКомпании) КАК ДополнительныеРеквизитыНоменклатурыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровКомпании.Остатки(&НаДату, СкладКомпании.ПодразделениеКомпании = &ПодразделениеКомпании) КАК ОстаткиТоваровКомпанииОстатки
	|		ПО ДополнительныеРеквизитыНоменклатурыСрезПоследних.Номенклатура = ОстаткиТоваровКомпанииОстатки.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&НаДату, Заказ.ПодразделениеПолучатель = &ПодразделениеКомпании) КАК ЗаказыПокупателейОстатки
	|		ПО ДополнительныеРеквизитыНоменклатурыСрезПоследних.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыРаспределение.Остатки(&НаДату, ЗаказПокупателя.ПодразделениеКомпании = &ПодразделениеКомпании) КАК ЗаказыРаспределениеОстатки
	|		ПО ДополнительныеРеквизитыНоменклатурыСрезПоследних.Номенклатура = ЗаказыРаспределениеОстатки.Номенклатура 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(&НаДату, ЗаказПоставщику.ПодразделениеКомпании = &ПодразделениеКомпании) КАК ЗаказыПоставщикамОстатки 
	|		ПО ДополнительныеРеквизитыНоменклатурыСрезПоследних.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураНаименование
	|";
	
	Запрос.УстановитьПараметр("НаДату", ?(НЕ ЗначениеЗаполнено(Ссылка), Новый МоментВремени(КонецДня(Объект.Дата)), Новый МоментВремени(Объект.Дата)));
	Запрос.УстановитьПараметр("ДополнительныйРеквизит", Перечисления.ДополнительныеРеквизитыНоменклатуры.МинимальныйОстаток);
	Запрос.УстановитьПараметр("ПодразделениеКомпании",  Объект.ПодразделениеПолучатель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.МинимальныйОстаток > Выборка.ТекущийОстаток Тогда
			
			НоваяНоменклатура = Объект.Товары.Добавить();
			НоваяНоменклатура.Номенклатура = Выборка.Номенклатура;
			НоваяНоменклатура.Количество   = Выборка.МинимальныйОстаток - Выборка.ТекущийОстаток;
			ТоварыНоменклатураПриИзменении(Объект, НоваяНоменклатура, ПараметрыДействия);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПерерасчетРаспределения(Объект);
	
КонецФункции // ТоварыМинимальнымиОстатками()

// Обработчик заполнения документа по заказам
//
Функция РаспределениеЗаказаЗаполнитьПоЗаказам(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.ПодразделениеПолучатель = ПараметрыЗаполнения.ПодразделениеПолучатель Тогда
		Объект.ПодразделениеПолучатель = ПараметрыЗаполнения.ПодразделениеПолучатель;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстатки.Заказ КАК ЗаказПокупателя,
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	0 КАК Цена,
	|	(ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) - ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)) КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&НаДату, Заказ.ПодразделениеКомпании = &ПодразделениеКомпании) КАК ЗаказыПокупателейОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ЗаказыРаспределение.Остатки(&НаДату, ЗаказПокупателя.ПодразделениеКомпании = &ПодразделениеКомпании) КАК ЗаказыРаспределениеОстатки
	|ПО
	|	ЗаказыПокупателейОстатки.Заказ = ЗаказыРаспределениеОстатки.ЗаказПокупателя
	|	И ЗаказыПокупателейОстатки.Номенклатура = ЗаказыРаспределениеОстатки.Номенклатура
	|	И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры
	|ГДЕ
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) > ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НаДату", ?(НЕ ЗначениеЗаполнено(Ссылка), Новый МоментВремени(КонецДня(Объект.Дата)), Новый МоментВремени(Объект.Дата)));
	Запрос.УстановитьПараметр("ПодразделениеКомпании",  Объект.ПодразделениеПолучатель);
	
	Объект.РаспределениеЗаказа.Загрузить(Запрос.Выполнить().Выгрузить());
	Для Каждого ТекСтрокаРаспределения Из Объект.РаспределениеЗаказа Цикл
		РаспределениеЗаказаЗаказПокупателяПриИзменении(Объект, ТекСтрокаРаспределения, ПараметрыДействия);
	КонецЦикла;
	
	ПерерасчетРаспределения(Объект);
	
КонецФункции // РаспределениеЗаказаЗаполнитьПоЗаказам()

// Обработчик заполнения документа по резервам
//
Функция ТоварыЗаполнитьРезервОстатками(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	Объект = ПараметрыКоманды.Источник;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	             |	ОстаткиТоваровКомпанииОстатки.Номенклатура,
	             |	ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры,
	             |	СУММА(ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток, 0)) - СУММА(ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.РезервОстаток, 0)) КАК Остаток
	             |ИЗ
	             |	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(
	             |		&НаМомент,
	             |		Номенклатура В (&Номенклатура)
	             |		    И СкладКомпании = &СкладКомпании
	             |		    И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)) КАК ОстаткиТоваровКомпанииОстатки
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ОстаткиТоваровКомпанииОстатки.Номенклатура,
	             |	ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры";
				 
	Запрос.УстановитьПараметр("НаМомент",					?(Объект.Ссылка.Пустая(), Объект.Дата,  Новый МоментВремени(Объект.Дата, Объект.Ссылка)));
	Запрос.УстановитьПараметр("Номенклатура",				Объект.Товары.Выгрузить(, "Номенклатура"));
	Запрос.УстановитьПараметр("СкладКомпании",				Объект.СкладКомпании);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",	Объект.Товары.Выгрузить(, "ХарактеристикаНоменклатуры"));
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТоваров Из Объект.Товары Цикл
		
		КоличествоЗаказа		= СтрокаТоваров.Количество;
		СтрокаТоваров.Резерв	= 0;
		МассивОстатков			= ТаблицаОстатков.НайтиСтроки(Новый Структура("Номенклатура,ХарактеристикаНоменклатуры",СтрокаТоваров.Номенклатура,СтрокаТоваров.ХарактеристикаНоменклатуры));
		
		Для каждого СтрокаОстатков Из МассивОстатков Цикл
			
			РезервЗаказа			= СтрокаТоваров.Резерв;
			Остаток					= СтрокаОстатков.Остаток/СтрокаТоваров.Коэффициент;
			Резерв					= Мин(КоличествоЗаказа-РезервЗаказа,Остаток);
			СтрокаТоваров.Резерв	= СтрокаТоваров.Резерв+Резерв;
			СтрокаОстатков.Остаток	= СтрокаОстатков.Остаток-(Резерв*СтрокаТоваров.Коэффициент);
			
			Если СтрокаТоваров.Количество = СтрокаТоваров.Резерв Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЦикла;
	
КонецФункции // ТоварыЗаполнитьРезервОстатками()

// Получить состояние заказа клиента
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица значений с результатами движений по заказу.
//
Функция ПолучитьДвиженияЗаказа(Объект) Экспорт
	// Сначала получим список номенклатуры по документу
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ
	|	ТаблицаЗаказа
	|ИЗ
	|	Документ.ЗаказВнутренний.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка = &Заказ
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) КАК Заказано,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) КАК Зарезервировано,
	|	ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)КАК Распределено,
	|	ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток, 0) КАК СкладОстаток,
	|	ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.РезервОстаток, 0) КАК СкладЗарезервировано
	|ИЗ
	|	ТаблицаЗаказа КАК ДокументТовары
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(, Заказ=&Заказ) КАК ЗаказыПокупателейОстатки
	|ПО
	|	ДокументТовары.Номенклатура               = ЗаказыПокупателейОстатки.Номенклатура И 
	|	ДокументТовары.ХарактеристикаНоменклатуры = ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ЗаказыРаспределение.Остатки(,ЗаказПокупателя=&Заказ) КАК ЗаказыРаспределениеОстатки
	|ПО
	|	ДокументТовары.Номенклатура               = ЗаказыРаспределениеОстатки.Номенклатура И 
	|	ДокументТовары.ХарактеристикаНоменклатуры = ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(,
	|				(Номенклатура, ХарактеристикаНоменклатуры) В 
	|					(ВЫБРАТЬ
	|						ТаблицаЗаказа.Номенклатура КАК Номенклатура,
	|						ТаблицаЗаказа.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|					ИЗ
	|						ТаблицаЗаказа КАК ТаблицаЗаказа)) КАК ОстаткиТоваровКомпанииОстатки
	|ПО
	|	ДокументТовары.Номенклатура               = ОстаткиТоваровКомпанииОстатки.Номенклатура И 
	|	ДокументТовары.ХарактеристикаНоменклатуры = ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры
	|");
	Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Возврат Выгрузка;
	
КонецФункции // ПолучитьДвиженияЗаказа()

// Обработчик события возникающего при изменении данных реквизита "Поставщик" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПоставщикПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.ПоставщикПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаказВнутренний",
		"ПФ_MXL_ЗаказВнутренний",
		НСтр("ru = 'Заказ внутренний'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик события формирования печатной формы.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - информация для заполнения письма при отправке печатной формы электронной почтой.
//                                     Содержит следующие поля:
//    ** Получатель - Строка, СписокЗначений, Массив - список получателей письма;
//    ** Тема - Строка - Тема письма,
//    ** Текст - Строка - Текст письма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ЗаказВнутренний") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ЗаказВнутренний",
															НСтр("ru = 'Заказ внутренний'"),
															ПечатьЗаказВнутренний(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
КонецПроцедуры // Печать()

// Формирует печатную форму "ЗаказВнутренний"
//
Функция ПечатьЗаказВнутренний(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказВнутренний_ЗаказВнутренний";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказВнутренний.ПФ_MXL_ЗаказВнутренний");
		
		ОбластьШапкаТаблицы    = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// Заголовок
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		ОбластьЗаголовок.Параметры.ПредставлениеПокупателя	=
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.СкладКомпании);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Готовим шапку
		НомерСтраницы = 2; 
		НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,Сумма", Документ.ВалютаДокумента, 0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// Таб часть 
		ВыборкаТабличнойЧасти = Документ.Товары;
		Для каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ);
			СтруктураСтроки.Вставить("Сумма", Формат(СтрокаТЧ.Сумма, ФорматВыводаСуммы));
			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			
			// Доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// Инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,Сумма", Документ.ВалютаДокумента, 0);
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// Заполнение подвала и итогов
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("Сумма");
		ОбластьПодвал.Параметры.Сумма = Формат(СуммаВсего, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'") + Символы.НПП
			+ ВыборкаТабличнойЧасти.Количество() + Символы.НПП + НСтр("ru = 'на сумму'") + Символы.НПП
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, Документ.ВалютаДокумента);
		
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.
			ДанныеОтветственногоЛица(Документ, "ИсполнительПодразделение", "ИсполнительПодразделение"));
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.
			ДанныеОтветственногоЛица(Документ, "ЗаказчикПодразделение", "ЗаказчикПодразделение"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатьЗаказВнутренний()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РеализацияТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказВнутренний);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказПоставщику);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаменаВЗаказеПокупателя);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаЗаказаПокупателя);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РаспределениеЗаказаПокупателя);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПеремещениеРезервов);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПеремещениеТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РезервированиеЗаказовПокупателя);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СнятиеРаспределенияЗаказовПокупателя);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СнятиеРезервовЗаказовПокупателя);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ЗаказВнутренний);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли