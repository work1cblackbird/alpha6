// Модуль документа "Заказ внутренний"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	// установка хоз. операции
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		ХозОперация = Справочники.ХозОперации.ЗаказРезервированиеВнутренние;
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда	
			Если ДанныеЗаполнения.Свойство("ЗаполнениеИзКорзины") Тогда
				Для Каждого Строка Из ДанныеЗаполнения.Товары Цикл		
					НоваяСтрока 						   = Товары.Добавить();	
					НоваяСтрока.Номенклатура 			   = Строка.Номенклатура;
					НоваяСтрока.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
					НоваяСтрока.Количество 				   = Строка.Количество;
					НоваяСтрока.ЕдиницаИзмерения 		   = Строка.ЕдиницаИзмерения;
					НоваяСтрока.Коэффициент		 		   = Строка.Коэффициент;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
		
	ПодразделениеПолучатель = ПодразделениеКомпании;
	
	// Заполним срок снятия резервов
	ОтсрочкаСнятияРезервов = ПраваИНастройкиПользователя.Значение("СрокРезерваПоУмолчанию");
	Если ЗначениеЗаполнено(ОтсрочкаСнятияРезервов) И НЕ ЗначениеЗаполнено(СрокСнятияРезерва) Тогда
		СрокСнятияРезерва = НачалоДня(ТекущаяДатаСеанса()) + 86400 * ОтсрочкаСнятияРезервов;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ХозОперация = Справочники.ХозОперации.РезервированиеВнутреннее Тогда
		Для Каждого ТекСтрока Из Товары Цикл
			Если ТекСтрока.Резерв = 0 Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Строка <%1>: не заполнено количество резерва.'"),ТекСтрока.НомерСтроки),
					ЭтотОбъект,
					, ,
					Отказ	
				);
			Иначе
				ТекСтрока.Количество = ТекСтрока.Резерв;
			КонецЕсли;
		КонецЦикла;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ ОбменДанными.Загрузка Тогда
		Документы.ЗаказВнутренний.ХозОперацияПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим наличие распределения данного заказа.
	Если НЕ ПраваИНастройкиПользователя.Значение("РедактированиеЗаказовПриНаличииРаспределения", ЭтотОбъект) Тогда
		
		ВыборкаРаспределения = ПолучитьРаспределенияЗаказа();
		Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
			
			Если ВыборкаРаспределения.Количество() > 0 Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Товары по заказу покупателя распределены по заказам поставщикам. Запись без проведения запрещена.'"),
					,
					,
					,
					Отказ
				);
				
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			
			Если ВыборкаРаспределения.Количество() > 0 Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Товары по заказу покупателя распределены по заказам поставщикам. Отмена проведения запрещена.'"),
					,
					,
					,
					Отказ
				);
				
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			// Свернем товары с учетом единиц измерения.
			ТоварыКопия = Товары.Выгрузить();
			
			Для Каждого СтрокаТоваров Из ТоварыКопия Цикл
				
				СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
				
			КонецЦикла;
			
			ТоварыКопия.Свернуть("Номенклатура,ХарактеристикаНоменклатуры", "Количество");
			ВыборкаРаспределения.Сбросить();
			
			Пока ВыборкаРаспределения.Следующий() Цикл
				
				СтруктураПоиска = Новый Структура(
					"Номенклатура,ХарактеристикаНоменклатуры",
					ВыборкаРаспределения.Номенклатура,
					ВыборкаРаспределения.ХарактеристикаНоменклатуры
				);
				
				СтрокиТоваров = ТоварыКопия.НайтиСтроки(СтруктураПоиска);
				
				ТоварКоличество = 0;
				Если СтрокиТоваров.Количество() > 0 Тогда
					
					ТоварКоличество = СтрокиТоваров[0].Количество;
					
				КонецЕсли;
				
				Если ТоварКоличество < ВыборкаРаспределения.Количество Тогда
					
					Если НЕ ЗначениеЗаполнено(ВыборкаРаспределения.ХарактеристикаНоменклатуры) Тогда
						
						ТекстСообщения = НСтр("ru = '[%1] Товар ""%2"" распределен по заказам поставщикам в количестве %3 %4.'");
						
						ТекНоменклатура = ВыборкаРаспределения.Номенклатура;
						ОбщегоНазначения.СообщитьПользователю(
							СтрШаблон(
							ТекстСообщения,
							ТекНоменклатура.Код,
							ТекНоменклатура.Наименование,
							Формат(ВыборкаРаспределения.Количество, "ЧЦ=15; ЧДЦ=3; ЧН=0,00"),
							ТекНоменклатура.БазоваяЕдиницаИзмерения),
							, , ,
							Отказ
							);
						
					Иначе
						
						ТекстСообщения = НСтр(
						"ru = '[%1] Товар ""%2"" с характеристикой ""%5"" распределен по заказам поставщикам в количестве %3 %4.'");
						
						ТекНоменклатура = ВыборкаРаспределения.Номенклатура;
						ОбщегоНазначения.СообщитьПользователю(
							СтрШаблон(
							ТекстСообщения,
							ТекНоменклатура.Код,
							ТекНоменклатура.Наименование,
							Формат(ВыборкаРаспределения.Количество, "ЧЦ=15; ЧДЦ=3; ЧН=0,00"),
							ТекНоменклатура.БазоваяЕдиницаИзмерения,
							ВыборкаРаспределения.ХарактеристикаНоменклатуры),
							, , ,
							Отказ
							);
						
					КонецЕсли;					
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Отказ Тогда
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ХозОперация = Справочники.ХозОперации.ЗаказВнутренний Тогда
		Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
			СтрокаТабличнойЧасти.Резерв = 0;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТаблицаЗаказов = РаспределениеЗаказа.Выгрузить(, "ЗаказПокупателя");
		ТаблицаЗаказов.Свернуть("ЗаказПокупателя");
		ТаблицаДолгов = ЗаказыСервер.ДолгиПоПредоплате(ЭтотОбъект, ТаблицаЗаказов.ВыгрузитьКолонку("ЗаказПокупателя"));
		
		Если ТаблицаДолгов.Количество() > 0 Тогда
			Для Каждого ТекСтрока Из РаспределениеЗаказа Цикл
				СтрокаПоиска = ТаблицаДолгов.Найти(ТекСтрока.ЗаказПокупателя, "Заказ");
				Если НЕ СтрокаПоиска = Неопределено Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Строка: <%1>, Заказ: <%2> нельзя распределить. Долг по предоплате составляет: <%3> <%4>.'"),
						ТекСтрока.НомерСтроки,
						СокрЛП(ТекСтрока.ЗаказПокупателя),
						Формат(СтрокаПоиска.Долг, "ЧЦ=15; ЧДЦ=2"),
						СокрЛП(СтрокаПоиска.Валюта)
					);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоЗаказамПередПроведением(Ссылка, ДополнительныеСвойства);
		
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
	Если НЕ Отказ
		И ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "РежимЗаписи") = РежимЗаписиДокумента.Запись Тогда
		РегистрыСведений.ЖурналСостояний.ЗаписьВЖурналСостояний(Ссылка, Справочники.ВидыСостоянийЗаказНарядов.Новый);
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	Заказывать    = Истина;
	Резервировать = ((ХозОперация = Справочники.ХозОперации.ЗаказРезервированиеВнутренние)
		ИЛИ (ХозОперация = Справочники.ХозОперации.РезервированиеВнутреннее));
	
	// проводим внутренний заказ
	НаборЗаписейЗаказыПокупателей = Движения.ЗаказыПокупателей;
	НаборЗаписейЗаказыПокупателей.РежимПроведения = РежимПроведения;
	НаборЗаписейЗаказыПокупателей.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейЗаказыПокупателей.РезультатЗапросаПоТоварам = Неопределено;
	НаборЗаписейЗаказыПокупателей.Контрагент = ПодразделениеПолучатель;
	НаборЗаписейЗаказыПокупателей.Заказ = Ссылка;
	НаборЗаписейЗаказыПокупателей.СкладКомпании = СкладКомпании;
	НаборЗаписейЗаказыПокупателей.Заказывать = Заказывать;
	НаборЗаписейЗаказыПокупателей.Резервировать = Резервировать;
	Если НЕ НаборЗаписейЗаказыПокупателей.Приход() Тогда
		Отказ = Истина;
	КонецЕсли;
	Если НЕ Отказ Тогда
		НаборЗаписейЗаказыПокупателей.Записать();
	КонецЕсли; 
	
	Если Резервировать Тогда
		// резервирование внутреннего заказа
		НаборЗаписейОстатки = Движения.ОстаткиТоваровКомпании;
		НаборЗаписейОстатки.РежимПроведения = РежимПроведения;
		НаборЗаписейОстатки.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейОстатки.РезультатЗапросаПоТоварам = Неопределено;
		НаборЗаписейОстатки.СкладКомпании = СкладКомпании;
		НаборЗаписейОстатки.ДвиженияПоРознице = Ложь;
		Если НЕ НаборЗаписейОстатки.Зарезервировать() Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли; 
	
	// зафиксируем распределение заказов покупателей на внутреннем заказе
	НаборЗаписейЗаказыРаспределение = Движения.ЗаказыРаспределение;
	НаборЗаписейЗаказыРаспределение.РежимПроведения = РежимПроведения;
	НаборЗаписейЗаказыРаспределение.ДокументОбъект = ЭтотОбъект;
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ДокументТовары.ЗаказПокупателя КАК ЗаказПокупателя,
		|	СУММА(ДокументТовары.Количество*ДокументТовары.Коэффициент) КАК Количество
		|ИЗ
		|	Документ.ЗаказВнутренний.РаспределениеЗаказа КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Ссылка=&Ссылка
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.ХарактеристикаНоменклатуры,
		|	ДокументТовары.ЗаказПокупателя
		|");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	НаборЗаписейЗаказыРаспределение.РезультатЗапросаПоТоварам = Запрос.Выполнить();
	НаборЗаписейЗаказыРаспределение.ЗаказПокупателя = Неопределено; // Заказ находится в табличной части
	НаборЗаписейЗаказыРаспределение.ЗаказПоставщика = Ссылка;
	Если НЕ НаборЗаписейЗаказыРаспределение.Приход() Тогда
		Отказ = Истина;
	КонецЕсли;
	// двигаем границу последовательности заказов
	РаботаСГраницами.СдвинутьГраницуЗаказов(Ссылка, ДополнительныеСвойства, Движения);

	Если Не Отказ Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказВнутреннийТовары.ИдентификаторСтроки,
		|	ЗаказВнутреннийТовары.Номенклатура,
		|	ЗаказВнутреннийТовары.ХарактеристикаНоменклатуры,
		|	ЗаказВнутреннийТовары.Количество*ЗаказВнутреннийТовары.Коэффициент КАК КоличествоЗаказа,
		|	ГрафикПоставок.Количество,
		|	ГрафикПоставок.ДатаПоставки,
		|	ГрафикПоставок.Контрагент,
		|	ГрафикПоставок.ДатаПоступления,
		|	ГрафикПоставок.Информация
		|ИЗ
		|	Документ.ЗаказВнутренний.Товары КАК ЗаказВнутреннийТовары
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ГрафикПоставок КАК ГрафикПоставок
		|ПО
		|	ЗаказВнутреннийТовары.Ссылка = &Ссылка
		|	И ЗаказВнутреннийТовары.Ссылка = ГрафикПоставок.ЗаказПокупателя
		|	И ЗаказВнутреннийТовары.ИдентификаторСтроки = ГрафикПоставок.ИдентификаторСтроки
		|ГДЕ
		|	ЗаказВнутреннийТовары.Ссылка = &Ссылка
		|ИТОГИ
		|	МАКСИМУМ(КоличествоЗаказа)
		|ПО
		|	ЗаказВнутреннийТовары.ИдентификаторСтроки
		|";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		ВыборкаСтроки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		РегистрыСведений.ГрафикПоставок.ЗаписатьГрафикПоставок(Ссылка, ВыборкаСтроки);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получение остатков распределения заказа по заказам поставщикам
//
// Возвращаемое значение:
//  Возвращает выборку запроса.
//
Функция ПолучитьРаспределенияЗаказа()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	             |	ЗаказыРаспределение.Номенклатура КАК Номенклатура,
	             |	ЗаказыРаспределение.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |	СУММА(ЗаказыРаспределение.Количество) КАК Количество
	             |ИЗ
	             |	РегистрНакопления.ЗаказыРаспределение КАК ЗаказыРаспределение
	             |ГДЕ
	             |	ЗаказыРаспределение.ВидДвижения = &ВидДвиженияПриход
	             |	И ЗаказыРаспределение.ЗаказПокупателя = &ЗаказПокупателя
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ЗаказыРаспределение.Номенклатура,
	             |	ЗаказыРаспределение.ХарактеристикаНоменклатуры";
	
	Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ЗаказПокупателя", Ссылка);
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьРаспределенияЗаказа()

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Заказ внутренний"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказВнутренний(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Товары.Очистить();
	РаспределениеЗаказа.Очистить();
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) - ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0) КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&КонецПериода, Заказ = &Заказ) КАК ЗаказыПокупателейОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ЗаказыРаспределение.Остатки(&КонецПериода, ЗаказПокупателя = &Заказ) КАК ЗаказыРаспределениеОстатки
	|ПО
	|	ЗаказыПокупателейОстатки.Номенклатура               = ЗаказыРаспределениеОстатки.Номенклатура
	|	И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры
	|ГДЕ
	|	(ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) - ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)) > 0
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры";
	
	Запрос.УстановитьПараметр("Заказ",			ДанныеЗаполнения);
	Запрос.УстановитьПараметр("КонецПериода",	?(Ссылка.Пустая(), ТекущаяДатаСеанса(), Ссылка.Дата));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрокаРаспределения 							= РаспределениеЗаказа.Добавить();
		НоваяСтрокаРаспределения.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрокаРаспределения.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрокаРаспределения.ЗаказПокупателя            = ДанныеЗаполнения;
		НоваяСтрокаРаспределения.Количество                 = Выборка.Количество;
		НоваяСтрокаРаспределения.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		
		Документы.ЗаказВнутренний.РаспределениеЗаказаЕдиницаИзмеренияПриИзменении(ЭтотОбъект,
			НоваяСтрокаРаспределения, ДополнительныеСвойства.ПараметрыДействия);
		
		Если НЕ НоваяСтрокаРаспределения.Коэффициент = 0 Тогда
			НоваяСтрокаРаспределения.Количество = НоваяСтрокаРаспределения.Количество / НоваяСтрокаРаспределения.Коэффициент;
		КонецЕсли;
		
		Документы.ЗаказВнутренний.РаспределениеЗаказаНоменклатураПриИзменении(ЭтотОбъект,
			НоваяСтрокаРаспределения, ДополнительныеСвойства.ПараметрыДействия);
		
	КонецЦикла;
	
	Документы.ЗаказВнутренний.ПерерасчетРаспределения(ЭтотОбъект);
	СуммаДокумента = Товары.Итог("СуммаВсего");
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказВнутренний()

// Производит заполнение объекта на основании документа "Заказ покупателя"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПокупателя(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Возвращаем заполнение по внутреннему заказу
	Возврат ОбработкаЗаполнения_ЗаказВнутренний(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_ЗаказПокупателя()

// Производит заполнение объекта на основании документа "Заказ-Наряд"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаряд(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.ЗаказВнутренний;
	
	Товары.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТоваров.Коэффициент КАК Коэффициент,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ТаблицаТоваров.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказНарядТовары.Номенклатура КАК Номенклатура,
	|		ЗаказНарядТовары.Количество КАК Количество,
	|		ЗаказНарядТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЗаказНарядТовары.Коэффициент КАК Коэффициент,
	|		ЗаказНарядТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|	ИЗ
	|		Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
	|	ГДЕ
	|		ЗаказНарядТовары.Ссылка = &ЗаказНаряд
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗаказНарядМатериалы.Номенклатура КАК Номенклатура,
	|		ЗаказНарядМатериалы.Количество КАК Количество,
	|		ЗаказНарядМатериалы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЗаказНарядМатериалы.Коэффициент КАК Коэффициент,
	|		ЗаказНарядМатериалы.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|	ИЗ
	|		Документ.ЗаказНаряд.Материалы КАК ЗаказНарядМатериалы
	|	ГДЕ
	|		ЗаказНарядМатериалы.Ссылка = &ЗаказНаряд
	|		) КАК ТаблицаТоваров
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.ЕдиницаИзмерения,
	|	ТаблицаТоваров.Коэффициент,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры
	|";
	Запрос.УстановитьПараметр("ЗаказНаряд", ДанныеЗаполнения);
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	// Получим остатки запасов
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
	МассивРежимовСписания = Новый Массив;
	МассивРежимовСписания.Добавить(Перечисления.РежимыАвтоСписанияХарактеристик.РучноеСписание);
	МассивРежимовСписания.Добавить(Перечисления.РежимыАвтоСписанияХарактеристик.ПустаяСсылка());
	
	МассивТоваров               = Новый Массив;
	МассивХарактеристик         = Новый Массив;
	МассивТоваровАвтоСписание   = Новый Массив;
	МассивТоваровРучноеСписание = Новый Массив;
	Для Каждого ТекЭлемент Из ТаблицаТоваров Цикл
		Значение = ТекЭлемент.Номенклатура.ТипНоменклатуры.АвтоСписаниеХарактеристик;
		Если ТекЭлемент.ХарактеристикаНоменклатуры = ПустаяХарактеристика
			И МассивРежимовСписания.Найти(Значение) = Неопределено Тогда
			Если МассивТоваровАвтоСписание.Найти(ТекЭлемент.Номенклатура) = Неопределено Тогда
				МассивТоваровАвтоСписание.Добавить(ТекЭлемент.Номенклатура);
			КонецЕсли;
		Иначе
			Если МассивТоваровРучноеСписание.Найти(ТекЭлемент.Номенклатура) = Неопределено Тогда
				МассивТоваровРучноеСписание.Добавить(ТекЭлемент.Номенклатура);
			КонецЕсли;
			Если МассивХарактеристик.Найти(ТекЭлемент.ХарактеристикаНоменклатуры) = Неопределено Тогда
				МассивХарактеристик.Добавить(ТекЭлемент.ХарактеристикаНоменклатуры);
			КонецЕсли;
		КонецЕсли;
		Если МассивТоваров.Найти(ТекЭлемент.Номенклатура) = Неопределено Тогда
			МассивТоваров.Добавить(ТекЭлемент.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	РезервыПоЗаказНаряду              = ДанныеЗаполнения.ЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду;
	ОснованиеЗаказНаряда              = ДанныеЗаполнения.ДокументОснование;
	ОснованиеСводногоРемонтногоЗаказа = ДанныеЗаполнения.СводныйРемонтныйЗаказ.ДокументОснование;
	
	ДопОтбор = "";
	Если ТипЗнч(ОснованиеЗаказНаряда) = Тип("ДокументСсылка.ЗаказПокупателя")
		И ЗначениеЗаполнено(ОснованиеЗаказНаряда) Тогда
		ДопОтбор = " ИЛИ Заказ = &ЗаказОснование";
	КонецЕсли;
	
	ДопОтборЗаказ = "";
	Если ТипЗнч(ОснованиеСводногоРемонтногоЗаказа) = Тип("ДокументСсылка.ЗаявкаНаРемонт")
		И ЗначениеЗаполнено(ОснованиеСводногоРемонтногоЗаказа) Тогда
		ДопОтборЗаказ = " ИЛИ Заказ.ДокументОснование = &ОснованиеСводногоРемонтногоЗаказа";
	КонецЕсли;
	
	ЗапросПоЗаказам = Новый Запрос;
	ЗапросПоЗаказам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъединенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ОбъединенныйЗапрос.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ОбъединенныйЗапрос.Заказано) КАК Заказано
	|ИЗ (ВЫБРАТЬ
	|		ЗаказыПоставщикамОбороты.Номенклатура КАК Номенклатура,
	|		ЗаказыПоставщикамОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ЗаказыПоставщикамОбороты.ЗаказаноОстаток КАК Заказано
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(, Номенклатура В (&Номенклатура)) КАК ЗаказыПоставщикамОбороты
	|	ГДЕ
	|		ЗаказыПоставщикамОбороты.ЗаказПоставщику.ДокументОснование = &ЗаказНаряд
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыПокупателей.Номенклатура,
	|		ЗаказыПокупателей.ХарактеристикаНоменклатуры,
	|		ЗаказыПокупателей.ЗаказаноОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(, (Заказ.ДокументОснование = &ЗаказНаряд" + ?(РезервыПоЗаказНаряду, ДопОтборЗаказ, " ИЛИ Контрагент = &Контрагент") + ДопОтбор + ") И Номенклатура В (&Номенклатура)) КАК ЗаказыПокупателей
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыВПроизводствеОстатки.Номенклатура,
	|		ТоварыВПроизводствеОстатки.ХарактеристикаНоменклатуры,
	|		ТоварыВПроизводствеОстатки.КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ТоварыВПроизводстве.Остатки(, ЗаказНаряд = &ЗаказНаряд) КАК ТоварыВПроизводствеОстатки
	|) КАК ОбъединенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ОбъединенныйЗапрос.Номенклатура,
	|	ОбъединенныйЗапрос.ХарактеристикаНоменклатуры";
	
	ЗапросПоЗаказам.УстановитьПараметр("ЗаказНаряд",                        ДанныеЗаполнения);
	ЗапросПоЗаказам.УстановитьПараметр("Контрагент",                        ДанныеЗаполнения.Контрагент);
	ЗапросПоЗаказам.УстановитьПараметр("Номенклатура",                      МассивТоваров);
	ЗапросПоЗаказам.УстановитьПараметр("ЗаказОснование",                    ОснованиеЗаказНаряда);
	ЗапросПоЗаказам.УстановитьПараметр("ОснованиеСводногоРемонтногоЗаказа", ОснованиеСводногоРемонтногоЗаказа);
	
	ТаблицаПоЗаказам = ЗапросПоЗаказам.Выполнить().Выгрузить();
	
	ЕстьАвтоСписаниеХарактеристик = (МассивТоваровАвтоСписание.Количество() > 0);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ОстаткиТоваровКомпанииОстатки.КоличествоОстаток ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			ОстаткиТоваровКомпанииОстатки.КоличествоОстаток - ОстаткиТоваровКомпанииОстатки.РезервОстаток
	|	КОНЕЦ КАК Остаток
	|ИЗ
	|	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(, Номенклатура В (&Номенклатура) И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)) КАК ОстаткиТоваровКомпанииОстатки
	|ГДЕ
	|	(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток - ОстаткиТоваровКомпанииОстатки.РезервОстаток)>0" + ?(ЕстьАвтоСписаниеХарактеристик, "
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиТоваровКомпанииОстатки.Номенклатура,
	|	Значение(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ВЫБОР
	|		КОГДА ОстаткиТоваровКомпанииОстатки.КоличествоОстаток ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			ОстаткиТоваровКомпанииОстатки.КоличествоОстаток - ОстаткиТоваровКомпанииОстатки.РезервОстаток
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(, Номенклатура В (&НоменклатураАвтоСписание)) КАК ОстаткиТоваровКомпанииОстатки
	|ГДЕ
	|	(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток - ОстаткиТоваровКомпанииОстатки.РезервОстаток)>0", "");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Номенклатура",               МассивТоваровРучноеСписание);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", МассивХарактеристик);
	Запрос.УстановитьПараметр("НоменклатураАвтоСписание",   МассивТоваровАвтоСписание);
	
	ТаблицаЗапасов = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапасов.Индексы.Добавить("Номенклатура");
	
	СтруктураОтбора = Новый Структура;
	
	// Поместим в табличную часть товаров
	Для Каждого СтрокаЗаказНаряда Из ТаблицаТоваров Цикл
		
		СтруктураОтбора.Вставить("Номенклатура",               СтрокаЗаказНаряда.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаЗаказНаряда.ХарактеристикаНоменклатуры);
		
		НайденныеЗапасы = ТаблицаЗапасов.НайтиСтроки(СтруктураОтбора);
		Если НайденныеЗапасы.Количество() > 0 Тогда
			Остаток = Окр(НайденныеЗапасы[0].Остаток / СтрокаЗаказНаряда.Коэффициент, 3);
		Иначе
			Остаток = 0;
		КонецЕсли;
		
		Если Остаток < СтрокаЗаказНаряда.Количество Тогда
			
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура               = СтрокаЗаказНаряда.Номенклатура;
			НоваяСтрока.Количество                 = СтрокаЗаказНаряда.Количество - Остаток;
			НоваяСтрока.ЕдиницаИзмерения           = СтрокаЗаказНаряда.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент                = СтрокаЗаказНаряда.Коэффициент;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаЗаказНаряда.ХарактеристикаНоменклатуры;
			
			Документы.ЗаказВнутренний.ТоварыНоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока);
			
		КонецЕсли;
	КонецЦикла;
	
	// Уменьшим количество на величину уже заказанного
	Для Каждого СтрокаЗаказов Из ТаблицаПоЗаказам Цикл
		Заказано = СтрокаЗаказов.Заказано;
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаЗаказов.Номенклатура);
		ПараметрыОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаЗаказов.ХарактеристикаНоменклатуры);
		МассивСтрокТоваров = Товары.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаТоваров Из МассивСтрокТоваров Цикл
			
			Если Заказано = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ЗаказаноБаз = Окр(Заказано / СтрокаТоваров.Коэффициент, 3);
			ЗаказаноПоСтроке = Мин(ЗаказаноБаз, СтрокаТоваров.Количество);
			СтрокаТоваров.Количество = СтрокаТоваров.Количество - ЗаказаноПоСтроке;
			Заказано = Заказано - ЗаказаноПоСтроке * СтрокаТоваров.Коэффициент;
			
			Документы.ЗаказВнутренний.ТоварыКоличествоПриИзменении(ЭтотОбъект, СтрокаТоваров);
			
		КонецЦикла;
	КонецЦикла;
	
	// Удалим пустые строки из заказа
	МассивСтрокТоваров = Товары.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаТоваров Из МассивСтрокТоваров Цикл
		Товары.Удалить(СтрокаТоваров);
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаряд()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
