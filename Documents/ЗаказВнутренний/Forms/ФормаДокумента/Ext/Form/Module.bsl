
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// ПодключаемоеОборудование
	ТипыОборудования = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
	ТипыОборудования.СканерШтрихкода = Истина;
	ТипыОборудования.СчитывательМагнитныхКарт = Истина;
	МенеджерОборудования.ПриСозданииНаСервере(ЭтаФорма, ТипыОборудования);
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// УтверждениеДокументов
	УтверждениеДокументовСервер.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	// Конец УтверждениеДокументов
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.НастроитьОтображениеСИспользованиемБазовогоКоличества(Элементы.ТоварыКоличество);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	
	РазрешитьРедактированиеЦенИСумм = ПраваИНастройкиПользователя.Значение("РедактированиеЦенИСуммВНоменклатурныхТаблицах", Объект);
	РаботаСФормой.РазрешитьРедактированиеЦенИСумм(
		РаботаСФормой.ТиповыеПоляСуммовыхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм
	);
	РаботаСФормой.ОткрытьФормуТолькоДляПросмотра(ЭтотОбъект, Объект);
	
	УправлениеДиалогомДокументаСервер.УстановитьВидимостьКолонокКодАртикул(ЭтотОбъект, "РаспределениеЗаказа");
	
	// Обновим состояние заказа
	ОбновитьСостояниеЗаказа();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
		РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
		ЗащищенныеФункцииСервер.ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект.РаспределениеЗаказа);
		ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(ЭтотОбъект, "РаспределениеЗаказа");
		
		ОтображениеСрокаСнятияРезерва();
		
		НастроитьПараметрыВыбораЭлементовФормы();
		УправлениеДиалогомНаСервере();
		
	КонецЕсли;
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);
	Если Элементы.ТоварыОстатокНаСкладе.Видимость Тогда
		РаботаСФормой.ОтобразитьОстаткиТоваровНаСкладе(Объект, Элементы.ТоварыОстатокНаСкладе);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// УтверждениеДокументов
	УтверждениеДокументовКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец УтверждениеДокументов
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		Возврат;
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// Штрихкодирование
	ШтрихкодированиеКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец Штрихкодирование
	
	// УтверждениеДокументов
	УтверждениеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец УтверждениеДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	 	
	ОтображениеГрафикаПоставок();
	ОтображениеСрокаСнятияРезерва();
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	ЗащищенныеФункцииСервер.ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект.РаспределениеЗаказа);
	ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(ЭтотОбъект, "РаспределениеЗаказа");
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("ЗаказВнутренний", ПараметрыЗаписи.РежимЗаписи,
		Объект.Товары.Количество() > 50);
		
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);

КонецПроцедуры 

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Для каждого Строка Из ТекущийОбъект.Товары Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ИдентификаторСтроки) Тогда
			Строка.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
    РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	
	ОтображениеГрафикаПоставок();
	ОбновитьСостояниеЗаказа();
	
	УправлениеДиалогомНаСервере();
	НастроитьПараметрыВыбораЭлементовФормы();

	ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(ЭтотОбъект, "РаспределениеЗаказа");
    Если Элементы.ТоварыОстатокНаСкладе.Видимость Тогда
		РаботаСФормой.ОтобразитьОстаткиТоваровНаСкладе(Объект, Элементы.ТоварыОстатокНаСкладе);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверкаОбновленияСтатуса", 0.5, Истина);
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры 

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)

	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказВнутренний.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказВнутренний.ДатаПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура СкладКомпанииПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	СкладКомпанииПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура СкладКомпанииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказВнутренний.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура СрокСнятияРезерваПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ОтображениеСрокаСнятияРезерва();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокСнятияРезерваПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	СрокСнятияРезерваПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		Элементы.Товары.ТекущиеДанные.Количество = Элементы.Товары.ТекущиеДанные.Количество + Элементы.Товары.ТекущиеДанные.Распределено;
		ПерерасчетРаспределения();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Если Элементы.Товары.ТекущиеДанные.Распределено<>0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	УправлениеДиалогомДокументаКлиент.ТоварыПриОкончанииРедактирования(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока, 
		ОтменаРедактирования
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ТоварыПослеУдаленияНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомДокументаСервер.ТоварыПослеУдаления(ЭтотОбъект, Элементы.Товары, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыГрафикПоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда// Формируем описание обработчика перехвата закрытия формы
		ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияГрафикПоставки", ЭтотОбъект);
		
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Для формирования графика поставок заказ должен быть записан.
			|Записать объект?'");
		
		// Получаем подтверждение операции от пользователя
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		СформироватьГрафикПоставок();
	КонецЕсли;
	
КонецПроцедуры 

#Область ОбработчикиСобытийПолейТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказВнутренний.ТоварыНоменклатураПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
	// Вызываем общий обработчик изменения реквизитов формы
	УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры // ТоварыНоменклатураПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Номенклатура".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ТоварыНоменклатураПриИзмененииНаСервере();
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущиеДанные.Номенклатура);
	
	УправлениеДиалогомДокументаКлиент.ТоварыНоменклатураНачалоВыбора(
		ЭтотОбъект,
		Элемент,
		ДанныеВыбора,
		ВыборДобавлением,
		СтандартнаяОбработка,
		ДополнительныеПараметры);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказВнутренний.ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Характеристика номенклатуры".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказВнутренний.ТоварыЕдиницаИзмеренияПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Единица измерения".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ТоварыЕдиницаИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ТоварыКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказВнутренний.ТоварыКоличествоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Количество".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ТоварыКоличествоПриИзмененииНаСервере();
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Распределено" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ТоварыРаспределеноПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказВнутренний.ТоварыРаспределеноПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры // ТоварыРаспределеноПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Распределено".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ТоварыРаспределеноПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ТоварыРаспределеноПриИзмененииНаСервере();
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ТоварыЦенаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказВнутренний.ТоварыЦенаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Цена".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ТоварыЦенаПриИзмененииНаСервере();
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ТоварыСуммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказВнутренний.ТоварыСуммаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Сумма".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ТоварыСуммаПриИзмененииНаСервере();
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ТоварыСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказВнутренний.ТоварыСуммаВсегоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Сумма всего".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ТоварыСуммаВсегоПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ТоварыСуммаВсегоПриИзмененииНаСервере();
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Резерв" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ТоварыРезервПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказВнутренний.ТоварыРезервПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры // ТоварыРезервПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Резерв".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ТоварыРезервПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ТоварыРезервПриИзмененииНаСервере();
	
КонецПроцедуры // ТоварыРезервПриИзменении()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаспределениеЗаказа

&НаКлиенте
Процедура РаспределениеЗаказаПослеУдаления(Элемент)
	
	ПерерасчетРаспределения();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗаказаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеДиалогомДокументаКлиент.ТоварыПриОкончанииРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования);
	СтруктураДанных = РаспределениеЗаказаПриОкончанииРедактированияНаСервере(Объект);
	
	Если СтруктураДанных <> Объект Тогда
		КопироватьДанныеФормы(СтруктураДанных, Объект);
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураДанных);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспределениеЗаказаПриОкончанииРедактированияНаСервере(Знач Объект)
	
	Документы.ЗаказВнутренний.ПерерасчетРаспределения(Объект);
	
	Возврат Объект;
	
КонецФункции

#Область ОбработчикиСобытийПолейТаблицыФормыРаспределениеЗаказа

&НаКлиенте
Процедура РаспределениеЗаказаНоменклатураПриИзменении(Элемент)
	
	РаспределениеЗаказаНоменклатураПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура РаспределениеЗаказаНоменклатураПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.РаспределениеЗаказа.НайтиПоИдентификатору(Элементы.РаспределениеЗаказа.ТекущаяСтрока);
	Документы.ЗаказВнутренний.РаспределениеЗаказаНоменклатураПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, ТекущиеДанные, ПараметрыДействия, "РаспределениеЗаказа");
	
КонецПроцедуры 

&НаКлиенте
Процедура РаспределениеЗаказаНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РаспределениеЗаказа.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущиеДанные.Номенклатура);
	
	УправлениеДиалогомДокументаКлиент.ТоварыНоменклатураНачалоВыбора(
		ЭтотОбъект,
		Элемент,
		ДанныеВыбора,
		ВыборДобавлением,
		СтандартнаяОбработка,
		ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗаказаХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	РаспределениеЗаказаХарактеристикаНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РаспределениеЗаказаХарактеристикаНоменклатурыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.РаспределениеЗаказа.НайтиПоИдентификатору(Элементы.РаспределениеЗаказа.ТекущаяСтрока);
	Документы.ЗаказВнутренний.РаспределениеЗаказаХарактеристикаНоменклатурыПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура РаспределениеЗаказаЕдиницаИзмеренияПриИзменении(Элемент)

	РаспределениеЗаказаЕдиницаИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура РаспределениеЗаказаЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.РаспределениеЗаказа.НайтиПоИдентификатору(Элементы.РаспределениеЗаказа.ТекущаяСтрока);
	Документы.ЗаказВнутренний.РаспределениеЗаказаЕдиницаИзмеренияПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура РаспределениеЗаказаКоличествоПриИзменении(Элемент)
	
	РаспределениеЗаказаКоличествоПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура РаспределениеЗаказаКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.РаспределениеЗаказа.НайтиПоИдентификатору(Элементы.РаспределениеЗаказа.ТекущаяСтрока);
	Документы.ЗаказВнутренний.РаспределениеЗаказаКоличествоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура РаспределениеЗаказаЗаказПокупателяПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.РаспределениеЗаказа.НайтиПоИдентификатору(Элементы.РаспределениеЗаказа.ТекущаяСтрока);
	Документы.ЗаказВнутренний.РаспределениеЗаказаЗаказПокупателяПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура РаспределениеЗаказаЗаказПокупателяПриИзменении(Элемент)
	
	РаспределениеЗаказаЗаказПокупателяПриИзмененииНаСервере();
	
КонецПроцедуры 
#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)
	
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// Обработчик события нажатия кнопки "Подбор номенклатуры".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЗаказРезервированиеВнутренние")
		ИЛИ Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.РезервированиеВнутреннее") Тогда
		 ИмяРеквизитаКоличества =  "Резерв";
	Иначе
		 ИмяРеквизитаКоличества =  "Количество";
	КонецЕсли; 
	
	ПараметрыДействия = Новый Структура();
	ПараметрыДействия.Вставить("НеУстанавливатьОтборНаОстаток", Истина);
	
	// Вызываем общий обработчик события
	УправлениеДиалогомКлиент.ОткрытьПодборНоменклатуры(ЭтотОбъект,,,ИмяРеквизитаКоличества,, ПараметрыДействия);
	
КонецПроцедуры // ПодборНоменклатуры()

// Обработчик события нажатия кнопки "Подбор по списку заказанного".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПодборПоЗаказам(Команда)
	
	Отборы = Новый Соответствие;
	Отборы.Вставить("Заказ.Организация", Объект.Организация);
	
	УправлениеДиалогомКлиент.ОткрытьПодборПоЗаказам(ЭтотОбъект, "СКД_ПоУмолчанию", Отборы,,, Ложь,, Истина);
	
КонецПроцедуры // ПодборПоЗаказам()

// Обработчик события нажатия кнопки "Подбор по списку заказанного (с учетом внутренних заказов)".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПодборПоЗаказамВнутренний(Команда)
	
	Отборы = Новый Соответствие;
	Отборы.Вставить("Заказ.Организация", Объект.Организация);	
	Отборы.Вставить("Подразделение", Объект.ПодразделениеКомпании);
	
	СтруктураОтбораЗаказа = Новый Структура;
	СтруктураОтбораЗаказа.Вставить("Значение",Объект.Ссылка);
	СтруктураОтбораЗаказа.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.НеРавно);
	
	Отборы.Вставить("Заказ", СтруктураОтбораЗаказа);
	
	УправлениеДиалогомКлиент.ОткрытьПодборПоЗаказам(ЭтотОбъект, "СКД_ПоУмолчанию", Отборы,,,Истина,,Истина);
	
КонецПроцедуры // ПодборПоЗаказамВнутренний()

&НаСервере
Процедура ОбновитьСостояниеЗаказа()
	
	СостояниеЗаказа = РегистрыСведений.ЖурналСостояний.ПолучитьСостояниеОбъекта(Объект.Ссылка);
	
КонецПроцедуры // ОбновитьСостояниеЗаказа()

&НаКлиенте
Процедура Подключаемый_ПроверкаОбновленияСтатуса()
	
	ОбновитьСостояниеЗаказа();
	
КонецПроцедуры // Подключаемый_ПроверкаОбновленияСтатуса()

&НаКлиенте
Процедура ОбновитьСтатусЗаказа(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Документ не записан. Состояние заказа не установлено.'"));
	КонецЕсли;
	
	ОбновитьСостояниеЗаказа();
	
КонецПроцедуры // ОбновитьСтатусЗаказа()

// Обработчик события нажатия кнопки "Подбор замен".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПодборЗамен(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СвернутьПо", "Номенклатура,ХарактеристикаНоменклатуры");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"Подключаемый_ПодборЗаменЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры
	);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СкладКомпанииОстатки", Неопределено);
	ПодборТоваровКлиент.ОткрытьПодборЗаменНоменклатуры(ЭтотОбъект, Объект, ПараметрыОткрытия, ОписаниеОповещения);
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПерерасчетРаспределения()
	
	Документы.ЗаказВнутренний.ПерерасчетРаспределения(Объект);
	ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(ЭтотОбъект);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура СформироватьГрафикПоставок()
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтроки) Тогда
		ТекущиеДанные.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки);
	ПараметрыОткрытия.Вставить("ЗаказПокупателя", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	ПараметрыОткрытия.Вставить("ХарактеристикаНоменклатуры", ТекущиеДанные.ХарактеристикаНоменклатуры);
	ПараметрыОткрытия.Вставить("Количество", ТекущиеДанные.Количество);
	ПараметрыОткрытия.Вставить("ЕдиницаИзмерения", ТекущиеДанные.ЕдиницаИзмерения);
	ОткрытьФорму("Документ.ЗаказВнутренний.Форма.ФормаГрафикПоставок",
				ПараметрыОткрытия,
				Элементы.ТоварыГрафикПоставки,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияСформироватьГрафикПоставок", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры //СформироватьГрафикПоставок()

&НаСервере
Процедура ОтображениеГрафикаПоставок()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГрафикПоставок.ИдентификаторСтроки,
	|	ГрафикПоставок.Количество,
	|	ГрафикПоставок.ДатаПоставки
	|ИЗ
	|	РегистрСведений.ГрафикПоставок КАК ГрафикПоставок
	|ГДЕ
	|	ГрафикПоставок.ЗаказПокупателя = &Ссылка
	|ИТОГИ
	|ПО
	|	ИдентификаторСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	ВыборкаСтроки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСтроки.Следующий() Цикл
		ПредставлениеПоставки = "";
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ВыборкаСтроки.ИдентификаторСтроки));
		Если НайденныеСтроки .Количество()>0 Тогда
			ТоварнаяСтрока = НайденныеСтроки[0];
			Выборка = ВыборкаСтроки.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				ПредставлениеПоставки = ПредставлениеПоставки + ?(ПредставлениеПоставки = "", "", "; ") 
											+ Строка(Выборка.Количество/ТоварнаяСтрока.Коэффициент) + " " + ТоварнаяСтрока.ЕдиницаИзмерения + "," 
											+ Символы.НПП + НСтр("ru = 'дата поставки:'") + Символы.НПП + Формат(Выборка.ДатаПоставки, "ДФ=dd.MM.yy");
			КонецЦикла;
			ТоварнаяСтрока.ГрафикПоставки = ПредставлениеПоставки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияГрафикПоставки(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		Записать();
		СформироватьГрафикПоставок();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаОповещенияСформироватьГрафикПоставок(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.ГрафикПоставки = РезультатОповещения;
	
КонецПроцедуры

&НаСервере
Процедура ОтображениеСрокаСнятияРезерва()
	
	Если ЗначениеЗаполнено(Объект.СрокСнятияРезерва) Тогда
		
		ПросроченоДней = 0;
		Если Объект.Ссылка.Пустая() ИЛИ НЕ Объект.Ссылка.Проведен Тогда
			ПросроченоДней = Цел((ТекущаяДатаСеанса() - Объект.СрокСнятияРезерва) / 86400);
		Иначе
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	МАКСИМУМ(ЗаказыПокупателей.Период) КАК Период,
			|	СУММА(ВЫБОР
			|		КОГДА ЗаказыПокупателей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
			|			ЗаказыПокупателей.Заказано
			|		ИНАЧЕ
			|			-ЗаказыПокупателей.Заказано
			|	КОНЕЦ) КАК Заказано
			|ИЗ
			|	РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
			|ГДЕ
			|	ЗаказыПокупателей.Заказ = &Заказ");
			Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Если Выборка.Период = NULL Тогда
					ПросроченоДней = 0;
				ИначеЕсли Выборка.Заказано > 0 Тогда
					ПросроченоДней = Цел((ТекущаяДатаСеанса() - Объект.СрокСнятияРезерва) / 86400);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПросроченоДней > 0 Тогда
			Элементы.СрокСнятияРезерва.РасширеннаяПодсказка.Заголовок  =
					НСтр("ru = 'срок снятия резерва истек'") + Символы.НПП + СокрЛП(ПросроченоДней) + " "
					+ УправлениеПечатьюПлатформа.ПолучитьПредставлениеДня(ПросроченоДней) + " назад";
			Элементы.СрокСнятияРезерва.РасширеннаяПодсказка.ЦветТекста = Новый Цвет(128, 0, 0);
		Иначе
			Элементы.СрокСнятияРезерва.РасширеннаяПодсказка.Заголовок  = "";
			Элементы.СрокСнятияРезерва.РасширеннаяПодсказка.ЦветТекста = Новый Цвет(0, 128, 0);
		КонецЕсли;
		
	Иначе
		
		Элементы.СрокСнятияРезерва.РасширеннаяПодсказка.Заголовок  = НСтр("ru = 'срок не определен'");
		Элементы.СрокСнятияРезерва.РасширеннаяПодсказка.ЦветТекста = WebЦвета.Синий;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформление(ЭтотОбъект);
	
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект,"РаспределениеЗаказаХарактеристикаНоменклатуры","Объект.РаспределениеЗаказа.ВладелецХарактеристики");

	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеРучногоСписанияХарактеристик(ЭтотОбъект);
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеРучногоСписанияХарактеристик(ЭтотОбъект,"РаспределениеЗаказаХарактеристикаНоменклатуры","РаспределениеЗаказа");
	
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеСуммыВсего(ЭтотОбъект);
	
КонецПроцедуры 

// Обработчик резултата окончания подбора замен.
&НаКлиенте
Процедура Подключаемый_ПодборЗаменЗавершение(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаПодбораЗамен(РезультатОповещения, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаПодбораЗамен(Результат, ДополнительныеПараметры = Неопределено)
	
	ЗаменыСервер.ВыполнитьЗаменуТоваровВДокументе(Объект, Результат, Ложь, ДополнительныеПараметры);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЗаполнениеОбъектов
&НаКлиенте
Процедура ПослеОбработкиЗаполнения(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ПослеОбработкиЗаполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиЗаполненияНаСервере()
	
	ЗаполнениеОбъектовАльфаАвто.ПослеОбработкиЗаполнения(ЭтотОбъект, Объект);
	ЗаполнениеОбъектовАльфаАвто.УстановитьВидимостьКолонокТЧ(ЭтотОбъект, Объект, "РаспределениеЗаказа");
	
КонецПроцедуры
// Конец ЗаполнениеОбъектов

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСуммаДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.ПоказатьРасширенныеИтогиОперации(ЭтотОбъект, Элемент);
	
КонецПроцедуры
// Конец Ядро

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// Вызываем общий обработчик события настройки параметров выбора
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
	ВидыНоменклатуры = Справочники.ХозОперации.ПолучитьВидыНоменклатуры(Объект.ХозОперация);
	Если Не Элементы.Найти("РаспределениеЗаказаНоменклатура")=Неопределено Тогда
		УправлениеДиалогомСервер.ОбновитьПараметрВыбора(Элементы.РаспределениеЗаказаНоменклатура.ПараметрыВыбора, "Отбор.ВидНоменклатуры", ВидыНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	// Вызываем общий обработчик действия
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	Элементы.РаспределениеЗаказаХарактеристикаНоменклатуры.АвтоОтметкаНезаполненного = Истина;
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ЗаказРезервированиеВнутренние ИЛИ Объект.ХозОперация=Справочники.ХозОперации.РезервированиеВнутреннее Тогда
		Элементы.ТоварыРезерв.Видимость          = Истина;
		Элементы.ТоварыОстатокНаСкладе.Видимость = Истина;
		Элементы.СрокСнятияРезерва.Видимость     = Истина;
	Иначе
		Элементы.ТоварыРезерв.Видимость          = Ложь;
		Элементы.ТоварыОстатокНаСкладе.Видимость = Ложь;
		Элементы.СрокСнятияРезерва.Видимость     = Ложь;
	КонецЕсли;
	
	Если Объект.ХозОперация = Справочники.ХозОперации.РезервированиеВнутреннее Тогда
		Элементы.ТоварыКоличество.Видимость = Ложь;
	Иначе
		Элементы.ТоварыКоличество.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если Лев(ДополнительныеПараметры,36) = "КомандаЗаполненияРаспределениеЗаказа" Тогда
		
		ЗащищенныеФункцииСервер.ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Объект.Товары);
		ЗащищенныеФункцииСервер.УстановитьВидимостьКолонкиХарактеристикаНоменклатуры(ЭтотОбъект);
		
	ИначеЕсли ДополнительныеПараметры = "ПодборПоСпискуЗаказанного" И ЭтоАдресВременногоХранилища(РезультатОповещения) Тогда
		ПодобранныеТовары = ПолучитьИзВременногоХранилища(РезультатОповещения);
		
		Для Каждого Строка Из ПодобранныеТовары Цикл
			ПараметрыДействия = Новый Структура;
			
			УсловиеПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,ЗаказПокупателя");
			ЗаполнитьЗначенияСвойств(УсловиеПоиска, Строка);
			ПодходящиеСтроки = Объект.РаспределениеЗаказа.НайтиСтроки(УсловиеПоиска);
			Если ПодходящиеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Объект.РаспределениеЗаказа.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Количество,Коэффициент");
				НоваяСтрока.ЗаказПокупателя = Строка.Заказ;
				
				Документы.ЗаказВнутренний.РаспределениеЗаказаНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
				
				// Вызываем общий обработчик изменения реквизитов формы
				УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока, ПараметрыДействия, "РаспределениеЗаказа");
			Иначе
				НоваяСтрока = ПодходящиеСтроки[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + Строка.Количество;
				
				Документы.ЗаказВнутренний.РаспределениеЗаказаКоличествоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
			КонецЕсли;
			
			КоличествоРаспределено = НоваяСтрока.Количество;
			
			УсловиеПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения");
			ЗаполнитьЗначенияСвойств(УсловиеПоиска, Строка);
			ПодходящиеСтроки = Объект.Товары.НайтиСтроки(УсловиеПоиска);
			Если ПодходящиеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Объект.Товары.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Количество,Коэффициент");
				
				Документы.ЗаказВнутренний.ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
				
				// Вызываем общий обработчик изменения реквизитов формы
				УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока, ПараметрыДействия);
				
				НоваяСтрока.Количество   = 0;
				НоваяСтрока.Распределено = 0;
				
			Иначе
				НоваяСтрока = ПодходящиеСтроки[0];
			КонецЕсли;
			
			Коэффициент  = ?(НоваяСтрока.Коэффициент = 0, 1, НоваяСтрока.Коэффициент);
			Распределено = ((КоличествоРаспределено * Строка.Коэффициент) / Коэффициент);
			
			НоваяСтрока.Распределено = НоваяСтрока.Распределено + Распределено;
			НоваяСтрока.Количество   = НоваяСтрока.Количество   + Распределено;
			
			Документы.ЗаказВнутренний.ТоварыКоличествоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
			
		КонецЦикла;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если НЕ УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры 

#КонецОбласти

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	                                                                                                                
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура Подключаемый_ШтрихкодированиеОбработкаОповещения(РезультатОповещения,
	ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если РезультатОповещения.Свойство("Действие") Тогда
		ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры)

	ШтрихкодированиеВызовСервера.ОбработкаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры, , Объект);

КонецПроцедуры

#КонецОбласти

#Область УтверждениеДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуУтверждения(Команда)
	
	УтверждениеДокументовКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект.Ссылка);
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбработкуКомандыУтвержденияНаСервере(ПараметрыОбработки,
		ДополнительныеПараметры) Экспорт
	
	ОбработкаКомандыУтвержденияНаСервере(ПараметрыОбработки, ДополнительныеПараметры);
	Оповестить("ПослеУтвержденияДокументов", Объект.Ссылка, ИмяФормы);
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаКомандыУтвержденияНаСервере(ПараметрыОбработки, ДополнительныеПараметры)
	
	УтверждениеДокументовВызовСервера.ОбработкаКомандыФормы(ЭтотОбъект, ПараметрыОбработки.ИмяКоманды, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыУтвержденияДокументов()
	
	ОбновитьКомандыУтвержденияДокументовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыУтвержденияДокументовНаСервере()
	
	УтверждениеДокументовКлиентСервер.УстановитьДоступностьКнопокУтверждения(ЭтотОбъект, Объект, ТолькоПросмотр);
	УтверждениеДокументовВызовСервера.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, Объект, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти