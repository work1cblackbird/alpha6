// Модуль менеджера документа "Приходный складской ордер"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВводОстатковТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПеремещениеТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПереразмещениеТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПоступлениеТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйСкладскойОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ПриходныйСкладскойОрдер);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("СкладКомпании");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	Если Не ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		
		ОбязательныеРеквизиты.Добавить("Товары");
		
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПриходныйСкладскойОрдер")
		И (НЕ Объект.ДополнительныеСвойства.Свойство("РежимЗаписи")
			ИЛИ  (Объект.ДополнительныеСвойства.Свойство("РежимЗаписи") И
			Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение)) Тогда
		
		Если Объект.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый Тогда
			
			ОбязательныеРеквизиты.Добавить("Товары.Ячейка");
			
		КонецЕсли;
		
	КонецЕсли;

	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется вложенный массив.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	Если Объект.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый Тогда
		УникальныеТовары.Добавить("Ячейка");
	КонецЕсли;
	
	УникальныеТабличныеЧасти=Новый Структура();
	УникальныеТабличныеЧасти.Вставить("Товары",УникальныеТовары);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("СкладКомпании", Ложь);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	ПараметрыДействия.Вставить("ПересчетСуммы", ЛОЖЬ);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество базовое" в таблице "Товары".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоБазовоеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ячейка" в таблице "Товары".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЯчейкаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// !!!_IvEd зарезервировано
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Товары");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ПриходныйСкладскойОрдер");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Размещение по ранее используемым ячейкам'");
	Команда.Идентификатор	= "ТоварыРазместитьПоРанееИспользуемымЯчейкам";
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением = Ложь;
	//
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Размещение по ближайшим свободным ячейкам'");
	Команда.Идентификатор	= "ТоварыРазместитьПоБлижайшимЯчейкам";
	Команда.Порядок			= 51;
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением = Ложь;
		
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	
	ПараметрыКоманд.Вставить("ТоварыРазместитьПоРанееИспользуемымЯчейкам.Видимость",   Истина);
	ПараметрыКоманд.Вставить("ТоварыРазместитьПоРанееИспользуемымЯчейкам.Доступность", (Объект.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый));
	ПараметрыКоманд.Вставить("ТоварыРазместитьПоБлижайшимЯчейкам.Видимость",           Истина);
	ПараметрыКоманд.Вставить("ТоварыРазместитьПоБлижайшимЯчейкам.Доступность",         (Объект.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый));
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения ячеек в табличной части документа по ранее используемым ячейкам склада.
//
Функция ТоварыРазместитьПоРанееИспользуемымЯчейкам(Ссылка, ПараметрыКоманды, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	СписокТоваров = Новый СписокЗначений;
	
	// Заполним список товаров
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		СписокТоваров.Добавить(ТекущаяСтрока.Номенклатура);
	КонецЦикла;
	
	// Получим список движений данных товаров по ячейкам
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОстаткиТоваровОрдерныйСклад.Номенклатура КАК Номенклатура,
	               |	МАКСИМУМ(ОстаткиТоваровОрдерныйСклад.Период) КАК Период
	               |ПОМЕСТИТЬ ВремТаб
	               |ИЗ
	               |	РегистрНакопления.ОстаткиТоваровОрдерныйСклад КАК ОстаткиТоваровОрдерныйСклад
	               |ГДЕ
	               |	ОстаткиТоваровОрдерныйСклад.МоментВремени < &КонецПериода
	               |	И ОстаткиТоваровОрдерныйСклад.ВидДвижения = &ВидДвиженияПриход
	               |	И ОстаткиТоваровОрдерныйСклад.Ячейка.Владелец = &СкладКомпании
	               |	И ОстаткиТоваровОрдерныйСклад.Номенклатура В(&СписокТоваров)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОстаткиТоваровОрдерныйСклад.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОстаткиТоваровОрдерныйСклад.Номенклатура КАК Номенклатура,
	               |	ОстаткиТоваровОрдерныйСклад.Ячейка КАК Ячейка,
	               |	ОстаткиТоваровОрдерныйСклад.Период КАК Период
	               |ИЗ
	               |	РегистрНакопления.ОстаткиТоваровОрдерныйСклад КАК ОстаткиТоваровОрдерныйСклад
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремТаб КАК ВремТаб
	               |		ПО ОстаткиТоваровОрдерныйСклад.Номенклатура = ВремТаб.Номенклатура
	               |			И ОстаткиТоваровОрдерныйСклад.Период = ВремТаб.Период
	               |ГДЕ
	               |	ОстаткиТоваровОрдерныйСклад.МоментВремени < &КонецПериода
	               |	И ОстаткиТоваровОрдерныйСклад.ВидДвижения = &ВидДвиженияПриход
	               |	И ОстаткиТоваровОрдерныйСклад.Ячейка.Владелец = &СкладКомпании
	               |	И НЕ ОстаткиТоваровОрдерныйСклад.Ячейка.ПометкаУдаления
	               |	И НЕ ОстаткиТоваровОрдерныйСклад.Ячейка.Недоступна
	               |	И ОстаткиТоваровОрдерныйСклад.Номенклатура В(&СписокТоваров)";
	Запрос.УстановитьПараметр("СкладКомпании", Объект.СкладКомпании);
	КонецПериода = ?(Ссылка.Пустая(), Новый МоментВремени(КонецДня(Объект.Дата)), Ссылка.МоментВремени());
	Запрос.УстановитьПараметр("КонецПериода",      КонецПериода);
	Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("СписокТоваров",     СписокТоваров);
	
	ТаблицаРазмещения = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		СтрокаТабличнойЧасти.Ячейка = "";
	КонецЦикла; 
	
	Если ТаблицаРазмещения.Количество() > 0 Тогда
		// пропишем в табличную часть Товары ячейки найденного маршрута
		Для Каждого СтрокаТЦ Из Объект.Товары Цикл
			СтрокаТЗ = ТаблицаРазмещения.Найти(СтрокаТЦ.Номенклатура, "Номенклатура");
			Если СтрокаТЗ <> Неопределено Тогда
				СтрокаТЦ.Ячейка = СтрокаТЗ.Ячейка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // ТоварыРазместитьПоРанееИспользуемымЯчейкам()

// Обработчик заполнения ячеек в табличной части документа по ближайшим свободным ячейкам склада.
//
Функция ТоварыРазместитьПоБлижайшимЯчейкам(Ссылка, ПараметрыКоманды, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	КоличествоТоваров = Объект.Товары.Количество();
	
	ТочкаВхода  = Новый Структура("X,Y,Z", Объект.СкладКомпании.ВходX,  Объект.СкладКомпании.ВходY,  Объект.СкладКомпании.ВходУровень);
	ТочкаВыхода = Новый Структура("X,Y,Z", Объект.СкладКомпании.ВыходX, Объект.СкладКомпании.ВыходY, Объект.СкладКомпании.ВыходУровень);
	
	// Получим список пустых ячеек
	Запрос = Новый Запрос;
	
	ТекстЗапроса =   "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					 |	ЯчейкиХранения.Ссылка,
					 |	ЯчейкиХранения.КоординатаX КАК КоординатаX,
					 |	ЯчейкиХранения.КоординатаY КАК КоординатаY,
					 |	ЯчейкиХранения.Уровень КАК КоординатаZ
					 |ИЗ
					 |	Справочник.ЯчейкиХранения КАК ЯчейкиХранения
					 |ГДЕ
					 |	ЯчейкиХранения.Владелец = &СкладКомпании
					 |	И НЕ ЯчейкиХранения.ЭтоГруппа
					 |	И НЕ ЯчейкиХранения.ПометкаУдаления
					 |	И НЕ ЯчейкиХранения.Недоступна
					 |	И НЕ ЯчейкиХранения.Ссылка В
					 |				(ВЫБРАТЬ
					 |					ОстаткиТоваровОрдерныйСкладОстатки.Ячейка
					 |				ИЗ
					 |					РегистрНакопления.ОстаткиТоваровОрдерныйСклад.Остатки(&МоментВремени, Ячейка.Владелец = &СкладКомпании) КАК ОстаткиТоваровОрдерныйСкладОстатки)
					 |УПОРЯДОЧИТЬ ПО
					 |	КоординатаX,
					 |	КоординатаY,
					 |	КоординатаZ";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СкладКомпании", Объект.СкладКомпании);
	МоментВремени= ?(Ссылка.Пустая(), Новый МоментВремени(КонецДня(Объект.Дата)), Ссылка.МоментВремени());
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);

	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаЯчеек = РезультатЗапроса.Выгрузить();
	
	СписокЯчеекМаршрута = Новый СписокЗначений;
	Если КоличествоТоваров > ТаблицаЯчеек.Количество() Тогда
		// Разместим сколько сможем, остальное пользователь разместит вручную
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'На складе ""%1"" нет нужного количества свободных ячеек. Часть товаров необходимо разместить вручную.'"), Объект.СкладКомпании)
		);
		// Уменьшим число товаров
		КоличествоТоваров = ТаблицаЯчеек.Количество();
	КонецЕсли;
	
	// Основная идея (жадный алгоритм): на каждом шаге по списку товаров находим отрезок 
	// из последней найденной ячейки до выхода и делим его на количество частей,
	//  равное количество оставшихся нераспределенных товаров. Берем точки первого, ближайшего отрезка,
	// затем считаем для всех пустых ячеек оценочное расстояние как сумму расстояний до точек отрезка.
	// Берем ячейку с минимальным расстоянием.
	КвалификаторЧисла = Новый КвалификаторыЧисла(10,3);
	ТаблицаЯчеек.Колонки.Добавить("ОценочноеРасстояние",       Новый ОписаниеТипов("Число",КвалификаторЧисла));
	ТаблицаЯчеек.Колонки.Добавить("РасстояниеДоНачалаОтрезка", Новый ОписаниеТипов("Число",КвалификаторЧисла));
	ТаблицаЯчеек.Колонки.Добавить("РасстояниеДоКонцаОтрезка",  Новый ОписаниеТипов("Число",КвалификаторЧисла));
	ЧислоОтрезков = КоличествоТоваров;
	НачалоОтрезка = ТочкаВхода;
	КонецОтрезка  = Новый Структура("X,Y,Z", Объект.СкладКомпании.ВыходX, Объект.СкладКомпании.ВыходY, Объект.СкладКомпании.ВыходУровень);
	// пробегаем по ТЧ Товары
	Для Ин=1  По КоличествоТоваров Цикл
		КонецОтрезка.X = (ТочкаВыхода.X + (ЧислоОтрезков-1)*НачалоОтрезка.X) / ЧислоОтрезков;
		КонецОтрезка.Y = (ТочкаВыхода.Y + (ЧислоОтрезков-1)*НачалоОтрезка.Y) / ЧислоОтрезков;
		КонецОтрезка.Z = (ТочкаВыхода.Z + (ЧислоОтрезков-1)*НачалоОтрезка.Z) / ЧислоОтрезков;
		// ищем ячейку с минимальным оценочным расстоянием
		Для Каждого СтрокаТЗ Из ТаблицаЯчеек Цикл
			// Считаем расстояние от каждой ячейки до начала отрезка по формуле расстояния между двумя точками.
			СтрокаТЗ.РасстояниеДоНачалаОтрезка = Sqrt((НачалоОтрезка.X - СтрокаТЗ.КоординатаX)*(НачалоОтрезка.X - СтрокаТЗ.КоординатаX) + (НачалоОтрезка.Y-СтрокаТЗ.КоординатаY)*(НачалоОтрезка.Y-СтрокаТЗ.КоординатаY) + (НачалоОтрезка.Z-СтрокаТЗ.КоординатаZ)*(НачалоОтрезка.Z-СтрокаТЗ.КоординатаZ));
			// Считаем расстояние до конца отрезка по формуле расстояния между двумя точками.
			СтрокаТЗ.РасстояниеДоКонцаОтрезка  = Sqrt((КонецОтрезка.X - СтрокаТЗ.КоординатаX)*(КонецОтрезка.X - СтрокаТЗ.КоординатаX) + (КонецОтрезка.Y-СтрокаТЗ.КоординатаY)*(КонецОтрезка.Y-СтрокаТЗ.КоординатаY) + (КонецОтрезка.Z-СтрокаТЗ.КоординатаZ)*(КонецОтрезка.Z-СтрокаТЗ.КоординатаZ));
			// считаем оценочное расстояние
			СтрокаТЗ.ОценочноеРасстояние = СтрокаТЗ.РасстояниеДоНачалаОтрезка + СтрокаТЗ.РасстояниеДоКонцаОтрезка;
		КонецЦикла;
		ТаблицаЯчеек.Сортировать("ОценочноеРасстояние Возр");
		ПерваяСтрока = ТаблицаЯчеек.Получить(0);
		ОптимальнаяЯчейкаМаршрута = ТаблицаЯчеек.Получить(0).Ссылка;
		СписокЯчеекМаршрута.Добавить(ОптимальнаяЯчейкаМаршрута,Ин);
		ТаблицаЯчеек.Удалить(0);
		НачалоОтрезка.X = ОптимальнаяЯчейкаМаршрута.КоординатаX;
		НачалоОтрезка.Y = ОптимальнаяЯчейкаМаршрута.КоординатаY;
		НачалоОтрезка.Z = ОптимальнаяЯчейкаМаршрута.Уровень;
		ЧислоОтрезков = ЧислоОтрезков - 1; 
	КонецЦикла;
	
	Если СписокЯчеекМаршрута.Количество() Тогда
		// пропишем в табличную часть Товары ячейки найденного маршрута
		Для Каждого ТекущаяЯчейка Из СписокЯчеекМаршрута Цикл
			СтрокаТЧ = Объект.Товары.Получить(СписокЯчеекМаршрута.Индекс(ТекущаяЯчейка));
			СтрокаТЧ.Ячейка = ТекущаяЯчейка.Значение;
		КонецЦикла; 
	КонецЕсли;
	
КонецФункции // ТоварыРазместитьПоБлижайшимЯчейкам()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ПриходныйСкладскойОрдер",
		"ПФ_MXL_ПриходныйСкладскойОрдер",
		НСтр("ru = 'Приходный складской ордер'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьМ11",
		"ПФ_MXL_М4",
		НСтр("ru = 'М-4 (Приходный ордер)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьМХ",
		"ПФ_MXL_МХ1",
		НСтр("ru = 'МХ-1 (Акт о приеме-передачи ТМЦ)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Ценники",
		НСтр("ru = 'Печать ценников'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати",
		,,,,
		Ложь);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Этикетки",
		НСтр("ru = 'Печать этикеток'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати",
		,,,,
		Ложь);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПриходныйСкладскойОрдер") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ПриходныйСкладскойОрдер",
															НСтр("ru = 'Приходный складской ордер'"),
													ПечатьПриходныйСкладскойОрдер(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

Функция ПечатьПриходныйСкладскойОрдер(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйСкладскойОрдер_ПриходныйСкладскойОрдер";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПриходныйСкладскойОрдер.ПФ_MXL_ПриходныйСкладскойОрдер");
		
		// Для начала настроим макет.
		// Произведем преобразование макета в зависимости от типа ячеистого склада.
		ЭтоЯчеистыйСклад = (Документ.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый);
		Если НЕ ЭтоЯчеистыйСклад Тогда
			ОбластьТовар				= Макет.Область("Товар");
			ОбластьЯчейка				= Макет.Область("Ячейка");
			ОбластьТовар.ШиринаКолонки	= ОбластьТовар.ШиринаКолонки + ОбластьЯчейка.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьЯчейка, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Документ.ВладелецТовара) Тогда
			ОбластьВладелецТовара = Макет.Область("Владелец");
			Макет.УдалитьОбласть(ОбластьВладелецТовара, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Документ.ДокументОснование) Тогда
			ОбластьДокументОснование = Макет.Область("ДокументОснование");
			Макет.УдалитьОбласть(ОбластьДокументОснование, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		КонецЕсли;
		
		ОбластьШапкаТаблицы    = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// дата документа
		ДатаДокумента = Документ.Дата;
		
		// вывод заголовка документа
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ,
			НСтр("ru = 'Приходный складской ордер'"));
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ПредставлениеСклада = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.СкладКомпании);
		
		Если ЗначениеЗаполнено(Документ.ВладелецТовара) Тогда
			Если ТипЗнч(Документ.ВладелецТовара) = Тип("СправочникСсылка.Контрагенты") Тогда
				ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
				ДополнительныеПараметры.НаДату = ДатаДокумента;
				ОбластьЗаголовок.Параметры.ПредставлениеВладельца = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
					Документ.ВладелецТовара, , ДополнительныеПараметры);
			Иначе
				ОбластьЗаголовок.Параметры.ПредставлениеВладельца = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
					Документ.ВладелецТовара);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Документ.ДокументОснование) Тогда
			
			ОбластьЗаголовок.Параметры.Заполнить(Документ.ДокументОснование);
			ОбластьЗаголовок.Параметры.ПредставлениеДокументаОснования =
				УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ.ДокументОснование);
			
			Если ЕстьРеквизит(Документ.ДокументОснование,"Контрагент") Тогда
				ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
				ДополнительныеПараметры.НаДату = ДатаДокумента;
				ОбластьЗаголовок.Параметры.ПредставлениеКонтрагента = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
					Документ.ДокументОснование.Контрагент, , ДополнительныеПараметры);
			КонецЕсли;
			
			Если ЕстьРеквизит(Документ.ДокументОснование,"ДоговорВзаиморасчетов") Тогда
				ОбластьЗаголовок.Параметры.ПредставлениеДоговора = Документ.ДокументОснование.ДоговорВзаиморасчетов;
			КонецЕсли;
			
			ОбластьЗаголовок.Параметры.ДокументОснование = Документ.ДокументОснование;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// готовим шапку
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура();
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// готовим области строки
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		ВыборкаТабличнойЧасти = Документ.Товары;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ);
			СтруктураСтроки.Вставить("Ячейка");
			// Если ЯчейкаХранения не определена для данной номенклатуры, то печатаем пробел.
			ЯчейкаДляПечати = СокрЛП(СтрокаТЧ.Ячейка.Код);
			СтруктураСтроки.Ячейка 	= ?(НЕ ЗначениеЗаполнено(ЯчейкаДляПечати), " ", ЯчейкаДляПечати);
			СтруктураСтроки.Вставить("КоличествоБазовое", Формат(СтрокаТЧ.КоличествоБазовое, ФорматВыводаКоличества));
			СтруктураСтроки.Вставить("ЕдиницаИзмеренияБазовая", СтрокаТЧ.Номенклатура.БазоваяЕдиницаИзмерения);
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, СтруктураСтроки);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				НомерСтраницыПред		  = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;

		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил", "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьПриходныйСкладскойОрдер()

Функция ПолучитьДанныеДляПечатиМ4(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриходныйСкладскойОрдерТовары.Ссылка,
		|	ПриходныйСкладскойОрдерТовары.НомерСтроки,
		|	ПриходныйСкладскойОрдерТовары.Номенклатура,
		|	ПриходныйСкладскойОрдерТовары.Количество,
		|	ПриходныйСкладскойОрдерТовары.ЕдиницаИзмерения,
		|	ПриходныйСкладскойОрдерТовары.Коэффициент,
		|	ПриходныйСкладскойОрдерТовары.КоличествоБазовое,
		|	ПриходныйСкладскойОрдерТовары.Ячейка,
		|	ПриходныйСкладскойОрдерТовары.ХарактеристикаНоменклатуры,
		|	0 КАК Цена,
		|	0 КАК Сумма,
		|	0 КАК СуммаНДС,
		|	0 КАК СуммаВсего
		|ИЗ
		|	Документ.ПриходныйСкладскойОрдер.Товары КАК ПриходныйСкладскойОрдерТовары
		|ГДЕ
		|	ПриходныйСкладскойОрдерТовары.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	ПодготовленнаяТЧ = Запрос.Выполнить().Выгрузить();

	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  , Объект.ПодразделениеКомпании);	
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить());
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("ВхДокНомер"             , "");
	ДанныеОбъекта.Вставить("СкладКомпании"       	, Объект.СкладКомпании); 
	ДанныеОбъекта.Вставить("ЦенаВключаетНДС"  		, Истина);
	ДанныеОбъекта.Вставить("Товары"  				, ПодготовленнаяТЧ);
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ДанныеОбъекта.Вставить("ОснованиеТовары"  		, Объект.ДокументОснование.Товары);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ЕстьРеквизит(Объект.ДокументОснование, "Контрагент") Тогда
		ДанныеОбъекта.Вставить("Контрагент"        		, Объект.ДокументОснование.Контрагент);
	Иначе
		ДанныеОбъекта.Вставить("Контрагент"        		, Объект.ВладелецТовара);
	КонецЕсли;
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СтраховаяКомпания);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства);
	ДанныеОбъекта.Вставить("СтраховаяКомпания"      , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("СтраховаяКомпания", ЗначенияСвойствОбъекта));
	ДанныеОбъекта.Вставить("Отпустил"	,УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Отпустил","ОтпустилПредставление"));
	ДанныеОбъекта.Вставить("Получил"	,УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Получил","ПолучилПредставление"));

	Возврат ДанныеОбъекта;

КонецФункции // ПолучитьДанныеДляПечатиМ4()

// Формирует печатную форму "МХ-1" Акт о приеме-передачи ТМЦ
// 
// Параметры:
//  ТабДокумент - табличный документ.
//
Функция ПолучитьДанныеДляПечатиМХ1(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	ВалютаРегУчета = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегУчета,Объект.Дата);
	КурсРегл = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить());
	ДанныеОбъекта.Вставить("КурсДокумента"        	, КурсРегл); 
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  , Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("ВладелецТовара"      	, Объект.ВладелецТовара);
	ДанныеОбъекта.Вставить("СкладКомпании"      	, Объект.СкладКомпании);
	
	// ПодготовкаТЧ
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриходныйСкладскойОрдерТовары.Номенклатура,
		|	ПриходныйСкладскойОрдерТовары.Количество КАК Количество,
		|	ПриходныйСкладскойОрдерТовары.ЕдиницаИзмерения,
		|	ПриходныйСкладскойОрдерТовары.Коэффициент,
		|	ПриходныйСкладскойОрдерТовары.ХарактеристикаНоменклатуры,
		|	0 КАК Цена,
		|	0 КАК Сумма
		|ИЗ
		|	Документ.ПриходныйСкладскойОрдер.Товары КАК ПриходныйСкладскойОрдерТовары
		|ГДЕ
		|	ПриходныйСкладскойОрдерТовары.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка); 
		ВыборкаСтрок = Запрос.Выполнить().Выгрузить();
		
		ДанныеОбъекта.Вставить("Товары"      		, ВыборкаСтрок);
		
		ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Ложь, Истина);
		ДанныеОбъекта.Вставить("Отпустил", УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Отпустил","ОтпустилПредставление"));
		ДанныеОбъекта.Вставить("Получил" , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект,"Получил","ПолучилПредставление"));
		
		Возврат ДанныеОбъекта;
		
КонецФункции // ПечатьМХ1

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//	Адрес   - адрес структуры данных во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриходныйСкладскойОрдерТовары.Номенклатура   КАК Номенклатура,
	|	ПриходныйСкладскойОрдерТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	| 	ПриходныйСкладскойОрдерТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|
	|	МИНИМУМ(ПриходныйСкладскойОрдерТовары.НомерСтроки) КАК Порядок,
	|	СУММА(
	|		ВЫБОР КОГДА ПриходныйСкладскойОрдерТовары.Ссылка.СкладКомпании.Розничный = ИСТИНА ТОГДА
	|			ПриходныйСкладскойОрдерТовары.Количество * (ЕСТЬNULL(ПриходныйСкладскойОрдерТовары.ЕдиницаИзмерения.Коэффициент, 1) / ЕСТЬNULL(Цены.ЕдиницаИзмерения.Коэффициент, 1))
	|		ИНАЧЕ
	|			ПриходныйСкладскойОрдерТовары.Количество
	|		КОНЕЦ) КАК Количество
	|ИЗ
	|	Документ.ПриходныйСкладскойОрдер.Товары КАК ПриходныйСкладскойОрдерТовары
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Цены.СрезПоследних КАК Цены
	|		ПО Цены.Номенклатура   = ПриходныйСкладскойОрдерТовары.Номенклатура
	|		 И Цены.ХарактеристикаНоменклатуры = ПриходныйСкладскойОрдерТовары.ХарактеристикаНоменклатуры
	|		 И Цены.ТипЦен        = ПриходныйСкладскойОрдерТовары.Ссылка.СкладКомпании.ТипЦенРозничнойТорговли
	|	
	|ГДЕ
	|	ПриходныйСкладскойОрдерТовары.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйСкладскойОрдерТовары.Номенклатура,
	|	ПриходныйСкладскойОрдерТовары.ХарактеристикаНоменклатуры,
	|	ПриходныйСкладскойОрдерТовары.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПриходныйСкладскойОрдер.Организация            КАК Организация,
	|	ПриходныйСкладскойОрдер.ПодразделениеКомпании  КАК ПодразделениеКомпании,
	|	ПриходныйСкладскойОрдер.СкладКомпании          КАК СкладКомпании,
	|	ПриходныйСкладскойОрдер.СкладКомпании.ТипЦенРозничнойТорговли КАК ТипЦены
	|ИЗ
	|	Документ.ПриходныйСкладскойОрдер КАК ПриходныйСкладскойОрдер
	|ГДЕ
	|	ПриходныйСкладскойОрдер.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций 			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивПодразделенийКомпании = УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ПодразделениеКомпании").ВыгрузитьКолонку(0);
	МассивСкладов    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "СкладКомпании").ВыгрузитьКолонку(0);
	МассивТиповЦен    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ТипЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьПодразделениеКомпании", ?(МассивПодразделенийКомпании.Количество() = 1, МассивПодразделенийКомпании[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьТипЦены",     ?(МассивТиповЦен.Количество() = 1,    МассивТиповЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЭтикеток");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	Товары.ЗаполнитьЗначения(СтруктураДействий.ЗаполнитьОрганизацию, "Организация");
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//	Адрес - адрес структуры данных во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЦенников(МассивДокументов) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриходныйСкладскойОрдерТовары.Номенклатура КАК Номенклатура,
	|	ПриходныйСкладскойОрдерТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ПриходныйСкладскойОрдерТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МИНИМУМ(ПриходныйСкладскойОрдерТовары.НомерСтроки) КАК Порядок,
	|	СУММА(ВЫБОР
	|			КОГДА ПриходныйСкладскойОрдерТовары.Ссылка.СкладКомпании.Розничный = ИСТИНА
	|				ТОГДА ПриходныйСкладскойОрдерТовары.Количество * (ЕСТЬNULL(ПриходныйСкладскойОрдерТовары.ЕдиницаИзмерения.Коэффициент, 1) / ЕСТЬNULL(Цены.ЕдиницаИзмерения.Коэффициент, 1))
	|			ИНАЧЕ ПриходныйСкладскойОрдерТовары.Количество
	|		КОНЕЦ) КАК Количество
	|ИЗ
	|	Документ.ПриходныйСкладскойОрдер.Товары КАК ПриходныйСкладскойОрдерТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Цены.СрезПоследних КАК Цены
	|		ПО (Цены.Номенклатура = ПриходныйСкладскойОрдерТовары.Номенклатура)
	|			И (Цены.ХарактеристикаНоменклатуры = ПриходныйСкладскойОрдерТовары.ХарактеристикаНоменклатуры)
	|			И (Цены.ТипЦен = ПриходныйСкладскойОрдерТовары.Ссылка.СкладКомпании.ТипЦенРозничнойТорговли)
	|ГДЕ
	|	ПриходныйСкладскойОрдерТовары.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйСкладскойОрдерТовары.Номенклатура,
	|	ПриходныйСкладскойОрдерТовары.ХарактеристикаНоменклатуры,
	|	ПриходныйСкладскойОрдерТовары.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПриходныйСкладскойОрдер.Организация КАК Организация,
	|	ПриходныйСкладскойОрдер.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ПриходныйСкладскойОрдер.СкладКомпании КАК СкладКомпании,
	|	ПриходныйСкладскойОрдер.СкладКомпании.ТипЦенРозничнойТорговли КАК ТипЦены
	|ИЗ
	|	Документ.ПриходныйСкладскойОрдер КАК ПриходныйСкладскойОрдер
	|ГДЕ
	|	ПриходныйСкладскойОрдер.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций 			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивПодразделенийКомпании = УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ПодразделениеКомпании").ВыгрузитьКолонку(0);
	МассивСкладов    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "СкладКомпании").ВыгрузитьКолонку(0);
	МассивТиповЦен    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ТипЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьПодразделениеКомпании", ?(МассивПодразделенийКомпании.Количество() = 1, МассивПодразделенийКомпании[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьВидЦены",     ?(МассивТиповЦен.Количество() = 1,    МассивТиповЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЦенников");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	Товары.ЗаполнитьЗначения(СтруктураДействий.ЗаполнитьОрганизацию, "Организация");
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли