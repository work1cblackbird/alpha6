// Модуль документа "Приходный складской ордер"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка=Истина)
	
	// выполним проверки
	Если ЭтоНовый() И ЕстьРеквизит(ДанныеЗаполнения,"СкладКомпании") Тогда
		// проверка на склад
		Если ЕстьРеквизит(ДанныеЗаполнения,"СкладПолучатель") И ТипЗнч(ДанныеЗаполнения.СкладПолучатель) = Тип("СправочникСсылка.ПодразделенияКомпании") Тогда
			
			ТекстСообщения = НСтр("ru = 'В поле ""Получатель"" указано Подразделение компании. Ввод складского ордера невозможен.'");
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
			Возврат;
			
		КонецЕсли;
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
			И ДанныеЗаполнения.Свойство("ЗакрытиеСмены")
			И ДанныеЗаполнения.Свойство("СкладКомпании") Тогда
			
			Если ЗначениеЗаполнено(ДанныеЗаполнения.СкладКомпании) Тогда
				
				Если ЭтоОбычныйСклад(ДанныеЗаполнения.СкладКомпании, ДанныеЗаполнения.ЗакрытиеСмены) Тогда
					
					ТекстСообщения = НСтр("ru = 'Склад, указанный в документе основании, обычный. Ввод складского ордера невозможен.'");
					УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ЭтотОбъект.ДополнительныеСвойства.Вставить("СкладКомпании", ДанныеЗаполнения.СкладКомпании);
			Заполнить(ДанныеЗаполнения.ЗакрытиеСмены);
			Возврат;
			
		КонецЕсли;
		
		Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура")
			И ЗначениеЗаполнено(ДанныеЗаполнения)
			И ТипЗнч(ДанныеЗаполнения) <> Тип("ДокументСсылка.ЗакрытиеСмены")
			И ЕстьРеквизит(ДанныеЗаполнения,"СкладКомпании") Тогда
		
			Если ЭтоОбычныйСклад(ДанныеЗаполнения.СкладКомпании, ДанныеЗаполнения) Тогда
			
				ТекстСообщения = НСтр("ru = 'Склад, указанный в документе основании, обычный. Ввод складского ордера невозможен.'");
				УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
				Возврат;
			
			КонецЕсли;
			
		КонецЕсли;
		
		// проверка на наличие уже документа приходный складской ордер для шин
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаХранениеШин") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПриходныйСкладскойОрдер.Ссылка КАК ПриходныйСкладскойОрдерСсылка
			|ИЗ
			|	Документ.ПриходныйСкладскойОрдер КАК ПриходныйСкладскойОрдер
			|ГДЕ
			|	ПриходныйСкладскойОрдер.ДокументОснование = &ДокументОснование
			|	И ПриходныйСкладскойОрдер.Проведен        = ИСТИНА
			|	И ПриходныйСкладскойОрдер.ПометкаУдаления = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПриходныйСкладскойОрдер.Ссылка";
			Запрос.УстановитьПараметр("ДокументОснование",ДанныеЗаполнения);
			Выборка=Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ТексСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для документа <%1> уже введен складской ордер <%2>.'"), ДанныеЗаполнения, Выборка.ПриходныйСкладскойОрдерСсылка);
				УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТексСообщения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьРеквизит(ДанныеЗаполнения, "Контрагент") И ЗначениеЗаполнено(ДанныеЗаполнения.Контрагент) Тогда
		ВладелецТовара = ДанныеЗаполнения.Контрагент;
	КонецЕсли;
	
	// заполним количество базовое и коэффициент
	Для Каждого Строка Из Товары Цикл
		Если Строка.Коэффициент = 0 Тогда
			Строка.Коэффициент = ?(ЗначениеЗаполнено(Строка.ЕдиницаИзмерения), Строка.ЕдиницаИзмерения.Коэффициент, 1);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.КоличествоБазовое) Тогда
			Строка.КоличествоБазовое = Строка.Количество * Строка.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	// произведем свертку
	ТоварыВременная = Товары.Выгрузить();
	Товары.Очистить();
	
	Для Каждого ТекСтрока Из ТоварыВременная Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Номенклатура) Или ТекСтрока.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура"               , ТекСтрока.Номенклатура);
		ПараметрыОтбора.Вставить("ХарактеристикаНоменклатуры" , ТекСтрока.ХарактеристикаНоменклатуры);
		ПараметрыОтбора.Вставить("Коэффициент"                , ТекСтрока.Коэффициент);
		ПараметрыОтбора.Вставить("ЕдиницаИзмерения"           , ТекСтрока.ЕдиницаИзмерения);
		ПараметрыОтбора.Вставить("Ячейка"                     , ТекСтрока.Ячейка);
		
		НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			// еще нет такой строки
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
		Иначе
			// уже есть такая строка, посмотрим можно ли свернуть
			УчетПоХарактеристикам 	= Ложь;
			ТипНоменклатуры 		= ТекСтрока.Номенклатура.ТипНоменклатуры;
			
			Если ЗначениеЗаполнено(ТипНоменклатуры) Тогда
				УчетПоХарактеристикам = (ТипНоменклатуры.ИспользованиеХарактеристик = 1 ИЛИ ТипНоменклатуры.ИспользованиеХарактеристик = 2);
			КонецЕсли;	
			
			Если УчетПоХарактеристикам И НЕ ЗначениеЗаполнено(ТекСтрока.ХарактеристикаНоменклатуры) Тогда
				// ведется учет по характеристикам - свернуть нельзя
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
			Иначе
				НайденнаяСтрока = НайденныеСтроки[0];
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + ТекСтрока.Количество;
				НайденнаяСтрока.КоличествоБазовое = НайденнаяСтрока.КоличествоБазовое + ТекСтрока.КоличествоБазовое;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;

	// выполним приватную проверку
	Если ХозОперация = Справочники.ХозОперации.ПриходныйСкладскойОрдерШин Тогда
		Если НЕ ЗначениеЗаполнено(ДокументОснование) ИЛИ ТипЗнч(ДокументОснование)<>Тип("ДокументСсылка.ЗаявкаНаХранениеШин") Тогда
			ТекстСообщения = НСтр("ru = '"+Строка(ХозОперация)+" должен быть введен на основании документа """+Метаданные.Документы.ЗаявкаНаХранениеШин+""".'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПриходныйСкладскойОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПриходныйСкладскойОрдер КАК ПриходныйСкладскойОрдер
		|ГДЕ
		|	ПриходныйСкладскойОрдер.ДокументОснование = &ДокументОснование
		|	И ПриходныйСкладскойОрдер.Ссылка <> &Ссылка
		|	И ПриходныйСкладскойОрдер.Проведен";
		Запрос.УстановитьПараметр("ДокументОснование",ДокументОснование);
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТекстСообщения = НСтр("ru = 'На основании <"+ДокументОснование+"> уже есть введенный документ <"+Выборка.Ссылка+">.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		КонецЕсли;
	Иначе
		Если ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.ЗаявкаНаХранениеШин") Тогда
			ТекстСообщения = НСтр("ru = '"+Строка(ХозОперация)+" не может быть введен на основании документа """+Метаданные.Документы.ЗаявкаНаХранениеШин+""".'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// корректируем количество базовое 
	Для Каждого Строка Из Товары Цикл
		Если НЕ ЗначениеЗаполнено(Строка.КоличествоБазовое) Тогда
			Строка.КоличествоБазовое = Строка.Количество * Строка.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоОрдерномуУчетуПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// на всякий случай проверим тип склада, его могли поменять в самом справочнике
	Если СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.Обычный ИЛИ  СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.Ячеистый Тогда
		ТекстСообщения = НСтр("ru = 'Склад должен быть ордерным.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		Возврат;
	КонецЕсли;
	
	Если ХозОперация=Справочники.ХозОперации.ПриходныйСкладскойОрдерШин Тогда
		ХранениеШинКомплектами = УчетныеПолитикиСервер.Значение("ХранениеШинКомплектами", Дата, ПодразделениеКомпании);
		Если ХранениеШинКомплектами Тогда
			ТаблицаТоваров=Товары.Выгрузить();
			ТаблицаТоваров.Свернуть("Ячейка");
			Если ТаблицаТоваров.Количество()>1 Тогда
				ТекстСообщения = НСтр("ru = 'Хранение шин возможно только покомплектно. Все шины должны быть помещены в одну ячейку.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// проведем остатки товаров по регистру ОстаткиТоваровОрдерныйСклад
	НаборЗаписейОстатки = Движения.ОстаткиТоваровОрдерныйСклад;
	НаборЗаписейОстатки.РежимПроведения = РежимПроведения;
	НаборЗаписейОстатки.ДокументОбъект  = ЭтотОбъект;
	НаборЗаписейОстатки.СкладКомпании   = СкладКомпании;
	Если ХозОперация = Справочники.ХозОперации.ПриходныйСкладскойОрдерШин Тогда
		НаборЗаписейОстатки.ЗаявкаНаХранениеШин=ДокументОснование;
	Иначе
		НаборЗаписейОстатки.ЗаявкаНаХранениеШин=Неопределено;
	КонецЕсли; 
	НаборЗаписейОстатки.РезультатЗапросаПоТоварам = Неопределено;
	НаборЗаписейОстатки.Приходовать               = Истина;
	НаборЗаписейОстатки.ПоБазовомуКоличеству      = Истина;
	Отказ = НЕ НаборЗаписейОстатки.Приход() ИЛИ Отказ;
	
	// двигаем границу последовательности ордерного склада
	РаботаСГраницами.СдвинутьГраницуОрдерногоУчета(Ссылка, ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Перемещение товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПеремещениеТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Проверим склад в документе основании
	Если (ДанныеЗаполнения.СкладПолучатель.ВидСклада <> Перечисления.ВидыСкладов.Ордерный)
		И (ДанныеЗаполнения.СкладПолучатель.ВидСклада <> Перечисления.ВидыСкладов.ОрдерныйЯчеистый) Тогда
			
		ТекстСообщения = НСтр("ru = 'Склад, указанный в документе основании не ордерный. Ввод складского ордера невозможен.'");
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
		Возврат ЛОЖЬ;
		
	Иначе
	
		СкладКомпании = ДанныеЗаполнения.СкладПолучатель;
		
	КонецЕсли;
	
	// заполнение ячеек
	Для Каждого СтрТовары Из ДанныеЗаполнения.Товары Цикл
		Товары[СтрТовары.НомерСтроки - 1].Ячейка = СтрТовары.ЯчейкаПолучатель;
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПеремещениеТоваров()

// Производит заполнение объекта на основании документа "Комплектация"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Комплектация(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Товары.Очистить();
	НоваяСтрока 						   = Товары.Добавить();
	НоваяСтрока.Номенклатура               = ДанныеЗаполнения.Комплект;
	НоваяСтрока.ХарактеристикаНоменклатуры = ДанныеЗаполнения.ХарактеристикаКомплекта;
	НоваяСтрока.ЕдиницаИзмерения           = ДанныеЗаполнения.Комплект.ОсновнаяЕдиницаИзмерения;
	НоваяСтрока.Коэффициент                = ДанныеЗаполнения.Комплект.ОсновнаяЕдиницаИзмерения.Коэффициент;
	НоваяСтрока.Количество                 = ДанныеЗаполнения.КоличествоКомплектов;
	НоваяСтрока.КоличествоБазовое          = ДанныеЗаполнения.КоличествоКомплектов;
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения.Ячейка) Тогда
		Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
			НоваяСтрока.Ячейка = Справочники.Номенклатура.ПолучитьЯчейкуХранения(НоваяСтрока.Номенклатура, СкладКомпании);
		КонецЕсли;
	Иначе
		НоваяСтрока.Ячейка = ДанныеЗаполнения.Ячейка;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Комплектация()

// Производит заполнение объекта на основании документа "Разукомплектация"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Разукомплектация(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РазукомплектацияТовары.НомерСтроки КАК НомерСтроки,
	|	РазукомплектацияТовары.Номенклатура,
	|	РазукомплектацияТовары.ХарактеристикаНоменклатуры,
	|	РазукомплектацияТовары.ЕдиницаИзмерения,
	|	РазукомплектацияТовары.Коэффициент,
	|	РазукомплектацияТовары.Количество * РазукомплектацияТовары.Ссылка.КоличествоКомплектов КАК Количество,
	|	РазукомплектацияТовары.Количество * РазукомплектацияТовары.Ссылка.КоличествоКомплектов КАК КоличествоБазовое,
	|	РазукомплектацияТовары.Ячейка
	|ИЗ
	|	Документ.Разукомплектация.Товары КАК РазукомплектацияТовары
	|ГДЕ
	|	РазукомплектацияТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	Выборка = Запрос.Выполнить().Выбрать();
	Товары.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, , "НомерСтроки");
		
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Разукомплектация()

// Производит заполнение объекта на основании документа "Пересортица товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПересортицаТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Товары.Очистить();
	Для Каждого СтрТовар Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура = СтрТовар.НоменклатураПриход;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрТовар.ХарактеристикаНоменклатурыПриход;
		НоваяСтрока.ЕдиницаИзмерения = СтрТовар.ЕдиницаИзмеренияПриход;
		НоваяСтрока.Коэффициент = СтрТовар.КоэффициентПриход;
		НоваяСтрока.Количество = СтрТовар.КоличествоПриход;
		НоваяСтрока.КоличествоБазовое = СтрТовар.КоличествоПриход;
		НоваяСтрока.Ячейка = СтрТовар.ЯчейкаПриход;
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПересортицаТоваров()

// Производит заполнение объекта на основании документа "Корректировка реализации"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_КорректировкаРеализации(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КорректировкаРеализацииТовары.Номенклатура КАК Номенклатура,
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	КорректировкаРеализацииТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	КорректировкаРеализацииТовары.Коэффициент КАК Коэффициент,
	|	-КорректировкаРеализацииТовары.КоличествоРазница КАК Количество,
	|	-КорректировкаРеализацииТовары.КоличествоРазница * КорректировкаРеализацииТовары.Коэффициент КАК КоличествоБазовое
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Основание
	|	И КорректировкаРеализацииТовары.КоличествоРазница < 0");
	Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Товары.Очистить();
		Возврат Истина;
	КонецЕсли;
	
	Товары.Загрузить(РезультатЗапроса.Выгрузить());
	
	Для Каждого Строка Из Товары Цикл
		
		ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(ЭтотОбъект, Строка);

	КонецЦикла;
	

	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_КорректировкаРеализации()

// Производит заполнение объекта на основании документа "Корректировка поступления"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_КорректировкаПоступления(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КорректировкаПоступленияТовары.Номенклатура КАК Номенклатура,
	|	КорректировкаПоступленияТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	КорректировкаПоступленияТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	КорректировкаПоступленияТовары.Коэффициент КАК Коэффициент,
	|	КорректировкаПоступленияТовары.КоличествоРазница КАК Количество,
	|	КорректировкаПоступленияТовары.КоличествоРазница * КорректировкаПоступленияТовары.Коэффициент КАК КоличествоБазовое
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
	|ГДЕ
	|	КорректировкаПоступленияТовары.Ссылка = &Основание
	|	И КорректировкаПоступленияТовары.КоличествоРазница > 0");
	Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Товары.Очистить();
		Возврат Истина;
	КонецЕсли;
	
	Товары.Загрузить(РезультатЗапроса.Выгрузить());
	
	Для Каждого Строка Из Товары Цикл
		
		ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(ЭтотОбъект, Строка);

	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_КорректировкаРеализации()

// Производит заполнение объекта на основании документа "Заявка на хранение шин"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаХранениеШин(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.ПриходныйСкладскойОрдерШин;
	ХранениеШинКомплектами = УчетныеПолитикиСервер.Значение("ХранениеШинКомплектами",
		Дата, ПодразделениеКомпании);
	Товары.Очистить();
	
	Для Каждого СтрТовар Из ДанныеЗаполнения.Шины Цикл
		
		НоваяСтрока 					= Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрТовар,
			"Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Коэффициент,Количество");
		НоваяСтрока.КоличествоБазовое 	= НоваяСтрока.Количество;
		НоваяСтрока.Ячейка 				= ?(ХранениеШинКомплектами, ДанныеЗаполнения.Ячейка, СтрТовар.Ячейка);
		
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаявкаНаХранениеШин()

// Производит заполнение объекта на основании документа "Авансовый отчет"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_АвансовыйОтчет(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого Строка Из Товары Цикл
		Если ЗначениеЗаполнено(Строка.Ячейка) Тогда
			Продолжить;
		КонецЕсли;
		Строка.Ячейка = Справочники.Номенклатура.ПолучитьЯчейкуХранения(Строка.Номенклатура, СкладКомпании);;
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_АвансовыйОтчет()

// Производит заполнение объекта на основании документа "Закрытие кассовой смены".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗакрытиеСмены(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СкладКомпании = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "СкладКомпании");
	
	Товары.Загрузить(ПолучитьТоварыЗакрытияСменыПоСкладу(СкладКомпании, ДанныеЗаполнения));
	
	// Заполняем количество базовое и коэффициент
	Для Каждого Строка Из Товары Цикл
		
		Если Строка.Коэффициент = 0 Тогда
			
			Строка.Коэффициент = ?(ЗначениеЗаполнено(Строка.ЕдиницаИзмерения), Строка.ЕдиницаИзмерения.Коэффициент, 1);
			
		КонецЕсли;
		
		Строка.КоличествоБазовое = Строка.Количество * Строка.Коэффициент;
		
	КонецЦикла;
	
	// Заполняем ячейки по умолчанию
	ВидСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладКомпании, "ВидСклада");
	
	Если ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый
		ИЛИ ВидСклада = Перечисления.ВидыСкладов.Ячеистый Тогда
	
		Для Каждого Строка Из Товары Цикл
			
			Если ЗначениеЗаполнено(Строка.Ячейка) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Строка.Ячейка = Справочники.Номенклатура.ПолучитьЯчейкуХранения(Строка.Номенклатура, СкладКомпании);
			
		КонецЦикла;
	
	КонецЕсли;

	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции

#КонецОбласти

Функция ЭтоОбычныйСклад(СкладКомпании, ДанныеЗаполнения)

	ЭтоОбычныйСклад = Ложь;
	
	Если ТипЗнч(СкладКомпании) <> Тип("СправочникСсылка.ПодразделенияКомпании")
		И (СкладКомпании.ВидСклада <> Перечисления.ВидыСкладов.Ордерный)
		И (СкладКомпании.ВидСклада <> Перечисления.ВидыСкладов.ОрдерныйЯчеистый)
		И (ТипЗнч(ДанныеЗаполнения) <> Тип("ДокументСсылка.ЗаявкаНаХранениеШин")) Тогда
		
		Если НЕ (ЕстьРеквизит(ДанныеЗаполнения,"СкладПолучатель")
			И ((ДанныеЗаполнения.СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.Ордерный)
			ИЛИ (ДанныеЗаполнения.СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый))) Тогда
			
				ЭтоОбычныйСклад = Истина;
				
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭтоОбычныйСклад;

КонецФункции

Функция ПолучитьТоварыЗакрытияСменыПоСкладу(СкладКомпании, ДанныеЗаполнения)
	
	ХозОперацияЗакрытиеСмены = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ХозОперация") = 
		Справочники.ХозОперации.ЗакрытиеСмены;
		
	Запрос = Новый Запрос;
	
	Если ХозОперацияЗакрытиеСмены Тогда
	
		Запрос.УстановитьПараметр("МестоРазмещения", СкладКомпании);
	
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗакрытиеСменыВозвраты.Номенклатура КАК Номенклатура,
		|	СУММА(ЗакрытиеСменыВозвраты.Количество * ЗакрытиеСменыВозвраты.Коэффициент) КАК Количество,
		|	ЗакрытиеСменыВозвраты.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЗакрытиеСменыВозвраты.Коэффициент КАК Коэффициент,
		|	ЗакрытиеСменыВозвраты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|ИЗ
		|	Документ.ЗакрытиеСмены.Возвраты КАК ЗакрытиеСменыВозвраты
		|ГДЕ
		|	ЗакрытиеСменыВозвраты.Ссылка = &Ссылка"
		+ ?(ХозОперацияЗакрытиеСмены, Символы.ПС + "	И ЗакрытиеСменыВозвраты.МестоРазмещения = &МестоРазмещения", "") + "
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗакрытиеСменыВозвраты.Номенклатура,
		|	ЗакрытиеСменыВозвраты.ЕдиницаИзмерения,
		|	ЗакрытиеСменыВозвраты.Коэффициент,
		|	ЗакрытиеСменыВозвраты.ХарактеристикаНоменклатуры";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

#КонецОбласти

#Область Инициализация

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// Установим параметры проверки документа
ДополнительныеСвойства.Вставить("ТоварыЗапретАвтоСписанияХарактеристик", ИСТИНА);

#КонецОбласти

#КонецЕсли

