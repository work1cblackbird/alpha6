// Модуль документа "Возврат от покупателя"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	// Вызываем общий обработчик события
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ХозОперация) Тогда
		ХозОперация = Справочники.ХозОперации.ВозвратТоваровОтПокупателя;
	КонецЕсли;
		
	// изменим итоговую сумму документа
	СуммаДокумента = Товары.Итог("СуммаВсего");
	
	// Заполним доп. поля для товарной строки
	Для Каждого СтрокаТовар Из Товары Цикл
		Если ПустаяСтрока(СтрокаТовар.ИдентификаторТовара) Тогда
			СтрокаТовар.ИдентификаторТовара = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
	// Очистим ТЧ Коды маркировки
	КодыМаркировки.Очистить();
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	КодыМаркировки.Очистить();
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Предварительно проверим ТЧ Коды маркировки
	МаркировкаТоваровСервер.ПроверкаКодовМаркировкиПередЗаписью(ЭтотОбъект);
	
	// Установим параметры проверки документа
	ДополнительныеСвойства.Вставить("ПроверкаЗаполненияПартииПоГТД", ЗначениеЗаполнено(ДокументОснование));
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Выполняем приватную проверку корректности заполнения ГТД
	Если НЕ ЗначениеЗаполнено(ДокументОснование) И ПолучитьФункциональнуюОпцию("ИспользоватьГТД") Тогда
		Для каждого СтрокаТабличнойЧасти Из Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументПродажи)
				И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ГТД)
				И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Партия) Тогда
				
				ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТабличнойЧасти.НомерСтроки, "Партия");
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Поле ""Партия"" строки %1 таблицы ""Товары"" не заполнено при указанном значении поля ""ГТД""'"),
						СтрокаТабличнойЧасти.НомерСтроки
					),
					ЭтотОбъект,
					ПутьКТабличнойЧасти,
					,
					Отказ
				);

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.ЗакрытиеСмены") Тогда
		
		Если ДокументОснование.Контрагент <> Контрагент Тогда
			ТекстСообщения = НСтр("ru = 'Контрагент документа основания отличается от контрагента текущего документа.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
		КонецЕсли;
		
		Если ДокументОснование.ДоговорВзаиморасчетов <> ДоговорВзаиморасчетов Тогда
			ТекстСообщения = НСтр(
				"ru = 'Договор взаиморасчетов документа основания отличается от договора взаиморасчетов текущего документа'"
			);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверим заполнение ТЧ Коды маркировки
	МаркировкаТоваровСервер.ПроверитьЗаполнениеКодовМаркировки(ЭтотОбъект, Отказ);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// корректируем количество базовое 
	Для Каждого Строка Из Товары Цикл
		Если НЕ ЗначениеЗаполнено(Строка.КоличествоБазовое) Тогда
			Строка.КоличествоБазовое = Строка.Количество * Строка.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Произведем очистку не использующихся в текущем контексте реквизитов
	ОбработкаСобытийДокументаСервер.ОчиститьПолеЦенаРозничнаяДляНеРозничныхСкладов(ЭтотОбъект, СкладКомпании);
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Для каждого СтрокаТоваров Из Товары Цикл
			Если СтрокаТоваров.ДокументПродажи <> ДокументОснование Тогда
				СтрокаТоваров.ДокументПродажи = ДокументОснование;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПартиямПередПроведением(Ссылка, ДополнительныеСвойства);
	
	// Проверим соответствие документа основание с ХО
	Если ХозОперация = Справочники.ХозОперации.ВозвратТоваровОтПокупателяКомиссия Тогда
		
		МассивХозОпераций = Новый Массив;
		МассивХозОпераций.Добавить(
			ПредопределенноеЗначение("Справочник.ХозОперации.ВводОстатковТоваровПереданныхНаКомиссию")
		);
		МассивХозОпераций.Добавить(
			ПредопределенноеЗначение("Справочник.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию")
		);
		МассивХозОпераций.Добавить(ПредопределенноеЗначение("Справочник.ХозОперации.РеализацияТоваровКомиссия"));
		
		Если ДокументОснование <> Неопределено И МассивХозОпераций.Найти(ДокументОснование.ХозОперация) = Неопределено Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Выбранный документ основание не соответствует хозяйственной операции документа.'"),
				ЭтотОбъект,
				, ,
				Отказ
			);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Удалим введенные в оборот коды маркировки
	НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
	НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейСостоянияКодовМаркировки.ОтменаПроведения();
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Получим способ ведения баланса.
	БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(Дата);
	
	Документы.ВозвратОтПокупателя.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	
	// проведем взаиморасчеты
	Если ХозОперация <> Справочники.ХозОперации.ВозвратТоваровОтПокупателяКомиссия
		И Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам
		И Не ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ЭтоБесплатныйЗаказНаряд", Ложь) Тогда
		НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыКомпании;
		НаборЗаписейВзаиморасчеты.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейВзаиморасчеты.РежимПроведения = РежимПроведения;
		НаборЗаписейВзаиморасчеты.Контрагент = Контрагент;
		НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
		Если ЗначениеЗаполнено(ДокументОснование)
			И НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗакрытиеСмены") Тогда
			НаборЗаписейВзаиморасчеты.Сделка = ДокументОснование;
			НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем = Истина;
		Иначе
			НаборЗаписейВзаиморасчеты.Сделка = Неопределено;
		КонецЕсли;
		НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок =
			(СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически);
		НаборЗаписейВзаиморасчеты.Сумма = СуммаДокумента;
		НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц = 0;
		Если НЕ НаборЗаписейВзаиморасчеты.Расход() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		// доходы и расходы по суммовым разницам
		СуммаДоходаРасходаСуммовыхРазниц = НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
		Если СуммаДоходаРасходаСуммовыхРазниц <> 0 Тогда
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			
			Если БалансВедетсяПоПодразделениям Тогда
				НаборЗаписейДиР.Подразделение = ДоговорВзаиморасчетов.ПодразделениеКомпании;
			КонецЕсли;
			
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
			НаборЗаписейДиР.ВУпрВалюте             = Истина;
			Если СуммаДоходаРасходаСуммовыхРазниц < 0 Тогда
				НаборЗаписейДиР.Расход = -СуммаДоходаРасходаСуммовыхРазниц;
			Иначе
				НаборЗаписейДиР.Доход = СуммаДоходаРасходаСуммовыхРазниц;
			КонецЕсли;
			Если НЕ НаборЗаписейДиР.Приход() Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Документы.ВозвратОтПокупателя.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	// проведем остатки товаров
	НаборЗаписейОстатки = Движения.ОстаткиТоваровКомпании;
	НаборЗаписейОстатки.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейОстатки.СкладКомпании = СкладКомпании;
	НаборЗаписейОстатки.РезультатЗапросаПоТоварам = ПолучитьТаблицуТоваров();
	НаборЗаписейОстатки.ПоБазовомуКоличеству = Истина;
	НаборЗаписейОстатки.Контрагент = Контрагент;
	НаборЗаписейОстатки.ДвиженияПоРознице = СкладКомпании.Розничный;
	НаборЗаписейОстатки.РазрешитьПереоценку = НЕ СкладКомпании.Розничный;
	Если НЕ НаборЗаписейОстатки.Приход() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// проведем партии товаров
	Если НЕ ПровестиПоПартиям(РежимПроведения, Ссылка) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ОбработкаПроведенияНакопленияПоКарточкамКонтрагентов();
	КонецЕсли;
	
	// Изменим состояние маркировки
	НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
	НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейСостоянияКодовМаркировки.Организация = Организация;
	НаборЗаписейСостоянияКодовМаркировки.ПроверятьВводВОборот = Истина;
	НаборЗаписейСостоянияКодовМаркировки.Состояние = Перечисления.СостоянияКодовМаркировки.ВведенВОборотПриВозврате;
	НаборЗаписейСостоянияКодовМаркировки.РежимПроведения = РежимПроведения;
	Если НЕ НаборЗаписейСостоянияКодовМаркировки.СостояниеКодовМаркировки() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Проверим налиие прослеживаемых товаров, которые были возвращены из розницы
	Если НЕ Отказ Тогда
		Движения.Продажи.Записать();
	КонецЕсли;
	ТаблицаПрослеживаемыхТоваров = Документы.ВозвратОтПокупателя.ОперацииСПрослеживаемымиТоварами(
		ЭтотОбъект);
	НаборЗаписейОперацииПрослеживаемости = Движения.ОперацииПрослеживаемыхТоваров;
	НаборЗаписейОперацииПрослеживаемости.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейОперацииПрослеживаемости.ТаблицаПрослеживаемыхТоваров = ТаблицаПрослеживаемыхТоваров;
	Если НЕ НаборЗаписейОперацииПрослеживаемости.ДобавитьОперациюПрослеживаемости() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Если НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// двигаем границу последовательности взаиморасчетов
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	
	// Проверяем, чтобы количество в документе не превышало количество в документе основании 
	// и других уже проведенных возвратах.
	Если КоличествоПоДокументуОснованиюНеКорректно() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Зафиксируем новые штрихкоды товара из кода маркировки
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь) Тогда
		МаркировкаТоваровСервер.ПроверитьИДобавитьГТИННоменклатуры(Ссылка);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТекстЗапросаДанныхДляЗаполненияТоваровНаОсновании()
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ОснованиеБесплатныйЗаказНаряд", Ложь) Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТоварыВПроизводстве.Номенклатура КАК Номенклатура,
			|	ТоварыВПроизводстве.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	ТоварыВПроизводстве.Партия КАК Партия,
			|	ВЫБОР
			|		КОГДА ТоварыВПроизводстве.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
			|			ТОГДА ТоварыВПроизводстве.Номенклатура.СтавкаНДС
			|		ИНАЧЕ ТоварыВПроизводстве.СтавкаНДС
			|	КОНЕЦ КАК СтавкаНДС,
			|	ТоварыВПроизводстве.Количество КАК Количество,
			|	ТоварыВПроизводстве.Сумма КАК Сумма,
			|	ТоварыВПроизводстве.СуммаУпр КАК СуммаУпр,
			|	ТоварыВПроизводстве.ГТД КАК ГТД
			|ИЗ
			|	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
			|ГДЕ
			|	ТоварыВПроизводстве.Регистратор = &ДокументПередачи
			|	И ТоварыВПроизводстве.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)";
			
		Возврат ТекстЗапроса;
		
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПродажиОбороты.Номенклатура КАК Номенклатура,
		|	ПродажиОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ПродажиОбороты.Партия КАК Партия,
		|	ПродажиОбороты.ГТД КАК ГТД,
		|	ПродажиОбороты.СтавкаНДС КАК СтавкаНДС
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(
		|			,
		|			&НаМомент,
		|			,
		|			ДокументПродажи = &ДокументПередачи
		|				И Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)) КАК ПродажиОбороты
		|;";
	
	Если ХозОперация = Справочники.ХозОперации.ВозвратТоваровОтПокупателяКомиссия Тогда	
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ПартииТоваровОтданныеОстатки.КоличествоОстаток), 0) КАК Количество,
		|	ЕСТЬNULL(СУММА(ПартииТоваровОтданныеОстатки.СуммаОстаток), 0) КАК Сумма,
		|	ЕСТЬNULL(СУММА(ПартииТоваровОтданныеОстатки.СуммаУпрОстаток), 0) КАК СуммаУпр,
		|	ПартииТоваровОтданныеОстатки.Номенклатура КАК Номенклатура,
		|	ПартииТоваровОтданныеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ПартииТоваровОтданныеОстатки.Партия КАК Партия,
		|	ПартииТоваровОтданныеОстатки.ГТД КАК ГТД
		|ПОМЕСТИТЬ ВТ_КоличествоТоваров
		|ИЗ
		|	РегистрНакопления.ПартииТоваровОтданные.Остатки(
		|			&НаМомент,
		|			ДокументПередачи = &ДокументПередачи
		|				И (Номенклатура, ХарактеристикаНоменклатуры, Партия) В
		|					(ВЫБРАТЬ
		|						ВТ_Товары.Номенклатура КАК Номенклатура,
		|						ВТ_Товары.ХарактеристикаНоменклатуры,
		|						ВТ_Товары.Партия
		|					ИЗ
		|						ВТ_Товары КАК ВТ_Товары)) КАК ПартииТоваровОтданныеОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваровОтданныеОстатки.Номенклатура,
		|	ПартииТоваровОтданныеОстатки.ХарактеристикаНоменклатуры,
		|	ПартииТоваровОтданныеОстатки.Партия,
		|	ПартииТоваровОтданныеОстатки.ГТД;";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ПродажиОбороты.КоличествоОборот), 0) КАК Количество,
		|	ЕСТЬNULL(СУММА(ПродажиОбороты.СуммаОборот), 0) КАК Сумма,
		|	ЕСТЬNULL(СУММА(ПродажиОбороты.СуммаУпрОборот), 0) КАК СуммаУпр,
		|	ПродажиОбороты.Номенклатура КАК Номенклатура,
		|	ПродажиОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ПродажиОбороты.Партия КАК Партия,
		|	ПродажиОбороты.ГТД КАК ГТД
		|ПОМЕСТИТЬ ВТ_КоличествоТоваров
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(
		|			,
		|			&НаМомент,
		|			,
		|			ДокументПродажи = &ДокументПередачи
		|				И (Номенклатура, ХарактеристикаНоменклатуры, Партия) В
		|					(ВЫБРАТЬ
		|						ВТ_Товары.Номенклатура КАК Номенклатура,
		|						ВТ_Товары.ХарактеристикаНоменклатуры,
		|						ВТ_Товары.Партия
		|					ИЗ
		|						ВТ_Товары КАК ВТ_Товары)) КАК ПродажиОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ПродажиОбороты.Номенклатура,
		|	ПродажиОбороты.ХарактеристикаНоменклатуры,
		|	ПродажиОбороты.Партия,
		|	ПродажиОбороты.ГТД;";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.Номенклатура КАК Номенклатура,
		|	ВТ_Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВТ_Товары.Партия КАК Партия,
		|	ВТ_Товары.ГТД КАК ГТД,
		|	ВТ_Товары.СтавкаНДС КАК СтавкаНДС,
		|	ВТ_КоличествоТоваров.Количество КАК Количество,
		|	ВТ_КоличествоТоваров.Сумма КАК Сумма,
		|	ВТ_КоличествоТоваров.СуммаУпр КАК СуммаУпр
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КоличествоТоваров КАК ВТ_КоличествоТоваров
		|		ПО ВТ_Товары.Номенклатура = ВТ_КоличествоТоваров.Номенклатура
		|			И ВТ_Товары.ХарактеристикаНоменклатуры = ВТ_КоличествоТоваров.ХарактеристикаНоменклатуры
		|			И ВТ_Товары.Партия = ВТ_КоличествоТоваров.Партия";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьТоварыНаОснованииДокументаОснования(ДанныеЗаполнения)
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДанныеЗаполнения)) Тогда
		ЗаполненНаОснованииДокумента = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеСвойства,
		"ВыполненоЗаполнениеНаОсновании",
		""
		);
		
		ХозОперация = Справочники.ХозОперации.ВозвратТоваровОтПокупателя;
		//БлокироватьПерерасчетСкидок = Ложь;
		
		ПараметрыДействия = Документы.ЗаказПокупателя.ПолучитьПараметрыДействия(
		ЭтотОбъект,
		ДополнительныеСвойства.ПараметрыДействия);
		
		Товары.Очистить();
		
		// Актуальные остатки получаются в обработчике изменения "Номенклатуры"
		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаДанныхДляЗаполненияТоваровНаОсновании();		
		
		НаМомент = ?(Ссылка.Пустая(), Дата, Новый Граница(МоментВремени(), ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("НаМомент", НаМомент);
		Запрос.УстановитьПараметр("ДокументПередачи", ДанныеЗаполнения);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ДополнительныеСвойства.ПараметрыДействия.Вставить("ИскатьБезГТД", Истина);
		ДополнительныеСвойства.ПараметрыДействия.Вставить("ЗаполнитьТоварыНаОснованииДокументаОснования", Истина);
		
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока 							= Товары.Добавить();
			НоваяСтрока.Номенклатура 				= Выборка.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры 	= Выборка.ХарактеристикаНоменклатуры;
			НоваяСтрока.ДокументПродажи 			= ДанныеЗаполнения;
			НоваяСтрока.Партия			 			= Выборка.Партия;
			НоваяСтрока.ГТД				 			= Выборка.ГТД; 
			
			Документы.ВозвратОтПокупателя.ТоварыНоменклатураПриИзменении(
			ЭтотОбъект,
			НоваяСтрока,
			ДополнительныеСвойства.ПараметрыДействия
			);
			
			НоваяСтрока.СтавкаНДС				 	= Выборка.СтавкаНДС;
			Документы.ВозвратОтПокупателя.ТоварыСтавкаНДСПриИзменении(
			ЭтотОбъект, 
			НоваяСтрока, 
			ДополнительныеСвойства.ПараметрыДействия
			);
			
			НоваяСтрока.Количество = Выборка.Количество / ?(НоваяСтрока.Коэффициент = 0, 1, НоваяСтрока.Коэффициент); 
			Документы.ВозвратОтПокупателя.ТоварыКоличествоПриИзменении(
			ЭтотОбъект, 
			НоваяСтрока,
			ПараметрыДействия
			);
			
			Если ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
				СуммаТовара = Выборка.Сумма;
			ИначеЕсли ВалютаДокумента = ВалютаУправленческогоУчета Тогда
				СуммаТовара = Выборка.СуммаУпр;
			Иначе
				СуммаТовара = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					Выборка.СуммаУпр,
					ВалютаУправленческогоУчета,
					ТекущаяДатаСеанса(),
					ВалютаДокумента,
					КурсДокумента);
			КонецЕсли;
			
			НоваяСтрока.СуммаВсего = СуммаТовара;
			Документы.ВозвратОтПокупателя.ТоварыСуммаВсегоПриИзменении(
			ЭтотОбъект, 
			НоваяСтрока, 
			ПараметрыДействия
			);
			
			Если НоваяСтрока.Количество = 0 Тогда
				Товары.Удалить(НоваяСтрока.НомерСтроки-1);
				Продолжить;
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// АПК:299-выкл
#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Реализация товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РеализацияТоваров(ДанныеЗаполнения,
		ТекстЗаполнения = "",
		СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДополнительныеСвойства.ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.РеализацияТоваровКомиссия Тогда
		ХозОперация = Справочники.ХозОперации.ВозвратТоваровОтПокупателяКомиссия;
		Товары.Очистить(); 
		Документы.ВозвратОтПокупателя.ЗаполнитьДокументНаОснованииПоОперацииКомиссии(ЭтотОбъект, ДанныеЗаполнения);
	Иначе
		ЗаполнитьТоварыНаОснованииДокументаОснования(ДанныеЗаполнения);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РеализацияТоваров()

Функция ОбработкаЗаполнения_ЗаказНаряд(ДанныеЗаполнения,
		ТекстЗаполнения = "",
		СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЭтоБесплатныйЗаказНаряд = Автосервис.ЭтоБесплатный(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ДанныеЗаполнения,
			"ВидРемонта",
			Истина));
	
	ДополнительныеСвойства.ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	ДополнительныеСвойства.Вставить("ОснованиеБесплатныйЗаказНаряд", ЭтоБесплатныйЗаказНаряд);
	ЗаполнитьТоварыНаОснованииДокументаОснования(ДанныеЗаполнения);
	
	Если ЭтоБесплатныйЗаказНаряд Тогда
		
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Документы.ВозвратОтПокупателя.КонтрагентПриИзменении(ЭтотОбъект);
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаряд()

// Производит заполнение объекта на основании документа "Ввод остатков товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВводОстатковТоваров(ДанныеЗаполнения,
		ТекстЗаполнения = "",
		СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ВводОстатковТоваровПереданныхНаКомиссию Тогда
		ХозОперация = Справочники.ХозОперации.ВозвратТоваровОтПокупателяКомиссия;
		Товары.Очистить();
		Документы.ВозвратОтПокупателя.ЗаполнитьДокументНаОснованииПоОперацииКомиссии(ЭтотОбъект, ДанныеЗаполнения);
	Иначе
		ЗаполнитьТоварыНаОснованииДокументаОснования(ДанныеЗаполнения);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ВводОстатковТоваров()

// Производит заполнение объекта на основании документа "Инвентаризация"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Инвентаризация(ДанныеЗаполнения,
		ТекстЗаполнения = "",
		СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ИнвентаризацияТоваровОтданныхНаКомиссию Тогда
		ХозОперация = Справочники.ХозОперации.ВозвратТоваровОтПокупателяКомиссия;
		Товары.Очистить();
		
		ПараметрыДействия = Документы.ЗаказПокупателя.ПолучитьПараметрыДействия(
			ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия
		);
		ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПартииТоваровОтданные.Номенклатура,
		|	ПартииТоваровОтданные.ХарактеристикаНоменклатуры,
		|	ПартииТоваровОтданные.ДокументПередачи КАК ДокументПродажи,
		|	ПартииТоваровОтданные.Партия,
		|	СУММА(ПартииТоваровОтданные.Количество) КАК Количество,
		|	СУММА(ПартииТоваровОтданные.Сумма) КАК Сумма,
		|	СУММА(ПартииТоваровОтданные.СуммаУпр) КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.ПартииТоваровОтданные КАК ПартииТоваровОтданные
		|ГДЕ
		|	ПартииТоваровОтданные.Регистратор = &Регистратор
		|	И ПартииТоваровОтданные.ВидДвижения = &ВидДвижения
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваровОтданные.ХарактеристикаНоменклатуры,
		|	ПартииТоваровОтданные.Номенклатура,
		|	ПартииТоваровОтданные.ДокументПередачи,
		|	ПартииТоваровОтданные.Партия";
		
		Запрос.УстановитьПараметр("Регистратор" , ДанныеЗаполнения);
		Запрос.УстановитьПараметр("ВидДвижения" , ВидДвиженияНакопления.Приход);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			Документы.ВозвратОтПокупателя.ТоварыНоменклатураПриИзменении(
				ЭтотОбъект,
				НоваяСтрока,
				ДополнительныеСвойства.ПараметрыДействия
			);
			НоваяСтрока.СтавкаНДС = Выборка.Номенклатура.СтавкаНДС;
			
			Если ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
				НоваяСтрока.СуммаВсего = Выборка.Сумма;
			ИначеЕсли ВалютаДокумента = Константы.ВалютаУправленческогоУчетаКомпании.Получить() Тогда
				НоваяСтрока.СуммаВсего = Выборка.СуммаУпр;
			Иначе
				НоваяСтрока.СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					Выборка.СуммаУпр,
					Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
					ТекущаяДатаСеанса(),
					ВалютаДокумента,
					КурсДокумента
				);
			КонецЕсли;
			
			Документы.ВозвратОтПокупателя.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект, НоваяСтрока,
				ДополнительныеСвойства.ПараметрыДействия);
		КонецЦикла;
		
		// Рассчет скидок
		ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
		СкидкиНаценкиСервер.УстановитьСкидкиНаценки(ЭтотОбъект, ПараметрыДействия);
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Ввод на основании инвентаризации разрешен только для хоз. операции ""Инвентаризация товаров отданных на комиссию"".'"); // BSLLS:LineLength-off
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Инвентаризация()

// Производит заполнение объекта на основании документа "Закрытие смены"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗакрытиеСмены(ДанныеЗаполнения,
		ТекстЗаполнения = "",
		СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Товары.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПродажиОбороты.Номенклатура,
	|	ПродажиОбороты.ХарактеристикаНоменклатуры,
	|	ПродажиОбороты.Партия,
	|	ПродажиОбороты.ГТД,
	|	СУММА(ПродажиОбороты.КоличествоОборот) КАК КоличествоОборот
	|ПОМЕСТИТЬ ТаблицаОборотов
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(, &НаМомент, Регистратор, Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)) КАК ПродажиОбороты
	|ГДЕ
	|	ПродажиОбороты.Регистратор = &ДокументПередачи
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажиОбороты.Номенклатура,
	|	ПродажиОбороты.ХарактеристикаНоменклатуры,
	|	ПродажиОбороты.Партия,
	|	ПродажиОбороты.ГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОборотов.Номенклатура,
	|	ТаблицаОборотов.ХарактеристикаНоменклатуры,
	|	ТаблицаОборотов.Партия,
	|	ТаблицаОборотов.ГТД
	|ИЗ
	|	ТаблицаОборотов КАК ТаблицаОборотов
	|ГДЕ
	|	ТаблицаОборотов.КоличествоОборот <> 0";
	Запрос.УстановитьПараметр("НаМомент", ?(Ссылка.Пустая(), Дата, Новый Граница(МоментВремени(), ВидГраницы.Исключая)));
	Запрос.УстановитьПараметр("ДокументПередачи", ДанныеЗаполнения);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ДокументПродажи = ДанныеЗаполнения;
		Документы.ВозвратОтПокупателя.ТоварыНоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока);
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗакрытиеСмены()

#КонецОбласти
// АПК:299-вкл

#Область ФормированиеДвиженийДокумента

Процедура ОбработкаПроведенияНакопленияПоКарточкамКонтрагентов()
	
	Если НЕ ЗначениеЗаполнено(Карточка) ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратОтПокупателяТовары.Ссылка.Карточка,
	|	ВозвратОтПокупателяТовары.Ссылка.Контрагент,
	|	ВозвратОтПокупателяТовары.Ссылка.Дата КАК ПериодНакопления,
	|	СУММА(-ВозвратОтПокупателяТовары.Количество) КАК КоличествоНоменклатуры,
	|	СУММА(-ВозвратОтПокупателяТовары.СуммаВсего) КАК Сумма,
	|	СУММА(0) КАК КоличествоЧеков
	|ИЗ
	|	Документ.ВозвратОтПокупателя.Товары КАК ВозвратОтПокупателяТовары
	|ГДЕ
	|	ВозвратОтПокупателяТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратОтПокупателяТовары.Ссылка.Карточка,
	|	ВозвратОтПокупателяТовары.Ссылка.Дата,
	|	ВозвратОтПокупателяТовары.Ссылка.Контрагент";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	НаборНакоплениеСумм = Движения.НакопленияПоКарточкамКонтрагентов;
	НаборНакоплениеСумм.ДокументСсылка   = Ссылка;
	НаборНакоплениеСумм.РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	НаборНакоплениеСумм.ВыполнитьДвижения();
	
КонецПроцедуры

// возвращает выборку по шапке
//
// Параметры:
//  ДокументСсылка - Документ.Ссылка - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Выборка - возвращает выборку по шапке.
//
Функция ПолучитьШапкуДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СУММА(ВозвратОтПокупателяТовары.СуммаВсего) КАК СуммаВсего
	|ПОМЕСТИТЬ ДокТовары
	|ИЗ
	|	Документ.ВозвратОтПокупателя.Товары КАК ВозвратОтПокупателяТовары
	|ГДЕ
	|	ВозвратОтПокупателяТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ТипЦен КАК ТипЦен,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.Организация КАК Организация,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Док.Проект КАК Проект,
	|	Док.СкладКомпании КАК СкладКомпании,
	|	Док.СкладКомпании.Розничный КАК СкладКомпанииРозничный,
	|	Док.СкладКомпании.ТипЦенРозничнойТорговли КАК СкладКомпанииТипЦенРозничнойТорговли,
	|	Док.Контрагент КАК Контрагент,
	|	Док.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Док.ДокументОснование КАК ДокументОснование,
	|	Док.ТипЦен.ЦенаВключаетНДС КАК ТипЦенЦенаВключаетНДС,
	|	ЕСТЬNULL(ДокТовары.СуммаВсего, 0) КАК СуммаВсего,
	|	ВЫБОР
	|		КОГДА Док.ДокументОснование ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(Док.ДокументОснование КАК Документ.ЗаказНаряд).ВидРемонта.ТипРемонта <> ЗНАЧЕНИЕ(Перечисление.ТипыРемонта.Платный)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоБесплатныйЗаказНаряд
	|ИЗ
	|	Документ.ВозвратОтПокупателя КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокТовары КАК ДокТовары
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Док.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции // ПолучитьШапкуДокумента()

// получаем таблицу товаров которые надо оприходовать на остатки
//
// Возвращаемое значение:
//  ТаблицаТоваров - таблица значений.
//
Функция ПолучитьТаблицуТоваров()
	
	// Нам фактически надо сформировать таблицу товаров которые были проданы, что бы их заново оприходовать.
	// все из-за автоматического списания характеристик.
	ЗапросСписание = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиТоваровКомпании.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваровКомпании.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ОстаткиТоваровКомпании.Регистратор КАК ДокументПродажи,
	|	ОстаткиТоваровКомпании.Количество КАК Количество
	|ИЗ
	|	РегистрНакопления.ОстаткиТоваровКомпании КАК ОстаткиТоваровКомпании
	|ГДЕ
	|	ОстаткиТоваровКомпании.Регистратор В (&Регистраторы)
	|	И ОстаткиТоваровКомпании.Номенклатура В (&Номенклатура)
	|	И ОстаткиТоваровКомпании.ВидДвижения = &ВидДвижения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОстаткиТоваровКомпании.НомерСтроки УБЫВ");
	ЗапросСписание.УстановитьПараметр("Регистраторы", Товары.ВыгрузитьКолонку("ДокументПродажи"));
	ЗапросСписание.УстановитьПараметр("Номенклатура", Товары.ВыгрузитьКолонку("Номенклатура"));
	ЗапросСписание.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
	
	// наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы",
		"РегистрНакопления", "ОстаткиТоваровКомпании"
	);
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, Дата));
	ЗначенияБлокировки.Вставить("СкладКомпании", СкладКомпании);
	СтруктураПараметровБлокировки.Вставить("ИсточникДанных", Товары);
	ОписаниеИсточника = Новый Соответствие;
	ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
	ОбработкаСобытийДокументаСервер
	.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	
	ТаблицаСписания = ЗапросСписание.Выполнить().Выгрузить();
	// получим таблицу документа
	ТаблицаДокумента = Товары.Выгрузить();
	ТаблицаДокумента.Свернуть(
		"Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,ДокументПродажи",
		"КоличествоБазовое,ЦенаРозничная"
	);
	ТаблицаДокумента.Сортировать("Номенклатура Возр,ХарактеристикаНоменклатуры Убыв");
	
	// создадим и заполним таблицу товаров
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("СкладКомпании");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Резерв");
	ТаблицаТоваров.Колонки.Добавить("ЦенаРозничная");
	
	ТаблицаРучныхХарактеристик = ОбработкаТабличнойЧастиТовары.ПолучитьНоменклатуруСРучнымСписаниемХарактеристик(Ссылка);
	Розничный = СкладКомпании.Розничный;
		
	Для Каждого СтрокаТовар Из ТаблицаДокумента Цикл
		Если СтрокаТовар.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураОтбора = Новый Структура("Номенклатура,ДокументПродажи",
			СтрокаТовар.Номенклатура,
			СтрокаТовар.ДокументПродажи
		);
		Если ЗначениеЗаполнено(СтрокаТовар.ХарактеристикаНоменклатуры)
			ИЛИ (ТаблицаРучныхХарактеристик <> Неопределено
				И ТаблицаРучныхХарактеристик.Найти(СтрокаТовар.Номенклатура, "Номенклатура") <> Неопределено) Тогда
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаТовар.ХарактеристикаНоменклатуры);
		КонецЕсли;
		МассивНайденныхСтрок = ТаблицаСписания.НайтиСтроки(СтруктураОтбора);
		НадоВернуть = СтрокаТовар.КоличествоБазовое;
		Для Сч = 0 По МассивНайденныхСтрок.ВГраница() Цикл
			
			ТекСтрока = МассивНайденныхСтрок[Сч];
			КоличествоКПоступлению = Мин(НадоВернуть, ТекСтрока.Количество);
			
			НоваяСтрока = ТаблицаТоваров.Добавить();
			НоваяСтрока.Номенклатура               = ТекСтрока.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрока.ХарактеристикаНоменклатуры;
			НоваяСтрока.СкладКомпании              = СкладКомпании;
			НоваяСтрока.Количество                 = КоличествоКПоступлению;
			НоваяСтрока.Резерв                     = 0;
			Если Розничный Тогда
				НоваяСтрока.ЦенаРозничная = СтрокаТовар.ЦенаРозничная;
			Иначе
				НоваяСтрока.ЦенаРозничная = 0;
			КонецЕсли;
			
			Если ТекСтрока.Количество > НадоВернуть Тогда
				ТекСтрока.Количество = ТекСтрока.Количество - НадоВернуть;
			Иначе
				// Удалим ненужную строку
				ТаблицаСписания.Удалить(ТекСтрока);
			КонецЕсли;
			
			НадоВернуть = НадоВернуть - КоличествоКПоступлению;
			Если НадоВернуть <= 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// Может еще что-то осталось
		Если НадоВернуть > 0 Тогда
			НоваяСтрока = ТаблицаТоваров.Добавить();
			НоваяСтрока.Номенклатура               = СтрокаТовар.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТовар.ХарактеристикаНоменклатуры;
			НоваяСтрока.СкладКомпании              = СкладКомпании;
			НоваяСтрока.Количество                 = НадоВернуть;
			НоваяСтрока.Резерв                     = 0;
			Если Розничный Тогда
				НоваяСтрока.ЦенаРозничная  = СтрокаТовар.ЦенаРозничная;
			Иначе
				НоваяСтрока.ЦенаРозничная  = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТаблицаТоваров.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СкладКомпании,ЦенаРозничная", "Количество, Резерв");
	
	Возврат ТаблицаТоваров;
	
КонецФункции // ПолучитьТаблицуТоваров()

// формирует движения документа по партионным регистрам
//
// Параметры:
//  Режим           - режим проведения (оперативный/неоперативный)
//  ДокументСсылка  - ссылка на документ который надо допровести по партиям.
//
// Возвращаемое значение:
//  Возвращает Истина - все ОК, ложь - чего-то не так.
//
Функция ПровестиПоПартиям(Режим, ДокументСсылка) Экспорт
	
	Отказ = Ложь;
	
	// получим шапку документа
	ШапкаДокумента = ПолучитьШапкуДокумента(ДокументСсылка);
	БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
	
	// Проверим, если подразделение проводиться по партиям "отложенно", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям = Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента = ШапкаДокумента;
	Если НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
		// Доходы и расходы на себестоимость не оприходованных партий
		Если ШапкаДокумента.ХозОперация <> Справочники.ХозОперации.ВозвратТоваровОтПокупателяКомиссия Тогда
			НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.Подразделение = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте = Ложь;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов =
				Справочники.СтатьиДоходовИРасходов.СебестоимостьНеоприходованныхПартий;
			НаборЗаписейДоходыИРасходы.Расход = ШапкаДокумента.СуммаВсего;
			НаборЗаписейДоходыИРасходы.ШапкаДокумента = ШапкаДокумента;
			Если НЕ НаборЗаписейДоходыИРасходы.Приход() Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		Возврат НЕ Отказ;
	КонецЕсли;
	
	Если ШапкаДокумента.ХозОперация <> Справочники.ХозОперации.ВозвратТоваровОтПокупателяКомиссия Тогда
		// сформируем таблицу товарного состава
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ВозвратОтПокупателяТовары.Номенклатура КАК Номенклатура,
		|	ВозвратОтПокупателяТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВозвратОтПокупателяТовары.ДокументПродажи КАК ДокументПродажи,
		|	ВозвратОтПокупателяТовары.Партия КАК Партия,
		|	ВозвратОтПокупателяТовары.ГТД КАК ГТД,
		|	ВозвратОтПокупателяТовары.СтавкаНДС,
		|	СУММА(ВозвратОтПокупателяТовары.КоличествоБазовое) КАК Количество,
		|	ВозвратОтПокупателяТовары.Себестоимость
		|ИЗ
		|	Документ.ВозвратОтПокупателя.Товары КАК ВозвратОтПокупателяТовары
		|ГДЕ
		|	ВозвратОтПокупателяТовары.Ссылка = &Ссылка
		|	И ВозвратОтПокупателяТовары.Номенклатура.ВидНоменклатуры <> &Услуга
		|
		|СГРУППИРОВАТЬ ПО
		|	ВозвратОтПокупателяТовары.Номенклатура,
		|	ВозвратОтПокупателяТовары.ХарактеристикаНоменклатуры,
		|	ВозвратОтПокупателяТовары.ДокументПродажи,
		|	ВозвратОтПокупателяТовары.Партия,
		|	ВозвратОтПокупателяТовары.ГТД,
		|	ВозвратОтПокупателяТовары.СтавкаНДС,
		|	ВозвратОтПокупателяТовары.Себестоимость
		|УПОРЯДОЧИТЬ ПО
		|	ВозвратОтПокупателяТовары.Партия УБЫВ,
		|	ВозвратОтПокупателяТовары.ГТД УБЫВ
		|");
		Запрос.УстановитьПараметр("Ссылка", ШапкаДокумента.Ссылка);
		Запрос.УстановитьПараметр("Услуга", Перечисления.ВидыНоменклатуры.Услуга);
		
		// вернем партии
		НаборЗаписейПартии = Движения.ПартииТоваровКомпании;
		НаборЗаписейПартии.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейПартии.СкладКомпании = ШапкаДокумента.СкладКомпании;
		НаборЗаписейПартии.Организация = ШапкаДокумента.Организация;
		НаборЗаписейПартии.РезультатЗапросаПоТоварам = Запрос.Выполнить().Выгрузить();
		НаборЗаписейПартии.ПоБазовомуКоличеству = Истина;
		НаборЗаписейПартии.ИмяРеквизитаДокумент = "ДокументПродажи";
		НаборЗаписейПартии.Сторно = Истина;
		НаборЗаписейПартии.ШапкаДокумента = ШапкаДокумента;
		Если НЕ НаборЗаписейПартии.Расход() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		// Если среди возвращенного товара есть комиссионный, то отсторнируем реализованные товары.
		НаборЗаписейРеализованныеТовары = Движения.РеализованныеТовары;
		НаборЗаписейРеализованныеТовары.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейРеализованныеТовары.Сторно = Истина;
		НаборЗаписейРеализованныеТовары.ПоБазовомуКоличеству = Истина;
		НаборЗаписейРеализованныеТовары.ШапкаДокумента = ШапкаДокумента;
		Если НЕ НаборЗаписейРеализованныеТовары.Приход() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		// вернем бонусные баллы
		НаборЗаписейБонусныхБаллов = Движения.БонусныеБаллы;
		НаборЗаписейБонусныхБаллов.ДокДата     = ШапкаДокумента.Дата;
		НаборЗаписейБонусныхБаллов.Регистратор = ШапкаДокумента.Ссылка;
		НаборЗаписейБонусныхБаллов.Сторно      = Истина;
		НаборЗаписейБонусныхБаллов.ХозОперация = ШапкаДокумента.ХозОперация;
		Если НЕ НаборЗаписейБонусныхБаллов.Расход() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		// продажи
		Если НЕ Отказ И Не ШапкаДокумента.ЭтоБесплатныйЗаказНаряд Тогда
			НаборЗаписейПродажи = Движения.Продажи;
			НаборЗаписейПродажи.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейПродажи.СкладКомпании = ШапкаДокумента.СкладКомпании;
			НаборЗаписейПродажи.Сторно = Истина;
			НаборЗаписейПродажи.ПоБазовомуКоличеству = Истина;
			НаборЗаписейПродажи.Покупатель = ШапкаДокумента.Контрагент;
			НаборЗаписейПродажи.ДоговорВзаиморасчетов = ШапкаДокумента.ДоговорВзаиморасчетов;
			НаборЗаписейПродажи.ПодразделениеКомпании = ШапкаДокумента.ПодразделениеКомпании;
			НаборЗаписейПродажи.Комиссия = 
				(ШапкаДокумента.ХозОперация = Справочники.ХозОперации.ВозвратТоваровОтПокупателяКомиссия);
			НаборЗаписейПродажи.ШапкаДокумента = ШапкаДокумента;
			НаборЗаписейПродажи.ИмяРеквизитаДокумент = "Партия";

			Если НЕ НаборЗаписейПродажи.Приход() Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// товар возвращает комиссионер. отсторнируем передачу на комиссию
		НаборЗаписейПартииОтданные = Движения.ПартииТоваровОтданные;
		НаборЗаписейПартииОтданные.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейПартииОтданные.Сторно = Истина;
		НаборЗаписейПартииОтданные.Контрагент = ШапкаДокумента.Контрагент;
		НаборЗаписейПартииОтданные.ДоговорВзаиморасчетов = ШапкаДокумента.ДоговорВзаиморасчетов;
		НаборЗаписейПартииОтданные.ШапкаДокумента = ШапкаДокумента;
		НаборЗаписейПартииОтданные.ПоБазовомуКоличеству = Истина;
		Если НЕ НаборЗаписейПартииОтданные.Приход() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			НаборЗаписейПартииОтданные.Записать();
		КонецЕсли;
		// Вернем партии товаров компании
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ПартииТоваровОтданные.Номенклатура КАК Номенклатура,
		|	ПартииТоваровОтданные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ПартииТоваровОтданные.ДокументПередачи КАК ДокументПродажи,
		|	ПартииТоваровОтданные.Партия КАК Партия,
		|	ПартииТоваровОтданные.ГТД КАК ГТД,
		|	-СУММА(ПартииТоваровОтданные.Количество) КАК Количество,
		|	-СУММА(ПартииТоваровОтданные.СуммаСебестоимостиУпр) КАК Себестоимость
		|ИЗ
		|	РегистрНакопления.ПартииТоваровОтданные КАК ПартииТоваровОтданные
		|ГДЕ
		|	ПартииТоваровОтданные.Регистратор = &Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваровОтданные.Номенклатура,
		|	ПартииТоваровОтданные.ХарактеристикаНоменклатуры,
		|	ПартииТоваровОтданные.ДокументПередачи,
		|	ПартииТоваровОтданные.Партия,
		|	ПартииТоваровОтданные.ГТД,
		|	ПартииТоваровОтданные.СуммаСебестоимостиУпр");
		Запрос.УстановитьПараметр("Регистратор", ШапкаДокумента.Ссылка);
		НаборЗаписейПартии = Движения.ПартииТоваровКомпании;
		НаборЗаписейПартии.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейПартии.СкладКомпании = ШапкаДокумента.СкладКомпании;
		НаборЗаписейПартии.Организация = ШапкаДокумента.Организация;
		НаборЗаписейПартии.РезультатЗапросаПоТоварам = Запрос.Выполнить().Выгрузить();
		НаборЗаписейПартии.ПоБазовомуКоличеству = Ложь;
		НаборЗаписейПартии.ШапкаДокумента = ШапкаДокумента;
		НаборЗаписейПартии.ИмяРеквизитаДокумент = "ДокументПродажи";
		НаборЗаписейПартии.Сторно = Истина;
		Если НЕ НаборЗаписейПартии.Расход() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		// Возможно, что возврат производится на склад, на котором подразделение не совпадает с подразделением договора.
		ПодразделениеСклад = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(
			ШапкаДокумента.СкладКомпании.ПодразделениеКомпании,
			ШапкаДокумента.Дата
		);
		ПодразделениеДоговор = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(
			ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании,
			ШапкаДокумента.Дата
		);
		БалансовыеПодразделенияНеРавны = (ПодразделениеДоговор <> ПодразделениеСклад);
		
		// получим себестоимость
		ПартииТоваровКомпании = Движения.ПартииТоваровКомпании;
		СебестоимостьПартий = -ПартииТоваровКомпании.Итог("СуммаУпр");
		
		ПартииТоваровОтданные = Движения.ПартииТоваровОтданные;
		СебестоимостьПартийОтданные = - ПартииТоваровОтданные.Итог("СуммаСебестоимостиУпр");
		Если БалансВедетсяПоПодразделениям И БалансовыеПодразделенияНеРавны Тогда
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.Подразделение = ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.ВУпрВалюте = Истина;
			НаборЗаписейДиР.Доход = СебестоимостьПартий;
			Если НЕ НаборЗаписейДиР.Приход() Тогда
				Отказ = Истина;
			КонецЕсли;
			
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.Подразделение = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.ВУпрВалюте = Истина;
			НаборЗаписейДиР.Доход = СебестоимостьПартийОтданные;
			Если НЕ НаборЗаписейДиР.Расход() Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ШапкаДокумента.ХозОперация <> Справочники.ХозОперации.ВозвратТоваровОтПокупателяКомиссия Тогда
		// доходы и расходы
		
		// посчитаем себестоимость возвращенных партий кроме комиссионных
		ПартииТоваровКомпании = Движения.ПартииТоваровКомпании;
		
		ТаблицаСписанийПартий = ПартииТоваровКомпании.Выгрузить();
		ТаблицаСписанийПартий.Свернуть("СтатусПартии", "СуммаУпр");
		СтруктураОтбора = Новый Структура("СтатусПартии", Перечисления.СтатусыПартий.ТоварПринятыйКомиссия);
		МассивНайденныхСтрок = ТаблицаСписанийПартий.НайтиСтроки(СтруктураОтбора);
		Для Сч = 0 По МассивНайденныхСтрок.ВГраница() Цикл
			ТаблицаСписанийПартий.Удалить(МассивНайденныхСтрок[Сч]);
		КонецЦикла;
		Себестоимость = - ТаблицаСписанийПартий.Итог("СуммаУпр");
		СуммаУслуг = 0;
		
		// Итоговая себестоимость товара
		НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект = ЭтотОбъект;
		Если БалансВедетсяПоПодразделениям Тогда
			НаборЗаписейДоходыИРасходы.Подразделение = ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
		КонецЕсли;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.Себестоимость;
		НаборЗаписейДоходыИРасходы.Расход                  = Себестоимость;
		НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
		Если НЕ НаборЗаписейДоходыИРасходы.Расход() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		// подготовим таблицу движений в разрезе подразделений комиссионных товаров
		РеализованныеТовары = Движения.РеализованныеТовары;
		ТаблицаСписанийПартийРеализованных = РеализованныеТовары.Выгрузить();
		ТаблицаСписанийПартийРеализованных.Свернуть("ДоговорВзаиморасчетов", "СуммаУпр");
		ТаблицаСписанийПартийРеализованных.Колонки.Добавить(
			"Подразделение",
			Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании")
		);
		
		Для Каждого СтрокаСписания Из ТаблицаСписанийПартийРеализованных Цикл
			Если БалансВедетсяПоПодразделениям Тогда
				СтрокаСписания.Подразделение = СтрокаСписания.ДоговорВзаиморасчетов.ПодразделениеКомпании;
			Иначе
				СтрокаСписания.Подразделение = ПодразделениеКомпании;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаСписанийПартийРеализованных.Свернуть("Подразделение", "СуммаУпр");
		
		Для Каждого СтрокаСписания Из ТаблицаСписанийПартийРеализованных Цикл
			НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.Подразделение          = СтрокаСписания.Подразделение;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.Себестоимость;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
			НаборЗаписейДоходыИРасходы.Расход                 = -СтрокаСписания.СуммаУпр;	
			НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
			Если НЕ НаборЗаписейДоходыИРасходы.Расход() Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// посчитаем сумму услуг
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(РеализацияТоваровТовары.СуммаВсего) КАК СуммаУслуг
		|ИЗ
		|	Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
		|ГДЕ
		|	РеализацияТоваровТовары.Ссылка = &ТекДок
		|	И РеализацияТоваровТовары.Номенклатура.ВидНоменклатуры = &Услуга");
		Запрос.УстановитьПараметр("ТекДок", ШапкаДокумента.Ссылка);
		Запрос.УстановитьПараметр("Услуга", Перечисления.ВидыНоменклатуры.Услуга);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СуммаУслуг = ?(Выборка.СуммаУслуг = NULL, 0, Выборка.СуммаУслуг);
		КонецЕсли;
		
		// Итог СуммаВсего кроме услуг
		СуммаТоваров = ШапкаДокумента.СуммаВсего - СуммаУслуг;
		НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект = ЭтотОбъект;
		Если БалансВедетсяПоПодразделениям Тогда
			НаборЗаписейДоходыИРасходы.Подразделение = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
		КонецЕсли;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Ложь;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов =
			Справочники.СтатьиДоходовИРасходов.НачислениеДебиторскойЗадолженностиПоТовару;
		НаборЗаписейДоходыИРасходы.Доход                  = СуммаТоваров;
		НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
		Если НЕ НаборЗаписейДоходыИРасходы.Расход() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		// СуммаВсего по услугам
		НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект = ЭтотОбъект;
		Если БалансВедетсяПоПодразделениям Тогда
			НаборЗаписейДоходыИРасходы.Подразделение = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
		КонецЕсли; 
		НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Ложь;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов =
			Справочники.СтатьиДоходовИРасходов.НачислениеДебиторскойЗадолженностиПоУслугам;
		НаборЗаписейДоходыИРасходы.Доход                  = СуммаУслуг;
		НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
		Если НЕ НаборЗаписейДоходыИРасходы.Расход() Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// двигаем границу последовательности партий
	Если Ссылка <> ДокументСсылка Тогда
		
		РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоПартиямПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		
	КонецЕсли;
	
	РаботаСГраницами.СдвинутьГраницуПартий(ДокументСсылка, ДополнительныеСвойства, Движения);
	
	Возврат НЕ Отказ;
	
КонецФункции // ПровестиПоПартиям()

// Проверяем, чтобы количество в документе не превышало количество в документе основании
// и других уже проведенных возвратах
// функция вызывается после всех движений, поэтому смотрим на отрицательные остатки.
//
Функция КоличествоПоДокументуОснованиюНеКорректно()
	
	Результат = Ложь;
	
	// Проверяем только для возвратов на основании реализации
	Если НЕ ЗначениеЗаполнено(ДокументОснование)
		ИЛИ НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратОтПокупателя.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ УжеВведенныеВозвраты
		|ИЗ
		|	Документ.ВозвратОтПокупателя КАК ВозвратОтПокупателя
		|ГДЕ
		|	ВозвратОтПокупателя.Проведен
		|	И НЕ ВозвратОтПокупателя.ПометкаУдаления
		|	И ВозвратОтПокупателя.ДокументОснование = &Регистратор
		|	И Не ВозвратОтПокупателя.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиТоваровКомпании.Номенклатура КАК Номенклатура,
		|	ОстаткиТоваровКомпании.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЕСТЬNULL(-ОстаткиТоваровКомпании.Количество, 0) КАК Количество
		|ПОМЕСТИТЬ ОстаткиИзРегистра
		|ИЗ
		|	УжеВведенныеВозвраты КАК УжеВведенныеВозвраты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровКомпании КАК ОстаткиТоваровКомпании
		|		ПО УжеВведенныеВозвраты.Ссылка = ОстаткиТоваровКомпании.Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОстаткиТоваровКомпании.Номенклатура,
		|	ОстаткиТоваровКомпании.ХарактеристикаНоменклатуры,
		|	СУММА(ЕСТЬNULL(ОстаткиТоваровКомпании.Количество, 0))
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваровКомпании КАК ОстаткиТоваровКомпании
		|ГДЕ
		|	ОстаткиТоваровКомпании.Регистратор = &Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваровКомпании.Номенклатура,
		|	ОстаткиТоваровКомпании.ХарактеристикаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиИзРегистра.Номенклатура КАК Номенклатура,
		|	ОстаткиИзРегистра.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СУММА(ОстаткиИзРегистра.Количество) КАК Количество
		|ИЗ
		|	ОстаткиИзРегистра КАК ОстаткиИзРегистра
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиИзРегистра.Номенклатура,
		|	ОстаткиИзРегистра.ХарактеристикаНоменклатуры";
	Запрос.УстановитьПараметр("Регистратор", ДокументОснование);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
	
	Для Каждого Строка Из Товары Цикл
		
		Выборка.Сбросить();
		СтруктураПоиска.Номенклатура = Строка.Номенклатура;
		СтруктураПоиска.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
		
		ТоварНайден = Выборка.НайтиСледующий(СтруктураПоиска);
		
		Если ТоварНайден Тогда
			
			КоличествоОстаток = Выборка.Количество - Строка.Количество;
			
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Строка.НомерСтроки, "Номенклатура");

			Если КоличествоОстаток < 0 Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = '[%1] %2. Товар из строки %3. Количество к возврату: %4. Возвращаемое количество: %5. Превышение на %6.'"), // BSLLS:LineLength-off
						Строка.Номенклатура.Артикул,
						Строка.Номенклатура.Наименование,
						Строка.НомерСтроки,
						Выборка.Количество,
						Строка.Количество,
						- КоличествоОстаток
					),
					,
					ПутьКТабличнойЧасти,
					,
					Результат
				);
				
			КонецЕсли;
			
		Иначе
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = '[%1] %2. Товар из строки %3 не найден в документе основании %4.'"),
					Строка.Номенклатура.Артикул,
					Строка.Номенклатура.Наименование,
					Строка.НомерСтроки,
					ДокументОснование
				),
				,
				ПутьКТабличнойЧасти,
				,
				Результат
			);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// Установим параметры проверки документа
ДополнительныеСвойства.Вставить("ТоварыЗапретАвтоСписанияХарактеристик", Истина);

#КонецОбласти

#КонецЕсли 