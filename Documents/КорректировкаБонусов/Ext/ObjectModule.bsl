// Модуль объекта документа "Корректировка бонусов"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ПравоПользователя("ПроведениеНезаполненныхДокументов", ЭтотОбъект) Тогда
		Если НЕ ЗначениеЗаполнено(БонусыКНачислению) И НЕ ЗначениеЗаполнено(БонусыКСписанию) Тогда
			ПроверяемыеРеквизиты.Добавить("БонусыКНачислению");
			ПроверяемыеРеквизиты.Добавить("БонусыКСписанию");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// выполним движения приход
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаБонусовБонусыКНачислению.Ссылка КАК Регистратор,
	|	КорректировкаБонусовБонусыКНачислению.Ссылка.Дата КАК Период,
	|	КорректировкаБонусовБонусыКНачислению.Карточка КАК БонуснаяКарта,
	|	КорректировкаБонусовБонусыКНачислению.ДатаСписания КАК ДатаСписанияБонусов,
	|	ИСТИНА КАК АктивностьБонусов,
	|	КорректировкаБонусовБонусыКНачислению.Количество,
	|	КорректировкаБонусовБонусыКНачислению.Ссылка.ХозОперация КАК ХозОперация,
	|	КорректировкаБонусовБонусыКНачислению.Ссылка.БонуснаяПрограмма КАК БонуснаяПрограмма,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения
	|ИЗ
	|	Документ.КорректировкаБонусов.БонусыКНачислению КАК КорректировкаБонусовБонусыКНачислению
	|ГДЕ
	|	КорректировкаБонусовБонусыКНачислению.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаБонусовБонусыКНачислению.Ссылка,
	|	КорректировкаБонусовБонусыКНачислению.Ссылка.Дата,
	|	КорректировкаБонусовБонусыКНачислению.Карточка,
	|	КорректировкаБонусовБонусыКНачислению.ДатаСписания,
	|	ЛОЖЬ,
	|	КорректировкаБонусовБонусыКНачислению.КоличествоКНачислению,
	|	КорректировкаБонусовБонусыКНачислению.Ссылка.ХозОперация,
	|	КорректировкаБонусовБонусыКНачислению.Ссылка.БонуснаяПрограмма,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|ИЗ
	|	Документ.КорректировкаБонусов.БонусыКНачислению КАК КорректировкаБонусовБонусыКНачислению
	|ГДЕ
	|	КорректировкаБонусовБонусыКНачислению.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Набор = Движения.БонусныеБаллы;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
	КонецЦикла;
	
	// выполним расходные движения
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаБонусовБонусыКСписанию.Ссылка КАК Ссылка,
	|	КорректировкаБонусовБонусыКСписанию.Ссылка.Дата КАК Дата,
	|	КорректировкаБонусовБонусыКСписанию.Ссылка.ХозОперация КАК ХозОперация,
	|	КорректировкаБонусовБонусыКСписанию.Ссылка.БонуснаяПрограмма КАК БонуснаяПрограмма,
	|	КорректировкаБонусовБонусыКСписанию.Карточка КАК Карточка,
	|	КорректировкаБонусовБонусыКСписанию.ДатаСписания КАК ДатаСписания,
	|	КорректировкаБонусовБонусыКСписанию.Количество КАК Количество,
	|	ИСТИНА КАК АктивностьБонусов
	|ПОМЕСТИТЬ ДокТаб
	|ИЗ
	|	Документ.КорректировкаБонусов.БонусыКСписанию КАК КорректировкаБонусовБонусыКСписанию
	|ГДЕ
	|	КорректировкаБонусовБонусыКСписанию.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаБонусовБонусыКСписанию.Ссылка,
	|	КорректировкаБонусовБонусыКСписанию.Ссылка.Дата,
	|	КорректировкаБонусовБонусыКСписанию.Ссылка.ХозОперация,
	|	КорректировкаБонусовБонусыКСписанию.Ссылка.БонуснаяПрограмма,
	|	КорректировкаБонусовБонусыКСписанию.Карточка,
	|	КорректировкаБонусовБонусыКСписанию.ДатаСписания,
	|	КорректировкаБонусовБонусыКСписанию.КоличествоКНачислению,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.КорректировкаБонусов.БонусыКСписанию КАК КорректировкаБонусовБонусыКСписанию
	|ГДЕ
	|	КорректировкаБонусовБонусыКСписанию.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокТаб.Ссылка КАК Регистратор,
	|	ДокТаб.Дата КАК Период,
	|	ДокТаб.ХозОперация КАК ХозОперация,
	|	ДокТаб.Карточка КАК БонуснаяКарта,
	|	ДокТаб.ДатаСписания КАК ДатаСписанияБонусов,
	|	ДокТаб.АктивностьБонусов КАК АктивностьБонусов,
	|	ДокТаб.Количество КАК Количество,
	|	ЕСТЬNULL(БонусныеБаллыОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ДокТаб.БонуснаяПрограмма КАК БонуснаяПрограмма
	|ИЗ
	|	ДокТаб КАК ДокТаб
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.БонусныеБаллы.Остатки(
	|				&Момент,
	|				(БонуснаяКарта, ДатаСписанияБонусов, АктивностьБонусов) В
	|					(ВЫБРАТЬ
	|						ДокТаб.Карточка,
	|						ДокТаб.ДатаСписания,
	|						ДокТаб.АктивностьБонусов
	|					ИЗ
	|						ДокТаб КАК ДокТаб)) КАК БонусныеБаллыОстатки
	|		ПО ДокТаб.Карточка = БонусныеБаллыОстатки.БонуснаяКарта
	|			И ДокТаб.ДатаСписания = БонусныеБаллыОстатки.ДатаСписанияБонусов
	|			И ДокТаб.АктивностьБонусов = БонусныеБаллыОстатки.АктивностьБонусов";
	Запрос.УстановитьПараметр("Момент", МоментВремени());
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		// Наложим блокировку на считываемые данные
		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "БонусныеБаллы");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период"       , Новый Диапазон(, Дата));
		
		СтруктураПараметровБлокировки.Вставить("ИсточникДанных", РезультатЗапроса.Выгрузить());
		
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("БонуснаяКарта"       , "БонуснаяКарта");
		ОписаниеИсточника.Вставить("ДатаСписанияБонусов" , "ДатаСписанияБонусов");
		ОписаниеИсточника.Вставить("АктивностьБонусов",    "АктивностьБонусов");
		
		ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
		
		// списание
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Количество <> 0 И (Выборка.Количество > Выборка.КоличествоОстаток) Тогда
				Если Выборка.АктивностьБонусов Тогда
					ТекстСообщения = НСтр("ru = 'Не хватает баллов в количестве %1'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Не хватает начисленных баллов в количестве %1'");
				КонецЕсли;
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(ТекстСообщения,Выборка.Количество-Выборка.КоличествоОстаток),
					ЭтотОбъект,,,
					Отказ
				);
			КонецЕсли;
			
			Если Отказ Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
