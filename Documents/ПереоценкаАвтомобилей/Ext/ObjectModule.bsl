// Модуль документа ПереоценкаАвтомобилей

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА) Экспорт
	
	Если ОбработкаСобытийДокументаСервер.ВводСПустымОснованием(ДанныеЗаполнения) Тогда
		ТипЦен          = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенЗакупкиАвтомобилей", ЭтотОбъект);
		ВалютаДокумента = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен, , Ложь);
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ОбработкаЗаполнения_Структура(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ПроверитьКорректностьТоваровКомиссионныхДокументов(
		ЭтотОбъект,
		Отказ,
		"Автомобили",
		"Автомобиль",
		Ложь
	);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка корректности типа цен.
	Если ТипЦен.Рассчитывается Тогда
		
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Использование расчетных типов цен запрещено.'"), ЭтотОбъект);
		
	КонецЕсли;
	
	Если (ХозОперация = Справочники.ХозОперации.ПереоценкаАвтомобилейОтданныхНаКомиссию) И (ЗначениеЗаполнено(СкладКомпании)) Тогда
		СкладКомпании = Неопределено;
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоОстаткамАвтомобилейПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ХозОперация = Справочники.ХозОперации.ПереоценкаАвтомобилейПринятыхНаКомиссию ИЛИ
		 ХозОперация = Справочники.ХозОперации.ПереоценкаАвтомобилейНаОтветственномХранении Тогда
		
		// переоцениваем регистр "ОстаткиАвтомобилей"
		НаборЗаписейОстаткиАвтомобилей = Движения.ОстаткиАвтомобилей;
		НаборЗаписейОстаткиАвтомобилей.СкладКомпании = СкладКомпании;
		Если ХозОперация = Справочники.ХозОперации.ПереоценкаАвтомобилейНаОтветственномХранении Тогда
			НаборЗаписейОстаткиАвтомобилей.СтатусПартии              = Перечисления.СтатусыПартий.ТоварОтветственноеХранение;
		Иначе
			НаборЗаписейОстаткиАвтомобилей.СтатусПартии              = Перечисления.СтатусыПартий.ТоварПринятыйКомиссия;
		КонецЕсли; 
		НаборЗаписейОстаткиАвтомобилей.СкладПолучатель               = Неопределено;
		НаборЗаписейОстаткиАвтомобилей.РезультатЗапросаПоАвтомобилям = Неопределено;
		НаборЗаписейОстаткиАвтомобилей.ДокументОбъект                = ЭтотОбъект;
		
		Отказ = НЕ НаборЗаписейОстаткиАвтомобилей.Переоценка() ИЛИ Отказ;
		
	ИначеЕсли ХозОперация = Справочники.ХозОперации.ПереоценкаАвтомобилейОтданныхНаКомиссию Тогда
		
		// переоцениваем регистр "АвтомобилиОтданные"
		НаборЗаписейАвтомобилиОтданные                               = Движения.АвтомобилиОтданные;
		НаборЗаписейАвтомобилиОтданные.ДокументОбъект                = ЭтотОбъект;
		НаборЗаписейАвтомобилиОтданные.Сторно                        = Ложь;
		НаборЗаписейАвтомобилиОтданные.РезультатЗапросаПоАвтомобилям = Неопределено;
		НаборЗаписейАвтомобилиОтданные.Контрагент                    = Контрагент;
		НаборЗаписейАвтомобилиОтданные.ДоговорВзаиморасчетов         = ДоговорВзаиморасчетов;
		Отказ = НЕ НаборЗаписейАвтомобилиОтданные.Переоценка() ИЛИ Отказ;
		
	КонецЕсли;
	
	// двигаем границу последовательности автомобилей
	ДвигаемГраницу = ХозОперация = Справочники.ХозОперации.ПереоценкаАвтомобилейПринятыхНаКомиссию
					ИЛИ ХозОперация = Справочники.ХозОперации.ПереоценкаАвтомобилейНаОтветственномХранении;
	
	Если ДвигаемГраницу 
		ИЛИ (ДополнительныеСвойства.Свойство("ДвиженияОстаткиАвтомобилейПередПроведением")
				И ЗначениеЗаполнено(ДополнительныеСвойства.ДвиженияОстаткиАвтомобилейПередПроведением)) Тогда
		
		// двигаем границу последовательности автомобилей
		РаботаСГраницами.СдвинутьГраницуОстатковАвтомобилей(Ссылка, ДополнительныеСвойства, Движения);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Поступление автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеАвтомобилей(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилейКомиссия Тогда
		ТекстСообщения = НСтр("ru='Документ переоценки возможно создать только на основании документа поступления на комиссию.'");
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Автомобили.Очистить();
	
	Для Каждого СтрокаЗаполнения Из ДанныеЗаполнения.Автомобили Цикл
	
		НоваяСтрока = Автомобили.Добавить();
		
		НоваяСтрока.Автомобиль = СтрокаЗаполнения.Автомобиль;
		НоваяСтрока.ДокументПередачи = ДанныеЗаполнения;
		НоваяСтрока.СтавкаНДС = СтрокаЗаполнения.СтавкаНДС;
		
		Документы.ПереоценкаАвтомобилей.АвтомобилиАвтомобильПриИзменении(ЭтотОбъект, НоваяСтрока);
	
	КонецЦикла;
	
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеАвтомобилей()

// Производит заполнение объекта по передаваемой структуре
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Структура(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ДокументОснование = Неопределено;
	ПараметрыДействия = Новый Структура;
	
	Если ДанныеЗаполнения.Свойство("Организация")
		И ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
		
		Организация = ДанныеЗаполнения.Организация;
		Документы.ПереоценкаАвтомобилей.ОрганизацияПриИзменении(ЭтотОбъект, ПараметрыДействия);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ПодразделениеКомпании")
		И ЗначениеЗаполнено(ДанныеЗаполнения.ПодразделениеКомпании) Тогда
		
		ПодразделениеКомпании = ДанныеЗаполнения.ПодразделениеКомпании;
		Документы.ПереоценкаАвтомобилей.ПодразделениеКомпанииПриИзменении(ЭтотОбъект, ПараметрыДействия);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("Контрагент")
		И ЗначениеЗаполнено(ДанныеЗаполнения.Контрагент) Тогда
		
		Контрагент = ДанныеЗаполнения.Контрагент;
		
	ИначеЕсли ДанныеЗаполнения.Свойство("ЗаказНаАвтомобиль") Тогда
		
		Контрагент = ДанныеЗаполнения.ЗаказНаАвтомобиль.Контрагент;
		
	КонецЕсли;
	
	Документы.ПереоценкаАвтомобилей.КонтрагентПриИзменении(ЭтотОбъект, ПараметрыДействия);
	
	Если ДанныеЗаполнения.Свойство("ПодразделениеКомпании")
		И ЗначениеЗаполнено(ДанныеЗаполнения.ПодразделениеКомпании) Тогда
		
		ПодразделениеКомпании = ДанныеЗаполнения.ПодразделениеКомпании;
		Документы.ПереоценкаАвтомобилей.ПодразделениеКомпанииПриИзменении(ЭтотОбъект, ПараметрыДействия);
		
	КонецЕсли;
	
	ТипЦен = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенЗакупкиАвтомобилей");
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
