// Модуль объекта документа "Ввод остатков товаров в производстве"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Процедура - обработчик ввода на основании
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если ДанныеЗаполнения = Неопределено Тогда
		Цех = ПраваИНастройкиПользователя.Значение("ОсновнойЦех", ЭтотОбъект);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтатьяОприходованияТМЦ) Тогда
		СтатьяОприходованияТМЦ = Справочники.СтатьиДоходовИРасходов.ВводОстатковТоваров;
	КонецЕсли; 
	
	// Заполним доп. поля для товарной строки
	Для Каждого СтрокаТовар Из Товары Цикл
		Если ПустаяСтрока(СтрокаТовар.ИдентификаторТовара) Тогда
			СтрокаТовар.ИдентификаторТовара = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Предварительно проверим ТЧ Коды маркировки
	МаркировкаТоваровСервер.ПроверкаКодовМаркировкиПередЗаписью(ЭтотОбъект);
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если БалансВедетсяПоОрганизациям(Дата) Тогда
		Если Цех.Организация <> ДокументОснование.Организация Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Организация цеха <%1> не соответствует организации заказ-наряда.'"), Цех)
			);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Проверим заполнение ТЧ Коды маркировки
	МаркировкаТоваровСервер.ПроверитьЗаполнениеКодовМаркировки(ЭтотОбъект, Отказ,,, Истина);
	
	// Проверим заполнение РНПТ у послеживаемого товара
	УчетПрослеживаемыхТоваровСервер.ПроверитьЗаполнениеРНПТПрослеживаемогоТовара(ЭтотОбъект);
	
КонецПроцедуры

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	КодыМаркировки.Очистить();
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоЗагрузка = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ЭтоЗагрузка", Ложь);
	
	Если (НЕ РежимЗаписи=РежимЗаписиДокумента.ОтменаПроведения) 
		И ((ДокументОснование.Состояние=Справочники.ВидыСостоянийЗаказНарядов.Выполнен И (Не ЭтоЗагрузка)) ИЛИ
		   (ДокументОснование.Состояние=Справочники.ВидыСостоянийЗаказНарядов.Закрыт))
		И (ЭтотОбъект.МоментВремени().Сравнить(ДокументОснование.МоментВремени())=1) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Остатки в производстве не могут быть введены после окончания работ по заказ-наряду.'"), ЭтотОбъект,, Отказ);
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПроизводствуПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапросаПоТоварам=ПолучитьРезультатЗапросаПоТоварам(ЭтотОбъект, РежимПроведения);
	
	ШапкаДокумента=ПолучитьШапкуДокумента(Ссылка);

	// оприходуем товар
	НаборЗаписейТоварыВПроизводстве = Движения.ТоварыВПроизводстве;
	НаборЗаписейТоварыВПроизводстве.РежимПроведения           = РежимПроведения;
	НаборЗаписейТоварыВПроизводстве.ДокументОбъект            = ЭтотОбъект;
	НаборЗаписейТоварыВПроизводстве.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам;
	НаборЗаписейТоварыВПроизводстве.Цех                       = ШапкаДокумента.Цех;
	НаборЗаписейТоварыВПроизводстве.Организация				  = ШапкаДокумента.Организация;
	НаборЗаписейТоварыВПроизводстве.ДокументЗаказНаряд        = ДокументОснование;
	НаборЗаписейТоварыВПроизводстве.ЕстьСтавкаНДС             = Истина;
	НаборЗаписейТоварыВПроизводстве.ШапкаДокумента            = ШапкаДокумента;
	Отказ = НЕ НаборЗаписейТоварыВПроизводстве.Приход() ИЛИ Отказ;
	
	// Переместим в производство маркируемый товар
	НаборЗаписейМаркировкаТоваровВПроизводстве = Движения.МаркировкаТоваровВПроизводстве;
	НаборЗаписейМаркировкаТоваровВПроизводстве.РежимПроведения = РежимПроведения;
	НаборЗаписейМаркировкаТоваровВПроизводстве.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейМаркировкаТоваровВПроизводстве.РезультатЗапросаПоТоварам = Неопределено;
	НаборЗаписейМаркировкаТоваровВПроизводстве.ДокументЗаказНаряд = ШапкаДокумента.ДокументОснование;
	НаборЗаписейМаркировкаТоваровВПроизводстве.Цех = ШапкаДокумента.Цех;
	НаборЗаписейМаркировкаТоваровВПроизводстве.ШапкаДокумента = ШапкаДокумента;
	Отказ=НЕ НаборЗаписейМаркировкаТоваровВПроизводстве.Приход() ИЛИ Отказ;
	
	// определим необходимость формирования корректирующих проводок
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(Дата);
	ПодразделениеЦех = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(Цех.ПодразделениеКомпании, ШапкаДокумента.Дата);
	ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ДоговорВзаиморасчетов.ПодразделениеКомпании, ШапкаДокумента.Дата);
	БалансовыеПодразделенияНеРавны = (ПодразделениеДоговорВзаиморасчетов<>ПодразделениеЦех);

	// Доходы и расходы
	НаборЗаписейДиР 						= Движения.ДоходыИРасходы;
	НаборЗаписейДиР.ДокументОбъект 			= ЭтотОбъект;
	НаборЗаписейДиР.СтатьяДоходовИРасходов	= ШапкаДокумента.СтатьяОприходованияТМЦ;
	Если ВедетсяБалансПоПодразделению Тогда
		НаборЗаписейДиР.Подразделение = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
	КонецЕсли;
	НаборЗаписейДиР.ВУпрВалюте				= Ложь;
	НаборЗаписейДиР.Доход					= СуммаДокумента;
	НаборЗаписейДиР.Расход					= 0;
	НаборЗаписейДиР.ШапкаДокумента			= ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
	
	// Если балансовые подразделение договора и подразделения склад не равны, то сформируем корректирующие проводки.
	Если ВедетсяБалансПоПодразделению И БалансовыеПодразделенияНеРавны Тогда
		НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДоходыИРасходы.Подразделение          = ПодразделениеДоговорВзаиморасчетов;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Ложь;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
		НаборЗаписейДоходыИРасходы.Расход                 = СуммаДокумента;
		Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		
		НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДоходыИРасходы.Подразделение          = ПодразделениеЦех;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте             = (ВалютаДокумента = Константы.ВалютаУправленческогоУчетаКомпании.Получить());
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
		НаборЗаписейДоходыИРасходы.Доход                  = СуммаДокумента;
		Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
	КонецЕсли;
	
	// двигаем границу последовательности Производства
	РаботаСГраницами.СдвинутьГраницуПроизводства(Ссылка, ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнения объекта на основании "Заказ-наряд"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаряд(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	// заполнение ТЧ в двух вариантах - деталями заказчика или остальными деталями
	Документы.ВводОстатковТоваровВПроизводстве.ТоварыЗаполнитьПоЗаказНаряду(ЭтотОбъект, ДанныеЗаполнения, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
	
	// Розничный тип цен из основания нам не подходит, поэтому меняем его на закупочный и пересчитываем все суммы. 
	ТипЦен = Справочники.ТипыЦен.ОсновнойТипЦенЗакупки;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// У нас не стандартная таблица, поэтому сформирует свой результат запроса по товарам.
//
// Параметры:
//  ШапкаДокумента - Документ.Ссылка - Ссылка на документ для которого получаем шапку.
//  РежимПроведения - 
//
// Возвращаемое значение:
//  Возвращает результат запроса.
//
Функция ПолучитьРезультатЗапросаПоТоварам(ШапкаДокумента, РежимПроведения)
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДокТовары.Номенклатура КАК Номенклатура,
	|	ДокТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ДокТовары.СуммаВсего КАК Сумма,
	|	ДокТовары.СтавкаНДС КАК СтавкаНДС,
	|	ДокТовары.СуммаНДС КАК СуммаНДС,
	|	ДокТовары.Количество * ДокТовары.Коэффициент КАК Количество,
	|	&СсылкаПартия КАК Партия,
	|	&СтатусПартии КАК СтатусПартии,
	|	ДокТовары.ГТД КАК ГТД,
	|	ДокТовары.СкладКомпании КАК СкладКомпании
	|ИЗ
	|	Документ.ВводОстатковТоваровВПроизводстве.Товары КАК ДокТовары
	|ГДЕ
	|	ДокТовары.Ссылка = &Ссылка
	|	И ДокТовары.Количество > 0";
	
	Запрос=Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",ШапкаДокумента.Ссылка);
	
	СтратегияСписанияПартийТоваровПоДатам = ПолучитьСтратегиюСписанияПоДатам(Неопределено, ШапкаДокумента.Организация, ?(РежимПроведения = РежимПроведенияДокумента.Оперативный, Неопределено, Дата));
	Если СтратегияСписанияПартийТоваровПоДатам=Перечисления.СтратегияСписанияПартийТоваровПоДатам.Средняя Тогда
		ПартияТоваровОтрицательныхОстатков=Константы.ПартияТоваровОтрицательныхОстатков.Получить();
		Запрос.УстановитьПараметр("СсылкаПартия",ПартияТоваровОтрицательныхОстатков);
	Иначе
		Запрос.УстановитьПараметр("СсылкаПартия",ШапкаДокумента.Ссылка);
	КонецЕсли; 	
	Запрос.УстановитьПараметр("СтатусПартии",Перечисления.СтатусыПартий.ТоварКупленный);	
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить();
	
КонецФункции

// Возвращает выборку по шапке
//
// Параметры:
//  ДокументСсылка - Документ.Ссылка - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Выборка - Выборка по шапке.
//
Функция ПолучитьШапкуДокумента(ДокументСсылка)
	Запрос=Новый Запрос("
	|ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ТипЦен КАК ТипЦен,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.Организация КАК Организация,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Док.Проект КАК Проект,
	/////////// ПРИВАТ ////////////
	|	Док.Контрагент КАК Контрагент,
	|	Док.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Док.СтатьяОприходованияТМЦ КАК СтатьяОприходованияТМЦ,
	|	Док.Цех КАК Цех,
	|	Док.ДокументОснование КАК ДокументОснование
	|
	|ИЗ
	|	Документ.ВводОстатковТоваровВПроизводстве КАК Док
	|ГДЕ
	|	Док.Ссылка=&Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции // ПолучитьШапкуДокумента()

#КонецОбласти

#КонецОбласти

#Область Инициализация

// Установим параметры проверки документа
ЭтотОбъект.ДополнительныеСвойства.Вставить("ТоварыЗапретАвтоСписанияХарактеристик", ИСТИНА);

#КонецОбласти

#КонецЕсли
