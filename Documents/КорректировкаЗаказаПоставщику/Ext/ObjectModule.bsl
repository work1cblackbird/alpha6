// Модуль документа "Корректировка заказа поставщику"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим параметры запрета для номенклатуры
	Отказ = Отказ ИЛИ ПроверитьПараметрыЗапретаВыбораНоменклатуры();
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоЗаказамПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Корректируем заказ поставщику
	НаборЗаписейЗаказыПоставщикам = Движения.ЗаказыПоставщикам;
	НаборЗаписейЗаказыПоставщикам.РежимПроведения = РежимПроведения;
	НаборЗаписейЗаказыПоставщикам.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейЗаказыПоставщикам.РезультатЗапросаПоТоварам = Неопределено;
	НаборЗаписейЗаказыПоставщикам.ЗаказПоставщику = ДокументОснование;
	Отказ = Отказ ИЛИ НЕ НаборЗаписейЗаказыПоставщикам.КорректировкаЗаказаПоставщика();
	
	// двигаем границу последовательности заказов
	РаботаСГраницами.СдвинутьГраницуЗаказов(Ссылка,  ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Заказ поставщику"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПоставщику(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// перезаполнение ТЧ "Товары" со сторнированием
	Если ДанныеЗаполнения.Проведен Тогда
		Товары.Очистить();
		Документы.КорректировкаЗаказаПоставщику.ЗаполнитьТабличнуюЧастьПоОснованию(ЭтотОбъект);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПоставщику()

#КонецОбласти

Функция ПроверитьПараметрыЗапретаВыбораНоменклатуры()
	
	// Если выполняется восстановление последовательностей, то отключим проверку
	ЭтоВосстановлениеПоследовательностей = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь);
	
	Если ЭтоВосстановлениеПоследовательностей Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Ложь;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.Номенклатура КАК Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Остатки.ЗаказаноОстаток КАК Количество
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|			&НаМомент,
	|			ЗаказПоставщику = &ЗаказПоставщику
	|				И Контрагент = &Контрагент) КАК Остатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоДокументу.Номенклатура КАК Номенклатура,
	|	ПоДокументу.Количество КАК Количество,
	|	ПоДокументу.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПоДокументу.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ПоДокументу
	|ИЗ
	|	&ПоДокументу КАК ПоДокументу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоДокументу.Номенклатура КАК Номенклатура,
	|	ПоДокументу.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СправочникНоменклатура.Артикул КАК НоменклатураАртикул,
	|	Остатки.Количество - ПоДокументу.Количество КАК Разница,
	|	СправочникНоменклатура.ЗапретЗакупки КАК ЗапретЗакупки,
	|	ПоДокументу.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ПоДокументу КАК ПоДокументу
	|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО (Остатки.Номенклатура = ПоДокументу.Номенклатура)
	|			И (Остатки.ХарактеристикаНоменклатуры = ПоДокументу.ХарактеристикаНоменклатуры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ПоДокументу.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	isnull(Остатки.Количество, 0) - ПоДокументу.Количество < 0
	|	И СправочникНоменклатура.ЗапретЗакупки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ЗаказПоставщику", ДокументОснование);
	Запрос.УстановитьПараметр("НаМомент", Дата);
	Запрос.УстановитьПараметр("ПоДокументу",
							  Товары.Выгрузить(,"Номенклатура, ХарактеристикаНоменклатуры, Количество, НомерСтроки"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Результат = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Номенклатура [%1] ""%2"" блокируется для закупки.'"),
			Выборка.НоменклатураАртикул,
			Выборка.Номенклатура
		);
		
		ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары",Выборка.НомерСтроки, "Номенклатура");
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщения,
			,
			ПутьКТабличнойЧасти,
			"Объект"
		);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
