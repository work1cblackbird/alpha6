// Модуль менеджера документа "Дефектовочная ведомость"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Используется в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость вывода только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возвращаемая строка, содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить = Ложь, ТолькоОсновныеКонтакты = Истина) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции // ПолучитьТекстЗапросаПоКонтактам()

Функция ПолучитьШаблонВопросов(Объект) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		ДанныеАвтомобиля = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Автомобиль, "Модель,Марка");
		
		Модель = ДанныеАвтомобиля.Модель;
		Марка  = ДанныеАвтомобиля.Марка;
	Иначе
		Модель = Объект.Модель;
		Марка  = Справочники.Марки.ПустаяСсылка();
	КонецЕсли;
	
	ТекстЗапроса = Новый Массив;
	
	Если ЗначениеЗаполнено(Модель) Тогда
		ТекстЗапроса.Добавить("
		                      |	ШаблоныАнкетДефектовочныхВедомостей.Ссылка КАК ШаблонВопросов,
		                      |	1 КАК Порядок
		                      |ИЗ
		                      |	Справочник.ШаблоныАнкетДефектовочныхВедомостей КАК ШаблоныАнкетДефектовочныхВедомостей
		                      |ГДЕ
		                      |	ШаблоныАнкетДефектовочныхВедомостей.Применимость = &Модель");
		ТекстЗапроса.Добавить("
		                      |	ШаблоныАнкетДефектовочныхВедомостей.Ссылка КАК ШаблонВопросов,
		                      |	2 КАК Порядок
		                      |ИЗ
		                      |	Справочник.ШаблоныАнкетДефектовочныхВедомостей КАК ШаблоныАнкетДефектовочныхВедомостей
		                      |ГДЕ
		                      |	ШаблоныАнкетДефектовочныхВедомостей.Применимость ССЫЛКА Справочник.Модели
		                      |	И ШаблоныАнкетДефектовочныхВедомостей.Применимость.ЭтоГруппа
		                      |	И ШаблоныАнкетДефектовочныхВедомостей.Ссылка В
		                      |			(ВЫБРАТЬ
		                      |				Модели.Родитель КАК Родитель
		                      |			ИЗ
		                      |				Справочник.Модели КАК Модели
		                      |			ГДЕ
		                      |				Модели.Ссылка = &Модель)");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Марка) Тогда
		ТекстЗапроса.Добавить("
		                      |	ШаблоныАнкетДефектовочныхВедомостей.Ссылка КАК ШаблонВопросов,
		                      |	3 КАК Порядок
		                      |ИЗ
		                      |	Справочник.ШаблоныАнкетДефектовочныхВедомостей КАК ШаблоныАнкетДефектовочныхВедомостей
		                      |ГДЕ
		                      |	ШаблоныАнкетДефектовочныхВедомостей.Применимость = &Марка");
	КонецЕсли;
	
	ТекстЗапроса.Добавить("
	                      |	ШаблоныАнкетДефектовочныхВедомостей.Ссылка КАК ШаблонВопросов,
	                      |	4 КАК Порядок
	                      |ИЗ
	                      |	Справочник.ШаблоныАнкетДефектовочныхВедомостей КАК ШаблоныАнкетДефектовочныхВедомостей
	                      |ГДЕ
	                      |	ШаблоныАнкетДефектовочныхВедомостей.Применимость = НЕОПРЕДЕЛЕНО");
	
	СтрокаОбъединения = "	
							|ОБЪЕДИНИТЬ ВСЕ
							|
							|ВЫБРАТЬ";
	
	СтрокаПорядок = "	
						|УПОРЯДОЧИТЬ ПО
						|	Порядок";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Модель", Модель);
	Запрос.УстановитьПараметр("Марка",  Марка);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 РАЗРЕШЕННЫЕ " + СтрСоединить(ТекстЗапроса, СтрокаОбъединения) + СтрокаПорядок;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ШаблонВопросов;
	КонецЕсли;
	
	Возврат Справочники.ШаблоныАнкетДефектовочныхВедомостей.ПустаяСсылка();
	
КонецФункции // ПолучитьШаблонВопросов()

Функция ВыполнитьЗапросПоВопросамШаблона(ШаблонВопросов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВопросыШаблонаАнкеты.Ссылка КАК Вопрос,
	               |	ВопросыШаблонаАнкеты.Код КАК Код,
	               |	ВопросыШаблонаАнкеты.ЭтоГруппа КАК ЭтоГруппа
	               |ИЗ
	               |	Справочник.ВопросыШаблонаАнкеты КАК ВопросыШаблонаАнкеты
	               |ГДЕ
	               |	НЕ ВопросыШаблонаАнкеты.ПометкаУдаления
	               |	И ВопросыШаблонаАнкеты.Владелец = &Владелец
	               |ИТОГИ ПО
	               |	Вопрос ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Владелец", ШаблонВопросов);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура СформироватьКонтрольныеВопросы(ВыборкаВопросов, Порядок, ТаблицаВопросов)
	
	Пока ВыборкаВопросов.Следующий() Цикл
		
		Порядок = Порядок + ВыборкаВопросов.Код;
		
		Если ВыборкаВопросов.ЭтоГруппа Тогда
			СформироватьКонтрольныеВопросы(ВыборкаВопросов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Вопрос"), Порядок, ТаблицаВопросов);
		Иначе
			НоваяСтрока = ТаблицаВопросов.Добавить();
			НоваяСтрока.Вопрос = ВыборкаВопросов.Вопрос;
			НоваяСтрока.Порядок = Порядок;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКонтрольныеВопросы(Объект, ТаблицаВопросов = Неопределено) Экспорт
	
	ЕстьКонтрольныеВопросы = ЕстьРеквизит(Объект,, "КонтрольныеВопросы");
	
	Если НЕ ЗначениеЗаполнено(Объект.ШаблонВопросов) Тогда
		Объект.ШаблонВопросов = ПолучитьШаблонВопросов(Объект);
	КонецЕсли;
	
	Если ЕстьКонтрольныеВопросы Тогда
		Объект.КонтрольныеВопросы.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ШаблонВопросов) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ШаблонВопросов) = Тип("СправочникСсылка.ШаблоныАнкетДефектовочныхВедомостей") Тогда
		Результат = ВыполнитьЗапросПоВопросамШаблона(Объект.ШаблонВопросов.ШаблонАнкет);
	Иначе
		Результат = ВыполнитьЗапросПоВопросамШаблона(Объект.ШаблонВопросов);
	КонецЕсли;

	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Вопрос");
	
	Если ТаблицаВопросов = Неопределено Тогда
		ТаблицаВопросов = Объект.КонтрольныеВопросы.Выгрузить();
		ТаблицаВопросов.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	СформироватьКонтрольныеВопросы(Выборка, 0, ТаблицаВопросов);
	
	ТаблицаВопросов.Сортировать("Порядок");
	Если ЕстьКонтрольныеВопросы Тогда
		Объект.КонтрольныеВопросы.Загрузить(ТаблицаВопросов.Скопировать());
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКонтрольныеВопросы()

Функция ПолучитьРанееОбнаруженныеПовреждения(Документ, Автомобиль, Выборка = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоврежденияАвтомобилейСрезПоследних.ТипПовреждения КАК ТипПовреждения,
		|	ПоврежденияАвтомобилейСрезПоследних.ОписаниеПовреждения КАК Описание,
		|	ПоврежденияАвтомобилейСрезПоследних.НомерПовреждения КАК НомерПовреждения
		|ИЗ
		|	РегистрСведений.ПоврежденияАвтомобилей.СрезПоследних(
		|			,
		|			Автомобиль = &Автомобиль
		|				И Документ <> &Документ) КАК ПоврежденияАвтомобилейСрезПоследних
		|ГДЕ
		|	ПоврежденияАвтомобилейСрезПоследних.ПоврежденияУстранены = ЛОЖЬ";
	Запрос.УстановитьПараметр("Документ",   Документ);
	Запрос.УстановитьПараметр("Автомобиль", Автомобиль);
	
	Возврат ?(Выборка, Запрос.Выполнить().Выбрать(), Запрос.Выполнить().Выгрузить());
	
КонецФункции

Процедура ОбновитьИнформациюОПробегеАвтомобиля(Объект) Экспорт
	
	// нужно указывать пробег вручную
	
КонецПроцедуры

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
		
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт

	Если ЗначениеЗаполнено(Объект.ДокументОснование) 
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ДоговорАренды")
		И Объект.ХозОперация = Справочники.ХозОперации.ДефектовочнаяВедомость Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для заполнения документа, необходимо создавать дефектовочную ведомость из документа ""Договор аренды""'"));
		Объект.ДокументОснование = Документы.ДоговорАренды.ПустаяСсылка();
		Возврат;
		
	КонецЕсли;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект);
	
КонецПроцедуры // ДатаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автомобиль".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобильПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Объект.Модель = Объект.Автомобиль.Модель;
	
	// Установим пробег автомобиля
	ОбновитьИнформациюОПробегеАвтомобиля(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Дата осмотра".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаОсмотраПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Установим пробег автомобиля
	ОбновитьИнформациюОПробегеАвтомобиля(Объект);
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ДокументОснование");
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ВыдачаВАренду
		ИЛИ Объект.ХозОперация = Справочники.ХозОперации.ПриемкаИзАренды Тогда
			ОбязательныеРеквизиты.Добавить("Пробег");
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ДефектовочнаяВедомость",
		"ПФ_MXL_АктОсмотраМобКлиент",
		НСтр("ru = 'Акт осмотра (повреждения)'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик события формирования печатной формы.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - информация для заполнения письма при отправке печатной формы электронной почтой.
//                                     Содержит следующие поля:
//    ** Получатель - Строка, СписокЗначений, Массив - список получателей письма;
//    ** Тема - Строка - Тема письма,
//    ** Текст - Строка - Текст письма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_АктОсмотраМобКлиент") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"ПФ_MXL_АктОсмотраМобКлиент",
		НСтр("ru = 'Акт осмотра (повреждения)'"),
		ПечатьАктОсмотраПовреждения(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "АктОсмотраМобКлиент"
// Возвращает сформированный табличный документ:
Функция ПечатьАктОсмотраПовреждения(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ДефекточнаяВедомость_АктОсмотраПовреждения";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ДефектовочнаяВедомость.ПФ_MXL_АктОсмотраМобКлиент");
		
		// Вывод шапки документа
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
		ОбластьМакета.Параметры.Организация             = Документ.Организация;
		ОбластьМакета.Параметры.ФирмаПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация);
		КонтактнаяИнформацияПК = Документ.ПодразделениеКомпании.КонтактнаяИнформация.Выгрузить();
		КонтактнаяИнформация = Документ.Организация.КонтактнаяИнформация.Выгрузить();
		Если КонтактнаяИнформацияПК <> Неопределено И КонтактнаяИнформацияПК.Количество() > 0 Тогда
			Инд = 0;
			Пока Инд < КонтактнаяИнформацияПК.Количество() Цикл
				Если КонтактнаяИнформацияПК[Инд].Вид.ИмяПредопределенныхДанных = "ЮрАдресПодразделенияКомпании" Тогда
					ГородТекст = ?(Лев(КонтактнаяИнформацияПК[Инд].Город, 1) = "г", 
						КонтактнаяИнформацияПК[Инд].Город, "г. " + КонтактнаяИнформацияПК[Инд].Город);
					ОбластьМакета.Параметры.ФирмаАдресЮридический = ?(ЗначениеЗаполнено(КонтактнаяИнформацияПК[Инд].Город), 
						ГородТекст, "");
				КонецЕсли;
				Инд = Инд + 1;
			КонецЦикла;
		КонецЕсли;
		
		Если ПустаяСтрока(СокрЛП(ОбластьМакета.Параметры.ФирмаАдресЮридический)) Тогда
			Если КонтактнаяИнформация <> Неопределено И КонтактнаяИнформация.Количество() > 0 Тогда
				Инд = 0;
				Пока Инд < КонтактнаяИнформация.Количество() Цикл
					Если КонтактнаяИнформация[Инд].Вид.ИмяПредопределенныхДанных = "ЮрАдресОрганизации" Тогда
						ГородТекст = ?(Лев(КонтактнаяИнформация[Инд].Город, 1) = "г", 
							КонтактнаяИнформация[Инд].Город, "г. " + КонтактнаяИнформация[Инд].Город); 
						ОбластьМакета.Параметры.ФирмаАдресЮридический = ?(ЗначениеЗаполнено(КонтактнаяИнформация[Инд].Город), 
							ГородТекст, "");
					КонецЕсли;
					Инд = Инд + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если КонтактнаяИнформацияПК <> Неопределено И КонтактнаяИнформацияПК.Количество() > 0 Тогда
			Инд = 0;
			Пока Инд < КонтактнаяИнформацияПК.Количество() Цикл
				Если КонтактнаяИнформацияПК[Инд].Вид.ИмяПредопределенныхДанных = "ТелефонПодразделенияКомпании" Тогда
					ОбластьМакета.Параметры.ФирмаТелефоны = КонтактнаяИнформацияПК[Инд].Представление;
				КонецЕсли;
				Инд = Инд + 1;
			КонецЦикла;
		КонецЕсли;
		
		Если ПустаяСтрока(СокрЛП(ОбластьМакета.Параметры.ФирмаТелефоны)) Тогда
			Если КонтактнаяИнформация <> Неопределено И КонтактнаяИнформация.Количество() > 0 Тогда
				Инд = 0;
				Пока Инд < КонтактнаяИнформация.Количество() Цикл
					Если КонтактнаяИнформация[Инд].Вид.ИмяПредопределенныхДанных = "ТелефонОрганизации" Тогда
						ОбластьМакета.Параметры.ФирмаТелефоны = КонтактнаяИнформация[Инд].Представление;
					КонецЕсли;
					Инд = Инд + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ОбластьМакета.Параметры.НомерДок                   = Документ.Номер;
		ОбластьМакета.Параметры.ИмяДокумента               = ?(Документ.ДокументОснование = Неопределено, "-----", 
																	Документ.ДокументОснование.Метаданные().Синоним);
		ОбластьМакета.Параметры.НомерДокОснование          = ?(Документ.ДокументОснование = Неопределено, "-----", 
																	Документ.ДокументОснование.Номер);
		ОбластьМакета.Параметры.Заказчик                   = Документ.Контрагент;
		ОбластьМакета.Параметры.ЗаказчикПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент);
		
		КонтактнаяИнформацияК = Документ.Контрагент.КонтактнаяИнформация.Выгрузить();
		Если КонтактнаяИнформацияК <> Неопределено И КонтактнаяИнформацияК.Количество() > 0 Тогда
			Инд = 0;
			Пока Инд < КонтактнаяИнформацияК.Количество() Цикл
				Если КонтактнаяИнформацияК[Инд].Вид.ИмяПредопределенныхДанных = "ТелефонКонтрагента" Тогда
					ОбластьМакета.Параметры.ЗаказчикТелефоны = КонтактнаяИнформацияК[Инд].Представление;
				КонецЕсли;
				Инд = Инд + 1;
			КонецЦикла;
			Инд = 0;
			Пока Инд < КонтактнаяИнформацияК.Количество() Цикл
				Если КонтактнаяИнформацияК[Инд].Вид.ИмяПредопределенныхДанных = "ЮрАдресКонтрагента" Тогда
					ГородТекст = ?(Лев(КонтактнаяИнформацияК[Инд].Город, 1) = "г", 
						КонтактнаяИнформацияК[Инд].Город, "г. " + КонтактнаяИнформацияК[Инд].Город);
					ОбластьМакета.Параметры.ЗаказчикАдресЮридический = ?(ЗначениеЗаполнено(КонтактнаяИнформацияК[Инд].Город), 
						ГородТекст, "");
				КонецЕсли;
				Инд = Инд + 1;
			КонецЦикла;
		КонецЕсли;
		ОбластьМакета.Параметры.ПредставительПолноеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Представитель);
		
		КонтактнаяИнформацияК = Документ.Представитель.КонтактнаяИнформация.Выгрузить();
		Если КонтактнаяИнформацияК <> Неопределено И КонтактнаяИнформацияК.Количество() > 0 Тогда
			Инд = 0;
			Пока Инд < КонтактнаяИнформацияК.Количество() Цикл
				Если КонтактнаяИнформацияК[Инд].Вид.ИмяПредопределенныхДанных = "ТелефонКонтрагента" Тогда
					ОбластьМакета.Параметры.КонтрагентТелефоны = КонтактнаяИнформацияК[Инд].Представление;
				КонецЕсли;
				Инд = Инд + 1;
			КонецЦикла;
			Инд = 0;
			Пока Инд < КонтактнаяИнформацияК.Количество() Цикл
				Если КонтактнаяИнформацияК[Инд].Вид.ИмяПредопределенныхДанных = "ЮрАдресКонтрагента" Тогда 
					ГородТекст = ?(Лев(КонтактнаяИнформацияК[Инд].Город, 1) = "г", 
						КонтактнаяИнформацияК[Инд].Город, "г. " + КонтактнаяИнформацияК[Инд].Город); 
					ОбластьМакета.Параметры.КонтрагентАдресЮридический = ?(ЗначениеЗаполнено(КонтактнаяИнформацияК[Инд].Город), 
						ГородТекст, "");
				КонецЕсли;
				Инд = Инд + 1;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Документ.Автомобиль) И ТипЗнч(Документ.Автомобиль) = Тип("СправочникСсылка.Автомобили") Тогда
			ОбластьМакета.Параметры.Автомобиль               = Документ.Автомобиль;
			ОбластьМакета.Параметры.АвтомобильКод            = Документ.Автомобиль.VIN;
			ОбластьМакета.Параметры.АвтомобильМодель         = Автосервис.МаркаМодельАвтомобиля(Документ.Автомобиль);
			ОбластьМакета.Параметры.АвтомобильГодВыпуска     = Формат(Документ.Автомобиль.ГодВыпуска, АвтомобилиСервер.ПолучитьФорматПредставленияГодаВыпускаАвтомобиля(Документ.Автомобиль));
			ОбластьМакета.Параметры.АвтомобильНомерДвигателя = Документ.Автомобиль.НомерДвигателя;
			ОбластьМакета.Параметры.АвтомобильНомерШасси     = Документ.Автомобиль.НомерШасси;
			ОбластьМакета.Параметры.АвтомобильНомерКузова    = Документ.Автомобиль.НомерКузова;
			ОбластьМакета.Параметры.АвтомобильЦвет           = Документ.Автомобиль.Цвет;
			
			ОбластьМакета.Параметры.АвтомобильГосНомер   = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
						Документ.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер, Документ.Дата);
			ОбластьМакета.Параметры.АвтомобильТехПаспорт = СокрЛП(Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(
						Документ.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.ТехПаспорт, Документ.Дата));
		КонецЕсли;
		
		ФайлКартинки = Неопределено;
		Если ЗначениеЗаполнено(Документ.ФайлКартинки) Тогда
			ФайлКартинки = Документ.ФайлКартинки;
		ИначеЕсли ЗначениеЗаполнено(Документ.Модель.ФайлКартинки) Тогда
			ФайлКартинки = Документ.Модель.ФайлКартинки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФайлКартинки) Тогда
			
			Попытка
				АдресКартинки = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(ФайлКартинки).СсылкаНаДвоичныеДанныеФайла;
				СхемаТС = Новый Картинка(ПолучитьИзВременногоХранилища(АдресКартинки), Ложь);
				ОбластьМакета.Рисунки.СхемаТС.Картинка = СхемаТС;
				ОбластьМакета.Рисунки.СхемаТС.РазмерКартинки = РазмерКартинки.Пропорционально;
			Исключение 
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка изменения картинки'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		КонецЕсли;
		
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьМакета, Документ);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// выводим описание ранее обнаруженных повреждений
		ОбластьМакетаШапкаПоврежденияРанее  = Макет.ПолучитьОбласть("ЗамечанияРанееШапка");
		ОбластьМакетаСтрокаПоврежденияРанее = макет.ПолучитьОбласть("ЗамечанияРанееСтрока");
		
		// получим данные о повреждениях
		ТаблицаПовреждений = ПолучитьРанееОбнаруженныеПовреждения(Документ, Документ.Автомобиль);
		
		Если ТаблицаПовреждений.Количество() > 0 Тогда
			ТабличныйДокумент.Вывести(ОбластьМакетаШапкаПоврежденияРанее);
		КонецЕсли;
		
		Для Каждого ТекущаяСтрока Из ТаблицаПовреждений Цикл
			
			// заполним область
			ОбластьМакетаСтрокаПоврежденияРанее.Параметры.ВидОтметки          = ТекущаяСтрока.ТипПовреждения;
			ОбластьМакетаСтрокаПоврежденияРанее.Параметры.ОписаниеПовреждения = ТекущаяСтрока.Описание;
			
			// проверим вывод
			МассивОбластей = Новый Массив;
			МассивОбластей.Добавить(ОбластьМакетаСтрокаПоврежденияРанее);
			
			Если ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда
				ТабличныйДокумент.Вывести(ОбластьМакетаСтрокаПоврежденияРанее);
			Иначе
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьМакетаШапкаПоврежденияРанее);
				ТабличныйДокумент.Вывести(ОбластьМакетаСтрокаПоврежденияРанее);
			КонецЕсли;
			
		КонецЦикла;
		
		// выводим описание повреждений
		ОбластьМакетаШапкаПовреждения  = Макет.ПолучитьОбласть("ЗамечанияПриОсмотреШапка");
		ОбластьМакетаСтрокаПовреждения = макет.ПолучитьОбласть("ЗамечанияПриОсмотреСтрока");
		
		// получим данные о повреждениях
		ТаблицаПовреждений = Документ.ОбнаруженныеНеисправности.Выгрузить();
		ТаблицаПовреждений.Сортировать("НомерПовреждения");
		
		Если ТаблицаПовреждений.Количество() > 0 Тогда
			ТабличныйДокумент.Вывести(ОбластьМакетаШапкаПовреждения);
		КонецЕсли;
		
		Для Каждого ТекущаяСтрока Из ТаблицаПовреждений Цикл
			
			// заполним область
			ОбластьМакетаСтрокаПовреждения.Параметры.НомерСтроки         = ТекущаяСтрока.НомерПовреждения;
			ОбластьМакетаСтрокаПовреждения.Параметры.ВидОтметки          = ТекущаяСтрока.ТипПовреждения;
			ОбластьМакетаСтрокаПовреждения.Параметры.ОписаниеПовреждения = ТекущаяСтрока.Описание;
			
			// проверим вывод
			МассивОбластей = Новый Массив;
			МассивОбластей.Добавить(ОбластьМакетаСтрокаПовреждения);
			
			Если ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда
				ТабличныйДокумент.Вывести(ОбластьМакетаСтрокаПовреждения);
			Иначе
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьМакетаШапкаПовреждения);
				ТабличныйДокумент.Вывести(ОбластьМакетаСтрокаПовреждения);
			КонецЕсли;
			
		КонецЦикла;
		
		// получим заголовок и строку таблицы
		ОбластьМакетаШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьМакетаСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
		ОбластьМакетаПодвал        = Макет.ПолучитьОбласть("Подвал");
		
		// проверим вывод
		МассивОбластей = Новый Массив;
		МассивОбластей.Добавить(ОбластьМакетаШапкаТаблицы);
		МассивОбластей.Добавить(ОбластьМакетаСтрокаТаблицы);
		
		Если ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда 
			ТабличныйДокумент.Вывести(ОбластьМакетаШапкаТаблицы);
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ОбластьМакетаШапкаТаблицы);
		КонецЕсли;
		
		КонтрольныеВопросы = Документ.КонтрольныеВопросы.Выгрузить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДефектовочнаяВедомостьКонтрольныеВопросы.НомерСтроки КАК НомерСтроки,
			|	ДефектовочнаяВедомостьКонтрольныеВопросы.Вопрос КАК Вопрос,
			|	ДефектовочнаяВедомостьКонтрольныеВопросы.Ответ КАК Ответ
			|ПОМЕСТИТЬ ТаблицаВопросов
			|ИЗ
			|	Документ.ДефектовочнаяВедомость.КонтрольныеВопросы КАК ДефектовочнаяВедомостьКонтрольныеВопросы
			|ГДЕ
			|	ДефектовочнаяВедомостьКонтрольныеВопросы.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаВопросов.Вопрос КАК Вопрос,
			|	ВопросыШаблонаАнкеты.Формулировка КАК Формулировка,
			|	ТаблицаВопросов.Ответ КАК Ответ
			|ИЗ
			|	ТаблицаВопросов КАК ТаблицаВопросов
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВопросыШаблонаАнкеты КАК ВопросыШаблонаАнкеты
			|		ПО ТаблицаВопросов.Вопрос = ВопросыШаблонаАнкеты.Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	ТаблицаВопросов.НомерСтроки";
		Запрос.УстановитьПараметр("Ссылка", Документ);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОбластьМакетаСтрокаТаблицы.Параметры.ПунктПроверки = ?(ЗначениеЗаполнено(Выборка.Формулировка), Выборка.Формулировка,
				УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Выборка.Вопрос));
			Если НЕ ЗначениеЗаполнено(ОбластьМакетаСтрокаТаблицы.Параметры.ПунктПроверки) Тогда
				ОбластьМакетаСтрокаТаблицы.Параметры.ПунктПроверки = НСтр("ru = 'Элемент проверки'");
			КонецЕсли;
			ОбластьМакетаСтрокаТаблицы.Параметры.Значение = Выборка.Ответ;
			
			// проверим вывод
			МассивОбластей = Новый Массив;
			МассивОбластей.Добавить(ОбластьМакетаСтрокаТаблицы);
			
			Если ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда
				ТабличныйДокумент.Вывести(ОбластьМакетаСтрокаТаблицы);
			Иначе
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьМакетаШапкаТаблицы);
				ТабличныйДокумент.Вывести(ОбластьМакетаСтрокаТаблицы);
			КонецЕсли;
			
		КонецЦикла;
		
		// Вывод подвала документа
		ОбластьМакетаПодвал.Параметры.Заказчик                        = Документ.Контрагент;
		ОбластьМакетаПодвал.Параметры.ЗаказчикПолноеНаименование      = 
					УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент);
		ОбластьМакетаПодвал.Параметры.Мастер                          = Документ.Сотрудник;
		ОбластьМакетаПодвал.Параметры.СотрудникПолноеНаименование     = 
					УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Сотрудник);
		ОбластьМакетаПодвал.Параметры.ПредставительПолноеНаименование = 
					УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Представитель);
		ОбластьМакетаПодвал.Параметры.ДатаДок                         = Формат(Документ.Дата, "ДЛФ=DD");
		
		// проверим вывод
		МассивОбластей = Новый Массив;
		МассивОбластей.Добавить(ОбластьМакетаПодвал);
		
		Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#КонецОбласти
	
#Область ПрограммныйИнтерфейс

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаРемонт);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;


КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ДефектовочнаяВедомость);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли
