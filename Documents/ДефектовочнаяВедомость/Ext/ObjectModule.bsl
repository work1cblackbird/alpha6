// Модуль документа "Дефектовочная ведомость"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ВводСПустымОснованием(ДанныеЗаполнения) Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПодчиненныеДокументы.Ссылка КАК Документ
		|ИЗ
		|	КритерийОтбора.ПодчиненныеДокументы(&Основание) КАК ПодчиненныеДокументы
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ПодчиненныеДокументы.Ссылка) = ТИП(Документ.ДефектовочнаяВедомость)";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Основание",ДанныеЗаполнения);
		Выборка = Запрос.Выполнить().Выгрузить();
		
		НовыйДокумент = Истина;
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			НовыйДокумент = ?(ЗначениеЗаполнено(Выборка.Найти(Ссылка, "Документ")), Ложь, Истина);
		КонецЕсли;
	
		Если Выборка.Количество() > 0 И НовыйДокумент Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
						"ru='На основании документа <%1> уже введен <%2>.'"), ДанныеЗаполнения, Выборка[0].Документ);
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(Выборка[0].Документ, ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И (ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "Выдача", Ложь) 
		ИЛИ ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "Приемка", Ложь)) Тогда
		
		АрендаАвтомобилей.ЗаполнитьДефектовочнаяВедомость(ЭтотОбъект,
				ДанныеЗаполнения,
				ТекстЗаполнения,
				СтандартнаяОбработка);
		
	КонецЕсли;
	
	// Заполним табличную часть вопросов.
	Документы.ДефектовочнаяВедомость.ЗаполнитьКонтрольныеВопросы(ЭтотОбъект);
	
	// Установим пробег автомобиля
	Если ЭтоНовый() Тогда
		Документы.ДефектовочнаяВедомость.ОбновитьИнформациюОПробегеАвтомобиля(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	ОбнаруженныеНеисправности.Очистить();
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним идентификатор повреждения в таблице неисправностей
	Для Каждого Строка Из ОбнаруженныеНеисправности Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ИдентификаторПовреждения) Тогда
			Строка.ИдентификаторПовреждения = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Аренда
	Если ХозОперация = Справочники.ХозОперации.ВыдачаВАренду Тогда
		РегистрыСведений.АрендаСостоянияАвтомобилей.ЗаписатьСостояние(ЭтотОбъект, Автомобиль, 
			Перечисления.АрендаСостоянияАвтомобилей.ВыданКлиенту, Отказ, ДатаОсмотра);
	ИначеЕсли ХозОперация = Справочники.ХозОперации.ПриемкаИзАренды Тогда
		РегистрыСведений.АрендаСостоянияАвтомобилей.ЗаписатьСостояние(ЭтотОбъект, Автомобиль, 
			Перечисления.АрендаСостоянияАвтомобилей.ПолученОтКлиента, Отказ, ДатаОсмотра);
	КонецЕсли;
	
	// Неисправности
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоврежденияАвтомобилей.ИдентификаторПовреждения КАК ИдентификаторПовреждения,
		|	ПоврежденияАвтомобилей.ПоврежденияУстранены КАК ПоврежденияУстранены,
		|	ПоврежденияАвтомобилей.ДатаУстранения КАК ДатаУстранения,
		|	ПоврежденияАвтомобилей.ДатаУстраненияПлан КАК ДатаУстраненияПлан
		|ИЗ
		|	РегистрСведений.ПоврежденияАвтомобилей КАК ПоврежденияАвтомобилей
		|ГДЕ
		|	ПоврежденияАвтомобилей.Документ = &Документ";
	Запрос.УстановитьПараметр("Документ", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	НаборНеисправностей = РегистрыСведений.ПоврежденияАвтомобилей.СоздатьНаборЗаписей();
	НаборНеисправностей.Отбор.Документ.Установить(Ссылка);
	НаборНеисправностей.Прочитать();
	НаборНеисправностей.Очистить();
	
	СтруктураПоиска = Новый Структура("ИдентификаторПовреждения");
	
	Для Каждого СтрокаНеисправности Из ОбнаруженныеНеисправности Цикл
		ЗаписьРегистра = НаборНеисправностей.Добавить();
		ЗаписьРегистра.Период                   = Дата;
		ЗаписьРегистра.Автомобиль               = Автомобиль;
		ЗаписьРегистра.Документ                 = Ссылка;
		ЗаписьРегистра.ИдентификаторПовреждения = СтрокаНеисправности.ИдентификаторПовреждения;
		ЗаписьРегистра.ТипПовреждения           = СтрокаНеисправности.ТипПовреждения;
		ЗаписьРегистра.ОписаниеПовреждения      = СтрокаНеисправности.Описание;
		ЗаписьРегистра.НомерПовреждения         = СтрокаНеисправности.НомерПовреждения;
		ЗаписьРегистра.МедиаФайл                = СтрокаНеисправности.МедиаФайл;
		Выборка.Сбросить();
		
		СтруктураПоиска.ИдентификаторПовреждения = СтрокаНеисправности.ИдентификаторПовреждения;
		
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			ЗаписьРегистра.ПоврежденияУстранены = Выборка.ПоврежденияУстранены;
			ЗаписьРегистра.ДатаУстранения       = Выборка.ДатаУстранения;
			ЗаписьРегистра.ДатаУстраненияПлан   = Выборка.ДатаУстраненияПлан;
		КонецЕсли;
	КонецЦикла;
	НаборНеисправностей.Записать();
	
	// Пробег
	Если НЕ ДополнительныеСвойства.Свойство("НеЗаписыватьПробег") И ЗначениеЗаполнено(Пробег) Тогда
		Отказ = Отказ
			ИЛИ Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(
				Автомобиль,
				Пробег,
				Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег,
				?(ЗначениеЗаполнено(ДатаОсмотра), ДатаОсмотра, Дата),
				Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.Прочее,
				Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Заявка на ремонт"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаРемонт(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СводныйРемонтныйЗаказ = Документы.СводныйРемонтныйЗаказ.ПустаяСсылка();
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаявкаНаРемонт()

// Производит заполнение объекта на основании документа "Сводный ремонтный заказ"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СводныйРемонтныйЗаказ(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СводныйРемонтныйЗаказ = ДанныеЗаполнения.Ссылка;
	Представитель = ДанныеЗаполнения.Заказчик;
	Модель        = Автомобиль.Модель;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_СводныйРемонтныйЗаказ()

// Производит заполнение объекта на основании документа "Заказ наряд"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаряд(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СводныйРемонтныйЗаказ = ДанныеЗаполнения.СводныйРемонтныйЗаказ;
	Представитель         = ДанныеЗаполнения.СводныйРемонтныйЗаказ.Заказчик;
	Автомобиль            = ДанныеЗаполнения.СводныйРемонтныйЗаказ.Автомобиль;
	Модель                = Автомобиль.Модель;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаряд()

// Производит заполнение объекта на основании документа "Тест драйв"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ТестДрайв(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Модель = Автомобиль.Модель;
	СводныйРемонтныйЗаказ = Документы.СводныйРемонтныйЗаказ.ПустаяСсылка();
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ТестДрайв()

// Производит заполнение объекта на основании документа "Поступление автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СводныйРемонтныйЗаказ = Документы.СводныйРемонтныйЗаказ.ПустаяСсылка();
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеАвтомобилей()

// Производит заполнение объекта на основании документа "Акт оценки автомобиля"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_АктОценкиАвтомобиля(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СводныйРемонтныйЗаказ = Документы.СводныйРемонтныйЗаказ.ПустаяСсылка();
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_АктОценкиАвтомобиля()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
