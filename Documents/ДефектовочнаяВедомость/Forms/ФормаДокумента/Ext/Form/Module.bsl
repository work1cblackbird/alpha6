///////////////////////////////////////////////////////////////////////////////
// Модуль основной формы документа "Дефектовочная ведомость"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// ПодключаемоеОборудование
	ТипыОборудования = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
	ТипыОборудования.СканерШтрихкода = Истина;
	ТипыОборудования.СчитывательМагнитныхКарт = Истина;
	МенеджерОборудования.ПриСозданииНаСервере(ЭтаФорма, ТипыОборудования);
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Штрихкодирование
	ШтрихкодированиеВызовСервера.ПрочитатьШтрихкодДокумента(ЭтотОбъект, Объект);
	// Конец Штрихкодирование
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	
	РазрешитьРедактированиеЦенИСумм = ПраваИНастройкиПользователя.Значение("РедактированиеЦенИСуммВНоменклатурныхТаблицах", Объект);
	РаботаСФормой.РазрешитьРедактированиеЦенИСумм(
		РаботаСФормой.ТиповыеПоляСуммовыхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм
	);
	РаботаСФормой.ОткрытьФормуТолькоДляПросмотра(ЭтотОбъект, Объект);
	
	ПолучитьСхемуТС();
	
	// Выведем информацию по пробегу
	Элементы.ПробегРасширеннаяПодсказка.Заголовок = АвтомобилиКлиентСервер.
		ПредставлениеПредыдущихПробегов(Объект.Автомобиль, СформироватьМассивДатПробега(Объект));
		
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);
		
	// Дальнейшие операции выполняются только для новых объектов
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(Параметры, "Автомобиль") <> Неопределено
		И ЗначениеЗаполнено(Параметры.Автомобиль) Тогда
			Объект.Автомобиль = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Автомобиль");
			Объект.Модель     = Объект.Автомобиль.Модель;
			Документы.ДефектовочнаяВедомость.ЗаполнитьКонтрольныеВопросы(Объект);
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(Параметры, "Заказчик") <> Неопределено Тогда
		Объект.Представитель = ПолучитьЗначениеПараметраСтруктуры(Параметры, "Заказчик");
	КонецЕсли;
	
	ЗаполнитьТипыОтветовНаВопросы();
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "КонтрольныеВопросы");
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "ОбнаруженныеНеисправности");
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ПараметрыДействия = Новый Структура;
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		
		Модифицированность = Истина;
		
		Если ТипЗнч(Источник) = Тип("Массив") Тогда 
			
			ПрисоединенныйФайлСсылка = Источник[0];
			
			Если ЗначениеЗаполнено(ПрисоединенныйФайлСсылка)
				И ТипЗнч(ПрисоединенныйФайлСсылка) = Тип("СправочникСсылка.ДефектовочнаяВедомостьПрисоединенныеФайлы") Тогда
				
				ОбработкаЗаписиПрисоединенногоФайлаНаСервере(ПрисоединенныйФайлСсылка);
					
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		Возврат;
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// Штрихкодирование
	ШтрихкодированиеКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец Штрихкодирование
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьТипыОтветовНаВопросы();
		
	// Выведем информацию по пробегу
	Элементы.ПробегРасширеннаяПодсказка.Заголовок = АвтомобилиКлиентСервер.
		ПредставлениеПредыдущихПробегов(Объект.Автомобиль, СформироватьМассивДатПробега(Объект));
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);
	
КонецПроцедуры 

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РегистрироватьИзмененияДокумента", Истина);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Штрихкодирование
	ШтрихкодированиеВызовСервера.ЗаписатьШтрихкодДокумента(ЭтотОбъект, Объект);
	// Конец Штрихкодирование
	
	// Выведем информацию по пробегу
	Элементы.ПробегРасширеннаяПодсказка.Заголовок = АвтомобилиКлиентСервер.
		ПредставлениеПредыдущихПробегов(Объект.Автомобиль, СформироватьМассивДатПробега(Объект));
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры 

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ДефектовочнаяВедомость.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ДефектовочнаяВедомость.ДатаПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	КонтрагентПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ДефектовочнаяВедомость.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура АвтомобильПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	АвтомобильПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура АвтомобильПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ДефектовочнаяВедомость.АвтомобильПриИзменении(Объект, ПараметрыДействия);
	Неисправности.Параметры.УстановитьЗначениеПараметра("Автомобиль", Объект.Автомобиль);
	Элементы.Неисправности.Обновить();
	Элементы.ПробегРасширеннаяПодсказка.Заголовок = АвтомобилиКлиентСервер.
		ПредставлениеПредыдущихПробегов(Объект.Автомобиль, СформироватьМассивДатПробега(Объект));
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаОсмотраПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаОсмотраПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ДатаОсмотраПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ДефектовочнаяВедомость.ДатаОсмотраПриИзменении(Объект, ПараметрыДействия);
	Элементы.ПробегРасширеннаяПодсказка.Заголовок = АвтомобилиКлиентСервер.
		ПредставлениеПредыдущихПробегов(Объект.Автомобиль, СформироватьМассивДатПробега(Объект));
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МодельПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	МодельПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура МодельПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Проверим наличие ответов на контрольные вопросы.
	НеЗаполненыОтветы = Истина;
	Для Каждого ТекущаяСтрока Из Объект.КонтрольныеВопросы Цикл
		Если ЗначениеЗаполнено(ТекущаяСтрока.Ответ) Тогда
			ЗаполненыОтветы = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НеЗаполненыОтветы Тогда
		Документы.ДефектовочнаяВедомость.ЗаполнитьКонтрольныеВопросы(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(
			РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(
				Объект.ФайлКартинки,
				УникальныйИдентификатор));
	Иначе
		АдресКартинкиКонтекстноеМенюДобавить(Неопределено);
	КонецЕсли;
	
КонецПроцедуры // АдресКартинкиНажатие()

#Область ОбработчикиВыводаИзображенийВТабличнойЧастиОбнаруженныеНеисправности

// Процедура для вывода изображений
//
&НаКлиенте
Процедура ПолучитьИзображениеОбработчикОжидания()
	
	Если Элементы.ОбнаруженныеНеисправности.ТекущиеДанные = Неопределено ИЛИ НЕ Элементы.ОбнаруженныеНеисправностиОтобразитьКартинки.Пометка Тогда
		ТекущаяКартинка = ПредопределенноеЗначение("Справочник.ДефектовочнаяВедомостьПрисоединенныеФайлы.ПустаяСсылка");
		ОбнаруженнаяНеисправностьАдресКартинки = "";
		Возврат;
	Иначе
		ПолучитьИзображение(Элементы.ОбнаруженныеНеисправности.ТекущиеДанные.Медиафайл);
	КонецЕсли;
	
КонецПроцедуры

// Процедура для вывода изображений на сервере
//
&НаСервере
Процедура ПолучитьИзображение(Картинка)
	
	// Сформируем список форматов изображения
	СписокИзображений = ПолучитьМассивИзображений(Картинка);
	
	// Проверим тип выбранного файла картинки
	Если СписокИзображений.Количество() > 0 Тогда
		ТекущаяКартинка = СписокИзображений[0];
	Иначе
		ТекущаяКартинка = Справочники.ДефектовочнаяВедомостьПрисоединенныеФайлы.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ ТекущаяКартинка.Пустая() Тогда
		ОбнаруженнаяНеисправностьАдресКартинки = НавигационнаяСсылкаКартинкиОбнаруженнаяНеисправность(ТекущаяКартинка, УникальныйИдентификатор);
	Иначе
		ОбнаруженнаяНеисправностьАдресКартинки = "";
	КонецЕсли;
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

// Процедура для вывода последующих изображений
//
&НаСервере
Функция ПолучитьМассивИзображений(Картинка)
	
	СписокФайлов = РаботаСФайламиАльфаАвтоВызовСервера.ВсеПодчиненныеФайлы(Объект.Ссылка);
	
	// Сформируем список форматов изображения
	СписокИзображений = Новый Массив;
	Для Каждого Файл Из СписокФайлов Цикл
		Если НЕ Файл.ПометкаУдаления И Файл.ИндексКартинки > 41 И Файл.ИндексКартинки < 51 И Файл = Картинка Тогда
			СписокИзображений.Добавить(Файл);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокИзображений;
	
КонецФункции
// Функция для получения ссылки на картинку для ее отображения
//
&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинкиОбнаруженнаяНеисправность(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ОбнаруженнаяНеисправностьАдресКартинки = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбнаруженнаяНеисправностьАдресКартинки = "";
	КонецПопытки;
	
	Возврат ОбнаруженнаяНеисправностьАдресКартинки;
	
КонецФункции

// Обработчик события возникающего на клиенте при нажатии реквизита "АдресКартинки".
//
&НаКлиенте
Процедура ОбнаруженнаяНеисправностьАдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ТекущиеДанные = ?(Элементы.ОбнаруженныеНеисправности.ТекущиеДанные = Неопределено, Неопределено, Элементы.ОбнаруженныеНеисправности.ТекущиеДанные.Медиафайл);
	Если ЗначениеЗаполнено(ТекущаяКартинка) И ЗначениеЗаполнено(ТекущиеДанные) Тогда
		КартинкаДляПросмотра = ТекущиеДанные;
		
		Если (ЗначениеЗаполнено(КартинкаДляПросмотра) И ЗначениеЗаполнено(ТекущаяКартинка) И НЕ ТекущаяКартинка = КартинкаДляПросмотра)
			ИЛИ НЕ ЗначениеЗаполнено(КартинкаДляПросмотра) Тогда
			КартинкаДляПросмотра = ТекущаяКартинка;
		КонецЕсли;
		
		РаботаСФайламиКлиент.ОткрытьФайл(
			РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(
			КартинкаДляПросмотра,
			УникальныйИдентификатор));
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Отсутствует изображение для просмотра'"));
	КонецЕсли;
	
КонецПроцедуры 

// Обработчик события возникающего на клиенте при нажатии реквизита "АдресКартинки".
//
&НаКлиенте
Процедура ОбнаруженнаяРанееНеисправностьАдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ТекущиеДанные = ?(Элементы.Неисправности.ТекущиеДанные = Неопределено,
		Неопределено,
		Элементы.Неисправности.ТекущиеДанные.Медиафайл);
	Если ЗначениеЗаполнено(ТекущаяКартинкаРанее) И ЗначениеЗаполнено(ТекущиеДанные) Тогда
		КартинкаДляПросмотра = ТекущиеДанные;
		
		Если (ЗначениеЗаполнено(КартинкаДляПросмотра)
				И ЗначениеЗаполнено(ТекущаяКартинкаРанее)
				И НЕ ТекущаяКартинкаРанее = КартинкаДляПросмотра)
			ИЛИ НЕ ЗначениеЗаполнено(КартинкаДляПросмотра) Тогда
			
			КартинкаДляПросмотра = ТекущаяКартинкаРанее;
			
		КонецЕсли;
		
		РаботаСФайламиКлиент.ОткрытьФайл(
			РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(
			КартинкаДляПросмотра,
			УникальныйИдентификатор));
	Иначе
		ПоказатьПредупреждение(, НСтр("ru='Отсутствует изображение для просмотра'"), 2);
	КонецЕсли;
	
КонецПроцедуры 
#КонецОбласти

#Область ОбработчикиВыводаИзображенийВТабличнойЧастиНеисправности

// Процедура для вывода изображений
//
&НаКлиенте
Процедура ПолучитьИзображениеНеисправностиОбработчикОжидания()
	
	ТекущиеДанные = Элементы.Неисправности.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ НЕ Элементы.ОбнаруженныеНеисправностиОтобразитьКартинки.Пометка Тогда
		ТекущаяКартинкаРанее = ПредопределенноеЗначение("Справочник.ДефектовочнаяВедомостьПрисоединенныеФайлы.ПустаяСсылка");
		ОбнаруженнаяРанееНеисправностьАдресКартинки = "";
		Возврат;
	Иначе
		ПолучитьИзображениеНеисправности(ТекущиеДанные.Медиафайл, ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

// Процедура для вывода изображений на сервере
//
&НаСервере
Процедура ПолучитьИзображениеНеисправности(Картинка, Документ)
	
	// Сформируем список форматов изображения
	СписокИзображений = ПолучитьМассивИзображенийНеисправности(Картинка, Документ);
	
	// Проверим тип выбранного файла картинки
	Если СписокИзображений.Количество() > 0 Тогда
		ТекущаяКартинкаРанее = СписокИзображений[0];
	Иначе
		ТекущаяКартинкаРанее = Справочники.ДефектовочнаяВедомостьПрисоединенныеФайлы.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ ТекущаяКартинкаРанее.Пустая() Тогда
		ОбнаруженнаяРанееНеисправностьАдресКартинки = НавигационнаяСсылкаКартинкиОбнаруженнаяНеисправность(
			ТекущаяКартинкаРанее,
			УникальныйИдентификатор);
	Иначе
		ОбнаруженнаяРанееНеисправностьАдресКартинки = "";
	КонецЕсли;
	
	// Обновляем отображение элементов формы
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

// Процедура для вывода последующих изображений
//
&НаСервере
Функция ПолучитьМассивИзображенийНеисправности(Картинка, Документ)
	
	СписокФайлов = РаботаСФайламиАльфаАвтоВызовСервера.ВсеПодчиненныеФайлы(Документ);
	
	// Сформируем список форматов изображения
	СписокИзображений = Новый Массив;
	Для Каждого Файл Из СписокФайлов Цикл
		Если НЕ Файл.ПометкаУдаления И Файл.ИндексКартинки > 41 И Файл.ИндексКартинки < 51 И Файл = Картинка Тогда
			СписокИзображений.Добавить(Файл);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокИзображений;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтрольныеВопросы

&НаКлиенте
Процедура КонтрольныеВопросыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.КонтрольныеВопросы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьТипОтветаНаВопрос(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольныеВопросыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбнаруженныеНеисправности

&НаСервере
Процедура ОбнаруженныеНеисправностиОтобразитьКартинкиНаСервере()
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнаруженныеНеисправностиПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ПолучитьИзображениеОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнаруженныеНеисправностиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПолучитьИзображениеОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнаруженныеНеисправностиМедиаФайлПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ПолучитьИзображениеОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнаруженныеНеисправностиМедиаФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(,Нстр("ru = 'Для выбора файла необходимо записать документ.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла",  Объект.Ссылка);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",    Истина);
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ВыборМедиафайлаВОбнаруженныеНеисправности"),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнаруженныеНеисправностиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ОбнаруженныеНеисправности.ТекущиеДанные;
	Если НЕ ОтменаРедактирования И (НЕ ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторПовреждения) ИЛИ НоваяСтрока) Тогда
		ТекущиеДанные.ИдентификаторПовреждения = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПолучитьИзображениеОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНеисправности

&НаКлиенте
Процедура НеисправностиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПолучитьИзображениеНеисправностиОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НеисправностиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Элементы.Неисправности.ТекущиеДанные.Документ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)
	
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбнаруженныеНеисправностиОтобразитьКартинки(Команда)
	
	Элементы.ОбнаруженныеНеисправностиОтобразитьКартинки.Пометка = НЕ Элементы.ОбнаруженныеНеисправностиОтобразитьКартинки.Пометка;
	ПолучитьИзображениеОбработчикОжидания();
	ОбнаруженныеНеисправностиОтобразитьКартинкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнаруженныеНеисправностиПрисоединенныйФайл(Команда)
	
	Если Элементы.ОбнаруженныеНеисправности.ТекущаяСтрока = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбнаруженныеНеисправностиПрисоединенныеФайлыСтроки(Элементы.ОбнаруженныеНеисправности.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТипыОтветовНаВопросы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТаблицаВопросов.Вопрос КАК Вопрос
	               |ПОМЕСТИТЬ СписокВопросов
	               |ИЗ
	               |	&ТаблицаВопросов КАК ТаблицаВопросов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СписокВопросов.Вопрос КАК Вопрос,
	               |	ВопросыДляАнкетирования.ТипОтвета КАК ТипОтвета,
	               |	ВопросыДляАнкетирования.Длина КАК Длина,
	               |	ВопросыДляАнкетирования.МинимальноеЗначение КАК МинимальноеЗначение,
	               |	ВопросыДляАнкетирования.МаксимальноеЗначение КАК МаксимальноеЗначение,
	               |	ВопросыДляАнкетирования.Точность КАК Точность,
	               |	ВопросыДляАнкетирования.ТипЗначения КАК ТипЗначения
	               |ИЗ
	               |	СписокВопросов КАК СписокВопросов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ВопросыДляАнкетирования КАК ВопросыДляАнкетирования
	               |		ПО СписокВопросов.Вопрос.ЭлементарныйВопрос = ВопросыДляАнкетирования.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВариантыОтветовАнкет.Ссылка КАК Ответ,
	               |	СписокВопросов.Вопрос КАК Вопрос,
	               |	ВариантыОтветовАнкет.Представление КАК Представление
	               |ИЗ
	               |	СписокВопросов КАК СписокВопросов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыОтветовАнкет КАК ВариантыОтветовАнкет
	               |		ПО СписокВопросов.Вопрос.ЭлементарныйВопрос = ВариантыОтветовАнкет.Владелец";
	Запрос.УстановитьПараметр("ТаблицаВопросов", Объект.КонтрольныеВопросы.Выгрузить());
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	Выборка = ПакетЗапросов[1].Выбрать();
	СтруктураПоиска = Новый Структура("Вопрос");
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска.Вставить("Вопрос", Выборка.Вопрос);
		НайденныеСтроки = Объект.КонтрольныеВопросы.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Выборка,, "Вопрос");
		КонецЦикла;
		
	КонецЦикла;
	
	ВариантыОтветовНаВопросы.Загрузить(ПакетЗапросов[2].Выгрузить());
	
КонецПроцедуры // ЗаполнитьТипыОтветовНаВопросы()

&НаКлиенте
Процедура НастроитьТипОтветаНаВопрос(ИдентификаторВопроса)
	
	ТекущийВопрос = Объект.КонтрольныеВопросы.НайтиПоИдентификатору(ИдентификаторВопроса);
	
	СписокВыбора = Элементы.КонтрольныеВопросыОтвет.СписокВыбора;
	СписокВыбора.Очистить();
	
	ОграничениеТипа = Неопределено;
	
	КнопкаВыпадающегоСписка = Ложь;
	Если ТекущийВопрос.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.Булево") Тогда
		ОграничениеТипа = Новый ОписаниеТипов("Булево");
		СписокВыбора.Добавить(Истина);
		СписокВыбора.Добавить(Ложь);
	ИначеЕсли ТекущийВопрос.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.Строка")Тогда
		ОграничениеТипа = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(ТекущийВопрос.Длина));
	ИначеЕсли ТекущийВопрос.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.Текст") Тогда
		ОграничениеТипа = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(ТекущийВопрос.Длина));
	ИначеЕсли ТекущийВопрос.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.Дата") Тогда
		ОграничениеТипа = Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ИначеЕсли ТекущийВопрос.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.Число") Тогда
		ОграничениеТипа = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(ТекущийВопрос.Длина,ТекущийВопрос.Точность));
	ИначеЕсли ТекущийВопрос.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.ЗначениеИнформационнойБазы") Тогда
		ОграничениеТипа = ТекущийВопрос.ТипЗначения;
	ИначеЕсли ТекущийВопрос.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.ОдинВариантИз")
		ИЛИ ТекущийВопрос.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.НесколькоВариантовИз") Тогда
		ОграничениеТипа = ТекущийВопрос.ТипЗначения;
		НайденныеСтроки = ВариантыОтветовНаВопросы.НайтиСтроки(Новый Структура("Вопрос", ТекущийВопрос.Вопрос));
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			СписокВыбора.Добавить(ТекущаяСтрока.Ответ, ТекущаяСтрока.Представление);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ОграничениеТипа = Неопределено Тогда
		Элементы.КонтрольныеВопросыОтвет.ОграничениеТипа = ОграничениеТипа;
	КонецЕсли;
	
	Если СписокВыбора.Количество() > 0 Тогда
		Элементы.КонтрольныеВопросыОтвет.РежимВыбораИзСписка     = Истина;
		Элементы.КонтрольныеВопросыОтвет.КнопкаВыпадающегоСписка = Истина;
		Элементы.КонтрольныеВопросыОтвет.КнопкаВыбора            = Ложь;
	Иначе
		Элементы.КонтрольныеВопросыОтвет.РежимВыбораИзСписка     = КнопкаВыпадающегоСписка;
		Элементы.КонтрольныеВопросыОтвет.КнопкаВыпадающегоСписка = КнопкаВыпадающегоСписка;
		Элементы.КонтрольныеВопросыОтвет.КнопкаВыбора            = Истина;
	КонецЕсли;
	
КонецПроцедуры // НастроитьТипОтветаНаВопрос()

// Производит настройку условного оформления формы.
//
&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Вызываем общий обработчик действия
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформление(ЭтотОбъект);
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	//// Создаем условие отбора
	//ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.КонтрольныеВопросы.ТипОтвета");
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	//ЭлементОтбора.ПравоеЗначение = Перечисления.ТипыОтветовНаВопрос.БезЗначения;
	//ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементОформления.Использование = Истина;
	
	ПолеДляОформленияГруппы = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеДляОформленияГруппы.Поле = Новый ПолеКомпоновкиДанных("КонтрольныеВопросыОтвет");
	ПолеДляОформленияГруппы.Использование = Истина;
	
КонецПроцедуры // СформироватьУсловноеОформление()

&НаКлиенте
Процедура Подключаемый_ОбработкаВопросаПриИзмененииАвтомобиля(РезультатОповещения, ДополнительныеПараметры = Неопределено)
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	Если РезультатОповещения = КодВозвратаДиалога.Нет Тогда
		ПараметрыДействия.Вставить("НеПерезаполнятьКонтрольныеВопросы");
	КонецЕсли;
	
	// Обработаем событие в контексте сервера
	АвтомобильПриИзмененииНаСервере(ПараметрыДействия);
	
	// Обработаем изменения требующие ответа от пользователя
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры // Подключаемый_ОбработкаВопросаПриИзмененииАвтомобиля()

// Функция для получения ссылки на картинку для ее отображения
//
&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		АдресКартинки = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		АдресКартинки = "";
	КонецПопытки;
	
	Возврат АдресКартинки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьМассивДатПробега(Объект)
	
	ДатыПробега = Новый Массив;
	ДатыПробега.Добавить(?(ЗначениеЗаполнено(Объект.ДатаОсмотра), Объект.ДатаОсмотра, Объект.Дата));
	
	Возврат ДатыПробега;
	
КонецФункции

&НаСервере
Процедура УстановитьСхемуТС(СхемаТС)

	Объект.ФайлКартинки = СхемаТС;
	
	ПолучитьСхемуТС();
	
КонецПроцедуры // УстановитьСхемуТС()

&НаСервере
Процедура ПолучитьСхемуТС()
	
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
		Элементы.АдресКартинкиКонтекстноеМенюУдалить.Доступность = Истина;
	Иначе
		АдресКартинки = "";
		Элементы.АдресКартинкиКонтекстноеМенюУдалить.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСхемуТС()

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// Вызываем общий обработчик события настройки параметров выбора
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
	Неисправности.Параметры.УстановитьЗначениеПараметра("Документ",   Объект.Ссылка);
	Неисправности.Параметры.УстановитьЗначениеПараметра("Автомобиль", Объект.Автомобиль);
	
КонецПроцедуры 

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	// Вызываем общий обработчик действия
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	Элементы.Модель.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Автомобиль);
	
	// Настроим отображение медиафайлов на вкладке обнаруженных неисправностей
	ОтобразитьКартинку = Элементы.ОбнаруженныеНеисправностиОтобразитьКартинки.Пометка;
	Элементы.ОбнаруженнаяНеисправностьАдресКартинки.Видимость      = ОтобразитьКартинку;
	Элементы.ОбнаруженнаяРанееНеисправностьАдресКартинки.Видимость = ОтобразитьКартинку;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Вызываем общий обработчик события в контексте клиента
	Если НЕ УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "ВыборМедиафайлаВОбнаруженныеНеисправности" Тогда
		Элементы.ОбнаруженныеНеисправности.ТекущиеДанные.Медиафайл = РезультатОповещения;
		
	ИначеЕсли ДополнительныеПараметры = "ВыборМедиафайлаВСхемаТС" Тогда
		Если РезультатОповещения <> Неопределено Тогда
			УстановитьСхемуТС(РезультатОповещения);
			Модифицированность = Истина;
		КонецЕсли;

	ИначеЕсли ДополнительныеПараметры = "УдалениеМедиафайлаВСхемаТС" Тогда
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			УстановитьСхемуТС(Неопределено);
			Модифицированность = Истина;
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	// Обработаем событие в контексте сервера
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	
	// Выведем информацию по пробегу
	ИзмененныеРеквизиты = ПолучитьЗначениеПараметраСтруктуры(РезультатОповещения, "ИзмененныеРеквизиты");
	
	Если ЗначениеЗаполнено(ПолучитьЗначениеПараметраСтруктуры(ИзмененныеРеквизиты, "Дата")) Тогда
		Элементы.ПробегРасширеннаяПодсказка.Заголовок = АвтомобилиКлиентСервер.
			ПредставлениеПредыдущихПробегов(Объект.Автомобиль, СформироватьМассивДатПробега(Объект));
	КонецЕсли;
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаОповещения()

&НаКлиенте
Процедура ОбнаруженныеНеисправностиПрисоединенныеФайлыСтроки(ИдентификаторСтроки)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Обработчик = Новый ОписаниеОповещения(
			"ОбнаруженныеНеисправностиПрисоединенныеФайлыСтрокиВопросЗавершение",
			ЭтотОбъект,
			ИдентификаторСтроки);
		
		ПоказатьВопрос(
			Обработчик,
			НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'"),
			РежимДиалогаВопрос.ДаНет
		);
		Возврат;
		
	КонецЕсли;
	
	ОбнаруженныеНеисправностиПрисоединенныеФайлыДобавитьОткрытьФорму(ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнаруженныеНеисправностиПрисоединенныеФайлыДобавитьОткрытьФорму(ИдентификаторСтроки)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	ТекущиеДанные = Объект.ОбнаруженныеНеисправности.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.МедиаФайл) Тогда
		
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнаруженныеНеисправностиПрисоединенныеФайлыСтрокиВопросЗавершение(Ответ, ИдентификаторСтроки) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ Записать() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбнаруженныеНеисправностиПрисоединенныеФайлыДобавитьОткрытьФорму(ИдентификаторСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаписиПрисоединенногоФайлаНаСервере(ПрисоединенныйФайлСсылка)
	
	Если ПрисоединенныйФайлСсылка.ВладелецФайла <> Объект.Ссылка Тогда
		Возврат;
	КонецЕсли;
	
	// Получим данные текущей строки табличной части
	Если Элементы.ОбнаруженныеНеисправности.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.ОбнаруженныеНеисправности.
						НайтиПоИдентификатору(Элементы.ОбнаруженныеНеисправности.ТекущаяСтрока);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.МедиаФайл = ПрисоединенныйФайлСсылка;
	
КонецПроцедуры 

#КонецОбласти

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	                                                                                                                
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура Подключаемый_ШтрихкодированиеОбработкаОповещения(РезультатОповещения,
	ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если РезультатОповещения.Свойство("Действие") Тогда
		ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры)

	ШтрихкодированиеВызовСервера.ОбработкаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры, , Объект);

КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиКонтекстноеМенюДобавить(Команда)

	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(,Нстр("ru = 'Для выбора файла необходимо записать документ.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла",  Объект.Ссылка);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",    Истина);
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "ВыборМедиафайлаВСхемаТС"),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиКонтекстноеМенюУдалить(Команда)

	ТекстВопроса = НСтр("ru = 'Удалить (очистить) картинку схемы ТС?
		|Картинка схемы ТС в присоединенных файлах удалена не будет.'");
		
	ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, "УдалениеМедиафайлаВСхемаТС");
	ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Удаление схемы ТС'"));

КонецПроцедуры

#КонецОбласти

#КонецОбласти