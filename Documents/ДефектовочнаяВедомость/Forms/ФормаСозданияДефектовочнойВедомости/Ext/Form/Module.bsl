///////////////////////////////////////////////////////////////////////////////
// Модуль формы заполнения реквизитов документа "Дефектовочная ведомость"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаявкаНаРемонт = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ЗаявкаНаРемонт", Неопределено);
	
	Если НЕ ЗначениеЗаполнено(ЗаявкаНаРемонт) ИЛИ ТипЗнч(ЗаявкаНаРемонт) <> Тип("ДокументСсылка.ЗаявкаНаРемонт") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	VINАвтомобиля = ЗаявкаНаРемонт.VIN;
	
	// заполнение телефона
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ЗаявкаНаРемонт);
	
	Если ЗначениеЗаполнено(ЗаявкаНаРемонт.ВидРемонта) Тогда
		БесплатныйРемонт = (ЗаявкаНаРемонт.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный);
	Иначе
		БесплатныйРемонт = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаявкаНаРемонт.ГосНомер) Тогда
		ГосНомерЗнР = ЗаявкаНаРемонт.ГосНомер;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаявкаНаРемонт.VIN) Тогда
		ГосНомерЗнР = ЗаявкаНаРемонт.VIN;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаявкаНаРемонт.Автомобиль) Тогда
		АвтомобильЗнР = Строка(ЗаявкаНаРемонт.Автомобиль);
		Автомобиль = ЗаявкаНаРемонт.Автомобиль;
	Иначе
		АвтомобильЗнР = Строка(ЗаявкаНаРемонт.Модель);
		ПоискАвтомобиля();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаявкаНаРемонт.Модель.Марка) Тогда
		МаркаАвтомобиляЗнР = Строка(ЗаявкаНаРемонт.Модель.Марка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаявкаНаРемонт.Заказчик) Тогда
		ЗаказчикЗнР = Строка(ЗаявкаНаРемонт.Заказчик);
		Заказчик = ЗаявкаНаРемонт.Заказчик;
	Иначе
		ЗаказчикЗнР = ЗаявкаНаРемонт.ОбращениеККлиенту;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаявкаНаРемонт.Контрагент) Тогда
		Если ТипЗнч(ЗаявкаНаРемонт.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			ПлательщикЗнР = ЗаявкаНаРемонт.Контрагент;
			Если НЕ БесплатныйРемонт Тогда
				Плательщик = ЗаявкаНаРемонт.Контрагент;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НЕ БесплатныйРемонт И ЗначениеЗаполнено(ЗаявкаНаРемонт.Заказчик) И ТипЗнч(ЗаявкаНаРемонт.Заказчик) = Тип("СправочникСсылка.Контрагенты") Тогда
			Плательщик = ЗаявкаНаРемонт.Заказчик;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьПредставлениеТелефона();
	
	Если БесплатныйРемонт Тогда
		Элементы.Плательщик.Доступность                   = Ложь;
		Элементы.НадписьНазначитьПлательщиком.Доступность = Ложь;
		Элементы.Плательщик.АвтоОтметкаНезаполненного     = Ложь;
	КонецЕсли;
	
	ОбновитьСтатус();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Обработчик события возникающего на клиенте во всех формах при вызове метода Оповестить.
//
// Параметры:
//  ИмяСобытия - Строка       - Имя, идентифицирующее событие.
//  Параметр   - Произвольный - Параметр сообщения.
//  Источник   - Произвольный - Источник события.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанКонтрагент" Тогда
		Если Параметр <> Неопределено 
			И ТипЗнч(Параметр) = Тип("СправочникСсылка.Контрагенты") 
			И ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения")
			И Источник.ВладелецФормы = ЭтотОбъект Тогда
			Заказчик = Параметр;
			ОбновитьСтатус();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаписанАвтомобиль" Тогда
		Если Параметр <> Неопределено 
			И ТипЗнч(Параметр) = Тип("Структура") 
			И ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения")
			И Источник.ВладелецФормы = ЭтотОбъект Тогда
			Автомобиль = Параметр.Автомобиль;
			Если ЗначениеЗаполнено(Параметр.Хозяин) Тогда 
				Заказчик = Параметр.Хозяин;
			КонецЕсли;
			ОбновитьСтатус();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего на клиенте при изменении данных реквизита "Автомобиль" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура АвтомобильПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	//Владелец = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин, ТекущаяДата());
	//Если (ЗначениеЗаполнено(Владелец)) И (НЕ Заказчик = Владелец) Тогда
	//	Заказчик = Владелец;
	//КонецЕсли;
	
	// Проверим наличие заметок по выбранному объекту.
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Автомобиль, ПараметрыДействия);
	
	ОбновитьСтатус();
	
КонецПроцедуры // АвтомобильПриИзмененииНаСервере()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Автомобиль".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура АвтомобильПриИзменении(Элемент)
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	// Обработаем событие в контексте сервера
	АвтомобильПриИзмененииНаСервере(ПараметрыДействия);
	
	// Обработаем изменения требующие ответа от пользователя
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Телефон".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ПредставлениеТелефонаПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(ПредставлениеТелефона) Тогда
		// разберем телефон на составляющие
		ВремПредставление = Прав(ПредставлениеТелефона, СтрДлина(ПредставлениеТелефона) - 1);
		
		ПозицияРазделителя = Найти(ВремПредставление, "-");
		КодРегиона = Лев(ВремПредставление, ПозицияРазделителя - 1);
		ВремПредставление = Сред(ВремПредставление, ПозицияРазделителя + 1);
		
		ПозицияРазделителя = Найти(ВремПредставление, "-");
		КодГорода = СтрЗаменить(СтрЗаменить(Лев(ВремПредставление, ПозицияРазделителя - 1), "(", ""),")","");
		ВремПредставление = Сред(ВремПредставление, ПозицияРазделителя + 1);
		
		ПозицияРазделителя = Найти(ВремПредставление, "-");
		НомерТелефона = Лев(ВремПредставление, ПозицияРазделителя - 1);
		ВремПредставление = Сред(ВремПредставление, ПозицияРазделителя + 1);
		
		ПозицияРазделителя = Найти(ВремПредставление, "доб.");
		ВнутреннийНомер = Прав(ВремПредставление, СтрДлина(ВремПредставление) - 4);
		
	Иначе
		КодРегиона      = "";
		КодГорода       = "";
		НомерТелефона   = "";
		ВнутреннийНомер = "";
	КонецЕсли;
	
	СформироватьПредставлениеТелефона();
	
КонецПроцедуры // ПредставлениеТелефонаПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Заказчик".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ЗаказчикПриИзменении(Элемент)
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	// Обработаем событие в контексте сервера
	ЗаказчикПриИзмененииНаСервере(ПараметрыДействия);
	
	// Обработаем изменения требующие ответа от пользователя
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
	ОбновитьСтатус();
	
КонецПроцедуры // ЗаказчикПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Заказчик" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ЗаказчикПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Проверим наличие заметок по выбранному объекту.
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Заказчик, ПараметрыДействия);
	
КонецПроцедуры // ЗаказчикПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Плательщик".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ПлательщикПриИзменении(Элемент)
	
	// Определим структуру параметров обработки текущего события
	ПараметрыДействия = Новый Структура;
	
	// Обработаем событие в контексте сервера
	ПлательщикПриИзмененииНаСервере(ПараметрыДействия);
	
	// Обработаем изменения требующие ответа от пользователя
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
	ОбновитьСтатус();
	
КонецПроцедуры // ПлательщикПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "Плательщик" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ПлательщикПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Проверим наличие заметок по выбранному объекту.
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Плательщик, ПараметрыДействия);
	
КонецПроцедуры // ПлательщикПриИзменении()

// Обработчик события возникающего на клиенте при изменении данных реквизита "ГосНомер".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ГосНомерПриИзменении(Элемент)
	
	Отказ = АвтомобилиСервер.ПроверитьКорректностьГосНомера(ЭтотОбъект, ГосНомер, Истина);
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовУправленияОбщегоНазначения

// Обработчик события возникающего на клиенте при нажатии на надпись "Назначить плательщиком".
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура НадписьНазначитьПлательщикомНажатие(Элемент)
	
	Плательщик = Заказчик;
	ОбновитьСтатус();
	
КонецПроцедуры // НадписьНазначитьПлательщикомНажатие()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события нажатия кнопки "Найти автомобиль".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура НайтиАвтомобиль(Команда)
	
	Результат = ПоискАвтомобиля();
	
	Если ТипЗнч(Результат) = Тип("Число") Тогда
		ВывестиРезультатПредупреждения(Результат);
	ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда
		ПараметрыВыбора = Новый Структура;
		ПараметрыВыбора.Вставить("ЗакрыватьПриВыборе",            Истина);
		ПараметрыВыбора.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
		ПараметрыВыбора.Вставить("МножественныйВыбор",            Ложь);
		ПараметрыВыбора.Вставить("РежимВыбора",                   Истина);
		ПараметрыВыбора.Вставить("АдресСписка",                   Результат);
		
		ОбработкаОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаВыбораАвтомобиля", ЭтотОбъект);
		
		ОткрытьФорму("Справочник.Автомобили.Форма.ФормаВыбораИзТаблицы", ПараметрыВыбора, ЭтотОбъект,,,, ОбработкаОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
	ОбновитьСтатус();
	
КонецПроцедуры // НайтиАвтомобиль()

// Обработчик события нажатия кнопки "Создать автомобиль".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СоздатьАвтомобиль(Команда)
	
	МодельАвтомобиля = ПолучениеМоделиАвтомобиля();
	МаркаАвтомобиля  = ПолучениеМаркиАвтомобиля();
	
	ЗначенияЗаполнения = Новый Структура();
	Если ЗначениеЗаполнено(МодельАвтомобиля) Тогда
		ЗначенияЗаполнения.Вставить("Модель", МодельАвтомобиля);
		ЗначенияЗаполнения.Вставить("Марка", МаркаАвтомобиля);
		ЗначенияЗаполнения.Вставить("ВариантКомплектации", ВариантКомплектации);
	Иначе
		ЗначенияЗаполнения.Вставить("Наименование", АвтомобильЗнР);
	КонецЕсли;
	ЗначенияЗаполнения.Вставить("VIN",      VINАвтомобиля);
	ПараметрыВыбора = Новый Структура();
	ПараметрыВыбора.Вставить("ГосНомер", ГосНомер);
	ПараметрыВыбора.Вставить("Владелец", Заказчик);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения,ПараметрыВыбора", ЗначенияЗаполнения,ПараметрыВыбора);
	
	ОткрытьФорму("Справочник.Автомобили.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // СоздатьАвтомобиль()

// Обработчик события нажатия кнопки "Найти контрагента".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура НайтиКонтрагента(Команда)
	
	Результат = ПоискКонтрагента();
	
	Если ТипЗнч(Результат) = Тип("Число") Тогда
		ВывестиРезультатПредупреждения(Результат);
	ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда
		ПараметрыВыбора = Новый Структура;
		ПараметрыВыбора.Вставить("ЗакрыватьПриВыборе",            Истина);
		ПараметрыВыбора.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
		ПараметрыВыбора.Вставить("МножественныйВыбор",            Ложь);
		ПараметрыВыбора.Вставить("РежимВыбора",                   Истина);
		ПараметрыВыбора.Вставить("АдресСписка",                   Результат);
		
		ОбработкаОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаВыбораЗаказчика", ЭтотОбъект);
		
		ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбораИзТаблицы", ПараметрыВыбора, ЭтотОбъект,,,, ОбработкаОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
	ОбновитьСтатус();
	
КонецПроцедуры // НайтиКонтрагента()

// Обработчик события нажатия кнопки "Создать контрагента".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура СоздатьКонтрагента(Команда)
	
	ПараметрыФормы = Новый Структура();
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("Наименование",       ЗаказчикЗнР);
	ДанныеЗаполнения.Вставить("НаименованиеПолное", ЗаказчикЗнР);
	ДанныеЗаполнения.Вставить("ВидКонтрагента",     ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.Покупатель"));
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ДанныеЗаполнения);
	Если ЗначениеЗаполнено(ПредставлениеТелефона) Тогда
		ПараметрыФормы.Вставить("ТелефонКонтрагента", ТелефонЗаказчика);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // СоздатьКонтрагента()

// Обработчик события нажатия кнопки "Применить".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Применить(Команда)
	
	Если АвтомобилиСервер.ПроверитьКорректностьГосНомера(Неопределено, ГосНомер, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	АдресХранилища = ПоместитьВыбранныеРеквизитыВХранилище();
	
	Закрыть(АдресХранилища);
	
КонецПроцедуры // Применить()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Поиск автомобиля
//
&НаСервере
Функция ПоискАвтомобиля()
	
	Если ПустаяСтрока(АвтомобильЗнР) И ПустаяСтрока(ГосНомер) И ПустаяСтрока(VINАвтомобиля) Тогда
		Возврат 1;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст= "ВЫБРАТЬ
	              |	Автомобили.Ссылка КАК Автомобиль,
	              |	Автомобили.Наименование КАК Наименование,
	              |	Автомобили.VIN КАК VIN
	              |ПОМЕСТИТЬ ТаблицаАвтомобилей
	              |ИЗ
	              |	Справочник.Автомобили КАК Автомобили
	              |ГДЕ
	              |	(&УсловиеПоVIN
	              |			ИЛИ &УсловиеПоНаименованию
	              |			ИЛИ &УсловиеПоМодели)
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	Автомобили.Автомобиль,
	              |	Автомобили.Автомобиль.Наименование,
	              |	Автомобили.Автомобиль.VIN
	              |ИЗ
	              |	РегистрСведений.Автомобили КАК Автомобили
	              |ГДЕ
	              |	(&УсловиеПоГосНомеру
	              |			ИЛИ &УсловиеПоЗначению)
	              |	И Автомобили.ВидЗначения = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяИнформацияАвтомобилей.ГосНомер)
	              |
	              |ИНДЕКСИРОВАТЬ ПО
	              |	Автомобиль
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗЛИЧНЫЕ
	              |	ТаблицаАвтомобилей.Автомобиль КАК Автомобиль,
	              |	ТаблицаАвтомобилей.VIN,
	              |	СрезГосНомер.Значение КАК ГосНомер,
	              |	СрезХозяин.Значение КАК Владелец
	              |ИЗ
	              |	ТаблицаАвтомобилей КАК ТаблицаАвтомобилей
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Автомобили.СрезПоследних(
	              |				,
	              |				ВидЗначения = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяИнформацияАвтомобилей.ГосНомер)
	              |					И Автомобиль В
	              |						(ВЫБРАТЬ
	              |							ТаблицаАвтомобилей.Автомобиль
	              |						ИЗ
	              |							ТаблицаАвтомобилей)) КАК СрезГосНомер
	              |		ПО ТаблицаАвтомобилей.Автомобиль = СрезГосНомер.Автомобиль
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Автомобили.СрезПоследних(
	              |				,
	              |				ВидЗначения = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяИнформацияАвтомобилей.Хозяин)
	              |					И Автомобиль В
	              |						(ВЫБРАТЬ
	              |							ТаблицаАвтомобилей.Автомобиль
	              |						ИЗ
	              |							ТаблицаАвтомобилей)) КАК СрезХозяин
	              |		ПО ТаблицаАвтомобилей.Автомобиль = СрезХозяин.Автомобиль
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	Автомобиль";
	
	Если ЗначениеЗаполнено(АвтомобильЗнР) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоНаименованию","Автомобили.Наименование ПОДОБНО &СтрокаПоиска");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоЗначению","Автомобили.Значение ПОДОБНО &СтрокаПоиска");
		Запрос.УстановитьПараметр("СтрокаПоиска", "%"+АвтомобильЗнР+"%");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоНаименованию","Ложь");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоЗначению","Ложь");
	КонецЕсли;
	
	МодельАвтомобиля = ПолучениеМоделиАвтомобиля();
	
	Если ЗначениеЗаполнено(АвтомобильЗнР) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоМодели","Автомобили.Модель = &СтрокаПоиска");
		Запрос.УстановитьПараметр("СтрокаПоиска", "%"+МодельАвтомобиля+"%");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоМодели","Ложь");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(VINАвтомобиля) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоVIN","Автомобили.VIN ПОДОБНО &СтрокаПоискаVIN");
		Запрос.УстановитьПараметр("СтрокаПоискаVIN", "%"+VINАвтомобиля+"%");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоVIN","Ложь");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГосНомер) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоГосНомеру","Автомобили.Значение ПОДОБНО &ГосНомер");
		Запрос.УстановитьПараметр("ГосНомер", "%"+ГосНомер+"%");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоГосНомеру","Ложь");
	КонецЕсли;
				  
	СписокАвтомобилей = Запрос.Выполнить().Выгрузить();
	
	Если СписокАвтомобилей.Количество() > 50 Тогда
		Возврат 2;
	ИначеЕсли СписокАвтомобилей.Количество() = 1 Тогда
		ВыбранноеЗначение = СписокАвтомобилей[0].Автомобиль;
		Автомобиль = ВыбранноеЗначение;
		Возврат Неопределено;
	ИначеЕсли СписокАвтомобилей.Количество() = 0 Тогда
		Возврат 3;
	КонецЕсли;
	
	Результат = ПоместитьВоВременноеХранилище(СписокАвтомобилей, УникальныйИдентификатор);
	
	Возврат Результат;
	
КонецФункции // ПоискАвтомобиля()

// Поиск контрагента
//
&НаСервере
Функция ПоискКонтрагента()
	
	Если ПустаяСтрока(ЗаказчикЗнР) И ПустаяСтрока(ПредставлениеТелефона) Тогда
		Возврат 1;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если НЕ ПустаяСтрока(ЗаказчикЗнР) Тогда
		Запрос.УстановитьПараметр("СтрокаПоиска", "%"+ЗаказчикЗнР+"%");
		Запрос = Новый Запрос;
		Запрос.Текст= "ВЫБРАТЬ
		              |	КонтактнаяИнформация.Ссылка КАК Контрагент,
		              |	КонтактнаяИнформация.Ссылка.Наименование КАК Наименование,
		              |	КонтактнаяИнформация.Ссылка.ИНН КАК ИНН,
		              |	NULL КАК ШтрихКод
		              |ПОМЕСТИТЬ ТаблицаКонтрагентов
		              |ИЗ
		              |	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
		              |ГДЕ
		              |	(&УсловиеПоТелефону
		              |			ИЛИ КонтактнаяИнформация.Представление ПОДОБНО &СтрокаПоиска)
		              |
		              |ОБЪЕДИНИТЬ ВСЕ
		              |
		              |ВЫБРАТЬ
		              |	Контрагенты.Ссылка,
		              |	Контрагенты.Наименование,
		              |	Контрагенты.ИНН,
		              |	NULL
		              |ИЗ
		              |	Справочник.Контрагенты КАК Контрагенты
		              |ГДЕ
		              |	(Контрагенты.ИНН ПОДОБНО &СтрокаПоиска
		              |			ИЛИ Контрагенты.Наименование ПОДОБНО &СтрокаПоиска
		              |			ИЛИ Контрагенты.НаименованиеПолное ПОДОБНО &СтрокаПоиска)
		              |
		              |ОБЪЕДИНИТЬ ВСЕ
		              |
		              |ВЫБРАТЬ
		              |	ВЫРАЗИТЬ(Карточки.Объект КАК Справочник.Контрагенты),
		              |	Карточки.Объект.Наименование,
		              |	Карточки.Объект.ИНН,
		              |	ШтрихКоды.ШтрихКод
		              |ИЗ
		              |	РегистрСведений.ШтрихКоды КАК ШтрихКоды
		              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Карточки КАК Карточки
		              |		ПО ШтрихКоды.Объект = Карточки.Ссылка
		              |ГДЕ
		              |	ШтрихКоды.ШтрихКод ПОДОБНО &СтрокаПоиска
		              |	И Карточки.Объект ССЫЛКА Справочник.Контрагенты
		              |
		              |ИНДЕКСИРОВАТЬ ПО
		              |	Контрагент
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	КонтактнаяИнформация.Ссылка,
		              |	МАКСИМУМ(ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(100))) КАК КонтактнаяИнформация
		              |ПОМЕСТИТЬ КонтактнаяИнформацияПоУмолчанию
		              |ИЗ
		              |	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
		              |ГДЕ
		              |	КонтактнаяИнформация.ВидДляСписка = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента)
		              |	И КонтактнаяИнформация.Ссылка В
		              |			(ВЫБРАТЬ
		              |				ТаблицаКонтрагентов.Контрагент
		              |			ИЗ
		              |				ТаблицаКонтрагентов КАК ТаблицаКонтрагентов)
		              |
		              |СГРУППИРОВАТЬ ПО
		              |	КонтактнаяИнформация.Ссылка
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ РАЗЛИЧНЫЕ
		              |	ТаблицаКонтрагентов.Контрагент КАК Контрагент,
		              |	ТаблицаКонтрагентов.ИНН,
		              |	КонтактнаяИнформацияПоУмолчанию.КонтактнаяИнформация КАК КонтактнаяИнформация,
		              |	ШтрихКоды.ШтрихКод
		              |ИЗ
		              |	ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
		              |		ЛЕВОЕ СОЕДИНЕНИЕ КонтактнаяИнформацияПоУмолчанию КАК КонтактнаяИнформацияПоУмолчанию
		              |		ПО ТаблицаКонтрагентов.Контрагент = КонтактнаяИнформацияПоУмолчанию.Ссылка
		              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихКоды КАК ШтрихКоды
		              |		ПО ТаблицаКонтрагентов.Контрагент = ШтрихКоды.Объект.Объект
		              |
		              |УПОРЯДОЧИТЬ ПО
		              |	Контрагент";
	    Запрос.УстановитьПараметр("СтрокаПоиска", "%"+ЗаказчикЗнР+"%");
		Если ЗначениеЗаполнено(ТелефонЗаказчика) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоТелефону","КонтактнаяИнформация.Представление ПОДОБНО &ПредставлениеТелефона");
			Запрос.УстановитьПараметр("ПредставлениеТелефона", "%"+ТелефонЗаказчика+"%");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоТелефону","Ложь");
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст= "ВЫБРАТЬ
		              |	КонтактнаяИнформация.Ссылка КАК Контрагент,
		              |	КонтактнаяИнформация.Ссылка.Наименование КАК Наименование,
		              |	КонтактнаяИнформация.Ссылка.ИНН КАК ИНН
		              |ПОМЕСТИТЬ ТаблицаКонтрагентов
		              |ИЗ
		              |	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
		              |ГДЕ
		              |	КонтактнаяИнформация.Представление ПОДОБНО &СтрокаПоиска
		              |
		              |ИНДЕКСИРОВАТЬ ПО
		              |	Контрагент
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	КонтактнаяИнформация.Ссылка,
		              |	МАКСИМУМ(ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(100))) КАК КонтактнаяИнформация
		              |ПОМЕСТИТЬ КонтактнаяИнформацияПоУмолчанию
		              |ИЗ
		              |	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
		              |ГДЕ
		              |	КонтактнаяИнформация.ВидДляСписка = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента)
		              |	И КонтактнаяИнформация.Ссылка В
		              |			(ВЫБРАТЬ
		              |				ТаблицаКонтрагентов.Контрагент
		              |			ИЗ
		              |				ТаблицаКонтрагентов КАК ТаблицаКонтрагентов)
		              |
		              |СГРУППИРОВАТЬ ПО
		              |	КонтактнаяИнформация.Ссылка
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ РАЗЛИЧНЫЕ
		              |	ТаблицаКонтрагентов.Контрагент КАК Контрагент,
		              |	ТаблицаКонтрагентов.ИНН,
		              |	КонтактнаяИнформацияПоУмолчанию.КонтактнаяИнформация КАК КонтактнаяИнформация,
		              |	ШтрихКоды.ШтрихКод
		              |ИЗ
		              |	ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
		              |		ЛЕВОЕ СОЕДИНЕНИЕ КонтактнаяИнформацияПоУмолчанию КАК КонтактнаяИнформацияПоУмолчанию
		              |		ПО ТаблицаКонтрагентов.Контрагент = КонтактнаяИнформацияПоУмолчанию.Ссылка
		              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихКоды КАК ШтрихКоды
		              |		ПО ТаблицаКонтрагентов.Контрагент = ШтрихКоды.Объект.Объект
		              |
		              |УПОРЯДОЧИТЬ ПО
		              |	Контрагент";
		Запрос.УстановитьПараметр("СтрокаПоиска", "%"+ТелефонЗаказчика+"%");
	КонецЕсли;
	
	СписокКлиентов = Запрос.Выполнить().Выгрузить();
	
	Если СписокКлиентов.Количество() > 50 Тогда
		Возврат 2;
	ИначеЕсли СписокКлиентов.Количество() = 1 Тогда
		ВыбранноеЗначение = СписокКлиентов[0].Контрагент;
		Заказчик = ВыбранноеЗначение;
		Возврат Неопределено;
	ИначеЕсли СписокКлиентов.Количество() = 0 Тогда
		Возврат 3;
	КонецЕсли;
	
	Результат = ПоместитьВоВременноеХранилище(СписокКлиентов, УникальныйИдентификатор);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьСтатус()
	
	Если ЗначениеЗаполнено(Автомобиль) Тогда
		Элементы.КартинкаАвтомобиль.Картинка = БиблиотекаКартинок.Успешно;
	Иначе
		Элементы.КартинкаАвтомобиль.Картинка = БиблиотекаКартинок.Удалить;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Плательщик) ИЛИ БесплатныйРемонт Тогда
		Элементы.КартинкаПлательщик.Картинка = БиблиотекаКартинок.Успешно;
	Иначе
		Элементы.КартинкаПлательщик.Картинка = БиблиотекаКартинок.Удалить;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Заказчик) Тогда
		Элементы.КартинкаЗаказчик.Картинка = БиблиотекаКартинок.Успешно;
	Иначе
		Элементы.КартинкаЗаказчик.Картинка = БиблиотекаКартинок.Удалить;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСтатус()

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаВыбораАвтомобиля(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РезультатОповещения) Тогда
		Возврат;
	КонецЕсли;
	
	Автомобиль = РезультатОповещения;
	
	АвтомобильПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаВыбораЗаказчика(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РезультатОповещения) Тогда
		Возврат;
	КонецЕсли;
	
	Заказчик = РезультатОповещения;
	
КонецПроцедуры // Подключаемый_ОбработкаРезультатаВыбораЗаказчика()

&НаСервере
Функция ПолучениеМоделиАвтомобиля()
	
	МодельАвтомобиля = Справочники.Модели.НайтиПоНаименованию(АвтомобильЗнР, Истина);
	Если НЕ (МодельАвтомобиля = Неопределено ИЛИ МодельАвтомобиля = Справочники.Модели.ПустаяСсылка() ИЛИ МодельАвтомобиля.ЭтоГруппа) Тогда
		Возврат МодельАвтомобиля;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПолучениеМаркиАвтомобиля()
	
	МодельАвтомобиля = Справочники.Модели.НайтиПоНаименованию(АвтомобильЗнР, Истина);
	Если НЕ (МодельАвтомобиля = Неопределено ИЛИ МодельАвтомобиля = Справочники.Модели.ПустаяСсылка() ИЛИ МодельАвтомобиля.ЭтоГруппа) Тогда
		Возврат МодельАвтомобиля.Марка;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ВывестиРезультатПредупреждения(КодОшибки)
	
	ТекстСообщения = "";
	Если КодОшибки = 1 Тогда
		ТекстСообщения = НСтр("ru = 'Введите данные для поиска.'");
	ИначеЕсли КодОшибки = 2 Тогда
		ТекстСообщения = НСтр("ru = 'Найдено более 50 соответствий. Уточните запрос.'");
	ИначеЕсли КодОшибки = 3 Тогда
		ТекстСообщения = НСтр("ru = 'Соответствий не найдено.'");
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ПоказатьПредупреждение(, ТекстСообщения,, "Результат поиска автомобиля");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеТелефона()
	
	ТелефонЗаказчика = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(КодРегиона, 
						КодГорода, 
						НомерТелефона, 
						ВнутреннийНомер, 
						"");
		
КонецПроцедуры

&НаСервере
Функция ПоместитьВыбранныеРеквизитыВХранилище()
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Автомобиль", Автомобиль);
	СтруктураРеквизитов.Вставить("Заказчик",   Заказчик);
	СтруктураРеквизитов.Вставить("Плательщик", Плательщик);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРеквизитов);
	
КонецФункции // ПоместитьВыбранныеРеквизитыВХранилище()

// Отображает результат выполнения действия.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	// Вызываем общий обработчик результата выполнения действия
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаРезультатаВыполненияДействия()

#КонецОбласти

