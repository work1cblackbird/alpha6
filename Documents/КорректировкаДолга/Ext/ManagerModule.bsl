// Модуль менеджера документа "Корректировка долга"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.  
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", (Объект.СуммаДокументаПриход - Объект.СуммаДокументаРасход));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаДокументаПриход", Объект.СуммаДокументаПриход);
	ИтогиОперации.Вставить("СуммаДокументаРасход", Объект.СуммаДокументаРасход);
		
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт

	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("СтатьяДохода");
	ОбязательныеРеквизиты.Добавить("СтатьяРасхода");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Состав");
	КонецЕсли; 
	
	ОбязательныеРеквизиты.Добавить("Состав.ДоговорВзаиморасчетов");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары=Новый Массив();
	УникальныеТовары.Добавить("ДоговорВзаиморасчетов");
	УникальныеТовары.Добавить("Сделка");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти=Новый Структура();
	УникальныеТабличныеЧасти.Вставить("Состав",УникальныеТовары);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
		
	КонтролируемыеРеквизитыТЧ = Новый Структура();
	КонтролируемыеРеквизитыТЧ.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	
	КонтролируемыеРеквизиты.Вставить("Состав", КонтролируемыеРеквизитыТЧ);

	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	КорректировкаДолга.Организация КАК Организация,
	|	КорректировкаДолга.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	КорректировкаДолга.Ссылка КАК Ссылка,
	|	КорректировкаДолга.Дата КАК Дата,
	|	КорректировкаДолга.ХозОперация КАК ХозОперация,
	|	КорректировкаДолга.ДокументОснование КАК ДокументОснование,
	|	КорректировкаДолга.Контрагент КАК Контрагент,
	|	КорректировкаДолга.СтатьяДохода КАК СтатьяДохода,
	|	КорректировкаДолга.СтатьяРасхода КАК СтатьяРасхода,
	|	КорректировкаДолга.СуммаДокументаПриход КАК СуммаДокументаПриход,
	|	КорректировкаДолга.СуммаДокументаРасход КАК СуммаДокументаРасход,
	|	КорректировкаДолга.ВалютаДокумента КАК ВалютаДокумента,
	|	КорректировкаДолга.КурсДокумента КАК КурсДокумента,
	|	КорректировкаДолга.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка) КАК СпособЗачетаАвансов,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.КорректировкаДолга КАК КорректировкаДолга
	|ГДЕ
	|	КорректировкаДолга.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ХозОперация КАК ХозОперация,
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.СтатьяДохода КАК СтатьяДохода,
	|	ДанныеДокумента.СтатьяРасхода КАК СтатьяРасхода,
	|	ДанныеДокумента.СуммаДокументаПриход КАК СуммаДокументаПриход,
	|	ДанныеДокумента.СуммаДокументаПриход КАК СуммаДокументаРасход,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаДолгаСостав.Ссылка КАК Ссылка,
	|	КорректировкаДолгаСостав.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА КорректировкаДолгаСостав.КурсВалютыВзаиморасчетов = 0
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаДолгаСостав.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = КорректировкаДолгаСостав.Ссылка.ВалютаДокумента
	|						ТОГДА КорректировкаДолгаСостав.Ссылка.КурсДокумента
	|					ИНАЧЕ КорректировкаДолгаСостав.Ссылка.Дата
	|				КОНЕЦ
	|		ИНАЧЕ КорректировкаДолгаСостав.КурсВалютыВзаиморасчетов
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
	|	КорректировкаДолгаСостав.Сделка КАК Сделка,
	|	КорректировкаДолгаСостав.УвеличениеДолга КАК УвеличениеДолга,
	|	КорректировкаДолгаСостав.УменьшениеДолга КАК УменьшениеДолга,
	|	КорректировкаДолгаСостав.Заказ КАК Заказ,
	|	КорректировкаДолгаСостав.ТипРасчета КАК ТипРасчета
	|ПОМЕСТИТЬ СоставКорректировки
	|ИЗ
	|	Документ.КорректировкаДолга.Состав КАК КорректировкаДолгаСостав
	|ГДЕ
	|	КорректировкаДолгаСостав.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	СуммовыеРазницы = РегистрыНакопления.РасчетыСКонтрагентами.ИнициализацияСуммовыхРазниц();
	
	// Дополним таблицу для списания суммовых разниц
	РасчетыСКонтрагентами.Колонки.Добавить(
		"КурсВалютыВзаиморасчетов",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 6, ДопустимыйЗнак.Неотрицательный)));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый МоментВремени(ДвиженияДокумента.ДляПроведения.Дата, ДвиженияДокумента.ДляПроведения.Ссылка));
	Запрос.Текст = "ВЫБРАТЬ
	|	СоставКорректировки.Ссылка КАК Ссылка,
	|	СоставКорректировки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	СоставКорректировки.Сделка КАК Сделка,
	|	СоставКорректировки.УвеличениеДолга - СоставКорректировки.УменьшениеДолга КАК Сумма,
	|	СоставКорректировки.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	СоставКорректировки.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	СоставКорректировки.Заказ КАК Заказ,
	|	СоставКорректировки.ТипРасчета КАК ТипРасчета,
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.ДокументОснование КАК ДокументОснование,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр,
	|	ВЫБОР
	|		КОГДА СоставКорректировки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставКорректировки.Сделка КАК Документ.ЗаказНаряд).Состояние
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СостояниеЗаказНаряда,
	|	ВЫБОР
	|		КОГДА СоставКорректировки.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(СоставКорректировки.Сделка КАК Документ.ЗаказНаряд).ДатаЗакрытия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаЗакрытия
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	СоставКорректировки КАК СоставКорректировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Задолженность КАК Задолженность
	|		ПО СоставКорректировки.Ссылка = Задолженность.Ссылка
	|ГДЕ
	|	СоставКорректировки.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ДанныеДокумента.Сделка КАК Сделка,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ДанныеДокумента.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДоговора КАК ВалютаДоговора,
	|	ДанныеДокумента.Заказ КАК Заказ,
	|	ДанныеДокумента.ТипРасчета КАК ТипРасчета,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ХозОперация КАК ХозОперация,
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
	|	ДанныеДокумента.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ДанныеДокумента.КурсВалютыРегл КАК КурсВалютыРегл,
	|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ДанныеДокумента.СостояниеЗаказНаряда КАК СостояниеЗаказНаряда,
	|	ДанныеДокумента.ДатаЗакрытия КАК ДатаЗакрытия
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Организация КАК Организация,
	|	РасчетыСКонтрагентамиОстатки.Контрагент КАК Контрагент,
	|	РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	РасчетыСКонтрагентамиОстатки.ТипРасчета КАК ТипРасчета,
	|	РасчетыСКонтрагентамиОстатки.ДокументРасчетов КАК Сделка,
	|	РасчетыСКонтрагентамиОстатки.Заказ КАК Заказ,
	|	РасчетыСКонтрагентамиОстатки.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(
	|			&МоментВремени,
	|			(ДоговорВзаиморасчетов, ДокументРасчетов, Заказ, Контрагент, Организация, ТипРасчета) В
	|				(ВЫБРАТЬ
	|					ДанныеДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|					ДанныеДокумента.Сделка КАК Сделка,
	|					ДанныеДокумента.Заказ КАК Заказ,
	|					ДанныеДокумента.Контрагент КАК Контрагент,
	|					ДанныеДокумента.Организация КАК Организация,
	|					ДанныеДокумента.ТипРасчета КАК ТипРасчета
	|				ИЗ
	|					ДанныеДокумента КАК ДанныеДокумента)) КАК РасчетыСКонтрагентамиОстатки";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[1].Пустой() Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	ДанныеОбОплате = РезультатЗапроса[1].Выгрузить();
	НеЗакрытыеСделки = РезультатЗапроса[2].Выгрузить();
	
	Для Каждого СтрокаОплаты Из ДанныеОбОплате Цикл
		
		СделкаОплаты = ?(ЗначениеЗаполнено(СтрокаОплаты.Сделка), СтрокаОплаты.Сделка, СтрокаОплаты.Ссылка);
		
		СуммаОплаты = СтрокаОплаты.Сумма;
		Если СтрокаОплаты.Сумма = 0 Тогда
			Продолжить;
		ИначеЕсли СтрокаОплаты.Сумма > 0 Тогда
			РасчетыСКонтрагентамиСервер.ДобавитьЗаписьРасчетаКонтрагентов(
				СтрокаОплаты,
				РасчетыСКонтрагентами,
				СтрокаОплаты.Сумма,
				ВидДвиженияНакопления.Приход,
				Перечисления.ВидыОперацийВзаиморасчетов.ПогашениеКредиторскойЗадолженности,
				СделкаОплаты,
				СтрокаОплаты.ТипРасчета);
		Иначе
			РасчетыСКонтрагентамиСервер.ДобавитьЗаписьРасчетаКонтрагентов(
				СтрокаОплаты,
				РасчетыСКонтрагентами,
				-СтрокаОплаты.Сумма,
				ВидДвиженияНакопления.Расход,
				Перечисления.ВидыОперацийВзаиморасчетов.ПогашениеДебиторскойЗадолженности,
				СделкаОплаты,
				СтрокаОплаты.ТипРасчета);
		КонецЕсли;
		
		// Получим остаток
		СуммаОстаток = 0;
		УсловиеПоиска = Новый Структура();
		УсловиеПоиска.Вставить("Организация");
		УсловиеПоиска.Вставить("Контрагент");
		УсловиеПоиска.Вставить("ТипРасчета");
		УсловиеПоиска.Вставить("Сделка");
		УсловиеПоиска.Вставить("Заказ");
		ЗаполнитьЗначенияСвойств(УсловиеПоиска, СтрокаОплаты);
		
		НайденныеСтроки = НеЗакрытыеСделки.НайтиСтроки(УсловиеПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СуммаОстаток = НайденныеСтроки[0].СуммаОстаток;
			
		КонецЕсли;
		
		Если СуммаОстаток > 0 И СтрокаОплаты.Сумма > 0
			ИЛИ СуммаОстаток < 0 И СтрокаОплаты.Сумма < 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если СуммаОстаток < 0 Тогда
			
			СуммаОстаток = - СуммаОстаток;
			
		КонецЕсли;
		
		Если СуммаОплаты < 0 Тогда
			
			СуммаОплаты = - СуммаОплаты;
			
		КонецЕсли;
		
		РасчетыСКонтрагентамиСервер.ПроверитьПереплатуПоСделке(
			СтрокаОплаты.Сделка,
			СуммаОплаты,
			СуммаОстаток,
			Отказ);
		
	КонецЦикла;
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	// Дополним таблицу суммовыми разницами
	РегистрыНакопления.РасчетыСКонтрагентами.СписатьСуммовыеРазницы(
		СтрокаОплаты,
		РасчетыСКонтрагентами,
		СуммовыеРазницы,
		Истина,
		Ложь);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	ДвиженияДокумента.Вставить("СуммовыеРазницы", СуммовыеРазницы);
	
КонецПроцедуры

Процедура СформироватьТаблицуДоходыИРасходы(ДвиженияДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеДокументаОплаты.Ссылка КАК Ссылка,
	|	ДанныеДокументаОплаты.Дата КАК Дата,
	|	ДанныеДокументаОплаты.Организация КАК Организация,
	|	ДанныеДокументаОплаты.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ДанныеДокументаОплаты.ХозОперация КАК ХозОперация,
	|	ДанныеДокументаОплаты.СтатьяДохода КАК СтатьяДохода,
	|	ДанныеДокументаОплаты.СтатьяРасхода КАК СтатьяРасхода
	|ИЗ
	|	Задолженность КАК ДанныеДокументаОплаты";
	
	ДанныеЗаполнения = Запрос.Выполнить().Выбрать();
	ДанныеЗаполнения.Следующий();
	
	ДоходыИРасходы = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("ДоходыИРасходы");
	
	СуммовыеРазницы = ПолучитьЗначениеПараметраСтруктуры(
		ДвиженияДокумента,
		"СуммовыеРазницы",
		Новый ТаблицаЗначений);
	
	РегистрыНакопления.ДоходыИРасходы.ЗаполнитьСуммовыеРазницы(
		ДанныеЗаполнения,
		СуммовыеРазницы,
		ДоходыИРасходы,
		ДанныеЗаполнения.ПодразделениеКомпании);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("ДоходыИРасходы", ДоходыИРасходы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Состав.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Объект.СуммаДокументаПриход = 0;
	Объект.СуммаДокументаРасход = 0;
	Для Каждого Строка Из Объект.Состав Цикл
		Объект.СуммаДокументаПриход = Объект.СуммаДокументаПриход + РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Строка.УвеличениеДолга, Строка.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, Объект.Дата, Объект.ВалютаДокумента, Объект.КурсДокумента);
		Объект.СуммаДокументаРасход = Объект.СуммаДокументаРасход + РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Строка.УменьшениеДолга, Строка.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, Объект.Дата, Объект.ВалютаДокумента, Объект.КурсДокумента);
	КонецЦикла;
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
	Объект.СуммаДокументаПриход = 0;
	Объект.СуммаДокументаРасход = 0;
	
	Для Каждого ТекСтрока Из Объект.Состав Цикл
		Объект.СуммаДокументаПриход = Объект.СуммаДокументаПриход + РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТекСтрока.УвеличениеДолга, ТекСтрока.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, Объект.Дата, Объект.ВалютаДокумента, Объект.КурсДокумента);
		Объект.СуммаДокументаРасход = Объект.СуммаДокументаРасход + РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТекСтрока.УменьшениеДолга, ТекСтрока.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, Объект.Дата, Объект.ВалютаДокумента, Объект.КурсДокумента);
	КонецЦикла;
	
КонецПроцедуры // КурсДокументаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСостав

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Состав".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СоставДоговорВзаиморасчетовПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Строка.ДоговорВзаиморасчетов) Тогда
		
		Строка.КурсВалютыВзаиморасчетов = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалютыВзаиморасчетов(
			Объект,
			Строка.ДоговорВзаиморасчетов);
		
		Если ЕстьРеквизит(Строка, "СпособВеденияВзаиморасчетов") Тогда
			СпособВеденияВзаиморасчетов = Строка.СпособВеденияВзаиморасчетов;
		Иначе
			СпособВеденияВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Строка.ДоговорВзаиморасчетов,
				"СпособВеденияВзаиморасчетов");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Сделка)
			И СпособВеденияВзаиморасчетов = Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам
			И Не РасчетыСКонтрагентамиСервер.ДоступныеТипыДокументовРасчета().СодержитТип(ТипЗнч(Строка.Сделка)) Тогда
			Строка.Сделка = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьРеквизит(Объект, "Валюта", "Состав") Тогда
		Строка.Валюта = Строка.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	// Определимся с автоматическим закрытием сделок
	Если ЕстьРеквизит(Строка, "СпособЗачетаАвансов") И ЗначениеЗаполнено(Строка.ДоговорВзаиморасчетов)
		И Строка.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов <>
			Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам Тогда
		Строка.СпособЗачетаАвансов = Строка.ДоговорВзаиморасчетов.СпособЗачетаАвансов;
	КонецЕсли;
	
КонецПроцедуры // СоставДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Состав".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СоставСделкаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Строка.Сделка) Тогда
		// считаем долг по сделке
		Строка.УвеличениеДолга = 0; Строка.УменьшениеДолга = 0;
		// подсчитаем долг нам/им
		Отбор = Новый Структура("Контрагент,ДоговорВзаиморасчетов,ДокументРасчетов", Объект.Контрагент, Строка.ДоговорВзаиморасчетов, Строка.Сделка);
		МоментВремени = ?(Объект.Ссылка.Пустая(), Новый МоментВремени(КонецДня(Объект.Дата)), Объект.Ссылка.МоментВремени());
		Долги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(Отбор, МоментВремени, "Сумма");
		
		Долг = Долги.Итог("Сумма");
		Если Долг >= 0 Тогда
			Строка.УменьшениеДолга = Долг;
		Иначе
			Строка.УвеличениеДолга = -Долг;
		КонецЕсли;
		
		Если ЕстьРеквизит(Объект, "Разница", "Состав") Тогда
			Строка.Разница = Строка.УвеличениеДолга - Строка.УменьшениеДолга;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СоставСделкаПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт

	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Состав");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла",	"КорректировкаДолга");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Состав");
	КонецЕсли;

	ВыборКонтрагента 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборКонтрагента.ВыборСсылки 		= "Справочник.Контрагенты.ФормаСписка";
	ВыборКонтрагента.Обязательный 		= Истина;
	ВыборКонтрагента.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать контрагента'"); 
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю			= "СоставПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить по долгам'");
	Команда.Идентификатор	= "СоставЗаполнитьДолгами";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Состав";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("Контрагент", ВыборКонтрагента);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("СоставЗаполнитьДолгами.Видимость",    Истина);
	ПараметрыКоманд.Вставить("СоставЗаполнитьДолгами.Доступность",  Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по долгам контрагента
//
Функция СоставЗаполнитьДолгами(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.Контрагент = ПараметрыЗаполнения.Контрагент Тогда
		Объект.Контрагент = ПараметрыЗаполнения.Контрагент;
		КонтрагентПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	// смотрим на долги
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Пустаяссылка) КАК СпособЗачетаАвансов,
	|	РасчетыСКонтрагентамиОстатки.ТипРасчета КАК ТипРасчета,
	|	РасчетыСКонтрагентамиОстатки.ДокументРасчетов КАК Сделка,
	|	РасчетыСКонтрагентамиОстатки.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА РасчетыСКонтрагентамиОстатки.СуммаОстаток > 0
	|			ТОГДА РасчетыСКонтрагентамиОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УменьшениеДолга,
	|	ВЫБОР
	|		КОГДА РасчетыСКонтрагентамиОстатки.СуммаОстаток < 0
	|			ТОГДА -РасчетыСКонтрагентамиОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УвеличениеДолга,
	|	КурсыВалютСрезПоследних.Курс КАК КурсВалютыВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(
	|			&Момент,
	|			ДоговорВзаиморасчетов.Организация = &Организация
	|				И ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|				И Контрагент = &Контрагент) КАК РасчетыСКонтрагентамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Момент, ) КАК КурсыВалютСрезПоследних
	|		ПО РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВзаиморасчетыКомпанииОстатки.ДоговорВзаиморасчетов,
	|	ВзаиморасчетыКомпанииОстатки.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,
	|	ВзаиморасчетыКомпанииОстатки.ДоговорВзаиморасчетов.СпособЗачетаАвансов,
	|	НЕОПРЕДЕЛЕНО,
	|	ВзаиморасчетыКомпанииОстатки.Сделка,
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыКомпанииОстатки.СуммаОстаток > 0
	|			ТОГДА ВзаиморасчетыКомпанииОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыКомпанииОстатки.СуммаОстаток < 0
	|			ТОГДА -ВзаиморасчетыКомпанииОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	КурсыВалютСрезПоследних.Курс
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыКомпании.Остатки(
	|			&Момент,
	|			ДоговорВзаиморасчетов.Организация = &Организация
	|				И ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоСделкам)
	|				И Контрагент = &Контрагент) КАК ВзаиморасчетыКомпанииОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Момент, ) КАК КурсыВалютСрезПоследних
	|		ПО ВзаиморасчетыКомпанииОстатки.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта";
	
	Запрос=Новый Запрос(ТекстЗапроса);
	
	МоментВремени = ?(НЕ ЗначениеЗаполнено(Ссылка),Новый МоментВремени(КонецДня(Объект.Дата)),Новый МоментВремени(Объект.Дата));
	Запрос.УстановитьПараметр("Момент",      МоментВремени);
	Запрос.УстановитьПараметр("Контрагент",  Объект.Контрагент);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Объект.Состав.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецФункции // СоставЗаполнитьДолгами()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.КорректировкаДолга",
		"ПФ_MXL_КорректировкаДолга",
		НСтр("ru = 'Корректировка долга'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик события формирования печатной формы.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - информация для заполнения письма при отправке печатной формы электронной почтой.
//                                     Содержит следующие поля:
//    ** Получатель - Строка, СписокЗначений, Массив - список получателей письма;
//    ** Тема - Строка - Тема письма,
//    ** Текст - Строка - Текст письма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_КорректировкаДолга") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_КорректировкаДолга",
															НСтр("ru = 'Корректировка долга'"),
															ПечатьКорректировкаДолга(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;	
КонецПроцедуры // Печать()

// Формирует печатную форму "КорректировкаДолга"
//
Функция ПечатьКорректировкаДолга(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаДолга_КорректировкаДолга";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ЕстьВзаиморасчетыПоРасчетнымДокументам = РасчетыСКонтрагентамиСервер.ЕстьДоговорПоРасчетнымДокументам(
			Документ.Состав.ВыгрузитьКолонку("ДоговорВзаиморасчетов"));
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.КорректировкаДолга.ПФ_MXL_КорректировкаДолга");
		
		// Форматы вывода
		ОбластьЗаголовок        = Макет.ПолучитьОбласть("Заголовок");
		Если ЕстьВзаиморасчетыПоРасчетнымДокументам Тогда
			ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыРасчетов");
			ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаРасчетов");
		Иначе
			ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		КонецЕсли;
		ОбластьИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал           = Макет.ПолучитьОбласть("Подвал");
		
		// Вывод заголовка документа.
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.Получатель = Документ.Контрагент;
		ОбластьЗаголовок.Параметры.ПредставлениеПолучателя =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Контрагент, Документ.Дата);
		ОбластьЗаголовок.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Готовим шапку
		НомерСтраницы = 2; НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура();
		СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
		СтруктураИтоговПоСтранице.Вставить("УвеличениеДолга", 0);
		СтруктураИтоговПоСтранице.Вставить("УменьшениеДолга", 0);
		СтруктураИтоговПоСтранице.Вставить("Разница",         0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// Готовим области строки.
		ВыборкаТабличнойЧасти = Документ.Состав;
		СуммаВсего	= 0;
		Для каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			// Заполняем данные строки.
			ОбластьСтрока.Параметры.Заполнить(СтрокаТЧ);
			Разница      = СтрокаТЧ.УвеличениеДолга - СтрокаТЧ.УменьшениеДолга;
			ВалютаСтроки = СтрокаТЧ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов;
			ОбластьСтрока.Параметры.УвеличениеДолга = Формат(СтрокаТЧ.УвеличениеДолга, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.УменьшениеДолга = Формат(СтрокаТЧ.УменьшениеДолга, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.Разница         = Формат(Разница,                  ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.Валюта          = ВалютаСтроки;
			
			// Доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если ВыборкаТабличнойЧасти.Индекс(СтрокаТЧ) = ВыборкаТабличнойЧасти.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
				СтруктураИтоговПоСтранице.Вставить("УвеличениеДолга", 0);
				СтруктураИтоговПоСтранице.Вставить("УменьшениеДолга", 0);
				СтруктураИтоговПоСтранице.Вставить("Разница",         0);
				
				НомерСтраницыПред   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			Если Документ.ВалютаДокумента = ВалютаСтроки Тогда
				УвеличениеДолга = СтрокаТЧ.УвеличениеДолга;
				УменьшениеДолга = СтрокаТЧ.УменьшениеДолга;
			Иначе
				УвеличениеДолга = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТЧ.УвеличениеДолга, ВалютаСтроки,
					Документ.Дата, Документ.ВалютаДокумента, Документ.КурсДокумента);
				УменьшениеДолга = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТЧ.УменьшениеДолга, ВалютаСтроки,
					Документ.Дата, Документ.ВалютаДокумента, Документ.КурсДокумента);
			КонецЕсли;
			
			Разница = СтруктураИтоговПоСтранице.Разница + УвеличениеДолга - УменьшениеДолга;
			СтруктураИтоговПоСтранице.Вставить("УвеличениеДолга", СтруктураИтоговПоСтранице.УвеличениеДолга + УвеличениеДолга);
			СтруктураИтоговПоСтранице.Вставить("УменьшениеДолга", СтруктураИтоговПоСтранице.УменьшениеДолга + УменьшениеДолга);
			СтруктураИтоговПоСтранице.Вставить("Разница",         Разница);
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// Итоги
		Разница = Документ.СуммаДокументаПриход - Документ.СуммаДокументаРасход;
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		ОбластьПодвал.Параметры.УвеличениеДолга = Формат(Документ.СуммаДокументаПриход, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.УменьшениеДолга = Формат(Документ.СуммаДокументаРасход, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.Разница			= Формат(Разница,                       ФорматВыводаСуммы);
		ИтогоРазница = Документ.СуммаДокументаПриход - Документ.СуммаДокументаРасход;
		
		Если ИтогоРазница>=0 Тогда
			ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Увеличение долга на сумму'") + Символы.НПП
				+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоРазница, Документ.ВалютаДокумента);
		Иначе
			ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Уменьшение долга на сумму'") + Символы.НПП
				+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(-ИтогоРазница, Документ.ВалютаДокумента);
		КонецЕсли;
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции //ПечатьКорректировкаДолга()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.КорректировкаДолга);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли