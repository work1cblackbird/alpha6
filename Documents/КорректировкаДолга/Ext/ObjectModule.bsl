// Модуль документа "Корректировка долга"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ЭтотОбъект);
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокументаПриход = 0; 
	СуммаДокументаРасход = 0;
	
	Для Каждого СтрокаТЧ Из Состав Цикл
		
		СуммаДокументаПриход = СуммаДокументаПриход + РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТЧ.УвеличениеДолга,СтрокаТЧ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,Дата,ВалютаДокумента,КурсДокумента);
		СуммаДокументаРасход = СуммаДокументаРасход + РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТЧ.УменьшениеДолга,СтрокаТЧ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,Дата,ВалютаДокумента,КурсДокумента);
		
	КонецЦикла;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ОбработкаСобытийДокументаСервер.УстановитьВерсиюДокумента(ЭтотОбъект, Истина);
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	СпособВеденияВзаиморасчетовДоговоров = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		Состав.ВыгрузитьКолонку("ДоговорВзаиморасчетов"),
		"СпособВеденияВзаиморасчетов");
	
	Для Каждого Строка Из Состав Цикл
		СпособВеденияВзаиморасчетов = СпособВеденияВзаиморасчетовДоговоров.Получить(Строка.ДоговорВзаиморасчетов);
		Если СпособВеденияВзаиморасчетов = Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоСделкам
			И Не ЗначениеЗаполнено(Строка.СпособЗачетаАвансов) И НЕ ЗначениеЗаполнено(Строка.Сделка) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Не заполнена колонка ""Сделка"" в строке %1 списка ""Состав""'"),
					Строка.НомерСтроки
				),
				ЭтотОбъект,,,
				Отказ
			);
		КонецЕсли;
		Если СпособВеденияВзаиморасчетов = Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам
			И Не ЗначениеЗаполнено(Строка.ТипРасчета) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Не заполнена колонка ""Тип расчета"" в строке %1 списка ""Состав""'"),
					Строка.НомерСтроки
				),
				ЭтотОбъект,,,
				Отказ
			);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// итоговые суммы
	СуммаДокументаПриход = 0; 
	СуммаДокументаРасход = 0;
	
	Для Каждого СтрокаТЧ Из Состав Цикл
		СуммаДокументаПриход = СуммаДокументаПриход+РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТЧ.УвеличениеДолга,СтрокаТЧ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,Дата,ВалютаДокумента,КурсДокумента);
		СуммаДокументаРасход = СуммаДокументаРасход+РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТЧ.УменьшениеДолга,СтрокаТЧ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,Дата,ВалютаДокумента,КурсДокумента);
	КонецЦикла;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	Документы.КорректировкаДолга.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	
	// Получим способ ведения баланса.
	БалансВедетсяПоПодразделению = БалансВедетсяПоПодразделениям(Дата);
	
	ТипыСделокСПокупателем = ЗаказыСервер.ПолучитьТипыСделок(Истина);
	ТипыСделокСПоставщиком = ЗаказыСервер.ПолучитьТипыСделок(Ложь);
	
	// проводим
	СуммаДоходаРасходаСуммовыхРазниц = 0;
	НаборЗаписейВзаиморасчетыКомпании = Движения.ВзаиморасчетыКомпании;
	НаборЗаписейВзаиморасчетыКомпании.РежимПроведения = РежимПроведения;
	НаборЗаписейВзаиморасчетыКомпании.Контрагент = Контрагент;
	
	СпособВеденияВзаиморасчетовДоговоров = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		Состав.ВыгрузитьКолонку("ДоговорВзаиморасчетов"),
		"СпособВеденияВзаиморасчетов");
	
	// идем по строкам
	Для Каждого СтрокаТЧ Из Состав Цикл
		
		Если СпособВеденияВзаиморасчетовДоговоров.Получить(СтрокаТЧ.ДоговорВзаиморасчетов) =
			Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписейВзаиморасчетыКомпании.ДокументОбъект        = ЭтотОбъект;
		НаборЗаписейВзаиморасчетыКомпании.ДоговорВзаиморасчетов = СтрокаТЧ.ДоговорВзаиморасчетов;
		НаборЗаписейВзаиморасчетыКомпании.КурсВзаиморасчетов    = СтрокаТЧ.КурсВалютыВзаиморасчетов;
		НаборЗаписейВзаиморасчетыКомпании.Сделка                = СтрокаТЧ.Сделка;
		НаборЗаписейВзаиморасчетыКомпании.Валюта                = СтрокаТЧ.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов;
		НаборЗаписейВзаиморасчетыКомпании.СуммаДоходаРасходаСуммовыхРазниц = 0;
		
		Долг = СтрокаТЧ.УвеличениеДолга-СтрокаТЧ.УменьшениеДолга;
		Если Долг = 0 Тогда 
			// долг не изменяется
			Продолжить;
		КонецЕсли;
		
		ТипСделки = ТипЗнч(СтрокаТЧ.Сделка);
		Если ТипыСделокСПокупателем.СодержитТип(ТипСделки) Тогда
			НаборЗаписейВзаиморасчетыКомпании.ВзаиморасчетыСПокупателем = (Долг < 0);
		ИначеЕсли ТипыСделокСПоставщиком.СодержитТип(ТипСделки) Тогда
			НаборЗаписейВзаиморасчетыКомпании.ВзаиморасчетыСПокупателем = (Долг < 0);
		Иначе
			НаборЗаписейВзаиморасчетыКомпании.ВзаиморасчетыСПокупателем = Неопределено;
		КонецЕсли;
		НаборЗаписейВзаиморасчетыКомпании.АвтоЗакрытиеСделок    =
			НЕ ЗначениеЗаполнено(СтрокаТЧ.Сделка)
			И СтрокаТЧ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		НаборЗаписейВзаиморасчетыКомпании.СписатьНераспределеннуюСуммуПоСделке = Истина;
		
		Если Долг > 0 Тогда
			// надо увеличить долг контрагента
			НаборЗаписейВзаиморасчетыКомпании.Сумма = Долг;
			Отказ = НЕ НаборЗаписейВзаиморасчетыКомпании.Приход() ИЛИ Отказ;
		Иначе
			// надо уменьшить долг контрагента
			НаборЗаписейВзаиморасчетыКомпании.Сумма = -Долг;
			Отказ = НЕ НаборЗаписейВзаиморасчетыКомпании.Расход() ИЛИ Отказ;
		КонецЕсли;
		
		// доходы и расходы по суммовым разницам
		СуммаДоходаРасходаСуммовыхРазниц = НаборЗаписейВзаиморасчетыКомпании.СуммаДоходаРасходаСуммовыхРазниц;
		Если СуммаДоходаРасходаСуммовыхРазниц <> 0 Тогда
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
			Если БалансВедетсяПоПодразделению Тогда
				НаборЗаписейДиР.Подразделение = СтрокаТЧ.ДоговорВзаиморасчетов.ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДиР.ВУпрВалюте             = Истина;
			Если СуммаДоходаРасходаСуммовыхРазниц < 0 Тогда
				НаборЗаписейДиР.Расход = -СуммаДоходаРасходаСуммовыхРазниц;
			Иначе
				НаборЗаписейДиР.Доход = СуммаДоходаРасходаСуммовыхРазниц;
			КонецЕсли;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;	
	КонецЦикла;
	
	Документы.КорректировкаДолга.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	Документы.КорректировкаДолга.СформироватьТаблицуДоходыИРасходы(ДополнительныеСвойства);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	// Доходы и расходы
	ТаблицаДоходовРасходов = Движения.ВзаиморасчетыКомпании.Выгрузить();
	ТаблицаДоходовРасходов.Свернуть("ВидДвижения,ДоговорВзаиморасчетов,ВидОперации","СуммаУпр");
	
	Если ДополнительныеСвойства.Свойство("ТаблицыДвиженийДокумента")
		И ПолучитьЗначениеПараметраСтруктуры(
			ДополнительныеСвойства.ТаблицыДвиженийДокумента,
			"РасчетыСКонтрагентами",
			Неопределено) <> Неопределено Тогда
		РасчетыСКонтрагентами = ДополнительныеСвойства.ТаблицыДвиженийДокумента.РасчетыСКонтрагентами.Скопировать();
		РасчетыСКонтрагентами.Свернуть("ВидДвижения,ДоговорВзаиморасчетов,ВидОперации","СуммаУпр");
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РасчетыСКонтрагентами, ТаблицаДоходовРасходов);
		ТаблицаДоходовРасходов.Свернуть("ВидДвижения,ДоговорВзаиморасчетов,ВидОперации","СуммаУпр");
	КонецЕсли;
	
	ТаблицаДоходовРасходов.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
	
	Для Каждого СтрокаТаблицаДоходовРасходов Из ТаблицаДоходовРасходов Цикл
		Если БалансВедетсяПоПодразделению Тогда
			СтрокаТаблицаДоходовРасходов.Подразделение = СтрокаТаблицаДоходовРасходов.ДоговорВзаиморасчетов.ПодразделениеКомпании;
		Иначе
			СтрокаТаблицаДоходовРасходов.Подразделение = ПодразделениеКомпании;	
		КонецЕсли;
	КонецЦикла;	
	ТаблицаДоходовРасходов.Свернуть("ВидДвижения,Подразделение,ВидОперации","СуммаУпр");
	
	НаборЗаписейДоходыРасходы = Движения.ДоходыИРасходы;
	Для Каждого СтрокаТаблицаДоходовРасходов Из ТаблицаДоходовРасходов Цикл
		
		// Т.к. проведение было по строкам ТЧ, то курсовые разницы уже в ДиР, надо их пропустить.
		Если СтрокаТаблицаДоходовРасходов.ВидОперации =
			Перечисления.ВидыОперацийВзаиморасчетов.СписаниеКурсовойРазницыУпрВалюты Тогда
			Продолжить;
		КонецЕсли;
		
		// расход
		Если (СтрокаТаблицаДоходовРасходов.ВидДвижения = ВидДвиженияНакопления.Приход)
			И (СтрокаТаблицаДоходовРасходов.СуммаУпр <> 0) Тогда
			НаборЗаписейДоходыРасходы.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДоходыРасходы.СтатьяДоходовИРасходов = СтатьяДохода;
			НаборЗаписейДоходыРасходы.Подразделение          = СтрокаТаблицаДоходовРасходов.Подразделение;
			НаборЗаписейДоходыРасходы.ВУпрВалюте             = Истина;
			НаборЗаписейДоходыРасходы.Доход                  = СтрокаТаблицаДоходовРасходов.СуммаУпр;
			НаборЗаписейДоходыРасходы.Расход                 = 0;
			НаборЗаписейДоходыРасходы.Приход();
		КонецЕсли;
		
		// доход
		Если (СтрокаТаблицаДоходовРасходов.ВидДвижения = ВидДвиженияНакопления.Расход)
			И (СтрокаТаблицаДоходовРасходов.СуммаУпр <> 0) Тогда
			НаборЗаписейДоходыРасходы.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДоходыРасходы.СтатьяДоходовИРасходов = СтатьяРасхода;
			НаборЗаписейДоходыРасходы.Подразделение			 = СтрокаТаблицаДоходовРасходов.Подразделение;
			НаборЗаписейДоходыРасходы.ВУпрВалюте			 = Истина;
			НаборЗаписейДоходыРасходы.Доход                  = 0;
			НаборЗаписейДоходыРасходы.Расход                 = СтрокаТаблицаДоходовРасходов.СуммаУпр;
			НаборЗаписейДоходыРасходы.Приход();
		КонецЕсли;
	КонецЦикла;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	// двигаем границу последовательности взаиморасчетов
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Приходный кассовый ордер"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПриходныйКассовыйОрдер(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СуммаСделки = 0;
	
	ИспользуетсяРасчетСКонтрагентами =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДанныеЗаполнения.ДоговорВзаиморасчетов);
	Если ИспользуетсяРасчетСКонтрагентами Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	РасчетыСКонтрагентами.Сумма КАК Сумма,
		|	РасчетыСКонтрагентами.ТипРасчета КАК ТипРасчета,
		|	РасчетыСКонтрагентами.ДокументРасчетов КАК Сделка,
		|	РасчетыСКонтрагентами.Заказ КАК Заказ
		|ИЗ
		|	РегистрНакопления.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
		|ГДЕ
		|	РасчетыСКонтрагентами.Регистратор = &Ссылка";
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ
		|	ВзаиморасчетыКомпании.Сумма КАК Сумма
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыКомпании КАК ВзаиморасчетыКомпании
		|ГДЕ
		|	ВзаиморасчетыКомпании.Регистратор = &Ссылка";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СуммаСделки = СуммаСделки + Выборка.Сумма;
	КонецЦикла;
	
	Состав.Очистить();
	НоваяСтрока 							= Состав.Добавить();
	НоваяСтрока.ДоговорВзаиморасчетов		= ДанныеЗаполнения.ДоговорВзаиморасчетов;
	НоваяСтрока.КурсВалютыВзаиморасчетов 	= ДанныеЗаполнения.КурсВалютыВзаиморасчетов;
	
	Если ИспользуетсяРасчетСКонтрагентами Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	ИначеЕсли НЕ ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование) Тогда
		НоваяСтрока.Сделка = ДанныеЗаполнения;
	Иначе
		НоваяСтрока.Сделка = ДанныеЗаполнения.ДокументОснование;
	КонецЕсли;
	
	НоваяСтрока.УвеличениеДолга = 0;
	НоваяСтрока.УменьшениеДолга = СуммаСделки;
	НоваяСтрока.СпособЗачетаАвансов = ДанныеЗаполнения.СпособЗачетаАвансов;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПриходныйКассовыйОрдер()

// Производит заполнение объекта на основании документа "Расходный кассовый ордер"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РасходныйКассовыйОрдер(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СуммаСделки = 0;
	
	ИспользуетсяРасчетСКонтрагентами =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДанныеЗаполнения.ДоговорВзаиморасчетов);
	Если ИспользуетсяРасчетСКонтрагентами Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	РасчетыСКонтрагентами.Сумма КАК Сумма,
		|	РасчетыСКонтрагентами.ТипРасчета КАК ТипРасчета,
		|	РасчетыСКонтрагентами.ДокументРасчетов КАК Сделка,
		|	РасчетыСКонтрагентами.Заказ КАК Заказ
		|ИЗ
		|	РегистрНакопления.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
		|ГДЕ
		|	РасчетыСКонтрагентами.Регистратор = &Ссылка";
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ
		|	ВзаиморасчетыКомпании.Сумма КАК Сумма
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыКомпании КАК ВзаиморасчетыКомпании
		|ГДЕ
		|	ВзаиморасчетыКомпании.Регистратор = &Ссылка";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СуммаСделки = СуммаСделки + Выборка.Сумма;
	КонецЦикла;
	
	Состав.Очистить();
	НоваяСтрока 							= Состав.Добавить();
	НоваяСтрока.ДоговорВзаиморасчетов 		= ДанныеЗаполнения.ДоговорВзаиморасчетов;
	НоваяСтрока.КурсВалютыВзаиморасчетов 	= ДанныеЗаполнения.КурсВалютыВзаиморасчетов;
	
	Если ИспользуетсяРасчетСКонтрагентами Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	ИначеЕсли НЕ ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование) Тогда
		НоваяСтрока.Сделка = ДанныеЗаполнения;
	Иначе
		НоваяСтрока.Сделка = ДанныеЗаполнения.ДокументОснование;
	КонецЕсли;
	
	НоваяСтрока.УвеличениеДолга = СуммаСделки;
	НоваяСтрока.УменьшениеДолга = 0;
	НоваяСтрока.СпособЗачетаАвансов = ДанныеЗаполнения.СпособЗачетаАвансов;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РасходныйКассовыйОрдер()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
