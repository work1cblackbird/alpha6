///////////////////////////////////////////////////////////////////////////////
// Модуль основной формы документа "Заказ покупателя"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// ПодключаемоеОборудование
	ТипыОборудования = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
	ТипыОборудования.СканерШтрихкода = Истина;
	ТипыОборудования.СчитывательМагнитныхКарт = Истина;
	МенеджерОборудования.ПриСозданииНаСервере(ЭтаФорма, ТипыОборудования);
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ПараметрыОтображенияМеток = УправлениеСвойствами.ПараметрыОтображенияМеток();
	ПараметрыОтображенияМеток.МаксимумМетокНаФорме = 3;
	ПараметрыОтображенияМеток.ВариантОтображенияМеток = Перечисления.ВариантыОтображенияМеток.Надпись;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	ДополнительныеПараметры.Вставить("ПараметрыОтображенияМеток", ПараметрыОтображенияМеток);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	
	УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(ЭтотОбъект, Объект.Контрагент);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументССылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// УтверждениеДокументов
	УтверждениеДокументовСервер.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	// Конец УтверждениеДокументов
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ОграничитьВыборКонтактныхЛиц(Элементы.Контрагент);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	
	РазрешитьРедактированиеЦенИСумм = ПраваИНастройкиПользователя.Значение("РедактированиеЦенИСуммВНоменклатурныхТаблицах", Объект);
	РаботаСФормой.РазрешитьРедактированиеЦенИСумм(
		РаботаСФормой.ТиповыеПоляСуммовыхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм
	);
	
	СпособВыбораСкидки = ПраваИНастройкиПользователя.Значение("СпособВыбораСкидки", Объект);
	РаботаСФормой.РазрешитьРедактированиеСкидок(
		РаботаСФормой.ТиповыеПоляСкидочныхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм,
		СпособВыбораСкидки
	);
	
	// Штрихкодирование
	ШтрихкодированиеВызовСервера.ПрочитатьШтрихкодДокумента(ЭтотОбъект, Объект);
	//Конец Штрихкодирование
	
	ОписаниеНовойКолонкиПроизводитель = РаботаСФормой.ОписаниеНовойКолонкиПроизводитель();
	ОписаниеНовойКолонкиПроизводитель.ТабличнаяЧасть = Элементы.Товары;
	ОписаниеНовойКолонкиПроизводитель.ПоставитьПеред = Элементы.ТоварыАртикул;
	НоваяКолонкаПроизводитель = РаботаСФормой.НоваяКолонкаПроизводитель(ЭтотОбъект, ОписаниеНовойКолонкиПроизводитель);
	
	КолонкиКодАртикулИПроизводитель = Новый Структура();
	КолонкиКодАртикулИПроизводитель.Вставить("Код", Элементы.ТоварыКод);
	КолонкиКодАртикулИПроизводитель.Вставить("Артикул", Элементы.ТоварыАртикул);
	КолонкиКодАртикулИПроизводитель.Вставить("Производитель", НоваяКолонкаПроизводитель);
	РаботаСФормой.НастроитьВидимостьКолонокКодАртикулИПроизводитель(КолонкиКодАртикулИПроизводитель);
	РаботаСФормой.ОткрытьФормуТолькоДляПросмотра(ЭтотОбъект, Объект);
	
	// Получим основную единицу измерения массы
	ЕдиницаИзмеренияМассы = Строка(Константы.ОсновнаяЕдиницаИзмеренияМассы.Получить());
	
	// Обновим состояние заказа
	ОбновитьСостояниеЗаказа();
		
	// Информация о сроке поставки
	ОтображениеСрокаПоставки();
	
	// Информация о сроке резервирования
	ОтображениеСрокаСнятияРезерва();
	
	// Информация о графике поставок
	ОтображениеГрафикаПоставок();
	
	// заполним массу номенклатуры
	РассчитатьМассуНоменклатуры();
	
	// Формирование флажка резервирования
	ХозОперацияПриИзмененииНаСервере();
	
	ОбновитьИнформациюОКорректировках();
	
	НастроитьОтображениеВводаСчетаНаОплату();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец АльфаАвто.СобытияОбъектов
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
		РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
		
		НастроитьПараметрыВыбораЭлементовФормы();
		УправлениеДиалогомНаСервере();
		ПодсветкаНаСервере();
		
	КонецЕсли;	
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);
	Если Элементы.ТоварыОстатокНаСкладе.Видимость Тогда
		РаботаСФормой.ОтобразитьОстаткиТоваровНаСкладе(Объект, Элементы.ТоварыОстатокНаСкладе);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// УтверждениеДокументов
	УтверждениеДокументовКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец УтверждениеДокументов
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	УстановитьДоступностьЖалобы();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ПриОткрытии_ФормаДокумента(ЭтотОбъект, Отказ);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СозданСчетНаОплату"
		И Источник = Объект.Ссылка Тогда
		
		НастроитьВидимостьСчетаНаОплатуЗаказа();
		Возврат;
		
	КонецЕсли;
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормыКлиент.ОбработкаОповещения_ФормаДокумента(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец АльфаАвто.СобытияОбъектов
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		Возврат;
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// Штрихкодирование
	ШтрихкодированиеКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец Штрихкодирование
	
	// УтверждениеДокументов
	УтверждениеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец УтверждениеДокументов
	
КонецПроцедуры 

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриЧтенииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПриЧтенииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);

	// Заполним "Как уведомлять о резервировании"
	УведомлениеОРезервировании();
	
	ОтображениеСрокаПоставки();
	ОтображениеСрокаСнятияРезерва();
	ОтображениеГрафикаПоставок();
	РассчитатьМассуНоменклатуры();
	ПодсветкаНаСервере();
	ОбновитьИнформациюОКорректировках();
	НастроитьВидимостьСчетаНаОплатуЗаказа();
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПриЧтенииНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("ЗаказПокупателя", ПараметрыЗаписи.РежимЗаписи,
		Объект.Товары.Количество() > 50);
		
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);

КонецПроцедуры 

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	Если (НЕ ЗначениеЗаполнено(Объект.ДокументОснование)) ИЛИ (НЕ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд")) Тогда
		
		Если Объект.ДоговорВзаиморасчетов.ПроцентПредоплаты = -1 Тогда
			
			МинимальныйПроцентПредоплаты = ПраваИНастройкиПользователя.Значение("МинимальныйПроцентПредоплаты");
			
		Иначе
			
			МинимальныйПроцентПредоплаты = Объект.ДоговорВзаиморасчетов.ПроцентПредоплаты;
			
		КонецЕсли;
		
		Если МинимальныйПроцентПредоплаты > Объект.ПроцентПредоплаты Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Запрещено изменять минимальный процент предоплаты менее, чем " + Формат(МинимальныйПроцентПредоплаты, "ЧЦ=5; ЧДЦ=2; ЧН=0")+"%'"),
				,
				"ПроцентПредоплаты", "Объект"
				,
				Отказ
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого Строка Из ТекущийОбъект.Товары Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ИдентификаторСтроки) Тогда
			Строка.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПередЗаписьюНаСервере_ФормаДокумента(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;

	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	
	// Штрихкодирование
	ШтрихкодированиеВызовСервера.ЗаписатьШтрихкодДокумента(ЭтотОбъект, Объект);
	// Конец Штрихкодирование
	
	НастроитьВидимостьСчетаНаОплатуЗаказа();
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();

	ПодсветкаНаСервере();
	ОтображениеГрафикаПоставок();
	
	// Заполним "Как уведомлять о резервировании"
	УведомлениеОРезервировании(Истина);
	
	ОбновитьСостояниеЗаказа();
	НастроитьПараметрыВыбораЭлементовФормы();
	РассчитатьМассуНоменклатуры();
	УправлениеДиалогомНаСервере();
	
	// АльфаАвто.СобытияОбъектов
	СобытияОбъектовФормы.ПослеЗаписиНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец АльфаАвто.СобытияОбъектов
	
	Если ТипЗнч(ТекущийОбъект.ДокументОснование) = Тип("ДокументСсылка.Событие") Тогда
		ОбработкаСобытийДокументаСервер.ОбновитьДокументОснование_Событие(ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтаФорма, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверкаОбновленияСтатуса", 0.5, Истина);
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.Событие") Тогда
		Оповестить("ОповещениеДляДокументаСобытие", Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	Настройки.Вставить("ПоказыватьПодсветку", Элементы.ТоварыПодсветка.Пометка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;

	Если Настройки.Получить("ПоказыватьПодсветку")=ИСТИНА Тогда
		Элементы.ТоварыПодсветка.Пометка = Истина;
		ПодсветкаНаСервере();
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказПокупателя.ДатаПриИзменении(Объект, ПараметрыДействия);
	ОтображениеСрокаПоставки();
	ОтображениеСрокаСнятияРезерва();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказПокупателя.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("НеобходимоПерезаполнитьАвтомобиль", Ложь);
	
	КонтрагентПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказПокупателя.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	ОтображениеСрокаПоставки();
	ОтображениеСрокаСнятияРезерва();
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Объект.Контрагент, ПараметрыДействия);
	
	ПриИзмененииКлючевыхРеквизитовСостояниеЭДО();
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	УправлениеСвойствамиАльфаАвто.ЗаполнитьМеткиКонтрагента(ЭтотОбъект, Объект.Контрагент);
	
КонецПроцедуры 

&НаКлиенте
Процедура ДоговорВзаиморасчетовПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказПокупателя.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(Объект.ДоговорВзаиморасчетов, ПараметрыДействия);
	
	ПриИзмененииКлючевыхРеквизитовСостояниеЭДО();
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДокументОснованиеПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ДокументОснованиеПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказПокупателя.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура СкладКомпанииПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	СкладКомпанииПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура СкладКомпанииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказПокупателя.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура УведомлениеОРезервированииПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПроцентПредоплатыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказПокупателя.РасчетПредоплаты(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроцентПредоплатыПриИзменении(Элемент)
	
	Объект.ПерерасчетОтПредоплаты = Ложь;
	ПараметрыДействия = Новый Структура;
	ПроцентПредоплатыПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура СуммаПредоплатыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказПокупателя.СуммаПредоплатыПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура СуммаПредоплатыПриИзменении(Элемент)
	
	Объект.ПерерасчетОтПредоплаты = Истина;
	ПараметрыДействия = Новый Структура;
	СуммаПредоплатыПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура СрокПоставкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ОтображениеСрокаПоставки();
	
КонецПроцедуры 

&НаКлиенте
Процедура СрокПоставкиПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	СрокПоставкиПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура СрокСнятияРезерваПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ОтображениеСрокаСнятияРезерва();
	
КонецПроцедуры 

&НаКлиенте
Процедура СрокСнятияРезерваПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	СрокСнятияРезерваПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура АвтомобильПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаказПокупателя.АвтомобильПриИзменении(Объект, ПараметрыДействия);
	ОтображениеСрокаПоставки();
	ОтображениеСрокаСнятияРезерва();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("НеобходимоПерезаполнитьЗаказчика", Ложь);
	
	АвтомобильПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура АвтомобильРасширеннаяПодсказкаНажатие(Элемент)
	
	АвтомобилиКлиент.ОтчетИсторияАвтомобиля(ЭтотОбъект, Объект.Автомобиль);
	
КонецПроцедуры 

&НаКлиенте
Процедура ДекорацияСостояниеЭДОНажатие(Элемент)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СкидкиНаценкиКлиент.ОбработкаВыбора(ЭтотОбъект, Поле, ВыбраннаяСтрока, Объект.БлокироватьПерерасчетСкидок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
		УправлениеДиалогомДокументаКлиент.ТоварыПриОкончанииРедактирования(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока,
		ОтменаРедактирования
	);
	
	// Так как функция "Итог()" по ТЧ вызывает сервер, то сделаем перебор строк на клиенте.
	СуммаСоСкидкой = 0;
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		СуммаСоСкидкой = СуммаСоСкидкой + СтрокаТЧ.СуммаВсего;
		
	КонецЦикла;
	
	Если НЕ Объект.ПерерасчетОтПредоплаты Тогда
		
		Объект.СуммаПредоплаты = (СуммаСоСкидкой * Объект.ПроцентПредоплаты) / 100;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ТоварыПослеУдаленияНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомДокументаСервер.ТоварыПослеУдаления(ЭтотОбъект, Элементы.Товары, ПараметрыДействия);
	
	Документы.ЗаказПокупателя.РасчетПредоплаты(Объект, ПараметрыДействия);
	
КонецПроцедуры

#Область ОбработчикиСобытийПолейТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТоварыНоменклатураПриИзмененииНаСервере();
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(Объект, ТекущиеДанные, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказПокупателя.ТоварыНоменклатураПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
	УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, ТекущиеДанные, ПараметрыДействия);
	
	РассчитатьМассуСтрокиТовары(ТекущиеДанные);
	ОбработкаТабличнойЧастиТовары.ВывестиОбщуюМассуТоваров(Объект.Товары, ТоварыМассаТекстПодвала, ЕдиницаИзмеренияМассы);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущиеДанные.Номенклатура);
	
	УправлениеДиалогомДокументаКлиент.ТоварыНоменклатураНачалоВыбора(
		ЭтотОбъект,
		Элемент,
		ДанныеВыбора,
		ВыборДобавлением,
		СтандартнаяОбработка,
		ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказПокупателя.ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
	РассчитатьМассуСтрокиТовары(ТекущиеДанные);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТоварыЕдиницаИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказПокупателя.ТоварыЕдиницаИзмеренияПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
	РассчитатьМассуСтрокиТовары(ТекущиеДанные);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТоварыКоличествоПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказПокупателя.ТоварыКоличествоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
	РассчитатьМассуСтрокиТовары(ТекущиеДанные);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыГрафикПоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда// Формируем описание обработчика перехвата закрытия формы
		ОбработчикВопроса = Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияГрафикПоставки", ЭтотОбъект);
		
		// Формируем текст вопроса
		ТекстВопроса = НСтр("ru = 'Для формирования графика поставок заказ должен быть записан.
			|Записать объект?'");
		
		// Получаем подтверждение операции от пользователя
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		СформироватьГрафикПоставок();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыРезервПриИзменении(Элемент)
	
	ТоварыРезервПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыРезервПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказПокупателя.ТоварыРезервПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТоварыЦенаПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыЦенаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказПокупателя.ТоварыЦенаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТоварыСуммаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказПокупателя.ТоварыСуммаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказПокупателя.ТоварыСуммаВсегоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСуммаВсегоПриИзменении(Элемент)
	
	ТоварыСуммаВсегоПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказПокупателя.ТоварыСтавкаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТоварыСтавкаНДСПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСуммаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказПокупателя.ТоварыСуммаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТоварыСуммаНДСПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСуммаСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказПокупателя.ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Элемент)
	
	ТоварыСуммаСкидкиСтрокиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказПокупателя.ТоварыСуммаСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	
	ТоварыСуммаСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСкидкаНаТоварПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Ложь;
	ТекущиеДанные.СкидкаСтрокиИзменена = Истина;
	Документы.ЗаказПокупателя.ТоварыСкидкаНаТоварПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкидкаНаТоварПриИзменении(Элемент)
	
	ТоварыСкидкаНаТоварПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПроцентСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказПокупателя.ТоварыПроцентСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиПриИзменении(Элемент)
	
	ТоварыПроцентСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПроцентСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаказПокупателя.ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при изменении данных реквизита "Процент скидки строки".
//
// Параметры:
//  Элемент - ПолеФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Элемент)
	
	// Обработаем событие в контексте сервера
	ТоварыПроцентСкидкиСтрокиПриИзмененииНаСервере();

КонецПроцедуры
// Alfa_IvEd ---

&НаСервере
Процедура ТоварыПоставщикПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаказПокупателя.ТоварыПоставщикПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоставщикПриИзменении(Элемент)
	
	ТоварыПоставщикПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоставщикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПоискВПрайсЛистахКлиент.ПоставщикНачалоВыбора(
		ЭтотОбъект,
		Элемент,
		ТекущиеДанные.Номенклатура,
		Элементы.Товары.ТекущаяСтрока,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоставщикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ТекущаяСтрока") Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбранноеЗначение.ТекущаяСтрока);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ВыбранноеЗначение);
		
		ТоварыЦенаПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОКорректировкахДокументаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НРег(НавигационнаяСсылкаФорматированнойСтроки) = "открытьсписок" Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОткрытия = Новый Структура;
		Отборы = Новый Структура();  
		Отборы.Вставить("ДокументОснование", Объект.Ссылка); 
		Отборы.Вставить("Проведен", Истина);
		ПараметрыОткрытия.Вставить("Отбор", Отборы);
		
		ОткрытьФорму("Документ.КорректировкаЗаказаПокупателя.ФормаСписка", ПараметрыОткрытия);
	КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)
	
	ОписаниеОбъекта = Неопределено;
	РежимПросмотраМеток = Ложь;
	
	Если СтрНайти(ЭлементИлиКоманда.Имя, "ОстальныеМетки") = 1 Тогда
		
		Если ЭлементИлиКоманда.Родитель.Имя = "ГруппаМеткиКонтрагента" Тогда
			ОписаниеОбъекта = Объект.Контрагент;
			РежимПросмотраМеток = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеСвойствамиАльфаАвтоКлиент.ВыполнитьКоманду(
		ЭтотОбъект,
		ЭлементИлиКоманда,
		СтандартнаяОбработка,
		ОписаниеОбъекта,
		РежимПросмотраМеток);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// Обработчик события нажатия кнопки "Подсветка" на сервере.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаСервере
Процедура ПодсветкаНаСервере()
	
	ИспользоватьПодсветку = Элементы.ТоварыПодсветка.Пометка;
	
	Для Каждого ЭлементОформления Из УсловноеОформление.Элементы Цикл
		
		Если НЕ СтрНайти(ЭлементОформления.Представление, "Состояние") = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементОформления.Использование = ИспользоватьПодсветку;
		
	КонецЦикла;
	
	Если (НЕ ИспользоватьПодсветку) ИЛИ (НЕ Объект.Проведен) Тогда
		Подсвечивать = Ложь;
	Иначе
		Подсвечивать = Истина;
	КонецЕсли;
	
	// Сначала получим список номенклатуры по документу
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ТаблицаЗаказа
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка = &Заказ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) КАК Заказано,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) КАК Зарезервировано,
	|	ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0) КАК Распределено,
	|	ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток - ОстаткиТоваровКомпанииОстатки.РезервОстаток, 0) КАК ОстатокНаСкладе
	|ИЗ
	|	ТаблицаЗаказа КАК ДокументТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(, Заказ = &Заказ) КАК ЗаказыПокупателейОстатки
	|		ПО ДокументТовары.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
	|			И ДокументТовары.ХарактеристикаНоменклатуры = ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыРаспределение.Остатки(, ЗаказПокупателя = &Заказ) КАК ЗаказыРаспределениеОстатки
	|		ПО ДокументТовары.Номенклатура = ЗаказыРаспределениеОстатки.Номенклатура
	|			И ДокументТовары.ХарактеристикаНоменклатуры = ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваровКомпании.Остатки(
	|				,
	|				(Номенклатура, ХарактеристикаНоменклатуры) В
	|						(ВЫБРАТЬ
	|							ТаблицаЗаказа.Номенклатура КАК Номенклатура,
	|							ТаблицаЗаказа.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|						ИЗ
	|							ТаблицаЗаказа КАК ТаблицаЗаказа)
	|					И СкладКомпании = &СкладКомпании) КАК ОстаткиТоваровКомпанииОстатки
	|		ПО ДокументТовары.Номенклатура = ОстаткиТоваровКомпанииОстатки.Номенклатура
	|			И ДокументТовары.ХарактеристикаНоменклатуры = ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры");
	
	Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
	Запрос.УстановитьПараметр("СкладКомпании", Объект.СкладКомпании);
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		ОтборПоНоменклатуре = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаТЧ.Номенклатура, СтрокаТЧ.ХарактеристикаНоменклатуры);
		НоменклатураОбороты = Выгрузка.НайтиСтроки(ОтборПоНоменклатуре);
		
		Если НоменклатураОбороты.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// В списке оборотов номенклатура найдена
		ДвиженияНоменклатуры = НоменклатураОбороты[0];
		// Раскрасим в зависимости от состояния заказа
		Если Подсвечивать Тогда
			// Раскрасим в зависимости от состояния заказа
			Если ДвиженияНоменклатуры.Заказано = 0 Тогда
				// Номенклатура не отпущена
				СтрокаТЧ.НомерЦвета = 1;
			ИначеЕсли ДвиженияНоменклатуры.Заказано > (ДвиженияНоменклатуры.ОстатокНаСкладе + ДвиженияНоменклатуры.Зарезервировано) Тогда
				// Номенклатуры недостаточно на складе
				Если ДвиженияНоменклатуры.Заказано > (ДвиженияНоменклатуры.Распределено + ДвиженияНоменклатуры.Зарезервировано) Тогда
					СтрокаТЧ.НомерЦвета = 5;
				Иначе
					СтрокаТЧ.НомерЦвета = 4;
				КонецЕсли;
			ИначеЕсли ДвиженияНоменклатуры.Зарезервировано > 0 Тогда
				// Номенклатура зарезервирована на складе
				СтрокаТЧ.НомерЦвета = 2;
			ИначеЕсли ДвиженияНоменклатуры.ОстатокНаСкладе > 0 Тогда
				// Номенклатура есть на складе
				СтрокаТЧ.НомерЦвета = 3;
			ИначеЕсли ДвиженияНоменклатуры.Распределено > 0 Тогда
				// Номенклатура распределена по заказам поставщиков
				СтрокаТЧ.НомерЦвета = 4;
			ИначеЕсли ДвиженияНоменклатуры.Заказано > 0 Тогда
				// Номенклатура не отпущена
				СтрокаТЧ.НомерЦвета = 5;
			Иначе
				// Прочие ситуации
				СтрокаТЧ.НомерЦвета = 6;
			КонецЕсли;
		Иначе
			// Черный цвет
			СтрокаТЧ.НомерЦвета = 0;
		КонецЕсли;
		
		СтрокаТЧ.Зарезервировано = ДвиженияНоменклатуры.Зарезервировано;
		СтрокаТЧ.ОстатокНаСкладе = ДвиженияНоменклатуры.ОстатокНаСкладе;
		
	КонецЦикла;
	
КонецПроцедуры //ПодсветкаНаСервере()

// Обработчик события нажатия кнопки "Подсветка".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура Подсветка(Команда)
	
	Элементы.ТоварыПодсветка.Пометка = (НЕ Элементы.ТоварыПодсветка.Пометка);
	
	// Обработаем в контексте сервера
	ПодсветкаНаСервере();
	
	// Взведем признак необходимости выполнить сохранение настроек формы при закрытии
	СохраняемыеВНастройкахДанныеМодифицированы = ИСТИНА;
	
КонецПроцедуры //Подсветка()

&НаКлиенте
// Открывает форму обработки "Упущенный спрос".
Процедура УпущенныйСпрос(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыНоменклатуры = Новый Структура;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ПараметрыНоменклатуры.Вставить("Количество",   ТекущиеДанные.Количество);
		ПараметрыНоменклатуры.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ПараметрыНоменклатуры", ПараметрыНоменклатуры);
	ОткрытьФорму("Обработка.УпущенныйСпрос.Форма", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Подбор номенклатуры".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	ИмяРеквизитаКоличества = "Количество";
	
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.РезервированиеПокупателя") Тогда
		
		ИмяРеквизитаКоличества = "Резерв";
		
	КонецЕсли; 
	
	ПараметрыДействия = Новый Структура();
	ПараметрыДействия.Вставить("ЕстьКлючСтрокиПоставщика", Истина);
	ПараметрыДействия.Вставить("НеУстанавливатьОтборНаОстаток", Истина);
	
	// Вызываем общий обработчик события
	УправлениеДиалогомКлиент.ОткрытьПодборНоменклатуры(ЭтотОбъект,,,ИмяРеквизитаКоличества,, ПараметрыДействия);
	
КонецПроцедуры // ПодборНоменклатуры()

&НаКлиенте
Процедура ПодборЗамен(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СвернутьПо", "Номенклатура,ХарактеристикаНоменклатуры");
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ПодборЗаменЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СкладКомпанииОстатки",  Объект.СкладКомпании);
	ПодборТоваровКлиент.ОткрытьПодборЗаменНоменклатуры(ЭтотОбъект, Объект, ПараметрыОткрытия, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусЗаказа(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Документ не записан. Состояние заказа не установлено.'"), Объект.Ссылка);
	КонецЕсли;
	
	ОбновитьСостояниеЗаказа();
	
КонецПроцедуры // ОбновитьСтатусЗаказа()

&НаКлиенте
Процедура СоздатьСчетНаОплатуПолный(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить(
		"Основание",
		Новый Структура("Основание_СчетНаОплату,ПерезаполнитьТоварыПоЗаказу", Объект.Ссылка, Истина));
	
	ОткрытьФорму(
		"Документ.СчетНаОплату.ФормаОбъекта",
		ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчетНаОплатуПоОстаткам(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Основание", Объект.Ссылка);
	
	ОткрытьФорму(
		"Документ.СчетНаОплату.ФормаОбъекта",
		ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует информация о сроке поставки
//
&НаСервере
Процедура ОтображениеСрокаПоставки()
	
	Если ЗначениеЗаполнено(Объект.СрокПоставки) Тогда
		Если Объект.Ссылка.Пустая() ИЛИ НЕ Объект.Ссылка.Проведен Тогда
			ПросроченоДней = Цел((Объект.Дата - Объект.СрокПоставки)/86400);
		Иначе
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	МАКСИМУМ(ЗаказыПокупателей.Период) КАК Период,
			|	СУММА(ВЫБОР
			|		КОГДА ЗаказыПокупателей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
			|			ЗаказыПокупателей.Заказано
			|		ИНАЧЕ
			|			-ЗаказыПокупателей.Заказано
			|	КОНЕЦ) КАК Заказано
			|ИЗ
			|	РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
			|ГДЕ
			|	ЗаказыПокупателей.Заказ = &Заказ");
			Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Если Выборка.Период = NULL Тогда
					ПросроченоДней = 0;
				ИначеЕсли Выборка.Заказано > 0 Тогда
					ПросроченоДней = Цел((Объект.Дата - Объект.СрокПоставки)/86400);
				Иначе
					ПросроченоДней = 0;
				КонецЕсли;
			Иначе
				ПросроченоДней = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если ПросроченоДней>0 Тогда
			Элементы.СрокПоставки.РасширеннаяПодсказка.Заголовок= НСтр("ru = 'срок поставки истек'") + Символы.НПП + СокрЛП(ПросроченоДней)+ " " + УправлениеПечатьюПлатформа.ПолучитьПредставлениеДня(ПросроченоДней) + " назад";
			Элементы.СрокПоставки.РасширеннаяПодсказка.ЦветТекста=Новый Цвет(128,0,0);
		ИначеЕсли ПросроченоДней < 0 Тогда
			ПросроченоДней = ПросроченоДней * -1;
			Элементы.СрокПоставки.РасширеннаяПодсказка.Заголовок=НСтр("ru = 'будет доставлено через '") + СокрЛП(ПросроченоДней)+ " " + УправлениеПечатьюПлатформа.ПолучитьПредставлениеДня(ПросроченоДней);
			Элементы.СрокПоставки.РасширеннаяПодсказка.ЦветТекста=Новый Цвет(0,0,128);
		Иначе
			Элементы.СрокПоставки.РасширеннаяПодсказка.Заголовок="";
			Элементы.СрокПоставки.РасширеннаяПодсказка.ЦветТекста=Новый Цвет(0,128,0);
		КонецЕсли; 
	Иначе
		Элементы.СрокПоставки.РасширеннаяПодсказка.Заголовок  = НСтр("ru = 'срок не определен'");
		Элементы.СрокПоставки.РасширеннаяПодсказка.ЦветТекста = Новый Цвет(0, 0, 128);
	КонецЕсли;
	
КонецПроцедуры // ОтображениеСрокаПоставки()

// Формирует информация о сроке резервирования
//
&НаСервере
Процедура ОтображениеСрокаСнятияРезерва()
	
	Если ЗначениеЗаполнено(Объект.СрокСнятияРезерва) Тогда
		
		Если Объект.Ссылка.Пустая() ИЛИ НЕ Объект.Ссылка.Проведен Тогда
			ПросроченоДней = Цел((Объект.Дата - Объект.СрокСнятияРезерва)/86400);
		Иначе
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	МАКСИМУМ(ЗаказыПокупателей.Период) КАК Период,
			|	СУММА(ВЫБОР
			|		КОГДА ЗаказыПокупателей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
			|			ЗаказыПокупателей.Заказано
			|		ИНАЧЕ
			|			-ЗаказыПокупателей.Заказано
			|	КОНЕЦ) КАК Заказано
			|ИЗ
			|	РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
			|ГДЕ
			|	ЗаказыПокупателей.Заказ = &Заказ");
			Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Если Выборка.Период = NULL Тогда
					ПросроченоДней = 0;
				ИначеЕсли Выборка.Заказано > 0 Тогда
					ПросроченоДней = Цел((Объект.Дата - Объект.СрокСнятияРезерва)/86400);
				Иначе
					ПросроченоДней = 0;
				КонецЕсли;
			Иначе
				ПросроченоДней = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если ПросроченоДней>0 Тогда
			Элементы.СрокСнятияРезерва.РасширеннаяПодсказка.Заголовок  = НСтр("ru = 'срок снятия резерва истек'") + Символы.НПП + СокрЛП(ПросроченоДней)+ " " + УправлениеПечатьюПлатформа.ПолучитьПредставлениеДня(ПросроченоДней) + " назад";
			Элементы.СрокСнятияРезерва.РасширеннаяПодсказка.ЦветТекста = Новый Цвет(128,0,0);
		Иначе
			Элементы.СрокСнятияРезерва.РасширеннаяПодсказка.Заголовок  = "";
			Элементы.СрокСнятияРезерва.РасширеннаяПодсказка.ЦветТекста = Новый Цвет(0,128,0);
		КонецЕсли;
		
	Иначе
		
		Элементы.СрокСнятияРезерва.РасширеннаяПодсказка.Заголовок  = НСтр("ru = 'срок не определен'");
		Элементы.СрокСнятияРезерва.РасширеннаяПодсказка.ЦветТекста = Новый Цвет(0,0,128);
		
	КонецЕсли;
	
КонецПроцедуры // ОтображениеСрокаСнятияРезерва()

// Формирует информация о графике поставок
//
&НаСервере
Процедура ОтображениеГрафикаПоставок()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГрафикПоставок.ИдентификаторСтроки,
	|	ГрафикПоставок.Количество,
	|	ГрафикПоставок.ДатаПоставки
	|ИЗ
	|	РегистрСведений.ГрафикПоставок КАК ГрафикПоставок
	|ГДЕ
	|	ГрафикПоставок.ЗаказПокупателя = &Ссылка
	|ИТОГИ
	|ПО
	|	ИдентификаторСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаСтроки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока ВыборкаСтроки.Следующий() Цикл
		
		ПредставлениеПоставки = "";
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ВыборкаСтроки.ИдентификаторСтроки));
		
		Если НайденныеСтроки .Количество()>0 Тогда
			
			ТоварнаяСтрока = НайденныеСтроки[0];
			Выборка = ВыборкаСтроки.Выбрать(ОбходРезультатаЗапроса.Прямой);
			
			Пока Выборка.Следующий() Цикл
				
				ПредставлениеПоставки = ПредставлениеПоставки
					+ ?(ПредставлениеПоставки = "", "", "; ")
					+ Строка(Выборка.Количество/ТоварнаяСтрока.Коэффициент)
					+ " "
					+ ТоварнаяСтрока.ЕдиницаИзмерения
					+ ","
					+ Символы.НПП
					+ НСтр("ru = 'дата поставки:'")
					+ Символы.НПП
					+ Формат(Выборка.ДатаПоставки, "ДФ=dd.MM.yy");
					
			КонецЦикла;
			
			ТоварнаяСтрока.ГрафикПоставки = ПредставлениеПоставки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизит "Масса" у строки табличной части "Товары"
//
&НаСервере
Процедура РассчитатьМассуСтрокиТовары(ТекущиеДанные)
	
	ТекущиеДанные.Масса = ОбработкаТабличнойЧастиТовары.ПолучитьМассуСтрокиТовары(ТекущиеДанные);
	
КонецПроцедуры //РассчитатьМассуСтрокиТовары()

// Заполняет реквизит "Масса" у табличной части "Товары"
//
&НаСервере
Процедура РассчитатьМассуНоменклатуры()
	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		РассчитатьМассуСтрокиТовары(СтрокаТаблицы);
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТовары.ВывестиОбщуюМассуТоваров(Объект.Товары, ТоварыМассаТекстПодвала, ЕдиницаИзмеренияМассы);
	
КонецПроцедуры // РассчитатьМассуНоменклатуры()

// Процедура настраивает параметры открытия формы для формирования графика закупок.
&НаКлиенте
Процедура СформироватьГрафикПоставок()
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтроки) Тогда
		ТекущиеДанные.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки);
	ПараметрыОткрытия.Вставить("ЗаказПокупателя", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	ПараметрыОткрытия.Вставить("ХарактеристикаНоменклатуры", ТекущиеДанные.ХарактеристикаНоменклатуры);
	ПараметрыОткрытия.Вставить("Количество", ТекущиеДанные.Количество);
	ПараметрыОткрытия.Вставить("ЕдиницаИзмерения", ТекущиеДанные.ЕдиницаИзмерения);
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаГрафикПоставок",
				ПараметрыОткрытия,
				Элементы.ТоварыГрафикПоставки,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработкаРезультатаОповещенияСформироватьГрафикПоставок", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры //СформироватьГрафикПоставок()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияГрафикПоставки(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		Записать();
		СформироватьГрафикПоставок();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияГрафикПоставки()

// Обработчик события возникающего при выполнении оповещения данной формы о прекращении работы подчиненной.
//
// Параметры:
//  РезультатОповещения     - Произвольный - Результат выполнения операции в подчиненной форме.
//  ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта описания оповещения.
//
&НаКлиенте
Процедура ОбработкаРезультатаОповещенияСформироватьГрафикПоставок(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Проверяем статус закрытия окна параметров
	Если РезультатОповещения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.ГрафикПоставки = РезультатОповещения;
	
КонецПроцедуры // ОбработкаРезультатаОповещенияСформироватьГрафикПоставок()

// Процедура выполняет чтение/запись регистра сведений "Дополнительные сведения" для реквизита "Уведомление о резервировании".
//
// Параметры:
//  Записать - Булево - Выполнить запись или чтение регистра.
//
&НаСервере
Процедура УведомлениеОРезервировании(Записать = Ложь)
	
	Если Записать Тогда  
		
		Если ЗначениеЗаполнено(УведомлениеОРезервировании)Тогда 	
			ТаблицаДопРеквизитов = Новый ТаблицаЗначений;
			ТаблицаДопРеквизитов.Колонки.
				Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
			ТаблицаДопРеквизитов.Колонки.Добавить("Значение");
			
			НоваяСтрока = ТаблицаДопРеквизитов.Добавить();
			НоваяСтрока.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.УведомлениеОРезервировании;
			НоваяСтрока.Значение = УведомлениеОРезервировании;
			
			УстановитьПривилегированныйРежим(Истина);
			УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(Объект.Ссылка, ТаблицаДопРеквизитов);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеСведения.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Объект = &Объект
		|	И ДополнительныеСведения.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.УведомлениеОРезервировании)";
		Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
		Если РезультатЗапроса.Следующий() Тогда
			УведомлениеОРезервировании = РезультатЗапроса.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область СвязанныеРаботы

&НаСервере
Функция ПодборСвязанныхРаботЗавершениеНаСервере(СвязанныеПозиции)
	
	ПараметрыДействия = СвязанныеРаботы.ЗаполнитьСвязаннымиРаботами(СвязанныеПозиции, Объект, ЭтотОбъект);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработка выбора пользователем связанных работ.
//
// Параметры:
//  СвязанныеРаботы - Массив - Выбранные пользователем связанные работы.
//  Постобработка   - Структура - Содержит поля:
//                                  Обработчик - ОписаниеОповещения - Обработчик который необходимо выполнить после
//                                                                    выбора связанных.
//                                  Данные - Произвольный - Данные передаваемые в выполнение обработчика как результат.
//
&НаКлиенте
Процедура Подключаемый_ПодборСвязанныхРаботЗавершение(СвязанныеРаботы, Постобработка = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СвязанныеРаботы) Тогда
		
		ПараметрыДействия = ПодборСвязанныхРаботЗавершениеНаСервере(СвязанныеРаботы);
		
	КонецЕсли;
	
	СвязанныеРаботыКлиент.Постобработка(Постобработка);
	
	// Вызываем обработчик результата выполнения
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры // Подключаемый_ПодборСвязанныхРаботЗавершение()

#КонецОбласти

&НаСервере
Процедура ОбновитьСостояниеЗаказа()
	
	СостояниеЗаказа = РегистрыСведений.ЖурналСостояний.ПолучитьСостояниеОбъекта(Объект.Ссылка);
	
КонецПроцедуры // ОбновитьСостояниеЗаказа()

&НаКлиенте
Процедура Подключаемый_ПроверкаОбновленияСтатуса()
	
	ОбновитьСостояниеЗаказа();
	
КонецПроцедуры // Подключаемый_ПроверкаОбновленияСтатуса()

&НаКлиенте
Процедура Подключаемый_ПодборЗаменЗавершение(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаПодбораЗамен(РезультатОповещения, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаПодбораЗамен(Результат, ДополнительныеПараметры=Неопределено)
	
	ЗаменыСервер.ВыполнитьЗаменуТоваровВДокументе(Объект, Результат, Ложь, ДополнительныеПараметры);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЗаполнениеОбъектов
&НаКлиенте
Процедура ПослеОбработкиЗаполнения(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ПослеОбработкиЗаполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиЗаполненияНаСервере()
	
	ЗаполнениеОбъектовАльфаАвто.ПослеОбработкиЗаполнения(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ЗаполнениеОбъектов

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКлючевыхРеквизитовСостояниеЭДО()
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	ПараметрыПриИзменении = ОбменСКонтрагентами.ПараметрыПриИзмененииКлючевыхРеквизитовЭДО();
	
	ПараметрыПриИзменении.Форма                  = ЭтотОбъект;
	ПараметрыПриИзменении.ДокументСсылка         = Объект.Ссылка;
	ПараметрыПриИзменении.ДокументОбъект         = РеквизитФормыВЗначение("Объект");
	ПараметрыПриИзменении.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПриИзменении.ГруппаСостояниеЭДО     = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПриИзмененииКлючевыхРеквизитовЭДО(ПараметрыПриИзменении);
	
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСуммаДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.ПоказатьРасширенныеИтогиОперации(ЭтотОбъект, Элемент);
	
КонецПроцедуры
// Конец Ядро

&НаКлиенте
Процедура НадписьВзаиморасчетыНажатие(Элемент)
	
	УправлениеДиалогомДокументаКлиент.НадписьВзаиморасчетыНажатие(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	// Вызываем общий обработчик события настройки параметров выбора
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры 

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	// Вызываем общий обработчик действия
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ЗаказРезервированиеПокупателя ИЛИ Объект.ХозОперация=Справочники.ХозОперации.РезервированиеПокупателя Тогда
		Элементы.ТоварыРезерв.Видимость          = Истина;
		Элементы.ТоварыОстатокНаСкладе.Видимость = Истина;
		Если Объект.ХозОперация = Справочники.ХозОперации.РезервированиеПокупателя Тогда
			Элементы.СкладКомпании.Заголовок = НСтр("ru = 'Резервировать на'");
		Иначе
			Элементы.СкладКомпании.Заголовок = НСтр("ru = 'Резерв/отгрузка с'");
		КонецЕсли;
	Иначе
		Элементы.ТоварыРезерв.Видимость          = Ложь;
		Элементы.ТоварыОстатокНаСкладе.Видимость = Ложь;
		Элементы.СкладКомпании.Заголовок = НСтр("ru = 'Склад отгрузки'");
	КонецЕсли;
	
	Если Объект.ХозОперация = Справочники.ХозОперации.РезервированиеПокупателя Тогда
		Элементы.ТоварыКоличество.Видимость = Ложь;
	Иначе
		Элементы.ТоварыКоличество.Видимость = Истина;
	КонецЕсли;
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ЗаказПокупателя Тогда
		Элементы.ТоварыЗарезервировано.Видимость = Ложь;
		Элементы.СрокСнятияРезерва.Видимость = Ложь;
	Иначе
		Элементы.ТоварыЗарезервировано.Видимость = Истина;
		Элементы.СрокСнятияРезерва.Видимость = Истина;
	КонецЕсли;
	
	// Сформируем информацию об автомобиле
	Элементы.АвтомобильРасширеннаяПодсказка.Заголовок   = Справочники.Автомобили.СформироватьИнформациюАвтомобиля(Объект);
	
	Элементы.ТоварыУпущенныйСпрос.Видимость = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.УпущенныйСпрос);
	
	СпособВыбораСкидки = ПравоПользователя("СпособВыбораСкидки", Объект);
	ДоступныСкидки = СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидки
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.АвтоматическиеИРучныеСкидки
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов;
	ДоступноРедактированиеСкидок = СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыПроцентСкидки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСуммаСкидки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСкидкаНаТовар",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступныСкидки
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыПроцентСкидкиСтроки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСуммаСкидкиСтроки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаСчетаНаОплату",
		"Видимость",
		Не Объект.Ссылка.Пустая() И ПравоДоступа("Просмотр", Метаданные.Документы.СчетНаОплату)
	);
	
КонецПроцедуры // УправлениеДиалогомНаСервере()

&НаСервере
Процедура УстановитьУсловноеОформление()
 
	// Вызываем общий обработчик действия
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформление(ЭтотОбъект);
	
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеРучногоСписанияХарактеристик(ЭтотОбъект);
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеСуммыВсего(ЭтотОбъект);
	
	СкидкиНаценкиСервер.УстановитьУсловноеОформление(
		ЭтотОбъект,
		СкидкиНаценкиСервер.ПараметрыУстановкиУсловногоОформления(ЭтотОбъект)
	);
	
	Раскраска = Новый Соответствие;
	Раскраска.Вставить(0, Новый Цвет(0, 0, 0));
	Раскраска.Вставить(1, Новый Цвет(128, 128, 128));
	Раскраска.Вставить(2, Новый Цвет(139, 69, 19));
	Раскраска.Вставить(3, Новый Цвет(0, 128, 0));
	Раскраска.Вставить(4, Новый Цвет(128, 128, 0));
	Раскраска.Вставить(5, Новый Цвет(255, 0, 0));
	Раскраска.Вставить(6, Новый Цвет(204, 153, 255));
	
	Для Каждого Строка Из Раскраска Цикл
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерЦвета");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Строка.Ключ;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Строка.Значение);
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Документы.ЗаказПокупателя.РасчетПредоплаты(Объект, Новый Структура);
	РассчитатьМассуНоменклатуры();
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	// Вызываем общий обработчик события в контексте клиента
	Если НЕ УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "ТоварыГрафикПоставкиНачалоВыбора" Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			Записать();
			СформироватьГрафикПоставок();
		КонецЕсли;
		Возврат
		
	ИначеЕсли ДополнительныеПараметры = "СформироватьГрафикПоставок" Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ТекущиеДанные.ГрафикПоставки = РезультатОповещения;
		Возврат
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "НеобходимоПерезаполнитьЗаказчика", Ложь) Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			АвтомобильПриИзмененииНаСервере(ДополнительныеПараметры);
		КонецЕсли;
		Возврат;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "НеобходимоПерезаполнитьАвтомобиль", Ложь) Тогда
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
			Объект.Автомобиль = ПредопределенноеЗначение("Справочник.Автомобили.ПустаяСсылка");
			КонтрагентПриИзмененииНаСервере(ДополнительныеПараметры);
			АвтомобильПриИзменении(Неопределено);
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	НеобходимоПерезаполнитьЗаказчика  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеобходимоПерезаполнитьЗаказчика",  Ложь);
	НеобходимоПерезаполнитьАвтомобиль = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеобходимоПерезаполнитьАвтомобиль", Ложь);
	
	Если НеобходимоПерезаполнитьЗаказчика Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ПараметрыДействия),
			СтрШаблон("Владелец автомобиля <%1> = <%2>.
			|Выбран заказчиком <%3>. Установить заказчиком <%2>?", Объект.Автомобиль, ПараметрыДействия.ВладелецАвтомобиля, Объект.Контрагент),
			РежимДиалогаВопрос.ДаНет);
			
	КонецЕсли;
	
	Если НеобходимоПерезаполнитьАвтомобиль Тогда
		Обработчик = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтотОбъект, ПараметрыДействия);
		
		Если ЗначениеЗаполнено(ПараметрыДействия.ВладелецАвтомобиля) Тогда
			ТекстВопроса = НСтр("ru = 'Владелец автомобиля <%1> = <%2>.
				|Выбран заказчиком <%3>. Очистить поле ""Автомобиль""?'");
			
			ТекстВопроса = СтрШаблон(ТекстВопроса, Объект.Автомобиль, ПараметрыДействия.ВладелецАвтомобиля, Объект.Контрагент);
		Иначе
			ТекстВопроса = НСтр("ru = 'Владелец автомобиля <%1> не указан.
				|Выбран заказчиком <%2>. Очистить поле ""Автомобиль""?'");
			
			ТекстВопроса = СтрШаблон(ТекстВопроса, Объект.Автомобиль, Объект.Контрагент);
		КонецЕсли;
		
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Изменение заказчика'"));
		
	КонецЕсли;
	
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьДоступностьЖалобы()
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЖалобаКлиента) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ФормаДокументЖалобаКлиентаСоздатьНаОсновании",
			"Видимость",
			Константы.ИспользоватьЖалобы.Получить()
		);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект, РезультатОповещения);
	
	Если
		ТипЗнч(РезультатОповещения) = Тип("Структура")
		И РезультатОповещения.Свойство("ИзмененныеРеквизиты")
		И ТипЗнч(РезультатОповещения.ИзмененныеРеквизиты) = Тип("Структура")
		И РезультатОповещения.ИзмененныеРеквизиты.Свойство("Организация")
	Тогда
		
		ПриИзмененииКлючевыхРеквизитовСостояниеЭДО();
		
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура Подключаемый_ШтрихкодированиеОбработкаОповещения(РезультатОповещения,
	ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если РезультатОповещения.Свойство("Действие") Тогда
		ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры)

	ШтрихкодированиеВызовСервера.ОбработкаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры, , Объект);

КонецПроцедуры

#КонецОбласти

#Область УтверждениеДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуУтверждения(Команда)
	
	УтверждениеДокументовКлиент.ОбработкаКомандыФормы(ЭтотОбъект, Команда, Объект.Ссылка);
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбработкуКомандыУтвержденияНаСервере(ПараметрыОбработки,
		ДополнительныеПараметры) Экспорт
	
	ОбработкаКомандыУтвержденияНаСервере(ПараметрыОбработки, ДополнительныеПараметры);
	Оповестить("ПослеУтвержденияДокументов", Объект.Ссылка, ИмяФормы);
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаКомандыУтвержденияНаСервере(ПараметрыОбработки, ДополнительныеПараметры)
	
	УтверждениеДокументовВызовСервера.ОбработкаКомандыФормы(ЭтотОбъект, ПараметрыОбработки.ИмяКоманды, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыУтвержденияДокументов()
	
	ОбновитьКомандыУтвержденияДокументовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыУтвержденияДокументовНаСервере()
	
	УтверждениеДокументовКлиентСервер.УстановитьДоступностьКнопокУтверждения(ЭтотОбъект, Объект, ТолькоПросмотр);
	УтверждениеДокументовВызовСервера.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, Объект, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьИнформациюОКорректировках()
	
	ЕстьДанные = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КорректировкаЗаказаПокупателя.Ссылка КАК Документ
		|ИЗ
		|	Документ.КорректировкаЗаказаПокупателя КАК КорректировкаЗаказаПокупателя
		|ГДЕ
		|	КорректировкаЗаказаПокупателя.ДокументОснование = &Ссылка
		|	И КорректировкаЗаказаПокупателя.Проведен"; 
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		ЕстьДанные = НЕ РезультатЗапроса.Пустой();
		КоличествоКорректировок = РезультатЗапроса.Выбрать().Количество();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ЭлементыСтроки = Новый Массив;
	
	Если ЕстьДанные Тогда
		
		Текст = СтрокаСЧислом(
			";Введен %1 документ корректировки поставщика;
			|Введено %1 документа корректировки поставщика;
			|Введено %1 документов корректировки поставщика;
			|Введено %1 документов корректировки поставщика;",
			КоличествоКорректировок,
			ВидЧисловогоЗначения.Количественное,
			"L=ru");
		
		ЭлементыСтроки.Добавить(Текст);
		ЭлементыСтроки.Добавить(". ");
		
		ЭлементыСтроки.Добавить(
			Новый ФорматированнаяСтрока("Открыть", , ЦветаСтиля.ТекстИнформационнойНадписи, , "открытьсписок"));
			
		ИнформацияОКорректировкахДокумента = Новый ФорматированнаяСтрока(ЭлементыСтроки);
						
	КонецЕсли;
	
	
	
КонецПроцедуры

#Область СчетаНаОплату

&НаСервере
Процедура НастроитьОтображениеВводаСчетаНаОплату()
	
	ДоступноСозданиеСчета = ПравоДоступа("Добавление", Метаданные.Документы.СчетНаОплату);
	
	КомандаСозданияПолногоСчетаНаОплату = Команды.Найти("СоздатьСчетНаОплатуПолный");
	Элементы.СоздатьСчетНаОплатуПолный.Видимость = ДоступноСозданиеСчета;
	КомандаСозданияПоОстаткамСчетаНаОплату = Команды.Найти("СоздатьСчетНаОплатуПоОстаткам");
	Элементы.СоздатьСчетНаОплатуПоОстаткам.Видимость = ДоступноСозданиеСчета;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьСчетаНаОплатуЗаказа()
	
	ЕстьСчетаНаОплату = Ложь;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СчетНаОплату.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетНаОплату КАК СчетНаОплату
		|ГДЕ
		|	СчетНаОплату.ДокументОснование = &Заказ";
		Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
		ЕстьСчетаНаОплату = Не Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
	Элементы.ПоказатьСчетаНаОплату.Видимость = ЕстьСчетаНаОплату;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСчетаНаОплатуНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	Отборы = Новый Структура();
	Отборы.Вставить("ДокументОснование", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("Отбор", Отборы);
	
	ОткрытьФорму("Документ.СчетНаОплату.ФормаСписка", ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти
#КонецОбласти

