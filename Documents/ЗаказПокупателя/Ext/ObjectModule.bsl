// Модуль документа "Заказ покупателя"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	// Если вводится на основании события
	Если ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "Имя") = "Событие" Тогда
		ДанныеЗаполненияКопия = ДанныеЗаполнения;
		ДанныеЗаполнения = ДанныеЗаполнения.Событие;
	КонецЕсли;
	
	// установка хоз. операции
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		ЭтотОбъект.ХозОперация = Справочники.ХозОперации.ЗаказРезервированиеПокупателя;
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда	
			Если ДанныеЗаполнения.Свойство("ЗаполнениеИзКорзины") Тогда
				Для Каждого Строка Из ДанныеЗаполнения.Товары Цикл
					
					НоваяСтрока 						   = Товары.Добавить();	
					НоваяСтрока.Номенклатура 			   = Строка.Номенклатура;
					НоваяСтрока.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
					НоваяСтрока.Количество 				   = Строка.Количество;
					НоваяСтрока.ЕдиницаИзмерения 		   = Строка.ЕдиницаИзмерения;
					НоваяСтрока.Коэффициент		 		   = Строка.Коэффициент;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ЗаказНаряд") Тогда
		
		Если ТипЗнч(ДанныеЗаполнения.ЗаказНаряд) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
			
			ДополнительныеСвойства.Вставить("ТоварыИМатериалы", ДанныеЗаполнения.ТоварыИМатериалы);
			
			Если ДанныеЗаполнения.Свойство("ХозОперация") Тогда
				ДополнительныеСвойства.Вставить("ХозОперация", ДанныеЗаполнения.ХозОперация);
			КонецЕсли;
			
			// Вызываем общий обработчик заполнения
			Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения.ЗаказНаряд, ТекстЗаполнения, СтандартнаяОбработка) Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	// если ввели на основании, но при этом не заполнили ставки НДС, то исправимся
	Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
			Документы.ЗаказПокупателя.ТоварыСтавкаНДСПриИзменении(ЭтотОбъект, СтрокаТабличнойЧасти, ДополнительныеСвойства.ПараметрыДействия);
		КонецЕсли;
		
	КонецЦикла;

	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ТипЦен) Тогда
		ЭтотОбъект.ТипЦен = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенПродажи", ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодразделениеКомпании) Тогда
		// Чтение значения для срока поставки
		СрокПоставкиДней =  ПодразделениеКомпании.СрокПоставкиПокупателюПоУмолчанию;
		СрокПоставки     = НачалоДня(?(ЗначениеЗаполнено(ЭтотОбъект.Дата), ЭтотОбъект.Дата, ТекущаяДатаСеанса())) + СрокПоставкиДней*60*60*24;
	КонецЕсли; 
	
	ЗаполненНаОснованииДокумента = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ВыполненоЗаполнениеНаОсновании", "");
	
	Если НЕ ЗаполненНаОснованииДокумента = "ЗаказНаряд" И Не ЗначениеЗаполнено(ЭтотОбъект.ПроцентПредоплаты) Тогда 
		
		Если ЭтотОбъект.ДоговорВзаиморасчетов.ПроцентПредоплаты = -1 Тогда
			ЭтотОбъект.ПроцентПредоплаты = ПраваИНастройкиПользователя.Значение("МинимальныйПроцентПредоплаты", ЭтотОбъект);
		Иначе
			ЭтотОбъект.ПроцентПредоплаты = ЭтотОбъект.ДоговорВзаиморасчетов.ПроцентПредоплаты;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнить контрагента из события
	ДанныеЗаполненияКонтрагент = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполненияКопия, "Контрагент");
	Если ДанныеЗаполненияКонтрагент <> Неопределено Тогда
		Контрагент = ДанныеЗаполненияКонтрагент;
		Документы.ЗаказПокупателя.КонтрагентПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	СуммаСоСкидкой				= ЭтотОбъект.Товары.Итог("СуммаВсего");
	ЭтотОбъект.СуммаПредоплаты	= СуммаСоСкидкой * ЭтотОбъект.ПроцентПредоплаты / 100;
	
	Если ЗначениеЗаполнено (СкладКомпании) Тогда
		ОбработкаТабличнойЧастиТовары.ПерезаполнитьТаблицуРеквизитЯчейка(ЭтотОбъект);
	КонецЕсли;

	// Заполним срок снятия резервов
	ОтсрочкаСнятияРезервов = ПраваИНастройкиПользователя.Значение("СрокРезерваПоУмолчанию");
	Если ЗначениеЗаполнено(ОтсрочкаСнятияРезервов) И НЕ ЗначениеЗаполнено(СрокСнятияРезерва) Тогда
		СрокСнятияРезерва = НачалоДня(ТекущаяДатаСеанса()) + 86400 * ОтсрочкаСнятияРезервов;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Исполнитель) Тогда 
		Подписант = ОрганизацииАльфаАвто.Руководитель(ЭтотОбъект.Организация, ЭтотОбъект.Дата);
		
		Если ЗначениеЗаполнено(Подписант)Тогда
			Исполнитель = УправлениеПечатьюПлатформа.ПолучитьПодписантаСотрудника(Подписант, Организация, ПодразделениеКомпании);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ХозОперация = Справочники.ХозОперации.РезервированиеПокупателя Тогда
		// проверим заполнены ли резервы
		Для Каждого ТекСтрока Из Товары Цикл
			Если ТекСтрока.Резерв = 0 Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Строка: <%1>, номенклатура: <%2> не заполнено количество резерва.'"),
						ТекСтрока.НомерСтроки,
						ТекСтрока.Номенклатура
					),
					ЭтотОбъект,
					, ,
					Отказ);
			Иначе
				ТекСтрока.Количество = ТекСтрока.Резерв;
			КонецЕсли;
		КонецЦикла;
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим параметры запрета для номенклатуры
	Отказ = Отказ ИЛИ ПроверитьПараметрыЗапретаВыбораНоменклатуры();
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Если НЕ ОбменДанными.Загрузка Тогда
		Документы.ЗаказПокупателя.ХозОперацияПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства,"ИзменениеПроцентаПредоплаты", Ложь) Тогда
		
		ОбменДанными.Загрузка = Ложь;
		
		// УтверждениеДокумментов
		УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
		// Конец УтверждениеДокументов
		
		// Вызываем общий обработчик события
		Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
			Возврат;
		КонецЕсли;
		
		Если (НЕ ЗначениеЗаполнено(ДокументОснование)) ИЛИ (НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд")) Тогда
			
			Если ЭтотОбъект.ДоговорВзаиморасчетов.ПроцентПредоплаты = -1 Тогда
				МинимальныйПроцентПредоплаты = ПраваИНастройкиПользователя.Значение("МинимальныйПроцентПредоплаты", ЭтотОбъект);
			Иначе
				МинимальныйПроцентПредоплаты = ЭтотОбъект.ДоговорВзаиморасчетов.ПроцентПредоплаты;
			КонецЕсли;
			
			
			Если МинимальныйПроцентПредоплаты > ПроцентПредоплаты Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'При записи <%1> обнаружены ошибки:'"), СокрЛП(ЭтотОбъект));
				ТекстСообщения = ТекстСообщения + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Запрещено изменять минимальный процент предоплаты менее, чем <%1> %'"), Формат(МинимальныйПроцентПредоплаты, "ЧЦ=5; ЧДЦ=2; ЧН=0"));
				ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Из-за возникших ошибок операция записи была отменена.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		ОбменДанными.Загрузка = Истина;
		
		Возврат;
		
	Иначе
		
		// УтверждениеДокумментов
		УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
		// Конец УтверждениеДокументов
		
		// Вызываем общий обработчик события
		Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Проверим наличие распределения данного заказа.
	Если НЕ ПраваИНастройкиПользователя.Значение("РедактированиеЗаказовПриНаличииРаспределения", ЭтотОбъект) Тогда
		
		ВыборкаРаспределения = ПолучитьРаспределенияЗаказа();
		Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
			
			Если ВыборкаРаспределения.Количество() > 0 Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Товары по заказу покупателя распределены по заказам поставщикам. Запись без проведения запрещена.'"),
					,
					,
					,
					Отказ
				);
				
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			
			Если ВыборкаРаспределения.Количество() > 0 Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Товары по заказу покупателя распределены по заказам поставщикам. Отмена проведения запрещена.'"),
					,
					,
					,
					Отказ
				);
				
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			// Свернем товары с учетом единиц измерения.
			ТоварыКопия = Товары.Выгрузить();
			
			Для Каждого СтрокаТоваров Из ТоварыКопия Цикл
				
				СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
				
			КонецЦикла;
			
			ТоварыКопия.Свернуть("Номенклатура,ХарактеристикаНоменклатуры", "Количество");
			ВыборкаРаспределения.Сбросить();
			
			Пока ВыборкаРаспределения.Следующий() Цикл
				
				СтруктураПоиска = Новый Структура(
					"Номенклатура,ХарактеристикаНоменклатуры",
					ВыборкаРаспределения.Номенклатура,
					ВыборкаРаспределения.ХарактеристикаНоменклатуры
				);
				
				СтрокиТоваров = ТоварыКопия.НайтиСтроки(СтруктураПоиска);
				
				ТоварКоличество = 0;
				Если СтрокиТоваров.Количество() > 0 Тогда
					
					ТоварКоличество = СтрокиТоваров[0].Количество;
					
				КонецЕсли;
				
				Если ТоварКоличество < ВыборкаРаспределения.Количество Тогда
					
					ТекНоменклатура = ВыборкаРаспределения.Номенклатура;
					ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(ТекНоменклатура);
					
					Если НЕ ЗначениеЗаполнено(ВыборкаРаспределения.ХарактеристикаНоменклатуры) Тогда
						
						ТекстСообщения = НСтр("ru = '[%1] Товар ""%2"" распределен по заказам поставщикам в количестве %3 %4.'");
						ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(ТекстСообщения,
								ЗначениеКолонкиКода,
								ТекНоменклатура.Наименование,
								Формат(ВыборкаРаспределения.Количество, "ЧЦ=15; ЧДЦ=3; ЧН=0,00"),
								ТекНоменклатура.БазоваяЕдиницаИзмерения
							),
							,,Отказ
						);
						
					Иначе
						
						ТекстСообщения = НСтр(
							"ru = '[%1] Товар ""%2"" с характеристикой ""%5"" распределен по заказам поставщикам в количестве %3 %4.'");
						
						ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(ТекстСообщения,
								ЗначениеКолонкиКода,
								ТекНоменклатура.Наименование,
								Формат(ВыборкаРаспределения.Количество, "ЧЦ=15; ЧДЦ=3; ЧН=0,00"),
								ТекНоменклатура.БазоваяЕдиницаИзмерения,
								ВыборкаРаспределения.ХарактеристикаНоменклатуры
							),
							,,Отказ
						);
							
					КонецЕсли;
													
				КонецЕсли;
				
			КонецЦикла;
			
			Если Отказ Тогда
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ХозОперация = Справочники.ХозОперации.ЗаказПокупателя Тогда
		Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
			СтрокаТабличнойЧасти.Резерв = 0;
		КонецЦикла;
	КонецЕсли;
		
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоЗаказамПередПроведением(Ссылка, ДополнительныеСвойства);
	
	ЭтотОбъект.ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
	// Проверим сумму предоплаты
	Если СуммаДокумента < СуммаПредоплаты Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Сумма предоплаты не может быть больше суммы документа'"), ЭтотОбъект,,,Отказ);
		Возврат;
	КонецЕсли; 
	
	// Проверим количество резервируемого товара
	Если ХозОперация = Справочники.ХозОперации.ЗаказРезервированиеПокупателя Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Товары Цикл
			
			Если СтрокаТабличнойЧасти.Количество < СтрокаТабличнойЧасти.Резерв Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Количество номенклатуры не может быть менее количества резервирования.'"),
					ЭтотОбъект,
					,
					,
					Отказ
				);
				Возврат;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Если НЕ Отказ
		И ПолучитьЗначениеПараметраСтруктуры(ЭтотОбъект.ДополнительныеСвойства, "РежимЗаписи") = РежимЗаписиДокумента.Запись
	Тогда
		РегистрыСведений.ЖурналСостояний.ЗаписьВЖурналСостояний(
			ЭтотОбъект.Ссылка,
			Справочники.ВидыСостоянийЗаказНарядов.Новый
		);
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПраваИНастройкиПользователя.Значение("ПроверкаМаксимальногоПревышенияКредитаКонтрагента", ЭтотОбъект) И НЕ ДоговорВзаиморасчетов.ОтменаКонтроляСуммыКредита Тогда
		// получим долг
		СтруктураОтбора=Новый Структура();
		СтруктураОтбора.Вставить("Контрагент",Контрагент);
		СтруктураОтбора.Вставить("ДоговорВзаиморасчетов",ДоговорВзаиморасчетов);
		// получаем текущие остатки, т.к. оплата может быть позже заказа
		тзДолги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(СтруктураОтбора,, "Сумма,СуммаУпр");
		Долг=тзДолги.Итог("Сумма");
		СуммаДокументаВВалютеДоговора=РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаДокумента,ВалютаДокумента,КурсДокумента,ДоговорВзаиморасчетов.ВалютаВзаиморасчетов,Дата);
		Если (Долг+СуммаДокументаВВалютеДоговора)>ДоговорВзаиморасчетов.МаксимальныйКредит Тогда
			ВалютаВзаиморасчетов=СокрЛП(ДоговорВзаиморасчетов.ВалютаВзаиморасчетов.Наименование);
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сумма долга по договору составляет %1 %2.'"),Формат(Долг,"ЧДЦ=2; ЧН=0.00"),ВалютаВзаиморасчетов);
			ТекстСообщения = ТекстСообщения + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сумма заказа составляет %1 %2'"),Формат(СуммаДокументаВВалютеДоговора,"ЧДЦ=2; ЧН=0.00"),ВалютаВзаиморасчетов);
			ТекстСообщения = ТекстСообщения + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Итого %1 %2'"),Формат(Долг+СуммаДокументаВВалютеДоговора,"ЧДЦ=2; ЧН=0.00"),ВалютаВзаиморасчетов);
			ТекстСообщения = ТекстСообщения + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'А максимальный кредит по договору %1 %2'"),Формат(ДоговорВзаиморасчетов.МаксимальныйКредит,"ЧДЦ=2; ЧН=0.00"),ВалютаВзаиморасчетов);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
		КонецЕсли; 
	КонецЕсли; 
	
	Заказывать=Истина;
	Резервировать=((ХозОперация=Справочники.ХозОперации.ЗаказРезервированиеПокупателя) ИЛИ (ХозОперация=Справочники.ХозОперации.РезервированиеПокупателя));
	
	// проводим заказ покупателя
	НаборЗаписейЗаказыПокупателей=Движения.ЗаказыПокупателей;
	НаборЗаписейЗаказыПокупателей.РежимПроведения=РежимПроведения;
	НаборЗаписейЗаказыПокупателей.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейЗаказыПокупателей.РезультатЗапросаПоТоварам=Неопределено;
	НаборЗаписейЗаказыПокупателей.Контрагент=Контрагент;
	НаборЗаписейЗаказыПокупателей.Заказ=Ссылка;
	НаборЗаписейЗаказыПокупателей.СкладКомпании=СкладКомпании;
	НаборЗаписейЗаказыПокупателей.Заказывать=Заказывать;
	НаборЗаписейЗаказыПокупателей.Резервировать=Резервировать;
	Отказ=НЕ НаборЗаписейЗаказыПокупателей.Приход() ИЛИ Отказ;
	
	Если Резервировать Тогда
		// резервирование заказа покупателя
		НаборЗаписейОстатки = Движения.ОстаткиТоваровКомпании;
		НаборЗаписейОстатки.РежимПроведения           = РежимПроведения;
		НаборЗаписейОстатки.ДокументОбъект            = ЭтотОбъект;
		НаборЗаписейОстатки.РезультатЗапросаПоТоварам = Неопределено;
		НаборЗаписейОстатки.СкладКомпании             = СкладКомпании;
		НаборЗаписейОстатки.ДвиженияПоРознице         = Ложь;
		Отказ = НЕ НаборЗаписейОстатки.Зарезервировать() ИЛИ Отказ;
	КонецЕсли; 
	
	Если НЕ Отказ Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказПокупателяТовары.ИдентификаторСтроки,
		|	ЗаказПокупателяТовары.Номенклатура,
		|	ЗаказПокупателяТовары.ХарактеристикаНоменклатуры,
		|	ЗаказПокупателяТовары.Количество*ЗаказПокупателяТовары.Коэффициент КАК КоличествоЗаказа,
		|	ГрафикПоставок.Количество,
		|	ГрафикПоставок.ДатаПоставки,
		|	ГрафикПоставок.Контрагент,
		|	ГрафикПоставок.ДатаПоступления,
		|	ГрафикПоставок.Информация
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ГрафикПоставок КАК ГрафикПоставок
		|ПО
		|	ЗаказПокупателяТовары.Ссылка = &Ссылка
		|	И ЗаказПокупателяТовары.Ссылка = ГрафикПоставок.ЗаказПокупателя
		|	И ЗаказПокупателяТовары.ИдентификаторСтроки = ГрафикПоставок.ИдентификаторСтроки
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка = &Ссылка
		|ИТОГИ
		|	МАКСИМУМ(КоличествоЗаказа)
		|ПО
		|	ЗаказПокупателяТовары.ИдентификаторСтроки
		|";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		ВыборкаСтроки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		РегистрыСведений.ГрафикПоставок.ЗаписатьГрафикПоставок(Ссылка, ВыборкаСтроки);
		
	КонецЕсли;
	
	// двигаем границу последовательности заказов
	РаботаСГраницами.СдвинутьГраницуЗаказов(Ссылка,  ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Поступление товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТипЦен					= ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенПродажи", ЭтотОбъект);
	
	Контрагент 				= Неопределено;
	ДоговорВзаиморасчетов 	= Неопределено;
	ВремЯчейка				= Неопределено;
	
	ПараметрыДействия = Документы.ЗаказПокупателя.ПолучитьПараметрыДействия(ЭтотОбъект,
		ДополнительныеСвойства.ПараметрыДействия);
	ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	
	Сч = 0;
	Пока Сч < Товары.Количество() Цикл
		СтрокаТоваров = Товары[Сч];
		Если СтрокаТоваров.Количество = 0 Тогда
			Товары.Удалить(Сч);
		Иначе
			ВремЯчейка 						= СтрокаТоваров.Ячейка;
			Документы.ЗаказПокупателя.ТоварыНоменклатураПриИзменении(ЭтотОбъект,
				СтрокаТоваров, ДополнительныеСвойства.ПараметрыДействия);
			СтрокаТоваров.Ячейка 			= ВремЯчейка;
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	// Рассчет скидок
	ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(ЭтотОбъект, ПараметрыДействия);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеТоваров()

// Производит заполнение объекта на основании документа "Отчет комиссионера"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ОтчетКомиссионера(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Попробуем автоматически предложить сразу зарезервировать товар на складе
	Документы.ЗаказПокупателя.ЗаполнитьРезервОстатками(ЭтотОбъект);
	
	Резерв = Товары.Итог("Резерв");
	Если Резерв = 0 Тогда
		// Товара нет в наличии - будем только заказывать
		ХозОперация = Справочники.ХозОперации.ЗаказПокупателя;
	КонецЕсли;
	
	ПараметрыДействия = Документы.ЗаказПокупателя.ПолучитьПараметрыДействия(ЭтотОбъект);
	ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	
	// Перерасчитаем цены и ставки
	Для Каждого СтрокаТоваров Из Товары Цикл
		Документы.ЗаказПокупателя.ТоварыЦенаПриИзменении(ЭтотОбъект, СтрокаТоваров, ПараметрыДействия);
	КонецЦикла;
	
	// Рассчет скидок
	ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(ЭтотОбъект, ПараметрыДействия);
	
	//////////////////////////////////////////////////////////////////////////////		
	// Заполним ПроцентПредоплаты для нового документа
	
	Если ЗначениеЗаполнено(ПодразделениеКомпании) Тогда
		СрокПоставкиДней = ПодразделениеКомпании.СрокПоставкиПокупателюПоУмолчанию
	Иначе
		СрокПоставкиДней = 0;
	КонецЕсли;
	
	СрокПоставки = ТекущаяДатаСеанса();
	СрокПоставки = СрокПоставки+СрокПоставкиДней * 60 * 60 * 24;
	
	// Заполнение предоплаты
	СуммаСоСкидкой = Товары.Итог("СуммаВсего");
	
	ПроцентПредоплаты = ПраваИНастройкиПользователя.Значение("МинимальныйПроцентПредоплаты", ЭтотОбъект);
	СуммаПредоплаты   = СуммаСоСкидкой * ПроцентПредоплаты / 100;
		
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ОтчетКомиссионера()

// Производит заполнение объекта на основании документа "Заказ-Наряд"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаряд(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаряд")
		И Не ЗначениеЗаполнено(ДанныеЗаполнения.Контрагент) Тогда
		Контрагент = ДанныеЗаполнения.СводныйРемонтныйЗаказ.Заказчик;
	КонецЕсли;
	
	// Заполним автомобиль из СРЗ
	Автомобиль = ДанныеЗаполнения.СводныйРемонтныйЗаказ.Автомобиль;
	
	// Инициализируем параметры действия
	ТоварыИМатериалы = Неопределено;
	ДополнительныеСвойства.Свойство("ТоварыИМатериалы", ТоварыИМатериалы);
	
	Если ТоварыИМатериалы = Неопределено Тогда
		ТоварыИМатериалы = Новый Структура;
	КонецЕсли;
	
	ОбработатьДокументПоСкладу = Ложь;
	Если ДополнительныеСвойства.Свойство("ХозОперация") Тогда
		ХозОперация = ДополнительныеСвойства.ХозОперация;
		ОбработатьДокументПоСкладу = Истина;
	КонецЕсли;
	
	РезервированиеЗаказа = (ХозОперация = Справочники.ХозОперации.РезервированиеПокупателя);
	
	Если ДанныеЗаполнения.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен
		ИЛИ ДанныеЗаполнения.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект,
			НСтр("ru = 'Заказ-наряд выполнен. Вводить заказы на основании выполненных или закрытых заказ-нарядов запрещено.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Заявка Тогда
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект,
			НСтр("ru = 'Заказ-наряд находится в состоянии ""Заявка"".
				|Вводить заказы на основании заказ-нарядов в состоянии ""Заявка"" запрещено.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Товары.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаказНарядТовары.Номенклатура КАК Номенклатура,
	               |	СУММА(ЗаказНарядТовары.Количество) КАК Количество,
	               |	ЗаказНарядТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ЗаказНарядТовары.Коэффициент КАК Коэффициент,
	               |	ЗаказНарядТовары.СкладКомпании КАК СкладКомпании,
	               |	ЗаказНарядТовары.Цена КАК Цена,
	               |	СУММА(ЗаказНарядТовары.Сумма) КАК Сумма,
	               |	СУММА(ЗаказНарядТовары.ПроцентСкидки) КАК ПроцентСкидки,
	               |	СУММА(ЗаказНарядТовары.СуммаСкидки) КАК СуммаСкидки,
	               |	МАКСИМУМ(ЗаказНарядТовары.СтавкаНДС) КАК СтавкаНДС,
	               |	СУММА(ЗаказНарядТовары.СуммаНДС) КАК СуммаНДС,
	               |	ЗаказНарядТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	СУММА(ЗаказНарядТовары.СуммаВсего) КАК СуммаВсего,
	               |	ЗаказНарядТовары.СкидкаНаТовар КАК СкидкаНаТовар,
	               |	ЗаказНарядТовары.ПроцентСкидкиСтроки КАК ПроцентСкидкиСтроки,
	               |	СУММА(ЗаказНарядТовары.СуммаСкидкиСтроки) КАК СуммаСкидкиСтроки
	               |ИЗ
	               |	Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
	               |ГДЕ
	               |	ЗаказНарядТовары.Ссылка = &ЗаказНаряд" + ?(ТоварыИМатериалы.Свойство("Товары"), " И 
	               |	ЗаказНарядТовары.НомерСтроки В (&НомераТоваров)", "") + "
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказНарядТовары.Номенклатура,
	               |	ЗаказНарядТовары.ЕдиницаИзмерения,
	               |	ЗаказНарядТовары.Коэффициент,
	               |	ЗаказНарядТовары.СкладКомпании,
	               |	ЗаказНарядТовары.ХарактеристикаНоменклатуры,
	               |	ЗаказНарядТовары.СкидкаНаТовар,
	               |	ЗаказНарядТовары.ПроцентСкидкиСтроки,
	               |	ЗаказНарядТовары.Цена";
	
	Запрос.УстановитьПараметр("ЗаказНаряд", ДанныеЗаполнения);
	Если ТоварыИМатериалы.Свойство("Товары") Тогда
		Запрос.УстановитьПараметр("НомераТоваров", ТоварыИМатериалы.Товары);
	КонецЕсли;
	
	ТабЗаказНаряда = Запрос.Выполнить().Выгрузить();
	
	МассивТоваров = Новый Массив;
	
	// Поместим в табличную часть товаров
	Для Каждого СтрокаЗаказНаряда Из ТабЗаказНаряда Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура               = СтрокаЗаказНаряда.Номенклатура;
		НоваяСтрока.Количество                 = СтрокаЗаказНаряда.Количество;
		НоваяСтрока.ЕдиницаИзмерения           = СтрокаЗаказНаряда.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент                = СтрокаЗаказНаряда.Коэффициент;
		НоваяСтрока.Цена                       = СтрокаЗаказНаряда.Цена;
		НоваяСтрока.Сумма                      = СтрокаЗаказНаряда.Сумма;
		НоваяСтрока.ПроцентСкидки              = СтрокаЗаказНаряда.ПроцентСкидки;
		НоваяСтрока.СуммаСкидки                = СтрокаЗаказНаряда.СуммаСкидки;
		НоваяСтрока.СкидкаНаТовар              = СтрокаЗаказНаряда.СкидкаНаТовар;
		НоваяСтрока.ПроцентСкидкиСтроки        = СтрокаЗаказНаряда.ПроцентСкидкиСтроки;
		НоваяСтрока.СуммаСкидкиСтроки          = СтрокаЗаказНаряда.СуммаСкидкиСтроки;
		НоваяСтрока.СтавкаНДС                  = СтрокаЗаказНаряда.СтавкаНДС;
		НоваяСтрока.СуммаНДС                   = СтрокаЗаказНаряда.СуммаНДС;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаЗаказНаряда.ХарактеристикаНоменклатуры;
		НоваяСтрока.СуммаВсего                 = СтрокаЗаказНаряда.СуммаВсего;
		
		Если МассивТоваров.Найти(СтрокаЗаказНаряда.Номенклатура) = Неопределено Тогда
			МассивТоваров.Добавить(СтрокаЗаказНаряда.Номенклатура);
		КонецЕсли;
		
	КонецЦикла;
	
	ТабЗаказНаряда.Свернуть("СкладКомпании");
	
	РезервыПоЗаказНаряду              = ДанныеЗаполнения.ЗакрыватьЗаказыТолькоПоДанномуЗаказНаряду;
	ОснованиеЗаказНаряда              = ДанныеЗаполнения.ДокументОснование;
	ОснованиеСводногоРемонтногоЗаказа = ДанныеЗаполнения.СводныйРемонтныйЗаказ.ДокументОснование;
	
	// Для заказа покупателя по заказ-нарядам все потом оплатим
	ПроцентПредоплаты = 0;
	
	ВклНДС = Истина;
	
	// попытаемся получить реальное вхождение налогов
	Если ЭтотОбъект.ТипЦен <> Неопределено Тогда
		ВклНДС = ЭтотОбъект.ТипЦен.ЦенаВключаетНДС;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим табличную часть заказ-наряда и движения по этому документу
	
	// фильтр по заказу
	ДопОтбор = "";
	Если ТипЗнч(ОснованиеЗаказНаряда) = Тип("ДокументСсылка.ЗаказПокупателя")
		И ЗначениеЗаполнено(ОснованиеЗаказНаряда) Тогда
		ДопОтбор = " ИЛИ Заказ = &ЗаказОснование";
	КонецЕсли;
	
	ДопОтборЗаказ = "";
	Если ТипЗнч(ОснованиеСводногоРемонтногоЗаказа) = Тип("ДокументСсылка.ЗаявкаНаРемонт")
		И ЗначениеЗаполнено(ОснованиеСводногоРемонтногоЗаказа) Тогда
		ДопОтборЗаказ = " ИЛИ Заказ.ДокументОснование = &ОснованиеСводногоРемонтногоЗаказа";
	КонецЕсли;
	
	ЗапросПоЗаказам = Новый Запрос;
	ЗапросПоЗаказам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                        |	ЗаказыПоставщикамОбороты.Номенклатура КАК Номенклатура,
	                        |	ЗаказыПоставщикамОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	                        |	ЗаказыПоставщикамОбороты.ЗаказаноОстаток КАК Заказано,
	                        |	0 КАК СвободныйОстаток
	                        |ПОМЕСТИТЬ ТаблицаЗаказов
	                        |ИЗ
	                        |	РегистрНакопления.ЗаказыПоставщикам.Остатки(, Номенклатура В (&Номенклатура)) КАК ЗаказыПоставщикамОбороты
	                        |ГДЕ
	                        |	ЗаказыПоставщикамОбороты.ЗаказПоставщику.ДокументОснование = &ЗаказНаряд
	                        |
	                        |ОБЪЕДИНИТЬ ВСЕ
	                        |
	                        |ВЫБРАТЬ
	                        |	ЗаказыПокупателей.Номенклатура,
	                        |	ЗаказыПокупателей.ХарактеристикаНоменклатуры,
	                        |	ЗаказыПокупателей.ЗаказаноОстаток,
	                        |	0
	                        |ИЗ
	                        |	РегистрНакопления.ЗаказыПокупателей.Остатки(
	                        |			,
	                        |			(Заказ.ДокументОснование = &ЗаказНаряд" + ?(РезервыПоЗаказНаряду, ДопОтборЗаказ, " ИЛИ Контрагент = &Контрагент") + ДопОтбор + ")
	                        |				И Номенклатура В (&Номенклатура)) КАК ЗаказыПокупателей
	                        |
	                        |ОБЪЕДИНИТЬ ВСЕ
	                        |
	                        |ВЫБРАТЬ
	                        |	ТоварыВПроизводствеОстатки.Номенклатура,
	                        |	ТоварыВПроизводствеОстатки.ХарактеристикаНоменклатуры,
	                        |	ТоварыВПроизводствеОстатки.КоличествоОстаток,
	                        |	0
	                        |ИЗ
	                        |	РегистрНакопления.ТоварыВПроизводстве.Остатки(, ЗаказНаряд = &ЗаказНаряд) КАК ТоварыВПроизводствеОстатки
	                        |" + ?(РезервированиеЗаказа И ОбработатьДокументПоСкладу, "
	                        |	ОБЪЕДИНИТЬ ВСЕ
	                        |
	                        |ВЫБРАТЬ
	                        |	ОстаткиТоваровКомпанииОстатки.Номенклатура,
	                        |	ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры,
	                        |	0,
	                        |	ОстаткиТоваровКомпанииОстатки.КоличествоОстаток - ОстаткиТоваровКомпанииОстатки.РезервОстаток
	                        |ИЗ
	                        |	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(
	                        |,
	                        |		Номенклатура В (&Номенклатура)
	                        |		    И СкладКомпании В (&СкладыКомпании)) КАК ОстаткиТоваровКомпанииОстатки", "") + "
	                        |;
	                        |
	                        |////////////////////////////////////////////////////////////////////////////////
	                        |ВЫБРАТЬ
	                        |	ТаблицаЗаказов.Номенклатура КАК Номенклатура,
	                        |	ТаблицаЗаказов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	                        |	СУММА(ТаблицаЗаказов.Заказано) КАК Заказано,
	                        |	СУММА(ТаблицаЗаказов.СвободныйОстаток) КАК СвободныйОстаток
	                        |ИЗ
	                        |	ТаблицаЗаказов КАК ТаблицаЗаказов
	                        |
	                        |СГРУППИРОВАТЬ ПО
	                        |	ТаблицаЗаказов.Номенклатура,
	                        |	ТаблицаЗаказов.ХарактеристикаНоменклатуры";
	
	ЗапросПоЗаказам.УстановитьПараметр("ЗаказНаряд",                        ДанныеЗаполнения);
	ЗапросПоЗаказам.УстановитьПараметр("Контрагент",                        Контрагент);
	ЗапросПоЗаказам.УстановитьПараметр("ЗаказОснование",                    ОснованиеЗаказНаряда);
	ЗапросПоЗаказам.УстановитьПараметр("Номенклатура",                      МассивТоваров);
	ЗапросПоЗаказам.УстановитьПараметр("СкладыКомпании",                    ТабЗаказНаряда.ВыгрузитьКолонку("СкладКомпании"));
	ЗапросПоЗаказам.УстановитьПараметр("ОснованиеСводногоРемонтногоЗаказа", ОснованиеСводногоРемонтногоЗаказа);
	
	ТаблицаПоЗаказам = ЗапросПоЗаказам.Выполнить().Выгрузить();
	
	ПараметрыДействия = Документы.ЗаказПокупателя.ПолучитьПараметрыДействия(ЭтотОбъект);
	ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	
	// Уменьшим количество на величину уже заказанного
	Для Каждого СтрокаЗаказов Из ТаблицаПоЗаказам Цикл
		Заказано           = СтрокаЗаказов.Заказано;
		МассивСтрокТоваров = Товары.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры",
			СтрокаЗаказов.Номенклатура, СтрокаЗаказов.ХарактеристикаНоменклатуры));
		Для Каждого СтрокаТоваров Из МассивСтрокТоваров Цикл
			
			Если Заказано = 0 И НЕ РезервированиеЗаказа Тогда
				Прервать;
			КонецЕсли;
			
			ЗаказаноВЕдиницахИзмерения = Заказано / СтрокаТоваров.Коэффициент;
			ЗаказаноПоСтроке           = Мин(ЗаказаноВЕдиницахИзмерения, СтрокаТоваров.Количество);
			СтрокаТоваров.Количество   = СтрокаТоваров.Количество - ЗаказаноПоСтроке;
			
			Если РезервированиеЗаказа Тогда
				СтрокаТоваров.Резерв   = Мин(СтрокаТоваров.Количество, СтрокаЗаказов.СвободныйОстаток);
			КонецЕсли;
			
			Документы.ЗаказПокупателя.ТоварыКоличествоПриИзменении(ЭтотОбъект, СтрокаТоваров, ПараметрыДействия);
			
			Если СтрокаТоваров.Резерв > СтрокаТоваров.Количество Тогда
				СтрокаТоваров.Резерв = СтрокаТоваров.Количество;
			КонецЕсли;
			
			Заказано = Заказано - (ЗаказаноПоСтроке * СтрокаТоваров.Коэффициент);
			
		КонецЦикла;
	КонецЦикла;
	
	// Удалим пустые строки из заказа
	СтруктураОтбора = Новый Структура;
	Если РезервированиеЗаказа Тогда
		СтруктураОтбора.Вставить("Резерв", 0);
	Иначе
		СтруктураОтбора.Вставить("Количество", 0);
	КонецЕсли;
	
	МассивСтрокТоваров = Товары.НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаТоваров Из МассивСтрокТоваров Цикл
		Товары.Удалить(СтрокаТоваров);
	КонецЦикла;
	
	
	Если ТабЗаказНаряда.Количество() = 1 Тогда
		
		Если ОбработатьДокументПоСкладу Тогда
			
			СкладКомпании = ТабЗаказНаряда[0].СкладКомпании;
			
			Если Товары.Количество() = 0 Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1. Весь выбранный товар на складе ""%2"" %3.'"), ДанныеЗаполнения,
					СкладКомпании, ?(РезервированиеЗаказа, НСтр("ru = 'зарезервирован или нет свободных остатков'"),
					НСтр("ru = 'заказан'")));
				УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			
			// У нас только один склад - попробуем заполнить резерв
			ХозОперация = Справочники.ХозОперации.ЗаказРезервированиеПокупателя;
			
			Документы.ЗаказПокупателя.ЗаполнитьРезервОстатками(ЭтотОбъект);
			
			Резерв = Товары.Итог("Резерв");
			Если Резерв = 0 Тогда
				// Товара нет в наличии - будем только заказывать
				ХозОперация = Справочники.ХозОперации.ЗаказПокупателя;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Перерассчитаем цены и ставки
	Для Каждого СтрокаТоваров Из Товары Цикл
		Документы.ЗаказПокупателя.ТоварыЦенаПриИзменении(ЭтотОбъект, СтрокаТоваров, ПараметрыДействия);
	КонецЦикла;
	
	// Рассчет скидок
	ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(ЭтотОбъект, ПараметрыДействия);
	
	//////////////////////////////////////////////////////////////////////////////		
	// Заполним ПроцентПредоплаты для нового документа
	
	Если ЗначениеЗаполнено(ПодразделениеКомпании) Тогда
		СрокПоставкиДней = ПодразделениеКомпании.СрокПоставкиПокупателюПоУмолчанию;
	Иначе
		СрокПоставкиДней = 0;
	КонецЕсли;
	
	СрокПоставки = ТекущаяДатаСеанса();
	СрокПоставки = СрокПоставки+СрокПоставкиДней * 60 * 60 * 24;
	
	// Заполнение предоплаты
	СуммаСоСкидкой = Товары.Итог("СуммаВсего");
	
	ПроцентПредоплаты = ПраваИНастройкиПользователя.Значение("МинимальныйПроцентПредоплаты", ЭтотОбъект);
	СуммаПредоплаты   = СуммаСоСкидкой * ЭтотОбъект.ПроцентПредоплаты / 100;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаряд()

// Производит заполнение объекта на основании документа "Заявка на ремонт"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаРемонт(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Состояние = Перечисления.СостояниеЗаявкиНаРемонт.Отклонено Тогда 
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект,
			НСтр("ru = 'Заявка на ремонт отменена. Вводить заказы на основании отклоненной заявки на ремонт запрещено.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если Документы.ЗаявкаНаРемонт.ЕстьЗаказНаряды(ДанныеЗаполнения, Ложь) Тогда
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект,
			НСтр("ru = 'На основании заявки на ремонт имеется заказ-наряд. Введите заказы из заказ-наряда.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Товары.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаявкаНаРемонтТовары.Номенклатура КАК Номенклатура,
	               |	СУММА(ЗаявкаНаРемонтТовары.Количество) КАК Количество,
	               |	ЗаявкаНаРемонтТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ЗаявкаНаРемонтТовары.Коэффициент КАК Коэффициент,
	               |	ЗаявкаНаРемонтТовары.СкладКомпании КАК СкладКомпании,
	               |	ЗаявкаНаРемонтТовары.Цена КАК Цена,
	               |	СУММА(ЗаявкаНаРемонтТовары.Сумма) КАК Сумма,
	               |	ЗаявкаНаРемонтТовары.ПроцентСкидки КАК ПроцентСкидки,
	               |	СУММА(ЗаявкаНаРемонтТовары.СуммаСкидки) КАК СуммаСкидки,
	               |	ЗаявкаНаРемонтТовары.СтавкаНДС КАК СтавкаНДС,
	               |	СУММА(ЗаявкаНаРемонтТовары.СуммаНДС) КАК СуммаНДС,
	               |	ЗаявкаНаРемонтТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	СУММА(ЗаявкаНаРемонтТовары.СуммаВсего) КАК СуммаВсего,
	               |	ЗаявкаНаРемонтТовары.СкидкаНаТовар КАК СкидкаНаТовар,
	               |	ЗаявкаНаРемонтТовары.ПроцентСкидкиСтроки КАК ПроцентСкидкиСтроки,
	               |	СУММА(ЗаявкаНаРемонтТовары.СуммаСкидкиСтроки) КАК СуммаСкидкиСтроки
	               |ИЗ
	               |	Документ.ЗаявкаНаРемонт.Товары КАК ЗаявкаНаРемонтТовары
	               |ГДЕ
	               |	ЗаявкаНаРемонтТовары.Ссылка = &ЗаявкаНаРемонт
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаявкаНаРемонтТовары.Номенклатура,
	               |	ЗаявкаНаРемонтТовары.ЕдиницаИзмерения,
	               |	ЗаявкаНаРемонтТовары.Коэффициент,
	               |	ЗаявкаНаРемонтТовары.СкладКомпании,
	               |	ЗаявкаНаРемонтТовары.Цена,
	               |	ЗаявкаНаРемонтТовары.ПроцентСкидки,
	               |	ЗаявкаНаРемонтТовары.СтавкаНДС,
	               |	ЗаявкаНаРемонтТовары.ХарактеристикаНоменклатуры,
	               |	ЗаявкаНаРемонтТовары.СкидкаНаТовар,
	               |	ЗаявкаНаРемонтТовары.ПроцентСкидкиСтроки";
	
	Запрос.УстановитьПараметр("ЗаявкаНаРемонт", ДанныеЗаполнения);
	
	ТабЗаявкиНаРемонт = Запрос.Выполнить().Выгрузить();
	
	МассивТоваров = Новый Массив;
	
	// Поместим в табличную часть товаров
	Для Каждого СтрокаЗаявкиНаРемонт Из ТабЗаявкиНаРемонт Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура               = СтрокаЗаявкиНаРемонт.Номенклатура;
		НоваяСтрока.Количество                 = СтрокаЗаявкиНаРемонт.Количество;
		НоваяСтрока.ЕдиницаИзмерения           = СтрокаЗаявкиНаРемонт.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент                = СтрокаЗаявкиНаРемонт.Коэффициент;
		НоваяСтрока.Цена                       = СтрокаЗаявкиНаРемонт.Цена;
		НоваяСтрока.Сумма                      = СтрокаЗаявкиНаРемонт.Сумма;
		НоваяСтрока.ПроцентСкидки              = СтрокаЗаявкиНаРемонт.ПроцентСкидки;
		НоваяСтрока.СуммаСкидки                = СтрокаЗаявкиНаРемонт.СуммаСкидки;
		НоваяСтрока.СкидкаНаТовар              = СтрокаЗаявкиНаРемонт.СкидкаНаТовар;
		НоваяСтрока.ПроцентСкидкиСтроки        = СтрокаЗаявкиНаРемонт.ПроцентСкидкиСтроки;
		НоваяСтрока.СуммаСкидкиСтроки          = СтрокаЗаявкиНаРемонт.СуммаСкидкиСтроки;
		НоваяСтрока.СтавкаНДС                  = СтрокаЗаявкиНаРемонт.СтавкаНДС;
		НоваяСтрока.СуммаНДС                   = СтрокаЗаявкиНаРемонт.СуммаНДС;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаЗаявкиНаРемонт.ХарактеристикаНоменклатуры;
		НоваяСтрока.СуммаВсего                 = СтрокаЗаявкиНаРемонт.СуммаВсего;
		
		Если МассивТоваров.Найти(СтрокаЗаявкиНаРемонт.Номенклатура) = Неопределено Тогда
			МассивТоваров.Добавить(СтрокаЗаявкиНаРемонт.Номенклатура);
		КонецЕсли;
		
	КонецЦикла;
	
	ТабЗаявкиНаРемонт.Свернуть("СкладКомпании");
	
	ОснованиеЗаказНаряда = ДанныеЗаполнения.ДокументОснование;
	
	// Для заказа покупателя по заказ-нарядам все потом оплатим
	ПроцентПредоплаты = 0;
	
	ВклНДС = Истина;
	
	// попытаемся получить реальное вхождение налогов
	Если ЭтотОбъект.ТипЦен <> Неопределено Тогда
		ВклНДС = ЭтотОбъект.ТипЦен.ЦенаВключаетНДС;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим табличную часть заявки на ремонт и движения по этому документу
	
	// фильтр по заказу
	ДопОтбор = "";
	Если ТипЗнч(ОснованиеЗаказНаряда) = Тип("ДокументСсылка.ЗаказПокупателя")
		И ЗначениеЗаполнено(ОснованиеЗаказНаряда) Тогда
		ДопОтбор = " ИЛИ Заказ = &ЗаказОснование";
	КонецЕсли;
	
	ЗапросПоЗаказам = Новый Запрос;
	ЗапросПоЗаказам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                        |	ЗаказыПоставщикамОбороты.Номенклатура КАК Номенклатура,
	                        |	ЗаказыПоставщикамОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	                        |	ЗаказыПоставщикамОбороты.ЗаказаноОстаток КАК Заказано,
	                        |	0 КАК СвободныйОстаток
	                        |ПОМЕСТИТЬ ТаблицаЗаказов
	                        |ИЗ
	                        |	РегистрНакопления.ЗаказыПоставщикам.Остатки(, Номенклатура В (&Номенклатура)) КАК ЗаказыПоставщикамОбороты
	                        |ГДЕ
	                        |	ЗаказыПоставщикамОбороты.ЗаказПоставщику.ДокументОснование = &ЗаявкаНаРемонт
	                        |
	                        |ОБЪЕДИНИТЬ ВСЕ
	                        |
	                        |ВЫБРАТЬ
	                        |	ЗаказыПокупателей.Номенклатура,
	                        |	ЗаказыПокупателей.ХарактеристикаНоменклатуры,
	                        |	ЗаказыПокупателей.ЗаказаноОстаток,
	                        |	0
	                        |ИЗ
	                        |	РегистрНакопления.ЗаказыПокупателей.Остатки(
	                        |			,
	                        |			(Заказ.ДокументОснование = &ЗаявкаНаРемонт " + ДопОтбор + ")
	                        |				И Номенклатура В (&Номенклатура)) КАК ЗаказыПокупателей
	                        |;
	                        |
	                        |////////////////////////////////////////////////////////////////////////////////
	                        |ВЫБРАТЬ
	                        |	ТаблицаЗаказов.Номенклатура КАК Номенклатура,
	                        |	ТаблицаЗаказов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	                        |	СУММА(ТаблицаЗаказов.Заказано) КАК Заказано,
	                        |	СУММА(ТаблицаЗаказов.СвободныйОстаток) КАК СвободныйОстаток
	                        |ИЗ
	                        |	ТаблицаЗаказов КАК ТаблицаЗаказов
	                        |
	                        |СГРУППИРОВАТЬ ПО
	                        |	ТаблицаЗаказов.Номенклатура,
	                        |	ТаблицаЗаказов.ХарактеристикаНоменклатуры";
	
	ЗапросПоЗаказам.УстановитьПараметр("ЗаявкаНаРемонт", ДанныеЗаполнения);
	ЗапросПоЗаказам.УстановитьПараметр("Контрагент",     Контрагент);
	ЗапросПоЗаказам.УстановитьПараметр("ЗаказОснование", ОснованиеЗаказНаряда);
	ЗапросПоЗаказам.УстановитьПараметр("Номенклатура",   МассивТоваров);
	ЗапросПоЗаказам.УстановитьПараметр("СкладыКомпании", ТабЗаявкиНаРемонт.ВыгрузитьКолонку("СкладКомпании"));
	
	ТаблицаПоЗаказам = ЗапросПоЗаказам.Выполнить().Выгрузить();
	
	ПараметрыДействия = Документы.ЗаказПокупателя.ПолучитьПараметрыДействия(ЭтотОбъект);
	ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	
	// Уменьшим количество на величину уже заказанного
	Для Каждого СтрокаЗаказов Из ТаблицаПоЗаказам Цикл
		Заказано           = СтрокаЗаказов.Заказано;
		МассивСтрокТоваров = Товары.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры",
			СтрокаЗаказов.Номенклатура, СтрокаЗаказов.ХарактеристикаНоменклатуры));
		Для Каждого СтрокаТоваров Из МассивСтрокТоваров Цикл
			
			ЗаказаноВЕдиницахИзмерения = Заказано / СтрокаТоваров.Коэффициент;
			ЗаказаноПоСтроке           = Мин(ЗаказаноВЕдиницахИзмерения, СтрокаТоваров.Количество);
			СтрокаТоваров.Количество   = СтрокаТоваров.Количество-ЗаказаноПоСтроке;
			
			СтрокаТоваров.Резерв   = Мин(СтрокаТоваров.Количество, СтрокаЗаказов.СвободныйОстаток);
			
			Документы.ЗаказПокупателя.ТоварыКоличествоПриИзменении(ЭтотОбъект, СтрокаТоваров, ПараметрыДействия);
			
			Если СтрокаТоваров.Резерв > СтрокаТоваров.Количество Тогда
				СтрокаТоваров.Резерв = СтрокаТоваров.Количество;
			КонецЕсли;
			
			Заказано = Заказано - (ЗаказаноПоСтроке * СтрокаТоваров.Коэффициент);
			
		КонецЦикла;
	КонецЦикла;
	
	// Удалим пустые строки из заказа
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Количество", 0);
	
	МассивСтрокТоваров = Товары.НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаТоваров Из МассивСтрокТоваров Цикл
		Товары.Удалить(СтрокаТоваров);
	КонецЦикла;
	
	
	Если ТабЗаявкиНаРемонт.Количество() = 1 Тогда
		
		// У нас только один склад - попробуем заполнить резерв
		ХозОперация   = Справочники.ХозОперации.ЗаказРезервированиеПокупателя;
		
		Документы.ЗаказПокупателя.ЗаполнитьРезервОстатками(ЭтотОбъект);
		
		Резерв = Товары.Итог("Резерв");
		Если Резерв = 0 Тогда
			// Товара нет в наличии - будем только заказывать
			ХозОперация = Справочники.ХозОперации.ЗаказПокупателя;
		КонецЕсли;
	КонецЕсли;
	
	// Перерассчитаем цены и ставки
	Для Каждого СтрокаТоваров Из Товары Цикл
		Документы.ЗаказПокупателя.ТоварыЦенаПриИзменении(ЭтотОбъект, СтрокаТоваров, ПараметрыДействия);
	КонецЦикла;
	
	// Рассчет скидок
	ПараметрыДействия.Удалить("НеРассчитыватьСкидки");
	СкидкиНаценкиСервер.УстановитьСкидкиНаценки(ЭтотОбъект, ПараметрыДействия);
	
	//////////////////////////////////////////////////////////////////////////////
	// Заполним ПроцентПредоплаты для нового документа
	
	Если ЗначениеЗаполнено(ПодразделениеКомпании) Тогда
		СрокПоставкиДней = ПодразделениеКомпании.СрокПоставкиПокупателюПоУмолчанию
	Иначе
		СрокПоставкиДней = 0;
	КонецЕсли;
	
	СрокПоставки = ТекущаяДатаСеанса();
	СрокПоставки = СрокПоставки + СрокПоставкиДней * 60 * 60 * 24;
	
	// Заполнение предоплаты
	СуммаСоСкидкой = Товары.Итог("СуммаВсего");
	
	ПроцентПредоплаты = ПраваИНастройкиПользователя.Значение("МинимальныйПроцентПредоплаты", ЭтотОбъект);
	СуммаПредоплаты   = СуммаСоСкидкой * ЭтотОбъект.ПроцентПредоплаты / 100;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаряд()

// Производит заполнение объекта на основании документа "Счет на оплату"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СчетНаОплату(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТоварыОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "Товары").Выгрузить();
	КопияТоваров = Товары.Выгрузить();
	КопияТоваров.Свернуть(
		"Номенклатура,ЕдиницаИзмерения,Коэффициент,ХарактеристикаНоменклатуры,ПроцентСкидки,"
		+ "СкидкаНаТовар,ПроцентСкидкиСтроки",
		"Количество,Сумма,СуммаНДС,СуммаВсего,СуммаСкидки,СуммаСкидкиСтроки");
	
	// Оставим заполнение товаров как есть
	Если ТоварыОснования.Количество() = КопияТоваров.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Товары.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(КопияТоваров, Товары);
	УсловиеПоиска = Новый Структура("Номенклатура,ЕдиницаИзмерения,ХарактеристикаНоменклатуры");
	
	Для Каждого СтрокаТоваров Из Товары Цикл
		
		ЗаполнитьЗначенияСвойств(УсловиеПоиска, СтрокаТоваров);
		СтрокиТоваровОснования = ТоварыОснования.НайтиСтроки(УсловиеПоиска);
		СтрокаТоваров.СтавкаНДС = СтрокиТоваровОснования[0].СтавкаНДС;
		СтрокаТоваров.Цена = Окр(СтрокаТоваров.Сумма / СтрокаТоваров.Количество, 2);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

// Получение остатков распределения заказа по заказам поставщикам
//
// Возвращаемое значение:
//  Возвращает выборку запроса.
//
Функция ПолучитьРаспределенияЗаказа()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	             |	ЗаказыРаспределение.Номенклатура КАК Номенклатура,
	             |	ЗаказыРаспределение.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |	СУММА(ЗаказыРаспределение.Количество) КАК Количество
	             |ИЗ
	             |	РегистрНакопления.ЗаказыРаспределение КАК ЗаказыРаспределение
	             |ГДЕ
	             |	ЗаказыРаспределение.ВидДвижения = &ВидДвиженияПриход
	             |	И ЗаказыРаспределение.ЗаказПокупателя = &ЗаказПокупателя
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ЗаказыРаспределение.Номенклатура,
	             |	ЗаказыРаспределение.ХарактеристикаНоменклатуры";
	
	Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ЗаказПокупателя", Ссылка);
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьРаспределенияЗаказа()

Функция ПараметрыПроверкиОперацийСНоменклатурой()
	
	Параметры = Новый Структура;
	
	// заполняем
	Параметры.Вставить("ЗапретЗакупки", ХозОперация <> Справочники.ХозОперации.РезервированиеПокупателя);
	Параметры.Вставить("ЗапретПродажи", Истина);
	
	ТаблицыДляПроверки = Новый Массив;
	ТаблицыДляПроверки.Добавить("Товары");
	Параметры.Вставить("ТаблицыДляПроверки", ТаблицыДляПроверки);
	
	Возврат Параметры;
	
КонецФункции

Функция ПроверитьПараметрыЗапретаВыбораНоменклатуры()
	
	ПараметрыПроверки = ПараметрыПроверкиОперацийСНоменклатурой();
	ДополнительныеСвойства.Вставить("ПараметрыПроверки", ПараметрыПроверки);
	
	Возврат ОбработкаСобытийДокументаСервер.ПроверитьПараметрыЗапретаВыбораНоменклатуры(ЭтотОбъект, ПараметрыПроверки);
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
