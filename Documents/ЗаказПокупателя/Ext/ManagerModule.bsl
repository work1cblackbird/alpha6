// Модуль менеджера документа "Заказ покупателя"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает сформированную таблицу с товарами с учетом кореректировок для формирования документов оплаты
//
// Параметры:
//  Объект - ДокументСсылка.ЗаказПоставщику - документ, для которого формируются данные.
//  Результат - ТаблицаЗначений - шаблон возвращаемой таблицы данных.
//  ПараметрыПересчета - Структура - параметры пересчета
//
// Возвращаемое значение:
//  ТаблицаЗначений - сформированная таблица товаров.
//
Функция ТоварыДляДокументаОплаты(Объект, Результат, ПараметрыПересчета) Экспорт
	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток КАК Количество,
	|	ЗаказыПокупателейОстатки.СуммаОстаток КАК Сумма
	|ПОМЕСТИТЬ ЗаказыПокупателейОстатки
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки (&НаМомент, Контрагент = &Контрагент И Заказ = &Заказ) КАК ЗаказыПокупателейОстатки
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаЗаказаПокупателя.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ КорректировкиЗаказа
	|ИЗ
	|	Документ.КорректировкаЗаказаПокупателя КАК КорректировкаЗаказаПокупателя
	|ГДЕ
	|	КорректировкаЗаказаПокупателя.ДокументОснование = &Заказ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаменаВЗаказеПокупателя.Ссылка
	|ИЗ
	|	Документ.ЗаменаВЗаказеПокупателя КАК ЗаменаВЗаказеПокупателя
	|ГДЕ
	|	ЗаменаВЗаказеПокупателя.ДокументОснование = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаЗаказаПокупателяТовары.Номенклатура КАК Номенклатура,
	|	КорректировкаЗаказаПокупателяТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	КорректировкаЗаказаПокупателяТовары.Количество КАК Количество,
	|	КорректировкаЗаказаПокупателяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	КорректировкаЗаказаПокупателяТовары.Коэффициент КАК Коэффициент,
	|	КорректировкаЗаказаПокупателяТовары.Цена КАК Цена,
	|	КорректировкаЗаказаПокупателяТовары.СтавкаНДС КАК СтавкаНДС,
	|	КорректировкаЗаказаПокупателяТовары.СуммаНДС КАК СуммаНДС,
	|	КорректировкаЗаказаПокупателяТовары.Сумма КАК Сумма,
	|	КорректировкаЗаказаПокупателяТовары.СуммаВсего КАК СуммаВсего,
	|	КорректировкаЗаказаПокупателяТовары.Ссылка.Дата КАК Дата
	|ПОМЕСТИТЬ ТоварыСКорректировками
	|ИЗ
	|	Документ.КорректировкаЗаказаПокупателя.Товары КАК КорректировкаЗаказаПокупателяТовары
	|ГДЕ
	|	КорректировкаЗаказаПокупателяТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				КорректировкиЗаказа.Ссылка
	|			ИЗ
	|				КорректировкиЗаказа КАК КорректировкиЗаказа)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателяТовары.Номенклатура,
	|	ЗаказПокупателяТовары.ХарактеристикаНоменклатуры,
	|	ЗаказПокупателяТовары.Количество,
	|	ЗаказПокупателяТовары.ЕдиницаИзмерения,
	|	ЗаказПокупателяТовары.Коэффициент,
	|	ЗаказПокупателяТовары.Цена,
	|	ЗаказПокупателяТовары.СтавкаНДС,
	|	ЗаказПокупателяТовары.СуммаНДС,
	|	ЗаказПокупателяТовары.Сумма,
	|	ЗаказПокупателяТовары.СуммаВсего,
	|	ЗаказПокупателяТовары.Ссылка.Дата
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка = &Заказ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаменаВЗаказеПокупателяТоварыЗаменители.Номенклатура,
	|	ЗаменаВЗаказеПокупателяТоварыЗаменители.ХарактеристикаНоменклатуры,
	|	ЗаменаВЗаказеПокупателяТоварыЗаменители.Количество,
	|	ЗаменаВЗаказеПокупателяТоварыЗаменители.ЕдиницаИзмерения,
	|	ЗаменаВЗаказеПокупателяТоварыЗаменители.Коэффициент,
	|	ЗаменаВЗаказеПокупателяТоварыЗаменители.Цена,
	|	ЗаменаВЗаказеПокупателяТоварыЗаменители.СтавкаНДС,
	|	ЗаменаВЗаказеПокупателяТоварыЗаменители.СуммаНДС,
	|	ЗаменаВЗаказеПокупателяТоварыЗаменители.Сумма,
	|	ЗаменаВЗаказеПокупателяТоварыЗаменители.СуммаВсего,
	|	ЗаменаВЗаказеПокупателяТоварыЗаменители.Ссылка.Дата
	|ИЗ
	|	Документ.ЗаменаВЗаказеПокупателя.ТоварыЗаменители КАК ЗаменаВЗаказеПокупателяТоварыЗаменители
	|ГДЕ
	|	ЗаменаВЗаказеПокупателяТоварыЗаменители.Ссылка В
	|			(ВЫБРАТЬ
	|				КорректировкиЗаказа.Ссылка
	|			ИЗ
	|				КорректировкиЗаказа КАК КорректировкиЗаказа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКорректировок.Номенклатура КАК Номенклатура,
	|	ТаблицаКорректировок.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	МАКСИМУМ(ТаблицаКорректировок.Дата) КАК Дата
	|ПОМЕСТИТЬ ТоварыПоДате
	|ИЗ
	|	ТоварыСКорректировками КАК ТаблицаКорректировок
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаКорректировок.Номенклатура,
	|	ТаблицаКорректировок.ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыПоДате.Номенклатура КАК Номенклатура,
	|	ТоварыПоДате.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаКорректировок.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаКорректировок.Коэффициент КАК Коэффициент,
	|	ТаблицаКорректировок.Сумма КАК Сумма,
	|	ТаблицаКорректировок.Цена КАК Цена,
	|	ТаблицаКорректировок.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаКорректировок.СуммаНДС КАК СуммаНДС,
	|	ТаблицаКорректировок.СуммаВсего КАК СуммаВсего,
	|	ТаблицаКорректировок.Количество КАК Количество
	|ПОМЕСТИТЬ ИтоговаяТаблица
	|ИЗ
	|	ТоварыПоДате КАК ТоварыПоДате
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСКорректировками КАК ТаблицаКорректировок
	|		ПО ТоварыПоДате.Номенклатура = ТаблицаКорректировок.Номенклатура
	|			И ТоварыПоДате.ХарактеристикаНоменклатуры = ТаблицаКорректировок.ХарактеристикаНоменклатуры
	|			И ТоварыПоДате.Дата = ТаблицаКорректировок.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.Количество КАК Количество,
	|	ИтоговаяТаблица.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ИтоговаяТаблица.Коэффициент КАК Коэффициент,
	|	ИтоговаяТаблица.Цена КАК Цена,
	|	ИтоговаяТаблица.СтавкаНДС КАК СтавкаНДС,
	|	ИтоговаяТаблица.СтавкаНДС.Ставка КАК СтавкаНДССтавка,
	|	ИтоговаяТаблица.СуммаНДС КАК СуммаНДС,
	|	ИтоговаяТаблица.Сумма КАК Сумма,
	|	ИтоговаяТаблица.СуммаВсего КАК СуммаВсего
	|ИЗ
	|	ЗаказыПокупателейОстатки КАК ЗаказыПокупателейОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИтоговаяТаблица КАК ИтоговаяТаблица
	|		ПО ЗаказыПокупателейОстатки.Номенклатура = ИтоговаяТаблица.Номенклатура
	|			И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ИтоговаяТаблица.ХарактеристикаНоменклатуры";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Заказ", Объект);
	Запрос.УстановитьПараметр("НаМомент", ПараметрыПересчета.ДатаДокумента);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Коэффициент) Тогда
			НоваяСтрока.Коэффициент = 1;
		КонецЕсли;
		
		НоваяСтрока.СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			НоваяСтрока.СуммаВсего,
			ПараметрыПересчета.ВалютаДокументаОснования,
			ПараметрыПересчета.КурсДокументаОснования,
			ПараметрыПересчета.ВалютаДокумента,
			ПараметрыПересчета.КурсДокумента
		);
		НоваяСтрока.Сумма = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			НоваяСтрока.Сумма,
			ПараметрыПересчета.ВалютаДокументаОснования,
			ПараметрыПересчета.КурсДокументаОснования,
			ПараметрыПересчета.ВалютаДокумента,
			ПараметрыПересчета.КурсДокумента
		);
		НоваяСтрока.Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			НоваяСтрока.Сумма / НоваяСтрока.Количество,
			ПараметрыПересчета.ВалютаДокументаОснования,
			ПараметрыПересчета.КурсДокументаОснования,
			ПараметрыПересчета.ВалютаДокумента,
			ПараметрыПересчета.КурсДокумента
		);
		
		Если ПараметрыПересчета.ТребуетсяПересчет Тогда
			НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.СуммаВсего * Выборка.СтавкаНДССтавка / (100 + Выборка.СтавкаНДССтавка), 2);
		КонецЕсли;
		
		НоваяСтрока.НомерСтроки = Результат.Количество();
		
	КонецЦикла;
	
	Возврат ?(Результат.Количество() = 0, Неопределено, Результат);
	
КонецФункции

// Формирует структуру с данными для выгрузки в ЭД формата CML 2
//
// Параметры:
//  Документ - ДокументСсылка.ЗаказПокупателя - документ заказа
// 
// Возвращаемое значение:
//  Структура - с полями:
//  * Шапка - Структура;
//  * Товары - ТаблицаЗначений;
//
Функция ВыгрузитьДанныеДляЭД(Документ) Экспорт

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Дата КАК Дата,
		|	ЗаказПокупателя.ВалютаДокумента.Код КАК ВалютаКод,
		|	ЗаказПокупателя.ВалютаДокумента КАК Валюта,
		|	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
		|	ЗаказПокупателя.Номер КАК Номер,
		|	ЗаказПокупателя.Организация КАК Организация,
		|	ЗаказПокупателя.Контрагент КАК Контрагент,
		|	ЗаказПокупателя.ДокументОснование КАК ДокументОснование,
		|	ЗаказПокупателя.ДоговорВзаиморасчетов.ДатаНачала КАК ДоговорДата,
		|	ЗаказПокупателя.ДоговорВзаиморасчетов.НомерДоговора КАК ДоговорНомер,
		|	ЗаказПокупателя.Комментарий КАК Комментарий,
		|	ЗаказПокупателя.ТипЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Ссылка = &Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
		|	ЗаказПокупателяТовары.Номенклатура.Наименование КАК Наименование,
		|	ЗаказПокупателяТовары.Номенклатура.Артикул КАК Артикул,
		|	ЗаказПокупателяТовары.ХарактеристикаНоменклатуры КАК ЗначениеХарактеристики,
		|	ЗаказПокупателяТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЗаказПокупателяТовары.ХарактеристикаНоменклатуры КАК Характеристика,
		|	ЗаказПокупателяТовары.ХарактеристикаНоменклатуры.Наименование КАК НаименованиеХарактеристики,
		|	ЗаказПокупателяТовары.Количество КАК Количество,
		|	ЗаказПокупателяТовары.Сумма КАК Сумма,
		|	ЗаказПокупателяТовары.СтавкаНДС КАК СтавкаНДС,
		|	ЗаказПокупателяТовары.СуммаНДС КАК СуммаНДС,
		|	ЗаказПокупателяТовары.СуммаВсего КАК СуммаСНДС,
		|	ЗаказПокупателяТовары.Цена КАК Цена,
		|	ЗаказПокупателяТовары.Ссылка.ТипЦен.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
		|	ЗаказПокупателяТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКод,
		|	ЗаказПокупателяТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование КАК БазоваяЕдиницаНаименование,
		|	ЗаказПокупателяТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
		|	ЗаказПокупателяТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
		|	ЗаказПокупателяТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
		|	ЗаказПокупателяТовары.Коэффициент КАК ЕдиницаИзмеренияКоэффициент,
		|	ЗаказПокупателяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЗаказПокупателяТовары.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка = &Документ"
	);
	Запрос.УстановитьПараметр("Документ", Документ);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Новый Структура(
		"Шапка,Товары",
		ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатыЗапроса[0].Выгрузить()[0]),
		РезультатыЗапроса[1].Выгрузить()
	);

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбработчикиОбновления

// Выполняет перенос свойств в реквизиты объекта
// Руководитель, ГлавныйБухгалтер,Отустил, ОтпустилКонтрагент, Получил, ПолучилКонтрагент
//
Процедура ВыполнитьПереносИсполнителяИзСвойств() Экспорт
	
	ПеренесеныВсеСвойства = Истина;  
	РеквизитКУдалению = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["ИсполнительОрганизация"];	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяДополнительныеРеквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя.ДополнительныеРеквизиты КАК ЗаказПокупателяДополнительныеРеквизиты
	|ГДЕ
	|	ЗаказПокупателяДополнительныеРеквизиты.Свойство= &РеквизитКУдалению";
	
	Запрос.УстановитьПараметр("РеквизитКУдалению", РеквизитКУдалению);	
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СвойстваКУдалению = Новый Массив();		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаказПокупателя");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();  
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗначенияСвойств = ДокументОбъект.ДополнительныеРеквизиты.Выгрузить();
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Исполнитель) Тогда
				
				СвойствоИсполнительОрганизация = ЗначенияСвойств.Найти(РеквизитКУдалению,"Свойство");
				Руководитель     = ОрганизацииАльфаАвто.Руководитель(СвойствоИсполнительОрганизация.Значение, ДокументОбъект.Дата);
				
				Если ЗначениеЗаполнено(Руководитель) Тогда
					
					ДокументОбъект.Исполнитель = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						Руководитель,
						Выборка.Ссылка
					);
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтОрганизации) Тогда 
					
					ДокументОбъект.Исполнитель = ДокументОбъект.ПодписантОтОрганизации
					
				КонецЕсли;
				
			КонецЕсли;
																
			Строка = ДокументОбъект.ДополнительныеРеквизиты.Найти(РеквизитКУдалению, "Свойство");
					
			Если Строка <> Неопределено Тогда 
						
				ДокументОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
			КонецЕсли;
											
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение 
			
			ОтменитьТранзакцию(); 
			
			ПеренесеныВсеСвойства = Ложь;

			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления списка подписантов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ПеренесеныВсеСвойства Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Набор
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка.ИмяПредопределенныхДанных = ""Документ_ЗаказПокупателя""";
		
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();	
			
			Пока Выборка.Следующий() Цикл
				
				Попытка	
					НаборОбъект = Выборка.Набор.ПолучитьОбъект();
					
					Строка = НаборОбъект.ДополнительныеРеквизиты.Найти(РеквизитКУдалению, "Свойство");
					
					Если Строка <> Неопределено Тогда 
						
						НаборОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборОбъект);

					КонецЕсли;
									
					Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось обработать справочник: ""НаборыДополнительныхРеквизитовИСведений"" по причине:
							|%1'"), 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений, "НаборыДополнительныхРеквизитовИСведений", ТекстСообщения);
				КонецПопытки;	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры	

// Выполяет проверку выполнения отложенного обработчика обновления ВыполнитьПереносПодписантовИзСвойств
//
// Параметры:
//	Параметры - Структура - параметры выполнения операции.
//
// Возвращаемое значение:
//	Булево - Результат проверки;
//
Функция ПроверитьПереносИсполнителяИзСвойств(Параметры) Экспорт
	
	РеквизитКУдалению = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения["ИсполнительОрганизация"];	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ЗаказПокупателяДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Документ.ЗаказПокупателя.ДополнительныеРеквизиты КАК ЗаказПокупателяДополнительныеРеквизиты
	|ГДЕ
	|	ЗаказПокупателяДополнительныеРеквизиты.Свойство = &РеквизитКУдалению
	|	И ЗаказПокупателяДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("РеквизитКУдалению", 	РеквизитКУдалению);
	Запрос.УстановитьПараметр("Ссылка",				Параметры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
	    Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Товары.Итог("СуммаВсего"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС",    Объект.Товары.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента - ИтогиОперации.СуммаНДС);
		
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Производит расчет суммы скидки/наценки по документу в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция РассчитатьСуммуСкидкиНаценки(Объект) Экспорт
	
	Объект.СуммаСкидкиНаценки = Объект.Товары.Итог("СуммаСкидки") + Объект.Товары.Итог("СуммаСкидкиСтроки");
	
КонецФункции // РассчитатьСуммуСкидкиНаценки()

// Используется в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак, который указывает на необходимость вывода только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возвращаемая строка, содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить = Ложь, ТолькоОсновныеКонтакты = Истина) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

// заполнение резерва остатками со склада
Процедура ЗаполнитьРезервОстатками(Объект) Экспорт
	
	Если Объект.ХозОперация <> Справочники.ХозОперации.ЗаказРезервированиеПокупателя Тогда 
		Возврат; 
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СкладКомпании) Тогда 
		Возврат; 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	             |	ОстаткиТоваровКомпанииОстатки.Номенклатура,
	             |	ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры,
	             |	СУММА(ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток, 0)) - СУММА(ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.РезервОстаток, 0)) КАК Остаток
	             |ИЗ
	             |	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(
	             |		&НаМомент,
	             |		Номенклатура В (&Номенклатура)
	             |		    И СкладКомпании = &СкладКомпании
	             |		    И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)) КАК ОстаткиТоваровКомпанииОстатки
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ОстаткиТоваровКомпанииОстатки.Номенклатура,
	             |	ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры";
				 
	Запрос.УстановитьПараметр("НаМомент",					?(Объект.Ссылка.Пустая(), Объект.Дата,  Новый МоментВремени(Объект.Дата, Объект.Ссылка)));
	Запрос.УстановитьПараметр("Номенклатура",				Объект.Товары.Выгрузить(, "Номенклатура"));
	Запрос.УстановитьПараметр("СкладКомпании",				Объект.СкладКомпании);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",	Объект.Товары.Выгрузить(, "ХарактеристикаНоменклатуры"));
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТоваров Из Объект.Товары Цикл
		
		КоличествоЗаказа		= СтрокаТоваров.Количество;
		СтрокаТоваров.Резерв	= 0;
		МассивОстатков			= ТаблицаОстатков.НайтиСтроки(Новый Структура("Номенклатура,ХарактеристикаНоменклатуры",СтрокаТоваров.Номенклатура,СтрокаТоваров.ХарактеристикаНоменклатуры));
		
		Для каждого СтрокаОстатков Из МассивОстатков Цикл
			
			РезервЗаказа			= СтрокаТоваров.Резерв;
			Остаток					= СтрокаОстатков.Остаток/СтрокаТоваров.Коэффициент;
			Резерв					= Мин(КоличествоЗаказа-РезервЗаказа,Остаток);
			СтрокаТоваров.Резерв	= СтрокаТоваров.Резерв+Резерв;
			СтрокаОстатков.Остаток	= СтрокаОстатков.Остаток-(Резерв*СтрокаТоваров.Коэффициент);
			
			Если СтрокаТоваров.Количество = СтрокаТоваров.Резерв Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры 

// 
Процедура РасчетПредоплаты(Объект, ПараметрыДействия) Экспорт
	
	Если Объект.ПерерасчетОтПредоплаты Тогда
		СуммаПредоплатыПриИзменении(Объект, ПараметрыДействия);
	Иначе
		ПроцентПредоплатыПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	ОбязательныеРеквизиты.Добавить("СрокПоставки");
	ОбязательныеРеквизиты.Добавить("СкладКомпании");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли; 
	
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары=Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	// Временно.
	Если
		ПолучитьЗначениеПараметраСтруктуры(Объект.ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь)
	Тогда
		УникальныеТовары.Добавить("Поставщик");
		УникальныеТовары.Добавить("НаправлениеПоставки");
		УникальныеТовары.Добавить("КлючСтрокиПоставщика");
		УникальныеТовары.Добавить("СрокПоставкиВСтроке");
	КонецЕсли;
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти=Новый Структура();
	УникальныеТабличныеЧасти.Вставить("Товары",УникальныеТовары);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("СкладКомпании",         Ложь);
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДатаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подразделение".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	// IvEd_Alfa +++
	// Очистка реквизитов источника обеспечения при смене подразделения
	Если ЕстьРеквизит(Объект, "КлючСтрокиПоставщика", "Товары") Тогда
		ДанныеЗаполнения = Новый Структура("Поставщик,НаправлениеПоставки,КлючСтрокиПоставщика,СрокПоставкиВСтроке");
		Для Каждого Строка Из Объект.Товары Цикл
			ЗаполнитьЗначенияСвойств(Строка, ДанныеЗаполнения);
		КонецЦикла;
	КонецЕсли;
	// IvEd_Alfa ---
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);

	Если ЗначениеЗаполнено(Объект.Исполнитель) И Объект.Исполнитель.Организация <> Объект.Организация Тогда
		Объект.Исполнитель = Справочники.Подписанты.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Менеджер".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура МенеджерПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.МенеджерПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // МенеджерПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.ХозОперация=Справочники.ХозОперации.ЗаказПокупателя Тогда
		Для Каждого СтрокаТоваров Из Объект.Товары Цикл
			Если СтрокаТоваров.Резерв<>0 Тогда
				СтрокаТоваров.Резерв = 0;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Объект.ХозОперация=Справочники.ХозОперации.РезервированиеПокупателя Тогда
		Для Каждого СтрокаТоваров Из Объект.Товары Цикл
			Если СтрокаТоваров.Количество<>СтрокаТоваров.Резерв Тогда
				СтрокаТоваров.Количество = СтрокаТоваров.Резерв;
				ТоварыКоличествоПриИзменении(Объект, СтрокаТоваров);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		// Чтение значения для срока поставки
		СрокПоставкиДней    = Объект.ПодразделениеКомпании.СрокПоставкиПокупателюПоУмолчанию;
		Объект.СрокПоставки = НачалоДня(Объект.Дата) + СрокПоставкиДней*60*60*24;
	КонецЕсли;
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
	Если Объект.ДоговорВзаиморасчетов<>Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка() Тогда
		ПроцентПредоплатыНовый = ?(Объект.ДоговорВзаиморасчетов.ПроцентПредоплаты = -1, 
			ПраваИНастройкиПользователя.Значение("МинимальныйПроцентПредоплаты", Объект),
			Объект.ДоговорВзаиморасчетов.ПроцентПредоплаты);
		Если Объект.ПроцентПредоплаты<>ПроцентПредоплатыНовый Тогда
			Объект.ПроцентПредоплаты = ПроцентПредоплатыНовый;
			ПроцентПредоплатыПриИзменении(Объект, ПараметрыДействия);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип Цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДокументОснованиеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Резервировать на".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Карточка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КарточкаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КарточкаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КарточкаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Предоплата %".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроцентПредоплатыПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	СуммаСоСкидкой  = Объект.Товары.Итог("СуммаВсего");
	Объект.СуммаПредоплаты = (СуммаСоСкидкой*Объект.ПроцентПредоплаты)/100;
	
КонецПроцедуры // ПроцентПредоплатыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма предоплаты".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаПредоплатыПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	СуммаСоСкидкой = Объект.Товары.Итог("СуммаВсего");
	Если СуммаСоСкидкой=0 Тогда
		Объект.ПроцентПредоплаты=0;
	Иначе
		ВремПроцентПредоплаты = (Объект.СуммаПредоплаты*100)/СуммаСоСкидкой;
		ВремПроцентПредоплаты = Цел(ВремПроцентПредоплаты*100)/100;
		Объект.ПроцентПредоплаты = ВремПроцентПредоплаты;
	КонецЕсли;
	
КонецПроцедуры // СуммаПредоплатыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Скидка наценка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Для Каждого Строка Из Объект.Товары Цикл
		Строка.ЗначениеСкидкиШапкиИзменено = Ложь;
	КонецЦикла;
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия);
	
	// Пересчитаем предоплату 
	РасчетПредоплаты(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкидкаНаценкаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	РасчетПредоплаты(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Корректировка суммы предоплаты
	РасчетПредоплаты(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.ХозОперация=Справочники.ХозОперации.РезервированиеПокупателя Тогда
		Строка.Количество = Строка.Резерв;
	ИначеЕсли Объект.ХозОперация = Справочники.ХозОперации.ЗаказПокупателя Тогда
		Строка.Резерв=0;
	КонецЕсли;
	
	НовоеКоличество = Строка.Количество;
	Если НовоеКоличество<Строка.Резерв Тогда
		НовоеКоличество = Строка.Резерв;
	КонецЕсли;
	
	Строка.Количество = НовоеКоличество;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Корректировка суммы предоплаты
	РасчетПредоплаты(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()
	
// Обработчик события возникающего при изменении данных реквизита "Резерв" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыРезервПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.ХозОперация = Справочники.ХозОперации.ЗаказПокупателя Тогда
		Строка.Резерв = 0;
	ИначеЕсли Строка.Резерв>Строка.Количество ИЛИ Объект.ХозОперация = Справочники.ХозОперации.РезервированиеПокупателя Тогда
		Строка.Количество = Строка.Резерв;
		ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // ТоварыРезервПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Корректировка суммы предоплаты
	РасчетПредоплаты(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Корректировка суммы предоплаты
	РасчетПредоплаты(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Корректировка суммы предоплаты
	РасчетПредоплаты(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
	РасчетПредоплаты(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыСуммаСкидкиСтрокиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	РасчетПредоплаты(Объект, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыСуммаСкидкиПриИзменении() 

// Обработчик события возникающего при изменении данных реквизита "Скидка на товар" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСкидкаНаТоварПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыПроцентСкидкиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
	РасчетПредоплаты(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыПроцентСкидкиСтрокиПриИзменении()

// расчет скидок по строке
Процедура РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти = "Товары", СкидкаШапкиАбсолютная = Ложь) Экспорт
	
	СкидкиНаценкиСервер.РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти, СкидкаШапкиАбсолютная);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Товары");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ЗаказПокупателя");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить резерв остатками'");
	Команда.Идентификатор	= "ТоварыЗаполнитьРезервОстатками"; 
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением = Ложь;
	
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
		Команда,
		"ХозОперация",
		Справочники.ХозОперации.ЗаказРезервированиеПокупателя
	);
	
	ДополнительныеПараметры = ЗаполнениеОбъектовАльфаАвто.ДополнительныеПараметрыЗаполненияТЧИзДокумента(Параметры);
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Загрузить из корзины'");
	Команда.Идентификатор	= "ЗагрузитьИзКорзины";
	Команда.Порядок			= 51;
	Команда.Обработчик = "ЗаполнениеОбъектовАльфаАвтоКлиент.НачатьЗаполнениеИзКорзины";
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
		Команда.ДополнительныеПараметры,
		ДополнительныеПараметры,
		Ложь); 
		
		
	ВыборСтавки 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборСтавки.ВыборСсылки 		= "Справочник.СтавкиНДС.ФормаСписка";
	ВыборСтавки.Обязательный 		= Истина;
	ВыборСтавки.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать ставку НДС.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Изменить ставку НДС'"); 
	Команда.Идентификатор	= "ТоварыЗаполнитьСтавкуНДС";
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением = Ложь;
	Команда.Порядок			= 52;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СтавкаНДС", ВыборСтавки);

	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзДокумента(
		КомандыЗаполнения,
		"Товары",
		Параметры
	);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьРезервОстатками.Видимость",      Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьРезервОстатками.Доступность",    (Объект.ХозОперация = Справочники.ХозОперации.ЗаказРезервированиеПокупателя));
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСтавкуНДС.Видимость",					 Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСтавкуНДС.Доступность",					 Истина); 

	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по резервам
//
Функция ТоварыЗаполнитьРезервОстатками(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	ЗаполнитьРезервОстатками(Объект);
	
КонецФункции // ТоварыЗаполнитьРезервОстатками()

// Обработчик перезаполнения ставки НДС документа 
//
Функция ТоварыЗаполнитьСтавкуНДС(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Объект.Товары) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не заполнена табличная часть'"), Ссылка);
	Иначе 
		НоваяСтавкаНДС = ПараметрыЗаполнения.СтавкаНДС;
		
		Для Каждого Строка Из Объект.Товары Цикл 
			СтавкаНДСНоменклатуры = Строка.Номенклатура.СтавкаНДС;
			Если СтавкаНДСНоменклатуры = Справочники.СтавкиНДС.БезНДС И Строка.СтавкаНДС = СтавкаНДСНоменклатуры Тогда
				Продолжить;
			Иначе
				Строка.СтавкаНДС = НоваяСтавкаНДС; 
				ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия); 
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции // ТоварыЗаполнитьСтавкуНДС()

// Получить состояние заказа клиента
//
// Параметры:
//  Объект            - ДокументОбъект - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица значений с результатами движений по заказу.
//
Функция ПолучитьДвиженияЗаказа(Объект) Экспорт
	// Сначала получим список номенклатуры по документу
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ
	|	ТаблицаЗаказа
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка = &Заказ
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.ЗаказаноОстаток, 0) КАК Заказано,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.РезервОстаток, 0) КАК Зарезервировано,
	|	ЕСТЬNULL(ЗаказыРаспределениеОстатки.КоличествоОстаток, 0)КАК Распределено,
	|	ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток, 0) КАК СкладОстаток,
	|	ЕСТЬNULL(ОстаткиТоваровКомпанииОстатки.РезервОстаток, 0) КАК СкладЗарезервировано
	|ИЗ
	|	ТаблицаЗаказа КАК ДокументТовары
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(, Заказ=&Заказ) КАК ЗаказыПокупателейОстатки
	|ПО
	|	ДокументТовары.Номенклатура               = ЗаказыПокупателейОстатки.Номенклатура И 
	|	ДокументТовары.ХарактеристикаНоменклатуры = ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ЗаказыРаспределение.Остатки(,ЗаказПокупателя=&Заказ) КАК ЗаказыРаспределениеОстатки
	|ПО
	|	ДокументТовары.Номенклатура               = ЗаказыРаспределениеОстатки.Номенклатура И 
	|	ДокументТовары.ХарактеристикаНоменклатуры = ЗаказыРаспределениеОстатки.ХарактеристикаНоменклатуры
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(,
	|				(Номенклатура, ХарактеристикаНоменклатуры) В 
	|					(ВЫБРАТЬ
	|						ТаблицаЗаказа.Номенклатура КАК Номенклатура,
	|						ТаблицаЗаказа.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|					ИЗ
	|						ТаблицаЗаказа КАК ТаблицаЗаказа)) КАК ОстаткиТоваровКомпанииОстатки
	|ПО
	|	ДокументТовары.Номенклатура               = ОстаткиТоваровКомпанииОстатки.Номенклатура И 
	|	ДокументТовары.ХарактеристикаНоменклатуры = ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры
	|");
	Запрос.УстановитьПараметр("Заказ",Объект.Ссылка);
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Возврат Выгрузка;
	
КонецФункции // ПолучитьДвиженияЗаказа()

// Получение остатков распределения заказа по заказам поставщикам
//
// Параметры:
//  Объект            - ДокументОбъект - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Возвращает выборку запроса.
//
Функция ПолучитьРаспределенияЗаказа(Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	             |	ЗаказыРаспределение.Номенклатура КАК Номенклатура,
	             |	ЗаказыРаспределение.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	             |	СУММА(ЗаказыРаспределение.Количество) КАК Количество
	             |ИЗ
	             |	РегистрНакопления.ЗаказыРаспределение КАК ЗаказыРаспределение
	             |ГДЕ
	             |	ЗаказыРаспределение.ВидДвижения = &ВидДвиженияПриход
	             |	И ЗаказыРаспределение.ЗаказПокупателя = &ЗаказПокупателя
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ЗаказыРаспределение.Номенклатура,
	             |	ЗаказыРаспределение.ХарактеристикаНоменклатуры";
		
	Запрос.УстановитьПараметр("ВидДвиженияПриход",	ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ЗаказПокупателя",	Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьРаспределенияЗаказа()

// Обработчик события возникающего при изменении данных реквизита "Автомобиль".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобильПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Владелец = Справочники.Автомобили.ЧтениеЗначенияРегистраСведения(Объект.Автомобиль, Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин, Объект.Дата);
	Если (ЗначениеЗаполнено(Владелец)) И (НЕ Объект.Контрагент = Владелец) Тогда
		Если (ПараметрыДействия.Свойство("НеобходимоПерезаполнитьЗаказчика") И ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "НеобходимоПерезаполнитьЗаказчика", Ложь))
			ИЛИ НЕ (ПараметрыДействия.Свойство("НеобходимоПерезаполнитьЗаказчика")) ИЛИ НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = Владелец;
			КонтрагентПриИзменении(Объект, ПараметрыДействия);
		Иначе
			ПараметрыДействия.НеобходимоПерезаполнитьЗаказчика = Истина;
			ПараметрыДействия.Вставить("ВладелецАвтомобиля", Владелец);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // АвтомобильПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Поставщик" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПоставщикПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиТовары.ПоставщикПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Формирует печатную форму "УсловияПоставки"
//
Функция ПечатьУсловияПоставки(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_УсловияПоставки";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати,ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказПокупателя.ПФ_MXL_УсловияПоставки");
	
		СрокПоставкиДней=Документ.ПодразделениеКомпании.СрокПоставкиПокупателюПоУмолчанию;
		Макет.Параметры.СрокПоставки = ?(((Документ.СрокПоставки-Документ.Дата)/86400) < 0, 0, Цел((Документ.СрокПоставки-Документ.Дата)/86400)+1);
	
		ТабличныйДокумент.Вывести(Макет);

		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции //ПечатьУсловияПоставки()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаказПокупателя",
		"ПФ_MXL_ЗаказПокупателя",
		НСтр("ru = 'Заказ покупателя'"),
		СсылкаНаДокумент
	);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаказПокупателя",
		"ПФ_MXL_УсловияПоставки",
		НСтр("ru = 'Условия поставки'"),
		СсылкаНаДокумент
	); 
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Ценники",
		НСтр("ru = 'Печать ценников'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати",
		,,,,
		Ложь
	);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Этикетки",
		НСтр("ru = 'Печать этикеток'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати",
		,,,,
		Ложь
	);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик события формирования печатной формы.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - информация для заполнения письма при отправке печатной формы электронной почтой.
//                                     Содержит следующие поля:
//    ** Получатель - Строка, СписокЗначений, Массив - список получателей письма;
//    ** Тема - Строка - Тема письма,
//    ** Текст - Строка - Текст письма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ЗаказПокупателя") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ЗаказПокупателя",
			НСтр("ru = 'Заказ покупателя'"),
			ПечатьЗаказПокупателя(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
		);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_УсловияПоставки") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_УсловияПоставки",
			НСтр("ru = 'Заказ покупателя'"),
			ПечатьУсловияПоставки(МассивОбъектов, ОбъектыПечати)
		);
		
	КонецЕсли;
	
КонецПроцедуры // Печать()

Функция ПечатьЗаказПокупателя(МассивОбъектов, ОбъектыПечати, ПараметрыПечати = Неопределено)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_ЗаказПокупателя";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказПокупателя.ПФ_MXL_ЗаказПокупателя");
		
		ОбластьШапкаТаблицы    = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		Если УправлениеПечатьюПлатформа.ЕстьЛоготип(Документ.Организация, Документ.ПодразделениеКомпании) Тогда
			ОбластьЗаголовокСчета = Макет.ПолучитьОбласть("ЗаголовокСчетаСЛоготипом");
			УправлениеПечатьюПлатформа.
				ЗаполнитьЛоготип(ОбластьЗаголовокСчета, Документ.Организация, Документ.ПодразделениеКомпании);
		Иначе
			ОбластьЗаголовокСчета  = Макет.ПолучитьОбласть("ЗаголовокСчета");
		КонецЕсли;
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьАвтомобиль	   = Макет.ПолучитьОбласть("Автомобиль");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// дата документа
		ДатаДокумента = Документ.Дата;
		
		// Заголовок счета
		ОбластьЗаголовокСчета.Параметры.Заполнить(Документ);
		ОбластьЗаголовокСчета.Параметры.ПредставлениеПоставщика =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.Организация, ДатаДокумента);
		ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Документ.Организация);
		ОбластьЗаголовокСчета.Параметры.СчетПоставщикаПредставление      = ОсновнойБанковскийСчет.НомерСчета;
		ОбластьЗаголовокСчета.Параметры.БИКБанкаПоставщика               = ОсновнойБанковскийСчет.Банк.Код;
		ОбластьЗаголовокСчета.Параметры.БанкПоставщикаПредставление      = ОсновнойБанковскийСчет.Банк;
		ОбластьЗаголовокСчета.Параметры.СчетБанкаПоставщикаПредставление = ОсновнойБанковскийСчет.Банк.КоррСчет;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовокСчета);
		// Вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ,
			НСтр("ru = 'Заказ покупателя'"));
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ПредставлениеПокупателя =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Контрагент, , ДополнительныеПараметры);
		
		// Выведем или удалим ШК
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		Если ЗначениеЗаполнено(Документ.Автомобиль) Тогда
			ОбластьАвтомобиль.Параметры.ПредставлениеАвтомобиля = СокрЛП(Документ.Автомобиль);
			ТабличныйДокумент.Вывести(ОбластьАвтомобиль);
		КонецЕсли; 
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Готовим шапку
		НомерСтраницы = 2; НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура;
		СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
		СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
		СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
		СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
		
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// Готовим области строки
		ВыборкаТабличнойЧасти = Документ.Товары;
		Для каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,
				УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ));
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура;
				СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
				СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
				СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
				СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
				НомерСтраницыПред		  = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// Итоги
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("СуммаВсего");
		ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		НДСВсего = ВыборкаТабличнойЧасти.Итог("СуммаНДС");
		ОбластьПодвал.Параметры.НДСВсего = Формат(НДСВсего, ФорматВыводаСуммы);
		Если ВыборкаТабличнойЧасти.Итог("СуммаСкидки") > 0 ИЛИ ВыборкаТабличнойЧасти.Итог("СуммаСкидкиСтроки") > 0 Тогда
			СуммаСкидки = ВыборкаТабличнойЧасти.Итог("СуммаСкидки");
			СуммаСкидкиСтроки = ВыборкаТабличнойЧасти.Итог("СуммаСкидкиСтроки");
			
			ОбластьПодвал.Параметры.СкидкаВсего = Формат(СуммаСкидки + СуммаСкидкиСтроки, ФорматВыводаСуммы);
		КонецЕсли;
		ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'") + Символы.НПП
			+ ВыборкаТабличнойЧасти.Количество() + Символы.НПП + НСтр("ru = 'на сумму'") + Символы.НПП
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, Документ.ВалютаДокумента);
				
		ДанныеПодписант = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Документ, "Исполнитель"); 
		ОбластьПодвал.Параметры.ИсполнительПредставление = ДанныеПодписант.Представление;

		УправлениеПечатьюПлатформа.
			ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции //ПечатьЗаказПокупателя()

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//	Адрес   - адрес структуры данных во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ЗаказПокупателяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МИНИМУМ(ЗаказПокупателяТовары.НомерСтроки) КАК Порядок,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаказПокупателяТовары.Ссылка.СкладКомпании.Розничный = ИСТИНА
	|				ТОГДА ЗаказПокупателяТовары.Количество * (ЕСТЬNULL(ЗаказПокупателяТовары.ЕдиницаИзмерения.Коэффициент, 1) / ЕСТЬNULL(Цены.ЕдиницаИзмерения.Коэффициент, 1))
	|			ИНАЧЕ ЗаказПокупателяТовары.Количество
	|		КОНЕЦ) КАК Количество,
	|	МАКСИМУМ(ЗаказПокупателяТовары.СуммаВсего) КАК Цена,
	|	МАКСИМУМ(ЗаказПокупателяТовары.СтавкаНДС) КАК СтавкаНДС,
	|	МАКСИМУМ(ЗаказПокупателяТовары.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Цены.СрезПоследних КАК Цены
	|		ПО (Цены.Номенклатура = ЗаказПокупателяТовары.Номенклатура)
	|			И (Цены.ХарактеристикаНоменклатуры = ЗаказПокупателяТовары.ХарактеристикаНоменклатуры)
	|			И (Цены.ТипЦен = ЗаказПокупателяТовары.Ссылка.СкладКомпании.ТипЦенРозничнойТорговли)
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка В(&МассивДокументов)
	|	И ЗаказПокупателяТовары.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяТовары.Номенклатура,
	|	ЗаказПокупателяТовары.ХарактеристикаНоменклатуры,
	|	ЗаказПокупателяТовары.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаказПокупателя.Организация КАК Организация,
	|	ЗаказПокупателя.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ЗаказПокупателя.СкладКомпании КАК СкладКомпании,
	|	ЗаказПокупателя.СкладКомпании.ТипЦенРозничнойТорговли КАК ТипЦены
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций 			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивПодразделенийКомпании = УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ПодразделениеКомпании").ВыгрузитьКолонку(0);
	МассивСкладов    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "СкладКомпании").ВыгрузитьКолонку(0);
	МассивТиповЦен    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ТипЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьПодразделениеКомпании", ?(МассивПодразделенийКомпании.Количество() = 1, МассивПодразделенийКомпании[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьТипЦены",     ?(МассивТиповЦен.Количество() = 1,    МассивТиповЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЭтикеток");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("НеПересчитыватьЦены");
	СтруктураДействий.Вставить("ЦеныИзДокументаОснования");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	Товары.ЗаполнитьЗначения(СтруктураДействий.ЗаполнитьОрганизацию, "Организация");
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//	Адрес - адрес структуры данных во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЦенников(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ЗаказПокупателяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МИНИМУМ(ЗаказПокупателяТовары.НомерСтроки) КАК Порядок,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаказПокупателяТовары.Ссылка.СкладКомпании.Розничный = ИСТИНА
	|				ТОГДА ЗаказПокупателяТовары.Количество * (ЕСТЬNULL(ЗаказПокупателяТовары.ЕдиницаИзмерения.Коэффициент, 1) / ЕСТЬNULL(Цены.ЕдиницаИзмерения.Коэффициент, 1))
	|			ИНАЧЕ ЗаказПокупателяТовары.Количество
	|		КОНЕЦ) КАК Количество,
	|	МАКСИМУМ(ЗаказПокупателяТовары.СуммаВсего) КАК Цена,
	|	МАКСИМУМ(ЗаказПокупателяТовары.СтавкаНДС) КАК СтавкаНДС,
	|	МАКСИМУМ(ЗаказПокупателяТовары.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Цены.СрезПоследних КАК Цены
	|		ПО (Цены.Номенклатура = ЗаказПокупателяТовары.Номенклатура)
	|			И (Цены.ХарактеристикаНоменклатуры = ЗаказПокупателяТовары.ХарактеристикаНоменклатуры)
	|			И (Цены.ТипЦен = ЗаказПокупателяТовары.Ссылка.СкладКомпании.ТипЦенРозничнойТорговли)
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка В(&МассивДокументов)
	|	И ЗаказПокупателяТовары.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяТовары.Номенклатура,
	|	ЗаказПокупателяТовары.ХарактеристикаНоменклатуры,
	|	ЗаказПокупателяТовары.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаказПокупателя.Организация КАК Организация,
	|	ЗаказПокупателя.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ЗаказПокупателя.СкладКомпании КАК СкладКомпании,
	|	ЗаказПокупателя.СкладКомпании.ТипЦенРозничнойТорговли КАК ТипЦены
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций 			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивПодразделенийКомпании = УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ПодразделениеКомпании").ВыгрузитьКолонку(0);
	МассивСкладов    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "СкладКомпании").ВыгрузитьКолонку(0);
	МассивТиповЦен    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ТипЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьПодразделениеКомпании", ?(МассивПодразделенийКомпании.Количество() = 1, МассивПодразделенийКомпании[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьВидЦены",     ?(МассивТиповЦен.Количество() = 1,    МассивТиповЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЦенников");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("НеПересчитыватьЦены");
	СтруктураДействий.Вставить("ЦеныИзДокументаОснования");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	Товары.ЗаполнитьЗначения(СтруктураДействий.ЗаполнитьОрганизацию, "Организация");
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции


#КонецОбласти

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РеализацияТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказНаряд);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказВнутренний);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаРасходДС);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаРемонт);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаказПоставщику);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЖалобаКлиента);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаменаВЗаказеПокупателя);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаЗаказаПокупателя);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЧекНаОплату);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РаспределениеЗаказаПокупателя);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПеремещениеРезервов);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПеремещениеТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПланПоступленияДС);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйСкладскойОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РезервированиеЗаказовПокупателя);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СнятиеРаспределенияЗаказовПокупателя);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СнятиеРезервовЗаказовПокупателя);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетНаОплату);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ЗаказПокупателя);

КонецФункции

#КонецОбласти

#КонецЕсли