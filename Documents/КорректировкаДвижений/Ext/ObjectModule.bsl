// Модуль объекта документа "Корректировка"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним тч по умолчанию
	Если ДвиженияКорректировки.Количество()=0 Тогда
		Для Каждого Движение Из Метаданные().Движения Цикл
			НоваяСтрока = ДвиженияКорректировки.Добавить();
			НоваяСтрока.ИмяРегистра = "" + Движение.Имя;
			НоваяСтрока.Представление = "" + Движение.Представление();
			НоваяСтрока.Использование = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьДвиженияПоДокументуОснованию(Истина);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним период
	Если ХозОперация = Справочники.ХозОперации.КорректировкаДвижений Тогда
		
		Для Каждого ТекСтрокаТЧ Из ДвиженияКорректировки Цикл
			НаборЗаписей = Движения[ТекСтрокаТЧ.ИмяРегистра];
			Если ТекСтрокаТЧ.Использование Тогда
				Для Каждого ТекДвижение Из НаборЗаписей Цикл
					ТекДвижение.Период = Дата;
				КонецЦикла;
			Иначе
				Если НЕ Ссылка.Пустая() Тогда
					НаборЗаписей.Очистить();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого ТекНаборЗаписей Из Движения Цикл
			Для Каждого ТекЗапись Из ТекНаборЗаписей Цикл
				ТекЗапись.Период = ДокументОснование.Дата;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	ОчиститьСкладДляДвиженийУслугПоРегиструПродажи();
	
	Если НЕ ЭтоНовый() И Ссылка.ПометкаУдаления <> ПометкаУдаления Тогда
		УстановитьАктивностьДвижений(НЕ ПометкаУдаления);
	ИначеЕсли ПометкаУдаления Тогда
		УстановитьАктивностьДвижений(Ложь);
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция создает сторнирующие движения.
//
Функция ЗаполнитьНаборЗаписей(ЗаполняемыйНаборЗаписей, МетаданныеРегистр)
	
	ВидРегистра = -1;
	
	Если Метаданные.РегистрыРасчета.Найти(МетаданныеРегистр.Имя)<>Неопределено Тогда
		ВидРегистра = 0;
		НаборЗаписей = РегистрыРасчета[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Найти(МетаданныеРегистр.Имя)<>Неопределено Тогда
		ВидРегистра = 1;
		НаборЗаписей = РегистрыБухгалтерии[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
	ИначеЕсли Метаданные.РегистрыНакопления.Найти(МетаданныеРегистр.Имя)<>Неопределено Тогда
		ВидРегистра = 2;
		НаборЗаписей = РегистрыНакопления[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	// Считывает записи из базы данных по установленному отбору(Регистратор-ДокументОснование).
	НаборЗаписей.Отбор.Регистратор.Значение = ДокументОснование;
	НаборЗаписей.Прочитать();
	
	Для Каждого ДвижениеКорректируемое Из НаборЗаписей Цикл
		// ЗаполняемыйНаборЗаписей - это табличное поле для отображения записей регистра
		ДвижениеКорректировки = ЗаполняемыйНаборЗаписей.Добавить();
		
		// копирует движение по регистру: измерения, ресурсы, реквизиты
		ЗаполнитьЗначенияСвойств(ДвижениеКорректировки, ДвижениеКорректируемое, , "НомерСтроки, Регистратор, ВидДвижения");
		
		// ресурсы
		Если ХозОперация = Справочники.ХозОперации.Сторно Тогда
			Для Каждого МДОбъект Из МетаданныеРегистр.Ресурсы Цикл
				ДвижениеКорректировки[МДОбъект.Имя] = - ДвижениеКорректировки[МДОбъект.Имя];
			КонецЦикла;
		КонецЕсли;
		
		ДвижениеКорректировки.Регистратор = Ссылка;
		
		ДатаДвиженияКорректируемого = ДвижениеКорректировки.Период;
		// реквизиты
		Если ВидРегистра=0 Тогда
			ДвижениеКорректировки.ПериодРегистрации = ДатаДвиженияКорректируемого;
			ДвижениеКорректировки.ВидРасчета = ДвижениеКорректируемое.ВидРасчета;
			Если ХозОперация = Справочники.ХозОперации.Сторно Тогда
				ДвижениеКорректировки.Сторно = Истина;
			КонецЕсли;
			
			Если МетаданныеРегистр.ПериодДействия Тогда
				ДвижениеКорректировки.ПериодДействияНачало = ДвижениеКорректируемое.ПериодДействияНачало;
				ДвижениеКорректировки.ПериодДействияКонец = ДвижениеКорректируемое.ПериодДействияКонец;
			КонецЕсли;
			Если МетаданныеРегистр.БазовыйПериод Тогда
				ДвижениеКорректировки.БазовыйПериодНачало = ДвижениеКорректируемое.БазовыйПериодНачало;
				ДвижениеКорректировки.БазовыйПериодКонец  = ДвижениеКорректируемое.БазовыйПериодКонец;
			КонецЕсли;
		ИначеЕсли ВидРегистра=1 Тогда 
			ДвижениеКорректировки.Период = ДатаДвиженияКорректируемого;
		ИначеЕсли ВидРегистра=2 Тогда 
			Если МетаданныеРегистр.ВидРегистра=Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
				ДвижениеКорректировки.ВидДвижения = ДвижениеКорректируемое.ВидДвижения;
			КонецЕсли;
			ДвижениеКорректировки.Период = ДатаДвиженияКорректируемого;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ЗаполнитьНаборЗаписей()

#Область ФормированиеДвиженийДокумента

// Функция создает страницу со сторнирующими движениями
//
// Параметры:
// Модифицированность - Булево - Изменены ли поля объекта
// 
// Результат:
// ДоступныеДвижения - Массив - движения документа основания с не пустым набором записей
Функция ЗаполнитьДвиженияПоДокументуОснованию(Модифицированность = Ложь) Экспорт
	
	ДоступныеДвижения = Новый Массив;
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат ДоступныеДвижения;
	КонецЕсли;
	ДвиженияДокументаОснования = ДокументОснование.ПолучитьОбъект().Движения;
	
	Для Каждого Движение Из Метаданные.Документы.КорректировкаДвижений.Движения Цикл
		
		// Поищем это движение в документе основании
		ДвижениеДокументаОснования = ДвиженияДокументаОснования.Найти(Движение.Имя);
		Если ДвижениеДокументаОснования = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДвижениеДокументаОснования.Прочитать();
		Если ДвижениеДокументаОснования.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписейДокумента = Движения.Найти(Движение.Имя);
		Если ЗначениеЗаполнено(Ссылка) И (НЕ Модифицированность) Тогда
			НаборЗаписейДокумента.Прочитать();
		Иначе
			Если НЕ ЗаполнитьНаборЗаписей(НаборЗаписейДокумента, Движение) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если НаборЗаписейДокумента.Количество()>0 Тогда
			ДоступныеДвижения.Добавить(Движение);
			Если ХозОперация = Справочники.ХозОперации.КорректировкаДвижений Тогда
				СтрокаДвижения = ДвиженияКорректировки.НайтиСтроки(Новый Структура("ИмяРегистра",Движение.Имя));
				СтрокаДвижения[0].Использование = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДоступныеДвижения;
КонецФункции // ЗаполнитьДвиженияПоДокументуОснованию()

// Процедура устанавливает признак активности для записей регистров.
//
Процедура УстановитьАктивностьДвижений(ФлагАктивности)
	
	Для Каждого Движение Из Движения Цикл
		
		Движение.Прочитать();
		Движение.УстановитьАктивность(ФлагАктивности);
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьАктивностьДвижений()

#КонецОбласти

Процедура ОчиститьСкладДляДвиженийУслугПоРегиструПродажи()

	ДвиженияПродажи = Движения.Продажи;
	
	Если ДвиженияПродажи.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВидНоменклатурыУслуга = Перечисления.ВидыНоменклатуры.Услуга;
	ТипСкладыКомпании = Тип("СправочникСсылка.СкладыКомпании");
	
	ВидыНоменклатурыЗаписей = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДвиженияПродажи.ВыгрузитьКолонку("Номенклатура"), "ВидНоменклатуры");
	
	Для Каждого ДвижениеПродажи Из ДвиженияПродажи Цикл
		
		// Выбираем только услуги
		Если НЕ ВидыНоменклатурыЗаписей[ДвижениеПродажи.Номенклатура] = ВидНоменклатурыУслуга Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		// Проверяем на заполненность склада
		Если ЗначениеЗаполнено(ДвижениеПродажи.СкладКомпании)
			И ТипЗнч(ДвижениеПродажи.СкладКомпании) = ТипСкладыКомпании Тогда
			
			ДвижениеПродажи.СкладКомпании = Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецЕсли
