// Модуль объекта документа "Счет на оплату за автомобили"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	Если ОбработкаСобытийДокументаСервер.ВводСПустымОснованием(ДанныеЗаполнения) Тогда
		ТипЦен          = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенПродажиАвтомобилей", ЭтотОбъект);
		ВалютаДокумента = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен,,Ложь);
	КонецЕсли;
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаАвтомобиль") Тогда
		ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия.Вставить("НеИзменятьСтавкуНДС");
	КонецЕсли;
	
	Документы.СчетНаОплатуЗаАвтомобили.ОрганизацияПриИзменении(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Проверим заполненность ТЧ Автомобили
	Для Каждого СтрокаАвтомобиля Из Автомобили Цикл
		Если ПустаяСтрока(СтрокаАвтомобиля.ИдентификаторАвтомобиля) Тогда
			СтрокаАвтомобиля.ИдентификаторАвтомобиля = Новый УникальныйИдентификатор();
		КонецЕсли;
	КонецЦикла;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка корректности типа цен.
	Если ТипЦен.Рассчитывается Тогда
		
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Использование расчетных типов цен запрещено.'"), ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Реализация автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РеализацияАвтомобилей(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РеализацияАвтомобилей()

// Производит заполнение объекта на основании документа "Заказ на автомобиль"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаАвтомобиль(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, "Автомобили") Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.СчетНаПредоплатуЗаАвтомобили;
	ЭтотОбъект.Автомобили.Очистить();
	
	СтрокаАвтомобиля = ЭтотОбъект.Автомобили.Добавить();
	СтрокаАвтомобиля.ИдентификаторАвтомобиля = Новый УникальныйИдентификатор;
	АвтомобильЗаказа = ДанныеЗаполнения.Автомобиль;
	
	Если НЕ ЗначениеЗаполнено(АвтомобильЗаказа) Тогда
		СтрокаАвтомобиля.Автомобиль          = ДанныеЗаполнения.Модель;
		СтрокаАвтомобиля.ВариантКомплектации = ДанныеЗаполнения.ВариантКомплектации;
	Иначе
		СтрокаАвтомобиля.Автомобиль          = АвтомобильЗаказа;
		СтрокаАвтомобиля.ВариантКомплектации = АвтомобильЗаказа.ВариантКомплектации;
	КонецЕсли;
	
	СтрокаАвтомобиля.Количество  = 1;
	СтрокаАвтомобиля.Цена        = ДанныеЗаполнения.ЦенаАвтомобиля + ДанныеЗаполнения.Опции.Итог("Сумма");
	СтрокаАвтомобиля.Сумма       = СтрокаАвтомобиля.Цена;
	СтрокаАвтомобиля.СтавкаНДС   = ДанныеЗаполнения.СтавкаНДСНаАвтомобиль;
	Если ЗначениеЗаполнено(АвтомобильЗаказа)
		И АвтомобилиСервер.СебестоимостьАвтомобиляПриобретенногоУФизЛица(АвтомобильЗаказа, ЭтотОбъект) <> 0 Тогда
		
		СтрокаАвтомобиля.СтавкаНДС = РаботаСоСтавкамиНДССервер.РасчетнаяСтавкаНДСПоОбычной(СтрокаАвтомобиля.СтавкаНДС);
		
	КонецЕсли;
	СтрокаАвтомобиля.СуммаНДС    = ДанныеЗаполнения.СуммаНДСНаАвтомобиль+ДанныеЗаполнения.Опции.Итог("СуммаНДС");
	СтрокаАвтомобиля.СуммаСкидки = ДанныеЗаполнения.СкидкиИМаркетинговыеПрограммы.Итог("Значение")
		+ ДанныеЗаполнения.СуммаРучнойСкидкиНаАвтомобиль;
	СтрокаАвтомобиля.СуммаВсего  = ДанныеЗаполнения.СуммаВсегоНаАвтомобиль + ДанныеЗаполнения.Опции.Итог("СуммаВсего");
	СтрокаАвтомобиля.ЗаказНаАвтомобиль = ДанныеЗаполнения;
	СтрокаАвтомобиля.СебестоимостьАвтомобиля = ДанныеЗаполнения.СебестоимостьАвтомобиля;
	СтрокаАвтомобиля.Комментарий = "Предоплата по "
		+ ДанныеЗаполнения.Метаданные().Синоним
		+ " № " + Строка(ДанныеЗаполнения.Номер)
		+ " от "
		+ Формат(ДанныеЗаполнения.Дата, "ДЛФ=Д");

	Для каждого СтрокаТоваров Из ЭтотОбъект.Товары Цикл
		СтрокаТоваров.ИдентификаторАвтомобиля = СтрокаАвтомобиля.ИдентификаторАвтомобиля;
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаАвтомобиль()

// Производит заполнение объекта на основании документа "Оптовый заказ клиента на автомобили"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ОптовыйЗаказКлиентаНаАвтомобили(ДанныеЗаполнения,
                                                            ТекстЗаполнения = "",
                                                            СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	
	Если Не ПродолжитьВыполнение Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
