// Модуль менеджера документа "Счет на оплату за автомобиль"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.ШаблоныСообщений
// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	// Онлайн-оплата
	ОнлайнОплата.ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры);
	// Конец Онлайн-оплата
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	// Онлайн-оплата
	ОнлайнОплата.ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры);
	// Конец Онлайн-оплата
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ШаблоныСообщений

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Автомобили.Итог("СуммаВсего") + Объект.Товары.Итог("СуммаВсего"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС"          , Объект.Автомобили.Итог("СуммаНДС") + Объект.Товары.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаАвтомобилей"  , Объект.Автомобили.Итог("СуммаВсего"));
	ИтогиОперации.Вставить("СуммаОборудования" , Объект.Товары.Итог("СуммаВсего"));
	ИтогиОперации.Вставить("СуммаБезНДС"       , ИтогиОперации.СуммаДокумента - ИтогиОперации.СуммаНДС);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используеся в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость выводв только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возращаемая сторка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", 
				Объединить = Ложь, ТолькоОсновныеКонтакты = Истина) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции // ПолучитьТекстЗапросаПоКонтактам()

// устаналвивает ставку НДС на таблицу автомобилей
//
Процедура УстановитьСтавкуНДСАвтомобилей(Объект, ПараметрыДействия)
	
	ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата);
	ОсвобожденОтНДС = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ОсвобожденОтНДС", Ложь)
					  ИЛИ ПараметрыНДС.ОсвобожденОтНДС;
	
	// определяем ставку
	СтавкаНДС = ?(ОсвобожденОтНДС, Справочники.СтавкиНДС.БезНДС, ПараметрыНДС.ОсновнаяСтавка);
	
	Если НЕ ОсвобожденОтНДС Тогда
		
		СебестоимостьАвтомобилей = АвтомобилиСервер.СебестоимостьАвтомобилейПриобретенныхУФизЛиц(
			Объект.Автомобили.Выгрузить().ВыгрузитьКолонку("Автомобиль"), Объект);
		
		Для Каждого Строка Из Объект.Автомобили Цикл
			СтавкаНДС = ?(ЗначениеЗаполнено(СебестоимостьАвтомобилей.Получить(Строка.Автомобиль)),
				РаботаСоСтавкамиНДССервер.РасчетнаяСтавкаНДСПоОбычной(СтавкаНДС),
				СтавкаНДС);
			
			Строка.СтавкаНДС = СтавкаНДС;
			АвтомобилиСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
		КонецЦикла;
		
	Иначе
		
		СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
		Для Каждого Строка Из Объект.Автомобили Цикл
			Строка.СтавкаНДС = СтавкаНДС;
			АвтомобилиСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Функция ЦенаАвтомобиляВЗаказе(Заказ)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказНаАвтомобиль.ЦенаАвтомобиля КАК Значение
		|ИЗ
		|	Документ.ЗаказНаАвтомобиль КАК ЗаказНаАвтомобиль
		|ГДЕ
		|	ЗаказНаАвтомобиль.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ЗаказНаАвтомобильОпции.Сумма), 0) КАК Значение
		|ИЗ
		|	Документ.ЗаказНаАвтомобиль.Опции КАК ЗаказНаАвтомобильОпции
		|ГДЕ
		|	ЗаказНаАвтомобильОпции.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ЗаказНаАвтомобильСкидкиИМаркетинговыеПрограммы.Значение), 0) + ЗаказНаАвтомобильСкидкиИМаркетинговыеПрограммы.Ссылка.СуммаРучнойСкидкиНаАвтомобиль КАК Значение
		|ИЗ
		|	Документ.ЗаказНаАвтомобиль.СкидкиИМаркетинговыеПрограммы КАК ЗаказНаАвтомобильСкидкиИМаркетинговыеПрограммы
		|ГДЕ
		|	ЗаказНаАвтомобильСкидкиИМаркетинговыеПрограммы.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказНаАвтомобильСкидкиИМаркетинговыеПрограммы.Ссылка.СуммаРучнойСкидкиНаАвтомобиль");
	Запрос.УстановитьПараметр("Ссылка", Заказ);
	
	РезультатыЗапрос = Запрос.ВыполнитьПакет();
	Цена = 0;
	Для Сч = 0 По 1 Цикл
		Если НЕ РезультатыЗапрос[Сч].Пустой() Тогда
			Выборка = РезультатыЗапрос[Сч].Выбрать();
			Выборка.Следующий();
			Цена = Цена + Выборка.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Скидка = 0;
	Если НЕ РезультатыЗапрос[2].Пустой() Тогда
		Выборка = РезультатыЗапрос[2].Выбрать();
		Выборка.Следующий();
		
		Скидка = Выборка.Значение;
	КонецЕсли;
	
	Возврат Новый Структура("Цена,Скидка", Цена, Скидка);
	
КонецФункции

Функция ЦенаАвтомобиляВРеализации(Реализация, Автомобиль)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕстьNull(СУММА(РеализацияАвтомобилейАвтомобили.Цена), 0) КАК Цена,
	|	ЕстьNull(СУММА(РеализацияАвтомобилейАвтомобили.СуммаСкидки), 0) КАК СуммаСкидки
	|ИЗ
	|	Документ.РеализацияАвтомобилей.Автомобили КАК РеализацияАвтомобилейАвтомобили
	|ГДЕ
	|	РеализацияАвтомобилейАвтомобили.Ссылка = &Ссылка
	|	И РеализацияАвтомобилейАвтомобили.Автомобиль = &Автомобиль");
	Запрос.УстановитьПараметр("Ссылка", Реализация);
	Запрос.УстановитьПараметр("Автомобиль", Автомобиль);
	
	Результат = Запрос.Выполнить();
	Цена = 0; 
	Скидка = 0;
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Цена = Выборка.Цена;
		Скидка = Выборка.СуммаСкидки;
	КонецЕсли;
	
	Возврат Новый Структура("Цена,Скидка", Цена, Скидка);
	
КонецФункции

Процедура ЗаполнитьПараметрыРасчетаНДС(Объект, ПараметрыДействия, Строка, ТочкаВхода)
	
	Себестоимость = АвтомобилиСервер.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Строка.Автомобиль, Объект);
	
	Если Объект.ДокументОснование <> Неопределено И Себестоимость > 0 Тогда
		
		Сумма = 0;
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаАвтомобиль") Тогда
			Сумма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование,
				ТочкаВхода + ?(ТочкаВхода = "СуммаВсего", "НаАвтомобиль", "Автомобиля"));
		Иначе
			СтрокаТЧ = Объект.ДокументОснование.Автомобили.НайтиСтроки(Новый Структура("Автомобиль", Строка.Автомобиль));
			Если СтрокаТЧ.Количество() > 0 Тогда
				Сумма = СтрокаТЧ[0][ТочкаВхода];
			КонецЕсли;
		КонецЕсли;
		
		Процент = Строка[ТочкаВхода] / ?(Сумма = 0, 1, Сумма);
		ПараметрыДействия.Вставить("Себестоимость", Себестоимость * ?(Процент < 1, Процент, 1));
		
	КонецЕсли;
	
КонецПроцедуры

// Установка банковского счета в соответствии с организацией
//
Процедура УстановитьБанковскийСчет(Объект, ПараметрыДействия)
	
	Если НЕ Объект.Организация.Пустая() Тогда
		Результат = ОбработкаСобытийДокументаСервер.ПроверитьКорректностьБанковскогоСчета(Объект.РасчетныйСчетОрганизации,
													Объект.Организация, Объект.ПодразделениеКомпании);
		Если НЕ ЗначениеЗаполнено(Объект.РасчетныйСчетОрганизации) ИЛИ НЕ Результат Тогда
			Объект.РасчетныйСчетОрганизации = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Объект.Организация);
		КонецЕсли;
	Иначе
		Объект.РасчетныйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
	
КонецПроцедуры // УстановитьБанковскийСчет()

// Возвращает перечень нередактируемых реквизитов при открытии общей формы "Параметры документа".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение неотображаемых реквизитов.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
Функция ПолучитьНеотображаемыеРеквизиты(Объект) Экспорт
	
	НеотображаемыеРеквизиты = Новый Массив;
	НеотображаемыеРеквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		"СкидкаНаценка,БлокироватьПерерасчетСкидок",
		","
	);
	
	Возврат НеотображаемыеРеквизиты;
	
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("РасчетныйСчетОрганизации");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	ОбязательныеРеквизиты.Добавить("Заказчик");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Автомобили");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Автомобили.Автомобиль");
	ОбязательныеРеквизиты.Добавить("Автомобили.ИдентификаторАвтомобиля");
	ОбязательныеРеквизиты.Добавить("Автомобили.Количество");
	
	ОбязательныеРеквизиты.Добавить("Товары.ИдентификаторАвтомобиля");
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("ИдентификаторАвтомобиля");
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	
	// Уникальные поля таблицы автомобилей
	УникальныеАвтомобили = Новый Массив();
	УникальныеАвтомобили.Добавить("Автомобиль");
	УникальныеАвтомобили.Добавить("ВариантКомплектации");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Товары"     , УникальныеТовары);
	УникальныеРеквизиты.Вставить("Автомобили" , УникальныеАвтомобили);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	КонтролируемыеРеквизиты.Вставить("РасчетныйСчетОрганизации");
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Автомобили.Количество() > 0);
	ПараметрыДействия.Вставить("КлючСтроки", "ИдентификаторАвтомобиля");
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Производит расчет суммы скидки/наценки по документу в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция РассчитатьСуммуСкидкиНаценки(Объект) Экспорт
	
	Объект.СуммаСкидкиНаценки =
		Объект.Автомобили.Итог("СуммаСкидки")
		+ Объект.Товары.Итог("СуммаСкидки")
		+ Объект.Товары.Итог("СуммаСкидкиСтроки");
	
КонецФункции // РассчитатьСуммуСкидкиНаценки()

// Дополняет параметры действия себестоимостью автомобиля приобретенного у физ. лица
//
// Параметры:
//  ПараметрыДействия - Структура - Изначальная структура параметров действия.
//  Объект - ДокументОбъект.СчетНаОплатуЗаАвтомобили, ДанныеФормыСтруктура - Объект,
//    для которого выполняется обработка события.
//  Автомобиль - СправочникСсылка.Автомобили - Автомобиль для которого необходимо получать себестоимость.
//
// Возвращаемое значение:
//  Структура, с добавленым ключом "Себестоимость".
//
Функция ПараметрыДействияССебестоимостью(ПараметрыДействия, Объект, Автомобиль, СебестоимостьАвтомобиля=Неопределено) Экспорт
	
	Если ТипЗнч(Автомобиль) <> Тип("СправочникСсылка.Автомобили") Тогда
		Возврат ПараметрыДействия;
	КонецЕсли;
	
	ПараметрыДействия
		.Вставить("Себестоимость", АвтомобилиСервер.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Автомобиль, Объект));
	
	Если НЕ СебестоимостьАвтомобиля = Неопределено Тогда
		СебестоимостьАвтомобиля = ПараметрыДействия.Себестоимость;
	КонецЕсли;
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПараметрыДействияССебестоимостью()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, 
						ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.ПерезаполнитьЦеныТабличныхЧастей(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	// Установим ставку НДС для автомобилей
	УстановитьСтавкуНДСАвтомобилей(Объект, ПараметрыДействия);
	
	// Установим банковский счет
	УстановитьБанковскийСчет(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
	// Установим ставку НДС для автомобилей
	Если НЕ ПараметрыДействия.Свойство("НеИзменятьСтавкуНДС") Тогда
		УстановитьСтавкуНДСАвтомобилей(Объект, ПараметрыДействия);
	КонецЕсли;
	
	// Установим банковский счет
	УстановитьБанковскийСчет(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	// Заполним заказчика если не указан
	Если НЕ ЗначениеЗаполнено(Объект.Заказчик) И (ЗначениеЗаполнено(Объект.Контрагент)) И (Объект.Заказчик <> Объект.Контрагент) Тогда
		Объект.Заказчик = Объект.Контрагент;
		ЗаказчикПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЗаказчикПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если (ЗначениеЗаполнено(Объект.Заказчик)) И (НЕ ЗначениеЗаполнено(Объект.Контрагент)) Тогда
		Объект.Контрагент = Объект.Заказчик;
		КонтрагентПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Карточка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КарточкаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Зарезервировано
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "СкидкаНаценка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Для Каждого Строка Из Объект.Товары Цикл
		Строка.ЗначениеСкидкиШапкиИзменено = Ложь;
	КонецЦикла;
	
	ОбработкаРеквизитовДокументаСервер.СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтомобили

// Обработчик события возникающего при изменении данных реквизита "Автомобиль"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиАвтомобильПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПараметрыДействияССебестоимостью(
		ПолучитьПараметрыДействия(Объект, ПараметрыДействия), Объект, Строка.Автомобиль, Строка.СебестоимостьАвтомобиля);
	
	ОбработкаТабличнойЧастиАвтомобили.АвтомобильПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
	// заполним цену в соотвестви с документом основание
	Если ТипЗнч(Строка.Автомобиль) = Тип("СправочникСсылка.Автомобили") И НЕ Строка.Автомобиль.Пустая() Тогда
		Цена = 0; 
		Скидка = 0;
		
		ТипОснования = ТипЗнч(Объект.ДокументОснование);
		Если ТипОснования = Тип("ДокументСсылка.ЗаказНаАвтомобиль") Тогда
			ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Объект.ДокументОснование,
				"Автомобиль,ТипЦен,ВалютаДокумента,КурсДокумента"
			);
			
			Если Строка.Автомобиль = ДанныеОснования.Автомобиль И Объект.ТипЦен = ДанныеОснования.ТипЦен Тогда
				СуммовыеПоказателиДокумента = ЦенаАвтомобиляВЗаказе(Объект.ДокументОснование);
			
				Цена = СуммовыеПоказателиДокумента.Цена;
				Скидка = СуммовыеПоказателиДокумента.Скидка;
			КонецЕсли;
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияАвтомобилей") Тогда
			ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Объект.ДокументОснование,
				"ТипЦен,ВалютаДокумента,КурсДокумента"
			);
			
			Если Объект.ТипЦен = ДанныеОснования.ТипЦен Тогда
				СуммовыеПоказателиДокумента = ЦенаАвтомобиляВРеализации(Объект.ДокументОснование, Строка.Автомобиль);
				
				Цена = СуммовыеПоказателиДокумента.Цена;
				Скидка = СуммовыеПоказателиДокумента.Скидка;
			КонецЕсли;
		КонецЕсли;
		
		Если Цена <> 0 Тогда
			Строка.Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				Цена,
				ДанныеОснования.ВалютаДокумента,
				ДанныеОснования.КурсДокумента,
				Объект.ВалютаДокумента,
				Объект.КурсДокумента
			);
			
			Строка.СуммаСкидки = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				Скидка,
				ДанныеОснования.ВалютаДокумента,
				ДанныеОснования.КурсДокумента,
				Объект.ВалютаДокумента,
				Объект.КурсДокумента
			);
		КонецЕсли;
		
		АвтомобилиЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
		
	КонецЕсли;
	
	Строка.ЭтоМодель = (ТипЗнч(Строка.Автомобиль) = Тип("СправочникСсылка.Модели"));
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Вариант комплектации"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиВариантКомплектацииПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	НаМомент = ?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Ссылка);
	Строка.Цена = ЦенообразованиеСервер.ПолучитьЦенуАвтомобиля(Объект.ТипЦен, Строка.Автомобиль, Строка.ВариантКомплектации,
		НаМомент, Объект.ВалютаДокумента, Объект.КурсДокумента);
		
	АвтомобилиЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
		
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПараметрыДействияССебестоимостью(
		ПолучитьПараметрыДействия(Объект, ПараметрыДействия), Объект, Строка.Автомобиль, Строка.СебестоимостьАвтомобиля);
	ЗаполнитьПараметрыРасчетаНДС(Объект, ПараметрыДействия, Строка, "Цена");
	ОбработкаТабличнойЧастиАвтомобили.ЦенаПриИзменении(ОБъект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	
	ПараметрыДействия = ПараметрыДействияССебестоимостью(
		ПолучитьПараметрыДействия(Объект, ПараметрыДействия), Объект, Строка.Автомобиль, Строка.СебестоимостьАвтомобиля);
	
	ЗаполнитьПараметрыРасчетаНДС(Объект, ПараметрыДействия, Строка, "Цена");
	
	ОбработкаТабличнойЧастиАвтомобили.СуммаПриИзменении(ОБъект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПараметрыДействияССебестоимостью(
		ПолучитьПараметрыДействия(Объект, ПараметрыДействия), Объект, Строка.Автомобиль, Строка.СебестоимостьАвтомобиля);
	
	ЗаполнитьПараметрыРасчетаНДС(Объект, ПараметрыДействия, Строка, "СуммаВсего");
	
	ОбработкаТабличнойЧастиАвтомобили.СуммаВсегоПриИзменении(ОБъект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПараметрыДействияССебестоимостью(
		ПолучитьПараметрыДействия(Объект, ПараметрыДействия), Объект, Строка.Автомобиль, Строка.СебестоимостьАвтомобиля);
	
	ЗаполнитьПараметрыРасчетаНДС(Объект, ПараметрыДействия, Строка, "Цена");
	
	ОбработкаТабличнойЧастиАвтомобили.СтавкаНДСПриИзменении(ОБъект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество"
// Параметры
//  Объект            - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка            - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура              - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаТабличнойЧастиАвтомобили.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // АвтомобилиКоличествоПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дельнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	// А вот тут мы загрузим те цены, которые указаны в регистре комплектации
	// Найдем строку автомобиля.
	СтрокиАвтомобилей = Объект.Автомобили.НайтиСтроки(Новый Структура("ИдентификаторАвтомобиля", Строка.ИдентификаторАвтомобиля));
	Если СтрокиАвтомобилей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаАвтомобиля = СтрокиАвтомобилей[0];
	
	// получим остатки
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(КомплектацияАвтомобилейОстатки.КоличествоОстаток) КАК Количество,
	|	СУММА(КомплектацияАвтомобилейОстатки.СуммаПродажиУпрОстаток) КАК СуммаПродажиУпр
	|ИЗ
	|	РегистрНакопления.КомплектацияАвтомобилей.Остатки(
	|		&НаДату,
	|		Автомобиль = &Автомобиль
	|		    И Номенклатура = &Номенклатура
	|		    И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры) КАК КомплектацияАвтомобилейОстатки";
	Запрос.УстановитьПараметр("НаДату"                     , ?(Объект.Ссылка.Пустая(), 
			Новый МоментВремени(КонецДня(Объект.Дата)), 
			Новый Граница(Объект.Дата, ВидГраницы.Исключая)));
	Запрос.УстановитьПараметр("Автомобиль"                 , СтрокаАвтомобиля.Автомобиль);
	Запрос.УстановитьПараметр("Номенклатура"               , Строка.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры" , Строка.ХарактеристикаНоменклатуры);
	
	ОстаткиОборудования = Запрос.Выполнить().Выгрузить();
	
	Строка.Количество = ОстаткиОборудования.Итог("Количество");
	
	Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
		Строка.Количество = 0;
	КонецЕсли;
	
	ОстатокСуммы = ОстаткиОборудования.Итог("СуммаПродажиУпр");
	Если НЕ ЗначениеЗаполнено(ОстатокСуммы) Тогда
		ОстатокСуммы = 0;
	КонецЕсли;
	
	// получим курс валюты упр
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить(); 
	Если НЕ ЗначениеЗаполнено(Объект.КурсВалютыУпр) Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, Объект.Дата);
		КурсУпр        = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	Иначе
		КурсУпр = Объект.КурсВалютыУпр;
	КонецЕсли;
	ОстатокСуммы = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ОстатокСуммы, ВалютаУпр, КурсУпр, Объект.ВалютаДокумента, Объект.КурсДокумента);
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС = Истина;
	Иначе
		ЦенаВключаетНДС = Объект.ТипЦен.ЦенаВключаетНДС;
	КонецЕсли;
	
	Если НЕ ЦенаВключаетНДС Тогда
		// НДС в цену не включен
		ОстатокСуммы = (100 * ОстатокСуммы) / (100 + Строка.СтавкаНДС.Ставка);
	КонецЕсли;
	
	Строка.Сумма = ОстатокСуммы;
	ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество базовое" в таблице "Товары".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоБазовоеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Процент наценки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентНаценкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПроцентНаценкиПриИзменении(Объект, Строка, ПараметрыДействия);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры // ТоварыПроцентНаценкиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиСтрокиПриИзменении(Объект, Строка);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиПриИзменении(Объект, Строка);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Скидка на товар" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ТоварыПроцентСкидкиПриИзменении(Объект, Строка);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПроцентСкидкиСтрокиПриИзменении(Объект, Строка);
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// расчет скидок по строке
Процедура РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти = "Товары", СкидкаШапкиАбсолютная = Ложь) Экспорт
	
	СкидкиНаценкиСервер.РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти, СкидкаШапкиАбсолютная);
	
КонецПроцедуры // РассчитатьСкидкиСтроки()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Автомобили");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "СчетНаОплатуЗаАвтомобили");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Автомобили");
	КонецЕсли;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "АвтомобилиПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить по документу-основанию'");
	Команда.Идентификатор	= "АвтомобилиЗаполнитьПоДокументуОснование";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти 			= "Автомобили";
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением 	= Ложь;
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьПоДокументуОснование.Видимость",   Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьПоДокументуОснование.Доступность", Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по документу основаниию
//
Функция АвтомобилиЗаполнитьПоДокументуОснование(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не заполнен документ основание.'"), Ссылка);
	Иначе
		ПараметрыДействия.Вставить("ТребуетсяЗаполнитьНаОсновании", Истина);
		ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецФункции // АвтомобилиЗаполнитьПоДокументуОснование()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.СчетНаОплатуЗаАвтомобили",
		"СчетНаОплатуЗаАвтомобили",
		НСтр("ru = 'Счет на оплату за автомобили'"),
		СсылкаНаДокумент
	);

КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетНаОплатуЗаАвтомобили") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СчетНаОплатуЗаАвтомобили",
			НСтр("ru = 'Счет на оплату за автомобили'"),
			ПечатьСчетНаОплатуЗаАвтомобили(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
		);
	КонецЕсли;
	
КонецПроцедуры // Печать()

Функция ПечатьСчетНаОплатуЗаАвтомобили(МассивОбъектов, ОбъектыПечати, ПараметрыПечати = Неопределено)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетНаОплатуЗаАвтомобили.ПФ_MXL_СчетНаОплатуЗаАвтомобили");
		
		// Заголовок счета
		ЗаполнитьЗаголовокСчета(ТабличныйДокумент, Макет, Документ);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетНаОплатуЗаАвтомобили.ПФ_MXL_СчетНаОплатуЗаАвтомобили");
		
		МассивТабличныеЧасти = Новый Массив;
		МассивТабличныеЧасти.Добавить("Товары");
		МассивТабличныеЧасти.Добавить("Автомобили");
		
		УбратьОбластьСкидки(Макет, Документ);
		
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");;
		ОбластьДокОснование    = Макет.ПолучитьОбласть("ДокументОснование");
		ОбластьДействителенДо  = Макет.ПолучитьОбласть("ДействителенДо");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		ОбластьПодвалПодписанты = Макет.ПолучитьОбласть("ПодвалПодписанты");
		
		// вывод заголовка документа
		ОбластьЗаголовок = ЗаполнитьЗаголовокДокумента(Макет, Документ);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// вывод документа основания
		Если ЗначениеЗаполнено(Документ.ДокументОснование) Тогда
			ОбластьДокОснование.Параметры.ДокументОснованиеПредставление =
				УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ.ДокументОснование);
			ОбластьДокОснование.Параметры.ДокументОснование = Документ.ДокументОснование;
			ТабличныйДокумент.Вывести(ОбластьДокОснование);
		КонецЕсли;
		
		// вывод срока действия счета
		Если ЗначениеЗаполнено(Документ.ДействителенДо) Тогда
			ОбластьДействителенДо.Параметры.ДействителенДо = Формат(Документ.ДействителенДо, "ДФ = dd.MM.yyyy");
			ТабличныйДокумент.Вывести(ОбластьДействителенДо);
		КонецЕсли; 
		
		// заполняем заголовок колонки НДС по типу цен
		Параметры = Новый Структура("НДС");
		Параметры.НДС = "НДС";
		Если Документ.ТипЦен.ЦенаВключаетНДС
			И НЕ ПолучитьПараметрыПлательщикаНДС(Документ.Организация, Документ.ПодразделениеКомпании, Документ.Дата).ОсвобожденОтНДС Тогда	// Если НДС включен
			Параметры.НДС = НСтр("ru = 'в т.ч. НДС'");
		КонецЕсли;
		ОбластьШапкаТаблицы.Параметры.Заполнить(Параметры);
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);

		// готовим шапку
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура;
		СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
		СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
		СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
		СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// подготовим дополнительную таблицу
		ТаблицаТоваровПоАвтомобилям = Документ.Товары.Выгрузить();
		ТаблицаТоваровПоАвтомобилям.Свернуть("ИдентификаторАвтомобиля", "Сумма,СуммаНДС,СуммаСкидки,СуммаВсего");
		
		// перебор строк
		ВыборкаТабличнойЧасти = Документ.Автомобили.Выгрузить();
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			// предварительная обработка строки ТЧ
			СтрокаТабличнойЧастиТовары = ТаблицаТоваровПоАвтомобилям.Найти(СтрокаТЧ.ИдентификаторАвтомобиля,
				"ИдентификаторАвтомобиля");
			Если СтрокаТабличнойЧастиТовары <> Неопределено Тогда
				СтрокаТЧ.Сумма		= СтрокаТЧ.Сумма		+ СтрокаТабличнойЧастиТовары.Сумма;
				СтрокаТЧ.СуммаНДС	= СтрокаТЧ.СуммаНДС		+ СтрокаТабличнойЧастиТовары.СуммаНДС;
				СтрокаТЧ.СуммаВсего	= СтрокаТЧ.СуммаВсего	+ СтрокаТабличнойЧастиТовары.СуммаВсего;
			КонецЕсли;
			
			// заполняем данные строки
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхСтрокиДляАвтомобилей(СтрокаТЧ, Документ);
			СтрокаКомментарий = СокрЛП(СтрокаТЧ.Комментарий);
			Если НЕ ПустаяСтрока(СтрокаКомментарий) Тогда
				СтруктураСтроки.АвтомобильНаименование = СокрЛП(СтрокаКомментарий);
			КонецЕсли;     
			СистемаНалогообложения 	= ПолучитьЗначениеУчетнойПолитики("СистемаНалогообложения", Документ.Организация);
			УпрощеннаяСистема 		= СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная;
			Если УпрощеннаяСистема И СтрокаТЧ.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
				СтруктураСтроки.ВСтавить("СуммаНДС", "Без НДС");	
			КонецЕсли;

			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьСтрока.Параметры.Заполнить(СтруктураСтроки);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Автомобили.Индекс(СтрокаТЧ) = Документ.Автомобили.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
				СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
				СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
				СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
				НомерСтраницыПред		  = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// итоги
		ОбластьПодвал.Параметры.ВалютаДокумента	 = Документ.ВалютаДокумента;
		СуммаВсего								 = ВыборкаТабличнойЧасти.Итог("СуммаВсего");
		ОбластьПодвал.Параметры.СуммаВсего		 = Формат(СуммаВсего, ФорматВыводаСуммы);
		НДСВсего								 = ВыборкаТабличнойЧасти.Итог("СуммаНДС");
		ОбластьПодвал.Параметры.НДСВсего		 = Формат(НДСВсего, ФорматВыводаСуммы);
		Если ВыборкаТабличнойЧасти.Итог("СуммаСкидки") > 0 Тогда
			СуммаСкидки = ВыборкаТабличнойЧасти.Итог("СуммаСкидки");
			
			ОбластьПодвал.Параметры.СкидкаВсего = Формат(СуммаСкидки, ФорматВыводаСуммы);
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьПодвал);

		ОбластьПодвалПодписанты.Параметры.СуммаПрописью = СтрШаблон(НСтр("ru = 'Всего наименований %1 на сумму %2'"),
			ВыборкаТабличнойЧасти.Количество(),
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, Документ.ВалютаДокумента));
		
		// Выводим представления и расшифровки подписей
		ДанныеРуководителя = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Руководитель", "Руководитель");
		ОбластьПодвалПодписанты.Параметры.Заполнить(ДанныеРуководителя);
		
		ДанныеБухгалтера = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ГлавныйБухгалтер", "ГлавныйБухгалтер");
		ОбластьПодвалПодписанты.Параметры.Заполнить(ДанныеБухгалтера);
		
		ТабличныйДокумент.Вывести(ОбластьПодвалПодписанты);

		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетНаОплатуЗаАвтомобили_СчетНаОплатуЗаАвтомобили";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьСчетНаОплатуЗаАвтомобили()

Процедура ЗаполнитьЗаголовокСчета(ТабличныйДокумент, Макет, Документ)
	
	Если УправлениеПечатьюПлатформа.ЕстьЛоготип(Документ.Организация, Документ.ПодразделениеКомпании) Тогда
		ОбластьЗаголовокСчета = Макет.ПолучитьОбласть("ЗаголовокСчетаСЛоготипом");
		УправлениеПечатьюПлатформа.
			ЗаполнитьЛоготип(ОбластьЗаголовокСчета, Документ.Организация, Документ.ПодразделениеКомпании);
	Иначе
		ОбластьЗаголовокСчета = Макет.ПолучитьОбласть("ЗаголовокСчета");
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовокСчета);
	
	ВалютаРег = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	Если (Документ.Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо
		ИЛИ Документ.Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель)
		И Не Документ.РасчетныйСчетОрганизации.Пустая()
		И Документ.ВалютаДокумента = ВалютаРег Тогда
		ОбластьОбразецЗаполненияСчета = Макет.ПолучитьОбласть("ОбразецЗаполненияСчетаQR");
		
		// Заполним картинку QR-кода
		ЕстьСуммаНДС = (Документ.Автомобили.Итог("СуммаНДС") > 0 ИЛИ Документ.Товары.Итог("СуммаНДС") > 0);
		УправлениеПечатьюПлатформа.ОбработатьQRКодОплаты(
			ОбластьОбразецЗаполненияСчета,
			Документ,
			ЕстьСуммаНДС);
	Иначе
		ОбластьОбразецЗаполненияСчета = Макет.ПолучитьОбласть("ОбразецЗаполненияСчета");
	КонецЕсли;
	
	ОбластьОбразецЗаполненияСчета.Параметры.БанкПолучателя = Символы.НПП + Документ.РасчетныйСчетОрганизации.Банк;
	ОбластьОбразецЗаполненияСчета.Параметры.БанкПолучателяПредставление = Документ.РасчетныйСчетОрганизации.Банк;
	ОбластьОбразецЗаполненияСчета.Параметры.БИКБанкаПолучателя = Символы.НПП
		+ СокрЛП(Документ.РасчетныйСчетОрганизации.Банк.Код);
	ОбластьОбразецЗаполненияСчета.Параметры.СчетБанкаПолучателя = Символы.НПП
		+ СокрЛП(Документ.РасчетныйСчетОрганизации.Банк.КоррСчет);
	ОбластьОбразецЗаполненияСчета.Параметры.ИНН = Символы.НПП + УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Организация, Новый Структура("ИНН"));
	
	ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
	ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
	ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
	ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
	ДополнительныеПараметры.НаДату = Документ.Дата;
	ОбластьОбразецЗаполненияСчета.Параметры.КПП = Символы.НПП
		+ УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, Новый Структура("КПП"), ДополнительныеПараметры);
	
	ОбластьОбразецЗаполненияСчета.Параметры.Получатель = Документ.Организация;
	ОбластьОбразецЗаполненияСчета.Параметры.ПолучательПредставление = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
		Документ.Организация, Документ.Дата);
	ОбластьОбразецЗаполненияСчета.Параметры.СчетПолучателя = Символы.НПП + СокрЛП(Документ.РасчетныйСчетОрганизации.НомерСчета);
	
	ТабличныйДокумент.Вывести(ОбластьОбразецЗаполненияСчета);
	
КонецПроцедуры

Функция ЗаполнитьЗаголовокДокумента(Макет, Документ)
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.Заполнить(Документ);
	ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
	ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	СтруктураПредставления = Новый Структура;
	СтруктураПредставления.Вставить("ИНН",              "ИНН ");
	СтруктураПредставления.Вставить("КПП",              "КПП ");
	СтруктураПредставления.Вставить("Наименование",     "");
	СтруктураПредставления.Вставить("АдресЮридический", "");
	СтруктураПредставления.Вставить("ТелефонРабочий",   "тел.: ");
	
	ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
	ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
	ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
	ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
	ДополнительныеПараметры.НаДату = Документ.Дата;
	ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Организация, СтруктураПредставления, ДополнительныеПараметры);
	
	ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
	ДополнительныеПараметры.НаДату = Документ.Дата;
	ОбластьЗаголовок.Параметры.ПредставлениеПокупателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Контрагент, СтруктураПредставления, ДополнительныеПараметры);
	
	ОбластьЗаголовок.Параметры.ПредставлениеДоговорВзаиморасчетов = Строка(Документ.ДоговорВзаиморасчетов);
	ОбластьЗаголовок.Параметры.ДоговорВзаиморасчетов = Документ.ДоговорВзаиморасчетов;
	
	// выведем или удалим ШК
	УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ);
	
	Возврат ОбластьЗаголовок;
	
КонецФункции

Процедура УбратьОбластьСкидки(Макет, Документ)
	
	Если Не (Документ.Автомобили.Итог("СуммаСкидки") = 0 И Документ.Товары.Итог("СуммаСкидки") = 0) Тогда
		Возврат;
	КонецЕсли;
	
	// Удалим область "Скидка"
	ОбластьСкидка = Макет.Область("Скидка | Строка");
	ОбластьШапка  = Макет.Область("Скидка | ШапкаТаблицы");
	ОбластьПодвал = Макет.Область("Скидка | Подвал");
	
	Сч = ОбластьСкидка.Право;
	ШиринаСкидки = ОбластьСкидка.ШиринаКолонки;
	ОбластьШапкаЛево = Неопределено;
	ОбластьСтрокаЛево = Неопределено;
	
	НачалоОтсчета = 2;
	
	Пока Сч > ОбластьСкидка.Право - НачалоОтсчета Цикл
		Разность = 1;
		ОбластьСтрокаПраво = Макет.Область(ОбластьСкидка.Верх, Сч, ОбластьСкидка.Низ, Сч);
		ОбластьШапкаПраво  = Макет.Область(ОбластьШапка.Низ, Сч, ОбластьШапка.Низ, Сч);
		ОбластьСтрокаЛево  = Макет.Область(ОбластьСкидка.Верх, Сч - Разность, ОбластьСкидка.Низ, Сч - Разность);
		ОбластьШапкаЛево   = Макет.Область(ОбластьШапка.Низ, Сч - Разность, ОбластьШапка.Низ, Сч - Разность);
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаПраво, ОбластьСтрокаЛево);
		ЗаполнитьЗначенияСвойств(ОбластьШапкаПраво, ОбластьШапкаЛево);
		Если ОбластьШапкаЛево.Параметр = Неопределено Тогда
			ОбластьШапкаПраво.Текст = ОбластьШапкаЛево.Текст;
		КонецЕсли;
		ОбластьСтрокаЛево.Очистить();
		ОбластьШапкаЛево.Очистить();
		Сч = Сч - Разность;
	КонецЦикла;
	ОбластьШапкаЛево.ШиринаКолонки  = ШиринаСкидки;
	ОбластьСтрокаЛево.ШиринаКолонки = ШиринаСкидки;
	
	НачалоОбласти = 4;
	Макет.Область(
		ОбластьШапка.Низ,
		ОбластьСкидка.Право - НачалоОбласти,
		ОбластьШапка.Низ,
		ОбластьСкидка.Право - НачалоОтсчета).Объединить();
	Макет.Область(
		ОбластьСтрокаЛево.Низ,
		ОбластьСкидка.Право - НачалоОбласти,
		ОбластьСтрокаЛево.Низ,
		ОбластьСкидка.Право - НачалоОтсчета).Объединить();
	НачалалоЛевойОбластиСкидки = 1;
	ОбластьПодвалСкидка = Макет.Область(
		ОбластьПодвал.Верх,
		ОбластьСкидка.Право - НачалалоЛевойОбластиСкидки,
		ОбластьПодвал.Верх,
		ОбластьСкидка.Право);
	ОбластьПодвалСкидка.Объединить();
	ОбластьПодвалСкидка.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	ОбластьПодвалСкидка.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	
	// Объединим, где есть ИтогоПоСтранице
	ОбластьИтогоПоСтранице = Макет.Области.Найти("ИтогоПоСтранице");
	Область = Макет.Область(
		ОбластьИтогоПоСтранице.Верх,
		ОбластьСкидка.Право - НачалалоЛевойОбластиСкидки,
		ОбластьИтогоПоСтранице.Верх,
		ОбластьСкидка.Право);
	Область.Объединить();
	ТолстаяГраница = 2;
	Область.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, ТолстаяГраница);
	Область.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, ТолстаяГраница);
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Выписка);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаРасходДС);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПланПоступленияДС);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РеализацияАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЧекНаОплату);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.СчетНаОплатуЗаАвтомобили);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли