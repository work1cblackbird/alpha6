// Модуль менеджера документа "Отчет прослеживаемые товары отчет об операциях"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используется в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость вывода только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возвращаемая строка, содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить = ЛОЖЬ, ТолькоОсновныеКонтакты = ИСТИНА) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

// Заполнение отчета по учетным данным с учетом параметров
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Процедура ЗаполнитьОтчет(Объект) Экспорт
	
	// Очистим табличные части
	Объект.Операции.Очистить();
	Объект.СписокРНПТ.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ПериодОтчета) Тогда
		// Не все параметры заполнены для получения данных
		Возврат;
	КонецЕсли;
	
	// Запрос на получение данных по регистру
	ТекстЗапроса = "ВЫБРАТЬ
	|	ОперацииПрослеживаемыхТоваровСрезПоследних.ОтчетностьОперации КАК ОтчетностьОперации,
	|	ОперацииПрослеживаемыхТоваровСрезПоследних.КодОперации КАК КодОперации,
	|	ОперацииПрослеживаемыхТоваровСрезПоследних.Документ КАК Документ,
	|	ОперацииПрослеживаемыхТоваровСрезПоследних.Контрагент КАК Контрагент,
	|	ОперацииПрослеживаемыхТоваровСрезПоследних.Контрагент.ИНН КАК КонтрагентИНН,
	|	ОперацииПрослеживаемыхТоваровСрезПоследних.Контрагент.КПП КАК КонтрагентКПП,
	|	ОперацииПрослеживаемыхТоваровСрезПоследних.Контрагент.ФормаСобственности КАК КонтрагентФормаСобственности,
	|	ОперацииПрослеживаемыхТоваровСрезПоследних.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	|	ОперацииПрослеживаемыхТоваровСрезПоследних.Контрагент.Наименование КАК КонтрагентНаименование,
	|	ОперацииПрослеживаемыхТоваровСрезПоследних.Контрагент.Фамилия КАК КонтрагентФамилия,
	|	ОперацииПрослеживаемыхТоваровСрезПоследних.Контрагент.Имя КАК КонтрагентИмя,
	|	ОперацииПрослеживаемыхТоваровСрезПоследних.Контрагент.Отчество КАК КонтрагентОтчество,
	|	ВЫБОР
	|		КОГДА ОперацииПрослеживаемыхТоваровСрезПоследних.Номенклатура ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ВЫРАЗИТЬ(ОперацииПрослеживаемыхТоваровСрезПоследних.Номенклатура КАК Справочник.Номенклатура).БазоваяЕдиницаИзмерения.Код
	|		ИНАЧЕ ""796""
	|	КОНЕЦ КАК КодЕдиницыИзмерения,
	|	ОперацииПрослеживаемыхТоваровСрезПоследних.РНПТ.Наименование КАК РНПТ,
	|	ОперацииПрослеживаемыхТоваровСрезПоследних.КоличествоПрослеживаемости КАК Количество,
	|	ОперацииПрослеживаемыхТоваровСрезПоследних.СуммаБезНДС КАК Сумма,
	|	ОперацииПрослеживаемыхТоваровСрезПоследних.ВидДокумента КАК ВидДокумента,
	|	ОперацииПрослеживаемыхТоваровСрезПоследних.НомерДокумента КАК НомерДокумента,
	|	ОперацииПрослеживаемыхТоваровСрезПоследних.ДатаДокумента КАК ДатаДокумента,
	|	ОперацииПрослеживаемыхТоваровСрезПоследних.Период КАК ДатаОперации
	|ИЗ
	|	РегистрСведений.ОперацииПрослеживаемыхТоваров.СрезПоследних(
	|			,
	|			Организация = &Организация
	|				И ПериодОтчета = &ПериодОтчета) КАК ОперацииПрослеживаемыхТоваровСрезПоследних
	|ИТОГИ ПО
	|	Документ,
	|	КодОперации";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ПериодОтчета", Объект.ПериодОтчета);
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаДокумента = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокумента.Следующий() Цикл
		
		ВыборкаОперации = ВыборкаДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаОперации.Следующий() Цикл
			
			// Вводим новую операцию
			ИдентификаторОперации = Новый УникальныйИдентификатор;
			ЭтоПерваяСтрока = Истина;
			ВыборкаРНПТ = ВыборкаОперации.Выбрать();
			
			Пока ВыборкаРНПТ.Следующий() Цикл
				
				Если ЭтоПерваяСтрока Тогда
					// Добавим операцию в документ
					НоваяСтрокаОперации = Объект.Операции.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаОперации, ВыборкаРНПТ);
					НоваяСтрокаОперации.ВидДокумента = Перечисления.ТипыДокументов.КодВидаДокумента(ВыборкаРНПТ.ВидДокумента);
					ЗаполнитьКонтрагентаОперации(НоваяСтрокаОперации, ВыборкаРНПТ);
					НоваяСтрокаОперации.ИдентификаторСтроки = ИдентификаторОперации;
					ЭтоПерваяСтрока = Ложь;
				КонецЕсли;
				
				НоваяСтрокаРНПТ = Объект.СписокРНПТ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаРНПТ, ВыборкаРНПТ);
				НоваяСтрокаРНПТ.ИдентификаторСтроки = ИдентификаторОперации;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКонтрагентаОперации(СтрокаОперации, ДанныеКонтрагента)
	
	// Заполняем данные контрагентов только юр. лиц и ИП
	ЭтоИП =
		(ДанныеКонтрагента.КонтрагентФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель);
	ЭтоЮрЛицо = (ДанныеКонтрагента.КонтрагентФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо);
	
	Если НЕ (ЭтоЮрЛицо ИЛИ ЭтоИП) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОперации.ИННКонтрагента = ДанныеКонтрагента.КонтрагентИНН;
	
	Если ЭтоЮрЛицо Тогда
		СтрокаОперации.НаименованиеКонтрагента =
			?(ЗначениеЗаполнено(ДанныеКонтрагента.КонтрагентНаименованиеПолное),
				ДанныеКонтрагента.КонтрагентНаименованиеПолное,
				ДанныеКонтрагента.КонтрагентНаименование);
		СтрокаОперации.КППКонтрагента = ДанныеКонтрагента.КонтрагентКПП;
	Иначе
		Если НЕ ПустаяСтрока(ДанныеКонтрагента.КонтрагентФамилия) Тогда
			НазваниеИП = Новый Массив;
			НазваниеИП.Добавить(ДанныеКонтрагента.КонтрагентФамилия);
			Если НЕ ПустаяСтрока(ДанныеКонтрагента.КонтрагентИмя) Тогда
				НазваниеИП.Добавить(ДанныеКонтрагента.КонтрагентИмя);
			КонецЕсли;
			Если НЕ ПустаяСтрока(ДанныеКонтрагента.КонтрагентОтчество) Тогда
				НазваниеИП.Добавить(ДанныеКонтрагента.КонтрагентОтчество);
			КонецЕсли;
			НазваниеКонтрагента = СтрСоединить(НазваниеИП, " ");
		Иначе
			НазваниеКонтрагента =
				?(ЗначениеЗаполнено(ДанныеКонтрагента.КонтрагентНаименованиеПолное),
					ДанныеКонтрагента.КонтрагентНаименованиеПолное,
					ДанныеКонтрагента.КонтрагентНаименование);
		КонецЕсли;
		СтрокаОперации.НаименованиеКонтрагента = НазваниеКонтрагента;
	КонецЕсли;
	
КонецПроцедуры

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ПериодОтчета");
	ОбязательныеРеквизиты.Добавить("Состояние");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти=Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Операции.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ОтчетПрослеживаемыеТоварыОтчетОбОперациях",
		"ОтчетПрослеживаемыеТоварыОтчетОбОперациях",
		НСтр("ru = 'Отчет об операциях с товарами, подлежащими прослеживаемости'"),
		СсылкаНаДокумент
	);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик события формирования печатной формы.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - информация для заполнения письма при отправке печатной формы электронной почтой.
//                                     Содержит следующие поля:
//    ** Получатель - Строка, СписокЗначений, Массив - список получателей письма;
//    ** Тема - Строка - Тема письма,
//    ** Текст - Строка - Текст письма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОтчетПрослеживаемыеТоварыОтчетОбОперациях") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ОтчетПрослеживаемыеТоварыОтчетОбОперациях",
			НСтр("ru = 'Отчет об операциях с товарами, подлежащими прослеживаемости'"),
			ПечатьОтчетПрослеживаемыеТоварыОтчетОбОперациях(МассивОбъектов, ОбъектыПечати)
		);
		
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "Отчет об операциях с товарами, подлежащими прослеживаемости"
//
Функция ПечатьОтчетПрослеживаемыеТоварыОтчетОбОперациях(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати =
		"ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетПрослеживаемыеТоварыОтчетОбОперациях_ОтчетПрослеживаемыеТоварыОтчетОбОперациях";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы(
			"Документ.ОтчетПрослеживаемыеТоварыОтчетОбОперациях.ОтчетПрослеживаемыхТоваров"
		);
		
		// вывод заголовка документа
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		
		ОбластьШапка.Параметры.ОтчетГод = Формат(Документ.ПериодОтчета, "ДФ=гггг");;
		ОбластьШапка.Параметры.Период = "2" + Формат(Документ.ПериодОтчета, "ДФ=к");
		ОбластьШапка.Параметры.НомерКорректировки = Документ.НомерКорректировки;
		ОбластьШапка.Параметры.НалоговыйОрган = СокрЛП(Документ.Организация.КодИМНС);
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьШапка.Параметры.НаимОрг = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация,
			Новый Структура("Наименование", " "),
			ДополнительныеПараметры
		);
		ОбластьШапка.Параметры.ИНН = Документ.Организация.ИНН;
		ОбластьШапка.Параметры.КПП = УправлениеПечатьюПлатформа.ПолучитьКППДляПечати(
			Документ.Организация,
			Документ.ПодразделениеКомпании,
			Документ.Дата
		);
		
		Если Документ.Организация.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель Тогда
			ПоМесту = "116";
		Иначе
			ПоМесту = "214";
		КонецЕсли;
		ОбластьШапка.Параметры.ПоМесту = ПоМесту;
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		Операции = Документ.Операции.Выгрузить();
		СписокРНПТ = Документ.СписокРНПТ.Выгрузить();
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		
		Для Каждого ТекущаяОперация Из Операции Цикл
			
			// Находим строки с РНПТ для текущей операции и вводим их
			НайденныеСтроки = СписокРНПТ.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ТекущаяОперация.ИдентификаторСтроки));
			КоличествоРНПТ = 0;
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, ТекущаяОперация);
			Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
				
				ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, ТекущаяСтрока,, "НомерСтроки");
				
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
					ОбластьЗаголовок,, НомерСтраницы,, Документ);
				
				Если НомерСтраницы <> НомерСтраницыПред Тогда
					НомерСтраницыПред = НомерСтраницы;
					КоличествоРНПТ = 0;
				ИначеЕсли КоличествоРНПТ > 0 Тогда
					// Объединить строки
					СтрокаНачала = ТабличныйДокумент.ВысотаТаблицы - КоличествоРНПТ;
					СтрокаОкончания = ТабличныйДокумент.ВысотаТаблицы;
					Для НомерКолонки = 2 По 10 Цикл
						ТабличныйДокумент.Область(СтрокаНачала, НомерКолонки, СтрокаОкончания, НомерКолонки).Объединить();
					КонецЦикла;
				КонецЕсли;
				
				КоличествоРНПТ = КоличествоРНПТ + 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
		// Выведем подвал
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ДанныеРуководителя = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(
			Документ,
			"Руководитель",
			,
			Документ.Организация,
			Истина
		);
		Руководитель = ДанныеРуководителя.РуководительПредставление;
		
		Если ЗначениеЗаполнено(Руководитель) Тогда
			ОбластьПодвал.Параметры.ПрПодп = "1";
			МассивФИО = СтрРазделить(Руководитель, " ", Ложь);
			ОбластьПодвал.Параметры.ОргПодписантФамилия = СокрЛП(МассивФИО[0]);
			ОбластьПодвал.Параметры.ОргПодписантИмя = ?(МассивФИО.Количество() > 1, МассивФИО[1], "");
			Если МассивФИО.Количество() > 2 Тогда
				Отчество = "";
				Для Инд = 2 По МассивФИО.Количество() - 1 Цикл
					Отчество = Отчество + МассивФИО[Инд];
				КонецЦикла;
				ОбластьПодвал.Параметры.ОргПодписантОтчество = Отчество;
			КонецЕсли;
		КонецЕсли;
		
		ОбластьПодвал.Параметры.ДатаПодписи = Формат(Документ.Дата, "ДЛФ=D");
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		//ТабличныйДокумент.Вывести(ОбластьПодвал);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
