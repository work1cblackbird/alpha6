///////////////////////////////////////////////////////////////////////////////
// Модуль произвольной формы документа "Поступление дополнительных расходов" "Распределение дополнительных расходов по товарам".
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события возникающего на сервере при создании формы.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ХозОперация           = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ХозОперация");
	ХозОперацииАвтомобилей = Новый Массив;
	ХозОперацииАвтомобилей.Добавить(Справочники.ХозОперации.ПоступлениеДопРасходовНаАвтомобилиВнутреннее);
	ХозОперацииАвтомобилей.Добавить(Справочники.ХозОперации.ПоступлениеДопРасходовНаАвтомобили);
	РаспределениеУслугПоАвтомобилям = ХозОперацииАвтомобилей.Найти(ХозОперация) <> Неопределено;
	
	ТипЦен               = ПолучитьЗначениеПараметраСтруктуры(Параметры, "ТипЦен");
	РедактированиеУслуги = ПолучитьЗначениеПараметраСтруктуры(Параметры, "РедактированиеУслуги", Ложь);
	РежимРаспределения   = ПолучитьЗначениеПараметраСтруктуры(Параметры, "СпособРаспределения", 0);
	
	Отказ = Отказ ИЛИ НЕ ЗаполнитьОснованияИзПараметров(Параметры);
	ЗаполнитьУслугиИзПараметров(Параметры);
	ЗаполнитьРаспределениеРасходов(Параметры);
	ЗаполнитьПризнакНаДоходыИРасходы();
	ПолучитьДеревоРаспределенияРасходов();
	УстановкаРежимаРаспределения(Ложь);
	НастроитьФорму();
	
	
КонецПроцедуры // ПриСозданииНаСервере()

// Обработчик события возникающего на клиенте при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Отказ - Булево - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщегоНазначенияАвтосалонКлиент.РазвернутьДерево(ЭтотОбъект, "ДеревоНоменклатуры");
	
КонецПроцедуры  // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении реквизита "Режим распределения".
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаКлиенте
Процедура РежимРаспределенияПриИзменении(Элемент)
	
	УстановкаРежимаРаспределения();
	
	РазвернутьДеревоНоменклатуры();
	
КонецПроцедуры // РежимРаспределенияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "На доходы и расходы услуги" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура НаДоходыИРасходыУслугиПриИзмененииНаСервере()
	
	Если РедактированиеУслуги Тогда
		СтрокаУслуги = ТаблицаУслуг[0];
	Иначе
		СтрокаУслуги = ТаблицаУслуг.НайтиПоИдентификатору(Элементы.ТаблицаУслуг.ТекущаяСтрока);
	КонецЕсли;
	
	// Запомним данные редактирования
	ЗагрузитьДанныеРучногоРаспределенияСуммы(СтрокаУслуги);
	
	ПолучитьДеревоРаспределенияРасходов();
	
	// Заблокируем
	НаДоходыИРасходы = СтрокаУслуги.НаДоходыИРасходы;
	
	Если НаДоходыИРасходы Тогда
		СтрокаУслуги.НеРаспределено = 0;
		Если РедактированиеУслуги Тогда
			НеРаспределеноУслуги = 0;
		КонецЕсли;
	Иначе
		// Рассчитаем сумму сколько не распределено
		СуммаРаспределено = 0;
		
		Для Каждого ДокументОснование Из ДеревоНоменклатуры.ПолучитьЭлементы() Цикл
			Для Каждого ТекущаяСтрока Из ДокументОснование.ПолучитьЭлементы() Цикл
				СуммаРаспределено = СуммаРаспределено + ТекущаяСтрока.СуммаДопРасходов;
			КонецЦикла;
		КонецЦикла;
		
		СтрокаУслуги.НеРаспределено = СтрокаУслуги.Сумма - СуммаРаспределено;
		
		Если РедактированиеУслуги Тогда
			НеРаспределеноУслуги = СтрокаУслуги.Сумма - СуммаРаспределено;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДеревоНоменклатуры.ТолькоПросмотр = НаДоходыИРасходы;
	Элементы.ПодборНоменклатурыДокументовОснований.Доступность = НЕ НаДоходыИРасходы;
	Элементы.УдалитьНоменклатуру.Доступность = НЕ НаДоходыИРасходы;
	Элементы.ПодменюРаспределить.Доступность = НЕ НаДоходыИРасходы;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "На доходы и расходы услуги".
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаКлиенте
Процедура НаДоходыИРасходыУслугиПриИзменении(Элемент)
	
	ТаблицаУслуг[0].НаДоходыИРасходы = НаДоходыИРасходыУслуги;
	
	НаДоходыИРасходыУслугиПриИзмененииНаСервере();
	
	РазвернутьДеревоНоменклатуры();
	
КонецПроцедуры // НаДоходыИРасходыУслугиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "На доходы и расходы услуги".
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаКлиенте
Процедура ТаблицаУслугНаДоходыИРасходыПриИзменении(Элемент)
	
	Если АктивизацияУслуги Тогда
		ИзменениеДиР = Истина;
		АктивизацияУслуги = Ложь;
		ПолучитьДеревоРаспределенияРасходов();
	КонецЕсли;
	
	НаДоходыИРасходыУслугиПриИзмененииНаСервере();
	
	РазвернутьДеревоНоменклатуры();
	
КонецПроцедуры

// Обработчик события возникающего на клиенте при активизации строки списка.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ТаблицаУслугПриАктивизацииСтроки(Элемент)
	
	АктивизацияУслуги = Истина;
	
	// Производим подключение обработчика события выполняемого с задержкой
	ПодключитьОбработчикОжидания("Подключаемый_СписокПриАктивизацииСтрокиУслуг", 0.1, ИСТИНА);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "СуммаДопРасходов" в контексте сервера.
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаСервере
Процедура ДеревоНоменклатурыСуммаДопРасходовПриИзмененииНаСервере()
	
	ТекущиеДанныеНоменклатуры = ДеревоНоменклатуры.НайтиПоИдентификатору(Элементы.ДеревоНоменклатуры.ТекущаяСтрока);
	Если РедактированиеУслуги Тогда
		СтрокаУслуги = ТаблицаУслуг[0];
	Иначе
		СтрокаУслуги = ТаблицаУслуг.НайтиПоИдентификатору(Элементы.ТаблицаУслуг.ТекущаяСтрока);
	КонецЕсли;
	
	// Рассчитаем сумму сколько не распределено
	СуммаРаспределено = 0;
	
	Для Каждого ДокументОснование Из ДеревоНоменклатуры.ПолучитьЭлементы() Цикл
		Для Каждого ТекущаяСтрока Из ДокументОснование.ПолучитьЭлементы() Цикл
			СуммаРаспределено = СуммаРаспределено + ТекущаяСтрока.СуммаДопРасходов;
		КонецЦикла;
	КонецЦикла;
	
	СтрокаУслуги.НеРаспределено = СтрокаУслуги.Сумма - СуммаРаспределено;
	
	Если РедактированиеУслуги Тогда
		НеРаспределеноУслуги = СтрокаУслуги.Сумма - СуммаРаспределено;
	КонецЕсли;
	
	СтрокаУслугиСуммаБезНДС = СуммаРаспределено - (СтрокаУслуги.Сумма - СтрокаУслуги.СуммаБезНДС);
	
	// Рассчитаем сумму НДС
	СуммаБезНДСРаспределения = 0;
	Для Каждого ДокументОснование Из ДеревоНоменклатуры.ПолучитьЭлементы() Цикл
		Для Каждого ТекущаяСтрока Из ДокументОснование.ПолучитьЭлементы() Цикл
			ТекущаяСтрока.СуммаДопРасходовБезНДС = Окр(ТекущаяСтрока.СуммаДопРасходов / ?(СуммаРаспределено = 0, 1, СуммаРаспределено) * СтрокаУслугиСуммаБезНДС, 2);
			СуммаБезНДСРаспределения = СуммаБезНДСРаспределения + ТекущаяСтрока.СуммаДопРасходовБезНДС;
		КонецЦикла;
	КонецЦикла;
	
	Остаток = СтрокаУслугиСуммаБезНДС - СуммаБезНДСРаспределения;
	Если Остаток > 0 Тогда
		ТекущаяСтрока.СуммаДопРасходовБезНДС = ТекущаяСтрока.СуммаДопРасходовБезНДС + Остаток;
	КонецЕсли;
	
	// Запомним данные редактирования
	ЗагрузитьДанныеРучногоРаспределенияСуммы(СтрокаУслуги);
	
КонецПроцедуры // ДеревоНоменклатурыСуммаДопРасходовПриИзмененииНаСервере()

// Обработчик события возникающего при изменении данных реквизита "СуммаДопРасходов".
//
// Параметры:
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
&НаКлиенте
Процедура ДеревоНоменклатурыСуммаДопРасходовПриИзменении(Элемент)
	
	ДеревоНоменклатурыСуммаДопРасходовПриИзмененииНаСервере();
	
КонецПроцедуры // ДеревоНоменклатурыСуммаДопРасходовПриИзменении()

// Обработчик события возникающего на клиенте перед удалением строки или группы строк.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//  Отказ   - Булево       - Признак отказа от создания формы.
//
&НаКлиенте
Процедура ДеревоНоменклатурыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоНоменклатуры.ТекущиеДанные;
	
	// Если у нас текущая строка - документ основание, то отменим удаление
	Отказ = ТекущиеДанные = Неопределено ИЛИ ЗначениеЗаполнено(ТекущиеДанные.ДокументОснование);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте после удаления строки в контексте сервера.
//
&НаСервере
Процедура ДеревоНоменклатурыПослеУдаленияНаСервере()
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = ТаблицаУслуг.НайтиПоИдентификатору(Элементы.ТаблицаУслуг.ТекущаяСтрока);
	
	// Рассчитаем сумму сколько не распределено
	СуммаРаспределено = 0;
	
	Для Каждого ДокументОснование Из ДеревоНоменклатуры.ПолучитьЭлементы() Цикл
		Для Каждого ТекущаяСтрока Из ДокументОснование.ПолучитьЭлементы() Цикл
			СуммаРаспределено = СуммаРаспределено + ТекущаяСтрока.СуммаДопРасходов;
		КонецЦикла;
	КонецЦикла;
	
	ТекущиеДанные.НеРаспределено = ТекущиеДанные.Сумма - СуммаРаспределено;
	
	Если РедактированиеУслуги Тогда
		НеРаспределеноУслуги = ТекущиеДанные.НеРаспределено;
	КонецЕсли;
	
	ЗагрузитьДанныеРучногоРаспределенияСуммы(ТекущиеДанные);
	
КонецПроцедуры

// Обработчик события возникающего на клиенте после удаления строки.
//
// Параметры:
//  Элемент - ТаблицаФормы - Элемент управления, в котором возникло данное событие.
//
&НаКлиенте
Процедура ДеревоНоменклатурыПослеУдаления(Элемент)
	
	ДеревоНоменклатурыПослеУдаленияНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РаспределитьПоУслуге(Команда)
	
	РаспределитьПоУслугеНаСервере();
	
КонецПроцедуры // РаспределитьПоУслуге()

&НаКлиенте
Процедура РаспределитьРавномерно(Команда)
	
	РаспределитьРавномерноНаСервере();
	
КонецПроцедуры // РаспределитьРавномерно()

&НаКлиенте
Процедура ПодборНоменклатурыДокументовОснований(Команда)
	
	КлючСтроки = ТаблицаУслуг[0].КлючСтроки;
	
	Если НЕ РедактированиеУслуги Тогда
		
		КлючСтроки = Элементы.ТаблицаУслуг.ТекущиеДанные.КлючСтроки;
		
	КонецЕсли;
	
	// Запомним данные ручного распределения
	ЗагрузитьДанныеРучногоРаспределенияСуммы(Новый Структура("КлючСтроки,НаДоходыИРасходы", КлючСохраненияПоложенияОкна, Ложь));
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТаблицаОснований", ТаблицаОснований);
	ПараметрыФормы.Вставить("ТаблицаРаспределения", ТаблицаРаспределения);
	ПараметрыФормы.Вставить("КлючСтроки", КлючСтроки);
	ПараметрыФормы.Вставить("РаспределениеУслугПоАвтомобилям", РаспределениеУслугПоАвтомобилям);
	ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаПодбораНоменклатуры", ЭтотОбъект);
	
	ОткрытьФорму(
		"Документ.ПоступлениеДопРасходов.Форма.ПодборНоменклатурыИзДокументовОснований",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры // ПодборНоменклатурыДокументовОснований()

&НаКлиенте
Процедура Применить(Команда)
	
	ПрименитьНаСервере();
	
	Если НЕ ПустаяСтрока(АдресРезультатаРаспределения) Тогда
		
		Закрыть(АдресРезультатаРаспределения);
		
	КонецЕсли;
	
КонецПроцедуры // Применить()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Вызываем общий обработчик действия
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформление(ЭтотОбъект);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыСуммаДопРасходов");
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.ДокументОснование");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("РежимРаспределения");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыХарактеристикаНоменклатуры");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.ДокументОснование");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.ХарактеристикаНоменклатуры");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<без характеристик>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТаблицаУслугНаДоходыИРасходы");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаУслуг.БлокироватьРедактирование");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
КонецПроцедуры // УстановитьУсловноеОформление()

&НаСервере
Функция ЗаполнитьОснованияИзПараметров(ВходныеПараметры)
	
	ДокументыОснования   = ПолучитьЗначениеПараметраСтруктуры(ВходныеПараметры, "ДокументыОснования");
	ДокументыОснования   = ДокументыОснования.Выгрузить(, "ДокументОснование");
	НоменклатураОснований = Документы
		.ПоступлениеДопРасходов
		.ПолучитьНоменклатуруПоОснованиям(ДокументыОснования);
	
	Если НЕ ЗначениеЗаполнено(НоменклатураОснований) Тогда
		
		ТекстСообщения = НСтр("ru = 'В основаниях нет номенклатуры для распределения'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
		
	КонецЕсли;
	
	Для Каждого Номенклатура Из НоменклатураОснований Цикл
		
		ЗаполнитьЗначенияСвойств(ТаблицаОснований.Добавить(), Номенклатура);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьУслугиИзПараметров(ВходныеПараметры)
	
	УслугиДокумента = ПолучитьЗначениеПараметраСтруктуры(ВходныеПараметры, "Услуги", Новый Массив());
	Услуга          = ПолучитьЗначениеПараметраСтруктуры(ВходныеПараметры, "Услуга");
	Характеристика  = ПолучитьЗначениеПараметраСтруктуры(ВходныеПараметры, "Характеристика");
	СуммаУслуг      = ПолучитьЗначениеПараметраСтруктуры(ВходныеПараметры, "СуммаУслуги", 0);
	СуммаНДС        = ПолучитьЗначениеПараметраСтруктуры(ВходныеПараметры, "СуммаНДСУслуги", 0);
	Элементы.ТаблицаУслуг.Видимость = НЕ РедактированиеУслуги;
	Элементы.ОднаУслуга.Видимость   = РедактированиеУслуги;
	
	Если РедактированиеУслуги Тогда
		
		СуммаУслуги       = СуммаУслуг;
		СуммаБезНДСУслуги = СуммаУслуг - СуммаНДС;
		ЗаписьУслуги = Новый Структура();
		ЗаписьУслуги.Вставить("Номенклатура", Услуга);
		ЗаписьУслуги.Вставить("КлючСтроки", ПолучитьЗначениеПараметраСтруктуры(ВходныеПараметры, "КлючСтроки"));
		ЗаписьУслуги.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		ЗаписьУслуги.Вставить("СуммаВсего", СуммаУслуги);
		ЗаписьУслуги.Вставить("СуммаНДС", СуммаНДС);
		ЗаписьУслуги.Вставить("Номенклатура", Услуга);
		ЗаписьУслуги.Вставить("СпособРаспределения", ПолучитьЗначениеПараметраСтруктуры(ВходныеПараметры, "СпособРаспределения"));
		УслугиДокумента.Добавить(ЗаписьУслуги);
		
	КонецЕсли;
	
	Для Каждого Строка Из УслугиДокумента Цикл
		
		НоваяСтрока = ТаблицаУслуг.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Характеристика = Строка.ХарактеристикаНоменклатуры;
		НоваяСтрока.Сумма = Строка.СуммаВсего;
		НоваяСтрока.СуммаБезНДС = Строка.СуммаВсего - Строка.СуммаНДС;
		РежимРаспределения = ?(Строка.СпособРаспределения = 1, 1, РежимРаспределения);
		
	КонецЦикла;
	
	Если ТаблицаУслуг.Количество() > 0 Тогда
		
		Элементы.ТаблицаУслуг.ТекущаяСтрока = ТаблицаУслуг[0].ПолучитьИдентификатор();
		НаДоходыИРасходыУслуги = ТаблицаУслуг[0].НаДоходыИРасходы;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьУслугиИзПараметров()

&НаСервере
Процедура ЗаполнитьРаспределениеРасходов(ВходныеПараметры)
	
	РаспределениеРасходов = ПолучитьЗначениеПараметраСтруктуры(Параметры, "РаспределениеРасходов");
	
	Если РаспределениеРасходов = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ЭлементРаспределения Из РаспределениеРасходов Цикл
		
		УсловиеПоиска = Новый Структура(
			"ДокументОснование,
			|Номенклатура,
			|ХарактеристикаНоменклатуры,
			|ЕдиницаИзмерения,
			|Коэффициент,
			|ГТД"
		);
		ЗаполнитьЗначенияСвойств(УсловиеПоиска, ЭлементРаспределения);
		УсловиеПоиска.Номенклатура = ЭлементРаспределения.НоменклатураРаспределения;
		НайденнаяНоменклатура = ТаблицаОснований.НайтиСтроки(УсловиеПоиска);
		
		Если НайденнаяНоменклатура.Количество() = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока = ТаблицаРаспределения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементРаспределения);
		НоваяСтрока.Номенклатура = ЭлементРаспределения.НоменклатураРаспределения;
		
	КонецЦикла;
	
	// Обновляем данные в других таблицах
	РаспределенныеСуммы = ТаблицаРаспределения.Выгрузить(, "КлючСтроки,Сумма");
	РаспределенныеСуммы.Свернуть("КлючСтроки", "Сумма");
	
	Для Каждого Строка Из ТаблицаУслуг Цикл
		
		УсловиеПоиска = Новый Структура("КлючСтроки", Строка.КлючСтроки);
		РаспределениеДляУслуги = РаспределенныеСуммы.НайтиСтроки(УсловиеПоиска);
		
		Если РаспределениеДляУслуги.Количество() > 0 Тогда
			
			Строка.НеРаспределено = Строка.Сумма - РаспределениеДляУслуги[0].Сумма;
			
		КонецЕсли;
		
		// Рассчитаем сумму без ндс для распределенной номенклатуры
		НайденныеСтроки = ТаблицаРаспределения.НайтиСтроки(УсловиеПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СуммаБезНДСРаспределения = 0;
			
			Для Каждого ТекущаяНоменклатура Из НайденныеСтроки Цикл
				
				ТекущаяНоменклатура.СуммаБезНДС = Окр(ТекущаяНоменклатура.Сумма / Строка.Сумма * Строка.СуммаБезНДС, 2);
				СуммаБезНДСРаспределения = СуммаБезНДСРаспределения + ТекущаяНоменклатура.СуммаБезНДС;
				
			КонецЦикла;
			
			Остаток = Строка.СуммаБезНДС - СуммаБезНДСРаспределения;
			
			Если Остаток > 0 Тогда
				
				ТекущаяНоменклатура.СуммаБезНДС = ТекущаяНоменклатура.СуммаБезНДС + Остаток;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если РедактированиеУслуги Тогда
		
		НеРаспределеноУслуги = ТаблицаУслуг[0].НеРаспределено;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРаспределениеРасходов()

&НаСервере
Процедура ЗаполнитьПризнакНаДоходыИРасходы()
	
	СпособыРаспределения = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		ТаблицаУслуг.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура"),
		"СпособРаспределенияДопРасходов"
	);
	
	Для Каждого Строка Из ТаблицаУслуг Цикл
		
		Если СпособыРаспределения.Получить(Строка.Номенклатура) = Перечисления.СпособыРаспределенияДопРасходов.НаДоходыИРасходы Тогда
			
			Строка.НаДоходыИРасходы = Истина;
			Строка.БлокироватьРедактирование = Истина;
			
			Если РедактированиеУслуги Тогда
				
				РежимРаспределения = 0;
				Элементы.РежимРаспределения.ТолькоПросмотр = Истина;
				Элементы.НаДоходыИРасходыУслуги.ТолькоПросмотр = Истина;
				
			КонецЕсли;
			
		Иначе
			
			Строка.НаДоходыИРасходы =
				(Строка.СпособРаспределения = 0
					И СпособыРаспределения.Получить(Строка.Номенклатура) = Перечисления.СпособыРаспределенияДопРасходов.НаДоходыИРасходы)
				ИЛИ (Строка.СпособРаспределения = 1
					И ТаблицаРаспределения.НайтиСтроки(Новый Структура("КлючСтроки", Строка.КлючСтроки)).Количество() = 0);
			
			Строка.БлокироватьРедактирование = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если РедактированиеУслуги И ТаблицаУслуг.Количество() > 0 Тогда
		
		НаДоходыИРасходыУслуги = ТаблицаУслуг[0].НаДоходыИРасходы;
		
	ИначеЕсли ТаблицаУслуг.Количество() > 0 Тогда
		
		БлокироватьЭлементы = ТаблицаУслуг[Элементы.ТаблицаУслуг.ТекущаяСтрока].БлокироватьРедактирование;
		
		Если БлокироватьЭлементы Тогда
			
			РежимРаспределения = 0;
			Элементы.РежимРаспределения.ТолькоПросмотр = Истина;
			Элементы.НаДоходыИРасходыУслуги.ТолькоПросмотр = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПризнакНаДоходыИРасходы()

&НаСервере
Процедура НастроитьФорму()
	
	// Отображение кода и артикула номенклатуры
	ОтображатьАртикул = ПолучитьФункциональнуюОпцию("ИспользоватьАртикул");
	
	// Установим видимость служебных колонок в зависимости от значения функциональной опции.
	Элементы.ДеревоНоменклатурыНоменклатураАртикул.Видимость =
		ОтображатьАртикул=Перечисления.РежимыВыводаКодаВДокументах.Артикул
		ИЛИ ОтображатьАртикул = Перечисления.РежимыВыводаКодаВДокументах.КодИАртикул
		ИЛИ ОтображатьАртикул = Перечисления.РежимыВыводаКодаВДокументах.АртикулКодПроизводитель
		ИЛИ РаспределениеУслугПоАвтомобилям;
	Элементы.ДеревоНоменклатурыНоменклатураКод.Видимость =
		(ОтображатьАртикул=Перечисления.РежимыВыводаКодаВДокументах.Код
			ИЛИ ОтображатьАртикул=Перечисления.РежимыВыводаКодаВДокументах.КодИАртикул
			ИЛИ ОтображатьАртикул=Перечисления.РежимыВыводаКодаВДокументах.АртикулКодПроизводитель)
		И НЕ РаспределениеУслугПоАвтомобилям;
	
	// Видимость характеристики номенклатуры - если есть строка с характеристикой, то выводим.
	ВидимостьХарактеристики = Ложь;
	
	Для Каждого ТекущаяСтрока Из ТаблицаОснований Цикл
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ХарактеристикаНоменклатуры) Тогда
			
			ВидимостьХарактеристики = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ДеревоНоменклатурыХарактеристикаНоменклатуры.Видимость = ВидимостьХарактеристики И НЕ РаспределениеУслугПоАвтомобилям;
	Элементы.ДеревоНоменклатурыЕдиницаКоэффициент.Видимость = НЕ РаспределениеУслугПоАвтомобилям;
	Элементы.ДеревоНоменклатурыНоменклатураАртикул.Заголовок = ?(РаспределениеУслугПоАвтомобилям, "VIN", "Артикул");
	Элементы.ДеревоНоменклатурыНоменклатура.Заголовок        = ?(РаспределениеУслугПоАвтомобилям, "Автомобиль", "Номенклатура");
	
КонецПроцедуры // НастроитьФорму()

// Функция для получения автоматического распределения суммы услуги по номенклатуре документов-оснований.
//
&НаСервере
Функция АвтоматическоеРаспределениеСуммыУслуги(СтрокаУслуги, РаспределятьПоУслуге = Ложь)
	
	НаименованиеУслуги = СтрокаУслуги.Номенклатура.НаименованиеПолное;
	
	ТаблицаНоменклатурыРаспределения = ТаблицаОснований.Выгрузить();
	
	// Проверим по текущему распределению, т.к. возможны изменения в составе номенклатуры.
	Если РаспределятьПоУслуге Тогда
		
		// Проверим наличие ручного распределения услуги
		НайденныеСтроки = ТаблицаРаспределения.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаУслуги.КлючСтроки));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТаблицаНоменклатурыРаспределения.Очистить();
			Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
				СтруктураПоиска = Новый Структура("ДокументОснование, Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, ГТД");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущаяСтрока);
				НайденнаяНоменклатура = ТаблицаОснований.НайтиСтроки(СтруктураПоиска);
				Если НайденнаяНоменклатура.Количество() > 0 Тогда
					НоваяСтрока = ТаблицаНоменклатурыРаспределения.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяНоменклатура[0]);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// автоматическое распределение
	ВременнаяТаблицаОснований = ТаблицаНоменклатурыРаспределения.Скопировать();
	ВременнаяТаблицаОснований.Очистить();
	
	// Вычислим общую сумму документов
	ИтогДокументКоличество = ТаблицаНоменклатурыРаспределения.Итог("Количество");
	ИтогДокументСумма      = ТаблицаНоменклатурыРаспределения.Итог("СуммаВсего"); 
	ИтогДокументВес        = ТаблицаНоменклатурыРаспределения.Итог("Вес");
	
	СпособРаспределенияУслуги = СтрокаУслуги.Номенклатура.СпособРаспределенияДопРасходов;
	СуммаНДСУслуги = СтрокаУслуги.Сумма - СтрокаУслуги.СуммаБезНДС;
	СуммаУслуги = СтрокаУслуги.Сумма;
	СуммаПоСумме = 0;
	СуммаНДСПоСумме = 0;
	СуммаПоКоличеству = 0;
	СуммаНДСПоКоличеству = 0;
	СуммаПоВесу = 0;
	СуммаНДСПоВесу = 0;
	
	Если СпособРаспределенияУслуги = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме Тогда
		СуммаПоСумме = СуммаУслуги;
		СуммаНДСПоСумме = СуммаНДСУслуги;
	ИначеЕсли СпособРаспределенияУслуги = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству Тогда
		СуммаПоКоличеству = СуммаУслуги;
		СуммаНДСПоКоличеству = СуммаНДСУслуги;
	ИначеЕсли СпособРаспределенияУслуги = Перечисления.СпособыРаспределенияДопРасходов.ПоВесу Тогда
		СуммаПоВесу = СуммаУслуги;
		СуммаНДСПоВесу = СуммаНДСУслуги;
	КонецЕсли;
	
	СуммаРаспределения = 0;
	
	ИтогДопРасходы    = СуммаУслуги;
	ИтогДопРасходыНДС = СуммаНДСУслуги;
	
	// Вычислим ситуацию, когда
	Если (ИтогДокументКоличество=0) И (СуммаПоКоличеству<>0) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Количество прихода равно нулю. Распределение суммы услуги ""%1"" на себестоимость прихода невозможно.'"),
				НаименованиеУслуги
			)
		);
	КонецЕсли;
	Если (ИтогДокументСумма=0) И (СуммаПоСумме<>0) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Себестоимость прихода равна нулю. Распределение суммы услуги ""%1"" на себестоимость прихода невозможно.'"),
				НаименованиеУслуги
			)
		);	
	КонецЕсли;
	Если (ИтогДокументВес=0) И (СуммаПоВесу<>0) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Вес прихода равен нулю. Распределение суммы услуги ""%1"" на себестоимость прихода невозможно.'"),
				НаименованиеУслуги
			)
		);
	КонецЕсли;
	
	// распределяем по товарам
	Для Каждого СтрокаТоварИсх Из ТаблицаНоменклатурыРаспределения Цикл
		СтрокаТовар = ВременнаяТаблицаОснований.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовар,СтрокаТоварИсх);
		
		// Обнулим значения
		СтрокаТовар.Количество = 0;
		СтрокаТовар.СуммаВсего = 0;
		СтрокаТовар.СуммаНДС   = 0;
		
		СуммаДопРасходов=0; СуммаНДСДопРасходов=0;
		
		КоэфРаспределения    = ?(ИтогДокументКоличество=0, 0, СтрокаТоварИсх.Количество/ИтогДокументКоличество);
		СуммаДопРасходовК    = СуммаПоКоличеству    * КоэфРаспределения;
		СуммаНДСДопРасходовК = СуммаНДСПоКоличеству * КоэфРаспределения;
		
		КоэфРаспределения    = ?(ИтогДокументСумма=0, 0, СтрокаТоварИсх.СуммаВсего/ИтогДокументСумма);
		СуммаДопРасходовС    = СуммаПоСумме    * КоэфРаспределения;
		СуммаНДСДопРасходовС = СуммаНДСПоСумме * КоэфРаспределения;
		
		КоэфРаспределения    = ?(ИтогДокументВес=0, 0, СтрокаТоварИсх.Вес/ИтогДокументВес);
		СуммаДопРасходовВ    = СуммаПоВесу    * КоэфРаспределения;
		СуммаНДСДопРасходовВ = СуммаНДСПоВесу * КоэфРаспределения;
		
		СтрокаТовар.СуммаВсего = СуммаДопРасходовК + СуммаДопРасходовС + СуммаДопРасходовВ;
		СтрокаТовар.СуммаНДС   = СуммаНДСДопРасходовК + СуммаНДСДопРасходовС + СуммаНДСДопРасходовВ;
		
		ИтогДопРасходы    = ИтогДопРасходы - (СтрокаТовар.СуммаВсего);
		ИтогДопРасходыНДС = ИтогДопРасходыНДС - (СтрокаТовар.СуммаНДС);
	КонецЦикла;
	
	// если осталась сумма от округления то закинем ее на последний
	Если НЕ СпособРаспределенияУслуги = Перечисления.СпособыРаспределенияДопРасходов.НаДоходыИРасходы И (ИтогДопРасходы<>0 ИЛИ ИтогДопРасходыНДС<>0) И СтрокаТовар <> Неопределено Тогда
		СтрокаТовар.СуммаВсего = СтрокаТовар.СуммаВсего + ИтогДопРасходы;
		СтрокаТовар.СуммаНДС   = СтрокаТовар.СуммаНДС + ИтогДопРасходыНДС;
	КонецЕсли;
	
	Возврат ВременнаяТаблицаОснований;
	
КонецФункции

// Процедура формирования дерева для вывода данных на форму
//
&НаСервере
Процедура ПолучитьДеревоРаспределенияРасходов()
	
	ДеревоНоменклатуры.ПолучитьЭлементы().Очистить();
	
	Если Элементы.ТаблицаУслуг.ТекущаяСтрока = Неопределено ИЛИ ТаблицаУслуг.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущиеДанные = ТаблицаУслуг.НайтиПоИдентификатору(Элементы.ТаблицаУслуг.ТекущаяСтрока);
	НаДоходыИРасходы = ТекущиеДанные.НаДоходыИРасходы;
	АвтоматическийРежимРаспределения = (РежимРаспределения = 0);
	
	Элементы.ДеревоНоменклатуры.ТолькоПросмотр = НаДоходыИРасходы И АвтоматическийРежимРаспределения;
	Элементы.ПодборНоменклатурыДокументовОснований.Доступность = НЕ НаДоходыИРасходы И НЕ АвтоматическийРежимРаспределения;
	Элементы.УдалитьНоменклатуру.Доступность = НЕ НаДоходыИРасходы И НЕ АвтоматическийРежимРаспределения;
	Элементы.ПодменюРаспределить.Доступность = НЕ НаДоходыИРасходы И НЕ АвтоматическийРежимРаспределения;
	
	Если НаДоходыИРасходы Тогда
		
		ТекущиеДанные.НеРаспределено = 0;
		НеРаспределеноУслуги = 0;
		Возврат;
		
	КонецЕсли;
	
	// Заполним документами-основаниями
	СписокОснований = ТаблицаОснований.Выгрузить(, "ДокументОснование");
	СписокОснований.Свернуть("ДокументОснование");
	
	// Заполним верхний уровень
	Для Каждого ТекущаяСтрока Из СписокОснований Цикл
		
		НоваяСтрока = ДеревоНоменклатуры.ПолучитьЭлементы().Добавить();
		НоваяСтрока.ДокументОснование = ТекущаяСтрока.ДокументОснование;
		
	КонецЦикла;
	
	// Проверим наличие ручного распределения услуги
	НайденныеСтроки = ТаблицаРаспределения.НайтиСтроки(Новый Структура("КлючСтроки", ТекущиеДанные.КлючСтроки));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		Для Каждого ТекущаяСтрока Из ДеревоНоменклатуры.ПолучитьЭлементы() Цикл
			
			НайденныеУслуги = ТаблицаРаспределения.НайтиСтроки(Новый Структура("ДокументОснование,КлючСтроки", ТекущаяСтрока.ДокументОснование, ТекущиеДанные.КлючСтроки));
			
			Для Каждого ТекущаяНоменклатура Из НайденныеУслуги Цикл
				
				НоваяСтрока = ТекущаяСтрока.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяНоменклатура,, "ДокументОснование");
				
				Если РаспределениеУслугПоАвтомобилям Тогда
					
					НоваяСтрока.Артикул = НоваяСтрока.Номенклатура.VIN;
					
				Иначе
					
					НоваяСтрока.Код = НоваяСтрока.Номенклатура.Код;
					НоваяСтрока.Артикул = НоваяСтрока.Номенклатура.Артикул;
					
				КонецЕсли;
				
				НоваяСтрока.СуммаДопРасходов       = ТекущаяНоменклатура.Сумма;
				НоваяСтрока.СуммаДопРасходовБезНДС = ТекущаяНоменклатура.СуммаБезНДС;
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		// Получим таблицу с распределенной услугой по номенклатуре
		ТаблицаРаспределенияСумм = АвтоматическоеРаспределениеСуммыУслуги(ТекущиеДанные);
		
		СуммаРаспределения = 0;
		
		Для Каждого ТекущийДокумент Из ДеревоНоменклатуры.ПолучитьЭлементы() Цикл
			
			НайденнаяНоменклатура = ТаблицаРаспределенияСумм.НайтиСтроки(Новый Структура("ДокументОснование", ТекущийДокумент.ДокументОснование));
			
			Для Каждого ТекущаяСтрока Из НайденнаяНоменклатура Цикл
				
				НоваяСтрока = ТекущийДокумент.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока,, "ДокументОснование");
				
				Если РаспределениеУслугПоАвтомобилям Тогда
					
					НоваяСтрока.Артикул = НоваяСтрока.Номенклатура.VIN;
					
				Иначе
					
					НоваяСтрока.Код = НоваяСтрока.Номенклатура.Код;
					НоваяСтрока.Артикул = НоваяСтрока.Номенклатура.Артикул;
					
				КонецЕсли;
				
				НоваяСтрока.Услуга = ТекущаяСтрока.Номенклатура;
				НоваяСтрока.СуммаДопРасходов       = ТекущаяСтрока.СуммаВсего;
				НоваяСтрока.СуммаДопРасходовБезНДС = ТекущаяСтрока.СуммаВсего - ТекущаяСтрока.СуммаНДС;
				СуммаРаспределения = СуммаРаспределения + ТекущаяСтрока.СуммаВсего;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ТекущиеДанные.НеРаспределено = ТекущиеДанные.Сумма - СуммаРаспределения;
		
		Если РедактированиеУслуги Тогда
			
			НеРаспределеноУслуги = ТекущиеДанные.НеРаспределено;
			
		КонецЕсли;
		
		ЗагрузитьДанныеРучногоРаспределенияСуммы(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьДеревоРаспределенияРасходов()

// Обработчик события возникающего на клиенте при активизации строки списка услуг.
//
&НаКлиенте
Процедура Подключаемый_СписокПриАктивизацииСтрокиУслуг()
	
	// Все перерасчитано
	Если ИзменениеДиР Тогда
		ИзменениеДиР = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Элементы.ТаблицаУслуг.ТекущиеДанные.БлокироватьРедактирование Тогда
		РежимРаспределения = 0;
		Элементы.РежимРаспределения.ТолькоПросмотр = Истина;
	Иначе
		Элементы.РежимРаспределения.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	ПолучитьДеревоРаспределенияРасходов();
	
	РазвернутьДеревоНоменклатуры();
	
КонецПроцедуры // Подключаемый_СписокПриАктивизацииСтрокиУслуг()

// Процедура загрузки в таблицу результата распределенную сумму дополнительных расходов.
//
&НаСервере
Процедура ЗагрузитьДанныеРучногоРаспределенияСуммы(СтрокаУслуги)
	
	// Обновим данные в результирующей таблице
	НайденныеСтроки = ТаблицаРаспределения.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаУслуги.КлючСтроки));
	
	Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
		
		ТаблицаРаспределения.Удалить(ТекущаяСтрока);
		
	КонецЦикла;
	
	// Если статья распределения ДиР, то нет необходимости заполнять
	Если СтрокаУслуги.НаДоходыИРасходы Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Заполнение таблицы ТаблицаРаспределения для данной услуги
	Для Каждого ДокументОснование Из ДеревоНоменклатуры.ПолучитьЭлементы() Цикл
		
		Для Каждого ТекущаяСтрока Из ДокументОснование.ПолучитьЭлементы() Цикл
			
			НоваяСтрока = ТаблицаРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУслуги);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			НоваяСтрока.ДокументОснование = ДокументОснование.ДокументОснование;
			НоваяСтрока.Сумма             = ТекущаяСтрока.СуммаДопРасходов;
			НоваяСтрока.СуммаБезНДС       = ТекущаяСтрока.СуммаДопРасходовБезНДС;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьДанныеРучногоРаспределенияСуммы()

// Процедура для отображения дерева номенклатур документов оснований после формирования.
//
&НаКлиенте
Процедура РазвернутьДеревоНоменклатуры()
	
	// Развернем дерево номенклатуры
	Для Каждого ТекущаяСтрока Из ДеревоНоменклатуры.ПолучитьЭлементы() Цикл
		Элементы.ДеревоНоменклатуры.Развернуть(ТекущаяСтрока.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры // РазвернутьДеревоНоменклатуры()

// Процедура для установки доступности элементов формы при изменении режима распределения.
//
&НаСервере
Процедура УстановкаРежимаРаспределения(ПересчитыватьДерево = Истина)
	
	АвтоматическийРежимРаспределения = (РежимРаспределения = 0);
	Элементы.ТаблицаУслуг.ТолькоПросмотр       = АвтоматическийРежимРаспределения;
	Элементы.ДеревоНоменклатуры.ТолькоПросмотр = АвтоматическийРежимРаспределения;
	ДоступностьКомандПодбора = РежимРаспределения = 1 И НЕ (РедактированиеУслуги И НаДоходыИРасходыУслуги);
	Элементы.ПодборНоменклатурыДокументовОснований.Доступность = ДоступностьКомандПодбора;
	Элементы.УдалитьНоменклатуру.Доступность = ДоступностьКомандПодбора;
	Элементы.ПодменюРаспределить.Доступность = ДоступностьКомандПодбора;
	
	Если РедактированиеУслуги Тогда
		Элементы.НаДоходыИРасходыУслуги.ТолькоПросмотр = АвтоматическийРежимРаспределения;
	КонецЕсли;
	
	Если АвтоматическийРежимРаспределения Тогда
		ТаблицаРаспределения.Очистить();
		// Очистим флаг "На доходы и расходы"
		Для Каждого ТекущаяСтрока Из ТаблицаУслуг Цикл
			ТекущаяСтрока.НаДоходыИРасходы = ТекущаяСтрока.Номенклатура.СпособРаспределенияДопРасходов = Перечисления.СпособыРаспределенияДопРасходов.НаДоходыИРасходы;
			ТекущаяСтрока.Нераспределено = 0;
		КонецЦикла;
		НеРаспределеноУслуги= 0;
		НаДоходыИРасходыУслуги = ТаблицаУслуг[0].НаДоходыИРасходы;
		Если ПересчитыватьДерево Тогда
			ПолучитьДеревоРаспределенияРасходов();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УстановкаРежимаРаспределения()

// Процедура обновления состава строк в таблице распределения
//
&НаСервере
Процедура ОбновлениеСоставаНоменклатурыРаспределения(ПодобраннаяНоменклатура)
	
	// TODO: Разобраться в этой процедуре.
	
	КлючСтроки = ПодобраннаяНоменклатура.КлючСтроки;
	НоменклатураПодбора = ПодобраннаяНоменклатура.РезультатПодбора;
	
	НайденныеСтроки = ТаблицаРаспределения.НайтиСтроки(Новый Структура("КлючСтроки", КлючСтроки));
	
	// Если имелись данные о распределении услуги ранее - проверим и заменим
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		Для Каждого ТекущаяСтрока Из НоменклатураПодбора Цикл
			
			ПараметрыОтбора = Новый Структура();
			ПараметрыОтбора.Вставить("ДокументОснование",          ТекущаяСтрока.ДокументОснование);
			ПараметрыОтбора.Вставить("КлючСтроки",                 ТекущаяСтрока.КлючСтроки);
			ПараметрыОтбора.Вставить("Номенклатура",               ТекущаяСтрока.Номенклатура);
			ПараметрыОтбора.Вставить("ХарактеристикаНоменклатуры", ТекущаяСтрока.ХарактеристикаНоменклатуры);
			ПараметрыОтбора.Вставить("ЕдиницаИзмерения",           ТекущаяСтрока.ЕдиницаИзмерения);
			ПараметрыОтбора.Вставить("Коэффициент",                ТекущаяСтрока.Коэффициент);
			ПараметрыОтбора.Вставить("ГТД",                        ТекущаяСтрока.ГТД);
			НайденныеСтрокиНоменклатуры = ТаблицаРаспределения.НайтиСтроки(ПараметрыОтбора);
			
			Если НайденныеСтрокиНоменклатуры.Количество() > 0 Тогда
				
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, НайденныеСтрокиНоменклатуры[0]);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			
			ТаблицаРаспределения.Удалить(ТекущаяСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Добавим выбранную номенклатуру в таблицу распределения
	Для Каждого ТекущаяСтрока Из НоменклатураПодбора Цикл
		
		НоваяСтрока = ТаблицаРаспределения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
	КонецЦикла;
	
	СуммаРаспределения = 0;
	
	// Обновим дерево номенклатур
	Для Каждого ТекущийДокумент Из ДеревоНоменклатуры.ПолучитьЭлементы() Цикл
		
		ТекущийДокумент.ПолучитьЭлементы().Очистить();
		НайденныеУслуги = ТаблицаРаспределения.НайтиСтроки(Новый Структура(
			"ДокументОснование,КлючСтроки",
			ТекущийДокумент.ДокументОснование,
			КлючСтроки
		));
		
		Для Каждого ТекущаяНоменклатура Из НайденныеУслуги Цикл
			
			НоваяСтрока = ТекущийДокумент.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяНоменклатура,, "ДокументОснование");
			
			Если РаспределениеУслугПоАвтомобилям Тогда
				
				НоваяСтрока.Артикул = НоваяСтрока.Номенклатура.VIN;
				
			Иначе
				
				НоваяСтрока.Код = НоваяСтрока.Номенклатура.Код;
				НоваяСтрока.Артикул = НоваяСтрока.Номенклатура.Артикул;
				
			КонецЕсли;
			
			НоваяСтрока.СуммаДопРасходов       = ТекущаяНоменклатура.Сумма;
			НоваяСтрока.СуммаДопРасходовБезНДС = ТекущаяНоменклатура.СуммаБезНДС;
			СуммаРаспределения = СуммаРаспределения + НоваяСтрока.СуммаДопРасходов;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтрокаУслуги = ТаблицаУслуг.НайтиСтроки(Новый Структура("КлючСтроки", КлючСтроки));
	СтрокаУслуги[0].НеРаспределено = СтрокаУслуги[0].Сумма - СуммаРаспределения;
	
	Если РедактированиеУслуги Тогда
		
		НеРаспределеноУслуги = СтрокаУслуги[0].НеРаспределено;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновлениеСоставаНоменклатурыРаспределения()

// Обработчик оповещения по результатам выбора в подчиненной форме номенклатуры
//
&НаКлиенте
Процедура Подключаемый_ОбработкаПодбораНоменклатуры(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ РезультатОповещения = Неопределено Тогда
		
		ОбновлениеСоставаНоменклатурыРаспределения(РезультатОповещения);
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ОбработкаПодбораНоменклатуры()

// Обработчик события нажатия кнопки "Распределить по услуге" в контексте сервера.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаСервере
Процедура РаспределитьПоУслугеНаСервере()
	
	Если РедактированиеУслуги Тогда
		СтрокаУслуги = ТаблицаУслуг[0];
	Иначе
		СтрокаУслуги = ТаблицаУслуг.НайтиПоИдентификатору(Элементы.ТаблицаУслуг.ТекущаяСтрока);
	КонецЕсли;
	
	ТаблицаРаспределенияСумм = АвтоматическоеРаспределениеСуммыУслуги(СтрокаУслуги, Истина);
	
	СуммаРаспределения = 0;
	
	Для Каждого ТекущийДокумент Из ДеревоНоменклатуры.ПолучитьЭлементы() Цикл
		Для Каждого ТекущаяСтрока Из ТекущийДокумент.ПолучитьЭлементы() Цикл
			СтруктураПоиска = Новый Структура("ДокументОснование, Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, ГТД");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущаяСтрока);
			СтруктураПоиска.ДокументОснование = ТекущийДокумент.ДокументОснование;
			НайденнаяНоменклатура = ТаблицаРаспределенияСумм.НайтиСтроки(СтруктураПоиска);
			ТекущаяСтрока.СуммаДопРасходов       = НайденнаяНоменклатура[0].СуммаВсего;
			ТекущаяСтрока.СуммаДопРасходовБезНДС = НайденнаяНоменклатура[0].СуммаВсего - НайденнаяНоменклатура[0].СуммаНДС;
			СуммаРаспределения = СуммаРаспределения + НайденнаяНоменклатура[0].СуммаВсего;
		КонецЦикла;
	КонецЦикла;
	
	ЗагрузитьДанныеРучногоРаспределенияСуммы(СтрокаУслуги);
	
	СтрокаУслуги.НеРаспределено = СтрокаУслуги.Сумма - СуммаРаспределения;
	
	Если РедактированиеУслуги Тогда
		НеРаспределеноУслуги = СтрокаУслуги.НеРаспределено;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события нажатия кнопки "Распределить равномерно" в контексте сервера.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаСервере
Процедура РаспределитьРавномерноНаСервере()
	
	Если РедактированиеУслуги Тогда
		СтрокаУслуги = ТаблицаУслуг[0];
	Иначе
		СтрокаУслуги = ТаблицаУслуг.НайтиПоИдентификатору(Элементы.ТаблицаУслуг.ТекущаяСтрока);
	КонецЕсли;
	
	СуммаРаспределенияУслуги = СтрокаУслуги.Сумма;
	СуммаРаспределенияУслугиБезНДС = СтрокаУслуги.СуммаБезНДС;
	
	// Заполним ТаблицаРаспределения автоматически
	ЗагрузитьДанныеРучногоРаспределенияСуммы(СтрокаУслуги);
	
	// Проверим наличие ручного распределения услуги
	НайденныеСтроки = ТаблицаРаспределения.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаУслуги.КлючСтроки));
	КоличествоЗаписей = НайденныеСтроки.Количество();
	
	Если КоличествоЗаписей > 0 Тогда
		СуммаРаспределенияУслуге = Окр(СуммаРаспределенияУслуги / КоличествоЗаписей, 2, РежимОкругления.Окр15как10);
		СуммаРаспределенияУслугеБезНДС = Окр(СуммаРаспределенияУслугиБезНДС / КоличествоЗаписей, 2, РежимОкругления.Окр15как10);
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			ТекущаяСтрока.Сумма = СуммаРаспределенияУслуге;
			ТекущаяСтрока.СуммаБезНДС = СуммаРаспределенияУслугеБезНДС;
		КонецЦикла;
		
		ОстатокСуммы = СуммаРаспределенияУслуги - СуммаРаспределенияУслуге * КоличествоЗаписей;
		ОстатокСуммыБезНДС = СуммаРаспределенияУслугиБезНДС - СуммаРаспределенияУслугеБезНДС * КоличествоЗаписей;
		
		Если ОстатокСуммы <> 0 ИЛИ ОстатокСуммыБезНДС <> 0 Тогда
			ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма + ОстатокСуммы;
			ТекущаяСтрока.СуммаБезНДС = ТекущаяСтрока.СуммаБезНДС + ОстатокСуммыБезНДС;
		КонецЕсли;
		
	КонецЕсли;
	
	СуммаРаспределения = 0;
	
	Если КоличествоЗаписей = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущийДокумент Из ДеревоНоменклатуры.ПолучитьЭлементы() Цикл
		
		Для Каждого ТекущаяСтрока Из ТекущийДокумент.ПолучитьЭлементы() Цикл
			
			СтруктураПоиска = Новый Структура("ДокументОснование, Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, ГТД, КлючСтроки");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущаяСтрока);
			СтруктураПоиска.ДокументОснование = ТекущийДокумент.ДокументОснование;
			СтруктураПоиска.КлючСтроки = СтрокаУслуги.КлючСтроки;
			НайденнаяНоменклатура = ТаблицаРаспределения.НайтиСтроки(СтруктураПоиска);
			ТекущаяСтрока.СуммаДопРасходов       = НайденнаяНоменклатура[0].Сумма;
			ТекущаяСтрока.СуммаДопРасходовБезНДС = НайденнаяНоменклатура[0].СуммаБезНДС;
			СуммаРаспределения = СуммаРаспределения + ТекущаяСтрока.СуммаДопРасходов;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтрокаУслуги.НеРаспределено = СтрокаУслуги.Сумма - СуммаРаспределения;
	
	Если РедактированиеУслуги Тогда
		
		НеРаспределеноУслуги = СтрокаУслуги.НеРаспределено;
		
	КонецЕсли;
	
КонецПроцедуры // РаспределитьРавномерноНаСервере()

// Обработчик события нажатия кнопки "Применить" в контексте сервера.
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаСервере
Процедура ПрименитьНаСервере()
	
	Если РежимРаспределения = 1 Тогда
		Проверка = Истина;
		
		// Проверим возможность использования галки ДиР
		Для Каждого ТекущаяСтрока Из ТаблицаУслуг Цикл
			Если ТекущаяСтрока.НеРаспределено <> 0 Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Не распределена сумма услуги ""%1""'"),ТекущаяСтрока.Номенклатура
					)
				);
				Проверка = Ложь;
			КонецЕсли;
			Если ТекущаяСтрока.НаДоходыИРасходы И НЕ ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура.СтатьяДопРасходов) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Для услуги ""%1"" нельзя применить распределение ""На доходы и расходы"". В услуге не указана статья дополнительных расходов.'"),
						ТекущаяСтрока.Номенклатура
					)
				);
				Проверка = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Проверка Тогда
			Возврат;
		КонецЕсли;
		
		// Проверить для всех ли распределена сумма дополнительных расходов
		Для Каждого ТекущаяСтрока Из ТаблицаУслуг Цикл
			
			Если ТекущаяСтрока.НаДоходыИРасходы Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			РаспределениеПоУслуге = ТаблицаРаспределения.НайтиСтроки(Новый Структура("КлючСтроки", ТекущаяСтрока.КлючСтроки));
			
			Если РаспределениеПоУслуге.Количество() > 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ТаблицаРаспределенияСумм = АвтоматическоеРаспределениеСуммыУслуги(ТекущаяСтрока, Истина);
			
			Для Каждого СтрокаРаспределения Из ТаблицаРаспределенияСумм Цикл
				
				НоваяСтрока = ТаблицаРаспределения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
				НоваяСтрока.Сумма = СтрокаРаспределения.СуммаВсего;
				НоваяСтрока.СуммаБезНДС = СтрокаРаспределения.СуммаВсего - СтрокаРаспределения.СуммаНДС;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатРаспределения = Новый Структура();
	РезультатРаспределения.Вставить("СпособРаспределения", РежимРаспределения);
	РезультатРаспределения.Вставить("ТаблицаРаспределения", ТаблицаРаспределения.Выгрузить());
	РезультатРаспределения.Вставить("Услуга", Услуга);
	
	АдресРезультатаРаспределения = ПоместитьВоВременноеХранилище(РезультатРаспределения);
	
КонецПроцедуры // ПрименитьНаСервере()

#КонецОбласти

