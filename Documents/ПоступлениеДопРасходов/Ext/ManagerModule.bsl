// Модуль менеджера документа "Поступление доп. расходов"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ОбработчикиОбновления

// Выполняет перенос свойств в реквизиты объекта
// Руководитель, ГлавныйБухгалтер,Отустил, ОтпустилКонтрагент, Получил, ПолучилКонтрагент
//
Процедура ВыполнитьПереносПодписантовИзСвойств() Экспорт 
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовПоступления();
	ПеренесеныВсеСвойства = Истина;
	МассивПереносимыхСвойств = УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства);

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеДопРасходовДополнительныеРеквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.ДополнительныеРеквизиты КАК ПоступлениеДопРасходовДополнительныеРеквизиты
	|ГДЕ
	|	ПоступлениеДопРасходовДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", МассивПереносимыхСвойств);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();  
	
	Пока Выборка.Следующий() Цикл  
		
		СвойстваКУдалению = Новый Массив();
		
		НачатьТранзакцию(); 
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ПоступлениеДопРасходов");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();  
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗначенияСвойств = ДокументОбъект.ДополнительныеРеквизиты.Выгрузить();
			
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда 
				
				СвойствоРуководитель = ЗначенияСвойств.Найти(ПереносимыеСвойства.Руководитель,"Свойство");
				
				Если СвойствоРуководитель <> Неопределено Тогда
					
					ДокументОбъект.Руководитель = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоРуководитель.Значение,
						Выборка.Ссылка
					);
					
					Если ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоРуководитель.Свойство);
						
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтКонтрагента) Тогда 
					
					ДокументОбъект.Руководитель = ДокументОбъект.ПодписантОтКонтрагента
					
				КонецЕсли;
				
			КонецЕсли;
	
			Если Не ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда	
				
				СвойствоГлавныйБухгалтер = ЗначенияСвойств.Найти(ПереносимыеСвойства.ГлавныйБухгалтер,"Свойство");
				
				Если СвойствоГлавныйБухгалтер <> Неопределено Тогда
					
					ДокументОбъект.ГлавныйБухгалтер = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоГлавныйБухгалтер.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоГлавныйБухгалтер.Свойство); 
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда	
				
				СвойствоОтпустил = ЗначенияСвойств.Найти(ПереносимыеСвойства.ОтпустилКонтрагент,"Свойство");
				
				Если СвойствоОтпустил <> Неопределено Тогда
					
					ДокументОбъект.Отпустил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоОтпустил.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоОтпустил.Свойство);
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда	
				
				СвойствоПолучил = ЗначенияСвойств.Найти(ПереносимыеСвойства.Получил,"Свойство");
				
				Если СвойствоПолучил <> Неопределено Тогда
					
					ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоПолучил.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоПолучил.Свойство);
						
					КонецЕсли; 
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтОрганизации) Тогда 
					
					ДокументОбъект.Получил = ДокументОбъект.ПодписантОтОрганизации;
					
				КонецЕсли;
				
			КонецЕсли; 

			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
				
				СвойствоДоверенность = ЗначенияСвойств.Найти(ПереносимыеСвойства.Доверенность,"Свойство");
				
				Если СвойствоДоверенность <> Неопределено Тогда

					Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
							СвойствоДоверенность.Значение.Владелец,
							Выборка.Ссылка,
							СвойствоДоверенность.Значение
						);
						
						Если ЗначениеЗаполнено(ДокументОбъект.Получил)  И значениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство);
							
						КонецЕсли; 
						
					ИначеЕсли ДокументОбъект.Получил.Подписант = СвойствоДоверенность.Значение.Владелец
						И  НЕ ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
						
						ПолучилОбъект = ДокументОбъект.Получил.ПолучитьОбъект();
						ПолучилОбъект.Основание = СвойствоДоверенность.Значение;  
						
						Попытка	
							ПолучилОбъект.Записать(); 
						Исключение	
						КонецПопытки;
						
						Если ЗначениеЗаполнено(ПолучилОбъект.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство); 
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Принял) Тогда
				СвойствоДоверенность = ЗначенияСвойств.Найти(ПереносимыеСвойства.Доверенность,"Свойство");
				
				Если СвойствоДоверенность <> Неопределено Тогда
										
					ДокументОбъект.Принял = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоДоверенность.Значение.Владелец,
						Выборка.Ссылка,
						СвойствоДоверенность.Значение
					);
						
					Если ЗначениеЗаполнено(ДокументОбъект.Принял)  И значениеЗаполнено(ДокументОбъект.Принял.Основание) Тогда
							
						СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство);
							
					КонецЕсли; 
					
				КонецЕсли;
					
			КонецЕсли;
			
			Если СвойстваКУдалению.Количество()>0 Тогда  
				
				Для Каждого Элемент Из СвойстваКУдалению Цикл 
					
					Строка = ДокументОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
					Если Строка <> Неопределено Тогда 
						
						ДокументОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение 
			
			ОтменитьТранзакцию();
			ПеренесеныВсеСвойства = Ложь;

			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления списка подписантов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ПеренесеныВсеСвойства Тогда
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Набор
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка.ИмяПредопределенныхДанных = ""Документ_ПоступлениеДопРасходов""";
		
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();	
			
			Пока Выборка.Следующий() Цикл
				
				Попытка	
					НаборОбъект = Выборка.Набор.ПолучитьОбъект();
					
					Для Каждого Элемент Из МассивПереносимыхСвойств Цикл 
					
						Строка = НаборОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
						Если Строка <> Неопределено Тогда 
						
							НаборОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
						КонецЕсли;
					
					КонецЦикла;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборОбъект);
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось обработать справочник: ""НаборыДополнительныхРеквизитовИСведений"" по причине:
							|%1'"), 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений, "НаборыДополнительныхРеквизитовИСведений", ТекстСообщения);
				КонецПопытки;	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры	

// Выполяет проверку выполнения отложенного обработчика обновления ВыполнитьПереносПодписантовИзСвойств
//
// Параметры:
//  Параметры - Структура - параметры выполнения операции
//
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ПроверитьПереносПодписантовИзСвойств(Параметры) Экспорт
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеДопРасходовДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ПоступлениеДопРасходовДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.ДополнительныеРеквизиты КАК ПоступлениеДопРасходовДополнительныеРеквизиты
	|ГДЕ
	|	ПоступлениеДопРасходовДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)
	|	И ПоступлениеДопРасходовДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства));
	Запрос.УстановитьПараметр("Ссылка",				 Параметры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
	    Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетФактураПолученный);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЧекНаОплату); 
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЗаявкаНаРасходДС); 
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// см. СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ПоступлениеДопРасходов);

КонецФункции

#КонецОбласти 

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ПоступлениеДопРасходов",
		"ПФ_MXL_ПоступлениеДопРасходов",
		НСтр("ru = 'Поступление дополнительных расходов'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ12",
		НСтр("ru = 'ТОРГ-12 (Товарная накладная за поставщика)'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов - Массив из ДокументСсылка.ПоступлениеДопРасходов - массив объектов для формирования печатных форм;
//  ПараметрыПечати - Структура - дополнительные параметры печати
//  КоллекцияПечатныхФорм - ТаблицаЗначений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати - Структура - список областей печатной формы в разрезе документов
//  ПараметрыВывода - Структура - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПоступлениеДопРасходов") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ПоступлениеДопРасходов",
			НСтр("ru = 'Поступление доп расходов'"),
			ПечатьПоступлениеДопРасходов(МассивОбъектов, ОбъектыПечати)
		);
	
	КонецЕсли;
	
КонецПроцедуры

// Формирует печатную форму "ПоступлениеДопРасходов"
//
Функция ПечатьПоступлениеДопРасходов(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеДопРасходов_ПоступлениеДопРасходов";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
		
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПоступлениеДопРасходов.ПФ_MXL_ПоступлениеДопРасходов");
		
		ОбластьШапкаТаблицы    = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// Вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ,
			НСтр("ru = 'Поступление доп. расходов'"));
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПокупателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Контрагент, , ДополнительныеПараметры);
	
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);

		// Готовим шапку
		НомерСтраницы = 2; НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего", Документ.ВалютаДокумента, 0, 0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// Готовим области строки
		ВыборкаТабличнойЧасти = Документ.Товары;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,
				УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ));
			
			// Доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество()-1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				НомерСтраницыПред		  = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// Итоги
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("СуммаВсего");
		ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		НДСВсего = ВыборкаТабличнойЧасти.Итог("СуммаНДС");
		ОбластьПодвал.Параметры.НДСВсего = Формат(НДСВсего, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'") + Символы.НПП
			+ ВыборкаТабличнойЧасти.Количество() + Символы.НПП + НСтр("ru = 'на сумму'") + Символы.НПП
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего,Документ.ВалютаДокумента);
	
		// Выводим представления и расшифровки подписей.
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ОтпустилКонтрагент", "ОтпустилКонтрагент"));
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Получил", "Получил"));
		
		УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент,ОбластьПодвал,,,НомерСтраницы,,Документ);
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции //ПечатьПоступлениеДопРасходов()

Функция ПолучитьДанныеДляПечатиТОРГ12(Объект) Экспорт
	ДанныеОбъекта = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПоступлениеДопРасходовТовары.НомерСтроки КАК НомерСтроки,
	               |	ПоступлениеДопРасходовТовары.Номенклатура КАК Номенклатура,
				   |	ПоступлениеДопРасходовТовары.Содержание КАК Содержание,
	               |	ПоступлениеДопРасходовТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ПоступлениеДопРасходовТовары.Количество КАК Количество,
	               |	ПоступлениеДопРасходовТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ПоступлениеДопРасходовТовары.Коэффициент КАК Коэффициент,
	               |	ПоступлениеДопРасходовТовары.Цена КАК Цена,
	               |	ПоступлениеДопРасходовТовары.Сумма КАК Сумма,
	               |	ПоступлениеДопРасходовТовары.СтавкаНДС КАК СтавкаНДС,
	               |	ПоступлениеДопРасходовТовары.СуммаНДС КАК СуммаНДС,
	               |	ПоступлениеДопРасходовТовары.СуммаВсего КАК СуммаВсего,
	               |	ПоступлениеДопРасходовТовары.Количество * ПоступлениеДопРасходовТовары.Коэффициент КАК КоличествоБазовое,
	               |	ПоступлениеДопРасходовТовары.Номенклатура.Артикул КАК Код,
	               |	ПоступлениеДопРасходовТовары.СуммаВсего - ПоступлениеДопРасходовТовары.СуммаНДС КАК СуммаБезНДС
	               |ИЗ
	               |	Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
	               |ГДЕ
	               |	ПоступлениеДопРасходовТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	ПодготовленнаяТЧ = Запрос.Выполнить().Выгрузить();
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Контрагент);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"          , Объект.КурсДокумента);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("ДокументОснование"      , Объект.ДоговорВзаиморасчетов);
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти"  , ПодготовленнаяТЧ);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  , Неопределено);
	ДанныеОбъекта.Вставить("ОснованиеДата"          , Формат(Объект.ДоговорВзаиморасчетов.ДатаНачала, "ЧЦ=; ДФ=dd.MM.yyyy"));
	ДанныеОбъекта.Вставить("ОснованиеНомер"         , Объект.ДоговорВзаиморасчетов.НомерДоговора);
	ДанныеОбъекта.Вставить("КодПоОКПО"              , Объект.Контрагент.КодПоОКПО);
	ДанныеОбъекта.Вставить("РасчетныйСчетДокумента" ,"");
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПоставщикКонтрагент);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Плательщик);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства);

	ДатаОтгрузки = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", ЗначенияСвойствОбъекта);
	ДанныеОбъекта.Вставить("ДатаОтгрузки",
		?(НЕ ЗначениеЗаполнено(ДатаОтгрузки), """___""____________ 20___", Формат(ДатаОтгрузки, "ДЛФ=DD"))
	);
	ДанныеОбъекта.Вставить("Поставщик"             , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ПоставщикКонтрагент", ЗначенияСвойствОбъекта,Объект.Организация));
	ДанныеОбъекта.Вставить("Плательщик"            , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Плательщик", ЗначенияСвойствОбъекта,Объект.Контрагент));
		
	ДанныеОбъекта.Вставить("Грузоотправитель"      , ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, Объект.Организация));
	ДанныеОбъекта.Вставить("Грузополучатель"       , ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, Объект.Контрагент));
	
	ДанныеОбъекта.Вставить("ГрузополучательПоОКПО" , ?(ТипЗнч(ДанныеОбъекта.Грузополучатель) = Тип("СправочникСсылка.ПодразделенияКомпании"), ДанныеОбъекта.Грузополучатель.Организация.КодПоОКПО, ДанныеОбъекта.Грузополучатель.КодПоОКПО));
	ДанныеОбъекта.Вставить("ПоставщикПоОКПО"       , ДанныеОбъекта.Поставщик.КодПоОКПО);
	ДанныеОбъекта.Вставить("ПлательщикПоОКПО"      , ?(ТипЗнч(ДанныеОбъекта.Плательщик) = Тип("СправочникСсылка.ПодразделенияКомпании"), ДанныеОбъекта.Плательщик.Организация.КодПоОКПО, ДанныеОбъекта.Плательщик.КодПоОКПО));
	
	ДанныеОбъекта.Вставить("Руководитель"     	   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Руководитель"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 	   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Отпустил"         	   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Отпустил"));
	ДанныеОбъекта.Вставить("Принял"         	   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Принял"));
	ДанныеОбъекта.Вставить("Получил"          	   , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Получил"));
	ДанныеОбъекта.Вставить("ЭтоПродажа", Ложь);
	
	Возврат ДанныеОбъекта;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений дополнительных расходов на автомобили.
//
// Параметры:
//  ТаблицаАвтомобилей      - Таблица значений - таблица автомобилей.
//  Ссылка					- ДокументСсылка.ПоступлениеДопРасходов - Документ, для которого производится расчет
//  Отказ					- Булево.
//
Процедура РассчетДополнительныхРасходовНаАвтомобили(
	ТаблицаАвтомобилей,
	Ссылка,
	Объект,
	Отказ,
	РасчетыСКонтрагентами = Неопределено) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Скопируем таблицу т\с
	ВремТабл = ТаблицаАвтомобилей.Скопировать();
	
	Попытка
		ВремТабл.Колонки.Добавить("ДопРасходы",			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ВремТабл.Колонки.Добавить("НДСДопРасходов",		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ВремТабл.Колонки.Добавить("СтавкаНДС",			Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	Исключение 
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка добавления колонки'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	// очистим таблицу
	ВремТабл.Очистить();
	МетаданныеДокумента = Ссылка.Метаданные();
	
	Запрос	= Новый Запрос("
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ВЫБОР КОГДА ДокументТовары.Номенклатура.СпособРаспределенияДопРасходов=&ПоСумме ТОГДА ДокументТовары.СуммаВсего ИНАЧЕ 0 КОНЕЦ,0)) КАК ПоСумме,
	|	СУММА(ЕСТЬNULL(ВЫБОР КОГДА ДокументТовары.Номенклатура.СпособРаспределенияДопРасходов=&ПоСумме ТОГДА ДокументТовары.СуммаНДС ИНАЧЕ 0 КОНЕЦ,0)) КАК ПоСуммеНДС,
	|	СУММА(ЕСТЬNULL(ВЫБОР КОГДА ДокументТовары.Номенклатура.СпособРаспределенияДопРасходов=&ПоКоличеству ТОГДА ДокументТовары.СуммаНДС ИНАЧЕ 0 КОНЕЦ,0)) КАК ПоКоличествуНДС,
	|	СУММА(ЕСТЬNULL(ВЫБОР КОГДА ДокументТовары.Номенклатура.СпособРаспределенияДопРасходов=&ПоКоличеству ТОГДА ДокументТовары.СуммаВсего ИНАЧЕ 0 КОНЕЦ,0)) КАК ПоКоличеству,
	|	СУММА(ЕСТЬNULL(ВЫБОР КОГДА ДокументТовары.Номенклатура.СпособРаспределенияДопРасходов=&ПоВесу ТОГДА ДокументТовары.СуммаНДС ИНАЧЕ 0 КОНЕЦ,0)) КАК ПоВесуНДС,
	|	СУММА(ЕСТЬNULL(ВЫБОР КОГДА ДокументТовары.Номенклатура.СпособРаспределенияДопРасходов=&ПоВесу ТОГДА ДокументТовары.СуммаВсего ИНАЧЕ 0 КОНЕЦ,0)) КАК ПоВесу,
	|	ДокументТовары.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ." + МетаданныеДокумента.Имя + ".Товары КАК ДокументТовары
	|ГДЕ
	|	  ДокументТовары.Ссылка=&Ссылка
	|	И ДокументТовары.Номенклатура.СпособРаспределенияДопРасходов<>&НаДоходыРасходы
	|	И ДокументТовары.Номенклатура.ВидНоменклатуры=&Услуга
	|	" + ?(МетаданныеДокумента = Метаданные.Документы.ПоступлениеДопРасходов, 
								"И ДокументТовары.СпособРаспределения = 0", "") + "
	|СГРУППИРОВАТЬ ПО
	|	ДокументТовары.СтавкаНДС
	|");
	
	Запрос.УстановитьПараметр("Ссылка",			Ссылка);
	Запрос.УстановитьПараметр("ПоСумме",		Перечисления.СпособыРаспределенияДопРасходов.ПоСумме);
	Запрос.УстановитьПараметр("ПоКоличеству",	Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству);
	Запрос.УстановитьПараметр("ПоВесу",			Перечисления.СпособыРаспределенияДопРасходов.ПоВесу);
	Запрос.УстановитьПараметр("НаДоходыРасходы",Перечисления.СпособыРаспределенияДопРасходов.НаДоходыИРасходы);
	Запрос.УстановитьПараметр("Услуга",			Перечисления.ВидыНоменклатуры.Услуга);
	РезультатДопРасходы	= Запрос.Выполнить();
	
	Если РезультатДопРасходы.Пустой() Тогда 
		ТаблицаАвтомобилей	= ВремТабл;
		Возврат;
	КонецЕсли;
	ВыборкаДопРасходы		= РезультатДопРасходы.Выбрать();
	
	Пока ВыборкаДопРасходы.Следующий() Цикл
		
		ИтогДопРасходы	= ?(ВыборкаДопРасходы.ПоКоличеству = NULL, 0, ВыборкаДопРасходы.ПоКоличеству) 
			+ ?(ВыборкаДопРасходы.ПоСумме = NULL, 0, ВыборкаДопРасходы.ПоСумме) 
				+ ?(ВыборкаДопРасходы.ПоВесу = NULL, 0, ВыборкаДопРасходы.ПоВесу);
		Если ИтогДопРасходы	= 0 Тогда 
			ТаблицаАвтомобилей = ВремТабл; 
			Возврат; 
		КонецЕсли;
		ИтогДопРасходыНДС = ?(ВыборкаДопРасходы.ПоКоличествуНДС = NULL, 0, ВыборкаДопРасходы.ПоКоличествуНДС)
			+ ?(ВыборкаДопРасходы.ПоСуммеНДС = NULL, 0, ВыборкаДопРасходы.ПоСуммеНДС) 
				+ ?(ВыборкаДопРасходы.ПоВесуНДС = NULL, 0, ВыборкаДопРасходы.ПоВесуНДС);
		
		Если ВыборкаДопРасходы.ПоВесу <> 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Поступление доп. расходов по весу для автомобилей недопустимо.'"), 
																												Объект,,, Отказ);
			ТаблицаАвтомобилей = ВремТабл;
			Отказ = Истина; 
			Возврат;
		КонецЕсли; 
		
		ИтогДокументКоличество	= ТаблицаАвтомобилей.Итог("Количество");
		ИтогДокументСумма		= ТаблицаАвтомобилей.Итог("СуммаВсего"); 
		
		Для Каждого СтрокаАвтомобильИсх Из ТаблицаАвтомобилей Цикл
			
			СтрокаАвтомобиль 			= ВремТабл.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаАвтомобиль,СтрокаАвтомобильИсх);
			
			СтрокаАвтомобиль.СтавкаНДС	= ВыборкаДопРасходы.СтавкаНДС;
			
			СуммаДопРасходов			= 0; 
			СуммаНДСДопРасходов			= 0;
			
			СуммаДопРасходовК			= ВыборкаДопРасходы.ПоКоличеству * ?(ИтогДокументКоличество = 0, 0,
																СтрокаАвтомобильИсх.Количество / ИтогДокументКоличество);
			СуммаНДСДопРасходовК		= ВыборкаДопРасходы.ПоКоличествуНДС * ?(ИтогДокументКоличество = 0, 0,
																СтрокаАвтомобильИсх.Количество / ИтогДокументКоличество);
			
			СуммаДопРасходовС			= ВыборкаДопРасходы.ПоСумме * ?(СтрокаАвтомобиль.СуммаВсего = NULL 
									ИЛИ ИтогДокументСумма = 0, 0, СтрокаАвтомобильИсх.СуммаВсего / ИтогДокументСумма);
			СуммаНДСДопРасходовС		= ВыборкаДопРасходы.ПоСуммеНДС * ?(СтрокаАвтомобиль.СуммаВсего = NULL 
									ИЛИ ИтогДокументСумма = 0, 0, СтрокаАвтомобильИсх.СуммаВсего / ИтогДокументСумма);
			
			СтрокаАвтомобиль.ДопРасходы		= СуммаДопРасходовК + СуммаДопРасходовС;
			СтрокаАвтомобиль.НДСДопРасходов = СуммаНДСДопРасходовК + СуммаНДСДопРасходовС;
			
			ИтогДопРасходы 				= ИтогДопРасходы - (СтрокаАвтомобиль.ДопРасходы);
			ИтогДопРасходыНДС 			= ИтогДопРасходыНДС - (СтрокаАвтомобиль.НДСДопРасходов);
			
		КонецЦикла;
		
		// если осталась сумма от округления то закинем ее на последний
		Если ИтогДопРасходы <> 0 ИЛИ ИтогДопРасходыНДС <> 0 Тогда
			Попытка
				СтрокаАвтомобиль.ДопРасходы			= СтрокаАвтомобиль.ДопРасходы + ИтогДопРасходы;
				СтрокаАвтомобиль.НДСДопРасходов		= СтрокаАвтомобиль.НДСДопРасходов + ИтогДопРасходыНДС;
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка заполнения доп. расходов'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	ТаблицаАвтомобилей = ВремТабл;
	
	// Распределим сумму по взиморасчетам
	Если РасчетыСКонтрагентами <> Неопределено Тогда
		
		КопияАвтомобилей = ТаблицаАвтомобилей.Скопировать();
		КопияАвтомобилей.ЗагрузитьКолонку(КопияАвтомобилей.ВыгрузитьКолонку("ДопРасходы"), "Сумма");
		КопияАвтомобилей.ЗагрузитьКолонку(КопияАвтомобилей.ВыгрузитьКолонку("ДопРасходы"), "СуммаВсего");
		КопияАвтомобилей.ЗагрузитьКолонку(КопияАвтомобилей.ВыгрузитьКолонку("НДСДопРасходов"), "СуммаНДС");
		
		ОстатокСуммы = Объект.Товары.Итог("СуммаВсего") - КопияАвтомобилей.Итог("Сумма");
		
		Если ОстатокСуммы > 0 Тогда
			НоваяСтрока = КопияАвтомобилей.Добавить();
			НоваяСтрока.Сумма = ОстатокСуммы;
			НоваяСтрока.СуммаВсего = ОстатокСуммы;
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл, Объект.Дата);
		КурсРегл = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		
		СведенияОВалюте = Новый Структура();
		СведенияОВалюте.Вставить("ВалютаДоговора", Объект.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов);
		СведенияОВалюте.Вставить("ВалютаРегл", Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить());
		СведенияОВалюте.Вставить("ВалютаУпр", Константы.ВалютаУправленческогоУчетаКомпании.Получить());
		СведенияОВалюте.Вставить("КурсРегл", КурсРегл);
		СведенияОВалюте.Вставить("КурсУпр", Объект.КурсВалютыУпр);
		
		ПересчитаныСуммы = ОбработкаСобытийДокументаСервер.ПересчитанаВВалюту(
			Объект,
			КопияАвтомобилей,
			РасчетыСКонтрагентами,
			СведенияОВалюте,
			Ложь);
		
		Если ОстатокСуммы > 0 Тогда
			КопияАвтомобилей.Удалить(НоваяСтрока);
		КонецЕсли;
		
		// Перезаполним таблице суммовые показатели
		ТаблицаАвтомобилей.Колонки.Добавить("ДопРасходыУпр");
		ТаблицаАвтомобилей.Колонки.Добавить("НДСДопРасходовУпр");
		ТаблицаАвтомобилей.ЗагрузитьКолонку(КопияАвтомобилей.ВыгрузитьКолонку("Сумма"), "ДопРасходы");
		ТаблицаАвтомобилей.ЗагрузитьКолонку(КопияАвтомобилей.ВыгрузитьКолонку("СуммаНДС"), "НДСДопРасходов");
		
		Если ПересчитаныСуммы Тогда
			ИмяКолонкиСуммаУпр = "СуммаУпр";
			ИмяКолонкиСуммаНДСУпр = "СуммаНДСУпр";
		Иначе
			ИмяКолонкиСуммаУпр = "Сумма";
			ИмяКолонкиСуммаНДСУпр = "СуммаНДС";
		КонецЕсли;
		
		ТаблицаАвтомобилей.ЗагрузитьКолонку(КопияАвтомобилей.ВыгрузитьКолонку(ИмяКолонкиСуммаУпр), "ДопРасходыУпр");
		ТаблицаАвтомобилей.ЗагрузитьКолонку(КопияАвтомобилей.ВыгрузитьКолонку(ИмяКолонкиСуммаНДСУпр), "НДСДопРасходовУпр");
		
	КонецЕсли;
	
КонецПроцедуры // РассчетДополнительныхРасходовНаАвтомобили()

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Товары.Итог("СуммаВсего"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС",    Объект.Товары.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента - ИтогиОперации.СуммаНДС);
		
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Процедура получения документов оснований и номенклатуры
//
Функция ПолучитьНоменклатуруПоОснованиям(СписокДокументовОснований) Экспорт
	
	ТаблицаРезультат = Неопределено;
	
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр,ТекущаяДатаСеанса());
	КурсУпр = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	Для Каждого ТекущийДокумент Из СписокДокументовОснований Цикл
		
		// комиссионные документы не рассматриваем для распределения
		Если НЕ ЗначениеЗаполнено(ТекущийДокумент.ДокументОснование) ИЛИ ТекущийДокумент.ДокументОснование.ХозОперация.Комиссия Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяДокумента = ТекущийДокумент.ДокументОснование.Метаданные().Имя;
		
		Запрос = Новый Запрос;
		
		Если ИмяДокумента = "Комплектация" Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	Комплектация.Ссылка КАК ДокументОснование,
			               |	Комплектация.Комплект КАК Номенклатура,
			               |	Комплектация.ХарактеристикаКомплекта КАК ХарактеристикаНоменклатуры,
			               |	Комплектация.КомплектЕдиницаИзмерения КАК ЕдиницаИзмерения,
			               |	Комплектация.КомплектЕдиницаИзмерения.Коэффициент КАК Коэффициент,
			               |	Комплектация.КоличествоКомплектов * Комплектация.КомплектЕдиницаИзмерения.Коэффициент КАК Количество,
			               |	Комплектация.КоличествоКомплектов * Комплектация.Комплект.Вес КАК Вес,
			               |	Комплектация.КоличествоКомплектов * Комплектация.КомплектЕдиницаИзмерения.Коэффициент * Комплектация.ЦенаКомплекта КАК СуммаВсего,
			               |	0 КАК СуммаНДС,
			               |	ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка) КАК ГТД
			               |ИЗ
			               |	Документ.Комплектация КАК Комплектация
			               |ГДЕ
			               |	Комплектация.Ссылка = &ДокументОснование";
		ИначеЕсли ИмяДокумента = "ВводОстатковАвтомобилей" ИЛИ ИмяДокумента = "ПеремещениеАвтомобилей" ИЛИ ИмяДокумента = "ПоступлениеАвтомобилей" Тогда
			
			ТекстЗапроса = "ВЫБРАТЬ
			|	ДокументАвтомобили.Ссылка КАК ДокументОснование,
			|	ДокументАвтомобили.Автомобиль КАК Номенклатура,
			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры,
			|	ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,
			|	1 КАК Коэффициент,
			|	1 КАК Количество,
			|	1 КАК Вес,
			|	ДокументАвтомобили.СуммаВсего КАК СуммаВсего,
			|	"+?(ЕстьРеквизит(ТекущийДокумент.ДокументОснование, "СуммаНДС", "Автомобили"), "ДокументАвтомобили.СуммаНДС", "0")+" КАК СуммаНДС,
			|	"+?(ЕстьРеквизит(ТекущийДокумент.ДокументОснование, "ГТД", "Автомобили"), "ДокументАвтомобили.ГТД", "ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)")+" КАК ГТД
			|ИЗ
			|	Документ."+ИмяДокумента+".Автомобили КАК ДокументАвтомобили
			|ГДЕ
			|	ДокументАвтомобили.Ссылка = &ДокументОснование";
			
		ИначеЕсли ИмяДокумента = "ЗаказНаряд" Тогда
			
			ТекстЗапроса = "ВЫБРАТЬ
			|	ОстаткиАвтомобилей.Регистратор КАК ДокументОснование,
			|	ОстаткиАвтомобилей.Автомобиль КАК Номенклатура,
			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры,
			|	ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,
			|	1 КАК Коэффициент,
			|	1 КАК Количество,
			|	1 КАК Вес,
			|	ОстаткиАвтомобилей.Сумма КАК СуммаВсего,
			|	ОстаткиАвтомобилей.СуммаНДС КАК СуммаНДС,
			|	ОстаткиАвтомобилей.Автомобиль.ГТД КАК ГТД
			|ИЗ
			|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
			|ГДЕ
			|	ОстаткиАвтомобилей.Регистратор = &ДокументОснование
			|	И ОстаткиАвтомобилей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)";
			
		Иначе
			
			СуммаВсего = "";
			
			Если ИмяДокумента = "ТаможеннаяДекларацияИмпорт" Тогда
				СуммаВсего = "ДокументТовары.СуммаПошлины + ДокументТовары.СуммаНДС";
			ИначеЕсли ИмяДокумента = "Разукомплектация" Тогда
				СуммаВсего = "ДокументТовары.Количество * ДокументТовары.Цена";
			КонецЕсли;
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДокументТовары.Ссылка КАК ДокументОснование,
			|	ДокументТовары.Номенклатура КАК Номенклатура,
			|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	ДокументТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ДокументТовары.Коэффициент КАК Коэффициент,
			|	ДокументТовары.Количество * ДокументТовары.Коэффициент КАК Количество,
			|	ДокументТовары.Номенклатура.Вес * ДокументТовары.Количество КАК Вес,
			|	"+?(ЗначениеЗаполнено(СуммаВсего), СуммаВсего, "ДокументТовары.СуммаВсего")+" КАК СуммаВсего,
			|	"+?(ЕстьРеквизит(ТекущийДокумент.ДокументОснование, "СуммаНДС", "Товары"), "ДокументТовары.СуммаНДС", "0")+" КАК СуммаНДС,
			|	"+?(ЕстьРеквизит(ТекущийДокумент.ДокументОснование, "ГТД", "Товары"), "ДокументТовары.ГТД", "ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)")+" КАК ГТД
			|ИЗ
			|	Документ."+ИмяДокумента+".Товары КАК ДокументТовары
			|ГДЕ
			|	ДокументТовары.Ссылка = &ДокументОснование
			|	И НЕ ДокументТовары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДокументОснование", ТекущийДокумент.ДокументОснование);
		
		Запрос.Текст = ТекстЗапроса;
		
		// Рассчитаем сумму в упр валюте
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		// Для перемещения автомобилей сформируем суммы автомобилей
		Если ИмяДокумента = "ПеремещениеАвтомобилей" Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПеремещениеАвтомобилейАвтомобили.Автомобиль КАК Автомобиль,
			|	СУММА(ЕСТЬNULL(ОстаткиАвтомобилей.СуммаУпр, 0)) + СУММА(ЕСТЬNULL(КомплектацияАвтомобилейОстатки.СуммаУпрОстаток, 0)) КАК Сумма,
			|	СУММА(ЕСТЬNULL(КомплектацияАвтомобилейОстатки.СуммаНДСОстаток, 0)) + СУММА(ЕСТЬNULL(ОстаткиАвтомобилей.СуммаНДСУпр, 0)) КАК СуммаНДС
			|ИЗ
			|	Документ.ПеремещениеАвтомобилей.Автомобили КАК ПеремещениеАвтомобилейАвтомобили
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
			|		ПО ПеремещениеАвтомобилейАвтомобили.Ссылка = ОстаткиАвтомобилей.Регистратор
			|			И (ОстаткиАвтомобилей.Автомобиль = ПеремещениеАвтомобилейАвтомобили.Автомобиль)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КомплектацияАвтомобилей.Остатки(&НаДату, ) КАК КомплектацияАвтомобилейОстатки
			|		ПО (ОстаткиАвтомобилей.Автомобиль = КомплектацияАвтомобилейОстатки.Автомобиль)
			|ГДЕ
			|	ОстаткиАвтомобилей.Регистратор = &ВыбРегистратор
			|	И ПеремещениеАвтомобилейАвтомобили.Ссылка = &ВыбРегистратор
			|	И ОстаткиАвтомобилей.ВидДвижения = &ВидДвиженияРегистра
			|
			|СГРУППИРОВАТЬ ПО
			|	ПеремещениеАвтомобилейАвтомобили.Автомобиль";
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("НаДату", ТекущийДокумент.ДокументОснование.Дата);
			
			Запрос.УстановитьПараметр("ВидДвиженияРегистра", ?(ТекущийДокумент.ДокументОснование.ХозОперация = Справочники.ХозОперации.ПеремещениеАвтомобилейИзФилиала, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход));
			Запрос.УстановитьПараметр("ВыбРегистратор", ТекущийДокумент.ДокументОснование.Ссылка);
			
			ТаблицаСуммАвтомобилей = Запрос.Выполнить().Выгрузить();
			
			Для Каждого ТекущаяСтрока Из РезультатЗапроса Цикл
				НайденныеСтроки = ТаблицаСуммАвтомобилей.Найти(ТекущаяСтрока.Номенклатура, "Автомобиль");
				Если НайденныеСтроки <> Неопределено Тогда
					ТекущаяСтрока.СуммаВсего = НайденныеСтроки.Сумма;
					ТекущаяСтрока.СуммаНДС   = НайденныеСтроки.СуммаНДС;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Если ИмяДокумента = "ЗаказНаряд" Тогда
				ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
				КурсДокумента   = ТекущийДокумент.ДокументОснование.Дата;
			Иначе
				ВалютаДокумента = ТекущийДокумент.ДокументОснование.ВалютаДокумента;
				КурсДокумента   = ТекущийДокумент.ДокументОснование.КурсДокумента;
			КонецЕсли;
			
			Для Каждого ТекущаяСтрока Из РезультатЗапроса Цикл
				ТекущаяСтрока.СуммаВсего = Окр(
					РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
						ТекущаяСтрока.СуммаВсего,
						ВалютаДокумента,
						КурсДокумента,
						ВалютаУпр,
						КурсУпр),
					2);
				ТекущаяСтрока.СуммаНДС   = Окр(
					РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
						ТекущаяСтрока.СуммаНДС,
						ВалютаДокумента,
						КурсДокумента,
						ВалютаУпр,
						КурсУпр),
					2);
			КонецЦикла;
		КонецЕсли;
		
		Если ТаблицаРезультат = Неопределено Тогда
			ТаблицаРезультат = РезультатЗапроса.СкопироватьКолонки();
			ТаблицаРезультат.Колонки.Удалить(0);
			МассивТипов = Новый Массив;
			МассивТипов.Добавить("ДокументСсылка.ПеремещениеТоваров");
			МассивТипов.Добавить("ДокументСсылка.Комплектация");
			МассивТипов.Добавить("ДокументСсылка.ТаможеннаяДекларацияИмпорт");
			МассивТипов.Добавить("ДокументСсылка.АвансовыйОтчет");
			МассивТипов.Добавить("ДокументСсылка.ПоступлениеТоваров");
			МассивТипов.Добавить("ДокументСсылка.Разукомплектация");
			ТаблицаРезультат.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов(МассивТипов));
		КонецЕсли;
		Для Каждого ТекущаяСтрока Из РезультатЗапроса Цикл
			НоваяСтрока = ТаблицаРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции // ПолучитьНоменклатуруПоОснованиям()

Функция ТабличныеЧастиСНДС() Экспорт
	
	Результат = Новый Массив();
	Результат.Добавить(Метаданные.Документы.ПоступлениеДопРасходов.ТабличныеЧасти.Товары);
	Возврат Результат;
	
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	ОбязательныеРеквизиты.Добавить("СпособЗачетаАвансов");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("ДокументыОснования");
	ОбязательныеРеквизиты.Добавить("ДокументыОснования.ДокументОснование");
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	Если Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ОбязательныеРеквизиты.Добавить("ЗачетАвансов");
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("ЗачетАвансов.ДокументАванса");
	ОбязательныеРеквизиты.Добавить("ЗачетАвансов.Сумма");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары=Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти=Новый Структура();
	УникальныеТабличныеЧасти.Вставить("Товары",УникальныеТовары);
	
	// Уникальные поля таблицы Документ основание
	УникальныеТовары=Новый Массив();
	УникальныеТовары.Добавить("ДокументОснование");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти.Вставить("ДокументыОснования",УникальныеТовары);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	
	Если Объект.ДокументыОснования.Количество() > 0 Тогда
		
		КонтролируемыеРеквизитыТЧ = Новый Структура("ДокументОснование", КонтрольПоПодразделению);
		КонтролируемыеРеквизиты.Вставить("ДокументыОснования",  КонтролируемыеРеквизитыТЧ);
		
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	ПараметрыДействия.Вставить("РасчетыСПокупателем", Ложь);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		Если НЕ Объект.ДокументОснование.Проведен Тогда
			
			ТекстСообщения = НСтр("ru='Можно выбирать только проведенные документы.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ДокументОснование");
			
			Объект.ДокументОснование = Неопределено;
			
			Возврат;
			
		КонецЕсли;
		
		Если Объект.ДокументОснование.ХозОперация=Справочники.ХозОперации.ПоступлениеТоваровКомиссия ИЛИ
			Объект.ДокументОснование.ХозОперация=Справочники.ХозОперации.ПоступлениеАвтомобилейКомиссия ИЛИ
			Объект.ДокументОснование.ХозОперация=Справочники.ХозОперации.ПоступлениеАвтомобилейОтветственноеХранение Тогда
			
			ТекстСообщения = НСтр("ru='Доп. расходы при поступлении на комиссию/ответхранение не начисляются.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ДокументОснование");
			
			Объект.ДокументОснование = Неопределено;
			
			Возврат;
			
		КонецЕсли;
		
		Если Объект.ДокументОснование.ХозОперация = Справочники.ХозОперации.ЗаказНаряд Тогда
			
			Если Не ЗащищенныеФункцииАльфаАвтоСервер.ПодсистемаДоступна("ЗащитаАвтосалон") Тогда
				
				ТекстСообщения =
					НСтр("ru = 'Ввод документа на основании заказ-наряда доступен только с доплнительной лицензией ""Автосалон""'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ДокументОснование");
				Объект.ДокументОснование = Неопределено;
				Возврат;
				
			КонецЕсли;
			
			ЭтоСборкаАвтомобиля =
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "ВидРемонта.ТипРемонта") =
				Перечисления.ТипыРемонта.СборкаАвтомобиля;
			
			Если Не ЭтоСборкаАвтомобиля Тогда
				
				ТекстСообщения =
					НСтр("ru = 'Ввод документа доступен только для заказ-наряда с типом ремонта ""Сборка автомобиля""'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ДокументОснование");
				Объект.ДокументОснование = Неопределено;
				Возврат;
				
			КонецЕсли;
				
			Если Объект.ДокументОснование.Состояние <> Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
				
				ТекстСообщения =
					НСтр("ru = 'Ввод документа доступен только для заказ-наряда в состоянии ""Закрыт""'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ДокументОснование");
				Объект.ДокументОснование = Неопределено;
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Вызываем общий обработчик события
		ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
		
		Если Объект.ХозОперация<>Справочники.ХозОперации.ПоступлениеДопРасходовВнутреннее И
			Объект.ХозОперация<>Справочники.ХозОперации.ПоступлениеДопРасходовНаАвтомобилиВнутреннее Тогда
			
			Если ЕстьРеквизит(Объект.ДокументОснование, "Контрагент") Тогда
				Объект.Контрагент = Объект.ДокументОснование.Контрагент;
				КонтрагентПриИзменении(Объект, ПараметрыДействия);
			КонецЕсли;
			
			Если ЕстьРеквизит(Объект.ДокументОснование, "ДоговорВзаиморасчетов") Тогда
				Объект.ДоговорВзаиморасчетов = Объект.ДокументОснование.ДоговорВзаиморасчетов;
				ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаможеннаяДекларацияИмпортТовары.Партия КАК ДокументОснование
		|ИЗ
		|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпортТовары
		|ГДЕ
		|	ТаможеннаяДекларацияИмпортТовары.Ссылка = &Основание
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаможеннаяДекларацияИмпортТовары.Партия";
		
		Запрос.УстановитьПараметр("Основание", Объект.ДокументОснование);
		
		Основания = Запрос.Выполнить().Выгрузить();
		
		Для Каждого ТекущаяСтрока Из Основания Цикл
			НоваяСтрока = Объект.ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = ТекущаяСтрока.ДокументОснование;
		КонецЦикла;
		
	ИначеЕсли Объект.ДокументыОснования.Количество()=0 ИЛИ Объект.ДокументыОснования.Количество()>0 И ЗначениеЗаполнено(Объект.ДокументыОснования[0].ДокументОснование) Тогда
		НоваяСтрока = Объект.ДокументыОснования.Добавить();
		НоваяСтрока.ДокументОснование = Объект.ДокументОснование;
	ИначеЕсли Объект.ДокументыОснования.Количество()>0 И НЕ ЗначениеЗаполнено(Объект.ДокументыОснования[0].ДокументОснование) Тогда
		Объект.ДокументыОснования[0].ДокументОснование = Объект.ДокументОснование;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Производим корректировку параметров действия
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПараметрыДействия.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

#КонецОбласти

// Проверяет возможность ввода счет-фактуры полученной на основании документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ПоступлениеДопРасходов - документ, для которого выполняется действие.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина, если ввод возможен, Ложь - в противном случае.
//
Функция ВозможенВводСчетФактурыПолученной(ДокументОбъект, ДополнительныеПарметры = Неопределено) Экспорт
	
	Возврат ОбработкаСобытийДокументаСервер.ДокументСодержитСтрокиСНДС(ДокументОбъект, "Товары");
	
КонецФункции

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговора",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов"));
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаДоговора", ДополнительныеПараметры.ДляПроведения.ВалютаДоговора);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПоступлениеДопРасходовТоваров.Организация КАК Организация,
	|	ПоступлениеДопРасходовТоваров.Ссылка КАК Ссылка,
	|	ПоступлениеДопРасходовТоваров.Дата КАК Дата,
	|	ПоступлениеДопРасходовТоваров.ХозОперация КАК ХозОперация,
	|	ПоступлениеДопРасходовТоваров.ДокументОснование КАК ДокументОснование,
	|	ПоступлениеДопРасходовТоваров.Контрагент КАК Контрагент,
	|	ПоступлениеДопРасходовТоваров.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ПоступлениеДопРасходовТоваров.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	ПоступлениеДопРасходовТоваров.Ссылка КАК Сделка,
	|	ПоступлениеДопРасходовТоваров.СуммаДокумента КАК Сумма,
	|	ПоступлениеДопРасходовТоваров.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	ПоступлениеДопРасходовТоваров.ВалютаДокумента КАК ВалютаДокумента,
	|	ПоступлениеДопРасходовТоваров.КурсДокумента КАК КурсДокумента,
	|	ПоступлениеДопРасходовТоваров.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ПоступлениеДопРасходовТоваров.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходовТоваров
	|ГДЕ
	|	ПоступлениеДопРасходовТоваров.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеДопРасходовЗачетАвансов.Ссылка КАК Ссылка,
	|	ПоступлениеДопРасходовЗачетАвансов.НомерСтроки КАК НомерСтроки,
	|	ПоступлениеДопРасходовЗачетАвансов.ДокументАванса КАК ДокументАванса,
	|	ПоступлениеДопРасходовЗачетАвансов.Сумма КАК Сумма
	|ПОМЕСТИТЬ РаспределениеАванса
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.ЗачетАвансов КАК ПоступлениеДопРасходовЗачетАвансов
	|ГДЕ
	|	ПоступлениеДопРасходовЗачетАвансов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр, &ВалютаДоговора)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ХозОперация КАК ХозОперация,
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДоговора КАК ВалютаДоговора,
	|	ДанныеДокумента.Сделка КАК Сделка,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыВзаиморасчетов = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютВзаиморасчетов.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетов.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыВзаиморасчетов
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютВзаиморасчетов
	|		ПО ДанныеДокумента.ВалютаДоговора = КурсыВалютВзаиморасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.ДокументОснование КАК ДокументОснование,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Задолженность.ВалютаДоговора КАК ВалютаДоговора,
	|	Задолженность.Сделка КАК Сделка,
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр
	|ИЗ
	|	Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеАванса.ДокументАванса КАК ДокументАванса,
	|	СУММА(РаспределениеАванса.Сумма) КАК Сумма
	|ИЗ
	|	РаспределениеАванса КАК РаспределениеАванса
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеАванса.ДокументАванса";
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеОбОплате = ПакетЗапроса[0].Выбрать();
	ЗачетАванса = ПакетЗапроса[1].Выгрузить();
	
	Если Не ДанныеОбОплате.Следующий() Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	РасчетыСКонтрагентамиСервер.ДополнитьРасчетыСКонтрагентом(
		РасчетыСКонтрагентами,
		ДанныеОбОплате,
		ЗачетАванса,
		Отказ,
		Ложь);
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗачетАвансов

// Обработчик события возникающего при изменении данных реквизита "Документ аванса" в таблице "ЗачетАвансов".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЗачетАвансовДокументАвансаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	РасчетыСКонтрагентамиСервер.ДокументАвансаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли