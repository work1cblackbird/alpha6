// Модуль документа "Поступление доп. расходов"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ХозОперация=Справочники.ХозОперации.ПоступлениеДопРасходовВнутреннее;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.ПоступлениеАвтомобилей")
		ИЛИ ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.ВводОстатковАвтомобилей")
		ИЛИ ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.ЗаказНаряд") Тогда
		ХозОперация=Справочники.ХозОперации.ПоступлениеДопРасходовНаАвтомобили;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.ПеремещениеАвтомобилей") Тогда
		ХозОперация=Справочники.ХозОперации.ПоступлениеДопРасходовНаАвтомобилиВнутреннее;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.Комплектация")
		ИЛИ ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.Разукомплектация") Тогда
		ХозОперация=Справочники.ХозОперации.ПоступлениеДопРасходовВнутреннее;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
		Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ТаможеннаяДекларацияИмпорт Тогда
			ХозОперация = Справочники.ХозОперации.ПоступлениеДопРасходов;
		ИначеЕсли ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ТаможеннаяДекларацияИмпортАвтомобилей Тогда
			ХозОперация=Справочники.ХозОперации.ПоступлениеДопРасходовНаАвтомобили;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
		ДокументыОснования.Очистить();
		НоваяСтрока = ДокументыОснования.Добавить();
		НоваяСтрока.ДокументОснование=ДокументОснование;
	КонецЕсли;
	
	// очистим таблицу товаров
	Товары.Очистить();
	ЗачетАвансов.Очистить();
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	ЗачетАвансов.Очистить();
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим наличие документов-оснований в ТЧ "ДокументыОснования" и состав документов-оснований,
	// для которых распределены затраты, в ТЧ "РаспределениеРасходов".
	ТаблицаПроверкиОснований = РаспределениеРасходов.Выгрузить(, "ДокументОснование");
	ТаблицаПроверкиОснований.Свернуть("ДокументОснование");
	
	МассивНеИспользуемыхОснований = Новый Массив;
	
	Для Каждого ТекСтрока Из ТаблицаПроверкиОснований Цикл
		
		НайденноеОснование = ДокументыОснования.Найти(ТекСтрока.ДокументОснование, "ДокументОснование");
		
		Если НайденноеОснование = Неопределено Тогда
			МассивНеИспользуемыхОснований.Добавить(ТекСтрока.ДокументОснование);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивНеИспользуемыхОснований.Количество() > 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Таблица <Документы-основания>. В таблице удалены документы-основания, для которых распределена сумма затрат.'"), ЭтотОбъект,,,Отказ);
	КонецЕсли;
	
	// Сверим состав документов-оснований на наличие удаления номенклатур, для которой распределены доп. расходы.
	РазвернутаяТаблицаОснований = Документы.ПоступлениеДопРасходов.ПолучитьНоменклатуруПоОснованиям(ДокументыОснования.Выгрузить(, "ДокументОснование"));
	
	Для Каждого ТекущаяСтрока Из РаспределениеРасходов Цикл
		
		Если НЕ МассивНеИспользуемыхОснований.Найти(ТекущаяСтрока.ДокументОснование) = Неопределено Тогда
			// Для данной ситуации уже выведено сообщение
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ДокументОснование, Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, ГТД");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущаяСтрока);
		СтруктураПоиска.Номенклатура = ТекущаяСтрока.НоменклатураРаспределения;
		НайденнаяНоменклатура = РазвернутаяТаблицаОснований.НайтиСтроки(СтруктураПоиска);
		Если НайденнаяНоменклатура.Количество() = 0 Тогда
			ТекстСообщения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Из документа-основания ""%1"" удалена номенклатура ""%2"", на которую распределена сумма услуги ""%3"".'"), ТекущаяСтрока.ДокументОснование, ТекущаяСтрока.НоменклатураРаспределения, ТекущаяСтрока.Услуга);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,,Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	// сформируем ТЗ с группировкой услуг и сумм
	ТаблицаПроверки = РаспределениеРасходов.Выгрузить(, "КлючСтроки,Сумма,СуммаНДС");
	ТаблицаПроверки.Свернуть("КлючСтроки", "Сумма,СуммаНДС");
	
	// У номенклатуры в табличной части, в обязательном порядке должен быть заполнен реквизит 
	// "СпособРаспределенияДопРасходов".
	Для Каждого ТекСтрока Из Товары Цикл
		Если ТекСтрока.Номенклатура.СпособРаспределенияДопРасходов.Пустая() Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='У номенклатуры не заполнен реквизит ""Способ распределения доп. расходов"". Строка: <%1>'"),
				ТекСтрока.НомерСтроки
			);
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,
				ЭтотОбъект,
				"Товары[" + (ТекСтрока.НомерСтроки-1) + "].СпособРаспределения",
				,
				Отказ
			);
			
		КонецЕсли;
		// Проверим на изменение суммы услуг в табличной части товары и тем,
		// что распределено по табличной части "РаспределениеРасходов".
		Если ТекСтрока.СпособРаспределения = 1 Тогда
			НайденноеРаспределение = ТаблицаПроверки.НайтиСтроки(Новый Структура("КлючСтроки", ТекСтрока.КлючСтроки));
			Если
				НайденноеРаспределение.Количество() > 0
				И (НайденноеРаспределение[0].Сумма <> ТекСтрока.СуммаВсего
					ИЛИ НайденноеРаспределение[0].СуммаНДС <> ТекСтрока.СуммаНДС)
			Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Сумма номенклатуры отличается от суммы распределения дополнительных расходов по товарам. Строка: <%1>'"),
					ТекСтрока.НомерСтроки
				);
				
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщения,
					ЭтотОбъект,
					"Товары[" + (ТекСтрока.НомерСтроки - 1) + "].СпособРаспределения",
					,
					Отказ
				);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) И ДокументыОснования.Количество() > 0 Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
	// Проверим, что указано в качестве аванса не больше, чем сумма документа
	РасчетыСКонтрагентамиСервер.ПроверитьКорректностьЗачетаАвансов(ЭтотОбъект, Отказ);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	КУдалению = Новый Массив();
	
	Для Каждого Строка Из РаспределениеРасходов Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.КлючСтроки) Тогда
			
			КУдалению.Добавить(Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из КУдалению Цикл
		
		РаспределениеРасходов.Удалить(Строка);
		
	КонецЦикла;
	
	ЭтоУниверсальныйДокумент = ЭтоУниверсальныйДокумент
		И Документы.ПоступлениеДопРасходов.ВозможенВводСчетФактурыПолученной(ЭтотОбъект);
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПартиямПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоОстаткамАвтомобилейПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ТипСчетФактуры", "СчетФактураПолученный");
	ОбработкаСобытийДокументаСервер.УдалитьПодчиненныеСФ(ЭтотОбъект, ПараметрыДействия, Отказ);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// формирует движения документа по партионным регистрам
//
// Параметры:
//  Режим           - режим проведения (оперативный/неоперативный)
//  ДокументСсылка  - ссылка на документ который надо допровести по партиям.
//
// Возвращаемое значение:
//  Возвращает Истина - все ОК, ложь - чего-то не так.
//
Функция ПровестиПоПартиям(Режим, ДокументСсылка, Знач СуммаУпр = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	// Установим привилегированные режим, так как один из складов может быть не разрешен.
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДополнительныеСвойства.Свойство("СпособУчетаВзаиморасчетовПоРасчетнымДокументам") Тогда
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам = ДополнительныеСвойства.СпособУчетаВзаиморасчетовПоРасчетнымДокументам;
	Иначе
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
			РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	КонецЕсли;
	
	// получим шапку документа
	ШапкаДокумента = ПолучитьШапкуДокумента(ДокументСсылка);
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
	ДополнительныеСвойства.Вставить("Шапка", ШапкаДокумента);
	
	Если СуммаУпр = Неопределено Тогда
		Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
			РасчетыСКонтрагентами = РасчетыСКонтрагентамиСервер.ДвиженияРасчетовСКонтрагентамиПоДокументу(
				ЭтотОбъект,
				ШапкаДокумента);
			УсловиеОтбора = Новый Структура;
			УсловиеОтбора.Вставить("ТипРасчета", Перечисления.ТипыРасчетов.Оплата);
			УсловиеОтбора.Вставить("ВидДвижения", ВидДвиженияНакопления.Приход);
			СуммыПоРасчетамСКонтрагентом = РасчетыСКонтрагентамиСервер.СуммовыеПоказателиРасчетаСКонтрагентами(
				ДополнительныеСвойства.ТаблицыДвиженийДокумента.РасчетыСКонтрагентами,
				УсловиеОтбора);
			СуммаУпр = СуммыПоРасчетамСКонтрагентом.СуммаУпр;
		Иначе
			СуммаУпр = ШапкаДокумента.СуммаДокумента;
		КонецЕсли;
	КонецЕсли;
	
	// Проверим, если подразделение проводиться по партиям "отложенно", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям=Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	
	Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
		
		НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
		
		Если ВедетсяБалансПоПодразделению Тогда
			
			НаборЗаписейДоходыИРасходы.Подразделение = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
			
		КонецЕсли;
		
		НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьНеоприходованныхПартий;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте = СпособУчетаВзаиморасчетовПоРасчетнымДокументам;
		НаборЗаписейДоходыИРасходы.Расход = СуммаУпр;
		НаборЗаписейДоходыИРасходы.Приход();
		
		Возврат НЕ Отказ;
		
	КонецЕсли;
	
	НаборЗаписейДиР       = Движения.ДоходыИРасходы;
	СуммаДляРаспределения = 0;  // Сумма для распределения по доходам и расходам.
	ФлагУпрВалюты = (ШапкаДокумента.ВалютаДокумента = Константы.ВалютаУправленческогоУчетаКомпании.Получить());
	
	Отказ = Отказ
		ИЛИ НЕ КонтрольОстаткаПартии
		ИЛИ ОстаткиПартийНеКорректны();
	
	Если Отказ Тогда
		
		Возврат НЕ Отказ;
		
	КонецЕсли;
	
	РасчетыСКонтрагентами = РасчетыСКонтрагентамиСервер.ДвиженияРасчетовСКонтрагентамиПоДокументу(
		ЭтотОбъект,
		ШапкаДокумента);
	
	// Запишем движения, которые вручную распределены
	Если РаспределениеРасходов.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоступлениеДопРасходовРаспределениеРасходов.ДокументОснование,
		|	ПоступлениеДопРасходовРаспределениеРасходов.НоменклатураРаспределения КАК Номенклатура,
		|	ПоступлениеДопРасходовРаспределениеРасходов.ХарактеристикаНоменклатуры,
		|	СУММА(ПоступлениеДопРасходовРаспределениеРасходов.Сумма) КАК СуммаВсего,
		|	СУММА(ПоступлениеДопРасходовРаспределениеРасходов.СуммаНДС) КАК СуммаНДС
		|ПОМЕСТИТЬ ДанныеРаспределения
		|ИЗ
		|	Документ.ПоступлениеДопРасходов.РаспределениеРасходов КАК ПоступлениеДопРасходовРаспределениеРасходов
		|ГДЕ
		|	ПоступлениеДопРасходовРаспределениеРасходов.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеДопРасходовРаспределениеРасходов.ДокументОснование,
		|	ПоступлениеДопРасходовРаспределениеРасходов.НоменклатураРаспределения,
		|	ПоступлениеДопРасходовРаспределениеРасходов.ХарактеристикаНоменклатуры 
		|ИМЕЮЩИЕ  
		|СУММА(ПоступлениеДопРасходовРаспределениеРасходов.Сумма)>0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
		
		Если ХозОперация = Справочники.ХозОперации.ПоступлениеДопРасходов ИЛИ ХозОперация = Справочники.ХозОперации.ПоступлениеДопРасходовВнутреннее Тогда
			Запрос.Текст = Запрос.Текст + "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ПартииТоваровКомпании.СкладКомпании КАК СкладКомпании,
			|	ПартииТоваровКомпании.Партия КАК Партия,
			|	ПартииТоваровКомпании.СтатусПартии КАК СтатусПартии,
			|	СУММА(ПартииТоваровКомпании.Количество) КАК Количество,
			|	ПартииТоваровКомпании.СтавкаНДС КАК СтавкаНДС,
			|	СУММА(ПартииТоваровКомпании.Сумма) КАК Сумма,
			|	ПартииТоваровКомпании.Регистратор КАК Регистратор,
			|	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
			|	ПартииТоваровКомпании.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
			|ПОМЕСТИТЬ втПартииТоваровКомпании
			|ИЗ
			|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
			|ГДЕ
			|	(ПартииТоваровКомпании.Регистратор, ПартииТоваровКомпании.Номенклатура, ПартииТоваровКомпании.ХарактеристикаНоменклатуры) В
			|			(ВЫБРАТЬ
			|				ДанныеРаспределения.ДокументОснование,
			|				ДанныеРаспределения.Номенклатура,
			|				ДанныеРаспределения.ХарактеристикаНоменклатуры
			|			ИЗ
			|				ДанныеРаспределения КАК ДанныеРаспределения)
			|	И ПартииТоваровКомпании.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|
			|СГРУППИРОВАТЬ ПО
			|	ПартииТоваровКомпании.СкладКомпании,
			|	ПартииТоваровКомпании.Партия,
			|	ПартииТоваровКомпании.СтатусПартии,
			|	ПартииТоваровКомпании.СтавкаНДС,
			|	ПартииТоваровКомпании.Регистратор,
			|	ПартииТоваровКомпании.Номенклатура,
			|	ПартииТоваровКомпании.ХарактеристикаНоменклатуры
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	втПартииТоваровКомпании.СкладКомпании КАК СкладКомпании,
			|	ДанныеРаспределения.Номенклатура КАК Номенклатура,
			|	ДанныеРаспределения.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	втПартииТоваровКомпании.Партия КАК Партия,
			|	втПартииТоваровКомпании.СтатусПартии КАК СтатусПартии,
			|	втПартииТоваровКомпании.Количество КАК Количество,
			|	ДанныеРаспределения.СуммаВсего КАК СуммаВсего,
			|	ДанныеРаспределения.СуммаНДС КАК СуммаНДС,
			|	втПартииТоваровКомпании.СтавкаНДС КАК СтавкаНДС,
			|	втПартииТоваровКомпании.Сумма КАК Сумма,
			|	ДанныеРаспределения.ДокументОснование КАК ДокументОснование
			|ИЗ
			|	ДанныеРаспределения КАК ДанныеРаспределения
			|		ЛЕВОЕ СОЕДИНЕНИЕ втПартииТоваровКомпании КАК втПартииТоваровКомпании
			|		ПО ДанныеРаспределения.ДокументОснование = втПартииТоваровКомпании.Регистратор
			|			И ДанныеРаспределения.Номенклатура = втПартииТоваровКомпании.Номенклатура
			|			И ДанныеРаспределения.ХарактеристикаНоменклатуры = втПартииТоваровКомпании.ХарактеристикаНоменклатуры";
			ПоляСвертки = "ДокументОснование,Номенклатура,ХарактеристикаНоменклатуры";
			
			ЭтоПоступлениеДопРасходовНаАвтомобили = Ложь;
			
		ИначеЕсли ХозОперация = Справочники.ХозОперации.ПоступлениеДопРасходовНаАвтомобили ИЛИ ХозОперация = Справочники.ХозОперации.ПоступлениеДопРасходовНаАвтомобилиВнутреннее Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ОстаткиАвтомобилей.Регистратор КАК Регистратор,
			|	ОстаткиАвтомобилей.СкладКомпании КАК СкладКомпании,
			|	ОстаткиАвтомобилей.Автомобиль КАК Автомобиль,
			|	ОстаткиАвтомобилей.Партия КАК Партия,
			|	ОстаткиАвтомобилей.СтатусПартии КАК СтатусПартии,
			|	ОстаткиАвтомобилей.СтавкаНДС КАК СтавкаНДС,
			|	ОстаткиАвтомобилей.Количество КАК Количество,
			|	ОстаткиАвтомобилей.СуммаНДС КАК СуммаНДС,
			|	ОстаткиАвтомобилей.Сумма КАК Сумма,
			|	ОстаткиАвтомобилей.СуммаУпр КАК СуммаВсего
			|ПОМЕСТИТЬ ВТ_ОстаткиАвтомобилей
			|ИЗ
			|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
			|ГДЕ
			|	ОстаткиАвтомобилей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И ОстаткиАвтомобилей.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварКупленный)
			|;
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	КомплектацияАвтомобилей.Регистратор КАК Регистратор,
			|	КомплектацияАвтомобилей.СкладКомпании КАК СкладКомпании,
			|	КомплектацияАвтомобилей.Автомобиль КАК Автомобиль,
			|	КомплектацияАвтомобилей.Партия КАК Партия,
			|	КомплектацияАвтомобилей.СтатусПартии КАК СтатусПартии,
			|	КомплектацияАвтомобилей.СтавкаНДС КАК СтавкаНДС,
			|	КомплектацияАвтомобилей.Количество КАК Количество,
			|	КомплектацияАвтомобилей.СуммаНДС КАК СуммаНДС,
			|	КомплектацияАвтомобилей.Сумма КАК Сумма,
			|	КомплектацияАвтомобилей.СуммаУпр КАК СуммаВсего
			|ПОМЕСТИТЬ ВТ_КомплектацияАвтомобилей
			|ИЗ
			|	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
			|ГДЕ
			|	КомплектацияАвтомобилей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И КомплектацияАвтомобилей.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварКупленный)
			|	И Не КомплектацияАвтомобилей.Регистратор Ссылка Документ.ЗаказНаряд
			|;
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ДанныеРаспределения.Номенклатура КАК Автомобиль,
			|	ОбъединенныйЗапрос.СкладКомпании КАК СкладКомпании,
			|	ОбъединенныйЗапрос.Партия КАК Партия,
			|	ОбъединенныйЗапрос.СтатусПартии КАК СтатусПартии,
			|	ОбъединенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
			|	ЕстьNULL(ОбъединенныйЗапрос.Количество, 0) КАК Количество,
			|	ДанныеРаспределения.СуммаНДС КАК СуммаНДС,
			|	0 КАК Сумма,
			|	ДанныеРаспределения.СуммаВсего КАК СуммаВсего,
			|	ДанныеРаспределения.ДокументОснование КАК ДокументОснование
			|ИЗ
			|	ДанныеРаспределения КАК ДанныеРаспределения
			|		ЛЕВОЕ СОЕДИНЕНИЕ(
			|ВЫБРАТЬ
			|	ОстаткиАвтомобилей.Регистратор,
			|	ОстаткиАвтомобилей.СкладКомпании,
			|	ОстаткиАвтомобилей.Автомобиль,
			|	ОстаткиАвтомобилей.Партия,
			|	ОстаткиАвтомобилей.СтатусПартии,
			|	ОстаткиАвтомобилей.СтавкаНДС,
			|	ОстаткиАвтомобилей.Количество,
			|	ОстаткиАвтомобилей.СуммаНДС,
			|	ОстаткиАвтомобилей.Сумма,
			|	ОстаткиАвтомобилей.СуммаВсего
			|ИЗ
			|	ВТ_ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КомплектацияАвтомобилей.Регистратор,
			|	КомплектацияАвтомобилей.СкладКомпании,
			|	КомплектацияАвтомобилей.Автомобиль,
			|	КомплектацияАвтомобилей.Партия,
			|	КомплектацияАвтомобилей.СтатусПартии,
			|	КомплектацияАвтомобилей.СтавкаНДС,
			|	КомплектацияАвтомобилей.Количество,
			|	КомплектацияАвтомобилей.СуммаНДС,
			|	КомплектацияАвтомобилей.Сумма,
			|	КомплектацияАвтомобилей.СуммаВсего
			|ИЗ
			|	ВТ_КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
			|) КАК ОбъединенныйЗапрос
			|		ПО ДанныеРаспределения.ДокументОснование = ОбъединенныйЗапрос.Регистратор
			|		И ДанныеРаспределения.Номенклатура = ОбъединенныйЗапрос.Автомобиль";
			
			ПоляСвертки = "ДокументОснование,Автомобиль";
			
			ЭтоПоступлениеДопРасходовНаАвтомобили = Истина;
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Ссылка", ШапкаДокумента.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		ТаблицаНоменклатур = РезультатЗапроса.Выгрузить();
		
		Если НЕ ЭтоПоступлениеДопРасходовНаАвтомобили Тогда
			КопияТаблицаНоменклатур = ТаблицаНоменклатур.Скопировать();
			КопияТаблицаНоменклатур.Очистить();
		КонецЕсли;
		
		// Распределим суммы
		ИтоговыеПоля = РезультатЗапроса.Выгрузить();
		ИтоговыеПоля.Свернуть(ПоляСвертки, "Количество");
		
		Для Каждого ТекущаяСтрока Из ИтоговыеПоля Цикл
			
			Если ЭтоПоступлениеДопРасходовНаАвтомобили
				И ТекущаяСтрока.Количество = 0 Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Автомобиля <%1> нет в наличии. Ввод дополнительных расходов невозможен.'"),
						ТекущаяСтрока.Автомобиль
					),
					,,,Отказ
				);
				
				Продолжить;
				
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура(ПоляСвертки);
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущаяСтрока);
			НайденныеСтроки = ТаблицаНоменклатур.НайтиСтроки(СтруктураОтбора);
			СуммаВсегоРаспределения = НайденныеСтроки[0].СуммаВсего;
			СуммаНДСРаспределения = НайденныеСтроки[0].СуммаНДС;
			КоэффициентРаспределенияСуммыВсего = СуммаВсегоРаспределения / ТекущаяСтрока.Количество;
			КоэффициентРаспределенияСуммыНДС   = СуммаНДСРаспределения / ТекущаяСтрока.Количество;
			РаспределеннаяСумма = 0;
			РаспределеннаяСуммаНДС = 0;
			Для Каждого ТекущаяСтрокаПартии Из НайденныеСтроки Цикл
				Если Не ЭтоПоступлениеДопРасходовНаАвтомобили Тогда
					НоваяСтрока = КопияТаблицаНоменклатур.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрокаПартии);
					НоваяСтрока.СуммаВсего = НоваяСтрока.Сумма;
				КонецЕсли;
				ТекущаяСтрокаПартии.СуммаВсего = Окр(КоэффициентРаспределенияСуммыВсего * ТекущаяСтрокаПартии.Количество, 2);
				ТекущаяСтрокаПартии.СуммаНДС = Окр(КоэффициентРаспределенияСуммыНДС * ТекущаяСтрокаПартии.Количество, 2);
				РаспределеннаяСумма = РаспределеннаяСумма + ТекущаяСтрокаПартии.СуммаВсего;
				РаспределеннаяСуммаНДС = РаспределеннаяСуммаНДС + ТекущаяСтрокаПартии.СуммаНДС;
				ТекущаяСтрокаПартии.Количество = 0;
			КонецЦикла;
			ОстатокСуммы = СуммаВсегоРаспределения - РаспределеннаяСумма;
			ОстатокСуммыНДС = СуммаНДСРаспределения - РаспределеннаяСуммаНДС;
			Если ОстатокСуммы <> 0 ИЛИ ОстатокСуммыНДС <> 0 Тогда
				ТекущаяСтрокаПартии.СуммаВсего = ТекущаяСтрокаПартии.СуммаВсего + ОстатокСуммы;
				ТекущаяСтрокаПартии.СуммаНДС = ТекущаяСтрокаПартии.СуммаНДС + ОстатокСуммыНДС;
			КонецЕсли;
		КонецЦикла;
		
		Если Отказ Тогда
			
			Возврат НЕ Отказ;
			
		КонецЕсли;
		
		Если 
			ХозОперация = Справочники.ХозОперации.ПоступлениеДопРасходов
			ИЛИ ХозОперация = Справочники.ХозОперации.ПоступлениеДопРасходовВнутреннее
		Тогда
			НаборЗаписейПартии = Движения.ПартииТоваровКомпании;
			НаборЗаписейПартии.ДокументОбъект  = ЭтотОбъект;
			НаборЗаписейПартии.ШапкаДокумента  = ШапкаДокумента;
			НаборЗаписейПартии.Организация     = ШапкаДокумента.Организация;
			НаборЗаписейПартии.ЕстьСтавкаНДС   = Истина;
			НаборЗаписейПартии.РезультатЗапросаПоТоварам = ТаблицаНоменклатур;
			НаборЗаписейПартии.РежимДопРасходы = 3;
			Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
				НаборЗаписейПартии.РасчетыСКонтрагентами = РасчетыСКонтрагентами;
			КонецЕсли; 
			НаборЗаписейПартии.ДополнительныеСвойства.Вставить("КопияРезультатЗапросаПоТоварам", КопияТаблицаНоменклатур);
			Отказ=НЕ НаборЗаписейПартии.Приход() ИЛИ Отказ;
		ИначеЕсли
			ХозОперация = Справочники.ХозОперации.ПоступлениеДопРасходовНаАвтомобили
			ИЛИ ХозОперация = Справочники.ХозОперации.ПоступлениеДопРасходовНаАвтомобилиВнутреннее
		Тогда
			НаборЗаписейПартии=Движения.ОстаткиАвтомобилей;
			НаборЗаписейПартии.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейПартии.РезультатЗапросаПоАвтомобилям=ТаблицаНоменклатур;
			НаборЗаписейПартии.РежимДопРасходы = 0;
			НаборЗаписейПартии.Партия="Партия";
			НаборЗаписейПартии.СтатусПартии = Перечисления.СтатусыПартий.ТоварКупленный;
			Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
				НаборЗаписейПартии.РасчетыСКонтрагентами = РасчетыСКонтрагентами;
			КонецЕсли;
			НаборЗаписейПартии.ШапкаДокумента=ШапкаДокумента;
			Отказ=НЕ НаборЗаписейПартии.Приход() ИЛИ Отказ;
		КонецЕсли;
	КонецЕсли;
	
	
	ТаблицаТоваров=Неопределено;
	Если ХозОперация=Справочники.ХозОперации.ПоступлениеДопРасходов ИЛИ ХозОперация=Справочники.ХозОперации.ПоступлениеДопРасходовВнутреннее Тогда
		// Получим таблицу движения вида "Приход" регистра партий компании документов-оснований.
		// Если хотя бы одну услугу необходимо распределять по весу, то из табличной части документов-оснований
		// получим вес номенклатуры в соответствии с единицами измерения  или номенклатуры в зависимости
		// от подчиненности единицы измерения.
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.СпособРаспределенияДопРасходов = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияДопРасходов.ПоВесу)
		|	И Номенклатура.Ссылка В(&СписокНоменклатуры)";
		Запрос.УстановитьПараметр("СписокНоменклатуры", ШапкаДокумента.Ссылка.Товары.ВыгрузитьКолонку("Номенклатура"));	
		НеобходимоПолучатьВес = НЕ Запрос.Выполнить().Пустой();
		
		Для каждого СтрокаДокументаОснования Из ШапкаДокумента.Ссылка.ДокументыОснования Цикл
			// Получаем движения по регистру "Партии компании".
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПартииТоваровКомпании.СкладКомпании КАК СкладКомпании,
			|	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
			|	ПартииТоваровКомпании.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	ПартииТоваровКомпании.Партия КАК Партия,
			|	ПартииТоваровКомпании.СтатусПартии КАК СтатусПартии,
			|	ПартииТоваровКомпании.СтавкаНДС КАК СтавкаНДС,
			|	СУММА(ПартииТоваровКомпании.Количество) КАК Количество,
			|	СУММА(ПартииТоваровКомпании.СуммаНДС) КАК СуммаНДС,
			|	СУММА(0) КАК Сумма,
			|	СУММА(ПартииТоваровКомпании.СуммаУпр) КАК СуммаВсего";
			Если НеобходимоПолучатьВес Тогда		
				Запрос.Текст = Запрос.Текст + ", СУММА(ПартииТоваровКомпании.Количество / ВложенныйЗапрос.Количество * ВложенныйЗапрос.Вес) КАК Вес";
			Иначе
				Запрос.Текст = Запрос.Текст + ", СУММА(0) КАК Вес";
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + "
			|ИЗ
			|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании";
			
			Если НеобходимоПолучатьВес Тогда
				Запрос.Текст = Запрос.Текст + "
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			ТабЧастьДокументаОснования.Номенклатура КАК Номенклатура,
				|			ТабЧастьДокументаОснования.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
				|			СУММА(ТабЧастьДокументаОснования.Номенклатура.Вес * ТабЧастьДокументаОснования.Количество) КАК Вес,
				|			СУММА(ТабЧастьДокументаОснования.Количество * ТабЧастьДокументаОснования.Коэффициент) КАК Количество
				|		ИЗ
				|			Документ." + ШапкаДокумента.ДокументОснование.Метаданные().Имя + ".Товары КАК ТабЧастьДокументаОснования
				|		ГДЕ
				|			ТабЧастьДокументаОснования.Ссылка = &ДокументОснованиеСсылка
				|		
				|		СГРУППИРОВАТЬ ПО
				|			ТабЧастьДокументаОснования.Номенклатура,
				|			ТабЧастьДокументаОснования.ХарактеристикаНоменклатуры) КАК ВложенныйЗапрос
				|		ПО ПартииТоваровКомпании.Номенклатура = ВложенныйЗапрос.Номенклатура
				|			И ПартииТоваровКомпании.ХарактеристикаНоменклатуры = ВложенныйЗапрос.ХарактеристикаНоменклатуры";
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + " 
			|ГДЕ
			|	ПартииТоваровКомпании.Регистратор = &Регистратор
			|	И ПартииТоваровКомпании.ВидДвижения = &ВидДвиженияПриход
			|	И ПартииТоваровКомпании.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварКупленный)
			|
			|СГРУППИРОВАТЬ ПО
			|	ПартииТоваровКомпании.СкладКомпании,
			|	ПартииТоваровКомпании.Номенклатура,
			|	ПартииТоваровКомпании.ХарактеристикаНоменклатуры,
			|	ПартииТоваровКомпании.Партия,
			|	ПартииТоваровКомпании.СтатусПартии,
			|	ПартииТоваровКомпании.СтавкаНДС";
			
			Запрос.УстановитьПараметр("Регистратор",             СтрокаДокументаОснования.ДокументОснование);
			Запрос.УстановитьПараметр("ВидДвиженияПриход",       ВидДвиженияНакопления.Приход);
			Запрос.УстановитьПараметр("ДокументОснованиеСсылка", СтрокаДокументаОснования.ДокументОснование);
			Если ТаблицаТоваров=Неопределено Тогда
				ТаблицаТоваров=Запрос.Выполнить().Выгрузить();
			Иначе
				ВыборкаЗапроса=Запрос.Выполнить().Выбрать();
				Пока ВыборкаЗапроса.Следующий() Цикл
					НоваяСтрокаТоваров=ТаблицаТоваров.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров,ВыборкаЗапроса);
				КонецЦикла;
			КонецЕсли; 
		КонецЦикла; 
	ИначеЕсли ХозОперация=Справочники.ХозОперации.ПоступлениеДопРасходовНаАвтомобили ИЛИ ХозОперация=Справочники.ХозОперации.ПоступлениеДопРасходовНаАвтомобилиВнутреннее Тогда
		
		Для Каждого СтрокаДокументаОснования Из ШапкаДокумента.Ссылка.ДокументыОснования Цикл
			
			ХозОперацияОснования = СтрокаДокументаОснования.ДокументОснование.ХозОперация;
			
			Если ХозОперацияОснования = Справочники.ХозОперации.ПоступлениеАвтомобилейОтветственноеХранение Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Автомобили документа <%1> находятся на ответственном хранении.
						|Ввод дополнительных расходов невозможен.'"),
						СтрокаДокументаОснования.ДокументОснование
					),
					,,,Отказ
				);
				
				Продолжить;
				
			КонецЕсли;
			
			Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОбъединенныйЗапрос.СкладКомпании КАК СкладКомпании,
			|	ОбъединенныйЗапрос.Автомобиль КАК Автомобиль,
			|	ОбъединенныйЗапрос.Партия КАК Партия,
			|	ОбъединенныйЗапрос.СтатусПартии КАК СтатусПартии,
			|	СУММА(ОбъединенныйЗапрос.Количество) КАК Количество,
			|	СУММА(ОбъединенныйЗапрос.СуммаНДС) КАК СуммаНДС,
			|	СУММА(ОбъединенныйЗапрос.СуммаВсего) КАК Сумма,
			|	СУММА(ОбъединенныйЗапрос.СуммаВсего) КАК СуммаВсего
			|ИЗ (
			|ВЫБРАТЬ
			|	ОстаткиАвтомобилей.СкладКомпании КАК СкладКомпании,
			|	ОстаткиАвтомобилей.Автомобиль КАК Автомобиль,
			|	ОстаткиАвтомобилей.Партия КАК Партия,
			|	ОстаткиАвтомобилей.СтатусПартии КАК СтатусПартии,
			|	ОстаткиАвтомобилей.Количество КАК Количество,
			|	ОстаткиАвтомобилей.СуммаНДС КАК СуммаНДС,
			|	0 КАК Сумма,
			|	ОстаткиАвтомобилей.СуммаУпр КАК СуммаВсего
			|ИЗ
			|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
			|ГДЕ
			|	ОстаткиАвтомобилей.Регистратор = &Регистратор
			|	И ОстаткиАвтомобилей.ВидДвижения = &ВидДвиженияПриход
			|	И ОстаткиАвтомобилей.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварКупленный)
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|	КомплектацияАвтомобилей.СкладКомпании КАК СкладКомпании,
			|	КомплектацияАвтомобилей.Автомобиль КАК Автомобиль,
			|	КомплектацияАвтомобилей.Партия КАК Партия,
			|	КомплектацияАвтомобилей.СтатусПартии КАК СтатусПартии,
			|	КомплектацияАвтомобилей.Количество КАК Количество,
			|	КомплектацияАвтомобилей.СуммаНДС КАК СуммаНДС,
			|	0 КАК Сумма,
			|	КомплектацияАвтомобилей.СуммаУпр КАК СуммаВсего
			|ИЗ
			|	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
			|ГДЕ
			|	КомплектацияАвтомобилей.Регистратор = &Регистратор
			|	И КомплектацияАвтомобилей.ВидДвижения = &ВидДвиженияПриход
			|	И КомплектацияАвтомобилей.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварКупленный)
			|	И Не КомплектацияАвтомобилей.Регистратор Ссылка Документ.ЗаказНаряд
			|) КАК ОбъединенныйЗапрос
			|СГРУППИРОВАТЬ ПО
			|	ОбъединенныйЗапрос.СкладКомпании,
			|	ОбъединенныйЗапрос.Автомобиль,
			|	ОбъединенныйЗапрос.Партия,
			|	ОбъединенныйЗапрос.СтатусПартии
			|");
			Запрос.УстановитьПараметр("Регистратор",             СтрокаДокументаОснования.ДокументОснование);
			Запрос.УстановитьПараметр("ВидДвиженияПриход",       ВидДвиженияНакопления.Приход);
			Запрос.УстановитьПараметр("ДокументОснованиеСсылка", СтрокаДокументаОснования.ДокументОснование);
			Если ТаблицаТоваров=Неопределено Тогда
				ТаблицаТоваров=Запрос.Выполнить().Выгрузить();
			Иначе
				ВыборкаЗапроса=Запрос.Выполнить().Выбрать();
				Пока ВыборкаЗапроса.Следующий() Цикл
					НоваяСтрокаТоваров=ТаблицаТоваров.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров,ВыборкаЗапроса);
				КонецЦикла;
			КонецЕсли; 
		КонецЦикла;
		
		Если Отказ Тогда
			
			Возврат НЕ Отказ;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаТоваров=Неопределено Тогда
		ВДокументеТолькоКомиссионныеТовары=Истина;
	ИначеЕсли ТаблицаТоваров.Количество()=0 Тогда
		ВДокументеТолькоКомиссионныеТовары=Истина;
	Иначе
		ВДокументеТолькоКомиссионныеТовары=Ложь;
	КонецЕсли;
	
	Если Не ВДокументеТолькоКомиссионныеТовары Тогда
		Если ХозОперация=Справочники.ХозОперации.ПоступлениеДопРасходов ИЛИ ХозОперация=Справочники.ХозОперации.ПоступлениеДопРасходовВнутреннее Тогда
			НаборЗаписейПартии=Движения.ПартииТоваровКомпании;
			НаборЗаписейПартии.ДокументОбъект  = ЭтотОбъект;
			НаборЗаписейПартии.ШапкаДокумента  = ШапкаДокумента;
			НаборЗаписейПартии.Организация     = ШапкаДокумента.Организация;
			НаборЗаписейПартии.ЕстьСтавкаНДС   = Истина;
			НаборЗаписейПартии.РезультатЗапросаПоТоварам = ТаблицаТоваров;
			НаборЗаписейПартии.РежимДопРасходы = 2;
			Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам  Тогда
				НаборЗаписейПартии.РасчетыСКонтрагентами = РасчетыСКонтрагентами;
			КонецЕсли;
			Отказ=НЕ НаборЗаписейПартии.Приход() ИЛИ Отказ;
		ИначеЕсли ХозОперация=Справочники.ХозОперации.ПоступлениеДопРасходовНаАвтомобили ИЛИ ХозОперация=Справочники.ХозОперации.ПоступлениеДопРасходовНаАвтомобилиВнутреннее Тогда
			НаборЗаписейПартии=Движения.ОстаткиАвтомобилей;
			НаборЗаписейПартии.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейПартии.РезультатЗапросаПоАвтомобилям=ТаблицаТоваров;
			Документы.ПоступлениеДопРасходов.РассчетДополнительныхРасходовНаАвтомобили(
				НаборЗаписейПартии.РезультатЗапросаПоАвтомобилям,
				Ссылка,
				ЭтотОбъект,
				Отказ, 
				?(СпособУчетаВзаиморасчетовПоРасчетнымДокументам, РасчетыСКонтрагентами, Неопределено));
			НаборЗаписейПартии.РежимДопРасходы=2;
			НаборЗаписейПартии.Партия="Партия";
			НаборЗаписейПартии.СтатусПартии = Перечисления.СтатусыПартий.ТоварКупленный;
			НаборЗаписейПартии.ШапкаДокумента=ШапкаДокумента;
			Отказ=НЕ НаборЗаписейПартии.Приход() ИЛИ Отказ;
		КонецЕсли;
	Иначе
		// Значит в документе-основании присутствует только комиссионный товар, тогда
		// придется все списать на расходы
		// Вычислим сумму, которую необходимо списать.
		ТекстЗапроса = 
		"
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ДокументТовары.СуммаВсего),0) КАК СуммаВсего
		|ИЗ
		|	Документ.ПоступлениеДопРасходов.Товары КАК ДокументТовары
		|ГДЕ
		|	  ДокументТовары.Ссылка=&Ссылка
		|	И ДокументТовары.Номенклатура.СпособРаспределенияДопРасходов<>ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияДопРасходов.НаДоходыИРасходы)
		|	И ДокументТовары.Номенклатура.ВидНоменклатуры=ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Ссылка", ШапкаДокумента.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Если ФлагУпрВалюты Или Выборка.СуммаВсего = 0
			Или Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
			СуммаДляРаспределения = Выборка.СуммаВсего;
		Иначе
			УслугиДокумента = Новый ТаблицаЗначений;
			УслугиДокумента.Колонки.Добавить("СуммаВсего");
			СтрокаУслуг = УслугиДокумента.Добавить();
			СтрокаУслуг.СуммаВсего = Выборка.СуммаВсего;
			РасчетыСКонтрагентамиСервер.РаспределитьСуммыПоЧастиТабличнойЧастиДокумента(
				УслугиДокумента,
				СуммаУпр,
				ШапкаДокумента.СуммаДокумента,
				"СуммаВсего");
			СуммаДляРаспределения = УслугиДокумента[0].СуммаВсего;
		КонецЕсли;
		
		Если СуммаДляРаспределения<>0 Тогда
			НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДиР.ШапкаДокумента         = ШапкаДокумента;
			Если ВедетсяБалансПоПодразделению Тогда
				НаборЗаписейДиР.Подразделение      = ШапкаДокумента.ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.ПрочиеРасходы;
			НаборЗаписейДиР.ВУпрВалюте             = СпособУчетаВзаиморасчетовПоРасчетнымДокументам Или ФлагУпрВалюты;
			НаборЗаписейДиР.Расход                 = СуммаДляРаспределения;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;
	КонецЕсли; 
	
	// если идет допроведение, то надо получить те значения которые были раньше
	Если Ссылка <> ДокументСсылка Тогда
		
		РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоОстаткамАвтомобилейПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоПартиямПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		
	КонецЕсли;
	
	// двигаем границу последовательности автомобилей
	РаботаСГраницами.СдвинутьГраницуОстатковАвтомобилей(ДокументСсылка, ДополнительныеСвойства, Движения);
	
	// двигаем границу последовательности партий	
	РаботаСГраницами.СдвинутьГраницуПартий(ДокументСсылка, ДополнительныеСвойства, Движения);
	
	// БАЛАНС: определим необходимость формирования корректирующих проводок по партиям.
	УстановитьПривилегированныйРежим(Истина);
	
	БалансовоеПодразделениеДоговора = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании, ШапкаДокумента.Дата);
	БалансовоеПодразделениеШапки    = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ШапкаДокумента.ПодразделениеКомпании, ШапкаДокумента.Дата);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// БАЛАНС: определим необходимость формирования корректирующих проводок по партиям.
	Если ВедетсяБалансПоПодразделению И Движения.ПартииТоваровКомпании.Количество()> 0 Тогда
		
		ДвиженияПартииТоваровКомпании = Движения.ПартииТоваровКомпании.Выгрузить(,"СкладКомпании, СуммаУпр");
		ДвиженияПартииТоваровКомпании.Свернуть("СкладКомпании", "СуммаУпр");
		ДвиженияПартииТоваровКомпании.Колонки.Добавить("Подразделение");
		
		Для Каждого ТекущаяСтрока Из ДвиженияПартииТоваровКомпании Цикл
			ТекущаяСтрока.Подразделение = ТекущаяСтрока.СкладКомпании.ПодразделениеКомпании;
		КонецЦикла;
		
		ДвиженияПартииТоваровКомпании.Свернуть("Подразделение", "СуммаУпр");
		
		СуммаКорректировки = 0;
		Для Каждого ТекущаяСтрока Из ДвиженияПартииТоваровКомпании Цикл
			
			Если ТекущаяСтрока.СуммаУпр = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПодразделениеСклада = ТекущаяСтрока.Подразделение;
			БалансовоеПодразделениеСклада = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ПодразделениеСклада, ШапкаДокумента.Дата);
			
			Если БалансовоеПодразделениеДоговора = БалансовоеПодразделениеСклада Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДиР.ШапкаДокумента         = ШапкаДокумента;
			НаборЗаписейДиР.Подразделение          = ПодразделениеСклада;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.ВУпрВалюте             = Истина;
			НаборЗаписейДиР.Доход                  = ТекущаяСтрока.СуммаУпр;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			
			СуммаКорректировки = СуммаКорректировки + ТекущаяСтрока.СуммаУпр;
			
		КонецЦикла;
		
		// БАЛАНС: определим необходимость формирования корректирующих проводок по взаиморасчетам.
		Если (НЕ СуммаКорректировки = 0) Тогда
			
			НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДиР.ШапкаДокумента         = ШапкаДокумента;
			НаборЗаписейДиР.Подразделение          = ДоговорВзаиморасчетов.ПодразделениеКомпании;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.ВУпрВалюте             = Истина;
			НаборЗаписейДиР.Расход                 = СуммаКорректировки;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			
		КонецЕсли;
		
	// Корректирующие проводки Доходов и расходов для комиссионных товаров или перемещений в филиал.
	ИначеЕсли ВедетсяБалансПоПодразделению И (НЕ СуммаДляРаспределения = 0) И (НЕ БалансовоеПодразделениеШапки = БалансовоеПодразделениеДоговора) Тогда
		
		НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДиР.ШапкаДокумента         = ШапкаДокумента;
		// Подразделение из шапки, т.к. не понятно как распределить сумму на доходы и расходы по разным основаниям.
		НаборЗаписейДиР.Подразделение          = ШапкаДокумента.ПодразделениеКомпании;
		НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
		НаборЗаписейДиР.ВУпрВалюте             = СпособУчетаВзаиморасчетовПоРасчетнымДокументам ИЛИ ФлагУпрВалюты;
		НаборЗаписейДиР.Доход                  = СуммаДляРаспределения;
		Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		
		НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДиР.ШапкаДокумента         = ШапкаДокумента;
		НаборЗаписейДиР.Подразделение          = ДоговорВзаиморасчетов.ПодразделениеКомпании;
		НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
		НаборЗаписейДиР.ВУпрВалюте             = СпособУчетаВзаиморасчетовПоРасчетнымДокументам ИЛИ ФлагУпрВалюты;
		НаборЗаписейДиР.Расход                 = СуммаДляРаспределения;
		Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		
	КонецЕсли;
	
	// Услуги, распределяемые на доходы и расходы туда и поместим
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПоступлениеДопРасходовТовары.Номенклатура.СтатьяДопРасходов КАК СтатьяДопРасходов,
	               |	СУММА(ПоступлениеДопРасходовТовары.СуммаВсего) КАК Сумма
	               |ИЗ
	               |	Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
	               |ГДЕ
	               |	ПоступлениеДопРасходовТовары.Ссылка = &Ссылка
	               |	И ПоступлениеДопРасходовТовары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	               |	И ПоступлениеДопРасходовТовары.Номенклатура.СпособРаспределенияДопРасходов = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияДопРасходов.НаДоходыИРасходы)
	               |	И ПоступлениеДопРасходовТовары.СпособРаспределения = 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПоступлениеДопРасходовТовары.Номенклатура.СтатьяДопРасходов
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПоступлениеДопРасходовТовары.Номенклатура.СтатьяДопРасходов,
	               |	СУММА(ПоступлениеДопРасходовТовары.СуммаВсего)
	               |ИЗ
	               |	Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеДопРасходов.РаспределениеРасходов КАК ПоступлениеДопРасходовРаспределениеРасходов
	               |		ПО ПоступлениеДопРасходовТовары.Ссылка = ПоступлениеДопРасходовРаспределениеРасходов.Ссылка
	               |			И ПоступлениеДопРасходовТовары.КлючСтроки = ПоступлениеДопРасходовРаспределениеРасходов.КлючСтроки
	               |ГДЕ
	               |	ПоступлениеДопРасходовТовары.Ссылка = &Ссылка
	               |	И ПоступлениеДопРасходовРаспределениеРасходов.Услуга ЕСТЬ NULL 
	               |	И ПоступлениеДопРасходовТовары.СпособРаспределения = 1
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПоступлениеДопРасходовТовары.Номенклатура.СтатьяДопРасходов
	               |ИТОГИ
	               |	СУММА(Сумма)
	               |ПО
	               |	СтатьяДопРасходов";
	Запрос.УстановитьПараметр("Ссылка",ШапкаДокумента.Ссылка);
	УслугиНаРасходыИДоходы = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	СуммаКорректировки = 0;
	
	Если Не ФлагУпрВалюты Тогда
		ОбработкаСобытийДокументаСервер.РаспределитьСуммуПоТаблице(
			СуммаУпр,
			УслугиНаРасходыИДоходы.Строки,
			"Сумма");
	КонецЕсли;
	
	Для Каждого СтрокаУслуг Из УслугиНаРасходыИДоходы.Строки Цикл
		НаборЗаписейДиР.ДокументОбъект			= ЭтотОбъект;
		НаборЗаписейДиР.ШапкаДокумента			= ШапкаДокумента;
		Если ВедетсяБалансПоПодразделению Тогда
			НаборЗаписейДиР.Подразделение = ШапкаДокумента.ПодразделениеКомпании;
		КонецЕсли;
		НаборЗаписейДиР.СтатьяДоходовИРасходов	= СтрокаУслуг.СтатьяДопРасходов;
		НаборЗаписейДиР.ВУпрВалюте				= ФлагУпрВалюты ИЛИ СпособУчетаВзаиморасчетовПоРасчетнымДокументам;
		НаборЗаписейДиР.Расход					= СтрокаУслуг.Сумма;
		Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		
		// БАЛАНС: если нужно создаем корректирующие движения по доходам и расходам.
		Если ВедетсяБалансПоПодразделению И (НЕ БалансовоеПодразделениеДоговора = БалансовоеПодразделениеШапки) Тогда
			НаборЗаписейДиР.ДокументОбъект			= ЭтотОбъект;
			НаборЗаписейДиР.ШапкаДокумента			= ШапкаДокумента;
			НаборЗаписейДиР.Подразделение			= ШапкаДокумента.ПодразделениеКомпании;
			НаборЗаписейДиР.СтатьяДоходовИРасходов	= Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.ВУпрВалюте				= ФлагУпрВалюты ИЛИ СпособУчетаВзаиморасчетовПоРасчетнымДокументам;
			НаборЗаписейДиР.Доход					= СтрокаУслуг.Сумма;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			СуммаКорректировки = СуммаКорректировки + СтрокаУслуг.Сумма;
		КонецЕсли;	
	КонецЦикла;
	
	Если НЕ СуммаКорректировки = 0 Тогда
		
		НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДиР.ШапкаДокумента         = ШапкаДокумента;
		НаборЗаписейДиР.Подразделение          = ДоговорВзаиморасчетов.ПодразделениеКомпании;
		НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
		НаборЗаписейДиР.ВУпрВалюте             = ФлагУпрВалюты ИЛИ СпособУчетаВзаиморасчетовПоРасчетнымДокументам;
		НаборЗаписейДиР.Расход                 = СуммаКорректировки;
		
		Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции // ПровестиПоПартиям()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(Дата);
	
	Документы.ПоступлениеДопРасходов.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	ДополнительныеСвойства.Вставить(
		"СпособУчетаВзаиморасчетовПоРасчетнымДокументам",
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам);
	
	// взаиморасчеты
	Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		НаборЗаписейВзаиморасчеты=Движения.ВзаиморасчетыКомпании;
		НаборЗаписейВзаиморасчеты.ДокументОбъект        = ЭтотОбъект;
		НаборЗаписейВзаиморасчеты.РежимПроведения       = РежимПроведения;
		НаборЗаписейВзаиморасчеты.Контрагент            = Контрагент;
		НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
		НаборЗаписейВзаиморасчеты.Сделка                = Неопределено;
		НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок	=
			(СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически);
		НаборЗаписейВзаиморасчеты.Сумма                 = СуммаДокумента;
		НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц = 0;
		Отказ=НЕ НаборЗаписейВзаиморасчеты.Расход() ИЛИ Отказ;
		
		// доходы и расходы по суммовым разницам
		СуммаДоходаРасходаСуммовыхРазниц=НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
		Если СуммаДоходаРасходаСуммовыхРазниц<>0 Тогда
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
			Если ВедетсяБалансПоПодразделению Тогда
				НаборЗаписейДиР.Подразделение = ДоговорВзаиморасчетов.ПодразделениеКомпании;
			КонецЕсли;	
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
			НаборЗаписейДиР.ВУпрВалюте = Истина;
			Если СуммаДоходаРасходаСуммовыхРазниц<0 Тогда
				НаборЗаписейДиР.Расход = -СуммаДоходаРасходаСуммовыхРазниц;
			Иначе
				НаборЗаписейДиР.Доход = СуммаДоходаРасходаСуммовыхРазниц;
			КонецЕсли;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;
	КонецЕсли;
	Документы.ПоступлениеДопРасходов.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	УсловиеОтбора = Новый Структура;
	УсловиеОтбора.Вставить("ТипРасчета", Перечисления.ТипыРасчетов.Оплата);
	УсловиеОтбора.Вставить("ВидДвижения", ВидДвиженияНакопления.Расход);
	
	Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		СуммыПоРасчетамСКонтрагентом = РасчетыСКонтрагентамиСервер.СуммовыеПоказателиРасчетаСКонтрагентами(
			ДополнительныеСвойства.ТаблицыДвиженийДокумента.РасчетыСКонтрагентами,
			УсловиеОтбора);
		СуммаРасхода = СуммыПоРасчетамСКонтрагентом.СуммаУпр;
	Иначе
		СуммаРасхода = СуммаДокумента
	КонецЕсли;
	
	// проведем партии
	Отказ=НЕ ПровестиПоПартиям(РежимПроведения, Ссылка, СуммаРасхода) ИЛИ Отказ;
	
	// БАЛАНС: определим необходимость формирования корректирующих проводок по взаиморасчетам.
	Если (ХозОперация=Справочники.ХозОперации.ПоступлениеДопРасходовВнутреннее ИЛИ
		  ХозОперация=Справочники.ХозОперации.ПоступлениеДопРасходовНаАвтомобилиВнутреннее) И
		  ЕстьРеквизит(ДокументОснование,"СкладПолучатель") Тогда
		Если ТипЗнч(ДокументОснование.СкладПолучатель)=Тип("СправочникСсылка.СкладыКомпании") Тогда
			СкладПолучательПодразделение=ДокументОснование.СкладПолучатель.ПодразделениеКомпании;
		Иначе
			СкладПолучательПодразделение=ДокументОснование.СкладПолучатель;
		КонецЕсли; 
		ПодразделениеСклад = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(СкладПолучательПодразделение, Дата);
	Иначе
		Если ТипЗнч(ДокументОснование.СкладКомпании)=Тип("СправочникСсылка.СкладыКомпании") Тогда
			СкладКомпанииПодразделение=ДокументОснование.СкладКомпании.ПодразделениеКомпании;
		Иначе
			СкладКомпанииПодразделение=ДокументОснование.СкладКомпании;
		КонецЕсли; 
		ПодразделениеСклад = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(СкладКомпанииПодразделение, Дата);
	КонецЕсли;	
	ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ДоговорВзаиморасчетов.ПодразделениеКомпании, Дата);
	БалансовыеПодразделенияНеРавны = (ПодразделениеДоговорВзаиморасчетов<>ПодразделениеСклад);
	Если (ВедетсяБалансПоПодразделению И БалансовыеПодразделенияНеРавны) ИЛИ (ДокументОснование.ХозОперация=Справочники.ХозОперации.ПоступлениеТоваровКомиссия) Тогда
		НаборЗаписейДиР = Движения.ДоходыИРасходы;
		НаборЗаписейДиР.ДокументОбъект			= ЭтотОбъект;
		Если ХозОперация=Справочники.ХозОперации.ПоступлениеДопРасходовВнутреннее Тогда
			ПодразделениеСклад = ДокументОснование.СкладПолучатель.ПодразделениеКомпании;
		Иначе
			ПодразделениеСклад = ДокументОснование.СкладКомпании.ПодразделениеКомпании;
		КонецЕсли;	
		НаборЗаписейДиР.Подразделение			= ДоговорВзаиморасчетов.ПодразделениеКомпании;
		НаборЗаписейДиР.СтатьяДоходовИРасходов	= Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
		НаборЗаписейДиР.ВУпрВалюте				= СпособУчетаВзаиморасчетовПоРасчетнымДокументам;
		НаборЗаписейДиР.Расход					= СуммаРасхода;
		Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
	КонецЕсли;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	// двигаем границу последовательности взаиморасчетов
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	
	// установим цены контрагентов
	Если НЕ Отказ И ТипЦен.РегистрироватьЦеныПоПриходу И (ЗначениеЗаполнено(Контрагент)) И НЕ ТипЦен.Рассчитывается Тогда
		НаборЗаписейЦены = Движения.Цены;
		НаборЗаписейЦены.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейЦены.Контрагент             = Контрагент;
		НаборЗаписейЦены.ТипЦен                 = ТипЦен;
		НаборЗаписейЦены.УстанавливатьЦеныУслуг = Истина;
		НаборЗаписейЦены.ИмяРеквизитаЦена       = "Цена";
		Отказ = НЕ НаборЗаписейЦены.УстановитьЦены() ИЛИ Отказ;
	КонецЕсли;
	
	// установим закупочные цены компании
	Если НЕ Отказ И ПодразделениеКомпании.ФормироватьЗакупочнуюЦену И НЕ Справочники.ТипыЦен.ОсновнойТипЦенЗакупки.Рассчитывается Тогда
		НаборЗаписейЦены = Движения.Цены;
		НаборЗаписейЦены.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейЦены.Контрагент             = Неопределено;
		НаборЗаписейЦены.ИмяРеквизитаЦена       = "Цена";
		НаборЗаписейЦены.ТипЦен                 = Справочники.ТипыЦен.ОсновнойТипЦенЗакупки;
		НаборЗаписейЦены.УстанавливатьЦеныУслуг = Истина;
		Отказ = НЕ НаборЗаписейЦены.УстановитьЦены() ИЛИ Отказ;
	КонецЕсли;
	
	// установим нормативные цены компании
	Если НЕ Отказ И ПодразделениеКомпании.ФормироватьНормативнуюЦену И НЕ Справочники.ТипыЦен.НормативнаяЦена.Рассчитывается Тогда
		НаборЗаписейЦены = Движения.Цены;
		НаборЗаписейЦены.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейЦены.Контрагент             = Неопределено;
		НаборЗаписейЦены.ИмяРеквизитаЦена       = "Цена";
		НаборЗаписейЦены.ТипЦен                 = Справочники.ТипыЦен.НормативнаяЦена;
		НаборЗаписейЦены.УстанавливатьЦеныУслуг = Истина;
		Отказ = НЕ НаборЗаписейЦены.УстановитьЦены() ИЛИ Отказ;
	КонецЕсли;

	ПараметрыДействия = Новый Структура;
	ОбработкаСобытийДокументаСервер.СоздатьОбновитьСФПолученный(ЭтотОбъект, ДополнительныеСвойства, ПараметрыДействия, Отказ);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Перемещение товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПеремещениеТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = Справочники.ХозОперации.ПоступлениеДопРасходовВнутреннее;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПеремещениеТоваров()

// Производит заполнение объекта на основании документа "Таможенная декларация импорт".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ТаможеннаяДекларацияИмпорт(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ТаможеннаяДекларацияИмпортАвтомобилей Тогда
		ХозОперация = Справочники.ХозОперации.ПоступлениеДопРасходовНаАвтомобили;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаможеннаяДекларацияИмпорт.Ссылка.ДокументОснование КАК ДокументОснование
			|ИЗ
			|	Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
			|ГДЕ
			|	ТаможеннаяДекларацияИмпорт.Ссылка = &Основание";
		
		Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
		ДокументыОснования.Загрузить(Запрос.Выполнить().Выгрузить());
		
		Возврат Ложь;
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаможеннаяДекларацияИмпортТовары.Партия КАК ДокументОснование
		|ИЗ
		|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпортТовары
		|ГДЕ
		|	ТаможеннаяДекларацияИмпортТовары.Ссылка = &Основание
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаможеннаяДекларацияИмпортТовары.Партия";
		
		Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
		ДокументыОснования.Загрузить(Запрос.Выполнить().Выгрузить());
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ТаможеннаяДекларацияИмпорт()

// Производит заполнение объекта на основании документа "Комплектация"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Комплектация(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЭтотОбъект.ХозОперация = Справочники.ХозОперации.ПоступлениеДопРасходовВнутреннее;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Комплектация()

// Производит заполнение объекта на основании документа "Перемещение товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Разукомплектация(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЭтотОбъект.ХозОперация = Справочники.ХозОперации.ПоступлениеДопРасходовВнутреннее;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Разукомплектация()

// Производит заполнение объекта на основании документа "Поступление автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Запрет ввода документа на основании Поступления автомобилей на комиссию или на ответхранение
	ХозОперацияОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ХозОперация");
	
	Если ХозОперацияОснования = Справочники.ХозОперации.ПоступлениеАвтомобилейКомиссия 
		ИЛИ ХозОперацияОснования = Справочники.ХозОперации.ПоступлениеАвтомобилейОтветственноеХранение Тогда
		ТекстСообщения = НСтр("ru = 'Доп. расходы при поступлении на комиссию/ответхранение не начисляются.'");
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
		Возврат Истина;
	КонецЕсли;
	
	ЭтотОбъект.ХозОперация = Справочники.ХозОперации.ПоступлениеДопРасходовНаАвтомобили;
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеАвтомобилей()

// Производит заполнение объекта на основании документа "Поступление товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Запрет ввода документа на основании Поступления товаров на комиссию
	ХозОперацияОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ХозОперация");
	
	Если ХозОперацияОснования = Справочники.ХозОперации.ПоступлениеТоваровКомиссия Тогда
		ТекстСообщения = НСтр("ru = 'Доп. расходы при поступлении на комиссию не начисляются.'");
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеТоваров()

// Производит заполнение объекта на основании документа "Ввод остатков автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВводОстатковАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЭтотОбъект.ХозОперация = Справочники.ХозОперации.ПоступлениеДопРасходовНаАвтомобили;
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ВводОстатковАвтомобилей()

// Производит заполнение объекта на основании документа "Перемещение автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПеремещениеАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЭтотОбъект.ХозОперация = Справочники.ХозОперации.ПоступлениеДопРасходовНаАвтомобилиВнутреннее;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПеремещениеАвтомобилей()

// Производит заполнение объекта на основании документа "Заказ-наряд"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаряд(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЭтоСборкаАвтомобиля =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ВидРемонта.ТипРемонта") =
		Перечисления.ТипыРемонта.СборкаАвтомобиля;
	
	Если Не ЭтоСборкаАвтомобиля Тогда
		
		ТекстСообщения =
			НСтр("ru = 'Ввод документа доступен только для заказ-наряда с типом ремонта ""Сборка автомобиля""'");
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
		Возврат Истина;
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Состояние <> Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
		
		ТекстСообщения =
			НСтр("ru = 'Ввод документа доступен только для заказ-наряда в состоянии ""Закрыт""'");
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
		Возврат Истина;
		
	КонецЕсли;
	
	ЭтотОбъект.ХозОперация = Справочники.ХозОперации.ПоступлениеДопРасходовНаАвтомобили;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаряд()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОстаткиПартийНеКорректны()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПоступлениеДопРасходовТовары.Номенклатура
		|ИЗ
		|	Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
		|ГДЕ
		|	ПоступлениеДопРасходовТовары.Ссылка = &Ссылка
		|	И ПоступлениеДопРасходовТовары.Номенклатура.СпособРаспределенияДопРасходов <> ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияДопРасходов.НаДоходыИРасходы)"
	);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеСвойства.Шапка.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Отказ = Ложь;
	РаспределяемНаТовары = Ложь;
	ВариантУчетаПоПартиям = ПолучитьСтратегиюСписанияПоДатам(
		ДополнительныеСвойства.Шапка.СкладКомпании,
		ДополнительныеСвойства.Шапка.Организация,
		?(ДополнительныеСвойства.РежимПроведения = РежимПроведенияДокумента.Оперативный, Неопределено, ДополнительныеСвойства.Шапка.Дата)
	);
	
	Для Каждого ЭлементДокументыОснования Из ДополнительныеСвойства.Шапка.Ссылка.ДокументыОснования.Выгрузить() Цикл
		
		Если
			ДополнительныеСвойства.Шапка.ХозОперация = Справочники.ХозОперации.ПоступлениеДопРасходов
			ИЛИ ДополнительныеСвойства.Шапка.ХозОперация = Справочники.ХозОперации.ПоступлениеДопРасходовВнутреннее
		Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПартииОбороты.Номенклатура,
			|	ПартииОбороты.ХарактеристикаНоменклатуры,
			|	ПартииОбороты.СтатусПартии,
			|	ПартииОбороты.Партия,
			|	СУММА(ПартииОбороты.Количество) КАК КоличествоПриход
			|ПОМЕСТИТЬ
			|	ПартииОбороты
			|ИЗ
			|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииОбороты
			|ГДЕ
			|	ПартииОбороты.Регистратор   = &Регистратор
			|	И ПартииОбороты.СкладКомпании = &СкладКомпании
			|	И ПартииОбороты.ВидДвижения   = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|СГРУППИРОВАТЬ ПО
			|	ПартииОбороты.Номенклатура,
			|	ПартииОбороты.ХарактеристикаНоменклатуры,
			|	ПартииОбороты.СтатусПартии,
			|	ПартииОбороты.Партия
			|ИМЕЮЩИЕ
			|	СУММА(ПартииОбороты.Количество)<>0
			|;
			|
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПартииОбороты.Номенклатура КАК Номенклатура,
			|	ПартииОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	ЕСТЬNULL(СУММА(ПартииОбороты.КоличествоПриход), 0) КАК КоличествоПриход,
			|	ЕСТЬNULL(СУММА(ПартииОстатки.КоличествоОстаток), 0) КАК КоличествоОстаток
			|ИЗ
			|	ПартииОбороты КАК ПартииОбороты
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.ПартииТоваровКомпании.Остатки(&НаМомент, СкладКомпании = &СкладКомпании
			|	И (Номенклатура, ХарактеристикаНоменклатуры, СтатусПартии, Партия) В (ВЫБРАТЬ Номенклатура, ХарактеристикаНоменклатуры, СтатусПартии, Партия ИЗ ПартииОбороты)) КАК ПартииОстатки
			|ПО
			|	ПартииОбороты.Номенклатура = ПартииОстатки.Номенклатура
			|	И ПартииОбороты.ХарактеристикаНоменклатуры = ПартииОстатки.ХарактеристикаНоменклатуры
			|	И ПартииОбороты.СтатусПартии = ПартииОстатки.СтатусПартии
			|	И ПартииОбороты.Партия = ПартииОстатки.Партия
			|СГРУППИРОВАТЬ ПО
			|	ПартииОбороты.Номенклатура,
			|	ПартииОбороты.ХарактеристикаНоменклатуры";
			
			РаспределяемНаТовары=Истина;
			
		ИначеЕсли
			ДополнительныеСвойства.Шапка.ХозОперация=Справочники.ХозОперации.ПоступлениеДопРасходовНаАвтомобили
			ИЛИ ДополнительныеСвойства.Шапка.ХозОперация=Справочники.ХозОперации.ПоступлениеДопРасходовНаАвтомобилиВнутреннее
		Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПартииОбороты.Автомобиль,
			|	ПартииОбороты.СтатусПартии,
			|	ПартииОбороты.Партия,
			|	СУММА(ПартииОбороты.Количество) КАК КоличествоПриход
			|ПОМЕСТИТЬ
			|	ПартииОбороты
			|ИЗ
			|	РегистрНакопления.ОстаткиАвтомобилей КАК ПартииОбороты
			|ГДЕ
			|	ПартииОбороты.Регистратор   = &Регистратор И 
			|	ПартииОбороты.СкладКомпании = &СкладКомпании И 
			|	ПартииОбороты.ВидДвижения   = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И 
			|	ПартииОбороты.Количество > 0
			|СГРУППИРОВАТЬ ПО
			|	ПартииОбороты.Автомобиль,
			|	ПартииОбороты.СтатусПартии,
			|	ПартииОбороты.Партия
			|ИМЕЮЩИЕ
			|	СУММА(ПартииОбороты.Количество)<>0
			|;
			|
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПартииОбороты.Автомобиль КАК Номенклатура,
			|	ЕСТЬNULL(СУММА(ПартииОбороты.КоличествоПриход), 0) КАК КоличествоПриход,
			|	ЕСТЬNULL(СУММА(ПартииОстатки.КоличествоОстаток), 0) КАК КоличествоОстаток
			|ИЗ
			|	ПартииОбороты КАК ПартииОбороты
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.ОстаткиАвтомобилей.Остатки(&НаМомент, СкладКомпании = &СкладКомпании И 
			|	(Автомобиль, СтатусПартии, Партия) В (ВЫБРАТЬ Автомобиль, СтатусПартии, Партия ИЗ ПартииОбороты)) КАК ПартииОстатки
			|ПО
			|	ПартииОбороты.Автомобиль = ПартииОстатки.Автомобиль И 
			|	ПартииОбороты.СтатусПартии = ПартииОстатки.СтатусПартии И 
			|	ПартииОбороты.Партия = ПартииОстатки.Партия
			|СГРУППИРОВАТЬ ПО
			|	ПартииОбороты.Автомобиль";
			
		КонецЕсли;
		
		Запрос=Новый Запрос;
		Запрос.Текст=ТекстЗапроса;
		Запрос.УстановитьПараметр("НаМомент",ДополнительныеСвойства.Шапка.МоментВремени);
		Запрос.УстановитьПараметр("Регистратор",ЭлементДокументыОснования.ДокументОснование);
		
		Если
			ТипЗнч(ЭлементДокументыОснования.ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров")
			ИЛИ ТипЗнч(ЭлементДокументыОснования.ДокументОснование) = Тип("ДокументСсылка.ПеремещениеАвтомобилей")
		Тогда
			
			Запрос.УстановитьПараметр("СкладКомпании", ДополнительныеСвойства.Шапка.ДокументОснование.СкладПолучатель);
			
		Иначе
			
			Запрос.УстановитьПараметр("СкладКомпании", ДополнительныеСвойства.Шапка.ДокументОснование.СкладКомпании);
			
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ПараметрыОтбора = Новый Структура("ДокументОснование", ЭлементДокументыОснования.ДокументОснование);
		НайденныеСтроки = РаспределениеРасходов.Выгрузить(ПараметрыОтбора);
		РучноеРаспределение = НайденныеСтроки.Количество() > 0;
		
		Пока Выборка.Следующий() Цикл
			
			Если РучноеРаспределение Тогда
				
				ПараметрыОтбора = Новый Структура("НоменклатураРаспределения", Выборка.Номенклатура);
				Если РаспределяемНаТовары Тогда 
					ПараметрыОтбора.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Выборка);
				Результат = НайденныеСтроки.НайтиСтроки(ПараметрыОтбора);
				Если Результат.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если РаспределяемНаТовары И (ВариантУчетаПоПартиям=Перечисления.СтратегияСписанияПартийТоваровПоДатам.Средняя) Тогда
				
				Если Выборка.КоличествоОстаток = 0 Тогда
					
					ОбщегоНазначения.СообщитьПользователю(
						НСтр("ru = 'Дополнительные затраты, распределяемые на себестоимости могут быть введены только на номенклатуру имеющуюся на складе.'"),
						ЭтотОбъект,
						,
						,
						Отказ
					);
					Прервать;
					
				КонецЕсли;
				
			ИначеЕсли Выборка.КоличествоПриход <> Выборка.КоличествоОстаток Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Дополнительные затраты, распределяемые на себестоимости могут быть введены только ДО СПИСАНИЯ (ПЕРЕМЕЩЕНИЯ) данной партии.'"),
					ЭтотОбъект,
					,
					,
					Отказ
				);
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

Функция ПолучитьШапкуДокумента(ДокументСсылка)
	
	Запрос=Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ТипЦен КАК ТипЦен,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.Организация КАК Организация,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Док.Проект КАК Проект,
	/////////// ПРИВАТ ////////////
	|	Док.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Док.ДокументОснование КАК ДокументОснование,
	|	Док.ДокументОснование.СкладКомпании КАК СкладКомпании,
	|	Док.СуммаДокумента КАК СуммаДокумента
	|
	|ИЗ
	|	Документ."+Метаданные().Имя+" КАК Док
	|ГДЕ
	|	Док.Ссылка=&Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции // ПолучитьШапкуДокумента()

#КонецОбласти

#КонецЕсли
