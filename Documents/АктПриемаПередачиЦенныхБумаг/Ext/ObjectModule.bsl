// Модуль объекта документа "Акт приема-передачи ценных бумаг"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА) Экспорт
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Запретим удалять документ партии отрицательных остатков
	Если Ссылка=Константы.ПартияТоваровОтрицательныхОстатков.Получить() Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Документ является документом партии отрицательных остатках и не может быть удален.'"),
			ЭтотОбъект,
			,,
			Отказ
		);
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если РасчетыСКонтрагентамиСервер.ЕстьЗачетАвансаПоДокументу(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// деньги
	НаборЗаписейДС=Движения.ДенежныеСредстваКомпании;
	НаборЗаписейДС.СтатьяДДС=СтатьяДДС;
	
	// взаиморасчеты
	СуммаДоходаРасходаСуммовыхРазниц = 0;
	
	// БАЛАНС: определяем, нужно ли будет вводить корректирующие движения
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(Дата);	
	ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ДоговорВзаиморасчетов.ПодразделениеКомпании, Дата);
	ТаблицаВзаиморасчетов = Новый ТаблицаЗначений;
	ТаблицаВзаиморасчетов.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаУпр",      Новый ОписаниеТипов("Число"));
	
	Документы.АктПриемаПередачиЦенныхБумаг.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	
	// проводим взаиморасчеты
	Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыКомпании;
		НаборЗаписейВзаиморасчеты.РежимПроведения = РежимПроведения;
		НаборЗаписейВзаиморасчеты.Контрагент = Контрагент;
		НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
		НаборЗаписейВзаиморасчеты.Сделка = Неопределено;
		НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем = Неопределено;
		НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок  = 
			(СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически);
		НаборЗаписейВзаиморасчеты.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейВзаиморасчеты.Валюта = Неопределено;
	КонецЕсли;
	Для Каждого СтрокаТЧ Из ЦенныеБумаги Цикл
		НаборЗаписейДС.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейДС.СтруктурнаяЕдиница = СтрокаТЧ.ЦеннаяБумага;
		НаборЗаписейДС.Сумма = СтрокаТЧ.Сумма;
		Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
			НаборЗаписейВзаиморасчеты.Сумма = СтрокаТЧ.Сумма;
			НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц = 0;
		КонецЕсли;
		
		ЭтоПриемЦенныхБумаг = (ХозОперация = Справочники.ХозОперации.ПриемЦенныхБумаг);
		Если Не ЭтоПриемЦенныхБумаг Тогда
			Отказ = НЕ НаборЗаписейДС.Расход() ИЛИ Отказ;
			Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
				Отказ = НЕ НаборЗаписейВзаиморасчеты.Приход() ИЛИ Отказ;
				СуммаДоходаРасходаСуммовыхРазниц =
					СуммаДоходаРасходаСуммовыхРазниц + НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
			КонецЕсли;
		Иначе // Прием ценных бумаг
			Отказ = НЕ НаборЗаписейДС.Приход() ИЛИ Отказ;
			Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
				Отказ = НЕ НаборЗаписейВзаиморасчеты.Расход() ИЛИ Отказ;
				СуммаДоходаРасходаСуммовыхРазниц =
					СуммаДоходаРасходаСуммовыхРазниц + НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
			КонецЕсли;
		КонецЕсли;
		
		// БАЛАНС: Если ведется баланс по подразделению и соответствующие балансовые подразделения 
		// подразделения ценной бумаги и подразделения договора не совпадают, то будет разрыв баланса.
		// Необходимо будет добавить корректирующие движения.
		Если ВедетсяБалансПоПодразделению Тогда
			ПодразделениеЦеннойБумаги =
				Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(
					СтрокаТЧ.ЦеннаяБумага.ПодразделениеКомпании,
					Дата);
			Если ПодразделениеЦеннойБумаги <> ПодразделениеДоговорВзаиморасчетов Тогда
				// Необходимо получить сумму в управленческой валюте.
				// Она автоматом рассчитывается в модуле набора записей.
				СуммаЗаписиУпр = НаборЗаписейДС.ДополнительныеСвойства.СуммаЗаписиУпр;
			
				// Добавляем строку в таблицу.
				НоваяСтрока = ТаблицаВзаиморасчетов.Добавить();
				НоваяСтрока.Подразделение = СтрокаТЧ.ЦеннаяБумага.ПодразделениеКомпании;
				НоваяСтрока.СуммаУпр      = СуммаЗаписиУпр;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// доходы и расходы по суммовым разницам
	Если СуммаДоходаРасходаСуммовыхРазниц <> 0 Тогда
		НаборЗаписейДиР = Движения.ДоходыИРасходы;
		НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
		
		// Если баланс ведется по подразделениям, то необходимо принудительно установить подразделение договора.
		// В противном случае, подразделение передавать не нужно, т.к. будет автоматически задействовано подразделение
		// шапки документа.
		Если ВедетсяБалансПоПодразделению Тогда
			НаборЗаписейДиР.Подразделение = ДоговорВзаиморасчетов.ПодразделениеКомпании;
		КонецЕсли;
		НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
		НаборЗаписейДиР.ВУпрВалюте = Истина;
		Если СуммаДоходаРасходаСуммовыхРазниц < 0 Тогда
			НаборЗаписейДиР.Расход = -СуммаДоходаРасходаСуммовыхРазниц;
		Иначе
			НаборЗаписейДиР.Доход = СуммаДоходаРасходаСуммовыхРазниц;
		КонецЕсли;
		Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
	КонецЕсли;
	
	Документы.АктПриемаПередачиЦенныхБумаг.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	Документы.АктПриемаПередачиЦенныхБумаг.СформироватьТаблицуДоходыИРасходы(ДополнительныеСвойства);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	// БАЛАНС: Если таблица значений "ТаблицаВзаиморасчетов" не пустая, значит необходимо создать корректирующие записи
	// Предварительно свернем таблицу по подразделению, чтобы уменьшить количество создаваемых записей.
	Если ТаблицаВзаиморасчетов.Количество()<>0 Тогда
		ТаблицаВзаиморасчетов.Свернуть("Подразделение", "СуммаУпр");
		Для Каждого ТекСтрока Из ТаблицаВзаиморасчетов Цикл
			Если Не ЭтоПриемЦенныхБумаг Тогда // Передача ценных бумаг
				Если ТекСтрока.СуммаУпр<>0 Тогда
					// Корректируем увеличение денежных средств.
					НаборЗаписейДиР = Движения.ДоходыИРасходы;
					НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
					НаборЗаписейДиР.Подразделение          = ТекСтрока.Подразделение;
					НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
					НаборЗаписейДиР.ВУпрВалюте             = Истина;
					НаборЗаписейДиР.Доход                  = ТекСтрока.СуммаУпр;
					Отказ = НЕ НаборЗаписейДиР.Расход() ИЛИ Отказ;
					
					// Корректируем рост дебиторская задолженность.
					НаборЗаписейДиР = Движения.ДоходыИРасходы;
					НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
					НаборЗаписейДиР.Подразделение  = ДоговорВзаиморасчетов.ПодразделениеКомпании;
					НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
					НаборЗаписейДиР.ВУпрВалюте = Истина;
					НаборЗаписейДиР.Доход      = ТекСтрока.СуммаУпр;
					Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
				КонецЕсли;
			Иначе // Прием ценных бумаг.
				Если ТекСтрока.СуммаУпр<>0 Тогда
					// Корректируем уменьшение денежных средств.
					НаборЗаписейДиР = Движения.ДоходыИРасходы;
					НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
					НаборЗаписейДиР.Подразделение  = ТекСтрока.Подразделение;
					НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
					НаборЗаписейДиР.ВУпрВалюте = Истина;
					НаборЗаписейДиР.Доход = ТекСтрока.СуммаУпр;
					Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
					
					// Корректируем рост кредиторская задолженность.
					НаборЗаписейДиР = Движения.ДоходыИРасходы;
					НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
					НаборЗаписейДиР.Подразделение  = ДоговорВзаиморасчетов.ПодразделениеКомпании;
					НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
					НаборЗаписейДиР.ВУпрВалюте = Истина;
					НаборЗаписейДиР.Расход = ТекСтрока.СуммаУпр;
					Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	// двигаем границу последовательности взаиморасчетов
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
