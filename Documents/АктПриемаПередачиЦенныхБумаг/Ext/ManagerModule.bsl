// Модуль менеджера документа "Акт приема-передачи ценных бумаг"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
		
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
	
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
		
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.АктПриемаПередачиЦенныхБумаг);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.ЦенныеБумаги.Итог("Сумма"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()


#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	ОбязательныеРеквизиты.Добавить("СтатьяДДС");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("ЦенныеБумаги");
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("ЦенныеБумаги.ЦеннаяБумага");
	ОбязательныеРеквизиты.Добавить("ЦенныеБумаги.Сумма");
	
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(Объект.ДоговорВзаиморасчетов);
	Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		ОбязательныеРеквизиты.Добавить("СпособЗачетаАвансов");
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеЦенныеБумаги = Новый Массив();
	УникальныеЦенныеБумаги.Добавить("ЦеннаяБумага");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("ЦенныеБумаги", УникальныеЦенныеБумаги);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Параметры проверки таблицы ценных бумаг
	КонтролируемыеРеквизитыЦенныеБумаги = Новый Структура();
	КонтролируемыеРеквизитыЦенныеБумаги.Вставить("ЦеннаяБумага", ЛОЖЬ);
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	КонтролируемыеРеквизиты.Вставить("ЦенныеБумаги",          КонтролируемыеРеквизитыЦенныеБумаги);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Инициализируем параметры обработки действия с объектом
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.ЦенныеБумаги.Количество() > 0);
	
	// Возвращаем сформированную структуру параметров
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Получим признаки необходимости совершить пересчет суммовых показателей документа.
	ТребуетсяУстановкаЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяУстановкаЦен", ЛОЖЬ);
	ТребуетсяПересчетЦен  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен",  ЛОЖЬ);
	
	// Прекращаем обработку, если пересчет не требуется
	Если (НЕ ТребуетсяУстановкаЦен) И (НЕ ТребуетсяПересчетЦен) Тогда
		Возврат;
	КонецЕсли;
	
	// Сбрасываем признаки необходимости пересчета
	Если ПараметрыДействия.Свойство("ТребуетсяУстановкаЦен") Тогда
		ПараметрыДействия.ТребуетсяУстановкаЦен = ЛОЖЬ;
	КонецЕсли;
	Если ПараметрыДействия.Свойство("ТребуетсяПересчетЦен") Тогда
		ПараметрыДействия.ТребуетсяПересчетЦен  = ЛОЖЬ;
	КонецЕсли;
	
	Если ТребуетсяУстановкаЦен Тогда
		
		Для Каждого Строка Из Объект.ЦенныеБумаги Цикл
			Строка.Номинал = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Строка.ЦеннаяБумага.Номинал, Строка.ЦеннаяБумага.ВалютаДенежныхСредств, Объект.Дата, Объект.ВалютаДокумента, Объект.КурсДокумента);
			ЦенныеБумагиНоминалПриИзменении(Объект, Строка, ПараметрыДействия);
		КонецЦикла;
		
	ИначеЕсли ТребуетсяПересчетЦен Тогда
		
		СтарыйКурс = ПараметрыДействия.СтарыйКурс;
		НовыйКурс  = Объект.КурсДокумента;
		
		Если (СтарыйКурс*НовыйКурс)=0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='При пересчете валюты обнаружен нулевой курс валюты.'"), Объект
			);
			Возврат;
		КонецЕсли;
		
		Если СтарыйКурс=НовыйКурс Тогда
			Возврат;
		КонецЕсли;
		
		КоэффициентСоотношенияКурсов = СтарыйКурс/НовыйКурс;
		
		Для Каждого Строка Из Объект.ЦенныеБумаги Цикл
			Строка.Номинал = Окр(Строка.Номинал*КоэффициентСоотношенияКурсов, 2);
			ЦенныеБумагиНоминалПриИзменении(Объект, Строка, ПараметрыДействия);
		КонецЦикла;
		
	КонецЕсли;
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЦенныеБумаги

// Обработчик события возникающего при изменении данных реквизита "Ценная бумага" в таблице "Ценные Бумаги".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЦенныеБумагиЦеннаяБумагаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
		Строка.Количество = 1;
	КонецЕсли;
	Строка.Номинал = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Строка.ЦеннаяБумага.Номинал, Строка.ЦеннаяБумага.ВалютаДенежныхСредств, Объект.Дата, Объект.ВалютаДокумента, Объект.КурсДокумента);
	
	ЦенныеБумагиНоминалПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ЦенныеБумагиЦеннаяБумагаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Номинал" в таблице "Ценные Бумаги".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЦенныеБумагиНоминалПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено)
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ЦенныеБумагиКоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ЦенныеБумагиНоминалПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Ценные Бумаги".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЦенныеБумагиКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Строка.Сумма = Строка.Номинал * Строка.Количество;
	
КонецПроцедуры // ЦенныеБумагиКоличествоПриИзменении()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.АктПриемаПередачиЦенныхБумаг",
		"ПечатьАктПриемаПередачиЦенныхБумаг",
		НСтр("ru = 'Акт приема-передачи ценных бумаг'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьАктПриемаПередачиЦенныхБумаг") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ПечатьАктПриемаПередачиЦенныхБумаг",
			НСтр("ru = 'Акт приема-передачи ценных бумаг'"),
			ПечатьАктПриемаПередачиЦенныхБумаг(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует печатную форму "Акт приема-передачи ценных бумаг"
//
Функция ПечатьАктПриемаПередачиЦенныхБумаг(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктПриемаПередачиЦенныхБумаг_АктПриемаПередачиЦенныхБумаг";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати,ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АктПриемаПередачиЦенныхБумаг.ПФ_MXL_АктПриемаПередачиЦенныхБумаг");
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ОтФирмы       = "_________________________";
		ДоверенностьФ = "_________________________";
		ОтКлиента     = "_________________________";
		ДоверенностьК = "_________________________";
		
		ДатаДокумента = Документ.Дата;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ПредставлениеОрганизации = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, ,
			ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ПредставлениеКонтрагента = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Контрагент, ,
			ДополнительныеПараметры);
		
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
		ОбластьМакета.Параметры.Организация              = Документ.Организация;
		ОбластьМакета.Параметры.ВалютаДокумента          = Документ.ВалютаДокумента;
		
		Если Документ.ХозОперация=Справочники.ХозОперации.ПередачаЦенныхБумаг Тогда
			ОбластьМакета.Параметры.Текст1 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 в лице Исполнительного директора %2, действующего на основании доверенности №%3, с одной стороны и %4 в лице %5, действующего на основании доверенности №%6, с другой стороны, составили настоящий акт о том, что %1 передал, а %4 принял ценные бумаги со следующими реквизитами:'"),
				ПредставлениеОрганизации, ОтФирмы, ДоверенностьФ, ПредставлениеКонтрагента, ОтКлиента, ДоверенностьК);
			Передал = ПредставлениеОрганизации;
			Принял  = ПредставлениеКонтрагента;
		ИначеЕсли Документ.ХозОперация=Справочники.ХозОперации.ПриемЦенныхБумаг Тогда
			ОбластьМакета.Параметры.Текст1 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 в лице Исполнительного директора %2, действующего на основании доверенности №%3, с одной стороны и %4 в лице %5, действующего на основании доверенности №%6, с другой стороны, составили настоящий акт о том, что %4 передал, а %1 принял ценные бумаги со следующими реквизитами:'"),
				ПредставлениеОрганизации, ОтФирмы, ДоверенностьФ, ПредставлениеКонтрагента, ОтКлиента, ДоверенностьК);
			Передал = ПредставлениеКонтрагента;
			Принял  = ПредставлениеОрганизации;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// сразу два, т.к. выводим на второй странице только
		НомерСтраницы = 2;
		НомерСтраницыПред = НомерСтраницы;
		
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьШапкаТаблицы.Параметры.Валюта = Документ.ВалютаДокумента;
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// заполним параметры шапки таблицы для следующего листа
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
		
		// корректировка таблицы
		ВыборкаТабличнойЧасти = Документ.ЦенныеБумаги.Выгрузить().Скопировать();
		ВыборкаТабличнойЧасти.Колонки.Добавить("СуммаНом", Новый ОписаниеТипов("Число"));
		Для Каждого СтрокаТабличнойЧасти Из ВыборкаТабличнойЧасти Цикл
			СтрокаТабличнойЧасти.СуммаНом = СтрокаТабличнойЧасти.ЦеннаяБумага.Номинал;
		КонецЦикла;
		
		// заполняем подвал, чтобы получить его высоту
		ИтогоНом = ВыборкаТабличнойЧасти.Итог("СуммаНом");
		Итого    = ВыборкаТабличнойЧасти.Итог("Сумма");
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Текст2  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '1. Итого по номиналу: %1 %2 (%3)'"), Формат(ИтогоНом, ФорматВыводаСуммы), Документ.ВалютаДокумента,
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоНом, Документ.ВалютаДокумента));
		ОбластьМакета.Параметры.Текст3 =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '2. Сумма сделки: %1 %2 (%3)'"),
				Формат(Итого, ФорматВыводаСуммы),
				Документ.ВалютаДокумента,
				РаботаСКурсамиВалют.СформироватьСуммуПрописью(Итого, Документ.ВалютаДокумента));
		ОбластьМакета.Параметры.Текст4  = НСтр("ru = 'Приложение:'") + Символы.НПП + Документ.Комментарий;
		ОбластьМакета.Параметры.Передал = Передал;
		ОбластьМакета.Параметры.Принял  = Принял;
		
		ТабличныйДокументПодвал = Новый ТабличныйДокумент;
		ТабличныйДокументПодвал.Вывести(ОбластьМакета);
		
		// Получаем область строки документа
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		
		ИтогНом = 0;
		Для Каждого СтрокаТабличнойЧасти Из ВыборкаТабличнойЧасти Цикл
			
			ЦеннаяБумага = СтрокаТабличнойЧасти.ЦеннаяБумага;
			
			ОбластьСтрока.Параметры.Заполнить(СтрокаТабличнойЧасти);
			ЦеннаяБумагаПредставление = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ЦеннаяБумага);
			ПредполагаемаяДатаПродажи = Формат(ЦеннаяБумага.ПредполагаемаяДатаПродажи, "ДЛФ=Д");
			ОбластьСтрока.Параметры.ЦеннаяБумага                          = ЦеннаяБумага;
			ОбластьСтрока.Параметры.ЦеннаяБумагаПредставление             = ЦеннаяБумагаПредставление;
			ОбластьСтрока.Параметры.ЦеннаяБумагаКод                       = ЦеннаяБумага.Код;
			ОбластьСтрока.Параметры.ЦеннаяБумагаНоминал                   = Формат(ЦеннаяБумага.Номинал, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.ЦеннаяБумагаДатаПринятияКУчету        = Формат(ЦеннаяБумага.ДатаПринятияКУчету, "ДЛФ=Д");
			ОбластьСтрока.Параметры.ЦеннаяБумагаПредполагаемаяДатаПродажи = ПредполагаемаяДатаПродажи;
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если ВыборкаТабличнойЧасти.Индекс(СтрокаТабличнойЧасти) = ВыборкаТабличнойЧасти.Количество()-1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ТабличныйДокументПодвал);
			КонецЕсли;
			
			// выводим строку, делая проверку попадания на лист
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент,
				ОбластьСтрока, ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, , Документ, мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ТабличныйДокументПодвал);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьАктПриемаПередачиЦенныхБумаг()

#КонецОбласти

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговора",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов"));
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаДоговора", ДополнительныеПараметры.ДляПроведения.ВалютаДоговора);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	АктПриемаПередачиЦенныхБумаг.Организация КАК Организация,
	|	АктПриемаПередачиЦенныхБумаг.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	АктПриемаПередачиЦенныхБумаг.Ссылка КАК Ссылка,
	|	АктПриемаПередачиЦенныхБумаг.Дата КАК Дата,
	|	АктПриемаПередачиЦенныхБумаг.ХозОперация КАК ХозОперация,
	|	НЕОПРЕДЕЛЕНО КАК Сделка,
	|	АктПриемаПередачиЦенныхБумаг.Контрагент КАК Контрагент,
	|	АктПриемаПередачиЦенныхБумаг.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	АктПриемаПередачиЦенныхБумаг.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	АктПриемаПередачиЦенныхБумаг.СуммаДокумента КАК СуммаДокумента,
	|	АктПриемаПередачиЦенныхБумаг.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	АктПриемаПередачиЦенныхБумаг.КурсВалютыУпр КАК КурсВалютыУпр,
	|	АктПриемаПередачиЦенныхБумаг.КурсДокумента КАК КурсДокумента,
	|	АктПриемаПередачиЦенныхБумаг.ВалютаДокумента КАК ВалютаДокумента,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ШапкаДокумента
	|ИЗ
	|	Документ.АктПриемаПередачиЦенныхБумаг КАК АктПриемаПередачиЦенныхБумаг
	|ГДЕ
	|	АктПриемаПередачиЦенныхБумаг.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ ТаблицаКурсовВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр, &ВалютаДоговора)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктПриемаПередачиЦенныхБумагЦенныеБумаги.Ссылка КАК Ссылка,
	|	СУММА(АктПриемаПередачиЦенныхБумагЦенныеБумаги.Сумма) КАК СумаОплаты
	|ПОМЕСТИТЬ ТаблицаОплат
	|ИЗ
	|	Документ.АктПриемаПередачиЦенныхБумаг.ЦенныеБумаги КАК АктПриемаПередачиЦенныхБумагЦенныеБумаги
	|ГДЕ
	|	АктПриемаПередачиЦенныхБумагЦенныеБумаги.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	АктПриемаПередачиЦенныхБумагЦенныеБумаги.Ссылка
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплат.Ссылка КАК Ссылка,
	|	СУММА(ТаблицаОплат.СумаОплаты) КАК СумаОплаты
	|ПОМЕСТИТЬ СуммаОплатПоДокументу
	|ИЗ
	|	ТаблицаОплат КАК ТаблицаОплат
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплат.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШапкаДокумента.Организация КАК Организация,
	|	ШапкаДокумента.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ШапкаДокумента.Ссылка КАК Ссылка,
	|	ШапкаДокумента.Дата КАК Дата,
	|	ШапкаДокумента.ХозОперация КАК ХозОперация,
	|	ШапкаДокумента.Сделка КАК Сделка,
	|	ШапкаДокумента.Контрагент КАК Контрагент,
	|	ШапкаДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ЕСТЬNULL(СуммаОплатПоДокументу.СумаОплаты, 0) КАК СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.КурсВалютыВзаиморасчетов = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютВзаиморасчетов.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетов.Кратность, 1)
	|		ИНАЧЕ ШапкаДокумента.КурсВалютыВзаиморасчетов
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ШапкаДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ШапкаДокумента.КурсДокумента КАК КурсДокумента,
	|	ШапкаДокумента.ВалютаДоговора КАК ВалютаДоговора,
	|	ШапкаДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ШапкаДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ШапкаДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл
	|ПОМЕСТИТЬ ДанныеДокументаОплаты
	|ИЗ
	|	ШапкаДокумента КАК ШапкаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсовВалют КАК КурсыВалютУпр
	|		ПО ШапкаДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсовВалют КАК КурсыВалютВзаиморасчетов
	|		ПО ШапкаДокумента.ВалютаДоговора = КурсыВалютВзаиморасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсовВалют КАК КурсыВалютРегл
	|		ПО ШапкаДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммаОплатПоДокументу КАК СуммаОплатПоДокументу
	|		ПО ШапкаДокумента.Ссылка = СуммаОплатПоДокументу.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ШапкаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаКурсовВалют
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаОплат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СуммаОплатПоДокументу";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

