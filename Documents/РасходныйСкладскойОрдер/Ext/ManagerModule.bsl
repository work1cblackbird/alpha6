// Модуль менеджера документа "Расходный складской ордер"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Процедура заполнения табличной части документа при вводе на основании
//
// Параметры:
// ТекущийДокумент 	- текущий документ; тип: ДокументОбъект. Обязательный для заполнения.
// ДокументОснование 	- ссылка на документ-основание; тип: ДокументСсылка. Обязательный для заполнения.
// СтруктураОснования 	- тип: Строка с именами реквизитов табличных частей основания в порядке соответствия
// 	реквизитам табличных частей подчиненных документов, разделенных запятыми.
//		Первыми обязательно идут имена реквизитов, обозначающих количество и единицу измерения товара.
// 		Они нужны для правильного пересчета товара.
//  После идут имена других реквизитов в порядке соответствия.
//		Например: СтрокаОснования = "Количество,ЕдиницаИзмерения,Ячейка"
//		Не обязателен для заполнения. По умолчанию - Неопределено. 
// СтруктураПодчиненных - тип: Структура, Ключами которой являются имена ВСЕХ видов подчиненных документов,
//		введенных до текущего документа и участвующих в вычетах,
// 	а значениями - строки с именами реквизитов табличных частей этих документов в порядке соответствия
// 	 	реквизитам табличных частей основания, разделенные запятыми.
//		Первыми обязательно идут имена реквизитов, обозначающих количество и единицу измерения товара.
// 		Они нужны для правильного пересчета товара.
//  После идут имена других реквизитов в порядке соответствия.
//		Например: СтруктураСоответствий = Новый Структура();
//				 СтруктураСоответствий.Вставить( < ИмяПодчиненногоДокумента > ,"Количество,ЕдиницаИзмеренияСтарая,ЯчейкаСтарая");
//		Не обязателен для заполнения. По умолчанию - Неопределено. 
// ТолькоПроведенные - признак проверки только проведенных подчиненных документов.
// Не обязательный для заполнения. По-умолчанию = Истина.
//
Процедура ЗаполнитьТабличнуюЧастьПоОснованию(ТекущийДокумент, ДокументОснование, ТолькоПроведенные = Истина)Экспорт
	
	Если НЕ ДокументОснование.Метаданные().ТабличныеЧасти.Найти("Товары") = Неопределено И НЕ ТекущийДокумент.Метаданные().ТабличныеЧасти.Найти("Товары") = Неопределено Тогда
		ОсновнаяТаблица = ДокументОснование.Товары.Выгрузить();
		ТаблицаДокумента = ТекущийДокумент.Товары.Выгрузить();
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПодчиненныеДокументы.Ссылка КАК Документ
		|ИЗ
		|	КритерийОтбора.ПодчиненныеДокументы(&Основание) КАК ПодчиненныеДокументы
		|ГДЕ
		|	ПодчиненныеДокументы.Ссылка ССЫЛКА Документ.РасходныйСкладскойОрдер";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Основание", ДокументОснование);
		МассивПодчиненныхДокументов = Запрос.Выполнить().Выгрузить();
		
		МассивВычитаемыхТаблиц = Новый Массив;
		Для Каждого ТекДокумент Из МассивПодчиненныхДокументов Цикл
			Если НЕ ТекДокумент.Документ.ПометкаУдаления Тогда
				МассивВычитаемыхТаблиц.Добавить(ТекДокумент.Документ.Товары.Выгрузить());
			КонецЕсли;
		КонецЦикла;
		
		ТекущийДокумент.Товары.Загрузить(ВычитаниеТаблиц(ОсновнаяТаблица, МассивВычитаемыхТаблиц));
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОснованию()

// Процедура вычитания из одной таблицы других с учетом реквизитов, указанных в параметрах.
//
// Параметры:
// ОсновнаяТаблица 		- Таблица из которой будет выполнено вычитание; Тип: ТаблицаЗначений; Обязательный для заполнения.
// МассивВычитаемыхТаблиц 	- Массив ТаблицЗначений которые будут вычитаться из ОсновнойТаблицы;
//							  Тип: Массив; Необязательный для заполнения
// СтруктураОснования 		- Имена реквизитов ОсновнойТаблицы в порядке соответствия; Тип: Структура;
//							  Необязательный для заполнения.
// 						 Может содержать ключи: Измерения; Тип значения: Строка (или Массив Строк)
//													 Количество; Тип значения: Строка
//													 ЕдиницаИзмерения; Тип значения: Строка
//	МассивСтруктурВычитаемыхТаблиц - Массив структур реквизитов вычитаемых таблиц; Тип: Массив;
//	Необязательный для заполнения.
// 									 Структуры аналогичны СтруктуреОснования, заполняются по-умолчанию так же.
//
Функция ВычитаниеТаблиц(Знач ОсновнаяТаблица, МассивВычитаемыхТаблиц, СтруктураОсновнойТаблицы = Неопределено, МассивСтруктурВычитаемыхТаблиц = Неопределено)
	
	Если НЕ ВычитаниеТаблицПроверкаЗаполнения(ОсновнаяТаблица, МассивВычитаемыхТаблиц, СтруктураОсновнойТаблицы, МассивСтруктурВычитаемыхТаблиц) Тогда
		#Если Клиент Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Вычитание таблиц не было выполнено, т.к. были обнаружены ошибки в параметрах'"));
		#КонецЕсли	
		Возврат ОсновнаяТаблица;
	КонецЕсли;
	
	Если МассивВычитаемыхТаблиц.Количество() = 0 Тогда
		Возврат ОсновнаяТаблица;
	КонецЕсли;
	
	Измерения        = СтруктураОсновнойТаблицы.Измерения;
	ЕдиницаИзмерения = СтруктураОсновнойТаблицы.ЕдиницаИзмерения;
	Количество       = СтруктураОсновнойТаблицы.Количество;
	
	ТекстИзмерений = "";
	ТекстСгруппировать = "";
	Для Каждого ТекИзмерение Из Измерения Цикл
		ТекстИзмерений = ТекстИзмерений + "ВнешнийИсточник." + ТекИзмерение + " КАК " + ТекИзмерение + ",
		|	";
		ТекстСгруппировать = ТекстСгруппировать + "ВнешнийИсточник." + ТекИзмерение + ",
		|	";
	КонецЦикла;
	
	// Выгружаем все таблицы в менеджер таблиц
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	" + ТекстИзмерений + "
	|	ВнешнийИсточник." + ЕдиницаИзмерения + " КАК ЕдиницаИзмерения,
	|	ВнешнийИсточник." + Количество + " КАК Количество
	|ПОМЕСТИТЬ
	|	Таблица0
	|ИЗ
	|	&ВнешнийИсточник КАК ВнешнийИсточник
	|;
	|
	|ВЫБРАТЬ
	|	" + ТекстИзмерений + "
	|	ВнешнийИсточник.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ВнешнийИсточник.Количество) КАК Количество
	|ПОМЕСТИТЬ
	|	ОсновнаяТаблица
	|ИЗ
	|	Таблица0 КАК ВнешнийИсточник
	|СГРУППИРОВАТЬ ПО
	|	" + ТекстСгруппировать + "
	|	ВнешнийИсточник.ЕдиницаИзмерения
	|;
	|";
	Запрос.УстановитьПараметр("ВнешнийИсточник", ОсновнаяТаблица);
	
	// Перебираем массив вычитаемых таблиц и выгружаем их в менеджер таблиц
	Индекс = 0;
	ТекстЗапросаТаблиц = "";
	СчетчикПустыхПолей = 0;
	
	Для Каждого ТекВычитаемаяТаблица Из МассивВычитаемыхТаблиц Цикл
		ТекСтруктура = МассивСтруктурВычитаемыхТаблиц[Индекс];
		
		ТекстИзмерений = "";
		Для Индекс1 = 0 По Измерения.ВГраница() Цикл
			Если ТекСтруктура.Измерения.ВГраница() < Индекс1 Тогда
				// определяем пустой значение текущего типа
				ТекПустоеЗначение = ОсновнаяТаблица.Колонки[Измерения[Индекс1]].ТипЗначения.ПривестиЗначение(Неопределено);
				
				ТекстИзмерений = ТекстИзмерений + "
				|	&ПараметрПустой"+СчетчикПустыхПолей+" КАК " + Измерения[Индекс1] + ",";
				
				// ставим параметры в запрос
				Запрос.УстановитьПараметр("ПараметрПустой"+СчетчикПустыхПолей, ТекПустоеЗначение);
				
				// увеличиваем счетчик
				СчетчикПустыхПолей = СчетчикПустыхПолей + 1;
			Иначе 
				ТекстИзмерений = ТекстИзмерений + "
				|	ВнешнийИсточник." + ТекСтруктура.Измерения[Индекс1] + " КАК " + Измерения[Индекс1] + ","
			КонецЕсли;
		КонецЦикла;
		
		ИндексСтрока = Формат(Индекс + 1,"ЧН = 0; ЧГ = ");
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	" + ТекстИзмерений + "
		|	ВнешнийИсточник." + ТекСтруктура.ЕдиницаИзмерения + " КАК ЕдиницаИзмерения,
		|	ВнешнийИсточник." + ТекСтруктура.Количество       + " КАК Количество" + "
		|ПОМЕСТИТЬ
		|	ВнешнийИсточник" + ИндексСтрока + " 
		|ИЗ
		|	&ВнешнийИсточник" + ИндексСтрока + " КАК ВнешнийИсточник
		|;
		|";
		
		ТекстЗапросаТаблиц = ТекстЗапросаТаблиц + ?(Индекс = 0 ,"","
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|") + "
		|ВЫБРАТЬ
		|	" + ТекстИзмерений + "
		|	ВнешнийИсточник." + ТекСтруктура.ЕдиницаИзмерения + " КАК ЕдиницаИзмерения,
		|	ВнешнийИсточник." + ТекСтруктура.Количество       + " КАК Количество
		|ИЗ
		|	ВнешнийИсточник" + ИндексСтрока + " КАК ВнешнийИсточник";
		
		Запрос.УстановитьПараметр("ВнешнийИсточник" + ИндексСтрока, ТекВычитаемаяТаблица);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	// Объединяем все помещенные таблицы и группируем по Измерениям и ЕдиницеИзмерения.
	// Результат помещаем в менеджер.
	ТекстИзмерений = "";
	ТекстСоединения = "";
	Для Каждого ТекИзмерение Из Измерения Цикл
		
		ТекстИзмерений = ТекстИзмерений + "ВнешнийИсточник." + ТекИзмерение + ",
		|	";
		
		ТекстСоединения = ТекстСоединения + "ВнешнийИсточник." + ТекИзмерение+ " = ОсновнаяТаблица." + ТекИзмерение + "
		|	И ";
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	" + ТекстИзмерений   + "
	|	ВнешнийИсточник.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(ЕСТЬNULL(ЕИ.Коэффициент, 1)) КАК Коэффициент,
	|	СУММА(ВнешнийИсточник.Количество) КАК Количество,
	|	СУММА(ВЫБОР
	|		КОГДА ЕИ.Коэффициент ЕСТЬ NULL ТОГДА
	|			ВнешнийИсточник.Количество
	|		ИНАЧЕ
	|			ВнешнийИсточник.Количество*ЕИ.Коэффициент
	|	КОНЕЦ) КАК КоличествоБаза
	|ПОМЕСТИТЬ
	|	ТаблицаСВычетами
	|ИЗ
	|	("+ТекстЗапросаТаблиц+") КАК ВнешнийИсточник
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ЕдиницыИзмерения КАК ЕИ
	|ПО
	|	ВнешнийИсточник.ЕдиницаИзмерения = ЕИ.Ссылка
	|СГРУППИРОВАТЬ ПО
	|	" + ТекстИзмерений + "
	|	ВнешнийИсточник.ЕдиницаИзмерения
	|;
	|
	|ВЫБРАТЬ
	|	" + ТекстИзмерений   + "
	|	ВнешнийИсточник.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВнешнийИсточник.Коэффициент КАК Коэффициент,
	|	ВнешнийИсточник.Количество КАК Количество,
	|	ВнешнийИсточник.КоличествоБаза КАК КоличествоБаза,
	|	ВЫБОР
	|		КОГДА ОсновнаяТаблица.Количество ЕСТЬ NULL ТОГДА
	|			ВнешнийИсточник.Количество*ВнешнийИсточник.Коэффициент
	|		КОГДА ВнешнийИсточник.Количество > ОсновнаяТаблица.Количество ТОГДА
	|			(ВнешнийИсточник.Количество - ОсновнаяТаблица.Количество)*ВнешнийИсточник.Коэффициент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ СвободноеКоличество
	|ИЗ
	|	ТаблицаСВычетами КАК ВнешнийИсточник
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ОсновнаяТаблица КАК ОсновнаяТаблица
	|ПО
	|	" + ТекстСоединения + "
	|	ВнешнийИсточник.ЕдиницаИзмерения = ОсновнаяТаблица.ЕдиницаИзмерения
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаСВычетами = Запрос.Выполнить().Выгрузить();
	
	ЕстьКоличествоБазовое  = (НЕ ОсновнаяТаблица.Колонки.Найти("КоличествоБазовое")  = Неопределено);
	ЕстьКоэффициент        = (НЕ ОсновнаяТаблица.Колонки.Найти("Коэффициент")        = Неопределено);
	ЕстьСумма              = (НЕ ОсновнаяТаблица.Колонки.Найти("Сумма")              = Неопределено);
	ЕстьСуммаСкидки        = (НЕ ОсновнаяТаблица.Колонки.Найти("СуммаСкидки")        = Неопределено);
	ЕстьСуммаСкидкиСтроки  = (НЕ ОсновнаяТаблица.Колонки.Найти("СуммаСкидкиСтроки")  = Неопределено);
	ЕстьСуммаНДС           = (НЕ ОсновнаяТаблица.Колонки.Найти("СуммаНДС")           = Неопределено);
	ЕстьСуммаВсего         = (НЕ ОсновнаяТаблица.Колонки.Найти("СуммаВсего")         = Неопределено);
	
	Результат = ОсновнаяТаблица.СкопироватьКолонки();
	СтруктураПоиска = Новый Структура();
	СтруктураПоискаПоЕдинице = Новый Структура();
	Для Каждого ТекИзмерение Из Измерения Цикл
		СтруктураПоиска.Вставить(ТекИзмерение);
		СтруктураПоискаПоЕдинице.Вставить(ТекИзмерение);
	КонецЦикла;
	СтруктураПоискаПоЕдинице.Вставить("ЕдиницаИзмерения");
	// Вычитание с поиском по единице
	Для Каждого ТекСтрока Из ОсновнаяТаблица Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаПоЕдинице,    ТекСтрока);
		СтруктураПоискаПоЕдинице.Вставить("ЕдиницаИзмерения", СтруктураПоискаПоЕдинице[ЕдиницаИзмерения]);
		
		КоличествоВТаблице = ТекСтрока[Количество];
		НайденныеСтроки = ТаблицаСВычетами.НайтиСтроки(СтруктураПоискаПоЕдинице);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			Если КоличествоВТаблице = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если КоличествоВТаблице < НайденнаяСтрока.Количество Тогда
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - КоличествоВТаблице;
				КоличествоВТаблице         = 0;
			Иначе
				КоличествоВТаблице = КоличествоВТаблице - НайденнаяСтрока.Количество;
				ТаблицаСВычетами.Удалить(НайденнаяСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоВТаблице > 0 Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекСтрока);
			НайденныеСтрокиБезЕдиниц = ТаблицаСВычетами.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтрокиБезЕдиниц.Количество()>0 Тогда
				
				Если ЕстьКоэффициент Тогда
					Коэффициент = ТекСтрока.Коэффициент;
				Иначе
					Коэффициент = ТекСтрока[ЕдиницаИзмерения].Коэффициент;
				КонецЕсли;
				
				КоличествоВТаблицеБаза = КоличествоВТаблице * Коэффициент;
				
				// Поиск свободного количества у других единиц
				Для Каждого СтрокаТаблицы Из НайденныеСтрокиБезЕдиниц Цикл
					
					Если КоличествоВТаблице = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если СтрокаТаблицы.СвободноеКоличество = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если КоличествоВТаблицеБаза < СтрокаТаблицы.СвободноеКоличество Тогда
						СтрокаТаблицы.СвободноеКоличество = СтрокаТаблицы.СвободноеКоличество - КоличествоВТаблицеБаза;
						СтрокаТаблицы.Количество          = СтрокаТаблицы.Количество          - Окр(КоличествоВТаблицеБаза/СтрокаТаблицы.Коэффициент, 3, 1);
						КоличествоВТаблицеБаза = 0;
					Иначе
						КоличествоВТаблицеБаза = КоличествоВТаблицеБаза - СтрокаТаблицы.СвободноеКоличество;
						// количество под данную единицу в вычитаемых таблицах не задействована
						Если СтрокаТаблицы.СвободноеКоличество = СтрокаТаблицы.Количество*СтрокаТаблицы.Коэффициент Тогда
							ТаблицаСВычетами.Удалить(СтрокаТаблицы);
						Иначе
							СтрокаТаблицы.СвободноеКоличество = 0;
							СтрокаТаблицы.Количество          = СтрокаТаблицы.Количество     - Окр(СтрокаТаблицы.СвободноеКоличество/СтрокаТаблицы.Коэффициент, 3, 1);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				// Здесь можно добавить код полного вычитания без учета свободного остатка по вычитаемым единицам.
				
				КоличествоВТаблице = КоличествоВТаблицеБаза / Коэффициент;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоВТаблице = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
		Если ТекСтрока[Количество] = 0 Тогда
			КоэффициентКоличества = 0;
		Иначе
			КоэффициентКоличества = КоличествоВТаблице/ТекСтрока[Количество];
		КонецЕсли;
		
		Если ЕстьСумма Тогда
			НоваяСтрока.Сумма       = ?(КоэффициентКоличества = 0, 0, ТекСтрока.Сумма*КоэффициентКоличества);
		КонецЕсли;
		
		Если ЕстьСуммаСкидки Тогда
			НоваяСтрока.СуммаСкидки = ?(КоэффициентКоличества = 0, 0, ТекСтрока.СуммаСкидки*КоэффициентКоличества);
		КонецЕсли;
		
		Если ЕстьСуммаНДС Тогда
			НоваяСтрока.СуммаНДС    = ?(КоэффициентКоличества = 0, 0, ТекСтрока.СуммаНДС*КоэффициентКоличества);
		КонецЕсли;
		
		Если ЕстьСуммаВсего Тогда
			НоваяСтрока.СуммаВсего  = ?(КоэффициентКоличества = 0, 0, ТекСтрока.СуммаВсего*КоэффициентКоличества);
		КонецЕсли;
		
		Если ЕстьКоличествоБазовое Тогда
			НоваяСтрока.КоличествоБазовое  = ?(КоэффициентКоличества = 0, 0, ТекСтрока.КоличествоБазовое*КоэффициентКоличества);
		КонецЕсли;
		
		Если ЕстьСуммаСкидкиСтроки Тогда
			НоваяСтрока.СуммаСкидкиСтроки  = ?(КоэффициентКоличества = 0, 0, ТекСтрока.СуммаСкидкиСтроки*КоэффициентКоличества);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ВычитаниеТаблиц()

// Процедура проверки заполнения (и заполнения незаполненных) параметров перед выполнением процедуры ВычитаниеТаблиц.
//
// Параметры:
// ОсновнаяТаблица 		- Таблица из которой будет выполнено вычитание; Тип: ТаблицаЗначений; Обязательный для заполнения.
// МассивВычитаемыхТаблиц 	- Массив ТаблицЗначений которые будут вычитаться из ОсновнойТаблицы; Тип: Массив;
//							 Необязательный для заполнения (если не заполнен ВычитаниеТаблиц возвращает значение ОсновнаяТаблица).
// СтруктураОснования 		- Имена реквизитов ОсновнойТаблицы в порядке соответствия;
//							  Тип: Структура; Необязательный для заполнения.
// 						 Может содержать ключи: Измерения; Тип значения: Строка (или Массив Строк)
//													 Количество; Тип значения: Строка
//													 ЕдиницаИзмерения; Тип значения: Строка
//							 Заполняется по-умолчанию: Измерения: "Номенклатура", "ХарактеристикаНоменклатуры"
//													 Количество: "Количество"
//													 ЕдиницаИзмерения: "ЕдиницаИзмерения"
//	МассивСтруктурВычитаемыхТаблиц - Массив структур реквизитов вычитаемых таблиц; Тип: Массив;
//									 Необязательный для заполнения.
// 									 Структуры аналогичны СтруктуреОснования, заполняются по-умолчанию так же.
//
Функция ВычитаниеТаблицПроверкаЗаполнения(ОсновнаяТаблица, МассивВычитаемыхТаблиц, СтруктураОсновнойТаблицы = Неопределено, МассивСтруктурВычитаемыхТаблиц = Неопределено)
	
	// Проверяем заполнение реквизитов (незаполненные заполняем по умолчанию)
	// Структуру основной таблицы.
	Если СтруктураОсновнойТаблицы = Неопределено ИЛИ НЕ ТипЗнч(ОсновнаяТаблица) = Тип("Структура") Тогда
		СтруктураОсновнойТаблицы = Новый Структура;
	Иначе
		Если НЕ (СтруктураОсновнойТаблицы.Свойство("Измерения") И СтруктураОсновнойТаблицы.Свойство("Количество") И СтруктураОсновнойТаблицы.Свойство("ЕдиницаИзмерения")) Тогда
			Возврат Ложь; // ОШИБКА. Неверно заполнена структура основной таблицы
		КонецЕсли;
	КонецЕсли;
	
	ИзмеренияТаблицы = Неопределено;
	Если СтруктураОсновнойТаблицы.Свойство("Измерения", ИзмеренияТаблицы) И НЕ ИзмеренияТаблицы = Неопределено
		И (ТипЗнч(ИзмеренияТаблицы) = Тип("Строка") ИЛИ ТипЗнч(ИзмеренияТаблицы) = Тип("Массив")) Тогда
		Если ТипЗнч(ИзмеренияТаблицы) = Тип("Строка") Тогда
			Если ОсновнаяТаблица.Колонки.Найти(ИзмеренияТаблицы) = Неопределено Тогда
				Возврат Ложь; // ОШИБКА. Неверный параметр структуры основной таблицы (параметр Измерения)
			КонецЕсли;
			Измерения = Новый Массив;
			Измерения.Добавить(ИзмеренияТаблицы);
			СтруктураОсновнойТаблицы.Вставить("Измерения",Измерения);
		КонецЕсли;
	Иначе
		Измерения = Новый Массив;
		Если НЕ ОсновнаяТаблица.Колонки.Найти("Номенклатура") = Неопределено Тогда
			Измерения.Добавить("Номенклатура");
		КонецЕсли;	
		Если НЕ ОсновнаяТаблица.Колонки.Найти("ХарактеристикаНоменклатуры") = Неопределено Тогда
			Измерения.Добавить("ХарактеристикаНоменклатуры");
		КонецЕсли;	
		Если Измерения.Количество() = 0 Тогда
			Возврат Ложь; // ОШИБКА. Структуру основной таблицы не удалось заполнить по умолчанию (параметр Измерения)
		КонецЕсли;
		СтруктураОсновнойТаблицы.Вставить("Измерения",Измерения);
	КонецЕсли;
	
	Если НЕ СтруктураОсновнойТаблицы.Свойство("Количество") Тогда
		Если НЕ ОсновнаяТаблица.Колонки.Найти("Количество") = Неопределено Тогда
			СтруктураОсновнойТаблицы.Вставить("Количество","Количество");
		Иначе
			Возврат Ложь; // ОШИБКА. Структуру основной таблицы не удалось заполнить по умолчанию (параметр Количество)
		КонецЕсли;
	Иначе
		Если ОсновнаяТаблица.Колонки.Найти(СтруктураОсновнойТаблицы.Количество) = Неопределено Тогда
			Возврат Ложь; // ОШИБКА. Неверный параметр структуры основной таблицы (параметр Количество)
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СтруктураОсновнойТаблицы.Свойство("ЕдиницаИзмерения") Тогда
		Если НЕ ОсновнаяТаблица.Колонки.Найти("ЕдиницаИзмерения") = Неопределено Тогда
			СтруктураОсновнойТаблицы.Вставить("ЕдиницаИзмерения","ЕдиницаИзмерения");
		Иначе
			Возврат Ложь; // ОШИБКА. Структуру основной таблицы не удалось заполнить по умолчанию (параметр Количество)
		КонецЕсли;
	Иначе
		Если ОсновнаяТаблица.Колонки.Найти(СтруктураОсновнойТаблицы.ЕдиницаИзмерения) = Неопределено Тогда
			Возврат Ложь; // ОШИБКА. Неверный параметр структуры основной таблицы (параметр ЕдиницаИзмерения)
		КонецЕсли;
	КонецЕсли;
	
	// Вычитаемые таблицы
	Если НЕ ТипЗнч(МассивВычитаемыхТаблиц) = Тип("Массив") Тогда
		Возврат Ложь; // ОШИБКА. Не указаны вычитаемые таблицы
	КонецЕсли;
	
	Если МассивСтруктурВычитаемыхТаблиц = Неопределено Тогда
		МассивСтруктурВычитаемыхТаблиц = Новый Массив;
	КонецЕсли;
	
	Для Индекс = 0 По МассивВычитаемыхТаблиц.ВГраница() Цикл
		
		Если Индекс < МассивСтруктурВычитаемыхТаблиц.Количество() Тогда
			СтруктураТаблицы = МассивСтруктурВычитаемыхТаблиц[Индекс];
			Если НЕ (СтруктураТаблицы.Свойство("Измерения") И СтруктураТаблицы.Свойство("Количество") И СтруктураТаблицы.Свойство("ЕдиницаИзмерения")) Тогда
				Возврат Ложь; // ОШИБКА. Неверно заполнена структура вычитаемой таблицы
			КонецЕсли;
		Иначе
			СтруктураТаблицы = Новый Структура;
		КонецЕсли;
		
		ИзмеренияТаблицы = Неопределено;
		Если СтруктураТаблицы.Свойство("Измерения", ИзмеренияТаблицы) И НЕ ИзмеренияТаблицы = Неопределено
			И (ТипЗнч(ИзмеренияТаблицы) = Тип("Строка") ИЛИ ТипЗнч(ИзмеренияТаблицы) = Тип("Массив")) Тогда
			Если ТипЗнч(ИзмеренияТаблицы) = Тип("Строка") Тогда
				Если МассивВычитаемыхТаблиц[Индекс].Колонки.Найти(ИзмеренияТаблицы) = Неопределено Тогда
					Возврат Ложь; // ОШИБКА. Неверный параметр структуры вычитаемой таблицы (параметр Измерения)
				КонецЕсли;
				Измерения = Новый Массив;
				Измерения.Добавить(ИзмеренияТаблицы);
				СтруктураТаблицы.Вставить("Измерения",Измерения);
			КонецЕсли;
		Иначе
			Измерения = Новый Массив;
			Если НЕ МассивВычитаемыхТаблиц[Индекс].Колонки.Найти("Номенклатура") = Неопределено Тогда
				Измерения.Добавить("Номенклатура");
			КонецЕсли;	
			Если НЕ МассивВычитаемыхТаблиц[Индекс].Колонки.Найти("ХарактеристикаНоменклатуры") = Неопределено Тогда
				Измерения.Добавить("ХарактеристикаНоменклатуры");
			КонецЕсли;	
			Если Измерения.Количество() = 0 Тогда
				Возврат Ложь; // ОШИБКА. Структуру вычитаемой таблицы не удалось заполнить по умолчанию (параметр Измерения)
			КонецЕсли;
			СтруктураТаблицы.Вставить("Измерения",Измерения);
		КонецЕсли;
		
		Если НЕ СтруктураТаблицы.Свойство("Количество") Тогда
			Если НЕ МассивВычитаемыхТаблиц[Индекс].Колонки.Найти("Количество") = Неопределено Тогда
				СтруктураТаблицы.Вставить("Количество","Количество");
			Иначе
				Возврат Ложь; // ОШИБКА. Структуру вычитаемой таблицы не удалось заполнить по умолчанию (параметр Количество)
			КонецЕсли;
		Иначе
			Если МассивВычитаемыхТаблиц[Индекс].Колонки.Найти(СтруктураТаблицы.Количество) = Неопределено Тогда
				Возврат Ложь; // ОШИБКА. Неверный параметр структуры вычитаемой таблицы (параметр Количество)
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ СтруктураТаблицы.Свойство("ЕдиницаИзмерения") Тогда
			Если НЕ МассивВычитаемыхТаблиц[Индекс].Колонки.Найти("ЕдиницаИзмерения") = Неопределено Тогда
				СтруктураТаблицы.Вставить("ЕдиницаИзмерения","ЕдиницаИзмерения");
			Иначе
				Возврат Ложь; // ОШИБКА. Структуру вычитаемой таблицы не удалось заполнить по умолчанию (параметр Количество)
			КонецЕсли;
		Иначе
			Если МассивВычитаемыхТаблиц[Индекс].Колонки.Найти(СтруктураТаблицы.ЕдиницаИзмерения) = Неопределено Тогда
				Возврат Ложь; // ОШИБКА. Неверный параметр структуры вычитаемой таблицы (параметр ЕдиницаИзмерения)
			КонецЕсли;
		КонецЕсли;
		
		МассивСтруктурВычитаемыхТаблиц.Вставить(Индекс, СтруктураТаблицы);
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("СкладКомпании");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.РасходныйСкладскойОрдер") 
		И (НЕ Объект.ДополнительныеСвойства.Свойство("РежимЗаписи")
			ИЛИ  (Объект.ДополнительныеСвойства.Свойство("РежимЗаписи") И
			Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение)) Тогда
		
		Если Объект.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый Тогда
			
			ОбязательныеРеквизиты.Добавить("Товары.Ячейка");
			
		КонецЕсли;
		
	КонецЕсли;

	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется вложенный массив.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	Если Объект.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый Тогда
		УникальныеТовары.Добавить("Ячейка");
	КонецЕсли;
	
	УникальныеТабличныеЧасти=Новый Структура();
	УникальныеТабличныеЧасти.Вставить("Товары",УникальныеТовары);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("СкладКомпании", Ложь);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Инициализируем параметры обработки действия с объектом
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	ПараметрыДействия.Вставить("ПересчетСуммы",  ЛОЖЬ);
	ПараметрыДействия.Вставить("ЗаявкаНаХранениеШин", ПолучитьЗаявкуНаХранениеШин(Объект));
	
	// Возвращаем сформированную структуру параметров
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
		// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество базовое" в таблице "Товары".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоБазовоеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ячейка" в таблице "Товары".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЯчейкаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбработкаТабличнойЧастиТовары.ЗаполнитьСлужебныйРеквизитОстатокНаСкладе(Объект,Строка, ПараметрыДействия);
	
	// !!!_IvEd зарезервировано
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Товары");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "РасходныйСкладскойОрдер");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ВыборСклада 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборСклада.ВыборСсылки 		= "Справочник.СкладыКомпании.ФормаСписка";
	ВыборСклада.Обязательный 		= Истина;
	ВыборСклада.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать склад компании.'");
	
	ВыборЯчейки 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборЯчейки.ВыборСсылки 		= "Справочник.ЯчейкиХранения.ФормаСписка";
	ВыборЯчейки.Обязательный 		= Истина;
	ВыборЯчейки.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать массив ячеек.'");
	
	Отбор 							= Новый Структура("Владелец", "СкладКомпании");	
	ВыборЯчейки.Параметры			= Новый Структура("РежимВыбора,МножественныйВыбор,Отбор", Истина, Истина, Отбор); 
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить складскими остатками по ячейке'");
	Команда.Идентификатор	= "ТоварыЗаполнитьСкладскимиОстаткамиПоВыбраннойЯчейке";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СкладКомпании", 	ВыборСклада);
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("МассивЯчеек", 	ВыборЯчейки);
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить ячейки у выбранных товаров'");
	Команда.Идентификатор	= "ТоварыЗаполнитьЯчейкиУВыбранныхТоваров";
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением 		= Ложь;
	Команда.ДополнительныеПараметры.ПодтверждениеПередЗаполнением 	= Истина;
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстаткамиПоВыбраннойЯчейке.Видимость",   Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьСкладскимиОстаткамиПоВыбраннойЯчейке.Доступность", Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьЯчейкиУВыбранныхТоваров.Видимость",   Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьЯчейкиУВыбранныхТоваров.Доступность", Объект.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа остатками по выбранной ячейке.
//
Функция ТоварыЗаполнитьСкладскимиОстаткамиПоВыбраннойЯчейке(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании Тогда
		Объект.СкладКомпании = ПараметрыЗаполнения.СкладКомпании;
		СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый Тогда
		Результат = ЗаполнениеДокументовСервер.ЗаполнитьСкладскимиОстаткамиПоВыбраннойЯчейке(Объект, ПараметрыЗаполнения);
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Заполнение возможно только для ячеистого склада .'"), Ссылка);
	КонецЕсли;
	
	Если ТипЗнч(Результат)=Тип("ТаблицаЗначений") Тогда
		
		Для Каждого СтрокаТовар Из Результат Цикл
			
			НоваяСтрока                            = Объект.Товары.Добавить();
			НоваяСтрока.Номенклатура               = СтрокаТовар.Номенклатура;
			ТоварыНоменклатураПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТовар.ХарактеристикаНоменклатуры;
			Если Объект.СкладКомпании.УчетЕдиницИзмерения <> Перечисления.ВидыУчетаЕдиницИзмерения.НеВедется Тогда
				Если ЗначениеЗаполнено(СтрокаТовар.ЕдиницаИзмерения) Тогда
					НоваяСтрока.ЕдиницаИзмерения = СтрокаТовар.ЕдиницаИзмерения;
					КоэффициентПересчета         = СтрокаТовар.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент 
																					/ СтрокаТовар.ЕдиницаИзмерения.Коэффициент;
					НоваяСтрока.Количество       = СтрокаТовар.Количество * КоэффициентПересчета;
				КонецЕсли;
			Иначе
				НоваяСтрока.ЕдиницаИзмерения = СтрокаТовар.Номенклатура.ОсновнаяЕдиницаИзмерения;
				НоваяСтрока.Количество       = СтрокаТовар.Количество * СтрокаТовар.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент;
			КонецЕсли;
			НоваяСтрока.Ячейка = СтрокаТовар.Ячейка;
			ТоварыКоличествоПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
			ТоварыЕдиницаИзмеренияПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
			
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // ТоварыЗаполнитьСкладскимиОстаткамиПоВыбраннойЯчейке()

// Обработчик заполнения ячеек товаров
//
Функция ТоварыЗаполнитьЯчейкиУВыбранныхТоваров(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Определим параметры
	ВедетсяУчетЕдиниц               = (НЕ Объект.СкладКомпании.УчетЕдиницИзмерения = Перечисления.ВидыУчетаЕдиницИзмерения.НеВедется);
	ТочныйПоискПоЕдиницам           = (Объект.СкладКомпании.УчетЕдиницИзмерения = Перечисления.ВидыУчетаЕдиницИзмерения.ВедетсяПоПриходуИОтгрузке);
	ПредпочтительныйПоискПоЕдиницам = (Объект.СкладКомпании.УчетЕдиницИзмерения = Перечисления.ВидыУчетаЕдиницИзмерения.ВедетсяПоПриходу);
	
	// Сформирует текст запроса
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваровОрдерныйСкладОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ОстаткиТоваровОрдерныйСкладОстатки.Ячейка КАК Ячейка,
	|	ОстаткиТоваровОрдерныйСкладОстатки.Ячейка.КоординатаX КАК КоординатаX,
	|	ОстаткиТоваровОрдерныйСкладОстатки.Ячейка.КоординатаY КАК КоординатаY,
	|	ОстаткиТоваровОрдерныйСкладОстатки.Ячейка.Уровень КАК Уровень" + ?(ВедетсяУчетЕдиниц,",
	|	ОстаткиТоваровОрдерныйСкладОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ОстаткиТоваровОрдерныйСкладОстатки.ЕдиницаИзмерения.Коэффициент КАК Коэффициент", "") + ",
	|	ОстаткиТоваровОрдерныйСкладОстатки.КоличествоОстаток КАК Количество
	|ИЗ 
	|	РегистрНакопления.ОстаткиТоваровОрдерныйСклад.Остатки(&Момент, СкладКомпании = &СкладКомпании И Номенклатура В (&Номенклатура)) КАК ОстаткиТоваровОрдерныйСкладОстатки
	|";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Момент",?(НЕ ЗначениеЗаполнено(Ссылка), Новый Граница(Новый МоментВремени(КонецДня(Объект.Дата)), ВидГраницы.Исключая), Новый Граница(Ссылка.МоментВремени(), ВидГраницы.Исключая)));
	Запрос.УстановитьПараметр("Номенклатура", Объект.Товары.Выгрузить(, "Номенклатура"));
	Запрос.УстановитьПараметр("СкладКомпании", Объект.СкладКомпании);
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("Номенклатура");
	Если ТочныйПоискПоЕдиницам Тогда
		ТаблицаОстатков.Индексы.Добавить("ЕдиницаИзмерения");
	КонецЕсли;
	
	// Определим необходимые параметры
	ТаблицаЯчеек = Новый ТаблицаЗначений;
	ТаблицаЯчеек.Колонки.Добавить("Кратность");
	ТаблицаЯчеек.Колонки.Добавить("РасстояниеДоВхода");
	ТаблицаЯчеек.Колонки.Добавить("СтрокаОстаткаЯчейки");
	
	ТоварыДляЗаполнения = Объект.Товары.Выгрузить();
	ТоварыДляЗаполнения.Очистить();
	ТоварыДляЗаполнения.Колонки.Добавить("РасстояниеДоВхода", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	
	НачалоОтрезкаX = Объект.СкладКомпании.ВходX;
	НачалоОтрезкаY = Объект.СкладКомпании.ВходY;
	НачалоОтрезкаZ = Объект.СкладКомпании.ВходУровень;
	
	// Делаем перебор по товарам
	Отбор = Новый Структура;
	Для Каждого СтрТовар Из Объект.Товары Цикл
		СтрТовар.Ячейка = "";
		Отбор.Вставить("Номенклатура", СтрТовар.Номенклатура);
		Если ТочныйПоискПоЕдиницам Тогда
			Отбор.Вставить("ЕдиницаИзмерения", СтрТовар.ЕдиницаИзмерения);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрТовар.ХарактеристикаНоменклатуры) Тогда
			Отбор.Вставить("ХарактеристикаНоменклатуры", СтрТовар.ХарактеристикаНоменклатуры);
		КонецЕсли;
		МассивСтрок = ТаблицаОстатков.НайтиСтроки(Отбор);
		
		ТаблицаЯчеек.Очистить();
		Для Каждого СтрОстаток Из МассивСтрок Цикл
			
			Кратность = 0;
			Если ПредпочтительныйПоискПоЕдиницам Тогда
				Если СтрТовар.ЕдиницаИзмерения = СтрОстаток.ЕдиницаИзмерения Тогда
					Кратность = 2;
				Иначе
					Если СтрТовар.Коэффициент > СтрОстаток.Коэффициент Тогда
						Кратность = СтрОстаток.Коэффициент/СтрТовар.Коэффициент;
					Иначе
						Кратность = СтрТовар.Коэффициент/СтрОстаток.Коэффициент;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Рассчитываем расстояние
			ДлиннаОтрезкаПоX = СтрОстаток.КоординатаX - НачалоОтрезкаX;
			ДлиннаОтрезкаПоY = СтрОстаток.КоординатаY - НачалоОтрезкаY;
			ДлиннаОтрезкаПоZ = СтрОстаток.Уровень     - НачалоОтрезкаZ;
			
			РасстояниеДоВхода = Sqrt((ДлиннаОтрезкаПоX*ДлиннаОтрезкаПоX) + (ДлиннаОтрезкаПоY*ДлиннаОтрезкаПоY) + (ДлиннаОтрезкаПоZ*ДлиннаОтрезкаПоZ));
			
			НоваяСтрока = ТаблицаЯчеек.Добавить();
			НоваяСтрока.СтрокаОстаткаЯчейки = СтрОстаток;
			НоваяСтрока.Кратность           = Кратность;
			НоваяСтрока.РасстояниеДоВхода   = РасстояниеДоВхода;
			
		КонецЦикла;
		
		Если ТаблицаЯчеек.Количество() > 0 Тогда
			
			СтрокаСортировки = "";
			Если ПредпочтительныйПоискПоЕдиницам Тогда
				СтрокаСортировки = СтрокаСортировки + "Кратность Убыв,";
			КонецЕсли;
			СтрокаСортировки = СтрокаСортировки + "РасстояниеДоВхода Возр";
			ТаблицаЯчеек.Сортировать(СтрокаСортировки);
			
			ОсталосьРаспределить = СтрТовар.КоличествоБазовое;
			Для Каждого СтрокаЯчейки Из ТаблицаЯчеек Цикл
				
				ТекЯчейка = СтрокаЯчейки.СтрокаОстаткаЯчейки;
				
				Если ОсталосьРаспределить = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если ТекЯчейка.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				КоличествоСтроки = Мин(ОсталосьРаспределить, ТекЯчейка.Количество);
				
				НоваяСтрока = ТоварыДляЗаполнения.Добавить();
				НоваяСтрока.Номенклатура               = СтрТовар.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры = ТекЯчейка.ХарактеристикаНоменклатуры;
				Если ВедетсяУчетЕдиниц Тогда
					НоваяСтрока.ЕдиницаИзмерения       = ТекЯчейка.ЕдиницаИзмерения;
					НоваяСтрока.Коэффициент            = ТекЯчейка.Коэффициент;
					НоваяСтрока.Количество             = ?(ТекЯчейка.Коэффициент>0,Окр(КоличествоСтроки/ТекЯчейка.Коэффициент, 3, 1), КоличествоСтроки);
				Иначе
					НоваяСтрока.ЕдиницаИзмерения       = СтрТовар.ЕдиницаИзмерения;
					НоваяСтрока.Коэффициент            = СтрТовар.Коэффициент;
					НоваяСтрока.Количество             = ?(СтрТовар.Коэффициент>0,Окр(КоличествоСтроки/СтрТовар.Коэффициент, 3, 1), КоличествоСтроки);
				КонецЕсли;
				НоваяСтрока.Ячейка                     = ТекЯчейка.Ячейка;
				НоваяСтрока.КоличествоБазовое          = КоличествоСтроки;
				НоваяСтрока.РасстояниеДоВхода          = СтрокаЯчейки.РасстояниеДоВхода;
				
				Если КоличествоСтроки = ТекЯчейка.Количество Тогда
					ТаблицаОстатков.Удалить(ТекЯчейка);
				Иначе
					ТекЯчейка.Количество = ТекЯчейка.Количество - КоличествоСтроки;
				КонецЕсли;
				
				ОсталосьРаспределить = ОсталосьРаспределить - КоличествоСтроки;
				
			КонецЦикла;
			
			Если ОсталосьРаспределить > 0 Тогда
				НоваяСтрока = ТоварыДляЗаполнения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрТовар);
				НоваяСтрока.КоличествоБазовое = ОсталосьРаспределить;
				НоваяСтрока.Количество        = ?(НоваяСтрока.Коэффициент>0,Окр(ОсталосьРаспределить/НоваяСтрока.Коэффициент, 3, 1), ОсталосьРаспределить);
				НоваяСтрока.РасстояниеДоВхода = 999999999999;
			КонецЕсли;
			
		Иначе
			НоваяСтрока = ТоварыДляЗаполнения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрТовар);
			НоваяСтрока.РасстояниеДоВхода = 999999999999;
		КонецЕсли;
	КонецЦикла;
	
	// Загружаем в табличную часть
	ТоварыДляЗаполнения.Сортировать("РасстояниеДоВхода");
	Объект.Товары.Загрузить(ТоварыДляЗаполнения);
	
	// Произведем заполнение служебного реквизита "Остаток"
	ОтображатьОстаток = (ПолучитьФункциональнуюОпцию("ИспользоватьИндикациюОстатковТовара"));
	
	// Проверим наличие "Остатка на складе" в табличной части
	Если ОтображатьОстаток Тогда
		ОбработкаТабличнойЧастиТовары.ЗаполнитьСлужебныйРеквизитОстатокНаСкладе(Объект,, ПараметрыДействия);
	КонецЕсли;

	
КонецФункции // ТоварыЗаполнитьЯчейкиУВыбранныхТоваров()

// Функция для получения документа основание
//
Функция ПолучитьЗаявкуНаХранениеШин(Объект)
	
	Если Объект.ХозОперация = Справочники.ХозОперации.РасходныйСкладскойОрдерШин Тогда
		ЗаявкаНаХранениеШин = Документы.ЗаявкаНаХранениеШин.ПолучитьЗаявкуНаХранениеШин(Объект.ДокументОснование);
		Если ТипЗнч(ЗаявкаНаХранениеШин)=Тип("ДокументСсылка.ЗаявкаНаХранениеШин") Тогда
			Возврат ЗаявкаНаХранениеШин;
		КонецЕсли;
	КонецЕсли;
	Возврат Документы.ЗаявкаНаХранениеШин.ПустаяСсылка();
	
КонецФункции // ПолучитьЗаявкуНаХранениеШин()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.РасходныйСкладскойОрдер",
		"ПФ_MXL_РасходныйСкладскойОрдер",
		НСтр("ru = 'Расходный складской ордер'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.РасходныйСкладскойОрдер",
		"ПФ_MXL_ПодборочныйЛист",
		НСтр("ru = 'Подборочный лист'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьМХ",
		"ПФ_MXL_МХ3",
		НСтр("ru = 'МХ-3 (Акт о возврате ТМЦ)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Ценники",
		НСтр("ru = 'Печать ценников'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати",
		,,,,
		Ложь);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Этикетки",
		НСтр("ru = 'Печать этикеток'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати",
		,,,,
		Ложь);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_РасходныйСкладскойОрдер") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_РасходныйСкладскойОрдер",
															НСтр("ru = 'Расходный складской ордер'"),
															ПечатьРасходныйСкладскойОрдер(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПодборочныйЛист") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ПодборочныйЛист",
															НСтр("ru = 'Подборочный лист'"),
															ПечатьПодборочныйЛист(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

Функция ПечатьРасходныйСкладскойОрдер(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйСкладскойОрдер_РасходныйСкладскойОрдер";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РасходныйСкладскойОрдер.ПФ_MXL_РасходныйСкладскойОрдер");
		
		// Для начала настроим макет.
		// Произведем преобразование макета в зависимости от типа ячеистого склада.
		ЭтоЯчеистыйСклад = (Документ.СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый); 
		Если НЕ ЭтоЯчеистыйСклад Тогда
			ОбластьТовар				= Макет.Область("Товар");
			ОбластьЯчейка				= Макет.Область("Ячейка");
			ОбластьТовар.ШиринаКолонки	= ОбластьТовар.ШиринаКолонки + ОбластьЯчейка.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьЯчейка, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		ОбластьШапкаТаблицы    = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		Если НЕ ЗначениеЗаполнено(Документ.ВладелецТовара) Тогда
			ОбластьВладелецТовара = Макет.Область("Владелец");
			Макет.УдалитьОбласть(ОбластьВладелецТовара, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Документ.ДокументОснование) Тогда
			ОбластьДокументОснование = Макет.Область("ДокументОснование");
			Макет.УдалитьОбласть(ОбластьДокументОснование, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		КонецЕсли;
		
		// вывод заголовка документа
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ,
			НСтр("ru = 'Расходный складской ордер'"));
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ПредставлениеСклада =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.СкладКомпании);
		
		Если ЗначениеЗаполнено(Документ.ВладелецТовара) Тогда
			Если ТипЗнч(Документ.ВладелецТовара) = Тип("СправочникСсылка.Контрагенты") Тогда
				ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
				ДополнительныеПараметры.НаДату = Документ.Дата;
				ОбластьЗаголовок.Параметры.ПредставлениеВладельца = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
					Документ.ВладелецТовара, , ДополнительныеПараметры);
			Иначе
				ОбластьЗаголовок.Параметры.ПредставлениеВладельца =
					УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.ВладелецТовара);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Документ.ДокументОснование) Тогда
			
			ОбластьЗаголовок.Параметры.Заполнить(Документ.ДокументОснование);
			ОбластьЗаголовок.Параметры.ПредставлениеДокументаОснования =
				УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ.ДокументОснование);
			
			Если ЕстьРеквизит(Документ.ДокументОснование, "Контрагент") Тогда
				ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
				ДополнительныеПараметры.НаДату = Документ.Дата;
				ОбластьЗаголовок.Параметры.ПредставлениеКонтрагента = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
					Документ.ДокументОснование.Контрагент, , ДополнительныеПараметры);
			КонецЕсли;
			
			Если ЕстьРеквизит(Документ.ДокументОснование,"ДоговорВзаиморасчетов") Тогда
				ОбластьЗаголовок.Параметры.ПредставлениеДоговора = Документ.ДокументОснование.ДоговорВзаиморасчетов;
			КонецЕсли;
			
			ОбластьЗаголовок.Параметры.ДокументОснование = Документ.ДокументОснование;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// готовим шапку
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура();
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// готовим области строки
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		ВыборкаТабличнойЧасти = Документ.Товары;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ);
			СтруктураСтроки.Вставить("Ячейка");
			// Если ЯчейкаХранения не определена для данной номенклатуры, то печатаем пробел
			ЯчейкаДляПечати = СокрЛП(СтрокаТЧ.Ячейка.Код);
			СтруктураСтроки.Ячейка = ?(НЕ ЗначениеЗаполнено(ЯчейкаДляПечати), " ", ЯчейкаДляПечати);
			СтруктураСтроки.Вставить("КоличествоБазовое", Формат(СтрокаТЧ.КоличествоБазовое, ФорматВыводаКоличества));
			СтруктураСтроки.Вставить("ЕдиницаИзмеренияБазовая", СтрокаТЧ.Номенклатура.БазоваяЕдиницаИзмерения);
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, СтруктураСтроки);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				НомерСтраницыПред		  = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил", "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьРасходныйСкладскойОрдер()

// Функция печати подборочного лист.
//
Функция ПечатьПодборочныйЛист(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйСкладскойОрдер_ПодборочныйЛист";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Получим макет печатной формы.
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ПодборочныйЛист");
		
		ВыборкаТабличнойЧасти = Документ.Товары;
		
		// Настроим макет отчета.
		// Удаляем колонку "ЯчейкаХранения", если ни в одной из номенклатур этот реквизит не заполнен.
		// Увеличиваем за ее счет колонку "Товар".
		ЕстьЯчейкиХранения = Ложь;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.Ячейка) Тогда
				ЕстьЯчейкиХранения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьЯчейкиХранения Тогда
			ОбластьТовар = Макет.Область("Товар");
			ОбластьЯчейкаХранения = Макет.Область("ЯчейкаХранения");
			ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ОбластьЯчейкаХранения.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьЯчейкаХранения, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		// Получение необходимых областей.
		ОбластьШапкаТаблицы = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		ЗаполнитьЗначенияСвойств(ОбластьЗаголовок.Параметры,Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ,
			НСтр("ru = 'Подборочный лист'"));
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		// * //
		ОбластьЗаголовок.Параметры.Поставщик  = "Поставщик:";
		ОбластьЗаголовок.Параметры.Склад      = "Склад:";
		ОбластьЗаголовок.Параметры.Покупатель = "Покупатель:";
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		НаДату = ?(ТипЗнч(Документ.ВладелецТовара) = Тип("СправочникСсылка.Контрагенты"), Документ.Дата, Неопределено);
		ДополнительныеПараметры.НаДату = НаДату;
		ОбластьЗаголовок.Параметры.ПредставлениеПокупателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.ВладелецТовара, , ДополнительныеПараметры);
		ОбластьЗаголовок.Параметры.ПредставлениеСклада =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СкладКомпании);
		// * //
		
		// Выведем или удалим ШК.
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Готовим шапку
		НомерСтраницы = 2;
		НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура();
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы; 
		
		// Заполняем ТЧ
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ);
			// В возвращаемой структуре нет ключа "Ячейка", создадим его.
			СтруктураСтроки.Вставить("Ячейка");
			// Если ЯчейкаХранения не определена для данной номенклатуры, то печатаем пробел.
			ЯчейкаДляПечати = СокрЛП(СтрокаТЧ.Ячейка.Код);
			СтруктураСтроки.Ячейка = ?(НЕ ЗначениеЗаполнено(ЯчейкаДляПечати), " ", ЯчейкаДляПечати);
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, СтруктураСтроки);
			
			// Доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПолучилКонтрагент", "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// Блок области
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует печатную форму "МХ-3" Акт о возврате ТМЦ
// 
// Параметры:
//  ТабДокумент - табличный документ.
//
Функция ПолучитьДанныеДляПечатиМХ3(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  , УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  , Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("ВладелецТовара"      	, Объект.ВладелецТовара);
	
	// ПодготовкаТЧ
	Товары = Объект.Товары.Выгрузить();		
	ДанныеОбъекта.Вставить("Товары"      		, Товары);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Ложь, Истина);
	ДанныеОбъекта.Вставить("Отпустил", УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Отпустил", "ОтпустилПредставление"));
	ДанныеОбъекта.Вставить("Получил" , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Получил",  "ПолучилПредставление"));
	
	Возврат ДанныеОбъекта;
	
КонецФункции // ПечатьМХ3

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//	Адрес   - адрес структуры данных во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходныйСкладскойОрдерОрдерТовары.Номенклатура   КАК Номенклатура,
	|	РасходныйСкладскойОрдерОрдерТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	| 	РасходныйСкладскойОрдерОрдерТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|
	|	МИНИМУМ(РасходныйСкладскойОрдерОрдерТовары.НомерСтроки) КАК Порядок,
	|	СУММА(
	|		ВЫБОР КОГДА РасходныйСкладскойОрдерОрдерТовары.Ссылка.СкладКомпании.Розничный = ИСТИНА ТОГДА
	|			РасходныйСкладскойОрдерОрдерТовары.Количество * (ЕСТЬNULL(РасходныйСкладскойОрдерОрдерТовары.ЕдиницаИзмерения.Коэффициент, 1) / ЕСТЬNULL(Цены.ЕдиницаИзмерения.Коэффициент, 1))
	|		ИНАЧЕ
	|			РасходныйСкладскойОрдерОрдерТовары.Количество
	|		КОНЕЦ) КАК Количество
	|ИЗ
	|	Документ.РасходныйСкладскойОрдер.Товары КАК РасходныйСкладскойОрдерОрдерТовары
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Цены.СрезПоследних КАК Цены
	|		ПО Цены.Номенклатура   = РасходныйСкладскойОрдерОрдерТовары.Номенклатура
	|		 И Цены.ХарактеристикаНоменклатуры = РасходныйСкладскойОрдерОрдерТовары.ХарактеристикаНоменклатуры
	|		 И Цены.ТипЦен        = РасходныйСкладскойОрдерОрдерТовары.Ссылка.СкладКомпании.ТипЦенРозничнойТорговли
	|	
	|ГДЕ
	|	РасходныйСкладскойОрдерОрдерТовары.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйСкладскойОрдерОрдерТовары.Номенклатура,
	|	РасходныйСкладскойОрдерОрдерТовары.ХарактеристикаНоменклатуры,
	|	РасходныйСкладскойОрдерОрдерТовары.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РасходныйСкладскойОрдер.Организация            КАК Организация,
	|	РасходныйСкладскойОрдер.ПодразделениеКомпании  КАК ПодразделениеКомпании,
	|	РасходныйСкладскойОрдер.СкладКомпании          КАК СкладКомпании,
	|	РасходныйСкладскойОрдер.СкладКомпании.ТипЦенРозничнойТорговли КАК ТипЦены
	|ИЗ
	|	Документ.РасходныйСкладскойОрдер КАК РасходныйСкладскойОрдер
	|ГДЕ
	|	РасходныйСкладскойОрдер.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций 			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивПодразделенийКомпании = УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ПодразделениеКомпании").ВыгрузитьКолонку(0);
	МассивСкладов    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "СкладКомпании").ВыгрузитьКолонку(0);
	МассивТиповЦен    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ТипЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьПодразделениеКомпании", ?(МассивПодразделенийКомпании.Количество() = 1, МассивПодразделенийКомпании[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьТипЦены",     ?(МассивТиповЦен.Количество() = 1,    МассивТиповЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЭтикеток");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	Товары.ЗаполнитьЗначения(СтруктураДействий.ЗаполнитьОрганизацию, "Организация");
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//	Адрес - адрес структуры данных во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЦенников(МассивДокументов) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходныйСкладскойОрдерТовары.Номенклатура КАК Номенклатура,
	|	РасходныйСкладскойОрдерТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	РасходныйСкладскойОрдерТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МИНИМУМ(РасходныйСкладскойОрдерТовары.НомерСтроки) КАК Порядок,
	|	СУММА(ВЫБОР
	|			КОГДА РасходныйСкладскойОрдерТовары.Ссылка.СкладКомпании.Розничный = ИСТИНА
	|				ТОГДА РасходныйСкладскойОрдерТовары.Количество * (ЕСТЬNULL(РасходныйСкладскойОрдерТовары.ЕдиницаИзмерения.Коэффициент, 1) / ЕСТЬNULL(Цены.ЕдиницаИзмерения.Коэффициент, 1))
	|			ИНАЧЕ РасходныйСкладскойОрдерТовары.Количество
	|		КОНЕЦ) КАК Количество
	|ИЗ
	|	Документ.РасходныйСкладскойОрдер.Товары КАК РасходныйСкладскойОрдерТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Цены.СрезПоследних КАК Цены
	|		ПО (Цены.Номенклатура = РасходныйСкладскойОрдерТовары.Номенклатура)
	|			И (Цены.ХарактеристикаНоменклатуры = РасходныйСкладскойОрдерТовары.ХарактеристикаНоменклатуры)
	|			И (Цены.ТипЦен = РасходныйСкладскойОрдерТовары.Ссылка.СкладКомпании.ТипЦенРозничнойТорговли)
	|ГДЕ
	|	РасходныйСкладскойОрдерТовары.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйСкладскойОрдерТовары.Номенклатура,
	|	РасходныйСкладскойОрдерТовары.ХарактеристикаНоменклатуры,
	|	РасходныйСкладскойОрдерТовары.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РасходныйСкладскойОрдер.Организация КАК Организация,
	|	РасходныйСкладскойОрдер.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	РасходныйСкладскойОрдер.СкладКомпании КАК СкладКомпании,
	|	РасходныйСкладскойОрдер.СкладКомпании.ТипЦенРозничнойТорговли КАК ТипЦены
	|ИЗ
	|	Документ.РасходныйСкладскойОрдер КАК РасходныйСкладскойОрдер
	|ГДЕ
	|	РасходныйСкладскойОрдер.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций 			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивПодразделенийКомпании = УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ПодразделениеКомпании").ВыгрузитьКолонку(0);
	МассивСкладов    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "СкладКомпании").ВыгрузитьКолонку(0);
	МассивТиповЦен    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ТипЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьПодразделениеКомпании", ?(МассивПодразделенийКомпании.Количество() = 1, МассивПодразделенийКомпании[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьВидЦены",     ?(МассивТиповЦен.Количество() = 1,    МассивТиповЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЦенников");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	Товары.ЗаполнитьЗначения(СтруктураДействий.ЗаполнитьОрганизацию, "Организация");
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПеремещениеТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйСкладскойОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РеализацияТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СписаниеТоваров);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;
		
КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.РасходныйСкладскойОрдер);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли