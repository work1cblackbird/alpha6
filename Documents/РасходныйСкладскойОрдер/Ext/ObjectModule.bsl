// Модуль документа "Расходный складской ордер"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка=Истина)
	
	Если ЭтоНовый() Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
			И ДанныеЗаполнения.Свойство("ЗакрытиеСмены")
			И ДанныеЗаполнения.Свойство("СкладКомпании") Тогда
			
			Если ЗначениеЗаполнено(ДанныеЗаполнения.СкладКомпании)
				И ЗначениеЗаполнено(ДанныеЗаполнения.ЗакрытиеСмены) Тогда
				
				Если ТипЗнч(ДанныеЗаполнения.ЗакрытиеСмены) = Тип("ДокументСсылка.ЗакрытиеСмены")
					И ДанныеЗаполнения.СкладКомпании.ВидСклада <> Перечисления.ВидыСкладов.Ордерный
					И ДанныеЗаполнения.СкладКомпании.ВидСклада <> Перечисления.ВидыСкладов.ОрдерныйЯчеистый Тогда
					
					ТекстСообщения = НСтр("ru = 'Склад, указанный в документе основании, обычный. Ввод складского ордера невозможен.'");
					УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ЭтотОбъект.ДополнительныеСвойства.Вставить("СкладКомпании", ДанныеЗаполнения.СкладКомпании);
			Заполнить(ДанныеЗаполнения.ЗакрытиеСмены);
			Возврат;
			
		КонецЕсли;
		
		Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура")
			И ЗначениеЗаполнено(ДанныеЗаполнения)
			И ТипЗнч(ДанныеЗаполнения) <> Тип("ДокументСсылка.ЗакрытиеСмены")
			И ЕстьРеквизит(ДанныеЗаполнения,"СкладКомпании") Тогда
		
			Если ТипЗнч(ДанныеЗаполнения.СкладКомпании) <> Тип("СправочникСсылка.ПодразделенияКомпании")
				И (ДанныеЗаполнения.СкладКомпании.ВидСклада <> Перечисления.ВидыСкладов.Ордерный)
				И (ТипЗнч(ДанныеЗаполнения) <> Тип("ДокументСсылка.ЗаявкаНаХранениеШин"))
				И (ДанныеЗаполнения.СкладКомпании.ВидСклада <> Перечисления.ВидыСкладов.ОрдерныйЯчеистый) Тогда
				
					ТекстСообщения = НСтр("ru = 'Склад, указанный в документе основании, обычный. Ввод складского ордера невозможен.'");
					УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
				   	Возврат;
			Иначе
				Если ТипЗнч(ДанныеЗаполнения.СкладКомпании) = Тип("СправочникСсылка.ПодразделенияКомпании") Тогда
					
					ТекстСообщения = НСтр("ru = 'В поле ""Отправитель"" указано Подразделение компании. Ввод складского ордера невозможен.'");
					УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаХранениеШин") Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
							   |	РасходныйСкладскойОрдер.Ссылка КАК РасходныйСкладскойОрдерСсылка
							   |ИЗ
							   |	Документ.РасходныйСкладскойОрдер КАК РасходныйСкладскойОрдер
							   |ГДЕ
							   |	РасходныйСкладскойОрдер.ДокументОснование = &ДокументОснование
							   |
							   |УПОРЯДОЧИТЬ ПО
							   |	РасходныйСкладскойОрдер.Ссылка";
							   
				Запрос.УстановитьПараметр("ДокументОснование",ДанныеЗаполнения);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ТексСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для документа <%1> уже введен складской ордер <%2>.'"), ДанныеЗаполнения, Выборка.РасходныйСкладскойОрдерСсылка);
					УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТексСообщения);
				КонецЕсли; 
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Вызываем общий обработчик события.
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ВычетыТЧВыполнены = Ложь;
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если 
		(ТипДанныхЗаполнения = Тип("ДокументСсылка.ПереразмещениеТоваров")
			И ДанныеЗаполнения.ХозОперация <> Справочники.ХозОперации.ПереразмещениеШин)
		ИЛИ ТипДанныхЗаполнения = Тип("ДокументСсылка.Комплектация")
		ИЛИ ТипДанныхЗаполнения = Тип("ДокументСсылка.Разукомплектация")
		ИЛИ ТипДанныхЗаполнения = Тип("ДокументСсылка.ПересортицаТоваров")
		ИЛИ ТипДанныхЗаполнения = Тип("ДокументСсылка.ВводВЭксплуатацию")
		ИЛИ ТипДанныхЗаполнения = Тип("ДокументСсылка.КорректировкаРеализации") 
		ИЛИ ТипДанныхЗаполнения = Тип ("ДокументСсылка.КорректировкаПоступления") Тогда
		
		ВычетыТЧВыполнены = Истина;
		
	КонецЕсли;
	
	Если
		ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаявкаНаХранениеШин")
		ИЛИ (ТипДанныхЗаполнения = Тип("ДокументСсылка.ПриходныйСкладскойОрдер")
			И ДанныеЗаполнения.ХозОперация=Справочники.ХозОперации.ПриходныйСкладскойОрдерШин)
		ИЛИ (ТипДанныхЗаполнения = Тип("ДокументСсылка.ПереразмещениеТоваров")
			И ДанныеЗаполнения.ХозОперация=Справочники.ХозОперации.ПереразмещениеШин)
		ИЛИ ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗакрытиеСмены")
	Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ВычетыТЧВыполнены И ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Документы.РасходныйСкладскойОрдер.ЗаполнитьТабличнуюЧастьПоОснованию(ЭтотОбъект, ДанныеЗаполнения, Ложь);
	КонецЕсли;
	
	Если ЕстьРеквизит(ДанныеЗаполнения, "Контрагент") И ЗначениеЗаполнено(ДанныеЗаполнения.Контрагент) Тогда
		ВладелецТовара = ДанныеЗаполнения.Контрагент;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		Если СтрокаТЧ.КоличествоБазовое = 0 Тогда
			СтрокаТЧ.КоличествоБазовое	= СтрокаТЧ.Количество*СтрокаТЧ.Коэффициент;
		КонецЕсли; 
	КонецЦикла; 
	
	Для Каждого СтрТовар Из Товары Цикл
		Если СтрТовар.Коэффициент = 0 Тогда
			СтрТовар.Коэффициент = ?(НЕ ЗначениеЗаполнено(СтрТовар.ЕдиницаИзмерения), 1, СтрТовар.ЕдиницаИзмерения.Коэффициент);
		КонецЕсли;	
	КонецЦикла;	
	
	// Произведем свертку.
	Товары.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент", "Количество, КоличествоБазовое");
	
	Если Товары.Количество() > 0 И СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый Тогда
		
		ВедетсяУчетЕдиниц               = СкладКомпании.УчетЕдиницИзмерения <> Перечисления.ВидыУчетаЕдиницИзмерения.НеВедется;
		ТочныйПоискПоЕдиницам           = СкладКомпании.УчетЕдиницИзмерения = Перечисления.ВидыУчетаЕдиницИзмерения.ВедетсяПоПриходуИОтгрузке;
		ПредпочтительныйПоискПоЕдиницам = СкладКомпании.УчетЕдиницИзмерения = Перечисления.ВидыУчетаЕдиницИзмерения.ВедетсяПоПриходу;
		
		Запрос = Новый Запрос();
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура КАК Номенклатура,
		|	ОстаткиТоваровОрдерныйСкладОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ОстаткиТоваровОрдерныйСкладОстатки.Ячейка КАК Ячейка,
		|	ЕСТЬNULL(ОстаткиТоваровОрдерныйСкладОстатки.Ячейка.КоординатаX, 0) КАК КоординатаX,
		|	ЕСТЬNULL(ОстаткиТоваровОрдерныйСкладОстатки.Ячейка.КоординатаY, 0) КАК КоординатаY,
		|	ЕСТЬNULL(ОстаткиТоваровОрдерныйСкладОстатки.Ячейка.Уровень, 0) КАК Уровень" + ?(ВедетсяУчетЕдиниц,",
		|	ОстаткиТоваровОрдерныйСкладОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ОстаткиТоваровОрдерныйСкладОстатки.ЕдиницаИзмерения.Коэффициент КАК Коэффициент", "") + ",
		|	ОстаткиТоваровОрдерныйСкладОстатки.КоличествоОстаток КАК Количество
		|ИЗ 
		|	РегистрНакопления.ОстаткиТоваровОрдерныйСклад.Остатки(, СкладКомпании = &СкладКомпании И Номенклатура В (&Номенклатура)) КАК ОстаткиТоваровОрдерныйСкладОстатки
		|";
		
		Запрос.Текст 	= ТекстЗапроса;
		Запрос.УстановитьПараметр("Номенклатура", Товары.ВыгрузитьКолонку("Номенклатура"));
		Запрос.УстановитьПараметр("СкладКомпании",СкладКомпании);
		ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
		ТаблицаОстатков.Индексы.Добавить("Номенклатура");
		
		Если ТочныйПоискПоЕдиницам Тогда
			ТаблицаОстатков.Индексы.Добавить("ЕдиницаИзмерения");
		КонецЕсли;
		
		ТаблицаЯчеек = Новый ТаблицаЗначений;
		ТаблицаЯчеек.Колонки.Добавить("Кратность");
		ТаблицаЯчеек.Колонки.Добавить("РасстояниеДоВхода");
		ТаблицаЯчеек.Колонки.Добавить("СтрокаОстаткаЯчейки");
		
		ТоварыДляЗаполнения = Товары.ВыгрузитьКолонки();
		ТоварыДляЗаполнения.Колонки.Добавить("РасстояниеДоВхода", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
		
		НачалоОтрезкаX = СкладКомпании.ВходX;
		НачалоОтрезкаY = СкладКомпании.ВходY;
		НачалоОтрезкаZ = СкладКомпании.ВходУровень;
		
		Для Каждого СтрТовар Из Товары Цикл
			
			СтрТовар.Ячейка = "";
			Отбор = Новый Структура;
			Отбор.Вставить("Номенклатура", СтрТовар.Номенклатура);
			
			Если ТочныйПоискПоЕдиницам Тогда
				Отбор.Вставить("ЕдиницаИзмерения", СтрТовар.ЕдиницаИзмерения);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрТовар.ХарактеристикаНоменклатуры) Тогда
				Отбор.Вставить("ХарактеристикаНоменклатуры", СтрТовар.ХарактеристикаНоменклатуры);
			КонецЕсли;
			
			МассивСтрок = ТаблицаОстатков.НайтиСтроки(Отбор);
			
			ТаблицаЯчеек.Очистить();
			
			Для Каждого СтрОстаток Из МассивСтрок Цикл
				
				Кратность = 0;
				Если ПредпочтительныйПоискПоЕдиницам Тогда
					Если СтрТовар.ЕдиницаИзмерения = СтрОстаток.ЕдиницаИзмерения Тогда
						Кратность = 2;
					Иначе
						Если СтрТовар.Коэффициент > СтрОстаток.Коэффициент Тогда
							Кратность = СтрОстаток.Коэффициент/СтрТовар.Коэффициент;
						Иначе
							Кратность = СтрТовар.Коэффициент/СтрОстаток.Коэффициент;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ДлиннаОтрезкаПоX = СтрОстаток.КоординатаX - НачалоОтрезкаX;
				ДлиннаОтрезкаПоY = СтрОстаток.КоординатаY - НачалоОтрезкаY;
				ДлиннаОтрезкаПоZ = СтрОстаток.Уровень     - НачалоОтрезкаZ;
				
				РасстояниеДоВхода = Sqrt((ДлиннаОтрезкаПоX*ДлиннаОтрезкаПоX) + (ДлиннаОтрезкаПоY*ДлиннаОтрезкаПоY) + (ДлиннаОтрезкаПоZ*ДлиннаОтрезкаПоZ));
				
				НоваяСтрока = ТаблицаЯчеек.Добавить();
				НоваяСтрока.СтрокаОстаткаЯчейки = СтрОстаток;
				НоваяСтрока.Кратность           = Кратность;
				НоваяСтрока.РасстояниеДоВхода   = РасстояниеДоВхода;
				
			КонецЦикла;
			
			Если ТаблицаЯчеек.Количество() > 0 Тогда
				
				СтрокаСортировки = "";
				Если ПредпочтительныйПоискПоЕдиницам Тогда
					СтрокаСортировки = СтрокаСортировки + "Кратность Убыв,";
				КонецЕсли;
				СтрокаСортировки = СтрокаСортировки + "РасстояниеДоВхода Возр";
				ТаблицаЯчеек.Сортировать(СтрокаСортировки);
				
				ОсталосьРаспределить = СтрТовар.КоличествоБазовое;
				Для Каждого СтрокаЯчейки Из ТаблицаЯчеек Цикл
					
					ТекЯчейка = СтрокаЯчейки.СтрокаОстаткаЯчейки;
					
					Если ОсталосьРаспределить = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если ТекЯчейка.Количество = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					КоличествоСтроки = Мин(ОсталосьРаспределить, ТекЯчейка.Количество);
					
					НоваяСтрока = ТоварыДляЗаполнения.Добавить();
					НоваяСтрока.Номенклатура               = СтрТовар.Номенклатура;
					НоваяСтрока.ХарактеристикаНоменклатуры = ТекЯчейка.ХарактеристикаНоменклатуры;
					Если ВедетсяУчетЕдиниц Тогда
						НоваяСтрока.ЕдиницаИзмерения       = ТекЯчейка.ЕдиницаИзмерения;
						НоваяСтрока.Коэффициент            = ТекЯчейка.Коэффициент;
						НоваяСтрока.Количество             = ?(ТекЯчейка.Коэффициент>0,Окр(КоличествоСтроки/ТекЯчейка.Коэффициент, 3, 1), КоличествоСтроки);
					Иначе
						НоваяСтрока.ЕдиницаИзмерения       = СтрТовар.ЕдиницаИзмерения;
						НоваяСтрока.Коэффициент            = СтрТовар.Коэффициент;
						НоваяСтрока.Количество             = ?(СтрТовар.Коэффициент>0,Окр(КоличествоСтроки/СтрТовар.Коэффициент, 3, 1), КоличествоСтроки);
					КонецЕсли;
					НоваяСтрока.Ячейка                     = ТекЯчейка.Ячейка;
					НоваяСтрока.КоличествоБазовое          = КоличествоСтроки;
					НоваяСтрока.РасстояниеДоВхода          = СтрокаЯчейки.РасстояниеДоВхода;
					
					Если КоличествоСтроки = ТекЯчейка.Количество Тогда
						ТаблицаОстатков.Удалить(ТекЯчейка);
					Иначе
						ТекЯчейка.Количество = ТекЯчейка.Количество - КоличествоСтроки;
					КонецЕсли;
					
					ОсталосьРаспределить = ОсталосьРаспределить - КоличествоСтроки;
					
				КонецЦикла;
				
				Если ОсталосьРаспределить > 0 Тогда
					НоваяСтрока = ТоварыДляЗаполнения.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрТовар);
					НоваяСтрока.КоличествоБазовое = ОсталосьРаспределить;
					НоваяСтрока.Количество        = ?(НоваяСтрока.Коэффициент>0,Окр(ОсталосьРаспределить/НоваяСтрока.Коэффициент, 3, 1), ОсталосьРаспределить);
					НоваяСтрока.РасстояниеДоВхода = 999999999999;
				КонецЕсли;
				
			Иначе
				НоваяСтрока = ТоварыДляЗаполнения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрТовар);
				НоваяСтрока.РасстояниеДоВхода = 999999999999;
			КонецЕсли;
			
		КонецЦикла;
		
		ТоварыДляЗаполнения.Сортировать("РасстояниеДоВхода");
		Товары.Загрузить(ТоварыДляЗаполнения);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// На всякий случай проверим тип склада, его могли поменять в самом справочнике.
	Если СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.Обычный 
		ИЛИ СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.Ячеистый Тогда
		
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Склад документа имеет вид'") + " " + СкладКомпании.ВидСклада 
			+ """. " + НСтр("ru = 'Проведение возможно только для ""Ордерного"" или ""Ордерного и ячеистого"" склада.'"), ЭтотОбъект);
		Возврат;
	КонецЕсли; 
	
	// Вызываем общий обработчик события.
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// выполним приватную проверку
	Если ХозОперация = Справочники.ХозОперации.РасходныйСкладскойОрдерШин Тогда
		Если НЕ ЗначениеЗаполнено(ДокументОснование) ИЛИ ТипЗнч(ДокументОснование)<>Тип("ДокументСсылка.ЗаявкаНаХранениеШин") Тогда
			ТекстСообщения = НСтр("ru = '"+Строка(ХозОперация)+" должен быть введен на основании документа """+Метаданные.Документы.ЗаявкаНаХранениеШин+""".'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		КонецЕсли;
		
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	РасходныйСкладскойОрдер.Ссылка КАК Ссылка
			               |ИЗ
			               |	Документ.РасходныйСкладскойОрдер КАК РасходныйСкладскойОрдер
			               |ГДЕ
			               |	РасходныйСкладскойОрдер.ДокументОснование = &ДокументОснование
			               |	И РасходныйСкладскойОрдер.Ссылка <> &Ссылка
						   |	И РасходныйСкладскойОрдер.Проведен";
						   
		Запрос.УстановитьПараметр("ДокументОснование",ДокументОснование);
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТекстСообщения = НСтр("ru = 'На основании <"+ДокументОснование+"> уже есть введенный документ <"+Выборка.Ссылка+">.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		КонецЕсли;
	Иначе
		Если ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.ЗаявкаНаХранениеШин") Тогда
			ТекстСообщения = НСтр("ru = '"+Строка(ХозОперация)+" не может быть введен на основании документа """+Метаданные.Документы.ЗаявкаНаХранениеШин+""".'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Корректируем количество базовое. 
	Для Каждого Строка Из Товары Цикл
		Если НЕ ЗначениеЗаполнено(Строка.КоличествоБазовое) Тогда
			Строка.КоличествоБазовое = Строка.Количество * Строка.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события.
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоОрдерномуУчетуПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события.
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события.
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// На всякий случай проверим тип склада, его могли поменять в самом справочнике
	Если СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.Обычный 
		ИЛИ СкладКомпании.ВидСклада = Перечисления.ВидыСкладов.Ячеистый Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Склад документа имеет вид <%1>. Проведение возможно только для ""Ордерного"" или ""Ордерного и ячеистого"" склада.'"),СкладКомпании.ВидСклада);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект,,, Отказ);
	КонецЕсли; 
	
	// Вызываем общий обработчик события.
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	СписокТоваров = Товары.ВыгрузитьКолонку("Номенклатура");
	
	// Проведем остатки товаров по регистру ОстаткиТоваровОрдерныйСклад.
	НаборЗаписейОстатки = Движения.ОстаткиТоваровОрдерныйСклад;
	НаборЗаписейОстатки.РежимПроведения = РежимПроведения;
	НаборЗаписейОстатки.ДокументОбъект  = ЭтотОбъект;
	НаборЗаписейОстатки.СкладКомпании   = СкладКомпании;
	Если ХозОперация=Справочники.ХозОперации.РасходныйСкладскойОрдерШин Тогда
		ЗаявкаНаХранениеШин=Документы.ЗаявкаНаХранениеШин.ПолучитьЗаявкуНаХранениеШин(ДокументОснование);
		НаборЗаписейОстатки.ЗаявкаНаХранениеШин=ЗаявкаНаХранениеШин;	
	Иначе
		НаборЗаписейОстатки.ЗаявкаНаХранениеШин=Неопределено;	
	КонецЕсли; 
	НаборЗаписейОстатки.РезультатЗапросаПоТоварам = Неопределено;
	НаборЗаписейОстатки.Приходовать     = Истина;
	НаборЗаписейОстатки.ПоБазовомуКоличеству = Истина;
	Отказ = НЕ НаборЗаписейОстатки.Расход() ИЛИ Отказ;
	
	Если (НЕ Отказ) И (ХозОперация=Справочники.ХозОперации.РасходныйСкладскойОрдерШин) Тогда
		// Контроль остатка шин на хранении
		НаборЗаписейОстатки.Записать();
		ТаблицаОстатковТоваров=РегистрыНакопления.ОстаткиТоваровОрдерныйСклад.Остатки(
			Новый Граница(МоментВремени(),ВидГраницы.Включая),
			Новый Структура("ЗаявкаНаХранениеШин",ЗаявкаНаХранениеШин),
			"СкладКомпании,Номенклатура,Ячейка",
			"Количество"
		);
		Если ТаблицаОстатковТоваров.Количество()>0 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Остатки товаров ордерного склада: Выдача шин с хранения должна быть осуществлена в полном объеме.'"),СкладКомпании.ВидСклада);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект,,, Отказ);
		КонецЕсли; 
		Для каждого СтрокаОстатков Из ТаблицаОстатковТоваров Цикл
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Остатки товаров ордерного склада: Склад <%1> [<%2>] товар <%3>. Остаток'"),СтрокаОстатков.СкладКомпании,СокрЛП(СтрокаОстатков.Номенклатура.Код),СокрЛП(СтрокаОстатков.Номенклатура));
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект,,, Отказ);
			Если СтрокаОстатков.СкладКомпании.ВидСклада=Перечисления.ВидыСкладов.Ячеистый И СтрокаОстатков.СкладКомпании.ВидСклада=Перечисления.ВидыСкладов.ОрдерныйЯчеистый Тогда
				ТекстОшибки = ТекстОшибки+СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' в ячейке <%1>'"),СокрЛП(СтрокаОстатков.Ячейка));
			КонецЕсли; 
			ТекстОшибки = ТекстОшибки+СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' в количестве <%1>.'"),Формат(СтрокаОстатков.Количество,"ЧДЦ=0; ЧН=0"));
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект,,, Отказ);
		КонецЦикла; 
	КонецЕсли;
	
	// Двигаем границу последовательности ордерного склада.
	РаботаСГраницами.СдвинутьГраницуОрдерногоУчета(Ссылка, ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Переразмещение товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПереразмещениеТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения.
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПереразмещениеШин Тогда
		// Заполним на основании заявки на хранение шин
		Возврат ОбработкаЗаполнения_ЗаявкаНаХранениеШин(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
	Товары.Очистить();
	
	Для Каждого СтрТовар Из ДанныеЗаполнения.Товары Цикл
		
		НоваяСтрока 							= Товары.Добавить();
		НоваяСтрока.Номенклатура 				= СтрТовар.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры 	= СтрТовар.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения 			= СтрТовар.ЕдиницаИзмеренияНовая;
		НоваяСтрока.Коэффициент 				= СтрТовар.ЕдиницаИзмеренияНовая.Коэффициент;
		НоваяСтрока.Количество 					= ?(СкладКомпании.УчетЕдиницИзмерения = Перечисления.ВидыУчетаЕдиницИзмерения.НеВедется,
													СтрТовар.Количество, СтрТовар.Количество * СтрТовар.ЕдиницаИзмерения.Коэффициент
													/ СтрТовар.ЕдиницаИзмеренияНовая.Коэффициент);
		НоваяСтрока.КоличествоБазовое 			= СтрТовар.КоличествоБазовоеНовое;
		НоваяСтрока.Ячейка 						= СтрТовар.ЯчейкаНовая;
		
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПереразмещениеТоваров()

// Производит заполнение объекта на основании документа "Комплектация".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Комплектация(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	Запрос.Текст	= 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КомплектацияТовары.НомерСтроки КАК НомерСтроки,
		|	КомплектацияТовары.Номенклатура КАК Номенклатура,
		|	КомплектацияТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	КомплектацияТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	КомплектацияТовары.Коэффициент КАК Коэффициент,
		|	ВЫБОР
		|		КОГДА Комплектация.СписаниеПоТЧ
		|			ТОГДА КомплектацияТовары.Количество
		|		ИНАЧЕ КомплектацияТовары.Количество * Комплектация.КоличествоКомплектов
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА Комплектация.СписаниеПоТЧ
		|			ТОГДА КомплектацияТовары.Количество
		|		ИНАЧЕ КомплектацияТовары.Количество * Комплектация.КоличествоКомплектов
		|	КОНЕЦ КАК КоличествоБазовое
		|ИЗ
		|	Документ.Комплектация.Товары КАК КомплектацияТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Комплектация КАК Комплектация
		|		ПО КомплектацияТовары.Ссылка = Комплектация.Ссылка
		|ГДЕ
		|	КомплектацияТовары.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	Выборка	= Запрос.Выполнить().Выбрать();
	Товары.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока 							= Товары.Добавить();
		НоваяСтрока.Номенклатура 				= Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры 	= Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения 			= Выборка.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент 				= Выборка.Коэффициент;
		НоваяСтрока.Количество 					= Выборка.Количество;
		НоваяСтрока.КоличествоБазовое 			= Выборка.КоличествоБазовое;
		
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события.
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Комплектация()

// Производит заполнение объекта на основании документа "Разукомплектация".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Разукомплектация(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Товары.Очистить();
	НоваяСтрока 							= Товары.Добавить();
	НоваяСтрока.Номенклатура 				= ДанныеЗаполнения.Комплект;
	НоваяСтрока.ХарактеристикаНоменклатуры 	= ДанныеЗаполнения.ХарактеристикаКомплекта;
	НоваяСтрока.ЕдиницаИзмерения 			= ДанныеЗаполнения.Комплект.ОсновнаяЕдиницаИзмерения;
	НоваяСтрока.Коэффициент 				= ДанныеЗаполнения.Комплект.ОсновнаяЕдиницаИзмерения.Коэффициент;
	НоваяСтрока.Количество 					= ДанныеЗаполнения.КоличествоКомплектов;
	НоваяСтрока.КоличествоБазовое 			= ДанныеЗаполнения.КоличествоКомплектов;
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения.Ячейка) Тогда
		Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
			НоваяСтрока.Ячейка = Справочники.Номенклатура.ПолучитьЯчейкуХранения(НоваяСтрока.Номенклатура, СкладКомпании);
		КонецЕсли;
	Иначе
		НоваяСтрока.Ячейка 					= ДанныеЗаполнения.Ячейка;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Разукомплектация()

// Производит заполнение объекта на основании документа "Пересортица".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Пересортица(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения.
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Товары.Очистить();
	
	Для Каждого СтрТовар Из ДанныеЗаполнения.Товары Цикл
		
		НоваяСтрока 							= Товары.Добавить();
		НоваяСтрока.Номенклатура 				= СтрТовар.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры 	= СтрТовар.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения 			= СтрТовар.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент 				= СтрТовар.Коэффициент;
		НоваяСтрока.Количество 					= СтрТовар.Количество;
		НоваяСтрока.КоличествоБазовое 			= СтрТовар.Количество;
		
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Пересортица()

// Производит заполнение объекта на основании документа "Заказ покупателя".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПокупателя(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СкладКомпании) Тогда
		СкладКомпании = ПраваИНастройкиПользователя.Значение("ОсновнойСкладКомпании", ЭтотОбъект);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПокупателя()

// Производит заполнение объекта на основании документа "Приходный складской ордер".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПриходныйСкладскойОрдер(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения.
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПриходныйСкладскойОрдерШин Тогда
		// Заполним на основании заявки на хранение шин
		Возврат ОбработкаЗаполнения_ЗаявкаНаХранениеШин(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события.
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПриходныйСкладскойОрдер()

// Производит заполнение объекта на основании документа "Корректировка реализации".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_КорректировкаРеализации(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения.
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КорректировкаРеализацииТовары.Номенклатура КАК Номенклатура,
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	КорректировкаРеализацииТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	КорректировкаРеализацииТовары.Коэффициент КАК Коэффициент,
	|	КорректировкаРеализацииТовары.КоличествоРазница КАК Количество,
	|	КорректировкаРеализацииТовары.КоличествоРазница * КорректировкаРеализацииТовары.Коэффициент КАК КоличествоБазовое
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Основание
	|	И КорректировкаРеализацииТовары.КоличествоРазница > 0");
	Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Товары.Очистить();
		Возврат Истина;
	КонецЕсли;
	
	Товары.Загрузить(РезультатЗапроса.Выгрузить());
	
	// Возвращаем признак возможности дальнейшей обработки события.
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_КорректировкаРеализации()

// Производит заполнение объекта на основании документа "Корректировка поступления".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_КорректировкаПоступления(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения.
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КорректировкаПоступленияТовары.Номенклатура КАК Номенклатура,
	|	КорректировкаПоступленияТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	КорректировкаПоступленияТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	КорректировкаПоступленияТовары.Коэффициент КАК Коэффициент,
	|	-КорректировкаПоступленияТовары.КоличествоРазница КАК Количество,
	|	-КорректировкаПоступленияТовары.КоличествоРазница * КорректировкаПоступленияТовары.Коэффициент КАК КоличествоБазовое
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
	|ГДЕ
	|	КорректировкаПоступленияТовары.Ссылка = &Основание
	|	И КорректировкаПоступленияТовары.КоличествоРазница < 0");
	Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Товары.Очистить();
		Возврат Истина;
	КонецЕсли;
	
	Товары.Загрузить(РезультатЗапроса.Выгрузить());
	
	// Возвращаем признак возможности дальнейшей обработки события.
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_КорректировкаРеализации()

// Производит заполнение объекта на основании документа "Заявка на хранение шин"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаХранениеШин(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация 		= Справочники.ХозОперации.РасходныйСкладскойОрдерШин;
	СкладКомпании	= Справочники.СкладыКомпании.ПустаяСсылка();
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПереразмещениеТоваров") Тогда
		
		ЗаявкаНаХранениеШин = ДанныеЗаполнения.Товары[0].ЗаявкаНаХранениеШин;
		
	Иначе
		
		ЗаявкаНаХранениеШин = Документы.ЗаявкаНаХранениеШин.ПолучитьЗаявкуНаХранениеШин(ДанныеЗаполнения);
		
	КонецЕсли;
	
	Товары.Очистить();
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ОстаткиТоваровОрдерныйСкладОстатки.СкладКомпании КАК СкладКомпании,
	|	ОстаткиТоваровОрдерныйСкладОстатки.Ячейка КАК Ячейка,
	|	ОстаткиТоваровОрдерныйСкладОстатки.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваровОрдерныйСкладОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ОстаткиТоваровОрдерныйСкладОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ОстаткиТоваровОрдерныйСкладОстатки.ЗаявкаНаХранениеШин КАК ЗаявкаНаХранениеШин,
	|	ОстаткиТоваровОрдерныйСкладОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ОстаткиТоваровОрдерныйСклад.Остатки(
	|			&Момент,
	|			//СкладКомпании = &СкладКомпании И
	|				ЗаявкаНаХранениеШин = &ЗаявкаНаХранениеШин) КАК ОстаткиТоваровОрдерныйСкладОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	СкладКомпании,
	|	Ячейка,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Момент", ?(ЭтоНовый(), Новый Граница(Новый МоментВремени(КонецДня(Дата)),
		ВидГраницы.Исключая), Новый Граница(Ссылка.МоментВремени(), ВидГраницы.Исключая)));
	Запрос.УстановитьПараметр("ЗаявкаНаХранениеШин", ЗаявкаНаХранениеШин);
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаОстатков Из ТаблицаОстатков Цикл
		
		Если СкладКомпании <> Справочники.СкладыКомпании.ПустаяСсылка()
			И СкладКомпании <> СтрокаОстатков.СкладКомпании Тогда
			Продолжить;
		КонецЕсли; 
		
		СкладКомпании				= СтрокаОстатков.СкладКомпании;
		СтрокаТЧ					= Товары.Добавить();
		СтрокаТЧ.Номенклатура		= СтрокаОстатков.Номенклатура;
		
		Если НЕ ЗначениеЗаполнено(СтрокаОстатков.ЕдиницаИзмерения) Тогда
			СтрокаТЧ.ЕдиницаИзмерения	= СтрокаТЧ.Номенклатура.ОсновнаяЕдиницаИзмерения;
			СтрокаТЧ.Количество			= СтрокаОстатков.Количество*СтрокаТЧ.ЕдиницаИзмерения.Коэффициент;
			СтрокаТЧ.КоличествоБазовое	= СтрокаТЧ.Количество;
		Иначе
			СтрокаТЧ.ЕдиницаИзмерения	= СтрокаОстатков.ЕдиницаИзмерения;
			СтрокаТЧ.Количество			= Окр(СтрокаОстатков.Количество
				/ ?(СтрокаТЧ.ЕдиницаИзмерения.Коэффициент = 0, 1, СтрокаТЧ.ЕдиницаИзмерения.Коэффициент), 3);
			СтрокаТЧ.КоличествоБазовое	= СтрокаОстатков.Количество;
		КонецЕсли; 
		
		СтрокаТЧ.Коэффициент				= СтрокаТЧ.ЕдиницаИзмерения.Коэффициент;
		СтрокаТЧ.Ячейка						= СтрокаОстатков.Ячейка;
		СтрокаТЧ.ХарактеристикаНоменклатуры	= СтрокаОстатков.ХарактеристикаНоменклатуры;
		
	КонецЦикла; 
	
	ВладелецТовара	= ЗаявкаНаХранениеШин.Контрагент;
	Если СкладКомпании = Справочники.СкладыКомпании.ПустаяСсылка() Тогда
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПереразмещениеТоваров") Тогда
			СкладКомпании = ДанныеЗаполнения.СкладПолучатель;
		Иначе
			СкладКомпании = ДанныеЗаполнения.СкладКомпании;
		КонецЕсли;
	КонецЕсли; 
	
	ДокументОснование = ЗаявкаНаХранениеШин;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаявкаНаХранениеШин()

// Производит заполнение объекта на основании документа "Закрытие кассовой смены".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗакрытиеСмены(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СкладКомпании = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "СкладКомпании");
	
	Товары.Загрузить(ПолучитьТоварыЗакрытияСменыПоСкладу(СкладКомпании, ДанныеЗаполнения));
	
	// Заполняем количество базовое и коэффициент
	Для Каждого Строка Из Товары Цикл
		
		Если Строка.Коэффициент = 0 Тогда
			
			Строка.Коэффициент = ?(ЗначениеЗаполнено(Строка.ЕдиницаИзмерения), Строка.ЕдиницаИзмерения.Коэффициент, 1);
			
		КонецЕсли;
		
		Строка.КоличествоБазовое = Строка.Количество * Строка.Коэффициент;
		
	КонецЦикла;
	
	// Заполняем ячейки по умолчанию
	ВидСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладКомпании, "ВидСклада");
	
	Если ВидСклада = Перечисления.ВидыСкладов.ОрдерныйЯчеистый
		ИЛИ ВидСклада = Перечисления.ВидыСкладов.Ячеистый Тогда
	
		Для Каждого Строка Из Товары Цикл
			
			Если ЗначениеЗаполнено(Строка.Ячейка) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Строка.Ячейка = Справочники.Номенклатура.ПолучитьЯчейкуХранения(Строка.Номенклатура, СкладКомпании);
			
		КонецЦикла;
	
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции

#КонецОбласти

Функция ПолучитьТоварыЗакрытияСменыПоСкладу(СкладКомпании, ДанныеЗаполнения)
	
	ХозОперацияЗакрытиеСмены = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ХозОперация") = 
		Справочники.ХозОперации.ЗакрытиеСмены;
		
	Запрос = Новый Запрос;
	
	Если ХозОперацияЗакрытиеСмены Тогда
	
		Запрос.УстановитьПараметр("МестоРазмещения", СкладКомпании);
	
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗакрытиеСменыТовары.Номенклатура КАК Номенклатура,
		|	СУММА(ЗакрытиеСменыТовары.Количество * ЗакрытиеСменыТовары.Коэффициент) КАК Количество,
		|	ЗакрытиеСменыТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЗакрытиеСменыТовары.Коэффициент КАК Коэффициент,
		|	ЗакрытиеСменыТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|ИЗ
		|	Документ.ЗакрытиеСмены.Товары КАК ЗакрытиеСменыТовары
		|ГДЕ
		|	ЗакрытиеСменыТовары.Ссылка = &Ссылка"
		+ ?(ХозОперацияЗакрытиеСмены, Символы.ПС + "	И ЗакрытиеСменыТовары.МестоРазмещения = &МестоРазмещения", "") + "
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗакрытиеСменыТовары.Номенклатура,
		|	ЗакрытиеСменыТовары.ЕдиницаИзмерения,
		|	ЗакрытиеСменыТовары.Коэффициент,
		|	ЗакрытиеСменыТовары.ХарактеристикаНоменклатуры";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли

