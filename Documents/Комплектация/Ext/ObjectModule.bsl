// Модуль документа "Комплектация"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоКомплектов=0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не задано количество комплектов'"), ЭтотОбъект,,,Отказ);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Произведем очистку не использующихся в текущем контексте реквизитов
	ОбработкаСобытийДокументаСервер.ОчиститьПолеЦенаРозничнаяДляНеРозничныхСкладов(ЭтотОбъект, СкладКомпании);
	
	Если РежимЗаписи=РежимЗаписиДокумента.Проведение Тогда
		
		Если ДокументОснование.Состояние=Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
			
			Если НЕ ЭтотОбъект.Проведен Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Заказ-наряд закрыт. Комплектация в производство запрещена.'"), ЭтотОбъект,,,Отказ);
				Возврат;
			КонецЕсли;
			
		ИначеЕсли ДокументОснование.Состояние=Справочники.ВидыСостоянийЗаказНарядов.Выполнен Тогда
			
			Если НЕ ЭтотОбъект.Проведен Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Заказ-наряд выполнен. Комплектация в производство запрещена.'"), ЭтотОбъект,,,Отказ);
				Возврат;
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	// отработаем право "Запись раньше документа-основания"
	Если (Дата < ДокументОснование.Дата) Тогда
		
		ЗН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заказ-наряд № %1 от %2'"),СокрЛП(ДокументОснование.Номер),Формат(ДокументОснование.Дата,"ДФ='dd.MM.yyyy ЧЧ:мм:сс'"));
		
		Если ПраваИНастройкиПользователя.Значение("ЗаписьРаньшеДокументаОснования", ЭтотОбъект) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru = 'Внимание! Документ <%1> записывается раньше создания своего документа-основания: <%2>'"),Строка(ЭтотОбъект),ЗН);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект);
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru = 'Нет прав на запись раньше создания чем документ-основание: <%1>'"),ЗН);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли (ДокументОснование.Состояние=Справочники.ВидыСостоянийЗаказНарядов.Закрыт) И (Дата > ДокументОснование.ДатаОкончания) Тогда
		
		ЗН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заказ-наряд № %1 от %2'"),СокрЛП(ДокументОснование.Номер),Формат(ДокументОснование.ДатаОкончания,"ДФ='dd.MM.yyyy ЧЧ:мм:сс'"));
		
		Если ПраваИНастройкиПользователя.Значение("ЗаписьРаньшеДокументаОснования", ЭтотОбъект) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru = 'Внимание! Документ <%1> записывается позже окончания своего документа-основания: <%2>'"),Строка(ЭтотОбъект),ЗН);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект);
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru = 'Нет прав на запись позже окончания чем документ-основание: <%1>'"),ЗН);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,,Отказ);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ХозОперация = Справочники.ХозОперации.КомплектацияВПроизводство Тогда
		
		Если НЕ ПраваИНастройкиПользователя.Значение("ПеремещениеДеталейВПроизводство", ЭтотОбъект) Тогда
			
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Нет прав на комплектацию в производство в производство! Обратитесь к администратор системы.'"), ЭтотОбъект,,,Отказ);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("СкладКомпанииБыл");
	ДополнительныеСвойства.Вставить("МоментВремениБыл");
	ДополнительныеСвойства.Вставить("ЗаказНарядБыл");
	
	// получим старые значения, влияющие на границы последовательности
	Если НЕ Отказ И Проведен И РежимЗаписи=РежимЗаписиДокумента.Проведение Тогда
		
		БылиДвижения = Ложь;
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		// партии
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ СкладКомпании ИЗ РегистрНакопления.ПартииТоваровКомпании ГДЕ Регистратор=&Ссылка";
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			БылиДвижения = Истина;
			ДополнительныеСвойства.Вставить("СкладКомпанииБыл", Результат.Выгрузить().ВыгрузитьКолонку("СкладКомпании"));
		КонецЕсли;
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ЗаказНаряд ИЗ РегистрНакопления.ТоварыВПроизводстве ГДЕ Регистратор=&Ссылка";
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			БылиДвижения = Истина;
			ДополнительныеСвойства.Вставить("ЗаказНарядБыл", Результат.Выгрузить().ВыгрузитьКолонку("ЗаказНаряд"));
		КонецЕсли;
		
		// прошлый момент времени
		Если БылиДвижения Тогда
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ МоментВремени ИЗ Документ."+Метаданные().Имя+" ГДЕ Ссылка=&Ссылка";
			ДополнительныеСвойства.Вставить("МоментВремениБыл",Запрос.Выполнить().Выгрузить().Получить(0).МоментВремени);
		КонецЕсли;
		
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПартиямПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПроизводствуПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументОснование.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен ИЛИ
		 ДокументОснование.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
		 
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Заказ-наряд закрыт. Отмена комплектации в производство запрещена.'"),ЭтотОбъект,,,Отказ); 
		
	КонецЕсли;
	
	Если ЭтотОбъект.КомплектацияПоСебестоимости Тогда
		ЭтотОбъект.ЦенаКомплекта = 0;
		ЭтотОбъект.СуммаДокумента = 0;
		Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	Если КоличествоКомплектов=0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не задано количество комплектов'"), ЭтотОбъект,,,Отказ);
		Возврат;
	КонецЕсли;
	
	// 1. Списываем состав
	РезультатЗапросаПоТоварамСостав=ПолучитьРезультатЗапросаПоТоварам(ЭтотОбъект);
	НаборЗаписейОстатки=Движения.ОстаткиТоваровКомпании;
	НаборЗаписейОстатки.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейОстатки.СкладКомпании=СкладКомпании;
	НаборЗаписейОстатки.РезультатЗапросаПоТоварам=РезультатЗапросаПоТоварамСостав;
	НаборЗаписейОстатки.ДвиженияПоРознице=СкладКомпании.Розничный;
	Отказ=НЕ НаборЗаписейОстатки.Расход() ИЛИ Отказ;
	Если Отказ Тогда
		Возврат; // дальше смысла не имеет
	КонецЕсли;
	
	// 2. Приходуем комплект
	РезультатЗапросаПоТоварамКомплект=ПолучитьРезультатЗапросаПоТоварам(ЭтотОбъект,1);
	Если ХозОперация=Справочники.ХозОперации.Комплектация Тогда
		НаборЗаписейОстатки.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейОстатки.СкладКомпании=СкладКомпании;
		НаборЗаписейОстатки.РезультатЗапросаПоТоварам=РезультатЗапросаПоТоварамКомплект;
		НаборЗаписейОстатки.ДвиженияПоРознице=СкладКомпании.Розничный;
		Отказ=НЕ НаборЗаписейОстатки.Приход() ИЛИ Отказ;
	КонецЕсли;
	
	// проведем партии товаров
	Отказ=НЕ ПровестиПоПартиям(РежимПроведения,Ссылка) ИЛИ Отказ;
	
	// Если комплект приходуется на розничный склад, то нужно поменять цену комплекта.
	Если НЕ Отказ И СкладКомпании.Розничный И ПодразделениеКомпании.УстановкаЦенДокументамиПоступления И НЕ СкладКомпании.ТипЦенРозничнойТорговли.Рассчитывается Тогда
		
		Запрос = Новый Запрос;			
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Комплектация.Комплект.Код КАК Код,
		|	Комплектация.Комплект КАК Номенклатура,
		|	Комплектация.Комплект.Наименование КАК НоменклатураНаименование,
		|	Комплектация.ЦенаКомплектаРозничная КАК НоваяЦена,";
		Если СкладКомпании.ТипЦенРозничнойТорговли.АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоХарактеристике Тогда
			Запрос.Текст = Запрос.Текст + "
			|	Комплектация.ХарактеристикаКомплекта КАК ХарактеристикаНоменклатуры,
			|	Комплектация.Комплект.ТипНоменклатуры.УчетЦенТолькоВРазрезеДопПараметров КАК УчетЦенТолькоВРазрезеДопПараметров,";
		ИначеЕсли СкладКомпании.ТипЦенРозничнойТорговли.АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоЕдиницеИзмерения Тогда
			Запрос.Текст = Запрос.Текст + "
			|	ЗНАЧЕНИЕ(Справочник.ЕдиницаИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,
			|	Комплектация.Комплект.ТипНоменклатуры.УчетЦенТолькоВРазрезеДопПараметров КАК УчетЦенТолькоВРазрезеДопПараметров,";
		КонецЕсли;

		Запрос.Текст = Запрос.Текст + "
		|	ЕСТЬNULL(ЦеныВБазе.Цена,0) КАК ЦенаВБазе
		|ИЗ
		|	Документ.Комплектация КАК Комплектация
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Цены.СрезПоследних(
		|		&Момент,
		|		ТипЦен=&ТипЦен 
		|			И Контрагент=&Контрагент
		|			И ПодразделениеКомпании=&ПодразделениеКомпании) КАК ЦеныВБазе
		|	ПО Комплектация.Комплект = ЦеныВБазе.Номенклатура
		|	И ЦеныВБазе.Цена > 0 ";
	
		Если СкладКомпании.ТипЦенРозничнойТорговли.АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоХарактеристике Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И Комплектация.ХарактеристикаКомплекта = ЦеныВБазе.ХарактеристикаНоменклатуры";
		ИначеЕсли СкладКомпании.ТипЦенРозничнойТорговли.АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоЕдиницеИзмерения Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И ЗНАЧЕНИЕ(Справочник.ЕдиницаИзмерения.ПустаяСсылка) = ЦеныВБазе.ЕдиницаИзмерения";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		| Комплектация.Ссылка = &Ссылка";

		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Момент", МоментВремени());
		Запрос.УстановитьПараметр("ТипЦен", СкладКомпании.ТипЦенРозничнойТорговли);
		Запрос.УстановитьПараметр("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПодразделениеКомпании", СкладКомпании.ПодразделениеКомпании);
		РезультатЗапросаПоТоварам = Запрос.Выполнить();
		
		// устанавливаем цену комплекта
		НаборЗаписейЦены = Движения.Цены;
		НаборЗаписейЦены.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейЦены.Контрагент     = Справочники.Контрагенты.ПустаяСсылка();
		НаборЗаписейЦены.ТипЦен         = СкладКомпании.ТипЦенРозничнойТорговли;
		НаборЗаписейЦены.ПодразделениеКомпании     = СкладКомпании.ПодразделениеКомпании;
		НаборЗаписейЦены.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам;
		НаборЗаписейЦены.ПроверятьОдинаковыеЦены   = Ложь;
		Отказ = НЕ НаборЗаписейЦены.УстановитьЦены() ИЛИ Отказ;
	КонецЕсли;
	
	// установим нормативные цены компании
	Если НЕ Отказ И ПодразделениеКомпании.ФормироватьНормативнуюЦену И НЕ Справочники.ТипыЦен.НормативнаяЦена.Рассчитывается Тогда
		
		Запрос = Новый Запрос;			
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Комплектация.Комплект.Код КАК Код,
		|	Комплектация.Комплект КАК Номенклатура,
		|	Комплектация.Комплект.Наименование КАК НоменклатураНаименование,
		|	Комплектация.ЦенаКомплекта КАК НоваяЦена,";
		Если СкладКомпании.ТипЦенРозничнойТорговли.АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоХарактеристике Тогда
			Запрос.Текст = Запрос.Текст + "
			|	Комплектация.ХарактеристикаКомплекта КАК ХарактеристикаНоменклатуры,
			|	Комплектация.Комплект.ТипНоменклатуры.УчетЦенТолькоВРазрезеДопПараметров КАК УчетЦенТолькоВРазрезеДопПараметров,";
		ИначеЕсли СкладКомпании.ТипЦенРозничнойТорговли.АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоЕдиницеИзмерения Тогда
			Запрос.Текст = Запрос.Текст + "
			|	ЗНАЧЕНИЕ(Справочник.ЕдиницаИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,
			|	Комплектация.Комплект.ТипНоменклатуры.УчетЦенТолькоВРазрезеДопПараметров КАК УчетЦенТолькоВРазрезеДопПараметров,";
		КонецЕсли;

		Запрос.Текст = Запрос.Текст + "
		|	ЕСТЬNULL(ЦеныВБазе.Цена,0) КАК ЦенаВБазе
		|ИЗ
		|	Документ.Комплектация КАК Комплектация
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Цены.СрезПоследних(
		|		&Момент,
		|		ТипЦен=&ТипЦен 
		|			И Контрагент=&Контрагент
		|			И ПодразделениеКомпании=&ПодразделениеКомпании) КАК ЦеныВБазе
		|	ПО Комплектация.Комплект = ЦеныВБазе.Номенклатура
		|	И ЦеныВБазе.Цена > 0 ";
	
		Если СкладКомпании.ТипЦенРозничнойТорговли.АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоХарактеристике Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И Комплектация.ХарактеристикаКомплекта = ЦеныВБазе.ХарактеристикаНоменклатуры";
		ИначеЕсли СкладКомпании.ТипЦенРозничнойТорговли.АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоЕдиницеИзмерения Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И ЗНАЧЕНИЕ(Справочник.ЕдиницаИзмерения.ПустаяСсылка) = ЦеныВБазе.ЕдиницаИзмерения";
		КонецЕсли;

		Запрос.Текст = Запрос.Текст + "
		|
		|ГДЕ 
		|	Комплектация.Ссылка = &Ссылка
		|	И Комплектация.ЦенаКомплекта > 0";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Момент", МоментВремени());
		Запрос.УстановитьПараметр("ТипЦен", Справочники.ТипыЦен.НормативнаяЦена);
		Запрос.УстановитьПараметр("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПодразделениеКомпании", СкладКомпании.ПодразделениеКомпании);
		РезультатЗапросаПоТоварам = Запрос.Выполнить();
		
		НаборЗаписейЦены = Движения.Цены;
		НаборЗаписейЦены.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейЦены.Контрагент     = Справочники.Контрагенты.ПустаяСсылка();
		НаборЗаписейЦены.ТипЦен         = Справочники.ТипыЦен.НормативнаяЦена;
		НаборЗаписейЦены.ИмяРеквизитаЦена = "Цена";
		НаборЗаписейЦены.ПодразделениеКомпании     = СкладКомпании.ПодразделениеКомпании;
		НаборЗаписейЦены.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам;
		НаборЗаписейЦены.ПроверятьОдинаковыеЦены   = Ложь;
		Отказ = НЕ НаборЗаписейЦены.УстановитьЦены() ИЛИ Отказ;
	КонецЕсли;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Заказ наряд"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаряд(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт
		ИЛИ ДанныеЗаполнения.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Выполнен Тогда
		ТекстСообщения = НСтр("ru = 'Запрещено вводить документ на основании выполненного или закрытого заказ-наряда.'");
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
		Возврат Истина;
	КонецЕсли;
	
	Товары.Очистить();
	КомплектацияПоСебестоимости	= Истина;
	ХозОперация 				= Справочники.ХозОперации.КомплектацияВПроизводство;
	Запрос 						= Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНарядТовары.Номенклатура                КАК Комплект,
	|	ЗаказНарядТовары.Количество                  КАК КоличествоКомплектов,
	|	ЗаказНарядТовары.ЕдиницаИзмерения            КАК КомплектЕдиницаИзмерения,
	|	ЗаказНарядТовары.Коэффициент,
	|	ЗаказНарядТовары.Сумма                       КАК СуммаРозн,
	|	ЗаказНарядТовары.ХарактеристикаНоменклатуры  КАК ХарактеристикаКомплекта
	|ИЗ
	|	Документ.ЗаказНаряд.Товары КАК ЗаказНарядТовары
	|ГДЕ
	|	ЗаказНарядТовары.Ссылка = &Ссылка
	|	И (ЗаказНарядТовары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Комплект)
	|			ИЛИ ЗаказНарядТовары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.ЛКМ))";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	ТабТоваров = Запрос.Выполнить().Выгрузить();
	
	Если ТабТоваров.Количество() > 1 Тогда
		ВыбСтрока = ТабТоваров[0];
	ИначеЕсли ТабТоваров.Количество() = 1 Тогда 
		ВыбСтрока = ТабТоваров[0];
	Иначе
		ВыбСтрока = Неопределено;
	КонецЕсли;
	
	Если НЕ ВыбСтрока = Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,ВыбСтрока);
		ЦенаКомплектаРозничная = ?(
			ВыбСтрока.КоличествоКомплектов = 0,
			0,
			ВыбСтрока.СуммаРозн / ВыбСтрока.КоличествоКомплектов
		);
		
		Если ЗначениеЗаполнено(Комплект) Тогда
			
			Товары.Очистить();
			
			Для Каждого СтрокаКомплекта Из Комплект.СоставНабора Цикл
				
				НоваяСтрока								= Товары.Добавить();
				НоваяСтрока.Номенклатура				= СтрокаКомплекта.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры	= СтрокаКомплекта.ХарактеристикаНоменклатуры;
				НоваяСтрока.Количество					= СтрокаКомплекта.Количество;
				Документы.Комплектация.ТоварыНоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока,
					ДополнительныеСвойства.ПараметрыДействия);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаряд()

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// У нас не стандартная таблица, поэтому сформирует свой результат запроса по товарам.
//
// Параметры:
//  Режим          - число, 0-состав комплекта, 1-сам комплект,
//  ШапкаДокумента - ДокументСсылка - текущий документ, либо выборка.
//
// Возвращаемое значение:
//  Возвращает результат выборки.
//
Функция ПолучитьРезультатЗапросаПоТоварам(ШапкаДокумента,Режим=0)
	Запрос=Новый Запрос();
	Если Режим=1 Тогда
		// КОМПЛЕКТ
	    ТекстЗапроса="
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Комплектация.Комплект КАК Номенклатура,
		|	Комплектация.ХарактеристикаКомплекта КАК ХарактеристикаНоменклатуры,
		|	Комплектация.ЦенаКомплектаРозничная КАК ЦенаРозничная,
		|	Комплектация.КоличествоКомплектов * Комплектация.КомплектЕдиницаИзмерения.Коэффициент КАК Количество,
		|	Комплектация.КоличествоКомплектов*Комплектация.ЦенаКомплекта КАК СуммаВсего,";
		Если ШапкаДокумента.СкладКомпании.Розничный Тогда
			ТекстЗапроса=ТекстЗапроса+"
			|	Комплектация.КоличествоКомплектов*Комплектация.ЦенаКомплектаРозничная КАК СуммаРозн,";
		Иначе
			ТекстЗапроса=ТекстЗапроса+"
			|	0 КАК СуммаРозн,";
		КонецЕсли;
		ТекстЗапроса=ТекстЗапроса+"
		|	0 КАК СуммаНДС
		|ИЗ
		|	Документ.Комплектация КАК Комплектация
	    |ГДЕ
		|	Комплектация.Ссылка=&Ссылка
		|";
	Иначе
		// СОСТАВ КОМПЛЕКТА
	    ТекстЗапроса="
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КомплектацияТовары.Номенклатура КАК Номенклатура,
		|	КомплектацияТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	КомплектацияТовары.Партия КАК Партия,
        |	КомплектацияТовары.ГТД КАК ГТД,
		|	КомплектацияТовары.ЦенаРозничная КАК ЦенаРозничная,
		|	КомплектацияТовары.Количество*КомплектацияТовары.Коэффициент"+?(НЕ СписаниеПоТЧ,("*&КоличествоКомплектов"),"")+" КАК Количество,";
		Если ШапкаДокумента.СкладКомпании.Розничный Тогда
			ТекстЗапроса=ТекстЗапроса+"
			|	КомплектацияТовары.СуммаРозничная КАК СуммаРозн,";
		Иначе
			ТекстЗапроса=ТекстЗапроса+"
			|	0 КАК СуммаРозн,";
		КонецЕсли;
		ТекстЗапроса=ТекстЗапроса+"
		|	КомплектацияТовары.Сумма КАК СуммаВсего,
		|	0 КАК СуммаНДС
		|
		|ИЗ
		|	Документ.Комплектация.Товары КАК КомплектацияТовары
	    |ГДЕ
		|	КомплектацияТовары.Ссылка=&Ссылка
		|";
		Запрос.УстановитьПараметр("КоличествоКомплектов",ШапкаДокумента.КоличествоКомплектов);
	КонецЕсли;

	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка",ШапкаДокумента.Ссылка);

	Возврат Запрос.Выполнить();
КонецФункции // ПолучитьРезультатЗапросаПоТоварам()

// возвращает выборку по шапке
//
// Параметры:
//  ДокументСсылка - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Выборка - выборка по шапке
//
Функция ПолучитьШапкуДокумента(ДокументСсылка) Экспорт
	Запрос=Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.ДокументОснование КАК ДокументОснование,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ТипЦен КАК ТипЦен,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.Организация КАК Организация,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Док.Проект КАК Проект,
	/////////// ПРИВАТ ////////////
	|	Док.КоличествоКомплектов КАК КоличествоКомплектов,
	|	Док.СкладКомпании КАК СкладКомпании,
	|   Док.СкладКомпании.ПодразделениеКомпании КАК ПодразделениеСклада,
	|	Док.Цех КАК Цех
	|
	|ИЗ
	|	Документ."+Метаданные().Имя+" КАК Док
	|ГДЕ
	|	Док.Ссылка=&Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции // ПолучитьШапкуДокумента()

// формирует движения документа по партионным регистрам
//
// Параметры:
//  Режим           - режим проведения (оперативный/неоперативный)
//  ДокументСсылка  - ссылка на документ который надо допровести по партиям.
//
// Возвращаемое значение:
//  Возвращает Истина - все ОК, ложь - чего-то не так.
//
Функция ПровестиПоПартиям(Режим,ДокументСсылка) Экспорт
	Отказ=Ложь;
	
	// получим шапку документа
	ШапкаДокумента=ПолучитьШапкуДокумента(ДокументСсылка);
	
	// Получим способ ведения баланса.
	БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
	
	// Проверим, если подразделение проводиться по партиям "отложенно", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям=Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
		Возврат НЕ Отказ;
	КонецЕсли;
	
	// получим результаты запроса по составу комплекта
	РезультатЗапросаПоТоварамСостав=ПолучитьРезультатЗапросаПоТоварам(ШапкаДокумента);
	// у нас нет доп. расходов
	НаборЗаписейПартии=Движения.ПартииТоваровКомпании;	
		// проверяем, присутствуют ли партии в табличной части
	ЕстьПартии = Ложь;
	Для Каждого СтрокаТовар Из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовар.Партия) Тогда
			ЕстьПартии = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	// 1. Списываем состав
	НаборЗаписейПартии.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейПартии.ШапкаДокумента=ШапкаДокумента;
	НаборЗаписейПартии.РезультатЗапросаПоТоварам=РезультатЗапросаПоТоварамСостав;
	НаборЗаписейПартии.СтатусПартии=Неопределено;
	НаборЗаписейПартии.СкладКомпании=ШапкаДокумента.СкладКомпании;
	НаборЗаписейПартии.Организация=ШапкаДокумента.Организация; 
	НаборЗаписейПартии.ИмяРеквизитаДокумент = ?(ЕстьПартии,"Партия","");
	Отказ=НЕ НаборЗаписейПартии.Расход() ИЛИ Отказ;
	ТаблицаСписания=НаборЗаписейПартии.Выгрузить();
	СуммаНДСКомплектующих=ТаблицаСписания.Итог("СуммаНДС");
	
	// 2. спишем израсходованные комиссионные товары
	ТаблицаСписанияПринятые=ТаблицаСписания.Скопировать();
	СтрокаСписанияКупленный=ТаблицаСписанияПринятые.Найти(Перечисления.СтатусыПартий.ТоварКупленный,"СтатусПартии");
	Пока СтрокаСписанияКупленный<>Неопределено Цикл
		ТаблицаСписанияПринятые.Удалить(СтрокаСписанияКупленный);
		СтрокаСписанияКупленный=ТаблицаСписанияПринятые.Найти(Перечисления.СтатусыПартий.ТоварКупленный,"СтатусПартии");
	КонецЦикла;
	Если ТаблицаСписанияПринятые.Количество()>0 Тогда
		НаборЗаписейРеализованныеТовары=Движения.РеализованныеТовары;
		НаборЗаписейРеализованныеТовары.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейРеализованныеТовары.Списание=Истина;
		НаборЗаписейРеализованныеТовары.РезультатЗапросаПоТоварам=ТаблицаСписанияПринятые;
		НаборЗаписейРеализованныеТовары.ШапкаДокумента=ШапкаДокумента;
		Отказ=НЕ НаборЗаписейРеализованныеТовары.Приход() ИЛИ Отказ;
	КонецЕсли; 
	
	// Подготовим таблицу движений в разрезе подразделений комиссионных товаров
	ТаблицаСписанийПартийРеализованных = Движения.РеализованныеТовары.Выгрузить();
	ТаблицаСписанийПартийРеализованных.Свернуть("ДоговорВзаиморасчетов","СуммаУпр");
	ТаблицаСписанийПартийРеализованных.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
	Для Каждого СтрокаСписания Из ТаблицаСписанийПартийРеализованных Цикл
		Если БалансВедетсяПоПодразделениям Тогда
			СтрокаСписания.Подразделение = СтрокаСписания.ДоговорВзаиморасчетов.ПодразделениеКомпании;
		Иначе
			СтрокаСписания.Подразделение = ПодразделениеКомпании;
		КонецЕсли;
	КонецЦикла;	
	ТаблицаСписанийПартийРеализованных.Свернуть("Подразделение","СуммаУпр");
	
	Для Каждого СтрокаСписания Из ТаблицаСписанийПартийРеализованных Цикл
		НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДоходыИРасходы.Подразделение          = СтрокаСписания.Подразделение;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.Себестоимость;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
		НаборЗаписейДоходыИРасходы.Расход                 = СтрокаСписания.СуммаУпр;	
		НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
		Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
	КонецЦикла;
	
	
	// получим результаты запроса по комплекту
	Запрос=Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Комплектация.Комплект КАК Номенклатура,
	|	Комплектация.ХарактеристикаКомплекта КАК ХарактеристикаНоменклатуры,
	|	Комплектация.КоличествоКомплектов * Комплектация.КомплектЕдиницаИзмерения.Коэффициент КАК Количество,
	|	Комплектация.КоличествоКомплектов * Комплектация.ЦенаКомплекта КАК СуммаВсего,
	|	"+?(ШапкаДокумента.СкладКомпании.Розничный,"Комплектация.КоличествоКомплектов*Комплектация.ЦенаКомплекта","0")+" КАК СуммаРозн,
	|	Комплектация.Комплект.СтавкаНДС КАК СтавкаНДС,
	|	&СуммаНДСКомплектующих КАК СуммаНДС
	|ИЗ
	|	Документ.Комплектация КАК Комплектация
	|ГДЕ
	|	Комплектация.Ссылка=&Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка",ШапкаДокумента.Ссылка);
	Запрос.УстановитьПараметр("СуммаНДСКомплектующих", СуммаНДСКомплектующих);
	ТаблицаТоваров=Запрос.Выполнить().Выгрузить();
	Если ТаблицаТоваров.Количество()>0 Тогда
		Если КомплектацияПоСебестоимости ИЛИ (ТаблицаТоваров[0].СуммаВсего=0 И ТипЗнч(ТаблицаСписания)=Тип("ТаблицаЗначений")) Тогда
			Если ВалютаДокумента=Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() Тогда
				ТаблицаТоваров[0].СуммаВсего = ТаблицаСписания.Итог("Сумма");
				ТаблицаТоваров[0].СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТаблицаТоваров[0].СуммаВсего,Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(),Дата,ШапкаДокумента.ВалютаДокумента,ШапкаДокумента.КурсДокумента);
				ТаблицаТоваров[0].СуммаНДС = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТаблицаТоваров[0].СуммаНДС,Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(),Дата,ШапкаДокумента.ВалютаДокумента,ШапкаДокумента.КурсДокумента);
			Иначе
				ТаблицаТоваров[0].СуммаВсего = ТаблицаСписания.Итог("СуммаУпр");
				ТаблицаТоваров[0].СуммаВсего = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТаблицаТоваров[0].СуммаВсего,Константы.ВалютаУправленческогоУчетаКомпании.Получить(),Дата,ШапкаДокумента.ВалютаДокумента,ШапкаДокумента.КурсДокумента);
				ТаблицаТоваров[0].СуммаНДС = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ТаблицаТоваров[0].СуммаНДС,Константы.ВалютаУправленческогоУчетаКомпании.Получить(),Дата,ШапкаДокумента.ВалютаДокумента,ШапкаДокумента.КурсДокумента);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЦенаПоСебестоимости = Окр(ТаблицаТоваров[0].СуммаВсего / КоличествоКомплектов, 2);
	Если КомплектацияПоСебестоимости И ЭтотОбъект.ЦенаКомплекта <> ЦенаПоСебестоимости Тогда
		ЭтотОбъект.СуммаДокумента = ТаблицаТоваров[0].СуммаВсего;
		ЭтотОбъект.ЦенаКомплекта  = ЦенаПоСебестоимости;
		Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	// 3. Приходуем комплект
	Если ХозОперация = Справочники.ХозОперации.Комплектация Тогда
		НаборЗаписейПартии.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейПартии.ШапкаДокумента=ШапкаДокумента;
		НаборЗаписейПартии.Организация=ШапкаДокумента.Организация;
		НаборЗаписейПартии.СтатусПартии=Перечисления.СтатусыПартий.ТоварКупленный;
		НаборЗаписейПартии.РезультатЗапросаПоТоварам=ТаблицаТоваров;
		НаборЗаписейПартии.ЕстьСтавкаНДС = Истина;
		Отказ=НЕ НаборЗаписейПартии.Приход() ИЛИ Отказ;
	Иначе
		// добавим комплект в производство
		НаборЗаписейПроизводство=Движения.ТоварыВПроизводстве;
		НаборЗаписейПроизводство.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейПроизводство.Организация=ШапкаДокумента.Организация;
		НаборЗаписейПроизводство.ШапкаДокумента=ШапкаДокумента;
		НаборЗаписейПроизводство.РезультатЗапросаПоТоварам=ТаблицаТоваров;
		НаборЗаписейПартии.ЕстьСтавкаНДС=Истина;
		Отказ=НЕ НаборЗаписейПроизводство.ПриходКомплекта() ИЛИ Отказ;
		
		Если Ссылка <> ДокументСсылка Тогда
			
			РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
			РаботаСГраницами.ДвиженияПоПроизводствуПередПроведением(ДокументСсылка, ДополнительныеСвойства);
			
		КонецЕсли;
		
		РаботаСГраницами.СдвинутьГраницуПроизводства(ДокументСсылка, ДополнительныеСвойства, Движения);
		
	КонецЕсли;
	
	// Доходы и расходы.
	// Найдем разницу между Приходом и Расходам (только для товаров собственных).
	ТабДиРПроизводство = Движения.ТоварыВПроизводстве.Выгрузить();
	ТаблицаДиР=НаборЗаписейПартии.Выгрузить();
	ТабДиРПроизводство.Свернуть("СтатусПартии, ВидДвижения","СуммаУпр");
	ТаблицаДиР.Свернуть("СтатусПартии, ВидДвижения","СуммаУпр");
	
	ПриходСумма = 0;
	РасходСумма = 0;

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("СтатусПартии", Перечисления.СтатусыПартий.ТоварКупленный);
	СтруктураПоиска.Вставить("ВидДвижения",  ВидДвиженияНакопления.Приход);
	// Приход
	МассивСтрок = ?(ХозОперация=Справочники.ХозОперации.Комплектация,ТаблицаДиР.НайтиСтроки(СтруктураПоиска),ТабДиРПроизводство.НайтиСтроки(СтруктураПоиска));
	Если МассивСтрок.Количество()<>0 Тогда // Строка будет одна.
		ПриходСумма = МассивСтрок[0].СуммаУпр;
	КонецЕсли;
	
	СтруктураПоиска.Вставить("ВидДвижения",  ВидДвиженияНакопления.Расход);
	// Расход
	МассивСтрок = ТаблицаДиР.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество()<>0 Тогда // Строка будет одна.
		РасходСумма = МассивСтрок[0].СуммаУпр;
	КонецЕсли;
    		
	Если ПриходСумма<>РасходСумма Тогда
		НаборЗаписейДиР 						= Движения.ДоходыИРасходы;
		НаборЗаписейДиР.ДокументОбъект 			= ЭтотОбъект;
		Если БалансВедетсяПоПодразделениям Тогда
			НаборЗаписейДиР.Подразделение = ШапкаДокумента.ПодразделениеСклада;
		КонецЕсли;
		НаборЗаписейДиР.ШапкаДокумента			= ШапкаДокумента;
		НаборЗаписейДиР.СтатьяДоходовИРасходов	= Справочники.СтатьиДоходовИРасходов.ОтклонениеСебестоимостиПриКомплектации;
		НаборЗаписейДиР.ВУпрВалюте				= Истина; 
		
		Разница = ПриходСумма-РасходСумма;
		Если Разница > 0 Тогда
			НаборЗаписейДиР.Доход  = Разница;
		Иначе
			НаборЗаписейДиР.Расход = -Разница;
		КонецЕсли; 

		Отказ=НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
	КонецЕсли; 
	
	// двигаем границу последовательности партий
	Если Ссылка <> ДокументСсылка Тогда
		
		РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоПартиямПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		
	КонецЕсли;
	
	РаботаСГраницами.СдвинутьГраницуПартий(ДокументСсылка, ДополнительныеСвойства, Движения);
	
	Возврат НЕ Отказ;
КонецФункции // ПровестиПоПартиям()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
