// Модуль объекта документа "Передача товаров между организациями"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	// Если вводится на основании события
	Если ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "Имя") = "Событие" Тогда
		ДанныеЗаполненияКопия = ДанныеЗаполнения;
		ДанныеЗаполнения = ДанныеЗаполнения.Событие;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
	// Заполним доп. поля
	Для Каждого ТекущаяСтрока Из Товары Цикл
		Если ПустаяСтрока(ТекущаяСтрока.ИдентификаторТовара) Тогда
			ТекущаяСтрока.ИдентификаторТовара = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
	ЗачетАвансов.Очистить();
	ЗачетАвансовПоставки.Очистить();
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	ЗачетАвансов.Очистить();
	ЗачетАвансовПоставки.Очистить();
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДоговорВзаиморасчетов.ВалютаВзаиморасчетов <> ДоговорВзаиморасчетовПоставки.ВалютаВзаиморасчетов Тогда
		
		//В документе используется один реквизит КурсВалютыВзаиморасчетов для договора покупки и продажи
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Выберите договоры покупки и продажи с одинаковой валютой взаиморасчетов'"),
			ЭтотОбъект 
		);
		
	КонецЕсли;
	
	Если ЕстьУслугиВТабЧастиТовары() Тогда
	
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Товар с видом номенклатуры <Услуга> нельзя использовать в данном документе'"),
			ЭтотОбъект 
		);
		
	КонецЕсли;
	
	Если Дата <> КонецДня(КонецПериода) Тогда
			
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Дата документа должна быть конец дня от даты окончания периода (%1)'"), КонецДня(КонецПериода)),
			ЭтотОбъект
		);
			
	КонецЕсли;
	
	Если КонецПериода > ТекущаяДатаСеанса() Тогда
			
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Дождитесь завершения месяца для оформления документа
			|Указанный конец периода (%1) больше текущей даты'"), Формат(КонецПериода,"ДЛФ=Д")),
			ЭтотОбъект
		);
			
	КонецЕсли;
			
	Если НачалоПериода = КонецПериода Тогда
		
		//ВСЕ ОК (по дням)
		
	ИначеЕсли НачалоМесяца(НачалоПериода) = НачалоПериода
		И КонецМесяца(НачалоПериода) = КонецДня(КонецПериода) Тогда
		
		//ВСЕ ОК (по месяцам)
	
	Иначе
		
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Документ можно оформлять только по дням или за полный календарный месяц
			|При этом в документе указан период с %1 по %2'"), Формат(НачалоПериода,"ДЛФ=Д"), Формат(КонецПериода,"ДЛФ=Д")),
			ЭтотОбъект 
		);
	
	КонецЕсли;
	
	// Проверим заполнение РНПТ у послеживаемого товара
	УчетПрослеживаемыхТоваровСервер.ПроверитьЗаполнениеРНПТПрослеживаемогоТовара(ЭтотОбъект);
	
	// Проверим, что указано в качестве аванса не больше, чем сумма документа
	РасчетыСКонтрагентамиСервер.ПроверитьКорректностьЗачетаАвансов(ЭтотОбъект, Отказ);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// корректируем количество базовое 
	Для Каждого Строка Из Товары Цикл
		Если НЕ ЗначениеЗаполнено(Строка.КоличествоБазовое) Тогда
			Строка.КоличествоБазовое = Строка.Количество * Строка.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	ПустаяСтатьяДоходов = Справочники.СтатьиДоходовИРасходов.ПустаяСсылка();
	Для Каждого ТекСтрока Из Товары Цикл
		ТекСтрока.СтатьяДоходов = ПустаяСтатьяДоходов;
	КонецЦикла;
	
	ЭтоУниверсальныйДокумент = ЭтоУниверсальныйДокумент
		И Документы.ПередачаТоваровМеждуОрганизациями.ВозможенВводСчетФактурыВыданной(ЭтотОбъект);
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаСобытийДокументаСервер.ЗаполнитьРеквизитыСуммСписанияВДокументе(ЭтотОбъект, Отказ, "", Истина);
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ТипСчетФактуры", "СчетФактураВыданный");
	ОбработкаСобытийДокументаСервер.УдалитьПодчиненныеСФ(ЭтотОбъект, ПараметрыДействия, Отказ);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// определим необходимость формирования корректирующих проводок
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(Дата); 
	
 	#Область Движения_ТоварыОрганизацийКПередаче
	
	НаборЗаписейТоварыОрганизацийКПередаче	= Движения.ТоварыОрганизацийКПередаче;
	НаборЗаписейТоварыОрганизацийКПередаче.ДокументОбъект			= ЭтотОбъект;
	НаборЗаписейТоварыОрганизацийКПередаче.СкладКомпании			= СкладКомпании;
	НаборЗаписейТоварыОрганизацийКПередаче.ОрганизацияОтправитель	= Организация;
	НаборЗаписейТоварыОрганизацийКПередаче.ОрганизацияПолучатель	= ОрганизацияПолучатель;
	
	Отказ=НЕ НаборЗаписейТоварыОрганизацийКПередаче.Расход() ИЛИ Отказ;
	
	#КонецОбласти
	
	#Область Движения_ВзаиморасчетыКомпании_ДоходыИРасходы_РеализацияТоваров
	
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	ДополнительныеСвойства.Вставить(
		"СпособУчетаВзаиморасчетовПоРасчетнымДокументам",
		СпособУчетаВзаиморасчетовПоРасчетнымДокументам);
	
	// проведем взаиморасчеты по организации отправителю
	Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		НаборЗаписейВзаиморасчеты=Движения.ВзаиморасчетыКомпании;
		НаборЗаписейВзаиморасчеты.ДокументОбъект					= ЭтотОбъект;
		НаборЗаписейВзаиморасчеты.РежимПроведения					= РежимПроведения;
		НаборЗаписейВзаиморасчеты.Контрагент						= Контрагент;
		НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов				= ДоговорВзаиморасчетов;
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			НаборЗаписейВзаиморасчеты.Сделка 						= ДокументОснование;
		Иначе
			НаборЗаписейВзаиморасчеты.Сделка 						= Неопределено;
		КонецЕсли;
		НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок				=
			СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем			= Истина;
		НаборЗаписейВзаиморасчеты.Сумма								= Товары.Итог("СуммаВсего");
		НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц	= 0;
		Отказ = НЕ НаборЗаписейВзаиморасчеты.Приход() ИЛИ Отказ;
		// доходы и расходы по суммовым разницам
		СуммаДоходаРасходаСуммовыхРазниц=НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
		Если СуммаДоходаРасходаСуммовыхРазниц<>0 Тогда
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
			Если ВедетсяБалансПоПодразделению Тогда
				НаборЗаписейДиР.Подразделение = ДоговорВзаиморасчетов.ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
			НаборЗаписейДиР.ВУпрВалюте = Истина;
			Если СуммаДоходаРасходаСуммовыхРазниц<0 Тогда
				НаборЗаписейДиР.Расход = -СуммаДоходаРасходаСуммовыхРазниц;
			Иначе
				НаборЗаписейДиР.Доход = СуммаДоходаРасходаСуммовыхРазниц;
			КонецЕсли;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Движения_ВзаиморасчетыКомпании_ДоходыИРасходы_ПоступлениеТоваров
	
	СпособУчетаВзаиморасчетовПоставкиПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетовПоставки);
	ДополнительныеСвойства.Вставить(
		"СпособУчетаВзаиморасчетовПоставкиПоРасчетнымДокументам",
		СпособУчетаВзаиморасчетовПоставкиПоРасчетнымДокументам);
	
	// проведем взаиморасчеты по организации получителю
	Если Не СпособУчетаВзаиморасчетовПоставкиПоРасчетнымДокументам Тогда
		НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыКомпании;
		НаборЗаписейВзаиморасчеты.ДокументОбъект 					= ЭтотОбъект;
		НаборЗаписейВзаиморасчеты.РежимПроведения 					= РежимПроведения;
		НаборЗаписейВзаиморасчеты.Контрагент 						= КонтрагентПоставки;
		НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов 			= ДоговорВзаиморасчетовПоставки;
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			НаборЗаписейВзаиморасчеты.Сделка 						= ДокументОснование;
		Иначе
			НаборЗаписейВзаиморасчеты.Сделка 						= Неопределено;
		КонецЕсли;
		НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок 				= 
			СпособЗачетаАвансовПоставки = Перечисления.СпособыЗачетаАвансов.Автоматически;
		НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем 		= Ложь;
		НаборЗаписейВзаиморасчеты.Сумма 							= СуммаДокумента;
		НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц 	= 0;
		Отказ = НЕ НаборЗаписейВзаиморасчеты.Расход() ИЛИ Отказ;
		// Доходы и расходы по суммовым разницам
		СуммаДоходаРасходаСуммовыхРазниц = НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
		
		Если СуммаДоходаРасходаСуммовыхРазниц <> 0 Тогда
			НаборЗаписейДиР	= Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
			// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
			Если ВедетсяБалансПоПодразделению Тогда
				НаборЗаписейДиР.Подразделение = ДоговорВзаиморасчетовПоставки.ПодразделениеКомпании;
			КонецЕсли;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
			НаборЗаписейДиР.ВУпрВалюте = Истина;
			Если СуммаДоходаРасходаСуммовыхРазниц < 0 Тогда
				НаборЗаписейДиР.Расход = -СуммаДоходаРасходаСуммовыхРазниц;
			Иначе
				НаборЗаписейДиР.Доход = СуммаДоходаРасходаСуммовыхРазниц;
			КонецЕсли;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;
	КонецЕсли;

	#КонецОбласти
	
	#Область Движения_РасчетыСКонтрагентами
	
	Документы.ПередачаТоваровМеждуОрганизациями.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	Документы.ПередачаТоваровМеждуОрганизациями.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	ЕстьРасчетыСКонтрагентами = ДополнительныеСвойства.ТаблицыДвиженийДокумента.РасчетыСКонтрагентами.Количество() > 0;
	УсловиеОтбора = Новый Структура;
	УсловиеОтбора.Вставить("ТипРасчета", Перечисления.ТипыРасчетов.Оплата);
	УсловиеОтбора.Вставить("ВидДвижения", ВидДвиженияНакопления.Приход);
	СуммыПоРасчетамСКонтрагентом = РасчетыСКонтрагентамиСервер.СуммовыеПоказателиРасчетаСКонтрагентами(
		ДополнительныеСвойства.ТаблицыДвиженийДокумента.РасчетыСКонтрагентами,
		УсловиеОтбора);
	РасчетыСКонтрагентами = ДополнительныеСвойства.ТаблицыДвиженийДокумента.РасчетыСКонтрагентами.Скопировать();
	#КонецОбласти
	
	#Область Движения_Продажи_РеализацияТоваров
	
	ШапкаДокумента = ПолучитьШапкуДокумента(Ссылка);
	
	ВременныйНаборЗаписейТоварыОрганизацийКПередаче = Движения.ТоварыОрганизацийКПередаче.Выгрузить();
	КолонкиГруппировок	= "ВидДвижения, СкладКомпании, Номенклатура, ХарактеристикаНоменклатуры, СтатусПартии, Партия, ГТД";
	КолонкиСуммирования	= "Количество, Сумма, СуммаНДС, СуммаБезНДС, СуммаУпр, СуммаНДСУпр, СуммаБезНДСУпр";
	ВременныйНаборЗаписейТоварыОрганизацийКПередаче.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	
	НаборЗаписейПродажи = Движения.Продажи;
	НаборЗаписейПродажи.РежимПроведения 			= РежимПроведения;
	НаборЗаписейПродажи.ДокументОбъект 				= ЭтотОбъект;
	НаборЗаписейПродажи.ДокументПродажи 			= Ссылка;
	НаборЗаписейПродажи.Сторно						= Ложь;
	НаборЗаписейПродажи.Покупатель			 		= Контрагент;
	НаборЗаписейПродажи.СкладКомпании 				= СкладКомпании;
	НаборЗаписейПродажи.РезультатЗапросаПоТоварам 	= Неопределено;
	НаборЗаписейПродажи.РезультатЗапросаПоПартиям 	= ВременныйНаборЗаписейТоварыОрганизацийКПередаче;
	НаборЗаписейПродажи.ДоговорВзаиморасчетов 		= ДоговорВзаиморасчетов;
	НаборЗаписейПродажи.ПодразделениеКомпании 		= ПодразделениеКомпании;
	НаборЗаписейПродажи.ИмяРеквизитаДокумент 		= Неопределено;
	НаборЗаписейПродажи.Комиссия 					= Ложь;
	НаборЗаписейПродажи.ПоБазовомуКоличеству 		= Истина;
	НаборЗаписейПродажи.ШапкаДокумента 				= ШапкаДокумента;
	Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		НаборЗаписейПродажи.РасчетыСКонтрагентами = ДополнительныеСвойства.ТаблицыДвиженийДокумента.РасчетыСКонтрагентами;
	КонецЕсли;
	Отказ = НЕ НаборЗаписейПродажи.Приход() ИЛИ Отказ;
	
	#КонецОбласти
	
	#Область Движения_ДоходыИРасходы_РеализацияТоваров
	
	ВУпрВалюте=(ВалютаДокумента=Константы.ВалютаУправленческогоУчетаКомпании.Получить());
	
	ПодразделениеСклад = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ШапкаДокумента.СкладКомпании.ПодразделениеКомпании, ШапкаДокумента.Дата);
	ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании, ШапкаДокумента.Дата);
	БалансовыеПодразделенияНеРавны = (ПодразделениеДоговорВзаиморасчетов<>ПодразделениеСклад);
	
	// Доход от начисления дебиторской задолженности по отгруженному товару
	НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
	НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
	// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
	Если ВедетсяБалансПоПодразделению Тогда
		НаборЗаписейДоходыИРасходы.Подразделение=ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
	КонецЕсли;
	НаборЗаписейДоходыИРасходы.ВУпрВалюте=СпособУчетаВзаиморасчетовПоРасчетнымДокументам ИЛИ ВУпрВалюте;
	НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.НачислениеДебиторскойЗадолженностиПоТовару;
	НаборЗаписейДоходыИРасходы.Доход =
		?(СпособУчетаВзаиморасчетовПоРасчетнымДокументам, СуммыПоРасчетамСКонтрагентом.СуммаУпр, ШапкаДокумента.СуммаВсего);
	НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
	
	#КонецОбласти

	#Область Движения_ДоходыИРасходы_ПоступлениеТоваров
	
	НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
	НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
	// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
	Если ВедетсяБалансПоПодразделению Тогда
		НаборЗаписейДоходыИРасходы.Подразделение = ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
	КонецЕсли;
	НаборЗаписейДоходыИРасходы.ШапкаДокумента = ШапкаДокумента;
	НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьНеоприходованныхПартий;
	НаборЗаписейДоходыИРасходы.ВУпрВалюте = Ложь;
	НаборЗаписейДоходыИРасходы.Расход = ШапкаДокумента.СуммаВсего;
	НаборЗаписейДоходыИРасходы.Приход();
	
	#КонецОбласти
	
	#Область Движения_ОперацииПрослеживаемыхТоваров_РеализацияТоваров
	
	// Проверим налиие прослеживаемых товаров, которые были реализованы
	Движения.Продажи.Записать();
	
	ТаблицаПрослеживаемыхТоваров = Документы.ПередачаТоваровМеждуОрганизациями.ОперацииСПрослеживаемымиТоварами_РеализацияТоваров(
		ЭтотОбъект);
	НаборЗаписейОперацииПрослеживаемости = Движения.ОперацииПрослеживаемыхТоваров;
	НаборЗаписейОперацииПрослеживаемости.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейОперацииПрослеживаемости.ТаблицаПрослеживаемыхТоваров = ТаблицаПрослеживаемыхТоваров;
	Если НЕ НаборЗаписейОперацииПрослеживаемости.ДобавитьОперациюПрослеживаемости() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Движения_ОперацииПрослеживаемыхТоваров_ПоступлениеТоваров
	
	// Проверим налиие прослеживаемых товаров, которые были возвращены из розницы
	ТаблицаПрослеживаемыхТоваров = Документы.ПередачаТоваровМеждуОрганизациями.ОперацииСПрослеживаемымиТоварами_ПоступлениеТоваров(
		ЭтотОбъект);
	НаборЗаписейОперацииПрослеживаемости = Движения.ОперацииПрослеживаемыхТоваров;
	НаборЗаписейОперацииПрослеживаемости.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейОперацииПрослеживаемости.ТаблицаПрослеживаемыхТоваров = ТаблицаПрослеживаемыхТоваров;
	Если НЕ НаборЗаписейОперацииПрослеживаемости.ДобавитьОперациюПрослеживаемости() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	#КонецОбласти

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	// двигаем границы
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	
	ОбработкаСобытийДокументаСервер.ЗаполнитьРеквизитыСуммСписанияВДокументе(ЭтотОбъект, Отказ, "");

	ПараметрыДействия = Новый Структура;
	ОбработкаСобытийДокументаСервер.СоздатьОбновитьСФВыданный(ЭтотОбъект, ДополнительныеСвойства, ПараметрыДействия, Отказ);

КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта по передаваемой структуре
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
		
	Если ДанныеЗаполнения.Свойство("ПоляШапки") Тогда
		
		ПоляШапки = ДанныеЗаполнения.ПоляШапки;
		
		Дата						 = ПоляШапки.КонецПериода;
		НачалоПериода				 = ПоляШапки.НачалоПериода;
		КонецПериода				 = ПоляШапки.КонецПериода;
		СкладКомпании				 = ПоляШапки.СкладКомпании;
		//На стороне отправителя
		Организация					 = ПоляШапки.ОрганизацияОтправитель;
		Контрагент					 = ПоляШапки.Контрагент;
		ДоговорВзаиморасчетов		 = ПоляШапки.ДоговорВзаиморасчетов;
		Документы.ПередачаТоваровМеждуОрганизациями.ДоговорВзаиморасчетовПриИзменении(ЭтотОбъект);
		//На стороне получателя
		ОрганизацияПолучатель		 = ПоляШапки.ОрганизацияПолучатель;
		КонтрагентПоставки			 = ПоляШапки.КонтрагентПоставки;
		ДоговорВзаиморасчетовПоставки = ПоляШапки.ДоговорВзаиморасчетовПоставки;
		Документы.ПередачаТоваровМеждуОрганизациями.ДоговорВзаиморасчетовПоставкиПриИзменении(ЭтотОбъект);
		ТипЦен						 = ПоляШапки.ТипЦен;
		Валюта						 = ПоляШапки.Валюта;
		
		Если ДополнительныеСвойства.ПараметрыДействия.Свойство("ТипЦен")
			И ДополнительныеСвойства.ПараметрыДействия.ТипЦен <> ТипЦен Тогда
			//Иначе при исполнении обработчика ТоварыНоменклатураПриИзменении() сумма всего рассчитываеся не корректно
			//Если тип цен по умочанию другой и с другой настройкой ЦенаВключаетНДС
			ДополнительныеСвойства.ПараметрыДействия.ТипЦен = ТипЦен;
		КонецЕсли;
		
		//Заполним Товары
		Документы.ПередачаТоваровМеждуОрганизациями.ЗаполнитьПоТоварамОрганизацийКПередаче(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Структура()

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// Возвращает выборку по шапке
//
// Параметры:
//  ДокументСсылка - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Выборка - выборка по шапке
//
Функция ПолучитьШапкуДокумента(ДокументСсылка) Экспорт
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	СУММА(ПередачаТоваровМеждуОрганизациямиТовары.СуммаВсего) КАК СуммаВсего
	                    |ПОМЕСТИТЬ ДокТовары
	                    |ИЗ
	                    |	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ПередачаТоваровМеждуОрганизациямиТовары
	                    |ГДЕ
	                    |	ПередачаТоваровМеждуОрганизациямиТовары.Ссылка = &Ссылка
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	Док.Ссылка КАК Ссылка,
	                    |	Док.Дата КАК Дата,
	                    |	Док.ВалютаДокумента КАК ВалютаДокумента,
	                    |	Док.КурсДокумента КАК КурсДокумента,
	                    |	Док.ТипЦен КАК ТипЦен,
	                    |	Док.ХозОперация КАК ХозОперация,
	                    |	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	                    |	Док.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	                    |	Док.МоментВремени КАК МоментВремени,
	                    |	Док.Организация КАК Организация,
	                    |	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	                    |	Док.Проект КАК Проект,
	                    |	Док.СкладКомпании КАК СкладКомпании,
	                    |	Док.Ссылка КАК ДокументПродажи,
	                    |	Док.Контрагент КАК Контрагент,
	                    |	Док.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	                    |	Док.ДокументОснование КАК ДокументОснование,
	                    |	ЕСТЬNULL(ДокТовары.СуммаВсего, 0) КАК СуммаВсего
	                    |ИЗ
	                    |	Документ.ПередачаТоваровМеждуОрганизациями КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ ДокТовары КАК ДокТовары
	                    |		ПО (ИСТИНА)
	                    |ГДЕ
	                    |	Док.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции // ПолучитьШапкуДокумента()

#КонецОбласти

#Область Прочее

Функция ЕстьУслугиВТабЧастиТовары()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПередачаТоваровМеждуОрганизациямиТовары.Номенклатура.Ссылка КАК НоменклатураСсылка
		|ИЗ
		|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ПередачаТоваровМеждуОрганизациямиТовары
		|ГДЕ
		|	ПередачаТоваровМеждуОрганизациямиТовары.Ссылка = &Ссылка
		|	И ПередачаТоваровМеждуОрганизациямиТовары.Номенклатура.ВидНоменклатуры = &ВидНоменклатурыУслуга";
	
	Запрос.УстановитьПараметр("ВидНоменклатурыУслуга", Перечисления.ВидыНоменклатуры.Услуга);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецОбласти

#КонецЕсли
