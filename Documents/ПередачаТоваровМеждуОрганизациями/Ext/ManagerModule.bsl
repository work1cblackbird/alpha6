// Модуль менеджера документа "Реализация товаров"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетФактураВыданный);
		
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ПередачаТоваровМеждуОрганизациями);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

Процедура ЗаполнитьПоТоварамОрганизацийКПередаче(Объект, ПараметрыДействия) Экспорт

	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СкладКомпании", Объект.СкладКомпании);
	Запрос.УстановитьПараметр("ОрганизацияОтправитель", Объект.Организация);
	Запрос.УстановитьПараметр("ОрганизацияПолучатель", Объект.ОрганизацияПолучатель);
	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Объект.КонецПериода));
	Запрос.УстановитьПараметр("ТекущийДокумент", Объект.Ссылка);
	
	Запрос.Текст = ТекстЗапросаТоварыОрганизацийКПередаче();
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрТовар = Объект.Товары.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрТовар, Выборка);
			
		ТоварыНоменклатураПриИзменении(Объект, СтрТовар, ПараметрыДействия);

	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Товары.Итог("СуммаВсего"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС",    Объект.Товары.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента-ИтогиОперации.СуммаНДС);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используется в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость вывода только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возвращаемая строка, содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить = ЛОЖЬ, ТолькоОсновныеКонтакты = ИСТИНА) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

// Получение данных о прослеживаемых товаров
//
// Параметры:
//  Объект	 - ДокументОбъект.РеализацияТоваров - Документ, на основании которого произошла операция с товаром
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Список прослеживаемых товаров
//
Функция ОперацииСПрослеживаемымиТоварами_РеализацияТоваров(Объект) Экспорт
	
	// TODO: На данный момент сделано только для формирования отчета об операциях
	
	// Получим таблицу для формирования данных по операции
	ТаблицаОперацииПрослеживаемости = УчетПрослеживаемыхТоваровСервер.ИнициализацияТаблицыОпераций();
	
	ОсвобождентОтНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Неопределено, Объект.Дата).ОсвобожденОтНДС;
		
	// Проверим есть ли ставка НДС в документе
	ТаблицаНДС = Объект.Товары.Выгрузить();
	ТаблицаНДС.Свернуть("СтавкаНДС");
	ЕстьНДС = НЕ (ТаблицаНДС.Количество() = 1 И ТаблицаНДС[0].СтавкаНДС = Справочники.СтавкиНДС.БезНДС);
	
	// Операцию об отчете не выводим если есть ставка НДС в документе и организация плательщик НДС
	Если ЕстьНДС ИЛИ ОсвобождентОтНДС Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	// Сформируем запрос из документа
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Продажи.Номенклатура КАК Номенклатура,
	|	Продажи.ГТД КАК РНПТ,
	|	СУММА(Продажи.Количество) КАК КоличествоПрослеживаемости,
	|	СУММА(Продажи.ВыручкаБезНДС) КАК СуммаБезНДС
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Регистратор = &Ссылка
	|	И Продажи.ГТД.РНПТ
	|
	|СГРУППИРОВАТЬ ПО
	|	Продажи.Номенклатура,
	|	Продажи.ГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваров.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(РеализацияТоваров.Дата, КВАРТАЛ) КАК ПериодОтчета,
	|	ЗНАЧЕНИЕ(Перечисление.ДокументыОтображенияОпераций.ОтчетОбОперациях) КАК ОтчетностьОперации,
	|	ВЫБОР
	|		КОГДА РеализацияТоваров.Контрагент.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|				И РеализацияТоваров.Контрагент.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.ВывозЗаПределыРФ)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.РеализацияТоваров)
	|	КОНЕЦ КАК КодОперации,
	|	РеализацияТоваров.Ссылка КАК Документ,
	|	РеализацияТоваров.Дата КАК ДатаДокумента,
	|	РеализацияТоваров.Номер КАК НомерДокумента,
	|	РеализацияТоваров.Контрагент КАК Контрагент,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументов.Другое) КАК ВидДокумента,
	|	РеализацияТоваров.Контрагент.СтранаРегистрацииЕАЭС КАК КонтрагентСтранаРегистрацииЕАЭС
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК РеализацияТоваров
	|ГДЕ
	|	РеализацияТоваров.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	// Проверим есть РНПТ у документа
	Если ПакетЗапросов[0].Пустой() Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	ШапкаДокумента = ПакетЗапросов[1].Выбрать();
	ШапкаДокумента.Следующий();
	
	// Указываем для отчета только для контрагентов не из ЕАЭС
	Если ШапкаДокумента.КонтрагентСтранаРегистрацииЕАЭС Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	РНПТДокумента = ПакетЗапросов[0].Выгрузить();
	НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ШапкаДокумента.Документ);
	
	Для Каждого ТекущаяСтрока Из РНПТДокумента Цикл
		
		НоваяСтрока = ТаблицаОперацииПрослеживаемости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ШапкаДокумента);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.НомерДокумента = НомерДокумента;
		
	КонецЦикла;
	
	Возврат ТаблицаОперацииПрослеживаемости;
	
КонецФункции

// Получение данных о прослеживаемых товаров
//
// Параметры:
//  Объект	 - ДокументОбъект.ПоступлениеТоваров - Документ, на основании которого произошла операция с товаром
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Список прослеживаемых товаров
//
Функция ОперацииСПрослеживаемымиТоварами_ПоступлениеТоваров(Объект) Экспорт
	
	// TODO: На данный момент сделано только для формирования отчета об операциях
	
	ОрганизацияОперации	= Объект.ОрганизацияПолучатель;
	КонтрагентОперации	= Объект.КонтрагентПоставки;
	
	// Получим таблицу для формирования данных по операции
	ТаблицаОперацииПрослеживаемости = УчетПрослеживаемыхТоваровСервер.ИнициализацияТаблицыОпераций();
	
	ДанныеКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КонтрагентОперации, "СтранаРегистрацииЕАЭС");
	
	// Для контрагентов из ЕАЭС другая форма отчетности
	Если ДанныеКонтрагента.СтранаРегистрацииЕАЭС Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	ОсвобождентОтНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Неопределено, Объект.Дата).ОсвобожденОтНДС;
		
	// Проверим есть ли ставка НДС в документе
	ТаблицаНДС = Объект.Товары.Выгрузить();
	ТаблицаНДС.Свернуть("СтавкаНДС");
	ЕстьНДС = НЕ (ТаблицаНДС.Количество() = 1 И ТаблицаНДС[0].СтавкаНДС = Справочники.СтавкиНДС.БезНДС);
	
	// Операцию об отчете не выводим если есть ставка НДС в документе и организация плательщик НДС
	Если ЕстьНДС И НЕ ОсвобождентОтНДС Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ДокументыОтображенияОпераций.ОтчетОбОперациях) КАК ОтчетностьОперации,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументов.Другое) КАК ВидДокумента,
	|	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ПоступлениеТоваровТовары.Количество * ПоступлениеТоваровТовары.Коэффициент) КАК КоличествоПрослеживаемости,
	|	ПоступлениеТоваровТовары.ГТД КАК РНПТ,
	|	ПоступлениеТоваровТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ПоступлениеТоваровТовары.СуммаВсего - ПоступлениеТоваровТовары.СуммаНДС) КАК СуммаБезНДС
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ПоступлениеТоваровТовары
	|ГДЕ
	|	ПоступлениеТоваровТовары.Ссылка = &Ссылка
	|	И ПоступлениеТоваровТовары.ГТД.РНПТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровТовары.Номенклатура,
	|	ПоступлениеТоваровТовары.ГТД,
	|	ПоступлениеТоваровТовары.СтавкаНДС";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Проверим, что в документе есть РНПТ
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	ТаблицаРНПТ = Запрос.Выполнить().Выгрузить();
	
	// Зафиксируем данные для заполнения
	
	ПериодОтчета = НачалоКвартала(Объект.Дата);
	Если Объект.ХозОперация = Справочники.ХозОперации.ПоступлениеБезвозмездное Тогда
		КодОперации = Справочники.КодыОперацийПрослеживаемости.БезвозмездноеПолучение;
	Иначе
		КодОперации = Справочники.КодыОперацийПрослеживаемости.ПоступлениеТоваров;
	КонецЕсли;
	Документ = Объект.Ссылка;
	НомерДокумента = Объект.Номер;
	ДатаДокумента = Объект.Дата;
	
	// Для пересчета валюты в рубли
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл, Объект.Дата);
	КурсРегл = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	ВалютаДокумента = Объект.ВалютаДокумента;
	КурсДокумента = Объект.КурсДокумента;
	ВалютаНеРегл = (ВалютаДокумента <> ВалютаРегл);
	
	// Сформируем таблицу
	Для Каждого ТекущаяСтрока Из ТаблицаРНПТ Цикл
		
		НоваяСтрока = ТаблицаОперацииПрослеживаемости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.Организация = ОрганизацияОперации;
		НоваяСтрока.ПериодОтчета = ПериодОтчета;
		НоваяСтрока.КодОперации = КодОперации;
		НоваяСтрока.Документ = Документ;
		НоваяСтрока.НомерДокумента = НомерДокумента;
		НоваяСтрока.ДатаДокумента = ДатаДокумента;
		НоваяСтрока.Контрагент = КонтрагентОперации;
		
		Если ВалютаНеРегл Тогда
			НоваяСтрока.СуммаБезНДС = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(НоваяСтрока.СуммаБезНДС, ВалютаДокумента,
					КурсДокумента, ВалютаРегл, КурсРегл), 2);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаОперацииПрослеживаемости;
	
КонецФункции

// Получение результата сравнения контрагента и договора взаиморасчетов указанной сделке
//
// Параметры:
//  ЗаписьВзаиморасчетов - РегистрНакопленияЗапись.ВзаиморасчетыКомпании - Запись регистра "Взаиморасчеты компании"
// 
// Возвращаемое значение:
//  Структура - содержит:
//  КонтрагентКонтрольПрошел - Булево - Признак того, что контаргент соответствует контрагенту из сделки.
//  ДоговорКонтрольПрошел - Булево - Признак того, что договор взаиморасчетов соответствует контрагенту из сделки.
//
Функция КонтрольСоответствияВзаиморасчетовСделке(ЗаписьВзаиморасчетов) Экспорт
	
	Результат = Новый Структура;
	
	ИмяСделки = ?(ЕстьРеквизит(ЗаписьВзаиморасчетов, "ДокументРасчетов"), "ДокументРасчетов", "Сделка");
	
	ЕстьОрганизация = ЕстьРеквизит(ЗаписьВзаиморасчетов, "Организация");
	Если ЕстьОрганизация Тогда
		ОрганизацияПолучательДокументаРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ЗаписьВзаиморасчетов[ИмяСделки],
		"Организация");
		Если ОрганизацияПолучательДокументаРасчетов = ЗаписьВзаиморасчетов.Организация Тогда
			ИмяКонтрагента = "Контрагент";
			ИмяДоговораВзаиморасчетов = "ДоговорВзаиморасчетов";
		Иначе
			ИмяКонтрагента = "КонтрагентПоставки";
			ИмяДоговораВзаиморасчетов = "ДоговорВзаиморасчетовПоставки";
		КонецЕсли;
	Иначе
		ИмяКонтрагента = "";
		ИмяДоговораВзаиморасчетов = "";
	КонецЕсли;
	
	ЗаполненыИменаКонтрагентовДоговоров = Не ПустаяСтрока(ИмяКонтрагента) И Не ПустаяСтрока(ИмяДоговораВзаиморасчетов);
	ИменаРеквизитовСделки = "Контрагент,КонтрагентПоставки,ДоговорВзаиморасчетов,ДоговорВзаиморасчетовПоставки";
	Сделка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаписьВзаиморасчетов[ИмяСделки], ИменаРеквизитовСделки);
	
	Если ЗаполненыИменаКонтрагентовДоговоров Тогда
		Результат.Вставить(
			"КонтрагентКонтрольПрошел",
			Не ЗначениеЗаполнено(Сделка[ИмяКонтрагента]) ИЛИ Сделка[ИмяКонтрагента] = ЗаписьВзаиморасчетов.Контрагент);
		Результат.Вставить(
			"ДоговорКонтрольПрошел",
			Не ЗначениеЗаполнено(Сделка[ИмяДоговораВзаиморасчетов])
			ИЛИ Сделка[ИмяДоговораВзаиморасчетов] = ЗаписьВзаиморасчетов.ДоговорВзаиморасчетов); 
	Иначе
		Результат.Вставить(
			"КонтрагентКонтрольПрошел",
			Не ЗначениеЗаполнено(Сделка.Контрагент)
			ИЛИ Сделка.Контрагент = ЗаписьВзаиморасчетов.Контрагент
			ИЛИ Не ЗначениеЗаполнено(Сделка.КонтрагентПоставки)
			ИЛИ Сделка.КонтрагентПоставки = ЗаписьВзаиморасчетов.Контрагент);
		Результат.Вставить(
			"ДоговорКонтрольПрошел",
			Не ЗначениеЗаполнено(Сделка.ДоговорВзаиморасчетов)
			ИЛИ Сделка.ДоговорВзаиморасчетов = ЗаписьВзаиморасчетов.ДоговорВзаиморасчетов
			ИЛИ Не ЗначениеЗаполнено(Сделка.ДоговорВзаиморасчетовПоставки)
			ИЛИ Сделка.ДоговорВзаиморасчетовПоставки = ЗаписьВзаиморасчетов.ДоговорВзаиморасчетов);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // КонтрольСоответствияВзаиморасчетовСделкам()

Функция ДополнительныеПараметрыОтправителя() Экспорт
	
	ПараметрыОтправителя = Новый Структура;
	ПараметрыОтправителя.Вставить("ИмяТабличнойЧастиЗачетаАванса", "ЗачетАвансовПоставки");
	ПараметрыОтправителя.Вставить("ИмяОрганизации", "ОрганизацияПолучатель");
	ПараметрыОтправителя.Вставить("ИмяКонтрагента", "КонтрагентПоставки");
	ПараметрыОтправителя.Вставить("ИмяДоговора", "ДоговорВзаиморасчетовПоставки");
	ПараметрыОтправителя.Вставить("РасчетыСПокупателем", Ложь);
	
	Возврат ПараметрыОтправителя;
	
КонецФункции

// Получим имена реквизитов, которые необходимы для работы с документом в качестве сделки
//
// Параметры:
//  Объект					 - ДокументСсылка.ПередачаТоваровМеждуОрганизациями - Документ, котрый является сделкой.
//  ДополнительныеПараметры	 - Произвольный - Параметры, которые необходимы для получения реквизитов сделки.
// 
// Возвращаемое значение:
// Возвращаемое значение:
//  Структура - Содержит поля:
//      * ИмяКонтрагента - Строка - Имя реквизита контрагента с кем ведутся взаиморасчеты.
//      * ИмяДоговораВзаиморасчетов - Строка - Имя реквизита договора взаиморасчетов сделки.
//
Функция ИменаКонтрагентаИДоговораВзаиморасчетовПоСделке(Объект, ДополнительныеПараметры) Экспорт
	
	КонтрагентИДоговорСделки = УправлениеДиалогомДокументаСервер.ИменаКонтрагентаИДоговораВзаиморасчетовПоУмолчанию();
	
	Если ЕстьРеквизит(ДополнительныеПараметры, "Организация") Тогда
		
		ОрганизацияСделки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ОрганизацияПолучатель");
		
		Если ОрганизацияСделки = ДополнительныеПараметры.Организация Тогда
			
			КонтрагентИДоговорСделки.ИмяКонтрагента = "КонтрагентПоставки";
			КонтрагентИДоговорСделки.ИмяДоговораВзаиморасчетов = "ДоговорВзаиморасчетовПоставки";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КонтрагентИДоговорСделки;
	
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("СкладКомпании");
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ОрганизацияПолучатель");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("КонтрагентПоставки");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетовПоставки");
	ОбязательныеРеквизиты.Добавить("НачалоПериода");
	ОбязательныеРеквизиты.Добавить("КонецПериода");
	ОбязательныеРеквизиты.Добавить("СпособЗачетаАвансов");
	ОбязательныеРеквизиты.Добавить("СпособЗачетаАвансовПоставки");
		
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли; 
	
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	ОбязательныеРеквизиты.Добавить("Товары.СтавкаНДС");
	
	Если Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ОбязательныеРеквизиты.Добавить("ЗачетАвансов");
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("ЗачетАвансов.ДокументАванса");
	ОбязательныеРеквизиты.Добавить("ЗачетАвансов.Сумма");
	
	Если Объект.СпособЗачетаАвансовПоставки = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ОбязательныеРеквизиты.Добавить("ЗачетАвансовПоставки");
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("ЗачетАвансовПоставки.ДокументАванса");
	ОбязательныеРеквизиты.Добавить("ЗачетАвансовПоставки.Сумма");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары=Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	УникальныеТовары.Добавить("ГТД");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Товары", УникальныеТовары);
	
	УникальныеЗачетАвансов = Новый Массив();
	УникальныеЗачетАвансов.Добавить("ДокументАванса");
	УникальныеРеквизиты.Вставить("ЗачетАвансов", УникальныеЗачетАвансов);
	УникальныеРеквизиты.Вставить("ЗачетАвансовПоставки", УникальныеЗачетАвансов);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
 	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("СкладКомпании", Ложь);
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетовПоставки", КонтрольПоПодразделению);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	СписокДоговоров = Новый Массив;
	СписокДоговоров.Добавить(Объект.ДоговорВзаиморасчетов);
	СписокДоговоров.Добавить(Объект.ДоговорВзаиморасчетовПоставки);
	
	ВалютыДоговоров = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокДоговоров, "ВалютаВзаиморасчетов");
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговора",
		ВалютыДоговоров.Получить(Объект.ДоговорВзаиморасчетов));
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговораПоставки",
		ВалютыДоговоров.Получить(Объект.ДоговорВзаиморасчетовПоставки));
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаДоговора", ДополнительныеПараметры.ДляПроведения.ВалютаДоговора);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПередачаТоваровМеждуОрганизациями.Организация КАК Организация,
	|	ПередачаТоваровМеждуОрганизациями.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	ПередачаТоваровМеждуОрганизациями.Ссылка КАК Ссылка,
	|	ПередачаТоваровМеждуОрганизациями.Дата КАК Дата,
	|	ПередачаТоваровМеждуОрганизациями.ХозОперация КАК ХозОперация,
	|	ПередачаТоваровМеждуОрганизациями.ДокументОснование КАК ДокументОснование,
	|	ПередачаТоваровМеждуОрганизациями.Контрагент КАК Контрагент,
	|	ПередачаТоваровМеждуОрганизациями.КонтрагентПоставки КАК КонтрагентПоставки,
	|	ПередачаТоваровМеждуОрганизациями.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ПередачаТоваровМеждуОрганизациями.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	ПередачаТоваровМеждуОрганизациями.ДоговорВзаиморасчетовПоставки КАК ДоговорВзаиморасчетовПоставки,
	|	ПередачаТоваровМеждуОрганизациями.ДоговорВзаиморасчетовПоставки.ВалютаВзаиморасчетов КАК ВалютаДоговораПоставки,
	|	ПередачаТоваровМеждуОрганизациями.Ссылка КАК Сделка,
	|	ПередачаТоваровМеждуОрганизациями.СуммаДокумента КАК Сумма,
	|	ПередачаТоваровМеждуОрганизациями.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	ПередачаТоваровМеждуОрганизациями.ВалютаДокумента КАК ВалютаДокумента,
	|	ПередачаТоваровМеждуОрганизациями.КурсДокумента КАК КурсДокумента,
	|	ПередачаТоваровМеждуОрганизациями.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ПередачаТоваровМеждуОрганизациями.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ПередачаТоваровМеждуОрганизациями.СпособЗачетаАвансовПоставки КАК СпособЗачетаАвансовПоставки,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаТоваровМеждуОрганизациями
	|ГДЕ
	|	ПередачаТоваровМеждуОрганизациями.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПередачаТоваровМеждуОрганизациямиЗачетАвансов.Ссылка КАК Ссылка,
	|	ПередачаТоваровМеждуОрганизациямиЗачетАвансов.ДокументАванса КАК ДокументАванса,
	|	ПередачаТоваровМеждуОрганизациямиЗачетАвансов.Сумма КАК Сумма
	|ПОМЕСТИТЬ РаспределениеАванса
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.ЗачетАвансов КАК ПередачаТоваровМеждуОрганизациямиЗачетАвансов
	|ГДЕ
	|	ПередачаТоваровМеждуОрганизациямиЗачетАвансов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПередачаТоваровМеждуОрганизациямиЗачетАвансовПоставки.Ссылка КАК Ссылка,
	|	ПередачаТоваровМеждуОрганизациямиЗачетАвансовПоставки.ДокументАванса КАК ДокументАванса,
	|	ПередачаТоваровМеждуОрганизациямиЗачетАвансовПоставки.Сумма КАК Сумма
	|ПОМЕСТИТЬ РаспределениеАвансаПоставки
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.ЗачетАвансовПоставки КАК ПередачаТоваровМеждуОрганизациямиЗачетАвансовПоставки
	|ГДЕ
	|	ПередачаТоваровМеждуОрганизациямиЗачетАвансовПоставки.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр, &ВалютаДоговора)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ХозОперация КАК ХозОперация,
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.КонтрагентПоставки КАК КонтрагентПоставки,
	|	ДанныеДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДоговора КАК ВалютаДоговора,
	|	ДанныеДокумента.ДоговорВзаиморасчетовПоставки КАК ДоговорВзаиморасчетовПоставки,
	|	ДанныеДокумента.ВалютаДоговораПоставки КАК ВалютаДоговораПоставки,
	|	ДанныеДокумента.Сделка КАК Сделка,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыВзаиморасчетов = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютВзаиморасчетов.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетов.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыВзаиморасчетов
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыВзаиморасчетов = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютВзаиморасчетовПоставки.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетовПоставки.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыВзаиморасчетов
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетовПоставки,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ДанныеДокумента.СпособЗачетаАвансовПоставки КАК СпособЗачетаАвансовПоставки,
	|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютВзаиморасчетов
	|		ПО ДанныеДокумента.ВалютаДоговора = КурсыВалютВзаиморасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютВзаиморасчетовПоставки
	|		ПО ДанныеДокумента.ВалютаДоговораПоставки = КурсыВалютВзаиморасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.ДокументОснование КАК ДокументОснование,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Задолженность.ВалютаДоговора КАК ВалютаДоговора,
	|	Задолженность.Сделка КАК Сделка,
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр
	|ИЗ
	|	Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеАванса.ДокументАванса КАК ДокументАванса,
	|	СУММА(РаспределениеАванса.Сумма) КАК Сумма
	|ИЗ
	|	РаспределениеАванса КАК РаспределениеАванса
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеАванса.ДокументАванса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задолженность.ОрганизацияПолучатель КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.ДокументОснование КАК ДокументОснование,
	|	Задолженность.КонтрагентПоставки КАК Контрагент,
	|	Задолженность.ДоговорВзаиморасчетовПоставки КАК ДоговорВзаиморасчетов,
	|	Задолженность.ВалютаДоговораПоставки КАК ВалютаДоговора,
	|	Задолженность.Сделка КАК Сделка,
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.КурсВалютыВзаиморасчетовПоставки КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансовПоставки КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр
	|ИЗ
	|	Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.ДоговорВзаиморасчетовПоставки.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеАвансаПоставки.ДокументАванса КАК ДокументАванса,
	|	СУММА(РаспределениеАвансаПоставки.Сумма) КАК Сумма
	|ИЗ
	|	РаспределениеАвансаПоставки КАК РаспределениеАвансаПоставки
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеАвансаПоставки.ДокументАванса";
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеОбОплатеПолучателя = ПакетЗапроса[0].Выбрать();
	ЗачетАвансаПолучателя = ПакетЗапроса[1].Выгрузить();
	ДанныеОбОплате = ПакетЗапроса[2].Выбрать();
	ЗачетАванса = ПакетЗапроса[3].Выгрузить();
	
	ЕстьРасчетыСПолучателем = ДанныеОбОплатеПолучателя.Следующий();
	ЕстьРасчетыСПоставщиком = ДанныеОбОплате.Следующий();
	
	Если Не ЕстьРасчетыСПолучателем
		И Не ЕстьРасчетыСПоставщиком Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	Если ЕстьРасчетыСПоставщиком Тогда
	
		РасчетыСКонтрагентамиСервер.ДополнитьРасчетыСКонтрагентом(
			РасчетыСКонтрагентами,
			ДанныеОбОплате,
			ЗачетАванса,
			Отказ,
			Ложь);
		
	КонецЕсли;
	
	Если ЕстьРасчетыСПолучателем Тогда
	
		РасчетыСКонтрагентамиСервер.ДополнитьРасчетыСКонтрагентом(
			РасчетыСКонтрагентами,
			ДанныеОбОплатеПолучателя,
			ЗачетАвансаПолучателя,
			Отказ);
		
	КонецЕсли;
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	Если ЕстьРеквизит(Объект, "Контрагент") И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПараметрыДействия.Вставить("РезервыДляКонтрагента", Объект.Контрагент);
	КонецЕсли;
	ПараметрыДействия.Вставить("РасчетыСПокупателем", Истина);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДатаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаРеквизитаСкладКомпании()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДокументОснованиеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Прописать проверку соответствия реквизитов объекта выбранной хоз.операции
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПоставкиПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ДоговорВзаиморасчетов = Объект.ДоговорВзаиморасчетовПоставки;
	
	Объект.СпособЗачетаАвансовПоставки = ДоговорВзаиморасчетов.СпособЗачетаАвансов;
	РасчетыСКонтрагентамиСервер.ЗаполнитьСлужебныйРеквизитОстатокПоДокументуОплаты(
		Объект,
		ДополнительныеПараметрыОтправителя());
	
КонецПроцедуры // ДоговорВзаиморасчетовПоставкиПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Строка.ИдентификаторТовара) Тогда
		Строка.ИдентификаторТовара = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество базовое" в таблице "Товары".
//
// Параметры:
//  Объект 
//  Строка - строка табличной части
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "ГТД" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыГТДПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ГТДПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗачетАвансов

// Обработчик события возникающего при изменении данных реквизита "Документ аванса" в таблице "ЗачетАвансов".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЗачетАвансовДокументАвансаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	РасчетыСКонтрагентамиСервер.ДокументАвансаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСпособЗачетаАвансовПоставки

// Обработчик события возникающего при изменении данных реквизита "Документ аванса" в таблице "ЗачетАвансовПоставки".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЗачетАвансовПоставкиДокументАвансаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
		ПараметрыДействия,
		ДополнительныеПараметрыОтправителя(),
		Истина);
	
	// Вызываем общий обработчик события
	РасчетыСКонтрагентамиСервер.ДокументАвансаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Товары");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", Документы.РеализацияТоваров);
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить по товарам организаций к передаче'");
	Команда.Идентификатор	= "ТоварыЗаполнитьПоТоварамОрганизацийКПередаче";
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением = Истина;
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью команд заполнения объекта
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть не доступны в зависимости от параметров объекта
	ДоступностьКоманд = Новый Соответствие;
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ДоступностьКоманд;
	
КонецФункции // ПолучитьДоступностьКомандЗаполнения()

// Обработчик заполнения документа по товарам к оформлению
//
Процедура ТоварыЗаполнитьПоТоварамОрганизацийКПередаче(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	Объект = ПараметрыКоманды.Источник;
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ЗаполнитьПоТоварамОрганизацийКПередаче(Объект, ПараметрыДействия);
	
	ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЗаполнитьПоТоварамКОформлению()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ12",
		НСтр("ru = 'ТОРГ-12 (Товарная накладная)'"),
		СсылкаНаДокумент);
		
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьУПД",
		"ПФ_MXL_УПД",
		НСтр("ru = 'Универсальный передаточный документ'"),
		СсылкаНаДокумент);	  
		
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик события формирования печатной формы.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - информация для заполнения письма при отправке печатной формы электронной почтой.
//                                     Содержит следующие поля:
//    ** Получатель - Строка, СписокЗначений, Массив - список получателей письма;
//    ** Тема - Строка - Тема письма,
//    ** Текст - Строка - Текст письма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт


КонецПроцедуры // Печать()

Функция ПолучитьДанныеДляПечатиТОРГ12(Объект) Экспорт
	ДанныеОбъекта = Новый Структура();
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"          , Объект.КурсДокумента);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("ДокументОснование"      , Объект.ДоговорВзаиморасчетов);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  , Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("ОснованиеДата"          , Формат(Объект.ДоговорВзаиморасчетов.ДатаНачала, "ЧЦ=; ДФ=dd.MM.yyyy"));
	ДанныеОбъекта.Вставить("ОснованиеНомер"         , Объект.ДоговорВзаиморасчетов.НомерДоговора);
	ДанныеОбъекта.Вставить("КодПоОКПО"              , Объект.Организация.КодПоОКПО);
	ДанныеОбъекта.Вставить("РасчетныйСчетДокумента" , "");

	// Выборка табличной части
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровТовары.НомерСтроки КАК НомерСтроки,
	               |	РеализацияТоваровТовары.Номенклатура КАК Номенклатура,
	               |	РеализацияТоваровТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	РеализацияТоваровТовары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	               |	РеализацияТоваровТовары.Номенклатура.Артикул КАК Код,
	               |	РеализацияТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	РеализацияТоваровТовары.Количество КАК Количество,
	               |	РеализацияТоваровТовары.Коэффициент КАК Коэффициент,
	               |	РеализацияТоваровТовары.КоличествоБазовое КАК КоличествоБазовое,
	               |	РеализацияТоваровТовары.СуммаВсего КАК СуммаВсего,
	               |	РеализацияТоваровТовары.СуммаВсего - РеализацияТоваровТовары.СуммаНДС КАК СуммаБезНДС,
	               |	(РеализацияТоваровТовары.СуммаВсего - РеализацияТоваровТовары.СуммаНДС) / РеализацияТоваровТовары.Количество КАК ЦенаБезНДС,
	               |	РеализацияТоваровТовары.СуммаНДС КАК СуммаНДС,
	               |	РеализацияТоваровТовары.СтавкаНДС КАК СтавкаНДС,
	               |	РеализацияТоваровТовары.Цена КАК Цена,
	               |	РеализацияТоваровТовары.ГТД КАК ГТД
	               |ИЗ
	               |	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК РеализацияТоваровТовары
	               |ГДЕ
	               |	РеализацияТоваровТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Товары = Запрос.Выполнить().Выгрузить();

	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти"  , Товары);
	
	// свойства 
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПоставщикКонтрагент);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Плательщик); 

	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства); 
	ДатаОтгрузки = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", ЗначенияСвойствОбъекта);	
	ДанныеОбъекта.Вставить("ДатаОтгрузки"     , ?(НЕ ЗначениеЗаполнено(ДатаОтгрузки),"""___""____________ 20___",Формат(ДатаОтгрузки,"ДЛФ=D")));
	
   	ДанныеОбъекта.Вставить("Поставщик"             , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ПоставщикКонтрагент", ЗначенияСвойствОбъекта,Объект.Организация));
	ДанныеОбъекта.Вставить("Плательщик"            , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Плательщик", ЗначенияСвойствОбъекта,Объект.Контрагент));
	
	ДанныеОбъекта.Вставить("Грузоотправитель"        , ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, Объект.Организация));
	ДанныеОбъекта.Вставить("Грузополучатель"         , ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, Объект.Контрагент));
	ДанныеОбъекта.Вставить("Руководитель"     	     , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Руководитель"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Отпустил"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Отпустил"));  
	ДанныеОбъекта.Вставить("Принял"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Принял"));
	ДанныеОбъекта.Вставить("Получил"          		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Получил")); 
	ДанныеОбъекта.Вставить("ГрузополучательПоОКПО"   , ДанныеОбъекта.Грузополучатель.КодПоОКПО);
	ДанныеОбъекта.Вставить("ПоставщикПоОКПО"         , ДанныеОбъекта.Поставщик.КодПоОКПО);
	ДанныеОбъекта.Вставить("ПлательщикПоОКПО"        , ДанныеОбъекта.Плательщик.КодПоОКПО);
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ПолучитьДанныеДляПечатиУПД(Объект) Экспорт
	
	ДокументФактура = ПолучитьСФПоДокументуОснования(Объект.Ссылка);
	ДанныеОбъекта = Новый Структура();
	
	// Сформируем статус документа
	Если ДокументФактура <> Документы.СчетФактураВыданный.ПустаяСсылка() И НЕ ДокументФактура.ПометкаУдаления Тогда
		Статус = 1;
		ДокументОбъект = ДокументФактура;
		ТаблицаТоваров = ДокументОбъект.Товары.Выгрузить();
	Иначе
		Статус = 2;
		ДокументОбъект = Объект;
				
		// Получим ТЧ товаров по счет-фактуре с ГТД  
		УстановитьПривилегированныйРежим(Истина);

		СчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
		СчетФактура.Заполнить(Объект.Ссылка);
		ТаблицаТоваров = СчетФактура.Товары.Выгрузить();
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	// данные документа
	ДанныеОбъекта.Вставить("Дата"                   	, ДокументОбъект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  	, УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ДокументОбъект));
	ДанныеОбъекта.Вставить("ХозОперация"            	, ДокументОбъект.ХозОперация);
	ДанныеОбъекта.Вставить("ДокументОснование"      	, ДокументОбъект.ДокументОснование);
	ДанныеОбъекта.Вставить("ВалютаДокумента"      		, ДокументОбъект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"      		, ДокументОбъект.КурсДокумента);
	ДанныеОбъекта.Вставить("ТипЦен"      				, ДокументОбъект.ТипЦен);
	ДанныеОбъекта.Вставить("Поставщик"              	, ДокументОбъект.Организация);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  	, ДокументОбъект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("Покупатель"              	, ДокументОбъект.Контрагент);
	ДанныеОбъекта.Вставить("Организация"              	, Объект.Организация);
	ДанныеОбъекта.Вставить("ДоговорВзаиморасчетов"     	, ?(ЗначениеЗаполнено(ДокументОбъект.ДоговорВзаиморасчетов), Объект.ДоговорВзаиморасчетов, "--"));
	ДанныеОбъекта.Вставить("Товары"              		, ТаблицаТоваров);
	ДанныеОбъекта.Вставить("СуммаДокумента"             , ДокументОбъект.СуммаДокумента);
	ДанныеОбъекта.Вставить("Статус"              		, Статус);
	ДанныеОбъекта.Вставить("ДокументОтгрузки", ?(Статус = 1, ДокументОбъект.ДокументОснование, Объект.Ссылка));
	
	Если Статус = 1 Тогда
		ДанныеОбъекта.Вставить("НомерИсправления"       	, ?(ЗначениеЗаполнено(ДокументОбъект.НомерИсправления), ДокументОбъект.НомерИсправления, "--"));
		ДанныеОбъекта.Вставить("ДатаИсправления"        	, ?(ЗначениеЗаполнено(ДокументОбъект.Дата), ДокументОбъект.Дата, "--"));
		ДанныеОбъекта.Вставить("ПлатежноРасчетныеДокументы" , ДокументОбъект.ПлатежноРасчетныеДокументы);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("ТаблицаРНПТ", УправлениеДиалогомДокументаСервер.РНПТПрослеживаемыхТоваров(Объект.Ссылка));
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства); 
	ДанныеОбъекта.Вставить("ДатаОтгрузки"            , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", ЗначенияСвойствОбъекта)); 
	
	ДанныеОбъекта.Вставить("Грузоотправитель"        , ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, ДокументОбъект.Организация));
	ДанныеОбъекта.Вставить("Грузополучатель"         , ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, ДокументОбъект.Контрагент));
  	
	ДанныеОбъекта.Вставить("Руководитель"     	     , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Руководитель"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Отпустил"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Отпустил"));
	ДанныеОбъекта.Вставить("Получил"          		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Получил"));
	ДанныеОбъекта.Вставить("Менеджер"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Менеджер"));
	
	Возврат ДанныеОбъекта;
	
КонецФункции
 
Функция ПолучитьСФПоДокументуОснования(ДокументОснование) Экспорт
	
	ДокументСФ = Документы.СчетФактураВыданный.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетФактураВыданный.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
		|	И СчетФактураВыданный.Проведен";   
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);   

	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			ДокументСФ = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДокументСФ;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ТекстЗапросаТоварыОрганизацийКПередаче()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТоварыОрганизацийКПередачеОбороты.Номенклатура КАК Номенклатура,
	|	ТоварыОрганизацийКПередачеОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТоварыОрганизацийКПередачеОбороты.ГТД КАК ГТД,
	|	СУММА(ТоварыОрганизацийКПередачеОбороты.КоличествоОборот) КАК Количество
	|ПОМЕСТИТЬ втТоварыОрганизацийКПередачеОбороты
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКПередаче.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			СкладКомпании = &СкладКомпании
	|				И ОрганизацияОтправитель = &ОрганизацияОтправитель
	|				И ОрганизацияПолучатель = &ОрганизацияПолучатель) КАК ТоварыОрганизацийКПередачеОбороты
	|ГДЕ
	|	ТоварыОрганизацийКПередачеОбороты.КоличествоОборот <> 0
	|	И ТоварыОрганизацийКПередачеОбороты.Регистратор <> &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыОрганизацийКПередачеОбороты.Номенклатура,
	|	ТоварыОрганизацийКПередачеОбороты.ХарактеристикаНоменклатуры,
	|	ТоварыОрганизацийКПередачеОбороты.ГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыОрганизацийКПередачеОбороты.Номенклатура КАК Номенклатура,
	|	втТоварыОрганизацийКПередачеОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	втТоварыОрганизацийКПередачеОбороты.ГТД КАК ГТД,
	|	втТоварыОрганизацийКПередачеОбороты.Количество КАК Количество
	|ИЗ
	|	втТоварыОрганизацийКПередачеОбороты КАК втТоварыОрганизацийКПередачеОбороты
	|ГДЕ
	|	втТоварыОрганизацийКПередачеОбороты.Количество <> 0";
	
	Возврат ТекстЗапроса;
		
КонецФункции

#КонецОбласти

// Проверяет возможность ввода счет-фактуры выданной на основании документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ПередачаТоваровМеждуОрганизациями - документ, для которого выполняется действие.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина, если ввод возможен, Ложь - в противном случае.
//
Функция ВозможенВводСчетФактурыВыданной(ДокументОбъект, ДополнительныеПарметры = Неопределено) Экспорт
	
	СистемаНО = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.СистемаНалогообложения,
		ДокументОбъект.Организация,
	);
	
	НалогообложениеУСН = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.НалогообложениеНДСПриУСН,
		ДокументОбъект.Организация,
	);
	
	Если СистемаНО = Перечисления.СистемыНалогообложения.Упрощенная И НЕ РаботаСоСтавкамиНДССервер.УСНПлательщикНДС(НалогообложениеУСН) Тогда
        Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбработкаСобытийДокументаСервер.ДокументСодержитСтрокиСНДС(ДокументОбъект, "Товары");
		
КонецФункции

#КонецОбласти

#КонецЕсли

