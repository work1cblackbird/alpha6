// Модуль документа "Чек"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Процедура - обработчик ввода на основании
// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения = Неопределено, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если (НЕ СкладКомпании.Пустая()) И (НЕ СкладКомпании.Розничный) Тогда
		СкладКомпании = Неопределено;
	КонецЕсли;
	
	// Заполним доп. поля
	Для Каждого ТекущаяСтрока Из Товары Цикл
		Если ПустаяСтрока(ТекущаяСтрока.ИдентификаторТовара) Тогда
			ТекущаяСтрока.ИдентификаторТовара = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
	Архивный = ЛОЖЬ;
	
	ПечататьАртикулНоменклатуры = Организация.ПечататьАртикулНоменклатурыВЧеках;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	Архивный = ЛОЖЬ;
	КодыМаркировки.Очистить();
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Предварительно проверим ТЧ Коды маркировки
	МаркировкаТоваровСервер.ПроверкаКодовМаркировкиПередЗаписью(ЭтотОбъект);
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Чеки, попавшие в архив повторно проверять не следует
	Если Архивный Тогда
		Возврат;
	КонецЕсли;
	
	Если СуммаДокумента<0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Сумма к оплате не должна быть отрицательной'"),, "СуммаДокумента",,Отказ);
	КонецЕсли;
	
	// Проводим инициализацию основных 
	СуммаДокумента = Товары.Итог("СуммаВсего");
	ОплатыВсего = Оплаты.Итог("Сумма");
	ОплатыСдача = Оплаты.Итог("Сдача");
	ОплатыНалом = 0;
	ОплатыТалон = 0;
	ОплатыБезнал= 0;
	СтрокаТалон = Неопределено;
	
	// Выполним проверку корректности заполнения реквизит таблицы оплат
	Для Каждого ТекОплата Из Оплаты Цикл
		
		Если ТекОплата.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
			ОплатыНалом = ОплатыНалом + ТекОплата.Сумма - ТекОплата.Сдача;
		Иначе
			ОплатыБезнал = ОплатыБезнал + ТекОплата.Сумма - ТекОплата.Сдача;
		КонецЕсли;
					
	КонецЦикла;
	
	// Проводим контроль сумм оплат
	КонтролироватьЗаполнениеОплат = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "КонтролироватьЗаполнениеОплат", ИСТИНА);
	
	Если (ХозОперация = Справочники.ХозОперации.ЧекОтложенный) ИЛИ (НЕ КонтролироватьЗаполнениеОплат) Тогда
		// Проверку корректности сумм оплат производить сейчас не нужно
		
	ИначеЕсли СуммаДокумента > ОплатыВсего И НЕ ПраваИНастройкиПользователя.Значение("ПогашатьЧекЦеликом") Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Общая сумма оплат не может быть менее суммы документа.'"), ЭтотОбъект,,, Отказ
		);
		
	ИначеЕсли СуммаДокумента < ОплатыВсего Тогда
		// Определим причину превышения оплаты
		Если (ОплатыВсего = ОплатыБезнал) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Сумма безналичной оплаты не может превышать сумму документа.'"),
				ЭтотОбъект,
				,,
				Отказ
			);
			
		ИначеЕсли (ОплатыБезнал >= СуммаДокумента) И (ОплатыНалом > 0) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Сумма безналичной оплаты полностью закрывает сумму чека. Оплата наличными не допустима.'"),
				ЭтотОбъект,
				,,
				Отказ
			);
			
		ИначеЕсли (ОплатыВсего - СуммаДокумента) > ОплатыСдача Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Общая сумма оплат не может быть больше суммы к оплате.'"), ЭтотОбъект,
				,, 
				Отказ
			);
		КонецЕсли;
		
	КонецЕсли;
	
	Отказ = Отказ ИЛИ ОбработкаСобытийДокументаСервер.ПроверитьКорректностьРеализацииПодакцизныхТоваров(ЭтотОбъект);
		
	// !!!_view Проверку остатков вынести из данного события!??!
	
	ПроверитьОстатки = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ПроверитьОстатки", ИСТИНА);
	Если ПроверитьОстатки И ХозОперация = Справочники.ХозОперации.Чек И ПраваИНастройкиПользователя.Значение("РазрешитьОтрицательныеСкладскиеОстатки", ЭтотОбъект) = Перечисления.ВидыРазрешенныхОтрицательныхОстатков.Запрещены Тогда
		
		ТаблицаБезХарактеристик 	= Товары.ВыгрузитьКолонки("МестоРазмещения, Номенклатура");
		ПустаяХарактеристика 		= Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		МассивРежимовСписания 		= Новый Массив;
		МассивРежимовСписания.Добавить(Перечисления.РежимыАвтоСписанияХарактеристик.РучноеСписание);
		МассивРежимовСписания.Добавить(Перечисления.РежимыАвтоСписанияХарактеристик.ПустаяСсылка());
		
		МассивСкладов       		= Новый Массив;
		МассивТоваров       		= Новый Массив;
		МассивХарактеристик 		= Новый Массив;
		МассивСкладовАвтоСписание 	= Новый Массив;
		МассивТоваровАвтоСписание	= Новый Массив;
		
		Для Каждого ТекЭлемент Из Товары Цикл
			Если ТекЭлемент.ХарактеристикаНоменклатуры = ПустаяХарактеристика
				И МассивРежимовСписания.Найти(ТекЭлемент.Номенклатура.ТипНоменклатуры.АвтоСписаниеХарактеристик) = Неопределено Тогда
				Если МассивТоваровАвтоСписание.Найти(ТекЭлемент.Номенклатура) = Неопределено Тогда
					МассивТоваровАвтоСписание.Добавить(ТекЭлемент.Номенклатура);
				КонецЕсли;
				Если МассивСкладовАвтоСписание.Найти(ТекЭлемент.МестоРазмещения) = Неопределено Тогда
					МассивСкладовАвтоСписание.Добавить(ТекЭлемент.МестоРазмещения);
				КонецЕсли;
			Иначе
				Если МассивТоваров.Найти(ТекЭлемент.Номенклатура) = Неопределено Тогда
					МассивТоваров.Добавить(ТекЭлемент.Номенклатура);
				КонецЕсли;
				Если МассивСкладов.Найти(ТекЭлемент.МестоРазмещения) = Неопределено Тогда
					МассивСкладов.Добавить(ТекЭлемент.МестоРазмещения);
				КонецЕсли;
				Если МассивХарактеристик.Найти(ТекЭлемент.ХарактеристикаНоменклатуры) = Неопределено Тогда
					МассивХарактеристик.Добавить(ТекЭлемент.ХарактеристикаНоменклатуры);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ЕстьАвтоСписаниеХарактеристик = МассивТоваровАвтоСписание.Количество()>0;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиТоваровКомпанииОстатки.СкладКомпании КАК СкладКомпании,
		|	ОстаткиТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
		|	ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВЫБОР
		|		КОГДА ОстаткиТоваровКомпанииОстатки.КоличествоОстаток ЕСТЬ NULL ТОГДА
		|			0
		|		ИНАЧЕ
		|			ОстаткиТоваровКомпанииОстатки.КоличествоОстаток - ОстаткиТоваровКомпанииОстатки.РезервОстаток
		|	КОНЕЦ КАК Остаток
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(&Момент, СкладКомпании В (&СкладКомпании) И Номенклатура В (&Номенклатура) И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)) КАК ОстаткиТоваровКомпанииОстатки" + ?(ЕстьАвтоСписаниеХарактеристик, "
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОстаткиТоваровКомпанииОстатки.СкладКомпании,
		|	ОстаткиТоваровКомпанииОстатки.Номенклатура,
		|	Значение(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|	ВЫБОР
		|		КОГДА ОстаткиТоваровКомпанииОстатки.КоличествоОстаток ЕСТЬ NULL ТОГДА
		|			0
		|		ИНАЧЕ
		|			ОстаткиТоваровКомпанииОстатки.КоличествоОстаток - ОстаткиТоваровКомпанииОстатки.РезервОстаток
		|	КОНЕЦ
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваровКомпании.Остатки(&Момент, СкладКомпании В (&СкладКомпанииАвтоСписание) И Номенклатура В (&НоменклатураАвтоСписание)) КАК ОстаткиТоваровКомпанииОстатки", "");
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Момент", 					МоментВремени());
		Запрос.УстановитьПараметр("ТаблицаТовары", 				Товары);
		Запрос.УстановитьПараметр("СкладКомпании",              МассивСкладов);
		Запрос.УстановитьПараметр("Номенклатура",               МассивТоваров);
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", МассивХарактеристик);
		Запрос.УстановитьПараметр("СкладКомпанииАвтоСписание",  МассивСкладовАвтоСписание);
		Запрос.УстановитьПараметр("НоменклатураАвтоСписание",   МассивТоваровАвтоСписание);
		
		Выборка = Запрос.Выполнить().Выбрать();
		СтруктураОтбора = Новый Структура;
		
		ВидНоменклатурыУслуги = Перечисления.ВидыНоменклатуры.Услуга;
		Для Каждого СтрокаТоваров Из Товары Цикл
			Если СтрокаТоваров.Номенклатура.ВидНоменклатуры = ВидНоменклатурыУслуги Тогда
				Продолжить;
			КонецЕсли;
			Выборка.Сбросить();
			СтруктураОтбора.Вставить("Номенклатура",               СтрокаТоваров.Номенклатура);
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаТоваров.ХарактеристикаНоменклатуры);
			СтруктураОтбора.Вставить("СкладКомпании",              СтрокаТоваров.МестоРазмещения);
			Если Выборка.НайтиСледующий(СтруктураОтбора) Тогда
				Остаток = Окр(Выборка.Остаток/СтрокаТоваров.Коэффициент, 3);
			Иначе
				Остаток = 0;
			КонецЕсли;
			Количество = СтрокаТоваров.Количество;
			Если Количество > Остаток Тогда
				// Расход по складу превышает остаток
				Если НЕ ЗначениеЗаполнено(СтрокаТоваров.ХарактеристикаНоменклатуры) Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='[<%1>] Товар <%2>. Остаток <%3> <%4>.Списывается <%5> <%6>. Превышение <%7> <%8>.'"),
																						СокрЛП(СтрокаТоваров.Номенклатура.Код),
																						СокрЛП(СтрокаТоваров.Номенклатура),
																						СокрЛП(Остаток),
																						СокрЛП(СтрокаТоваров.ЕдиницаИзмерения),
																						СокрЛП(Количество),
																						СокрЛП(СтрокаТоваров.ЕдиницаИзмерения),
																						СокрЛП(Количество-Остаток),
																						СокрЛП(СтрокаТоваров.ЕдиницаИзмерения));
				Иначе
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='[<%1>] Товар <%2> с характеристикой <%3>. Остаток <%4> <%5>.Списывается <%6> <%7>. Превышение <%8> <%9>.'"),
																						СокрЛП(СтрокаТоваров.Номенклатура.Код),
																						СокрЛП(СтрокаТоваров.Номенклатура),
																						СокрЛП(СтрокаТоваров.ХарактеристикаНоменклатуры),
																						СокрЛП(Остаток),
																						СокрЛП(СтрокаТоваров.ЕдиницаИзмерения),
																						СокрЛП(Количество),
																						СокрЛП(СтрокаТоваров.ЕдиницаИзмерения),
																						СокрЛП(Количество-Остаток),
																						СокрЛП(СтрокаТоваров.ЕдиницаИзмерения));
				КонецЕсли;
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект,,, Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Проверим заполнение ТЧ Коды маркировки
	ПолнаяПроверка = (ХозОперация <> Справочники.ХозОперации.ЧекНаВозврат
		И ХозОперация <> Справочники.ХозОперации.ЧекОтложенный);
	МаркировкаТоваровСервер.ПроверитьЗаполнениеКодовМаркировки(ЭтотОбъект, Отказ, , , ПолнаяПроверка);
	
	Если НЕ ХозОперация = Справочники.ХозОперации.ЧекНаВозврат
		И НЕ ХозОперация = Справочники.ХозОперации.ЧекОтложенный Тогда
		
		СписокСостоянийВводаВОборот = Перечисления.СостоянияКодовМаркировки.СостоянияВводаВОборотМаркировки();
		
		ТаблицаРазбораМаркировки = Новый ТаблицаЗначений;
		ТаблицаРазбораМаркировки.Колонки.Добавить("GTIN",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
		ТаблицаРазбораМаркировки.Колонки.Добавить("СерийныйНомер",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
		ТаблицаРазбораМаркировки.Колонки.Добавить("КодМаркировки",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));
		
		// Разберем маркировку на состовляющие для поиска
		Для Каждого ТекущаяСтрока Из КодыМаркировки Цикл
			
			СтруктураМаркировки = МенеджерОборудованияМаркировка.РазобратьШтриховойКодТовара(ТекущаяСтрока.КодМаркировки);
			
			Если НЕ СтруктураМаркировки.Разобран Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаРазбораМаркировки.Добавить();
			НоваяСтрока.GTIN = СтруктураМаркировки.GTIN;
			НоваяСтрока.СерийныйНомер = СтруктураМаркировки.СерийныйНомер;
			НоваяСтрока.КодМаркировки = ТекущаяСтрока.КодМаркировки;
			
		КонецЦикла;
		
		// Получим текущие статусы маркировки
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	СписокКодовМаркировок.GTIN КАК GTIN,
		               |	СписокКодовМаркировок.СерийныйНомер КАК СерийныйНомер,
		               |	СписокКодовМаркировок.КодМаркировки КАК КодМаркировки
		               |ПОМЕСТИТЬ ТаблицаМаркировок
		               |ИЗ
		               |	&СписокКодовМаркировок КАК СписокКодовМаркировок
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	СостоянияКодовМаркировкиСрезПоследних.Период КАК Период,
		               |	СостоянияКодовМаркировкиСрезПоследних.Организация.ИНН КАК ИННОрганизации,
		               |	СостоянияКодовМаркировкиСрезПоследних.Номенклатура КАК Номенклатура,
		               |	СостоянияКодовМаркировкиСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |	ТаблицаМаркировок.КодМаркировки КАК КодМаркировки,
		               |	СостоянияКодовМаркировкиСрезПоследних.Состояние КАК Состояние
		               |ПОМЕСТИТЬ ТаблицаСостоянийКодовМаркировок
		               |ИЗ
		               |	ТаблицаМаркировок КАК ТаблицаМаркировок
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКодовМаркировки.СрезПоследних(
		               |				&МоментВремени,
		               |				(GTIN, СерийныйНомер) В
		               |					(ВЫБРАТЬ
		               |						ТаблицаМаркировок.GTIN КАК GTIN,
		               |						ТаблицаМаркировок.СерийныйНомер КАК СерийныйНомер
		               |					ИЗ
		               |						ТаблицаМаркировок КАК ТаблицаМаркировок)) КАК СостоянияКодовМаркировкиСрезПоследних
		               |		ПО ТаблицаМаркировок.GTIN = СостоянияКодовМаркировкиСрезПоследних.GTIN
		               |			И ТаблицаМаркировок.СерийныйНомер = СостоянияКодовМаркировкиСрезПоследних.СерийныйНомер
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТаблицаСостоянийКодовМаркировок.КодМаркировки КАК КодМаркировки,
		               |	МАКСИМУМ(ТаблицаСостоянийКодовМаркировок.Период) КАК Период
		               |ПОМЕСТИТЬ ТаблицаПоследнегоПериода
		               |ИЗ
		               |	ТаблицаСостоянийКодовМаркировок КАК ТаблицаСостоянийКодовМаркировок
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ТаблицаСостоянийКодовМаркировок.КодМаркировки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТаблицаСостоянийКодовМаркировок.ИННОрганизации КАК ИННОрганизации,
		               |	ТаблицаСостоянийКодовМаркировок.Номенклатура КАК Номенклатура,
		               |	ТаблицаСостоянийКодовМаркировок.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |	ТаблицаСостоянийКодовМаркировок.КодМаркировки КАК КодМаркировки,
		               |	ТаблицаСостоянийКодовМаркировок.Состояние КАК Состояние
		               |ИЗ
		               |	ТаблицаСостоянийКодовМаркировок КАК ТаблицаСостоянийКодовМаркировок
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПоследнегоПериода КАК ТаблицаПоследнегоПериода
		               |		ПО ТаблицаСостоянийКодовМаркировок.Период = ТаблицаПоследнегоПериода.Период
		               |			И ТаблицаСостоянийКодовМаркировок.КодМаркировки = ТаблицаПоследнегоПериода.КодМаркировки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	МаркировкаТоваровВПроизводствеОстатки.ЗаказНаряд КАК ЗаказНаряд,
		               |	МаркировкаТоваровВПроизводствеОстатки.Номенклатура КАК Номенклатура,
		               |	МаркировкаТоваровВПроизводствеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |	МаркировкаТоваровВПроизводствеОстатки.КоличествоОстаток КАК КоличествоОстаток,
		               |	ТаблицаМаркировок.КодМаркировки КАК КодМаркировки
		               |ИЗ
		               |	РегистрНакопления.МаркировкаТоваровВПроизводстве.Остатки(
		               |			&МоментВремени,
		               |			(GTIN, СерийныйНомер) В
		               |				(ВЫБРАТЬ
		               |					ТаблицаМаркировок.GTIN КАК GTIN,
		               |					ТаблицаМаркировок.СерийныйНомер КАК СерийныйНомер
		               |				ИЗ
		               |					ТаблицаМаркировок КАК ТаблицаМаркировок)) КАК МаркировкаТоваровВПроизводствеОстатки
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМаркировок КАК ТаблицаМаркировок
		               |		ПО МаркировкаТоваровВПроизводствеОстатки.GTIN = ТаблицаМаркировок.GTIN
		               |			И МаркировкаТоваровВПроизводствеОстатки.СерийныйНомер = ТаблицаМаркировок.СерийныйНомер";
		Запрос.УстановитьПараметр("МоментВремени", Новый Граница(МоментВремени(), ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("Документ", Ссылка);
		Запрос.УстановитьПараметр("КодыМаркировки", КодыМаркировки.ВыгрузитьКолонку("КодМаркировки"));
		Запрос.УстановитьПараметр("СписокКодовМаркировок", ТаблицаРазбораМаркировки);
		
		ПакетЗапросов = Запрос.ВыполнитьПакет();
		
		Выборка = ПакетЗапросов[3].Выбрать();
		
		ИННОрганизации = Организация.ИНН;
		Пока Выборка.Следующий() Цикл
			Если ИННОрганизации <> Выборка.ИННОрганизации Тогда
				ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(Выборка.Номенклатура);
				// Если осуществляется снятие резерва, снятие резерва не должно превышать остаток резерва
				Если НЕ ЗначениеЗаполнено(Выборка.ХарактеристикаНоменклатуры) Тогда
					ТекстОшибки = СтрШаблон(
						НСтр("ru = '[%1] Товар <%2> с маркировкой <%3> принадлежит другой организации.'"),
						ЗначениеКолонкиКода,
						СокрЛП(Выборка.Номенклатура),
						СокрЛП(Выборка.КодМаркировки)
					);
				Иначе
					ТекстОшибки = СтрШаблон(
						НСтр("ru = '[%1] Товар <%2> с характеристикой <%3> с маркировкой <%4> принадлежит другой организации.'"),
						ЗначениеКолонкиКода,
						СокрЛП(Выборка.ХарактеристикаНоменклатуры),
						СокрЛП(Выборка.Номенклатура),
						СокрЛП(Выборка.КодМаркировки)
					);
				КонецЕсли;
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, , , Отказ);
			ИначеЕсли СписокСостоянийВводаВОборот.Найти(Выборка.Состояние) = Неопределено Тогда
				ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(Выборка.Номенклатура);
				// Если осуществляется снятие резерва, снятие резерва не должно превышать остаток резерва
				Если НЕ ЗначениеЗаполнено(Выборка.ХарактеристикаНоменклатуры) Тогда
					ТекстОшибки = СтрШаблон(
						НСтр("ru = '[%1] Товар <%2> с маркировкой <%3> не был введен в оборот или был выведен из оборота ранее.'"),
						ЗначениеКолонкиКода,
						СокрЛП(Выборка.Номенклатура),
						СокрЛП(Выборка.КодМаркировки)
					);
				Иначе
					ТекстОшибки = СтрШаблон(
						НСтр(
							"ru = '[%1] Товар <%2> с характеристикой <%3> с маркировкой <%4> не был введен в оборот или был выведен из оборота ранее.'"
						),
						ЗначениеКолонкиКода,
						СокрЛП(Выборка.Номенклатура),
						СокрЛП(Выборка.ХарактеристикаНоменклатуры),
						СокрЛП(Выборка.КодМаркировки)
					);
				КонецЕсли;
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, , , Отказ);
			КонецЕсли;
		КонецЦикла;
		
		Выборка = ПакетЗапросов[4].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.КоличествоОстаток > 0 Тогда
				ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(Выборка.Номенклатура);
				Если НЕ ЗначениеЗаполнено(Выборка.ХарактеристикаНоменклатуры) Тогда
					ТекстОшибки = СтрШаблон(
						НСтр("ru = '[%1] Товар <%2> с маркировкой <%3> ранее перемещен в производство для заказ-наряда <%4>.'"),
						ЗначениеКолонкиКода,
						СокрЛП(Выборка.Номенклатура),
						СокрЛП(Выборка.КодМаркировки),
						СокрЛП(Выборка.ЗаказНаряд)
					);
				Иначе
					ТекстОшибки = СтрШаблон(
						НСтр(
							"ru = '[%1] Товар <%2> с характеристикой <%3> с маркировкой <%4> ранее перемещен в производство для заказ-наряда <%5>.'"
						),
						ЗначениеКолонкиКода,
						СокрЛП(Выборка.Номенклатура),
						СокрЛП(Выборка.ХарактеристикаНоменклатуры),
						СокрЛП(Выборка.КодМаркировки),
						СокрЛП(Выборка.ЗаказНаряд)
					);
				КонецЕсли;
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, , , Отказ);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ТекстОшибки = УправлениеДиалогомДокументаСервер.ПроверитьКорректностьЗаполненияТелефонEmail(ТелефонEmailПокупателя);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ТелефонEmailПокупателя", , Отказ);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	// Заблокируем проведение чека, если ХО = отложенный чек
	Если ХозОперация=Справочники.ХозОперации.ЧекОтложенный И РежимЗаписи=РежимЗаписиДокумента.Проведение Тогда
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	Если БонусныеПрограммыСервер.ДисконтнаяКартаЗаблокирована(Карточка)
		И (ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ПроверятьБлокировкуКарты", Ложь)
		ИЛИ КоличествоКНачислению = 0) Тогда
		КоличествоКНачислению = 0;
	Иначе
		БонусныеПрограммыСервер.РассчитатьБонусныеБаллыКНачислению(ЭтотОбъект, Карточка.БонуснаяПрограмма);
	КонецЕсли;
	
	// Очистим результаты проверки кодов маркировки
	МаркировкаТоваровСервер.ОчиститьДанныеПроверкиКодовМаркировки(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Удалим введенные в оборот коды маркировки
	НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
	НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейСостоянияКодовМаркировки.ОтменаПроведения();
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Чеки, попавшие в архив движения не выполняют
	Если Архивный Тогда
		ОбработкаУдаленияПроведения(Отказ);
		Возврат;
	КонецЕсли;
	
	Отказ = ОбработкаСобытийДокументаСервер.СравнитьСебестоимостьИЦену(ЭтотОбъект, Отказ, РежимПроведения) ИЛИ Отказ; 
	
	// определим способ ведения баланса
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(Дата);
	
	// проведем остатки товаров
	НаборЗаписейОстатки=Движения.ОстаткиТоваровКомпании;
	НаборЗаписейОстатки.РежимПроведения=РежимПроведения;
	НаборЗаписейОстатки.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейОстатки.РезультатЗапросаПоТоварам=Неопределено;
	НаборЗаписейОстатки.СкладКомпании=Неопределено;
	НаборЗаписейОстатки.Приходовать=Истина;
	НаборЗаписейОстатки.ПоБазовомуКоличеству=Ложь;
	НаборЗаписейОстатки.Резервировать=Ложь;
	НаборЗаписейОстатки.ИмяРеквизитаЦенаРозничная  = "Цена";
	НаборЗаписейОстатки.ИмяРеквизитаСуммаРозничная = "СуммаВсего";
	НаборЗаписейОстатки.ДвиженияПоРознице=Истина;
	НаборЗаписейОстатки.РазрешитьПереоценку = НЕ (ХозОперация = Справочники.ХозОперации.ЧекНаВозврат);
	НаборЗаписейОстатки.СписыватьРозницуПоОстаткам=Истина;
	Если (ХозОперация=Справочники.ХозОперации.Чек) Тогда
		Отказ=НЕ НаборЗаписейОстатки.Расход() ИЛИ Отказ;
	Иначе
		Отказ=НЕ НаборЗаписейОстатки.Приход() ИЛИ Отказ;
	КонецЕсли;
	
	СуммаОплатыПоКассе =0;
	
	Для Каждого СтрокаОплаты Из Оплаты Цикл
		
		Если СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные ИЛИ СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
			
			Если (ХозОперация=Справочники.ХозОперации.Чек) Тогда
				СуммаОплатыПоКассе = СуммаОплатыПоКассе+СтрокаОплаты.Сумма-СтрокаОплаты.Сдача;
			Иначе
				СуммаОплатыПоКассе = СуммаОплатыПоКассе-(СтрокаОплаты.Сумма-СтрокаОплаты.Сдача);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если используем подключаемой оборудование проведем деньги по кассе ККМ
	Если Константы.ИспользоватьПодключаемоеОборудование.Получить() Тогда
		
		НаборЗаписейКассыККМ=Движения.КассыККМ;
		
		Для Каждого СтрокаОплаты Из Оплаты Цикл
			
			НаборЗаписейКассыККМ.ДокументОбъект 	= ЭтотОбъект;
			НаборЗаписейКассыККМ.РежимПроведения 	= РежимПроведения;
			НаборЗаписейКассыККМ.КассаККМ 			= КассаККМ;
			НаборЗаписейКассыККМ.ТипОплаты 			= СтрокаОплаты.ТипОплаты;
			Если (ХозОперация=Справочники.ХозОперации.Чек) Тогда
				НаборЗаписейКассыККМ.Сумма 			= СтрокаОплаты.Сумма-СтрокаОплаты.Сдача;
			Иначе
				НаборЗаписейКассыККМ.Сумма			= -(СтрокаОплаты.Сумма-СтрокаОплаты.Сдача);
			КонецЕсли;
			Отказ=НЕ НаборЗаписейКассыККМ.Приход() ИЛИ Отказ;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// подготовим таблицу движений в разрезе подразделений по взаиморасчетам
	ТаблицаВзаиморасчетов = Новый ТаблицаЗначений();
	ТаблицаВзаиморасчетов.Колонки.Добавить("Сумма");
	ОписаниеТипов=Новый ОписаниеТипов;
	ОписаниеТипов.Типы().Добавить(Тип("СправочникСсылка.ПодразделенияКомпании"));
	ТаблицаВзаиморасчетов.Колонки.Добавить("Подразделение",ОписаниеТипов);
		
	// Проведем сумму выручки по доходам и расходам
	
	ТаблицаВзаиморасчетов.Свернуть("Подразделение","Сумма");
	// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
	Если ВедетсяБалансПоПодразделению Тогда
		Для Каждого СтрокаСписания Из ТаблицаВзаиморасчетов Цикл
			НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.Подразделение=СтрокаСписания.Подразделение;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.НачислениеДебиторскойЗадолженностиПоТовару;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте=Ложь;
			НаборЗаписейДоходыИРасходы.Доход=СтрокаСписания.Сумма;	
			Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		КонецЦикла;
	Иначе
		НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.НачислениеДебиторскойЗадолженностиПоТовару;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте=Ложь;
		НаборЗаписейДоходыИРасходы.Доход=ТаблицаВзаиморасчетов.Итог("Сумма");
		Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
	КонецЕсли;
	
	Если СуммаОплатыПоКассе<>0 Тогда
		НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
		// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
		Если ВедетсяБалансПоПодразделению Тогда
			НаборЗаписейДоходыИРасходы.Подразделение=КассаККМ.ПодразделениеКомпании;
		КонецЕсли;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте=(ВалютаДокумента=Константы.ВалютаУправленческогоУчетаКомпании.Получить());
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.Выручка;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте=Ложь;
		НаборЗаписейДоходыИРасходы.Доход=СуммаОплатыПоКассе;
		Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ОбработкаПроведенияНакопленияПоКарточкамКонтрагентов();
	КонецЕсли;
		
	// Зафиксируем наличную оплату
	НаборЗаписейНаличныеРасчеты=Движения.НаличныеРасчеты;
	НаборЗаписейНаличныеРасчеты.ДокументОбъект 	= ЭтотОбъект;
	НаборЗаписейНаличныеРасчеты.РежимПроведения = РежимПроведения;
	НаборЗаписейНаличныеРасчеты.РежимРасходаСредств = (ХозОперация = Справочники.ХозОперации.ЧекНаВозврат);
	Отказ = НЕ НаборЗаписейНаличныеРасчеты.Приход() ИЛИ Отказ;
	
	Если НЕ Отказ Тогда
		
		ЭтоВозврат = (ХозОперация = Справочники.ХозОперации.ЧекНаВозврат);
		СостояниеКодаМаркировки = ?(ЭтоВозврат,
			Перечисления.СостоянияКодовМаркировки.ВведенВОборотПриВозврате,
			Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаРозничнаяПродажа);
		
		// Изменим состояние маркировки
		НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
		НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейСостоянияКодовМаркировки.Организация = Организация;
		НаборЗаписейСостоянияКодовМаркировки.ПроверятьВыводИзОборота = НЕ ЭтоВозврат;
		НаборЗаписейСостоянияКодовМаркировки.Состояние = СостояниеКодаМаркировки;
		НаборЗаписейСостоянияКодовМаркировки.РежимПроведения = РежимПроведения;
		Если НЕ НаборЗаписейСостоянияКодовМаркировки.СостояниеКодовМаркировки() Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;

	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	// бонусные баллы
	Если ХозОперация = Справочники.ХозОперации.Чек Тогда
		НаборБонусныеПрограммы = Движения.БонусныеБаллы;
		Если КоличествоКНачислению > 0 Тогда
			НаборБонусныеПрограммы.Карта             = Карточка;
			НаборБонусныеПрограммы.БонуснаяПрограмма = Карточка.БонуснаяПрограмма;
			НаборБонусныеПрограммы.ХозОперация       = ХозОперация;
			НаборБонусныеПрограммы.КоличествоБаллов  = КоличествоКНачислению;
			НаборБонусныеПрограммы.Регистратор       = Ссылка;
			НаборБонусныеПрограммы.ДокДата           = Дата;
			
			Отказ = НЕ НаборБонусныеПрограммы.Приход() ИЛИ Отказ;
		КонецЕсли;
		
		Если КоличествоКСписанию > 0 Тогда
			МаксимальноеКоличествоБаллов = БонусныеПрограммыСервер.МаксимальноеКоличествоБаллов(ЭтотОбъект, Карточка.БонуснаяПрограмма);
			Если КоличествоКСписанию > МаксимальноеКоличествоБаллов Тогда
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Максимальное количество бонусных баллов доступных к оплате %1 меньше указанных %2.'"),
						МаксимальноеКоличествоБаллов,
						КоличествоКСписанию
					),
					ЭтотОбъект,,, Отказ
				);
			КонецЕсли;
			
			НаборБонусныеПрограммы.Карта = Карточка;
			НаборБонусныеПрограммы.БонуснаяПрограмма = Карточка.БонуснаяПрограмма;
			НаборБонусныеПрограммы.ХозОперация       = ХозОперация;
			НаборБонусныеПрограммы.КоличествоБаллов  = КоличествоКСписанию;
			НаборБонусныеПрограммы.Регистратор       = Ссылка;
			НаборБонусныеПрограммы.ДокДата           = Дата;
			
			Отказ = НЕ НаборБонусныеПрограммы.Расход() ИЛИ Отказ;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Чек"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Чек(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Очищаем считанную маркировку ранее
	КодыМаркировки.Очистить();
	
	// Определяем хоз.операцию нового документа
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.Чек Тогда
		ХозОперация	= Справочники.ХозОперации.ЧекНаВозврат;
		СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
		Для каждого СтрокаТабличнойЧасти Из Оплаты Цикл
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.Сдача;
			СтрокаТабличнойЧасти.Сдача = 0;
		КонецЦикла;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_Чек()

#КонецОбласти

#Область ФормированиеДвиженийДокумента

Процедура ОбработкаПроведенияНакопленияПоКарточкамКонтрагентов()
	
	Если НЕ ЗначениеЗаполнено(Карточка) ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекТовары.Ссылка.Контрагент,
	|	ЧекТовары.Ссылка.Карточка,
	|	ЧекТовары.Ссылка.Дата       КАК ПериодНакопления,
	|	СУММА(ЧекТовары.Количество) КАК КоличествоНоменклатуры,
	|	СУММА(ЧекТовары.СуммаВсего) КАК Сумма,
	|	СУММА(0) КАК КоличествоЧеков
	|ИЗ
	|	Документ.Чек.Товары КАК ЧекТовары
	|ГДЕ
	|	ЧекТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекТовары.Ссылка.Дата,
	|	ЧекТовары.Ссылка.Карточка,
	|	ЧекТовары.Ссылка.Контрагент";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	НаборНакоплениеСумм = Движения.НакопленияПоКарточкамКонтрагентов;
	НаборНакоплениеСумм.ДокументСсылка   = Ссылка;
	НаборНакоплениеСумм.РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	НаборНакоплениеСумм.ВыполнитьДвижения();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
