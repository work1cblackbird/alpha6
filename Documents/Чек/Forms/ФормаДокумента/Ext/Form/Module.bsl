
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// ПодключаемоеОборудование
	ТипыОборудования = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
	ТипыОборудования.СканерШтрихкода = Истина;
	ТипыОборудования.СчитывательМагнитныхКарт = Истина;
	МенеджерОборудования.ПриСозданииНаСервере(ЭтаФорма, ТипыОборудования);
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	ЗапретРедактированияРеквизитовОбъектовАльфаАвто.ЗаблокироватьФискальныеРеквизиты(ЭтотОбъект);
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ОграничитьВыборКонтактныхЛиц(Элементы.Контрагент);
	РаботаСФормой.НастроитьОтображениеСИспользованиемБазовогоКоличества(Элементы.ТоварыКоличество);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	
	РазрешитьРедактированиеЦенИСумм = ПраваИНастройкиПользователя.Значение("РедактированиеЦенИСуммВНоменклатурныхТаблицах", Объект);
	РаботаСФормой.РазрешитьРедактированиеЦенИСумм(
		РаботаСФормой.ТиповыеПоляСуммовыхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм
	);
	
	СпособВыбораСкидки = ПраваИНастройкиПользователя.Значение("СпособВыбораСкидки", Объект);
	РаботаСФормой.РазрешитьРедактированиеСкидок(
		РаботаСФормой.ТиповыеПоляСкидочныхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм,
		СпособВыбораСкидки
	);
	
	ОписаниеНовойКолонкиПроизводитель = РаботаСФормой.ОписаниеНовойКолонкиПроизводитель();
	ОписаниеНовойКолонкиПроизводитель.ТабличнаяЧасть = Элементы.Товары;
	ОписаниеНовойКолонкиПроизводитель.ПоставитьПеред = Элементы.ТоварыАртикул;
	НоваяКолонкаПроизводитель = РаботаСФормой.НоваяКолонкаПроизводитель(ЭтотОбъект, ОписаниеНовойКолонкиПроизводитель);
	
	КолонкиКодАртикулИПроизводитель = Новый Структура();
	КолонкиКодАртикулИПроизводитель.Вставить("Код", Элементы.ТоварыКод);
	КолонкиКодАртикулИПроизводитель.Вставить("Артикул", Элементы.ТоварыАртикул);
	КолонкиКодАртикулИПроизводитель.Вставить("Производитель", НоваяКолонкаПроизводитель);
	РаботаСФормой.НастроитьВидимостьКолонокКодАртикулИПроизводитель(КолонкиКодАртикулИПроизводитель);
	РаботаСФормой.ОткрытьФормуТолькоДляПросмотра(ЭтотОбъект, Объект);
	
	ПроверкаСоответствияКодовМаркировкиПроводилась = Ложь;
	
	ОбновитьКонтактнуюИнформацию(НЕ ЗначениеЗаполнено(Объект.Ссылка));
	
	// Дальнейшие операции выполняются только для новых объектов
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
		РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
		НастроитьПараметрыВыбораЭлементовФормы();
		СформироватьСписокВыбораАдресПокупателя();
		
		// Маркировка
		МаркировкаТоваровСервер.ПриСозданииЧтенииНаСервере(ЭтотОбъект, Объект);
		МаркировкаТоваровСервер.ИнициализироватьСлужебныеРеквизиты(ЭтотОбъект);
		// Конец Маркировка
		
		УправлениеДиалогомНаСервере();		
	КонецЕсли;
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);
	Если Элементы.ТоварыОстатокНаСкладе.Видимость Тогда
		РаботаСФормой.ОтобразитьОстаткиТоваровНаСкладе(Объект, Элементы.ТоварыОстатокНаСкладе);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		Возврат;
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// Штрихкодирование
	ШтрихкодированиеКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец Штрихкодирование
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	
	// Маркировка
	МаркировкаТоваровСервер.ПриСозданииЧтенииНаСервере(ЭтотОбъект, Объект);
	МаркировкаТоваровСервер.ИнициализироватьСлужебныеРеквизиты(ЭтотОбъект);
	// Конец Маркировка
	
	СформироватьСписокВыбораАдресПокупателя();
	ОбновитьРеквизитыРезультатаПроверкиКМ();
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("Чек", ПараметрыЗаписи.РежимЗаписи,
		Объект.Товары.Количество() > 50);
		
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И ТекущийОбъект.СуммаДокумента > (ТекущийОбъект.Оплаты.Итог("Сумма")-ТекущийОбъект.Оплаты.Итог("Сдача")) 
		И ПраваИНастройкиПользователя.Значение("ПогашатьЧекЦеликом") Тогда
		
		Если ТекущийОбъект.Оплаты.Количество()=0 Тогда
			НоваяСтрока = ТекущийОбъект.Оплаты.Добавить();
			НоваяСтрока.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные;
			НоваяСтрока.Сумма     = ТекущийОбъект.СуммаДокумента - (ТекущийОбъект.Оплаты.Итог("Сумма")-ТекущийОбъект.Оплаты.Итог("Сдача"));
		Иначе
			СтрокаНаличных = ТекущийОбъект.Оплаты.Найти(Перечисления.ТипыОплатыККТ.Наличные, "ТипОплаты");
			
			Если ЗначениеЗаполнено(СтрокаНаличных) Тогда
				СтрокаНаличных.Сумма = СтрокаНаличных.Сумма + (ТекущийОбъект.СуммаДокумента - (ТекущийОбъект.Оплаты.Итог("Сумма")-ТекущийОбъект.Оплаты.Итог("Сдача")));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьКэшПроверокКодовМаркировки();
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПроверятьБлокировкуКарты", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПроверкаСоответствияКодовМаркировкиПроводилась Тогда
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("ЕстьРазличияСостоянийКМ", Истина);
		УспешнаяПроверкаКМ = (Объект.Товары.НайтиСтроки(СтруктураПоиска).Количество() = 0);
		
		// Маркировка
		МаркировкаТоваровСервер.ЗафиксироватьРезультатПроверкиКодовМаркировки(
			ТекущийОбъект,
			ДатаПроверкиКМ,
			АвторПроверкиКМ,
			УспешнаяПроверкаКМ
		);
		// Конец Маркировка
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	ЗапретРедактированияРеквизитовОбъектовАльфаАвто.ЗаблокироватьФискальныеРеквизиты(ЭтотОбъект);
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	
	// Маркировка
	МаркировкаТоваровСервер.ЗаполнитьСлужебныйРеквизитКодыМаркировки(Объект);
	МаркировкаТоваровСервер.ИнициализироватьСлужебныеРеквизиты(ЭтотОбъект);
	// Конец Маркировка
	
	ОбновитьРеквизитыРезультатаПроверкиКМ();
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	Если Элементы.ТоварыОстатокНаСкладе.Видимость Тогда
		РаботаСФормой.ОтобразитьОстаткиТоваровНаСкладе(Объект, Элементы.ТоварыОстатокНаСкладе);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);
	РаботаСФормойКлиент.ОбновитьПодчиненныеСчета(Объект.Ссылка, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Чек.ДатаПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Чек.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура СкладКомпанииПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Чек.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладКомпанииПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	СкладКомпанииПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Чек.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();
	
	Объект.АдресПокупателя = "";
	СформироватьСписокВыбораАдресПокупателя(Истина);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	КонтрагентПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	ОбновитьКонтактнуюИнформацию();
	
КонецПроцедуры

&НаСервере
Процедура КассаККМПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Чек.КассаККМПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	КассаККМПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура КарточкаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Чек.КарточкаПриИзменении(Объект, ПараметрыДействия);  
	
	Объект.АдресПокупателя = "";
	СформироватьСписокВыбораАдресПокупателя(Истина);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КарточкаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	КарточкаПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ФРПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ФРПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ФРПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура СуммаДокументаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Чек.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	ОбновитьИндикаторыСостоянияОплаты();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныйРеквизитЧекаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("РежимВыбора", Истина);
	ОткрытьФорму(
		"РегистрСведений.ФискальныеОперации.ФормаСписка",
		ПараметрыФормы,
		Элемент,
		, , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура КарточкаРасширеннаяПодсказкаНажатие(Элемент)
	
	Если ДисконтнаяКартаЗаблокирована() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Дисконтная карта заблокирована.'"),, НСтр("ru = 'Дисконтная карта контрагента'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Объект",                Объект);
	ПараметрыФормы.Вставить("Карточка",              Объект.Карточка);
	ПараметрыФормы.Вставить("Дата",                  Объект.Дата);
	ПараметрыФормы.Вставить("КоличествоКНачислению", Объект.КоличествоКНачислению);
	ПараметрыФормы.Вставить("КоличествоКСписанию",   Объект.КоличествоКСписанию);
	
	ОбработкаОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаИзмененияКоличестваКСписанию", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ФормаДанныхОБонуснойПрограмме", ПараметрыФормы, ЭтотОбъект,,,, ОбработкаОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяПСНПриИзменении(Элемент)
	ПараметрыДействия = Новый Структура;
	ИспользуетсяПСНПриИзмененииНаСервере(ПараметрыДействия);    
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);

КонецПроцедуры

&НаСервере
Процедура ИспользуетсяПСНПриИзмененииНаСервере(ПараметрыДействия)
	Элементы.Патент.Доступность = ИспользуетсяПСН; 
	Если НЕ ИспользуетсяПСН Тогда
		Объект.Патент = Справочники.Патенты.ПустаяСсылка();
	Иначе
		ОбработкаРеквизитовДокументаСервер.УстановитьПатентПоОрганизации(Объект); 
	КонецЕсли; 
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ТелефонEmailПокупателяПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонEmailПокупателяПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ТелефонEmailПокупателяПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОплаты

&НаКлиенте
Процедура ОплатыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.Оплаты.ТекущиеДанные.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные");
		Элементы.Оплаты.ТекущиеДанные.Сумма     = Объект.СуммаДокумента - (Объект.Оплаты.Итог("Сумма") - Объект.Оплаты.Итог("Сдача"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОплатыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	СуммаДокументаПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыПриИзменении(Элемент)
	
	ОплатыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОплатыПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)
	
	СуммаДокументаПриИзмененииНаСервере(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыПослеУдаления(Элемент)
	
	УправлениеДиалогомКлиентСервер.УстановитьПризнакНеобходимостиЭТ(Объект);
	ОплатыПослеУдаленияНаСервере();
	
КонецПроцедуры

#Область ОбработчикиСобытийПолейТаблицыФормыОплаты

&НаСервере
Процедура ОплатыТипОплатыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Оплаты.НайтиПоИдентификатору(Элементы.Оплаты.ТекущаяСтрока);
	Документы.Чек.ОплатыТипОплатыПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыТипОплатыПриИзменении(Элемент)
	
	ОплатыТипОплатыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОплатыСуммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Оплаты.НайтиПоИдентификатору(Элементы.Оплаты.ТекущаяСтрока);
	Документы.ЧекНаОплату.ОплатыСуммаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыСуммаПриИзменении(Элемент)
	
	ОплатыСуммаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОплатыДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Оплаты.НайтиПоИдентификатору(Элементы.Оплаты.ТекущаяСтрока);
	Документы.Чек.ОплатыДоговорВзаиморасчетовПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыДоговорВзаиморасчетовПриИзменении(Элемент)
	
	ОплатыДоговорВзаиморасчетовПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	УправлениеДиалогомДокументаКлиент.ТоварыПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа, Параметр);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	УправлениеДиалогомДокументаКлиент.ТоварыПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	УправлениеДиалогомДокументаКлиент.ТоварыПередУдалением(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	РассчитатьИтоговыеСуммы(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ТоварыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Маркировка
	МаркировкаТоваровКлиент.ОткрытьСписокКодовМаркировки(
		ЭтотОбъект,
		ВыбраннаяСтрока,
		Поле,
		СтандартнаяОбработка
	);
	// Конец Маркировка
	
	СкидкиНаценкиКлиент.ОбработкаВыбора(ЭтотОбъект, Поле, ВыбраннаяСтрока, Объект.БлокироватьПерерасчетСкидок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Копирование Тогда
		ТекущиеДанные.СуммаСкидкиБонусами = 0;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторТовара) ИЛИ Копирование Тогда
		ТекущиеДанные.ИдентификаторТовара = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеДиалогомДокументаКлиент.ТоварыПриОкончанииРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомДокументаСервер.ТоварыПослеУдаления(ЭтотОбъект, Элементы.Товары, ПараметрыДействия);
	ПерерасчетСуммыСкидкиБонусами();
	РассчитатьИтоговыеСуммы(ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ТоварыПослеУдаленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	УправлениеДиалогомДокументаКлиент.ТоварыПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле);
	
КонецПроцедуры

#Область ОбработчикиСобытийПолейТаблицыФормыТовары

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Чек.ТоварыНоменклатураПриИзменении(Объект, ТекущиеДанные,ПараметрыДействия);
	УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТоварыНоменклатураПриИзмененииНаСервере();
	Если НЕ ТекущиеДанные = Неопределено Тогда
		// Маркировка
		МаркировкаТоваровКлиент.НачатьСканированиеМаркировки(Объект, ТекущиеДанные, ЭтотОбъект);
		// Конец Маркировка
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущиеДанные.Номенклатура);
	
	УправлениеДиалогомДокументаКлиент.ТоварыНоменклатураНачалоВыбора(
		ЭтотОбъект,
		Элемент,
		ДанныеВыбора,
		ВыборДобавлением,
		СтандартнаяОбработка,
		ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Чек.ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, ТекущиеДанные,ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ТоварыХарактеристикаНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Чек.ТоварыЕдиницаИзмеренияПриИзменении(Объект, ТекущиеДанные,ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТоварыЕдиницаИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Чек.ТоварыКоличествоПриИзменении(Объект, ТекущиеДанные,ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТоварыКоличествоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыЦенаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Чек.ТоварыЦенаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТоварыЦенаПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСуммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Чек.ТоварыСуммаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТоварыСуммаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Чек.ТоварыСуммаВсегоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВсегоПриИзменении(Элемент)
	
	ТоварыСуммаВсегоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Чек.ТоварыСтавкаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТоварыСтавкаНДСПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСуммаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Чек.ТоварыСуммаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТоварыСуммаНДСПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыМестоРазмещенияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Чек.ТоварыМестоРазмещенияПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыМестоРазмещенияПриИзменении(Элемент)
	
	ТоварыМестоРазмещенияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПроцентСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Чек.ТоварыПроцентСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиПриИзменении(Элемент)
	
	ТоварыПроцентСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Чек.ТоварыСуммаСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	
	ТоварыСуммаСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПроцентСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Чек.ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Элемент)
	
	ТоварыПроцентСкидкиСтрокиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.Чек.ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Элемент)

	ТоварыСуммаСкидкиСтрокиПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ТоварыСкидкаНаТоварПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока); 
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Ложь;
	ТекущиеДанные.СкидкаСтрокиИзменена = Истина;
	Документы.Чек.ТоварыСкидкаНаТоварПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкидкаНаТоварПриИзменении(Элемент)

	ТоварыСкидкаНаТоварПриИзмененииНаСервере();

КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)
	
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПробитьЧек(Команда)
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("БезТоварногоСостава",ЛОЖЬ);
	ПараметрыДействия.Вставить("НеНуженЭТ",Не Объект.ОтправлятьКомандуНаЭТ);
	ПараметрыДействия.Вставить("ОткрыватьФормуПроверкиМаркировкиККТ",
	Объект.КодыМаркировки.Количество() > 0
		И ОборудованиеЧекопечатающиеУстройстваВызовСервера.ФискальноеУстройствоПоддерживаетПроверкуКодовМаркировки(
			Объект.ФР));
			
	СегодняшняяДата = ПолучитьДатуНаНачалоДня();   
	ПараметрыДействия.Вставить("СегодняшняяДата", СегодняшняяДата);
	
	УправлениеДиалогомДокументаКлиент.ПробитьЧек(ЭтотОбъект,ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеККМ(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ФР", Объект.ФР);
	
	ОткрытьФорму(
		"ОбщаяФорма.УправлениеФискальнымУстройством",
		ПараметрыФормы,
		ЭтотОбъект
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплату(Команда)
	
	ПараметрыОплаты = Новый Структура();

	Если Команда.Имя="ОплатаНаличные" Тогда
		ПараметрыОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные"));
	ИначеЕсли Команда.Имя="ОплатаПлатежнаяКарта" Тогда   
		ПараметрыОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно"));
		ОсновнойТипПлатежнойКарты(ПараметрыОплаты);
	КонецЕсли; 

	НайденныеСтроки = Объект.Оплаты.НайтиСтроки(ПараметрыОплаты);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Элементы.Оплаты.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		Если НЕ ТолькоПросмотр Тогда
			Элементы.Оплаты.ИзменитьСтроку();
		КонецЕсли;
	Иначе
		Элементы.Оплаты.ДобавитьСтроку();
		ЗаполнитьЗначенияСвойств(Элементы.Оплаты.ТекущиеДанные, ПараметрыОплаты);
	КонецЕсли;
	
	Элементы.Оплаты.ТекущийЭлемент = Элементы.Оплаты.ПодчиненныеЭлементы.ОплатыСумма;

	ОбновитьИндикаторыСостоянияОплаты();
	УправлениеДиалогомКлиентСервер.УстановитьПризнакНеобходимостиЭТ(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	ПараметрыДействия = Новый Структура();
	ПараметрыДействия.Вставить("НеРассчитыватьБонусы", Истина);
	
	УправлениеДиалогомКлиент.ОткрытьПодборНоменклатуры(ЭтотОбъект,,,,, ПараметрыДействия);
	
КонецПроцедуры

// Маркировка
&НаКлиенте
Процедура ЗапроситьСтатусыКодовМаркировки(Команда)
	
	ИмяДействия = "ОтправкаЗапросаНаПолучениеТекущихСтатусовМаркировки";
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Действие", ИмяДействия);
	ДополнительныеПараметры.Вставить("КодыМаркировки", ЗаполнитьКодыМаркировкиДляПроверки());
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	ДополнительныеПараметры.Вставить("НеТребуетсяКлючСессии", Ложь);
	ДополнительныеПараметры.Вставить(
		"РазрешенныеСостояния",
		МаркировкаТоваровКлиент.РазрешенныеСостояния(
			Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЧекНаВозврат")));
	ОбработчикОповещения = Новый ОписаниеОповещения("ПолучитьЗапросЗавершение", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ОбработкаРезультата", ОбработчикОповещения);
	
	МаркировкаТоваровКлиент.ОтправитьПолучитьЗапрос(ЭтотОбъект, Объект, ДополнительныеПараметры);
	
КонецПроцедуры
// Конец Маркировка

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьДатуНаНачалоДня()
	
	Возврат НачалоДня(ТекущаяДатаСеанса());
	
КонецФункции

&НаСервере
Процедура ОбновитьИндикаторыСостоянияОплаты()
	
	СуммаОплачено = Объект.Оплаты.Итог("Сумма");
	СуммаСдача    = Объект.Оплаты.Итог("Сдача");
	СуммаДоплатить = Объект.СуммаДокумента - (СуммаОплачено - СуммаСдача);
	СуммаПереплата = (СуммаОплачено - СуммаСдача) - Объект.СуммаДокумента;
	
	Если СуммаОплачено > 0 Тогда
		Если СуммаДоплатить > 0 Тогда
			Элементы.НадписьСуммаСдача    .Видимость = ЛОЖЬ;
			Элементы.НадписьСуммаДоплатить.Видимость = ИСТИНА;
			Элементы.НадписьСуммаПереплата.Видимость = ЛОЖЬ;
		ИначеЕсли СуммаПереплата > 0 Тогда
			Элементы.НадписьСуммаСдача    .Видимость = ЛОЖЬ;
			Элементы.НадписьСуммаДоплатить.Видимость = ЛОЖЬ;
			Элементы.НадписьСуммаПереплата.Видимость = ИСТИНА;
		Иначе
			Элементы.НадписьСуммаСдача    .Видимость = ИСТИНА;
			Элементы.НадписьСуммаДоплатить.Видимость = ЛОЖЬ;
			Элементы.НадписьСуммаПереплата.Видимость = ЛОЖЬ;
		КонецЕсли;
	Иначе
		Элементы.НадписьСуммаСдача    .Видимость = ИСТИНА;
		Элементы.НадписьСуммаДоплатить.Видимость = ЛОЖЬ;
		Элементы.НадписьСуммаПереплата.Видимость = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОсновнойТипПлатежнойКарты(ПараметрыОплаты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТипыПлатежныхКарт.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ТипыПлатежныхКарт КАК ТипыПлатежныхКарт
		|ГДЕ
		|	ТипыПлатежныхКарт.Основной = ИСТИНА";  
	
	РезультатЗапроса = Запрос.Выполнить();  
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();  
		Выборка.Следующий();
		ПараметрыОплаты.Вставить("ТипПлатежнойКарты", Выборка.Ссылка);
		
	КонецЕсли;

КонецПроцедуры
	
&НаСервере
Процедура РассчитатьИтоговыеСуммы(ПараметрыДействия = Неопределено)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат;
	КонецЕсли;
	
	ИтогиОперации = Документы.Чек.РассчитатьИтогиОперации(Объект);
	
	Если НЕ Объект.СуммаДокумента=ИтогиОперации.СуммаДокумента Тогда
		Объект.СуммаДокумента = ИтогиОперации.СуммаДокумента;
		СуммаДокументаПриИзмененииНаСервере(ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаИзмененияКоличестваКСписанию(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.КоличествоКСписанию <> Результат Тогда
		Объект.КоличествоКСписанию = Результат;
		Модифицированность = Истина;
		ПерерасчетСуммыСкидкиБонусами();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерерасчетСуммыСкидкиБонусами()
	
	Документы.РеализацияТоваров.ПерерасчетСуммыСкидкиБонусами(Объект);
	Документы.Чек.РассчитатьСуммуСкидкиНаценки(Объект);
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(ЭтотОбъект);
	СформироватьПредставлениеБонусныхБаллах();
	
КонецПроцедуры 

&НаСервере
Процедура СформироватьПредставлениеБонусныхБаллах()
	
	Элементы.Карточка.РасширеннаяПодсказка.Заголовок   = "Бонусы: "+Строка(Объект.КоличествоКСписанию)+" / "+Строка(Объект.КоличествоКНачислению);
	
КонецПроцедуры

&НаСервере
Функция ДисконтнаяКартаЗаблокирована()
	
	Возврат БонусныеПрограммыСервер.ДисконтнаяКартаЗаблокирована(Объект.Карточка);
	
КонецФункции

&НаСервере
Функция ПодборСвязанныхРаботЗавершениеНаСервере(СвязанныеПозиции)
	
	ПараметрыДействия = СвязанныеРаботы.ЗаполнитьСвязаннымиРаботами(СвязанныеПозиции, Объект, ЭтотОбъект);
	
	ПерерасчетСуммыСкидкиБонусами();
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
	Возврат ПараметрыДействия;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПодборСвязанныхРаботЗавершение(СвязанныеРаботы, Постобработка=Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СвязанныеРаботы) Тогда
		ПараметрыДействия = ПодборСвязанныхРаботЗавершениеНаСервере(СвязанныеРаботы);
	КонецЕсли;
	
	СвязанныеРаботыКлиент.Постобработка(Постобработка);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

// Маркировка
&НаКлиенте
Процедура Подключаемый_СканированиеМаркировкиЗавершение(КодМаркировки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если КодМаркировки <> Неопределено Тогда
		ИдентификаторТовара = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ИдентификаторТовара", "");
		
		Если ИдентификаторТовара <> "" Тогда
			НоваяСтрока = Объект.КодыМаркировки.Добавить();
			НоваяСтрока.ИдентификаторТовара = ИдентификаторТовара;
			НоваяСтрока.КодМаркировки = КодМаркировки;
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура;
	ОбработкаРезультатаОповещенияНаСервере(Результат, "РазрешенияДляПересчета");
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		СвязанныеРаботыКлиент.НачатьПодборСвязанныхРабот(Объект, ТекущиеДанные, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолучитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаСоответствияКодовМаркировкиПроводилась = Истина;
	
	ДатаПроверкиКМ = ОбщегоНазначенияКлиент.ДатаСеанса();
	АвторПроверкиКМ = ПользователиКлиент.ТекущийПользователь();
	
	ЗаполнитьРеквизитыРезультатаПроверкиКМ(Результат.Данные.КодыМаркировки, Истина);
	
КонецПроцедуры
// Конец Маркировка

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЗаполнениеОбъектов
&НаКлиенте
Процедура ПослеОбработкиЗаполнения(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОчисткаТабличнойЧасти")
		И ПолучитьЗначениеПараметраСтруктуры(ДополнительныеПараметры, "ИмяТабличнойЧасти") = "Оплаты" Тогда
		УправлениеДиалогомКлиентСервер.УстановитьПризнакНеобходимостиЭТ(Объект);
	КонецЕсли;
	
	ПослеОбработкиЗаполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиЗаполненияНаСервере()
	
	ЗаполнениеОбъектовАльфаАвто.ПослеОбработкиЗаполнения(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ЗаполнениеОбъектов

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
//@skip-warning
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
    ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСуммаДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.ПоказатьРасширенныеИтогиОперации(ЭтотОбъект, Элемент);
	
КонецПроцедуры
// Конец Ядро

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	УправлениеДиалогомДокументаСервер.УстановитьДоступностьСпособаЗачатаАвансов(ЭтотОбъект,Объект,"Оплаты");
	
	Для Каждого Строка Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(Строка.Набор) Тогда
			Элементы.ТоварыНабор.Видимость = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.Карточка.ТолькоПросмотр = НЕ (ПраваИНастройкиПользователя.Значение("РазрешитьРучнойВыборКарточки", Объект));
	Элементы.ФормаПробитьЧек.Доступность = НЕ ЗначениеЗаполнено(Объект.ДатаФР) И НЕ ТолькоПросмотр;
	
	ОбновитьИндикаторыСостоянияОплаты();
	СформироватьПредставлениеБонусныхБаллах();
	Элементы.Карточка.ОтображениеПодсказки = ?(ЗначениеЗаполнено(Объект.Карточка.БонуснаяПрограмма),
		ОтображениеПодсказки.ОтображатьСнизу,
		ОтображениеПодсказки.Нет
	);
	
	ФормаСобственности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ФормаСобственности");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АдресПокупателя",
		"ТолькоПросмотр",
		НЕ (ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо
		ИЛИ ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель)
	);
	
	// Установим видимость картинки с проверкой кодов маркировки через ККТ
	Элементы.ТоварыКартинкаПроверкиМаркировкиККТ.Видимость = 
		Объект.КодыМаркировки.Количество() > 0
		И ЗначениеЗаполнено(Объект.ФР)
		И ОборудованиеЧекопечатающиеУстройстваВызовСервера.ФискальноеУстройствоПоддерживаетПроверкуКодовМаркировки(Объект.ФР);
	
	СпособВыбораСкидки = ПравоПользователя("СпособВыбораСкидки", Объект);
	ДоступныСкидки = СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидки
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.АвтоматическиеИРучныеСкидки
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов;
	ДоступноРедактированиеСкидок = СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыПроцентСкидки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСуммаСкидки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСкидкаНаТовар",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступныСкидки
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыПроцентСкидкиСтроки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСуммаСкидкиСтроки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	
	УправлениеДиалогомДокументаСервер.УстановитьИнформациюПечатиЧека(
		ЭтотОбъект,
		Объект.ФР,
		Объект.ТелефонEmailПокупателя,
		НЕ ЗначениеЗаполнено(Объект.ДатаФР)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОтправлятьКомандуНаЭТ",
		"ТолькоПросмотр",
		Не ПраваИНастройкиПользователя.Значение("РазрешитьРучнуюАвторизациюБезналичныхПлатежей")
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеРучногоСписанияХарактеристик(ЭтотОбъект);
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформлениеСуммыВсего(ЭтотОбъект);
	
	// Маркировка
	МаркировкаТоваровСервер.УстановитьУсловноеОформлениеКодыМаркировок(ЭтотОбъект);
	// Конец Маркировка
	
	СкидкиНаценкиСервер.УстановитьУсловноеОформление(
		ЭтотОбъект,
		СкидкиНаценкиСервер.ПараметрыУстановкиУсловногоОформления(ЭтотОбъект)
	);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры=Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если (ДополнительныеПараметры = "ПараметрыДокумента"
		И РезультатОповещения.ИзмененныеРеквизиты.Свойство("Дата"))
		ИЛИ ДополнительныеПараметры = "ПодборНоменклатуры" Тогда
		ПерерасчетСуммыСкидкиБонусами();
		РассчитатьИтоговыеСуммы();
	КонецЕсли;
	
	Если ДополнительныеПараметры = "РедактированиеКодовМаркировкиСтрокиТовара" Тогда
		ПроверкаСоответствияКодовМаркировкиПроводилась = Истина;
		Для Каждого Строка Из Объект.Товары Цикл
			ПроверкаСоответствияКодовМаркировкиПроводилась = ПроверкаСоответствияКодовМаркировкиПроводилась
				И Строка.ПроверкаСоответствияКодовМаркировкиПроводилась;
		КонецЦикла;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если НЕ УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ЗаполнитьКодыМаркировкиДляПроверки()
	
	Результат = Новый Массив;
	Для Каждого Строка Из Объект.Товары Цикл
		ПараметрыОтбора = Новый Структура("ИдентификаторТовара", Строка.ИдентификаторТовара);
		НайденныеСтроки = Объект.КодыМаркировки.НайтиСтроки(ПараметрыОтбора);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Результат.Добавить(НайденнаяСтрока.КодМаркировки);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьРеквизитыРезультатаПроверкиКМ()
	
	Если НЕ ЭтоАдресВременногоХранилища(КэшРезультатаПроверкиКодовМаркировки) Тогда
		Возврат;
	КонецЕсли;
	
	КэшКодыМаркировки = ПолучитьИзВременногоХранилища(КэшРезультатаПроверкиКодовМаркировки);
	ЗаполнитьРеквизитыРезультатаПроверкиКМ(КэшКодыМаркировки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыРезультатаПроверкиКМ(КодыМаркировки, ПроведенаПроверкаВсехКодов = Ложь)
	
	Для Каждого Строка Из КодыМаркировки Цикл
		ПараметрыОтбора = Новый Структура("КодМаркировки", Строка.КодМаркировки);
		НайденныеСтроки = Объект.КодыМаркировки.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СвойстваНеЗаполнять = "КодМаркировки";
		Если ЕстьРеквизит(Строка, "КодРезультатаПроверки") Тогда
			ПоляНеЗаполнять = Новый Массив;
			ПоляНеЗаполнять.Добавить("КодРезультатаПроверки");
			ПоляНеЗаполнять.Добавить("КодМаркировкиПроверен");
			ПоляНеЗаполнять.Добавить("КодОбработкиЗапроса");
			ПоляНеЗаполнять.Добавить("ПредставлениеРезультатаПроверки");
			ПоляНеЗаполнять.Добавить("РезультатПроверки");
			ПоляНеЗаполнять.Добавить("РезультатПроверкиОИСМ");
			ПоляНеЗаполнять.Добавить("СтатусТовара");
			ПоляНеЗаполнять.Добавить("ТекстОшибки");
			ПоляНеЗаполнять.Добавить("РезультатПроверкиРазрешительногоРежима");
			ПоляНеЗаполнять.Добавить("ТекстОшибкиПроверки");
			ПоляНеЗаполнять.Добавить("ЗначениеОтраслевогоРеквизита");
			СвойстваНеЗаполнять = СтрШаблон("%1,%2", СвойстваНеЗаполнять, СтрСоединить(ПоляНеЗаполнять, ","));
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(
			НайденныеСтроки[0],
			Строка, ,
			СвойстваНеЗаполнять);
		Если ПроведенаПроверкаВсехКодов Тогда
			НайденныеСтроки[0].ПроверкаСоответствияКодовМаркировкиПроводилась = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из Объект.Товары Цикл
		ПараметрыОтбора = Новый Структура("ИдентификаторТовара", Строка.ИдентификаторТовара);
		КодыМаркировкиСтроки = Объект.КодыМаркировки.НайтиСтроки(ПараметрыОтбора);
		ПроверкаПроводилась = Истина;
		Для Каждого Код Из КодыМаркировкиСтроки Цикл
			Строка.ЕстьРазличияСостоянийКМ = Строка.ЕстьРазличияСостоянийКМ ИЛИ НЕ Код.Соответствует;
			ПроверкаПроводилась = ПроверкаПроводилась И Код.ПроверкаСоответствияКодовМаркировкиПроводилась;
		КонецЦикла;
		Строка.ПроверкаСоответствияКодовМаркировкиПроводилась = ПроверкаПроводилась;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокВыбораАдресПокупателя(ЗаполнитьАдресПоУмолчанию = Ложь)
	
	Элементы.АдресПокупателя.СписокВыбора.Очистить();
	СписокАдресов = УправлениеДиалогомДокументаСервер.АдресаКонтрагента(
		Объект.Контрагент,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	Для Каждого Адрес Из СписокАдресов Цикл
		Элементы.АдресПокупателя.СписокВыбора.Добавить(Адрес);
	КонецЦикла;
	
	ФормаСобственности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ФормаСобственности");
	НуженАдрес = ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо
		ИЛИ ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель;

	Если НуженАдрес И ЗаполнитьАдресПоУмолчанию И СписокАдресов.Количество() > 0 Тогда
		Объект.АдресПокупателя = СписокАдресов[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьСтатусыКодовМаркировкиККТ(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия возможно только после записи данных.
			|Данные будут записаны.'"
		);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВыполнитьПодключаемуюКомандуПодтверждениеЗаписи",
			ЭтотОбъект
		);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	ЗапроситьСтатусыКодовМаркировкиККТПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодключаемуюКомандуПодтверждениеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		ОчиститьСообщения();
		
		Попытка
			Записать();
		Исключение
			ПричинаОшибки(ЭтотОбъект, РезультатВопроса, ДополнительныеПараметры);
		КонецПопытки;
		
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // Запись не удалась.
		КонецЕсли;
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗапроситьСтатусыКодовМаркировкиККТПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьСтатусыКодовМаркировкиККТПродолжение()
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Документ", Объект.Ссылка);
	
	Обработчик = Новый ОписаниеОповещения(
		"ЗапроситьСтатусыКодовМаркировкиККТОкончание",
		ЭтотОбъект
	);
		
	ОткрытьФорму(
		"ОбщаяФорма.ФормаСпискаМаркировокПроверкаККТ",
		ПараметрыОткрытия,
		ЭтотОбъект,
		, , ,
		Обработчик,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьСтатусыКодовМаркировкиККТОкончание(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	НеОбновлятьПроверкуКМ = Истина;
	Прочитать();
	ОбработкаРезультатаВыполненияДействия(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКэшПроверокКодовМаркировки()
	
	КэшРезультатаПроверкиКодовМаркировки = ПоместитьВоВременноеХранилище(
		Объект.КодыМаркировки.Выгрузить(),
		УникальныйИдентификатор
	);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(ОбновлятьКИ = Истина)
	
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		Объект.Контрагент,
		ЭтотОбъект,
		"Телефон,АдресЭлектроннойПочты",
		"ТелефонEmailПокупателя,ТелефонEmailПокупателя"
	);

	Если Не ОбновлятьКИ Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ТелефонEmailПокупателя.СписокВыбора.Количество() > 0 Тогда
		Объект.ТелефонEmailПокупателя = Элементы.ТелефонEmailПокупателя.СписокВыбора[0].Значение;
	Иначе
		Объект.ТелефонEmailПокупателя = "";
	КонецЕсли; 
	
КонецПроцедуры

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	                                                                                                                
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРеквизитыПечатиНажатие(Элемент)

	УправлениеПечатьюКлиентАльфаАвто.ОткрытьФормуРедактированияРеквизитовДоставки(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура Подключаемый_ШтрихкодированиеОбработкаОповещения(РезультатОповещения,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОповещения.Свойство("Действие") Тогда
		ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ШтрихкодированиеВызовСервера.ОбработкаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры, , Объект);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти