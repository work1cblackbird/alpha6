// Модуль документа "Реализация активов"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекСтрока Из Активы Цикл
		Документы.РеализацияАктивов.АктивыПрочийАктивПриИзменении(ЭтотОбъект, ТекСтрока, ДополнительныеСвойства.ПараметрыДействия);
	КонецЦикла;
	
	ИдентификаторГосударственногоКонтракта = ?(ЗначениеЗаполнено(ИдентификаторГосударственногоКонтракта),
		ИдентификаторГосударственногоКонтракта,
		ДоговорВзаиморасчетов.ИдентификаторГосударственногоКонтракта);
	
	РегистрыНакопления.АвтомобилиДляТестДрайва.ЗаполнитьВидАренды(ЭтотОбъект);
	
	ЗачетАвансов.Очистить();
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	ЗачетАвансов.Очистить();
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим корректность заполнения количества для активов c уникальными номерами
	ОбработкаТабличнойЧастиАктивы.ПроверитьКоличествоУникальныхНомеров(ЭтотОбъект, Отказ);
	Отказ = Отказ Или Справочники
		.ДоговорыВзаиморасчетов
		.НеКорректноЗаполненИдентификаторГосКонтракта(ЭтотОбъект, ИдентификаторГосударственногоКонтракта);
	
	// Проверим, что указано в качестве аванса не больше, чем сумма документа
	Если СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		
		СуммаАктивов = Активы.Итог("Сумма");
		ВалютаДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов");
		СуммаДокументаВВалютеДоговора = ?(
			ВалютаДокумента = ВалютаДоговора,
			СуммаАктивов,
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СуммаАктивов,
				ВалютаДокумента,
				КурсДокумента,
				ВалютаДоговора,
				КурсВалютыВзаиморасчетов));
		
		Если СуммаДокументаВВалютеДоговора < ЗачетАвансов.Итог("Сумма") Тогда
			
			Отказ = Истина;
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Сумма зачета оплаты превышает сумму активов.'"),
				ЭтотОбъект
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоУниверсальныйДокумент = ЭтоУниверсальныйДокумент
		И Документы.РеализацияАктивов.ВозможенВводСчетФактурыВыданной(ЭтотОбъект);
		
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Произведем перерасчет итоговой суммы документа
	ОбработкаСобытийДокументаСервер.ПересчитатьСуммуДокументаПоСебестоимостиСписания(ЭтотОбъект, Отказ, , , Истина);
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ТипСчетФактуры", "СчетФактураВыданный");
	ОбработкаСобытийДокументаСервер.УдалитьПодчиненныеСФ(ЭтотОбъект, ПараметрыДействия, Отказ);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапросаПоАктивам = ПолучитьРезультатЗапросаПоАктивам().Выгрузить().Скопировать();
	
	// получим шапку документа
	ШапкаДокумента=ПолучитьШапкуДокумента(Ссылка);
	
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	
	// 1) спишем из "Активов в эксплуатации"
	НаборЗаписейЭксплуатация = Движения.ПрочиеАктивыВЭксплуатации;
	НаборЗаписейЭксплуатация.ДокументОбъект            = ЭтотОбъект;
	НаборЗаписейЭксплуатация.ПодразделениеКомпании     = ПодразделениеКомпании;
	НаборЗаписейЭксплуатация.ЭтоВыбытие                = Истина;
	НаборЗаписейЭксплуатация.РезультатЗапросаПоАктивам = РезультатЗапросаПоАктивам;
	Отказ = НЕ НаборЗаписейЭксплуатация.Расход() ИЛИ Отказ;
	
	// Проведем по ТестДрайву
	НаборЗаписейТестДрайв = Движения.АвтомобилиДляТестДрайва;
	НаборЗаписейТестДрайв.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейТестДрайв.ПодразделениеКомпании = ПодразделениеКомпании;
	НаборЗаписейТестДрайв.РезультатЗапросаПоАвтомобилям = РезультатЗапросаПоАктивам;
	Отказ = НЕ НаборЗаписейТестДрайв.Расход() ИЛИ Отказ;
	
	// 2) проведем взаиморасчеты
	Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыКомпании; 
		НаборЗаписейВзаиморасчеты.ДокументОбъект        = ЭтотОбъект;
		НаборЗаписейВзаиморасчеты.ШапкаДокумента 		= ШапкаДокумента;	
		НаборЗаписейВзаиморасчеты.РежимПроведения       = РежимПроведения;
		НаборЗаписейВзаиморасчеты.Контрагент            = Контрагент;
		НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
		НаборЗаписейВзаиморасчеты.Сделка				= Неопределено;
		НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок	= СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		НаборЗаписейВзаиморасчеты.Сумма                 = РезультатЗапросаПоАктивам.Итог("Сумма");
		Отказ = НЕ НаборЗаписейВзаиморасчеты.Приход() ИЛИ Отказ;
	КонецЕсли;
	
	Документы.РеализацияАктивов.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	Документы.РеализацияАктивов.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	ДополнительныеСвойства.ДляПроведения.Удалить("ДанныеДокумента");
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	// 3) запишем ДиР
	ВУпрВалюте=(ВалютаДокумента=Константы.ВалютаУправленческогоУчетаКомпании.Получить());
	ИтогРасходПоРеализованнымАктивам = НаборЗаписейЭксплуатация.Итог("БалансоваяСтоимостьУпр") - НаборЗаписейЭксплуатация.Итог("СуммаАмортизацииУпр");
	Если СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		ИтогДоходПоРеализованнымАктивам =
			ДополнительныеСвойства.ТаблицыДвиженийДокумента.РасчетыСКонтрагентами.Итог("СуммаУпр");
	Иначе
		Если ВУпрВалюте Тогда
			ИтогДоходПоРеализованнымАктивам = РезультатЗапросаПоАктивам.Итог("Сумма");
		Иначе
			ИтогДоходПоРеализованнымАктивам =
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					РезультатЗапросаПоАктивам.Итог("Сумма"),
					ВалютаДокумента,
					КурсДокумента,
					Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
					?(НЕ ЗначениеЗаполнено(КурсВалютыУпр), Дата, КурсВалютыУпр));
		КонецЕсли; 
	КонецЕсли;
	
	Если Окр(УправлениеДиалогомСервер.ПолучитьМодульЧисла(ИтогРасходПоРеализованнымАктивам), 2, РежимОкругления.Окр15как20) >= 0.01 Тогда
		НаборЗаписейДиР = Движения.ДоходыИРасходы;
		НаборЗаписейДиР.ДокументОбъект			= ЭтотОбъект;
		НаборЗаписейДиР.ШапкаДокумента			= ШапкаДокумента;		
		НаборЗаписейДиР.СтатьяДоходовИРасходов	= Справочники.СтатьиДоходовИРасходов.СписаниеАктивов;
		НаборЗаписейДиР.ВУпрВалюте				= Истина;
		НаборЗаписейДиР.Расход = ИтогРасходПоРеализованнымАктивам;
		Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
	КонецЕсли;	
	
	Если Окр(УправлениеДиалогомСервер.ПолучитьМодульЧисла(ИтогДоходПоРеализованнымАктивам), 2, РежимОкругления.Окр15как20) >= 0.01 Тогда
		НаборЗаписейДиР = Движения.ДоходыИРасходы;
		НаборЗаписейДиР.ДокументОбъект			= ЭтотОбъект;
		НаборЗаписейДиР.ШапкаДокумента			= ШапкаДокумента;		
		НаборЗаписейДиР.СтатьяДоходовИРасходов	= Справочники.СтатьиДоходовИРасходов.СписаниеАктивов;
		НаборЗаписейДиР.ВУпрВалюте				= Истина;
		НаборЗаписейДиР.Доход  = ИтогДоходПоРеализованнымАктивам;
		Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
	КонецЕсли;
	
	// 5) запишем в продажи
	Если НЕ Отказ Тогда
		ЗапросПоСебестоимости = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДвиженияПрочиеАктивыВЭксплуатации.ПрочийАктив,
		|	ДвиженияПрочиеАктивыВЭксплуатации.БалансоваяСтоимость-ДвиженияПрочиеАктивыВЭксплуатации.СуммаАмортизации КАК Сумма,
		|	ДвиженияПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьУпр-ДвиженияПрочиеАктивыВЭксплуатации.СуммаАмортизацииУпр КАК СуммаУпр,
		|	ДвиженияПрочиеАктивыВЭксплуатации.Количество
		|ПОМЕСТИТЬ ДвиженияПрочиеАктивыВЭксплуатации
		|ИЗ
		|	&ДвиженияПрочиеАктивыВЭксплуатации КАК ДвиженияПрочиеАктивыВЭксплуатации
		|ИНДЕКСИРОВАТЬ ПО
		|	ПрочийАктив");
		ЗапросПоСебестоимости.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		ЗапросПоСебестоимости.УстановитьПараметр("ДвиженияПрочиеАктивыВЭксплуатации", Движения.ПрочиеАктивыВЭксплуатации.Выгрузить());
		ЗапросПоСебестоимости.Выполнить();
		// Получаем таблицу активов-автомобилей из списания партий по документу "Ввод в эксплуатацию" (нужно только для продаж)
		РезультатЗапросаПоАвтомобилям = ПолучитьРезультатЗапросаПоАвтомобилям(ЗапросПоСебестоимости);
		СписокАвтомобилей = РезультатЗапросаПоАвтомобилям.ВыгрузитьКолонку("ПрочийАктив");
		// Получаем таблицу товаров из списания партий по документу "Ввод в эксплуатацию" (нужно только для продаж).
		РезультатЗапросаПоТоварам = ПолучитьРезультатЗапросаПоТоварам(СписокАвтомобилей);
		Если РезультатЗапросаПоТоварам.Количество()>0 Тогда
			// Получаем таблицу активов с рассчитанной себестоимостью для приходования по регистру "Продажи".
			РезультатЗапросаПоПартиям = ПолучитьРезультатЗапросаПоПартиям(СписокАвтомобилей);
			
			НаборЗаписейПродажи = Движения.Продажи;
			НаборЗаписейПродажи.РежимПроведения = РежимПроведения;
			НаборЗаписейПродажи.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейПродажи.ШапкаДокумента = ШапкаДокумента;
			НаборЗаписейПродажи.ДокументПродажи = ШапкаДокумента.ДокументПродажи;
			НаборЗаписейПродажи.Сторно = Ложь;
			НаборЗаписейПродажи.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам.Скопировать();
			НаборЗаписейПродажи.РезультатЗапросаПоПартиям = РезультатЗапросаПоПартиям.Скопировать();
			НаборЗаписейПродажи.Покупатель            = Контрагент;
			НаборЗаписейПродажи.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
			НаборЗаписейПродажи.ПодразделениеКомпании = ПодразделениеКомпании;
			НаборЗаписейПродажи.Комиссия = Ложь;
			НаборЗаписейПродажи.ПоБазовомуКоличеству = Истина;
			НаборЗаписейПродажи.РасчетыСКонтрагентами = ДополнительныеСвойства.ТаблицыДвиженийДокумента.РасчетыСКонтрагентами;
			Отказ = НЕ НаборЗаписейПродажи.Приход() ИЛИ Отказ;
		КонецЕсли; 
	КонецЕсли;	
	
	// По автомобилям
	Если НЕ Отказ И РезультатЗапросаПоАвтомобилям.Количество()>0 Тогда
		НаборЗаписейПродажиАвтомобилей = Движения.ПродажиАвтомобилей;
		НаборЗаписейПродажиАвтомобилей.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейПродажиАвтомобилей.ДокументПродажи = Ссылка;
		НаборЗаписейПродажиАвтомобилей.Сторно = Ложь;
		НаборЗаписейПродажиАвтомобилей.РезультатЗапросаПоАвтомобилям = РезультатЗапросаПоАвтомобилям.Скопировать();
		НаборЗаписейПродажиАвтомобилей.Покупатель            = Контрагент;
		НаборЗаписейПродажиАвтомобилей.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
		НаборЗаписейПродажиАвтомобилей.ПодразделениеКомпании = ПодразделениеКомпании;
		НаборЗаписейПродажиАвтомобилей.Комиссия = Ложь;
		НаборЗаписейПродажиАвтомобилей.РасчетыСКонтрагентами =
			ДополнительныеСвойства.ТаблицыДвиженийДокумента.РасчетыСКонтрагентами;
		Отказ = НЕ НаборЗаписейПродажиАвтомобилей.Приход() ИЛИ Отказ;
	КонецЕсли;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	Если НЕ Отказ Тогда
		
		// Запишем историю владельцев автомобилей
		Для Каждого ТекСтрока Из РезультатЗапросаПоАвтомобилям Цикл
			
			Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(
				ТекСтрока.Автомобиль,
				Контрагент,
				Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин,
				Дата,
				Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.РеализацияАвтомобиля);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// двигаем границу последовательности взаиморасчетов
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	
	// Произведем перерасчет итоговой суммы документа
	ОбработкаСобытийДокументаСервер.ПересчитатьСуммуДокументаПоСебестоимостиСписания(ЭтотОбъект, Отказ, "ПрочиеАктивыВЭксплуатации");

	ПараметрыДействия = Новый Структура;
	ОбработкаСобытийДокументаСервер.СоздатьОбновитьСФВыданный(ЭтотОбъект, ДополнительныеСвойства, ПараметрыДействия, Отказ);
	
КонецПроцедуры // ОбработкаПроведения()

// Возвращает результат запроса по автомобилям, соответствующим активам табличной части
//
// Возвращаемое значение:
//  Возвращает результат запроса.
//
Функция ПолучитьРезультатЗапросаПоАвтомобилям(Запрос)
	
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияАктивовАктивы.ПрочийАктив КАК ПрочийАктив,
	|	РеализацияАктивовАктивы.Количество КАК Количество,
	|	РеализацияАктивовАктивы.Сумма КАК Сумма,
	|	РеализацияАктивовАктивы.СтавкаНДС КАК СтавкаНДС,
	|	РеализацияАктивовАктивы.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ РеализацияАктивовАктивы
	|ИЗ
	|	Документ.РеализацияАктивов.Активы КАК РеализацияАктивовАктивы
	|ГДЕ
	|	РеализацияАктивовАктивы.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	ПрочийАктив
	|;
	|ВЫБРАТЬ
	|	ВводВЭксплуатациюАвтомобилейАвтомобили.Автомобиль КАК Автомобиль,
	|	РеализацияАктивовАктивы.ПрочийАктив КАК ПрочийАктив,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры,
	|	ЗНАЧЕНИЕ(Справочник.СкладыКомпании.ПустаяСсылка) КАК СкладКомпании,
	|	ЗНАЧЕНИЕ(Документ.ПоступлениеАвтомобилей.ПустаяСсылка) КАК ДокументПоставки,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Поставщик,
	|	0 КАК ВидДвижения,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварКупленный) КАК СтатусПартии,
	|	РеализацияАктивовАктивы.СтавкаНДС КАК СтавкаНДС,
	|	РеализацияАктивовАктивы.Сумма КАК Сумма,
	|	0 КАК СуммаУпр,
	|	РеализацияАктивовАктивы.СуммаНДС КАК СуммаНДС,
	|	0 КАК СуммаСкидки,
	|	РеализацияАктивовАктивы.Количество КАК Количество,
	|	ЕСТЬNULL(ДвиженияВЭксплуатации.СуммаУпр, 0) КАК Себестоимость,
    |	0 КАК СебестоимостьКомплектация,
    |	ЕСТЬNULL(ДвиженияВЭксплуатации.Сумма, 0) КАК СебестоимостьРегл,
    |	0 КАК СебестоимостьКомплектацияРегл,
	|	0 КАК СуммаНДСВходящий,
	|	0 КАК СуммаНДСВходящийКомплектация
	|
	|ИЗ
	|	РеализацияАктивовАктивы КАК РеализацияАктивовАктивы
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводВЭксплуатациюАвтомобилей.Автомобили КАК ВводВЭксплуатациюАвтомобилейАвтомобили
	|	ПО РеализацияАктивовАктивы.ПрочийАктив = ВводВЭксплуатациюАвтомобилейАвтомобили.Актив
	|ЛЕВОЕ СОЕДИНЕНИЕ ДвиженияПрочиеАктивыВЭксплуатации КАК ДвиженияВЭксплуатации
	|	ПО РеализацияАктивовАктивы.ПрочийАктив = ДвиженияВЭксплуатации.ПрочийАктив";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьРезультатЗапросаПоАвтомобилям()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает результат запроса по товарам, соответствующим активам табличной части
//
// Возвращаемое значение:
//  Возвращает результат запроса.
//
Функция ПолучитьРезультатЗапросаПоТоварам(СписокАвтомобилей)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РеализацияАктивовАктивы.ПрочийАктив.Номенклатура КАК Номенклатура,
	               |	РеализацияАктивовАктивы.ПрочийАктив.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	               |	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры,
				   |	ЗНАЧЕНИЕ(Справочник.СкладыКомпании.ПустаяСсылка) КАК СкладКомпании,
				   |	ЗНАЧЕНИЕ(Документ.ПоступлениеТоваров.ПустаяСсылка) КАК Партия,
	               |	0 КАК ВидДвижения,
	               |	ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварКупленный) КАК СтатусПартии,
	               |	РеализацияАктивовАктивы.СтавкаНДС КАК СтавкаНДС,
	               |	РеализацияАктивовАктивы.Сумма КАК Сумма,
	               |	0 КАК СуммаУпр,
	               |	0 КАК СуммаНДСУпр,
	               |	РеализацияАктивовАктивы.СуммаНДС КАК СуммаНДС,
	               |	0 КАК СуммаСкидки,
	               |	РеализацияАктивовАктивы.Количество
	               |ИЗ
	               |	Документ.РеализацияАктивов.Активы КАК РеализацияАктивовАктивы
	               |ГДЕ
	               |	РеализацияАктивовАктивы.Ссылка = &Ссылка
				   |	"+?(СписокАвтомобилей=Неопределено,"","И НЕ РеализацияАктивовАктивы.ПрочийАктив В (&СписокАвтомобилей)")+"
				   |";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("СписокАвтомобилей", СписокАвтомобилей);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции // ПолучитьРезультатЗапросаПоТоварам()

// сформирует свой результат запроса по активам
//
// Возвращаемое значение:
//  Возвращает результат запроса.
//
Функция ПолучитьРезультатЗапросаПоАктивам()
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РеализацияАктивовАктивы.ПрочийАктив КАК Актив,
	               |	РеализацияАктивовАктивы.Сумма КАК Сумма,
	               |	РеализацияАктивовАктивы.Количество КАК Количество,
	               |	РеализацияАктивовАктивы.ВидАренды КАК ВидАренды
	               |ИЗ
	               |	Документ.РеализацияАктивов.Активы КАК РеализацияАктивовАктивы
	               |ГДЕ
	               |	РеализацияАктивовАктивы.Ссылка = &Ссылка";

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();
КонецФункции // ПолучитьРезультатЗапросаПоАктивам()

// Возвращает результат запроса по партиям,соответствующим активам табличной части
//
// Возвращаемое значение:
//  Возвращает результат запроса.
//
Функция ПолучитьРезультатЗапросаПоПартиям(СписокАвтомобилей)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РеализацияАктивовАктивы.ПрочийАктив КАК ПрочийАктив,
	               |	РеализацияАктивовАктивы.Количество
	               |ПОМЕСТИТЬ РеализацияАктивовАктивы
	               |ИЗ
	               |	Документ.РеализацияАктивов.Активы КАК РеализацияАктивовАктивы
	               |ГДЕ
	               |	РеализацияАктивовАктивы.Ссылка = &Ссылка
				   |	"+?(СписокАвтомобилей=Неопределено,"","И НЕ РеализацияАктивовАктивы.ПрочийАктив В (&СписокАвтомобилей)")+"
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ПрочийАктив
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПрочиеАктивыВЭксплуатации.ПрочийАктив.Номенклатура КАК Номенклатура,
				   |	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры,
				   |	ЗНАЧЕНИЕ(Справочник.СкладыКомпании.ПустаяСсылка) КАК СкладКомпании,
				   |	ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварКупленный) КАК СтатусПартии,
				   |	ЗНАЧЕНИЕ(Документ.ПоступлениеТоваров.ПустаяСсылка) КАК Партия,
	               |	ВЫБОР
	               |		КОГДА ПрочиеАктивыВЭксплуатации.КоличествоОстаток = РеализацияАктивовАктивы.Количество
	               |			ТОГДА ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьОстаток - ПрочиеАктивыВЭксплуатации.СуммаАмортизацииОстаток
	               |		КОГДА ПрочиеАктивыВЭксплуатации.КоличествоОстаток<>0 
				   |			ТОГДА ((ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьОстаток - ПрочиеАктивыВЭксплуатации.СуммаАмортизацииОстаток) / ПрочиеАктивыВЭксплуатации.КоличествоОстаток) * РеализацияАктивовАктивы.Количество
				   |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Сумма,
	               |	ВЫБОР
	               |		КОГДА ПрочиеАктивыВЭксплуатации.КоличествоОстаток = РеализацияАктивовАктивы.Количество
	               |			ТОГДА ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьУпрОстаток - ПрочиеАктивыВЭксплуатации.СуммаАмортизацииУпрОстаток
	               |		КОГДА ПрочиеАктивыВЭксплуатации.КоличествоОстаток<>0
				   |			ТОГДА ((ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьУпрОстаток - ПрочиеАктивыВЭксплуатации.СуммаАмортизацииУпрОстаток) / ПрочиеАктивыВЭксплуатации.КоличествоОстаток) * РеализацияАктивовАктивы.Количество
				   |		ИНАЧЕ 0
	               |	КОНЕЦ КАК СуммаУпр,
	               |	0 КАК ВидДвижения,
	               |	0 КАК СуммаНДС,
	               |	0 КАК СуммаНДСУпр,
	               |	РеализацияАктивовАктивы.Количество
	               |ИЗ
	               |	РеализацияАктивовАктивы КАК РеализацияАктивовАктивы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПрочиеАктивыВЭксплуатации.Остатки(
	               |				&Момент,
	               |				ПрочийАктив В
	               |					(ВЫБРАТЬ
	               |						РеализацияАктивовАктивы.ПрочийАктив
	               |					ИЗ
	               |						РеализацияАктивовАктивы)) КАК ПрочиеАктивыВЭксплуатации
	               |		ПО РеализацияАктивовАктивы.ПрочийАктив = ПрочиеАктивыВЭксплуатации.ПрочийАктив";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Момент", МоментВремени());
	Запрос.УстановитьПараметр("СписокАвтомобилей", СписокАвтомобилей);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции // ПолучитьРезультатЗапросаПоПартиям()

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Ввод в эксплуатацию"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВводВЭксплуатацию(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент            = Справочники.Контрагенты.ПустаяСсылка();
	ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	ПодразделениеКомпании = ДанныеЗаполнения.ПодразделениеПолучатель;
	Организация           = ПодразделениеКомпании.Организация;
	
	// идем по строкам и реквизитам табличной части и заполняем соответствующие
	Для Каждого СтрокаОснования Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрока = Активы.Добавить();
		НоваяСтрока.ПрочийАктив = СтрокаОснования.Актив;
		НоваяСтрока.Количество  = СтрокаОснования.Количество;
		Документы.РеализацияАктивов.АктивыПрочийАктивПриИзменении(ЭтотОбъект, НоваяСтрока, ДополнительныеСвойства.ПараметрыДействия);
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ВводВЭксплуатацию()

// Производит заполнение объекта на основании документа "Ввод остатков прочих активов".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВводОстатковПрочихАктивов(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Контрагент            = Справочники.Контрагенты.ПустаяСсылка();
	ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ВводОстатковПрочихАктивов()

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// формирует движения документа по партионным регистрам
//
// Параметры:
//  Режим           - режим проведения (оперативный/неоперативный)
//  ДокументСсылка  - ссылка на документ который надо допровести по партиям.
//
// Возвращаемое значение:
//  Возвращает Истина - все ОК, ложь - чего-то не так.
//
Функция ПровестиПоПартиям(Режим,ДокументСсылка=Неопределено) Экспорт
	Отказ=Ложь;
	Возврат НЕ Отказ;
КонецФункции // ПровестиПоПартиям()

// возвращает выборку по шапке
//
// Параметры:
//  ДокументСсылка - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Выборка - выборка по шапке
//
Функция ПолучитьШапкуДокумента(ДокументСсылка)
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	/////////// ПРИВАТ ////////////	
	|	Док.Ссылка КАК ДокументПродажи,
	|	Док.Контрагент КАК Контрагент,
	|	Док.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Док.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ."+Метаданные().Имя+" КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции // ПолучитьШапкуДокумента()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
