// Модуль менеджера документа "Реализация активов"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ОбработчикиОбновления

// Выполняет перенос свойств в реквизиты объекта
// Руководитель, ГлавныйБухгалтер,Отустил, ОтпустилКонтрагент, Получил, ПолучилКонтрагент
//
Процедура ВыполнитьПереносПодписантовИзСвойств() Экспорт 
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();
	МассивПереносимыхСвойств = УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства);

	ПеренесеныВсеСвойства = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияАктивовДополнительныеРеквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияАктивов.ДополнительныеРеквизиты КАК РеализацияАктивовДополнительныеРеквизиты
	|ГДЕ
	|	РеализацияАктивовДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", МассивПереносимыхСвойств);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();  
	
	Пока Выборка.Следующий() Цикл  
		
		СвойстваКУдалению = Новый Массив();
		
		НачатьТранзакцию(); 
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.РеализацияАктивов");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();  
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗначенияСвойств = ДокументОбъект.ДополнительныеРеквизиты.Выгрузить();
			
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда 
				
				СвойствоРуководитель = ЗначенияСвойств.Найти(ПереносимыеСвойства.Руководитель,"Свойство");
				
				Если СвойствоРуководитель <> Неопределено Тогда
					
					ДокументОбъект.Руководитель = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоРуководитель.Значение,
						Выборка.Ссылка
					);
					
					Если ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоРуководитель.Свойство);
						
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтОрганизации) Тогда 
					
					ДокументОбъект.Руководитель = ДокументОбъект.ПодписантОтОрганизации
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда	
				
				СвойствоГлавныйБухгалтер = ЗначенияСвойств.Найти(ПереносимыеСвойства.ГлавныйБухгалтер,"Свойство");
				
				Если СвойствоГлавныйБухгалтер <> Неопределено Тогда
					
					ДокументОбъект.ГлавныйБухгалтер = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоГлавныйБухгалтер.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоГлавныйБухгалтер.Свойство); 
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда	
				
				СвойствоОтпустил = ЗначенияСвойств.Найти(ПереносимыеСвойства.Отпустил,"Свойство");
				
				Если СвойствоОтпустил <> Неопределено Тогда
					
					ДокументОбъект.Отпустил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоОтпустил.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоОтпустил.Свойство);
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда	
				
				СвойствоПолучилКонтрагент = ЗначенияСвойств.Найти(ПереносимыеСвойства.ПолучилКонтрагент,"Свойство");
				
				Если СвойствоПолучилКонтрагент <> Неопределено Тогда
					
					ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоПолучилКонтрагент.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоПолучилКонтрагент.Свойство);
						
					КонецЕсли; 
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтКонтрагента) Тогда 
					
					ДокументОбъект.Получил = ДокументОбъект.ПодписантОтКонтрагента
					
				КонецЕсли;
				
			КонецЕсли; 

			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
				
				СвойствоДоверенность = ЗначенияСвойств.Найти(ПереносимыеСвойства.Доверенность,"Свойство");
				
				Если СвойствоДоверенность <> Неопределено Тогда

					Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
							СвойствоДоверенность.Значение.Владелец,
							Выборка.Ссылка,
							СвойствоДоверенность.Значение
						);
						
						Если ЗначениеЗаполнено(ДокументОбъект.Получил)  И значениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство);
							
						КонецЕсли; 
						
					ИначеЕсли ДокументОбъект.Получил.Подписант = СвойствоДоверенность.Значение.Владелец
						И  НЕ ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
						
						ПолучилОбъект = ДокументОбъект.Получил.ПолучитьОбъект();
						ПолучилОбъект.Основание = СвойствоДоверенность.Значение;  
						
						Попытка	
							ПолучилОбъект.Записать(); 
						Исключение	
						КонецПопытки;
						
						Если ЗначениеЗаполнено(ПолучилОбъект.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство); 
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СвойстваКУдалению.Количество()>0 Тогда  
				
				Для Каждого Элемент Из СвойстваКУдалению Цикл 
					
					Строка = ДокументОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
					Если Строка <> Неопределено Тогда 
						
						ДокументОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение 
			
			ОтменитьТранзакцию();
			ПеренесеныВсеСвойства = Ложь;
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления списка подписантов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
		
	КонецЦикла; 
	
	Если ПеренесеныВсеСвойства Тогда
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Набор
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка.ИмяПредопределенныхДанных = ""Документ_РеализацияАктивов""";
		
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();	
			
			Пока Выборка.Следующий() Цикл
				
				Попытка	
					НаборОбъект = Выборка.Набор.ПолучитьОбъект();
					
					Для Каждого Элемент Из МассивПереносимыхСвойств Цикл 
					
						Строка = НаборОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
						Если Строка <> Неопределено Тогда 
						
							НаборОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
						КонецЕсли;
					
					КонецЦикла;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборОбъект);
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось обработать справочник: ""НаборыДополнительныхРеквизитовИСведений"" по причине:
							|%1'"), 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений, "НаборыДополнительныхРеквизитовИСведений", ТекстСообщения);
				КонецПопытки;	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

// Выполяет проверку выполнения отложенного обработчика обновления ВыполнитьПереносПодписантовИзСвойств
//
// Параметры:
//  Параметры - Структура - параметры выполнения операции
//
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ПроверитьПереносПодписантовИзСвойств (Параметры) Экспорт
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияАктивовДополнительныеРеквизиты.Свойство КАК Свойство,
	|	РеализацияАктивовДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Документ.РеализацияАктивов.ДополнительныеРеквизиты КАК РеализацияАктивовДополнительныеРеквизиты
	|ГДЕ
	|	РеализацияАктивовДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)
	|	И РеализацияАктивовДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства));
	Запрос.УстановитьПараметр("Ссылка",				 Параметры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Вычислим сумму списания активов   
	СуммаДокументаИтог = ?(Объект.Проведен, Объект.СуммаДокумента, 0);
	СуммаДокумента = ?(ЕстьРеквизит(Объект, "СуммаСписания", "Активы"), 
					Объект.Активы.Итог("СуммаСписания"), СуммаДокументаИтог);
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", СуммаДокумента);
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	ИтогиОперации.Вставить("СуммаНДС", Объект.Активы.Итог("СуммаНДС"));
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	ОбязательныеРеквизиты.Добавить("СпособЗачетаАвансов");
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Активы");
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("Активы.ПрочийАктив");
	ОбязательныеРеквизиты.Добавить("Активы.Количество");
	
	Если Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ОбязательныеРеквизиты.Добавить("ЗачетАвансов");
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("ЗачетАвансов.ДокументАванса");
	ОбязательныеРеквизиты.Добавить("ЗачетАвансов.Сумма");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеАктивы = Новый Массив();
	УникальныеАктивы.Добавить("ПрочийАктив");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Активы", УникальныеАктивы);
	
	УникальныеЗачетАвансов = Новый Массив();
	УникальныеЗачетАвансов.Добавить("ДокументАванса");
	УникальныеРеквизиты.Вставить("ЗачетАвансов", УникальныеЗачетАвансов);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Активы.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаТабличнойЧастиАктивы.ВыполнитьПересчетТабличнойЧасти(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	// проставим ставку ндс для активов
	ОбработкаТабличнойЧастиАктивы.УстановитьСтавкуНДСПоАктивам(Объект);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
	// проставим ставку ндс для активов
	ОбработкаТабличнойЧастиАктивы.УстановитьСтавкуНДСПоАктивам(Объект);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Прочий актив" в таблице "Активы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АктивыПрочийАктивПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиАктивы.АктивПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Возможна ситуация когда при заполнении нет данного реквизита
	Если ЕстьРеквизит(Объект, "ОстаточнаяСтоимость", "Активы") Тогда
		Строка.Сумма = Строка.ОстаточнаяСтоимость;
	КонецЕсли;
	
	ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата);
	
	Если ПараметрыНДС.ОсвобожденОтНДС Тогда
		Строка.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
	Иначе
		Строка.СтавкаНДС = РаботаСоСтавкамиНДССервер.СтавкаНДСНоменклатуры(ПараметрыНДС, Строка.ПрочийАктив.Номенклатура);
		АктивыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЕсли;
	
	// Обновим информацию по виду аренды
	РегистрыНакопления.АвтомобилиДляТестДрайва.ЗаполнитьВидАрендыАвтомобиля(Объект, Строка);
	
КонецПроцедуры // АктивыПрочийАктивПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Активы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АктивыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиАктивы.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // АктивыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Активы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АктивыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиАктивы.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // АктивыСтавкаНДСПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт

	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Активы");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "РеализацияАктивов");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Активы");
	КонецЕсли; 
	
	ВыборПодразделения 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборПодразделения.ВыборСсылки 		= "Справочник.ПодразделенияКомпании.ФормаСписка";
	ВыборПодразделения.Обязательный 	= Истина;
	ВыборПодразделения.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать подразделение компании.'");

	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю 		= "АктивыПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Заполнить активами подразделения'");
	Команда.Идентификатор	= "АктивыЗаполнитьАктивамиПодразделения";
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Активы";
	Команда.Порядок			= 50;

	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ПодразделениеКомпании", ВыборПодразделения);  
	
	ВыборСтавки 					= ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборСтавки.ВыборСсылки 		= "Справочник.СтавкиНДС.ФормаСписка";
	ВыборСтавки.Обязательный 		= Истина;
	ВыборСтавки.ТекстОтменыВвода 	= НСтр("ru = 'Необходимо выбрать ставку НДС.'");
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения); 
	Команда.Подменю 		= "АктивыПодменюЗаполнения";
	Команда.Представление	= НСтр("ru = 'Изменить ставку НДС'"); 
	Команда.Идентификатор	= "АктивыЗаполнитьСтавкуНДС"; 
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Активы";
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением = Ложь;
	Команда.Порядок			= 51;
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("СтавкаНДС", ВыборСтавки);

	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзДокумента(
		КомандыЗаполнения,
		"Активы",
		Параметры
	);

КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("АктивыЗаполнитьАктивамиПодразделения.Видимость",    Истина);
	ПараметрыКоманд.Вставить("АктивыЗаполнитьАктивамиПодразделения.Доступность",  Истина);
	ПараметрыКоманд.Вставить("АктивыЗаполнитьСтавкуНДС.Видимость",				  Истина);
	ПараметрыКоманд.Вставить("АктивыЗаполнитьСтавкуНДС.Доступность",			  Истина);

	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Обработчик заполнения документа по заказам контрагенту.
//
Функция АктивыЗаполнитьАктивамиПодразделения(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Произведем корректировку значений реквизитов объекта в соответствии с параметрами заполнения.
	Если НЕ Объект.ПодразделениеКомпании = ПараметрыЗаполнения.ПодразделениеКомпании Тогда
		Объект.ПодразделениеКомпании = ПараметрыЗаполнения.ПодразделениеКомпании;
		ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("ИмяКоманды", "АктивыЗаполнитьАктивамиПодразделения");
	
	Результат = ЗаполнениеДокументовСервер.ЗаполнитьТабличнуюЧастьАктивами(Объект, ПараметрыЗаполнения);
	
	Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаАктив Из Результат Цикл
			НоваяСтрока = Объект.Активы.Добавить();
			НоваяСтрока.ПрочийАктив = СтрокаАктив.Актив;
			НоваяСтрока.Количество  = СтрокаАктив.Количество;
			АктивыПрочийАктивПриИзменении(Объект, НоваяСтрока, ПараметрыДействия);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // АктивыЗаполнитьАктивамиПодразделения()

// Обработчик перезаполнения ставки НДС документа 
//
Функция АктивыЗаполнитьСтавкуНДС(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект				= ПараметрыКоманды.Источник;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Объект.Активы) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не заполнена табличная часть'"), Ссылка);
	Иначе 
		НоваяСтавкаНДС = ПараметрыЗаполнения.СтавкаНДС;
		
		Для Каждого Строка Из Объект.Активы Цикл 
			СтавкаНДСНоменклатуры = Строка.ПрочийАктив.Номенклатура.СтавкаНДС;
			Если СтавкаНДСНоменклатуры = Справочники.СтавкиНДС.БезНДС И Строка.СтавкаНДС = СтавкаНДСНоменклатуры Тогда
				Продолжить;
			Иначе
				Строка.СтавкаНДС = НоваяСтавкаНДС; 
				АктивыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия); 
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции // ТоварыЗаполнитьСтавкуНДС()


#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.РеализацияАктивов",
		"ПФ_MXL_РеализацияАктивов",
		НСтр("ru = 'Реализация активов'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.РеализацияАктивов",
		"ПФ_MXL_М15",
		НСтр("ru = 'М15 (Накладная на отпуск материалов на сторону)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьУПД",
		"ПФ_MXL_УПД",
		НСтр("ru = 'Универсальный передаточный документ'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Ценники",
		НСтр("ru = 'Печать ценников'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати",
		,,,,
		Ложь);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Этикетки",
		НСтр("ru = 'Печать этикеток'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати",
		,,,,
		Ложь);
		
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_РеализацияАктивов") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_РеализацияАктивов",
															НСтр("ru = 'Реализация активов'"),
															ПечатьРеализацияАктивов(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_М15") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_М15",
															"М-15",
															ПечатьМ15(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
КонецПроцедуры // Печать()

// Формирует печатную форму "РеализацияАктивов".
// 
Функция ПечатьРеализацияАктивов(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияАктивов_РеализацияАктивов";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияАктивов.ПФ_MXL_РеализацияАктивов");
		
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// Дата документа
		ДатаДокумента = Документ.Дата;
		ДополнительныеПараметры = Новый Структура("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		
		// Вывод заголовка документа.
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ПредставлениеПодразделения = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			Документ.ПодразделениеКомпании, Документ.Дата);
		ОбластьЗаголовок.Параметры.ПредставлениеКонтрагента = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			Документ.Контрагент, Документ.Дата);
        
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);

		// Готовим шапку
		НомерСтраницы = 2;
		НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СтоимостьРеализации", Документ.ВалютаДокумента, 0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		Если Документ.Проведен Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РеализацияАктивовАктивы.НомерСтроки,
			|	ПрочиеАктивыВЭксплуатации.ПрочийАктив КАК ПрочийАктив,
			|	РеализацияАктивовАктивы.Сумма КАК СтоимостьРеализации,
			|	ВЫБОР
			|		КОГДА ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьУпр ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ ПрочиеАктивыВЭксплуатации.БалансоваяСтоимостьУпр * &МножительКурса
			|	КОНЕЦ - ВЫБОР
			|		КОГДА ПрочиеАктивыВЭксплуатации.СуммаАмортизацииУпр ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ ПрочиеАктивыВЭксплуатации.СуммаАмортизацииУпр * &МножительКурса
			|	КОНЕЦ КАК ОстаточнаяСтоимость
			|ИЗ
			|	Документ.РеализацияАктивов.Активы КАК РеализацияАктивовАктивы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПрочиеАктивыВЭксплуатации КАК ПрочиеАктивыВЭксплуатации
			|		ПО РеализацияАктивовАктивы.ПрочийАктив = ПрочиеАктивыВЭксплуатации.ПрочийАктив
			|ГДЕ
			|	ПрочиеАктивыВЭксплуатации.ВидДвижения = &ВидДвиженияНакопленияРасход
			|	И ПрочиеАктивыВЭксплуатации.Регистратор = &Ссылка
			|	И РеализацияАктивовАктивы.Ссылка = &Ссылка";
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
			Запрос.УстановитьПараметр("ВидДвиженияНакопленияРасход", ВидДвиженияНакопления.Расход);
			ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
			Если НЕ ЗначениеЗаполнено(Документ.КурсВалютыУпр) Тогда
				МножительКурса = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(1, ВалютаУправленческогоУчета,
					Документ.Дата, Документ.ВалютаДокумента, Документ.КурсДокумента);
			Иначе
				МножительКурса = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(1, ВалютаУправленческогоУчета,
					Документ.КурсВалютыУпр, Документ.ВалютаДокумента, Документ.КурсДокумента);
			КонецЕсли;
			Запрос.УстановитьПараметр("МножительКурса", МножительКурса);
			ВыборкаТабличнойЧасти = Запрос.Выполнить().Выгрузить();
		Иначе
			ОбщегоНазначения.СообщитьПользователю(НСтр(
											"ru = 'Документ не проведен. Данные о остаточной стоимости не доступны.'"));
			ВыборкаТабличнойЧасти = Документ.Активы.Выгрузить();
			ВыборкаТабличнойЧасти.Колонки.Добавить("ОстаточнаяСтоимость",
				Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(15, 2)));
			ВыборкаТабличнойЧасти.ЗаполнитьЗначения(0, "ОстаточнаяСтоимость");
			ВыборкаТабличнойЧасти.Колонки.Сумма.Имя = "СтоимостьРеализации";
		КонецЕсли;
		
		// Перебор строк
		Для каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			// Заполняем данные строки.
			ОбластьСтрока.Параметры.Заполнить(СтрокаТЧ);
			ОбластьСтрока.Параметры.ПрочийАктив			= СтрокаТЧ.ПрочийАктив;
			ОбластьСтрока.Параметры.АктивНаименование =
				УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТЧ.ПрочийАктив);
			ОбластьСтрока.Параметры.Код					= СтрокаТЧ.ПрочийАктив.ИнвентарныйНомер;
			ОбластьСтрока.Параметры.ОстаточнаяСтоимость	= Формат(СтрокаТЧ.ОстаточнаяСтоимость, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СтоимостьРеализации	= Формат(СтрокаТЧ.СтоимостьРеализации, ФорматВыводаСуммы);
			
			// Доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если ВыборкаТабличнойЧасти.Индекс(СтрокаТЧ) = ВыборкаТабличнойЧасти.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			// Выводим строку, делая проверку попадания на лист.
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СтоимостьРеализации", Документ.ВалютаДокумента, 0);
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ,СтруктураИтоговПоСтранице);
		КонецЦикла;
			
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// Итоги
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("СтоимостьРеализации");
		ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'") + " " + ВыборкаТабличнойЧасти.Количество()
			+ " " + НСтр("ru = 'на сумму'") + " "
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, Документ.ВалютаДокумента);
		
		// Выводим представления и расшифровки подписей.
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПолучилКонтрагент"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьРеализацияАктивов()

// Формирует печатную форму "М15"
// 
Функция ПечатьМ15(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияАктивов_М15";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;

	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы 	   = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_М15");
		
		ОбластьЗаголовок    = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьСтрока       = Макет.ПолучитьОбласть("Строка");
		ОбластьРазделителя  = Макет.ПолучитьОбласть("Разделитель");
		ОбластьПодвал       = Макет.ПолучитьОбласть("Подвал");
		
		// вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ОбластьЗаголовок.Параметры.НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.КонтрагентНаименование = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Контрагент, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ОрганизацияПоОКПО = Документ.Организация.КодПоОКПО;
		ОбластьЗаголовок.Параметры.ДатаСоставления = Формат(Документ.Дата, "ДФ = дд.ММ.гггг");
		ОбластьЗаголовок.Параметры.ПодразделениеНаименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			Документ.ПодразделениеКомпании, Документ.Дата);
		
		Если ЗначениеЗаполнено(Документ.ДоговорВзаиморасчетов) Тогда
			ОбластьЗаголовок.Параметры.Основание =
				УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ДоговорВзаиморасчетов);
		КонецЕсли;
		
		// свойства
		ИскомыеСвойства = Новый Массив();
		ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Получатель);
		ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Документ, Истина, Истина, ИскомыеСвойства);
		Получатель = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Получатель", ЗначенияСвойствОбъекта);
		ОбластьЗаголовок.Параметры.Получатель = Получатель;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// выводим заголовок таблицы
		ОбластьШапкаТаблицы.Параметры.Валюта = Документ.ВалютаДокумента;
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);

		ВыборкаСтрок = Документ.Активы;
	
		// подвал выводим во временный
		ОбластьПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью =
			ЧислоПрописью(ВыборкаСтрок.Количество(), , ",,,,,,,,0");
		ОбластьПодвал.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(
			ВыборкаСтрок.Итог("Сумма"), Документ.ВалютаДокумента);
		ОбластьПодвал.Параметры.ИтогНДС = РаботаСКурсамиВалют.СформироватьСуммуПрописью(
			ВыборкаСтрок.Итог("СуммаНДС"), Документ.ВалютаДокумента);
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Руководитель"));
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ГлавныйБухгалтер"));
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил"));
		Получил = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПолучилКонтрагент");
		Получил.Вставить("ПолучилПредставление", Получил.ПолучилКонтрагентПредставление);
		ОбластьПодвал.Параметры.Заполнить(Получил);
		ТабДокументПодвал = Новый ТабличныйДокумент;
		ТабДокументПодвал.Вывести(ОбластьПодвал);
		
		// сразу два, т.к. выводим на второй странице только
		НомерСтраницы = 2;
		НомерСтраницыПред = НомерСтраницы;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 

		// Выводим многострочную часть документа
		Для каждого СтрокаТЧ Из ВыборкаСтрок Цикл
			СтавкаНДС = СтрокаТЧ.ПрочийАктив.Номенклатура.СтавкаНДС.Ставка;
			ОбластьСтрока.Параметры.Заполнить(СтрокаТЧ);
			ОбластьСтрока.Параметры.ТоварНаименование =
				УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТЧ.ПрочийАктив);
			ОбластьСтрока.Параметры.ТоварКод					 = СтрокаТЧ.ПрочийАктив.Код;
			ОбластьСтрока.Параметры.ИнвентарныйНомер			 = СтрокаТЧ.ПрочийАктив.ИнвентарныйНомер;
			ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод 		 = СтрокаТЧ.ПрочийАктив.Номенклатура.БазоваяЕдиницаИзмерения.Код;
			ОбластьСтрока.Параметры.ЕдиницаИзмеренияНаименование = СтрокаТЧ.ПрочийАктив.Номенклатура.БазоваяЕдиницаИзмерения;
			ОбластьСтрока.Параметры.Количество 					 = Формат(1, ФорматВыводаКоличества);
			ОбластьСтрока.Параметры.Цена 						 = Формат(СтрокаТЧ.Сумма - СтрокаТЧ.СуммаНДС, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СуммаБезНДС 				 = Формат(СтрокаТЧ.Сумма - СтрокаТЧ.СуммаНДС, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СуммаСНДС 					 = Формат(СтрокаТЧ.Сумма, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СуммаНДС					 = Формат(СтрокаТЧ.СуммаНДС, ФорматВыводаСуммы);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если ВыборкаСтрок.Индекс(СтрокаТЧ) = ВыборкаСтрок.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ТабДокументПодвал);
			КонецЕсли;
					
			// выводим строку, делая проверку попадания на лист
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьРазделителя, НомерСтраницы, , Документ, мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
		КонецЦикла;
		
		// выводим подвал
		ТабличныйДокумент.Вывести(ТабДокументПодвал);
	
		// Зададим параметры макета
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьМ15()

// Функция получения данных для УПД
Функция ПолучитьДанныеДляПечатиУПД(Объект) Экспорт
	
	ДокументФактура = ЗащищенныеФункцииСервер.ПодчиненныйСчетФактураВыданный(Объект.Ссылка).СчетФактура;
	ДанныеОбъекта = Новый Структура();
	
	// Сформируем статус документа
	Если ЗначениеЗаполнено(ДокументФактура) Тогда
		Статус = 1;
		ДокументОбъект = ДокументФактура;
		ТаблицаТоваров = ДокументОбъект.Товары.Выгрузить();
	Иначе
		Статус = 2;
		ДокументОбъект = Объект;
		
		// Формируем таблицу для вывода на печать
		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТаблицаТоваров.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
		ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
		ТаблицаТоваров.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)));
		ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		ТаблицаТоваров.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		ТаблицаТоваров.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
		ТаблицаТоваров.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		ТаблицаТоваров.Колонки.Добавить("СуммаВсего", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		ТаблицаТоваров.Колонки.Добавить("ГТД", Новый ОписаниеТипов("СправочникСсылка.ГТД"));
		ТаблицаТоваров.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		Ном = 1;
		
		Для Каждого ТекСтрока Из ДокументОбъект.Активы Цикл
			НоваяСтрока						 = ТаблицаТоваров.Добавить();
			НоваяСтрока.НомерСтроки			 = Ном;
			ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ТекСтрока.ПрочийАктив.Номенклатура,
				"ОсновнаяЕдиницаИзмерения, ОсновнаяЕдиницаИзмерения.Коэффициент, ОсновнаяЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код"
			);
			НоваяСтрока.Номенклатура		 = ТекСтрока.ПрочийАктив.Номенклатура;
			НоваяСтрока.Количество			 = ТекСтрока.Количество;
			НоваяСтрока.ЕдиницаИзмерения	 = ДанныеНоменклатуры.ОсновнаяЕдиницаИзмерения;
			НоваяСтрока.Коэффициент			 = ДанныеНоменклатуры.ОсновнаяЕдиницаИзмеренияКоэффициент;
			НоваяСтрока.Цена				 = Окр((ТекСтрока.Сумма / ТекСтрока.Количество) - ТекСтрока.СуммаНДС, 2);
			НоваяСтрока.Сумма				 = ТекСтрока.Сумма;
			НоваяСтрока.СтавкаНДС			 = ТекСтрока.СтавкаНДС;
			НоваяСтрока.СуммаНДС			 = ТекСтрока.СуммаНДС;
			НоваяСтрока.СуммаВсего			 = ТекСтрока.Сумма;
			НоваяСтрока.ГТД					 = Справочники.ГТД.ПустаяСсылка();
			НоваяСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			Ном = Ном + 1;
		КонецЦикла;
	КонецЕсли;
	
	// данные документа
	ДанныеОбъекта.Вставить("Дата"                   	, ДокументОбъект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  	, УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ДокументОбъект));
	ДанныеОбъекта.Вставить("ХозОперация"            	, ДокументОбъект.ХозОперация);
	ДанныеОбъекта.Вставить("ДокументОснование"      	, ДокументОбъект.ДокументОснование);
	ДанныеОбъекта.Вставить("ВалютаДокумента"      		, ДокументОбъект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"      		, ДокументОбъект.КурсДокумента);
	ДанныеОбъекта.Вставить("ТипЦен"      				, Справочники.ТипыЦен.ПустаяСсылка());
	ДанныеОбъекта.Вставить("Поставщик"              	, ДокументОбъект.Организация);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  	, ДокументОбъект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("Покупатель"              	, ДокументОбъект.Контрагент);
	ДанныеОбъекта.Вставить("Организация"              	, Объект.Организация);
	ДанныеОбъекта.Вставить("ДоговорВзаиморасчетов"     	, ?(ЗначениеЗаполнено(ДокументОбъект.ДоговорВзаиморасчетов), Объект.ДоговорВзаиморасчетов, "--"));
	ДанныеОбъекта.Вставить("Товары"              		, ТаблицаТоваров);
	ДанныеОбъекта.Вставить("СуммаДокумента"             , ДокументОбъект.СуммаДокумента);
	ДанныеОбъекта.Вставить("Статус"              		, Статус);
	ДанныеОбъекта.Вставить("ИдентификаторГосударственногоКонтракта", Объект.ИдентификаторГосударственногоКонтракта);
	ДанныеОбъекта.Вставить("ДокументОтгрузки", ?(Статус = 1, ДокументОбъект.ДокументОснование, Объект.Ссылка));
	
	Если Статус = 1 Тогда
		ДанныеОбъекта.Вставить("НомерИсправления"       	, ?(ЗначениеЗаполнено(ДокументОбъект.НомерИсправления), ДокументОбъект.НомерИсправления, "--"));
		ДанныеОбъекта.Вставить("ДатаИсправления"        	, ?(ЗначениеЗаполнено(ДокументОбъект.Дата), ДокументОбъект.Дата, "--"));
		ДанныеОбъекта.Вставить("ПлатежноРасчетныеДокументы" , ДокументОбъект.ПлатежноРасчетныеДокументы);
	КонецЕсли;
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства); 
	ДанныеОбъекта.Вставить("ДатаОтгрузки"            , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", ЗначенияСвойствОбъекта)); 
	
	ДанныеОбъекта.Вставить("Грузоотправитель"        , ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, ДокументОбъект.Организация));
	ДанныеОбъекта.Вставить("Грузополучатель"         , ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, ДокументОбъект.Контрагент));
  	
	ДанныеОбъекта.Вставить("Руководитель"     	     , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Руководитель"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Отпустил"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Отпустил"));
	ДанныеОбъекта.Вставить("Получил"          		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Получил"));
	ДанныеОбъекта.Вставить("Менеджер"         		, УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Менеджер"));
	
	Возврат ДанныеОбъекта;
	
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//	Адрес   - адрес структуры данных во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияАктивовАктивы.ПрочийАктив КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,
	|	МИНИМУМ(РеализацияАктивовАктивы.НомерСтроки) КАК Порядок,
	|	СУММА(РеализацияАктивовАктивы.Количество) КАК Количество,
	|	СУММА(РеализацияАктивовАктивы.Сумма) КАК Цена,
	|	МАКСИМУМ(РеализацияАктивовАктивы.СтавкаНДС) КАК СтавкаНДС,
	|	СУММА(РеализацияАктивовАктивы.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.РеализацияАктивов.Активы КАК РеализацияАктивовАктивы
	|ГДЕ
	|	РеализацияАктивовАктивы.Ссылка В(&МассивДокументов)
	|	И РеализацияАктивовАктивы.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияАктивовАктивы.ПрочийАктив
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РеализацияАктивов.Организация КАК Организация,
	|	РеализацияАктивов.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ЗНАЧЕНИЕ(Справочник.СкладыКомпании.ПустаяСсылка) КАК СкладКомпании,
	|	ЗНАЧЕНИЕ(Справочник.ТипыЦен.ПустаяСсылка) КАК ТипЦены
	|ИЗ
	|	Документ.РеализацияАктивов КАК РеализацияАктивов
	|ГДЕ
	|	РеализацияАктивов.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций 			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивПодразделенийКомпании = УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ПодразделениеКомпании").ВыгрузитьКолонку(0);
	МассивСкладов    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "СкладКомпании").ВыгрузитьКолонку(0);
	МассивТиповЦен    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ТипЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьПодразделениеКомпании", ?(МассивПодразделенийКомпании.Количество() = 1, МассивПодразделенийКомпании[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьТипЦены",     ?(МассивТиповЦен.Количество() = 1,    МассивТиповЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Ложь);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЭтикеток");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("НеПересчитыватьЦены");
	СтруктураДействий.Вставить("ЦеныИзДокументаОснования");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	Товары.ЗаполнитьЗначения(СтруктураДействий.ЗаполнитьОрганизацию, "Организация");
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//	Адрес - адрес структуры данных во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЦенников(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияАктивовАктивы.ПрочийАктив КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,
	|	МИНИМУМ(РеализацияАктивовАктивы.НомерСтроки) КАК Порядок,
	|	СУММА(РеализацияАктивовАктивы.Количество) КАК Количество,
	|	СУММА(РеализацияАктивовАктивы.Сумма) КАК Цена,
	|	МАКСИМУМ(РеализацияАктивовАктивы.СтавкаНДС) КАК СтавкаНДС,
	|	СУММА(РеализацияАктивовАктивы.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.РеализацияАктивов.Активы КАК РеализацияАктивовАктивы
	|ГДЕ
	|	РеализацияАктивовАктивы.Ссылка В(&МассивДокументов)
	|	И РеализацияАктивовАктивы.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияАктивовАктивы.ПрочийАктив
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РеализацияАктивов.Организация КАК Организация,
	|	РеализацияАктивов.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ЗНАЧЕНИЕ(Справочник.СкладыКомпании.ПустаяСсылка) КАК СкладКомпании,
	|	ЗНАЧЕНИЕ(Справочник.ТипыЦен.ПустаяСсылка) КАК ТипЦены
	|ИЗ
	|	Документ.РеализацияАктивов КАК РеализацияАктивов
	|ГДЕ
	|	РеализацияАктивов.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций 			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивПодразделенийКомпании = УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ПодразделениеКомпании").ВыгрузитьКолонку(0);
	МассивСкладов    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "СкладКомпании").ВыгрузитьКолонку(0);
	МассивТиповЦен    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ТипЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьПодразделениеКомпании", ?(МассивПодразделенийКомпании.Количество() = 1, МассивПодразделенийКомпании[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьВидЦены",     ?(МассивТиповЦен.Количество() = 1,    МассивТиповЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЦенников");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("НеПересчитыватьЦены");
	СтруктураДействий.Вставить("ЦеныИзДокументаОснования");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	Товары.ЗаполнитьЗначения(СтруктураДействий.ЗаполнитьОрганизацию, "Организация");
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйКассовыйОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетФактураВыданный);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.РеализацияАктивов);

КонецФункции

#КонецОбласти

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
    
    Результат = Новый Массив();
    Результат.Добавить("Активы.ВидАренды; АктивыВидАренды");
    Возврат Результат;
    
КонецФункции

// Проверяет возможность ввода счет-фактуры выданной на основании документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.РеализацияАктивов - документ, для которого выполняется действие.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина, если ввод возможен, Ложь - в противном случае.
//
Функция ВозможенВводСчетФактурыВыданной(ДокументОбъект, ДополнительныеПарметры = Неопределено) Экспорт
	
	СистемаНО = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.СистемаНалогообложения,
		ДокументОбъект.Организация,
	);
	НалогообложениеУСН = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.НалогообложениеНДСПриУСН,
		ДокументОбъект.Организация,
	);
	
	Если СистемаНО = Перечисления.СистемыНалогообложения.Упрощенная И НЕ РаботаСоСтавкамиНДССервер.УСНПлательщикНДС(НалогообложениеУСН) Тогда
        Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбработкаСобытийДокументаСервер.ДокументСодержитСтрокиСНДС(ДокументОбъект, "Активы");
	
КонецФункции

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговора",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов"));
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаДоговора", ДополнительныеПараметры.ДляПроведения.ВалютаДоговора);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияАктивов.Организация КАК Организация,
	|	РеализацияАктивов.Ссылка КАК Ссылка,
	|	РеализацияАктивов.Дата КАК Дата,
	|	РеализацияАктивов.ХозОперация КАК ХозОперация,
	|	РеализацияАктивов.ДокументОснование КАК ДокументОснование,
	|	РеализацияАктивов.Контрагент КАК Контрагент,
	|	РеализацияАктивов.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	РеализацияАктивов.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	РеализацияАктивов.Ссылка КАК Сделка,
	|	РеализацияАктивов.СуммаДокумента КАК Сумма,
	|	РеализацияАктивов.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	РеализацияАктивов.ВалютаДокумента КАК ВалютаДокумента,
	|	РеализацияАктивов.КурсДокумента КАК КурсДокумента,
	|	РеализацияАктивов.КурсВалютыУпр КАК КурсВалютыУпр,
	|	РеализацияАктивов.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.РеализацияАктивов КАК РеализацияАктивов
	|ГДЕ
	|	РеализацияАктивов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияАктивовЗачетАвансов.Ссылка КАК Ссылка,
	|	РеализацияАктивовЗачетАвансов.ДокументАванса КАК ДокументАванса,
	|	СУММА(РеализацияАктивовЗачетАвансов.Сумма) КАК Сумма
	|ПОМЕСТИТЬ РаспределениеАванса
	|ИЗ
	|	Документ.РеализацияАктивов.ЗачетАвансов КАК РеализацияАктивовЗачетАвансов
	|ГДЕ
	|	РеализацияАктивовЗачетАвансов.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияАктивовЗачетАвансов.Ссылка,
	|	РеализацияАктивовЗачетАвансов.ДокументАванса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр, &ВалютаДоговора)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ХозОперация КАК ХозОперация,
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДоговора КАК ВалютаДоговора,
	|	ДанныеДокумента.Сделка КАК Сделка,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыВзаиморасчетов = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютВзаиморасчетов.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетов.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыВзаиморасчетов
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютВзаиморасчетов
	|		ПО ДанныеДокумента.ВалютаДоговора = КурсыВалютВзаиморасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияАктивовАктивы.Ссылка КАК Ссылка,
	|	РеализацияАктивовАктивы.НомерСтроки КАК НомерСтроки,
	|	РеализацияАктивовАктивы.ПрочийАктив КАК ПрочийАктив,
	|	РеализацияАктивовАктивы.Количество КАК Количество,
	|	РеализацияАктивовАктивы.Сумма КАК Сумма,
	|	РеализацияАктивовАктивы.СтавкаНДС КАК СтавкаНДС,
	|	РеализацияАктивовАктивы.СуммаНДС КАК СуммаНДС,
	|	РеализацияАктивовАктивы.ВидАренды КАК ВидАренды
	|ПОМЕСТИТЬ АктивыДокумента
	|ИЗ
	|	Документ.РеализацияАктивов.Активы КАК РеализацияАктивовАктивы
	|ГДЕ
	|	РеализацияАктивовАктивы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.ДокументОснование КАК ДокументОснование,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Задолженность.ВалютаДоговора КАК ВалютаДоговора,
	|	Задолженность.Сделка КАК Сделка,
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр
	|ИЗ
	|	Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеАванса.ДокументАванса КАК ДокументАванса,
	|	РаспределениеАванса.Сумма КАК Сумма
	|ИЗ
	|	РаспределениеАванса КАК РаспределениеАванса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(АктивыДокумента.Сумма), 0) КАК Сумма
	|ИЗ
	|	АктивыДокумента КАК АктивыДокумента";
	Запрос.УстановитьПараметр("Ссылка", ДвиженияДокумента.ДляПроведения.Ссылка);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ЗачетАванса = ПакетЗапроса[1].Выгрузить();
	СуммаАктива = ПакетЗапроса[2].Выбрать();
	
	Если ПакетЗапроса[0].Пустой()
		ИЛИ Не СуммаАктива.Следующий()
		ИЛИ СуммаАктива.Сумма = 0 Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	ДанныеОбОплате = ОбменДаннымиСлужебный.РезультатЗапросаВСтруктуру(ПакетЗапроса[0]);
	ДанныеОбОплате.Сумма = СуммаАктива.Сумма;
	
	РасчетыСКонтрагентамиСервер.ДополнитьРасчетыСКонтрагентом(
		РасчетыСКонтрагентами,
		ДанныеОбОплате,
		ЗачетАванса,
		Отказ);
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗачетАвансов

// Обработчик события возникающего при изменении данных реквизита "Документ аванса" в таблице "ЗачетАвансов".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЗачетАвансовДокументАвансаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("СуммаДокумента", Объект.Активы.Итог("Сумма"));
	
	// Вызываем общий обработчик события
	РасчетыСКонтрагентамиСервер.ДокументАвансаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли