// Модуль объекта документа "Ввод в эксплуатацию автомобилей"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА) Экспорт
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
	РегистрыНакопления.АвтомобилиДляТестДрайва.ЗаполнитьВидАренды(ЭтотОбъект, "Автомобили");
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Получим способ ведения баланса.
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(Дата);
	ПодразделениеСклад = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(
		СкладКомпании.ПодразделениеКомпании,
		Дата
	);
	ПодразделениеПолучательБаланса = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(
		ПодразделениеПолучатель,
		Дата
	);
	БалансовыеПодразделенияНеРавны = ПодразделениеСклад <> ПодразделениеПолучательБаланса;
	
	Если ПроверитьЗаказыНаАвтомобиль() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// получим шапку документа
	ШапкаДокумента = ПолучитьШапкуДокумента(Ссылка);
	
	// Спишем автомобиль со склада
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументАвтомобили.Автомобиль КАК Автомобиль,
		|	ДокументАвтомобили.Автомобиль КАК Номенклатура,
		|	1 КАК Количество,
		|	ВЫБОР
		|		КОГДА ДокументАвтомобили.МОЛ = &ПустойМОЛ
		|			ТОГДА ДокументАвтомобили.Ссылка.МОЛ
		|		ИНАЧЕ ДокументАвтомобили.МОЛ
		|	КОНЕЦ КАК МОЛ,
		|	ДокументАвтомобили.Актив КАК Актив,
		|	ДокументАвтомобили.ТипЭксплуатации КАК ТипЭксплуатации,
		|	ДокументАвтомобили.БалансоваяСтоимость КАК БалансоваяСтоимость,
		|	0 КАК Амортизация,
		|	0 КАК СуммаОбслуживания
		|ИЗ
		|	Документ.ВводВЭксплуатациюАвтомобилей.Автомобили КАК ДокументАвтомобили
		|ГДЕ
		|	ДокументАвтомобили.Ссылка = &Ссылка";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка"    , Ссылка);
	Запрос.УстановитьПараметр("ПустойМОЛ" , Справочники.Сотрудники.ПустаяСсылка());
	РезультатЗапросаПоАвтомобилям = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписейОстаткиАвтомобилей = Движения.ОстаткиАвтомобилей;
	НаборЗаписейОстаткиАвтомобилей.РежимПроведения               = РежимПроведения;
	НаборЗаписейОстаткиАвтомобилей.ДокументОбъект                = ЭтотОбъект;
	НаборЗаписейОстаткиАвтомобилей.РезультатЗапросаПоАвтомобилям = РезультатЗапросаПоАвтомобилям;
	НаборЗаписейОстаткиАвтомобилей.СкладКомпании                 = СкладКомпании;
	НаборЗаписейОстаткиАвтомобилей.СтатусПартии                  = Перечисления.СтатусыПартий.ТоварКупленный;
	НаборЗаписейОстаткиАвтомобилей.ШапкаДокумента                = ШапкаДокумента;
	
	Если НЕ НаборЗаписейОстаткиАвтомобилей.Расход() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		НаборЗаписейОстаткиАвтомобилей.Записать();
	КонецЕсли;

	// проведем по Тест-Драйву
	Если НЕ Отказ И ХозОперация = Справочники.ХозОперации.ПереводАвтомобиляВТестДрайв Тогда
		НаборТестДрайв = Движения.АвтомобилиДляТестДрайва;
		НаборТестДрайв.ДокументОбъект                = ЭтотОбъект;
		НаборТестДрайв.ПодразделениеКомпании         = ПодразделениеПолучатель;
		НаборТестДрайв.РезультатЗапросаПоАвтомобилям = Автомобили.Выгрузить();
		Если НЕ НаборТестДрайв.Приход() Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// закинем в "Активы в эксплуатации"
	НаборЗаписейЭксплуатация = Движения.ПрочиеАктивыВЭксплуатации;
	НаборЗаписейЭксплуатация.ДокументОбъект            = ЭтотОбъект;
	НаборЗаписейЭксплуатация.ПодразделениеКомпании     = ПодразделениеПолучатель;
	НаборЗаписейЭксплуатация.ЭтоПервыйВвод             = Истина;
	НаборЗаписейЭксплуатация.РезультатЗапросаПоАктивам = РезультатЗапросаПоАвтомобилям;
	
	Если НЕ НаборЗаписейЭксплуатация.Приход() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить(
		"БалансоваяСтоимостьУпр",
		Движения.ПрочиеАктивыВЭксплуатации.Итог("БалансоваяСтоимостьУпр")
	);
	
	// проведем партии товаров
	Если НЕ ПровестиПоПартиям(РежимПроведения, Ссылка) Тогда
		Отказ = Истина;
	КонецЕсли;
		
	Если ВедетсяБалансПоПодразделению Тогда
		// БАЛАНС: Возможно что подразделения склада и получателя не равны в этом случае
		// увеличиваем доход на подразделении получателе.
		Если БалансовыеПодразделенияНеРавны Тогда
			// Получим себестоимости по прочим активам
			ПрочиеАктивыВЭксплуатации = Движения.ПрочиеАктивыВЭксплуатации;
			СебестоимостьПрочиеАктивыВЭксплуатации = ПрочиеАктивыВЭксплуатации.Итог("БалансоваяСтоимостьУпр");
			
			// Увеличиваем доход
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.Подразделение          = ПодразделениеПолучательБаланса;
			НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.ВУпрВалюте             = Истина;
			НаборЗаписейДиР.Доход                  = СебестоимостьПрочиеАктивыВЭксплуатации;
			
			Если НЕ НаборЗаписейДиР.Приход() Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// если тут же начисляется амортизация (100% способ начисления), начисляем расходы
	Если НаборЗаписейЭксплуатация.СуммаАмортизацииУпр100 > 0 Тогда
		НаборЗаписейДиР = Движения.ДоходыИРасходы;
		
		НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.Амортизация;
		НаборЗаписейДиР.Подразделение          = ПодразделениеПолучатель;
		НаборЗаписейДиР.ВУпрВалюте             = Истина;
		НаборЗаписейДиР.Расход                 = НаборЗаписейЭксплуатация.СуммаАмортизацииУпр100;
		
		Если НЕ НаборЗаписейДиР.Приход() Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании справочника "Прочие активы"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПрочиеАктивы(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	НоваяСтрока = Автомобили.Добавить();
	НоваяСтрока.Актив = ДанныеЗаполнения.Ссылка;
	Документы.ВводВЭксплуатациюАвтомобилей.АвтомобилиАктивПриИзменении(ЭтотОбъект, НоваяСтрока, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПриходныйСкладскойОрдер()

// Производит заполнение объекта на основании документа "Перемещение автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПеремещениеАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СкладКомпании = ДанныеЗаполнения.СкладПолучатель;
	
	Для Каждого Строка Из Автомобили Цикл
		Документы.ВводВЭксплуатациюАвтомобилей.АвтомобилиАвтомобильПриИзменении(ЭтотОбъект, Строка, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПриходныйСкладскойОрдер()

// Производит заполнение объекта на основании документа "Поступление автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилейКомиссия Тогда
		ТекстСообщения = НСтр("ru = 'Ввод в эксплуатацию на основании поступления автомобилей на комиссию невозможен.'");
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
		
	Для Каждого Строка Из Автомобили Цикл
		Документы.ВводВЭксплуатациюАвтомобилей.АвтомобилиАвтомобильПриИзменении(ЭтотОбъект, Строка, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
	КонецЦикла;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПриходныйСкладскойОрдер()

// Производит заполнение объекта на основании справочника "Автомобили"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Автомобили(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	НоваяСтрока = Автомобили.Добавить();
	НоваяСтрока.Автомобиль = ДанныеЗаполнения.Ссылка;
	Документы.ВводВЭксплуатациюАвтомобилей.АвтомобилиАвтомобильПриИзменении(ЭтотОбъект, НоваяСтрока, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПриходныйСкладскойОрдер()

// Производит заполнение объекта по передаваемой структуре
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "ХозОперация", ХозОперация);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// Проверка наличия других заказов на автомобиль с данным VIN-ом
//
// Параметры
//
// Возвращаемое значение:
//   <Булево>   - Заказов на данный автомобиль нет.
//
Функция ПроверитьЗаказыНаАвтомобиль() Экспорт
	
	Отказ  = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказыАвтомобилейОстатки.Автомобиль КАК Автомобиль,
	|	ЗаказыАвтомобилейОстатки.Заказ КАК Заказ,
	|	ЕСТЬNULL(ЗаказыАвтомобилейОстатки.РезервОстаток, 0) КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыАвтомобилей.Остатки(
	|			&НаГраницу,
	|			Автомобиль В (&Автомобили)) КАК ЗаказыАвтомобилейОстатки";
	Запрос.УстановитьПараметр("НаГраницу"  , Новый Граница(МоментВремени(), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Автомобили" , Автомобили.ВыгрузитьКолонку("Автомобиль"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Автомобиль <%1> зарезервирован под заказ: <%2>'"),
			Выборка.Автомобиль,
			Выборка.Заказ
		);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
		
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции // ПроверитьЗаказыНаАвтомобиль()

// возвращает выборку по шапке
//
// Параметры:
//  ДокументСсылка - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Выборка - выборка по шапке
//
Функция ПолучитьШапкуДокумента(ДокументСсылка) Экспорт
	Запрос=Новый Запрос("
	|ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Док.ПодразделениеПолучатель КАК ПодразделениеПолучатель,
	/////////// ПРИВАТ ////////////
	|	Док.СкладКомпании КАК СкладКомпании
	|
	|ИЗ
	|	Документ."+Метаданные().Имя+" КАК Док
	|ГДЕ
	|	Док.Ссылка=&Ссылка");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции // ПолучитьШапкуДокумента()

// формирует движения документа по партионным регистрам
//
// Параметры:
//  Режим           - режим проведения (оперативный/неоперативный)
//  ДокументСсылка  - ссылка на документ который надо допровести по партиям.
//
// Возвращаемое значение:
//  Возвращает Истина - все в порядке, ложь - чего-то не так.
//
Функция ПровестиПоПартиям(Режим,ДокументСсылка) Экспорт
	Отказ = Ложь;
	
	// получим шапку документа
	ШапкаДокумента = ПолучитьШапкуДокумента(ДокументСсылка);
	
	// Если было отложенное проведение по партиям, то :
	// Очистим возможные движения по регистру комплектации автомобилей. 
	НаборЗаписейПартионногоРегистра = РегистрыНакопления.КомплектацияАвтомобилей.СоздатьНаборЗаписей();
	НаборЗаписейПартионногоРегистра.Отбор.Регистратор.Значение      = ШапкаДокумента.Ссылка;
	НаборЗаписейПартионногоРегистра.Отбор.Регистратор.Использование = Истина;
	НаборЗаписейПартионногоРегистра.Записать();
	
	// Проверим, если подразделение проводиться по партиям "отложено", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям = Движения.ДопроведениеПоПартиям;
	
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента = ШапкаДокумента;
	
	Отказ = НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	
	// Спишем оборудование автомобиля
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВводВЭксплуатациюАвтомобилейАвтомобили.Автомобиль,
	|	ВводВЭксплуатациюАвтомобилейАвтомобили.БалансоваяСтоимость
	|ИЗ
	|	Документ.ВводВЭксплуатациюАвтомобилей.Автомобили КАК ВводВЭксплуатациюАвтомобилейАвтомобили
	|ГДЕ
	|	ВводВЭксплуатациюАвтомобилейАвтомобили.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ШапкаДокумента.Ссылка);
	ВыборкаАвтомобили = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписейКомплектацияАвтомобилей = Движения.КомплектацияАвтомобилей;
	Для каждого СтрокаАвтомобиля Из ВыборкаАвтомобили Цикл
		// Спишем оборудование по документу
		НаборЗаписейКомплектацияАвтомобилей.РежимПроведения           = Режим;
		НаборЗаписейКомплектацияАвтомобилей.ДокументОбъект            = ЭтотОбъект;
		НаборЗаписейКомплектацияАвтомобилей.РезультатЗапросаПоТоварам = Неопределено;
		НаборЗаписейКомплектацияАвтомобилей.Автомобиль                = СтрокаАвтомобиля.Автомобиль;
		НаборЗаписейКомплектацияАвтомобилей.СкладКомпании             = ШапкаДокумента.СкладКомпании;
		НаборЗаписейКомплектацияАвтомобилей.ПериодДвижения            = ШапкаДокумента.МоментВремени;
		НаборЗаписейКомплектацияАвтомобилей.ШапкаДокумента            = ШапкаДокумента;
		Отказ=НЕ НаборЗаписейКомплектацияАвтомобилей.Расход() ИЛИ Отказ;
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		НаборЗаписейКомплектацияАвтомобилей.Записать();
	КонецЕсли; 
	
	// Получим способ ведения баланса.
	ВедетсяБалансПоПодразделению   = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
	ПодразделениеСклад             = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ШапкаДокумента.СкладКомпании.ПодразделениеКомпании,ШапкаДокумента.Дата);
	ПодразделениеПолучательБаланса = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ШапкаДокумента.ПодразделениеПолучатель,ШапкаДокумента.Дата);
	БалансовыеПодразделенияНеРавны = ПодразделениеСклад <> ПодразделениеПолучательБаланса;
	
	// Получим себестоимости по партиям
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ОстаткиАвтомобилей.СуммаУпр), 0) КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	|ГДЕ
	|	ОстаткиАвтомобилей.Регистратор = &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(КомплектацияАвтомобилей.СуммаУпр),0)
	|ИЗ
	|	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
	|ГДЕ
	|	КомплектацияАвтомобилей.Регистратор = &Регистратор";
	Запрос.УстановитьПараметр("Регистратор", ШапкаДокумента.Ссылка);
	Выборка = Запрос.Выполнить().Выгрузить();
	
	СебестоимостьПартий = Выборка.Итог("СуммаУпр");
	
	Если ВедетсяБалансПоПодразделению И БалансовыеПодразделенияНеРавны Тогда
		
		// БАЛАНС: Возможно что подразделения склада и получателя не равны в этом случае
		// уменьшаем доход на подразделении склада.
		
		Если СебестоимостьПартий <> 0 Тогда
			// уменьшаем доход
			НаборЗаписейДиР = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.Подразделение          = ПодразделениеСклад;
			НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.ВУпрВалюте             = Истина;
			НаборЗаписейДиР.Доход                  = СебестоимостьПартий;
			Отказ = НЕ НаборЗаписейДиР.Расход() ИЛИ Отказ;
			
		КонецЕсли;
		
	Иначе
		// БАЛАНС: Движение по отклонению списания товаров от ввода активов делаем 
		// в случае если способ ведения баланса - не ведётся по подразделениям. 
		БалансоваяСтоимостьУпр = ДополнительныеСвойства.БалансоваяСтоимостьУпр;
			
		Если Окр(УправлениеДиалогомСервер.ПолучитьМодульЧисла(БалансоваяСтоимостьУпр - СебестоимостьПартий), 2, РежимОкругления.Окр15как20) >= 0.01 Тогда
			НаборЗаписейДиР                        = Движения.ДоходыИРасходы;
			НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.ОтклонениеСтоимостиАктиваПриВводеВЭксплуатацию;
			
			// В случае если ведется баланс по подразделению передадим подразделение соответствующее корреспонденции.
			Если ВедетсяБалансПоПодразделению Тогда
				НаборЗаписейДиР.Подразделение = ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
			КонецЕсли;
			
			НаборЗаписейДиР.ШапкаДокумента = ШапкаДокумента;
			НаборЗаписейДиР.ВУпрВалюте     = Истина;
			
			Если БалансоваяСтоимостьУпр > СебестоимостьПартий Тогда
				НаборЗаписейДиР.Доход  = БалансоваяСтоимостьУпр - СебестоимостьПартий;
			Иначе
				НаборЗаписейДиР.Расход = СебестоимостьПартий - БалансоваяСтоимостьУпр;
			КонецЕсли;
			
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
		КонецЕсли;
	КонецЕсли;
	
	// Все ОК
	Возврат НЕ Отказ;
КонецФункции // ПровестиПоПартиям()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
