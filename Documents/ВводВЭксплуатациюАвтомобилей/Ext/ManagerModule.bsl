// Модуль менеджера документа "Ввод в эксплуатацию автомобилей"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда  

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операци.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Автомобили.Итог("БалансоваяСтоимость"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	// Возвращаем сведения об итогах операции.
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используеся в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость выводв только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возращаемая сторка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить = ЛОЖЬ, ТолькоОсновныеКонтакты = ИСТИНА) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("ПодразделениеПолучатель");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("СкладКомпании");
	ОбязательныеРеквизиты.Добавить("МОЛ");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Автомобили");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Автомобили.Автомобиль");
	ОбязательныеРеквизиты.Добавить("Автомобили.Актив");
	ОбязательныеРеквизиты.Добавить("Автомобили.ТипЭксплуатации");
	ОбязательныеРеквизиты.Добавить("Автомобили.БалансоваяСтоимость");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы автомобилей
	УникальныеАвтомобили = Новый Массив();
	УникальныеАвтомобили.Добавить("Автомобиль");
	УникальныеАвтомобили.Добавить("Актив");
	УникальныеАвтомобили.Добавить("МОЛ");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Автомобили", УникальныеАвтомобили);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("СкладКомпании", Ложь);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработка пересчета табличных частей объекта.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ТребуетсяПересчетЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен", Ложь);
	
	Если ТребуетсяПересчетЦен Тогда
		
		ПараметрыДействия.ТребуетсяПересчетЦен = Ложь;
		Для Каждого Строка Из Объект.Автомобили Цикл
			Строка.БалансоваяСтоимость = РаботаСКурсамиВалютПлатформа.ПересчетПоКурсу(Строка.БалансоваяСтоимость, ПараметрыДействия.СтарыйКурс, Объект.КурсДокумента, РежимОкругления.Окр15как20);
		КонецЦикла;
	КонецЕсли;
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтомобили

// Обработчик события возникающего при изменении данных реквизита "Автомобиль" в таблице "Автомобили".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиАвтомобильПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Заполнил МОЛа по умолчанию из шапки
	Если НЕ ЗначениеЗаполнено(Строка.МОЛ) Тогда
		Строка.МОЛ = Объект.МОЛ;
	КонецЕсли;
	
	// заполним данные из модели
	Модель = Строка.Автомобиль.Модель;
	Если ЗначениеЗаполнено(Модель) Тогда
		// получим свойсва
		СтрПараметров = Справочники.Модели.ПолучитьНаборПараметровТестДрайва(Модель);
		Строка.МаксимальнаяПродолжительностьЭксплуатации = СтрПараметров.ПродолжительностьЭксплуатации;
		Строка.МаксимальныйПробег                        = СтрПараметров.МаксимальныйПробег;
	КонецЕсли;
	
	// рассчитаем балансовую стоимость
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ОстаткиАвтомобилейОстатки.СуммаОстаток),0)         КАК СуммаАвтомобиля,
	|	ЕСТЬNULL(СУММА(ОстаткиАвтомобилейОстатки.СуммаУпрОстаток),0)      КАК СуммаУпрАвтомобиля,
	|	ЕСТЬNULL(СУММА(КомплектацияАвтомобилейОстатки.СуммаОстаток),0)    КАК СуммаКомплектации,
	|	ЕСТЬNULL(СУММА(КомплектацияАвтомобилейОстатки.СуммаУпрОстаток),0) КАК СуммаУпрКомплектации
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей.Остатки(&НаМомент, Автомобиль = &Автомобиль)                           КАК ОстаткиАвтомобилейОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КомплектацияАвтомобилей.Остатки(&НаМомент, Автомобиль = &Автомобиль) КАК КомплектацияАвтомобилейОстатки
	|		ПО ОстаткиАвтомобилейОстатки.Автомобиль = КомплектацияАвтомобилейОстатки.Автомобиль";
	Запрос.УстановитьПараметр("НаМомент"   , ?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Ссылка.МоментВремени()));
	Запрос.УстановитьПараметр("Автомобиль" , Строка.Автомобиль);
	Выборка = Запрос.Выполнить().Выбрать();
	
	БалансоваяСтоимость = 0;
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр  = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	Если Выборка.Следующий() Тогда
		Если Объект.ВалютаДокумента = ВалютаРегл Тогда
			БалансоваяСтоимость = Выборка.СуммаАвтомобиля + Выборка.СуммаКомплектации;
		Иначе
			БалансоваяСтоимость = Выборка.СуммаУпрАвтомобиля + Выборка.СуммаУпрКомплектации;
			Если Объект.ВалютаДокумента <> ВалютаУпр Тогда
				БалансоваяСтоимость = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(БалансоваяСтоимость,
																		   ВалютаУпр,
																		   ?(НЕ ЗначениеЗаполнено(Объект.КурсВалютыУпр), Объект.Дата, Объект.КурсВалютыУпр),
																		   Объект.ВалютаДокумента,
																		   Объект.КурсДокумента);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Строка.БалансоваяСтоимость = БалансоваяСтоимость;
	
	// определим надоли создовать Актив
	Если ЗначениеЗаполнено(Строка.Автомобиль) И НЕ ЗначениеЗаполнено(Строка.Актив) Тогда
		
		ПараметрыДействия.Вставить("ТребуетсяСозданиеАктива", Истина);
		
		ДанныеЗаполения = Новый Структура;
		ДанныеЗаполения.Вставить("Наименование"     , "Автомобиль " + Строка.Автомобиль.Модель + " " + Строка.Автомобиль.VIN);
		ДанныеЗаполения.Вставить("Номенклатура"     , Справочники.Номенклатура.Автомобиль);
		ДанныеЗаполения.Вставить("ВидПрочегоАктива" , Перечисления.ВидыПрочихАктивов.ОсновноеСредство);
		ДанныеЗаполения.Вставить("ТипНоменклатуры"  , Справочники.ТипыНоменклатуры.Автомобили);
		
		ПараметрыДействия.Вставить("ДанныеЗаполения", ДанныеЗаполения);
		
	КонецЕсли;
	
	// Обновим информацию по виду аренды
	РегистрыНакопления.АвтомобилиДляТестДрайва.ЗаполнитьВидАрендыАвтомобиля(Объект, Строка);
	
КонецПроцедуры // ТоварыТипЭксплуатацииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автомобиль" в таблице "Автомобили".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиАктивПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Если НЕ Строка.Актив.Пустая() И НЕ Строка.Актив.ОсновнойТипЭксплуатации.Пустая() Тогда
		Строка.ТипЭксплуатации = Строка.Актив.ОсновнойТипЭксплуатации;
	КонецЕсли;
	
	// Обновим информацию по виду аренды
	РегистрыНакопления.АвтомобилиДляТестДрайва.ЗаполнитьВидАрендыАвтомобиля(Объект, Строка);
	
КонецПроцедуры // ТоварыТипЭксплуатацииПриИзменении()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ВводВЭксплуатациюАвтомобилей",
		"ПФ_MXL_ВводВЭксплуатацию",
		НСтр("ru = 'Ввод в эксплуатацию'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ВводВЭксплуатациюАвтомобилей",
		"ПФ_MXL_ОС1",
		НСтр("ru = 'Акт ОС-1'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ВводВЭксплуатациюАвтомобилей",
		"ПФ_MXL_М11",
		НСтр("ru = 'М-11 (Требование-накладная)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Ценники",
		НСтр("ru = 'Печать ценников'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати",
		,,,,
		Ложь);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Этикетки",
		НСтр("ru = 'Печать этикеток'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати",
		,,,,
		Ложь);
		
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областьей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительтые параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ВводВЭксплуатацию") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ВводВЭксплуатацию",
															"Ввод в эксплуатацию",
															ПечатьВводВЭксплуатацию(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ОС1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ОС1",
															"Акт ОС-1",
															ПечатьОС1(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_М11") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_М11",
															"М-11 (Требование-накладная)",
															ПечатьМ11(МассивОбъектов, ОбъектыПечати));
															
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Формирует табличный документ 
// 
// Параметры:
//  ТабДокумент - табличный документ.
//
// Возвращаемое значение:
//  ТабДокумент - возвращает сформированный табличный документ.
//
Функция ПечатьВводВЭксплуатацию(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВводВЭксплуатациюАвтомобилей.ПФ_MXL_ВводВЭксплуатацию");
		
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// дата документа
		ДатаДокумента = Документ.Дата;
		
		// вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации = 
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		ОбластьЗаголовок.Параметры.ПредставлениеПодразделения =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ПодразделениеКомпании);
		ОбластьЗаголовок.Параметры.ПредставлениеСклада =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СкладКомпании);
		ОбластьЗаголовок.Параметры.ПредставлениеМОЛ =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.МОЛ);
		ОбластьЗаголовок.Параметры.ПредставлениеПодразделенияПолучателя =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.ПодразделениеПолучатель);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);

		// готовим шапку
		НомерСтраницы = 2; НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,БалансоваяСтоимость", Документ.ВалютаДокумента, 0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// готовим области строки
		ВыборкаТабличнойЧасти = Документ.Автомобили;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			// заполняем данные строки
			АктивНаименование 							 = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТЧ.Актив);
			ОбластьСтрока.Параметры.НомерСтроки			 = СтрокаТЧ.НомерСтроки;
			ОбластьСтрока.Параметры.Актив				 = СтрокаТЧ.Актив;
			ОбластьСтрока.Параметры.АктивНаименование	 = АктивНаименование;
			ОбластьСтрока.Параметры.Код					 = СтрокаТЧ.Актив.ИнвентарныйНомер;
			ОбластьСтрока.Параметры.ТипЭксплуатации		 = СтрокаТЧ.ТипЭксплуатации;
			ОбластьСтрока.Параметры.БалансоваяСтоимость  = Формат(СтрокаТЧ.БалансоваяСтоимость, ФорматВыводаСуммы);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если ВыборкаТабличнойЧасти.Индекс(СтрокаТЧ) = ВыборкаТабличнойЧасти.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,БалансоваяСтоимость", Документ.ВалютаДокумента, 0);
				НомерСтраницыПред		  = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// итоги
		ОбластьПодвал.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("БалансоваяСтоимость");
		ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью = СтрШаблон(НСтр("ru = 'Всего наименований %1 на сумму %2'"),
			ВыборкаТабличнойЧасти.Количество(),
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, Документ.ВалютаДокумента));
		
		// Выводим представления и расшифровки подписей
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил", "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Получил", "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВводВЭксплуатациюАвтомобилей_ВводВЭксплуатацию";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьВводВЭксплуатацию()

// Формирует печатную форму "ОС-1"
// 
// Параметры:
//  ТабДокумент - табличный документ.
//
// Возвращаемое значение:
//  ТабДокумент - возвращает сформированный табличный документ.
//
Функция ПечатьОС1(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ВводВЭксплуатациюАвтомобилей.Ссылка.Дата КАК ДатаВвода,
		|	ВводВЭксплуатациюАвтомобилей.Ссылка.МОЛ КАК Ответственный,
		|	ВводВЭксплуатациюАвтомобилей.Ссылка.ПодразделениеКомпании КАК ПодразделениеОрганизации,
		|	ВводВЭксплуатациюАвтомобилей.Ссылка.СкладКомпании КАК Склад,
		|
		|	ВводВЭксплуатациюАвтомобилей.Актив КАК Актив,
		|	ВводВЭксплуатациюАвтомобилей.Актив.ДатаВыбытия КАК ДатаВыбытия,
		|	ВводВЭксплуатациюАвтомобилей.Актив.ИнвентарныйНомер КАК ИнвНомер,
		|	ВводВЭксплуатациюАвтомобилей.Актив.ПервоначальнаяСтоимость КАК НачСтоимость,
		|	ВводВЭксплуатациюАвтомобилей.Актив.КоэффициентУскорения КАК КоэффициентУскоренияБУ,
		|	ВводВЭксплуатациюАвтомобилей.Актив.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
		|	ВводВЭксплуатациюАвтомобилей.БалансоваяСтоимость КАК БалансоваяСтоимость,
		|
		|	ВводВЭксплуатациюАвтомобилей.ТипЭксплуатации.СпособНачисленияАмортизации КАК СпособАмортизации,
		|	ВводВЭксплуатациюАвтомобилей.ТипЭксплуатации.АмортизационнаяГруппа КАК АмортизационнаяГруппа
		|ИЗ
		|	Документ.ВводВЭксплуатациюАвтомобилей.Автомобили КАК ВводВЭксплуатациюАвтомобилей
		|ГДЕ
		|	ВводВЭксплуатациюАвтомобилей.Ссылка = &Ссылка";
		Запрос = Новый Запрос();
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
		ВыборкаАктивы = Запрос.Выполнить().Выбрать();
		ВыборкаАктивы.Следующий();
		
		ОрганизацияСдатчик    = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ОрганизацияСдатчик", Документ, Документ.Организация);
		ОрганизацияПолучатель = Документ.Организация;
		СдатчикНашаОрганизация = (ОрганизацияСдатчик = ОрганизацияПолучатель);
		
		// Чтение значение для адреса
		//    "ТелефонРабочий",   "тел.: "
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ДляПечати = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		СтруктураПредставления = Новый Структура;
		СтруктураПредставления.Вставить("ТелефонРабочий", "тел.: ");
		СтруктураПредставления.Вставить("АдресЮридический", "");
		СтруктураПредставления.Вставить("Факс",             "Факс ");
		АдресТелефоныСдатчика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			ОрганизацияСдатчик,
			СтруктураПредставления,
			ДополнительныеПараметры
		);
		
		Если СдатчикНашаОрганизация Тогда
			АдресТелефоныПолучателя = АдресТелефоныСдатчика;
		Иначе
			ДополнительныеПараметры.Удалить("ПодразделениеКомпании");
			ДополнительныеПараметры.ИспользоватьКИПодразделения = Ложь;
			АдресТелефоныПолучателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
				ОрганизацияПолучатель,
				СтруктураПредставления,
				ДополнительныеПараметры
			);
		КонецЕсли;
		
		// Получим ответственных
		Руководитель 			= УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"Руководитель","Руководитель");
		ГлавныйБухгалтер  		= УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"ГлавныйБухгалтер","ГлавныйБухгалтер");
		мМОЛ					= УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"МОЛ","МОЛ");
		ПодразделениеСдатчика	= ?(СдатчикНашаОрганизация,Документ.ПодразделениеКомпании,"");
		Отпустил 				= УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"Отпустил","Отпустил");
		Получил  				= УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"Получил","Получил");
		// Получим членов комиссии
		ПредседательКомиссии 	= УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"ПредседательКомиссии","ПредседательКомиссии");
		ЧленКомиссии1 			= УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"ЧленКомиссии1","ЧленКомиссии1");
		ЧленКомиссии2 			= УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"ЧленКомиссии2","ЧленКомиссии2");
		
		Если ВыборкаАктивы.Количество() = 1 Тогда //актив один - печать ОС-1
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВводВЭксплуатациюАвтомобилей.ПФ_MXL_ОС1");
			
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			
			ОбластьМакета.Параметры.РуководительСдатчикПредставление    	= ?(СдатчикНашаОрганизация,Руководитель.РуководительПредставление,"");
			ОбластьМакета.Параметры.РуководительСдатчикДолжность   		 	= ?(СдатчикНашаОрганизация,Руководитель.РуководительДолжность,"");		
			ОбластьМакета.Параметры.РуководительСдатчик				    	= ?(СдатчикНашаОрганизация,Руководитель.Руководитель,"");		
			ОбластьМакета.Параметры.РуководительПолучатель					= Руководитель.Руководитель;		
			ОбластьМакета.Параметры.РуководительПолучательПредставление  	= Руководитель.РуководительПредставление;
			ОбластьМакета.Параметры.РуководительПолучательДолжность	     	= Руководитель.РуководительДолжность;
			ОбластьМакета.Параметры.ГлавныйБухгалтерСдатчикаПредставление   = ?(СдатчикНашаОрганизация,ГлавныйБухгалтер.ГлавныйБухгалтерПредставление,"");
			ОбластьМакета.Параметры.ГлавныйБухгалтерСдатчика				= ?(СдатчикНашаОрганизация,ГлавныйБухгалтер.ГлавныйБухгалтер,"");		
			
			ОбластьМакета.Параметры.Заполнить(ГлавныйБухгалтер);
			ОбластьМакета.Параметры.Заполнить(мМОЛ);
			ОбластьМакета.Параметры.Заполнить(ПредседательКомиссии);
			ОбластьМакета.Параметры.Заполнить(ЧленКомиссии1);
			ОбластьМакета.Параметры.Заполнить(ЧленКомиссии2);
			ОбластьМакета.Параметры.Заполнить(Отпустил);
			ОбластьМакета.Параметры.Заполнить(Получил);
			
			// сдатчик номенклатуры
			ОбластьМакета.Параметры.ПредставлениеОрганизацииСдатчика	= УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ОрганизацияСдатчик);
			ОбластьМакета.Параметры.ОрганизацияСдатчик					= ОрганизацияСдатчик;
			ОбластьМакета.Параметры.АдресСдатчика						= АдресТелефоныСдатчика;
			ОсновнойБанковскийСчет										= Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(ОрганизацияСдатчик);
			ОбластьМакета.Параметры.РеквизитыСдатчика					= Строка(ОсновнойБанковскийСчет.Банк) + " №" + ОсновнойБанковскийСчет.НомерСчета;
			ОбластьМакета.Параметры.ПодразделениеСдатчика				= ПодразделениеСдатчика;
			
			// получатель актива
			ОбластьМакета.Параметры.ПредставлениеОрганизацииПолучателя	= УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ОрганизацияПолучатель);
			ОбластьМакета.Параметры.ОрганизацияПолучатель				= ОрганизацияПолучатель;
			ОбластьМакета.Параметры.АдресПолучателя						= АдресТелефоныПолучателя;
			ОсновнойБанковскийСчет										= Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(ОрганизацияПолучатель);
			ОбластьМакета.Параметры.РеквизитыПолучателя					= Строка(ОсновнойБанковскийСчет.Банк) + " №" + ОсновнойБанковскийСчет.НомерСчета;
			ОбластьМакета.Параметры.ПодразделениеПолучателя				= Документ.ПодразделениеПолучатель;
			
			ОбластьМакета.Параметры.КодПоОКПОСдатчик    = ОрганизацияСдатчик.КодПоОКПО;
			ОбластьМакета.Параметры.КодПоОКПОПолучатель = ОрганизацияПолучатель.КодПоОКПО;
			ОбластьМакета.Параметры.ДатаВвода    = ВыборкаАктивы.ДатаВвода;
			
			ОбластьМакета.Параметры.ДатаПередачи = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаПередачи", Документ, ВыборкаАктивы.ДатаВыбытия);
			ОбластьМакета.Параметры.НомерГруппы		= ВыборкаАктивы.АмортизационнаяГруппа;
			ОбластьМакета.Параметры.ИнвНомер		= ВыборкаАктивы.ИнвНомер;
			ОбластьМакета.Параметры.НаименованиеОС	= УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ВыборкаАктивы.Актив);
			ОбластьМакета.Параметры.КарточкаОС		= ВыборкаАктивы.Актив;
			ОбластьМакета.Параметры.НомерАкта = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
			ОбластьМакета.Параметры.ДатаАкта  = Документ.Дата;
			ОбластьМакета.Параметры.ДатаДок   = Документ.Дата;
			
			ОбластьМакета.Параметры.СрокЭкспл            = 0;
			ОбластьМакета.Параметры.СрокПолезнИспПриПер  = 0;
			ОбластьМакета.Параметры.НачАмортизация       = Формат(0,ФорматВыводаСуммы);
			ОбластьМакета.Параметры.ОстСтоимость         = Формат(0,ФорматВыводаСуммы);
			ОбластьМакета.Параметры.ЦенаПродажи          = Формат(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаАктивы.БалансоваяСтоимость, Документ.ВалютаДокумента, Документ.КурсДокумента, 
																	Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(), Документ.Дата),ФорматВыводаСуммы);
			ОбластьМакета.Параметры.НачСтоимость         = Формат(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаАктивы.НачСтоимость, Константы.ВалютаУправленческогоУчетаКомпании.Получить(), 
																	?(НЕ ЗначениеЗаполнено(Документ.КурсВалютыУпр), Документ.Дата, Документ.КурсВалютыУпр), 
																	Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(), Документ.Дата),ФорматВыводаСуммы);
			ОбластьМакета.Параметры.СрокПолезнИспПриПост = ВыборкаАктивы.СрокПолезногоИспользования;
			ОбластьМакета.Параметры.СпособАмортизации    = ВыборкаАктивы.СпособАмортизации;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
		
		Иначе // активов много - групповая печать (ОС-1б)
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВводВЭксплуатациюАвтомобилей.ПФ_MXL_ОС1б");
			
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка1");
			
			ОбластьМакета.Параметры.РуководительСдатчикПредставление     = ?(СдатчикНашаОрганизация,Руководитель.РуководительПредставление,"");
			ОбластьМакета.Параметры.РуководительСдатчикДолжность   		 = ?(СдатчикНашаОрганизация,Руководитель.РуководительДолжность,"");		
			ОбластьМакета.Параметры.РуководительСдатчик				     = ?(СдатчикНашаОрганизация,Руководитель.Руководитель,"");		
			ОбластьМакета.Параметры.РуководительПолучатель				 = Руководитель.Руководитель;		
			ОбластьМакета.Параметры.РуководительПолучательПредставление  = Руководитель.РуководительПредставление;
			ОбластьМакета.Параметры.РуководительПолучательДолжность	     = Руководитель.РуководительДолжность;
			
			ОбластьМакета.Параметры.Заполнить(ГлавныйБухгалтер);
			ОбластьМакета.Параметры.Заполнить(мМОЛ);
					
			// сдатчик номенклатуры
			ОбластьМакета.Параметры.ПредставлениеОрганизацииСдатчика	= УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ОрганизацияСдатчик);
			ОбластьМакета.Параметры.ОрганизацияСдатчик					= ОрганизацияСдатчик;
			ОбластьМакета.Параметры.АдресСдатчика						= АдресТелефоныСдатчика;
			ОсновнойБанковскийСчет										= Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(ОрганизацияСдатчик);
			ОбластьМакета.Параметры.РеквизитыСдатчика					= Строка(ОсновнойБанковскийСчет.Банк) + " №" + ОсновнойБанковскийСчет.НомерСчета;
			ОбластьМакета.Параметры.ПодразделениеСдатчика				= ПодразделениеСдатчика;
			
			// получатель актива
			ОбластьМакета.Параметры.ПредставлениеОрганизацииПолучателя	= УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ОрганизацияПолучатель);
			ОбластьМакета.Параметры.ОрганизацияПолучатель				= ОрганизацияПолучатель;
			ОбластьМакета.Параметры.АдресПолучателя						= АдресТелефоныПолучателя;
			ОсновнойБанковскийСчет										= Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(ОрганизацияПолучатель);
			ОбластьМакета.Параметры.РеквизитыПолучателя					= Строка(ОсновнойБанковскийСчет.Банк) + " №" + ОсновнойБанковскийСчет.НомерСчета;
			ОбластьМакета.Параметры.ПодразделениеПолучателя				= Документ.ПодразделениеПолучатель;
			
			ОбластьМакета.Параметры.КодОКПОСдатчик          = ОрганизацияСдатчик.КодПоОКПО;
			ОбластьМакета.Параметры.КодОКПОПолучатель       = ОрганизацияПолучатель.КодПоОКПО;		
			ОбластьМакета.Параметры.ДатаАктаВВода = ВыборкаАктивы.ДатаВвода;
			ОбластьМакета.Параметры.ДатаПередачи  = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаПередачи", Документ, ВыборкаАктивы.ДатаВыбытия);
			ОбластьМакета.Параметры.НомерДок      = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
			ОбластьМакета.Параметры.ДатаДок       = Документ.Дата;
			ТабличныйДокумент.Вывести(ОбластьМакета);

			ОбластьМакета = Макет.ПолучитьОбласть("Шапка2");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка2");
			НомСтр = 1;
			ВыборкаАктивы.Сбросить();
			Пока ВыборкаАктивы.Следующий() Цикл
				ОбластьМакета.Параметры.НомерСтроки		= НомСтр;
				ОбластьМакета.Параметры.НаименованиеОС	= УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(ВыборкаАктивы.Актив);
				ОбластьМакета.Параметры.КарточкаОС		= ВыборкаАктивы.Актив;
				ОбластьМакета.Параметры.НомерГруппы		= ВыборкаАктивы.АмортизационнаяГруппа;
				ОбластьМакета.Параметры.ИнвНомер		= ВыборкаАктивы.ИнвНомер;
				ОбластьМакета.Параметры.ДатаВвода		= ВыборкаАктивы.ДатаВвода;
				ТабличныйДокумент.Вывести(ОбластьМакета);
				НомСтр = НомСтр + 1;
			КонецЦикла;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка2П");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал2");
			ОбластьМакета.Параметры.Заполнить(ПредседательКомиссии);
			ОбластьМакета.Параметры.Заполнить(ЧленКомиссии1);
			ОбластьМакета.Параметры.Заполнить(ЧленКомиссии2);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
					
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка3");
			ТабличныйДокумент.Вывести(ОбластьМакета);

			ОбластьМакета = Макет.ПолучитьОбласть("Строка3");
			ИтогЦенаПродажи  = 0;
			ИтогНачСтоимость = 0;
			ВыборкаАктивы.Сбросить();
			Пока ВыборкаАктивы.Следующий() Цикл
				ЦенаПродажи  = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаАктивы.БалансоваяСтоимость, Документ.ВалютаДокумента, Документ.КурсДокумента, Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(), Документ.Дата);
				НачСтоимость = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаАктивы.НачСтоимость, Константы.ВалютаУправленческогоУчетаКомпании.Получить(), ?(НЕ ЗначениеЗаполнено(Документ.КурсВалютыУпр), 
											Документ.Дата, Документ.КурсВалютыУпр), Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(), Документ.Дата);
				
				ОбластьМакета.Параметры.НачАмортизация       = Формат(0,ФорматВыводаСуммы);
				ОбластьМакета.Параметры.ОстСтоимость         = Формат(0,ФорматВыводаСуммы);
				ОбластьМакета.Параметры.ЦенаПродажи          = Формат(ЦенаПродажи,ФорматВыводаСуммы);
				ОбластьМакета.Параметры.НачСтоимость         = Формат(НачСтоимость,ФорматВыводаСуммы);
				ОбластьМакета.Параметры.СрокПолезнИспПриПост = ВыборкаАктивы.СрокПолезногоИспользования;
				ОбластьМакета.Параметры.СпособАмортизации    = ВыборкаАктивы.СпособАмортизации;
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				ИтогЦенаПродажи  = ИтогЦенаПродажи  + ЦенаПродажи;
				ИтогНачСтоимость = ИтогНачСтоимость + НачСтоимость;
			КонецЦикла;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка3П");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал3");
			ОбластьМакета.Параметры.ИтогЦенаПродажи  = Формат(ИтогЦенаПродажи,ФорматВыводаСуммы);
			ОбластьМакета.Параметры.ИтогНачСтоимость = Формат(ИтогНачСтоимость,ФорматВыводаСуммы); 
			ОбластьМакета.Параметры.Заполнить(Отпустил);
			ОбластьМакета.Параметры.ГлавныйБухгалтерСдатчикаПредставление    = ?(СдатчикНашаОрганизация,ГлавныйБухгалтер.ГлавныйБухгалтерПредставление,"");
			ОбластьМакета.Параметры.ГлавныйБухгалтерСдатчика				 = ?(СдатчикНашаОрганизация,ГлавныйБухгалтер.ГлавныйБухгалтер,"");		
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
	        ОбластьМакета = Макет.ПолучитьОбласть("Шапка4");
			ОбластьМакета.Параметры.Заполнить(ГлавныйБухгалтер);
			ОбластьМакета.Параметры.Заполнить(мМОЛ);
			ОбластьМакета.Параметры.Заполнить(Получил);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
		КонецЕсли;
		
		// параметры табличного документа
		ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		ТабличныйДокумент.ОтображатьСетку     = Ложь;
		ТабличныйДокумент.ТолькоПросмотр      = Истина;		
				
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВводВЭксплуатациюАвтомобилей_ОС1";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьОС1()

// Формирует печатную форму "М-11"
// 
// Параметры:
//  ТабДокумент - табличный документ.
//
// Возвращаемое значение:
//  ТабДокумент - возвращает сформированный табличный документ.
//
Функция ПечатьМ11(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Зададим параметры документа
		ТабличныйДокумент.ПолеСверху = 0;
		ТабличныйДокумент.ПолеСлева  = 0;
		ТабличныйДокумент.ПолеСнизу  = 0;
		ТабличныйДокумент.ПолеСправа = 0;
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВводВЭксплуатациюАвтомобилей.ПФ_MXL_М11");
		
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьРазделителя     = Макет.ПолучитьОбласть("Разделитель");
		ОбластьИтогоПоСтранице = ОбластьРазделителя;
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// получим списываемые товары
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументАвтомобили.Автомобиль КАК Номенклатура,
		|	ДокументАвтомобили.Автомобиль.VIN КАК НоменклатурныйНомер,
		|	1 КАК Количество,
		|	ЕСТЬNULL(ОстаткиАвтомобилейОбороты.СуммаРасход,0) - ЕСТЬNULL(ОстаткиАвтомобилейОбороты.СуммаНДСРасход,0) +
		|	ЕСТЬNULL(КомплектацияАвтомобилейОбороты.СуммаРасход,0) - ЕСТЬNULL(КомплектацияАвтомобилейОбороты.СуммаНДСРасход,0) КАК Сумма,
		|	ЕСТЬNULL(ОстаткиАвтомобилейОбороты.СуммаРасход,0) - ЕСТЬNULL(ОстаткиАвтомобилейОбороты.СуммаНДСРасход,0) +
		|	ЕСТЬNULL(КомплектацияАвтомобилейОбороты.СуммаРасход,0) - ЕСТЬNULL(КомплектацияАвтомобилейОбороты.СуммаНДСРасход,0) КАК Цена,
		|
		|	ДокументАвтомобили.Ссылка.СкладКомпании.МОЛ.Должность КАК МОЛДолжностьОтправитель,
		|	ДокументАвтомобили.Ссылка.СкладКомпании.МОЛ КАК МОЛПредставлениеОтправитель,
		|	ДокументАвтомобили.Ссылка.МОЛ.Должность КАК МОЛДолжностьПолучатель,
		|	ДокументАвтомобили.Ссылка.МОЛ КАК МОЛПредставлениеПолучатель
		|
		|ИЗ Документ.ВводВЭксплуатациюАвтомобилей.Автомобили КАК ДокументАвтомобили
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиАвтомобилей.Обороты(
		|		,
		|		,
		|		Регистратор,
		|		Автомобиль В (&СписокАвтомобилей)
		|			И СкладКомпании = &Склад) КАК ОстаткиАвтомобилейОбороты
		|		ПО ДокументАвтомобили.Ссылка = ОстаткиАвтомобилейОбороты.Регистратор
		|		И ДокументАвтомобили.Автомобиль = ОстаткиАвтомобилейОбороты.Автомобиль
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КомплектацияАвтомобилей.Обороты(
		|		,
		|		,
		|		Регистратор,
		|		Автомобиль В (&СписокАвтомобилей)
		|			И СкладКомпании = &Склад) КАК КомплектацияАвтомобилейОбороты
		|ПО ДокументАвтомобили.Ссылка = КомплектацияАвтомобилейОбороты.Регистратор
		|	И ДокументАвтомобили.Автомобиль = КомплектацияАвтомобилейОбороты.Автомобиль
		|ГДЕ
		|	ДокументАвтомобили.Ссылка = &Документ";
		
		РежимВыводаКодаВДокументах = УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах().Имя;
		Если РежимВыводаКодаВДокументах = "Артикул" Тогда
			СтрокаЗамены = "ПартииТоваровКомпанииОбороты.Номенклатура.Артикул";
		ИначеЕсли РежимВыводаКодаВДокументах = "КодИАртикул" Тогда
			СтрокаЗамены = "ПартииТоваровКомпанииОбороты.Номенклатура.Код+"" / ""+ПартииТоваровКомпанииОбороты.Номенклатура.Артикул";
		ИначеЕсли РежимВыводаКодаВДокументах = "АртикулИПроизводитель" Тогда
			СтрокаЗамены = "ПартииТоваровКомпанииОбороты.Номенклатура.Артикул";
		ИначеЕсли РежимВыводаКодаВДокументах = "АртикулКодПроизводитель" Тогда
			СтрокаЗамены = "ПартииТоваровКомпанииОбороты.Номенклатура.Код+"" / ""+ПартииТоваровКомпанииОбороты.Номенклатура.Артикул";
		ИначеЕсли РежимВыводаКодаВДокументах = "КодИПроизводитель" Тогда
			СтрокаЗамены = "ПартииТоваровКомпанииОбороты.Номенклатура.Код";
		Иначе
			СтрокаЗамены = "ПартииТоваровКомпанииОбороты.Номенклатура.Код";
		КонецЕсли;
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса, "<НоменклатурныйНомер>", СтрокаЗамены);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("СписокАвтомобилей", Документ.Автомобили.ВыгрузитьКолонку("Автомобиль"));
		Запрос.УстановитьПараметр("Склад", Документ.СкладКомпании);
		Запрос.УстановитьПараметр("Документ", Документ.Ссылка);
		ВыборкаСтрок = Запрос.Выполнить().Выгрузить();
		
		Затребовал = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Затребовал", "Затребовал");
		Разрешил   = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Разрешил", "Разрешил");
		
		// дата документа
		ДатаДокумента = Документ.Дата;
		
		// выводим шапку
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ОбластьЗаголовок.Параметры.Заполнить(Затребовал);
		ОбластьЗаголовок.Параметры.Заполнить(Разрешил);
		ОбластьЗаголовок.Параметры.Заголовок = "Требование-накладная № "
			+ УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ) + " от " + Формат(Документ.Дата, "ДФ = дд.ММ.гггг");
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		ОбластьЗаголовок.Параметры.Организация     = Документ.Организация;
		ОбластьЗаголовок.Параметры.КодОКПО         = Документ.Организация.КодПоОКПО;
		ОбластьЗаголовок.Параметры.ДатаСоставления = Формат(Документ.Дата, "ДФ = дд.ММ.гггг");
		ОбластьЗаголовок.Параметры.Склад           = Документ.СкладКомпании;
		
		// Выводим именно получателя, а не подразделение, откуда списали.
		ОбластьЗаголовок.Параметры.ПодразделениеКомпании = Документ.ПодразделениеПолучатель;
		ТабличныйДокумент.Вывести(ОбластьЗаголовок); // конец шапки
		
		мМОЛ = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "МОЛ", "МОЛ");
		МолОтправитель = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "МОЛОтправитель", "МОЛОтправитель");
		
		// Выводим подвал.
		ОбластьПодвал.Параметры.Заполнить(мМОЛ);
		ОбластьПодвал.Параметры.Заполнить(МолОтправитель);
		ТабДокументПодвал = Новый ТабличныйДокумент;
		ТабДокументПодвал.Вывести(ОбластьПодвал);
		 
		// Сразу два, т.к. выводим на второй странице только.
		НомерСтраницы = 2;
		НомерСтраницыПред = НомерСтраницы;
		
		// Выводим заголовок таблицы.
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
		
		// Выводим многострочную часть документа.
		Для Каждого Строка Из ВыборкаСтрок Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			ОбластьСтрока.Параметры.Заполнить(Строка);
			ОбластьСтрока.Параметры.Количество                   = Формат(Строка.Количество, ФорматВыводаКоличества);
			ОбластьСтрока.Параметры.Цена                         = Формат(Строка.Цена, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.Сумма                        = Формат(Строка.Сумма, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод          = "796";
			ОбластьСтрока.Параметры.ЕдиницаИзмеренияНаименование = "шт";
			ОбластьСтрока.Параметры.Счет					     = "";
			
			ОбластьСтрока.Параметры.МатериалНаименование =
				УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Строка.Номенклатура);
			
			// Доп. области.
			мсвДопОбластиПодвала = Неопределено;
			Если ВыборкаСтрок.Индекс(Строка) = ВыборкаСтрок.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ТабДокументПодвал);
			КонецЕсли;
			
			// Выводим строку, делая проверку попадания на лист.
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, , Документ, мсвДопОбластиПодвала);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы; 
			КонецЕсли;
		КонецЦикла; // конец многострочной части
		
		ТабличныйДокумент.Вывести(ТабДокументПодвал); // конец подвала
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВводВЭксплуатациюАвтомобилей_М11";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьМ11()

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//	Адрес   - адрес структуры данных во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВводВЭксплуатациюАвтомобилейАвтомобили.Актив КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,
	|	МИНИМУМ(ВводВЭксплуатациюАвтомобилейАвтомобили.НомерСтроки) КАК Порядок,
	|	СУММА(1) КАК Количество,
	|	СУММА(0) КАК Цена,
	|	МАКСИМУМ(ВводВЭксплуатациюАвтомобилейАвтомобили.Актив.Номенклатура.СтавкаНДС) КАК СтавкаНДС,
	|	СУММА(0) КАК СуммаНДС
	|ИЗ
	|	Документ.ВводВЭксплуатациюАвтомобилей.Автомобили КАК ВводВЭксплуатациюАвтомобилейАвтомобили
	|ГДЕ
	|	ВводВЭксплуатациюАвтомобилейАвтомобили.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВводВЭксплуатациюАвтомобилейАвтомобили.Актив,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВводВЭксплуатациюАвтомобилей.Организация КАК Организация,
	|	ВводВЭксплуатациюАвтомобилей.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ВводВЭксплуатациюАвтомобилей.СкладКомпании КАК СкладКомпании,
	|	ВводВЭксплуатациюАвтомобилей.СкладКомпании.ТипЦенРозничнойТорговли КАК ТипЦены
	|ИЗ
	|	Документ.ВводВЭксплуатациюАвтомобилей КАК ВводВЭксплуатациюАвтомобилей
	|ГДЕ
	|	ВводВЭксплуатациюАвтомобилей.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций 			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивПодразделенийКомпании = УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ПодразделениеКомпании").ВыгрузитьКолонку(0);
	МассивСкладов    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "СкладКомпании").ВыгрузитьКолонку(0);
	МассивТиповЦен    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ТипЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьПодразделениеКомпании", ?(МассивПодразделенийКомпании.Количество() = 1, МассивПодразделенийКомпании[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьТипЦены",     ?(МассивТиповЦен.Количество() = 1,    МассивТиповЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Ложь);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЭтикеток");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("НеПересчитыватьЦены");
	СтруктураДействий.Вставить("ЦеныИзДокументаОснования");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	Товары.ЗаполнитьЗначения(СтруктураДействий.ЗаполнитьОрганизацию, "Организация");
	
	Активы = Товары.ВыгрузитьКолонку("Номенклатура");
	ПараметрыЦены = Новый Структура;
	ПараметрыЦены.Вставить("Актив", Активы);
	ТаблицаАктивов = УправлениеПрочимиАктивами.ПолучитьОстаткиАктивов(ПараметрыЦены);
	УсловиеПоиска = Новый Структура("Номенклатура");
	Для Каждого ТекущаяСтрока Из ТаблицаАктивов Цикл
		УсловиеПоиска.Номенклатура = ТекущаяСтрока.Актив;
		НайденныеСтроки = Товары.НайтиСтроки(УсловиеПоиска);
		Для Каждого Строка Из НайденныеСтроки Цикл
			Строка.Цена = ТекущаяСтрока.БалансоваяСтоимостьРегл - ТекущаяСтрока.АмортизацияРегл;
			Строка.СуммаНДС = Окр(Строка.Цена * Строка.СтавкаНДС.Ставка / 100, 2);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//	Адрес - адрес структуры данных во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЦенников(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВводВЭксплуатациюАвтомобилейАвтомобили.Актив КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,
	|	МИНИМУМ(ВводВЭксплуатациюАвтомобилейАвтомобили.НомерСтроки) КАК Порядок,
	|	СУММА(1) КАК Количество,
	|	СУММА(0) КАК Цена,
	|	МАКСИМУМ(ВводВЭксплуатациюАвтомобилейАвтомобили.Актив.Номенклатура.СтавкаНДС) КАК СтавкаНДС,
	|	СУММА(0) КАК СуммаНДС
	|ИЗ
	|	Документ.ВводВЭксплуатациюАвтомобилей.Автомобили КАК ВводВЭксплуатациюАвтомобилейАвтомобили
	|ГДЕ
	|	ВводВЭксплуатациюАвтомобилейАвтомобили.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВводВЭксплуатациюАвтомобилейАвтомобили.Актив,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВводВЭксплуатациюАвтомобилей.Организация КАК Организация,
	|	ВводВЭксплуатациюАвтомобилей.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ВводВЭксплуатациюАвтомобилей.СкладКомпании КАК СкладКомпании,
	|	ВводВЭксплуатациюАвтомобилей.СкладКомпании.ТипЦенРозничнойТорговли КАК ТипЦены
	|ИЗ
	|	Документ.ВводВЭксплуатациюАвтомобилей КАК ВводВЭксплуатациюАвтомобилей
	|ГДЕ
	|	ВводВЭксплуатациюАвтомобилей.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций 			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивПодразделенийКомпании = УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ПодразделениеКомпании").ВыгрузитьКолонку(0);
	МассивСкладов    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "СкладКомпании").ВыгрузитьКолонку(0);
	МассивТиповЦен    			= УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ТипЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьПодразделениеКомпании", ?(МассивПодразделенийКомпании.Количество() = 1, МассивПодразделенийКомпании[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьВидЦены",     ?(МассивТиповЦен.Количество() = 1,    МассивТиповЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЦенников");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("НеПересчитыватьЦены");
	СтруктураДействий.Вставить("ЦеныИзДокументаОснования");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	Товары.ЗаполнитьЗначения(СтруктураДействий.ЗаполнитьОрганизацию, "Организация");
	
	Активы = Товары.ВыгрузитьКолонку("Номенклатура");
	ПараметрыЦены = Новый Структура;
	ПараметрыЦены.Вставить("Актив", Активы);
	ТаблицаАктивов = УправлениеПрочимиАктивами.ПолучитьОстаткиАктивов(ПараметрыЦены);
	УсловиеПоиска = Новый Структура("Номенклатура");
	Для Каждого ТекущаяСтрока Из ТаблицаАктивов Цикл
		УсловиеПоиска.Номенклатура = ТекущаяСтрока.Актив;
		НайденныеСтроки = Товары.НайтиСтроки(УсловиеПоиска);
		Для Каждого Строка Из НайденныеСтроки Цикл
			Строка.Цена = ТекущаяСтрока.БалансоваяСтоимостьРегл - ТекущаяСтрока.АмортизацияРегл;
			Строка.СуммаНДС = Окр(Строка.Цена * Строка.СтавкаНДС.Ставка / 100, 2);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВыводИзЭксплуатацииАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПеремещениеАктивов);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйСкладскойОрдерНаАвтомобили);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СписаниеАктивов);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ВводВЭксплуатациюАвтомобилей);

КонецФункции

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
// 	Параметры - Структура - Вспомогательные параметры. 
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ВводВЭксплуатациюАвтомобилей");
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Автомобили");
	
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Автомобили");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли