// Модуль объекта документа "Таможенная декларация импорт"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=Истина) Экспорт
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ИскомыеСвойства = Новый Массив();
		ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.КодТаможни);
		ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Контрагент, Истина, Истина, ИскомыеСвойства);
		КодТаможни = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("КодТаможни", ЗначенияСвойствОбъекта);
	КонецЕсли;
	
	ЗачетАвансов.Очистить();
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	ЗачетАвансов.Очистить();
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	СписокРазделов = "";
	Для Каждого СтрокаРаздела Из Разделы Цикл
		Таблица = ?(ХозОперация = Справочники.ХозОперации.ТаможеннаяДекларацияИмпорт, Товары, Автомобили);
		НайденныеСтроки = Таблица.НайтиСтроки(Новый Структура("НомерРаздела", СтрокаРаздела.НомерРаздела));
		СтруктураСумм = Новый Структура("СуммаПошлины,СуммаНДС", СтрокаРаздела.СуммаПошлины, СтрокаРаздела.СуммаНДС);
		Для Каждого Строка Из НайденныеСтроки Цикл
			СтруктураСумм.СуммаПошлины = СтруктураСумм.СуммаПошлины - Строка.СуммаПошлины; 
			СтруктураСумм.СуммаНДС     = СтруктураСумм.СуммаНДС - Строка.СуммаНДС;
		КонецЦикла;
		
		Если СтруктураСумм.СуммаПошлины <> 0 ИЛИ СтруктураСумм.СуммаНДС <> 0 Тогда
			СписокРазделов = СписокРазделов +?(ПустаяСтрока(СписокРазделов), "",", ") + СтрокаРаздела.НомерРаздела;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СписокРазделов) Тогда
		ВывестиСообщениеПоКоду("2", , , , Отказ, СписокРазделов);
	КонецЕсли;
	
	// Проверим, что указано в качестве аванса не больше, чем сумма документа
	РасчетыСКонтрагентамиСервер.ПроверитьКорректностьЗачетаАвансов(ЭтотОбъект, Отказ);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// почистим ненужную ТЧ
	Таблица = ?(ХозОперация = Справочники.ХозОперации.ТаможеннаяДекларацияИмпорт, Автомобили, Товары);
	Таблица.Очистить();
	
	// корректируем количество базовое 
	Для Каждого Строка Из Товары Цикл
		Если НЕ ЗначениеЗаполнено(Строка.КоличествоБазовое) Тогда
			Строка.КоличествоБазовое = Строка.Количество * Строка.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьЗаполнениеНомераГТД(Отказ);
	
	Отказ = Отказ ИЛИ Документы.ТаможеннаяДекларацияИмпорт.ЗаполнитьГТДПоНомерам(ЭтотОбъект);
	
	// Проверим заполнение РНПТ у послеживаемого товара
	Если ХозОперация = Справочники.ХозОперации.ТаможеннаяДекларацияИмпорт Тогда
		УчетПрослеживаемыхТоваровСервер.ПроверитьЗаполнениеРНПТПрослеживаемогоТовара(ЭтотОбъект);
	Иначе
		УчетПрослеживаемыхТоваровСервер.ПроверитьЗаполнениеРНПТПрослеживаемогоТовара(ЭтотОбъект, "Автомобили", "Автомобиль");
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПартиямПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если (Не Отказ) И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И ХозОперация = Справочники.ХозОперации.ТаможеннаяДекларацияИмпортАвтомобилей Тогда
		
		ГТДАвтомобилей = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Автомобили.ВыгрузитьКолонку("Автомобиль"), "ГТД");
		
		Для Каждого Строка Из Автомобили Цикл
			
			ГТД = ГТДАвтомобилей.Получить(Строка.Автомобиль);
			
			Если ЗначениеЗаполнено(Строка.ГТД) И Строка.ГТД <> ГТД Тогда
				
				Автомобиль = Строка.Автомобиль.ПолучитьОбъект();
				Автомобиль.ГТД = Строка.ГТД;
				Автомобиль.ОбменДанными.Загрузка = Истина;
				Автомобиль.Записать();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// определим необходимость формирования корректирующих проводок
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(Дата);
	
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	
	// выполним движения по взаиморасчетам с контрагентом
	Если Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыКомпании;
		НаборЗаписейВзаиморасчеты.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейВзаиморасчеты.РежимПроведения = РежимПроведения;
		НаборЗаписейВзаиморасчеты.Контрагент = Контрагент;
		НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
		НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем = Ложь;
		НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок =
			СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		НаборЗаписейВзаиморасчеты.Сумма = СуммаДокумента;
		НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц = 0;
		
		Отказ = НЕ НаборЗаписейВзаиморасчеты.Расход() ИЛИ Отказ;
	КонецЕсли;
	
	Документы.ТаможеннаяДекларацияИмпорт.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	Документы.ТаможеннаяДекларацияИмпорт.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	// проведем партии товаров и ГТД
	Отказ = НЕ ПровестиПоПартиям(РежимПроведения, Ссылка) ИЛИ Отказ;
	
	ПодразделениеПодразделениеКомпании = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ПодразделениеКомпании, Дата);
	ПодразделениеДоговорВзаиморасчетов = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ДоговорВзаиморасчетов.ПодразделениеКомпании, Дата);
	
	НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
	НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДоходыИРасходы.ВУпрВалюте=(ВалютаДокумента = Константы.ВалютаУправленческогоУчетаКомпании.Получить());
	НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=СтатьяДоходовИРасходов;
	НаборЗаписейДоходыИРасходы.Расход = СуммаТаможенногоШтрафа;
	СуммаУслугТаможни = СуммаТаможенногоШтрафа; 
	Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
	
	// Если балансовые подразделение договора и подразделения склад не равны, то сформируем корректирующие проводки.
	Если ВедетсяБалансПоПодразделению И (ПодразделениеДоговорВзаиморасчетов<>ПодразделениеКомпании) Тогда
		НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
		
		НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДоходыИРасходы.Подразделение          = ДоговорВзаиморасчетов.ПодразделениеКомпании;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Ложь;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
		НаборЗаписейДоходыИРасходы.Расход                 = СуммаУслугТаможни;
		
		Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		
		НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДоходыИРасходы.Подразделение          = ПодразделениеКомпании;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте             =(ВалютаДокумента = Константы.ВалютаУправленческогоУчетаКомпании.Получить());
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
		НаборЗаписейДоходыИРасходы.Доход                  = СуммаУслугТаможни;
		
		Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
	КонецЕсли;
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	// двигаем границу последовательности взаиморасчетов
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьЗаполнениеНомераГТД(Отказ)
	
	// Получим признак того, что контрагент из страны ЕАЭС
	КонтрагентИзЕАЭС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "СтранаРегистрацииЕАЭС");
	
	ПроверитьТабличнуюЧастьНаЗаполнениеНомераГТД("Товары", "Номенклатура", КонтрагентИзЕАЭС, Отказ);
	ПроверитьТабличнуюЧастьНаЗаполнениеНомераГТД("Автомобили", "Автомобиль", КонтрагентИзЕАЭС, Отказ);
	
КонецПроцедуры

Процедура ПроверитьТабличнуюЧастьНаЗаполнениеНомераГТД(ИмяТабличнойЧасти, ИмяКолонкиТовара, КонтрагентИзЕАЭС, Отказ)
	
	ПрослеживаемыеТовары = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		ЭтотОбъект[ИмяТабличнойЧасти].ВыгрузитьКолонку(ИмяКолонкиТовара),
		"Прослеживаемый");
	
	Для Каждого СтрокаТовара Из ЭтотОбъект[ИмяТабличнойЧасти] Цикл
		
		Если КонтрагентИзЕАЭС И ПрослеживаемыеТовары.Получить(СтрокаТовара[ИмяКолонкиТовара]) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаТовара.НомерДляСФ) Тогда
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				ИмяТабличнойЧасти,
				СтрокаТовара.НомерСтроки,
				"НомерДляСФ");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Не заполнена колонка ""№ декларации для с/ф"" в строке %1 списка ""%2""'"),
					СтрокаТовара.НомерСтроки,
					ИмяТабличнойЧасти),,
				ПутьКТабличнойЧасти,
				ЭтотОбъект,
				Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Поступление товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеТоваров(
	ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,
		ТекстЗаполнения, СтандартнаяОбработка, "ТипЦен,ВалютаДокумента") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Товары.Очистить();
	
	ХозОперация = Справочники.ХозОперации.ТаможеннаяДекларацияИмпорт;
	
	Если Документы.ТаможеннаяДекларацияИмпорт.ПроверитьДокументОснованиеИЗаполнить(ЭтотОбъект) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Документы.ТаможеннаяДекларацияИмпорт.ЗаполнитьТабличнуюЧастьТоварыПоПартии(ЭтотОбъект, ДанныеЗаполнения);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеТоваров()

// Производит заполнение объекта на основании документа "Поступление автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеАвтомобилей(
	ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВалютаДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,
		ТекстЗаполнения, СтандартнаяОбработка, "ТипЦен,ВалютаДокумента") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Автомобили.Очистить();
	
	ХозОперация = Справочники.ХозОперации.ТаможеннаяДекларацияИмпортАвтомобилей;
	
	Если Документы.ТаможеннаяДекларацияИмпорт.ПроверитьДокументОснованиеИЗаполнить(ЭтотОбъект, Ложь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Документы.ТаможеннаяДекларацияИмпорт.ЗаполнитьТабличнуюЧастьАвтомобилиПоПартии(ЭтотОбъект, ДанныеЗаполнения);
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ПоступлениеАвтомобилей()

#КонецОбласти

#Область ФормированиеДвиженийДокумента

// возвращает выборку по шапке
//
// Параметры:
//  ДокументСсылка - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  Выборка - выборка по шапке
//
Функция ПолучитьШапкуДокумента(ДокументСсылка)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	Док.Проект КАК Проект,
	/////////// ПРИВАТ ////////////
	|	Док.СкладКомпании КАК СкладКомпании,
	|	Док.СуммаДокумента КАК СуммаДокумента,
	|	Док.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Док.ДокументОснование КАК ДокументОснование,
	|	Док.Организация КАК Организация
	|
	|ИЗ
	|	Документ."+Метаданные().Имя+" КАК Док
	|ГДЕ
	|	Док.Ссылка=&Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции // ПолучитьШапкуДокумента()

// формирует движения документа по партионным регистрам
//
// Параметры:
//  Режим           - режим проведения (оперативный/неоперативный)
//  ДокументСсылка  - ссылка на документ который надо допровести по партиям.
//
// Возвращаемое значение:
//  Возвращает Истина - все ОК, ложь - чего-то не так.
//
Функция ПровестиПоПартиям(Режим, ДокументСсылка)
	
	Отказ = Ложь;
	
	// получим шапку документа
	ШапкаДокумента = ПолучитьШапкуДокумента(ДокументСсылка);
	
	// Проверим, если подразделение проводится по партиям "отложенно", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям=Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента = ШапкаДокумента;
	Отказ = НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	
	Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
		Возврат НЕ Отказ;
	КонецЕсли;
	
	Если ДокументСсылка.ХозОперация = Справочники.ХозОперации.ТаможеннаяДекларацияИмпортАвтомобилей Тогда
		Возврат ПровестиПоАвтомобилям(ШапкаДокумента, Режим) ИЛИ НЕ Отказ;
	КонецЕсли;
	
	// получим данные по товарам и ГТД
	РезультатЗапросаПоТоварам = ПолучитьТаблицуТоваров(ШапкаДокумента);
	
	Если РезультатЗапросаПоТоварам.Пустой() Тогда
		Возврат НЕ Отказ;
	КонецЕсли;
	
	НаборПартии = Движения.ПартииТоваровКомпании;
	НаборГТД = Движения.ГТДПартийТоваровКомпании;
	НаборГТД.Загрузить(ПолучитьТаблицуСписываемыхГТДТоваров(ШапкаДокумента));

	// подготовим валюты и курсы
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл, ШапкаДокумента.Дата);
	КурсРегл = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	Если ЗначениеЗаполнено(ШапкаДокумента.КурсВалютыУпр) Тогда
		КурсУпр = ШапкаДокумента.КурсВалютыУпр;
	Иначе
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, ШапкаДокумента.Дата);
		КурсУпр = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	КонецЕсли;
	
	ВыборкаСуммы = РезультатЗапросаПоТоварам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаСуммы.Следующий();
	ОбщаяТаможеннаяСтоимость = ВыборкаСуммы.ТаможеннаяСтоимость;
	СуммаЗаЕд = ?(ОбщаяТаможеннаяСтоимость = 0, 0, СуммаТаможенногоСбора / ОбщаяТаможеннаяСтоимость);
	
	ВыборкаТоваров = ВыборкаСуммы.Выбрать();
	
	СписанныеПартии = "";
	ОшибочныеПартии = "";
	
	РаспределяемаяСумма = СуммаТаможенногоСбора;
	
	Пока ВыборкаТоваров.Следующий() Цикл
		Если ВыборкаТоваров.ПартияСписана Тогда
			СписанныеПартии = СписанныеПартии + ?(СписанныеПартии = "", ВыборкаТоваров.Партия, "" + Символы.ПС + ВыборкаТоваров.Партия);
			Продолжить;
		ИначеЕсли ВыборкаТоваров.ПоПартииБылиДвижения Тогда
			ОшибочныеПартии = ОшибочныеПартии + ?(ОшибочныеПартии = "", ВыборкаТоваров.Партия, "" + Символы.ПС + ВыборкаТоваров.Партия);
			Продолжить;
		КонецЕсли;
		
		НоваяЗаписьПартии = НаборПартии.Добавить();
		НоваяЗаписьПартии.Регистратор                = ШапкаДокумента.Ссылка;
		НоваяЗаписьПартии.Период                     = ШапкаДокумента.Дата;
		НоваяЗаписьПартии.ВидДвижения                = ВидДвиженияНакопления.Приход;
		НоваяЗаписьПартии.Номенклатура               = ВыборкаТоваров.Номенклатура;
		НоваяЗаписьПартии.ХарактеристикаНоменклатуры = ВыборкаТоваров.ХарактеристикаНоменклатуры;
		НоваяЗаписьПартии.СкладКомпании              = ВыборкаТоваров.Склад;
		НоваяЗаписьПартии.Организация                = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(ШапкаДокумента.Организация, НоваяЗаписьПартии.СкладКомпании, НоваяЗаписьПартии.Период);
		НоваяЗаписьПартии.Партия                     = ВыборкаТоваров.Партия;
		НоваяЗаписьПартии.СтатусПартии               = ВыборкаТоваров.СтатусПартии;
		НоваяЗаписьПартии.ХозОперация                = ШапкаДокумента.ХозОперация;
		
		// посчитаем суммы
		РасчетнаяСумма      = Окр(ВыборкаТоваров.ТаможеннаяСтоимость * СуммаЗаЕд, 2);
		РаспределяемаяСумма = РаспределяемаяСумма - РасчетнаяСумма;
		
		НоваяЗаписьПартии.Сумма          = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаТоваров.СуммаВсего+РасчетнаяСумма, ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента, ВалютаРегл, КурсРегл);
		НоваяЗаписьПартии.СуммаУпр       = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаТоваров.СуммаВсего+РасчетнаяСумма, ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента, ВалютаУпр, КурсУпр);
		НоваяЗаписьПартии.СуммаНДС       = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаТоваров.СуммаНДС, ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента, ВалютаРегл, КурсРегл);
		НоваяЗаписьПартии.СуммаНДСУпр    = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаТоваров.СуммаНДС, ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента, ВалютаУпр, КурсУпр);
		НоваяЗаписьПартии.СуммаБезНДС    = НоваяЗаписьПартии.Сумма - НоваяЗаписьПартии.СуммаНДС;
		НоваяЗаписьПартии.СуммаБезНДСУпр = НоваяЗаписьПартии.СуммаУпр - НоваяЗаписьПартии.СуммаНДСУпр;
		
		// установим ГТД по товару
		Если ЗначениеЗаполнено(ВыборкаТоваров.ГТД) Тогда
			НоваяЗаписьГТД = НаборГТД.Добавить();
			НоваяЗаписьГТД.Регистратор                = ШапкаДокумента.Ссылка;
			НоваяЗаписьГТД.Период                     = ШапкаДокумента.Дата;
			НоваяЗаписьГТД.ВидДвижения                = ВидДвиженияНакопления.Приход;
			НоваяЗаписьГТД.ХозОперация                = ШапкаДокумента.ХозОперация;
			НоваяЗаписьГТД.Номенклатура               = ВыборкаТоваров.Номенклатура;
			НоваяЗаписьГТД.ХарактеристикаНоменклатуры = ВыборкаТоваров.ХарактеристикаНоменклатуры;
			НоваяЗаписьГТД.СкладКомпании              = ВыборкаТоваров.Склад;
			НоваяЗаписьГТД.Организация                = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(ШапкаДокумента.Организация, НоваяЗаписьГТД.СкладКомпании, НоваяЗаписьГТД.Период);
			НоваяЗаписьГТД.Партия                     = ВыборкаТоваров.Партия;
			НоваяЗаписьГТД.ГТД                        = ВыборкаТоваров.ГТД;
			НоваяЗаписьГТД.Количество                 = ВыборкаТоваров.Количество;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если не распределилась сумма в 0 тогда, закинем корректировку на последнюю строку.
	Если РаспределяемаяСумма <> 0 И ПустаяСтрока(СписанныеПартии) И ПустаяСтрока(ОшибочныеПартии) Тогда
		НоваяЗаписьПартии.Сумма    = НоваяЗаписьПартии.Сумма + РаботаСКурсамиВалют.ПересчитатьВВалюту(РаспределяемаяСумма, ШапкаДокумента.ВалютаДокумента, ВалютаРегл, ШапкаДокумента.Дата);
		НоваяЗаписьПартии.СуммаУпр = НоваяЗаписьПартии.СуммаУпр + РаботаСКурсамиВалют.ПересчитатьВВалюту(РаспределяемаяСумма, ШапкаДокумента.ВалютаДокумента, ВалютаУпр, ШапкаДокумента.Дата);
		НоваяЗаписьПартии.СуммаБезНДС = НоваяЗаписьПартии.Сумма - НоваяЗаписьПартии.СуммаНДС;
		НоваяЗаписьПартии.СуммаБезНДСУпр = НоваяЗаписьПартии.СуммаУпр - НоваяЗаписьПартии.СуммаНДСУпр;
	КонецЕсли;
	
	КУдалению = Новый Массив();
	
	Для Каждого Запись Из НаборПартии Цикл
		
		Если Запись.Сумма = 0
			И Запись.СуммаУпр = 0
			И Запись.СуммаНДС = 0
			И Запись.СуммаНДСУпр = 0
			И Запись.СуммаБезНДС = 0
			И Запись.СуммаБезНДСУпр = 0 Тогда
			
			КУдалению.Добавить(Запись);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Запись Из КУдалению Цикл
		
		НаборПартии.Удалить(Запись);
		
	КонецЦикла;
	
	НаборЗаписейДиР = Движения.ДоходыИРасходы;
	
	// определим необходимость формирования корректирующих проводок
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
	БалансовоеПодразделениеДоговора = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании, ШапкаДокумента.Дата);
	
	// БАЛАНС: определим необходимость формирования корректирующих проводок по партиям.
	Если ВедетсяБалансПоПодразделению И Движения.ПартииТоваровКомпании.Количество()> 0 Тогда
		
		ДвиженияПартииТоваровКомпании = Движения.ПартииТоваровКомпании.Выгрузить(, "СкладКомпании, СуммаУпр");
		ДвиженияПартииТоваровКомпании.Свернуть("СкладКомпании", "СуммаУпр");
		ДвиженияПартииТоваровКомпании.Колонки.Добавить("Подразделение");
		
		Для Каждого ТекущаяСтрока Из ДвиженияПартииТоваровКомпании Цикл
			ТекущаяСтрока.Подразделение = ТекущаяСтрока.СкладКомпании.ПодразделениеКомпании; 
		КонецЦикла;
		
		ДвиженияПартииТоваровКомпании.Свернуть("Подразделение", "СуммаУпр");
		
		СуммаКорректировки = 0;
		Для Каждого ТекущаяСтрока Из ДвиженияПартииТоваровКомпании Цикл
			Если ТекущаяСтрока.СуммаУпр = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПодразделениеСклада = ТекущаяСтрока.Подразделение;
			БалансовоеПодразделениеСклада = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ШапкаДокумента.СкладКомпании.ПодразделениеКомпании, ШапкаДокумента.Дата);
			
			Если БалансовоеПодразделениеДоговора = БалансовоеПодразделениеСклада Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДиР.ШапкаДокумента         = ШапкаДокумента;
			НаборЗаписейДиР.Подразделение          = ПодразделениеСклада;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.ВУпрВалюте             = Истина;
			НаборЗаписейДиР.Доход                  = ТекущаяСтрока.СуммаУпр;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			
			СуммаКорректировки = СуммаКорректировки + ТекущаяСтрока.СуммаУпр;
		КонецЦикла;
		
		// БАЛАНС: определим необходимость формирования корректирующих проводок по взаиморасчетам.
		Если (НЕ СуммаКорректировки = 0) Тогда
			
			НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДиР.ШапкаДокумента         = ШапкаДокумента;
			НаборЗаписейДиР.Подразделение          = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.ВУпрВалюте             = Истина;
			НаборЗаписейДиР.Расход                 = СуммаКорректировки;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СписанныеПартии) Тогда
		ВывестиСообщениеПоКоду("4", , , , Отказ,СписанныеПартии);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОшибочныеПартии) Тогда
		ВывестиСообщениеПоКоду("5", , , , Отказ,ОшибочныеПартии);
	КонецЕсли;
	
	// двигаем границу последовательности партий
	Если Ссылка <> ДокументСсылка Тогда
		
		РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоПартиямПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		
	КонецЕсли;
	
	РаботаСГраницами.СдвинутьГраницуПартий(ДокументСсылка, ДополнительныеСвойства, Движения);
	
	Возврат НЕ Отказ;
	
КонецФункции // ПровестиПоПартиям()

// возвращает таблицу товаров
//
// Параметры:
//  ШапкаДокумента - Выборка по шапке.
//
// Возвращаемое значение:
//  Выборка - выборка по товарам
//
Функция ПолучитьТаблицуТоваров(ШапкаДокумента)
	
	ПартияТоваровОтрицательныхОстатков = Константы.ПартияТоваровОтрицательныхОстатков.Получить();
	
	СтратегияСписанияПартийТоваровПоДатам = ПолучитьСтратегиюСписанияПоДатам(
		ШапкаДокумента.СкладКомпании,
		ШапкаДокумента.Организация,
		ШапкаДокумента.Дата);
	
	СписаниеПоСредней =
		СтратегияСписанияПартийТоваровПоДатам = Перечисления.СтратегияСписанияПартийТоваровПоДатам.Средняя;
	
	Менеджер = Новый МенеджерВременныхТаблиц;
	
	// корректирование себестоимости товара на остатках
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаможеннаяДекларацияИмпортТовары.Номенклатура КАК Номенклатура,
	|	ТаможеннаяДекларацияИмпортТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ТаможеннаяДекларацияИмпортТовары.КоличествоБазовое) КАК Количество,
	|	СУММА(ТаможеннаяДекларацияИмпортТовары.СуммаПошлины) КАК СуммаПошлины,
	|	СУММА(ТаможеннаяДекларацияИмпортТовары.СуммаНДС) КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА &СписаниеПоСредней
	|			ТОГДА &ПартияТоваровОтрицательныхОстатков
	|		ИНАЧЕ ТаможеннаяДекларацияИмпортТовары.Партия
	|	КОНЕЦ КАК Партия,
	|	ТаможеннаяДекларацияИмпортТовары.Склад КАК Склад,
	|	ТаможеннаяДекларацияИмпортТовары.ГТД КАК ГТД,
	|	ТаможеннаяДекларацияИмпортТовары.СуммаПошлины + ТаможеннаяДекларацияИмпортТовары.СуммаНДС КАК СуммаВсего,
	|	ТаможеннаяДекларацияИмпортТовары.ТаможеннаяСтоимость КАК ТаможеннаяСтоимость
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпортТовары
	|ГДЕ
	|	ТаможеннаяДекларацияИмпортТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаможеннаяДекларацияИмпортТовары.Номенклатура,
	|	ТаможеннаяДекларацияИмпортТовары.Склад,
	|	ТаможеннаяДекларацияИмпортТовары.ХарактеристикаНоменклатуры,
	|	ТаможеннаяДекларацияИмпортТовары.ГТД,
	|	ТаможеннаяДекларацияИмпортТовары.СуммаПошлины + ТаможеннаяДекларацияИмпортТовары.СуммаНДС,
	|	ТаможеннаяДекларацияИмпортТовары.ТаможеннаяСтоимость,
	|	ВЫБОР
	|		КОГДА &СписаниеПоСредней
	|			ТОГДА &ПартияТоваровОтрицательныхОстатков
	|		ИНАЧЕ ТаможеннаяДекларацияИмпортТовары.Партия
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
	|	ПартииТоваровКомпании.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПартииТоваровКомпании.СкладКомпании КАК СкладКомпании,
	|	ПартииТоваровКомпании.Партия КАК Партия,
	|	СУММА(ПартииТоваровКомпании.Количество) КАК КоличествоНачОстаток
	|ПОМЕСТИТЬ НачальныеОстатки
	|ИЗ
	|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
	|ГДЕ
	|	(ПартииТоваровКомпании.Номенклатура, ПартииТоваровКомпании.ХарактеристикаНоменклатуры, ПартииТоваровКомпании.СкладКомпании, ПартииТоваровКомпании.Партия) В
	|			(ВЫБРАТЬ
	|				ТаблицаДокумента.Номенклатура,
	|				ТаблицаДокумента.ХарактеристикаНоменклатуры,
	|				ТаблицаДокумента.Склад,
	|				ТаблицаДокумента.Партия
	|			ИЗ
	|				ТаблицаДокумента КАК ТаблицаДокумента)
	|	И (ПартииТоваровКомпании.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|			ИЛИ ПартииТоваровКомпании.Регистратор ССЫЛКА Документ.ПоступлениеТоваров)
	|	И ПартииТоваровКомпании.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровКомпании.Номенклатура,
	|	ПартииТоваровКомпании.СкладКомпании,
	|	ПартииТоваровКомпании.Партия,
	|	ПартииТоваровКомпании.ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаДокумента.Склад КАК Склад,
	|	ТаблицаДокумента.Партия КАК Партия,
	|	ТаблицаДокумента.ГТД КАК ГТД,
	|	ТаблицаДокумента.Количество КАК Количество,
	|	ТаблицаДокумента.СуммаПошлины КАК СуммаПошлины,
	|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
	|	ТаблицаДокумента.СуммаВсего КАК СуммаВсего,
	|	ЕСТЬNULL(НачальныеОстатки.КоличествоНачОстаток, 0) КАК КоличествоНачОстаток,
	|	ЕСТЬNULL(ПартииТоваровКомпанииОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ПартииТоваровКомпанииОстатки.СтатусПартии КАК СтатусПартии,
	|	ТаблицаДокумента.ТаможеннаяСтоимость КАК ТаможеннаяСтоимость
	|ПОМЕСТИТЬ ИтоговаяТаблица
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачальныеОстатки КАК НачальныеОстатки
	|		ПО ТаблицаДокумента.Номенклатура = НачальныеОстатки.Номенклатура
	|			И ТаблицаДокумента.ХарактеристикаНоменклатуры = НачальныеОстатки.ХарактеристикаНоменклатуры
	|			И ТаблицаДокумента.Склад = НачальныеОстатки.СкладКомпании
	|			И ТаблицаДокумента.Партия = НачальныеОстатки.Партия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровКомпании.Остатки(
	|				&Момент,
	|				(Номенклатура, ХарактеристикаНоменклатуры, СкладКомпании, Партия) В
	|					(ВЫБРАТЬ
	|						ТаблицаДокумента.Номенклатура,
	|						ТаблицаДокумента.ХарактеристикаНоменклатуры,
	|						ТаблицаДокумента.Склад,
	|						ТаблицаДокумента.Партия
	|					ИЗ
	|						ТаблицаДокумента КАК ТаблицаДокумента)) КАК ПартииТоваровКомпанииОстатки
	|		ПО ТаблицаДокумента.Номенклатура = ПартииТоваровКомпанииОстатки.Номенклатура
	|			И ТаблицаДокумента.ХарактеристикаНоменклатуры = ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры
	|			И ТаблицаДокумента.Склад = ПартииТоваровКомпанииОстатки.СкладКомпании
	|			И ТаблицаДокумента.Партия = ПартииТоваровКомпанииОстатки.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НачальныеОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИтоговаяТаблица.Номенклатура КАК Номенклатура,
	|	ИтоговаяТаблица.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ИтоговаяТаблица.Склад КАК Склад,
	|	ИтоговаяТаблица.Партия КАК Партия,
	|	ИтоговаяТаблица.ГТД КАК ГТД,
	|	ИтоговаяТаблица.Количество КАК Количество,
	|	ИтоговаяТаблица.СуммаПошлины КАК СуммаПошлины,
	|	ИтоговаяТаблица.СуммаНДС КАК СуммаНДС,
	|	ИтоговаяТаблица.СуммаВсего КАК СуммаВсего,
	|	ВЫБОР
	|		КОГДА ИтоговаяТаблица.КоличествоНачОстаток = ИтоговаяТаблица.КоличествоОстаток
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПоПартииБылиДвижения,
	|	ВЫБОР
	|		КОГДА ИтоговаяТаблица.КоличествоОстаток = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПартияСписана,
	|	ИтоговаяТаблица.СтатусПартии КАК СтатусПартии,
	|	ИтоговаяТаблица.ТаможеннаяСтоимость КАК ТаможеннаяСтоимость
	|ИЗ
	|	ИтоговаяТаблица КАК ИтоговаяТаблица
	|ИТОГИ
	|	СУММА(ТаможеннаяСтоимость)
	|ПО
	|	ОБЩИЕ";
	Запрос.УстановитьПараметр("Ссылка", ШапкаДокумента.Ссылка);
	Запрос.УстановитьПараметр("Момент", ШапкаДокумента.МоментВремени);
	Запрос.УстановитьПараметр("СписаниеПоСредней", СписаниеПоСредней);
	Запрос.УстановитьПараметр("ПартияТоваровОтрицательныхОстатков", ПартияТоваровОтрицательныхОстатков);
		
	Возврат Запрос.Выполнить();
	
КонецФункции //ПолучитьТаблицуТоваров()

// возвращает выборку по шапке
//
// Параметры:
//  ШапкаДокумента - Выборка по шапке.
//
// Возвращаемое значение:
//  Выборка - списываемые ГТД товаров.
//
Функция ПолучитьТаблицуСписываемыхГТДТоваров(ШапкаДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГТДПартийТоваровКомпанииОстатки.СкладКомпании,
	|	ГТДПартийТоваровКомпанииОстатки.Организация КАК Организация,
	|	ГТДПартийТоваровКомпанииОстатки.Номенклатура,
	|	ГТДПартийТоваровКомпанииОстатки.Партия,
	|	ГТДПартийТоваровКомпанииОстатки.ГТД,
	|	-ГТДПартийТоваровКомпанииОстатки.КоличествоОстаток КАК Количество,
	|	&ХозОперация,
	|	&Период,
	|	&Ссылка КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ИСТИНА КАК Активность,
	|	ГТДПартийТоваровКомпанииОстатки.ХарактеристикаНоменклатуры
	|ИЗ
	|	РегистрНакопления.ГТДПартийТоваровКомпании.Остатки(
	|			&Момент,
	|			(&БезФильтраПоОрганизации
	|				ИЛИ Организация = &Организация)
	|			И(Номенклатура, ХарактеристикаНоменклатуры, Партия) В
	|				(ВЫБРАТЬ
	|					ТаможеннаяДекларацияИмпортТовары.Номенклатура,
	|					ТаможеннаяДекларацияИмпортТовары.ХарактеристикаНоменклатуры,
	|					ТаможеннаяДекларацияИмпортТовары.Партия
	|				ИЗ
	|					Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпортТовары
	|				ГДЕ
	|					ТаможеннаяДекларацияИмпортТовары.Ссылка = &Ссылка)) КАК ГТДПартийТоваровКомпанииОстатки";
	
	//andrec??? Нет блокировки на считываемые данные
	Если НЕ ЗапасыТоваров.ОбособленныйУчетТоваровПоОрганизациям(ШапкаДокумента.МоментВремени.Дата) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ГТДПартийТоваровКомпанииОстатки.Организация",
			"ГТДПартийТоваровКомпанииОстатки.СкладКомпании.Организация"
		);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", ШапкаДокумента.Ссылка);
	Запрос.УстановитьПараметр("Момент", ШапкаДокумента.МоментВремени);
	Запрос.УстановитьПараметр("ХозОперация", ШапкаДокумента.ХозОперация);
	Запрос.УстановитьПараметр("Период", ШапкаДокумента.Дата);
	Запрос.УстановитьПараметр("БезФильтраПоОрганизации",
		ЗапасыТоваров.ФильтрЗапросаПоОрганизации(ШапкаДокумента.МоментВремени.Дата)
	);
	Запрос.УстановитьПараметр("Организация", ШапкаДокумента.Организация);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции //ПолучитьТаблицуСписываемыхГТДТоваров()

// возвращает выборку по шапке для автомобилей
//
// Параметры:
//  ШапкаДокумента - Выборка по шапке.
//
// Возвращаемое значение:
//  Выборка - списываемые ГТД товаров.
//
Функция ПолучитьТаблицуАвтомобилей(ШапкаДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаможеннаяДекларацияИмпортАвтомобили.Автомобиль КАК Автомобиль,
	|	ТаможеннаяДекларацияИмпортАвтомобили.ГТД КАК ГТД,
	|	ТаможеннаяДекларацияИмпортАвтомобили.ТаможеннаяСтоимость КАК ТаможеннаяСтоимость,
	|	ТаможеннаяДекларацияИмпортАвтомобили.СуммаПошлины КАК СуммаПошлины,
	|	ТаможеннаяДекларацияИмпортАвтомобили.СуммаНДС КАК СуммаНДС,
	|	ТаможеннаяДекларацияИмпортАвтомобили.СуммаНДС + ТаможеннаяДекларацияИмпортАвтомобили.СуммаПошлины КАК СуммаВсего,
	|	ТаможеннаяДекларацияИмпортАвтомобили.Склад КАК Склад
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Автомобили КАК ТаможеннаяДекларацияИмпортАвтомобили
	|ГДЕ
	|	ТаможеннаяДекларацияИмпортАвтомобили.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Автомобиль КАК Автомобиль,
	|	ТаблицаДокумента.ГТД КАК ГТДНовое,
	|	ТаблицаДокумента.СуммаНДС КАК СуммаНДСДок,
	|	ТаблицаДокумента.СуммаВсего КАК СуммаВсегоДок,
	|	ОстаткиАвтомобилейОстатки.СтатусПартии КАК СтатусПартии,
	|	ОстаткиАвтомобилейОстатки.Партия КАК Партия,
	|	ОстаткиАвтомобилейОстатки.Автомобиль.ГТД КАК АвтомобильГТД,
	|	-ЕСТЬNULL(ОстаткиАвтомобилейОстатки.КоличествоОстаток, 0) КАК Количество,
	|	-ЕСТЬNULL(ОстаткиАвтомобилейОстатки.СуммаОстаток, 0) КАК Сумма,
	|	-ЕСТЬNULL(ОстаткиАвтомобилейОстатки.СуммаУпрОстаток, 0) КАК СуммаУпр,
	|	-ЕСТЬNULL(ОстаткиАвтомобилейОстатки.СуммаНДСОстаток, 0) КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОстаткиАвтомобилейОстатки.КоличествоОстаток, 0) = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьВНаличии,
	|	ВЫБОР
	|		КОГДА ОстаткиАвтомобилейОстатки.Автомобиль ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ОстаткиАвтомобилейОстатки.Автомобиль.ГТД = ТаблицаДокумента.ГТД
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ГТДСовпадают,
	|	ТаблицаДокумента.Склад КАК СкладКомпании,
	|	ТаблицаДокумента.ТаможеннаяСтоимость КАК ТаможеннаяСтоимость,
	|	-ЕСТЬNULL(ОстаткиАвтомобилейОстатки.СуммаНДСУпрОстаток, 0) КАК СуммаНДСУпр,
	|	-ЕСТЬNULL(ОстаткиАвтомобилейОстатки.СуммаБезНДСОстаток, 0) КАК СуммаБезНДС,
	|	-ЕСТЬNULL(ОстаткиАвтомобилейОстатки.СуммаБезНДСУпрОстаток, 0) КАК СуммаБезНДСУпр
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиАвтомобилей.Остатки(
	|				&Момент,
	|				(Автомобиль, СкладКомпании) В
	|					(ВЫБРАТЬ
	|						ТаблицаДокумента.Автомобиль,
	|						ТаблицаДокумента.Склад
	|					ИЗ
	|						ТаблицаДокумента КАК ТаблицаДокумента)) КАК ОстаткиАвтомобилейОстатки
	|		ПО ТаблицаДокумента.Автомобиль = ОстаткиАвтомобилейОстатки.Автомобиль
	|			И ТаблицаДокумента.Склад = ОстаткиАвтомобилейОстатки.СкладКомпании
	|ИТОГИ
	|	СУММА(ТаможеннаяСтоимость)
	|ПО
	|	ОБЩИЕ";
	Запрос.УстановитьПараметр("Момент", ШапкаДокумента.МоментВремени);
	Запрос.УстановитьПараметр("Ссылка", ШапкаДокумента.Ссылка);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПровестиПоАвтомобилям(ШапкаДокумента, РежимПроведения)
	
	Отказ = Ложь;
	
	// получим данные по автомобилю
	РезультатЗапросаПоАвтомобилям = ПолучитьТаблицуАвтомобилей(ШапкаДокумента);
	
	Если РезультатЗапросаПоАвтомобилям.Пустой() Тогда
		Возврат НЕ Отказ;
	КонецЕсли;
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
	
	НаборАвтомобилей = Движения.ОстаткиАвтомобилей;
	
	// подготовим валюты и курсы
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл, ШапкаДокумента.Дата);
	КурсРегл = СтруктураКурса.Курс/?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	Если ЗначениеЗаполнено(КурсВалютыУпр) Тогда
		КурсУпр = КурсВалютыУпр;
	Иначе
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, ШапкаДокумента.Дата);
		КурсУпр = СтруктураКурса.Курс/?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	КонецЕсли;
	
	ОшибочныеАвтомобили = Новый Массив;
	
	Если ВедетсяБалансПоПодразделению Тогда
		ТаблицаБаланса = Новый ТаблицаЗначений;
		ТаблицаБаланса.Колонки.Добавить("Подразделение");
		ТаблицаБаланса.Колонки.Добавить("СуммаУпр");
	КонецЕсли;
	
	ВыборкаСуммы = РезультатЗапросаПоАвтомобилям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаСуммы.Следующий(); ОбщаяТаможеннаяСтоимость = ВыборкаСуммы.ТаможеннаяСтоимость;
	СуммаЗаЕд = ?(ОбщаяТаможеннаяСтоимость = 0, 0, СуммаТаможенногоСбора/ОбщаяТаможеннаяСтоимость);
	
	ВыборкаАвтомобили = ВыборкаСуммы.Выбрать();
	
	РаспределяемаяСумма = СуммаТаможенногоСбора;
	
	Пока ВыборкаАвтомобили.Следующий() Цикл
		Если НЕ ВыборкаАвтомобили.ЕстьВНаличии Тогда
			ОшибочныеАвтомобили.Добавить(СтрШаблон("Автомобиль %1 склад %2", ВыборкаАвтомобили.Автомобиль, ВыборкаАвтомобили.СкладКомпании));
			Отказ = Истина;
			Продолжить;
		КонецЕсли;
		
		// если разные ГТД то сделаем корректирующие движение
		Если НЕ ВыборкаАвтомобили.ГТДСовпадают Тогда
			КорректирующаяЗапись = НаборАвтомобилей.Добавить();
			ЗаполнитьЗначенияСвойств(КорректирующаяЗапись, ВыборкаАвтомобили);
			КорректирующаяЗапись.Регистратор = ШапкаДокумента.Ссылка;
			КорректирующаяЗапись.Период      = ШапкаДокумента.Дата;
			КорректирующаяЗапись.ХозОперация = ШапкаДокумента.ХозОперация;
			КорректирующаяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
		КонецЕсли;
		
		НоваяЗапись = НаборАвтомобилей.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаАвтомобили, "Автомобиль,СкладКомпании,СтатусПартии,Партия");
		
		НоваяЗапись.Регистратор = ШапкаДокумента.Ссылка;
		НоваяЗапись.Период      = ШапкаДокумента.Дата;
		НоваяЗапись.ХозОперация = ШапкаДокумента.ХозОперация;
		НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
		
		НоваяЗапись.Количество = ?(НЕ ВыборкаАвтомобили.ГТДСовпадают, 1, 0);
		
		// посчитаем суммы
		РасчетнаяСумма      = Окр(ВыборкаАвтомобили.ТаможеннаяСтоимость*СуммаЗаЕд, 2);
		РаспределяемаяСумма = РаспределяемаяСумма - РасчетнаяСумма;		
				
		НоваяЗапись.Сумма    = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаАвтомобили.СуммаВсегоДок+РасчетнаяСумма, ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента, ВалютаРегл, КурсРегл)
					     +?(НЕ ВыборкаАвтомобили.ГТДСовпадают, -КорректирующаяЗапись.Сумма, 0);
		НоваяЗапись.СуммаУпр = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаАвтомобили.СуммаВсегоДок+РасчетнаяСумма, ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента, ВалютаУпр, КурсУпр)
					     +?(НЕ ВыборкаАвтомобили.ГТДСовпадают, -КорректирующаяЗапись.СуммаУпр, 0);
		НоваяЗапись.СуммаНДС = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаАвтомобили.СуммаНДСДок, ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента, ВалютаРегл, КурсРегл)
					     +?(НЕ ВыборкаАвтомобили.ГТДСовпадают, -КорректирующаяЗапись.СуммаНДС, 0);
		НоваяЗапись.СуммаНДСУпр = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ВыборкаАвтомобили.СуммаНДСДок, ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента, ВалютаУпр, КурсУпр)
					     +?(НЕ ВыборкаАвтомобили.ГТДСовпадают, -КорректирующаяЗапись.СуммаНДС, 0);
		НоваяЗапись.СуммаБезНДС = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
		НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
		
		Если ВедетсяБалансПоПодразделению Тогда
			СтрокаБаланса = ТаблицаБаланса.Добавить();
			СтрокаБаланса.Подразделение = ВыборкаАвтомобили.СкладКомпании.ПодразделениеКомпании;
			СтрокаБаланса.СуммаУпр      = НоваяЗапись.СуммаУпр;
		КонецЕсли;		
	КонецЦикла;
	
	// Если не распределилась сумма в 0 тогда, закинем корректировку на последнюю строку.
	Если РаспределяемаяСумма <> 0 И НЕ НоваяЗапись = Неопределено Тогда
		НоваяЗапись.Сумма    = НоваяЗапись.Сумма + РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(РаспределяемаяСумма, ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента, ВалютаРегл, КурсРегл);
		НоваяЗапись.СуммаУпр = НоваяЗапись.СуммаУпр + РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(РаспределяемаяСумма, ШапкаДокумента.ВалютаДокумента, ШапкаДокумента.КурсДокумента, ВалютаУпр, КурсУпр);
		НоваяЗапись.СуммаБезНДС = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
		НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
	КонецЕсли;
	
	// Удалим записи у которых после распределения остались нулевые суммы.
	КУдалению = Новый Массив();
	
	Для Каждого Запись Из НаборАвтомобилей Цикл
		
		Если Запись.Сумма = 0
			И Запись.СуммаУпр = 0
			И Запись.СуммаНДС = 0
			И Запись.СуммаНДСУпр = 0
			И Запись.СуммаБезНДС = 0
			И Запись.СуммаБезНДСУпр = 0 Тогда
			
			КУдалению.Добавить(Запись);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Запись Из КУдалению Цикл
		
		НаборАвтомобилей.Удалить(Запись);
		
	КонецЦикла;
	
	Если Отказ Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Автомобиля(-ей) нет в наличии на указанном складе: %1 %2'"),
				Символы.ПС,
				СтрСоединить(ОшибочныеАвтомобили, Символы.ПС)
			),
			ЭтотОбъект
		);
		Возврат Ложь;
	КонецЕсли;
	
	НаборЗаписейДиР = Движения.ДоходыИРасходы;

	БалансовоеПодразделениеДоговора = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании, ШапкаДокумента.Дата);
	БалансовоеПодразделениеШапки    = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ШапкаДокумента.ПодразделениеКомпании, ШапкаДокумента.Дата);
	
	// БАЛАНС: определим необходимость формирования корректирующих проводок по партиям.
	Если ВедетсяБалансПоПодразделению И Движения.ПартииТоваровКомпании.Количество()> 0 Тогда
			
		ТаблицаБаланса.Свернуть("Подразделение", "СуммаУпр");
		
		СуммаКорректировки = 0;
		Для Каждого ТекущаяСтрока Из ТаблицаБаланса Цикл
			Если ТекущаяСтрока.СуммаУпр = 0 Тогда Продолжить; КонецЕсли;
			
			ПодразделениеСклада = ТекущаяСтрока.Подразделение;
			БалансовоеПодразделениеСклада = Справочники.ПодразделенияКомпании.ПолучитьБалансовоеПодразделение(ПодразделениеСклада, ШапкаДокумента.Дата);
			
			Если БалансовоеПодразделениеДоговора = БалансовоеПодразделениеСклада Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДиР.ШапкаДокумента         = ШапкаДокумента;
			НаборЗаписейДиР.Подразделение          = ПодразделениеСклада;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.ВУпрВалюте             = Истина;
			НаборЗаписейДиР.Доход                  = ТекущаяСтрока.СуммаУпр;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			
			СуммаКорректировки = СуммаКорректировки + ТекущаяСтрока.СуммаУпр;
		КонецЦикла;
		
		// БАЛАНС: определим необходимость формирования корректирующих проводок по взаиморасчетам.
		Если (НЕ СуммаКорректировки = 0) Тогда
			
			НаборЗаписейДиР.ДокументОбъект         = ЭтотОбъект;
			НаборЗаписейДиР.ШапкаДокумента         = ШапкаДокумента;
			НаборЗаписейДиР.Подразделение          = ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
			НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.КорректировкаБалансаПоПодразделениям;
			НаборЗаписейДиР.ВУпрВалюте             = Истина;
			НаборЗаписейДиР.Расход                 = СуммаКорректировки;
			Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			
		КонецЕсли;
	КонецЕсли;	
	
	Возврат НЕ Отказ;
	
КонецФункции

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
