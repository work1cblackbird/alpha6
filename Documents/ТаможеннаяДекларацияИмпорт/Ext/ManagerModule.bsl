// Модуль менеджера документа "Таможенная декларация импорт"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПеремещениеАвтомобилей);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПеремещениеТоваров);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПоступлениеДопРасходов);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ТаможеннаяДекларацияИмпорт);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// 	 Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти
		
#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.СуммаТаможенногоСбора + Объект.СуммаТаможенногоШтрафа + Объект.Разделы.Итог("СуммаПошлины") + Объект.Разделы.Итог("СуммаНДС"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС",    Объект.Разделы.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента-ИтогиОперации.СуммаНДС);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Используется в механизме взаимодействий. Формирует текст запроса по контактам предмета взаимодействия.
//
// Параметры:
//  Ссылка - Ссылка - Содержит ссылку на передаваемый объект метаданных.
//  ИмяТаблицы             - Строка    - Полное имя объекта метаданных.
//  ТекстВременнаяТаблица  - Строка    - Строка в которой может находиться часть текста запроса, которая отвечает за
//                                       помещение результата запроса во временную таблицу.
//  Объединить             - Булево    - Признак который указывает на режим формирования запроса. В случае, если данный
//                                       параметр имеет значение Истина, то формируемый в функции запрос являются частью
//                                       другого запроса и должен начинаться с конструкции ОБЪЕДИНИТЬ.
//  ТолькоОсновныеКонтакты - Булево    - Признак который указывает на необходимость вывода только основных контактов.
//
// Возвращаемое значение:
//  Строка - Возвращаемая строка содержащая в себе текст запроса по контактам предмета взаимодействий.
//
Функция ПолучитьТекстЗапросаПоКонтактам(Ссылка, ТекстВременнаяТаблица = "", Объединить = ЛОЖЬ, ТолькоОсновныеКонтакты = ИСТИНА) Экспорт
	
	// Вызываем общий обработчик действия
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстВременнаяТаблица", ТекстВременнаяТаблица);
	Параметры.Вставить("Объединить", Объединить);
	Параметры.Вставить("ТолькоОсновныеКонтакты", ТолькоОсновныеКонтакты);
	
	Возврат УправлениеДиалогомСервер.ПолучитьТекстЗапросаПоКонтактам(Ссылка, Параметры);
	
КонецФункции //ПолучитьТекстЗапросаПоКонтактам()

// Выполняет формирование номера счета-фактуры на основании номера деклорации.
//
// Параметры:
//  НомерДекларации - Строка
//  Дополнение - Строка
// 
// Возвращаемое значение:
//  Строка
//
Функция НомерДляСФ(НомерДекларации, Дополнение) Экспорт
	
	Возврат СтрШаблон("%1/%2", НомерДекларации, Дополнение);
	
КонецФункции //НомерДляСФ()

// Выполняет заполнение реквизита ГТД табличной части Товары по заполненным номерам
//
// Параметры:
//  Объект - ДокументОбъект.ТаможеннаяДекларацияИмпорт - Документ декларации для заполнения
// 
// Возвращаемое значение:
//  Булево - Отказ
//
Функция ЗаполнитьГТДПоНомерам(Объект) Экспорт
	
	ИмяТЧ = ?(Объект.ХозОперация = Справочники.ХозОперации.ТаможеннаяДекларацияИмпорт, "Товары", "Автомобили");
	ИмяНоменклатуры =
		?(Объект.ХозОперация = Справочники.ХозОперации.ТаможеннаяДекларацияИмпорт, "Номенклатура", "Автомобиль");
	КолонкиТЧ = ИмяНоменклатуры + ",НомерСтроки,НомерДляСФ,СтранаПроисхождения,ГТД";
	
	// Получим признак того, что контрагент из страны ЕАЭС
	КонтрагентИзЕАЭС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "СтранаРегистрацииЕАЭС");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТЗ.НомерСтроки КАК НомерСтроки,
	|	ТЗ.НомерДляСФ КАК НомерДляСФ,
	|	ТЗ.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТЗ.ГТД КАК ГТД,
	|	ТЗ.#ИмяНоменклатуры КАК Номенклатура
	|ПОМЕСТИТЬ ГТДДокумента
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГТД.Ссылка КАК ГТД,
	|	ГТД.Страна КАК Страна,
	|	ГТД.Наименование КАК Наименование,
	|	ГТД.РНПТ КАК РНПТ
	|ПОМЕСТИТЬ ГТДСправочника
	|ИЗ
	|	Справочник.ГТД КАК ГТД
	|ГДЕ
	|	(ГТД.Наименование, ГТД.Страна, ГТД.РНПТ) В
	|			(ВЫБРАТЬ
	|				ГТДДокумента.НомерДляСФ,
	|				ГТДДокумента.СтранаПроисхождения,
	|				ГТДДокумента.Номенклатура.Прослеживаемый
	|			ИЗ
	|				ГТДДокумента КАК ГТДДокумента)
	|	И ГТД.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГТДДокумента.НомерСтроки КАК НомерСтроки,
	|	ГТДДокумента.НомерДляСФ КАК НомерДляСФ,
	|	ГТДДокумента.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ГТДДокумента.ГТД КАК ГТД,
	|	ГТДДокумента.Номенклатура.Прослеживаемый КАК РНПТ,
	|	МАКСИМУМ(ЕСТЬNULL(ГТДСправочника.ГТД, ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка))) КАК ГТДСправочник
	|ИЗ
	|	ГТДДокумента КАК ГТДДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ГТДСправочника КАК ГТДСправочника
	|		ПО ГТДДокумента.НомерДляСФ = ГТДСправочника.Наименование
	|			И ГТДДокумента.СтранаПроисхождения = ГТДСправочника.Страна
	|			И ГТДДокумента.Номенклатура.Прослеживаемый = ГТДСправочника.РНПТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ГТДДокумента.НомерДляСФ,
	|	ГТДДокумента.НомерСтроки,
	|	ГТДДокумента.СтранаПроисхождения,
	|	ГТДДокумента.ГТД,
	|	ГТДДокумента.Номенклатура.Прослеживаемый");
	Запрос.УстановитьПараметр("ТЗ", Объект[ИмяТЧ].Выгрузить(, КолонкиТЧ));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяНоменклатуры", ИмяНоменклатуры);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СозданныеГТД = Новый Соответствие();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТоваров = Объект[ИмяТЧ][Выборка.НомерСтроки - 1];
		
		Если КонтрагентИзЕАЭС И Выборка.РНПТ Тогда
			
			СтрокаТоваров.ГТД = Справочники.ГТД.ПустаяСсылка();
			Продолжить;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ГТД) И Выборка.ГТД = Выборка.ГТДСправочник Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если Выборка.ГТД <> Выборка.ГТДСправочник И ЗначениеЗаполнено(Выборка.ГТДСправочник) Тогда
			
			СтрокаТоваров.ГТД = Выборка.ГТДСправочник;
			Продолжить;
			
		КонецЕсли;
		
		ИдентификаторСтраны = Выборка.СтранаПроисхождения.УникальныйИдентификатор();
		РанееСозданноеГТД = СозданныеГТД.Получить(Выборка.НомерДляСФ + ИдентификаторСтраны);
		
		Если РанееСозданноеГТД <> Неопределено Тогда
			
			СтрокаТоваров.ГТД = РанееСозданноеГТД;
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТоваров.ГТД = СоздатьГТДПоПараметрам(Выборка.НомерДляСФ, Выборка.СтранаПроисхождения, Выборка.РНПТ);
		СозданныеГТД.Вставить(Выборка.НомерДляСФ + ИдентификаторСтраны, СтрокаТоваров.ГТД);
		
		Если СтрокаТоваров.ГТД.Пустая() Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Создает новые элемент справочника "ГТД" по переданным параметрам
//
Функция СоздатьГТДПоПараметрам(Номер, Страна, РНПТ)
	
	НовыйГТД = Справочники.ГТД.СоздатьЭлемент();
	НовыйГТД.УстановитьНовыйКод();
	НовыйГТД.Наименование = Номер;
	НовыйГТД.Страна = Страна;
	НовыйГТД.РНПТ = РНПТ;
	НовыйГТД.ОбменДанными.Загрузка = Истина;
	
	Попытка
		
		НовыйГТД.Записать();
		
	Исключение
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Не удалось записать ГТД с номером: %1'"), Номер)
		);
		СобытиеЖурнала = НСтр("ru = 'Таможенная декларация (импорт).Ошибка создания нового элемента справочника ГТД'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СобытиеЖурнала, УровеньЖурналаРегистрации.Ошибка, , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат НовыйГТД.Ссылка;
	
КонецФункции //СоздатьГТДПоПараметрам()

Функция ПроверитьДокументОснованиеИЗаполнить(Объект, ПоступлениеТоваров = Истина) Экспорт
	
	ТекстСообщения    = "";
	ДокументОснование = Объект.ДокументОснование;
	ДатаСреза         = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДатаСеанса());
	
	ПолитикаСписания = ПолучитьСтратегиюСписанияПоДатам(
		Объект.СкладКомпании,
		Объект.Организация,
		ДатаСреза
	);
	
	Если Не ДокументОснование.Проведен Тогда
		
		ТекстСообщения = НСтр("ru = 'Документ-основание не проведен. Документ будет заполнен по документу-основанию.'");
		
	ИначеЕсли ПолитикаСписания = Перечисления.СтратегияСписанияПартийТоваровПоДатам.Средняя Тогда
		
		Если ПоступлениеТоваров Тогда
			
			ДопУсловие = "ИЛИ ТИПЗНАЧЕНИЯ(ПодчиненныеДокументы.Ссылка) = ТИП(Документ.КорректировкаПоступления)";
			
		Иначе
			
			ДопУсловие = "ИЛИ ТИПЗНАЧЕНИЯ(ПодчиненныеДокументы.Ссылка) = ТИП(Документ.КорректировкаПоступленияАвтомобилей)";
			
		КонецЕсли;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПодчиненныеДокументы.Ссылка КАК Документ
		|ИЗ
		|	КритерийОтбора.ПодчиненныеДокументы(&Основание) КАК ПодчиненныеДокументы
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ПодчиненныеДокументы.Ссылка) = ТИП(Документ.ПоступлениеДопРасходов)
		|		ИЛИ ТИПЗНАЧЕНИЯ(ПодчиненныеДокументы.Ссылка) = ТИП(Документ.ТаможеннаяДекларацияИмпорт)
		|" + ДопУсловие;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Основание", ДокументОснование);
		Выборка = Запрос.Выполнить();
		
		Если Выборка.Пустой() Тогда
			
			ТекстСообщения = НСтр("ru = 'Ведется учет по среднему, документ будет заполнен по документу-основанию.'");
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Ведется учет по среднему и введены корректировочные документы,
				|документ будет заполнен по документу-основанию.'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекстСообщения = "" Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
	
	Склад = ДокументОснование.СкладКомпании;
	
	Запрос = Новый Запрос;
	
	Если ПоступлениеТоваров Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
			|	ПоступлениеТоваровТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	ПоступлениеТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ПоступлениеТоваровТовары.Коэффициент КАК Коэффициент,
			|	ПоступлениеТоваровТовары.Количество КАК Количество,
			|	ПоступлениеТоваровТовары.КоличествоБазовое КАК КоличествоБазовое,
			|	ПоступлениеТоваровТовары.СтавкаНДС КАК СтавкаНДС,
			|	ПоступлениеТоваровТовары.СуммаВсего КАК СуммаВсего,
			|	ПоступлениеТоваровТовары.СуммаНДС КАК СуммаНДС,
			|	ПоступлениеТоваровТовары.ГТД.Страна КАК СтранаПроисхождения
			|ИЗ
			|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
			|ГДЕ
			|	ПоступлениеТоваровТовары.Ссылка = &Ссылка
			|ИТОГИ
			|	СУММА(СуммаВсего),
			|	СУММА(СуммаНДС)
			|ПО
			|	СтавкаНДС";
		
	Иначе
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПоступлениеАвтомобилейАвтомобили.Автомобиль КАК Автомобиль,
			|	ПоступлениеАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС,
			|	ПоступлениеАвтомобилейАвтомобили.СуммаНДС КАК СуммаНДС,
			|	ПоступлениеАвтомобилейАвтомобили.СуммаВсего КАК СуммаВсего,
			|	ПоступлениеАвтомобилейАвтомобили.ГТД.Страна КАК СтранаПроисхождения
			|ИЗ
			|	Документ.ПоступлениеАвтомобилей.Автомобили КАК ПоступлениеАвтомобилейАвтомобили
			|ГДЕ
			|	ПоступлениеАвтомобилейАвтомобили.Ссылка = &Ссылка
			|ИТОГИ
			|	СУММА(СуммаНДС),
			|	СУММА(СуммаВсего)
			|ПО
			|	СтавкаНДС";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСтавкаНДС = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Раздел = 0;
	Пока ВыборкаСтавкаНДС.Следующий() Цикл
		
		Раздел = Раздел + 1;
		НовыйРаздел = Объект.Разделы.Добавить();
		НовыйРаздел.НомерРаздела = Раздел;
		НовыйРаздел.СтавкаНДС = ВыборкаСтавкаНДС.СтавкаНДС;
		НовыйРаздел.ТаможеннаяСтоимость = ВыборкаСтавкаНДС.СуммаВсего;
		НовыйРаздел.СуммаНДС = ВыборкаСтавкаНДС.СуммаНДС;
		
		ВыборкаДетальныеЗаписи = ВыборкаСтавкаНДС.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если ПоступлениеТоваров Тогда
				
				НовыйТовар = Объект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйТовар, ВыборкаДетальныеЗаписи);
				ТоварыНоменклатураПриИзменении(Объект, НовыйТовар);
				НовыйТовар.Партия = ДокументОснование;
				
			Иначе
				
				НовыйТовар = Объект.Автомобили.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйТовар, ВыборкаДетальныеЗаписи);
				
			КонецЕсли;
			
			НовыйТовар.Склад = Склад;
			
			НовыйТовар.НомерРаздела = Раздел;
			НовыйТовар.ТаможеннаяСтоимость = ВыборкаДетальныеЗаписи.СуммаВсего;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьТабличнуюЧастьТоварыПоПартии(Объект, Партия, ПараметрыДействия = Неопределено) Экспорт
	
	ТекущийРаздел = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТекущийРаздел", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартииТоваровКомпании.СкладКомпании КАК Склад,
	|	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
	|	ПартииТоваровКомпании.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ПартииТоваровКомпании.Количество) КАК Количество,
	|	СУММА(ПартииТоваровКомпании.Сумма) КАК Сумма,
	|	СУММА(ПартииТоваровКомпании.СуммаУпр) КАК СуммаУпр,
	|	ПартииТоваровКомпании.Номенклатура.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
	|ГДЕ
	|	ПартииТоваровКомпании.Партия = &Партия
	|	И ТИПЗНАЧЕНИЯ(ПартииТоваровКомпании.Регистратор) В (ТИП(Документ.ПоступлениеТоваров), ТИП(Документ.КорректировкаПоступления), ТИП(Документ.ПоступлениеДопРасходов))
	|	И ПартииТоваровКомпании.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровКомпании.ХарактеристикаНоменклатуры,
	|	ПартииТоваровКомпании.СкладКомпании,
	|	ПартииТоваровКомпании.Номенклатура,
	|	ПартииТоваровКомпании.Номенклатура.СтавкаНДС
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаУпр)
	|ПО
	|	СтавкаНДС,
	|	Склад";	
	
	Запрос.УстановитьПараметр("Партия", Партия);
	
	ВыборкаНДС = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// валюты и коэффициенты
	ВалютаРегл     = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр      = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, Объект.Дата);
	КурсУпр        =  СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	ЕстьРаздел = (ТекущийРаздел <> Неопределено);
	СтрокаРаздела = Неопределено;
	Если ЕстьРаздел Тогда
		СтрокаРаздела = Объект.Разделы.НайтиПоИдентификатору(ТекущийРаздел);
		Если Объект.Товары.Количество() = 0 Тогда
			СтрокаРаздела.ТаможеннаяСтоимость = 0;
		КонецЕсли;
	КонецЕсли;
	Сч = 0;
	Пока ВыборкаНДС.Следующий() Цикл
		ВыборкаСклад = ВыборкаНДС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСклад.Следующий() Цикл
			
			// добавляем разделы
			Если ЕстьРаздел Тогда
				НовыйРаздел = СтрокаРаздела;
				Сч = НовыйРаздел.НомерРаздела;
			Иначе
				Сч = Сч + 1;
				НовыйРаздел = Объект.Разделы.Добавить();
				НовыйРаздел.НомерРаздела = Сч;
				НовыйРаздел.СтавкаНДС = ВыборкаСклад.СтавкаНДС;
			КонецЕсли;
			
			НовыйРаздел.ТаможеннаяСтоимость = НовыйРаздел.ТаможеннаяСтоимость
				+ ?(Объект.ВалютаДокумента = ВалютаРегл, ВыборкаСклад.Сумма,
				РаботаСКурсамиВалют.ПересчитатьВВалюту(ВыборкаСклад.СуммаУпр, ВалютаУпр, Объект.ВалютаДокумента, Объект.Дата));
			НовыйРаздел.СуммаПошлины = НовыйРаздел.ТаможеннаяСтоимость * НовыйРаздел.СтавкаПошлины / 100;
			НовыйРаздел.СуммаНДС     = НовыйРаздел.СуммаПошлины * НовыйРаздел.СтавкаНДС.Ставка/100;
			
			ВыборкаНоменклатура = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаНоменклатура.Следующий() Цикл
				
				Если ВыборкаНоменклатура.СуммаУпр = 0 И ВыборкаНоменклатура.Сумма = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НовыйТовар = Объект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйТовар, ВыборкаНоменклатура);
				ТоварыНоменклатураПриИзменении(Объект, НовыйТовар);
				
				НовыйТовар.НомерРаздела = Сч;
				НовыйТовар.Партия = Партия;
				НовыйТовар.ТаможеннаяСтоимость = ?(Объект.ВалютаДокумента = ВалютаРегл, ВыборкаНоменклатура.Сумма,
					РаботаСКурсамиВалют.ПересчитатьВВалюту(
						ВыборкаНоменклатура.СуммаУпр,
						ВалютаУпр,
						Объект.ВалютаДокумента,
						Объект.Дата));
				ТоварыТаможеннаяСтоимостьПриИзменении(Объект, НовыйТовар, НовыйРаздел);
				НовыйРаздел.СуммаНДС = НовыйРаздел.СуммаНДС + НовыйТовар.СуммаНДС;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьАвтомобилиПоПартии(Объект, Партия, ПараметрыДействия = Неопределено) Экспорт
	
	ТекущийРаздел = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТекущийРаздел", Неопределено);
	
	// Получим данные заполнения
	Запрос = Новый Запрос;
	запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиАвтомобилей.Автомобиль КАК Автомобиль,
	|	ОстаткиАвтомобилей.СкладКомпании КАК Склад,
	|	ОстаткиАвтомобилей.Автомобиль.ГТД КАК ГТД,
	|	ОстаткиАвтомобилей.Сумма КАК Сумма,
	|	ОстаткиАвтомобилей.СуммаУпр КАК СуммаУпр
	|ПОМЕСТИТЬ ТаблицаАвтомобилей
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ОстаткиАвтомобилей.Регистратор) В (ТИП(Документ.ПоступлениеАвтомобилей), ТИП(Документ.КорректировкаПоступленияАвтомобилей), ТИП(Документ.ПоступлениеДопРасходов), ТИП(Документ.ТаможеннаяДекларацияИмпорт))
	|	И ОстаткиАвтомобилей.Партия = &Партия
	|	И ОстаткиАвтомобилей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КомплектацияАвтомобилей.Автомобиль,
	|	КомплектацияАвтомобилей.СкладКомпании,
	|	КомплектацияАвтомобилей.ГТД,
	|	КомплектацияАвтомобилей.Сумма,
	|	КомплектацияАвтомобилей.СуммаУпр
	|ИЗ
	|	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
	|ГДЕ
	|	КомплектацияАвтомобилей.Регистратор ССЫЛКА Документ.ПоступлениеАвтомобилей
	|	И КомплектацияАвтомобилей.Партия = &Партия
	|	И КомплектацияАвтомобилей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАвтомобилей.Автомобиль КАК Автомобиль,
	|	ТаблицаАвтомобилей.ГТД КАК ГТД,
	|	ТаблицаАвтомобилей.ГТД.Наименование КАК НомерДляСФ,
	|	ТаблицаАвтомобилей.ГТД.Страна КАК СтранаПроисхождения,
	|	ТаблицаАвтомобилей.Склад КАК Склад,
	|	СУММА(ТаблицаАвтомобилей.Сумма) КАК Сумма,
	|	СУММА(ТаблицаАвтомобилей.СуммаУпр) КАК СуммаУпр
	|ИЗ
	|	ТаблицаАвтомобилей КАК ТаблицаАвтомобилей
	|ГДЕ
	|	ТаблицаАвтомобилей.Сумма <> 0
	|	И ТаблицаАвтомобилей.СуммаУпр <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаАвтомобилей.Склад,
	|	ТаблицаАвтомобилей.Автомобиль,
	|	ТаблицаАвтомобилей.ГТД
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаУпр)
	|ПО
	|	Склад";
	Запрос.УстановитьПараметр("Партия"    , Партия);
		
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// валюты и коэфициенты
	ВалютаРегл     = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр      = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, Объект.Дата);
	КурсУпр        = СтруктураКурса.Курс/?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	ОсновнаяСтавкаНДС = РаботаСоСтавкамиНДСПовтИсп.СтавкаНДСПоЗначению(20, Ложь);
	
	ВыборкаСклады = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ЕстьРаздел = (ТекущийРаздел <> Неопределено);
	СтрокаРаздела = Неопределено;
	Если ЕстьРаздел Тогда
		СтрокаРаздела = Объект.Разделы.НайтиПоИдентификатору(ТекущийРаздел);
		Если Объект.Автомобили.Количество() = 0 Тогда
			СтрокаРаздела.ТаможеннаяСтоимость = 0;
		КонецЕсли;
	КонецЕсли;
	Сч = 0;
	
	Пока ВыборкаСклады.Следующий() Цикл
		
		// добавляем разделы
		Если ЕстьРаздел Тогда
			НовыйРаздел = СтрокаРаздела;
			Сч = НовыйРаздел.НомерРаздела;
		Иначе
			Сч = Сч + 1;
			НовыйРаздел = Объект.Разделы.Добавить();
			НовыйРаздел.НомерРаздела = Сч;
			НовыйРаздел.СтавкаНДС = ОсновнаяСтавкаНДС;
		КонецЕсли;
		
		НовыйРаздел.ТаможеннаяСтоимость = НовыйРаздел.ТаможеннаяСтоимость
			+ ?(Объект.ВалютаДокумента = ВалютаРегл, ВыборкаСклады.Сумма,
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				ВыборкаСклады.СуммаУпр,
				ВалютаУпр,
				КурсУпр,
				Объект.ВалютаДокумента,
				Объект.КурсДокумента)
			);
		
		РазделыТаможеннаяСтоимостьПриИзменении(Объект, НовыйРаздел);
		
		ВыборкаАвтомобили = ВыборкаСклады.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаАвтомобили.Следующий() Цикл
			
			Если (ВыборкаАвтомобили.СуммаУпр = 0 И ВыборкаАвтомобили.Сумма = 0) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НовыйАвтомобиль = Объект.Автомобили.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйАвтомобиль, ВыборкаАвтомобили);
			НовыйАвтомобиль.НомерРаздела = Сч;
			НовыйАвтомобиль.ТаможеннаяСтоимость = ВыборкаАвтомобили.Сумма;
			
			Если Объект.ВалютаДокумента <> ВалютаРегл Тогда
				
				НовыйАвтомобиль.ТаможеннаяСтоимость = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
					ВыборкаАвтомобили.СуммаУпр,
					ВалютаУпр,
					КурсУпр,
					Объект.ВалютаДокумента,
					Объект.КурсДокумента
				);
				
			КонецЕсли;
			
			АвтомобилиТаможеннаяСтоимостьПриИзменении(Объект, НовыйАвтомобиль, НовыйРаздел);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяИсточникаНомераДекларации(СпособЗаполненияНомераДекларации)
	
	ИмяПоля = "";
	Если СпособЗаполненияНомераДекларации = Перечисления.СпособыЗаполненияНомераТаможеннойДекларации.ПоНомеруСтроки Тогда
		ИмяПоля = "НомерСтроки";
	ИначеЕсли СпособЗаполненияНомераДекларации = Перечисления.СпособыЗаполненияНомераТаможеннойДекларации.ПоНомеруРаздела Тогда
		ИмяПоля = "НомерРаздела";
	КонецЕсли;
	
	Возврат ИмяПоля;
	
КонецФункции

Процедура СформироватьНомерТаможеннойДекларацииСтроки(Объект, Строка) Экспорт
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтрагентИзЕАЭС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "СтранаРегистрацииЕАЭС");
	ЕстьПризнакПрослеживаемости = ЕстьРеквизит(Строка, "ПрослеживаемыйТовар");
	
	Если ЕстьПризнакПрослеживаемости И Строка.ПрослеживаемыйТовар И КонтрагентИзЕАЭС Тогда
		Строка.НомерДляСФ = "";
		Возврат;
	КонецЕсли;
	
	РежимЗаполнения = ПравоПользователя("СпособЗаполненияНомераТаможеннойДекларацииСтроки");
	ИмяПоля = ИмяИсточникаНомераДекларации(РежимЗаполнения);
	
	Если ПустаяСтрока(ИмяПоля) Тогда
		Возврат;
	КонецЕсли;
	
	Строка.НомерДляСФ = НомерДляСФ(Объект.НомерДекларации, Строка[ИмяПоля]);
	
КонецПроцедуры

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	ОбязательныеРеквизиты.Добавить("НомерДекларации");
	ОбязательныеРеквизиты.Добавить("СпособЗачетаАвансов");
	Если (Объект.СуммаТаможенногоСбора + Объект.СуммаТаможенногоШтрафа) > 0. Тогда
		ОбязательныеРеквизиты.Добавить("СтатьяДоходовИРасходов");
	КонецЕсли;
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	ОбязательныеРеквизиты.Добавить("Товары.ТаможеннаяСтоимость");
	ОбязательныеРеквизиты.Добавить("Товары.Партия");
	ОбязательныеРеквизиты.Добавить("Товары.Склад");
	ОбязательныеРеквизиты.Добавить("Товары.СтранаПроисхождения");
	ОбязательныеРеквизиты.Добавить("Товары.НомерРаздела");
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Разделы");
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("Разделы.НомерРаздела");
	
	// Обязательные поля таблицы автомобилей
	ОбязательныеРеквизиты.Добавить("Автомобили.НомерРаздела");
	ОбязательныеРеквизиты.Добавить("Автомобили.Автомобиль");
	ОбязательныеРеквизиты.Добавить("Автомобили.ТаможеннаяСтоимость");
	ОбязательныеРеквизиты.Добавить("Автомобили.Склад");
	ОбязательныеРеквизиты.Добавить("Автомобили.СтранаПроисхождения");
	
	Если Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ОбязательныеРеквизиты.Добавить("ЗачетАвансов");
	КонецЕсли;
	ОбязательныеРеквизиты.Добавить("ЗачетАвансов.ДокументАванса");
	ОбязательныеРеквизиты.Добавить("ЗачетАвансов.Сумма");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	УникальныеТовары.Добавить("Партия");
	УникальныеТовары.Добавить("СтранаПроисхождения");
	УникальныеТовары.Добавить("НомерДляСФ");
	
	// Уникальные поля таблицы разделы
	УникальныеРазделы = Новый Массив();
	УникальныеРазделы.Добавить("НомерРаздела");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Товары", УникальныеТовары);
	УникальныеРеквизиты.Вставить("Разделы", УникальныеРазделы);
	
	// Уникальные поля таблицы Автомобили
	УникальныеАвтомобили = Новый Массив();
	УникальныеАвтомобили.Добавить("Автомобиль");
	УникальныеАвтомобили.Добавить("НомерДляСФ");
	УникальныеРеквизиты.Вставить("Автомобили", УникальныеАвтомобили);
	
	УникальныеЗачетАвансов = Новый Массив();
	УникальныеЗачетАвансов.Добавить("ДокументАванса");
	УникальныеРеквизиты.Вставить("ЗачетАвансов", УникальныеЗачетАвансов);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Инициализируем параметры обработки действия с объектом
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", ?(Объект.ХозОперация = Справочники.ХозОперации.ТаможеннаяДекларацияИмпорт, Объект.Товары.Количество() > 0, Объект.Автомобили.Количество() > 0));
	ПараметрыДействия.Вставить("РасчетыСПокупателем", Ложь);
	
	// Возвращаем сформированную структуру параметров
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия); 
	
	ОбработкаПересчетаСуммыДокумента(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

Процедура ОбработкаПересчетаСуммыДокумента(Объект, ПараметрыДействия)
	
	// Получим признаки необходимости совершить пересчет суммовых показателей документа.
	ТребуетсяУстановкаЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяУстановкаЦен", Ложь);
	ТребуетсяПересчетЦен  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен",  Ложь);
	ВозможенПересчетСуммы = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ПересчетСуммы",         ИСТИНА);
	
	// Прекращаем обработку, если пересчет не требуется
	Если НЕ(ВозможенПересчетСуммы И (ТребуетсяУстановкаЦен ИЛИ ТребуетсяПересчетЦен)) Тогда
		Возврат;
	КонецЕсли;
	
	// Сбрасываем признаки необходимости пересчета
	Если ПараметрыДействия.Свойство("ТребуетсяУстановкаЦен") Тогда
		ПараметрыДействия.ТребуетсяУстановкаЦен = ЛОЖЬ;
	КонецЕсли;
	Если ПараметрыДействия.Свойство("ТребуетсяПересчетЦен") Тогда
		ПараметрыДействия.ТребуетсяПересчетЦен  = ЛОЖЬ;
	КонецЕсли;
	
	// Получим признаки возможности пересчета суммовых показателей объекта
	ЕстьТабличнаяЧасть         = ЕстьРеквизит(Объект,, "Товары");
	ЕстьТабличнаяЧастьАвто     = ЕстьРеквизит(Объект,, "Автомобили");
	ПересчетЦеныТабличнойЧасти = ЕстьТабличнаяЧасть И ЕстьРеквизит(Объект, "ТаможеннаяСтоимость", "Товары");
	ПересчетСуммыДокумента     = (НЕ ЕстьТабличнаяЧасть) И ЕстьРеквизит(Объект, "СуммаДокумента");
	
	// Прекращаем обработку события, если пересчет не нужен
	Если НЕ(ПересчетЦеныТабличнойЧасти ИЛИ ПересчетСуммыДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	// Определим менеджер текущего объекта
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	Если ТребуетсяПересчетЦен Тогда
		
		СтарыйКурс = ПараметрыДействия.СтарыйКурс;
		НовыйКурс  = Объект.КурсДокумента;
		
		Если (СтарыйКурс*НовыйКурс)=0 Тогда
			ВывестиСообщение(НСтр("ru='При пересчете валюты обнаружен нулевой курс валюты.'"), Объект);
			Возврат;
		КонецЕсли;
		
		Если СтарыйКурс=НовыйКурс Тогда
			Возврат;
		КонецЕсли;
		
		КоэффициентСоотношенияКурсов = СтарыйКурс/НовыйКурс;
		
		Объект.СуммаТаможенногоСбора = Окр(Объект.СуммаТаможенногоСбора * КоэффициентСоотношенияКурсов, 2);
		Объект.СуммаТаможенногоШтрафа = Окр(Объект.СуммаТаможенногоШтрафа * КоэффициентСоотношенияКурсов, 2);
		
		Если ПересчетЦеныТабличнойЧасти Тогда
						
			// Пересчитываем цены по новому коэффициенту
			Для Каждого СтрокаРазделы Из Объект.Разделы Цикл
				СтрокаРазделы.ТаможеннаяСтоимость = Окр(СтрокаРазделы.ТаможеннаяСтоимость * КоэффициентСоотношенияКурсов, 2); 
				МенеджерОбъекта.РазделыТаможеннаяСтоимостьПриИзменении(Объект, СтрокаРазделы, ПараметрыДействия);
				Для Каждого СтрокаТовары Из Объект.Товары Цикл
					Если СтрокаТовары.НомерРаздела = СтрокаРазделы.НомерРаздела Тогда 
					СтрокаТовары.ТаможеннаяСтоимость = Окр(СтрокаТовары.ТаможеннаяСтоимость * КоэффициентСоотношенияКурсов, 2);
										
					МенеджерОбъекта.ТоварыТаможеннаяСтоимостьПриИзменении(Объект, СтрокаТовары, СтрокаРазделы); 
					КонецЕсли;
				КонецЦикла; 
				Для Каждого СтрокаАвтомобили Из Объект.Автомобили Цикл
					Если СтрокаАвтомобили.НомерРаздела = СтрокаРазделы.НомерРаздела Тогда 
					СтрокаАвтомобили.ТаможеннаяСтоимость = Окр(СтрокаАвтомобили.ТаможеннаяСтоимость * КоэффициентСоотношенияКурсов, 2);
										
					МенеджерОбъекта.АвтомобилиТаможеннаяСтоимостьПриИзменении(Объект, СтрокаАвтомобили, СтрокаРазделы); 
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
						
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПересчетаСуммыДокумента()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Проверка склада
	Если (Объект.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваровКомиссия) И (Объект.СкладКомпании.Розничный) Тогда
		Объект.СкладКомпании = Справочники.СкладыКомпании.ПустаяСсылка();
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ИскомыеСвойства = Новый Массив();
		ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.КодТаможни);
		ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект.Контрагент, Истина, Истина, ИскомыеСвойства);
		Объект.КодТаможни = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("КодТаможни", ЗначенияСвойствОбъекта);
	КонецЕсли;
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Номер декларации".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура НомерДекларацииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	РежимЗаполнения = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "РежимЗаполнения", Неопределено);
	
	// Установим по настройке пользователя
	Если РежимЗаполнения = Неопределено Тогда
		РежимЗаполнения = ПравоПользователя("СпособЗаполненияНомераТаможеннойДекларацииСтроки");
	КонецЕсли;
	
	ИмяПоля = ИмяИсточникаНомераДекларации(РежимЗаполнения);
	
	Если ПустаяСтрока(ИмяПоля) Тогда
		Возврат;
	КонецЕсли;
	
	КонтрагентИзЕАЭС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "СтранаРегистрацииЕАЭС");
	ЕстьПризнакПрослеживаемости = ЕстьРеквизит(Объект, "ПрослеживаемыйТовар", "Товары") И КонтрагентИзЕАЭС;
	
	Для Каждого Строка Из Объект.Товары Цикл
		Если ЕстьПризнакПрослеживаемости И Строка.ПрослеживаемыйТовар Тогда
			Строка.НомерДляСФ = "";
		Иначе
			Строка.НомерДляСФ = Документы.ТаможеннаяДекларацияИмпорт.НомерДляСФ(Объект.НомерДекларации, Строка[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	
	ЕстьПризнакПрослеживаемости = ЕстьРеквизит(Объект, "ПрослеживаемыйТовар", "Автомобили") И КонтрагентИзЕАЭС;
	
	Для Каждого Строка Из Объект.Автомобили Цикл
		Если ЕстьПризнакПрослеживаемости И Строка.ПрослеживаемыйТовар Тогда
			Строка.НомерДляСФ = "";
		ИначеЕсли Строка.ГТД.Пустая() Тогда
			Строка.НомерДляСФ = Документы.ТаможеннаяДекларацияИмпорт.НомерДляСФ(Объект.НомерДекларации, Строка[ИмяПоля]);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры // НомерДекларацииПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество базовое" в таблице "Товары".
//
// Параметры:
//  Объект 
//	Строка - строка табличной части
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоБазовоеПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоБазовоеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Таможенная стоимость" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыТаможеннаяСтоимостьПриИзменении(Объект, Строка, СтрокаРаздела, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	Строка.СуммаПошлины = Строка.ТаможеннаяСтоимость * СтрокаРаздела.СтавкаПошлины / 100;
	
	Если СтрокаРаздела.СтавкаНДС = Неопределено Тогда
		
		Строка.СуммаНДС = 0;
		Возврат;
		
	КонецЕсли;
	
	Строка.СуммаНДС = (Строка.СуммаПошлины + Строка.ТаможеннаяСтоимость) * (СтрокаРаздела.СтавкаНДС.Ставка / 100);
	
КонецПроцедуры // ТоварыЦенаРозничнаяПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма пошлины" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПошлиныПриИзменении(Объект, Строка, СтрокаРаздела, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если СтрокаРаздела.СтавкаНДС = Неопределено Тогда
		
		Строка.СуммаНДС = 0;
		Возврат;
		
	КонецЕсли;
	
	Строка.СуммаНДС = (Строка.СуммаПошлины + Строка.ТаможеннаяСтоимость) * (СтрокаРаздела.СтавкаНДС.Ставка / 100);
	
КонецПроцедуры // ТоварыСуммаПошлиныПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Партия" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПартияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПартияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры //ТоварыПартияПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтомобили

// Обработчик события возникающего при изменении данных реквизита "Таможенная стоимость" в таблице "Автомобили".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиТаможеннаяСтоимостьПриИзменении(Объект, Строка, СтрокаРаздела, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Строка.СуммаПошлины = Строка.ТаможеннаяСтоимость * СтрокаРаздела.СтавкаПошлины / 100;
	Строка.СуммаНДС     = ?(СтрокаРаздела.СтавкаНДС = Неопределено, 0, (Строка.СуммаПошлины + Строка.ТаможеннаяСтоимость)*(СтрокаРаздела.СтавкаНДС.Ставка/100));
	
КонецПроцедуры // АвтомобилиТаможеннаяСтоимостьПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма пошлины" в таблице "Автомобили".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаПошлиныПриИзменении(Объект, Строка, СтрокаРаздела, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	Строка.СуммаНДС = ?(СтрокаРаздела.СтавкаНДС = Неопределено, 0,(Строка.СуммаПошлины + Строка.ТаможеннаяСтоимость)*(СтрокаРаздела.СтавкаНДС.Ставка/100));
	
КонецПроцедуры // АвтомобилиСуммаПошлиныПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автомобиль" в таблице "Автомобили".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура   - Набор параметров, использующихся при выполнения операции. 
//
Процедура АвтомобилиАвтомобильПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если НЕ Строка.Автомобиль.Пустая() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Автомобили.ГТД КАК ГТД,
		               |	Автомобили.ГТД.Наименование КАК НомерДляСФ,
		               |	Автомобили.ГТД.Страна КАК СтранаПроисхождения
		               |ИЗ
		               |	Справочник.Автомобили КАК Автомобили
		               |ГДЕ
		               |	Автомобили.Ссылка = &Автомобиль";
		Запрос.УстановитьПараметр("Автомобиль", Строка.Автомобиль); 
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(Строка, Выборка); 
	Иначе
		Строка.ГТД = Справочники.ГТД.ПустаяСсылка();	
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРазделы

// Обработчик события возникающего при изменении данных реквизита "Таможенная стоимость" в таблице "Разделы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура РазделыТаможеннаяСтоимостьПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Строка.СуммаПошлины = Строка.ТаможеннаяСтоимость * Строка.СтавкаПошлины / 100;
	Строка.СуммаНДС     = (Строка.СуммаПошлины + Строка.ТаможеннаяСтоимость)*(Строка.СтавкаНДС.Ставка/100);
	
КонецПроцедуры // РазделыТаможеннаяСтоимостьПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка пошлины" в таблице "Разделы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура РазделыСтавкаПошлиныПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Строка.СуммаПошлины = Строка.ТаможеннаяСтоимость * Строка.СтавкаПошлины / 100.;
	Строка.СуммаНДС     = (Строка.СуммаПошлины + Строка.ТаможеннаяСтоимость)*(Строка.СтавкаНДС.Ставка/100);
	ПараметрыРаспределения = Новый Структура("СуммаПошлины,СуммаНДС", Истина, Истина);
	РаспределитьНаТаблицу(Объект, Строка, ПараметрыРаспределения);
	РаспределитьНаТаблицу(Объект, Строка, ПараметрыРаспределения, "Автомобили");
	
КонецПроцедуры // РазделыСтавкаПошлиныПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма пошлины" в таблице "Разделы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура РазделыСуммаПошлиныПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	Строка.СтавкаПошлины = 100 * ?(Строка.ТаможеннаяСтоимость = 0, 0, Строка.СуммаПошлины / Строка.ТаможеннаяСтоимость);
	Строка.СуммаНДС      = (Строка.СуммаПошлины + Строка.ТаможеннаяСтоимость) * (Строка.СтавкаНДС.Ставка / 100);
	ПараметрыРаспределения = Новый Структура("СуммаПошлины,СуммаНДС", Истина, Истина);
	РаспределитьНаТаблицу(Объект, Строка, ПараметрыРаспределения);
	РаспределитьНаТаблицу(Объект, Строка, ПараметрыРаспределения, "Автомобили");
	
КонецПроцедуры // РазделыСуммаПошлиныПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Разделы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура РазделыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	Строка.СуммаНДС = (Строка.СуммаПошлины + Строка.ТаможеннаяСтоимость) * (Строка.СтавкаНДС.Ставка / 100);
	ПараметрыРаспределения = Новый Структура("СуммаНДС", Истина);
	РаспределитьНаТаблицу(Объект, Строка, ПараметрыРаспределения);
	РаспределитьНаТаблицу(Объект, Строка, ПараметрыРаспределения, "Автомобили");
	
КонецПроцедуры // РазделыСтавкаНДСПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ТабличныеЧастиСКомандами = Новый Массив();
	ТабличныеЧастиСКомандами.Добавить("Разделы");
	ТабличныеЧастиСКомандами.Добавить("Товары");
	ТабличныеЧастиСКомандами.Добавить("Автомобили");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "ТаможеннаяДекларацияИмпорт");
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиСКомандами Цикл
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, ТабличнаяЧасть);
		
		Если ОтображатьЗаполнитьИзФайла Тогда
			ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, ТабличнаяЧасть);
		КонецЕсли;
	КонецЦикла;
	
	ВыборДокумента = ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборДокумента.ВыборСсылки = "Документ.ПоступлениеТоваров.ФормаСписка";
	ВыборДокумента.Обязательный = Истина;
	ВыборДокумента.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать поступление товаров.'");
	
	Команда = ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить по поступлению товаров'");
	Команда.Идентификатор	= "ТоварыЗаполнитьПоПоступлению";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ПоступлениеТоваров", ВыборДокумента);
	
	ВыборДокумента = ПоследовательныеОперацииКлиентСервер.НовыйВыборСсылки();
	ВыборДокумента.ВыборСсылки = "Документ.ПоступлениеАвтомобилей.ФормаСписка";
	ВыборДокумента.Обязательный = Истина;
	ВыборДокумента.ТекстОтменыВвода = НСтр("ru = 'Необходимо выбрать поступление автомобилей.'");
	
	Команда = ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Подменю = ЗаполнениеОбъектовАльфаАвто.ИмяПодменюПоУмолчанию("Автомобили");
	Команда.Идентификатор = "АвтомобилиЗаполнитьПоПоступлению";
	Команда.Представление = НСтр("ru = 'Заполнить по поступлению автомобилей'");
	Команда.ДополнительныеПараметры.ИмяТабличнойЧасти = "Автомобили";
	Команда.ДополнительныеПараметры.ПоследовательныеОперации.Вставить("ПоступлениеАвтомобилей", ВыборДокумента);
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьПоПоступлению.Видимость", Истина);
	ПараметрыКоманд.Вставить("ТоварыЗаполнитьПоПоступлению.Доступность", Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьПоПоступлению.Видимость", Истина);
	ПараметрыКоманд.Вставить("АвтомобилиЗаполнитьПоПоступлению.Доступность", Истина);
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

// Распределяет суммы раздела на таблицу раздела
//
// Параметры:
//  Объект - ДокументОбъект.ТаможеннаяДекларацияИмпорт - Документ распределения
//  Раздел - СтрокаТаблицыЗначений, Структура - Описание раздела:
//  * НомерРаздела - Число;
//  * ТаможеннаяСтоимость - Число;
//  * СуммаПошлины - Число;
//  * СуммаНДС - Число.
//  Распределять - Структура, Неопределено - Описание параметров, которые необходимо распределить.
//    Если не указано распределяется на все колонки:
//  * ТаможеннаяСтоимость - Булево;
//  * СуммаПошлины - Булево;
//  * СуммаНДС - Булево.
//  ИмяТабличнойЧасти - Строка - Имя табличной части на которую выполняется распределение
//
Процедура РаспределитьНаТаблицу(Объект, Раздел, Распределять=Неопределено, ИмяТабличнойЧасти="Товары") Экспорт
	
	Если Распределять = Неопределено Тогда
		
		Распределять = Новый Структура("ТаможеннаяСтоимость,СуммаПошлины,СуммаНДС", Истина, Истина, Истина);
		
	КонецЕсли;
	
	ТоварыРаздела = Объект[ИмяТабличнойЧасти].Выгрузить(Новый Структура("НомерРаздела", Раздел.НомерРаздела));
	
	Если НЕ ТоварыРаздела.Количество() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПоляКОбновлению = Новый Массив();
	
	Для Каждого КлючЗначение Из Распределять Цикл
		
		Если НЕ КлючЗначение.Значение Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ПоляКОбновлению.Добавить(КлючЗначение.Ключ);
		
		Если Раздел[КлючЗначение.Ключ] = 0 Тогда
			
			Для Каждого Товар Из ТоварыРаздела Цикл
				
				Товар[КлючЗначение.Ключ] = 0;
				
			КонецЦикла;
			
		Иначе
			
			Коэффициенты = ТоварыРаздела.ВыгрузитьКолонку("ТаможеннаяСтоимость");
			НовыеСуммы = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
				Раздел[КлючЗначение.Ключ], Коэффициенты);
			
			Если НовыеСуммы <> Неопределено Тогда
				
				ТоварыРаздела.ЗагрузитьКолонку(НовыеСуммы, КлючЗначение.Ключ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоляКОбновлению = СтрСоединить(ПоляКОбновлению, ",");
	
	Для Каждого Товар Из ТоварыРаздела Цикл
		
		НомерСтроки = Товар.НомерСтроки - 1;
		ЗаполнитьЗначенияСвойств(Объект[ИмяТабличнойЧасти][НомерСтроки], Товар, ПоляКОбновлению);
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик заполнения документа по документу поступления
//
Функция ТоварыЗаполнитьПоПоступлению(Объект, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект = ПараметрыКоманды.Источник;
	
	Если ЕстьРеквизит(ПараметрыКоманды, "Форма") Тогда
		
		Если ПараметрыДействия = Неопределено Тогда
			ПараметрыДействия = Новый Структура();
		КонецЕсли;
		
		ПараметрыДействия.Вставить("ТекущийРаздел",
			ПараметрыКоманды.Форма.Элементы.Разделы.ТекущаяСтрока);
		
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьТоварыПоПартии(Объект, ПараметрыЗаполнения.ПоступлениеТоваров, ПараметрыДействия);
	
КонецФункции // ТоварыЗаполнитьПоПоступлению

// Обработчик заполнения документа по документу поступления
//
Функция АвтомобилиЗаполнитьПоПоступлению(Объект, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт

	ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
	Объект = ПараметрыКоманды.Источник;
	
	Если ЕстьРеквизит(ПараметрыКоманды, "Форма") Тогда
		
		Если ПараметрыДействия = Неопределено Тогда
			ПараметрыДействия = Новый Структура();
		КонецЕсли;
		
		ПараметрыДействия.Вставить("ТекущийРаздел",
			ПараметрыКоманды.Форма.Элементы.РазделыАвтомобили.ТекущаяСтрока);
		
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьАвтомобилиПоПартии(Объект, ПараметрыЗаполнения.ПоступлениеАвтомобилей, ПараметрыДействия);
	
КонецФункции // ТоварыЗаполнитьПоПоступлению

#КонецОбласти

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговора",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов"));
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаДоговора", ДополнительныеПараметры.ДляПроведения.ВалютаДоговора);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаможеннаяДекларацияИмпорт.Организация КАК Организация,
	|	ТаможеннаяДекларацияИмпорт.Ссылка КАК Ссылка,
	|	ТаможеннаяДекларацияИмпорт.Дата КАК Дата,
	|	ТаможеннаяДекларацияИмпорт.ХозОперация КАК ХозОперация,
	|	ТаможеннаяДекларацияИмпорт.ДокументОснование КАК ДокументОснование,
	|	ТаможеннаяДекларацияИмпорт.Контрагент КАК Контрагент,
	|	ТаможеннаяДекларацияИмпорт.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ТаможеннаяДекларацияИмпорт.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	ТаможеннаяДекларацияИмпорт.Ссылка КАК Сделка,
	|	ТаможеннаяДекларацияИмпорт.СуммаДокумента КАК Сумма,
	|	ТаможеннаяДекларацияИмпорт.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	ТаможеннаяДекларацияИмпорт.ВалютаДокумента КАК ВалютаДокумента,
	|	ТаможеннаяДекларацияИмпорт.КурсДокумента КАК КурсДокумента,
	|	ТаможеннаяДекларацияИмпорт.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ТаможеннаяДекларацияИмпорт.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
	|ГДЕ
	|	ТаможеннаяДекларацияИмпорт.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаможеннаяДекларацияИмпортЗачетАвансов.Ссылка КАК Ссылка,
	|	ТаможеннаяДекларацияИмпортЗачетАвансов.ДокументАванса КАК ДокументАванса,
	|	ТаможеннаяДекларацияИмпортЗачетАвансов.Сумма КАК Сумма
	|ПОМЕСТИТЬ РаспределениеАванса
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.ЗачетАвансов КАК ТаможеннаяДекларацияИмпортЗачетАвансов
	|ГДЕ
	|	ТаможеннаяДекларацияИмпортЗачетАвансов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр, &ВалютаДоговора)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ХозОперация КАК ХозОперация,
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДоговора КАК ВалютаДоговора,
	|	ДанныеДокумента.Сделка КАК Сделка,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыВзаиморасчетов = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютВзаиморасчетов.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетов.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыВзаиморасчетов
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютВзаиморасчетов
	|		ПО ДанныеДокумента.ВалютаДоговора = КурсыВалютВзаиморасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.ДокументОснование КАК ДокументОснование,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Задолженность.ВалютаДоговора КАК ВалютаДоговора,
	|	Задолженность.Сделка КАК Сделка,
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр
	|ИЗ
	|	Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеАванса.ДокументАванса КАК ДокументАванса,
	|	СУММА(РаспределениеАванса.Сумма) КАК Сумма
	|ИЗ
	|	РаспределениеАванса КАК РаспределениеАванса
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеАванса.ДокументАванса";
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеОбОплате = ПакетЗапроса[0].Выбрать();
	ЗачетАванса = ПакетЗапроса[1].Выгрузить();
	
	Если Не ДанныеОбОплате.Следующий() Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	РасчетыСКонтрагентамиСервер.ДополнитьРасчетыСКонтрагентом(
		РасчетыСКонтрагентами,
		ДанныеОбОплате,
		ЗачетАванса,
		Отказ,
		Ложь);
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗачетАвансов

// Обработчик события возникающего при изменении данных реквизита "Документ аванса" в таблице "ЗачетАвансов".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЗачетАвансовДокументАвансаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	РасчетыСКонтрагентамиСервер.ДокументАвансаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли