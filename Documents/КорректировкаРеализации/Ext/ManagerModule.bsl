
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ОбработчикиОбновления

// Выполняет перезаполнение измерения "Автомобиль" в движениях по регистру "Продажи".
Процедура ВыполнитьЗаполнениеАвтомобиляПоРегиструПродажи(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Продажи.Регистратор КАК Ссылка,
	|	ЕСТЬNULL(ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль, ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)) КАК Автомобиль
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд КАК ЗаказНаряд
	|		ПО Продажи.ДокументПродажи = ЗаказНаряд.Ссылка
	|ГДЕ
	|	Продажи.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|	И Продажи.ДокументПродажи ССЫЛКА Документ.ЗаказНаряд";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Автомобиль) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыНакопления.Продажи.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Ссылка;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Продажи.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Выбран() Тогда
				Для Каждого Запись Из НаборЗаписей Цикл
					Запись.Автомобиль = Выборка.Автомобиль;
				КонецЦикла;
			КонецЕсли;
			
			НаборЗаписей.Записать();
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось записать набор записей регистра накопления ""Продажи"" по причине:
						|%1'"), 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				);
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыНакопления.Продажи,
				"Продажи",
				ТекстСообщения
			);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьЗаполнениеАвтомобиляПоРегиструПродажи(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Продажи.Регистратор,
	|	ЕСТЬNULL(ЗаказНаряд.СводныйРемонтныйЗаказ.Автомобиль, ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)) КАК Автомобиль
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаряд КАК ЗаказНаряд
	|		ПО Продажи.ДокументПродажи = ЗаказНаряд.Ссылка
	|ГДЕ
	|	Продажи.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|	И Продажи.ДокументПродажи ССЫЛКА Документ.ЗаказНаряд
	|	И Продажи.Автомобиль = ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//   
// Возвращаемое значение:
//  Структура - значения итоговых показателей по операции в целом:
//    СуммаДокумента	- Число - сумма документа;
//    СуммаНДС			- Число - сумма НДС;
//    СуммаБезНДС		- Число - сумма без НДС.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Товары.Итог("СуммаВсего") + Объект.Автоработы.Итог("СуммаВсего"));
	ИтогиОперации.Вставить("СуммаДокументаДоКорректировки",
		Объект.Товары.Итог("СуммаВсегоДоКорректировки") + Объект.Автоработы.Итог("СуммаВсегоДоКорректировки"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС",    Объект.Товары.Итог("СуммаНДС") + Объект.Автоработы.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента - ИтогиОперации.СуммаНДС);
		
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Получение сделки по документу основания
//
// Параметры:
//  Сделка  - ДокументСсылка - Ссылка на документ основания.
//
// Возвращаемое значение:
//   ДокументСсылка   - Сделка в цепочке документов.
//
Функция ПолучитьСделку(Знач Сделка) Экспорт 
	Если (ЗначениеЗаполнено(Сделка)) И ТипЗнч(Сделка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Сделка = ПолучитьСделку(Сделка.ДокументОснование);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Сделка) Тогда
		Сделка = Неопределено;
	КонецЕсли; 
	Возврат Сделка;
КонецФункции // ПолучитьСделку()

// Определяет возможен ли ввод корректировки на основании данного документа основания.
//
// Параметры:
//	Основание - документ реализации товаров или корректировки реализации.
// 
// Возвращаемое значение:  
//  Булево - признак, возможен ли ввод корректировки 
//
Функция КорректировкаНеДоступна(Основание) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИСТИНА КАК ЕстьВозврат
	|ИЗ
	|	Документ.ВозвратОтПокупателя КАК ТаблицаОбъекта
	|ГДЕ
	|	ТаблицаОбъекта.ДокументОснование = &Основание
	|	И ТаблицаОбъекта.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Документ.ВозвратОтПокупателя.Товары КАК ТаблицаОбъекта
	|ГДЕ
	|	ТаблицаОбъекта.ДокументПродажи = &Основание
	|	И ТаблицаОбъекта.Ссылка.Проведен
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Основание", Основание);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // КорректировкаНеДоступна()

// АПК:299-выкл

// Процедура заполнения реквизита "СуммаДокументаРазница"
//
Процедура ЗаполнитьСуммаДокументаРазница() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КорректировкаРеализации.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.СуммаДокументаРазница = 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДокументОбъект.Заблокировать();
		ДокументОбъект.СуммаДокументаРазница = ДокументОбъект.Товары.Итог("СуммаВсегоРазница")
												+ ДокументОбъект.Автоработы.Итог("СуммаВсегоРазница");
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Попытка
			ДокументОбъект.Записать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Не удалось перезаполнить сумму разницы в %1'"),
					СокрЛП(Строка(ДокументОбъект.Ссылка))
					)
				);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСуммаДокументаРазница()

// Получение данных о прослеживаемых товаров
//
// Параметры:
//  Объект	 - ДокументОбъект.КорректировкаРеализации - Документ, на основании которого произошла операция с товаром
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Список прослеживаемых товаров
//
Функция ОперацииСПрослеживаемымиТоварами(Объект) Экспорт
	
	// TODO: На данный момент сделано только для формирования отчета об операциях
	
	// Получим таблицу для формирования данных по операции
	ТаблицаОперацииПрослеживаемости = УчетПрослеживаемыхТоваровСервер.ИнициализацияТаблицыОпераций();
	
	ОсвобождентОтНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Неопределено, Объект.Дата).ОсвобожденОтНДС;
		
	// Проверим есть ли ставка НДС в документе
	ТаблицаНДС = Объект.Товары.Выгрузить();
	ТаблицаНДС.Свернуть("СтавкаНДС");
	ЕстьНДС = НЕ (ТаблицаНДС.Количество() = 1 И ТаблицаНДС[0].СтавкаНДС = Справочники.СтавкиНДС.БезНДС);
	
	// Операцию об отчете не выводим если есть ставка НДС в документе и организация плательщик НДС
	Если ЕстьНДС И НЕ ОсвобождентОтНДС Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	// Сформируем запрос из документа
	Запрос = Новый Запрос;
	
	Если Объект.ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах Тогда
		// Составим список документов движений
		ДокОснование = Объект.Ссылка;
		СписокОснований = Новый СписокЗначений;
		
		Пока Истина Цикл
			СписокОснований.Добавить(ДокОснование);
			Если ТипЗнч(ДокОснование) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				Прервать;
			КонецЕсли;
			ДокОснование = ДокОснование.ДокументОснование;
		КонецЦикла;
		
		Запрос.Текст = "ВЫБРАТЬ
		|	КорректировкаРеализацииТовары.Номенклатура КАК Номенклатура,
		|	СУММА(КорректировкаРеализацииТовары.Количество * КорректировкаРеализацииТовары.Коэффициент) КАК КоличествоОсталось,
		|	СУММА(КорректировкаРеализацииТовары.СуммаВсего - КорректировкаРеализацииТовары.СуммаНДС) КАК СуммаОсталось
		|ИЗ
		|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
		|ГДЕ
		|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	КорректировкаРеализацииТовары.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ДокументыОтображенияОпераций.ОтчетОбОперациях) КАК ОтчетностьОперации,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументов.УПД) КАК ВидДокумента,
		|	ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.РеализацияТоваров) КАК КодОперации,
		|	ГТДПартийТоваровКомпании.Номенклатура КАК Номенклатура,
		|	ГТДПартийТоваровКомпании.ГТД КАК РНПТ,
		|	СУММА(ГТДПартийТоваровКомпании.Количество) КАК КоличествоПрослеживаемости
		|ИЗ
		|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
		|ГДЕ
		|	ГТДПартийТоваровКомпании.Регистратор В(&СписокОснований)
		|	И ГТДПартийТоваровКомпании.ГТД.РНПТ
		|
		|СГРУППИРОВАТЬ ПО
		|	ГТДПартийТоваровКомпании.Номенклатура,
		|	ГТДПартийТоваровКомпании.ГТД";
		Запрос.УстановитьПараметр("СписокОснований", СписокОснований);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		ПакетЗапросов = Запрос.ВыполнитьПакет();
		
		// Проверим есть РНПТ у документа
		Если ПакетЗапросов[1].Пустой() Тогда
			Возврат ТаблицаОперацииПрослеживаемости;
		КонецЕсли;
		
		ТаблицаТоваров = ПакетЗапросов[0].Выгрузить();
		ТаблицаРНПТ = ПакетЗапросов[1].Выгрузить();
		
		Документ = Объект.Сделка;
		Если ЗначениеЗаполнено(Объект.Сделка) Тогда
			Если ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
				ДанныеРеализации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Объект.Сделка, "ДатаЗакрытия,Номер");
				ПериодОтчета = НачалоКвартала(ДанныеРеализации.ДатаЗакрытия);
				НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект.Сделка);
				ДатаДокумента = ДанныеРеализации.ДатаЗакрытия;
			Иначе
				ДанныеРеализации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Объект.Сделка, "Дата,Номер");
				ПериодОтчета = НачалоКвартала(ДанныеРеализации.Дата);
				НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект.Сделка);
				ДатаДокумента = ДанныеРеализации.Дата;
			КонецЕсли;
		Иначе
			ПериодОтчета = НачалоКвартала(Объект.Дата);
		КонецЕсли;
		
		// Зафиксируем данные для заполнения
		Организация = Объект.Организация;
		КонтрагентОперации = Объект.Контрагент;
		
		// Для пересчета валюты в рубли
		ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл, Объект.Дата);
		КурсРегл = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		ВалютаДокумента = Объект.ВалютаДокумента;
		КурсДокумента = Объект.КурсДокумента;
		ВалютаНеРегл = (ВалютаДокумента <> ВалютаРегл);
		
		Для Каждого ТекущаяСтрока Из ТаблицаРНПТ Цикл
			
			НоваяСтрока = ТаблицаОперацииПрослеживаемости.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.ПериодОтчета = ПериодОтчета;
			НоваяСтрока.Документ = Документ;
			НоваяСтрока.НомерДокумента = НомерДокумента;
			НоваяСтрока.ДатаДокумента = ДатаДокумента;
			НоваяСтрока.Контрагент = КонтрагентОперации;
			
			// Получим сумму товара
			КоличествоРНПТ = ТекущаяСтрока.КоличествоПрослеживаемости;
			НайденныеСтроки = ТаблицаТоваров.НайтиСтроки(Новый Структура("Номенклатура", ТекущаяСтрока.Номенклатура));
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаНоменклатуры = НайденныеСтроки[0];
			
			Если КоличествоРНПТ >= СтрокаНоменклатуры.КоличествоОсталось Тогда
				СуммаБезНДС = СтрокаНоменклатуры.СуммаОсталось;
			Иначе
				СуммаБезНДС = Окр(СтрокаНоменклатуры.СуммаОсталось /
					?(СтрокаНоменклатуры.КоличествоОсталось = 0, 1, СтрокаНоменклатуры.КоличествоОсталось)
						* КоличествоРНПТ, 2);
			КонецЕсли;
			
			// Пересчет суммы
			Если ВалютаНеРегл Тогда
				СуммаБезНДС = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаБезНДС, ВалютаДокумента,
					КурсДокумента, ВалютаРегл, КурсРегл), 2);
			КонецЕсли;
			НоваяСтрока.СуммаБезНДС = СуммаБезНДС;
			
			СтрокаНоменклатуры.КоличествоОсталось = СтрокаНоменклатуры.КоличествоОсталось - КоличествоРНПТ;
			СтрокаНоменклатуры.СуммаОсталось = СтрокаНоменклатуры.СуммаОсталось - СуммаБезНДС;
			Если СтрокаНоменклатуры.КоличествоОсталось <= 0 Тогда
				ТаблицаТоваров.Удалить(СтрокаНоменклатуры);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ДокументыОтображенияОпераций.ОтчетОбОперациях) КАК ОтчетностьОперации,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументов.УКД) КАК ВидДокумента,
		|	ВЫБОР
		|		КОГДА Продажи.ВыручкаБезНДС > 0
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.УКДУвеличение)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.УКДУменьшение)
		|	КОНЕЦ КАК КодОперации,
		|	Продажи.Номенклатура КАК Номенклатура,
		|	Продажи.ГТД КАК РНПТ,
		|	СУММА(Продажи.Количество * ВЫБОР
		|			КОГДА Продажи.Количество < 0
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК КоличествоПрослеживаемости,
		|	СУММА(Продажи.ВыручкаБезНДС * ВЫБОР
		|			КОГДА Продажи.ВыручкаБезНДС < 0
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК СуммаБезНДС
		|ИЗ
		|	РегистрНакопления.Продажи КАК Продажи
		|ГДЕ
		|	Продажи.Регистратор = &Ссылка
		|	И Продажи.ГТД.РНПТ
		|	И Продажи.ВыручкаБезНДС <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА Продажи.ВыручкаБезНДС > 0
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.УКДУвеличение)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.УКДУменьшение)
		|	КОНЕЦ,
		|	Продажи.Номенклатура,
		|	Продажи.ГТД";
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		
		// Проверим есть РНПТ у документа
		Если РезультатЗапроса.Пустой() Тогда
			Возврат ТаблицаОперацииПрослеживаемости;
		КонецЕсли;
		
		ТаблицаРНПТ = РезультатЗапроса.Выгрузить();
		Документ = Объект.Ссылка;
		ПериодОтчета = НачалоКвартала(Объект.Дата);
		НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект.Ссылка);
		ДатаДокумента = Объект.Дата;
		
		// Зафиксируем данные для заполнения
		Организация = Объект.Организация;
		КонтрагентОперации = Объект.Контрагент;
		
		Для Каждого ТекущаяСтрока Из ТаблицаРНПТ Цикл
			НоваяСтрока = ТаблицаОперацииПрослеживаемости.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.ПериодОтчета = ПериодОтчета;
			НоваяСтрока.Документ = Документ;
			НоваяСтрока.НомерДокумента = НомерДокумента;
			НоваяСтрока.ДатаДокумента = ДатаДокумента;
			НоваяСтрока.Контрагент = КонтрагентОперации;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаОперацииПрослеживаемости;
	
КонецФункции

// Получение всех оснований корректировки реализации в цепочке документов
//
// Параметры:
//  ДокументСсылка	 - ДокументСсылка - Ссылка на документ, для которого необходимо получить
//                     все основания в цепочке.
// 
// Возвращаемое значение:
//   Основания  - СписокЗначений - Основания всех документов цепочки. 
//
Функция ОснованияЦепочкиКорректировкиРеализации(ДокументСсылка) Экспорт

	Основания = Новый СписокЗначений;
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
	
		Возврат Основания;
	                                               
	КонецЕсли;
	
	ТекущийДокументОснование = ДокументСсылка;

	Пока ТипЗнч(ТекущийДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Цикл
		
		ТекущийДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийДокументОснование, "ДокументОснование");
		Основания.Добавить(ТекущийДокументОснование);  
		
	КонецЦикла;    
	
	Возврат Основания;
	
КонецФункции 

// Добавление документов "Перемещение товаров в производство", если среди переданных
// оснований присутствуют документы "Заказ-наряд"
//
// Параметры:
//  Основания - СписокЗначений - Список документов-оснований корректировки реализаци.
// 
// Возвращаемое значение:
//   Основания_Документы  - СписокЗначений - Список переданных параметром документов-оснований корректировки реализаци
//
Функция ДобавитьПеремещенияТоваровЗаказНарядаИзОснований(Основания) Экспорт
	
	Основания_Документы = Новый СписокЗначений;
	Основания_ЗН = Новый Массив;
	
	// Отделим заказ-наряд от остальных оснований.
	Для Каждого ДокОснование Из Основания Цикл
		
		Если НЕ ТипЗнч(ДокОснование.Значение) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
			
			Основания_Документы.Добавить(ДокОснование.Значение);
			
		Иначе
			
			Основания_ЗН.Добавить(ДокОснование.Значение);
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Основания_Документы;
	
КонецФункции

// Получение документа продажи по документу корректировки реализации
//
// Параметры:
//  ДокументСсылка	 - ДокументСсылка - Ссылка на документ корректировки реализации, для которого 
//	                   необходимо получить документ продажи.
// 
// Возвращаемое значение:
//   ДокументПродажи  - ДокументСсылка - Ссылка на документ продажи
//
Функция ПолучитьДокументПродажиКорректировкиРеализации(ДокументСсылка) Экспорт
	
	ДокументПродажи = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		Возврат ДокументПродажи;
		
	КонецЕсли;  
	
	ТекущийДокументОснование = ДокументСсылка;
	
	Пока ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаРеализации") Цикл
		
		ТекущийДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийДокументОснование, "ДокументОснование");
		
		Если НЕ ТипЗнч(ТекущийДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			ДокументПродажи = ТекущийДокументОснование;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;    
	
	Возврат ДокументПродажи;
	
КонецФункции

// Получение документа, на основании которого была выполнена корректировка для исправления
//
// Параметры:
//  Основание	 - ДокументСсылка.КорректировкаРеализации - Текущий документ для проверки.
//  ХозОперация	 - СправочникСсылка.ХозОперация - Хозяйственная операция текущего документа.
//
Процедура ПолучитьДокументДоВнесенияКорректировки(Документ, Знач ХозОперация = Неопределено) Экспорт
	
	Если ХозОперация = Неопределено Тогда
		
		ХозОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ХозОперация");
		
	КонецЕсли;
		
	Пока ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах Цикл
		
		ДанныеОснованиеКорректировки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Документ,
			"ДокументОснование, ДокументОснование.ХозОперация");
		Документ = ДанныеОснованиеКорректировки.ДокументОснование;
		ХозОперация = ДанныеОснованиеКорректировки.ДокументОснованиеХозОперация;
		
	КонецЦикла;
	
	Если ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон Тогда
		
		Документ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ДокументОснование");
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("Контрагент");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	ОбязательныеРеквизиты.Добавить("Сделка");
	ОбязательныеРеквизиты.Добавить("ДокументОснование");
	
	Если НеобходимоИспользоватьСклад(Объект) Тогда
		ОбязательныеРеквизиты.Добавить("СкладКомпании");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	Если ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		ОбязательныеРеквизиты.Добавить("Автоработы.Авторабота");
		ОбязательныеРеквизиты.Добавить("Автоработы.Нормочас");
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("КодыМаркировки.КодМаркировки");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	УникальныеТовары.Добавить("Автомобиль");
	
	Если ПравоПользователя("ВыборочноеСписаниеПартий", Объект) Тогда
		УникальныеТовары.Добавить("Партия");
		УникальныеТовары.Добавить("ГТД");
	КонецЕсли;
	
	// Уникальные поля таблицы работ
	УникальныеАвтоработы = Новый Массив;
	УникальныеАвтоработы.Добавить("Авторабота");
	УникальныеАвтоработы.Добавить("Нормочас");
	УникальныеАвтоработы.Добавить("Коэффициент");
	
	// Уникальные коды маркировки
	УникальныеКодМаркировки = Новый Массив;
	УникальныеКодМаркировки.Добавить("КодМаркировки");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти = Новый Структура();
	УникальныеТабличныеЧасти.Вставить("Товары", УникальныеТовары);
	УникальныеТабличныеЧасти.Вставить("Автоработы", УникальныеАвтоработы);
	УникальныеТабличныеЧасти.Вставить("КодыМаркировки", УникальныеКодМаркировки);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

// АПК:299-вкл

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		Объект.Сделка = Документы.КорректировкаРеализации.ПолучитьСделку(Объект.ДокументОснование);
		
		Если Объект.ДокументОснование = Объект.Ссылка Тогда
			Объект.ДокументОснование = Неопределено;
			ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
			ТекстСообщения = НСтр("ru = 'Ввод корректировки реализации на основании самой себя запрещен.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
			Возврат;
		КонецЕсли;
		
		Если КорректировкаНеДоступна(Объект.ДокументОснование) Тогда
			Объект.ДокументОснование = Неопределено;
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'На основании %1 введен возврат товаров. Ввод корректировки реализации невозможен.'"),
				Объект.ДокументОснование
			);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,Объект.Ссылка,"ДокументОснование");
			ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд") И Объект.ДокументОснование.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный Тогда
			Объект.ДокументОснование = Неопределено;
			ТекстСообщения = НСтр("ru = 'В заказ-наряде выбран бесплатный ремонт. Нельзя заполнить корректировку реализации.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ДокументОснование");
			ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд") И Объект.ДокументОснование.Состояние <> Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
			Объект.ДокументОснование = Неопределено;
			ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
			ТекстСообщения = НСтр("ru = 'Заказ наряд не находится в состоянии ""Закрыт"". Нельзя заполнить корректировку реализации.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ДокументОснование");
			Возврат;
		КонецЕсли;
		
		Если НЕ Объект.ДокументОснование.Проведен Тогда
			Объект.ДокументОснование = Неопределено;
			ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
			ТекстСообщения = НСтр("ru = 'Ввод корректировки реализации возможен только на основании проведенного документа.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ДокументОснование");
			Возврат;
		КонецЕсли;
		
		Если Объект.ДокументОснование.ХозОперация = Справочники.ХозОперации.РеализацияТоваровКомиссия Тогда
			Объект.ДокументОснование = Неопределено;
			ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
			ТекстСообщения = НСтр("ru = 'Ввод корректировки реализации невозможен на основании реализации товаров комиссия.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ДокументОснование");
			Возврат;
		КонецЕсли;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПодчиненныеДокументы.Ссылка КАК Документ
		|ИЗ
		|	КритерийОтбора.ПодчиненныеДокументы(&Основание) КАК ПодчиненныеДокументы
		|ГДЕ
		|	ПодчиненныеДокументы.Ссылка ССЫЛКА Документ.КорректировкаРеализации
		|	И ПодчиненныеДокументы.Ссылка <> &Ссылка";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Основание",Объект.ДокументОснование);
		Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выгрузить();
		
		Если Выборка.Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='На основании документа <%1> уже введен <%2>.'"), Объект.ДокументОснование,Выборка[0].Документ);
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(Выборка[0].Документ, ТекстСообщения);
			Объект.ДокументОснование = Неопределено;
			ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата);

	УстановитьСтавкуНДСДляРабот(Объект, ПараметрыНДС);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
	ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата);

	УстановитьСтавкуНДСДляРабот(Объект, ПараметрыНДС);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
	Если Объект.ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах") Тогда
		Если ЗначениеЗаполнено(Объект.ДокументОснование)
			И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			Объект.НомерИсправления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "НомерИсправления") + 1;
		Иначе
			Объект.НомерИсправления = 1;
		КонецЕсли;
	Иначе
		Объект.НомерИсправления = 0;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") И Не Объект.ДокументОснование.ДоступнаПечатьУКД
		Или ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваров") Или ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		Объект.ДоступнаПечатьУПД = Объект.ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах;
		Объект.ДоступнаПечатьУКД = Объект.ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон;
	КонецЕсли;
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Карточка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КарточкаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ОбработкаРеквизитовДокументаСервер.КарточкаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КарточкаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен работ".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенРаботПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	
	
КонецПроцедуры // ТипЦенРаботПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Строка.ИдентификаторТовара) Тогда
		Строка.ИдентификаторТовара = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Строка.Подтверждение = Истина;
	ТоварыРасчетРазницы(Объект, Строка);
	
	Строка.СодержаниеДоКорректировки = "";
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ТоварыРасчетРазницы(Объект, Строка);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ТоварыРасчетРазницы(Объект, Строка);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
	ТоварыРасчетРазницы(Объект, Строка);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подтверждение" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПодтверждениеПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);

	Если Строка.Подтверждение Тогда
		Строка.Количество = (Строка.КоличествоПоДокументуРеализации*Строка.КоэффициентПоДокументуРеализации)/Строка.Коэффициент;
		ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
		Строка.СуммаВсего = Строка.СуммаВсегоПоДокументуРеализации;
		ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	Иначе
		Строка.Количество = 0;
		ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЕсли;
	
	ТоварыРасчетРазницы(Объект, Строка);
	
КонецПроцедуры

// процедура заполнения реквизитов разницы
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//
Процедура ТоварыРасчетРазницы(Объект, Строка) Экспорт
	
	Если Строка.Коэффициент = 0 Тогда
		Строка.КоличествоРазница = 0;
	Иначе
		Строка.КоличествоРазница = Строка.Количество
			- (Строка.КоличествоПоДокументуРеализации * Строка.КоэффициентПоДокументуРеализации) / Строка.Коэффициент;
	КонецЕсли;
	Строка.СуммаНДСРазница   = Строка.СуммаНДС - Строка.СуммаНДСПоДокументуРеализации;
	Строка.СуммаВсегоРазница = Строка.СуммаВсего - Строка.СуммаВсегоПоДокументуРеализации;
	
КонецПроцедуры //ТоварыРасчетРазницы()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаботы

// Обработчик события возникающего при изменении данных реквизита "Подтверждение" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - ДанныеФормыЭлементКоллекции - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыПодтверждениеПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если Строка.Подтверждение Тогда
		Строка.Количество  = Строка.КоличествоПоДокументуРеализации;
		Строка.Коэффициент = Строка.КоэффициентПоДокументуРеализации;
		АвтоработыКоличествоПриИзменении(Объект, Строка);
		
		Строка.СуммаВсего = Строка.СуммаВсегоПоДокументуРеализации;
		АвтоработыСуммаВсегоПриИзменении(Объект, Строка);
	Иначе
		Строка.Количество  = 0;
		Строка.Коэффициент = 0;
		АвтоработыКоличествоПриИзменении(Объект, Строка);
	КонецЕсли;
	
	АвтоработыРасчетРазницы(Объект, Строка);
	
КонецПроцедуры

// Процедура заполения реквизитов разницы
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - ДанныеФормыЭлементКоллекции - Строка, при изменении поля которой возникло событие.
//
Процедура АвтоработыРасчетРазницы(Объект, Строка) Экспорт
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка.КоличествоРазница  = Строка.Количество - Строка.КоличествоПоДокументуРеализации;
	Строка.КоэффициентРазница = Строка.Коэффициент - Строка.КоэффициентПоДокументуРеализации;
	Строка.СуммаНДСРазница    = Строка.СуммаНДС - Строка.СуммаНДСПоДокументуРеализации;
	Строка.СуммаВсегоРазница  = Строка.СуммаВсего - Строка.СуммаВсегоПоДокументуРеализации;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Авторабота" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - ДанныеФормыЭлементКоллекции - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыАвтоработаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
		Строка.Количество = 1;
	КонецЕсли;
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	ПараметрыДействия.Вставить("УстановитьСпособРасчетаСуммы", Истина);
	// Установим цену на работу
	УстановитьЦеныРабот(Объект, Строка, ПараметрыДействия);
	
	ПараметрыНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата);
	
	Если ПараметрыНДС.ОсвобожденОтНДС Тогда
		Строка.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
	Иначе
		Строка.СтавкаНДС = РаботаСоСтавкамиНДССервер.СтавкаНДСНоменклатуры(ПараметрыНДС, Строка.Авторабота);
	КонецЕсли;
	
	АвтоработыЦенаПриИзменении(Объект, Строка);
	
	Строка.Подтверждение = Истина;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - ДанныеФормыЭлементКоллекции - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	АвтоработыКоэффициентПриИзменении(Объект, Строка);
	
	АвтоработыРасчетРазницы(Объект, Строка);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Нормочас" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - ДанныеФормыЭлементКоллекции - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыНормочасПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	ЦенаНормочаса = ЦенообразованиеСервер.ПолучитьЦенуНормочаса(Строка.Нормочас, Объект.Дата, Объект.ТипЦенРабот, Строка.Авторабота);
	
	Строка.Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ЦенаНормочаса.Цена, ЦенаНормочаса.Валюта, Объект.Дата, Объект.ВалютаДокумента, Объект.КурсДокумента);
	АвтоработыЦенаПриИзменении(Объект, Строка);
	
	АвтоработыРасчетРазницы(Объект, Строка);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Коэффициент" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - ДанныеФормыЭлементКоллекции - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыКоэффициентПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	АвтоработыЦенаПриИзменении(Объект, Строка);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - ДанныеФормыЭлементКоллекции - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если Строка.СпособРасчетаСтоимостиРаботы = Перечисления.СпособыРасчетаСтоимостиРаботы.ФиксированнойСуммой Тогда
		Строка.Сумма = Строка.Цена * Строка.Количество;
	Иначе
		Строка.Сумма = Строка.Цена * Строка.Количество * Строка.Коэффициент;
	КонецЕсли;
	АвтоработыСуммаПриИзменении(Объект, Строка);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - ДанныеФормыЭлементКоллекции - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если Строка.Количество * Строка.Коэффициент <> 0
		И Строка.СпособРасчетаСтоимостиРаботы <> Перечисления.СпособыРасчетаСтоимостиРаботы.ФиксированнойСуммой Тогда
		Строка.Цена = Строка.Сумма / (Строка.Количество * Строка.Коэффициент);
	ИначеЕсли Строка.Количество <> 0
		И Строка.СпособРасчетаСтоимостиРаботы = Перечисления.СпособыРасчетаСтоимостиРаботы.ФиксированнойСуммой Тогда
		Строка.Цена = Строка.Сумма / Строка.Количество;
	КонецЕсли;
	
	// расчет суммы всего и суммы ндс
	Строка.СуммаНДС = Строка.Сумма/(100+?(Объект.ТипЦен.ЦенаВключаетНДС,Строка.СтавкаНДС.Ставка,0))*Строка.СтавкаНДС.Ставка;
	
	Если Объект.ТипЦен.ЦенаВключаетНДС Тогда
		Строка.СуммаВсего = Строка.Сумма;
	Иначе
		Строка.СуммаВсего = Строка.Сумма + Строка.СуммаНДС;
	КонецЕсли;
	
	АвтоработыРасчетРазницы(Объект, Строка);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - ДанныеФормыЭлементКоллекции - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Строка.СуммаНДС = Окр((Строка.СуммаВсего*Строка.СтавкаНДС.Ставка)/(100+Строка.СтавкаНДС.Ставка),2);
	АвтоработыРасчетРазницы(Объект, Строка);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - ДанныеФормыЭлементКоллекции - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	АвтоработыРасчетРазницы(Объект, Строка);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - ДанныеФормыЭлементКоллекции - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Получим новую сумму скидки как процент от суммы всего (уже со скидкой)
	СуммаБезСкидки = Строка.СуммаВсего;
	
	// Получим новую сумму НДС как процент от суммы всего
	СуммаБезСкидкиБезНДС = Окр((100*СуммаБезСкидки)/(100+Строка.СтавкаНДС.Ставка),2);
	СуммаБезНДС          = Окр((100*Строка.СуммаВсего)/(100+Строка.СтавкаНДС.Ставка),2);
	СуммаНДСБезСкидки    = СуммаБезСкидки - СуммаБезСкидкиБезНДС;
	Строка.СуммаНДС      = Строка.СуммаВсего - СуммаБезНДС;
	Если Объект.ТипЦен.ЦенаВключаетНДС Тогда
		// Цена уже содержит НДС
		// Получим сумму как разницу суммы всего и суммы скидки.
		Строка.Сумма = СуммаБезСкидки;
	Иначе
		// НДС в цену не включен
		// Получим сумму как разницу суммы всего и суммы скидки и суммы НДС.
		Строка.Сумма = СуммаБезСкидки - СуммаНДСБезСкидки;
	КонецЕсли;
	Если Строка.СпособРасчетаСтоимостиРаботы = Перечисления.СпособыРасчетаСтоимостиРаботы.ФиксированнойСуммой Тогда
		Строка.Цена = ?(Строка.Количество = 0,
			0,
			Строка.Сумма / Строка.Количество);
	Иначе
		Строка.Цена = ?(Строка.Количество * Строка.Коэффициент = 0,
			0,
			Строка.Сумма / (Строка.Количество * Строка.Коэффициент));
	КонецЕсли;
	
	АвтоработыРасчетРазницы(Объект, Строка);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Процедура установки цен работ.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - ДанныеФормыЭлементКоллекции - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура - Набор параметров, использующихся при выполнения операции.
//
Процедура УстановитьЦеныРабот(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Строка.Авторабота) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Автомобиль) Тогда
		ВариантКомплектации = ?(ЗначениеЗаполнено(Объект.Автомобиль.ВариантКомплектации), Объект.Автомобиль.ВариантКомплектации, Объект.Автомобиль.Модель);
	Иначе
		ВариантКомплектации = Справочники.Модели.ПустаяСсылка();
	КонецЕсли;
	
	ЦенаАвтоработы = ЦенообразованиеСервер.ПолучитьЦенуАвтоработы(
		Объект.ТипЦенРабот,
		Строка.Авторабота,
		ВариантКомплектации,
		Объект.Контрагент,
		Объект.ДоговорВзаиморасчетов,
		Справочники.Цеха.ПустаяСсылка(),
		Справочники.ВидыРемонта.ПустаяСсылка(),
		,
		Объект.ВалютаДокумента, Объект.КурсДокумента);
	
		Если Не ЗначениеЗаполнено(Строка.СпособРасчетаСтоимостиРаботы)
			ИЛИ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "УстановитьСпособРасчетаСуммы", Ложь) Тогда
		
		Если Не ЗначениеЗаполнено(ЦенаАвтоработы)
			ИЛИ Не ПолучитьЗначениеПараметраСтруктуры(ЦенаАвтоработы, "ЦенаНайдена", Ложь) Тогда
			
			// Получим из автоработы
			СпособРасчетаСтоимостиРаботы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Строка.Авторабота, "СпособРасчетаСтоимостиРаботы");
			
			Строка.СпособРасчетаСтоимостиРаботы = ?(
				ЗначениеЗаполнено(СпособРасчетаСтоимостиРаботы),
				СпособРасчетаСтоимостиРаботы,
				Перечисления.СпособыРасчетаСтоимостиРаботы.ФиксированнойСуммой);
			
		Иначе
			
			ВидЦены = "";
			Строка.СпособРасчетаСтоимостиРаботы = ?(
				ЦенаАвтоработы.Свойство("ВидЦены", ВидЦены) И ВидЦены = "Нормочас",
				Перечисления.СпособыРасчетаСтоимостиРаботы.ПоНормеВремени,
				Перечисления.СпособыРасчетаСтоимостиРаботы.ФиксированнойСуммой);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Строка.Нормочас    = ЦенаАвтоработы.Нормочас;
	Строка.Коэффициент = ?(НЕ ЗначениеЗаполнено(ЦенаАвтоработы.НормаВремени), Строка.Коэффициент, ЦенаАвтоработы.НормаВремени);
	Строка.Цена        = ЦенаАвтоработы.Цена;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Способ расчета стоимости работы" в таблице "Автоработы".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтоработыСпособРасчетаСтоимостиРаботыПриИзменени(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	АвтоработыЦенаПриИзменении(Объект, Строка);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	Обработчик = ?(
		ПраваИНастройкиПользователя.Значение("ЗапросВалютыПечатногоДокумента"),
		"УправлениеПечатьюАвтосалонКлиент.НачатьВыборВалютыДляПечати",
		"");
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.КорректировкаРеализации",
		"ПФ_MXL_РеализацияТоваров",
		НСтр("ru = 'Расходная накладная'"),
		СсылкаНаДокумент,
		Обработчик);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьТОРГ",
		"ПФ_MXL_ТОРГ12",
		НСтр("ru = 'ТОРГ-12 (Товарная накладная)'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьУПД",
		"ПФ_MXL_УПД",
		НСтр("ru = 'Универсальный передаточный документ'"),
		СсылкаНаДокумент);
	УправлениеПечатьюАльфаАвто.ДобавитьУсловиеВидимостиПоследнейКоманды(КомандыПечати, 
		"ДоступнаПечатьУПД", Истина);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьУКД",
		"ПФ_MXL_УКД",
		НСтр("ru = 'Универсальный корректировочный документ'"),
		СсылкаНаДокумент);
	УправлениеПечатьюАльфаАвто.ДобавитьУсловиеВидимостиПоследнейКоманды(КомандыПечати, 
		"ДоступнаПечатьУКД", Истина);
		
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - ТаблицаЗначений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_РеализацияТоваров") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_РеализацияТоваров",
															НСтр("ru = 'Реализация товаров'"),
															ПечатьРеализацияТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
														КонецЕсли;
														
														
КонецПроцедуры // Печать()

// Функция получения данных для ТОРГ 12
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Структура - данные объекта для печати ТОРГ12.
//
Функция ПолучитьДанныеДляПечатиТОРГ12(Объект) Экспорт
	ДанныеОбъекта = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КорректировкаРеализацииТовары.НомерСтроки КАК НомерСтроки,
	               |	КорректировкаРеализацииТовары.Номенклатура КАК Номенклатура,
				   |	КорректировкаРеализацииТовары.Содержание КАК Содержание,
	               |	КорректировкаРеализацииТовары.Количество КАК Количество,
	               |	КорректировкаРеализацииТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	КорректировкаРеализацииТовары.Коэффициент КАК Коэффициент,
	               |	КорректировкаРеализацииТовары.Цена КАК Цена,
	               |	КорректировкаРеализацииТовары.Сумма КАК Сумма,
	               |	КорректировкаРеализацииТовары.СтавкаНДС КАК СтавкаНДС,
	               |	КорректировкаРеализацииТовары.СуммаНДС КАК СуммаНДС,
	               |	КорректировкаРеализацииТовары.СуммаВсего КАК СуммаВсего,
	               |	КорректировкаРеализацииТовары.Количество * КорректировкаРеализацииТовары.Коэффициент КАК КоличествоБазовое,
	               |	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	КорректировкаРеализацииТовары.Номенклатура.Артикул КАК Код,
	               |	КорректировкаРеализацииТовары.СуммаВсего - КорректировкаРеализацииТовары.СуммаНДС КАК СуммаБезНДС
	               |ИЗ
	               |	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
	               |ГДЕ
	               |	КорректировкаРеализацииТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	ПодготовленнаяТЧ = Запрос.Выполнить().Выгрузить();
	
	// данные документа
	ДанныеОбъекта.Вставить("Организация"            , Объект.Организация);
	ДанныеОбъекта.Вставить("ВалютаДокумента"        , Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"          , Объект.КурсДокумента);
	ДанныеОбъекта.Вставить("Дата"                   , Объект.Дата);
	ДанныеОбъекта.Вставить("ДокументОснование"      , Объект.ДоговорВзаиморасчетов);
	ДанныеОбъекта.Вставить("ВыборкаТабличнойЧасти"  , ПодготовленнаяТЧ);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  , Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("ОснованиеДата"          , Формат(Объект.ДоговорВзаиморасчетов.ДатаНачала, "ЧЦ=; ДФ=dd.MM.yyyy"));
	ДанныеОбъекта.Вставить("ОснованиеНомер"         , Объект.ДоговорВзаиморасчетов.НомерДоговора);
	ДанныеОбъекта.Вставить("КодПоОКПО"              , Объект.Организация.КодПоОКПО);
	ДанныеОбъекта.Вставить("РасчетныйСчетДокумента" , "");
	ДанныеОбъекта.Вставить("ВидДеятельностиПоОКДП"  , Объект.Организация.КодПоОКДП);

	// свойства 
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПоставщикКонтрагент);
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Плательщик); 

	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства); 
	ДатаОтгрузки = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", ЗначенияСвойствОбъекта);	
	ДанныеОбъекта.Вставить("ДатаОтгрузки"     , ?(НЕ ЗначениеЗаполнено(ДатаОтгрузки),"""___""____________ 20___",Формат(ДатаОтгрузки,"ДЛФ=D")));
	
   	ДанныеОбъекта.Вставить("Поставщик"             , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ПоставщикКонтрагент", ЗначенияСвойствОбъекта,Объект.Организация));
	ДанныеОбъекта.Вставить("Плательщик"            , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Плательщик", ЗначенияСвойствОбъекта,Объект.Контрагент));
	
	ДанныеОбъекта.Вставить("Грузоотправитель"        , ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, Объект.Организация));
	ДанныеОбъекта.Вставить("Грузополучатель"         , ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, Объект.Контрагент));
	ДанныеОбъекта.Вставить("Руководитель"     	     , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Руководитель"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Отпустил"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Отпустил"));  
	ДанныеОбъекта.Вставить("Принял"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Принял"));
	ДанныеОбъекта.Вставить("Получил"          		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Получил")); 
	ДанныеОбъекта.Вставить("ГрузополучательПоОКПО"   , ДанныеОбъекта.Грузополучатель.КодПоОКПО);
	ДанныеОбъекта.Вставить("ПоставщикПоОКПО"         , ДанныеОбъекта.Поставщик.КодПоОКПО);
	ДанныеОбъекта.Вставить("ПлательщикПоОКПО"        , ДанныеОбъекта.Плательщик.КодПоОКПО);

	Возврат ДанныеОбъекта;
КонецФункции

// Функция получения данных для УПД
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Структура - данные объекта для печати УПД.
//
Функция ПолучитьДанныеДляПечатиУПД(Объект) Экспорт
	
	ДокументФактура = Документы.РеализацияТоваров.ПолучитьСФПоДокументуОснования(Объект.Ссылка);

	ДокументОбъект = ДокументФактура;
	ДанныеОбъекта = Новый Структура();
	
	// Сформируем статус документа
	Если ДокументФактура <> Документы.СчетФактураВыданный.ПустаяСсылка() И НЕ ДокументФактура.ПометкаУдаления Тогда
		Статус = 1;
		ДокументОбъект = ДокументФактура;
		
		ТаблицаТоваров = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект, "Товары").Выгрузить();
		
		ДанныеИсходногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументФактура,
			"НомерИсходногоДокумента,ДатаИсходногоДокумента,НомерИсправления,Дата,НомерИсправленияИсходногоДокумента"
			+ ",ДатаИсправленияИсходногоДокумента,ПодразделениеКомпании,Исправление"
			+ ",НомерИсправляемогоКорректировочногоДокумента,ДатаИсправляемогоКорректировочногоДокумента");
		
	Иначе
		Статус = 2;
		ДокументОбъект = Объект;
		
		// Получим по СФ таблицу товаров
		УстановитьПривилегированныйРежим(Истина);
		
		ДокументСчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
		ДокументСчетФактура.ДополнительныеСвойства.Вставить("ПропуститьПроверкуОснованияСчетаФактуры", Истина);
		ДокументСчетФактура.Заполнить(Объект);
		ТаблицаТоваров = ДокументСчетФактура.Товары.Выгрузить();
		
		УстановитьПривилегированныйРежим(Ложь);  
		
		ДанныеИсходногоДокумента = Документы.СчетФактураВыданный.КорректировочныеДанныеДокумента();
		ДанныеИсходногоДокумента.ПодразделениеКомпании = ДокументОбъект.ПодразделениеКомпании;
		ДанныеИсходногоДокумента.Дата = ДокументОбъект.Дата;
		Документы.СчетФактураВыданный.ЗаполнитьНомера(ДанныеИсходногоДокумента, Объект.Ссылка, Истина);
		
	КонецЕсли;
	
	// данные документа
	ДанныеОбъекта.Вставить("Дата"                   	, ДокументОбъект.Дата);
	ДанныеОбъекта.Вставить("Номер"                  	, УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ДокументОбъект)); 
	ДанныеОбъекта.Вставить("Исправление"				, Истина);
	ДанныеОбъекта.Вставить("ХозОперация"            	, ДокументОбъект.ХозОперация);
	ДанныеОбъекта.Вставить("ДокументОснование"      	, ДокументОбъект.ДокументОснование.ДокументОснование);
	ДанныеОбъекта.Вставить("ВалютаДокумента"      		, ДокументОбъект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"      		, ДокументОбъект.КурсДокумента);
	ДанныеОбъекта.Вставить("ТипЦен"      				, ДокументОбъект.ТипЦен);
	ДанныеОбъекта.Вставить("Поставщик"              	, ДокументОбъект.Организация);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"  	, ДокументОбъект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("Покупатель"              	, ДокументОбъект.Контрагент);
	ДанныеОбъекта.Вставить("Организация"              	, Объект.Организация);
	ДанныеОбъекта.Вставить("ДоговорВзаиморасчетов"     	, ?(ЗначениеЗаполнено(ДокументОбъект.ДоговорВзаиморасчетов), Объект.ДоговорВзаиморасчетов, "--"));
	ДанныеОбъекта.Вставить("Товары"              		, ТаблицаТоваров);
	ДанныеОбъекта.Вставить("СуммаДокумента"             , ДокументОбъект.СуммаДокумента);
	ДанныеОбъекта.Вставить("Статус"              		, Статус);
	ДанныеОбъекта.Вставить("Ссылка"              		, ДокументОбъект.Ссылка);
	ДанныеОбъекта.Вставить("ИдентификаторГосударственногоКонтракта", Объект.ИдентификаторГосударственногоКонтракта);
	ДанныеОбъекта.Вставить("ДокументОтгрузки", Объект.Сделка);
	
	Документы.СчетФактураВыданный.ДополнитьДанныеОбъектаНомерамиСчетовФактур(ДанныеОбъекта, ДанныеИсходногоДокумента);
	
	Если Статус = 1 Тогда
		ДанныеОбъекта.Вставить("НомерИсправления"       	, ?(ЗначениеЗаполнено(ДокументОбъект.НомерИсправления), ДокументОбъект.НомерИсправления, ""));
		ДанныеОбъекта.Вставить("ДатаИсправления"        	, ?(ЗначениеЗаполнено(ДокументОбъект.Дата), ДокументОбъект.Дата, ""));
		ДанныеОбъекта.Вставить("ПлатежноРасчетныеДокументы" , ДокументОбъект.ПлатежноРасчетныеДокументы);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("ТаблицаРНПТ", УчетПрослеживаемыхТоваровСервер.РНПТВДокументе(Объект.Ссылка));
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства); 
	ДанныеОбъекта.Вставить("ДатаОтгрузки"            , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", ЗначенияСвойствОбъекта)); 
	
	ДанныеОбъекта.Вставить("Грузоотправитель"        , ?(ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Грузоотправитель, ДокументОбъект.Организация));
	ДанныеОбъекта.Вставить("Грузополучатель"         , ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, ДокументОбъект.Контрагент));
  	
	ДанныеОбъекта.Вставить("Руководитель"     	     , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Руководитель"));
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "ГлавныйБухгалтер"));
	ДанныеОбъекта.Вставить("Отпустил"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект,"Отпустил"));
	ДанныеОбъекта.Вставить("Получил"          		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Получил"));
	ДанныеОбъекта.Вставить("Менеджер"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Менеджер"));
	
	Возврат ДанныеОбъекта;
	
КонецФункции

// Функция получения данных для УКД
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
// Возвращаемое значение:
//  Структура - данные объекта для печати УКД.
//
Функция ПолучитьДанныеДляПечатиУКД(Объект) Экспорт
	
	ДокументФактура = Документы.РеализацияТоваров.ПолучитьСФПоДокументуОснования(Объект.Ссылка);  
	
	ДокументОбъект = ДокументФактура;
	ДанныеОбъекта = Новый Структура();
	
	// Сформируем статус документа
	Если ДокументФактура <> Документы.СчетФактураВыданный.ПустаяСсылка() И НЕ ДокументФактура.ПометкаУдаления Тогда
		
		Статус = 1;
		ДокументОбъект = ДокументФактура;
		
		ДанныеИсходногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументФактура,
			"НомерИсходногоДокумента,ДатаИсходногоДокумента,НомерИсправления,Дата,НомерИсправленияИсходногоДокумента"
			+ ",ДатаИсправленияИсходногоДокумента,ПодразделениеКомпании,Исправление"
			+ ",НомерИсправляемогоКорректировочногоДокумента,ДатаИсправляемогоКорректировочногоДокумента");
		
	Иначе
		
		Статус = 2;
		ДокументОбъект = Объект;
		ДанныеИсходногоДокумента = Документы.СчетФактураВыданный.КорректировочныеДанныеДокумента();
		ДанныеИсходногоДокумента.ПодразделениеКомпании = ДокументОбъект.ПодразделениеКомпании;
		ДанныеИсходногоДокумента.Дата = ДокументОбъект.Дата;
		Документы.СчетФактураВыданный.ЗаполнитьНомера(ДанныеИсходногоДокумента, Объект.Ссылка, Истина);
		
	КонецЕсли;
	
	ТаблицаТоваров = ТоварыДляУКД(Объект.Ссылка);
	
	ДанныеОбъекта.Вставить("Дата"					, ДокументОбъект.Дата);
	ДанныеОбъекта.Вставить("Номер"					, УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ДокументОбъект));
	ДанныеОбъекта.Вставить("ХозОперация"			, ДокументОбъект.ХозОперация);
	ДанныеОбъекта.Вставить("ДокументОснование"		, ДокументОбъект.ДокументОснование);
	ДанныеОбъекта.Вставить("ВалютаДокумента"		, Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"			, Объект.КурсДокумента);
	ДанныеОбъекта.Вставить("ТипЦен"					, Объект.ТипЦен);
	ДанныеОбъекта.Вставить("Поставщик"				, ДокументОбъект.Организация);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"	, ДокументОбъект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("Покупатель"				, ДокументОбъект.Контрагент);
	ДанныеОбъекта.Вставить("Организация"			, Объект.Организация);
	ДанныеОбъекта.Вставить("ДоговорВзаиморасчетов",
		?(ЗначениеЗаполнено(ДокументОбъект.ДоговорВзаиморасчетов), Объект.ДоговорВзаиморасчетов, "--"));
	ДанныеОбъекта.Вставить("Товары"									, ТаблицаТоваров);
	ДанныеОбъекта.Вставить("Статус"									, Статус);
	ДанныеОбъекта.Вставить("Ссылка"									, ДокументОбъект.Ссылка);
	ДанныеОбъекта.Вставить("ИдентификаторГосударственногоКонтракта"	, Объект.ИдентификаторГосударственногоКонтракта);
	
	Документы.СчетФактураВыданный.ДополнитьДанныеОбъектаНомерамиСчетовФактур(ДанныеОбъекта, ДанныеИсходногоДокумента);
	
	Если Статус = 1 Тогда
		Документы.СчетФактураВыданный.ДополнитьДанныеОбъектаНомерамиСчетовФактур(ДанныеОбъекта, ДокументОбъект);
		ДанныеОбъекта.Вставить("ПлатежноРасчетныеДокументы", ДокументОбъект.ПлатежноРасчетныеДокументы);
	КонецЕсли;
	
	// свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(
		ДокументОбъект, Истина, Истина, ИскомыеСвойства);
	ДанныеОбъекта.Вставить("ДатаОтгрузки",
		УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", ЗначенияСвойствОбъекта)); 
		
	ДанныеОбъекта.Вставить("Руководитель"     	     , 
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Руководитель")
	);
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 		 ,
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "ГлавныйБухгалтер")
	);
	ДанныеОбъекта.Вставить("Менеджер"         		 , 
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Менеджер")
	);
	
	ДанныеОбъекта.Вставить("ЭтоПродажа", Истина);
	Возврат ДанныеОбъекта;
	
КонецФункции

#КонецОбласти

#Область ЭДО

// Формирует коллекцию с описанием кодов маркировок проданых товаров
//
// Параметры:
//  Сам - ДокументСсылка.РеализацияТоваров - Документ, для которого выполняется операция.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками:
//    * ИдентификаторТовара - Строка - идентификатор строки товаров к которой относятся коды;
//    * КодМаркировки - Строка - код маркировки товара
//
Функция ПолучитьКодыУпаковокМаркируемойПродукции(Сам) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	КорректировкаРеализацииКодыМаркировки.ИдентификаторТовара КАК ИдентификаторТовара,
	|	КорректировкаРеализацииКодыМаркировки.КодМаркировки КАК КодМаркировки
	|ИЗ
	|	Документ.КорректировкаРеализации.КодыМаркировки КАК КорректировкаРеализацииКодыМаркировки
	|ГДЕ
	|	КорректировкаРеализацииКодыМаркировки.Ссылка = &Ссылка
	|	И НЕ КорректировкаРеализацииКодыМаркировки.Возврат");
	
	Запрос.УстановитьПараметр("Ссылка", Сам);
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует коллекцию с описанием кодов маркировок проданых товаров в разрезе номенклатуры и характеристики
//
// Параметры:
//  Сам - ДокументСсылка.РеализацияТоваров - Документ, для которого выполняется операция.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками:
//    * Номенклатура - СправочникСсылка.Номенклатура - номенклатура, по которой ведется учет по кодам маркировки;
//    * ХарактеристикаНоменклатуры - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика номенклатуры с кодом;
//    * КодМаркировки - Строка - код маркировки товара
//
Функция ПолучитьКодыУпаковокМаркируемойПродукцииСНоменклатурой(Сам) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	КорректировкаРеализацииТовары.ИдентификаторТовара КАК ИдентификаторТовара,
	|	КорректировкаРеализацииТовары.Номенклатура КАК Номенклатура,
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторТовара
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаРеализацииКодыМаркировки.ИдентификаторТовара КАК ИдентификаторТовара,
	|	КорректировкаРеализацииКодыМаркировки.КодМаркировки КАК КодМаркировки
	|ПОМЕСТИТЬ ТаблицаКодовМаркировки
	|ИЗ
	|	Документ.КорректировкаРеализации.КодыМаркировки КАК КорректировкаРеализацииКодыМаркировки
	|ГДЕ
	|	КорректировкаРеализацииКодыМаркировки.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторТовара
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаКодовМаркировки.КодМаркировки КАК КодМаркировки
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКодовМаркировки КАК ТаблицаКодовМаркировки
	|		ПО ТаблицаТоваров.ИдентификаторТовара = ТаблицаКодовМаркировки.ИдентификаторТовара");
	
	Запрос.УстановитьПараметр("Ссылка", Сам);
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления

// Выполняет перенос свойств в реквизиты объекта
// Руководитель, ГлавныйБухгалтер,Отустил, ОтпустилКонтрагент, Получил, ПолучилКонтрагент
//
Процедура ВыполнитьПереносПодписантовИзСвойств() Экспорт 
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();
	ПеренесеныВсеСвойства = Истина;
	МассивПереносимыхСвойств = УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства); 

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализацииДополнительныеРеквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации.ДополнительныеРеквизиты КАК КорректировкаРеализацииДополнительныеРеквизиты
	|ГДЕ
	|	КорректировкаРеализацииДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", МассивПереносимыхСвойств);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();  
	
	Пока Выборка.Следующий() Цикл  
		
		СвойстваКУдалению = Новый Массив();
		
		НачатьТранзакцию(); 
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.КорректировкаРеализации");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();  
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗначенияСвойств = ДокументОбъект.ДополнительныеРеквизиты.Выгрузить();
			
				Если НЕ ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда 
				
				СвойствоРуководитель = ЗначенияСвойств.Найти(ПереносимыеСвойства.Руководитель,"Свойство");
				
				Если СвойствоРуководитель <> Неопределено Тогда
					
					ДокументОбъект.Руководитель = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоРуководитель.Значение,
						Выборка.Ссылка
					);
					
					Если ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоРуководитель.Свойство);
						
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтОрганизации) Тогда 
					
					ДокументОбъект.Руководитель = ДокументОбъект.ПодписантОтОрганизации
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда	
				
				СвойствоГлавныйБухгалтер = ЗначенияСвойств.Найти(ПереносимыеСвойства.ГлавныйБухгалтер,"Свойство");
				
				Если СвойствоГлавныйБухгалтер <> Неопределено Тогда
					
					ДокументОбъект.ГлавныйБухгалтер = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоГлавныйБухгалтер.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоГлавныйБухгалтер.Свойство); 
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
			
				Если Не ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда	
				
				СвойствоОтпустил = ЗначенияСвойств.Найти(ПереносимыеСвойства.Отпустил,"Свойство");
				
				Если СвойствоОтпустил <> Неопределено Тогда
					
					ДокументОбъект.Отпустил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоОтпустил.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоОтпустил.Свойство);
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда	
				
				СвойствоПолучилКонтрагент = ЗначенияСвойств.Найти(ПереносимыеСвойства.ПолучилКонтрагент,"Свойство");
				
				Если СвойствоПолучилКонтрагент <> Неопределено Тогда
					
					ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоПолучилКонтрагент.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоПолучилКонтрагент.Свойство);
						
					КонецЕсли; 
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтКонтрагента) Тогда 
					
					ДокументОбъект.Получил = ДокументОбъект.ПодписантОтКонтрагента
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
				
				СвойствоДоверенность = ЗначенияСвойств.Найти(ПереносимыеСвойства.Доверенность,"Свойство");
				
				Если СвойствоДоверенность <> Неопределено Тогда

					Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
							СвойствоДоверенность.Значение.Владелец,
							Выборка.Ссылка,
							СвойствоДоверенность.Значение
						);
						
						Если ЗначениеЗаполнено(ДокументОбъект.Получил)  И значениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство);
							
						КонецЕсли; 
						
					ИначеЕсли ДокументОбъект.Получил.Подписант = СвойствоДоверенность.Значение.Владелец
						И  НЕ ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
						
						ПолучилОбъект = ДокументОбъект.Получил.ПолучитьОбъект();
						ПолучилОбъект.Основание = СвойствоДоверенность.Значение;  
						
						Попытка	
							ПолучилОбъект.Записать(); 
						Исключение	
						КонецПопытки;
						
						Если ЗначениеЗаполнено(ПолучилОбъект.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство); 
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;  
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Принял) Тогда
				СвойствоДоверенность = ЗначенияСвойств.Найти(ПереносимыеСвойства.Доверенность,"Свойство");
				
				Если СвойствоДоверенность <> Неопределено Тогда

										
					ДокументОбъект.Принял = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоДоверенность.Значение.Владелец,
						Выборка.Ссылка,
						СвойствоДоверенность.Значение
					);
						
					Если ЗначениеЗаполнено(ДокументОбъект.Принял)  И значениеЗаполнено(ДокументОбъект.Принял.Основание) Тогда
							
						СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство);
							
					КонецЕсли; 
					
				КонецЕсли;
					
			КонецЕсли;
			
			Если СвойстваКУдалению.Количество()>0 Тогда  
				
				Для Каждого Элемент Из СвойстваКУдалению Цикл 
					
					Строка = ДокументОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
					Если Строка <> Неопределено Тогда 
						
						ДокументОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение 
			
			ОтменитьТранзакцию();
			ПеренесеныВсеСвойства = Ложь;
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления списка подписантов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
		
	КонецЦикла;  
	
	Если ПеренесеныВсеСвойства Тогда
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Набор
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка.ИмяПредопределенныхДанных = ""Документ_КорректировкаРеализации""";
		
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();	
			
			Пока Выборка.Следующий() Цикл
				

				Попытка	
					НаборОбъект = Выборка.Набор.ПолучитьОбъект();
					
					Для Каждого Элемент Из МассивПереносимыхСвойств Цикл 
					
						Строка = НаборОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
						Если Строка <> Неопределено Тогда 
						
							НаборОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
						КонецЕсли;
					
					КонецЦикла;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборОбъект);
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось обработать справочник: ""НаборыДополнительныхРеквизитовИСведений"" по причине:
							|%1'"), 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений, "НаборыДополнительныхРеквизитовИСведений", ТекстСообщения);
				КонецПопытки;	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры	

// Выполяет проверку выполнения отложенного обработчика обновления ВыполнитьПереносПодписантовИзСвойств
//
// Параметры:
//  Параметры - Структура - параметры выполнения операции
//
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ПроверитьПереносПодписантовИзСвойств (Параметры) Экспорт
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализацииДополнительныеРеквизиты.Свойство КАК Свойство,
	|	КорректировкаРеализацииДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Документ.КорректировкаРеализации.ДополнительныеРеквизиты КАК КорректировкаРеализацииДополнительныеРеквизиты
	|ГДЕ
	|	КорректировкаРеализацииДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)
	|	И КорректировкаРеализацииДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства));
	Запрос.УстановитьПараметр("Ссылка",				 Параметры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает все документы, в которых присутствуют коды маркировки.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка результата запроса, содержащая требуемые документы.
//
Функция ДокументыСКодамиМаркировки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КорректировкаРеализацииКодыМаркировки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации.КодыМаркировки КАК КорректировкаРеализацииКодыМаркировки
	|ГДЕ
	|	КорректировкаРеализацииКодыМаркировки.КодМаркировки <> """"";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Процедура зачистки криптохвостов кодов маркировки.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.КорректировкаРеализации - документ, для которого выполняется действие.
//
Процедура ОтрезатьКриптохвосты(ДокументОбъект) Экспорт
	
	Для Каждого СтрокаТоваров Из ДокументОбъект.КодыМаркировки Цикл
		СтрокаТоваров.КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(СтрокаТоваров.КодМаркировки);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизит "НомерИсправления" на основании введенного корректировочного счета-фактуры.
//
Процедура ЗаполнитьНомерИсправленияВКорректировкахРеализации() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Исключения = Новый Массив;
	Результат = КорректировкиДляЗаполнения(Исключения);
	
	Пока Не Результат.Пустой Цикл
		
		ВыборкаДокумента = Результат.Выборка;
		
		Пока ВыборкаДокумента.Следующий() Цикл
			
			ДокументОбъект = ВыборкаДокумента.Ссылка.ПолучитьОбъект();
			ДокументОбъект.НомерИсправления = ВыборкаДокумента.НомерИсправления;
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			
			Попытка
				ДокументОбъект.Записать();
			Исключение
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'Не удалось заполнить реквизит номер исправления документа %1'"),
						СокрЛП(Строка(ДокументОбъект.Ссылка))
					)
				);
			КонецПопытки;
			
			Исключения.Добавить(ДокументОбъект.Ссылка);
			
		КонецЦикла;
		
		Результат = КорректировкиДляЗаполнения(Исключения);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЧекНаОплату);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВозвратВОборотКодовМаркировки);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВыводИзОборотаКодовМаркировки);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаРеализации);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Перемаркировка);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ПриходныйСкладскойОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.РасходныйСкладскойОрдер);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетФактураВыданный);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	//Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
	//	Метаданные.Документы.КорректировкаРеализации);
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаРеализации) Тогда
		
		Результат = КомандыСоздатьНаОсновании.Добавить();
		Результат.Менеджер = "СозданиеНаОснованииАльфаАвтоКлиент";
		Результат.Обработчик = "НачатьСозданиеНаОснованииКорректировкиРеализации";
		Результат.Представление = ОбщегоНазначения.ПредставлениеОбъекта(Метаданные.Документы.КорректировкаРеализации);
			
		Если ПраваИНастройкиПользователя.Значение("ВводНаОснованииПроведенныхДокументов") Тогда
			
			Результат.РежимЗаписи = "Проводить";
			
		КонецЕсли;
		
		Возврат Результат;
	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Определяет необходимость заполнения склада переданого объекта.
// Если ХозОперация сделки переданного объекта равна "Акт об оказании услуг",
// то в использовании склада нет необходимости
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется операция.
//  
// Возвращаемое значение:
//  Булево - Ложь, в случае если ХозОперация сделки равна "Акт об оказании услуг"
//           Истина, в ином случае.
//
Функция НеобходимоИспользоватьСклад(Объект) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
	
		Возврат Истина;
	
	КонецЕсли;
	
	Сделка = ПолучитьСделку(Объект.ДокументОснование);
	
	Если НЕ ЗначениеЗаполнено(Сделка) Тогда
	
		Возврат Истина;
	
	КонецЕсли;
	
	ХозОперацияСделки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сделка, "ХозОперация", Истина);
	
	Возврат НЕ ХозОперацияСделки = Справочники.ХозОперации.АктОбОказанииУслуг;

КонецФункции

#КонецОбласти 

#Область ЗапретРедактированияРеквизитовОбъектов

// Определяет блокируемые реквизиты
//
// Возвращаемое значение:
//  Массив - Строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]. Например: "Объект.Автор", "ПолеАвтор".
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив();
	Результат.Добавить("СкладКомпании");
		
    Возврат Результат;
    
КонецФункции

#КонецОбласти
 
#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)
		|	И ЗначениеРазрешено(Контрагент)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Проверяет возможность ввода счет-фактуры выданной на основании документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.КорректировкаРеализации - документ, для которого выполняется действие.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина, если ввод возможен, Ложь - в противном случае.
//
Функция ВозможенВводСчетФактурыВыданной(ДокументОбъект, ДополнительныеПарметры = Неопределено) Экспорт
	
	СистемаНО = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.СистемаНалогообложения,
		ДокументОбъект.Организация,
	);
	
	НалогообложениеУСН = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.НалогообложениеНДСПриУСН,
		ДокументОбъект.Организация,
	);
	
	Если СистемаНО = Перечисления.СистемыНалогообложения.Упрощенная И НЕ РаботаСоСтавкамиНДССервер.УСНПлательщикНДС(НалогообложениеУСН) Тогда
        Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбработкаСобытийДокументаСервер.ДокументСодержитСтрокиСНДС(ДокументОбъект, "Товары, Автоработы");
		
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает предопределенную структуру действий
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	Если ЕстьРеквизит(Объект, , "Автоработы") Тогда
		ПараметрыДействия.Вставить("ОбъектЗаполненАвтоработами", Объект.Автоработы.Количество() > 0);
	КонецЕсли;
	
	ПараметрыДействия.Вставить("НеРассчитыватьСкидки", Истина);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// приватно отработаем пересчет цен работ
	ПерезаполнитьЦеныТабличнойЧастиРабот(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция печати реализации товаров
//
Функция ПечатьРеализацияТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаРеализации_РеализацияТоваров";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Валюта печати
		ВалютаПечатногоДокумента = ПолучитьЗначениеПараметраСтруктуры(ПараметрыПечати,
			"ВалютаПечатногоДокумента",
			Документ.ВалютаДокумента);
		
		// Получим макет печатной формы.
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваров.ПФ_MXL_РеализацияТоваров");
		
		// Получение необходимых областей.
		ОбластьШапкаТаблицы = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет,Документ);
		ОбластьШапкаТаблицы.Параметры.Товар = ?(Документ.ХозОперация = Справочники.ХозОперации.АктОбОказанииУслуг,
			"Услуга", "Товар");
		
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		Если Документ.ХозОперация = Справочники.ХозОперации.АктОбОказанииУслуг
			ИЛИ Документ.ХозОперация = Справочники.ХозОперации.РеализацияАгентскихУслуг Тогда
			ОбластьПодвал = Макет.ПолучитьОбласть("ПодвалАкта");
		Иначе
			ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОбластьЗаголовок.Параметры, Документ);
		Если Документ.ХозОперация = Справочники.ХозОперации.АктОбОказанииУслуг
			ИЛИ Документ.ХозОперация = Справочники.ХозОперации.РеализацияАгентскихУслуг Тогда
			ТекстЗаголовка = Документ.ХозОперация.Наименование + " № "
				+ УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ) + " от " + Формат(Документ.Дата, "ДЛФ=D");
		Иначе
			ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		КонецЕсли;
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		// * //
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеПокупателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Контрагент, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ПредставлениеСклада = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			Документ.СкладКомпании);
		// * //

		ОбластьЗаголовок.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
		
		// Выведем или удалим ШК
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Готовим шапку
		НомерСтраницы = 2; НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего", ВалютаПечатногоДокумента, 0, 0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// Заполняем ТЧ
		ВыборкаТабличнойЧасти = Документ.Товары.Выгрузить();
		
		// Пересчет сумм по выбранной валюте.
		Если ВыборкаТабличнойЧасти.Количество() > 0
			И ВалютаПечатногоДокумента <> Документ.ВалютаДокумента Тогда
			ДокументОбъектСтруктура = УправлениеПечатьюПлатформа.ДанныеДокументаДляПерерасчетаТаблицы();
			ЗаполнитьЗначенияСвойств(ДокументОбъектСтруктура, Документ);
			ДокументОбъектСтруктура.Документ = Документ;
			
			ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ВыборкаТабличнойЧасти,
				ДокументОбъектСтруктура,
				ВалютаПечатногоДокумента);
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			
			ЗаполнитьЗначенияСвойств(
				ОбластьСтрока.Параметры,
				УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ)
			);
			
			ОбластиПодвалаДляПечати = Неопределено;
			
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
				
				ОбластиПодвалаДляПечати = Новый Массив;
				ОбластиПодвалаДляПечати.Добавить(ОбластьПодвал);
				
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(
				ТабличныйДокумент,
				ОбластьСтрока,
				ОбластьШапкаТаблицы,
				ОбластьИтогоПоСтранице,
				НомерСтраницы,
				СтруктураИтоговПоСтранице,
				Документ,
				ОбластиПодвалаДляПечати
			);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаНДС,СуммаВсего", ВалютаПечатногоДокумента, 0, 0);
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// Заполнение подвала и итогов.
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		ОбластьПодвал.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("СуммаВсего");
		ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		НДСВсего = ВыборкаТабличнойЧасти.Итог("СуммаНДС");
		ОбластьПодвал.Параметры.НДСВсего = Формат(НДСВсего, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'") + Символы.НПП
			+ ВыборкаТабличнойЧасти.Количество() + Символы.НПП + НСтр("ru = 'на сумму'") + Символы.НПП
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, ВалютаПечатногоДокумента);
		
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(
			УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ПолучилКонтрагент", "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// Блок области
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// заполнение ставки ндс таблицы "Работ" по признаку освобождения от НДС
//
// Параметры:
//	Объект - текущий объект заполнения
//	ПараметрыНДС - Структура - структура определяющая плательщика НДС.
//
Процедура УстановитьСтавкуНДСДляРабот(Объект, ПараметрыНДС)
	
	ОсвобожденОтНДС = ПараметрыНДС.ОсвобожденОтНДС;
	
	Для Каждого Строка Из Объект.Автоработы Цикл
		Строка.СтавкаНДС = ?(ОсвобожденОтНДС, Справочники.СтавкиНДС.БезНДС, РаботаСоСтавкамиНДССервер.СтавкаНДСНоменклатуры(ПараметрыНДС, Строка.Авторабота));
		АвтоработыСтавкаНДСПриИзменении(Объект, Строка);
	КонецЦикла;
	
КонецПроцедуры

Функция ТоварыДляУКД(Корректировка)
	
	ДанныеКорректировки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Корректировка, "ДокументОснование, ХозОперация, ДокументОснование.ХозОперация");
	ОснованиеКорректировки = ДанныеКорректировки.ДокументОснование;
	ХозОперацияКорректировки = ДанныеКорректировки.ХозОперация;
	ХозОперацияОснованияКорректировки = ДанныеКорректировки.ДокументОснованиеХозОперация;
	
	ТоварыДокумента = ТоварыИзСчетаФактуры(Корректировка); 
	
	Если ХозОперацияКорректировки = Справочники.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах Тогда
		
		ПолучитьДокументДоВнесенияКорректировки(ОснованиеКорректировки, ХозОперацияОснованияКорректировки);
		
	КонецЕсли;
	ТоварыДокументаОснования = ТоварыИзСчетаФактуры(ОснованиеКорректировки);
	
	ДанныеПослеИзменения = ДополнитьДаннымиОГТД(ТоварыДокумента.Товары, ТоварыДокумента.ТоварыСГТД, "КоличествоПосле");
	ДанныеДоИзменения = ДополнитьДаннымиОГТД(ТоварыДокументаОснования.Товары, ТоварыДокументаОснования.ТоварыСГТД,
		"КоличествоДо");
	
	Изменения = НоваяТаблицаИзменений();
	УдалитьПосле = Новый Массив();
	
	Для Каждого ТекущаяСтрока Из ДанныеПослеИзменения Цикл
		
		УсловиеПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,ГТД,Партия");
		ЗаполнитьЗначенияСвойств(УсловиеПоиска, ТекущаяСтрока);
		
		НайденныеСтроки = ДанныеДоИзменения.НайтиСтроки(УсловиеПоиска);
		БезПартии = Ложь;
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			// попробуем найти строку без учета партии
			УсловиеПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,ГТД");
			ЗаполнитьЗначенияСвойств(УсловиеПоиска, ТекущаяСтрока);
			
			НайденныеСтроки = ДанныеДоИзменения.НайтиСтроки(УсловиеПоиска);
			
			Если НайденныеСтроки.Количество() <> 1 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			БезПартии = Истина;
			
		КонецЕсли;
		
		Если ЕстьРазличияВСтроках(НайденныеСтроки[0], ТекущаяСтрока, БезПартии) Тогда
		
			НоваяСтрока = Изменения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			НоваяСтрока.КоличествоПоДокументуРеализации = НайденныеСтроки[0].Количество;
			НоваяСтрока.ЕдиницаИзмеренияПоДокументуРеализации = НайденныеСтроки[0].ЕдиницаИзмерения;
			НоваяСтрока.КоэффициентПоДокументуРеализации = НайденныеСтроки[0].Коэффициент;
			НоваяСтрока.СуммаНДСПоДокументуРеализации = НайденныеСтроки[0].СуммаНДС;
			НоваяСтрока.СуммаВсегоПоДокументуРеализации = НайденныеСтроки[0].СуммаВсего;
			НоваяСтрока.КоличествоРазница = ТекущаяСтрока.Количество - НайденныеСтроки[0].Количество;
			НоваяСтрока.СуммаНДСРазница = ТекущаяСтрока.СуммаНДС - НайденныеСтроки[0].СуммаНДС;
			НоваяСтрока.СуммаВсегоРазница = ТекущаяСтрока.СуммаВсего - НайденныеСтроки[0].СуммаВсего;
			НоваяСтрока.КоличествоДо = НайденныеСтроки[0].КоличествоДо;
			НоваяСтрока.Партия = НайденныеСтроки[0].Партия;
			НоваяСтрока.ИсходныйНомерСтроки = НайденныеСтроки[0].ИсходныйНомерСтрокиТовара;
			НоваяСтрока.Товар = ТипЗнч(ТекущаяСтрока.Номенклатура) <> Тип("СправочникСсылка.Автоработы");
			НоваяСтрока.СтавкаНДСДоИзменения = НайденныеСтроки[0].СтавкаНДС;
			НоваяСтрока.ГТДПослеИзменения = ТекущаяСтрока.ГТД;
			НоваяСтрока.ГТД = НайденныеСтроки[0].ГТД;

		КонецЕсли;
		
		ДанныеДоИзменения.Удалить(НайденныеСтроки[0]);
		УдалитьПосле.Добавить(ТекущаяСтрока);
		
	КонецЦикла;
	
	ДанныеПослеИзменения = УдалитьИзТаблицы(ДанныеПослеИзменения, УдалитьПосле);
			
	Для Каждого ТекущаяСтрока Из ДанныеПослеИзменения Цикл
		
		НоваяСтрока = Изменения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока,, "ГТД");
		НоваяСтрока.КоличествоПоДокументуРеализации = 0;
		НоваяСтрока.КоличествоРазница = НоваяСтрока.Количество;
		НоваяСтрока.ЕдиницаИзмеренияПоДокументуРеализации = НоваяСтрока.ЕдиницаИзмерения;
		НоваяСтрока.КоэффициентПоДокументуРеализации = НоваяСтрока.Коэффициент;
		НоваяСтрока.СуммаНДСПоДокументуРеализации = 0;
		НоваяСтрока.СуммаНДСРазница = НоваяСтрока.СуммаНДС;
		НоваяСтрока.СуммаВсегоПоДокументуРеализации = 0;
		НоваяСтрока.СуммаВсегоРазница = НоваяСтрока.СуммаВсего;
		НоваяСтрока.КоличествоДо = 0;
		НоваяСтрока.ИсходныйНомерСтроки = 0;
		НоваяСтрока.Товар = ТипЗнч(ТекущаяСтрока.Номенклатура) <> Тип("СправочникСсылка.Автоработы");
		НоваяСтрока.СтавкаНДСДоИзменения = ТекущаяСтрока.СтавкаНДС;
		НоваяСтрока.ГТДПослеИзменения = ТекущаяСтрока.ГТД;

	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из ДанныеДоИзменения Цикл
		
		НоваяСтрока = Изменения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока, , "Количество,Цена,Сумма,СуммаВсего,СуммаНДС");
		НоваяСтрока.КоличествоПоДокументуРеализации = ТекущаяСтрока.Количество;
		НоваяСтрока.КоличествоРазница = - НоваяСтрока.КоличествоПоДокументуРеализации; 
		НоваяСтрока.ЕдиницаИзмеренияПоДокументуРеализации = ТекущаяСтрока.ЕдиницаИзмерения;
		НоваяСтрока.КоэффициентПоДокументуРеализации = ТекущаяСтрока.Коэффициент;
		НоваяСтрока.СуммаНДСПоДокументуРеализации = ТекущаяСтрока.СуммаНДС;
		НоваяСтрока.СуммаНДСРазница = - ТекущаяСтрока.СуммаНДС;
		НоваяСтрока.СуммаВсегоПоДокументуРеализации = ТекущаяСтрока.СуммаВсего;
		НоваяСтрока.СуммаВсегоРазница = - ТекущаяСтрока.СуммаВсего;
		НоваяСтрока.КоличествоПосле = 0;
		НоваяСтрока.ИсходныйНомерСтроки = ТекущаяСтрока.ИсходныйНомерСтрокиТовара;
		НоваяСтрока.Товар = ТипЗнч(ТекущаяСтрока.Номенклатура) <> Тип("СправочникСсылка.Автоработы");
		НоваяСтрока.СтавкаНДСДоИзменения = ТекущаяСтрока.СтавкаНДС;
		НоваяСтрока.НомерСтроки = 10000000;
		
	КонецЦикла;
	
	Изменения.Сортировать("ИсходныйНомерСтроки");
	
	НомерСтроки = 1;
	
	Для Каждого Строка Из Изменения Цикл
		
		Строка.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Возврат Изменения;
	
КонецФункции

Функция ТоварыИзСчетаФактуры(Документ)
	
	ДанныеДокумента = Новый Структура("Товары,ТоварыСГТД");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СчетФактураВыданный.Ссылка КАК СчетФактура
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.ДокументОснование = &Документ
		|	И СчетФактураВыданный.ПометкаУдаления = ЛОЖЬ"
	);	 
	Запрос.УстановитьПараметр("Документ", Документ);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		СчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
		СчетФактура.ДополнительныеСвойства.Вставить("ПропуститьПроверкуОснованияСчетаФактуры", Истина);
		СчетФактура.Заполнить(Документ);
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		СчетФактура = РезультатЗапроса.Выгрузить()[0].СчетФактура;
		СчетФактура.ПолучитьОбъект();
		
	КонецЕсли;
	
	ТоварыСГТД = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Документ).ДвиженияПоГТД(Документ);
	ТоварыСГТД.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ГТД, Партия", "Количество");

	Возврат Новый Структура(
		"Товары,ТоварыСГТД",
		СчетФактура.Товары.Выгрузить(),
		ТоварыСГТД
	);
	
КонецФункции

Функция ДополнитьДаннымиОГТД(Знач Товары, ТоварыСГТД, ИмяДополнения)
	
	Товары.Колонки.Добавить(ИмяДополнения);
	
	Для Каждого Строка Из Товары Цикл
		
		УсловиеПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ГТД,Партия");
		ЗаполнитьЗначенияСвойств(УсловиеПоиска, Строка);
		
		НайденныеСтроки = ТоварыСГТД.НайтиСтроки(УсловиеПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Строка[ИмяДополнения] = НайденныеСтроки[0].Количество;
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат Товары;
	
КонецФункции

Функция НоваяТаблицаИзменений()
	
	ДоступныеТипыНоменклатуры = Новый Массив;
	ДоступныеТипыНоменклатуры.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ДоступныеТипыНоменклатуры.Добавить(Тип("СправочникСсылка.Автомобили"));
	ДоступныеТипыНоменклатуры.Добавить(Тип("СправочникСсылка.Автоработы"));
	ОписаниеТипаНоменклатура = Новый ОписаниеТипов(ДоступныеТипыНоменклатуры);
	
	ТаблицаИзменений = Новый ТаблицаЗначений();
	ТаблицаИзменений.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(15, 0));
	ТаблицаИзменений.Колонки.Добавить("ИсходныйНомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(15, 0));
	ТаблицаИзменений.Колонки.Добавить("Номенклатура", ОписаниеТипаНоменклатура);
	ТаблицаИзменений.Колонки.Добавить("Содержание", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ТаблицаИзменений.Колонки.Добавить(
		"ХарактеристикаНоменклатуры",
		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры")
	);
	ТаблицаИзменений.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаИзменений.Колонки.Добавить("КоличествоПоДокументуРеализации", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаИзменений.Колонки.Добавить("КоличествоРазница", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаИзменений.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаИзменений.Колонки.Добавить("ЕдиницаИзмеренияПоДокументуРеализации", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаИзменений.Колонки.Добавить("Коэффициент", ОбщегоНазначения.ОписаниеТипаЧисло(15, 4));
	ТаблицаИзменений.Колонки.Добавить("КоэффициентПоДокументуРеализации", ОбщегоНазначения.ОписаниеТипаЧисло(15, 4));
	ТаблицаИзменений.Колонки.Добавить("Цена", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаИзменений.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаИзменений.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	ТаблицаИзменений.Колонки.Добавить("СтавкаНДСДоИзменения", Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	ТаблицаИзменений.Колонки.Добавить("СуммаНДС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаИзменений.Колонки.Добавить("СуммаНДСПоДокументуРеализации", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаИзменений.Колонки.Добавить("СуммаНДСРазница", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаИзменений.Колонки.Добавить("СуммаВсего", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаИзменений.Колонки.Добавить("СуммаВсегоПоДокументуРеализации", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаИзменений.Колонки.Добавить("СуммаВсегоРазница", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаИзменений.Колонки.Добавить("ГТД", Новый ОписаниеТипов("СправочникСсылка.ГТД"));
	ТаблицаИзменений.Колонки.Добавить("ГТДПослеИзменения", Новый ОписаниеТипов("СправочникСсылка.ГТД"));
	ТаблицаИзменений.Колонки.Добавить("КоличествоДо", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаИзменений.Колонки.Добавить("КоличествоПосле", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаИзменений.Колонки.Добавить("Партия");
	ТаблицаИзменений.Колонки.Добавить("Товар", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаИзменений;
	
КонецФункции

Функция ЕстьРазличияВСтроках(Первая, Вторая, БезПартии)
	
	ЕстьРазличия = Первая.Количество <> Вторая.Количество
		Или Первая.СуммаВсего <> Вторая.СуммаВсего
		Или Первая.ЕдиницаИзмерения <> Вторая.ЕдиницаИзмерения
		Или Первая.Коэффициент <> Вторая.Коэффициент
		Или Первая.СтавкаНДС <> Вторая.СтавкаНДС
		Или Первая.СуммаНДС <> Вторая.СуммаНДС;
	
	Если БезПартии Тогда
		
		ЕстьРазличия = ЕстьРазличия
			Или Первая.ГТД <> Вторая.ГТД
			Или Первая.Номенклатура <> Вторая.Номенклатура
			Или Первая.ХарактеристикаНоменклатуры <> Вторая.ХарактеристикаНоменклатуры;
		
	КонецЕсли;
	
	Возврат ЕстьРазличия;
	
КонецФункции

Функция УдалитьИзТаблицы(Знач Таблица, Массив)
	
	Для Каждого Элемент Из Массив Цикл
		
		Таблица.Удалить(Элемент);
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

// Движения документа выполненные по регистру ГТД
//
Функция ДвиженияПоГТД(Корректировка) Экспорт
	
	Основания = Документы.КорректировкаРеализации.ОснованияЦепочкиКорректировкиРеализации(Корректировка);
	Основания.Добавить(Корректировка);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ГТДПартийТоваровКомпании.Номенклатура,
		|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры,
		|	ГТДПартийТоваровКомпании.ГТД,
		|	ГТДПартийТоваровКомпании.Партия,
		|	СУММА(ГТДПартийТоваровКомпании.Количество) КАК Количество
		|ИЗ
		|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
		|ГДЕ
		|	ГТДПартийТоваровКомпании.Регистратор В (&СписокОснований)
		|
		|СГРУППИРОВАТЬ ПО
		|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры,
		|	ГТДПартийТоваровКомпании.ГТД,
		|	ГТДПартийТоваровКомпании.Номенклатура,
		|	ГТДПартийТоваровКомпании.Партия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыВПроизводстве.Номенклатура,
		|	ТоварыВПроизводстве.ХарактеристикаНоменклатуры,
		|	ТоварыВПроизводстве.ГТД,
		|	ТоварыВПроизводстве.Партия,
		|	СУММА(ТоварыВПроизводстве.Количество) КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
		|ГДЕ
		|	ТоварыВПроизводстве.Регистратор В (&СписокОснований)
		|	И ТоварыВПроизводстве.ГТД <> ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыВПроизводстве.ХарактеристикаНоменклатуры,
		|	ТоварыВПроизводстве.Номенклатура,
		|	ТоварыВПроизводстве.Партия,
		|	ТоварыВПроизводстве.ГТД"
	);
	Запрос.УстановитьПараметр("СписокОснований", Основания);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Перезаполнение цен у табличной части
// %
// Параметры:
// Объект - Данные формы структура или документ объект.
// ПараметрыДействия - Вспомогательная параметры обработки табличной части.
Процедура ПерезаполнитьЦеныТабличнойЧастиРабот(Объект, ПараметрыДействия = Неопределено)
	
	Если ПараметрыДействия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяУстановкаЦен = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяУстановкаЦен", Ложь);
	ТребуетсяПересчетЦен  = ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ТребуетсяПересчетЦен",  Ложь);
	
	
	Если ТребуетсяУстановкаЦен Тогда
		
		Для Каждого СтрокаАвтоработы Из Объект.Автоработы Цикл
			УстановитьЦеныРабот(Объект, СтрокаАвтоработы);
			АвтоработыЦенаПриИзменении(Объект, СтрокаАвтоработы);
		КонецЦикла;
		
	ИначеЕсли ТребуетсяПересчетЦен Тогда
		
		СтарыйКурс = ПараметрыДействия.СтарыйКурс;
		НовыйКурс  = Объект.КурсДокумента;
		
		Если (СтарыйКурс * НовыйКурс) = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'При пересчете валюты обнаружен нулевой курс валюты.'")
			);
			Возврат;
		КонецЕсли;
		
		Если СтарыйКурс = НовыйКурс Тогда
			Возврат;
		КонецЕсли;
		
		КоэффициентСоотношенияКурсов = СтарыйКурс / НовыйКурс;
		Для Каждого СтрокаАвтоработы Из Объект.Автоработы Цикл
			СтрокаАвтоработы.Цена = Окр(СтрокаАвтоработы.Цена * КоэффициентСоотношенияКурсов, 2);
			АвтоработыЦенаПриИзменении(Объект, СтрокаАвтоработы);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция КорректировкиДляЗаполнения(Исключения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("Выборка, Пустой");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Исключения", Исключения);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2000
	|	СчетФактураВыданный.ДокументОснование КАК Ссылка,
	|	СчетФактураВыданный.НомерИсправления КАК НомерИсправления
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументОснование ССЫЛКА Документ.КорректировкаРеализации
	|	И НЕ ВЫРАЗИТЬ(СчетФактураВыданный.ДокументОснование КАК Документ.КорректировкаРеализации) В (&Исключения)
	|	И ВЫРАЗИТЬ(СчетФактураВыданный.ДокументОснование КАК Документ.КорректировкаРеализации).ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах)
	|	И ВЫРАЗИТЬ(СчетФактураВыданный.ДокументОснование КАК Документ.КорректировкаРеализации).НомерИсправления = 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Результат.Пустой = Истина;
	Иначе
		Результат.Пустой = Ложь;
		Результат.Выборка = РезультатЗапроса.Выбрать();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"ВалютаДоговора",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорВзаиморасчетов, "ВалютаВзаиморасчетов"));
	ДополнительныеПараметры.ДляПроведения.Вставить("Сделка", Объект.Сделка);
	ДополнительныеПараметры.ДляПроведения.Вставить("ХозОперацияСделки",
		?(ЗначениеЗаполнено(Объект.Сделка),
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сделка, "ХозОперация"),
			Справочники.ХозОперации.ПустаяСсылка()));
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаДоговора", ДополнительныеПараметры.ДляПроведения.ВалютаДоговора);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	КорректировкаРеализации.Организация КАК Организация,
	|	КорректировкаРеализации.Ссылка КАК Ссылка,
	|	КорректировкаРеализации.Дата КАК Дата,
	|	КорректировкаРеализации.ХозОперация КАК ХозОперация,
	|	КорректировкаРеализации.ДокументОснование КАК ДокументОснование,
	|	КорректировкаРеализации.Контрагент КАК Контрагент,
	|	КорректировкаРеализации.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	КорректировкаРеализации.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	КорректировкаРеализации.Сделка КАК Сделка,
	|	КорректировкаРеализации.СуммаДокумента КАК Сумма,
	|	КорректировкаРеализации.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	КорректировкаРеализации.ВалютаДокумента КАК ВалютаДокумента,
	|	КорректировкаРеализации.КурсДокумента КАК КурсДокумента,
	|	КорректировкаРеализации.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.НеЗачитывать) КАК СпособЗачетаАвансов,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(КорректировкаРеализацииТовары.СуммаВсегоРазница), 0) КАК СуммаКорректировки,
	|	КорректировкаРеализацииТовары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СуммаРазницыКорректировки
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаРеализацииТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(КорректировкаРеализацииАвтоработы.СуммаВсегоРазница), 0),
	|	КорректировкаРеализацииАвтоработы.Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации.Автоработы КАК КорректировкаРеализацииАвтоработы
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаРеализацииАвтоработы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(СуммаРазницыКорректировки.СуммаКорректировки) КАК СуммаКорректировки,
	|	СуммаРазницыКорректировки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СуммаРазницыКорректировкиИтог
	|ИЗ
	|	СуммаРазницыКорректировки КАК СуммаРазницыКорректировки
	|ГДЕ
	|	СуммаРазницыКорректировки.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СуммаРазницыКорректировки.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр, &ВалютаДоговора)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ХозОперация КАК ХозОперация,
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДоговора КАК ВалютаДоговора,
	|	ДанныеДокумента.Сделка КАК Сделка,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыВзаиморасчетов = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютВзаиморасчетов.Курс, 0) / ЕСТЬNULL(КурсыВалютВзаиморасчетов.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыВзаиморасчетов
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл,
	|	ЕСТЬNULL(СуммаРазницыКорректировкиИтог.СуммаКорректировки, 0) КАК СуммаКорректировки
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютВзаиморасчетов
	|		ПО ДанныеДокумента.ВалютаДоговора = КурсыВалютВзаиморасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммаРазницыКорректировкиИтог КАК СуммаРазницыКорректировкиИтог
	|		ПО ДанныеДокумента.Ссылка = СуммаРазницыКорректировкиИтог.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	
	Если ДвиженияДокумента.ДляПроведения.ХозОперацияСделки = Справочники.ХозОперации.РеализацияТоваровКомиссия Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.ДокументОснование КАК ДокументОснование,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Задолженность.ВалютаДоговора КАК ВалютаДоговора,
	|	Задолженность.Сделка КАК Сделка,
	|	ВЫБОР
	|		КОГДА Задолженность.СуммаКорректировки < 0
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * Задолженность.СуммаКорректировки КАК Сумма,
	|	Задолженность.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр,
	|	Задолженность.СуммаКорректировки > 0 КАК УвеличениеДолга
	|ИЗ
	|	Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)";
	
	ДанныеОбОплате = Запрос.Выполнить().Выбрать();
	
	Если Не ДанныеОбОплате.Следующий()
		Или ДанныеОбОплате.Сумма = 0 Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	Если ДанныеОбОплате.УвеличениеДолга Тогда
		
		Сумма = ДанныеОбОплате.Сумма;
		
		РасчетыСКонтрагентамиСервер.ДобавитьЗаписьРасчетаКонтрагентов(
			ДанныеОбОплате,
			РасчетыСКонтрагентами,
			Сумма,
			ВидДвиженияНакопления.Приход,
			Перечисления.ВидыОперацийВзаиморасчетов.НачислениеДебиторскойЗадолженности,
			ДанныеОбОплате.Сделка,,
			Истина);
		
	Иначе
		
		РасчетыСКонтрагентамиСервер.ЗачестьОплатуПоСделке(
			РасчетыСКонтрагентами,
			ДанныеОбОплате,,
			Истина);
		
	КонецЕсли;
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли