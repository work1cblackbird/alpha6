#Область ОписаниеПеременных

Перем ТекущаяВерсияОбъекта;

#КонецОбласти
// Модуль документа "Корректировка реализации"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)

	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(ВерсияОбъекта) Тогда
		ВерсияОбъекта = ТекущаяВерсияОбъекта;
	КонецЕсли;
	
	Если Не ВозможенВВодНаОсновании(ДанныеЗаполнения) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Сделка = Документы.КорректировкаРеализации.ПолучитьСделку(ДанныеЗаполнения);
	Товары.Очистить();
	Автоработы.Очистить();
	
	ПродолжатьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"ВхДокНомер,ВхДокДатаВрем"
	);
	
	Если Не ПродолжатьВыполнение Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если
		ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах")
		И НЕ ЗначениеЗаполнено(НомерИсправления)
	Тогда
		НомерИсправления = 1;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Автоработы Цикл
		
		Количество = СтрокаТЧ.Количество;
		СтрокаТЧ.Цена = ?(Количество * СтрокаТЧ.Коэффициент = 0, 0, СтрокаТЧ.Сумма / (Количество * СтрокаТЧ.Коэффициент));
		Документы.КорректировкаРеализации.АвтоработыРасчетРазницы(ЭтотОбъект, СтрокаТЧ);
		
	КонецЦикла;
	
	ЗаполненНаОснованииДокумента = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства,
		"ВыполненоЗаполнениеНаОсновании", "");
	ОснованиеКорректировка = (ЗаполненНаОснованииДокумента = "КорректировкаРеализации");
	
	Если НЕ ОснованиеКорректировка Тогда 
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
			// Получим коды маркировки для ЗН
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	МаркировкаТоваровВПроизводстве.Номенклатура КАК Номенклатура,
			               |	МаркировкаТоваровВПроизводстве.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			               |	МаркировкаТоваровВПроизводстве.КодМаркировки КАК КодМаркировки,
			               |	МаркировкаТоваровВПроизводстве.Количество КАК Количество
			               |ИЗ
			               |	РегистрНакопления.МаркировкаТоваровВПроизводстве КАК МаркировкаТоваровВПроизводстве
			               |ГДЕ
			               |	МаркировкаТоваровВПроизводстве.Регистратор = &Основание";
			Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
			ТаблицаКодовМаркировок = Запрос.Выполнить().Выгрузить();
		Иначе
			ТаблицаКодовМаркировок = Новый ТаблицаЗначений;
			ТаблицаКодовМаркировок.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			ТаблицаКодовМаркировок.Колонки.Добавить("ХарактеристикаНоменклатуры",
				Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры")
			);
			ТаблицаКодовМаркировок.Колонки.Добавить("КодМаркировки",
				Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200))
			);
			ТаблицаКодовМаркировок.Колонки.Добавить("ЕдиницаИзмерения",
				Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения")
			);
			ТаблицаКодовМаркировок.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
			
			Для Каждого ТекущаяСтрока Из Товары Цикл
				ПараметрыОтбора = Новый Структура("ИдентификаторТовара", ТекущаяСтрока.ИдентификаторТовара);
				НайденныеСтроки = КодыМаркировки.НайтиСтроки(ПараметрыОтбора);
				Для Каждого ТекущаяСтрокаМаркировки Из НайденныеСтроки Цикл
					НоваяСтрока = ТаблицаКодовМаркировок.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
					НоваяСтрока.КодМаркировки = ТекущаяСтрокаМаркировки.КодМаркировки;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
		ДоступнаПечатьУПД = ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах;
		ДоступнаПечатьУКД = ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон;
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из Товары Цикл
		
		СтрокаТЧ.Цена 									= ?(СтрокаТЧ.Количество <> 0, СтрокаТЧ.Сумма/СтрокаТЧ.Количество, 0);
		СтрокаТЧ.ПоДокументуРеализации					= Истина;
		СтрокаТЧ.Подтверждение							= Истина;
		СтрокаТЧ.КоличествоПоДокументуРеализации		= СтрокаТЧ.Количество;
		СтрокаТЧ.ЕдиницаИзмеренияПоДокументуРеализации	= СтрокаТЧ.ЕдиницаИзмерения;
		СтрокаТЧ.КоэффициентПоДокументуРеализации		= СтрокаТЧ.Коэффициент;
		СтрокаТЧ.СтавкаНДСПоДокументуРеализации			= СтрокаТЧ.СтавкаНДС;
		СтрокаТЧ.СуммаНДСПоДокументуРеализации			= СтрокаТЧ.СуммаНДС;
		СтрокаТЧ.СуммаВсегоПоДокументуРеализации		= СтрокаТЧ.СуммаВсего;
		СтрокаТЧ.СодержаниеДоКорректировки				= СтрокаТЧ.Содержание;
		Если НЕ ОснованиеКорректировка ИЛИ ПустаяСтрока(СтрокаТЧ.ИдентификаторТовара) Тогда
			СтрокаТЧ.ИдентификаторТовара = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияТоваров") 
			ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			СтрокаТЧ.ПартияПоДокументуРеализации			= СтрокаТЧ.Партия;
			СтрокаТЧ.ГТДПоДокументуРеализации				= СтрокаТЧ.ГТД;
			СтрокаТЧ.ПартияДоКорректировки					= СтрокаТЧ.Партия;
			СтрокаТЧ.ГТДДоКорректировки						= СтрокаТЧ.ГТД;
		КонецЕсли;
		
		Документы.КорректировкаРеализации.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект, СтрокаТЧ);
		Документы.КорректировкаРеализации.ТоварыРасчетРазницы(ЭтотОбъект, СтрокаТЧ);
		
	КонецЦикла;
	
	// Заполним коды маркировки
	Если НЕ ОснованиеКорректировка Тогда
		
		КодыМаркировки.Очистить();
		
		СтруктураПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
		
		Если НЕ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
			СтруктураПоиска.Вставить("ЕдиницаИзмерения");
			СтруктураПоиска.Вставить("СтавкаНДС");
		КонецЕсли;
		
		Для Каждого ТекущаяСтрока Из Товары Цикл
			
			// Найдем коды маркировки для строки
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущаяСтрока);
			НайденныеСтроки = ТаблицаКодовМаркировок.НайтиСтроки(СтруктураПоиска);
			МассивУдалить = Новый Массив;
			КоличествоМарок = 0;
			КоличествоТовара = ТекущаяСтрока.Количество * ТекущаяСтрока.Коэффициент;
			
			// Заполним по текущей строки
			Для Каждого ТекущаяМаркировка Из НайденныеСтроки Цикл
				КоличествоМарок = КоличествоМарок + 1;
				НоваяСтрока = КодыМаркировки.Добавить();
				НоваяСтрока.ИдентификаторТовара = ТекущаяСтрока.ИдентификаторТовара;
				НоваяСтрока.КодМаркировки = ТекущаяМаркировка.КодМаркировки;
				МассивУдалить.Добавить(ТекущаяМаркировка);
				Если КоличествоТовара = КоличествоМарок Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			// Уберем из рассмотрения ранее указанные марки
			Для Каждого ТекущаяМаркировка Из МассивУдалить Цикл
				ТаблицаКодовМаркировок.Удалить(ТекущаяМаркировка);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПустыеСтроки = Товары.НайтиСтроки(Новый Структура("Количество", 0));
	
	Для каждого ПустаяСтрока Из ПустыеСтроки Цикл
		Товары.Удалить(ПустаяСтрока);
	КонецЦикла;
	
	ПустыеСтроки = Автоработы.НайтиСтроки(Новый Структура("Количество", 0));
	
	Для каждого ПустаяСтрока Из ПустыеСтроки Цикл
		Автоработы.Удалить(ПустаяСтрока);
	КонецЦикла;
	
	ИдентификаторГосударственногоКонтракта = ?(ЗначениеЗаполнено(ИдентификаторГосударственногоКонтракта),
		ИдентификаторГосударственногоКонтракта,
		ДоговорВзаиморасчетов.ИдентификаторГосударственногоКонтракта);
	
КонецПроцедуры

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)

	ВерсияОбъекта = ТекущаяВерсияОбъекта;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	КодыМаркировки.Очистить();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ПравоПользователя("ПроведениеНезаполненныхДокументов", ЭтотОбъект) Тогда
		Если ТипЗнч(ЭтотОбъект.Сделка) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
			Если НЕ ЗначениеЗаполнено(Товары) И НЕ ЗначениеЗаполнено(Автоработы) Тогда
				ПроверяемыеРеквизиты.Добавить("Товары");
				ПроверяемыеРеквизиты.Добавить("Автоработы");
			КонецЕсли;
		Иначе
			ПроверяемыеРеквизиты.Добавить("Товары");
		КонецЕсли;
	КонецЕсли;
	
	// Проверим заполнение РНПТ у прослеживаемого товара
	УчетПрослеживаемыхТоваровСервер.ПроверитьЗаполнениеРНПТПрослеживаемогоТовара(ЭтотОбъект);
	
	Отказ = Отказ
		Или ПроверитьПараметрыЗапретаВыбораНоменклатуры()
		Или ХозОперацияУказанаНеВерно();
	Отказ = Отказ Или Справочники
		.ДоговорыВзаиморасчетов
		.НеКорректноЗаполненИдентификаторГосКонтракта(ЭтотОбъект, ИдентификаторГосударственногоКонтракта);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если Не ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Если НЕ Документы.КорректировкаРеализации.НеобходимоИспользоватьСклад(ЭтотОбъект) Тогда
		СкладКомпании = Справочники.СкладыКомпании.ПустаяСсылка();
	КонецЕсли;
	
	ОчиститьРаботыЕслиОснованиеНеЗаказНаряд();
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	ПроверитьПравильностьЦепочкиДокументов(Отказ);
	МаркировкаТоваровСервер.ПроверкаКодовМаркировкиПередЗаписью(ЭтотОбъект);
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	СуммаДокумента        = Товары.Итог("СуммаВсего") + Автоработы.Итог("СуммаВсего");
	СуммаДокументаРазница = Товары.Итог("СуммаВсегоРазница") + Автоработы.Итог("СуммаВсегоРазница");
	
	ЭтоУниверсальныйДокумент = ЭтоУниверсальныйДокумент
		И Документы.КорректировкаРеализации.ВозможенВводСчетФактурыВыданной(ЭтотОбъект);
		
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоЗаказамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПартиямПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Удалим введенные в оборот коды маркировки
	НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
	НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейСостоянияКодовМаркировки.ОтменаПроведения();
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ТипСчетФактуры", "СчетФактураВыданный");
	ОбработкаСобытийДокументаСервер.УдалитьПодчиненныеСФ(ЭтотОбъект, ПараметрыДействия, Отказ);
	
КонецПроцедуры

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ВозможенВВодНаОсновании(Сделка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ВедетсяБалансПоПодразделению = БалансВедетсяПоПодразделениям(Дата);
	
	СуммаРазногласий = Товары.Итог("СуммаВсегоРазница") + Автоработы.Итог("СуммаВсегоРазница");
	
	Документы.КорректировкаРеализации.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	СпособУчетаВзаиморасчетовПоРасчетнымДокументам =
		РасчетыСКонтрагентамиСервер.ИспользуютсяВзаиморасчетыПоРасчетнымДокументам(ДоговорВзаиморасчетов);
	
		Если Сделка.ХозОперация <> Справочники.ХозОперации.РеализацияТоваровКомиссия
			И Не СпособУчетаВзаиморасчетовПоРасчетнымДокументам Тогда
		Если СуммаРазногласий <> 0 Тогда
			НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыКомпании;
			НаборЗаписейВзаиморасчеты.ДокументОбъект = ЭтотОбъект;
			НаборЗаписейВзаиморасчеты.РежимПроведения = РежимПроведения;
			НаборЗаписейВзаиморасчеты.Контрагент = Контрагент;
			НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
			НаборЗаписейВзаиморасчеты.Сделка = Сделка;
			НаборЗаписейВзаиморасчеты.АвтоЗакрытиеСделок = Ложь;
			НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц = 0;
			НаборЗаписейВзаиморасчеты.СписатьНераспределеннуюСуммуПоСделке = Истина;
			Если СуммаРазногласий > 0 Тогда                                  
				НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем = Ложь;
				НаборЗаписейВзаиморасчеты.Сумма = СуммаРазногласий;
				Отказ = НЕ НаборЗаписейВзаиморасчеты.Приход() ИЛИ Отказ;
			Иначе
				НаборЗаписейВзаиморасчеты.ВзаиморасчетыСПокупателем = Истина;
				НаборЗаписейВзаиморасчеты.Сумма = -СуммаРазногласий;
				Отказ = НЕ НаборЗаписейВзаиморасчеты.Расход() ИЛИ Отказ;
			КонецЕсли;
			// Доходы и расходы по суммовым разницам
			СуммаДоходаРасходаСуммовыхРазниц = НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц;
			Если СуммаДоходаРасходаСуммовыхРазниц <> 0 Тогда
				НаборЗаписейДиР = Движения.ДоходыИРасходы;
				НаборЗаписейДиР.ДокументОбъект = ЭтотОбъект;
				// В случае если ведется баланс по подразделению передадим подразделение соответствующее корреспонденции.
				Если ВедетсяБалансПоПодразделению Тогда
					НаборЗаписейДиР.Подразделение = ДоговорВзаиморасчетов.ПодразделениеКомпании;
				КонецЕсли;
				НаборЗаписейДиР.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
				НаборЗаписейДиР.ВУпрВалюте = Истина;
				Если СуммаДоходаРасходаСуммовыхРазниц < 0 Тогда
					НаборЗаписейДиР.Расход = -СуммаДоходаРасходаСуммовыхРазниц;
				Иначе
					НаборЗаписейДиР.Доход = СуммаДоходаРасходаСуммовыхРазниц;
				КонецЕсли;
				Отказ = НЕ НаборЗаписейДиР.Приход() ИЛИ Отказ;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	Документы.КорректировкаРеализации.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	// Закрываем заказы покупателя по FIFO
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ДокументТовары.КоличествоРазница*ДокументТовары.Коэффициент КАК Количество,
	|	ДокументТовары.Цена КАК ЦенаРозничная,
	|	0 КАК Резерв,
	|	ДокументТовары.СуммаВсегоРазница КАК Сумма
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка=&Ссылка
	|	И ДокументТовары.Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	|	И ДокументТовары.КоличествоРазница > 0
	|";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	// Закрываем заказы
	НаборЗаписейЗаказыПокупателей = Движения.ЗаказыПокупателей;
	НаборЗаписейЗаказыПокупателей.РежимПроведения = РежимПроведения;
	НаборЗаписейЗаказыПокупателей.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейЗаказыПокупателей.РезультатЗапросаПоТоварам = Запрос.Выполнить();
	НаборЗаписейЗаказыПокупателей.Контрагент = Контрагент;
	НаборЗаписейЗаказыПокупателей.Заказ = Неопределено;
	НаборЗаписейЗаказыПокупателей.СкладКомпании = СкладКомпании;
	НаборЗаписейЗаказыПокупателей.Заказывать = Истина;
	НаборЗаписейЗаказыПокупателей.Резервировать = Истина;
	НаборЗаписейЗаказыПокупателей.ПоБазовомуКоличеству = Ложь;
	Отказ = НЕ НаборЗаписейЗаказыПокупателей.ЗакрытиеЗаказовПокупателя() ИЛИ Отказ;
	// Если было списание резервов то таблица товаров содержит списанные резервы.
	РезультатЗапросаПоТоварам = НаборЗаписейЗаказыПокупателей.РезультатЗапросаПоТоварам;

	// Снимаем распределение заказов покупателя
	РезультатЗакрытияЗаказов = НаборЗаписейЗаказыПокупателей.Выгрузить();
	КолонкаКоличества = РезультатЗакрытияЗаказов.Колонки.Найти("Заказано");
	КолонкаКоличества.Имя = "Количество";
	КолонкаКоличества.Заголовок = "Количество";
	РезультатЗакрытияЗаказов.Свернуть("Заказ,Контрагент,Номенклатура,ХарактеристикаНоменклатуры", "Количество,Резерв");
	Для каждого СтрокаЗаказа Из РезультатЗакрытияЗаказов Цикл
		СтрокаЗаказа.Количество = -(СтрокаЗаказа.Количество - СтрокаЗаказа.Резерв);
	КонецЦикла; 
	НаборЗаписейРаспределениеЗаказов = Движения.ЗаказыРаспределение;
	НаборЗаписейРаспределениеЗаказов.РежимПроведения = РежимПроведения;
	НаборЗаписейРаспределениеЗаказов.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейРаспределениеЗаказов.РезультатЗапросаПоТоварам = РезультатЗакрытияЗаказов;
	НаборЗаписейРаспределениеЗаказов.ЗаказПокупателя = "Заказ";
	НаборЗаписейРаспределениеЗаказов.ЗаказПоставщика = Неопределено;
	НаборЗаписейРаспределениеЗаказов.Контрагент = Контрагент;
	НаборЗаписейРаспределениеЗаказов.ПоБазовомуКоличеству = Ложь;
	Отказ = НЕ НаборЗаписейРаспределениеЗаказов.КорректировкаРаспределения() ИЛИ Отказ;
	
	// Проведем партии товаров
	Если НЕ ПровестиПоПартиям(РежимПроведения, Ссылка, СуммаРазногласий) Тогда
		Отказ = Истина;
		Возврат; // Дальше смысла не имеет
	КонецЕсли; 
	
	// Проведем остатки товаров (возврат)
	НаборЗаписейОстатки = Движения.ОстаткиТоваровКомпании;
	НаборЗаписейОстатки.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейОстатки.СкладКомпании = Неопределено;
	НаборЗаписейОстатки.РезультатЗапросаПоТоварам = ПолучитьТаблицуТоваровВозврат();
	НаборЗаписейОстатки.ПоБазовомуКоличеству = Ложь;
	НаборЗаписейОстатки.Контрагент = Контрагент;
	НаборЗаписейОстатки.ДвиженияПоРознице = Ложь;
	НаборЗаписейОстатки.РазрешитьПереоценку = Ложь;
	Если НЕ НаборЗаписейОстатки.Приход() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		НаборЗаписейОстатки.Записать();
	КонецЕсли; 
	
	// Проведем остатки товаров (расход)
	НаборЗаписейОстатки = Движения.ОстаткиТоваровКомпании;
	НаборЗаписейОстатки.РежимПроведения = РежимПроведения;
	НаборЗаписейОстатки.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейОстатки.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам;
	НаборЗаписейОстатки.СкладКомпании = СкладКомпании;
	НаборЗаписейОстатки.Приходовать = Истина;
	НаборЗаписейОстатки.Контрагент = Контрагент;
	НаборЗаписейОстатки.ПоБазовомуКоличеству = Ложь;
	НаборЗаписейОстатки.ДвиженияПоРознице = СкладКомпании.Розничный;
	НаборЗаписейОстатки.ИмяРеквизитаЦенаРозничная = "Цена";
	НаборЗаписейОстатки.Резервировать = РезультатЗапросаПоТоварам <> Неопределено;
	Отказ = НЕ НаборЗаписейОстатки.Расход() ИЛИ Отказ;
	Если Отказ Тогда
		Возврат; // Дальше смысла не имеет
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ОбработкаПроведенияНакопленияПоКарточкамКонтрагентов();
	КонецЕсли;
	
	// Запишим коды маркировки
	Если НЕ Отказ Тогда
		ПровестиПоКодамМаркировки(РежимПроведения, Отказ);
	КонецЕсли;
	
	// Проверим наличие прослеживаемых товаров, которые были реализованы
	Если НЕ Отказ Тогда
		Движения.Продажи.Записать();
	КонецЕсли;
	ТаблицаПрослеживаемыхТоваров = Документы.КорректировкаРеализации.ОперацииСПрослеживаемымиТоварами(
		ЭтотОбъект);
	НаборЗаписейОперацииПрослеживаемости = Движения.ОперацииПрослеживаемыхТоваров;
	НаборЗаписейОперацииПрослеживаемости.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейОперацииПрослеживаемости.ТаблицаПрослеживаемыхТоваров = ТаблицаПрослеживаемыхТоваров;
	Если НЕ НаборЗаписейОперацииПрослеживаемости.ДобавитьОперациюПрослеживаемости() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Двигаем границу последовательности взаиморасчетов
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	
	// двигаем границу последовательности заказов
	РаботаСГраницами.СдвинутьГраницуЗаказов(Ссылка, ДополнительныеСвойства, Движения);
	
	ПараметрыДействия = Новый Структура;
	ОбработкаСобытийДокументаСервер.СоздатьОбновитьСФВыданный(ЭтотОбъект, ДополнительныеСвойства, ПараметрыДействия, Отказ);
	
КонецПроцедуры // ОбработкаПроведения

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОчиститьРаботыЕслиОснованиеНеЗаказНаряд()
	
	Если ТипЗнч(Сделка) <> Тип("ДокументСсылка.ЗаказНаряд") Тогда
		
		Если Автоработы.Количество() > 0 Тогда
			
			Автоработы.Очистить();
			
		КонецЕсли;
		 
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыТабличныхЧастей()
	
	Если ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон Тогда
		
		Для Каждого Товар Из Товары Цикл
			
			Товар.КоличествоДоКорректировки = Товар.КоличествоПоДокументуРеализации;
			Товар.СуммаВсегоДоКорректировки = Товар.СуммаВсегоПоДокументуРеализации;
			Товар.СуммаНДСДоКорректировки   = Товар.СуммаНДСПоДокументуРеализации;
			
		КонецЦикла;
		
		Для Каждого Работа Из Автоработы Цикл
			
			Работа.КоличествоДоКорректировки = Работа.КоличествоПоДокументуРеализации;
			Работа.СуммаВсегоДоКорректировки = Работа.СуммаВсегоПоДокументуРеализации;
			Работа.СуммаНДСДоКорректировки   = Работа.СуммаНДСПоДокументуРеализации;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПравильностьЦепочкиДокументов(Отказ)
	
	Если ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах Тогда
		
		// проверим введенные на основании корректировки
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПодчиненныеДокументы.Ссылка КАК Документ
		|ИЗ
		|	КритерийОтбора.ПодчиненныеДокументы(&Основание) КАК ПодчиненныеДокументы
		|ГДЕ
		|	ПодчиненныеДокументы.Ссылка ССЫЛКА Документ.КорректировкаРеализации
		|	И НЕ ПодчиненныеДокументы.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон)
		|	И НЕ ПодчиненныеДокументы.Ссылка = &Ссылка
		|	И ПодчиненныеДокументы.Ссылка.Проведен";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Основание", ДокументОснование);
		Запрос.УстановитьПараметр("Ссылка",    Ссылка);
		ВыполнениеЗапроса = Запрос.Выполнить();
		
		Если Не ВыполнениеЗапроса.Пустой() Тогда
			
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'К документу %1 введено больше одного корректировочного документа с хоз. операцией ""Исправление первичных документов"".
							|Каждую последующую корректировку следует вводить на основании предыдущей.'"),
				 Строка(ДокументОснование)
			);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ХозОперацияУказанаНеВерно()
	
	ЭтоВосстановлениеПоследовательностей = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь);
	
	Если ЭтоВосстановлениеПоследовательностей Тогда
		
		Возврат	Ложь;
		
	КонецЕсли;
	
	КонтролироватьВидИсправительногоДокумента = ПраваИНастройкиПользователя.Значение("КонтролироватьВидИсправительногоДокумента");
	
	Если Не КонтролироватьВидИсправительногоДокумента Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ЕстьИзмененияСуммовыхПоказателей = ЕстьИзмененияСуммовыхПоказателей();
	
	Если
		ЕстьИзмененияСуммовыхПоказателей
		И ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах
	Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'В документе изменены суммовые показатели следует использовать хоз. операцию <Корректировка по согласованию сторон>'")
		);
		Возврат Истина;
		
	ИначеЕсли
		Не ЕстьИзмененияСуммовыхПоказателей
		И ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон
	Тогда 
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'В документе нет изменений суммовых показателей следует использовать хоз. операцию <Исправление в первичных документах>'")
		);
		Возврат Истина;
	
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьИзмененияСуммовыхПоказателей()
	
	Для Каждого Товар Из Товары Цикл
		
		Если
			Товар.КоличествоРазница <> 0
			Или Товар.СуммаВсегоРазница <> 0
			Или Товар.СуммаНДСРазница <> 0
		Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Работа Из Автоработы Цикл
		
		Если
			Работа.КоличествоРазница <> 0
			Или Работа.КоэффициентРазница <> 0
			Или Работа.СуммаНДСРазница <> 0
			Или Работа.СуммаВсегоРазница <> 0
		Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат Ложь;
	
КонецФункции 

// Возвращает выборку по шапке
// ДокументСсылка - Ссылка на документ для которого получаем шапку.
Функция ПолучитьШапкуДокумента(ДокументСсылка)
	Запрос=Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Дата КАК Дата,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.КурсДокумента КАК КурсДокумента,
	|	Док.ТипЦен КАК ТипЦен,
	|	Док.ХозОперация КАК ХозОперация,
	|	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Док.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Док.МоментВремени КАК МоментВремени,
	|	Док.Проект КАК Проект,
	|	Док.Организация КАК Организация,
	|	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	/////////// ПРИВАТ ////////////
	|	Док.Контрагент КАК Контрагент,
	|	Док.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	Док.СкладКомпании КАК СкладКомпании,
	|	Док.СуммаНоменклатурыДокумента КАК СуммаНоменклатурыДокумента,
	|	"+?(ТипЗнч(Сделка)=Тип("ДокументСсылка.ЗаказНаряд"),"Док.СуммаРаботДокумента","0")+" КАК СуммаРаботДокумента,
	|	&СуммаРазногласий КАК СуммаДокумента,
	|	Док.ДокументОснование КАК ДокументОснование,
	|	Док.ДокументОснование.ДокументОснование КАК ДокументОснованиеОснование,
	|	Док.Сделка КАК Сделка
	|
	|ИЗ
	|	Документ."+Метаданные().Имя+" КАК Док
	|ГДЕ
	|	Док.Ссылка=&Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Если ТипЗнч(Сделка)=Тип("ДокументСсылка.ЗаказНаряд") Тогда
		Запрос.УстановитьПараметр("СуммаРазногласий",Товары.Итог("СуммаВсегоРазница")+Автоработы.Итог("СуммаВсегоРазница"));
	Иначе
		Запрос.УстановитьПараметр("СуммаРазногласий",Товары.Итог("СуммаВсегоРазница"));
	КонецЕсли; 
	Запрос.УстановитьПараметр("СуммаРазногласий",Товары.Итог("СуммаВсегоРазница"));
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции

// Получаем таблицу товаров которые надо оприходовать на остатки
//
// Возвращаемое значение:
//  ТаблицаТоваров - таблица значений.
//
Функция ПолучитьТаблицуТоваровВозврат()
	// Нам фактически надо сформировать таблицу товаров которые были проданы, что бы их заново оприходовать.
	// Все из-за автоматического списания характеристик.
	ЗапросСписание=Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка=&Ссылка
	|	И ДокументТовары.Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	|	И ДокументТовары.КоличествоРазница < 0
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиТоваровКомпании.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваровКомпании.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ОстаткиТоваровКомпании.Регистратор КАК ДокументПродажи,
	|	ОстаткиТоваровКомпании.Количество КАК Количество,
	|	ОстаткиТоваровКомпании.СкладКомпании КАК СкладКомпании
	|ИЗ
	|	РегистрНакопления.ОстаткиТоваровКомпании КАК ОстаткиТоваровКомпании
	|ГДЕ
	|	ОстаткиТоваровКомпании.Регистратор В (&ДокументПродажи)
	|	И ОстаткиТоваровКомпании.Номенклатура В (
	|		ВЫБРАТЬ Номенклатура
	|		ИЗ ТаблицаНоменклатуры
	|	)
	|	И ОстаткиТоваровКомпании.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыВПроизводстве.Номенклатура КАК Номенклатура,
	|	ТоварыВПроизводстве.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТоварыВПроизводстве.Регистратор КАК ДокументПродажи,
	|	ТоварыВПроизводстве.Количество КАК Количество,
	|	ТоварыВПроизводстве.СкладИсточник
	|ИЗ
	|	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
	|ГДЕ
	|	ТоварыВПроизводстве.Регистратор В (&ДокументПродажи)
	|	И ТоварыВПроизводстве.Номенклатура В (
	|		ВЫБРАТЬ Номенклатура
	|		ИЗ ТаблицаНоменклатуры
	|	)
	|	И ТоварыВПроизводстве.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|");
	ЗапросСписание.УстановитьПараметр("Ссылка",Ссылка);
	СписокДокументовОснований = Новый СписокЗначений;
	Основание = ДокументОснование;
	Пока ЗначениеЗаполнено(Основание) Цикл
		СписокДокументовОснований.Добавить(Основание);
		Если ЕстьРеквизит(Основание, "ДокументОснование") Тогда
			Основание = Основание.ДокументОснование;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ЗапросСписание.УстановитьПараметр("ДокументПродажи", СписокДокументовОснований);
	ТаблицаСписания = ЗапросСписание.Выполнить().Выгрузить();
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ОстаткиТоваровКомпании");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период",Новый Диапазон(,Дата));
	
	СтруктураПараметровБлокировки.Вставить("ИсточникДанных",Товары);
	ОписаниеИсточника = Новый Соответствие;
	ОписаниеИсточника.Вставить("Номенклатура","Номенклатура");
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(
		СтруктураПараметровБлокировки,
		ЗначенияБлокировки,
		ОписаниеИсточника
	);
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ТоварыВПроизводстве");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период",Новый Диапазон(,Дата)); 
	СтруктураПараметровБлокировки.Вставить("ИсточникДанных",Товары);
	ОписаниеИсточника = Новый Соответствие;
	ОписаниеИсточника.Вставить("Номенклатура","Номенклатура");
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(
		СтруктураПараметровБлокировки,
		ЗначенияБлокировки,
		ОписаниеИсточника
	);
	
	ТаблицаСписания.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,ДокументПродажи,СкладКомпании","Количество");
	// Получим таблицу документа
	ЗапросТоваров=Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ДокументТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	-ДокументТовары.КоличествоРазница*ДокументТовары.Коэффициент КАК Количество,
	|	ДокументТовары.Цена КАК Цена
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка=&Ссылка
	|	И ДокументТовары.Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	|	И ДокументТовары.КоличествоРазница < 0
	|");
	ЗапросТоваров.УстановитьПараметр("Ссылка",Ссылка);
	ТаблицаДокумента=ЗапросТоваров.Выполнить().Выгрузить();
	ТаблицаДокумента.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения","Количество,Цена");
	ТаблицаДокумента.Сортировать("Номенклатура Возр,ХарактеристикаНоменклатуры Убыв");
	
	// Создадим и заполним таблицу товаров
	ТаблицаТоваров=Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("СкладКомпании");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Резерв");
	ТаблицаТоваров.Колонки.Добавить("ЦенаРозничная");
	
	ТаблицаРучныхХарактеристик = ОбработкаТабличнойЧастиТовары.ПолучитьНоменклатуруСРучнымСписаниемХарактеристик(Ссылка);
	
	Для Каждого СтрокаТовар Из ТаблицаДокумента Цикл
		Если СтрокаТовар.Номенклатура.ВидНоменклатуры=Перечисления.ВидыНоменклатуры.Услуга Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураОтбора=Новый Структура("Номенклатура",СтрокаТовар.Номенклатура);
		Если ЗначениеЗаполнено(СтрокаТовар.ХарактеристикаНоменклатуры)
			ИЛИ (ТаблицаРучныхХарактеристик <> Неопределено
				И ТаблицаРучныхХарактеристик.Найти(СтрокаТовар.Номенклатура,"Номенклатура") <>Неопределено)
		Тогда
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры",СтрокаТовар.ХарактеристикаНоменклатуры);
		КонецЕсли;
		МассивНайденныхСтрок = ТаблицаСписания.НайтиСтроки(СтруктураОтбора);
		НадоВернуть    = СтрокаТовар.Количество;
		Для Сч = 0 По МассивНайденныхСтрок.ВГраница() Цикл
			
			ТекСтрока = МассивНайденныхСтрок[Сч];
			КоличествоКПоступлению = Мин(НадоВернуть, ТекСтрока.Количество);
			
			НоваяСтрока=ТаблицаТоваров.Добавить();
			НоваяСтрока.Номенклатура               = ТекСтрока.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрока.ХарактеристикаНоменклатуры;
			НоваяСтрока.СкладКомпании              = ?(ЗначениеЗаполнено(ТекСтрока.СкладКомпании), ТекСтрока.СкладКомпании, СкладКомпании);
			НоваяСтрока.Количество                 = КоличествоКПоступлению;
			НоваяСтрока.Резерв                     = 0;
			НоваяСтрока.ЦенаРозничная = 0;
			
			Если ТекСтрока.Количество > НадоВернуть Тогда
				ТекСтрока.Количество = ТекСтрока.Количество - НадоВернуть;
			Иначе
				// Удалим ненужную строку
				ТаблицаСписания.Удалить(ТекСтрока);
			КонецЕсли;
			
			НадоВернуть = НадоВернуть - КоличествоКПоступлению;
			Если НадоВернуть <= 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// Может еще что-то осталось
		Если НадоВернуть > 0 Тогда
			НоваяСтрока=ТаблицаТоваров.Добавить();
			НоваяСтрока.Номенклатура               = СтрокаТовар.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТовар.ХарактеристикаНоменклатуры;
			НоваяСтрока.СкладКомпании              = СкладКомпании;
			НоваяСтрока.Количество                 = НадоВернуть;
			НоваяСтрока.Резерв                     = 0;
			НоваяСтрока.ЦенаРозничная  = 0;
		КонецЕсли;
	КонецЦикла;
	ТаблицаТоваров.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СкладКомпании,ЦенаРозничная","Количество, Резерв");
	
	Возврат ТаблицаТоваров;
КонецФункции // ПолучитьТаблицуТоваров()

Процедура ПровестиПоРеализованнымТоварам()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	СУММА(КорректировкаРеализацииТовары.Количество*КорректировкаРеализацииТовары.Коэффициент) КАК Количество,
	|	СУММА(КорректировкаРеализацииТовары.СуммаВсего) КАК СуммаВсего,
	|	СУММА(КорректировкаРеализацииТовары.СуммаНДС) КАК СуммаНДС,
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаРеализацииТовары.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	(КорректировкаРеализацииТовары.КоличествоРазница <> 0
	|	ИЛИ КорректировкаРеализацииТовары.СуммаВсегоРазница <> 0)
	|	И КорректировкаРеализацииТовары.Количество > 0
	|	И КорректировкаРеализацииТовары.Ссылка = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаРеализацииТовары.СтавкаНДС";
	Запрос.УстановитьПараметр("Регистратор",Ссылка);
	ТаблДок =  Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартииТоваровКомпании.СкладКомпании,
	|	ПартииТоваровКомпании.Номенклатура,
	|	ПартииТоваровКомпании.ХарактеристикаНоменклатуры,
	|	ПартииТоваровКомпании.СтатусПартии,
	|	ПартииТоваровКомпании.Партия,
	|	ПартииТоваровКомпании.Количество,
	|	ПартииТоваровКомпании.Сумма,
	|	ПартииТоваровКомпании.СуммаНДС,
	|	ПартииТоваровКомпании.СуммаБезНДС,
	|	ПартииТоваровКомпании.СуммаУпр,
	|	ПартииТоваровКомпании.СуммаНДСУпр,
	|	ПартииТоваровКомпании.СуммаБезНДСУпр,
	|	ПартииТоваровКомпании.ХозОперация,
	|	ПартииТоваровКомпании.СтавкаНДС,
	|	ПартииТоваровКомпании.Проект
	|ИЗ
	|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
	|ГДЕ
	|	ПартииТоваровКомпании.Регистратор = &Регистратор
	|	И ПартииТоваровКомпании.Номенклатура В(&Номенклатура)
	|	И ПартииТоваровКомпании.СтатусПартии = &СтатусПартии
	|	И ПартииТоваровКомпании.ВидДвижения = &ВидДвижения";
	
	Запрос.УстановитьПараметр("ВидДвижения"  , ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("Номенклатура" , ТаблДок.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Регистратор"  , Ссылка);
	Запрос.УстановитьПараметр("СтатусПартии" , Перечисления.СтатусыПартий.ТоварПринятыйКомиссия);
	ТаблДвижений = Запрос.Выполнить().Выгрузить();
	
	ТаблГТД = Движения.ГТДПартийТоваровКомпании.Выгрузить().Скопировать();
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	Для каждого стрДвижений Из ТаблДвижений Цикл
		НадоОприходовать                = стрДвижений.Количество;
		НадоОприходоватьСумма           = стрДвижений.СуммаУпр;
		НадоОприходоватьСуммаНДС        = стрДвижений.СуммаНДСУпр;
		НадоОприходоватьСуммаБезНДС     = стрДвижений.СуммаБезНДСУпр;
		НадоОприходоватьСуммаРегл       = стрДвижений.Сумма;
		НадоОприходоватьСуммаНДСРегл    = стрДвижений.СуммаНДС;
		НадоОприходоватьСуммаБезНДСРегл = стрДвижений.СуммаБезНДС;
		
		// пройдемся по ГТД
		стрПоиск = Новый Структура;
		стрПоиск.Вставить("Номенклатура",стрДвижений.Номенклатура);
		стрПоиск.Вставить("Партия", стрДвижений.Партия);
		Если ЗначениеЗаполнено(стрДвижений.ХарактеристикаНоменклатуры) Тогда
			стрПоиск.Вставить("ХарактеристикаНоменклатуры",стрДвижений.ХарактеристикаНоменклатуры);
		КонецЕсли;
		МассивГТД = ТаблГТД.НайтиСтроки(стрПоиск);
		
		Для Каждого стрГТД Из МассивГТД Цикл
			Если стрГТД.Количество = 0 Тогда Продолжить; КонецЕсли;
			Если НадоОприходовать = 0 Тогда Прервать; КонецЕсли;
			
			КоличествоПриходуем      = Мин(стрГТД.Количество, НадоОприходовать);
			СуммаПриходуем           = ?(НадоОприходовать = КоличествоПриходуем,НадоОприходоватьСумма,НадоОприходоватьСумма/НадоОприходовать*КоличествоПриходуем);
			СуммаНДСПриходуем        = ?(НадоОприходовать = КоличествоПриходуем,НадоОприходоватьСуммаНДС,НадоОприходоватьСуммаНДС/НадоОприходовать*КоличествоПриходуем);
			СуммаБезНДСПриходуем     = ?(НадоОприходовать = КоличествоПриходуем,НадоОприходоватьСуммаБезНДС,НадоОприходоватьСуммаБезНДС/НадоОприходовать*КоличествоПриходуем);
			СуммаРеглПриходуем       = ?(НадоОприходовать = КоличествоПриходуем,НадоОприходоватьСуммаРегл,НадоОприходоватьСуммаРегл/НадоОприходовать*КоличествоПриходуем);
			СуммаНДСРеглПриходуем    = ?(НадоОприходовать = КоличествоПриходуем,НадоОприходоватьСуммаНДСРегл,НадоОприходоватьСуммаНДСРегл/НадоОприходовать*КоличествоПриходуем);
			СуммаБезНДСРеглПриходуем = ?(НадоОприходовать = КоличествоПриходуем,НадоОприходоватьСуммаБезНДСРегл,НадоОприходоватьСуммаБезНДСРегл/НадоОприходовать*КоличествоПриходуем);
			
			// получим массивы строк
			МассивСХар   = ТаблДок.НайтиСтроки(Новый Структура("Номенклатура,ХарактеристикаНоменклатуры",стрДвижений.Номенклатура,стрДвижений.ХарактеристикаНоменклатуры));
			МассивБезХар = ТаблДок.НайтиСтроки(Новый Структура("Номенклатура",стрДвижений.Номенклатура));
			
			Если МассивСХар.Количество() > 0 Тогда
				ТекСтрока = МассивСХар[0];
			ИначеЕсли МассивБезХар.Количество() > 0 Тогда
				ТекСтрока = МассивБезХар[0];
			Иначе
				ТекСтрока = Неопределено;
			КонецЕсли;
			
			НоваяЗапись             = Движения.РеализованныеТовары.Добавить();
			НоваяЗапись.Регистратор = Ссылка;
			НоваяЗапись.Период      = Дата;
			
			// измерения
			НоваяЗапись.Контрагент                 = стрДвижений.Партия.Контрагент;
			НоваяЗапись.ДоговорВзаиморасчетов      = стрДвижений.Партия.ДоговорВзаиморасчетов;
			НоваяЗапись.Номенклатура               = стрДвижений.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры = стрДвижений.ХарактеристикаНоменклатуры;
			НоваяЗапись.ДокументПередачи           = стрДвижений.Партия;
			НоваяЗапись.ГТД                        = стрГТД.ГТД;
			
			// ресурсы
			НоваяЗапись.Количество     = КоличествоПриходуем;
			НоваяЗапись.СуммаУпр       = СуммаПриходуем;
			НоваяЗапись.СуммаНДСУпр    = СуммаНДСПриходуем;
			НоваяЗапись.СуммаБезНДСУпр = СуммаБезНДСПриходуем;
			НоваяЗапись.СуммаРегл      = СуммаРеглПриходуем;
			НоваяЗапись.СуммаНДС       = СуммаНДСРеглПриходуем;
			НоваяЗапись.СуммаБезНДС    = СуммаБезНДСРеглПриходуем;
			
			Если ТекСтрока <> Неопределено Тогда
				Если КоличествоПриходуем = ТекСтрока.Количество Тогда
					СуммаПродажи = ТекСтрока.СуммаВсего;
				Иначе
					СуммаПродажи = ?(ТекСтрока.Количество = 0,0, ТекСтрока.СуммаВсего/ТекСтрока.Количество*КоличествоПриходуем);
				КонецЕсли;
				
				ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
				Если ВалютаУпр = ВалютаДокумента Тогда
					НоваяЗапись.СуммаПродажи = СуммаПродажи;
				Иначе
					НоваяЗапись.СуммаПродажи = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаПродажи,ВалютаДокумента,КурсДокумента,ВалютаУпр,КурсВалютыУпр);
				КонецЕсли;
				
				НоваяЗапись.СуммаПродажиРегл = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаПродажи,ВалютаДокумента,КурсДокумента,ВалютаРегл,Дата);
				
				// Себестоимость равна продаже
				Если (НЕ НоваяЗапись.ДоговорВзаиморасчетов.КомиссияОтчетНаОснованииПродаж) Тогда
					НоваяЗапись.СуммаУпр  = НоваяЗапись.СуммаПродажи;
					НоваяЗапись.СуммаРегл = НоваяЗапись.СуммаПродажиРегл;
					// пересчитаем НДС
					НоваяЗапись.СуммаНДСУпр    = Окр(НоваяЗапись.СуммаУпр*ТекСтрока.СтавкаНДС.Ставка /(100 + ТекСтрока.СтавкаНДС.Ставка),2);
					НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
					НоваяЗапись.СуммаНДС       = Окр(НоваяЗапись.СуммаРегл*ТекСтрока.СтавкаНДС.Ставка /(100 + ТекСтрока.СтавкаНДС.Ставка),2);
					НоваяЗапись.СуммаБезНДС    = НоваяЗапись.СуммаРегл - НоваяЗапись.СуммаНДС;
				КонецЕсли;
				
			Иначе
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru='Не удалось получить сумму продажи товара <%1>.'"), стрДвижений.Номенклатура)
				);
			КонецЕсли;
			
			// реквизиты
			НоваяЗапись.ХозОперация = ХозОперация;
			
			// уменьшим оприходованное
			НадоОприходовать                = НадоОприходовать - КоличествоПриходуем;
			НадоОприходоватьСумма           = НадоОприходоватьСумма - СуммаПриходуем;
			НадоОприходоватьСуммаНДС        = НадоОприходоватьСуммаНДС - СуммаНДСПриходуем;
			НадоОприходоватьСуммаБезНДС     = НадоОприходоватьСуммаБезНДС - СуммаБезНДСПриходуем;
			НадоОприходоватьСуммаРегл       = НадоОприходоватьСуммаРегл - СуммаРеглПриходуем;
			НадоОприходоватьСуммаНДСРегл    = НадоОприходоватьСуммаНДСРегл - СуммаНДСРеглПриходуем;
			НадоОприходоватьСуммаБезНДСРегл = НадоОприходоватьСуммаБезНДСРегл - СуммаБезНДСРеглПриходуем;
			
			Если КоличествоПриходуем = стрГТД.Количество Тогда
				ТаблГТД.Удалить(стрГТД);
			Иначе
				стрГТД.Количество = стрГТД.Количество - КоличествоПриходуем;
			КонецЕсли;
		КонецЦикла;
		
		Если НадоОприходовать > 0 Тогда
			// получим массивы строк
			МассивСХар   = ТаблДок.НайтиСтроки(Новый Структура("Номенклатура,ХарактеристикаНоменклатуры",стрДвижений.Номенклатура,стрДвижений.ХарактеристикаНоменклатуры));
			МассивБезХар = ТаблДок.НайтиСтроки(Новый Структура("Номенклатура",стрДвижений.Номенклатура));
			
			Если МассивСХар.Количество() > 0 Тогда
				ТекСтрока = МассивСХар[0];
			ИначеЕсли МассивБезХар.Количество() > 0 Тогда
				ТекСтрока = МассивБезХар[0];
			Иначе
				ТекСтрока = Неопределено;
			КонецЕсли;
			
			НоваяЗапись             = Движения.РеализованныеТовары.Добавить();
			НоваяЗапись.Регистратор = Ссылка;
			НоваяЗапись.Период      = Дата;
			
			// измерения
			НоваяЗапись.Контрагент                 = стрДвижений.Партия.Контрагент;
			НоваяЗапись.ДоговорВзаиморасчетов      = стрДвижений.Партия.ДоговорВзаиморасчетов;
			НоваяЗапись.Номенклатура               = стрДвижений.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры = стрДвижений.ХарактеристикаНоменклатуры;
			НоваяЗапись.ДокументПередачи           = стрДвижений.Партия;
			
			// ресурсы
			
			НоваяЗапись.Количество     = НадоОприходовать;
			НоваяЗапись.СуммаУпр       = НадоОприходоватьСумма;
			НоваяЗапись.СуммаНДСУпр    = НадоОприходоватьСуммаНДС;
			НоваяЗапись.СуммаБезНДСУпр = НадоОприходоватьСуммаБезНДС;
			НоваяЗапись.СуммаРегл      = НадоОприходоватьСуммаРегл;
			НоваяЗапись.СуммаНДС       = НадоОприходоватьСуммаНДСРегл;
			НоваяЗапись.СуммаБезНДС    = НадоОприходоватьСуммаБезНДСРегл;
			
			Если ТекСтрока <> Неопределено Тогда
				Если НадоОприходовать = ТекСтрока.Количество Тогда
					СуммаПродажи = ТекСтрока.СуммаВсего;
				Иначе
					СуммаПродажи = ?(ТекСтрока.Количество = 0,0, ТекСтрока.СуммаВсего/ТекСтрока.Количество*НадоОприходовать);
				КонецЕсли;
				
				ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
				Если ВалютаУпр = ВалютаДокумента Тогда
					НоваяЗапись.СуммаПродажи = СуммаПродажи;
				Иначе
					НоваяЗапись.СуммаПродажи = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаПродажи,ВалютаДокумента,КурсДокумента,ВалютаУпр,КурсВалютыУпр);
				КонецЕсли;
				
				НоваяЗапись.СуммаПродажиРегл = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СуммаПродажи,ВалютаДокумента,КурсДокумента,ВалютаРегл,Дата);
				
				// Себестоимость равна продаже
				Если (НЕ НоваяЗапись.ДоговорВзаиморасчетов.КомиссияОтчетНаОснованииПродаж) Тогда
					НоваяЗапись.СуммаУпр  = НоваяЗапись.СуммаПродажи;
					НоваяЗапись.СуммаРегл = НоваяЗапись.СуммаПродажиРегл;
					// пересчитаем НДС
					НоваяЗапись.СуммаНДСУпр    = Окр(НоваяЗапись.СуммаУпр*ТекСтрока.СтавкаНДС.Ставка /(100 + ТекСтрока.СтавкаНДС.Ставка),2);
					НоваяЗапись.СуммаБезНДСУпр = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
					НоваяЗапись.СуммаНДС       = Окр(НоваяЗапись.СуммаРегл*ТекСтрока.СтавкаНДС.Ставка /(100 + ТекСтрока.СтавкаНДС.Ставка),2);
					НоваяЗапись.СуммаБезНДС    = НоваяЗапись.СуммаРегл - НоваяЗапись.СуммаНДС;
				КонецЕсли;
				
			Иначе
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru='Не удалось получить сумму продажи товара <%1>.'"), стрДвижений.Номенклатура)
				);
			КонецЕсли;
			
			// реквизиты
			НоваяЗапись.ХозОперация = ХозОперация;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует движения документа по партионным регистрам
// Режим - режим проведения (оперативный/неоперативный)
// ДокументСсылка - ссылка на документ который надо допровести по партиям
// Возвращает Истина - все нормально, ложь - чего-то не так.
Функция ПровестиПоПартиям(Режим, ДокументСсылка, СуммаРазногласий) Экспорт
	
	Отказ=Ложь;
	// Получим шапку документа
	ШапкаДокумента=ПолучитьШапкуДокумента(ДокументСсылка);
	
	ВедетсяБалансПоПодразделению= БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
	
	// Проверим, если подразделение проводиться по партиям "отложенно", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям=Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
		НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
		Если ВедетсяБалансПоПодразделению Тогда
			НаборЗаписейДоходыИРасходы.Подразделение=ДоговорВзаиморасчетов.ПодразделениеКомпании;
		КонецЕсли;
		НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СебестоимостьНеоприходованныхПартий;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте = Ложь;
		НаборЗаписейДоходыИРасходы.Доход = СуммаРазногласий;
		НаборЗаписейДоходыИРасходы.Приход();
		Возврат НЕ Отказ;
	КонецЕсли;
	
	ХозОперацияРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сделка, "ХозОперация");
		
	// Проверим возможность проведения документа на основании непроведенного документа основания
	Если НЕ ДокументОснование.Проведен Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Проведение документа корректировки реализации на основании непроведенного документа основания запрещено.'"),
			ЭтотОбъект,
			,
			,
			Истина
		);
		Отказ = Истина; 
		
	КонецЕсли; 
	
	Основания = Документы.КорректировкаРеализации.ОснованияЦепочкиКорректировкиРеализации(Ссылка);	
	Отказ = Не ПровестиПоПартиямТоваровКомпанииИГТД(Основания, Режим) ИЛИ Отказ;

	ПровестиВозвратТоваровПоСубподряду(Основания);
		
	// добавим новые реализованные товары
	ПровестиПоРеализованнымТоварам();
	
	// Подготовим таблицу движений в разрезе подразделений только собственных списанных партий.
	ТаблицаСписанийПартий = Движения.ПартииТоваровКомпании.Выгрузить();
	ТаблицаСписанийПартий.Свернуть("СкладКомпании,СтатусПартии","СуммаУпр");
	СтруктураОтбора=Новый Структура("СтатусПартии",Перечисления.СтатусыПартий.ТоварПринятыйКомиссия);
	МассивНайденныхСтрок=ТаблицаСписанийПартий.НайтиСтроки(СтруктураОтбора);
	Для Сч=0 По МассивНайденныхСтрок.ВГраница() Цикл
		ТаблицаСписанийПартий.Удалить(МассивНайденныхСтрок[Сч]);
	КонецЦикла;
	
	СебестоимостьУпр = ТаблицаСписанийПартий.Итог("СуммаУпр");
	
	НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
	НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
	// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
	Если ВедетсяБалансПоПодразделению Тогда
		НаборЗаписейДоходыИРасходы.Подразделение=ШапкаДокумента.СкладКомпании.ПодразделениеКомпании;
	КонецЕсли;
	НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.Себестоимость;
	НаборЗаписейДоходыИРасходы.ВУпрВалюте=Истина;
	НаборЗаписейДоходыИРасходы.Расход=СебестоимостьУпр;	
	НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
	
	// Подготовим таблицу движений в разрезе подразделений комиссионных товаров
	ТаблицаСписанийПартийРеализованных = Движения.РеализованныеТовары.Выгрузить();
	ТаблицаСписанийПартийРеализованных.Свернуть("ДоговорВзаиморасчетов","СуммаУпр");
	
	ОписаниеТипов=Новый ОписаниеТипов;
	ОписаниеТипов.Типы().Добавить(Тип("СправочникСсылка.ПодразделенияКомпании"));
	ТаблицаСписанийПартийРеализованных.Колонки.Добавить("Подразделение",ОписаниеТипов);
	Для Каждого СтрокаСписания Из ТаблицаСписанийПартийРеализованных Цикл
		СтрокаСписания.Подразделение = СтрокаСписания.ДоговорВзаиморасчетов.ПодразделениеКомпании;
	КонецЦикла;	
	ТаблицаСписанийПартийРеализованных.Свернуть("Подразделение","СуммаУпр");
	
	// В случае если, ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
	Если ВедетсяБалансПоПодразделению Тогда
		Для Каждого СтрокаСписания Из ТаблицаСписанийПартийРеализованных Цикл
			НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
			НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
			НаборЗаписейДоходыИРасходы.Подразделение=СтрокаСписания.Подразделение;
			НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.Себестоимость;
			НаборЗаписейДоходыИРасходы.ВУпрВалюте=Истина;
			НаборЗаписейДоходыИРасходы.Расход=СтрокаСписания.СуммаУпр;
			НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
			Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		КонецЦикла;
	Иначе
		НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.Себестоимость;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте=Истина;
		НаборЗаписейДоходыИРасходы.Расход=ТаблицаСписанийПартийРеализованных.Итог("СуммаУпр");
		НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
		Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
	КонецЕсли;
	
	// Доход от начисления дебиторской задолженности по отгруженному товару и оказанным услугам.
	Запрос=Новый Запрос();
	ТекстЗапроса="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СУММА(КорректировкаРеализацииТовары.СуммаВсегоРазница),0) КАК СуммаТоваров,
	|	ЕСТЬNULL(СУММА(0),0) КАК СуммаУслуг
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &ТекДок
	|	И КорректировкаРеализацииТовары.Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(0),0),
	|	ЕСТЬNULL(СУММА(КорректировкаРеализацииТовары.СуммаВсегоРазница),0)
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &ТекДок
	|	И КорректировкаРеализацииТовары.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(0),0),
	|	ЕСТЬNULL(СУММА(КорректировкаРеализацииРаботы.СуммаВсегоРазница),0)
	|ИЗ
	|	Документ.КорректировкаРеализации.Автоработы КАК КорректировкаРеализацииРаботы
	|ГДЕ
	|	КорректировкаРеализацииРаботы.Ссылка = &ТекДок";
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("ТекДок",ШапкаДокумента.Ссылка);
	Выборка=Запрос.Выполнить().Выбрать();
	СуммаТоваров=0; СуммаУслуг=0;
	Пока Выборка.Следующий() Цикл
		СуммаТоваров=СуммаТоваров+Выборка.СуммаТоваров;
		СуммаУслуг=СуммаУслуг+Выборка.СуммаУслуг;
	КонецЦикла;
	
	ВУпрВалюте=(ВалютаДокумента=Константы.ВалютаУправленческогоУчетаКомпании.Получить());
	НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
	НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
	// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
	Если ВедетсяБалансПоПодразделению Тогда
		НаборЗаписейДоходыИРасходы.Подразделение=ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
	КонецЕсли;
	НаборЗаписейДоходыИРасходы.ВУпрВалюте=ВУпрВалюте;
	НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.НачислениеДебиторскойЗадолженностиПоТовару;
	НаборЗаписейДоходыИРасходы.Доход=СуммаТоваров;
	НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
	
	НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
	НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
	// В случае, если ведется баланс по подразделению, передадим подразделение, соответствующее корреспонденции.
	Если ВедетсяБалансПоПодразделению Тогда
		НаборЗаписейДоходыИРасходы.Подразделение=ШапкаДокумента.ДоговорВзаиморасчетов.ПодразделениеКомпании;
	КонецЕсли;
	НаборЗаписейДоходыИРасходы.ВУпрВалюте=ВУпрВалюте;
	НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.НачислениеДебиторскойЗадолженностиПоУслугам;
	НаборЗаписейДоходыИРасходы.Доход=СуммаУслуг;
	НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
	
	// двигаем границу последовательности партий
	Если Ссылка <> ДокументСсылка Тогда
		
		РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоПартиямПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		
	КонецЕсли;
	
	РаботаСГраницами.СдвинутьГраницуПартий(ДокументСсылка, ДополнительныеСвойства, Движения);
	
	Возврат НЕ Отказ;
КонецФункции

// Формирует движения накоплений по карточкам контрагентов
//
Процедура ОбработкаПроведенияНакопленияПоКарточкамКонтрагентов()
	
	Если НЕ ЗначениеЗаполнено(Карточка) ИЛИ Сделка.ХозОперация <> Справочники.ХозОперации.РеализацияАгентскихУслуг Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КорректировкаРеализацииТовары.Ссылка.Контрагент,
	|	КорректировкаРеализацииТовары.Ссылка.Карточка,
	|	КорректировкаРеализацииТовары.Ссылка.Дата КАК ПериодНакопления,
	|	СУММА(КорректировкаРеализацииТовары.КоличествоРазница) КАК КоличествоНоменклатуры,
	|	СУММА(КорректировкаРеализацииТовары.СуммаВсегоРазница) КАК Сумма,
	|	СУММА(0) КАК КоличествоЧеков
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
	|	И (КорректировкаРеализацииТовары.КоличествоРазница <> 0
	|	ИЛИ КорректировкаРеализацииТовары.СуммаВсегоРазница <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаРеализацииТовары.Ссылка.Контрагент,
	|	КорректировкаРеализацииТовары.Ссылка.Карточка,
	|	КорректировкаРеализацииТовары.Ссылка.Дата";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	НаборНакоплениеСумм = Движения.НакопленияПоКарточкамКонтрагентов;
	НаборНакоплениеСумм.ДокументСсылка   = Ссылка;
	НаборНакоплениеСумм.РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	НаборНакоплениеСумм.ВыполнитьДвижения();
	
КонецПроцедуры

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "КорректировкаРеализации"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_КорректировкаРеализации(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если
		ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах")
	Тогда
		НомерИсправления = ДанныеЗаполнения.НомерИсправления + 1;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Автоработы Цикл
		
		СтрокаТЧ.ПоДокументуРеализации				= Истина;
		СтрокаТЧ.Подтверждение						= Истина;
		СтрокаТЧ.КоличествоПоДокументуРеализации	= СтрокаТЧ.Количество;
		СтрокаТЧ.КоэффициентПоДокументуРеализации	= СтрокаТЧ.Коэффициент;
		СтрокаТЧ.СтавкаНДСПоДокументуРеализации		= СтрокаТЧ.СтавкаНДС;
		СтрокаТЧ.СуммаНДСПоДокументуРеализации		= СтрокаТЧ.СуммаНДС;
		СтрокаТЧ.СуммаВсегоПоДокументуРеализации	= СтрокаТЧ.СуммаВсего;
		СтрокаТЧ.СуммаВсегоПоДокументуРеализации	= СтрокаТЧ.СуммаВсего;
		
	КонецЦикла;
	
	// Удалим ранее возвращенные коды маркировки
	РаннееВозвращены = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из КодыМаркировки Цикл
		СтрокаТовара = Товары.Найти(ТекущаяСтрока.ИдентификаторТовара, "ИдентификаторТовара");
		Если (СтрокаТовара <> Неопределено И НЕ СтрокаТовара.Подтверждение)
			ИЛИ ТекущаяСтрока.Возврат Тогда
			РаннееВозвращены.Добавить(ТекущаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из РаннееВозвращены Цикл
		КодыМаркировки.Удалить(ТекущаяСтрока);
	КонецЦикла;
	
	Если Не ДанныеЗаполнения.ДоступнаПечатьУКД Тогда	
		ДоступнаПечатьУПД = ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах;
		ДоступнаПечатьУКД = ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон;
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_КорректировкаРеализации()

// Производит заполнение объекта на основании документа "ЗаказНаряд"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаряд(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ВидРемонта.ТипРемонта = Перечисления.ТипыРемонта.Бесплатный Тогда
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект,
			НСтр("ru = 'В заказ-наряде выбран бесплатный ремонт. Нельзя создать корректировку реализации.'"));
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Состояние <> Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект,
			НСтр("ru = 'Заказ-наряд не находится в состоянии ""Закрыт"". Нельзя создать корректировку реализации.'"));
		Возврат Истина;
	КонецЕсли;
	
	Автомобиль = ДанныеЗаполнения.СводныйРемонтныйЗаказ.Автомобиль;
	
	Автоработы.Свернуть(
		"Авторабота,Нормочас,Коэффициент,СтавкаНДС,Контрагент,ДоговорВзаиморасчетов,СпособРасчетаСтоимостиРаботы",
		"Количество,Сумма,СуммаНДС,СуммаВсего");
	
	Для каждого СтрокаТЧ Из Автоработы Цикл
		
		СтрокаТЧ.ПоДокументуРеализации				= Истина;
		СтрокаТЧ.Подтверждение						= Истина;
		СтрокаТЧ.КоличествоПоДокументуРеализации	= СтрокаТЧ.Количество;
		СтрокаТЧ.КоэффициентПоДокументуРеализации	= СтрокаТЧ.Коэффициент;
		СтрокаТЧ.СтавкаНДСПоДокументуРеализации		= СтрокаТЧ.СтавкаНДС;
		СтрокаТЧ.СуммаНДСПоДокументуРеализации		= СтрокаТЧ.СуммаНДС;
		СтрокаТЧ.СуммаВсегоПоДокументуРеализации	= СтрокаТЧ.СуммаВсего;
		
	КонецЦикла; 

	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаряд()

#КонецОбласти

Функция ПроверитьПараметрыЗапретаВыбораНоменклатуры()
	
	// Если выполняется восстановление последовательностей, то отключим проверку
	ЭтоВосстановлениеПоследовательностей = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеСвойства, "ЭтоВосстановлениеПоследовательностей", Ложь);
	
	Если ЭтоВосстановлениеПоследовательностей Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Ложь;
	
	Массив = Товары.Выгрузить(,"Номенклатура, КоличествоРазница, ПоДокументуРеализации");
	СписокНоменклатуры = Новый Массив;
	Для Каждого Элемент Из Массив Цикл
		Если Элемент.КоличествоРазница < 0 ИЛИ (НЕ Элемент.ПоДокументуРеализации И Элемент.КоличествоРазница <> 0) Тогда
			СписокНоменклатуры.Добавить(Элемент.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.Артикул КАК НоменклатураАртикул
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)
	|	И Номенклатура.ЗапретПродажи";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Результат = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтрШаблон(
							НСтр("ru = 'Номенклатура [%1] ""%2"" блокируется для продажи.'"),
								Выборка.НоменклатураАртикул,
								Выборка.Номенклатура);
		
		ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары",Товары.Найти(Выборка.Номенклатура, "Номенклатура").НомерСтроки, "Номенклатура");					
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщения,
			,
			ПутьКТабличнойЧасти,
			"Объект"
		);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПровестиПоКодамМаркировки(РежимПроведения, Отказ)
	
	// Отменим записи состояний документа
	НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
	НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейСостоянияКодовМаркировки.ОтменаПроведения();
	
	ТаблицаМаркировки = НаборЗаписейСостоянияКодовМаркировки.ТаблицаКодовМаркировки();
	
	ТаблицаМаркировки.Колонки.Добавить("GTIN", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	ТаблицаМаркировки.Колонки.Добавить("СерийныйНомер", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	
	// Разберем маркировку на состовляющие для поиска
	Для Каждого ТекущийКодМаркировки Из ТаблицаМаркировки Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекущийКодМаркировки.КодМаркировки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураМаркировки =
			МенеджерОборудованияМаркировка.РазобратьШтриховойКодТовара(ТекущийКодМаркировки.КодМаркировки);
		
		// Это не маркировка товара
		Если СтруктураМаркировки.ТипИдентификатораТовара
			<> ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1") Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийКодМаркировки.GTIN = СтруктураМаркировки.GTIN;
		ТекущийКодМаркировки.СерийныйНомер = СтруктураМаркировки.СерийныйНомер;
		
	КонецЦикла;
	
	ТекущиеСтатусыМаркировки = РегистрыСведений.СостоянияКодовМаркировки.ТекущиеСтатусыКодовМаркировки(
		ТаблицаМаркировки,
		МоментВремени()
	);
	
	// Проверим коды на выбытие
	СостоянияВОбороте = Перечисления.СостоянияКодовМаркировки.СостоянияВводаВОборотМаркировки();
	
	// Коды Маркировок, которые надо вывести из оборота
	ТаблицаВывода = ТекущиеСтатусыМаркировки.СкопироватьКолонки();
	
	// Таблица маркирвки, которые необходимо вернуть
	ТаблицаВвода = ТекущиеСтатусыМаркировки.СкопироватьКолонки();
	ТаблицаНеПодтвержденных = ТекущиеСтатусыМаркировки.СкопироватьКолонки();
	
	Для Каждого ТекущаяСтрока Из ТекущиеСтатусыМаркировки Цикл
		СтрокаМаркировки = КодыМаркировки.Найти(ТекущаяСтрока.КодМаркировки, "КодМаркировки");
		СтрокаТоваров = Товары.Найти(СтрокаМаркировки.ИдентификаторТовара, "ИдентификаторТовара");
		ЭтоВозврат = СтрокаМаркировки.Возврат;
		Если СостоянияВОбороте.Найти(ТекущаяСтрока.Состояние) <> Неопределено И НЕ ЭтоВозврат Тогда
			НоваяСтрока = ТаблицаВывода.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		ИначеЕсли СостоянияВОбороте.Найти(ТекущаяСтрока.Состояние) = Неопределено И ЭтоВозврат Тогда
			НоваяСтрока = ТаблицаВвода.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		ИначеЕсли СтрокаТоваров <> Неопределено И НЕ СтрокаТоваров.Подтверждение Тогда
			НоваяСтрока = ТаблицаНеПодтвержденных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	// Для перемаркируемых поставим состояние выбытия из оборота
	ОчищатьЗаписи = Истина;
	УдалятьДвижения = Истина;
	НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
	НаборЗаписейСостоянияКодовМаркировки.Организация = Организация;
	НаборЗаписейСостоянияКодовМаркировки.РежимПроведения = РежимПроведения;
	
	// Выведем указанную маркировку из оборота
	Если ТаблицаВывода.Количество() > 0 Тогда
		СостояниеКодаМаркировки = ?(Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо,
			Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаРозничнаяПродажа,
			Перечисления.СостоянияКодовМаркировки.ПередачаДругомуСобственнику);
		НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейСостоянияКодовМаркировки.Состояние = СостояниеКодаМаркировки;
		НаборЗаписейСостоянияКодовМаркировки.РезультатЗапросаПоКодамМаркировки = ТаблицаВывода;
		Если НЕ НаборЗаписейСостоянияКодовМаркировки.СостояниеКодовМаркировки() Тогда
			Отказ = Истина;
		КонецЕсли;
		ОчищатьЗаписи = Ложь;
		УдалятьДвижения = Ложь;
	КонецЕсли;
	
	// Введем в оборот возврат
	Если ТаблицаВвода.Количество() > 0 Тогда
		НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейСостоянияКодовМаркировки.Состояние = Перечисления.СостоянияКодовМаркировки.ВведенВОборотПриВозврате;
		НаборЗаписейСостоянияКодовМаркировки.РезультатЗапросаПоКодамМаркировки = ТаблицаВвода;
		НаборЗаписейСостоянияКодовМаркировки.ОчищатьЗаписи = ОчищатьЗаписи;
		НаборЗаписейСостоянияКодовМаркировки.УдалятьДвижения = УдалятьДвижения;
		Если НЕ НаборЗаписейСостоянияКодовМаркировки.СостояниеКодовМаркировки() Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Для неподтверженных товаров с кодами сделаем в обороте
	Если ТаблицаНеПодтвержденных.Количество() > 0 Тогда
		НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
		НаборЗаписейСостоянияКодовМаркировки.Состояние = Перечисления.СостоянияКодовМаркировки.ВведенВОборот;
		НаборЗаписейСостоянияКодовМаркировки.РезультатЗапросаПоКодамМаркировки = ТаблицаНеПодтвержденных;
		НаборЗаписейСостоянияКодовМаркировки.ОчищатьЗаписи = ОчищатьЗаписи;
		НаборЗаписейСостоянияКодовМаркировки.УдалятьДвижения = УдалятьДвижения;
		Если НЕ НаборЗаписейСостоянияКодовМаркировки.СостояниеКодовМаркировки() Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ВозможенВВодНаОсновании(ДанныеЗаполнения)
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения)
		И (ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияТоваров")
		Или ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаряд")
		Или ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкаРеализации")) Тогда
		
		Если ДанныеЗаполнения = Ссылка Тогда
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
				ЭтотОбъект,
				НСтр("ru = 'Ввод корректировки реализации на основании самой себя запрещен.'"));
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ ДанныеЗаполнения.Проведен Тогда
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
				ЭтотОбъект,
				НСтр("ru = 'Ввод корректировки реализации возможен только на основании проведенного документа.'"));
			Возврат Ложь;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
			Если ДанныеЗаполнения.Состояние <> Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
				УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
					ЭтотОбъект,
					НСтр("ru = 'Ввод корректировки реализации на основании заказ-наряда возможен только в состоянии ""Закрыт"".'"));
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ХозОперацияОснования = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "ХозОперация", "");
		Если ХозОперацияОснования = Справочники.ХозОперации.РеализацияТоваровКомиссия Тогда
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
				ЭтотОбъект,
				НСтр("ru = 'Ввод корректировки реализации не возможен на основании реализации товаров комиссия.'"));
			Возврат Ложь;
		КонецЕсли;
		
		Если Документы.КорректировкаРеализации.КорректировкаНеДоступна(ДанныеЗаполнения) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'На основании <%1> введен возврат товаров. Ввод корректировки реализации невозможен.'"),
				ДанныеЗаполнения);
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
				ЭтотОбъект,
				ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#Область ДвиженияПоПартиям

// Формирует движения по регистру Партий товаров компании и ГТД партий товаров (уменьшение товарного запаса)  
//
// Возвращаемое значение: 
//	Булево. Истина - все ОК, Ложь - чего-то не так.
// 
Функция ПровестиПоПартиямТоваровКомпанииИГТД(Основания, РежимПроведения)
	
	ВсеОК = Истина; 
	
	Основания_Документы = Документы.КорректировкаРеализации.ДобавитьПеремещенияТоваровЗаказНарядаИзОснований(Основания);
	
	СтарыеДвиженияПартий = ДвиженияПартийДоКорректировки(Основания_Документы, Основания);
	СтарыеДвиженияГТД = ДвиженияГТДДоКорректировки(Основания_Документы, Основания);
	
	НовыеДвиженияПартий = ДвиженияПартийПослеКорректировки(Неопределено, СтарыеДвиженияПартий);
	ВсеОК = НовыеДвиженияПартий.ВсеОК И ВсеОК;
	
	НовыеДвиженияГТД = ДвиженияГТДПослеКорректировки(НовыеДвиженияПартий.ТаблицаНовыхДвиженийПартий, Ложь, СтарыеДвиженияГТД);
	ВсеОК = НовыеДвиженияГТД.ВсеОК И ВсеОК;

	Если ВсеОК Тогда 
		
		РазницаПартий = ПосчитатьРазницуДвиженийПоПартиям(СтарыеДвиженияПартий, НовыеДвиженияПартий.ТаблицаНовыхДвиженийПартий);
		РазницаГТД = ПосчитатьРазницуДвиженийПоГТД(СтарыеДвиженияГТД, НовыеДвиженияГТД.ТаблицаНовыхДвиженийГТД);
		
		Если ЗначениеЗаполнено(РазницаПартий) Тогда
			СтруткураДвиженийДляЗаписиВРегистрПартий = ДвиженияПартийПослеКорректировки(РазницаПартий, СтарыеДвиженияПартий);
			ВсеОК = СтруткураДвиженийДляЗаписиВРегистрПартий.ВсеОК И ВсеОК;
			Если ВсеОК Тогда
				СтруткураДвиженийДляЗаписиВРегистрПартий.ТаблицаНовыхДвиженийПартий.Свернуть(
					"ДокументПродажи,Номенклатура,Партия,Проект,СкладКомпании,СтавкаНДС,СтатусПартии,ХарактеристикаНоменклатуры,ХозОперация,Организация",
					"Количество,Сумма,СуммаБезНДС,СуммаБезНДСУпр,СуммаНДС,СуммаНДСУпр,СуммаУпр"
				);
				Для каждого ДвижениеПартии Из СтруткураДвиженийДляЗаписиВРегистрПартий.ТаблицаНовыхДвиженийПартий Цикл
					
					НоваяЗапись = Движения.ПартииТоваровКомпании.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ДвижениеПартии);
					НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
					НоваяЗапись.Регистратор = Ссылка;
					НоваяЗапись.Период      = Дата;
					Если Не ЗначениеЗаполнено(НоваяЗапись.СкладКомпании) Тогда
						НоваяЗапись.СкладКомпании = СкладКомпании;
					КонецЕсли;
					НоваяЗапись.Организация = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
						Организация,
						НоваяЗапись.СкладКомпании,
						НоваяЗапись.Период,
						ДвижениеПартии.Организация
					);
					
				КонецЦикла;
				
				Движения.ПартииТоваровКомпании.Записать();
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РазницаГТД) Тогда
			
			СтруткураДвиженийДляЗаписиВРегистрГТД = ДвиженияГТДПослеКорректировки(РазницаГТД, Истина, СтарыеДвиженияГТД);
			ВсеОК = СтруткураДвиженийДляЗаписиВРегистрГТД.ВсеОК И ВсеОК;
			
			Если ВсеОК Тогда 
				
				Для каждого ДвижениеГТД Из СтруткураДвиженийДляЗаписиВРегистрГТД.ТаблицаНовыхДвиженийГТД Цикл
					
					НоваяЗапись = Движения.ГТДПартийТоваровКомпании.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ДвижениеГТД);
					НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
					НоваяЗапись.Регистратор = Ссылка;
					НоваяЗапись.Период      = Дата;
					Если Не ЗначениеЗаполнено(НоваяЗапись.СкладКомпании) Тогда
						НоваяЗапись.СкладКомпании = СкладКомпании;
					КонецЕсли;
					НоваяЗапись.Организация = ЗапасыТоваров.ОрганизацияДляДвиженийПоПартиям(
						Организация,
						НоваяЗапись.СкладКомпании,
						НоваяЗапись.Период,
						ДвижениеГТД.Организация
					);
					
				КонецЦикла;
				
				Движения.ГТДПартийТоваровКомпании.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	СтарыеДвиженияПродаж = ДвиженияПродажДоКорректировки(Основания, РежимПроведения);
	ДвиженияДляЗаписиПродаж = ДвиженияПродажПослеКорректировки(
		РежимПроведения,
		НовыеДвиженияПартий.ТаблицаНовыхДвиженийПартий,
		НовыеДвиженияГТД.ТаблицаНовыхДвиженийГТД,
		СтарыеДвиженияПродаж
	);
	ВсеОК = ДвиженияДляЗаписиПродаж.ВсеОК И ВсеОК; 
	
	Если ВсеОК И ЗначениеЗаполнено(ДвиженияДляЗаписиПродаж.ТаблицаНовыхДвиженийПродаж) Тогда
		
		Для Каждого ДвижениеПродажи Из ДвиженияДляЗаписиПродаж.ТаблицаНовыхДвиженийПродаж Цикл
			
			НоваяЗапись = Движения.Продажи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ДвижениеПродажи);
			НоваяЗапись.Регистратор = Ссылка;
			НоваяЗапись.Период      = Дата;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Возврат ВсеОК;
	
КонецФункции

Функция ПровестиВозвратТоваровПоСубподряду(Основания)
	
	// получим значения валют
	ВалютаУпр  = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	// получим субподрядные работы
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаРеализацииРаботы.Авторабота,
	|	КорректировкаРеализацииРаботы.Контрагент,
	|	КорректировкаРеализацииРаботы.ДоговорВзаиморасчетов,
	|	КорректировкаРеализацииРаботы.СуммаВсегоРазница,
	|	КорректировкаРеализацииРаботы.СуммаНДСРазница
	|ИЗ
	|	Документ.КорректировкаРеализации.Автоработы КАК КорректировкаРеализацииРаботы
	|ГДЕ
	|	КорректировкаРеализацииРаботы.Ссылка = &Ссылка
	|	И КорректировкаРеализацииРаботы.СуммаВсегоРазница <> 0
	|	И КорректировкаРеализацииРаботы.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)";
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	СубподрядДок = Запрос.Выполнить().Выгрузить();
	
	// получим движения по субподряду
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Субподряд.ПодразделениеКомпании,
	|	Субподряд.Контрагент,
	|	Субподряд.ДоговорВзаиморасчетов,
	|	Субподряд.ЗаказНаряд,
	|	Субподряд.Работа,
	|	СУММА(Субподряд.Сумма) КАК Сумма,
	|	СУММА(Субподряд.СуммаНДС) КАК СуммаНДС,
	|	СУММА(Субподряд.СуммаУпр) КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.Субподряд КАК Субподряд
	|ГДЕ
	|	Субподряд.Регистратор В(&Регистраторы)
	|	И Субподряд.Работа В(&Автоработы)
	|
	|СГРУППИРОВАТЬ ПО
	|	Субподряд.Работа,
	|	Субподряд.ЗаказНаряд,
	|	Субподряд.ДоговорВзаиморасчетов,
	|	Субподряд.ПодразделениеКомпании,
	|	Субподряд.Контрагент";
	Запрос.УстановитьПараметр("Регистраторы", Основания);
	Запрос.УстановитьПараметр("Автоработы" ,СубподрядДок.ВыгрузитьКолонку("Авторабота"));
	ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаДок Из СубподрядДок Цикл
		
		ПодходящиеДвижения = ТаблицаДвижений.НайтиСтроки(
			Новый Структура(
				"Контрагент,ДоговорВзаиморасчетов,Работа",
				СтрокаДок.Контрагент,
				СтрокаДок.ДоговорВзаиморасчетов,
				СтрокаДок.Авторабота
			)
		);
		
		Если ПодходящиеДвижения.Количество() = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекСтрока = ПодходящиеДвижения[0];
		
		// заполним регистр
		НоваяЗапись = Движения.Субподряд.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекСтрока);
		НоваяЗапись.Период = Дата;
		НоваяЗапись.Регистратор = Ссылка;
		НоваяЗапись.ХозОперация = ХозОперация;
		
		// суммовые показатели
		НоваяЗапись.Сумма    = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаДок.СуммаВсегоРазница, ВалютаДокумента, Дата, ВалютаРегл, Дата);
		НоваяЗапись.СуммаНДС = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаДок.СуммаНДСРазница, ВалютаДокумента, Дата, ВалютаРегл, Дата);
		НоваяЗапись.СуммаУпр = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаДок.СуммаВсегоРазница, ВалютаДокумента, Дата, ВалютаУпр, Дата);
		
	КонецЦикла;

КонецФункции

// Возвращает результат запроса по таблице товаров  
//
// Возвращаемое значение: 
//	ТаблицаЗначений - таблица, заполненная товарам из документа Корректировки реализации 
//
Функция ПолучитьТаблицуТоваров()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ДокТовары.ГТД КАК ГТД,
		|	СУММА(ДокТовары.Количество * ДокТовары.Коэффициент) КАК Количество,
		|	ДокТовары.Партия КАК Партия,
		|	ДокТовары.Номенклатура КАК Номенклатура,
		|	КорректировкаРеализации.СкладКомпании КАК СкладКомпании
		|ИЗ
		|	Документ.КорректировкаРеализации.Товары КАК ДокТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|		ПО ДокТовары.Ссылка = КорректировкаРеализации.Ссылка
		|ГДЕ
		|	ДокТовары.Ссылка = &Ссылка
		|	И ДокТовары.Номенклатура.ВидНоменклатуры <> &Услуга
		|	И ДокТовары.Количество > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокТовары.Номенклатура,
		|	ДокТовары.ХарактеристикаНоменклатуры,
		|	ДокТовары.Партия,
		|	ДокТовары.ГТД,
		|	КорректировкаРеализации.СкладКомпании";    
	
	ЗапросТовары = Новый Запрос(ТекстЗапроса);
	ЗапросТовары.УстановитьПараметр("Ссылка", Ссылка);
	ЗапросТовары.УстановитьПараметр("Услуга", Перечисления.ВидыНоменклатуры.Услуга);
	
	Возврат ЗапросТовары.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьТаблицуПродажиТоваров()
	
	ТипыПартий = Метаданные.ПланыВидовХарактеристик.ТипыПартий.Тип.Типы();
	
	ПустыеЗначенияТиповПартий = Новый Массив;
	ПустыеЗначенияТиповПартий.Добавить(Неопределено);
	
	Для Каждого ТипДокумента Из ТипыПартий Цикл
		
		ПустыеЗначенияТиповПартий.Добавить(Новый(ТипДокумента));
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокументаТовары.Ссылка КАК Ссылка,
	|	ТаблицаДокументаТовары.ПоДокументуРеализации КАК ПоДокументуРеализации,
	|	ТаблицаДокументаТовары.Подтверждение КАК Подтверждение,
	|	ТаблицаДокументаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаДокументаТовары.Количество КАК Количество,
	|	ТаблицаДокументаТовары.КоличествоПоДокументуРеализации КАК КоличествоПоДокументуРеализации,
	|	ТаблицаДокументаТовары.КоличествоДоКорректировки КАК КоличествоДоКорректировки,
	|	ТаблицаДокументаТовары.КоличествоРазница КАК КоличествоРазница,
	|	ТаблицаДокументаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаДокументаТовары.ЕдиницаИзмеренияПоДокументуРеализации КАК ЕдиницаИзмеренияПоДокументуРеализации,
	|	ТаблицаДокументаТовары.Коэффициент КАК Коэффициент,
	|	ТаблицаДокументаТовары.КоэффициентПоДокументуРеализации КАК КоэффициентПоДокументуРеализации,
	|	ТаблицаДокументаТовары.Цена КАК Цена,
	|	ТаблицаДокументаТовары.Сумма КАК Сумма,
	|	ТаблицаДокументаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДокументаТовары.СтавкаНДСПоДокументуРеализации КАК СтавкаНДСПоДокументуРеализации,
	|	ТаблицаДокументаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаДокументаТовары.СуммаНДСПоДокументуРеализации КАК СуммаНДСПоДокументуРеализации,
	|	ТаблицаДокументаТовары.СуммаНДСДоКорректировки КАК СуммаНДСДоКорректировки,
	|	ТаблицаДокументаТовары.СуммаНДСРазница КАК СуммаНДСРазница,
	|	ТаблицаДокументаТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаДокументаТовары.СуммаВсего КАК СуммаВсего,
	|	ТаблицаДокументаТовары.СуммаВсегоПоДокументуРеализации КАК СуммаВсегоПоДокументуРеализации,
	|	ТаблицаДокументаТовары.СуммаВсегоДоКорректировки КАК СуммаВсегоДоКорректировки,
	|	ТаблицаДокументаТовары.СуммаВсегоРазница КАК СуммаВсегоРазница,
	|	ТаблицаДокументаТовары.Источник КАК Источник,
	|	ТаблицаДокументаТовары.Автомобиль КАК Автомобиль,
	|	ТаблицаДокументаТовары.ИдентификаторТовара КАК ИдентификаторТовара,
	|	ТаблицаДокументаТовары.Партия КАК Партия,
	|	ТаблицаДокументаТовары.ПартияПоДокументуРеализации КАК ПартияПоДокументуРеализации,
	|	ТаблицаДокументаТовары.ПартияДоКорректировки КАК ПартияДоКорректировки,
	|	ТаблицаДокументаТовары.ГТД КАК ГТД,
	|	ТаблицаДокументаТовары.ГТДПоДокументуРеализации КАК ГТДПоДокументуРеализации,
	|	ТаблицаДокументаТовары.ГТДДоКорректировки КАК ГТДДоКорректировки,
	|	ЗНАЧЕНИЕ(Справочник.Нормочасы.ПустаяСсылка) КАК НормоЧас,
	|	0 КАК СуммаСкидки,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументаТовары.Партия В (&ПустыеЗначенияТиповПартий)
	|				И ТаблицаДокументаТовары.ПартияПоДокументуРеализации В (&ПустыеЗначенияТиповПартий)
	|			ТОГДА ИСТИНА
	|		КОГДА ТаблицаДокументаТовары.Партия = ТаблицаДокументаТовары.ПартияПоДокументуРеализации
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПартииРавны
	|ПОМЕСТИТЬ ТаблицаДокументаТовары
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК ТаблицаДокументаТовары
	|ГДЕ
	|	ТаблицаДокументаТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КорректировкаРеализацииТовары.Номенклатура КАК Номенклатура,
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	КорректировкаРеализацииТовары.Автомобиль КАК Автомобиль,
	|	СУММА(КорректировкаРеализацииТовары.Количество * КорректировкаРеализацииТовары.Коэффициент) КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.Нормочасы.ПустаяСсылка) КАК НормоЧас,
	|	СУММА(КорректировкаРеализацииТовары.СуммаВсего) КАК СуммаВсего,
	|	0 КАК СуммаСкидки,
	|	СУММА(КорректировкаРеализацииТовары.СуммаВсего) КАК СуммаВсегоДляЦены,
	|	СУММА(КорректировкаРеализацииТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(КорректировкаРеализацииТовары.СуммаНДСРазница) КАК СуммаНДСРазница,
	|	СУММА(КорректировкаРеализацииТовары.Количество) КАК КоличествоДляЦены,
	|	КорректировкаРеализацииТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	КорректировкаРеализацииТовары.Партия КАК Партия,
	|	КорректировкаРеализацииТовары.ГТД КАК ГТД,
	|	0 КАК КоличествоНормочасов
	|ПОМЕСТИТЬ ТоварыДокумента
	|ИЗ
	|	ТаблицаДокументаТовары КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
	|	И (КорректировкаРеализацииТовары.КоличествоРазница * КорректировкаРеализацииТовары.Коэффициент <> 0
	|			ИЛИ КорректировкаРеализацииТовары.СуммаВсегоРазница <> 0
	|			ИЛИ КорректировкаРеализацииТовары.СуммаНДСРазница <> 0)
	|	И КорректировкаРеализацииТовары.ПартииРавны
	|	И КорректировкаРеализацииТовары.ГТД = КорректировкаРеализацииТовары.ГТДПоДокументуРеализации
	|	И КорректировкаРеализацииТовары.Количество <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	КорректировкаРеализацииТовары.Автомобиль,
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	КорректировкаРеализацииТовары.Партия,
	|	КорректировкаРеализацииТовары.ГТД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаРеализацииТовары.Автомобиль,
	|	СУММА(-(КорректировкаРеализацииТовары.КоличествоПоДокументуРеализации * КорректировкаРеализацииТовары.КоэффициентПоДокументуРеализации)),
	|	ЗНАЧЕНИЕ(Справочник.Нормочасы.ПустаяСсылка),
	|	СУММА(КорректировкаРеализацииТовары.СуммаВсегоПоДокументуРеализации),
	|	0,
	|	СУММА(КорректировкаРеализацииТовары.СуммаВсегоПоДокументуРеализации),
	|	СУММА(КорректировкаРеализацииТовары.СуммаНДСПоДокументуРеализации),
	|	СУММА(КорректировкаРеализацииТовары.СуммаНДСРазница),
	|	СУММА(КорректировкаРеализацииТовары.КоличествоПоДокументуРеализации),
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|	КорректировкаРеализацииТовары.Партия,
	|	КорректировкаРеализацииТовары.ГТД,
	|	0
	|ИЗ
	|	ТаблицаДокументаТовары КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
	|	И (КорректировкаРеализацииТовары.КоличествоРазница * КорректировкаРеализацииТовары.Коэффициент <> 0
	|			ИЛИ КорректировкаРеализацииТовары.СуммаВсегоРазница <> 0
	|			ИЛИ КорректировкаРеализацииТовары.СуммаНДСРазница <> 0)
	|	И КорректировкаРеализацииТовары.ПартииРавны
	|	И КорректировкаРеализацииТовары.ГТД = КорректировкаРеализацииТовары.ГТДПоДокументуРеализации
	|	И КорректировкаРеализацииТовары.Количество <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	КорректировкаРеализацииТовары.Автомобиль,
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	КорректировкаРеализацииТовары.Партия,
	|	КорректировкаРеализацииТовары.ГТД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаРеализацииТовары.Автомобиль,
	|	СУММА(-(КорректировкаРеализацииТовары.КоличествоПоДокументуРеализации * КорректировкаРеализацииТовары.КоэффициентПоДокументуРеализации)),
	|	ЗНАЧЕНИЕ(Справочник.Нормочасы.ПустаяСсылка),
	|	СУММА(КорректировкаРеализацииТовары.СуммаВсегоПоДокументуРеализации),
	|	0,
	|	СУММА(КорректировкаРеализацииТовары.СуммаВсегоПоДокументуРеализации),
	|	СУММА(КорректировкаРеализацииТовары.СуммаНДСПоДокументуРеализации),
	|	СУММА(КорректировкаРеализацииТовары.СуммаНДСРазница),
	|	СУММА(КорректировкаРеализацииТовары.КоличествоПоДокументуРеализации),
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|	КорректировкаРеализацииТовары.Партия,
	|	КорректировкаРеализацииТовары.ГТД,
	|	0
	|ИЗ
	|	ТаблицаДокументаТовары КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
	|	И (КорректировкаРеализацииТовары.КоличествоРазница * КорректировкаРеализацииТовары.Коэффициент <> 0
	|			ИЛИ КорректировкаРеализацииТовары.СуммаВсегоРазница <> 0)
	|	И КорректировкаРеализацииТовары.ПартииРавны
	|	И КорректировкаРеализацииТовары.ГТД = КорректировкаРеализацииТовары.ГТДПоДокументуРеализации
	|	И КорректировкаРеализацииТовары.Количество = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	КорректировкаРеализацииТовары.Автомобиль,
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	КорректировкаРеализацииТовары.Партия,
	|	КорректировкаРеализацииТовары.ГТД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаРеализацииТовары.Автомобиль,
	|	СУММА(КорректировкаРеализацииТовары.КоличествоРазница * КорректировкаРеализацииТовары.Коэффициент),
	|	ЗНАЧЕНИЕ(Справочник.Нормочасы.ПустаяСсылка),
	|	СУММА(КорректировкаРеализацииТовары.СуммаВсегоРазница),
	|	0,
	|	СУММА(КорректировкаРеализацииТовары.СуммаВсего),
	|	СУММА(КорректировкаРеализацииТовары.СуммаНДС),
	|	СУММА(КорректировкаРеализацииТовары.СуммаНДСРазница),
	|	СУММА(КорректировкаРеализацииТовары.Количество),
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|	КорректировкаРеализацииТовары.Партия,
	|	КорректировкаРеализацииТовары.ГТД,
	|	0
	|ИЗ
	|	ТаблицаДокументаТовары КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
	|	И (НЕ КорректировкаРеализацииТовары.ПартииРавны
	|			ИЛИ КорректировкаРеализацииТовары.ГТД <> КорректировкаРеализацииТовары.ГТДПоДокументуРеализации)
	|	И НЕ КорректировкаРеализацииТовары.ПоДокументуРеализации = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	КорректировкаРеализацииТовары.Автомобиль,
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	КорректировкаРеализацииТовары.Партия,
	|	КорректировкаРеализацииТовары.ГТД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаРеализацииТовары.Автомобиль,
	|	СУММА(-КорректировкаРеализацииТовары.КоличествоПоДокументуРеализации * КорректировкаРеализацииТовары.КоэффициентПоДокументуРеализации),
	|	ЗНАЧЕНИЕ(Справочник.Нормочасы.ПустаяСсылка),
	|	СУММА(-КорректировкаРеализацииТовары.СуммаВсегоПоДокументуРеализации),
	|	0,
	|	СУММА(КорректировкаРеализацииТовары.СуммаВсегоПоДокументуРеализации),
	|	СУММА(-КорректировкаРеализацииТовары.СуммаНДСПоДокументуРеализации),
	|	СУММА(0),
	|	СУММА(КорректировкаРеализацииТовары.КоличествоПоДокументуРеализации),
	|	КорректировкаРеализацииТовары.СтавкаНДСПоДокументуРеализации,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|	КорректировкаРеализацииТовары.ПартияПоДокументуРеализации,
	|	КорректировкаРеализацииТовары.ГТДПоДокументуРеализации,
	|	0
	|ИЗ
	|	ТаблицаДокументаТовары КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
	|	И (НЕ КорректировкаРеализацииТовары.ПартииРавны
	|			ИЛИ КорректировкаРеализацииТовары.ГТД <> КорректировкаРеализацииТовары.ГТДПоДокументуРеализации)
	|	И КорректировкаРеализацииТовары.ПоДокументуРеализации = ИСТИНА
	|	И НЕ КорректировкаРеализацииТовары.Партия В (&ПустыеЗначенияТиповПартий)
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	КорректировкаРеализацииТовары.Автомобиль,
	|	КорректировкаРеализацииТовары.ПартияПоДокументуРеализации,
	|	КорректировкаРеализацииТовары.ГТДПоДокументуРеализации,
	|	КорректировкаРеализацииТовары.СтавкаНДСПоДокументуРеализации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаРеализацииТовары.Автомобиль,
	|	СУММА(КорректировкаРеализацииТовары.Количество * КорректировкаРеализацииТовары.Коэффициент),
	|	ЗНАЧЕНИЕ(Справочник.Нормочасы.ПустаяСсылка),
	|	СУММА(КорректировкаРеализацииТовары.СуммаВсего),
	|	0,
	|	СУММА(КорректировкаРеализацииТовары.СуммаВсего),
	|	СУММА(КорректировкаРеализацииТовары.СуммаНДС),
	|	СУММА(0),
	|	СУММА(КорректировкаРеализацииТовары.Количество),
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|	КорректировкаРеализацииТовары.Партия,
	|	КорректировкаРеализацииТовары.ГТД,
	|	0
	|ИЗ
	|	ТаблицаДокументаТовары КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
	|	И (НЕ КорректировкаРеализацииТовары.ПартииРавны
	|			ИЛИ КорректировкаРеализацииТовары.ГТД <> КорректировкаРеализацииТовары.ГТДПоДокументуРеализации)
	|	И КорректировкаРеализацииТовары.ПоДокументуРеализации = ИСТИНА
	|	И КорректировкаРеализацииТовары.Количество <> 0
	|	И НЕ КорректировкаРеализацииТовары.Партия В (&ПустыеЗначенияТиповПартий)
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	КорректировкаРеализацииТовары.Автомобиль,
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	КорректировкаРеализацииТовары.Партия,
	|	КорректировкаРеализацииТовары.ГТД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаРеализацииТовары.Автомобиль,
	|	СУММА(-КорректировкаРеализацииТовары.КоличествоПоДокументуРеализации * КорректировкаРеализацииТовары.КоэффициентПоДокументуРеализации),
	|	ЗНАЧЕНИЕ(Справочник.Нормочасы.ПустаяСсылка),
	|	СУММА(КорректировкаРеализацииТовары.СуммаВсегоПоДокументуРеализации),
	|	0,
	|	СУММА(КорректировкаРеализацииТовары.СуммаВсегоПоДокументуРеализации),
	|	СУММА(КорректировкаРеализацииТовары.СуммаНДСПоДокументуРеализации),
	|	СУММА(0),
	|	СУММА(КорректировкаРеализацииТовары.КоличествоПоДокументуРеализации),
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|	КорректировкаРеализацииТовары.ПартияПоДокументуРеализации,
	|	КорректировкаРеализацииТовары.ГТДПоДокументуРеализации,
	|	0
	|ИЗ
	|	ТаблицаДокументаТовары КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
	|	И (НЕ КорректировкаРеализацииТовары.ПартииРавны
	|			ИЛИ КорректировкаРеализацииТовары.ГТД <> КорректировкаРеализацииТовары.ГТДПоДокументуРеализации)
	|	И КорректировкаРеализацииТовары.ПоДокументуРеализации = ИСТИНА
	|	И КорректировкаРеализацииТовары.Количество <> 0
	|	И КорректировкаРеализацииТовары.Партия В(&ПустыеЗначенияТиповПартий)
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	КорректировкаРеализацииТовары.Автомобиль,
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	КорректировкаРеализацииТовары.ПартияПоДокументуРеализации,
	|	КорректировкаРеализацииТовары.ГТДПоДокументуРеализации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаРеализацииТовары.Автомобиль,
	|	СУММА(КорректировкаРеализацииТовары.Количество * КорректировкаРеализацииТовары.Коэффициент),
	|	ЗНАЧЕНИЕ(Справочник.Нормочасы.ПустаяСсылка),
	|	СУММА(КорректировкаРеализацииТовары.СуммаВсего),
	|	0,
	|	СУММА(КорректировкаРеализацииТовары.СуммаВсего),
	|	СУММА(КорректировкаРеализацииТовары.СуммаНДС),
	|	СУММА(КорректировкаРеализацииТовары.СуммаНДСРазница),
	|	СУММА(КорректировкаРеализацииТовары.Количество),
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|	КорректировкаРеализацииТовары.Партия,
	|	КорректировкаРеализацииТовары.ГТД,
	|	0
	|ИЗ
	|	ТаблицаДокументаТовары КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
	|	И (НЕ КорректировкаРеализацииТовары.ПартииРавны
	|			ИЛИ КорректировкаРеализацииТовары.ГТД <> КорректировкаРеализацииТовары.ГТДПоДокументуРеализации)
	|	И КорректировкаРеализацииТовары.ПоДокументуРеализации = ИСТИНА
	|	И КорректировкаРеализацииТовары.Количество <> 0
	|	И КорректировкаРеализацииТовары.Партия В(&ПустыеЗначенияТиповПартий)
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	КорректировкаРеализацииТовары.Автомобиль,
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	КорректировкаРеализацииТовары.Партия,
	|	КорректировкаРеализацииТовары.ГТД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаРеализацииТовары.Автомобиль,
	|	СУММА(-КорректировкаРеализацииТовары.КоличествоПоДокументуРеализации * КорректировкаРеализацииТовары.КоэффициентПоДокументуРеализации),
	|	ЗНАЧЕНИЕ(Справочник.Нормочасы.ПустаяСсылка),
	|	СУММА(КорректировкаРеализацииТовары.СуммаВсегоПоДокументуРеализации),
	|	0,
	|	СУММА(КорректировкаРеализацииТовары.СуммаВсегоПоДокументуРеализации),
	|	СУММА(КорректировкаРеализацииТовары.СуммаНДСПоДокументуРеализации),
	|	СУММА(КорректировкаРеализацииТовары.СуммаНДСРазница),
	|	СУММА(КорректировкаРеализацииТовары.КоличествоПоДокументуРеализации),
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|	КорректировкаРеализацииТовары.ПартияПоДокументуРеализации,
	|	КорректировкаРеализацииТовары.ГТДПоДокументуРеализации,
	|	0
	|ИЗ
	|	ТаблицаДокументаТовары КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
	|	И (НЕ КорректировкаРеализацииТовары.ПартииРавны
	|			ИЛИ КорректировкаРеализацииТовары.ГТД <> КорректировкаРеализацииТовары.ГТДПоДокументуРеализации)
	|	И КорректировкаРеализацииТовары.ПоДокументуРеализации = ИСТИНА
	|	И КорректировкаРеализацииТовары.Количество = 0
	|	И КорректировкаРеализацииТовары.Партия В(&ПустыеЗначенияТиповПартий)
	|	И КорректировкаРеализацииТовары.КоличествоРазница <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	КорректировкаРеализацииТовары.Автомобиль,
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	КорректировкаРеализацииТовары.ПартияПоДокументуРеализации,
	|	КорректировкаРеализацииТовары.ГТДПоДокументуРеализации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииРаботы.Авторабота,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	СУММА(КорректировкаРеализацииРаботы.Количество),
	|	КорректировкаРеализацииРаботы.Нормочас,
	|	СУММА(КорректировкаРеализацииРаботы.СуммаВсего),
	|	0,
	|	СУММА(КорректировкаРеализацииРаботы.СуммаВсего),
	|	СУММА(КорректировкаРеализацииРаботы.СуммаНДС),
	|	СУММА(КорректировкаРеализацииРаботы.СуммаНДСРазница),
	|	СУММА(КорректировкаРеализацииРаботы.Количество),
	|	КорректировкаРеализацииРаботы.СтавкаНДС,
	|	КорректировкаРеализацииРаботы.Контрагент,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка),
	|	КорректировкаРеализацииРаботы.Количество * КорректировкаРеализацииРаботы.Коэффициент
	|ИЗ
	|	Документ.КорректировкаРеализации.Автоработы КАК КорректировкаРеализацииРаботы
	|ГДЕ
	|	КорректировкаРеализацииРаботы.Ссылка = &Ссылка
	|	И (КорректировкаРеализацииРаботы.КоличествоРазница <> 0
	|			ИЛИ КорректировкаРеализацииРаботы.СуммаВсегоРазница <> 0
	|			ИЛИ КорректировкаРеализацииРаботы.КоэффициентРазница <> 0
	|			ИЛИ КорректировкаРеализацииРаботы.СуммаНДСРазница <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаРеализацииРаботы.Авторабота,
	|	КорректировкаРеализацииРаботы.СтавкаНДС,
	|	КорректировкаРеализацииРаботы.Контрагент,
	|	КорректировкаРеализацииРаботы.Нормочас,
	|	КорректировкаРеализацииРаботы.Количество * КорректировкаРеализацииРаботы.Коэффициент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииРаботы.Авторабота,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	СУММА(-КорректировкаРеализацииРаботы.КоличествоПоДокументуРеализации),
	|	КорректировкаРеализацииРаботы.Нормочас,
	|	СУММА(КорректировкаРеализацииРаботы.СуммаВсегоПоДокументуРеализации),
	|	0,
	|	СУММА(КорректировкаРеализацииРаботы.СуммаВсего),
	|	СУММА(КорректировкаРеализацииРаботы.СуммаНДСПоДокументуРеализации),
	|	СУММА(КорректировкаРеализацииРаботы.СуммаНДСРазница),
	|	СУММА(КорректировкаРеализацииРаботы.КоличествоПоДокументуРеализации),
	|	КорректировкаРеализацииРаботы.СтавкаНДС,
	|	КорректировкаРеализацииРаботы.Контрагент,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка),
	|	-(КорректировкаРеализацииРаботы.КоличествоПоДокументуРеализации * КорректировкаРеализацииРаботы.КоэффициентПоДокументуРеализации)
	|ИЗ
	|	Документ.КорректировкаРеализации.Автоработы КАК КорректировкаРеализацииРаботы
	|ГДЕ
	|	КорректировкаРеализацииРаботы.Ссылка = &Ссылка
	|	И (КорректировкаРеализацииРаботы.КоличествоРазница <> 0
	|			ИЛИ КорректировкаРеализацииРаботы.СуммаВсегоРазница <> 0
	|			ИЛИ КорректировкаРеализацииРаботы.КоэффициентРазница <> 0
	|			ИЛИ КорректировкаРеализацииРаботы.СуммаНДСРазница <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаРеализацииРаботы.Авторабота,
	|	КорректировкаРеализацииРаботы.СтавкаНДС,
	|	КорректировкаРеализацииРаботы.Контрагент,
	|	КорректировкаРеализацииРаботы.Нормочас,
	|	-(КорректировкаРеализацииРаботы.КоличествоПоДокументуРеализации * КорректировкаРеализацииРаботы.КоэффициентПоДокументуРеализации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДокумента.Номенклатура КАК Номенклатура,
	|	ТоварыДокумента.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТоварыДокумента.Автомобиль КАК Автомобиль,
	|	ТоварыДокумента.Количество КАК Количество,
	|	ТоварыДокумента.НормоЧас КАК НормоЧас,
	|	ТоварыДокумента.СуммаВсего КАК Сумма,
	|	ТоварыДокумента.СуммаСкидки КАК СуммаСкидки,
	|	ТоварыДокумента.СуммаВсегоДляЦены КАК СуммаВсегоДляЦены,
	|	ТоварыДокумента.СуммаНДС КАК СуммаНДС,
	|	ТоварыДокумента.СуммаНДСРазница КАК СуммаНДСРазница,
	|	ТоварыДокумента.КоличествоДляЦены КАК КоличествоДляЦены,
	|	ТоварыДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ТоварыДокумента.Контрагент КАК Контрагент,
	|	ТоварыДокумента.Партия КАК Партия,
	|	ТоварыДокумента.ГТД КАК ГТД,
	|	ВЫБОР
	|		КОГДА ТоварыДокумента.Количество < 0
	|				И НЕ ТоварыДокумента.ГТД = ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)
	|			ТОГДА 4
	|		КОГДА ТоварыДокумента.Количество < 0
	|				И НЕ ТоварыДокумента.Партия В (&ПустыеЗначенияТиповПартий)
	|			ТОГДА 3
	|		КОГДА НЕ ТоварыДокумента.ГТД = ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)
	|			ТОГДА 2
	|		КОГДА НЕ ТоварыДокумента.Партия В (&ПустыеЗначенияТиповПартий)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПолеСортировки,
	|	ТоварыДокумента.КоличествоНормочасов КАК КоличествоНормочасов
	|ИЗ
	|	ТоварыДокумента КАК ТоварыДокумента
	|ГДЕ
	|	ТоварыДокумента.Количество <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолеСортировки УБЫВ";
	
	Запрос.УстановитьПараметр("ПустыеЗначенияТиповПартий", ПустыеЗначенияТиповПартий);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	ТабДок = Запрос.Выполнить().Выгрузить();
	
	Возврат ТабДок;

КонецФункции

// Возвращает таблицу движений документов в цепочке корректировки. 
//
// Возвращаемое значение: 
//	ТаблицаЗначений - 	таблица, заполненая движениями по регистру Партий товаров компании всех документов 
//						в цепочке Корректировки, наяходящихся до текущего документа Корректировки.
//
Функция ДвиженияПартийДоКорректировки(ДокументыОснований, Основания)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыВПроизводстве.СкладИсточник КАК СкладКомпании,
	|	ТоварыВПроизводстве.Номенклатура КАК Номенклатура,
	|	ТоварыВПроизводстве.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТоварыВПроизводстве.СтатусПартии КАК СтатусПартии,
	|	ТоварыВПроизводстве.Партия КАК Партия,
	|	ТоварыВПроизводстве.Организация КАК Организация,
	|	СУММА(ТоварыВПроизводстве.Количество) КАК Количество,
	|	СУММА(ТоварыВПроизводстве.Сумма) КАК Сумма,
	|	СУММА(ТоварыВПроизводстве.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ТоварыВПроизводстве.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ТоварыВПроизводстве.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ТоварыВПроизводстве.СуммаНДСУпр) КАК СуммаНДСУпр,
	|	СУММА(ТоварыВПроизводстве.СуммаБезНДСУпр) КАК СуммаБезНДСУпр,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	|ПОМЕСТИТЬ ВТ_ДвиженияТоваровВПроизводстве
	|ИЗ
	|	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
	|ГДЕ
	|	ТоварыВПроизводстве.Регистратор В(&Основания)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыВПроизводстве.СкладИсточник,
	|	ТоварыВПроизводстве.Номенклатура,
	|	ТоварыВПроизводстве.ХарактеристикаНоменклатуры,
	|	ТоварыВПроизводстве.СтатусПартии,
	|	ТоварыВПроизводстве.Партия,
	|	ТоварыВПроизводстве.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартииТоваровКомпании.СкладКомпании КАК СкладКомпании,
	|	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
	|	ПартииТоваровКомпании.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПартииТоваровКомпании.СтатусПартии КАК СтатусПартии,
	|	ПартииТоваровКомпании.Партия КАК Партия,
	|	ПартииТоваровКомпании.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ПартииТоваровКомпании.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -ПартииТоваровКомпании.Количество
	|		ИНАЧЕ ПартииТоваровКомпании.Количество
	|	КОНЕЦ КАК Количество,
	|	ПартииТоваровКомпании.Сумма КАК Сумма,
	|	ПартииТоваровКомпании.СуммаНДС КАК СуммаНДС,
	|	ПартииТоваровКомпании.СуммаБезНДС КАК СуммаБезНДС,
	|	ПартииТоваровКомпании.СуммаУпр КАК СуммаУпр,
	|	ПартииТоваровКомпании.СуммаНДСУпр КАК СуммаНДСУпр,
	|	ПартииТоваровКомпании.СуммаБезНДСУпр КАК СуммаБезНДСУпр,
	|	ВЫБОР
	|		КОГДА ПартииТоваровКомпании.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ИНАЧЕ ПартииТоваровКомпании.ВидДвижения
	|	КОНЕЦ КАК ВидДвижения
	|ПОМЕСТИТЬ ВТ_ДвиженияПартийТоваров
	|ИЗ
	|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
	|ГДЕ
	|	ПартииТоваровКомпании.Регистратор В(&ДокументыОснований)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ДвиженияТоваровВПроизводстве.СкладКомпании,
	|	ВТ_ДвиженияТоваровВПроизводстве.Номенклатура,
	|	ВТ_ДвиженияТоваровВПроизводстве.ХарактеристикаНоменклатуры,
	|	ВТ_ДвиженияТоваровВПроизводстве.СтатусПартии,
	|	ВТ_ДвиженияТоваровВПроизводстве.Партия,
	|	ВТ_ДвиженияТоваровВПроизводстве.Организация,
	|	ВТ_ДвиженияТоваровВПроизводстве.Количество,
	|	ВТ_ДвиженияТоваровВПроизводстве.Сумма,
	|	ВТ_ДвиженияТоваровВПроизводстве.СуммаНДС,
	|	ВТ_ДвиженияТоваровВПроизводстве.СуммаБезНДС,
	|	ВТ_ДвиженияТоваровВПроизводстве.СуммаУпр,
	|	ВТ_ДвиженияТоваровВПроизводстве.СуммаНДСУпр,
	|	ВТ_ДвиженияТоваровВПроизводстве.СуммаБезНДСУпр,
	|	ВТ_ДвиженияТоваровВПроизводстве.ВидДвижения
	|ИЗ
	|	ВТ_ДвиженияТоваровВПроизводстве КАК ВТ_ДвиженияТоваровВПроизводстве
	|ГДЕ
	|	ВТ_ДвиженияТоваровВПроизводстве.Количество <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДвиженияПартийТоваров.СкладКомпании КАК СкладКомпании,
	|	ВТ_ДвиженияПартийТоваров.Номенклатура КАК Номенклатура,
	|	ВТ_ДвиженияПартийТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_ДвиженияПартийТоваров.СтатусПартии КАК СтатусПартии,
	|	ВТ_ДвиженияПартийТоваров.Партия КАК Партия,
	|	ВТ_ДвиженияПартийТоваров.Организация КАК Организация,
	|	СУММА(ВТ_ДвиженияПартийТоваров.Количество) КАК Количество,
	|	СУММА(ВТ_ДвиженияПартийТоваров.Сумма) КАК Сумма,
	|	СУММА(ВТ_ДвиженияПартийТоваров.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ВТ_ДвиженияПартийТоваров.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ВТ_ДвиженияПартийТоваров.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ВТ_ДвиженияПартийТоваров.СуммаНДСУпр) КАК СуммаНДСУпр,
	|	СУММА(ВТ_ДвиженияПартийТоваров.СуммаБезНДСУпр) КАК СуммаБезНДСУпр,
	|	ВТ_ДвиженияПартийТоваров.ВидДвижения КАК ВидДвижения
	|ПОМЕСТИТЬ ВТ_ДвиженияТоваров
	|ИЗ
	|	ВТ_ДвиженияПартийТоваров КАК ВТ_ДвиженияПартийТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДвиженияПартийТоваров.ХарактеристикаНоменклатуры,
	|	ВТ_ДвиженияПартийТоваров.Номенклатура,
	|	ВТ_ДвиженияПартийТоваров.Партия,
	|	ВТ_ДвиженияПартийТоваров.Организация,
	|	ВТ_ДвиженияПартийТоваров.СкладКомпании,
	|	ВТ_ДвиженияПартийТоваров.СтатусПартии,
	|	ВТ_ДвиженияПартийТоваров.ВидДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДвиженияТоваров.СкладКомпании КАК СкладКомпании,
	|	ВТ_ДвиженияТоваров.Номенклатура КАК Номенклатура,
	|	ВТ_ДвиженияТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_ДвиженияТоваров.СтатусПартии КАК СтатусПартии,
	|	ВТ_ДвиженияТоваров.Партия КАК Партия,
	|	ВТ_ДвиженияТоваров.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ВТ_ДвиженияТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -ВТ_ДвиженияТоваров.Количество
	|		ИНАЧЕ ВТ_ДвиженияТоваров.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ВТ_ДвиженияТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -ВТ_ДвиженияТоваров.Сумма
	|		ИНАЧЕ ВТ_ДвиженияТоваров.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ВТ_ДвиженияТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -ВТ_ДвиженияТоваров.СуммаНДС
	|		ИНАЧЕ ВТ_ДвиженияТоваров.СуммаНДС
	|	КОНЕЦ КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ВТ_ДвиженияТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -ВТ_ДвиженияТоваров.СуммаБезНДС
	|		ИНАЧЕ ВТ_ДвиженияТоваров.СуммаБезНДС
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА ВТ_ДвиженияТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -ВТ_ДвиженияТоваров.СуммаУпр
	|		ИНАЧЕ ВТ_ДвиженияТоваров.СуммаУпр
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР
	|		КОГДА ВТ_ДвиженияТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -ВТ_ДвиженияТоваров.СуммаНДСУпр
	|		ИНАЧЕ ВТ_ДвиженияТоваров.СуммаНДСУпр
	|	КОНЕЦ КАК СуммаНДСУпр,
	|	ВЫБОР
	|		КОГДА ВТ_ДвиженияТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -ВТ_ДвиженияТоваров.СуммаБезНДСУпр
	|		ИНАЧЕ ВТ_ДвиженияТоваров.СуммаБезНДСУпр
	|	КОНЕЦ КАК СуммаБезНДСУпр,
	|	ВТ_ДвиженияТоваров.ВидДвижения КАК ВидДвижения
	|ИЗ
	|	ВТ_ДвиженияТоваров КАК ВТ_ДвиженияТоваров
	|ГДЕ
	|	ВТ_ДвиженияТоваров.Количество <> 0";
	
	Запрос.УстановитьПараметр("ДокументыОснований", ДокументыОснований);
	Запрос.УстановитьПараметр("Основания", Основания);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает таблицу движений документов в цепочке корректировки.
// 
// Возвращаемое значение: 
//	ТаблицаЗначений - 	таблица, заполненая движениями по регистру ГТД партий товаров всех документов 
//						в цепочке Корректировки, наяходящихся до текущего документа Корректировки. 
//
Функция ДвиженияГТДДоКорректировки(ДокументыОснований, Основания)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыВПроизводстве.СкладИсточник КАК СкладКомпании,
		|	ТоварыВПроизводстве.Номенклатура КАК Номенклатура,
		|	ТоварыВПроизводстве.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТоварыВПроизводстве.Партия КАК Партия,
		|	ТоварыВПроизводстве.Организация КАК Организация,
		|	ТоварыВПроизводстве.ГТД КАК ГТД,
		|	СУММА(ТоварыВПроизводстве.Количество) КАК Количество,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	ТоварыВПроизводстве.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТ_ДвиженияТоваровВПроизводстве
		|ИЗ
		|	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
		|ГДЕ
		|	ТоварыВПроизводстве.Регистратор В(&Основания)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыВПроизводстве.СкладИсточник,
		|	ТоварыВПроизводстве.Номенклатура,
		|	ТоварыВПроизводстве.ХарактеристикаНоменклатуры,
		|	ТоварыВПроизводстве.Партия,
		|	ТоварыВПроизводстве.Организация,
		|	ТоварыВПроизводстве.ГТД,
		|	ТоварыВПроизводстве.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГТДПартийТоваровКомпании.СкладКомпании КАК СкладКомпании,
		|	ГТДПартийТоваровКомпании.Номенклатура КАК Номенклатура,
		|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ГТДПартийТоваровКомпании.Партия КАК Партия,
		|	ГТДПартийТоваровКомпании.Организация КАК Организация,
		|	ГТДПартийТоваровКомпании.ГТД КАК ГТД,
		|	ВЫБОР
		|		КОГДА ГТДПартийТоваровКомпании.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|			ТОГДА ГТДПартийТоваровКомпании.Количество
		|		ИНАЧЕ -ГТДПартийТоваровКомпании.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ГТДПартийТоваровКомпании.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|			ТОГДА ГТДПартийТоваровКомпании.ВидДвижения
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	КОНЕЦ КАК ВидДвижения,
		|	ГТДПартийТоваровКомпании.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТ_ДвиженияПоГТДДоСвертки
		|ИЗ
		|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
		|ГДЕ
		|	ГТДПартийТоваровКомпании.Регистратор В(&ДокументыОснований)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДвиженияТоваровВПроизводстве.СкладКомпании,
		|	ВТ_ДвиженияТоваровВПроизводстве.Номенклатура,
		|	ВТ_ДвиженияТоваровВПроизводстве.ХарактеристикаНоменклатуры,
		|	ВТ_ДвиженияТоваровВПроизводстве.Партия,
		|	ВТ_ДвиженияТоваровВПроизводстве.Организация,
		|	ВТ_ДвиженияТоваровВПроизводстве.ГТД,
		|	ВТ_ДвиженияТоваровВПроизводстве.Количество,
		|	ВТ_ДвиженияТоваровВПроизводстве.ВидДвижения,
		|	ВТ_ДвиженияТоваровВПроизводстве.НомерСтроки
		|ИЗ
		|	ВТ_ДвиженияТоваровВПроизводстве КАК ВТ_ДвиженияТоваровВПроизводстве
		|ГДЕ
		|	ВТ_ДвиженияТоваровВПроизводстве.Количество <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ДвиженияПоГТДДоСвертки.СкладКомпании КАК СкладКомпании,
		|	ВТ_ДвиженияПоГТДДоСвертки.Номенклатура КАК Номенклатура,
		|	ВТ_ДвиженияПоГТДДоСвертки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВТ_ДвиженияПоГТДДоСвертки.Партия КАК Партия,
		|	ВТ_ДвиженияПоГТДДоСвертки.Организация КАК Организация,
		|	ВТ_ДвиженияПоГТДДоСвертки.ГТД КАК ГТД,
		|	СУММА(ВТ_ДвиженияПоГТДДоСвертки.Количество) КАК Количество,
		|	ВТ_ДвиженияПоГТДДоСвертки.ВидДвижения КАК ВидДвижения,
		|	МИНИМУМ(ВТ_ДвиженияПоГТДДоСвертки.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ ВТ_ДвиженияПоГТД
		|ИЗ
		|	ВТ_ДвиженияПоГТДДоСвертки КАК ВТ_ДвиженияПоГТДДоСвертки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДвиженияПоГТДДоСвертки.ХарактеристикаНоменклатуры,
		|	ВТ_ДвиженияПоГТДДоСвертки.Номенклатура,
		|	ВТ_ДвиженияПоГТДДоСвертки.Партия,
		|	ВТ_ДвиженияПоГТДДоСвертки.Организация,
		|	ВТ_ДвиженияПоГТДДоСвертки.СкладКомпании,
		|	ВТ_ДвиженияПоГТДДоСвертки.ГТД,
		|	ВТ_ДвиженияПоГТДДоСвертки.ВидДвижения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДвиженияПоГТД.СкладКомпании КАК СкладКомпании,
		|	ВТ_ДвиженияПоГТД.Номенклатура КАК Номенклатура,
		|	ВТ_ДвиженияПоГТД.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВТ_ДвиженияПоГТД.Партия КАК Партия,
		|	ВТ_ДвиженияПоГТД.Организация КАК Организация,
		|	ВТ_ДвиженияПоГТД.ГТД КАК ГТД,
		|	ВЫБОР
		|		КОГДА ВТ_ДвиженияПоГТД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА -ВТ_ДвиженияПоГТД.Количество
		|		ИНАЧЕ ВТ_ДвиженияПоГТД.Количество
		|	КОНЕЦ КАК Количество,
		|	ВТ_ДвиженияПоГТД.ВидДвижения КАК ВидДвижения
		|ИЗ
		|	ВТ_ДвиженияПоГТД КАК ВТ_ДвиженияПоГТД
		|ГДЕ
		|	ВТ_ДвиженияПоГТД.Количество <> 0
		|	И НЕ ВТ_ДвиженияПоГТД.ГТД = ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ДвиженияПоГТД.НомерСтроки";
	Запрос.УстановитьПараметр("ДокументыОснований", ДокументыОснований);
	Запрос.УстановитьПараметр("Основания", Основания);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДвиженияПродажДоКорректировки(Основания, РежимПроведения)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Продажи.Номенклатура КАК Номенклатура,
		|	Продажи.Автомобиль КАК Автомобиль,
		|	Продажи.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	Продажи.СкладКомпании КАК СкладКомпании,
		|	Продажи.ПодразделениеКомпании КАК ПодразделениеКомпании,
		|	Продажи.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	Продажи.Покупатель КАК Покупатель,
		|	Продажи.Поставщик КАК Поставщик,
		|	Продажи.Партия КАК Партия,
		|	Продажи.СтатусПартии КАК СтатусПартии,
		|	Продажи.Авторабота КАК Авторабота,
		|	Продажи.НормоЧас КАК НормоЧас,
		|	Продажи.ГТД КАК ГТД,
		|	Продажи.СтавкаНДС КАК СтавкаНДС,
		|	Продажи.ДокументПродажи КАК ДокументПродажи,
		|	СУММА(Продажи.Количество) КАК Количество,
		|	СУММА(Продажи.КоличествоНормочасов) КАК КоличествоНормочасов,
		|	СУММА(Продажи.Сумма) КАК Сумма,
		|	СУММА(Продажи.СуммаНДС) КАК СуммаНДС,
		|	СУММА(Продажи.ВыручкаБезНДС) КАК ВыручкаБезНДС,
		|	СУММА(Продажи.СуммаСкидки) КАК СуммаСкидки,
		|	СУММА(Продажи.ВыручкаДоПримененияСкидки) КАК ВыручкаДоПримененияСкидки,
		|	СУММА(Продажи.ВыручкаДоПримененияСкидкиБезНДС) КАК ВыручкаДоПримененияСкидкиБезНДС,
		|	СУММА(Продажи.Себестоимость) КАК Себестоимость,
		|	СУММА(Продажи.СуммаНДСВходящий) КАК СуммаНДСВходящий,
		|	СУММА(Продажи.СебестоимостьБезНДС) КАК СебестоимостьБезНДС,
		|	СУММА(Продажи.СуммаУпр) КАК СуммаУпр,
		|	СУММА(Продажи.СуммаНДСУпр) КАК СуммаНДСУпр,
		|	СУММА(Продажи.ВыручкаБезНДСУпр) КАК ВыручкаБезНДСУпр,
		|	СУММА(Продажи.СуммаСкидкиУпр) КАК СуммаСкидкиУпр,
		|	СУММА(Продажи.ВыручкаДоПримененияСкидкиУпр) КАК ВыручкаДоПримененияСкидкиУпр,
		|	СУММА(Продажи.ВыручкаДоПримененияСкидкиБезНДСУпр) КАК ВыручкаДоПримененияСкидкиБезНДСУпр,
		|	СУММА(Продажи.СебестоимостьУпр) КАК СебестоимостьУпр,
		|	СУММА(Продажи.СуммаНДСВходящийУпр) КАК СуммаНДСВходящийУпр,
		|	СУММА(Продажи.СебестоимостьБезНДСУпр) КАК СебестоимостьБезНДСУпр
		|ПОМЕСТИТЬ втПродажи
		|ИЗ
		|	РегистрНакопления.Продажи КАК Продажи
		|ГДЕ
		|	Продажи.Регистратор В(&СписокОснований)
		|
		|СГРУППИРОВАТЬ ПО
		|	Продажи.ДокументПродажи,
		|	Продажи.ПодразделениеКомпании,
		|	Продажи.ДоговорВзаиморасчетов,
		|	Продажи.Номенклатура,
		|	Продажи.СтавкаНДС,
		|	Продажи.ГТД,
		|	Продажи.Автомобиль,
		|	Продажи.ХарактеристикаНоменклатуры,
		|	Продажи.СкладКомпании,
		|	Продажи.Поставщик,
		|	Продажи.Покупатель,
		|	Продажи.Авторабота,
		|	Продажи.НормоЧас,
		|	Продажи.Партия,
		|	Продажи.СтатусПартии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПродажи.Номенклатура КАК Номенклатура,
		|	втПродажи.Автомобиль КАК Автомобиль,
		|	втПродажи.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	втПродажи.СкладКомпании КАК СкладКомпании,
		|	втПродажи.ПодразделениеКомпании КАК ПодразделениеКомпании,
		|	втПродажи.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
		|	втПродажи.Покупатель КАК Покупатель,
		|	втПродажи.Поставщик КАК Поставщик,
		|	втПродажи.Партия КАК Партия,
		|	втПродажи.СтатусПартии КАК СтатусПартии,
		|	втПродажи.Авторабота КАК Авторабота,
		|	втПродажи.НормоЧас КАК НормоЧас,
		|	втПродажи.ГТД КАК ГТД,
		|	втПродажи.СтавкаНДС КАК СтавкаНДС,
		|	втПродажи.ДокументПродажи КАК ДокументПродажи,
		|	втПродажи.Количество КАК Количество,
		|	втПродажи.КоличествоНормочасов КАК КоличествоНормочасов,
		|	втПродажи.Сумма КАК Сумма,
		|	втПродажи.СуммаНДС КАК СуммаНДС,
		|	втПродажи.ВыручкаБезНДС КАК ВыручкаБезНДС,
		|	втПродажи.СуммаСкидки КАК СуммаСкидки,
		|	втПродажи.ВыручкаДоПримененияСкидки КАК ВыручкаДоПримененияСкидки,
		|	втПродажи.ВыручкаДоПримененияСкидкиБезНДС КАК ВыручкаДоПримененияСкидкиБезНДС,
		|	втПродажи.Себестоимость КАК Себестоимость,
		|	втПродажи.СуммаНДСВходящий КАК СуммаНДСВходящий,
		|	втПродажи.СебестоимостьБезНДС КАК СебестоимостьБезНДС,
		|	втПродажи.СуммаУпр КАК СуммаУпр,
		|	втПродажи.СуммаНДСУпр КАК СуммаНДСУпр,
		|	втПродажи.ВыручкаБезНДСУпр КАК ВыручкаБезНДСУпр,
		|	втПродажи.СуммаСкидкиУпр КАК СуммаСкидкиУпр,
		|	втПродажи.ВыручкаДоПримененияСкидкиУпр КАК ВыручкаДоПримененияСкидкиУпр,
		|	втПродажи.ВыручкаДоПримененияСкидкиБезНДСУпр КАК ВыручкаДоПримененияСкидкиБезНДСУпр,
		|	втПродажи.СебестоимостьУпр КАК СебестоимостьУпр,
		|	втПродажи.СуммаНДСВходящийУпр КАК СуммаНДСВходящийУпр,
		|	втПродажи.СебестоимостьБезНДСУпр КАК СебестоимостьБезНДСУпр
		|ИЗ
		|	втПродажи КАК втПродажи
		|ГДЕ
		|	(втПродажи.Количество <> 0
		|			ИЛИ втПродажи.КоличествоНормочасов <> 0
		|			ИЛИ втПродажи.Сумма <> 0
		|			ИЛИ втПродажи.СуммаНДС <> 0
		|			ИЛИ втПродажи.ВыручкаБезНДС <> 0
		|			ИЛИ втПродажи.ВыручкаДоПримененияСкидки <> 0
		|			ИЛИ втПродажи.ВыручкаДоПримененияСкидкиБезНДС <> 0
		|			ИЛИ втПродажи.Себестоимость <> 0
		|			ИЛИ втПродажи.СуммаНДСВходящий <> 0
		|			ИЛИ втПродажи.СебестоимостьБезНДС <> 0
		|			ИЛИ втПродажи.СуммаУпр <> 0
		|			ИЛИ втПродажи.СуммаНДСУпр <> 0
		|			ИЛИ втПродажи.ВыручкаБезНДСУпр <> 0
		|			ИЛИ втПродажи.ВыручкаДоПримененияСкидкиУпр <> 0
		|			ИЛИ втПродажи.ВыручкаДоПримененияСкидкиБезНДСУпр <> 0
		|			ИЛИ втПродажи.СебестоимостьУпр <> 0
		|			ИЛИ втПродажи.СуммаНДСВходящийУпр <> 0
		|			ИЛИ втПродажи.СебестоимостьБезНДСУпр <> 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	втПродажи.Партия.МоментВремени";
	
	СтратегияСписанияПартийТоваровПоДатам = ПолучитьСтратегиюСписанияПоДатам(
		СкладКомпании,
		Организация,
		?(РежимПроведения = РежимПроведенияДокумента.Оперативный, Неопределено, Дата)
	);
	Если СтратегияСписанияПартийТоваровПоДатам = Перечисления.СтратегияСписанияПартийТоваровПоДатам.ЛИФО Тогда
		Запрос.Текст = Запрос.Текст + " УБЫВ";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокОснований", Основания);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует движения по регистру Партий товаров компании.
// Таблицу товаров получаем из текущего документа, иначе, при передаче параметра 
// ТаблицаТоваровДляДвижений берем из него.
//
// Параметры: 
//	ТаблицаТоваровДляДвижений - ТаблицаЗначений - таблица, содержащая разницу между движениями по регистру 
//								Партии товаров компании до корректировки и после корректировки.
//	СтарыеДвиженияПартий - 	ТаблицаЗначений - таблица, движений партий документов-оснований, где значения движений с
//							видом движения Приход взяты с обратным знаком
//
// Возвращаемое значение:
//	Стуртура:
//		* ВсеОК - Булево - Истина - все ОК, Ложь - чего-то не так.
//   	* ТаблицаНовыхДвижений - 	ТаблицаЗначений - таблица с новыми движениями по регистру Партии товаров компании 
//									после корректировки.
//
Функция ДвиженияПартийПослеКорректировки(ТаблицаТоваровДляДвижений = Неопределено, СтарыеДвиженияПартий)
	
	ВсеОК = Истина;
	СтруктураВозврата = Новый Структура("ВсеОК", ВсеОК);
	ШапкаДокумента = ПолучитьШапкуДокумента(Ссылка);
	
	// проверяем, присутствуют ли партии в табличной части
	ПартииУказаны = Ложь;
	Для Каждого СтрокаТовар Из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовар.Партия) Тогда
			ПартииУказаны = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	ДокументПродажи = Документы.КорректировкаРеализации.ПолучитьДокументПродажиКорректировкиРеализации(Ссылка);
	
	Если ДокументПродажи = Неопределено Тогда
		
		ДокументПродажи = Ссылка;
		
	КонецЕсли;
	
	// Получим права пользователя
	ОтрицательныеОстаткиРазрешены = (ПравоПользователя("РазрешитьОтрицательныеСкладскиеОстатки", "РеализацияТоваров")
		<> Перечисления.ВидыРазрешенныхОтрицательныхОстатков.Запрещены);
	
	ПартияТоваровОтрицательныхОстатков = Константы.ПартияТоваровОтрицательныхОстатков.Получить();
	
	// Получим таблицу товаров
	Если ТаблицаТоваровДляДвижений = Неопределено Тогда
		ТаблицаТовары = ПолучитьТаблицуТоваров();
		ТаблицаТовары = ПерезаполнитьСкладыТаблицыТоваров(ТаблицаТовары, СтарыеДвиженияПартий);
	Иначе
		ТаблицаТовары = ТаблицаТоваровДляДвижений;
	КонецЕсли;
	
	// Списываем партии
	ДеревоПартий = ПолучитьДеревоПартий(ТаблицаТовары, СтарыеДвиженияПартий);
	
	// Упорядочим по нормальному
	ТаблицаТовары.Сортировать("Номенклатура Возр, ХарактеристикаНоменклатуры Убыв" + ?(ПартииУказаны, ",Партия Убыв", ""));
	
	// Получим таблицу номенклатуры с ручным списанием характеристик
	ТаблицаРучныхХарактеристик = ОбработкаТабличнойЧастиТовары.ПолучитьНоменклатуруСРучнымСписаниемХарактеристик(Ссылка);
	
	ВыгружемыеКолонки = "ДокументПродажи, Количество, Номенклатура, Партия, Проект, СкладКомпании, СтавкаНДС, СтатусПартии, "
		+ "Сумма, СуммаБезНДС, СуммаБезНДСУпр, СуммаНДС, СуммаНДСУпр, СуммаУпр, ХарактеристикаНоменклатуры, ХозОперация, Организация";
	ТаблицаНовыхДвижений = РегистрыНакопления.ПартииТоваровКомпании.СоздатьНаборЗаписей().Выгрузить(, ВыгружемыеКолонки);
	
	Для Каждого СтрокаТовар Из ТаблицаТовары Цикл
		
		НадоСписать = Окр(СтрокаТовар.Количество, 3);
		// Получим строки таблицы партий с нашим товаром
		СтрокаПартийНоменклатуры = ДеревоПартий.Строки.Найти(СтрокаТовар.Номенклатура, "Номенклатура");
		ПоследнийСтатус = Перечисления.СтатусыПартий.ТоварКупленный;
		
		// Инициализируем переменные для расчета усредненной цены списанных партий
		ОбщееКоличество 	= 0;
		ОбщаяСумма 			= 0;
		ОбщаяСуммаНДС 		= 0;
		ОбщаяСуммаБезНДС 	= 0;
		ОбщаяСуммаУпр 		= 0;
		ОбщаяСуммаНДСУпр 	= 0;
		ОбщаяСуммаБезНДСУпр = 0;
		КоличествоОстаток 	= 0;
		КоличествоБезПартии	= 0;
		ЕстьПартииТоваров 	= Ложь;
		ПартияЗаполнена 	= ЗначениеЗаполнено(СтрокаТовар.Партия);
		КоличествоСписывается = СтрокаТовар.Количество;
		СтрокаВозврата 		= Неопределено;
		
		Если СтрокаПартийНоменклатуры <> Неопределено Тогда
			СтруктураОтбора = Новый Структура("Номенклатура");
			СтруктураОтбора.Номенклатура = СтрокаТовар.Номенклатура; 
			Если ЗначениеЗаполнено(СтрокаТовар.ХарактеристикаНоменклатуры)
				ИЛИ (ТаблицаРучныхХарактеристик <> Неопределено
				И ТаблицаРучныхХарактеристик.Найти(СтрокаТовар.Номенклатура, "Номенклатура") <> Неопределено) Тогда 
				СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаТовар.ХарактеристикаНоменклатуры);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТовар.СкладКомпании) Тогда
				СтруктураОтбора.Вставить("СкладКомпании", СтрокаТовар.СкладКомпании);
			КонецЕсли;
			
			Если ПартияЗаполнена Тогда
				СтруктураОтбора.Вставить("Партия", СтрокаТовар.Партия);
			Иначе
				КоличествоОстаток = СтрокаПартийНоменклатуры.Количество;
				КоличествоБезПартии = СтрокаПартийНоменклатуры.Количество;
			КонецЕсли;
			
			МассивНайденныхСтрок = СтрокаПартийНоменклатуры.Строки.НайтиСтроки(СтруктураОтбора);
			// Теперь идем по партиям товаров и списываем в соответствии с выбранной стратегией.
			Для Сч=0 По МассивНайденныхСтрок.ВГраница() Цикл
				ТекСтрока = МассивНайденныхСтрок[Сч];
				КоличествоОстаток = ТекСтрока.Количество;
				// Проверки на нулевую партию или партию отрицательных остатков
				Если ТекСтрока.Количество = NULL ИЛИ ТекСтрока.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				// Если указаны партии, то пропустим все партии не наши
				Если ПартииУказаны И ПартияЗаполнена И ТекСтрока.Партия <> СтрокаТовар.Партия Тогда
					Продолжить;
				КонецЕсли;
				
				ЕстьПартииТоваров = Истина; // если есть партия с которой производим списание, значит и цены будем брать из списаний
				
				Если ТекСтрока.Количество < 0 Тогда
					// Запомним удельные значения списания для отрицательной партии товаров
					ОбщееКоличество		= ОбщееКоличество     + ТекСтрока.Количество;
					ОбщаяСумма			= ОбщаяСумма          + Окр(ТекСтрока.Сумма, 2);
					ОбщаяСуммаНДС		= ОбщаяСуммаНДС       + Окр(ТекСтрока.СуммаНДС, 2);
					ОбщаяСуммаБезНДС	= ОбщаяСуммаБезНДС    + Окр(ТекСтрока.СуммаБезНДС, 2);
					ОбщаяСуммаУпр		= ОбщаяСуммаУпр       + Окр(ТекСтрока.СуммаУпр, 2);
					ОбщаяСуммаНДСУпр	= ОбщаяСуммаНДСУпр    + Окр(ТекСтрока.СуммаНДСУпр, 2);
					ОбщаяСуммаБезНДСУпр	= ОбщаяСуммаБезНДСУпр + Окр(ТекСтрока.СуммаБезНДСУпр, 2);
					Продолжить;
				КонецЕсли;
				
				НоваяЗапись = ТаблицаНовыхДвижений.Добавить(); 
				НоваяЗапись.Партия                     = ТекСтрока.Партия;
				НоваяЗапись.СтатусПартии               = ТекСтрока.СтатусПартии;
				ПоследнийСтатус						   = ТекСтрока.СтатусПартии;
				НоваяЗапись.СкладКомпании              = СтрокаТовар.СкладКомпании;
				НоваяЗапись.Номенклатура               = ТекСтрока.Номенклатура;
				НоваяЗапись.ХарактеристикаНоменклатуры = ТекСтрока.ХарактеристикаНоменклатуры;
				НоваяЗапись.ХозОперация				   = ХозОперация;
				НоваяЗапись.Организация = ТекСтрока.Организация;
				
				Попытка
					НоваяЗапись.Проект = ШапкаДокумента.Проект;
				Исключение
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Проведение по партиям. Нет реквизита ""Проект""'"),
						УровеньЖурналаРегистрации.Предупреждение,
						,
						ШапкаДокумента.Ссылка);
				КонецПопытки;
				Проект = НоваяЗапись.Проект;
				
				Попытка
					НоваяЗапись.ДокументПродажи = ДокументПродажи;
				Исключение
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Проведение по партиям. Нет реквизита ""Документ продажи""'"),
						УровеньЖурналаРегистрации.Предупреждение,
						,
						ШапкаДокумента.Ссылка);
				КонецПопытки;
				
				Если ТекСтрока.Количество > НадоСписать И ТекСтрока.Количество > 0 Тогда
					КоличествоСписания		= НадоСписать;
					СуммаСписания			= Окр(ТекСтрока.Сумма / ТекСтрока.Количество * НадоСписать, 2);
					СуммаНДССписания		= Окр(ТекСтрока.СуммаНДС / ТекСтрока.Количество * НадоСписать, 2);
					СуммаБезНДССписания		= СуммаСписания - СуммаНДССписания;
					СуммаУпрСписания		= Окр(ТекСтрока.СуммаУпр / ТекСтрока.Количество * НадоСписать, 2);
					СуммаНДСУпрСписания		= Окр(ТекСтрока.СуммаНДСУпр / ТекСтрока.Количество * НадоСписать, 2);
					СуммаБезНДСУпрСписания	= СуммаУпрСписания - СуммаНДСУпрСписания;
				Иначе
					КоличествоСписания		= ТекСтрока.Количество;
					СуммаСписания			= Окр(ТекСтрока.Сумма, 2);
					СуммаНДССписания		= Окр(ТекСтрока.СуммаНДС, 2);
					СуммаБезНДССписания		= Окр(ТекСтрока.СуммаБезНДС, 2);
					СуммаУпрСписания		= Окр(ТекСтрока.СуммаУпр, 2);
					СуммаНДСУпрСписания		= Окр(ТекСтрока.СуммаНДСУпр, 2);
					СуммаБезНДСУпрСписания	= Окр(ТекСтрока.СуммаБезНДСУпр, 2);
				КонецЕсли;
				
				НоваяЗапись.Количество		= КоличествоСписания;
				НоваяЗапись.Сумма			= СуммаСписания;
				НоваяЗапись.СуммаНДС		= СуммаНДССписания;
				НоваяЗапись.СуммаБезНДС		= СуммаБезНДССписания;
				НоваяЗапись.СуммаУпр		= СуммаУпрСписания;
				НоваяЗапись.СуммаНДСУпр		= СуммаНДСУпрСписания;
				НоваяЗапись.СуммаБезНДСУпр	= СуммаБезНДСУпрСписания;
				
				// Запомним удельные значения списания для отрицательной партии товаров
				ОбщееКоличество		= ОбщееКоличество + КоличествоСписания;
				ОбщаяСумма			= ОбщаяСумма + СуммаСписания;
				ОбщаяСуммаНДС		= ОбщаяСуммаНДС + СуммаНДССписания;
				ОбщаяСуммаБезНДС	= ОбщаяСуммаБезНДС + СуммаБезНДССписания;
				ОбщаяСуммаУпр		= ОбщаяСуммаУпр + СуммаУпрСписания;
				ОбщаяСуммаНДСУпр	= ОбщаяСуммаНДСУпр + СуммаНДСУпрСписания;
				ОбщаяСуммаБезНДСУпр	= ОбщаяСуммаБезНДСУпр + СуммаБезНДСУпрСписания;
							
				Если КоличествоСписания >= ТекСтрока.Количество Тогда
					СтрокаПартийНоменклатуры.Строки.Удалить(ТекСтрока);
				Иначе
					ТекСтрока.Количество		= ТекСтрока.Количество		- КоличествоСписания;
					ТекСтрока.Сумма				= ТекСтрока.Сумма			- СуммаСписания;
					ТекСтрока.СуммаНДС			= ТекСтрока.СуммаНДС		- СуммаНДССписания;
					ТекСтрока.СуммаБезНДС		= ТекСтрока.СуммаБезНДС		- СуммаБезНДССписания;
					ТекСтрока.СуммаУпр			= ТекСтрока.СуммаУпр		- СуммаУпрСписания;
					ТекСтрока.СуммаНДСУпр		= ТекСтрока.СуммаНДСУпр		- СуммаНДСУпрСписания;
					ТекСтрока.СуммаБезНДСУпр	= ТекСтрока.СуммаБезНДСУпр	- СуммаБезНДСУпрСписания;
				КонецЕсли;
				
				// Уменьшаем количество которое надо списать (или увеличиваем если это коррекция отрицательной партии).
				НадоСписать = НадоСписать - КоличествоСписания;
				Если НадоСписать <= 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			// Уменьшим ресурсы для остатка по номенклатуре
			Если ОбщееКоличество >= СтрокаПартийНоменклатуры.Количество Тогда
				ДеревоПартий.Строки.Удалить(СтрокаПартийНоменклатуры);
			Иначе
				СтрокаПартийНоменклатуры.Количество = СтрокаПартийНоменклатуры.Количество - ОбщееКоличество;
			КонецЕсли;
		КонецЕсли;
			
		// Если после списания по партиям осталось еще что-то, то либо образуем партию отрицательных остатков,
		// либо предупредим о не распределении по партиям.
		// Проверим чего осталось.
		Если НадоСписать <> 0 И ОтрицательныеОстаткиРазрешены Тогда
			НоваяЗапись = ТаблицаНовыхДвижений.Добавить(); 
			// Если партия указана непосредственно, то на нее. Иначе служебная
			Если ПартииУказаны И ПартияЗаполнена Тогда
				НоваяЗапись.Партия = СтрокаТовар.Партия;
				НоваяЗапись.СтатусПартии = ПоследнийСтатус;
			Иначе
				НоваяЗапись.Партия = ПартияТоваровОтрицательныхОстатков;
				НоваяЗапись.СтатусПартии = Перечисления.СтатусыПартий.ТоварКупленный;
			КонецЕсли;
				
			НоваяЗапись.СкладКомпании = СтрокаТовар.СкладКомпании;
			НоваяЗапись.Номенклатура = СтрокаТовар.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры = СтрокаТовар.ХарактеристикаНоменклатуры;
			НоваяЗапись.ХозОперация = ХозОперация;
			
			Попытка
				НоваяЗапись.Проект = ШапкаДокумента.Проект;
			Исключение
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Проведение по партиям. Нет реквизита ""Проект""'"),
					УровеньЖурналаРегистрации.Предупреждение,
					,
					ШапкаДокумента.Ссылка);
			КонецПопытки;
			
			Попытка
				НоваяЗапись.ДокументПродажи = ДокументПродажи;
			Исключение
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Проведение по партиям. Нет реквизита ""Документ продажи""'"),
					УровеньЖурналаРегистрации.Предупреждение,
					,
					ШапкаДокумента.Ссылка);
			КонецПопытки;
			
			НоваяЗапись.Количество = НадоСписать;
			
			// Теперь попробуем определиться с суммой списания
			Если ЕстьПартииТоваров Тогда
				Если ОбщееКоличество = 0 Тогда
					ЦенаПоследнейПартии 			= 0;
					УдельныйНДСПоследнейПартии 		= 0;
					ЦенаБезНДСПоследнейПартии 		= 0;
					ЦенаУпрПоследнейПартии 			= 0;
					УдельныйНДСУпрПоследнейПартии 	= 0;
					ЦенаБезНДСУпрПоследнейПартии 	= 0;
				Иначе
					ЦенаПоследнейПартии 			= ОбщаяСумма / ОбщееКоличество;
					УдельныйНДСПоследнейПартии 		= ОбщаяСуммаНДС / ОбщееКоличество;
					ЦенаБезНДСПоследнейПартии 		= ЦенаПоследнейПартии - УдельныйНДСПоследнейПартии;
					ЦенаУпрПоследнейПартии 			= ОбщаяСуммаУпр / ОбщееКоличество;
					УдельныйНДСУпрПоследнейПартии 	= ОбщаяСуммаНДСУпр / ОбщееКоличество;
					ЦенаБезНДСУпрПоследнейПартии 	= ЦенаУпрПоследнейПартии - УдельныйНДСУпрПоследнейПартии;
				КонецЕсли; 
			Иначе // В этом случае пробуем достать оценку из регистра сведений Цены по типу цен Нормативная цена
				ТипЦен = Справочники.ТипыЦен.НормативнаяЦена;
				// Получим цену в валюте управленческого учета компании
				ЦенаПоследнейПартии = ЦенообразованиеСервер.ПолучитьЦену(ТипЦен, СтрокаТовар.Номенклатура,
					ШапкаДокумента.МоментВремени, , Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить(), ,
					СтрокаТовар.ХарактеристикаНоменклатуры, , СтрокаТовар.СкладКомпании.ПодразделениеКомпании);
				ЦенаУпрПоследнейПартии = ЦенообразованиеСервер.ПолучитьЦену(ТипЦен, СтрокаТовар.Номенклатура,
					ШапкаДокумента.МоментВремени, , Константы.ВалютаУправленческогоУчетаКомпании.Получить(), ,
					СтрокаТовар.ХарактеристикаНоменклатуры, , СтрокаТовар.СкладКомпании.ПодразделениеКомпании);
				// Розничную оценку берем по типу цен основной тип цен отгрузки
				ТипЦен = Справочники.ТипыЦен.ОсновнойТипЦенПродажи;
				// Для расчета НДС сначала определимся со ставкой
				СтавкаНДС = СтрокаТовар.Номенклатура.СтавкаНДС;
				УдельныйНДСПоследнейПартии = (ЦенаПоследнейПартии * СтавкаНДС.Ставка) / 100;
				ЦенаБезНДСПоследнейПартии = ЦенаПоследнейПартии - УдельныйНДСПоследнейПартии;
				УдельныйНДСУпрПоследнейПартии = (ЦенаУпрПоследнейПартии * СтавкаНДС.Ставка) / 100;
				ЦенаБезНДСУпрПоследнейПартии = ЦенаУпрПоследнейПартии - УдельныйНДСУпрПоследнейПартии;
			КонецЕсли;
			
			НоваяЗапись.Сумма			= Окр(ЦенаПоследнейПартии * НадоСписать, 2);
			НоваяЗапись.СуммаНДС 		= Окр(УдельныйНДСПоследнейПартии * НадоСписать, 2);
			НоваяЗапись.СуммаБезНДС 	= НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
			НоваяЗапись.СуммаУпр 		= Окр(ЦенаУпрПоследнейПартии * НадоСписать, 2);
			НоваяЗапись.СуммаНДСУпр 	= Окр(УдельныйНДСУпрПоследнейПартии * НадоСписать, 2);
			НоваяЗапись.СуммаБезНДСУпр 	= НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
			
		ИначеЕсли НадоСписать <> 0 И КоличествоСписывается <> 0 Тогда
			ВсеОК = Ложь;
			ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаТовар.Номенклатура);
				
			Если ПартияЗаполнена Тогда  
				// Не хватило товара по партии. Ошибка
				Если НЕ ЗначениеЗаполнено(СтрокаТовар.ХарактеристикаНоменклатуры) Тогда
					ВывестиСообщение(НСтр("ru = '[%1] Товар ""%2"" не распределился по партии %3. Превышение %4, по организации ""%5""'"),
						ЭтотОбъект, , , Истина,
						ЗначениеКолонкиКода,
						СокрЛП(СтрокаТовар.Номенклатура),
						СокрЛП(СтрокаТовар.Партия),
						Формат(НадоСписать, "ЧДЦ=3; ЧН=0,00"),
						Организация
					);
				Иначе 
					ВывестиСообщение(НСтр("ru = '[%1] Товар ""%2"" с характеристикой ""%3"" не распределился по партии %4. Превышение %5, по организации ""%6""'"),
						ЭтотОбъект, , , Истина,
						ЗначениеКолонкиКода,
						СокрЛП(СтрокаТовар.Номенклатура),
						СокрЛП(СтрокаТовар.ХарактеристикаНоменклатуры),
						СокрЛП(СтрокаТовар.Партия),
						Формат(НадоСписать, "ЧДЦ=3; ЧН=0,00"),
						Организация
					);
				КонецЕсли; 
			Иначе
				// Не хватает товара на остатках
				Если НЕ ЗначениеЗаполнено(СтрокаТовар.ХарактеристикаНоменклатуры) Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = '[%1] Товар ""%2"". Остаток %3 %4 на складе %5. Списывается %6 %7. Превышение %8, по организации ""%9""'"),
						ЗначениеКолонкиКода, СокрЛП(СтрокаТовар.Номенклатура),
						Формат(КоличествоБезПартии, "ЧДЦ=3; ЧН=0,00"), СокрЛП(СтрокаТовар.Номенклатура.БазоваяЕдиницаИзмерения),
						СтрокаТовар.СкладКомпании,
						Формат(КоличествоСписывается, "ЧДЦ=3; ЧН=0,00"), СокрЛП(СтрокаТовар.Номенклатура.БазоваяЕдиницаИзмерения),
						Формат(НадоСписать, "ЧДЦ=3; ЧН=0,00"),
						Организация
					);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект.Ссылка);
				Иначе
					ТекстСообщения = СтрШаблон(НСтр("ru = '[%1] Товар ""%2"" с характеристикой ""%3"". Остаток %4 %5 на складе %6. Списывается %7 %8. Превышение %9, по организации ""%10""'"),
						СокрЛП(СтрокаТовар.ХарактеристикаНоменклатуры), Формат(КоличествоБезПартии, "ЧДЦ=3; ЧН=0,00"),
						СокрЛП(СтрокаТовар.Номенклатура.БазоваяЕдиницаИзмерения),
						СтрокаТовар.СкладКомпании,
						Формат(КоличествоСписывается, "ЧДЦ=3; ЧН=0,00"), СокрЛП(СтрокаТовар.Номенклатура.БазоваяЕдиницаИзмерения),
						Формат(НадоСписать, "ЧДЦ=3; ЧН=0,00"),
						Организация
					);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект.Ссылка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураВозврата.Вставить("ВсеОК", ВсеОК);
	СтруктураВозврата.Вставить("ТаблицаНовыхДвиженийПартий", ТаблицаНовыхДвижений);
	
	Возврат СтруктураВозврата;

КонецФункции // ДвиженияПартийПослеКорректировки()

Функция ПерезаполнитьСкладыТаблицыТоваров(ТаблицаТовары, СтарыеДвиженияПартий)
	
	НоваяТаблица = ТаблицаТовары.Скопировать();
	НоваяТаблица.Очистить();
	
	Для Каждого Строка Из ТаблицаТовары Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", Строка.Номенклатура);
		
		Если ЗначениеЗаполнено(Строка.ХарактеристикаНоменклатуры) Тогда
			ПараметрыОтбора.Вставить("ХарактеристикаНоменклатуры", Строка.ХарактеристикаНоменклатуры);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Партия) Тогда
			ПараметрыОтбора.Вставить("Партия", Строка.Партия);
		КонецЕсли;
		
		НайденныеСтроки = СтарыеДвиженияПартий.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			ВсегоКоличество = Строка.Количество;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				НоваяСтрока = НоваяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Номенклатура, ХарактеристикаНоменклатуры, Партия");
				НоваяСтрока.СкладКомпании = НайденнаяСтрока.СкладКомпании;
				НоваяСтрока.Количество = Мин(ВсегоКоличество, НайденнаяСтрока.Количество);
				
				ВсегоКоличество = ВсегоКоличество - НоваяСтрока.Количество;
				Если ВсегоКоличество = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ВсегоКоличество > 0 Тогда
				НоваяСтрока = НоваяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Номенклатура, ХарактеристикаНоменклатуры, Партия");
				НоваяСтрока.Количество = ВсегоКоличество;
				НоваяСтрока.СкладКомпании = Строка.СкладКомпании;
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока = НоваяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НоваяТаблица;
	
КонецФункции

// Формирует движения по регистру Партий товаров компании.
//
// Параметры: 
//		БудущиеДвижения - ТаблицаЗначений - таблица, содержащая разницу между движениями по регистру 
//											ГТД партий товаров до корректировки и после корректировки.
//		БратьТоварыИзДвижений - Булево - указывает на источник таблицы товаров. Истина - получаем товары из
//										переданного параметра БудущиеДвижения. Ложь - из текущего документа.
//		СтарыеДвиженияГТД - ТаблицаЗначений - таблица, движений ГТД документов-оснований, где значения движений с
//							видом движения Приход взяты с обратным знаком
//
// Возвращаемое значение:
//		Стуртура:
//			* ВсеОК - Булево - Истина - все ОК, Ложь - чего-то не так.
//   		* ТаблицаНовыхДвижений - Таблица значений - Таблица с новыми движениями по регистру Партии товаров компании 
//														после корректировки.
//
Функция ДвиженияГТДПослеКорректировки(БудущиеДвижения, БратьТоварыИзДвижений, СтарыеДвиженияГТД)

	ВсеОК = Истина;
	
	СтруктураВозврата = Новый Структура("ВсеОК", ВсеОК);
	
	// Получим права пользователя
	ОтрицательныеОстаткиРазрешены = (ПравоПользователя("РазрешитьОтрицательныеСкладскиеОстатки", "РеализацияТоваров")
		<> Перечисления.ВидыРазрешенныхОтрицательныхОстатков.Запрещены);
	
	// Списываем ГТД партий 
	ТаблицаПартий = БудущиеДвижения.Скопировать();
	ОстаткиГТДПартий = ПолучитьОстаткиГТДПартий(ТаблицаПартий, СтарыеДвиженияГТД);
	ТаблицаПартий.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Партия", "Количество");
	
	// Получим таблицу товаров
	Если БратьТоварыИзДвижений Тогда
		
		ТаблицаТовары = БудущиеДвижения;
		
	Иначе
		
		ТаблицаТовары = ПолучитьТаблицуТоваров();
		
	КонецЕсли;
	
	ТаблицаТовары.Сортировать("ГТД Убыв, Партия Убыв");
	
	ВыгружемыеКолонки = "ГТД, Количество, Номенклатура, Партия, СкладКомпании, ХарактеристикаНоменклатуры, ХозОперация, Организация";
	ТаблицаНовыхДвиженийГТД = РегистрыНакопления.ГТДПартийТоваровКомпании.СоздатьНаборЗаписей().Выгрузить(, ВыгружемыеКолонки);
	
	Для Каждого СтрокаТовар Из ТаблицаТовары Цикл
		
		ПартияЗаполнена = ЗначениеЗаполнено(СтрокаТовар.Партия);
		ГТДЗаполнена = ЗначениеЗаполнено(СтрокаТовар.ГТД);
		
		Если ПартияЗаполнена Тогда
			
			// Получим строки таблицы партий с нашим товаром
			СтруктураОтбора = Новый Структура("Номенклатура", СтрокаТовар.Номенклатура);
			Если ЗначениеЗаполнено(СтрокаТовар.ХарактеристикаНоменклатуры) Тогда
				
				СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаТовар.ХарактеристикаНоменклатуры);
				
			КонецЕсли;
			
			Если ПартияЗаполнена Тогда
				
				СтруктураОтбора.Вставить("Партия", СтрокаТовар.Партия);
				
			КонецЕсли;
			
			МассивНайденныхПартий = ТаблицаПартий.НайтиСтроки(СтруктураОтбора);
			
			Для СчПартий = 0 По МассивНайденныхПартий.ВГраница() Цикл
				// Идем по списанным партиям
				СтрокаПартия = МассивНайденныхПартий[СчПартий];
				СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаПартия.ХарактеристикаНоменклатуры);
				СтруктураОтбора.Вставить("Партия", СтрокаПартия.Партия);
				
				Если ГТДЗаполнена Тогда
					
					СтруктураОтбора.Вставить("ГТД", СтрокаТовар.ГТД);
					
				КонецЕсли;
				
				МассивНайденныхГТД = ОстаткиГТДПартий.НайтиСтроки(СтруктураОтбора);
				
				// Сформируем расход ГТД
				Для СчГТД = 0 По МассивНайденныхГТД.ВГраница() Цикл
					
					// Списываем ГТД партии
					СтрокаГТД 								= МассивНайденныхГТД[СчГТД];
					НоваяЗапись 							= ТаблицаНовыхДвиженийГТД.Добавить();
					НоваяЗапись.СкладКомпании 				= СтрокаГТД.СкладКомпании;
					НоваяЗапись.Номенклатура 				= СтрокаГТД.Номенклатура;
					НоваяЗапись.ХарактеристикаНоменклатуры 	= СтрокаГТД.ХарактеристикаНоменклатуры;
					НоваяЗапись.Партия 						= СтрокаГТД.Партия;
					НоваяЗапись.Организация 				= СтрокаГТД.Организация;
					НоваяЗапись.ГТД 						= СтрокаГТД.ГТД;
					НоваяЗапись.ХозОперация 				= ХозОперация;
					НоваяЗапись.Количество 					= Мин(СтрокаГТД.Количество, СтрокаТовар.Количество);
					
					СтрокаГТД.Количество = СтрокаГТД.Количество - НоваяЗапись.Количество;
					СтрокаПартия.Количество = СтрокаПартия.Количество - НоваяЗапись.Количество;
					
					СтрокаТовар.Количество = СтрокаТовар.Количество - НоваяЗапись.Количество;
					Если СтрокаГТД.Количество = 0 Тогда
						
						ОстаткиГТДПартий.Удалить(СтрокаГТД);
						
					КонецЕсли;
					
					Если СтрокаПартия.Количество = 0 И НЕ БратьТоварыИзДвижений Тогда
						
						Прервать;
						
					КонецЕсли;
					
					Если СтрокаТовар.Количество = 0 Тогда
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если СтрокаПартия.Количество = 0 И НЕ БратьТоварыИзДвижений Тогда
					
					ТаблицаПартий.Удалить(СтрокаПартия);
					
				КонецЕсли;
				
				Если СтрокаТовар.Количество = 0 Тогда
					
					Прервать;
					
				КонецЕсли;
				
				// Необходимо списать количество ГТД на Отсутсвующую партия, т.к по партии движения были
				Если МассивНайденныхГТД.Количество() = 0 И Не ПартияЗаполнена Тогда
					
					СтрокаТовар.Количество = СтрокаТовар.Количество - СтрокаПартия.Количество;
					ТаблицаПартий.Удалить(СтрокаПартия);
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			СтруктураОтбора = Новый Структура("Номенклатура", СтрокаТовар.Номенклатура);
			
			Если ЗначениеЗаполнено(СтрокаТовар.ХарактеристикаНоменклатуры) Тогда
				
				СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаТовар.ХарактеристикаНоменклатуры);
				
			КонецЕсли;
			
			МассивНайденныхГТД = ОстаткиГТДПартий.НайтиСтроки(СтруктураОтбора);
			
			// Сформируем расход ГТД
			Для СчГТД = 0 По МассивНайденныхГТД.ВГраница() Цикл
				
				// Списываем ГТД партии
				СтрокаГТД = МассивНайденныхГТД[СчГТД];
				ОтборПартий = Новый Структура("Номенклатура", СтрокаТовар.Номенклатура);
				
				Если ЗначениеЗаполнено(СтрокаТовар.ХарактеристикаНоменклатуры) Тогда
					
					ОтборПартий.Вставить("ХарактеристикаНоменклатуры", СтрокаТовар.ХарактеристикаНоменклатуры);
					
				КонецЕсли;
				
				ОтборПартий.Вставить("Партия", СтрокаГТД.Партия);
				
				МассивНайденныхПартий = ТаблицаПартий.НайтиСтроки(ОтборПартий);
				
				Если МассивНайденныхПартий.Количество() = 0 Тогда
					
					Продолжить;
					
				КонецЕсли;
				СтрокаПартия = МассивНайденныхПартий[0];
				
				НоваяЗапись 							= ТаблицаНовыхДвиженийГТД.Добавить();
				НоваяЗапись.СкладКомпании 				= СтрокаГТД.СкладКомпании;
				НоваяЗапись.Номенклатура 				= СтрокаГТД.Номенклатура;
				НоваяЗапись.ХарактеристикаНоменклатуры 	= СтрокаГТД.ХарактеристикаНоменклатуры;
				НоваяЗапись.Партия 						= СтрокаГТД.Партия;
				НоваяЗапись.Организация 				= СтрокаГТД.Организация;
				НоваяЗапись.ГТД 						= СтрокаГТД.ГТД;
				НоваяЗапись.ХозОперация 				= ХозОперация;
				НоваяЗапись.Количество 					= Мин(СтрокаГТД.Количество, СтрокаТовар.Количество);
				
				СтрокаГТД.Количество = СтрокаГТД.Количество - НоваяЗапись.Количество;
				
				// Списываем из таблицы партий
				СтрокаТовар.Количество = СтрокаТовар.Количество - НоваяЗапись.Количество;
				
				Если СтрокаГТД.Количество = 0 Тогда
					
					ОстаткиГТДПартий.Удалить(СтрокаГТД);
					
				КонецЕсли;
				
				СтрокаПартия.Количество = СтрокаПартия.Количество - НоваяЗапись.Количество;
				
				Если СтрокаПартия.Количество = 0 И НЕ БратьТоварыИзДвижений Тогда
					
					ТаблицаПартий.Удалить(СтрокаПартия);
					
				КонецЕсли;
				
				Если СтрокаТовар.Количество = 0 Тогда
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Если еще остались ГТД для списания, то возможно уходим в минус
		// Не хватает товара на остатках
		Если СтрокаТовар.Количество > 0 Тогда
			
			ЗначениеКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаТовар.Номенклатура);
			
			Если ГТДЗаполнена Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаТовар.ХарактеристикаНоменклатуры) Тогда
					
					ВывестиСообщение(НСтр("ru = '[%1] Товар %2 не распределился по ГТД <%3> .'"), ЭтотОбъект,,, Истина,
						ЗначениеКолонкиКода,
						СокрЛП(СтрокаТовар.Номенклатура),
						СтрокаТовар.ГТД);
					
				Иначе
					
					ВывестиСообщение(НСтр("ru = '[%1] Товар %2 с характеристикой %3 не распределился по ГТД <%4> .'"), ЭтотОбъект,,, Истина,
						ЗначениеКолонкиКода,
						СокрЛП(СтрокаТовар.Номенклатура),
						СокрЛП(СтрокаТовар.ХарактеристикаНоменклатуры),
						СтрокаТовар.ГТД);
					
				КонецЕсли;
				
				Если НЕ ОтрицательныеОстаткиРазрешены Тогда
					
					ВсеОК = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураВозврата.Вставить("ВсеОК", ВсеОК);
	СтруктураВозврата.Вставить("ТаблицаНовыхДвиженийГТД", ТаблицаНовыхДвиженийГТД);
	
	Возврат СтруктураВозврата;

КонецФункции

Функция ДвиженияПродажПослеКорректировки(РежимПроведения, НовыеДвиженияПартий, НовыеДвиженияГТД, СтарыеДвиженияПродаж)

	ВсеОК = Истина;
	ЦехОснования = СкладКомпании;
	ЭтоКорректировкаПоЗаказНаряду = Ложь;
	ЕстьАвтомобиль = Ложь;
	АвтомобильЗН = Неопределено;
	
	// Получим цех основания, если основанием является Заказ-наряд.
	ДокОснование = ДокументОснование;
	
	Пока Истина Цикл
		
		Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ЗаказНаряд") Тогда 
			
			ДанныеЗаказНаряда = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокОснование, "СводныйРемонтныйЗаказ, Цех");
			ЦехОснования = ДанныеЗаказНаряда.Цех;
			АвтомобильЗН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаказНаряда.СводныйРемонтныйЗаказ, "Автомобиль");
			ЭтоКорректировкаПоЗаказНаряду = Истина;
			ЕстьАвтомобиль = Истина;
			Прервать;
			
		КонецЕсли;
		
		Если ТипЗнч(ДокОснование) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			Прервать;
			
		КонецЕсли;
		
		ДокОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОснование, "ДокументОснование");
		
	КонецЦикла;

	СтруктураВозврата = Новый Структура("ВсеОК", ВсеОК);
	
	ТаблицаНовыхДвиженийПродаж = РегистрыНакопления.Продажи.СоздатьНаборЗаписей().Выгрузить();  

	// получаем товарную таблицу
	ТаблицаТовары = ПолучитьТаблицуПродажиТоваров();
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КурсРегл   = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(ВалютаРегл, Дата);
	ВалютаУпр  = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	КурсУпр = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "КурсВалютыУпр");
	
	Если НЕ ЗначениеЗаполнено(КурсУпр) Тогда
		
		КурсУпр = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалюты(ВалютаУпр, Дата);
		
	КонецЕсли;
	
	// получаем таблицу партий для расчета себестоимости
	ТаблицаПартий        = НовыеДвиженияПартий.Скопировать();
	ТаблицаГТД           = НовыеДвиженияГТД;
	
	КэшСебестоимостиПриКомиссии = Новый ТаблицаЗначений;

	// свернем таблицу движений
	ЕстьПартия         = Истина;
	ЕстьГТДПартий      = Истина;
	ЕстьГТД            = Истина;
	ЕстьГТДКомиссия    = Ложь;
	ЕстьСтавкаНДС      = Истина;
	ЕстьГТДТоваров     = Истина;
	Комиссия           = Ложь;
	АвтомобильВТаблице = Ложь;
	ПартииУказаны      = Истина;
	Сторно             = Ложь;
	Покупатель         = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Контрагент");
	Пользователь       = АвторизованныйПользователь();
	ДокументОснованиеОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка.ДокументОснование, "ДокументОснование");
	
	ДокументПродажи = Документы.КорректировкаРеализации.ПолучитьДокументПродажиКорректировкиРеализации(Ссылка);
	
	Если ДокументПродажи = Неопределено Тогда
		
		ДокументПродажи = Ссылка;
		
	КонецЕсли;
	
	// надо закэшировать контрагента и договор
	КэшКонтрагент = Новый Соответствие();
	Для Каждого СтрокаПартия Из ТаблицаПартий Цикл
		Если КэшКонтрагент[СтрокаПартия.Партия] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 Контрагент ИЗ Документ."+СтрокаПартия.Партия.Метаданные().Имя+" ГДЕ Ссылка=&Ссылка");
		Запрос.УстановитьПараметр("Ссылка", СтрокаПартия.Партия);
		Попытка
			РезультатКэш = Запрос.Выполнить();
			Если НЕ РезультатКэш.Пустой() Тогда
				КэшКонтрагент.Вставить(СтрокаПартия.Партия, РезультатКэш.Выгрузить().Получить(0).Контрагент);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	// Получим порядок проверки себестоимости для Организации проводимого документа
	ПорядокПроверкиСебестоимостиТовараПриПродаже = ПолучитьЗначениеУчетнойПолитики("ПорядокПроверкиСебестоимостиТовараПриПродаже", Организация, Дата);
	
	КонтролироватьСебестоимость = ПолучитьЗначениеПараметраСтруктуры(
		ДополнительныеСвойства, 
		"ПроверкаПродажиНижеСебестоимости", 
		ПорядокПроверкиСебестоимостиТовараПриПродаже <> Перечисления.ПорядокПроверкиСебестоимостиПриПродаже.НеКонтролировать И ПравоПользователя("ЗапретитьПродажуНижеСебестоимости", "КорректировкаРеализации")
	);
	
	МинимальныеНаценки = Неопределено;
	Если КонтролироватьСебестоимость Тогда
		МинимальныеНаценки = Новый Соответствие;
	КонецЕсли;
	
	СтруктураОтбораСебестоимостьКомиссии = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Партия");
	// получим таблицу номенклатуры с ручным списанием характеристик
	ТаблицаРучныхХарактеристик = ОбработкаТабличнойЧастиТовары.ПолучитьНоменклатуруСРучнымСписаниемХарактеристик(Ссылка);
	
	ИмяКолонкиКода = УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах().Имя;
	
	СписокСтавокНДС  = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаТовары.ВыгрузитьКолонку("СтавкаНДС"));
	СтавкиНДС        = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокСтавокНДС, "Ставка");
	
	ТаблицаМинимальныхНаценок = ТаблицаМинимальныхНаценок(РежимПроведения, Пользователь, ТаблицаТовары);
	
	Если ЕстьАвтомобиль Тогда
		ТаблицаТовары.ЗаполнитьЗначения(АвтомобильЗН, "Автомобиль");
	КонецЕсли;
	
	СистемаНалогообложения = УчетныеПолитикиСервер.Значение(
		ПланыВидовХарактеристик.УчетныеПолитики.СистемаНалогообложения,
		Дата,
		Организация
	);
	
	СтратегияСписанияПартийТоваровПоДатам = ПолучитьСтратегиюСписанияПоДатам(
		СкладКомпании,
		Организация,
		?(РежимПроведения = РежимПроведенияДокумента.Оперативный, Неопределено, Дата)
	);
	Если СтратегияСписанияПартийТоваровПоДатам = Перечисления.СтратегияСписанияПартийТоваровПоДатам.ЛИФО Тогда
		ТаблицаПартий.Сортировать("Партия Возр");
	Иначе
		ТаблицаПартий.Сортировать("Партия");
	КонецЕсли;
	
	Для Каждого СтрокаТовар Из ТаблицаТовары Цикл
		
		ЭтоАвторабота = (ТипЗнч(СтрокаТовар.Номенклатура) = Тип("СправочникСсылка.Автоработы"));
		НоменклатураАвтоработы = СтрокаТовар.Номенклатура;
		
		Если ЭтоАвторабота Тогда
		
			 НоменклатураАвтоработы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовар.Номенклатура, "Номенклатура");
		
		КонецЕсли;
		
		КоличествоДляСумм     = ?(СтрокаТовар.Количество=0, 1, СтрокаТовар.Количество);
		СуммаПродажи          = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовар.Сумма, ВалютаДокумента, КурсДокумента, ВалютаРегл, КурсРегл),2);
		ЦенаПродажи           = СуммаПродажи/КоличествоДляСумм;
		СуммаПродажиУпр       = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовар.Сумма, ВалютаДокумента,КурсДокумента,ВалютаУпр,КурсУпр),2);
		ЦенаПродажиУпр        = СуммаПродажиУпр/КоличествоДляСумм;
		СуммаПродажиСкидки    = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовар.СуммаСкидки,ВалютаДокумента,КурсДокумента,ВалютаРегл,КурсРегл),2);
		ЦенаПродажиСкидки     = СуммаПродажиСкидки/КоличествоДляСумм;
		СуммаПродажиНДС       = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовар.СуммаНДС,ВалютаДокумента,КурсДокумента,ВалютаРегл,КурсРегл),2);
		ЦенаПродажиНДС        = СуммаПродажиНДС/КоличествоДляСумм;
		СуммаПродажиНДСУпр    = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовар.СуммаНДС,ВалютаДокумента,КурсДокумента,ВалютаУпр,КурсУпр),2);
		ЦенаПродажиНДСУпр     = СуммаПродажиНДСУпр/КоличествоДляСумм;
		СуммаПродажиСкидкиУпр = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовар.СуммаСкидки,ВалютаДокумента,КурсДокумента,ВалютаУпр,КурсУпр),2);
		
		ЦенаПродажиСкидкиУпр  = СуммаПродажиСкидкиУпр/КоличествоДляСумм;
		
		СуммаПродажиБезНДС    = СуммаПродажи - СуммаПродажиНДС;
		ЦенаПродажиБезНДС     = ЦенаПродажи - ЦенаПродажиНДС;
		СуммаПродажиБезНДСУпр = СуммаПродажиУпр - СуммаПродажиНДСУпр;
		ЦенаПродажиБезНДСУпр  = ЦенаПродажиУпр - ЦенаПродажиНДСУпр;
		СуммаПродажиСНДСИтого = СуммаПродажи;
		СуммаПродажиСНДСУпрИтого = СуммаПродажиУпр;
		
		СтавкаНДС = СтавкиНДС.Получить(СтрокаТовар.СтавкаНДС);              
		СтавкаНДС = ?(СтавкаНДС = Неопределено, 0, СтавкаНДС);
		
		СуммаПродажиИтого                 = 0;
		СуммаПродажиУпрИтого              = 0;
		СуммаПродажиСкидкиИтого           = 0;
		СуммаПродажиНДСИтого              = 0;
		СуммаПродажиНДСУпрИтого           = 0;
		СуммаПродажиСкидкиУпрИтого        = 0;
		СебестоимостьПартийБезНДСИтого    = 0;
		СебестоимостьПартийБезНДСУпрИтого = 0;
		СебестоимостьПартийИтого          = 0;
		СебестоимостьПартийУпрИтого       = 0;
		
		Если ЭтоАвторабота Тогда
			СтруктураОтбора = Новый Структура("Номенклатура, Авторабота", НоменклатураАвтоработы, СтрокаТовар.Номенклатура);
		Иначе
			СтруктураОтбора = Новый Структура("Номенклатура", СтрокаТовар.Номенклатура);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТовар.ХарактеристикаНоменклатуры)
			ИЛИ (ТаблицаРучныхХарактеристик <> Неопределено
			И ТаблицаРучныхХарактеристик.Найти(СтрокаТовар.Номенклатура,"Номенклатура") <> Неопределено) Тогда
			
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаТовар.ХарактеристикаНоменклатуры);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТовар.Партия) Тогда
			СтруктураОтбора.Вставить("Партия", СтрокаТовар.Партия);
		КонецЕсли;
		
		Если ЭтоКорректировкаПоЗаказНаряду И НЕ ЭтоАвторабота Тогда
			
			СтруктураОтбора.Вставить("СкладКомпании", ЦехОснования);
			
			Если ТаблицаПартий.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
				СтруктураОтбора.Удалить("СкладКомпании");
			КонецЕсли;
			
		КонецЕсли;
		
		// Если сумма < 0, то это возврат товара. Значит списываем из таблицы Продаж.
		Если КоличествоДляСумм < 0 Тогда
			
			Если ЕстьГТДТоваров И ЕстьГТДПартий И ЗначениеЗаполнено(СтрокаТовар.ГТД) Тогда
				СтруктураОтбора.Вставить("ГТД", СтрокаТовар.ГТД);
			КонецЕсли; 
			
			СуммаРазница          = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовар.Сумма, ВалютаДокумента, Дата, ВалютаРегл, Дата);
			СуммаРазницаНДС       = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовар.СуммаНДСРазница,ВалютаДокумента,Дата,ВалютаРегл,Дата);
			СуммаНаЕд             = Окр(?(СтрокаТовар.КоличествоДляЦены=0,0,РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовар.СуммаВсегоДляЦены,ВалютаДокумента,Дата,ВалютаРегл,Дата)/СтрокаТовар.КоличествоДляЦены),2);
			СуммаНДСНаЕд          = Окр(?(СтрокаТовар.КоличествоДляЦены=0,0,РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовар.СуммаНДС,ВалютаДокумента,Дата,ВалютаРегл,Дата)/СтрокаТовар.КоличествоДляЦены),2);
			НадоСписатьКоличество = -КоличествоДляСумм;
			
			МассивСтрокПродаж = СтарыеДвиженияПродаж.НайтиСтроки(СтруктураОтбора);
			Для Каждого стрПродаж Из МассивСтрокПродаж Цикл
				Если НадоСписатьКоличество = 0 Тогда Прервать; КонецЕсли;
				
				КоличествоСписываем = Мин(НадоСписатьКоличество,стрПродаж.Количество);
				Если КоличествоСписываем = стрПродаж.Количество Тогда
					СуммаСписываем    = -стрПродаж.Сумма;
					СуммаНДССписываем = -стрПродаж.СуммаНДС;
					СуммаУпрСписываем = -стрПродаж.СуммаУпр;
					СуммаНДСУпрСписываем = -стрПродаж.СуммаНДСУпр;
					СуммаСкидкиСписываем       = -стрПродаж.СуммаСкидки;
					СуммаСкидкиУпрСписываем    = -стрПродаж.СуммаСкидкиУпр;
					
					СебестоимостьУпрСписываем = -стрПродаж.СебестоимостьУпр;
					СебестоимостьСписываем    = -стрПродаж.Себестоимость;
					СуммаНДСВходящийСписываем = -стрПродаж.СуммаНДСВходящий;
					СуммаНДСВходящийУпрСписываем = -стрПродаж.СуммаНДСВходящийУпр;
				Иначе
					СуммаСписываем    = -стрПродаж.Сумма/стрПродаж.Количество*КоличествоСписываем;
					СуммаНДССписываем = -стрПродаж.СуммаНДС/стрПродаж.Количество*КоличествоСписываем;
					СуммаУпрСписываем = -стрПродаж.СуммаУпр/стрПродаж.Количество*КоличествоСписываем;
					СуммаНДСУпрСписываем = -стрПродаж.СуммаНДСУпр/стрПродаж.Количество*КоличествоСписываем;
					СуммаСкидкиСписываем       = -стрПродаж.СуммаСкидки / стрПродаж.Количество * КоличествоСписываем;
					СуммаСкидкиУпрСписываем    = -стрПродаж.СуммаСкидкиУпр / стрПродаж.Количество * КоличествоСписываем;
					
					СебестоимостьУпрСписываем = -стрПродаж.СебестоимостьУпр/стрПродаж.Количество*КоличествоСписываем;
					СебестоимостьСписываем    = -стрПродаж.Себестоимость/стрПродаж.Количество*КоличествоСписываем;
					СуммаНДСВходящийСписываем = -стрПродаж.СуммаНДСВходящий/стрПродаж.Количество*КоличествоСписываем;
					СуммаНДСВходящийУпрСписываем = -стрПродаж.СуммаНДСВходящийУпр/стрПродаж.Количество*КоличествоСписываем;
				КонецЕсли;
				
				НоваяЗапись = ТаблицаНовыхДвиженийПродаж.Добавить();
				НоваяЗапись.Период                     = Дата;
				НоваяЗапись.Регистратор                = Ссылка;
				НоваяЗапись.ХозОперация                = ХозОперация;
				НоваяЗапись.ПодразделениеКомпании      = стрПродаж.ПодразделениеКомпании;
				НоваяЗапись.Покупатель                 = стрПродаж.Покупатель;
				НоваяЗапись.ДоговорВзаиморасчетов      = стрПродаж.ДоговорВзаиморасчетов;
				НоваяЗапись.ДокументПродажи            = стрПродаж.ДокументПродажи;
				НоваяЗапись.Автомобиль                 = стрПродаж.Автомобиль;
				НоваяЗапись.Номенклатура = стрПродаж.Номенклатура;
				
				Если ЭтоАвторабота Тогда
					НоваяЗапись.Авторабота = стрПродаж.Авторабота;
				Иначе
					НоваяЗапись.ХарактеристикаНоменклатуры = стрПродаж.ХарактеристикаНоменклатуры;
				КонецЕсли;
				
				НоваяЗапись.СтатусПартии               = стрПродаж.СтатусПартии;
				НоваяЗапись.СкладКомпании              = стрПродаж.СкладКомпании;
				НоваяЗапись.Партия                     = стрПродаж.Партия;
				НоваяЗапись.ГТД                        = стрПродаж.ГТД;
				НоваяЗапись.Поставщик                  = стрПродаж.Поставщик;
				НоваяЗапись.СтавкаНДС                  = стрПродаж.СтавкаНДС;
				НоваяЗапись.Количество                 = -КоличествоСписываем;
				Если ЭтоАвторабота Тогда
					НоваяЗапись.НормоЧас			   = стрПродаж.НормоЧас;
					НоваяЗапись.КоличествоНормочасов   = -стрПродаж.КоличествоНормочасов;
				КонецЕсли;
				НоваяЗапись.СуммаСкидки                = СуммаСкидкиСписываем;
				НоваяЗапись.СуммаСкидкиУпр             = СуммаСкидкиУпрСписываем;
				
				НоваяЗапись.СебестоимостьУпр = СебестоимостьУпрСписываем;
				НоваяЗапись.Себестоимость    = СебестоимостьСписываем;
				НоваяЗапись.СуммаНДСВходящий = СуммаНДСВходящийСписываем;
				НоваяЗапись.СуммаНДСВходящийУпр = СуммаНДСВходящийУпрСписываем;
				НоваяЗапись.СебестоимостьБезНДС = НоваяЗапись.Себестоимость - НоваяЗапись.СуммаНДСВходящий;
				НоваяЗапись.СебестоимостьБезНДСУпр = НоваяЗапись.СебестоимостьУпр - НоваяЗапись.СуммаНДСВходящийУпр;
				
				НоваяЗапись.Сумма            = СуммаСписываем;
				НоваяЗапись.СуммаНДС         = СуммаНДССписываем;
				НоваяЗапись.СуммаУпр         = СуммаУпрСписываем;
				НоваяЗапись.СуммаНДСУпр      = СуммаНДСУпрСписываем;
				
				НоваяЗапись.ВыручкаБезНДС                      = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
				НоваяЗапись.ВыручкаБезНДСУпр                   = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
				НоваяЗапись.ВыручкаДоПримененияСкидки          = НоваяЗапись.Сумма + НоваяЗапись.СуммаСкидки;
				НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДС    = НоваяЗапись.Сумма + НоваяЗапись.СуммаСкидки - НоваяЗапись.СуммаНДС - Окр(НоваяЗапись.СуммаСкидки * СтавкаНДС / (100 + СтавкаНДС), 2);
				НоваяЗапись.ВыручкаДоПримененияСкидкиУпр       = НоваяЗапись.СуммаУпр + НоваяЗапись.СуммаСкидкиУпр;
				НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДСУпр = НоваяЗапись.СуммаУпр + НоваяЗапись.СуммаСкидкиУпр - НоваяЗапись.СуммаНДСУпр - Окр(НоваяЗапись.СуммаСкидкиУпр * СтавкаНДС / (100 + СтавкаНДС), 2);
				
				НадоСписатьКоличество = НадоСписатьКоличество - КоличествоСписываем;
				СуммаРазница          = СуммаРазница - СуммаСписываем;
				СуммаРазницаНДС       = СуммаРазницаНДС - СуммаНДССписываем;
				
				стрПродаж.Количество = стрПродаж.Количество - КоличествоСписываем;
				Если стрПродаж.Количество = 0 Тогда
					СтарыеДвиженияПродаж.Удалить(стрПродаж);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Если НЕ ЭтоАвторабота Тогда
				МассивНайденныхПартий = ТаблицаПартий.НайтиСтроки(СтруктураОтбора);
			КонецЕсли;
			
			Если НЕ ЭтоАвторабота И МассивНайденныхПартий.Количество() > 0 Тогда
				
				НоваяЗапись = Неопределено;
				
				Для Каждого СтрокаПартий Из МассивНайденныхПартий Цикл
					
					ТоварПринятыйНаКомиссию = Ложь;
					
					// если указаны партии, то пропустим все партии не наши
					Если ПартииУказаны И ЗначениеЗаполнено(СтрокаТовар.Партия) И СтрокаПартий.Партия <> СтрокаТовар.Партия Тогда
						Продолжить;
					КонецЕсли;
					
					СебестоимостьРавнаПродаже = Ложь;
					Попытка
						Если СтрокаПартий.СтатусПартии = Перечисления.СтатусыПартий.ТоварПринятыйКомиссия И (НЕ СтрокаПартий.Партия.ДоговорВзаиморасчетов.КомиссияОтчетНаОснованииПродаж) Тогда
							СебестоимостьРавнаПродаже = Истина;
							ТоварПринятыйНаКомиссию = Истина;
						КонецЕсли;
					Исключение
						СебестоимостьРавнаПродаже = Ложь;
					КонецПопытки;
					
					СтруктураОтбора = Новый Структура(
						"Номенклатура, ХарактеристикаНоменклатуры, Партия",
						СтрокаПартий.Номенклатура, СтрокаПартий.ХарактеристикаНоменклатуры, СтрокаПартий.Партия
					);
					
					Если АвтомобильВТаблице Тогда
						СтруктураОтбора.Вставить("Автомобиль", СтрокаПартий.Автомобиль);
					КонецЕсли;
					
					Если ЕстьГТДТоваров И ЗначениеЗаполнено(СтрокаТовар.ГТД) Тогда
						СтруктураОтбора.Вставить("ГТД", СтрокаТовар.ГТД);
					ИначеЕсли (НЕ ЕстьГТДТоваров) И ЕстьГТДПартий И ЗначениеЗаполнено(СтрокаПартий.ГТД) Тогда
						СтруктураОтбора.Вставить("ГТД", СтрокаПартий.ГТД);
					КонецЕсли; 
					
					МассивНайденныхГТД = ТаблицаГТД.НайтиСтроки(СтруктураОтбора);
					БезГТД = МассивНайденныхГТД.Количество() = 0;
					Для Каждого СтрокаГТД Из МассивНайденныхГТД Цикл
						
						КоличествоПродажи = Мин(СтрокаТовар.Количество,СтрокаПартий.Количество,СтрокаГТД.Количество);
						
						Сумма             = Окр(ЦенаПродажи*КоличествоПродажи,             2);
						СуммаУпр          = Окр(ЦенаПродажиУпр*КоличествоПродажи,          2);
						СуммаБезНДС       = Окр(ЦенаПродажиБезНДС*КоличествоПродажи,       2);
						СуммаБезНДСУпр    = Окр(ЦенаПродажиБезНДСУпр*КоличествоПродажи,    2);
						
						// При комиссии с себестоимостью не так все просто
						СебестоимостьУпр    = 0;
						Себестоимость       = 0;
						СуммаНДСВходящий    = 0;
						СуммаНДСВходящийУпр = 0;
						СебестоимостьБезНДС = 0;
						СебестоимостьБезНДСУпр = 0;
						
						Если СтрокаПартий.Количество > КоличествоПродажи Тогда
							// при выборочной партии списано больше чем в строке
							КоличествоДляСумм   = ?(СтрокаПартий.Количество=0, 1, СтрокаПартий.Количество);
							Себестоимость       = Окр(СтрокаПартий.Сумма/КоличествоДляСумм*КоличествоПродажи, 2);
							СебестоимостьУпр    = Окр(СтрокаПартий.СуммаУпр/КоличествоДляСумм*КоличествоПродажи, 2);
							СуммаНДСВходящий    = Окр(СтрокаПартий.СуммаНДС/КоличествоДляСумм*КоличествоПродажи, 2);
							СуммаНДСВходящийУпр = Окр(СтрокаПартий.СуммаНДСУпр/КоличествоДляСумм*КоличествоПродажи, 2);
							
							СтрокаПартий.Сумма       = СтрокаПартий.Сумма - Себестоимость;
							СтрокаПартий.СуммаУпр    = СтрокаПартий.СуммаУпр - СебестоимостьУпр;
							СтрокаПартий.СуммаНДС    = СтрокаПартий.СуммаНДС - СуммаНДСВходящий;
							СтрокаПартий.СуммаНДСУпр = СтрокаПартий.СуммаНДСУпр - СуммаНДСВходящийУпр;
						Иначе
							СебестоимостьУпр    = СтрокаПартий.СуммаУпр;
							Себестоимость       = СтрокаПартий.Сумма;
							СуммаНДСВходящий    = СтрокаПартий.СуммаНДС;
							СуммаНДСВходящийУпр = СтрокаПартий.СуммаНДСУпр;
						КонецЕсли;
						
						СебестоимостьБезНДС    = Себестоимость - СуммаНДСВходящий;
						СебестоимостьБезНДСУпр = СебестоимостьУпр - СуммаНДСВходящийУпр;
						
						Если ПорядокПроверкиСебестоимостиТовараПриПродаже = Перечисления.ПорядокПроверкиСебестоимостиПриПродаже.ПоКаждойПартииВОтдельности
							И КонтролироватьСебестоимость И НЕ ТоварПринятыйНаКомиссию И СтрокаТовар.Количество>0 Тогда
							Показатели = Новый Структура;
							Показатели.Вставить("СебестоимостьБезНДС",    СебестоимостьБезНДС);
							Показатели.Вставить("СебестоимостьБезНДСУпр", СебестоимостьБезНДСУпр);
							Показатели.Вставить("СуммаБезНДС",            СуммаБезНДС);
							Показатели.Вставить("СуммаБезНДСУпр",         СуммаБезНДСУпр);
							Показатели.Вставить("ВалютаРегл",             ВалютаРегл);
							Показатели.Вставить("КурсРегл",               КурсРегл);
							Показатели.Вставить("ВалютаУпр",              ВалютаУпр);
							Показатели.Вставить("СистемаНалогообложения", СистемаНалогообложения);
							Показатели.Вставить("Себестоимость", Себестоимость);
							Показатели.Вставить("СебестоимостьУпр", СебестоимостьУпр);
							Показатели.Вставить("Сумма", Сумма);
							Показатели.Вставить("СуммаУпр", СуммаУпр);
							РезультатПроверки = ПроверитьПродажуНижеСебестоимости(
								ТаблицаТовары,
								СтрокаТовар,
								МинимальныеНаценки,
								Показатели,
								Пользователь,
								ТаблицаМинимальныхНаценок
							);
							ВсеОК = ВсеОК И РезультатПроверки;
						КонецЕсли;
						
						НоваяЗапись = ТаблицаНовыхДвиженийПродаж.Добавить();
						НоваяЗапись.Период                     = Дата;
						НоваяЗапись.Регистратор                = Ссылка;
						НоваяЗапись.ПодразделениеКомпании      = ПодразделениеКомпании;
						НоваяЗапись.Номенклатура               = СтрокаГТД.Номенклатура;
						НоваяЗапись.ДокументПродажи            = ДокументПродажи;
						НоваяЗапись.Автомобиль                 = СтрокаТовар.Автомобиль;
						
						// Возврат введен без основания
						НоваяЗапись.Поставщик = КэшКонтрагент[СтрокаГТД.Партия];
						
						НоваяЗапись.Покупатель                 = Покупатель;
						НоваяЗапись.СтатусПартии               = ?(Комиссия,Перечисления.СтатусыПартий.ТоварКупленный,СтрокаПартий.СтатусПартии);
						НоваяЗапись.ХозОперация                = ХозОперация;
						НоваяЗапись.ДоговорВзаиморасчетов      = ДоговорВзаиморасчетов;
						НоваяЗапись.ХарактеристикаНоменклатуры = СтрокаГТД.ХарактеристикаНоменклатуры;
						НоваяЗапись.СкладКомпании              = ?(ЭтоКорректировкаПоЗаказНаряду, ЦехОснования, СкладКомпании);

						НоваяЗапись.СтавкаНДС                  = СтрокаТовар.СтавкаНДС;
						НоваяЗапись.Партия                     = СтрокаПартий.Партия;
						Попытка
							НоваяЗапись.Проект                 = Проект;
						Исключение
						КонецПопытки;
						Если ЕстьГТД Тогда
							НоваяЗапись.ГТД                    = СтрокаГТД.ГТД;
						Иначе
							НоваяЗапись.ГТД                    = Справочники.ГТД.ПустаяСсылка();
						КонецЕсли;
						
						// количество
						НоваяЗапись.Количество                 = КоличествоПродажи;
						
						// суммы
						НоваяЗапись.СуммаНДСВходящий                   = Окр(СуммаНДСВходящий, 2);
						НоваяЗапись.СуммаНДСВходящийУпр                = Окр(СуммаНДСВходящийУпр, 2);
						НоваяЗапись.СебестоимостьУпр                   = Окр(СебестоимостьУпр, 2);
						НоваяЗапись.Себестоимость                      = Окр(Себестоимость, 2);
						НоваяЗапись.Сумма                              = Сумма;
						НоваяЗапись.СуммаСкидки                        = Окр(ЦенаПродажиСкидки*КоличествоПродажи,2);
						НоваяЗапись.СуммаУпр                           = СуммаУпр;
						НоваяЗапись.СуммаНДС                           = Окр(ЦенаПродажиНДС*КоличествоПродажи,2);
						НоваяЗапись.ВыручкаБезНДС                      = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
						НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДС    = НоваяЗапись.Сумма + НоваяЗапись.СуммаСкидки - НоваяЗапись.СуммаНДС - Окр(НоваяЗапись.СуммаСкидки * СтавкаНДС / (100 + СтавкаНДС), 2);
						НоваяЗапись.ВыручкаДоПримененияСкидки          = НоваяЗапись.Сумма + НоваяЗапись.СуммаСкидки;
						НоваяЗапись.СуммаНДСУпр                        = Окр(ЦенаПродажиНДСУпр*КоличествоПродажи,2);
						НоваяЗапись.СуммаСкидкиУпр                     = Окр(ЦенаПродажиСкидкиУпр*КоличествоПродажи,2);
						НоваяЗапись.ВыручкаБезНДСУпр                   = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
						НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДСУпр = НоваяЗапись.СуммаУпр + НоваяЗапись.СуммаСкидкиУпр - НоваяЗапись.СуммаНДСУпр - Окр(НоваяЗапись.СуммаСкидкиУпр * СтавкаНДС / (100 + СтавкаНДС), 2);
						НоваяЗапись.ВыручкаДоПримененияСкидкиУпр       = НоваяЗапись.СуммаУпр + НоваяЗапись.СуммаСкидкиУпр;
						
						Если СебестоимостьРавнаПродаже Тогда
							
							СебестоимостьБезНДСВходящий = НоваяЗапись.Себестоимость-НоваяЗапись.СуммаНДСВходящий;
							СтавкаНДСВходящее   =
								?(СебестоимостьБезНДСВходящий = 0,
								0,
								Окр(НоваяЗапись.СуммаНДСВходящий/СебестоимостьБезНДСВходящий, 2));
							
							СебестоимостьБезНДС = (НоваяЗапись.Сумма-НоваяЗапись.СуммаНДС);
							СебестоимостьБезНДСУпр = (НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр);
							
							НоваяЗапись.Себестоимость    = Сумма;
							НоваяЗапись.СебестоимостьУпр = СуммаУпр;
							НоваяЗапись.СуммаНДСВходящий = Окр(СебестоимостьБезНДС*СтавкаНДСВходящее, 2);
							НоваяЗапись.СуммаНДСВходящийУпр = РаботаСКурсамиВалют.ПересчитатьВВалюту(СуммаНДСВходящий,ВалютаРегл,ВалютаУпр,Дата);
							
							СуммаПродажиБезНДС = СуммаПродажиБезНДС - СебестоимостьБезНДС;
							СуммаПродажиБезНДСУпр = СуммаПродажиБезНДСУпр - СебестоимостьБезНДСУпр;
							СуммаПродажиСНДСИтого = СуммаПродажиСНДСИтого - Себестоимость;
							СуммаПродажиСНДСУпрИтого = СуммаПродажиСНДСУпрИтого - СебестоимостьУпр;
						КонецЕсли;
						
						СуммаПродажиИтого                 = СуммаПродажиИтого + Сумма;
						СуммаПродажиУпрИтого              = СуммаПродажиУпрИтого + СуммаУпр;
						СуммаПродажиСкидкиИтого           = СуммаПродажиСкидкиИтого + НоваяЗапись.СуммаСкидки;
						СуммаПродажиНДСИтого              = СуммаПродажиНДСИтого + НоваяЗапись.СуммаНДС;
						СуммаПродажиНДСУпрИтого           = СуммаПродажиНДСУпрИтого + НоваяЗапись.СуммаНДСУпр;
						СуммаПродажиСкидкиУпрИтого        = СуммаПродажиСкидкиУпрИтого + НоваяЗапись.СуммаСкидкиУпр;
						
						Если НЕ ТоварПринятыйНаКомиссию Тогда
							СебестоимостьПартийБезНДСИтого    = СебестоимостьПартийБезНДСИтого + СебестоимостьБезНДС;
							СебестоимостьПартийБезНДСУпрИтого = СебестоимостьПартийБезНДСУпрИтого + СебестоимостьБезНДСУпр;
							СебестоимостьПартийИтого          = СебестоимостьПартийИтого + Себестоимость;
							СебестоимостьПартийУпрИтого       = СебестоимостьПартийУпрИтого + СебестоимостьУпр;
						КонецЕсли;
						
						НоваяЗапись.СебестоимостьБезНДС    = НоваяЗапись.Себестоимость - НоваяЗапись.СуммаНДСВходящий;
						НоваяЗапись.СебестоимостьБезНДСУпр = НоваяЗапись.СебестоимостьУпр - НоваяЗапись.СуммаНДСВходящийУпр;
						
						СтрокаТовар.Количество  = СтрокаТовар.Количество-НоваяЗапись.Количество*?(НоваяЗапись.Количество>0,1,-1);
						СтрокаПартий.Количество = СтрокаПартий.Количество-НоваяЗапись.Количество;
						СтрокаГТД.Количество    = СтрокаГТД.Количество-НоваяЗапись.Количество*?(НоваяЗапись.Количество>0,1,-1);
						
						// удалим за ненадобностью
						Если СтрокаГТД.Количество = 0 Тогда
							ТаблицаГТД.Удалить(СтрокаГТД);
							СтрокаГТД = Неопределено;
						КонецЕсли;
						
						// несколько ГТД в одной партии
						Если СтрокаПартий.Количество = 0 Тогда
							Прервать;
						КонецЕсли;
						
						Если СтрокаТовар.Количество = 0 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если БезГТД ИЛИ (СтрокаТовар.Количество>0 И СтрокаПартий.Количество<>0) Тогда
						
						КоличествоПродажи = Мин(СтрокаТовар.Количество, СтрокаПартий.Количество);
						
						Сумма             = Окр(ЦенаПродажи*КоличествоПродажи,             2);
						СуммаУпр          = Окр(ЦенаПродажиУпр*КоличествоПродажи,          2);
						СуммаБезНДС       = Окр(ЦенаПродажиБезНДС*КоличествоПродажи,       2);
						СуммаБезНДСУпр    = Окр(ЦенаПродажиБезНДСУпр*КоличествоПродажи,    2);
						
						СебестоимостьУпр       = 0;
						Себестоимость          = 0;
						СебестоимостьБезНДС    = 0;
						СебестоимостьБезНДСУпр = 0;
						СуммаНДСВходящий    = 0;
						СуммаНДСВходящийУпр = 0;
						Если Комиссия Тогда
							СтруктураОтбораСебестоимостьКомиссии.Номенклатура               = СтрокаПартий.Номенклатура;
							СтруктураОтбораСебестоимостьКомиссии.ХарактеристикаНоменклатуры = СтрокаПартий.ХарактеристикаНоменклатуры;
							СтруктураОтбораСебестоимостьКомиссии.Партия                     = СтрокаПартий.Партия;
							
							Если АвтомобильВТаблице Тогда
								СтруктураОтбораСебестоимостьКомиссии.Вставить("Автомобиль", СтрокаПартий.Автомобиль);
							КонецЕсли;
							
							СчетчикКоличествоПродажи = КоличествоПродажи;
							МассивНайденныхСтрокСебестоимости = КэшСебестоимостиПриКомиссии.НайтиСтроки(СтруктураОтбораСебестоимостьКомиссии);
							Для Каждого СтрокаСебестоимости Из МассивНайденныхСтрокСебестоимости Цикл
								
								Если СтрокаСебестоимости.Количество = 0 Тогда
									Продолжить;
								КонецЕсли;
								
								Если СчетчикКоличествоПродажи = 0 Тогда
									Прервать;
								КонецЕсли;
								
								Если СтрокаСебестоимости.Количество > СчетчикКоличествоПродажи Тогда
									КоличествоДляСумм = ?(СтрокаСебестоимости.Количество=0, 1, СтрокаСебестоимости.Количество);
									ТекСебестоимость    = Окр(СтрокаСебестоимости.Сумма/КоличествоДляСумм*СчетчикКоличествоПродажи, 2);
									ТекСебестоимостьУпр = Окр(СтрокаСебестоимости.СуммаУпр/КоличествоДляСумм*СчетчикКоличествоПродажи, 2);
									ТекСуммаНДСВходящий = Окр(СтрокаСебестоимости.СуммаНДС/КоличествоДляСумм*СчетчикКоличествоПродажи, 2);
									ТекСуммаНДСВходящийУпр = Окр(СтрокаСебестоимости.СуммаНДСУпр/КоличествоДляСумм*СчетчикКоличествоПродажи, 2);
									
									СтрокаСебестоимости.Сумма       = СтрокаСебестоимости.Сумма - ТекСебестоимость;
									СтрокаСебестоимости.СуммаУпр    = СтрокаСебестоимости.СуммаУпр - ТекСебестоимостьУпр;
									СтрокаСебестоимости.СуммаНДС    = СтрокаСебестоимости.СуммаНДС - ТекСуммаНДСВходящий;
									СтрокаСебестоимости.СуммаНДСУпр = СтрокаСебестоимости.СуммаНДСУпр - ТекСуммаНДСВходящийУпр;
									СтрокаСебестоимости.Количество  = СтрокаСебестоимости.Количество - СчетчикКоличествоПродажи;
									
									СчетчикКоличествоПродажи = 0;
								Иначе
									ТекСебестоимость       = СтрокаСебестоимости.Сумма;
									ТекСебестоимостьУпр    = СтрокаСебестоимости.СуммаУпр;
									ТекСуммаНДСВходящий    = СтрокаСебестоимости.СуммаНДС;
									ТекСуммаНДСВходящийУпр = СтрокаСебестоимости.СуммаНДСУпр;
									
									СчетчикКоличествоПродажи = СчетчикКоличествоПродажи - СтрокаСебестоимости.Количество;
									
									КэшСебестоимостиПриКомиссии.Удалить(СтрокаСебестоимости);
									
								КонецЕсли;
								
								Себестоимость    = Себестоимость + ТекСебестоимость;
								СебестоимостьУпр = СебестоимостьУпр + ТекСебестоимостьУпр;
								СуммаНДСВходящий = СуммаНДСВходящий + ТекСуммаНДСВходящий;
								СуммаНДСВходящийУпр = СуммаНДСВходящийУпр + ТекСуммаНДСВходящийУпр;
							КонецЦикла;
							
						ИначеЕсли СтрокаПартий.Количество > СтрокаТовар.Количество Тогда
							// при выборочной партии списано больше чем в строке
							КоличествоДляСумм = ?(СтрокаПартий.Количество=0, 1, СтрокаПартий.Количество);
							Себестоимость    = Окр(СтрокаПартий.Сумма/КоличествоДляСумм*КоличествоПродажи, 2);
							СебестоимостьУпр = Окр(СтрокаПартий.СуммаУпр/КоличествоДляСумм*КоличествоПродажи, 2);
							СуммаНДСВходящий = Окр(СтрокаПартий.СуммаНДС/КоличествоДляСумм*КоличествоПродажи, 2);
							СуммаНДСВходящийУпр = Окр(СтрокаПартий.СуммаНДСУпр/КоличествоДляСумм*КоличествоПродажи, 2);
							
							СтрокаПартий.Сумма    = СтрокаПартий.Сумма - Себестоимость;
							СтрокаПартий.СуммаУпр = СтрокаПартий.СуммаУпр - СебестоимостьУпр;
							СтрокаПартий.СуммаНДС = СтрокаПартий.СуммаНДС - СуммаНДСВходящий;
							СтрокаПартий.СуммаНДСУпр = СтрокаПартий.СуммаНДСУпр - СуммаНДСВходящийУпр;
						Иначе
							СебестоимостьУпр    = СтрокаПартий.СуммаУпр;
							Себестоимость       = СтрокаПартий.Сумма;
							СуммаНДСВходящий    = СтрокаПартий.СуммаНДС;
							СуммаНДСВходящийУпр = СтрокаПартий.СуммаНДСУпр;
						КонецЕсли;
						
						СебестоимостьБезНДС    = Себестоимость - СуммаНДСВходящий;
						СебестоимостьБезНДСУпр = СебестоимостьУпр - СуммаНДСВходящийУпр;
						
						// Проверим, что партия была сформирована возвратом из закрытия смены.
						ВозвратПоЗакрытиюСмены = (ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗакрытиеСмены") И Ссылка = ДокументПродажи);
						
						Если ПорядокПроверкиСебестоимостиТовараПриПродаже = Перечисления.ПорядокПроверкиСебестоимостиПриПродаже.ПоКаждойПартииВОтдельности
							И КонтролироватьСебестоимость И НЕ ТоварПринятыйНаКомиссию И СтрокаТовар.Количество>0
							И НЕ ВозвратПоЗакрытиюСмены Тогда
							Показатели = Новый Структура;
							Показатели.Вставить("СебестоимостьБезНДС",    СебестоимостьБезНДС);
							Показатели.Вставить("СебестоимостьБезНДСУпр", СебестоимостьБезНДСУпр);
							Показатели.Вставить("СуммаБезНДС",            СуммаБезНДС);
							Показатели.Вставить("СуммаБезНДСУпр",         СуммаБезНДСУпр);
							Показатели.Вставить("ВалютаРегл",             ВалютаРегл);
							Показатели.Вставить("КурсРегл",               КурсРегл);
							Показатели.Вставить("ВалютаУпр",              ВалютаУпр);
							Показатели.Вставить("СистемаНалогообложения", СистемаНалогообложения);
							Показатели.Вставить("Себестоимость", Себестоимость);
							Показатели.Вставить("СебестоимостьУпр", СебестоимостьУпр);
							Показатели.Вставить("Сумма", Сумма);
							Показатели.Вставить("СуммаУпр", СуммаУпр);
							РезультатПроверки = ПроверитьПродажуНижеСебестоимости(
								ТаблицаТовары,
								СтрокаТовар,
								МинимальныеНаценки,
								Показатели,
								Пользователь,
								ТаблицаМинимальныхНаценок
							);
							ВсеОК = ВсеОК И РезультатПроверки;
						КонецЕсли;
						
						НоваяЗапись = ТаблицаНовыхДвиженийПродаж.Добавить();
						НоваяЗапись.Период                     = Дата;
						НоваяЗапись.Регистратор                = Ссылка;
						НоваяЗапись.ПодразделениеКомпании      = ПодразделениеКомпании;
						НоваяЗапись.Номенклатура               = СтрокаПартий.Номенклатура;
						НоваяЗапись.ДокументПродажи            = ДокументПродажи;
						НоваяЗапись.Поставщик                  = КэшКонтрагент[СтрокаПартий.Партия];
						НоваяЗапись.Покупатель                 = Покупатель;
						НоваяЗапись.СтатусПартии               = ?(Комиссия, Перечисления.СтатусыПартий.ТоварКупленный, СтрокаПартий.СтатусПартии);
						НоваяЗапись.ХозОперация                = ХозОперация;
						НоваяЗапись.ДоговорВзаиморасчетов      = ДоговорВзаиморасчетов;
						НоваяЗапись.ХарактеристикаНоменклатуры = СтрокаПартий.ХарактеристикаНоменклатуры;
						НоваяЗапись.СкладКомпании              = ?(ЭтоКорректировкаПоЗаказНаряду, ЦехОснования, СкладКомпании);
						НоваяЗапись.СтавкаНДС                  = СтрокаТовар.СтавкаНДС;
						НоваяЗапись.Партия                     = СтрокаПартий.Партия;
						НоваяЗапись.Автомобиль                 = СтрокаТовар.Автомобиль;
						
						Попытка
							НоваяЗапись.Проект                 = Проект;
						Исключение
						КонецПопытки;
						НоваяЗапись.ГТД                        = Справочники.ГТД.ПустаяСсылка();
						
						// количество
						НоваяЗапись.Количество                 = КоличествоПродажи;
						
						// суммы
						НоваяЗапись.СуммаНДСВходящий                      = Окр(СуммаНДСВходящий, 2);
						НоваяЗапись.СуммаНДСВходящийУпр                   = Окр(СуммаНДСВходящийУпр, 2);
						НоваяЗапись.СебестоимостьУпр                      = Окр(СебестоимостьУпр, 2);
						НоваяЗапись.Себестоимость                         = Окр(Себестоимость, 2);
						НоваяЗапись.Сумма                                 = Сумма;
						НоваяЗапись.СуммаСкидки                           = Окр(ЦенаПродажиСкидки*КоличествоПродажи, 2);
						НоваяЗапись.СуммаУпр                              = СуммаУпр;
						НоваяЗапись.СуммаНДС                              = Окр(ЦенаПродажиНДС*КоличествоПродажи, 2);
						НоваяЗапись.СуммаНДСУпр                           = Окр(ЦенаПродажиНДСУпр*КоличествоПродажи,2);
						НоваяЗапись.СуммаСкидкиУпр                        = Окр(ЦенаПродажиСкидкиУпр*КоличествоПродажи,2);
						НоваяЗапись.ВыручкаБезНДС                         = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
						НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДС       = НоваяЗапись.Сумма + НоваяЗапись.СуммаСкидки - НоваяЗапись.СуммаНДС - Окр(НоваяЗапись.СуммаСкидки * СтавкаНДС / (100 + СтавкаНДС), 2);
						НоваяЗапись.ВыручкаДоПримененияСкидки             = НоваяЗапись.Сумма + НоваяЗапись.СуммаСкидки;
						НоваяЗапись.ВыручкаБезНДСУпр                      = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
						НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДСУпр    = НоваяЗапись.СуммаУпр + НоваяЗапись.СуммаСкидкиУпр - НоваяЗапись.СуммаНДСУпр - Окр(НоваяЗапись.СуммаСкидкиУпр * СтавкаНДС / (100 + СтавкаНДС), 2);
						НоваяЗапись.ВыручкаДоПримененияСкидкиУпр          = НоваяЗапись.СуммаУпр + НоваяЗапись.СуммаСкидкиУпр;
						
						Если СебестоимостьРавнаПродаже Тогда
							
							СебестоимостьБезНДСВходящий = НоваяЗапись.Себестоимость-НоваяЗапись.СуммаНДСВходящий;
							СтавкаНДСВходящее   =
								?(СебестоимостьБезНДСВходящий = 0,
								0,
								Окр(НоваяЗапись.СуммаНДСВходящий/СебестоимостьБезНДСВходящий, 2));
							СебестоимостьБезНДС = (НоваяЗапись.Сумма-НоваяЗапись.СуммаНДС);
							СебестоимостьБезНДСУпр = (НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр);
							
							НоваяЗапись.Себестоимость    = Сумма;
							НоваяЗапись.СебестоимостьУпр = СуммаУпр;
							НоваяЗапись.СуммаНДСВходящий = Окр(СебестоимостьБезНДС*СтавкаНДСВходящее, 2);
							НоваяЗапись.СуммаНДСВходящийУпр = РаботаСКурсамиВалют.ПересчитатьВВалюту(СуммаНДСВходящий,ВалютаРегл,ВалютаУпр,Дата);
							
						КонецЕсли;
						
						Если СебестоимостьРавнаПродаже ИЛИ ВозвратПоЗакрытиюСмены Тогда
							СуммаПродажиБезНДС = СуммаПродажиБезНДС - СебестоимостьБезНДС;
							СуммаПродажиБезНДСУпр = СуммаПродажиБезНДСУпр - СебестоимостьБезНДСУпр;
							СуммаПродажиСНДСИтого = СуммаПродажиСНДСИтого - Себестоимость;
							СуммаПродажиСНДСУпрИтого = СуммаПродажиСНДСУпрИтого - СебестоимостьУпр;
						КонецЕсли;
						
						СуммаПродажиИтого                 = СуммаПродажиИтого + Сумма;
						СуммаПродажиУпрИтого              = СуммаПродажиУпрИтого + СуммаУпр;
						СуммаПродажиСкидкиИтого           = СуммаПродажиСкидкиИтого + НоваяЗапись.СуммаСкидки;
						СуммаПродажиНДСИтого              = СуммаПродажиНДСИтого + НоваяЗапись.СуммаНДС;
						СуммаПродажиНДСУпрИтого           = СуммаПродажиНДСУпрИтого + НоваяЗапись.СуммаНДСУпр;
						СуммаПродажиСкидкиУпрИтого        = СуммаПродажиСкидкиУпрИтого + НоваяЗапись.СуммаСкидкиУпр;
						
						Если НЕ ТоварПринятыйНаКомиссию И НЕ ВозвратПоЗакрытиюСмены Тогда
							СебестоимостьПартийБезНДСИтого    = СебестоимостьПартийБезНДСИтого + СебестоимостьБезНДС;
							СебестоимостьПартийБезНДСУпрИтого = СебестоимостьПартийБезНДСУпрИтого + СебестоимостьБезНДСУпр;
							СебестоимостьПартийИтого          = СебестоимостьПартийИтого + Себестоимость;
							СебестоимостьПартийУпрИтого       = СебестоимостьПартийУпрИтого + СебестоимостьУпр;
						КонецЕсли;
						
						НоваяЗапись.СебестоимостьБезНДС    = НоваяЗапись.Себестоимость - НоваяЗапись.СуммаНДСВходящий;
						НоваяЗапись.СебестоимостьБезНДСУпр = НоваяЗапись.СебестоимостьУпр - НоваяЗапись.СуммаНДСВходящийУпр;
						
						СтрокаТовар.Количество  = СтрокаТовар.Количество-НоваяЗапись.Количество*?(НоваяЗапись.Количество>0,1,-1);
						СтрокаПартий.Количество = СтрокаПартий.Количество-НоваяЗапись.Количество;
					КонецЕсли;
					
					Если СтрокаПартий.Количество = 0 Тогда
						ТаблицаПартий.Удалить(СтрокаПартий);
					КонецЕсли;
					
					Если СтрокаТовар.Количество = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ПорядокПроверкиСебестоимостиТовараПриПродаже = Перечисления.ПорядокПроверкиСебестоимостиПриПродаже.ПоСреднейСтоимостиСписания
					И КонтролироватьСебестоимость Тогда
					
					Показатели = Новый Структура;
					Показатели.Вставить("СебестоимостьБезНДС",    СебестоимостьПартийБезНДСИтого);
					Показатели.Вставить("СебестоимостьБезНДСУпр", СебестоимостьПартийБезНДСУпрИтого);
					Показатели.Вставить("СуммаБезНДС",            СуммаПродажиБезНДС);
					Показатели.Вставить("СуммаБезНДСУпр",         СуммаПродажиБезНДСУпр);
					Показатели.Вставить("ВалютаРегл",             ВалютаРегл);
					Показатели.Вставить("КурсРегл",               КурсРегл);
					Показатели.Вставить("ВалютаУпр",              ВалютаУпр);
					Показатели.Вставить("СистемаНалогообложения", СистемаНалогообложения);
					Показатели.Вставить("Себестоимость", СебестоимостьПартийИтого);
					Показатели.Вставить("СебестоимостьУпр", СебестоимостьПартийУпрИтого);
					Показатели.Вставить("Сумма", СуммаПродажиСНДСИтого);
					Показатели.Вставить("СуммаУпр", СуммаПродажиСНДСУпрИтого);
					РезультатПроверки = ПроверитьПродажуНижеСебестоимости(
						ТаблицаТовары,
						СтрокаТовар,
						МинимальныеНаценки,
						Показатели,
						Пользователь,
						ТаблицаМинимальныхНаценок
					);
					ВсеОК = ВсеОК И РезультатПроверки;
				КонецЕсли;
				
				Если НоваяЗапись <> Неопределено Тогда
					// Записи по возврату может и не быть если возвращается товар, который не продавался.
					// Прибавим погрешность округления к последней партии.
					СуммаПродажиПогрешность = СуммаПродажи-СуммаПродажиИтого;
					Если СуммаПродажиПогрешность <> 0 Тогда
						НоваяЗапись.Сумма = НоваяЗапись.Сумма + СуммаПродажиПогрешность;
						НоваяЗапись.ВыручкаБезНДС                         = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
						НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДС       = НоваяЗапись.Сумма + НоваяЗапись.СуммаСкидки - НоваяЗапись.СуммаНДС - Окр(НоваяЗапись.СуммаСкидки * СтавкаНДС / (100 + СтавкаНДС), 2);
						НоваяЗапись.ВыручкаДоПримененияСкидки             = НоваяЗапись.Сумма + НоваяЗапись.СуммаСкидки;
					КонецЕсли; 
					СуммаПродажиПогрешностьУпр = СуммаПродажиУпр-СуммаПродажиУпрИтого;
					Если СуммаПродажиПогрешностьУпр <> 0 Тогда
						НоваяЗапись.СуммаУпр = НоваяЗапись.СуммаУпр + СуммаПродажиПогрешностьУпр;
						НоваяЗапись.ВыручкаБезНДСУпр                      = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
						НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДСУпр    = НоваяЗапись.СуммаУпр + НоваяЗапись.СуммаСкидкиУпр - НоваяЗапись.СуммаНДСУпр - Окр(НоваяЗапись.СуммаСкидкиУпр * СтавкаНДС / (100 + СтавкаНДС), 2);
						НоваяЗапись.ВыручкаДоПримененияСкидкиУпр          = НоваяЗапись.СуммаУпр + НоваяЗапись.СуммаСкидкиУпр;
					КонецЕсли; 
					СуммаПродажиСкидкиПогрешность = СуммаПродажиСкидки-СуммаПродажиСкидкиИтого;
					Если СуммаПродажиСкидкиПогрешность <> 0 Тогда
						НоваяЗапись.СуммаСкидки = НоваяЗапись.СуммаСкидки + СуммаПродажиСкидкиПогрешность;
						НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДС       = НоваяЗапись.Сумма + НоваяЗапись.СуммаСкидки - НоваяЗапись.СуммаНДС - Окр(НоваяЗапись.СуммаСкидки * СтавкаНДС / (100 + СтавкаНДС), 2);
						НоваяЗапись.ВыручкаДоПримененияСкидки             = НоваяЗапись.Сумма + НоваяЗапись.СуммаСкидки;
					КонецЕсли; 
					СуммаПродажиСкидкиУпрПогрешность = СуммаПродажиСкидкиУпр-СуммаПродажиСкидкиУпрИтого;
					Если СуммаПродажиСкидкиУпрПогрешность <> 0 Тогда
						НоваяЗапись.СуммаСкидкиУпр = НоваяЗапись.СуммаСкидки + СуммаПродажиСкидкиУпрПогрешность;
						НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДСУпр    = НоваяЗапись.СуммаУпр + НоваяЗапись.СуммаСкидкиУпр - НоваяЗапись.СуммаНДСУпр - Окр(НоваяЗапись.СуммаСкидкиУпр * СтавкаНДС / (100 + СтавкаНДС), 2);
						НоваяЗапись.ВыручкаДоПримененияСкидкиУпр          = НоваяЗапись.СуммаУпр + НоваяЗапись.СуммаСкидкиУпр;
					КонецЕсли; 
					СуммаПродажиНДСПогрешность = СуммаПродажиНДС - СуммаПродажиНДСИтого;
					Если СуммаПродажиНДСПогрешность <> 0 Тогда
						НоваяЗапись.СуммаНДС = НоваяЗапись.СуммаНДС + СуммаПродажиНДСПогрешность;
						НоваяЗапись.ВыручкаБезНДС                         = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
						НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДС       = НоваяЗапись.Сумма + НоваяЗапись.СуммаСкидки - НоваяЗапись.СуммаНДС - Окр(НоваяЗапись.СуммаСкидки * СтавкаНДС / (100 + СтавкаНДС), 2);
					КонецЕсли; 
					СуммаПродажиНДСУпрПогрешность = СуммаПродажиНДСУпр-СуммаПродажиНДСУпрИтого;
					Если СуммаПродажиНДСУпрПогрешность <> 0 Тогда
						НоваяЗапись.СуммаНДСУпр = НоваяЗапись.СуммаНДСУпр + СуммаПродажиНДСУпрПогрешность;
						НоваяЗапись.ВыручкаБезНДСУпр                      = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
						НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДСУпр    = НоваяЗапись.СуммаУпр + НоваяЗапись.СуммаСкидкиУпр - НоваяЗапись.СуммаНДСУпр - Окр(НоваяЗапись.СуммаСкидкиУпр * СтавкаНДС / (100 + СтавкаНДС), 2);
					КонецЕсли;
				КонецЕсли; 
				
			Иначе
				
				// наверное услуга, т.к. нет движений по партиям
				СебестоимостьУпр = 0;
				СуммаУпр = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовар.Сумма,ВалютаДокумента,КурсДокумента,ВалютаУпр,КурсУпр);
				
				НоваяЗапись = ТаблицаНовыхДвиженийПродаж.Добавить();
				НоваяЗапись.Период      = Дата;
				НоваяЗапись.Регистратор = Ссылка;
				
				// всякие измерения и реквизиты
				НоваяЗапись.ПодразделениеКомпании=ПодразделениеКомпании;
				
				Попытка
					НоваяЗапись.Проект = Проект;
				Исключение
				КонецПопытки;
				
				НоваяЗапись.ДокументПродажи = ДокументПродажи;
				
				Если ЭтоАвторабота Тогда
					НоваяЗапись.Номенклатура = НоменклатураАвтоработы;
					НоваяЗапись.Авторабота = СтрокаТовар.Номенклатура;
				Иначе
					НоваяЗапись.Номенклатура = СтрокаТовар.Номенклатура;
				КонецЕсли;
				
				ЭтоУслуга = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяЗапись.Номенклатура, "ВидНоменклатуры") 
					= Перечисления.ВидыНоменклатуры.Услуга;
				
				// Возврат введен без основания
				Если ДокументПродажи = Неопределено Тогда
					НоваяЗапись.ДокументПродажи = Ссылка;
					НоваяЗапись.Поставщик       = Контрагент;
				КонецЕсли;
				
				НоваяЗапись.СтавкаНДС                  = СтрокаТовар.СтавкаНДС;
				НоваяЗапись.Покупатель                 = Покупатель;
				НоваяЗапись.СтатусПартии               = Перечисления.СтатусыПартий.ТоварКупленный;
				НоваяЗапись.ДоговорВзаиморасчетов      = ДоговорВзаиморасчетов;
				НоваяЗапись.ХарактеристикаНоменклатуры = СтрокаТовар.ХарактеристикаНоменклатуры;
				
				// склад
				Если (ЭтоКорректировкаПоЗаказНаряду И ЭтоАвторабота)
					ИЛИ (ЭтоКорректировкаПоЗаказНаряду И НЕ ЭтоУслуга) Тогда
					
					НоваяЗапись.СкладКомпании = ЦехОснования;
					
				ИначеЕсли НЕ (Комиссия ИЛИ ЭтоУслуга) Тогда
					
					Если СкладКомпании = Неопределено Тогда
						НоваяЗапись.СкладКомпании = СтрокаТовар.СкладКомпании;
					Иначе
						НоваяЗапись.СкладКомпании = СкладКомпании;
					КонецЕсли;
					
				КонецЕсли;
				НоваяЗапись.ХозОперация = ХозОперация;
				
				// количество
				НоваяЗапись.Количество = СтрокаТовар.Количество;
				НоваяЗапись.Автомобиль = СтрокаТовар.Автомобиль;
				
				Если ЭтоАвторабота Тогда
					НоваяЗапись.НормоЧас 				= СтрокаТовар.НормоЧас;
					НоваяЗапись.КоличествоНормочасов 	= СтрокаТовар.КоличествоНормочасов;
				КонецЕсли;
				
				// суммы
				НоваяЗапись.СебестоимостьУпр = Окр(СебестоимостьУпр,2);
				НоваяЗапись.Сумма            = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовар.Сумма,ВалютаДокумента,КурсДокумента,ВалютаРегл,КурсРегл),2);
				НоваяЗапись.СуммаСкидки      = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовар.СуммаСкидки,ВалютаДокумента,КурсДокумента,ВалютаРегл,КурсРегл),2);
				НоваяЗапись.СуммаУпр         = Окр(СуммаУпр,2);
				НоваяЗапись.СуммаСкидкиУпр   = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовар.СуммаСкидки,ВалютаДокумента,КурсДокумента,ВалютаУпр,КурсУпр),2);
				НоваяЗапись.СуммаНДС         = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовар.СуммаНДС,ВалютаДокумента,КурсДокумента,ВалютаРегл,КурсРегл),2);
				НоваяЗапись.СуммаНДСУпр      = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовар.СуммаНДС,ВалютаДокумента,КурсДокумента,ВалютаУпр,КурсУпр),2);
				
				НоваяЗапись.ВыручкаБезНДС                      = НоваяЗапись.Сумма - НоваяЗапись.СуммаНДС;
				НоваяЗапись.ВыручкаДоПримененияСкидки          = НоваяЗапись.Сумма + НоваяЗапись.СуммаСкидки;
				НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДС    = НоваяЗапись.Сумма + НоваяЗапись.СуммаСкидки - НоваяЗапись.СуммаНДС - Окр(НоваяЗапись.СуммаСкидки * СтавкаНДС / (100 + СтавкаНДС), 2);
				НоваяЗапись.ВыручкаБезНДСУпр                   = НоваяЗапись.СуммаУпр - НоваяЗапись.СуммаНДСУпр;
				НоваяЗапись.ВыручкаДоПримененияСкидкиУпр       = НоваяЗапись.СуммаУпр + НоваяЗапись.СуммаСкидкиУпр;
				НоваяЗапись.ВыручкаДоПримененияСкидкиБезНДСУпр = НоваяЗапись.СуммаУпр + НоваяЗапись.СуммаСкидкиУпр - НоваяЗапись.СуммаНДСУпр - Окр(НоваяЗапись.СуммаСкидкиУпр * СтавкаНДС / (100 + СтавкаНДС), 2);
				
			КонецЕсли;
		
		КонецЕсли;	
		
	КонецЦикла;
	
	ТаблицаНовыхДвиженийПродаж.ЗаполнитьЗначения(Истина, "Активность");
	
	СтруктураВозврата.Вставить("ВсеОК", ВсеОК);
	СтруктураВозврата.Вставить("ТаблицаНовыхДвиженийПродаж", ТаблицаНовыхДвиженийПродаж);
	
	Возврат СтруктураВозврата;

КонецФункции

// Получает таблицу с остатками ГТД
//
// Параметры:
//  ТаблицаПартий - ТаблицаЗначений - Таблица партий для получения остатков.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Результат остатоков партий по ГТД
//
Функция ПолучитьОстаткиГТДПартий(ТаблицаПартий, СтарыеДвиженияГТД)
	
	ДатаМоментаВремени = Ссылка.Дата;
	ГраницаРасчетаОстатков = Новый МоментВремени(ДатаМоментаВремени, Ссылка);
	
	// Получим дату среза
	ДатаСреза = ГраницаРасчетаОстатков.Дата;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтарыеДвиженияГТД.СкладКомпании КАК СкладКомпании,
	               |	СтарыеДвиженияГТД.Номенклатура КАК Номенклатура,
	               |	СтарыеДвиженияГТД.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	СтарыеДвиженияГТД.Партия КАК Партия,
	               |	СтарыеДвиженияГТД.Организация КАК Организация,
	               |	СтарыеДвиженияГТД.ГТД КАК ГТД,
	               |	СтарыеДвиженияГТД.Количество КАК Количество,
	               |	АВТОНОМЕРЗАПИСИ() КАК ПорядокСтарыхДвиженийГТД
	               |ПОМЕСТИТЬ СтарыеДвиженияГТД
	               |ИЗ
	               |	&СтарыеДвиженияГТД КАК СтарыеДвиженияГТД
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ГТДПартийТоваровКомпанииОстатки.СкладКомпании КАК СкладКомпании,
	               |	ГТДПартийТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
	               |	ГТДПартийТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ГТДПартийТоваровКомпанииОстатки.Партия КАК Партия,
				   |	ГТДПартийТоваровКомпанииОстатки.Организация КАК Организация,
	               |	ГТДПартийТоваровКомпанииОстатки.ГТД КАК ГТД,
	               |	СУММА(ГТДПартийТоваровКомпанииОстатки.КоличествоОстаток) КАК Количество,
	               |	0 КАК ПорядокСтарыхДвиженийГТД
	               |ПОМЕСТИТЬ ОстаткиГТДСОснованиями
	               |ИЗ
	               |	РегистрНакопления.ГТДПартийТоваровКомпании.Остатки(
	               |			&Момент,
	               |			СкладКомпании = &СкладКомпанииШапка
	               |				И (&БезФильтраПоОрганизации
	               |					ИЛИ Организация = &Организация)
	               |				И Номенклатура В (&Номенклатура)
	               |				И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)
	               |				И Партия В (&Партия)) КАК ГТДПартийТоваровКомпанииОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ГТДПартийТоваровКомпанииОстатки.СкладКомпании,
	               |	ГТДПартийТоваровКомпанииОстатки.Номенклатура,
	               |	ГТДПартийТоваровКомпанииОстатки.ХарактеристикаНоменклатуры,
	               |	ГТДПартийТоваровКомпанииОстатки.Партия,
				   |	ГТДПартийТоваровКомпанииОстатки.Организация,
	               |	ГТДПартийТоваровКомпанииОстатки.ГТД
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СтарыеДвиженияГТД.СкладКомпании,
	               |	СтарыеДвиженияГТД.Номенклатура,
	               |	СтарыеДвиженияГТД.ХарактеристикаНоменклатуры,
	               |	СтарыеДвиженияГТД.Партия,
				   |	СтарыеДвиженияГТД.Организация,
	               |	СтарыеДвиженияГТД.ГТД,
	               |	СтарыеДвиженияГТД.Количество,
	               |	СтарыеДвиженияГТД.ПорядокСтарыхДвиженийГТД
	               |ИЗ
	               |	СтарыеДвиженияГТД КАК СтарыеДвиженияГТД
	               |ГДЕ
	               |	СтарыеДвиженияГТД.СкладКомпании В(&СкладКомпании)
	               |	И СтарыеДвиженияГТД.Номенклатура В(&Номенклатура)
	               |	И СтарыеДвиженияГТД.ХарактеристикаНоменклатуры В(&ХарактеристикаНоменклатуры)
	               |	И СтарыеДвиженияГТД.Партия В(&Партия)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОстаткиГТДСОснованиями.СкладКомпании КАК СкладКомпании,
	               |	ОстаткиГТДСОснованиями.Номенклатура КАК Номенклатура,
	               |	ОстаткиГТДСОснованиями.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ОстаткиГТДСОснованиями.Партия КАК Партия,
				   |	ОстаткиГТДСОснованиями.Организация КАК Организация,
	               |	ОстаткиГТДСОснованиями.ГТД КАК ГТД,
	               |	СУММА(ОстаткиГТДСОснованиями.Количество) КАК Количество,
	               |	МАКСИМУМ(ОстаткиГТДСОснованиями.ПорядокСтарыхДвиженийГТД) КАК ПорядокСтарыхДвиженийГТД
	               |ПОМЕСТИТЬ ОстаткиГТДСгруппированные
	               |ИЗ
	               |	ОстаткиГТДСОснованиями КАК ОстаткиГТДСОснованиями
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОстаткиГТДСОснованиями.СкладКомпании,
	               |	ОстаткиГТДСОснованиями.Номенклатура,
	               |	ОстаткиГТДСОснованиями.ХарактеристикаНоменклатуры,
	               |	ОстаткиГТДСОснованиями.Партия,
				   |	ОстаткиГТДСОснованиями.Организация,
	               |	ОстаткиГТДСОснованиями.ГТД
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОстаткиГТДСгруппированные.СкладКомпании КАК СкладКомпании,
	               |	ОстаткиГТДСгруппированные.Номенклатура КАК Номенклатура,
	               |	ОстаткиГТДСгруппированные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ОстаткиГТДСгруппированные.Партия КАК Партия,
				   |	ОстаткиГТДСгруппированные.Организация КАК Организация,
	               |	ОстаткиГТДСгруппированные.ГТД КАК ГТД,
	               |	ОстаткиГТДСгруппированные.Количество КАК Количество,
	               |	ВЫБОР
	               |		КОГДА ОстаткиГТДСгруппированные.ПорядокСтарыхДвиженийГТД = 0
	               |			ТОГДА 999999
	               |		ИНАЧЕ ОстаткиГТДСгруппированные.ПорядокСтарыхДвиженийГТД
	               |	КОНЕЦ КАК ПорядокСтарыхДвиженийГТД
	               |ИЗ
	               |	ОстаткиГТДСгруппированные КАК ОстаткиГТДСгруппированные
	               |ГДЕ
	               |	ОстаткиГТДСгруппированные.Количество <> 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПорядокСтарыхДвиженийГТД";
	
	Запрос.УстановитьПараметр("СтарыеДвиженияГТД"			, СтарыеДвиженияГТД);
	Запрос.УстановитьПараметр("Момент"						, ГраницаРасчетаОстатков);
	Запрос.УстановитьПараметр("СкладКомпании"				, ТаблицаПартий.ВыгрузитьКолонку("СкладКомпании"));
	Запрос.УстановитьПараметр("СкладКомпанииШапка"			, СкладКомпании);
	Запрос.УстановитьПараметр("БезФильтраПоОрганизации"		, ЗапасыТоваров.ФильтрЗапросаПоОрганизации(ГраницаРасчетаОстатков.Дата));
	Запрос.УстановитьПараметр("Организация"					, Организация);
	Запрос.УстановитьПараметр("Номенклатура"				, ТаблицаПартий.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры"	, ТаблицаПартий.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
	Запрос.УстановитьПараметр("Партия"						, ТаблицаПартий.ВыгрузитьКолонку("Партия"));
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ГТДПартийТоваровКомпании");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ДатаСреза)); 
	Если СкладКомпании <> Неопределено Тогда
		ЗначенияБлокировки.Вставить("СкладКомпании", СкладКомпании); 
	КонецЕсли; 
	СтруктураПараметровБлокировки.Вставить("ИсточникДанных", ТаблицаПартий);
	ОписаниеИсточника = Новый Соответствие;
	ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
	ОписаниеИсточника.Вставить("Партия", "Партия");
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	
	ТаблицаГТД = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаГТД; 
	
КонецФункции // ПолучитьОстаткиГТДПартий() 

// Возвращает результат запроса, с таблицей незакрытых партий.
//
// Параметры:
//	ТаблицаТоваров - ТаблицаЗначений - таблица с товарами, для которых необходимо получить дерево партий.
//	СтарыеДвиженияПартий - 	ТаблицаЗначений - таблица, движений партий документов-оснований, где значения движений с
//							видом движения Приход взяты с обратным знаком.
//
// Возвращаемое значение:
//  ДеревоЗначений - Результат остатоков партий   
//
Функция ПолучитьДеревоПартий(ТаблицаТоваров, СтарыеДвиженияПартий)
	
	ДатаСреза = Неопределено;
	ГраницаРасчетаОстатков = Неопределено; 
	
	// Получим статус партии. Если и передаем товар на комиссию, то только собственный.
	СтатусПартии = Неопределено;
	ХозОперацияСделки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка.Сделка, "ХозОперация");	
	Если ХозОперацияСделки = Справочники.ХозОперации.РеализацияТоваровКомиссия Тогда
		СтатусПартии = Перечисления.СтатусыПартий.ТоварКупленный;
	КонецЕсли;
	
	ДатаМоментаВремени = Ссылка.Дата;
	ГраницаРасчетаОстатков = Новый МоментВремени(ДатаМоментаВремени, Ссылка);
	
	// Получим дату среза.
	ДатаСреза = ГраницаРасчетаОстатков.Дата;

	// Получим значения настроек 
	РежимВозврата = ПравоПользователя("РежимСписанияПриВозвратеПоставщику", ЭтотОбъект);
	
	// Чтение значения для списания по датам
	СтратегияСписанияПартийТоваровПоДатам = ПолучитьСтратегиюСписанияПоДатам(СкладКомпании, Организация, ДатаСреза);
	
	// Чтение значения для списания по статусам
	СтратегияСписанияПартийТоваровПоСтатусам = ПолучитьЗначениеУчетнойПолитики(
		"СтратегияСписанияПартийТоваровПоСтатусам",
		Организация,
		Дата,
		Истина);
	Если СтратегияСписанияПартийТоваровПоСтатусам = Перечисления.СтратегияСписанияПартийТоваровПоСтатусам.СначалаКупленныеПотомПринятые Тогда
		ПорядокСтатусов = "Убыв";
	ИначеЕсли СтратегияСписанияПартийТоваровПоСтатусам=Перечисления.СтратегияСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомКупленные Тогда
		ПорядокСтатусов = "Возр";
	Иначе
		ПорядокСтатусов = "";
	КонецЕсли;
	Если СтратегияСписанияПартийТоваровПоДатам=Перечисления.СтратегияСписанияПартийТоваровПоДатам.ЛИФО Тогда
		ПорядокСписанияПартий = "Убыв"; 
	Иначе
		ПорядокСписанияПартий = "Возр";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	0 КАК ПорядокСортировки,
		|	СтарыеДвиженияПартий.СкладКомпании КАК СкладКомпании,
		|	СтарыеДвиженияПартий.Номенклатура КАК Номенклатура,
		|	СтарыеДвиженияПартий.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СтарыеДвиженияПартий.СтатусПартии КАК СтатусПартии,
		|	СтарыеДвиженияПартий.Партия КАК Партия,
		|	СтарыеДвиженияПартий.Организация КАК Организация,
		|	СтарыеДвиженияПартий.Количество КАК Количество,
		|	СтарыеДвиженияПартий.Сумма КАК Сумма,
		|	СтарыеДвиженияПартий.СуммаНДС КАК СуммаНДС,
		|	СтарыеДвиженияПартий.СуммаБезНДС КАК СуммаБезНДС,
		|	СтарыеДвиженияПартий.СуммаУпр КАК СуммаУпр,
		|	СтарыеДвиженияПартий.СуммаНДСУпр КАК СуммаНДСУпр,
		|	СтарыеДвиженияПартий.СуммаБезНДСУпр КАК СуммаБезНДСУпр
		|ПОМЕСТИТЬ СтарыеДвиженияПартий
		|ИЗ
		|	&СтарыеДвиженияПартий КАК СтарыеДвиженияПартий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК ПорядокСортировки,
		|	ПартииТоваровКомпанииОстатки.СкладКомпании КАК СкладКомпании,
		|	ПартииТоваровКомпанииОстатки.Номенклатура КАК Номенклатура,
		|	ПартииТоваровКомпанииОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ПартииТоваровКомпанииОстатки.СтатусПартии КАК СтатусПартии,
		|	ПартииТоваровКомпанииОстатки.Партия КАК Партия,
		|	ПартииТоваровКомпанииОстатки.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА ПартииТоваровКомпанииОстатки.СтатусПартии = &Купленные
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПорядокСтатуса,
		|	ЕСТЬNULL(ПартииТоваровКомпанииОстатки.КоличествоОстаток, 0) КАК Количество,
		|	ЕСТЬNULL(ПартииТоваровКомпанииОстатки.СуммаОстаток, 0) КАК Сумма,
		|	ЕСТЬNULL(ПартииТоваровКомпанииОстатки.СуммаНДСОстаток, 0) КАК СуммаНДС,
		|	ЕСТЬNULL(ПартииТоваровКомпанииОстатки.СуммаБезНДСОстаток, 0) КАК СуммаБезНДС,
		|	ЕСТЬNULL(ПартииТоваровКомпанииОстатки.СуммаУпрОстаток, 0) КАК СуммаУпр,
		|	ЕСТЬNULL(ПартииТоваровКомпанииОстатки.СуммаНДСУпрОстаток, 0) КАК СуммаНДСУпр,
		|	ЕСТЬNULL(ПартииТоваровКомпанииОстатки.СуммаБезНДСУпрОстаток, 0) КАК СуммаБезНДСУпр
		|ПОМЕСТИТЬ ОстаткиПартийБезОснований
		|ИЗ
		|	РегистрНакопления.ПартииТоваровКомпании.Остатки(
		|			&Момент,
		|			Номенклатура В (&Номенклатура)
		|				И (&БезФильтраПоОрганизации
		|					ИЛИ Организация = &Организация)
		|				И СкладКомпании = &СкладКомпанииШапка) КАК ПартииТоваровКомпанииОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтарыеДвиженияПартий.ПорядокСортировки,
		|	СтарыеДвиженияПартий.СкладКомпании,
		|	СтарыеДвиженияПартий.Номенклатура,
		|	СтарыеДвиженияПартий.ХарактеристикаНоменклатуры,
		|	СтарыеДвиженияПартий.СтатусПартии,
		|	СтарыеДвиженияПартий.Партия,
		|	СтарыеДвиженияПартий.Организация,
		|	ВЫБОР
		|		КОГДА СтарыеДвиженияПартий.СтатусПартии = &Купленные
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	СтарыеДвиженияПартий.Количество,
		|	СтарыеДвиженияПартий.Сумма,
		|	СтарыеДвиженияПартий.СуммаНДС,
		|	СтарыеДвиженияПартий.СуммаБезНДС,
		|	СтарыеДвиженияПартий.СуммаУпр,
		|	СтарыеДвиженияПартий.СуммаНДСУпр,
		|	СтарыеДвиженияПартий.СуммаБезНДСУпр
		|ИЗ
		|	СтарыеДвиженияПартий КАК СтарыеДвиженияПартий
		|ГДЕ
		|	СтарыеДвиженияПартий.Номенклатура В (&Номенклатура)
		|	И СтарыеДвиженияПартий.СкладКомпании В (&СкладКомпании)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиПартийБезОснований.ПорядокСортировки КАК ПорядокСортировки,  
		|	ОстаткиПартийБезОснований.СкладКомпании КАК СкладКомпании,
		|	ОстаткиПартийБезОснований.Номенклатура КАК Номенклатура,
		|	ОстаткиПартийБезОснований.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ОстаткиПартийБезОснований.СтатусПартии КАК СтатусПартии,
		|	ОстаткиПартийБезОснований.Партия КАК Партия,
		|	ОстаткиПартийБезОснований.Организация КАК Организация,
		|	ОстаткиПартийБезОснований.ПорядокСтатуса КАК ПорядокСтатуса,
		|	СУММА(ОстаткиПартийБезОснований.Количество) КАК Количество,
		|	СУММА(ОстаткиПартийБезОснований.Сумма) КАК Сумма,
		|	СУММА(ОстаткиПартийБезОснований.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ОстаткиПартийБезОснований.СуммаБезНДС) КАК СуммаБезНДС,
		|	СУММА(ОстаткиПартийБезОснований.СуммаУпр) КАК СуммаУпр,
		|	СУММА(ОстаткиПартийБезОснований.СуммаНДСУпр) КАК СуммаНДСУпр,
		|	СУММА(ОстаткиПартийБезОснований.СуммаБезНДСУпр) КАК СуммаБезНДСУпр,
		|	ОстаткиПартийБезОснований.ХарактеристикаНоменклатуры.Сортировка КАК ХарактеристикаНоменклатурыСортировка,
		|	ОстаткиПартийБезОснований.Партия.Дата КАК ПартияДата
		|ПОМЕСТИТЬ ОстаткиПартийСгруппированные
		|ИЗ
		|	ОстаткиПартийБезОснований КАК ОстаткиПартийБезОснований
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиПартийБезОснований.ПорядокСортировки,
		|	ОстаткиПартийБезОснований.СкладКомпании,
		|	ОстаткиПартийБезОснований.Номенклатура,
		|	ОстаткиПартийБезОснований.ХарактеристикаНоменклатуры,
		|	ОстаткиПартийБезОснований.СтатусПартии,
		|	ОстаткиПартийБезОснований.Партия,
		|	ОстаткиПартийБезОснований.Организация,
		|	ОстаткиПартийБезОснований.ПорядокСтатуса,
		|	ОстаткиПартийБезОснований.ХарактеристикаНоменклатуры.Сортировка,
		|	ОстаткиПартийБезОснований.Партия.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиПартийСгруппированные.ПорядокСортировки КАК ПорядокСортировки,
		|	ОстаткиПартийСгруппированные.СкладКомпании КАК СкладКомпании,
		|	ОстаткиПартийСгруппированные.Номенклатура КАК Номенклатура,
		|	ОстаткиПартийСгруппированные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ОстаткиПартийСгруппированные.СтатусПартии КАК СтатусПартии,
		|	ОстаткиПартийСгруппированные.Партия КАК Партия,
		|	ОстаткиПартийСгруппированные.Организация КАК Организация,
		|	ОстаткиПартийСгруппированные.ПорядокСтатуса КАК ПорядокСтатуса,
		|	ОстаткиПартийСгруппированные.Количество КАК Количество,
		|	ОстаткиПартийСгруппированные.Сумма КАК Сумма,
		|	ОстаткиПартийСгруппированные.СуммаНДС КАК СуммаНДС,
		|	ОстаткиПартийСгруппированные.СуммаБезНДС КАК СуммаБезНДС,
		|	ОстаткиПартийСгруппированные.СуммаУпр КАК СуммаУпр,
		|	ОстаткиПартийСгруппированные.СуммаНДСУпр КАК СуммаНДСУпр,
		|	ОстаткиПартийСгруппированные.СуммаБезНДСУпр КАК СуммаБезНДСУпр,
		|	ОстаткиПартийСгруппированные.ХарактеристикаНоменклатурыСортировка КАК ХарактеристикаНоменклатурыСортировка,
		|	ОстаткиПартийСгруппированные.ПартияДата КАК ПартияДата
		|ИЗ
		|	ОстаткиПартийСгруппированные КАК ОстаткиПартийСгруппированные
		|
		|УПОРЯДОЧИТЬ ПО
		|	//ПОРЯДОКСОРТИРОВКИ
		|	" + ?(ПустаяСтрока(ПорядокСтатусов), "", "ПорядокСтатуса " + ПорядокСтатусов + ",")
			+ " ХарактеристикаНоменклатурыСортировка ВОЗР,"
			+ " ПартияДата " + ПорядокСписанияПартий + ","
			+ " Партия " + ПорядокСписанияПартий + "
		|	
		|ИТОГИ
		|	СУММА(Количество),
		|	СУММА(Сумма),
		|	СУММА(СуммаНДС),
		|	СУММА(СуммаБезНДС),
		|	СУММА(СуммаУпр),
		|	СУММА(СуммаНДСУпр),
		|	СУММА(СуммаБезНДСУпр)
		|ПО
		|	Номенклатура";
			
	// Добавляется сортировка в зависимости от версии объекта.
	// Для старых объектов эта сортировка не требуется,
	// чтобы не изменились старые движения по партиям.
	Если ВерсияОбъекта >= "02.00" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПОРЯДОКСОРТИРОВКИ", "ПорядокСортировки ВОЗР,");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СтарыеДвиженияПартий", СтарыеДвиженияПартий);
	Запрос.УстановитьПараметр("Купленные"           , Перечисления.СтатусыПартий.ТоварКупленный);
	Запрос.УстановитьПараметр("Момент"              , ГраницаРасчетаОстатков);
	СкладыКомпании = ТаблицаТоваров.ВыгрузитьКолонку("СкладКомпании");
	Запрос.УстановитьПараметр("СкладКомпании"       , СкладыКомпании);
	Запрос.УстановитьПараметр("СкладКомпанииШапка"  , СкладКомпании);
	Запрос.УстановитьПараметр("БезФильтраПоОрганизации", ЗапасыТоваров.ФильтрЗапросаПоОрганизации(ГраницаРасчетаОстатков.Дата));
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Номенклатура"        , ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура"));
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ПартииТоваровКомпании");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, Дата));
	СтруктураПараметровБлокировки.Вставить("ИсточникДанных", ТаблицаТоваров);
	ОписаниеИсточника = Новый Соответствие;
	ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
	ОписаниеИсточника.Вставить("СкладКомпании", "СкладКомпании");
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции // ПолучитьДеревоПартий()

// Считает разницу движений по партиям
//
// Параметры:
//  ПрошлыеДвижения	 - ТаблицаЗначений	- таблица движений по регистру Партий товаров компании до проведения документа.
//  БудущиеДвижения	 - ТаблицаЗначений	- таблица движений по регистру Партий товаров компании после проведения документа.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - 	таблица, с новыми движениями, в которой:
//							- удалены идентичные движения обоих таблиц;
//							- посчитана разница движений, которые отличаются количеством;
//                          - оставлены уникальные движения, которые отличаются чем-то, кроме как количеством
//
Функция ПосчитатьРазницуДвиженийПоПартиям(ПрошлыеДвижения, БудущиеДвижения)
	
	СтарыеДвижения = ПрошлыеДвижения.Скопировать();
	СтарыеДвижения.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Партия, СкладКомпании, Организация", "Количество");
	
	НовыеДвижения = БудущиеДвижения.Скопировать();
	НовыеДвижения.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Партия, СкладКомпании, Организация", "Количество");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтарыеДвижения.Номенклатура КАК Номенклатура,
		|	СтарыеДвижения.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СтарыеДвижения.Партия КАК Партия,
		|	СтарыеДвижения.Организация КАК Организация,
		|	СтарыеДвижения.СкладКомпании КАК СкладКомпании,
		|	СтарыеДвижения.Количество КАК Количество
		|ПОМЕСТИТЬ ВТ_СтарыеДвижения
		|ИЗ
		|	&СтарыеДвижения КАК СтарыеДвижения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НовыеДвижения.Номенклатура КАК Номенклатура,
		|	НовыеДвижения.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	НовыеДвижения.Партия КАК Партия,
		|	НовыеДвижения.Организация КАК Организация,
		|	НовыеДвижения.СкладКомпании КАК СкладКомпании,
		|	НовыеДвижения.Количество КАК Количество
		|ПОМЕСТИТЬ ВТ_НовыеДвижения
		|ИЗ
		|	&НовыеДвижения КАК НовыеДвижения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НовыеДвижения.Номенклатура КАК Номенклатура,
		|	ВТ_НовыеДвижения.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВТ_НовыеДвижения.Партия КАК Партия,
		|	ВТ_НовыеДвижения.Организация КАК Организация,
		|	ВТ_НовыеДвижения.СкладКомпании КАК СкладКомпании,
		|	ВТ_НовыеДвижения.Количество КАК Количество
		|ИЗ
		|	ВТ_СтарыеДвижения КАК ВТ_СтарыеДвижения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НовыеДвижения КАК ВТ_НовыеДвижения
		|		ПО ВТ_СтарыеДвижения.Номенклатура = ВТ_НовыеДвижения.Номенклатура
		|			И ВТ_СтарыеДвижения.ХарактеристикаНоменклатуры = ВТ_НовыеДвижения.ХарактеристикаНоменклатуры
		|			И ВТ_СтарыеДвижения.Партия = ВТ_НовыеДвижения.Партия
		|			И ВТ_СтарыеДвижения.СкладКомпании = ВТ_НовыеДвижения.СкладКомпании
		|			И ВТ_СтарыеДвижения.Количество = ВТ_НовыеДвижения.Количество
		|			И ВТ_СтарыеДвижения.Организация = ВТ_НовыеДвижения.Организация";
	
	Запрос.УстановитьПараметр("СтарыеДвижения", СтарыеДвижения);
	Запрос.УстановитьПараметр("НовыеДвижения", НовыеДвижения);
	
	ИдентичныеДвижения = Запрос.Выполнить().Выбрать();
	
	// Удалим идентичные движения из обеих таблиц.
	Пока ИдентичныеДвижения.Следующий() Цикл
		
		ОтборДвижения = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Партия, СкладКомпании, Количество, Организация", 
			ИдентичныеДвижения.Номенклатура,
			ИдентичныеДвижения.ХарактеристикаНоменклатуры,
			ИдентичныеДвижения.Партия,
			ИдентичныеДвижения.СкладКомпании,
			ИдентичныеДвижения.Количество,
			ИдентичныеДвижения.Организация);
			
		МассивСтрокСтарыхДвижений = СтарыеДвижения.НайтиСтроки(ОтборДвижения); 
		МассивСтрокНовыхДвижений = НовыеДвижения.НайтиСтроки(ОтборДвижения);
		
		Для Сч = 0 По МассивСтрокСтарыхДвижений.ВГраница() Цикл
			СтарыеДвижения.Удалить(МассивСтрокСтарыхДвижений[Сч]);
		КонецЦикла;
		
		Для Сч = 0 По МассивСтрокНовыхДвижений.ВГраница() Цикл
			НовыеДвижения.Удалить(МассивСтрокНовыхДвижений[Сч]);
		КонецЦикла;
		
	КонецЦикла;
	
	// Обрабатываем движения, отличающиеся только количеством.
	Для каждого НовоеДвижение Из НовыеДвижения Цикл
		ОтборДвижения = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Партия, СкладКомпании, Организация", 
			НовоеДвижение.Номенклатура,
			НовоеДвижение.ХарактеристикаНоменклатуры,
			НовоеДвижение.Партия,
			НовоеДвижение.СкладКомпании,
			НовоеДвижение.Организация);
			
		МассивСтрокСтарыхДвижений = СтарыеДвижения.НайтиСтроки(ОтборДвижения); 
		
		Для Сч = 0 По МассивСтрокСтарыхДвижений.ВГраница() Цикл
			НовоеДвижение.Количество = НовоеДвижение.Количество - МассивСтрокСтарыхДвижений[Сч].Количество;
			СтарыеДвижения.Удалить(МассивСтрокСтарыхДвижений[Сч]);
		КонецЦикла;
	КонецЦикла;
	
	// Объединяем в одну таблицу разницы движений.
	Для каждого СтароеДвижение Из СтарыеДвижения Цикл
		СтрокаНовогоДвижения = НовыеДвижения.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНовогоДвижения, СтароеДвижение);
		СтрокаНовогоДвижения.Количество = -СтрокаНовогоДвижения.Количество;
	КонецЦикла;
	
	Возврат НовыеДвижения;

КонецФункции // ПосчитатьРазницуДвиженийПоПартиям()

// Считает разницу движений по ГТД
//
// Параметры:
//  ПрошлыеДвижения	 - ТаблицаЗначений	- таблица движений по регистру ГТД партий товаров компании до проведения документа.
//  БудущиеДвижения	 - ТаблицаЗначений	- таблица движений по регистру ГТД партий товаров компании после проведения документа.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - 	таблица, с новыми движениями, в которой:
//							- удалены идентичные движения обоих таблиц;
//							- посчитана разница движений, которые отличаются количеством;
//                          - оставлены уникальные движения, которые отличаются чем-то, кроме как количеством
//
Функция ПосчитатьРазницуДвиженийПоГТД(ПрошлыеДвижения, БудущиеДвижения)
	
	СтарыеДвижения = ПрошлыеДвижения.Скопировать();
	СтарыеДвижения.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Партия, СкладКомпании, ГТД, Организация", "Количество");
	
	НовыеДвижения = БудущиеДвижения.Скопировать();
	НовыеДвижения.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Партия, СкладКомпании, ГТД, Организация", "Количество");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтарыеДвижения.Номенклатура КАК Номенклатура,
		|	СтарыеДвижения.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СтарыеДвижения.Партия КАК Партия,
		|	СтарыеДвижения.Организация КАК Организация,
		|	СтарыеДвижения.СкладКомпании КАК СкладКомпании,
		|	СтарыеДвижения.Количество КАК Количество,
		|	СтарыеДвижения.ГТД КАК ГТД
		|ПОМЕСТИТЬ ВТ_СтарыеДвижения
		|ИЗ
		|	&СтарыеДвижения КАК СтарыеДвижения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НовыеДвижения.Номенклатура КАК Номенклатура,
		|	НовыеДвижения.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	НовыеДвижения.Партия КАК Партия,
		|	НовыеДвижения.Организация КАК Организация,
		|	НовыеДвижения.СкладКомпании КАК СкладКомпании,
		|	НовыеДвижения.Количество КАК Количество,
		|	НовыеДвижения.ГТД КАК ГТД
		|ПОМЕСТИТЬ ВТ_НовыеДвижения
		|ИЗ
		|	&НовыеДвижения КАК НовыеДвижения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НовыеДвижения.Номенклатура КАК Номенклатура,
		|	ВТ_НовыеДвижения.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВТ_НовыеДвижения.Партия КАК Партия,
		|	ВТ_НовыеДвижения.Организация КАК Организация,
		|	ВТ_НовыеДвижения.СкладКомпании КАК СкладКомпании,
		|	ВТ_НовыеДвижения.Количество КАК Количество,
		|	ВТ_НовыеДвижения.ГТД КАК ГТД
		|ИЗ
		|	ВТ_СтарыеДвижения КАК ВТ_СтарыеДвижения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НовыеДвижения КАК ВТ_НовыеДвижения
		|		ПО ВТ_СтарыеДвижения.Номенклатура = ВТ_НовыеДвижения.Номенклатура
		|			И ВТ_СтарыеДвижения.ХарактеристикаНоменклатуры = ВТ_НовыеДвижения.ХарактеристикаНоменклатуры
		|			И ВТ_СтарыеДвижения.Партия = ВТ_НовыеДвижения.Партия
		|			И ВТ_СтарыеДвижения.СкладКомпании = ВТ_НовыеДвижения.СкладКомпании
		|			И ВТ_СтарыеДвижения.Количество = ВТ_НовыеДвижения.Количество
		|			И ВТ_СтарыеДвижения.ГТД = ВТ_НовыеДвижения.ГТД
		|			И ВТ_СтарыеДвижения.Организация = ВТ_НовыеДвижения.Организация";
	
	Запрос.УстановитьПараметр("СтарыеДвижения", СтарыеДвижения);
	Запрос.УстановитьПараметр("НовыеДвижения", НовыеДвижения);
	
	ИдентичныеДвижения = Запрос.Выполнить().Выбрать();
	
	// Удалим идентичные движения из обеих таблиц.
	Пока ИдентичныеДвижения.Следующий() Цикл
		
		ОтборДвижения = Новый Структура();
		ОтборДвижения.Вставить("Номенклатура",               ИдентичныеДвижения.Номенклатура);
		ОтборДвижения.Вставить("ХарактеристикаНоменклатуры", ИдентичныеДвижения.ХарактеристикаНоменклатуры);
		ОтборДвижения.Вставить("Партия",                     ИдентичныеДвижения.Партия);
		ОтборДвижения.Вставить("СкладКомпании",              ИдентичныеДвижения.СкладКомпании);
		ОтборДвижения.Вставить("ГТД",                        ИдентичныеДвижения.ГТД);
		ОтборДвижения.Вставить("Количество",                 ИдентичныеДвижения.Количество);
		ОтборДвижения.Вставить("Организация",                ИдентичныеДвижения.Организация);
		
		МассивСтрокСтарыхДвижений = СтарыеДвижения.НайтиСтроки(ОтборДвижения); 
		МассивСтрокНовыхДвижений = НовыеДвижения.НайтиСтроки(ОтборДвижения);
		
		Для Сч = 0 По МассивСтрокСтарыхДвижений.ВГраница() Цикл 
			
			СтарыеДвижения.Удалить(МассивСтрокСтарыхДвижений[Сч]);
			
		КонецЦикла;
		
		Для Сч = 0 По МассивСтрокНовыхДвижений.ВГраница() Цикл
			
			НовыеДвижения.Удалить(МассивСтрокНовыхДвижений[Сч]);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Обрабатываем движения, отличающиеся только количеством.
	Для каждого НовоеДвижение Из НовыеДвижения Цикл
		
		ОтборДвижения = Новый Структура();
		ОтборДвижения.Вставить("Номенклатура",               НовоеДвижение.Номенклатура);
		ОтборДвижения.Вставить("ХарактеристикаНоменклатуры", НовоеДвижение.ХарактеристикаНоменклатуры);
		ОтборДвижения.Вставить("Партия",                     НовоеДвижение.Партия);
		ОтборДвижения.Вставить("СкладКомпании",              НовоеДвижение.СкладКомпании);
		ОтборДвижения.Вставить("ГТД",                        НовоеДвижение.ГТД);
		ОтборДвижения.Вставить("Организация",                НовоеДвижение.Организация);
			
		МассивСтрокСтарыхДвижений = СтарыеДвижения.НайтиСтроки(ОтборДвижения); 
		
		Для Сч = 0 По МассивСтрокСтарыхДвижений.ВГраница() Цикл
			
			НовоеДвижение.Количество = НовоеДвижение.Количество - МассивСтрокСтарыхДвижений[Сч].Количество;
			СтарыеДвижения.Удалить(МассивСтрокСтарыхДвижений[Сч]);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Объединяем в одну таблицу разницы движений.
	Для каждого СтароеДвижение Из СтарыеДвижения Цикл
		
		СтрокаНовогоДвижения = НовыеДвижения.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНовогоДвижения, СтароеДвижение);
		СтрокаНовогоДвижения.Количество = -СтрокаНовогоДвижения.Количество;
		
	КонецЦикла;
	
	Возврат НовыеДвижения;
	
КонецФункции // ПосчитатьРазницуДвиженийПоГТД()

Функция ПроверитьПродажуНижеСебестоимости(ТаблицаТовары, СтрокаТовар,
		МинимальныеНаценки,
		Показатели,
		Пользователь,
		ТаблицаМинимальныхНаценок)
	
	Результат = Истина;
	
	// определим процент минимальной наценки для переданной номенклатуры
	ПроцентНаценки = МинимальныеНаценки.Получить(СтрокаТовар.Номенклатура);
	Если ПроцентНаценки = Неопределено Тогда
		
		ПроцентНаценки = ОпределитьПроцентНаценки(СтрокаТовар.Номенклатура, Пользователь.ТекущийПользователь, ТаблицаМинимальныхНаценок);
		Если ПроцентНаценки = Неопределено Тогда
			ПроцентНаценки = ОпределитьПроцентНаценки(СтрокаТовар.Номенклатура, Пользователь.ГруппаДоступа, ТаблицаМинимальныхНаценок);
			Если ПроцентНаценки = Неопределено Тогда
				ПроцентНаценки = ОпределитьПроцентНаценки(СтрокаТовар.Номенклатура, Неопределено, ТаблицаМинимальныхНаценок);
				Если ПроцентНаценки = Неопределено Тогда
					ПроцентНаценки = ОпределитьПроцентНаценки(Справочники.Номенклатура.ПустаяСсылка(), Пользователь.ТекущийПользователь, ТаблицаМинимальныхНаценок);
					Если ПроцентНаценки = Неопределено Тогда
						ПроцентНаценки = ОпределитьПроцентНаценки(Справочники.Номенклатура.ПустаяСсылка(), Пользователь.ГруппаДоступа, ТаблицаМинимальныхНаценок);
						Если ПроцентНаценки = Неопределено Тогда
							ПроцентНаценки = ОпределитьПроцентНаценки(Справочники.Номенклатура.ПустаяСсылка(), Неопределено, ТаблицаМинимальныхНаценок);
							Если ПроцентНаценки = Неопределено Тогда
								ПроцентНаценки = 0;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		МинимальныеНаценки.Вставить(СтрокаТовар.Номенклатура, ПроцентНаценки);
	КонецЕсли;
	
	НижеСебестоимости = Ложь;
	ОбщаяСистемаНалогообложения = Показатели.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая;
	РасчетРегл = (ВалютаДокумента = Показатели.ВалютаРегл) И (КурсДокумента = Показатели.КурсРегл);
	
	Если ОбщаяСистемаНалогообложения Тогда
		Себестоимость = Показатели.СебестоимостьБезНДС;
		СебестоимостьУпр = Показатели.СебестоимостьБезНДСУпр;
		Сумма = Показатели.СуммаБезНДС;
		СуммаУпр = Показатели.СуммаБезНДСУпр;
	Иначе
		Себестоимость = Показатели.Себестоимость;
		СебестоимостьУпр = Показатели.СебестоимостьУпр;
		Сумма = Показатели.Сумма;
		СуммаУпр = Показатели.СуммаУпр;
	КонецЕсли;
	
	Если РасчетРегл Тогда
		МинимальнаяСумма = Себестоимость * (1 + ПроцентНаценки / 100);
		Если МинимальнаяСумма > Сумма Тогда 
			НижеСебестоимости = Истина; 
		КонецЕсли;
	Иначе
		МинимальнаяСуммаУпр = СебестоимостьУпр * (1 + ПроцентНаценки / 100);
		Если МинимальнаяСуммаУпр > СуммаУпр Тогда
			НижеСебестоимости = Истина; 
		КонецЕсли;
	КонецЕсли; 
	
	Если НижеСебестоимости Тогда
		Если РасчетРегл Тогда
			РасчетВалюта = Показатели.ВалютаРегл;
		Иначе
			РасчетВалюта = Показатели.ВалютаУпр;
		КонецЕсли;
		Если ПроцентНаценки = 0 Тогда
			СтрокаИнформации = " " + НСтр("ru = 'Себестоимость товара %1 %2%4, сумма продажи %3 %2%4. Продажа ниже себестоимости запрещена.'");
			СтрокаИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				СтрокаИнформации,
				?(РасчетРегл, МинимальнаяСумма, МинимальнаяСуммаУпр),
				РасчетВалюта,
				?(РасчетРегл, Сумма, СуммаУпр),
				?(ОбщаяСистемаНалогообложения, " " + НСтр("ru = 'без НДС'"), "")
			);
			
			ТекстСообщения = НСтр("ru = '[%1] Товар %2%3'");
			ВывестиСообщение(
				ТекстСообщения + СтрокаИнформации,
				СтрокаТовар.Номенклатура,
				, , ,
				УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаТовар.Номенклатура),
				СтрокаТовар.Номенклатура,
				?(ЗначениеЗаполнено(СтрокаТовар.ХарактеристикаНоменклатуры)," " + НСтр("ru = 'с характеристикой'") +" " 
					+ СокрЛП(СтрокаТовар.ХарактеристикаНоменклатуры) + ".", ".")
			);
		Иначе
			СтрокаИнформации = " " + НСтр("ru = 'Себестоимость товара с установленной минимальной наценкой %1 %2 %5, сумма продажи %3 %4 %5. Продажа ниже себестоимости с минимальной наценкой запрещена.'");
			СтрокаИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				СтрокаИнформации,
				?(РасчетРегл, МинимальнаяСумма, МинимальнаяСуммаУпр),
				РасчетВалюта,
				?(РасчетРегл, Сумма, СуммаУпр),
				?(ОбщаяСистемаНалогообложения, " " + НСтр("ru = 'без НДС'"), "")
			);
			
			ТекстСообщения = НСтр("ru = '[%1] Товар %2%3 Минимальная наценка %4 %.'");
			ВывестиСообщение(
				ТекстСообщения + СтрокаИнформации,
				СтрокаТовар.Номенклатура,
				, , ,
				УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаТовар.Номенклатура),
				СтрокаТовар.Номенклатура,
				?(ЗначениеЗаполнено(СтрокаТовар.ХарактеристикаНоменклатуры)," " + НСтр("ru = 'с характеристикой'") +" " 
					+ СокрЛП(СтрокаТовар.ХарактеристикаНоменклатуры) + ".", "."),
				ПроцентНаценки
			);
		КонецЕсли;
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определить процент наценки
//
Функция ОпределитьПроцентНаценки(Номенклатура, Пользователь, ТаблицаМинимальныхНаценок);
	
	ОтборМинимальнойНаценки = Новый Структура("Номенклатура, Пользователь", Номенклатура, Пользователь);
	НайденныеСтроки = ТаблицаМинимальныхНаценок.НайтиСтроки(ОтборМинимальнойНаценки);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ПроцентНаценки = НайденныеСтроки[0].ПроцентНаценки;
		
	КонецЕсли;
	
	Возврат ПроцентНаценки;
	
КонецФункции

Функция АвторизованныйПользователь()
	
	Пользователь = Новый Структура;
	Пользователь.Вставить("ТекущийПользователь", ПользователиКлиентСервер.АвторизованныйПользователь());
	
	ЗапросГруппыДоступа = Новый Запрос;
	ЗапросГруппыДоступа.Текст = 
		"ВЫБРАТЬ
		|	ГруппыДоступаПользователи.Ссылка
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|ГДЕ
		|	ГруппыДоступаПользователи.Пользователь = &Пользователь
		|	И НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления";
	ЗапросГруппыДоступа.УстановитьПараметр("Пользователь", Пользователь.ТекущийПользователь);
	
	Выборка = ЗапросГруппыДоступа.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Пользователь.Вставить("ГруппаДоступа", Выборка.Ссылка);
	Иначе
		Пользователь.Вставить("ГруппаДоступа", Справочники.ГруппыДоступа.ПустаяСсылка());
	КонецЕсли;
	
	Возврат Пользователь;
	
КонецФункции 

Функция ТаблицаМинимальныхНаценок(РежимПроведения, Пользователь, ТаблицаТовары)
	
	ЗапросПолученияНаценок = Новый Запрос;
	ЗапросПолученияНаценок.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ТипНоменклатуры
	|ПОМЕСТИТЬ СписокНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Товары)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МинимальнаяНаценкаСрезПоследних.Пользователь,
	|	ЕСТЬNULL(СписокНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	МинимальнаяНаценкаСрезПоследних.ТипНоменклатуры,
	|	МинимальнаяНаценкаСрезПоследних.ПроцентНаценки
	|ИЗ
	|	РегистрСведений.МинимальнаяНаценка.СрезПоследних(
	|			&МоментВремени,
	|			(Пользователь = &Пользователь
	|				ИЛИ Пользователь = &ГруппаДоступа
	|				ИЛИ Пользователь = НЕОПРЕДЕЛЕНО)
	|				И (ТипНоменклатуры В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							ТТ.ТипНоменклатуры
	|						ИЗ
	|							СписокНоменклатуры КАК ТТ)
	|					ИЛИ ТипНоменклатуры = ЗНАЧЕНИЕ(Справочник.ТипыНоменклатуры.ПустаяСсылка))) КАК МинимальнаяНаценкаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокНоменклатуры КАК СписокНоменклатуры
	|		ПО МинимальнаяНаценкаСрезПоследних.ТипНоменклатуры = СписокНоменклатуры.ТипНоменклатуры
	|ГДЕ
	|	МинимальнаяНаценкаСрезПоследних.Активна";
	
	ЗапросПолученияНаценок.УстановитьПараметр("МоментВремени", ?(РежимПроведения = РежимПроведенияДокумента.Оперативный, Неопределено, Ссылка.МоментВремени()));
	ЗапросПолученияНаценок.УстановитьПараметр("Пользователь", Пользователь.ТекущийПользователь);
	ЗапросПолученияНаценок.УстановитьПараметр("ГруппаДоступа", Пользователь.ГруппаДоступа);
	ЗапросПолученияНаценок.УстановитьПараметр("Товары", ТаблицаТовары.ВыгрузитьКолонку("Номенклатура"));
	ТаблицаМинимальныхНаценок = ЗапросПолученияНаценок.Выполнить().Выгрузить();
	
	Возврат ТаблицаМинимальныхНаценок;
	
КонецФункции

Функция ПосчитатьРазницуДвиженийПоПродажам(СтарыеДвижения, НовыеДвижения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтарыеДвижения.Номенклатура КАК Номенклатура,
		|	СтарыеДвижения.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СтарыеДвижения.Партия КАК Партия,
		|	СтарыеДвижения.СкладКомпании КАК СкладКомпании,
		|	СтарыеДвижения.Количество КАК Количество,
		|	СтарыеДвижения.ГТД КАК ГТД,
		|	СтарыеДвижения.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВТ_СтарыеДвижения
		|ИЗ
		|	&СтарыеДвижения КАК СтарыеДвижения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НовыеДвижения.Номенклатура КАК Номенклатура,
		|	НовыеДвижения.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	НовыеДвижения.Партия КАК Партия,
		|	НовыеДвижения.СкладКомпании КАК СкладКомпании,
		|	НовыеДвижения.Количество КАК Количество,
		|	НовыеДвижения.ГТД КАК ГТД,
		|	НовыеДвижения.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВТ_НовыеДвижения
		|ИЗ
		|	&НовыеДвижения КАК НовыеДвижения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НовыеДвижения.Номенклатура КАК Номенклатура,
		|	ВТ_НовыеДвижения.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВТ_НовыеДвижения.Партия КАК Партия,
		|	ВТ_НовыеДвижения.СкладКомпании КАК СкладКомпании,
		|	ВТ_НовыеДвижения.Количество КАК Количество,
		|	ВТ_НовыеДвижения.ГТД КАК ГТД
		|ИЗ
		|	ВТ_СтарыеДвижения КАК ВТ_СтарыеДвижения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НовыеДвижения КАК ВТ_НовыеДвижения
		|		ПО ВТ_СтарыеДвижения.Номенклатура = ВТ_НовыеДвижения.Номенклатура
		|			И ВТ_СтарыеДвижения.ХарактеристикаНоменклатуры = ВТ_НовыеДвижения.ХарактеристикаНоменклатуры
		|			И ВТ_СтарыеДвижения.Партия = ВТ_НовыеДвижения.Партия
		|			И ВТ_СтарыеДвижения.СкладКомпании = ВТ_НовыеДвижения.СкладКомпании
		|			И ВТ_СтарыеДвижения.Количество = ВТ_НовыеДвижения.Количество
		|			И ВТ_СтарыеДвижения.ГТД = ВТ_НовыеДвижения.ГТД
		|			И ВТ_СтарыеДвижения.Сумма = ВТ_НовыеДвижения.Сумма";
	
	Запрос.УстановитьПараметр("СтарыеДвижения", СтарыеДвижения);
	Запрос.УстановитьПараметр("НовыеДвижения", НовыеДвижения);
	
	ИдентичныеДвижения = Запрос.Выполнить().Выбрать();
	
	// Удалим идентичные движения из обеих таблиц.
	Пока ИдентичныеДвижения.Следующий() Цикл
		
		ОтборДвижения = Новый Структура();
		ОтборДвижения.Вставить("Номенклатура",               ИдентичныеДвижения.Номенклатура);
		ОтборДвижения.Вставить("ХарактеристикаНоменклатуры", ИдентичныеДвижения.ХарактеристикаНоменклатуры);
		ОтборДвижения.Вставить("Партия",                     ИдентичныеДвижения.Партия);
		ОтборДвижения.Вставить("СкладКомпании",              ИдентичныеДвижения.СкладКомпании);
		ОтборДвижения.Вставить("ГТД",                        ИдентичныеДвижения.ГТД);
		ОтборДвижения.Вставить("Количество",                 ИдентичныеДвижения.Количество);
			
		МассивСтрокСтарыхДвижений = СтарыеДвижения.НайтиСтроки(ОтборДвижения); 
		МассивСтрокНовыхДвижений = НовыеДвижения.НайтиСтроки(ОтборДвижения);
		
		Для Сч = 0 По МассивСтрокСтарыхДвижений.ВГраница() Цикл 
			
			СтарыеДвижения.Удалить(МассивСтрокСтарыхДвижений[Сч]);
			
		КонецЦикла;
		
		Для Сч = 0 По МассивСтрокНовыхДвижений.ВГраница() Цикл
			
			НовыеДвижения.Удалить(МассивСтрокНовыхДвижений[Сч]);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Обрабатываем движения, отличающиеся только количеством.
	НомерСтроки = 0; 
	Для каждого НовоеДвижение Из НовыеДвижения Цикл
		
		ОтборДвижения = Новый Структура();
		ОтборДвижения.Вставить("Номенклатура",               НовоеДвижение.Номенклатура);
		ОтборДвижения.Вставить("ХарактеристикаНоменклатуры", НовоеДвижение.ХарактеристикаНоменклатуры);
		ОтборДвижения.Вставить("Партия",                     НовоеДвижение.Партия);
		ОтборДвижения.Вставить("СкладКомпании",              НовоеДвижение.СкладКомпании);
		ОтборДвижения.Вставить("ГТД",                        НовоеДвижение.ГТД);
			
		МассивСтрокСтарыхДвижений = СтарыеДвижения.НайтиСтроки(ОтборДвижения); 
		
		Для Сч = 0 По МассивСтрокСтарыхДвижений.ВГраница() Цикл
			
			НовоеДвижение.Количество = НовоеДвижение.Количество - МассивСтрокСтарыхДвижений[Сч].Количество;
			СтарыеДвижения.Удалить(МассивСтрокСтарыхДвижений[Сч]);
			
		КонецЦикла;
		
		
		НовоеДвижение.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;

	Возврат НовыеДвижения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

ТекущаяВерсияОбъекта = "02.00";
