// Модуль документа "Ввод остатков взаиморасчетов"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)

	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, "ВхДокНомер,ВхДокДатаВрем") Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	СпособВеденияВзаиморасчетовДоговоров = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		Состав.ВыгрузитьКолонку("ДоговорВзаиморасчетов"),
		"СпособВеденияВзаиморасчетов");
	
	Для Каждого Строка Из Состав Цикл
		СпособВеденияВзаиморасчетов = СпособВеденияВзаиморасчетовДоговоров.Получить(Строка.ДоговорВзаиморасчетов);
		Если СпособВеденияВзаиморасчетов = Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам
			И Не ЗначениеЗаполнено(Строка.ТипРасчета) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Не заполнена колонка ""Тип расчета"" в строке %1 списка ""Состав""'"),
					Строка.НомерСтроки
				),
				ЭтотОбъект,,,
				Отказ
			);
		ИначеЕсли СпособВеденияВзаиморасчетов = Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоСделкам
			И Не ЗначениеЗаполнено(Строка.СпособЗачетаАвансов) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Не заполнен ""Способ зачета сделок"" в строке %1 списка ""Состав""'"),
					Строка.НомерСтроки
				),
				ЭтотОбъект,
				СтрШаблон("Состав[%1]СпособЗачетаАвансов", Строка.НомерСтроки),,
				Отказ
			);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	СпособВеденияВзаиморасчетовДоговоров = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		Состав.ВыгрузитьКолонку("ДоговорВзаиморасчетов"),
		"СпособВеденияВзаиморасчетов");
	
	// проводим
	НаборЗаписейВзаиморасчетыКомпании=Движения.ВзаиморасчетыКомпании;
	НаборЗаписейВзаиморасчетыКомпании.РежимПроведения=РежимПроведения;
	
	НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
	НаборЗаписейДоходыИРасходы.ВУпрВалюте=(ВалютаДокумента=Константы.ВалютаУправленческогоУчетаКомпании.Получить());
	
	Дебет=0; Кредит=0; 
	
	// Получим способ ведения баланса.
	БалансВедетсяПоПодразделению = БалансВедетсяПоПодразделениям(Дата);
	
	// Создадим временную таблицу для накопления движений по регистру "Доходы и расходы".
	// Ее назначение - уменьшить количество записей по регистру. 
	ТаблицаВзаиморасчетов = Новый ТаблицаЗначений;
	ТаблицаВзаиморасчетов.Колонки.Добавить("Подразделение",  Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаУпрДебет",  Новый ОписаниеТипов("Число"));	
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаУпрКредит", Новый ОписаниеТипов("Число"));
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаУпрСуммоваяРазница", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаТЧ Из Состав Цикл
		
		ПоРасчетнымДокументам = СпособВеденияВзаиморасчетовДоговоров.Получить(СтрокаТЧ.ДоговорВзаиморасчетов) =
			Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам;
		
		СуммаДоходаРасходаСуммовыхРазниц = 0;
		Сделка = СтрокаТЧ.Сделка;
		Если СтрокаТЧ.СуммаДебет <> 0 И Не ПоРасчетнымДокументам Тогда
			// Проведем задолженность контрагента по взаиморасчетам
			НаборЗаписейВзаиморасчетыКомпании.ДокументОбъект        = ЭтотОбъект;
			НаборЗаписейВзаиморасчетыКомпании.Контрагент            = СтрокаТЧ.Контрагент;
			НаборЗаписейВзаиморасчетыКомпании.КурсВзаиморасчетов    = СтрокаТЧ.КурсВалютыВзаиморасчетов;
			НаборЗаписейВзаиморасчетыКомпании.ДоговорВзаиморасчетов = СтрокаТЧ.ДоговорВзаиморасчетов;
			
			Если ЗначениеЗаполнено(Сделка)Тогда
				НаборЗаписейВзаиморасчетыКомпании.Сделка = Сделка;
				НаборЗаписейВзаиморасчетыКомпании.ВзаиморасчетыСПокупателем=Ложь;
			Иначе
				НаборЗаписейВзаиморасчетыКомпании.Сделка = Неопределено;
			КонецЕсли;
			НаборЗаписейВзаиморасчетыКомпании.АвтоЗакрытиеСделок    =
				(СтрокаТЧ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически);
			НаборЗаписейВзаиморасчетыКомпании.Сумма                 = СтрокаТЧ.СуммаДебет;
			НаборЗаписейВзаиморасчетыКомпании.СуммаДоходаРасходаСуммовыхРазниц = 0;
			Отказ = НЕ НаборЗаписейВзаиморасчетыКомпании.Приход() ИЛИ Отказ;
			Дебет = Дебет + СтрокаТЧ.СуммаДебет;
			СуммаДоходаРасходаСуммовыхРазниц = НаборЗаписейВзаиморасчетыКомпании.СуммаДоходаРасходаСуммовыхРазниц;
		КонецЕсли;
		
		Если СтрокаТЧ.СуммаКредит <> 0 И Не ПоРасчетнымДокументам Тогда
			// Проведем задолженность перед контрагентом по взаиморасчетам
			НаборЗаписейВзаиморасчетыКомпании.ДокументОбъект            = ЭтотОбъект;
			НаборЗаписейВзаиморасчетыКомпании.Контрагент                = СтрокаТЧ.Контрагент;
			НаборЗаписейВзаиморасчетыКомпании.КурсВзаиморасчетов        = СтрокаТЧ.КурсВалютыВзаиморасчетов; 
			НаборЗаписейВзаиморасчетыКомпании.ДоговорВзаиморасчетов     = СтрокаТЧ.ДоговорВзаиморасчетов;
			
			Если ЗначениеЗаполнено(Сделка)Тогда
				НаборЗаписейВзаиморасчетыКомпании.Сделка = Сделка;
				НаборЗаписейВзаиморасчетыКомпании.ВзаиморасчетыСПокупателем=Истина;
			Иначе
				НаборЗаписейВзаиморасчетыКомпании.Сделка=Неопределено;
			КонецЕсли;
			
			НаборЗаписейВзаиморасчетыКомпании.Сумма                     = СтрокаТЧ.СуммаКредит;
			НаборЗаписейВзаиморасчетыКомпании.СуммаДоходаРасходаСуммовыхРазниц = 0;
			Отказ  = НЕ НаборЗаписейВзаиморасчетыКомпании.Расход() ИЛИ Отказ;
			Кредит = Кредит + СтрокаТЧ.СуммаКредит;
			СуммаДоходаРасходаСуммовыхРазниц = СуммаДоходаРасходаСуммовыхРазниц + НаборЗаписейВзаиморасчетыКомпании.СуммаДоходаРасходаСуммовыхРазниц;
		КонецЕсли; 
		Если СтрокаТЧ.СуммаДебет<>0 ИЛИ СтрокаТЧ.СуммаКредит<>0 Тогда
			НоваяСтрока = ТаблицаВзаиморасчетов.Добавить();	
			Если БалансВедетсяПоПодразделению Тогда
				НоваяСтрока.Подразделение = СтрокаТЧ.ДоговорВзаиморасчетов.ПодразделениеКомпании;
			Иначе
				// Если баланс ведется не по подразделениям, то в качестве подразделения должно быть
				// подразделение документа (шапки).
				НоваяСтрока.Подразделение = ПодразделениеКомпании;
			КонецЕсли;
			НоваяСтрока.СуммаУпрДебет           = СтрокаТЧ.СуммаДебет;
			НоваяСтрока.СуммаУпрКредит          = СтрокаТЧ.СуммаКредит;
			НоваяСтрока.СуммаУпрСуммоваяРазница = СуммаДоходаРасходаСуммовыхРазниц;
		КонецЕсли; 
	КонецЦикла;
	
	Документы.ВводОстатковВзаиморасчетов.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	Документы.ВводОстатковВзаиморасчетов.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	Документы.ВводОстатковВзаиморасчетов.СформироватьТаблицуДоходыИРасходы(ДополнительныеСвойства);
	
	// Создаем движения по регистру "Доходы и расходы"
	
	ТаблицаВзаиморасчетов.Свернуть("Подразделение", "СуммаУпрДебет, СуммаУпрКредит, СуммаУпрСуммоваяРазница");
	
	Для Каждого ТекСтрока Из ТаблицаВзаиморасчетов Цикл  
		НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДоходыИРасходы.Подразделение          = ТекСтрока.Подразделение;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.ВводОстатковВзаиморасчетов;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Ложь;
		НаборЗаписейДоходыИРасходы.Доход                  = ТекСтрока.СуммаУпрДебет;
		НаборЗаписейДоходыИРасходы.Расход                 = ТекСтрока.СуммаУпрКредит;
		Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ; 
		
		// Теперь суммовые разницы
		НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДоходыИРасходы.Подразделение          = ТекСтрока.Подразделение;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.СуммовыеРазницы;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте = Истина;
		Если ТекСтрока.СуммаУпрСуммоваяРазница<0 Тогда
			НаборЗаписейДоходыИРасходы.Расход = -ТекСтрока.СуммаУпрСуммоваяРазница;
			НаборЗаписейДоходыИРасходы.Доход  = 0;
		Иначе
			НаборЗаписейДоходыИРасходы.Доход  = ТекСтрока.СуммаУпрСуммоваяРазница;
			НаборЗаписейДоходыИРасходы.Расход = 0;
		КонецЕсли;
		Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ; 		
	КонецЦикла;
	
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	// двигаем границу последовательности взаиморасчетов
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
