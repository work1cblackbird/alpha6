// Модуль менеджера документа "Ввод остатков взаиморасчетов"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Состав.Итог("СуммаДебет") + Объект.Состав.Итог("СуммаКредит"));
	ИтогиОперации.Вставить("СуммаДебет",   Объект.Состав.Итог("СуммаДебет"));
	ИтогиОперации.Вставить("СуммаКредит", Объект.Состав.Итог("СуммаКредит"));
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

Процедура ПересчитатьКурсВзаиморасчетовПоСделке(Объект, Строка)
	
	Если ЕстьРеквизит(Строка, "СпособВеденияВзаиморасчетов") Тогда
		СпособВеденияВзаиморасчетов = Строка.СпособВеденияВзаиморасчетов;
	Иначе
		СпособВеденияВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Строка.ДоговорВзаиморасчетов,
			"СпособВеденияВзаиморасчетов");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.Сделка)
		И СпособВеденияВзаиморасчетов = Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам
		И Не РасчетыСКонтрагентамиСервер.ДоступныеТипыДокументовРасчета().СодержитТип(ТипЗнч(Строка.Сделка)) Тогда
		Строка.Сделка = Неопределено;
	КонецЕсли;
	
	ПолучитьКурсВзаиморасчетовПоДокументу = Истина;
	Если СпособВеденияВзаиморасчетов = Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам
		И ЗначениеЗаполнено(Строка.Сделка) Тогда
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Контрагент", Строка.Контрагент);
		СтруктураОтбора.Вставить("ДоговорВзаиморасчетов", Строка.ДоговорВзаиморасчетов);
		СтруктураОтбора.Вставить("ДокументРасчетов", Строка.Сделка);
		СтруктураОтбора.Вставить("Заказ", Строка.Заказ);
		тзДолги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(СтруктураОтбора, Объект.Дата);
		
		СуммаОстаток = тзДолги.Итог("Сумма");
		СуммаОстатокБаз = тзДолги.Итог("СуммаБаз");
	
		Если СуммаОстаток <> 0 Тогда
			
			Строка.КурсВалютыВзаиморасчетов = СуммаОстатокБаз / СуммаОстаток;
			ПолучитьКурсВзаиморасчетовПоДокументу = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПолучитьКурсВзаиморасчетовПоДокументу Тогда
		Строка.КурсВалютыВзаиморасчетов = РаботаСКурсамиВалютПлатформа.ПолучитьКурсВалютыВзаиморасчетов(
			Объект,
			Строка.ДоговорВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Состав");
	КонецЕсли;

	// Обязательные реквизиты состава
	ОбязательныеРеквизиты.Добавить("Состав.Контрагент");
	ОбязательныеРеквизиты.Добавить("Состав.ХозОперация");
	ОбязательныеРеквизиты.Добавить("Состав.ДоговорВзаиморасчетов");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы состава
	УникальныеСостав = Новый Массив;
	УникальныеСостав.Добавить("Контрагент");
	УникальныеСостав.Добавить("ДоговорВзаиморасчетов");
	УникальныеСостав.Добавить("Сделка");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти=Новый Структура("Состав", УникальныеСостав);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
		
	КонтролируемыеРеквизитыТЧ = Новый Структура();
	КонтролируемыеРеквизитыТЧ.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	КонтролируемыеРеквизитыТЧ.Вставить("Сделка", КонтрольПоПодразделению);
	
	КонтролируемыеРеквизиты.Вставить("Состав", КонтролируемыеРеквизитыТЧ);
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
		
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
	// пересчитаем курсы взаиморасчетов в табличной части "Состав"
	Для Каждого Строка Из Объект.Состав Цикл
		Если Строка.ДоговорВзаиморасчетов.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЕстьРеквизит(Строка, "СпособВеденияВзаиморасчетов") Тогда
			СпособВеденияВзаиморасчетов = Строка.СпособВеденияВзаиморасчетов;
		Иначе
			СпособВеденияВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Строка.ДоговорВзаиморасчетов,
				"СпособВеденияВзаиморасчетов");
		КонецЕсли;
		
		
		// Если валюта взаиморасчета в строке и валюта документа совпадают,
		// установим курс взаиморасчета равным курсу документа.
		Если Строка.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = Объект.ВалютаДокумента
			И Строка.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов <>
			Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам Тогда
			Строка.КурсВалютыВзаиморасчетов = Объект.КурсДокумента;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСостав

// Обработчик события возникающего при изменении данных реквизита "Контрагент" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СоставКонтрагентПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Строка.ДоговорВзаиморасчетов) ИЛИ Строка.ДоговорВзаиморасчетов.Владелец <> Строка.Контрагент Тогда
		ВидДоговора = Справочники.ХозОперации.ПолучитьВидДоговора(Объект.ХозОперация);
		Строка.ДоговорВзаиморасчетов = ОбработкаРеквизитовДокументаСервер.ПолучитьДоговорВзаиморасчетов(Строка.Контрагент, ВидДоговора, Объект,ПараметрыДействия);
		СоставДоговорВзаиморасчетовПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // СоставКонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СоставДоговорВзаиморасчетовПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Если НЕ Строка.ДоговорВзаиморасчетов.Пустая() Тогда
		
		Строка.СпособЗачетаАвансов = Строка.ДоговорВзаиморасчетов.СпособЗачетаАвансов;
		ПересчитатьКурсВзаиморасчетовПоСделке(Объект, Строка);
		
	КонецЕсли;
	
	// Определимся с автоматическим закрытием сделок
	Если ЕстьРеквизит(Строка, "СпособЗачетаАвансов") И ЗначениеЗаполнено(Строка.ДоговорВзаиморасчетов)
		И Строка.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов <>
			Перечисления.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам Тогда
		Строка.СпособЗачетаАвансов = Строка.ДоговорВзаиморасчетов.СпособЗачетаАвансов;
	КонецЕсли;
	
КонецПроцедуры // СоставДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сделка" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СоставСделкаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Строка.Сделка) Тогда
		Возврат
	КонецЕсли;
	
	Если ЕстьРеквизит(Строка.Сделка,"Контрагент") Тогда
		Если НЕ Строка.Контрагент = Строка.Сделка.Контрагент Тогда
			Строка.Контрагент = Строка.Сделка.Контрагент;
			СоставКонтрагентПриИзменении(Объект, Строка, ПараметрыДействия);
		КонецЕсли;
		
		Если ЕстьРеквизит(Строка.Сделка,"ДоговорВзаиморасчетов")
			И НЕ Строка.ДоговорВзаиморасчетов = Строка.Сделка.ДоговорВзаиморасчетов Тогда
			
			Строка.ДоговорВзаиморасчетов = Строка.Сделка.ДоговорВзаиморасчетов;
			СоставДоговорВзаиморасчетовПриИзменении(Объект, Строка, ПараметрыДействия);
			
		Иначе
			
			ПересчитатьКурсВзаиморасчетовПоСделке(Объект, Строка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(Строка.Сделка) = Тип("ДокументСсылка.СчетНаОплату") Тогда
		Строка.СуммаКредит = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(Строка.Сделка.СуммаДокумента, Строка.Сделка.ВалютаДокумента, Объект.Дата, Объект.ВалютаДокумента, Объект.КурсДокумента);
	КонецЕсли;

КонецПроцедуры // СоставСделкаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Заказ" в таблице "Состав".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СоставЗаказПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Строка.Заказ) Тогда
		
		ПересчитатьКурсВзаиморасчетовПоСделке(Объект, Строка);
		
	КонецЕсли;
	
КонецПроцедуры // СоставЗаказПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Состав");
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть недоступны и/или невидимы в зависимости от параметров объекта.
	ПараметрыКоманд = Новый Соответствие;
	
	// Возвращаем сформированные параметры видимости и доступности команд проверки
	Возврат ПараметрыКоманд;
	
КонецФункции // ПолучитьПараметрыКомандЗаполнения()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ВводОстатковВзаиморасчетов",
		"ПФ_MXL_ОстаткиВзаимозачетов",
		НСтр("ru = 'Остатки взаимозачетов'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ОстаткиВзаимозачетов") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ОстаткиВзаимозачетов",
															"ОстаткиВзаимозачетов",
															ПечатьОстаткиВзаимозачетов(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;		
КонецПроцедуры // Печать()

// Формирует печатную форму "ОстаткиВзаимозачетов"
//
Функция ПечатьОстаткиВзаимозачетов(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВводОстатковВзаиморасчетов_ОстаткиВзаимозачетов";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати,ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВводОстатковВзаиморасчетов.ПФ_MXL_ОстаткиВзаимозачетов");
		
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		// вывод заголовка документа
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения  = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизация =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.Организация = Документ.Организация;
		ОбластьЗаголовок.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);

		// готовим шапку
		НомерСтраницы = 2; НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаДебет,СуммаКредит",
			Документ.ВалютаДокумента, 0, 0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// готовим области строки
		ВыборкаТабличнойЧасти = Документ.Состав;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			// заполняем данные строки
			ОбластьСтрока.Параметры.НомерСтроки = СтрокаТЧ.НомерСтроки;
			ОбластьСтрока.Параметры.Контрагент = СтрокаТЧ.Контрагент;
			ОбластьСтрока.Параметры.ДоговорВзаиморасчетов = СтрокаТЧ.ДоговорВзаиморасчетов;
			ОбластьСтрока.Параметры.СуммаДебет = Формат(СтрокаТЧ.СуммаДебет,ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СуммаКредит = Формат(СтрокаТЧ.СуммаКредит,ФорматВыводаСуммы);
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если ВыборкаТабличнойЧасти.Индекс(СтрокаТЧ) = ВыборкаТабличнойЧасти.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура("ВалютаДокумента,СуммаДебет,СуммаКредит",
					Документ.ВалютаДокумента, 0, 0);
				НомерСтраницыПред = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
		
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		// итоги
		ИтогоСуммаДебет = Документ.Состав.Итог("СуммаДебет");
		ИтогоСуммаКредит = Документ.Состав.Итог("СуммаКредит");
		ОбластьПодвал.Параметры.ИтогоСуммаДебет = Формат(ИтогоСуммаДебет, ФорматВыводаСуммы);
		ОбластьПодвал.Параметры.ИтогоСуммаКредит = Формат(ИтогоСуммаКредит, ФорматВыводаСуммы);
		// сумма прописью
		ОбластьПодвал.Параметры.ИтогоСуммаДебетПрописью =
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоСуммаДебет, Документ.ВалютаДокумента);
		ОбластьПодвал.Параметры.ИтогоСуммаКредитПрописью =
			РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоСуммаКредит, Документ.ВалютаДокумента);
		
		// зададим параметры макета
		ТабличныйДокумент.ТолькоПросмотр = Истина;
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции //ПечатьОстаткиВзаимозачетов()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
	
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВводОстатковВзаиморасчетов.Организация КАК Организация,
	|	ВводОстатковВзаиморасчетов.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ВводОстатковВзаиморасчетов.Ссылка КАК Ссылка,
	|	ВводОстатковВзаиморасчетов.Дата КАК Дата,
	|	ВводОстатковВзаиморасчетов.ХозОперация КАК ХозОперация,
	|	НЕОПРЕДЕЛЕНО КАК Сделка,
	|	ВводОстатковВзаиморасчетов.СуммаДокумента КАК СуммаДокумента,
	|	ВводОстатковВзаиморасчетов.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ВводОстатковВзаиморасчетов.КурсДокумента КАК КурсДокумента,
	|	ВводОстатковВзаиморасчетов.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка) КАК СпособЗачетаАвансов,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ШапкаДокумента
	|ИЗ
	|	Документ.ВводОстатковВзаиморасчетов КАК ВводОстатковВзаиморасчетов
	|ГДЕ
	|	ВводОстатковВзаиморасчетов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ ТаблицаКурсовВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаРегл, &ВалютаУпр)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВводОстатковВзаиморасчетовСостав.Ссылка КАК Ссылка,
	|	ВводОстатковВзаиморасчетовСостав.Контрагент КАК Контрагент,
	|	ВводОстатковВзаиморасчетовСостав.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ВводОстатковВзаиморасчетовСостав.Сделка КАК Сделка,
	|	ВводОстатковВзаиморасчетовСостав.СуммаДебет КАК СуммаДебет,
	|	ВводОстатковВзаиморасчетовСостав.СуммаКредит КАК СуммаКредит,
	|	ВЫБОР
	|		КОГДА ВводОстатковВзаиморасчетовСостав.КурсВалютыВзаиморасчетов = 0
	|			ТОГДА ВводОстатковВзаиморасчетовСостав.Ссылка.Дата
	|		ИНАЧЕ ВводОстатковВзаиморасчетовСостав.КурсВалютыВзаиморасчетов
	|	КОНЕЦ КАК КурсВалютыВзаиморасчетов,
	|	ВводОстатковВзаиморасчетовСостав.Заказ КАК Заказ,
	|	ВводОстатковВзаиморасчетовСостав.ТипРасчета КАК ТипРасчета
	|ПОМЕСТИТЬ Состав
	|ИЗ
	|	Документ.ВводОстатковВзаиморасчетов.Состав КАК ВводОстатковВзаиморасчетовСостав
	|ГДЕ
	|	ВводОстатковВзаиморасчетовСостав.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШапкаДокумента.Организация КАК Организация,
	|	ШапкаДокумента.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ШапкаДокумента.Ссылка КАК Ссылка,
	|	ШапкаДокумента.Дата КАК Дата,
	|	ШапкаДокумента.ХозОперация КАК ХозОперация,
	|	ШапкаДокумента.Сделка КАК Сделка,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ШапкаДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ШапкаДокумента.КурсДокумента КАК КурсДокумента,
	|	ШапкаДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ШапкаДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ШапкаДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл,
	|	ШапкаДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов
	|ПОМЕСТИТЬ ДанныеДокументаОплаты
	|ИЗ
	|	ШапкаДокумента КАК ШапкаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсовВалют КАК КурсыВалютУпр
	|		ПО ШапкаДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсовВалют КАК КурсыВалютРегл
	|		ПО ШапкаДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ШапкаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаКурсовВалют";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	СуммовыеРазницы = РегистрыНакопления.РасчетыСКонтрагентами.ИнициализацияСуммовыхРазниц();
	
	// Дополним таблицу для списания суммовых разниц
	РасчетыСКонтрагентами.Колонки.Добавить(
		"КурсВалютыВзаиморасчетов",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 6, ДопустимыйЗнак.Неотрицательный)));
	РасчетыСКонтрагентами.Колонки.Добавить(
		"ПодразделениеКомпанииДоговора",
		Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
	РасчетыСКонтрагентами.Колонки.Добавить(
		"ПодразделениеКомпании",
		Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	Состав.Ссылка КАК Ссылка,
	|	Состав.Контрагент КАК Контрагент,
	|	Состав.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА Состав.Сделка = НЕОПРЕДЕЛЕНО
	|			ТОГДА Состав.Ссылка
	|		ИНАЧЕ Состав.Сделка
	|	КОНЕЦ КАК Сделка,
	|	Состав.СуммаДебет КАК СуммаДебет,
	|	Состав.СуммаКредит КАК СуммаКредит,
	|	Состав.КурсВалютыВзаиморасчетов КАК КурсВалютыВзаиморасчетов,
	|	Состав.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	Состав.ДоговорВзаиморасчетов.ПодразделениеКомпании КАК ПодразделениеКомпанииДоговора,
	|	Состав.Заказ КАК Заказ,
	|	Состав.ТипРасчета КАК ТипРасчета,
	|	ДанныеДокументаОплаты.Организация КАК Организация,
	|	ДанныеДокументаОплаты.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ДанныеДокументаОплаты.Дата КАК Дата,
	|	ДанныеДокументаОплаты.ХозОперация КАК ХозОперация,
	|	ДанныеДокументаОплаты.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокументаОплаты.КурсДокумента КАК КурсДокумента,
	|	ДанныеДокументаОплаты.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ДанныеДокументаОплаты.КурсВалютыРегл КАК КурсВалютыРегл,
	|	ДанныеДокументаОплаты.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ДанныеДокументаОплаты.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокументаОплаты.ВалютаУпр КАК ВалютаУпр,
	|	ВЫБОР
	|		КОГДА Состав.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(Состав.Сделка КАК Документ.ЗаказНаряд).Состояние
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СостояниеЗаказНаряда,
	|	ВЫБОР
	|		КОГДА Состав.Сделка ССЫЛКА Документ.ЗаказНаряд
	|			ТОГДА ВЫРАЗИТЬ(Состав.Сделка КАК Документ.ЗаказНаряд).ДатаЗакрытия
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
	|	КОНЕЦ КАК ДатаЗакрытия
	|ИЗ
	|	Состав КАК Состав
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументаОплаты КАК ДанныеДокументаОплаты
	|		ПО Состав.Ссылка = ДанныеДокументаОплаты.Ссылка
	|ГДЕ
	|	Состав.ДоговорВзаиморасчетов.СпособВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.СпособыВеденияУчетаВзаиморасчетов.ПоРасчетнымДокументам)";
	
	ДанныеОбОплате = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаОплаты Из ДанныеОбОплате Цикл
		
		Если СтрокаОплаты.СуммаДебет <> 0 Тогда
			
			РасчетыСКонтрагентамиСервер.ДобавитьЗаписьРасчетаКонтрагентов(
				СтрокаОплаты,
				РасчетыСКонтрагентами,
				СтрокаОплаты.СуммаДебет,
				ВидДвиженияНакопления.Приход,
				Перечисления.ВидыОперацийВзаиморасчетов.НачислениеДебиторскойЗадолженности,
				?(ЗначениеЗаполнено(СтрокаОплаты.Сделка), СтрокаОплаты.Сделка, СтрокаОплаты.Ссылка),
				СтрокаОплаты.ТипРасчета,
				Истина);
			
		КонецЕсли;
		
		Если СтрокаОплаты.СуммаКредит <> 0 Тогда
			
			РасчетыСКонтрагентамиСервер.ДобавитьЗаписьРасчетаКонтрагентов(
				СтрокаОплаты,
				РасчетыСКонтрагентами,
				СтрокаОплаты.СуммаКредит,
				ВидДвиженияНакопления.Расход,
				Перечисления.ВидыОперацийВзаиморасчетов.НачислениеКредиторскойЗадолженности,
				?(ЗначениеЗаполнено(СтрокаОплаты.Сделка), СтрокаОплаты.Сделка, СтрокаОплаты.Ссылка),
				СтрокаОплаты.ТипРасчета,
				Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	РасчетыСКонтрагентамиСервер.ПроверитьРасчетыСКонтрагентами(
		ДвиженияДокумента.ДляПроведения.ДокументОбъект,
		РасчетыСКонтрагентами,
		Отказ);
	
	// Дополним таблицу суммовыми разницами
	Если ДанныеОбОплате.Количество() > 0 Тогда
		РегистрыНакопления.РасчетыСКонтрагентами.СписатьСуммовыеРазницы(
			ДанныеОбОплате[0],
			РасчетыСКонтрагентами,
			СуммовыеРазницы,
			Истина);
	КонецЕсли;
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	ДвиженияДокумента.Вставить("СуммовыеРазницы", СуммовыеРазницы);
	
КонецПроцедуры

Процедура СформироватьТаблицуДоходыИРасходы(ДвиженияДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеДокументаОплаты.Ссылка КАК Ссылка,
	|	ДанныеДокументаОплаты.Дата КАК Дата,
	|	ДанныеДокументаОплаты.Организация КАК Организация,
	|	ДанныеДокументаОплаты.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ДанныеДокументаОплаты.ХозОперация КАК ХозОперация
	|ИЗ
	|	ДанныеДокументаОплаты КАК ДанныеДокументаОплаты";
	
	ДанныеЗаполнения = Запрос.Выполнить().Выбрать();
	ДанныеЗаполнения.Следующий();
	
	ДоходыИРасходы = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("ДоходыИРасходы");
	
	СуммовыеРазницы = ПолучитьЗначениеПараметраСтруктуры(
		ДвиженияДокумента,
		"СуммовыеРазницы",
		Новый ТаблицаЗначений);
	
	РегистрыНакопления.ДоходыИРасходы.ЗаполнитьСуммовыеРазницы(
		ДанныеЗаполнения,
		СуммовыеРазницы,
		ДоходыИРасходы,
		ДанныеЗаполнения.ПодразделениеКомпании);
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("ДоходыИРасходы", ДоходыИРасходы);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли