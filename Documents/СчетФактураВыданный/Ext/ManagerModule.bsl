// Модуль менеджера документа "Счет-фактура выданный"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ОбработчикиОбновления

// Выполняет перенос свойств в реквизиты объекта
// Руководитель, ГлавныйБухгалтер,Отустил, ОтпустилКонтрагент, Получил, ПолучилКонтрагент
//
Процедура ВыполнитьПереносПодписантовИзСвойств() Экспорт 
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();
	МассивПереносимыхСвойств = УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства);
	ПеренесеныВсеСвойства = Истина;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданныйДополнительныеРеквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный.ДополнительныеРеквизиты КАК СчетФактураВыданныйДополнительныеРеквизиты
	|ГДЕ
	|	СчетФактураВыданныйДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", МассивПереносимыхСвойств);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();  
	
	Пока Выборка.Следующий() Цикл  
		
		СвойстваКУдалению = Новый Массив();
		
		НачатьТранзакцию(); 
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.СчетФактураВыданный");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();  
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗначенияСвойств = ДокументОбъект.ДополнительныеРеквизиты.Выгрузить();
			
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда 
				
				СвойствоРуководитель = ЗначенияСвойств.Найти(ПереносимыеСвойства.Руководитель,"Свойство");
				
				Если СвойствоРуководитель <> Неопределено Тогда
					
					ДокументОбъект.Руководитель = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоРуководитель.Значение,
						Выборка.Ссылка
					);
					
					Если ЗначениеЗаполнено(ДокументОбъект.Руководитель) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоРуководитель.Свойство);
						
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ПодписантОтОрганизации) Тогда 
					
					ДокументОбъект.Руководитель = ДокументОбъект.ПодписантОтОрганизации
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда	
				
				СвойствоГлавныйБухгалтер = ЗначенияСвойств.Найти(ПереносимыеСвойства.ГлавныйБухгалтер,"Свойство");
				
				Если СвойствоГлавныйБухгалтер <> Неопределено Тогда
					
					ДокументОбъект.ГлавныйБухгалтер = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоГлавныйБухгалтер.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.ГлавныйБухгалтер) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоГлавныйБухгалтер.Свойство); 
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда	
				
				СвойствоОтпустил = ЗначенияСвойств.Найти(ПереносимыеСвойства.Отпустил,"Свойство");
				
				Если СвойствоОтпустил <> Неопределено Тогда
					
					ДокументОбъект.Отпустил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаОрганизации(
						СвойствоОтпустил.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Отпустил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоОтпустил.Свойство);
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда	
				
				СвойствоПолучилКонтрагент = ЗначенияСвойств.Найти(ПереносимыеСвойства.ПолучилКонтрагент,"Свойство");
				
				Если СвойствоПолучилКонтрагент <> Неопределено Тогда
					
					ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
						СвойствоПолучилКонтрагент.Значение,
						Выборка.Ссылка
					); 
					
					Если ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						СвойстваКУдалению.Добавить(СвойствоПолучилКонтрагент.Свойство);
						
					КонецЕсли; 
					
							
				КонецЕсли;
				
			КонецЕсли; 

			Если Не ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
				
				СвойствоДоверенность = ЗначенияСвойств.Найти(ПереносимыеСвойства.Доверенность,"Свойство");
				
				Если СвойствоДоверенность <> Неопределено Тогда

					Если Не ЗначениеЗаполнено(ДокументОбъект.Получил) Тогда
						
						ДокументОбъект.Получил = УправлениеСвойствамиАльфаАвто.НайтиИлиСоздатьПодписантаКонтрагента(
							СвойствоДоверенность.Значение.Владелец,
							Выборка.Ссылка,
							СвойствоДоверенность.Значение
						);
						
						Если ЗначениеЗаполнено(ДокументОбъект.Получил)  И значениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство);
							
						КонецЕсли; 
						
					ИначеЕсли ДокументОбъект.Получил.Подписант = СвойствоДоверенность.Значение.Владелец
						И  НЕ ЗначениеЗаполнено(ДокументОбъект.Получил.Основание) Тогда
						
						ПолучилОбъект = ДокументОбъект.Получил.ПолучитьОбъект();
						ПолучилОбъект.Основание = СвойствоДоверенность.Значение;  
						
						Попытка	
							ПолучилОбъект.Записать(); 
						Исключение	
						КонецПопытки;
						
						Если ЗначениеЗаполнено(ПолучилОбъект.Основание) Тогда
							
							СвойстваКУдалению.Добавить(СвойствоДоверенность.Свойство); 
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СвойстваКУдалению.Количество()>0 Тогда  
				
				Для Каждого Элемент Из СвойстваКУдалению Цикл 
					
					Строка = ДокументОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
					Если Строка <> Неопределено Тогда 
						
						ДокументОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение 
			
			ОтменитьТранзакцию();  
			ПеренесеныВсеСвойства = Ложь;
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка обновления списка подписантов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
		
	КонецЦикла; 
	
	Если ПеренесеныВсеСвойства  Тогда
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Набор
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка.ИмяПредопределенныхДанных = ""Документ_СчетФактураВыданный""";
		
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();	
			
			Пока Выборка.Следующий() Цикл
				
				Попытка	
					НаборОбъект = Выборка.Набор.ПолучитьОбъект();
					
					Для Каждого Элемент Из МассивПереносимыхСвойств Цикл 
					
						Строка = НаборОбъект.ДополнительныеРеквизиты.Найти(Элемент, "Свойство");
					
						Если Строка <> Неопределено Тогда 
						
							НаборОбъект.ДополнительныеРеквизиты.Удалить(Строка.НомерСтроки -1); 
						
						КонецЕсли;
					
					КонецЦикла;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборОбъект);
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось обработать справочник: ""НаборыДополнительныхРеквизитовИСведений"" по причине:
							|%1'"), 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений, "НаборыДополнительныхРеквизитовИСведений", ТекстСообщения);
				КонецПопытки;	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

// Выполяет проверку выполнения отложенного обработчика обновления ВыполнитьПереносПодписантовИзСвойств
//
// Параметры:
//  Параметры - Структура - параметры выполнения операции
//
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ПроверитьПереносПодписантовИзСвойств (Параметры) Экспорт
	
	ПереносимыеСвойства = УправлениеСвойствамиАльфаАвто.ПолучитьСтруктуруСвойствДокументовРеализации();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданныйДополнительныеРеквизиты.Свойство КАК Свойство,
	|	СчетФактураВыданныйДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Документ.СчетФактураВыданный.ДополнительныеРеквизиты КАК СчетФактураВыданныйДополнительныеРеквизиты
	|ГДЕ
	|	СчетФактураВыданныйДополнительныеРеквизиты.Свойство В(&ИзменяемыеРеквизиты)
	|	И СчетФактураВыданныйДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ИзменяемыеРеквизиты", УправлениеСвойствамиАльфаАвто.СтруктураВМассив(ПереносимыеСвойства));
	Запрос.УстановитьПараметр("Ссылка",				 Параметры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Выполняет заполнение реквизитов доступности печатных форм УПД, УКД
//
// Параметры:
//  Параметры - Структура - параметры выполнения операции
//
Процедура ЗаполнитьРеквизитыДоступнаПечатьУПДУКД(Параметры) Экспорт

	Запрос          = Новый Запрос;
	Запрос.Текст    = 
	    "ВЫБРАТЬ
	    |	КорректировкаРеализации.Ссылка КАК Ссылка,
	    |	ИСТИНА КАК ЭтоИсправительный,
	    |	ЛОЖЬ КАК ЭтоКорректировочный
	    |ИЗ
	    |	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	    |ГДЕ
	    |	НЕ КорректировкаРеализации.ДоступнаПечатьУПД
	    |	И НЕ КорректировкаРеализации.ДоступнаПечатьУКД
	    |	И КорректировкаРеализации.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах)
	    |
	    |ОБЪЕДИНИТЬ ВСЕ
	    |
	    |ВЫБРАТЬ
	    |	КорректировкаРеализации.Ссылка,
	    |	ЛОЖЬ,
	    |	ИСТИНА
	    |ИЗ
	    |	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	    |ГДЕ
	    |	НЕ КорректировкаРеализации.ДоступнаПечатьУПД
	    |	И НЕ КорректировкаРеализации.ДоступнаПечатьУКД
	    |	И КорректировкаРеализации.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон)
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	КорректировкаРеализацииАвтомобилей.Ссылка КАК Ссылка,
	    |	ИСТИНА КАК ЭтоИсправительный,
	    |	ЛОЖЬ КАК ЭтоКорректировочный
	    |ИЗ
	    |	Документ.КорректировкаРеализацииАвтомобилей КАК КорректировкаРеализацииАвтомобилей
	    |ГДЕ
	    |	НЕ КорректировкаРеализацииАвтомобилей.ДоступнаПечатьУПД
	    |	И НЕ КорректировкаРеализацииАвтомобилей.ДоступнаПечатьУКД
	    |	И КорректировкаРеализацииАвтомобилей.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.КорректировкаРеализацииАвтомобилейИсправлениеВПервичныхДокументах)
	    |
	    |ОБЪЕДИНИТЬ ВСЕ
	    |
	    |ВЫБРАТЬ
	    |	КорректировкаРеализацииАвтомобилей.Ссылка,
	    |	ЛОЖЬ,
	    |	ИСТИНА
	    |ИЗ
	    |	Документ.КорректировкаРеализацииАвтомобилей КАК КорректировкаРеализацииАвтомобилей
	    |ГДЕ
	    |	НЕ КорректировкаРеализацииАвтомобилей.ДоступнаПечатьУПД
	    |	И НЕ КорректировкаРеализацииАвтомобилей.ДоступнаПечатьУКД
	    |	И КорректировкаРеализацииАвтомобилей.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.КорректировкаРеализацииАвтомобилейКорректировкаПоСогласованиюСторон)
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	СчетФактураВыданный.Ссылка КАК Ссылка,
	    |	ИСТИНА КАК ЭтоИсправительный,
	    |	ЛОЖЬ КАК ЭтоКорректировочный
	    |ИЗ
	    |	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	    |ГДЕ
	    |	(НЕ СчетФактураВыданный.ДоступнаПечатьСчетФактура
	    |			ИЛИ НЕ СчетФактураВыданный.ДоступнаПечатьУПД
	    |				И (СчетФактураВыданный.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.СчетФактураВыданный)
	    |					ИЛИ СчетФактураВыданный.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.СчетФактураВыданныйКорректировка)
	    |						И СчетФактураВыданный.Исправление
	    |						И (ВЫРАЗИТЬ(СчетФактураВыданный.НомерИсправляемогоКорректировочногоДокумента КАК СТРОКА(11))) = """"))
	    |
	    |ОБЪЕДИНИТЬ ВСЕ
	    |
	    |ВЫБРАТЬ
	    |	СчетФактураВыданный.Ссылка,
	    |	ЛОЖЬ,
	    |	ИСТИНА
	    |ИЗ
	    |	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	    |ГДЕ
	    |	НЕ СчетФактураВыданный.ДоступнаПечатьУКД
	    |	И (СчетФактураВыданный.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.СчетФактураВыданныйКорректировка)
	    |				И НЕ СчетФактураВыданный.Исправление
	    |			ИЛИ СчетФактураВыданный.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.СчетФактураВыданныйКорректировка)
	    |				И СчетФактураВыданный.Исправление
	    |				И (ВЫРАЗИТЬ(СчетФактураВыданный.НомерИсправляемогоКорректировочногоДокумента КАК СТРОКА(11))) <> """")
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	КорректировкаРеализации.Ссылка КАК Ссылка
	    |ИЗ
	    |	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	    |ГДЕ
	    |	НЕ КорректировкаРеализации.ДоступнаПечатьУПД
	    |	И НЕ КорректировкаРеализации.ДоступнаПечатьУКД
	    |	И КорректировкаРеализации.ДокументОснование ССЫЛКА Документ.ЗаказНаряд";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
		
	Выборка = РезультатЗапроса[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если Выборка.ЭтоИсправительный Тогда
			ДокументОснование = Выборка.Ссылка.ДокументОснование;
			Пока ДокументОснование <> Неопределено Цикл
				Если ДокументОснование.ХозОперация <> Справочники.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон Тогда
					ДокументОснование = ПолучитьДокументОснование(ДокументОснование);
				Иначе
					ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
					ДокументОбъект.ДоступнаПечатьУПД 		= Ложь;
					ДокументОбъект.ДоступнаПечатьУКД 		= Истина;
					ДокументОбъект.ОбменДанными.Загрузка 	= Истина;
					ДокументОбъект.Записать();
					ДокументОснование = Неопределено;
				КонецЕсли;
			КонецЦикла;
			
			Если Не Выборка.Ссылка.ДоступнаПечатьУКД Тогда	
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.ДоступнаПечатьУПД 		= Истина;
				ДокументОбъект.ДоступнаПечатьУКД 		= Ложь;
				ДокументОбъект.ОбменДанными.Загрузка 	= Истина;
				ДокументОбъект.Записать();
			КонецЕсли;
		Иначе
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ДоступнаПечатьУПД 		= Ложь;
			ДокументОбъект.ДоступнаПечатьУКД 		= Истина;
			ДокументОбъект.ОбменДанными.Загрузка 	= Истина;
			ДокументОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	Выборка = РезультатЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если Выборка.ЭтоИсправительный Тогда
			ДокументОснование = Выборка.Ссылка.ДокументОснование;
			Пока ДокументОснование <> Неопределено Цикл
				Если ДокументОснование.ХозОперация <> Справочники.ХозОперации.КорректировкаРеализацииАвтомобилейКорректировкаПоСогласованиюСторон Тогда
					ДокументОснование = ПолучитьДокументОснование(ДокументОснование);
				Иначе
					ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
					ДокументОбъект.ДоступнаПечатьУПД 		= Ложь;
					ДокументОбъект.ДоступнаПечатьУКД 		= Истина;
					ДокументОбъект.ОбменДанными.Загрузка 	= Истина;
					ДокументОбъект.Записать();
					ДокументОснование = Неопределено;
				КонецЕсли;
			КонецЦикла;
			
			Если Не Выборка.Ссылка.ДоступнаПечатьУКД Тогда	
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.ДоступнаПечатьУПД 		= Истина;
				ДокументОбъект.ДоступнаПечатьУКД 		= Ложь;
				ДокументОбъект.ОбменДанными.Загрузка 	= Истина;
				ДокументОбъект.Записать();
			КонецЕсли;
		Иначе
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ДоступнаПечатьУПД 		= Ложь;
			ДокументОбъект.ДоступнаПечатьУКД 		= Истина;
			ДокументОбъект.ОбменДанными.Загрузка 	= Истина;
			ДокументОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	Выборка = РезультатЗапроса[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
			ИЛИ ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.Выписка")
			ИЛИ ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ЧекНаОплату") Тогда	
			ДокументОбъект.ДоступнаПечатьУПД 			= Ложь;
			ДокументОбъект.ДоступнаПечатьУКД 			= Ложь;
			ДокументОбъект.ДоступнаПечатьСчетФактура 	= Истина;
		ИначеЕсли ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации")
			ИЛИ ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей") Тогда 
			ДокументОбъект.ДоступнаПечатьУПД 			= ДокументОбъект.ДокументОснование.ДоступнаПечатьУПД;
			ДокументОбъект.ДоступнаПечатьСчетФактура 	= ДокументОбъект.ДоступнаПечатьУПД;
			ДокументОбъект.ДоступнаПечатьУКД 			= ДокументОбъект.ДокументОснование.ДоступнаПечатьУКД;
		Иначе
			ДокументОбъект.ДоступнаПечатьУПД 			= Выборка.ЭтоИсправительный;
			ДокументОбъект.ДоступнаПечатьСчетФактура 	= Выборка.ЭтоИсправительный;
			ДокументОбъект.ДоступнаПечатьУКД 			= Выборка.ЭтоКорректировочный;
		КонецЕсли;
		ДокументОбъект.ОбменДанными.Загрузка 		= Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
	Выборка = РезультатЗапроса[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ДоступнаПечатьУПД = ДокументОбъект.ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах;
		ДокументОбъект.ДоступнаПечатьУКД = ДокументОбъект.ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьДокументОснование(Документ)
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваров") Или ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказНаряд")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияАвтомобилей") Тогда
		Возврат Неопределено;
	Иначе 
		Возврат Документ.ДокументОснование;
	КонецЕсли;

КонецФункции

#КонецОбласти 

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ЗапретРедактированияРеквизитовОбъектов

// Определяет блокируемые реквизиты
//
// Возвращаемое значение:
//  Массив - Строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]. Например: "Объект.Автор", "ПолеАвтор".
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
    
    Результат = Новый Массив();
	Результат.Добавить("Товары");
	Результат.Добавить("Контрагент");
	Результат.Добавить("ДоговорВзаиморасчетов");
	Результат.Добавить("ДокументОснование");
	Результат.Добавить("ПараметрыДокумента");
	Результат.Добавить("Грузополучатель");
	Результат.Добавить("СчетФактураНеВыставляется");
	Результат.Добавить("Выставлен");
	Результат.Добавить("УчитыватьИсправлениеИсходногоДокумента");
	Результат.Добавить("Исправление");
	Результат.Добавить("НомерИсправления");
	Результат.Добавить("НомерИсправляемогоКорректировочногоДокумента");
	Результат.Добавить("ДатаИсправляемогоКорректировочногоДокумента");
	Результат.Добавить("НомерИсправленияИсходногоДокумента");
	Результат.Добавить("ДатаИсправленияИсходногоДокумента");
	Результат.Добавить("НомерИсходногоДокумента");
	Результат.Добавить("ДатаИсходногоДокумента");
	Результат.Добавить("ДатаВыставления");
	Результат.Добавить("КодСпособаВыставления");
    Возврат Результат;
    
КонецФункции

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.СчетФактураВыданный);

КонецФункции

#КонецОбласти

#Область ЭДО

// Производит сбор данных для УПД ЭД
//
// Параметры:
//  СчетФактура - Ссылка - Содержит ссылку на передаваемый счет фактуру.
//
// Возвращаемое значение:
//	 Результат - Структура - данные для ЭД
//
Функция ДанныеДляУДПЭД(СчетФактура, Настройки) Экспорт
	
	Если СчетФактура.Пустая() Тогда
		
		ВызватьИсключение НСтр("ru = 'Не указан документ для выгрузки в ЭДО'");
		
	КонецЕсли;
	
	Если ТипЗнч(СчетФактура) <> Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		ВызватьИсключение НСтр("ru = 'Неверный тип первого параметра. Ожидается ДокументСсылка.СчетФактураВыданный'");
		
	КонецЕсли;
	
	Шапка = ДанныеДляУДПЭДШапка(СчетФактура, Настройки);
	
	Если ТипЗнч(Шапка.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		
		ДанныеЗаказНаряда = Документы.ЗаказНаряд.ДанныеДляУДПЭД(Шапка.ДокументОснование);
		Товары = ДанныеЗаказНаряда.Товары;
		КодыУпаковокМаркируемойПродукции = ДанныеЗаказНаряда.КодыУпаковокМаркируемойПродукции;
		ПрослеживаемыеТовары = ДанныеЗаказНаряда.ПрослеживаемыеТовары;

	Иначе
		
		Товары = ДанныеДляУДПЭДТовары(Шапка);
		
		Попытка
			
			КодыУпаковокМаркируемойПродукции = ОбщегоНазначения
				.МенеджерОбъектаПоСсылке(Шапка.ДокументОснование)
				.ПолучитьКодыУпаковокМаркируемойПродукции(Шапка.ДокументОснование);
				
		Исключение
			
			КодыУпаковокМаркируемойПродукции = Неопределено;
			
		КонецПопытки;
		
		ПрослеживаемыеТовары = УправлениеДиалогомДокументаСервер.РНПТПрослеживаемыхТоваров(Шапка.ДокументОснование);
		
	КонецЕсли;
		
	Результат = Новый Структура();
	Результат.Вставить("Шапка", Шапка);
	Результат.Вставить("Товары", Товары);
	Результат.Вставить("КодыУпаковокМаркируемойПродукции", КодыУпаковокМаркируемойПродукции);
	Результат.Вставить("ДокументыОснования", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Шапка.ДокументОснование));
	Результат.Вставить("ПлатежныеДокументы", ДанныеДляУДПЭДПлатежныеДокументы(Шапка));
	Результат.Вставить("ПрослеживаемыеТовары", ПрослеживаемыеТовары);
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

// Определяет является ли счет-фактура авансовым.
// Авансовым счет-фактурой считаются введенные на основании платежных документов.
// 
// Параметры:
//  СчетФактура - ДокументСсылка.СчетФактураВыданный, ДокументОбъект.СчетФактураВыданный - счет-фактура;
// 
// Возвращаемое значение:
//  Булево - Это авансовый счет фактура
//
Функция ЭтоАвансовыйСчетФактура(СчетФактура) Экспорт
	
	Если ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактура, "ДокументОснование");
		
	Иначе
		
		ДокументОснование = СчетФактура.ДокументОснование;
		
	КонецЕсли;
	
	СписокОснований = Новый Массив();
	СписокОснований.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	СписокОснований.Добавить(Тип("ДокументСсылка.Выписка"));
	СписокОснований.Добавить(Тип("ДокументСсылка.ЧекНаОплату"));
	
	Возврат СписокОснований.Найти(ТипЗнч(ДокументОснование)) <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЭДО

Функция ДанныеДляУДПЭДШапка(СчетФактура, Настройки)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА СчетФактураВыданный.Исправление
		|		ТОГДА СчетФактураВыданный.НомерИсходногоДокумента
		|		ИНАЧЕ СчетФактураВыданный.Номер
		|	КОНЕЦ КАК Номер,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданный.Исправление
		|		ТОГДА СчетФактураВыданный.ДатаИсходногоДокумента
		|		ИНАЧЕ СчетФактураВыданный.Дата
		|	КОНЕЦ КАК Дата,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданный.Исправление
		|		ТОГДА СчетФактураВыданный.НомерИсходногоДокумента
		|		ИНАЧЕ СчетФактураВыданный.Номер
		|	КОНЕЦ КАК НомерПоДаннымКлиента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданный.Исправление
		|		ТОГДА СчетФактураВыданный.ДатаИсходногоДокумента
		|		ИНАЧЕ СчетФактураВыданный.Дата
		|	КОНЕЦ КАК ДатаДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданный.Исправление
		|		ТОГДА СчетФактураВыданный.ДатаИсходногоДокумента
		|		ИНАЧЕ СчетФактураВыданный.Дата
		|	КОНЕЦ КАК ДатаПоДаннымКлиента,
		|	СчетФактураВыданный.Организация КАК Организация,
		|	СчетФактураВыданный.Организация КАК ЮрФизЛицо,
		|	СчетФактураВыданный.Организация КАК Поставщик,
		|	СчетФактураВыданный.Контрагент КАК Покупатель,
		|	СчетФактураВыданный.Контрагент КАК Плательщик,
		|	NULL КАК Сделка,
		|	СчетФактураВыданный.ДокументОснование.Менеджер КАК Менеджер,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов.Наименование КАК ДокументОснованиеНаименование,
		|	СчетФактураВыданный.ДокументОснование.Номер КАК ДокументОснованиеНомер,
		|	СчетФактураВыданный.ДокументОснование.Дата КАК ДокументОснованиеДата,
		|	СчетФактураВыданный.ПодразделениеКомпании КАК Подразделение,
		|	СчетФактураВыданный.ВалютаДокумента КАК ВалютаДокумента,
		|	СчетФактураВыданный.КурсДокумента КАК Курс,
		|	СчетФактураВыданный.ТипЦен.ЦенаВключаетНДС КАК СуммаВключаетНДС,
		|	СчетФактураВыданный.ДокументОснование.Менеджер КАК ОтпускПроизвел,
		|	СчетФактураВыданный.Организация.ИНН КАК ИННпоставщика,
		|	СчетФактураВыданный.Организация.КПП КАК КППпоставщика,
		|	СчетФактураВыданный.Контрагент.ИНН КАК ИННпокупателя,
		|	СчетФактураВыданный.Контрагент.КПП КАК КППпокупателя,
		|	СчетФактураВыданный.ХозОперация КАК ХозОперация,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданный.ДокументОснование.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.РеализацияТоваровКомиссия)
		|			ТОГДА ИСТИНА
		|		КОГДА СчетФактураВыданный.ДокументОснование.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ВозвратТоваровПоставщикуКомиссия)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоКомиссия,
		|	СчетФактураВыданный.Исправление КАК Исправление,
		|	СчетФактураВыданный.НомерИсправления КАК НомерИсправления,
		|	СчетФактураВыданный.Дата КАК ДатаИсправления,
		|	СчетФактураВыданный.Ссылка КАК Ссылка,
		|	СчетФактураВыданный.ВалютаДокумента.Код КАК КодВалюты,
		|	СчетФактураВыданный.ВалютаДокумента.Наименование КАК НаименованиеВалюты,
		|	СчетФактураВыданный.ВалютаДокумента.НаименованиеПолное КАК НаименованиеПолноеВалюты,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов КАК ДоговорКонтрагента,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов.ДатаНачала КАК ДатаДоговора,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов.НомерДоговора КАК НомерДоговора,
		|	СчетФактураВыданный.ДоговорВзаиморасчетов.Наименование КАК НаименованиеДоговора,
		|	СчетФактураВыданный.ИдентификаторГосударственногоКонтракта КАК ИдентификаторГосударственногоКонтракта,
		|	СчетФактураВыданный.ДокументОснование КАК ДокументОснование,
		|	СчетФактураВыданный.Грузоотправитель КАК Грузоотправитель,
		|	СчетФактураВыданный.Грузополучатель КАК Грузополучатель,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданный.ДокументОснование ССЫЛКА Документ.РеализацияТоваров
		|			ТОГДА ВЫРАЗИТЬ(СчетФактураВыданный.ДокументОснование КАК Документ.РеализацияТоваров).ПричинаВыводаИзОборота
		|		КОГДА СчетФактураВыданный.ДокументОснование ССЫЛКА Документ.ЗаказНаряд
		|			ТОГДА ВЫРАЗИТЬ(СчетФактураВыданный.ДокументОснование КАК Документ.ЗаказНаряд).ПричинаВыводаИзОборота
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПричиныВыбытияМаркируемойПродукции.ПустаяСсылка)
		|	КОНЕЦ КАК ПричинаВыводаИзОборота
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.Ссылка = &ТекущийДокумент"
	);
	Запрос.УстановитьПараметр("ТекущийДокумент", СчетФактура);
	ШапкаДокумента = ДополнитьДанныеДокументаОтгрузки(
		ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Запрос.Выполнить().Выгрузить()[0]),
		СчетФактура,
		Настройки
	);
	Возврат ДополнитьДанныеДляУДПЭДДополнительнымиРеквизитамиИСведениями(
		ШапкаДокумента,
		СчетФактура
	);
	
КонецФункции

Функция ДополнитьДанныеДокументаОтгрузки(Шапка, СсылкаНаОбъект, Настройки)
	
	Если ЭтоАвансовыйСчетФактура(Шапка.Ссылка) Тогда
		
		Возврат Шапка;
		
	КонецЕсли;
	
	ДокументОбОтгрузке = Новый ТаблицаЗначений;
	ДокументОбОтгрузке.Колонки.Добавить("НомераСтрок");
	ДокументОбОтгрузке.Колонки.Добавить("Наименование");
	ДокументОбОтгрузке.Колонки.Добавить("Номер");
	ДокументОбОтгрузке.Колонки.Добавить("Дата");
	
	Если ЗначениеЗаполнено(Шапка.ДокументОснование) Тогда
		
		Если Не Шапка.Исправление Тогда
			
			Если Настройки.Функция = "СЧФДОП" Тогда
				Документ = Шапка.Ссылка;
			Иначе 
				Документ = Шапка.ДокументОснование;
			КонецЕсли;
			НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ); 
			Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
				 ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ДатаЗакрытия");
			Иначе
				ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Дата"); 
			КонецЕсли;
			ХозОперация = Строка(Документ.ХозОперация);			
		Иначе
			Если Настройки.Функция = "СЧФ" Тогда 
				
				ДанныеИсходногоДокумента = КорректировочныеДанныеДокумента();
				ДанныеИсходногоДокумента.ПодразделениеКомпании = Шапка.Подразделение;
				ДанныеИсходногоДокумента.Дата = Шапка.Дата;
				ЗаполнитьНомера(ДанныеИсходногоДокумента, Шапка.ДокументОснование, Истина);
				ДанныеИсходногоДокумента.Вставить("Номер", ДанныеИсходногоДокумента.НомерИсходногоДокумента);
				
				НомерДокумента  = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ДанныеИсходногоДокумента); 
				ДатаДокумента	= ДанныеИсходногоДокумента.ДатаИсходногоДокумента;
			Иначе
				НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Шапка);
				ДатаДокумента = Шапка.Дата;

            КонецЕсли; 
			
				ХозОперация = Строка(Шапка.ХозОперация);
		
		КонецЕсли;
				
		Товары = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Товары");
		КоличествоТоваров = Товары.Выгрузить().Количество();
		
		КоличествоТовара = "";
		Если КоличествоТоваров = 1 Тогда
			
			КоличествоТовара = "1";
			
		ИначеЕсли КоличествоТоваров > 1 Тогда
			
			КоличествоТовара = СтрШаблон("1-%1", Строка(КоличествоТоваров));
			
		КонецЕсли;
		
		СтрокаОтгрузки = ДокументОбОтгрузке.Добавить();
		СтрокаОтгрузки.Наименование 	= ХозОперация;
		СтрокаОтгрузки.Номер			= НомерДокумента; 
		СтрокаОтгрузки.Дата 			= ДатаДокумента; 
		СтрокаОтгрузки.НомераСтрок 		= КоличествоТовара;  
			
	КонецЕсли;
	
	Шапка.Вставить("ДокументОбОтгрузке", ДокументОбОтгрузке);
	
	Возврат Шапка;
	
КонецФункции

Функция ДополнитьДанныеДляУДПЭДДополнительнымиРеквизитамиИСведениями(Шапка, СсылкаНаОбъект)
	
	СвойстваНеобходимыеПриВыгрузке = Новый Массив(2);
	СвойстваНеобходимыеПриВыгрузке[0] = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Доверенность;
	СвойстваНеобходимыеПриВыгрузке[1] = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки;
	ЗначенияСвойств = УправлениеСвойствами.ПолучитьЗначенияСвойств(
		СсылкаНаОбъект,
		Истина,
		Истина,
		СвойстваНеобходимыеПриВыгрузке
	);
	
	ДатаОтгрузки = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", ЗначенияСвойств);
	Шапка.Вставить("ДатаОтгрузки", ДатаОтгрузки);
	
	Доверенность = УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Доверенность", ЗначенияСвойств);
	
	Если ЗначениеЗаполнено(Доверенность) Тогда
		
		Шапка.Вставить("Доверенность", Доверенность);
		
	КонецЕсли;
	
	Шапка.Вставить(
		"ГлавныйБухгалтер",
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(СсылкаНаОбъект, "ГлавныйБухгалтер")
	);
	Шапка.Вставить("Руководитель", УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(СсылкаНаОбъект, "Руководитель"));
	Шапка.Вставить("Отпустил", УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(СсылкаНаОбъект, "Отпустил"));
	Шапка.Вставить(
		"Получил",
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(СсылкаНаОбъект, "ПолучилКонтрагент", "Получил")
	);
	Возврат Шапка;
	
КонецФункции

Функция ДанныеДляУДПЭДТовары(ШапкаСчетаФактуры)
	
	Если ТипЗнч(ШапкаСчетаФактуры.ДокументОснование) = Тип("ДокументСсылка.ВозвратПоставщику") Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РеализацияТоваровТовары.Номенклатура КАК Номенклатура,
			|	РеализацияТоваровТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	РеализацияТоваровТовары.ИдентификаторТовара КАК ИдентификаторТовара,
			|	РеализацияТоваровТовары.Партия КАК Партия,
			|	РеализацияТоваровТовары.ГТД КАК ГТД
			|ПОМЕСТИТЬ ИдентификаторыИзРеализации
			|ИЗ
			|	Документ.ВозвратПоставщику.Товары КАК РеализацияТоваровТовары
			|ГДЕ
			|	РеализацияТоваровТовары.Ссылка = &РеализацияТоваров
			|;";
		
	ИначеЕсли ТипЗнч(ШапкаСчетаФактуры.ДокументОснование) = Тип("ДокументСсылка.РеализацияАвтомобилей") Тогда
		
		ТекстЗапроса ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РеализацияТоваровТовары.Автомобиль КАК Номенклатура,
			|	"""" КАК ХарактеристикаНоменклатуры,
			|	РеализацияТоваровТовары.ИдентификаторАвтомобиля КАК ИдентификаторТовара,
			|	"""" КАК Партия,
			|	"""" КАК ГТД
			|ПОМЕСТИТЬ ИдентификаторыИзРеализации
			|ИЗ
			|	Документ.РеализацияАвтомобилей.Автомобили КАК РеализацияТоваровТовары
			|ГДЕ
			|	РеализацияТоваровТовары.Ссылка = &РеализацияТоваров
			|;";
		
	ИначеЕсли ТипЗнч(ШапкаСчетаФактуры.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей") Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РеализацияТоваровТовары.Автомобиль КАК Номенклатура,
			|	"""" КАК ХарактеристикаНоменклатуры,
			|	"""" КАК ИдентификаторТовара,
			|	"""" КАК Партия,
			|	"""" КАК ГТД
			|ПОМЕСТИТЬ ИдентификаторыИзРеализации
			|ИЗ
			|	Документ.КорректировкаРеализацииАвтомобилей.Автомобили КАК РеализацияТоваровТовары
			|ГДЕ
			|	РеализацияТоваровТовары.Ссылка = &РеализацияТоваров
			|;";
		
	ИначеЕсли ТипЗнч(ШапкаСчетаФактуры.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РеализацияТоваровТовары.Номенклатура КАК Номенклатура,
			|	РеализацияТоваровТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	РеализацияТоваровТовары.ИдентификаторТовара КАК ИдентификаторТовара,
			|	РеализацияТоваровТовары.Партия КАК Партия,
			|	РеализацияТоваровТовары.ГТД КАК ГТД
			|ПОМЕСТИТЬ ИдентификаторыИзРеализации
			|ИЗ
			|	Документ.КорректировкаРеализации.Товары КАК РеализацияТоваровТовары
			|ГДЕ
			|	РеализацияТоваровТовары.Ссылка = &РеализацияТоваров
			|;";
		
	Иначе
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РеализацияТоваровТовары.Номенклатура КАК Номенклатура,
			|	РеализацияТоваровТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	РеализацияТоваровТовары.ИдентификаторТовара КАК ИдентификаторТовара,
			|	РеализацияТоваровТовары.Партия КАК Партия,
			|	РеализацияТоваровТовары.ГТД КАК ГТД
			|ПОМЕСТИТЬ ИдентификаторыИзРеализации
			|ИЗ
			|	Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
			|ГДЕ
			|	РеализацияТоваровТовары.Ссылка = &РеализацияТоваров
			|;";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		ТекстЗапроса + "ВЫБРАТЬ
			|	СчетФактураВыданныйТовары.НомерСтроки КАК НомерСтроки,
			|	СчетФактураВыданныйТовары.НомерСтроки КАК НомерСтрокиИсходногоДокумента,
			|	СчетФактураВыданныйТовары.Номенклатура.Код КАК КодТовара,
			|	ВЫБОР
			|		КОГДА СчетФактураВыданныйТовары.Номенклатура ССЫЛКА Справочник.Автомобили
			|			ТОГДА СчетФактураВыданныйТовары.Номенклатура.VIN
			|		ИНАЧЕ СчетФактураВыданныйТовары.Номенклатура.Артикул
			|	КОНЕЦ КАК Артикул,
			|	ВЫБОР
			|		КОГДА СчетФактураВыданныйТовары.Номенклатура ССЫЛКА Справочник.Автомобили
			|			ТОГДА СчетФактураВыданныйТовары.Номенклатура.Наименование
			|		ИНАЧЕ СчетФактураВыданныйТовары.Номенклатура.НаименованиеПолное
			|	КОНЕЦ КАК НаименованиеНоменклатуры,
			|	СчетФактураВыданныйТовары.Номенклатура КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА СчетФактураВыданныйТовары.Номенклатура ССЫЛКА Справочник.Автоработы
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
			|		ИНАЧЕ СчетФактураВыданныйТовары.Номенклатура.ВидНоменклатуры
			|	КОНЕЦ КАК ВидНоменклатуры,
			|	СчетФактураВыданныйТовары.Номенклатура.Код КАК КодНоменклатуры,
			|	СчетФактураВыданныйТовары.Содержание КАК Содержание,
			|	СчетФактураВыданныйТовары.Количество КАК Количество,
			|	СчетФактураВыданныйТовары.Цена * &Курс / &Кратность КАК Цена,
			|	СчетФактураВыданныйТовары.Сумма * &Курс / &Кратность КАК Сумма,
			|	СчетФактураВыданныйТовары.СуммаВсего * &Курс / &Кратность - СчетФактураВыданныйТовары.СуммаНДС * &Курс / &Кратность КАК СуммаБезНДС,
			|	СчетФактураВыданныйТовары.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
			|	СчетФактураВыданныйТовары.СуммаВсего * &Курс / &Кратность КАК СуммаСНДС,
			|	СчетФактураВыданныйТовары.СтавкаНДС КАК СтавкаНДС,
			|	ПРЕДСТАВЛЕНИЕ(СчетФактураВыданныйТовары.ХарактеристикаНоменклатуры) КАК НаименованиеХарактеристики,
			|	СчетФактураВыданныйТовары.ХарактеристикаНоменклатуры КАК Характеристика,
			|	ВЫБОР
			|		КОГДА СчетФактураВыданныйТовары.Номенклатура ССЫЛКА Справочник.Автомобили
			|			ТОГДА &БазоваяЕдиницаИзмеренияАвтомобилей
			|		ИНАЧЕ СчетФактураВыданныйТовары.Номенклатура.БазоваяЕдиницаИзмерения
			|	КОНЕЦ КАК БазоваяЕдиница,
			|	ВЫБОР
			|		КОГДА СчетФактураВыданныйТовары.Номенклатура ССЫЛКА Справочник.Автомобили
			|			ТОГДА ВЫРАЗИТЬ(&БазоваяЕдиницаИзмеренияАвтомобилей КАК Справочник.КлассификаторЕдиницИзмерения).Код
			|		ИНАЧЕ СчетФактураВыданныйТовары.Номенклатура.БазоваяЕдиницаИзмерения.Код
			|	КОНЕЦ КАК БазоваяЕдиницаКод,
			|	ВЫБОР
			|		КОГДА СчетФактураВыданныйТовары.Номенклатура ССЫЛКА Справочник.Автомобили
			|			ТОГДА ВЫРАЗИТЬ(&БазоваяЕдиницаИзмеренияАвтомобилей КАК Справочник.КлассификаторЕдиницИзмерения).Наименование
			|		ИНАЧЕ СчетФактураВыданныйТовары.Номенклатура.БазоваяЕдиницаИзмерения.Наименование
			|	КОНЕЦ КАК БазоваяЕдиницаНаименование,
			|	ВЫБОР
			|		КОГДА СчетФактураВыданныйТовары.Номенклатура ССЫЛКА Справочник.Автомобили
			|			ТОГДА ВЫРАЗИТЬ(&БазоваяЕдиницаИзмеренияАвтомобилей КАК Справочник.КлассификаторЕдиницИзмерения).НаименованиеПолное
			|		ИНАЧЕ СчетФактураВыданныйТовары.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное
			|	КОНЕЦ КАК БазоваяЕдиницаНаименованиеПолное,
			|	ВЫБОР
			|		КОГДА СчетФактураВыданныйТовары.Номенклатура ССЫЛКА Справочник.Автомобили
			|			ТОГДА ВЫРАЗИТЬ(&БазоваяЕдиницаИзмеренияАвтомобилей КАК Справочник.КлассификаторЕдиницИзмерения).МеждународноеСокращение
			|		ИНАЧЕ СчетФактураВыданныйТовары.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение
			|	КОНЕЦ КАК БазоваяЕдиницаМеждународноеСокращение,
			|	СчетФактураВыданныйТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ВЫБОР
			|		КОГДА СчетФактураВыданныйТовары.ЕдиницаИзмерения ССЫЛКА Справочник.КлассификаторЕдиницИзмерения
			|			ТОГДА СчетФактураВыданныйТовары.ЕдиницаИзмерения.Код
			|		ИНАЧЕ СчетФактураВыданныйТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код
			|	КОНЕЦ КАК ЕдиницаИзмеренияКод,
			|	ВЫБОР
			|		КОГДА СчетФактураВыданныйТовары.ЕдиницаИзмерения ССЫЛКА Справочник.КлассификаторЕдиницИзмерения
			|			ТОГДА СчетФактураВыданныйТовары.ЕдиницаИзмерения.Наименование
			|		ИНАЧЕ СчетФактураВыданныйТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование
			|	КОНЕЦ КАК ЕдиницаИзмеренияНаименование,
			|	СчетФактураВыданныйТовары.ЕдиницаИзмерения КАК Упаковка,
			|	ВЫБОР
			|		КОГДА СчетФактураВыданныйТовары.ЕдиницаИзмерения ССЫЛКА Справочник.КлассификаторЕдиницИзмерения
			|			ТОГДА СчетФактураВыданныйТовары.ЕдиницаИзмерения.Код
			|		ИНАЧЕ СчетФактураВыданныйТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код
			|	КОНЕЦ КАК УпаковкаКод,
			|	ВЫБОР
			|		КОГДА СчетФактураВыданныйТовары.ЕдиницаИзмерения ССЫЛКА Справочник.КлассификаторЕдиницИзмерения
			|			ТОГДА СчетФактураВыданныйТовары.ЕдиницаИзмерения.Наименование
			|		ИНАЧЕ СчетФактураВыданныйТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование
			|	КОНЕЦ КАК УпаковкаНаименование,
			|	СчетФактураВыданныйТовары.Ссылка КАК Ссылка,
			|	"""" КАК ВидУпаковки,
			|	0 КАК СуммаСкидки,
			|	1 КАК Коэффициент,
			|	0 КАК КоличествоМест,
			|	0 КАК КоличествоВОдномМесте,
			|	ВЫБОР
			|		КОГДА СчетФактураВыданныйТовары.ГТД = ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)
			|			ТОГДА ""643""
			|		ИНАЧЕ СчетФактураВыданныйТовары.ГТД.Страна.Код
			|	КОНЕЦ КАК КодСтраныПроисхождения,
			|	СчетФактураВыданныйТовары.ГТД.Страна.Наименование КАК НаименованиеСтраныПроисхождения,
			|	СчетФактураВыданныйТовары.ГТД.Наименование КАК НомерТаможеннойДекларации,
			|	СчетФактураВыданныйТовары.ГТД КАК ГТД,
			|	СчетФактураВыданныйТовары.Партия КАК Партия,
			|	ЕСТЬNULL(ИдентификаторыИзреализации.ИдентификаторТовара, """") КАК ИдентификаторТовара
			|ИЗ
			|	Документ.СчетФактураВыданный.Товары КАК СчетФактураВыданныйТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ ИдентификаторыИзРеализации КАК ИдентификаторыИзреализации
			|		ПО СчетФактураВыданныйТовары.Номенклатура = ИдентификаторыИзреализации.Номенклатура
			|			И СчетФактураВыданныйТовары.ХарактеристикаНоменклатуры = ИдентификаторыИзреализации.ХарактеристикаНоменклатуры
			|			И (ВЫБОР
			|				КОГДА ИдентификаторыИзреализации.Партия = НЕОПРЕДЕЛЕНО
			|					ТОГДА ИСТИНА
			|				ИНАЧЕ ИдентификаторыИзреализации.Партия = СчетФактураВыданныйТовары.Партия
			|			КОНЕЦ)
			|			И (ВЫБОР
			|				КОГДА ИдентификаторыИзреализации.ГТД = ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)
			|					ТОГДА ИСТИНА
			|				ИНАЧЕ ИдентификаторыИзреализации.ГТД = СчетФактураВыданныйТовары.ГТД
			|			КОНЕЦ)
			|ГДЕ
			|	СчетФактураВыданныйТовары.Ссылка = &ТекущийДокумент
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки"
	);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, ШапкаСчетаФактуры.Дата);
	Запрос.УстановитьПараметр("ТекущийДокумент", ШапкаСчетаФактуры.Ссылка);
	Запрос.УстановитьПараметр("Курс", КурсВалюты.Курс);
	Запрос.УстановитьПараметр("Кратность", КурсВалюты.Кратность);
	Запрос.УстановитьПараметр("РеализацияТоваров", ШапкаСчетаФактуры.ДокументОснование);
	Запрос.УстановитьПараметр("БазоваяЕдиницаИзмеренияАвтомобилей", Справочники.КлассификаторЕдиницИзмерения.шт);
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());
	
КонецФункции

Функция ДанныеДляУДПЭДПлатежныеДокументы(ШапкаСчетаФактуры)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СчетФактураВыданныйПлатежноРасчетныеДокументы.Номер КАК НомерПРД,
		|	СчетФактураВыданныйПлатежноРасчетныеДокументы.Дата КАК ДатаПРД
		|ИЗ
		|	Документ.СчетФактураВыданный.ПлатежноРасчетныеДокументы КАК СчетФактураВыданныйПлатежноРасчетныеДокументы
		|ГДЕ
		|	СчетФактураВыданныйПлатежноРасчетныеДокументы.Ссылка = &ТекущийДокумент"
	);
	Запрос.УстановитьПараметр("ТекущийДокумент", ШапкаСчетаФактуры.Ссылка);
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());
	
КонецФункции

#КонецОбласти

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции.
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.Товары.Итог("СуммаВсего"));
	
	// Производим установку полученных значений в итоговые показатели объекта.
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции.
	ИтогиОперации.Вставить("СуммаНДС",    Объект.Товары.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента-ИтогиОперации.СуммаНДС);
		
	// Возвращаем сведения об итогах операции.
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Получение строк с указанным ГТД.
//
// Параметры:
//  ТаблицаТоваров       - Таблица, в которой выполняется поиск строк.
//
Функция ПолучитьСтрокиСГТД(ТаблицаТоваров) Экспорт 
	
	МассивСтрок = Новый Массив;
	
	Для Каждого стрТовар Из ТаблицаТоваров Цикл
		
		Если ЗначениеЗаполнено(стрТовар.ГТД) Тогда
			МассивСтрок.Добавить(стрТовар);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции

// Получение строк с указанной партией.
//
// Параметры:
//  ТаблицаТоваров       - Таблица, в которой выполняется поиск строк.
//
Функция ПолучитьСтрокиСПартиями(ТаблицаТоваров) Экспорт
	
	МассивСтрок = Новый Массив;
	
	Для Каждого стрТовар Из ТаблицаТоваров Цикл
		
		Если ЗначениеЗаполнено(стрТовар.Партия) Тогда
			МассивСтрок.Добавить(стрТовар);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции

Функция ПолучитьПервуюКорректировку(Документ, ХозОперацииКорректировки, ХозОперацииИсправления)
	
	Результат = Новый Структура("ПоследняяКорректировка, ИсходныйДокумент");
	
	Если 
		ТипЗнч(Документ) <> Тип("ДокументСсылка.КорректировкаРеализации")
		И ТипЗнч(Документ) <> Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей")
	Тогда
		Результат.ИсходныйДокумент = Документ;
		Возврат Результат;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "ДокументОснование, ХозОперация");
	
	ЭтоКорректировкаПоСогласованию = ХозОперацииКорректировки.Найти(ЗначенияРеквизитов.ХозОперация) <> Неопределено;
	ЭтоКорректировкаИсправления = ХозОперацииИсправления.Найти(ЗначенияРеквизитов.ХозОперация) <> Неопределено;
	
	Если ЭтоКорректировкаИсправления Тогда
		Результат.ПоследняяКорректировка = Документ;
		ПромежуточныйРезультат = ПолучитьПервуюКорректировку(
			ЗначенияРеквизитов.ДокументОснование,
			ХозОперацииКорректировки,
			ХозОперацииИсправления
		);
		Если НЕ ЗначениеЗаполнено(Результат.ИсходныйДокумент) Тогда
			Результат.ИсходныйДокумент = ПромежуточныйРезультат.ИсходныйДокумент;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоКорректировкаПоСогласованию Тогда
		Результат.ИсходныйДокумент = Документ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура заполнения номеров по основанию.
//
Процедура ЗаполнитьНомера(Объект, Основание, ПоДокументам = Ложь) Экспорт
	
	Если Основание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ХозОперацииИсправления = Новый Массив;
	ХозОперацииИсправления.Добавить(Справочники.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах);
	ХозОперацииИсправления.Добавить(
		Справочники.ХозОперации.КорректировкаРеализацииАвтомобилейИсправлениеВПервичныхДокументах
	);
	
	ХозОперацииКорректировки = Новый Массив;
	ХозОперацииКорректировки.Добавить(Справочники.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон);
	ХозОперацииКорректировки.Добавить(
		Справочники.ХозОперации.КорректировкаРеализацииАвтомобилейКорректировкаПоСогласованиюСторон
	);
	
	ЭтоИсправление = ХозОперацииИсправления.Найти(Основание.ХозОперация) <> Неопределено;
	
	ТекущийДокумент = Основание.ДокументОснование;
	Корректировки = ПолучитьПервуюКорректировку(
		ТекущийДокумент,
		ХозОперацииКорректировки,
		ХозОперацииИсправления
	);
	
	Корректировка = Неопределено;
	ОригиналОснование = Неопределено;
	ПоследнееИсправление = Неопределено;
	ИсправлениеОснования = Неопределено;
	
	Если ЭтоИсправление Тогда
		Корректировка = Корректировки.ИсходныйДокумент;
		ПоследнееИсправление = Корректировки.ПоследняяКорректировка;
		
		Если ХозОперацииКорректировки.Найти(Корректировка.ХозОперация) <> Неопределено Тогда
			Корректировки = ПолучитьПервуюКорректировку(
				Корректировка.ДокументОснование,
				ХозОперацииКорректировки,
				ХозОперацииИсправления
			);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Корректировки.ИсходныйДокумент <> Корректировка Тогда
		ОригиналОснование = Корректировки.ИсходныйДокумент;
		ИсправлениеОснования = Корректировки.ПоследняяКорректировка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Корректировка) И Не ЗначениеЗаполнено(ОригиналОснование) Тогда
		ОригиналОснование = Корректировка;
		ИсправлениеОснования = ПоследнееИсправление;
		Корректировка = Неопределено;
		ПоследнееИсправление = Неопределено;
	КонецЕсли;
	
	Объект.ЕстьОснование = (ОригиналОснование <> Неопределено);
	Объект.ЕстьКорректировка = Корректировка <> Неопределено;
	
	// Получим счет фактуру для документов.
	Если Не ПоДокументам Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураВыданный.Ссылка КАК Ссылка,
		|	СчетФактураВыданный.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.ДокументОснование В(&Док)
		|	И НЕ СчетФактураВыданный.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураВыданный.Дата УБЫВ";
		ДокументыОснования = Новый Массив;
		ДокументыОснования.Добавить(Корректировка);
		ДокументыОснования.Добавить(ОригиналОснование);
		ДокументыОснования.Добавить(ПоследнееИсправление);
		ДокументыОснования.Добавить(ИсправлениеОснования);
		Запрос.УстановитьПараметр("Док", ДокументыОснования);
		
		ТаблСФ = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Объект.УчитыватьИсправлениеИсходногоДокумента 	= Ложь;
	Объект.НомерИсправления							= 0;
	Объект.Исправление 								= ЭтоИсправление;
	
	Если ЭтоИсправление Тогда
		Если ПоследнееИсправление = Неопределено Тогда
			Объект.УчитыватьИсправлениеИсходногоДокумента = Ложь;
		Иначе
			Объект.УчитыватьИсправлениеИсходногоДокумента = Истина;
		КонецЕсли;
		Объект.НомерИсправления = Основание.НомерИсправления;
	КонецЕсли;
	
	Если Объект.ЕстьКорректировка Тогда
		Если ПоДокументам Тогда
			НомерДатаКорректировки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Корректировка, "Номер,Дата");
			Объект.НомерИсправляемогоКорректировочногоДокумента = НомерДатаКорректировки.Номер;
			Объект.ДатаИсправляемогоКорректировочногоДокумента  = НомерДатаКорректировки.Дата;
		Иначе
			МассивСФ = ТаблСФ.НайтиСтроки(Новый Структура("ДокументОснование", Корректировка));
			Если МассивСФ.Количество() > 0 Тогда
				Объект.НомерИсправляемогоКорректировочногоДокумента = МассивСФ[0].Ссылка.Номер;
				Объект.ДатаИсправляемогоКорректировочногоДокумента  = МассивСФ[0].Ссылка.Дата;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОригиналОснование <> Неопределено Тогда
		Если ПоДокументам Тогда   
			Если ТипЗнч(ОригиналОснование) = Тип("ДокументСсылка.ЗаказНаряд") Тогда 
				НомерДатаОригиналОснование = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОригиналОснование, "Номер,ДатаЗакрытия");
				Объект.НомерИсходногоДокумента = НомерДатаОригиналОснование.Номер;
				Объект.ДатаИсходногоДокумента  = НомерДатаОригиналОснование.ДатаЗакрытия;  

			Иначе
				НомерДатаОригиналОснование = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОригиналОснование, "Номер,Дата");
				Объект.НомерИсходногоДокумента = НомерДатаОригиналОснование.Номер;
				Объект.ДатаИсходногоДокумента  = НомерДатаОригиналОснование.Дата;  
			КонецЕсли;
		Иначе
			МассивСФ = ТаблСФ.НайтиСтроки(Новый Структура("ДокументОснование", ОригиналОснование));
			Если МассивСФ.Количество() > 0 Тогда
				Объект.НомерИсходногоДокумента = МассивСФ[0].Ссылка.Номер;
				Объект.ДатаИсходногоДокумента  = МассивСФ[0].Ссылка.Дата;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ИсправлениеОснования) Тогда
			Если ПоДокументам Тогда
				НомерДатаИсправлениеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					ИсправлениеОснования,
					"НомерИсправления,Дата");
				Объект.НомерИсправленияИсходногоДокумента = НомерДатаИсправлениеОснования.НомерИсправления;
				Объект.ДатаИсправленияИсходногоДокумента  = НомерДатаИсправлениеОснования.Дата;
				Объект.УчитыватьИсправлениеИсходногоДокумента = Истина;
			Иначе
				МассивСФ = ТаблСФ.НайтиСтроки(Новый Структура("ДокументОснование", ИсправлениеОснования));
				Если МассивСФ.Количество() > 0 Тогда
					Объект.НомерИсправленияИсходногоДокумента = МассивСФ[0].Ссылка.НомерИсправления;
					Объект.ДатаИсправленияИсходногоДокумента = МассивСФ[0].Ссылка.Дата;
					Объект.УчитыватьИсправлениеИсходногоДокумента = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает данные для заполнения корректирующей информации для заполнения УПД/УКД
// 
// Возвращаемое значение:
//  Структура - Информация о документах.
//
Функция КорректировочныеДанныеДокумента() Экспорт
	
	ДанныеКорректировки = Новый Структура();
	ДанныеКорректировки.Вставить("ЕстьОснование", Ложь);
	ДанныеКорректировки.Вставить("ЕстьКорректировка", Ложь);
	ДанныеКорректировки.Вставить("УчитыватьИсправлениеИсходногоДокумента", Ложь);
	ДанныеКорректировки.Вставить("НомерИсправления", 0);
	ДанныеКорректировки.Вставить("Исправление", Ложь);
	ДанныеКорректировки.Вставить("НомерИсправляемогоКорректировочногоДокумента", "");
	ДанныеКорректировки.Вставить("ДатаИсправляемогоКорректировочногоДокумента", Дата(1,1,1));
	ДанныеКорректировки.Вставить("НомерИсходногоДокумента", "");
	ДанныеКорректировки.Вставить("ДатаИсходногоДокумента", Дата(1,1,1));
	ДанныеКорректировки.Вставить("НомерИсправленияИсходногоДокумента", "");
	ДанныеКорректировки.Вставить("ДатаИсправленияИсходногоДокумента", Дата(1,1,1));
	ДанныеКорректировки.Вставить("УчитыватьИсправлениеИсходногоДокумента", Ложь);
	ДанныеКорректировки.Вставить("ПодразделениеКомпании", Справочники.ПодразделенияКомпании.ПустаяСсылка());
	ДанныеКорректировки.Вставить("Дата", Дата(1,1,1));
	
	Возврат ДанныеКорректировки;
	
КонецФункции // КорректировочныеДанныеДокумента()

// Заполнение авансовых платежей.
//
Процедура ЗаполнитьАвансовыеПлатежи(Объект, Основание) Экспорт
	
	Объект.ПлатежноРасчетныеДокументы.Загрузить(
		ПлатежноРасчетныеДокументыСервер.ПолучитьПлатежноРасчетныеДокументы(Основание, Объект.ДоговорВзаиморасчетов));
	
КонецПроцедуры

// Обработка установки цены для работ
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура УстановитьЦенуДляРаботы(Объект, Строка)
	
	Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
		Модель = ПолучитьМодель(Объект);
		
		Цех = Справочники.Цеха.ПустаяСсылка();
		Если ЕстьРеквизит(Объект.ДокументОснование, "Цех") Тогда
			Цех = Объект.ДокументОснование.Цех;
		КонецЕсли;
		
		ВидРемонта = Справочники.ВидыРемонта.ПустаяСсылка();
		Если ЕстьРеквизит(Объект.ДокументОснование, "ВидРемонта") Тогда
			ВидРемонта = Объект.ДокументОснование.ВидРемонта;
		КонецЕсли;
		
		ЦенаРаботы = ЦенообразованиеСервер.ПолучитьЦенуАвтоработы(Объект.ТипЦенРабот, Строка.Номенклатура, Модель, Объект.Контрагент, Объект.ДоговорВзаиморасчетов, Цех, ВидРемонта,, Объект.ВалютаДокумента, Объект.КурсДокумента);
		
		Строка.ЕдиницаИзмерения = ЦенаРаботы.Нормочас;
		Строка.Коэффициент      = ?(ЗначениеЗаполнено(ЦенаРаботы.НормаВремени), ЦенаРаботы.НормаВремени, Строка.Коэффициент);
		Строка.Цена             = ЦенаРаботы.Цена;
		
	КонецЕсли;
	
КонецПроцедуры

// Получение модели автомобиля для расчета цен
//
Функция ПолучитьМодель(Объект)
	
	Модель = Справочники.Модели.ПустаяСсылка();
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И Объект.ДокументОснование.Метаданные().Реквизиты.Найти("Автомобиль") <> Неопределено Тогда
		
		Автомобиль = Объект.ДокументОснование.Автомобиль;
		Если ЗначениеЗаполнено(Автомобиль) И ТипЗнч(Автомобиль) = Тип("СправочникСсылка.Автомобили") Тогда
			Если ЗначениеЗаполнено(Автомобиль.ВариантКомплектации) Тогда
				Модель = Автомобиль.ВариантКомплектации;
			Иначе
				Модель = Автомобиль.Модель;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Автомобиль)=Тип("СправочникСсылка.Модели") Тогда
			Модель = Автомобиль;
			Если Объект.ДокументОснование.Метаданные().Реквизиты.Найти("ВариантКомплектации") <> Неопределено И ЗначениеЗаполнено(Объект.ДокументОснование.ВариантКомплектации) Тогда
				Модель = Объект.ДокументОснование.ВариантКомплектации;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ДокументОснование) И Объект.ДокументОснование.Метаданные().Реквизиты.Найти("СводныйРемонтныйЗаказ") <> Неопределено Тогда
		
		Автомобиль = Объект.ДокументОснование.СводныйРемонтныйЗаказ.Автомобиль;
		Если ЗначениеЗаполнено(Автомобиль.ВариантКомплектации) Тогда
			Модель = Автомобиль.ВариантКомплектации;
		Иначе
			Модель = Автомобиль.Модель;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Модель;
	
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа.
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ТипЦен");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	Если Объект.Выставлен Тогда
		ОбязательныеРеквизиты.Добавить("ДатаВыставления");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) <> Тип("ДокументСсылка.ЗакрытиеСмены") Тогда
		ОбязательныеРеквизиты.Добавить("Контрагент");
		ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
		ОбязательныеРеквизиты.Добавить("Грузополучатель");
	КонецЕсли;
	
	Если НЕ (Объект.ХозОперация = Справочники.ХозОперации.СчетФактураВыданныйКорректировка
		И ПолучитьСуммуКорректировки(Объект).СуммаКорректировки <> 0)
		И НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Товары");
	КонецЕсли;
		
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	// Возвращаем сформированные параметры проверки.
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары=Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("СтавкаНДС");
	УникальныеТовары.Добавить("ХарактеристикаНоменклатуры");
	УникальныеТовары.Добавить("Партия");
	УникальныеТовары.Добавить("ГТД");
	УникальныеТовары.Добавить("Цена");
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд")
		ИЛИ (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЧекНаОплату")
		И ПолучитьЗаказНаряд(Объект.ДокументОснование)) Тогда
		УникальныеТовары.Добавить("КлючСтроки");
	КонецЕсли;
	
	// Структура уникальных реквизитов табличных частей.
	УникальныеТабличныеЧасти=Новый Структура();
	УникальныеТабличныеЧасти.Вставить("Товары",УникальныеТовары);
	
	// Возвращаем сформированные параметры проверки.
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта.
	КонтролируемыеРеквизиты = Новый Структура();
	Если НЕ (ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование)=Тип("ДокументСсылка.ЗакрытиеСмены")) Тогда
		КонтролируемыеРеквизиты.Вставить("ДоговорВзаиморасчетов", КонтрольПоПодразделению);
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки.
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Товары");
	Результат.Добавить("Контрагент");
	Результат.Добавить("ДоговорВзаиморасчетов");
	Результат.Добавить("ДокументОснование");
	Результат.Добавить("Грузополучатель");
	Результат.Добавить("УдалитьПлатежноРасчетныеДокументы");
	Результат.Добавить("СчетФактураНеВыставляется");
	Результат.Добавить("Выставлен");
	Результат.Добавить("УчитыватьИсправлениеИсходногоДокумента");
	Результат.Добавить("Исправление");
	Результат.Добавить("НомерИсправления");
	Результат.Добавить("НомерИсправляемогоКорректировочногоДокумента");
	Результат.Добавить("ДатаИсправляемогоКорректировочногоДокумента");
	Результат.Добавить("НомерИсправленияИсходногоДокумента");
	Результат.Добавить("ДатаИсправленияИсходногоДокумента");
	Результат.Добавить("НомерИсходногоДокумента");
	Результат.Добавить("ДатаИсходногоДокумента");
	Результат.Добавить("ДатаВыставления");
	Результат.Добавить("КодСпособаВыставления");
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	Если ПараметрыДействия=Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта.
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Приватно пересчитаем цены если это необходимо.
	ВозможенПересчетСуммы = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыДействия,
		"ПересчетСуммы",
		Истина);
		
	ТребуетсяУстановкаЦен = ПолучитьЗначениеПараметраСтруктуры(
		ПараметрыДействия,
		"ТребуетсяУстановкаЦен",
		Ложь);
		
	Если ВозможенПересчетСуммы И ТребуетсяУстановкаЦен Тогда
		
		НаМомент = ?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Ссылка);
		
		// Выполняем установку новых цен
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			Если ТипЗнч(СтрокаТовары.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
				СтрокаТовары.Цена = ЦенообразованиеСервер.ПолучитьЦенуАвтомобиля(Объект.ТипЦен, СтрокаТовары.Номенклатура,, НаМомент,
					Объект.ВалютаДокумента, Объект.КурсДокумента);
			ИначеЕсли ТипЗнч(СтрокаТовары.Номенклатура) = Тип("СправочникСсылка.Автоработы") Тогда
				УстановитьЦенуДляРаботы(Объект, СтрокаТовары);
			Иначе
				ОбработкаТабличнойЧастиТовары.УстановитьЦены(Объект, СтрокаТовары, ПараметрыДействия);
			КонецЕсли;
			
			ТоварыЦенаПриИзменении(Объект, СтрокаТовары, ПараметрыДействия);
		КонецЦикла;
		
		// Заполним итоговые показатели
		ИтогиОперации = РассчитатьИтогиОперации(Объект);
		ЗаполнитьЗначенияСвойств(Объект, ИтогиОперации);
		
		// Уберем признак перерасчета цен
		ПараметрыДействия.ТребуетсяУстановкаЦен = Ложь;
	КонецЕсли;
	
	// Вызываем общий обработчик действия.
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Вызываем общий обработчик события.
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Автоработы") Тогда
		// Если имеем дело с автоработой - обработаем локально
		// установим количество.
		Если Строка.Количество=0 Тогда
			Строка.Количество=1
		КонецЕсли;
		Если Строка.Коэффициент=0 Тогда
			Строка.Коэффициент=1;
		КонецЕсли;
		
		// Перерассчитаем цену текущей работы
		УстановитьЦенуДляРаботы(Объект, Строка);
		
		// Заполним ставку НДС
		Строка.СтавкаНДС = Строка.Номенклатура.Номенклатура.СтавкаНДС;
		
		// Расчет сумм по строке
		ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
		
	ИначеЕсли ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
		
		// Если имеем дело с автомобилем - обработаем локально
		// Установим количество.
		Строка.Количество=1;
		Строка.ЕдиницаИзмерения=Справочники.КлассификаторЕдиницИзмерения.шт;
		Строка.Коэффициент=1;
		// Заполним ставку НДС
		Если НЕ ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
			Строка.СтавкаНДС = ПолучитьПараметрыПлательщикаНДС(Объект.Организация, Объект.ПодразделениеКомпании, Объект.Дата).ОсновнаяСтавка;
		КонецЕсли;
		
		НаМомент = ?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Ссылка);
		Строка.Цена = ЦенообразованиеСервер.ПолучитьЦенуАвтомобиля(Объект.ТипЦен, Строка.Номенклатура,, НаМомент,
			Объект.ВалютаДокумента, Объект.КурсДокумента);
		
		// Расчет сумм по строке
		ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	Иначе
		// Устанавливаем параметры выполнения операции
		ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
		// Вызываем общий обработчик события
		ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
		
		// Проверим, имеют ли смысл дельнейшие действия
		Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", ЛОЖЬ) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Автоработы") Тогда
		
		// Если имеем дело с автоработой - обработаем локально
		// Перерассчитаем цену текущей работы
		ЦенаНормочаса = ЦенообразованиеСервер.ПолучитьЦенуНормочаса(Строка.ЕдиницаИзмерения, Объект.Дата, Объект.ТипЦенРабот);
		Строка.Цена = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ЦенаНормочаса.Цена,
			ЦенаНормочаса.Валюта,
			Объект.Дата,
			Объект.ВалютаДокумента,
			Объект.КурсДокумента
		);
		
		// Расчет сумм по строке
		ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
		
	ИначеЕсли ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
		
		// Если имеем дело с автомобилем - обработаем локально
		Строка.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
		Строка.Коэффициент      = 1;
		
	Иначе
		// В противном случае стандартная обработка
		ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
		// Вызываем общий обработчик события
		ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Автоработы") Тогда
		ТоварыКоэффициентПриИзменении(Объект, Строка);
	Иначе
		
		// Устанавливаем параметры выполнения операции
		ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
		// Вызываем общий обработчик события
		ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
	Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
		
		Себестоимость = АвтомобилиСервер.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Строка.Номенклатура, Объект);
		Если Себестоимость > 0 Тогда
			
			СтавкаНДС = Строка.СтавкаНДС.Ставка;
			Сумма = Строка.Сумма;
			Если НЕ(Объект.ТипЦен.Пустая() ИЛИ Объект.ТипЦен.ЦенаВключаетНДС) Тогда
				Сумма = Сумма + Макс(Окр((Сумма - Себестоимость) * СтавкаНДС / 100, 2), 0);
			КонецЕсли;
			
			Строка.СуммаНДС = Макс(Окр(((Сумма-Себестоимость) * СтавкаНДС) / (100 + СтавкаНДС), 2), 0);
			Строка.СуммаВсего = Сумма;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
	Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
		
		Себестоимость = АвтомобилиСервер.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Строка.Номенклатура, Объект);
		Если Себестоимость > 0 Тогда
			
			СтавкаНДС = Строка.СтавкаНДС.Ставка;
			Сумма = Строка.Сумма;
			Если НЕ(Объект.ТипЦен.Пустая() ИЛИ Объект.ТипЦен.ЦенаВключаетНДС) Тогда
				Сумма = Сумма + Макс(Окр((Сумма - Себестоимость) * СтавкаНДС / 100, 2), 0);
			КонецЕсли;
			
			Строка.СуммаНДС = Макс(Окр(((Сумма-Себестоимость) * СтавкаНДС) / (100 + СтавкаНДС), 2), 0);
			Строка.СуммаВсего = Сумма;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Коэффициент" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоэффициентПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Автоработы") Тогда
		// Если имеем дело с автоработой - обработаем локально
		ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
	Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
		
		Себестоимость = АвтомобилиСервер.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Строка.Номенклатура, Объект);
		Если Себестоимость > 0 Тогда
			
			СтавкаНДС = Строка.СтавкаНДС.Ставка;
			Сумма = Строка.Сумма;
			Если НЕ(Объект.ТипЦен.Пустая() ИЛИ Объект.ТипЦен.ЦенаВключаетНДС) Тогда
				Сумма = Сумма + Макс(Окр((Сумма - Себестоимость) * СтавкаНДС / 100, 2), 0);
			КонецЕсли;
			
			Строка.СуммаНДС = Макс(Окр(((Сумма-Себестоимость) * СтавкаНДС) / (100 + СтавкаНДС), 2), 0);
			Строка.СуммаВсего = Сумма;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Коэффициент" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события.
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
	Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
		
		СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.СтавкаНДС, "Ставка");
		СтавкаНДС = ?(ЗначениеЗаполнено(СтавкаНДС), СтавкаНДС, 0);
		ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		Себестоимость = АвтомобилиСервер.СебестоимостьАвтомобиляПриобретенногоУФизЛица(Строка.Номенклатура, Объект);
		СуммаНДС       = Окр((Макс(Строка.СуммаВсего - Себестоимость, 0) * СтавкаНДС)/(100 + СтавкаНДС),2);
		ЦенаВключаетНДС = ?(ЗначениеЗаполнено(Объект.ТипЦен), Объект.ТипЦен.ЦенаВключаетНДС, Истина);
		СуммаРасчетная = ?(ЦенаВключаетНДС, Строка.СуммаВсего, Строка.СуммаВсего - СуммаНДС);
		Строка.Сумма = СуммаРасчетная;
		СуммаРасчетная = Макс(СуммаРасчетная - Себестоимость, 0);
		
		Если ЦенаВключаетНДС Тогда
			Строка.СуммаНДС = Окр((СуммаРасчетная * СтавкаНДС)/(100 + СтавкаНДС),2);
		Иначе
			Строка.СуммаНДС = Окр(СуммаРасчетная * СтавкаНДС / 100,2);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

#КонецОбласти

#Область ОбработчикиЗаполненияОбъекта

// Процедура используется для указания доступного данному виду объектов перечня вариантов заполнения.
//
// Параметры:
//  КомандыЗаполнения - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов заполнения.
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
	Если ЗаполнениеОбъектовАльфаАвто.ВозможнаРаботаТСД() Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандыРаботыСТСД(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуОчиститкиТабличнойЧасти(КомандыЗаполнения, "Товары");
	
	ОтображатьЗаполнитьИзФайла = ПраваИНастройкиПользователя.Значение("ОтображатьЗаполнитьИзФайла", "СчетФактураВыданный");
	Если ОтображатьЗаполнитьИзФайла Тогда
		ЗаполнениеОбъектовАльфаАвто.ДобавитьКомандуЗаполненияТабличнойЧастиИзФайла(КомандыЗаполнения, "Товары");
	КонецЕсли;
	
	Команда 				= ЗаполнениеОбъектовАльфаАвто.ДобавитьКоманду(КомандыЗаполнения);
	Команда.Представление	= НСтр("ru = 'Заполнить по документу-основанию'");
	Команда.Идентификатор	= "ТоварыЗаполнитьПоДокументуОснование";
	Команда.ДополнительныеПараметры.ОчиститьПередЗаполнением  = Ложь;
	
КонецПроцедуры // ДобавитьКомандыЗаполнения()

// Производит формирование структуры с доступностью и видимостью команд заполнения объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция ПолучитьПараметрыКомандЗаполнения(Объект) Экспорт
	
	// Команды заполнения могут быть не доступны в зависимости от параметров объекта.
	ДоступностьКоманд = Новый Соответствие;
	ДоступностьКоманд.Вставить("ТоварыЗаполнитьПоДокументуОснование.Видимость",   Истина);
	ДоступностьКоманд.Вставить("ТоварыЗаполнитьПоДокументуОснование.Доступность", Истина);
	
	// Возвращаем сформированные параметры доступности команд проверки.
	Возврат ДоступностьКоманд;
	
КонецФункции // ПолучитьДоступностьКомандЗаполнения()

// Обработчик заполнения документа на основании документа.
//
Функция ТоварыЗаполнитьПоДокументуОснование(Ссылка, ПараметрыКоманды, ПараметрыДействия = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыКоманды) Тогда
		ПараметрыЗаполнения = ПараметрыКоманды.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыВыполненияКоманды;
		Объект				= ПараметрыКоманды.Источник;
	Иначе
		Объект = Ссылка;
	КонецЕсли;
	
	// Устанавливаем параметры выполнения операции.
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не заполнен документ основание.'"), Объект);
	Иначе
		ПараметрыДействия.Вставить("ТребуетсяЗаполнитьНаОсновании", Истина);
		ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецФункции // ТоварыЗаполнитьПоДокументуОснование()

// Возвращает заявку на хранение шин, найденную среди подчиненных документов
//
Функция ПолучитьЗаказНаряд(ДокументОснование) Экспорт
	
	ДокументОснованиеДокумента = ДокументОснование;
	
	УстановитьПривилегированныйРежим(Истина);
	Пока ТипЗнч(ДокументОснованиеДокумента) <> Тип("ДокументСсылка.ЗаказНаряд") Цикл
		Если НЕ ЗначениеЗаполнено(ДокументОснованиеДокумента) Тогда
			Прервать;
		КонецЕсли; 
		ДокументОснованиеДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснованиеДокумента, "ДокументОснование");
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ ЗначениеЗаполнено(ДокументОснованиеДокумента) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ПолучитьЗаявкуНаХранениеШин()

Функция ПолучитьСуммуКорректировки(Объект) Экспорт
	
	Результат = Новый Структура();
	
	СуммаКорректировки = 0;
	СуммаКорректировкиБезНДС = 0;
	УстановитьПривилегированныйРежим(Истина);
	Если Объект.Хозоперация = Справочники.ХозОперации.СчетФактураВыданныйКорректировка
		И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			УстановитьПривилегированныйРежим(Истина);
			ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДокументОснование, "Товары,Автоработы");
			УстановитьПривилегированныйРежим(Ложь);
			ТаблицаТовары = ДанныеОснования.Товары.Выгрузить();
			ТаблицаАвтоработы = ДанныеОснования.Автоработы.Выгрузить();
			
			СуммаКорректировки       = ТаблицаТовары.Итог("СуммаВсегоРазница") + ТаблицаАвтоработы.Итог("СуммаВсегоРазница");
			СуммаКорректировкиБезНДС = СуммаКорректировки - (ТаблицаТовары.Итог("СуммаНДСРазница") + ТаблицаАвтоработы.Итог("СуммаНДСРазница"));
			
		ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей") Тогда
			
			ТаблицаАвтомобили = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "Автомобили").Выгрузить();
			
			СуммаКорректировки       = ТаблицаАвтомобили.Итог("СуммаВсегоРазница");
			СуммаКорректировкиБезНДС = СуммаКорректировки - ТаблицаАвтомобили.Итог("СуммаНДСРазница");
			
		КонецЕсли;
		
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);	
	Результат.Вставить("СуммаКорректировки", СуммаКорректировки);
	Результат.Вставить("СуммаКорректировкиБезНДС", СуммаКорректировкиБезНДС);
	
	Возврат Результат;
	
КонецФункции // ПолучитьСуммуКорректировки()

// Обработчик события возникающего при изменении данных реквизита "Тип цен работ".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенРаботПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	
	
КонецПроцедуры // ТипЦенРаботПриИзменении()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.СчетФактураВыданный",
		"СчетФактураВыданный",
		НСтр("ru = 'Счет-фактура выданный'"),
		СсылкаНаДокумент);
		
	УправлениеПечатьюАльфаАвто.ДобавитьУсловиеВидимостиПоследнейКоманды(КомандыПечати, 
		"ДоступнаПечатьСчетФактура", Истина); 
	
	УправлениеПечатьюАльфаАвто.ДобавитьУсловиеВидимостиПоследнейКоманды(КомандыПечати, 
		"Авансовый", Истина);
		
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.СчетФактураВыданный",
		"КорректировочныйСчетФактура",
		НСтр("ru = 'Корректировочный счет-фактура'"),
		СсылкаНаДокумент);
		
	УправлениеПечатьюАльфаАвто.ДобавитьУсловиеВидимостиПоследнейКоманды(КомандыПечати, 
		"ДоступнаПечатьУКД", Истина);
		
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьУПД",
		"ПФ_MXL_УПД",
		НСтр("ru = 'Универсальный передаточный документ'"),
		СсылкаНаДокумент);
		
	УправлениеПечатьюАльфаАвто.ДобавитьУсловиеВидимостиПоследнейКоманды(КомандыПечати, 
		"ДоступнаПечатьУПД", Истина);
		
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Обработка.ПечатьУКД",
		"ПФ_MXL_УКД",
		НСтр("ru = 'Универсальный корректировочный документ'"),
		СсылкаНаДокумент);
		
	УправлениеПечатьюАльфаАвто.ДобавитьУсловиеВидимостиПоследнейКоманды(КомандыПечати, 
		"ДоступнаПечатьУКД", Истина);
		
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа.
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Для каждого Дк Из МассивОбъектов Цикл
		
		УстановитьПривилегированныйРежим(Истина);
		Если ЕстьРеквизит(Дк.ДокументОснование, "ЭтоУниверсальныйДокумент") 
			И Дк.ДокументОснование.ЭтоУниверсальныйДокумент Тогда
			
			ВывестиСообщение(
			НСтр("ru = 'У документа %1 установлен признак УПД, не рекомендуется печатать с/ф отдельно!'"),
			,,,, Дк.ДокументОснование);
		КонецЕсли; 
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЦикла;	
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактураВыданный") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"СчетФактураВыданный",
			НСтр("ru = 'Счет-фактура выданный'"),
			ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КорректировочныйСчетФактура") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"КорректировочныйСчетФактура",
			НСтр("ru = 'Корректировочный счет-Фактура'"),
			ПечатьКорректировочныйСчетФактура(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;

КонецПроцедуры // Печать()

// Формирует печатную форму "СчетФактура".
//
Функция ПечатьСчетФактура(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		Если Документ.Дата >= Дата('20210701') Тогда
			ПечатьСчетФактура2021(Документ, ТабличныйДокумент, ПараметрыПечати, ОбъектыПечати);
			Продолжить;
		КонецЕсли;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		
		ВыводитьКодТНВЭД = ПраваИНастройкиПользователя.Значение("ВыводитьКодТНВЭД");
		ВыводитьКодВидаТовара = (Документ.Дата >= Дата('20171001'));
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Валюта печати
		ВалютаПечатногоДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		
		ВыборкаТабличнойЧасти = Документ.Товары.Выгрузить();
		
		// Пересчет сумм по выбранной валюте.
		Если ВыборкаТабличнойЧасти.Количество() > 0
			И ВалютаПечатногоДокумента <> Документ.ВалютаДокумента Тогда
			
			ДокументОбъектСтруктура = УправлениеПечатьюПлатформа.ДанныеДокументаДляПерерасчетаТаблицы();
			ЗаполнитьЗначенияСвойств(ДокументОбъектСтруктура, Документ);
			ДокументОбъектСтруктура.Документ = Документ.ДокументОснование;
			ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ВыборкаТабличнойЧасти,
				ДокументОбъектСтруктура,
				ВалютаПечатногоДокумента);
		
		КонецЕсли;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СчетФактура_24_01_2012");
		
		ВставлятьНаименованиеВалюты = Ложь;
		
		// Зададим параметры макета
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		КоличествоСтрок = ВыборкаТабличнойЧасти.Количество();
	
		ОбластьШапка           = Макет.ПолучитьОбласть("Шапка");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогиПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьИтого           = Макет.ПолучитьОбласть("Итого");
		ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
		
		Если Документ.ХозОперация = Справочники.ХозОперации.СчетФактураВыданный Тогда
			
			ТекстЗаголовкаОтчета    = НСтр("ru = 'Счет-фактура №'") + " "
				+ УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ) + " " + "от" + " " 
				+ Формат(Документ.Дата, "ДЛФ=DD");
			
			ТекстЗаголовкаИзменения = НСтр("ru = 'Исправление  №'") + " " + "----"+ " " + "от" + " " + "----";
			
		Иначе
			
			ТекстЗаголовкаИзменения = НСтр("ru = 'Исправление  №'")+ " " 
				+ ?(ЗначениеЗаполнено(Документ.НомерИсправления), Документ.НомерИсправления, "----") + " " + "от" + " " 
				+ Формат(Документ.Дата, "ДЛФ=DD");
			
			// Найдем изначальную счет фактуру.
			ДокументОсн = Документ.ДокументОснование;
			Пока ТипЗнч(ДокументОсн) = Тип("ДокументСсылка.КорректировкаРеализации") Цикл
				ДокументОсн = ДокументОсн.ДокументОснование;
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СчетФактураВыданный.Ссылка
			|ИЗ
			|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
			|ГДЕ
			|	СчетФактураВыданный.ДокументОснование = &ДокументОсн";
			Запрос.УстановитьПараметр("ДокументОсн",ДокументОсн);
			ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
			
			Если ВыборкаЗапроса.Следующий() Тогда
				ТекстЗаголовкаОтчета    = НСтр("ru = 'Счет-фактура №'")+ " "
					+ УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ВыборкаЗапроса.Ссылка.ПолучитьОбъект()) 
					+ " " +"от"+ " " + Формат(ВыборкаЗапроса.Ссылка.Дата, "ДЛФ=DD");
				
			Иначе
				
				ТекстЗаголовкаОтчета = НСтр("ru = 'Счет-фактура  №'") + " " + "----" + " " +"от"+ " " + "----";
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Дата документа
		ДатаДокумента = Документ.Дата;
		
		ОбластьШапка.Параметры.ТекстЗаголовка			  = ТекстЗаголовкаОтчета;
		ОбластьШапка.Параметры.ТекстЗаголовкаИсправление = ТекстЗаголовкаИзменения;
		ОбластьШапка.Параметры.Поставщик = Документ.Организация;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьШапка.Параметры.ПредставлениеПоставщика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация,
			Новый Структура("Наименование", НСтр("ru = 'Продавец:'") + " "),
			ДополнительныеПараметры);
		
		ДополнительныеПараметры.ДляПечати = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьШапка.Параметры.АдресПоставщика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.ПодразделениеКомпании,
			Новый Структура("АдресЮридический", НСтр("ru = 'Адрес:'") + " "),
			ДополнительныеПараметры);
		
		ОбластьШапка.Параметры.ВалютаШапка =НСтр("ru = 'Валюта: наименование, код'")
			+ " "
			+ ?(ЗначениеЗаполнено(ВалютаПечатногоДокумента.НаименованиеПолное),
				ВалютаПечатногоДокумента.НаименованиеПолное, ВалютаПечатногоДокумента.Наименование)
			+ ", "
			+ ВалютаПечатногоДокумента.Код;
		
		КПП = УправлениеПечатьюПлатформа.ПолучитьКППДляПечати(ОбластьШапка.Параметры.Поставщик,
			Документ.ПодразделениеКомпании, ДатаДокумента);
		
		ОбластьШапка.Параметры.ИННПоставщика = НСтр("ru = 'ИНН/КПП продавца:'") + Символы.НПП
			+ ОбластьШапка.Параметры.Поставщик.ИНН + "/" + КПП;
		
		ОбластьШапка.Параметры.Грузоотправитель = ?(ЗначениеЗаполнено(Документ.Грузоотправитель), Документ.Грузоотправитель, Документ.ПодразделениеКомпании);
		
		Если ТипЗнч(ОбластьШапка.Параметры.Грузоотправитель) = Тип("СправочникСсылка.ПодразделенияКомпании") Тогда
			
			ОргДляСравнения=ОбластьШапка.Параметры.Грузоотправитель.Организация;
			
		Иначе
			
			ОргДляСравнения=ОбластьШапка.Параметры.Грузоотправитель;
			
		КонецЕсли;
		
		Если ОргДляСравнения = Документ.Организация Тогда
			
			ОбластьШапка.Параметры.ГрузоотправительПредставление = НСтр("ru = 'Грузоотправитель и его адрес: он же'");
			
		Иначе
			
			ОбластьШапка.Параметры.ГрузоотправительПредставление = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
				ОбластьШапка.Параметры.Грузоотправитель,
				Новый Структура("Наименование,АдресФактический", НСтр("ru = 'Грузоотправитель и его адрес:'") + " ", ""));
			
		КонецЕсли;
		
		ЕстьТовары = Ложь;
		Если КоличествоСтрок > 0 Тогда
			
			Для Каждого СтрокаТоваров Из ВыборкаТабличнойЧасти Цикл
				
				ТипТовараВСтроке = ТипЗнч(СтрокаТоваров.Номенклатура);
				
				Если ТипТовараВСтроке = Тип("СправочникСсылка.Автомобили")
					ИЛИ (ТипТовараВСтроке = Тип("СправочникСсылка.Номенклатура")
						И СтрокаТоваров.Номенклатура.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Услуга) Тогда
					
					ЕстьТовары = Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ЕстьТовары Тогда
				ОбластьШапка.Параметры.ГрузоотправительПредставление = НСтр("ru = 'Грузоотправитель и его адрес:'") + " ----";
			КонецЕсли;
			
		КонецЕсли;
		
		Если  Документ.ПлатежноРасчетныеДокументы.Количество() > 0 Тогда
			
				ОбластьШапка.Параметры.ПредставлениеПоДокументу = 
					НСтр("ru = 'К платежно-расчетному документу:'" + ПолучитьПлатежноРасчетныеДокументы(Документ.ПлатежноРасчетныеДокументы));
			
		Иначе
			
			ОбластьШапка.Параметры.ПредставлениеПоДокументу = НСтр("ru = 'К платежно-расчетному документу:'");	
			
		КонецЕсли;

		ДанныеПокупателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.Контрагент,
			"ФормаСобственности,ГоловнойКонтрагент");
		Если ДанныеПокупателя.ФормаСобственности = Перечисления.ФормыСобственности.ОбособленноеПодразделение Тогда
			Покупатель = ДанныеПокупателя.ГоловнойКонтрагент;
			Грузополучатель = Документ.Контрагент;
			ИННПокупателя = ?(ЗначениеЗаполнено(Покупатель.ИНН), Покупатель.ИНН, "--");
			КПППокупателя = РеквизитыСИсторией.ПолучитьКППНаДату(Документ.Контрагент, ДатаДокумента);
			КПППокупателя = ?(ЗначениеЗаполнено(КПППокупателя), КПППокупателя, "--");
		Иначе
			Покупатель = Документ.Контрагент;
			Грузополучатель = Документ.Грузополучатель;
			ИННПокупателя = ?(ЗначениеЗаполнено(Покупатель.ИНН), Покупатель.ИНН, "--");
			Если ЗначениеЗаполнено(Грузополучатель)
				И Грузополучатель.ФормаСобственности = Перечисления.ФормыСобственности.ОбособленноеПодразделение Тогда
				
				КПППокупателя = РеквизитыСИсторией.ПолучитьКППНаДату(Грузополучатель, ДатаДокумента);
				КПППокупателя = ?(ЗначениеЗаполнено(КПППокупателя), КПППокупателя, "--");
				
			Иначе
				
				КПППокупателя = РеквизитыСИсторией.ПолучитьКППНаДату(Покупатель, ДатаДокумента);
				КПППокупателя = ?(ЗначениеЗаполнено(КПППокупателя), КПППокупателя, "--");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьТовары Тогда
			ОбластьШапка.Параметры.Грузополучатель = Грузополучатель;
			ОбластьШапка.Параметры.ГрузополучательПредставление = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
				ОбластьШапка.Параметры.Грузополучатель,
				Новый Структура("Наименование,АдресФактический", НСтр("ru = 'Грузополучатель и его адрес:'") + " ",""));
		Иначе
			ОбластьШапка.Параметры.ГрузополучательПредставление = НСтр("ru = 'Грузополучатель и его адрес:'") + " ----";
		КонецЕсли;
		ОбластьШапка.Параметры.Покупатель = Покупатель;
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьШапка.Параметры.ПредставлениеПокупателя  = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			ОбластьШапка.Параметры.Покупатель,
			Новый Структура("Наименование", НСтр("ru = 'Покупатель:'") + " "),
			ДополнительныеПараметры);
		
		ОбластьШапка.Параметры.АдресПокупателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			ОбластьШапка.Параметры.Покупатель, Новый Структура("АдресЮридический", НСтр("ru = 'Адрес:'") + " "));
		ОбластьШапка.Параметры.ИННПокупателя = НСтр("ru = 'ИНН/КПП покупателя:'") + " "+ ИННПокупателя + "/" + КПППокупателя;
		
		// Если дата документа позднее 01.07.2017.
		Если ВыводитьКодВидаТовара Тогда
			ОбластьШапка.Параметры.Редакция = 
				НСтр("ru = '(в редакции постановления Правительства Российской Федерации от 19 августа 2017 № 981)'");
		ИначеЕсли Документ.Дата >= Дата('20170701') Тогда
			ОбластьШапка.Параметры.Редакция =
				НСтр("ru = '(в редакции постановления Правительства Российской Федерации от 25 мая 2017 г. № 625)'");
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		// Если дата документа позднее 01.07.2017.
		Если Документ.Дата >= Дата('20170701') Тогда
			
			ОбластьШапкаИдГосКонтракта = Макет.ПолучитьОбласть("ШапкаИдГосКонтракта");
			ЗаголовокИдентификатораГосударственногоКонтракта =
				НСтр("ru = 'Идентификатор государственного контракта, договора (соглашения)'")
				+ ?(ВыводитьКодВидаТовара, " (" + НСтр("ru = 'при наличии'" ) + ")", "") + ": ";
			
			ОбластьШапкаИдГосКонтракта.Параметры.ИдентификаторГосударственногоКонтракта =
				ЗаголовокИдентификатораГосударственногоКонтракта + Документ.ИдентификаторГосударственногоКонтракта;
			ТабличныйДокумент.Вывести(ОбластьШапкаИдГосКонтракта);
			
		КонецЕсли;
		
		СтруктураДокумента = Новый Структура;
		СтруктураДокумента.Вставить("Дата", Документ.Дата);
		СтруктураДокумента.Вставить("ВалютаДокумента", ВалютаПечатногоДокумента);
		СтруктураДокумента.Вставить("КурсДокумента", 
			?(ВалютаПечатногоДокумента = Документ.ВалютаДокумента, Документ.КурсДокумента, Документ.Дата));
		
		МассивАвтомобилей = Новый Массив;
		
		Если ТипЗнч(Документ.ДокументОснование) <> Тип("ДокументСсылка.РеализацияАктивов") Тогда 
			Для Каждого ТекущаяСтрока Из ВыборкаТабличнойЧасти Цикл
				Если ТипЗнч(ТекущаяСтрока.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
					МассивАвтомобилей.Добавить(ТекущаяСтрока.Номенклатура);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Только для автомобилей
		СебестоимостьАвтомобилей = Новый Соответствие;
		Если МассивАвтомобилей.Количество() > 0 Тогда
			
			СебестоимостьАвтомобилей = АвтомобилиСервер.СебестоимостьАвтомобилейПриобретенныхУФизЛиц(
			МассивАвтомобилей, СтруктураДокумента);
			ТорговаяНаценка = 0;
			
			// Заполним дополнительные параметры если необходимо.
			Для Каждого СтрокаТоваров Из ВыборкаТабличнойЧасти Цикл
				
				Себестоимость = СебестоимостьАвтомобилей.Получить(СтрокаТоваров.Номенклатура);
				Если ЗначениеЗаполнено(Себестоимость) И Себестоимость > 0 Тогда
					ОблагаемаяСумма = ?(СтрокаТоваров.СуммаВсего > Себестоимость, СтрокаТоваров.СуммаВсего - Себестоимость, 0);
					СуммаНалога = ОблагаемаяСумма / (100 + СтрокаТоваров.СтавкаНДС.Ставка) * СтрокаТоваров.СтавкаНДС.Ставка;
					ТорговаяНаценка = ТорговаяНаценка + ОблагаемаяСумма - СуммаНалога;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТорговаяНаценка > 0 Тогда
				
				ОбластьДополнительноТорговаяНаценка = Макет.ПолучитьОбласть("ДополнительноТорговаяНаценка");
				ОбластьДополнительноТорговаяНаценка.Параметры.ТорговаяНаценка = СтрШаблон(
				НСтр("ru = 'торговая наценка без НДС %1'"), Формат(ТорговаяНаценка, ФорматВыводаСуммы));
				ТабличныйДокумент.Вывести(ОбластьДополнительноТорговаяНаценка);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		
		// Уберем колонку, вывод которой утвержден с 1 октября 2017 г.
		Если НЕ ВыводитьКодВидаТовара Тогда
			
			ОбластьКодВидаТовара = Макет.Область("КодВидаТовара");
			
			НовыйТекст = 
				ОбластьЗаголовокТаблицы.Область(2, ОбластьКодВидаТовара.Лево - 11, 3, ОбластьКодВидаТовара.Лево - 1).Текст;
			
			ОбластьВыреза = ОбластьЗаголовокТаблицы.Область(2, ОбластьКодВидаТовара.Лево - 11, 3, ОбластьКодВидаТовара.Право);
			ОбластьВыреза.Объединить();
			ОбластьВыреза.Текст = НовыйТекст;
			
			ОбластьВыреза = ОбластьЗаголовокТаблицы.Область(4, ОбластьКодВидаТовара.Лево - 11, 4, ОбластьКодВидаТовара.Право);
			ОбластьВыреза.Объединить();
			
			НовыйПараметр = ОбластьСтрока.Область(1, ОбластьКодВидаТовара.Лево - 11, 1, ОбластьКодВидаТовара.Лево - 1).Параметр;
			ОбластьВыреза = ОбластьСтрока.Область(1, ОбластьКодВидаТовара.Лево - 11, 1, ОбластьКодВидаТовара.Право);
			ОбластьВыреза.Объединить();
			ОбластьВыреза.Параметр = НовыйПараметр;
			
			ОбластьЗаголовокТаблицы.Параметры.ТекстНомерТаможеннойДекларации = НСтр("ru = 'Номер таможенной декларации'");
			
		Иначе
			
			ОбластьЗаголовокТаблицы.Параметры.ТекстНомерТаможеннойДекларации =
				НСтр("ru = 'Регистрационный номер таможенной декларации'");
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
		
		// Готовим шапку
		НомерСтраницы = 2; НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура("Сумма, СуммаНДС, СуммаВсего", 0, 0, 0);
		СтруктураОбщихИтогов = Новый Структура("Сумма, СуммаНДС, СуммаВсего", 0, 0, 0);
		
		// Заполним параметры шапки таблицы для следующего листа.
		ОбластьЗаголовокТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовкаОтчета;
		ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница:"+ " " + НомерСтраницы;
		
		мсвДопОбластиПодвала = Новый Массив;
		мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
		мсвДопОбластиПодвала.Добавить(ОбластьИтого);
		
		Ном=1;
		СуммаВсегоБезНДС = 0; 
		ДанныеЕдиницыИзмеренияАвтоработВПечатныхФормах = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.ДоговорВзаиморасчетов, "ЕдиницаИзмеренияАвтоработВПечатныхФормах, ЕдиницаИзмеренияАвтоработВПечатныхФормах.Код");

		ЕстьСтрокиСНДС = Ложь;
		ЕстьСтрокиСНДСНаСтранице = Ложь;
		
		СчетФактураНаАванс = Ложь;
		
		Для Каждого СтрокаТоваров Из ВыборкаТабличнойЧасти Цикл
			
			Если СтрокаТоваров.Номенклатура = Справочники.Номенклатура.Предоплата Тогда
			
				СчетФактураНаАванс = Истина;
			
			КонецЕсли;
			
			ЗаполнитьПрочерки = СтрокаТоваров.Номенклатура = Справочники.Номенклатура.Предоплата
								ИЛИ СтрокаТоваров.Номенклатура = Справочники.Номенклатура.КомиссионноеВознаграждение;
			
			Себестоимость = СебестоимостьАвтомобилей.Получить(СтрокаТоваров.Номенклатура);
			Если Себестоимость = Неопределено Тогда
				Себестоимость = 0;
			КонецЕсли;
			
			ОбластьСтрока.Параметры.Заполнить(СтрокаТоваров);
			Если ЗаполнитьПрочерки Тогда
				ОбластьСтрока.Параметры.Количество = "----";	
			Иначе
				ОбластьСтрока.Параметры.Количество = Формат(ОбластьСтрока.Параметры.Количество, ФорматВыводаКоличества);
			КонецЕсли;
			
			Если ВставлятьНаименованиеВалюты Тогда
				ОбластьСтрока.Параметры.НаименованиеВалюты = ?(ЗначениеЗаполнено(ВалютаПечатногоДокумента.НаименованиеПолное),
					ВалютаПечатногоДокумента.НаименованиеПолное,
					ВалютаПечатногоДокумента.Наименование);
					
			КонецЕсли;
			
			ЕстьСодержание = ЗначениеЗаполнено(СтрокаТоваров.Содержание);
			Если ЕстьСодержание Тогда
				ТоварНаименование = СтрокаТоваров.Содержание;
				
			Иначе
				Наименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТоваров.Номенклатура);
			КонецЕсли;
			
			Если Документ.Дата >= Дата(2016, 07, 01) И НЕ ВыводитьКодВидаТовара Тогда
				
				Если ЕстьРеквизит(СтрокаТоваров.Номенклатура, "КодТНВЭД") Тогда
					
					Если СтрокаТоваров.СтавкаНДС = Справочники.СтавкиНДС.БезНДС
						И СокрЛП(СтрокаТоваров.Номенклатура.КодТНВЭД) <> "" Тогда
						
						Наименование = Наименование + ","  + Символы.НПП + НСтр("ru='код ТН ВЭД'") + Символы.НПП
							+ СтрокаТоваров.Номенклатура.КодТНВЭД;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ОбластьСтрока.Параметры.ТоварНаименование = Наименование;
			Если Не ЕстьСодержание 
				И НЕ СтрокаТоваров.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда
				ОбластьСтрока.Параметры.ТоварНаименование = ОбластьСтрока.Параметры.ТоварНаименование + ", "
					+ СтрокаТоваров.ХарактеристикаНоменклатуры;
			КонецЕсли;
			КоличествоТовара = СтрокаТоваров.Количество;
			Если ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = СтрокаТоваров.ЕдиницаИзмерения.Код;
				Если ВыводитьКодВидаТовара Тогда
					КодТНВЭД = СтрокаТоваров.Номенклатура.КодТНВЭД;
					Если ЗначениеЗаполнено(КодТНВЭД) И ВыводитьКодТНВЭД Тогда
						ОбластьСтрока.Параметры.КодВидаТовара = СокрЛП(КодТНВЭД);
					Иначе
						ОбластьСтрока.Параметры.КодВидаТовара = "--";
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТипЗнч(СтрокаТоваров.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
				КоличествоТовара = СтрокаТоваров.Количество*СтрокаТоваров.Коэффициент;
				ОбластьСтрока.Параметры.Количество = КоличествоТовара;
				ОбластьСтрока.Параметры.ЕдиницаИзмерения = ДанныеЕдиницыИзмеренияАвтоработВПечатныхФормах.ЕдиницаИзмеренияАвтоработВПечатныхФормах;
				Если ДанныеЕдиницыИзмеренияАвтоработВПечатныхФормах.ЕдиницаИзмеренияАвтоработВПечатныхФормах <>
					ПредопределенноеЗначение("Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка") Тогда
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = ДанныеЕдиницыИзмеренияАвтоработВПечатныхФормах.ЕдиницаИзмеренияАвтоработВПечатныхФормахКод;	
				Иначе  
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = "--";
				КонецЕсли;
				Если ВыводитьКодВидаТовара Тогда
					ОбластьСтрока.Параметры.КодВидаТовара = "--";
				КонецЕсли;
			ИначеЕсли ЗаполнитьПрочерки Тогда 
				ОбластьСтрока.Параметры.ЕдиницаИзмерения = "----";
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = "--";
				Если ВыводитьКодВидаТовара Тогда
					ОбластьСтрока.Параметры.КодВидаТовара = "--";
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(СтрокаТоваров.ЕдиницаИзмерения) Тогда
					Если СтрокаТоваров.Номенклатура.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Услуга Тогда
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = СтрокаТоваров.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код;
					Иначе
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = "-";
					КонецЕсли;
				КонецЕсли;
				Если ВыводитьКодВидаТовара Тогда
					КодТНВЭД = СтрокаТоваров.Номенклатура.КодТНВЭД;
					Если ЗначениеЗаполнено(КодТНВЭД) И ВыводитьКодТНВЭД Тогда
						ОбластьСтрока.Параметры.КодВидаТовара = СокрЛП(КодТНВЭД);
					Иначе
						ОбластьСтрока.Параметры.КодВидаТовара = "--";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ОбластьСтрока.Параметры.СтавкаНДС =
				УправлениеПечатьюПлатформа.ПолучитьПредставлениеСтавкиНДС(СтрокаТоваров.СтавкаНДС, "%");
			
			Если ЗаполнитьПрочерки Тогда
				ОбластьСтрока.Параметры.ПредставлениеГТД = "-----";
				ОбластьСтрока.Параметры.ПредставлениеСтраны = "-----";
				ОбластьСтрока.Параметры.ПредставлениеСтраныКод = "-----";
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТоваров.ГТД) Тогда
				ОбластьСтрока.Параметры.ПредставлениеГТД	= "-----";
				ОбластьСтрока.Параметры.ПредставлениеСтраны	= "-----";
				ОбластьСтрока.Параметры.ПредставлениеСтраныКод = "-----";
			Иначе
				
				СтранаИмпортер = СтрокаТоваров.ГТД.Страна;
				ЕстьВКлассификаторе = УправлениеКонтактнойИнформацией
					.ДанныеКлассификатораСтранМираПоКоду(СтранаИмпортер.Код) <> Неопределено;
				
				ОбластьСтрока.Параметры.ПредставлениеГТД =
					УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТоваров.ГТД);
				ОбластьСтрока.Параметры.ПредставлениеСтраны	= СтрокаТоваров.ГТД.Страна.Наименование;
				
				Если ЕстьВКлассификаторе Тогда
					
					ОбластьСтрока.Параметры.ПредставлениеСтраныКод = СтранаИмпортер.Код;
					
				Иначе
					
					ОбластьСтрока.Параметры.ПредставлениеСтраныКод = "--";
					
				КонецЕсли;
				
			КонецЕсли;
			
			СуммаБезНДС = СтрокаТоваров.СуммаВсего - СтрокаТоваров.СуммаНДС;
			ЦенаБезНДС = СуммаБезНДС / КоличествоТовара;
			
			Если ЗаполнитьПрочерки Тогда
				
				ОбластьСтрока.Параметры.Сумма = "----";
				ОбластьСтрока.Параметры.Цена = "----";
				СуммаВсегоБезНДС = "----";
				ОбластьСтрока.Параметры.Акциз = "----";
				
			Иначе
				
				ОбластьСтрока.Параметры.Сумма = Формат(СуммаБезНДС, ФорматВыводаСуммы);
				ОбластьСтрока.Параметры.Цена = Формат(ЦенаБезНДС, ФорматВыводаСуммы);
				СуммаВсегоБезНДС = СуммаБезНДС + СуммаВсегоБезНДС;
				ОбластьСтрока.Параметры.Акциз = НСтр("ru = 'без акциза'");
				
			КонецЕсли;
			СтрокаСумма = СуммаБезНДС;
			Если СтрокаТоваров.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
				ОбластьСтрока.Параметры.СуммаНДС = НСтр("ru = 'Без НДС'");
				СтрокаСуммаНДС = 0;
			ИначеЕсли Себестоимость > 0 Тогда
				
				ОблагаемаяСумма = ?(СтрокаТоваров.СуммаВсего > Себестоимость, СтрокаТоваров.СуммаВсего - Себестоимость, 0);
				//СуммаНалога =Окр( 
				//	ОблагаемаяСумма * СтрокаТоваров.СтавкаНДС.Ставка / (100 + СтрокаТоваров.СтавкаНДС.Ставка),
				//	2,
				//	РежимОкругления.Окр15как20
				//);	
				ОбластьСтрока.Параметры.СуммаНДС = СтрокаТоваров.СуммаНДС;
				СтрокаСумма = ОблагаемаяСумма; 
				СтрокаСуммаНДС = СтрокаТоваров.СуммаНДС;
				ОбластьСтрока.Параметры.Сумма = ОблагаемаяСумма;
				ТекстСтавкаНДС = СокрЛП(СтрокаТоваров.СтавкаНДС.Ставка);
				ОбластьСтрока.Параметры.Цена = Формат(СтрокаТоваров.СуммаВсего-СуммаНалога, ФорматВыводаСуммы);
				
				Если СтрНайти(ТекстСтавкаНДС, "/") = 0 Тогда
					
					ОбластьСтрока.Параметры.СтавкаНДС = ТекстСтавкаНДС + "/1" + ТекстСтавкаНДС + "%";
					
				КонецЕсли;
				
			Иначе
				
				ОбластьСтрока.Параметры.СуммаНДС = Формат(СтрокаТоваров.СуммаНДС, ФорматВыводаСуммы);
				СтрокаСуммаНДС = СтрокаТоваров.СуммаНДС;
				
			КонецЕсли;
			
			ОбластьСтрока.Параметры.СуммаВсего = Формат(СтрокаТоваров.СуммаВсего, ФорматВыводаСуммы);
			СтрокаСуммаВсего = СтрокаТоваров.СуммаВсего;
			
			// Выводим строку, делая проверку попадания на лист.
			Если Ном <> КоличествоСтрок Тогда
				// Если строка не последняя, то выводим ее на текущем листе
				МассивОбластьИтог = Новый Массив;
				МассивОбластьИтог.Добавить(ОбластьСтрока);
				МассивОбластьИтог.Добавить(ОбластьИтогиПоСтранице);
				
				МассивОбластьПодвал = Новый Массив;
				МассивОбластьПодвал.Добавить(ОбластьСтрока);
				МассивОбластьПодвал.Добавить(ОбластьИтогиПоСтранице);
	            МассивОбластьПодвал.Добавить(ОбластьПодвал);
				МассивОбластьПодвал.Добавить(ОбластьИтого);
				
				РезультатПроверки = ТабличныйДокумент.ПроверитьВывод(МассивОбластьПодвал);
				
				Если НЕ РезультатПроверки Тогда
					РезультатПроверки = ТабличныйДокумент.ПроверитьВывод(МассивОбластьИтог);
				КонецЕсли;
				
				Если НЕ РезультатПроверки Тогда
					Если ЕстьСтрокиСНДСНаСтранице = Ложь Тогда
						СтруктураИтоговПоСтранице.СуммаНДС = НСтр("ru = 'Без НДС'");
					КонецЕсли;
					УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент,
						ОбластьИтогиПоСтранице,
						СтруктураИтоговПоСтранице,
						Документ); 
						
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц(); 
					НомерСтраницы = НомерСтраницы + 1;
					
					ТабличныйДокумент.Вывести(ОбластьЗаголовоктаблицы); 
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьСтрока);
			Иначе
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(
					ТабличныйДокумент,
					ОбластьСтрока,
					ОбластьЗаголовоктаблицы,
					ОбластьИтогиПоСтранице,
					НомерСтраницы,
					СтруктураИтоговПоСтранице,
					Документ,
					мсвДопОбластиПодвала);
			КонецЕсли;
				
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				
				СтруктураИтоговПоСтранице = Новый Структура("Сумма,СуммаНДС,СуммаВсего", 0, 0, 0);
				НомерСтраницыПредыдущий = НомерСтраницы;
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница:" + " " + НомерСтраницы;

				ЕстьСтрокиСНДСНаСтранице = Ложь;
				
			КонецЕсли;
			
			Ном = Ном + 1;

			Если СтрокаТоваров.СтавкаНДС <> Справочники.СтавкиНДС.БезНДС Тогда 
				ЕстьСтрокиСНДС = Истина;
				ЕстьСтрокиСНДСНаСтранице = Истина;
            КонецЕсли;
			
			СтруктураИтоговПоСтранице.Сумма = СтруктураИтоговПоСтранице.Сумма + СтрокаСумма;
			СтруктураИтоговПоСтранице.СуммаНДС = СтруктураИтоговПоСтранице.СуммаНДС + СтрокаСуммаНДС;
			СтруктураИтоговПоСтранице.СуммаВсего = СтруктураИтоговПоСтранице.СуммаВсего + СтрокаСуммаВсего;
			
			СтруктураОбщихИтогов.Сумма = СтруктураОбщихИтогов.Сумма + СтрокаСумма;
			СтруктураОбщихИтогов.СуммаВсего = СтруктураОбщихИтогов.СуммаВсего + СтрокаСуммаВсего;
			СтруктураОбщихИтогов.СуммаНДС = СтруктураОбщихИтогов.СуммаНДС + СтрокаСуммаНДС;
		КонецЦикла;
		
		// Выводим последний подвал, если страниц больше единицы.
		Если НомерСтраницы > 2 Тогда
			Если ЕстьСтрокиСНДСНаСтранице = Ложь Тогда
				СтруктураИтоговПоСтранице.СуммаНДС = НСтр("ru = 'Без НДС'");
			КонецЕсли;
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогиПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		ОбластьИтого.Параметры.ИтогоСумма = ?(СчетФактураНаАванс, "----", Формат(СтруктураОбщихИтогов.Сумма, ФорматВыводаСуммы));
		Если ЕстьСтрокиСНДС Тогда
			ОбластьИтого.Параметры.ИтогоСуммаНДС = Формат(СтруктураОбщихИтогов.СуммаНДС, ФорматВыводаСуммы);
		Иначе
			ОбластьИтого.Параметры.ИтогоСуммаНДС = НСтр("ru = 'Без НДС'");
		КонецЕсли;
		ОбластьИтого.Параметры.ИтогоВсего = Формат(СтруктураОбщихИтогов.СуммаВсего, ФорматВыводаСуммы);
		ТабличныйДокумент.Вывести(ОбластьИтого);
		
		// Заполним информацию о руководителях организации.
		Руководитель = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Руководитель", "Руководитель");
		
		ЭтоЮридическоеЛицо = Документ.Организация.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо;
		ЭтоИП = Документ.Организация.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель;
		Если ЭтоЮридическоеЛицо Тогда
			ОбластьПодвал.Параметры.Заполнить(Руководитель);
			ГлавныйБухгалтер = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ГлавныйБухгалтер", "ГлавныйБухгалтер");
			ОбластьПодвал.Параметры.Заполнить(ГлавныйБухгалтер);
				
		ИначеЕсли ЭтоИП Тогда
			ОбластьПодвал.Параметры.ФИОПБОЮЛ = Руководитель.РуководительПредставление;
			ОбластьПодвал.Параметры.Свидетельство =
				Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(Документ.Организация,
					Перечисления.ВидыДокументов.Свидетельство);
		КонецЕсли;
		
		ОбластьПодвал.Параметры.ТекстИндивидуальныйПредприниматель = ?(ВыводитьКодВидаТовара,
			НСтр("ru = 'Индивидуальный предприниматель или иное уполномоченное лицо'"),
			НСтр("ru = 'Индивидуальный предприниматель'"));
			
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		ТабличныйДокумент.АвтоМасштаб = Истина;
		
		// Отметим конец области документа.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		УправлениеПечатьюАльфаАвто.ДублирующиеФаксимиле(ТабличныйДокумент, ОбъектыПечати, Документ, Документ.Организация);

	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции //ПечатьСчетФактура()

// Формирует печатную форму "КорректировочныйСчетФактура".
//
Функция ПечатьКорректировочныйСчетФактура(МассивОбъектов, ОбъектыПечати,ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		Если Документ.Дата >= Дата("20210701000000") Тогда
			
			ПечатьКорректировочныйСчетФактура2021(Документ, ТабличныйДокумент, ОбъектыПечати, ПараметрыПечати);
			Продолжить;
			
		КонецЕсли;
		
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		Если СтрНайти(ФорматВыводаСуммы, "ЧН") = 0 Тогда 
			ФорматВыводаСуммы = ФорматВыводаСуммы + ";ЧН=0.00";
		КонецЕсли;
		ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВыводитьКодВидаТовара = (Документ.Дата >= Дата('20171001'));
		ВыводитьКодТНВЭД      = ПраваИНастройкиПользователя.Значение("ВыводитьКодТНВЭД");
		
		// Зададим параметры макета.
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_КорректировочныйСчетФактура");
		
		ОбластьШапка            = Макет.ПолучитьОбласть("Шапка");
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьСтрока           = Макет.ПолучитьОбласть("Строка");
		ОбластьИтого            = Макет.ПолучитьОбласть("Итого");
		ОбластьПодвал           = Макет.ПолучитьОбласть("Подвал");
		
		// Дата документа
		ДатаДокумента = Документ.Дата;
		
		// Валюта печати
		ВалютаПечатногоДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		
		// Выводим шапку
		ОбластьШапка.Параметры.НомерИсправленияКорректировочного =
			?(НЕ ЗначениеЗаполнено(Документ.НомерИсправления), Документ.Номер, Документ.НомерИсправления);
		
		ОбластьШапка.Параметры.ДатаИсправленияКорректировочного = Формат(Документ.Дата,"ДЛФ=DD");
		ХозОперация = Документ.ДокументОснование.ХозОперация;
		Если ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон
			ИЛИ ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииАвтомобилейКорректировкаПоСогласованиюСторон Тогда
			
			Если ЗначениеЗаполнено(Документ.НомерИсправляемогоКорректировочногоДокумента) Тогда
				НомерДокумента = Документ.НомерИсправляемогоКорректировочногоДокумента;
			Иначе
				НомерДокумента = Документ.Номер;					
			КонецЕсли;
			НомерДокумента = УправлениеПечатьюПлатформа.ДополнитьНомерСчетФактурыИндексомОбособленногоПодразделения(НомерДокумента, Документ);
			ОбластьШапка.Параметры.Номер = НомерДокумента;				
				
			ОбластьШапка.Параметры.Дата = Формат(?(НЕ ЗначениеЗаполнено(Документ.ДатаИсправляемогоКорректировочногоДокумента),
				Документ.Дата, Документ.ДатаИсправляемогоКорректировочногоДокумента), "ДЛФ=DD");
			ОбластьШапка.Параметры.НомерИсправленияКорректировочного = "-";
			ОбластьШапка.Параметры.ДатаИсправленияКорректировочного = "-";
		Иначе
			
			Если ЗначениеЗаполнено(Документ.НомерИсправляемогоКорректировочногоДокумента) Тогда
				НомерДокумента = Документ.НомерИсправляемогоКорректировочногоДокумента;
				НомерДокумента = УправлениеПечатьюПлатформа.ДополнитьНомерСчетФактурыИндексомОбособленногоПодразделения(НомерДокумента, Документ);
			Иначе
				НомерДокумента = "-";	
			КонецЕсли;
			ОбластьШапка.Параметры.Номер = НомерДокумента;
		
			ОбластьШапка.Параметры.Дата = Формат(?(НЕ ЗначениеЗаполнено(Документ.ДатаИсправляемогоКорректировочногоДокумента),
				"-", Документ.ДатаИсправляемогоКорректировочногоДокумента), "ДЛФ=DD");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Документ.НомерИсходногоДокумента) Тогда
			НомерСчетаФактуры = Документ.НомерИсходногоДокумента;
			НомерСчетаФактуры = УправлениеПечатьюПлатформа.ДополнитьНомерСчетФактурыИндексомОбособленногоПодразделения(НомерСчетаФактуры, Документ);
		Иначе
			НомерСчетаФактуры = "--";
		КонецЕсли;		
		ОбластьШапка.Параметры.НомерСчетаФактуры = НомерСчетаФактуры;

		ОбластьШапка.Параметры.ДатаСчетаФактуры  = Формат(
			?(НЕ ЗначениеЗаполнено(Документ.ДатаИсходногоДокумента), "--", Документ.ДатаИсходногоДокумента), "ДЛФ=DD");
		ОбластьШапка.Параметры.НомерИсправления  =
			?(НЕ ЗначениеЗаполнено(Документ.НомерИсправленияИсходногоДокумента),
				"--", Документ.НомерИсправленияИсходногоДокумента);
		ОбластьШапка.Параметры.ДатаИсправления   = Формат(
			?(НЕ ЗначениеЗаполнено(Документ.ДатаИсправленияИсходногоДокумента), "--",
				Документ.ДатаИсправленияИсходногоДокумента),
			"ДЛФ=DD");
		
		ОбластьШапка.Параметры.Поставщик = Документ.Организация;
		ОбластьШапка.Параметры.ПредставлениеПоставщика = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			ОбластьШапка.Параметры.Поставщик, ДатаДокумента);
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.ДляПечати = Истина;
		ДополнительныеПараметры.НаДату = ДатаДокумента;
		ОбластьШапка.Параметры.АдресПоставщика         = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.ПодразделениеКомпании, Новый Структура("АдресЮридический"," "), ДополнительныеПараметры);
		
		КПП = УправлениеПечатьюПлатформа.ПолучитьКППДляПечати(Документ.Организация, Документ.ПодразделениеКомпании,
			ДатаДокумента);
		ОбластьШапка.Параметры.ИННПоставщика = Документ.Организация.ИНН + "/" + КПП;
		
		ДанныеПокупателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.Контрагент,
			"ФормаСобственности,ГоловнойКонтрагент");
		Если ДанныеПокупателя.ФормаСобственности = Перечисления.ФормыСобственности.ОбособленноеПодразделение Тогда
			Покупатель = ДанныеПокупателя.ГоловнойКонтрагент;
		Иначе
			Покупатель = Документ.Контрагент;
		КонецЕсли;
		ОбластьШапка.Параметры.Покупатель = Покупатель;
		ОбластьШапка.Параметры.ПредставлениеПокупатель = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
			ОбластьШапка.Параметры.Покупатель, ДатаДокумента);
		ОбластьШапка.Параметры.АдресПокупателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Покупатель, Новый Структура("АдресЮридический", ""), ДополнительныеПараметры);
		ОбластьШапка.Параметры.ИННПокупателя = Покупатель.ИНН + "/"
			+ РеквизитыСИсторией.ПолучитьКППНаДату(Документ.Контрагент, ДатаДокумента);
		
		ОбластьШапка.Параметры.Валюта = НСтр("ru = 'Валюта: наименование, код'") + " "
			+ ?(ЗначениеЗаполнено(ВалютаПечатногоДокумента.НаименованиеПолное), 
				ВалютаПечатногоДокумента.НаименованиеПолное, ВалютаПечатногоДокумента.Наименование)
			+ ", " + ВалютаПечатногоДокумента.Код;
		
		// Если дата документа позднее 01.07.2017.
		Если ВыводитьКодВидаТовара Тогда
			ОбластьШапка.Параметры.Редакция =
				НСтр("ru = '(в редакции постановления Правительства Российской Федерации от 19 августа 2017 № 981)'");
		ИначеЕсли Документ.Дата >= Дата('20170701') Тогда
			ОбластьШапка.Параметры.Редакция =
				НСтр("ru = '(в редакции постановления Правительства Российской Федерации от 25 мая 2017 г. № 625)'");
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		// Если дата документа позднее 01.07.2017.
		Если Документ.Дата >= Дата('20170701') Тогда
			ОбластьШапкаИдГосКонтракта = Макет.ПолучитьОбласть("ШапкаИдГосКонтракта");
			
			ЗаголовокИдентификатораГосударственногоКонтракта =
				НСтр("ru = 'Идентификатор государственного контракта, договора (соглашения)'")
				+ ?(ВыводитьКодВидаТовара, " (" + НСтр("ru = 'при наличии'") + ")", "")+": ";
			
			ОбластьШапкаИдГосКонтракта.Параметры.ИдентификаторГосударственногоКонтракта =
				ЗаголовокИдентификатораГосударственногоКонтракта + Документ.ИдентификаторГосударственногоКонтракта;
			
			ТабличныйДокумент.Вывести(ОбластьШапкаИдГосКонтракта);
		КонецЕсли;
		
		// Уберем колонку, вывод которой утвержден с 1 октября 2017 г.
		Если НЕ ВыводитьКодВидаТовара Тогда
			
			ОбластьКодВидаТовара = Макет.Область("КодВидаТовара");
			НовыйТекст =
				ОбластьЗаголовокТаблицы.Область(1, ОбластьКодВидаТовара.Лево - 4, 3, ОбластьКодВидаТовара.Лево - 1).Текст;
			
			ОбластьВыреза = ОбластьЗаголовокТаблицы.Область(1, ОбластьКодВидаТовара.Лево - 4, 3, ОбластьКодВидаТовара.Право);
			ОбластьВыреза.Объединить();
			ОбластьВыреза.Текст = НовыйТекст;
			
			ОбластьВыреза = ОбластьЗаголовокТаблицы.Область(4, ОбластьКодВидаТовара.Лево - 4, 4, ОбластьКодВидаТовара.Право);
			ОбластьВыреза.Объединить();
			
			ОбластьКодВидаТовара = Макет.Область("СтрокаКодВидаТовара");
			НомерСтроки = 1;
			Пока НомерСтроки < 5 Цикл
				ТекстЯчейки   = ОбластьСтрока.Область(НомерСтроки, ОбластьКодВидаТовара.Лево - 4,
					НомерСтроки, ОбластьКодВидаТовара.Лево - 1).Текст;
				ОбластьВыреза =
					ОбластьСтрока.Область(НомерСтроки, ОбластьКодВидаТовара.Лево - 4, НомерСтроки, ОбластьКодВидаТовара.Право);
				ОбластьВыреза.Объединить();
				ОбластьВыреза.Текст = ТекстЯчейки;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
		
		// Готовим шапку
		НомерСтраницы = 2; НомерСтраницыПред = 2;
		СтруктураИтоговПоСтранице = Новый Структура();
		СтруктураИтоговПоСтранице.Вставить("РазницаБезНДСУвеличение", 0);
		СтруктураИтоговПоСтранице.Вставить("РазницаБезНДСУменьшение", 0);
		СтруктураИтоговПоСтранице.Вставить("РазницаНДСУменьшение",    0);
		СтруктураИтоговПоСтранице.Вставить("РазницаНДСУвеличение",    0);
		СтруктураИтоговПоСтранице.Вставить("РазницаСНДСУменьшение",   0);
		СтруктураИтоговПоСтранице.Вставить("РазницаСНДСУвеличение",   0);

		СтруктураИтоговПоСтраницеИтого = Новый Структура();
		СтруктураИтоговПоСтраницеИтого.Вставить("РазницаБезНДСУвеличение", 0);
		СтруктураИтоговПоСтраницеИтого.Вставить("РазницаБезНДСУменьшение", 0);
		СтруктураИтоговПоСтраницеИтого.Вставить("РазницаНДСУменьшение",    0);
		СтруктураИтоговПоСтраницеИтого.Вставить("РазницаНДСУвеличение",    0);
		СтруктураИтоговПоСтраницеИтого.Вставить("РазницаСНДСУменьшение",   0);
		СтруктураИтоговПоСтраницеИтого.Вставить("РазницаСНДСУвеличение",   0);
		ВыборкаТабличнойЧасти = ПолучитьВыборку(Документ.ДокументОснование);
		
		Если ТипЗнч(Документ.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей") Тогда
			АвтомобилиСервер.ДополнитьСебестоимостьюАвтомобилей(ВыборкаТабличнойЧасти, Документ.ДокументОснование.Сделка.Дата);
		КонецЕсли;
		
		СтруктураДокумента = Новый Структура;
		СтруктураДокумента.Вставить("Дата", Документ.Дата);
		СтруктураДокумента.Вставить("ВалютаДокумента", ВалютаПечатногоДокумента);
		СтруктураДокумента.Вставить("КурсДокумента", ?(ВалютаПечатногоДокумента = Документ.ВалютаДокумента,
			Документ.КурсДокумента, Документ.Дата));
			
		МассивАвтомобилей = Новый Массив;
		
		Если ТипЗнч(Документ.ДокументОснование) <> Тип("ДокументСсылка.РеализацияАктивов") Тогда 
			Для Каждого ТекущаяСтрока Из ВыборкаТабличнойЧасти Цикл
				Если ТипЗнч(ТекущаяСтрока.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
					МассивАвтомобилей.Добавить(ТекущаяСтрока.Номенклатура);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Только для автомобилей
		СебестоимостьАвтомобилей = Новый Соответствие;
		Если МассивАвтомобилей.Количество() > 0 Тогда
			СебестоимостьАвтомобилей = АвтомобилиСервер.СебестоимостьАвтомобилейПриобретенныхУФизЛиц(
				МассивАвтомобилей, СтруктураДокумента);
		КонецЕсли;
		
		// Пересчет сумм по выбранной валюте.
		Если ВыборкаТабличнойЧасти.Количество() > 0
			И ВалютаПечатногоДокумента <> Документ.ВалютаДокумента Тогда
			ДокументОбъектСтруктура = УправлениеПечатьюПлатформа.ДанныеДокументаДляПерерасчетаТаблицы();
			ЗаполнитьЗначенияСвойств(ДокументОбъектСтруктура, Документ);
			ДокументОбъектСтруктура.Документ = Документ.ДокументОснование;
			
			ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ВыборкаТабличнойЧасти,
				ДокументОбъектСтруктура,
				ВалютаПечатногоДокумента);
		КонецЕсли;
		
		мсвДопОбластиПодвала = Новый Массив;
		мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
		мсвДопОбластиПодвала.Добавить(ОбластьИтого);
		
		Ном=1;
		СуммаВсегоБезНал = 0;
		ДанныеЕдиницыИзмеренияАвтоработВПечатныхФормах = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Документ.ДоговорВзаиморасчетов,
			"ЕдиницаИзмеренияАвтоработВПечатныхФормах, ЕдиницаИзмеренияАвтоработВПечатныхФормах.Код"
		);
		Для Каждого СтрокаТоваров Из ВыборкаТабличнойЧасти Цикл
			
			Если ЗначениеЗаполнено(СтрокаТоваров.Содержание) Тогда
				ОбластьСтрока.Параметры.НаименованиеНоменклатуры = СтрокаТоваров.Содержание;
			Иначе
				ОбластьСтрока.Параметры.НаименованиеНоменклатуры = УправлениеПечатьюПлатформа
					.ПолучитьНаименованиеСправочника(СтрокаТоваров.Номенклатура);
			КонецЕсли;
			
			Если СтрокаТоваров.Товар Тогда
				Если ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод          = "796";
					ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмерения = "шт";
					Если ВыводитьКодВидаТовара Тогда
						КодТНВЭД = СтрокаТоваров.Номенклатура.КодТНВЭД;
						Если ЗначениеЗаполнено(КодТНВЭД) И ВыводитьКодТНВЭД Тогда
							ОбластьСтрока.Параметры.КодВидаТовара = СокрЛП(КодТНВЭД);
						Иначе
							ОбластьСтрока.Параметры.КодВидаТовара = "--";
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли СтрокаТоваров.Номенклатура.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Услуга Тогда
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод          = СтрокаТоваров.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код;
					ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмерения = СтрокаТоваров.ЕдиницаИзмерения;
					Если ВыводитьКодВидаТовара Тогда
						КодТНВЭД = СтрокаТоваров.Номенклатура.КодТНВЭД;
						Если ЗначениеЗаполнено(КодТНВЭД) И ВыводитьКодТНВЭД Тогда
							ОбластьСтрока.Параметры.КодВидаТовара = СокрЛП(КодТНВЭД);
						Иначе
							ОбластьСтрока.Параметры.КодВидаТовара = "--";
						КонецЕсли;
					КонецЕсли;
				Иначе
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод          = "--";
					ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмерения = "--";
					Если ВыводитьКодВидаТовара Тогда
						ОбластьСтрока.Параметры.КодВидаТовара = "--";
					КонецЕсли;
				КонецЕсли;
			Иначе 
				ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмерения = ДанныеЕдиницыИзмеренияАвтоработВПечатныхФормах.ЕдиницаИзмеренияАвтоработВПечатныхФормах;
				Если ДанныеЕдиницыИзмеренияАвтоработВПечатныхФормах.ЕдиницаИзмеренияАвтоработВПечатныхФормах <>
					ПредопределенноеЗначение("Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка") Тогда
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = ДанныеЕдиницыИзмеренияАвтоработВПечатныхФормах.ЕдиницаИзмеренияАвтоработВПечатныхФормахКод;	
				Иначе 
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = "--";
				КонецЕсли;
				Если ВыводитьКодВидаТовара Тогда
					ОбластьСтрока.Параметры.КодВидаТовара = "--";
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаТоваров.Товар Тогда
				
				ОбластьСтрока.Параметры.КоличествоПослеИзменения = Формат(СтрокаТоваров.Количество, 
					?(СтрокаТоваров.Количество = 0, "ЧН=-", ФорматВыводаКоличества)
				);
				ОбластьСтрока.Параметры.КоличествоДоИзменения = Формат(СтрокаТоваров.КоличествоПоДокументуРеализации,
					?(СтрокаТоваров.КоличествоПоДокументуРеализации = 0, "ЧН=-", ФорматВыводаКоличества)
				);
				
			Иначе
				КоличествоПослеИзменения = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
				ОбластьСтрока.Параметры.КоличествоПослеИзменения = Формат(КоличествоПослеИзменения,
					?(КоличествоПослеИзменения = 0, "ЧН=-", ФорматВыводаКоличества)
				);
				КоличествоДоИзменения = СтрокаТоваров.КоличествоПоДокументуРеализации
					* СтрокаТоваров.КоэффициентПоДокументуРеализации;
				ОбластьСтрока.Параметры.КоличествоДоИзменения    = Формат(КоличествоДоИзменения,
					?(КоличествоДоИзменения = 0, "ЧН=-", ФорматВыводаКоличества)
				);
				
			КонецЕсли;
			
			ОбластьСтрока.Параметры.СтавкаНДС = СтрокаТоваров.СтавкаНДС;
			ОбластьСтрока.Параметры.СтоимостьСНДСДоИзменения =
				Формат(СтрокаТоваров.СуммаВсегоПоДокументуРеализации, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СтоимостьСНДСПослеИзменения = Формат(СтрокаТоваров.СуммаВсего, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.РазницаСНДСУвеличение       = Формат(
				?(СтрокаТоваров.СуммаВсегоРазница > 0, СтрокаТоваров.СуммаВсегоРазница, 0), ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.РазницаСНДСУменьшение       = Формат(
				?(СтрокаТоваров.СуммаВсегоРазница < 0, - СтрокаТоваров.СуммаВсегоРазница, 0), ФорматВыводаСуммы);
			
			ОбластьСтрока.Параметры.СуммаНДСДоИзменения     = Формат(СтрокаТоваров.СуммаНДСПоДокументуРеализации,
				ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.СуммаНДСПослеИзменения  = Формат(СтрокаТоваров.СуммаНДС, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.РазницаНДСУвеличение    = Формат(
				?(СтрокаТоваров.СуммаНДСРазница > 0, СтрокаТоваров.СуммаНДСРазница, 0), ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.РазницаНДСУменьшение    = Формат(
				?(СтрокаТоваров.СуммаНДСРазница < 0, - СтрокаТоваров.СуммаНДСРазница, 0), ФорматВыводаСуммы);
			
			Себестоимость = СебестоимостьАвтомобилей.Получить(СтрокаТоваров.Номенклатура);
			
			Если Себестоимость <> Неопределено И Себестоимость > 0 Тогда
				
				СтоимостьБезНДСДоИзменения = СтрокаТоваров.СуммаВсегоПоДокументуРеализации - Себестоимость;
				СтоимостьБезНДСДоИзменения = ?(СтоимостьБезНДСДоИзменения > 0, СтоимостьБезНДСДоИзменения, 0);
				ОбластьСтрока.Параметры.СтоимостьБезНДСДоИзменения = Формат(СтоимостьБезНДСДоИзменения, ФорматВыводаСуммы);
				
				СтоимостьБезНДСПослеИзменения = СтрокаТоваров.СуммаВсего - Себестоимость;
				СтоимостьБезНДСПослеИзменения = ?(СтоимостьБезНДСПослеИзменения > 0,СтоимостьБезНДСПослеИзменения, 0);
				ОбластьСтрока.Параметры.СтоимостьБезНДСПослеИзменения = Формат(СтоимостьБезНДСПослеИзменения, ФорматВыводаСуммы);
				
				РазницаБезНДС = СтоимостьБезНДСПослеИзменения - СтоимостьБезНДСДоИзменения;
				ОбластьСтрока.Параметры.РазницаБезНДСУвеличение = Формат(?(РазницаБезНДС > 0, РазницаБезНДС, 0),
					ФорматВыводаСуммы);
				ОбластьСтрока.Параметры.РазницаБезНДСУменьшение = Формат(?(РазницаБезНДС < 0, -РазницаБезНДС, 0),
					ФорматВыводаСуммы);
				
			Иначе
				
				ОбластьСтрока.Параметры.СтоимостьБезНДСДоИзменения    = Формат(
					(СтрокаТоваров.СуммаВсегоПоДокументуРеализации - СтрокаТоваров.СуммаНДСПоДокументуРеализации), ФорматВыводаСуммы);
				ОбластьСтрока.Параметры.СтоимостьБезНДСПослеИзменения = Формат((СтрокаТоваров.СуммаВсего - СтрокаТоваров.СуммаНДС),
					ФорматВыводаСуммы);
				РазницаБезНДС = (СтрокаТоваров.СуммаВсего - СтрокаТоваров.СуммаНДС)
					- (СтрокаТоваров.СуммаВсегоПоДокументуРеализации - СтрокаТоваров.СуммаНДСПоДокументуРеализации);
				ОбластьСтрока.Параметры.РазницаБезНДСУвеличение = Формат(?(РазницаБезНДС > 0, РазницаБезНДС, 0),
					ФорматВыводаСуммы);
				ОбластьСтрока.Параметры.РазницаБезНДСУменьшение = Формат(?(РазницаБезНДС < 0, - РазницаБезНДС, 0),
					ФорматВыводаСуммы);
				
			КонецЕсли;
			
			Если СтрокаТоваров.Товар Тогда
				Если НЕ СтрокаТоваров.КоличествоПоДокументуРеализации = 0 Тогда
					ЦенаДоИзменения = (СтрокаТоваров.СуммаВсегоПоДокументуРеализации - СтрокаТоваров.СуммаНДСПоДокументуРеализации)
						/ СтрокаТоваров.КоличествоПоДокументуРеализации;
					ОбластьСтрока.Параметры.ЦенаДоИзменения = Формат(ЦенаДоИзменения, ФорматВыводаСуммы);
				Иначе
					ОбластьСтрока.Параметры.ЦенаДоИзменения = "-";
				КонецЕсли;
				ЦенаПослеИзменения = ?(СтрокаТоваров.Количество = 0, 0,
					(СтрокаТоваров.СуммаВсего - СтрокаТоваров.СуммаНДС) / СтрокаТоваров.Количество);
				ОбластьСтрока.Параметры.ЦенаПослеИзменения = 
					?(ЦенаПослеИзменения = 0, "-", Формат(ЦенаПослеИзменения, ФорматВыводаСуммы));
			Иначе
				Если НЕ СтрокаТоваров.КоличествоПоДокументуРеализации = 0 Тогда
					ЦенаДоИзменения = (СтрокаТоваров.СуммаВсегоПоДокументуРеализации - СтрокаТоваров.СуммаНДСПоДокументуРеализации)
						/ (СтрокаТоваров.КоличествоПоДокументуРеализации * СтрокаТоваров.КоэффициентПоДокументуРеализации);
					ОбластьСтрока.Параметры.ЦенаДоИзменения = Формат(ЦенаДоИзменения, ФорматВыводаСуммы);
				Иначе
					ОбластьСтрока.Параметры.ЦенаДоИзменения = "-";
				КонецЕсли;
				ЦенаПослеИзменения = ?(СтрокаТоваров.Количество = 0, 0,
					(СтрокаТоваров.СуммаВсего - СтрокаТоваров.СуммаНДС) / (СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент));
				ОбластьСтрока.Параметры.ЦенаПослеИзменения = 
					?(ЦенаПослеИзменения = 0, "-", Формат(ЦенаПослеИзменения, ФорматВыводаСуммы));
			КонецЕсли;
			
			// Выводим строку, делая проверку попадания на лист.
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьЗаголовокТаблицы, , НомерСтраницы, СтруктураИтоговПоСтранице, Документ, мсвДопОбластиПодвала);
			
			// Инициализация итогов по странице.
			Если НомерСтраницы <> НомерСтраницыПред Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				СтруктураИтоговПоСтранице.Вставить("РазницаБезНДСУвеличение", 0);
				СтруктураИтоговПоСтранице.Вставить("РазницаБезНДСУменьшение", 0);
				СтруктураИтоговПоСтранице.Вставить("РазницаНДСУменьшение",    0);
				СтруктураИтоговПоСтранице.Вставить("РазницаНДСУвеличение",    0);
				СтруктураИтоговПоСтранице.Вставить("РазницаСНДСУменьшение",   0);
				СтруктураИтоговПоСтранице.Вставить("РазницаСНДСУвеличение",   0);
				НомерСтраницыПред = НомерСтраницы;
			КонецЕсли;
			
			// Добавляем итоги
			СтруктураИтоговПоСтранице.РазницаБезНДСУвеличение = СтруктураИтоговПоСтранице.РазницаБезНДСУвеличение
				+ ?(РазницаБезНДС > 0, РазницаБезНДС, 0);
			СтруктураИтоговПоСтранице.РазницаБезНДСУменьшение = СтруктураИтоговПоСтранице.РазницаБезНДСУменьшение
				+ ?(РазницаБезНДС < 0, - РазницаБезНДС, 0);
			СтруктураИтоговПоСтранице.РазницаНДСУменьшение    = СтруктураИтоговПоСтранице.РазницаНДСУменьшение
				+ ?(СтрокаТоваров.СуммаНДСРазница < 0, - СтрокаТоваров.СуммаНДСРазница, 0);
			СтруктураИтоговПоСтранице.РазницаНДСУвеличение    = СтруктураИтоговПоСтранице.РазницаНДСУвеличение
				+ ?(СтрокаТоваров.СуммаНДСРазница > 0, СтрокаТоваров.СуммаНДСРазница, 0);
			СтруктураИтоговПоСтранице.РазницаСНДСУменьшение   = СтруктураИтоговПоСтранице.РазницаСНДСУменьшение
				+ ?(СтрокаТоваров.СуммаВсегоРазница < 0, - СтрокаТоваров.СуммаВсегоРазница, 0);
			СтруктураИтоговПоСтранице.РазницаСНДСУвеличение   = СтруктураИтоговПоСтранице.РазницаСНДСУвеличение
				+ ?(СтрокаТоваров.СуммаВсегоРазница > 0, СтрокаТоваров.СуммаВсегоРазница, 0);
			
			// Итого
			СтруктураИтоговПоСтраницеИтого.РазницаБезНДСУвеличение = СтруктураИтоговПоСтраницеИтого.РазницаБезНДСУвеличение
				+ ?(РазницаБезНДС > 0, РазницаБезНДС, 0);
			СтруктураИтоговПоСтраницеИтого.РазницаБезНДСУменьшение = СтруктураИтоговПоСтраницеИтого.РазницаБезНДСУменьшение
				+ ?(РазницаБезНДС < 0, - РазницаБезНДС, 0);
			СтруктураИтоговПоСтраницеИтого.РазницаНДСУменьшение    = СтруктураИтоговПоСтраницеИтого.РазницаНДСУменьшение
				+ ?(СтрокаТоваров.СуммаНДСРазница < 0, - СтрокаТоваров.СуммаНДСРазница, 0);
			СтруктураИтоговПоСтраницеИтого.РазницаНДСУвеличение    = СтруктураИтоговПоСтраницеИтого.РазницаНДСУвеличение
				+ ?(СтрокаТоваров.СуммаНДСРазница > 0, СтрокаТоваров.СуммаНДСРазница, 0);
			СтруктураИтоговПоСтраницеИтого.РазницаСНДСУменьшение   = СтруктураИтоговПоСтраницеИтого.РазницаСНДСУменьшение
				+ ?(СтрокаТоваров.СуммаВсегоРазница < 0, - СтрокаТоваров.СуммаВсегоРазница, 0);
			СтруктураИтоговПоСтраницеИтого.РазницаСНДСУвеличение   = СтруктураИтоговПоСтраницеИтого.РазницаСНДСУвеличение
				+ ?(СтрокаТоваров.СуммаВсегоРазница > 0, СтрокаТоваров.СуммаВсегоРазница, 0);
			Ном = Ном + 1;
		КонецЦикла;
		
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтого, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		ОбластьИтого.Параметры.РазницаБезНДСУвеличение = Формат(
			СтруктураИтоговПоСтраницеИтого.РазницаБезНДСУвеличение, ФорматВыводаСуммы);
		ОбластьИтого.Параметры.РазницаБезНДСУменьшение = Формат(
			СтруктураИтоговПоСтраницеИтого.РазницаБезНДСУменьшение, ФорматВыводаСуммы);
		ОбластьИтого.Параметры.РазницаНДСУменьшение    = Формат(
			СтруктураИтоговПоСтраницеИтого.РазницаНДСУменьшение,    ФорматВыводаСуммы);
		ОбластьИтого.Параметры.РазницаНДСУвеличение    = Формат(
			СтруктураИтоговПоСтраницеИтого.РазницаНДСУвеличение,    ФорматВыводаСуммы);
		ОбластьИтого.Параметры.РазницаСНДСУменьшение   = Формат(
			СтруктураИтоговПоСтраницеИтого.РазницаСНДСУменьшение,   ФорматВыводаСуммы);
		ОбластьИтого.Параметры.РазницаСНДСУвеличение   = Формат(
			СтруктураИтоговПоСтраницеИтого.РазницаСНДСУвеличение,   ФорматВыводаСуммы);
		ТабличныйДокумент.Вывести(ОбластьИтого);
		
		// Заполним информацию о руководителях организации.
		Руководитель = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"Руководитель", "Руководитель");
		ЭтоИП = Документ.Организация.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель;
		Если Документ.Организация.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо Тогда
			ОбластьПодвал.Параметры.Заполнить(Руководитель);
			ОбластьПодвал.Параметры.Заполнить(
				УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ГлавныйБухгалтер", "ГлавныйБухгалтер"));
		ИначеЕсли ЭтоИП Тогда
			ОбластьПодвал.Параметры.ФИОПБОЮЛ = Руководитель.РуководительПредставление;
			ОбластьПодвал.Параметры.Свидетельство = 
				Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(Документ.Организация,
					Перечисления.ВидыДокументов.Свидетельство);
		КонецЕсли;
		
		ОбластьПодвал.Параметры.ТекстИндивидуальныйПредприниматель = ?(ВыводитьКодВидаТовара,
				НСтр("ru = 'Индивидуальный предприниматель или иное уполномоченное лицо'"),
				НСтр("ru = 'Индивидуальный предприниматель'"));
		
		ТабличныйДокумент.АвтоМасштаб = Истина;
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// Отметим конец области документа
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_КорректировочныйСчетФактура";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции //ПечатьКорректировочныйСчетФактура()

Функция ПолучитьВыборку(ДокументОснование)
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИСТИНА КАК Товар,
		|	КорректировкаРеализацииТовары.Номенклатура КАК Номенклатура,
		|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	КорректировкаРеализацииТовары.Количество КАК Количество,
		|	КорректировкаРеализацииТовары.КоличествоПоДокументуРеализации КАК КоличествоПоДокументуРеализации,
		|	КорректировкаРеализацииТовары.КоличествоРазница КАК КоличествоРазница,
		|	КорректировкаРеализацииТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	КорректировкаРеализацииТовары.ЕдиницаИзмеренияПоДокументуРеализации КАК ЕдиницаИзмеренияПоДокументуРеализации,
		|	КорректировкаРеализацииТовары.Коэффициент КАК Коэффициент,
		|	КорректировкаРеализацииТовары.КоэффициентПоДокументуРеализации КАК КоэффициентПоДокументуРеализации,
		|	КорректировкаРеализацииТовары.Цена КАК Цена,
		|	КорректировкаРеализацииТовары.Сумма КАК Сумма,
		|	КорректировкаРеализацииТовары.СтавкаНДС КАК СтавкаНДС,
		|	КорректировкаРеализацииТовары.СуммаНДС КАК СуммаНДС,
		|	КорректировкаРеализацииТовары.СуммаНДСПоДокументуРеализации КАК СуммаНДСПоДокументуРеализации,
		|	КорректировкаРеализацииТовары.СуммаНДСРазница КАК СуммаНДСРазница,
		|	КорректировкаРеализацииТовары.СуммаВсего КАК СуммаВсего,
		|	КорректировкаРеализацииТовары.СуммаВсегоПоДокументуРеализации КАК СуммаВсегоПоДокументуРеализации,
		|	КорректировкаРеализацииТовары.СуммаВсегоРазница КАК СуммаВсегоРазница,
		|	КорректировкаРеализацииТовары.СтавкаНДСПоДокументуРеализации КАК СтавкаНДСДоИзменения
		|ИЗ
		|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
		|ГДЕ
		|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
		|	И (КорректировкаРеализацииТовары.Количество <> КорректировкаРеализацииТовары.КоличествоПоДокументуРеализации
		|			ИЛИ КорректировкаРеализацииТовары.ЕдиницаИзмерения <> КорректировкаРеализацииТовары.ЕдиницаИзмеренияПоДокументуРеализации
		|			ИЛИ КорректировкаРеализацииТовары.Коэффициент <> КорректировкаРеализацииТовары.КоэффициентПоДокументуРеализации
		|			ИЛИ КорректировкаРеализацииТовары.СтавкаНДС <> КорректировкаРеализацииТовары.СтавкаНДСПоДокументуРеализации
		|			ИЛИ КорректировкаРеализацииТовары.СуммаНДС <> КорректировкаРеализацииТовары.СуммаНДСПоДокументуРеализации
		|			ИЛИ КорректировкаРеализацииТовары.СуммаВсего <> КорректировкаРеализацииТовары.СуммаВсегоПоДокументуРеализации)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЛОЖЬ,
		|	КорректировкаРеализацииРаботы.Авторабота,
		|	НЕОПРЕДЕЛЕНО,
		|	КорректировкаРеализацииРаботы.Количество,
		|	КорректировкаРеализацииРаботы.КоличествоПоДокументуРеализации,
		|	КорректировкаРеализацииРаботы.КоличествоРазница,
		|	КорректировкаРеализацииРаботы.Нормочас,
		|	КорректировкаРеализацииРаботы.Нормочас,
		|	КорректировкаРеализацииРаботы.Коэффициент,
		|	КорректировкаРеализацииРаботы.КоэффициентПоДокументуРеализации,
		|	КорректировкаРеализацииРаботы.Цена,
		|	КорректировкаРеализацииРаботы.Сумма,
		|	КорректировкаРеализацииРаботы.СтавкаНДС,
		|	КорректировкаРеализацииРаботы.СуммаНДС,
		|	КорректировкаРеализацииРаботы.СуммаНДСПоДокументуРеализации,
		|	КорректировкаРеализацииРаботы.СуммаНДСРазница,
		|	КорректировкаРеализацииРаботы.СуммаВсего,
		|	КорректировкаРеализацииРаботы.СуммаВсегоПоДокументуРеализации,
		|	КорректировкаРеализацииРаботы.СуммаВсегоРазница,
		|	КорректировкаРеализацииРаботы.СтавкаНДСПоДокументуРеализации
		|ИЗ
		|	Документ.КорректировкаРеализации.Автоработы КАК КорректировкаРеализацииРаботы
		|ГДЕ
		|	КорректировкаРеализацииРаботы.Ссылка = &Ссылка
		|	И (КорректировкаРеализацииРаботы.Количество <> КорректировкаРеализацииРаботы.КоличествоПоДокументуРеализации
		|			ИЛИ КорректировкаРеализацииРаботы.Коэффициент <> КорректировкаРеализацииРаботы.КоэффициентПоДокументуРеализации
		|			ИЛИ КорректировкаРеализацииРаботы.СтавкаНДС <> КорректировкаРеализацииРаботы.СтавкаНДСПоДокументуРеализации
		|			ИЛИ КорректировкаРеализацииРаботы.СуммаНДС <> КорректировкаРеализацииРаботы.СуммаНДСПоДокументуРеализации
		|			ИЛИ КорректировкаРеализацииРаботы.СуммаВсего <> КорректировкаРеализацииРаботы.СуммаВсегоПоДокументуРеализации)";
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИСТИНА КАК Товар,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
		|	"""" КАК ХарактеристикаНоменклатуры,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Количество КАК Количество,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.КоличествоПоДокументуРеализации КАК КоличествоПоДокументуРеализации,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.КоличествоРазница КАК КоличествоРазница,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Цена КАК Цена,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Сумма КАК Сумма,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДС КАК СуммаНДС,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДСПоДокументуРеализации КАК СуммаНДСПоДокументуРеализации,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДСРазница КАК СуммаНДСРазница,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсего КАК СуммаВсего,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсегоПоДокументуРеализации КАК СуммаВсегоПоДокументуРеализации,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсегоРазница КАК СуммаВсегоРазница,
		|	КорректировкаРеализацииАвтомобилейАвтомобили.СтавкаНДСПоДокументуРеализации КАК СтавкаНДСДоИзменения
		|ИЗ
		|	Документ.КорректировкаРеализацииАвтомобилей.Автомобили КАК КорректировкаРеализацииАвтомобилейАвтомобили
		|ГДЕ
		|	КорректировкаРеализацииАвтомобилейАвтомобили.Ссылка = &Ссылка
		|	И (КорректировкаРеализацииАвтомобилейАвтомобили.Количество <> КорректировкаРеализацииАвтомобилейАвтомобили.КоличествоПоДокументуРеализации
		|			ИЛИ КорректировкаРеализацииАвтомобилейАвтомобили.Сумма <> КорректировкаРеализацииАвтомобилейАвтомобили.СуммаПоДокументуРеализации
		|			ИЛИ КорректировкаРеализацииАвтомобилейАвтомобили.СтавкаНДС <> КорректировкаРеализацииАвтомобилейАвтомобили.СтавкаНДСПоДокументуРеализации
		|			ИЛИ КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДС <> КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДСПоДокументуРеализации
		|			ИЛИ КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсего <> КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсегоПоДокументуРеализации)";
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Функция получения данных для УКД.
//
Функция ПолучитьДанныеДляПечатиУКД(Объект) Экспорт
	
	ДанныеОбъекта = Новый Структура();
	
	Если НЕ Объект.ХозОперация = Справочники.ХозОперации.СчетФактураВыданныйКорректировка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаТоваров = ОбщегоНазначения
		.МенеджерОбъектаПоСсылке(Объект.ДокументОснование)
		.ПолучитьДанныеДляПечатиУКД(Объект.ДокументОснование.ПолучитьОбъект())
		.Товары;
	
	// Данные документа
	ДанныеОбъекта.Вставить("Дата"					, Объект.Дата);
	ДанныеОбъекта.Вставить("Номер"					, УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Объект));
	ДанныеОбъекта.Вставить("ХозОперация"			, Объект.ХозОперация);
	ДанныеОбъекта.Вставить("ДокументОснование"		, Объект.ДокументОснование);
	ДанныеОбъекта.Вставить("ВалютаДокумента"		, Объект.ВалютаДокумента);
	ДанныеОбъекта.Вставить("КурсДокумента"			, Объект.КурсДокумента);
	ДанныеОбъекта.Вставить("ТипЦен"					, Объект.ТипЦен);
	ДанныеОбъекта.Вставить("Поставщик"				, Объект.Организация);
	ДанныеОбъекта.Вставить("ПодразделениеКомпании"	, Объект.ПодразделениеКомпании);
	ДанныеОбъекта.Вставить("ПлатежноРасчетныеДокументы",
		ПлатежноРасчетныеДокументыКлиентСервер.ВСтроку(Объект.ПлатежноРасчетныеДокументы));
	ДанныеОбъекта.Вставить("Покупатель"		, Объект.Контрагент);
	ДанныеОбъекта.Вставить("Организация"	, Объект.Организация);
	ДанныеОбъекта.Вставить("ДоговорВзаиморасчетов" ,
		?(ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетов), Объект.ДоговорВзаиморасчетов, "--"));
	ДанныеОбъекта.Вставить("Товары"			, ТаблицаТоваров);
	ДанныеОбъекта.Вставить("Статус"			, 1);
	ДанныеОбъекта.Вставить("Исправление"	, Объект.Исправление);
	
	ДополнитьДанныеОбъектаНомерамиСчетовФактур(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.Вставить("Ссылка"									, Объект.Ссылка);
	ДанныеОбъекта.Вставить("ИдентификаторГосударственногоКонтракта"	, Объект.ИдентификаторГосударственногоКонтракта);
	
	// Свойства
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект, Истина, Истина, ИскомыеСвойства);
	
	ДанныеОбъекта.Вставить("ДатаОтгрузки",
		УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", ЗначенияСвойствОбъекта)); 
		
	ДанныеОбъекта.Вставить("Руководитель"     	     , 
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "Руководитель")
	);
	ДанныеОбъекта.Вставить("ГлавныйБухгалтер" 		 ,
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Объект, "ГлавныйБухгалтер")
	);
	ДанныеОбъекта.Вставить("Менеджер"         		 , 
		УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Объект, "Менеджер"));
	ДанныеОбъекта.Вставить("ЭтоПродажа", Истина);
	
	Возврат ДанныеОбъекта;
	
КонецФункции

// Функция получения данных для УПД
Функция ПолучитьДанныеДляПечатиУПД(Документ) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Ссылка", Документ.Ссылка);
	Результат.Вставить("Дата", Документ.Дата);
	Результат.Вставить("Номер", УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ));
	Результат.Вставить("ХозОперация", Документ.ХозОперация);
	Результат.Вставить("ДокументОснование", Документ.ДокументОснование);
	Результат.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
	Результат.Вставить("КурсДокумента", Документ.КурсДокумента);
	Результат.Вставить("ТипЦен", Документ.ТипЦен);
	Результат.Вставить("Поставщик", Документ.Организация);
	Результат.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
	Результат.Вставить("Покупатель", Документ.Контрагент);
	Результат.Вставить("Организация", Документ.Организация);
	Результат.Вставить("Статус", 1);
	Результат.Вставить("ИдентификаторГосударственногоКонтракта",
		Документ.ИдентификаторГосударственногоКонтракта);
	
	Результат.Вставить("Исправление", Документ.Исправление);
	Результат.Вставить("ПлатежноРасчетныеДокументы" , Документ.ПлатежноРасчетныеДокументы);
	Результат.Вставить("ДокументОтгрузки", Документ.ДокументОснование);
	
	ДополнитьДанныеОбъектаНомерамиСчетовФактур(Результат, Документ);
	
	Если ЗначениеЗаполнено(Документ.ДокументОснование) Тогда
		
		ХозОперацияДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.ДокументОснование, "ХозОперация");
		ТаблицаРНПТ = УправлениеДиалогомДокументаСервер.РНПТПрослеживаемыхТоваров(Документ.ДокументОснование);
		
	Иначе
		
		ТаблицаРНПТ = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	Результат.Вставить("ТаблицаРНПТ", ТаблицаРНПТ);
	
	Если ХозОперацияДокументаОснования = Справочники.ХозОперации.РеализацияАвтомобилей Тогда
		
		Результат.Вставить("Товары", ПолучитьТоварыССебестоимостью(Документ));
		
	Иначе
		
		Результат.Вставить("Товары", ТоварыДокумента(Документ));
		
	КонецЕсли;
	
	Результат.Вставить("СуммаДокумента", Документ.СуммаДокумента);
	
	Если ЗначениеЗаполнено(Документ.ДоговорВзаиморасчетов) Тогда
		
		Результат.Вставить("ДоговорВзаиморасчетов", Документ.ДоговорВзаиморасчетов);
		
	Иначе
		
		Результат.Вставить("ДоговорВзаиморасчетов", "--");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ.НомерИсправления) Тогда
		
		Результат.Вставить("НомерИсправления", Документ.НомерИсправления);
		
	Иначе
		
		Результат.Вставить("НомерИсправления", "");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ.Дата) Тогда
		
		Результат.Вставить("ДатаИсправления", Документ.Дата);
		
	Иначе
		
		Результат.Вставить("ДатаИсправления", "");
		
	КонецЕсли;
	
	ИскомыеСвойства = Новый Массив();
	ИскомыеСвойства.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаОтгрузки);
	
	ЗначенияСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(Документ, Истина, Истина, ИскомыеСвойства); 
	Результат.Вставить("ДатаОтгрузки"            , УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("ДатаОтгрузки", ЗначенияСвойствОбъекта)); 
	
	Результат.Вставить("Грузоотправитель"        , ?(ЗначениеЗаполнено(Документ.Грузоотправитель), Документ.Грузоотправитель, Документ.Организация));
	Результат.Вставить("Грузополучатель"         , ?(ЗначениеЗаполнено(Документ.Грузополучатель), Документ.Грузополучатель, Документ.Контрагент));
  	
	Результат.Вставить("Руководитель"     	     , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Документ, "Руководитель"));
	Результат.Вставить("ГлавныйБухгалтер" 		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Документ, "ГлавныйБухгалтер"));
	Результат.Вставить("Отпустил"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Документ,"Отпустил"));
	Результат.Вставить("Получил"          		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛицаПодписанты(Документ, "Получил"));
	Результат.Вставить("Менеджер"         		 , УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Менеджер"));
	
	Возврат Результат;
	
КонецФункции

// Дополняет структуру данных объекта данными, обязательными исключительно для корректировочной счет-фактуры.
//
// Параметры:
//   ДанныеОбъекта - Структура - заполняемые данные объекта.
//   Документ - ДокументСсылка.СчетФактураВыданный - счет-фактура, данными которой дополняются.
//
Процедура ДополнитьДанныеОбъектаНомерамиСчетовФактур(ДанныеОбъекта, Документ) Экспорт
	
	СокращенныйНомер = НЕ Константы.ПолныйНомерДокументаВПечатныхФормах.Получить();
	
	Если Документ.Исправление Тогда
		НомерДокумента = ПрефиксацияОбъектов.ПолучитьНомерНаПечать(
			Документ.НомерИсправляемогоКорректировочногоДокумента,
			СокращенныйНомер,
			СокращенныйНомер,
			СокращенныйНомер
		);
		НомерДокумента = УправлениеПечатьюПлатформа.ДополнитьНомерСчетФактурыИндексомОбособленногоПодразделения(
			НомерДокумента,
			Документ
		);
		ДанныеОбъекта.Вставить("НомерИсправляемогоКорректировочногоДокумента", НомерДокумента);
		ДанныеОбъекта.Вставить(
			"ДатаИсправляемогоКорректировочногоДокумента",
			Документ.ДатаИсправляемогоКорректировочногоДокумента
		);
	КонецЕсли;

	Если ЗначениеЗаполнено(Документ.НомерИсправления) Тогда
		ДанныеОбъекта.Вставить("НомерИсправления", Документ.НомерИсправления);
		ДанныеОбъекта.Вставить("ДатаИсправления", Документ.Дата);
	КонецЕсли;

	Если ЗначениеЗаполнено(Документ.НомерИсходногоДокумента) Тогда
		
		Если СокращенныйНомер Тогда
			НомерИсходногоДокумента = ПрефиксацияОбъектов.ПолучитьНомерНаПечать(
				Документ.НомерИсходногоДокумента,
				Истина,
				Истина,
				Истина
			);
		Иначе
			НомерИсходногоДокумента = Документ.НомерИсходногоДокумента;
		КонецЕсли;
		НомерИсходногоДокумента = УправлениеПечатьюПлатформа.ДополнитьНомерСчетФактурыИндексомОбособленногоПодразделения(
			НомерИсходногоДокумента,
			Документ
		);
		ДанныеОбъекта.Вставить("НомерИсходногоДокумента", НомерИсходногоДокумента);
		ДанныеОбъекта.Вставить("ДатаИсходногоДокумента", Документ.ДатаИсходногоДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ.НомерИсправленияИсходногоДокумента) Тогда
		ДанныеОбъекта.Вставить("НомерИсправленияИсходногоДокумента", Документ.НомерИсправленияИсходногоДокумента);
		ДанныеОбъекта.Вставить("ДатаИсправленияИсходногоДокумента", Документ.ДатаИсправленияИсходногоДокумента);
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьСчетФактура2021(Документ, ТабличныйДокумент, ПараметрыПечати, ОбъектыПечати)
	
	ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
	ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
	
	ВыводитьКодТНВЭД = ПраваИНастройкиПользователя.Значение("ВыводитьКодТНВЭД");
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	// Валюта печати
	ВалютаПечатногоДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	ВыборкаТабличнойЧасти = Документ.Товары.Выгрузить();
	
	// Пересчет сумм по выбранной валюте.
	Если ВыборкаТабличнойЧасти.Количество() > 0
		И ВалютаПечатногоДокумента <> Документ.ВалютаДокумента Тогда
		
		ДокументОбъектСтруктура = УправлениеПечатьюПлатформа.ДанныеДокументаДляПерерасчетаТаблицы();
		ЗаполнитьЗначенияСвойств(ДокументОбъектСтруктура, Документ);
		ДокументОбъектСтруктура.Документ = Документ.ДокументОснование;
		
		ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ВыборкаТабличнойЧасти,
		ДокументОбъектСтруктура,
		ВалютаПечатногоДокумента);
		
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(Документ.ДокументОснование) Тогда
		ТаблицаРНПТ = УправлениеДиалогомДокументаСервер.РНПТПрослеживаемыхТоваров(Документ.ДокументОснование);
	Иначе
		ТаблицаРНПТ = Новый ТаблицаЗначений;
	КонецЕсли;
	
	ЕстьРНПТ = ТаблицаРНПТ.Количество() > 0;
	ЕстьСтоимостьТовараПрослеживания = Ложь;
	
	Если ЕстьРНПТ Тогда
		Если Документ.Дата >= Дата('20231001') Тогда
			ЕстьСтоимостьТовараПрослеживания = Истина;
			ИмяМакета = "ОбщийМакет.ПФ_MXL_СчетФактура_01_10_2023_Прослеж";
		Иначе
			ИмяМакета = "ОбщийМакет.ПФ_MXL_СчетФактура_02_04_2021_Прослеж";
		КонецЕсли;
		Макет = УправлениеПечатью.МакетПечатнойФормы(ИмяМакета);
	Иначе
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СчетФактура_02_04_2021");
	КонецЕсли;

	Исправление = Ложь;
	Если ЕстьРеквизит(Документ, "Исправление") Тогда 
		Исправление = Документ.Исправление И Документ.ДатаИсходногоДокумента >= Дата('20241001');
	Иначе
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации")
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей") 
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаПоступления")
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаПоступленияАвтомобилей") Тогда 
			Если Документ.Дата >= Дата('20241001') Тогда 
				Исправление = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Документ.Дата >= Дата('20241001') ИЛИ Исправление Тогда
		НомерРедакции = 1096;
	Иначе
		НомерРедакции = 534;
	КонецЕсли;
	
	ВставлятьНаименованиеВалюты = Ложь;
	
	// Зададим параметры макета
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	КоличествоСтрок = ВыборкаТабличнойЧасти.Количество();
	
	ОбластьШапка           = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
	ОбластьИтогиПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьИтого           = Макет.ПолучитьОбласть("Итого");
	ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
	
	Если Документ.ХозОперация = Справочники.ХозОперации.СчетФактураВыданный Тогда
		
		НомерДокумента =  УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ);
		ДатаДокумента  = Формат(Документ.Дата, "ДЛФ=DD");
		НомерИсправления = "----";
		ДатаИсправления = "----";
		
	Иначе
		
		НомерИсправления = ?(ЗначениеЗаполнено(Документ.НомерИсправления), Документ.НомерИсправления, "----");
		ДатаИсправления = Формат(Документ.Дата, "ДЛФ=DD");
		
		// Найдем изначальную счет фактуру.
		ДокументОсн = Документ.ДокументОснование;
		Пока ТипЗнч(ДокументОсн) = Тип("ДокументСсылка.КорректировкаРеализации") Цикл
			ДокументОсн = ДокументОсн.ДокументОснование;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СчетФактураВыданный.Ссылка
			|ИЗ
			|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
			|ГДЕ
			|	СчетФактураВыданный.ДокументОснование = &ДокументОсн";
		Запрос.УстановитьПараметр("ДокументОсн",ДокументОсн);
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаЗапроса.Следующий() Тогда
			
			НомерДокумента =  УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ВыборкаЗапроса.Ссылка);
			ДатаДокумента  = Формат(ВыборкаЗапроса.Ссылка.Дата, "ДЛФ=DD");
			
		Иначе
			
			НомерДокумента = "----";
			ДатаДокумента = "----";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗаголовкаОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Счет-фактура №%1 от %2'"),
		НомерДокумента,
		ДатаДокумента);

	Если НомерРедакции = 1096 Тогда 
		ОбластьШапка.Параметры.Редакция = НСтр("ru = '(в редакции постановления Правительства Российской Федерации от 16 августа 2024 г. № 1096)'");
	Иначе 
		ОбластьШапка.Параметры.Редакция = НСтр("ru = '(в редакции постановления Правительства Российской Федерации от 2 апреля 2021 г. № 534)'");
	КонецЕсли;
	ОбластьШапка.Параметры.Номер = НомерДокумента;
	ОбластьШапка.Параметры.Дата = ДатаДокумента;
	ОбластьШапка.Параметры.НомерИсправления = НомерИсправления;
	ОбластьШапка.Параметры.ДатаИсправления = ДатаИсправления;
	
	// Дата документа
	Если ТипЗнч(Документ.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
		ДанныеДокументаОтгрузки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.ДокументОснование, "ДатаЗакрытия,Дата");
		ДатаДокумента = ?(ЗначениеЗаполнено(ДанныеДокументаОтгрузки.ДатаЗакрытия),
			ДанныеДокументаОтгрузки.ДатаЗакрытия, ДанныеДокументаОтгрузки.Дата);
	Иначе
		ДатаДокумента = Документ.ДокументОснование.Дата;
	КонецЕсли;
	
	ОбластьШапка.Параметры.Поставщик = Документ.Организация;
	
	ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
	ДополнительныеПараметры.НаДату = ДатаДокумента;
	ОбластьШапка.Параметры.ПредставлениеПоставщика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Организация,
		Новый Структура("Наименование", ""),
		ДополнительныеПараметры);
	
	ДополнительныеПараметры.ДляПечати = Истина;
	ДополнительныеПараметры.НаДату = ДатаДокумента;
	ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
	ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
	ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
	ОбластьШапка.Параметры.АдресПоставщика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.Организация,
		Новый Структура("АдресЮридический", ""),
		ДополнительныеПараметры);
	ОбластьШапка.Параметры.АдресПоставщика = 
		?(ЗначениеЗаполнено(ОбластьШапка.Параметры.АдресПоставщика), ОбластьШапка.Параметры.АдресПоставщика, "--");
	
	ОбластьШапка.Параметры.ВалютаШапка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1, %2'"), 
		?(ЗначениеЗаполнено(ВалютаПечатногоДокумента.НаименованиеПолное),
			ВалютаПечатногоДокумента.НаименованиеПолное, ВалютаПечатногоДокумента.Наименование),
		ВалютаПечатногоДокумента.Код);
	
	КПП = УправлениеПечатьюПлатформа.ПолучитьКППДляПечати(ОбластьШапка.Параметры.Поставщик,
		Документ.ПодразделениеКомпании, ДатаДокумента);
	ИНН = ОбластьШапка.Параметры.Поставщик.ИНН;
	
	ОбластьШапка.Параметры.ИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1/%2'"),
		?(ЗначениеЗаполнено(ИНН), ИНН, "--"),
		?(ЗначениеЗаполнено(КПП), КПП, "--"));
	
	ОбластьШапка.Параметры.Грузоотправитель = ?(ЗначениеЗаполнено(Документ.Грузоотправитель), Документ.Грузоотправитель, Документ.ПодразделениеКомпании);
	
	Если ТипЗнч(ОбластьШапка.Параметры.Грузоотправитель) = Тип("СправочникСсылка.ПодразделенияКомпании") Тогда
		
		ОргДляСравнения = ОбластьШапка.Параметры.Грузоотправитель.Организация;
		
	Иначе
		
		ОргДляСравнения = ОбластьШапка.Параметры.Грузоотправитель;
		
	КонецЕсли;
	
	Если ОргДляСравнения = Документ.Организация Тогда
		
		ОбластьШапка.Параметры.ГрузоотправительПредставление = НСтр("ru = 'он же'");
		
	Иначе
		
		ОбластьШапка.Параметры.ГрузоотправительПредставление = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			ОбластьШапка.Параметры.Грузоотправитель,
			Новый Структура("Наименование,АдресФактический", "", ""));
		
	КонецЕсли;
	
	ЕстьТовары = Ложь;
	Если КоличествоСтрок > 0 Тогда
		
		Для Каждого СтрокаТоваров Из ВыборкаТабличнойЧасти Цикл
			
			ТипТовараВСтроке = ТипЗнч(СтрокаТоваров.Номенклатура);
			
			Если ТипТовараВСтроке = Тип("СправочникСсылка.Автомобили")
				ИЛИ (ТипТовараВСтроке = Тип("СправочникСсылка.Номенклатура")
				И СтрокаТоваров.Номенклатура.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Услуга) Тогда
				
				ЕстьТовары = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЕстьТовары Тогда
			ОбластьШапка.Параметры.ГрузоотправительПредставление = "----";
		КонецЕсли;
		
	КонецЕсли;
	
	Если  Документ.ПлатежноРасчетныеДокументы.Количество() > 0 Тогда
		
		ОбластьШапка.Параметры.ПредставлениеПоДокументу = ПолучитьПлатежноРасчетныеДокументы(Документ.ПлатежноРасчетныеДокументы);
		
	Иначе
		
		ОбластьШапка.Параметры.ПредставлениеПоДокументу = " ";	
		
	КонецЕсли;
	
	Если НЕ ЭтоАвансовыйСчетФактура(Документ) Тогда 

		Если Не Документ.Исправление Тогда 
			
			НомерДокументаОтгрузки = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(Документ.ДокументОснование);
			Если ТипЗнч(Документ.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
				ДанныеДокументаОтгрузки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.ДокументОснование, "ДатаЗакрытия,Дата");
				ДатаДокументаОтгрузки = Формат(
					?(ЗначениеЗаполнено(ДанныеДокументаОтгрузки.ДатаЗакрытия),
					ДанныеДокументаОтгрузки.ДатаЗакрытия, ДанныеДокументаОтгрузки.Дата), "ДЛФ=D");
			Иначе
				ДатаДокументаОтгрузки = Формат(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.ДокументОснование, "Дата"), "ДЛФ=D");
			КонецЕсли;
		Иначе 
		
			ДанныеИсходногоДокумента = КорректировочныеДанныеДокумента();
			ДанныеИсходногоДокумента.ПодразделениеКомпании = Документ.ПодразделениеКомпании;
			ДанныеИсходногоДокумента.Дата = Документ.Дата;
			ЗаполнитьНомера(ДанныеИсходногоДокумента, Документ.ДокументОснование, Истина); 
			ДанныеИсходногоДокумента.Вставить("Номер", ДанныеИсходногоДокумента.НомерИсходногоДокумента);
   			НомерДокументаОтгрузки = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ДанныеИсходногоДокумента);
			ДатаДокументаОтгрузки = Формат(ДанныеИсходногоДокумента.ДатаИсходногоДокумента,"ДЛФ=D");
				
		КонецЕсли;
		
		НомераСтрок = "";
		НаименованиеДокумента = "";
		
		Если НомерРедакции = 1096 Тогда 

			ШаблонПодстрокиДокументаОбОтгрузке = "%1, № %2 от %3 г.";
			НаименованиеДокумента = ПолучитьНаименованиеДокументаОтгрузки(Ложь, ВыборкаТабличнойЧасти);

		Иначе

			ШаблонПодстрокиДокументаОбОтгрузке = "№ п/п %1 № %2 от %3 г.";
			Если ВыборкаТабличнойЧасти.Количество() = 1  Тогда
				НомераСтрок = "1";
			Иначе 
				НомераСтрок = "1 - " + Строка(ВыборкаТабличнойЧасти.Количество());
			КонецЕсли;

		КонецЕсли;

		ОбластьШапка.Параметры.ДокументыОбОтгрузке = СтрШаблон(ШаблонПодстрокиДокументаОбОтгрузке,
			?(НомерРедакции = 1096, НаименованиеДокумента, НомераСтрок),
			?(ЗначениеЗаполнено(НомерДокументаОтгрузки), НомерДокументаОтгрузки, "      "),
			?(ЗначениеЗаполнено(ДатаДокументаОтгрузки), ДатаДокументаОтгрузки, "      "));
		
	КонецЕсли;
	
	ДанныеПокупателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.Контрагент,
		"ФормаСобственности,ГоловнойКонтрагент");
	Если ДанныеПокупателя.ФормаСобственности = Перечисления.ФормыСобственности.ОбособленноеПодразделение Тогда
		Покупатель = ДанныеПокупателя.ГоловнойКонтрагент;
		Грузополучатель = Документ.Контрагент;
		ИННПокупателя = ?(ЗначениеЗаполнено(Покупатель.ИНН), Покупатель.ИНН, "--");
		КПППокупателя = РеквизитыСИсторией.ПолучитьКППНаДату(Документ.Контрагент, ДатаДокумента);
		КПППокупателя = ?(ЗначениеЗаполнено(КПППокупателя), КПППокупателя, "--");
	Иначе
		Покупатель = Документ.Контрагент;
		Грузополучатель = Документ.Грузополучатель;
		ИННПокупателя = ?(ЗначениеЗаполнено(Покупатель.ИНН), Покупатель.ИНН, "--");
		Если ЗначениеЗаполнено(Грузополучатель)
			И Грузополучатель.ФормаСобственности = Перечисления.ФормыСобственности.ОбособленноеПодразделение Тогда
			
			КПППокупателя = РеквизитыСИсторией.ПолучитьКППНаДату(Грузополучатель, ДатаДокумента);
			КПППокупателя = ?(ЗначениеЗаполнено(КПППокупателя), КПППокупателя, "--");
			
		Иначе
			
			КПППокупателя = РеквизитыСИсторией.ПолучитьКППНаДату(Покупатель, ДатаДокумента);
			КПППокупателя = ?(ЗначениеЗаполнено(КПППокупателя), КПППокупателя, "--");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
	ДополнительныеПараметры.НаДату = ДатаДокумента;
	
	Если ЕстьТовары Тогда
		ОбластьШапка.Параметры.Грузополучатель = Грузополучатель;
		ОбластьШапка.Параметры.ГрузополучательПредставление = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		ОбластьШапка.Параметры.Грузополучатель,
		Новый Структура("Наименование,АдресФактический", "",""),
		ДополнительныеПараметры);
	Иначе
		ОбластьШапка.Параметры.ГрузополучательПредставление = " ----";
	КонецЕсли;
	
	ОбластьШапка.Параметры.Покупатель = Покупатель;
	ОбластьШапка.Параметры.ПредставлениеПокупателя  = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		ОбластьШапка.Параметры.Покупатель,
		Новый Структура("Наименование", ""),
		ДополнительныеПараметры);
	
	ОбластьШапка.Параметры.АдресПокупателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		ОбластьШапка.Параметры.Покупатель,
		Новый Структура("АдресЮридический", ""),
		ДополнительныеПараметры);
	ОбластьШапка.Параметры.АдресПокупателя =
		?(ЗначениеЗаполнено(ОбластьШапка.Параметры.АдресПокупателя), ОбластьШапка.Параметры.АдресПокупателя, "--");
		
	ОбластьШапка.Параметры.ИННПокупателя = ИННПокупателя + "/" + КПППокупателя;
	ОбластьШапка.Параметры.ИдентификаторГосударственногоКонтракта = Документ.ИдентификаторГосударственногоКонтракта;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	СтруктураДокумента = Новый Структура;
	СтруктураДокумента.Вставить("Дата", Документ.Дата);
	СтруктураДокумента.Вставить("ВалютаДокумента", ВалютаПечатногоДокумента);
	СтруктураДокумента.Вставить("КурсДокумента", 
		?(ВалютаПечатногоДокумента = Документ.ВалютаДокумента, Документ.КурсДокумента, Документ.Дата));
	
	МассивАвтомобилей = Новый Массив;
	
	Если ТипЗнч(Документ.ДокументОснование) <> Тип("ДокументСсылка.РеализацияАктивов") Тогда 
		Для Каждого ТекущаяСтрока Из ВыборкаТабличнойЧасти Цикл
			Если ТипЗнч(ТекущаяСтрока.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
				МассивАвтомобилей.Добавить(ТекущаяСтрока.Номенклатура);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Только для автомобилей
	СебестоимостьАвтомобилей = Новый Соответствие;
	Если МассивАвтомобилей.Количество() > 0 Тогда
		
		СебестоимостьАвтомобилей = АвтомобилиСервер.СебестоимостьАвтомобилейПриобретенныхУФизЛиц(
		МассивАвтомобилей, СтруктураДокумента);
		ТорговаяНаценка = 0;
		
		// Заполним дополнительные параметры если необходимо.
		Для Каждого СтрокаТоваров Из ВыборкаТабличнойЧасти Цикл
			
			Себестоимость = СебестоимостьАвтомобилей.Получить(СтрокаТоваров.Номенклатура);
			Если ЗначениеЗаполнено(Себестоимость) И Себестоимость > 0 Тогда
				ОблагаемаяСумма = ?(СтрокаТоваров.СуммаВсего > Себестоимость, СтрокаТоваров.СуммаВсего - Себестоимость, 0);
				СуммаНалога = ОблагаемаяСумма / (100 + СтрокаТоваров.СтавкаНДС.Ставка) * СтрокаТоваров.СтавкаНДС.Ставка;
				ТорговаяНаценка = ТорговаяНаценка + ОблагаемаяСумма - СуммаНалога;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТорговаяНаценка > 0 Тогда
			
			ОбластьДополнительноТорговаяНаценка = Макет.ПолучитьОбласть("ДополнительноТорговаяНаценка");
			ОбластьДополнительноТорговаяНаценка.Параметры.ТорговаяНаценка = СтрШаблон(
				НСтр("ru = 'торговая наценка без НДС %1'"), Формат(ТорговаяНаценка, ФорматВыводаСуммы));
			ТабличныйДокумент.Вывести(ОбластьДополнительноТорговаяНаценка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");

	Если ЕстьСтоимостьТовараПрослеживания Тогда 
		Если НомерРедакции = 1096 Тогда 
			ОбластьЗаголовокТаблицы.Параметры.ЗаголовокТаблицы14 = НСтр("ru = 'Стоимость товара, подлежащего прослежива-
			|емости, без налога на добавленную стоимость, в рублях'");
		Иначе 
			ОбластьЗаголовокТаблицы.Параметры.ЗаголовокТаблицы14 = НСтр("ru = 'Стоимость товара, подлежащего прослежива-
			|емости, без налога'");
		КонецЕсли;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
	
	// Готовим шапку
	НомерСтраницы = 2;
	НомерСтраницыПредыдущий = 2;
	СтруктураИтоговПоСтранице = Новый Структура("Сумма, СуммаНДС, СуммаВсего", 0, 0, 0);
	СтруктураОбщихИтогов = Новый Структура("Сумма, СуммаНДС, СуммаВсего", 0, 0, 0);
	
	// Заполним параметры шапки таблицы для следующего листа.
	ОбластьЗаголовокТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовкаОтчета;
	ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница:"+ " " + НомерСтраницы;
	
	мсвДопОбластиПодвала = Новый Массив;
	мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
	мсвДопОбластиПодвала.Добавить(ОбластьИтого);
	
	Ном=1;
	СуммаВсегоБезНДС = 0;
	
	ДанныеЕдиницыИзмеренияАвтоработВПечатныхФормах = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Документ.ДоговорВзаиморасчетов,
		"ЕдиницаИзмеренияАвтоработВПечатныхФормах, ЕдиницаИзмеренияАвтоработВПечатныхФормах.Код"
	);
	
	ЕстьСтрокиСНДС = Ложь;
	ЕстьСтрокиСНДСНаСтранице = Ложь;
	
	СчетФактураНаАванс = Ложь;
	
	Для Каждого СтрокаТоваров Из ВыборкаТабличнойЧасти Цикл
		
		Если СтрокаТоваров.Номенклатура = Справочники.Номенклатура.Предоплата Тогда
		
			СчетФактураНаАванс = Истина;
		
		КонецЕсли;
		
		ЗаполнитьПрочерки = СтрокаТоваров.Номенклатура = Справочники.Номенклатура.Предоплата
			ИЛИ СтрокаТоваров.Номенклатура = Справочники.Номенклатура.КомиссионноеВознаграждение;
		
		Себестоимость = СебестоимостьАвтомобилей.Получить(СтрокаТоваров.Номенклатура);
		Если Себестоимость = Неопределено Тогда
			Себестоимость = 0;
		КонецЕсли;
		
		ОбластьСтрока.Параметры.Заполнить(СтрокаТоваров);
		Если ЗаполнитьПрочерки Тогда
			ОбластьСтрока.Параметры.Количество = "----";	
		Иначе
			ОбластьСтрока.Параметры.Количество = Формат(ОбластьСтрока.Параметры.Количество, ФорматВыводаКоличества);
		КонецЕсли;
		
		Если ВставлятьНаименованиеВалюты Тогда
			ОбластьСтрока.Параметры.НаименованиеВалюты = ?(ЗначениеЗаполнено(ВалютаПечатногоДокумента.НаименованиеПолное),
				ВалютаПечатногоДокумента.НаименованиеПолное,
				ВалютаПечатногоДокумента.Наименование);
			
		КонецЕсли;
		
		ЕстьСодержание = ЗначениеЗаполнено(СтрокаТоваров.Содержание);
		Если ЕстьСодержание Тогда
			Наименование = СтрокаТоваров.Содержание;
		Иначе
			Наименование = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТоваров.Номенклатура);
		КонецЕсли;
		
		ОбластьСтрока.Параметры.ТоварНаименование = Наименование;
		Если Не ЕстьСодержание
			И НЕ СтрокаТоваров.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда
			ОбластьСтрока.Параметры.ТоварНаименование = ОбластьСтрока.Параметры.ТоварНаименование + ", "
			+ СтрокаТоваров.ХарактеристикаНоменклатуры;
		КонецЕсли;
		КоличествоТовара = СтрокаТоваров.Количество;
		Если ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
			ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = СтрокаТоваров.ЕдиницаИзмерения.Код;
			КодТНВЭД = СтрокаТоваров.Номенклатура.КодТНВЭД;
			Если ЗначениеЗаполнено(КодТНВЭД) И ВыводитьКодТНВЭД Тогда
				ОбластьСтрока.Параметры.КодВидаТовара = СокрЛП(КодТНВЭД);
			Иначе
				ОбластьСтрока.Параметры.КодВидаТовара = "--";
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаТоваров.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
			КоличествоТовара = СтрокаТоваров.Количество*СтрокаТоваров.Коэффициент;
			ОбластьСтрока.Параметры.Количество = КоличествоТовара;
			ОбластьСтрока.Параметры.ЕдиницаИзмерения = ДанныеЕдиницыИзмеренияАвтоработВПечатныхФормах.ЕдиницаИзмеренияАвтоработВПечатныхФормах;
			Если ДанныеЕдиницыИзмеренияАвтоработВПечатныхФормах.ЕдиницаИзмеренияАвтоработВПечатныхФормах <>
				ПредопределенноеЗначение("Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка") Тогда
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = ДанныеЕдиницыИзмеренияАвтоработВПечатныхФормах.ЕдиницаИзмеренияАвтоработВПечатныхФормахКод;	
			Иначе 
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = "--";
			КонецЕсли;
			ОбластьСтрока.Параметры.КодВидаТовара = "--";
		ИначеЕсли ЗаполнитьПрочерки Тогда 
			ОбластьСтрока.Параметры.ЕдиницаИзмерения = "----";
			ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = "--";
			ОбластьСтрока.Параметры.КодВидаТовара = "--";
		Иначе
			Если ЗначениеЗаполнено(СтрокаТоваров.ЕдиницаИзмерения) Тогда
				Если СтрокаТоваров.Номенклатура.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Услуга Тогда
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = СтрокаТоваров.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код;
				Иначе
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = "--";
				КонецЕсли;
			КонецЕсли;
			КодТНВЭД = СтрокаТоваров.Номенклатура.КодТНВЭД;
			Если ЗначениеЗаполнено(КодТНВЭД) И ВыводитьКодТНВЭД Тогда
				ОбластьСтрока.Параметры.КодВидаТовара = СокрЛП(КодТНВЭД);
			Иначе
				ОбластьСтрока.Параметры.КодВидаТовара = "--";
			КонецЕсли;
		КонецЕсли;
		
		ОбластьСтрока.Параметры.СтавкаНДС =
		УправлениеПечатьюПлатформа.ПолучитьПредставлениеСтавкиНДС(СтрокаТоваров.СтавкаНДС, "%");
		
		Если ЗаполнитьПрочерки Тогда
			ОбластьСтрока.Параметры.ПредставлениеГТД = "-----";
			ОбластьСтрока.Параметры.ПредставлениеСтраны = "-----";
			ОбластьСтрока.Параметры.ПредставлениеСтраныКод = "-----";
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТоваров.ГТД) Тогда
			ОбластьСтрока.Параметры.ПредставлениеГТД	= "-----";
			ОбластьСтрока.Параметры.ПредставлениеСтраны	= "-----";
			ОбластьСтрока.Параметры.ПредставлениеСтраныКод = "-----";
		Иначе
			
			СтранаИмпортер = СтрокаТоваров.ГТД.Страна;
			ЕстьВКлассификаторе = УправлениеКонтактнойИнформацией
			.ДанныеКлассификатораСтранМираПоКоду(СтранаИмпортер.Код) <> Неопределено;
			
			ОбластьСтрока.Параметры.ПредставлениеГТД =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(СтрокаТоваров.ГТД);
			ОбластьСтрока.Параметры.ПредставлениеСтраны	= СтрокаТоваров.ГТД.Страна.Наименование;
			
			Если ЕстьВКлассификаторе Тогда
				
				ОбластьСтрока.Параметры.ПредставлениеСтраныКод = СтранаИмпортер.Код;
				
			Иначе
				
				ОбластьСтрока.Параметры.ПредставлениеСтраныКод = "--";
				
			КонецЕсли;
			
		КонецЕсли;
		
		СуммаБезНДС = СтрокаТоваров.СуммаВсего - СтрокаТоваров.СуммаНДС;
		ЦенаБезНДС	= СтрокаТоваров.Цена;
		Если ВалютаПечатногоДокумента <> Документ.ВалютаДокумента Или Документ.ТипЦен.ЦенаВключаетНДС Тогда	
			ЦенаБезНДС = СуммаБезНДС / КоличествоТовара;
		КонецЕсли;

		
		Если ЗаполнитьПрочерки Тогда
			
			ОбластьСтрока.Параметры.Сумма = "----";
			ОбластьСтрока.Параметры.Цена = "----";
			СуммаВсегоБезНДС = "----";
			ОбластьСтрока.Параметры.Акциз = "----";
			
		Иначе
			
			ОбластьСтрока.Параметры.Сумма = Формат(СуммаБезНДС, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.Цена = Формат(ЦенаБезНДС, ФорматВыводаСуммы);
			СуммаВсегоБезНДС = СуммаБезНДС + СуммаВсегоБезНДС;
			ОбластьСтрока.Параметры.Акциз = НСтр("ru = 'без акциза'");
			
		КонецЕсли;
		СтрокаСумма = СуммаБезНДС;
		Если СтрокаТоваров.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
			ОбластьСтрока.Параметры.СуммаНДС = НСтр("ru = 'Без НДС'");
			СтрокаСуммаНДС = 0;
		ИначеЕсли Себестоимость > 0 Тогда
			
			ОблагаемаяСумма = ?(СтрокаТоваров.СуммаВсего > Себестоимость, СтрокаТоваров.СуммаВсего - Себестоимость, 0);
			СуммаНалога = ОблагаемаяСумма * СтрокаТоваров.СтавкаНДС.Ставка / (100 + СтрокаТоваров.СтавкаНДС.Ставка) ;
			ОбластьСтрока.Параметры.СуммаНДС = СуммаНалога;
			СтрокаСуммаНДС = СуммаНалога;
			СтрокаСумма = ОблагаемаяСумма;
			ОбластьСтрока.Параметры.Сумма = ОблагаемаяСумма;
			ТекстСтавкаНДС = СокрЛП(СтрокаТоваров.СтавкаНДС.Ставка);
			ОбластьСтрока.Параметры.Цена = Формат(СтрокаТоваров.СуммаВсего-СуммаНалога, ФорматВыводаСуммы);
          
			Если СтрНайти(ТекстСтавкаНДС, "/") = 0 Тогда
				
				ОбластьСтрока.Параметры.СтавкаНДС = ТекстСтавкаНДС + "/1" + ТекстСтавкаНДС + "%";
				
			КонецЕсли;
			
		Иначе
			
			ОбластьСтрока.Параметры.СуммаНДС = Формат(СтрокаТоваров.СуммаНДС, ФорматВыводаСуммы);
			СтрокаСуммаНДС = СтрокаТоваров.СуммаНДС;
			
		КонецЕсли;
		
		ОбластьСтрока.Параметры.СуммаВсего = Формат(СтрокаТоваров.СуммаВсего, ФорматВыводаСуммы);
		СтрокаСуммаВсего = СтрокаТоваров.СуммаВсего;
		
		// Получим Количество прослеживаемого товара в единицах прослеживаемости
		Если ЕстьРНПТ Тогда
			
			Если ЗначениеЗаполнено(СтрокаТоваров.ГТД) И СтрокаТоваров.ГТД.РНПТ Тогда
				Если ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
					И ТаблицаРНПТ <> Неопределено Тогда
					СтруктураПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ГТД");
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТоваров);
					СрокиРНПТ = ТаблицаРНПТ.НайтиСтроки(СтруктураПоиска);
					Если СрокиРНПТ.Количество() > 0 Тогда
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежКод = СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения.Код;
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослеж = СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения.Наименование;
						ОбластьСтрока.Параметры.КоличествоПрослеж =СрокиРНПТ[0].Количество;
					Иначе
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежКод = СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения.Код;
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослеж = СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения.Наименование;
						ОбластьСтрока.Параметры.КоличествоПрослеж = Окр(СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент, 3);
					КонецЕсли;
					Если ЕстьСтоимостьТовараПрослеживания Тогда 
						ОбластьСтрока.Параметры.СтоимПрослеж = СуммаБезНДС;
					КонецЕсли;
				ИначеЕсли ТипЗнч(СтрокаТоваров.Номенклатура)=Тип("СправочникСсылка.Автомобили") Тогда
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежКод = "796";
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослеж = "шт";
					ОбластьСтрока.Параметры.КоличествоПрослеж = 1;
					Если ЕстьСтоимостьТовараПрослеживания Тогда 
						ОбластьСтрока.Параметры.СтоимПрослеж = СуммаБезНДС;
					КонецЕсли;
				Иначе
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежКод = "--";
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослеж = "--";
					ОбластьСтрока.Параметры.КоличествоПрослеж = "----";
					Если ЕстьСтоимостьТовараПрослеживания Тогда 
						ОбластьСтрока.Параметры.СтоимПрослеж = "----";
					КонецЕсли;
				КонецЕсли;
			Иначе
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежКод = "--";
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослеж = "--";
				ОбластьСтрока.Параметры.КоличествоПрослеж = "----";
				Если ЕстьСтоимостьТовараПрослеживания Тогда 
					ОбластьСтрока.Параметры.СтоимПрослеж = "----";
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Выводим строку, делая проверку попадания на лист.
		Если Ном <> КоличествоСтрок Тогда
			// Если строка не последняя, то выводим ее на текущем листе
			МассивОбластьИтог = Новый Массив;
			МассивОбластьИтог.Добавить(ОбластьСтрока);
			МассивОбластьИтог.Добавить(ОбластьИтогиПоСтранице);
			
			МассивОбластьПодвал = Новый Массив;
			МассивОбластьПодвал.Добавить(ОбластьСтрока);
			МассивОбластьПодвал.Добавить(ОбластьИтогиПоСтранице);
            МассивОбластьПодвал.Добавить(ОбластьПодвал);
			МассивОбластьПодвал.Добавить(ОбластьИтого);
			
			РезультатПроверки = ТабличныйДокумент.ПроверитьВывод(МассивОбластьПодвал);
			
			Если НЕ РезультатПроверки Тогда
				РезультатПроверки = ТабличныйДокумент.ПроверитьВывод(МассивОбластьИтог);
			КонецЕсли;
			
			Если НЕ РезультатПроверки Тогда
				Если ЕстьСтрокиСНДСНаСтранице = Ложь Тогда
					СтруктураИтоговПоСтранице.СуммаНДС = НСтр("ru = 'Без НДС'");
				КонецЕсли;
				УправлениеПечатьюПлатформа.ВывестиИтогиПоСтранице(ТабличныйДокумент,
					ОбластьИтогиПоСтранице,
					СтруктураИтоговПоСтранице,
					Документ); 
					
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц(); 
				НомерСтраницы = НомерСтраницы + 1;
				
				ТабличныйДокумент.Вывести(ОбластьЗаголовоктаблицы); 
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		Иначе
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(
				ТабличныйДокумент,
				ОбластьСтрока,
				ОбластьЗаголовоктаблицы,
				ОбластьИтогиПоСтранице,
				НомерСтраницы,
				СтруктураИтоговПоСтранице,
				Документ,
				мсвДопОбластиПодвала);
		КонецЕсли; 
		
		// Инициализация итогов по странице.
		Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
			
			СтруктураИтоговПоСтранице = Новый Структура("Сумма,СуммаНДС,СуммаВсего", 0, 0, 0);
			НомерСтраницыПредыдущий = НомерСтраницы;
			ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница:" + " " + НомерСтраницы;

			ЕстьСтрокиСНДСНаСтранице = Ложь;
			
		КонецЕсли;
		
		Ном = Ном + 1;

		Если СтрокаТоваров.СтавкаНДС <> Справочники.СтавкиНДС.БезНДС Тогда 
			ЕстьСтрокиСНДС = Истина;
			ЕстьСтрокиСНДСНаСтранице = Истина;
        КонецЕсли;
		
		СтруктураИтоговПоСтранице.Сумма = СтруктураИтоговПоСтранице.Сумма + СтрокаСумма;
		СтруктураИтоговПоСтранице.СуммаНДС = СтруктураИтоговПоСтранице.СуммаНДС + СтрокаСуммаНДС;
		СтруктураИтоговПоСтранице.СуммаВсего = СтруктураИтоговПоСтранице.СуммаВсего + СтрокаСуммаВсего;
		
		СтруктураОбщихИтогов.Сумма = СтруктураОбщихИтогов.Сумма + СтрокаСумма;
		СтруктураОбщихИтогов.СуммаВсего = СтруктураОбщихИтогов.СуммаВсего + СтрокаСуммаВсего;
		СтруктураОбщихИтогов.СуммаНДС = СтруктураОбщихИтогов.СуммаНДС + СтрокаСуммаНДС;
		
		
	КонецЦикла;
	
	// Выводим последний подвал, если страниц больше единицы.
	Если НомерСтраницы > 2 Тогда
		Если ЕстьСтрокиСНДСНаСтранице = Ложь Тогда
			СтруктураИтоговПоСтранице.СуммаНДС = НСтр("ru = 'Без НДС'");
		КонецЕсли;
		УправлениеПечатьюПлатформа.
		ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогиПоСтранице, СтруктураИтоговПоСтранице, Документ);
	КонецЕсли;
	
	ОбластьИтого.Параметры.ИтогоСумма = ?(СчетФактураНаАванс, "----", Формат(СтруктураОбщихИтогов.Сумма, ФорматВыводаСуммы));
	Если ЕстьСтрокиСНДС Тогда
		ОбластьИтого.Параметры.ИтогоСуммаНДС = Формат(СтруктураОбщихИтогов.СуммаНДС, ФорматВыводаСуммы);
	Иначе
		ОбластьИтого.Параметры.ИтогоСуммаНДС = НСтр("ru = 'Без НДС'");
	КонецЕсли;
	ОбластьИтого.Параметры.ИтогоВсего = Формат(СтруктураОбщихИтогов.СуммаВсего, ФорматВыводаСуммы);
	ТабличныйДокумент.Вывести(ОбластьИтого);
	
	// Заполним информацию о руководителях организации.
	Руководитель = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Руководитель", "Руководитель");
	
	ЭтоЮридическоеЛицо = Документ.Организация.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо;
	ЭтоИП = Документ.Организация.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель;
	Если ЭтоЮридическоеЛицо Тогда
		ОбластьПодвал.Параметры.Заполнить(Руководитель);
		ГлавныйБухгалтер = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "ГлавныйБухгалтер", "ГлавныйБухгалтер");
		ОбластьПодвал.Параметры.Заполнить(ГлавныйБухгалтер);
	ИначеЕсли ЭтоИП Тогда
		ОбластьПодвал.Параметры.ФИОПБОЮЛ = Руководитель.РуководительПредставление;
		ОбластьПодвал.Параметры.Свидетельство =
		Справочники.ПодтверждающиеДокументы.ПолучитьПодтверждающийДокументОбъектаПоВиду(Документ.Организация,
		Перечисления.ВидыДокументов.Свидетельство);
	КонецЕсли;
		
    ТабличныйДокумент.Вывести(ОбластьПодвал);
	УстановитьПривилегированныйРежим(Ложь);
	
	// Отметим конец области документа.
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	УправлениеПечатьюАльфаАвто.ДублирующиеФаксимиле(ТабличныйДокумент, ОбъектыПечати, Документ, Документ.Организация);

КонецФункции

Функция ПечатьКорректировочныйСчетФактура2021(Документ, ТабличныйДокумент, ОбъектыПечати, ПараметрыПечати)
	
	ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
	Если СтрНайти(ФорматВыводаСуммы, "ЧН") = 0 Тогда
		
		ФорматВыводаСуммы = ФорматВыводаСуммы + ";ЧН=0.00";
		
	КонецЕсли;
	
	ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ВыводитьКодВидаТовара = Документ.Дата >= Дата('20171001');
	ВыводитьКодТНВЭД      = ПраваИНастройкиПользователя.Значение("ВыводитьКодТНВЭД");
	
	// Зададим параметры макета.
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ДанныеДляПечати = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Документ).ПолучитьДанныеДляПечатиУКД(Документ);
	
	Если НЕ ЗначениеЗаполнено(ДанныеДляПечати) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВыборкаТабличнойЧасти = ДанныеДляПечати.Товары;
		
	ЕстьПрослеживаемость = ЕстьПрослеживаемыйТовар(ВыборкаТабличнойЧасти);
	ЕстьСтоимостьТовараПрослеживания = Ложь;
	
	Если ЕстьПрослеживаемость Тогда
		
		Если Документ.Дата >= Дата('20231001') Тогда
			ЕстьСтоимостьТовараПрослеживания = Истина;
			ИмяМакета = "ОбщийМакет.ПФ_MXL_КорректировочныйСчетФактура_01_10_2023_Прослеживаемость";
		Иначе
			ИмяМакета = "ОбщийМакет.ПФ_MXL_КорректировочныйСчетФактура_02_04_2021_Прослеживаемость";
		КонецЕсли;
		Макет = УправлениеПечатью.МакетПечатнойФормы(ИмяМакета);
		
	Иначе
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_КорректировочныйСчетФактура_02_04_2021");
		
	КонецЕсли;
	
	ОбластьШапка            = Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьСтрока           = Макет.ПолучитьОбласть("Строка");
	ОбластьИтого            = Макет.ПолучитьОбласть("Итого");
	ОбластьПодвал           = Макет.ПолучитьОбласть("Подвал");
	
	// Дата документа
	ДатаДокумента = Документ.Дата;

	Исправление = Ложь;
	Если ЕстьРеквизит(Документ, "Исправление") Тогда 
		Исправление = Документ.Исправление И Документ.ДатаИсходногоДокумента >= Дата('20241001');
	Иначе
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации")
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей") 
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаПоступления")
			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаПоступленияАвтомобилей") Тогда 
			Если Документ.Дата >= Дата('20241001') Тогда 
				Исправление = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Документ.Дата >= Дата('20241001') ИЛИ Исправление Тогда
		НомерРедакции = 1096;
	Иначе
		НомерРедакции = 534;
	КонецЕсли;

	Если НомерРедакции = 1096 Тогда 
		ОбластьШапка.Параметры.Редакция = НСтр("ru = '(в редакции постановления Правительства Российской Федерации от 16 августа 2024 г. № 1096)'");
	Иначе 
		ОбластьШапка.Параметры.Редакция = НСтр("ru = '(в редакции постановления Правительства Российской Федерации от 2 апреля 2021 г. № 534)'");
	КонецЕсли;

	Если ЕстьСтоимостьТовараПрослеживания Тогда 
		Если НомерРедакции = 1096 Тогда 
			ОбластьЗаголовокТаблицы.Параметры.ЗаголовокТаблицы14 = НСтр("ru = 'Стоимость товара, подлежащего прослежива-
			|емости, без налога на добавленную стоимость, в рублях'");
		Иначе 
			ОбластьЗаголовокТаблицы.Параметры.ЗаголовокТаблицы14 = НСтр("ru = 'Стоимость товара, подлежащего прослежива-
			|емости, без налога'");
		КонецЕсли;
	КонецЕсли;
	
	// Валюта печати
	ВалютаПечатногоДокумента = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	
	СокращенныйНомер = НЕ Константы.ПолныйНомерДокументаВПечатныхФормах.Получить();

	// Выводим шапку
	ХозОперация = Документ.ДокументОснование.ХозОперация;
	
	Если Документ.Исправление Тогда
		НомерДокумента = ПрефиксацияОбъектов.ПолучитьНомерНаПечать(
			Документ.НомерИсправляемогоКорректировочногоДокумента,
			СокращенныйНомер,
			СокращенныйНомер,
			СокращенныйНомер
		);
		НомерДокумента = УправлениеПечатьюПлатформа.ДополнитьНомерСчетФактурыИндексомОбособленногоПодразделения(
			НомерДокумента,
			Документ
		);
		ОбластьШапка.Параметры.Дата = Формат(Документ.ДатаИсправляемогоКорректировочногоДокумента, "ДЛФ=DD");
	Иначе
		НомерДокумента = ПрефиксацияОбъектов.ПолучитьНомерНаПечать(Документ.Номер,
			СокращенныйНомер,
			СокращенныйНомер,
			СокращенныйНомер
		);
		НомерДокумента = УправлениеПечатьюПлатформа.ДополнитьНомерСчетФактурыИндексомОбособленногоПодразделения(
			НомерДокумента,
			Документ
		);
		ОбластьШапка.Параметры.Дата = Формат(Документ.Дата, "ДЛФ=DD");
	КонецЕсли;
	
	ОбластьШапка.Параметры.Номер = НомерДокумента;
	
	Если ЗначениеЗаполнено(Документ.НомерИсходногоДокумента) Тогда
		
		НомерСчетаФактуры = ПрефиксацияОбъектов.ПолучитьНомерНаПечать(
			Документ.НомерИсходногоДокумента,
			СокращенныйНомер,
			СокращенныйНомер,
			СокращенныйНомер
		);
		НомерСчетаФактуры = УправлениеПечатьюПлатформа.ДополнитьНомерСчетФактурыИндексомОбособленногоПодразделения(
			НомерСчетаФактуры,
			Документ
		);
		ОбластьШапка.Параметры.НомерСчетаФактуры = НомерСчетаФактуры;
		ОбластьШапка.Параметры.ДатаСчетаФактуры = Формат(Документ.ДатаИсходногоДокумента, "ДЛФ=DD");
		
	КонецЕсли;
	
	ОбластьШапка.Параметры.НомерИсправления =
		?(НЕ ЗначениеЗаполнено(Документ.НомерИсправленияИсходногоДокумента),
			"--", Документ.НомерИсправленияИсходногоДокумента);
	ОбластьШапка.Параметры.ДатаИсправления   = Формат(
		?(НЕ ЗначениеЗаполнено(Документ.ДатаИсправленияИсходногоДокумента),
			"--",
			Документ.ДатаИсправленияИсходногоДокумента
		),
		"ДЛФ=DD"
	);
	
	ОбластьШапка.Параметры.НомерИсправленияКорректировочного = 
		?(НЕ ЗначениеЗаполнено(Документ.НомерИсправления), "--", Документ.НомерИсправления);
	ОбластьШапка.Параметры.ДатаИсправленияКорректировочного = Формат(
		?(Документ.Исправление, Документ.Дата, "--"),
		"ДЛФ=DD"
	);
	
	ОбластьШапка.Параметры.Поставщик = Документ.Организация;
	ОбластьШапка.Параметры.ПредставлениеПоставщика = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
		ОбластьШапка.Параметры.Поставщик, ДатаДокумента);
	ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
	ДополнительныеПараметры.ДляПечати = Истина;
	ДополнительныеПараметры.НаДату = Документ.Дата;
	ОбластьШапка.Параметры.АдресПоставщика = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Документ.ПодразделениеКомпании, Новый Структура("АдресЮридический"," "), ДополнительныеПараметры);
	
	КПП = УправлениеПечатьюПлатформа.ПолучитьКППДляПечати(Документ.Организация, Документ.ПодразделениеКомпании,
		ДатаДокумента);
	ОбластьШапка.Параметры.ИННПоставщика = Документ.Организация.ИНН + "/" + КПП;
	
	ДанныеПокупателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.Контрагент,
		"ФормаСобственности,ГоловнойКонтрагент");
	Если ДанныеПокупателя.ФормаСобственности = Перечисления.ФормыСобственности.ОбособленноеПодразделение Тогда
		Покупатель = ДанныеПокупателя.ГоловнойКонтрагент;
	Иначе
		Покупатель = Документ.Контрагент;
	КонецЕсли;
	ОбластьШапка.Параметры.Покупатель = Покупатель;
	ОбластьШапка.Параметры.ПредставлениеПокупатель = УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(
		ОбластьШапка.Параметры.Покупатель, ДатаДокумента);
	ОбластьШапка.Параметры.АдресПокупателя = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
		Покупатель, Новый Структура("АдресЮридический", ""), ДополнительныеПараметры);
	ОбластьШапка.Параметры.ИННПокупателя = Покупатель.ИНН + "/"
		+ РеквизитыСИсторией.ПолучитьКППНаДату(Документ.Контрагент, ДатаДокумента);
	
	ОбластьШапка.Параметры.Валюта = НСтр("ru = 'Валюта: наименование, код'") + " "
		+ ?(ЗначениеЗаполнено(ВалютаПечатногоДокумента.НаименованиеПолное), 
			ВалютаПечатногоДокумента.НаименованиеПолное, ВалютаПечатногоДокумента.Наименование)
		+ ", " + ВалютаПечатногоДокумента.Код;	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	// Если дата документа позднее 01.07.2017.
	Если Документ.Дата >= Дата('20170701') Тогда
		ОбластьШапкаИдГосКонтракта = Макет.ПолучитьОбласть("ШапкаИдГосКонтракта");
		
		ЗаголовокИдентификатораГосударственногоКонтракта =
			НСтр("ru = 'Идентификатор государственного контракта, договора (соглашения)'")
			+ ?(ВыводитьКодВидаТовара, " (" + НСтр("ru = 'при наличии'") + ")", "")+": ";
		
		ОбластьШапкаИдГосКонтракта.Параметры.ИдентификаторГосударственногоКонтракта =
			ЗаголовокИдентификатораГосударственногоКонтракта + Документ.ИдентификаторГосударственногоКонтракта;
		
		ТабличныйДокумент.Вывести(ОбластьШапкаИдГосКонтракта);
	КонецЕсли;
	
	// Уберем колонку, вывод которой утвержден с 1 октября 2017 г.
	Если НЕ ВыводитьКодВидаТовара Тогда
		
		ОбластьКодВидаТовара = Макет.Область("КодВидаТовара");
		НовыйТекст =
			ОбластьЗаголовокТаблицы.Область(1, ОбластьКодВидаТовара.Лево - 4, 3, ОбластьКодВидаТовара.Лево - 1).Текст;
		
		ОбластьВыреза = ОбластьЗаголовокТаблицы.Область(1, ОбластьКодВидаТовара.Лево - 4, 3, ОбластьКодВидаТовара.Право);
		ОбластьВыреза.Объединить();
		ОбластьВыреза.Текст = НовыйТекст;
		
		ОбластьВыреза = ОбластьЗаголовокТаблицы.Область(4, ОбластьКодВидаТовара.Лево - 4, 4, ОбластьКодВидаТовара.Право);
		ОбластьВыреза.Объединить();
		
		ОбластьКодВидаТовара = Макет.Область("СтрокаКодВидаТовара");
		НомерСтроки = 1;
		Пока НомерСтроки < 5 Цикл
			ТекстЯчейки   = ОбластьСтрока.Область(НомерСтроки, ОбластьКодВидаТовара.Лево - 4,
				НомерСтроки, ОбластьКодВидаТовара.Лево - 1).Текст;
			ОбластьВыреза =
				ОбластьСтрока.Область(НомерСтроки, ОбластьКодВидаТовара.Лево - 4, НомерСтроки, ОбластьКодВидаТовара.Право);
			ОбластьВыреза.Объединить();
			ОбластьВыреза.Текст = ТекстЯчейки;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
	
	// Готовим шапку
	НомерСтраницы = 2; НомерСтраницыПред = 2;
	СтруктураИтоговПоСтранице = Новый Структура();
	СтруктураИтоговПоСтранице.Вставить("РазницаБезНДСУвеличение", 0);
	СтруктураИтоговПоСтранице.Вставить("РазницаБезНДСУменьшение", 0);
	СтруктураИтоговПоСтранице.Вставить("РазницаНДСУменьшение",    0);
	СтруктураИтоговПоСтранице.Вставить("РазницаНДСУвеличение",    0);
	СтруктураИтоговПоСтранице.Вставить("РазницаСНДСУменьшение",   0);
	СтруктураИтоговПоСтранице.Вставить("РазницаСНДСУвеличение",   0);

	СтруктураИтоговПоСтраницеИтого = Новый Структура();
	СтруктураИтоговПоСтраницеИтого.Вставить("РазницаБезНДСУвеличение", 0);
	СтруктураИтоговПоСтраницеИтого.Вставить("РазницаБезНДСУменьшение", 0);
	СтруктураИтоговПоСтраницеИтого.Вставить("РазницаНДСУменьшение",    0);
	СтруктураИтоговПоСтраницеИтого.Вставить("РазницаНДСУвеличение",    0);
	СтруктураИтоговПоСтраницеИтого.Вставить("РазницаСНДСУменьшение",   0);
	СтруктураИтоговПоСтраницеИтого.Вставить("РазницаСНДСУвеличение",   0);
	
	Если ЕстьПрослеживаемость Тогда
		
		СтруктураИтоговПоСтранице.Вставить("КоличествоПрослежУвеличениеВсего", 0);
		СтруктураИтоговПоСтранице.Вставить("КоличествоПрослежУменьшениеВсего", 0);
		
		СтруктураИтоговПоСтраницеИтого.Вставить("КоличествоПрослежУвеличениеВсего", 0);
		СтруктураИтоговПоСтраницеИтого.Вставить("КоличествоПрослежУменьшениеВсего", 0);
		
	КонецЕсли;
	
	Если ЕстьСтоимостьТовараПрослеживания Тогда 
		
		СтруктураИтоговПоСтранице.Вставить("СтоимПрослежУвеличениеВсего", 0);
		СтруктураИтоговПоСтранице.Вставить("СтоимПрослежУменьшениеВсего", 0);
		
		СтруктураИтоговПоСтраницеИтого.Вставить("СтоимПрослежУвеличениеВсего", 0);
		СтруктураИтоговПоСтраницеИтого.Вставить("СтоимПрослежУменьшениеВсего", 0);

	КонецЕсли;
	
	СтруктураДокумента = Новый Структура;
	СтруктураДокумента.Вставить("Дата", Документ.Дата);
	СтруктураДокумента.Вставить("ВалютаДокумента", ВалютаПечатногоДокумента);
	СтруктураДокумента.Вставить("КурсДокумента", ?(ВалютаПечатногоДокумента = Документ.ВалютаДокумента,
		Документ.КурсДокумента, Документ.Дата));
		
	МассивАвтомобилей = Новый Массив;
	
	Если ТипЗнч(Документ.ДокументОснование) <> Тип("ДокументСсылка.РеализацияАктивов") Тогда 
		Для Каждого ТекущаяСтрока Из ВыборкаТабличнойЧасти Цикл
			Если ТипЗнч(ТекущаяСтрока.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
				МассивАвтомобилей.Добавить(ТекущаяСтрока.Номенклатура);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Только для автомобилей
	СебестоимостьАвтомобилей = Новый Соответствие;
	Если МассивАвтомобилей.Количество() > 0 Тогда
		СебестоимостьАвтомобилей = АвтомобилиСервер.СебестоимостьАвтомобилейПриобретенныхУФизЛиц(
			МассивАвтомобилей, СтруктураДокумента);
	КонецЕсли;
	
	// Пересчет сумм по выбранной валюте.
	Если ВыборкаТабличнойЧасти.Количество() > 0
		И ВалютаПечатногоДокумента <> Документ.ВалютаДокумента Тогда
		ДокументОбъектСтруктура=Новый Структура();
		ДокументОбъектСтруктура.Вставить("Дата",            Документ.Дата);
		ДокументОбъектСтруктура.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
		ДокументОбъектСтруктура.Вставить("КурсДокумента",   Документ.КурсДокумента);
		ДокументОбъектСтруктура.Вставить("ТипЦен",          Документ.ТипЦен);
		ДокументОбъектСтруктура.Вставить("Документ",        Документ.ДокументОснование);
		
		ЗащищенныеФункцииАльфаАвтоСервер.ПерерасчетТаблицыТоваров(ВыборкаТабличнойЧасти,
			ДокументОбъектСтруктура,
			ВалютаПечатногоДокумента);
	КонецЕсли;
	
	мсвДопОбластиПодвала = Новый Массив;
	мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
	мсвДопОбластиПодвала.Добавить(ОбластьИтого);
	
	Ном = 1;
	СуммаВсегоБезНал = 0;
	ДанныеЕдиницыИзмеренияАвтоработВПечатныхФормах = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.ДоговорВзаиморасчетов, "ЕдиницаИзмеренияАвтоработВПечатныхФормах, ЕдиницаИзмеренияАвтоработВПечатныхФормах.Код");
	
	ЕстьРеквизит_ГТДПослеИзменения = ЕстьРеквизит(ВыборкаТабличнойЧасти, "ГТДПослеИзменения");

	ЕстьСтрокиСНДС = Ложь;
	
	Для Каждого СтрокаТоваров Из ВыборкаТабличнойЧасти Цикл
		
		Если ЗначениеЗаполнено(СтрокаТоваров.Содержание) Тогда
			ОбластьСтрока.Параметры.НаименованиеНоменклатуры = СтрокаТоваров.Содержание;
		Иначе
			ОбластьСтрока.Параметры.НаименованиеНоменклатуры = УправлениеПечатьюПлатформа
				.ПолучитьНаименованиеСправочника(СтрокаТоваров.Номенклатура);
		КонецЕсли;
		
		ОбластьСтрока.Параметры.НомерСтроки = СтрокаТоваров.ИсходныйНомерСтроки;
		
		Если Не ЗначениеЗаполнено(СтрокаТоваров.ИсходныйНомерСтроки) Тогда
			ОбластьСтрока.Параметры.НомерСтроки = "--";
		КонецЕсли;
		
		Если ТипЗнч(СтрокаТоваров.Номенклатура) <> Тип("СправочникСсылка.Автоработы") Тогда
				
			Если ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
				
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКодДо          = "796";
				ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмеренияДо = "шт";
				ОбластьСтрока.Параметры.КодВидаТовара                  = "--";
				
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКодПосле          = "796";
				ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмеренияПосле = "шт";
				
				КодТНВЭД = СтрокаТоваров.Номенклатура.КодТНВЭД;				
				Если ЗначениеЗаполнено(КодТНВЭД) И ВыводитьКодТНВЭД Тогда					
					ОбластьСтрока.Параметры.КодВидаТовара = СокрЛП(КодТНВЭД);					
				Иначе					
					ОбластьСтрока.Параметры.КодВидаТовара = "--";					
				КонецЕсли;
					
			ИначеЕсли СтрокаТоваров.Номенклатура.ВидНоменклатуры <> Перечисления.ВидыНоменклатуры.Услуга Тогда
				
				Если ЗначениеЗаполнено(СтрокаТоваров.ЕдиницаИзмерения) Тогда
					
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияКодДо = СтрокаТоваров.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код;
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияКодПосле = СтрокаТоваров.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код;
					ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмеренияДо = СтрокаТоваров.ЕдиницаИзмерения;
					ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмеренияПосле = СтрокаТоваров.ЕдиницаИзмерения;
					
				Иначе
					
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияКодДо = "--";
					ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмеренияДо = "--";
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияКодПосле = "--";
					ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмеренияПосле = "--";
					
				КонецЕсли;
				
				КодТНВЭД = СтрокаТоваров.Номенклатура.КодТНВЭД;
				
				Если ЗначениеЗаполнено(КодТНВЭД) И ВыводитьКодТНВЭД Тогда
					
					ОбластьСтрока.Параметры.КодВидаТовара = СокрЛП(КодТНВЭД);
					
				Иначе
					
					ОбластьСтрока.Параметры.КодВидаТовара = "--";
					
				КонецЕсли;
				
			Иначе
				
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКодДо          = "--";
				ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмеренияДо= "--";
				ОбластьСтрока.Параметры.КодВидаТовара = "--";
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКодПосле          = "--";
				ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмеренияПосле= "--";
				ОбластьСтрока.Параметры.КодВидаТовара = "--";
				
			КонецЕсли;
			
		Иначе
			
			ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмеренияДо = ДанныеЕдиницыИзмеренияАвтоработВПечатныхФормах.ЕдиницаИзмеренияАвтоработВПечатныхФормах;
			ОбластьСтрока.Параметры.НаименованиеЕдиницыИзмеренияПосле = ДанныеЕдиницыИзмеренияАвтоработВПечатныхФормах.ЕдиницаИзмеренияАвтоработВПечатныхФормах;
			
			Если ДанныеЕдиницыИзмеренияАвтоработВПечатныхФормах.ЕдиницаИзмеренияАвтоработВПечатныхФормах <>
							ПредопределенноеЗначение("Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка") Тогда
				
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКодДо = ДанныеЕдиницыИзмеренияАвтоработВПечатныхФормах.ЕдиницаИзмеренияАвтоработВПечатныхФормахКод;
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКодпосле = ДанныеЕдиницыИзмеренияАвтоработВПечатныхФормах.ЕдиницаИзмеренияАвтоработВПечатныхФормахКод;

			Иначе
				
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКодДо = "--";
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКодПосле = "--";
			
			КонецЕсли;
			
			ОбластьСтрока.Параметры.КодВидаТовара = "--";

		КонецЕсли;
		
		Если ТипЗнч(СтрокаТоваров.Номенклатура) <> Тип("СправочникСсылка.Автоработы") Тогда
			
			КоличествоДоИзменения = СтрокаТоваров.Количество - СтрокаТоваров.КоличествоРазница;
			КоличествоПослеИзменения = СтрокаТоваров.Количество;
			
		ИначеЕсли ЕстьРеквизит(ВыборкаТабличнойЧасти, "Коэффициент") Тогда
				
			КоличествоДоИзменения = (СтрокаТоваров.Количество - СтрокаТоваров.КоличествоРазница)
				* (СтрокаТоваров.КоэффициентПоДокументуРеализации);
			КоличествоПослеИзменения = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
			
		КонецЕсли;
		
		ОбластьСтрока.Параметры.КоличествоПослеИзменения = КоличествоПослеИзменения;
		ОбластьСтрока.Параметры.КоличествоДоИзменения = КоличествоДоИзменения;
		
		ФорматНоль = Формат(0, ФорматВыводаСуммы);
		
		СтоимостьСНДСДоИзменения = СтрокаТоваров.СуммаВсего - СтрокаТоваров.СуммаВсегоРазница;
		СтоимостьСНДСПослеИзменения = СтрокаТоваров.СуммаВсего;
		
		СуммаНДСДоИзменения = СтрокаТоваров.СуммаНДС - СтрокаТоваров.СуммаНДСРазница;
		СуммаНДСПослеИзменения = СтрокаТоваров.СуммаНДС;
		
		ОбластьСтрока.Параметры.СтавкаНДСДоИзменения = СтрокаТоваров.СтавкаНДСДоИзменения;
		ОбластьСтрока.Параметры.СтоимостьСНДСДоИзменения  = Формат(СтоимостьСНДСДоИзменения, ФорматВыводаСуммы);
		ОбластьСтрока.Параметры.СуммаНДСДоИзменения = Формат(СуммаНДСДоИзменения, ФорматВыводаСуммы);
		
		ОбластьСтрока.Параметры.СтавкаНДСПосле = СтрокаТоваров.СтавкаНДС;
		ОбластьСтрока.Параметры.СтоимостьСНДСПослеИзменения = Формат(СтоимостьСНДСПослеИзменения, ФорматВыводаСуммы);
		ОбластьСтрока.Параметры.СуммаНДСПослеИзменения  = Формат(СуммаНДСПослеИзменения, ФорматВыводаСуммы);
		
		Если СтрокаТоваров.СуммаВсегоРазница > 0 Тогда
		
			ОбластьСтрока.Параметры.РазницаСНДСУвеличение = Формат(СтрокаТоваров.СуммаВсегоРазница, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.РазницаСНДСУменьшение = ФорматНоль;
			
		Иначе
			
			ОбластьСтрока.Параметры.РазницаСНДСУвеличение = ФорматНоль;
			ОбластьСтрока.Параметры.РазницаСНДСУменьшение = Формат(-СтрокаТоваров.СуммаВсегоРазница, ФорматВыводаСуммы);
			
		КонецЕсли;
		
		Если СтрокаТоваров.СуммаНДСРазница > 0 Тогда
			
			ОбластьСтрока.Параметры.РазницаНДСУвеличение = Формат(СтрокаТоваров.СуммаНДСРазница, ФорматВыводаСуммы);
			ОбластьСтрока.Параметры.РазницаНДСУменьшение = ФорматНоль;
			
		Иначе
			
			ОбластьСтрока.Параметры.РазницаНДСУвеличение = ФорматНоль;
			ОбластьСтрока.Параметры.РазницаНДСУменьшение = Формат(-СтрокаТоваров.СуммаНДСРазница, ФорматВыводаСуммы);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТоваров.ГТД) Тогда
			
			ОбластьСтрока.Параметры.ПредставлениеГТДДо	= УправлениеПечатьюПлатформа
				.ПолучитьНаименованиеСправочника(СтрокаТоваров.ГТД);
			ОбластьСтрока.Параметры.ПредставлениеСтраныДо	= СтрокаТоваров.ГТД.Страна.Наименование;
			ОбластьСтрока.Параметры.СтранаПроисхожденияКодДо = СтрокаТоваров.ГТД.Страна.Код;
			
		Иначе
			
			ОбластьСтрока.Параметры.ПредставлениеГТДДо = "--";
			ОбластьСтрока.Параметры.ПредставлениеСтраныДо = "--";
			ОбластьСтрока.Параметры.СтранаПроисхожденияКодДо = "--";
			
		КонецЕсли;	
		
		Если ЕстьРеквизит_ГТДПослеИзменения Тогда
			
			Если ЗначениеЗаполнено(СтрокаТоваров.ГТДПослеИзменения) Тогда
				
				ОбластьСтрока.Параметры.ПредставлениеГТДПосле = УправлениеПечатьюПлатформа
					.ПолучитьНаименованиеСправочника(СтрокаТоваров.ГТДПослеИзменения);
				ОбластьСтрока.Параметры.ПредставлениеСтраныПосле = СтрокаТоваров.ГТДПослеИзменения.Страна.Наименование;
				ОбластьСтрока.Параметры.СтранаПроисхожденияКодПосле = СтрокаТоваров.ГТДПослеИзменения.Страна.Код;
				
			Иначе
				
				ОбластьСтрока.Параметры.ПредставлениеГТДПосле = "--";
				ОбластьСтрока.Параметры.ПредставлениеСтраныПосле = "--";
				ОбластьСтрока.Параметры.СтранаПроисхожденияКодПосле = "--";
				
			КонецЕсли;
			
		Иначе
			
			ОбластьСтрока.Параметры.ПредставлениеГТДПосле = ОбластьСтрока.Параметры.ПредставлениеГТДДо;
			ОбластьСтрока.Параметры.ПредставлениеСтраныПосле = ОбластьСтрока.Параметры.ПредставлениеСтраныДо;
			ОбластьСтрока.Параметры.СтранаПроисхожденияКодПосле = ОбластьСтрока.Параметры.СтранаПроисхожденияКодДо;
			
		КонецЕсли;	
		
		Себестоимость = СебестоимостьАвтомобилей.Получить(СтрокаТоваров.Номенклатура);
		
		Если Себестоимость <> Неопределено И Себестоимость > 0 Тогда
			
			СтоимостьБезНДСДоИзменения = СтоимостьСНДСДоИзменения - Себестоимость;
			СтоимостьБезНДСДоИзменения = ?(СтоимостьБезНДСДоИзменения > 0, СтоимостьБезНДСДоИзменения, 0);
			ОбластьСтрока.Параметры.СтоимостьБезНДСДоИзменения = Формат(СтоимостьБезНДСДоИзменения, ФорматВыводаСуммы);
			
			СтоимостьБезНДСПослеИзменения = СтоимостьСНДСПослеИзменения - Себестоимость;
			СтоимостьБезНДСПослеИзменения = ?(СтоимостьБезНДСПослеИзменения > 0,СтоимостьБезНДСПослеИзменения, 0);
			ОбластьСтрока.Параметры.СтоимостьБезНДСПослеИзменения = Формат(СтоимостьБезНДСПослеИзменения, ФорматВыводаСуммы);
			
			РазницаБезНДС = СтоимостьБезНДСПослеИзменения - СтоимостьБезНДСДоИзменения;
			РазницаБезНДСУвеличение = - ?(РазницаБезНДС > 0, РазницаБезНДС, 0);
			ОбластьСтрока.Параметры.РазницаБезНДСУвеличение = Формат(РазницаБезНДСУвеличение, ФорматВыводаСуммы);
			РазницаБезНДСУменьшение = ?(РазницаБезНДС < 0, -РазницаБезНДС, 0);
			ОбластьСтрока.Параметры.РазницаБезНДСУменьшение = Формат(РазницаБезНДСУменьшение, ФорматВыводаСуммы);
			
		Иначе
			
			СтоимостьБезНДСДоИзменения = СтоимостьСНДСДоИзменения - СуммаНДСДоИзменения;
			ОбластьСтрока.Параметры.СтоимостьБезНДСДоИзменения = Формат(
				СтоимостьБезНДСДоИзменения,
				ФорматВыводаСуммы
			);
			
			СтоимостьБезНДСПослеИзменения = СтоимостьСНДСПослеИзменения - СуммаНДСПослеИзменения;
			ОбластьСтрока.Параметры.СтоимостьБезНДСПослеИзменения = Формат(
				СтоимостьБезНДСПослеИзменения,
				ФорматВыводаСуммы
			);
			
			РазницаБезНДС = СтоимостьБезНДСПослеИзменения - СтоимостьБезНДСДоИзменения;
			РазницаБезНДСУвеличение = ?(РазницаБезНДС > 0, РазницаБезНДС, 0);
			ОбластьСтрока.Параметры.РазницаБезНДСУвеличение = Формат(РазницаБезНДСУвеличение, ФорматВыводаСуммы);
			РазницаБезНДСУменьшение = ?(РазницаБезНДС < 0, - РазницаБезНДС, 0);
			ОбластьСтрока.Параметры.РазницаБезНДСУменьшение = Формат(РазницаБезНДСУменьшение, ФорматВыводаСуммы);
			
		КонецЕсли;
		
		КоличествоДоИзменения = СтрокаТоваров.Количество - СтрокаТоваров.КоличествоРазница;
		КоличествоПослеИзменения = СтрокаТоваров.Количество;
		
		ОбластьСтрока.Параметры.ЦенаДоИзменения = ?(
			КоличествоДоИзменения <> 0, 
			СтоимостьБезНДСДоИзменения / КоличествоДоИзменения, 
			0
		);
		ОбластьСтрока.Параметры.ЦенаПослеИзменения = ?(
			КоличествоПослеИзменения <> 0, 
			СтоимостьБезНДСПослеИзменения / КоличествоПослеИзменения, 
			0
		);
		
		КоличествоПрослеж = 0;
		
		Если ЕстьПрослеживаемость Тогда
			
			ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежКодДо    = "--";
			ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежДо       = "--";
			ОбластьСтрока.Параметры.КоличествоПрослежДо             = "--";
			ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежКодПосле = "--";
			ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежПосле    = "--";
			ОбластьСтрока.Параметры.КоличествоПрослежПосле          = "--";
			ОбластьСтрока.Параметры.КоличествоПрослежУвеличение     = "--";
			ОбластьСтрока.Параметры.КоличествоПрослежУменьшение     = "--";
			Если НомерРедакции = 1096 Тогда 
				ОбластьСтрока.Параметры.ПредставлениеГТДУвеличение	= "";
				ОбластьСтрока.Параметры.ПредставлениеГТДУменьшение	= "";
			Иначе 
				ОбластьСтрока.Параметры.ПредставлениеГТДУвеличение	= "Х";
				ОбластьСтрока.Параметры.ПредставлениеГТДУменьшение	= "Х";
			КонецЕсли;
            Если ЕстьСтоимостьТовараПрослеживания Тогда 
				ОбластьСтрока.Параметры.СтоимПрослежДо		        = "--";
				ОбластьСтрока.Параметры.СтоимПрослежПосле		    = "--";
				ОбластьСтрока.Параметры.СтоимПрослежУвеличение	    = "--";
				ОбластьСтрока.Параметры.СтоимПрослежУменьшение	    = "--";
			КонецЕсли;
			
			Если (ЗначениеЗаполнено(СтрокаТоваров.ГТД) И СтрокаТоваров.ГТД.РНПТ)
				ИЛИ (ЕстьРеквизит_ГТДПослеИзменения И ЗначениеЗаполнено(СтрокаТоваров.ГТДПослеИзменения) И СтрокаТоваров.ГТДПослеИзменения.РНПТ) Тогда
				
				Если ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
					
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежКодДо = СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения.Код;
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежДо = СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения.Наименование;
					ОбластьСтрока.Параметры.КоличествоПрослежДо = СтрокаТоваров.КоличествоДо;
					
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежКодПосле = СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения.Код;
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежПосле = СтрокаТоваров.Номенклатура.БазоваяЕдиницаИзмерения.Наименование;
					ОбластьСтрока.Параметры.КоличествоПрослежПосле = ОбластьСтрока.Параметры.КоличествоПрослежДо + СтрокаТоваров.КоличествоРазница;
					
					КоличествоПрослеж =  ОбластьСтрока.Параметры.КоличествоПрослежПосле - ОбластьСтрока.Параметры.КоличествоПрослежДо;
					
					ОбластьСтрока.Параметры.КоличествоПрослежУвеличение = ?(КоличествоПрослеж > 0,КоличествоПрослеж, 0);
					ОбластьСтрока.Параметры.КоличествоПрослежУменьшение = ?(КоличествоПрослеж < 0,- КоличествоПрослеж, 0);

				ИначеЕсли ТипЗнч(СтрокаТоваров.Номенклатура) = Тип("СправочникСсылка.Автомобили") Тогда
					
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежКодДо = "796" ;
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежДо = "шт";
					ОбластьСтрока.Параметры.КоличествоПрослежДо = 1;
					
					Если  СтрокаТоваров.Количество = 0 Тогда
						
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежКодПосле = "796";
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежПосле = "шт";
						ОбластьСтрока.Параметры.КоличествоПрослежПосле = 0;
						
						КоличествоПрослеж = -1;
						
						ОбластьСтрока.Параметры.КоличествоПрослежУвеличение = ?(КоличествоПрослеж > 0,КоличествоПрослеж, 0);
						ОбластьСтрока.Параметры.КоличествоПрослежУменьшение = ?(КоличествоПрослеж < 0,- КоличествоПрослеж, 0);
						
					Иначе
						
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежКодПосле = "796";
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияПрослежПосле = "шт";
						ОбластьСтрока.Параметры.КоличествоПрослежПосле = 1;
						
					КонецЕсли;
					
				КонецЕсли;

				Если НомерРедакции = 1096 Тогда 

					Если ТипЗнч(ОбластьСтрока.Параметры.СтоимПрослежУвеличение) = Тип("Число") Тогда 
						СтоимПрослежУвеличение = ОбластьСтрока.Параметры.СтоимПрослежУвеличение;
					Иначе 
						СтоимПрослежУвеличение = 0;
					КонецЕсли;
					Если ТипЗнч(ОбластьСтрока.Параметры.КоличествоПрослежУвеличение) = Тип("Число") Тогда 
						КоличествоПрослежУвеличение = ОбластьСтрока.Параметры.КоличествоПрослежУвеличение;
					Иначе 
						КоличествоПрослежУвеличение = 0;
					КонецЕсли;
					Если СтоимПрослежУвеличение > 0 ИЛИ КоличествоПрослежУвеличение > 0 Тогда 
						ОбластьСтрока.Параметры.ПредставлениеГТДУвеличение = ОбластьСтрока.Параметры.ПредставлениеГТДПосле;
					Иначе
						ОбластьСтрока.Параметры.ПредставлениеГТДУвеличение = "";
					КонецЕсли;

					Если ТипЗнч(ОбластьСтрока.Параметры.СтоимПрослежУменьшение) = Тип("Число") Тогда 
						СтоимПрослежУменьшение = ОбластьСтрока.Параметры.СтоимПрослежУменьшение;
					Иначе 
						СтоимПрослежУменьшение = 0;
					КонецЕсли;
					Если ТипЗнч(ОбластьСтрока.Параметры.КоличествоПрослежУменьшение) = Тип("Число") Тогда 
						КоличествоПрослежУменьшение = ОбластьСтрока.Параметры.КоличествоПрослежУменьшение;
					Иначе 
						КоличествоПрослежУменьшение = 0;
					КонецЕсли;
					Если СтоимПрослежУменьшение > 0 ИЛИ КоличествоПрослежУменьшение > 0 Тогда 
						ОбластьСтрока.Параметры.ПредставлениеГТДУменьшение = ОбластьСтрока.Параметры.ПредставлениеГТДДо;
					Иначе
						ОбластьСтрока.Параметры.ПредставлениеГТДУменьшение = "";
					КонецЕсли;
					
				КонецЕсли;
				
	            Если ЕстьСтоимостьТовараПрослеживания Тогда 
					ОбластьСтрока.Параметры.СтоимПрослежДо		        = СтоимостьБезНДСДоИзменения;
					ОбластьСтрока.Параметры.СтоимПрослежПосле		    = СтоимостьБезНДСПослеИзменения;
					ОбластьСтрока.Параметры.СтоимПрослежУвеличение	    = РазницаБезНДСУвеличение;
					ОбластьСтрока.Параметры.СтоимПрослежУменьшение	    = РазницаБезНДСУменьшение;
					СтруктураИтоговПоСтранице.СтоимПрослежУвеличениеВсего = СтруктураИтоговПоСтранице.СтоимПрослежУвеличениеВсего + РазницаБезНДСУвеличение;
					СтруктураИтоговПоСтранице.СтоимПрослежУменьшениеВсего = СтруктураИтоговПоСтранице.СтоимПрослежУменьшениеВсего + РазницаБезНДСУменьшение;
					СтруктураИтоговПоСтраницеИтого.СтоимПрослежУвеличениеВсего = СтруктураИтоговПоСтраницеИтого.СтоимПрослежУвеличениеВсего + РазницаБезНДСУвеличение;
					СтруктураИтоговПоСтраницеИтого.СтоимПрослежУменьшениеВсего = СтруктураИтоговПоСтраницеИтого.СтоимПрослежУменьшениеВсего + РазницаБезНДСУменьшение;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Выводим строку, делая проверку попадания на лист.
		НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(
			ТабличныйДокумент,
			ОбластьСтрока,
			ОбластьЗаголовокТаблицы,
			,
			НомерСтраницы,
			СтруктураИтоговПоСтранице,
			Документ,
			мсвДопОбластиПодвала
		);
		
		// Инициализация итогов по странице.
		Если НомерСтраницы <> НомерСтраницыПред Тогда
			
			СтруктураИтоговПоСтранице = Новый Структура();
			СтруктураИтоговПоСтранице.Вставить("РазницаБезНДСУвеличение", 0);
			СтруктураИтоговПоСтранице.Вставить("РазницаБезНДСУменьшение", 0);
			СтруктураИтоговПоСтранице.Вставить("РазницаНДСУменьшение",    0);
			СтруктураИтоговПоСтранице.Вставить("РазницаНДСУвеличение",    0);
			СтруктураИтоговПоСтранице.Вставить("РазницаСНДСУменьшение",   0);
			СтруктураИтоговПоСтранице.Вставить("РазницаСНДСУвеличение",   0);
			
			Если ЕстьПрослеживаемость Тогда
				
				СтруктураИтоговПоСтранице.Вставить("КоличествоПрослежУвеличениеВсего", 0);
				СтруктураИтоговПоСтранице.Вставить("КоличествоПрослежУменьшениеВсего", 0);
				
			КонецЕсли;

			Если ЕстьСтоимостьТовараПрослеживания Тогда
				
				СтруктураИтоговПоСтранице.Вставить("СтоимПрослежУвеличениеВсего", 0);
				СтруктураИтоговПоСтранице.Вставить("СтоимПрослежУменьшениеВсего", 0);
				
			КонецЕсли;
			
			НомерСтраницыПред = НомерСтраницы;
			
		КонецЕсли;
		
		// Добавляем итоги
		СтруктураИтоговПоСтранице.РазницаБезНДСУвеличение = СтруктураИтоговПоСтранице.РазницаБезНДСУвеличение
			+ ?(РазницаБезНДС > 0, РазницаБезНДС, 0);
		СтруктураИтоговПоСтранице.РазницаБезНДСУменьшение = СтруктураИтоговПоСтранице.РазницаБезНДСУменьшение
			+ ?(РазницаБезНДС < 0, - РазницаБезНДС, 0);
		СтруктураИтоговПоСтранице.РазницаНДСУменьшение    = СтруктураИтоговПоСтранице.РазницаНДСУменьшение
			+ ?(СтрокаТоваров.СуммаНДСРазница < 0, - СтрокаТоваров.СуммаНДСРазница, 0);
		СтруктураИтоговПоСтранице.РазницаНДСУвеличение    = СтруктураИтоговПоСтранице.РазницаНДСУвеличение
			+ ?(СтрокаТоваров.СуммаНДСРазница > 0, СтрокаТоваров.СуммаНДСРазница, 0);
		СтруктураИтоговПоСтранице.РазницаСНДСУменьшение   = СтруктураИтоговПоСтранице.РазницаСНДСУменьшение
			+ ?(СтрокаТоваров.СуммаВсегоРазница < 0, - СтрокаТоваров.СуммаВсегоРазница, 0);
		СтруктураИтоговПоСтранице.РазницаСНДСУвеличение   = СтруктураИтоговПоСтранице.РазницаСНДСУвеличение
			+ ?(СтрокаТоваров.СуммаВсегоРазница > 0, СтрокаТоваров.СуммаВсегоРазница, 0);
		
		// Итого
		СтруктураИтоговПоСтраницеИтого.РазницаБезНДСУвеличение = СтруктураИтоговПоСтраницеИтого.РазницаБезНДСУвеличение
			+ ?(РазницаБезНДС > 0, РазницаБезНДС, 0);
		СтруктураИтоговПоСтраницеИтого.РазницаБезНДСУменьшение = СтруктураИтоговПоСтраницеИтого.РазницаБезНДСУменьшение
			+ ?(РазницаБезНДС < 0, - РазницаБезНДС, 0);
		СтруктураИтоговПоСтраницеИтого.РазницаНДСУменьшение    = СтруктураИтоговПоСтраницеИтого.РазницаНДСУменьшение
			+ ?(СтрокаТоваров.СуммаНДСРазница < 0, - СтрокаТоваров.СуммаНДСРазница, 0);
		СтруктураИтоговПоСтраницеИтого.РазницаНДСУвеличение    = СтруктураИтоговПоСтраницеИтого.РазницаНДСУвеличение
			+ ?(СтрокаТоваров.СуммаНДСРазница > 0, СтрокаТоваров.СуммаНДСРазница, 0);
		СтруктураИтоговПоСтраницеИтого.РазницаСНДСУменьшение   = СтруктураИтоговПоСтраницеИтого.РазницаСНДСУменьшение
			+ ?(СтрокаТоваров.СуммаВсегоРазница < 0, - СтрокаТоваров.СуммаВсегоРазница, 0);
		СтруктураИтоговПоСтраницеИтого.РазницаСНДСУвеличение   = СтруктураИтоговПоСтраницеИтого.РазницаСНДСУвеличение
			+ ?(СтрокаТоваров.СуммаВсегоРазница > 0, СтрокаТоваров.СуммаВсегоРазница, 0);
			
		Если ЕстьПрослеживаемость Тогда
			
			СтруктураИтоговПоСтранице.КоличествоПрослежУвеличениеВсего =
				СтруктураИтоговПоСтранице.КоличествоПрослежУвеличениеВсего
				+ ?(КоличествоПрослеж > 0, КоличествоПрослеж, 0);
					
			СтруктураИтоговПоСтранице.КоличествоПрослежУменьшениеВсего = 
				СтруктураИтоговПоСтранице.КоличествоПрослежУменьшениеВсего
				+ ?(КоличествоПрослеж < 0, - КоличествоПрослеж, 0);
				
			СтруктураИтоговПоСтраницеИтого.КоличествоПрослежУвеличениеВсего = 
				СтруктураИтоговПоСтраницеИтого.КоличествоПрослежУвеличениеВсего
				+ ?(КоличествоПрослеж > 0, КоличествоПрослеж, 0);
					
			СтруктураИтоговПоСтраницеИтого.КоличествоПрослежУменьшениеВсего = 
				СтруктураИтоговПоСтраницеИтого.КоличествоПрослежУменьшениеВсего
				+ ?(КоличествоПрослеж < 0, - КоличествоПрослеж, 0);
			
		КонецЕсли;
		
		Если ЕстьСтоимостьТовараПрослеживания Тогда
			
			СтруктураИтоговПоСтранице.СтоимПрослежУвеличениеВсего =
				СтруктураИтоговПоСтранице.СтоимПрослежУвеличениеВсего
				+ ?(РазницаБезНДСУвеличение > 0, РазницаБезНДСУвеличение, 0);
					
			СтруктураИтоговПоСтранице.СтоимПрослежУменьшениеВсего = 
				СтруктураИтоговПоСтранице.СтоимПрослежУменьшениеВсего
				+ ?(РазницаБезНДСУменьшение < 0, - РазницаБезНДСУменьшение, 0);
				
			СтруктураИтоговПоСтраницеИтого.СтоимПрослежУвеличениеВсего = 
				СтруктураИтоговПоСтраницеИтого.СтоимПрослежУвеличениеВсего
				+ ?(РазницаБезНДСУвеличение > 0, РазницаБезНДСУвеличение, 0);
					
			СтруктураИтоговПоСтраницеИтого.СтоимПрослежУменьшениеВсего = 
				СтруктураИтоговПоСтраницеИтого.СтоимПрослежУменьшениеВсего
				+ ?(РазницаБезНДСУменьшение < 0, - РазницаБезНДСУменьшение, 0);
			
		КонецЕсли;
		
		Если СтрокаТоваров.СтавкаНДСДоИзменения <> Справочники.СтавкиНДС.БезНДС
			ИЛИ СтрокаТоваров.СтавкаНДС <> Справочники.СтавкиНДС.БезНДС Тогда 
			ЕстьСтрокиСНДС = Истина;
		КонецЕсли;
		
		Ном = Ном + 1;
		
	КонецЦикла;

	Если НЕ ЕстьСтрокиСНДС Тогда
		СтруктураИтоговПоСтраницеИтого.РазницаНДСУвеличение = НСтр("ru = 'Без НДС'");
		СтруктураИтоговПоСтраницеИтого.РазницаНДСУменьшение = НСтр("ru = 'Без НДС'");
	КонецЕсли;
	
	ОбластьИтого.Параметры.РазницаБезНДСУвеличение = Формат(
		СтруктураИтоговПоСтраницеИтого.РазницаБезНДСУвеличение,
		ФорматВыводаСуммы
	);
	ОбластьИтого.Параметры.РазницаБезНДСУменьшение = Формат(
		СтруктураИтоговПоСтраницеИтого.РазницаБезНДСУменьшение,
		ФорматВыводаСуммы
	);
	ОбластьИтого.Параметры.РазницаНДСУменьшение = Формат(
		СтруктураИтоговПоСтраницеИтого.РазницаНДСУменьшение,
		ФорматВыводаСуммы
	);
	ОбластьИтого.Параметры.РазницаНДСУвеличение = Формат(
		СтруктураИтоговПоСтраницеИтого.РазницаНДСУвеличение,
		ФорматВыводаСуммы
	);
	ОбластьИтого.Параметры.РазницаСНДСУменьшение = Формат(
		СтруктураИтоговПоСтраницеИтого.РазницаСНДСУменьшение,
		ФорматВыводаСуммы
	);
	ОбластьИтого.Параметры.РазницаСНДСУвеличение = Формат(
		СтруктураИтоговПоСтраницеИтого.РазницаСНДСУвеличение,
		ФорматВыводаСуммы
	);
	Если ЕстьПрослеживаемость Тогда
		Если НомерРедакции = 1096 Тогда 
			ОбластьИтого.Параметры.КоличествоПрослежУменьшениеВсего = "Х";
			ОбластьИтого.Параметры.КоличествоПрослежУвеличениеВсего = "Х";
        Иначе
			ОбластьИтого.Параметры.КоличествоПрослежУменьшениеВсего =
				СтруктураИтоговПоСтраницеИтого.КоличествоПрослежУменьшениеВсего;
			ОбластьИтого.Параметры.КоличествоПрослежУвеличениеВсего =
				СтруктураИтоговПоСтраницеИтого.КоличествоПрослежУвеличениеВсего;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьСтоимостьТовараПрослеживания Тогда
		Если НомерРедакции = 1096 Тогда 
			ОбластьИтого.Параметры.СтоимПрослежУвеличениеВсего = "Х";
			ОбластьИтого.Параметры.СтоимПрослежУменьшениеВсего = "Х";
        Иначе
			ОбластьИтого.Параметры.СтоимПрослежУвеличениеВсего =
				СтруктураИтоговПоСтраницеИтого.СтоимПрослежУвеличениеВсего;
			ОбластьИтого.Параметры.СтоимПрослежУменьшениеВсего =
				СтруктураИтоговПоСтраницеИтого.СтоимПрослежУменьшениеВсего;
		КонецЕсли;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьИтого);
	
	// Заполним информацию о руководителях организации.
	Руководитель = УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ,"Руководитель", "Руководитель");
	ЭтоИП = Документ.Организация.ФормаСобственности = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель;
	
	Если Документ.Организация.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо Тогда
		
		ОбластьПодвал.Параметры.Заполнить(Руководитель);
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа
			.ДанныеОтветственногоЛица(Документ, "ГлавныйБухгалтер", "ГлавныйБухгалтер"));
		
	ИначеЕсли ЭтоИП Тогда
			
		ОбластьПодвал.Параметры.ФИОПБОЮЛ = Руководитель.РуководительПредставление;
		ОбластьПодвал.Параметры.Свидетельство = Справочники
			.ПодтверждающиеДокументы
			.ПолучитьПодтверждающийДокументОбъектаПоВиду(Документ.Организация, Перечисления.ВидыДокументов.Свидетельство);
		
	КонецЕсли;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(
		ТабличныйДокумент,
		ОбластьПодвал,
		,
		,
		НомерСтраницы,
		,
		Документ
	);
	
	// Отметим конец области документа
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	
КонецФункции

Функция ЕстьПрослеживаемыйТовар(Товары)
	
	Для Каждого ТекущаяСтрока Из Товары Цикл
		Если ЗначениеЗаполнено(ТекущаяСтрока.ГТД) И ТекущаяСтрока.ГТД.РНПТ Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьНаименованиеДокументаОтгрузки(ЭтоУПД, ВыборкаТабличнойЧасти) Экспорт 
	
	Если ЭтоУПД Тогда
		
		НаименованиеДокумента = НСтр("ru = 'Универсальный передаточный документ'");
		
	Иначе 

		НаименованиеДокумента = НСтр("ru = 'Товарная накладная'");
		
		Если ВыборкаТабличнойЧасти.Количество() > 0 Тогда 

			Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			                      |	ВыборкаТабличнойЧасти.Номенклатура КАК Номенклатура
			                      |ПОМЕСТИТЬ ВТВыборкаТабличнойЧасти
			                      |ИЗ
			                      |	&ВыборкаТабличнойЧасти КАК ВыборкаТабличнойЧасти
			                      |;
			                      |
			                      |////////////////////////////////////////////////////////////////////////////////
			                      |ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	ВТВыборкаТабличнойЧасти.Номенклатура КАК Номенклатура
			                      |ИЗ
			                      |	ВТВыборкаТабличнойЧасти КАК ВТВыборкаТабличнойЧасти
			                      |ГДЕ
								  |	ВЫБОР
								  |		КОГДА ТИПЗНАЧЕНИЯ(ВТВыборкаТабличнойЧасти.Номенклатура) = ТИП(Справочник.Номенклатура)
								  |			ТОГДА ВЫБОР
								  |					КОГДА ВТВыборкаТабличнойЧасти.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
								  |						ТОГДА ЛОЖЬ
								  |					ИНАЧЕ ИСТИНА
								  |				КОНЕЦ
								  |		КОГДА ТИПЗНАЧЕНИЯ(ВТВыборкаТабличнойЧасти.Номенклатура) = ТИП(Справочник.Автоработы)
								  |			ТОГДА ЛОЖЬ
								  |		КОГДА ТИПЗНАЧЕНИЯ(ВТВыборкаТабличнойЧасти.Номенклатура) = ТИП(Справочник.Автомобили)
								  |			ТОГДА ИСТИНА
								  |		ИНАЧЕ ИСТИНА
								  |	КОНЕЦ
								  |");

			Запрос.УстановитьПараметр("ВыборкаТабличнойЧасти", ВыборкаТабличнойЧасти);
			ТоварнаяНоменклатура = Запрос.Выполнить().Выбрать();

			Если НЕ ТоварнаяНоменклатура.Следующий() Тогда 

				НаименованиеДокумента = НСтр("ru = 'Акт'");

			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
		
	Возврат НаименованиеДокумента;
КонецФункции
	
#КонецОбласти

Функция ТоварыДокумента(СчетФактура)
	
	Если
		ТипЗнч(СчетФактура) <> Тип("ДокументСсылка.СчетФактураВыданный")
		ИЛИ ТипЗнч(СчетФактура.ДокументОснование) <> Тип("ДокументСсылка.РеализацияТоваров")
	Тогда
		
		Если ТипЗнч(СчетФактура.ДокументОснование) <> Тип("ДокументСсылка.РеализацияАвтомобилей") Тогда
			
			Товары = СчетФактура.Товары.Выгрузить(); 
			
			Если ТипЗнч(СчетФактура.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей") Тогда
				
				АвтомобилиСервер.ДополнитьСебестоимостьюАвтомобилей(Товары, СчетФактура.ДокументОснование.Сделка.Дата);
				
			КонецЕсли;
			
			Возврат Товары;
			
		Иначе
			
			Возврат ПолучитьТоварыССебестоимостью(СчетФактура);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураВыданныйТовары.Ссылка КАК Ссылка,
		|	СчетФактураВыданныйТовары.НомерСтроки КАК НомерСтроки,
		|	СчетФактураВыданныйТовары.Номенклатура КАК Номенклатура,
		|	СчетФактураВыданныйТовары.Содержание КАК Содержание,
		|	СчетФактураВыданныйТовары.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйТовары.Номенклатура ССЫЛКА Справочник.Автоработы
		|			ТОГДА СчетФактураВыданный.ДоговорВзаиморасчетов.ЕдиницаИзмеренияАвтоработВПечатныхФормах
		|		ИНАЧЕ СчетФактураВыданныйТовары.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	СчетФактураВыданныйТовары.Коэффициент КАК Коэффициент,
		|	СчетФактураВыданныйТовары.Цена КАК Цена,
		|	СчетФактураВыданныйТовары.Сумма КАК Сумма,
		|	СчетФактураВыданныйТовары.СтавкаНДС КАК СтавкаНДС,
		|	СчетФактураВыданныйТовары.СуммаНДС КАК СуммаНДС,
		|	СчетФактураВыданныйТовары.СуммаВсего КАК СуммаВсего,
		|	СчетФактураВыданныйТовары.ГТД КАК ГТД,
		|	СчетФактураВыданныйТовары.Партия КАК Партия,
		|	СчетФактураВыданныйТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СчетФактураВыданныйТовары.КлючСтроки КАК КлючСтроки
		|ПОМЕСТИТЬ ТоварыСФ
		|ИЗ
		|	Документ.СчетФактураВыданный.Товары КАК СчетФактураВыданныйТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|		ПО СчетФактураВыданныйТовары.Ссылка = СчетФактураВыданный.Ссылка
		|ГДЕ
		|	СчетФактураВыданныйТовары.Ссылка = &СчетФактура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеализацияТоваровТовары.Номенклатура КАК Номенклатура,
		|	РеализацияТоваровТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	РеализацияТоваровТовары.ИдентификаторТовара КАК ИдентификаторТовара,
		|	РеализацияТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	РеализацияТоваровТовары.ГТД КАК ГТД,
		|	РеализацияТоваровТовары.Партия КАК Партия
		|ПОМЕСТИТЬ ТоварыРеализации
		|ИЗ
		|	Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
		|ГДЕ
		|	РеализацияТоваровТовары.Ссылка = &РеализацияТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыСФ.Ссылка КАК Ссылка,
		|	ТоварыСФ.НомерСтроки КАК НомерСтроки,
		|	ТоварыСФ.Номенклатура КАК Номенклатура,
		|	ТоварыСФ.Содержание КАК Содержание,
		|	ТоварыСФ.Количество КАК Количество,
		|	ТоварыСФ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТоварыСФ.Коэффициент КАК Коэффициент,
		|	ТоварыСФ.Цена КАК Цена,
		|	ТоварыСФ.Сумма КАК Сумма,
		|	ТоварыСФ.СтавкаНДС КАК СтавкаНДС,
		|	ТоварыСФ.СуммаНДС КАК СуммаНДС,
		|	ТоварыСФ.СуммаВсего КАК СуммаВсего,
		|	ТоварыСФ.ГТД КАК ГТД,
		|	ТоварыСФ.Партия КАК Партия,
		|	ТоварыСФ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТоварыСФ.КлючСтроки КАК КлючСтроки,
		|	ЕСТЬNULL(ТоварыРеализации.ИдентификаторТовара, """") КАК ИдентификаторТовара
		|ИЗ
		|	ТоварыСФ КАК ТоварыСФ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыРеализации КАК ТоварыРеализации
		|		ПО ТоварыСФ.Номенклатура = ТоварыРеализации.Номенклатура
		|			И ТоварыСФ.ХарактеристикаНоменклатуры = ТоварыРеализации.ХарактеристикаНоменклатуры
		|			И ТоварыСФ.ЕдиницаИзмерения = ТоварыРеализации.ЕдиницаИзмерения
		|			И (ВЫБОР
		|				КОГДА ТоварыРеализации.Партия <> НЕОПРЕДЕЛЕНО
		|					ТОГДА ТоварыСФ.Партия = ТоварыРеализации.Партия
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|			И (ВЫБОР
		|				КОГДА ТоварыРеализации.ГТД <> ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)
		|					ТОГДА ТоварыСФ.ГТД = ТоварыРеализации.ГТД
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
	);
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
	Запрос.УстановитьПараметр("РеализацияТоваров", СчетФактура.ДокументОснование);
	Товары = Запрос.Выполнить().Выгрузить();
	
	Возврат Товары;
	
КонецФункции

Функция ПолучитьТоварыССебестоимостью(СчетФактура) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураВыданныйТовары.Ссылка КАК Ссылка,
		|	СчетФактураВыданныйТовары.НомерСтроки КАК НомерСтроки,
		|	СчетФактураВыданныйТовары.Номенклатура КАК Номенклатура,
		|	СчетФактураВыданныйТовары.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйТовары.Номенклатура ССЫЛКА Справочник.Автоработы
		|			ТОГДА СчетФактураВыданный.ДоговорВзаиморасчетов.ЕдиницаИзмеренияАвтоработВПечатныхФормах
		|		ИНАЧЕ СчетФактураВыданныйТовары.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	СчетФактураВыданныйТовары.Коэффициент КАК Коэффициент,
		|	СчетФактураВыданныйТовары.Цена КАК Цена,
		|	СчетФактураВыданныйТовары.Сумма КАК Сумма,
		|	СчетФактураВыданныйТовары.СтавкаНДС КАК СтавкаНДС,
		|	СчетФактураВыданныйТовары.СуммаНДС КАК СуммаНДС,
		|	СчетФактураВыданныйТовары.СуммаВсего КАК СуммаВсего,
		|	СчетФактураВыданныйТовары.ГТД КАК ГТД,
		|	СчетФактураВыданныйТовары.Партия КАК Партия,
		|	СчетФактураВыданныйТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СчетФактураВыданныйТовары.КлючСтроки КАК КлючСтроки
		|ПОМЕСТИТЬ ТоварыСФ
		|ИЗ
		|	Документ.СчетФактураВыданный.Товары КАК СчетФактураВыданныйТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|		ПО СчетФактураВыданныйТовары.Ссылка = СчетФактураВыданный.Ссылка
		|ГДЕ
		|	СчетФактураВыданныйТовары.Ссылка = &СчетФактура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеализацияАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
		|	РеализацияАвтомобилейАвтомобили.СебестоимостьАвтомобиля КАК Себестоимость
		|ПОМЕСТИТЬ АвтомобилиРеализации
		|ИЗ
		|	Документ.РеализацияАвтомобилей.Автомобили КАК РеализацияАвтомобилейАвтомобили
		|ГДЕ
		|	РеализацияАвтомобилейАвтомобили.Ссылка = &РеализацияАвтомобилей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыСФ.Ссылка КАК Ссылка,
		|	ТоварыСФ.НомерСтроки КАК НомерСтроки,
		|	ТоварыСФ.Номенклатура КАК Номенклатура,
		|	ТоварыСФ.Количество КАК Количество,
		|	ТоварыСФ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТоварыСФ.Коэффициент КАК Коэффициент,
		|	ТоварыСФ.Цена КАК Цена,
		|	ТоварыСФ.Сумма КАК Сумма,
		|	ТоварыСФ.СтавкаНДС КАК СтавкаНДС,
		|	ТоварыСФ.СуммаНДС КАК СуммаНДС,
		|	ТоварыСФ.СуммаВсего КАК СуммаВсего,
		|	ТоварыСФ.ГТД КАК ГТД,
		|	ТоварыСФ.Партия КАК Партия,
		|	ТоварыСФ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТоварыСФ.КлючСтроки КАК КлючСтроки,
		|	ЕСТЬNULL(АвтомобилиРеализации.Себестоимость, 0) КАК Себестоимость
		|ИЗ
		|	ТоварыСФ КАК ТоварыСФ
		|		ЛЕВОЕ СОЕДИНЕНИЕ АвтомобилиРеализации КАК АвтомобилиРеализации
		|		ПО ТоварыСФ.Номенклатура = АвтомобилиРеализации.Номенклатура
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
	);
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
	Запрос.УстановитьПараметр("РеализацияАвтомобилей", СчетФактура.ДокументОснование);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	АвтомобилиСервер.ДополнитьСебестоимостьюАвтомобилей(Товары, СчетФактура.ДокументОснование.Дата);
	
	Возврат Товары;
КонецФункции

Функция ПолучитьПлатежноРасчетныеДокументы(ПлатежноРасчетныеДокументы)
	
	МассивДокументов = Новый Массив;
	ШаблонСтроки = НСтр("ru = '%1 от %2'");
	
	СокращенныйНомер = НЕ Константы.ПолныйНомерДокументаВПечатныхФормах.Получить();
	
	Для Каждого Строка Из ПлатежноРасчетныеДокументы Цикл
		
		Номер = СокрЛП(Строка.Номер);

		Если СокращенныйНомер Тогда
		    ПреффиксДокумента = "";
			Номер = СтрЗаменить(Номер, Символы.НПП, " ");
			
			Если  СтрНайти(Номер, "Платежное поручение")> 0 Тогда 
				Пробел= СтрНайти (Номер, " ",,,2);
			Иначе
				Пробел =  СтрНайти(Номер, " ");
			КонецЕсли;

			
			Если Пробел > 0 Тогда
				ПреффиксДокумента = Лев(Номер, Пробел);
				Номер = ПреффиксДокумента + ПрефиксацияОбъектов.ПолучитьНомерНаПечать(Прав(Номер, Пробел),Истина,Истина,Истина);
			Иначе
				Номер = ПрефиксацияОбъектов.ПолучитьНомерНаПечать(Номер,Истина,Истина,Истина);
			КонецЕсли;
		 КонецЕсли;

		МассивДокументов.Добавить(СтрШаблон(ШаблонСтроки, Номер, Формат(Строка.Дата, "ДЛФ=D")));
		
	КонецЦикла;
	
	Возврат СтрСоединить(МассивДокументов, "; ");;
			
КонецФункции

#КонецОбласти

#КонецЕсли