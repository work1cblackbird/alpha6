// Модуль документа "Счет фактура выданный"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Отказ Или Справочники
		.ДоговорыВзаиморасчетов
		.НеКорректноЗаполненИдентификаторГосКонтракта(ЭтотОбъект, ИдентификаторГосударственногоКонтракта);
		
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;

	ПроведениеСФБезПроведенияОснования = УчетныеПолитикиСервер.Значение(
		"ПроведениеСФБезПроведенияОснования", ,ПодразделениеКомпании);
	
	Если НЕ ПроведениеСФБезПроведенияОснования И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда 
		Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда 
			Отказ = Истина;
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд") И ДокументОснование.Проведен Тогда
			Если НЕ ДокументОснование.Состояние = Справочники.ВидыСостоянийЗаказНарядов.Закрыт Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Для проведения документа заказ-наряд должен быть закрыт.'" ));
				Отказ = Истина;
			ИначеЕсли НЕ ДокументОснование.Проведен Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Проведение документа невозможно. Проведите документ-основание.'" ));
				Отказ = Истина;
			КонецЕсли;
		ИначеЕсли НЕ ДокументОснование.Проведен Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Проведение документа невозможно. Проведите документ-основание.'" ));
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации")
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей") Тогда
		ХозОперация = Справочники.ХозОперации.СчетФактураВыданныйКорректировка;
	Иначе
		ХозОперация = Справочники.ХозОперации.СчетФактураВыданный;
	КонецЕсли;
	
	СуммаНДСДокумента = Товары.Итог("СуммаНДС");
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	Если НЕ ВводСчетФактурыВозможен(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	// сдвиг даты при перезаполнении
	Если ЗначениеЗаполнено(Ссылка)
		И Дата < ДанныеЗаполнения.Дата Тогда
		Дата = ДанныеЗаполнения.Дата + 1;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"ВхДокНомер,ВхДокДатаВрем"
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	// заполним авансовые платежи
	Документы.СчетФактураВыданный.ЗаполнитьАвансовыеПлатежи(ЭтотОбъект, ДанныеЗаполнения);

	ЗаполненНаОснованииДокумента = ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства,
		"ВыполненоЗаполнениеНаОсновании", "");
	Если ЗначениеЗаполнено(ДанныеЗаполнения)
		И НЕ (ЗаполненНаОснованииДокумента = "РеализацияТоваров"
			ИЛИ ЗаполненНаОснованииДокумента = "КорректировкаРеализации"
			ИЛИ ЗаполненНаОснованииДокумента = "ЗаказНаряд"
			ИЛИ ЗаполненНаОснованииДокумента = "АктРазногласий"
			ИЛИ ЗаполненНаОснованииДокумента = "ОтчетКомиссионера"
			ИЛИ ЗаполненНаОснованииДокумента = "ВозвратПоставщику"
			ИЛИ ЗаполненНаОснованииДокумента = "ВозвратПоставщикуАвтомобилей"
			ИЛИ ЗаполненНаОснованииДокумента = "ОтчетКомиссионераЗаАвтомобили"
			ИЛИ ЗаполненНаОснованииДокумента = "РеализацияАвтомобилей"
			ИЛИ ЗаполненНаОснованииДокумента = "РеализацияАктивов"
			ИЛИ ЗаполненНаОснованииДокумента = "ЗакрытиеСмены") Тогда
		
		ПараметрыЗаполнения = НовыеПараметрыЗаполнения();
		ПараметрыЗаполнения.ЗаполнятьТоварами = Истина;
		ПараметрыЗаполнения.ЗаполнятьПоГТД = Истина;
		ПараметрыЗаполнения.ЗаполнятьПоПартиям = Истина;
		ОбработкаТабличнойЧастиТовары.ПерезаполнитьСУчетомГТДПартий(ЭтотОбъект, Товары, ПараметрыЗаполнения);
	
	КонецЕсли;
	
	// Проверим, а есть ли НДС в табличной части, отличный от БезНДС
	Если НЕ ПраваИНастройкиПользователя.Значение("СоздаватьСчетФактуруБезНДС", ДанныеЗаполнения) Тогда
		
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДанныеЗаполнения)) Тогда
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДанныеЗаполнения);
			Если Не Менеджер = Неопределено Тогда
				Если Не Менеджер.ВозможенВводСчетФактурыВыданной(ДанныеЗаполнения) Тогда
					ТекстСообщения = НСтр("ru = 'Для данного документа счет-фактура не применяется.'");
					УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Грузополучатель) Тогда
		
		Грузополучатель = Контрагент; 
		
	КонецЕсли;
		
	ИдентификаторГосударственногоКонтракта = ?(
		ЗначениеЗаполнено(ИдентификаторГосударственногоКонтракта),
		ИдентификаторГосударственногоКонтракта,
		ДоговорВзаиморасчетов.ИдентификаторГосударственногоКонтракта
	);
	
	ЗаполнитьИсходныеНомераСтрок();
	
	ОснованиеКорректировка = ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкаРеализации");
	
	Если Не (ОснованиеКорректировка И ДоступнаПечатьУКД) Тогда
		ДоступнаПечатьУПД 	= ХозОперация = Справочники.ХозОперации.СчетФактураВыданный Или
								ХозОперация = Справочники.ХозОперации.СчетФактураВыданныйКорректировка
								И Исправление И ПустаяСтрока(НомерИсправляемогоКорректировочногоДокумента);
								
		Если Не ДоступнаПечатьСчетФактура Тогда	
			ДоступнаПечатьСчетФактура = ДоступнаПечатьУПД;
		КонецЕсли;
		
		ДоступнаПечатьУКД 	= ХозОперация = Справочники.ХозОперации.СчетФактураВыданныйКорректировка
								И Не Исправление
								Или ХозОперация = Справочники.ХозОперации.СчетФактураВыданныйКорректировка
								И Исправление И ЗначениеЗаполнено(НомерИсправляемогоКорректировочногоДокумента);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Корректировка реализации"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_КорректировкаРеализации(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производится проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Документы.СчетФактураВыданный.ЗаполнитьНомера(ЭтотОбъект, ДанныеЗаполнения);
	
	ХозОперация = Справочники.ХозОперации.СчетФактураВыданныйКорректировка;
	
	ПараметрыЗаполнения = НовыеПараметрыЗаполнения();
	ПараметрыЗаполнения.ЗаполнятьТоварами = Истина;
	ПараметрыЗаполнения.ЗаполнятьРаботами = Истина;
	ПараметрыЗаполнения.ЗаполнятьПоГТД = Истина;
	ПараметрыЗаполнения.ЗаполнятьПоПартиям = Истина;
	
	Товары.Очистить();
	
	// запрос по документу
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КорректировкаРеализацииТовары.Номенклатура КАК Номенклатура,
	|	КорректировкаРеализацииТовары.Содержание КАК Содержание,
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	КорректировкаРеализацииТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(КорректировкаРеализацииТовары.Количество * КорректировкаРеализацииТовары.Коэффициент) КАК Количество,
	|	СУММА(КорректировкаРеализацииТовары.Количество * КорректировкаРеализацииТовары.Коэффициент) КАК КоличествоОсталось,
	|	СУММА(КорректировкаРеализацииТовары.СуммаВсего) КАК Сумма,
	|	СУММА(КорректировкаРеализацииТовары.СуммаВсего) КАК СуммаОсталось,
	|	СУММА(КорректировкаРеализацииТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(КорректировкаРеализацииТовары.СуммаНДС) КАК СуммаНДСОсталось,
	|	КорректировкаРеализацииТовары.ГТД КАК ГТД,
	|	КорректировкаРеализацииТовары.Партия КАК Партия,
	|	МИНИМУМ(КорректировкаРеализацииТовары.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Основание
	|	И КорректировкаРеализацииТовары.Подтверждение = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	КорректировкаРеализацииТовары.Содержание,
	|	КорректировкаРеализацииТовары.ГТД,
	|	КорректировкаРеализацииТовары.Партия
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения.Ссылка);
	ПараметрыЗаполнения.РезультатЗапросаПоТоварам = Запрос.Выполнить().Выгрузить();
	
	// Запрос по ГТД
	// Составим список документов движений
	СписокОснований = Документы.КорректировкаРеализации.ОснованияЦепочкиКорректировкиРеализации(ДанныеЗаполнения.Ссылка);
	СписокОснований.Добавить(ДанныеЗаполнения.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГТДПартийТоваровКомпании.Номенклатура,
	|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры,
	|	ГТДПартийТоваровКомпании.ГТД,
	|	ГТДПартийТоваровКомпании.Партия,
	|	СУММА(ГТДПартийТоваровКомпании.Количество) КАК Количество,
	|	СУММА(ГТДПартийТоваровКомпании.Количество) КАК КоличествоОсталось
	|ИЗ
	|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
	|ГДЕ
	|	ГТДПартийТоваровКомпании.Регистратор В (&СписокОснований)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры,
	|	ГТДПартийТоваровКомпании.ГТД,
	|	ГТДПартийТоваровКомпании.Номенклатура,
	|	ГТДПартийТоваровКомпании.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыВПроизводстве.Номенклатура,
	|	ТоварыВПроизводстве.ХарактеристикаНоменклатуры,
	|	ТоварыВПроизводстве.ГТД,
	|	ТоварыВПроизводстве.Партия,
	|	СУММА(ТоварыВПроизводстве.Количество) КАК Количество,
	|	СУММА(ТоварыВПроизводстве.Количество) КАК КоличествоОсталось
	|ИЗ
	|	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
	|ГДЕ
	|	ТоварыВПроизводстве.Регистратор В (&СписокОснований)
	|	И ТоварыВПроизводстве.ГТД <> ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыВПроизводстве.ХарактеристикаНоменклатуры,
	|	ТоварыВПроизводстве.Номенклатура,
	|	ТоварыВПроизводстве.Партия,
	|	ТоварыВПроизводстве.ГТД";
	Запрос.УстановитьПараметр("СписокОснований", СписокОснований);
	ПараметрыЗаполнения.РезультатЗапросаПоГТД = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказНарядРаботы.Авторабота КАК Номенклатура,
	|	ЗаказНарядРаботы.Нормочас КАК ЕдиницаИзмерения,
	|	ЗаказНарядРаботы.Коэффициент,
	|	ЗаказНарядРаботы.Количество,
	|	ЗаказНарядРаботы.Цена,
	|	ЗаказНарядРаботы.СтавкаНДС,
	|	ЗаказНарядРаботы.СуммаНДС,
	|	ЗаказНарядРаботы.СуммаВсего,
	|	ЗаказНарядРаботы.Сумма
	|ИЗ
	|	Документ.КорректировкаРеализации.Автоработы КАК ЗаказНарядРаботы
	|ГДЕ
	|	ЗаказНарядРаботы.Подтверждение = ИСТИНА И
	|	ЗаказНарядРаботы.Количество <> 0 И
	|	ЗаказНарядРаботы.Коэффициент <> 0 И
	|	ЗаказНарядРаботы.Ссылка = &Основание";
	ПараметрыЗаполнения.РезультатЗапросаПоРаботам = Запрос.Выполнить().Выгрузить();
	
	ОбработкаТабличнойЧастиТовары.ПерезаполнитьСУчетомГТДПартий(ЭтотОбъект, Товары, ПараметрыЗаполнения);
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_КорректировкаРеализации()

// Производит заполнение объекта на основании документа "Реализация товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РеализацияТоваров(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект,
		ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыЗаполнения = НовыеПараметрыЗаполнения();
	ПараметрыЗаполнения.ЗаполнятьТоварами = Истина;
	ПараметрыЗаполнения.ЗаполнятьПоГТД = Истина;
	ПараметрыЗаполнения.ЗаполнятьПоПартиям = Истина;
	
	// почистим ТЧ
	Товары.Очистить();
	// Запрос по документу
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	РеализацияТоваровТовары.СтавкаНДС КАК СтавкаНДС,
	|	РеализацияТоваровТовары.ГТД КАК ГТД,
	|	СУММА(РеализацияТоваровТовары.КоличествоБазовое) КАК Количество,
	|	СУММА(РеализацияТоваровТовары.КоличествоБазовое) КАК КоличествоОсталось,
	|	СУММА(РеализацияТоваровТовары.СуммаВсего) КАК Сумма,
	|	СУММА(РеализацияТоваровТовары.СуммаВсего) КАК СуммаОсталось,
	|	СУММА(РеализацияТоваровТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(РеализацияТоваровТовары.СуммаНДС) КАК СуммаНДСОсталось,
	|	РеализацияТоваровТовары.Партия КАК Партия,
	|	РеализацияТоваровТовары.Содержание КАК Содержание,
	|	МИНИМУМ(РеализацияТоваровТовары.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
	|ГДЕ
	|	РеализацияТоваровТовары.Ссылка = &Основание
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровТовары.СтавкаНДС,
	|	РеализацияТоваровТовары.ХарактеристикаНоменклатуры,
	|	РеализацияТоваровТовары.ГТД,
	|	РеализацияТоваровТовары.Номенклатура,
	|	РеализацияТоваровТовары.Содержание,
	|	РеализацияТоваровТовары.Партия
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения.Ссылка);
	ПараметрыЗаполнения.РезультатЗапросаПоТоварам = Запрос.Выполнить().Выгрузить();
	
	// запрос по ГТД
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГТДПартийТоваровКомпании.Номенклатура,
	|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры,
	|	ГТДПартийТоваровКомпании.ГТД,
	|	СУММА(ГТДПартийТоваровКомпании.Количество) КАК Количество,
	|	СУММА(ГТДПартийТоваровКомпании.Количество) КАК КоличествоОсталось,
	|	ГТДПартийТоваровКомпании.Партия
	|ИЗ
	|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
	|ГДЕ
	|	ГТДПартийТоваровКомпании.Регистратор = &Основание
	|
	|СГРУППИРОВАТЬ ПО
	|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры,
	|	ГТДПартийТоваровКомпании.ГТД,
	|	ГТДПартийТоваровКомпании.Номенклатура,
	|	ГТДПартийТоваровКомпании.Партия";
	ПараметрыЗаполнения.РезультатЗапросаПоГТД = Запрос.Выполнить().Выгрузить();
	
	ОбработкаТабличнойЧастиТовары.ПерезаполнитьСУчетомГТДПартий(ЭтотОбъект, Товары, ПараметрыЗаполнения);
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РеализацияТоваров()

// Производит заполнение объекта на основании документа "Реализация активов".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РеализацияАктивов(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения.
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект,
		ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Почистим ТЧ.
	Товары.Очистить();
	
	Запрос = Новый Запрос;
	// Получим данные по автомобилям, соответствующие активам ТЧ.
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
           |	РеализацияАктивовАктивы.НомерСтроки КАК НомерСтроки,
           |	РеализацияАктивовАктивы.ПрочийАктив КАК ПрочийАктив,
           |	РеализацияАктивовАктивы.Количество КАК Количество,
           |	РеализацияАктивовАктивы.Сумма КАК Сумма,
           |	РеализацияАктивовАктивы.СтавкаНДС КАК СтавкаНДС,
           |	РеализацияАктивовАктивы.СуммаНДС КАК СуммаНДС
           |ПОМЕСТИТЬ РеализацияАктивовАктивы
           |ИЗ
           |	Документ.РеализацияАктивов.Активы КАК РеализацияАктивовАктивы
           |ГДЕ
           |	РеализацияАктивовАктивы.Ссылка = &Ссылка
           |
           |ИНДЕКСИРОВАТЬ ПО
           |	ПрочийАктив
           |;
           |
           |////////////////////////////////////////////////////////////////////////////////
           |ВЫБРАТЬ РАЗРЕШЕННЫЕ
           |	РеализацияАктивовАктивы.НомерСтроки КАК НомерСтроки,
           |	ВводВЭксплуатациюАвтомобилейАвтомобили.Автомобиль КАК Автомобиль,
           |	РеализацияАктивовАктивы.ПрочийАктив КАК ПрочийАктив,
           |	РеализацияАктивовАктивы.СтавкаНДС КАК СтавкаНДС,
           |	РеализацияАктивовАктивы.Сумма КАК Сумма,
           |	РеализацияАктивовАктивы.СуммаНДС КАК СуммаНДС,
           |	РеализацияАктивовАктивы.Количество КАК Количество
           |ИЗ
           |	РеализацияАктивовАктивы КАК РеализацияАктивовАктивы
           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводВЭксплуатациюАвтомобилей.Автомобили КАК ВводВЭксплуатациюАвтомобилейАвтомобили
           |		ПО РеализацияАктивовАктивы.ПрочийАктив = ВводВЭксплуатациюАвтомобилейАвтомобили.Актив
           |
           |УПОРЯДОЧИТЬ ПО
           |	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения.Ссылка);

	ТЗ = Запрос.Выполнить().Выгрузить();

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВводВЭксплуатациюТовары.Номенклатура КАК Номенклатура,
	|	ВводВЭксплуатациюТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВводВЭксплуатациюТовары.Актив КАК Актив
	|ИЗ
	|	Документ.ВводВЭксплуатацию.Товары КАК ВводВЭксплуатациюТовары
	|ГДЕ
	|	ВводВЭксплуатациюТовары.Актив В(&Актив)";
	
	Запрос.УстановитьПараметр("Актив", ДанныеЗаполнения.Активы.ВыгрузитьКолонку("ПрочийАктив"));
	
	ХарактеристикиНоменклатур = Запрос.Выполнить().Выгрузить();

	Для Каждого ТекСтрока Из ДанныеЗаполнения.Активы Цикл
		НоваяСтрока = Товары.Добавить();
		
		Если ТекСтрока.ПрочийАктив.ТипНоменклатуры = Справочники.ТипыНоменклатуры.Автомобили Тогда
			НайденнаяСтрока = ТЗ.Найти(ТекСтрока.НомерСтроки, "НомерСтроки");
			НоваяСтрока.Номенклатура = НайденнаяСтрока.Автомобиль;
			
			НоваяСтрока.Количество = 1;
			НоваяСтрока.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
		Иначе
			НоваяСтрока.Номенклатура = ТекСтрока.ПрочийАктив.Номенклатура;
			
			НоваяСтрока.Количество = ТекСтрока.Количество;
			Если НоваяСтрока.Количество = 0 Тогда
				НоваяСтрока.Количество = 1;
			КонецЕсли;
			
			// В реализации активов нет единицы измерения.
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ОсновнаяЕдиницаИзмерения;
			Если НоваяСтрока.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент <> 1 Тогда
				НоваяСтрока.Количество = НоваяСтрока.Количество / НоваяСтрока.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент;
			КонецЕсли;
			
			ПараметрыОтбора = Новый Структура("Номенклатура, Актив");
			ПараметрыОтбора.Актив = ТекСтрока.ПрочийАктив;
			ПараметрыОтбора.Номенклатура = ТекСтрока.ПрочийАктив.Номенклатура;
			Результат = ХарактеристикиНоменклатур.НайтиСтроки(ПараметрыОтбора);
			
			Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияАктивов")
				И Результат.Количество() > 0 Тогда
				НоваяСтрока.ХарактеристикаНоменклатуры = Результат[0].ХарактеристикаНоменклатуры;
			Иначе
				// В движениях документа-основания нет заполенения характеристик.
				Если НоваяСтрока.Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 1 Тогда 
					// Характеристики подчинены данному типу номенклатуры.
					НоваяСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				ИначеЕсли НоваяСтрока.Номенклатура.ТипНоменклатуры.ИспользованиеХарактеристик = 2 Тогда
					// Характеристики подчинены номенклатурным позициям.
					НоваяСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока.Коэффициент = 1;
		НоваяСтрока.СтавкаНДС = ТекСтрока.СтавкаНДС; 
		НоваяСтрока.СуммаНДС = ТекСтрока.СуммаНДС;
		НоваяСтрока.СуммаВсего = ТекСтрока.Сумма;  
		
		Если ТипЦен.ЦенаВключаетНДС Тогда
			НоваяСтрока.Сумма = НоваяСтрока.СуммаВсего;
		Иначе
			НоваяСтрока.Сумма = НоваяСтрока.СуммаВсего - НоваяСтрока.СуммаНДС;                              
		КонецЕсли;
		
		НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2);
		
	КонецЦикла;
		
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РеализацияАктивов()

// Производит заполнение объекта на основании документа "Отчет комиссионера"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ОтчетКомиссионера(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект,
		ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыЗаполнения = НовыеПараметрыЗаполнения();
	ПараметрыЗаполнения.ЗаполнятьТоварами = Истина;
	ПараметрыЗаполнения.ЗаполнятьПоГТД = Истина;
	
	Товары.Очистить();
	// Запрос по документу
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтчетКомиссионераТовары.Номенклатура КАК Номенклатура,
	|	ОтчетКомиссионераТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ОтчетКомиссионераТовары.ГТД КАК ГТД,
	|	ОтчетКомиссионераТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ОтчетКомиссионераТовары.Количество * ОтчетКомиссионераТовары.Коэффициент) КАК Количество,
	|	СУММА(ОтчетКомиссионераТовары.Количество * ОтчетКомиссионераТовары.Коэффициент) КАК КоличествоОсталось,
	|	СУММА(ОтчетКомиссионераТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ОтчетКомиссионераТовары.СуммаНДС) КАК СуммаНДСОсталось,
	|	СУММА(ОтчетКомиссионераТовары.СуммаВсего) КАК Сумма,
	|	СУММА(ОтчетКомиссионераТовары.СуммаВсего) КАК СуммаОсталось,
	|	МИНИМУМ(ОтчетКомиссионераТовары.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.ОтчетКомиссионера.Товары КАК ОтчетКомиссионераТовары
	|ГДЕ
	|	ОтчетКомиссионераТовары.Ссылка = &Основание
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетКомиссионераТовары.Номенклатура,
	|	ОтчетКомиссионераТовары.ХарактеристикаНоменклатуры,
	|	ОтчетКомиссионераТовары.ГТД,
	|	ОтчетКомиссионераТовары.СтавкаНДС
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
	ПараметрыЗаполнения.РезультатЗапросаПоТоварам = Запрос.Выполнить().Выгрузить();
	
	// Запрос по ГТД
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартииТоваровОтданные.Номенклатура,
	|	ПартииТоваровОтданные.ХарактеристикаНоменклатуры,
	|	ПартииТоваровОтданные.ГТД,
	|	ПартииТоваровОтданные.Партия,
	|	СУММА(ПартииТоваровОтданные.Количество) КАК Количество,
	|	СУММА(ПартииТоваровОтданные.Количество) КАК КоличествоОсталось
	|ИЗ
	|	РегистрНакопления.ПартииТоваровОтданные КАК ПартииТоваровОтданные
	|ГДЕ
	|	ПартииТоваровОтданные.Регистратор = &Основание
	|	И ПартииТоваровОтданные.ГТД <> ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровОтданные.Номенклатура,
	|	ПартииТоваровОтданные.ХарактеристикаНоменклатуры,
	|	ПартииТоваровОтданные.Партия,
	|	ПартииТоваровОтданные.ГТД";
	ПараметрыЗаполнения.РезультатЗапросаПоГТД = Запрос.Выполнить().Выгрузить();
	
	ОбработкаТабличнойЧастиТовары.ПерезаполнитьСУчетомГТДПартий(ЭтотОбъект, Товары, ПараметрыЗаполнения);
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ОтчетКомиссионера()

// Производит заполнение объекта на основании документа "Возврат поставщику"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВозвратПоставщику(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,
		ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыЗаполнения = НовыеПараметрыЗаполнения();
	ПараметрыЗаполнения.ЗаполнятьТоварами = Истина;
	ПараметрыЗаполнения.ЗаполнятьПоГТД = Истина;
	ПараметрыЗаполнения.ЗаполнятьПоПартиям = Истина;
	
	Товары.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ВозвратПоставщикуТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВозвратПоставщикуТовары.Партия КАК Партия,
	|	ВозвратПоставщикуТовары.ГТД КАК ГТД,
	|	СУММА(ВозвратПоставщикуТовары.Коэффициент * ВозвратПоставщикуТовары.Количество) КАК Количество,
	|	СУММА(ВозвратПоставщикуТовары.Коэффициент * ВозвратПоставщикуТовары.Количество) КАК КоличествоОсталось,
	|	СУММА(ВозвратПоставщикуТовары.СуммаВсего) КАК Сумма,
	|	СУММА(ВозвратПоставщикуТовары.СуммаВсего) КАК СуммаОсталось,
	|	СУММА(ВозвратПоставщикуТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ВозвратПоставщикуТовары.СуммаНДС) КАК СуммаНДСОсталось,
	|	ВозвратПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
	|	МИНИМУМ(ВозвратПоставщикуТовары.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.ВозвратПоставщику.Товары КАК ВозвратПоставщикуТовары
	|ГДЕ
	|	ВозвратПоставщикуТовары.Ссылка = &Основание
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратПоставщикуТовары.ГТД,
	|	ВозвратПоставщикуТовары.Партия,
	|	ВозвратПоставщикуТовары.ХарактеристикаНоменклатуры,
	|	ВозвратПоставщикуТовары.СтавкаНДС,
	|	ВозвратПоставщикуТовары.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
	ПараметрыЗаполнения.РезультатЗапросаПоТоварам = Запрос.Выполнить().Выгрузить();
	
	// Запрос по ГТД
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГТДПартийТоваровКомпании.Номенклатура,
	|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры,
	|	ГТДПартийТоваровКомпании.ГТД,
	|	СУММА(-ГТДПартийТоваровКомпании.Количество) КАК Количество,
	|	СУММА(-ГТДПартийТоваровКомпании.Количество) КАК КоличествоОсталось,
	|	ГТДПартийТоваровКомпании.Партия
	|ИЗ
	|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
	|ГДЕ
	|	ГТДПартийТоваровКомпании.Регистратор = &Основание
	|
	|СГРУППИРОВАТЬ ПО
	|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры,
	|	ГТДПартийТоваровКомпании.ГТД,
	|	ГТДПартийТоваровКомпании.Номенклатура,
	|	ГТДПартийТоваровКомпании.Партия";
	ПараметрыЗаполнения.РезультатЗапросаПоГТД = Запрос.Выполнить().Выгрузить();
	
	ОбработкаТабличнойЧастиТовары.ПерезаполнитьСУчетомГТДПартий(ЭтотОбъект, Товары, ПараметрыЗаполнения);
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ВозвратПоставщику()

// Производит заполнение объекта на основании документа "Закрытие смены"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗакрытиеСмены(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыЗаполнения = НовыеПараметрыЗаполнения();
	ПараметрыЗаполнения.ЗаполнятьТоварами = Истина;
	
	// Очистим ТЧ
	Товары.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
	
	// Запрос по товарам
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗакрытиеСменыТовары.Номенклатура КАК Номенклатура,
	|	ЗакрытиеСменыТовары.Содержание КАК Содержание,
	|	ЗакрытиеСменыТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗакрытиеСменыТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ЗакрытиеСменыТовары.Количество * ЗакрытиеСменыТовары.Коэффициент) КАК Количество,
	|	СУММА(ЗакрытиеСменыТовары.Количество * ЗакрытиеСменыТовары.Коэффициент) КАК КоличествоОсталось,
	|	СУММА(ЗакрытиеСменыТовары.СуммаВсего) КАК Сумма,
	|	СУММА(ЗакрытиеСменыТовары.СуммаВсего) КАК СуммаОсталось,
	|	СУММА(ЗакрытиеСменыТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ЗакрытиеСменыТовары.СуммаНДС) КАК СуммаНДСОсталось,
	|	МИНИМУМ(ЗакрытиеСменыТовары.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.ЗакрытиеСмены.Товары КАК ЗакрытиеСменыТовары
	|ГДЕ
	|	ЗакрытиеСменыТовары.Ссылка = &Основание
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗакрытиеСменыТовары.СтавкаНДС,
	|	ЗакрытиеСменыТовары.ХарактеристикаНоменклатуры,
	|	ЗакрытиеСменыТовары.Номенклатура,
	|	ЗакрытиеСменыТовары.Содержание
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	ПараметрыЗаполнения.РезультатЗапросаПоТоварам = Запрос.Выполнить().Выгрузить();
	
	// Запрос по ГТД
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГТДПартийТоваровКомпании.Номенклатура,
	|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры,
	|	ГТДПартийТоваровКомпании.ГТД,
	|	СУММА(ГТДПартийТоваровКомпании.Количество) КАК Количество,
	|	СУММА(ГТДПартийТоваровКомпании.Количество) КАК КоличествоОсталось,
	|	ГТДПартийТоваровКомпании.Партия
	|ИЗ
	|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
	|ГДЕ
	|	ГТДПартийТоваровКомпании.Регистратор = &Основание
	|
	|СГРУППИРОВАТЬ ПО
	|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры,
	|	ГТДПартийТоваровКомпании.ГТД,
	|	ГТДПартийТоваровКомпании.Номенклатура,
	|	ГТДПартийТоваровКомпании.Партия";
	
	ПараметрыЗаполнения.РезультатЗапросаПоГТД = Запрос.Выполнить().Выгрузить();
	
	ОбработкаТабличнойЧастиТовары.ПерезаполнитьСУчетомГТДПартий(ЭтотОбъект, Товары, ПараметрыЗаполнения);
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗакрытиеСмены()

// Производит заполнение объекта на основании документа "Отчет комитенту за автомобили".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ОтчетКомитентуЗаАвтомобили(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Возвращаем заполнение по отчету комитенту
	Возврат ОбработкаЗаполнения_ОтчетКомитенту(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_ОтчетКомитентуЗаАвтомобили()

// Производит заполнение объекта на основании документа "Заказ наряд".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаряд(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,
		ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаряд")
		И Не ЗначениеЗаполнено(ДанныеЗаполнения.Грузополучатель) Тогда
		Грузополучатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "СводныйРемонтныйЗаказ.Заказчик", Истина);
	КонецЕсли;
	
	Товары.Очистить();
	ИмяДок = ?(ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаряд"), "ЗаказНаряд", "АктРазногласий");
	
	ПараметрыЗаполнения = НовыеПараметрыЗаполнения();
	ПараметрыЗаполнения.ЗаполнятьТоварами = Истина;
	ПараметрыЗаполнения.ЗаполнятьРаботами = Истина;
	
	Запрос = Новый Запрос(СтрШаблон(
	"ВЫБРАТЬ
	|	ЗаказНарядТовары.Номенклатура,
	|	ЗаказНарядТовары.ХарактеристикаНоменклатуры,
	|	ЗаказНарядТовары.Количество * ЗаказНарядТовары.Коэффициент КАК Количество,
	|	ЗаказНарядТовары.Количество * ЗаказНарядТовары.Коэффициент КАК КоличествоОсталось,
	|	ЗаказНарядТовары.СуммаВсего КАК СуммаОсталось,
	|	ЗаказНарядТовары.СуммаВсего КАК Сумма,
	|	ЗаказНарядТовары.СуммаНДС   КАК СуммаНДС,
	|	ЗаказНарядТовары.СуммаНДС   КАК СуммаНДСОсталось,
	|	ЗаказНарядТовары.СтавкаНДС  КАК СтавкаНДС,
	|	ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка) КАК ГТД,
	|	ЗНАЧЕНИЕ(Документ.ПоступлениеТоваров.ПустаяССылка) КАК Партия,
	|	ЗаказНарядТовары.НомерСтроки  КАК НомерСтроки
	|ИЗ
	|	Документ.%1.Товары КАК ЗаказНарядТовары
	|ГДЕ
	|	ЗаказНарядТовары.Ссылка = &Основание
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки", ИмяДок)); 

	Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
	ПараметрыЗаполнения.РезультатЗапросаПоТоварам = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = СтрШаблон(
	"ВЫБРАТЬ
	|	ЗаказНарядРаботы.Авторабота КАК Номенклатура,
	|	ЗаказНарядРаботы.Нормочас КАК ЕдиницаИзмерения,
	|	ЗаказНарядРаботы.Коэффициент,
	|	ЗаказНарядРаботы.Количество,
	|	ЗаказНарядРаботы.Цена,
	|	ЗаказНарядРаботы.СтавкаНДС,
	|	ЗаказНарядРаботы.СуммаНДС,
	|	ЗаказНарядРаботы.СуммаВсего,
	|	ЗаказНарядРаботы.Сумма,
	|	ЗаказНарядРаботы.НомерСтроки  КАК НомерСтроки
	|ИЗ
	|	Документ.%1.Автоработы КАК ЗаказНарядРаботы
	|ГДЕ
	|	%2
	|	ЗаказНарядРаботы.Ссылка = &Основание
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки", ИмяДок, ?( ИмяДок = "АктРазногласий", "ЗаказНарядРаботы.Подтверждение = ИСТИНА И ", ""));
	ПараметрыЗаполнения.РезультатЗапросаПоРаботам = Запрос.Выполнить().Выгрузить();
	
	Если ИмяДок = "АктРазногласий" Тогда
		Запрос.УстановитьПараметр("Основание",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ДокументОснование"));
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыВПроизводстве.Номенклатура,
	|	ТоварыВПроизводстве.ХарактеристикаНоменклатуры,
	|	ТоварыВПроизводстве.ГТД,
	|	ТоварыВПроизводстве.Партия,
	|	СУММА(ТоварыВПроизводстве.Количество) КАК Количество,
	|	СУММА(ТоварыВПроизводстве.Количество) КАК КоличествоОсталось
	|ИЗ
	|	РегистрНакопления.ТоварыВПроизводстве КАК ТоварыВПроизводстве
	|ГДЕ
	|	ТоварыВПроизводстве.Регистратор = &Основание
	|	И ТоварыВПроизводстве.ГТД <> ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыВПроизводстве.ХарактеристикаНоменклатуры,
	|	ТоварыВПроизводстве.Номенклатура,
	|	ТоварыВПроизводстве.ГТД,
	|	ТоварыВПроизводстве.Партия";
	ПараметрыЗаполнения.РезультатЗапросаПоГТД = Запрос.Выполнить().Выгрузить();
	
	ОбработкаТабличнойЧастиТовары.ПерезаполнитьСУчетомГТДПартий(ЭтотОбъект, Товары, ПараметрыЗаполнения);
	
	Для Каждого Строка Из Товары Цикл
		Строка.КлючСтроки = Новый УникальныйИдентификатор;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаряд()

// Производит заполнение объекта на основании документа "Акт разногласий"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_АктРазногласий(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Возвращаем заполнение по заказ-наряду
	Возврат ОбработкаЗаполнения_ЗаказНаряд(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_АктРазногласий()

// Производит заполнение объекта на основании документа "Возврат поставщику автомобилей".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ВозвратПоставщикуАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект,
		ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыЗаполнения = НовыеПараметрыЗаполнения();
	ПараметрыЗаполнения.ЗаполнятьТоварами = Истина;
	ПараметрыЗаполнения.ЗаполнятьАвтомобилями = Истина;
	
	Товары.Очистить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратПоставщикуАвтомобилейТовары.Номенклатура КАК Номенклатура,
	|	ВозвратПоставщикуАвтомобилейТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВозвратПоставщикуАвтомобилейТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ВозвратПоставщикуАвтомобилейТовары.Количество * ВозвратПоставщикуАвтомобилейТовары.Коэффициент) КАК Количество,
	|	СУММА(ВозвратПоставщикуАвтомобилейТовары.Количество * ВозвратПоставщикуАвтомобилейТовары.Коэффициент) КАК КоличествоОсталось,
	|	СУММА(ВозвратПоставщикуАвтомобилейТовары.СуммаВсего) КАК Сумма,
	|	СУММА(ВозвратПоставщикуАвтомобилейТовары.СуммаВсего) КАК СуммаОсталось,
	|	СУММА(ВозвратПоставщикуАвтомобилейТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ВозвратПоставщикуАвтомобилейТовары.СуммаНДС) КАК СуммаНДСОсталось,
	|	МИНИМУМ(ВозвратПоставщикуАвтомобилейТовары.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.ВозвратПоставщикуАвтомобилей.Товары КАК ВозвратПоставщикуАвтомобилейТовары
	|ГДЕ
	|	ВозвратПоставщикуАвтомобилейТовары.Ссылка = &Основание
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратПоставщикуАвтомобилейТовары.ХарактеристикаНоменклатуры,
	|	ВозвратПоставщикуАвтомобилейТовары.Номенклатура,
	|	ВозвратПоставщикуАвтомобилейТовары.СтавкаНДС
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	ПараметрыЗаполнения.РезультатЗапросаПоТоварам = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КомплектацияАвтомобилей.Номенклатура,
	|	КомплектацияАвтомобилей.ХарактеристикаНоменклатуры,
	|	КомплектацияАвтомобилей.Партия,
	|	КомплектацияАвтомобилей.ГТД,
	|	СУММА(КомплектацияАвтомобилей.Количество) КАК Количество,
	|	СУММА(КомплектацияАвтомобилей.Количество) КАК КоличествоОсталось
	|ИЗ
	|	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
	|ГДЕ
	|	КомплектацияАвтомобилей.Регистратор = &Основание
	|
	|СГРУППИРОВАТЬ ПО
	|	КомплектацияАвтомобилей.Партия,
	|	КомплектацияАвтомобилей.ГТД,
	|	КомплектацияАвтомобилей.Номенклатура,
	|	КомплектацияАвтомобилей.ХарактеристикаНоменклатуры";
	ПараметрыЗаполнения.РезультатЗапросаПоГТД = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиАвтомобилей.Автомобиль КАК Номенклатура,
	|	ОстаткиАвтомобилей.Партия КАК Партия,
	|	ОстаткиАвтомобилей.Автомобиль.ГТД КАК ГТД,
	|	-ОстаткиАвтомобилей.Количество КАК Количество,
	|	-ОстаткиАвтомобилей.Сумма + ЕСТЬNULL(ВложенныйЗапрос.Сумма, 0) КАК СуммаВсего,
	|	-ОстаткиАвтомобилей.СуммаНДС + ЕСТЬNULL(ВложенныйЗапрос.СуммаНДС, 0) КАК СуммаНДС,
	|	ОстаткиАвтомобилей.СтавкаНДС
	|ИЗ
	|	РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КомплектацияАвтомобилей.Автомобиль КАК Автомобиль,
	|			СУММА(КомплектацияАвтомобилей.Сумма) КАК Сумма,
	|			СУММА(КомплектацияАвтомобилей.СуммаНДС) КАК СуммаНДС
	|		ИЗ
	|			РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
	|		ГДЕ
	|			КомплектацияАвтомобилей.Регистратор = &Основание
	|		
	|		СГРУППИРОВАТЬ ПО
	|			КомплектацияАвтомобилей.Автомобиль) КАК ВложенныйЗапрос
	|		ПО ОстаткиАвтомобилей.Автомобиль = ВложенныйЗапрос.Автомобиль
	|ГДЕ
	|	ОстаткиАвтомобилей.Регистратор = &Основание";
	ПараметрыЗаполнения.РезультатЗапросаПоАвто = Запрос.Выполнить().Выгрузить();
	
	ОбработкаТабличнойЧастиТовары.ПерезаполнитьСУчетомГТДПартий(ЭтотОбъект, Товары, ПараметрыЗаполнения);
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ВозвратПоставщикуАвтомобилей()

// Производит заполнение объекта на основании документа "Отчет комиссионера за автомобили".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ОтчетКомиссионераЗаАвтомобили(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,
		ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыЗаполнения = НовыеПараметрыЗаполнения();
	ПараметрыЗаполнения.ЗаполнятьТоварами = Истина;
	ПараметрыЗаполнения.ЗаполнятьАвтомобилями = Истина;
	
	Товары.Очистить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетКомиссионераЗаАвтомобилиТовары.Номенклатура КАК Номенклатура,
	|	ОтчетКомиссионераЗаАвтомобилиТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ОтчетКомиссионераЗаАвтомобилиТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ОтчетКомиссионераЗаАвтомобилиТовары.Количество * ОтчетКомиссионераЗаАвтомобилиТовары.Коэффициент) КАК Количество,
	|	СУММА(ОтчетКомиссионераЗаАвтомобилиТовары.Количество * ОтчетКомиссионераЗаАвтомобилиТовары.Коэффициент) КАК КоличествоОсталось,
	|	СУММА(ОтчетКомиссионераЗаАвтомобилиТовары.СуммаВсего) КАК Сумма,
	|	СУММА(ОтчетКомиссионераЗаАвтомобилиТовары.СуммаВсего) КАК СуммаОсталось,
	|	СУММА(ОтчетКомиссионераЗаАвтомобилиТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ОтчетКомиссионераЗаАвтомобилиТовары.СуммаНДС) КАК СуммаНДСОсталось,
	|	МИНИМУМ(ОтчетКомиссионераЗаАвтомобилиТовары.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.ОтчетКомиссионераЗаАвтомобили.Товары КАК ОтчетКомиссионераЗаАвтомобилиТовары
	|ГДЕ
	|	ОтчетКомиссионераЗаАвтомобилиТовары.Ссылка = &Основание
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетКомиссионераЗаАвтомобилиТовары.ХарактеристикаНоменклатуры,
	|	ОтчетКомиссионераЗаАвтомобилиТовары.СтавкаНДС,
	|	ОтчетКомиссионераЗаАвтомобилиТовары.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	ПараметрыЗаполнения.РезультатЗапросаПоТоварам = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровОтданные.Номенклатура,
	|	ПартииТоваровОтданные.ХарактеристикаНоменклатуры,
	|	ПартииТоваровОтданные.ГТД,
	|	ПартииТоваровОтданные.Партия,
	|	СУММА(ПартииТоваровОтданные.Количество) КАК Количество,
	|	СУММА(ПартииТоваровОтданные.Количество) КАК КоличествоОсталось
	|ИЗ
	|	РегистрНакопления.ПартииТоваровОтданные КАК ПартииТоваровОтданные
	|ГДЕ
	|	ПартииТоваровОтданные.Регистратор = &Основание
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровОтданные.ГТД,
	|	ПартииТоваровОтданные.Партия,
	|	ПартииТоваровОтданные.Номенклатура,
	|	ПартииТоваровОтданные.ХарактеристикаНоменклатуры";
	ПараметрыЗаполнения.РезультатЗапросаПоГТД = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетКомиссионераЗаАвтомобилиАвтомобили.Автомобиль КАК Номенклатура,
	|	СУММА(ОтчетКомиссионераЗаАвтомобилиАвтомобили.Количество) КАК Количество,
	|	СУММА(ОтчетКомиссионераЗаАвтомобилиАвтомобили.Сумма) КАК Сумма,
	|	СУММА(ОтчетКомиссионераЗаАвтомобилиАвтомобили.СуммаВсего) КАК СуммаВсего,
	|	ОтчетКомиссионераЗаАвтомобилиАвтомобили.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ОтчетКомиссионераЗаАвтомобилиАвтомобили.СуммаНДС) КАК СуммаНДС,
	|	ЕСТЬNULL(АвтомобилиОтданные.Партия, ЗНАЧЕНИЕ(Документ.ПоступлениеТоваров.ПустаяСсылка)) КАК Партия,
	|	ЕСТЬNULL(АвтомобилиОтданные.ГТД, ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)) КАК ГТД,
	|	МИНИМУМ(ОтчетКомиссионераЗаАвтомобилиАвтомобили.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.ОтчетКомиссионераЗаАвтомобили.Автомобили КАК ОтчетКомиссионераЗаАвтомобилиАвтомобили
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.АвтомобилиОтданные КАК АвтомобилиОтданные
	|		ПО ОтчетКомиссионераЗаАвтомобилиАвтомобили.Ссылка = АвтомобилиОтданные.Регистратор
	|			И ОтчетКомиссионераЗаАвтомобилиАвтомобили.Автомобиль = АвтомобилиОтданные.Автомобиль
	|ГДЕ
	|	ОтчетКомиссионераЗаАвтомобилиАвтомобили.Ссылка = &Основание
	|	И АвтомобилиОтданные.Регистратор = &Основание
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетКомиссионераЗаАвтомобилиАвтомобили.Автомобиль,
	|	ОтчетКомиссионераЗаАвтомобилиАвтомобили.СтавкаНДС,
	|	ЕСТЬNULL(АвтомобилиОтданные.Партия, ЗНАЧЕНИЕ(Документ.ПоступлениеТоваров.ПустаяСсылка)),
	|	ЕСТЬNULL(АвтомобилиОтданные.ГТД, ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	ПараметрыЗаполнения.РезультатЗапросаПоАвто = Запрос.Выполнить().Выгрузить();
	
	ОбработкаТабличнойЧастиТовары.ПерезаполнитьСУчетомГТДПартий(ЭтотОбъект, Товары, ПараметрыЗаполнения);
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ОтчетКомиссионераЗаАвтомобили()

// Производит заполнение объекта на основании документа "Реализация автомобилей".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РеализацияАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,
		ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыЗаполнения = НовыеПараметрыЗаполнения();
	ПараметрыЗаполнения.ЗаполнятьТоварами = Истина;
	ПараметрыЗаполнения.ЗаполнятьАвтомобилями = Истина;
	
	Товары.Очистить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
	
	БезОборудования = НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДанныеЗаполнения, "НеВключатьВСтоимостьАвтомобиляСтоимостьОборудования");
		
	Если БезОборудования Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеализацияАвтомобилейТовары.ИдентификаторАвтомобиля КАК ИдентификаторАвтомобиля,
		|	СУММА(РеализацияАвтомобилейТовары.СуммаНДС) КАК СуммаНДС,
		|	СУММА(РеализацияАвтомобилейТовары.СуммаВсего) КАК СуммаВсего,
		|	МИНИМУМ(РеализацияАвтомобилейТовары.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ ОборудованиеАвтомобиля
		|ИЗ
		|	Документ.РеализацияАвтомобилей.Товары КАК РеализацияАвтомобилейТовары
		|ГДЕ
		|	РеализацияАвтомобилейТовары.Ссылка = &Основание
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализацияАвтомобилейТовары.ИдентификаторАвтомобиля
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
		|	РеализацияАвтомобилейАвтомобили.Количество КАК Количество,
		|	РеализацияАвтомобилейАвтомобили.Сумма + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаВсего, 0) - ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаНДС, 0) КАК Сумма,
		|	РеализацияАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС,
		|	РеализацияАвтомобилейАвтомобили.СуммаНДС + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаНДС, 0) КАК СуммаНДС,
		|	РеализацияАвтомобилейАвтомобили.СуммаВсего + ЕСТЬNULL(ОборудованиеАвтомобиля.СуммаВсего, 0) КАК СуммаВсего,
		|	ЕСТЬNULL(ОстаткиАвтомобилей.Партия, ЗНАЧЕНИЕ(Документ.ПоступлениеТоваров.ПустаяСсылка)) КАК Партия,
		|	ЕСТЬNULL(ОстаткиАвтомобилей.Автомобиль.ГТД, ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)) КАК ГТД
		|ИЗ
		|	Документ.РеализацияАвтомобилей.Автомобили КАК РеализацияАвтомобилейАвтомобили
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
		|		ПО РеализацияАвтомобилейАвтомобили.Ссылка = ОстаткиАвтомобилей.Регистратор
		|			И РеализацияАвтомобилейАвтомобили.Автомобиль = ОстаткиАвтомобилей.Автомобиль
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОборудованиеАвтомобиля КАК ОборудованиеАвтомобиля
		|		ПО РеализацияАвтомобилейАвтомобили.ИдентификаторАвтомобиля = ОборудованиеАвтомобиля.ИдентификаторАвтомобиля
		|ГДЕ
		|	РеализацияАвтомобилейАвтомобили.Ссылка = &Основание
		|	И ОстаткиАвтомобилей.Регистратор = &Основание
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеализацияАвтомобилейАвтомобили.НомерСтроки";
		ПараметрыЗаполнения.РезультатЗапросаПоАвто = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеализацияАвтомобилейТовары.Номенклатура КАК Номенклатура,
		|	РеализацияАвтомобилейТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	РеализацияАвтомобилейТовары.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(РеализацияАвтомобилейТовары.Количество * РеализацияАвтомобилейТовары.Коэффициент) КАК Количество,
		|	СУММА(РеализацияАвтомобилейТовары.Количество * РеализацияАвтомобилейТовары.Коэффициент) КАК КоличествоОсталось,
		|	СУММА(РеализацияАвтомобилейТовары.СуммаВсего) КАК Сумма,
		|	СУММА(РеализацияАвтомобилейТовары.СуммаВсего) КАК СуммаОсталось,
		|	СУММА(РеализацияАвтомобилейТовары.СуммаНДС) КАК СуммаНДС,
		|	СУММА(РеализацияАвтомобилейТовары.СуммаНДС) КАК СуммаНДСОсталось,
		|	МИНИМУМ(РеализацияАвтомобилейТовары.НомерСтроки) КАК НомерСтроки
		|ИЗ
		|	Документ.РеализацияАвтомобилей.Товары КАК РеализацияАвтомобилейТовары
		|ГДЕ
		|	РеализацияАвтомобилейТовары.Ссылка = &Основание
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализацияАвтомобилейТовары.СтавкаНДС,
		|	РеализацияАвтомобилейТовары.ХарактеристикаНоменклатуры,
		|	РеализацияАвтомобилейТовары.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		ПараметрыЗаполнения.РезультатЗапросаПоТоварам = Запрос.Выполнить().Выгрузить();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КомплектацияАвтомобилей.Номенклатура,
		|	КомплектацияАвтомобилей.ХарактеристикаНоменклатуры,
		|	КомплектацияАвтомобилей.Партия,
		|	КомплектацияАвтомобилей.ГТД,
		|	СУММА(КомплектацияАвтомобилей.Количество) КАК Количество,
		|	СУММА(КомплектацияАвтомобилей.Количество) КАК КоличествоОсталось
		|ИЗ
		|	РегистрНакопления.КомплектацияАвтомобилей КАК КомплектацияАвтомобилей
		|ГДЕ
		|	КомплектацияАвтомобилей.Регистратор = &Основание
		|
		|СГРУППИРОВАТЬ ПО
		|	КомплектацияАвтомобилей.ГТД,
		|	КомплектацияАвтомобилей.Партия,
		|	КомплектацияАвтомобилей.Номенклатура,
		|	КомплектацияАвтомобилей.ХарактеристикаНоменклатуры";
		ПараметрыЗаполнения.РезультатЗапросаПоГТД = Запрос.Выполнить().Выгрузить();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеализацияАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
		|	РеализацияАвтомобилейАвтомобили.Количество КАК Количество,
		|	РеализацияАвтомобилейАвтомобили.Сумма КАК Сумма,
		|	РеализацияАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС,
		|	РеализацияАвтомобилейАвтомобили.СуммаНДС КАК СуммаНДС,
		|	РеализацияАвтомобилейАвтомобили.СуммаВсего КАК СуммаВсего,
		|	ЕСТЬNULL(ОстаткиАвтомобилей.Партия, ЗНАЧЕНИЕ(Документ.ПоступлениеТоваров.ПустаяСсылка)) КАК Партия,
		|	ЕСТЬNULL(ОстаткиАвтомобилей.Автомобиль.ГТД, ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)) КАК ГТД
		|ИЗ
		|	Документ.РеализацияАвтомобилей.Автомобили КАК РеализацияАвтомобилейАвтомобили
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
		|		ПО РеализацияАвтомобилейАвтомобили.Ссылка = ОстаткиАвтомобилей.Регистратор
		|			И РеализацияАвтомобилейАвтомобили.Автомобиль = ОстаткиАвтомобилей.Автомобиль
		|ГДЕ
		|	РеализацияАвтомобилейАвтомобили.Ссылка = &Основание
		|	И ОстаткиАвтомобилей.Регистратор = &Основание
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеализацияАвтомобилейАвтомобили.НомерСтроки";
		ПараметрыЗаполнения.РезультатЗапросаПоАвто = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТовары.ПерезаполнитьСУчетомГТДПартий(ЭтотОбъект, Товары, ПараметрыЗаполнения);
	
	Если БезОборудования Тогда
		
	// Дополнительная проверка устраняющая ошибку в 1 копейке в счет фактуре и реализации.
	// Ошибка возникает в случае когда суммы оборудования схлопываются и добавляются к сумме автомобиля.
	// т.к. в Реализации суммы округляются отдельно, а в СФ 1 строкой, возможны различия.
	СуммоваяРазница = 0.01;
	
		Для Каждого Строка Из Товары Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", Строка.Номенклатура);
			СтруктураПоиска.Вставить("Партия", Строка.Партия);
			СтруктураПоиска.Вставить("ГТД", Строка.ГТД);
			
			НайденныеСтроки = ПараметрыЗаполнения.РезультатЗапросаПоАвто.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;		
			КонецЕсли;	
			
			СуммаВсего = НайденныеСтроки[0].СуммаВсего;
			Сумма      = НайденныеСтроки[0].Сумма;
			СуммаНДС   = НайденныеСтроки[0].СуммаНДС;
			
			Если Строка.СуммаВсего = СуммаВсего 
				И Строка.Сумма = Сумма
				И Строка.Цена = Сумма
				И Строка.СуммаНДС = СуммаНДС Тогда
					Продолжить;
			КонецЕсли;
			
			Если Строка.СуммаВсего - СуммаВсего = СуммоваяРазница 
				Или СуммаВсего - Строка.СуммаВсего = СуммоваяРазница Тогда
					Строка.СуммаВсего = СуммаВсего;	
			КонецЕсли;
			
			Если Строка.Сумма - Сумма = СуммоваяРазница 
				Или Сумма - Строка.Сумма = СуммоваяРазница
				Или Строка.Цена - Сумма = СуммоваяРазница 
				Или Сумма - Строка.Цена = СуммоваяРазница Тогда
					Строка.Сумма = Сумма;	
					Строка.Цена = Сумма;
			КонецЕсли;
			
			Если Строка.СуммаНДС - СуммаНДС = СуммоваяРазница 
				Или СуммаНДС - Строка.СуммаНДС = СуммоваяРазница Тогда
					Строка.СуммаНДС = СуммаНДС;	
			КонецЕсли;

		КонецЦикла;	
	
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РеализацияАвтомобилей()

// Производит заполнение объекта на основании документа "Корректировка реализации автомобилей".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_КорректировкаРеализацииАвтомобилей(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения,
		ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Товары.Очистить();
	ХозОперация = Справочники.ХозОперации.СчетФактураВыданныйКорректировка;
	Документы.СчетФактураВыданный.ЗаполнитьНомера(ЭтотОбъект, ДанныеЗаполнения);
	ПараметрыЗаполнения = НовыеПараметрыЗаполнения();
	ПараметрыЗаполнения.ЗаполнятьТоварами = Истина;
	ПараметрыЗаполнения.ЗаполнятьАвтомобилями = Истина;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сделка", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "Сделка"));
	Запрос.УстановитьПараметр("Основание" , ДанныеЗаполнения);
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль КАК Номенклатура,
	|	1 КАК Количество,
	|	КорректировкаРеализацииАвтомобилейАвтомобили.Сумма КАК Сумма,
	|	КорректировкаРеализацииАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС,
	|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаНДС КАК СуммаНДС,
	|	КорректировкаРеализацииАвтомобилейАвтомобили.СуммаВсего КАК СуммаВсего,
	|	ЕСТЬNULL(ОстаткиАвтомобилей.Партия, ЗНАЧЕНИЕ(Документ.ПоступлениеАвтомобилей.ПустаяСсылка)) КАК Партия,
	|	ЕСТЬNULL(ОстаткиАвтомобилей.Автомобиль.ГТД, ЗНАЧЕНИЕ(Справочник.ГТД.ПустаяСсылка)) КАК ГТД
	|ИЗ
	|	Документ.КорректировкаРеализацииАвтомобилей.Автомобили КАК КорректировкаРеализацииАвтомобилейАвтомобили
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиАвтомобилей КАК ОстаткиАвтомобилей
	|		ПО КорректировкаРеализацииАвтомобилейАвтомобили.Автомобиль = ОстаткиАвтомобилей.Автомобиль
	|ГДЕ
	|	КорректировкаРеализацииАвтомобилейАвтомобили.Ссылка = &Основание
	|	И ОстаткиАвтомобилей.Регистратор = &Сделка
	|	И КорректировкаРеализацииАвтомобилейАвтомобили.Количество = 1
	|
	|УПОРЯДОЧИТЬ ПО
	|	КорректировкаРеализацииАвтомобилейАвтомобили.НомерСтроки";
	ПараметрыЗаполнения.РезультатЗапросаПоАвто = Запрос.Выполнить().Выгрузить();
	
	ОбработкаТабличнойЧастиТовары.ПерезаполнитьСУчетомГТДПартий(ЭтотОбъект, Товары, ПараметрыЗаполнения);
	
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_КорректировкаРеализацииАвтомобилей()

// Производит заполнение объекта на основании документа "Приходный кассовый ордер"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПриходныйКассовыйОрдер(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект,
		ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Грузополучатель = ?(ЗначениеЗаполнено(ДанныеЗаполнения),
		УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Грузополучатель", ДанныеЗаполнения, Контрагент),
		Контрагент);
	
	ИдентификаторГосударственногоКонтракта = ?(ЗначениеЗаполнено(ИдентификаторГосударственногоКонтракта),
		ИдентификаторГосударственногоКонтракта,
		ДоговорВзаиморасчетов.ИдентификаторГосударственногоКонтракта);
	
	РеквизитыДанныхЗаполнения = ОбщегоНазначения
		.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Номер,Дата,СтатьяДДС,СуммаДокумента,СтавкаНДС,СуммаНДС");
	ДобавитьСтрокуПредоплаты(
		РеквизитыДанныхЗаполнения.СуммаДокумента, РеквизитыДанныхЗаполнения.СтавкаНДС, РеквизитыДанныхЗаполнения.СуммаНДС);
	
	Если РеквизитыДанныхЗаполнения.СтатьяДДС.РазрешитьВводАвансовойСчетФактуры Тогда
		
		РеквизитыДанныхЗаполнения.Номер = ПлатежноРасчетныеДокументыСервер.СформироватьНомер(
			РеквизитыДанныхЗаполнения.Номер, 
			"ПКО "
		);
		ЗаполнитьЗначенияСвойств(ПлатежноРасчетныеДокументы.Добавить(), РеквизитыДанныхЗаполнения);
		
	Иначе
		
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
			ЭтотОбъект,
			НСтр("ru = 'Поступление денежных средств не является авансом. Счет-фактура выданная не нужна.'"));
		Возврат Ложь;
	КонецЕсли;
	
	ДоступнаПечатьСчетФактура = Истина;
	
	// Проверим, а есть ли НДС в табличной части, отличный от БезНДС
	Если НЕ ПраваИНастройкиПользователя.Значение("СоздаватьСчетФактуруБезНДС", ДанныеЗаполнения) Тогда
		
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДанныеЗаполнения)) Тогда
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДанныеЗаполнения);
			Если Не Менеджер = Неопределено Тогда
				Если Не Менеджер.ВозможенВводСчетФактурыВыданной(ДанныеЗаполнения) Тогда
					ТекстСообщения = НСтр("ru = 'Для данного документа счет-фактура не применяется.'");
					УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Ложь;
	
КонецФункции // ОбработкаЗаполнения_ПриходныйКассовыйОрдер()

// Производит заполнение объекта на основании документа "Выписка"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Выписка(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект,
		ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДоступнаПечатьСчетФактура = Истина;						
	
	// Выберем строку для заполнения
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыпискаСостав.Контрагент КАК Контрагент,
	|	ВыпискаСостав.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	ВыпискаСостав.СуммаПриход КАК СуммаПриход,
	|	ВыпискаСостав.Сделка КАК Сделка,
	|	ВыпискаСостав.СтавкаНДС КАК СтавкаНДС,
	|	ВыпискаСостав.СуммаНДС КАК СуммаНДС,
	|	ВыпискаСостав.ВхДокНомер КАК Номер,
	|	ВыпискаСостав.ВхДокДата КАК Дата,
	|	ВыпискаСостав.Ссылка.ХозОперация КАК ХозОперация,
	|	ВыпискаСостав.Ссылка.Номер КАК НомерДополнительный,
	|	ВыпискаСостав.Ссылка.Дата КАК ДатаДополнительная
	|ИЗ
	|	Документ.Выписка.Состав КАК ВыпискаСостав
	|ГДЕ
	|	ВыпискаСостав.Ссылка = &Основание
	|	И ВыпискаСостав.СтатьяДДС.РазрешитьВводАвансовойСчетФактуры
	|	И ВыпискаСостав.СуммаПриход > 0";
	
	Запрос.УстановитьПараметр("Основание", ДанныеЗаполнения);
	ТЗВыбора = Запрос.Выполнить().Выгрузить();
	
	Если ТЗВыбора.Количество() = 0 Тогда
		
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
			ЭтотОбъект,
			НСтр("ru = 'Поступление денежных средств не является авансом. Счет-фактура выданная не нужна.'"));
		Возврат Истина;
		
	КонецЕсли;
	
	ЗаполнятьШапку = Истина;
	
	Если ТЗВыбора.Количество() > 1 Тогда
		
		ТекстСообщения	= НСтр("ru='Выписка содержит несколько авансов. Необходимо заполнить данные документа вручную.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
		ЗаполнятьШапку = Ложь;
		
	КонецЕсли;
	
	ВыбСтрока = ТЗВыбора[0];
	
	// заполним шапку СФ и одну строку
	Если ЗаполнятьШапку Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыбСтрока, , "Номер,Дата,ХозОперация");
		
	КонецЕсли;
	
	Грузополучатель = ?(ЗначениеЗаполнено(ДанныеЗаполнения),
		УправлениеСвойствамиПлатформа.ПолучитьЗначениеСвойства("Грузополучатель", ДанныеЗаполнения, Контрагент),
		Контрагент);
	
	ИдентификаторГосударственногоКонтракта = ?(ЗначениеЗаполнено(ИдентификаторГосударственногоКонтракта),
		ИдентификаторГосударственногоКонтракта,
		ДоговорВзаиморасчетов.ИдентификаторГосударственногоКонтракта);
	
	ДобавитьСтрокуПредоплаты(ВыбСтрока.СуммаПриход, ВыбСтрока.СтавкаНДС, ВыбСтрока.СуммаНДС);
	ДанныеЗаполнения = Неопределено;
	
	Если ЗначениеЗаполнено(ВыбСтрока.Номер) Тогда
		
		НоваяСтрока = ПлатежноРасчетныеДокументы.Добавить();
		НоваяСтрока.Номер = "Платежное поручение " + ВыбСтрока.Номер; 	
		НоваяСтрока.Дата = ВыбСтрока.Дата;
		Возврат Ложь;
				
	КонецЕсли;
	
	Если ВыбСтрока.ХозОперация <> Справочники.ХозОперации.БанковскаяВыписка Тогда
		
		НоваяСтрока = ПлатежноРасчетныеДокументы.Добавить();
		НоваяСтрока.Номер = ПлатежноРасчетныеДокументыСервер.СформироватьНомер(
			ВыбСтрока.НомерДополнительный,
			"Выписка "
		);  
		НоваяСтрока.Дата = ВыбСтрока.ДатаДополнительная;
		Возврат Ложь;
		
	КонецЕсли;
	
	ПлатежноРасчетныеДокументы.Добавить().Номер = НСтр("ru = 'в выписке не указан'");
							
	ДоступнаПечатьСчетФактура = Истина;	    
					
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Ложь;
	
КонецФункции // ОбработкаЗаполнения_Выписка()

// Производит заполнение объекта на основании документа "Отчет комитенту"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ОтчетКомитенту(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект,
		ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Для отчета комитенту только 1 строка с комиссионным вознаграждением.
	Товары.Очистить();
	НоваяСтрока					= Товары.Добавить();
	НоваяСтрока.Номенклатура	= Справочники.Номенклатура.КомиссионноеВознаграждение;
	Документы.СчетФактураВыданный.ТоварыНоменклатураПриИзменении(ЭтотОбъект,
		НоваяСтрока, ДополнительныеСвойства.ПараметрыДействия);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		НоваяСтрока.СуммаВсего	= ДанныеЗаполнения.Товары.Итог("Вознаграждение");
	Иначе
		НоваяСтрока.СуммаВсего	= ДанныеЗаполнения.Автомобили.Итог("Вознаграждение");
	КонецЕсли;
	
	Документы.СчетФактураВыданный.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект,
		НоваяСтрока, ДополнительныеСвойства.ПараметрыДействия);
	
	ДанныеЗаполнения					 = Неопределено;
			
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ОтчетКомитенту()

// Производит заполнение объекта на основании документа "Чек на оплату"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЧекНаОплату(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
		// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(ЭтотОбъект,
		ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	РеквизитыДанныхЗаполнения = ОбщегоНазначения
		.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Номер,Дата,СуммаДокумента,ПризнакСпособаРасчета, Ссылка, СтавкаНДС, СуммаНДС");
	
		Если НЕ (РеквизитыДанныхЗаполнения.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс
			ИЛИ РеквизитыДанныхЗаполнения.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная
			ИЛИ РеквизитыДанныхЗаполнения.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная) Тогда
				УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект,
					НСтр("ru = 'Поступление денежных средств не является авансом. Счет-фактура выданная не нужна.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЧекНаОплатуОплаты.ТипОплаты) КАК ТипОплаты
		|ИЗ
		|	Документ.ЧекНаОплату.Оплаты КАК ЧекНаОплатуОплаты
		|ГДЕ
		|	(ЧекНаОплатуОплаты.ТипОплаты = &ЕстьНаличныйРасчет
		|			ИЛИ ЧекНаОплатуОплаты.ТипОплаты = &ЕстьБезналичныйРасчет)
		|	И ЧекНаОплатуОплаты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ЕстьБезналичныйРасчет", Перечисления.ТипыОплатыККТ.Электронно);
	Запрос.УстановитьПараметр("ЕстьНаличныйРасчет", Перечисления.ТипыОплатыККТ.Наличные);
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДанныхЗаполнения.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	КоличествоТипов = 2;
	Если РезультатЗапроса[0].ТипОплаты = КоличествоТипов Тогда
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект,
			НСтр("ru = 'Чек на оплату содержит разные типы оплаты. Ввод счет-фактуры запрещен.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Грузополучатель = Контрагент;
	ИдентификаторГосударственногоКонтракта = ДоговорВзаиморасчетов.ИдентификаторГосударственногоКонтракта;
	
	Товары.Очистить();
	ДобавитьСтрокуПредоплаты(
		РеквизитыДанныхЗаполнения.СуммаДокумента, РеквизитыДанныхЗаполнения.СтавкаНДС, РеквизитыДанныхЗаполнения.СуммаНДС);
	РеквизитыДанныхЗаполнения.Номер = ПлатежноРасчетныеДокументыСервер.СформироватьНомер(
		РеквизитыДанныхЗаполнения.Номер, "Чек "
	);
	ЗаполнитьЗначенияСвойств(ПлатежноРасчетныеДокументы.Добавить(), РеквизитыДанныхЗаполнения);
	
	ДоступнаПечатьСчетФактура = Истина;
	
	// Проверим, а есть ли НДС в табличной части, отличный от БезНДС
	Если НЕ ПраваИНастройкиПользователя.Значение("СоздаватьСчетФактуруБезНДС", ДанныеЗаполнения) Тогда
		
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДанныеЗаполнения)) Тогда
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДанныеЗаполнения);
			Если Не Менеджер = Неопределено Тогда
				Если Не Менеджер.ВозможенВводСчетФактурыВыданной(ДанныеЗаполнения) Тогда
					ТекстСообщения = НСтр("ru = 'Для данного документа счет-фактура не применяется.'");
					УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Ложь;
	
КонецФункции // ОбработкаЗаполнения_ЧекНаОплату()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыеПараметрыЗаполнения()
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ЗаполнятьТоварами", Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнятьПоГТД", Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнятьПоПартиям", Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнятьРаботами", Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнятьАвтомобилями", Ложь);
	ПараметрыЗаполнения.Вставить("РезультатЗапросаПоТоварам", Неопределено);
	ПараметрыЗаполнения.Вставить("РезультатЗапросаПоГТД", Неопределено);
	ПараметрыЗаполнения.Вставить("РезультатЗапросаПоРаботам", Неопределено);
	ПараметрыЗаполнения.Вставить("РезультатЗапросаПоАвто", Неопределено);
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Процедура ДобавитьСтрокуПредоплаты(СуммаВсего, СтавкаНДС = Неопределено, СуммаНДС = Неопределено)
	
	НоваяСтрока = Товары.Добавить();
	НоваяСтрока.Номенклатура = Справочники.Номенклатура.Предоплата;
	ПараметрыДействия = Документы
		.СчетФактураВыданный
		.ПолучитьПараметрыДействия(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
	Документы
		.СчетФактураВыданный
		.ТоварыНоменклатураПриИзменении(ЭтотОбъект, НоваяСтрока, ДополнительныеСвойства.ПараметрыДействия);
	
	Если ЗначениеЗаполнено(СтавкаНДС) Тогда
		
		НоваяСтрока.СтавкаНДС = РаботаСоСтавкамиНДССервер.РасчетнаяСтавкаНДСПоОбычной(СтавкаНДС);
		
	КонецЕсли;
	
	НоваяСтрока.СуммаВсего = СуммаВсего;
	Документы
		.СчетФактураВыданный
		.ТоварыСуммаВсегоПриИзменении(ЭтотОбъект, НоваяСтрока, ДополнительныеСвойства.ПараметрыДействия);
	
	Если СуммаНДС <> Неопределено Тогда
		
		НоваяСтрока.СуммаНДС = СуммаНДС;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВводСчетФактурыВозможен(ДанныеЗаполнения)
	
	ВводВозможен = Истина;
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
			ЭтотОбъект,
			НСтр("ru = 'Счет-фактура вводится только на основании проведенного документа.'")
		);
		ВводВозможен = Ложь;
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДополнительныеСвойства, "ОтменитьВвод", Ложь) Тогда
		
		Отказ = Истина;
		ВводВозможен = Ложь;
		
	ИначеЕсли ЭтоНовый() Тогда
		
		Если Не ДанныеЗаполнения.Проведен Тогда
			
			УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(
				ЭтотОбъект,
				НСтр("ru = 'Счет-фактура вводится только на основании проведенного документа.'")
			);
			ВводВозможен = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВводВозможен = ВводВозможен
		И НЕ ДляОснованияУжеВведенСчетФактура(ДанныеЗаполнения)
		И ЕстьСчетФактураОснованияДокументаОснования(ДанныеЗаполнения);
		
	Возврат ВводВозможен;
	
КонецФункции

// Проверяет вводился ли уже счет фактура на основании этого документа.
//
// Параметры:
//  Документ - ДокументСсылка - Проверяемый документ основание.
//
Функция ДляОснованияУжеВведенСчетФактура(Документ)
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.Выписка") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ОтборПоСсылке = "";
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		ОтборПоСсылке = "И СчетФактураВыданный.Ссылка <> &ЭтотДокумент";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(СтрШаблон(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураВыданный.Ссылка КАК Документ,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СчетФактураВыданный.Ссылка) КАК ДокументПредставление,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(&ДокументОснование) КАК ОснованиеПредставление
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
	|	И НЕ СчетФактураВыданный.ПометкаУдаления
	|	%1", ОтборПоСсылке));
	Запрос.УстановитьПараметр("ДокументОснование", Документ);
	Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ТекстСообщения = СтрШаблон(
		НСтр("ru='На основании документа <%1> уже введен <%2>.'"),
		Выборка.ОснованиеПредставление,
		Выборка.ДокументПредставление
	);
	
	УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(Выборка.Документ, ТекстСообщения);
	
	Возврат Истина;
	
КонецФункции

Функция ЕстьСчетФактураОснованияДокументаОснования(Документ)
	
	ПропуститьПроверкуОснованияСчетаФактуры = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства,
		"ПропуститьПроверкуОснованияСчетаФактуры", Ложь);
	ТипДокумента = ТипЗнч(Документ);
	
	Если
		ПропуститьПроверкуОснованияСчетаФактуры
		Или (ТипДокумента <> Тип("ДокументСсылка.КорректировкаРеализации")
			И ТипДокумента <> Тип("ДокументСсылка.КорректировкаРеализацииАвтомобилей"))
	Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Основание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ДокументОснование");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
	|	И НЕ СчетФактураВыданный.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru='Не обнаружен исходный счет-фактура к исправлению.%1Введите счет-фактуру к документу %2, а затем введите исправленный счет-фактуру'"),
			Символы.ПС,
			Строка(Основание)
		);
		УправлениеДиалогомСервер.ЗапретитьОткрытиеФормыОбъекта(ЭтотОбъект, ТекстСообщения);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьИсходныеНомераСтрок()
	
	Если ХозОперация = Справочники.ХозОперации.СчетФактураВыданныйКорректировка Тогда
		
		Запрос = Новый Запрос;
		ОснованиеДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДокументОснование");
		Запрос.УстановитьПараметр("ДокументОснование", ОснованиеДокументаОснования);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураВыданныйТовары.Номенклатура КАК Номенклатура,
		|	СчетФактураВыданныйТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СчетФактураВыданныйТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СчетФактураВыданныйТовары.ГТД КАК ГТД,
		|	СчетФактураВыданныйТовары.ИсходныйНомерСтрокиТовара КАК ИсходныйНомерСтроки
		|ИЗ
		|	Документ.СчетФактураВыданный.Товары КАК СчетФактураВыданныйТовары
		|ГДЕ
		|	СчетФактураВыданныйТовары.Ссылка.ДокументОснование = &ДокументОснование
		|	И НЕ СчетФактураВыданныйТовары.Ссылка.ПометкаУдаления";
		
		ТоварыИсходногоСчетаФактуры = Запрос.Выполнить().Выгрузить();
		
		Для Каждого ТекущаяСтрока Из Товары Цикл
			
			ПараметрыОтбора = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры,ЕдиницаИзмерения,ГТД");
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ТекущаяСтрока);
			Результат = ТоварыИсходногоСчетаФактуры.НайтиСтроки(ПараметрыОтбора);
			Если Результат.Количество() > 0 Тогда
				ТекущаяСтрока.ИсходныйНомерСтрокиТовара = Результат[0].ИсходныйНомерСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ТекущаяСтрока Из Товары Цикл
			ТекущаяСтрока.ИсходныйНомерСтрокиТовара = ТекущаяСтрока.НомерСтроки;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
