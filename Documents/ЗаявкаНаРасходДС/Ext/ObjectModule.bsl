// Модуль документа "Заявка на расход ДС"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	// Вызываем общий обработчик события
	ПродолжитьВыполнение = ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка,
		"ВхДокНомер,ВхДокДатаВрем"
	);
	Если НЕ ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// присвоим тип данных Касс или Банковских счетов в зависимости от хоз операции
	Если ХозОперация = Справочники.ХозОперации.ЗаявкаНаРасходИзКассы Тогда
		СтруктурнаяЕдиница = Новый(Тип("СправочникСсылка.КассыКомпании"));
	Иначе
		СтруктурнаяЕдиница = Новый(Тип("СправочникСсылка.БанковскиеСчета"));
		СтруктурнаяЕдиница = Справочники.БанковскиеСчета.ОсновнойБанковскийСчет(Организация);
	КонецЕсли;
	
	Сделка = ДокументОснование;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ИндексСтруктурнаяЕдиница = ПроверяемыеРеквизиты.Найти("СтруктурнаяЕдиница");
	ПроверяемыеРеквизиты.Удалить(ИндексСтруктурнаяЕдиница);
	
	Если ХозОперация = Справочники.ХозОперации.ЗаявкаНаРасходСРС Тогда
		
		Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не выбран банковский счет заявки на расходование денежных средств.'"),
				ЭтотОбъект,
				"СтруктурнаяЕдиница",
				,
				Отказ
			);
		ИначеЕсли ВалютаДокумента <> СтруктурнаяЕдиница.ВалютаДенежныхСредств Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru='Валюта документа (<%1>) не соответствует валюте банковского счета (<%2>).'"), 
						ВалютаДокумента, СтруктурнаяЕдиница.ВалютаДенежныхСредств),
				ЭтотОбъект,
				, ,
				Отказ
			);
		КонецЕсли;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не выбрана касса заявки на расходование денежных средств.'"),
				ЭтотОбъект,
				"СтруктурнаяЕдиница",
				,
				Отказ
			);
		ИначеЕсли НЕ СтруктурнаяЕдиница.МноговалютнаяКасса И ВалютаДокумента <> СтруктурнаяЕдиница.ВалютаДенежныхСредств Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru='Валюта документа (<%1>) не соответствует валюте кассы компании (<%2>).'"), 
						ВалютаДокумента, СтруктурнаяЕдиница.ВалютаДенежныхСредств),
				ЭтотОбъект,
				, ,
				Отказ
			);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Собственно само проведение
	НаборЗаписей = Движения.ПлатежныйКалендарь;
	НаборЗаписей.ДокументОбъект = Ссылка;
	НаборЗаписей.Поступление	= Ложь;
	
	Если НЕ НаборЗаписей.План() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиЗаполненияОбъекта

// Производит заполнение объекта на основании документа "Счет от поставщика"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СчетОтПоставщика(
		ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Продолжать = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ Продолжать Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтруктурнаяЕдиница 	= ДанныеЗаполнения.РасчетныйСчетКонтрагента;
	СтатьяДДС 			= Справочники.СтатьиДДС.ОплатаПоставщику;
	
	// Производится заполнение реквизитов документа в зависимости от типа документа основания.
	// Создадим один платеж в табличной части, подставим в него сумму и дату документа основания.
	НовыйПлатеж 			= Платежи.Добавить();
	НовыйПлатеж.ДатаПлатежа = Дата;
	НовыйПлатеж.Сумма       = ДанныеЗаполнения.СуммаДокумента;
	
	Контрагент            	= ДанныеЗаполнения.Контрагент;
	ДоговорВзаиморасчетов 	= ДанныеЗаполнения.ДоговорВзаиморасчетов;

	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_СчетОтПоставщика()

// Производит заполнение объекта на основании документа "Заказ поставщику"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПоставщику(
		ДанныеЗаполнения,
		ТекстЗаполнения = "",
		СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Продолжать = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения, 
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ Продолжать Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтатьяДДС = Справочники.СтатьиДДС.ОплатаПоставщику;
	
	// Создадим один платеж в табличной части, подставим в него сумму и дату документа основания.
	НовыйПлатеж = Платежи.Добавить();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЗаказыПоставщикам.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|ГДЕ
	|	ЗаказыПоставщикам.Период <= &Момент
	|	И НЕ ЗаказыПоставщикам.Регистратор ССЫЛКА Документ.ПоступлениеТоваров
	|	И ЗаказыПоставщикам.ЗаказПоставщику = &ВыбЗаказПоставщику
	|	И ЗаказыПоставщикам.Контрагент = &ВыбКонтрагент";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Момент",             КонецДня(Дата));
	Запрос.УстановитьПараметр("ВыбКонтрагент",      Контрагент);
	Запрос.УстановитьПараметр("ВыбЗаказПоставщику", ДанныеЗаполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СуммаЗаказа = Запрос.Выполнить().Выгрузить()[0].Сумма;
	Иначе
		СуммаЗаказа = 0;
	КонецЕсли;
	
	НовыйПлатеж.ДатаПлатежа = Дата;
	НовыйПлатеж.Сумма       = СуммаЗаказа;
	Контрагент            	= ДанныеЗаполнения.Контрагент;
	ДоговорВзаиморасчетов 	= ДанныеЗаполнения.ДоговорВзаиморасчетов;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПоставщику()

// Производит заполнение объекта на основании документа "Поступление автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеАвтомобилей(
		ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Продолжать = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ Продолжать Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЗаявкаНаРасходИзКассы");
	СтатьяДДС = Справочники.СтатьиДДС.ОплатаПоставщику;
	
	// Производится заполнение реквизитов документа в зависимости от типа документа основания.
	// Создадим один платеж в табличной части, подставим в него сумму и дату документа основания.
	НовыйПлатеж             = Платежи.Добавить();
	НовыйПлатеж.ДатаПлатежа = Дата;
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Контрагент",            Контрагент);
	СтруктураОтбора.Вставить("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов);
	СтруктураОтбора.Вставить("ДокументРасчетов",      ДанныеЗаполнения);

	тзДолги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(СтруктураОтбора);
	
	Если ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("Сумма"),
			ДанныеЗаполнения.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, ДанныеЗаполнения.КурсДокумента,
			ВалютаДокумента, КурсДокумента);
	ИначеЕсли Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() = ВалютаДокумента Тогда
		ОстатокПоСделке = тзДолги.Итог("СуммаБаз");
	Иначе
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(тзДолги.Итог("СуммаУпр"),
			Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
			ДанныеЗаполнения.КурсВалютыУпр, ВалютаДокумента, КурсДокумента);
	КонецЕсли;
	
	ОстатокПоСделке = ?(ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияТоваров"), ОстатокПоСделке , -ОстатокПоСделке);
	ОстатокПоСделке = ?(ОстатокПоСделке < 0, 0, ОстатокПоСделке);
	
	НовыйПлатеж.Сумма = ОстатокПоСделке;
	
	Контрагент            = ДанныеЗаполнения.Контрагент;
	ДоговорВзаиморасчетов = ДанныеЗаполнения.ДоговорВзаиморасчетов;

	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта на основании документа "Поступление товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеТоваров(
		ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Продолжать = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ Продолжать Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЗаявкаНаРасходИзКассы");
	СтатьяДДС = Справочники.СтатьиДДС.ОплатаПоставщику;
		
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Контрагент",            Контрагент);
	СтруктураОтбора.Вставить("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов);
	СтруктураОтбора.Вставить("ДокументРасчетов",      ДанныеЗаполнения);

	ТзДолги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(СтруктураОтбора);
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДанныеЗаполнения,
		"ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, КурсДокумента, КурсВалютыУпр"
		);
	
	Если ЗначенияРеквизитов.ДоговорВзаиморасчетовВалютаВзаиморасчетов = ВалютаДокумента Тогда
		
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ТзДолги.Итог("Сумма"),
			ЗначенияРеквизитов.ДоговорВзаиморасчетовВалютаВзаиморасчетов,
			ЗначенияРеквизитов.КурсДокумента,
			ВалютаДокумента,
			КурсДокумента
		);
		
	ИначеЕсли Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() = ВалютаДокумента Тогда
		
		ОстатокПоСделке = ТзДолги.Итог("СуммаБаз");
		
	Иначе
		
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ТзДолги.Итог("СуммаУпр"),
			Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
			ЗначенияРеквизитов.КурсВалютыУпр,
			ВалютаДокумента,
			КурсДокумента
		);
		
	КонецЕсли;
	
	ОстатокПоСделке = -ОстатокПоСделке;
	ОстатокПоСделке = ?(ОстатокПоСделке < 0, 0, ОстатокПоСделке);
	
	НовыйПлатеж             = Платежи.Добавить();
	НовыйПлатеж.ДатаПлатежа = Дата;
	НовыйПлатеж.Сумма       = ОстатокПоСделке;
	
	Контрагент            = ДанныеЗаполнения.Контрагент;
	ДоговорВзаиморасчетов = ДанныеЗаполнения.ДоговорВзаиморасчетов;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта на основании документа "Реализация товаров"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РеализацияТоваров(
		ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Продолжать = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ Продолжать Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЗаявкаНаРасходИзКассы");
	СтатьяДДС = Справочники.СтатьиДДС.ВозвратПокупателю;
	
	// Производится заполнение реквизитов документа в зависимости от типа документа основания.
	// Создадим один платеж в табличной части, подставим в него сумму и дату документа основания.
	НовыйПлатеж             = Платежи.Добавить();
	НовыйПлатеж.ДатаПлатежа = Дата;
	НовыйПлатеж.Сумма       = ДанныеЗаполнения.СуммаДокумента;
	
	Контрагент            = ДанныеЗаполнения.Контрагент;
	ДоговорВзаиморасчетов = ДанныеЗаполнения.ДоговорВзаиморасчетов;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РеализацияТоваров()

// Производит заполнение объекта на основании документа "Заказ покупателя"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПокупателя(
		ДанныеЗаполнения,
		ТекстЗаполнения = "",
		СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Продолжать = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ Продолжать Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЗаявкаНаРасходИзКассы");
	СтатьяДДС = Справочники.СтатьиДДС.ВозвратПокупателю;
	
	// Производится заполнение реквизитов документа в зависимости от типа документа основания.
	// Создадим один платеж в табличной части, подставим в него сумму и дату документа основания с учетом корректировок.
	НовыйПлатеж             = Платежи.Добавить();
	НовыйПлатеж.ДатаПлатежа = Дата;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЗаказыПокупателей.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
	|ГДЕ
	|	ЗаказыПокупателей.Период <= &Момент
	|	И НЕ ЗаказыПокупателей.Регистратор ССЫЛКА Документ.РеализацияТоваров
	|	И ЗаказыПокупателей.Контрагент = &Контрагент
	|	И ЗаказыПокупателей.Заказ = &Заказ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Момент", КонецДня(Дата));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Заказ", ДанныеЗаполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СуммаЗаказа = Запрос.Выполнить().Выгрузить()[0].Сумма;
	Иначе
		СуммаЗаказа = 0;
	КонецЕсли;
	
	НовыйПлатеж.Сумма = СуммаЗаказа;
	
	Контрагент = ДанныеЗаполнения.Контрагент;
	ДоговорВзаиморасчетов = ДанныеЗаполнения.ДоговорВзаиморасчетов;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПокупателя()

// Производит заполнение объекта на основании документа "Реализация автомобилей"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РеализацияАвтомобилей(
		ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Продолжать = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ Продолжать Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЗаявкаНаРасходИзКассы");
	СтатьяДДС = Справочники.СтатьиДДС.ВозвратПокупателю;
	
	// Производится заполнение реквизитов документа в зависимости от типа документа основания.
	// Создадим один платеж в табличной части, подставим в него сумму и дату документа основания.
	НовыйПлатеж             = Платежи.Добавить();
	НовыйПлатеж.ДатаПлатежа = Дата;
	НовыйПлатеж.Сумма       = ДанныеЗаполнения.СуммаДокумента;
	
	Контрагент            = ДанныеЗаполнения.Контрагент;
	ДоговорВзаиморасчетов = ДанныеЗаполнения.ДоговорВзаиморасчетов;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_РеализацияАвтомобилей()

// Производит заполнение объекта на основании документа "Заказ на автомобиль"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаАвтомобиль(
		ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Продолжать = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ Продолжать Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЗаявкаНаРасходИзКассы");
	СтатьяДДС = Справочники.СтатьиДДС.ВозвратПокупателю;
	
	// Производится заполнение реквизитов документа в зависимости от типа документа основания.
	// Создадим один платеж в табличной части, подставим в него сумму и дату документа основания.
	НовыйПлатеж             = Платежи.Добавить();
	НовыйПлатеж.ДатаПлатежа = Дата;
	НовыйПлатеж.Сумма       = ДанныеЗаполнения.СуммаДокумента;
	
	Контрагент            = ДанныеЗаполнения.Контрагент;
	ДоговорВзаиморасчетов = ДанныеЗаполнения.ДоговорВзаиморасчетов;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаАвтомобиль()

// Производит заполнение объекта на основании документа "Заказ-наряд"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказНаряд(
		ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Продолжать = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ Продолжать Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЗаявкаНаРасходИзКассы");
	СтатьяДДС = Справочники.СтатьиДДС.ВозвратПокупателю;
	
	// Производится заполнение реквизитов документа в зависимости от типа документа основания.
	// Создадим один платеж в табличной части, подставим в него сумму и дату документа основания.
	НовыйПлатеж             = Платежи.Добавить();
	НовыйПлатеж.ДатаПлатежа = Дата;
	НовыйПлатеж.Сумма       = ДанныеЗаполнения.СуммаДокумента;
	
	Контрагент            = ДанныеЗаполнения.Контрагент;
	ДоговорВзаиморасчетов = ДанныеЗаполнения.ДоговорВзаиморасчетов;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказНаряд()

// Производит заполнение объекта на основании документа "Счет от поставщика за автомобили".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СчетОтПоставщикаЗаАвтомобили(
		ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Возвращаем заполнение по счету от поставщика
	Возврат ОбработкаЗаполнения_СчетОтПоставщика(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_СчетОтПоставщикаЗаАвтомобили()

// Производит заполнение объекта на основании документа "Заказ поставщику на автомобиль".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаказПоставщикуНаАвтомобиль(
		ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производится проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Продолжать = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения, 
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ Продолжать Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтатьяДДС = Справочники.СтатьиДДС.ОплатаПоставщику;
	
	// Производится заполнение реквизитов документа в зависимости от типа документа основания.
	// Создадим один платеж в табличной части, подставим в него сумму и дату документа основания.
	НовыйПлатеж 			= Платежи.Добавить();
	НовыйПлатеж.ДатаПлатежа = Дата;
	НовыйПлатеж.Сумма       = ДанныеЗаполнения.СуммаДокумента;
	
	Контрагент            	= ДанныеЗаполнения.Контрагент;
	ДоговорВзаиморасчетов 	= ДанныеЗаполнения.ДоговорВзаиморасчетов;

	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_ЗаказПоставщикуНаАвтомобиль()

// Производит заполнение объекта на основании документа "Счет на оплату"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СчетНаОплату(
		ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Продолжать = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ Продолжать Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЗаявкаНаРасходИзКассы");
	СтатьяДДС = Справочники.СтатьиДДС.ВозвратПокупателю;
	
	// Производится заполнение реквизитов документа в зависимости от типа документа основания.
	// Создадим один платеж в табличной части, подставим в него сумму и дату документа основания.
	НовыйПлатеж 			= Платежи.Добавить();
	НовыйПлатеж.ДатаПлатежа = Дата;
	НовыйПлатеж.Сумма       = ДанныеЗаполнения.СуммаДокумента;
	
	Контрагент            	= ДанныеЗаполнения.Контрагент;
	ДоговорВзаиморасчетов 	= ДанныеЗаполнения.ДоговорВзаиморасчетов;
	
	// Онлайн-оплата
	Если ДанныеЗаполнения.ОплатаОнлайн
		И (ТипЗнч(ДокументОснование) = Тип ("ДокументСсылка.СчетНаОплату")
		ИЛИ ТипЗнч(ДокументОснование) = Тип ("ДокументСсылка.СчетНаОплатуЗаАвтомобили")) Тогда
		
		ВозвратПоСчету = ДокументОснование;
		Документы.ЗаявкаНаРасходДС.ВозвратПоСчетуПриИзменении(ЭтотОбъект);
		
	КонецЕсли;
	// Конец Онлайн-оплата
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_СчетНаОплату()

// Производит заполнение объекта на основании документа "Счет на оплату за автомобили".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СчетНаОплатуЗаАвтомобили(
		ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт
	
	// Возвращаем заполнение по счету от поставщика
	Возврат ОбработкаЗаполнения_СчетНаОплату(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_СчетНаОплатуЗаАвтомобили()

// Производит заполнение объекта на основании документа "Отчет комитенту".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ОтчетКомитенту(
		ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт
	
	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Продолжать = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ Продолжать Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЗаявкаНаРасходИзКассы");
	СтатьяДДС = Справочники.СтатьиДДС.ОплатаПоставщику;
	
	// Производится заполнение реквизитов документа в зависимости от типа документа основания.
	// Создадим один платеж в табличной части, подставим в него сумму и дату документа основания.
	НовыйПлатеж             = Платежи.Добавить();
	НовыйПлатеж.ДатаПлатежа = Дата;
	НовыйПлатеж.Сумма       = ДанныеЗаполнения.СуммаДокумента - ДанныеЗаполнения.СуммаВознаграждения;
	
	Контрагент            = ДанныеЗаполнения.Контрагент;
	ДоговорВзаиморасчетов = ДанныеЗаполнения.ДоговорВзаиморасчетов;

	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции // ОбработкаЗаполнения_СчетНаОплатуЗаАвтомобили()

// Производит заполнение объекта на основании документа "Отчет комитенту за автомобили".
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ОтчетКомитентуЗаАвтомобили(
		ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт
	
	Возврат ОбработкаЗаполнения_ОтчетКомитенту(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецФункции // ОбработкаЗаполнения_СчетНаОплатуЗаАвтомобили()

// Производит заполнение объекта на основании документа "Поступление доп. расходов"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ПоступлениеДопРасходов(
		ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Продолжать = ОбработкаСобытийДокументаСервер.ОбработкаЗаполненияНаОсновании(
		ЭтотОбъект,
		ДанныеЗаполнения,
		ТекстЗаполнения,
		СтандартнаяОбработка
	);
	Если НЕ Продолжать Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХозОперация = ПредопределенноеЗначение("Справочник.ХозОперации.ЗаявкаНаРасходИзКассы");
	СтатьяДДС = Справочники.СтатьиДДС.ОплатаПоставщику;
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Контрагент",            Контрагент);
	СтруктураОтбора.Вставить("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов);
	СтруктураОтбора.Вставить("ДокументРасчетов",      ДанныеЗаполнения);
	
	ТзДолги = РасчетыСКонтрагентамиСервер.ВзаиморасчетыСКонтрагентомПоОтбору(СтруктураОтбора);
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДанныеЗаполнения,
		"ДоговорВзаиморасчетов.ВалютаВзаиморасчетов, КурсДокумента, КурсВалютыУпр"
		);
	
	Если ЗначенияРеквизитов.ДоговорВзаиморасчетовВалютаВзаиморасчетов = ВалютаДокумента Тогда
		
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ТзДолги.Итог("Сумма"),
			ЗначенияРеквизитов.ДоговорВзаиморасчетовВалютаВзаиморасчетов,
			ЗначенияРеквизитов.КурсДокумента,
			ВалютаДокумента,
			КурсДокумента
		);
		
	ИначеЕсли Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить() = ВалютаДокумента Тогда
		
		ОстатокПоСделке = ТзДолги.Итог("СуммаБаз");
		
	Иначе
		
		ОстатокПоСделке = РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
			ТзДолги.Итог("СуммаУпр"),
			Константы.ВалютаУправленческогоУчетаКомпании.Получить(),
			ЗначенияРеквизитов.КурсВалютыУпр,
			ВалютаДокумента,
			КурсДокумента
		);
		
	КонецЕсли;
	
	ОстатокПоСделке = -ОстатокПоСделке;
	ОстатокПоСделке = ?(ОстатокПоСделке < 0, 0, ОстатокПоСделке);
	
	НовыйПлатеж             = Платежи.Добавить();
	НовыйПлатеж.ДатаПлатежа = Дата;
	НовыйПлатеж.Сумма       = ОстатокПоСделке;
	
	Контрагент            = ДанныеЗаполнения.Контрагент;
	ДоговорВзаиморасчетов = ДанныеЗаполнения.ДоговорВзаиморасчетов;

	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
