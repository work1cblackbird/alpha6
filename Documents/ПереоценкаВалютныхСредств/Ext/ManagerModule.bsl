// Модуль менеджера документа "Переоценка валютных средств"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. 
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные=ЛОЖЬ) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	ИтогиОперации.Вставить("СуммаДокумента", Объект.СуммаДокумента);
		
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты=Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ПроведениеДокумента

Процедура ИнициализироватьДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры) Экспорт
	
	ОбработкаСобытийДокументаСервер.ДанныеДокументаДляПроведения(Объект, ДополнительныеПараметры);
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"БалансВедетсяПоОрганизациям",
		БалансВедетсяПоОрганизациям(Объект.Дата));
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"БалансВедетсяПоПодразделениям",
		БалансВедетсяПоПодразделениям(Объект.Дата));
	ДополнительныеПараметры.ДляПроведения.Вставить(
		"РегламентноеСписаниеСуммовыхРазниц",
		УчетныеПолитикиСервер.Значение(
			"РежимСписанияСуммовыхРазниц",
			Объект.Дата) = Перечисления.РежимыРегламентныхОпераций.Регламентно);
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчетаКомпании.Получить();
	
	СуммовыеИКурсовыеРазницы = Новый ТаблицаЗначений;
	СуммовыеИКурсовыеРазницы.Колонки.Добавить("Подразделение",      Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
	СуммовыеИКурсовыеРазницы.Колонки.Добавить("СуммоваяРазницаУпр", Новый ОписаниеТипов("Число"));
	СуммовыеИКурсовыеРазницы.Колонки.Добавить("КурсоваяРазницаУпр", Новый ОписаниеТипов("Число"));
	ДополнительныеПараметры.ДляПроведения.Вставить("СуммовыеИКурсовыеРазницы", СуммовыеИКурсовыеРазницы);
	
	ДанныеДокумента = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ДанныеДокумента;
	Запрос.УстановитьПараметр("ВалютаРегл", ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаУпр", ВалютаУпр);
	Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый Граница(ДополнительныеПараметры.ДляПроведения.Дата, ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПереоценкаВалютныхСредств.Организация КАК Организация,
	|	ПереоценкаВалютныхСредств.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ПереоценкаВалютныхСредств.Ссылка КАК Ссылка,
	|	ПереоценкаВалютныхСредств.Дата КАК Дата,
	|	ПереоценкаВалютныхСредств.ХозОперация КАК ХозОперация,
	|	ПереоценкаВалютныхСредств.СтатьяДДС КАК СтатьяДДС,
	|	ПереоценкаВалютныхСредств.КурсовыеРазницыВзаиморасчетыКомпании КАК КурсовыеРазницыВзаиморасчетыКомпании,
	|	ПереоценкаВалютныхСредств.КурсовыеРазницыДенежныеСредстваКомпании КАК КурсовыеРазницыДенежныеСредстваКомпании,
	|	ПереоценкаВалютныхСредств.СуммовыеРазницы КАК СуммовыеРазницы,
	|	ПереоценкаВалютныхСредств.КурсовыеРазницыКассыККМ КАК КурсовыеРазницыКассыККМ,
	|	ПереоценкаВалютныхСредств.ВалютаДокумента КАК ВалютаДокумента,
	|	ПереоценкаВалютныхСредств.КурсДокумента КАК КурсДокумента,
	|	ПереоценкаВалютныхСредств.КурсВалютыУпр КАК КурсВалютыУпр,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.НеЗачитывать) КАК СпособЗачетаАвансов,
	|	&ВалютаРегл КАК ВалютаРегл,
	|	&ВалютаУпр КАК ВалютаУпр
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.ПереоценкаВалютныхСредств КАК ПереоценкаВалютныхСредств
	|ГДЕ
	|	ПереоценкаВалютныхСредств.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ХозОперация КАК ХозОперация,
	|	ДанныеДокумента.СтатьяДДС КАК СтатьяДДС,
	|	ДанныеДокумента.КурсовыеРазницыВзаиморасчетыКомпании КАК КурсовыеРазницыВзаиморасчетыКомпании,
	|	ДанныеДокумента.КурсовыеРазницыДенежныеСредстваКомпании КАК КурсовыеРазницыДенежныеСредстваКомпании,
	|	ДанныеДокумента.СуммовыеРазницы КАК СуммовыеРазницы,
	|	ДанныеДокумента.КурсовыеРазницыКассыККМ КАК КурсовыеРазницыКассыККМ,
	|	ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеДокумента.КурсДокумента КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КурсВалютыУпр = 0
	|			ТОГДА ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Кратность, 1)
	|		ИНАЧЕ ДанныеДокумента.КурсВалютыУпр
	|	КОНЕЦ КАК КурсВалютыУпр,
	|	ДанныеДокумента.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	ДанныеДокумента.ВалютаРегл КАК ВалютаРегл,
	|	ДанныеДокумента.ВалютаУпр КАК ВалютаУпр,
	|	ЕСТЬNULL(КурсыВалютРегл.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Кратность, 1) КАК КурсВалютыРегл
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО ДанныеДокумента.ВалютаУпр = КурсыВалютУпр.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	|		ПО ДанныеДокумента.ВалютаРегл = КурсыВалютРегл.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДокумента";
	
	Запрос.Выполнить();
	
	ДополнительныеПараметры.ДляПроведения.Вставить("ДанныеДокумента", ДанныеДокумента);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыСКонтрагентами(ДвиженияДокумента, Отказ) Экспорт
	
	РасчетыСКонтрагентами = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("РасчетыСКонтрагентами");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.УстановитьПараметр(
		"МоментВремени",
		Новый МоментВремени(ДвиженияДокумента.ДляПроведения.Дата, ДвиженияДокумента.ДляПроведения.Ссылка));
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.Дата КАК Дата,
	|	Задолженность.ХозОперация КАК ХозОперация,
	|	Задолженность.СтатьяДДС КАК СтатьяДДС,
	|	Задолженность.КурсовыеРазницыВзаиморасчетыКомпании КАК КурсовыеРазницыВзаиморасчетыКомпании,
	|	Задолженность.КурсовыеРазницыДенежныеСредстваКомпании КАК КурсовыеРазницыДенежныеСредстваКомпании,
	|	Задолженность.СуммовыеРазницы КАК СуммовыеРазницы,
	|	Задолженность.КурсовыеРазницыКассыККМ КАК КурсовыеРазницыКассыККМ,
	|	Задолженность.ВалютаДокумента КАК ВалютаДокумента,
	|	Задолженность.КурсДокумента КАК КурсДокумента,
	|	Задолженность.КурсВалютыУпр КАК КурсВалютыУпр,
	|	Задолженность.КурсВалютыРегл КАК КурсВалютыРегл,
	|	Задолженность.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	|	Задолженность.ВалютаРегл КАК ВалютаРегл,
	|	Задолженность.ВалютаУпр КАК ВалютаУпр
	|ИЗ
	|	Задолженность КАК Задолженность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Организация КАК Организация,
	|	РасчетыСКонтрагентамиОстатки.Контрагент КАК Контрагент,
	|	РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов.ПодразделениеКомпании КАК ПодразделениеКомпанииДоговора,
	|	РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	РасчетыСКонтрагентамиОстатки.ТипРасчета КАК ТипРасчета,
	|	РасчетыСКонтрагентамиОстатки.ДокументРасчетов КАК ДокументРасчетов,
	|	РасчетыСКонтрагентамиОстатки.Заказ КАК Заказ,
	|	ЕСТЬNULL(РасчетыСКонтрагентамиОстатки.СуммаОстаток, 0) КАК Сумма,
	|	ЕСТЬNULL(РасчетыСКонтрагентамиОстатки.СуммаУпрОстаток, 0) КАК СуммаУпр,
	|	ЕСТЬNULL(РасчетыСКонтрагентамиОстатки.СуммаБазОстаток, 0) КАК СуммаБаз,
	|	ЕСТЬNULL(КурсыВалют.Курс, 0) / ЕСТЬNULL(КурсыВалют.Кратность, 1) КАК КурсВалютыДоговора
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(
	|			&МоментВремени,
	|			#УсловиеОтбораРасчетов) КАК РасчетыСКонтрагентамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|		ПО РасчетыСКонтрагентамиОстатки.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов = КурсыВалют.Валюта";
	
	Если ДвиженияДокумента.ДляПроведения.БалансВедетсяПоОрганизациям Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#УсловиеОтбораРасчетов",
			"Организация В
		|				(ВЫБРАТЬ
		|					Задолженность.Организация КАК Организация
		|				ИЗ
		|					Задолженность КАК Задолженность)");
	ИначеЕсли ДвиженияДокумента.ДляПроведения.БалансВедетсяПоПодразделениям Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#УсловиеОтбораРасчетов",
			"ДоговорВзаиморасчетов.ПодразделениеКомпании В
		|				(ВЫБРАТЬ
		|					Задолженность.ПодразделениеКомпании КАК ПодразделениеКомпании
		|				ИЗ
		|					Задолженность КАК Задолженность)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#УсловиеОтбораРасчетов", "");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	// Наложим блокировку на считываемые данные
	СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "РасчетыСКонтрагентами");
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ДвиженияДокумента.ДляПроведения.Дата));
	ОбработкаСобытийДокументаСервер.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	ДанныеОбОплате = ПакетЗапроса[0].Выбрать();
	ОстакиПоРасчетам = ПакетЗапроса[1].Выгрузить();
	
	Если Не ДанныеОбОплате.Следующий() Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	// Суммовые разницы
	Если ДвиженияДокумента.ДляПроведения.РегламентноеСписаниеСуммовыхРазниц
		И ДанныеОбОплате.СуммовыеРазницы Тогда
		
		ОтборСтрок = Новый Структура("Сумма", 0);
		ПолнаяОплата = ОстакиПоРасчетам.НайтиСтроки(ОтборСтрок);
		
		Для Каждого СтрокаОплаты Из ПолнаяОплата Цикл
			
			Если СтрокаОплаты.СуммаУпр <> 0 Тогда
				
				НоваяЗапись = РасчетыСКонтрагентами.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаОплаты);
				НоваяЗапись.Период = ДанныеОбОплате.Дата;
				НоваяЗапись.Регистратор = ДанныеОбОплате.Ссылка;
				
				Если СтрокаОплаты.СуммаУпр > 0 Тогда
					НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
					НоваяЗапись.СуммаУпр = Окр(СтрокаОплаты.СуммаУпр, 2);
				Иначе
					НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
					НоваяЗапись.СуммаУпр = Окр(-СтрокаОплаты.СуммаУпр, 2);
				КонецЕсли;
				
				НоваяЗапись.Сумма = 0;
				НоваяЗапись.СуммаБаз = 0;
				НоваяЗапись.ХозОперация = ДанныеОбОплате.ХозОперация;
				НоваяЗапись.ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.СписаниеКурсовойРазницыУпрВалюты;
				НоваяЗапись.Активность = Истина;
				
				НоваяСтрока = ДвиженияДокумента.ДляПроведения.СуммовыеИКурсовыеРазницы.Добавить();
				НоваяСтрока.Подразделение      = СтрокаОплаты.ПодразделениеКомпанииДоговора;
				НоваяСтрока.СуммоваяРазницаУпр = ?(СтрокаОплаты.СуммаУпр < 0, НоваяЗапись.СуммаУпр, -НоваяЗапись.СуммаУпр);
				
			КонецЕсли;
			
			Если СтрокаОплаты.СуммаБаз <> 0 Тогда
				
				НоваяЗапись = РасчетыСКонтрагентами.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаОплаты);
				НоваяЗапись.Период = ДанныеОбОплате.Дата;
				НоваяЗапись.Регистратор = ДанныеОбОплате.Ссылка;
				
				Если СтрокаОплаты.СуммаБаз > 0 Тогда
					НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
					НоваяЗапись.СуммаБаз = Окр(СтрокаОплаты.СуммаБаз, 2);
				Иначе
					НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
					НоваяЗапись.СуммаБаз = Окр(-СтрокаОплаты.СуммаБаз, 2);
				КонецЕсли;
				
				НоваяЗапись.Сумма = 0;
				НоваяЗапись.СуммаУпр = 0;
				НоваяЗапись.ХозОперация = ДанныеОбОплате.ХозОперация;
				НоваяЗапись.ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.СписаниеКурсовойРазницыБазВалюты;
				НоваяЗапись.Активность = Истина;
				
			КонецЕсли;
			
			ОстакиПоРасчетам.Удалить(СтрокаОплаты);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ДанныеОбОплате.КурсовыеРазницыВзаиморасчетыКомпании Тогда
		
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
		Возврат;
		
	КонецЕсли;
	
	Для Каждого СтрокаРасчета Из ОстакиПоРасчетам Цикл
		
		// Для авансов пересчет курсовой разницы не производится.
		Если СтрокаРасчета.ТипРасчета = Перечисления.ТипыРасчетов.Аванс Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаПереоценкиУпр = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СтрокаРасчета.Сумма,
				СтрокаРасчета.ВалютаВзаиморасчетов,
				СтрокаРасчета.КурсВалютыДоговора,
				ДанныеОбОплате.ВалютаУпр,
				ДанныеОбОплате.КурсВалютыУпр) - СтрокаРасчета.СуммаУпр, 2);
		
		Если СуммаПереоценкиУпр <> 0 Тогда
			НоваяЗапись = РасчетыСКонтрагентами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаРасчета);
			НоваяЗапись.Период = ДанныеОбОплате.Дата;
			НоваяЗапись.Регистратор = ДанныеОбОплате.Ссылка;
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяЗапись.СуммаУпр = СуммаПереоценкиУпр;
			НоваяЗапись.Сумма = 0;
			НоваяЗапись.СуммаБаз = 0;
			НоваяЗапись.ХозОперация = ДанныеОбОплате.ХозОперация;
			НоваяЗапись.ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.СписаниеКурсовойРазницыУпрВалюты;
			НоваяЗапись.Активность = Истина;
			
			НоваяСтрока = ДвиженияДокумента.ДляПроведения.СуммовыеИКурсовыеРазницы.Добавить();
			НоваяСтрока.Подразделение      = СтрокаРасчета.ПодразделениеКомпанииДоговора;
			НоваяСтрока.КурсоваяРазницаУпр = СтрокаРасчета.СуммаУпр;
		КонецЕсли;
		
		СуммаПереоценки = Окр(
			РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(
				СтрокаРасчета.Сумма,
				СтрокаРасчета.ВалютаВзаиморасчетов,
				СтрокаРасчета.КурсВалютыДоговора,
				ДанныеОбОплате.ВалютаРегл,
				ДанныеОбОплате.КурсВалютыРегл) - СтрокаРасчета.СуммаБаз, 2);
		
		Если СуммаПереоценки <> 0 Тогда
			НоваяЗапись = РасчетыСКонтрагентами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаРасчета);
			НоваяЗапись.Период = ДанныеОбОплате.Дата;
			НоваяЗапись.Регистратор = ДанныеОбОплате.Ссылка;
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяЗапись.СуммаУпр = 0;
			НоваяЗапись.Сумма = 0;
			НоваяЗапись.СуммаБаз = СуммаПереоценки;
			НоваяЗапись.ХозОперация = ДанныеОбОплате.ХозОперация;
			НоваяЗапись.ВидОперации = Перечисления.ВидыОперацийВзаиморасчетов.СписаниеКурсовойРазницыБазВалюты;
			НоваяЗапись.Активность = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	
КонецПроцедуры

Процедура СформироватьТаблицуДоходыИРасходы(ДвиженияДокумента) Экспорт
	
	ДоходыИРасходы = ОбработкаСобытийДокументаСервер.ИнициализироватьТаблицуРегистра("ДоходыИРасходы");
	
	СуммовыеИКурсовыеРазницы = ПолучитьЗначениеПараметраСтруктуры(
		ДвиженияДокумента.ДляПроведения,
		"СуммовыеИКурсовыеРазницы",
		Новый ТаблицаЗначений);
		
	Если СуммовыеИКурсовыеРазницы.Количество() = 0 Тогда
		ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("ДоходыИРасходы", ДоходыИРасходы);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДвиженияДокумента.ДляПроведения.ДанныеДокумента;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеДокументаОплаты.Ссылка КАК Ссылка,
	|	ДанныеДокументаОплаты.Дата КАК Дата,
	|	ДанныеДокументаОплаты.Организация КАК Организация,
	|	ДанныеДокументаОплаты.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ДанныеДокументаОплаты.ХозОперация КАК ХозОперация
	|ИЗ
	|	Задолженность КАК ДанныеДокументаОплаты";
	
	ДанныеЗаполнения = Запрос.Выполнить().Выбрать();
	ДанныеЗаполнения.Следующий();
	
	СуммовыеРазницы = РегистрыНакопления.РасчетыСКонтрагентами.ИнициализацияСуммовыхРазниц();
	
	Если ДвиженияДокумента.ДляПроведения.БалансВедетсяПоОрганизациям Тогда
		
		// Если баланс ведется по организации, то движения по регистру "Доходы и расходы"
		// выполняются на итоговые суммы по подразделению документа.
		СуммоваяРазницаИтого = СуммовыеИКурсовыеРазницы.Итог("СуммоваяРазницаУпр");
		КурсоваяРазницаИтого = СуммовыеИКурсовыеРазницы.Итог("КурсоваяРазницаУпр");
		
		// доходы и расходы списания суммовых разниц
		Если СуммоваяРазницаИтого <> 0 Тогда
			
			НоваяСтрока = СуммовыеРазницы.Добавить();
			НоваяСтрока.Подразделение = ДанныеЗаполнения.ПодразделениеКомпании;
			НоваяСтрока.СуммаУпр = СуммоваяРазницаИтого;
			
			РегистрыНакопления.ДоходыИРасходы.ЗаполнитьСуммовыеРазницы(
				ДанныеЗаполнения,
				СуммовыеРазницы,
				ДоходыИРасходы,
				ДанныеЗаполнения.ПодразделениеКомпании);
			
		КонецЕсли;
		
		// доходы и расходы списания курсовых разниц
		Если КурсоваяРазницаИтого <> 0 Тогда
			
			СуммовыеРазницы.Очистить();
			НоваяСтрока = СуммовыеРазницы.Добавить();
			НоваяСтрока.Подразделение = ДанныеЗаполнения.ПодразделениеКомпании;
			НоваяСтрока.СуммаУпр = КурсоваяРазницаИтого;
			
			РегистрыНакопления.ДоходыИРасходы.ЗаполнитьСуммовыеРазницы(
				ДанныеЗаполнения,
				СуммовыеРазницы,
				ДоходыИРасходы,
				ДанныеЗаполнения.ПодразделениеКомпании,
				Справочники.СтатьиДДС.КурсовыеРазницы);
			
		КонецЕсли;
		
	Иначе
		
		// Если баланс ведется по подразделениям или по компании, то движения по регистру "Доходы и расходы"
		// Необходимо выполнять в разрезе подразделений.
		СуммовыеИКурсовыеРазницы.Свернуть("Подразделение", "СуммоваяРазницаУпр, КурсоваяРазницаУпр");
		
		Для Каждого СтрокаРазницы Из СуммовыеИКурсовыеРазницы Цикл
			
			// Доходы и расходы списания суммовых разниц
			Если СтрокаРазницы.СуммоваяРазницаУпр <> 0 Тогда
				
				СуммовыеРазницы.Очистить();
				НоваяСтрока = СуммовыеРазницы.Добавить();
				НоваяСтрока.Подразделение = ДанныеЗаполнения.ПодразделениеКомпании;
				НоваяСтрока.СуммаУпр = СуммоваяРазницаИтого;
				
				РегистрыНакопления.ДоходыИРасходы.ЗаполнитьСуммовыеРазницы(
					ДанныеЗаполнения,
					СуммовыеРазницы,
					ДоходыИРасходы,
					СтрокаРазницы.Подразделение);
				
			КонецЕсли;
			
			// Доходы и расходы списания курсовых разниц
			Если СтрокаРазницы.КурсоваяРазницаУпр <> 0 Тогда
				
				СуммовыеРазницы.Очистить();
				НоваяСтрока = СуммовыеРазницы.Добавить();
				НоваяСтрока.Подразделение = ДанныеЗаполнения.ПодразделениеКомпании;
				НоваяСтрока.СуммаУпр = СуммоваяРазницаИтого;
				
				РегистрыНакопления.ДоходыИРасходы.ЗаполнитьСуммовыеРазницы(
					ДанныеЗаполнения,
					СуммовыеРазницы,
					ДоходыИРасходы,
					СтрокаРазницы.Подразделение,
					Справочники.СтатьиДДС.КурсовыеРазницы);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДвиженияДокумента.ТаблицыДвиженийДокумента.Вставить("ДоходыИРасходы", ДоходыИРасходы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", ИСТИНА);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДатаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДокументОснованиеПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия=Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ПереоценкаВалютныхСредств);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли