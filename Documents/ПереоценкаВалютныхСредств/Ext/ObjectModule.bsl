// Модуль документа "Переоценка валютных средств"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения="", СтандартнаяОбработка=ИСТИНА)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		
		ДокументОснование 	= ДанныеЗаполнения;
		// Вычислим сумму
		СуммаДокумента 		= РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(ДанныеЗаполнения.СуммаДокумента,ДанныеЗаполнения.ВалютаДокумента,ДанныеЗаполнения.КурсДокумента,ВалютаДокумента,Дата);
		// Статья ДДС - Оплата от покупателя
		СтатьяДДС			= Справочники.СтатьиДДС.ОплатаПоставщику;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоРасчетамСКонтрагентамиПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Определим, ведется ли баланс по организациям.
	БалансВедетсяПоОрганизациям   = БалансВедетсяПоОрганизациям(Дата);
	БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(Дата);
	
	// Разбираемся с суммовыми разницами
	// Для списания курсовых и суммовых разниц задействуем таблицу значений.
	ТаблицаСуммовыхИКурсовыхРазниц = Новый ТаблицаЗначений;
	ТаблицаСуммовыхИКурсовыхРазниц.Колонки.Добавить("Подразделение",      Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
	ТаблицаСуммовыхИКурсовыхРазниц.Колонки.Добавить("СуммоваяРазницаУпр", Новый ОписаниеТипов("Число"));
	ТаблицаСуммовыхИКурсовыхРазниц.Колонки.Добавить("КурсоваяРазницаУпр", Новый ОписаниеТипов("Число"));
	
	Регламентно = (УчетныеПолитикиСервер.Значение("РежимСписанияСуммовыхРазниц",Дата) = Перечисления.РежимыРегламентныхОпераций.Регламентно);
	Если СуммовыеРазницы И Регламентно Тогда
		НаборЗаписейВзаиморасчеты=Движения.ВзаиморасчетыКомпании;
		НаборЗаписейВзаиморасчеты.ДокументОбъект  = ЭтотОбъект;
		НаборЗаписейВзаиморасчеты.РежимПроведения = РежимПроведения;
		НаборЗаписейВзаиморасчеты.Контрагент      = Неопределено;
		НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов = Неопределено;
		НаборЗаписейВзаиморасчеты.Сделка = Неопределено;
		НаборЗаписейВзаиморасчеты.Сумма  = 0;
		НаборЗаписейВзаиморасчеты.Валюта = Неопределено;
		НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц = 0;
		
		// В набор записей передаем созданную таблицу через предопределенное свойство "ДополнительныеСвойства".
		// После отработки функции модуля набора записей, эта таблица будет заполнена соответствующими движениями.
		НаборЗаписейВзаиморасчеты.ДополнительныеСвойства.Вставить("ТаблицаДвижений", ТаблицаСуммовыхИКурсовыхРазниц);
		
		Если БалансВедетсяПоПодразделениям Тогда
			НаборЗаписейВзаиморасчеты.ДополнительныеСвойства.Вставить("ФильтрПоПодразделению", ПодразделениеКомпании);
		ИначеЕсли БалансВедетсяПоОрганизациям Тогда
			НаборЗаписейВзаиморасчеты.ДополнительныеСвойства.Вставить("ФильтрПоОрганизации", Организация);		
		КонецЕсли;
		
		Отказ = НЕ НаборЗаписейВзаиморасчеты.СписаниеСуммовыхРазниц() ИЛИ Отказ; 		
	КонецЕсли;
	
	// разбираемся с курсовыми разницами
	СуммаДоходаРасходаКурсовыхРазниц=0;
	Если КурсовыеРазницыВзаиморасчетыКомпании Тогда
		НаборЗаписейВзаиморасчеты=Движения.ВзаиморасчетыКомпании;
		НаборЗаписейВзаиморасчеты.ДокументОбъект  = ЭтотОбъект;
		НаборЗаписейВзаиморасчеты.РежимПроведения = РежимПроведения;
		НаборЗаписейВзаиморасчеты.Контрагент      = Неопределено;
		НаборЗаписейВзаиморасчеты.ДоговорВзаиморасчетов = Неопределено;
		НаборЗаписейВзаиморасчеты.Сделка = Неопределено;
		НаборЗаписейВзаиморасчеты.Сумма  = 0;
		НаборЗаписейВзаиморасчеты.Валюта = Неопределено;
		НаборЗаписейВзаиморасчеты.СуммаДоходаРасходаСуммовыхРазниц = 0;
		
		// В набор записей передаем созданную таблицу через предопределенное свойство "ДополнительныеСвойства".
		// После отработки функции модуля набора записей, эта таблица будет заполнена соответствующими движениями.
		НаборЗаписейВзаиморасчеты.ДополнительныеСвойства.Вставить("ТаблицаДвижений", ТаблицаСуммовыхИКурсовыхРазниц);
		
		Если БалансВедетсяПоПодразделениям Тогда
			НаборЗаписейВзаиморасчеты.ДополнительныеСвойства.Вставить("ФильтрПоПодразделению", ПодразделениеКомпании);
		ИначеЕсли БалансВедетсяПоОрганизациям Тогда
			НаборЗаписейВзаиморасчеты.ДополнительныеСвойства.Вставить("ФильтрПоОрганизации", Организация);		
		КонецЕсли;
		
		Отказ=НЕ НаборЗаписейВзаиморасчеты.СписаниеКурсовыхРазниц() ИЛИ Отказ;   		
	КонецЕсли;
	
	СуммаДоходаРасходаКурсовыхРазниц=0;
	Если КурсовыеРазницыДенежныеСредстваКомпании Тогда
		НаборЗаписейДС = Движения.ДенежныеСредстваКомпании;
		НаборЗаписейДС.ДокументОбъект     = ЭтотОбъект;
		НаборЗаписейДС.РежимПроведения    = РежимПроведения;
		НаборЗаписейДС.СтруктурнаяЕдиница = Неопределено;
		НаборЗаписейДС.Валюта             = Неопределено;
		НаборЗаписейДС.СтатьяДДС          = Справочники.СтатьиДДС.КурсовыеРазницы;
		НаборЗаписейДС.Сумма              = 0;
		
		// В набор записей передаем созданную таблицу через предопределенное свойство "ДополнительныеСвойства".
		// После отработки функции модуля набора записей, эта таблица будет заполнена соответствующими движениями.
		НаборЗаписейДС.ДополнительныеСвойства.Вставить("ТаблицаДвижений", ТаблицаСуммовыхИКурсовыхРазниц);
		
		Если БалансВедетсяПоПодразделениям Тогда
			НаборЗаписейДС.ДополнительныеСвойства.Вставить("ФильтрПоПодразделению", ПодразделениеКомпании);
		ИначеЕсли БалансВедетсяПоОрганизациям Тогда
			НаборЗаписейДС.ДополнительныеСвойства.Вставить("ФильтрПоОрганизации", Организация);		
		КонецЕсли; 
		
		Отказ = НЕ НаборЗаписейДС.СписаниеКурсовыхРазниц() ИЛИ Отказ;
	КонецЕсли;
	
	Если КурсовыеРазницыКассыККМ Тогда
		НаборЗаписейКассыККМ = Движения.КассыККМ;
		НаборЗаписейКассыККМ.ДокументОбъект  = ЭтотОбъект;
		НаборЗаписейКассыККМ.РежимПроведения = РежимПроведения;
		
		// В набор записей передаем созданную таблицу через предопределенное свойство "ДополнительныеСвойства".
		// После отработки функции модуля набора записей, эта таблица будет заполнена соответствующими движениями.
		НаборЗаписейКассыККМ.ДополнительныеСвойства.Вставить("ТаблицаДвижений", ТаблицаСуммовыхИКурсовыхРазниц); 
		
		Если БалансВедетсяПоПодразделениям Тогда
			НаборЗаписейКассыККМ.ДополнительныеСвойства.Вставить("ФильтрПоПодразделению", ПодразделениеКомпании);
		ИначеЕсли БалансВедетсяПоОрганизациям Тогда
			НаборЗаписейКассыККМ.ДополнительныеСвойства.Вставить("ФильтрПоОрганизации", Организация);		
		КонецЕсли;

		Отказ=НЕ НаборЗаписейКассыККМ.СписаниеКурсовыхРазниц() ИЛИ Отказ;
	КонецЕсли;
	
	Документы.ПереоценкаВалютныхСредств.ИнициализироватьДанныеДокументаДляПроведения(ЭтотОбъект, ДополнительныеСвойства);
	Документы.ПереоценкаВалютныхСредств.СформироватьТаблицуРасчетыСКонтрагентами(ДополнительныеСвойства, Отказ);
	
	// TODO: Дополним таблицу суммовых разниц пока не будут все регистры переведены
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
		ТаблицаСуммовыхИКурсовыхРазниц,
		ДополнительныеСвойства.ДляПроведения.СуммовыеИКурсовыеРазницы);
	
	Документы.ПереоценкаВалютныхСредств.СформироватьТаблицуДоходыИРасходы(ДополнительныеСвойства);
	ОбработкаСобытийДокументаСервер.ЗаписатьДвижения(ЭтотОбъект);
	
	Если БалансВедетсяПоПодразделениям Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Установлен способ ведения баланса по подразделениям. Произведена переоценка валютных сумм выбранных активов по подразделению документа: %1'"),ПодразделениеКомпании);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
	ИначеЕсли БалансВедетсяПоОрганизациям Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Установлен способ ведения баланса по организациям. Произведена переоценка валютных сумм выбранных активов по подразделениям организации документа: %1'"),Организация);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
	Иначе  
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Установлен способ ведения баланса по компании. Произведена переоценка валютных сумм выбранных активов по всем подразделениям компании.'"), ЭтотОбъект);
	КонецЕсли;
	
	// двигаем границу последовательности взаиморасчетов
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	РаботаСГраницами.СдвинутьГраницуРасчетовСКонтрагентами(Ссылка, ДополнительныеСвойства, Движения);
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
