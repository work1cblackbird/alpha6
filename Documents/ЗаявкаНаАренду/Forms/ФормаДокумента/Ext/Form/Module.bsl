// Модуль основной формы документа "Заявка на аренду"

#Область ОписаниеПеременных

&НаКлиенте
Перем АдресИзДанныхВыбора Экспорт;

&НаКлиенте
Перем ТелефонИзДанныхВыбора Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	Отказ = Отказ Или РаботаСФормой.НужноОтменитьОткрытиеФормы();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// ПодключаемоеОборудование
	ТипыОборудования = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
	ТипыОборудования.СканерШтрихкода = Истина;
	ТипыОборудования.СчитывательМагнитныхКарт = Истина;
	МенеджерОборудования.ПриСозданииНаСервере(ЭтаФорма, ТипыОборудования);
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ИнициализироватьПоляКонтактнойИнформации();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГлобальныеКоманды");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	РаботаСФормой.ИнициализироватьМенюВыбораХозОперации(ЭтотОбъект);
	РаботаСФормой.РасставитьСвязиПараметровВыбораПоОрганизации(ЭтотОбъект, Объект);
	РаботаСФормой.ОграничитьВыборКонтактныхЛиц(Элементы.Контрагент);
	РаботаСФормой.ЗаблокироватьРедактированиеНомераИДатыДокумента(ЭтотОбъект, Объект);
	
	РазрешитьРедактированиеЦенИСумм = ПраваИНастройкиПользователя.Значение("РедактированиеЦенИСуммВНоменклатурныхТаблицах", Объект);
	РаботаСФормой.РазрешитьРедактированиеЦенИСумм(
		РаботаСФормой.ТиповыеПоляСуммовыхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм
	);
	
	СпособВыбораСкидки = ПраваИНастройкиПользователя.Значение("СпособВыбораСкидки", Объект);
	РаботаСФормой.РазрешитьРедактированиеСкидок(
		РаботаСФормой.ТиповыеПоляСкидочныхРеквизитов(ЭтотОбъект),
		РазрешитьРедактированиеЦенИСумм,
		СпособВыбораСкидки
	);
	
	ОписаниеНовойКолонкиПроизводитель = РаботаСФормой.ОписаниеНовойКолонкиПроизводитель();
	ОписаниеНовойКолонкиПроизводитель.ТабличнаяЧасть = Элементы.Товары;
	ОписаниеНовойКолонкиПроизводитель.ПоставитьПеред = Элементы.ТоварыНоменклатураАртикул;
	НоваяКолонкаПроизводитель = РаботаСФормой.НоваяКолонкаПроизводитель(ЭтотОбъект, ОписаниеНовойКолонкиПроизводитель);
	
	КолонкиКодАртикулИПроизводитель = Новый Структура();
	КолонкиКодАртикулИПроизводитель.Вставить("Код", Элементы.ТоварыНоменклатураКод);
	КолонкиКодАртикулИПроизводитель.Вставить("Артикул", Элементы.ТоварыНоменклатураАртикул);
	КолонкиКодАртикулИПроизводитель.Вставить("Производитель", НоваяКолонкаПроизводитель);
	РаботаСФормой.НастроитьВидимостьКолонокКодАртикулИПроизводитель(КолонкиКодАртикулИПроизводитель);
	РаботаСФормой.ОткрытьФормуТолькоДляПросмотра(ЭтотОбъект, Объект);
	
	ИнициализироватьПодменюСостоянийЗаявки();
	
	// Обновим КИ
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		Объект.Заказчик,
		ЭтотОбъект,
		"Телефон,АдресЭлектроннойПочты",
		"ПредставлениеТелефона,АдресЭлектроннойПочты"
	);
	
	Элементы.НеОбновлятьКИ.Пометка = Истина;
	Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Заголовок = НСтр("ru = 'Не обновлять'");
	
	// Дальнейшие операции выполняются только для новых объектов
	Если НЕ  ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Доступность = Ложь;
		РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
		РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
		
		УстановитьСвойстваПоляВводаТелефона();
		НастроитьПараметрыВыбораЭлементовФормы();
		УправлениеДиалогомНаСервере();
	Иначе
		ПроверитьНеобходимостьОбновленияКИ();
	КонецЕсли;
	
	ПараметрыДокумента = ОбщиеПараметрыДокументов.СформироватьПредставлениеПараметровДокумента(Объект);

КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	ЗащищенныеФункцииКлиент.НастроитьЭлементФормыТабличнойЧасти(ЭтотОбъект, "Автомобили");
	
	УстановитьДоступностьЖалобы();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПараметрыДействия = Новый Структура;
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ПараметрыДействия = Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		Возврат;
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// Штрихкодирование
	ШтрихкодированиеКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец Штрихкодирование
	
	// СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	ЗащитаПерсональныхДанныхКлиент.ОбработкаОповещенияФормы(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	
	// Обновим КИ
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		Объект.Заказчик,
		ЭтотОбъект,
		"Телефон,АдресЭлектроннойПочты",
		"ПредставлениеТелефона,АдресЭлектроннойПочты"
	);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСФормойКлиент.ЗамерВремениЗапись("ЗаявкаНаАренду", ПараметрыЗаписи.РежимЗаписи,
		Объект.Товары.Количество() > 50);
		
	Отказ = Отказ Или РаботаСФормойКлиент.НачатьПроверкуПодразделенияДокументаИПользователя(
		Объект.ПодразделениеКомпании,
		Новый ОписаниеОповещения(
			"ПроверкаПодразделенияДокументаИПользователяЗавершение",
			ЭтотОбъект,
			Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)
		)
	);
	
КонецПроцедуры 

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОбновлятьКИ", Элементы.ОбновлятьКИ.Пометка);
	
КонецПроцедуры 

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РаботаСФормой.ЗаполнитьСлужебныеРеквизитыТоваров(Объект.Товары);
	РаботаСФормой.УстановитьВидимостьКолонкиХарактеристика(ЭтотОбъект, Объект);
	
	// Обновим КИ
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		Объект.Заказчик,
		ЭтотОбъект,
		"Телефон,АдресЭлектроннойПочты",
		"ПредставлениеТелефона,АдресЭлектроннойПочты"
	);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РаботаСФормойКлиент.ОповеститьОЗаписиДокумента(Объект.Ссылка);
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры 

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПоказыватьПараметрыДокумента", Элементы.ПараметрыДокумента.Видимость);
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказыватьПараметрыДокумента") = Ложь Тогда
		Элементы.ПараметрыДокумента.Видимость = Ложь;
		Элементы.НомерДата         .Видимость = Ложь;
	КонецЕсли;
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;
	ДатаПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаявкаНаАренду.ДатаПриИзменении(Объект, ПараметрыДействия);
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ХозОперацияПриИзменении(Команда)
	
	УправлениеДиалогомДокументаКлиент.ОбработатьВыборХозОперации(Объект, Элементы, Команда.Имя);
	ПараметрыДействия = Новый Структура;
	ХозОперацияПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры 

&НаСервере
Процедура ХозОперацияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.Амортизация.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ВидАрендыПриИзменении(Элемент)
	
	ВидАрендыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВидАрендыПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаявкаНаАренду.ВидАрендыПриИзменении(Объект, ПараметрыДействия);
	
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Если Объект.Автомобили.Количество()> 0 Тогда  
		
		ПараметрыДействия = Новый Структура;
		ПараметрыДействия.Вставить("ДатаНачала"); 

		Обработчик = Новый ОписаниеОповещения(
				"ОбработкаИзмененияДаты", ЭтотОбъект, ПараметрыДействия);  
		ТекстВопроса = НСтр("ru='При смене даты будут пересчитаны табличные части ""Автомобили"" и ""Тарификация"".'") + Символы.ПС
					+ НСтр("ru = 'Выполнить пересчет?'"); 
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);  
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ДатаНачалаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаявкаНаАренду.ДатаНачалаПриИзменении(Объект, ПараметрыДействия);
	
	// Обновляем заголовок надписи итоговой суммы по документу
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	Если Объект.Автомобили.Количество()> 0 Тогда  
		
		ПараметрыДействия = Новый Структура;
		ПараметрыДействия.Вставить("ДатаОкончания"); 

		Обработчик = Новый ОписаниеОповещения(
				"ОбработкаИзмененияДаты", ЭтотОбъект, ПараметрыДействия);  
		ТекстВопроса = НСтр("ru='При смене даты будут пересчитаны табличные части ""Автомобили"" и ""Тарификация"".'") + Символы.ПС
					+ НСтр("ru = 'Выполнить пересчет?'"); 
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);  
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаОкончанияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаявкаНаАренду.ДатаОкончанияПриИзменении(Объект, ПараметрыДействия);
	
	// Обновляем заголовок надписи итоговой суммы по документу
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикПриИзменении(Элемент)
	
	ЗаказчикПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаказчикПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаявкаНаАренду.ЗаказчикПриИзменении(Объект, ПараметрыДействия);
	
	// Обновим КИ
	УправлениеКонтактнойИнформациейАльфаАвто.ОбновитьСписокВыбораКИ(
		Объект.Заказчик,
		ЭтотОбъект,
		"Телефон,АдресЭлектроннойПочты",
		"ПредставлениеТелефона,АдресЭлектроннойПочты"
	);
	
	ПроверитьНеобходимостьОбновленияКИ();
	КомментарийТелефона = ЗначениеКомментарияКонтактнойИнформацииСервер(Объект.ПредставлениеТелефонаСтрокой);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество() Тогда
		СтандартнаяОбработка = Ложь;
		Объект.Заказчик = ВыбранноеЗначение[0].КонтактноеЛицо;
		АдресИзДанныхВыбора = "";
		ТелефонИзДанныхВыбора = "";
		Для Каждого Строка Из ВыбранноеЗначение Цикл
			Если Строка.ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") 
				И Не ЗначениеЗаполнено(АдресИзДанныхВыбора) Тогда
				АдресИзДанныхВыбора = Строка.ЗначениеКИ;
			ИначеЕсли Строка.ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") 
				И Не ЗначениеЗаполнено(ТелефонИзДанныхВыбора)Тогда
				ТелефонИзДанныхВыбора = Строка.ЗначениеКИ;
			КонецЕсли;
		КонецЦикла;
		ОбработатьИзменениеЗаказчика();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПолученияДанных.Вставить("ПоискКонтрагентовСКИ");
	
	ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.Контрагенты"), ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПолученияДанных.Вставить("ПоискКонтрагентовСКИ");
	
	ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.Контрагенты"), ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПараметрыДействия = Новый Структура;	
	КонтрагентПриИзмененииНаСервере(ПараметрыДействия); 
	
	// Обработаем изменения требующие ответа от пользователя
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаявкаНаАренду.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорВзаиморасчетовПриИзменении(Элемент)
	
	ДоговорВзаиморасчетовПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДоговорВзаиморасчетовПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	Документы.ЗаявкаНаАренду.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура СостояниеЗаявкиНаРемонтПриИзменении(ИмяКоманды, ПараметрыДействия = Неопределено)
	
	ЗначениеВыбора = Перечисления.СостояниеЗаявкиНаРемонт[СтрЗаменить(ИмяКоманды, "СостояниеЗнР", "")];
	Если ЗначениеВыбора = Объект.Состояние И ЗначениеВыбора <> Перечисления.СостояниеЗаявкиНаРемонт.Отклонено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Состояние = ЗначениеВыбора;
	Документы.ЗаявкаНаАренду.СостояниеПриИзменении(Объект, ПараметрыДействия);
	
	Для Каждого Элемент Из Элементы.ВыборСостоянияЗаявки.ПодчиненныеЭлементы Цикл
		Элемент.Пометка = (Элемент.Имя = ИмяКоманды);
	КонецЦикла;
		
	Если НЕ ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ЗапроситьПричинуОтказа", Ложь) Тогда
		УправлениеДиалогомНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#Область СтандартныеПодсистемыКонтактнаяИнформация

&НаСервере
Процедура ИнициализироватьПоляКонтактнойИнформации()
	
	ВидКонтактнойИнформацииТелефона = Новый Структура;
	ВидКонтактнойИнформацииТелефона.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	ВидКонтактнойИнформацииЭлектроннойПочты = Новый Структура;
	ВидКонтактнойИнформацииЭлектроннойПочты.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	КомментарийТелефона = ЗначениеКомментарияКонтактнойИнформацииСервер(Объект.ПредставлениеТелефонаСтрокой);
	
	РазрешитьВводНесколькихЗначенийТелефона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, "РазрешитьВводНесколькихЗначений");
	
	РазрешитьВводНесколькихЗначенийЭлектроннойПочты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, "РазрешитьВводНесколькихЗначений");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеКомментарияКонтактнойИнформацииСервер(КонтактнаяИнформация)
	
	Результат = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(КонтактнаяИнформация);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначенияПолейКонтактнойИнформацииСервер(Знач Представление, Знач ВидКонтактнойИнформации, Знач Комментарий = Неопределено)
	
	// Создаем новый экземпляр по представлению.
	Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, ВидКонтактнойИнформации);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПредставлениеТелефонаПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		Объект.ПредставлениеТелефона        = "";
		Объект.ПредставлениеТелефонаСтрокой = "";
		УстановитьСвойстваПоляВводаТелефона();
		Возврат;
	КонецЕсли;
	
	// Формируем внутренние значения полей по тексту и параметрам формирования из
	// реквизита ВидКонтактнойИнформацииЭлектроннойПочты.     
	Объект.ПредставлениеТелефона = Текст;
	Объект.ПредставлениеТелефонаСтрокой = ЗначенияПолейКонтактнойИнформацииСервер(Текст, ВидКонтактнойИнформацииТелефона);
	
	ПроверитьНеобходимостьОбновленияКИ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТелефонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Если представление было изменено в поле и сразу нажата кнопка выбора, то необходимо 
	// привести данные в соответствие и сбросить внутренние поля для повторного разбора.
	Если Элемент.ТекстРедактирования <> Объект.ПредставлениеТелефона Тогда
		Объект.ПредставлениеТелефона = Элемент.ТекстРедактирования;
		Объект.ПредставлениеТелефонаСтрокой = "";
	КонецЕсли;
	
	// Данные для редактирования
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента"),
		Объект.ПредставлениеТелефонаСтрокой,
		Объект.ПредставлениеТелефона,
		КомментарийТелефона
	);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТелефонаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Объект.ПредставлениеТелефона        = ВыбранноеЗначение.Представление;
		КомментарийТелефона                 = ВыбранноеЗначение.Комментарий;
		Объект.ПредставлениеТелефонаСтрокой = ВыбранноеЗначение.Значение;
		
		ПроверитьНеобходимостьОбновленияКИ();
		Модифицированность = Истина;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		Объект.ПредставлениеТелефона        = ВыбранноеЗначение;
		КомментарийТелефона                 = "";
		Объект.ПредставлениеТелефонаСтрокой = ЗначенияПолейКонтактнойИнформацииСервер(ВыбранноеЗначение, ВидКонтактнойИнформацииТелефона);
		
		ПроверитьНеобходимостьОбновленияКИ();
		Модифицированность = Истина;
	Иначе
		УстановитьСвойстваПоляВводаТелефона();
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТелефонаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.ПредставлениеТелефона        = "";
	КомментарийТелефона                 = "";
	Объект.ПредставлениеТелефонаСтрокой = "";
	
	ПроверитьНеобходимостьОбновленияКИ();
	УстановитьСвойстваПоляВводаТелефона();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭлектроннойПочтыПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		Объект.АдресЭлектроннойПочты        = "";
		Объект.АдресЭлектроннойПочтыСтрокой = "";
		Возврат;
	КонецЕсли;
	
	// Формируем внутренние значения полей по тексту и параметрам формирования из
	// реквизита ВидКонтактнойИнформацииЭлектроннойПочты.
	Объект.АдресЭлектроннойПочты        = Текст;
	Объект.АдресЭлектроннойПочтыСтрокой = ЗначенияПолейКонтактнойИнформацииСервер(Текст, ВидКонтактнойИнформацииЭлектроннойПочты);
	
	ПроверитьНеобходимостьОбновленияКИ();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭлектроннойПочтыОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.АдресЭлектроннойПочты        = "";
	Объект.АдресЭлектроннойПочтыСтрокой = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзМенюТелефон(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ПредставлениеТелефона = Объект.ПредставлениеТелефона;
		Если ВыбранныйЭлемент.Значение = "ОтправитьSMS" Тогда
			
			ВзаимодействияАльфаАвтоКлиент.СоздатьSMS(
				Объект.ПредставлениеТелефона,
				Объект.Контрагент,
				Объект.Ссылка
			);
		Иначе
			УправлениеКонтактнойИнформациейКлиент.ПозвонитьПоТелефону(ПредставлениеТелефона);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьОбновленияКИ()
	
	УстановитьСвойстваПоляВводаТелефона();
	
	Если ТипЗнч(Объект.Заказчик) = Тип("Строка")
		ИЛИ Объект.Заказчик = Справочники.Контрагенты.ПустаяСсылка() Тогда
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Элементы.АдресЭлектроннойПочты.СписокВыбора.Количество() > 0
		И Объект.АдресЭлектроннойПочты <> "" Тогда
		ЭлектроннаяПочта = Элементы.АдресЭлектроннойПочты.СписокВыбора.НайтиПоЗначению(Объект.АдресЭлектроннойПочты);
		ЭтоНовыйАдрес = (ЭлектроннаяПочта = Неопределено);
	Иначе
		ЭтоНовыйАдрес = (Объект.АдресЭлектроннойПочты <> "");
	КонецЕсли;
	
	Если Элементы.ПредставлениеТелефона.СписокВыбора.Количество() > 0
		И Объект.ПредставлениеТелефона <> "" Тогда
		Телефон = Элементы.ПредставлениеТелефона.СписокВыбора.НайтиПоЗначению(Объект.ПредставлениеТелефона);
		ЭтоНовыйТелефон = (Телефон = Неопределено);
	Иначе
		ЭтоНовыйТелефон = (Объект.ПредставлениеТелефона <> "");
	КонецЕсли;
	
	ЕстьНоваяКИ = ЭтоНовыйАдрес ИЛИ ЭтоНовыйТелефон;
	
	Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Доступность = ЕстьНоваяКИ;
	
	Если НЕ ЕстьНоваяКИ Тогда
		Элементы.ОбновлятьКИ.Пометка   = Ложь;
		Элементы.НеОбновлятьКИ.Пометка = Истина;
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Заголовок = НСтр("ru = 'Не обновлять'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтомобили

&НаКлиенте
Процедура АвтомобилиПередУдалением(Элемент, Отказ)

	ТекСтрока = Элементы.Автомобили.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда
		МассивТарификации = Объект.Тарификация.НайтиСтроки(
			Новый Структура("ИдентификаторАвтомобиля", ТекСтрока.ИдентификаторАвтомобиля));
		
		Для Каждого СтрокаТарификации Из МассивТарификации Цикл
			Объект.Тарификация.Удалить(СтрокаТарификации);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийПолейТаблицыФормыАвтомобили

&НаКлиенте
Процедура АвтомобилиАвтомобильПриИзменении(Элемент)
	АвтомобилиАвтомобильПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура АвтомобилиАвтомобильПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	// Получим данные текущей строки табличной части
	ТекущиеДанные = Объект.Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
	
	// Проверим наличие заметок по выбранному объекту.
	ЗаметкиПользователяАльфаАвто.ПроверитьЗаметкиПоПредмету(ТекущиеДанные.Автомобиль, ПараметрыДействия);
	
	// Вызываем обработчик изменения данных объекта
	Документы.ЗаявкаНаАренду.АвтомобилиАвтомобильПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобилиСуммаПриИзменении(Элемент)
	
	АвтомобилиСуммаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтомобилиСуммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
		
	// Вызываем обработчик изменения данных объекта
	Документы.ДоговорАренды.АвтомобилиСуммаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобилиСтавкаНДСПриИзменении(Элемент)
	
	АвтомобилиСтавкаНДСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтомобилиСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
		
	// Вызываем обработчик изменения данных объекта
	Документы.ДоговорАренды.АвтомобилиСтавкаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобилиСуммаСкидкиПриИзменении(Элемент)
	
	АвтомобилиСуммаСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтомобилиСуммаСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
		
	// Вызываем обработчик изменения данных объекта
	Документы.ДоговорАренды.АвтомобилиСуммаСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобилиСуммаВсегоПриИзменении(Элемент)
	
	АвтомобилиСуммаВсегоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтомобилиСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
		
	// Вызываем обработчик изменения данных объекта
	Документы.ДоговорАренды.АвтомобилиСуммаВсегоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобилиПроцентСкидкиПриИзменении(Элемент)
	
	АвтомобилиПроцентСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АвтомобилиПроцентСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Автомобили.НайтиПоИдентификатору(Элементы.Автомобили.ТекущаяСтрока);
		
	// Вызываем обработчик изменения данных объекта
	Документы.ДоговорАренды.АвтомобилиПроцентСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобилиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеДиалогомАльфаАвтоКлиент.АвтомобилиПриОкончанииРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	УправлениеДиалогомДокументаКлиент.ТоварыПриОкончанииРедактирования(
		ЭтотОбъект,
		Элемент, 
		НоваяСтрока,
		ОтменаРедактирования
	);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СкидкиНаценкиКлиент.ОбработкаВыбора(ЭтотОбъект, Поле, ВыбраннаяСтрока, Объект.БлокироватьПерерасчетСкидок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ТоварыПослеУдаленияНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыПослеУдаленияНаСервере(ПараметрыДействия = Неопределено)
	
	УправлениеДиалогомДокументаСервер.ТоварыПослеУдаления(
		ЭтотОбъект, 
		Элементы.Товары,
		ПараметрыДействия
	);
		
КонецПроцедуры 

#Область ОбработчикиСобытийПолейТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТоварыНоменклатураПриИзмененииНаСервере();
		
КонецПроцедуры 

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ПараметрыДействия = Неопределено)

	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаАренду.ТоварыНоменклатураПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	УправлениеДиалогомДокументаСервер.НоменклатураПриИзменении(ЭтотОбъект, ТекущиеДанные, ПараметрыДействия);
		
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)

	ТоварыЕдиницаИзмеренияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаАренду.ТоварыЕдиницаИзмеренияПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
		
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТоварыКоличествоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыКоличествоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаАренду.ТоварыКоличествоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
		
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТоварыЦенаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыЦенаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаАренду.ТоварыЦенаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТоварыСуммаПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСуммаПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаАренду.ТоварыСуммаПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСуммаВсегоПриИзменении(Элемент)
	
	ТоварыСуммаВсегоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаВсегоПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаАренду.ТоварыСуммаВсегоПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ТоварыСтавкаНДСПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСтавкаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаАренду.ТоварыСтавкаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТоварыСуммаНДСПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыСуммаНДСПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаАренду.ТоварыСуммаНДСПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Элемент)
	
	ТоварыСуммаСкидкиСтрокиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаАренду.ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	
	ТоварыСуммаСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаАренду.ТоварыСуммаСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкидкаНаТоварПриИзменении(Элемент)
	
	ТоварыСкидкаНаТоварПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСкидкаНаТоварПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Ложь;
	ТекущиеДанные.СкидкаСтрокиИзменена = Истина;
	Документы.ЗаявкаНаАренду.ТоварыСкидкаНаТоварПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПроцентСкидкиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаАренду.ТоварыПроцентСкидкиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиШапкиИзменено = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиПриИзменении(Элемент)
	
	ТоварыПроцентСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Элемент)
	
	ТоварыПроцентСкидкиСтрокиПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ТоварыПроцентСкидкиСтрокиПриИзмененииНаСервере(ПараметрыДействия = Неопределено)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Документы.ЗаявкаНаАренду.ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, ТекущиеДанные, ПараметрыДействия);
	ТекущиеДанные.ЗначениеСкидкиСтрокиИзменено = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
                                                НавигационнаяСсылка = Неопределено,
                                                СтандартнаяОбработка = Неопределено)
	
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
    
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПодборАвтомобиля(Команда)
	
	МассивАвтомобилей = Новый Массив;
	Для Каждого СтрокаАвтомобиля Из Объект.Автомобили Цикл
		МассивАвтомобилей.Добавить(СтрокаАвтомобиля.Автомобиль);	
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбора", Истина);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ПодразделениеКомпании", Объект.ПодразделениеКомпании);
	ПараметрыФормы.Вставить("Марка", Объект.Марка);
	ПараметрыФормы.Вставить("Модель", Объект.Модель);
	ПараметрыФормы.Вставить("ВариантКомплектации", Объект.ВариантКомплектации);
	ПараметрыФормы.Вставить("ТипДвигателя", Объект.ТипДвигателя);
	ПараметрыФормы.Вставить("ТипКузова", Объект.ТипКузова);
	ПараметрыФормы.Вставить("ТипКПП", Объект.ТипКПП);
	ПараметрыФормы.Вставить("ТипПривода", Объект.ТипПривода);
	ПараметрыФормы.Вставить("ТипСалона", Объект.ТипСалона);
	ПараметрыФормы.Вставить("Цвет",      Объект.Цвет);
	ПараметрыФормы.Вставить("ВидАренды", Объект.ВидАренды);
	ПараметрыФормы.Вставить("АрендаДатаНачала", Объект.ДатаНачала);
	ПараметрыФормы.Вставить("АрендаДатаОкончания", Объект.ДатаОкончания);
	ПараметрыФормы.Вставить("МассивАвтомобилей", МассивАвтомобилей);
	ОткрытьФорму("Обработка.ПланировщикАренды.Форма",
		ПараметрыФормы, ЭтотОбъект,
		,
		,
		,
		Новый ОписаниеОповещения("ПодборАвтомобиля_Завершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборАвтомобиля_Завершение(ПараметрыПодбора, ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если ТипЗнч(ПараметрыПодбора) = Тип("Структура") 
		И ПараметрыПодбора.Свойство("Автомобиль") Тогда
		ПодборАвтомобиля_ЗавершениеНаСервере(ПараметрыПодбора, ДополнительныеПараметры);
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаАвтомобили;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодборАвтомобиля_ЗавершениеНаСервере(ПараметрыПодбора, ДополнительныеПараметры = Неопределено) 
	
	ДатыИзменились = Ложь;
	
	Если Объект.ДатаНачала <> ПараметрыПодбора.ДатаНачала И ПараметрыПодбора.ДатаНачала <> '00010101' Тогда
		Объект.ДатаНачала = ПараметрыПодбора.ДатаНачала;
		ДатыИзменились = Истина;
	КонецЕсли;
	 
	Если Объект.ДатаНачала <> ПараметрыПодбора.ДатаНачала И ПараметрыПодбора.ДатаНачала <> '00010101' Тогда
		Объект.ДатаОкончания = ПараметрыПодбора.ДатаОкончания;	
		ДатыИзменились = Истина;
	КонецЕсли;
	
	Если ДатыИзменились Тогда
		Документы.ДоговорАренды.ДатаОкончанияПриИзменении(Объект);
	КонецЕсли;
	
	НоваяСтрока = Объект.Автомобили.Добавить();
	НоваяСтрока.Автомобиль = ПараметрыПодбора.Автомобиль;
	Документы.ЗаявкаНаАренду.АвтомобилиАвтомобильПриИзменении(Объект, НоваяСтрока);
	
	// Обновляем заголовок надписи итоговой суммы по документу
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериода(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборПериода_Завершение", ЭтотОбъект);
	
	АрендаАвтомобилейКлиент.ВыборПериода(Объект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериода_Завершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат Тогда
		ДатаНачалаПриИзменении(Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	ПараметрыДействия = Новый Структура();
	ПараметрыДействия.Вставить("НеРассчитыватьБонусы", Истина);
	ПараметрыДействия.Вставить("НеУстанавливатьОтборНаОстаток", Истина);
	
	// Вызываем общий обработчик события
	УправлениеДиалогомКлиент.ОткрытьПодборНоменклатуры(ЭтотОбъект,,,,, ПараметрыДействия);
	
КонецПроцедуры // ПодборНоменклатуры()

&НаКлиенте
Процедура Подключаемый_СостояниеЗаявкиНаРемонтПриИзменении(Команда)
	
	ПараметрыДействия = Новый Структура;
	СостояниеЗаявкиНаРемонтПриИзменении(Команда.Имя, ПараметрыДействия);
	
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ЗапроситьПричинуОтказа", Ложь) Тогда
		ОписаниеОповещенияОЗакрытииФормы = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения",
			ЭтотОбъект,
			"ВыборПричиныОтказаОтОбслуживания");
		ПараметрыОткрытияФормы = Новый Структура("РежимВыбора", Истина);
		
		ОткрытьФорму("Справочник.ПричиныОтказаОтОбслуживания.ФормаВыбора",
			ПараметрыОткрытияФормы,
			ЭтотОбъект,
			ЭтотОбъект,
			,
			,
			ОписаниеОповещенияОЗакрытииФормы,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслугВидаАренды(Команда)
	
	АрендаАвтомобилейКлиент.ПодборУслугВидаАренды(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьКИ(Команда)
	
	ИмяКоманды = Команда.Имя;
	
	Если ИмяКоманды = "ОбновлятьКИ" И ПроверитьСогласиеНаОбработкуПерсональныхДанных(Объект.Заказчик) Тогда
		
		Если Не РазрешитьВводНесколькихЗначенийТелефона Или Не РазрешитьВводНесколькихЗначенийЭлектроннойПочты Тогда
			
			Обработчик = Новый ОписаниеОповещения("Подключаемый_ОбновлятьКИ", ЭтотОбъект);
			Если Не РазрешитьВводНесколькихЗначенийТелефона И Не РазрешитьВводНесколькихЗначенийЭлектроннойПочты Тогда
				ВидыКИ = НСтр("ru = 'телефона и адреса электронной почты'");
			ИначеЕсли Не РазрешитьВводНесколькихЗначенийТелефона Тогда
				ВидыКИ = НСтр("ru = 'телефона'");
			Иначе
				ВидыКИ = НСтр("ru = 'адреса электронной почты'");
			КонецЕсли;
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Для %1 не настроено хранение нескольких значений.
			|При включении обновления текущие значения в карточке контрагента будут заменены данными из документа. Продолжить?'"),
			ВидыКИ
		);
			
			ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Возврат;
		КонецЕсли;
		
		Подключаемый_ОбновлятьКИ(КодВозвратаДиалога.Да);
		
	Иначе
		Подключаемый_ОбновлятьКИ(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПозвонитьИлиОтправитьSMS(Команда)
	
	Список = Новый СписокЗначений;
	Список.Добавить("Позвонить", НСтр("ru = 'Позвонить'"),, БиблиотекаКартинок.Позвонить);
	Список.Добавить("ОтправитьSMS", НСтр("ru = 'Отправить SMS...'"),, БиблиотекаКартинок.ОтправитьSMS);
	ОповещениеМеню = Новый ОписаниеОповещения("ПослеВыбораИзМенюТелефон", ЭтотОбъект, Параметры);
	ЭтотОбъект.ПоказатьВыборИзМеню(ОповещениеМеню, Список, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НаписатьПисьмо(Команда)
	
	УправлениеКонтактнойИнформациейКлиент.СоздатьЭлектронноеПисьмо(Объект.АдресЭлектроннойПочтыСтрокой,
	Объект.АдресЭлектроннойПочты, ВидКонтактнойИнформацииЭлектроннойПочты, Объект.Заказчик);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработкаИзмененияДаты(РезультатОповещения, ДополнительныеПараметры) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда 
			Если ДополнительныеПараметры.Свойство("ДатаНачала") Тогда
			ДатаНачалаПриИзмененииНаСервере();  
		ИначеЕсли ДополнительныеПараметры.Свойство("ДатаОкончания") Тогда 
			 ДатаОкончанияПриИзмененииНаСервере();
		 КонецЕсли; 
	 КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПодменюСостоянийЗаявки()
	
	Для Каждого СостояниеЗаявкиНаРемонт Из Метаданные.Перечисления.СостояниеЗаявкиНаРемонт.ЗначенияПеречисления Цикл
		// добавим команду
		ИмяНовойКоманды           = "СостояниеЗнР" + СостояниеЗаявкиНаРемонт.Имя;
		ПредставлениеНовойКоманды = СостояниеЗаявкиНаРемонт.Синоним;
		
		НоваяКоманда = ЭтотОбъект.Команды.Добавить(ИмяНовойКоманды);
		НоваяКоманда.Действие  = "Подключаемый_СостояниеЗаявкиНаРемонтПриИзменении";
		НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
		
		// добавим кнопку для команды
		НоваяКнопка = Элементы.Добавить(ИмяНовойКоманды, Тип("КнопкаФормы"), Элементы.ВыборСостоянияЗаявки);
		НоваяКнопка.ИмяКоманды = ИмяНовойКоманды;
		НоваяКнопка.Заголовок = ПредставлениеНовойКоманды;
		
		НоваяКнопка.Пометка = (Объект.Состояние = Перечисления.СостояниеЗаявкиНаРемонт[СостояниеЗаявкиНаРемонт.Имя]);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Вызываем общий обработчик действия
	УправлениеДиалогомДокументаСервер.УстановитьУсловноеОформление(ЭтотОбъект);
	
	СкидкиНаценкиСервер.УстановитьУсловноеОформление(
		ЭтотОбъект,
		СкидкиНаценкиСервер.ПараметрыУстановкиУсловногоОформления(ЭтотОбъект)
	);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ПроверкаПодразделенияДокументаИПользователяЗавершение(Контекст) Экспорт
	
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЗаполнениеОбъектов
&НаКлиенте
Процедура ПослеОбработкиЗаполнения(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ПослеОбработкиЗаполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиЗаполненияНаСервере()
	
	ЗаполнениеОбъектовАльфаАвто.ПослеОбработкиЗаполнения(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ЗаполнениеОбъектов

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ОбработчикиАльфаАвто

// Ядро
&НаКлиенте
Процедура ПараметрыДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.НастроитьПараметрыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	УправлениеДиалогомДокументаКлиент.РасширенноеРедактированиеПоляКомментарий(ЭтотОбъект, Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСуммаДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеДиалогомДокументаКлиент.ПоказатьРасширенныеИтогиОперации(ЭтотОбъект, Элемент);
	
КонецПроцедуры
// Конец Ядро

#КонецОбласти

#Область ОбработчикиСлужебногоПрограммногоИнтерфейса

&НаСервере
Процедура НастроитьПараметрыВыбораЭлементовФормы()
	
	УправлениеДиалогомДокументаСервер.НастроитьПараметрыВыбораЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДиалогомНаСервере()
	
	// Вызываем общий обработчик действия
	УправлениеДиалогомДокументаСервер.УправлениеДиалогомНаСервере(ЭтотОбъект);
	
	ДанныеВидаАренды = АрендаАвтомобилей.ДанныеВидаАренды(Объект.ВидАренды);
	
	АрендаАвтомобилей.УправлениеДиалогом(ЭтотОбъект, ДанныеВидаАренды);
	
	Элементы.ВыборСостоянияЗаявки.Заголовок = Строка(Объект.Состояние)
		+ ?(ЗначениеЗаполнено(Объект.ПричинаОтказаОтОбслуживания),
				СтрШаблон(" [%1]", Объект.ПричинаОтказаОтОбслуживания),
				"");
	
	// Обновляем заголовок надписи итоговой суммы по документу
	ЗащищенныеФункцииСервер.УстановитьЗаголовокНадписиСуммаДокумента(ЭтотОбъект);
	
	СпособВыбораСкидки = ПраваИНастройкиПользователя.Значение("СпособВыбораСкидки", Объект);
	ДоступныСкидки = СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидки
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.АвтоматическиеИРучныеСкидки
		ИЛИ СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов;
	ДоступноРедактированиеСкидок = СпособВыбораСкидки = Перечисления.СкидкиСпособыВыбора.РучныеСкидкиИРедактированиеПроцентов;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыПроцентСкидки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСуммаСкидки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСкидкаНаТовар",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступныСкидки
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыПроцентСкидкиСтроки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСуммаСкидкиСтроки",
		"ТолькоПросмотр",
		Объект.БлокироватьПерерасчетСкидок ИЛИ НЕ ДоступноРедактированиеСкидок
	);
	
КонецПроцедуры 

&НаСервере
Процедура ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры = Неопределено)
	
	Если НЕ УправлениеДиалогомДокументаСервер.
			ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "ВыборПричиныОтказаОтОбслуживания" Тогда
		Объект.ПричинаОтказаОтОбслуживания = РезультатОповещения;
		РезультатОповещения = Новый Структура;
	КонецЕсли;
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(РезультатОповещения,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаРезультатаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРезультатаВыполненияДействия(РезультатОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияДействия(ПараметрыДействия)
	
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, ПараметрыДействия);
	УправлениеДиалогомДокументаКлиент.ОбработкаРезультатаВыполненияДействия(ЭтотОбъект, ПараметрыДействия);
	
КонецПроцедуры 

#КонецОбласти

&НаСервере
Процедура УстановитьДоступностьЖалобы()
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЖалобаКлиента) Тогда
		Элементы.ФормаДокументЖалобаКлиентаСоздатьНаОсновании.Видимость = Константы.ИспользоватьЖалобы.Получить();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьСогласиеНаОбработкуПерсональныхДанных(Контрагент)
	
	Если ТипЗнч(Контрагент) = Тип("Строка") ИЛИ Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указан клиент.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ (Контрагент.ФормаСобственности = Перечисления.ФормыСобственности.ЧастноеЛицо
		ИЛИ Контрагент.ФормаСобственности  = Перечисления.ФормыСобственности.ИндивидуальныйПредприниматель) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Согласие = ЗащитаПерсональныхДанных.ДействующееСогласиеНаОбработкуПерсональныхДанных(
		Контрагент,
		Справочники.Организации.ОрганизацияПоУмолчанию(),
		КонецДня(ТекущаяДатаСеанса())
	);
	
	Если Согласие = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Отсутствует согласие на обработку персональных данных. Запись контактной информации невозможна.'")
		);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#Область ПараметрыДокумента

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаЗакрытияПараметровДокумента(РезультатОповещения, ДополнительныеПараметры = Неопределено) Экспорт
	                                                                                                                
	ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры);
	ОбработкаРеквизитовДокументаКлиент.ПолучитьРазрешенияДляПересчета(ЭтотОбъект, РезультатОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаЗакрытияПараметровДокументаНаСервере(РезультатОповещения, ДополнительныеПараметры)
	
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзмененииРеквизитов(Объект, 	РезультатОповещения);
	ОбщиеПараметрыДокументов.ПараметрыДокументаПриИзменении(ЭтотОбъект,			РезультатОповещения);
	
	НастроитьПараметрыВыбораЭлементовФормы();
	УправлениеДиалогомНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура Подключаемый_ШтрихкодированиеОбработкаОповещения(РезультатОповещения,
	ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если РезультатОповещения.Свойство("Действие") Тогда
		ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ШтрихкодированиеОбработкаОповещенияНаСервере(РезультатОповещения, ДополнительныеПараметры)

	ШтрихкодированиеВызовСервера.ОбработкаОповещения(ЭтотОбъект, РезультатОповещения, ДополнительныеПараметры, , Объект);

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбработатьИзменениеЗаказчика()
	
	ПараметрыДействия = Новый Структура;
	Если ЗначениеЗаполнено(ТелефонИзДанныхВыбора) Тогда
		ПараметрыДействия.Вставить("ТелефонИзДанныхВыбора", ТелефонИзДанныхВыбора);
	КонецЕсли;
	Если ЗначениеЗаполнено(АдресИзДанныхВыбора) Тогда
		ПараметрыДействия.Вставить("АдресИзДанныхВыбора", АдресИзДанныхВыбора);
	КонецЕсли;
	ЗаказчикПриИзмененииНаСервере(ПараметрыДействия);
	ОбработкаРезультатаВыполненияДействия(ПараметрыДействия);
	
	ТелефонИзДанныхВыбора = "";
	АдресИзДанныхВыбора = "";
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваПоляВводаТелефона()
	
	УправлениеКонтактнойИнформациейАльфаАвто.УстановитьСвойстваПоляВводаТелефона(
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
		Объект.ПредставлениеТелефона,
		Элементы.ПредставлениеТелефона
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновлятьКИ(Результат, ДополнетельныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Элементы.ОбновлятьКИ.Пометка   = Истина;
		Элементы.НеОбновлятьКИ.Пометка = Ложь;
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Заголовок = НСтр("ru = 'Обновлять'");
	Иначе
		Элементы.ОбновлятьКИ.Пометка   = Ложь;
		Элементы.НеОбновлятьКИ.Пометка = Истина;
		Элементы.ГруппаРежимОбновленияКонтактнойИнформации.Заголовок = НСтр("ru = 'Не обновлять'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ