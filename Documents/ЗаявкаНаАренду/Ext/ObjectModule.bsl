// Модуль документа "Заявка на аренду"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина)
	
	Если ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "Имя") = "Событие" Тогда
		ДанныеЗаполненияКопия = ДанныеЗаполнения;
		ДанныеЗаполнения = ДанныеЗаполнения.Событие;
	КонецЕсли;
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.
			ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбработкаСобытийДокументаСервер.ВводСПустымОснованием(ДанныеЗаполнения) Тогда
		
		Заказчик = Справочники.Контрагенты.ПустаяСсылка();
		Документы.ЗаявкаНаАренду.ЗаказчикПриИзменении(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Документы.ЗаявкаНаАренду.КонтрагентПриИзменении(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
		СкидкаНаценка = Справочники.ТипыСкидок.ПустаяСсылка();
		Документы.ЗаявкаНаАренду.СкидкаНаценкаПриИзменении(ЭтотОбъект, ДополнительныеСвойства.ПараметрыДействия);
		ТипЦен = ПраваИНастройкиПользователя.Значение("ОсновнойТипЦенПродажи", ЭтотОбъект);
		Документы.ЗаявкаНаАренду.ТипЦенПриИзменении(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
		ВалютаДокумента = РаботаСКурсамиВалютПлатформа.ВалютаТипаЦены(ТипЦен,,Ложь);
		Документы.ЗаявкаНаАренду.ВалютаДокументаПриИзменении(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства.ПараметрыДействия);
		
	КонецЕсли;

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
	Если ВидАренды.Пустая() Тогда
		ВидАренды = ПраваИНастройкиПользователя.Значение("ОсновнойВидАренды");	
		Документы.ЗаявкаНаАренду.ВидАрендыПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	// Заполнить контрагента из события
	ДанныеЗаполненияКонтрагент = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполненияКопия, "Контрагент");
	Если ДанныеЗаполненияКонтрагент <> Неопределено Тогда
		
		Если ТипЗнч(ДанныеЗаполненияКонтрагент) = Тип("Строка") Тогда
			
			ОбращениеККлиенту = ДанныеЗаполненияКонтрагент;
			Заказчик = Справочники.Контрагенты.ПустаяСсылка();
			
		Иначе
			
			Заказчик = ДанныеЗаполненияКонтрагент;
			
		КонецЕсли;
		
		Документы.ЗаявкаНаАренду.ЗаказчикПриИзменении(ЭтотОбъект, Новый Структура("ПодставлятьНомерТелефона", Ложь));
		
	ИначеЕсли ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполненияКопия, "Имя") = "Событие" Тогда
		
		Если ЗначениеЗаполнено(ДанныеЗаполненияКопия.Событие.Контрагент) Тогда
			
			Заказчик = ДанныеЗаполненияКопия.Событие.Контрагент;
			
		КонецЕсли;
		
		Документы.ЗаявкаНаАренду.ЗаказчикПриИзменении(ЭтотОбъект, Новый Структура("ПодставлятьНомерТелефона", Ложь));
		
	КонецЕсли;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Если Не ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		
		Возврат;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	// Конец УтверждениеДокументов
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "ОбновлятьКИ", Ложь) Тогда
		КомментарийТелефона = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(ПредставлениеТелефонаСтрокой);
		УправлениеКонтактнойИнформациейАльфаАвто.СохранитьТелефон(Заказчик, ПредставлениеТелефона, КомментарийТелефона, Отказ);
		УправлениеКонтактнойИнформациейАльфаАвто.СохранитьЭлектроннуюПочту(Заказчик, АдресЭлектроннойПочты, Отказ);
	КонецЕсли;
	
	УправлениеКонтактнойИнформациейАльфаАвто.ПроверитьТелефонСМаскойПередЗаписью(ЭтотОбъект);
	
	СуммаЗаАренду            = Автомобили.Итог("СуммаВсего");
	СуммаДепозита            = Автомобили.Итог("СуммаДепозита");
	СуммаДополнительныхУслуг = Товары.Итог("СуммаВсего");
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// УтверждениеДокумментов
	УтверждениеДокументовСервер.ОбработкаУтвержденияПриЗаписи(ЭтотОбъект, Отказ);
	// Конец УтверждениеДокументов
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РаботаСГраницами.ПередУдалением(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	АрендаАвтомобилей.ПроверитьАвтомобилиВЭксплуатации(Автомобили.ВыгрузитьКолонку("Автомобиль"),
		ДатаНачала,
		ДатаОкончания,
		Отказ
	);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Производит заполнение объекта на основании документа "Заявка на ремонт"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_ЗаявкаНаРемонт(ДанныеЗаполнения,
                                           ТекстЗаполнения = "",
                                           СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.
			ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаявкаНаРемонт.Заказчик КАК Заказчик,
	|	ЗаявкаНаРемонт.Контрагент КАК Контрагент,
	|	ЗаявкаНаРемонт.ОбращениеККлиенту КАК ОбращениеККлиенту,
	|	ЗаявкаНаРемонт.ПредставлениеТелефона КАК ПредставлениеТелефона,
	|	ЗаявкаНаРемонт.ПредставлениеТелефонаСтрокой КАК ПредставлениеТелефонаСтрокой,
	|	ЗаявкаНаРемонт.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	ЗаявкаНаРемонт.АдресЭлектроннойПочтыСтрокой КАК АдресЭлектроннойПочтыСтрокой,
	|	ЗаявкаНаРемонт.Модель КАК Модель,
	|	ЗаявкаНаРемонт.Модель.Марка КАК Марка,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка) КАК ДоговорВзаиморасчетов,
	|	ЗаявкаНаРемонт.Ссылка КАК ДокументОснование,
	|	ЗаявкаНаРемонт.ДатаНачала КАК ДатаНачала,
	|	ЗаявкаНаРемонт.ДатаОкончания КАК ДатаОкончания,
	|	ЗаявкаНаРемонт.ВариантКомплектации КАК ВариантКомплектации,
	|	ЗаявкаНаРемонт.ВариантКомплектации.ТипКузова КАК ТипКузова,
	|	ЗаявкаНаРемонт.ВариантКомплектации.ТипДвигателя КАК ТипДвигателя,
	|	ЗаявкаНаРемонт.ВариантКомплектации.ТипКПП КАК ТипКПП,
	|	ЗаявкаНаРемонт.ВариантКомплектации.ТипПривода КАК ТипПривода,
	|	ЗаявкаНаРемонт.Автомобиль.ТипСалона КАК ТипСалона
	|ИЗ
	|	Документ.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
	|ГДЕ
	|	ЗаявкаНаРемонт.Ссылка = &ДанныеЗаполнения";
	Запрос.УстановитьПараметр("ДанныеЗаполнения", ДанныеЗаполнения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);	
		Документы.ЗаявкаНаАренду.КонтрагентПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта на основании документа "Рабочий лист"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_РабочийЛист(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.
			ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РабочийЛист.ПредставлениеТелефона КАК ПредставлениеТелефона,
	|	РабочийЛист.ПредставлениеТелефонаСтрокой КАК ПредставлениеТелефонаСтрокой,
	|	РабочийЛист.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	РабочийЛист.АдресЭлектроннойПочтыСтрокой КАК АдресЭлектроннойПочтыСтрокой,
	|	РабочийЛист.Ссылка КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА РабочийЛист.Автомобиль <> ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)
	|			ТОГДА РабочийЛист.Автомобиль.Модель
	|		ИНАЧЕ РабочийЛист.Модель
	|	КОНЕЦ КАК Модель,
	|	ВЫБОР
	|		КОГДА РабочийЛист.Автомобиль <> ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)
	|			ТОГДА РабочийЛист.Автомобиль.Марка
	|		ИНАЧЕ РабочийЛист.Марка
	|	КОНЕЦ КАК Марка,
	|	ВЫБОР
	|		КОГДА РабочийЛист.Автомобиль <> ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)
	|			ТОГДА РабочийЛист.Автомобиль.ВариантКомплектации
	|		ИНАЧЕ РабочийЛист.ВариантКомплектации
	|	КОНЕЦ КАК ВариантКомплектации,
	|	ВЫБОР
	|		КОГДА РабочийЛист.Автомобиль <> ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)
	|			ТОГДА РабочийЛист.Автомобиль.ТипСалона
	|		ИНАЧЕ РабочийЛист.ТипСалона
	|	КОНЕЦ КАК ТипСалона,
	|	ВЫБОР
	|		КОГДА РабочийЛист.Автомобиль <> ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)
	|			ТОГДА РабочийЛист.Автомобиль.ВариантКомплектации.ТипКузова
	|		ИНАЧЕ РабочийЛист.ВариантКомплектации.ТипКузова
	|	КОНЕЦ КАК ТипКузова,
	|	ВЫБОР
	|		КОГДА РабочийЛист.Автомобиль <> ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)
	|			ТОГДА РабочийЛист.Автомобиль.ВариантКомплектации.ТипДвигателя
	|		ИНАЧЕ РабочийЛист.ВариантКомплектации.ТипДвигателя
	|	КОНЕЦ КАК ТипДвигателя,
	|	ВЫБОР
	|		КОГДА РабочийЛист.Автомобиль <> ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)
	|			ТОГДА РабочийЛист.Автомобиль.ВариантКомплектации.ТипКПП
	|		ИНАЧЕ РабочийЛист.ТипКПП
	|	КОНЕЦ КАК ТипКПП,
	|	ВЫБОР
	|		КОГДА РабочийЛист.Автомобиль <> ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)
	|			ТОГДА РабочийЛист.Автомобиль.ВариантКомплектации.ТипПривода
	|		ИНАЧЕ РабочийЛист.ВариантКомплектации.ТипПривода
	|	КОНЕЦ КАК ТипПривода,
	|	РабочийЛист.Контрагент КАК Контрагент,
	|	РабочийЛист.Контрагент КАК Заказчик,
	|	РабочийЛист.ОбращениеККлиенту КАК ОбращениеККлиенту,
	|	ВЫБОР
	|		КОГДА РабочийЛист.Автомобиль <> ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)
	|			ТОГДА РабочийЛист.Автомобиль.Цвет
	|		ИНАЧЕ РабочийЛист.Цвет
	|	КОНЕЦ КАК Цвет
	|ИЗ
	|	Документ.РабочийЛист КАК РабочийЛист
	|ГДЕ
	|	РабочийЛист.Ссылка = &ДанныеЗаполнения";
	Запрос.УстановитьПараметр("ДанныеЗаполнения", ДанныеЗаполнения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);	
		Документы.ЗаявкаНаАренду.КонтрагентПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта на основании документа "Сводный ремонтный заказ"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_СводныйРемонтныйЗаказ(ДанныеЗаполнения,
	ТекстЗаполнения = "",
	СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.
			ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СводныйРемонтныйЗаказ.Заказчик КАК Заказчик,
	|	СводныйРемонтныйЗаказ.Заказчик КАК Контрагент,
	|	СводныйРемонтныйЗаказ.ПредставлениеТелефона КАК ПредставлениеТелефона,
	|	СводныйРемонтныйЗаказ.ПредставлениеТелефонаСтрокой КАК ПредставлениеТелефонаСтрокой,
	|	СводныйРемонтныйЗаказ.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	СводныйРемонтныйЗаказ.АдресЭлектроннойПочтыСтрокой КАК АдресЭлектроннойПочтыСтрокой,
	|	СводныйРемонтныйЗаказ.Ссылка КАК ДокументОснование,
	|	СводныйРемонтныйЗаказ.Автомобиль.Модель КАК Модель,
	|	СводныйРемонтныйЗаказ.Автомобиль.Марка КАК Марка,
	|	СводныйРемонтныйЗаказ.Автомобиль.ВариантКомплектации КАК ВариантКомплектации,
	|	СводныйРемонтныйЗаказ.Автомобиль.ТипСалона КАК ТипСалона,
	|	СводныйРемонтныйЗаказ.Автомобиль.ВариантКомплектации.ТипКузова КАК ТипКузова,
	|	СводныйРемонтныйЗаказ.Автомобиль.ВариантКомплектации.ТипДвигателя КАК ТипДвигателя,
	|	СводныйРемонтныйЗаказ.Автомобиль.ВариантКомплектации.ТипКПП КАК ТипКПП,
	|	СводныйРемонтныйЗаказ.Автомобиль.ВариантКомплектации.ТипПривода КАК ТипПривода,
	|	СводныйРемонтныйЗаказ.Автомобиль.Цвет КАК Цвет
	|ИЗ
	|	Документ.СводныйРемонтныйЗаказ КАК СводныйРемонтныйЗаказ
	|ГДЕ
	|	СводныйРемонтныйЗаказ.Ссылка = &ДанныеЗаполнения";
	Запрос.УстановитьПараметр("ДанныеЗаполнения", ДанныеЗаполнения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);	
		Документы.ЗаявкаНаАренду.КонтрагентПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта на основании документа "Событие"
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Событие(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Вызываем общий обработчик заполнения
	Если НЕ ОбработкаСобытийДокументаСервер.
			ОбработкаЗаполненияНаОсновании(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Событие.Контрагент КАК Контрагент,
	|	Событие.КонтактнаяИнформация КАК НомерТелефона,
	|	Событие.ОбращениеККлиенту КАК ОбращениеККлиенту,
	|	Событие.ПредставлениеТелефона КАК ПредставлениеТелефона,
	|	Событие.Ссылка КАК ДокументОснование,
	|	Событие.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	Событие.Контрагент КАК Заказчик,
	|	ДАТАВРЕМЯ(1,1,1) КАК ДатаНачала,
	|	ДАТАВРЕМЯ(1,1,1) КАК ДатаОкончания,
	|	Событие.Цель КАК УсловияИспользования
	|ИЗ
	|	Документ.Событие КАК Событие
	|ГДЕ
	|	Событие.Ссылка = &ДанныеЗаполнения";
	Запрос.УстановитьПараметр("ДанныеЗаполнения", ДанныеЗаполнения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		
		Документы.ЗаявкаНаАренду.КонтрагентПриИзменении(ЭтотОбъект);
		
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Производит заполнение объекта по передаваемой структуре
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
// Возвращаемое значение:
//  Булево - Признак возможности дальнейшей обработки события.
//
Функция ОбработкаЗаполнения_Структура(ДанныеЗаполнения, СтандартнаяОбработка = Истина) Экспорт

	// Если данные заполнения не указаны, значит производиться проверка существования обработчика заполнения у объекта.
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДатаНачала            = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "ДатаНачала");
	ДатаОкончания         = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "ДатаОкончания");
	ВидАренды             = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "ВидАренды");
	Документы.ЗаявкаНаАренду.ВидАрендыПриИзменении(ЭтотОбъект);
	
	Структура_Активы = ПолучитьЗначениеПараметраСтруктуры(ДанныеЗаполнения, "Автомобиль", Новый Массив);
	Если ТипЗнч(Структура_Активы) = Тип("Массив") Тогда
		Для Каждого Автомобиль Из Структура_Активы Цикл
			НоваяСтрока = Автомобили.Добавить();
			НоваяСтрока.Автомобиль = Автомобиль;
			Документы.ЗаявкаНаАренду.АвтомобилиАвтомобильПриИзменении(ЭтотОбъект, НоваяСтрока);
		КонецЦикла;
	Иначе
		НоваяСтрока = Автомобили.Добавить();
		НоваяСтрока.Автомобиль = Структура_Активы;
		Документы.ЗаявкаНаАренду.АвтомобилиАвтомобильПриИзменении(ЭтотОбъект, НоваяСтрока);
	КонецЕсли;
	
	// Возвращаем признак возможности дальнейшей обработки события
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли