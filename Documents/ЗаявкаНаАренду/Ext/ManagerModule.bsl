// Модуль менеджера документа "Заявка на аренду"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы. 
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура РассчитатьСтоимостьАренды(Объект, ПараметрыДействия = Неопределено)
	
	АрендаАвтомобилей.РассчитатьДокументАренды(Объект, ПараметрыДействия);	
	
КонецПроцедуры

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	
	ИтогПоАренде = Объект.Автомобили.Итог("СуммаВсего");
	ИтогПоТоварам = Объект.Товары.Итог("СуммаВсего");
	
	ИтогиОперации.Вставить("СуммаДокумента", ИтогПоАренде + ИтогПоТоварам);
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	СуммаНДС = Объект.Автомобили.Итог("СуммаНДС") + Объект.Товары.Итог("СуммаНДС");
	
	ИтогиОперации.Вставить("СуммаНДС",    СуммаНДС);
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента - ИтогиОперации.СуммаНДС);
	
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// Производит расчет суммы скидки/наценки по документу в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//
Функция РассчитатьСуммуСкидкиНаценки(Объект) Экспорт
	
	Объект.СуммаСкидкиНаценки =
		Объект.Автомобили.Итог("СуммаСкидки")
		+ Объект.Товары.Итог("СуммаСкидки")
		+ Объект.Товары.Итог("СуммаСкидкиСтроки");
	
КонецФункции // РассчитатьСуммуСкидкиНаценки()

Функция ПодготовитьМакетЗаявкаНаАренду(Объект, Макет, ЭтоТовары = Ложь)
	
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить("Товары");
	ТабличныеЧасти.Добавить("Автомобили");
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		
		ЕстьСкидка = ЕстьРеквизит(Объект, "СуммаСкидки", ТабличнаяЧасть) И (Объект[ТабличнаяЧасть].Итог("СуммаСкидки") <> 0);
		ЕстьСкидка = ЕстьСкидка ИЛИ (ЕстьРеквизит(Объект, "СуммаСкидкиСтроки", ТабличнаяЧасть)
			И (Объект[ТабличнаяЧасть].Итог("СуммаСкидкиСтроки") <> 0));
		Если ЕстьСкидка Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьСкидка Тогда
		
		Если ЭтоТовары Тогда
			ОбластьСкидка = Макет.Область("Скидка | Строка");
			ОбластьШапка  = Макет.Область("Скидка | ШапкаТаблицы");
			ОбластьПодвал = Макет.Область("Скидка | Подвал");
			ОбластьИтогоПоСтранице = Макет.Области.Найти("ИтогоПоСтранице");
		Иначе
			ОбластьСкидка = Макет.Область("Скидка | СтрокаАвтомобиль");
			ОбластьШапка  = Макет.Область("Скидка | ШапкаАвтомобили");
			ОбластьПодвал = Макет.Область("Скидка | ПодвалАвтомобили");
			ОбластьИтогоПоСтранице = Макет.Области.Найти("ИтогоПоСтраницеАвтомобили");
		КонецЕсли;
		
		Сч = ОбластьСкидка.Право;
		
		Пока Сч > (ОбластьСкидка.Право - 4) Цикл
			ОбластьСтрокаПраво = Макет.Область(ОбластьСкидка.Верх, Сч, ОбластьСкидка.Низ, Сч);
			ОбластьШапкаПраво  = Макет.Область(ОбластьШапка.Низ, Сч, ОбластьШапка.Низ, Сч);
			ОбластьСтрокаЛево  = Макет.Область(ОбластьСкидка.Верх, Сч - 1, ОбластьСкидка.Низ, Сч - 1);
			ОбластьШапкаЛево   = Макет.Область(ОбластьШапка.Низ, Сч - 1, ОбластьШапка.Низ, Сч - 1);
			ЗаполнитьЗначенияСвойств(ОбластьСтрокаПраво, ОбластьСтрокаЛево, , "ШиринаКолонки");
			ЗаполнитьЗначенияСвойств(ОбластьШапкаПраво, ОбластьШапкаЛево, , "ШиринаКолонки");
			Если ОбластьШапкаЛево.Параметр = Неопределено Тогда
				ОбластьШапкаПраво.Текст = ОбластьШапкаЛево.Текст;
			КонецЕсли;
			ОбластьСтрокаЛево.Очистить();
			ОбластьШапкаЛево.Очистить();
			Сч = Сч - 1;
		КонецЦикла;
				
		Макет.Область(ОбластьШапка.Низ, ОбластьСкидка.Право - 6, ОбластьШапка.Низ, ОбластьСкидка.Право - 4).Объединить();
		Макет.Область(ОбластьСтрокаЛево.Низ, ОбластьСкидка.Право - 6,
			ОбластьСтрокаЛево.Низ, ОбластьСкидка.Право - 4).Объединить();
		
		ОбластьПодвалСкидка = Макет.Область(ОбластьПодвал.Верх, ОбластьСкидка.Право - 1,
			ОбластьПодвал.Верх, ОбластьСкидка.Право);
		ОбластьПодвалСкидка.Объединить();
		ОбластьПодвалСкидка.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		ОбластьПодвалСкидка.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
		
		// объединим где есть ИтогоПоСтранице
		Если ЗначениеЗаполнено(ОбластьИтогоПоСтранице) Тогда
			Область = Макет.Область(ОбластьИтогоПоСтранице.Верх, ОбластьСкидка.Право - 1,
				ОбластьИтогоПоСтранице.Верх, ОбластьСкидка.Право);
			Область.Объединить();
			Область.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
			Область.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
		КонецЕсли;
	
	КонецЕсли;
	
	Если ЭтоТовары Тогда
		
		ОбластьТовар = Макет.Область("Товар");
		
		// проверим нужно ли выводить код в печатных формах
		ЕстьКод = ПраваИНастройкиПользователя.Значение("ВыводитьКодВПечатныхФормах");
		Если НЕ ЕстьКод И  Макет.Области.Найти("Код") <> Неопределено Тогда
			ОбластьКод = Макет.Область("Код");
			ОбластьТовар.ШиринаКолонки = ОбластьТовар.ШиринаКолонки + ОбластьКод.ШиринаКолонки;
			Макет.УдалитьОбласть(ОбластьКод, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		// теперь запишем параметры шапки
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		Если ЕстьКод Тогда
			КолонкаКода = УправлениеПечатьюПлатформа.ПолучитьПараметрыРежимаВыводаКодаВДокументах();
			ОбластьМакета.Параметры.ИмяКолонкиКод = СтрЗаменить(КолонкаКода, "/", Символы.ПС);
		КонецЕсли;
		
	Иначе
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаАвтомобили");
		
	КонецЕсли;
	
	// заполняем заголовок колонки НДС по типу цен
	Параметры = Новый Структура("НДС");
	Параметры.НДС = "НДС";
	Если ЕстьРеквизит(Объект, "ТипЦен") И Объект.ТипЦен.ЦенаВключаетНДС Тогда	// Если НДС включен
		Организация = Неопределено;
		ПодразделениеКомпании = Неопределено;
		ДатаСреза = Неопределено;
		
		Если ЕстьРеквизит(Объект, "Организация") Тогда
			Организация = Объект.Организация;
		КонецЕсли;
		
		Если ЕстьРеквизит(Объект, "ПодразделениеКомпании") Тогда
			ПодразделениеКомпании = Объект.ПодразделениеКомпании;
		КонецЕсли;
		
		Если ЕстьРеквизит(Объект, "Дата") Тогда
			ДатаСреза = Объект.Дата;
		КонецЕсли;
		
		Если НЕ ПолучитьПараметрыПлательщикаНДС(Организация, ПодразделениеКомпании, ДатаСреза).ОсвобожденОтНДС Тогда
			Параметры.НДС = НСтр("ru = 'в т.ч. НДС'");
		КонецЕсли;
	КонецЕсли;
	ОбластьМакета.Параметры.Заполнить(Параметры);
	
	Возврат ОбластьМакета;
	
КонецФункции

Функция ПолучитьПараметрыПодбора(Объект)
	
	ЕстьПараметры = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаявкаНаАренду.Марка КАК Марка,
		|	ЗаявкаНаАренду.Модель КАК Модель,
		|	ЗаявкаНаАренду.ВариантКомплектации КАК ВариантКомплектации,
		|	ЗаявкаНаАренду.ТипКПП КАК ТипКПП,
		|	ЗаявкаНаАренду.ТипПривода КАК ТипПривода,
		|	ЗаявкаНаАренду.ТипДвигателя КАК ТипДвигателя,
		|	ЗаявкаНаАренду.ТипКузова КАК ТипКузова,
		|	ЗаявкаНаАренду.ТипСалона КАК ТипСалона,
		|	ЗаявкаНаАренду.Цвет КАК Цвет
		|ИЗ
		|	Документ.ЗаявкаНаАренду КАК ЗаявкаНаАренду
		|ГДЕ
		|	ЗаявкаНаАренду.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Для Инд = 0 По 8 Цикл
			Если ЗначениеЗаполнено(Выборка[Инд]) Тогда
				ЕстьПараметры = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЕстьПараметры;
	
КонецФункции

// Процедра получения доступа к расчету скидок из менеджера.
//
Процедура РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти = "Товары", СкидкаШапкиАбсолютная = Ложь) Экспорт
	
	СкидкиНаценкиСервер.РассчитатьСкидкиСтроки(Объект, Строка, ИмяТабличнойЧасти, СкидкаШапкиАбсолютная);
	
КонецПроцедуры // РассчитатьСкидкиСтроки()

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	ОбязательныеРеквизиты.Добавить("ВидАренды");
	ОбязательныеРеквизиты.Добавить("Заказчик");
	ОбязательныеРеквизиты.Добавить("ДатаНачала");
	ОбязательныеРеквизиты.Добавить("ДатаОкончания");
	
	Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
		ОбязательныеРеквизиты.Добавить("Автомобили");
	КонецЕсли;

	ОбязательныеРеквизиты.Добавить("Автомобили.Автомобиль");
	
	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Товары.Количество");
	ОбязательныеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ОбязательныеРеквизиты.Добавить("Товары.Коэффициент");
	
	ДанныеВидаАренды = АрендаАвтомобилей.ДанныеВидаАренды(Объект.ВидАренды);
	
	Если ДанныеВидаАренды <> Неопределено И ДанныеВидаАренды.ТипАренды = Перечисления.ТипыРемонта.Платный Тогда
		ОбязательныеРеквизиты.Добавить("Контрагент");
		ОбязательныеРеквизиты.Добавить("ДоговорВзаиморасчетов");
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Уникальные поля таблицы товаров
	УникальныеТовары = Новый Массив();
	УникальныеТовары.Добавить("Номенклатура");
	УникальныеТовары.Добавить("ЕдиницаИзмерения");
	УникальныеТовары.Добавить("ИдентификаторАвтомобиля");
	
	// Уникальные поля таблицы автомобилей
	УникальныеАвтомобили = Новый Массив();
	УникальныеАвтомобили.Добавить("Автомобиль");
	
	// Структура уникальных реквизитов табличных частей
	УникальныеРеквизиты = Новый Структура();
	УникальныеРеквизиты.Вставить("Товары"       , УникальныеТовары);
	УникальныеРеквизиты.Вставить("Автомобили"   , УникальныеАвтомобили);
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьУникальныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	Если НЕ ПараметрыДействия.Свойство("ДанныеВидаАренды") Тогда
		ПараметрыДействия.Вставить("ДанныеВидаАренды", АрендаАвтомобилей.ДанныеВидаАренды(Объект.ВидАренды));
	КонецЕсли;
	
	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыДействия()

// Обработка пересчета табличных частей объекта.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаТабличнойЧастиАвтомобили.ВыполнитьПересчетТабличнойЧасти(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия для табличной части "Тарификация"
	ОбработкаТабличнойЧастиТарификация.ВыполнитьПересчетТабличнойЧасти(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
		
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СуммаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СуммаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс валюты взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсВалютыВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсВалютыВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Контрагент".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КонтрагентПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КонтрагентПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Договор взаиморасчетов".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДоговорВзаиморасчетовПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "ВидАренды".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВидАрендыПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если ПараметрыДействия.ДанныеВидаАренды.ТипЦен <> Объект.ТипЦен Тогда
		Объект.ТипЦен = ПараметрыДействия.ДанныеВидаАренды.ТипЦен;
		ТипЦенПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
	РассчитатьСтоимостьАренды(Объект, ПараметрыДействия);
	
	Если ПараметрыДействия.ДанныеВидаАренды.ТипАренды = Перечисления.ТипыРемонта.Бесплатный Тогда
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Объект.ДоговорВзаиморасчетов = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
		
		Объект.Товары.Очистить();
		
	ИначеЕсли Объект.Контрагент.Пустая() Тогда
		Объект.Контрагент = Объект.Заказчик;
		КонтрагентПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // ВидАрендыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "ДатаНачала".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаНачалаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.ДатаНачала >= Объект.ДатаОкончания Тогда
		Объект.ДатаОкончания = '00010101';
	КонецЕсли;
	
	РассчитатьСтоимостьАренды(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДатаНачалаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "ДатаОкончания".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаОкончанияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Если Объект.ДатаНачала >= Объект.ДатаОкончания Тогда
		Объект.ДатаНачала = '00010101';
	КонецЕсли;
	
	РассчитатьСтоимостьАренды(Объект, ПараметрыДействия);
	
КонецПроцедуры // ДатаОкончанияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Заказчик".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ЗаказчикПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// При вводе на основании События оставим номер, указанный в Событии.
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "ПодставлятьНомерТелефона", Истина) Тогда
		
		// Заполняет системные поля телефона и электронной почты в документе
		УправлениеКонтактнойИнформациейАльфаАвто.ЗаполнитьКонтактнуюИнформациюВДокументе(
			Объект,
			Объект.Заказчик,
			ПараметрыДействия
		);
		
	КонецЕсли;
	
	Если ПараметрыДействия.ДанныеВидаАренды.ТипАренды = Перечисления.ТипыРемонта.Платный 
		И Объект.Контрагент.Пустая() Тогда
		Объект.Контрагент = Объект.Заказчик;
		КонтрагентПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // ЗаказчикПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Состояние".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СостояниеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если Объект.Состояние = Перечисления.СостояниеЗаявкиНаРемонт.Отклонено Тогда
		ПараметрыДействия.Вставить("ЗапроситьПричинуОтказа", Истина);
	Иначе
		Объект.ПричинаОтказаОтОбслуживания = Справочники.ПричиныОтказаОтОбслуживания.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Скидка наценка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	Для Каждого Строка Из Объект.Товары Цикл
		Строка.ЗначениеСкидкиШапкиИзменено = Ложь;
	КонецЦикла;
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкидкаНаценкаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // СкидкаНаценкаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Карточка".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КарточкаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КарточкаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтомобили

// Обработчик события возникающего при изменении данных реквизита "Автомобиль"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиАвтомобильПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// потом убрать 
	Если ПустаяСтрока(Строка.ИдентификаторАвтомобиля) Тогда
		Строка.ИдентификаторАвтомобиля = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	АрендаАвтомобилей.РассчитатьСтоимостьАренды(Объект, Строка, ПараметрыДействия);
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	АрендаАвтомобилей.РассчитатьСуммуСтроки(Объект, Строка, ПараметрыДействия);
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	АрендаАвтомобилей.РассчитатьСуммуСтроки(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	АрендаАвтомобилей.РассчитатьСуммуСтроки(Объект, Строка, ПараметрыДействия, "СуммаСкидки");
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	АрендаАвтомобилей.РассчитатьСуммуСтроки(Объект, Строка, ПараметрыДействия, "СуммаВсего");
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки"
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвтомобилиПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	АрендаАвтомобилей.РассчитатьСуммуСтроки(Объект, Строка, ПараметрыДействия, "ПроцентСкидки");
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
		
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
		
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
		
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
		
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
		
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Скидка на товар" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СкидкаНаТоварПриИзменении(Объект, Строка, ПараметрыДействия);
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ТоварыПроцентСкидкиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Процент скидки строки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ПроцентСкидкиСтрокиПриИзменении(Объект, Строка, ПараметрыДействия);
	
	РассчитатьСуммуСкидкиНаценки(Объект);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
		
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗаявкаНаАренду",
		"ПФ_MXL_ЗаявкаНаАренду",
		НСтр("ru = 'Заявка на аренду'"),
		СсылкаНаДокумент);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик печати документа
//
// Параметры:
//  МассивОбъектов         - Массив           - массив объектов для формирования печатных форм
//  ПараметрыПечати        - Структура        - дополнительные параметры печати
//  КоллекцияПечатныхФорм  - Таблица значений - таблица с идентификаторами печатных форм и макетами печати
//  ОбъектыПечати          - Структура        - список областей печатной формы в разрезе документов
//  ПараметрыВывода        - Структура        - дополнительные параметры вывода формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ЗаявкаНаАренду") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ЗаявкаНаАренду",
															НСтр("ru = 'Заявка на аренду'"),
															ПечатьЗаявкаНаАренду(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Функция печати заявки на аренду.
//
Функция ПечатьЗаявкаНаАренду(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Валюта печати
		ВалютаПечатногоДокумента = Документ.ВалютаДокумента;
		
		// Получим макет печатной формы.
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявкаНаАренду.ПФ_MXL_ЗаявкаНаАренду");
		
		ОбластьЗаголовок        = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы     = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		ОбластьШапкаАвтомобили  = ПодготовитьМакетЗаявкаНаАренду(Документ, Макет);
		ОбластьСтрока           = Макет.ПолучитьОбласть("Строка");
		ОбластьСтрокаАвтомобили = Макет.ПолучитьОбласть("СтрокаАвтомобиль");
		ОбластьИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьИтогПоСтраницеАвтомобили = Макет.ПолучитьОбласть("ИтогПоСтраницеАвтомобили");
		ОбластьПодвал           = Макет.ПолучитьОбласть("Подвал");
		ОбластьПодвалАвтомобили = Макет.ПолучитьОбласть("ПодвалАвтомобили");
		// Заполним заголовок макета.
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации = УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(
			Документ.Организация, , ДополнительныеПараметры);
		
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ПредставлениеЗаказчика = ?(ЗначениеЗаполнено(Документ.Заказчик), Документ.Заказчик, Документ.Обращение);
		
		ДатаС = Документ.ДатаНачала;
		ДатаПо = Документ.ДатаОкончания;
		ПериодАренды = Новый Структура("ДатаС,ВремяС,ДатаПо,ВремяПо", Формат(ДатаС, "ДЛФ=D"),
			Формат(ДатаС, "ДЛФ=T"), Формат(ДатаПо, "ДЛФ=D"), Формат(ДатаПо, "ДЛФ=T"));
		ЗаполнитьЗначенияСвойств(ОбластьЗаголовок.Параметры, ПериодАренды);
		ОбластьЗаголовок.Параметры.ПредставлениеЗаказчика = СтрШаблон(НСтр("ru = '%1 %2 %3'"),
			ПредставлениеЗаказчика, Документ.ПредставлениеТелефона, Документ.АдресЭлектроннойПочты);
		ОбластьЗаголовок.Параметры.ВидАренды = Документ.ВидАренды;
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ОбластьЗаголовок.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
		
		// Выведем или удалим ШК.
		УправлениеПечатьюПлатформа.ОбработатьШтрихКодОбъекта(ОбластьЗаголовок, Документ);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// Заполним область параметров подбора.
		Если ПолучитьПараметрыПодбора(Документ) Тогда
			
			ОбластьПараметрыПодбора = Макет.ПолучитьОбласть("ПараметрыПодбора");
			ЗаполнитьЗначенияСвойств(ОбластьПараметрыПодбора.Параметры, Документ);
			ТабличныйДокумент.Вывести(ОбластьПараметрыПодбора);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Документ.УсловияИспользования) Тогда
			
			ОбластьУсловия = Макет.ПолучитьОбласть("Условия");
			ОбластьУсловия.Параметры.УсловияЭксплуатации = Документ.УсловияИспользования;
			ТабличныйДокумент.Вывести(ОбластьУсловия);
			
		КонецЕсли;
		
		НомерСтраницы = 2;
		НомерСтраницыПредыдущий = 2;
		
		СуммаВсегоАвтомобили = 0;
		КоличествоАвтомобили = 0;
		Если Документ.Автомобили.Количество() > 0 Тогда
			
			ТабличныйДокумент.Вывести(ОбластьШапкаАвтомобили);
			
			// Готовим шапку
			СтруктураИтоговПоСтранице = Новый Структура();
			СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", ВалютаПечатногоДокумента);
			СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
			СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
			СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
			ОбластьШапкаАвтомобили.Параметры.ТекстЗаголовка = ТекстЗаголовка;
			ОбластьШапкаАвтомобили.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы; 
			
			ВыборкаТабличнойЧастиАвтомобили = Документ.Автомобили.Выгрузить();
			
			Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧастиАвтомобили Цикл
				
				СтруктураСтроки = УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхСтрокиДляАвтомобилей(СтрокаТЧ, Документ);
				Цена = Число(СтруктураСтроки.СуммаБезНДС) + Число(СтруктураСтроки.ПредставлениеСкидки);
				СтруктураСтроки.Сумма = Формат(Цена, "ЧДЦ=2");
				ОбластьСтрокаАвтомобили.Параметры.Заполнить(СтруктураСтроки);
				
				// Доп. области
				мсвДопОбластиПодвала = Неопределено;
				Если Документ.Автомобили.Индекс(СтрокаТЧ) = Документ.Автомобили.Количество() - 1 Тогда
					мсвДопОбластиПодвала = Новый Массив;
					мсвДопОбластиПодвала.Добавить(ОбластьПодвалАвтомобили);
				КонецЕсли;
				
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрокаАвтомобили,
					ОбластьШапкаАвтомобили, ОбластьИтогПоСтраницеАвтомобили, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
					мсвДопОбластиПодвала);
				
				// Инициализация итогов по странице.
				Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
					СтруктураИтоговПоСтранице = Новый Структура();
					СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", ВалютаПечатногоДокумента);
					СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
					СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
					СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
					НомерСтраницыПредыдущий   = НомерСтраницы;
					ОбластьШапкаАвтомобили.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
				КонецЕсли;
				
				// Добавляем итоги
				УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
			КонецЦикла;
			
			// Выводим последний подвал, если страниц больше единицы.
			Если НомерСтраницы > 2 Тогда
				УправлениеПечатьюПлатформа.
				ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогПоСтраницеАвтомобили, СтруктураИтоговПоСтранице, Документ);
			КонецЕсли;
			
			// Заполнение подвала и итогов.
			ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
			ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
			
			ОбластьПодвалАвтомобили.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
			СуммаВсего = ВыборкаТабличнойЧастиАвтомобили.Итог("СуммаВсего");
			ОбластьПодвалАвтомобили.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
			НДСВсего = ВыборкаТабличнойЧастиАвтомобили.Итог("СуммаНДС");
			ОбластьПодвалАвтомобили.Параметры.НДСВсего = Формат(НДСВсего, ФорматВыводаСуммы);
			Если ВыборкаТабличнойЧастиАвтомобили.Итог("СуммаСкидки") > 0 Тогда
				
				СкидкаВсего = ВыборкаТабличнойЧастиАвтомобили.Итог("СуммаСкидки");
				Попытка
					СкидкаВсего = СкидкаВсего + ВыборкаТабличнойЧастиАвтомобили.Итог("СуммаСкидкиСтроки");
				Исключение
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка расчета скидки'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				ОбластьПодвалАвтомобили.Параметры.СкидкаВсего = Формат(СкидкаВсего, ФорматВыводаСуммы);
				
			КонецЕсли;
			
			УправлениеПечатьюПлатформа.
			ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвалАвтомобили, , , НомерСтраницы, , Документ);
			
			СуммаВсегоАвтомобили = СуммаВсего;
			КоличествоАвтомобили = ВыборкаТабличнойЧастиАвтомобили.Количество();
		КонецЕсли;
		
		СуммаВсегоТовары = 0;
		КоличествоТовары = 0;
		Если Документ.Товары.Количество() > 0 Тогда
			
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			// Готовим шапку
			СтруктураИтоговПоСтранице = Новый Структура();
			СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", ВалютаПечатногоДокумента);
			СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
			СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
			СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
			ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
			ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
			
			// Заполняем ТЧ
			ВыборкаТабличнойЧасти = Документ.Товары.Выгрузить();
			
			Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
				
				ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,
					УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ));
				
				// Доп. области
				мсвДопОбластиПодвала = Неопределено;
				Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
					мсвДопОбластиПодвала = Новый Массив;
					мсвДопОбластиПодвала.Добавить(ОбластьПодвал);
				КонецЕсли;
				
				НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
					ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
					мсвДопОбластиПодвала);
				
				// Инициализация итогов по странице.
				Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
					СтруктураИтоговПоСтранице = Новый Структура();
					СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", ВалютаПечатногоДокумента);
					СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
					СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
					СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
					НомерСтраницыПредыдущий   = НомерСтраницы;
					ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
				КонецЕсли;
				
				// Добавляем итоги
				УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
			КонецЦикла;
			
			// Выводим последний подвал, если страниц больше единицы.
			Если НомерСтраницы > 2 Тогда
				УправлениеПечатьюПлатформа.
				ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
			КонецЕсли;
			
			// Заполнение подвала и итогов.
			ФорматВыводаКоличества = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаКоличества(Документ);
			ФорматВыводаСуммы      = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
				
			ОбластьПодвал.Параметры.ВалютаДокумента = ВалютаПечатногоДокумента;
			СуммаВсего = ВыборкаТабличнойЧасти.Итог("СуммаВсего");
			ОбластьПодвал.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
			НДСВсего = ВыборкаТабличнойЧасти.Итог("СуммаНДС");
			ОбластьПодвал.Параметры.НДСВсего = Формат(НДСВсего, ФорматВыводаСуммы);
			Если ВыборкаТабличнойЧасти.Итог("СуммаСкидки") > 0
				ИЛИ ВыборкаТабличнойЧасти.Итог("СуммаСкидкиСтроки") > 0 Тогда
				
				СкидкаВсего = ВыборкаТабличнойЧасти.Итог("СуммаСкидки");
				Попытка
					СкидкаВсего = СкидкаВсего + ВыборкаТабличнойЧасти.Итог("СуммаСкидкиСтроки");
				Исключение
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка расчета скидки'"),
       				УровеньЖурналаРегистрации.Ошибка,,,
       				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
				ОбластьПодвал.Параметры.СкидкаВсего = Формат(СкидкаВсего, ФорматВыводаСуммы);
			КонецЕсли;
			
			УправлениеПечатьюПлатформа.
			ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
			
			СуммаВсегоТовары = СуммаВсего;
			КоличествоТовары = ВыборкаТабличнойЧасти.Количество();
		КонецЕсли;
		
		КоличествоПозиций = КоличествоТовары + КоличествоАвтомобили;
		ОбластьПодвалДокумента = Макет.ПолучитьОбласть("ПодвалДокумента");
		ОбластьПодвалДокумента.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'") + " " + КоличествоПозиций
				+ " " + НСтр("ru = 'на сумму'") + " " 
				+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсегоАвтомобили + СуммаВсегоТовары, ВалютаПечатногоДокумента);
				
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвалДокумента, , , , , Документ);
		// Блок области
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявкаНаАренду_ЗаявкаНаАренду";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьРеализацияТоваров()

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ДоговорАренды);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ЖалобаКлиента);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);

	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	 КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат СозданиеНаОснованииАльфаАвто.ДобавитьКомандуСозданияНаОсновании(КомандыСоздатьНаОсновании,
		Метаданные.Документы.ЗаявкаНаАренду);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
