// Модуль менеджера документа "Закрытие смены"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ОбработчикиОбновления

// Возвращает все документы, в которых присутствуют коды маркировки.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка результата запроса, содержащая требуемые документы.
//
Функция ДокументыСКодамиМаркировки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗакрытиеСменыКодыМаркировки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗакрытиеСмены.КодыМаркировки КАК ЗакрытиеСменыКодыМаркировки
	|ГДЕ
	|	ЗакрытиеСменыКодыМаркировки.КодМаркировки <> """"";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Процедура зачистки криптохвостов кодов маркировки.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ЗакрытиеСмены - документ, для которого выполняется действие.
//
Процедура ОтрезатьКриптохвосты(ДокументОбъект) Экспорт
	
	Для Каждого СтрокаТоваров Из ДокументОбъект.КодыМаркировки Цикл
		СтрокаТоваров.КодМаркировки = МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(СтрокаТоваров.КодМаркировки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Движения документа выполненные по регистру ГТД
//
// Параметры:
// 	Сам - Документ.Ссылка - документ по которому выбираются движения регистра ГТД
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит результат запроса к регистру ГТД.
//
Функция ДвиженияПоГТД(Сам) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ГТДПартийТоваровКомпании.Номенклатура,
		|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры,
		|	ГТДПартийТоваровКомпании.ГТД,
		|	СУММА(ГТДПартийТоваровКомпании.Количество) КАК Количество,
		|	ГТДПартийТоваровКомпании.Партия
		|ИЗ
		|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
		|ГДЕ
		|	ГТДПартийТоваровКомпании.Регистратор = &Сам
		|
		|СГРУППИРОВАТЬ ПО
		|	ГТДПартийТоваровКомпании.ХарактеристикаНоменклатуры,
		|	ГТДПартийТоваровКомпании.ГТД,
		|	ГТДПартийТоваровКомпании.Номенклатура,
		|	ГТДПартийТоваровКомпании.Партия"
	);
	Запрос.УстановитьПараметр("Сам", Сам);	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст = 
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ПодразделениеКомпании)
		|	И ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(СкладКомпании)";
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти     

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит расчет значений итоговых показателей по операции в целом.
//
// Параметры:
//  Объект      - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  Расширенные - Булево               - Признак получения расширенных сведений об итогах операции.
//
Функция РассчитатьИтогиОперации(Объект, Расширенные = Ложь) Экспорт
	
	// Формируем перечень основной информации об итогах операции
	ИтогиОперации = Новый Структура();
	СуммаДокумента = Объект.Товары.Итог("СуммаВсего")
		+ Объект.Оплаты.Итог("СуммаОплата")
		- Объект.Оплаты.Итог("СуммаВозвратОплата")
		- Объект.Возвраты.Итог("СуммаВсего")
		- Объект.ВозвратОплаты.Итог("СуммаОплата");
	ИтогиОперации.Вставить("СуммаДокумента", СуммаДокумента);
	
	// Производим установку полученных значений в итоговые показатели объекта
	Если НЕ Расширенные Тогда
		Возврат ИтогиОперации;
	КонецЕсли;
	
	// Формируем перечень расширенной информации об итогах операции
	ИтогиОперации.Вставить("СуммаНДС",    Объект.Товары.Итог("СуммаНДС") - Объект.Возвраты.Итог("СуммаНДС"));
	ИтогиОперации.Вставить("СуммаБезНДС", ИтогиОперации.СуммаДокумента - ИтогиОперации.СуммаНДС);
		
	// Возвращаем сведения об итогах операции
	Возврат ИтогиОперации;
	
КонецФункции // РассчитатьИтогиОперации()

// BSLLS:MethodSize-off

Функция ПолучитьТекстЗапросаДляСверткиЧеков()
	
	Возврат 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекиККМ.КассаККМ КАК КассаККМ,
	|	ЧекиККМ.Документ КАК Документ,
	|	ЧекиККМ.ЭтоВозврат КАК ЭтоВозврат,
	|	ЧекиККМ.Контрагент КАК Контрагент,
	|	ЧекиККМ.Карточка КАК Карточка,
	|	ЧекиККМ.СкидкаНаценка КАК СкидкаНаценка,
	|	ЧекТовары.Номенклатура КАК Номенклатура,
	|	ЧекТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЧекТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЧекТовары.Коэффициент КАК Коэффициент,
	|	ЧекТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЧекТовары.СкидкаНаТовар КАК СкидкаНаТовар,
	|	ЧекТовары.МестоРазмещения КАК МестоРазмещения,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА 0
	|		ИНАЧЕ ЧекТовары.Количество
	|	КОНЕЦ КАК КоличествоПродано,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА ЧекТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоВозврат,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА 0
	|		ИНАЧЕ ЧекТовары.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА 0
	|		ИНАЧЕ ЧекТовары.СуммаНДС
	|	КОНЕЦ КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА 0
	|		ИНАЧЕ ЧекТовары.СуммаСкидки
	|	КОНЕЦ КАК СуммаСкидки,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА 0
	|		ИНАЧЕ ЧекТовары.СуммаСкидкиСтроки
	|	КОНЕЦ КАК СуммаСкидкиСтроки,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА 0
	|		ИНАЧЕ ЧекТовары.СуммаВсего
	|	КОНЕЦ КАК СуммаВсего,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА 0
	|		ИНАЧЕ ЧекТовары.Количество
	|	КОНЕЦ * ЧекТовары.Коэффициент КАК КоличествоНоменклатуры,
	|	ЧекиККМ.КоличествоЧеков КАК КоличествоЧеков,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА ЧекТовары.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВозврата,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА ЧекТовары.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНДСВозврата,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА ЧекТовары.СуммаСкидки
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСкидкиВозврата,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА ЧекТовары.СуммаСкидкиСтроки
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСкидкиСтрокиВозврата,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА ЧекТовары.СуммаВсего
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВсегоВозврата,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.ЭтоВозврат
	|			ТОГДА ЧекТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ * ЧекТовары.Коэффициент КАК КоличествоНоменклатрыВозврата,
	|	ЧекиККМ.НомерФискальногоЧека КАК НомерФискальногоЧека,
	|	ЧекиККМ.ДатаРеализации КАК ДатаРеализации,
	|	ЧекТовары.ИдентификаторТовара КАК ИдентификаторТовара
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	(ВЫБРАТЬ
	|		Документы.КассаККМ КАК КассаККМ,
	|		Документы.ФР КАК ФР,
	|		Документы.Документ КАК Документ,
	|		Документы.Дата КАК Дата,
	|		Документы.Проведен КАК Проведен,
	|		Документы.ЭтоВозврат КАК ЭтоВозврат,
	|		Документы.ЭтоПродажа КАК ЭтоПродажа,
	|		Документы.Пробит КАК Пробит,
	|		Документы.КоличествоЧеков КАК КоличествоЧеков,
	|		Документы.СуммаПродаж КАК СуммаПродаж,
	|		Документы.СуммаДокумента КАК СуммаДокумента,
	|		Документы.Контрагент КАК Контрагент,
	|		Документы.Карточка КАК Карточка,
	|		Документы.СкидкаНаценка КАК СкидкаНаценка,
	|		Документы.НомерФискальногоЧека КАК НомерФискальногоЧека,
	|		Документы.ДатаРеализации КАК ДатаРеализации
	|	ИЗ
	|		Документы КАК Документы
	|	ГДЕ
	|		Документы.Проведен
	|		И Документы.ЭтоПродажа
	|		И Документы.НеУчтен) КАК ЧекиККМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Чек.Товары КАК ЧекТовары
	|		ПО ЧекиККМ.Документ = ЧекТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документы.КассаККМ КАК КассаККМ,
	|	ВЫБОР
	|		КОГДА НЕ ЧекОплаты.ТипОплаты ЕСТЬ NULL
	|			ТОГДА ЧекОплаты.ТипОплаты
	|		КОГДА НЕ ЧекНаОплатуОплаты.ТипОплаты ЕСТЬ NULL
	|			ТОГДА ЧекНаОплатуОплаты.ТипОплаты
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Наличные)
	|	КОНЕЦ КАК ТипОплаты,
	|	ВЫБОР
	|		КОГДА НЕ ЧекОплаты.ТипПлатежнойКарты ЕСТЬ NULL
	|			ТОГДА ЧекОплаты.ТипПлатежнойКарты
	|		КОГДА НЕ ЧекНаОплатуОплаты.ТипПлатежнойКарты ЕСТЬ NULL
	|			ТОГДА ЧекНаОплатуОплаты.ТипПлатежнойКарты
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТипыПлатежныхКарт.ПустаяСсылка)
	|	КОНЕЦ КАК ТипПлатежнойКарты,
	|	ВЫБОР
	|		КОГДА НЕ ЧекОплаты.Карточка ЕСТЬ NULL
	|			ТОГДА ЧекОплаты.Карточка
	|		КОГДА НЕ ЧекНаОплатуОплаты.Карточка ЕСТЬ NULL
	|			ТОГДА ЧекНаОплатуОплаты.Карточка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Карточки.ПустаяСсылка)
	|	КОНЕЦ КАК Карточка,
	|	ВЫБОР
	|		КОГДА НЕ ЧекОплаты.Контрагент ЕСТЬ NULL
	|			ТОГДА ЧекОплаты.Контрагент
	|		КОГДА НЕ ЧекНаОплатуОплаты.Контрагент ЕСТЬ NULL
	|			ТОГДА ЧекНаОплатуОплаты.Контрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА НЕ ЧекОплаты.ДоговорВзаиморасчетов ЕСТЬ NULL
	|			ТОГДА ЧекОплаты.ДоговорВзаиморасчетов
	|		КОГДА НЕ ЧекНаОплатуОплаты.ДоговорВзаиморасчетов ЕСТЬ NULL
	|			ТОГДА ЧекНаОплатуОплаты.ДоговорВзаиморасчетов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыВзаиморасчетов.ПустаяСсылка)
	|	КОНЕЦ КАК ДоговорВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА Документы.ЭтоПродажа
	|			ТОГДА Документы.КоличествоЧеков
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоЧеков,
	|	ВЫБОР
	|		КОГДА Документы.ЭтоВозврат
	|				ИЛИ НЕ Документы.ЭтоПродажа
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ЧекОплаты.Сумма, 0) - ЕСТЬNULL(ЧекОплаты.Сдача, 0)
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА НЕ Документы.ЭтоВозврат
	|				ИЛИ НЕ Документы.ЭтоПродажа
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ЧекОплаты.Сумма, 0) - ЕСТЬNULL(ЧекОплаты.Сдача, 0)
	|	КОНЕЦ КАК СуммаВозврат,
	|	ВЫБОР
	|		КОГДА НЕ Документы.ЭтоПродажа
	|			ТОГДА Документы.КоличествоЧеков
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоЧековОплата,
	|	ВЫБОР
	|		КОГДА Документы.ЭтоВозврат
	|				ИЛИ Документы.ЭтоПродажа
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ЧекНаОплатуОплаты.Сумма, Документы.СуммаДокумента) - ЕСТЬNULL(ЧекНаОплатуОплаты.Сдача, 0)
	|	КОНЕЦ КАК СуммаОплата,
	|	ВЫБОР
	|		КОГДА НЕ Документы.ЭтоВозврат
	|				ИЛИ Документы.ЭтоПродажа
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ЧекНаОплатуОплаты.Сумма, Документы.СуммаДокумента) - ЕСТЬNULL(ЧекНаОплатуОплаты.Сдача, 0)
	|	КОНЕЦ КАК СуммаВозвратОплата,
	|	ВЫБОР
	|		КОГДА Документы.ЭтоВозврат
	|			ТОГДА Документы.КоличествоЧеков
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоВозврат
	|ПОМЕСТИТЬ Оплаты
	|ИЗ
	|	Документы КАК Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Чек.Оплаты КАК ЧекОплаты
	|		ПО Документы.Документ = ЧекОплаты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекНаОплату.Оплаты КАК ЧекНаОплатуОплаты
	|		ПО Документы.Документ = ЧекНаОплатуОплаты.Ссылка
	|ГДЕ
	|	Документы.Проведен
	|	И Документы.НеУчтен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Документы.Дата КАК Дата
	|ИЗ
	|	Документы КАК Документы
	|ГДЕ
	|	Документы.Проведен
	|	И Документы.НеУчтен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Коэффициент КАК Коэффициент,
	|	Товары.МестоРазмещения КАК МестоРазмещения,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.ИдентификаторТовара КАК ИдентификаторТовара,
	|	СУММА(Товары.КоличествоПродано) КАК Количество,
	|	СУММА(Товары.Сумма) КАК Сумма,
	|	СУММА(Товары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(Товары.СуммаСкидки + Товары.СуммаСкидкиСтроки) КАК СуммаСкидки,
	|	СУММА(Товары.СуммаВсего) КАК СуммаВсего,
	|	СУММА(Товары.КоличествоЧеков) КАК КоличествоЧеков
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	Товары.КоличествоПродано <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.ЕдиницаИзмерения,
	|	Товары.Коэффициент,
	|	Товары.МестоРазмещения,
	|	Товары.ХарактеристикаНоменклатуры,
	|	Товары.СтавкаНДС,
	|	Товары.ИдентификаторТовара
	|
	|УПОРЯДОЧИТЬ ПО
	|	МестоРазмещения,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Коэффициент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Оплаты.КассаККМ КАК Касса,
	|	Оплаты.ТипОплаты КАК ТипОплаты,
	|	Оплаты.ТипПлатежнойКарты КАК ТипПлатежнойКарты,
	|	Оплаты.Карточка КАК Карточка,
	|	Оплаты.Контрагент КАК Контрагент,
	|	Оплаты.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	СУММА(Оплаты.КоличествоЧеков) КАК КоличествоЧеков,
	|	СУММА(Оплаты.Сумма) КАК Сумма,
	|	СУММА(0) КАК СуммаВозврат,
	|	СУММА(Оплаты.КоличествоЧековОплата) КАК КоличествоЧековОплата,
	|	СУММА(Оплаты.СуммаОплата) КАК СуммаОплата,
	|	СУММА(0) КАК СуммаВозвратОплата
	|ИЗ
	|	Оплаты КАК Оплаты
	|ГДЕ
	|	НЕ(Оплаты.Сумма = 0
	|				И Оплаты.СуммаОплата = 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	Оплаты.КассаККМ,
	|	Оплаты.ТипОплаты,
	|	Оплаты.ТипПлатежнойКарты,
	|	Оплаты.Карточка,
	|	Оплаты.Контрагент,
	|	Оплаты.ДоговорВзаиморасчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Оплаты.КассаККМ,
	|	ТипОплаты,
	|	ТипПлатежнойКарты,
	|	Карточка,
	|	Контрагент,
	|	ДоговорВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Скидки.СкидкаНаценка КАК СкидкаНаценка,
	|	СУММА(Скидки.Сумма) КАК Сумма,
	|	СУММА(Скидки.СуммаСкидки) КАК СуммаСкидки,
	|	СУММА(Скидки.СуммаВсего) КАК СуммаВсего,
	|	Скидки.Карточка КАК Карточка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Скидки.КоличествоЧеков) КАК КоличествоЧеков
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.СкидкаНаценка КАК СкидкаНаценка,
	|		Товары.Сумма - Товары.СуммаВозврата КАК Сумма,
	|		Товары.СуммаСкидки - Товары.СуммаСкидкиВозврата КАК СуммаСкидки,
	|		Товары.СуммаВсего - Товары.СуммаВсегоВозврата КАК СуммаВсего,
	|		Товары.Карточка КАК Карточка,
	|		Товары.Документ КАК КоличествоЧеков
	|	ИЗ
	|		Товары КАК Товары
	|	ГДЕ
	|		НЕ Товары.СкидкаНаценка = ЗНАЧЕНИЕ(Справочник.ТипыСкидок.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Товары.СкидкаНаТовар,
	|		Товары.Сумма - Товары.СуммаВозврата,
	|		Товары.СуммаСкидкиСтроки - Товары.СуммаСкидкиСтрокиВозврата,
	|		Товары.СуммаВсего - Товары.СуммаВсегоВозврата,
	|		Товары.Карточка,
	|		Товары.Документ
	|	ИЗ
	|		Товары КАК Товары
	|	ГДЕ
	|		НЕ Товары.СкидкаНаТовар = ЗНАЧЕНИЕ(Справочник.ТипыСкидок.ПустаяСсылка)) КАК Скидки
	|
	|СГРУППИРОВАТЬ ПО
	|	Скидки.СкидкаНаценка,
	|	Скидки.Карточка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СкидкаНаценка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.Контрагент КАК Контрагент,
	|	Товары.Карточка КАК Карточка,
	|	СУММА(Товары.Сумма - Товары.СуммаВозврата) КАК Сумма,
	|	СУММА(Товары.СуммаСкидки + Товары.СуммаСкидкиСтроки - Товары.СуммаСкидкиВозврата - Товары.СуммаСкидкиСтрокиВозврата) КАК СуммаСкидки,
	|	СУММА(Товары.СуммаВсего - Товары.СуммаВсегоВозврата) КАК СуммаВсего,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА НЕ Товары.ЭтоВозврат
	|				ТОГДА Товары.Документ
	|		КОНЕЦ) КАК КоличествоЧеков,
	|	СУММА(Товары.КоличествоНоменклатуры - Товары.КоличествоНоменклатрыВозврата) КАК КоличествоНоменклатуры
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	НЕ Товары.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Контрагент,
	|	Товары.Карточка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	Карточка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.КассаККМ КАК КассаККМ,
	|	ЧекДополнительныеРеквизиты.Значение КАК Свойство,
	|	СУММА(Товары.Сумма) КАК Сумма,
	|	СУММА(Товары.СуммаСкидки + Товары.СуммаСкидкиСтроки) КАК СуммаСкидки,
	|	СУММА(Товары.СуммаВсего) КАК СуммаВсего,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товары.Документ) КАК КоличествоЧеков
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Чек.ДополнительныеРеквизиты КАК ЧекДополнительныеРеквизиты
	|		ПО Товары.Документ = ЧекДополнительныеРеквизиты.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.КассаККМ,
	|	ЧекДополнительныеРеквизиты.Значение
	|
	|УПОРЯДОЧИТЬ ПО
	|	КассаККМ,
	|	Свойство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументЧек.БонуснаяКарта КАК БонуснаяКарта,
	|	ДокументЧек.БонуснаяПрограмма КАК БонуснаяПрограмма,
	|	ДокументЧек.КоличествоКНачислению КАК КоличествоНачисленныхБонусов,
	|	ДокументЧек.КоличествоКСписанию КАК КоличествоСписанныхБонусов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Документы.Карточка КАК БонуснаяКарта,
	|		Документы.БонуснаяПрограмма КАК БонуснаяПрограмма,
	|		СУММА(Документы.КоличествоКНачислению) КАК КоличествоКНачислению,
	|		СУММА(Документы.КоличествоКСписанию) КАК КоличествоКСписанию
	|	ИЗ
	|		Документы КАК Документы
	|	ГДЕ
	|		Документы.Документ ССЫЛКА Документ.Чек
	|		И Документы.Карточка <> ЗНАЧЕНИЕ(Справочник.Карточки.ПустаяСсылка)
	|		И (Документы.КоличествоКНачислению <> 0
	|				ИЛИ Документы.КоличествоКСписанию <> 0)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Документы.Карточка,
	|		Документы.БонуснаяПрограмма) КАК ДокументЧек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документы.Документ КАК Документ
	|ИЗ
	|	Документы КАК Документы
	|ГДЕ
	|	Документы.ЭтоПродажа
	|	И Документы.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Коэффициент КАК Коэффициент,
	|	Товары.МестоРазмещения КАК МестоРазмещения,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(Товары.КоличествоВозврат) КАК Количество,
	|	СУММА(Товары.СуммаВозврата) КАК Сумма,
	|	СУММА(Товары.СуммаНДСВозврата) КАК СуммаНДС,
	|	СУММА(Товары.СуммаСкидкиВозврата + Товары.СуммаСкидкиСтрокиВозврата) КАК СуммаСкидки,
	|	СУММА(Товары.СуммаВсегоВозврата) КАК СуммаВсего,
	|	СУММА(Товары.КоличествоЧеков) КАК КоличествоЧеков,
	|	Товары.НомерФискальногоЧека КАК НомерФискальногоЧека,
	|	Товары.ДатаРеализации КАК ДатаРеализации,
	|	Товары.ИдентификаторТовара КАК ИдентификаторТовара
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	НЕ Товары.КоличествоВозврат = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.ЕдиницаИзмерения,
	|	Товары.Коэффициент,
	|	Товары.МестоРазмещения,
	|	Товары.ХарактеристикаНоменклатуры,
	|	Товары.СтавкаНДС,
	|	Товары.НомерФискальногоЧека,
	|	Товары.ДатаРеализации,
	|	Товары.ИдентификаторТовара
	|
	|УПОРЯДОЧИТЬ ПО
	|	МестоРазмещения,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Коэффициент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Оплаты.КассаККМ КАК Касса,
	|	Оплаты.ТипОплаты КАК ТипОплаты,
	|	Оплаты.ТипПлатежнойКарты КАК ТипПлатежнойКарты,
	|	Оплаты.Карточка КАК Карточка,
	|	Оплаты.Контрагент КАК Контрагент,
	|	Оплаты.ДоговорВзаиморасчетов КАК ДоговорВзаиморасчетов,
	|	СУММА(Оплаты.КоличествоВозврат) КАК КоличествоЧеков,
	|	СУММА(Оплаты.СуммаВозврат) КАК Сумма,
	|	СУММА(Оплаты.КоличествоЧековОплата) КАК КоличествоЧековОплата,
	|	СУММА(Оплаты.СуммаВозвратОплата) КАК СуммаОплата
	|ИЗ
	|	Оплаты КАК Оплаты
	|ГДЕ
	|	НЕ(Оплаты.СуммаВозврат = 0
	|				И Оплаты.СуммаВозвратОплата = 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	Оплаты.КассаККМ,
	|	Оплаты.ТипОплаты,
	|	Оплаты.ТипПлатежнойКарты,
	|	Оплаты.Карточка,
	|	Оплаты.Контрагент,
	|	Оплаты.ДоговорВзаиморасчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Оплаты.КассаККМ,
	|	ТипОплаты,
	|	ТипПлатежнойКарты,
	|	Карточка,
	|	Контрагент,
	|	ДоговорВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.Документ КАК Документ,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Коэффициент КАК Коэффициент,
	|	Товары.МестоРазмещения КАК МестоРазмещения,
	|	Товары.ЭтоВозврат КАК ЭтоВозврат,
	|	ЧекКодыМаркировки.КодМаркировки КАК КодМаркировки
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Чек.КодыМаркировки КАК ЧекКодыМаркировки
	|		ПО Товары.Документ = ЧекКодыМаркировки.Ссылка
	|			И Товары.ИдентификаторТовара = ЧекКодыМаркировки.ИдентификаторТовара
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Оплаты";
	
КонецФункции // ПолучитьТекстЗапросаДляСверткиЧеков()

Функция ПолучитьЗапросПоИтогамСмены(Объект, ТекстЗапросаВыборки, КассаККМ = Неопределено, Патент = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ЗакрытиеСмены.ДатаПоследнегоДокумента) КАК ДатаПоследнегоДокумента,
	|	ЗакрытиеСмены.КассаККМ КАК КассаККМ
	|ПОМЕСТИТЬ КассыККМ
	|ИЗ
	|	Документ.ЗакрытиеСмены КАК ЗакрытиеСмены
	|ГДЕ
	|	ЗакрытиеСмены.Проведен
	|	И ЗакрытиеСмены.ДатаПоследнегоДокумента < &Дата
	|	И ЗакрытиеСмены.КассаККМ В(&КассыККМ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗакрытиеСмены.КассаККМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Чек.КассаККМ КАК КассаККМ,
	|	Чек.ФР КАК ФР,
	|	Чек.Ссылка КАК Документ,
	|	Чек.Дата КАК Дата,
	|	Чек.Проведен КАК Проведен,
	|	Чек.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекНаВозврат) КАК ЭтоВозврат,
	|	ИСТИНА КАК ЭтоПродажа,
	|	ИСТИНА КАК ЕстьОплаты,
	|	НЕ Чек.ДатаФР = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК Пробит,
	|	1 КАК КоличествоЧеков,
	|	Чек.СуммаДокумента КАК СуммаДокумента,
	|	Чек.Контрагент КАК Контрагент,
	|	Чек.Карточка КАК Карточка,
	|	Чек.СкидкаНаценка КАК СкидкаНаценка,
	|	ВЫБОР
	|		КОГДА Чек.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекНаВозврат)
	|			ТОГДА 0
	|		ИНАЧЕ Чек.СуммаДокумента
	|	КОНЕЦ КАК СуммаПродаж,
	|	ВЫБОР
	|		КОГДА Чек.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекНаВозврат)
	|			ТОГДА Чек.СуммаДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВозвратов,
	|	ВЫБОР
	|		КОГДА КассыККМ.КассаККМ ЕСТЬ NULL
	|				ИЛИ Чек.Дата > КассыККМ.ДатаПоследнегоДокумента
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеУчтен,
	|	Чек.Карточка.БонуснаяПрограмма КАК БонуснаяПрограмма,
	|	ВЫБОР
	|		КОГДА Чек.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекНаВозврат)
	|			ТОГДА -Чек.КоличествоКНачислению
	|		ИНАЧЕ Чек.КоличествоКНачислению
	|	КОНЕЦ КАК КоличествоКНачислению,
	|	ВЫБОР
	|		КОГДА Чек.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекНаВозврат)
	|			ТОГДА -Чек.КоличествоКСписанию
	|		ИНАЧЕ Чек.КоличествоКСписанию
	|	КОНЕЦ КАК КоличествоКСписанию,
	|	Чек.НомерЧека КАК НомерФискальногоЧека,
	|	ВЫБОР
	|		КОГДА Чек.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекНаВозврат)
	|				И Чек.ДокументОснование ССЫЛКА Документ.Чек
	|			ТОГДА НАЧАЛОПЕРИОДА(Чек.ДокументОснование.Дата, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаРеализации
	|ПОМЕСТИТЬ Документы
	|ИЗ
	|	Документ.Чек КАК Чек
	|		ЛЕВОЕ СОЕДИНЕНИЕ КассыККМ КАК КассыККМ
	|		ПО Чек.КассаККМ = КассыККМ.КассаККМ
	|ГДЕ
	|	НЕ Чек.ПометкаУдаления
	|	И Чек.Дата < &Дата
	|	И Чек.КассаККМ В(&КассыККМ)
	|	И НЕ Чек.Архивный
	|	И НЕ Чек.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекОтложенный)
	|	И Чек.Патент = &Патент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекНаОплату.КассаККМ,
	|	ЧекНаОплату.ФР,
	|	ЧекНаОплату.Ссылка,
	|	ЧекНаОплату.Дата,
	|	ЧекНаОплату.Проведен,
	|	ЧекНаОплату.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекНаОплатуВозврат)
	|		ИЛИ ЧекНаОплату.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекНаОплатуПокупки),
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	НЕ ЧекНаОплату.ДатаФР = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|	1,
	|	ЧекНаОплату.СуммаДокумента,
	|	ЧекНаОплату.Контрагент,
	|	ЧекНаОплату.Карточка,
	|	ЧекНаОплату.СкидкаНаценка,
	|	ВЫБОР
	|		КОГДА ЧекНаОплату.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекНаОплатуВозврат)
	|			ТОГДА 0
	|		ИНАЧЕ ЧекНаОплату.СуммаДокумента
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЧекНаОплату.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.ЧекНаОплатуВозврат)
	|			ТОГДА ЧекНаОплату.СуммаДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КассыККМ.КассаККМ ЕСТЬ NULL
	|				ИЛИ ЧекНаОплату.Дата > КассыККМ.ДатаПоследнегоДокумента
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	NULL,
	|	0,
	|	0,
	|	ЧекНаОплату.НомерЧека,
	|	ДАТАВРЕМЯ(1, 1, 1)
	|ИЗ
	|	Документ.ЧекНаОплату КАК ЧекНаОплату
	|		ЛЕВОЕ СОЕДИНЕНИЕ КассыККМ КАК КассыККМ
	|		ПО ЧекНаОплату.КассаККМ = КассыККМ.КассаККМ
	|ГДЕ
	|	НЕ ЧекНаОплату.ПометкаУдаления
	|	И ЧекНаОплату.Дата < &Дата
	|	И ЧекНаОплату.КассаККМ В(&КассыККМ)
	|	И ЧекНаОплату.Патент = &Патент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.КассаККМ,
	|	ПриходныйКассовыйОрдер.ФР,
	|	ПриходныйКассовыйОрдер.Ссылка,
	|	ПриходныйКассовыйОрдер.Дата,
	|	ПриходныйКассовыйОрдер.Проведен,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	НЕ ПриходныйКассовыйОрдер.ДатаФР = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|	1,
	|	ПриходныйКассовыйОрдер.СуммаДокумента,
	|	ПриходныйКассовыйОрдер.Контрагент,
	|	NULL,
	|	NULL,
	|	ПриходныйКассовыйОрдер.СуммаДокумента,
	|	0,
	|	ВЫБОР
	|		КОГДА КассыККМ.КассаККМ ЕСТЬ NULL
	|				ИЛИ ПриходныйКассовыйОрдер.Дата > КассыККМ.ДатаПоследнегоДокумента
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	NULL,
	|	0,
	|	0,
	|	ПриходныйКассовыйОрдер.НомерЧека,
	|	ДАТАВРЕМЯ(1, 1, 1)
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ КассыККМ КАК КассыККМ
	|		ПО ПриходныйКассовыйОрдер.КассаККМ = КассыККМ.КассаККМ
	|ГДЕ
	|	НЕ ПриходныйКассовыйОрдер.ПометкаУдаления
	|	И ПриходныйКассовыйОрдер.Дата < &Дата
	|	И ПриходныйКассовыйОрдер.КассаККМ В(&КассыККМ)
	|	И ПриходныйКассовыйОрдер.ДляПробитияНаФР
	|	И НЕ ПриходныйКассовыйОрдер.ДатаФР = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И ПриходныйКассовыйОрдер.Патент = &Патент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.КассаККМ,
	|	РасходныйКассовыйОрдер.ФР,
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.Дата,
	|	РасходныйКассовыйОрдер.Проведен,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	НЕ РасходныйКассовыйОрдер.ДатаФР = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|	1,
	|	РасходныйКассовыйОрдер.СуммаДокумента,
	|	РасходныйКассовыйОрдер.Контрагент,
	|	NULL,
	|	NULL,
	|	0,
	|	РасходныйКассовыйОрдер.СуммаДокумента,
	|	ВЫБОР
	|		КОГДА КассыККМ.КассаККМ ЕСТЬ NULL
	|				ИЛИ РасходныйКассовыйОрдер.Дата > КассыККМ.ДатаПоследнегоДокумента
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	NULL,
	|	0,
	|	0,
	|	РасходныйКассовыйОрдер.НомерЧека,
	|	ДАТАВРЕМЯ(1, 1, 1)
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ КассыККМ КАК КассыККМ
	|		ПО (КассыККМ.КассаККМ = КассыККМ.КассаККМ)
	|ГДЕ
	|	НЕ РасходныйКассовыйОрдер.ПометкаУдаления
	|	И РасходныйКассовыйОрдер.Дата < &Дата
	|	И РасходныйКассовыйОрдер.КассаККМ В(&КассыККМ)
	|	И РасходныйКассовыйОрдер.ДляПробитияНаФР
	|	И НЕ РасходныйКассовыйОрдер.ДатаФР = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И РасходныйКассовыйОрдер.Патент = &Патент"
	
	+ Символы.ПС + "; " + Символы.ПС + ТекстЗапросаВыборки + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КассыККМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Документы";
	
	
	// Получим перечень касс по которым производится закрытие смены
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		КассыККМ = КассаККМ;
	ИначеЕсли ЕстьРеквизит(Объект, , "КассыККМ") Тогда
		КассыККМ = Объект.КассыККМ.Выгрузить(Новый Структура("Использовать", 1), "КассаККМ").ВыгрузитьКолонку("КассаККМ");
	Иначе
		КассыККМ = Справочники.КассыККМ.ПустаяСсылка();
	КонецЕсли;
	
	// Производим корректировку даты закрытия смены
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда
		Объект.Дата = ПолучитьОперативнуюОтметкуВремени();
	Иначе
		Объект.Дата = КонецДня(Объект.Дата);
	КонецЕсли;
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата",     Объект.Дата);
	Запрос.УстановитьПараметр("КассыККМ", КассыККМ);
	Запрос.УстановитьПараметр("Патент", ?(Патент = Неопределено, Справочники.Патенты.ПустаяСсылка(), Патент));
	
	Возврат Запрос;
	
КонецФункции // ПолучитьЗапросПоИтогамСмены()

// BSLLS:MethodSize-on

// Заполнение сведений о товарах и об оплатах
//
Процедура ЗаполнитьТабличныеЧастиДокумента(Объект, ПакетЗапросов) Экспорт
	
	// Заполним сведения о товарах
	Объект.Товары.Загрузить(ПакетЗапросов[5].Выгрузить());
	
	КодыМаркировки = ПакетЗапросов[14].Выгрузить();
	
	ПараметрыОтбора = Новый Структура(
		"Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, МестоРазмещения, ЭтоВозврат"
	);
	ПараметрыДействия = Новый Структура("НеПересчитыватьСтроку", Истина);
	// Производим корректировку таблицы товаров
	Для каждого СтрокаТаблицыТоваров Из Объект.Товары Цикл
		СтрокаТаблицыТоваров.Цена = ?(
			СтрокаТаблицыТоваров.Количество = 0,
			0,
			СтрокаТаблицыТоваров.Сумма / СтрокаТаблицыТоваров.Количество
		);
		СтрокаТаблицыТоваров.ПроцентСкидки = ?(
			СтрокаТаблицыТоваров.Сумма = 0,
			0,
			СтрокаТаблицыТоваров.СуммаСкидки * 100 / СтрокаТаблицыТоваров.Сумма
		);
		СтрокаТаблицыТоваров.ИдентификаторТовара = Новый УникальныйИдентификатор;
		ТоварыНоменклатураПриИзменении(Объект, СтрокаТаблицыТоваров, ПараметрыДействия);
		
		// заполним коды маркировки
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаТаблицыТоваров);
		ПараметрыОтбора.ЭтоВозврат = Ложь;
		НайденныеСтроки = КодыМаркировки.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = Объект.КодыМаркировки.Добавить();
			НоваяСтрока.КодМаркировки = Строка.КодМаркировки;
			НоваяСтрока.ИдентификаторТовара = СтрокаТаблицыТоваров.ИдентификаторТовара;
		КонецЦикла;
		
	КонецЦикла;
	
	// Заполним сведения об оплатах
	Объект.Оплаты.Загрузить(ПакетЗапросов[6].Выгрузить());
	
	// Заполним сведения об оплатах
	Объект.Скидки.Загрузить(ПакетЗапросов[7].Выгрузить());
	
	// Заполним сведения об оплатах
	Объект.Контрагенты.Загрузить(ПакетЗапросов[8].Выгрузить());
	
	// Заполним сведения об оплатах
	Объект.Свойства.Загрузить(ПакетЗапросов[9].Выгрузить());
	
	// Заполним сведения об оплатах
	Объект.Бонусы.Загрузить(ПакетЗапросов[10].Выгрузить());
	
	// Заполним сведения о возвратах
	Объект.Возвраты.Загрузить(ПакетЗапросов[12].Выгрузить());
	
	// Производим корректировку таблицы возвратов
	Для каждого СтрокаТаблицыТоваров Из Объект.Возвраты Цикл
		СтрокаТаблицыТоваров.Цена = ?(
			СтрокаТаблицыТоваров.Количество = 0,
			0,
			СтрокаТаблицыТоваров.Сумма / СтрокаТаблицыТоваров.Количество
		);
		СтрокаТаблицыТоваров.ПроцентСкидки = ?(
			СтрокаТаблицыТоваров.Сумма = 0,
			0,
			СтрокаТаблицыТоваров.СуммаСкидки * 100 / СтрокаТаблицыТоваров.Сумма
		);
		СтрокаТаблицыТоваров.ИдентификаторТовара = Новый УникальныйИдентификатор;
		ВозвратыНоменклатураПриИзменении(Объект, СтрокаТаблицыТоваров, ПараметрыДействия);
		
		// заполним коды маркировки
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаТаблицыТоваров);
		ПараметрыОтбора.ЭтоВозврат = Истина;
		НайденныеСтроки = КодыМаркировки.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = Объект.КодыМаркировки.Добавить();
			НоваяСтрока.КодМаркировки = Строка.КодМаркировки;
			НоваяСтрока.ИдентификаторТовара = СтрокаТаблицыТоваров.ИдентификаторТовара;
		КонецЦикла;
		
	КонецЦикла;
	
	// Заполним сведения о возвратах оплаты
	Объект.ВозвратОплаты.Загрузить(ПакетЗапросов[13].Выгрузить());
	
КонецПроцедуры // ЗаполнитьТабличныеЧастиДокумента()

// Загрузка данными табличные части документа
//
Процедура ЗагрузитьЧекиПоКассеККМ(Объект) Экспорт
	
	Объект.Товары.Очистить();
	Объект.Возвраты.Очистить();
	Объект.Скидки.Очистить();
	Объект.Контрагенты.Очистить();
	Объект.Оплаты.Очистить();
	Объект.ВозвратОплаты.Очистить();
	Объект.Свойства.Очистить();
	Объект.Бонусы.Очистить();
	
	// Выполним запрос и получим пакет результатов
	Запрос = ПолучитьЗапросПоИтогамСмены(Объект, ПолучитьТекстЗапросаДляСверткиЧеков(), Объект.КассаККМ, Объект.Патент);
	РезультатыПакета = Запрос.ВыполнитьПакет();
	
	ЗаполнитьТабличныеЧастиДокумента(Объект, РезультатыПакета);
	
КонецПроцедуры // ЗагрузитьЧекиПоКассеККМ()

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты документа
	ОбязательныеРеквизиты = Новый Массив();
	ОбязательныеРеквизиты.Добавить("Организация");
	ОбязательныеРеквизиты.Добавить("ПодразделениеКомпании");
	ОбязательныеРеквизиты.Добавить("Автор");
	ОбязательныеРеквизиты.Добавить("ВалютаДокумента");
	ОбязательныеРеквизиты.Добавить("КурсДокумента");
	ОбязательныеРеквизиты.Добавить("КассаККМ");
	ОбязательныеРеквизиты.Добавить("ХозОперация");
	
	Если Объект.ХозОперация = Справочники.ХозОперации.АктОРеализации Тогда
		ОбязательныеРеквизиты.Добавить("СкладКомпании");

		Если НЕ ПраваИНастройкиПользователя.Значение("ПроведениеНезаполненныхДокументов", Объект) Тогда
			ОбязательныеРеквизиты.Добавить("Товары");
		КонецЕсли;
	КонецЕсли;

	ОбязательныеРеквизиты.Добавить("Товары.Номенклатура");
	ОбязательныеРеквизиты.Добавить("Возвраты.Номенклатура");
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов.
//  Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов табличных частей
	УникальныеТабличныеЧасти = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеТабличныеЧасти;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование перечня реквизитов для проверки соответствия Организации и Подразделению.
//
// Параметры:
//  Объект                  - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//  КонтрольПоПодразделению - Булево               - Признак необходимости выполнить контроль по подразделению.
//
// Возвращаемое значение:
//  Структура - Содержит перечень проверяемых реквизитов.
//
Функция ПолучитьРеквизитыКонтроляПоОрганизации(Объект, КонтрольПоПодразделению) Экспорт
	
	// Структура параметров проверки реквизитов объекта
	КонтролируемыеРеквизиты = Новый Структура();
	КонтролируемыеРеквизиты.Вставить("КассаККМ", Ложь);
	
	Если Объект.ХозОперация = Справочники.ХозОперации.АктОРеализации Тогда
		КонтролируемыеРеквизиты.Вставить("СкладКомпании", Ложь);
	Иначе
		КонтролируемыеРеквизитыТЧ = Новый Структура();
		КонтролируемыеРеквизитыТЧ.Вставить("МестоРазмещения", Ложь);
		КонтролируемыеРеквизиты.Вставить("Товары", КонтролируемыеРеквизитыТЧ);
		КонтролируемыеРеквизиты.Вставить("Возвраты", КонтролируемыеРеквизитыТЧ);
	КонецЕсли;
	
	// Возвращаем сформированные параметры проверки
	Возврат КонтролируемыеРеквизиты;
	
КонецФункции // ПолучитьРеквизитыКонтроляПоОрганизации()

#КонецОбласти

#Область ОбработчикиИзмененияДанныхОбъекта

// Возвращает предопределенную структуру действий
//
Функция ПолучитьПараметрыДействия(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	Если ПараметрыДействия = Неопределено Тогда
		ПараметрыДействия = Новый Структура;
	КонецЕсли;
	
	// Производим добавление параметров расширяемых контекст обработки событий объекта
	ПараметрыДействия.Вставить("ОбъектЗаполнен", Объект.Товары.Количество() > 0);
	ПараметрыДействия.Вставить("ЕстьСкидка", Истина);
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Обработчик события пересчета зависимых показателей объекта при изменении значений ведущих реквизитов.
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик действия
	ОбработкаРеквизитовДокументаСервер.ОбработкаПересчетаПоказателейОбъекта(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОбработкаПересчетаПоказателейОбъекта()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события возникающего при изменении данных реквизита "Дата".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДатаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДатаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Документ основание".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ДокументОснованиеПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ДокументОснованиеПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры

// Обработчик события возникающего при изменении данных реквизита "Подразделение компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПодразделениеКомпанииПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПодразделениеКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Организация".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ОрганизацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ОрганизацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Автор".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура АвторПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.АвторПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // АвторПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Проект".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ПроектПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ПроектПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ПроектПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Хоз. операция".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ХозОперацияПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ХозОперацияПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ХозОперацияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Тип цен".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТипЦенПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ТипЦенПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ТипЦенПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Валюта".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВалютаДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.ВалютаДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Курс документа".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КурсДокументаПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КурсДокументаПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КурсДокументаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Склад компании".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура СкладКомпанииПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	
	// проверим склад
	Если ЗначениеЗаполнено(Объект.СкладКомпании)
		И Объект.ХозОперация = Справочники.ХозОперации.АктОРеализации
		И НЕ Объект.СкладКомпании.Розничный Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Выбранный склад: <%1> не соответствует хоз. операции. Выберите розничный склад.'"),
			Объект.СкладКомпании
		);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
		
		Объект.СкладКомпании = Неопределено;
		СкладКомпанииПриИзменении(Объект, ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры // СкладКомпанииПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Касса ККМ".
//
// Параметры:
//  Объект            - ДанныеФормыСтруктура - Объект, для которого выполняется обработка события.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура КассаККМПриИзменении(Объект, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаРеквизитовДокументаСервер.КассаККМПриИзменении(Объект, ПараметрыДействия);
	
КонецПроцедуры // КассаККМПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия);
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Строка.ИдентификаторТовара) Тогда
		Строка.ИдентификаторТовара = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки" в таблице "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ТоварыСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ТоварыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ТоварыСуммаСкидкиПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВозвраты

// Обработчик события возникающего при изменении данных реквизита "Номенклатура" в таблице "Возвраты".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВозвратыНоменклатураПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.НоменклатураПриИзменении(Объект, Строка, ПараметрыДействия, "Возвраты");
	
	// Проверим, имеют ли смысл дальнейшие действия
	Если ПолучитьЗначениеПараметраСтруктуры(ПараметрыДействия, "Отказ", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Строка.ИдентификаторТовара) Тогда
		Строка.ИдентификаторТовара = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры // ВозвратыНоменклатураПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Характеристика номенклатуры" в таблице "Возвраты".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВозвратыХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ХарактеристикаНоменклатурыПриИзменении(Объект, Строка, ПараметрыДействия, "Возвраты");
	
КонецПроцедуры // ВозвратыХарактеристикаНоменклатурыПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Единица измерения" в таблице "Возвраты".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВозвратыЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЕдиницаИзмеренияПриИзменении(Объект, Строка, ПараметрыДействия, "Возвраты");
	
КонецПроцедуры // ВозвратыЕдиницаИзмеренияПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Количество" в таблице "Возвраты".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВозвратыКоличествоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.КоличествоПриИзменении(Объект, Строка, ПараметрыДействия, "Возвраты");
	
КонецПроцедуры // ВозвратыКоличествоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Цена" в таблице "Возвраты".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВозвратыЦенаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.ЦенаПриИзменении(Объект, Строка, ПараметрыДействия, "Возвраты");
	
КонецПроцедуры // ВозвратыЦенаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма" в таблице "Возвраты".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВозвратыСуммаПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаПриИзменении(Объект, Строка, ПараметрыДействия, "Возвраты");
	
КонецПроцедуры // ВозвратыСуммаПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Ставка НДС" в таблице "Возвраты".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВозвратыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия, "Возвраты");
	
КонецПроцедуры // ВозвратыСтавкаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма НДС" в таблице "Возвраты".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВозвратыСуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаНДСПриИзменении(Объект, Строка, ПараметрыДействия, "Возвраты");
	
КонецПроцедуры // ВозвратыСуммаНДСПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма всего" в таблице "Возвраты".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВозвратыСуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	// Вызываем общий обработчик события
	ОбработкаТабличнойЧастиТовары.СуммаВсегоПриИзменении(Объект, Строка, ПараметрыДействия, "Возвраты");
	
КонецПроцедуры // ВозвратыСуммаВсегоПриИзменении()

// Обработчик события возникающего при изменении данных реквизита "Сумма скидки" в таблице "Возвраты".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура   - Объект, для которого выполняется обработка события.
//  Строка - Строка табличной части - Строка, при изменении поля которой возникло событие.
//  ПараметрыДействия - Структура            - Набор параметров, использующихся при выполнения операции.
//
Процедура ВозвратыСуммаСкидкиПриИзменении(Объект, Строка, ПараметрыДействия = Неопределено) Экспорт
	
	// Устанавливаем параметры выполнения операции
	ПараметрыДействия = ПолучитьПараметрыДействия(Объект, ПараметрыДействия);
	
	ВозвратыСтавкаНДСПриИзменении(Объект, Строка, ПараметрыДействия);
	
КонецПроцедуры // ВозвратыСуммаСкидкиПриИзменении()

#КонецОбласти

#Область Печать

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Процедура используется для указания доступного данному виду объектов перечня вариантов печати.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - Каждая строка таблицы соответствует одному из вариантов печати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СсылкаНаДокумент = ПолучитьСсылку();
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		"Документ.ЗакрытиеСмены",
		"ПФ_MXL_ЗакрытиеСмены",
		НСтр("ru = 'Закрытие смены'"),
		СсылкаНаДокумент);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Ценники",
		НСтр("ru = 'Печать ценников'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати",
		,,,,
		Ложь);
	УправлениеПечатьюПлатформа.ДобавитьКоманду(КомандыПечати,
		Неопределено,
		"Этикетки",
		НСтр("ru = 'Печать этикеток'"),
		СсылкаНаДокумент,
		"УправлениеПечатиЭтикетокИЦенниковКлиент.ПодготовкаПечати",
		,,,,
		Ложь);
	
КонецПроцедуры // ДобавитьКомандыПечати()

// Обработчик события формирования печатной формы.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - информация для заполнения письма при отправке печатной формы электронной почтой.
//                                     Содержит следующие поля:
//    ** Получатель - Строка, СписокЗначений, Массив - список получателей письма;
//    ** Тема - Строка - Тема письма,
//    ** Текст - Строка - Текст письма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ЗакрытиеСмены") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															"ПФ_MXL_ЗакрытиеСмены",
															НСтр("ru = 'Закрытие смены'"),
															ПечатьЗакрытиеСмены(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;	
КонецПроцедуры // Печать()

// функция печати макета "ЗакрытиеСмены" 
//
Функция ПечатьЗакрытиеСмены(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Добавим установку параметров печати
	ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗакрытиеСмены_ЗакрытиеСмены";
	УправлениеПечатьюПлатформа.УстановитьСтандартныеПараметрыПечати(ИмяПараметровПечати, ТабличныйДокумент);
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	ПервыйДокумент = Истина;
	Для Каждого Документ Из МассивОбъектов Цикл
		Если НЕ ПервыйДокумент Тогда // новый документ должен быть на отдельной странице
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ФорматВыводаСуммы = УправлениеПечатьюПлатформа.ПолучитьФорматВыводаСуммы(Документ);
		
		// получим макет печатной формы
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗакрытиеСмены.ПФ_MXL_ЗакрытиеСмены");
		
		// Зададим параметры макета
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		// получение необходимых областей
		ОбластьШапкаТаблицы    = УправлениеПечатьюПлатформа.ПривестиМакетПечатнойФормы(Макет, Документ);
		ОбластьЗаголовок       = Макет.ПолучитьОбласть("Заголовок");
		ОбластьПодзаголовок    = Макет.ПолучитьОбласть("Подзаголовок");
		ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
		ОбластьИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьПодвалТаблицы   = Макет.ПолучитьОбласть("Подвал");
		ОбластьПодвал		   = Макет.ПолучитьОбласть("ПодвалПодписи");
		
		// область заголовок
		ОбластьЗаголовок.Параметры.Заполнить(Документ);
		ТекстЗаголовка = УправлениеПечатьюПлатформа.ПолучитьПредставлениеДокумента(Документ);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДополнительныеПараметры = УправлениеПечатьюПлатформа.ПолучитьПараметрыВызоваПредставленияСправочника();
		ДополнительныеПараметры.Вставить("ПодразделениеКомпании", Документ.ПодразделениеКомпании);
		ДополнительныеПараметры.ИспользоватьКИПодразделения = Истина;
		ДополнительныеПараметры.ИспользоватьКПППодразделения = Истина;
		ДополнительныеПараметры.НаДату = Документ.Дата;
		ОбластьЗаголовок.Параметры.ПредставлениеОрганизации =
			УправлениеПечатьюПлатформа.ПолучитьПредставлениеСправочника(Документ.Организация, , ДополнительныеПараметры);
		
		ОбластьЗаголовок.Параметры.ПредставлениеСклада =
			УправлениеПечатьюПлатформа.ПолучитьНаименованиеСправочника(Документ.СкладКомпании);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		ОбластьПодзаголовок.Параметры.ИмяТабличнойЧасти = НСтр("ru = 'Товары, реализованные розничному покупателю'");
		ТабличныйДокумент.Вывести(ОбластьПодзаголовок);
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		// готовим шапку
		НомерСтраницы = 2;
		НомерСтраницыПредыдущий = 2;
		СтруктураИтоговПоСтранице = Новый Структура();
		СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
		СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
		СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
		СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// заполняем ТЧ
		ВыборкаТабличнойЧасти = Документ.Товары;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,
				УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ));
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Товары.Индекс(СтрокаТЧ) = Документ.Товары.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвалТаблицы);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
				СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
				СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
				СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
				НомерСтраницыПредыдущий = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
				
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		ОбластьПодвалТаблицы.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("СуммаВсего");
		ОбластьПодвалТаблицы.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		НДСВсего = ВыборкаТабличнойЧасти.Итог("СуммаНДС");
		ОбластьПодвалТаблицы.Параметры.НДСВсего = Формат(НДСВсего, ФорматВыводаСуммы);
		Если ВыборкаТабличнойЧасти.Итог("СуммаСкидки") > 0 Тогда
			СкидкаВсего = ВыборкаТабличнойЧасти.Итог("СуммаСкидки");
			ОбластьПодвалТаблицы.Параметры.СкидкаВсего = Формат(СкидкаВсего, ФорматВыводаСуммы);
		КонецЕсли;
		ОбластьПодвалТаблицы.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'") + Символы.НПП
			+ ВыборкаТабличнойЧасти.Количество() + Символы.НПП + НСтр("ru = 'на сумму'") + Символы.НПП
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, Документ.ВалютаДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
		
		ОбластьПодзаголовок.Параметры.ИмяТабличнойЧасти = НСтр("ru = 'Товары, возвращенные розничными покупателями'");
		ТабличныйДокумент.Вывести(ОбластьПодзаголовок);
		
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = "";
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "";
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		// готовим шапку
		СтруктураИтоговПоСтранице = Новый Структура();
		СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
		СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
		СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
		СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
		ОбластьШапкаТаблицы.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбластьШапкаТаблицы.Параметры.НомерСтраницы  = "Страница: " + НомерСтраницы;
		
		// заполняем ТЧ
		ВыборкаТабличнойЧасти = Документ.Возвраты;
		Для Каждого СтрокаТЧ Из ВыборкаТабличнойЧасти Цикл
			
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,
				УправлениеПечатьюПлатформа.ЗаполнитьПредставлениеДанныхТоварнойСтроки(СтрокаТЧ, Документ, "Возвраты"));
			
			// доп. области
			мсвДопОбластиПодвала = Неопределено;
			Если Документ.Возвраты.Индекс(СтрокаТЧ) = Документ.Возвраты.Количество() - 1 Тогда
				мсвДопОбластиПодвала = Новый Массив;
				мсвДопОбластиПодвала.Добавить(ОбластьПодвалТаблицы);
			КонецЕсли;
			
			НомерСтраницы = УправлениеПечатьюПлатформа.ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьСтрока,
				ОбластьШапкаТаблицы, ОбластьИтогоПоСтранице, НомерСтраницы, СтруктураИтоговПоСтранице, Документ,
				мсвДопОбластиПодвала);
			
			// инициализация итогов по странице
			Если НомерСтраницы <> НомерСтраницыПредыдущий Тогда
				СтруктураИтоговПоСтранице = Новый Структура();
				СтруктураИтоговПоСтранице.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
				СтруктураИтоговПоСтранице.Вставить("СуммаСкидки",     0);
				СтруктураИтоговПоСтранице.Вставить("СуммаНДС",        0);
				СтруктураИтоговПоСтранице.Вставить("СуммаВсего",      0);
				НомерСтраницыПредыдущий   = НомерСтраницы;
				ОбластьШапкаТаблицы.Параметры.НомерСтраницы = "Страница: " + НомерСтраницы;
			КонецЕсли;
			
			// добавляем итоги
			УправлениеПечатьюПлатформа.ДобавитьИтогиПоСтранице(СтрокаТЧ, СтруктураИтоговПоСтранице);
		КонецЦикла;
				
		// выводим последний подвал, если страниц больше единицы
		Если НомерСтраницы > 2 Тогда
			УправлениеПечатьюПлатформа.
			ВывестиИтогиПоСтранице(ТабличныйДокумент, ОбластьИтогоПоСтранице, СтруктураИтоговПоСтранице, Документ);
		КонецЕсли;
		
		ОбластьПодвалТаблицы.Параметры.ВалютаДокумента = Документ.ВалютаДокумента;
		СуммаВсего = ВыборкаТабличнойЧасти.Итог("СуммаВсего");
		ОбластьПодвалТаблицы.Параметры.СуммаВсего = Формат(СуммаВсего, ФорматВыводаСуммы);
		НДСВсего = ВыборкаТабличнойЧасти.Итог("СуммаНДС");
		ОбластьПодвалТаблицы.Параметры.НДСВсего = Формат(НДСВсего, ФорматВыводаСуммы);
		Если ВыборкаТабличнойЧасти.Итог("СуммаСкидки") > 0 Тогда
			СкидкаВсего = ВыборкаТабличнойЧасти.Итог("СуммаСкидки");
			ОбластьПодвалТаблицы.Параметры.СкидкаВсего = Формат(СкидкаВсего, ФорматВыводаСуммы);
		КонецЕсли;
		ОбластьПодвалТаблицы.Параметры.СуммаПрописью = НСтр("ru = 'Всего наименований'") + Символы.НПП
			+ ВыборкаТабличнойЧасти.Количество() + Символы.НПП + НСтр("ru = 'на сумму'") + Символы.НПП
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаВсего, Документ.ВалютаДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
		
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Отпустил"));
		ОбластьПодвал.Параметры.Заполнить(УправлениеПечатьюПлатформа.ДанныеОтветственногоЛица(Документ, "Получил"));
		
		УправлениеПечатьюПлатформа.
		ВывестиГоризонтальнуюОбласть(ТабличныйДокумент, ОбластьПодвал, , , НомерСтраницы, , Документ);
		
		// блок области
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьЗакрытиеСмены

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//	Адрес   - адрес структуры данных во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗакрытиеСменыТовары.Номенклатура   КАК Номенклатура,
	|	ЗакрытиеСменыТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	| 	ЗакрытиеСменыТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|
	|	МИНИМУМ(ЗакрытиеСменыТовары.НомерСтроки) КАК Порядок,
	|	СУММА(
	|		ВЫБОР КОГДА ЗакрытиеСменыТовары.Ссылка.СкладКомпании.Розничный = ИСТИНА ТОГДА
	|			ЗакрытиеСменыТовары.Количество * (ЕСТЬNULL(ЗакрытиеСменыТовары.ЕдиницаИзмерения.Коэффициент, 1) / ЕСТЬNULL(Цены.ЕдиницаИзмерения.Коэффициент, 1))
	|		ИНАЧЕ
	|			ЗакрытиеСменыТовары.Количество
	|		КОНЕЦ) КАК Количество,
	|	МАКСИМУМ(ЗакрытиеСменыТовары.СуммаВсего) КАК Цена,
	|	МАКСИМУМ(ЗакрытиеСменыТовары.СтавкаНДС) КАК СтавкаНДС,
	|	МАКСИМУМ(ЗакрытиеСменыТовары.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.ЗакрытиеСмены.Товары КАК ЗакрытиеСменыТовары
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Цены.СрезПоследних КАК Цены
	|		ПО Цены.Номенклатура   = ЗакрытиеСменыТовары.Номенклатура
	|		 И Цены.ХарактеристикаНоменклатуры = ЗакрытиеСменыТовары.ХарактеристикаНоменклатуры
	|		 И Цены.ТипЦен        = ЗакрытиеСменыТовары.Ссылка.СкладКомпании.ТипЦенРозничнойТорговли
	|	
	|ГДЕ
	|	ЗакрытиеСменыТовары.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗакрытиеСменыТовары.Номенклатура,
	|	ЗакрытиеСменыТовары.ХарактеристикаНоменклатуры,
	|	ЗакрытиеСменыТовары.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗакрытиеСмены.Организация            КАК Организация,
	|	ЗакрытиеСмены.ПодразделениеКомпании  КАК ПодразделениеКомпании,
	|	ЗакрытиеСмены.СкладКомпании          КАК СкладКомпании,
	|	ЗакрытиеСмены.СкладКомпании.ТипЦенРозничнойТорговли КАК ТипЦены
	|ИЗ
	|	Документ.ЗакрытиеСмены КАК ЗакрытиеСмены
	|ГДЕ
	|	ЗакрытиеСмены.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций 			=
		УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(
		ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивПодразделенийКомпании =
		УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(
		ТаблицаРеквизитыДокументов, "ПодразделениеКомпании").ВыгрузитьКолонку(0);
	МассивСкладов    			=
		УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(
		ТаблицаРеквизитыДокументов, "СкладКомпании").ВыгрузитьКолонку(0);
	МассивТиповЦен    			=
		УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(
		ТаблицаРеквизитыДокументов, "ТипЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию",
		?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьПодразделениеКомпании", ?(МассивПодразделенийКомпании.Количество() = 1,
		МассивПодразделенийКомпании[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад", ?(МассивСкладов.Количество() = 1, МассивСкладов[0], МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьТипЦены", ?(МассивТиповЦен.Количество() = 1, МассивТиповЦен[0], Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЭтикеток");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("НеПересчитыватьЦены");
	СтруктураДействий.Вставить("ЦеныИзДокументаОснования");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	Товары.ЗаполнитьЗначения(СтруктураДействий.ЗаполнитьОрганизацию, "Организация");
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//	Адрес - адрес структуры данных во временном хранилище.
//
Функция ПолучитьДанныеДляПечатиЦенников(МассивДокументов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗакрытиеСменыТовары.Номенклатура КАК Номенклатура,
	|	ЗакрытиеСменыТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ЗакрытиеСменыТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МИНИМУМ(ЗакрытиеСменыТовары.НомерСтроки) КАК Порядок,
	|	СУММА(ВЫБОР
	|			КОГДА ЗакрытиеСменыТовары.Ссылка.СкладКомпании.Розничный = ИСТИНА
	|				ТОГДА ЗакрытиеСменыТовары.Количество * (ЕСТЬNULL(ЗакрытиеСменыТовары.ЕдиницаИзмерения.Коэффициент, 1) / ЕСТЬNULL(Цены.ЕдиницаИзмерения.Коэффициент, 1))
	|			ИНАЧЕ ЗакрытиеСменыТовары.Количество
	|		КОНЕЦ) КАК Количество,
	|	МАКСИМУМ(ЗакрытиеСменыТовары.СуммаВсего) КАК Цена,
	|	МАКСИМУМ(ЗакрытиеСменыТовары.СтавкаНДС) КАК СтавкаНДС,
	|	МАКСИМУМ(ЗакрытиеСменыТовары.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.ЗакрытиеСмены.Товары КАК ЗакрытиеСменыТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Цены.СрезПоследних КАК Цены
	|		ПО (Цены.Номенклатура = ЗакрытиеСменыТовары.Номенклатура)
	|			И (Цены.ХарактеристикаНоменклатуры = ЗакрытиеСменыТовары.ХарактеристикаНоменклатуры)
	|			И (Цены.ТипЦен = ЗакрытиеСменыТовары.Ссылка.СкладКомпании.ТипЦенРозничнойТорговли)
	|ГДЕ
	|	ЗакрытиеСменыТовары.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗакрытиеСменыТовары.Номенклатура,
	|	ЗакрытиеСменыТовары.ХарактеристикаНоменклатуры,
	|	ЗакрытиеСменыТовары.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗакрытиеСмены.Организация КАК Организация,
	|	ЗакрытиеСмены.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|	ЗакрытиеСмены.СкладКомпании КАК СкладКомпании,
	|	ЗакрытиеСмены.СкладКомпании.ТипЦенРозничнойТорговли КАК ТипЦены
	|ИЗ
	|	Документ.ЗакрытиеСмены КАК ЗакрытиеСмены
	|ГДЕ
	|	ЗакрытиеСмены.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций 			=
		УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(
		ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивПодразделенийКомпании =
		УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(
		ТаблицаРеквизитыДокументов, "ПодразделениеКомпании").ВыгрузитьКолонку(0);
	МассивСкладов    			=
		УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(
		ТаблицаРеквизитыДокументов, "СкладКомпании").ВыгрузитьКолонку(0);
	МассивТиповЦен    			=
		УправлениеДиалогомСервер.СвернутьТаблицуЗначенийПоРеквизиту(
		ТаблицаРеквизитыДокументов, "ТипЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию",
		?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьПодразделениеКомпании",
		?(МассивПодразделенийКомпании.Количество() = 1, МассивПодразделенийКомпании[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад", ?(МассивСкладов.Количество() = 1, МассивСкладов[0], МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьВидЦены", ?(МассивТиповЦен.Количество() = 1, МассивТиповЦен[0], Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЦенников");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("НеПересчитыватьЦены");
	СтруктураДействий.Вставить("ЦеныИзДокументаОснования");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	Товары = МассивРезультатов[0].Выгрузить();
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "Организация");
	Товары.ЗаполнитьЗначения(СтруктураДействий.ЗаполнитьОрганизацию, "Организация");
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

#КонецОбласти   

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	ОбъектыВводимыеНаОсновании = Новый Массив();
	ОбъектыВводимыеНаОсновании.Добавить(Документы.ВозвратОтПокупателя);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.КорректировкаДвижений);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.Событие);
	ОбъектыВводимыеНаОсновании.Добавить(Документы.СчетФактураВыданный);
	
	Для Каждого ОбъектВводимыйНаОсновании Из ОбъектыВводимыеНаОсновании Цикл
		ОбъектВводимыйНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЦикла;
		
	ОбработчикРасходныйСкладскойОрдер = Новый Структура();
	ОбработчикРасходныйСкладскойОрдер.Вставить("ОбъектМетаданных" , Метаданные.Документы.РасходныйСкладскойОрдер);
	ОбработчикРасходныйСкладскойОрдер.Вставить("Обработчик" , "СоздатьНаОснованииЗакрытияСменыРасходныйСкладскойОрдер");
	
	ОбработчикПриходныйСкладскойОрдер = Новый Структура();
	ОбработчикПриходныйСкладскойОрдер.Вставить("ОбъектМетаданных" , Метаданные.Документы.ПриходныйСкладскойОрдер);
	ОбработчикПриходныйСкладскойОрдер.Вставить("Обработчик" , "СоздатьНаОснованииЗакрытияСменыПриходныйСкладскойОрдер");
	
	
	ДокументыСкладскихОрдеров = Новый Массив;
	ДокументыСкладскихОрдеров.Добавить(ОбработчикРасходныйСкладскойОрдер);
	ДокументыСкладскихОрдеров.Добавить(ОбработчикПриходныйСкладскойОрдер);
	
	Для Каждого ДокументСкладскогоОрдера Из ДокументыСкладскихОрдеров Цикл
	
		ДобавитьКомандуСоздатьНаОснованииСкладскойОрдер(
			КомандыСозданияНаОсновании,
			ДокументСкладскогоОрдера.ОбъектМетаданных,
			ДокументСкладскогоОрдера.Обработчик
		);
	
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьКомандуСоздатьНаОснованииСкладскойОрдер(КомандыСозданияНаОсновании, ОбъектМетаданных, Обработчик)
	
	Если ПравоДоступа("Добавление", ОбъектМетаданных) Тогда
		
		НоваяКоманда = КомандыСозданияНаОсновании.Добавить();
		НоваяКоманда.Менеджер = "СозданиеНаОснованииАльфаАвтоКлиент";
		НоваяКоманда.Обработчик = Обработчик;
		НоваяКоманда.Представление = ОбщегоНазначения.ПредставлениеОбъекта(ОбъектМетаданных);
		
		Если ПраваИНастройкиПользователя.Значение("ВводНаОснованииПроведенныхДокументов") Тогда
			
			НоваяКоманда.РежимЗаписи = "Проводить";
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

 // Получение данных о прослеживаемых товаров
//
// Параметры:
//  Объект	 - ДокументОбъект.ЗакрытиеСмены - Документ, на основании которого произошла операция с товаром
//  ДвиженияПоГТД	 - ТаблицаЗначений - Движения документа по регистру ГТД партии товаров компании
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Список прослеживаемых товаров
//
Функция ОперацииСПрослеживаемымиТоварами(Объект) Экспорт 
	
	// TODO: На данный момент сделано только для формирования отчета об операциях
	
	// Получим таблицу для формирования данных по операции
	ТаблицаОперацииПрослеживаемости = УчетПрослеживаемыхТоваровСервер.ИнициализацияТаблицыОпераций();
	
	// Найдем РНПТ
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ГТДПартийТоваровКомпании.Количество > 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.РозничнаяПродажа)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.ВозвратРозница)
	|	КОНЕЦ КАК КодОперации,
	|	ГТДПартийТоваровКомпании.Номенклатура КАК Номенклатура,
	|	ГТДПартийТоваровКомпании.ГТД КАК ГТД,
	|	СУММА(ГТДПартийТоваровКомпании.Количество * ВЫБОР
	|			КОГДА ГТДПартийТоваровКомпании.Количество < 0
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Количество,
	|	ВЫБОР
	|		КОГДА ГТДПартийТоваровКомпании.Количество > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПродажа,
	|	ГТДПартийТоваровКомпании.Партия КАК Партия
	|ПОМЕСТИТЬ РНПТДокумента
	|ИЗ
	|	РегистрНакопления.ГТДПартийТоваровКомпании КАК ГТДПартийТоваровКомпании
	|ГДЕ
	|	ГТДПартийТоваровКомпании.Регистратор = &Регистратор
	|	И ГТДПартийТоваровКомпании.ГТД.РНПТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ГТДПартийТоваровКомпании.Номенклатура,
	|	ГТДПартийТоваровКомпании.ГТД,
	|	ГТДПартийТоваровКомпании.Партия,
	|	ВЫБОР
	|		КОГДА ГТДПартийТоваровКомпании.Количество > 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.РозничнаяПродажа)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КодыОперацийПрослеживаемости.ВозвратРозница)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ГТДПартийТоваровКомпании.Количество > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПартииТоваровКомпании.Количество > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоРасход,
	|	ПартииТоваровКомпании.Номенклатура КАК Номенклатура,
	|	ПартииТоваровКомпании.Партия КАК Партия,
	|	СУММА(ПартииТоваровКомпании.Количество * ВЫБОР
	|			КОГДА ПартииТоваровКомпании.Количество < 0
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ПартииТоваровКомпании.СуммаБезНДС * ВЫБОР
	|			КОГДА ПартииТоваровКомпании.Количество < 0
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаБезНДС
	|ПОМЕСТИТЬ СуммаНоменклатуры
	|ИЗ
	|	РегистрНакопления.ПартииТоваровКомпании КАК ПартииТоваровКомпании
	|ГДЕ
	|	ПартииТоваровКомпании.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ПартииТоваровКомпании.Количество > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ПартииТоваровКомпании.Номенклатура,
	|	ПартииТоваровКомпании.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РНПТДокумента.КодОперации КАК КодОперации,
	|	РНПТДокумента.Номенклатура КАК Номенклатура,
	|	РНПТДокумента.ГТД КАК РНПТ,
	|	СУММА(РНПТДокумента.Количество) КАК КоличествоПрослеживаемости,
	|	СУММА(ЕСТЬNULL(СуммаНоменклатуры.Количество, 0)) КАК КоличествоПартии,
	|	СУММА(ЕСТЬNULL(СуммаНоменклатуры.СуммаБезНДС, 0)) КАК СуммаПартии
	|ИЗ
	|	РНПТДокумента КАК РНПТДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммаНоменклатуры КАК СуммаНоменклатуры
	|		ПО РНПТДокумента.Номенклатура = СуммаНоменклатуры.Номенклатура
	|			И РНПТДокумента.ЭтоПродажа = СуммаНоменклатуры.ЭтоРасход
	|			И РНПТДокумента.Партия = СуммаНоменклатуры.Партия
	|
	|СГРУППИРОВАТЬ ПО
	|	РНПТДокумента.КодОперации,
	|	РНПТДокумента.Номенклатура,
	|	РНПТДокумента.ГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗакрытиеСмены.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ЗакрытиеСмены.Дата, КВАРТАЛ) КАК ПериодОтчета,
	|	ЗНАЧЕНИЕ(Перечисление.ДокументыОтображенияОпераций.ОтчетОбОперациях) КАК ОтчетностьОперации,
	|	ЗакрытиеСмены.Ссылка КАК Документ,
	|	ЗакрытиеСмены.Дата КАК ДатаДокумента,
	|	ЗакрытиеСмены.Номер КАК НомерДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументов.Другое) КАК ВидДокумента
	|ИЗ
	|	Документ.ЗакрытиеСмены КАК ЗакрытиеСмены
	|ГДЕ
	|	ЗакрытиеСмены.Ссылка = &Регистратор";
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	Если ПакетЗапросов[2].Пустой() Тогда
		Возврат ТаблицаОперацииПрослеживаемости;
	КонецЕсли;
	
	ВыборкаНоменклатуры = ПакетЗапросов[2].Выбрать();
	ШапкаДокумента = ПакетЗапросов[3].Выбрать();
	ШапкаДокумента.Следующий();
	НомерДокумента = УправлениеПечатьюПлатформа.ПолучитьНомерДляПечати(ШапкаДокумента.Документ);
	
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		
		НоваяСтрока = ТаблицаОперацииПрослеживаемости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ШапкаДокумента);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаНоменклатуры);
		НоваяСтрока.НомерДокумента = НомерДокумента;
		
		// Получим сумму без НДС
		Если ВыборкаНоменклатуры.КоличествоПрослеживаемости = ВыборкаНоменклатуры.КоличествоПартии Тогда
			НоваяСтрока.СуммаБезНДС = ВыборкаНоменклатуры.СуммаПартии;
		Иначе
			НоваяСтрока.СуммаБезНДС = ?(ВыборкаНоменклатуры.КоличествоПартии = 0,
				ВыборкаНоменклатуры.СуммаПартии,
				Окр(ВыборкаНоменклатуры.СуммаПартии / ВыборкаНоменклатуры.КоличествоПартии
					* ВыборкаНоменклатуры.КоличествоПрослеживаемости, 2));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаОперацииПрослеживаемости;
	
КонецФункции

// Проверяет возможность ввода счет-фактуры выданной на основании документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ЗакрытиеСмены - документ, для которого выполняется действие.
//  ДополнительныеПараметры - Структура - Набор параметров, использующихся при выполнения операции.
//
// Возвращаемое значение:
//  Булево - Истина, если ввод возможен, Ложь - в противном случае.
//
Функция ВозможенВводСчетФактурыВыданной(ДокументОбъект, ДополнительныеПарметры = Неопределено) Экспорт
	
	СистемаНО = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.СистемаНалогообложения,
		ДокументОбъект.Организация,
	);
	НалогообложениеУСН = ПолучитьЗначениеУчетнойПолитики(
		ПланыВидовХарактеристик.УчетныеПолитики.НалогообложениеНДСПриУСН,
		ДокументОбъект.Организация,
	);
	
	Если СистемаНО = Перечисления.СистемыНалогообложения.Упрощенная И НЕ РаботаСоСтавкамиНДССервер.УСНПлательщикНДС(НалогообложениеУСН) Тогда
        Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбработкаСобытийДокументаСервер.ДокументСодержитСтрокиСНДС(ДокументОбъект, "Товары, Возвраты");
	
КонецФункции

#КонецОбласти

#КонецЕсли