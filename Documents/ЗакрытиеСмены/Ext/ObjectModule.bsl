// Модуль документа "Закрытие смены"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает выборку по шапке
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗакрытиеСмены - Ссылка на документ для которого получаем шапку.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка по шапке.
//
Функция ПолучитьШапкуДокумента(ДокументСсылка) Экспорт
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	СУММА(ЗакрытиеСменыТовары.СуммаВсего) КАК СуммаВсего
	                    |ПОМЕСТИТЬ ДокТовары
	                    |ИЗ
	                    |	Документ.ЗакрытиеСмены.Товары КАК ЗакрытиеСменыТовары
	                    |ГДЕ
	                    |	ЗакрытиеСменыТовары.Ссылка = &Ссылка
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	Док.Ссылка КАК Ссылка,
	                    |	Док.Дата КАК Дата,
	                    |	Док.ВалютаДокумента КАК ВалютаДокумента,
	                    |	Док.КурсДокумента КАК КурсДокумента,
	                    |	Док.ТипЦен КАК ТипЦен,
	                    |	Док.ХозОперация КАК ХозОперация,
	                    |	Док.КурсВалютыУпр КАК КурсВалютыУпр,
	                    |	Док.МоментВремени КАК МоментВремени,
	                    |	Док.Организация КАК Организация,
	                    |	Док.ПодразделениеКомпании КАК ПодразделениеКомпании,
	                    |	Док.Проект КАК Проект,
	                    |	Док.СкладКомпании КАК СкладКомпании,
	                    |	Док.Ссылка КАК ДокументПродажи,
	                    |	Док.КассаККМ КАК КассаККМ,
	                    |	ЕСТЬNULL(ДокТовары.СуммаВсего, 0) КАК СуммаВсего
	                    |ИЗ
	                    |	Документ.ЗакрытиеСмены КАК Док
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ ДокТовары КАК ДокТовары
	                    |		ПО (ИСТИНА)
	                    |ГДЕ
	                    |	Док.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(); Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции // ПолучитьШапкуДокумента()

// Формирует движения документа по партионным регистрам
//
// Параметры:
// 	Режим - РежимПроведенияДокумента - режим проведения (оперативный/неоперативный)
// 	ДокументСсылка - ДокументСсылка.ЗакрытиеСмены - ссылка на документ который надо допровести по партиям.
//
// Возвращаемое значение:
//	Булево - Возвращает Истина - все нормально, ложь - чего-то не так
//
Функция ПровестиПоПартиям(Режим,ДокументСсылка) Экспорт
	Отказ=Ложь;
	
	// получим шапку документа
	ШапкаДокумента = ПолучитьШапкуДокумента(ДокументСсылка);
	
	// Получим способ ведения баланса.
	БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(ШапкаДокумента.Дата);
	
	// Проверим, если подразделение проводится по партиям "отложенно", то дальше не идем.
	НаборЗаписейДопроведениеПоПартиям=Движения.ДопроведениеПоПартиям;
	НаборЗаписейДопроведениеПоПартиям.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейДопроведениеПоПартиям.ШапкаДокумента=ШапкаДокумента;
	Отказ=НЕ НаборЗаписейДопроведениеПоПартиям.Зафиксировать() ИЛИ Отказ;
	Если НаборЗаписейДопроведениеПоПартиям.НеПроводитьПартии Тогда
		НаборЗаписейДоходыИРасходы=Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте=Ложь;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов=Справочники.СтатьиДоходовИРасходов.СебестоимостьНеоприходованныхПартий;
		НаборЗаписейДоходыИРасходы.Доход = Оплаты.Итог("Сумма") - Оплаты.Итог("СуммаВозврат") - ВозвратОплаты.Итог("Сумма");
		НаборЗаписейДоходыИРасходы.ШапкаДокумента=ШапкаДокумента;
		Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
		Возврат НЕ Отказ;
	КонецЕсли;
	
	// Сформируем структуру ТЗ для записи товаров по складам
	ТоварыПоСкладу=Новый ТаблицаЗначений;
	ТоварыПоСкладу.Колонки.Добавить("Номенклатура");
	ТоварыПоСкладу.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТоварыПоСкладу.Колонки.Добавить("Количество");
	ТоварыПоСкладам=Новый Соответствие;
	ТоварыПоСкладуВозвраты=Новый ТаблицаЗначений;
	ТоварыПоСкладуВозвраты.Колонки.Добавить("Номенклатура");
	ТоварыПоСкладуВозвраты.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТоварыПоСкладуВозвраты.Колонки.Добавить("Количество");
	ТоварыПоСкладуВозвраты.Колонки.Добавить("ДокументПродажи");
	ТоварыПоСкладуВозвраты.Колонки.Добавить("Себестоимость");
	ТоварыПоСкладуВозвраты.Колонки.Добавить("СтавкаНДС");
	ТоварыПоСкладамВозвраты = Новый Соответствие;
	
	ЗапросТовары=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                          |	ВЫБОР
	                          |		КОГДА &АктОРеализации
	                          |			ТОГДА &СкладКомпании
	                          |		ИНАЧЕ ЗакрытиеСменыТовары.МестоРазмещения
	                          |	КОНЕЦ КАК СкладКомпании,
	                          |	ЗакрытиеСменыТовары.Номенклатура КАК Номенклатура,
	                          |	ЗакрытиеСменыТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	                          |	СУММА(ЗакрытиеСменыТовары.Количество * ЗакрытиеСменыТовары.Коэффициент) КАК Количество
	                          |ИЗ
	                          |	Документ.ЗакрытиеСмены.Товары КАК ЗакрытиеСменыТовары
	                          |ГДЕ
	                          |	ЗакрытиеСменыТовары.Ссылка = &Ссылка
	                          |	И ЗакрытиеСменыТовары.Номенклатура.ВидНоменклатуры <> &ВидНоменклатурыУслуга
	                          |
	                          |СГРУППИРОВАТЬ ПО
	                          |	ВЫБОР
	                          |		КОГДА &АктОРеализации
	                          |			ТОГДА &СкладКомпании
	                          |		ИНАЧЕ ЗакрытиеСменыТовары.МестоРазмещения
	                          |	КОНЕЦ,
	                          |	ЗакрытиеСменыТовары.Номенклатура,
	                          |	ЗакрытиеСменыТовары.ХарактеристикаНоменклатуры
	                          |ИТОГИ ПО
	                          |	СкладКомпании
	                          |;
	                          |
	                          |////////////////////////////////////////////////////////////////////////////////
	                          |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                          |	ВЫБОР
	                          |		КОГДА &АктОРеализации
	                          |			ТОГДА &СкладКомпании
	                          |		ИНАЧЕ ЗакрытиеСменыВозвраты.МестоРазмещения
	                          |	КОНЕЦ КАК СкладКомпании,
	                          |	ЗакрытиеСменыВозвраты.Номенклатура КАК Номенклатура,
	                          |	ЗакрытиеСменыВозвраты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	                          |	СУММА(ЗакрытиеСменыВозвраты.Количество * ЗакрытиеСменыВозвраты.Коэффициент) КАК Количество,
	                          |	ЗакрытиеСменыВозвраты.Ссылка КАК ДокументПродажи,
	                          |	&Партия КАК Партия,
	                          |	СУММА(ВЫБОР
	                          |			КОГДА ЗакрытиеСменыВозвраты.Количество * ЗакрытиеСменыВозвраты.Коэффициент = 0
	                          |				ТОГДА 0
	                          |			ИНАЧЕ ВЫРАЗИТЬ(ЗакрытиеСменыВозвраты.СуммаВсего
	                          |				/ (ЗакрытиеСменыВозвраты.Количество * ЗакрытиеСменыВозвраты.Коэффициент) КАК ЧИСЛО(15, 2))
	                          |		КОНЕЦ) КАК Себестоимость,
	                          |	МАКСИМУМ(ЗакрытиеСменыВозвраты.СтавкаНДС) КАК СтавкаНДС
	                          |ИЗ
	                          |	Документ.ЗакрытиеСмены.Возвраты КАК ЗакрытиеСменыВозвраты
	                          |ГДЕ
	                          |	ЗакрытиеСменыВозвраты.Ссылка = &Ссылка
	                          |	И ЗакрытиеСменыВозвраты.Номенклатура.ВидНоменклатуры <> &ВидНоменклатурыУслуга
	                          |
	                          |СГРУППИРОВАТЬ ПО
	                          |	ВЫБОР
	                          |		КОГДА &АктОРеализации
	                          |			ТОГДА &СкладКомпании
	                          |		ИНАЧЕ ЗакрытиеСменыВозвраты.МестоРазмещения
	                          |	КОНЕЦ,
	                          |	ЗакрытиеСменыВозвраты.Номенклатура,
	                          |	ЗакрытиеСменыВозвраты.ХарактеристикаНоменклатуры,
	                          |	ЗакрытиеСменыВозвраты.Ссылка
	                          |ИТОГИ ПО
	                          |	СкладКомпании");
	ЗапросТовары.УстановитьПараметр("АктОРеализации",(ШапкаДокумента.ХозОперация=Справочники.ХозОперации.АктОРеализации));
	ЗапросТовары.УстановитьПараметр("СкладКомпании",ШапкаДокумента.СкладКомпании);
	ЗапросТовары.УстановитьПараметр("Ссылка",ШапкаДокумента.Ссылка);
	ЗапросТовары.УстановитьПараметр("ВидНоменклатурыУслуга",Перечисления.ВидыНоменклатуры.Услуга);
	ЗапросТовары.УстановитьПараметр("Партия",  Константы.ПартияТоваровОтрицательныхОстатков.Получить());
	
	ПакетЗапроса = ЗапросТовары.ВыполнитьПакет();
	
	ВыборкаСклады=ПакетЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"СкладКомпании");
	
	Пока ВыборкаСклады.Следующий() Цикл
		ТоварыПоТекущемуСкладу=ТоварыПоСкладу.Скопировать();
		ВыборкаТовары=ВыборкаСклады.Выбрать();
		Пока ВыборкаТовары.Следующий() Цикл
			СтрокаТоваровПоСкладу=ТоварыПоТекущемуСкладу.Добавить();
			СтрокаТоваровПоСкладу.Номенклатура=ВыборкаТовары.Номенклатура;
			СтрокаТоваровПоСкладу.ХарактеристикаНоменклатуры=ВыборкаТовары.ХарактеристикаНоменклатуры;
			СтрокаТоваровПоСкладу.Количество=ВыборкаТовары.Количество;
		КонецЦикла;
		ТоварыПоСкладам.Вставить(ВыборкаСклады.СкладКомпании,ТоварыПоТекущемуСкладу);
	КонецЦикла;
	
	ВыборкаСкладыВозврат = ПакетЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"СкладКомпании");
	
	Пока ВыборкаСкладыВозврат.Следующий() Цикл
		ТоварыПоТекущемуСкладу=ТоварыПоСкладуВозвраты.Скопировать();
		ВыборкаТовары=ВыборкаСкладыВозврат.Выбрать();
		Пока ВыборкаТовары.Следующий() Цикл
			СтрокаТоваровПоСкладу=ТоварыПоТекущемуСкладу.Добавить();
			СтрокаТоваровПоСкладу.Номенклатура=ВыборкаТовары.Номенклатура;
			СтрокаТоваровПоСкладу.ХарактеристикаНоменклатуры=ВыборкаТовары.ХарактеристикаНоменклатуры;
			СтрокаТоваровПоСкладу.Количество=ВыборкаТовары.Количество;
			СтрокаТоваровПоСкладу.Себестоимость=ВыборкаТовары.Себестоимость;
			СтрокаТоваровПоСкладу.СтавкаНДС=ВыборкаТовары.СтавкаНДС;
		КонецЦикла;
		ТоварыПоСкладамВозвраты.Вставить(ВыборкаСкладыВозврат.СкладКомпании,ТоварыПоТекущемуСкладу);
	КонецЦикла;
	
	// проведем по партиям товаров
	НаборЗаписейПартии=Движения.ПартииТоваровКомпании;
	Для каждого Склад Из ТоварыПоСкладам Цикл
		НаборЗаписейПартии.ДокументОбъект            = ЭтотОбъект;
		НаборЗаписейПартии.ПоБазовомуКоличеству      = Ложь; //По фактическому количеству
		НаборЗаписейПартии.СтатусПартии              = Неопределено; //Продаем все товары
		НаборЗаписейПартии.ЗаписыватьДвижения        = Истина;
		НаборЗаписейПартии.СкладКомпании             = Склад.Ключ;
		НаборЗаписейПартии.Организация				 = ШапкаДокумента.Организация;
		НаборЗаписейПартии.ШапкаДокумента            = ШапкаДокумента;
		НаборЗаписейПартии.РезультатЗапросаПоТоварам = Склад.Значение;
		НаборЗаписейПартии.ТаблицаВозвратов          = ТоварыПоСкладамВозвраты.Получить(Склад.Ключ);
		Отказ = НЕ НаборЗаписейПартии.Расход() ИЛИ Отказ;
	КонецЦикла; 
	
	ПартияОтрицательныхОстатков = Константы.ПартияТоваровОтрицательныхОстатков.Получить();
	Для каждого Склад Из ТоварыПоСкладамВозвраты Цикл
		
		Если Склад.Значение.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Склад.Значение.Колонки.Добавить("Партия");
		
		Для Каждого ТекущаяСтрока Из Склад.Значение Цикл
			ТекущаяСтрока.Партия = ПартияОтрицательныхОстатков;
		КонецЦикла;
		
		НаборЗаписейПартии.ДокументОбъект            = ЭтотОбъект;
		НаборЗаписейПартии.ПоБазовомуКоличеству      = Ложь; //По фактическому количеству
		НаборЗаписейПартии.СтатусПартии              = Неопределено; //Продаем все товары
		НаборЗаписейПартии.Сторно                    = Истина;
		НаборЗаписейПартии.ИмяРеквизитаДокумент      = "Ссылка";
		НаборЗаписейПартии.СкладКомпании             = Склад.Ключ;
		НаборЗаписейПартии.Организация				 = ШапкаДокумента.Организация;
		НаборЗаписейПартии.ШапкаДокумента            = ШапкаДокумента;
		НаборЗаписейПартии.РезультатЗапросаПоТоварам = Склад.Значение;
		Отказ = НЕ НаборЗаписейПартии.Расход() ИЛИ Отказ;
	КонецЦикла; 
	
	// двигаем границу последовательности партий
	Если Ссылка <> ДокументСсылка Тогда
		
		РаботаСГраницами.МоментВремениПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		РаботаСГраницами.ДвиженияПоПартиямПередПроведением(ДокументСсылка, ДополнительныеСвойства);
		
	КонецЕсли;
	
	РаботаСГраницами.СдвинутьГраницуПартий(ДокументСсылка, ДополнительныеСвойства, Движения);

	// спишем реализованные комиссионные товары
	НаборЗаписейРеализованныеТовары = Движения.РеализованныеТовары;
	НаборЗаписейРеализованныеТовары.ДокументОбъект       = ЭтотОбъект;
	НаборЗаписейРеализованныеТовары.ШапкаДокумента       = ШапкаДокумента;
	НаборЗаписейРеализованныеТовары.ПоБазовомуКоличеству = Ложь;
	Отказ = НЕ НаборЗаписейРеализованныеТовары.Приход() ИЛИ Отказ;
	
	// продажи
	Если НЕ Отказ Тогда
		НаборЗаписейПродажи=Движения.Продажи;
		НаборЗаписейПродажи.РежимПроведения = Режим;
		НаборЗаписейПродажи.ДокументОбъект            = ЭтотОбъект;
		НаборЗаписейПродажи.СкладКомпании             = ?(ХозОперация=Справочники.ХозОперации.АктОРеализации,СкладКомпании,Неопределено);
		НаборЗаписейПродажи.ДокументПродажи			  = ШапкаДокумента.ДокументПродажи;
		НаборЗаписейПродажи.Сторно                    = Ложь;
		НаборЗаписейПродажи.РезультатЗапросаПоТоварам = ЗапросПоПроданнымТоварам(ШапкаДокумента.Ссылка);
		НаборЗаписейПродажи.Покупатель                = Неопределено;
		НаборЗаписейПродажи.ДоговорВзаиморасчетов     = Неопределено;
		НаборЗаписейПродажи.ПодразделениеКомпании     = ШапкаДокумента.ПодразделениеКомпании;
		НаборЗаписейПродажи.ШапкаДокумента            = ШапкаДокумента;
		НаборЗаписейПродажи.Комиссия                  = Ложь;
		НаборЗаписейПродажи.ПоБазовомуКоличеству      = Ложь;
		Отказ = НЕ НаборЗаписейПродажи.Приход() ИЛИ Отказ;
	КонецЕсли;
	
	// возврат продажи
	Если НЕ Отказ Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗакрытиеСменыВозвраты.Номенклатура КАК Номенклатура,
		               |	ЗакрытиеСменыВозвраты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |	ЗакрытиеСменыВозвраты.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		               |	ЗакрытиеСменыВозвраты.Номенклатура.СтавкаНДС КАК СтавкаНДС,
		               |	ВЫБОР
		               |		КОГДА &АктОРеализации
		               |			ТОГДА &СкладКомпании
		               |		ИНАЧЕ ЗакрытиеСменыВозвраты.МестоРазмещения
		               |	КОНЕЦ КАК СкладКомпании,
		               |	СУММА(ЗакрытиеСменыВозвраты.Количество * ЗакрытиеСменыВозвраты.Коэффициент) КАК Количество,
		               |	СУММА(ЗакрытиеСменыВозвраты.СуммаНДС) КАК СуммаНДС,
		               |	СУММА(ЗакрытиеСменыВозвраты.СуммаСкидки) КАК СуммаСкидки,
		               |	СУММА(ЗакрытиеСменыВозвраты.СуммаВсего) КАК Сумма,
		               |	ЗакрытиеСменыВозвраты.СтавкаНДС КАК СтавкаНДС1
		               |ИЗ
		               |	Документ.ЗакрытиеСмены.Возвраты КАК ЗакрытиеСменыВозвраты
		               |ГДЕ
		               |	ЗакрытиеСменыВозвраты.Ссылка = &Ссылка
		               |	И ЗакрытиеСменыВозвраты.Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВЫБОР
		               |		КОГДА &АктОРеализации
		               |			ТОГДА &СкладКомпании
		               |		ИНАЧЕ ЗакрытиеСменыВозвраты.МестоРазмещения
		               |	КОНЕЦ,
		               |	ЗакрытиеСменыВозвраты.Номенклатура,
		               |	ЗакрытиеСменыВозвраты.ХарактеристикаНоменклатуры,
		               |	ЗакрытиеСменыВозвраты.Номенклатура.ВидНоменклатуры,
		               |	ЗакрытиеСменыВозвраты.СтавкаНДС,
		               |	ЗакрытиеСменыВозвраты.Номенклатура.СтавкаНДС,
		               |	ЗакрытиеСменыВозвраты.Ссылка";
		Запрос.УстановитьПараметр("Ссылка",     ШапкаДокумента.Ссылка);
		Запрос.УстановитьПараметр("АктОРеализации",(ШапкаДокумента.ХозОперация=Справочники.ХозОперации.АктОРеализации));
		Запрос.УстановитьПараметр("СкладКомпании",ШапкаДокумента.СкладКомпании);
		
		ТаблицаПартий = НаборЗаписейПартии.Выгрузить();
		СтрокиУдалить = Новый Массив;
		
		РезультатЗапросаПоТоварам = Запрос.Выполнить().Выгрузить();
		СтруктураОтбора = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
		
		Для Каждого ТекущаяСтрока Из РезультатЗапросаПоТоварам Цикл
			ТаблицаВозвратов = ТоварыПоСкладамВозвраты.Получить(ТекущаяСтрока.СкладКомпании);
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущаяСтрока);
			НайденныеСтроки = ТаблицаВозвратов.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокиУдалить.Добавить(ТекущаяСтрока);
				Продолжить;
			КонецЕсли;
			КоличествоВозврата = 0;
			Для Каждого ТекущийВозврат Из НайденныеСтроки Цикл
				КоличествоВозврата = КоличествоВозврата + ТекущийВозврат.Количество;
			КонецЦикла;
			Если ТекущаяСтрока.Количество <> КоличествоВозврата Тогда
				ТекущаяСтрока.СуммаНДС = Окр(ТекущаяСтрока.СуммаНДС/ТекущаяСтрока.Количество * КоличествоВозврата, 2);
				ТекущаяСтрока.СуммаСкидки = Окр(ТекущаяСтрока.СуммаСкидки/ТекущаяСтрока.Количество * КоличествоВозврата, 2);
				ТекущаяСтрока.Сумма = Окр(ТекущаяСтрока.Сумма/ТекущаяСтрока.Количество * КоличествоВозврата, 2);
				ТекущаяСтрока.Количество = КоличествоВозврата;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
			РезультатЗапросаПоТоварам.Удалить(СтрокаУдалить);
		КонецЦикла;
		
		СтрокиУдалить = Новый Массив;
		
		Для Каждого ТекущаяСтрока Из ТаблицаПартий Цикл
			Если ЗначениеЗаполнено(ТекущаяСтрока.ДокументПродажи) Тогда
				СтрокиУдалить.Добавить(ТекущаяСтрока);
			КонецЕсли;
			ТекущаяСтрока.ДокументПродажи = ШапкаДокумента.Ссылка;
		КонецЦикла;
		
		Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
			ТаблицаПартий.Удалить(СтрокаУдалить);
		КонецЦикла;
	
		НаборЗаписейПродажи=Движения.Продажи;
		НаборЗаписейПродажи.ДокументОбъект            = ЭтотОбъект;
		НаборЗаписейПродажи.СкладКомпании             = ?(ХозОперация=Справочники.ХозОперации.АктОРеализации,СкладКомпании,Неопределено);
		НаборЗаписейПродажи.ДокументПродажи			  = ШапкаДокумента.Ссылка;
		НаборЗаписейПродажи.Сторно                    = Истина;
		НаборЗаписейПродажи.РезультатЗапросаПоПартиям = ТаблицаПартий;
		НаборЗаписейПродажи.Покупатель                = Неопределено;
		НаборЗаписейПродажи.ДоговорВзаиморасчетов     = Неопределено;
		НаборЗаписейПродажи.ПодразделениеКомпании     = ШапкаДокумента.ПодразделениеКомпании;
		НаборЗаписейПродажи.ШапкаДокумента            = ШапкаДокумента;
		НаборЗаписейПродажи.Комиссия                  = Ложь;
		НаборЗаписейПродажи.ПоБазовомуКоличеству      = Ложь;
		НаборЗаписейПродажи.РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам;

		ПустыеСтрокиТабличнойЧасти=НаборЗаписейПродажи.РезультатЗапросаПоТоварам.НайтиСтроки(Новый Структура("Количество",0));
		Для Каждого ПустаяСтрока Из ПустыеСтрокиТабличнойЧасти Цикл
			НаборЗаписейПродажи.РезультатЗапросаПоТоварам.Удалить(ПустаяСтрока);
		КонецЦикла;
		Отказ = НЕ НаборЗаписейПродажи.Приход() ИЛИ Отказ;
	КонецЕсли;
	
	// Доходы и расходы.
	
	// Подготовим таблицу движений в разрезе подразделений только собственных списанных партий.
	ТаблицаСписанийПартий = Движения.ПартииТоваровКомпании.Выгрузить();
	ТаблицаСписанийПартий.Свернуть("СкладКомпании, СтатусПартии","СуммаУпр");
	
	СтруктураОтбора      = Новый Структура("СтатусПартии",Перечисления.СтатусыПартий.ТоварПринятыйКомиссия);
	МассивНайденныхСтрок = ТаблицаСписанийПартий.НайтиСтроки(СтруктураОтбора);
	Для Сч=0 По МассивНайденныхСтрок.ВГраница() Цикл
		ТаблицаСписанийПартий.Удалить(МассивНайденныхСтрок[Сч]);
	КонецЦикла;
	
	ТаблицаСписанийПартий.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));	
	Для Каждого СтрокаСписания Из ТаблицаСписанийПартий Цикл
		Если БалансВедетсяПоПодразделениям Тогда
			СтрокаСписания.Подразделение = СтрокаСписания.СкладКомпании.ПодразделениеКомпании;
		Иначе
			СтрокаСписания.Подразделение = ШапкаДокумента.ПодразделениеКомпании;
		КонецЕсли;
	КонецЦикла;	
	ТаблицаСписанийПартий.Свернуть("Подразделение", "СуммаУпр");
	
	Для Каждого СтрокаСписания Из ТаблицаСписанийПартий Цикл
		НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДоходыИРасходы.Подразделение          = СтрокаСписания.Подразделение;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.Себестоимость;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
		НаборЗаписейДоходыИРасходы.Расход                 = СтрокаСписания.СуммаУпр;	
		НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
		Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
	КонецЦикла;
	
	// Подготовим таблицу движений в разрезе подразделений комиссионных товаров.
	ТаблицаСписанийПартийРеализованных = Движения.РеализованныеТовары.Выгрузить();
	ТаблицаСписанийПартийРеализованных.Свернуть("ДоговорВзаиморасчетов","СуммаУпр");
	
	ТаблицаСписанийПартийРеализованных.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияКомпании"));
	Для Каждого СтрокаСписания Из ТаблицаСписанийПартийРеализованных Цикл
		Если БалансВедетсяПоПодразделениям Тогда
			СтрокаСписания.Подразделение = СтрокаСписания.ДоговорВзаиморасчетов.ПодразделениеКомпании;
		Иначе
			СтрокаСписания.Подразделение = ШапкаДокумента.ПодразделениеКомпании;
		КонецЕсли;
	КонецЦикла;	
	ТаблицаСписанийПартийРеализованных.Свернуть("Подразделение", "СуммаУпр");
	
	Для Каждого СтрокаСписания Из ТаблицаСписанийПартийРеализованных Цикл
		НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект         = ЭтотОбъект;
		НаборЗаписейДоходыИРасходы.Подразделение          = СтрокаСписания.Подразделение;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.Себестоимость;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Истина;
		НаборЗаписейДоходыИРасходы.Доход                  = СтрокаСписания.СуммаУпр;	
		НаборЗаписейДоходыИРасходы.ШапкаДокумента         = ШапкаДокумента;
		Отказ = НЕ НаборЗаписейДоходыИРасходы.Расход() ИЛИ Отказ;
	КонецЦикла;
	
	Возврат НЕ Отказ;
КонецФункции // ПровестиПоПартиям()

#КонецОбласти

#Область ОбработчикиСобытий

// Обработчик события объекта возникает в момент, когда выполняется установка нового номера.
//
// Параметры:
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения системной обработки события.
//  Префикс              - Строка - Префикс, который будет использоваться для генерации номера.
//
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// Вызываем общий обработчик события
	ПрефиксацияОбъектов.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для заполнения объекта.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения = "", СтандартнаяОбработка=Истина)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ХозОперация) Тогда
		ХозОперация = Справочники.ХозОперации.АктОРеализации;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		
		Организация           = КассаККМ.Организация;
		ПодразделениеКомпании = КассаККМ.ПодразделениеКомпании;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события заполнения объекта копированием.
//
// Параметры:
//  ОбъектКопирования - ДокументОбъект - Исходный объект, который является источником копирования.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи или при проведении.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверкаКодовМаркировкиПередЗаписью();
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	МаркировкаТоваровСервер.ПроверитьЗаполнениеКодовМаркировки(ЭтотОбъект, Отказ, , , Истина);
	МаркировкаТоваровСервер.ПроверитьЗаполнениеКодовМаркировки(ЭтотОбъект, Отказ, "Возвраты", , Истина);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимЗаписи     - РежимЗаписиДокумента     - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ ОбработкаСобытийДокументаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Тогда 
		Возврат; 
	КонецЕсли; 
	
	Если НЕ ОбменДанными.Загрузка Тогда
		
		Если НЕ ЗначениеЗаполнено(ДатаПоследнегоДокумента) Тогда
			ДатаПоследнегоДокумента = Дата;
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ХозОперация = Справочники.ХозОперации.АктОРеализации Тогда
		Для Каждого ТекСтрока Из Товары Цикл
			ТекСтрока.МестоРазмещения = СкладКомпании;
		КонецЦикла;
		Для Каждого ТекущаяСтрока Из Возвраты Цикл
			ТекущаяСтрока.МестоРазмещения = СкладКомпании;
		КонецЦикла;
	КонецЕсли;
	
	РаботаСГраницами.МоментВремениПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоВзаиморасчетамПередПроведением(Ссылка, ДополнительныеСвойства);
	РаботаСГраницами.ДвиженияПоПартиямПередПроведением(Ссылка, ДополнительныеСвойства);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события возникающего в транзакции удаления перед непосредственным удалением объекта из базы данных.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередУдалением(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ПередУдалением(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередУдалением()

// Обработчик события возникающего при отмене проведения документа. Выполняется в транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Удалим введенные в оборот коды маркировки
	НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
	НаборЗаписейСостоянияКодовМаркировки.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейСостоянияКодовМаркировки.ОтменаПроведения();
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Обработчик события возникающего в транзакции записи для формирования движений документу по подчиненным регистрам.
//
// Параметры:
//  Отказ           - Булево                   - Признак отказа от совершения операции.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийДокументаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	// Получим способ ведения баланса.
	БалансВедетсяПоПодразделениям = БалансВедетсяПоПодразделениям(Дата);
	
	Если Возвраты.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗакрытиеСменыВозвраты.Номенклатура,
		|	ЗакрытиеСменыВозвраты.ХарактеристикаНоменклатуры,
		|	ВЫБОР
		|		КОГДА ЗакрытиеСменыВозвраты.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.АктОРеализации)
		|			ТОГДА &СкладКомпании
		|		ИНАЧЕ ЗакрытиеСменыВозвраты.МестоРазмещения
		|	КОНЕЦ КАК СкладКомпании,
		|	МАКСИМУМ(ЗакрытиеСменыВозвраты.Цена) КАК ЦенаРозничная,
		|	МАКСИМУМ(ЗакрытиеСменыВозвраты.СуммаВсего) КАК СуммаРозничная,
		|	МАКСИМУМ(ЗакрытиеСменыВозвраты.СуммаСкидки) КАК СуммаСкидки,
		|	СУММА(ЗакрытиеСменыВозвраты.Количество * ЗакрытиеСменыВозвраты.Коэффициент) КАК Количество
		|ИЗ
		|	Документ.ЗакрытиеСмены.Возвраты КАК ЗакрытиеСменыВозвраты
		|ГДЕ
		|	ЗакрытиеСменыВозвраты.Ссылка = &Ссылка
		|	И ЗакрытиеСменыВозвраты.Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗакрытиеСменыВозвраты.Номенклатура,
		|	ЗакрытиеСменыВозвраты.ХарактеристикаНоменклатуры,
		|	ВЫБОР
		|		КОГДА ЗакрытиеСменыВозвраты.Ссылка.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.АктОРеализации)
		|			ТОГДА &СкладКомпании
		|		ИНАЧЕ ЗакрытиеСменыВозвраты.МестоРазмещения
		|	КОНЕЦ";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("СкладКомпании", СкладКомпании);
		
		НаборЗаписейОстатки=Движения.ОстаткиТоваровКомпании;
		НаборЗаписейОстатки.РежимПроведения=РежимПроведения;
		НаборЗаписейОстатки.ДокументОбъект=ЭтотОбъект;
		НаборЗаписейОстатки.РезультатЗапросаПоТоварам=Запрос.Выполнить().Выгрузить();
		// если АктОРеализации тогда склад берем из шапки документа
		НаборЗаписейОстатки.СкладКомпании = ?(ХозОперация = Справочники.ХозОперации.АктОРеализации,СкладКомпании,Неопределено);
		НаборЗаписейОстатки.Приходовать=Истина;
		НаборЗаписейОстатки.ПоБазовомуКоличеству=Ложь;
		НаборЗаписейОстатки.Резервировать=Ложь;
		НаборЗаписейОстатки.ДвиженияПоРознице=Истина;
		НаборЗаписейОстатки.РазрешитьПереоценку = Ложь;
		НаборЗаписейОстатки.ЕстьРозничнаяСумма = Истина;
		НаборЗаписейОстатки.ИмяРеквизитаЦенаРозничная="Цена";
		НаборЗаписейОстатки.ИмяРеквизитаСуммаРозничная="СуммаВсего";
		Отказ=НЕ НаборЗаписейОстатки.Приход() ИЛИ Отказ;
		Если НЕ Отказ Тогда
			НаборЗаписейОстатки.Записать();
		КонецЕсли;
	КонецЕсли;
	
	// проведем остатки товаров
	НаборЗаписейОстатки=Движения.ОстаткиТоваровКомпании;
	НаборЗаписейОстатки.РежимПроведения=РежимПроведения;
	НаборЗаписейОстатки.ДокументОбъект=ЭтотОбъект;
	НаборЗаписейОстатки.РезультатЗапросаПоТоварам=Неопределено;
	// Если АктОРеализации тогда склад берем из шапки документа.
	НаборЗаписейОстатки.СкладКомпании = ?(ХозОперация = Справочники.ХозОперации.АктОРеализации,СкладКомпании,Неопределено);
	НаборЗаписейОстатки.Приходовать=Истина;
	НаборЗаписейОстатки.ПоБазовомуКоличеству=Ложь;
	НаборЗаписейОстатки.Резервировать=Ложь;
	НаборЗаписейОстатки.ДвиженияПоРознице=Истина;
	НаборЗаписейОстатки.ИмяРеквизитаЦенаРозничная="Цена";
	НаборЗаписейОстатки.ИмяРеквизитаСуммаРозничная="СуммаВсего";
	НаборЗаписейОстатки.ГраницаРасчетаОстатков = Новый Граница(МоментВремени(), ВидГраницы.Включая);
	Отказ=НЕ НаборЗаписейОстатки.Расход() ИЛИ Отказ;
	
	// проведем партии товаров
	Отказ=НЕ ПровестиПоПартиям(РежимПроведения,Ссылка) ИЛИ Отказ;
	
	// ANDV Проведем деньги по кассе ККМ
	НаборЗаписейКассыККМ=Движения.КассыККМ;
	СуммаОплатыПоКассе =0;
	Для каждого СтрокаОплаты Из Оплаты Цикл
		
		Если СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
			
			Если (СтрокаОплаты.Сумма-СтрокаОплаты.СуммаВозврат)<>0 Тогда
				НаборЗаписейКассыККМ.ДокументОбъект 	= ЭтотОбъект;
				НаборЗаписейКассыККМ.РежимПроведения 	= РежимПроведения;
				НаборЗаписейКассыККМ.КассаККМ 			= СтрокаОплаты.Касса;
				НаборЗаписейКассыККМ.ТипОплаты 			= СтрокаОплаты.ТипОплаты;
				НаборЗаписейКассыККМ.Сумма 				= (СтрокаОплаты.Сумма-СтрокаОплаты.СуммаВозврат);
				Отказ = НЕ НаборЗаписейКассыККМ.Приход() ИЛИ Отказ;
			КонецЕсли;
		Иначе
			Если СтрокаОплаты.Сумма<>0 Тогда
				НаборЗаписейКассыККМ.ДокументОбъект 	= ЭтотОбъект;
				НаборЗаписейКассыККМ.РежимПроведения 	= РежимПроведения;
				НаборЗаписейКассыККМ.КассаККМ 			= СтрокаОплаты.Касса;
				НаборЗаписейКассыККМ.ТипОплаты	 		= СтрокаОплаты.ТипОплаты;
				НаборЗаписейКассыККМ.Сумма 				= СтрокаОплаты.Сумма;
				Отказ = НЕ НаборЗаписейКассыККМ.Приход() ИЛИ Отказ;
			КонецЕсли;
			Если СтрокаОплаты.СуммаВозврат <> 0 Тогда
				НаборЗаписейКассыККМ.ДокументОбъект = ЭтотОбъект;
				НаборЗаписейКассыККМ.РежимПроведения= РежимПроведения;
				НаборЗаписейКассыККМ.КассаККМ 		= СтрокаОплаты.Касса;
				НаборЗаписейКассыККМ.ТипОплаты	 	= СтрокаОплаты.ТипОплаты;
				НаборЗаписейКассыККМ.Сумма			= -СтрокаОплаты.СуммаВозврат;
				Отказ = НЕ НаборЗаписейКассыККМ.Приход() ИЛИ Отказ;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные ИЛИ СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
			СуммаОплатыПоКассе = СуммаОплатыПоКассе+СтрокаОплаты.Сумма-СтрокаОплаты.СуммаВозврат;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаОплаты из ВозвратОплаты Цикл
		
		Если СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
			
			Если СтрокаОплаты.Сумма<>0 Тогда
				НаборЗаписейКассыККМ.ДокументОбъект 	= ЭтотОбъект;
				НаборЗаписейКассыККМ.РежимПроведения 	= РежимПроведения;
				НаборЗаписейКассыККМ.КассаККМ 			= СтрокаОплаты.Касса;
				НаборЗаписейКассыККМ.ТипОплаты 			= СтрокаОплаты.ТипОплаты;
				НаборЗаписейКассыККМ.Сумма 				= -СтрокаОплаты.Сумма;
				Отказ = НЕ НаборЗаписейКассыККМ.Приход() ИЛИ Отказ;
			КонецЕсли;
		Иначе
			Если СтрокаОплаты.Сумма <> 0 Тогда
				НаборЗаписейКассыККМ.ДокументОбъект = ЭтотОбъект;
				НаборЗаписейКассыККМ.РежимПроведения= РежимПроведения;
				НаборЗаписейКассыККМ.КассаККМ 		= СтрокаОплаты.Касса;
				НаборЗаписейКассыККМ.ТипОплаты	 	= СтрокаОплаты.ТипОплаты;
				НаборЗаписейКассыККМ.Сумма			= -СтрокаОплаты.Сумма;
				Отказ = НЕ НаборЗаписейКассыККМ.Приход() ИЛИ Отказ;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные
			ИЛИ СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
			 СуммаОплатыПоКассе = СуммаОплатыПоКассе-СтрокаОплаты.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	// подготовим таблицу движений в разрезе подразделений по взаиморасчетам
	ТаблицаВзаиморасчетов = Новый ТаблицаЗначений();
	ТаблицаВзаиморасчетов.Колонки.Добавить("Сумма");
	ОписаниеТипов=Новый ОписаниеТипов;
	ОписаниеТипов.Типы().Добавить(Тип("СправочникСсылка.ПодразделенияКомпании"));
	ТаблицаВзаиморасчетов.Колонки.Добавить("Подразделение",ОписаниеТипов);
		
	// Проведем сумму выручки по доходам и расходам
	
	ТаблицаВзаиморасчетов.Свернуть("Подразделение","Сумма");
	Для Каждого СтрокаСписания Из ТаблицаВзаиморасчетов Цикл
		НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект = ЭтотОбъект;
		Если БалансВедетсяПоПодразделениям Тогда
			НаборЗаписейДоходыИРасходы.Подразделение = СтрокаСписания.Подразделение;
		КонецЕсли;
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.НачислениеДебиторскойЗадолженностиПоТовару;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Ложь;
		НаборЗаписейДоходыИРасходы.Доход                  = СтрокаСписания.Сумма;	
		Отказ = НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
	КонецЦикла;
	
	Если СуммаОплатыПоКассе<>0 Тогда
		НаборЗаписейДоходыИРасходы = Движения.ДоходыИРасходы;
		НаборЗаписейДоходыИРасходы.ДокументОбъект = ЭтотОбъект;
		Если БалансВедетсяПоПодразделениям Тогда
			НаборЗаписейДоходыИРасходы.Подразделение = КассаККМ.ПодразделениеКомпании;
		КонецЕсли;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте             = (ВалютаДокумента=Константы.ВалютаУправленческогоУчетаКомпании.Получить());
		НаборЗаписейДоходыИРасходы.СтатьяДоходовИРасходов = Справочники.СтатьиДоходовИРасходов.Выручка;
		НаборЗаписейДоходыИРасходы.ВУпрВалюте             = Ложь;
		НаборЗаписейДоходыИРасходы.Доход                  = СуммаОплатыПоКассе;
		Отказ=НЕ НаборЗаписейДоходыИРасходы.Приход() ИЛИ Отказ;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ОбработкаПроведенияНакопленияПоКарточкамКонтрагентов();
	КонецЕсли;
	
	// Изменение состояния кодов
	НаборЗаписейСостоянияКодовМаркировки = РегистрыСведений.СостоянияКодовМаркировки.СоздатьНаборЗаписей();
	НаборЗаписейСостоянияКодовМаркировки.Отбор.ДокументОснование.Значение = Ссылка;
	НаборЗаписейСостоянияКодовМаркировки.Отбор.ДокументОснование.Использование = Истина;
	ТаблицаЗаписей = НаборЗаписейСостоянияКодовМаркировки.Выгрузить();
	ТаблицаЗаписей.Очистить();
	
	// Сворачиваем товары по кодам маркировки
	ТаблицаКодовМаркировки = Новый ТаблицаЗначений();
	ТаблицаКодовМаркировки.Колонки.Добавить("Номенклатура");
	ТаблицаКодовМаркировки.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаКодовМаркировки.Колонки.Добавить("КодМаркировки");
	ТаблицаКодовМаркировки.Колонки.Добавить("КоличествоПродаж");
	ТаблицаКодовМаркировки.Колонки.Добавить("КоличествоВозврат");
	
	Для Каждого ТекущаяСтрока Из Товары Цикл
		
		// Найдем коды
		ПараметрыОтбора = Новый Структура("ИдентификаторТовара", ТекущаяСтрока.ИдентификаторТовара);
		НайденныеСтроки = КодыМаркировки.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяСтрока = ТаблицаКодовМаркировки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			НоваяСтрока.КодМаркировки = НайденнаяСтрока.КодМаркировки;
			НоваяСтрока.КоличествоПродаж = 1;
			НоваяСтрока.КоличествоВозврат = 0;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из Возвраты Цикл
		
		// Найдем коды
		ПараметрыОтбора = Новый Структура("ИдентификаторТовара", ТекущаяСтрока.ИдентификаторТовара);
		НайденныеСтроки = КодыМаркировки.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяСтрока = ТаблицаКодовМаркировки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			НоваяСтрока.КодМаркировки = НайденнаяСтрока.КодМаркировки;
			НоваяСтрока.КоличествоПродаж = 0;
			НоваяСтрока.КоличествоВозврат = 1;
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаКодовМаркировки.Свернуть(
		"Номенклатура,ХарактеристикаНоменклатуры,КодМаркировки",
		"КоличествоПродаж,КоличествоВозврат"
	);
	
	Для Каждого ТекущаяСтрока Из ТаблицаКодовМаркировки Цикл
		
		СтруктураМаркировки =
			МенеджерОборудованияМаркировка.РазобратьШтриховойКодТовара(ТекущаяСтрока.КодМаркировки);
		
		// Это не маркировка товара
		Если СтруктураМаркировки.ТипИдентификатораТовара 
			<> ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1") Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаЗаписей.Добавить();
		НоваяСтрока.Период = Дата;
		НоваяСтрока.ДокументОснование = Ссылка;
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.Номенклатура = ТекущаяСтрока.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = ТекущаяСтрока.ХарактеристикаНоменклатуры;
		НоваяСтрока.GTIN = СтруктураМаркировки.GTIN;
		НоваяСтрока.СерийныйНомер = СтруктураМаркировки.СерийныйНомер;
		НоваяСтрока.Состояние = ?(ТекущаяСтрока.КоличествоПродаж > ТекущаяСтрока.КоличествоВозврат,
			Перечисления.СостоянияКодовМаркировки.ВыведенИзОборотаРозничнаяПродажа,
			Перечисления.СостоянияКодовМаркировки.ВведенВОборотПриВозврате);
		НоваяСтрока.КодМаркировки = ТекущаяСтрока.КодМаркировки;
	КонецЦикла;
	
	НаборЗаписейСостоянияКодовМаркировки.Загрузить(ТаблицаЗаписей);
	
	Попытка
		НаборЗаписейСостоянияКодовМаркировки.Записать();
	Исключение
		Отказ = Истина;
	КонецПопытки; 
	
	// Возможно расхождение баланса на "копейки" из-за округления. Возникшую разницу
	// необходимо списать на доходы и расходы.
	Отказ = НЕ ОбработкаСобытийДокументаСервер.СписаниеКопейкиПриОкругленииВалютныхСчетов(ЭтотОбъект) ИЛИ Отказ;
	
	// бонусы
	НаборБонусныеПрограммы = Движения.БонусныеБаллы;
	Для Каждого Бонус Из Бонусы Цикл
		// бонусные баллы
		Если Бонус.КоличествоНачисленныхБонусов > 0 Тогда
			НаборБонусныеПрограммы.Карта             = Бонус.БонуснаяКарта;
			НаборБонусныеПрограммы.БонуснаяПрограмма = Бонус.БонуснаяПрограмма;
			НаборБонусныеПрограммы.ХозОперация       = ХозОперация;
			НаборБонусныеПрограммы.КоличествоБаллов  = Бонус.КоличествоНачисленныхБонусов;
			НаборБонусныеПрограммы.Регистратор       = Ссылка;
			НаборБонусныеПрограммы.ДокДата           = Дата;
			
			Отказ = НЕ НаборБонусныеПрограммы.Приход() ИЛИ Отказ;
			
			Если НЕ Отказ тогда
				НаборБонусныеПрограммы.Записать();
			КонецЕсли;
		КонецЕсли;
		
		Если Бонус.КоличествоСписанныхБонусов > 0 Тогда
			НаборБонусныеПрограммы.Карта             = Бонус.БонуснаяКарта;
			НаборБонусныеПрограммы.БонуснаяПрограмма = Бонус.БонуснаяПрограмма;
			НаборБонусныеПрограммы.ХозОперация       = ХозОперация;
			НаборБонусныеПрограммы.КоличествоБаллов  = Бонус.КоличествоСписанныхБонусов;
			НаборБонусныеПрограммы.Регистратор       = Ссылка;
			НаборБонусныеПрограммы.ДокДата           = Дата;
			НаборБонусныеПрограммы.ПериодДвижения    = Новый Граница(МоментВремени(), ВидГраницы.Включая);
			
			Отказ = НЕ НаборБонусныеПрограммы.Расход() ИЛИ Отказ;
		КонецЕсли;
	КонецЦикла;
	
	// двигаем границу последовательности взаиморасчетов
	РаботаСГраницами.СдвинутьГраницуВзаиморасчетов(Ссылка, ДополнительныеСвойства, Движения);
	
	// Проверим налиие прослеживаемых товаров, которые были возвращены из розницы
	Если НЕ Отказ Тогда
		Движения.ГТДПартийТоваровКомпании.Записать();
		Движения.ПартииТоваровКомпании.Записать();
	КонецЕсли;
	ТаблицаПрослеживаемыхТоваров = Документы.ЗакрытиеСмены.ОперацииСПрослеживаемымиТоварами(ЭтотОбъект);
	НаборЗаписейОперацииПрослеживаемости = Движения.ОперацииПрослеживаемыхТоваров;
	НаборЗаписейОперацииПрослеживаемости.ДокументОбъект = ЭтотОбъект;
	НаборЗаписейОперацииПрослеживаемости.ТаблицаПрослеживаемыхТоваров = ТаблицаПрослеживаемыхТоваров;
	Если НЕ НаборЗаписейОперацииПрослеживаемости.ДобавитьОперациюПрослеживаемости() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция получения результата запроса для формирования проданной номенклатуры в закрытой смене.
//
Функция ЗапросПоПроданнымТоварам(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗакрытиеСменыТовары.Номенклатура КАК Номенклатура,
	               |	ЗакрытиеСменыТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ЗакрытиеСменыТовары.Номенклатура.ВидНоменклатуры КАК НоменклатураВидНоменклатуры,
	               |	ЗакрытиеСменыТовары.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	               |	ЗакрытиеСменыТовары.МестоРазмещения КАК МестоРазмещения,
	               |	СУММА(ЗакрытиеСменыТовары.Количество * ЗакрытиеСменыТовары.Коэффициент) КАК Количество,
	               |	СУММА(ЗакрытиеСменыТовары.СуммаВсего) КАК СуммаВсего,
	               |	СУММА(ЗакрытиеСменыТовары.СуммаНДС) КАК СуммаНДС,
	               |	СУММА(ЗакрытиеСменыТовары.СуммаСкидки) КАК СуммаСкидки
	               |ПОМЕСТИТЬ ТаблицаТоваров
	               |ИЗ
	               |	Документ.ЗакрытиеСмены.Товары КАК ЗакрытиеСменыТовары
	               |ГДЕ
	               |	ЗакрытиеСменыТовары.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗакрытиеСменыТовары.Номенклатура,
	               |	ЗакрытиеСменыТовары.ХарактеристикаНоменклатуры,
	               |	ЗакрытиеСменыТовары.Номенклатура.ВидНоменклатуры,
	               |	ЗакрытиеСменыТовары.МестоРазмещения,
	               |	ЗакрытиеСменыТовары.Номенклатура.СтавкаНДС
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗакрытиеСменыВозвраты.Номенклатура КАК Номенклатура,
	               |	ЗакрытиеСменыВозвраты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ЗакрытиеСменыВозвраты.МестоРазмещения КАК МестоРазмещения,
	               |	СУММА(ЗакрытиеСменыВозвраты.СуммаВсего) КАК СуммаВсего,
	               |	СУММА(ЗакрытиеСменыВозвраты.СуммаСкидки) КАК СуммаСкидки,
	               |	СУММА(ЗакрытиеСменыВозвраты.СуммаНДС) КАК СуммаНДС,
	               |	СУММА(ЗакрытиеСменыВозвраты.Количество * ЗакрытиеСменыВозвраты.Коэффициент) КАК Количество
	               |ПОМЕСТИТЬ Возвраты
	               |ИЗ
	               |	Документ.ЗакрытиеСмены.Возвраты КАК ЗакрытиеСменыВозвраты
	               |ГДЕ
	               |	ЗакрытиеСменыВозвраты.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗакрытиеСменыВозвраты.Номенклатура,
	               |	ЗакрытиеСменыВозвраты.ХарактеристикаНоменклатуры,
	               |	ЗакрытиеСменыВозвраты.МестоРазмещения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	               |	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ТаблицаТоваров.НоменклатураВидНоменклатуры КАК ВидНоменклатуры,
	               |	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	               |	ТаблицаТоваров.МестоРазмещения КАК СкладКомпании,
	               |	ТаблицаТоваров.Количество - ЕСТЬNULL(Возвраты.Количество, 0) КАК Количество,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(Возвраты.СуммаВсего, 0) > ТаблицаТоваров.СуммаВсего
	               |			ТОГДА 0
	               |		ИНАЧЕ ТаблицаТоваров.СуммаВсего - ЕСТЬNULL(Возвраты.СуммаВсего, 0)
	               |	КОНЕЦ КАК Сумма,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(Возвраты.СуммаНДС, 0) > ТаблицаТоваров.СуммаНДС
	               |			ТОГДА 0
	               |		ИНАЧЕ ТаблицаТоваров.СуммаНДС - ЕСТЬNULL(Возвраты.СуммаНДС, 0)
	               |	КОНЕЦ КАК СуммаНДС,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(Возвраты.СуммаСкидки, 0) > ТаблицаТоваров.СуммаСкидки
	               |			ТОГДА 0
	               |		ИНАЧЕ ТаблицаТоваров.СуммаСкидки - ЕСТЬNULL(Возвраты.СуммаСкидки, 0)
	               |	КОНЕЦ КАК СуммаСкидки
	               |ИЗ
	               |	ТаблицаТоваров КАК ТаблицаТоваров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Возвраты КАК Возвраты
	               |		ПО ТаблицаТоваров.Номенклатура = Возвраты.Номенклатура
	               |			И ТаблицаТоваров.ХарактеристикаНоменклатуры = Возвраты.ХарактеристикаНоменклатуры
	               |			И ТаблицаТоваров.МестоРазмещения = Возвраты.МестоРазмещения
	               |ГДЕ
	               |	ТаблицаТоваров.Количество - ЕСТЬNULL(Возвраты.Количество, 0) > 0";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ЗапросПоПроданнымТоварам()

Процедура ОбработкаПроведенияНакопленияПоКарточкамКонтрагентов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗакрытиеСменыКонтрагенты.Контрагент,
	|	ЗакрытиеСменыКонтрагенты.Карточка,
	|	ЗакрытиеСменыКонтрагенты.Ссылка.Дата КАК ПериодНакопления,
	|	СУММА(ЗакрытиеСменыКонтрагенты.СуммаВсего) КАК Сумма,
	|	СУММА(ЗакрытиеСменыКонтрагенты.КоличествоЧеков) КАК КоличествоЧеков,
	|	СУММА(ЗакрытиеСменыКонтрагенты.КоличествоНоменклатуры) КАК КоличествоНоменклатуры
	|ИЗ
	|	Документ.ЗакрытиеСмены.Контрагенты КАК ЗакрытиеСменыКонтрагенты
	|ГДЕ
	|	ЗакрытиеСменыКонтрагенты.Ссылка = &Ссылка
	|	И ЗакрытиеСменыКонтрагенты.Карточка <> ЗНАЧЕНИЕ(Справочник.Карточки.ПустаяСсылка)
	|	И ЗакрытиеСменыКонтрагенты.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗакрытиеСменыКонтрагенты.Ссылка.Дата,
	|	ЗакрытиеСменыКонтрагенты.Контрагент,
	|	ЗакрытиеСменыКонтрагенты.Карточка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	НаборНакоплениеСумм = Движения.НакопленияПоКарточкамКонтрагентов;
	НаборНакоплениеСумм.ДокументСсылка   = Ссылка;
	НаборНакоплениеСумм.РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	НаборНакоплениеСумм.ВыполнитьДвижения();
	
КонецПроцедуры

Процедура ПроверкаКодовМаркировкиПередЗаписью()
	
	МассивУдаления = Новый Массив;
	СтруктураПоиска = Новый Структура("ИдентификаторТовара");
	Для Каждого ТекущаяСтрока Из КодыМаркировки Цикл
		СтруктураПоиска.ИдентификаторТовара = ТекущаяСтрока.ИдентификаторТовара;
		НайденныеСтрокиТовары = Товары.НайтиСтроки(СтруктураПоиска);
		НайденныеСтрокиВозвраты = Возвраты.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтрокиТовары.Количество() = 0 И НайденныеСтрокиВозвраты.Количество() = 0 Тогда
			МассивУдаления.Добавить(ТекущаяСтрока);
		КонецЕсли;
		
		// Приведем коды маркировки к формату хранения без хвостов
		ТекущаяСтрока.КодМаркировки = 
			МаркировкаТоваровКлиентСервер.ПолучитьКодМаркировки(
				ТекущаяСтрока.КодМаркировки,,
				СтрНачинаетсяС(ТекущаяСтрока.КодМаркировки, "("));
		
	КонецЦикла;
	
	// Непосредственно удаление.
	Для Каждого СтрокаУдаления Из МассивУдаления Цикл
		КодыМаркировки.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

ДополнительныеСвойства.Вставить("ЧекиВыборка", Неопределено);

#КонецОбласти

#КонецЕсли
