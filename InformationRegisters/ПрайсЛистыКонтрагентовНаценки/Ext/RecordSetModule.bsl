// Модуль набора записей регистра "Прайс-листы контрагентов наценки"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ДокументОбъект              Экспорт;  // документ объект для записи
Перем ТипЦен                      Экспорт;  // тип устанавливаемых цен
Перем ПодразделениеКомпании       Экспорт;  // Подразделение компании.
Перем РезультатЗапросаПоНаценкам  Экспорт;	// РезультатЗапроса или ТаблицаЗначений. Устанавливается если документ имеет "необычную" ТЧ
Перем ДатаНачалаДействия          Экспорт;  // дата начала действия

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ОбработкаСобытийРегистраСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры 

// получаем таблицу прайс-листов и наценок на них
Функция ПолучитьТаблицуНаценок()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНаценок.ПрайсЛист,
	|	ТаблицаНаценок.ТегПозиции,
	|	ТаблицаНаценок.Производитель,
	|	ТаблицаНаценок.АлгоритмРасчетаЦены,
	|	ТаблицаНаценок.Наценка,
	|	ТаблицаНаценок.ОкруглятьДо
	|ПОМЕСТИТЬ втНаценкиДокумента
	|ИЗ
	|	&ТаблицаНаценок КАК ТаблицаНаценок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(НаценкиДокумента.ПрайсЛист, Наценки.ПрайсЛист) КАК ПрайсЛист,
	|	ЕСТЬNULL(НаценкиДокумента.ТегПозиции, Наценки.ТегПозиции) КАК ТегПозиции,
	|	ЕСТЬNULL(НаценкиДокумента.Производитель, Наценки.Производитель) КАК Производитель,
	|	НаценкиДокумента.АлгоритмРасчетаЦены КАК АлгоритмРасчетаЦены,
	|	НаценкиДокумента.Наценка КАК Наценка,
	|	НаценкиДокумента.ОкруглятьДо КАК ОкруглятьДо,
	|	Наценки.АлгоритмРасчетаЦены КАК АлгоритмРасчетаЦеныВБазе,
	|	Наценки.Наценка КАК НаценкаВБазе,
	|	Наценки.ОкруглятьДо КАК ОкруглятьДоВБазе
	|ИЗ
	|	втНаценкиДокумента КАК НаценкиДокумента
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Рег.ПрайсЛист КАК ПрайсЛист,
	|			Рег.ТипЦен КАК ТипЦен,
	|			Рег.ПодразделениеКомпании КАК ПодразделениеКомпании,
	|			Рег.ТегПозиции КАК ТегПозиции,
	|			Рег.Производитель КАК Производитель,
	|			Рег.АлгоритмРасчетаЦены КАК АлгоритмРасчетаЦены,
	|			Рег.Наценка КАК Наценка,
	|			Рег.ОкруглятьДо КАК ОкруглятьДо
	|		ИЗ
	|			РегистрСведений.ПрайсЛистыКонтрагентовНаценки.СрезПоследних(
	|					&ДатаКон,
	|					ПрайсЛист В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								НаценкиДокумента.ПрайсЛист
	|							ИЗ
	|								втНаценкиДокумента КАК НаценкиДокумента)
	|						И ТипЦен = &ТипЦен
	|						И ПодразделениеКомпании = &ПодразделениеКомпании) КАК Рег
	|		ГДЕ
	|			НЕ Рег.Отменена) КАК Наценки
	|		ПО НаценкиДокумента.ПрайсЛист = Наценки.ПрайсЛист
	|			И НаценкиДокумента.ТегПозиции = Наценки.ТегПозиции
	|			И НаценкиДокумента.Производитель = Наценки.Производитель";
	
	Запрос.УстановитьПараметр("ТаблицаНаценок", РезультатЗапросаПоНаценкам);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.УстановитьПараметр("ПодразделениеКомпании", ПодразделениеКомпании);
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(Новый МоментВремени(ДатаНачалаДействия, ДокументОбъект.Ссылка), ВидГраницы.Исключая));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция производит установку наценок.
Функция УстановитьНаценки() Экспорт
	
	// заполним незаполненные переменные.
	ДатаПереоценки = ?(ТипЗнч(ДатаНачалаДействия) = Тип("Дата"), ДатаНачалаДействия, ДокументОбъект.Дата);
	
	Если ПодразделениеКомпании = Неопределено И ЕстьРеквизит(ДокументОбъект, "ПодразделениеКомпании") Тогда
		ПодразделениеКомпании = ДокументОбъект.ПодразделениеКомпании;
	ИначеЕсли ПодразделениеКомпании = Неопределено Тогда
		ПодразделениеКомпании = ПараметрыСеанса.ПодразделениеКомпании;
	КонецЕсли;
	
	Если РезультатЗапросаПоНаценкам = Неопределено Тогда
		РезультатЗапросаПоНаценкам = ДокументОбъект.ПрайсЛисты.Выгрузить();
	Иначе
		Если ТипЗнч(РезультатЗапросаПоНаценкам) = Тип("РезультатЗапроса") Тогда
			РезультатЗапросаПоНаценкам = РезультатЗапросаПоНаценкам.Выгрузить();
		КонецЕсли;
	КонецЕсли;
	
	// Сформируем таблицу, содержащую как новые, так и старые наценки.
	РезультатЗапросаПоНаценкам = ПолучитьТаблицуНаценок();
	
	// ускоряющие переменные
	СтрТипЦен                = ТипЦен.Наименование;
	СтрПодразделениеКомпании = ПодразделениеКомпании.Наименование;
	СообщатьОбИзменении      = ПраваИНастройкиПользователя.Значение("СообщатьОбИзмененииЦен");
	
	// Устанавливаем наценки
	Результат = Истина;
	Для Каждого СтрокаПрайса Из РезультатЗапросаПоНаценкам Цикл
		Если СтрокаПрайса.Наценка = Null Тогда
			// Отменена
			НоваяЗапись = Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаПрайса);
			
			НоваяЗапись.АлгоритмРасчетаЦены   = СтрокаПрайса.АлгоритмРасчетаЦеныВБазе;
			НоваяЗапись.Наценка               = СтрокаПрайса.НаценкаВБазе;
			НоваяЗапись.ОкруглятьДо           = СтрокаПрайса.ОкруглятьДоВБазе;
			НоваяЗапись.Отменена              = Истина;
			НоваяЗапись.Период                = ДатаПереоценки;
			НоваяЗапись.Регистратор           = ДокументОбъект.Ссылка;
			НоваяЗапись.ТипЦен                = ТипЦен;
			НоваяЗапись.ПодразделениеКомпании = ПодразделениеКомпании;
			
			// сообщим, если надо
			Если СообщатьОбИзменении Тогда
				ТекстТега = "";
				Если НЕ ПустаяСтрока(СтрокаПрайса.ТегПозиции) Тогда
					ТекстТега = СтрШаблон(" Тег <%1>;", СтрокаПрайса.ТегПозиции);
				КонецЕсли;
				
				ТекстПроизводителя = "";
				Если ЗначениеЗаполнено(СтрокаПрайса.Производитель) Тогда
					ТекстПроизводителя = СтрШаблон(" Производитель <%1>;", СтрокаПрайса.Производитель);
				КонецЕсли;
				
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Прайс-лист <%1>;%2%3 Тип цен <%4>; Подразделение <%5>; Старая наценка: %6; Новая наценка: Отменена'"),
					СтрокаПрайса.ПрайсЛист,
					ТекстТега,
					ТекстПроизводителя,
					СтрТипЦен,
					СтрПодразделениеКомпании,
					Формат(СтрокаПрайса.НаценкаВБазе, "ЧЦ=15; ЧДЦ=2; ЧН=0,00")
				);
					
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДокументОбъект);
			КонецЕсли;
		ИначеЕсли СтрокаПрайса.АлгоритмРасчетаЦены <> СтрокаПрайса.АлгоритмРасчетаЦеныВБазе
			ИЛИ СтрокаПрайса.Наценка <> СтрокаПрайса.НаценкаВБазе
			ИЛИ СтрокаПрайса.ОкруглятьДо <> СтрокаПрайса.ОкруглятьДоВБазе Тогда
			
			// изменилась
			НоваяЗапись = Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаПрайса);
			
			НоваяЗапись.Период                = ДатаПереоценки;
			НоваяЗапись.Регистратор           = ДокументОбъект.Ссылка;
			НоваяЗапись.ТипЦен                = ТипЦен;
			НоваяЗапись.ПодразделениеКомпании = ПодразделениеКомпании;
			
			// сообщим, если надо
			Если СообщатьОбИзменении Тогда
				ТекстТега = "";
				Если НЕ ПустаяСтрока(СтрокаПрайса.ТегПозиции) Тогда
					ТекстТега = СтрШаблон(" Тег <%1>;", СтрокаПрайса.ТегПозиции);
				КонецЕсли;
				
				ТекстПроизводителя = "";
				Если ЗначениеЗаполнено(СтрокаПрайса.Производитель) Тогда
					ТекстПроизводителя = СтрШаблон("Производитель <%1>;", СтрокаПрайса.Производитель);
				КонецЕсли;
				
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Прайс-лист <%1>;%2%3 Тип цен <%4>; Подразделение <%5>; Старая наценка: %6; Новая наценка: %7'"),
					СтрокаПрайса.ПрайсЛист,
					ТекстТега,
					ТекстПроизводителя,
					СтрТипЦен,
					СтрПодразделениеКомпании,
					Формат(СтрокаПрайса.НаценкаВБазе, "ЧЦ=15; ЧДЦ=2; ЧН=0,00"),
					Формат(СтрокаПрайса.Наценка,"ЧЦ=15; ЧДЦ=2; ЧН=0,00")
				);
					
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДокументОбъект);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	// скинем некоторые переменные
	РезультатЗапросаПоНаценкам = Неопределено;
	ДатаНачалаДействия         = Неопределено;
	
	// убиваем циклическую ссылку
	ДокументОбъект = Неопределено;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Инициализация

ПодразделениеКомпании = Неопределено;

#КонецОбласти

#КонецЕсли