// Модуль менеджера регистра "Прайс-листы контрагентов автообновление"
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция - Записать настройки автообновления
//
// Параметры:
//  ПрайсЛист	 - СправочникСсылка.ПрайсЛистыКонтрагентов	 - Прайс лист
//  Настройки	 - Массив									 - Значение настроек.
// 
// Возвращаемое значение:
//  Булево - Булево.
//
Функция ЗаписатьНастройкиАвтообновления(ПрайсЛист, Настройки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Менеджер = РегистрыСведений.ПрайсЛистыКонтрагентовАвтообновление.СоздатьМенеджерЗаписи();
	Менеджер.ПрайсЛист = ПрайсЛист;
	Менеджер.Прочитать();
	
	Если НЕ Менеджер.Выбран() Тогда
		Менеджер.ПрайсЛист = ПрайсЛист;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Менеджер, Настройки);
	
	Попытка
		Менеджер.Записать(Истина);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Запись не удалась: %1.'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()))
		);
	КонецПопытки;
	
КонецФункции

// Функция - Прочитать настройки автообновления
//
// Параметры:
//  ПрайсЛист	 - СправочникСсылка.ПрайсЛистыКонтрагентов	 - Прайс лист.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - результат работы запроса.
//
Функция ПрочитатьНастройкиАвтообновления(ПрайсЛист) Экспорт
	Результат = Новый Структура("ХешФайла,ДатаФайла,Транспорт,РазмерФайла,ХешЗагруженного,ДатаЗагруженного,ПериодичностьПроверкиНовыхДанных,ИнтервалПроверкиНачало,ИнтервалПроверкиКонец,ДатаСледующейПроверки");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрайсЛистыКонтрагентовАвтообновление.ХешФайла,
	|	ПрайсЛистыКонтрагентовАвтообновление.ДатаФайла,
	|	ПрайсЛистыКонтрагентовАвтообновление.ПрайсЛист.Транспорт КАК Транспорт,
	|	ПрайсЛистыКонтрагентовАвтообновление.РазмерФайла,
	|	ПрайсЛистыКонтрагентовАвтообновление.ХешЗагруженного,
	|	ПрайсЛистыКонтрагентовАвтообновление.ДатаЗагруженного,
	|	ПрайсЛистыКонтрагентовАвтообновление.ПериодичностьПроверкиНовыхДанных,
	|	ПрайсЛистыКонтрагентовАвтообновление.ИнтервалПроверкиНачало,
	|	ПрайсЛистыКонтрагентовАвтообновление.ИнтервалПроверкиКонец,
	|	ПрайсЛистыКонтрагентовАвтообновление.ДатаСледующейПроверки
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовАвтообновление КАК ПрайсЛистыКонтрагентовАвтообновление
	|ГДЕ
	|	ПрайсЛистыКонтрагентовАвтообновление.ПрайсЛист = &ПрайсЛист";
	Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛист);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ЗаполнитьЗначенияСвойств(Результат, РезультатЗапроса.Выгрузить()[0]);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Процедура - Сдвинуть дату проверки файлов
//
// Параметры:
//  ПрайсЛист	 - СправочникСсылка.ПрайсЛистыКонтрагентов	 - Прайс лист
//  Часов		 - Число									 - Количество часов.
//
Процедура СдвинутьДатуПроверкиФайлов(ПрайсЛист, Часов) Экспорт
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПрайсЛистыКонтрагентовАвтообновление");
	ЭлементБлокировки.УстановитьЗначение("ПрайсЛист", ПрайсЛист);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НаборЗаписей = РегистрыСведений.ПрайсЛистыКонтрагентовАвтообновление.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПрайсЛист.Установить(ПрайсЛист);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		
		Блокировка.Заблокировать();
		
		НоваяДата = ТекущаяДатаСеанса() + Часов * 3600;
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.ДатаСледующейПроверки = НоваяДата;
		КонецЦикла;
		НачатьТранзакцию();
		Попытка
			НаборЗаписей.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
		
		
	КонецЕсли;
КонецПроцедуры

// Функция - Есть прайс листы с автозагрузкой
//
// Параметры:
//  ПрайсЛистыСАвтозагрузкой - ТаблицаЗначений	 - Прайс-листы с автозагрузкой.
// 
// Возвращаемое значение:
//  Булево - Признак наличия прайс-листа с автозагрузкой.
//
Функция ЕстьПрайсЛистыСАвтозагрузкой(ПрайсЛистыСАвтозагрузкой) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрайсЛистыКонтрагентовАвтообновление.ПрайсЛист,
	|	ПрайсЛистыКонтрагентовАвтообновление.ХешФайла,
	|	ПрайсЛистыКонтрагентовАвтообновление.ДатаФайла,
	|	ПрайсЛистыКонтрагентовАвтообновление.ПрайсЛист.Транспорт КАК Транспорт,
	|	ПрайсЛистыКонтрагентовАвтообновление.РазмерФайла
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовАвтообновление КАК ПрайсЛистыКонтрагентовАвтообновление
	|ГДЕ
	|	ПрайсЛистыКонтрагентовАвтообновление.ИспользоватьАвтозагрузку = ИСТИНА";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ПрайсЛистыСАвтозагрузкой = Неопределено;
		Возврат Ложь;
	Иначе
		ПрайсЛистыСАвтозагрузкой = Результат.Выгрузить();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Формитует список прайс-листов с необходимостью обновления.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ПрайсЛистыКонтрагентов
//
Функция ДайПрайсЛистыДляОбновления() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Автообновление.ПрайсЛист КАК ПрайсЛист
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовАвтообновление КАК Автообновление
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛистыКонтрагентовЖурналЗагрузки.СрезПоследних(, ) КАК ЖурналЗагрузки
	|		ПО (ЖурналЗагрузки.ПрайсЛист = Автообновление.ПрайсЛист)
	|ГДЕ
	|	Автообновление.ИспользоватьАвтообновление
	|	И Автообновление.ДатаСледующейПроверки <= &ТекущаяДата
	|	И (Автообновление.ПериодичностьПроверкиНовыхДанных <> 1
	|			ИЛИ Автообновление.ИнтервалПроверкиНачало <= &ТекущаяДатаЧас
	|				И Автообновление.ИнтервалПроверкиКонец > &ТекущаяДатаЧас)
	|	И (ЖурналЗагрузки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗагрузкиПрайсЛистов.Разрешена)
	|			ИЛИ ЖурналЗагрузки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗагрузкиПрайсЛистов.НовыйФайл)
	|			ИЛИ ЖурналЗагрузки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗагрузкиПрайсЛистов.НовыйФайлОшибка)
	|			ИЛИ ЖурналЗагрузки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗагрузкиПрайсЛистов.Ожидает)
	|			ИЛИ ЖурналЗагрузки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗагрузкиПрайсЛистов.Прервана)
	|			ИЛИ ЖурналЗагрузки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗагрузкиПрайсЛистов.Завершена)
	|			ИЛИ ЖурналЗагрузки.Статус ЕСТЬ NULL)";
	
	ДатаПроверки = ТекущаяДатаСеанса();
	Запрос.УстановитьПараметр("ТекущаяДата"    , ДатаПроверки);
	Запрос.УстановитьПараметр("ТекущаяДатаЧас" , Час(ДатаПроверки));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ПрайсЛист");
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Перезаполняет реквизит ПериодичностьПроверкиНовыхДанных - изменился формат хранения.
//
Процедура ПерезаполнитьПериодичностьПроверки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрайсЛистыКонтрагентовАвтообновление.ПрайсЛист КАК ПрайсЛист
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовАвтообновление КАК ПрайсЛистыКонтрагентовАвтообновление
	|ГДЕ
	|	ПрайсЛистыКонтрагентовАвтообновление.ИспользоватьАвтообновление
	|	И ПрайсЛистыКонтрагентовАвтообновление.ПериодичностьПроверкиНовыхДанных > 1";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.ПрайсЛистыКонтрагентовАвтообновление.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПрайсЛист = Выборка.ПрайсЛист;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			
			Если МенеджерЗаписи.ПериодичностьПроверкиНовыхДанных > 2 И МенеджерЗаписи.ПериодичностьПроверкиНовыхДанных < 9 Тогда
				// раз в неделю
				МенеджерЗаписи.ПериодичностьПроверкиНовыхДанных = 7;
			Иначе
				// раз в месяц
				МенеджерЗаписи.ПериодичностьПроверкиНовыхДанных = 30;
			КонецЕсли;
			
			МенеджерЗаписи.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПараметрыОбработкиРеквизитовОбъекта

Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	ОбязательныеРеквизиты = ОбработкаСобытийРегистраСервер.ПолучитьСтандартныеОбязательныеРеквизиты(Объект);
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции 

Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	УникальныеРеквизиты = Новый Структура();
	
	Возврат УникальныеРеквизиты;
	
КонецФункции 

#КонецОбласти

#КонецОбласти

#КонецЕсли