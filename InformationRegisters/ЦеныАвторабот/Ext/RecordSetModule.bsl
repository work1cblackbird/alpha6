// Модуль набора записей регистра "Цены авторабот"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ДокументОбъект Экспорт;        // Документ объект
Перем Контрагент Экспорт;            // Контрагент
Перем ДоговорВзаиморасчетов Экспорт; // Договор взаимо расчетов
Перем ТипЦен Экспорт;                // Тип цен работ
Перем ВидРемонта Экспорт;            // Вид ремонта
Перем Цех Экспорт;                   // Цех
Перем ДатаНачалаДействия Экспорт;    // Дата начала действий

Перем РезультатЗапросаПоАвтоработам Экспорт; // РезультатЗапроса или ТаблицаЗначений. Устанавливается если документ имеет "необычную" ТЧ

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ОбработкаСобытийРегистраСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры 

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
		
	// зарегистрируем изменения для обмена с моб устр.
	РегистраторСсылка = Этотобъект.Отбор.Регистратор.Значение;
	Если ЗначениеЗаполнено(РегистраторСсылка) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИзменениеЦенАвтоработАвтоработы.Авторабота КАК Авторабота
		|ПОМЕСТИТЬ ТабДокумента
		|ИЗ
		|	Документ.ИзменениеЦенАвторабот.Автоработы КАК ИзменениеЦенАвтоработАвтоработы
		|ГДЕ
		|	ИзменениеЦенАвтоработАвтоработы.Ссылка = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Автоработы.Ссылка КАК ДопПредложение
		|ПОМЕСТИТЬ ДопПредложения
		|ИЗ
		|	Справочник.Автоработы КАК Автоработы
		|ГДЕ
		|	Автоработы.ЭтоГруппа = ЛОЖЬ
		|	И Автоработы.ЭтоДополнительноеПредложение = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДопПредложения.ДопПредложение КАК ДопПредложение
		|ПОМЕСТИТЬ ИзменДопродажи
		|ИЗ
		|	ДопПредложения КАК ДопПредложения
		|ГДЕ
		|	(ДопПредложения.ДопПредложение В
		|				(ВЫБРАТЬ
		|					ТабДокумента.Авторабота
		|				ИЗ
		|					ТабДокумента КАК ТабДокумента)
		|			ИЛИ ДопПредложения.ДопПредложение В ИЕРАРХИИ
		|				(ВЫБРАТЬ
		|					ТабДокумента.Авторабота
		|				ИЗ
		|					ТабДокумента КАК ТабДокумента))
		|
		|СГРУППИРОВАТЬ ПО
		|	ДопПредложения.ДопПредложение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИзменДопродажи.ДопПредложение КАК ДополнительноеПредложение,
		|	ЕСТЬNULL(ПрименяемостьДополнительныхПредложенийПоМоделям.Модель, ЗНАЧЕНИЕ(Справочник.Модели.ПустаяСсылка)) КАК Модель,
		|	ЕСТЬNULL(ПрименяемостьДополнительныхПредложенийПоМоделям.GUID, """") КАК guid
		|ИЗ
		|	ИзменДопродажи КАК ИзменДопродажи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименяемостьДополнительныхПредложенийПоМоделям КАК ПрименяемостьДополнительныхПредложенийПоМоделям
		|		ПО ИзменДопродажи.ДопПредложение = ПрименяемостьДополнительныхПредложенийПоМоделям.ДополнительноеПредложение";
		
		Запрос.УстановитьПараметр("Регистратор", РегистраторСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать(); Наборы = Новый Массив;
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ПрименяемостьДополнительныхПредложенийПоМоделям.СоздатьНаборЗаписей();
			Набор.Отбор.ДополнительноеПредложение.Установить(Выборка.ДополнительноеПредложение);
			Набор.Отбор.Модель.Установить(Выборка.Модель);
			Набор.Отбор.GUID.Установить(Выборка.guid);
			
			Наборы.Добавить(Набор);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// получаем таблицу авторабот и их цен
Функция ПолучитьТаблицуАвторабот()
	
	МетаданныеИмя = ДокументОбъект.Метаданные().Имя;
	
	Запрос=Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаАвторабот.Авторабота КАК Авторабота,
	|	ТаблицаАвторабот.Модель КАК Модель
	|ПОМЕСТИТЬ
	|	ТаблицаАвторабот
	|ИЗ
	|	Документ."+МетаданныеИмя+".Автоработы КАК ТаблицаАвторабот
	|ГДЕ
	|	Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Авторабота
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументАвтоработы.Авторабота.Код КАК Код,
	|	ДокументАвтоработы.Авторабота.Артикул КАК Артикул,
	|	ДокументАвтоработы.Авторабота КАК Авторабота,
	|	ДокументАвтоработы.Модель КАК Модель,
	|	ДокументАвтоработы.Нормочас КАК Нормочас,
	|	ДокументАвтоработы.Цена КАК Цена,
	|	ЕСТЬNULL(ЦеныАвтоработВБазе.Нормочас, &НормочасПустой) КАК НормочасВБазе,
	|	ЕСТЬNULL(ЦеныАвтоработВБазе.Валюта,   &ВалютаПустая) КАК ВалютаВБазе,
	|	ЕСТЬNULL(ЦеныАвтоработВБазе.Цена,     0) КАК ЦенаВБазе
	|ИЗ
	|	Документ."+МетаданныеИмя+".Автоработы КАК ДокументАвтоработы
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЦеныАвторабот.СрезПоследних(&Момент,
	|			Контрагент = &Контрагент И 
	|			ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов И 
	|			ТипЦен = &ТипЦен И 
	|			Цех = &Цех И 
	|			ВидРемонта = &ВидРемонта И 
	|			(Авторабота, Модель) В (ВЫБРАТЬ Авторабота, Модель ИЗ ТаблицаАвторабот)
	|	) КАК ЦеныАвтоработВБазе
	|ПО
	|	ДокументАвтоработы.Модель                = ЦеныАвтоработВБазе.Модель И 
	|	ДокументАвтоработы.Авторабота            = ЦеныАвтоработВБазе.Авторабота И 
	|	ЦеныАвтоработВБазе.Контрагент            = &Контрагент И 
	|	ЦеныАвтоработВБазе.ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов И 
	|	ЦеныАвтоработВБазе.ТипЦен                = &ТипЦен И 
	|	ЦеныАвтоработВБазе.Цех                   = &Цех И 
	|	ЦеныАвтоработВБазе.ВидРемонта            = &ВидРемонта
	|ГДЕ
	|	(ДокументАвтоработы.Ссылка = &Ссылка)
	|");
	Запрос.УстановитьПараметр("Ссылка",                ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Момент",                ДатаНачалаДействия);
	Запрос.УстановитьПараметр("Контрагент",            Контрагент);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов);
	Запрос.УстановитьПараметр("ТипЦен",                ТипЦен);
	Запрос.УстановитьПараметр("Цех",                   Цех);
	Запрос.УстановитьПараметр("ВидРемонта",            ВидРемонта);
	Запрос.УстановитьПараметр("НормочасПустой",        Справочники.Нормочасы.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВалютаПустая",          Справочники.Валюты.ПустаяСсылка());
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// устанавливает цены
Функция УстановитьЦеныАвторабот() Экспорт
	
	// заполним незаполненные переменные.
	ДатаПереоценки = ?(ТипЗнч(ДатаНачалаДействия) = Тип("Дата"), ДатаНачалаДействия, ДокументОбъект.Дата);
	
	// получаем таблицу цен
	Если (РезультатЗапросаПоАвтоработам=Неопределено) ИЛИ (ТипЗнч(РезультатЗапросаПоАвтоработам)<>Тип("РезультатЗапроса")) И (ТипЗнч(РезультатЗапросаПоАвтоработам)<>Тип("ТаблицаЗначений")) Тогда
		РезультатЗапросаПоАвтоработам=ПолучитьТаблицуАвторабот();
	КонецЕсли;
	Если ТипЗнч(РезультатЗапросаПоАвтоработам)=Тип("РезультатЗапроса") Тогда
		РезультатЗапросаПоАвтоработам=РезультатЗапросаПоАвтоработам.Выгрузить();
	КонецЕсли;
	
	СообщатьОбИзменении =ПраваИНастройкиПользователя.Значение("СообщатьОбИзмененииЦен",ДокументОбъект);
	
	//ВалютаРегл=Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	//СтруктураКурса=РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегл,ДокументОбъект.Дата);
	//КурсРегл=СтруктураКурса.Курс/?(СтруктураКурса.Кратность=0,1,СтруктураКурса.Кратность);
	
	ВалютаТипаЦен = ТипЦен.ВалютаЦены;
	ВВалютеУчета  = ТипЦен.ВВалютеУчета;
	//СтрВалютаТипаЦен = СокрЛП(ВалютаТипаЦен.Наименование);
	КурсВалютыТипаЦен = 0;
	ТаблицаКурсов = Новый ТаблицаЗначений;
	Если ВВалютеУчета Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КурсыВалют.Валюта,
		|	МАКСИМУМ(КурсыВалют.Период) КАК Период
		|ПОМЕСТИТЬ
		|	ТаблицаВалют
		|ИЗ
		|	РегистрСведений.КурсыВалют КАК КурсыВалют
		|ГДЕ
		|	КурсыВалют.Период <= &НаДату
		|СГРУППИРОВАТЬ ПО
		|	КурсыВалют.Валюта
		|;
		|
		|ВЫБРАТЬ
		|	ТаблицаВалют.Валюта КАК Валюта,
		|	ВЫБОР
		|		КОГДА КурсыВалют.Кратность = 0 ТОГДА
		|			КурсыВалют.Курс
		|		ИНАЧЕ
		|			КурсыВалют.Курс/КурсыВалют.Кратность
		|	КОНЕЦ КАК Курс
		|ИЗ
		|	ТаблицаВалют КАК ТаблицаВалют
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.КурсыВалют КАК КурсыВалют
		|ПО
		|	ТаблицаВалют.Валюта = КурсыВалют.Валюта И 
		|	ТаблицаВалют.Период = КурсыВалют.Период
		|";
		Запрос.УстановитьПараметр("НаДату", ДокументОбъект.Дата);
		ТаблицаКурсов = Запрос.Выполнить().Выгрузить();
		ТаблицаКурсов.Индексы.Добавить("Валюта");
	Иначе
		СтруктураКурса    = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаТипаЦен, ДокументОбъект.Дата);
		КурсВалютыТипаЦен = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	КонецЕсли;
	
	// устанавливаем цены
	Для Каждого СтрокаАвторабот Из РезультатЗапросаПоАвтоработам Цикл
		НоваяЦена   = 0;
		Если ЗначениеЗаполнено(СтрокаАвторабот.Нормочас) Тогда
			Если СтрокаАвторабот.Нормочас = СтрокаАвторабот.НормочасВБазе Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СтрокаАвторабот.Цена) Тогда
			Если ВВалютеУчета Тогда
				ВалютаТипаЦен = СтрокаАвторабот.Авторабота.Номенклатура.ВалютаУчета;
				СтрокаКурсВалюта = ТаблицаКурсов.Найти(ВалютаТипаЦен, "Валюта");
				КурсВалютыТипаЦен = 1;
				Если НЕ СтрокаКурсВалюта = Неопределено Тогда
					КурсВалютыТипаЦен = СтрокаКурсВалюта.Курс;
				КонецЕсли;
			КонецЕсли;
			
			НоваяЦена = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаАвторабот.Цена, ДокументОбъект.ВалютаДокумента, ДокументОбъект.КурсДокумента, ВалютаТипаЦен, КурсВалютыТипаЦен), 2);
			
			Если ВалютаТипаЦен = СтрокаАвторабот.ВалютаВБазе И НоваяЦена = СтрокаАвторабот.ЦенаВБазе Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НоваяЗапись                       = Добавить();
		НоваяЗапись.Период                = ДатаПереоценки;
		НоваяЗапись.Регистратор           = ДокументОбъект.Ссылка;
		НоваяЗапись.Модель                = СтрокаАвторабот.Модель;
		НоваяЗапись.Авторабота            = СтрокаАвторабот.Авторабота;
		НоваяЗапись.Контрагент            = Контрагент;
		НоваяЗапись.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
		НоваяЗапись.ТипЦен                = ТипЦен;
		НоваяЗапись.Цех                   = Цех;
		НоваяЗапись.ВидРемонта            = ВидРемонта;
		Если ЗначениеЗаполнено(СтрокаАвторабот.Нормочас) Тогда
			НоваяЗапись.Нормочас = СтрокаАвторабот.Нормочас;
		ИначеЕсли ЗначениеЗаполнено(НоваяЦена) Тогда
			НоваяЗапись.Валюта   = ВалютаТипаЦен;
			НоваяЗапись.Цена     = НоваяЦена;
		КонецЕсли; 

		//// сообщим, если надо
		//Если СообщатьОбИзменении Тогда
		//	Если ЗначениеЗаполнено(СтрокаАвторабот.НормочасВБазе) Тогда
		//		СообщениеЦенаСтарая="Старая цена: "+СтрокаАвторабот.НормочасВБазе+".";
		//	ИначеЕсли ЗначениеЗаполнено(СтрокаАвторабот.ВалютаВБазе) И ЗначениеЗаполнено(
		//	СтрокаАвторабот.ЦенаВБазе) Тогда
		//		СообщениеЦенаСтарая="Старая цена: "+Формат(СтрокаАвторабот.ЦенаВБазе,"ЧДЦ=2;
		//		ЧН=0,00")+" "+СтрокаАвторабот.ВалютаВБазе+".";
		//	Иначе
		//		СообщениеЦенаСтарая="";
		//	КонецЕсли; 
		//	Если ЗначениеЗаполнено(НоваяЗапись.НормочасВБазе) Тогда
		//		СообщениеЦенаНовая="Новая цена: "+НоваяЗапись.Нормочас+".";
		//	ИначеЕсли ЗначениеЗаполнено(НоваяЗапись.Валюта) И ЗначениеЗаполнено(НоваяЗапись.Цена) Тогда
		//		СообщениеЦенаНовая="Новая цена: "+Формат(НоваяЗапись.Цена,"ЧДЦ=2; ЧН=0,00")+" "+НоваяЗапись.Валюта+".";
		//	Иначе
		//		СообщениеЦенаНовая="Новая цена: <неопределено>";
		//	КонецЕсли; 
		//	дкСообщитьРезультат("["+СокрЛП(СтрокаАвторабот.Артикул)+"] """
		//	+СокрЛП(СтрокаАвторабот.Авторабота)+"""."+СообщениеЦенаСтарая+" "+СообщениеЦенаНовая" Тип цен: "
		//	+СтрТипЦен+?(НЕ ЗначениеЗаполнено(Контрагент),""," Контрагент: "+СокрЛП(Контрагент.Наименование)),
		//	"Информация&Изменение цен:",ДокументОбъект,СтрокаТовар.Номенклатура);
		//КонецЕсли;
	КонецЦикла;
	
	// скинем переменные
	Контрагент                    = Неопределено;
	ДоговорВзаиморасчетов         = Неопределено;
	ТипЦен                        = Неопределено;
	Цех                           = Неопределено;
	ВидРемонта                    = Неопределено;
	ДатаНачалаДействия            = Неопределено;
	РезультатЗапросаПоАвтоработам = Неопределено;
	// убиваем циклическую ссылку
	ДокументОбъект                = Неопределено;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецЕсли
