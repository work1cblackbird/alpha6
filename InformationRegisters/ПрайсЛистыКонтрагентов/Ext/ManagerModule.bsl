// Модуль менеджера регистра "Прайс-листы контрагентов"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Маршрутизирует выполнение процесса переноса записей прайс-листа в наиболее оптимальную процедуру.
//
// Параметры:
//  ПрайсЛистКонтрагента - СправочникСсылка.ПрайсЛистыКонтрагентов	 - Прайс лист.
//  ПорцияЗаписи		 - Число									 - Количество записей.
//  КлючСтрокиПоставщика - Строка									 - Строка с ключем.
// 
// Возвращаемое значение:
//  Булево - Булево.
//
Функция ОбновитьЗаписиВОсновномРегистре(ПрайсЛистКонтрагента, ПорцияЗаписи = Неопределено, КлючСтрокиПоставщика = Неопределено) Экспорт
	
	Если ПорцияЗаписи = Неопределено Тогда
		
		ПорцияЗаписи = 9999;
		
	КонецЕсли;
	
	Если ТипЗнч(КлючСтрокиПоставщика) = Тип("Строка")
		ИЛИ (ТипЗнч(КлючСтрокиПоставщика) = Тип("Массив") И КлючСтрокиПоставщика.Количество() <= ПорцияЗаписи) Тогда
		
		Результат = ОбновитьЗаписиПоКлючуСтроки(ПрайсЛистКонтрагента, КлючСтрокиПоставщика);
		
	Иначе
		
		Результат = ОбновитьЗаписиВсе(ПрайсЛистКонтрагента, ПорцияЗаписи);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает доступные теги прайс-листа
//
// Параметры:
//  ПрайсЛист - СправочникСсылка.ПрайсЛист - Прайс-лист для коготорого будут получены теги
//
// Возвращаемое значение:
//  Массив
//
Функция ТегиПрайсЛиста(ПрайсЛист) Экспорт
	
	Теги = Новый Массив;
	
	Если НЕ ПрайсЛист.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПрайсЛистыКонтрагентов.ТегПозиции
		|ИЗ
		|	РегистрСведений.ПрайсЛистыКонтрагентов КАК ПрайсЛистыКонтрагентов
		|ГДЕ
		|	ПрайсЛистыКонтрагентов.ПрайсЛист = &ПрайсЛист";
		
		Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛист);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Теги = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ТегПозиции");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Теги;
	
КонецФункции

// Функция получение цены номенклатуры.
// Возвращает цену из прайслиста. Без учета скидок и наценок.
//
// Параметры:
//  Артикул_Номенклатура	 - СправочникСсылка.Номернклатура, Строка	 - Артикул / номенклатура поиска цен
//  Производитель			 - СправочникСсылка.Производители, Строка	 - Поиск по производителю
//  Поставщик				 - СправочникСсылка.Производители, Строка	 - Поиск по производителю
//  ДатаЦен					 - Дата										 - Дата получения цены
//  ПодразделениеКомпании	 - СправочникСсылка.ПодразделенияКомпании	 - Подразделение компании цены
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПолучитьПрайсЛистыКонтрагентов(Артикул_Номенклатура, Производитель=Неопределено, Поставщик=Неопределено, ДатаЦен=Неопределено, ПодразделениеКомпании=Неопределено) Экспорт 
	
	Если ДатаЦен = Неопределено Тогда
		
		ДатаЦен = ТекущаяДатаСеанса();
		
	КонецЕсли;
	
	Контрагент = Неопределено;
	ПрайсЛистКонтрагента = Неопределено;
	
	Если ТипЗнч(Поставщик) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Контрагент = Поставщик;
		
	ИначеЕсли ТипЗнч(Поставщик) = Тип("СправочникСсылка.ПрайсЛистыКонтрагентов") Тогда
		
		ПрайсЛистКонтрагента = Поставщик;
		
	ИначеЕсли ТипЗнч(Поставщик) = Тип("СправочникСсылка.СкладыКомпании") Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПодразделениеКомпании", ПодразделениеКомпании);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛистКонтрагента);
	Запрос.УстановитьПараметр("Дата", ДатаЦен);
	
	Если ТипЗнч(Производитель) = Тип("Строка") Тогда
		
		Запрос.УстановитьПараметр("ПроизводительВПрайсЛисте", Производитель);
		
	КонецЕсли;
	
	// Получим запрещенные подразделения компании
	УровниДоступа = Новый Массив;
	УровниДоступа.Добавить(Перечисления.УровниДоступностиПрайсЛистовКонтрагентов.Запрещено);
	СписокЗапрещенныхПодразделений = 
		РегистрыСведений
		.ПрайсЛистыКонтрагентовДоступностьПодразделенийКомпании
		.ДоступныеПрайсЛистыПодразделенияКомпании(ПодразделениеКомпании, Контрагент, УровниДоступа);
	
	СписокЗапрещенныхПрайсЛистов = СписокЗапрещенныхПодразделений.ВыгрузитьКолонку("ПрайсЛист");
	Запрос.УстановитьПараметр("СписокЗапрещенныхПрайсЛистов", СписокЗапрещенныхПрайсЛистов);
	ЭтоВебПрайсЛист = ЗначениеЗаполнено(ПрайсЛистКонтрагента)
		И ПрайсЛистКонтрагента.ВидПрайсЛиста = Перечисления.ВидыПрайсЛистов.ВебПрайсЛист;
	
	Если ТипЗнч(Артикул_Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПравилаЗагрузки.ПрайсЛист,
		|	ВЫРАЗИТЬ(ПравилаЗагрузки.ОбъектПравила КАК СТРОКА(32)) КАК КлючСтроки
		|ПОМЕСТИТЬ втПравилаЗагрузки
		|ИЗ
		|	РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки КАК ПравилаЗагрузки
		|ГДЕ
		|	(ВЫРАЗИТЬ(ПравилаЗагрузки.Значение КАК Справочник.Номенклатура)) = &Номенклатура
		|	И ПравилаЗагрузки.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилЗагрузки.КлючСтроки)
		|	И ПравилаЗагрузки.ВидПравила = ЗНАЧЕНИЕ(Перечисление.ВидыПравилЗагрузки.ПрисвоитьЗначение)
		|	И ПравилаЗагрузки.ИмяРеквизитаПрайсЛиста = ""Номенклатура""
		|	И НЕ ПравилаЗагрузки.ПрайсЛист В (&СписокЗапрещенныхПрайсЛистов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрайсЛистыКонтрагентов.Артикул КАК Артикул,
		|	ПрайсЛистыКонтрагентов.Производитель КАК Производитель,
		|	ПрайсЛистыКонтрагентов.Наименование КАК Наименование,
		|	ПрайсЛистыКонтрагентов.НаименованиеИностранное КАК НаименованиеИностранное,
		|	ПрайсЛистыКонтрагентов.Количество КАК Количество,
		|	ПрайсЛистыКонтрагентов.ПрайсЛист КАК ПрайсЛист,
		|	ПрайсЛистыКонтрагентов.Цена КАК ЦенаВПрайсЛисте,
		|	ПрайсЛистыКонтрагентов.Валюта КАК Валюта,
		|	ПрайсЛистыКонтрагентов.СрокПоставки КАК СрокПоставки,
		|	ПрайсЛистыКонтрагентов.СрокПоставкиМинимальный КАК СрокПоставкиМинимальный,
		|	ПрайсЛистыКонтрагентов.КлючСтрокиПоставщика КАК КлючСтрокиПоставщика,
		|	ПрайсЛистыКонтрагентов.ТегПозиции КАК ТегПозиции,
		|	ПрайсЛистыКонтрагентов.ДатаЗаписи КАК ДатаЗагрузкиПрайсЛиста
		|ИЗ
		|	РегистрСведений.ПрайсЛистыКонтрагентов"+?(ЭтоВебПрайсЛист И ТипЗнч(Производитель) = Тип("Строка"), "Временный", "")+" КАК ПрайсЛистыКонтрагентов
		|ГДЕ
		|	ПрайсЛистыКонтрагентов.АртикулДляПоиска <> """"
		|	И ПрайсЛистыКонтрагентов.АртикулДляПоиска = &АртикулДляПоиска
		|	И ПрайсЛистыКонтрагентов.Производитель = &Производитель
		|	"+?(ЗначениеЗаполнено(Контрагент), "И ПрайсЛистыКонтрагентов.ПрайсЛист.Владелец = &Контрагент", "")+"
		|	"+?(ЗначениеЗаполнено(ПрайсЛистКонтрагента), "И ПрайсЛистыКонтрагентов.ПрайсЛист = &ПрайсЛист", "")+"
		|	"+?(ТипЗнч(Производитель) = Тип("Строка"), "И ПрайсЛистыКонтрагентов.ПроизводительВПрайсЛисте = &ПроизводительВПрайсЛисте", "")+"
		|	И НЕ ПрайсЛистыКонтрагентов.ПрайсЛист В (&СписокЗапрещенныхПрайсЛистов)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПрайсЛистыКонтрагентов.Артикул,
		|	ПрайсЛистыКонтрагентов.Производитель,
		|	ПрайсЛистыКонтрагентов.Наименование,
		|	ПрайсЛистыКонтрагентов.НаименованиеИностранное,
		|	ПрайсЛистыКонтрагентов.Количество,
		|	ПрайсЛистыКонтрагентов.ПрайсЛист,
		|	ПрайсЛистыКонтрагентов.Цена,
		|	ПрайсЛистыКонтрагентов.Валюта,
		|	ПрайсЛистыКонтрагентов.СрокПоставки,
		|	ПрайсЛистыКонтрагентов.СрокПоставкиМинимальный,
		|	ПрайсЛистыКонтрагентов.КлючСтрокиПоставщика,
		|	ПрайсЛистыКонтрагентов.ТегПозиции,
		|	ПрайсЛистыКонтрагентов.ДатаЗаписи
		|ИЗ
		|	втПравилаЗагрузки КАК ПравилаЗагрузки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛистыКонтрагентов"+?(ЭтоВебПрайсЛист И ТипЗнч(Производитель) = Тип("Строка"), "Временный", "")+" КАК ПрайсЛистыКонтрагентов
		|		ПО ПравилаЗагрузки.ПрайсЛист = ПрайсЛистыКонтрагентов.ПрайсЛист
		|			И ПравилаЗагрузки.КлючСтроки = ПрайсЛистыКонтрагентов.КлючСтрокиПоставщика
		|;
		|
		|";
		
		Запрос.УстановитьПараметр("Номенклатура", Артикул_Номенклатура);
		Запрос.УстановитьПараметр("АртикулДляПоиска", Артикул_Номенклатура.АртикулДляПоиска);
		Запрос.УстановитьПараметр("Производитель", Артикул_Номенклатура.Производитель);
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПрайсЛистыКонтрагентов.ПрайсЛист,
		|	ПрайсЛистыКонтрагентов.Артикул,
		|	ПрайсЛистыКонтрагентов.Производитель,
		|	ПрайсЛистыКонтрагентов.Наименование,
		|	ПрайсЛистыКонтрагентов.ТегПозиции,
		|	ПрайсЛистыКонтрагентов.Количество,
		|	ПрайсЛистыКонтрагентов.Цена КАК ЦенаВПрайсЛисте,
		|	ПрайсЛистыКонтрагентов.Валюта,
		|	ПрайсЛистыКонтрагентов.СрокПоставки,
		|	ПрайсЛистыКонтрагентов.СрокПоставкиМинимальный КАК СрокПоставкиМинимальный,
		|	ПрайсЛистыКонтрагентов.ПрайсЛист.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ПрайсЛистыКонтрагентов.ПрайсЛист.СтавкаНДС КАК СтавкаНДС,
		|	ПрайсЛистыКонтрагентов.НаименованиеИностранное,
		|	ПрайсЛистыКонтрагентов.КлючСтрокиПоставщика,
		|	ПрайсЛистыКонтрагентов.ДатаЗаписи КАК ДатаЗагрузкиПрайсЛиста
		|ИЗ
		|	РегистрСведений.ПрайсЛистыКонтрагентов"+?(ЭтоВебПрайсЛист И ТипЗнч(Производитель) = Тип("Строка"), "Временный", "")+" КАК ПрайсЛистыКонтрагентов
		|ГДЕ
		|	ПрайсЛистыКонтрагентов.АртикулДляПоиска <> """"
		|	И ПрайсЛистыКонтрагентов.АртикулДляПоиска В (&СписокАртикулов)
		|	"+?(Производитель <> Неопределено, "И ПрайсЛистыКонтрагентов.Производитель = &Производитель", "")+"
		|	"+?(ЗначениеЗаполнено(Контрагент), "И ПрайсЛистыКонтрагентов.ПрайсЛист.Владелец = &Контрагент", "")+"
		|	"+?(ЗначениеЗаполнено(ПрайсЛистКонтрагента), "И ПрайсЛистыКонтрагентов.ПрайсЛист = &ПрайсЛист", "")+"
		|	"+?(ТипЗнч(Производитель) = Тип("Строка"), "И ПрайсЛистыКонтрагентов.ПроизводительВПрайсЛисте = &ПроизводительВПрайсЛисте", "")+"
		|	И НЕ ПрайсЛистыКонтрагентов.ПрайсЛист В (&СписокЗапрещенныхПрайсЛистов)
		|УПОРЯДОЧИТЬ ПО
		|	ЦенаВПрайсЛисте, СрокПоставкиМинимальный
		|";
		
		АртикулДляПоиска = ОбщегоНазначенияАвтосалонКлиентСервер.ВАртикулДляПоиска(Артикул_Номенклатура);
		СписокАртикулов = Новый СписокЗначений;
		СписокАртикулов.Добавить(Артикул_Номенклатура);
		Если АртикулДляПоиска <> Артикул_Номенклатура Тогда
			СписокАртикулов.Добавить(АртикулДляПоиска);
		КонецЕсли;
		Запрос.УстановитьПараметр("СписокАртикулов", СписокАртикулов);
		Запрос.УстановитьПараметр("Производитель", Производитель);
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет перенос подходящих записей в постоянный регистр по переданным ключам строк.
Функция ОбновитьЗаписиПоКлючуСтроки(ПрайсЛистКонтрагента, КлючСтрокиПоставщика)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Временный.ПрайсЛист КАК ПрайсЛист,
	|	Временный.КлючСтрокиПоставщика КАК КлючСтрокиПоставщика,
	|	МАКСИМУМ(Временный.АртикулДляПоиска) КАК АртикулДляПоиска,
	|	МАКСИМУМ(Временный.Производитель) КАК Производитель,
	|	МАКСИМУМ(Временный.Наименование) КАК Наименование,
	|	МАКСИМУМ(Временный.НаименованиеИностранное) КАК НаименованиеИностранное,
	|	МАКСИМУМ(Временный.Цена) КАК Цена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(Временный.Количество КАК БУЛЕВО)) = ИСТИНА
	|				ТОГДА 0
	|			ИНАЧЕ Временный.Количество
	|		КОНЕЦ) КАК Количество,
	|	МАКСИМУМ(Временный.ЗапретПродажи) КАК ЗапретПродажи,
	|	МАКСИМУМ(Временный.ЗапретЗакупки) КАК ЗапретЗакупки,
	|	МАКСИМУМ(Временный.КратностьПоставок) КАК КратностьПоставок,
	|	МАКСИМУМ(Временный.ТегПозиции) КАК ТегПозиции,
	|	МАКСИМУМ(Временный.Валюта) КАК Валюта,
	|	МАКСИМУМ(Временный.СрокПоставкиМинимальный) КАК СрокПоставкиМинимальный,
	|	МАКСИМУМ(Временный.СрокПоставкиМаксимальный) КАК СрокПоставкиМаксимальный,
	|	МАКСИМУМ(Временный.СрокПоставки) КАК СрокПоставки,
	|	МАКСИМУМ(Временный.Артикул) КАК Артикул,
	|	МАКСИМУМ(Временный.СнятаСПроизводства) КАК СнятаСПроизводства,
	|	МАКСИМУМ(Временный.Вес) КАК Вес,
	|	МАКСИМУМ(Временный.Объем) КАК Объем,
	|	МАКСИМУМ(Временный.ПроизводительВПрайсЛисте) КАК ПроизводительВПрайсЛисте
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовВременный КАК Временный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки КАК ПравилаЗагрузки
	|		ПО Временный.ПрайсЛист = ПравилаЗагрузки.ПрайсЛист
	|			И Временный.КлючСтрокиПоставщика = ПравилаЗагрузки.ОбъектПравила
	|			И (ПравилаЗагрузки.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилЗагрузки.КлючСтроки))
	|			И (ПравилаЗагрузки.Значение ССЫЛКА Справочник.Номенклатура)
	|			И ((ВЫРАЗИТЬ(ПравилаЗагрузки.Значение КАК Справочник.Номенклатура)) <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки КАК ЗапретЗагрузкиПроизводитель
	|		ПО Временный.ПрайсЛист = ЗапретЗагрузкиПроизводитель.ПрайсЛист
	|			И (Временный.ПроизводительВПрайсЛисте = (ВЫРАЗИТЬ(ЗапретЗагрузкиПроизводитель.ОбъектПравила КАК СТРОКА(100))))
	|			И (ЗапретЗагрузкиПроизводитель.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилЗагрузки.ПроизводительВПрайсЛисте))
	|			И (ЗапретЗагрузкиПроизводитель.ВидПравила = ЗНАЧЕНИЕ(Перечисление.ВидыПравилЗагрузки.НеЗагружать))
	|			И (Временный.Производитель = (ВЫРАЗИТЬ(ЗапретЗагрузкиПроизводитель.Значение КАК Справочник.Производители)))
	|ГДЕ
	|	Временный.ПрайсЛист = &ПрайсЛист
	|	И Временный.КлючСтрокиПоставщика В(&КлючиСтрок)
	|	И ((ВЫРАЗИТЬ(Временный.Количество КАК БУЛЕВО)) = ИСТИНА
	|			ИЛИ (ВЫРАЗИТЬ(Временный.Количество КАК ЧИСЛО(15, 3))) > 0)
	|	И Временный.ЗапретЗагрузки = ЛОЖЬ
	|	И (Временный.ПрайсЛист.ВидПрайсЛиста = ЗНАЧЕНИЕ(Перечисление.ВидыПрайсЛистов.ПрайсЛистПоставщика)
	|			ИЛИ Временный.ПрайсЛист.ВидПрайсЛиста = ЗНАЧЕНИЕ(Перечисление.ВидыПрайсЛистов.ОстаткиДляКаталогаПредложений))
	|	И (Временный.АртикулДляПоиска <> """"
	|				И (НЕ Временный.Производитель = ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)
	|					ИЛИ Временный.ПроизводительВПрайсЛисте = """")
	|			ИЛИ НЕ ПравилаЗагрузки.Значение ЕСТЬ NULL )
	|	И ЗапретЗагрузкиПроизводитель.ПрайсЛист ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	Временный.ПрайсЛист,
	|	Временный.КлючСтрокиПоставщика
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючСтрокиПоставщика";
	
	СписокЗначений = Новый СписокЗначений;
	
	Если ТипЗнч(КлючСтрокиПоставщика) = Тип("Массив") Тогда
		СписокЗначений.ЗагрузитьЗначения(КлючСтрокиПоставщика);
	Иначе
		СписокЗначений.Добавить(КлючСтрокиПоставщика);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛистКонтрагента);
	Запрос.УстановитьПараметр("КлючиСтрок", СписокЗначений);
	
	ДатаЗаписиПорцииДанных = ТекущаяДатаСеанса();
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Менеджер = РегистрыСведений.ПрайсЛистыКонтрагентовНедоступныеЗаписи.СоздатьМенеджерЗаписи();
		Менеджер.ПрайсЛист = ПрайсЛистКонтрагента;
		Менеджер.ДатаЗаписи = ДатаЗаписиПорцииДанных;
		Менеджер.Записать();
		
		НачатьТранзакцию();
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПрайсЛистыКонтрагентов");
		ЭлементБлокировки.УстановитьЗначение("ПрайсЛист", ПрайсЛистКонтрагента);
		ЭлементБлокировки.УстановитьЗначение("ДатаЗаписи", ДатаЗаписиПорцииДанных);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ПрайсЛистыКонтрагентов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПрайсЛист.Установить(ПрайсЛистКонтрагента, Истина);
		НаборЗаписей.Отбор.ДатаЗаписи.Установить(ДатаЗаписиПорцииДанных, Истина);
		
		КодПредложения = 0;
		
		ВыборкаЗаписей = Результат.Выбрать();
		Пока ВыборкаЗаписей.Следующий() Цикл
			НоваяСтрока = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗаписей); 
			КодПредложения = КодПредложения + 1;
			НоваяСтрока.ДатаЗаписи = ДатаЗаписиПорцииДанных;
			НоваяСтрока.КодПредложения = КодПредложения;
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			#Если Клиент Тогда
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
			#КонецЕсли
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	// Удалим из регистра "ПрайсЛистыКонтрагентов" старые записи
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПрайсЛистыКонтрагентов.ПрайсЛист,
	|	ПрайсЛистыКонтрагентов.Номенклатура,
	|	ПрайсЛистыКонтрагентов.АртикулДляПоиска,
	|	ПрайсЛистыКонтрагентов.Производитель,
	|	ПрайсЛистыКонтрагентов.ДатаЗаписи,
	|	ПрайсЛистыКонтрагентов.КодПредложения
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентов КАК ПрайсЛистыКонтрагентов
	|ГДЕ
	|	ПрайсЛистыКонтрагентов.ПрайсЛист = &ПрайсЛист
	|	И ПрайсЛистыКонтрагентов.КлючСтрокиПоставщика В(&КлючиСтрок)
	|	И ПрайсЛистыКонтрагентов.ДатаЗаписи <> &ДатаЗаписи";
	
	Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛистКонтрагента);
	Запрос.УстановитьПараметр("КлючиСтрок", СписокЗначений);
	Запрос.УстановитьПараметр("ДатаЗаписи", ДатаЗаписиПорцииДанных);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПрайсЛистыКонтрагентов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Результат;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПрайсЛист",        "ПрайсЛист");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДатаЗаписи",       "ДатаЗаписи");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("КодПредложения",   "КодПредложения");
	Блокировка.Заблокировать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ПрайсЛистыКонтрагентов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПрайсЛист.Установить       (ПрайсЛистКонтрагента);
		НаборЗаписей.Отбор.ДатаЗаписи.Установить      (Выборка.ДатаЗаписи);
		НаборЗаписей.Отбор.КодПредложения.Установить  (Выборка.КодПредложения);
		Попытка
			
			НаборЗаписей.Записать();
			
		Исключение
			
			ОтменитьТранзакцию();
			#Если Клиент Тогда
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
			#КонецЕсли
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	// Очистим регистр "ПрайсЛистыКонтрагентовНедоступныеЗаписи"
	НачатьТранзакцию();
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПрайсЛистыКонтрагентовНедоступныеЗаписи");
	ЭлементБлокировки.УстановитьЗначение("ПрайсЛист",  ПрайсЛистКонтрагента);
	ЭлементБлокировки.УстановитьЗначение("ДатаЗаписи", ДатаЗаписиПорцииДанных);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	НаборЗаписей = РегистрыСведений.ПрайсЛистыКонтрагентовНедоступныеЗаписи.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПрайсЛист.Установить(ПрайсЛистКонтрагента, Истина);
	НаборЗаписей.Отбор.ДатаЗаписи.Установить(ДатаЗаписиПорцииДанных, Истина);
	Попытка
		
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		#Если Клиент Тогда
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
		#КонецЕсли
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Выполняет перенос всех подходящих записей прайс-листа из временного в постоянный регистр.
Функция ОбновитьЗаписиВсе(ПрайсЛистКонтрагента, ПорцияЗаписи)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ "+Формат(ПорцияЗаписи, "ЧГ=0")+"
	|	Временный.ПрайсЛист,
	|	Временный.КлючСтрокиПоставщика КАК КлючСтрокиПоставщика,
	|	МАКСИМУМ(Временный.АртикулДляПоиска) КАК АртикулДляПоиска,
	|	МАКСИМУМ(Временный.Производитель) КАК Производитель,
	|	МАКСИМУМ(Временный.Наименование) КАК Наименование,
	|	МАКСИМУМ(Временный.НаименованиеИностранное) КАК НаименованиеИностранное,
	|	МАКСИМУМ(Временный.Цена) КАК Цена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(Временный.Количество КАК БУЛЕВО)) = ИСТИНА
	|				ТОГДА 0
	|			ИНАЧЕ Временный.Количество
	|		КОНЕЦ) КАК Количество,
	|	МАКСИМУМ(Временный.ЗапретПродажи) КАК ЗапретПродажи,
	|	МАКСИМУМ(Временный.ЗапретЗакупки) КАК ЗапретЗакупки,
	|	МАКСИМУМ(Временный.КратностьПоставок) КАК КратностьПоставок,
	|	МАКСИМУМ(Временный.ТегПозиции) КАК ТегПозиции,
	|	МАКСИМУМ(Временный.Валюта) КАК Валюта,
	|	МАКСИМУМ(Временный.СрокПоставкиМинимальный) КАК СрокПоставкиМинимальный,
	|	МАКСИМУМ(Временный.СрокПоставкиМаксимальный) КАК СрокПоставкиМаксимальный,
	|	МАКСИМУМ(Временный.СрокПоставки) КАК СрокПоставки,
	|	МАКСИМУМ(Временный.Артикул) КАК Артикул,
	|	МАКСИМУМ(Временный.СнятаСПроизводства) КАК СнятаСПроизводства,
	|	МАКСИМУМ(Временный.Вес) КАК Вес,
	|	МАКСИМУМ(Временный.Объем) КАК Объем,
	|	МАКСИМУМ(Временный.ПроизводительВПрайсЛисте) КАК ПроизводительВПрайсЛисте
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентовВременный КАК Временный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки КАК ПравилаЗагрузки
	|		ПО Временный.ПрайсЛист = ПравилаЗагрузки.ПрайсЛист
	|			И Временный.КлючСтрокиПоставщика = ПравилаЗагрузки.ОбъектПравила
	|			И (ПравилаЗагрузки.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилЗагрузки.КлючСтроки))
	|			И (ПравилаЗагрузки.Значение ССЫЛКА Справочник.Номенклатура)
	|			И ((ВЫРАЗИТЬ(ПравилаЗагрузки.Значение КАК Справочник.Номенклатура)) <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛистыКонтрагентовПравилаЗагрузки КАК ЗапретЗагрузкиПроизводитель
	|		ПО Временный.ПрайсЛист = ЗапретЗагрузкиПроизводитель.ПрайсЛист
	|			И (Временный.ПроизводительВПрайсЛисте = (ВЫРАЗИТЬ(ЗапретЗагрузкиПроизводитель.ОбъектПравила КАК СТРОКА(100))))
	|			И (ЗапретЗагрузкиПроизводитель.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилЗагрузки.ПроизводительВПрайсЛисте))
	|			И (ЗапретЗагрузкиПроизводитель.ВидПравила = ЗНАЧЕНИЕ(Перечисление.ВидыПравилЗагрузки.НеЗагружать))
	|			И (Временный.Производитель = (ВЫРАЗИТЬ(ЗапретЗагрузкиПроизводитель.Значение КАК Справочник.Производители)))
	|ГДЕ
	|	Временный.ПрайсЛист = &ПрайсЛист
	|	И Временный.КлючСтрокиПоставщика > &КлючСтрокиПоставщика
	|	И ((ВЫРАЗИТЬ(Временный.Количество КАК БУЛЕВО)) = ИСТИНА
	|			ИЛИ (ВЫРАЗИТЬ(Временный.Количество КАК ЧИСЛО(15, 3))) > 0)
	|	И Временный.ЗапретЗагрузки = ЛОЖЬ
	|	И (Временный.ПрайсЛист.ВидПрайсЛиста = ЗНАЧЕНИЕ(Перечисление.ВидыПрайсЛистов.ПрайсЛистПоставщика)
	|			ИЛИ Временный.ПрайсЛист.ВидПрайсЛиста = ЗНАЧЕНИЕ(Перечисление.ВидыПрайсЛистов.ОстаткиДляКаталогаПредложений))
	|	И (Временный.АртикулДляПоиска <> """"
	|				И (НЕ Временный.Производитель = ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)
	|					ИЛИ Временный.ПроизводительВПрайсЛисте = """")
	|			ИЛИ НЕ ПравилаЗагрузки.Значение ЕСТЬ NULL )
	|	И ЗапретЗагрузкиПроизводитель.ПрайсЛист ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	Временный.ПрайсЛист,
	|	Временный.КлючСтрокиПоставщика
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючСтрокиПоставщика";
	
	Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛистКонтрагента);
	
	ДатаЗаписиПорцииДанных = ТекущаяДатаСеанса();
	КлючСтрокиПоставщика = "";
	
	Пока Истина Цикл
		
		Запрос.УстановитьПараметр("КлючСтрокиПоставщика", КлючСтрокиПоставщика);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		Менеджер = РегистрыСведений.ПрайсЛистыКонтрагентовНедоступныеЗаписи.СоздатьМенеджерЗаписи();
		Менеджер.ПрайсЛист = ПрайсЛистКонтрагента;
		Менеджер.ДатаЗаписи = ДатаЗаписиПорцииДанных;
		Менеджер.Записать();
		
		НачатьТранзакцию();
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПрайсЛистыКонтрагентов");
		ЭлементБлокировки.УстановитьЗначение("ПрайсЛист", ПрайсЛистКонтрагента);
		ЭлементБлокировки.УстановитьЗначение("ДатаЗаписи", ДатаЗаписиПорцииДанных);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ПрайсЛистыКонтрагентов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПрайсЛист.Установить(ПрайсЛистКонтрагента);
		НаборЗаписей.Отбор.ДатаЗаписи.Установить(ДатаЗаписиПорцииДанных);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		КодПредложения = 0;
		
		ВыборкаЗаписей = Результат.Выбрать();
		Пока ВыборкаЗаписей.Следующий() Цикл
			НоваяСтрока = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗаписей); 
			КодПредложения = КодПредложения + 1;
			НоваяСтрока.КодПредложения = КодПредложения;
			НоваяСтрока.ДатаЗаписи = ДатаЗаписиПорцииДанных;
			КлючСтрокиПоставщика = ВыборкаЗаписей.КлючСтрокиПоставщика;
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			#Если Клиент Тогда
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
			#КонецЕсли
			Возврат Ложь;
		КонецПопытки;
		
		Если ТекущаяДатаСеанса() <= ДатаЗаписиПорцииДанных Тогда
			ДатаЗаписиПорцииДанных = ДатаЗаписиПорцииДанных + 1;
		Иначе
			ДатаЗаписиПорцииДанных = ТекущаяДатаСеанса();
		КонецЕсли;
		
	КонецЦикла;
	
	// Удалим из регистра "ПрайсЛистыКонтрагентов" старые записи
	// Получим все даты записей из регистра "ПрайсЛистыКонтрагентов",
	// которых нет в "ПрайсЛистыКонтрагентовНедоступныеЗаписи".
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрайсЛистыКонтрагентов.ДатаЗаписи
	|ИЗ
	|	РегистрСведений.ПрайсЛистыКонтрагентов КАК ПрайсЛистыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрайсЛистыКонтрагентовНедоступныеЗаписи КАК НедоступныеЗаписи
	|		ПО НедоступныеЗаписи.ПрайсЛист = ПрайсЛистыКонтрагентов.ПрайсЛист
	|			И НедоступныеЗаписи.ДатаЗаписи = ПрайсЛистыКонтрагентов.ДатаЗаписи
	|ГДЕ
	|	ПрайсЛистыКонтрагентов.ПрайсЛист = &ПрайсЛист
	|	И НедоступныеЗаписи.ДатаЗаписи ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛистКонтрагента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПрайсЛистыКонтрагентов");
		ЭлементБлокировки.УстановитьЗначение("ПрайсЛист", ПрайсЛистКонтрагента);
		ЭлементБлокировки.УстановитьЗначение("ДатаЗаписи", Выборка.ДатаЗаписи);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ПрайсЛистыКонтрагентов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПрайсЛист.Установить(ПрайсЛистКонтрагента);
		НаборЗаписей.Отбор.ДатаЗаписи.Установить(Выборка.ДатаЗаписи);
		Попытка
			НаборЗаписей.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			#Если Клиент Тогда
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
			#КонецЕсли
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	
	// Очистим регистр "ПрайсЛистыКонтрагентовНедоступныеЗаписи"
	НачатьТранзакцию();
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПрайсЛистыКонтрагентовНедоступныеЗаписи");
	ЭлементБлокировки.УстановитьЗначение("ПрайсЛист", ПрайсЛистКонтрагента);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	НаборЗаписей = РегистрыСведений.ПрайсЛистыКонтрагентовНедоступныеЗаписи.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПрайсЛист.Установить(ПрайсЛистКонтрагента, Истина);
	Попытка
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		#Если Клиент Тогда
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
		#КонецЕсли
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	ОбязательныеРеквизиты = ОбработкаСобытийРегистраСервер.ПолучитьСтандартныеОбязательныеРеквизиты(Объект);
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции 

Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	УникальныеРеквизиты = Новый Структура();
	
	Возврат УникальныеРеквизиты;
	
КонецФункции 

#КонецОбласти

#КонецОбласти

#КонецЕсли