// Модуль набора записей регистра сведений "Обмен с AudaPadWeb"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем СерверОснование;					// сервер auto pad web
Перем ОбщаяСтруктура Экспорт;			// Структура автомобиля при загрузке калькуляций задания
Перем СодержаниеЗадания Экспорт;		// xml-содержание полученного задания
Перем КэшКалькуляций Экспорт;			// Кэш калькуляций
Перем СервисЗаданий Экспорт;			// Адрес веб-сервиса заданий
Перем СервисПрикреплений Экспорт;		// Адрес веб-сервиса вложений
Перем ПроксиЗаданий Экспорт;			// Прокси для работы с сервисом заданий
Перем ПроксиПрикреплений Экспорт;		// Проксм для работы с сервисом прикреплений
Перем ДлинаНаименованияТовара;			// Длина наименования номенклатуры
Перем ДлинаНаименованияРаботы;			// Длина наименования автоработы
Перем флПоискАртикулНаименование Экспорт; // Поиск по артикулу и наименованию
Перем флПоискНаименованиеПолное Экспорт; // Поиск по полному наименованию
Перем флСинхронизироватьНоменклатуру Экспорт; // Режим синхронизации запчастей
Перем ВидРемонта Экспорт;				// Вид ремонта для подставновки в документ
Перем ТипЦен Экспорт;					// Тип цен для подставновки в документ
Перем ТипЦенРабот Экспорт;				// Тип цен работ для подставновки в документ
Перем Цех Экспорт;						// Цех для подставновки в документ
Перем ГруппаАвтомобили Экспорт;			// Группа-родитель для загрузки автомобилей
Перем ГруппаАвторабот Экспорт;			// Группа-родитель для загрузки авторабот
Перем ГруппаКонтрагентов Экспорт;		// Группа-родитель для загрузки контрагентов
Перем ГруппаМодели Экспорт;				// Группа-родитель для загрузки моделей
Перем ГруппаНоменклатуры Экспорт;		// Группа-родитель для загрузки номенклатуры	
Перем ПользовательАХ Экспорт;			// Пользователь Audatex
Перем ПарольАХ Экспорт;					// Пароль Audatex
Перем ПользовательПрокси Экспорт;		// Пользователь прокси
Перем ПарольПрокси Экспорт;				// Пароль прокси

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ОбработкаСобытийРегистраСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПодготовитьДанныеДляПередачиНаСервер(ТекСтрока, ПараметрРазбора = "Калькуляция") Экспорт
	Если ПараметрРазбора = "Калькуляция" Тогда
		СТРДанные = Новый Структура;
		СТРДанные.Вставить("КурсИсходнойВалюты", ТекСтрока.Шапка["КурсИсходнойВалюты"]);
		СТРДанные.Вставить("ВалютаКалькуляцииСтрока", ТекСтрока.Шапка["ВалютаКалькуляцииСтрока"]);
		Возврат СТРДанные;
	ИначеЕсли ПараметрРазбора = "СтрокаТЧ" Тогда
		СтрВозврат = Новый Структура;
		Таблица = ТекСтрока.Владелец();
		Для Каждого Колонка Из Таблица.Колонки Цикл
			СтрВозврат.Вставить(Колонка.Имя, ТекСтрока[Колонка.Имя]);
		КонецЦикла;
		
		Возврат СтрВозврат;
	КонецЕсли;
КонецФункции

Процедура РазобратьДанныеПолученныеССервера(СТРДАнных, СтрокаТовара) Экспорт
	Для Каждого Реквизит Из СТРДАнных Цикл
		СтрокаТовара[Реквизит.Ключ] = Реквизит.Значение;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФункционалAudatex

// Функция осуществляет проверку доступности сервиса заданий
//
Функция аудПроверкаПроксиЗаданий()
	Результат = "";
	Если ТипЗнч(ПроксиЗаданий) <> Тип("WSПрокси") Тогда
		Логин = ПользовательПрокси;
		Пароль = ПарольПрокси;
		SSL = Новый ЗащищенноеСоединениеOpenSSL();
		
		// Создание определения веб-сервиса из wsdl-описания
		Попытка
			ОпределениеСервисаДел = Новый WSОпределения(СервисЗаданий, Логин, Пароль, , 300, SSL);
		Исключение
			ТТТ = ИнформацияОбОшибке();
			// Попытка соединения через http
			СервисЗаданий = СтрЗаменить(СервисЗаданий, "https://", "http://");
			Попытка
				ОпределениеСервисаДел = Новый WSОпределения(СервисЗаданий, Логин, Пароль, , 300, SSL);
			Исключение
				ТТТ = ИнформацияОбОшибке();
				Результат = НСтр("ru = 'Не удалось соединиться с " + СерверОснование + ".
				|Описание ошибки: " + ИнформацияОбОшибке().Описание + "
				|Убедитесь, что есть доступ к интернет /
				|был корректно введен пользователь и пароль /
				|на компьютере открыт http-порт 80 (443).'");
				Возврат Результат;
			КонецПопытки;
		КонецПопытки;
		
		// Создание прокси для обращения к веб-сервису и получение фабрики XDTO
		Попытка
			ПроксиЗаданий = Новый WSПрокси(ОпределениеСервисаДел, "http://serviceinterface_v1.b2b.audatex.com",
									"TaskService", "TaskServicePort", , 300, SSL);
		Исключение
			Результат = "Описание ошибки: " + ИнформацияОбОшибке().Описание;
		КонецПопытки;
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Функция формирует параметры запроса для AudaPad
//
Функция аудЗаполнитьПараметрыЗапроса(СтруктураПараметров)
	                           
	ТипПараметраЗапроса	= ПроксиЗаданий.ФабрикаXDTO.Тип("http://serviceinterface_v1.b2b.audatex.com", "B2BRequest");
	ПараметрыЗапроса	= ПроксиЗаданий.ФабрикаXDTO.Создать(ТипПараметраЗапроса);
		
	Для Каждого ТекСтрока Из СтруктураПараметров Цикл
		ТипПараметра	= ПроксиЗаданий.ФабрикаXDTO.Тип("http://serviceinterface_v1.b2b.audatex.com", "B2BParameter");
		Параметр		= ПроксиЗаданий.ФабрикаXDTO.Создать(ТипПараметра);
		Параметр.name	= ТекСтрока.Ключ;
		Параметр.value	= ТекСтрока.Значение;
		
		ПараметрыЗапроса.parameter.add(Параметр);
	КонецЦикла;
	
	Возврат ПараметрыЗапроса;
КонецФункции

// Функция создает новое задание для AudaPad
//
Функция аудСоздатьЗадание(СодержаниеPayload, ИдентификаторДела, ИдентификаторЗадания, ЗаказНаряд) Экспорт
	Результат	= аудПроверкаПроксиЗаданий();
	Если НЕ ПустаяСтрока(Результат) Тогда Возврат Результат; КонецЕсли;
	
	// Воспользуемся методом createTask
	ФабрикаЗаданий	= ПроксиЗаданий.ФабрикаXDTO;
	
	СтруктураПараметров	= Новый Структура();
	СтруктураПараметров.Вставить("loginId",			ПользовательАХ);
	СтруктураПараметров.Вставить("password",		ПарольАХ);
	СтруктураПараметров.Вставить("markForDownload",	"true");
	
	ПараметрыЗапроса	= аудЗаполнитьПараметрыЗапроса(СтруктураПараметров);
	
	Если ЗначениеЗаполнено(СодержаниеPayload) Тогда
		ПараметрыЗапроса.payload	= СодержаниеPayload;
	КонецЕсли;
	
	// Обращение к методу сервиса
	ТипОтвета	= ФабрикаЗаданий.Тип("http://serviceinterface_v1.b2b.audatex.com", "B2BResponse");
	Ответ		= ФабрикаЗаданий.Создать(ТипОтвета);	
	Попытка
		Ответ	= ПроксиЗаданий.createTask(ПараметрыЗапроса);
	Исключение
		Результат	= "Описание ошибки: "+ ИнформацияОбОшибке().Описание;
		Возврат Результат;
	КонецПопытки;
	
	КодВозврата	= Ответ.returnCode;	
	Результат	= ?(КодВозврата = 0, "", "Ошибка при создании нового дела АХ.");
	Если Ответ.message <> Неопределено  Тогда
		Для Каждого ТекСтрока Из Ответ.message Цикл
			ИдентификаторДела		= ТекСтрока.caseId;
			ИдентификаторЗадания	= ТекСтрока.taskId;
			Результат	= ТекСтрока.text;
			
			// Все прошло успешно
			Если Результат = "Operation terminated successfully" Тогда
				Результат	= "";
			// Перевод сообщения в доступный вид
			ИначеЕсли СтрНайти(Результат, "Claim Number Duplicated") Тогда
				Результат	= "Дело с номером " + ЗаказНаряд.Номер + " уже существует.
				|Выберите другой заказ-наряд для создания нового дела АХ";
			КонецЕсли;
			
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Функция осуществляет попытку обращения к сервису дел AudaPad Web
//
Функция аудПроверитьСвязь() Экспорт
	Результат	= аудПроверкаПроксиЗаданий();
	Если НЕ ПустаяСтрока(Результат) Тогда 
		Возврат Результат; 
	КонецЕсли;
	
	// Воспользуемся методом ping	
	ФабрикаЗаданий	= ПроксиЗаданий.ФабрикаXDTO;
	
	СтруктураПараметров	= Новый Структура();
	СтруктураПараметров.Вставить("loginId",		ПользовательАХ);
	СтруктураПараметров.Вставить("password",	ПарольАХ);
	
	ПараметрыЗапроса	= аудЗаполнитьПараметрыЗапроса(СтруктураПараметров);	
	
	// Обращение к методу сервиса
	ТипОтвета	= ФабрикаЗаданий.Тип("http://serviceinterface_v1.b2b.audatex.com", "B2BResponse");
	Ответ		= ФабрикаЗаданий.Создать(ТипОтвета);	
	Попытка
		Ответ	= ПроксиЗаданий.ping(ПараметрыЗапроса);
	Исключение
		Результат	= "Описание ошибки: " + ИнформацияОбОшибке().Описание;
		Возврат Результат;
	КонецПопытки;
	
	КодВозврата	= Ответ.returnCode;
	
	Результат	= "";
	Если КодВозврата <> 0  Тогда
		Результат	= "Ошибка соединения с сервером AudaPad";
		Если Ответ.message <> Неопределено  Тогда
			Для Каждого ТекСтрока Из Ответ.message Цикл
				Результат	= ТекСтрока.text;
				Прервать;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Процедура Обновления сервисов
//
Функция аудПолучитьСписокЗаданий(ДатаНачала, ДатаОкончания, СтатусДел, ТаблицаЗаданий) Экспорт
	Результат	= аудПроверкаПроксиЗаданий();
	Если НЕ ПустаяСтрока(Результат) Тогда 
		Возврат Результат; 
	КонецЕсли;
	
	// Воспользуемся методом getTaskList
	ФабрикаЗаданий	= ПроксиЗаданий.ФабрикаXDTO;
	
	СтруктураПараметров	= Новый Структура();
	СтруктураПараметров.Вставить("loginId",			ПользовательАХ);
	СтруктураПараметров.Вставить("password",		ПарольАХ);
	СтруктураПараметров.Вставить("fromDate",		Формат(ДатаНачала, "ДФ=""гггг-ММ-дд"""));
	СтруктураПараметров.Вставить("toDate",			Формат(ДатаОкончания, "ДФ=""гггг-ММ-дд"""));
	СтруктураПараметров.Вставить("box",				СтатусДел);
	
	ПоляДляВозврата	= "TaskId,CaseId,ClaimNumber,PlateNumber,Creator,TaskStatus,ManufacturerName,ModelName,VehicleOwnerName,VehicleOwnerFirstName,VehicleOwnerLastName,CreationDate,PolicyNumber,LastEditedDateTime,DisplayName,TaskProgress,PolicyHolderLastName,ClaimantLastName,VIN";
	СтруктураПараметров.Вставить("fieldsToReturn",	ПоляДляВозврата);
	
	ПараметрыЗапроса	= аудЗаполнитьПараметрыЗапроса(СтруктураПараметров);
	
	// Обращение к методу сервиса
	ТипОтвета	= ФабрикаЗаданий.Тип("http://serviceinterface_v1.b2b.audatex.com", "B2BResponse");
	Ответ		= ФабрикаЗаданий.Создать(ТипОтвета);	
	Попытка
		Ответ	= ПроксиЗаданий.getTaskList(ПараметрыЗапроса);
	Исключение
		Результат	= "Описание ошибки: " + ИнформацияОбОшибке().Описание;
		Возврат Результат;
	КонецПопытки;
	
	КодВозврата	= Ответ.returnCode;	
	Результат	= ?(КодВозврата = 0, "", "Ошибка при создании нового дела АХ.");
	Если Ответ.message<>Неопределено  Тогда
		Для Каждого ТекСтрока Из Ответ.message Цикл
			Результат								= ТекСтрока.text;
			// Если все успешно, то ничего сообщать не надо
			Если Результат = "Operation terminated successfully" Тогда
				Результат	= "";
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
		
	СтрокаВозврата	= Ответ.payload;
	ТаблицаЗаданий.Очистить();
	ТаблицаЗаданий = ОбменСAudaPadWebЗащищенныеФункцииСервер.DOMРазборСпискаXML(СтрокаВозврата, ТаблицаЗаданий);
	
	Возврат Результат;	
КонецФункции

// Процедура Обновления сервисов
//
Функция аудПолучитьСписокЗаданийПоИдДела(ИдДела, ТаблицаЗаданий) Экспорт
	Результат	= аудПроверкаПроксиЗаданий();
	Если НЕ ПустаяСтрока(Результат) Тогда 
		Возврат Результат; 
	КонецЕсли;
	
	// Воспользуемся методом getTaskList
	ФабрикаЗаданий	= ПроксиЗаданий.ФабрикаXDTO;
	
	СтруктураПараметров	= Новый Структура();
	СтруктураПараметров.Вставить("loginId",			ПользовательАХ);
	СтруктураПараметров.Вставить("password",		ПарольАХ);
	
	СтруктураПараметров.Вставить("filterOnField",	"CaseId");
	СтруктураПараметров.Вставить("filterValue",		ИдДела);	
	
	ПоляДляВозврата	= "TaskId,CaseId,ClaimNumber,PlateNumber,Creator,TaskStatus,ManufacturerName,ModelName,VehicleOwnerName,VehicleOwnerFirstName,VehicleOwnerLastName,CreationDate,PolicyNumber,LastEditedDateTime,DisplayName,TaskProgress,PolicyHolderLastName,ClaimantLastName,VIN";
	СтруктураПараметров.Вставить("fieldsToReturn",	ПоляДляВозврата);
		
	ПараметрыЗапроса	= аудЗаполнитьПараметрыЗапроса(СтруктураПараметров);
	
	// Обращение к методу сервиса
	ТипОтвета	= ФабрикаЗаданий.Тип("http://serviceinterface_v1.b2b.audatex.com", "B2BResponse");
	Ответ		= ФабрикаЗаданий.Создать(ТипОтвета);	
	Попытка
		Ответ	= ПроксиЗаданий.getTaskList(ПараметрыЗапроса);
	Исключение
		Результат	= "Описание ошибки: " + ИнформацияОбОшибке().Описание;
		Возврат Результат;
	КонецПопытки;
	
	КодВозврата	= Ответ.returnCode;	
	Результат	= ?(КодВозврата = 0, "", "Ошибка при создании нового дела АХ.");
	Если Ответ.message <> Неопределено  Тогда
		Для Каждого ТекСтрока Из Ответ.message Цикл
			Результат								= ТекСтрока.text;
			// Если все успешно, то ничего сообщать не надо
			Если Результат = "Operation terminated successfully" Тогда
				Результат	= "";
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
		
	СтрокаВозврата	= Ответ.payload;
	
	ОбменСAudaPadWebЗащищенныеФункцииСервер.DOMРазборСпискаXML(СтрокаВозврата, ТаблицаЗаданий);
	
	Возврат Результат;	
КонецФункции

// Функция осуществляет запрос данных задания
//
Функция аудПолучитьЗадание(Знач ИдентификаторЗадания, ЗаданиеТекст, ИдентификаторДела, СтрокаЗадания) Экспорт
	
	Результат	= аудПроверкаПроксиЗаданий();
	Если НЕ ПустаяСтрока(Результат) Тогда 
		Возврат Результат; 
	КонецЕсли;
		
	// Воспользуемся методом getTask	
	ФабрикаЗаданий	= ПроксиЗаданий.ФабрикаXDTO;
	                                         
	СтруктураПараметров	= Новый Структура();
	СтруктураПараметров.Вставить("loginId",			ПользовательАХ);
	СтруктураПараметров.Вставить("password",		ПарольАХ);
	СтруктураПараметров.Вставить("taskId",			ИдентификаторЗадания);
	ПараметрыЗапроса	= аудЗаполнитьПараметрыЗапроса(СтруктураПараметров);
	
	// Обращение к методу сервиса
	ТипОтвета	= ФабрикаЗаданий.Тип("http://serviceinterface_v1.b2b.audatex.com", "B2BResponse");
	Ответ		= ФабрикаЗаданий.Создать(ТипОтвета);	
	Попытка
		Ответ	= ПроксиЗаданий.getTask(ПараметрыЗапроса);
	Исключение
		Результат	= "Описание ошибки: " + ИнформацияОбОшибке().Описание;
		Возврат Результат;
	КонецПопытки;
	
	КодВозврата	= Ответ.returnCode;	
	Результат	= ?(КодВозврата = 0, "", "Ошибка при создании нового дела АХ.");
	Если Ответ.message <> Неопределено  Тогда
		Для Каждого ТекСтрока Из Ответ.message Цикл
			Результат								= ТекСтрока.text;
			// Если все успешно, то ничего сообщать не надо
			Если Результат = "Operation terminated successfully" Тогда
				Результат	= "";
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
		
	СтрокаВозврата	= Ответ.payload;
	ЗаданиеТекст	= СтрокаВозврата;	
	РазобратьСписокКалькуляций(ИдентификаторДела, СтрокаВозврата, СтрокаЗадания);
	
	Возврат Результат;
КонецФункции

// Функция осуществляет закрытие задание по его идентификатору
//
Функция аудЗакрытьЗадание(Знач ИдентификаторЗадания) Экспорт
	Результат	= аудПроверкаПроксиЗаданий();
	Если НЕ ПустаяСтрока(Результат) Тогда 
		Возврат Результат; 
	КонецЕсли;
	
	// Воспользуемся методом getTask	
	ФабрикаЗаданий	= ПроксиЗаданий.ФабрикаXDTO;
	
	СтруктураПараметров	= Новый Структура();
	СтруктураПараметров.Вставить("loginId",			ПользовательАХ);
	СтруктураПараметров.Вставить("password",		ПарольАХ);
	СтруктураПараметров.Вставить("taskId",			ИдентификаторЗадания);
	ПараметрыЗапроса	= аудЗаполнитьПараметрыЗапроса(СтруктураПараметров);
	
	// Обращение к методу сервиса
	ТипОтвета	= ФабрикаЗаданий.Тип("http://serviceinterface_v1.b2b.audatex.com", "B2BResponse");
	Ответ		= ФабрикаЗаданий.Создать(ТипОтвета);	
	Попытка
		Ответ	= ПроксиЗаданий.closeTask(ПараметрыЗапроса);
	Исключение
		Возврат Результат;
	КонецПопытки;
	
	КодВозврата	= Ответ.returnCode;	
	Результат	= ?(КодВозврата = 0, "", "Ошибка при закрытии заадания АХ.");
	Если Ответ.message <> Неопределено  Тогда
		Для Каждого ТекСтрока Из Ответ.message Цикл
			Результат	= ТекСтрока.text;
			// Если все успешно, то ничего сообщать не надо
			Если Результат = "Operation terminated successfully" Тогда
				Результат	= "";
			ИначеЕсли Результат = "The current member has no permission to close the task" Тогда
				Результат	= "У текущего пользователя Audatex нет разрешения на закрытие задания";
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции	

// Функция осуществляет попытку обращения к сервису дел AudaPad Web
//
Функция аудПереназначитьДело(ПолучательДела, ИдЗадания) Экспорт
	Результат	= аудПроверкаПроксиЗаданий();
	Если НЕ ПустаяСтрока(Результат) Тогда 
		Возврат Результат; 
	КонецЕсли;
	
	// Воспользуемся методом ping	
	ФабрикаЗаданий	= ПроксиЗаданий.ФабрикаXDTO;
	
	СтруктураПараметров	= Новый Структура();
	СтруктураПараметров.Вставить("loginId",			ПользовательАХ);
	СтруктураПараметров.Вставить("password",		ПарольАХ);		
	СтруктураПараметров.Вставить("transferFrom",	"Login:"+ПользовательАХ);
	СтруктураПараметров.Вставить("transferTo",		"Login:"+ПолучательДела);
	СтруктураПараметров.Вставить("taskId",			ИдЗадания);
	СтруктураПараметров.Вставить("comment",			"Task transfer service");
	
	ПараметрыЗапроса	= аудЗаполнитьПараметрыЗапроса(СтруктураПараметров);	
	
	// Обращение к методу сервиса
	ТипОтвета	= ФабрикаЗаданий.Тип("http://serviceinterface_v1.b2b.audatex.com", "B2BResponse");
	Ответ		= ФабрикаЗаданий.Создать(ТипОтвета);	
	Попытка
		Ответ	= ПроксиЗаданий.transferTask(ПараметрыЗапроса);
	Исключение
		Возврат Результат;
	КонецПопытки;
	
	КодВозврата	= Ответ.returnCode;
	
	Результат	= "";
	Если КодВозврата <> 0  Тогда
		Результат	= "Ошибка соединения с сервером AudaPad";
		Если Ответ.message <> Неопределено  Тогда
			Для Каждого ТекСтрока Из Ответ.message Цикл
				Результат	= ТекСтрока.text;
				Прервать;
			КонецЦикла;
		КонецЕсли;
		Если Результат = "The requested member is not found" Тогда
			Результат	= "Указанный получатель не найден в системе Audatex";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Функция осуществляет прикрепление файла к заданию
//
Функция аудПрикрепитьФайл(ХМЛПрикрепления, Знач ИдентификаторЗадания) Экспорт 
	
	Результат	= "";
	Если ТипЗнч(ПроксиПрикреплений) <> Тип("WSПрокси") Тогда
		
		Логин = ПользовательПрокси;
		Пароль = ПарольПрокси;		
		SSL = Новый ЗащищенноеСоединениеOpenSSL();
		
		// Создание определения веб-сервиса из wsdl-описания
		Попытка                                                         
			ОпределениеСервисаПрикреплений	= Новый WSОпределения(СервисПрикреплений, Логин, Пароль, , 300, SSL);
		Исключение
			// Попытка соединения через http
			СервисПрикреплений	= СтрЗаменить(СервисПрикреплений,"https://", "http://");
			Попытка
				ОпределениеСервисаПрикреплений	= Новый WSОпределения(СервисПрикреплений, Логин, Пароль, , 300, SSL);
			Исключение
				Результат = "Не удалось соединиться с " + СерверОснование + ".
				|Описание ошибки: " + ИнформацияОбОшибке().Описание + "
				|Убедитесь, что есть доступ к интернет /
				|был корректно введен пользователь и пароль /
				|на компьютере открыт http-порт 80 (443).";
				Возврат Результат;
			КонецПопытки;
		КонецПопытки;
		
		// Создание прокси для обращения к веб-сервису и получение фабрики XDTO
		Попытка
			ПроксиПрикреплений = Новый WSПрокси(ОпределениеСервисаПрикреплений,
									"http://serviceinterface_v1.b2b.audatex.com", "AttachmentService", "AttachmentServicePort", , 300, SSL);
		Исключение
			Результат = "Описание ошибки: " + ИнформацияОбОшибке().Описание;
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Результат) Тогда 
		Возврат Результат; 
	КонецЕсли;
	
	// Воспользуемся методом ping	
	ФабрикаПрикреплений	= ПроксиПрикреплений.ФабрикаXDTO;
	
	СтруктураПараметров	= Новый Структура();
	СтруктураПараметров.Вставить("loginId",			ПользовательАХ);
	СтруктураПараметров.Вставить("password",		ПарольАХ);
	СтруктураПараметров.Вставить("taskId",			ИдентификаторЗадания);
	
	ТипПараметраЗапроса	= ПроксиПрикреплений.ФабрикаXDTO.Тип("http://serviceinterface_v1.b2b.audatex.com", "B2BRequest");
	ПараметрыЗапроса	= ПроксиПрикреплений.ФабрикаXDTO.Создать(ТипПараметраЗапроса);
		
	Для Каждого ТекСтрока Из СтруктураПараметров Цикл
		ТипПараметра	= ПроксиПрикреплений.ФабрикаXDTO.Тип("http://serviceinterface_v1.b2b.audatex.com", "B2BParameter");
		Параметр		= ПроксиПрикреплений.ФабрикаXDTO.Создать(ТипПараметра);
		Параметр.name	= ТекСтрока.Ключ;
		Параметр.value	= ТекСтрока.Значение;
		
		ПараметрыЗапроса.parameter.add(Параметр);
	КонецЦикла;	
	
	ПараметрыЗапроса.payload	= ХМЛПрикрепления;
	
	// Обращение к методу сервиса
	ТипОтвета	= ФабрикаПрикреплений.Тип("http://serviceinterface_v1.b2b.audatex.com", "B2BResponse");
	Ответ		= ФабрикаПрикреплений.Создать(ТипОтвета);	
	Попытка
		Ответ	= ПроксиПрикреплений.addAttachmentsToTask(ПараметрыЗапроса);
	Исключение
		Результат	= "Описание ошибки: " + ИнформацияОбОшибке().Описание;
		Возврат Результат;
	КонецПопытки;
	
	КодВозврата	= Ответ.returnCode;
	
	Результат	= "";
	Если КодВозврата <> 0  Тогда
		Результат	= "Ошибка соединения с сервером AudaPad";
		Если Ответ.message <> Неопределено  Тогда
			Для Каждого ТекСтрока Из Ответ.message Цикл
				Результат	= ТекСтрока.text;
				Прервать;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область РаботаСXML

// Разбор структуры для получения калькуляции
//
Функция РазобратьСписокКалькуляций(Знач ИдЗадания, Знач СтрокаВозврата, СтрокаЗадания) Экспорт
		
	КэшКалькуляций.Очистить();
	ЗаписьХМЛ	= Новый ЧтениеXML();
	
	Попытка
		ЗаписьХМЛ.УстановитьСтроку(СтрокаВозврата);
	Исключение Возврат Неопределено; КонецПопытки;
	
	ПоследовательностьЭлементов = "";
	
	Пока Истина Цикл	
		ОчереднойУзелПрочитан = Ложь;	
		Попытка
			ОчереднойУзелПрочитан = ЗаписьХМЛ.Прочитать();
		Исключение
			Прервать;
		КонецПопытки;	
		
		Если НЕ ОчереднойУзелПрочитан Тогда 
			Прервать; 
		КонецЕсли;	
		
		ТипУзла	= ЗаписьХМЛ.ТипУзла;
		ИмяУзла	= ЗаписьХМЛ.Имя;
		
		Если (ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда		
			ПоследовательностьЭлементов	= ДобавитьЭлементКПоследовательности(ПоследовательностьЭлементов, ИмяУзла);
			Успешно						= ОбработатьНачалоЭлемента(ЗаписьХМЛ, ПоследовательностьЭлементов, СтрокаЗадания);
			Если НЕ Успешно Тогда
				Прервать;
			КонецЕсли;			
		ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ПоследовательностьЭлементов = УдалитьПоследнийЭлементИзПоследовательности(ПоследовательностьЭлементов);		
		ИначеЕсли ТипУзла = ТипУзлаXML.Текст Тогда			
			ЗначениеЭлемента = ЗаписьХМЛ.Значение;  
			Успешно = ОбработатьЗначениеЭлемента(ПоследовательностьЭлементов, ЗначениеЭлемента, СтрокаЗадания);
			Если НЕ Успешно Тогда
				Прервать;
			КонецЕсли;			
		КонецЕсли;		
	КонецЦикла;	
	ЗаписьХМЛ.Закрыть();	
	
	Возврат КэшКалькуляций;
	
КонецФункции

// Функция формирует путь текущего узла ХМЛ
//
Функция ДобавитьЭлементКПоследовательности(Знач ПоследовательностьЭлементов, Знач ИмяУзла)
			
	Если НЕ ПоследовательностьЭлементов = "" Тогда
		ПоследовательностьЭлементов = ПоследовательностьЭлементов + ".";	
	КонецЕсли;	
	ПоследовательностьЭлементов = ПоследовательностьЭлементов + ИмяУзла;	
	
	Возврат ПоследовательностьЭлементов;

КонецФункции

// Функция убирает последнюю ветку в структуре пути узла
//
Функция УдалитьПоследнийЭлементИзПоследовательности(Знач ПоследовательностьЭлементов)
	
	ПромСтрока 			= СтрЗаменить(ПоследовательностьЭлементов, ".", Символы.ПС);
	КоличествоЭлементов = СтрЧислоСтрок(ПромСтрока);
	
	ПоследовательностьЭлементов	= "";
	Если КоличествоЭлементов > 0 Тогда
		КоличествоЭлементов = КоличествоЭлементов - 1;
		Для Счетчик = 1 По КоличествоЭлементов Цикл
			ПоследовательностьЭлементов	= ПоследовательностьЭлементов + "." + СтрПолучитьСтроку(ПромСтрока, Счетчик);
		КонецЦикла;	
		ПоследовательностьЭлементов = Прав(ПоследовательностьЭлементов, СтрДлина(ПоследовательностьЭлементов) - 1);
	КонецЕсли;
	
	Возврат ПоследовательностьЭлементов;
КонецФункции

// Функция обрабатывает начало узла ХМЛ
//
Функция ОбработатьНачалоЭлемента(ЗаписьХМЛ, Знач ИмяЭлемента, СтрокаЗадания)
	
	Успешно		= Истина;
	КорневойПуть = "Task.CalculationList.CLASSCalculation.CLASSResult.CLASSXml";
	
	// Текущая строка шапки
	ВсегоКалькуляций	= КэшКалькуляций.Количество();
	Если ВсегоКалькуляций > 0 Тогда
		ТекСтрока	= КэшКалькуляций[ВсегоКалькуляций - 1];
	Иначе
		ТекСтрока	= Неопределено;
	КонецЕсли;
	
	// Текущая строка товаров
	Если ТекСтрока <> Неопределено И ТипЗнч(ТекСтрока.Товары) = Тип("ТаблицаЗначений")
		И ТекСтрока.Товары.Количество() > 0 Тогда
		ВсегоТоваров	= ТекСтрока.Товары.Количество();
		СтрокаТовара	= ТекСтрока.Товары[ВсегоТоваров - 1];
	Иначе
		СтрокаТовара	= Неопределено;
	КонецЕсли;
	
	// Текущая строка работ
	Если ТекСтрока <> Неопределено И ТипЗнч(ТекСтрока.Работы) = Тип("ТаблицаЗначений") И
		ТекСтрока.Работы.Количество() > 0 Тогда
		ВсегоРабот		= ТекСтрока.Работы.Количество();
		СтрокаРаботы	= ТекСтрока.Работы[ВсегоРабот - 1];
	Иначе
		СтрокаРаботы	= Неопределено;
	КонецЕсли;
	
	// Текущая строка параметров окраски
	Если ТекСтрока <> Неопределено И ТипЗнч(ТекСтрока.ПараметрыОкраски) = Тип("ТаблицаЗначений") 
		И ТекСтрока.ПараметрыОкраски.Количество() > 0 Тогда
		ВсегоПараметровОкраски	= ТекСтрока.ПараметрыОкраски.Количество();
		СтрокаПараметровОкраски	= ТекСтрока.ПараметрыОкраски[ВсегоПараметровОкраски - 1];
	Иначе
		СтрокаПараметровОкраски	= Неопределено;
	КонецЕсли;	
	
	Если ТекСтрока <> Неопределено И ТипЗнч(ТекСтрока.ДопКоды) = Тип("ТаблицаЗначений") 
		И ТекСтрока.ДопКоды.Количество() > 0 Тогда
		ВсегоДопКодов = ТекСтрока.ДопКоды.Количество();
		СтрокаДопКодов = ТекСтрока.ДопКоды[ВсегоДопКодов - 1];
	Иначе
		СтрокаДопКодов = Неопределено;
	КонецЕсли;
	
	// При начале разбора xml очистим структуру автомобиля
	Если ИмяЭлемента = "Task" Тогда
		ОбщаяСтруктура.Очистить();
		
	// Необходимо заполнить структуру автомобиля	
	ИначеЕсли ИмяЭлемента = КорневойПуть Тогда		
		
		// Заполним структуру автомобиля в шапке
		Для Каждого СтрокаСтруктуры Из ОбщаяСтруктура Цикл
			ТекСтрока.Шапка.Вставить(СтрокаСтруктуры.Ключ, СтрокаСтруктуры.Значение);
		КонецЦикла;
		
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".GlobalData.CalcParam.TimeBase" Тогда
		Пока ЗаписьХМЛ.ПрочитатьАтрибут() Цикл
			Если ЗаписьХМЛ.Имя = "Val" Тогда
				ТекСтрока.Шапка.Вставить("РПВЧас", ПривестиЗначение(ЗаписьХМЛ.Значение, "Число"));
			ИначеЕсли ЗаписьХМЛ.Имя = "Unit" Тогда
				ТекСтрока.Шапка.Вставить("РПВЧас_Измерение", ПривестиЗначение(ЗаписьХМЛ.Значение, "Строка"));
			КонецЕсли;				
		КонецЦикла;
		
	// итоговая сумма
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.FinalCalc.GrandTotal.Parts" Тогда
		//ТекСтрока.Шапка.Вставить("Итого");
		Пока ЗаписьХМЛ.ПрочитатьАтрибут() Цикл
			Если ЗаписьХМЛ.Имя = "Cur" Тогда
				ТекСтрока.Шапка.Вставить("ВалютаИтого", ПривестиЗначение(ЗаписьХМЛ.Значение, "Строка"));
			КонецЕсли;				
		КонецЦикла;
	// Наценка на детали                                                      
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.FinalCalc.FCPart.FCSundry.PCofParts.PCofPart.PC" Тогда
		Пока ЗаписьХМЛ.ПрочитатьАтрибут() Цикл
			Если ЗаписьХМЛ.Имя = "Val" Тогда				
				ТекСтрока.Шапка.Вставить("НаценкаНаДетали", ПривестиЗначение(ЗаписьХМЛ.Значение, "Число"));
			ИначеЕсли ЗаписьХМЛ.Имя = "Unit" Тогда
				ТекСтрока.Шапка.Вставить("НаценкаНаДетали_Измерение", ПривестиЗначение(ЗаписьХМЛ.Значение, "Строка"));
			КонецЕсли;				
		КонецЦикла;
		
	// Стоимость нормочаса кузовных работ 	
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.FinalCalc.FCLabor.LaborRates.LaborResults.Rate" Тогда
		Пока ЗаписьХМЛ.ПрочитатьАтрибут() Цикл
			Если ЗаписьХМЛ.Имя = "Cur" Тогда				
				ТекСтрока.Шапка.Вставить("НормочасРабот_Валюта", ПривестиЗначение(ЗаписьХМЛ.Значение, "СправочникСсылка.Валюты"));
			ИначеЕсли ЗаписьХМЛ.Имя = "Unit" Тогда
				ТекСтрока.Шапка.Вставить("НормочасРабот_Измерение", ПривестиЗначение(ЗаписьХМЛ.Значение, "Строка"));
			КонецЕсли;				
		КонецЦикла;
		
	// Стоимость нормочаса окрасочных работ
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.FinalCalc.FCPaint.LaborRates.LaborResults.Rate" Тогда
		Пока ЗаписьХМЛ.ПрочитатьАтрибут() Цикл
			Если ЗаписьХМЛ.Имя = "Cur" Тогда				
				ТекСтрока.Шапка.Вставить("НормочасОкраски_Валюта", ПривестиЗначение(ЗаписьХМЛ.Значение, "СправочникСсылка.Валюты"));
			ИначеЕсли ЗаписьХМЛ.Имя = "Unit" Тогда
				ТекСтрока.Шапка.Вставить("НормочасОкраски_Измерение", ПривестиЗначение(ЗаписьХМЛ.Значение, "Строка"));
			КонецЕсли;				
		КонецЦикла;
		
	// Курс исходной валюты                                                      
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".GlobalData.CalcParam.CurDtl.ExChgDtl.ExChgRate.Rate" Тогда
		Пока ЗаписьХМЛ.ПрочитатьАтрибут() Цикл
			Если ЗаписьХМЛ.Имя = "Val" Тогда
				ЗначениеВалюты	= ПривестиЗначение(ЗаписьХМЛ.Значение, "Число");
				Если ЗначениеВалюты = Неопределено ИЛИ ЗначениеВалюты="" Тогда
					ЗначениеВалюты	= 0;
				КонецЕсли;
				ТекСтрока.Шапка.Вставить("КурсИсходнойВалюты", ЗначениеВалюты);
			КонецЕсли;				
		КонецЦикла;		
		
	// Список товаров
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.SpareParts.PartDtls" Тогда
		Если ТипЗнч(ТекСтрока.Товары)<>Тип("ТаблицаЗначений")
			ИЛИ ТекСтрока.Товары.Количество()=0 Тогда
			ТекСтрока.Товары	= Новый ТаблицаЗначений();
			ТекСтрока.Товары.Колонки.Добавить("ТипРемонта");			
			ТекСтрока.Товары.Колонки.Добавить("КодДетали");
			ТекСтрока.Товары.Колонки.Добавить("НаименованиеДетали");
			ТекСтрока.Товары.Колонки.Добавить("НомерДетали");
			ТекСтрока.Товары.Колонки.Добавить("СтоимостьДетали");
			ТекСтрока.Товары.Колонки.Добавить("ЦенаРубли");
			ТекСтрока.Товары.Колонки.Добавить("ЦенаЕвро");
			ТекСтрока.Товары.Колонки.Добавить("Источник");
			ТекСтрока.Товары.Колонки.Добавить("КоличествоДеталей");
		КонецЕсли;
	// список доп кодов
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.CalcControl.ActivIDBlks" Тогда
		Если ТипЗнч(ТекСтрока.ДопКоды) <> Тип("ТаблицаЗначений") ИЛИ ТекСтрока.ДопКоды.Колонки.Количество() = 0 Тогда
			ТекСтрока.ДопКоды = Новый ТаблицаЗначений();
			ТекСтрока.ДопКоды.Колонки.Добавить("Код");
			ТекСтрока.ДопКоды.Колонки.Добавить("Ссылка");
			ТекСтрока.ДопКоды.Колонки.Добавить("Значение");
			ТекСтрока.ДопКоды.Колонки.Добавить("Источник");
			ТекСтрока.ДопКоды.Колонки.Добавить("Сумма");
			ТекСтрока.ДопКоды.Колонки.Добавить("СпособРаспределения");
		КонецЕсли;
		
	///////////////////////////////////////////////////////////////////////////////////////////
	//								PartDtl		
		
	// Количество деталей
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.SpareParts.PartDtls.PartDtl" Тогда
		ТекСтрока.Товары.Добавить();
		
	// Тип ремонтного воздействия
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.SpareParts.PartDtls.PartDtl.Qty" Тогда		
		Пока ЗаписьХМЛ.ПрочитатьАтрибут() Цикл
			Если ЗаписьХМЛ.Имя = "Val" Тогда				
				СтрокаТовара["КоличествоДеталей"]	= ПривестиЗначение(ЗаписьХМЛ.Значение, "Число");
			КонецЕсли;				
		КонецЦикла;	
		
	// Список работ
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor" Тогда
		Если ТипЗнч(ТекСтрока.Работы) <> Тип("ТаблицаЗначений")
			ИЛИ ТекСтрока.Работы.Количество()=0 Тогда
			ТекСтрока.Работы	= Новый ТаблицаЗначений();
			ТекСтрока.Работы.Колонки.Добавить("ТипРемонта");
			ТекСтрока.Работы.Колонки.Добавить("КодДетали");
			ТекСтрока.Работы.Колонки.Добавить("НомерРаботы");
			ТекСтрока.Работы.Колонки.Добавить("НаименованиеРаботы");
			ТекСтрока.Работы.Колонки.Добавить("НаименованиеДетали");
			ТекСтрока.Работы.Колонки.Добавить("СтоимостьРабот");
			ТекСтрока.Работы.Колонки.Добавить("СтоимостьРабот_Валюта");
			ТекСтрока.Работы.Колонки.Добавить("ЦенаРубли");
			ТекСтрока.Работы.Колонки.Добавить("ЦенаЕвро");
			ТекСтрока.Работы.Колонки.Добавить("КоличествоРП");
			ТекСтрока.Работы.Колонки.Добавить("КоличествоРП_Измерение");
			ТекСтрока.Работы.Колонки.Добавить("Время");
			ТекСтрока.Работы.Колонки.Добавить("Время_Измерение");
			ТекСтрока.Работы.Колонки.Добавить("Источник");
			ТекСтрока.Работы.Колонки.Добавить("ОписаниеРаботы");
		КонецЕсли;		
		
	///////////////////////////////////////////////////////////////////////////////////////////
	//								PartComposit	
		
	// Строка работы
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.PartComposits.PartComposit" Тогда	
		ТекСтрока.Работы.Добавить();
	
	// Валюта стоимости работы
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.PartComposits.PartComposit.Price" Тогда
		Пока ЗаписьХМЛ.ПрочитатьАтрибут() Цикл
			Если ЗаписьХМЛ.Имя = "Cur" Тогда				
				СтрокаРаботы["СтоимостьРабот_Валюта"]	= ПривестиЗначение(ЗаписьХМЛ.Значение, "СправочникСсылка.Валюты");
			КонецЕсли;				
		КонецЦикла;
		
	// Единица измерения количества рабочих позиций в работе
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.PartComposits.PartComposit.WuNo" Тогда	
		Пока ЗаписьХМЛ.ПрочитатьАтрибут() Цикл
			Если ЗаписьХМЛ.Имя = "Unit" Тогда
				СтрокаРаботы["КоличествоРП_Измерение"]	= ПривестиЗначение(ЗаписьХМЛ.Значение, "Строка");
			ИначеЕсли ЗаписьХМЛ.Имя = "Val" Тогда
				СтрокаРаботы["КоличествоРП"]	= ПривестиЗначение(ЗаписьХМЛ.Значение, "Число");
			КонецЕсли;				
		КонецЦикла;
		
	// Измерение времени работы
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.PartComposits.PartComposit.HrNo" Тогда	
		Пока ЗаписьХМЛ.ПрочитатьАтрибут() Цикл
			Если ЗаписьХМЛ.Имя = "Unit" Тогда
				СтрокаРаботы["Время_Измерение"]	= ПривестиЗначение(ЗаписьХМЛ.Значение, "Строка");
			ИначеЕсли ЗаписьХМЛ.Имя = "Val" Тогда
				СтрокаРаботы["Время"]	= ПривестиЗначение(ЗаписьХМЛ.Значение, "Число");
			КонецЕсли;				
		КонецЦикла;
		
	///////////////////////////////////////////////////////////////////////////////////////////
	//								NetLabor		
	
	// Строка ремонта
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.NetLabors.NetLabor" Тогда	
		ТекСтрока.Работы.Добавить();	
	
	// Измерение количество РП ремонта
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.NetLabors.NetLabor.WuNet" Тогда
		Пока ЗаписьХМЛ.ПрочитатьАтрибут() Цикл
			Если ЗаписьХМЛ.Имя = "Unit" Тогда
				СтрокаРаботы["КоличествоРП_Измерение"]	= ПривестиЗначение(ЗаписьХМЛ.Значение, "Строка");
			ИначеЕсли ЗаписьХМЛ.Имя = "Val" Тогда
				СтрокаРаботы["КоличествоРП"]		= ПривестиЗначение(ЗаписьХМЛ.Значение, "Число");
			КонецЕсли;				
		КонецЦикла;
		
	// Измерение времени ремонта
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.NetLabors.NetLabor.WuNetHrNo" Тогда	
		Пока ЗаписьХМЛ.ПрочитатьАтрибут() Цикл
			Если ЗаписьХМЛ.Имя = "Unit" Тогда
				СтрокаРаботы["Время_Измерение"]	= ПривестиЗначение(ЗаписьХМЛ.Значение, "Строка");
			ИначеЕсли ЗаписьХМЛ.Имя = "Val" Тогда
				СтрокаРаботы["Время"]		= ПривестиЗначение(ЗаписьХМЛ.Значение, "Число");
			КонецЕсли;				
		КонецЦикла;
		
	// Валюта стоимости работы
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.NetLabors.NetLabor.Price" Тогда
		Пока ЗаписьХМЛ.ПрочитатьАтрибут() Цикл
			Если ЗаписьХМЛ.Имя = "Cur" Тогда				
				СтрокаРаботы["СтоимостьРабот_Валюта"]	= ПривестиЗначение(ЗаписьХМЛ.Значение, "СправочникСсылка.Валюты");
			КонецЕсли;				
		КонецЦикла;	
		
	///////////////////////////////////////////////////////////////////////////////////////////
	//								VDtl	
		
	// Строка работы
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.VDtls.VDtl" ИЛИ
		ИмяЭлемента=КорневойПуть+".CalcData.Labor.IDtls.IDtl" ИЛИ
		ИмяЭлемента=КорневойПуть+".CalcData.Labor.PDtls.PDtl" ИЛИ
		ИмяЭлемента=КорневойПуть+".CalcData.Labor.UDtls.UDtl" ИЛИ
		ИмяЭлемента=КорневойПуть+".CalcData.Labor.HDtls.HDtl" ИЛИ 
		ИмяЭлемента=КорневойПуть+".CalcData.Labor.NDtls.NDtl" Тогда
		ТекСтрока.Работы.Добавить();
		
	// Измерение количество РП ремонта
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.VDtls.VDtl.WuNet" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.IDtls.IDtl.WuNet" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.PDtls.PDtl.WuNet" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.UDtls.UDtl.WuNet" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.HDtls.HDtl.WuNet" ИЛИ 
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.NDtls.NDtl.WuNet" Тогда
		Пока ЗаписьХМЛ.ПрочитатьАтрибут() Цикл
			Если ЗаписьХМЛ.Имя = "Unit" Тогда
				СтрокаРаботы["КоличествоРП_Измерение"]	= ПривестиЗначение(ЗаписьХМЛ.Значение, "Строка");
			ИначеЕсли ЗаписьХМЛ.Имя = "Val" Тогда
				СтрокаРаботы["КоличествоРП"]		= ПривестиЗначение(ЗаписьХМЛ.Значение, "Число");
			КонецЕсли;				
		КонецЦикла;
		
	// Измерение времени ремонта
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.VDtls.VDtl.WuNetHrNo" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.IDtls.IDtl.WuNetHrNo" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.PDtls.PDtl.WuNetHrNo" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.UDtls.UDtl.WuNetHrNo" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.HDtls.HDtl.WuNetHrNo" ИЛИ 
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.NDtls.NDtl.WuNetHrNo" Тогда	
		Пока ЗаписьХМЛ.ПрочитатьАтрибут() Цикл
			Если ЗаписьХМЛ.Имя = "Unit" Тогда
				СтрокаРаботы["Время_Измерение"]	= ПривестиЗначение(ЗаписьХМЛ.Значение, "Строка");
			ИначеЕсли ЗаписьХМЛ.Имя = "Val" Тогда
				СтрокаРаботы["Время"]		= ПривестиЗначение(ЗаписьХМЛ.Значение, "Число");
			КонецЕсли;				
		КонецЦикла;
		
	// Валюта стоимости работы
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.VDtls.VDtl.Price" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.IDtls.IDtl.Price" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.PDtls.PDtl.Price" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.UDtls.UDtl.Price" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.HDtls.HDtl.Price" ИЛИ 
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.NDtls.NDtl.Price" Тогда
		Пока ЗаписьХМЛ.ПрочитатьАтрибут() Цикл
			Если ЗаписьХМЛ.Имя = "Cur" Тогда				
				СтрокаРаботы["СтоимостьРабот_Валюта"]	= ПривестиЗначение(ЗаписьХМЛ.Значение, "СправочникСсылка.Валюты");
			КонецЕсли;				
		КонецЦикла;
		
	///////////////////////////////////////////////////////////////////////////////////////////
	//								PaintHeader		
		
	// Параметры окраски
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint" Тогда
		Если ТипЗнч(ТекСтрока.ПараметрыОкраски) <> Тип("ТаблицаЗначений")
			ИЛИ ТекСтрока.ПараметрыОкраски.Количество() = 0 Тогда
			ТекСтрока.ПараметрыОкраски	= Новый ТаблицаЗначений();
			ТекСтрока.ПараметрыОкраски.Колонки.Добавить("ТипОкраски");
			ТекСтрока.ПараметрыОкраски.Колонки.Добавить("КодТипаОкраски");
			ТекСтрока.ПараметрыОкраски.Колонки.Добавить("НаименованиеТипаОкраски");
			ТекСтрока.ПараметрыОкраски.Колонки.Добавить("ТипОкраскиСистема");
			ТекСтрока.ПараметрыОкраски.Колонки.Добавить("КоличествоРП");
		КонецЕсли;
		
	// Строка параметров окраски
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintHeader" Тогда
		ТекСтрока.ПараметрыОкраски.Добавить();	
		
	///////////////////////////////////////////////////////////////////////////////////////////
	//								PntPrep		
	
	// Строка подготовки к окраске
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintPreparations.PntPrep" Тогда	
		ТекСтрока.Работы.Добавить();
		
	// Количество РП подготовки к окраске
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintPreparations.PntPrep.WuNo" Тогда
		Пока ЗаписьХМЛ.ПрочитатьАтрибут() Цикл
			Если ЗаписьХМЛ.Имя = "Unit" Тогда
				СтрокаРаботы["КоличествоРП_Измерение"]	= ПривестиЗначение(ЗаписьХМЛ.Значение, "Строка");
			ИначеЕсли ЗаписьХМЛ.Имя = "Val" Тогда
				СтрокаРаботы["КоличествоРП"]		= ПривестиЗначение(ЗаписьХМЛ.Значение, "Число");
			КонецЕсли;				
		КонецЦикла;
		
	// Количество РП по подготовке к окраске пластиковых деталей
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintPreparations.PntPrep.PlasticWuNo" Тогда	
		Пока ЗаписьХМЛ.ПрочитатьАтрибут() Цикл
			Если ЗаписьХМЛ.Имя = "Unit" Тогда
				//СтрокаРаботы["Время_Измерение"]	=  ПривестиЗначение(ЗаписьХМЛ.Значение, "Строка");
			ИначеЕсли ЗаписьХМЛ.Имя = "Val" Тогда
				//СтрокаРаботы["Время"]		= ПривестиЗначение(ЗаписьХМЛ.Значение, "Число");
			КонецЕсли;				
		КонецЦикла;
		
	// Валюта стоимости работы
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintPreparations.PntPrep.Price" Тогда
		Пока ЗаписьХМЛ.ПрочитатьАтрибут() Цикл
			Если ЗаписьХМЛ.Имя = "Cur" Тогда				
				СтрокаРаботы["СтоимостьРабот_Валюта"]	= ПривестиЗначение(ЗаписьХМЛ.Значение, "СправочникСсылка.Валюты");
			КонецЕсли;				
		КонецЦикла;	
		
	///////////////////////////////////////////////////////////////////////////////////////////
	//								PaintDtl	
		
	// Строка окрасочных работ
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintPositions.PaintDtl" Тогда	
		ТекСтрока.Работы.Добавить();
		
	// Количество РП окрасочных работ
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintPositions.PaintDtl.WuNo" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintPositions.PaintDtl.WuNoFix"Тогда
		Пока ЗаписьХМЛ.ПрочитатьАтрибут() Цикл
			Если ЗаписьХМЛ.Имя = "Unit" Тогда
				СтрокаРаботы["КоличествоРП_Измерение"]	= ПривестиЗначение(ЗаписьХМЛ.Значение, "Строка");
			ИначеЕсли ЗаписьХМЛ.Имя = "Val" Тогда
				СтрокаРаботы["КоличествоРП"]		= ПривестиЗначение(ЗаписьХМЛ.Значение, "Число");
			КонецЕсли;				
		КонецЦикла;
		
	// Валюта стоимости окрасочных работ
	ИначеЕсли ИмяЭлемента =КорневойПуть +".CalcData.Paint.PaintPositions.PaintDtl.Lbr" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintPositions.PaintDtl.LbrFix" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintPositions.PaintDtl.AdjacentDeduGrpTot.Lbr" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintPositions.PaintDtl.AdjacentDeduGrpTot.LbrFix" Тогда
		Пока ЗаписьХМЛ.ПрочитатьАтрибут() Цикл
			Если ЗаписьХМЛ.Имя = "Cur" Тогда				
				СтрокаРаботы["СтоимостьРабот_Валюта"]	= ПривестиЗначение(ЗаписьХМЛ.Значение, "СправочникСсылка.Валюты");
			КонецЕсли;				
		КонецЦикла;
		
	///////////////////////////////////////////////////////////////////////////////////////////
	//								MfcPCChg	
		
	// Строка надбавки окрасочных работ
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.MfcPCChgs.MfcPCChg" Тогда	
		ТекСтрока.Работы.Добавить();
		
	// Количество РП строки надбавки окрасочных работ
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.MfcPCChgs.MfcPCChg.WuNo" Тогда
		Пока ЗаписьХМЛ.ПрочитатьАтрибут() Цикл
			Если ЗаписьХМЛ.Имя = "Unit" Тогда
				СтрокаРаботы["КоличествоРП_Измерение"]	= ПривестиЗначение(ЗаписьХМЛ.Значение, "Строка");
			ИначеЕсли ЗаписьХМЛ.Имя = "Val" Тогда
				СтрокаРаботы["КоличествоРП"]		= ПривестиЗначение(ЗаписьХМЛ.Значение, "Число");
			КонецЕсли;				
		КонецЦикла;
		
	// Валюта стоимости строки надбавки окрасочных работ
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.MfcPCChgs.MfcPCChg.Lbr" Тогда
		Пока ЗаписьХМЛ.ПрочитатьАтрибут() Цикл
			Если ЗаписьХМЛ.Имя = "Cur" Тогда				
				СтрокаРаботы["СтоимостьРабот_Валюта"]	= ПривестиЗначение(ЗаписьХМЛ.Значение, "СправочникСсылка.Валюты");
			КонецЕсли;				
		КонецЦикла;
		
	///////////////////////////////////////////////////////////////////////////////////////////
	//								ExtraItem/RiskDetail
	
	// Строка дополнительных воздействий
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.ExtraItems.ExtraItem"
		ИЛИ ИмяЭлемента = КорневойПуть + ".CalcData.RiskDetails.RiskDetail" Тогда	
		ТекСтрока.Работы.Добавить();	
	
		
	// Количество РП воздействия
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.ExtraItems.ExtraItem.WuNo"
		ИЛИ ИмяЭлемента = КорневойПуть + ".CalcData.RiskDetails.RiskDetail.WuNo" Тогда	
		Пока ЗаписьХМЛ.ПрочитатьАтрибут() Цикл
			Если ЗаписьХМЛ.Имя = "Unit" Тогда
				//СтрокаРаботы["Время_Измерение"]	= ПривестиЗначение(ЗаписьХМЛ.Значение, "Строка");
			ИначеЕсли ЗаписьХМЛ.Имя = "Val" Тогда
				//СтрокаРаботы["Время"]		= ПривестиЗначение(ЗаписьХМЛ.Значение, "Число");
			КонецЕсли;				
		КонецЦикла;		
		
	// Стоимость дополнительных воздействий
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.ExtraItems.ExtraItem.Amnt"
		ИЛИ ИмяЭлемента = КорневойПуть + ".CalcData.RiskDetails.RiskDetail.Amnt" Тогда
		Пока ЗаписьХМЛ.ПрочитатьАтрибут() Цикл
			Если ЗаписьХМЛ.Имя = "Cur" Тогда				
				СтрокаРаботы["СтоимостьРабот_Валюта"]	= ПривестиЗначение(ЗаписьХМЛ.Значение, "СправочникСсылка.Валюты");
			КонецЕсли;				
		КонецЦикла;
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.CalcControl.ActivIDBlks.IDBlkDtl" Тогда
		ТекСтрока.ДопКоды.Добавить();
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.CalcControl.ActivIDBlks.IDBlkDtl.Val" Тогда
		Пока ЗаписьХМЛ.ПрочитатьАтрибут() Цикл
			Если ЗаписьХМЛ.Имя = "Val" Тогда
				СтрокаДопКодов["Значение"] = ПривестиЗначение(ЗаписьХМЛ.Значение, "Число");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Успешно;	
КонецФункции

// Функция обрабатывает значение узла ХМЛ
//
Функция ОбработатьЗначениеЭлемента(Знач ИмяЭлемента, Знач ЗначениеЭлемента, СтрокаЗадания)
	
	Успешно 			 = Истина;
	КорневойПуть = "Task.CalculationList.CLASSCalculation.CLASSResult.CLASSXml";
	
	// Текущая строка шапки
	ВсегоКалькуляций	= КэшКалькуляций.Количество();
	Если ВсегоКалькуляций > 0 Тогда
		ТекСтрока	= КэшКалькуляций[ВсегоКалькуляций-1];
	Иначе
		ТекСтрока	= Неопределено;
	КонецЕсли;
	
	// Текущая строка товаров
	Если ТекСтрока <> Неопределено И ТипЗнч(ТекСтрока.Товары) = Тип("ТаблицаЗначений") 
		И ТекСтрока.Товары.Количество() > 0 Тогда
		ВсегоТоваров	= ТекСтрока.Товары.Количество();
		СтрокаТовара	= ТекСтрока.Товары[ВсегоТоваров - 1];
	Иначе
		СтрокаТовара	= Неопределено;
	КонецЕсли;
	
	// Текущая строка работ
	Если ТекСтрока<>Неопределено И ТипЗнч(ТекСтрока.Работы)=Тип("ТаблицаЗначений") И
		ТекСтрока.Работы.Количество()>0 Тогда
		ВсегоРабот		= ТекСтрока.Работы.Количество();
		СтрокаРаботы	= ТекСтрока.Работы[ВсегоРабот-1];
	Иначе
		СтрокаРаботы	= Неопределено;
	КонецЕсли;	
	
	// Текущая строка параметров окраски
	Если ТекСтрока <> Неопределено И ТипЗнч(ТекСтрока.ПараметрыОкраски) = Тип("ТаблицаЗначений") 
		И ТекСтрока.ПараметрыОкраски.Количество() > 0 Тогда
		ВсегоПараметровОкраски	= ТекСтрока.ПараметрыОкраски.Количество();
		СтрокаПараметровОкраски	= ТекСтрока.ПараметрыОкраски[ВсегоПараметровОкраски - 1];
	Иначе
		СтрокаПараметровОкраски	= Неопределено;
	КонецЕсли;	
	
	Если ТекСтрока <> Неопределено И ТипЗнч(ТекСтрока.ДопКоды) = Тип("ТаблицаЗначений") 
		И ТекСтрока.ДопКоды.Количество() > 0 Тогда
		ВсегоДопКодов = ТекСтрока.ДопКоды.Количество();
		СтрокаДопКодов = ТекСтрока.ДопКоды[ВсегоДопКодов - 1];
	Иначе
		СтрокаДопКодов = Неопределено;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////////////
	//								VehicleIdentification	
	
	// Идентификатор автомобиля
	Если ИмяЭлемента = "Task.BasicClaimData.Vehicle.VehicleIdentification.ItemId" Тогда
		ОбщаяСтруктура.Вставить("Автомобиль_Идентификатор", ПривестиЗначение(ЗначениеЭлемента, "Строка"));
				
	// VIN автомобиля
	ИначеЕсли ИмяЭлемента = "Task.BasicClaimData.Vehicle.VehicleIdentification.VIN" Тогда
		ОбщаяСтруктура.Вставить("Автомобиль_VIN", ПривестиЗначение(ЗначениеЭлемента, "Строка"));
		
	// Наименование производителя автомобиля
	ИначеЕсли ИмяЭлемента = "Task.BasicClaimData.Vehicle.VehicleIdentification.ManufacturerName" Тогда
		ОбщаяСтруктура.Вставить("Автомобиль_Производитель", ПривестиЗначение(ЗначениеЭлемента, "Строка"));
		
	// Модель автомобиля
	ИначеЕсли ИмяЭлемента = "Task.BasicClaimData.Vehicle.VehicleIdentification.ModelName" Тогда
		ОбщаяСтруктура.Вставить("Автомобиль_Модель", ПривестиЗначение(ЗначениеЭлемента, "Строка"));
		
	// Наименование подмодели автомобиля
	ИначеЕсли ИмяЭлемента = "Task.BasicClaimData.Vehicle.VehicleIdentification.SubModelName" Тогда
		ОбщаяСтруктура.Вставить("Автомобиль_Подмодель", ПривестиЗначение(ЗначениеЭлемента, "Строка"));
		
	// Гос. номер
	ИначеЕсли ИмяЭлемента = "Task.BasicClaimData.Vehicle.VehicleAdmin.PlateNumber" Тогда
		ОбщаяСтруктура.Вставить("Автомобиль_Номер", ПривестиЗначение(ЗначениеЭлемента, "Строка"));
		
	// Дата выпуска
	ИначеЕсли ИмяЭлемента = "Task.BasicClaimData.Vehicle.VehicleAdmin.BuildDate" Тогда
		ОбщаяСтруктура.Вставить("Автомобиль_ДатаВыпуска", ПривестиЗначение(ЗначениеЭлемента, "Дата"));
		
	// Имя владельца
	ИначеЕсли ИмяЭлемента = "Task.BasicClaimData.Vehicle.VehicleAdmin.VehicleOwner.FirstName" Тогда
		ОбщаяСтруктура.Вставить("Автомобиль_ИмяВладельца", ПривестиЗначение(ЗначениеЭлемента, "Строка"));
		
	// Фамилия владельца
	ИначеЕсли ИмяЭлемента = "Task.BasicClaimData.Vehicle.VehicleAdmin.VehicleOwner.LastName" Тогда
		ОбщаяСтруктура.Вставить("Автомобиль_ФамилияВладельца", ПривестиЗначение(ЗначениеЭлемента, "Строка"));
					
	// Пробег
	ИначеЕсли ИмяЭлемента = "Task.BasicClaimData.Vehicle.VehicleEngineering.Mileage" Тогда
		ОбщаяСтруктура.Вставить("Автомобиль_Пробег", ПривестиЗначение(ЗначениеЭлемента, "Число"));	
		
	// Измерение пробега автомобиля
	ИначеЕсли ИмяЭлемента = "Task.BasicClaimData.Vehicle.VehicleEngineering.MileageUnit" Тогда
		ОбщаяСтруктура.Вставить("Автомобиль_Пробег_Измерение", ПривестиЗначение(ЗначениеЭлемента, "Строка"));
		
	// Идентификатор калькуляции
	ИначеЕсли ИмяЭлемента = "Task.CalculationList.CLASSCalculation.CalculationId" Тогда
		ТекСтрока	= КэшКалькуляций.Добавить();
		
		Если ТипЗнч(ТекСтрока.Шапка)<>Тип("Соответствие") Тогда
			ТекСтрока.Шапка	= Новый Соответствие();
		КонецЕсли;
		
		ТекСтрока.ИдКалькуляции	= ЗначениеЭлемента;
		
		Если СтрокаЗадания<>Неопределено Тогда
			Фамилия	= ?(СтрокаЗадания.ФамилияВладельца=Неопределено, "", СокрЛП(СтрокаЗадания.ФамилияВладельца));
			Имя		= ?(СтрокаЗадания.ИмяВладельца=Неопределено, "", СокрЛП(СтрокаЗадания.ИмяВладельца));
			
			Если НЕ ЗначениеЗаполнено(Фамилия) И ОбщаяСтруктура.Свойство("Автомобиль_ФамилияВладельца") 
				И ЗначениеЗаполнено(ОбщаяСтруктура["Автомобиль_ФамилияВладельца"]) Тогда
				Фамилия	= ОбщаяСтруктура["Автомобиль_ФамилияВладельца"];	
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Имя) И ОбщаяСтруктура.Свойство("Автомобиль_ИмяВладельца") 
				И ЗначениеЗаполнено(ОбщаяСтруктура["Автомобиль_ИмяВладельца"]) Тогда
				Имя	= ОбщаяСтруктура["Автомобиль_ИмяВладельца"];	
			КонецЕсли;
			
			ТекСтрока.Шапка.вставить("ФамилияВладельца",Фамилия);
			ТекСтрока.Шапка.вставить("ИмяВладельца",	Имя);
			ТекСтрока.Шапка.вставить("ГосНомер",		СтрокаЗадания.ГосНомер);
		КонецЕсли;
		
	///////////////////////////////////////////////////////////////////////////////////////////
	//								CalcIdent		
		
	// Номер калькуляции
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".GlobalData.CalcIdent.CalcNo" Тогда
		ТекСтрока.НомерДела	= ЗначениеЭлемента;
		
	// Идентификатор дела
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".GlobalData.CalcIdent.CaseId" Тогда
		ТекСтрока.ИдДела	= ЗначениеЭлемента;
		
		// Дата калькуляции	
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".GlobalData.CalcIdent.SystemDat" Тогда
		ТекСтрока.ДатаКалькуляции	= ПривестиЗначение(ЗначениеЭлемента, "Дата");
		
	// Дата и время калькуляции	
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".GlobalData.CalcIdent.TimeStamp" Тогда
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ДатаКалькуляции) Тогда
			ТекДата	= Формат(Дата(1900,1,1), "ДФ=yyyy-MM-dd") + " " + ЗначениеЭлемента;
		Иначе
			ТекДата	= Формат(ТекСтрока.ДатаКалькуляции, "ДФ=yyyy-MM-dd") + " " + ЗначениеЭлемента;
		КонецЕсли;
		ТекСтрока.ДатаКалькуляции	= ПривестиЗначение(ТекДата, "Дата");
		
	///////////////////////////////////////////////////////////////////////////////////////////
	//								CalcParam		
		
	// Дата цен	
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".GlobalData.CalcParam.PPPriceDat" Тогда
		ТекСтрока.Шапка.Вставить("ДатаЦен", ПривестиЗначение(ЗначениеЭлемента, "Дата"));
		
	// Валюта калькуляции                                                      
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".GlobalData.CalcParam.CurDtl.ISO" Тогда
		ТекСтрока.Шапка.Вставить("ВалютаКалькуляции", ПривестиЗначение(ЗначениеЭлемента, "СправочникСсылка.Валюты"));
		ТекСтрока.Шапка.Вставить("ВалютаКалькуляцииСтрока", ПривестиЗначение(ЗначениеЭлемента, "Строка"));
		
	// Исходная валюта цен                                                      
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".GlobalData.CalcParam.CurDtl.ExChgDtl.From.ISO" Тогда
		ТекСтрока.Шапка.Вставить("ВалютаИсходная", ПривестиЗначение(ЗначениеЭлемента, "СправочникСсылка.Валюты"));
		
	// Курс исходной валюты                                                      
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".GlobalData.CalcParam.CurDtl.ExChgDtl.ExChgRate.Valuta" Тогда
		ТекСтрока.Шапка.Вставить("КурсИсходнойВалюты_Дата", ПривестиЗначение(ЗначениеЭлемента, "Дата"));
		
	///////////////////////////////////////////////////////////////////////////////////////////
	//								FinalCalc		
	// Итого
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.FinalCalc.GrandTotal.Parts" Тогда
		ТекСтрока.Шапка.Вставить("Итого", ПривестиЗначение(ЗначениеЭлемента, "Число"));
	// Стоимость нормочаса кузовных работ 	
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.FinalCalc.FCLabor.LaborRates.LaborResults.Rate" Тогда
		ТекСтрока.Шапка.Вставить("НормочасРабот", ПривестиЗначение(ЗначениеЭлемента, "Число"));
		
	// Стоимость нормочаса окрасочных работ	
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.FinalCalc.FinalCalc.FCPaint.LaborRates.LaborResults.Rate" Тогда
		ТекСтрока.Шапка.Вставить("НормочасОкраски", ПривестиЗначение(ЗначениеЭлемента, "Число"));
		
	///////////////////////////////////////////////////////////////////////////////////////////
	//								PartDtl		
		
	// Тип ремонтного воздействия
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.SpareParts.PartDtls.PartDtl.RepTyp" Тогда		
		СтрокаТовара["ТипРемонта"]	= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		
	// Внутренний код запчасти в базе ПО Аудатэкс
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.SpareParts.PartDtls.PartDtl.GId" Тогда
		СтрокаТовара["КодДетали"]	= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		
	// Наименование запчасти
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.SpareParts.PartDtls.PartDtl.PartDesc" Тогда
		СтрокаТовара["НаименованиеДетали"]	= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		СтрокаТовара["Источник"]			= "PartDtls";
	
	// Код запчасти по производителю
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.SpareParts.PartDtls.PartDtl.PartNo" Тогда
		СтрокаТовара["НомерДетали"]	= ПривестиЗначение(ЗначениеЭлемента, "Строка");
	
	// Стоимость запчасти
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.SpareParts.PartDtls.PartDtl.Price" Тогда
		СтрокаТовара["СтоимостьДетали"]		= ПривестиЗначение(ЗначениеЭлемента, "Число");
		СТРДанныхСтроки = ПодготовитьДанныеДляПередачиНаСервер(СтрокаТовара,"СтрокаТЧ");
		ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(
			ПодготовитьДанныеДляПередачиНаСервер(ТекСтрока),
			СТРДанныхСтроки,
			СтрокаТовара["СтоимостьДетали"]);
		РазобратьДанныеПолученныеССервера(СТРДанныхСтроки,СтрокаТовара);
		
	///////////////////////////////////////////////////////////////////////////////////////////
	//								PartComposit		
		
	// Наименование работы
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.PartComposits.PartComposit.CompositeDesc" Тогда
		СтрокаРаботы["НаименованиеРаботы"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		
	// Код работы
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.PartComposits.PartComposit.LbrPosNo" Тогда
		СтрокаРаботы["НомерРаботы"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		
	// Стоимость работы
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.PartComposits.PartComposit.Price" Тогда
		СтрокаРаботы["СтоимостьРабот"]		= ПривестиЗначение(ЗначениеЭлемента, "Число");
		СТРДанныхСтроки = ПодготовитьДанныеДляПередачиНаСервер(СтрокаРаботы,"СтрокаТЧ");
		ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(
			ПодготовитьДанныеДляПередачиНаСервер(ТекСтрока),
			СТРДанныхСтроки,
			СтрокаРаботы["СтоимостьРабот"]);
		РазобратьДанныеПолученныеССервера(СТРДанныхСтроки,СтрокаРаботы);
	// Полное наименование
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.PartComposits.PartComposit.MoreDesc.AddDesc" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.PartComposits.PartComposit.CompositeDesc.MoreDesc.AddDesc" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintPreparations.PntPrep.MoreDesc.AddDesc" Тогда
		СтрокаРаботы["ОписаниеРаботы"]	= ?(СтрокаРаботы["ОписаниеРаботы"]=Неопределено, "",
					СтрокаРаботы["ОписаниеРаботы"]+" ") + ПривестиЗначение(ЗначениеЭлемента, "Строка");
		
	///////////////////////////////////////////////////////////////////////////////////////////
	//								NetLabor		
		
	// Тип ремонта работы
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.NetLabors.NetLabor.RepTyp" Тогда
		СтрокаРаботы["ТипРемонта"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		
	// Код детали работы
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.NetLabors.NetLabor.GId" Тогда
		СтрокаРаботы["КодДетали"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");	
		
	// Наименование детали работы
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.NetLabors.NetLabor.PartDesc" Тогда
		СтрокаРаботы["НаименованиеДетали"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		СтрокаРаботы["Источник"]				= "NetLabors";
		
	// Наименование ремонта
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.NetLabors.NetLabor.RepDesc" Тогда
		СтрокаРаботы["НаименованиеРаботы"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		
	// Код ремонта
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.NetLabors.NetLabor.LbrPosNo" Тогда
		СтрокаРаботы["НомерРаботы"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		
	// Стоимость ремонта
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.NetLabors.NetLabor.Price" Тогда
		СтрокаРаботы["СтоимостьРабот"]		= ПривестиЗначение(ЗначениеЭлемента, "Число");
		СТРДанныхСтроки = ПодготовитьДанныеДляПередачиНаСервер(СтрокаРаботы,"СтрокаТЧ");
		ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(
			ПодготовитьДанныеДляПередачиНаСервер(ТекСтрока),
			СТРДанныхСтроки,
			СтрокаРаботы["СтоимостьРабот"]);
		РазобратьДанныеПолученныеССервера(СТРДанныхСтроки,СтрокаРаботы);
	////////////////////////////////////////////////////
	// NDtls.NDtl
	// Тип ремонта работы
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.NDtls.NDtl.RepTyp" Тогда
		СтрокаРаботы["ТипРемонта"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		
	// Код детали работы
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.NDtls.NDtl.GId" Тогда
		СтрокаРаботы["КодДетали"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");	
		
	// Наименование детали работы
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.NDtls.NDtl.PartDesc" Тогда
		СтрокаРаботы["НаименованиеДетали"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		СтрокаРаботы["Источник"]				= "NetLabors";
		
	// Наименование ремонта
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.NDtls.NDtl.RepDesc" Тогда
		СтрокаРаботы["НаименованиеРаботы"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		
	// Код ремонта
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.NDtls.NDtl.LbrPosNo" Тогда
		СтрокаРаботы["НомерРаботы"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		
	// Стоимость ремонта
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.NDtls.NDtl.Price" Тогда
		СтрокаРаботы["СтоимостьРабот"]		= ПривестиЗначение(ЗначениеЭлемента, "Число");
		СТРДанныхСтроки = ПодготовитьДанныеДляПередачиНаСервер(СтрокаРаботы,"СтрокаТЧ");
		ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(
			ПодготовитьДанныеДляПередачиНаСервер(ТекСтрока),
			СТРДанныхСтроки,
			СтрокаРаботы["СтоимостьРабот"]);
		РазобратьДанныеПолученныеССервера(СТРДанныхСтроки,СтрокаРаботы);
	///////////////////////////////////////////////////////////////////////////////////////////
	//								VehicleIdentification
	
	// Тип ремонта работы
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.VDtls.VDtl.RepTyp" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.IDtls.IDtl.RepTyp" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.PDtls.PDtl.RepTyp" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.UDtls.UDtl.RepTyp" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.HDtls.HDtl.RepTyp" Тогда
		СтрокаРаботы["ТипРемонта"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		
	// Код детали работы
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.VDtls.VDtl.GId" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.IDtls.IDtl.GId" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.PDtls.PDtl.GId" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.UDtls.UDtl.GId" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.HDtls.HDtl.GId" Тогда
		СтрокаРаботы["КодДетали"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");	
		
	// Наименование детали работы
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.VDtls.VDtl.PartDesc" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.IDtls.IDtl.PartDesc" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.PDtls.PDtl.PartDesc" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.UDtls.UDtl.PartDesc" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.HDtls.HDtl.PartDesc" Тогда
		СтрокаРаботы["НаименованиеДетали"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		СтрокаРаботы["Источник"]				= "Dtls";
		
	// Наименование ремонта
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.VDtls.VDtl.RepDesc" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.IDtls.IDtl.RepDesc" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.PDtls.PDtl.RepDesc" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.UDtls.UDtl.RepDesc" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.HDtls.HDtl.RepDesc" Тогда
		СтрокаРаботы["НаименованиеРаботы"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		
	// Стоимость ремонта
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Labor.VDtls.VDtl.Price" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.IDtls.IDtl.Price" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.PDtls.PDtl.Price" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.UDtls.UDtl.Price" ИЛИ
		ИмяЭлемента = КорневойПуть + ".CalcData.Labor.HDtls.HDtl.Price" Тогда
		СтрокаРаботы["СтоимостьРабот"]		= ПривестиЗначение(ЗначениеЭлемента, "Число");
		СТРДанныхСтроки = ПодготовитьДанныеДляПередачиНаСервер(СтрокаРаботы,"СтрокаТЧ");
		ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(
			ПодготовитьДанныеДляПередачиНаСервер(ТекСтрока),
			СТРДанныхСтроки,
			СтрокаРаботы["СтоимостьРабот"]);
		РазобратьДанныеПолученныеССервера(СТРДанныхСтроки,СтрокаРаботы);
	///////////////////////////////////////////////////////////////////////////////////////////
	//								PaintHeader		
		
	// Тип окраски
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintHeader.PaintTyp" Тогда			 
		СтрокаПараметровОкраски["ТипОкраски"]	= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		
	// Код типа окраски
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintHeader.PaintCd" Тогда			 
		СтрокаПараметровОкраски["КодТипаОкраски"]	= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		
	// Наименование типа окраски
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintHeader.PaintTypDesc" Тогда			 
		СтрокаПараметровОкраски["НаименованиеТипаОкраски"]	= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		
	// Системный тип окраски
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintHeader.PaintSystemTyp" Тогда			 
		СтрокаПараметровОкраски["ТипОкраскиСистема"]	= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		
	// Количество рабочих позиций в часе
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintHeader.PaintSystemTyp.TimeBase" Тогда			 
		СтрокаПараметровОкраски["КоличествоРП"]	= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		
	///////////////////////////////////////////////////////////////////////////////////////////
	//								PntPrep		
		
	// Код детали работы
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintPreparations.PntPrep.LbrPosNo" Тогда
		СтрокаРаботы["НомерРаботы"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");	
		
	// Наименование ремонта
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintPreparations.PntPrep.CompositeDesc" Тогда
		СтрокаРаботы["НаименованиеРаботы"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		
	// Стоимость ремонта
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintPreparations.PntPrep.Price" Тогда
		СтрокаРаботы["СтоимостьРабот"]		= ПривестиЗначение(ЗначениеЭлемента, "Число");
		СТРДанныхСтроки = ПодготовитьДанныеДляПередачиНаСервер(СтрокаРаботы,"СтрокаТЧ");
		ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(
			ПодготовитьДанныеДляПередачиНаСервер(ТекСтрока),
			СТРДанныхСтроки,
			СтрокаРаботы["СтоимостьРабот"]);
		РазобратьДанныеПолученныеССервера(СТРДанныхСтроки,СтрокаРаботы);
	///////////////////////////////////////////////////////////////////////////////////////////
	//								PaintDtl
		
	// Тип ремонта окрасочных работ
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintPositions.PaintDtl.RepTyp" Тогда
		СтрокаРаботы["ТипРемонта"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		
	// Код детали окрасочных работ
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintPositions.PaintDtl.GId" Тогда
		СтрокаРаботы["КодДетали"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");	
		
	// Наименование детали окрасочных работ
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintPositions.PaintDtl.Desc" Тогда
		СтрокаРаботы["НаименованиеДетали"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		СтрокаРаботы["Источник"]				= "PaintPositions";
		
	// Наименование ремонта
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintPositions.PaintDtl.RepTypDesc" Тогда
		СтрокаРаботы["НаименованиеРаботы"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		
	// Код ремонта
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintPositions.PaintDtl.LbrPosNo" Тогда
		СтрокаРаботы["НомерРаботы"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		
	// Стоимость ремонта
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintPositions.PaintDtl.Lbr"
		ИЛИ ИмяЭлемента = КорневойПуть + ".CalcData.Paint.PaintPositions.PaintDtl.AdjacentDeduGrpTot.Lbr" Тогда
		СтрокаРаботы["СтоимостьРабот"]		= ПривестиЗначение(ЗначениеЭлемента, "Число");
		СТРДанныхСтроки = ПодготовитьДанныеДляПередачиНаСервер(СтрокаРаботы,"СтрокаТЧ");
		ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(
			ПодготовитьДанныеДляПередачиНаСервер(ТекСтрока),
			СТРДанныхСтроки,
			СтрокаРаботы["СтоимостьРабот"]);
		РазобратьДанныеПолученныеССервера(СТРДанныхСтроки,СтрокаРаботы);
		
	///////////////////////////////////////////////////////////////////////////////////////////
	//								MfcPCChg	
		
	// Код детали работы
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.MfcPCChgs.MfcPCChg.Desc1" Тогда
		СтрокаРаботы["НаименованиеРаботы"]	= ПривестиЗначение(ЗначениеЭлемента, "Строка");	
		
	// Наименование ремонта
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.Paint.MfcPCChgs.MfcPCChg.Desc2" Тогда
		НаименованиеРаботы	= СтрокаРаботы["НаименованиеРаботы"];
		НаименованиеРаботы	= НаименованиеРаботы + " " + ПривестиЗначение(ЗначениеЭлемента, "Строка");
		
	// Стоимость ремонта
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.Paint.MfcPCChgs.MfcPCChg.Lbr" Тогда
		СтрокаРаботы["СтоимостьРабот"]		= ПривестиЗначение(ЗначениеЭлемента, "Число");
		СТРДанныхСтроки = ПодготовитьДанныеДляПередачиНаСервер(СтрокаРаботы,"СтрокаТЧ");
		ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(
			ПодготовитьДанныеДляПередачиНаСервер(ТекСтрока),
			СТРДанныхСтроки,
			СтрокаРаботы["СтоимостьРабот"]);
		РазобратьДанныеПолученныеССервера(СТРДанныхСтроки,СтрокаРаботы);
		
	///////////////////////////////////////////////////////////////////////////////////////////
	//								ExtraItem/RiskDetail
	
	// Тип воздействия
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.ExtraItems.ExtraItem.RepTyp"
		ИЛИ ИмяЭлемента = КорневойПуть + ".CalcData.RiskDetails.RiskDetail.RepTyp" Тогда
		СтрокаРаботы["ТипРемонта"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		
	// Код детали или объекта воздействия
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.ExtraItems.ExtraItem.GId"
		ИЛИ ИмяЭлемента = КорневойПуть + ".CalcData.RiskDetails.RiskDetail.GId" Тогда
		СтрокаРаботы["НомерРаботы"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");	
		
	// Наименование детали работы
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.ExtraItems.ExtraItem.PartDesc"
		ИЛИ ИмяЭлемента = КорневойПуть + ".CalcData.RiskDetails.RiskDetail.PartDesc" Тогда
		СтрокаРаботы["НаименованиеДетали"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		СтрокаРаботы["Источник"]				= "ExtraItems";
		
	// Наименование воздействия
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.ExtraItems.ExtraItem.Desc"
		ИЛИ ИмяЭлемента = КорневойПуть + ".CalcData.RiskDetails.RiskDetail.Desc" Тогда
		СтрокаРаботы["НаименованиеРаботы"]		= ПривестиЗначение(ЗначениеЭлемента, "Строка");
		
	// Стоимость воздействия
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.ExtraItems.ExtraItem.Amnt"
	ИЛИ ИмяЭлемента = КорневойПуть + ".CalcData.RiskDetails.RiskDetail.Amnt" Тогда
	СтрокаРаботы["СтоимостьРабот"]		= ПривестиЗначение(ЗначениеЭлемента, "Число");
	СТРДанныхСтроки = ПодготовитьДанныеДляПередачиНаСервер(СтрокаРаботы,"СтрокаТЧ");
	ОбменСAudaPadWebЗащищенныеФункцииСервер.ЗаполнитьЦену(
		ПодготовитьДанныеДляПередачиНаСервер(ТекСтрока),
		СТРДанныхСтроки,
		СтрокаРаботы["СтоимостьРабот"]);
	РазобратьДанныеПолученныеССервера(СТРДанныхСтроки,СтрокаРаботы);
	
	////////////////////////////////////////////////////////////////////////////////////////////
	//									CalcControl/ActivIDBlks
	ИначеЕсли ИмяЭлемента = КорневойПуть + ".CalcData.CalcControl.ActivIDBlks.IDBlkDtl.IDBlk" Тогда
		СтрокаДопКодов["Код"]      = ПривестиЗначение(ЗначениеЭлемента, "Строка");
		СтрокаДопКодов["Источник"] = "ActivIDBlks";
	КонецЕсли;
	
	Возврат Успешно;

КонецФункции

// Функция преобразует указанное значение в требуемый тип
//
Функция ПривестиЗначение(Знач Значение, Тип, ДопПараметры=Неопределено) Экспорт
	Результат	= Неопределено;
	
	Если Тип = "Строка" Тогда
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Результат	= СокрЛП(Значение);
		КонецЕсли;
	ИначеЕсли Тип="Число" Тогда
		Если ТипЗнч(Значение)=Тип("Строка") И НЕ ПустаяСтрока(Значение) Тогда
			РабочееЗначение	= Значение;
			Если Найти(РабочееЗначение, "-") Тогда
				Знак	= -1;
			Иначе
				Знак	= 1;
			КонецЕсли;
			РабочееЗначение	= СтрЗаменить(РабочееЗначение, "-", "");
			РабочееЗначение	= СтрЗаменить(РабочееЗначение, "+", "");
			//РабочееЗначение	= СтрЗаменить(РабочееЗначение, ".", ",");
			Результат	= Знак*Число(РабочееЗначение);
		КонецЕсли;
	ИначеЕсли Тип = "Дата" Тогда
		Если ТипЗнч(Значение) = Тип("Строка") И НЕ ПустаяСтрока(Значение) тогда
			// По умолчанию формат строковой даты ГГГ-мм-дд
			ТекГод	= 1; ТекМесяц	= 1; ТекДень	= 1; ТекЧас	= 0; ТекМинута	= 0; ТекСекунда	= 0;
			РабочееЗначение	= Значение;
			РабочееЗначение	= СтрЗаменить(РабочееЗначение, "-", Символы.ПС);
			РабочееЗначение	= СтрЗаменить(РабочееЗначение, " ", Символы.ПС);
			РабочееЗначение	= СтрЗаменить(РабочееЗначение, ":", Символы.ПС);
			РабочееЗначение	= СтрЗаменить(РабочееЗначение, ".", Символы.ПС);
			
			КоличествоЭлементов = СтрЧислоСтрок(РабочееЗначение);
			Если КоличествоЭлементов > 0 Тогда
				Для Счетчик = 1 По КоличествоЭлементов Цикл
					ПромежуточгаяСтрока	= СтрПолучитьСтроку(РабочееЗначение, Счетчик);
					Если Счетчик = 1 Тогда
						ТекГод	= Число(Сред(ПромежуточгаяСтрока,0,4));
					ИначеЕсли  Счетчик = 2 Тогда
						ТекМесяц	= Число(Сред(ПромежуточгаяСтрока,0,2));
					ИначеЕсли  Счетчик = 3 Тогда
						ТекДень		= Число(Сред(ПромежуточгаяСтрока,0,2));
					ИначеЕсли  Счетчик = 4 Тогда
						ТекЧас		= Число(Сред(ПромежуточгаяСтрока,0,2));
					ИначеЕсли  Счетчик = 5 Тогда
						ТекМинута	= Число(Сред(ПромежуточгаяСтрока,0,2));
					ИначеЕсли  Счетчик = 6 Тогда
						ТекСекунда	= Число(Сред(ПромежуточгаяСтрока,0,2));						
					КонецЕсли;
					
					Результат	= Дата(ТекГод, ТекМесяц, ТекДень, ТекЧас, ТекМинута, ТекСекунда);
				КонецЦикла;	
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Тип = "СправочникСсылка.Валюты" Тогда
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			// Попытаемся найти по наименованию
			ЗапросВалюты		= Новый Запрос();
			ЗапросВалюты.Текст	= "ВЫБРАТЬ Валюты.Ссылка КАК Ссылка
			                  	  |ИЗ Справочник.Валюты КАК Валюты
			                  	  |ГДЕ	Валюты.Наименование = &Наименование";
			ЗапросВалюты.УстановитьПараметр("Наименование",	Значение);
			ТаблицаЗапроса	= ЗапросВалюты.Выполнить().Выбрать();			
			Если ТаблицаЗапроса.Следующий() Тогда
				Возврат ТаблицаЗапроса.Ссылка;
			Иначе
				// Определение кода валюта по наименованию
				Если ВРег(Значение) = "RUR" ИЛИ ВРег(Значение) = "RUB" Тогда
					ВероятныйКод	= "643";
				ИначеЕсли ВРег(Значение)="USD" Тогда 
					ВероятныйКод	= "840";
				ИначеЕсли ВРег(Значение)="EUR" Тогда 
					ВероятныйКод	= "978";
				Иначе
					ВероятныйКод	= 0;
				КонецЕсли;
				
				// Попытаемся найти по коду
				ЗапросВалюты.Текст	= "ВЫБРАТЬ Валюты.Ссылка КАК Ссылка
				                  	  |ИЗ Справочник.Валюты КАК Валюты
				                  	  |ГДЕ	Валюты.Код = &Код";
				ЗапросВалюты.УстановитьПараметр("Код",	ВероятныйКод);
				ТаблицаЗапроса	= ЗапросВалюты.Выполнить().Выбрать();
				Если ТаблицаЗапроса.Следующий() Тогда
					Возврат ТаблицаЗапроса.Ссылка;	
				Иначе
					// По коду и наименованию валюта не найдена,
					// создадим валюту.
					НовыйОбъект	= Справочники.Валюты.СоздатьЭлемент();
					Если ВероятныйКод = 0 Тогда
						НовыйОбъект.УстановитьНовыйКод();
					Иначе
						НовыйОбъект.Код	= ВероятныйКод;
					КонецЕсли;
					НовыйОбъект.Заполнить(Неопределено);
					НовыйОбъект.Наименование		= Значение;
					НовыйОбъект.НаименованиеПолное	= Значение;
					Попытка
						НовыйОбъект.Записать();
						Результат	= НовыйОбъект.Ссылка;
					Исключение
						Результат	= Неопределено;
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Тип = "СправочникСсылка.Номенклатура" Тогда
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Если ТипЗнч(ДопПараметры) <> Тип("Структура") Тогда Возврат Неопределено; КонецЕсли;
			
			ЗапчастьКод			= Неопределено;
			ЗапчастьАртикул		= Неопределено;
			ЗапчастьТип			= Неопределено;
			ЗапчастьНаименование= Неопределено;
			ИсточникДетали		= Неопределено;
			ВалютаНормочасаРабот= Неопределено;
			
			ДопПараметры.Свойство("КодДетали",			ЗапчастьКод);
			ДопПараметры.Свойство("НомерДетали",		ЗапчастьАртикул);
			ДопПараметры.Свойство("Источник",			ИсточникДетали);			
			ДопПараметры.Свойство("ТипРемонта",			ЗапчастьТип);
			ДопПараметры.Свойство("НаименованиеДетали",	ЗапчастьНаименование);
			ДопПараметры.Свойство("НормочасРабот_Валюта",ВалютаНормочасаРабот);
			
			Если НЕ ЗначениеЗаполнено(ЗапчастьАртикул) Тогда
				ДопПараметры.Свойство("НомерРаботы", ЗапчастьАртикул);
				Если ЗначениеЗаполнено(ЗапчастьАртикул) И
					НЕ ЗначениеЗаполнено(ЗапчастьНаименование) Тогда
					ДопПараметры.Свойство("НаименованиеРаботы",ЗапчастьНаименование);
				КонецЕсли;
			КонецЕсли;
			
			Если ВРег(ЗапчастьАртикул="ЗАМЕНИТЬ") ИЛИ ВРег(ЗапчастьАртикул)="БН" Тогда
				ЗапчастьАртикул	= "";
			КонецЕсли;
			
			ЗапросНоменклатуры	= Новый Запрос();
			ЗапросНоменклатуры.УстановитьПараметр("Артикул",			?(НЕ ЗначениеЗаполнено(ЗапчастьАртикул),"",ЗапчастьАртикул));
			ЗапросНоменклатуры.УстановитьПараметр("Наименование",		Лев(ЗапчастьНаименование,ДлинаНаименованияТовара));
			ЗапросНоменклатуры.УстановитьПараметр("НаименованиеПолное",	ЗапчастьНаименование);
			
			// Поиск по артикулу и наименованию				
			ЗапросНоменклатуры.Текст	= "ВЫБРАТЬ	Номенклатура.Ссылка КАК Ссылка
			                        	  |ИЗ	Справочник.Номенклатура КАК Номенклатура
			                        	  |ГДЕ	НЕ Номенклатура.ЭтоГруппа
										  |	И Номенклатура.Артикул = &Артикул
										  |	И Номенклатура.Наименование = &Наименование";				
			ТаблицаЗапроса	= ЗапросНоменклатуры.Выполнить().Выбрать();				
			Если ТаблицаЗапроса.Следующий() Тогда
				Возврат ТаблицаЗапроса.Ссылка;
			КонецЕсли;
			
			// если точного соответствия не нашли попробуем провести синхронизацию
			Если флСинхронизироватьНоменклатуру И ЗначениеЗаполнено(ЗапчастьАртикул) Тогда
				ЗапросСинхронизация = Новый Запрос;
				ЗапросСинхронизация.Текст =
				"ВЫБРАТЬ
				|	Номенклатура.Ссылка КАК Номенклатура
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|ГДЕ
				|	НЕ Номенклатура.ЭтоГруппа
				|	И Номенклатура.Артикул = &Артикул";
				ЗапросСинхронизация.УстановитьПараметр("Артикул", ЗапчастьАртикул);
				Выборка = ЗапросСинхронизация.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					СинхранизируемыйОбъект = Выборка.Номенклатура.ПолучитьОбъект();
					
					// проведем синхронизацию если нашли что-то
					СинхранизируемыйОбъект.Артикул					= ЗапчастьАртикул;
					СинхранизируемыйОбъект.Наименование				= ЗапчастьНаименование;
					СинхранизируемыйОбъект.НаименованиеИностранное	= ЗапчастьНаименование;
					СинхранизируемыйОбъект.НаименованиеПолное		= ЗапчастьНаименование;
					СинхранизируемыйОбъект.Родитель					= ГруппаНоменклатуры;
					СинхранизируемыйОбъект.Комментарий				= ИсточникДетали;
					
					Попытка
						СинхранизируемыйОбъект.Записать();
						Результат	= СинхранизируемыйОбъект.Ссылка;
					Исключение
						ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
						Возврат Справочники.Номенклатура.ПустаяСсылка();
					КонецПопытки;
					Возврат Результат;
				КонецЕсли;
			КонецЕсли;
			
			
			//// Поиск по полному наименованию
			//Если флПоискНаименованиеПолное И ЗначениеЗаполнено(ЗапчастьНаименование) И
			//	СтрДлина(ЗапчастьНаименование)>0 Тогда
			//	ЗапросНоменклатуры.Текст	= "ВЫБРАТЬ	Номенклатура.Ссылка КАК Ссылка
			//							  	|ИЗ	Справочник.Номенклатура КАК Номенклатура
			//							  	|ГДЕ НЕ Номенклатура.ЭтоГруппа	
			//								|	И ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА("+
			//								СтрДлина(ЗапчастьНаименование)+")) = &НаименованиеПолное";				
			//	ТаблицаЗапроса	= ЗапросНоменклатуры.Выполнить().Выбрать();				
			//	Если ТаблицаЗапроса.Следующий() Тогда
			//		Возврат ТаблицаЗапроса.Ссылка;
			//	КонецЕсли;
			//КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ЗапчастьНаименование) Тогда
				НаименованиеРаб = Неопределено;
				ДопПараметры.Свойство("НаименованиеРаботы",НаименованиеРаб);
				Если ЗначениеЗаполнено(НаименованиеРаб) Тогда
					Возврат Справочники.Номенклатура.Авторабота;
				Иначе
					Возврат Справочники.Номенклатура.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
			
			ТипНоменклатуры		= Справочники.ТипыНоменклатуры.Штучный;
			ВидНоменклатуры		= Перечисления.ВидыНоменклатуры.Товар;
			БазоваяЕдиница		= ТипНоменклатуры.ОсновнаяБазоваяЕдиницаИзмерения;
					
			НовыйОбъект	= Справочники.Номенклатура.СоздатьЭлемент();
			
			// Иначе номенклатура с пустыми артикулами не загрузится
			НовыйОбъект.ОбменДанными.Загрузка	= Истина;
			
			НовыйОбъект.Заполнить(Неопределено);
			Если ЗначениеЗаполнено(ЗапчастьКод) Тогда
				НайденнаяНоменклатура	= Справочники.Номенклатура.НайтиПоКоду(ЗапчастьКод);
				Если НЕ ЗначениеЗаполнено(НайденнаяНоменклатура) Тогда					
					НовыйОбъект.Код	= ЗапчастьКод;
				Иначе
					НовыйОбъект.УстановитьНовыйКод();
				КонецЕсли;
			Иначе
				НовыйОбъект.УстановитьНовыйКод();						
			КонецЕсли;
																	
			НовыйОбъект.Артикул					= ЗапчастьАртикул;
			НовыйОбъект.Наименование			= ЗапчастьНаименование;
			НовыйОбъект.НаименованиеИностранное	= ЗапчастьНаименование;
			НовыйОбъект.НаименованиеПолное		= ЗапчастьНаименование;
			НовыйОбъект.СтавкаНДС			= Справочники.СтавкиНДС.ОсновнаяСтавкаНДС;
			Если ВалютаНормочасаРабот<>Неопределено Тогда
				НовыйОбъект.ВалютаУчета			= ВалютаНормочасаРабот;
			КонецЕсли;
			НовыйОбъект.Родитель				= ГруппаНоменклатуры;
			НовыйОбъект.ТипНоменклатуры			= ТипНоменклатуры;
			НовыйОбъект.ВидНоменклатуры			= ВидНоменклатуры;
			НовыйОбъект.БазоваяЕдиницаИзмерения	= БазоваяЕдиница;
			НовыйОбъект.Комментарий				= ИсточникДетали;
				
			Попытка
				НовыйОбъект.Записать();
				Результат	= НовыйОбъект.Ссылка;
				Если НовыйОбъект.ОсновнаяЕдиницаИзмерения.Пустая() Тогда
					Попытка	// Возможна ошибка при записи основной единицы измерения (если не задана базовая)
						НовыйОбъект.ОсновнаяЕдиницаИзмерения = Справочники.Номенклатура.ПолучитьОсновнуюЕдиницуПоБазовой(НовыйОбъект);
						НовыйОбъект.Записать();
					Исключение 
						ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при записи основной единицы измерения'"),
						УровеньЖурналаРегистрации.Ошибка,,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
				КонецЕсли;
			Исключение
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
				Возврат Справочники.Номенклатура.ПустаяСсылка();
			КонецПопытки;
			Возврат Результат;
		КонецЕсли;
		
	ИначеЕсли Тип = "Справочники.СтраныМира" Тогда	
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Если ПустаяСтрока(Значение) Тогда
				Значение	= "Неопределено";
			КонецЕсли;
			СтранаПроисхождения	= Справочники.СтраныМира.НайтиПоНаименованию(Значение, Истина);
			Если НЕ ЗначениеЗаполнено(СтранаПроисхождения) Тогда
				НовыйОбъект	= Справочники.СтраныМира.СоздатьЭлемент();
				НовыйОбъект.Заполнить(Неопределено);
				НовыйОбъект.УстановитьНовыйКод();
				НовыйОбъект.Наименование		= Значение;
				НовыйОбъект.НаименованиеПолное	= Значение;
				Попытка
					НовыйОбъект.Записать();
				Исключение
					Возврат Справочники.СтраныМира.ПустаяСсылка();
				КонецПопытки;
				
				Возврат НовыйОбъект.Ссылка;
			Иначе
				Возврат СтранаПроисхождения;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Тип="СправочникСсылка.Производители" Тогда
		Если ТипЗнч(Значение)=Тип("Строка") Тогда
			
			Если НЕ ЗначениеЗаполнено(Значение) Тогда
				Возврат Справочники.Производители.ПустаяСсылка();
			КонецЕсли;
			
			// Уберем служебные символы из наименования производителя
			Пропустить=Ложь;
			НаименованиеПроизводителя	= "";
			Для Индекс=1 По СтрДлина(Значение)-1 Цикл
				ТекСимвол	= Сред(Значение,Индекс,1);
				Если ТекСимвол="[" Тогда
					Пропустить	= Истина;
				ИначеЕсли ТекСимвол="]" Тогда
					Пропустить	= Ложь;
				ИначеЕсли НЕ Пропустить Тогда
					НаименованиеПроизводителя	= НаименованиеПроизводителя+ТекСимвол;
				КонецЕсли;
			КонецЦикла;
			
			// Поиск по наименонию производителя
			ЗапросПроизводителей	= Новый Запрос();
			ЗапросПроизводителей.УстановитьПараметр("Наименование", НаименованиеПроизводителя);
			ЗапросПроизводителей.Текст= "ВЫБРАТЬ
			                            |	Производители.Ссылка
			                            |ИЗ
			                            |	Справочник.Производители КАК Производители
			                            |ГДЕ
			                            |	Производители.Наименование = &Наименование";
			ТаблицаПроизводителей	= ЗапросПроизводителей.Выполнить().Выбрать();
			Если ТаблицаПроизводителей.Следующий() Тогда
				Возврат ТаблицаПроизводителей.Ссылка;
			КонецЕсли;
			
			// Классификатор страны произвождения не известен			
			СтранаПроисхождения	= ПривестиЗначение("", "Справочники.СтраныМира", ДопПараметры);
			
			НовыйОбъект	= Справочники.Производители.СоздатьЭлемент();
			НовыйОбъект.Заполнить(Неопределено);
			НовыйОбъект.УстановитьНовыйКод();
			НовыйОбъект.Наименование		= НаименованиеПроизводителя;
			НовыйОбъект.СтранаПроисхождения	= СтранаПроисхождения;
			Попытка
				НовыйОбъект.Записать();
			Исключение
				Возврат Справочники.Производители.ПустаяСсылка();
			КонецПопытки;
			
			Возврат НовыйОбъект.Ссылка;
			
		КонецЕсли;
		
	ИначеЕсли Тип = "СправочникСсылка.Модели" Тогда
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Если ТипЗнч(ДопПараметры) <> Тип("Структура") Тогда Возврат Неопределено; КонецЕсли;
			
			СсылкаНаРодителя	= ГруппаМодели;
			Производитель		= ПривестиЗначение(Значение, "СправочникСсылка.Производители", ДопПараметры);
			ВалютаУчета			= Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
			
			// Поиск по наименованию
			ЗапросМоделей		= Новый Запрос();
			ЗапросМоделей.УстановитьПараметр("Наименование", Значение);
			ЗапросМоделей.Текст	= "ВЫБРАТЬ
			                   	  |	Модели.Ссылка
			                   	  |ИЗ
			                   	  |	Справочник.Модели КАК Модели
			                   	  |ГДЕ
			                   	  |	НЕ Модели.ЭтоГруппа
			                   	  |	И Модели.Наименование = &Наименование";
			ТаблицаМоделей	= ЗапросМоделей.Выполнить().Выбрать();
			Если ТаблицаМоделей.Следующий() Тогда
				Возврат ТаблицаМоделей.Ссылка;
			КонецЕсли;
			
			НовыйОбъект	= Справочники.Модели.СоздатьЭлемент();
			НовыйОбъект.Заполнить(Неопределено);
			НовыйОбъект.УстановитьНовыйКод();
			НовыйОбъект.Наименование		= Значение;
			НовыйОбъект.НаименованиеПолное	= Значение;
			НовыйОбъект.Производитель		= Производитель;
			НовыйОбъект.Родитель			= СсылкаНаРодителя;
			Если НЕ ЗначениеЗаполнено(НовыйОбъект.ВалютаУчета) Тогда
				НовыйОбъект.ВалютаУчета	= ВалютаУчета;
			КонецЕсли;
			
			Попытка
				НовыйОбъект.Записать();
			Исключение
				Возврат Справочники.Модели.ПустаяСсылка();
			КонецПопытки;
			
			Возврат НовыйОбъект.Ссылка;
								  
								  
								  
		КонецЕсли;
		
	ИначеЕсли Тип="СправочникСсылка.Автомобили" Тогда
		Если ТипЗнч(Значение)=Тип("Строка") Тогда
			Если ТипЗнч(ДопПараметры)<>Тип("Структура") Тогда Возврат Неопределено; КонецЕсли;
			
			ТекстМодель			= Неопределено; ТекстПодМодель		= Неопределено;
			ТекстПроизводитель	= Неопределено; ТекстИдентификатор	= Неопределено;
			ДатаВыпуска			= Неопределено; ГосНомер			= Неопределено;
			ПробегАвто			= Неопределено; ХозяинАвтомобиля	= Неопределено;
			
			ДопПараметры.Свойство("Автомобиль_Модель",			ТекстМодель);
			ДопПараметры.Свойство("Автомобиль_Подмодель",		ТекстПодМодель);
			ДопПараметры.Свойство("Автомобиль_Производитель",	ТекстПроизводитель);						
			ДопПараметры.Свойство("Автомобиль_Идентификатор",	ТекстИдентификатор);
			
			Если НЕ ЗначениеЗаполнено(ТекстПроизводитель) И НЕ ЗначениеЗаполнено(ТекстМодель) Тогда
				Возврат Справочники.Автомобили.ПустаяСсылка();
			Иначе
				НаименованиеМодели	= ОбменСAudaPadWebЗащищенныеФункцииСервер.ПолучитьНаименованиеМодели(
					ТекстПроизводитель,
					ТекстМодель);
			КонецЕсли;
			ВалютаУчета			= Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
			СсылкаНаРодителя	= ГруппаАвтомобили;
			
			ДопПараметры.Свойство("Автомобиль_ДатаВыпуска",	ДатаВыпуска);
			ДопПараметры.Свойство("Автомобиль_Номер",		ГосНомер);
			ДопПараметры.Свойство("Автомобиль_Пробег",		ПробегАвто);			
			ДопПараметры.Свойство("ХозяинАвтомобиля", ХозяинАвтомобиля);
			
			// Поиск по VIN-у
			ЗапросАвтомобиля	= Новый Запрос();
			ЗапросАвтомобиля.УстановитьПараметр("VIN", Значение);
			ЗапросАвтомобиля.УстановитьПараметр("НаименованиеМодели", НаименованиеМодели);
			ЗапросАвтомобиля.Текст	= "ВЫБРАТЬ
			                      	  |	Автомобили.Ссылка КАК Ссылка
			                      	  |ИЗ
			                      	  |	Справочник.Автомобили КАК Автомобили
			                      	  |ГДЕ (НЕ Автомобили.ЭтоГруппа)
			                      	  |	И (Автомобили.VIN = &VIN
			                      	  |	ИЛИ Автомобили.ОригинальныйVIN = &VIN)";
									  
			ТаблицаАвто	= ЗапросАвтомобиля.Выполнить().Выбрать();
			Если ТаблицаАвто.Следующий() Тогда
				Возврат ТаблицаАвто.Ссылка;
			КонецЕсли;
			
			// Поиск по наименованию
			Если ЗначениеЗаполнено(НаименованиеМодели) Тогда
				ЗапросАвтомобиля.Текст	= "ВЫБРАТЬ
				                      	  |	Автомобили.Ссылка КАК Ссылка
				                      	  |ИЗ
				                      	  |	Справочник.Автомобили КАК Автомобили
				                      	  |ГДЕ НЕ Автомобили.ЭтоГруппа
				                      	  |	И Автомобили.Наименование = &НаименованиеМодели";
										  
				ТаблицаАвто	= ЗапросАвтомобиля.Выполнить().Выбрать();
				Если ТаблицаАвто.Следующий() Тогда
					Возврат ТаблицаАвто.Ссылка;
				КонецЕсли;				
			КонецЕсли;
			
			Модель	= ПривестиЗначение(НаименованиеМодели, "СправочникСсылка.Модели", ДопПараметры);
			
			НовыйОбъект	= Справочники.Автомобили.СоздатьЭлемент();
			НовыйОбъект.Заполнить(Неопределено);
			НовыйОбъект.УстановитьНовыйКод();
			НовыйОбъект.Наименование		= Справочники.Автомобили.СформироватьНаименованиеАвтомобиляПоПолям(НаименованиеМодели, , ГосНомер, Значение);
			НовыйОбъект.НаименованиеПолное  = НовыйОбъект.Наименование;
			НовыйОбъект.Родитель			= СсылкаНаРодителя;
			НовыйОбъект.VIN					= Значение;
			НовыйОбъект.ОригинальныйVIN		= Значение;
			НовыйОбъект.ВключатьВПрайсЛист	= Перечисления.ВидВключенияВПрайсЛист.ПоУмолчанию;
			НовыйОбъект.Модель				= Модель;
			Если ЗначениеЗаполнено(ДатаВыпуска) Тогда
				НовыйОбъект.ГодВыпуска			= ДатаВыпуска;
			КонецЕсли;
			
			Попытка
				НовыйОбъект.Записать();
			Исключение
				Возврат Справочники.Автомобили.ПустаяСсылка();
			КонецПопытки;
			
			Если ЗначениеЗаполнено(ХозяинАвтомобиля) Тогда
				Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(НовыйОбъект.Ссылка, ХозяинАвтомобиля,Перечисления.ДополнительнаяИнформацияАвтомобилей.Хозяин,,Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.AudaPadWeb);
			КонецЕсли;
			Если ЗначениеЗаполнено(ПробегАвто) Тогда
				Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(НовыйОбъект.Ссылка,ПробегАвто,Перечисления.ДополнительнаяИнформацияАвтомобилей.Пробег,,Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.AudaPadWeb);
			КонецЕсли;			
			Если ЗначениеЗаполнено(ГосНомер) Тогда						
				Справочники.Автомобили.ЗаписьЗначенияРегистраСведения(НовыйОбъект.Ссылка,ГосНомер,Перечисления.ДополнительнаяИнформацияАвтомобилей.ГосНомер,,Перечисления.ИсточникиИнформацииХарактеристикАвтомобиля.AudaPadWeb);
			КонецЕсли;
			
			Возврат НовыйОбъект.Ссылка;			
		КонецЕсли;
		
	ИначеЕсли  Тип="СправочникСсылка.Контрагенты" Тогда
		Если ТипЗнч(Значение)=Тип("Строка")  Тогда
			Если ТипЗнч(ДопПараметры)<>Тип("Структура") Тогда Возврат Неопределено; КонецЕсли;
			
			ФамилияВладельца	= Неопределено; ИмяВладельца	= Неопределено;
			
			ДопПараметры.Свойство("ФамилияВладельца",	ФамилияВладельца);
			ДопПараметры.Свойство("ИмяВладельца",		ИмяВладельца);
			
			Если НЕ ЗначениеЗаполнено(ФамилияВладельца) И НЕ ЗначениеЗаполнено(ИмяВладельца) Тогда
				Возврат Справочники.Контрагенты.ПустаяСсылка();
			КонецЕсли;
			
			СсылкаНаРодителя	= ГруппаКонтрагентов;
			ВидКонтрагента		= Перечисления.ВидыКонтрагентов.Покупатель;
			ФормаСобственности	= Перечисления.ФормыСобственности.ЧастноеЛицо;
			
			ЗапросКонтрагента	= Новый Запрос();
			ЗапросКонтрагента.УстановитьПараметр("Фамилия", 		ФамилияВладельца);
			ЗапросКонтрагента.УстановитьПараметр("Имя",				ИмяВладельца);
			ЗапросКонтрагента.УстановитьПараметр("Наименование",	Значение);
			ЗапросКонтрагента.УстановитьПараметр("Родитель",		СсылкаНаРодителя);
			ЗапросКонтрагента.УстановитьПараметр("ВидКонтрагента",	ВидКонтрагента);
			ЗапросКонтрагента.УстановитьПараметр("ФормаСобственности",	ФормаСобственности);
			
			// Поиск по фамлии и имени
			Если ЗначениеЗаполнено(ФамилияВладельца) И ЗначениеЗаполнено(ИмяВладельца) Тогда
				ЗапросКонтрагента.Текст	= "ВЫБРАТЬ
				                       	  |	Контрагенты.Ссылка КАК Ссылка
				                       	  |ИЗ
				                       	  |	Справочник.Контрагенты КАК Контрагенты
				                       	  |ГДЕ
				                       	  |	Контрагенты.Фамилия = &Фамилия
				                       	  |	И Контрагенты.Имя = &Имя
				                       	  |	И НЕ Контрагенты.ЭтоГруппа
				                       	  |	И Контрагенты.Родитель = &Родитель
				                       	  |	И Контрагенты.ВидКонтрагента = &ВидКонтрагента
				                       	  |	И Контрагенты.ФормаСобственности = &ФормаСобственности";
				ТаблицаКонтрагентов	= ЗапросКонтрагента.Выполнить().Выбрать();
				Если ТаблицаКонтрагентов.Следующий() Тогда
					Возврат ТаблицаКонтрагентов.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			// Поиск по фамлии
			Если ЗначениеЗаполнено(ФамилияВладельца) Тогда
				ЗапросКонтрагента.Текст	= "ВЫБРАТЬ
				                       	  |	Контрагенты.Ссылка КАК Ссылка
				                       	  |ИЗ
				                       	  |	Справочник.Контрагенты КАК Контрагенты
				                       	  |ГДЕ
				                       	  |	Контрагенты.Фамилия = &Фамилия
				                       	  |	И НЕ Контрагенты.ЭтоГруппа
				                       	  |	И Контрагенты.Родитель = &Родитель
				                       	  |	И Контрагенты.ВидКонтрагента = &ВидКонтрагента
				                       	  |	И Контрагенты.ФормаСобственности = &ФормаСобственности";
				ТаблицаКонтрагентов	= ЗапросКонтрагента.Выполнить().Выбрать();
				Если ТаблицаКонтрагентов.Следующий() Тогда
					Возврат ТаблицаКонтрагентов.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			// Поиск по наименованию
			Если ЗначениеЗаполнено(Значение) Тогда
				ЗапросКонтрагента.Текст	= "ВЫБРАТЬ
				                       	  |	Контрагенты.Ссылка КАК Ссылка
				                       	  |ИЗ
				                       	  |	Справочник.Контрагенты КАК Контрагенты
				                       	  |ГДЕ
				                       	  |	Контрагенты.Наименование = &Наименование
				                       	  |	И НЕ Контрагенты.ЭтоГруппа
				                       	  |	И Контрагенты.Родитель = &Родитель
				                       	  |	И Контрагенты.ВидКонтрагента = &ВидКонтрагента
				                       	  |	И Контрагенты.ФормаСобственности = &ФормаСобственности";
				ТаблицаКонтрагентов	= ЗапросКонтрагента.Выполнить().Выбрать();
				Если ТаблицаКонтрагентов.Следующий() Тогда
					Возврат ТаблицаКонтрагентов.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			// Найти контрагента не удалось. Создание нового контрагента.
			НовыйОбъект	= Справочники.Контрагенты.СоздатьЭлемент();
			НовыйОбъект.Заполнить(Неопределено);
			НовыйОбъект.УстановитьНовыйКод();
			НовыйОбъект.Наименование		= Значение;
			НовыйОбъект.НаименованиеПолное	= Значение;
			НовыйОбъект.ВидКонтрагента		= ВидКонтрагента;
			НовыйОбъект.ФормаСобственности	= ФормаСобственности;
			НовыйОбъект.Фамилия				= ФамилияВладельца;
			НовыйОбъект.Имя					= ИмяВладельца;
			НовыйОбъект.Родитель			= СсылкаНаРодителя;
			попытка
				НовыйОбъект.Записать();
			Исключение
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
				Возврат Неопределено;
			КонецПопытки;
			
			Возврат НовыйОбъект.Ссылка;					
		КонецЕсли;
		
	ИначеЕсли  Тип="СправочникСсылка.Автоработы" Тогда
		Если ТипЗнч(Значение)=Тип("Строка") Тогда
			Если ТипЗнч(ДопПараметры)<>Тип("Структура") Тогда Возврат Неопределено; КонецЕсли;
			
			АртикулРаботы		= Значение;
			Если Врег(АртикулРаботы)="БН" ИЛИ ВРег(АртикулРаботы)="ЗАМЕНИТЬ" Тогда
				АртикулРаботы	= "";
			КонецЕсли;
			
			НаименованиеРаботы = Неопределено; ИсточникРаботы	 = Неопределено;
			ОписаниеРаботы = Неопределено; НаименованиеДетали	= Неопределено; КомментарийРаботы = "";
			ДопПараметры.Свойство("НаименованиеРаботы",	НаименованиеРаботы);
			ДопПараметры.Свойство("НаименованиеДетали",	НаименованиеДетали);
			ДопПараметры.Свойство("ОписаниеРаботы",		ОписаниеРаботы);
			ДопПараметры.Свойство("Источник",			ИсточникРаботы);
			СсылкаНаРодителя	= ГруппаАвторабот;
			
			Если НЕ ЗначениеЗаполнено(НаименованиеРаботы) Тогда
				Возврат Справочники.Автоработы.ПустаяСсылка();
			КонецЕсли;			
			
			Если ЗначениеЗаполнено(НаименованиеДетали) Тогда
				ПолноеНаименование	= НаименованиеРаботы + НаименованиеДетали;
				НаименованиеРаботы = НаименованиеРаботы + " (" + НаименованиеДетали + ")";
				КомментарийРаботы	= ?(ЗначениеЗаполнено(ОписаниеРаботы), ОписаниеРаботы, "");
			Иначе
				Если ЗначениеЗаполнено(ОписаниеРаботы) Тогда
					ПолноеНаименование	= ОписаниеРаботы;
				Иначе
					ПолноеНаименование	= НаименованиеРаботы;
				КонецЕсли;
			КонецЕсли;			
						
			Запросработ	= Новый Запрос();
			Запросработ.УстановитьПараметр("АртикулРаботы",			АртикулРаботы);
			Запросработ.УстановитьПараметр("НаименованиеРаботы",	Лев(НаименованиеРаботы, ДлинаНаименованияРаботы));
			Запросработ.УстановитьПараметр("НаименованиеПолное",		ПолноеНаименование);						
			
			// Поиск по артикулу и наименованию
			Запросработ.Текст	= "ВЫБРАТЬ Автоработы.Ссылка
			                 	  |ИЗ	Справочник.Автоработы КАК Автоработы
			                 	  |ГДЕ	НЕ Автоработы.ЭтоГруппа
			                 	  |	И Автоработы.Артикул = &АртикулРаботы
								  |	И Автоработы.Наименование = &НаименованиеРаботы";
			ТаблицаРабот	= Запросработ.Выполнить().Выбрать();
			Если ТаблицаРабот.Следующий() Тогда
				Возврат ТаблицаРабот.Ссылка;
			КонецЕсли;
			
			// Поиск по полному наименованию
			Если флПоискНаименованиеПолное И ЗначениеЗаполнено(НаименованиеРаботы) И
				СтрДлина(НаименованиеРаботы)>0 Тогда
				Запросработ.Текст	= "ВЫБРАТЬ	Автоработы.Ссылка КАК Ссылка
				                 	  |ИЗ	Справочник.Автоработы КАК Автоработы
				                 	  |ГДЕ	НЕ Автоработы.ЭтоГруппа
				                 	  |	И ВЫРАЗИТЬ(Автоработы.НаименованиеПолное КАК СТРОКА(1000)) = &НаименованиеПолное";
				ТаблицаРабот	= Запросработ.Выполнить().Выбрать();
				Если ТаблицаРабот.Следующий() тогда
					Возврат ТаблицаРабот.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			Номенклатура		= ПривестиЗначение(АртикулРаботы, "СправочникСсылка.Номенклатура", ДопПараметры);
			Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
				Возврат Справочники.Автоработы.ПустаяСсылка();
			КонецЕсли;
			
			НовыйОбъект	= Справочники.Автоработы.СоздатьЭлемент();
			
			НовыйОбъект.ОбменДанными.Загрузка	= Истина;
			
			НовыйОбъект.Заполнить(Неопределено);
			НовыйОбъект.УстановитьНовыйКод();
			НовыйОбъект.Артикул				= АртикулРаботы;
			НовыйОбъект.Наименование		= НаименованиеРаботы;
			НовыйОбъект.НаименованиеПолное	= ПолноеНаименование;
			Если ЗначениеЗаполнено(ДопПараметры.ТипРемонта) Тогда
				НовыйОбъект.ЭтоОкраска = (Найти(ДопПараметры.ТипРемонта,"L") > 0);
			КонецЕсли;
			Если НЕ ПустаяСтрока(КомментарийРаботы) Тогда
				НовыйОбъект.Комментарий	= КомментарийРаботы;
			КонецЕсли;
			
			НовыйОбъект.Родитель		= СсылкаНаРодителя;
			НовыйОбъект.Номенклатура	= Номенклатура;
			Если ЗначениеЗаполнено(ИсточникРаботы) Тогда
				НовыйОбъект.Комментарий		= ИсточникРаботы;
			КонецЕсли;
			
			Попытка
				НовыйОбъект.Записать();
			Исключение
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
				Возврат Справочники.Автоработы.ПустаяСсылка();
			КонецПопытки;
			
			Возврат НовыйОбъект.Ссылка;			
		КонецЕсли;
		
	ИначеЕсли Тип="СправочникСсылка.ХарактеристикиНоменклатуры" Тогда
		Если ТипЗнч(Значение)=Тип("Строка") Тогда
			Если ТипЗнч(ДопПараметры)<>Тип("Структура") Тогда Возврат Неопределено; КонецЕсли;
			VIN	= Неопределено;
			ДопПараметры.Свойство("Автомобиль_VIN",	VIN);
			
			Если НЕ ЗначениеЗаполнено(VIN) Тогда
				Возврат Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			КонецЕсли;
			
			// Поиск по наименованию
			ЗапросХарактеристик	= Новый Запрос();
			ЗапросХарактеристик.УстановитьПараметр("Наименование", VIN);
			ЗапросХарактеристик.Текст	= "ВЫБРАТЬ
			                         	  |	ХарактеристикиНоменклатуры.Ссылка
			                         	  |ИЗ
			                         	  |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			                         	  |ГДЕ
			                         	  |	ХарактеристикиНоменклатуры.Наименование = &Наименование";
			ТаблицаХарактеристик	= ЗапросХарактеристик.Выполнить().Выбрать();
			Если ТаблицаХарактеристик.Следующий() Тогда
				Возврат ТаблицаХарактеристик.Ссылка;
			КонецЕсли;
			
			ВладелецХарактеристики	= Справочники.ТипыНоменклатуры.Штучный;			
			НовыйОбъект	= Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
			НовыйОбъект.Заполнить(Неопределено);
			НовыйОбъект.УстановитьНовыйКод();
			НовыйОбъект.Наименование	= VIN;
			НовыйОбъект.СерийныйНомер	= VIN;
			Если ЗначениеЗаполнено(ВладелецХарактеристики) Тогда
				НовыйОбъект.Владелец	= ВладелецХарактеристики;
			КонецЕсли;
			
			Попытка
				НовыйОбъект.Записать();
			Исключение
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
				Возврат Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			КонецПопытки;
			
			Возврат НовыйОбъект.Ссылка;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Функция возвращает xml в формате saxif для прикрепления
//
Функция ПолучитьХМЛПрикрепления(ПутьКФайлу) Экспорт
	
	СодержимоеФайла	= Base64Строка(Новый ДвоичныеДанные(ПутьКФайлу));	// XMLСтрока
	
	ЗаписьXML	= Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");

	ЗаписьXML.ЗаписатьНачалоЭлемента("AttachmentBinaryList");
	ЗаписьXML.ЗаписатьАтрибут("xmlns",	"http://www.audatex.com/SAXIF");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("AttachmentBinary");
	ЗаписьXML.ЗаписатьНачалоЭлемента("FileName");
	ЗаписьXML.ЗаписатьТекст(СтрЗаменить(ПутьКФайлу,КаталогВременныхФайлов(),""));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Source");
		ЗаписьXML.ЗаписатьНачалоЭлемента("Attachment");
			ЗаписьXML.ЗаписатьТекст(СодержимоеФайла);
		ЗаписьXML.ЗаписатьКонецЭлемента();// Attachment
	ЗаписьXML.ЗаписатьКонецЭлемента();// Source	
	
	ЗаписьXML.ЗаписатьКонецЭлемента();			// AttachmentBinary
	
	ЗаписьXML.ЗаписатьКонецЭлемента();			// AttachmentBinaryList	
	
	ТекстХМЛ	= ЗаписьXML.Закрыть();
	Возврат ТекстХМЛ;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

СерверОснование = ПраваИНастройкиПользователя.Значение("СерверAudaPadWeb");
Если НЕ ЗначениеЗаполнено(СерверОснование) Тогда СерверОснование = "www.audanet.de"; КонецЕсли;
СервисЗаданий		= "https://"+СерверОснование+"/b2b/services/TaskService_v1?wsdl";
СервисПрикреплений	= "https://"+СерверОснование+"/b2b/services/AttachmentService_v1?wsdl";
ПроксиЗаданий		= Неопределено;

КэшКалькуляций	= Новый ТаблицаЗначений();
КэшКалькуляций.Колонки.Добавить("ИдДела",			Новый ОписаниеТипов("Строка"));
КэшКалькуляций.Колонки.Добавить("НомерДела",		Новый ОписаниеТипов("Строка"));
КэшКалькуляций.Колонки.Добавить("ИдКалькуляции",	Новый ОписаниеТипов("Строка"));
КэшКалькуляций.Колонки.Добавить("ДатаКалькуляции",	Новый ОписаниеТипов("Дата"));
КэшКалькуляций.Колонки.Добавить("Шапка",			Новый ОписаниеТипов("Соответствие"));
КэшКалькуляций.Колонки.Добавить("Товары",			Новый ОписаниеТипов("ТаблицаЗначений"));
КэшКалькуляций.Колонки.Добавить("Работы",			Новый ОписаниеТипов("ТаблицаЗначений"));
КэшКалькуляций.Колонки.Добавить("ПараметрыОкраски",	Новый ОписаниеТипов("ТаблицаЗначений"));
КэшКалькуляций.Колонки.Добавить("ДопКоды",			Новый ОписаниеТипов("ТаблицаЗначений"));

ДлинаНаименованияТовара	= Метаданные.Справочники.Номенклатура.ДлинаНаименования;
ДлинаНаименованияРаботы	= Метаданные.Справочники.Автоработы.ДлинаНаименования;

#КонецОбласти

#КонецЕсли