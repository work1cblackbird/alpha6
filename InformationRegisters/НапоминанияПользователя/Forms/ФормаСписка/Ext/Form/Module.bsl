///////////////////////////////////////////////////////////////////////////////
// Модуль формы списка регистра "Напоминания пользователя"
//
///////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РаботаСФормой.НастроитьОсновнойДинамическийСписокФормы(ЭтотОбъект);
		
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// ОценкаПроизводительности
	Если Копирование Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("КопированиеРегистраСведенийНапоминанияПользователя");
	Иначе
		ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеРегистраСведенийНапоминанияПользователя");
	КонецЕсли;
	// Конец ОценкаПроизводительности 
	
КонецПроцедуры 

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеЗаписиРегистраСведенийНапоминанияПользователя");
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик события нажатия кнопки "Удалить записи".
//
// Параметры:
//  Команда - КомандаФормы - Команда, в которой возникло данное событие.
//
&НаКлиенте
Процедура УдалитьЗаписиСтарше(Команда)
	
	ОбработкаОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаВыбораДатыУдаления", ЭтотОбъект);
	
	ПоказатьВводДаты(
		ОбработкаОповещения,
		ТекущаяДата(),
		НСтр("ru = 'Дата, до которой следует удалить все записи напоминаний'"),
		ЧастиДаты.Дата);
	
КонецПроцедуры // УдалитьЗаписиСтарше()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УдалитьЗаписи(ДатаУдаления)
	
	// Получим ключи всех записей старше переданной даты
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НапоминанияПользователя.ВремяСобытия КАК ВремяСобытия
	|ИЗ
	|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
	|ГДЕ
	|	НапоминанияПользователя.ВремяСобытия < &ВремяСобытия";
	
	Запрос.УстановитьПараметр("ВремяСобытия", НачалоДня(ДатаУдаления));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НапоминанияПользователя");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Результат;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ВремяСобытия", "ВремяСобытия");
	Блокировка.Заблокировать();
	
	Выборка = Результат.Выбрать();
	КоличествоЗаписей = Выборка.Количество();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.НапоминанияПользователя.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВремяСобытия.Установить(Выборка.ВремяСобытия);
		
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОтменитьТранзакцию();
			ВывестиСообщение(
				НСтр("ru='Не удалось очистить напоминания пользователей по причине: %1'"),,,,, ИнформацияОбОшибке().Описание);
			Прервать;
		КонецПопытки;
	КонецЦикла;
	Если ТранзакцияАктивна()Тогда
		ЗафиксироватьТранзакцию();
		ВывестиСообщение(
			НСтр("ru='Записи напоминаний пользователей старше %1 успешно удалены.'"),,,,, Формат(ДатаУдаления, "ДЛФ=DD"));
	КонецЕсли;

КонецПроцедуры // УдалитьЗаписи()

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбораДатыУдаления(ДатаУдаления, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДатаУдаления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьЗаписи(ДатаУдаления);
	
	Элементы.Список.Обновить();
	
КонецПроцедуры 

#КонецОбласти
