// Модуль менеджера регистра "Статусы документов маркировки."

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Записывает текущий статус документа в регистр.
//
// Параметры:
//  Документ - ДокументОбъект - документ, в котором произошло событие.
//  ИдентификаторДокумента - Строка - идентификатор документа, полученный из ЧЗ.
//  Статус - ПеречислениеСсылка.СтатусыДокументовМаркировки - текущий статус документа.
//  ОписаниеОшибки - Строка - описание ошибки, возникшей при получении статуса или отправки документа.
//
Процедура ЗаписатьСтатусДокумента(Документ, ИдентификаторДокумента, Статус, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Менеджер = РегистрыСведений.СтатусыДокументовМаркировки.СоздатьМенеджерЗаписи();
	Менеджер.Документ = Документ;
	Менеджер.Прочитать();
	Менеджер.Документ = Документ;
	Менеджер.ИдентификаторДокумента = ИдентификаторДокумента;
	Менеджер.Статус = МаркировкаТоваровСервер.СтатусДокументаМаркировкиПоЗначениюИзЧЗ(Статус);
	Менеджер.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Организация");
	Менеджер.ОписаниеОшибки = ОписаниеОшибки;
	Попытка
		Менеджер.Записать(Истина);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru='Ошибка записи статуса документа: %1'"),ОписаниеОшибки())
		);
	КонецПопытки;
	
КонецПроцедуры

// Получает статус документа
//
// Параметры:
// 	Документ - ДокументСсылка - ссылка на документ статус, которого необходимо получить
// 
// Возвращаемое значение:
//  Структура - идентификатор документа, текущий статус документа, описание ошибки при получении статуса
//
Функция ПолучитьСтатусДокумента(Документ) Экспорт
	
	Менеджер = РегистрыСведений.СтатусыДокументовМаркировки.СоздатьМенеджерЗаписи();
	Менеджер.Документ = Документ;
	Менеджер.Прочитать();
	
	Результат = Новый Структура("Статус,ИдентификаторДокумента, ОписаниеОшибки");
	
	Если НЕ Менеджер.Выбран() Тогда
		Результат.Статус = Перечисления.СтатусыДокументовМаркировки.Новый;
		Результат.ИдентификаторДокумента = "";
		Результат.ОписаниеОшибки = "";
	Иначе
		ЗаполнитьЗначенияСвойств(Результат, Менеджер);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает таблицу документов, в которых необходимо обновить статусы
//
// Параметры:
//  СтатусInProgress - Булево - необходимость обновления статуса документа
//
// Возвращаемое значение:
//  ТаблицаЗначений - документы к обновлению статусов.
//
Функция ДокументыКОбновлению(СтатусInProgress = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Статус", СтатусыКОбновлению(СтатусInProgress));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыДокументовМаркировки.Документ КАК Документ,
	|	СтатусыДокументовМаркировки.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	СтатусыДокументовМаркировки.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.СтатусыДокументовМаркировки КАК СтатусыДокументовМаркировки
	|ГДЕ
	|	СтатусыДокументовМаркировки.Статус В (&Статус)
	|ИТОГИ ПО
	|	Организация";
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

// Создание элементов при первом запуске
//
Процедура ВыполнитьНачальноеЗаполнение() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВводВОборотКодовМаркировки.Ссылка КАК Документ,
	|	ВводВОборотКодовМаркировки.Организация КАК Организация,
	|	ВводВОборотКодовМаркировки.УдалитьОписаниеОшибки КАК ОписаниеОшибки,
	|	ВводВОборотКодовМаркировки.УдалитьИдентификаторДокумента КАК ИдентификаторДокумента,
	|	ВводВОборотКодовМаркировки.УдалитьСтатус КАК Статус
	|ИЗ
	|	Документ.ВводВОборотКодовМаркировки КАК ВводВОборотКодовМаркировки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратВОборотКодовМаркировки.Ссылка,
	|	ВозвратВОборотКодовМаркировки.Организация,
	|	ВозвратВОборотКодовМаркировки.УдалитьОписаниеОшибки,
	|	ВозвратВОборотКодовМаркировки.УдалитьИдентификаторДокумента,
	|	ВозвратВОборотКодовМаркировки.УдалитьСтатус
	|ИЗ
	|	Документ.ВозвратВОборотКодовМаркировки КАК ВозвратВОборотКодовМаркировки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВыводИзОборотаКодовМаркировки.Ссылка,
	|	ВыводИзОборотаКодовМаркировки.Организация,
	|	ВыводИзОборотаКодовМаркировки.УдалитьОписаниеОшибки,
	|	ВыводИзОборотаКодовМаркировки.УдалитьИдентификаторДокумента,
	|	ВыводИзОборотаКодовМаркировки.УдалитьСтатус
	|ИЗ
	|	Документ.ВыводИзОборотаКодовМаркировки КАК ВыводИзОборотаКодовМаркировки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтгрузкаТоваровКодовМаркировки.Ссылка,
	|	ОтгрузкаТоваровКодовМаркировки.Организация,
	|	ОтгрузкаТоваровКодовМаркировки.УдалитьОписаниеОшибки,
	|	ОтгрузкаТоваровКодовМаркировки.УдалитьИдентификаторДокумента,
	|	ОтгрузкаТоваровКодовМаркировки.УдалитьСтатус
	|ИЗ
	|	Документ.ОтгрузкаТоваровКодовМаркировки КАК ОтгрузкаТоваровКодовМаркировки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Перемаркировка.Ссылка,
	|	Перемаркировка.Организация,
	|	Перемаркировка.УдалитьОписаниеОшибки,
	|	Перемаркировка.УдалитьИдентификаторДокумента,
	|	Перемаркировка.УдалитьСтатус
	|ИЗ
	|	Документ.Перемаркировка КАК Перемаркировка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписаниеКодовМаркировки.Ссылка,
	|	СписаниеКодовМаркировки.Организация,
	|	СписаниеКодовМаркировки.УдалитьОписаниеОшибки,
	|	СписаниеКодовМаркировки.УдалитьИдентификаторДокумента,
	|	СписаниеКодовМаркировки.УдалитьСтатус
	|ИЗ
	|	Документ.СписаниеКодовМаркировки КАК СписаниеКодовМаркировки";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Менеджер = РегистрыСведений.СтатусыДокументовМаркировки.СоздатьМенеджерЗаписи();
		Менеджер.Документ = Выборка.Документ;
		Менеджер.Прочитать();
		ЗаполнитьЗначенияСвойств(Менеджер, Выборка, "Документ,Организация,ИдентификаторДокумента,Статус,ОписаниеОшибки");
		Менеджер.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтатусыКОбновлению(СтатусInProgress)
	
	Результат = Новый Массив;
	
	Если СтатусInProgress Тогда
		Результат.Добавить(Перечисления.СтатусыДокументовМаркировки.ОжидаетОбработки);
	Иначе
		Результат.Добавить(Перечисления.СтатусыДокументовМаркировки.ОжидаетПриемку);
		Результат.Добавить(Перечисления.СтатусыДокументовМаркировки.ОжидаетРегистрации);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
#КонецЕсли