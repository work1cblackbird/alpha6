// Модуль набора записей регистра "Цены"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ДокументОбъект Экспорт;  // документ объект для записи
Перем Контрагент     Экспорт;  // Контрагент
Перем ДоговорВзаиморасчетов Экспорт; // Договор взаиморасчетов.
Перем ТипЦен         Экспорт;  // тип устанавливаемых цен
Перем ПодразделениеКомпании                  Экспорт;   // Подразделение компании.
Перем ИмяРеквизитаНоменклатура               Экспорт;   // Заполняется в случае, если реквизит содержащий номенклатуру имеет имя отличное от "Номенклатура"
Перем ИмяРеквизитаХарактеристикаНоменклатуры Экспорт;	// Заполняется в случае, если реквизит содержащий характеристику номенклатуры имеет имя отличное от "ХарактеристикаНоменклатуры"
Перем ИмяРеквизитаЕдиницаИзмерения           Экспорт;	// Заполняется в случае, если реквизит содержащий единицу измерения имеет имя отличное от "ЕдиницаИзмерения".
Перем ИмяРеквизитаЦена           Экспорт;	// Заполняется в случае, если реквизит содержащий устанавливаемую цену имеет имя отличное от "ЦенаРозничная"
Перем РезультатЗапросаПоТоварам  Экспорт;	// РезультатЗапроса или ТаблицаЗначений. Устанавливается если документ имеет "необычную" ТЧ
Перем УстанавливатьЦеныУслуг     Экспорт;	// Булево. Если Ложь, то услуги исключаются из рассмотрения.
Перем ПроверятьОдинаковыеЦены    Экспорт;	// Булево. Если Истина, то перед установкой цен проверяется не дублируются ли цены
Перем ДатаНачалаДействия         Экспорт;   // дата начала действия
Перем МожноСделатьОтменуЦены     Экспорт;   // Признак учета нулевых цен
Перем ТипЦенВТабличнойЧасти      Экспорт;   // Булево. Признак наличия типа цены в табличной части документа

// ускоряющие переменные
Перем ВалютаТипаЦен,КурсВалютыТипаЦен;
Перем АлгоритмПолученияЦены;
Перем УчетЦенПоХарактеристикам, УчетЦенПоЕдиницамИзмерения;
Перем ИмяДокумента; // Имя объекта метаданных.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийРегистраСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// получаем таблицу товаров и их цен
Функция ПолучитьТаблицуТоваров()
	// В данном запросе, помимо содержимого табличной части, получается базовая цена.
	// Это цена, которая уже была назначена для номенклатуры с учетом аналитик учета цены (характеристики, ед. измерений).
	// При проведении документа, данная цена "ЦенаВБазе" сравнивается с ценой из ТЧ. Если
	// эти цены различаются, то создаются записи в регистре "Цены", в противном случае записи не делаются.
	// В связи с этим, в данном запросе нет необходимости "гибкого" получения текущей цены из регистра "Цены".
	// Т.е. если в документе выбран тип цен с аналитикой учета по характеристикам номенклатуры, то для 
	// номенклатуры ищется цена СТРОГО с учетом указанной для нее характеристикой. А если такой цены не найдено, то
	// поиск цены без учета характеристики НЕ ВЫПОЛНЯЕТСЯ. 
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	МИНИМУМ(ДокументТовары.НомерСтроки) КАК НомерСтроки,
	|	ДокументТовары.%1.Код	         КАК Код,
	|	ДокументТовары.%1		         КАК %1,
	|	ДокументТовары.%1.Наименование КАК НоменклатураНаименование,
	|	МАКСИМУМ(
	|		ВЫБОР
	|			КОГДА ДокументТовары.Коэффициент = 0
	|			ТОГДА ДокументТовары.%2
	|			ИНАЧЕ ДокументТовары.%2 / ДокументТовары.Коэффициент
	|		КОНЕЦ
	| ) КАК НоваяЦена,";
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗапроса,
		ИмяРеквизитаНоменклатура,
		ИмяРеквизитаЦена
	);
	
	Если УчетЦенПоХарактеристикам Тогда
		Запрос.Текст = Запрос.Текст
			+ " ДокументТовары." + ИмяРеквизитаХарактеристикаНоменклатуры
			+ " КАК " + ИмяРеквизитаХарактеристикаНоменклатуры + ","
			+ Символы.ПС
			+ " ДокументТовары." + ИмяРеквизитаНоменклатура
			+ ".ТипНоменклатуры.УчетЦенТолькоВРазрезеДопПараметров КАК УчетЦенТолькоВРазрезеДопПараметров, ";
	ИначеЕсли УчетЦенПоЕдиницамИзмерения Тогда
		Запрос.Текст = Запрос.Текст
			+ " ДокументТовары." + ИмяРеквизитаЕдиницаИзмерения + " КАК " + ИмяРеквизитаЕдиницаИзмерения + ","
			+ Символы.ПС
			+ " ДокументТовары." + ИмяРеквизитаНоменклатура
			+ ".ТипНоменклатуры.УчетЦенТолькоВРазрезеДопПараметров КАК УчетЦенТолькоВРазрезеДопПараметров, ";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	МАКСИМУМ(ЕСТЬNULL(ЦеныВБазе.Цена,0))	КАК ЦенаВБазе
	|ИЗ
	|	Документ." + ИмяДокумента + ".Товары КАК ДокументТовары
	|	ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.Цены.СрезПоследних(&Момент, ТипЦен=&ТипЦен 
	|												И Номенклатура В (ВЫБРАТЬ " + ИмяРеквизитаНоменклатура +" ИЗ Документ." + ИмяДокумента + ".Товары ГДЕ Ссылка=&Ссылка) 
	|												И Контрагент=&Контрагент
	|												И ДоговорВзаиморасчетов=&ДоговорВзаиморасчетов
	|												И ПодразделениеКомпании=&ПодразделениеКомпании) КАК ЦеныВБазе
	|
	|ПО
	|	(ДокументТовары." + ИмяРеквизитаНоменклатура + " = ЦеныВБазе.Номенклатура)
	|	И ЦеныВБазе.Цена > 0";
	
	Если УчетЦенПоХарактеристикам Тогда
		Запрос.Текст = Запрос.Текст + " И (ДокументТовары." + ИмяРеквизитаХарактеристикаНоменклатуры + " = ЦеныВБазе.ХарактеристикаНоменклатуры)";
	ИначеЕсли УчетЦенПоЕдиницамИзмерения Тогда
		Запрос.Текст = Запрос.Текст + " И (ДокументТовары." + ИмяРеквизитаЕдиницаИзмерения + " = ЦеныВБазе.ЕдиницаИзмерения)"
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|ГДЕ
	|	(ДокументТовары.Ссылка = &Ссылка)" + ?(МожноСделатьОтменуЦены, "", "
	|	И (ДокументТовары." + ИмяРеквизитаЦена + " > 0)") + "
	|	" + ?(УстанавливатьЦеныУслуг, "", "И(ДокументТовары." + ИмяРеквизитаНоменклатура + ".ВидНоменклатуры<>ЗНАЧЕНИЕ(Перечисление.ВидыНоменклатуры.Услуга))")+"
	|	" + ?(ТипЦенВТабличнойЧасти, "И (ДокументТовары.ТипЦен = &ТипЦен)", "") +"
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументТовары." + ИмяРеквизитаНоменклатура;
	
	Если УчетЦенПоХарактеристикам Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ДокументТовары." + ИмяРеквизитаХарактеристикаНоменклатуры; 
	ИначеЕсли УчетЦенПоЕдиницамИзмерения Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ДокументТовары." + ИмяРеквизитаЕдиницаИзмерения;
	КонецЕсли;

	Запрос.УстановитьПараметр("Ссылка",                ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ТипЦен",                ТипЦен);
	Запрос.УстановитьПараметр("Контрагент",            Контрагент);
	Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", ДоговорВзаиморасчетов);
	Запрос.УстановитьПараметр("ПодразделениеКомпании", ПодразделениеКомпании);
	Запрос.УстановитьПараметр("Момент",                ДатаНачалаДействия);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Функция проверяет на отсутствие в таблице товаров одинаковых записей.
//
// Параметры:
//  ТаблицаТоваров - "ТаблицаЗначений" - Таблица значений содержащая устанавливаемые цены.
//
// Возвращаемое значение:
//   Булево - Истина - проверка прошла успешно, Ложь - ошибка.
// 
Функция ПроверитьНаОдинаковыеЗаписи(ТаблицаТоваров)
	Результат = Истина;
	
	ТаблицаКопия = ТаблицаТоваров.Скопировать();
	ТаблицаКопия.Колонки.Добавить("КоличествоПовторов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаКопия.ЗаполнитьЗначения(1, "КоличествоПовторов");
	
	// Будем сворачивать таблицу. Сначала сформируем строку сворачивания.
	КолонкиГруппировки = ИмяРеквизитаНоменклатура;
	Если УчетЦенПоХарактеристикам Тогда
		КолонкиГруппировки = КолонкиГруппировки + ", "+ИмяРеквизитаХарактеристикаНоменклатуры;
	ИначеЕсли УчетЦенПоЕдиницамИзмерения Тогда
		КолонкиГруппировки = КолонкиГруппировки + ", "+ИмяРеквизитаЕдиницаИзмерения;		
	КонецЕсли;   	
	ТаблицаКопия.Свернуть(КолонкиГруппировки, "КоличествоПовторов");
	
	Ошибки = СтрШаблон(
		НСтр("ru = 'Ошибка. Тип цен <%1>,аналитика учета цен <%2> - попытка назначения одинаковых цен для следующих позиций:'"),
		ТипЦен,
		АлгоритмПолученияЦены
	);
	Для Каждого ТекСтрокаТЗ Из ТаблицаКопия Цикл  	
		Если ТекСтрокаТЗ.КоличествоПовторов > 1 Тогда
			Результат   = Ложь;
			Ошибки = Ошибки + Символы.ПС + " - " + "Номенклатура" + " <" + ТекСтрокаТЗ[ИмяРеквизитаНоменклатура] + ">";
			Если УчетЦенПоХарактеристикам Тогда
				Ошибки = Ошибки + ", " + НСтр("ru = 'Характеристика номенклатуры'") + " <" 
					+ ТекСтрокаТЗ[ИмяРеквизитаХарактеристикаНоменклатуры] + ">";
			ИначеЕсли УчетЦенПоЕдиницамИзмерения Тогда					
				Ошибки = Ошибки + ", " + НСтр("ru = 'Единица измерения'") + " <" + ТекСтрокаТЗ[ИмяРеквизитаЕдиницаИзмерения] + ">";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат Тогда
		ОбщегоНазначения.СообщитьПользователю(Ошибки,ДокументОбъект,,,Истина);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // ПроверитьНаОдинаковыеЗаписи() 

// Функция производит установку цен.
Функция УстановитьЦены() Экспорт
	
	// Получим имя документа.	
	ИмяДокумента = ДокументОбъект.Метаданные().Имя;
	
	МожноСделатьОтменуЦены = ?(МожноСделатьОтменуЦены = Неопределено, Ложь, МожноСделатьОтменуЦены);
	
	// заполним незаполненные переменные.
	ДатаПереоценки = ?(ТипЗнч(ДатаНачалаДействия) = Тип("Дата"), ДатаНачалаДействия, ДокументОбъект.Дата);
	
	Если ПодразделениеКомпании = Неопределено Тогда
		Если ЕстьРеквизит(ДокументОбъект, "ПодразделениеКомпании") Тогда
			ПодразделениеКомпании = ДокументОбъект.ПодразделениеКомпании;
		КонецЕсли;
	КонецЕсли;
	
	Если Контрагент = Неопределено Тогда
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	// Не устанавливаем расчетные цены.
	// Если цена расчетная выходим.
	Если ТипЦен.Рассчитывается Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Невозможно установить расчетную цену'") + " 	" + ТипЦен,ДокументОбъект,,,Ложь);
		Возврат Истина;
	КонецЕсли;
	
	// Получим алгоритм получения цены для данного типа цен.
	АлгоритмПолученияЦены      = ?(ТипЦен.АлгоритмПолученияЦены.Пустая(), Перечисления.АлгоритмПолученияЦены.ПоНоменклатуре, ТипЦен.АлгоритмПолученияЦены);
	УчетЦенПоХарактеристикам   = (АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоХарактеристике);
	УчетЦенПоЕдиницамИзмерения = (АлгоритмПолученияЦены = Перечисления.АлгоритмПолученияЦены.ПоЕдиницеИзмерения);
	
	// Получаем таблицу товаров. Независимо как будет получена данная таблица, названия колонок должны быть стандартными.
	Если (РезультатЗапросаПоТоварам = Неопределено) ИЛИ (ТипЗнч(РезультатЗапросаПоТоварам)<> Тип("РезультатЗапроса")) И (ТипЗнч(РезультатЗапросаПоТоварам)<>Тип("ТаблицаЗначений")) Тогда
		// Значит получаем из табличной части документа.
		// Проверим, а если у нас в ТЧ соответствующие реквизиты.
		ТЧМетаданные = ДокументОбъект.Метаданные().ТабличныеЧасти.Товары;
		УчетЦенПоХарактеристикам   = УчетЦенПоХарактеристикам И (ТЧМетаданные.Реквизиты.Найти(ИмяРеквизитаХарактеристикаНоменклатуры)<>Неопределено);
		УчетЦенПоЕдиницамИзмерения = УчетЦенПоЕдиницамИзмерения И (ТЧМетаданные.Реквизиты.Найти(ИмяРеквизитаЕдиницаИзмерения)<>Неопределено);
		
		// Получаем таблицу.
		РезультатЗапросаПоТоварам = ПолучитьТаблицуТоваров();
	Иначе
		// Список необходимых движений по ценам пришел извне. Проверим, таблица значений ли это.
		Если ТипЗнч(РезультатЗапросаПоТоварам) = Тип("РезультатЗапроса") Тогда
			РезультатЗапросаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
		КонецЕсли;
		
		// Теперь также определим, если в данной таблице нужные нам колонки.
		УчетЦенПоХарактеристикам   = УчетЦенПоХарактеристикам И (РезультатЗапросаПоТоварам.Колонки.Найти(ИмяРеквизитаХарактеристикаНоменклатуры)<>Неопределено);
		УчетЦенПоЕдиницамИзмерения = УчетЦенПоЕдиницамИзмерения И (РезультатЗапросаПоТоварам.Колонки.Найти(ИмяРеквизитаЕдиницаИзмерения)<>Неопределено);
	КонецЕсли;
	
	// Проверим повторную установку одной и той же цены.
	Если Не ПроверитьНаОдинаковыеЗаписи(РезультатЗапросаПоТоварам) Тогда
		РезультатЗапросаПоТоварам = Неопределено; 
		УстанавливатьЦеныУслуг    = Ложь;
		ПроверятьОдинаковыеЦены   = Истина;
		
		// Убиваем циклическую ссылку.
		ДокументОбъект = Неопределено;
		Возврат Ложь;
	КонецЕсли;
	
	// Ускоряющие переменные
	СтрТипЦен = ТипЦен.Наименование;
	СообщатьОбИзменении = ПраваИНастройкиПользователя.Значение("СообщатьОбИзмененииЦен", ДокументОбъект);
	
	ВалютаТипаЦен = ТипЦен.ВалютаЦены; СтрВалютаТипаЦен = СокрЛП(ВалютаТипаЦен.Наименование);
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаТипаЦен,ДокументОбъект.Дата);
	КурсВалютыТипаЦен = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	// Устанавливаем цены
	Результат = Истина;
	Для Каждого СтрокаТовар Из РезультатЗапросаПоТоварам Цикл
		Если ТипЦен.ВВалютеУчета Тогда
			ВалютаТипаЦен     = СтрокаТовар[ИмяРеквизитаНоменклатура].ВалютаУчета;
			СтрВалютаТипаЦен  = СокрЛП(ВалютаТипаЦен.Наименование);
			СтруктураКурса    = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаТипаЦен,ДокументОбъект.Дата);
			КурсВалютыТипаЦен = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВалютаТипаЦен) Тогда
			Если ИмяРеквизитаЦена = "ЦенаРозничная" ИЛИ ИмяРеквизитаЦена = "ЦенаРозничнаяПриход" Тогда  //пересчитываем только не розничные цены
				НоваяЦена = Окр(СтрокаТовар.НоваяЦена,2);
			ИначеЕсли ЕстьРеквизит(ДокументОбъект, "ВалютаДокумента") Тогда
				НоваяЦена = Окр(РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаТовар.НоваяЦена, ДокументОбъект.ВалютаДокумента, ДокументОбъект.КурсДокумента,ВалютаТипаЦен,КурсВалютыТипаЦен),2);
			Иначе
				// в случае для документа "Изменение цен"
				НоваяЦена = СтрокаТовар.НоваяЦена;
			КонецЕсли;
			
				НоваяЗапись = Добавить();
				НоваяЗапись.Период                = ДатаПереоценки;
				НоваяЗапись.Регистратор           = ДокументОбъект.Ссылка;
				НоваяЗапись.Контрагент            = Контрагент;
				НоваяЗапись.ДоговорВзаиморасчетов = ДоговорВзаиморасчетов;
				НоваяЗапись.ТипЦен                = ТипЦен;
				НоваяЗапись.Номенклатура          = СтрокаТовар[ИмяРеквизитаНоменклатура];
				НоваяЗапись.ПодразделениеКомпании = ПодразделениеКомпании;
				НоваяЗапись.Цена                  = НоваяЦена;
				
				// Если для типа номенклатуры, текущей номенклатуры, учет по ценам ведется строго в разрезе доп. характеристик, то
				// необходимо чтобы эти доп. характеристики были указаны (СТРОГО!).
				Если УчетЦенПоХарактеристикам Тогда
					УчетЦен = НСтр("ru = 'По характеристикам'");
					ЗначениеУчетаЦен = Строка(СтрокаТовар.ХарактеристикаНоменклатуры);
					Если СтрокаТовар.УчетЦенТолькоВРазрезеДопПараметров И СтрокаТовар[ИмяРеквизитаХарактеристикаНоменклатуры].Пустая() Тогда
						Результат = Ложь;
						Попытка
							СтрокаНомер = " " + "Строка" + " №" + СтрокаТовар.НомерСтроки
						Исключение 
							СтрокаНомер = "";
						КонецПопытки;
						ОбщегоНазначения.СообщитьПользователю(
							СтрШаблон(
								НСтр("ru = 'Невозможно установить цену для номенклатуры ""%1"", так как тип номенклатуры %2 предусматривает обязательный учет цен только в разрезе единиц измерения,при этом тип цен ""%3"" использует ведение аналитики учета цен ""По характеристике"".%4'"),
								СтрокаТовар.НоменклатураНаименование,
								СтрокаТовар[ИмяРеквизитаНоменклатура].ТипНоменклатуры,
								ТипЦен,
								СтрокаНомер),
							ДокументОбъект,
							"Товары"
						);
						Продолжить;
						
					Иначе
						НоваяЗапись.ХарактеристикаНоменклатуры = СтрокаТовар[ИмяРеквизитаХарактеристикаНоменклатуры]; 
					КонецЕсли;
				ИначеЕсли УчетЦенПоЕдиницамИзмерения Тогда
					УчетЦен = НСтр("ru = 'По единицам измерения'");
					ЗначениеУчетаЦен = Строка(СтрокаТовар.ЕдиницаИзмерения); 
					Если СтрокаТовар.УчетЦенТолькоВРазрезеДопПараметров И СтрокаТовар[ИмяРеквизитаЕдиницаИзмерения].Пустая() Тогда
						Результат = Ложь;
						Попытка 
							СтрокаНомер = " " + "Строка" + " №" + СтрокаТовар.НомерСтроки
						Исключение
							СтрокаНомер = "";
						КонецПопытки;
						ОбщегоНазначения.СообщитьПользователю(
							СтрШаблон(
								НСтр("ru = 'Невозможно установить цену для номенклатуры ""%1"", так как не задана единица измерения номенклатуры.%2'"),
								 СтрокаТовар.НоменклатураНаименование, 
								 СтрокаНомер),
							ДокументОбъект,
							"Товары"
						);
						Продолжить;
					Иначе
						НоваяЗапись.ЕдиницаИзмерения = СтрокаТовар[ИмяРеквизитаЕдиницаИзмерения];
					КонецЕсли;
				Иначе
					УчетЦен = НСтр("ru = 'По номенклатуре'");
				КонецЕсли;
				
				Если СообщатьОбИзменении И НоваяЦена <> СтрокаТовар.ЦенаВБазе Тогда
					ОбщегоНазначения.СообщитьПользователю(
							СтрШаблон(
								НСтр("ru = '[%1] Товар ""%2""; Старая цена: %3; Новая цена: %4; Тип цен: %5%6'"),
								УправлениеПечатьюПлатформа.ПолучитьЗначениеКолонкиКода(СтрокаТовар[ИмяРеквизитаНоменклатура]),
								СокрЛП(СтрокаТовар.НоменклатураНаименование),
								Формат(СтрокаТовар.ЦенаВБазе,"ЧЦ=15; ЧДЦ=2; ЧН=0,00")+" "+СтрВалютаТипаЦен,
								Формат(НоваяЦена,"ЧЦ=15; ЧДЦ=2; ЧН=0,00")+" "+СтрВалютаТипаЦен,
								СтрТипЦен,
								?(НЕ ЗначениеЗаполнено(УчетЦен), "", "; " + НСтр("ru = 'Учет цен:'") + " " + УчетЦен)
									+ ?(НЕ ЗначениеЗаполнено(ЗначениеУчетаЦен), "", "(" + ЗначениеУчетаЦен + ")")
									+ ?(НЕ ЗначениеЗаполнено(Контрагент), "", "; " + "Контрагент:" + " " + СокрЛП(Контрагент.Наименование))
									+ ?(НЕ ЗначениеЗаполнено(ДоговорВзаиморасчетов), "", "; " + "Договор:" + " " 
									+ СокрЛП(ДоговорВзаиморасчетов.Наименование))),
						,
						"Товары"
					);
				КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Скинем некоторые переменные
	РезультатЗапросаПоТоварам = Неопределено;
	УстанавливатьЦеныУслуг    = Ложь;
	ПроверятьОдинаковыеЦены   = Истина;
	ДатаНачалаДействия        = Неопределено;
	
	// Убиваем циклическую ссылку
	ДокументОбъект = Неопределено;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область Инициализация

ИмяРеквизитаНоменклатура               = "Номенклатура";
ИмяРеквизитаХарактеристикаНоменклатуры = "ХарактеристикаНоменклатуры";
ИмяРеквизитаЕдиницаИзмерения           = "ЕдиницаИзмерения";
ИмяРеквизитаЦена                       = "ЦенаРозничная";
УстанавливатьЦеныУслуг                 = Ложь;
Контрагент                             = Справочники.Контрагенты.ПустаяСсылка();
ДоговорВзаиморасчетов                  = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
ПроверятьОдинаковыеЦены                = Истина;
ПодразделениеКомпании                  = Неопределено;
МожноСделатьОтменуЦены                 = Ложь;
ТипЦенВТабличнойЧасти                  = Ложь;

#КонецОбласти

#КонецЕсли