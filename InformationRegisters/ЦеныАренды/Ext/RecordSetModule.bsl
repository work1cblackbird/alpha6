// Модуль набора записей регистра "Стоимости временного использования"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ДокументОбъект Экспорт;               // Документ объект выполняющий движения
Перем ВидАренды Экспорт;					// Вид временного использования
Перем ДатаНачалаДействия Экспорт;    		// Дата начала действий
Перем РезультатЗапросаПоСтоимости Экспорт;	// Таблица стоимости аренды автомобилей
Перем ПодразделениеКомпании Экспорт;		// Подразделение-арендодатель

// ускоряющие переменные
Перем ВалютаВидаИспользования;				// Ссылка на валюту типа цен
Перем КурсВалютыВидаИспользования;			// Курс валюты типа цен

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ОбработкаСобытийРегистраСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// получаем таблицу опций автомобилей и их цен
Функция ПолучитьТаблицуСтоимости()
	
	ИмяДокумента = ДокументОбъект.Метаданные().Имя;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ДокументАвтомобили.Модель КАК Модель,
	|	ДокументАвтомобили.ВариантКомплектации КАК ВариантКомплектации,
	|	ДокументАвтомобили.Минута КАК Минута,
	|	ДокументАвтомобили.Час КАК Час,
	|	ДокументАвтомобили.Сутки КАК Сутки,
	|	ДокументАвтомобили.Неделя КАК Неделя,
	|	ДокументАвтомобили.Месяц КАК Месяц,
	|	ДокументАвтомобили.Квартал КАК Квартал,
	|	ДокументАвтомобили.Год КАК Год,
	|	ДокументАвтомобили.Депозит КАК Депозит,
	|	ЕСТЬNULL(ЦеныАрендыСрезПоследних.Минута, 0) КАК МинутаВБазе,
	|	ЕСТЬNULL(ЦеныАрендыСрезПоследних.Час, 0) КАК ЧасВБазе,
	|	ЕСТЬNULL(ЦеныАрендыСрезПоследних.Сутки, 0) КАК СуткиВБазе,
	|	ЕСТЬNULL(ЦеныАрендыСрезПоследних.Неделя, 0) КАК НеделяВБазе,
	|	ЕСТЬNULL(ЦеныАрендыСрезПоследних.Месяц, 0) КАК МесяцВБазе,
	|	ЕСТЬNULL(ЦеныАрендыСрезПоследних.Квартал, 0) КАК КварталВБазе,
	|	ЕСТЬNULL(ЦеныАрендыСрезПоследних.Год, 0) КАК ГодВБазе,
	|	ЕСТЬNULL(ЦеныАрендыСрезПоследних.Депозит, 0) КАК ДепозитВБазе
	|ИЗ
	|	Документ." + ИмяДокумента + ".Автомобили КАК ДокументАвтомобили
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныАренды.СрезПоследних(
	|				&Момент,
	|				ПодразделениеКомпании = &ПодразделениеКомпании
	|					И ВидАренды = &ВидАренды
	|					И (Модель, ВариантКомплектации) В
	|						(ВЫБРАТЬ
	|							ИзменениеЦенАрендыАвтомобили.Модель КАК Модель,
	|							ИзменениеЦенАрендыАвтомобили.ВариантКомплектации КАК ВариантКомплектации
	|						ИЗ
	|							Документ." + ИмяДокумента + ".Автомобили КАК ИзменениеЦенАрендыАвтомобили
	|						ГДЕ
	|							ИзменениеЦенАрендыАвтомобили.Ссылка = &Ссылка)) КАК ЦеныАрендыСрезПоследних
	|		ПО ДокументАвтомобили.Модель = ЦеныАрендыСрезПоследних.Модель
	|			И ДокументАвтомобили.ВариантКомплектации = ЦеныАрендыСрезПоследних.ВариантКомплектации
	|ГДЕ
	|	ДокументАвтомобили.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПодразделениеКомпании", ПодразделениеКомпании);
	Запрос.УстановитьПараметр("ВидАренды", ВидАренды);
	Запрос.УстановитьПараметр("Момент", ДатаНачалаДействия);
	
	Возврат Запрос.Выполнить();
КонецФункции

// устанавливает цены
Функция УстановитьЦены() Экспорт
	
	// заполним незаполненные переменные.
	ДатаПереоценки = ?(ТипЗнч(ДатаНачалаДействия) = Тип("Дата"), ДатаНачалаДействия, ДокументОбъект.Дата);
	
	// получаем таблицу опций автомобилей
	Если (РезультатЗапросаПоСтоимости = Неопределено)
		ИЛИ (ТипЗнч(РезультатЗапросаПоСтоимости) <> Тип("РезультатЗапроса"))
		И (ТипЗнч(РезультатЗапросаПоСтоимости) <> Тип("ТаблицаЗначений")) Тогда
		РезультатЗапросаПоСтоимости = ПолучитьТаблицуСтоимости();
	КонецЕсли;
	Если ТипЗнч(РезультатЗапросаПоСтоимости) = Тип("РезультатЗапроса") Тогда
		РезультатЗапросаПоСтоимости = РезультатЗапросаПоСтоимости.Выгрузить();
	КонецЕсли;
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидАренды, "Валюта");
	
	// ускоряющие переменные
	ВалютаВидаИспользования = СтруктураРеквизитов.Валюта;
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВидаИспользования, ДокументОбъект.Дата);
	КурсВалютыВидаИспользования = СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	// устанавливаем цены
	Для Каждого СтрокаСтоимости Из РезультатЗапросаПоСтоимости Цикл
		
		Если ЗначениеЗаполнено(ВалютаВидаИспользования) Тогда
			НоваяЦенаМинута  = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаСтоимости.Минута,
					ДокументОбъект.ВалютаДокумента,
					ДокументОбъект.КурсДокумента,
					ВалютаВидаИспользования,
					КурсВалютыВидаИспользования),
				2);
			НоваяЦенаЧас     = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаСтоимости.Час,
					ДокументОбъект.ВалютаДокумента,
					ДокументОбъект.КурсДокумента,
					ВалютаВидаИспользования,
					КурсВалютыВидаИспользования),
				2);
			НоваяЦенаСутки   = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаСтоимости.Сутки,
					ДокументОбъект.ВалютаДокумента,
					ДокументОбъект.КурсДокумента,
					ВалютаВидаИспользования,
					КурсВалютыВидаИспользования),
				2);
			НоваяЦенаНеделя  = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаСтоимости.Неделя,
					ДокументОбъект.ВалютаДокумента,
					ДокументОбъект.КурсДокумента,
					ВалютаВидаИспользования,
					КурсВалютыВидаИспользования),
				2);
			НоваяЦенаМесяц   = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаСтоимости.Месяц,
					ДокументОбъект.ВалютаДокумента,
					ДокументОбъект.КурсДокумента,
					ВалютаВидаИспользования,
					КурсВалютыВидаИспользования),
				2);
			НоваяЦенаКвартал = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаСтоимости.Квартал,
					ДокументОбъект.ВалютаДокумента,
					ДокументОбъект.КурсДокумента,
					ВалютаВидаИспользования,
					КурсВалютыВидаИспользования),
				2);
			НоваяЦенаГод     = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаСтоимости.Год,
					ДокументОбъект.ВалютаДокумента,
					ДокументОбъект.КурсДокумента,
					ВалютаВидаИспользования,
					КурсВалютыВидаИспользования),
				2);
			НоваяЦенаДепозит = Окр(
				РаботаСКурсамиВалютПлатформа.ПересчетПоВалюте(СтрокаСтоимости.Депозит,
					ДокументОбъект.ВалютаДокумента,
					ДокументОбъект.КурсДокумента,
					ВалютаВидаИспользования,
					КурсВалютыВидаИспользования),
				2);
			// если цена не была установлена или изменилась тогда установим ее
			Если НоваяЦенаМинута <> СтрокаСтоимости.МинутаВБазе
				ИЛИ НоваяЦенаЧас <> СтрокаСтоимости.ЧасВБазе
				ИЛИ НоваяЦенаСутки <> СтрокаСтоимости.СуткиВБазе
				ИЛИ НоваяЦенаНеделя <> СтрокаСтоимости.НеделяВБазе
				ИЛИ НоваяЦенаМесяц <> СтрокаСтоимости.МесяцВБазе
				ИЛИ НоваяЦенаКвартал <> СтрокаСтоимости.КварталВБазе
				ИЛИ НоваяЦенаГод <> СтрокаСтоимости.ГодВБазе
				ИЛИ НоваяЦенаДепозит <> СтрокаСтоимости.ДепозитВБазе
				Тогда
				НоваяЗапись = Добавить();
				НоваяЗапись.Период                = ДатаПереоценки;
				НоваяЗапись.Регистратор           = ДокументОбъект.Ссылка;
				НоваяЗапись.ПодразделениеКомпании = ПодразделениеКомпании;
				НоваяЗапись.ВидАренды             = ВидАренды;
				НоваяЗапись.Модель                = СтрокаСтоимости.Модель;
				НоваяЗапись.ВариантКомплектации   = СтрокаСтоимости.ВариантКомплектации;
				НоваяЗапись.Минута                = НоваяЦенаМинута;
				НоваяЗапись.Час                   = НоваяЦенаЧас;
				НоваяЗапись.Сутки                 = НоваяЦенаСутки;
				НоваяЗапись.Неделя                = НоваяЦенаНеделя;
				НоваяЗапись.Месяц                 = НоваяЦенаМесяц;
				НоваяЗапись.Квартал               = НоваяЦенаКвартал;
				НоваяЗапись.Год                   = НоваяЦенаГод;
				НоваяЗапись.Депозит               = НоваяЦенаДепозит;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// скинем переменные
	ТипЦен						= Неопределено;
	РезультатЗапросаПоОпциям	= Неопределено;
	ПроверятьОдинаковыеЦены		= Неопределено;
	ДатаНачалаДействия        	= Неопределено;
	
	// убиваем циклическую ссылку
	ДокументОбъект = Неопределено;
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#КонецЕсли