
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Процедура проводит документ по регистру сведений
//
// Параметры:
//  Объект		 - ДокументОбъект.ДоговорАренды, ДокументОбъект.ДефектовочнаяВедомость - Документ
//  																					 который требуется провести по регистру
//  Автомобиль	 - СправочникСсылка.Автомобили - Автомобиль, для которого фиксируется состояние
//  Состояние	 - ПеречислениеСсылка.АрендаСостоянияАвтомобилей - Записываемое состояние
//  Отказ		 - Булево - Признак отказа от проведения документа
//  Период		 - Дата - Дата, на которую фиксируется состояние автомобиля,
//  					  если дату не передавать, то используется текущая дата.
//
Процедура ЗаписатьСостояние(Объект, Автомобиль, Состояние, Отказ = Ложь, Период = '00010101') Экспорт 
	
	Если Период = '00010101' Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ДоговорАренды") Тогда
		ДоговорАренды = Объект.Ссылка;
	Иначе 
		ДоговорАренды = Объект.ДокументОснование;
	КонецЕсли;
	
	Если ВозможноСостояние(ДоговорАренды, Автомобиль, Состояние, Период) Тогда 
		
		НаборЗаписей = РегистрыСведений.АрендаСостоянияАвтомобилей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Объект.Ссылка);
		НаборЗаписей.Прочитать();
		
		ЗаписьРегистра = НаборЗаписей.Добавить();
		ЗаписьРегистра.Регистратор = Объект.Ссылка;
		ЗаписьРегистра.Период = Период;
		ЗаписьРегистра.Автомобиль = Автомобиль;
		ЗаписьРегистра.Состояние = Состояние;
		ЗаписьРегистра.ДоговорАренды = ДоговорАренды;
		
		НаборЗаписей.Записать();
		
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет возможность установки состояния автомобиля по договору аренды
// при учете текущего состояния автомобиля.
//
// Параметры:
//  ДоговорАренды	 - ДокументСсылка.ДоговорАренды - Договор аренды для проверки состояния
//  Автомобиль		 - СправочникСсылка.Автомобили - Автомобиль для проверки состояния 
//  Состояние		 - ПеречислениеСсылка.АрендаСостоянияАвтомобилей - Состояние для проверки
//  Период			 - Дата - Дата для проверки возможности состояния, если не передавать, то используется текущая дата.
// 
// Возвращаемое значение:
//  Булево - Истина, если переданное состояние возможно, Ложь - в противном случае
//
Функция ВозможноСостояние(ДоговорАренды, Автомобиль, Состояние, Период = '00010101')
	
	Результат = Истина;
	
	Если Период = '00010101' Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорАренды, "Проведен") Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Документ %1 не проведен, проведите документ для отражения операций с автомобилями.'"),
				ДоговорАренды
			)
		);
		Результат = Ложь;	
	КонецЕсли;
	
	ТекущееСостояние = ДанныеСостоянийАвтомобилей(ДоговорАренды,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Автомобиль), Период).Получить(Автомобиль);
	
	ТекущееСоглашение = РегистрыСведений.АрендаДействующиеСоглашения.ДействующееСоглашение(ДоговорАренды, Период);
	
	Если Состояние = Перечисления.АрендаСостоянияАвтомобилей.ВыданКлиенту Тогда
		
		Если НачалоДня(ТекущееСоглашение.ДатаНачала) <> НачалоДня(Период) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Дата выдачи автомобиля от клиента не совпадает с датой начала договора аренды %1.'"),
					Формат(ТекущееСоглашение.ДатаНачала, "ДЛФ=D")
				)
			);
		
			Результат = Ложь;
		КонецЕсли;
			
		Если ТекущееСостояние <> Перечисления.АрендаСостоянияАвтомобилей.НаСтоянке Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выдать можно только находящийся на стоянке автомобиль'"));
			Результат = Ложь;
		КонецЕсли;
		
	ИначеЕсли Состояние = Перечисления.АрендаСостоянияАвтомобилей.ПолученОтКлиента Тогда
		
		Если НачалоДня(ТекущееСоглашение.ДатаОкончания) <> НачалоДня(Период) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Дата приемки автомобиля от клиента не совпадает с датой окончания договора аренды %1.
					|Для оформления приемки введите изменение договора аренды.'"),
					Формат(ТекущееСоглашение.ДатаОкончания, "ДЛФ=D")
				)
			);
			Результат = Ложь;
		КонецЕсли;
			
		Если ТекущееСостояние <> Перечисления.АрендаСостоянияАвтомобилей.ВыданКлиенту Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Принять можно только выданный клиенту автомобиль'"));
			Результат = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает текущие состояния автомобилей по данным регистра сведений. 
//
// Параметры:
//  ДоговорАренды		 - ДокументСсылка.ДоговорАренды - Договор в котором будут выводиться состояния автомобилей.
//  МассивАвтомобилей	 - Массив - Массив автомобилей для вывода состояний 
//  Период				 - Дата - Дата, на которую нужно получить данные.
// 
// Возвращаемое значение:
//  Соответствие - Содержит пары Автомобиль и состояние
//
Функция ДанныеСостоянийАвтомобилей(ДоговорАренды, МассивАвтомобилей, Период = '00010101') Экспорт 
	
	СоответствиеАвтомобилей = Новый Соответствие;
	
	Для Каждого Автомобиль Из МассивАвтомобилей Цикл
		СоответствиеАвтомобилей.Вставить(Автомобиль, Перечисления.АрендаСостоянияАвтомобилей.НаСтоянке);	
	КонецЦикла;
	                
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АрендаСостоянияАвтомобилейСрезПоследних.Автомобиль КАК Автомобиль,
	|	АрендаСостоянияАвтомобилейСрезПоследних.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.АрендаСостоянияАвтомобилей.СрезПоследних(&Период, Автомобиль В (&МассивАвтомобилей)) КАК АрендаСостоянияАвтомобилейСрезПоследних
	|ГДЕ
	|	АрендаСостоянияАвтомобилейСрезПоследних.Состояние <> ЗНАЧЕНИЕ(Перечисление.АрендаСостоянияАвтомобилей.ПолученОтКлиента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АрендаСостоянияАвтомобилейСрезПоследних.Автомобиль КАК Автомобиль,
	|	АрендаСостоянияАвтомобилейСрезПоследних.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.АрендаСостоянияАвтомобилей.СрезПоследних(
	|			&Период,
	|			Автомобиль В (&МассивАвтомобилей)
	|				И ДоговорАренды = &ДоговорАренды) КАК АрендаСостоянияАвтомобилейСрезПоследних";
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("МассивАвтомобилей", МассивАвтомобилей);
	Запрос.УстановитьПараметр("ДоговорАренды", ДоговорАренды);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаТекущихСостояний = МассивРезультатов[0].Выбрать();
	
	Пока ВыборкаТекущихСостояний.Следующий() Цикл
		СоответствиеАвтомобилей.Вставить(ВыборкаТекущихСостояний.Автомобиль, ВыборкаТекущихСостояний.Состояние);	
	КонецЦикла;
	
	ВыборкаСостоянийПоДоговору = МассивРезультатов[1].Выбрать();
	
	Пока ВыборкаСостоянийПоДоговору.Следующий() Цикл
		СоответствиеАвтомобилей.Вставить(ВыборкаСостоянийПоДоговору.Автомобиль, ВыборкаСостоянийПоДоговору.Состояние);	
	КонецЦикла;
	
	Возврат СоответствиеАвтомобилей;
	
КонецФункции

#Область ПараметрыОбработкиРеквизитовОбъекта

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Массив - Возвращаемый массив содержит строковые идентификаторы реквизитов.
//
Функция ПолучитьОбязательныеРеквизиты(Объект) Экспорт
	
	// Обязательные реквизиты регистра
	ОбязательныеРеквизиты = ОбработкаСобытийРегистраСервер.ПолучитьСтандартныеОбязательныеРеквизиты(Объект);
	
	// Возвращаем сформированные параметры проверки
	Возврат ОбязательныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

// Производит формирование параметров проверки заполнения реквизитов объекта на предмет обязательности и уникальности.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Объект, для которого выполняется получение параметров проверки.
//
// Возвращаемое значение:
//  Структура - Возвращаемая структура содержит строковые идентификаторы реквизитов и вариант проверки его заполнения
//  (1-Обязательный, 2-Уникальный, 3-Уникальный и обязательный). Для описания проверки табличных частей используется
//  вложенная структура.
//
Функция ПолучитьУникальныеРеквизиты(Объект) Экспорт
	
	// Структура уникальных реквизитов
	УникальныеРеквизиты = Новый Структура();
	
	// Возвращаем сформированные параметры проверки
	Возврат УникальныеРеквизиты;
	
КонецФункции // ПолучитьОбязательныеРеквизиты()

#КонецОбласти

#КонецОбласти

#КонецЕсли