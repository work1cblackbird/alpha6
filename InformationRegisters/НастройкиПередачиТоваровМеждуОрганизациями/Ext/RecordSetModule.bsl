// Модуль набора записей регистра "Настройки передачи товаров между организациями"

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Обработчик события заполнения объекта как при создании нового, так и при вводе на основании существующего.
//
// Параметры:
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка       - Текст, используемый для формирования наименования/кода нового элемента.
//  СтандартнаяОбработка - Булево       - В данный параметр передается признак выполнения системной обработки события.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийРегистраСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Обработчик события возникающего при необходимости проверки заполнения реквизитов при записи объекта.
//
// Параметры:
//  Отказ                - Булево - Признак отказа от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийРегистраСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Обработчик события возникающего после начала транзакции записи, но до начала записи объекта.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПередЗаписью(Отказ, Замещение)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийРегистраСервер.ПередЗаписью(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачалаОбособленногоУчетаТоваровПоОрганизациям = Константы.ДатаНачалаОбособленногоУчетаТоваровПоОрганизациям.Получить();

	ОбязательныеРеквизитыДляСпособаПередачиПродажа = РегистрыСведений.НастройкиПередачиТоваровМеждуОрганизациями.ПолучитьОбязательныеРеквизитыДляСпособаПередачиПродажа();
	
	НеНужныеРеквизитыДляСпособаПередачиНеПередается = РегистрыСведений.НастройкиПередачиТоваровМеждуОрганизациями.ПолучитьНеНужныеРеквизитыДляСпособаПередачиНеПередается();
	
	Для Каждого Запись Из ЭтотОбъект Цикл
		
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьМноговалютныйУчет") 
			И НЕ ЗначениеЗаполнено(Запись.Валюта) Тогда
			
			ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
			Запись.Валюта = ВалютаРегламентированногоУчета;
			
		КонецЕсли;
		
		Если Запись.СпособПередачиТоваров = Перечисления.СпособыПередачиТоваров.Продажа Тогда
		
			Для Каждого ОбязательныйРеквизит Из ОбязательныеРеквизитыДляСпособаПередачиПродажа Цикл
			
				Если НЕ ЗначениеЗаполнено(Запись[ОбязательныйРеквизит]) Тогда
				
					Отказ = Истина;
					ТекстОшибки = СтрШаблон(НСтр("ru = 'Поле ""%1"" не заполнено'"), ОбязательныйРеквизит);
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
				
				КонецЕсли;
			
			КонецЦикла;
			
		ИначеЕсли Запись.СпособПередачиТоваров = Перечисления.СпособыПередачиТоваров.НеПередается Тогда
		
			Для Каждого НеНужныйРеквизит Из НеНужныеРеквизитыДляСпособаПередачиНеПередается Цикл
			
				Запись[НеНужныйРеквизит] = Неопределено;
			
			КонецЦикла;
		
		КонецЕсли;
		
		Если Запись.Период < ДатаНачалаОбособленногоУчетаТоваровПоОрганизациям Тогда
			
			Отказ = Истина;
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Передача товаров возможна не ранее даты начала обособленного учета 
											   |товаров по организациям <%1>, указанной в параметрах учета'"),
				Формат(ДатаНачалаОбособленногоУчетаТоваровПоОрганизациям, "ДЛФ=Д"));
				
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
		КонецЕсли;
		
		Если Запись.ОрганизацияОтправитель = Запись.ОрганизацияПолучатель Тогда
		
			Отказ = Истина;
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Между одинаковыми организациями передача товаров не требуется'"));
		
		КонецЕсли;
		
		ПроверитьУстановкуРеквизитаНашеПредприятие(Запись.Контрагент, Отказ);
		
		ПроверитьУстановкуРеквизитаНашеПредприятие(Запись.КонтрагентПоставки, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик события возникающего после записи объекта в базу данных, но до окончания транзакции записи.
//
// Параметры:
//  Отказ - Булево - Признак отказа от совершения операции.
//
Процедура ПриЗаписи(Отказ)
	
	// Вызываем общий обработчик события
	Если НЕ ОбработкаСобытийРегистраСервер.ПриЗаписи(ЭтотОбъект, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьУстановкуРеквизитаНашеПредприятие(КонтрагентСсылка, Отказ)

	Если ЗначениеЗаполнено(КонтрагентСсылка)
		И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтрагентСсылка, "НашеПредприятие") Тогда
	
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'У контрагента <%1> не установлен признак <Наше предприятие>.
														 		   |В связанной организации укажите <Контрагента интеркампани>'"),
			КонтрагентСсылка));
	
	КонецЕсли;
		
КонецПроцедуры


#КонецОбласти

#КонецЕсли